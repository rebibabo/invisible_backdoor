<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3886.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">spapr_vio_busdev_init</name><parameter_list pos:start="1:33" pos:end="1:51">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:46"><name pos:start="1:34" pos:end="1:44">DeviceState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:50">qdev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:25">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">VIOsPAPRDevice</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">dev</name> <init pos:start="5:25" pos:end="5:48">= <expr pos:start="5:27" pos:end="5:48"><operator pos:start="5:27" pos:end="5:27">(</operator><name pos:start="5:28" pos:end="5:41">VIOsPAPRDevice</name> <operator pos:start="5:43" pos:end="5:43">*</operator><operator pos:start="5:44" pos:end="5:44">)</operator><name pos:start="5:45" pos:end="5:48">qdev</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:62"><decl pos:start="7:5" pos:end="7:61"><type pos:start="7:5" pos:end="7:25"><name pos:start="7:5" pos:end="7:23">VIOsPAPRDeviceClass</name> <modifier pos:start="7:25" pos:end="7:25">*</modifier></type><name pos:start="7:26" pos:end="7:27">pc</name> <init pos:start="7:29" pos:end="7:61">= <expr pos:start="7:31" pos:end="7:61"><call pos:start="7:31" pos:end="7:61"><name pos:start="7:31" pos:end="7:56">VIO_SPAPR_DEVICE_GET_CLASS</name><argument_list pos:start="7:57" pos:end="7:61">(<argument pos:start="7:58" pos:end="7:60"><expr pos:start="7:58" pos:end="7:60"><name pos:start="7:58" pos:end="7:60">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:12">id</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="59:5"><if pos:start="13:5" pos:end="45:5">if <condition pos:start="13:8" pos:end="13:23">(<expr pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:11">dev</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:16">reg</name></name> <operator pos:start="13:18" pos:end="13:19">!=</operator> <operator pos:start="13:21" pos:end="13:21">-</operator><literal type="number" pos:start="13:22" pos:end="13:22">1</literal></expr>)</condition> <block pos:start="13:25" pos:end="45:5">{<block_content pos:start="27:9" pos:end="43:9">

        <comment type="block" pos:start="15:9" pos:end="25:11">/*

         * Explicitly assigned address, just verify that no-one else

         * is using it.  other mechanism). We have to open code this

         * rather than using spapr_vio_find_by_reg() because sdev

         * itself is already in the list.

         */</comment>

        <decl_stmt pos:start="27:9" pos:end="27:50"><decl pos:start="27:9" pos:end="27:49"><type pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:22">VIOsPAPRDevice</name> <modifier pos:start="27:24" pos:end="27:24">*</modifier></type><name pos:start="27:25" pos:end="27:29">other</name> <init pos:start="27:31" pos:end="27:49">= <expr pos:start="27:33" pos:end="27:49"><call pos:start="27:33" pos:end="27:49"><name pos:start="27:33" pos:end="27:44">reg_conflict</name><argument_list pos:start="27:45" pos:end="27:49">(<argument pos:start="27:46" pos:end="27:48"><expr pos:start="27:46" pos:end="27:48"><name pos:start="27:46" pos:end="27:48">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="31:9" pos:end="43:9"><if pos:start="31:9" pos:end="43:9">if <condition pos:start="31:12" pos:end="31:18">(<expr pos:start="31:13" pos:end="31:17"><name pos:start="31:13" pos:end="31:17">other</name></expr>)</condition> <block pos:start="31:20" pos:end="43:9">{<block_content pos:start="33:13" pos:end="41:22">

            <expr_stmt pos:start="33:13" pos:end="39:30"><expr pos:start="33:13" pos:end="39:29"><call pos:start="33:13" pos:end="39:29"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="39:29">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>, <argument pos:start="33:29" pos:end="33:78"><expr pos:start="33:29" pos:end="33:78"><literal type="string" pos:start="33:29" pos:end="33:78">"vio: %s and %s devices conflict at address %#x\n"</literal></expr></argument>,

                    <argument pos:start="35:21" pos:end="35:53"><expr pos:start="35:21" pos:end="35:53"><call pos:start="35:21" pos:end="35:53"><name pos:start="35:21" pos:end="35:39">object_get_typename</name><argument_list pos:start="35:40" pos:end="35:53">(<argument pos:start="35:41" pos:end="35:52"><expr pos:start="35:41" pos:end="35:52"><call pos:start="35:41" pos:end="35:52"><name pos:start="35:41" pos:end="35:46">OBJECT</name><argument_list pos:start="35:47" pos:end="35:52">(<argument pos:start="35:48" pos:end="35:51"><expr pos:start="35:48" pos:end="35:51"><name pos:start="35:48" pos:end="35:51">qdev</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="37:21" pos:end="37:61"><expr pos:start="37:21" pos:end="37:61"><call pos:start="37:21" pos:end="37:61"><name pos:start="37:21" pos:end="37:39">object_get_typename</name><argument_list pos:start="37:40" pos:end="37:61">(<argument pos:start="37:41" pos:end="37:60"><expr pos:start="37:41" pos:end="37:60"><call pos:start="37:41" pos:end="37:60"><name pos:start="37:41" pos:end="37:46">OBJECT</name><argument_list pos:start="37:47" pos:end="37:60">(<argument pos:start="37:48" pos:end="37:59"><expr pos:start="37:48" pos:end="37:59"><operator pos:start="37:48" pos:end="37:48">&amp;</operator><name pos:start="37:49" pos:end="37:59"><name pos:start="37:49" pos:end="37:53">other</name><operator pos:start="37:54" pos:end="37:55">-&gt;</operator><name pos:start="37:56" pos:end="37:59">qdev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="39:21" pos:end="39:28"><expr pos:start="39:21" pos:end="39:28"><name pos:start="39:21" pos:end="39:28"><name pos:start="39:21" pos:end="39:23">dev</name><operator pos:start="39:24" pos:end="39:25">-&gt;</operator><name pos:start="39:26" pos:end="39:28">reg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:22">return <expr pos:start="41:20" pos:end="41:21"><operator pos:start="41:20" pos:end="41:20">-</operator><literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="45:7" pos:end="59:5">else <block pos:start="45:12" pos:end="59:5">{<block_content pos:start="49:9" pos:end="57:36">

        <comment type="block" pos:start="47:9" pos:end="47:39">/* Need to assign an address */</comment>

        <decl_stmt pos:start="49:9" pos:end="49:77"><decl pos:start="49:9" pos:end="49:76"><type pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:19">VIOsPAPRBus</name> <modifier pos:start="49:21" pos:end="49:21">*</modifier></type><name pos:start="49:22" pos:end="49:24">bus</name> <init pos:start="49:26" pos:end="49:76">= <expr pos:start="49:28" pos:end="49:76"><call pos:start="49:28" pos:end="49:76"><name pos:start="49:28" pos:end="49:36">DO_UPCAST</name><argument_list pos:start="49:37" pos:end="49:76">(<argument pos:start="49:38" pos:end="49:48"><expr pos:start="49:38" pos:end="49:48"><name pos:start="49:38" pos:end="49:48">VIOsPAPRBus</name></expr></argument>, <argument pos:start="49:51" pos:end="49:53"><expr pos:start="49:51" pos:end="49:53"><name pos:start="49:51" pos:end="49:53">bus</name></expr></argument>, <argument pos:start="49:56" pos:end="49:75"><expr pos:start="49:56" pos:end="49:75"><name pos:start="49:56" pos:end="49:75"><name pos:start="49:56" pos:end="49:58">dev</name><operator pos:start="49:59" pos:end="49:60">-&gt;</operator><name pos:start="49:61" pos:end="49:64">qdev</name><operator pos:start="49:65" pos:end="49:65">.</operator><name pos:start="49:66" pos:end="49:75">parent_bus</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <do pos:start="53:9" pos:end="57:36">do <block pos:start="53:12" pos:end="57:9">{<block_content pos:start="55:13" pos:end="55:39">

            <expr_stmt pos:start="55:13" pos:end="55:39"><expr pos:start="55:13" pos:end="55:38"><name pos:start="55:13" pos:end="55:20"><name pos:start="55:13" pos:end="55:15">dev</name><operator pos:start="55:16" pos:end="55:17">-&gt;</operator><name pos:start="55:18" pos:end="55:20">reg</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <name pos:start="55:24" pos:end="55:36"><name pos:start="55:24" pos:end="55:26">bus</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:36">next_reg</name></name><operator pos:start="55:37" pos:end="55:38">++</operator></expr>;</expr_stmt>

        </block_content>}</block> while <condition pos:start="57:17" pos:end="57:35">(<expr pos:start="57:18" pos:end="57:34"><call pos:start="57:18" pos:end="57:34"><name pos:start="57:18" pos:end="57:29">reg_conflict</name><argument_list pos:start="57:30" pos:end="57:34">(<argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">dev</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:58">/* Don't overwrite ids assigned on the command line */</comment>

    <if_stmt pos:start="65:5" pos:end="77:5"><if pos:start="65:5" pos:end="77:5">if <condition pos:start="65:8" pos:end="65:22">(<expr pos:start="65:9" pos:end="65:21"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:21"><name pos:start="65:10" pos:end="65:12">dev</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:18">qdev</name><operator pos:start="65:19" pos:end="65:19">.</operator><name pos:start="65:20" pos:end="65:21">id</name></name></expr>)</condition> <block pos:start="65:24" pos:end="77:5">{<block_content pos:start="67:9" pos:end="75:26">

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:10">id</name> <operator pos:start="67:12" pos:end="67:12">=</operator> <call pos:start="67:14" pos:end="67:37"><name pos:start="67:14" pos:end="67:32">vio_format_dev_name</name><argument_list pos:start="67:33" pos:end="67:37">(<argument pos:start="67:34" pos:end="67:36"><expr pos:start="67:34" pos:end="67:36"><name pos:start="67:34" pos:end="67:36">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="73:9"><if pos:start="69:9" pos:end="73:9">if <condition pos:start="69:12" pos:end="69:16">(<expr pos:start="69:13" pos:end="69:15"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:15">id</name></expr>)</condition> <block pos:start="69:18" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:22">

            <return pos:start="71:13" pos:end="71:22">return <expr pos:start="71:20" pos:end="71:21"><operator pos:start="71:20" pos:end="71:20">-</operator><literal type="number" pos:start="71:21" pos:end="71:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:26"><expr pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:20"><name pos:start="75:9" pos:end="75:11">dev</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:17">qdev</name><operator pos:start="75:18" pos:end="75:18">.</operator><name pos:start="75:19" pos:end="75:20">id</name></name> <operator pos:start="75:22" pos:end="75:22">=</operator> <name pos:start="75:24" pos:end="75:25">id</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:72"><expr pos:start="81:5" pos:end="81:71"><name pos:start="81:5" pos:end="81:13"><name pos:start="81:5" pos:end="81:7">dev</name><operator pos:start="81:8" pos:end="81:9">-&gt;</operator><name pos:start="81:10" pos:end="81:13">qirq</name></name> <operator pos:start="81:15" pos:end="81:15">=</operator> <call pos:start="81:17" pos:end="81:71"><name pos:start="81:17" pos:end="81:34">spapr_allocate_msi</name><argument_list pos:start="81:35" pos:end="81:71">(<argument pos:start="81:36" pos:end="81:51"><expr pos:start="81:36" pos:end="81:51"><name pos:start="81:36" pos:end="81:51"><name pos:start="81:36" pos:end="81:38">dev</name><operator pos:start="81:39" pos:end="81:40">-&gt;</operator><name pos:start="81:41" pos:end="81:51">vio_irq_num</name></name></expr></argument>, <argument pos:start="81:54" pos:end="81:70"><expr pos:start="81:54" pos:end="81:70"><operator pos:start="81:54" pos:end="81:54">&amp;</operator><name pos:start="81:55" pos:end="81:70"><name pos:start="81:55" pos:end="81:57">dev</name><operator pos:start="81:58" pos:end="81:59">-&gt;</operator><name pos:start="81:60" pos:end="81:70">vio_irq_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:19">(<expr pos:start="83:9" pos:end="83:18"><operator pos:start="83:9" pos:end="83:9">!</operator><name pos:start="83:10" pos:end="83:18"><name pos:start="83:10" pos:end="83:12">dev</name><operator pos:start="83:13" pos:end="83:14">-&gt;</operator><name pos:start="83:15" pos:end="83:18">qirq</name></name></expr>)</condition> <block pos:start="83:21" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:18">

        <return pos:start="85:9" pos:end="85:18">return <expr pos:start="85:16" pos:end="85:17"><operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:19"><expr pos:start="91:5" pos:end="91:18"><call pos:start="91:5" pos:end="91:18"><name pos:start="91:5" pos:end="91:13">rtce_init</name><argument_list pos:start="91:14" pos:end="91:18">(<argument pos:start="91:15" pos:end="91:17"><expr pos:start="91:15" pos:end="91:17"><name pos:start="91:15" pos:end="91:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:25">return <expr pos:start="95:12" pos:end="95:24"><call pos:start="95:12" pos:end="95:24"><name pos:start="95:12" pos:end="95:19"><name pos:start="95:12" pos:end="95:13">pc</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:19">init</name></name><argument_list pos:start="95:20" pos:end="95:24">(<argument pos:start="95:21" pos:end="95:23"><expr pos:start="95:21" pos:end="95:23"><name pos:start="95:21" pos:end="95:23">dev</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
