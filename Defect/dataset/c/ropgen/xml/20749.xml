<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20749.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:22"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:22">uint32_t</name></type> <name pos:start="1:24" pos:end="1:40">ldl_phys_internal</name><parameter_list pos:start="1:41" pos:end="3:67">(<parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:47">hwaddr</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:66"><decl pos:start="3:42" pos:end="3:66"><type pos:start="3:42" pos:end="3:66"><name pos:start="3:42" pos:end="3:59"><name pos:start="3:42" pos:end="3:45">enum</name> <name pos:start="3:47" pos:end="3:59">device_endian</name></name></type> <name pos:start="3:61" pos:end="3:66">endian</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="83:1">{<block_content pos:start="7:5" pos:end="81:15">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:25"><name pos:start="11:5" pos:end="11:23">MemoryRegionSection</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier></type><name pos:start="11:26" pos:end="11:32">section</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:86"><expr pos:start="15:5" pos:end="15:85"><name pos:start="15:5" pos:end="15:11">section</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:85"><name pos:start="15:15" pos:end="15:28">phys_page_find</name><argument_list pos:start="15:29" pos:end="15:85">(<argument pos:start="15:30" pos:end="15:58"><expr pos:start="15:30" pos:end="15:58"><name pos:start="15:30" pos:end="15:58"><name pos:start="15:30" pos:end="15:49">address_space_memory</name><operator pos:start="15:50" pos:end="15:50">.</operator><name pos:start="15:51" pos:end="15:58">dispatch</name></name></expr></argument>, <argument pos:start="15:61" pos:end="15:84"><expr pos:start="15:61" pos:end="15:84"><name pos:start="15:61" pos:end="15:64">addr</name> <operator pos:start="15:66" pos:end="15:67">&gt;&gt;</operator> <name pos:start="15:69" pos:end="15:84">TARGET_PAGE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="19:5" pos:end="79:5"><if pos:start="19:5" pos:end="47:5">if <condition pos:start="19:8" pos:end="21:46">(<expr pos:start="19:9" pos:end="21:45"><operator pos:start="19:9" pos:end="19:9">!</operator><operator pos:start="19:10" pos:end="19:10">(</operator><call pos:start="19:11" pos:end="19:43"><name pos:start="19:11" pos:end="19:30">memory_region_is_ram</name><argument_list pos:start="19:31" pos:end="19:43">(<argument pos:start="19:32" pos:end="19:42"><expr pos:start="19:32" pos:end="19:42"><name pos:start="19:32" pos:end="19:42"><name pos:start="19:32" pos:end="19:38">section</name><operator pos:start="19:39" pos:end="19:40">-&gt;</operator><name pos:start="19:41" pos:end="19:42">mr</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:45" pos:end="19:46">||</operator>

          <call pos:start="21:11" pos:end="21:44"><name pos:start="21:11" pos:end="21:31">memory_region_is_romd</name><argument_list pos:start="21:32" pos:end="21:44">(<argument pos:start="21:33" pos:end="21:43"><expr pos:start="21:33" pos:end="21:43"><name pos:start="21:33" pos:end="21:43"><name pos:start="21:33" pos:end="21:39">section</name><operator pos:start="21:40" pos:end="21:41">-&gt;</operator><name pos:start="21:42" pos:end="21:43">mr</name></name></expr></argument>)</argument_list></call><operator pos:start="21:45" pos:end="21:45">)</operator></expr>)</condition> <block pos:start="21:48" pos:end="47:5">{<block_content pos:start="25:9" pos:end="46:0">

        <comment type="block" pos:start="23:9" pos:end="23:22">/* I/O case */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:57"><expr pos:start="25:9" pos:end="25:56"><name pos:start="25:9" pos:end="25:12">addr</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <call pos:start="25:16" pos:end="25:56"><name pos:start="25:16" pos:end="25:41">memory_region_section_addr</name><argument_list pos:start="25:42" pos:end="25:56">(<argument pos:start="25:43" pos:end="25:49"><expr pos:start="25:43" pos:end="25:49"><name pos:start="25:43" pos:end="25:49">section</name></expr></argument>, <argument pos:start="25:52" pos:end="25:55"><expr pos:start="25:52" pos:end="25:55"><name pos:start="25:52" pos:end="25:55">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="30:0"><expr pos:start="27:9" pos:end="27:47"><name pos:start="27:9" pos:end="27:11">val</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <call pos:start="27:15" pos:end="27:47"><name pos:start="27:15" pos:end="27:25">io_mem_read</name><argument_list pos:start="27:26" pos:end="27:47">(<argument pos:start="27:27" pos:end="27:37"><expr pos:start="27:27" pos:end="27:37"><name pos:start="27:27" pos:end="27:37"><name pos:start="27:27" pos:end="27:33">section</name><operator pos:start="27:34" pos:end="27:35">-&gt;</operator><name pos:start="27:36" pos:end="27:37">mr</name></name></expr></argument>, <argument pos:start="27:40" pos:end="27:43"><expr pos:start="27:40" pos:end="27:43"><name pos:start="27:40" pos:end="27:43">addr</name></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><literal type="number" pos:start="27:46" pos:end="27:46">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="29:1" pos:end="29:35">#<cpp:directive pos:start="29:2" pos:end="29:3">if</cpp:directive> <expr pos:start="29:5" pos:end="29:35"><call pos:start="29:5" pos:end="29:35"><name pos:start="29:5" pos:end="29:11">defined</name><argument_list pos:start="29:12" pos:end="29:35">(<argument pos:start="29:13" pos:end="29:34"><expr pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:34">TARGET_WORDS_BIGENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <if_stmt pos:start="31:9" pos:end="38:0"><if pos:start="31:9" pos:end="38:0">if <condition pos:start="31:12" pos:end="31:43">(<expr pos:start="31:13" pos:end="31:42"><name pos:start="31:13" pos:end="31:18">endian</name> <operator pos:start="31:20" pos:end="31:21">==</operator> <name pos:start="31:23" pos:end="31:42">DEVICE_LITTLE_ENDIAN</name></expr>)</condition> <block pos:start="31:45" pos:end="38:0">{<block_content pos:start="33:13" pos:end="33:31">

            <expr_stmt pos:start="33:13" pos:end="33:31"><expr pos:start="33:13" pos:end="33:30"><name pos:start="33:13" pos:end="33:15">val</name> <operator pos:start="33:17" pos:end="33:17">=</operator> <call pos:start="33:19" pos:end="33:30"><name pos:start="33:19" pos:end="33:25">bswap32</name><argument_list pos:start="33:26" pos:end="33:30">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="37:1" pos:end="37:5">#<cpp:directive pos:start="37:2" pos:end="37:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="39:9" pos:end="46:0"><if pos:start="39:9" pos:end="46:0">if <condition pos:start="39:12" pos:end="39:40">(<expr pos:start="39:13" pos:end="39:39"><name pos:start="39:13" pos:end="39:18">endian</name> <operator pos:start="39:20" pos:end="39:21">==</operator> <name pos:start="39:23" pos:end="39:39">DEVICE_BIG_ENDIAN</name></expr>)</condition> <block pos:start="39:42" pos:end="46:0">{<block_content pos:start="41:13" pos:end="41:31">

            <expr_stmt pos:start="41:13" pos:end="41:31"><expr pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:15">val</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <call pos:start="41:19" pos:end="41:30"><name pos:start="41:19" pos:end="41:25">bswap32</name><argument_list pos:start="41:26" pos:end="41:30">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="79:5">else <block pos:start="47:12" pos:end="79:5">{<block_content pos:start="51:9" pos:end="77:9">

        <comment type="block" pos:start="49:9" pos:end="49:22">/* RAM case */</comment>

        <expr_stmt pos:start="51:9" pos:end="55:76"><expr pos:start="51:9" pos:end="55:75"><name pos:start="51:9" pos:end="51:11">ptr</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="55:75"><name pos:start="51:15" pos:end="51:30">qemu_get_ram_ptr</name><argument_list pos:start="51:31" pos:end="55:75">(<argument pos:start="51:32" pos:end="55:74"><expr pos:start="51:32" pos:end="55:74"><operator pos:start="51:32" pos:end="51:32">(</operator><call pos:start="51:33" pos:end="51:71"><name pos:start="51:33" pos:end="51:58">memory_region_get_ram_addr</name><argument_list pos:start="51:59" pos:end="51:71">(<argument pos:start="51:60" pos:end="51:70"><expr pos:start="51:60" pos:end="51:70"><name pos:start="51:60" pos:end="51:70"><name pos:start="51:60" pos:end="51:66">section</name><operator pos:start="51:67" pos:end="51:68">-&gt;</operator><name pos:start="51:69" pos:end="51:70">mr</name></name></expr></argument>)</argument_list></call>

                                <operator pos:start="53:33" pos:end="53:33">&amp;</operator> <name pos:start="53:35" pos:end="53:50">TARGET_PAGE_MASK</name><operator pos:start="53:51" pos:end="53:51">)</operator>

                               <operator pos:start="55:32" pos:end="55:32">+</operator> <call pos:start="55:34" pos:end="55:74"><name pos:start="55:34" pos:end="55:59">memory_region_section_addr</name><argument_list pos:start="55:60" pos:end="55:74">(<argument pos:start="55:61" pos:end="55:67"><expr pos:start="55:61" pos:end="55:67"><name pos:start="55:61" pos:end="55:67">section</name></expr></argument>, <argument pos:start="55:70" pos:end="55:73"><expr pos:start="55:70" pos:end="55:73"><name pos:start="55:70" pos:end="55:73">addr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="57:9" pos:end="77:9">switch <condition pos:start="57:16" pos:end="57:23">(<expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">endian</name></expr>)</condition> <block pos:start="57:25" pos:end="77:9">{<block_content pos:start="59:9" pos:end="75:18">

        <case pos:start="59:9" pos:end="59:34">case <expr pos:start="59:14" pos:end="59:33"><name pos:start="59:14" pos:end="59:33">DEVICE_LITTLE_ENDIAN</name></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:15">val</name> <operator pos:start="61:17" pos:end="61:17">=</operator> <call pos:start="61:19" pos:end="61:31"><name pos:start="61:19" pos:end="61:26">ldl_le_p</name><argument_list pos:start="61:27" pos:end="61:31">(<argument pos:start="61:28" pos:end="61:30"><expr pos:start="61:28" pos:end="61:30"><name pos:start="61:28" pos:end="61:30">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:31">case <expr pos:start="65:14" pos:end="65:30"><name pos:start="65:14" pos:end="65:30">DEVICE_BIG_ENDIAN</name></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:15">val</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:31"><name pos:start="67:19" pos:end="67:26">ldl_be_p</name><argument_list pos:start="67:27" pos:end="67:31">(<argument pos:start="67:28" pos:end="67:30"><expr pos:start="67:28" pos:end="67:30"><name pos:start="67:28" pos:end="67:30">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="69:13" pos:end="69:18">break;</break>

        <default pos:start="71:9" pos:end="71:16">default:</default>

            <expr_stmt pos:start="73:13" pos:end="73:29"><expr pos:start="73:13" pos:end="73:28"><name pos:start="73:13" pos:end="73:15">val</name> <operator pos:start="73:17" pos:end="73:17">=</operator> <call pos:start="73:19" pos:end="73:28"><name pos:start="73:19" pos:end="73:23">ldl_p</name><argument_list pos:start="73:24" pos:end="73:28">(<argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="75:13" pos:end="75:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>

    <return pos:start="81:5" pos:end="81:15">return <expr pos:start="81:12" pos:end="81:14"><name pos:start="81:12" pos:end="81:14">val</name></expr>;</return>

</block_content>}</block></function>
</unit>
