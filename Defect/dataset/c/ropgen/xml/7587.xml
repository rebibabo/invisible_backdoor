<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7587.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">run_ccw</name><parameter_list pos:start="1:19" pos:end="1:75">(<parameter pos:start="1:20" pos:end="1:45"><decl pos:start="1:20" pos:end="1:45"><type pos:start="1:20" pos:end="1:45"><name pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:25">struct</name> <name pos:start="1:27" pos:end="1:39">subchannel_id</name></name></type> <name pos:start="1:41" pos:end="1:45">schid</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">cmd</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:65"><decl pos:start="1:57" pos:end="1:65"><type pos:start="1:57" pos:end="1:65"><name pos:start="1:57" pos:end="1:60">void</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:65">ptr</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:74"><decl pos:start="1:68" pos:end="1:74"><type pos:start="1:68" pos:end="1:74"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:74">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:15">ccw1</name></name></type> <name pos:start="5:17" pos:end="5:19">ccw</name> <init pos:start="5:21" pos:end="5:24">= <expr pos:start="5:23" pos:end="5:24"><block pos:start="5:23" pos:end="5:24">{}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:18">cmd_orb</name></name></type> <name pos:start="7:20" pos:end="7:22">orb</name> <init pos:start="7:24" pos:end="7:27">= <expr pos:start="7:26" pos:end="7:27"><block pos:start="7:26" pos:end="7:27">{}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:16">schib</name></name></type> <name pos:start="9:18" pos:end="9:22">schib</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:10"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">r</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:34">/* start command processing */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><call pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:13">stsch_err</name><argument_list pos:start="17:14" pos:end="17:28">(<argument pos:start="17:15" pos:end="17:19"><expr pos:start="17:15" pos:end="17:19"><name pos:start="17:15" pos:end="17:19">schid</name></expr></argument>, <argument pos:start="17:22" pos:end="17:27"><expr pos:start="17:22" pos:end="17:27"><operator pos:start="17:22" pos:end="17:22">&amp;</operator><name pos:start="17:23" pos:end="17:27">schib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:9">schib</name><operator pos:start="19:10" pos:end="19:10">.</operator><name pos:start="19:11" pos:end="19:14">scsw</name><operator pos:start="19:15" pos:end="19:15">.</operator><name pos:start="19:16" pos:end="19:19">ctrl</name></name> <operator pos:start="19:21" pos:end="19:21">=</operator> <name pos:start="19:23" pos:end="19:42">SCSW_FCTL_START_FUNC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:24"><expr pos:start="21:5" pos:end="21:23"><call pos:start="21:5" pos:end="21:23"><name pos:start="21:5" pos:end="21:8">msch</name><argument_list pos:start="21:9" pos:end="21:23">(<argument pos:start="21:10" pos:end="21:14"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:14">schid</name></expr></argument>, <argument pos:start="21:17" pos:end="21:22"><expr pos:start="21:17" pos:end="21:22"><operator pos:start="21:17" pos:end="21:17">&amp;</operator><name pos:start="21:18" pos:end="21:22">schib</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:34">/* start subchannel command */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:7">orb</name><operator pos:start="27:8" pos:end="27:8">.</operator><name pos:start="27:9" pos:end="27:11">fmt</name></name> <operator pos:start="27:13" pos:end="27:13">=</operator> <literal type="number" pos:start="27:15" pos:end="27:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:30"><expr pos:start="29:5" pos:end="29:29"><name pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:7">orb</name><operator pos:start="29:8" pos:end="29:8">.</operator><name pos:start="29:9" pos:end="29:11">cpa</name></name> <operator pos:start="29:13" pos:end="29:13">=</operator> <operator pos:start="29:15" pos:end="29:15">(</operator><name pos:start="29:16" pos:end="29:18">u32</name><operator pos:start="29:19" pos:end="29:19">)</operator><operator pos:start="29:20" pos:end="29:20">(</operator><name pos:start="29:21" pos:end="29:24">long</name><operator pos:start="29:25" pos:end="29:25">)</operator><operator pos:start="29:26" pos:end="29:26">&amp;</operator><name pos:start="29:27" pos:end="29:29">ccw</name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:19"><expr pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:7">orb</name><operator pos:start="31:8" pos:end="31:8">.</operator><name pos:start="31:9" pos:end="31:11">lpm</name></name> <operator pos:start="31:13" pos:end="31:13">=</operator> <literal type="number" pos:start="31:15" pos:end="31:18">0x80</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:23"><expr pos:start="35:5" pos:end="35:22"><name pos:start="35:5" pos:end="35:16"><name pos:start="35:5" pos:end="35:7">ccw</name><operator pos:start="35:8" pos:end="35:8">.</operator><name pos:start="35:9" pos:end="35:16">cmd_code</name></name> <operator pos:start="35:18" pos:end="35:18">=</operator> <name pos:start="35:20" pos:end="35:22">cmd</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:24"><expr pos:start="37:5" pos:end="37:23"><name pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:7">ccw</name><operator pos:start="37:8" pos:end="37:8">.</operator><name pos:start="37:9" pos:end="37:11">cda</name></name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">(</operator><name pos:start="37:16" pos:end="37:19">long</name><operator pos:start="37:20" pos:end="37:20">)</operator><name pos:start="37:21" pos:end="37:23">ptr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:20"><expr pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:7">ccw</name><operator pos:start="39:8" pos:end="39:8">.</operator><name pos:start="39:9" pos:end="39:13">count</name></name> <operator pos:start="39:15" pos:end="39:15">=</operator> <name pos:start="39:17" pos:end="39:19">len</name></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:26"><expr pos:start="43:5" pos:end="43:25"><name pos:start="43:5" pos:end="43:5">r</name> <operator pos:start="43:7" pos:end="43:7">=</operator> <call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:12">ssch</name><argument_list pos:start="43:13" pos:end="43:25">(<argument pos:start="43:14" pos:end="43:18"><expr pos:start="43:14" pos:end="43:18"><name pos:start="43:14" pos:end="43:18">schid</name></expr></argument>, <argument pos:start="43:21" pos:end="43:24"><expr pos:start="43:21" pos:end="43:24"><operator pos:start="43:21" pos:end="43:21">&amp;</operator><name pos:start="43:22" pos:end="43:24">orb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="53:7">/*

     * XXX Wait until device is done processing the CCW. For now we can

     *     assume that a simple tsch will have finished the CCW processing,

     *     but the architecture allows for asynchronous operation

     */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><call pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:14">drain_irqs</name><argument_list pos:start="55:15" pos:end="55:21">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><name pos:start="57:12" pos:end="57:12">r</name></expr>;</return>

</block_content>}</block></function>
</unit>
