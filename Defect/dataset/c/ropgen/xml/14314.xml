<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14314.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:32">cow_read</name><parameter_list pos:start="1:33" pos:end="3:62">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:73"><decl pos:start="1:56" pos:end="1:73"><type pos:start="1:56" pos:end="1:73"><name pos:start="1:56" pos:end="1:62">int64_t</name></type> <name pos:start="1:64" pos:end="1:73">sector_num</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:45"><decl pos:start="3:34" pos:end="3:45"><type pos:start="3:34" pos:end="3:45"><name pos:start="3:34" pos:end="3:40">uint8_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:45">buf</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:50">int</name></type> <name pos:start="3:52" pos:end="3:61">nb_sectors</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:13">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVCowState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">n</name></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="57:5">while <condition pos:start="13:11" pos:end="13:26">(<expr pos:start="13:12" pos:end="13:25"><name pos:start="13:12" pos:end="13:21">nb_sectors</name> <operator pos:start="13:23" pos:end="13:23">&gt;</operator> <literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr>)</condition> <block pos:start="13:28" pos:end="57:5">{<block_content pos:start="15:9" pos:end="55:23">

        <if_stmt pos:start="15:9" pos:end="49:9"><if pos:start="15:9" pos:end="29:9">if <condition pos:start="15:12" pos:end="15:64">(<expr pos:start="15:13" pos:end="15:63"><call pos:start="15:13" pos:end="15:63"><name pos:start="15:13" pos:end="15:31">cow_co_is_allocated</name><argument_list pos:start="15:32" pos:end="15:63">(<argument pos:start="15:33" pos:end="15:34"><expr pos:start="15:33" pos:end="15:34"><name pos:start="15:33" pos:end="15:34">bs</name></expr></argument>, <argument pos:start="15:37" pos:end="15:46"><expr pos:start="15:37" pos:end="15:46"><name pos:start="15:37" pos:end="15:46">sector_num</name></expr></argument>, <argument pos:start="15:49" pos:end="15:58"><expr pos:start="15:49" pos:end="15:58"><name pos:start="15:49" pos:end="15:58">nb_sectors</name></expr></argument>, <argument pos:start="15:61" pos:end="15:62"><expr pos:start="15:61" pos:end="15:62"><operator pos:start="15:61" pos:end="15:61">&amp;</operator><name pos:start="15:62" pos:end="15:62">n</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:66" pos:end="29:9">{<block_content pos:start="17:13" pos:end="27:13">

            <expr_stmt pos:start="17:13" pos:end="21:38"><expr pos:start="17:13" pos:end="21:37"><name pos:start="17:13" pos:end="17:15">ret</name> <operator pos:start="17:17" pos:end="17:17">=</operator> <call pos:start="17:19" pos:end="21:37"><name pos:start="17:19" pos:end="17:28">bdrv_pread</name><argument_list pos:start="17:29" pos:end="21:37">(<argument pos:start="17:30" pos:end="17:37"><expr pos:start="17:30" pos:end="17:37"><name pos:start="17:30" pos:end="17:37"><name pos:start="17:30" pos:end="17:31">bs</name><operator pos:start="17:32" pos:end="17:33">-&gt;</operator><name pos:start="17:34" pos:end="17:37">file</name></name></expr></argument>,

                        <argument pos:start="19:25" pos:end="19:64"><expr pos:start="19:25" pos:end="19:64"><name pos:start="19:25" pos:end="19:45"><name pos:start="19:25" pos:end="19:25">s</name><operator pos:start="19:26" pos:end="19:27">-&gt;</operator><name pos:start="19:28" pos:end="19:45">cow_sectors_offset</name></name> <operator pos:start="19:47" pos:end="19:47">+</operator> <name pos:start="19:49" pos:end="19:58">sector_num</name> <operator pos:start="19:60" pos:end="19:60">*</operator> <literal type="number" pos:start="19:62" pos:end="19:64">512</literal></expr></argument>,

                        <argument pos:start="21:25" pos:end="21:27"><expr pos:start="21:25" pos:end="21:27"><name pos:start="21:25" pos:end="21:27">buf</name></expr></argument>, <argument pos:start="21:30" pos:end="21:36"><expr pos:start="21:30" pos:end="21:36"><name pos:start="21:30" pos:end="21:30">n</name> <operator pos:start="21:32" pos:end="21:32">*</operator> <literal type="number" pos:start="21:34" pos:end="21:36">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="23:13" pos:end="27:13"><if pos:start="23:13" pos:end="27:13">if <condition pos:start="23:16" pos:end="23:24">(<expr pos:start="23:17" pos:end="23:23"><name pos:start="23:17" pos:end="23:19">ret</name> <operator pos:start="23:21" pos:end="23:21">&lt;</operator> <literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr>)</condition> <block pos:start="23:26" pos:end="27:13">{<block_content pos:start="25:17" pos:end="25:27">

                <return pos:start="25:17" pos:end="25:27">return <expr pos:start="25:24" pos:end="25:26"><name pos:start="25:24" pos:end="25:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="29:11" pos:end="49:9">else <block pos:start="29:16" pos:end="49:9">{<block_content pos:start="31:13" pos:end="47:13">

            <if_stmt pos:start="31:13" pos:end="47:13"><if pos:start="31:13" pos:end="43:13">if <condition pos:start="31:16" pos:end="31:31">(<expr pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:30"><name pos:start="31:17" pos:end="31:18">bs</name><operator pos:start="31:19" pos:end="31:20">-&gt;</operator><name pos:start="31:21" pos:end="31:30">backing_hd</name></name></expr>)</condition> <block pos:start="31:33" pos:end="43:13">{<block_content pos:start="35:17" pos:end="41:17">

                <comment type="block" pos:start="33:17" pos:end="33:46">/* read from the base image */</comment>

                <expr_stmt pos:start="35:17" pos:end="35:68"><expr pos:start="35:17" pos:end="35:67"><name pos:start="35:17" pos:end="35:19">ret</name> <operator pos:start="35:21" pos:end="35:21">=</operator> <call pos:start="35:23" pos:end="35:67"><name pos:start="35:23" pos:end="35:31">bdrv_read</name><argument_list pos:start="35:32" pos:end="35:67">(<argument pos:start="35:33" pos:end="35:46"><expr pos:start="35:33" pos:end="35:46"><name pos:start="35:33" pos:end="35:46"><name pos:start="35:33" pos:end="35:34">bs</name><operator pos:start="35:35" pos:end="35:36">-&gt;</operator><name pos:start="35:37" pos:end="35:46">backing_hd</name></name></expr></argument>, <argument pos:start="35:49" pos:end="35:58"><expr pos:start="35:49" pos:end="35:58"><name pos:start="35:49" pos:end="35:58">sector_num</name></expr></argument>, <argument pos:start="35:61" pos:end="35:63"><expr pos:start="35:61" pos:end="35:63"><name pos:start="35:61" pos:end="35:63">buf</name></expr></argument>, <argument pos:start="35:66" pos:end="35:66"><expr pos:start="35:66" pos:end="35:66"><name pos:start="35:66" pos:end="35:66">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="37:17" pos:end="41:17"><if pos:start="37:17" pos:end="41:17">if <condition pos:start="37:20" pos:end="37:28">(<expr pos:start="37:21" pos:end="37:27"><name pos:start="37:21" pos:end="37:23">ret</name> <operator pos:start="37:25" pos:end="37:25">&lt;</operator> <literal type="number" pos:start="37:27" pos:end="37:27">0</literal></expr>)</condition> <block pos:start="37:30" pos:end="41:17">{<block_content pos:start="39:21" pos:end="39:31">

                    <return pos:start="39:21" pos:end="39:31">return <expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="43:15" pos:end="47:13">else <block pos:start="43:20" pos:end="47:13">{<block_content pos:start="45:17" pos:end="45:40">

                <expr_stmt pos:start="45:17" pos:end="45:40"><expr pos:start="45:17" pos:end="45:39"><call pos:start="45:17" pos:end="45:39"><name pos:start="45:17" pos:end="45:22">memset</name><argument_list pos:start="45:23" pos:end="45:39">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">buf</name></expr></argument>, <argument pos:start="45:29" pos:end="45:29"><expr pos:start="45:29" pos:end="45:29"><literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr></argument>, <argument pos:start="45:32" pos:end="45:38"><expr pos:start="45:32" pos:end="45:38"><name pos:start="45:32" pos:end="45:32">n</name> <operator pos:start="45:34" pos:end="45:34">*</operator> <literal type="number" pos:start="45:36" pos:end="45:38">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:24"><expr pos:start="51:9" pos:end="51:23"><name pos:start="51:9" pos:end="51:18">nb_sectors</name> <operator pos:start="51:20" pos:end="51:21">-=</operator> <name pos:start="51:23" pos:end="51:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:24"><expr pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:18">sector_num</name> <operator pos:start="53:20" pos:end="53:21">+=</operator> <name pos:start="53:23" pos:end="53:23">n</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:23"><expr pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:11">buf</name> <operator pos:start="55:13" pos:end="55:14">+=</operator> <name pos:start="55:16" pos:end="55:16">n</name> <operator pos:start="55:18" pos:end="55:18">*</operator> <literal type="number" pos:start="55:20" pos:end="55:22">512</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
