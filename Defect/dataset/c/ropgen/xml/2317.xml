<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2317.c" pos:tabs="8"><function pos:start="1:1" pos:end="24:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">test_leak_bucket</name><parameter_list pos:start="1:29" pos:end="1:34">(<parameter pos:start="1:30" pos:end="1:33"><decl pos:start="1:30" pos:end="1:33"><type pos:start="1:30" pos:end="1:33"><name pos:start="1:30" pos:end="1:33">void</name></type></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="24:1">{<block_content pos:start="3:5" pos:end="23:39">
    <expr_stmt pos:start="3:5" pos:end="3:31"><expr pos:start="3:5" pos:end="3:30"><call pos:start="3:5" pos:end="3:30"><name pos:start="3:5" pos:end="3:24">throttle_config_init</name><argument_list pos:start="3:25" pos:end="3:30">(<argument pos:start="3:26" pos:end="3:29"><expr pos:start="3:26" pos:end="3:29"><operator pos:start="3:26" pos:end="3:26">&amp;</operator><name pos:start="3:27" pos:end="3:29">cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="4:5" pos:end="4:42"><expr pos:start="4:5" pos:end="4:41"><name pos:start="4:5" pos:end="4:7">bkt</name> <operator pos:start="4:9" pos:end="4:9">=</operator> <name pos:start="4:11" pos:end="4:41"><name pos:start="4:11" pos:end="4:13">cfg</name><operator pos:start="4:14" pos:end="4:14">.</operator><name pos:start="4:15" pos:end="4:21">buckets</name><index pos:start="4:22" pos:end="4:41">[<expr pos:start="4:23" pos:end="4:40"><name pos:start="4:23" pos:end="4:40">THROTTLE_BPS_TOTAL</name></expr>]</index></name></expr>;</expr_stmt>
    <comment type="block" pos:start="5:5" pos:end="5:27">/* set initial value */</comment>
    <expr_stmt pos:start="6:5" pos:end="6:18"><expr pos:start="6:5" pos:end="6:17"><name pos:start="6:5" pos:end="6:11"><name pos:start="6:5" pos:end="6:7">bkt</name><operator pos:start="6:8" pos:end="6:8">.</operator><name pos:start="6:9" pos:end="6:11">avg</name></name> <operator pos:start="6:13" pos:end="6:13">=</operator> <literal type="number" pos:start="6:15" pos:end="6:17">150</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="7:5" pos:end="7:17"><expr pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:7">bkt</name><operator pos:start="7:8" pos:end="7:8">.</operator><name pos:start="7:9" pos:end="7:11">max</name></name> <operator pos:start="7:13" pos:end="7:13">=</operator> <literal type="number" pos:start="7:15" pos:end="7:16">15</literal></expr>;</expr_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:20"><expr pos:start="8:5" pos:end="8:19"><name pos:start="8:5" pos:end="8:13"><name pos:start="8:5" pos:end="8:7">bkt</name><operator pos:start="8:8" pos:end="8:8">.</operator><name pos:start="8:9" pos:end="8:13">level</name></name> <operator pos:start="8:15" pos:end="8:15">=</operator> <literal type="number" pos:start="8:17" pos:end="8:19">1.5</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="9:5" pos:end="9:33">/* leak an op work of time */</comment>
    <expr_stmt pos:start="10:5" pos:end="10:61"><expr pos:start="10:5" pos:end="10:60"><call pos:start="10:5" pos:end="10:60"><name pos:start="10:5" pos:end="10:24">throttle_leak_bucket</name><argument_list pos:start="10:25" pos:end="10:60">(<argument pos:start="10:26" pos:end="10:29"><expr pos:start="10:26" pos:end="10:29"><operator pos:start="10:26" pos:end="10:26">&amp;</operator><name pos:start="10:27" pos:end="10:29">bkt</name></expr></argument>, <argument pos:start="10:32" pos:end="10:59"><expr pos:start="10:32" pos:end="10:59"><name pos:start="10:32" pos:end="10:53">NANOSECONDS_PER_SECOND</name> <operator pos:start="10:55" pos:end="10:55">/</operator> <literal type="number" pos:start="10:57" pos:end="10:59">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:29"><expr pos:start="11:5" pos:end="11:28"><call pos:start="11:5" pos:end="11:28"><name pos:start="11:5" pos:end="11:12">g_assert</name><argument_list pos:start="11:13" pos:end="11:28">(<argument pos:start="11:14" pos:end="11:27"><expr pos:start="11:14" pos:end="11:27"><name pos:start="11:14" pos:end="11:20"><name pos:start="11:14" pos:end="11:16">bkt</name><operator pos:start="11:17" pos:end="11:17">.</operator><name pos:start="11:18" pos:end="11:20">avg</name></name> <operator pos:start="11:22" pos:end="11:23">==</operator> <literal type="number" pos:start="11:25" pos:end="11:27">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="12:5" pos:end="12:28"><expr pos:start="12:5" pos:end="12:27"><call pos:start="12:5" pos:end="12:27"><name pos:start="12:5" pos:end="12:12">g_assert</name><argument_list pos:start="12:13" pos:end="12:27">(<argument pos:start="12:14" pos:end="12:26"><expr pos:start="12:14" pos:end="12:26"><name pos:start="12:14" pos:end="12:20"><name pos:start="12:14" pos:end="12:16">bkt</name><operator pos:start="12:17" pos:end="12:17">.</operator><name pos:start="12:18" pos:end="12:20">max</name></name> <operator pos:start="12:22" pos:end="12:23">==</operator> <literal type="number" pos:start="12:25" pos:end="12:26">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="13:5" pos:end="13:41"><expr pos:start="13:5" pos:end="13:40"><call pos:start="13:5" pos:end="13:40"><name pos:start="13:5" pos:end="13:12">g_assert</name><argument_list pos:start="13:13" pos:end="13:40">(<argument pos:start="13:14" pos:end="13:39"><expr pos:start="13:14" pos:end="13:39"><call pos:start="13:14" pos:end="13:39"><name pos:start="13:14" pos:end="13:23">double_cmp</name><argument_list pos:start="13:24" pos:end="13:39">(<argument pos:start="13:25" pos:end="13:33"><expr pos:start="13:25" pos:end="13:33"><name pos:start="13:25" pos:end="13:33"><name pos:start="13:25" pos:end="13:27">bkt</name><operator pos:start="13:28" pos:end="13:28">.</operator><name pos:start="13:29" pos:end="13:33">level</name></name></expr></argument>, <argument pos:start="13:36" pos:end="13:38"><expr pos:start="13:36" pos:end="13:38"><literal type="number" pos:start="13:36" pos:end="13:38">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="14:5" pos:end="14:40">/* leak again emptying the bucket */</comment>
    <expr_stmt pos:start="15:5" pos:end="15:61"><expr pos:start="15:5" pos:end="15:60"><call pos:start="15:5" pos:end="15:60"><name pos:start="15:5" pos:end="15:24">throttle_leak_bucket</name><argument_list pos:start="15:25" pos:end="15:60">(<argument pos:start="15:26" pos:end="15:29"><expr pos:start="15:26" pos:end="15:29"><operator pos:start="15:26" pos:end="15:26">&amp;</operator><name pos:start="15:27" pos:end="15:29">bkt</name></expr></argument>, <argument pos:start="15:32" pos:end="15:59"><expr pos:start="15:32" pos:end="15:59"><name pos:start="15:32" pos:end="15:53">NANOSECONDS_PER_SECOND</name> <operator pos:start="15:55" pos:end="15:55">/</operator> <literal type="number" pos:start="15:57" pos:end="15:59">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:29"><expr pos:start="16:5" pos:end="16:28"><call pos:start="16:5" pos:end="16:28"><name pos:start="16:5" pos:end="16:12">g_assert</name><argument_list pos:start="16:13" pos:end="16:28">(<argument pos:start="16:14" pos:end="16:27"><expr pos:start="16:14" pos:end="16:27"><name pos:start="16:14" pos:end="16:20"><name pos:start="16:14" pos:end="16:16">bkt</name><operator pos:start="16:17" pos:end="16:17">.</operator><name pos:start="16:18" pos:end="16:20">avg</name></name> <operator pos:start="16:22" pos:end="16:23">==</operator> <literal type="number" pos:start="16:25" pos:end="16:27">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:28"><expr pos:start="17:5" pos:end="17:27"><call pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:12">g_assert</name><argument_list pos:start="17:13" pos:end="17:27">(<argument pos:start="17:14" pos:end="17:26"><expr pos:start="17:14" pos:end="17:26"><name pos:start="17:14" pos:end="17:20"><name pos:start="17:14" pos:end="17:16">bkt</name><operator pos:start="17:17" pos:end="17:17">.</operator><name pos:start="17:18" pos:end="17:20">max</name></name> <operator pos:start="17:22" pos:end="17:23">==</operator> <literal type="number" pos:start="17:25" pos:end="17:26">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:39"><expr pos:start="18:5" pos:end="18:38"><call pos:start="18:5" pos:end="18:38"><name pos:start="18:5" pos:end="18:12">g_assert</name><argument_list pos:start="18:13" pos:end="18:38">(<argument pos:start="18:14" pos:end="18:37"><expr pos:start="18:14" pos:end="18:37"><call pos:start="18:14" pos:end="18:37"><name pos:start="18:14" pos:end="18:23">double_cmp</name><argument_list pos:start="18:24" pos:end="18:37">(<argument pos:start="18:25" pos:end="18:33"><expr pos:start="18:25" pos:end="18:33"><name pos:start="18:25" pos:end="18:33"><name pos:start="18:25" pos:end="18:27">bkt</name><operator pos:start="18:28" pos:end="18:28">.</operator><name pos:start="18:29" pos:end="18:33">level</name></name></expr></argument>, <argument pos:start="18:36" pos:end="18:36"><expr pos:start="18:36" pos:end="18:36"><literal type="number" pos:start="18:36" pos:end="18:36">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="19:5" pos:end="19:52">/* check that the bucket level won't go lower */</comment>
    <expr_stmt pos:start="20:5" pos:end="20:61"><expr pos:start="20:5" pos:end="20:60"><call pos:start="20:5" pos:end="20:60"><name pos:start="20:5" pos:end="20:24">throttle_leak_bucket</name><argument_list pos:start="20:25" pos:end="20:60">(<argument pos:start="20:26" pos:end="20:29"><expr pos:start="20:26" pos:end="20:29"><operator pos:start="20:26" pos:end="20:26">&amp;</operator><name pos:start="20:27" pos:end="20:29">bkt</name></expr></argument>, <argument pos:start="20:32" pos:end="20:59"><expr pos:start="20:32" pos:end="20:59"><name pos:start="20:32" pos:end="20:53">NANOSECONDS_PER_SECOND</name> <operator pos:start="20:55" pos:end="20:55">/</operator> <literal type="number" pos:start="20:57" pos:end="20:59">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:29"><expr pos:start="21:5" pos:end="21:28"><call pos:start="21:5" pos:end="21:28"><name pos:start="21:5" pos:end="21:12">g_assert</name><argument_list pos:start="21:13" pos:end="21:28">(<argument pos:start="21:14" pos:end="21:27"><expr pos:start="21:14" pos:end="21:27"><name pos:start="21:14" pos:end="21:20"><name pos:start="21:14" pos:end="21:16">bkt</name><operator pos:start="21:17" pos:end="21:17">.</operator><name pos:start="21:18" pos:end="21:20">avg</name></name> <operator pos:start="21:22" pos:end="21:23">==</operator> <literal type="number" pos:start="21:25" pos:end="21:27">150</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:28"><expr pos:start="22:5" pos:end="22:27"><call pos:start="22:5" pos:end="22:27"><name pos:start="22:5" pos:end="22:12">g_assert</name><argument_list pos:start="22:13" pos:end="22:27">(<argument pos:start="22:14" pos:end="22:26"><expr pos:start="22:14" pos:end="22:26"><name pos:start="22:14" pos:end="22:20"><name pos:start="22:14" pos:end="22:16">bkt</name><operator pos:start="22:17" pos:end="22:17">.</operator><name pos:start="22:18" pos:end="22:20">max</name></name> <operator pos:start="22:22" pos:end="22:23">==</operator> <literal type="number" pos:start="22:25" pos:end="22:26">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><call pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:12">g_assert</name><argument_list pos:start="23:13" pos:end="23:38">(<argument pos:start="23:14" pos:end="23:37"><expr pos:start="23:14" pos:end="23:37"><call pos:start="23:14" pos:end="23:37"><name pos:start="23:14" pos:end="23:23">double_cmp</name><argument_list pos:start="23:24" pos:end="23:37">(<argument pos:start="23:25" pos:end="23:33"><expr pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:27">bkt</name><operator pos:start="23:28" pos:end="23:28">.</operator><name pos:start="23:29" pos:end="23:33">level</name></name></expr></argument>, <argument pos:start="23:36" pos:end="23:36"><expr pos:start="23:36" pos:end="23:36"><literal type="number" pos:start="23:36" pos:end="23:36">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
