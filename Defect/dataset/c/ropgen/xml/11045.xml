<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11045.c" pos:tabs="8"><function pos:start="1:1" pos:end="52:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">msrle_decode_frame</name><parameter_list pos:start="1:30" pos:end="3:46">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:51"><name pos:start="1:31" pos:end="1:44">AVCodecContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">avctx</name></decl></parameter>,
                              <parameter pos:start="2:31" pos:end="2:40"><decl pos:start="2:31" pos:end="2:40"><type pos:start="2:31" pos:end="2:40"><name pos:start="2:31" pos:end="2:34">void</name> <modifier pos:start="2:36" pos:end="2:36">*</modifier></type><name pos:start="2:37" pos:end="2:40">data</name></decl></parameter>, <parameter pos:start="2:43" pos:end="2:56"><decl pos:start="2:43" pos:end="2:56"><type pos:start="2:43" pos:end="2:56"><name pos:start="2:43" pos:end="2:45">int</name> <modifier pos:start="2:47" pos:end="2:47">*</modifier></type><name pos:start="2:48" pos:end="2:56">got_frame</name></decl></parameter>,
                              <parameter pos:start="3:31" pos:end="3:45"><decl pos:start="3:31" pos:end="3:45"><type pos:start="3:31" pos:end="3:45"><name pos:start="3:31" pos:end="3:38">AVPacket</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:45">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="52:1">{<block_content pos:start="5:5" pos:end="51:20">
    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:31"><decl pos:start="6:5" pos:end="6:30"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:16">buf_size</name> <init pos:start="6:18" pos:end="6:30">= <expr pos:start="6:20" pos:end="6:30"><name pos:start="6:20" pos:end="6:30"><name pos:start="6:20" pos:end="6:24">avpkt</name><operator pos:start="6:25" pos:end="6:26">-&gt;</operator><name pos:start="6:27" pos:end="6:30">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">MsrleContext</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:27">avctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:38">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:77"><decl pos:start="8:5" pos:end="8:76"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:15">istride</name> <init pos:start="8:17" pos:end="8:76">= <expr pos:start="8:19" pos:end="8:76"><call pos:start="8:19" pos:end="8:72"><name pos:start="8:19" pos:end="8:25">FFALIGN</name><argument_list pos:start="8:26" pos:end="8:72">(<argument pos:start="8:27" pos:end="8:67"><expr pos:start="8:27" pos:end="8:67"><name pos:start="8:27" pos:end="8:38"><name pos:start="8:27" pos:end="8:31">avctx</name><operator pos:start="8:32" pos:end="8:33">-&gt;</operator><name pos:start="8:34" pos:end="8:38">width</name></name><operator pos:start="8:39" pos:end="8:39">*</operator><name pos:start="8:40" pos:end="8:67"><name pos:start="8:40" pos:end="8:44">avctx</name><operator pos:start="8:45" pos:end="8:46">-&gt;</operator><name pos:start="8:47" pos:end="8:67">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="8:70" pos:end="8:71"><expr pos:start="8:70" pos:end="8:71"><literal type="number" pos:start="8:70" pos:end="8:71">32</literal></expr></argument>)</argument_list></call> <operator pos:start="8:74" pos:end="8:74">/</operator> <literal type="number" pos:start="8:76" pos:end="8:76">8</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>
    <expr_stmt pos:start="10:5" pos:end="10:17"><expr pos:start="10:5" pos:end="10:16"><name pos:start="10:5" pos:end="10:10"><name pos:start="10:5" pos:end="10:5">s</name><operator pos:start="10:6" pos:end="10:7">-&gt;</operator><name pos:start="10:8" pos:end="10:10">buf</name></name> <operator pos:start="10:12" pos:end="10:12">=</operator> <name pos:start="10:14" pos:end="10:16">buf</name></expr>;</expr_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:23"><expr pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:5">s</name><operator pos:start="11:6" pos:end="11:7">-&gt;</operator><name pos:start="11:8" pos:end="11:11">size</name></name> <operator pos:start="11:13" pos:end="11:13">=</operator> <name pos:start="11:15" pos:end="11:22">buf_size</name></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="13:19"><if pos:start="12:5" pos:end="13:19">if <condition pos:start="12:8" pos:end="12:53">(<expr pos:start="12:9" pos:end="12:52"><operator pos:start="12:9" pos:end="12:9">(</operator><name pos:start="12:10" pos:end="12:12">ret</name> <operator pos:start="12:14" pos:end="12:14">=</operator> <call pos:start="12:16" pos:end="12:47"><name pos:start="12:16" pos:end="12:30">ff_reget_buffer</name><argument_list pos:start="12:31" pos:end="12:47">(<argument pos:start="12:32" pos:end="12:36"><expr pos:start="12:32" pos:end="12:36"><name pos:start="12:32" pos:end="12:36">avctx</name></expr></argument>, <argument pos:start="12:39" pos:end="12:46"><expr pos:start="12:39" pos:end="12:46"><name pos:start="12:39" pos:end="12:46"><name pos:start="12:39" pos:end="12:39">s</name><operator pos:start="12:40" pos:end="12:41">-&gt;</operator><name pos:start="12:42" pos:end="12:46">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="12:48" pos:end="12:48">)</operator> <operator pos:start="12:50" pos:end="12:50">&lt;</operator> <literal type="number" pos:start="12:52" pos:end="12:52">0</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:19"><block_content pos:start="13:9" pos:end="13:19">
        <return pos:start="13:9" pos:end="13:19">return <expr pos:start="13:16" pos:end="13:18"><name pos:start="13:16" pos:end="13:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt pos:start="14:5" pos:end="22:5"><if pos:start="14:5" pos:end="22:5">if <condition pos:start="14:8" pos:end="14:78">(<expr pos:start="14:9" pos:end="14:77"><name pos:start="14:9" pos:end="14:36"><name pos:start="14:9" pos:end="14:13">avctx</name><operator pos:start="14:14" pos:end="14:15">-&gt;</operator><name pos:start="14:16" pos:end="14:36">bits_per_coded_sample</name></name> <operator pos:start="14:38" pos:end="14:38">&gt;</operator> <literal type="number" pos:start="14:40" pos:end="14:40">1</literal> <operator pos:start="14:42" pos:end="14:43">&amp;&amp;</operator> <name pos:start="14:45" pos:end="14:72"><name pos:start="14:45" pos:end="14:49">avctx</name><operator pos:start="14:50" pos:end="14:51">-&gt;</operator><name pos:start="14:52" pos:end="14:72">bits_per_coded_sample</name></name> <operator pos:start="14:74" pos:end="14:75">&lt;=</operator> <literal type="number" pos:start="14:77" pos:end="14:77">8</literal></expr>)</condition> <block pos:start="14:80" pos:end="22:5">{<block_content pos:start="15:9" pos:end="21:58">
        <decl_stmt pos:start="15:9" pos:end="15:87"><decl pos:start="15:9" pos:end="15:86"><type pos:start="15:9" pos:end="15:23"><specifier pos:start="15:9" pos:end="15:13">const</specifier> <name pos:start="15:15" pos:end="15:21">uint8_t</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:26">pal</name> <init pos:start="15:28" pos:end="15:86">= <expr pos:start="15:30" pos:end="15:86"><call pos:start="15:30" pos:end="15:86"><name pos:start="15:30" pos:end="15:52">av_packet_get_side_data</name><argument_list pos:start="15:53" pos:end="15:86">(<argument pos:start="15:54" pos:end="15:58"><expr pos:start="15:54" pos:end="15:58"><name pos:start="15:54" pos:end="15:58">avpkt</name></expr></argument>, <argument pos:start="15:61" pos:end="15:79"><expr pos:start="15:61" pos:end="15:79"><name pos:start="15:61" pos:end="15:79">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="15:82" pos:end="15:85"><expr pos:start="15:82" pos:end="15:85"><name pos:start="15:82" pos:end="15:85">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="16:9" pos:end="19:9"><if pos:start="16:9" pos:end="19:9">if <condition pos:start="16:12" pos:end="16:16">(<expr pos:start="16:13" pos:end="16:15"><name pos:start="16:13" pos:end="16:15">pal</name></expr>)</condition> <block pos:start="16:18" pos:end="19:9">{<block_content pos:start="17:13" pos:end="18:48">
            <expr_stmt pos:start="17:13" pos:end="17:46"><expr pos:start="17:13" pos:end="17:45"><name pos:start="17:13" pos:end="17:41"><name pos:start="17:13" pos:end="17:13">s</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:20">frame</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:41">palette_has_changed</name></name> <operator pos:start="17:43" pos:end="17:43">=</operator> <literal type="number" pos:start="17:45" pos:end="17:45">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="18:13" pos:end="18:48"><expr pos:start="18:13" pos:end="18:47"><call pos:start="18:13" pos:end="18:47"><name pos:start="18:13" pos:end="18:18">memcpy</name><argument_list pos:start="18:19" pos:end="18:47">(<argument pos:start="18:20" pos:end="18:25"><expr pos:start="18:20" pos:end="18:25"><name pos:start="18:20" pos:end="18:25"><name pos:start="18:20" pos:end="18:20">s</name><operator pos:start="18:21" pos:end="18:22">-&gt;</operator><name pos:start="18:23" pos:end="18:25">pal</name></name></expr></argument>, <argument pos:start="18:28" pos:end="18:30"><expr pos:start="18:28" pos:end="18:30"><name pos:start="18:28" pos:end="18:30">pal</name></expr></argument>, <argument pos:start="18:33" pos:end="18:46"><expr pos:start="18:33" pos:end="18:46"><name pos:start="18:33" pos:end="18:46">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="20:9" pos:end="20:40">/* make the palette available */</comment>
        <expr_stmt pos:start="21:9" pos:end="21:58"><expr pos:start="21:9" pos:end="21:57"><call pos:start="21:9" pos:end="21:57"><name pos:start="21:9" pos:end="21:14">memcpy</name><argument_list pos:start="21:15" pos:end="21:57">(<argument pos:start="21:16" pos:end="21:32"><expr pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:32"><name pos:start="21:16" pos:end="21:16">s</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:23">frame</name><operator pos:start="21:24" pos:end="21:25">-&gt;</operator><name pos:start="21:26" pos:end="21:29">data</name><index pos:start="21:30" pos:end="21:32">[<expr pos:start="21:31" pos:end="21:31"><literal type="number" pos:start="21:31" pos:end="21:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="21:35" pos:end="21:40"><expr pos:start="21:35" pos:end="21:40"><name pos:start="21:35" pos:end="21:40"><name pos:start="21:35" pos:end="21:35">s</name><operator pos:start="21:36" pos:end="21:37">-&gt;</operator><name pos:start="21:38" pos:end="21:40">pal</name></name></expr></argument>, <argument pos:start="21:43" pos:end="21:56"><expr pos:start="21:43" pos:end="21:56"><name pos:start="21:43" pos:end="21:56">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="23:5" pos:end="23:47">/* FIXME how to correctly detect RLE ??? */</comment>
    <if_stmt pos:start="24:5" pos:end="46:5"><if pos:start="24:5" pos:end="43:5">if <condition pos:start="24:8" pos:end="24:47">(<expr pos:start="24:9" pos:end="24:46"><name pos:start="24:9" pos:end="24:21"><name pos:start="24:9" pos:end="24:13">avctx</name><operator pos:start="24:14" pos:end="24:15">-&gt;</operator><name pos:start="24:16" pos:end="24:21">height</name></name> <operator pos:start="24:23" pos:end="24:23">*</operator> <name pos:start="24:25" pos:end="24:31">istride</name> <operator pos:start="24:33" pos:end="24:34">==</operator> <name pos:start="24:36" pos:end="24:46"><name pos:start="24:36" pos:end="24:40">avpkt</name><operator pos:start="24:41" pos:end="24:42">-&gt;</operator><name pos:start="24:43" pos:end="24:46">size</name></name></expr>)</condition> <block pos:start="24:49" pos:end="43:5">{<block_content pos:start="25:9" pos:end="42:9"> <comment type="block" pos:start="24:51" pos:end="24:75">/* assume uncompressed */</comment>
        <decl_stmt pos:start="25:9" pos:end="25:78"><decl pos:start="25:9" pos:end="25:77"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:20">linesize</name> <init pos:start="25:22" pos:end="25:77">= <expr pos:start="25:24" pos:end="25:77"><call pos:start="25:24" pos:end="25:77"><name pos:start="25:24" pos:end="25:44">av_image_get_linesize</name><argument_list pos:start="25:45" pos:end="25:77">(<argument pos:start="25:46" pos:end="25:59"><expr pos:start="25:46" pos:end="25:59"><name pos:start="25:46" pos:end="25:59"><name pos:start="25:46" pos:end="25:50">avctx</name><operator pos:start="25:51" pos:end="25:52">-&gt;</operator><name pos:start="25:53" pos:end="25:59">pix_fmt</name></name></expr></argument>, <argument pos:start="25:62" pos:end="25:73"><expr pos:start="25:62" pos:end="25:73"><name pos:start="25:62" pos:end="25:73"><name pos:start="25:62" pos:end="25:66">avctx</name><operator pos:start="25:67" pos:end="25:68">-&gt;</operator><name pos:start="25:69" pos:end="25:73">width</name></name></expr></argument>, <argument pos:start="25:76" pos:end="25:76"><expr pos:start="25:76" pos:end="25:76"><literal type="number" pos:start="25:76" pos:end="25:76">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="26:9" pos:end="26:41"><decl pos:start="26:9" pos:end="26:40"><type pos:start="26:9" pos:end="26:17"><name pos:start="26:9" pos:end="26:15">uint8_t</name> <modifier pos:start="26:17" pos:end="26:17">*</modifier></type><name pos:start="26:18" pos:end="26:20">ptr</name> <init pos:start="26:22" pos:end="26:40">= <expr pos:start="26:24" pos:end="26:40"><name pos:start="26:24" pos:end="26:40"><name pos:start="26:24" pos:end="26:24">s</name><operator pos:start="26:25" pos:end="26:26">-&gt;</operator><name pos:start="26:27" pos:end="26:31">frame</name><operator pos:start="26:32" pos:end="26:33">-&gt;</operator><name pos:start="26:34" pos:end="26:37">data</name><index pos:start="26:38" pos:end="26:40">[<expr pos:start="26:39" pos:end="26:39"><literal type="number" pos:start="26:39" pos:end="26:39">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="27:9" pos:end="27:63"><decl pos:start="27:9" pos:end="27:62"><type pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:15">uint8_t</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:20">buf</name> <init pos:start="27:22" pos:end="27:62">= <expr pos:start="27:24" pos:end="27:62"><name pos:start="27:24" pos:end="27:34"><name pos:start="27:24" pos:end="27:28">avpkt</name><operator pos:start="27:29" pos:end="27:30">-&gt;</operator><name pos:start="27:31" pos:end="27:34">data</name></name> <operator pos:start="27:36" pos:end="27:36">+</operator> <operator pos:start="27:38" pos:end="27:38">(</operator><name pos:start="27:39" pos:end="27:51"><name pos:start="27:39" pos:end="27:43">avctx</name><operator pos:start="27:44" pos:end="27:45">-&gt;</operator><name pos:start="27:46" pos:end="27:51">height</name></name><operator pos:start="27:52" pos:end="27:52">-</operator><literal type="number" pos:start="27:53" pos:end="27:53">1</literal><operator pos:start="27:54" pos:end="27:54">)</operator><operator pos:start="27:55" pos:end="27:55">*</operator><name pos:start="27:56" pos:end="27:62">istride</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="28:9" pos:end="28:17"><decl pos:start="28:9" pos:end="28:13"><type pos:start="28:9" pos:end="28:11"><name pos:start="28:9" pos:end="28:11">int</name></type> <name pos:start="28:13" pos:end="28:13">i</name></decl>, <decl pos:start="28:16" pos:end="28:16"><type ref="prev" pos:start="28:9" pos:end="28:11"/><name pos:start="28:16" pos:end="28:16">j</name></decl>;</decl_stmt>
        <for pos:start="29:9" pos:end="42:9">for <control pos:start="29:13" pos:end="29:43">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">i</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:38"><expr pos:start="29:21" pos:end="29:37"><name pos:start="29:21" pos:end="29:21">i</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <name pos:start="29:25" pos:end="29:37"><name pos:start="29:25" pos:end="29:29">avctx</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:37">height</name></name></expr>;</condition> <incr pos:start="29:40" pos:end="29:42"><expr pos:start="29:40" pos:end="29:42"><name pos:start="29:40" pos:end="29:40">i</name><operator pos:start="29:41" pos:end="29:42">++</operator></expr></incr>)</control> <block pos:start="29:45" pos:end="42:9">{<block_content pos:start="30:13" pos:end="41:41">
            <if_stmt pos:start="30:13" pos:end="39:13"><if pos:start="30:13" pos:end="37:13">if <condition pos:start="30:16" pos:end="30:50">(<expr pos:start="30:17" pos:end="30:49"><name pos:start="30:17" pos:end="30:44"><name pos:start="30:17" pos:end="30:21">avctx</name><operator pos:start="30:22" pos:end="30:23">-&gt;</operator><name pos:start="30:24" pos:end="30:44">bits_per_coded_sample</name></name> <operator pos:start="30:46" pos:end="30:47">==</operator> <literal type="number" pos:start="30:49" pos:end="30:49">4</literal></expr>)</condition> <block pos:start="30:52" pos:end="37:13">{<block_content pos:start="31:17" pos:end="36:46">
                <for pos:start="31:17" pos:end="34:17">for <control pos:start="31:21" pos:end="31:57">(<init pos:start="31:22" pos:end="31:27"><expr pos:start="31:22" pos:end="31:26"><name pos:start="31:22" pos:end="31:22">j</name> <operator pos:start="31:24" pos:end="31:24">=</operator> <literal type="number" pos:start="31:26" pos:end="31:26">0</literal></expr>;</init> <condition pos:start="31:29" pos:end="31:49"><expr pos:start="31:29" pos:end="31:48"><name pos:start="31:29" pos:end="31:29">j</name> <operator pos:start="31:31" pos:end="31:31">&lt;</operator> <name pos:start="31:33" pos:end="31:44"><name pos:start="31:33" pos:end="31:37">avctx</name><operator pos:start="31:38" pos:end="31:39">-&gt;</operator><name pos:start="31:40" pos:end="31:44">width</name></name> <operator pos:start="31:46" pos:end="31:46">-</operator> <literal type="number" pos:start="31:48" pos:end="31:48">1</literal></expr>;</condition> <incr pos:start="31:51" pos:end="31:56"><expr pos:start="31:51" pos:end="31:56"><name pos:start="31:51" pos:end="31:51">j</name> <operator pos:start="31:53" pos:end="31:54">+=</operator> <literal type="number" pos:start="31:56" pos:end="31:56">2</literal></expr></incr>)</control> <block pos:start="31:59" pos:end="34:17">{<block_content pos:start="32:21" pos:end="33:47">
                    <expr_stmt pos:start="32:21" pos:end="32:46"><expr pos:start="32:21" pos:end="32:45"><name pos:start="32:21" pos:end="32:28"><name pos:start="32:21" pos:end="32:23">ptr</name><index pos:start="32:24" pos:end="32:28">[<expr pos:start="32:25" pos:end="32:27"><name pos:start="32:25" pos:end="32:25">j</name><operator pos:start="32:26" pos:end="32:26">+</operator><literal type="number" pos:start="32:27" pos:end="32:27">0</literal></expr>]</index></name> <operator pos:start="32:30" pos:end="32:30">=</operator> <name pos:start="32:32" pos:end="32:40"><name pos:start="32:32" pos:end="32:34">buf</name><index pos:start="32:35" pos:end="32:40">[<expr pos:start="32:36" pos:end="32:39"><name pos:start="32:36" pos:end="32:36">j</name><operator pos:start="32:37" pos:end="32:38">&gt;&gt;</operator><literal type="number" pos:start="32:39" pos:end="32:39">1</literal></expr>]</index></name> <operator pos:start="32:42" pos:end="32:43">&gt;&gt;</operator> <literal type="number" pos:start="32:45" pos:end="32:45">4</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="33:21" pos:end="33:47"><expr pos:start="33:21" pos:end="33:46"><name pos:start="33:21" pos:end="33:28"><name pos:start="33:21" pos:end="33:23">ptr</name><index pos:start="33:24" pos:end="33:28">[<expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:25">j</name><operator pos:start="33:26" pos:end="33:26">+</operator><literal type="number" pos:start="33:27" pos:end="33:27">1</literal></expr>]</index></name> <operator pos:start="33:30" pos:end="33:30">=</operator> <name pos:start="33:32" pos:end="33:40"><name pos:start="33:32" pos:end="33:34">buf</name><index pos:start="33:35" pos:end="33:40">[<expr pos:start="33:36" pos:end="33:39"><name pos:start="33:36" pos:end="33:36">j</name><operator pos:start="33:37" pos:end="33:38">&gt;&gt;</operator><literal type="number" pos:start="33:39" pos:end="33:39">1</literal></expr>]</index></name> <operator pos:start="33:42" pos:end="33:42">&amp;</operator> <literal type="number" pos:start="33:44" pos:end="33:46">0xF</literal></expr>;</expr_stmt>
                </block_content>}</block></for>
                <if_stmt pos:start="35:17" pos:end="36:46"><if pos:start="35:17" pos:end="36:46">if <condition pos:start="35:20" pos:end="35:37">(<expr pos:start="35:21" pos:end="35:36"><name pos:start="35:21" pos:end="35:32"><name pos:start="35:21" pos:end="35:25">avctx</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:32">width</name></name> <operator pos:start="35:34" pos:end="35:34">&amp;</operator> <literal type="number" pos:start="35:36" pos:end="35:36">1</literal></expr>)</condition><block type="pseudo" pos:start="36:21" pos:end="36:46"><block_content pos:start="36:21" pos:end="36:46">
                    <expr_stmt pos:start="36:21" pos:end="36:46"><expr pos:start="36:21" pos:end="36:45"><name pos:start="36:21" pos:end="36:28"><name pos:start="36:21" pos:end="36:23">ptr</name><index pos:start="36:24" pos:end="36:28">[<expr pos:start="36:25" pos:end="36:27"><name pos:start="36:25" pos:end="36:25">j</name><operator pos:start="36:26" pos:end="36:26">+</operator><literal type="number" pos:start="36:27" pos:end="36:27">0</literal></expr>]</index></name> <operator pos:start="36:30" pos:end="36:30">=</operator> <name pos:start="36:32" pos:end="36:40"><name pos:start="36:32" pos:end="36:34">buf</name><index pos:start="36:35" pos:end="36:40">[<expr pos:start="36:36" pos:end="36:39"><name pos:start="36:36" pos:end="36:36">j</name><operator pos:start="36:37" pos:end="36:38">&gt;&gt;</operator><literal type="number" pos:start="36:39" pos:end="36:39">1</literal></expr>]</index></name> <operator pos:start="36:42" pos:end="36:43">&gt;&gt;</operator> <literal type="number" pos:start="36:45" pos:end="36:45">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if> <else pos:start="37:15" pos:end="39:13">else <block pos:start="37:20" pos:end="39:13">{<block_content pos:start="38:17" pos:end="38:43">
                <expr_stmt pos:start="38:17" pos:end="38:43"><expr pos:start="38:17" pos:end="38:42"><call pos:start="38:17" pos:end="38:42"><name pos:start="38:17" pos:end="38:22">memcpy</name><argument_list pos:start="38:23" pos:end="38:42">(<argument pos:start="38:24" pos:end="38:26"><expr pos:start="38:24" pos:end="38:26"><name pos:start="38:24" pos:end="38:26">ptr</name></expr></argument>, <argument pos:start="38:29" pos:end="38:31"><expr pos:start="38:29" pos:end="38:31"><name pos:start="38:29" pos:end="38:31">buf</name></expr></argument>, <argument pos:start="38:34" pos:end="38:41"><expr pos:start="38:34" pos:end="38:41"><name pos:start="38:34" pos:end="38:41">linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:27"><expr pos:start="40:13" pos:end="40:26"><name pos:start="40:13" pos:end="40:15">buf</name> <operator pos:start="40:17" pos:end="40:18">-=</operator> <name pos:start="40:20" pos:end="40:26">istride</name></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:41"><expr pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:15">ptr</name> <operator pos:start="41:17" pos:end="41:18">+=</operator> <name pos:start="41:20" pos:end="41:40"><name pos:start="41:20" pos:end="41:20">s</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:27">frame</name><operator pos:start="41:28" pos:end="41:29">-&gt;</operator><name pos:start="41:30" pos:end="41:37">linesize</name><index pos:start="41:38" pos:end="41:40">[<expr pos:start="41:39" pos:end="41:39"><literal type="number" pos:start="41:39" pos:end="41:39">0</literal></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else pos:start="43:7" pos:end="46:5">else <block pos:start="43:12" pos:end="46:5">{<block_content pos:start="44:9" pos:end="45:91">
        <expr_stmt pos:start="44:9" pos:end="44:48"><expr pos:start="44:9" pos:end="44:47"><call pos:start="44:9" pos:end="44:47"><name pos:start="44:9" pos:end="44:24">bytestream2_init</name><argument_list pos:start="44:25" pos:end="44:47">(<argument pos:start="44:26" pos:end="44:31"><expr pos:start="44:26" pos:end="44:31"><operator pos:start="44:26" pos:end="44:26">&amp;</operator><name pos:start="44:27" pos:end="44:31"><name pos:start="44:27" pos:end="44:27">s</name><operator pos:start="44:28" pos:end="44:29">-&gt;</operator><name pos:start="44:30" pos:end="44:31">gb</name></name></expr></argument>, <argument pos:start="44:34" pos:end="44:36"><expr pos:start="44:34" pos:end="44:36"><name pos:start="44:34" pos:end="44:36">buf</name></expr></argument>, <argument pos:start="44:39" pos:end="44:46"><expr pos:start="44:39" pos:end="44:46"><name pos:start="44:39" pos:end="44:46">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:91"><expr pos:start="45:9" pos:end="45:90"><call pos:start="45:9" pos:end="45:90"><name pos:start="45:9" pos:end="45:23">ff_msrle_decode</name><argument_list pos:start="45:24" pos:end="45:90">(<argument pos:start="45:25" pos:end="45:29"><expr pos:start="45:25" pos:end="45:29"><name pos:start="45:25" pos:end="45:29">avctx</name></expr></argument>, <argument pos:start="45:32" pos:end="45:51"><expr pos:start="45:32" pos:end="45:51"><operator pos:start="45:32" pos:end="45:32">(</operator><name pos:start="45:33" pos:end="45:41">AVPicture</name><operator pos:start="45:42" pos:end="45:42">*</operator><operator pos:start="45:43" pos:end="45:43">)</operator><name pos:start="45:44" pos:end="45:51"><name pos:start="45:44" pos:end="45:44">s</name><operator pos:start="45:45" pos:end="45:46">-&gt;</operator><name pos:start="45:47" pos:end="45:51">frame</name></name></expr></argument>, <argument pos:start="45:54" pos:end="45:81"><expr pos:start="45:54" pos:end="45:81"><name pos:start="45:54" pos:end="45:81"><name pos:start="45:54" pos:end="45:58">avctx</name><operator pos:start="45:59" pos:end="45:60">-&gt;</operator><name pos:start="45:61" pos:end="45:81">bits_per_coded_sample</name></name></expr></argument>, <argument pos:start="45:84" pos:end="45:89"><expr pos:start="45:84" pos:end="45:89"><operator pos:start="45:84" pos:end="45:84">&amp;</operator><name pos:start="45:85" pos:end="45:89"><name pos:start="45:85" pos:end="45:85">s</name><operator pos:start="45:86" pos:end="45:87">-&gt;</operator><name pos:start="45:88" pos:end="45:89">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt pos:start="47:5" pos:end="48:19"><if pos:start="47:5" pos:end="48:19">if <condition pos:start="47:8" pos:end="47:49">(<expr pos:start="47:9" pos:end="47:48"><operator pos:start="47:9" pos:end="47:9">(</operator><name pos:start="47:10" pos:end="47:12">ret</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:43"><name pos:start="47:16" pos:end="47:27">av_frame_ref</name><argument_list pos:start="47:28" pos:end="47:43">(<argument pos:start="47:29" pos:end="47:32"><expr pos:start="47:29" pos:end="47:32"><name pos:start="47:29" pos:end="47:32">data</name></expr></argument>, <argument pos:start="47:35" pos:end="47:42"><expr pos:start="47:35" pos:end="47:42"><name pos:start="47:35" pos:end="47:42"><name pos:start="47:35" pos:end="47:35">s</name><operator pos:start="47:36" pos:end="47:37">-&gt;</operator><name pos:start="47:38" pos:end="47:42">frame</name></name></expr></argument>)</argument_list></call><operator pos:start="47:44" pos:end="47:44">)</operator> <operator pos:start="47:46" pos:end="47:46">&lt;</operator> <literal type="number" pos:start="47:48" pos:end="47:48">0</literal></expr>)</condition><block type="pseudo" pos:start="48:9" pos:end="48:19"><block_content pos:start="48:9" pos:end="48:19">
        <return pos:start="48:9" pos:end="48:19">return <expr pos:start="48:16" pos:end="48:18"><name pos:start="48:16" pos:end="48:18">ret</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><operator pos:start="49:5" pos:end="49:5">*</operator><name pos:start="49:6" pos:end="49:14">got_frame</name>      <operator pos:start="49:21" pos:end="49:21">=</operator> <literal type="number" pos:start="49:23" pos:end="49:23">1</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="50:5" pos:end="50:56">/* report that the buffer was completely consumed */</comment>
    <return pos:start="51:5" pos:end="51:20">return <expr pos:start="51:12" pos:end="51:19"><name pos:start="51:12" pos:end="51:19">buf_size</name></expr>;</return>
</block_content>}</block></function></unit>
