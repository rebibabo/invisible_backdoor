<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14644.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:18"><name pos:start="1:1" pos:end="1:16">BlockDriverAIOCB</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:29">laio_submit</name><parameter_list pos:start="1:30" pos:end="5:62">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:65"><decl pos:start="1:53" pos:end="1:65"><type pos:start="1:53" pos:end="1:65"><name pos:start="1:53" pos:end="1:56">void</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:65">aio_ctx</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:73"><decl pos:start="1:68" pos:end="1:73"><type pos:start="1:68" pos:end="1:73"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:73">fd</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:40">QEMUIOVector</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">qiov</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:62">nb_sectors</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:37"><decl pos:start="5:9" pos:end="5:37"><type pos:start="5:9" pos:end="5:37"><name pos:start="5:9" pos:end="5:33">BlockDriverCompletionFunc</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:37">cb</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:51"><decl pos:start="5:40" pos:end="5:51"><type pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:43">void</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:51">opaque</name></decl></parameter>, <parameter pos:start="5:54" pos:end="5:61"><decl pos:start="5:54" pos:end="5:61"><type pos:start="5:54" pos:end="5:61"><name pos:start="5:54" pos:end="5:56">int</name></type> <name pos:start="5:58" pos:end="5:61">type</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="87:1">{<block_content pos:start="9:5" pos:end="85:16">

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:26">qemu_laio_state</name></name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:29">s</name> <init pos:start="9:31" pos:end="9:39">= <expr pos:start="9:33" pos:end="9:39"><name pos:start="9:33" pos:end="9:39">aio_ctx</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:22">qemu_laiocb</name></name> <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:30">laiocb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:15">iocb</name></name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:22">iocbs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">off_t</name></type> <name pos:start="15:11" pos:end="15:16">offset</name> <init pos:start="15:18" pos:end="15:35">= <expr pos:start="15:20" pos:end="15:35"><name pos:start="15:20" pos:end="15:29">sector_num</name> <operator pos:start="15:31" pos:end="15:31">*</operator> <literal type="number" pos:start="15:33" pos:end="15:35">512</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:54"><expr pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:10">laiocb</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <call pos:start="19:14" pos:end="19:53"><name pos:start="19:14" pos:end="19:25">qemu_aio_get</name><argument_list pos:start="19:26" pos:end="19:53">(<argument pos:start="19:27" pos:end="19:36"><expr pos:start="19:27" pos:end="19:36"><operator pos:start="19:27" pos:end="19:27">&amp;</operator><name pos:start="19:28" pos:end="19:36">laio_pool</name></expr></argument>, <argument pos:start="19:39" pos:end="19:40"><expr pos:start="19:39" pos:end="19:40"><name pos:start="19:39" pos:end="19:40">bs</name></expr></argument>, <argument pos:start="19:43" pos:end="19:44"><expr pos:start="19:43" pos:end="19:44"><name pos:start="19:43" pos:end="19:44">cb</name></expr></argument>, <argument pos:start="19:47" pos:end="19:52"><expr pos:start="19:47" pos:end="19:52"><name pos:start="19:47" pos:end="19:52">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="21:5" pos:end="23:20"><if pos:start="21:5" pos:end="23:20">if <condition pos:start="21:8" pos:end="21:16">(<expr pos:start="21:9" pos:end="21:15"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:15">laiocb</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:20"><block_content pos:start="23:9" pos:end="23:20">

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">laiocb</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:18">nbytes</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:31">nb_sectors</name> <operator pos:start="25:33" pos:end="25:33">*</operator> <literal type="number" pos:start="25:35" pos:end="25:37">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:10">laiocb</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:15">ctx</name></name> <operator pos:start="27:17" pos:end="27:17">=</operator> <name pos:start="27:19" pos:end="27:19">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:15"><name pos:start="29:5" pos:end="29:10">laiocb</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:15">ret</name></name> <operator pos:start="29:17" pos:end="29:17">=</operator> <operator pos:start="29:19" pos:end="29:19">-</operator><name pos:start="29:20" pos:end="29:30">EINPROGRESS</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:26"><expr pos:start="33:5" pos:end="33:25"><name pos:start="33:5" pos:end="33:9">iocbs</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <operator pos:start="33:13" pos:end="33:13">&amp;</operator><name pos:start="33:14" pos:end="33:25"><name pos:start="33:14" pos:end="33:19">laiocb</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:25">iocb</name></name></expr>;</expr_stmt>



    <switch pos:start="37:5" pos:end="61:5">switch <condition pos:start="37:12" pos:end="37:17">(<expr pos:start="37:13" pos:end="37:16"><name pos:start="37:13" pos:end="37:16">type</name></expr>)</condition> <block pos:start="37:19" pos:end="61:5">{<block_content pos:start="39:5" pos:end="59:28">

    <case pos:start="39:5" pos:end="39:24">case <expr pos:start="39:10" pos:end="39:23"><name pos:start="39:10" pos:end="39:23">QEMU_AIO_WRITE</name></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:66"><expr pos:start="41:9" pos:end="41:65"><call pos:start="41:9" pos:end="41:65"><name pos:start="41:9" pos:end="41:23">io_prep_pwritev</name><argument_list pos:start="41:24" pos:end="41:65">(<argument pos:start="41:25" pos:end="41:29"><expr pos:start="41:25" pos:end="41:29"><name pos:start="41:25" pos:end="41:29">iocbs</name></expr></argument>, <argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">fd</name></expr></argument>, <argument pos:start="41:36" pos:end="41:44"><expr pos:start="41:36" pos:end="41:44"><name pos:start="41:36" pos:end="41:44"><name pos:start="41:36" pos:end="41:39">qiov</name><operator pos:start="41:40" pos:end="41:41">-&gt;</operator><name pos:start="41:42" pos:end="41:44">iov</name></name></expr></argument>, <argument pos:start="41:47" pos:end="41:56"><expr pos:start="41:47" pos:end="41:56"><name pos:start="41:47" pos:end="41:56"><name pos:start="41:47" pos:end="41:50">qiov</name><operator pos:start="41:51" pos:end="41:52">-&gt;</operator><name pos:start="41:53" pos:end="41:56">niov</name></name></expr></argument>, <argument pos:start="41:59" pos:end="41:64"><expr pos:start="41:59" pos:end="41:64"><name pos:start="41:59" pos:end="41:64">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="43:9" pos:end="43:14">break;</break>

    <case pos:start="45:5" pos:end="45:23">case <expr pos:start="45:10" pos:end="45:22"><name pos:start="45:10" pos:end="45:22">QEMU_AIO_READ</name></expr>:</case>

        <expr_stmt pos:start="47:9" pos:end="47:65"><expr pos:start="47:9" pos:end="47:64"><call pos:start="47:9" pos:end="47:64"><name pos:start="47:9" pos:end="47:22">io_prep_preadv</name><argument_list pos:start="47:23" pos:end="47:64">(<argument pos:start="47:24" pos:end="47:28"><expr pos:start="47:24" pos:end="47:28"><name pos:start="47:24" pos:end="47:28">iocbs</name></expr></argument>, <argument pos:start="47:31" pos:end="47:32"><expr pos:start="47:31" pos:end="47:32"><name pos:start="47:31" pos:end="47:32">fd</name></expr></argument>, <argument pos:start="47:35" pos:end="47:43"><expr pos:start="47:35" pos:end="47:43"><name pos:start="47:35" pos:end="47:43"><name pos:start="47:35" pos:end="47:38">qiov</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:43">iov</name></name></expr></argument>, <argument pos:start="47:46" pos:end="47:55"><expr pos:start="47:46" pos:end="47:55"><name pos:start="47:46" pos:end="47:55"><name pos:start="47:46" pos:end="47:49">qiov</name><operator pos:start="47:50" pos:end="47:51">-&gt;</operator><name pos:start="47:52" pos:end="47:55">niov</name></name></expr></argument>, <argument pos:start="47:58" pos:end="47:63"><expr pos:start="47:58" pos:end="47:63"><name pos:start="47:58" pos:end="47:63">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="49:9" pos:end="49:14">break;</break>

    <comment type="block" pos:start="51:5" pos:end="51:66">/* Currently Linux kernel does not support other operations */</comment>

    <default pos:start="53:5" pos:end="53:12">default:</default>

        <expr_stmt pos:start="55:9" pos:end="57:40"><expr pos:start="55:9" pos:end="57:39"><call pos:start="55:9" pos:end="57:39"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="57:39">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:62"><expr pos:start="55:25" pos:end="55:62"><literal type="string" pos:start="55:25" pos:end="55:62">"%s: invalid AIO request type 0x%x.\n"</literal></expr></argument>,

                        <argument pos:start="57:25" pos:end="57:32"><expr pos:start="57:25" pos:end="57:32"><name pos:start="57:25" pos:end="57:32">__func__</name></expr></argument>, <argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="59:9" pos:end="59:28">goto <name pos:start="59:14" pos:end="59:27">out_free_aiocb</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="63:5" pos:end="63:42"><expr pos:start="63:5" pos:end="63:41"><call pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:18">io_set_eventfd</name><argument_list pos:start="63:19" pos:end="63:41">(<argument pos:start="63:20" pos:end="63:32"><expr pos:start="63:20" pos:end="63:32"><operator pos:start="63:20" pos:end="63:20">&amp;</operator><name pos:start="63:21" pos:end="63:32"><name pos:start="63:21" pos:end="63:26">laiocb</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:32">iocb</name></name></expr></argument>, <argument pos:start="63:35" pos:end="63:40"><expr pos:start="63:35" pos:end="63:40"><name pos:start="63:35" pos:end="63:40"><name pos:start="63:35" pos:end="63:35">s</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:40">efd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:15"><expr pos:start="65:5" pos:end="65:14"><name pos:start="65:5" pos:end="65:12"><name pos:start="65:5" pos:end="65:5">s</name><operator pos:start="65:6" pos:end="65:7">-&gt;</operator><name pos:start="65:8" pos:end="65:12">count</name></name><operator pos:start="65:13" pos:end="65:14">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="69:5" pos:end="71:27"><if pos:start="69:5" pos:end="71:27">if <condition pos:start="69:8" pos:end="69:41">(<expr pos:start="69:9" pos:end="69:40"><call pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:17">io_submit</name><argument_list pos:start="69:18" pos:end="69:36">(<argument pos:start="69:19" pos:end="69:24"><expr pos:start="69:19" pos:end="69:24"><name pos:start="69:19" pos:end="69:24"><name pos:start="69:19" pos:end="69:19">s</name><operator pos:start="69:20" pos:end="69:21">-&gt;</operator><name pos:start="69:22" pos:end="69:24">ctx</name></name></expr></argument>, <argument pos:start="69:27" pos:end="69:27"><expr pos:start="69:27" pos:end="69:27"><literal type="number" pos:start="69:27" pos:end="69:27">1</literal></expr></argument>, <argument pos:start="69:30" pos:end="69:35"><expr pos:start="69:30" pos:end="69:35"><operator pos:start="69:30" pos:end="69:30">&amp;</operator><name pos:start="69:31" pos:end="69:35">iocbs</name></expr></argument>)</argument_list></call> <operator pos:start="69:38" pos:end="69:38">&lt;</operator> <literal type="number" pos:start="69:40" pos:end="69:40">0</literal></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:27"><block_content pos:start="71:9" pos:end="71:27">

        <goto pos:start="71:9" pos:end="71:27">goto <name pos:start="71:14" pos:end="71:26">out_dec_count</name>;</goto></block_content></block></if></if_stmt>

    <return pos:start="73:5" pos:end="73:27">return <expr pos:start="73:12" pos:end="73:26"><operator pos:start="73:12" pos:end="73:12">&amp;</operator><name pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:18">laiocb</name><operator pos:start="73:19" pos:end="73:20">-&gt;</operator><name pos:start="73:21" pos:end="73:26">common</name></name></expr>;</return>



<label pos:start="77:1" pos:end="77:15"><name pos:start="77:1" pos:end="77:14">out_free_aiocb</name>:</label>

    <expr_stmt pos:start="79:5" pos:end="79:29"><expr pos:start="79:5" pos:end="79:28"><call pos:start="79:5" pos:end="79:28"><name pos:start="79:5" pos:end="79:20">qemu_aio_release</name><argument_list pos:start="79:21" pos:end="79:28">(<argument pos:start="79:22" pos:end="79:27"><expr pos:start="79:22" pos:end="79:27"><name pos:start="79:22" pos:end="79:27">laiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="81:1" pos:end="81:14"><name pos:start="81:1" pos:end="81:13">out_dec_count</name>:</label>

    <expr_stmt pos:start="83:5" pos:end="83:15"><expr pos:start="83:5" pos:end="83:14"><name pos:start="83:5" pos:end="83:12"><name pos:start="83:5" pos:end="83:5">s</name><operator pos:start="83:6" pos:end="83:7">-&gt;</operator><name pos:start="83:8" pos:end="83:12">count</name></name><operator pos:start="83:13" pos:end="83:14">--</operator></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:16">return <expr pos:start="85:12" pos:end="85:15"><name pos:start="85:12" pos:end="85:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
