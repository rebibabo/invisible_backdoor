<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15145.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:16">parse</name><parameter_list pos:start="1:17" pos:end="7:47">(<parameter pos:start="1:18" pos:end="1:42"><decl pos:start="1:18" pos:end="1:42"><type pos:start="1:18" pos:end="1:42"><name pos:start="1:18" pos:end="1:37">AVCodecParserContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">ctx</name></decl></parameter>,

                 <parameter pos:start="3:18" pos:end="3:38"><decl pos:start="3:18" pos:end="3:38"><type pos:start="3:18" pos:end="3:38"><name pos:start="3:18" pos:end="3:31">AVCodecContext</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:38">avctx</name></decl></parameter>,

                 <parameter pos:start="5:18" pos:end="5:41"><decl pos:start="5:18" pos:end="5:41"><type pos:start="5:18" pos:end="5:41"><specifier pos:start="5:18" pos:end="5:22">const</specifier> <name pos:start="5:24" pos:end="5:30">uint8_t</name> <modifier pos:start="5:32" pos:end="5:32">*</modifier><modifier pos:start="5:33" pos:end="5:33">*</modifier></type><name pos:start="5:34" pos:end="5:41">out_data</name></decl></parameter>, <parameter pos:start="5:44" pos:end="5:56"><decl pos:start="5:44" pos:end="5:56"><type pos:start="5:44" pos:end="5:56"><name pos:start="5:44" pos:end="5:46">int</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:56">out_size</name></decl></parameter>,

                 <parameter pos:start="7:18" pos:end="7:36"><decl pos:start="7:18" pos:end="7:36"><type pos:start="7:18" pos:end="7:36"><specifier pos:start="7:18" pos:end="7:22">const</specifier> <name pos:start="7:24" pos:end="7:30">uint8_t</name> <modifier pos:start="7:32" pos:end="7:32">*</modifier></type><name pos:start="7:33" pos:end="7:36">data</name></decl></parameter>, <parameter pos:start="7:39" pos:end="7:46"><decl pos:start="7:39" pos:end="7:46"><type pos:start="7:39" pos:end="7:46"><name pos:start="7:39" pos:end="7:41">int</name></type> <name pos:start="7:43" pos:end="7:46">size</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="151:1">{<block_content pos:start="11:5" pos:end="149:16">

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">VP9ParseContext</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:22">s</name> <init pos:start="11:24" pos:end="11:39">= <expr pos:start="11:26" pos:end="11:39"><name pos:start="11:26" pos:end="11:39"><name pos:start="11:26" pos:end="11:28">ctx</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:17">full_size</name> <init pos:start="13:19" pos:end="13:24">= <expr pos:start="13:21" pos:end="13:24"><name pos:start="13:21" pos:end="13:24">size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">marker</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:18">(<expr pos:start="19:9" pos:end="19:17"><name pos:start="19:9" pos:end="19:12">size</name> <operator pos:start="19:14" pos:end="19:15">&lt;=</operator> <literal type="number" pos:start="19:17" pos:end="19:17">0</literal></expr>)</condition> <block pos:start="19:20" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:17">

        <expr_stmt pos:start="21:9" pos:end="21:22"><expr pos:start="21:9" pos:end="21:21"><operator pos:start="21:9" pos:end="21:9">*</operator><name pos:start="21:10" pos:end="21:17">out_size</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:25"><expr pos:start="23:9" pos:end="23:24"><operator pos:start="23:9" pos:end="23:9">*</operator><name pos:start="23:10" pos:end="23:17">out_data</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:24">data</name></expr>;</expr_stmt>



        <return pos:start="27:9" pos:end="27:17">return <expr pos:start="27:16" pos:end="27:16"><literal type="number" pos:start="27:16" pos:end="27:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:24">(<expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">n_frames</name></name> <operator pos:start="33:21" pos:end="33:21">&gt;</operator> <literal type="number" pos:start="33:23" pos:end="33:23">0</literal></expr>)</condition> <block pos:start="33:26" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:78">

        <expr_stmt pos:start="35:9" pos:end="35:25"><expr pos:start="35:9" pos:end="35:24"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:17">out_data</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:24">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:43"><expr pos:start="37:9" pos:end="37:42"><operator pos:start="37:9" pos:end="37:9">*</operator><name pos:start="37:10" pos:end="37:17">out_size</name> <operator pos:start="37:19" pos:end="37:19">=</operator> <name pos:start="37:21" pos:end="37:42"><name pos:start="37:21" pos:end="37:21">s</name><operator pos:start="37:22" pos:end="37:23">-&gt;</operator><name pos:start="37:24" pos:end="37:27">size</name><index pos:start="37:28" pos:end="37:42">[<expr pos:start="37:29" pos:end="37:41"><operator pos:start="37:29" pos:end="37:30">--</operator><name pos:start="37:31" pos:end="37:41"><name pos:start="37:31" pos:end="37:31">s</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:41">n_frames</name></name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:47"><expr pos:start="39:9" pos:end="39:46"><call pos:start="39:9" pos:end="39:46"><name pos:start="39:9" pos:end="39:19">parse_frame</name><argument_list pos:start="39:20" pos:end="39:46">(<argument pos:start="39:21" pos:end="39:23"><expr pos:start="39:21" pos:end="39:23"><name pos:start="39:21" pos:end="39:23">ctx</name></expr></argument>, <argument pos:start="39:26" pos:end="39:34"><expr pos:start="39:26" pos:end="39:34"><operator pos:start="39:26" pos:end="39:26">*</operator><name pos:start="39:27" pos:end="39:34">out_data</name></expr></argument>, <argument pos:start="39:37" pos:end="39:45"><expr pos:start="39:37" pos:end="39:45"><operator pos:start="39:37" pos:end="39:37">*</operator><name pos:start="39:38" pos:end="39:45">out_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <return pos:start="43:9" pos:end="43:78">return <expr pos:start="43:16" pos:end="43:49"><ternary pos:start="43:16" pos:end="43:49"><condition pos:start="43:16" pos:end="43:32"><expr pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:26"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:26">n_frames</name></name> <operator pos:start="43:28" pos:end="43:28">&gt;</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr> ?</condition><then pos:start="43:34" pos:end="43:42"> <expr pos:start="43:34" pos:end="43:42"><operator pos:start="43:34" pos:end="43:34">*</operator><name pos:start="43:35" pos:end="43:42">out_size</name></expr> </then><else pos:start="43:44" pos:end="43:49">: <expr pos:start="43:46" pos:end="43:49"><name pos:start="43:46" pos:end="43:49">size</name></expr></else></ternary></expr> <comment type="block" pos:start="43:51" pos:end="43:77">/* i.e. include idx tail */</comment>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:10">marker</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <name pos:start="49:14" pos:end="49:27"><name pos:start="49:14" pos:end="49:17">data</name><index pos:start="49:18" pos:end="49:27">[<expr pos:start="49:19" pos:end="49:26"><name pos:start="49:19" pos:end="49:22">size</name> <operator pos:start="49:24" pos:end="49:24">-</operator> <literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="137:5"><if pos:start="51:5" pos:end="137:5">if <condition pos:start="51:8" pos:end="51:32">(<expr pos:start="51:9" pos:end="51:31"><operator pos:start="51:9" pos:end="51:9">(</operator><name pos:start="51:10" pos:end="51:15">marker</name> <operator pos:start="51:17" pos:end="51:17">&amp;</operator> <literal type="number" pos:start="51:19" pos:end="51:22">0xe0</literal><operator pos:start="51:23" pos:end="51:23">)</operator> <operator pos:start="51:25" pos:end="51:26">==</operator> <literal type="number" pos:start="51:28" pos:end="51:31">0xc0</literal></expr>)</condition> <block pos:start="51:34" pos:end="137:5">{<block_content pos:start="53:9" pos:end="135:9">

        <decl_stmt pos:start="53:9" pos:end="53:47"><decl pos:start="53:9" pos:end="53:46"><type pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:11">int</name></type> <name pos:start="53:13" pos:end="53:18">nbytes</name> <init pos:start="53:20" pos:end="53:46">= <expr pos:start="53:22" pos:end="53:46"><literal type="number" pos:start="53:22" pos:end="53:24">1</literal> <operator pos:start="53:24" pos:end="53:24">+</operator> <operator pos:start="53:26" pos:end="53:26">(</operator><operator pos:start="53:27" pos:end="53:27">(</operator><name pos:start="53:28" pos:end="53:33">marker</name> <operator pos:start="53:35" pos:end="53:36">&gt;&gt;</operator> <literal type="number" pos:start="53:38" pos:end="53:38">3</literal><operator pos:start="53:39" pos:end="53:39">)</operator> <operator pos:start="53:41" pos:end="53:41">&amp;</operator> <literal type="number" pos:start="53:43" pos:end="53:45">0x3</literal><operator pos:start="53:46" pos:end="53:46">)</operator></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:74"><decl pos:start="55:9" pos:end="55:41"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:20">n_frames</name> <init pos:start="55:22" pos:end="55:41">= <expr pos:start="55:24" pos:end="55:41"><literal type="number" pos:start="55:24" pos:end="55:26">1</literal> <operator pos:start="55:26" pos:end="55:26">+</operator> <operator pos:start="55:28" pos:end="55:28">(</operator><name pos:start="55:29" pos:end="55:34">marker</name> <operator pos:start="55:36" pos:end="55:36">&amp;</operator> <literal type="number" pos:start="55:38" pos:end="55:40">0x7</literal><operator pos:start="55:41" pos:end="55:41">)</operator></expr></init></decl>, <decl pos:start="55:44" pos:end="55:73"><type ref="prev" pos:start="55:9" pos:end="55:11"/><name pos:start="55:44" pos:end="55:49">idx_sz</name> <init pos:start="55:51" pos:end="55:73">= <expr pos:start="55:53" pos:end="55:73"><literal type="number" pos:start="55:53" pos:end="55:55">2</literal> <operator pos:start="55:55" pos:end="55:55">+</operator> <name pos:start="55:57" pos:end="55:64">n_frames</name> <operator pos:start="55:66" pos:end="55:66">*</operator> <name pos:start="55:68" pos:end="55:73">nbytes</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="59:9" pos:end="135:9"><if pos:start="59:9" pos:end="135:9">if <condition pos:start="59:12" pos:end="59:60">(<expr pos:start="59:13" pos:end="59:59"><name pos:start="59:13" pos:end="59:16">size</name> <operator pos:start="59:18" pos:end="59:19">&gt;=</operator> <name pos:start="59:21" pos:end="59:26">idx_sz</name> <operator pos:start="59:28" pos:end="59:29">&amp;&amp;</operator> <name pos:start="59:31" pos:end="59:49"><name pos:start="59:31" pos:end="59:34">data</name><index pos:start="59:35" pos:end="59:49">[<expr pos:start="59:36" pos:end="59:48"><name pos:start="59:36" pos:end="59:39">size</name> <operator pos:start="59:41" pos:end="59:41">-</operator> <name pos:start="59:43" pos:end="59:48">idx_sz</name></expr>]</index></name> <operator pos:start="59:51" pos:end="59:52">==</operator> <name pos:start="59:54" pos:end="59:59">marker</name></expr>)</condition> <block pos:start="59:62" pos:end="135:9">{<block_content pos:start="61:13" pos:end="133:13">

            <decl_stmt pos:start="61:13" pos:end="61:58"><decl pos:start="61:13" pos:end="61:57"><type pos:start="61:13" pos:end="61:27"><specifier pos:start="61:13" pos:end="61:17">const</specifier> <name pos:start="61:19" pos:end="61:25">uint8_t</name> <modifier pos:start="61:27" pos:end="61:27">*</modifier></type><name pos:start="61:28" pos:end="61:30">idx</name> <init pos:start="61:32" pos:end="61:57">= <expr pos:start="61:34" pos:end="61:57"><name pos:start="61:34" pos:end="61:37">data</name> <operator pos:start="61:39" pos:end="61:39">+</operator> <name pos:start="61:41" pos:end="61:44">size</name> <operator pos:start="61:46" pos:end="61:46">+</operator> <literal type="number" pos:start="61:48" pos:end="61:50">1</literal> <operator pos:start="61:50" pos:end="61:50">-</operator> <name pos:start="61:52" pos:end="61:57">idx_sz</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="63:13" pos:end="63:26"><decl pos:start="63:13" pos:end="63:25"><type pos:start="63:13" pos:end="63:15"><name pos:start="63:13" pos:end="63:15">int</name></type> <name pos:start="63:17" pos:end="63:21">first</name> <init pos:start="63:23" pos:end="63:25">= <expr pos:start="63:25" pos:end="63:25"><literal type="number" pos:start="63:25" pos:end="63:25">1</literal></expr></init></decl>;</decl_stmt>



            <switch pos:start="67:13" pos:end="133:13">switch <condition pos:start="67:20" pos:end="67:27">(<expr pos:start="67:21" pos:end="67:26"><name pos:start="67:21" pos:end="67:26">nbytes</name></expr>)</condition> <block pos:start="67:29" pos:end="133:13">{<block_content pos:start="125:17" pos:end="131:40">

<cpp:define pos:start="69:1" pos:end="121:32">#<cpp:directive pos:start="69:2" pos:end="69:7">define</cpp:directive> <cpp:macro pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:14">case_n</name><parameter_list pos:start="69:15" pos:end="69:21">(<parameter pos:start="69:16" pos:end="69:16"><type pos:start="69:16" pos:end="69:16"><name pos:start="69:16" pos:end="69:16">a</name></type></parameter>, <parameter pos:start="69:19" pos:end="69:20"><type pos:start="69:19" pos:end="69:20"><name pos:start="69:19" pos:end="69:20">rd</name></type></parameter>)</parameter_list></cpp:macro> \

            <cpp:value pos:start="71:13" pos:end="121:32">case a: \

                while (n_frames--) { \

                    unsigned sz = rd; \

                    idx += a; \

                    if (sz &gt; size) { \

                        s-&gt;n_frames = 0; \

                        *out_size = size; \

                        *out_data = data; \

                        av_log(avctx, AV_LOG_ERROR, \

                               "Superframe packet size too big: %u &gt; %d\n", \

                               sz, size); \

                        return full_size; \

                    } \

                    if (first) { \

                        first = 0; \

                        *out_data = data; \

                        *out_size = sz; \

                        s-&gt;n_frames = n_frames; \

                    } else { \

                        s-&gt;size[n_frames] = sz; \

                    } \

                    data += sz; \

                    size -= sz; \

                } \

                parse_frame(ctx, *out_data, *out_size); \

                return *out_size</cpp:value></cpp:define>



                <expr_stmt pos:start="125:17" pos:end="125:32"><expr pos:start="125:17" pos:end="125:31"><call pos:start="125:17" pos:end="125:31"><name pos:start="125:17" pos:end="125:22">case_n</name><argument_list pos:start="125:23" pos:end="125:31">(<argument pos:start="125:24" pos:end="125:24"><expr pos:start="125:24" pos:end="125:24"><literal type="number" pos:start="125:24" pos:end="125:24">1</literal></expr></argument>, <argument pos:start="125:27" pos:end="125:30"><expr pos:start="125:27" pos:end="125:30"><operator pos:start="125:27" pos:end="125:27">*</operator><name pos:start="125:28" pos:end="125:30">idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:40"><expr pos:start="127:17" pos:end="127:39"><call pos:start="127:17" pos:end="127:39"><name pos:start="127:17" pos:end="127:22">case_n</name><argument_list pos:start="127:23" pos:end="127:39">(<argument pos:start="127:24" pos:end="127:24"><expr pos:start="127:24" pos:end="127:24"><literal type="number" pos:start="127:24" pos:end="127:24">2</literal></expr></argument>, <argument pos:start="127:27" pos:end="127:38"><expr pos:start="127:27" pos:end="127:38"><call pos:start="127:27" pos:end="127:38"><name pos:start="127:27" pos:end="127:33">AV_RL16</name><argument_list pos:start="127:34" pos:end="127:38">(<argument pos:start="127:35" pos:end="127:37"><expr pos:start="127:35" pos:end="127:37"><name pos:start="127:35" pos:end="127:37">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="129:17" pos:end="129:40"><expr pos:start="129:17" pos:end="129:39"><call pos:start="129:17" pos:end="129:39"><name pos:start="129:17" pos:end="129:22">case_n</name><argument_list pos:start="129:23" pos:end="129:39">(<argument pos:start="129:24" pos:end="129:24"><expr pos:start="129:24" pos:end="129:24"><literal type="number" pos:start="129:24" pos:end="129:24">3</literal></expr></argument>, <argument pos:start="129:27" pos:end="129:38"><expr pos:start="129:27" pos:end="129:38"><call pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:33">AV_RL24</name><argument_list pos:start="129:34" pos:end="129:38">(<argument pos:start="129:35" pos:end="129:37"><expr pos:start="129:35" pos:end="129:37"><name pos:start="129:35" pos:end="129:37">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:40"><expr pos:start="131:17" pos:end="131:39"><call pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:22">case_n</name><argument_list pos:start="131:23" pos:end="131:39">(<argument pos:start="131:24" pos:end="131:24"><expr pos:start="131:24" pos:end="131:24"><literal type="number" pos:start="131:24" pos:end="131:24">4</literal></expr></argument>, <argument pos:start="131:27" pos:end="131:38"><expr pos:start="131:27" pos:end="131:38"><call pos:start="131:27" pos:end="131:38"><name pos:start="131:27" pos:end="131:33">AV_RL32</name><argument_list pos:start="131:34" pos:end="131:38">(<argument pos:start="131:35" pos:end="131:37"><expr pos:start="131:35" pos:end="131:37"><name pos:start="131:35" pos:end="131:37">idx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:21"><expr pos:start="141:5" pos:end="141:20"><operator pos:start="141:5" pos:end="141:5">*</operator><name pos:start="141:6" pos:end="141:13">out_data</name> <operator pos:start="141:15" pos:end="141:15">=</operator> <name pos:start="141:17" pos:end="141:20">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:21"><expr pos:start="143:5" pos:end="143:20"><operator pos:start="143:5" pos:end="143:5">*</operator><name pos:start="143:6" pos:end="143:13">out_size</name> <operator pos:start="143:15" pos:end="143:15">=</operator> <name pos:start="143:17" pos:end="143:20">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:33"><expr pos:start="145:5" pos:end="145:32"><call pos:start="145:5" pos:end="145:32"><name pos:start="145:5" pos:end="145:15">parse_frame</name><argument_list pos:start="145:16" pos:end="145:32">(<argument pos:start="145:17" pos:end="145:19"><expr pos:start="145:17" pos:end="145:19"><name pos:start="145:17" pos:end="145:19">ctx</name></expr></argument>, <argument pos:start="145:22" pos:end="145:25"><expr pos:start="145:22" pos:end="145:25"><name pos:start="145:22" pos:end="145:25">data</name></expr></argument>, <argument pos:start="145:28" pos:end="145:31"><expr pos:start="145:28" pos:end="145:31"><name pos:start="145:28" pos:end="145:31">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="149:5" pos:end="149:16">return <expr pos:start="149:12" pos:end="149:15"><name pos:start="149:12" pos:end="149:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
