<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12206.c" pos:tabs="8"><function pos:start="1:1" pos:end="121:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:27">ff_wma_run_level_decode</name><parameter_list pos:start="1:28" pos:end="11:45">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name><modifier pos:start="1:43" pos:end="1:43">*</modifier></type> <name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name><modifier pos:start="1:65" pos:end="1:65">*</modifier></type> <name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:36"><decl pos:start="3:29" pos:end="3:36"><type pos:start="3:29" pos:end="3:36"><name pos:start="3:29" pos:end="3:31">VLC</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">vlc</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:55"><decl pos:start="5:29" pos:end="5:55"><type pos:start="5:29" pos:end="5:55"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:42">uint16_t</name> <modifier pos:start="5:44" pos:end="5:44">*</modifier></type><name pos:start="5:45" pos:end="5:55">level_table</name></decl></parameter>, <parameter pos:start="5:58" pos:end="5:82"><decl pos:start="5:58" pos:end="5:82"><type pos:start="5:58" pos:end="5:82"><specifier pos:start="5:58" pos:end="5:62">const</specifier> <name pos:start="5:64" pos:end="5:71">uint16_t</name> <modifier pos:start="5:73" pos:end="5:73">*</modifier></type><name pos:start="5:74" pos:end="5:82">run_table</name></decl></parameter>,

                            <parameter pos:start="7:29" pos:end="7:39"><decl pos:start="7:29" pos:end="7:39"><type pos:start="7:29" pos:end="7:39"><name pos:start="7:29" pos:end="7:31">int</name></type> <name pos:start="7:33" pos:end="7:39">version</name></decl></parameter>, <parameter pos:start="7:42" pos:end="7:53"><decl pos:start="7:42" pos:end="7:53"><type pos:start="7:42" pos:end="7:53"><name pos:start="7:42" pos:end="7:48">WMACoef</name> <modifier pos:start="7:50" pos:end="7:50">*</modifier></type><name pos:start="7:51" pos:end="7:53">ptr</name></decl></parameter>, <parameter pos:start="7:56" pos:end="7:65"><decl pos:start="7:56" pos:end="7:65"><type pos:start="7:56" pos:end="7:65"><name pos:start="7:56" pos:end="7:58">int</name></type> <name pos:start="7:60" pos:end="7:65">offset</name></decl></parameter>,

                            <parameter pos:start="9:29" pos:end="9:41"><decl pos:start="9:29" pos:end="9:41"><type pos:start="9:29" pos:end="9:41"><name pos:start="9:29" pos:end="9:31">int</name></type> <name pos:start="9:33" pos:end="9:41">num_coefs</name></decl></parameter>, <parameter pos:start="9:44" pos:end="9:56"><decl pos:start="9:44" pos:end="9:56"><type pos:start="9:44" pos:end="9:56"><name pos:start="9:44" pos:end="9:46">int</name></type> <name pos:start="9:48" pos:end="9:56">block_len</name></decl></parameter>, <parameter pos:start="9:59" pos:end="9:76"><decl pos:start="9:59" pos:end="9:76"><type pos:start="9:59" pos:end="9:76"><name pos:start="9:59" pos:end="9:61">int</name></type> <name pos:start="9:63" pos:end="9:76">frame_len_bits</name></decl></parameter>,

                            <parameter pos:start="11:29" pos:end="11:44"><decl pos:start="11:29" pos:end="11:44"><type pos:start="11:29" pos:end="11:44"><name pos:start="11:29" pos:end="11:31">int</name></type> <name pos:start="11:33" pos:end="11:44">coef_nb_bits</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="121:1">{<block_content pos:start="15:5" pos:end="119:13">

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">code</name></decl>, <decl pos:start="15:15" pos:end="15:17"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:15" pos:end="15:17">run</name></decl>, <decl pos:start="15:20" pos:end="15:24"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:20" pos:end="15:24">level</name></decl>, <decl pos:start="15:27" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:27" pos:end="15:30">sign</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:11">WMACoef</name><modifier pos:start="17:12" pos:end="17:12">*</modifier></type> <name pos:start="17:14" pos:end="17:17">eptr</name> <init pos:start="17:19" pos:end="17:35">= <expr pos:start="17:21" pos:end="17:35"><name pos:start="17:21" pos:end="17:23">ptr</name> <operator pos:start="17:25" pos:end="17:25">+</operator> <name pos:start="17:27" pos:end="17:35">num_coefs</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:7">ptr</name> <operator pos:start="19:9" pos:end="19:10">+=</operator> <name pos:start="19:12" pos:end="19:17">offset</name></expr>;</expr_stmt>

    <for pos:start="21:5" pos:end="117:5">for<control pos:start="21:8" pos:end="21:11">(<init pos:start="21:9" pos:end="21:9">;</init><condition pos:start="21:10" pos:end="21:10">;</condition><incr/>)</control> <block pos:start="21:13" pos:end="117:5">{<block_content pos:start="23:9" pos:end="115:18">

        <expr_stmt pos:start="23:9" pos:end="23:57"><expr pos:start="23:9" pos:end="23:56"><name pos:start="23:9" pos:end="23:12">code</name> <operator pos:start="23:14" pos:end="23:14">=</operator> <call pos:start="23:16" pos:end="23:56"><name pos:start="23:16" pos:end="23:23">get_vlc2</name><argument_list pos:start="23:24" pos:end="23:56">(<argument pos:start="23:25" pos:end="23:26"><expr pos:start="23:25" pos:end="23:26"><name pos:start="23:25" pos:end="23:26">gb</name></expr></argument>, <argument pos:start="23:29" pos:end="23:38"><expr pos:start="23:29" pos:end="23:38"><name pos:start="23:29" pos:end="23:38"><name pos:start="23:29" pos:end="23:31">vlc</name><operator pos:start="23:32" pos:end="23:33">-&gt;</operator><name pos:start="23:34" pos:end="23:38">table</name></name></expr></argument>, <argument pos:start="23:41" pos:end="23:47"><expr pos:start="23:41" pos:end="23:47"><name pos:start="23:41" pos:end="23:47">VLCBITS</name></expr></argument>, <argument pos:start="23:50" pos:end="23:55"><expr pos:start="23:50" pos:end="23:55"><name pos:start="23:50" pos:end="23:55">VLCMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:22"><if pos:start="25:9" pos:end="27:22">if <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><name pos:start="25:13" pos:end="25:16">code</name> <operator pos:start="25:18" pos:end="25:18">&lt;</operator> <literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:22"><block_content pos:start="27:13" pos:end="27:22">

            <return pos:start="27:13" pos:end="27:22">return <expr pos:start="27:20" pos:end="27:21"><operator pos:start="27:20" pos:end="27:20">-</operator><literal type="number" pos:start="27:21" pos:end="27:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="89:9"><if pos:start="29:9" pos:end="35:9">if <condition pos:start="29:12" pos:end="29:22">(<expr pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:16">code</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <literal type="number" pos:start="29:21" pos:end="29:21">1</literal></expr>)</condition> <block pos:start="29:24" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:18">

            <comment type="block" pos:start="31:13" pos:end="31:21">/* EOB */</comment>

            <break pos:start="33:13" pos:end="33:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="35:11" pos:end="81:9">else if <condition pos:start="35:19" pos:end="35:29">(<expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:23">code</name> <operator pos:start="35:25" pos:end="35:26">==</operator> <literal type="number" pos:start="35:28" pos:end="35:28">0</literal></expr>)</condition> <block pos:start="35:31" pos:end="81:9">{<block_content pos:start="39:13" pos:end="79:13">

            <comment type="block" pos:start="37:13" pos:end="37:24">/* escape */</comment>

            <if_stmt pos:start="39:13" pos:end="79:13"><if pos:start="39:13" pos:end="49:13">if <condition pos:start="39:16" pos:end="39:25">(<expr pos:start="39:17" pos:end="39:24"><operator pos:start="39:17" pos:end="39:17">!</operator><name pos:start="39:18" pos:end="39:24">version</name></expr>)</condition> <block pos:start="39:27" pos:end="49:13">{<block_content pos:start="41:17" pos:end="47:51">

                <expr_stmt pos:start="41:17" pos:end="41:51"><expr pos:start="41:17" pos:end="41:50"><name pos:start="41:17" pos:end="41:21">level</name> <operator pos:start="41:23" pos:end="41:23">=</operator> <call pos:start="41:25" pos:end="41:50"><name pos:start="41:25" pos:end="41:32">get_bits</name><argument_list pos:start="41:33" pos:end="41:50">(<argument pos:start="41:34" pos:end="41:35"><expr pos:start="41:34" pos:end="41:35"><name pos:start="41:34" pos:end="41:35">gb</name></expr></argument>, <argument pos:start="41:38" pos:end="41:49"><expr pos:start="41:38" pos:end="41:49"><name pos:start="41:38" pos:end="41:49">coef_nb_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="43:17" pos:end="45:52">/* NOTE: this is rather suboptimal. reading

                   block_len_bits would be better */</comment>

                <expr_stmt pos:start="47:17" pos:end="47:51"><expr pos:start="47:17" pos:end="47:50"><name pos:start="47:17" pos:end="47:19">run</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:50"><name pos:start="47:23" pos:end="47:30">get_bits</name><argument_list pos:start="47:31" pos:end="47:50">(<argument pos:start="47:32" pos:end="47:33"><expr pos:start="47:32" pos:end="47:33"><name pos:start="47:32" pos:end="47:33">gb</name></expr></argument>, <argument pos:start="47:36" pos:end="47:49"><expr pos:start="47:36" pos:end="47:49"><name pos:start="47:36" pos:end="47:49">frame_len_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="49:15" pos:end="79:13">else <block pos:start="49:20" pos:end="79:13">{<block_content pos:start="51:17" pos:end="77:29">

                <expr_stmt pos:start="51:17" pos:end="51:49"><expr pos:start="51:17" pos:end="51:48"><name pos:start="51:17" pos:end="51:21">level</name> <operator pos:start="51:23" pos:end="51:23">=</operator> <call pos:start="51:25" pos:end="51:48"><name pos:start="51:25" pos:end="51:44">ff_wma_get_large_val</name><argument_list pos:start="51:45" pos:end="51:48">(<argument pos:start="51:46" pos:end="51:47"><expr pos:start="51:46" pos:end="51:47"><name pos:start="51:46" pos:end="51:47">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" format="doxygen" pos:start="53:17" pos:end="53:36">/** escape decode */</comment>

                <if_stmt pos:start="55:17" pos:end="77:29"><if pos:start="55:17" pos:end="75:17">if <condition pos:start="55:20" pos:end="55:34">(<expr pos:start="55:21" pos:end="55:33"><call pos:start="55:21" pos:end="55:33"><name pos:start="55:21" pos:end="55:29">get_bits1</name><argument_list pos:start="55:30" pos:end="55:33">(<argument pos:start="55:31" pos:end="55:32"><expr pos:start="55:31" pos:end="55:32"><name pos:start="55:31" pos:end="55:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:36" pos:end="75:17">{<block_content pos:start="57:21" pos:end="73:50">

                    <if_stmt pos:start="57:21" pos:end="73:50"><if pos:start="57:21" pos:end="71:21">if <condition pos:start="57:24" pos:end="57:38">(<expr pos:start="57:25" pos:end="57:37"><call pos:start="57:25" pos:end="57:37"><name pos:start="57:25" pos:end="57:33">get_bits1</name><argument_list pos:start="57:34" pos:end="57:37">(<argument pos:start="57:35" pos:end="57:36"><expr pos:start="57:35" pos:end="57:36"><name pos:start="57:35" pos:end="57:36">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:40" pos:end="71:21">{<block_content pos:start="59:25" pos:end="69:67">

                        <if_stmt pos:start="59:25" pos:end="69:67"><if pos:start="59:25" pos:end="67:25">if <condition pos:start="59:28" pos:end="59:42">(<expr pos:start="59:29" pos:end="59:41"><call pos:start="59:29" pos:end="59:41"><name pos:start="59:29" pos:end="59:37">get_bits1</name><argument_list pos:start="59:38" pos:end="59:41">(<argument pos:start="59:39" pos:end="59:40"><expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="59:44" pos:end="67:25">{<block_content pos:start="61:29" pos:end="65:38">

                            <expr_stmt pos:start="61:29" pos:end="63:60"><expr pos:start="61:29" pos:end="63:59"><call pos:start="61:29" pos:end="63:59"><name pos:start="61:29" pos:end="61:34">av_log</name><argument_list pos:start="61:35" pos:end="63:59">(<argument pos:start="61:36" pos:end="61:40"><expr pos:start="61:36" pos:end="61:40"><name pos:start="61:36" pos:end="61:40">avctx</name></expr></argument>,<argument pos:start="61:42" pos:end="61:53"><expr pos:start="61:42" pos:end="61:53"><name pos:start="61:42" pos:end="61:53">AV_LOG_ERROR</name></expr></argument>,

                                <argument pos:start="63:33" pos:end="63:58"><expr pos:start="63:33" pos:end="63:58"><literal type="string" pos:start="63:33" pos:end="63:58">"broken escape sequence\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <return pos:start="65:29" pos:end="65:38">return <expr pos:start="65:36" pos:end="65:37"><operator pos:start="65:36" pos:end="65:36">-</operator><literal type="number" pos:start="65:37" pos:end="65:37">1</literal></expr>;</return>

                        </block_content>}</block></if> <else pos:start="67:27" pos:end="69:67">else<block type="pseudo" pos:start="69:29" pos:end="69:67"><block_content pos:start="69:29" pos:end="69:67">

                            <expr_stmt pos:start="69:29" pos:end="69:67"><expr pos:start="69:29" pos:end="69:66"><name pos:start="69:29" pos:end="69:31">run</name> <operator pos:start="69:33" pos:end="69:33">=</operator> <call pos:start="69:35" pos:end="69:62"><name pos:start="69:35" pos:end="69:42">get_bits</name><argument_list pos:start="69:43" pos:end="69:62">(<argument pos:start="69:44" pos:end="69:45"><expr pos:start="69:44" pos:end="69:45"><name pos:start="69:44" pos:end="69:45">gb</name></expr></argument>, <argument pos:start="69:48" pos:end="69:61"><expr pos:start="69:48" pos:end="69:61"><name pos:start="69:48" pos:end="69:61">frame_len_bits</name></expr></argument>)</argument_list></call> <operator pos:start="69:64" pos:end="69:64">+</operator> <literal type="number" pos:start="69:66" pos:end="69:66">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="71:23" pos:end="73:50">else<block type="pseudo" pos:start="73:25" pos:end="73:50"><block_content pos:start="73:25" pos:end="73:50">

                        <expr_stmt pos:start="73:25" pos:end="73:50"><expr pos:start="73:25" pos:end="73:49"><name pos:start="73:25" pos:end="73:27">run</name> <operator pos:start="73:29" pos:end="73:29">=</operator> <call pos:start="73:31" pos:end="73:45"><name pos:start="73:31" pos:end="73:38">get_bits</name><argument_list pos:start="73:39" pos:end="73:45">(<argument pos:start="73:40" pos:end="73:41"><expr pos:start="73:40" pos:end="73:41"><name pos:start="73:40" pos:end="73:41">gb</name></expr></argument>, <argument pos:start="73:44" pos:end="73:44"><expr pos:start="73:44" pos:end="73:44"><literal type="number" pos:start="73:44" pos:end="73:44">2</literal></expr></argument>)</argument_list></call> <operator pos:start="73:47" pos:end="73:47">+</operator> <literal type="number" pos:start="73:49" pos:end="73:49">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="75:19" pos:end="77:29">else<block type="pseudo" pos:start="77:22" pos:end="77:29"><block_content pos:start="77:22" pos:end="77:29">

                     <expr_stmt pos:start="77:22" pos:end="77:29"><expr pos:start="77:22" pos:end="77:28"><name pos:start="77:22" pos:end="77:24">run</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <literal type="number" pos:start="77:28" pos:end="77:28">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="89:9">else <block pos:start="81:16" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:38">

            <comment type="block" pos:start="83:13" pos:end="83:29">/* normal code */</comment>

            <expr_stmt pos:start="85:13" pos:end="85:34"><expr pos:start="85:13" pos:end="85:33"><name pos:start="85:13" pos:end="85:15">run</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <name pos:start="85:19" pos:end="85:33"><name pos:start="85:19" pos:end="85:27">run_table</name><index pos:start="85:28" pos:end="85:33">[<expr pos:start="85:29" pos:end="85:32"><name pos:start="85:29" pos:end="85:32">code</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:38"><expr pos:start="87:13" pos:end="87:37"><name pos:start="87:13" pos:end="87:17">level</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:37"><name pos:start="87:21" pos:end="87:31">level_table</name><index pos:start="87:32" pos:end="87:37">[<expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">code</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:29"><expr pos:start="91:9" pos:end="91:28"><name pos:start="91:9" pos:end="91:12">sign</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:28"><name pos:start="91:16" pos:end="91:24">get_bits1</name><argument_list pos:start="91:25" pos:end="91:28">(<argument pos:start="91:26" pos:end="91:27"><expr pos:start="91:26" pos:end="91:27"><name pos:start="91:26" pos:end="91:27">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="93:9" pos:end="95:28"><if pos:start="93:9" pos:end="95:28">if <condition pos:start="93:12" pos:end="93:18">(<expr pos:start="93:13" pos:end="93:17"><operator pos:start="93:13" pos:end="93:13">!</operator><name pos:start="93:14" pos:end="93:17">sign</name></expr>)</condition><block type="pseudo" pos:start="95:14" pos:end="95:28"><block_content pos:start="95:14" pos:end="95:28">

             <expr_stmt pos:start="95:14" pos:end="95:28"><expr pos:start="95:14" pos:end="95:27"><name pos:start="95:14" pos:end="95:18">level</name> <operator pos:start="95:20" pos:end="95:20">=</operator> <operator pos:start="95:22" pos:end="95:22">-</operator><name pos:start="95:23" pos:end="95:27">level</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:19"><expr pos:start="97:9" pos:end="97:18"><name pos:start="97:9" pos:end="97:11">ptr</name> <operator pos:start="97:13" pos:end="97:14">+=</operator> <name pos:start="97:16" pos:end="97:18">run</name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="107:9"><if pos:start="99:9" pos:end="107:9">if <condition pos:start="99:12" pos:end="99:24">(<expr pos:start="99:13" pos:end="99:23"><name pos:start="99:13" pos:end="99:15">ptr</name> <operator pos:start="99:17" pos:end="99:18">&gt;=</operator> <name pos:start="99:20" pos:end="99:23">eptr</name></expr>)</condition>

        <block pos:start="101:9" pos:end="107:9">{<block_content pos:start="103:13" pos:end="105:18">

            <expr_stmt pos:start="103:13" pos:end="103:79"><expr pos:start="103:13" pos:end="103:78"><call pos:start="103:13" pos:end="103:78"><name pos:start="103:13" pos:end="103:18">av_log</name><argument_list pos:start="103:19" pos:end="103:78">(<argument pos:start="103:20" pos:end="103:23"><expr pos:start="103:20" pos:end="103:23"><name pos:start="103:20" pos:end="103:23">NULL</name></expr></argument>, <argument pos:start="103:26" pos:end="103:37"><expr pos:start="103:26" pos:end="103:37"><name pos:start="103:26" pos:end="103:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:40" pos:end="103:77"><expr pos:start="103:40" pos:end="103:77"><literal type="string" pos:start="103:40" pos:end="103:77">"overflow in spectral RLE, ignoring\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="105:13" pos:end="105:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:23"><expr pos:start="109:9" pos:end="109:22"><operator pos:start="109:9" pos:end="109:9">*</operator><name pos:start="109:10" pos:end="109:12">ptr</name><operator pos:start="109:13" pos:end="109:14">++</operator> <operator pos:start="109:16" pos:end="109:16">=</operator> <name pos:start="109:18" pos:end="109:22">level</name></expr>;</expr_stmt>

        <comment type="block" pos:start="111:9" pos:end="111:38">/* NOTE: EOB can be omitted */</comment>

        <if_stmt pos:start="113:9" pos:end="115:18"><if pos:start="113:9" pos:end="115:18">if <condition pos:start="113:12" pos:end="113:24">(<expr pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:15">ptr</name> <operator pos:start="113:17" pos:end="113:18">&gt;=</operator> <name pos:start="113:20" pos:end="113:23">eptr</name></expr>)</condition><block type="pseudo" pos:start="115:13" pos:end="115:18"><block_content pos:start="115:13" pos:end="115:18">

            <break pos:start="115:13" pos:end="115:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="119:5" pos:end="119:13">return <expr pos:start="119:12" pos:end="119:12"><literal type="number" pos:start="119:12" pos:end="119:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
