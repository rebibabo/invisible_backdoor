<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4543.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:26">ff_amf_get_field_value</name><parameter_list pos:start="1:27" pos:end="3:75">(<parameter pos:start="1:28" pos:end="1:46"><decl pos:start="1:28" pos:end="1:46"><type pos:start="1:28" pos:end="1:46"><specifier pos:start="1:28" pos:end="1:32">const</specifier> <name pos:start="1:34" pos:end="1:40">uint8_t</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">data</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:71"><decl pos:start="1:49" pos:end="1:71"><type pos:start="1:49" pos:end="1:71"><specifier pos:start="1:49" pos:end="1:53">const</specifier> <name pos:start="1:55" pos:end="1:61">uint8_t</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:71">data_end</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:46"><decl pos:start="3:28" pos:end="3:46"><type pos:start="3:28" pos:end="3:46"><specifier pos:start="3:28" pos:end="3:32">const</specifier> <name pos:start="3:34" pos:end="3:40">uint8_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">name</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:60"><decl pos:start="3:49" pos:end="3:60"><type pos:start="3:49" pos:end="3:60"><name pos:start="3:49" pos:end="3:55">uint8_t</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:60">dst</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:74"><decl pos:start="3:63" pos:end="3:74"><type pos:start="3:63" pos:end="3:74"><name pos:start="3:63" pos:end="3:65">int</name></type> <name pos:start="3:67" pos:end="3:74">dst_size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:14">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">namelen</name> <init pos:start="7:17" pos:end="7:30">= <expr pos:start="7:19" pos:end="7:30"><call pos:start="7:19" pos:end="7:30"><name pos:start="7:19" pos:end="7:24">strlen</name><argument_list pos:start="7:25" pos:end="7:30">(<argument pos:start="7:26" pos:end="7:29"><expr pos:start="7:26" pos:end="7:29"><name pos:start="7:26" pos:end="7:29">name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>;</decl_stmt>



    <while pos:start="13:5" pos:end="23:5">while <condition pos:start="13:11" pos:end="13:60">(<expr pos:start="13:12" pos:end="13:59"><operator pos:start="13:12" pos:end="13:12">*</operator><name pos:start="13:13" pos:end="13:16">data</name> <operator pos:start="13:18" pos:end="13:19">!=</operator> <name pos:start="13:21" pos:end="13:40">AMF_DATA_TYPE_OBJECT</name> <operator pos:start="13:42" pos:end="13:43">&amp;&amp;</operator> <name pos:start="13:45" pos:end="13:48">data</name> <operator pos:start="13:50" pos:end="13:50">&lt;</operator> <name pos:start="13:52" pos:end="13:59">data_end</name></expr>)</condition> <block pos:start="13:62" pos:end="23:5">{<block_content pos:start="15:9" pos:end="21:20">

        <expr_stmt pos:start="15:9" pos:end="15:46"><expr pos:start="15:9" pos:end="15:45"><name pos:start="15:9" pos:end="15:11">len</name> <operator pos:start="15:13" pos:end="15:13">=</operator> <call pos:start="15:15" pos:end="15:45"><name pos:start="15:15" pos:end="15:29">ff_amf_tag_size</name><argument_list pos:start="15:30" pos:end="15:45">(<argument pos:start="15:31" pos:end="15:34"><expr pos:start="15:31" pos:end="15:34"><name pos:start="15:31" pos:end="15:34">data</name></expr></argument>, <argument pos:start="15:37" pos:end="15:44"><expr pos:start="15:37" pos:end="15:44"><name pos:start="15:37" pos:end="15:44">data_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="19:34"><if pos:start="17:9" pos:end="19:34">if <condition pos:start="17:12" pos:end="17:20">(<expr pos:start="17:13" pos:end="17:19"><name pos:start="17:13" pos:end="17:15">len</name> <operator pos:start="17:17" pos:end="17:17">&lt;</operator> <literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:34"><block_content pos:start="19:13" pos:end="19:34">

            <expr_stmt pos:start="19:13" pos:end="19:34"><expr pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:15">len</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:26">data_end</name> <operator pos:start="19:28" pos:end="19:28">-</operator> <name pos:start="19:30" pos:end="19:33">data</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:20"><expr pos:start="21:9" pos:end="21:19"><name pos:start="21:9" pos:end="21:12">data</name> <operator pos:start="21:14" pos:end="21:15">+=</operator> <name pos:start="21:17" pos:end="21:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="25:5" pos:end="27:18"><if pos:start="25:5" pos:end="27:18">if <condition pos:start="25:8" pos:end="25:28">(<expr pos:start="25:9" pos:end="25:27"><name pos:start="25:9" pos:end="25:16">data_end</name> <operator pos:start="25:18" pos:end="25:18">-</operator> <name pos:start="25:20" pos:end="25:23">data</name> <operator pos:start="25:25" pos:end="25:25">&lt;</operator> <literal type="number" pos:start="25:27" pos:end="25:27">3</literal></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:18"><block_content pos:start="27:9" pos:end="27:18">

        <return pos:start="27:9" pos:end="27:18">return <expr pos:start="27:16" pos:end="27:17"><operator pos:start="27:16" pos:end="27:16">-</operator><literal type="number" pos:start="27:17" pos:end="27:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:11"><expr pos:start="29:5" pos:end="29:10"><name pos:start="29:5" pos:end="29:8">data</name><operator pos:start="29:9" pos:end="29:10">++</operator></expr>;</expr_stmt>

    <for pos:start="31:5" pos:end="87:5">for <control pos:start="31:9" pos:end="31:12">(<init pos:start="31:10" pos:end="31:10">;</init><condition pos:start="31:11" pos:end="31:11">;</condition><incr/>)</control> <block pos:start="31:14" pos:end="87:5">{<block_content pos:start="33:9" pos:end="85:20">

        <decl_stmt pos:start="33:9" pos:end="33:46"><decl pos:start="33:9" pos:end="33:45"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:16">size</name> <init pos:start="33:18" pos:end="33:45">= <expr pos:start="33:20" pos:end="33:45"><call pos:start="33:20" pos:end="33:45"><name pos:start="33:20" pos:end="33:38">bytestream_get_be16</name><argument_list pos:start="33:39" pos:end="33:45">(<argument pos:start="33:40" pos:end="33:44"><expr pos:start="33:40" pos:end="33:44"><operator pos:start="33:40" pos:end="33:40">&amp;</operator><name pos:start="33:41" pos:end="33:44">data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="37:18"><if pos:start="35:9" pos:end="37:18">if <condition pos:start="35:12" pos:end="35:18">(<expr pos:start="35:13" pos:end="35:17"><operator pos:start="35:13" pos:end="35:13">!</operator><name pos:start="35:14" pos:end="35:17">size</name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:18"><block_content pos:start="37:13" pos:end="37:18">

            <break pos:start="37:13" pos:end="37:18">break;</break></block_content></block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="41:22"><if pos:start="39:9" pos:end="41:22">if <condition pos:start="39:12" pos:end="39:48">(<expr pos:start="39:13" pos:end="39:47"><name pos:start="39:13" pos:end="39:16">size</name> <operator pos:start="39:18" pos:end="39:18">&lt;</operator> <literal type="number" pos:start="39:20" pos:end="39:20">0</literal> <operator pos:start="39:22" pos:end="39:23">||</operator> <name pos:start="39:25" pos:end="39:28">size</name> <operator pos:start="39:30" pos:end="39:31">&gt;=</operator> <name pos:start="39:33" pos:end="39:40">data_end</name> <operator pos:start="39:42" pos:end="39:42">-</operator> <name pos:start="39:44" pos:end="39:47">data</name></expr>)</condition><block type="pseudo" pos:start="41:13" pos:end="41:22"><block_content pos:start="41:13" pos:end="41:22">

            <return pos:start="41:13" pos:end="41:22">return <expr pos:start="41:20" pos:end="41:21"><operator pos:start="41:20" pos:end="41:20">-</operator><literal type="number" pos:start="41:21" pos:end="41:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:21"><expr pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:12">data</name> <operator pos:start="43:14" pos:end="43:15">+=</operator> <name pos:start="43:17" pos:end="43:20">size</name></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="77:9"><if pos:start="45:9" pos:end="77:9">if <condition pos:start="45:12" pos:end="45:65">(<expr pos:start="45:13" pos:end="45:64"><name pos:start="45:13" pos:end="45:16">size</name> <operator pos:start="45:18" pos:end="45:19">==</operator> <name pos:start="45:21" pos:end="45:27">namelen</name> <operator pos:start="45:29" pos:end="45:30">&amp;&amp;</operator> <operator pos:start="45:32" pos:end="45:32">!</operator><call pos:start="45:33" pos:end="45:64"><name pos:start="45:33" pos:end="45:38">memcmp</name><argument_list pos:start="45:39" pos:end="45:64">(<argument pos:start="45:40" pos:end="45:48"><expr pos:start="45:40" pos:end="45:48"><name pos:start="45:40" pos:end="45:43">data</name><operator pos:start="45:44" pos:end="45:44">-</operator><name pos:start="45:45" pos:end="45:48">size</name></expr></argument>, <argument pos:start="45:51" pos:end="45:54"><expr pos:start="45:51" pos:end="45:54"><name pos:start="45:51" pos:end="45:54">name</name></expr></argument>, <argument pos:start="45:57" pos:end="45:63"><expr pos:start="45:57" pos:end="45:63"><name pos:start="45:57" pos:end="45:63">namelen</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:67" pos:end="77:9">{<block_content pos:start="47:13" pos:end="75:21">

            <switch pos:start="47:13" pos:end="73:13">switch <condition pos:start="47:20" pos:end="47:28">(<expr pos:start="47:21" pos:end="47:27"><operator pos:start="47:21" pos:end="47:21">*</operator><name pos:start="47:22" pos:end="47:25">data</name><operator pos:start="47:26" pos:end="47:27">++</operator></expr>)</condition> <block pos:start="47:30" pos:end="73:13">{<block_content pos:start="49:13" pos:end="71:26">

            <case pos:start="49:13" pos:end="49:38">case <expr pos:start="49:18" pos:end="49:37"><name pos:start="49:18" pos:end="49:37">AMF_DATA_TYPE_NUMBER</name></expr>:</case>

                <expr_stmt pos:start="51:17" pos:end="51:76"><expr pos:start="51:17" pos:end="51:75"><call pos:start="51:17" pos:end="51:75"><name pos:start="51:17" pos:end="51:24">snprintf</name><argument_list pos:start="51:25" pos:end="51:75">(<argument pos:start="51:26" pos:end="51:28"><expr pos:start="51:26" pos:end="51:28"><name pos:start="51:26" pos:end="51:28">dst</name></expr></argument>, <argument pos:start="51:31" pos:end="51:38"><expr pos:start="51:31" pos:end="51:38"><name pos:start="51:31" pos:end="51:38">dst_size</name></expr></argument>, <argument pos:start="51:41" pos:end="51:44"><expr pos:start="51:41" pos:end="51:44"><literal type="string" pos:start="51:41" pos:end="51:44">"%g"</literal></expr></argument>, <argument pos:start="51:47" pos:end="51:74"><expr pos:start="51:47" pos:end="51:74"><call pos:start="51:47" pos:end="51:74"><name pos:start="51:47" pos:end="51:59">av_int2double</name><argument_list pos:start="51:60" pos:end="51:74">(<argument pos:start="51:61" pos:end="51:73"><expr pos:start="51:61" pos:end="51:73"><call pos:start="51:61" pos:end="51:73"><name pos:start="51:61" pos:end="51:67">AV_RB64</name><argument_list pos:start="51:68" pos:end="51:73">(<argument pos:start="51:69" pos:end="51:72"><expr pos:start="51:69" pos:end="51:72"><name pos:start="51:69" pos:end="51:72">data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="53:17" pos:end="53:22">break;</break>

            <case pos:start="55:13" pos:end="55:36">case <expr pos:start="55:18" pos:end="55:35"><name pos:start="55:18" pos:end="55:35">AMF_DATA_TYPE_BOOL</name></expr>:</case>

                <expr_stmt pos:start="57:17" pos:end="57:72"><expr pos:start="57:17" pos:end="57:71"><call pos:start="57:17" pos:end="57:71"><name pos:start="57:17" pos:end="57:24">snprintf</name><argument_list pos:start="57:25" pos:end="57:71">(<argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><name pos:start="57:26" pos:end="57:28">dst</name></expr></argument>, <argument pos:start="57:31" pos:end="57:38"><expr pos:start="57:31" pos:end="57:38"><name pos:start="57:31" pos:end="57:38">dst_size</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><literal type="string" pos:start="57:41" pos:end="57:44">"%s"</literal></expr></argument>, <argument pos:start="57:47" pos:end="57:70"><expr pos:start="57:47" pos:end="57:70"><ternary pos:start="57:47" pos:end="57:70"><condition pos:start="57:47" pos:end="57:53"><expr pos:start="57:47" pos:end="57:51"><operator pos:start="57:47" pos:end="57:47">*</operator><name pos:start="57:48" pos:end="57:51">data</name></expr> ?</condition><then pos:start="57:55" pos:end="57:60"> <expr pos:start="57:55" pos:end="57:60"><literal type="string" pos:start="57:55" pos:end="57:60">"true"</literal></expr> </then><else pos:start="57:62" pos:end="57:70">: <expr pos:start="57:64" pos:end="57:70"><literal type="string" pos:start="57:64" pos:end="57:70">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="59:17" pos:end="59:22">break;</break>

            <case pos:start="61:13" pos:end="61:38">case <expr pos:start="61:18" pos:end="61:37"><name pos:start="61:18" pos:end="61:37">AMF_DATA_TYPE_STRING</name></expr>:</case>

                <expr_stmt pos:start="63:17" pos:end="63:49"><expr pos:start="63:17" pos:end="63:48"><name pos:start="63:17" pos:end="63:19">len</name> <operator pos:start="63:21" pos:end="63:21">=</operator> <call pos:start="63:23" pos:end="63:48"><name pos:start="63:23" pos:end="63:41">bytestream_get_be16</name><argument_list pos:start="63:42" pos:end="63:48">(<argument pos:start="63:43" pos:end="63:47"><expr pos:start="63:43" pos:end="63:47"><operator pos:start="63:43" pos:end="63:43">&amp;</operator><name pos:start="63:44" pos:end="63:47">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="65:17" pos:end="65:62"><expr pos:start="65:17" pos:end="65:61"><call pos:start="65:17" pos:end="65:61"><name pos:start="65:17" pos:end="65:26">av_strlcpy</name><argument_list pos:start="65:27" pos:end="65:61">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">dst</name></expr></argument>, <argument pos:start="65:33" pos:end="65:36"><expr pos:start="65:33" pos:end="65:36"><name pos:start="65:33" pos:end="65:36">data</name></expr></argument>, <argument pos:start="65:39" pos:end="65:60"><expr pos:start="65:39" pos:end="65:60"><call pos:start="65:39" pos:end="65:60"><name pos:start="65:39" pos:end="65:43">FFMIN</name><argument_list pos:start="65:44" pos:end="65:60">(<argument pos:start="65:45" pos:end="65:49"><expr pos:start="65:45" pos:end="65:49"><name pos:start="65:45" pos:end="65:47">len</name><operator pos:start="65:48" pos:end="65:48">+</operator><literal type="number" pos:start="65:49" pos:end="65:49">1</literal></expr></argument>, <argument pos:start="65:52" pos:end="65:59"><expr pos:start="65:52" pos:end="65:59"><name pos:start="65:52" pos:end="65:59">dst_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="67:17" pos:end="67:22">break;</break>

            <default pos:start="69:13" pos:end="69:20">default:</default>

                <return pos:start="71:17" pos:end="71:26">return <expr pos:start="71:24" pos:end="71:25"><operator pos:start="71:24" pos:end="71:24">-</operator><literal type="number" pos:start="71:25" pos:end="71:25">1</literal></expr>;</return>

            </block_content>}</block></switch>

            <return pos:start="75:13" pos:end="75:21">return <expr pos:start="75:20" pos:end="75:20"><literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:11">len</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:45"><name pos:start="79:15" pos:end="79:29">ff_amf_tag_size</name><argument_list pos:start="79:30" pos:end="79:45">(<argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">data</name></expr></argument>, <argument pos:start="79:37" pos:end="79:44"><expr pos:start="79:37" pos:end="79:44"><name pos:start="79:37" pos:end="79:44">data_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="83:22"><if pos:start="81:9" pos:end="83:22">if <condition pos:start="81:12" pos:end="81:46">(<expr pos:start="81:13" pos:end="81:45"><name pos:start="81:13" pos:end="81:15">len</name> <operator pos:start="81:17" pos:end="81:17">&lt;</operator> <literal type="number" pos:start="81:19" pos:end="81:19">0</literal> <operator pos:start="81:21" pos:end="81:22">||</operator> <name pos:start="81:24" pos:end="81:26">len</name> <operator pos:start="81:28" pos:end="81:29">&gt;=</operator> <name pos:start="81:31" pos:end="81:38">data_end</name> <operator pos:start="81:40" pos:end="81:40">-</operator> <name pos:start="81:42" pos:end="81:45">data</name></expr>)</condition><block type="pseudo" pos:start="83:13" pos:end="83:22"><block_content pos:start="83:13" pos:end="83:22">

            <return pos:start="83:13" pos:end="83:22">return <expr pos:start="83:20" pos:end="83:21"><operator pos:start="83:20" pos:end="83:20">-</operator><literal type="number" pos:start="83:21" pos:end="83:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:20"><expr pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:12">data</name> <operator pos:start="85:14" pos:end="85:15">+=</operator> <name pos:start="85:17" pos:end="85:19">len</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="89:5" pos:end="89:14">return <expr pos:start="89:12" pos:end="89:13"><operator pos:start="89:12" pos:end="89:12">-</operator><literal type="number" pos:start="89:13" pos:end="89:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
