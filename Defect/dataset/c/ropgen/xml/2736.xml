<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2736.c" pos:tabs="8"><function pos:start="1:1" pos:end="145:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parallels_open</name><parameter_list pos:start="1:26" pos:end="3:39">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:46"><name pos:start="1:27" pos:end="1:42">BlockDriverState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:46">bs</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:62"><decl pos:start="1:49" pos:end="1:62"><type pos:start="1:49" pos:end="1:62"><name pos:start="1:49" pos:end="1:53">QDict</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:62">options</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:73"><decl pos:start="1:65" pos:end="1:73"><type pos:start="1:65" pos:end="1:73"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:73">flags</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:38"><decl pos:start="3:27" pos:end="3:38"><type pos:start="3:27" pos:end="3:38"><name pos:start="3:27" pos:end="3:31">Error</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier><modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="145:1">{<block_content pos:start="7:5" pos:end="143:15">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:24"><name pos:start="7:5" pos:end="7:22">BDRVParallelsState</name> <modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:25">s</name> <init pos:start="7:27" pos:end="7:38">= <expr pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:38"><name pos:start="7:29" pos:end="7:30">bs</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:38">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:19">ParallelsHeader</name></type> <name pos:start="11:21" pos:end="11:22">ph</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:51"><expr pos:start="17:5" pos:end="17:50"><name pos:start="17:5" pos:end="17:7">ret</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <call pos:start="17:11" pos:end="17:50"><name pos:start="17:11" pos:end="17:20">bdrv_pread</name><argument_list pos:start="17:21" pos:end="17:50">(<argument pos:start="17:22" pos:end="17:29"><expr pos:start="17:22" pos:end="17:29"><name pos:start="17:22" pos:end="17:29"><name pos:start="17:22" pos:end="17:23">bs</name><operator pos:start="17:24" pos:end="17:25">-&gt;</operator><name pos:start="17:26" pos:end="17:29">file</name></name></expr></argument>, <argument pos:start="17:32" pos:end="17:32"><expr pos:start="17:32" pos:end="17:32"><literal type="number" pos:start="17:32" pos:end="17:32">0</literal></expr></argument>, <argument pos:start="17:35" pos:end="17:37"><expr pos:start="17:35" pos:end="17:37"><operator pos:start="17:35" pos:end="17:35">&amp;</operator><name pos:start="17:36" pos:end="17:37">ph</name></expr></argument>, <argument pos:start="17:40" pos:end="17:49"><expr pos:start="17:40" pos:end="17:49"><sizeof pos:start="17:40" pos:end="17:49">sizeof<argument_list pos:start="17:46" pos:end="17:49">(<argument pos:start="17:47" pos:end="17:48"><expr pos:start="17:47" pos:end="17:48"><name pos:start="17:47" pos:end="17:48">ph</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:16">(<expr pos:start="19:9" pos:end="19:15"><name pos:start="19:9" pos:end="19:11">ret</name> <operator pos:start="19:13" pos:end="19:13">&lt;</operator> <literal type="number" pos:start="19:15" pos:end="19:15">0</literal></expr>)</condition> <block pos:start="19:18" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <goto pos:start="21:9" pos:end="21:18">goto <name pos:start="21:14" pos:end="21:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:6">bs</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:21">total_sectors</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:50"><name pos:start="27:25" pos:end="27:35">le64_to_cpu</name><argument_list pos:start="27:36" pos:end="27:50">(<argument pos:start="27:37" pos:end="27:49"><expr pos:start="27:37" pos:end="27:49"><name pos:start="27:37" pos:end="27:49"><name pos:start="27:37" pos:end="27:38">ph</name><operator pos:start="27:39" pos:end="27:39">.</operator><name pos:start="27:40" pos:end="27:49">nb_sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:50">(<expr pos:start="31:9" pos:end="31:49"><call pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:19">le32_to_cpu</name><argument_list pos:start="31:20" pos:end="31:31">(<argument pos:start="31:21" pos:end="31:30"><expr pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:30"><name pos:start="31:21" pos:end="31:22">ph</name><operator pos:start="31:23" pos:end="31:23">.</operator><name pos:start="31:24" pos:end="31:30">version</name></name></expr></argument>)</argument_list></call> <operator pos:start="31:33" pos:end="31:34">!=</operator> <name pos:start="31:36" pos:end="31:49">HEADER_VERSION</name></expr>)</condition> <block pos:start="31:52" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:25">

        <goto pos:start="33:9" pos:end="33:25">goto <name pos:start="33:14" pos:end="33:24">fail_format</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:44">(<expr pos:start="37:9" pos:end="37:43"><operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:43"><name pos:start="37:10" pos:end="37:15">memcmp</name><argument_list pos:start="37:16" pos:end="37:43">(<argument pos:start="37:17" pos:end="37:24"><expr pos:start="37:17" pos:end="37:24"><name pos:start="37:17" pos:end="37:24"><name pos:start="37:17" pos:end="37:18">ph</name><operator pos:start="37:19" pos:end="37:19">.</operator><name pos:start="37:20" pos:end="37:24">magic</name></name></expr></argument>, <argument pos:start="37:27" pos:end="37:38"><expr pos:start="37:27" pos:end="37:38"><name pos:start="37:27" pos:end="37:38">HEADER_MAGIC</name></expr></argument>, <argument pos:start="37:41" pos:end="37:42"><expr pos:start="37:41" pos:end="37:42"><literal type="number" pos:start="37:41" pos:end="37:42">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:46" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:59">

        <expr_stmt pos:start="39:9" pos:end="39:30"><expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:25">off_multiplier</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <literal type="number" pos:start="39:29" pos:end="39:29">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:59"><expr pos:start="41:9" pos:end="41:58"><name pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:10">bs</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:25">total_sectors</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <literal type="number" pos:start="41:29" pos:end="41:38">0xffffffff</literal> <operator pos:start="41:40" pos:end="41:40">&amp;</operator> <name pos:start="41:42" pos:end="41:58"><name pos:start="41:42" pos:end="41:43">bs</name><operator pos:start="41:44" pos:end="41:45">-&gt;</operator><name pos:start="41:46" pos:end="41:58">total_sectors</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="47:5">else if <condition pos:start="43:15" pos:end="43:52">(<expr pos:start="43:16" pos:end="43:51"><operator pos:start="43:16" pos:end="43:16">!</operator><call pos:start="43:17" pos:end="43:51"><name pos:start="43:17" pos:end="43:22">memcmp</name><argument_list pos:start="43:23" pos:end="43:51">(<argument pos:start="43:24" pos:end="43:31"><expr pos:start="43:24" pos:end="43:31"><name pos:start="43:24" pos:end="43:31"><name pos:start="43:24" pos:end="43:25">ph</name><operator pos:start="43:26" pos:end="43:26">.</operator><name pos:start="43:27" pos:end="43:31">magic</name></name></expr></argument>, <argument pos:start="43:34" pos:end="43:46"><expr pos:start="43:34" pos:end="43:46"><name pos:start="43:34" pos:end="43:46">HEADER_MAGIC2</name></expr></argument>, <argument pos:start="43:49" pos:end="43:50"><expr pos:start="43:49" pos:end="43:50"><literal type="number" pos:start="43:49" pos:end="43:50">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:54" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:51">

        <expr_stmt pos:start="45:9" pos:end="45:51"><expr pos:start="45:9" pos:end="45:50"><name pos:start="45:9" pos:end="45:25"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:25">off_multiplier</name></name> <operator pos:start="45:27" pos:end="45:27">=</operator> <call pos:start="45:29" pos:end="45:50"><name pos:start="45:29" pos:end="45:39">le32_to_cpu</name><argument_list pos:start="45:40" pos:end="45:50">(<argument pos:start="45:41" pos:end="45:49"><expr pos:start="45:41" pos:end="45:49"><name pos:start="45:41" pos:end="45:49"><name pos:start="45:41" pos:end="45:42">ph</name><operator pos:start="45:43" pos:end="45:43">.</operator><name pos:start="45:44" pos:end="45:49">tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:25">

        <goto pos:start="49:9" pos:end="49:25">goto <name pos:start="49:14" pos:end="49:24">fail_format</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:39"><expr pos:start="55:5" pos:end="55:38"><name pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:5">s</name><operator pos:start="55:6" pos:end="55:7">-&gt;</operator><name pos:start="55:8" pos:end="55:13">tracks</name></name> <operator pos:start="55:15" pos:end="55:15">=</operator> <call pos:start="55:17" pos:end="55:38"><name pos:start="55:17" pos:end="55:27">le32_to_cpu</name><argument_list pos:start="55:28" pos:end="55:38">(<argument pos:start="55:29" pos:end="55:37"><expr pos:start="55:29" pos:end="55:37"><name pos:start="55:29" pos:end="55:37"><name pos:start="55:29" pos:end="55:30">ph</name><operator pos:start="55:31" pos:end="55:31">.</operator><name pos:start="55:32" pos:end="55:37">tracks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:23">(<expr pos:start="57:9" pos:end="57:22"><name pos:start="57:9" pos:end="57:17"><name pos:start="57:9" pos:end="57:9">s</name><operator pos:start="57:10" pos:end="57:11">-&gt;</operator><name pos:start="57:12" pos:end="57:17">tracks</name></name> <operator pos:start="57:19" pos:end="57:20">==</operator> <literal type="number" pos:start="57:22" pos:end="57:22">0</literal></expr>)</condition> <block pos:start="57:25" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:18">

        <expr_stmt pos:start="59:9" pos:end="59:66"><expr pos:start="59:9" pos:end="59:65"><call pos:start="59:9" pos:end="59:65"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:65">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:64"><expr pos:start="59:26" pos:end="59:64"><literal type="string" pos:start="59:26" pos:end="59:64">"Invalid image: Zero sectors per track"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <operator pos:start="61:15" pos:end="61:15">-</operator><name pos:start="61:16" pos:end="61:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:34">(<expr pos:start="67:9" pos:end="67:33"><name pos:start="67:9" pos:end="67:17"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">tracks</name></name> <operator pos:start="67:19" pos:end="67:19">&gt;</operator> <name pos:start="67:21" pos:end="67:29">INT32_MAX</name><operator pos:start="67:30" pos:end="67:30">/</operator><literal type="number" pos:start="67:31" pos:end="67:33">513</literal></expr>)</condition> <block pos:start="67:36" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:18">

        <expr_stmt pos:start="69:9" pos:end="69:59"><expr pos:start="69:9" pos:end="69:58"><call pos:start="69:9" pos:end="69:58"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="69:58">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:57"><expr pos:start="69:26" pos:end="69:57"><literal type="string" pos:start="69:26" pos:end="69:57">"Invalid image: Too big cluster"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:21"><expr pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:54"><expr pos:start="79:5" pos:end="79:53"><name pos:start="79:5" pos:end="79:19"><name pos:start="79:5" pos:end="79:5">s</name><operator pos:start="79:6" pos:end="79:7">-&gt;</operator><name pos:start="79:8" pos:end="79:19">catalog_size</name></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="79:53"><name pos:start="79:23" pos:end="79:33">le32_to_cpu</name><argument_list pos:start="79:34" pos:end="79:53">(<argument pos:start="79:35" pos:end="79:52"><expr pos:start="79:35" pos:end="79:52"><name pos:start="79:35" pos:end="79:52"><name pos:start="79:35" pos:end="79:36">ph</name><operator pos:start="79:37" pos:end="79:37">.</operator><name pos:start="79:38" pos:end="79:52">catalog_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:53">(<expr pos:start="81:9" pos:end="81:52"><name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:23">catalog_size</name></name> <operator pos:start="81:25" pos:end="81:25">&gt;</operator> <name pos:start="81:27" pos:end="81:33">INT_MAX</name> <operator pos:start="81:35" pos:end="81:35">/</operator> <sizeof pos:start="81:37" pos:end="81:52">sizeof<argument_list pos:start="81:43" pos:end="81:52">(<argument pos:start="81:44" pos:end="81:51"><expr pos:start="81:44" pos:end="81:51"><name pos:start="81:44" pos:end="81:51">uint32_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="81:55" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:18">

        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><call pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:18">error_setg</name><argument_list pos:start="83:19" pos:end="83:45">(<argument pos:start="83:20" pos:end="83:23"><expr pos:start="83:20" pos:end="83:23"><name pos:start="83:20" pos:end="83:23">errp</name></expr></argument>, <argument pos:start="83:26" pos:end="83:44"><expr pos:start="83:26" pos:end="83:44"><literal type="string" pos:start="83:26" pos:end="83:44">"Catalog too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:21"><expr pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:61"><expr pos:start="91:5" pos:end="91:60"><name pos:start="91:5" pos:end="91:21"><name pos:start="91:5" pos:end="91:5">s</name><operator pos:start="91:6" pos:end="91:7">-&gt;</operator><name pos:start="91:8" pos:end="91:21">catalog_bitmap</name></name> <operator pos:start="91:23" pos:end="91:23">=</operator> <call pos:start="91:25" pos:end="91:60"><name pos:start="91:25" pos:end="91:33">g_try_new</name><argument_list pos:start="91:34" pos:end="91:60">(<argument pos:start="91:35" pos:end="91:42"><expr pos:start="91:35" pos:end="91:42"><name pos:start="91:35" pos:end="91:42">uint32_t</name></expr></argument>, <argument pos:start="91:45" pos:end="91:59"><expr pos:start="91:45" pos:end="91:59"><name pos:start="91:45" pos:end="91:59"><name pos:start="91:45" pos:end="91:45">s</name><operator pos:start="91:46" pos:end="91:47">-&gt;</operator><name pos:start="91:48" pos:end="91:59">catalog_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="99:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:53">(<expr pos:start="93:9" pos:end="93:52"><name pos:start="93:9" pos:end="93:23"><name pos:start="93:9" pos:end="93:9">s</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:23">catalog_size</name></name> <operator pos:start="93:25" pos:end="93:26">&amp;&amp;</operator> <name pos:start="93:28" pos:end="93:44"><name pos:start="93:28" pos:end="93:28">s</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:44">catalog_bitmap</name></name> <operator pos:start="93:46" pos:end="93:47">==</operator> <name pos:start="93:49" pos:end="93:52">NULL</name></expr>)</condition> <block pos:start="93:55" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:18">

        <expr_stmt pos:start="95:9" pos:end="95:22"><expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <operator pos:start="95:15" pos:end="95:15">-</operator><name pos:start="95:16" pos:end="95:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:18">goto <name pos:start="97:14" pos:end="97:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="105:76"><expr pos:start="103:5" pos:end="105:75"><name pos:start="103:5" pos:end="103:7">ret</name> <operator pos:start="103:9" pos:end="103:9">=</operator> <call pos:start="103:11" pos:end="105:75"><name pos:start="103:11" pos:end="103:20">bdrv_pread</name><argument_list pos:start="103:21" pos:end="105:75">(<argument pos:start="103:22" pos:end="103:29"><expr pos:start="103:22" pos:end="103:29"><name pos:start="103:22" pos:end="103:29"><name pos:start="103:22" pos:end="103:23">bs</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:29">file</name></name></expr></argument>, <argument pos:start="103:32" pos:end="103:54"><expr pos:start="103:32" pos:end="103:54"><sizeof pos:start="103:32" pos:end="103:54">sizeof<argument_list pos:start="103:38" pos:end="103:54">(<argument pos:start="103:39" pos:end="103:53"><expr pos:start="103:39" pos:end="103:53"><name pos:start="103:39" pos:end="103:53">ParallelsHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>,

                     <argument pos:start="105:22" pos:end="105:38"><expr pos:start="105:22" pos:end="105:38"><name pos:start="105:22" pos:end="105:38"><name pos:start="105:22" pos:end="105:22">s</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:38">catalog_bitmap</name></name></expr></argument>, <argument pos:start="105:41" pos:end="105:74"><expr pos:start="105:41" pos:end="105:74"><name pos:start="105:41" pos:end="105:55"><name pos:start="105:41" pos:end="105:41">s</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:55">catalog_size</name></name> <operator pos:start="105:57" pos:end="105:57">*</operator> <sizeof pos:start="105:59" pos:end="105:74">sizeof<argument_list pos:start="105:65" pos:end="105:74">(<argument pos:start="105:66" pos:end="105:73"><expr pos:start="105:66" pos:end="105:73"><name pos:start="105:66" pos:end="105:73">uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:16">(<expr pos:start="107:9" pos:end="107:15"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">&lt;</operator> <literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>)</condition> <block pos:start="107:18" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:18">

        <goto pos:start="109:9" pos:end="109:18">goto <name pos:start="109:14" pos:end="109:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="115:5" pos:end="117:44">for <control pos:start="115:9" pos:end="115:41">(<init pos:start="115:10" pos:end="115:15"><expr pos:start="115:10" pos:end="115:14"><name pos:start="115:10" pos:end="115:10">i</name> <operator pos:start="115:12" pos:end="115:12">=</operator> <literal type="number" pos:start="115:14" pos:end="115:14">0</literal></expr>;</init> <condition pos:start="115:17" pos:end="115:36"><expr pos:start="115:17" pos:end="115:35"><name pos:start="115:17" pos:end="115:17">i</name> <operator pos:start="115:19" pos:end="115:19">&lt;</operator> <name pos:start="115:21" pos:end="115:35"><name pos:start="115:21" pos:end="115:21">s</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:35">catalog_size</name></name></expr>;</condition> <incr pos:start="115:38" pos:end="115:40"><expr pos:start="115:38" pos:end="115:40"><name pos:start="115:38" pos:end="115:38">i</name><operator pos:start="115:39" pos:end="115:40">++</operator></expr></incr>)</control><block type="pseudo" pos:start="117:9" pos:end="117:44"><block_content pos:start="117:9" pos:end="117:44">

        <expr_stmt pos:start="117:9" pos:end="117:44"><expr pos:start="117:9" pos:end="117:43"><call pos:start="117:9" pos:end="117:43"><name pos:start="117:9" pos:end="117:20">le32_to_cpus</name><argument_list pos:start="117:21" pos:end="117:43">(<argument pos:start="117:22" pos:end="117:42"><expr pos:start="117:22" pos:end="117:42"><operator pos:start="117:22" pos:end="117:22">&amp;</operator><name pos:start="117:23" pos:end="117:42"><name pos:start="117:23" pos:end="117:23">s</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:39">catalog_bitmap</name><index pos:start="117:40" pos:end="117:42">[<expr pos:start="117:41" pos:end="117:41"><name pos:start="117:41" pos:end="117:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="121:5" pos:end="123:77"><expr pos:start="121:5" pos:end="123:76"><name pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:19">has_truncate</name></name> <operator pos:start="121:21" pos:end="121:21">=</operator> <call pos:start="121:23" pos:end="121:50"><name pos:start="121:23" pos:end="121:40">bdrv_has_zero_init</name><argument_list pos:start="121:41" pos:end="121:50">(<argument pos:start="121:42" pos:end="121:49"><expr pos:start="121:42" pos:end="121:49"><name pos:start="121:42" pos:end="121:49"><name pos:start="121:42" pos:end="121:43">bs</name><operator pos:start="121:44" pos:end="121:45">-&gt;</operator><name pos:start="121:46" pos:end="121:49">file</name></name></expr></argument>)</argument_list></call> <operator pos:start="121:52" pos:end="121:53">&amp;&amp;</operator>

                      <call pos:start="123:23" pos:end="123:71"><name pos:start="123:23" pos:end="123:35">bdrv_truncate</name><argument_list pos:start="123:36" pos:end="123:71">(<argument pos:start="123:37" pos:end="123:44"><expr pos:start="123:37" pos:end="123:44"><name pos:start="123:37" pos:end="123:44"><name pos:start="123:37" pos:end="123:38">bs</name><operator pos:start="123:39" pos:end="123:40">-&gt;</operator><name pos:start="123:41" pos:end="123:44">file</name></name></expr></argument>, <argument pos:start="123:47" pos:end="123:70"><expr pos:start="123:47" pos:end="123:70"><call pos:start="123:47" pos:end="123:70"><name pos:start="123:47" pos:end="123:60">bdrv_getlength</name><argument_list pos:start="123:61" pos:end="123:70">(<argument pos:start="123:62" pos:end="123:69"><expr pos:start="123:62" pos:end="123:69"><name pos:start="123:62" pos:end="123:69"><name pos:start="123:62" pos:end="123:63">bs</name><operator pos:start="123:64" pos:end="123:65">-&gt;</operator><name pos:start="123:66" pos:end="123:69">file</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="123:73" pos:end="123:74">==</operator> <literal type="number" pos:start="123:76" pos:end="123:76">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:33"><expr pos:start="127:5" pos:end="127:32"><call pos:start="127:5" pos:end="127:32"><name pos:start="127:5" pos:end="127:22">qemu_co_mutex_init</name><argument_list pos:start="127:23" pos:end="127:32">(<argument pos:start="127:24" pos:end="127:31"><expr pos:start="127:24" pos:end="127:31"><operator pos:start="127:24" pos:end="127:24">&amp;</operator><name pos:start="127:25" pos:end="127:31"><name pos:start="127:25" pos:end="127:25">s</name><operator pos:start="127:26" pos:end="127:27">-&gt;</operator><name pos:start="127:28" pos:end="127:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="129:5" pos:end="129:13">return <expr pos:start="129:12" pos:end="129:12"><literal type="number" pos:start="129:12" pos:end="129:12">0</literal></expr>;</return>



<label pos:start="133:1" pos:end="133:12"><name pos:start="133:1" pos:end="133:11">fail_format</name>:</label>

    <expr_stmt pos:start="135:5" pos:end="135:54"><expr pos:start="135:5" pos:end="135:53"><call pos:start="135:5" pos:end="135:53"><name pos:start="135:5" pos:end="135:14">error_setg</name><argument_list pos:start="135:15" pos:end="135:53">(<argument pos:start="135:16" pos:end="135:19"><expr pos:start="135:16" pos:end="135:19"><name pos:start="135:16" pos:end="135:19">errp</name></expr></argument>, <argument pos:start="135:22" pos:end="135:52"><expr pos:start="135:22" pos:end="135:52"><literal type="string" pos:start="135:22" pos:end="135:52">"Image not in Parallels format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:18"><expr pos:start="137:5" pos:end="137:17"><name pos:start="137:5" pos:end="137:7">ret</name> <operator pos:start="137:9" pos:end="137:9">=</operator> <operator pos:start="137:11" pos:end="137:11">-</operator><name pos:start="137:12" pos:end="137:17">EINVAL</name></expr>;</expr_stmt>

<label pos:start="139:1" pos:end="139:5"><name pos:start="139:1" pos:end="139:4">fail</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:30"><expr pos:start="141:5" pos:end="141:29"><call pos:start="141:5" pos:end="141:29"><name pos:start="141:5" pos:end="141:10">g_free</name><argument_list pos:start="141:11" pos:end="141:29">(<argument pos:start="141:12" pos:end="141:28"><expr pos:start="141:12" pos:end="141:28"><name pos:start="141:12" pos:end="141:28"><name pos:start="141:12" pos:end="141:12">s</name><operator pos:start="141:13" pos:end="141:14">-&gt;</operator><name pos:start="141:15" pos:end="141:28">catalog_bitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="143:5" pos:end="143:15">return <expr pos:start="143:12" pos:end="143:14"><name pos:start="143:12" pos:end="143:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
