<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1209.c" pos:tabs="8"><function pos:start="1:1" pos:end="165:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:34">ff_h264_decode_ref_pic_marking</name><parameter_list pos:start="1:35" pos:end="3:51">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:46">H264Context</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">h</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:50"><decl pos:start="3:36" pos:end="3:50"><type pos:start="3:36" pos:end="3:50"><name pos:start="3:36" pos:end="3:38">int</name></type> <name pos:start="3:40" pos:end="3:50">first_slice</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="165:1">{<block_content pos:start="7:5" pos:end="163:13">

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">MMCO</name></type> <name pos:start="9:10" pos:end="9:34"><name pos:start="9:10" pos:end="9:18">mmco_temp</name><index pos:start="9:19" pos:end="9:34">[<expr pos:start="9:20" pos:end="9:33"><name pos:start="9:20" pos:end="9:33">MAX_MMCO_COUNT</name></expr>]</index></name></decl>, <decl pos:start="9:37" pos:end="9:53"><type ref="prev" pos:start="9:5" pos:end="9:8"><modifier pos:start="9:37" pos:end="9:37">*</modifier></type><name pos:start="9:38" pos:end="9:41">mmco</name> <init pos:start="9:43" pos:end="9:53">= <expr pos:start="9:45" pos:end="9:53"><name pos:start="9:45" pos:end="9:53">mmco_temp</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">mmco_index</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="135:5"><if pos:start="15:5" pos:end="29:5">if <condition pos:start="15:8" pos:end="15:42">(<expr pos:start="15:9" pos:end="15:41"><name pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:9">h</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:24">nal_unit_type</name></name> <operator pos:start="15:26" pos:end="15:27">==</operator> <name pos:start="15:29" pos:end="15:41">NAL_IDR_SLICE</name></expr>)</condition> <block pos:start="15:44" pos:end="29:5">{<block_content pos:start="17:9" pos:end="27:9"> <comment type="line" pos:start="15:46" pos:end="15:60">// FIXME fields</comment>

        <expr_stmt pos:start="17:9" pos:end="17:23"><expr pos:start="17:9" pos:end="17:22"><call pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:18">skip_bits1</name><argument_list pos:start="17:19" pos:end="17:22">(<argument pos:start="17:20" pos:end="17:21"><expr pos:start="17:20" pos:end="17:21"><name pos:start="17:20" pos:end="17:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="17:25" pos:end="17:38">// broken_link</comment>

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:26">(<expr pos:start="19:13" pos:end="19:25"><call pos:start="19:13" pos:end="19:25"><name pos:start="19:13" pos:end="19:21">get_bits1</name><argument_list pos:start="19:22" pos:end="19:25">(<argument pos:start="19:23" pos:end="19:24"><expr pos:start="19:23" pos:end="19:24"><name pos:start="19:23" pos:end="19:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:28" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:33">

            <expr_stmt pos:start="21:13" pos:end="21:41"><expr pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:16">mmco</name><index pos:start="21:17" pos:end="21:19">[<expr pos:start="21:18" pos:end="21:18"><literal type="number" pos:start="21:18" pos:end="21:18">0</literal></expr>]</index></name><operator pos:start="21:20" pos:end="21:20">.</operator><name pos:start="21:21" pos:end="21:26">opcode</name>   <operator pos:start="21:30" pos:end="21:30">=</operator> <name pos:start="21:32" pos:end="21:40">MMCO_LONG</name></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:33"><expr pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:19"><name pos:start="23:13" pos:end="23:16">mmco</name><index pos:start="23:17" pos:end="23:19">[<expr pos:start="23:18" pos:end="23:18"><literal type="number" pos:start="23:18" pos:end="23:18">0</literal></expr>]</index></name><operator pos:start="23:20" pos:end="23:20">.</operator><name pos:start="23:21" pos:end="23:28">long_arg</name> <operator pos:start="23:30" pos:end="23:30">=</operator> <literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:33"><expr pos:start="25:13" pos:end="25:32"><name pos:start="25:13" pos:end="25:22">mmco_index</name>       <operator pos:start="25:30" pos:end="25:30">=</operator> <literal type="number" pos:start="25:32" pos:end="25:32">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="135:5">else <block pos:start="29:12" pos:end="135:5">{<block_content pos:start="31:9" pos:end="133:9">

        <if_stmt pos:start="31:9" pos:end="133:9"><if pos:start="31:9" pos:end="119:9">if <condition pos:start="31:12" pos:end="31:26">(<expr pos:start="31:13" pos:end="31:25"><call pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:21">get_bits1</name><argument_list pos:start="31:22" pos:end="31:25">(<argument pos:start="31:23" pos:end="31:24"><expr pos:start="31:23" pos:end="31:24"><name pos:start="31:23" pos:end="31:24">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:28" pos:end="119:9">{<block_content pos:start="33:13" pos:end="117:27"> <comment type="line" pos:start="31:30" pos:end="31:66">// adaptive_ref_pic_marking_mode_flag</comment>

            <for pos:start="33:13" pos:end="115:13">for <control pos:start="33:17" pos:end="33:48">(<init pos:start="33:18" pos:end="33:23"><expr pos:start="33:18" pos:end="33:22"><name pos:start="33:18" pos:end="33:18">i</name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>;</init> <condition pos:start="33:25" pos:end="33:43"><expr pos:start="33:25" pos:end="33:42"><name pos:start="33:25" pos:end="33:25">i</name> <operator pos:start="33:27" pos:end="33:27">&lt;</operator> <name pos:start="33:29" pos:end="33:42">MAX_MMCO_COUNT</name></expr>;</condition> <incr pos:start="33:45" pos:end="33:47"><expr pos:start="33:45" pos:end="33:47"><name pos:start="33:45" pos:end="33:45">i</name><operator pos:start="33:46" pos:end="33:47">++</operator></expr></incr>)</control> <block pos:start="33:50" pos:end="115:13">{<block_content pos:start="35:17" pos:end="113:26">

                <decl_stmt pos:start="35:17" pos:end="35:57"><decl pos:start="35:17" pos:end="35:56"><type pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:26">MMCOOpcode</name></type> <name pos:start="35:28" pos:end="35:33">opcode</name> <init pos:start="35:35" pos:end="35:56">= <expr pos:start="35:37" pos:end="35:56"><call pos:start="35:37" pos:end="35:56"><name pos:start="35:37" pos:end="35:52">get_ue_golomb_31</name><argument_list pos:start="35:53" pos:end="35:56">(<argument pos:start="35:54" pos:end="35:55"><expr pos:start="35:54" pos:end="35:55"><name pos:start="35:54" pos:end="35:55">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="39:17" pos:end="39:40"><expr pos:start="39:17" pos:end="39:39"><name pos:start="39:17" pos:end="39:23"><name pos:start="39:17" pos:end="39:20">mmco</name><index pos:start="39:21" pos:end="39:23">[<expr pos:start="39:22" pos:end="39:22"><name pos:start="39:22" pos:end="39:22">i</name></expr>]</index></name><operator pos:start="39:24" pos:end="39:24">.</operator><name pos:start="39:25" pos:end="39:30">opcode</name> <operator pos:start="39:32" pos:end="39:32">=</operator> <name pos:start="39:34" pos:end="39:39">opcode</name></expr>;</expr_stmt>

                <if_stmt pos:start="41:17" pos:end="67:17"><if pos:start="41:17" pos:end="67:17">if <condition pos:start="41:20" pos:end="41:77">(<expr pos:start="41:21" pos:end="41:76"><name pos:start="41:21" pos:end="41:26">opcode</name> <operator pos:start="41:28" pos:end="41:29">==</operator> <name pos:start="41:31" pos:end="41:47">MMCO_SHORT2UNUSED</name> <operator pos:start="41:49" pos:end="41:50">||</operator> <name pos:start="41:52" pos:end="41:57">opcode</name> <operator pos:start="41:59" pos:end="41:60">==</operator> <name pos:start="41:62" pos:end="41:76">MMCO_SHORT2LONG</name></expr>)</condition> <block pos:start="41:79" pos:end="67:17">{<block_content pos:start="43:21" pos:end="66:0">

                    <expr_stmt pos:start="43:21" pos:end="66:0"><expr pos:start="43:21" pos:end="47:48"><name pos:start="43:21" pos:end="43:27"><name pos:start="43:21" pos:end="43:24">mmco</name><index pos:start="43:25" pos:end="43:27">[<expr pos:start="43:26" pos:end="43:26"><name pos:start="43:26" pos:end="43:26">i</name></expr>]</index></name><operator pos:start="43:28" pos:end="43:28">.</operator><name pos:start="43:29" pos:end="43:41">short_pic_num</name> <operator pos:start="43:43" pos:end="43:43">=</operator>

                        <operator pos:start="45:25" pos:end="45:25">(</operator><name pos:start="45:26" pos:end="45:40"><name pos:start="45:26" pos:end="45:26">h</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:40">curr_pic_num</name></name> <operator pos:start="45:42" pos:end="45:42">-</operator> <call pos:start="45:44" pos:end="45:60"><name pos:start="45:44" pos:end="45:56">get_ue_golomb</name><argument_list pos:start="45:57" pos:end="45:60">(<argument pos:start="45:58" pos:end="45:59"><expr pos:start="45:58" pos:end="45:59"><name pos:start="45:58" pos:end="45:59">gb</name></expr></argument>)</argument_list></call> <operator pos:start="45:62" pos:end="45:62">-</operator> <literal type="number" pos:start="45:64" pos:end="45:64">1</literal><operator pos:start="45:65" pos:end="45:65">)</operator> <operator pos:start="45:67" pos:end="45:67">&amp;</operator>

                            <operator pos:start="47:29" pos:end="47:29">(</operator><name pos:start="47:30" pos:end="47:43"><name pos:start="47:30" pos:end="47:30">h</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:43">max_pic_num</name></name> <operator pos:start="47:45" pos:end="47:45">-</operator> <literal type="number" pos:start="47:47" pos:end="47:47">1</literal><operator pos:start="47:48" pos:end="47:48">)</operator></expr>;</expr_stmt>

<cpp:if pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:3">if</cpp:directive> <expr pos:start="49:5" pos:end="49:5"><literal type="number" pos:start="49:5" pos:end="49:5">0</literal></expr></cpp:if>

                    if (mmco[i].short_pic_num &gt;= h-&gt;short_ref_count ||

                        !h-&gt;short_ref[mmco[i].short_pic_num]) {

                        av_log(s-&gt;avctx, AV_LOG_ERROR,

                               "illegal short ref in memory management control "

                               "operation %d\n", mmco);

                        return -1;

                    }

<cpp:endif pos:start="65:1" pos:end="65:6">#<cpp:directive pos:start="65:2" pos:end="65:6">endif</cpp:directive></cpp:endif>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="69:17" pos:end="95:17"><if pos:start="69:17" pos:end="95:17">if <condition pos:start="69:20" pos:end="71:71">(<expr pos:start="69:21" pos:end="71:70"><name pos:start="69:21" pos:end="69:26">opcode</name> <operator pos:start="69:28" pos:end="69:29">==</operator> <name pos:start="69:31" pos:end="69:45">MMCO_SHORT2LONG</name> <operator pos:start="69:47" pos:end="69:48">||</operator> <name pos:start="69:50" pos:end="69:55">opcode</name> <operator pos:start="69:57" pos:end="69:58">==</operator> <name pos:start="69:60" pos:end="69:75">MMCO_LONG2UNUSED</name> <operator pos:start="69:77" pos:end="69:78">||</operator>

                    <name pos:start="71:21" pos:end="71:26">opcode</name> <operator pos:start="71:28" pos:end="71:29">==</operator> <name pos:start="71:31" pos:end="71:39">MMCO_LONG</name> <operator pos:start="71:41" pos:end="71:42">||</operator> <name pos:start="71:44" pos:end="71:49">opcode</name> <operator pos:start="71:51" pos:end="71:52">==</operator> <name pos:start="71:54" pos:end="71:70">MMCO_SET_MAX_LONG</name></expr>)</condition> <block pos:start="71:73" pos:end="95:17">{<block_content pos:start="73:21" pos:end="93:48">

                    <decl_stmt pos:start="73:21" pos:end="73:65"><decl pos:start="73:21" pos:end="73:64"><type pos:start="73:21" pos:end="73:32"><name pos:start="73:21" pos:end="73:28">unsigned</name> <name pos:start="73:30" pos:end="73:32">int</name></type> <name pos:start="73:34" pos:end="73:41">long_arg</name> <init pos:start="73:43" pos:end="73:64">= <expr pos:start="73:45" pos:end="73:64"><call pos:start="73:45" pos:end="73:64"><name pos:start="73:45" pos:end="73:60">get_ue_golomb_31</name><argument_list pos:start="73:61" pos:end="73:64">(<argument pos:start="73:62" pos:end="73:63"><expr pos:start="73:62" pos:end="73:63"><name pos:start="73:62" pos:end="73:63">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="75:21" pos:end="91:21"><if pos:start="75:21" pos:end="91:21">if <condition pos:start="75:24" pos:end="81:76">(<expr pos:start="75:25" pos:end="81:75"><name pos:start="75:25" pos:end="75:32">long_arg</name> <operator pos:start="75:34" pos:end="75:35">&gt;=</operator> <literal type="number" pos:start="75:37" pos:end="75:38">32</literal> <operator pos:start="75:40" pos:end="75:41">||</operator>

                        <operator pos:start="77:25" pos:end="77:25">(</operator><name pos:start="77:26" pos:end="77:33">long_arg</name> <operator pos:start="77:35" pos:end="77:36">&gt;=</operator> <literal type="number" pos:start="77:38" pos:end="77:39">16</literal> <operator pos:start="77:41" pos:end="77:42">&amp;&amp;</operator> <operator pos:start="77:44" pos:end="77:44">!</operator><operator pos:start="77:45" pos:end="77:45">(</operator><name pos:start="77:46" pos:end="77:51">opcode</name> <operator pos:start="77:53" pos:end="77:54">==</operator> <name pos:start="77:56" pos:end="77:72">MMCO_SET_MAX_LONG</name> <operator pos:start="77:74" pos:end="77:75">&amp;&amp;</operator>

                                             <name pos:start="79:46" pos:end="79:53">long_arg</name> <operator pos:start="79:55" pos:end="79:56">==</operator> <literal type="number" pos:start="79:58" pos:end="79:59">16</literal><operator pos:start="79:60" pos:end="79:60">)</operator> <operator pos:start="79:62" pos:end="79:63">&amp;&amp;</operator>

                         <operator pos:start="81:26" pos:end="81:26">!</operator><operator pos:start="81:27" pos:end="81:27">(</operator><name pos:start="81:28" pos:end="81:33">opcode</name> <operator pos:start="81:35" pos:end="81:36">==</operator> <name pos:start="81:38" pos:end="81:53">MMCO_LONG2UNUSED</name> <operator pos:start="81:55" pos:end="81:56">&amp;&amp;</operator> <call pos:start="81:58" pos:end="81:73"><name pos:start="81:58" pos:end="81:70">FIELD_PICTURE</name><argument_list pos:start="81:71" pos:end="81:73">(<argument pos:start="81:72" pos:end="81:72"><expr pos:start="81:72" pos:end="81:72"><name pos:start="81:72" pos:end="81:72">h</name></expr></argument>)</argument_list></call><operator pos:start="81:74" pos:end="81:74">)</operator><operator pos:start="81:75" pos:end="81:75">)</operator></expr>)</condition> <block pos:start="81:78" pos:end="91:21">{<block_content pos:start="83:25" pos:end="89:34">

                        <expr_stmt pos:start="83:25" pos:end="87:57"><expr pos:start="83:25" pos:end="87:56"><call pos:start="83:25" pos:end="87:56"><name pos:start="83:25" pos:end="83:30">av_log</name><argument_list pos:start="83:31" pos:end="87:56">(<argument pos:start="83:32" pos:end="83:39"><expr pos:start="83:32" pos:end="83:39"><name pos:start="83:32" pos:end="83:39"><name pos:start="83:32" pos:end="83:32">h</name><operator pos:start="83:33" pos:end="83:34">-&gt;</operator><name pos:start="83:35" pos:end="83:39">avctx</name></name></expr></argument>, <argument pos:start="83:42" pos:end="83:53"><expr pos:start="83:42" pos:end="83:53"><name pos:start="83:42" pos:end="83:53">AV_LOG_ERROR</name></expr></argument>,

                               <argument pos:start="85:32" pos:end="87:47"><expr pos:start="85:32" pos:end="87:47"><literal type="string" pos:start="85:32" pos:end="85:79">"illegal long ref in memory management control "</literal>

                               <literal type="string" pos:start="87:32" pos:end="87:47">"operation %d\n"</literal></expr></argument>, <argument pos:start="87:50" pos:end="87:55"><expr pos:start="87:50" pos:end="87:55"><name pos:start="87:50" pos:end="87:55">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="89:25" pos:end="89:34">return <expr pos:start="89:32" pos:end="89:33"><operator pos:start="89:32" pos:end="89:32">-</operator><literal type="number" pos:start="89:33" pos:end="89:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:48"><expr pos:start="93:21" pos:end="93:47"><name pos:start="93:21" pos:end="93:27"><name pos:start="93:21" pos:end="93:24">mmco</name><index pos:start="93:25" pos:end="93:27">[<expr pos:start="93:26" pos:end="93:26"><name pos:start="93:26" pos:end="93:26">i</name></expr>]</index></name><operator pos:start="93:28" pos:end="93:28">.</operator><name pos:start="93:29" pos:end="93:36">long_arg</name> <operator pos:start="93:38" pos:end="93:38">=</operator> <name pos:start="93:40" pos:end="93:47">long_arg</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="99:17" pos:end="109:17"><if pos:start="99:17" pos:end="109:17">if <condition pos:start="99:20" pos:end="99:50">(<expr pos:start="99:21" pos:end="99:49"><name pos:start="99:21" pos:end="99:26">opcode</name> <operator pos:start="99:28" pos:end="99:28">&gt;</operator> <operator pos:start="99:30" pos:end="99:30">(</operator><name pos:start="99:31" pos:end="99:38">unsigned</name><operator pos:start="99:39" pos:end="99:39">)</operator> <name pos:start="99:41" pos:end="99:49">MMCO_LONG</name></expr>)</condition> <block pos:start="99:52" pos:end="109:17">{<block_content pos:start="101:21" pos:end="107:30">

                    <expr_stmt pos:start="101:21" pos:end="105:35"><expr pos:start="101:21" pos:end="105:34"><call pos:start="101:21" pos:end="105:34"><name pos:start="101:21" pos:end="101:26">av_log</name><argument_list pos:start="101:27" pos:end="105:34">(<argument pos:start="101:28" pos:end="101:35"><expr pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:28">h</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:35">avctx</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:49"><expr pos:start="101:38" pos:end="101:49"><name pos:start="101:38" pos:end="101:49">AV_LOG_ERROR</name></expr></argument>,

                           <argument pos:start="103:28" pos:end="103:77"><expr pos:start="103:28" pos:end="103:77"><literal type="string" pos:start="103:28" pos:end="103:77">"illegal memory management control operation %d\n"</literal></expr></argument>,

                           <argument pos:start="105:28" pos:end="105:33"><expr pos:start="105:28" pos:end="105:33"><name pos:start="105:28" pos:end="105:33">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="107:21" pos:end="107:30">return <expr pos:start="107:28" pos:end="107:29"><operator pos:start="107:28" pos:end="107:28">-</operator><literal type="number" pos:start="107:29" pos:end="107:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="111:17" pos:end="113:26"><if pos:start="111:17" pos:end="113:26">if <condition pos:start="111:20" pos:end="111:39">(<expr pos:start="111:21" pos:end="111:38"><name pos:start="111:21" pos:end="111:26">opcode</name> <operator pos:start="111:28" pos:end="111:29">==</operator> <name pos:start="111:31" pos:end="111:38">MMCO_END</name></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="113:26"><block_content pos:start="113:21" pos:end="113:26">

                    <break pos:start="113:21" pos:end="113:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="117:13" pos:end="117:27"><expr pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:22">mmco_index</name> <operator pos:start="117:24" pos:end="117:24">=</operator> <name pos:start="117:26" pos:end="117:26">i</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="119:11" pos:end="133:9">else <block pos:start="119:16" pos:end="133:9">{<block_content pos:start="121:13" pos:end="131:28">

            <if_stmt pos:start="121:13" pos:end="129:13"><if pos:start="121:13" pos:end="129:13">if <condition pos:start="121:16" pos:end="121:28">(<expr pos:start="121:17" pos:end="121:27"><name pos:start="121:17" pos:end="121:27">first_slice</name></expr>)</condition> <block pos:start="121:30" pos:end="129:13">{<block_content pos:start="123:17" pos:end="127:31">

                <expr_stmt pos:start="123:17" pos:end="123:71"><expr pos:start="123:17" pos:end="123:70"><name pos:start="123:17" pos:end="123:19">ret</name> <operator pos:start="123:21" pos:end="123:21">=</operator> <call pos:start="123:23" pos:end="123:70"><name pos:start="123:23" pos:end="123:54">ff_generate_sliding_window_mmcos</name><argument_list pos:start="123:55" pos:end="123:70">(<argument pos:start="123:56" pos:end="123:56"><expr pos:start="123:56" pos:end="123:56"><name pos:start="123:56" pos:end="123:56">h</name></expr></argument>, <argument pos:start="123:59" pos:end="123:69"><expr pos:start="123:59" pos:end="123:69"><name pos:start="123:59" pos:end="123:69">first_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="125:17" pos:end="127:31"><if pos:start="125:17" pos:end="127:31">if <condition pos:start="125:20" pos:end="125:73">(<expr pos:start="125:21" pos:end="125:72"><name pos:start="125:21" pos:end="125:23">ret</name> <operator pos:start="125:25" pos:end="125:25">&lt;</operator> <literal type="number" pos:start="125:27" pos:end="125:27">0</literal> <operator pos:start="125:29" pos:end="125:30">&amp;&amp;</operator> <name pos:start="125:32" pos:end="125:56"><name pos:start="125:32" pos:end="125:32">h</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:39">avctx</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:56">err_recognition</name></name> <operator pos:start="125:58" pos:end="125:58">&amp;</operator> <name pos:start="125:60" pos:end="125:72">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="127:31"><block_content pos:start="127:21" pos:end="127:31">

                    <return pos:start="127:21" pos:end="127:31">return <expr pos:start="127:28" pos:end="127:30"><name pos:start="127:28" pos:end="127:30">ret</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:28"><expr pos:start="131:13" pos:end="131:27"><name pos:start="131:13" pos:end="131:22">mmco_index</name> <operator pos:start="131:24" pos:end="131:24">=</operator> <operator pos:start="131:26" pos:end="131:26">-</operator><literal type="number" pos:start="131:27" pos:end="131:27">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="139:5" pos:end="159:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:40">(<expr pos:start="139:9" pos:end="139:39"><name pos:start="139:9" pos:end="139:19">first_slice</name> <operator pos:start="139:21" pos:end="139:22">&amp;&amp;</operator> <name pos:start="139:24" pos:end="139:33">mmco_index</name> <operator pos:start="139:35" pos:end="139:36">!=</operator> <operator pos:start="139:38" pos:end="139:38">-</operator><literal type="number" pos:start="139:39" pos:end="139:39">1</literal></expr>)</condition> <block pos:start="139:42" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:35">

        <expr_stmt pos:start="141:9" pos:end="141:52"><expr pos:start="141:9" pos:end="141:51"><call pos:start="141:9" pos:end="141:51"><name pos:start="141:9" pos:end="141:14">memcpy</name><argument_list pos:start="141:15" pos:end="141:51">(<argument pos:start="141:16" pos:end="141:22"><expr pos:start="141:16" pos:end="141:22"><name pos:start="141:16" pos:end="141:22"><name pos:start="141:16" pos:end="141:16">h</name><operator pos:start="141:17" pos:end="141:18">-&gt;</operator><name pos:start="141:19" pos:end="141:22">mmco</name></name></expr></argument>, <argument pos:start="141:25" pos:end="141:33"><expr pos:start="141:25" pos:end="141:33"><name pos:start="141:25" pos:end="141:33">mmco_temp</name></expr></argument>, <argument pos:start="141:36" pos:end="141:50"><expr pos:start="141:36" pos:end="141:50"><sizeof pos:start="141:36" pos:end="141:50">sizeof<argument_list pos:start="141:42" pos:end="141:50">(<argument pos:start="141:43" pos:end="141:49"><expr pos:start="141:43" pos:end="141:49"><name pos:start="141:43" pos:end="141:49"><name pos:start="141:43" pos:end="141:43">h</name><operator pos:start="141:44" pos:end="141:45">-&gt;</operator><name pos:start="141:46" pos:end="141:49">mmco</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:35"><expr pos:start="143:9" pos:end="143:34"><name pos:start="143:9" pos:end="143:21"><name pos:start="143:9" pos:end="143:9">h</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:21">mmco_index</name></name> <operator pos:start="143:23" pos:end="143:23">=</operator> <name pos:start="143:25" pos:end="143:34">mmco_index</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="145:7" pos:end="159:5">else if <condition pos:start="145:15" pos:end="149:63">(<expr pos:start="145:16" pos:end="149:62"><operator pos:start="145:16" pos:end="145:16">!</operator><name pos:start="145:17" pos:end="145:27">first_slice</name> <operator pos:start="145:29" pos:end="145:30">&amp;&amp;</operator> <name pos:start="145:32" pos:end="145:41">mmco_index</name> <operator pos:start="145:43" pos:end="145:44">&gt;=</operator> <literal type="number" pos:start="145:46" pos:end="145:46">0</literal> <operator pos:start="145:48" pos:end="145:49">&amp;&amp;</operator>

               <operator pos:start="147:16" pos:end="147:16">(</operator><name pos:start="147:17" pos:end="147:26">mmco_index</name> <operator pos:start="147:28" pos:end="147:29">!=</operator> <name pos:start="147:31" pos:end="147:43"><name pos:start="147:31" pos:end="147:31">h</name><operator pos:start="147:32" pos:end="147:33">-&gt;</operator><name pos:start="147:34" pos:end="147:43">mmco_index</name></name> <operator pos:start="147:45" pos:end="147:46">||</operator>

                <call pos:start="149:17" pos:end="149:61"><name pos:start="149:17" pos:end="149:29">check_opcodes</name><argument_list pos:start="149:30" pos:end="149:61">(<argument pos:start="149:31" pos:end="149:37"><expr pos:start="149:31" pos:end="149:37"><name pos:start="149:31" pos:end="149:37"><name pos:start="149:31" pos:end="149:31">h</name><operator pos:start="149:32" pos:end="149:33">-&gt;</operator><name pos:start="149:34" pos:end="149:37">mmco</name></name></expr></argument>, <argument pos:start="149:40" pos:end="149:48"><expr pos:start="149:40" pos:end="149:48"><name pos:start="149:40" pos:end="149:48">mmco_temp</name></expr></argument>, <argument pos:start="149:51" pos:end="149:60"><expr pos:start="149:51" pos:end="149:60"><name pos:start="149:51" pos:end="149:60">mmco_index</name></expr></argument>)</argument_list></call><operator pos:start="149:62" pos:end="149:62">)</operator></expr>)</condition> <block pos:start="149:65" pos:end="159:5">{<block_content pos:start="151:9" pos:end="157:35">

        <expr_stmt pos:start="151:9" pos:end="155:42"><expr pos:start="151:9" pos:end="155:41"><call pos:start="151:9" pos:end="155:41"><name pos:start="151:9" pos:end="151:14">av_log</name><argument_list pos:start="151:15" pos:end="155:41">(<argument pos:start="151:16" pos:end="151:23"><expr pos:start="151:16" pos:end="151:23"><name pos:start="151:16" pos:end="151:23"><name pos:start="151:16" pos:end="151:16">h</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:23">avctx</name></name></expr></argument>, <argument pos:start="151:26" pos:end="151:37"><expr pos:start="151:26" pos:end="151:37"><name pos:start="151:26" pos:end="151:37">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="153:16" pos:end="153:66"><expr pos:start="153:16" pos:end="153:66"><literal type="string" pos:start="153:16" pos:end="153:66">"Inconsistent MMCO state between slices [%d, %d]\n"</literal></expr></argument>,

               <argument pos:start="155:16" pos:end="155:25"><expr pos:start="155:16" pos:end="155:25"><name pos:start="155:16" pos:end="155:25">mmco_index</name></expr></argument>, <argument pos:start="155:28" pos:end="155:40"><expr pos:start="155:28" pos:end="155:40"><name pos:start="155:28" pos:end="155:40"><name pos:start="155:28" pos:end="155:28">h</name><operator pos:start="155:29" pos:end="155:30">-&gt;</operator><name pos:start="155:31" pos:end="155:40">mmco_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="157:9" pos:end="157:35">return <expr pos:start="157:16" pos:end="157:34"><name pos:start="157:16" pos:end="157:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="163:5" pos:end="163:13">return <expr pos:start="163:12" pos:end="163:12"><literal type="number" pos:start="163:12" pos:end="163:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
