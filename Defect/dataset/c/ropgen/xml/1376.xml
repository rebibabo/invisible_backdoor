<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1376.c" pos:tabs="8"><function pos:start="1:1" pos:end="161:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:36">mpeg4_decode_video_packet_header</name><parameter_list pos:start="1:37" pos:end="1:55">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:53"><name pos:start="1:38" pos:end="1:51">MpegEncContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="161:1">{<block_content pos:start="5:5" pos:end="159:13">

    <decl_stmt pos:start="5:5" pos:end="5:48"><decl pos:start="5:5" pos:end="5:47"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">mb_num_bits</name><init pos:start="5:20" pos:end="5:47">= <expr pos:start="5:22" pos:end="5:47"><call pos:start="5:22" pos:end="5:43"><name pos:start="5:22" pos:end="5:28">av_log2</name><argument_list pos:start="5:29" pos:end="5:43">(<argument pos:start="5:30" pos:end="5:42"><expr pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:38"><name pos:start="5:30" pos:end="5:30">s</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:38">mb_num</name></name> <operator pos:start="5:40" pos:end="5:40">-</operator> <literal type="number" pos:start="5:42" pos:end="5:42">1</literal></expr></argument>)</argument_list></call> <operator pos:start="5:45" pos:end="5:45">+</operator> <literal type="number" pos:start="5:47" pos:end="5:47">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:40"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:24">header_extension</name><init pos:start="7:25" pos:end="7:26">=<expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>, <decl pos:start="7:29" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:34">mb_num</name></decl>, <decl pos:start="7:37" pos:end="7:39"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:39">len</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:64">/* is there enough space left for a video packet + header */</comment>

    <if_stmt pos:start="13:5" pos:end="13:66"><if pos:start="13:5" pos:end="13:66">if<condition pos:start="13:7" pos:end="13:55">( <expr pos:start="13:9" pos:end="13:54"><call pos:start="13:9" pos:end="13:30"><name pos:start="13:9" pos:end="13:22">get_bits_count</name><argument_list pos:start="13:23" pos:end="13:30">(<argument pos:start="13:24" pos:end="13:29"><expr pos:start="13:24" pos:end="13:29"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:29"><name pos:start="13:25" pos:end="13:25">s</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:32" pos:end="13:32">&gt;</operator> <name pos:start="13:34" pos:end="13:51"><name pos:start="13:34" pos:end="13:34">s</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:38">gb</name><operator pos:start="13:39" pos:end="13:39">.</operator><name pos:start="13:40" pos:end="13:51">size_in_bits</name></name><operator pos:start="13:52" pos:end="13:52">-</operator><literal type="number" pos:start="13:53" pos:end="13:54">20</literal></expr>)</condition><block type="pseudo" pos:start="13:57" pos:end="13:66"><block_content pos:start="13:57" pos:end="13:66"> <return pos:start="13:57" pos:end="13:66">return <expr pos:start="13:64" pos:end="13:65"><operator pos:start="13:64" pos:end="13:64">-</operator><literal type="number" pos:start="13:65" pos:end="13:65">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="17:5" pos:end="21:5">for<control pos:start="17:8" pos:end="17:29">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:11">len</name><operator pos:start="17:12" pos:end="17:12">=</operator><literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:22"><expr pos:start="17:16" pos:end="17:21"><name pos:start="17:16" pos:end="17:18">len</name><operator pos:start="17:19" pos:end="17:19">&lt;</operator><literal type="number" pos:start="17:20" pos:end="17:21">32</literal></expr>;</condition> <incr pos:start="17:24" pos:end="17:28"><expr pos:start="17:24" pos:end="17:28"><name pos:start="17:24" pos:end="17:26">len</name><operator pos:start="17:27" pos:end="17:28">++</operator></expr></incr>)</control><block pos:start="17:30" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:36">

        <if_stmt pos:start="19:9" pos:end="19:36"><if pos:start="19:9" pos:end="19:36">if<condition pos:start="19:11" pos:end="19:29">(<expr pos:start="19:12" pos:end="19:28"><call pos:start="19:12" pos:end="19:28"><name pos:start="19:12" pos:end="19:20">get_bits1</name><argument_list pos:start="19:21" pos:end="19:28">(<argument pos:start="19:22" pos:end="19:27"><expr pos:start="19:22" pos:end="19:27"><operator pos:start="19:22" pos:end="19:22">&amp;</operator><name pos:start="19:23" pos:end="19:27"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:31" pos:end="19:36"><block_content pos:start="19:31" pos:end="19:36"> <break pos:start="19:31" pos:end="19:36">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if<condition pos:start="25:7" pos:end="25:55">(<expr pos:start="25:8" pos:end="25:54"><name pos:start="25:8" pos:end="25:10">len</name><operator pos:start="25:11" pos:end="25:12">!=</operator><call pos:start="25:13" pos:end="25:54"><name pos:start="25:13" pos:end="25:51">ff_mpeg4_get_video_packet_prefix_length</name><argument_list pos:start="25:52" pos:end="25:54">(<argument pos:start="25:53" pos:end="25:53"><expr pos:start="25:53" pos:end="25:53"><name pos:start="25:53" pos:end="25:53">s</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="25:56" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:18">

        <expr_stmt pos:start="27:9" pos:end="27:73"><expr pos:start="27:9" pos:end="27:72"><call pos:start="27:9" pos:end="27:72"><name pos:start="27:9" pos:end="27:14">av_log</name><argument_list pos:start="27:15" pos:end="27:72">(<argument pos:start="27:16" pos:end="27:23"><expr pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:23"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:23">avctx</name></name></expr></argument>, <argument pos:start="27:26" pos:end="27:37"><expr pos:start="27:26" pos:end="27:37"><name pos:start="27:26" pos:end="27:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="27:40" pos:end="27:71"><expr pos:start="27:40" pos:end="27:71"><literal type="string" pos:start="27:40" pos:end="27:71">"marker does not match f_code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="29:9" pos:end="29:18">return <expr pos:start="29:16" pos:end="29:17"><operator pos:start="29:16" pos:end="29:16">-</operator><literal type="number" pos:start="29:17" pos:end="29:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if<condition pos:start="35:7" pos:end="35:30">(<expr pos:start="35:8" pos:end="35:29"><name pos:start="35:8" pos:end="35:15"><name pos:start="35:8" pos:end="35:8">s</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:15">shape</name></name> <operator pos:start="35:17" pos:end="35:18">!=</operator> <name pos:start="35:20" pos:end="35:29">RECT_SHAPE</name></expr>)</condition><block pos:start="35:31" pos:end="41:5">{<block_content pos:start="37:9" pos:end="37:44">

        <expr_stmt pos:start="37:9" pos:end="37:44"><expr pos:start="37:9" pos:end="37:43"><name pos:start="37:9" pos:end="37:24">header_extension</name><operator pos:start="37:25" pos:end="37:25">=</operator> <call pos:start="37:27" pos:end="37:43"><name pos:start="37:27" pos:end="37:35">get_bits1</name><argument_list pos:start="37:36" pos:end="37:43">(<argument pos:start="37:37" pos:end="37:42"><expr pos:start="37:37" pos:end="37:42"><operator pos:start="37:37" pos:end="37:37">&amp;</operator><name pos:start="37:38" pos:end="37:42"><name pos:start="37:38" pos:end="37:38">s</name><operator pos:start="37:39" pos:end="37:40">-&gt;</operator><name pos:start="37:41" pos:end="37:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="39:9" pos:end="39:31">//FIXME more stuff here</comment>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:10">mb_num</name><operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:20">get_bits</name><argument_list pos:start="45:21" pos:end="45:41">(<argument pos:start="45:22" pos:end="45:27"><expr pos:start="45:22" pos:end="45:27"><operator pos:start="45:22" pos:end="45:22">&amp;</operator><name pos:start="45:23" pos:end="45:27"><name pos:start="45:23" pos:end="45:23">s</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:27">gb</name></name></expr></argument>, <argument pos:start="45:30" pos:end="45:40"><expr pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:40">mb_num_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if<condition pos:start="47:7" pos:end="47:25">(<expr pos:start="47:8" pos:end="47:24"><name pos:start="47:8" pos:end="47:13">mb_num</name><operator pos:start="47:14" pos:end="47:15">&gt;=</operator><name pos:start="47:16" pos:end="47:24"><name pos:start="47:16" pos:end="47:16">s</name><operator pos:start="47:17" pos:end="47:18">-&gt;</operator><name pos:start="47:19" pos:end="47:24">mb_num</name></name></expr>)</condition><block pos:start="47:26" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:103"><expr pos:start="49:9" pos:end="49:102"><call pos:start="49:9" pos:end="49:102"><name pos:start="49:9" pos:end="49:14">av_log</name><argument_list pos:start="49:15" pos:end="49:102">(<argument pos:start="49:16" pos:end="49:23"><expr pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:23"><name pos:start="49:16" pos:end="49:16">s</name><operator pos:start="49:17" pos:end="49:18">-&gt;</operator><name pos:start="49:19" pos:end="49:23">avctx</name></name></expr></argument>, <argument pos:start="49:26" pos:end="49:37"><expr pos:start="49:26" pos:end="49:37"><name pos:start="49:26" pos:end="49:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:40" pos:end="49:82"><expr pos:start="49:40" pos:end="49:82"><literal type="string" pos:start="49:40" pos:end="49:82">"illegal mb_num in video packet (%d %d) \n"</literal></expr></argument>, <argument pos:start="49:85" pos:end="49:90"><expr pos:start="49:85" pos:end="49:90"><name pos:start="49:85" pos:end="49:90">mb_num</name></expr></argument>, <argument pos:start="49:93" pos:end="49:101"><expr pos:start="49:93" pos:end="49:101"><name pos:start="49:93" pos:end="49:101"><name pos:start="49:93" pos:end="49:93">s</name><operator pos:start="49:94" pos:end="49:95">-&gt;</operator><name pos:start="49:96" pos:end="49:101">mb_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:18">return <expr pos:start="51:16" pos:end="51:17"><operator pos:start="51:16" pos:end="51:16">-</operator><literal type="number" pos:start="51:17" pos:end="51:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:34"><expr pos:start="57:5" pos:end="57:33"><name pos:start="57:5" pos:end="57:11"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:11">mb_x</name></name><operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:19">mb_num</name> <operator pos:start="57:21" pos:end="57:21">%</operator> <name pos:start="57:23" pos:end="57:33"><name pos:start="57:23" pos:end="57:23">s</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:33">mb_width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:34"><expr pos:start="59:5" pos:end="59:33"><name pos:start="59:5" pos:end="59:11"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:11">mb_y</name></name><operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:19">mb_num</name> <operator pos:start="59:21" pos:end="59:21">/</operator> <name pos:start="59:23" pos:end="59:33"><name pos:start="59:23" pos:end="59:23">s</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:33">mb_width</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if<condition pos:start="63:7" pos:end="63:34">(<expr pos:start="63:8" pos:end="63:33"><name pos:start="63:8" pos:end="63:15"><name pos:start="63:8" pos:end="63:8">s</name><operator pos:start="63:9" pos:end="63:10">-&gt;</operator><name pos:start="63:11" pos:end="63:15">shape</name></name> <operator pos:start="63:17" pos:end="63:18">!=</operator> <name pos:start="63:20" pos:end="63:33">BIN_ONLY_SHAPE</name></expr>)</condition><block pos:start="63:35" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:47">

        <decl_stmt pos:start="65:9" pos:end="65:57"><decl pos:start="65:9" pos:end="65:56"><type pos:start="65:9" pos:end="65:11"><name pos:start="65:9" pos:end="65:11">int</name></type> <name pos:start="65:13" pos:end="65:18">qscale</name><init pos:start="65:19" pos:end="65:56">= <expr pos:start="65:21" pos:end="65:56"><call pos:start="65:21" pos:end="65:56"><name pos:start="65:21" pos:end="65:28">get_bits</name><argument_list pos:start="65:29" pos:end="65:56">(<argument pos:start="65:30" pos:end="65:35"><expr pos:start="65:30" pos:end="65:35"><operator pos:start="65:30" pos:end="65:30">&amp;</operator><name pos:start="65:31" pos:end="65:35"><name pos:start="65:31" pos:end="65:31">s</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:35">gb</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:55"><expr pos:start="65:38" pos:end="65:55"><name pos:start="65:38" pos:end="65:55"><name pos:start="65:38" pos:end="65:38">s</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:55">quant_precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="67:9" pos:end="69:47"><if pos:start="67:9" pos:end="69:47">if<condition pos:start="67:11" pos:end="67:18">(<expr pos:start="67:12" pos:end="67:17"><name pos:start="67:12" pos:end="67:17">qscale</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:47"><block_content pos:start="69:13" pos:end="69:47">

            <expr_stmt pos:start="69:13" pos:end="69:47"><expr pos:start="69:13" pos:end="69:46"><name pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:28">chroma_qscale</name></name><operator pos:start="69:29" pos:end="69:29">=</operator><name pos:start="69:30" pos:end="69:38"><name pos:start="69:30" pos:end="69:30">s</name><operator pos:start="69:31" pos:end="69:32">-&gt;</operator><name pos:start="69:33" pos:end="69:38">qscale</name></name><operator pos:start="69:39" pos:end="69:39">=</operator> <name pos:start="69:41" pos:end="69:46">qscale</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if<condition pos:start="75:7" pos:end="75:30">(<expr pos:start="75:8" pos:end="75:29"><name pos:start="75:8" pos:end="75:15"><name pos:start="75:8" pos:end="75:8">s</name><operator pos:start="75:9" pos:end="75:10">-&gt;</operator><name pos:start="75:11" pos:end="75:15">shape</name></name> <operator pos:start="75:17" pos:end="75:18">==</operator> <name pos:start="75:20" pos:end="75:29">RECT_SHAPE</name></expr>)</condition><block pos:start="75:31" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:44">

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:24">header_extension</name><operator pos:start="77:25" pos:end="77:25">=</operator> <call pos:start="77:27" pos:end="77:43"><name pos:start="77:27" pos:end="77:35">get_bits1</name><argument_list pos:start="77:36" pos:end="77:43">(<argument pos:start="77:37" pos:end="77:42"><expr pos:start="77:37" pos:end="77:42"><operator pos:start="77:37" pos:end="77:37">&amp;</operator><name pos:start="77:38" pos:end="77:42"><name pos:start="77:38" pos:end="77:38">s</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:42">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="153:5"><if pos:start="81:5" pos:end="153:5">if<condition pos:start="81:7" pos:end="81:24">(<expr pos:start="81:8" pos:end="81:23"><name pos:start="81:8" pos:end="81:23">header_extension</name></expr>)</condition><block pos:start="81:25" pos:end="153:5">{<block_content pos:start="83:9" pos:end="151:9">

        <decl_stmt pos:start="83:9" pos:end="83:24"><decl pos:start="83:9" pos:end="83:23"><type pos:start="83:9" pos:end="83:11"><name pos:start="83:9" pos:end="83:11">int</name></type> <name pos:start="83:13" pos:end="83:21">time_incr</name><init pos:start="83:22" pos:end="83:23">=<expr pos:start="83:23" pos:end="83:23"><literal type="number" pos:start="83:23" pos:end="83:23">0</literal></expr></init></decl>;</decl_stmt>



        <while pos:start="87:9" pos:end="89:24">while <condition pos:start="87:15" pos:end="87:38">(<expr pos:start="87:16" pos:end="87:37"><call pos:start="87:16" pos:end="87:32"><name pos:start="87:16" pos:end="87:24">get_bits1</name><argument_list pos:start="87:25" pos:end="87:32">(<argument pos:start="87:26" pos:end="87:31"><expr pos:start="87:26" pos:end="87:31"><operator pos:start="87:26" pos:end="87:26">&amp;</operator><name pos:start="87:27" pos:end="87:31"><name pos:start="87:27" pos:end="87:27">s</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:31">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="87:34" pos:end="87:35">!=</operator> <literal type="number" pos:start="87:37" pos:end="87:37">0</literal></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:24"><block_content pos:start="89:13" pos:end="89:24">

            <expr_stmt pos:start="89:13" pos:end="89:24"><expr pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:21">time_incr</name><operator pos:start="89:22" pos:end="89:23">++</operator></expr>;</expr_stmt></block_content></block></while>



        <expr_stmt pos:start="93:9" pos:end="93:77"><expr pos:start="93:9" pos:end="93:76"><call pos:start="93:9" pos:end="93:76"><name pos:start="93:9" pos:end="93:20">check_marker</name><argument_list pos:start="93:21" pos:end="93:76">(<argument pos:start="93:22" pos:end="93:27"><expr pos:start="93:22" pos:end="93:27"><operator pos:start="93:22" pos:end="93:22">&amp;</operator><name pos:start="93:23" pos:end="93:27"><name pos:start="93:23" pos:end="93:23">s</name><operator pos:start="93:24" pos:end="93:25">-&gt;</operator><name pos:start="93:26" pos:end="93:27">gb</name></name></expr></argument>, <argument pos:start="93:30" pos:end="93:75"><expr pos:start="93:30" pos:end="93:75"><literal type="string" pos:start="93:30" pos:end="93:75">"before time_increment in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:50"><expr pos:start="95:9" pos:end="95:49"><call pos:start="95:9" pos:end="95:49"><name pos:start="95:9" pos:end="95:17">skip_bits</name><argument_list pos:start="95:18" pos:end="95:49">(<argument pos:start="95:19" pos:end="95:24"><expr pos:start="95:19" pos:end="95:24"><operator pos:start="95:19" pos:end="95:19">&amp;</operator><name pos:start="95:20" pos:end="95:24"><name pos:start="95:20" pos:end="95:20">s</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:24">gb</name></name></expr></argument>, <argument pos:start="95:27" pos:end="95:48"><expr pos:start="95:27" pos:end="95:48"><name pos:start="95:27" pos:end="95:48"><name pos:start="95:27" pos:end="95:27">s</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:48">time_increment_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="95:52" pos:end="95:71">/* time_increment */</comment>

        <expr_stmt pos:start="97:9" pos:end="97:78"><expr pos:start="97:9" pos:end="97:77"><call pos:start="97:9" pos:end="97:77"><name pos:start="97:9" pos:end="97:20">check_marker</name><argument_list pos:start="97:21" pos:end="97:77">(<argument pos:start="97:22" pos:end="97:27"><expr pos:start="97:22" pos:end="97:27"><operator pos:start="97:22" pos:end="97:22">&amp;</operator><name pos:start="97:23" pos:end="97:27"><name pos:start="97:23" pos:end="97:23">s</name><operator pos:start="97:24" pos:end="97:25">-&gt;</operator><name pos:start="97:26" pos:end="97:27">gb</name></name></expr></argument>, <argument pos:start="97:30" pos:end="97:76"><expr pos:start="97:30" pos:end="97:76"><literal type="string" pos:start="97:30" pos:end="97:76">"before vop_coding_type in video packed header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:29"><expr pos:start="101:9" pos:end="101:28"><call pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:17">skip_bits</name><argument_list pos:start="101:18" pos:end="101:28">(<argument pos:start="101:19" pos:end="101:24"><expr pos:start="101:19" pos:end="101:24"><operator pos:start="101:19" pos:end="101:19">&amp;</operator><name pos:start="101:20" pos:end="101:24"><name pos:start="101:20" pos:end="101:20">s</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:24">gb</name></name></expr></argument>, <argument pos:start="101:27" pos:end="101:27"><expr pos:start="101:27" pos:end="101:27"><literal type="number" pos:start="101:27" pos:end="101:27">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="101:31" pos:end="101:51">/* vop coding type */</comment>

        <comment type="line" pos:start="103:9" pos:end="103:35">//FIXME not rect stuff here</comment>



        <if_stmt pos:start="107:9" pos:end="151:9"><if pos:start="107:9" pos:end="151:9">if<condition pos:start="107:11" pos:end="107:38">(<expr pos:start="107:12" pos:end="107:37"><name pos:start="107:12" pos:end="107:19"><name pos:start="107:12" pos:end="107:12">s</name><operator pos:start="107:13" pos:end="107:14">-&gt;</operator><name pos:start="107:15" pos:end="107:19">shape</name></name> <operator pos:start="107:21" pos:end="107:22">!=</operator> <name pos:start="107:24" pos:end="107:37">BIN_ONLY_SHAPE</name></expr>)</condition><block pos:start="107:39" pos:end="151:9">{<block_content pos:start="109:13" pos:end="149:13">

            <expr_stmt pos:start="109:13" pos:end="109:33"><expr pos:start="109:13" pos:end="109:32"><call pos:start="109:13" pos:end="109:32"><name pos:start="109:13" pos:end="109:21">skip_bits</name><argument_list pos:start="109:22" pos:end="109:32">(<argument pos:start="109:23" pos:end="109:28"><expr pos:start="109:23" pos:end="109:28"><operator pos:start="109:23" pos:end="109:23">&amp;</operator><name pos:start="109:24" pos:end="109:28"><name pos:start="109:24" pos:end="109:24">s</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:28">gb</name></name></expr></argument>, <argument pos:start="109:31" pos:end="109:31"><expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="109:35" pos:end="109:62">/* intra dc vlc threshold */</comment>

<comment type="line" pos:start="111:1" pos:end="111:36">//FIXME don't just ignore everything</comment>

            <if_stmt pos:start="113:13" pos:end="119:13"><if pos:start="113:13" pos:end="119:13">if<condition pos:start="113:15" pos:end="113:84">(<expr pos:start="113:16" pos:end="113:83"><name pos:start="113:16" pos:end="113:27"><name pos:start="113:16" pos:end="113:16">s</name><operator pos:start="113:17" pos:end="113:18">-&gt;</operator><name pos:start="113:19" pos:end="113:27">pict_type</name></name> <operator pos:start="113:29" pos:end="113:30">==</operator> <name pos:start="113:32" pos:end="113:48">AV_PICTURE_TYPE_S</name> <operator pos:start="113:50" pos:end="113:51">&amp;&amp;</operator> <name pos:start="113:53" pos:end="113:71"><name pos:start="113:53" pos:end="113:53">s</name><operator pos:start="113:54" pos:end="113:55">-&gt;</operator><name pos:start="113:56" pos:end="113:71">vol_sprite_usage</name></name><operator pos:start="113:72" pos:end="113:73">==</operator><name pos:start="113:74" pos:end="113:83">GMC_SPRITE</name></expr>)</condition><block pos:start="113:85" pos:end="119:13">{<block_content pos:start="115:17" pos:end="117:61">

                <expr_stmt pos:start="115:17" pos:end="115:58"><expr pos:start="115:17" pos:end="115:57"><call pos:start="115:17" pos:end="115:57"><name pos:start="115:17" pos:end="115:46">mpeg4_decode_sprite_trajectory</name><argument_list pos:start="115:47" pos:end="115:57">(<argument pos:start="115:48" pos:end="115:48"><expr pos:start="115:48" pos:end="115:48"><name pos:start="115:48" pos:end="115:48">s</name></expr></argument>, <argument pos:start="115:51" pos:end="115:56"><expr pos:start="115:51" pos:end="115:56"><operator pos:start="115:51" pos:end="115:51">&amp;</operator><name pos:start="115:52" pos:end="115:56"><name pos:start="115:52" pos:end="115:52">s</name><operator pos:start="115:53" pos:end="115:54">-&gt;</operator><name pos:start="115:55" pos:end="115:56">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="117:17" pos:end="117:61"><expr pos:start="117:17" pos:end="117:60"><call pos:start="117:17" pos:end="117:60"><name pos:start="117:17" pos:end="117:22">av_log</name><argument_list pos:start="117:23" pos:end="117:60">(<argument pos:start="117:24" pos:end="117:31"><expr pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:31"><name pos:start="117:24" pos:end="117:24">s</name><operator pos:start="117:25" pos:end="117:26">-&gt;</operator><name pos:start="117:27" pos:end="117:31">avctx</name></name></expr></argument>, <argument pos:start="117:34" pos:end="117:45"><expr pos:start="117:34" pos:end="117:45"><name pos:start="117:34" pos:end="117:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:48" pos:end="117:59"><expr pos:start="117:48" pos:end="117:59"><literal type="string" pos:start="117:48" pos:end="117:59">"untested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="line" pos:start="123:13" pos:end="123:42">//FIXME reduced res stuff here</comment>



            <if_stmt pos:start="127:13" pos:end="137:13"><if pos:start="127:13" pos:end="137:13">if <condition pos:start="127:16" pos:end="127:50">(<expr pos:start="127:17" pos:end="127:49"><name pos:start="127:17" pos:end="127:28"><name pos:start="127:17" pos:end="127:17">s</name><operator pos:start="127:18" pos:end="127:19">-&gt;</operator><name pos:start="127:20" pos:end="127:28">pict_type</name></name> <operator pos:start="127:30" pos:end="127:31">!=</operator> <name pos:start="127:33" pos:end="127:49">AV_PICTURE_TYPE_I</name></expr>)</condition> <block pos:start="127:52" pos:end="137:13">{<block_content pos:start="129:17" pos:end="135:17">

                <decl_stmt pos:start="129:17" pos:end="129:49"><decl pos:start="129:17" pos:end="129:48"><type pos:start="129:17" pos:end="129:19"><name pos:start="129:17" pos:end="129:19">int</name></type> <name pos:start="129:21" pos:end="129:26">f_code</name> <init pos:start="129:28" pos:end="129:48">= <expr pos:start="129:30" pos:end="129:48"><call pos:start="129:30" pos:end="129:48"><name pos:start="129:30" pos:end="129:37">get_bits</name><argument_list pos:start="129:38" pos:end="129:48">(<argument pos:start="129:39" pos:end="129:44"><expr pos:start="129:39" pos:end="129:44"><operator pos:start="129:39" pos:end="129:39">&amp;</operator><name pos:start="129:40" pos:end="129:44"><name pos:start="129:40" pos:end="129:40">s</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:44">gb</name></name></expr></argument>, <argument pos:start="129:47" pos:end="129:47"><expr pos:start="129:47" pos:end="129:47"><literal type="number" pos:start="129:47" pos:end="129:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>       <comment type="block" pos:start="129:57" pos:end="129:71">/* fcode_for */</comment>

                <if_stmt pos:start="131:17" pos:end="135:17"><if pos:start="131:17" pos:end="135:17">if<condition pos:start="131:19" pos:end="131:29">(<expr pos:start="131:20" pos:end="131:28"><name pos:start="131:20" pos:end="131:25">f_code</name><operator pos:start="131:26" pos:end="131:27">==</operator><literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>)</condition><block pos:start="131:30" pos:end="135:17">{<block_content pos:start="133:21" pos:end="133:102">

                    <expr_stmt pos:start="133:21" pos:end="133:102"><expr pos:start="133:21" pos:end="133:101"><call pos:start="133:21" pos:end="133:101"><name pos:start="133:21" pos:end="133:26">av_log</name><argument_list pos:start="133:27" pos:end="133:101">(<argument pos:start="133:28" pos:end="133:35"><expr pos:start="133:28" pos:end="133:35"><name pos:start="133:28" pos:end="133:35"><name pos:start="133:28" pos:end="133:28">s</name><operator pos:start="133:29" pos:end="133:30">-&gt;</operator><name pos:start="133:31" pos:end="133:35">avctx</name></name></expr></argument>, <argument pos:start="133:38" pos:end="133:49"><expr pos:start="133:38" pos:end="133:49"><name pos:start="133:38" pos:end="133:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="133:52" pos:end="133:100"><expr pos:start="133:52" pos:end="133:100"><literal type="string" pos:start="133:52" pos:end="133:100">"Error, video packet header damaged (f_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="139:13" pos:end="149:13"><if pos:start="139:13" pos:end="149:13">if <condition pos:start="139:16" pos:end="139:50">(<expr pos:start="139:17" pos:end="139:49"><name pos:start="139:17" pos:end="139:28"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:28">pict_type</name></name> <operator pos:start="139:30" pos:end="139:31">==</operator> <name pos:start="139:33" pos:end="139:49">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="139:52" pos:end="149:13">{<block_content pos:start="141:17" pos:end="147:17">

                <decl_stmt pos:start="141:17" pos:end="141:49"><decl pos:start="141:17" pos:end="141:48"><type pos:start="141:17" pos:end="141:19"><name pos:start="141:17" pos:end="141:19">int</name></type> <name pos:start="141:21" pos:end="141:26">b_code</name> <init pos:start="141:28" pos:end="141:48">= <expr pos:start="141:30" pos:end="141:48"><call pos:start="141:30" pos:end="141:48"><name pos:start="141:30" pos:end="141:37">get_bits</name><argument_list pos:start="141:38" pos:end="141:48">(<argument pos:start="141:39" pos:end="141:44"><expr pos:start="141:39" pos:end="141:44"><operator pos:start="141:39" pos:end="141:39">&amp;</operator><name pos:start="141:40" pos:end="141:44"><name pos:start="141:40" pos:end="141:40">s</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:44">gb</name></name></expr></argument>, <argument pos:start="141:47" pos:end="141:47"><expr pos:start="141:47" pos:end="141:47"><literal type="number" pos:start="141:47" pos:end="141:47">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="143:17" pos:end="147:17"><if pos:start="143:17" pos:end="147:17">if<condition pos:start="143:19" pos:end="143:29">(<expr pos:start="143:20" pos:end="143:28"><name pos:start="143:20" pos:end="143:25">b_code</name><operator pos:start="143:26" pos:end="143:27">==</operator><literal type="number" pos:start="143:28" pos:end="143:28">0</literal></expr>)</condition><block pos:start="143:30" pos:end="147:17">{<block_content pos:start="145:21" pos:end="145:102">

                    <expr_stmt pos:start="145:21" pos:end="145:102"><expr pos:start="145:21" pos:end="145:101"><call pos:start="145:21" pos:end="145:101"><name pos:start="145:21" pos:end="145:26">av_log</name><argument_list pos:start="145:27" pos:end="145:101">(<argument pos:start="145:28" pos:end="145:35"><expr pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:35"><name pos:start="145:28" pos:end="145:28">s</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:35">avctx</name></name></expr></argument>, <argument pos:start="145:38" pos:end="145:49"><expr pos:start="145:38" pos:end="145:49"><name pos:start="145:38" pos:end="145:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:52" pos:end="145:100"><expr pos:start="145:52" pos:end="145:100"><literal type="string" pos:start="145:52" pos:end="145:100">"Error, video packet header damaged (b_code=0)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="line" pos:start="155:5" pos:end="155:26">//FIXME new-pred stuff</comment>



    <return pos:start="159:5" pos:end="159:13">return <expr pos:start="159:12" pos:end="159:12"><literal type="number" pos:start="159:12" pos:end="159:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
