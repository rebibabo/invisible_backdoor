<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3367.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">mips_fulong2e_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:43">MachineState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:52">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="261:1">{<block_content pos:start="5:5" pos:end="259:26">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:35">address_space_mem</name> <init pos:start="17:37" pos:end="17:57">= <expr pos:start="17:39" pos:end="17:57"><call pos:start="17:39" pos:end="17:57"><name pos:start="17:39" pos:end="17:55">get_system_memory</name><argument_list pos:start="17:56" pos:end="17:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">ram</name> <init pos:start="19:23" pos:end="19:46">= <expr pos:start="19:25" pos:end="19:46"><call pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:29">g_new</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><name pos:start="19:31" pos:end="19:42">MemoryRegion</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:48"><decl pos:start="21:5" pos:end="21:47"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:22">bios</name> <init pos:start="21:24" pos:end="21:47">= <expr pos:start="21:26" pos:end="21:47"><call pos:start="21:26" pos:end="21:47"><name pos:start="21:26" pos:end="21:30">g_new</name><argument_list pos:start="21:31" pos:end="21:47">(<argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">MemoryRegion</name></expr></argument>, <argument pos:start="21:46" pos:end="21:46"><expr pos:start="21:46" pos:end="21:46"><literal type="number" pos:start="21:46" pos:end="21:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">long</name></type> <name pos:start="23:10" pos:end="23:18">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">int64_t</name></type> <name pos:start="25:13" pos:end="25:24">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">PCIBus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:10">ISABus</name> <modifier pos:start="33:12" pos:end="33:12">*</modifier></type><name pos:start="33:13" pos:end="33:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:10">I2CBus</name> <modifier pos:start="35:12" pos:end="35:12">*</modifier></type><name pos:start="35:13" pos:end="35:17">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:45"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:45"><name pos:start="37:16" pos:end="37:17">hd</name><index pos:start="37:18" pos:end="37:45">[<expr pos:start="37:19" pos:end="37:44"><name pos:start="37:19" pos:end="37:29">MAX_IDE_BUS</name> <operator pos:start="37:31" pos:end="37:31">*</operator> <name pos:start="37:33" pos:end="37:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:17"><decl pos:start="39:5" pos:end="39:16"><type pos:start="39:5" pos:end="39:13"><name pos:start="39:5" pos:end="39:11">MIPSCPU</name> <modifier pos:start="39:13" pos:end="39:13">*</modifier></type><name pos:start="39:14" pos:end="39:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:22"><decl pos:start="41:5" pos:end="41:21"><type pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:16">CPUMIPSState</name> <modifier pos:start="41:18" pos:end="41:18">*</modifier></type><name pos:start="41:19" pos:end="41:21">env</name></decl>;</decl_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:19">/* init CPUs */</comment>

    <if_stmt pos:start="47:5" pos:end="51:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:26">(<expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:17">cpu_model</name> <operator pos:start="47:19" pos:end="47:20">==</operator> <name pos:start="47:22" pos:end="47:25">NULL</name></expr>)</condition> <block pos:start="47:28" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:34">

        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:17">cpu_model</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <literal type="string" pos:start="49:21" pos:end="49:33">"Loongson-2E"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:35"><expr pos:start="53:5" pos:end="53:34"><name pos:start="53:5" pos:end="53:7">cpu</name> <operator pos:start="53:9" pos:end="53:9">=</operator> <call pos:start="53:11" pos:end="53:34"><name pos:start="53:11" pos:end="53:23">cpu_mips_init</name><argument_list pos:start="53:24" pos:end="53:34">(<argument pos:start="53:25" pos:end="53:33"><expr pos:start="53:25" pos:end="53:33"><name pos:start="53:25" pos:end="53:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:20">(<expr pos:start="55:9" pos:end="55:19"><name pos:start="55:9" pos:end="55:11">cpu</name> <operator pos:start="55:13" pos:end="55:14">==</operator> <name pos:start="55:16" pos:end="55:19">NULL</name></expr>)</condition> <block pos:start="55:22" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:16">

        <expr_stmt pos:start="57:9" pos:end="57:59"><expr pos:start="57:9" pos:end="57:58"><call pos:start="57:9" pos:end="57:58"><name pos:start="57:9" pos:end="57:15">fprintf</name><argument_list pos:start="57:16" pos:end="57:58">(<argument pos:start="57:17" pos:end="57:22"><expr pos:start="57:17" pos:end="57:22"><name pos:start="57:17" pos:end="57:22">stderr</name></expr></argument>, <argument pos:start="57:25" pos:end="57:57"><expr pos:start="57:25" pos:end="57:57"><literal type="string" pos:start="57:25" pos:end="57:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:12">exit</name><argument_list pos:start="59:13" pos:end="59:15">(<argument pos:start="59:14" pos:end="59:14"><expr pos:start="59:14" pos:end="59:14"><literal type="number" pos:start="59:14" pos:end="59:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:7">env</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <operator pos:start="63:11" pos:end="63:11">&amp;</operator><name pos:start="63:12" pos:end="63:19"><name pos:start="63:12" pos:end="63:14">cpu</name><operator pos:start="63:15" pos:end="63:16">-&gt;</operator><name pos:start="63:17" pos:end="63:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:45"><expr pos:start="67:5" pos:end="67:44"><call pos:start="67:5" pos:end="67:44"><name pos:start="67:5" pos:end="67:23">qemu_register_reset</name><argument_list pos:start="67:24" pos:end="67:44">(<argument pos:start="67:25" pos:end="67:38"><expr pos:start="67:25" pos:end="67:38"><name pos:start="67:25" pos:end="67:38">main_cpu_reset</name></expr></argument>, <argument pos:start="67:41" pos:end="67:43"><expr pos:start="67:41" pos:end="67:43"><name pos:start="67:41" pos:end="67:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:33">/* fulong 2e has 256M ram. */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:12">ram_size</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <literal type="number" pos:start="73:16" pos:end="73:18">256</literal> <operator pos:start="73:20" pos:end="73:20">*</operator> <literal type="number" pos:start="73:22" pos:end="73:25">1024</literal> <operator pos:start="73:27" pos:end="73:27">*</operator> <literal type="number" pos:start="73:29" pos:end="73:32">1024</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:55">/* fulong 2e has a 1M flash.Winbond W39L040AP70Z */</comment>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:13">bios_size</name> <operator pos:start="79:15" pos:end="79:15">=</operator> <literal type="number" pos:start="79:17" pos:end="79:20">1024</literal> <operator pos:start="79:22" pos:end="79:22">*</operator> <literal type="number" pos:start="79:24" pos:end="79:27">1024</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="83:5" pos:end="83:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:78"><expr pos:start="85:5" pos:end="85:77"><call pos:start="85:5" pos:end="85:77"><name pos:start="85:5" pos:end="85:40">memory_region_allocate_system_memory</name><argument_list pos:start="85:41" pos:end="85:77">(<argument pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:44">ram</name></expr></argument>, <argument pos:start="85:47" pos:end="85:50"><expr pos:start="85:47" pos:end="85:50"><name pos:start="85:47" pos:end="85:50">NULL</name></expr></argument>, <argument pos:start="85:53" pos:end="85:66"><expr pos:start="85:53" pos:end="85:66"><literal type="string" pos:start="85:53" pos:end="85:66">"fulong2e.ram"</literal></expr></argument>, <argument pos:start="85:69" pos:end="85:76"><expr pos:start="85:69" pos:end="85:76"><name pos:start="85:69" pos:end="85:76">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="89:41"><expr pos:start="87:5" pos:end="89:40"><call pos:start="87:5" pos:end="89:40"><name pos:start="87:5" pos:end="87:26">memory_region_init_ram</name><argument_list pos:start="87:27" pos:end="89:40">(<argument pos:start="87:28" pos:end="87:31"><expr pos:start="87:28" pos:end="87:31"><name pos:start="87:28" pos:end="87:31">bios</name></expr></argument>, <argument pos:start="87:34" pos:end="87:37"><expr pos:start="87:34" pos:end="87:37"><name pos:start="87:34" pos:end="87:37">NULL</name></expr></argument>, <argument pos:start="87:40" pos:end="87:54"><expr pos:start="87:40" pos:end="87:54"><literal type="string" pos:start="87:40" pos:end="87:54">"fulong2e.bios"</literal></expr></argument>, <argument pos:start="87:57" pos:end="87:65"><expr pos:start="87:57" pos:end="87:65"><name pos:start="87:57" pos:end="87:65">bios_size</name></expr></argument>,

                           <argument pos:start="89:28" pos:end="89:39"><expr pos:start="89:28" pos:end="89:39"><operator pos:start="89:28" pos:end="89:28">&amp;</operator><name pos:start="89:29" pos:end="89:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:38"><expr pos:start="91:5" pos:end="91:37"><call pos:start="91:5" pos:end="91:37"><name pos:start="91:5" pos:end="91:31">vmstate_register_ram_global</name><argument_list pos:start="91:32" pos:end="91:37">(<argument pos:start="91:33" pos:end="91:36"><expr pos:start="91:33" pos:end="91:36"><name pos:start="91:33" pos:end="91:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><call pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:30">memory_region_set_readonly</name><argument_list pos:start="93:31" pos:end="93:42">(<argument pos:start="93:32" pos:end="93:35"><expr pos:start="93:32" pos:end="93:35"><name pos:start="93:32" pos:end="93:35">bios</name></expr></argument>, <argument pos:start="93:38" pos:end="93:41"><expr pos:start="93:38" pos:end="93:41"><name pos:start="93:38" pos:end="93:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:59"><expr pos:start="97:5" pos:end="97:58"><call pos:start="97:5" pos:end="97:58"><name pos:start="97:5" pos:end="97:31">memory_region_add_subregion</name><argument_list pos:start="97:32" pos:end="97:58">(<argument pos:start="97:33" pos:end="97:49"><expr pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:49">address_space_mem</name></expr></argument>, <argument pos:start="97:52" pos:end="97:52"><expr pos:start="97:52" pos:end="97:52"><literal type="number" pos:start="97:52" pos:end="97:52">0</literal></expr></argument>, <argument pos:start="97:55" pos:end="97:57"><expr pos:start="97:55" pos:end="97:57"><name pos:start="97:55" pos:end="97:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:71"><expr pos:start="99:5" pos:end="99:70"><call pos:start="99:5" pos:end="99:70"><name pos:start="99:5" pos:end="99:31">memory_region_add_subregion</name><argument_list pos:start="99:32" pos:end="99:70">(<argument pos:start="99:33" pos:end="99:49"><expr pos:start="99:33" pos:end="99:49"><name pos:start="99:33" pos:end="99:49">address_space_mem</name></expr></argument>, <argument pos:start="99:52" pos:end="99:63"><expr pos:start="99:52" pos:end="99:63"><literal type="number" pos:start="99:52" pos:end="99:63">0x1fc00000LL</literal></expr></argument>, <argument pos:start="99:66" pos:end="99:69"><expr pos:start="99:66" pos:end="99:69"><name pos:start="99:66" pos:end="99:69">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="105:72">/* We do not support flash operation, just loading pmon.bin as raw BIOS.

     * Please use -L to set the BIOS path and -bios to set bios name. */</comment>



    <if_stmt pos:start="109:5" pos:end="159:5"><if pos:start="109:5" pos:end="123:5">if <condition pos:start="109:8" pos:end="109:24">(<expr pos:start="109:9" pos:end="109:23"><name pos:start="109:9" pos:end="109:23">kernel_filename</name></expr>)</condition> <block pos:start="109:26" pos:end="123:5">{<block_content pos:start="111:9" pos:end="121:77">

        <expr_stmt pos:start="111:9" pos:end="111:41"><expr pos:start="111:9" pos:end="111:40"><name pos:start="111:9" pos:end="111:29"><name pos:start="111:9" pos:end="111:20">loaderparams</name><operator pos:start="111:21" pos:end="111:21">.</operator><name pos:start="111:22" pos:end="111:29">ram_size</name></name> <operator pos:start="111:31" pos:end="111:31">=</operator> <name pos:start="111:33" pos:end="111:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:55"><expr pos:start="113:9" pos:end="113:54"><name pos:start="113:9" pos:end="113:36"><name pos:start="113:9" pos:end="113:20">loaderparams</name><operator pos:start="113:21" pos:end="113:21">.</operator><name pos:start="113:22" pos:end="113:36">kernel_filename</name></name> <operator pos:start="113:38" pos:end="113:38">=</operator> <name pos:start="113:40" pos:end="113:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:53"><expr pos:start="115:9" pos:end="115:52"><name pos:start="115:9" pos:end="115:35"><name pos:start="115:9" pos:end="115:20">loaderparams</name><operator pos:start="115:21" pos:end="115:21">.</operator><name pos:start="115:22" pos:end="115:35">kernel_cmdline</name></name> <operator pos:start="115:37" pos:end="115:37">=</operator> <name pos:start="115:39" pos:end="115:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:55"><expr pos:start="117:9" pos:end="117:54"><name pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:20">loaderparams</name><operator pos:start="117:21" pos:end="117:21">.</operator><name pos:start="117:22" pos:end="117:36">initrd_filename</name></name> <operator pos:start="117:38" pos:end="117:38">=</operator> <name pos:start="117:40" pos:end="117:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:41"><expr pos:start="119:9" pos:end="119:40"><name pos:start="119:9" pos:end="119:20">kernel_entry</name> <operator pos:start="119:22" pos:end="119:22">=</operator> <call pos:start="119:24" pos:end="119:40"><name pos:start="119:24" pos:end="119:34">load_kernel</name> <argument_list pos:start="119:36" pos:end="119:40">(<argument pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><name pos:start="119:37" pos:end="119:39">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:77"><expr pos:start="121:9" pos:end="121:76"><call pos:start="121:9" pos:end="121:76"><name pos:start="121:9" pos:end="121:24">write_bootloader</name><argument_list pos:start="121:25" pos:end="121:76">(<argument pos:start="121:26" pos:end="121:28"><expr pos:start="121:26" pos:end="121:28"><name pos:start="121:26" pos:end="121:28">env</name></expr></argument>, <argument pos:start="121:31" pos:end="121:61"><expr pos:start="121:31" pos:end="121:61"><call pos:start="121:31" pos:end="121:61"><name pos:start="121:31" pos:end="121:55">memory_region_get_ram_ptr</name><argument_list pos:start="121:56" pos:end="121:61">(<argument pos:start="121:57" pos:end="121:60"><expr pos:start="121:57" pos:end="121:60"><name pos:start="121:57" pos:end="121:60">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="121:64" pos:end="121:75"><expr pos:start="121:64" pos:end="121:75"><name pos:start="121:64" pos:end="121:75">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="159:5">else <block pos:start="123:12" pos:end="159:5">{<block_content pos:start="125:9" pos:end="157:9">

        <if_stmt pos:start="125:9" pos:end="129:9"><if pos:start="125:9" pos:end="129:9">if <condition pos:start="125:12" pos:end="125:30">(<expr pos:start="125:13" pos:end="125:29"><name pos:start="125:13" pos:end="125:21">bios_name</name> <operator pos:start="125:23" pos:end="125:24">==</operator> <name pos:start="125:26" pos:end="125:29">NULL</name></expr>)</condition> <block pos:start="125:32" pos:end="129:9">{<block_content pos:start="127:17" pos:end="127:44">

                <expr_stmt pos:start="127:17" pos:end="127:44"><expr pos:start="127:17" pos:end="127:43"><name pos:start="127:17" pos:end="127:25">bios_name</name> <operator pos:start="127:27" pos:end="127:27">=</operator> <name pos:start="127:29" pos:end="127:43">FULONG_BIOSNAME</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:66"><expr pos:start="131:9" pos:end="131:65"><name pos:start="131:9" pos:end="131:16">filename</name> <operator pos:start="131:18" pos:end="131:18">=</operator> <call pos:start="131:20" pos:end="131:65"><name pos:start="131:20" pos:end="131:33">qemu_find_file</name><argument_list pos:start="131:34" pos:end="131:65">(<argument pos:start="131:35" pos:end="131:53"><expr pos:start="131:35" pos:end="131:53"><name pos:start="131:35" pos:end="131:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="131:56" pos:end="131:64"><expr pos:start="131:56" pos:end="131:64"><name pos:start="131:56" pos:end="131:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="133:9" pos:end="145:9"><if pos:start="133:9" pos:end="141:9">if <condition pos:start="133:12" pos:end="133:21">(<expr pos:start="133:13" pos:end="133:20"><name pos:start="133:13" pos:end="133:20">filename</name></expr>)</condition> <block pos:start="133:23" pos:end="141:9">{<block_content pos:start="135:13" pos:end="139:29">

            <expr_stmt pos:start="135:13" pos:end="137:55"><expr pos:start="135:13" pos:end="137:54"><name pos:start="135:13" pos:end="135:21">bios_size</name> <operator pos:start="135:23" pos:end="135:23">=</operator> <call pos:start="135:25" pos:end="137:54"><name pos:start="135:25" pos:end="135:43">load_image_targphys</name><argument_list pos:start="135:44" pos:end="137:54">(<argument pos:start="135:45" pos:end="135:52"><expr pos:start="135:45" pos:end="135:52"><name pos:start="135:45" pos:end="135:52">filename</name></expr></argument>, <argument pos:start="135:55" pos:end="135:66"><expr pos:start="135:55" pos:end="135:66"><literal type="number" pos:start="135:55" pos:end="135:66">0x1fc00000LL</literal></expr></argument>,

                                            <argument pos:start="137:45" pos:end="137:53"><expr pos:start="137:45" pos:end="137:53"><name pos:start="137:45" pos:end="137:53">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:29"><expr pos:start="139:13" pos:end="139:28"><call pos:start="139:13" pos:end="139:28"><name pos:start="139:13" pos:end="139:18">g_free</name><argument_list pos:start="139:19" pos:end="139:28">(<argument pos:start="139:20" pos:end="139:27"><expr pos:start="139:20" pos:end="139:27"><name pos:start="139:20" pos:end="139:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="141:11" pos:end="145:9">else <block pos:start="141:16" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:27">

            <expr_stmt pos:start="143:13" pos:end="143:27"><expr pos:start="143:13" pos:end="143:26"><name pos:start="143:13" pos:end="143:21">bios_size</name> <operator pos:start="143:23" pos:end="143:23">=</operator> <operator pos:start="143:25" pos:end="143:25">-</operator><literal type="number" pos:start="143:26" pos:end="143:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="149:9" pos:end="157:9"><if pos:start="149:9" pos:end="157:9">if <condition pos:start="149:12" pos:end="151:49">(<expr pos:start="149:13" pos:end="151:48"><operator pos:start="149:13" pos:end="149:13">(</operator><name pos:start="149:14" pos:end="149:41"><name pos:start="149:14" pos:end="149:22">bios_size</name> <argument_list type="generic" pos:start="149:24" pos:end="149:41">&lt; <argument pos:start="149:26" pos:end="149:39"><expr pos:start="149:26" pos:end="149:39"><literal type="number" pos:start="149:26" pos:end="149:26">0</literal> <operator pos:start="149:28" pos:end="149:29">||</operator> <name pos:start="149:31" pos:end="149:39">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="149:43" pos:end="149:51">BIOS_SIZE</name><operator pos:start="149:52" pos:end="149:52">)</operator> <operator pos:start="149:54" pos:end="149:55">&amp;&amp;</operator>

            <operator pos:start="151:13" pos:end="151:13">!</operator><name pos:start="151:14" pos:end="151:28">kernel_filename</name> <operator pos:start="151:30" pos:end="151:31">&amp;&amp;</operator> <operator pos:start="151:33" pos:end="151:33">!</operator><call pos:start="151:34" pos:end="151:48"><name pos:start="151:34" pos:end="151:46">qtest_enabled</name><argument_list pos:start="151:47" pos:end="151:48">()</argument_list></call></expr>)</condition> <block pos:start="151:51" pos:end="157:9">{<block_content pos:start="153:13" pos:end="155:20">

            <expr_stmt pos:start="153:13" pos:end="153:69"><expr pos:start="153:13" pos:end="153:68"><call pos:start="153:13" pos:end="153:68"><name pos:start="153:13" pos:end="153:24">error_report</name><argument_list pos:start="153:25" pos:end="153:68">(<argument pos:start="153:26" pos:end="153:56"><expr pos:start="153:26" pos:end="153:56"><literal type="string" pos:start="153:26" pos:end="153:56">"Could not load MIPS bios '%s'"</literal></expr></argument>, <argument pos:start="153:59" pos:end="153:67"><expr pos:start="153:59" pos:end="153:67"><name pos:start="153:59" pos:end="153:67">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:20"><expr pos:start="155:13" pos:end="155:19"><call pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:16">exit</name><argument_list pos:start="155:17" pos:end="155:19">(<argument pos:start="155:18" pos:end="155:18"><expr pos:start="155:18" pos:end="155:18"><literal type="number" pos:start="155:18" pos:end="155:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:31"><expr pos:start="165:5" pos:end="165:30"><call pos:start="165:5" pos:end="165:30"><name pos:start="165:5" pos:end="165:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="165:26" pos:end="165:30">(<argument pos:start="165:27" pos:end="165:29"><expr pos:start="165:27" pos:end="165:29"><name pos:start="165:27" pos:end="165:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:29"><expr pos:start="167:5" pos:end="167:28"><call pos:start="167:5" pos:end="167:28"><name pos:start="167:5" pos:end="167:23">cpu_mips_clock_init</name><argument_list pos:start="167:24" pos:end="167:28">(<argument pos:start="167:25" pos:end="167:27"><expr pos:start="167:25" pos:end="167:27"><name pos:start="167:25" pos:end="167:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:38">/* North bridge, Bonito --&gt; IP2 */</comment>

    <expr_stmt pos:start="173:5" pos:end="173:54"><expr pos:start="173:5" pos:end="173:53"><name pos:start="173:5" pos:end="173:11">pci_bus</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="173:53"><name pos:start="173:15" pos:end="173:25">bonito_init</name><argument_list pos:start="173:26" pos:end="173:53">(<argument pos:start="173:27" pos:end="173:52"><expr pos:start="173:27" pos:end="173:52"><operator pos:start="173:27" pos:end="173:27">(</operator><name pos:start="173:28" pos:end="173:35">qemu_irq</name> <operator pos:start="173:37" pos:end="173:37">*</operator><operator pos:start="173:38" pos:end="173:38">)</operator><operator pos:start="173:39" pos:end="173:39">&amp;</operator><operator pos:start="173:40" pos:end="173:40">(</operator><name pos:start="173:41" pos:end="173:51"><name pos:start="173:41" pos:end="173:43">env</name><operator pos:start="173:44" pos:end="173:45">-&gt;</operator><name pos:start="173:46" pos:end="173:48">irq</name><index pos:start="173:49" pos:end="173:51">[<expr pos:start="173:50" pos:end="173:50"><literal type="number" pos:start="173:50" pos:end="173:50">2</literal></expr>]</index></name><operator pos:start="173:52" pos:end="173:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:22">/* South bridge */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:38"><expr pos:start="179:5" pos:end="179:37"><call pos:start="179:5" pos:end="179:37"><name pos:start="179:5" pos:end="179:17">ide_drive_get</name><argument_list pos:start="179:18" pos:end="179:37">(<argument pos:start="179:19" pos:end="179:20"><expr pos:start="179:19" pos:end="179:20"><name pos:start="179:19" pos:end="179:20">hd</name></expr></argument>, <argument pos:start="179:23" pos:end="179:36"><expr pos:start="179:23" pos:end="179:36"><call pos:start="179:23" pos:end="179:36"><name pos:start="179:23" pos:end="179:32">ARRAY_SIZE</name><argument_list pos:start="179:33" pos:end="179:36">(<argument pos:start="179:34" pos:end="179:35"><expr pos:start="179:34" pos:end="179:35"><name pos:start="179:34" pos:end="179:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:71"><expr pos:start="183:5" pos:end="183:70"><name pos:start="183:5" pos:end="183:11">isa_bus</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="183:70"><name pos:start="183:15" pos:end="183:28">vt82c686b_init</name><argument_list pos:start="183:29" pos:end="183:70">(<argument pos:start="183:30" pos:end="183:36"><expr pos:start="183:30" pos:end="183:36"><name pos:start="183:30" pos:end="183:36">pci_bus</name></expr></argument>, <argument pos:start="183:39" pos:end="183:69"><expr pos:start="183:39" pos:end="183:69"><call pos:start="183:39" pos:end="183:69"><name pos:start="183:39" pos:end="183:47">PCI_DEVFN</name><argument_list pos:start="183:48" pos:end="183:69">(<argument pos:start="183:49" pos:end="183:65"><expr pos:start="183:49" pos:end="183:65"><name pos:start="183:49" pos:end="183:65">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="183:68" pos:end="183:68"><expr pos:start="183:68" pos:end="183:68"><literal type="number" pos:start="183:68" pos:end="183:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="185:5" pos:end="191:5"><if pos:start="185:5" pos:end="191:5">if <condition pos:start="185:8" pos:end="185:17">(<expr pos:start="185:9" pos:end="185:16"><operator pos:start="185:9" pos:end="185:9">!</operator><name pos:start="185:10" pos:end="185:16">isa_bus</name></expr>)</condition> <block pos:start="185:19" pos:end="191:5">{<block_content pos:start="187:9" pos:end="189:16">

        <expr_stmt pos:start="187:9" pos:end="187:50"><expr pos:start="187:9" pos:end="187:49"><call pos:start="187:9" pos:end="187:49"><name pos:start="187:9" pos:end="187:15">fprintf</name><argument_list pos:start="187:16" pos:end="187:49">(<argument pos:start="187:17" pos:end="187:22"><expr pos:start="187:17" pos:end="187:22"><name pos:start="187:17" pos:end="187:22">stderr</name></expr></argument>, <argument pos:start="187:25" pos:end="187:48"><expr pos:start="187:25" pos:end="187:48"><literal type="string" pos:start="187:25" pos:end="187:48">"vt82c686b_init error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:16"><expr pos:start="189:9" pos:end="189:15"><call pos:start="189:9" pos:end="189:15"><name pos:start="189:9" pos:end="189:12">exit</name><argument_list pos:start="189:13" pos:end="189:15">(<argument pos:start="189:14" pos:end="189:14"><expr pos:start="189:14" pos:end="189:14"><literal type="number" pos:start="189:14" pos:end="189:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="197:5" pos:end="197:26">/* The 8259 -&gt; IP5  */</comment>

    <expr_stmt pos:start="199:5" pos:end="199:45"><expr pos:start="199:5" pos:end="199:44"><name pos:start="199:5" pos:end="199:9">i8259</name> <operator pos:start="199:11" pos:end="199:11">=</operator> <call pos:start="199:13" pos:end="199:44"><name pos:start="199:13" pos:end="199:22">i8259_init</name><argument_list pos:start="199:23" pos:end="199:44">(<argument pos:start="199:24" pos:end="199:30"><expr pos:start="199:24" pos:end="199:30"><name pos:start="199:24" pos:end="199:30">isa_bus</name></expr></argument>, <argument pos:start="199:33" pos:end="199:43"><expr pos:start="199:33" pos:end="199:43"><name pos:start="199:33" pos:end="199:43"><name pos:start="199:33" pos:end="199:35">env</name><operator pos:start="199:36" pos:end="199:37">-&gt;</operator><name pos:start="199:38" pos:end="199:40">irq</name><index pos:start="199:41" pos:end="199:43">[<expr pos:start="199:42" pos:end="199:42"><literal type="number" pos:start="199:42" pos:end="199:42">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:33"><expr pos:start="201:5" pos:end="201:32"><call pos:start="201:5" pos:end="201:32"><name pos:start="201:5" pos:end="201:16">isa_bus_irqs</name><argument_list pos:start="201:17" pos:end="201:32">(<argument pos:start="201:18" pos:end="201:24"><expr pos:start="201:18" pos:end="201:24"><name pos:start="201:18" pos:end="201:24">isa_bus</name></expr></argument>, <argument pos:start="201:27" pos:end="201:31"><expr pos:start="201:27" pos:end="201:31"><name pos:start="201:27" pos:end="201:31">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:69"><expr pos:start="205:5" pos:end="205:68"><call pos:start="205:5" pos:end="205:68"><name pos:start="205:5" pos:end="205:22">vt82c686b_ide_init</name><argument_list pos:start="205:23" pos:end="205:68">(<argument pos:start="205:24" pos:end="205:30"><expr pos:start="205:24" pos:end="205:30"><name pos:start="205:24" pos:end="205:30">pci_bus</name></expr></argument>, <argument pos:start="205:33" pos:end="205:34"><expr pos:start="205:33" pos:end="205:34"><name pos:start="205:33" pos:end="205:34">hd</name></expr></argument>, <argument pos:start="205:37" pos:end="205:67"><expr pos:start="205:37" pos:end="205:67"><call pos:start="205:37" pos:end="205:67"><name pos:start="205:37" pos:end="205:45">PCI_DEVFN</name><argument_list pos:start="205:46" pos:end="205:67">(<argument pos:start="205:47" pos:end="205:63"><expr pos:start="205:47" pos:end="205:63"><name pos:start="205:47" pos:end="205:63">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="205:66" pos:end="205:66"><expr pos:start="205:66" pos:end="205:66"><literal type="number" pos:start="205:66" pos:end="205:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="209:44"><expr pos:start="207:5" pos:end="209:43"><call pos:start="207:5" pos:end="209:43"><name pos:start="207:5" pos:end="207:21">pci_create_simple</name><argument_list pos:start="207:22" pos:end="209:43">(<argument pos:start="207:23" pos:end="207:29"><expr pos:start="207:23" pos:end="207:29"><name pos:start="207:23" pos:end="207:29">pci_bus</name></expr></argument>, <argument pos:start="207:32" pos:end="207:62"><expr pos:start="207:32" pos:end="207:62"><call pos:start="207:32" pos:end="207:62"><name pos:start="207:32" pos:end="207:40">PCI_DEVFN</name><argument_list pos:start="207:41" pos:end="207:62">(<argument pos:start="207:42" pos:end="207:58"><expr pos:start="207:42" pos:end="207:58"><name pos:start="207:42" pos:end="207:58">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="207:61" pos:end="207:61"><expr pos:start="207:61" pos:end="207:61"><literal type="number" pos:start="207:61" pos:end="207:61">2</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="209:23" pos:end="209:42"><expr pos:start="209:23" pos:end="209:42"><literal type="string" pos:start="209:23" pos:end="209:42">"vt82c686b-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="213:44"><expr pos:start="211:5" pos:end="213:43"><call pos:start="211:5" pos:end="213:43"><name pos:start="211:5" pos:end="211:21">pci_create_simple</name><argument_list pos:start="211:22" pos:end="213:43">(<argument pos:start="211:23" pos:end="211:29"><expr pos:start="211:23" pos:end="211:29"><name pos:start="211:23" pos:end="211:29">pci_bus</name></expr></argument>, <argument pos:start="211:32" pos:end="211:62"><expr pos:start="211:32" pos:end="211:62"><call pos:start="211:32" pos:end="211:62"><name pos:start="211:32" pos:end="211:40">PCI_DEVFN</name><argument_list pos:start="211:41" pos:end="211:62">(<argument pos:start="211:42" pos:end="211:58"><expr pos:start="211:42" pos:end="211:58"><name pos:start="211:42" pos:end="211:58">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="211:61" pos:end="211:61"><expr pos:start="211:61" pos:end="211:61"><literal type="number" pos:start="211:61" pos:end="211:61">3</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="213:23" pos:end="213:42"><expr pos:start="213:23" pos:end="213:42"><literal type="string" pos:start="213:23" pos:end="213:42">"vt82c686b-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="217:5" pos:end="219:44"><expr pos:start="217:5" pos:end="219:43"><name pos:start="217:5" pos:end="217:9">smbus</name> <operator pos:start="217:11" pos:end="217:11">=</operator> <call pos:start="217:13" pos:end="219:43"><name pos:start="217:13" pos:end="217:29">vt82c686b_pm_init</name><argument_list pos:start="217:30" pos:end="219:43">(<argument pos:start="217:31" pos:end="217:37"><expr pos:start="217:31" pos:end="217:37"><name pos:start="217:31" pos:end="217:37">pci_bus</name></expr></argument>, <argument pos:start="217:40" pos:end="217:70"><expr pos:start="217:40" pos:end="217:70"><call pos:start="217:40" pos:end="217:70"><name pos:start="217:40" pos:end="217:48">PCI_DEVFN</name><argument_list pos:start="217:49" pos:end="217:70">(<argument pos:start="217:50" pos:end="217:66"><expr pos:start="217:50" pos:end="217:66"><name pos:start="217:50" pos:end="217:66">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="217:69" pos:end="217:69"><expr pos:start="217:69" pos:end="217:69"><literal type="number" pos:start="217:69" pos:end="217:69">4</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="219:31" pos:end="219:36"><expr pos:start="219:31" pos:end="219:36"><literal type="number" pos:start="219:31" pos:end="219:36">0xeee1</literal></expr></argument>, <argument pos:start="219:39" pos:end="219:42"><expr pos:start="219:39" pos:end="219:42"><name pos:start="219:39" pos:end="219:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="221:5" pos:end="221:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="223:5" pos:end="223:64"><expr pos:start="223:5" pos:end="223:63"><call pos:start="223:5" pos:end="223:63"><name pos:start="223:5" pos:end="223:21">smbus_eeprom_init</name><argument_list pos:start="223:22" pos:end="223:63">(<argument pos:start="223:23" pos:end="223:27"><expr pos:start="223:23" pos:end="223:27"><name pos:start="223:23" pos:end="223:27">smbus</name></expr></argument>, <argument pos:start="223:30" pos:end="223:30"><expr pos:start="223:30" pos:end="223:30"><literal type="number" pos:start="223:30" pos:end="223:30">1</literal></expr></argument>, <argument pos:start="223:33" pos:end="223:42"><expr pos:start="223:33" pos:end="223:42"><name pos:start="223:33" pos:end="223:42">eeprom_spd</name></expr></argument>, <argument pos:start="223:45" pos:end="223:62"><expr pos:start="223:45" pos:end="223:62"><sizeof pos:start="223:45" pos:end="223:62">sizeof<argument_list pos:start="223:51" pos:end="223:62">(<argument pos:start="223:52" pos:end="223:61"><expr pos:start="223:52" pos:end="223:61"><name pos:start="223:52" pos:end="223:61">eeprom_spd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="227:5" pos:end="227:28">/* init other devices */</comment>

    <expr_stmt pos:start="229:5" pos:end="229:43"><expr pos:start="229:5" pos:end="229:42"><name pos:start="229:5" pos:end="229:7">pit</name> <operator pos:start="229:9" pos:end="229:9">=</operator> <call pos:start="229:11" pos:end="229:42"><name pos:start="229:11" pos:end="229:18">pit_init</name><argument_list pos:start="229:19" pos:end="229:42">(<argument pos:start="229:20" pos:end="229:26"><expr pos:start="229:20" pos:end="229:26"><name pos:start="229:20" pos:end="229:26">isa_bus</name></expr></argument>, <argument pos:start="229:29" pos:end="229:32"><expr pos:start="229:29" pos:end="229:32"><literal type="number" pos:start="229:29" pos:end="229:32">0x40</literal></expr></argument>, <argument pos:start="229:35" pos:end="229:35"><expr pos:start="229:35" pos:end="229:35"><literal type="number" pos:start="229:35" pos:end="229:35">0</literal></expr></argument>, <argument pos:start="229:38" pos:end="229:41"><expr pos:start="229:38" pos:end="229:41"><name pos:start="229:38" pos:end="229:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:65"><expr pos:start="231:5" pos:end="231:64"><name pos:start="231:5" pos:end="231:16">cpu_exit_irq</name> <operator pos:start="231:18" pos:end="231:18">=</operator> <call pos:start="231:20" pos:end="231:64"><name pos:start="231:20" pos:end="231:37">qemu_allocate_irqs</name><argument_list pos:start="231:38" pos:end="231:64">(<argument pos:start="231:39" pos:end="231:54"><expr pos:start="231:39" pos:end="231:54"><name pos:start="231:39" pos:end="231:54">cpu_request_exit</name></expr></argument>, <argument pos:start="231:57" pos:end="231:60"><expr pos:start="231:57" pos:end="231:60"><name pos:start="231:57" pos:end="231:60">NULL</name></expr></argument>, <argument pos:start="231:63" pos:end="231:63"><expr pos:start="231:63" pos:end="231:63"><literal type="number" pos:start="231:63" pos:end="231:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:30"><expr pos:start="233:5" pos:end="233:29"><call pos:start="233:5" pos:end="233:29"><name pos:start="233:5" pos:end="233:12">DMA_init</name><argument_list pos:start="233:13" pos:end="233:29">(<argument pos:start="233:14" pos:end="233:14"><expr pos:start="233:14" pos:end="233:14"><literal type="number" pos:start="233:14" pos:end="233:14">0</literal></expr></argument>, <argument pos:start="233:17" pos:end="233:28"><expr pos:start="233:17" pos:end="233:28"><name pos:start="233:17" pos:end="233:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="237:5" pos:end="237:19">/* Super I/O */</comment>

    <expr_stmt pos:start="239:5" pos:end="239:40"><expr pos:start="239:5" pos:end="239:39"><call pos:start="239:5" pos:end="239:39"><name pos:start="239:5" pos:end="239:21">isa_create_simple</name><argument_list pos:start="239:22" pos:end="239:39">(<argument pos:start="239:23" pos:end="239:29"><expr pos:start="239:23" pos:end="239:29"><name pos:start="239:23" pos:end="239:29">isa_bus</name></expr></argument>, <argument pos:start="239:32" pos:end="239:38"><expr pos:start="239:32" pos:end="239:38"><literal type="string" pos:start="239:32" pos:end="239:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:34"><expr pos:start="243:5" pos:end="243:33"><call pos:start="243:5" pos:end="243:33"><name pos:start="243:5" pos:end="243:12">rtc_init</name><argument_list pos:start="243:13" pos:end="243:33">(<argument pos:start="243:14" pos:end="243:20"><expr pos:start="243:14" pos:end="243:20"><name pos:start="243:14" pos:end="243:20">isa_bus</name></expr></argument>, <argument pos:start="243:23" pos:end="243:26"><expr pos:start="243:23" pos:end="243:26"><literal type="number" pos:start="243:23" pos:end="243:26">2000</literal></expr></argument>, <argument pos:start="243:29" pos:end="243:32"><expr pos:start="243:29" pos:end="243:32"><name pos:start="243:29" pos:end="243:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:51"><expr pos:start="247:5" pos:end="247:50"><call pos:start="247:5" pos:end="247:50"><name pos:start="247:5" pos:end="247:23">serial_hds_isa_init</name><argument_list pos:start="247:24" pos:end="247:50">(<argument pos:start="247:25" pos:end="247:31"><expr pos:start="247:25" pos:end="247:31"><name pos:start="247:25" pos:end="247:31">isa_bus</name></expr></argument>, <argument pos:start="247:34" pos:end="247:49"><expr pos:start="247:34" pos:end="247:49"><name pos:start="247:34" pos:end="247:49">MAX_SERIAL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:38"><expr pos:start="249:5" pos:end="249:37"><call pos:start="249:5" pos:end="249:37"><name pos:start="249:5" pos:end="249:25">parallel_hds_isa_init</name><argument_list pos:start="249:26" pos:end="249:37">(<argument pos:start="249:27" pos:end="249:33"><expr pos:start="249:27" pos:end="249:33"><name pos:start="249:27" pos:end="249:33">isa_bus</name></expr></argument>, <argument pos:start="249:36" pos:end="249:36"><expr pos:start="249:36" pos:end="249:36"><literal type="number" pos:start="249:36" pos:end="249:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:20">/* Sound card */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:24"><expr pos:start="255:5" pos:end="255:23"><call pos:start="255:5" pos:end="255:23"><name pos:start="255:5" pos:end="255:14">audio_init</name><argument_list pos:start="255:15" pos:end="255:23">(<argument pos:start="255:16" pos:end="255:22"><expr pos:start="255:16" pos:end="255:22"><name pos:start="255:16" pos:end="255:22">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="257:5" pos:end="257:22">/* Network card */</comment>

    <expr_stmt pos:start="259:5" pos:end="259:26"><expr pos:start="259:5" pos:end="259:25"><call pos:start="259:5" pos:end="259:25"><name pos:start="259:5" pos:end="259:16">network_init</name><argument_list pos:start="259:17" pos:end="259:25">(<argument pos:start="259:18" pos:end="259:24"><expr pos:start="259:18" pos:end="259:24"><name pos:start="259:18" pos:end="259:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
