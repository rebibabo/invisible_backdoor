<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6253.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">drive_hot_add</name><parameter_list pos:start="1:19" pos:end="1:52">(<parameter pos:start="1:20" pos:end="1:31"><decl pos:start="1:20" pos:end="1:31"><type pos:start="1:20" pos:end="1:31"><name pos:start="1:20" pos:end="1:26">Monitor</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:31">mon</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:51"><decl pos:start="1:34" pos:end="1:51"><type pos:start="1:34" pos:end="1:51"><specifier pos:start="1:34" pos:end="1:38">const</specifier> <name pos:start="1:40" pos:end="1:44">QDict</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:51">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:11">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">dom</name></decl>, <decl pos:start="5:14" pos:end="5:20"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:20">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">unsigned</name></type> <name pos:start="7:14" pos:end="7:17">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">type</name></decl>, <decl pos:start="9:15" pos:end="9:17"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:15" pos:end="9:17">bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">success</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:13">PCIDevice</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">DriveInfo</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:60"><decl pos:start="17:5" pos:end="17:59"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:24">pci_addr</name> <init pos:start="17:26" pos:end="17:59">= <expr pos:start="17:28" pos:end="17:59"><call pos:start="17:28" pos:end="17:59"><name pos:start="17:28" pos:end="17:40">qdict_get_str</name><argument_list pos:start="17:41" pos:end="17:59">(<argument pos:start="17:42" pos:end="17:46"><expr pos:start="17:42" pos:end="17:46"><name pos:start="17:42" pos:end="17:46">qdict</name></expr></argument>, <argument pos:start="17:49" pos:end="17:58"><expr pos:start="17:49" pos:end="17:58"><literal type="string" pos:start="17:49" pos:end="17:58">"pci_addr"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:52"><decl pos:start="19:5" pos:end="19:51"><type pos:start="19:5" pos:end="19:16"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:14">char</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:20">opts</name> <init pos:start="19:22" pos:end="19:51">= <expr pos:start="19:24" pos:end="19:51"><call pos:start="19:24" pos:end="19:51"><name pos:start="19:24" pos:end="19:36">qdict_get_str</name><argument_list pos:start="19:37" pos:end="19:51">(<argument pos:start="19:38" pos:end="19:42"><expr pos:start="19:38" pos:end="19:42"><name pos:start="19:38" pos:end="19:42">qdict</name></expr></argument>, <argument pos:start="19:45" pos:end="19:50"><expr pos:start="19:45" pos:end="19:50"><literal type="string" pos:start="19:45" pos:end="19:50">"opts"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">BusState</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:21">scsibus</name></decl>;</decl_stmt>



    <if_stmt pos:start="25:5" pos:end="29:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:63">(<expr pos:start="25:9" pos:end="25:62"><call pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:24">pci_read_devaddr</name><argument_list pos:start="25:25" pos:end="25:62">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">mon</name></expr></argument>, <argument pos:start="25:31" pos:end="25:38"><expr pos:start="25:31" pos:end="25:38"><name pos:start="25:31" pos:end="25:38">pci_addr</name></expr></argument>, <argument pos:start="25:41" pos:end="25:44"><expr pos:start="25:41" pos:end="25:44"><operator pos:start="25:41" pos:end="25:41">&amp;</operator><name pos:start="25:42" pos:end="25:44">dom</name></expr></argument>, <argument pos:start="25:47" pos:end="25:54"><expr pos:start="25:47" pos:end="25:54"><operator pos:start="25:47" pos:end="25:47">&amp;</operator><name pos:start="25:48" pos:end="25:54">pci_bus</name></expr></argument>, <argument pos:start="25:57" pos:end="25:61"><expr pos:start="25:57" pos:end="25:61"><operator pos:start="25:57" pos:end="25:57">&amp;</operator><name pos:start="25:58" pos:end="25:61">slot</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:65" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:15">

        <return pos:start="27:9" pos:end="27:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:7">dev</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <call pos:start="33:11" pos:end="33:43"><name pos:start="33:11" pos:end="33:25">pci_find_device</name><argument_list pos:start="33:26" pos:end="33:43">(<argument pos:start="33:27" pos:end="33:33"><expr pos:start="33:27" pos:end="33:33"><name pos:start="33:27" pos:end="33:33">pci_bus</name></expr></argument>, <argument pos:start="33:36" pos:end="33:39"><expr pos:start="33:36" pos:end="33:39"><name pos:start="33:36" pos:end="33:39">slot</name></expr></argument>, <argument pos:start="33:42" pos:end="33:42"><expr pos:start="33:42" pos:end="33:42"><literal type="number" pos:start="33:42" pos:end="33:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:13">(<expr pos:start="35:9" pos:end="35:12"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:12">dev</name></expr>)</condition> <block pos:start="35:15" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:73"><expr pos:start="37:9" pos:end="37:72"><call pos:start="37:9" pos:end="37:72"><name pos:start="37:9" pos:end="37:22">monitor_printf</name><argument_list pos:start="37:23" pos:end="37:72">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">mon</name></expr></argument>, <argument pos:start="37:29" pos:end="37:61"><expr pos:start="37:29" pos:end="37:61"><literal type="string" pos:start="37:29" pos:end="37:61">"no pci device with address %s\n"</literal></expr></argument>, <argument pos:start="37:64" pos:end="37:71"><expr pos:start="37:64" pos:end="37:71"><name pos:start="37:64" pos:end="37:71">pci_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:9">dinfo</name> <operator pos:start="45:11" pos:end="45:11">=</operator> <call pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:26">add_init_drive</name><argument_list pos:start="45:27" pos:end="45:32">(<argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:31">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="49:15"><if pos:start="47:5" pos:end="49:15">if <condition pos:start="47:8" pos:end="47:15">(<expr pos:start="47:9" pos:end="47:14"><operator pos:start="47:9" pos:end="47:9">!</operator><name pos:start="47:10" pos:end="47:14">dinfo</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:15"><block_content pos:start="49:9" pos:end="49:15">

        <return pos:start="49:9" pos:end="49:15">return;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:23">(<expr pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:22"><name pos:start="51:9" pos:end="51:13">dinfo</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:22">devaddr</name></name></expr>)</condition> <block pos:start="51:25" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:15">

        <expr_stmt pos:start="53:9" pos:end="53:62"><expr pos:start="53:9" pos:end="53:61"><call pos:start="53:9" pos:end="53:61"><name pos:start="53:9" pos:end="53:22">monitor_printf</name><argument_list pos:start="53:23" pos:end="53:61">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">mon</name></expr></argument>, <argument pos:start="53:29" pos:end="53:60"><expr pos:start="53:29" pos:end="53:60"><literal type="string" pos:start="53:29" pos:end="53:60">"Parameter addr not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:8">type</name> <operator pos:start="59:10" pos:end="59:10">=</operator> <name pos:start="59:12" pos:end="59:22"><name pos:start="59:12" pos:end="59:16">dinfo</name><operator pos:start="59:17" pos:end="59:18">-&gt;</operator><name pos:start="59:19" pos:end="59:22">type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:35"><expr pos:start="61:5" pos:end="61:34"><name pos:start="61:5" pos:end="61:7">bus</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:34"><name pos:start="61:11" pos:end="61:27">drive_get_max_bus</name> <argument_list pos:start="61:29" pos:end="61:34">(<argument pos:start="61:30" pos:end="61:33"><expr pos:start="61:30" pos:end="61:33"><name pos:start="61:30" pos:end="61:33">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="65:5" pos:end="83:5">switch <condition pos:start="65:12" pos:end="65:17">(<expr pos:start="65:13" pos:end="65:16"><name pos:start="65:13" pos:end="65:16">type</name></expr>)</condition> <block pos:start="65:19" pos:end="83:5">{<block_content pos:start="67:5" pos:end="81:70">

    <case pos:start="67:5" pos:end="67:17">case <expr pos:start="67:10" pos:end="67:16"><name pos:start="67:10" pos:end="67:16">IF_SCSI</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:20"><expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:15">success</name> <operator pos:start="69:17" pos:end="69:17">=</operator> <literal type="number" pos:start="69:19" pos:end="69:19">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:51"><expr pos:start="71:9" pos:end="71:50"><name pos:start="71:9" pos:end="71:15">scsibus</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:50"><name pos:start="71:19" pos:end="71:28">LIST_FIRST</name><argument_list pos:start="71:29" pos:end="71:50">(<argument pos:start="71:30" pos:end="71:49"><expr pos:start="71:30" pos:end="71:49"><operator pos:start="71:30" pos:end="71:30">&amp;</operator><name pos:start="71:31" pos:end="71:49"><name pos:start="71:31" pos:end="71:33">dev</name><operator pos:start="71:34" pos:end="71:35">-&gt;</operator><name pos:start="71:36" pos:end="71:39">qdev</name><operator pos:start="71:40" pos:end="71:40">.</operator><name pos:start="71:41" pos:end="71:49">child_bus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="75:54"><expr pos:start="73:9" pos:end="75:53"><call pos:start="73:9" pos:end="75:53"><name pos:start="73:9" pos:end="73:33">scsi_bus_legacy_add_drive</name><argument_list pos:start="73:34" pos:end="75:53">(<argument pos:start="73:35" pos:end="73:67"><expr pos:start="73:35" pos:end="73:67"><call pos:start="73:35" pos:end="73:67"><name pos:start="73:35" pos:end="73:43">DO_UPCAST</name><argument_list pos:start="73:44" pos:end="73:67">(<argument pos:start="73:45" pos:end="73:51"><expr pos:start="73:45" pos:end="73:51"><name pos:start="73:45" pos:end="73:51">SCSIBus</name></expr></argument>, <argument pos:start="73:54" pos:end="73:57"><expr pos:start="73:54" pos:end="73:57"><name pos:start="73:54" pos:end="73:57">qbus</name></expr></argument>, <argument pos:start="73:60" pos:end="73:66"><expr pos:start="73:60" pos:end="73:66"><name pos:start="73:60" pos:end="73:66">scsibus</name></expr></argument>)</argument_list></call></expr></argument>,

                                  <argument pos:start="75:35" pos:end="75:39"><expr pos:start="75:35" pos:end="75:39"><name pos:start="75:35" pos:end="75:39">dinfo</name></expr></argument>, <argument pos:start="75:42" pos:end="75:52"><expr pos:start="75:42" pos:end="75:52"><name pos:start="75:42" pos:end="75:52"><name pos:start="75:42" pos:end="75:46">dinfo</name><operator pos:start="75:47" pos:end="75:48">-&gt;</operator><name pos:start="75:49" pos:end="75:52">unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <default pos:start="79:5" pos:end="79:12">default:</default>

        <expr_stmt pos:start="81:9" pos:end="81:70"><expr pos:start="81:9" pos:end="81:69"><call pos:start="81:9" pos:end="81:69"><name pos:start="81:9" pos:end="81:22">monitor_printf</name><argument_list pos:start="81:23" pos:end="81:69">(<argument pos:start="81:24" pos:end="81:26"><expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">mon</name></expr></argument>, <argument pos:start="81:29" pos:end="81:62"><expr pos:start="81:29" pos:end="81:62"><literal type="string" pos:start="81:29" pos:end="81:62">"Can't hot-add drive to type %d\n"</literal></expr></argument>, <argument pos:start="81:65" pos:end="81:68"><expr pos:start="81:65" pos:end="81:68"><name pos:start="81:65" pos:end="81:68">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <if_stmt pos:start="87:5" pos:end="93:36"><if pos:start="87:5" pos:end="93:36">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:15">success</name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="93:36"><block_content pos:start="89:9" pos:end="93:36">

        <expr_stmt pos:start="89:9" pos:end="93:36"><expr pos:start="89:9" pos:end="93:35"><call pos:start="89:9" pos:end="93:35"><name pos:start="89:9" pos:end="89:22">monitor_printf</name><argument_list pos:start="89:23" pos:end="93:35">(<argument pos:start="89:24" pos:end="89:26"><expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">mon</name></expr></argument>, <argument pos:start="89:29" pos:end="89:50"><expr pos:start="89:29" pos:end="89:50"><literal type="string" pos:start="89:29" pos:end="89:50">"OK bus %d, unit %d\n"</literal></expr></argument>,

                       <argument pos:start="91:24" pos:end="91:33"><expr pos:start="91:24" pos:end="91:33"><name pos:start="91:24" pos:end="91:33"><name pos:start="91:24" pos:end="91:28">dinfo</name><operator pos:start="91:29" pos:end="91:30">-&gt;</operator><name pos:start="91:31" pos:end="91:33">bus</name></name></expr></argument>,

                       <argument pos:start="93:24" pos:end="93:34"><expr pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:34"><name pos:start="93:24" pos:end="93:28">dinfo</name><operator pos:start="93:29" pos:end="93:30">-&gt;</operator><name pos:start="93:31" pos:end="93:34">unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="95:5" pos:end="95:11">return;</return>

</block_content>}</block></function>
</unit>
