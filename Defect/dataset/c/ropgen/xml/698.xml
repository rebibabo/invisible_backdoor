<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/698.c" pos:tabs="8"><function pos:start="1:1" pos:end="556:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">ppc_heathrow_init</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="556:1">{<block_content pos:start="5:5" pos:end="554:52">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:50"><decl pos:start="15:5" pos:end="15:49"><type pos:start="15:5" pos:end="15:16"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:14">char</name> <modifier pos:start="15:16" pos:end="15:16">*</modifier></type><name pos:start="15:17" pos:end="15:27">boot_device</name> <init pos:start="15:29" pos:end="15:49">= <expr pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:49"><name pos:start="15:31" pos:end="15:37">machine</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:49">boot_order</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:46"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:24">sysmem</name> <init pos:start="17:26" pos:end="17:46">= <expr pos:start="17:28" pos:end="17:46"><call pos:start="17:28" pos:end="17:46"><name pos:start="17:28" pos:end="17:44">get_system_memory</name><argument_list pos:start="17:45" pos:end="17:46">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:27"><decl pos:start="19:5" pos:end="19:26"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">PowerPCCPU</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">cpu</name> <init pos:start="19:21" pos:end="19:26">= <expr pos:start="19:23" pos:end="19:26"><name pos:start="19:23" pos:end="19:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">CPUPPCState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">env</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:8">char</name> <modifier pos:start="23:10" pos:end="23:10">*</modifier></type><name pos:start="23:11" pos:end="23:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:35"><decl pos:start="25:5" pos:end="25:17"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:17">pic</name></decl>, <decl pos:start="25:20" pos:end="25:34"><type ref="prev" pos:start="25:5" pos:end="25:14"><modifier pos:start="25:20" pos:end="25:20">*</modifier><modifier pos:start="25:21" pos:end="25:21">*</modifier></type><name pos:start="25:22" pos:end="25:34">heathrow_irqs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:18"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:18">linux_boot</name></decl>, <decl pos:start="27:21" pos:end="27:21"><type ref="prev" pos:start="27:5" pos:end="27:7"/><name pos:start="27:21" pos:end="27:21">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:47"><decl pos:start="29:5" pos:end="29:46"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">MemoryRegion</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:21">ram</name> <init pos:start="29:23" pos:end="29:46">= <expr pos:start="29:25" pos:end="29:46"><call pos:start="29:25" pos:end="29:46"><name pos:start="29:25" pos:end="29:29">g_new</name><argument_list pos:start="29:30" pos:end="29:46">(<argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">MemoryRegion</name></expr></argument>, <argument pos:start="29:45" pos:end="29:45"><expr pos:start="29:45" pos:end="29:45"><literal type="number" pos:start="29:45" pos:end="29:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:48"><decl pos:start="31:5" pos:end="31:47"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:22">bios</name> <init pos:start="31:24" pos:end="31:47">= <expr pos:start="31:26" pos:end="31:47"><call pos:start="31:26" pos:end="31:47"><name pos:start="31:26" pos:end="31:30">g_new</name><argument_list pos:start="31:31" pos:end="31:47">(<argument pos:start="31:32" pos:end="31:43"><expr pos:start="31:32" pos:end="31:43"><name pos:start="31:32" pos:end="31:43">MemoryRegion</name></expr></argument>, <argument pos:start="31:46" pos:end="31:46"><expr pos:start="31:46" pos:end="31:46"><literal type="number" pos:start="31:46" pos:end="31:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:47"><decl pos:start="33:5" pos:end="33:46"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">isa</name> <init pos:start="33:23" pos:end="33:46">= <expr pos:start="33:25" pos:end="33:46"><call pos:start="33:25" pos:end="33:46"><name pos:start="33:25" pos:end="33:29">g_new</name><argument_list pos:start="33:30" pos:end="33:46">(<argument pos:start="33:31" pos:end="33:42"><expr pos:start="33:31" pos:end="33:42"><name pos:start="33:31" pos:end="33:42">MemoryRegion</name></expr></argument>, <argument pos:start="33:45" pos:end="33:45"><expr pos:start="33:45" pos:end="33:45"><literal type="number" pos:start="33:45" pos:end="33:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:56"><decl pos:start="35:5" pos:end="35:24"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:12">uint32_t</name></type> <name pos:start="35:14" pos:end="35:24">kernel_base</name></decl>, <decl pos:start="35:27" pos:end="35:37"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:27" pos:end="35:37">initrd_base</name></decl>, <decl pos:start="35:40" pos:end="35:55"><type ref="prev" pos:start="35:5" pos:end="35:12"/><name pos:start="35:40" pos:end="35:51">cmdline_base</name> <init pos:start="35:53" pos:end="35:55">= <expr pos:start="35:55" pos:end="35:55"><literal type="number" pos:start="35:55" pos:end="35:55">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:37"><decl pos:start="37:5" pos:end="37:23"><type pos:start="37:5" pos:end="37:11"><name pos:start="37:5" pos:end="37:11">int32_t</name></type> <name pos:start="37:13" pos:end="37:23">kernel_size</name></decl>, <decl pos:start="37:26" pos:end="37:36"><type ref="prev" pos:start="37:5" pos:end="37:11"/><name pos:start="37:26" pos:end="37:36">initrd_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:10">PCIBus</name> <modifier pos:start="39:12" pos:end="39:12">*</modifier></type><name pos:start="39:13" pos:end="39:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:21"><decl pos:start="41:5" pos:end="41:20"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">PCIDevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:20">macio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:29"><decl pos:start="43:5" pos:end="43:28"><type pos:start="43:5" pos:end="43:19"><name pos:start="43:5" pos:end="43:17">MACIOIDEState</name> <modifier pos:start="43:19" pos:end="43:19">*</modifier></type><name pos:start="43:20" pos:end="43:28">macio_ide</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:21"><decl pos:start="45:5" pos:end="45:20"><type pos:start="45:5" pos:end="45:17"><name pos:start="45:5" pos:end="45:15">DeviceState</name> <modifier pos:start="45:17" pos:end="45:17">*</modifier></type><name pos:start="45:18" pos:end="45:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:22"><decl pos:start="47:5" pos:end="47:21"><type pos:start="47:5" pos:end="47:14"><name pos:start="47:5" pos:end="47:12">BusState</name> <modifier pos:start="47:14" pos:end="47:14">*</modifier></type><name pos:start="47:15" pos:end="47:21">adb_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:18"><decl pos:start="49:5" pos:end="49:17"><type pos:start="49:5" pos:end="49:7"><name pos:start="49:5" pos:end="49:7">int</name></type> <name pos:start="49:9" pos:end="49:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:26"><decl pos:start="51:5" pos:end="51:25"><type pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:16">MemoryRegion</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:25">pic_mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:63"><decl pos:start="53:5" pos:end="53:26"><type pos:start="53:5" pos:end="53:18"><name pos:start="53:5" pos:end="53:16">MemoryRegion</name> <modifier pos:start="53:18" pos:end="53:18">*</modifier></type><name pos:start="53:19" pos:end="53:26">escc_mem</name></decl>, <decl pos:start="53:29" pos:end="53:62"><type ref="prev" pos:start="53:5" pos:end="53:18"><modifier pos:start="53:29" pos:end="53:29">*</modifier></type><name pos:start="53:30" pos:end="53:37">escc_bar</name> <init pos:start="53:39" pos:end="53:62">= <expr pos:start="53:41" pos:end="53:62"><call pos:start="53:41" pos:end="53:62"><name pos:start="53:41" pos:end="53:45">g_new</name><argument_list pos:start="53:46" pos:end="53:62">(<argument pos:start="53:47" pos:end="53:58"><expr pos:start="53:47" pos:end="53:58"><name pos:start="53:47" pos:end="53:58">MemoryRegion</name></expr></argument>, <argument pos:start="53:61" pos:end="53:61"><expr pos:start="53:61" pos:end="53:61"><literal type="number" pos:start="53:61" pos:end="53:61">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:29"><decl pos:start="55:5" pos:end="55:28"><type pos:start="55:5" pos:end="55:12"><name pos:start="55:5" pos:end="55:12">uint16_t</name></type> <name pos:start="55:14" pos:end="55:28">ppc_boot_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="57:5" pos:end="57:46"><decl pos:start="57:5" pos:end="57:45"><type pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">DriveInfo</name> <modifier pos:start="57:15" pos:end="57:15">*</modifier></type><name pos:start="57:16" pos:end="57:45"><name pos:start="57:16" pos:end="57:17">hd</name><index pos:start="57:18" pos:end="57:45">[<expr pos:start="57:19" pos:end="57:44"><name pos:start="57:19" pos:end="57:29">MAX_IDE_BUS</name> <operator pos:start="57:31" pos:end="57:31">*</operator> <name pos:start="57:33" pos:end="57:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="59:5" pos:end="59:17"><decl pos:start="59:5" pos:end="59:16"><type pos:start="59:5" pos:end="59:10"><name pos:start="59:5" pos:end="59:8">void</name> <modifier pos:start="59:10" pos:end="59:10">*</modifier></type><name pos:start="59:11" pos:end="59:16">fw_cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="61:5" pos:end="61:20"><decl pos:start="61:5" pos:end="61:19"><type pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:12">uint64_t</name></type> <name pos:start="61:14" pos:end="61:19">tbfreq</name></decl>;</decl_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:43"><expr pos:start="65:5" pos:end="65:42"><name pos:start="65:5" pos:end="65:14">linux_boot</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <operator pos:start="65:18" pos:end="65:18">(</operator><name pos:start="65:19" pos:end="65:33">kernel_filename</name> <operator pos:start="65:35" pos:end="65:36">!=</operator> <name pos:start="65:38" pos:end="65:41">NULL</name><operator pos:start="65:42" pos:end="65:42">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:19">/* init CPUs */</comment>

    <if_stmt pos:start="71:5" pos:end="73:25"><if pos:start="71:5" pos:end="73:25">if <condition pos:start="71:8" pos:end="71:26">(<expr pos:start="71:9" pos:end="71:25"><name pos:start="71:9" pos:end="71:17">cpu_model</name> <operator pos:start="71:19" pos:end="71:20">==</operator> <name pos:start="71:22" pos:end="71:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:25"><block_content pos:start="73:9" pos:end="73:25">

        <expr_stmt pos:start="73:9" pos:end="73:25"><expr pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:17">cpu_model</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <literal type="string" pos:start="73:21" pos:end="73:24">"G3"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="75:5" pos:end="97:5">for <control pos:start="75:9" pos:end="75:34">(<init pos:start="75:10" pos:end="75:15"><expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:10">i</name> <operator pos:start="75:12" pos:end="75:12">=</operator> <literal type="number" pos:start="75:14" pos:end="75:14">0</literal></expr>;</init> <condition pos:start="75:17" pos:end="75:29"><expr pos:start="75:17" pos:end="75:28"><name pos:start="75:17" pos:end="75:17">i</name> <operator pos:start="75:19" pos:end="75:19">&lt;</operator> <name pos:start="75:21" pos:end="75:28">smp_cpus</name></expr>;</condition> <incr pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:31">i</name><operator pos:start="75:32" pos:end="75:33">++</operator></expr></incr>)</control> <block pos:start="75:36" pos:end="97:5">{<block_content pos:start="77:9" pos:end="95:53">

        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:11">cpu</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:37"><name pos:start="77:15" pos:end="77:26">cpu_ppc_init</name><argument_list pos:start="77:27" pos:end="77:37">(<argument pos:start="77:28" pos:end="77:36"><expr pos:start="77:28" pos:end="77:36"><name pos:start="77:28" pos:end="77:36">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="85:9"><if pos:start="79:9" pos:end="85:9">if <condition pos:start="79:12" pos:end="79:24">(<expr pos:start="79:13" pos:end="79:23"><name pos:start="79:13" pos:end="79:15">cpu</name> <operator pos:start="79:17" pos:end="79:18">==</operator> <name pos:start="79:20" pos:end="79:23">NULL</name></expr>)</condition> <block pos:start="79:26" pos:end="85:9">{<block_content pos:start="81:13" pos:end="83:20">

            <expr_stmt pos:start="81:13" pos:end="81:71"><expr pos:start="81:13" pos:end="81:70"><call pos:start="81:13" pos:end="81:70"><name pos:start="81:13" pos:end="81:19">fprintf</name><argument_list pos:start="81:20" pos:end="81:70">(<argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">stderr</name></expr></argument>, <argument pos:start="81:29" pos:end="81:69"><expr pos:start="81:29" pos:end="81:69"><literal type="string" pos:start="81:29" pos:end="81:69">"Unable to find PowerPC CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:20"><expr pos:start="83:13" pos:end="83:19"><call pos:start="83:13" pos:end="83:19"><name pos:start="83:13" pos:end="83:16">exit</name><argument_list pos:start="83:17" pos:end="83:19">(<argument pos:start="83:18" pos:end="83:18"><expr pos:start="83:18" pos:end="83:18"><literal type="number" pos:start="83:18" pos:end="83:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:24"><expr pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:11">env</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <operator pos:start="87:15" pos:end="87:15">&amp;</operator><name pos:start="87:16" pos:end="87:23"><name pos:start="87:16" pos:end="87:18">cpu</name><operator pos:start="87:19" pos:end="87:20">-&gt;</operator><name pos:start="87:21" pos:end="87:23">env</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="91:9" pos:end="91:49">/* Set time-base frequency to 16.6 Mhz */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:38"><expr pos:start="93:9" pos:end="93:37"><call pos:start="93:9" pos:end="93:37"><name pos:start="93:9" pos:end="93:23">cpu_ppc_tb_init</name><argument_list pos:start="93:24" pos:end="93:37">(<argument pos:start="93:25" pos:end="93:27"><expr pos:start="93:25" pos:end="93:27"><name pos:start="93:25" pos:end="93:27">env</name></expr></argument>,  <argument pos:start="93:31" pos:end="93:36"><expr pos:start="93:31" pos:end="93:36"><name pos:start="93:31" pos:end="93:36">TBFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:53"><expr pos:start="95:9" pos:end="95:52"><call pos:start="95:9" pos:end="95:52"><name pos:start="95:9" pos:end="95:27">qemu_register_reset</name><argument_list pos:start="95:28" pos:end="95:52">(<argument pos:start="95:29" pos:end="95:46"><expr pos:start="95:29" pos:end="95:46"><name pos:start="95:29" pos:end="95:46">ppc_heathrow_reset</name></expr></argument>, <argument pos:start="95:49" pos:end="95:51"><expr pos:start="95:49" pos:end="95:51"><name pos:start="95:49" pos:end="95:51">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="101:5" pos:end="101:22">/* allocate RAM */</comment>

    <if_stmt pos:start="103:5" pos:end="113:5"><if pos:start="103:5" pos:end="113:5">if <condition pos:start="103:8" pos:end="103:32">(<expr pos:start="103:9" pos:end="103:31"><name pos:start="103:9" pos:end="103:16">ram_size</name> <operator pos:start="103:18" pos:end="103:18">&gt;</operator> <operator pos:start="103:20" pos:end="103:20">(</operator><literal type="number" pos:start="103:21" pos:end="103:24">2047</literal> <operator pos:start="103:26" pos:end="103:27">&lt;&lt;</operator> <literal type="number" pos:start="103:29" pos:end="103:30">20</literal><operator pos:start="103:31" pos:end="103:31">)</operator></expr>)</condition> <block pos:start="103:34" pos:end="113:5">{<block_content pos:start="105:9" pos:end="111:16">

        <expr_stmt pos:start="105:9" pos:end="109:54"><expr pos:start="105:9" pos:end="109:53"><call pos:start="105:9" pos:end="109:53"><name pos:start="105:9" pos:end="105:15">fprintf</name><argument_list pos:start="105:16" pos:end="109:53">(<argument pos:start="105:17" pos:end="105:22"><expr pos:start="105:17" pos:end="105:22"><name pos:start="105:17" pos:end="105:22">stderr</name></expr></argument>,

                <argument pos:start="107:17" pos:end="107:82"><expr pos:start="107:17" pos:end="107:82"><literal type="string" pos:start="107:17" pos:end="107:82">"qemu: Too much memory for this machine: %d MB, maximum 2047 MB\n"</literal></expr></argument>,

                <argument pos:start="109:17" pos:end="109:52"><expr pos:start="109:17" pos:end="109:52"><operator pos:start="109:17" pos:end="109:17">(</operator><operator pos:start="109:18" pos:end="109:18">(</operator><name pos:start="109:19" pos:end="109:26">unsigned</name> <name pos:start="109:28" pos:end="109:30">int</name><operator pos:start="109:31" pos:end="109:31">)</operator><name pos:start="109:32" pos:end="109:39">ram_size</name> <operator pos:start="109:41" pos:end="109:41">/</operator> <operator pos:start="109:43" pos:end="109:43">(</operator><literal type="number" pos:start="109:44" pos:end="109:44">1</literal> <operator pos:start="109:46" pos:end="109:47">&lt;&lt;</operator> <literal type="number" pos:start="109:49" pos:end="109:50">20</literal><operator pos:start="109:51" pos:end="109:51">)</operator><operator pos:start="109:52" pos:end="109:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:16"><expr pos:start="111:9" pos:end="111:15"><call pos:start="111:9" pos:end="111:15"><name pos:start="111:9" pos:end="111:12">exit</name><argument_list pos:start="111:13" pos:end="111:15">(<argument pos:start="111:14" pos:end="111:14"><expr pos:start="111:14" pos:end="111:14"><literal type="number" pos:start="111:14" pos:end="111:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="117:5" pos:end="119:51"><expr pos:start="117:5" pos:end="119:50"><call pos:start="117:5" pos:end="119:50"><name pos:start="117:5" pos:end="117:40">memory_region_allocate_system_memory</name><argument_list pos:start="117:41" pos:end="119:50">(<argument pos:start="117:42" pos:end="117:44"><expr pos:start="117:42" pos:end="117:44"><name pos:start="117:42" pos:end="117:44">ram</name></expr></argument>, <argument pos:start="117:47" pos:end="117:50"><expr pos:start="117:47" pos:end="117:50"><name pos:start="117:47" pos:end="117:50">NULL</name></expr></argument>, <argument pos:start="117:53" pos:end="117:70"><expr pos:start="117:53" pos:end="117:70"><literal type="string" pos:start="117:53" pos:end="117:70">"ppc_heathrow.ram"</literal></expr></argument>,

                                         <argument pos:start="119:42" pos:end="119:49"><expr pos:start="119:42" pos:end="119:49"><name pos:start="119:42" pos:end="119:49">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:48"><expr pos:start="121:5" pos:end="121:47"><call pos:start="121:5" pos:end="121:47"><name pos:start="121:5" pos:end="121:31">memory_region_add_subregion</name><argument_list pos:start="121:32" pos:end="121:47">(<argument pos:start="121:33" pos:end="121:38"><expr pos:start="121:33" pos:end="121:38"><name pos:start="121:33" pos:end="121:38">sysmem</name></expr></argument>, <argument pos:start="121:41" pos:end="121:41"><expr pos:start="121:41" pos:end="121:41"><literal type="number" pos:start="121:41" pos:end="121:41">0</literal></expr></argument>, <argument pos:start="121:44" pos:end="121:46"><expr pos:start="121:44" pos:end="121:46"><name pos:start="121:44" pos:end="121:46">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:32">/* allocate and load BIOS */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:71"><expr pos:start="127:5" pos:end="127:70"><call pos:start="127:5" pos:end="127:70"><name pos:start="127:5" pos:end="127:26">memory_region_init_ram</name><argument_list pos:start="127:27" pos:end="127:70">(<argument pos:start="127:28" pos:end="127:31"><expr pos:start="127:28" pos:end="127:31"><name pos:start="127:28" pos:end="127:31">bios</name></expr></argument>, <argument pos:start="127:34" pos:end="127:37"><expr pos:start="127:34" pos:end="127:37"><name pos:start="127:34" pos:end="127:37">NULL</name></expr></argument>, <argument pos:start="127:40" pos:end="127:58"><expr pos:start="127:40" pos:end="127:58"><literal type="string" pos:start="127:40" pos:end="127:58">"ppc_heathrow.bios"</literal></expr></argument>, <argument pos:start="127:61" pos:end="127:69"><expr pos:start="127:61" pos:end="127:69"><name pos:start="127:61" pos:end="127:69">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:38"><expr pos:start="129:5" pos:end="129:37"><call pos:start="129:5" pos:end="129:37"><name pos:start="129:5" pos:end="129:31">vmstate_register_ram_global</name><argument_list pos:start="129:32" pos:end="129:37">(<argument pos:start="129:33" pos:end="129:36"><expr pos:start="129:33" pos:end="129:36"><name pos:start="129:33" pos:end="129:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="135:34"><if pos:start="133:5" pos:end="135:34">if <condition pos:start="133:8" pos:end="133:26">(<expr pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:17">bios_name</name> <operator pos:start="133:19" pos:end="133:20">==</operator> <name pos:start="133:22" pos:end="133:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="135:9" pos:end="135:34"><block_content pos:start="135:9" pos:end="135:34">

        <expr_stmt pos:start="135:9" pos:end="135:34"><expr pos:start="135:9" pos:end="135:33"><name pos:start="135:9" pos:end="135:17">bios_name</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <name pos:start="135:21" pos:end="135:33">PROM_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:62"><expr pos:start="137:5" pos:end="137:61"><name pos:start="137:5" pos:end="137:12">filename</name> <operator pos:start="137:14" pos:end="137:14">=</operator> <call pos:start="137:16" pos:end="137:61"><name pos:start="137:16" pos:end="137:29">qemu_find_file</name><argument_list pos:start="137:30" pos:end="137:61">(<argument pos:start="137:31" pos:end="137:49"><expr pos:start="137:31" pos:end="137:49"><name pos:start="137:31" pos:end="137:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="137:52" pos:end="137:60"><expr pos:start="137:52" pos:end="137:60"><name pos:start="137:52" pos:end="137:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:43"><expr pos:start="139:5" pos:end="139:42"><call pos:start="139:5" pos:end="139:42"><name pos:start="139:5" pos:end="139:30">memory_region_set_readonly</name><argument_list pos:start="139:31" pos:end="139:42">(<argument pos:start="139:32" pos:end="139:35"><expr pos:start="139:32" pos:end="139:35"><name pos:start="139:32" pos:end="139:35">bios</name></expr></argument>, <argument pos:start="139:38" pos:end="139:41"><expr pos:start="139:38" pos:end="139:41"><name pos:start="139:38" pos:end="139:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:57"><expr pos:start="141:5" pos:end="141:56"><call pos:start="141:5" pos:end="141:56"><name pos:start="141:5" pos:end="141:31">memory_region_add_subregion</name><argument_list pos:start="141:32" pos:end="141:56">(<argument pos:start="141:33" pos:end="141:38"><expr pos:start="141:33" pos:end="141:38"><name pos:start="141:33" pos:end="141:38">sysmem</name></expr></argument>, <argument pos:start="141:41" pos:end="141:49"><expr pos:start="141:41" pos:end="141:49"><name pos:start="141:41" pos:end="141:49">PROM_ADDR</name></expr></argument>, <argument pos:start="141:52" pos:end="141:55"><expr pos:start="141:52" pos:end="141:55"><name pos:start="141:52" pos:end="141:55">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:29">/* Load OpenBIOS (ELF) */</comment>

    <if_stmt pos:start="147:5" pos:end="159:5"><if pos:start="147:5" pos:end="155:5">if <condition pos:start="147:8" pos:end="147:17">(<expr pos:start="147:9" pos:end="147:16"><name pos:start="147:9" pos:end="147:16">filename</name></expr>)</condition> <block pos:start="147:19" pos:end="155:5">{<block_content pos:start="149:9" pos:end="153:25">

        <expr_stmt pos:start="149:9" pos:end="151:48"><expr pos:start="149:9" pos:end="151:47"><name pos:start="149:9" pos:end="149:17">bios_size</name> <operator pos:start="149:19" pos:end="149:19">=</operator> <call pos:start="149:21" pos:end="151:47"><name pos:start="149:21" pos:end="149:28">load_elf</name><argument_list pos:start="149:29" pos:end="151:47">(<argument pos:start="149:30" pos:end="149:37"><expr pos:start="149:30" pos:end="149:37"><name pos:start="149:30" pos:end="149:37">filename</name></expr></argument>, <argument pos:start="149:40" pos:end="149:40"><expr pos:start="149:40" pos:end="149:40"><literal type="number" pos:start="149:40" pos:end="149:40">0</literal></expr></argument>, <argument pos:start="149:43" pos:end="149:46"><expr pos:start="149:43" pos:end="149:46"><name pos:start="149:43" pos:end="149:46">NULL</name></expr></argument>, <argument pos:start="149:49" pos:end="149:52"><expr pos:start="149:49" pos:end="149:52"><name pos:start="149:49" pos:end="149:52">NULL</name></expr></argument>, <argument pos:start="149:55" pos:end="149:58"><expr pos:start="149:55" pos:end="149:58"><name pos:start="149:55" pos:end="149:58">NULL</name></expr></argument>, <argument pos:start="149:61" pos:end="149:64"><expr pos:start="149:61" pos:end="149:64"><name pos:start="149:61" pos:end="149:64">NULL</name></expr></argument>,

                             <argument pos:start="151:30" pos:end="151:30"><expr pos:start="151:30" pos:end="151:30"><literal type="number" pos:start="151:30" pos:end="151:30">1</literal></expr></argument>, <argument pos:start="151:33" pos:end="151:43"><expr pos:start="151:33" pos:end="151:43"><name pos:start="151:33" pos:end="151:43">ELF_MACHINE</name></expr></argument>, <argument pos:start="151:46" pos:end="151:46"><expr pos:start="151:46" pos:end="151:46"><literal type="number" pos:start="151:46" pos:end="151:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:25"><expr pos:start="153:9" pos:end="153:24"><call pos:start="153:9" pos:end="153:24"><name pos:start="153:9" pos:end="153:14">g_free</name><argument_list pos:start="153:15" pos:end="153:24">(<argument pos:start="153:16" pos:end="153:23"><expr pos:start="153:16" pos:end="153:23"><name pos:start="153:16" pos:end="153:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="155:7" pos:end="159:5">else <block pos:start="155:12" pos:end="159:5">{<block_content pos:start="157:9" pos:end="157:23">

        <expr_stmt pos:start="157:9" pos:end="157:23"><expr pos:start="157:9" pos:end="157:22"><name pos:start="157:9" pos:end="157:17">bios_size</name> <operator pos:start="157:19" pos:end="157:19">=</operator> <operator pos:start="157:21" pos:end="157:21">-</operator><literal type="number" pos:start="157:22" pos:end="157:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="161:5" pos:end="167:5"><if pos:start="161:5" pos:end="167:5">if <condition pos:start="161:8" pos:end="161:47">(<expr pos:start="161:9" pos:end="161:46"><name pos:start="161:9" pos:end="161:36"><name pos:start="161:9" pos:end="161:17">bios_size</name> <argument_list type="generic" pos:start="161:19" pos:end="161:36">&lt; <argument pos:start="161:21" pos:end="161:34"><expr pos:start="161:21" pos:end="161:34"><literal type="number" pos:start="161:21" pos:end="161:21">0</literal> <operator pos:start="161:23" pos:end="161:24">||</operator> <name pos:start="161:26" pos:end="161:34">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="161:38" pos:end="161:46">BIOS_SIZE</name></expr>)</condition> <block pos:start="161:49" pos:end="167:5">{<block_content pos:start="163:9" pos:end="165:16">

        <expr_stmt pos:start="163:9" pos:end="163:72"><expr pos:start="163:9" pos:end="163:71"><call pos:start="163:9" pos:end="163:71"><name pos:start="163:9" pos:end="163:16">hw_error</name><argument_list pos:start="163:17" pos:end="163:71">(<argument pos:start="163:18" pos:end="163:59"><expr pos:start="163:18" pos:end="163:59"><literal type="string" pos:start="163:18" pos:end="163:59">"qemu: could not load PowerPC bios '%s'\n"</literal></expr></argument>, <argument pos:start="163:62" pos:end="163:70"><expr pos:start="163:62" pos:end="163:70"><name pos:start="163:62" pos:end="163:70">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:16"><expr pos:start="165:9" pos:end="165:15"><call pos:start="165:9" pos:end="165:15"><name pos:start="165:9" pos:end="165:12">exit</name><argument_list pos:start="165:13" pos:end="165:15">(<argument pos:start="165:14" pos:end="165:14"><expr pos:start="165:14" pos:end="165:14"><literal type="number" pos:start="165:14" pos:end="165:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="171:5" pos:end="309:5"><if pos:start="171:5" pos:end="255:5">if <condition pos:start="171:8" pos:end="171:19">(<expr pos:start="171:9" pos:end="171:18"><name pos:start="171:9" pos:end="171:18">linux_boot</name></expr>)</condition> <block pos:start="171:21" pos:end="255:5">{<block_content pos:start="173:9" pos:end="253:30">

        <decl_stmt pos:start="173:9" pos:end="173:29"><decl pos:start="173:9" pos:end="173:28"><type pos:start="173:9" pos:end="173:16"><name pos:start="173:9" pos:end="173:16">uint64_t</name></type> <name pos:start="173:18" pos:end="173:24">lowaddr</name> <init pos:start="173:26" pos:end="173:28">= <expr pos:start="173:28" pos:end="173:28"><literal type="number" pos:start="173:28" pos:end="173:28">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="175:9" pos:end="180:0"><decl pos:start="175:9" pos:end="175:24"><type pos:start="175:9" pos:end="175:11"><name pos:start="175:9" pos:end="175:11">int</name></type> <name pos:start="175:13" pos:end="175:24">bswap_needed</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="179:1" pos:end="179:19">#<cpp:directive pos:start="179:2" pos:end="179:6">ifdef</cpp:directive> <name pos:start="179:8" pos:end="179:19">BSWAP_NEEDED</name></cpp:ifdef>

        <expr_stmt pos:start="181:9" pos:end="184:0"><expr pos:start="181:9" pos:end="181:24"><name pos:start="181:9" pos:end="181:20">bswap_needed</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <literal type="number" pos:start="181:24" pos:end="181:24">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="183:1" pos:end="183:5">#<cpp:directive pos:start="183:2" pos:end="183:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="185:9" pos:end="188:0"><expr pos:start="185:9" pos:end="185:24"><name pos:start="185:9" pos:end="185:20">bswap_needed</name> <operator pos:start="185:22" pos:end="185:22">=</operator> <literal type="number" pos:start="185:24" pos:end="185:24">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="187:1" pos:end="187:6">#<cpp:directive pos:start="187:2" pos:end="187:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="189:9" pos:end="189:39"><expr pos:start="189:9" pos:end="189:38"><name pos:start="189:9" pos:end="189:19">kernel_base</name> <operator pos:start="189:21" pos:end="189:21">=</operator> <name pos:start="189:23" pos:end="189:38">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="193:72"><expr pos:start="191:9" pos:end="193:71"><name pos:start="191:9" pos:end="191:19">kernel_size</name> <operator pos:start="191:21" pos:end="191:21">=</operator> <call pos:start="191:23" pos:end="193:71"><name pos:start="191:23" pos:end="191:30">load_elf</name><argument_list pos:start="191:31" pos:end="193:71">(<argument pos:start="191:32" pos:end="191:46"><expr pos:start="191:32" pos:end="191:46"><name pos:start="191:32" pos:end="191:46">kernel_filename</name></expr></argument>, <argument pos:start="191:49" pos:end="191:72"><expr pos:start="191:49" pos:end="191:72"><name pos:start="191:49" pos:end="191:72">translate_kernel_address</name></expr></argument>, <argument pos:start="191:75" pos:end="191:78"><expr pos:start="191:75" pos:end="191:78"><name pos:start="191:75" pos:end="191:78">NULL</name></expr></argument>,

                               <argument pos:start="193:32" pos:end="193:35"><expr pos:start="193:32" pos:end="193:35"><name pos:start="193:32" pos:end="193:35">NULL</name></expr></argument>, <argument pos:start="193:38" pos:end="193:45"><expr pos:start="193:38" pos:end="193:45"><operator pos:start="193:38" pos:end="193:38">&amp;</operator><name pos:start="193:39" pos:end="193:45">lowaddr</name></expr></argument>, <argument pos:start="193:48" pos:end="193:51"><expr pos:start="193:48" pos:end="193:51"><name pos:start="193:48" pos:end="193:51">NULL</name></expr></argument>, <argument pos:start="193:54" pos:end="193:54"><expr pos:start="193:54" pos:end="193:54"><literal type="number" pos:start="193:54" pos:end="193:54">1</literal></expr></argument>, <argument pos:start="193:57" pos:end="193:67"><expr pos:start="193:57" pos:end="193:67"><name pos:start="193:57" pos:end="193:67">ELF_MACHINE</name></expr></argument>, <argument pos:start="193:70" pos:end="193:70"><expr pos:start="193:70" pos:end="193:70"><literal type="number" pos:start="193:70" pos:end="193:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="201:54"><if pos:start="195:9" pos:end="201:54">if <condition pos:start="195:12" pos:end="195:28">(<expr pos:start="195:13" pos:end="195:27"><name pos:start="195:13" pos:end="195:23">kernel_size</name> <operator pos:start="195:25" pos:end="195:25">&lt;</operator> <literal type="number" pos:start="195:27" pos:end="195:27">0</literal></expr>)</condition><block type="pseudo" pos:start="197:13" pos:end="201:54"><block_content pos:start="197:13" pos:end="201:54">

            <expr_stmt pos:start="197:13" pos:end="201:54"><expr pos:start="197:13" pos:end="201:53"><name pos:start="197:13" pos:end="197:23">kernel_size</name> <operator pos:start="197:25" pos:end="197:25">=</operator> <call pos:start="197:27" pos:end="201:53"><name pos:start="197:27" pos:end="197:35">load_aout</name><argument_list pos:start="197:36" pos:end="201:53">(<argument pos:start="197:37" pos:end="197:51"><expr pos:start="197:37" pos:end="197:51"><name pos:start="197:37" pos:end="197:51">kernel_filename</name></expr></argument>, <argument pos:start="197:54" pos:end="197:64"><expr pos:start="197:54" pos:end="197:64"><name pos:start="197:54" pos:end="197:64">kernel_base</name></expr></argument>,

                                    <argument pos:start="199:37" pos:end="199:58"><expr pos:start="199:37" pos:end="199:58"><name pos:start="199:37" pos:end="199:44">ram_size</name> <operator pos:start="199:46" pos:end="199:46">-</operator> <name pos:start="199:48" pos:end="199:58">kernel_base</name></expr></argument>, <argument pos:start="199:61" pos:end="199:72"><expr pos:start="199:61" pos:end="199:72"><name pos:start="199:61" pos:end="199:72">bswap_needed</name></expr></argument>,

                                    <argument pos:start="201:37" pos:end="201:52"><expr pos:start="201:37" pos:end="201:52"><name pos:start="201:37" pos:end="201:52">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="203:9" pos:end="209:70"><if pos:start="203:9" pos:end="209:70">if <condition pos:start="203:12" pos:end="203:28">(<expr pos:start="203:13" pos:end="203:27"><name pos:start="203:13" pos:end="203:23">kernel_size</name> <operator pos:start="203:25" pos:end="203:25">&lt;</operator> <literal type="number" pos:start="203:27" pos:end="203:27">0</literal></expr>)</condition><block type="pseudo" pos:start="205:13" pos:end="209:70"><block_content pos:start="205:13" pos:end="209:70">

            <expr_stmt pos:start="205:13" pos:end="209:70"><expr pos:start="205:13" pos:end="209:69"><name pos:start="205:13" pos:end="205:23">kernel_size</name> <operator pos:start="205:25" pos:end="205:25">=</operator> <call pos:start="205:27" pos:end="209:69"><name pos:start="205:27" pos:end="205:45">load_image_targphys</name><argument_list pos:start="205:46" pos:end="209:69">(<argument pos:start="205:47" pos:end="205:61"><expr pos:start="205:47" pos:end="205:61"><name pos:start="205:47" pos:end="205:61">kernel_filename</name></expr></argument>,

                                              <argument pos:start="207:47" pos:end="207:57"><expr pos:start="207:47" pos:end="207:57"><name pos:start="207:47" pos:end="207:57">kernel_base</name></expr></argument>,

                                              <argument pos:start="209:47" pos:end="209:68"><expr pos:start="209:47" pos:end="209:68"><name pos:start="209:47" pos:end="209:54">ram_size</name> <operator pos:start="209:56" pos:end="209:56">-</operator> <name pos:start="209:58" pos:end="209:68">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="211:9" pos:end="219:9"><if pos:start="211:9" pos:end="219:9">if <condition pos:start="211:12" pos:end="211:28">(<expr pos:start="211:13" pos:end="211:27"><name pos:start="211:13" pos:end="211:23">kernel_size</name> <operator pos:start="211:25" pos:end="211:25">&lt;</operator> <literal type="number" pos:start="211:27" pos:end="211:27">0</literal></expr>)</condition> <block pos:start="211:30" pos:end="219:9">{<block_content pos:start="213:13" pos:end="217:20">

            <expr_stmt pos:start="213:13" pos:end="215:39"><expr pos:start="213:13" pos:end="215:38"><call pos:start="213:13" pos:end="215:38"><name pos:start="213:13" pos:end="213:20">hw_error</name><argument_list pos:start="213:21" pos:end="215:38">(<argument pos:start="213:22" pos:end="213:57"><expr pos:start="213:22" pos:end="213:57"><literal type="string" pos:start="213:22" pos:end="213:57">"qemu: could not load kernel '%s'\n"</literal></expr></argument>,

                      <argument pos:start="215:23" pos:end="215:37"><expr pos:start="215:23" pos:end="215:37"><name pos:start="215:23" pos:end="215:37">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:20"><expr pos:start="217:13" pos:end="217:19"><call pos:start="217:13" pos:end="217:19"><name pos:start="217:13" pos:end="217:16">exit</name><argument_list pos:start="217:17" pos:end="217:19">(<argument pos:start="217:18" pos:end="217:18"><expr pos:start="217:18" pos:end="217:18"><literal type="number" pos:start="217:18" pos:end="217:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="221:9" pos:end="221:25">/* load initrd */</comment>

        <if_stmt pos:start="223:9" pos:end="251:9"><if pos:start="223:9" pos:end="243:9">if <condition pos:start="223:12" pos:end="223:28">(<expr pos:start="223:13" pos:end="223:27"><name pos:start="223:13" pos:end="223:27">initrd_filename</name></expr>)</condition> <block pos:start="223:30" pos:end="243:9">{<block_content pos:start="225:13" pos:end="241:65">

            <expr_stmt pos:start="225:13" pos:end="225:77"><expr pos:start="225:13" pos:end="225:76"><name pos:start="225:13" pos:end="225:23">initrd_base</name> <operator pos:start="225:25" pos:end="225:25">=</operator> <call pos:start="225:27" pos:end="225:76"><name pos:start="225:27" pos:end="225:36">round_page</name><argument_list pos:start="225:37" pos:end="225:76">(<argument pos:start="225:38" pos:end="225:75"><expr pos:start="225:38" pos:end="225:75"><name pos:start="225:38" pos:end="225:48">kernel_base</name> <operator pos:start="225:50" pos:end="225:50">+</operator> <name pos:start="225:52" pos:end="225:62">kernel_size</name> <operator pos:start="225:64" pos:end="225:64">+</operator> <name pos:start="225:66" pos:end="225:75">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="229:70"><expr pos:start="227:13" pos:end="229:69"><name pos:start="227:13" pos:end="227:23">initrd_size</name> <operator pos:start="227:25" pos:end="227:25">=</operator> <call pos:start="227:27" pos:end="229:69"><name pos:start="227:27" pos:end="227:45">load_image_targphys</name><argument_list pos:start="227:46" pos:end="229:69">(<argument pos:start="227:47" pos:end="227:61"><expr pos:start="227:47" pos:end="227:61"><name pos:start="227:47" pos:end="227:61">initrd_filename</name></expr></argument>, <argument pos:start="227:64" pos:end="227:74"><expr pos:start="227:64" pos:end="227:74"><name pos:start="227:64" pos:end="227:74">initrd_base</name></expr></argument>,

                                              <argument pos:start="229:47" pos:end="229:68"><expr pos:start="229:47" pos:end="229:68"><name pos:start="229:47" pos:end="229:54">ram_size</name> <operator pos:start="229:56" pos:end="229:56">-</operator> <name pos:start="229:58" pos:end="229:68">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="239:13"><if pos:start="231:13" pos:end="239:13">if <condition pos:start="231:16" pos:end="231:32">(<expr pos:start="231:17" pos:end="231:31"><name pos:start="231:17" pos:end="231:27">initrd_size</name> <operator pos:start="231:29" pos:end="231:29">&lt;</operator> <literal type="number" pos:start="231:31" pos:end="231:31">0</literal></expr>)</condition> <block pos:start="231:34" pos:end="239:13">{<block_content pos:start="233:17" pos:end="237:24">

                <expr_stmt pos:start="233:17" pos:end="235:42"><expr pos:start="233:17" pos:end="235:41"><call pos:start="233:17" pos:end="235:41"><name pos:start="233:17" pos:end="233:24">hw_error</name><argument_list pos:start="233:25" pos:end="235:41">(<argument pos:start="233:26" pos:end="233:71"><expr pos:start="233:26" pos:end="233:71"><literal type="string" pos:start="233:26" pos:end="233:71">"qemu: could not load initial ram disk '%s'\n"</literal></expr></argument>,

                         <argument pos:start="235:26" pos:end="235:40"><expr pos:start="235:26" pos:end="235:40"><name pos:start="235:26" pos:end="235:40">initrd_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:24"><expr pos:start="237:17" pos:end="237:23"><call pos:start="237:17" pos:end="237:23"><name pos:start="237:17" pos:end="237:20">exit</name><argument_list pos:start="237:21" pos:end="237:23">(<argument pos:start="237:22" pos:end="237:22"><expr pos:start="237:22" pos:end="237:22"><literal type="number" pos:start="237:22" pos:end="237:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="241:13" pos:end="241:65"><expr pos:start="241:13" pos:end="241:64"><name pos:start="241:13" pos:end="241:24">cmdline_base</name> <operator pos:start="241:26" pos:end="241:26">=</operator> <call pos:start="241:28" pos:end="241:64"><name pos:start="241:28" pos:end="241:37">round_page</name><argument_list pos:start="241:38" pos:end="241:64">(<argument pos:start="241:39" pos:end="241:63"><expr pos:start="241:39" pos:end="241:63"><name pos:start="241:39" pos:end="241:49">initrd_base</name> <operator pos:start="241:51" pos:end="241:51">+</operator> <name pos:start="241:53" pos:end="241:63">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="243:11" pos:end="251:9">else <block pos:start="243:16" pos:end="251:9">{<block_content pos:start="245:13" pos:end="249:78">

            <expr_stmt pos:start="245:13" pos:end="245:28"><expr pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:23">initrd_base</name> <operator pos:start="245:25" pos:end="245:25">=</operator> <literal type="number" pos:start="245:27" pos:end="245:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:28"><expr pos:start="247:13" pos:end="247:27"><name pos:start="247:13" pos:end="247:23">initrd_size</name> <operator pos:start="247:25" pos:end="247:25">=</operator> <literal type="number" pos:start="247:27" pos:end="247:27">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:78"><expr pos:start="249:13" pos:end="249:77"><name pos:start="249:13" pos:end="249:24">cmdline_base</name> <operator pos:start="249:26" pos:end="249:26">=</operator> <call pos:start="249:28" pos:end="249:77"><name pos:start="249:28" pos:end="249:37">round_page</name><argument_list pos:start="249:38" pos:end="249:77">(<argument pos:start="249:39" pos:end="249:76"><expr pos:start="249:39" pos:end="249:76"><name pos:start="249:39" pos:end="249:49">kernel_base</name> <operator pos:start="249:51" pos:end="249:51">+</operator> <name pos:start="249:53" pos:end="249:63">kernel_size</name> <operator pos:start="249:65" pos:end="249:65">+</operator> <name pos:start="249:67" pos:end="249:76">KERNEL_GAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="253:9" pos:end="253:30"><expr pos:start="253:9" pos:end="253:29"><name pos:start="253:9" pos:end="253:23">ppc_boot_device</name> <operator pos:start="253:25" pos:end="253:25">=</operator> <literal type="char" pos:start="253:27" pos:end="253:29">'m'</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="255:7" pos:end="309:5">else <block pos:start="255:12" pos:end="309:5">{<block_content pos:start="257:9" pos:end="307:9">

        <expr_stmt pos:start="257:9" pos:end="257:24"><expr pos:start="257:9" pos:end="257:23"><name pos:start="257:9" pos:end="257:19">kernel_base</name> <operator pos:start="257:21" pos:end="257:21">=</operator> <literal type="number" pos:start="257:23" pos:end="257:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:24"><expr pos:start="259:9" pos:end="259:23"><name pos:start="259:9" pos:end="259:19">kernel_size</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <literal type="number" pos:start="259:23" pos:end="259:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:24"><expr pos:start="261:9" pos:end="261:23"><name pos:start="261:9" pos:end="261:19">initrd_base</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <literal type="number" pos:start="261:23" pos:end="261:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:24"><expr pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:19">initrd_size</name> <operator pos:start="263:21" pos:end="263:21">=</operator> <literal type="number" pos:start="263:23" pos:end="263:23">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="265:9" pos:end="265:31"><expr pos:start="265:9" pos:end="265:30"><name pos:start="265:9" pos:end="265:23">ppc_boot_device</name> <operator pos:start="265:25" pos:end="265:25">=</operator> <literal type="char" pos:start="265:27" pos:end="265:30">'\0'</literal></expr>;</expr_stmt>

        <for pos:start="267:9" pos:end="299:9">for <control pos:start="267:13" pos:end="267:48">(<init pos:start="267:14" pos:end="267:19"><expr pos:start="267:14" pos:end="267:18"><name pos:start="267:14" pos:end="267:14">i</name> <operator pos:start="267:16" pos:end="267:16">=</operator> <literal type="number" pos:start="267:18" pos:end="267:18">0</literal></expr>;</init> <condition pos:start="267:21" pos:end="267:43"><expr pos:start="267:21" pos:end="267:42"><name pos:start="267:21" pos:end="267:34"><name pos:start="267:21" pos:end="267:31">boot_device</name><index pos:start="267:32" pos:end="267:34">[<expr pos:start="267:33" pos:end="267:33"><name pos:start="267:33" pos:end="267:33">i</name></expr>]</index></name> <operator pos:start="267:36" pos:end="267:37">!=</operator> <literal type="char" pos:start="267:39" pos:end="267:42">'\0'</literal></expr>;</condition> <incr pos:start="267:45" pos:end="267:47"><expr pos:start="267:45" pos:end="267:47"><name pos:start="267:45" pos:end="267:45">i</name><operator pos:start="267:46" pos:end="267:47">++</operator></expr></incr>)</control> <block pos:start="267:50" pos:end="299:9">{<block_content pos:start="289:13" pos:end="298:0">

            <comment type="block" pos:start="269:13" pos:end="275:15">/* TOFIX: for now, the second IDE channel is not properly

             *        used by OHW. The Mac floppy disk are not emulated.

             *        For now, OHW cannot boot from the network.

             */</comment>

<cpp:if pos:start="277:1" pos:end="277:5">#<cpp:directive pos:start="277:2" pos:end="277:3">if</cpp:directive> <expr pos:start="277:5" pos:end="277:5"><literal type="number" pos:start="277:5" pos:end="277:5">0</literal></expr></cpp:if>

            if (boot_device[i] &gt;= 'a' &amp;&amp; boot_device[i] &lt;= 'f') {

                ppc_boot_device = boot_device[i];

                break;

            }

<cpp:else pos:start="287:1" pos:end="287:5">#<cpp:directive pos:start="287:2" pos:end="287:5">else</cpp:directive></cpp:else>

            <if_stmt pos:start="289:13" pos:end="298:0"><if pos:start="289:13" pos:end="298:0">if <condition pos:start="289:16" pos:end="289:63">(<expr pos:start="289:17" pos:end="289:62"><name pos:start="289:17" pos:end="289:30"><name pos:start="289:17" pos:end="289:27">boot_device</name><index pos:start="289:28" pos:end="289:30">[<expr pos:start="289:29" pos:end="289:29"><name pos:start="289:29" pos:end="289:29">i</name></expr>]</index></name> <operator pos:start="289:32" pos:end="289:33">&gt;=</operator> <literal type="char" pos:start="289:35" pos:end="289:37">'c'</literal> <operator pos:start="289:39" pos:end="289:40">&amp;&amp;</operator> <name pos:start="289:42" pos:end="289:55"><name pos:start="289:42" pos:end="289:52">boot_device</name><index pos:start="289:53" pos:end="289:55">[<expr pos:start="289:54" pos:end="289:54"><name pos:start="289:54" pos:end="289:54">i</name></expr>]</index></name> <operator pos:start="289:57" pos:end="289:58">&lt;=</operator> <literal type="char" pos:start="289:60" pos:end="289:62">'d'</literal></expr>)</condition> <block pos:start="289:65" pos:end="298:0">{<block_content pos:start="291:17" pos:end="293:22">

                <expr_stmt pos:start="291:17" pos:end="291:49"><expr pos:start="291:17" pos:end="291:48"><name pos:start="291:17" pos:end="291:31">ppc_boot_device</name> <operator pos:start="291:33" pos:end="291:33">=</operator> <name pos:start="291:35" pos:end="291:48"><name pos:start="291:35" pos:end="291:45">boot_device</name><index pos:start="291:46" pos:end="291:48">[<expr pos:start="291:47" pos:end="291:47"><name pos:start="291:47" pos:end="291:47">i</name></expr>]</index></name></expr>;</expr_stmt>

                <break pos:start="293:17" pos:end="293:22">break;</break>

            </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="297:1" pos:end="297:6">#<cpp:directive pos:start="297:2" pos:end="297:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></for>

        <if_stmt pos:start="301:9" pos:end="307:9"><if pos:start="301:9" pos:end="307:9">if <condition pos:start="301:12" pos:end="301:36">(<expr pos:start="301:13" pos:end="301:35"><name pos:start="301:13" pos:end="301:27">ppc_boot_device</name> <operator pos:start="301:29" pos:end="301:30">==</operator> <literal type="char" pos:start="301:32" pos:end="301:35">'\0'</literal></expr>)</condition> <block pos:start="301:38" pos:end="307:9">{<block_content pos:start="303:13" pos:end="305:20">

            <expr_stmt pos:start="303:13" pos:end="303:75"><expr pos:start="303:13" pos:end="303:74"><call pos:start="303:13" pos:end="303:74"><name pos:start="303:13" pos:end="303:19">fprintf</name><argument_list pos:start="303:20" pos:end="303:74">(<argument pos:start="303:21" pos:end="303:26"><expr pos:start="303:21" pos:end="303:26"><name pos:start="303:21" pos:end="303:26">stderr</name></expr></argument>, <argument pos:start="303:29" pos:end="303:73"><expr pos:start="303:29" pos:end="303:73"><literal type="string" pos:start="303:29" pos:end="303:73">"No valid boot device for G3 Beige machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:20"><expr pos:start="305:13" pos:end="305:19"><call pos:start="305:13" pos:end="305:19"><name pos:start="305:13" pos:end="305:16">exit</name><argument_list pos:start="305:17" pos:end="305:19">(<argument pos:start="305:18" pos:end="305:18"><expr pos:start="305:18" pos:end="305:18"><literal type="number" pos:start="305:18" pos:end="305:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="313:5" pos:end="313:39">/* Register 2 MB of ISA IO space */</comment>

    <expr_stmt pos:start="315:5" pos:end="317:61"><expr pos:start="315:5" pos:end="317:60"><call pos:start="315:5" pos:end="317:60"><name pos:start="315:5" pos:end="315:28">memory_region_init_alias</name><argument_list pos:start="315:29" pos:end="317:60">(<argument pos:start="315:30" pos:end="315:32"><expr pos:start="315:30" pos:end="315:32"><name pos:start="315:30" pos:end="315:32">isa</name></expr></argument>, <argument pos:start="315:35" pos:end="315:38"><expr pos:start="315:35" pos:end="315:38"><name pos:start="315:35" pos:end="315:38">NULL</name></expr></argument>, <argument pos:start="315:41" pos:end="315:50"><expr pos:start="315:41" pos:end="315:50"><literal type="string" pos:start="315:41" pos:end="315:50">"isa_mmio"</literal></expr></argument>,

                             <argument pos:start="317:30" pos:end="317:44"><expr pos:start="317:30" pos:end="317:44"><call pos:start="317:30" pos:end="317:44"><name pos:start="317:30" pos:end="317:42">get_system_io</name><argument_list pos:start="317:43" pos:end="317:44">()</argument_list></call></expr></argument>, <argument pos:start="317:47" pos:end="317:47"><expr pos:start="317:47" pos:end="317:47"><literal type="number" pos:start="317:47" pos:end="317:47">0</literal></expr></argument>, <argument pos:start="317:50" pos:end="317:59"><expr pos:start="317:50" pos:end="317:59"><literal type="number" pos:start="317:50" pos:end="317:59">0x00200000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="319:5" pos:end="319:57"><expr pos:start="319:5" pos:end="319:56"><call pos:start="319:5" pos:end="319:56"><name pos:start="319:5" pos:end="319:31">memory_region_add_subregion</name><argument_list pos:start="319:32" pos:end="319:56">(<argument pos:start="319:33" pos:end="319:38"><expr pos:start="319:33" pos:end="319:38"><name pos:start="319:33" pos:end="319:38">sysmem</name></expr></argument>, <argument pos:start="319:41" pos:end="319:50"><expr pos:start="319:41" pos:end="319:50"><literal type="number" pos:start="319:41" pos:end="319:50">0xfe000000</literal></expr></argument>, <argument pos:start="319:53" pos:end="319:55"><expr pos:start="319:53" pos:end="319:55"><name pos:start="319:53" pos:end="319:55">isa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="323:5" pos:end="323:61">/* XXX: we register only 1 output pin for heathrow PIC */</comment>

    <expr_stmt pos:start="325:5" pos:end="325:61"><expr pos:start="325:5" pos:end="325:60"><name pos:start="325:5" pos:end="325:17">heathrow_irqs</name> <operator pos:start="325:19" pos:end="325:19">=</operator> <call pos:start="325:21" pos:end="325:60"><name pos:start="325:21" pos:end="325:29">g_malloc0</name><argument_list pos:start="325:30" pos:end="325:60">(<argument pos:start="325:31" pos:end="325:59"><expr pos:start="325:31" pos:end="325:59"><name pos:start="325:31" pos:end="325:38">smp_cpus</name> <operator pos:start="325:40" pos:end="325:40">*</operator> <sizeof pos:start="325:42" pos:end="325:59">sizeof<argument_list pos:start="325:48" pos:end="325:59">(<argument pos:start="325:49" pos:end="325:58"><expr pos:start="325:49" pos:end="325:58"><name pos:start="325:49" pos:end="325:56">qemu_irq</name> <operator pos:start="325:58" pos:end="325:58">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="329:51"><expr pos:start="327:5" pos:end="329:50"><name pos:start="327:5" pos:end="327:20"><name pos:start="327:5" pos:end="327:17">heathrow_irqs</name><index pos:start="327:18" pos:end="327:20">[<expr pos:start="327:19" pos:end="327:19"><literal type="number" pos:start="327:19" pos:end="327:19">0</literal></expr>]</index></name> <operator pos:start="327:22" pos:end="327:22">=</operator>

        <call pos:start="329:9" pos:end="329:50"><name pos:start="329:9" pos:end="329:17">g_malloc0</name><argument_list pos:start="329:18" pos:end="329:50">(<argument pos:start="329:19" pos:end="329:49"><expr pos:start="329:19" pos:end="329:49"><name pos:start="329:19" pos:end="329:26">smp_cpus</name> <operator pos:start="329:28" pos:end="329:28">*</operator> <sizeof pos:start="329:30" pos:end="329:45">sizeof<argument_list pos:start="329:36" pos:end="329:45">(<argument pos:start="329:37" pos:end="329:44"><expr pos:start="329:37" pos:end="329:44"><name pos:start="329:37" pos:end="329:44">qemu_irq</name></expr></argument>)</argument_list></sizeof> <operator pos:start="329:47" pos:end="329:47">*</operator> <literal type="number" pos:start="329:49" pos:end="329:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="331:5" pos:end="331:57">/* Connect the heathrow PIC outputs to the 6xx bus */</comment>

    <for pos:start="333:5" pos:end="353:5">for <control pos:start="333:9" pos:end="333:34">(<init pos:start="333:10" pos:end="333:15"><expr pos:start="333:10" pos:end="333:14"><name pos:start="333:10" pos:end="333:10">i</name> <operator pos:start="333:12" pos:end="333:12">=</operator> <literal type="number" pos:start="333:14" pos:end="333:14">0</literal></expr>;</init> <condition pos:start="333:17" pos:end="333:29"><expr pos:start="333:17" pos:end="333:28"><name pos:start="333:17" pos:end="333:17">i</name> <operator pos:start="333:19" pos:end="333:19">&lt;</operator> <name pos:start="333:21" pos:end="333:28">smp_cpus</name></expr>;</condition> <incr pos:start="333:31" pos:end="333:33"><expr pos:start="333:31" pos:end="333:33"><name pos:start="333:31" pos:end="333:31">i</name><operator pos:start="333:32" pos:end="333:33">++</operator></expr></incr>)</control> <block pos:start="333:36" pos:end="353:5">{<block_content pos:start="335:9" pos:end="351:9">

        <switch pos:start="335:9" pos:end="351:9">switch <condition pos:start="335:16" pos:end="335:31">(<expr pos:start="335:17" pos:end="335:30"><call pos:start="335:17" pos:end="335:30"><name pos:start="335:17" pos:end="335:25">PPC_INPUT</name><argument_list pos:start="335:26" pos:end="335:30">(<argument pos:start="335:27" pos:end="335:29"><expr pos:start="335:27" pos:end="335:29"><name pos:start="335:27" pos:end="335:29">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="335:33" pos:end="351:9">{<block_content pos:start="337:9" pos:end="349:74">

        <case pos:start="337:9" pos:end="337:33">case <expr pos:start="337:14" pos:end="337:32"><name pos:start="337:14" pos:end="337:32">PPC_FLAGS_INPUT_6xx</name></expr>:</case>

            <expr_stmt pos:start="339:13" pos:end="339:58"><expr pos:start="339:13" pos:end="339:57"><name pos:start="339:13" pos:end="339:28"><name pos:start="339:13" pos:end="339:25">heathrow_irqs</name><index pos:start="339:26" pos:end="339:28">[<expr pos:start="339:27" pos:end="339:27"><name pos:start="339:27" pos:end="339:27">i</name></expr>]</index></name> <operator pos:start="339:30" pos:end="339:30">=</operator> <name pos:start="339:32" pos:end="339:47"><name pos:start="339:32" pos:end="339:44">heathrow_irqs</name><index pos:start="339:45" pos:end="339:47">[<expr pos:start="339:46" pos:end="339:46"><literal type="number" pos:start="339:46" pos:end="339:46">0</literal></expr>]</index></name> <operator pos:start="339:49" pos:end="339:49">+</operator> <operator pos:start="339:51" pos:end="339:51">(</operator><name pos:start="339:52" pos:end="339:52">i</name> <operator pos:start="339:54" pos:end="339:54">*</operator> <literal type="number" pos:start="339:56" pos:end="339:56">1</literal><operator pos:start="339:57" pos:end="339:57">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="343:64"><expr pos:start="341:13" pos:end="343:63"><name pos:start="341:13" pos:end="341:31"><name pos:start="341:13" pos:end="341:25">heathrow_irqs</name><index pos:start="341:26" pos:end="341:28">[<expr pos:start="341:27" pos:end="341:27"><name pos:start="341:27" pos:end="341:27">i</name></expr>]</index><index pos:start="341:29" pos:end="341:31">[<expr pos:start="341:30" pos:end="341:30"><literal type="number" pos:start="341:30" pos:end="341:30">0</literal></expr>]</index></name> <operator pos:start="341:33" pos:end="341:33">=</operator>

                <operator pos:start="343:17" pos:end="343:17">(</operator><operator pos:start="343:18" pos:end="343:18">(</operator><name pos:start="343:19" pos:end="343:26">qemu_irq</name> <operator pos:start="343:28" pos:end="343:28">*</operator><operator pos:start="343:29" pos:end="343:29">)</operator><name pos:start="343:30" pos:end="343:44"><name pos:start="343:30" pos:end="343:32">env</name><operator pos:start="343:33" pos:end="343:34">-&gt;</operator><name pos:start="343:35" pos:end="343:44">irq_inputs</name></name><operator pos:start="343:45" pos:end="343:45">)</operator><index pos:start="343:46" pos:end="343:63">[<expr pos:start="343:47" pos:end="343:62"><name pos:start="343:47" pos:end="343:62">PPC6xx_INPUT_INT</name></expr>]</index></expr>;</expr_stmt>

            <break pos:start="345:13" pos:end="345:18">break;</break>

        <default pos:start="347:9" pos:end="347:16">default:</default>

            <expr_stmt pos:start="349:13" pos:end="349:74"><expr pos:start="349:13" pos:end="349:73"><call pos:start="349:13" pos:end="349:73"><name pos:start="349:13" pos:end="349:20">hw_error</name><argument_list pos:start="349:21" pos:end="349:73">(<argument pos:start="349:22" pos:end="349:72"><expr pos:start="349:22" pos:end="349:72"><literal type="string" pos:start="349:22" pos:end="349:72">"Bus model not supported on OldWorld Mac machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></for>



    <comment type="block" pos:start="357:5" pos:end="357:28">/* Timebase Frequency */</comment>

    <if_stmt pos:start="359:5" pos:end="367:5"><if pos:start="359:5" pos:end="363:5">if <condition pos:start="359:8" pos:end="359:22">(<expr pos:start="359:9" pos:end="359:21"><call pos:start="359:9" pos:end="359:21"><name pos:start="359:9" pos:end="359:19">kvm_enabled</name><argument_list pos:start="359:20" pos:end="359:21">()</argument_list></call></expr>)</condition> <block pos:start="359:24" pos:end="363:5">{<block_content pos:start="361:9" pos:end="361:37">

        <expr_stmt pos:start="361:9" pos:end="361:37"><expr pos:start="361:9" pos:end="361:36"><name pos:start="361:9" pos:end="361:14">tbfreq</name> <operator pos:start="361:16" pos:end="361:16">=</operator> <call pos:start="361:18" pos:end="361:36"><name pos:start="361:18" pos:end="361:34">kvmppc_get_tbfreq</name><argument_list pos:start="361:35" pos:end="361:36">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="363:7" pos:end="367:5">else <block pos:start="363:12" pos:end="367:5">{<block_content pos:start="365:9" pos:end="365:24">

        <expr_stmt pos:start="365:9" pos:end="365:24"><expr pos:start="365:9" pos:end="365:23"><name pos:start="365:9" pos:end="365:14">tbfreq</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <name pos:start="365:18" pos:end="365:23">TBFREQ</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="371:5" pos:end="371:32">/* init basic PC hardware */</comment>

    <if_stmt pos:start="373:5" pos:end="377:5"><if pos:start="373:5" pos:end="377:5">if <condition pos:start="373:8" pos:end="373:46">(<expr pos:start="373:9" pos:end="373:45"><call pos:start="373:9" pos:end="373:22"><name pos:start="373:9" pos:end="373:17">PPC_INPUT</name><argument_list pos:start="373:18" pos:end="373:22">(<argument pos:start="373:19" pos:end="373:21"><expr pos:start="373:19" pos:end="373:21"><name pos:start="373:19" pos:end="373:21">env</name></expr></argument>)</argument_list></call> <operator pos:start="373:24" pos:end="373:25">!=</operator> <name pos:start="373:27" pos:end="373:45">PPC_FLAGS_INPUT_6xx</name></expr>)</condition> <block pos:start="373:48" pos:end="377:5">{<block_content pos:start="375:9" pos:end="375:68">

        <expr_stmt pos:start="375:9" pos:end="375:68"><expr pos:start="375:9" pos:end="375:67"><call pos:start="375:9" pos:end="375:67"><name pos:start="375:9" pos:end="375:16">hw_error</name><argument_list pos:start="375:17" pos:end="375:67">(<argument pos:start="375:18" pos:end="375:66"><expr pos:start="375:18" pos:end="375:66"><literal type="string" pos:start="375:18" pos:end="375:66">"Only 6xx bus is supported on heathrow machine\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="379:5" pos:end="379:56"><expr pos:start="379:5" pos:end="379:55"><name pos:start="379:5" pos:end="379:7">pic</name> <operator pos:start="379:9" pos:end="379:9">=</operator> <call pos:start="379:11" pos:end="379:55"><name pos:start="379:11" pos:end="379:27">heathrow_pic_init</name><argument_list pos:start="379:28" pos:end="379:55">(<argument pos:start="379:29" pos:end="379:36"><expr pos:start="379:29" pos:end="379:36"><operator pos:start="379:29" pos:end="379:29">&amp;</operator><name pos:start="379:30" pos:end="379:36">pic_mem</name></expr></argument>, <argument pos:start="379:39" pos:end="379:39"><expr pos:start="379:39" pos:end="379:39"><literal type="number" pos:start="379:39" pos:end="379:39">1</literal></expr></argument>, <argument pos:start="379:42" pos:end="379:54"><expr pos:start="379:42" pos:end="379:54"><name pos:start="379:42" pos:end="379:54">heathrow_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="381:5" pos:end="385:48"><expr pos:start="381:5" pos:end="385:47"><name pos:start="381:5" pos:end="381:11">pci_bus</name> <operator pos:start="381:13" pos:end="381:13">=</operator> <call pos:start="381:15" pos:end="385:47"><name pos:start="381:15" pos:end="381:30">pci_grackle_init</name><argument_list pos:start="381:31" pos:end="385:47">(<argument pos:start="381:32" pos:end="381:41"><expr pos:start="381:32" pos:end="381:41"><literal type="number" pos:start="381:32" pos:end="381:41">0xfec00000</literal></expr></argument>, <argument pos:start="381:44" pos:end="381:46"><expr pos:start="381:44" pos:end="381:46"><name pos:start="381:44" pos:end="381:46">pic</name></expr></argument>,

                               <argument pos:start="383:32" pos:end="383:50"><expr pos:start="383:32" pos:end="383:50"><call pos:start="383:32" pos:end="383:50"><name pos:start="383:32" pos:end="383:48">get_system_memory</name><argument_list pos:start="383:49" pos:end="383:50">()</argument_list></call></expr></argument>,

                               <argument pos:start="385:32" pos:end="385:46"><expr pos:start="385:32" pos:end="385:46"><call pos:start="385:32" pos:end="385:46"><name pos:start="385:32" pos:end="385:44">get_system_io</name><argument_list pos:start="385:45" pos:end="385:46">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="387:5" pos:end="387:26"><expr pos:start="387:5" pos:end="387:25"><call pos:start="387:5" pos:end="387:25"><name pos:start="387:5" pos:end="387:16">pci_vga_init</name><argument_list pos:start="387:17" pos:end="387:25">(<argument pos:start="387:18" pos:end="387:24"><expr pos:start="387:18" pos:end="387:24"><name pos:start="387:18" pos:end="387:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="391:5" pos:end="393:61"><expr pos:start="391:5" pos:end="393:60"><name pos:start="391:5" pos:end="391:12">escc_mem</name> <operator pos:start="391:14" pos:end="391:14">=</operator> <call pos:start="391:16" pos:end="393:60"><name pos:start="391:16" pos:end="391:24">escc_init</name><argument_list pos:start="391:25" pos:end="393:60">(<argument pos:start="391:26" pos:end="391:26"><expr pos:start="391:26" pos:end="391:26"><literal type="number" pos:start="391:26" pos:end="391:26">0</literal></expr></argument>, <argument pos:start="391:29" pos:end="391:37"><expr pos:start="391:29" pos:end="391:37"><name pos:start="391:29" pos:end="391:37"><name pos:start="391:29" pos:end="391:31">pic</name><index pos:start="391:32" pos:end="391:37">[<expr pos:start="391:33" pos:end="391:36"><literal type="number" pos:start="391:33" pos:end="391:36">0x0f</literal></expr>]</index></name></expr></argument>, <argument pos:start="391:40" pos:end="391:48"><expr pos:start="391:40" pos:end="391:48"><name pos:start="391:40" pos:end="391:48"><name pos:start="391:40" pos:end="391:42">pic</name><index pos:start="391:43" pos:end="391:48">[<expr pos:start="391:44" pos:end="391:47"><literal type="number" pos:start="391:44" pos:end="391:47">0x10</literal></expr>]</index></name></expr></argument>, <argument pos:start="391:51" pos:end="391:63"><expr pos:start="391:51" pos:end="391:63"><name pos:start="391:51" pos:end="391:63"><name pos:start="391:51" pos:end="391:60">serial_hds</name><index pos:start="391:61" pos:end="391:63">[<expr pos:start="391:62" pos:end="391:62"><literal type="number" pos:start="391:62" pos:end="391:62">0</literal></expr>]</index></name></expr></argument>,

                               <argument pos:start="393:32" pos:end="393:44"><expr pos:start="393:32" pos:end="393:44"><name pos:start="393:32" pos:end="393:44"><name pos:start="393:32" pos:end="393:41">serial_hds</name><index pos:start="393:42" pos:end="393:44">[<expr pos:start="393:43" pos:end="393:43"><literal type="number" pos:start="393:43" pos:end="393:43">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="393:47" pos:end="393:56"><expr pos:start="393:47" pos:end="393:56"><name pos:start="393:47" pos:end="393:56">ESCC_CLOCK</name></expr></argument>, <argument pos:start="393:59" pos:end="393:59"><expr pos:start="393:59" pos:end="393:59"><literal type="number" pos:start="393:59" pos:end="393:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="397:72"><expr pos:start="395:5" pos:end="397:71"><call pos:start="395:5" pos:end="397:71"><name pos:start="395:5" pos:end="395:28">memory_region_init_alias</name><argument_list pos:start="395:29" pos:end="397:71">(<argument pos:start="395:30" pos:end="395:37"><expr pos:start="395:30" pos:end="395:37"><name pos:start="395:30" pos:end="395:37">escc_bar</name></expr></argument>, <argument pos:start="395:40" pos:end="395:43"><expr pos:start="395:40" pos:end="395:43"><name pos:start="395:40" pos:end="395:43">NULL</name></expr></argument>, <argument pos:start="395:46" pos:end="395:55"><expr pos:start="395:46" pos:end="395:55"><literal type="string" pos:start="395:46" pos:end="395:55">"escc-bar"</literal></expr></argument>,

                             <argument pos:start="397:30" pos:end="397:37"><expr pos:start="397:30" pos:end="397:37"><name pos:start="397:30" pos:end="397:37">escc_mem</name></expr></argument>, <argument pos:start="397:40" pos:end="397:40"><expr pos:start="397:40" pos:end="397:40"><literal type="number" pos:start="397:40" pos:end="397:40">0</literal></expr></argument>, <argument pos:start="397:43" pos:end="397:70"><expr pos:start="397:43" pos:end="397:70"><call pos:start="397:43" pos:end="397:70"><name pos:start="397:43" pos:end="397:60">memory_region_size</name><argument_list pos:start="397:61" pos:end="397:70">(<argument pos:start="397:62" pos:end="397:69"><expr pos:start="397:62" pos:end="397:69"><name pos:start="397:62" pos:end="397:69">escc_mem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="401:5" pos:end="403:69">for<control pos:start="401:8" pos:end="401:32">(<init pos:start="401:9" pos:end="401:14"><expr pos:start="401:9" pos:end="401:13"><name pos:start="401:9" pos:end="401:9">i</name> <operator pos:start="401:11" pos:end="401:11">=</operator> <literal type="number" pos:start="401:13" pos:end="401:13">0</literal></expr>;</init> <condition pos:start="401:16" pos:end="401:27"><expr pos:start="401:16" pos:end="401:26"><name pos:start="401:16" pos:end="401:16">i</name> <operator pos:start="401:18" pos:end="401:18">&lt;</operator> <name pos:start="401:20" pos:end="401:26">nb_nics</name></expr>;</condition> <incr pos:start="401:29" pos:end="401:31"><expr pos:start="401:29" pos:end="401:31"><name pos:start="401:29" pos:end="401:29">i</name><operator pos:start="401:30" pos:end="401:31">++</operator></expr></incr>)</control><block type="pseudo" pos:start="403:9" pos:end="403:69"><block_content pos:start="403:9" pos:end="403:69">

        <expr_stmt pos:start="403:9" pos:end="403:69"><expr pos:start="403:9" pos:end="403:68"><call pos:start="403:9" pos:end="403:68"><name pos:start="403:9" pos:end="403:27">pci_nic_init_nofail</name><argument_list pos:start="403:28" pos:end="403:68">(<argument pos:start="403:29" pos:end="403:40"><expr pos:start="403:29" pos:end="403:40"><operator pos:start="403:29" pos:end="403:29">&amp;</operator><name pos:start="403:30" pos:end="403:40"><name pos:start="403:30" pos:end="403:37">nd_table</name><index pos:start="403:38" pos:end="403:40">[<expr pos:start="403:39" pos:end="403:39"><name pos:start="403:39" pos:end="403:39">i</name></expr>]</index></name></expr></argument>, <argument pos:start="403:43" pos:end="403:49"><expr pos:start="403:43" pos:end="403:49"><name pos:start="403:43" pos:end="403:49">pci_bus</name></expr></argument>, <argument pos:start="403:52" pos:end="403:61"><expr pos:start="403:52" pos:end="403:61"><literal type="string" pos:start="403:52" pos:end="403:61">"ne2k_pci"</literal></expr></argument>, <argument pos:start="403:64" pos:end="403:67"><expr pos:start="403:64" pos:end="403:67"><name pos:start="403:64" pos:end="403:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>





    <expr_stmt pos:start="409:5" pos:end="409:35"><expr pos:start="409:5" pos:end="409:34"><call pos:start="409:5" pos:end="409:34"><name pos:start="409:5" pos:end="409:17">ide_drive_get</name><argument_list pos:start="409:18" pos:end="409:34">(<argument pos:start="409:19" pos:end="409:20"><expr pos:start="409:19" pos:end="409:20"><name pos:start="409:19" pos:end="409:20">hd</name></expr></argument>, <argument pos:start="409:23" pos:end="409:33"><expr pos:start="409:23" pos:end="409:33"><name pos:start="409:23" pos:end="409:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="413:5" pos:end="413:57"><expr pos:start="413:5" pos:end="413:56"><name pos:start="413:5" pos:end="413:9">macio</name> <operator pos:start="413:11" pos:end="413:11">=</operator> <call pos:start="413:13" pos:end="413:56"><name pos:start="413:13" pos:end="413:22">pci_create</name><argument_list pos:start="413:23" pos:end="413:56">(<argument pos:start="413:24" pos:end="413:30"><expr pos:start="413:24" pos:end="413:30"><name pos:start="413:24" pos:end="413:30">pci_bus</name></expr></argument>, <argument pos:start="413:33" pos:end="413:34"><expr pos:start="413:33" pos:end="413:34"><operator pos:start="413:33" pos:end="413:33">-</operator><literal type="number" pos:start="413:34" pos:end="413:34">1</literal></expr></argument>, <argument pos:start="413:37" pos:end="413:55"><expr pos:start="413:37" pos:end="413:55"><name pos:start="413:37" pos:end="413:55">TYPE_OLDWORLD_MACIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="415:5" pos:end="415:24"><expr pos:start="415:5" pos:end="415:23"><name pos:start="415:5" pos:end="415:7">dev</name> <operator pos:start="415:9" pos:end="415:9">=</operator> <call pos:start="415:11" pos:end="415:23"><name pos:start="415:11" pos:end="415:16">DEVICE</name><argument_list pos:start="415:17" pos:end="415:23">(<argument pos:start="415:18" pos:end="415:22"><expr pos:start="415:18" pos:end="415:22"><name pos:start="415:18" pos:end="415:22">macio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="417:5" pos:end="417:45"><expr pos:start="417:5" pos:end="417:44"><call pos:start="417:5" pos:end="417:44"><name pos:start="417:5" pos:end="417:25">qdev_connect_gpio_out</name><argument_list pos:start="417:26" pos:end="417:44">(<argument pos:start="417:27" pos:end="417:29"><expr pos:start="417:27" pos:end="417:29"><name pos:start="417:27" pos:end="417:29">dev</name></expr></argument>, <argument pos:start="417:32" pos:end="417:32"><expr pos:start="417:32" pos:end="417:32"><literal type="number" pos:start="417:32" pos:end="417:32">0</literal></expr></argument>, <argument pos:start="417:35" pos:end="417:43"><expr pos:start="417:35" pos:end="417:43"><name pos:start="417:35" pos:end="417:43"><name pos:start="417:35" pos:end="417:37">pic</name><index pos:start="417:38" pos:end="417:43">[<expr pos:start="417:39" pos:end="417:42"><literal type="number" pos:start="417:39" pos:end="417:42">0x12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="417:47" pos:end="417:56">/* CUDA */</comment>

    <expr_stmt pos:start="419:5" pos:end="419:45"><expr pos:start="419:5" pos:end="419:44"><call pos:start="419:5" pos:end="419:44"><name pos:start="419:5" pos:end="419:25">qdev_connect_gpio_out</name><argument_list pos:start="419:26" pos:end="419:44">(<argument pos:start="419:27" pos:end="419:29"><expr pos:start="419:27" pos:end="419:29"><name pos:start="419:27" pos:end="419:29">dev</name></expr></argument>, <argument pos:start="419:32" pos:end="419:32"><expr pos:start="419:32" pos:end="419:32"><literal type="number" pos:start="419:32" pos:end="419:32">1</literal></expr></argument>, <argument pos:start="419:35" pos:end="419:43"><expr pos:start="419:35" pos:end="419:43"><name pos:start="419:35" pos:end="419:43"><name pos:start="419:35" pos:end="419:37">pic</name><index pos:start="419:38" pos:end="419:43">[<expr pos:start="419:39" pos:end="419:42"><literal type="number" pos:start="419:39" pos:end="419:42">0x0D</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="419:47" pos:end="419:57">/* IDE-0 */</comment>

    <expr_stmt pos:start="421:5" pos:end="421:45"><expr pos:start="421:5" pos:end="421:44"><call pos:start="421:5" pos:end="421:44"><name pos:start="421:5" pos:end="421:25">qdev_connect_gpio_out</name><argument_list pos:start="421:26" pos:end="421:44">(<argument pos:start="421:27" pos:end="421:29"><expr pos:start="421:27" pos:end="421:29"><name pos:start="421:27" pos:end="421:29">dev</name></expr></argument>, <argument pos:start="421:32" pos:end="421:32"><expr pos:start="421:32" pos:end="421:32"><literal type="number" pos:start="421:32" pos:end="421:32">2</literal></expr></argument>, <argument pos:start="421:35" pos:end="421:43"><expr pos:start="421:35" pos:end="421:43"><name pos:start="421:35" pos:end="421:43"><name pos:start="421:35" pos:end="421:37">pic</name><index pos:start="421:38" pos:end="421:43">[<expr pos:start="421:39" pos:end="421:42"><literal type="number" pos:start="421:39" pos:end="421:42">0x02</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="421:47" pos:end="421:61">/* IDE-0 DMA */</comment>

    <expr_stmt pos:start="423:5" pos:end="423:45"><expr pos:start="423:5" pos:end="423:44"><call pos:start="423:5" pos:end="423:44"><name pos:start="423:5" pos:end="423:25">qdev_connect_gpio_out</name><argument_list pos:start="423:26" pos:end="423:44">(<argument pos:start="423:27" pos:end="423:29"><expr pos:start="423:27" pos:end="423:29"><name pos:start="423:27" pos:end="423:29">dev</name></expr></argument>, <argument pos:start="423:32" pos:end="423:32"><expr pos:start="423:32" pos:end="423:32"><literal type="number" pos:start="423:32" pos:end="423:32">3</literal></expr></argument>, <argument pos:start="423:35" pos:end="423:43"><expr pos:start="423:35" pos:end="423:43"><name pos:start="423:35" pos:end="423:43"><name pos:start="423:35" pos:end="423:37">pic</name><index pos:start="423:38" pos:end="423:43">[<expr pos:start="423:39" pos:end="423:42"><literal type="number" pos:start="423:39" pos:end="423:42">0x0E</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="423:47" pos:end="423:57">/* IDE-1 */</comment>

    <expr_stmt pos:start="425:5" pos:end="425:45"><expr pos:start="425:5" pos:end="425:44"><call pos:start="425:5" pos:end="425:44"><name pos:start="425:5" pos:end="425:25">qdev_connect_gpio_out</name><argument_list pos:start="425:26" pos:end="425:44">(<argument pos:start="425:27" pos:end="425:29"><expr pos:start="425:27" pos:end="425:29"><name pos:start="425:27" pos:end="425:29">dev</name></expr></argument>, <argument pos:start="425:32" pos:end="425:32"><expr pos:start="425:32" pos:end="425:32"><literal type="number" pos:start="425:32" pos:end="425:32">4</literal></expr></argument>, <argument pos:start="425:35" pos:end="425:43"><expr pos:start="425:35" pos:end="425:43"><name pos:start="425:35" pos:end="425:43"><name pos:start="425:35" pos:end="425:37">pic</name><index pos:start="425:38" pos:end="425:43">[<expr pos:start="425:39" pos:end="425:42"><literal type="number" pos:start="425:39" pos:end="425:42">0x03</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="425:47" pos:end="425:61">/* IDE-1 DMA */</comment>


    <expr_stmt pos:start="428:5" pos:end="428:41"><expr pos:start="428:5" pos:end="428:40"><call pos:start="428:5" pos:end="428:40"><name pos:start="428:5" pos:end="428:14">macio_init</name><argument_list pos:start="428:15" pos:end="428:40">(<argument pos:start="428:16" pos:end="428:20"><expr pos:start="428:16" pos:end="428:20"><name pos:start="428:16" pos:end="428:20">macio</name></expr></argument>, <argument pos:start="428:23" pos:end="428:29"><expr pos:start="428:23" pos:end="428:29"><name pos:start="428:23" pos:end="428:29">pic_mem</name></expr></argument>, <argument pos:start="428:32" pos:end="428:39"><expr pos:start="428:32" pos:end="428:39"><name pos:start="428:32" pos:end="428:39">escc_bar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="432:5" pos:end="434:67"><expr pos:start="432:5" pos:end="434:66"><name pos:start="432:5" pos:end="432:13">macio_ide</name> <operator pos:start="432:15" pos:end="432:15">=</operator> <call pos:start="432:17" pos:end="434:66"><name pos:start="432:17" pos:end="432:25">MACIO_IDE</name><argument_list pos:start="432:26" pos:end="434:66">(<argument pos:start="432:27" pos:end="434:65"><expr pos:start="432:27" pos:end="434:65"><call pos:start="432:27" pos:end="434:65"><name pos:start="432:27" pos:end="432:55">object_resolve_path_component</name><argument_list pos:start="432:56" pos:end="434:65">(<argument pos:start="432:57" pos:end="432:69"><expr pos:start="432:57" pos:end="432:69"><call pos:start="432:57" pos:end="432:69"><name pos:start="432:57" pos:end="432:62">OBJECT</name><argument_list pos:start="432:63" pos:end="432:69">(<argument pos:start="432:64" pos:end="432:68"><expr pos:start="432:64" pos:end="432:68"><name pos:start="432:64" pos:end="432:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="434:57" pos:end="434:64"><expr pos:start="434:57" pos:end="434:64"><literal type="string" pos:start="434:57" pos:end="434:64">"ide[0]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="436:5" pos:end="436:41"><expr pos:start="436:5" pos:end="436:40"><call pos:start="436:5" pos:end="436:40"><name pos:start="436:5" pos:end="436:25">macio_ide_init_drives</name><argument_list pos:start="436:26" pos:end="436:40">(<argument pos:start="436:27" pos:end="436:35"><expr pos:start="436:27" pos:end="436:35"><name pos:start="436:27" pos:end="436:35">macio_ide</name></expr></argument>, <argument pos:start="436:38" pos:end="436:39"><expr pos:start="436:38" pos:end="436:39"><name pos:start="436:38" pos:end="436:39">hd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="440:5" pos:end="442:67"><expr pos:start="440:5" pos:end="442:66"><name pos:start="440:5" pos:end="440:13">macio_ide</name> <operator pos:start="440:15" pos:end="440:15">=</operator> <call pos:start="440:17" pos:end="442:66"><name pos:start="440:17" pos:end="440:25">MACIO_IDE</name><argument_list pos:start="440:26" pos:end="442:66">(<argument pos:start="440:27" pos:end="442:65"><expr pos:start="440:27" pos:end="442:65"><call pos:start="440:27" pos:end="442:65"><name pos:start="440:27" pos:end="440:55">object_resolve_path_component</name><argument_list pos:start="440:56" pos:end="442:65">(<argument pos:start="440:57" pos:end="440:69"><expr pos:start="440:57" pos:end="440:69"><call pos:start="440:57" pos:end="440:69"><name pos:start="440:57" pos:end="440:62">OBJECT</name><argument_list pos:start="440:63" pos:end="440:69">(<argument pos:start="440:64" pos:end="440:68"><expr pos:start="440:64" pos:end="440:68"><name pos:start="440:64" pos:end="440:68">macio</name></expr></argument>)</argument_list></call></expr></argument>,

                                                        <argument pos:start="442:57" pos:end="442:64"><expr pos:start="442:57" pos:end="442:64"><literal type="string" pos:start="442:57" pos:end="442:64">"ide[1]"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="444:5" pos:end="444:56"><expr pos:start="444:5" pos:end="444:55"><call pos:start="444:5" pos:end="444:55"><name pos:start="444:5" pos:end="444:25">macio_ide_init_drives</name><argument_list pos:start="444:26" pos:end="444:55">(<argument pos:start="444:27" pos:end="444:35"><expr pos:start="444:27" pos:end="444:35"><name pos:start="444:27" pos:end="444:35">macio_ide</name></expr></argument>, <argument pos:start="444:38" pos:end="444:54"><expr pos:start="444:38" pos:end="444:54"><operator pos:start="444:38" pos:end="444:38">&amp;</operator><name pos:start="444:39" pos:end="444:54"><name pos:start="444:39" pos:end="444:40">hd</name><index pos:start="444:41" pos:end="444:54">[<expr pos:start="444:42" pos:end="444:53"><name pos:start="444:42" pos:end="444:53">MAX_IDE_DEVS</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="448:5" pos:end="448:71"><expr pos:start="448:5" pos:end="448:70"><name pos:start="448:5" pos:end="448:7">dev</name> <operator pos:start="448:9" pos:end="448:9">=</operator> <call pos:start="448:11" pos:end="448:70"><name pos:start="448:11" pos:end="448:16">DEVICE</name><argument_list pos:start="448:17" pos:end="448:70">(<argument pos:start="448:18" pos:end="448:69"><expr pos:start="448:18" pos:end="448:69"><call pos:start="448:18" pos:end="448:69"><name pos:start="448:18" pos:end="448:46">object_resolve_path_component</name><argument_list pos:start="448:47" pos:end="448:69">(<argument pos:start="448:48" pos:end="448:60"><expr pos:start="448:48" pos:end="448:60"><call pos:start="448:48" pos:end="448:60"><name pos:start="448:48" pos:end="448:53">OBJECT</name><argument_list pos:start="448:54" pos:end="448:60">(<argument pos:start="448:55" pos:end="448:59"><expr pos:start="448:55" pos:end="448:59"><name pos:start="448:55" pos:end="448:59">macio</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="448:63" pos:end="448:68"><expr pos:start="448:63" pos:end="448:68"><literal type="string" pos:start="448:63" pos:end="448:68">"cuda"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="450:5" pos:end="450:47"><expr pos:start="450:5" pos:end="450:46"><name pos:start="450:5" pos:end="450:11">adb_bus</name> <operator pos:start="450:13" pos:end="450:13">=</operator> <call pos:start="450:15" pos:end="450:46"><name pos:start="450:15" pos:end="450:32">qdev_get_child_bus</name><argument_list pos:start="450:33" pos:end="450:46">(<argument pos:start="450:34" pos:end="450:36"><expr pos:start="450:34" pos:end="450:36"><name pos:start="450:34" pos:end="450:36">dev</name></expr></argument>, <argument pos:start="450:39" pos:end="450:45"><expr pos:start="450:39" pos:end="450:45"><literal type="string" pos:start="450:39" pos:end="450:45">"adb.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="452:5" pos:end="452:50"><expr pos:start="452:5" pos:end="452:49"><name pos:start="452:5" pos:end="452:7">dev</name> <operator pos:start="452:9" pos:end="452:9">=</operator> <call pos:start="452:11" pos:end="452:49"><name pos:start="452:11" pos:end="452:21">qdev_create</name><argument_list pos:start="452:22" pos:end="452:49">(<argument pos:start="452:23" pos:end="452:29"><expr pos:start="452:23" pos:end="452:29"><name pos:start="452:23" pos:end="452:29">adb_bus</name></expr></argument>, <argument pos:start="452:32" pos:end="452:48"><expr pos:start="452:32" pos:end="452:48"><name pos:start="452:32" pos:end="452:48">TYPE_ADB_KEYBOARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="454:5" pos:end="454:26"><expr pos:start="454:5" pos:end="454:25"><call pos:start="454:5" pos:end="454:25"><name pos:start="454:5" pos:end="454:20">qdev_init_nofail</name><argument_list pos:start="454:21" pos:end="454:25">(<argument pos:start="454:22" pos:end="454:24"><expr pos:start="454:22" pos:end="454:24"><name pos:start="454:22" pos:end="454:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="456:5" pos:end="456:47"><expr pos:start="456:5" pos:end="456:46"><name pos:start="456:5" pos:end="456:7">dev</name> <operator pos:start="456:9" pos:end="456:9">=</operator> <call pos:start="456:11" pos:end="456:46"><name pos:start="456:11" pos:end="456:21">qdev_create</name><argument_list pos:start="456:22" pos:end="456:46">(<argument pos:start="456:23" pos:end="456:29"><expr pos:start="456:23" pos:end="456:29"><name pos:start="456:23" pos:end="456:29">adb_bus</name></expr></argument>, <argument pos:start="456:32" pos:end="456:45"><expr pos:start="456:32" pos:end="456:45"><name pos:start="456:32" pos:end="456:45">TYPE_ADB_MOUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="458:5" pos:end="458:26"><expr pos:start="458:5" pos:end="458:25"><call pos:start="458:5" pos:end="458:25"><name pos:start="458:5" pos:end="458:20">qdev_init_nofail</name><argument_list pos:start="458:21" pos:end="458:25">(<argument pos:start="458:22" pos:end="458:24"><expr pos:start="458:22" pos:end="458:24"><name pos:start="458:22" pos:end="458:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="462:5" pos:end="466:5"><if pos:start="462:5" pos:end="466:5">if <condition pos:start="462:8" pos:end="462:27">(<expr pos:start="462:9" pos:end="462:26"><call pos:start="462:9" pos:end="462:26"><name pos:start="462:9" pos:end="462:19">usb_enabled</name><argument_list pos:start="462:20" pos:end="462:26">(<argument pos:start="462:21" pos:end="462:25"><expr pos:start="462:21" pos:end="462:25"><name pos:start="462:21" pos:end="462:25">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="462:29" pos:end="466:5">{<block_content pos:start="464:9" pos:end="464:51">

        <expr_stmt pos:start="464:9" pos:end="464:51"><expr pos:start="464:9" pos:end="464:50"><call pos:start="464:9" pos:end="464:50"><name pos:start="464:9" pos:end="464:25">pci_create_simple</name><argument_list pos:start="464:26" pos:end="464:50">(<argument pos:start="464:27" pos:end="464:33"><expr pos:start="464:27" pos:end="464:33"><name pos:start="464:27" pos:end="464:33">pci_bus</name></expr></argument>, <argument pos:start="464:36" pos:end="464:37"><expr pos:start="464:36" pos:end="464:37"><operator pos:start="464:36" pos:end="464:36">-</operator><literal type="number" pos:start="464:37" pos:end="464:37">1</literal></expr></argument>, <argument pos:start="464:40" pos:end="464:49"><expr pos:start="464:40" pos:end="464:49"><literal type="string" pos:start="464:40" pos:end="464:49">"pci-ohci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="470:5" pos:end="472:27"><if pos:start="470:5" pos:end="472:27">if <condition pos:start="470:8" pos:end="470:73">(<expr pos:start="470:9" pos:end="470:72"><name pos:start="470:9" pos:end="470:21">graphic_depth</name> <operator pos:start="470:23" pos:end="470:24">!=</operator> <literal type="number" pos:start="470:26" pos:end="470:27">15</literal> <operator pos:start="470:29" pos:end="470:30">&amp;&amp;</operator> <name pos:start="470:32" pos:end="470:44">graphic_depth</name> <operator pos:start="470:46" pos:end="470:47">!=</operator> <literal type="number" pos:start="470:49" pos:end="470:50">32</literal> <operator pos:start="470:52" pos:end="470:53">&amp;&amp;</operator> <name pos:start="470:55" pos:end="470:67">graphic_depth</name> <operator pos:start="470:69" pos:end="470:70">!=</operator> <literal type="number" pos:start="470:72" pos:end="470:72">8</literal></expr>)</condition><block type="pseudo" pos:start="472:9" pos:end="472:27"><block_content pos:start="472:9" pos:end="472:27">

        <expr_stmt pos:start="472:9" pos:end="472:27"><expr pos:start="472:9" pos:end="472:26"><name pos:start="472:9" pos:end="472:21">graphic_depth</name> <operator pos:start="472:23" pos:end="472:23">=</operator> <literal type="number" pos:start="472:25" pos:end="472:26">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="476:5" pos:end="476:42">/* No PCI init: the BIOS will do it */</comment>



    <expr_stmt pos:start="480:5" pos:end="480:55"><expr pos:start="480:5" pos:end="480:54"><name pos:start="480:5" pos:end="480:10">fw_cfg</name> <operator pos:start="480:12" pos:end="480:12">=</operator> <call pos:start="480:14" pos:end="480:54"><name pos:start="480:14" pos:end="480:24">fw_cfg_init</name><argument_list pos:start="480:25" pos:end="480:54">(<argument pos:start="480:26" pos:end="480:26"><expr pos:start="480:26" pos:end="480:26"><literal type="number" pos:start="480:26" pos:end="480:26">0</literal></expr></argument>, <argument pos:start="480:29" pos:end="480:29"><expr pos:start="480:29" pos:end="480:29"><literal type="number" pos:start="480:29" pos:end="480:29">0</literal></expr></argument>, <argument pos:start="480:32" pos:end="480:39"><expr pos:start="480:32" pos:end="480:39"><name pos:start="480:32" pos:end="480:39">CFG_ADDR</name></expr></argument>, <argument pos:start="480:42" pos:end="480:53"><expr pos:start="480:42" pos:end="480:53"><name pos:start="480:42" pos:end="480:49">CFG_ADDR</name> <operator pos:start="480:51" pos:end="480:51">+</operator> <literal type="number" pos:start="480:53" pos:end="480:53">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="482:5" pos:end="482:64"><expr pos:start="482:5" pos:end="482:63"><call pos:start="482:5" pos:end="482:63"><name pos:start="482:5" pos:end="482:18">fw_cfg_add_i16</name><argument_list pos:start="482:19" pos:end="482:63">(<argument pos:start="482:20" pos:end="482:25"><expr pos:start="482:20" pos:end="482:25"><name pos:start="482:20" pos:end="482:25">fw_cfg</name></expr></argument>, <argument pos:start="482:28" pos:end="482:42"><expr pos:start="482:28" pos:end="482:42"><name pos:start="482:28" pos:end="482:42">FW_CFG_MAX_CPUS</name></expr></argument>, <argument pos:start="482:45" pos:end="482:62"><expr pos:start="482:45" pos:end="482:62"><operator pos:start="482:45" pos:end="482:45">(</operator><name pos:start="482:46" pos:end="482:53">uint16_t</name><operator pos:start="482:54" pos:end="482:54">)</operator><name pos:start="482:55" pos:end="482:62">max_cpus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="484:5" pos:end="484:41"><expr pos:start="484:5" pos:end="484:40"><call pos:start="484:5" pos:end="484:40"><name pos:start="484:5" pos:end="484:18">fw_cfg_add_i32</name><argument_list pos:start="484:19" pos:end="484:40">(<argument pos:start="484:20" pos:end="484:25"><expr pos:start="484:20" pos:end="484:25"><name pos:start="484:20" pos:end="484:25">fw_cfg</name></expr></argument>, <argument pos:start="484:28" pos:end="484:36"><expr pos:start="484:28" pos:end="484:36"><name pos:start="484:28" pos:end="484:36">FW_CFG_ID</name></expr></argument>, <argument pos:start="484:39" pos:end="484:39"><expr pos:start="484:39" pos:end="484:39"><literal type="number" pos:start="484:39" pos:end="484:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="486:5" pos:end="486:64"><expr pos:start="486:5" pos:end="486:63"><call pos:start="486:5" pos:end="486:63"><name pos:start="486:5" pos:end="486:18">fw_cfg_add_i64</name><argument_list pos:start="486:19" pos:end="486:63">(<argument pos:start="486:20" pos:end="486:25"><expr pos:start="486:20" pos:end="486:25"><name pos:start="486:20" pos:end="486:25">fw_cfg</name></expr></argument>, <argument pos:start="486:28" pos:end="486:42"><expr pos:start="486:28" pos:end="486:42"><name pos:start="486:28" pos:end="486:42">FW_CFG_RAM_SIZE</name></expr></argument>, <argument pos:start="486:45" pos:end="486:62"><expr pos:start="486:45" pos:end="486:62"><operator pos:start="486:45" pos:end="486:45">(</operator><name pos:start="486:46" pos:end="486:53">uint64_t</name><operator pos:start="486:54" pos:end="486:54">)</operator><name pos:start="486:55" pos:end="486:62">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="488:5" pos:end="488:61"><expr pos:start="488:5" pos:end="488:60"><call pos:start="488:5" pos:end="488:60"><name pos:start="488:5" pos:end="488:18">fw_cfg_add_i16</name><argument_list pos:start="488:19" pos:end="488:60">(<argument pos:start="488:20" pos:end="488:25"><expr pos:start="488:20" pos:end="488:25"><name pos:start="488:20" pos:end="488:25">fw_cfg</name></expr></argument>, <argument pos:start="488:28" pos:end="488:44"><expr pos:start="488:28" pos:end="488:44"><name pos:start="488:28" pos:end="488:44">FW_CFG_MACHINE_ID</name></expr></argument>, <argument pos:start="488:47" pos:end="488:59"><expr pos:start="488:47" pos:end="488:59"><name pos:start="488:47" pos:end="488:59">ARCH_HEATHROW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="490:5" pos:end="490:60"><expr pos:start="490:5" pos:end="490:59"><call pos:start="490:5" pos:end="490:59"><name pos:start="490:5" pos:end="490:18">fw_cfg_add_i32</name><argument_list pos:start="490:19" pos:end="490:59">(<argument pos:start="490:20" pos:end="490:25"><expr pos:start="490:20" pos:end="490:25"><name pos:start="490:20" pos:end="490:25">fw_cfg</name></expr></argument>, <argument pos:start="490:28" pos:end="490:45"><expr pos:start="490:28" pos:end="490:45"><name pos:start="490:28" pos:end="490:45">FW_CFG_KERNEL_ADDR</name></expr></argument>, <argument pos:start="490:48" pos:end="490:58"><expr pos:start="490:48" pos:end="490:58"><name pos:start="490:48" pos:end="490:58">kernel_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="492:5" pos:end="492:60"><expr pos:start="492:5" pos:end="492:59"><call pos:start="492:5" pos:end="492:59"><name pos:start="492:5" pos:end="492:18">fw_cfg_add_i32</name><argument_list pos:start="492:19" pos:end="492:59">(<argument pos:start="492:20" pos:end="492:25"><expr pos:start="492:20" pos:end="492:25"><name pos:start="492:20" pos:end="492:25">fw_cfg</name></expr></argument>, <argument pos:start="492:28" pos:end="492:45"><expr pos:start="492:28" pos:end="492:45"><name pos:start="492:28" pos:end="492:45">FW_CFG_KERNEL_SIZE</name></expr></argument>, <argument pos:start="492:48" pos:end="492:58"><expr pos:start="492:48" pos:end="492:58"><name pos:start="492:48" pos:end="492:58">kernel_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="494:5" pos:end="504:5"><if pos:start="494:5" pos:end="500:5">if <condition pos:start="494:8" pos:end="494:23">(<expr pos:start="494:9" pos:end="494:22"><name pos:start="494:9" pos:end="494:22">kernel_cmdline</name></expr>)</condition> <block pos:start="494:25" pos:end="500:5">{<block_content pos:start="496:9" pos:end="498:84">

        <expr_stmt pos:start="496:9" pos:end="496:68"><expr pos:start="496:9" pos:end="496:67"><call pos:start="496:9" pos:end="496:67"><name pos:start="496:9" pos:end="496:22">fw_cfg_add_i32</name><argument_list pos:start="496:23" pos:end="496:67">(<argument pos:start="496:24" pos:end="496:29"><expr pos:start="496:24" pos:end="496:29"><name pos:start="496:24" pos:end="496:29">fw_cfg</name></expr></argument>, <argument pos:start="496:32" pos:end="496:52"><expr pos:start="496:32" pos:end="496:52"><name pos:start="496:32" pos:end="496:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="496:55" pos:end="496:66"><expr pos:start="496:55" pos:end="496:66"><name pos:start="496:55" pos:end="496:66">cmdline_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="498:9" pos:end="498:84"><expr pos:start="498:9" pos:end="498:83"><call pos:start="498:9" pos:end="498:83"><name pos:start="498:9" pos:end="498:24">pstrcpy_targphys</name><argument_list pos:start="498:25" pos:end="498:83">(<argument pos:start="498:26" pos:end="498:34"><expr pos:start="498:26" pos:end="498:34"><literal type="string" pos:start="498:26" pos:end="498:34">"cmdline"</literal></expr></argument>, <argument pos:start="498:37" pos:end="498:48"><expr pos:start="498:37" pos:end="498:48"><name pos:start="498:37" pos:end="498:48">cmdline_base</name></expr></argument>, <argument pos:start="498:51" pos:end="498:66"><expr pos:start="498:51" pos:end="498:66"><name pos:start="498:51" pos:end="498:66">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="498:69" pos:end="498:82"><expr pos:start="498:69" pos:end="498:82"><name pos:start="498:69" pos:end="498:82">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="500:7" pos:end="504:5">else <block pos:start="500:12" pos:end="504:5">{<block_content pos:start="502:9" pos:end="502:57">

        <expr_stmt pos:start="502:9" pos:end="502:57"><expr pos:start="502:9" pos:end="502:56"><call pos:start="502:9" pos:end="502:56"><name pos:start="502:9" pos:end="502:22">fw_cfg_add_i32</name><argument_list pos:start="502:23" pos:end="502:56">(<argument pos:start="502:24" pos:end="502:29"><expr pos:start="502:24" pos:end="502:29"><name pos:start="502:24" pos:end="502:29">fw_cfg</name></expr></argument>, <argument pos:start="502:32" pos:end="502:52"><expr pos:start="502:32" pos:end="502:52"><name pos:start="502:32" pos:end="502:52">FW_CFG_KERNEL_CMDLINE</name></expr></argument>, <argument pos:start="502:55" pos:end="502:55"><expr pos:start="502:55" pos:end="502:55"><literal type="number" pos:start="502:55" pos:end="502:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="506:5" pos:end="506:60"><expr pos:start="506:5" pos:end="506:59"><call pos:start="506:5" pos:end="506:59"><name pos:start="506:5" pos:end="506:18">fw_cfg_add_i32</name><argument_list pos:start="506:19" pos:end="506:59">(<argument pos:start="506:20" pos:end="506:25"><expr pos:start="506:20" pos:end="506:25"><name pos:start="506:20" pos:end="506:25">fw_cfg</name></expr></argument>, <argument pos:start="506:28" pos:end="506:45"><expr pos:start="506:28" pos:end="506:45"><name pos:start="506:28" pos:end="506:45">FW_CFG_INITRD_ADDR</name></expr></argument>, <argument pos:start="506:48" pos:end="506:58"><expr pos:start="506:48" pos:end="506:58"><name pos:start="506:48" pos:end="506:58">initrd_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="508:5" pos:end="508:60"><expr pos:start="508:5" pos:end="508:59"><call pos:start="508:5" pos:end="508:59"><name pos:start="508:5" pos:end="508:18">fw_cfg_add_i32</name><argument_list pos:start="508:19" pos:end="508:59">(<argument pos:start="508:20" pos:end="508:25"><expr pos:start="508:20" pos:end="508:25"><name pos:start="508:20" pos:end="508:25">fw_cfg</name></expr></argument>, <argument pos:start="508:28" pos:end="508:45"><expr pos:start="508:28" pos:end="508:45"><name pos:start="508:28" pos:end="508:45">FW_CFG_INITRD_SIZE</name></expr></argument>, <argument pos:start="508:48" pos:end="508:58"><expr pos:start="508:48" pos:end="508:58"><name pos:start="508:48" pos:end="508:58">initrd_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="510:5" pos:end="510:64"><expr pos:start="510:5" pos:end="510:63"><call pos:start="510:5" pos:end="510:63"><name pos:start="510:5" pos:end="510:18">fw_cfg_add_i16</name><argument_list pos:start="510:19" pos:end="510:63">(<argument pos:start="510:20" pos:end="510:25"><expr pos:start="510:20" pos:end="510:25"><name pos:start="510:20" pos:end="510:25">fw_cfg</name></expr></argument>, <argument pos:start="510:28" pos:end="510:45"><expr pos:start="510:28" pos:end="510:45"><name pos:start="510:28" pos:end="510:45">FW_CFG_BOOT_DEVICE</name></expr></argument>, <argument pos:start="510:48" pos:end="510:62"><expr pos:start="510:48" pos:end="510:62"><name pos:start="510:48" pos:end="510:62">ppc_boot_device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="514:5" pos:end="514:60"><expr pos:start="514:5" pos:end="514:59"><call pos:start="514:5" pos:end="514:59"><name pos:start="514:5" pos:end="514:18">fw_cfg_add_i16</name><argument_list pos:start="514:19" pos:end="514:59">(<argument pos:start="514:20" pos:end="514:25"><expr pos:start="514:20" pos:end="514:25"><name pos:start="514:20" pos:end="514:25">fw_cfg</name></expr></argument>, <argument pos:start="514:28" pos:end="514:43"><expr pos:start="514:28" pos:end="514:43"><name pos:start="514:28" pos:end="514:43">FW_CFG_PPC_WIDTH</name></expr></argument>, <argument pos:start="514:46" pos:end="514:58"><expr pos:start="514:46" pos:end="514:58"><name pos:start="514:46" pos:end="514:58">graphic_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="516:5" pos:end="516:62"><expr pos:start="516:5" pos:end="516:61"><call pos:start="516:5" pos:end="516:61"><name pos:start="516:5" pos:end="516:18">fw_cfg_add_i16</name><argument_list pos:start="516:19" pos:end="516:61">(<argument pos:start="516:20" pos:end="516:25"><expr pos:start="516:20" pos:end="516:25"><name pos:start="516:20" pos:end="516:25">fw_cfg</name></expr></argument>, <argument pos:start="516:28" pos:end="516:44"><expr pos:start="516:28" pos:end="516:44"><name pos:start="516:28" pos:end="516:44">FW_CFG_PPC_HEIGHT</name></expr></argument>, <argument pos:start="516:47" pos:end="516:60"><expr pos:start="516:47" pos:end="516:60"><name pos:start="516:47" pos:end="516:60">graphic_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="518:5" pos:end="518:60"><expr pos:start="518:5" pos:end="518:59"><call pos:start="518:5" pos:end="518:59"><name pos:start="518:5" pos:end="518:18">fw_cfg_add_i16</name><argument_list pos:start="518:19" pos:end="518:59">(<argument pos:start="518:20" pos:end="518:25"><expr pos:start="518:20" pos:end="518:25"><name pos:start="518:20" pos:end="518:25">fw_cfg</name></expr></argument>, <argument pos:start="518:28" pos:end="518:43"><expr pos:start="518:28" pos:end="518:43"><name pos:start="518:28" pos:end="518:43">FW_CFG_PPC_DEPTH</name></expr></argument>, <argument pos:start="518:46" pos:end="518:58"><expr pos:start="518:46" pos:end="518:58"><name pos:start="518:46" pos:end="518:58">graphic_depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="522:5" pos:end="522:61"><expr pos:start="522:5" pos:end="522:60"><call pos:start="522:5" pos:end="522:60"><name pos:start="522:5" pos:end="522:18">fw_cfg_add_i32</name><argument_list pos:start="522:19" pos:end="522:60">(<argument pos:start="522:20" pos:end="522:25"><expr pos:start="522:20" pos:end="522:25"><name pos:start="522:20" pos:end="522:25">fw_cfg</name></expr></argument>, <argument pos:start="522:28" pos:end="522:44"><expr pos:start="522:28" pos:end="522:44"><name pos:start="522:28" pos:end="522:44">FW_CFG_PPC_IS_KVM</name></expr></argument>, <argument pos:start="522:47" pos:end="522:59"><expr pos:start="522:47" pos:end="522:59"><call pos:start="522:47" pos:end="522:59"><name pos:start="522:47" pos:end="522:57">kvm_enabled</name><argument_list pos:start="522:58" pos:end="522:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="524:5" pos:end="542:5"><if pos:start="524:5" pos:end="542:5">if <condition pos:start="524:8" pos:end="524:22">(<expr pos:start="524:9" pos:end="524:21"><call pos:start="524:9" pos:end="524:21"><name pos:start="524:9" pos:end="524:19">kvm_enabled</name><argument_list pos:start="524:20" pos:end="524:21">()</argument_list></call></expr>)</condition> <block pos:start="524:24" pos:end="542:5">{<block_content pos:start="528:9" pos:end="541:0">

<cpp:ifdef pos:start="526:1" pos:end="526:17">#<cpp:directive pos:start="526:2" pos:end="526:6">ifdef</cpp:directive> <name pos:start="526:8" pos:end="526:17">CONFIG_KVM</name></cpp:ifdef>

        <decl_stmt pos:start="528:9" pos:end="528:27"><decl pos:start="528:9" pos:end="528:26"><type pos:start="528:9" pos:end="528:17"><name pos:start="528:9" pos:end="528:15">uint8_t</name> <modifier pos:start="528:17" pos:end="528:17">*</modifier></type><name pos:start="528:18" pos:end="528:26">hypercall</name></decl>;</decl_stmt>



        <expr_stmt pos:start="532:9" pos:end="532:33"><expr pos:start="532:9" pos:end="532:32"><name pos:start="532:9" pos:end="532:17">hypercall</name> <operator pos:start="532:19" pos:end="532:19">=</operator> <call pos:start="532:21" pos:end="532:32"><name pos:start="532:21" pos:end="532:28">g_malloc</name><argument_list pos:start="532:29" pos:end="532:32">(<argument pos:start="532:30" pos:end="532:31"><expr pos:start="532:30" pos:end="532:31"><literal type="number" pos:start="532:30" pos:end="532:31">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="534:9" pos:end="534:49"><expr pos:start="534:9" pos:end="534:48"><call pos:start="534:9" pos:end="534:48"><name pos:start="534:9" pos:end="534:28">kvmppc_get_hypercall</name><argument_list pos:start="534:29" pos:end="534:48">(<argument pos:start="534:30" pos:end="534:32"><expr pos:start="534:30" pos:end="534:32"><name pos:start="534:30" pos:end="534:32">env</name></expr></argument>, <argument pos:start="534:35" pos:end="534:43"><expr pos:start="534:35" pos:end="534:43"><name pos:start="534:35" pos:end="534:43">hypercall</name></expr></argument>, <argument pos:start="534:46" pos:end="534:47"><expr pos:start="534:46" pos:end="534:47"><literal type="number" pos:start="534:46" pos:end="534:47">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="536:9" pos:end="536:67"><expr pos:start="536:9" pos:end="536:66"><call pos:start="536:9" pos:end="536:66"><name pos:start="536:9" pos:end="536:24">fw_cfg_add_bytes</name><argument_list pos:start="536:25" pos:end="536:66">(<argument pos:start="536:26" pos:end="536:31"><expr pos:start="536:26" pos:end="536:31"><name pos:start="536:26" pos:end="536:31">fw_cfg</name></expr></argument>, <argument pos:start="536:34" pos:end="536:50"><expr pos:start="536:34" pos:end="536:50"><name pos:start="536:34" pos:end="536:50">FW_CFG_PPC_KVM_HC</name></expr></argument>, <argument pos:start="536:53" pos:end="536:61"><expr pos:start="536:53" pos:end="536:61"><name pos:start="536:53" pos:end="536:61">hypercall</name></expr></argument>, <argument pos:start="536:64" pos:end="536:65"><expr pos:start="536:64" pos:end="536:65"><literal type="number" pos:start="536:64" pos:end="536:65">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="538:9" pos:end="541:0"><expr pos:start="538:9" pos:end="538:60"><call pos:start="538:9" pos:end="538:60"><name pos:start="538:9" pos:end="538:22">fw_cfg_add_i32</name><argument_list pos:start="538:23" pos:end="538:60">(<argument pos:start="538:24" pos:end="538:29"><expr pos:start="538:24" pos:end="538:29"><name pos:start="538:24" pos:end="538:29">fw_cfg</name></expr></argument>, <argument pos:start="538:32" pos:end="538:49"><expr pos:start="538:32" pos:end="538:49"><name pos:start="538:32" pos:end="538:49">FW_CFG_PPC_KVM_PID</name></expr></argument>, <argument pos:start="538:52" pos:end="538:59"><expr pos:start="538:52" pos:end="538:59"><call pos:start="538:52" pos:end="538:59"><name pos:start="538:52" pos:end="538:57">getpid</name><argument_list pos:start="538:58" pos:end="538:59">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="540:1" pos:end="540:6">#<cpp:directive pos:start="540:2" pos:end="540:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="544:5" pos:end="544:54"><expr pos:start="544:5" pos:end="544:53"><call pos:start="544:5" pos:end="544:53"><name pos:start="544:5" pos:end="544:18">fw_cfg_add_i32</name><argument_list pos:start="544:19" pos:end="544:53">(<argument pos:start="544:20" pos:end="544:25"><expr pos:start="544:20" pos:end="544:25"><name pos:start="544:20" pos:end="544:25">fw_cfg</name></expr></argument>, <argument pos:start="544:28" pos:end="544:44"><expr pos:start="544:28" pos:end="544:44"><name pos:start="544:28" pos:end="544:44">FW_CFG_PPC_TBFREQ</name></expr></argument>, <argument pos:start="544:47" pos:end="544:52"><expr pos:start="544:47" pos:end="544:52"><name pos:start="544:47" pos:end="544:52">tbfreq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="546:5" pos:end="546:78">/* Mac OS X requires a "known good" clock-frequency value; pass it one. */</comment>

    <expr_stmt pos:start="548:5" pos:end="548:60"><expr pos:start="548:5" pos:end="548:59"><call pos:start="548:5" pos:end="548:59"><name pos:start="548:5" pos:end="548:18">fw_cfg_add_i32</name><argument_list pos:start="548:19" pos:end="548:59">(<argument pos:start="548:20" pos:end="548:25"><expr pos:start="548:20" pos:end="548:25"><name pos:start="548:20" pos:end="548:25">fw_cfg</name></expr></argument>, <argument pos:start="548:28" pos:end="548:47"><expr pos:start="548:28" pos:end="548:47"><name pos:start="548:28" pos:end="548:47">FW_CFG_PPC_CLOCKFREQ</name></expr></argument>, <argument pos:start="548:50" pos:end="548:58"><expr pos:start="548:50" pos:end="548:58"><name pos:start="548:50" pos:end="548:58">CLOCKFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="550:5" pos:end="550:56"><expr pos:start="550:5" pos:end="550:55"><call pos:start="550:5" pos:end="550:55"><name pos:start="550:5" pos:end="550:18">fw_cfg_add_i32</name><argument_list pos:start="550:19" pos:end="550:55">(<argument pos:start="550:20" pos:end="550:25"><expr pos:start="550:20" pos:end="550:25"><name pos:start="550:20" pos:end="550:25">fw_cfg</name></expr></argument>, <argument pos:start="550:28" pos:end="550:45"><expr pos:start="550:28" pos:end="550:45"><name pos:start="550:28" pos:end="550:45">FW_CFG_PPC_BUSFREQ</name></expr></argument>, <argument pos:start="550:48" pos:end="550:54"><expr pos:start="550:48" pos:end="550:54"><name pos:start="550:48" pos:end="550:54">BUSFREQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="554:5" pos:end="554:52"><expr pos:start="554:5" pos:end="554:51"><call pos:start="554:5" pos:end="554:51"><name pos:start="554:5" pos:end="554:26">qemu_register_boot_set</name><argument_list pos:start="554:27" pos:end="554:51">(<argument pos:start="554:28" pos:end="554:42"><expr pos:start="554:28" pos:end="554:42"><name pos:start="554:28" pos:end="554:42">fw_cfg_boot_set</name></expr></argument>, <argument pos:start="554:45" pos:end="554:50"><expr pos:start="554:45" pos:end="554:50"><name pos:start="554:45" pos:end="554:50">fw_cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function></unit>
