<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/10154.c" pos:tabs="8"><function pos:start="1:1" pos:end="43:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">test_bmdma_no_busmaster</name><parameter_list pos:start="1:36" pos:end="1:41">(<parameter pos:start="1:37" pos:end="1:40"><decl pos:start="1:37" pos:end="1:40"><type pos:start="1:37" pos:end="1:40"><name pos:start="1:37" pos:end="1:40">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="43:1">{<block_content pos:start="5:5" pos:end="41:74">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">QPCIDevice</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">void</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:20">bmdma_base</name></decl>, <decl pos:start="7:23" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:10"><modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:31">ide_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:18">status</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:49"><expr pos:start="13:5" pos:end="13:48"><name pos:start="13:5" pos:end="13:7">dev</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <call pos:start="13:11" pos:end="13:48"><name pos:start="13:11" pos:end="13:24">get_pci_device</name><argument_list pos:start="13:25" pos:end="13:48">(<argument pos:start="13:26" pos:end="13:36"><expr pos:start="13:26" pos:end="13:36"><operator pos:start="13:26" pos:end="13:26">&amp;</operator><name pos:start="13:27" pos:end="13:36">bmdma_base</name></expr></argument>, <argument pos:start="13:39" pos:end="13:47"><expr pos:start="13:39" pos:end="13:47"><operator pos:start="13:39" pos:end="13:39">&amp;</operator><name pos:start="13:40" pos:end="13:47">ide_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="23:59">/* No PRDT_EOT, each entry addr 0/size 64k, and in theory qemu shouldn't be

     * able to access it anyway because the Bus Master bit in the PCI command

     * register isn't set. This is complete nonsense, but it used to be pretty

     * good at confusing and occasionally crashing qemu. */</comment>

    <decl_stmt pos:start="25:5" pos:end="25:31"><decl pos:start="25:5" pos:end="25:30"><type pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:13">PrdtEntry</name></type> <name pos:start="25:15" pos:end="25:24"><name pos:start="25:15" pos:end="25:18">prdt</name><index pos:start="25:19" pos:end="25:24">[<expr pos:start="25:20" pos:end="25:23"><literal type="number" pos:start="25:20" pos:end="25:23">4096</literal></expr>]</index></name> <init pos:start="25:26" pos:end="25:30">= <expr pos:start="25:28" pos:end="25:30"><block pos:start="25:28" pos:end="25:30">{ }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="31:60"><expr pos:start="29:5" pos:end="31:59"><name pos:start="29:5" pos:end="29:10">status</name> <operator pos:start="29:12" pos:end="29:12">=</operator> <call pos:start="29:14" pos:end="31:59"><name pos:start="29:14" pos:end="29:29">send_dma_request</name><argument_list pos:start="29:30" pos:end="31:59">(<argument pos:start="29:31" pos:end="29:55"><expr pos:start="29:31" pos:end="29:55"><name pos:start="29:31" pos:end="29:42">CMD_READ_DMA</name> <operator pos:start="29:44" pos:end="29:44">|</operator> <name pos:start="29:46" pos:end="29:55">CMDF_NO_BM</name></expr></argument>, <argument pos:start="29:58" pos:end="29:58"><expr pos:start="29:58" pos:end="29:58"><literal type="number" pos:start="29:58" pos:end="29:58">0</literal></expr></argument>, <argument pos:start="29:61" pos:end="29:63"><expr pos:start="29:61" pos:end="29:63"><literal type="number" pos:start="29:61" pos:end="29:63">512</literal></expr></argument>,

                              <argument pos:start="31:31" pos:end="31:34"><expr pos:start="31:31" pos:end="31:34"><name pos:start="31:31" pos:end="31:34">prdt</name></expr></argument>, <argument pos:start="31:37" pos:end="31:52"><expr pos:start="31:37" pos:end="31:52"><call pos:start="31:37" pos:end="31:52"><name pos:start="31:37" pos:end="31:46">ARRAY_SIZE</name><argument_list pos:start="31:47" pos:end="31:52">(<argument pos:start="31:48" pos:end="31:51"><expr pos:start="31:48" pos:end="31:51"><name pos:start="31:48" pos:end="31:51">prdt</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:55" pos:end="31:58"><expr pos:start="31:55" pos:end="31:58"><name pos:start="31:55" pos:end="31:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="37:67">/* Not entirely clear what the expected result is, but this is what we get

     * in practice. At least we want to be aware of any changes. */</comment>

    <expr_stmt pos:start="39:5" pos:end="39:61"><expr pos:start="39:5" pos:end="39:60"><call pos:start="39:5" pos:end="39:60"><name pos:start="39:5" pos:end="39:19">g_assert_cmphex</name><argument_list pos:start="39:20" pos:end="39:60">(<argument pos:start="39:21" pos:end="39:26"><expr pos:start="39:21" pos:end="39:26"><name pos:start="39:21" pos:end="39:26">status</name></expr></argument>, <argument pos:start="39:29" pos:end="39:30"><expr pos:start="39:29" pos:end="39:30"><operator pos:start="39:29" pos:end="39:30">==</operator></expr></argument>, <argument pos:start="39:33" pos:end="39:59"><expr pos:start="39:33" pos:end="39:59"><name pos:start="39:33" pos:end="39:45">BM_STS_ACTIVE</name> <operator pos:start="39:47" pos:end="39:47">|</operator> <name pos:start="39:49" pos:end="39:59">BM_STS_INTR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:74"><expr pos:start="41:5" pos:end="41:73"><call pos:start="41:5" pos:end="41:73"><name pos:start="41:5" pos:end="41:20">assert_bit_clear</name><argument_list pos:start="41:21" pos:end="41:73">(<argument pos:start="41:22" pos:end="41:62"><expr pos:start="41:22" pos:end="41:62"><call pos:start="41:22" pos:end="41:62"><name pos:start="41:22" pos:end="41:34">qpci_io_readb</name><argument_list pos:start="41:35" pos:end="41:62">(<argument pos:start="41:36" pos:end="41:38"><expr pos:start="41:36" pos:end="41:38"><name pos:start="41:36" pos:end="41:38">dev</name></expr></argument>, <argument pos:start="41:41" pos:end="41:61"><expr pos:start="41:41" pos:end="41:61"><name pos:start="41:41" pos:end="41:48">ide_base</name> <operator pos:start="41:50" pos:end="41:50">+</operator> <name pos:start="41:52" pos:end="41:61">reg_status</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="41:65" pos:end="41:72"><expr pos:start="41:65" pos:end="41:72"><name pos:start="41:65" pos:end="41:66">DF</name> <operator pos:start="41:68" pos:end="41:68">|</operator> <name pos:start="41:70" pos:end="41:72">ERR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
