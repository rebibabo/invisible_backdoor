<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13425.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">bastardized_rice_decompress</name><parameter_list pos:start="1:40" pos:end="17:9">(<parameter pos:start="1:41" pos:end="1:57"><decl pos:start="1:41" pos:end="1:57"><type pos:start="1:41" pos:end="1:57"><name pos:start="1:41" pos:end="1:51">ALACContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">alac</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:55"><decl pos:start="3:34" pos:end="3:55"><type pos:start="3:34" pos:end="3:55"><name pos:start="3:34" pos:end="3:40">int32_t</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:55">output_buffer</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:48"><decl pos:start="5:34" pos:end="5:48"><type pos:start="5:34" pos:end="5:48"><name pos:start="5:34" pos:end="5:36">int</name></type> <name pos:start="5:38" pos:end="5:48">output_size</name></decl></parameter>,

                                 <parameter pos:start="7:34" pos:end="7:51"><decl pos:start="7:34" pos:end="7:51"><type pos:start="7:34" pos:end="7:51"><name pos:start="7:34" pos:end="7:36">int</name></type> <name pos:start="7:38" pos:end="7:51">readsamplesize</name></decl></parameter>, <comment type="block" pos:start="7:54" pos:end="7:65">/* arg_10 */</comment>

                                 <parameter pos:start="9:34" pos:end="9:56"><decl pos:start="9:34" pos:end="9:56"><type pos:start="9:34" pos:end="9:56"><name pos:start="9:34" pos:end="9:36">int</name></type> <name pos:start="9:38" pos:end="9:56">rice_initialhistory</name></decl></parameter>, <comment type="block" pos:start="9:59" pos:end="9:73">/* arg424-&gt;b */</comment>

                                 <parameter pos:start="11:34" pos:end="11:51"><decl pos:start="11:34" pos:end="11:51"><type pos:start="11:34" pos:end="11:51"><name pos:start="11:34" pos:end="11:36">int</name></type> <name pos:start="11:38" pos:end="11:51">rice_kmodifier</name></decl></parameter>, <comment type="block" pos:start="11:54" pos:end="11:68">/* arg424-&gt;d */</comment>

                                 <parameter pos:start="13:34" pos:end="13:53"><decl pos:start="13:34" pos:end="13:53"><type pos:start="13:34" pos:end="13:53"><name pos:start="13:34" pos:end="13:36">int</name></type> <name pos:start="13:38" pos:end="13:53">rice_historymult</name></decl></parameter>, <comment type="block" pos:start="13:56" pos:end="13:70">/* arg424-&gt;c */</comment>

                                 <parameter pos:start="15:34" pos:end="15:56"><decl pos:start="15:34" pos:end="15:56"><type pos:start="15:34" pos:end="15:56"><name pos:start="15:34" pos:end="15:36">int</name></type> <name pos:start="15:38" pos:end="15:56">rice_kmodifier_mask</name></decl></parameter> <comment type="block" pos:start="15:58" pos:end="15:72">/* arg424-&gt;e */</comment>

        )</parameter_list>

<block pos:start="19:1" pos:end="213:1">{<block_content pos:start="21:5" pos:end="211:5">

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:20">output_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:47"><decl pos:start="23:5" pos:end="23:46"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:24">history</name> <init pos:start="23:26" pos:end="23:46">= <expr pos:start="23:28" pos:end="23:46"><name pos:start="23:28" pos:end="23:46">rice_initialhistory</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:21">sign_modifier</name> <init pos:start="25:23" pos:end="25:25">= <expr pos:start="25:25" pos:end="25:25"><literal type="number" pos:start="25:25" pos:end="25:25">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="29:5" pos:end="211:5">for <control pos:start="29:9" pos:end="29:70">(<init pos:start="29:10" pos:end="29:26"><expr pos:start="29:10" pos:end="29:25"><name pos:start="29:10" pos:end="29:21">output_count</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <literal type="number" pos:start="29:25" pos:end="29:25">0</literal></expr>;</init> <condition pos:start="29:28" pos:end="29:54"><expr pos:start="29:28" pos:end="29:53"><name pos:start="29:28" pos:end="29:39">output_count</name> <operator pos:start="29:41" pos:end="29:41">&lt;</operator> <name pos:start="29:43" pos:end="29:53">output_size</name></expr>;</condition> <incr pos:start="29:56" pos:end="29:69"><expr pos:start="29:56" pos:end="29:69"><name pos:start="29:56" pos:end="29:67">output_count</name><operator pos:start="29:68" pos:end="29:69">++</operator></expr></incr>)</control> <block pos:start="29:72" pos:end="211:5">{<block_content pos:start="31:9" pos:end="209:9">

        <decl_stmt pos:start="31:9" pos:end="31:18"><decl pos:start="31:9" pos:end="31:17"><type pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:15">int32_t</name></type> <name pos:start="31:17" pos:end="31:17">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:27"><decl pos:start="33:9" pos:end="33:26"><type pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:15">int32_t</name></type> <name pos:start="33:17" pos:end="33:26">x_modified</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:26"><decl pos:start="35:9" pos:end="35:25"><type pos:start="35:9" pos:end="35:15"><name pos:start="35:9" pos:end="35:15">int32_t</name></type> <name pos:start="35:17" pos:end="35:25">final_val</name></decl>;</decl_stmt>



        <comment type="block" pos:start="39:9" pos:end="39:63">/* read x - number of 1s before 0 represent the rice */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:37"><expr pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:9">x</name> <operator pos:start="41:11" pos:end="41:11">=</operator> <call pos:start="41:13" pos:end="41:36"><name pos:start="41:13" pos:end="41:25">get_unary_0_9</name><argument_list pos:start="41:26" pos:end="41:36">(<argument pos:start="41:27" pos:end="41:35"><expr pos:start="41:27" pos:end="41:35"><operator pos:start="41:27" pos:end="41:27">&amp;</operator><name pos:start="41:28" pos:end="41:35"><name pos:start="41:28" pos:end="41:31">alac</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="45:9" pos:end="97:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:18">(<expr pos:start="45:13" pos:end="45:17"><name pos:start="45:13" pos:end="45:13">x</name> <operator pos:start="45:15" pos:end="45:15">&gt;</operator> <literal type="number" pos:start="45:17" pos:end="45:17">8</literal></expr>)</condition> <block pos:start="45:20" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:52"> <comment type="block" pos:start="45:22" pos:end="45:41">/* RICE THRESHOLD */</comment>

            <comment type="block" pos:start="47:13" pos:end="47:42">/* use alternative encoding */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:52"><expr pos:start="49:13" pos:end="49:51"><name pos:start="49:13" pos:end="49:13">x</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <call pos:start="49:17" pos:end="49:51"><name pos:start="49:17" pos:end="49:24">get_bits</name><argument_list pos:start="49:25" pos:end="49:51">(<argument pos:start="49:26" pos:end="49:34"><expr pos:start="49:26" pos:end="49:34"><operator pos:start="49:26" pos:end="49:26">&amp;</operator><name pos:start="49:27" pos:end="49:34"><name pos:start="49:27" pos:end="49:30">alac</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:34">gb</name></name></expr></argument>, <argument pos:start="49:37" pos:end="49:50"><expr pos:start="49:37" pos:end="49:50"><name pos:start="49:37" pos:end="49:50">readsamplesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="97:9">else <block pos:start="51:16" pos:end="97:9">{<block_content pos:start="55:13" pos:end="95:13">

            <comment type="block" pos:start="53:13" pos:end="53:40">/* standard rice encoding */</comment>

            <decl_stmt pos:start="55:13" pos:end="55:26"><decl pos:start="55:13" pos:end="55:25"><type pos:start="55:13" pos:end="55:15"><name pos:start="55:13" pos:end="55:15">int</name></type> <name pos:start="55:17" pos:end="55:25">extrabits</name></decl>;</decl_stmt>

            <decl_stmt pos:start="57:13" pos:end="57:18"><decl pos:start="57:13" pos:end="57:17"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:17">k</name></decl>;</decl_stmt> <comment type="block" pos:start="57:20" pos:end="57:43">/* size of extra bits */</comment>



            <comment type="block" pos:start="61:13" pos:end="61:44">/* read k, that is bits as is */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:61"><expr pos:start="63:13" pos:end="63:60"><name pos:start="63:13" pos:end="63:13">k</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <literal type="number" pos:start="63:17" pos:end="63:20">31</literal> <operator pos:start="63:20" pos:end="63:20">-</operator> <call pos:start="63:22" pos:end="63:60"><name pos:start="63:22" pos:end="63:40">count_leading_zeros</name><argument_list pos:start="63:41" pos:end="63:60">(<argument pos:start="63:42" pos:end="63:59"><expr pos:start="63:42" pos:end="63:59"><operator pos:start="63:42" pos:end="63:42">(</operator><name pos:start="63:43" pos:end="63:49">history</name> <operator pos:start="63:51" pos:end="63:52">&gt;&gt;</operator> <literal type="number" pos:start="63:54" pos:end="63:54">9</literal><operator pos:start="63:55" pos:end="63:55">)</operator> <operator pos:start="63:57" pos:end="63:57">+</operator> <literal type="number" pos:start="63:59" pos:end="63:59">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="67:13" pos:end="69:35"><if pos:start="67:13" pos:end="69:35">if <condition pos:start="67:16" pos:end="67:36">(<expr pos:start="67:17" pos:end="67:35"><name pos:start="67:17" pos:end="67:17">k</name> <operator pos:start="67:19" pos:end="67:20">&gt;=</operator> <name pos:start="67:22" pos:end="67:35">rice_kmodifier</name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:35"><block_content pos:start="69:17" pos:end="69:35">

                <expr_stmt pos:start="69:17" pos:end="69:35"><expr pos:start="69:17" pos:end="69:34"><name pos:start="69:17" pos:end="69:17">k</name> <operator pos:start="69:19" pos:end="69:19">=</operator> <name pos:start="69:21" pos:end="69:34">rice_kmodifier</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="73:13" pos:end="95:13"><if pos:start="73:13" pos:end="95:13">if <condition pos:start="73:16" pos:end="73:23">(<expr pos:start="73:17" pos:end="73:22"><name pos:start="73:17" pos:end="73:17">k</name> <operator pos:start="73:19" pos:end="73:20">!=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">1</literal></expr>)</condition> <block pos:start="73:25" pos:end="95:13">{<block_content pos:start="75:17" pos:end="93:48">

                <expr_stmt pos:start="75:17" pos:end="75:52"><expr pos:start="75:17" pos:end="75:51"><name pos:start="75:17" pos:end="75:25">extrabits</name> <operator pos:start="75:27" pos:end="75:27">=</operator> <call pos:start="75:29" pos:end="75:51"><name pos:start="75:29" pos:end="75:37">show_bits</name><argument_list pos:start="75:38" pos:end="75:51">(<argument pos:start="75:39" pos:end="75:47"><expr pos:start="75:39" pos:end="75:47"><operator pos:start="75:39" pos:end="75:39">&amp;</operator><name pos:start="75:40" pos:end="75:47"><name pos:start="75:40" pos:end="75:43">alac</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:47">gb</name></name></expr></argument>, <argument pos:start="75:50" pos:end="75:50"><expr pos:start="75:50" pos:end="75:50"><name pos:start="75:50" pos:end="75:50">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <comment type="block" pos:start="79:17" pos:end="79:79">/* multiply x by 2^k - 1, as part of their strange algorithm */</comment>

                <expr_stmt pos:start="81:17" pos:end="81:33"><expr pos:start="81:17" pos:end="81:32"><name pos:start="81:17" pos:end="81:17">x</name> <operator pos:start="81:19" pos:end="81:19">=</operator> <operator pos:start="81:21" pos:end="81:21">(</operator><name pos:start="81:22" pos:end="81:22">x</name> <operator pos:start="81:24" pos:end="81:25">&lt;&lt;</operator> <name pos:start="81:27" pos:end="81:27">k</name><operator pos:start="81:28" pos:end="81:28">)</operator> <operator pos:start="81:30" pos:end="81:30">-</operator> <name pos:start="81:32" pos:end="81:32">x</name></expr>;</expr_stmt>



                <if_stmt pos:start="85:17" pos:end="93:48"><if pos:start="85:17" pos:end="91:17">if <condition pos:start="85:20" pos:end="85:34">(<expr pos:start="85:21" pos:end="85:33"><name pos:start="85:21" pos:end="85:29">extrabits</name> <operator pos:start="85:31" pos:end="85:31">&gt;</operator> <literal type="number" pos:start="85:33" pos:end="85:33">1</literal></expr>)</condition> <block pos:start="85:36" pos:end="91:17">{<block_content pos:start="87:21" pos:end="89:44">

                    <expr_stmt pos:start="87:21" pos:end="87:39"><expr pos:start="87:21" pos:end="87:38"><name pos:start="87:21" pos:end="87:21">x</name> <operator pos:start="87:23" pos:end="87:24">+=</operator> <name pos:start="87:26" pos:end="87:34">extrabits</name> <operator pos:start="87:36" pos:end="87:36">-</operator> <literal type="number" pos:start="87:38" pos:end="87:38">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="89:21" pos:end="89:44"><expr pos:start="89:21" pos:end="89:43"><call pos:start="89:21" pos:end="89:43"><name pos:start="89:21" pos:end="89:29">skip_bits</name><argument_list pos:start="89:30" pos:end="89:43">(<argument pos:start="89:31" pos:end="89:39"><expr pos:start="89:31" pos:end="89:39"><operator pos:start="89:31" pos:end="89:31">&amp;</operator><name pos:start="89:32" pos:end="89:39"><name pos:start="89:32" pos:end="89:35">alac</name><operator pos:start="89:36" pos:end="89:37">-&gt;</operator><name pos:start="89:38" pos:end="89:39">gb</name></name></expr></argument>, <argument pos:start="89:42" pos:end="89:42"><expr pos:start="89:42" pos:end="89:42"><name pos:start="89:42" pos:end="89:42">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="91:19" pos:end="93:48">else<block type="pseudo" pos:start="93:21" pos:end="93:48"><block_content pos:start="93:21" pos:end="93:48">

                    <expr_stmt pos:start="93:21" pos:end="93:48"><expr pos:start="93:21" pos:end="93:47"><call pos:start="93:21" pos:end="93:47"><name pos:start="93:21" pos:end="93:29">skip_bits</name><argument_list pos:start="93:30" pos:end="93:47">(<argument pos:start="93:31" pos:end="93:39"><expr pos:start="93:31" pos:end="93:39"><operator pos:start="93:31" pos:end="93:31">&amp;</operator><name pos:start="93:32" pos:end="93:39"><name pos:start="93:32" pos:end="93:35">alac</name><operator pos:start="93:36" pos:end="93:37">-&gt;</operator><name pos:start="93:38" pos:end="93:39">gb</name></name></expr></argument>, <argument pos:start="93:42" pos:end="93:46"><expr pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:42">k</name> <operator pos:start="93:44" pos:end="93:44">-</operator> <literal type="number" pos:start="93:46" pos:end="93:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:39"><expr pos:start="101:9" pos:end="101:38"><name pos:start="101:9" pos:end="101:18">x_modified</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <name pos:start="101:22" pos:end="101:34">sign_modifier</name> <operator pos:start="101:36" pos:end="101:36">+</operator> <name pos:start="101:38" pos:end="101:38">x</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:41"><expr pos:start="103:9" pos:end="103:40"><name pos:start="103:9" pos:end="103:17">final_val</name> <operator pos:start="103:19" pos:end="103:19">=</operator> <operator pos:start="103:21" pos:end="103:21">(</operator><name pos:start="103:22" pos:end="103:31">x_modified</name> <operator pos:start="103:33" pos:end="103:33">+</operator> <literal type="number" pos:start="103:35" pos:end="103:35">1</literal><operator pos:start="103:36" pos:end="103:36">)</operator> <operator pos:start="103:38" pos:end="103:38">/</operator> <literal type="number" pos:start="103:40" pos:end="103:40">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="105:9" pos:end="105:44"><if pos:start="105:9" pos:end="105:44">if <condition pos:start="105:12" pos:end="105:27">(<expr pos:start="105:13" pos:end="105:26"><name pos:start="105:13" pos:end="105:22">x_modified</name> <operator pos:start="105:24" pos:end="105:24">&amp;</operator> <literal type="number" pos:start="105:26" pos:end="105:26">1</literal></expr>)</condition><block type="pseudo" pos:start="105:29" pos:end="105:44"><block_content pos:start="105:29" pos:end="105:44"> <expr_stmt pos:start="105:29" pos:end="105:44"><expr pos:start="105:29" pos:end="105:43"><name pos:start="105:29" pos:end="105:37">final_val</name> <operator pos:start="105:39" pos:end="105:40">*=</operator> <operator pos:start="105:42" pos:end="105:42">-</operator><literal type="number" pos:start="105:43" pos:end="105:43">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:48"><expr pos:start="109:9" pos:end="109:47"><name pos:start="109:9" pos:end="109:35"><name pos:start="109:9" pos:end="109:21">output_buffer</name><index pos:start="109:22" pos:end="109:35">[<expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">output_count</name></expr>]</index></name> <operator pos:start="109:37" pos:end="109:37">=</operator> <name pos:start="109:39" pos:end="109:47">final_val</name></expr>;</expr_stmt>



        <expr_stmt pos:start="113:9" pos:end="113:26"><expr pos:start="113:9" pos:end="113:25"><name pos:start="113:9" pos:end="113:21">sign_modifier</name> <operator pos:start="113:23" pos:end="113:23">=</operator> <literal type="number" pos:start="113:25" pos:end="113:25">0</literal></expr>;</expr_stmt>



        <comment type="block" pos:start="117:9" pos:end="117:36">/* now update the history */</comment>

        <expr_stmt pos:start="119:9" pos:end="121:57"><expr pos:start="119:9" pos:end="121:56"><name pos:start="119:9" pos:end="119:15">history</name> <operator pos:start="119:17" pos:end="119:18">+=</operator> <name pos:start="119:20" pos:end="119:29">x_modified</name> <operator pos:start="119:31" pos:end="119:31">*</operator> <name pos:start="119:33" pos:end="119:48">rice_historymult</name>

                   <operator pos:start="121:20" pos:end="121:20">-</operator> <operator pos:start="121:22" pos:end="121:22">(</operator><operator pos:start="121:23" pos:end="121:23">(</operator><name pos:start="121:24" pos:end="121:30">history</name> <operator pos:start="121:32" pos:end="121:32">*</operator> <name pos:start="121:34" pos:end="121:49">rice_historymult</name><operator pos:start="121:50" pos:end="121:50">)</operator> <operator pos:start="121:52" pos:end="121:53">&gt;&gt;</operator> <literal type="number" pos:start="121:55" pos:end="121:55">9</literal><operator pos:start="121:56" pos:end="121:56">)</operator></expr>;</expr_stmt>



        <if_stmt pos:start="125:9" pos:end="127:29"><if pos:start="125:9" pos:end="127:29">if <condition pos:start="125:12" pos:end="125:32">(<expr pos:start="125:13" pos:end="125:31"><name pos:start="125:13" pos:end="125:22">x_modified</name> <operator pos:start="125:24" pos:end="125:24">&gt;</operator> <literal type="number" pos:start="125:26" pos:end="125:31">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="127:13" pos:end="127:29"><block_content pos:start="127:13" pos:end="127:29">

            <expr_stmt pos:start="127:13" pos:end="127:29"><expr pos:start="127:13" pos:end="127:28"><name pos:start="127:13" pos:end="127:19">history</name> <operator pos:start="127:21" pos:end="127:21">=</operator> <literal type="number" pos:start="127:23" pos:end="127:28">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="131:9" pos:end="131:63">/* special case: there may be compressed blocks of 0 */</comment>

        <if_stmt pos:start="133:9" pos:end="209:9"><if pos:start="133:9" pos:end="209:9">if <condition pos:start="133:12" pos:end="133:62">(<expr pos:start="133:13" pos:end="133:61"><operator pos:start="133:13" pos:end="133:13">(</operator><name pos:start="133:14" pos:end="133:20">history</name> <operator pos:start="133:22" pos:end="133:22">&lt;</operator> <literal type="number" pos:start="133:24" pos:end="133:26">128</literal><operator pos:start="133:27" pos:end="133:27">)</operator> <operator pos:start="133:29" pos:end="133:30">&amp;&amp;</operator> <operator pos:start="133:32" pos:end="133:32">(</operator><name pos:start="133:33" pos:end="133:44">output_count</name><operator pos:start="133:45" pos:end="133:45">+</operator><literal type="number" pos:start="133:46" pos:end="133:46">1</literal> <operator pos:start="133:48" pos:end="133:48">&lt;</operator> <name pos:start="133:50" pos:end="133:60">output_size</name><operator pos:start="133:61" pos:end="133:61">)</operator></expr>)</condition> <block pos:start="133:64" pos:end="209:9">{<block_content pos:start="135:13" pos:end="207:24">

            <decl_stmt pos:start="135:13" pos:end="135:27"><decl pos:start="135:13" pos:end="135:26"><type pos:start="135:13" pos:end="135:15"><name pos:start="135:13" pos:end="135:15">int</name></type> <name pos:start="135:17" pos:end="135:26">block_size</name></decl>;</decl_stmt>



            <expr_stmt pos:start="139:13" pos:end="139:30"><expr pos:start="139:13" pos:end="139:29"><name pos:start="139:13" pos:end="139:25">sign_modifier</name> <operator pos:start="139:27" pos:end="139:27">=</operator> <literal type="number" pos:start="139:29" pos:end="139:29">1</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="143:13" pos:end="143:41"><expr pos:start="143:13" pos:end="143:40"><name pos:start="143:13" pos:end="143:13">x</name> <operator pos:start="143:15" pos:end="143:15">=</operator> <call pos:start="143:17" pos:end="143:40"><name pos:start="143:17" pos:end="143:29">get_unary_0_9</name><argument_list pos:start="143:30" pos:end="143:40">(<argument pos:start="143:31" pos:end="143:39"><expr pos:start="143:31" pos:end="143:39"><operator pos:start="143:31" pos:end="143:31">&amp;</operator><name pos:start="143:32" pos:end="143:39"><name pos:start="143:32" pos:end="143:35">alac</name><operator pos:start="143:36" pos:end="143:37">-&gt;</operator><name pos:start="143:38" pos:end="143:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="147:13" pos:end="187:13"><if pos:start="147:13" pos:end="151:13">if <condition pos:start="147:16" pos:end="147:22">(<expr pos:start="147:17" pos:end="147:21"><name pos:start="147:17" pos:end="147:17">x</name> <operator pos:start="147:19" pos:end="147:19">&gt;</operator> <literal type="number" pos:start="147:21" pos:end="147:21">8</literal></expr>)</condition> <block pos:start="147:24" pos:end="151:13">{<block_content pos:start="149:17" pos:end="149:53">

                <expr_stmt pos:start="149:17" pos:end="149:53"><expr pos:start="149:17" pos:end="149:52"><name pos:start="149:17" pos:end="149:26">block_size</name> <operator pos:start="149:28" pos:end="149:28">=</operator> <call pos:start="149:30" pos:end="149:52"><name pos:start="149:30" pos:end="149:37">get_bits</name><argument_list pos:start="149:38" pos:end="149:52">(<argument pos:start="149:39" pos:end="149:47"><expr pos:start="149:39" pos:end="149:47"><operator pos:start="149:39" pos:end="149:39">&amp;</operator><name pos:start="149:40" pos:end="149:47"><name pos:start="149:40" pos:end="149:43">alac</name><operator pos:start="149:44" pos:end="149:45">-&gt;</operator><name pos:start="149:46" pos:end="149:47">gb</name></name></expr></argument>, <argument pos:start="149:50" pos:end="149:51"><expr pos:start="149:50" pos:end="149:51"><literal type="number" pos:start="149:50" pos:end="149:51">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="151:15" pos:end="187:13">else <block pos:start="151:20" pos:end="187:13">{<block_content pos:start="153:17" pos:end="185:17">

                <decl_stmt pos:start="153:17" pos:end="153:22"><decl pos:start="153:17" pos:end="153:21"><type pos:start="153:17" pos:end="153:19"><name pos:start="153:17" pos:end="153:19">int</name></type> <name pos:start="153:21" pos:end="153:21">k</name></decl>;</decl_stmt>

                <decl_stmt pos:start="155:17" pos:end="155:30"><decl pos:start="155:17" pos:end="155:29"><type pos:start="155:17" pos:end="155:19"><name pos:start="155:17" pos:end="155:19">int</name></type> <name pos:start="155:21" pos:end="155:29">extrabits</name></decl>;</decl_stmt>



                <expr_stmt pos:start="159:17" pos:end="159:89"><expr pos:start="159:17" pos:end="159:88"><name pos:start="159:17" pos:end="159:17">k</name> <operator pos:start="159:19" pos:end="159:19">=</operator> <call pos:start="159:21" pos:end="159:48"><name pos:start="159:21" pos:end="159:39">count_leading_zeros</name><argument_list pos:start="159:40" pos:end="159:48">(<argument pos:start="159:41" pos:end="159:47"><expr pos:start="159:41" pos:end="159:47"><name pos:start="159:41" pos:end="159:47">history</name></expr></argument>)</argument_list></call> <operator pos:start="159:50" pos:end="159:50">+</operator> <operator pos:start="159:52" pos:end="159:52">(</operator><operator pos:start="159:53" pos:end="159:53">(</operator><name pos:start="159:54" pos:end="159:60">history</name> <operator pos:start="159:62" pos:end="159:62">+</operator> <literal type="number" pos:start="159:64" pos:end="159:65">16</literal><operator pos:start="159:66" pos:end="159:66">)</operator> <operator pos:start="159:68" pos:end="159:69">&gt;&gt;</operator> <literal type="number" pos:start="159:71" pos:end="159:71">6</literal> <comment type="block" pos:start="159:73" pos:end="159:82">/* / 64 */</comment><operator pos:start="159:83" pos:end="159:83">)</operator> <operator pos:start="159:85" pos:end="159:85">-</operator> <literal type="number" pos:start="159:87" pos:end="159:88">24</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="163:17" pos:end="163:52"><expr pos:start="163:17" pos:end="163:51"><name pos:start="163:17" pos:end="163:25">extrabits</name> <operator pos:start="163:27" pos:end="163:27">=</operator> <call pos:start="163:29" pos:end="163:51"><name pos:start="163:29" pos:end="163:37">show_bits</name><argument_list pos:start="163:38" pos:end="163:51">(<argument pos:start="163:39" pos:end="163:47"><expr pos:start="163:39" pos:end="163:47"><operator pos:start="163:39" pos:end="163:39">&amp;</operator><name pos:start="163:40" pos:end="163:47"><name pos:start="163:40" pos:end="163:43">alac</name><operator pos:start="163:44" pos:end="163:45">-&gt;</operator><name pos:start="163:46" pos:end="163:47">gb</name></name></expr></argument>, <argument pos:start="163:50" pos:end="163:50"><expr pos:start="163:50" pos:end="163:50"><name pos:start="163:50" pos:end="163:50">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="167:17" pos:end="169:43"><expr pos:start="167:17" pos:end="169:42"><name pos:start="167:17" pos:end="167:26">block_size</name> <operator pos:start="167:28" pos:end="167:28">=</operator> <operator pos:start="167:30" pos:end="167:30">(</operator><operator pos:start="167:31" pos:end="167:31">(</operator><operator pos:start="167:32" pos:end="167:32">(</operator><literal type="number" pos:start="167:33" pos:end="167:33">1</literal> <operator pos:start="167:35" pos:end="167:36">&lt;&lt;</operator> <name pos:start="167:38" pos:end="167:38">k</name><operator pos:start="167:39" pos:end="167:39">)</operator> <operator pos:start="167:41" pos:end="167:41">-</operator> <literal type="number" pos:start="167:43" pos:end="167:43">1</literal><operator pos:start="167:44" pos:end="167:44">)</operator> <operator pos:start="167:46" pos:end="167:46">&amp;</operator> <name pos:start="167:48" pos:end="167:66">rice_kmodifier_mask</name><operator pos:start="167:67" pos:end="167:67">)</operator> <operator pos:start="167:69" pos:end="167:69">*</operator> <name pos:start="167:71" pos:end="167:71">x</name>

                           <operator pos:start="169:28" pos:end="169:28">+</operator> <name pos:start="169:30" pos:end="169:38">extrabits</name> <operator pos:start="169:40" pos:end="169:40">-</operator> <literal type="number" pos:start="169:42" pos:end="169:42">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="173:17" pos:end="185:17"><if pos:start="173:17" pos:end="181:17">if <condition pos:start="173:20" pos:end="173:34">(<expr pos:start="173:21" pos:end="173:33"><name pos:start="173:21" pos:end="173:29">extrabits</name> <operator pos:start="173:31" pos:end="173:31">&lt;</operator> <literal type="number" pos:start="173:33" pos:end="173:33">2</literal></expr>)</condition> <block pos:start="173:36" pos:end="181:17">{<block_content pos:start="175:21" pos:end="179:48">

                    <expr_stmt pos:start="175:21" pos:end="175:38"><expr pos:start="175:21" pos:end="175:37"><name pos:start="175:21" pos:end="175:21">x</name> <operator pos:start="175:23" pos:end="175:23">=</operator> <literal type="number" pos:start="175:25" pos:end="175:27">1</literal> <operator pos:start="175:27" pos:end="175:27">-</operator> <name pos:start="175:29" pos:end="175:37">extrabits</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="177:21" pos:end="177:36"><expr pos:start="177:21" pos:end="177:35"><name pos:start="177:21" pos:end="177:30">block_size</name> <operator pos:start="177:32" pos:end="177:33">+=</operator> <name pos:start="177:35" pos:end="177:35">x</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:48"><expr pos:start="179:21" pos:end="179:47"><call pos:start="179:21" pos:end="179:47"><name pos:start="179:21" pos:end="179:29">skip_bits</name><argument_list pos:start="179:30" pos:end="179:47">(<argument pos:start="179:31" pos:end="179:39"><expr pos:start="179:31" pos:end="179:39"><operator pos:start="179:31" pos:end="179:31">&amp;</operator><name pos:start="179:32" pos:end="179:39"><name pos:start="179:32" pos:end="179:35">alac</name><operator pos:start="179:36" pos:end="179:37">-&gt;</operator><name pos:start="179:38" pos:end="179:39">gb</name></name></expr></argument>, <argument pos:start="179:42" pos:end="179:46"><expr pos:start="179:42" pos:end="179:46"><name pos:start="179:42" pos:end="179:42">k</name> <operator pos:start="179:44" pos:end="179:44">-</operator> <literal type="number" pos:start="179:46" pos:end="179:46">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="181:19" pos:end="185:17">else <block pos:start="181:24" pos:end="185:17">{<block_content pos:start="183:21" pos:end="183:44">

                    <expr_stmt pos:start="183:21" pos:end="183:44"><expr pos:start="183:21" pos:end="183:43"><call pos:start="183:21" pos:end="183:43"><name pos:start="183:21" pos:end="183:29">skip_bits</name><argument_list pos:start="183:30" pos:end="183:43">(<argument pos:start="183:31" pos:end="183:39"><expr pos:start="183:31" pos:end="183:39"><operator pos:start="183:31" pos:end="183:31">&amp;</operator><name pos:start="183:32" pos:end="183:39"><name pos:start="183:32" pos:end="183:35">alac</name><operator pos:start="183:36" pos:end="183:37">-&gt;</operator><name pos:start="183:38" pos:end="183:39">gb</name></name></expr></argument>, <argument pos:start="183:42" pos:end="183:42"><expr pos:start="183:42" pos:end="183:42"><name pos:start="183:42" pos:end="183:42">k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="191:13" pos:end="197:13"><if pos:start="191:13" pos:end="197:13">if <condition pos:start="191:16" pos:end="191:31">(<expr pos:start="191:17" pos:end="191:30"><name pos:start="191:17" pos:end="191:26">block_size</name> <operator pos:start="191:28" pos:end="191:28">&gt;</operator> <literal type="number" pos:start="191:30" pos:end="191:30">0</literal></expr>)</condition> <block pos:start="191:33" pos:end="197:13">{<block_content pos:start="193:17" pos:end="195:43">

                <expr_stmt pos:start="193:17" pos:end="193:74"><expr pos:start="193:17" pos:end="193:73"><call pos:start="193:17" pos:end="193:73"><name pos:start="193:17" pos:end="193:22">memset</name><argument_list pos:start="193:23" pos:end="193:73">(<argument pos:start="193:24" pos:end="193:53"><expr pos:start="193:24" pos:end="193:53"><operator pos:start="193:24" pos:end="193:24">&amp;</operator><name pos:start="193:25" pos:end="193:53"><name pos:start="193:25" pos:end="193:37">output_buffer</name><index pos:start="193:38" pos:end="193:53">[<expr pos:start="193:39" pos:end="193:52"><name pos:start="193:39" pos:end="193:50">output_count</name><operator pos:start="193:51" pos:end="193:51">+</operator><literal type="number" pos:start="193:52" pos:end="193:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="193:56" pos:end="193:56"><expr pos:start="193:56" pos:end="193:56"><literal type="number" pos:start="193:56" pos:end="193:56">0</literal></expr></argument>, <argument pos:start="193:59" pos:end="193:72"><expr pos:start="193:59" pos:end="193:72"><name pos:start="193:59" pos:end="193:68">block_size</name> <operator pos:start="193:70" pos:end="193:70">*</operator> <literal type="number" pos:start="193:72" pos:end="193:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="195:17" pos:end="195:43"><expr pos:start="195:17" pos:end="195:42"><name pos:start="195:17" pos:end="195:28">output_count</name> <operator pos:start="195:30" pos:end="195:31">+=</operator> <name pos:start="195:33" pos:end="195:42">block_size</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="201:13" pos:end="203:34"><if pos:start="201:13" pos:end="203:34">if <condition pos:start="201:16" pos:end="201:36">(<expr pos:start="201:17" pos:end="201:35"><name pos:start="201:17" pos:end="201:26">block_size</name> <operator pos:start="201:28" pos:end="201:28">&gt;</operator> <literal type="number" pos:start="201:30" pos:end="201:35">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="203:17" pos:end="203:34"><block_content pos:start="203:17" pos:end="203:34">

                <expr_stmt pos:start="203:17" pos:end="203:34"><expr pos:start="203:17" pos:end="203:33"><name pos:start="203:17" pos:end="203:29">sign_modifier</name> <operator pos:start="203:31" pos:end="203:31">=</operator> <literal type="number" pos:start="203:33" pos:end="203:33">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:24"><expr pos:start="207:13" pos:end="207:23"><name pos:start="207:13" pos:end="207:19">history</name> <operator pos:start="207:21" pos:end="207:21">=</operator> <literal type="number" pos:start="207:23" pos:end="207:23">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
