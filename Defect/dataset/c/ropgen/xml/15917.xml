<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15917.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">mirror_exit</name><parameter_list pos:start="1:24" pos:end="1:52">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:32">BlockJob</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">job</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:43">void</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:51">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:20">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">MirrorBlockJob</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:21">s</name> <init pos:start="5:23" pos:end="5:65">= <expr pos:start="5:25" pos:end="5:65"><call pos:start="5:25" pos:end="5:65"><name pos:start="5:25" pos:end="5:36">container_of</name><argument_list pos:start="5:37" pos:end="5:65">(<argument pos:start="5:38" pos:end="5:40"><expr pos:start="5:38" pos:end="5:40"><name pos:start="5:38" pos:end="5:40">job</name></expr></argument>, <argument pos:start="5:43" pos:end="5:56"><expr pos:start="5:43" pos:end="5:56"><name pos:start="5:43" pos:end="5:56">MirrorBlockJob</name></expr></argument>, <argument pos:start="5:59" pos:end="5:64"><expr pos:start="5:59" pos:end="5:64"><name pos:start="5:59" pos:end="5:64">common</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">MirrorExitData</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:24">data</name> <init pos:start="7:26" pos:end="7:33">= <expr pos:start="7:28" pos:end="7:33"><name pos:start="7:28" pos:end="7:33">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">AioContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:35">replace_aio_context</name> <init pos:start="9:37" pos:end="9:42">= <expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">BlockDriverState</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:25">src</name> <init pos:start="11:27" pos:end="11:40">= <expr pos:start="11:29" pos:end="11:40"><name pos:start="11:29" pos:end="11:40"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:37">common</name><operator pos:start="11:38" pos:end="11:38">.</operator><name pos:start="11:39" pos:end="11:40">bs</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="17:32">/* Make sure that the source BDS doesn't go away before we called

     * block_job_completed(). */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:18"><expr pos:start="19:5" pos:end="19:17"><call pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:12">bdrv_ref</name><argument_list pos:start="19:13" pos:end="19:17">(<argument pos:start="19:14" pos:end="19:16"><expr pos:start="19:14" pos:end="19:16"><name pos:start="19:14" pos:end="19:16">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:22">(<expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:21">to_replace</name></name></expr>)</condition> <block pos:start="23:24" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:49">

        <expr_stmt pos:start="25:9" pos:end="25:66"><expr pos:start="25:9" pos:end="25:65"><name pos:start="25:9" pos:end="25:27">replace_aio_context</name> <operator pos:start="25:29" pos:end="25:29">=</operator> <call pos:start="25:31" pos:end="25:65"><name pos:start="25:31" pos:end="25:50">bdrv_get_aio_context</name><argument_list pos:start="25:51" pos:end="25:65">(<argument pos:start="25:52" pos:end="25:64"><expr pos:start="25:52" pos:end="25:64"><name pos:start="25:52" pos:end="25:64"><name pos:start="25:52" pos:end="25:52">s</name><operator pos:start="25:53" pos:end="25:54">-&gt;</operator><name pos:start="25:55" pos:end="25:64">to_replace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:49"><expr pos:start="27:9" pos:end="27:48"><call pos:start="27:9" pos:end="27:48"><name pos:start="27:9" pos:end="27:27">aio_context_acquire</name><argument_list pos:start="27:28" pos:end="27:48">(<argument pos:start="27:29" pos:end="27:47"><expr pos:start="27:29" pos:end="27:47"><name pos:start="27:29" pos:end="27:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="69:5"><if pos:start="33:5" pos:end="69:5">if <condition pos:start="33:8" pos:end="33:45">(<expr pos:start="33:9" pos:end="33:44"><name pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:26">should_complete</name></name> <operator pos:start="33:28" pos:end="33:29">&amp;&amp;</operator> <name pos:start="33:31" pos:end="33:39"><name pos:start="33:31" pos:end="33:34">data</name><operator pos:start="33:35" pos:end="33:36">-&gt;</operator><name pos:start="33:37" pos:end="33:39">ret</name></name> <operator pos:start="33:41" pos:end="33:42">==</operator> <literal type="number" pos:start="33:44" pos:end="33:44">0</literal></expr>)</condition> <block pos:start="33:47" pos:end="69:5">{<block_content pos:start="35:9" pos:end="67:61">

        <decl_stmt pos:start="35:9" pos:end="35:52"><decl pos:start="35:9" pos:end="35:51"><type pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:24">BlockDriverState</name> <modifier pos:start="35:26" pos:end="35:26">*</modifier></type><name pos:start="35:27" pos:end="35:36">to_replace</name> <init pos:start="35:38" pos:end="35:51">= <expr pos:start="35:40" pos:end="35:51"><name pos:start="35:40" pos:end="35:51"><name pos:start="35:40" pos:end="35:40">s</name><operator pos:start="35:41" pos:end="35:42">-&gt;</operator><name pos:start="35:43" pos:end="35:48">common</name><operator pos:start="35:49" pos:end="35:49">.</operator><name pos:start="35:50" pos:end="35:51">bs</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:26">(<expr pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:25"><name pos:start="37:13" pos:end="37:13">s</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:25">to_replace</name></name></expr>)</condition> <block pos:start="37:28" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:39">

            <expr_stmt pos:start="39:13" pos:end="39:39"><expr pos:start="39:13" pos:end="39:38"><name pos:start="39:13" pos:end="39:22">to_replace</name> <operator pos:start="39:24" pos:end="39:24">=</operator> <name pos:start="39:26" pos:end="39:38"><name pos:start="39:26" pos:end="39:26">s</name><operator pos:start="39:27" pos:end="39:28">-&gt;</operator><name pos:start="39:29" pos:end="39:38">to_replace</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="45:9" pos:end="47:69">/* This was checked in mirror_start_job(), but meanwhile one of the

         * nodes could have been newly attached to a BlockBackend. */</comment>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:46">(<expr pos:start="49:13" pos:end="49:45"><name pos:start="49:13" pos:end="49:27"><name pos:start="49:13" pos:end="49:22">to_replace</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:27">blk</name></name> <operator pos:start="49:29" pos:end="49:30">&amp;&amp;</operator> <name pos:start="49:32" pos:end="49:45"><name pos:start="49:32" pos:end="49:32">s</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:40">target</name><operator pos:start="49:41" pos:end="49:42">-&gt;</operator><name pos:start="49:43" pos:end="49:45">blk</name></name></expr>)</condition> <block pos:start="49:48" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:21">

            <expr_stmt pos:start="51:13" pos:end="51:80"><expr pos:start="51:13" pos:end="51:79"><call pos:start="51:13" pos:end="51:79"><name pos:start="51:13" pos:end="51:24">error_report</name><argument_list pos:start="51:25" pos:end="51:79">(<argument pos:start="51:26" pos:end="51:78"><expr pos:start="51:26" pos:end="51:78"><literal type="string" pos:start="51:26" pos:end="51:78">"block job: Can't create node with two BlockBackends"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:32"><expr pos:start="53:13" pos:end="53:31"><name pos:start="53:13" pos:end="53:21"><name pos:start="53:13" pos:end="53:16">data</name><operator pos:start="53:17" pos:end="53:18">-&gt;</operator><name pos:start="53:19" pos:end="53:21">ret</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <operator pos:start="53:25" pos:end="53:25">-</operator><name pos:start="53:26" pos:end="53:31">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="55:13" pos:end="55:21">goto <name pos:start="55:18" pos:end="55:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="61:9" pos:end="65:9"><if pos:start="61:9" pos:end="65:9">if <condition pos:start="61:12" pos:end="61:68">(<expr pos:start="61:13" pos:end="61:67"><call pos:start="61:13" pos:end="61:37"><name pos:start="61:13" pos:end="61:26">bdrv_get_flags</name><argument_list pos:start="61:27" pos:end="61:37">(<argument pos:start="61:28" pos:end="61:36"><expr pos:start="61:28" pos:end="61:36"><name pos:start="61:28" pos:end="61:36"><name pos:start="61:28" pos:end="61:28">s</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:36">target</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:39" pos:end="61:40">!=</operator> <call pos:start="61:42" pos:end="61:67"><name pos:start="61:42" pos:end="61:55">bdrv_get_flags</name><argument_list pos:start="61:56" pos:end="61:67">(<argument pos:start="61:57" pos:end="61:66"><expr pos:start="61:57" pos:end="61:66"><name pos:start="61:57" pos:end="61:66">to_replace</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="61:70" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:69">

            <expr_stmt pos:start="63:13" pos:end="63:69"><expr pos:start="63:13" pos:end="63:68"><call pos:start="63:13" pos:end="63:68"><name pos:start="63:13" pos:end="63:23">bdrv_reopen</name><argument_list pos:start="63:24" pos:end="63:68">(<argument pos:start="63:25" pos:end="63:33"><expr pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:25">s</name><operator pos:start="63:26" pos:end="63:27">-&gt;</operator><name pos:start="63:28" pos:end="63:33">target</name></name></expr></argument>, <argument pos:start="63:36" pos:end="63:61"><expr pos:start="63:36" pos:end="63:61"><call pos:start="63:36" pos:end="63:61"><name pos:start="63:36" pos:end="63:49">bdrv_get_flags</name><argument_list pos:start="63:50" pos:end="63:61">(<argument pos:start="63:51" pos:end="63:60"><expr pos:start="63:51" pos:end="63:60"><name pos:start="63:51" pos:end="63:60">to_replace</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="63:64" pos:end="63:67"><expr pos:start="63:64" pos:end="63:67"><name pos:start="63:64" pos:end="63:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:61"><expr pos:start="67:9" pos:end="67:60"><call pos:start="67:9" pos:end="67:60"><name pos:start="67:9" pos:end="67:37">bdrv_replace_in_backing_chain</name><argument_list pos:start="67:38" pos:end="67:60">(<argument pos:start="67:39" pos:end="67:48"><expr pos:start="67:39" pos:end="67:48"><name pos:start="67:39" pos:end="67:48">to_replace</name></expr></argument>, <argument pos:start="67:51" pos:end="67:59"><expr pos:start="67:51" pos:end="67:59"><name pos:start="67:51" pos:end="67:59"><name pos:start="67:51" pos:end="67:51">s</name><operator pos:start="67:52" pos:end="67:53">-&gt;</operator><name pos:start="67:54" pos:end="67:59">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="73:1" pos:end="73:4"><name pos:start="73:1" pos:end="73:3">out</name>:</label>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:22">(<expr pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:21"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:21">to_replace</name></name></expr>)</condition> <block pos:start="75:24" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:34">

        <expr_stmt pos:start="77:9" pos:end="77:63"><expr pos:start="77:9" pos:end="77:62"><call pos:start="77:9" pos:end="77:62"><name pos:start="77:9" pos:end="77:27">bdrv_op_unblock_all</name><argument_list pos:start="77:28" pos:end="77:62">(<argument pos:start="77:29" pos:end="77:41"><expr pos:start="77:29" pos:end="77:41"><name pos:start="77:29" pos:end="77:41"><name pos:start="77:29" pos:end="77:29">s</name><operator pos:start="77:30" pos:end="77:31">-&gt;</operator><name pos:start="77:32" pos:end="77:41">to_replace</name></name></expr></argument>, <argument pos:start="77:44" pos:end="77:61"><expr pos:start="77:44" pos:end="77:61"><name pos:start="77:44" pos:end="77:61"><name pos:start="77:44" pos:end="77:44">s</name><operator pos:start="77:45" pos:end="77:46">-&gt;</operator><name pos:start="77:47" pos:end="77:61">replace_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:39"><expr pos:start="79:9" pos:end="79:38"><call pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:18">error_free</name><argument_list pos:start="79:19" pos:end="79:38">(<argument pos:start="79:20" pos:end="79:37"><expr pos:start="79:20" pos:end="79:37"><name pos:start="79:20" pos:end="79:37"><name pos:start="79:20" pos:end="79:20">s</name><operator pos:start="79:21" pos:end="79:22">-&gt;</operator><name pos:start="79:23" pos:end="79:37">replace_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:34"><expr pos:start="81:9" pos:end="81:33"><call pos:start="81:9" pos:end="81:33"><name pos:start="81:9" pos:end="81:18">bdrv_unref</name><argument_list pos:start="81:19" pos:end="81:33">(<argument pos:start="81:20" pos:end="81:32"><expr pos:start="81:20" pos:end="81:32"><name pos:start="81:20" pos:end="81:32"><name pos:start="81:20" pos:end="81:20">s</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:32">to_replace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:28">(<expr pos:start="85:9" pos:end="85:27"><name pos:start="85:9" pos:end="85:27">replace_aio_context</name></expr>)</condition> <block pos:start="85:30" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:49">

        <expr_stmt pos:start="87:9" pos:end="87:49"><expr pos:start="87:9" pos:end="87:48"><call pos:start="87:9" pos:end="87:48"><name pos:start="87:9" pos:end="87:27">aio_context_release</name><argument_list pos:start="87:28" pos:end="87:48">(<argument pos:start="87:29" pos:end="87:47"><expr pos:start="87:29" pos:end="87:47"><name pos:start="87:29" pos:end="87:47">replace_aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:24"><expr pos:start="91:5" pos:end="91:23"><call pos:start="91:5" pos:end="91:23"><name pos:start="91:5" pos:end="91:10">g_free</name><argument_list pos:start="91:11" pos:end="91:23">(<argument pos:start="91:12" pos:end="91:22"><expr pos:start="91:12" pos:end="91:22"><name pos:start="91:12" pos:end="91:22"><name pos:start="91:12" pos:end="91:12">s</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:22">replaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:54"><expr pos:start="93:5" pos:end="93:53"><call pos:start="93:5" pos:end="93:53"><name pos:start="93:5" pos:end="93:23">bdrv_op_unblock_all</name><argument_list pos:start="93:24" pos:end="93:53">(<argument pos:start="93:25" pos:end="93:33"><expr pos:start="93:25" pos:end="93:33"><name pos:start="93:25" pos:end="93:33"><name pos:start="93:25" pos:end="93:25">s</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:33">target</name></name></expr></argument>, <argument pos:start="93:36" pos:end="93:52"><expr pos:start="93:36" pos:end="93:52"><name pos:start="93:36" pos:end="93:52"><name pos:start="93:36" pos:end="93:36">s</name><operator pos:start="93:37" pos:end="93:38">-&gt;</operator><name pos:start="93:39" pos:end="93:44">common</name><operator pos:start="93:45" pos:end="93:45">.</operator><name pos:start="93:46" pos:end="93:52">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><call pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:14">bdrv_unref</name><argument_list pos:start="95:15" pos:end="95:25">(<argument pos:start="95:16" pos:end="95:24"><expr pos:start="95:16" pos:end="95:24"><name pos:start="95:16" pos:end="95:24"><name pos:start="95:16" pos:end="95:16">s</name><operator pos:start="95:17" pos:end="95:18">-&gt;</operator><name pos:start="95:19" pos:end="95:24">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:47"><expr pos:start="97:5" pos:end="97:46"><call pos:start="97:5" pos:end="97:46"><name pos:start="97:5" pos:end="97:23">block_job_completed</name><argument_list pos:start="97:24" pos:end="97:46">(<argument pos:start="97:25" pos:end="97:34"><expr pos:start="97:25" pos:end="97:34"><operator pos:start="97:25" pos:end="97:25">&amp;</operator><name pos:start="97:26" pos:end="97:34"><name pos:start="97:26" pos:end="97:26">s</name><operator pos:start="97:27" pos:end="97:28">-&gt;</operator><name pos:start="97:29" pos:end="97:34">common</name></name></expr></argument>, <argument pos:start="97:37" pos:end="97:45"><expr pos:start="97:37" pos:end="97:45"><name pos:start="97:37" pos:end="97:45"><name pos:start="97:37" pos:end="97:40">data</name><operator pos:start="97:41" pos:end="97:42">-&gt;</operator><name pos:start="97:43" pos:end="97:45">ret</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="99:5" pos:end="99:17"><expr pos:start="99:5" pos:end="99:16"><call pos:start="99:5" pos:end="99:16"><name pos:start="99:5" pos:end="99:10">g_free</name><argument_list pos:start="99:11" pos:end="99:16">(<argument pos:start="99:12" pos:end="99:15"><expr pos:start="99:12" pos:end="99:15"><name pos:start="99:12" pos:end="99:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:26"><expr pos:start="101:5" pos:end="101:25"><call pos:start="101:5" pos:end="101:25"><name pos:start="101:5" pos:end="101:20">bdrv_drained_end</name><argument_list pos:start="101:21" pos:end="101:25">(<argument pos:start="101:22" pos:end="101:24"><expr pos:start="101:22" pos:end="101:24"><name pos:start="101:22" pos:end="101:24">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="103:5" pos:end="107:5"><if pos:start="103:5" pos:end="107:5">if <condition pos:start="103:8" pos:end="103:60">(<expr pos:start="103:9" pos:end="103:59"><call pos:start="103:9" pos:end="103:30"><name pos:start="103:9" pos:end="103:28">qemu_get_aio_context</name><argument_list pos:start="103:29" pos:end="103:30">()</argument_list></call> <operator pos:start="103:32" pos:end="103:33">==</operator> <call pos:start="103:35" pos:end="103:59"><name pos:start="103:35" pos:end="103:54">bdrv_get_aio_context</name><argument_list pos:start="103:55" pos:end="103:59">(<argument pos:start="103:56" pos:end="103:58"><expr pos:start="103:56" pos:end="103:58"><name pos:start="103:56" pos:end="103:58">src</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:62" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:57">

        <expr_stmt pos:start="105:9" pos:end="105:57"><expr pos:start="105:9" pos:end="105:56"><call pos:start="105:9" pos:end="105:56"><name pos:start="105:9" pos:end="105:27">aio_enable_external</name><argument_list pos:start="105:28" pos:end="105:56">(<argument pos:start="105:29" pos:end="105:55"><expr pos:start="105:29" pos:end="105:55"><call pos:start="105:29" pos:end="105:55"><name pos:start="105:29" pos:end="105:53">iohandler_get_aio_context</name><argument_list pos:start="105:54" pos:end="105:55">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:20"><expr pos:start="109:5" pos:end="109:19"><call pos:start="109:5" pos:end="109:19"><name pos:start="109:5" pos:end="109:14">bdrv_unref</name><argument_list pos:start="109:15" pos:end="109:19">(<argument pos:start="109:16" pos:end="109:18"><expr pos:start="109:16" pos:end="109:18"><name pos:start="109:16" pos:end="109:18">src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
