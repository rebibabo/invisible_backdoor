<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1612.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:40">test_after_failed_device_add</name><parameter_list pos:start="1:41" pos:end="1:46">(<parameter pos:start="1:42" pos:end="1:45"><decl pos:start="1:42" pos:end="1:45"><type pos:start="1:42" pos:end="1:45"><name pos:start="1:42" pos:end="1:45">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:16">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:9">QDict</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier></type><name pos:start="5:12" pos:end="5:19">response</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:9">QDict</name> <modifier pos:start="7:11" pos:end="7:11">*</modifier></type><name pos:start="7:12" pos:end="7:16">error</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:44"><expr pos:start="11:5" pos:end="11:43"><call pos:start="11:5" pos:end="11:43"><name pos:start="11:5" pos:end="11:15">qtest_start</name><argument_list pos:start="11:16" pos:end="11:43">(<argument pos:start="11:17" pos:end="11:42"><expr pos:start="11:17" pos:end="11:42"><literal type="string" pos:start="11:17" pos:end="11:42">"-drive if=none,id=drive0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="19:7">/* Make device_add fail.  If this leaks the virtio-blk-pci device then a

     * reference to drive0 will also be held (via qdev properties).

     */</comment>

    <expr_stmt pos:start="21:5" pos:end="29:25"><expr pos:start="21:5" pos:end="29:24"><name pos:start="21:5" pos:end="21:12">response</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="29:24"><name pos:start="21:16" pos:end="21:18">qmp</name><argument_list pos:start="21:19" pos:end="29:24">(<argument pos:start="21:20" pos:end="29:23"><expr pos:start="21:20" pos:end="29:23"><literal type="string" pos:start="21:20" pos:end="21:46">"{'execute': 'device_add',"</literal>

                   <literal type="string" pos:start="23:20" pos:end="23:36">" 'arguments': {"</literal>

                   <literal type="string" pos:start="25:20" pos:end="25:51">"   'driver': 'virtio-blk-pci',"</literal>

                   <literal type="string" pos:start="27:20" pos:end="27:41">"   'drive': 'drive0'"</literal>

                   <literal type="string" pos:start="29:20" pos:end="29:23">"}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><call pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:12">g_assert</name><argument_list pos:start="31:13" pos:end="31:22">(<argument pos:start="31:14" pos:end="31:21"><expr pos:start="31:14" pos:end="31:21"><name pos:start="31:14" pos:end="31:21">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:47"><expr pos:start="33:5" pos:end="33:46"><name pos:start="33:5" pos:end="33:9">error</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:46"><name pos:start="33:13" pos:end="33:27">qdict_get_qdict</name><argument_list pos:start="33:28" pos:end="33:46">(<argument pos:start="33:29" pos:end="33:36"><expr pos:start="33:29" pos:end="33:36"><name pos:start="33:29" pos:end="33:36">response</name></expr></argument>, <argument pos:start="33:39" pos:end="33:45"><expr pos:start="33:39" pos:end="33:45"><literal type="string" pos:start="33:39" pos:end="33:45">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:75"><expr pos:start="35:5" pos:end="35:74"><call pos:start="35:5" pos:end="35:74"><name pos:start="35:5" pos:end="35:19">g_assert_cmpstr</name><argument_list pos:start="35:20" pos:end="35:74">(<argument pos:start="35:21" pos:end="35:53"><expr pos:start="35:21" pos:end="35:53"><call pos:start="35:21" pos:end="35:53"><name pos:start="35:21" pos:end="35:37">qdict_get_try_str</name><argument_list pos:start="35:38" pos:end="35:53">(<argument pos:start="35:39" pos:end="35:43"><expr pos:start="35:39" pos:end="35:43"><name pos:start="35:39" pos:end="35:43">error</name></expr></argument>, <argument pos:start="35:46" pos:end="35:52"><expr pos:start="35:46" pos:end="35:52"><literal type="string" pos:start="35:46" pos:end="35:52">"class"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:56" pos:end="35:57"><expr pos:start="35:56" pos:end="35:57"><operator pos:start="35:56" pos:end="35:57">==</operator></expr></argument>, <argument pos:start="35:60" pos:end="35:73"><expr pos:start="35:60" pos:end="35:73"><literal type="string" pos:start="35:60" pos:end="35:73">"GenericError"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:22"><expr pos:start="37:5" pos:end="37:21"><call pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:11">QDECREF</name><argument_list pos:start="37:12" pos:end="37:21">(<argument pos:start="37:13" pos:end="37:20"><expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:26">/* Delete the drive */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:16"><expr pos:start="43:5" pos:end="43:15"><call pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">drive_del</name><argument_list pos:start="43:14" pos:end="43:15">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="51:7">/* Try to re-add the drive.  This fails with duplicate IDs if a leaked

     * virtio-blk-pci exists that holds a reference to the old drive0.

     */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><call pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:13">drive_add</name><argument_list pos:start="53:14" pos:end="53:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:16"><expr pos:start="57:5" pos:end="57:15"><call pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:13">qtest_end</name><argument_list pos:start="57:14" pos:end="57:15">()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
