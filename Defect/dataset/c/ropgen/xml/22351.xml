<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22351.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">get_tag</name><parameter_list pos:start="1:20" pos:end="1:91">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:38"><name pos:start="1:21" pos:end="1:35">AVFormatContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">s</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:55">key</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:65"><decl pos:start="1:58" pos:end="1:65"><type pos:start="1:58" pos:end="1:65"><name pos:start="1:58" pos:end="1:60">int</name></type> <name pos:start="1:62" pos:end="1:65">type</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:74"><decl pos:start="1:68" pos:end="1:74"><type pos:start="1:68" pos:end="1:74"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:74">len</name></decl></parameter>, <parameter pos:start="1:77" pos:end="1:90"><decl pos:start="1:77" pos:end="1:90"><type pos:start="1:77" pos:end="1:90"><name pos:start="1:77" pos:end="1:79">int</name></type> <name pos:start="1:81" pos:end="1:90">type2_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:42">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:15">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:15">off</name> <init pos:start="7:17" pos:end="7:34">= <expr pos:start="7:19" pos:end="7:34"><call pos:start="7:19" pos:end="7:34"><name pos:start="7:19" pos:end="7:27">avio_tell</name><argument_list pos:start="7:28" pos:end="7:34">(<argument pos:start="7:29" pos:end="7:33"><expr pos:start="7:29" pos:end="7:33"><name pos:start="7:29" pos:end="7:33"><name pos:start="7:29" pos:end="7:29">s</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:33">pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="13:15"><if pos:start="11:5" pos:end="13:15">if <condition pos:start="11:8" pos:end="11:44">(<expr pos:start="11:9" pos:end="11:43"><operator pos:start="11:9" pos:end="11:9">(</operator><name pos:start="11:10" pos:end="11:17">unsigned</name><operator pos:start="11:18" pos:end="11:18">)</operator><name pos:start="11:19" pos:end="11:21">len</name> <operator pos:start="11:23" pos:end="11:24">&gt;=</operator> <operator pos:start="11:26" pos:end="11:26">(</operator><name pos:start="11:27" pos:end="11:34">UINT_MAX</name> <operator pos:start="11:36" pos:end="11:36">-</operator> <literal type="number" pos:start="11:38" pos:end="11:38">1</literal><operator pos:start="11:39" pos:end="11:39">)</operator> <operator pos:start="11:41" pos:end="11:41">/</operator> <literal type="number" pos:start="11:43" pos:end="11:43">2</literal></expr>)</condition><block type="pseudo" pos:start="13:9" pos:end="13:15"><block_content pos:start="13:9" pos:end="13:15">

        <return pos:start="13:9" pos:end="13:15">return;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:9">value</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:34"><name pos:start="17:13" pos:end="17:21">av_malloc</name><argument_list pos:start="17:22" pos:end="17:34">(<argument pos:start="17:23" pos:end="17:33"><expr pos:start="17:23" pos:end="17:33"><literal type="number" pos:start="17:23" pos:end="17:23">2</literal> <operator pos:start="17:25" pos:end="17:25">*</operator> <name pos:start="17:27" pos:end="17:29">len</name> <operator pos:start="17:31" pos:end="17:31">+</operator> <literal type="number" pos:start="17:33" pos:end="17:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:20"><if pos:start="19:5" pos:end="21:20">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:14">value</name></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:20"><block_content pos:start="21:9" pos:end="21:20">

        <goto pos:start="21:9" pos:end="21:20">goto <name pos:start="21:14" pos:end="21:19">finish</name>;</goto></block_content></block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="73:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:18">(<expr pos:start="25:9" pos:end="25:17"><name pos:start="25:9" pos:end="25:12">type</name> <operator pos:start="25:14" pos:end="25:15">==</operator> <literal type="number" pos:start="25:17" pos:end="25:17">0</literal></expr>)</condition> <block pos:start="25:20" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:57">         <comment type="line" pos:start="25:30" pos:end="25:40">// UTF16-LE</comment>

        <expr_stmt pos:start="27:9" pos:end="27:57"><expr pos:start="27:9" pos:end="27:56"><call pos:start="27:9" pos:end="27:56"><name pos:start="27:9" pos:end="27:24">avio_get_str16le</name><argument_list pos:start="27:25" pos:end="27:56">(<argument pos:start="27:26" pos:end="27:30"><expr pos:start="27:26" pos:end="27:30"><name pos:start="27:26" pos:end="27:30"><name pos:start="27:26" pos:end="27:26">s</name><operator pos:start="27:27" pos:end="27:28">-&gt;</operator><name pos:start="27:29" pos:end="27:30">pb</name></name></expr></argument>, <argument pos:start="27:33" pos:end="27:35"><expr pos:start="27:33" pos:end="27:35"><name pos:start="27:33" pos:end="27:35">len</name></expr></argument>, <argument pos:start="27:38" pos:end="27:42"><expr pos:start="27:38" pos:end="27:42"><name pos:start="27:38" pos:end="27:42">value</name></expr></argument>, <argument pos:start="27:45" pos:end="27:55"><expr pos:start="27:45" pos:end="27:55"><literal type="number" pos:start="27:45" pos:end="27:45">2</literal> <operator pos:start="27:47" pos:end="27:47">*</operator> <name pos:start="27:49" pos:end="27:51">len</name> <operator pos:start="27:53" pos:end="27:53">+</operator> <literal type="number" pos:start="27:55" pos:end="27:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="35:5">else if <condition pos:start="29:15" pos:end="29:26">(<expr pos:start="29:16" pos:end="29:25"><name pos:start="29:16" pos:end="29:19">type</name> <operator pos:start="29:21" pos:end="29:22">==</operator> <operator pos:start="29:24" pos:end="29:24">-</operator><literal type="number" pos:start="29:25" pos:end="29:25">1</literal></expr>)</condition> <block pos:start="29:28" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:21"> <comment type="line" pos:start="29:30" pos:end="29:37">// ASCII</comment>

        <expr_stmt pos:start="31:9" pos:end="31:37"><expr pos:start="31:9" pos:end="31:36"><call pos:start="31:9" pos:end="31:36"><name pos:start="31:9" pos:end="31:17">avio_read</name><argument_list pos:start="31:18" pos:end="31:36">(<argument pos:start="31:19" pos:end="31:23"><expr pos:start="31:19" pos:end="31:23"><name pos:start="31:19" pos:end="31:23"><name pos:start="31:19" pos:end="31:19">s</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:23">pb</name></name></expr></argument>, <argument pos:start="31:26" pos:end="31:30"><expr pos:start="31:26" pos:end="31:30"><name pos:start="31:26" pos:end="31:30">value</name></expr></argument>, <argument pos:start="31:33" pos:end="31:35"><expr pos:start="31:33" pos:end="31:35"><name pos:start="31:33" pos:end="31:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:21"><expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:13">value</name><index pos:start="33:14" pos:end="33:18">[<expr pos:start="33:15" pos:end="33:17"><name pos:start="33:15" pos:end="33:17">len</name></expr>]</index></name><operator pos:start="33:19" pos:end="33:19">=</operator><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="53:5">else if <condition pos:start="35:15" pos:end="35:25">(<expr pos:start="35:16" pos:end="35:24"><name pos:start="35:16" pos:end="35:19">type</name> <operator pos:start="35:21" pos:end="35:22">==</operator> <literal type="number" pos:start="35:24" pos:end="35:24">1</literal></expr>)</condition> <block pos:start="35:27" pos:end="53:5">{<block_content pos:start="37:9" pos:end="51:20">  <comment type="line" pos:start="35:30" pos:end="35:42">// byte array</comment>

        <if_stmt pos:start="37:9" pos:end="49:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:39">(<expr pos:start="37:13" pos:end="37:38"><operator pos:start="37:13" pos:end="37:13">!</operator><call pos:start="37:14" pos:end="37:38"><name pos:start="37:14" pos:end="37:19">strcmp</name><argument_list pos:start="37:20" pos:end="37:38">(<argument pos:start="37:21" pos:end="37:23"><expr pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">key</name></expr></argument>, <argument pos:start="37:26" pos:end="37:37"><expr pos:start="37:26" pos:end="37:37"><literal type="string" pos:start="37:26" pos:end="37:37">"WM/Picture"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:41" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:37"> <comment type="line" pos:start="37:43" pos:end="37:61">// handle cover art</comment>

            <expr_stmt pos:start="39:13" pos:end="39:37"><expr pos:start="39:13" pos:end="39:36"><call pos:start="39:13" pos:end="39:36"><name pos:start="39:13" pos:end="39:28">asf_read_picture</name><argument_list pos:start="39:29" pos:end="39:36">(<argument pos:start="39:30" pos:end="39:30"><expr pos:start="39:30" pos:end="39:30"><name pos:start="39:30" pos:end="39:30">s</name></expr></argument>, <argument pos:start="39:33" pos:end="39:35"><expr pos:start="39:33" pos:end="39:35"><name pos:start="39:33" pos:end="39:35">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="45:9">else if <condition pos:start="41:19" pos:end="41:39">(<expr pos:start="41:20" pos:end="41:38"><operator pos:start="41:20" pos:end="41:20">!</operator><call pos:start="41:21" pos:end="41:38"><name pos:start="41:21" pos:end="41:26">strcmp</name><argument_list pos:start="41:27" pos:end="41:38">(<argument pos:start="41:28" pos:end="41:30"><expr pos:start="41:28" pos:end="41:30"><name pos:start="41:28" pos:end="41:30">key</name></expr></argument>, <argument pos:start="41:33" pos:end="41:37"><expr pos:start="41:33" pos:end="41:37"><literal type="string" pos:start="41:33" pos:end="41:37">"ID3"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:41" pos:end="45:9">{<block_content pos:start="43:13" pos:end="43:32"> <comment type="line" pos:start="41:43" pos:end="41:59">// handle ID3 tag</comment>

            <expr_stmt pos:start="43:13" pos:end="43:32"><expr pos:start="43:13" pos:end="43:31"><call pos:start="43:13" pos:end="43:31"><name pos:start="43:13" pos:end="43:23">get_id3_tag</name><argument_list pos:start="43:24" pos:end="43:31">(<argument pos:start="43:25" pos:end="43:25"><expr pos:start="43:25" pos:end="43:25"><name pos:start="43:25" pos:end="43:25">s</name></expr></argument>, <argument pos:start="43:28" pos:end="43:30"><expr pos:start="43:28" pos:end="43:30"><name pos:start="43:28" pos:end="43:30">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="45:11" pos:end="49:9">else <block pos:start="45:16" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:82">

            <expr_stmt pos:start="47:13" pos:end="47:82"><expr pos:start="47:13" pos:end="47:81"><call pos:start="47:13" pos:end="47:81"><name pos:start="47:13" pos:end="47:18">av_log</name><argument_list pos:start="47:19" pos:end="47:81">(<argument pos:start="47:20" pos:end="47:20"><expr pos:start="47:20" pos:end="47:20"><name pos:start="47:20" pos:end="47:20">s</name></expr></argument>, <argument pos:start="47:23" pos:end="47:36"><expr pos:start="47:23" pos:end="47:36"><name pos:start="47:23" pos:end="47:36">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="47:39" pos:end="47:75"><expr pos:start="47:39" pos:end="47:75"><literal type="string" pos:start="47:39" pos:end="47:75">"Unsupported byte array in tag %s.\n"</literal></expr></argument>, <argument pos:start="47:78" pos:end="47:80"><expr pos:start="47:78" pos:end="47:80"><name pos:start="47:78" pos:end="47:80">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <goto pos:start="51:9" pos:end="51:20">goto <name pos:start="51:14" pos:end="51:19">finish</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="53:7" pos:end="59:5">else if <condition pos:start="53:15" pos:end="53:37">(<expr pos:start="53:16" pos:end="53:36"><name pos:start="53:16" pos:end="53:19">type</name> <operator pos:start="53:21" pos:end="53:21">&gt;</operator> <literal type="number" pos:start="53:23" pos:end="53:23">1</literal> <operator pos:start="53:25" pos:end="53:26">&amp;&amp;</operator> <name pos:start="53:28" pos:end="53:31">type</name> <operator pos:start="53:33" pos:end="53:34">&lt;=</operator> <literal type="number" pos:start="53:36" pos:end="53:36">5</literal></expr>)</condition> <block pos:start="53:39" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:45">  <comment type="line" pos:start="53:42" pos:end="53:77">// boolean or DWORD or QWORD or WORD</comment>

        <decl_stmt pos:start="55:9" pos:end="55:58"><decl pos:start="55:9" pos:end="55:57"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint64_t</name></type> <name pos:start="55:18" pos:end="55:20">num</name> <init pos:start="55:22" pos:end="55:57">= <expr pos:start="55:24" pos:end="55:57"><call pos:start="55:24" pos:end="55:57"><name pos:start="55:24" pos:end="55:32">get_value</name><argument_list pos:start="55:33" pos:end="55:57">(<argument pos:start="55:34" pos:end="55:38"><expr pos:start="55:34" pos:end="55:38"><name pos:start="55:34" pos:end="55:38"><name pos:start="55:34" pos:end="55:34">s</name><operator pos:start="55:35" pos:end="55:36">-&gt;</operator><name pos:start="55:37" pos:end="55:38">pb</name></name></expr></argument>, <argument pos:start="55:41" pos:end="55:44"><expr pos:start="55:41" pos:end="55:44"><name pos:start="55:41" pos:end="55:44">type</name></expr></argument>, <argument pos:start="55:47" pos:end="55:56"><expr pos:start="55:47" pos:end="55:56"><name pos:start="55:47" pos:end="55:56">type2_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:45"><expr pos:start="57:9" pos:end="57:44"><call pos:start="57:9" pos:end="57:44"><name pos:start="57:9" pos:end="57:16">snprintf</name><argument_list pos:start="57:17" pos:end="57:44">(<argument pos:start="57:18" pos:end="57:22"><expr pos:start="57:18" pos:end="57:22"><name pos:start="57:18" pos:end="57:22">value</name></expr></argument>, <argument pos:start="57:25" pos:end="57:27"><expr pos:start="57:25" pos:end="57:27"><name pos:start="57:25" pos:end="57:27">len</name></expr></argument>, <argument pos:start="57:30" pos:end="57:38"><expr pos:start="57:30" pos:end="57:38"><literal type="string" pos:start="57:30" pos:end="57:32">"%"</literal><name pos:start="57:33" pos:end="57:38">PRIu64</name></expr></argument>, <argument pos:start="57:41" pos:end="57:43"><expr pos:start="57:41" pos:end="57:43"><name pos:start="57:41" pos:end="57:43">num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="59:7" pos:end="65:5">else if <condition pos:start="59:15" pos:end="59:25">(<expr pos:start="59:16" pos:end="59:24"><name pos:start="59:16" pos:end="59:19">type</name> <operator pos:start="59:21" pos:end="59:22">==</operator> <literal type="number" pos:start="59:24" pos:end="59:24">6</literal></expr>)</condition> <block pos:start="59:27" pos:end="65:5">{<block_content pos:start="61:9" pos:end="63:20"> <comment type="line" pos:start="59:29" pos:end="59:50">// (don't) handle GUID</comment>

        <expr_stmt pos:start="61:9" pos:end="61:76"><expr pos:start="61:9" pos:end="61:75"><call pos:start="61:9" pos:end="61:75"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="61:75">(<argument pos:start="61:16" pos:end="61:16"><expr pos:start="61:16" pos:end="61:16"><name pos:start="61:16" pos:end="61:16">s</name></expr></argument>, <argument pos:start="61:19" pos:end="61:30"><expr pos:start="61:19" pos:end="61:30"><name pos:start="61:19" pos:end="61:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="61:33" pos:end="61:69"><expr pos:start="61:33" pos:end="61:69"><literal type="string" pos:start="61:33" pos:end="61:69">"Unsupported GUID value in tag %s.\n"</literal></expr></argument>, <argument pos:start="61:72" pos:end="61:74"><expr pos:start="61:72" pos:end="61:74"><name pos:start="61:72" pos:end="61:74">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:20">goto <name pos:start="63:14" pos:end="63:19">finish</name>;</goto>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="73:5">else <block pos:start="65:12" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:20">

        <expr_stmt pos:start="67:9" pos:end="69:68"><expr pos:start="67:9" pos:end="69:67"><call pos:start="67:9" pos:end="69:67"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="69:67">(<argument pos:start="67:16" pos:end="67:16"><expr pos:start="67:16" pos:end="67:16"><name pos:start="67:16" pos:end="67:16">s</name></expr></argument>, <argument pos:start="67:19" pos:end="67:30"><expr pos:start="67:19" pos:end="67:30"><name pos:start="67:19" pos:end="67:30">AV_LOG_DEBUG</name></expr></argument>,

               <argument pos:start="69:16" pos:end="69:55"><expr pos:start="69:16" pos:end="69:55"><literal type="string" pos:start="69:16" pos:end="69:55">"Unsupported value type %d in tag %s.\n"</literal></expr></argument>, <argument pos:start="69:58" pos:end="69:61"><expr pos:start="69:58" pos:end="69:61"><name pos:start="69:58" pos:end="69:61">type</name></expr></argument>, <argument pos:start="69:64" pos:end="69:66"><expr pos:start="69:64" pos:end="69:66"><name pos:start="69:64" pos:end="69:66">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:20">goto <name pos:start="71:14" pos:end="71:19">finish</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="75:5" pos:end="77:49"><if pos:start="75:5" pos:end="77:49">if <condition pos:start="75:8" pos:end="75:15">(<expr pos:start="75:9" pos:end="75:14"><operator pos:start="75:9" pos:end="75:9">*</operator><name pos:start="75:10" pos:end="75:14">value</name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:49"><block_content pos:start="77:9" pos:end="77:49">

        <expr_stmt pos:start="77:9" pos:end="77:49"><expr pos:start="77:9" pos:end="77:48"><call pos:start="77:9" pos:end="77:48"><name pos:start="77:9" pos:end="77:19">av_dict_set</name><argument_list pos:start="77:20" pos:end="77:48">(<argument pos:start="77:21" pos:end="77:32"><expr pos:start="77:21" pos:end="77:32"><operator pos:start="77:21" pos:end="77:21">&amp;</operator><name pos:start="77:22" pos:end="77:32"><name pos:start="77:22" pos:end="77:22">s</name><operator pos:start="77:23" pos:end="77:24">-&gt;</operator><name pos:start="77:25" pos:end="77:32">metadata</name></name></expr></argument>, <argument pos:start="77:35" pos:end="77:37"><expr pos:start="77:35" pos:end="77:37"><name pos:start="77:35" pos:end="77:37">key</name></expr></argument>, <argument pos:start="77:40" pos:end="77:44"><expr pos:start="77:40" pos:end="77:44"><name pos:start="77:40" pos:end="77:44">value</name></expr></argument>, <argument pos:start="77:47" pos:end="77:47"><expr pos:start="77:47" pos:end="77:47"><literal type="number" pos:start="77:47" pos:end="77:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="81:1" pos:end="81:7"><name pos:start="81:1" pos:end="81:6">finish</name>:</label>

    <expr_stmt pos:start="83:5" pos:end="83:21"><expr pos:start="83:5" pos:end="83:20"><call pos:start="83:5" pos:end="83:20"><name pos:start="83:5" pos:end="83:12">av_freep</name><argument_list pos:start="83:13" pos:end="83:20">(<argument pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:19"><operator pos:start="83:14" pos:end="83:14">&amp;</operator><name pos:start="83:15" pos:end="83:19">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:42"><expr pos:start="85:5" pos:end="85:41"><call pos:start="85:5" pos:end="85:41"><name pos:start="85:5" pos:end="85:13">avio_seek</name><argument_list pos:start="85:14" pos:end="85:41">(<argument pos:start="85:15" pos:end="85:19"><expr pos:start="85:15" pos:end="85:19"><name pos:start="85:15" pos:end="85:19"><name pos:start="85:15" pos:end="85:15">s</name><operator pos:start="85:16" pos:end="85:17">-&gt;</operator><name pos:start="85:18" pos:end="85:19">pb</name></name></expr></argument>, <argument pos:start="85:22" pos:end="85:30"><expr pos:start="85:22" pos:end="85:30"><name pos:start="85:22" pos:end="85:24">off</name> <operator pos:start="85:26" pos:end="85:26">+</operator> <name pos:start="85:28" pos:end="85:30">len</name></expr></argument>, <argument pos:start="85:33" pos:end="85:40"><expr pos:start="85:33" pos:end="85:40"><name pos:start="85:33" pos:end="85:40">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
