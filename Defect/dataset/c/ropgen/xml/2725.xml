<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2725.c" pos:tabs="8"><function pos:start="1:1" pos:end="667:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">qcow2_open</name><parameter_list pos:start="1:22" pos:end="3:35">(<parameter pos:start="1:23" pos:end="1:42"><decl pos:start="1:23" pos:end="1:42"><type pos:start="1:23" pos:end="1:42"><name pos:start="1:23" pos:end="1:38">BlockDriverState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">bs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:58"><decl pos:start="1:45" pos:end="1:58"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:49">QDict</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">options</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:69"><decl pos:start="1:61" pos:end="1:69"><type pos:start="1:61" pos:end="1:69"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:69">flags</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:34"><decl pos:start="3:23" pos:end="3:34"><type pos:start="3:23" pos:end="3:34"><name pos:start="3:23" pos:end="3:27">Error</name> <modifier pos:start="3:29" pos:end="3:29">*</modifier><modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="667:1">{<block_content pos:start="7:5" pos:end="665:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">len</name></decl>, <decl pos:start="9:14" pos:end="9:14"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:14">i</name></decl>, <decl pos:start="9:17" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:17" pos:end="9:19">ret</name> <init pos:start="9:21" pos:end="9:23">= <expr pos:start="9:23" pos:end="9:23"><literal type="number" pos:start="9:23" pos:end="9:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:14">QCowHeader</name></type> <name pos:start="11:16" pos:end="11:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QemuOpts</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:20">ext_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:31"><decl pos:start="19:5" pos:end="19:30"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:30">l1_vm_state_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:33">opt_overlap_check</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:34"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:30">overlap_check_template</name> <init pos:start="23:32" pos:end="23:34">= <expr pos:start="23:34" pos:end="23:34"><literal type="number" pos:start="23:34" pos:end="23:34">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:59"><expr pos:start="27:5" pos:end="27:58"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:58"><name pos:start="27:11" pos:end="27:20">bdrv_pread</name><argument_list pos:start="27:21" pos:end="27:58">(<argument pos:start="27:22" pos:end="27:29"><expr pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:29"><name pos:start="27:22" pos:end="27:23">bs</name><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:29">file</name></name></expr></argument>, <argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">0</literal></expr></argument>, <argument pos:start="27:35" pos:end="27:41"><expr pos:start="27:35" pos:end="27:41"><operator pos:start="27:35" pos:end="27:35">&amp;</operator><name pos:start="27:36" pos:end="27:41">header</name></expr></argument>, <argument pos:start="27:44" pos:end="27:57"><expr pos:start="27:44" pos:end="27:57"><sizeof pos:start="27:44" pos:end="27:57">sizeof<argument_list pos:start="27:50" pos:end="27:57">(<argument pos:start="27:51" pos:end="27:56"><expr pos:start="27:51" pos:end="27:56"><name pos:start="27:51" pos:end="27:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:68"><expr pos:start="31:9" pos:end="31:67"><call pos:start="31:9" pos:end="31:67"><name pos:start="31:9" pos:end="31:24">error_setg_errno</name><argument_list pos:start="31:25" pos:end="31:67">(<argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:29">errp</name></expr></argument>, <argument pos:start="31:32" pos:end="31:35"><expr pos:start="31:32" pos:end="31:35"><operator pos:start="31:32" pos:end="31:32">-</operator><name pos:start="31:33" pos:end="31:35">ret</name></expr></argument>, <argument pos:start="31:38" pos:end="31:66"><expr pos:start="31:38" pos:end="31:66"><literal type="string" pos:start="31:38" pos:end="31:66">"Could not read qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:32"><expr pos:start="37:5" pos:end="37:31"><call pos:start="37:5" pos:end="37:31"><name pos:start="37:5" pos:end="37:16">be32_to_cpus</name><argument_list pos:start="37:17" pos:end="37:31">(<argument pos:start="37:18" pos:end="37:30"><expr pos:start="37:18" pos:end="37:30"><operator pos:start="37:18" pos:end="37:18">&amp;</operator><name pos:start="37:19" pos:end="37:30"><name pos:start="37:19" pos:end="37:24">header</name><operator pos:start="37:25" pos:end="37:25">.</operator><name pos:start="37:26" pos:end="37:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><call pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:33">(<argument pos:start="39:18" pos:end="39:32"><expr pos:start="39:18" pos:end="39:32"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:32"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:46"><expr pos:start="41:5" pos:end="41:45"><call pos:start="41:5" pos:end="41:45"><name pos:start="41:5" pos:end="41:16">be64_to_cpus</name><argument_list pos:start="41:17" pos:end="41:45">(<argument pos:start="41:18" pos:end="41:44"><expr pos:start="41:18" pos:end="41:44"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:44"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><call pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:16">be32_to_cpus</name><argument_list pos:start="43:17" pos:end="43:43">(<argument pos:start="43:18" pos:end="43:42"><expr pos:start="43:18" pos:end="43:42"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:42"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:31"><expr pos:start="45:5" pos:end="45:30"><call pos:start="45:5" pos:end="45:30"><name pos:start="45:5" pos:end="45:16">be64_to_cpus</name><argument_list pos:start="45:17" pos:end="45:30">(<argument pos:start="45:18" pos:end="45:29"><expr pos:start="45:18" pos:end="45:29"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:29"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:39"><expr pos:start="47:5" pos:end="47:38"><call pos:start="47:5" pos:end="47:38"><name pos:start="47:5" pos:end="47:16">be32_to_cpus</name><argument_list pos:start="47:17" pos:end="47:38">(<argument pos:start="47:18" pos:end="47:37"><expr pos:start="47:18" pos:end="47:37"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:37"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:37">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:39"><expr pos:start="49:5" pos:end="49:38"><call pos:start="49:5" pos:end="49:38"><name pos:start="49:5" pos:end="49:16">be32_to_cpus</name><argument_list pos:start="49:17" pos:end="49:38">(<argument pos:start="49:18" pos:end="49:37"><expr pos:start="49:18" pos:end="49:37"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:37"><name pos:start="49:19" pos:end="49:24">header</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:42"><expr pos:start="51:5" pos:end="51:41"><call pos:start="51:5" pos:end="51:41"><name pos:start="51:5" pos:end="51:16">be64_to_cpus</name><argument_list pos:start="51:17" pos:end="51:41">(<argument pos:start="51:18" pos:end="51:40"><expr pos:start="51:18" pos:end="51:40"><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:40"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:34"><expr pos:start="53:5" pos:end="53:33"><call pos:start="53:5" pos:end="53:33"><name pos:start="53:5" pos:end="53:16">be32_to_cpus</name><argument_list pos:start="53:17" pos:end="53:33">(<argument pos:start="53:18" pos:end="53:32"><expr pos:start="53:18" pos:end="53:32"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:32"><name pos:start="53:19" pos:end="53:24">header</name><operator pos:start="53:25" pos:end="53:25">.</operator><name pos:start="53:26" pos:end="53:32">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:48"><expr pos:start="55:5" pos:end="55:47"><call pos:start="55:5" pos:end="55:47"><name pos:start="55:5" pos:end="55:16">be64_to_cpus</name><argument_list pos:start="55:17" pos:end="55:47">(<argument pos:start="55:18" pos:end="55:46"><expr pos:start="55:18" pos:end="55:46"><operator pos:start="55:18" pos:end="55:18">&amp;</operator><name pos:start="55:19" pos:end="55:46"><name pos:start="55:19" pos:end="55:24">header</name><operator pos:start="55:25" pos:end="55:25">.</operator><name pos:start="55:26" pos:end="55:46">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:50"><expr pos:start="57:5" pos:end="57:49"><call pos:start="57:5" pos:end="57:49"><name pos:start="57:5" pos:end="57:16">be32_to_cpus</name><argument_list pos:start="57:17" pos:end="57:49">(<argument pos:start="57:18" pos:end="57:48"><expr pos:start="57:18" pos:end="57:48"><operator pos:start="57:18" pos:end="57:18">&amp;</operator><name pos:start="57:19" pos:end="57:48"><name pos:start="57:19" pos:end="57:24">header</name><operator pos:start="57:25" pos:end="57:25">.</operator><name pos:start="57:26" pos:end="57:48">refcount_table_clusters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><call pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:16">be64_to_cpus</name><argument_list pos:start="59:17" pos:end="59:42">(<argument pos:start="59:18" pos:end="59:41"><expr pos:start="59:18" pos:end="59:41"><operator pos:start="59:18" pos:end="59:18">&amp;</operator><name pos:start="59:19" pos:end="59:41"><name pos:start="59:19" pos:end="59:24">header</name><operator pos:start="59:25" pos:end="59:25">.</operator><name pos:start="59:26" pos:end="59:41">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:39"><expr pos:start="61:5" pos:end="61:38"><call pos:start="61:5" pos:end="61:38"><name pos:start="61:5" pos:end="61:16">be32_to_cpus</name><argument_list pos:start="61:17" pos:end="61:38">(<argument pos:start="61:18" pos:end="61:37"><expr pos:start="61:18" pos:end="61:37"><operator pos:start="61:18" pos:end="61:18">&amp;</operator><name pos:start="61:19" pos:end="61:37"><name pos:start="61:19" pos:end="61:24">header</name><operator pos:start="61:25" pos:end="61:25">.</operator><name pos:start="61:26" pos:end="61:37">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:35">(<expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:20"><name pos:start="65:9" pos:end="65:14">header</name><operator pos:start="65:15" pos:end="65:15">.</operator><name pos:start="65:16" pos:end="65:20">magic</name></name> <operator pos:start="65:22" pos:end="65:23">!=</operator> <name pos:start="65:25" pos:end="65:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="65:37" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:18">

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><call pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:18">error_setg</name><argument_list pos:start="67:19" pos:end="67:56">(<argument pos:start="67:20" pos:end="67:23"><expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">errp</name></expr></argument>, <argument pos:start="67:26" pos:end="67:55"><expr pos:start="67:26" pos:end="67:55"><literal type="string" pos:start="67:26" pos:end="67:55">"Image is not in qcow2 format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:27"><expr pos:start="69:9" pos:end="69:26"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">-</operator><name pos:start="69:16" pos:end="69:26">EMEDIUMTYPE</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="75:5" pos:end="83:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:49">(<expr pos:start="75:9" pos:end="75:48"><name pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:14">header</name><operator pos:start="75:15" pos:end="75:15">.</operator><name pos:start="75:16" pos:end="75:22">version</name></name> <operator pos:start="75:24" pos:end="75:24">&lt;</operator> <literal type="number" pos:start="75:26" pos:end="75:26">2</literal> <operator pos:start="75:28" pos:end="75:29">||</operator> <name pos:start="75:31" pos:end="75:44"><name pos:start="75:31" pos:end="75:36">header</name><operator pos:start="75:37" pos:end="75:37">.</operator><name pos:start="75:38" pos:end="75:44">version</name></name> <operator pos:start="75:46" pos:end="75:46">&gt;</operator> <literal type="number" pos:start="75:48" pos:end="75:48">3</literal></expr>)</condition> <block pos:start="75:51" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:18">

        <expr_stmt pos:start="77:9" pos:end="77:72"><expr pos:start="77:9" pos:end="77:71"><call pos:start="77:9" pos:end="77:71"><name pos:start="77:9" pos:end="77:26">report_unsupported</name><argument_list pos:start="77:27" pos:end="77:71">(<argument pos:start="77:28" pos:end="77:29"><expr pos:start="77:28" pos:end="77:29"><name pos:start="77:28" pos:end="77:29">bs</name></expr></argument>, <argument pos:start="77:32" pos:end="77:35"><expr pos:start="77:32" pos:end="77:35"><name pos:start="77:32" pos:end="77:35">errp</name></expr></argument>, <argument pos:start="77:38" pos:end="77:54"><expr pos:start="77:38" pos:end="77:54"><literal type="string" pos:start="77:38" pos:end="77:54">"QCOW version %d"</literal></expr></argument>, <argument pos:start="77:57" pos:end="77:70"><expr pos:start="77:57" pos:end="77:70"><name pos:start="77:57" pos:end="77:70"><name pos:start="77:57" pos:end="77:62">header</name><operator pos:start="77:63" pos:end="77:63">.</operator><name pos:start="77:64" pos:end="77:70">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:23"><expr pos:start="79:9" pos:end="79:22"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <operator pos:start="79:15" pos:end="79:15">-</operator><name pos:start="79:16" pos:end="79:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:37"><expr pos:start="87:5" pos:end="87:36"><name pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:5">s</name><operator pos:start="87:6" pos:end="87:7">-&gt;</operator><name pos:start="87:8" pos:end="87:19">qcow_version</name></name> <operator pos:start="87:21" pos:end="87:21">=</operator> <name pos:start="87:23" pos:end="87:36"><name pos:start="87:23" pos:end="87:28">header</name><operator pos:start="87:29" pos:end="87:29">.</operator><name pos:start="87:30" pos:end="87:36">version</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:44">/* Initialise version 3 header fields */</comment>

    <if_stmt pos:start="93:5" pos:end="117:5"><if pos:start="93:5" pos:end="105:5">if <condition pos:start="93:8" pos:end="93:28">(<expr pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:22"><name pos:start="93:9" pos:end="93:14">header</name><operator pos:start="93:15" pos:end="93:15">.</operator><name pos:start="93:16" pos:end="93:22">version</name></name> <operator pos:start="93:24" pos:end="93:25">==</operator> <literal type="number" pos:start="93:27" pos:end="93:27">2</literal></expr>)</condition> <block pos:start="93:30" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:45">

        <expr_stmt pos:start="95:9" pos:end="95:44"><expr pos:start="95:9" pos:end="95:43"><name pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:14">header</name><operator pos:start="95:15" pos:end="95:15">.</operator><name pos:start="95:16" pos:end="95:36">incompatible_features</name></name>    <operator pos:start="95:41" pos:end="95:41">=</operator> <literal type="number" pos:start="95:43" pos:end="95:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:44"><expr pos:start="97:9" pos:end="97:43"><name pos:start="97:9" pos:end="97:34"><name pos:start="97:9" pos:end="97:14">header</name><operator pos:start="97:15" pos:end="97:15">.</operator><name pos:start="97:16" pos:end="97:34">compatible_features</name></name>      <operator pos:start="97:41" pos:end="97:41">=</operator> <literal type="number" pos:start="97:43" pos:end="97:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:44"><expr pos:start="99:9" pos:end="99:43"><name pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:14">header</name><operator pos:start="99:15" pos:end="99:15">.</operator><name pos:start="99:16" pos:end="99:33">autoclear_features</name></name>       <operator pos:start="99:41" pos:end="99:41">=</operator> <literal type="number" pos:start="99:43" pos:end="99:43">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:29"><name pos:start="101:9" pos:end="101:14">header</name><operator pos:start="101:15" pos:end="101:15">.</operator><name pos:start="101:16" pos:end="101:29">refcount_order</name></name>           <operator pos:start="101:41" pos:end="101:41">=</operator> <literal type="number" pos:start="101:43" pos:end="101:43">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:45"><expr pos:start="103:9" pos:end="103:44"><name pos:start="103:9" pos:end="103:28"><name pos:start="103:9" pos:end="103:14">header</name><operator pos:start="103:15" pos:end="103:15">.</operator><name pos:start="103:16" pos:end="103:28">header_length</name></name>            <operator pos:start="103:41" pos:end="103:41">=</operator> <literal type="number" pos:start="103:43" pos:end="103:44">72</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="105:7" pos:end="117:5">else <block pos:start="105:12" pos:end="117:5">{<block_content pos:start="107:9" pos:end="115:44">

        <expr_stmt pos:start="107:9" pos:end="107:52"><expr pos:start="107:9" pos:end="107:51"><call pos:start="107:9" pos:end="107:51"><name pos:start="107:9" pos:end="107:20">be64_to_cpus</name><argument_list pos:start="107:21" pos:end="107:51">(<argument pos:start="107:22" pos:end="107:50"><expr pos:start="107:22" pos:end="107:50"><operator pos:start="107:22" pos:end="107:22">&amp;</operator><name pos:start="107:23" pos:end="107:50"><name pos:start="107:23" pos:end="107:28">header</name><operator pos:start="107:29" pos:end="107:29">.</operator><name pos:start="107:30" pos:end="107:50">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:50"><expr pos:start="109:9" pos:end="109:49"><call pos:start="109:9" pos:end="109:49"><name pos:start="109:9" pos:end="109:20">be64_to_cpus</name><argument_list pos:start="109:21" pos:end="109:49">(<argument pos:start="109:22" pos:end="109:48"><expr pos:start="109:22" pos:end="109:48"><operator pos:start="109:22" pos:end="109:22">&amp;</operator><name pos:start="109:23" pos:end="109:48"><name pos:start="109:23" pos:end="109:28">header</name><operator pos:start="109:29" pos:end="109:29">.</operator><name pos:start="109:30" pos:end="109:48">compatible_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:49"><expr pos:start="111:9" pos:end="111:48"><call pos:start="111:9" pos:end="111:48"><name pos:start="111:9" pos:end="111:20">be64_to_cpus</name><argument_list pos:start="111:21" pos:end="111:48">(<argument pos:start="111:22" pos:end="111:47"><expr pos:start="111:22" pos:end="111:47"><operator pos:start="111:22" pos:end="111:22">&amp;</operator><name pos:start="111:23" pos:end="111:47"><name pos:start="111:23" pos:end="111:28">header</name><operator pos:start="111:29" pos:end="111:29">.</operator><name pos:start="111:30" pos:end="111:47">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:45"><expr pos:start="113:9" pos:end="113:44"><call pos:start="113:9" pos:end="113:44"><name pos:start="113:9" pos:end="113:20">be32_to_cpus</name><argument_list pos:start="113:21" pos:end="113:44">(<argument pos:start="113:22" pos:end="113:43"><expr pos:start="113:22" pos:end="113:43"><operator pos:start="113:22" pos:end="113:22">&amp;</operator><name pos:start="113:23" pos:end="113:43"><name pos:start="113:23" pos:end="113:28">header</name><operator pos:start="113:29" pos:end="113:29">.</operator><name pos:start="113:30" pos:end="113:43">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:44"><expr pos:start="115:9" pos:end="115:43"><call pos:start="115:9" pos:end="115:43"><name pos:start="115:9" pos:end="115:20">be32_to_cpus</name><argument_list pos:start="115:21" pos:end="115:43">(<argument pos:start="115:22" pos:end="115:42"><expr pos:start="115:22" pos:end="115:42"><operator pos:start="115:22" pos:end="115:22">&amp;</operator><name pos:start="115:23" pos:end="115:42"><name pos:start="115:23" pos:end="115:28">header</name><operator pos:start="115:29" pos:end="115:29">.</operator><name pos:start="115:30" pos:end="115:42">header_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="121:5" pos:end="141:5"><if pos:start="121:5" pos:end="141:5">if <condition pos:start="121:8" pos:end="121:46">(<expr pos:start="121:9" pos:end="121:45"><name pos:start="121:9" pos:end="121:28"><name pos:start="121:9" pos:end="121:14">header</name><operator pos:start="121:15" pos:end="121:15">.</operator><name pos:start="121:16" pos:end="121:28">header_length</name></name> <operator pos:start="121:30" pos:end="121:30">&gt;</operator> <sizeof pos:start="121:32" pos:end="121:45">sizeof<argument_list pos:start="121:38" pos:end="121:45">(<argument pos:start="121:39" pos:end="121:44"><expr pos:start="121:39" pos:end="121:44"><name pos:start="121:39" pos:end="121:44">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="121:48" pos:end="141:5">{<block_content pos:start="123:9" pos:end="139:9">

        <expr_stmt pos:start="123:9" pos:end="123:78"><expr pos:start="123:9" pos:end="123:77"><name pos:start="123:9" pos:end="123:37"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:37">unknown_header_fields_size</name></name> <operator pos:start="123:39" pos:end="123:39">=</operator> <name pos:start="123:41" pos:end="123:60"><name pos:start="123:41" pos:end="123:46">header</name><operator pos:start="123:47" pos:end="123:47">.</operator><name pos:start="123:48" pos:end="123:60">header_length</name></name> <operator pos:start="123:62" pos:end="123:62">-</operator> <sizeof pos:start="123:64" pos:end="123:77">sizeof<argument_list pos:start="123:70" pos:end="123:77">(<argument pos:start="123:71" pos:end="123:76"><expr pos:start="123:71" pos:end="123:76"><name pos:start="123:71" pos:end="123:76">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:75"><expr pos:start="125:9" pos:end="125:74"><name pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:9">s</name><operator pos:start="125:10" pos:end="125:11">-&gt;</operator><name pos:start="125:12" pos:end="125:32">unknown_header_fields</name></name> <operator pos:start="125:34" pos:end="125:34">=</operator> <call pos:start="125:36" pos:end="125:74"><name pos:start="125:36" pos:end="125:43">g_malloc</name><argument_list pos:start="125:44" pos:end="125:74">(<argument pos:start="125:45" pos:end="125:73"><expr pos:start="125:45" pos:end="125:73"><name pos:start="125:45" pos:end="125:73"><name pos:start="125:45" pos:end="125:45">s</name><operator pos:start="125:46" pos:end="125:47">-&gt;</operator><name pos:start="125:48" pos:end="125:73">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="129:56"><expr pos:start="127:9" pos:end="129:55"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="129:55"><name pos:start="127:15" pos:end="127:24">bdrv_pread</name><argument_list pos:start="127:25" pos:end="129:55">(<argument pos:start="127:26" pos:end="127:33"><expr pos:start="127:26" pos:end="127:33"><name pos:start="127:26" pos:end="127:33"><name pos:start="127:26" pos:end="127:27">bs</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:33">file</name></name></expr></argument>, <argument pos:start="127:36" pos:end="127:49"><expr pos:start="127:36" pos:end="127:49"><sizeof pos:start="127:36" pos:end="127:49">sizeof<argument_list pos:start="127:42" pos:end="127:49">(<argument pos:start="127:43" pos:end="127:48"><expr pos:start="127:43" pos:end="127:48"><name pos:start="127:43" pos:end="127:48">header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="127:52" pos:end="127:75"><expr pos:start="127:52" pos:end="127:75"><name pos:start="127:52" pos:end="127:75"><name pos:start="127:52" pos:end="127:52">s</name><operator pos:start="127:53" pos:end="127:54">-&gt;</operator><name pos:start="127:55" pos:end="127:75">unknown_header_fields</name></name></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:54"><expr pos:start="129:26" pos:end="129:54"><name pos:start="129:26" pos:end="129:54"><name pos:start="129:26" pos:end="129:26">s</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:54">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="139:9"><if pos:start="131:9" pos:end="139:9">if <condition pos:start="131:12" pos:end="131:20">(<expr pos:start="131:13" pos:end="131:19"><name pos:start="131:13" pos:end="131:15">ret</name> <operator pos:start="131:17" pos:end="131:17">&lt;</operator> <literal type="number" pos:start="131:19" pos:end="131:19">0</literal></expr>)</condition> <block pos:start="131:22" pos:end="139:9">{<block_content pos:start="133:13" pos:end="137:22">

            <expr_stmt pos:start="133:13" pos:end="135:39"><expr pos:start="133:13" pos:end="135:38"><call pos:start="133:13" pos:end="135:38"><name pos:start="133:13" pos:end="133:28">error_setg_errno</name><argument_list pos:start="133:29" pos:end="135:38">(<argument pos:start="133:30" pos:end="133:33"><expr pos:start="133:30" pos:end="133:33"><name pos:start="133:30" pos:end="133:33">errp</name></expr></argument>, <argument pos:start="133:36" pos:end="133:39"><expr pos:start="133:36" pos:end="133:39"><operator pos:start="133:36" pos:end="133:36">-</operator><name pos:start="133:37" pos:end="133:39">ret</name></expr></argument>, <argument pos:start="133:42" pos:end="135:37"><expr pos:start="133:42" pos:end="135:37"><literal type="string" pos:start="133:42" pos:end="133:79">"Could not read unknown qcow2 header "</literal>

                             <literal type="string" pos:start="135:30" pos:end="135:37">"fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="137:13" pos:end="137:22">goto <name pos:start="137:18" pos:end="137:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="145:5" pos:end="153:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:35">(<expr pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:34"><name pos:start="145:9" pos:end="145:14">header</name><operator pos:start="145:15" pos:end="145:15">.</operator><name pos:start="145:16" pos:end="145:34">backing_file_offset</name></name></expr>)</condition> <block pos:start="145:37" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:45">

        <expr_stmt pos:start="147:9" pos:end="147:45"><expr pos:start="147:9" pos:end="147:44"><name pos:start="147:9" pos:end="147:15">ext_end</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <name pos:start="147:19" pos:end="147:44"><name pos:start="147:19" pos:end="147:24">header</name><operator pos:start="147:25" pos:end="147:25">.</operator><name pos:start="147:26" pos:end="147:44">backing_file_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="149:7" pos:end="153:5">else <block pos:start="149:12" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:43">

        <expr_stmt pos:start="151:9" pos:end="151:43"><expr pos:start="151:9" pos:end="151:42"><name pos:start="151:9" pos:end="151:15">ext_end</name> <operator pos:start="151:17" pos:end="151:17">=</operator> <literal type="number" pos:start="151:19" pos:end="151:19">1</literal> <operator pos:start="151:21" pos:end="151:22">&lt;&lt;</operator> <name pos:start="151:24" pos:end="151:42"><name pos:start="151:24" pos:end="151:29">header</name><operator pos:start="151:30" pos:end="151:30">.</operator><name pos:start="151:31" pos:end="151:42">cluster_bits</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:29">/* Handle feature bits */</comment>

    <expr_stmt pos:start="159:5" pos:end="159:63"><expr pos:start="159:5" pos:end="159:62"><name pos:start="159:5" pos:end="159:28"><name pos:start="159:5" pos:end="159:5">s</name><operator pos:start="159:6" pos:end="159:7">-&gt;</operator><name pos:start="159:8" pos:end="159:28">incompatible_features</name></name>    <operator pos:start="159:33" pos:end="159:33">=</operator> <name pos:start="159:35" pos:end="159:62"><name pos:start="159:35" pos:end="159:40">header</name><operator pos:start="159:41" pos:end="159:41">.</operator><name pos:start="159:42" pos:end="159:62">incompatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="161:5" pos:end="161:61"><expr pos:start="161:5" pos:end="161:60"><name pos:start="161:5" pos:end="161:26"><name pos:start="161:5" pos:end="161:5">s</name><operator pos:start="161:6" pos:end="161:7">-&gt;</operator><name pos:start="161:8" pos:end="161:26">compatible_features</name></name>      <operator pos:start="161:33" pos:end="161:33">=</operator> <name pos:start="161:35" pos:end="161:60"><name pos:start="161:35" pos:end="161:40">header</name><operator pos:start="161:41" pos:end="161:41">.</operator><name pos:start="161:42" pos:end="161:60">compatible_features</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:60"><expr pos:start="163:5" pos:end="163:59"><name pos:start="163:5" pos:end="163:25"><name pos:start="163:5" pos:end="163:5">s</name><operator pos:start="163:6" pos:end="163:7">-&gt;</operator><name pos:start="163:8" pos:end="163:25">autoclear_features</name></name>       <operator pos:start="163:33" pos:end="163:33">=</operator> <name pos:start="163:35" pos:end="163:59"><name pos:start="163:35" pos:end="163:40">header</name><operator pos:start="163:41" pos:end="163:41">.</operator><name pos:start="163:42" pos:end="163:59">autoclear_features</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="185:5"><if pos:start="167:5" pos:end="185:5">if <condition pos:start="167:8" pos:end="167:56">(<expr pos:start="167:9" pos:end="167:55"><name pos:start="167:9" pos:end="167:32"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:32">incompatible_features</name></name> <operator pos:start="167:34" pos:end="167:34">&amp;</operator> <operator pos:start="167:36" pos:end="167:36">~</operator><name pos:start="167:37" pos:end="167:55">QCOW2_INCOMPAT_MASK</name></expr>)</condition> <block pos:start="167:58" pos:end="185:5">{<block_content pos:start="169:9" pos:end="183:18">

        <decl_stmt pos:start="169:9" pos:end="169:35"><decl pos:start="169:9" pos:end="169:34"><type pos:start="169:9" pos:end="169:14"><name pos:start="169:9" pos:end="169:12">void</name> <modifier pos:start="169:14" pos:end="169:14">*</modifier></type><name pos:start="169:15" pos:end="169:27">feature_table</name> <init pos:start="169:29" pos:end="169:34">= <expr pos:start="169:31" pos:end="169:34"><name pos:start="169:31" pos:end="169:34">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="171:9" pos:end="173:52"><expr pos:start="171:9" pos:end="173:51"><call pos:start="171:9" pos:end="173:51"><name pos:start="171:9" pos:end="171:29">qcow2_read_extensions</name><argument_list pos:start="171:30" pos:end="173:51">(<argument pos:start="171:31" pos:end="171:32"><expr pos:start="171:31" pos:end="171:32"><name pos:start="171:31" pos:end="171:32">bs</name></expr></argument>, <argument pos:start="171:35" pos:end="171:54"><expr pos:start="171:35" pos:end="171:54"><name pos:start="171:35" pos:end="171:54"><name pos:start="171:35" pos:end="171:40">header</name><operator pos:start="171:41" pos:end="171:41">.</operator><name pos:start="171:42" pos:end="171:54">header_length</name></name></expr></argument>, <argument pos:start="171:57" pos:end="171:63"><expr pos:start="171:57" pos:end="171:63"><name pos:start="171:57" pos:end="171:63">ext_end</name></expr></argument>,

                              <argument pos:start="173:31" pos:end="173:44"><expr pos:start="173:31" pos:end="173:44"><operator pos:start="173:31" pos:end="173:31">&amp;</operator><name pos:start="173:32" pos:end="173:44">feature_table</name></expr></argument>, <argument pos:start="173:47" pos:end="173:50"><expr pos:start="173:47" pos:end="173:50"><name pos:start="173:47" pos:end="173:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="179:57"><expr pos:start="175:9" pos:end="179:56"><call pos:start="175:9" pos:end="179:56"><name pos:start="175:9" pos:end="175:34">report_unsupported_feature</name><argument_list pos:start="175:35" pos:end="179:56">(<argument pos:start="175:36" pos:end="175:37"><expr pos:start="175:36" pos:end="175:37"><name pos:start="175:36" pos:end="175:37">bs</name></expr></argument>, <argument pos:start="175:40" pos:end="175:43"><expr pos:start="175:40" pos:end="175:43"><name pos:start="175:40" pos:end="175:43">errp</name></expr></argument>, <argument pos:start="175:46" pos:end="175:58"><expr pos:start="175:46" pos:end="175:58"><name pos:start="175:46" pos:end="175:58">feature_table</name></expr></argument>,

                                   <argument pos:start="177:36" pos:end="179:55"><expr pos:start="177:36" pos:end="179:55"><name pos:start="177:36" pos:end="177:59"><name pos:start="177:36" pos:end="177:36">s</name><operator pos:start="177:37" pos:end="177:38">-&gt;</operator><name pos:start="177:39" pos:end="177:59">incompatible_features</name></name> <operator pos:start="177:61" pos:end="177:61">&amp;</operator>

                                   <operator pos:start="179:36" pos:end="179:36">~</operator><name pos:start="179:37" pos:end="179:55">QCOW2_INCOMPAT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:23"><expr pos:start="181:9" pos:end="181:22"><name pos:start="181:9" pos:end="181:11">ret</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <operator pos:start="181:15" pos:end="181:15">-</operator><name pos:start="181:16" pos:end="181:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="183:9" pos:end="183:18">goto <name pos:start="183:14" pos:end="183:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="189:5" pos:end="207:5"><if pos:start="189:5" pos:end="207:5">if <condition pos:start="189:8" pos:end="189:58">(<expr pos:start="189:9" pos:end="189:57"><name pos:start="189:9" pos:end="189:32"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:32">incompatible_features</name></name> <operator pos:start="189:34" pos:end="189:34">&amp;</operator> <name pos:start="189:36" pos:end="189:57">QCOW2_INCOMPAT_CORRUPT</name></expr>)</condition> <block pos:start="189:60" pos:end="207:5">{<block_content pos:start="195:9" pos:end="205:9">

        <comment type="block" pos:start="191:9" pos:end="193:11">/* Corrupt images may not be written to unless they are being repaired

         */</comment>

        <if_stmt pos:start="195:9" pos:end="205:9"><if pos:start="195:9" pos:end="205:9">if <condition pos:start="195:12" pos:end="195:61">(<expr pos:start="195:13" pos:end="195:60"><operator pos:start="195:13" pos:end="195:13">(</operator><name pos:start="195:14" pos:end="195:18">flags</name> <operator pos:start="195:20" pos:end="195:20">&amp;</operator> <name pos:start="195:22" pos:end="195:32">BDRV_O_RDWR</name><operator pos:start="195:33" pos:end="195:33">)</operator> <operator pos:start="195:35" pos:end="195:36">&amp;&amp;</operator> <operator pos:start="195:38" pos:end="195:38">!</operator><operator pos:start="195:39" pos:end="195:39">(</operator><name pos:start="195:40" pos:end="195:44">flags</name> <operator pos:start="195:46" pos:end="195:46">&amp;</operator> <name pos:start="195:48" pos:end="195:59">BDRV_O_CHECK</name><operator pos:start="195:60" pos:end="195:60">)</operator></expr>)</condition> <block pos:start="195:63" pos:end="205:9">{<block_content pos:start="197:13" pos:end="203:22">

            <expr_stmt pos:start="197:13" pos:end="199:37"><expr pos:start="197:13" pos:end="199:36"><call pos:start="197:13" pos:end="199:36"><name pos:start="197:13" pos:end="197:22">error_setg</name><argument_list pos:start="197:23" pos:end="199:36">(<argument pos:start="197:24" pos:end="197:27"><expr pos:start="197:24" pos:end="197:27"><name pos:start="197:24" pos:end="197:27">errp</name></expr></argument>, <argument pos:start="197:30" pos:end="199:35"><expr pos:start="197:30" pos:end="199:35"><literal type="string" pos:start="197:30" pos:end="197:73">"qcow2: Image is corrupt; cannot be opened "</literal>

                       <literal type="string" pos:start="199:24" pos:end="199:35">"read/write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:26"><expr pos:start="201:13" pos:end="201:25"><name pos:start="201:13" pos:end="201:15">ret</name> <operator pos:start="201:17" pos:end="201:17">=</operator> <operator pos:start="201:19" pos:end="201:19">-</operator><name pos:start="201:20" pos:end="201:25">EACCES</name></expr>;</expr_stmt>

            <goto pos:start="203:13" pos:end="203:22">goto <name pos:start="203:18" pos:end="203:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="211:5" pos:end="211:49">/* Check support for various header values */</comment>

    <if_stmt pos:start="213:5" pos:end="223:5"><if pos:start="213:5" pos:end="223:5">if <condition pos:start="213:8" pos:end="213:35">(<expr pos:start="213:9" pos:end="213:34"><name pos:start="213:9" pos:end="213:29"><name pos:start="213:9" pos:end="213:14">header</name><operator pos:start="213:15" pos:end="213:15">.</operator><name pos:start="213:16" pos:end="213:29">refcount_order</name></name> <operator pos:start="213:31" pos:end="213:32">!=</operator> <literal type="number" pos:start="213:34" pos:end="213:34">4</literal></expr>)</condition> <block pos:start="213:37" pos:end="223:5">{<block_content pos:start="215:9" pos:end="221:18">

        <expr_stmt pos:start="215:9" pos:end="217:55"><expr pos:start="215:9" pos:end="217:54"><call pos:start="215:9" pos:end="217:54"><name pos:start="215:9" pos:end="215:26">report_unsupported</name><argument_list pos:start="215:27" pos:end="217:54">(<argument pos:start="215:28" pos:end="215:29"><expr pos:start="215:28" pos:end="215:29"><name pos:start="215:28" pos:end="215:29">bs</name></expr></argument>, <argument pos:start="215:32" pos:end="215:35"><expr pos:start="215:32" pos:end="215:35"><name pos:start="215:32" pos:end="215:35">errp</name></expr></argument>, <argument pos:start="215:38" pos:end="215:62"><expr pos:start="215:38" pos:end="215:62"><literal type="string" pos:start="215:38" pos:end="215:62">"%d bit reference counts"</literal></expr></argument>,

                           <argument pos:start="217:28" pos:end="217:53"><expr pos:start="217:28" pos:end="217:53"><literal type="number" pos:start="217:28" pos:end="217:28">1</literal> <operator pos:start="217:30" pos:end="217:31">&lt;&lt;</operator> <name pos:start="217:33" pos:end="217:53"><name pos:start="217:33" pos:end="217:38">header</name><operator pos:start="217:39" pos:end="217:39">.</operator><name pos:start="217:40" pos:end="217:53">refcount_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:23"><expr pos:start="219:9" pos:end="219:22"><name pos:start="219:9" pos:end="219:11">ret</name> <operator pos:start="219:13" pos:end="219:13">=</operator> <operator pos:start="219:15" pos:end="219:15">-</operator><name pos:start="219:16" pos:end="219:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="221:9" pos:end="221:18">goto <name pos:start="221:14" pos:end="221:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:46"><expr pos:start="225:5" pos:end="225:45"><name pos:start="225:5" pos:end="225:21"><name pos:start="225:5" pos:end="225:5">s</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:21">refcount_order</name></name> <operator pos:start="225:23" pos:end="225:23">=</operator> <name pos:start="225:25" pos:end="225:45"><name pos:start="225:25" pos:end="225:30">header</name><operator pos:start="225:31" pos:end="225:31">.</operator><name pos:start="225:32" pos:end="225:45">refcount_order</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="229:5" pos:end="239:5"><if pos:start="229:5" pos:end="239:5">if <condition pos:start="229:8" pos:end="231:47">(<expr pos:start="229:9" pos:end="231:46"><name pos:start="229:9" pos:end="229:27"><name pos:start="229:9" pos:end="229:14">header</name><operator pos:start="229:15" pos:end="229:15">.</operator><name pos:start="229:16" pos:end="229:27">cluster_bits</name></name> <operator pos:start="229:29" pos:end="229:29">&lt;</operator> <name pos:start="229:31" pos:end="229:46">MIN_CLUSTER_BITS</name> <operator pos:start="229:48" pos:end="229:49">||</operator>

        <name pos:start="231:9" pos:end="231:27"><name pos:start="231:9" pos:end="231:14">header</name><operator pos:start="231:15" pos:end="231:15">.</operator><name pos:start="231:16" pos:end="231:27">cluster_bits</name></name> <operator pos:start="231:29" pos:end="231:29">&gt;</operator> <name pos:start="231:31" pos:end="231:46">MAX_CLUSTER_BITS</name></expr>)</condition> <block pos:start="231:49" pos:end="239:5">{<block_content pos:start="233:9" pos:end="237:18">

        <expr_stmt pos:start="233:9" pos:end="233:80"><expr pos:start="233:9" pos:end="233:79"><call pos:start="233:9" pos:end="233:79"><name pos:start="233:9" pos:end="233:18">error_setg</name><argument_list pos:start="233:19" pos:end="233:79">(<argument pos:start="233:20" pos:end="233:23"><expr pos:start="233:20" pos:end="233:23"><name pos:start="233:20" pos:end="233:23">errp</name></expr></argument>, <argument pos:start="233:26" pos:end="233:57"><expr pos:start="233:26" pos:end="233:57"><literal type="string" pos:start="233:26" pos:end="233:57">"Unsupported cluster size: 2^%i"</literal></expr></argument>, <argument pos:start="233:60" pos:end="233:78"><expr pos:start="233:60" pos:end="233:78"><name pos:start="233:60" pos:end="233:78"><name pos:start="233:60" pos:end="233:65">header</name><operator pos:start="233:66" pos:end="233:66">.</operator><name pos:start="233:67" pos:end="233:78">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:22"><expr pos:start="235:9" pos:end="235:21"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <operator pos:start="235:15" pos:end="235:15">-</operator><name pos:start="235:16" pos:end="235:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="237:9" pos:end="237:18">goto <name pos:start="237:14" pos:end="237:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="251:5"><if pos:start="241:5" pos:end="251:5">if <condition pos:start="241:8" pos:end="241:45">(<expr pos:start="241:9" pos:end="241:44"><name pos:start="241:9" pos:end="241:27"><name pos:start="241:9" pos:end="241:14">header</name><operator pos:start="241:15" pos:end="241:15">.</operator><name pos:start="241:16" pos:end="241:27">crypt_method</name></name> <operator pos:start="241:29" pos:end="241:29">&gt;</operator> <name pos:start="241:31" pos:end="241:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="241:47" pos:end="251:5">{<block_content pos:start="243:9" pos:end="249:18">

        <expr_stmt pos:start="243:9" pos:end="245:40"><expr pos:start="243:9" pos:end="245:39"><call pos:start="243:9" pos:end="245:39"><name pos:start="243:9" pos:end="243:18">error_setg</name><argument_list pos:start="243:19" pos:end="245:39">(<argument pos:start="243:20" pos:end="243:23"><expr pos:start="243:20" pos:end="243:23"><name pos:start="243:20" pos:end="243:23">errp</name></expr></argument>, <argument pos:start="243:26" pos:end="243:60"><expr pos:start="243:26" pos:end="243:60"><literal type="string" pos:start="243:26" pos:end="243:60">"Unsupported encryption method: %i"</literal></expr></argument>,

                   <argument pos:start="245:20" pos:end="245:38"><expr pos:start="245:20" pos:end="245:38"><name pos:start="245:20" pos:end="245:38"><name pos:start="245:20" pos:end="245:25">header</name><operator pos:start="245:26" pos:end="245:26">.</operator><name pos:start="245:27" pos:end="245:38">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="247:9" pos:end="247:22"><expr pos:start="247:9" pos:end="247:21"><name pos:start="247:9" pos:end="247:11">ret</name> <operator pos:start="247:13" pos:end="247:13">=</operator> <operator pos:start="247:15" pos:end="247:15">-</operator><name pos:start="247:16" pos:end="247:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="249:9" pos:end="249:18">goto <name pos:start="249:14" pos:end="249:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:49"><expr pos:start="253:5" pos:end="253:48"><name pos:start="253:5" pos:end="253:26"><name pos:start="253:5" pos:end="253:5">s</name><operator pos:start="253:6" pos:end="253:7">-&gt;</operator><name pos:start="253:8" pos:end="253:26">crypt_method_header</name></name> <operator pos:start="253:28" pos:end="253:28">=</operator> <name pos:start="253:30" pos:end="253:48"><name pos:start="253:30" pos:end="253:35">header</name><operator pos:start="253:36" pos:end="253:36">.</operator><name pos:start="253:37" pos:end="253:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="255:5" pos:end="259:5"><if pos:start="255:5" pos:end="259:5">if <condition pos:start="255:8" pos:end="255:31">(<expr pos:start="255:9" pos:end="255:30"><name pos:start="255:9" pos:end="255:30"><name pos:start="255:9" pos:end="255:9">s</name><operator pos:start="255:10" pos:end="255:11">-&gt;</operator><name pos:start="255:12" pos:end="255:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="255:33" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:26">

        <expr_stmt pos:start="257:9" pos:end="257:26"><expr pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:21"><name pos:start="257:9" pos:end="257:10">bs</name><operator pos:start="257:11" pos:end="257:12">-&gt;</operator><name pos:start="257:13" pos:end="257:21">encrypted</name></name> <operator pos:start="257:23" pos:end="257:23">=</operator> <literal type="number" pos:start="257:25" pos:end="257:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:42"><expr pos:start="261:5" pos:end="261:41"><name pos:start="261:5" pos:end="261:19"><name pos:start="261:5" pos:end="261:5">s</name><operator pos:start="261:6" pos:end="261:7">-&gt;</operator><name pos:start="261:8" pos:end="261:19">cluster_bits</name></name> <operator pos:start="261:21" pos:end="261:21">=</operator> <name pos:start="261:23" pos:end="261:41"><name pos:start="261:23" pos:end="261:28">header</name><operator pos:start="261:29" pos:end="261:29">.</operator><name pos:start="261:30" pos:end="261:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:43"><expr pos:start="263:5" pos:end="263:42"><name pos:start="263:5" pos:end="263:19"><name pos:start="263:5" pos:end="263:5">s</name><operator pos:start="263:6" pos:end="263:7">-&gt;</operator><name pos:start="263:8" pos:end="263:19">cluster_size</name></name> <operator pos:start="263:21" pos:end="263:21">=</operator> <literal type="number" pos:start="263:23" pos:end="263:23">1</literal> <operator pos:start="263:25" pos:end="263:26">&lt;&lt;</operator> <name pos:start="263:28" pos:end="263:42"><name pos:start="263:28" pos:end="263:28">s</name><operator pos:start="263:29" pos:end="263:30">-&gt;</operator><name pos:start="263:31" pos:end="263:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="265:5" pos:end="265:52"><expr pos:start="265:5" pos:end="265:51"><name pos:start="265:5" pos:end="265:22"><name pos:start="265:5" pos:end="265:5">s</name><operator pos:start="265:6" pos:end="265:7">-&gt;</operator><name pos:start="265:8" pos:end="265:22">cluster_sectors</name></name> <operator pos:start="265:24" pos:end="265:24">=</operator> <literal type="number" pos:start="265:26" pos:end="265:26">1</literal> <operator pos:start="265:28" pos:end="265:29">&lt;&lt;</operator> <operator pos:start="265:31" pos:end="265:31">(</operator><name pos:start="265:32" pos:end="265:46"><name pos:start="265:32" pos:end="265:32">s</name><operator pos:start="265:33" pos:end="265:34">-&gt;</operator><name pos:start="265:35" pos:end="265:46">cluster_bits</name></name> <operator pos:start="265:48" pos:end="265:48">-</operator> <literal type="number" pos:start="265:50" pos:end="265:50">9</literal><operator pos:start="265:51" pos:end="265:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="267:5" pos:end="267:37"><expr pos:start="267:5" pos:end="267:36"><name pos:start="267:5" pos:end="267:14"><name pos:start="267:5" pos:end="267:5">s</name><operator pos:start="267:6" pos:end="267:7">-&gt;</operator><name pos:start="267:8" pos:end="267:14">l2_bits</name></name> <operator pos:start="267:16" pos:end="267:16">=</operator> <name pos:start="267:18" pos:end="267:32"><name pos:start="267:18" pos:end="267:18">s</name><operator pos:start="267:19" pos:end="267:20">-&gt;</operator><name pos:start="267:21" pos:end="267:32">cluster_bits</name></name> <operator pos:start="267:34" pos:end="267:34">-</operator> <literal type="number" pos:start="267:36" pos:end="267:36">3</literal></expr>;</expr_stmt> <comment type="block" pos:start="267:39" pos:end="267:68">/* L2 is always one cluster */</comment>

    <expr_stmt pos:start="269:5" pos:end="269:33"><expr pos:start="269:5" pos:end="269:32"><name pos:start="269:5" pos:end="269:14"><name pos:start="269:5" pos:end="269:5">s</name><operator pos:start="269:6" pos:end="269:7">-&gt;</operator><name pos:start="269:8" pos:end="269:14">l2_size</name></name> <operator pos:start="269:16" pos:end="269:16">=</operator> <literal type="number" pos:start="269:18" pos:end="269:18">1</literal> <operator pos:start="269:20" pos:end="269:21">&lt;&lt;</operator> <name pos:start="269:23" pos:end="269:32"><name pos:start="269:23" pos:end="269:23">s</name><operator pos:start="269:24" pos:end="269:25">-&gt;</operator><name pos:start="269:26" pos:end="269:32">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="271:5" pos:end="271:42"><expr pos:start="271:5" pos:end="271:41"><name pos:start="271:5" pos:end="271:21"><name pos:start="271:5" pos:end="271:6">bs</name><operator pos:start="271:7" pos:end="271:8">-&gt;</operator><name pos:start="271:9" pos:end="271:21">total_sectors</name></name> <operator pos:start="271:23" pos:end="271:23">=</operator> <name pos:start="271:25" pos:end="271:35"><name pos:start="271:25" pos:end="271:30">header</name><operator pos:start="271:31" pos:end="271:31">.</operator><name pos:start="271:32" pos:end="271:35">size</name></name> <operator pos:start="271:37" pos:end="271:37">/</operator> <literal type="number" pos:start="271:39" pos:end="271:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="273:5" pos:end="273:50"><expr pos:start="273:5" pos:end="273:49"><name pos:start="273:5" pos:end="273:18"><name pos:start="273:5" pos:end="273:5">s</name><operator pos:start="273:6" pos:end="273:7">-&gt;</operator><name pos:start="273:8" pos:end="273:18">csize_shift</name></name> <operator pos:start="273:20" pos:end="273:20">=</operator> <operator pos:start="273:22" pos:end="273:22">(</operator><literal type="number" pos:start="273:23" pos:end="273:26">62</literal> <operator pos:start="273:26" pos:end="273:26">-</operator> <operator pos:start="273:28" pos:end="273:28">(</operator><name pos:start="273:29" pos:end="273:43"><name pos:start="273:29" pos:end="273:29">s</name><operator pos:start="273:30" pos:end="273:31">-&gt;</operator><name pos:start="273:32" pos:end="273:43">cluster_bits</name></name> <operator pos:start="273:45" pos:end="273:45">-</operator> <literal type="number" pos:start="273:47" pos:end="273:47">8</literal><operator pos:start="273:48" pos:end="273:48">)</operator><operator pos:start="273:49" pos:end="273:49">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:53"><expr pos:start="275:5" pos:end="275:52"><name pos:start="275:5" pos:end="275:17"><name pos:start="275:5" pos:end="275:5">s</name><operator pos:start="275:6" pos:end="275:7">-&gt;</operator><name pos:start="275:8" pos:end="275:17">csize_mask</name></name> <operator pos:start="275:19" pos:end="275:19">=</operator> <operator pos:start="275:21" pos:end="275:21">(</operator><literal type="number" pos:start="275:22" pos:end="275:22">1</literal> <operator pos:start="275:24" pos:end="275:25">&lt;&lt;</operator> <operator pos:start="275:27" pos:end="275:27">(</operator><name pos:start="275:28" pos:end="275:42"><name pos:start="275:28" pos:end="275:28">s</name><operator pos:start="275:29" pos:end="275:30">-&gt;</operator><name pos:start="275:31" pos:end="275:42">cluster_bits</name></name> <operator pos:start="275:44" pos:end="275:44">-</operator> <literal type="number" pos:start="275:46" pos:end="275:46">8</literal><operator pos:start="275:47" pos:end="275:47">)</operator><operator pos:start="275:48" pos:end="275:48">)</operator> <operator pos:start="275:50" pos:end="275:50">-</operator> <literal type="number" pos:start="275:52" pos:end="275:52">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:57"><expr pos:start="277:5" pos:end="277:56"><name pos:start="277:5" pos:end="277:26"><name pos:start="277:5" pos:end="277:5">s</name><operator pos:start="277:6" pos:end="277:7">-&gt;</operator><name pos:start="277:8" pos:end="277:26">cluster_offset_mask</name></name> <operator pos:start="277:28" pos:end="277:28">=</operator> <operator pos:start="277:30" pos:end="277:30">(</operator><literal type="number" pos:start="277:31" pos:end="277:33">1LL</literal> <operator pos:start="277:35" pos:end="277:36">&lt;&lt;</operator> <name pos:start="277:38" pos:end="277:51"><name pos:start="277:38" pos:end="277:38">s</name><operator pos:start="277:39" pos:end="277:40">-&gt;</operator><name pos:start="277:41" pos:end="277:51">csize_shift</name></name><operator pos:start="277:52" pos:end="277:52">)</operator> <operator pos:start="277:54" pos:end="277:54">-</operator> <literal type="number" pos:start="277:56" pos:end="277:56">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:60"><expr pos:start="279:5" pos:end="279:59"><name pos:start="279:5" pos:end="279:28"><name pos:start="279:5" pos:end="279:5">s</name><operator pos:start="279:6" pos:end="279:7">-&gt;</operator><name pos:start="279:8" pos:end="279:28">refcount_table_offset</name></name> <operator pos:start="279:30" pos:end="279:30">=</operator> <name pos:start="279:32" pos:end="279:59"><name pos:start="279:32" pos:end="279:37">header</name><operator pos:start="279:38" pos:end="279:38">.</operator><name pos:start="279:39" pos:end="279:59">refcount_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="283:64"><expr pos:start="281:5" pos:end="283:63"><name pos:start="281:5" pos:end="281:26"><name pos:start="281:5" pos:end="281:5">s</name><operator pos:start="281:6" pos:end="281:7">-&gt;</operator><name pos:start="281:8" pos:end="281:26">refcount_table_size</name></name> <operator pos:start="281:28" pos:end="281:28">=</operator>

        <name pos:start="283:9" pos:end="283:38"><name pos:start="283:9" pos:end="283:14">header</name><operator pos:start="283:15" pos:end="283:15">.</operator><name pos:start="283:16" pos:end="283:38">refcount_table_clusters</name></name> <operator pos:start="283:40" pos:end="283:41">&lt;&lt;</operator> <operator pos:start="283:43" pos:end="283:43">(</operator><name pos:start="283:44" pos:end="283:58"><name pos:start="283:44" pos:end="283:44">s</name><operator pos:start="283:45" pos:end="283:46">-&gt;</operator><name pos:start="283:47" pos:end="283:58">cluster_bits</name></name> <operator pos:start="283:60" pos:end="283:60">-</operator> <literal type="number" pos:start="283:62" pos:end="283:62">3</literal><operator pos:start="283:63" pos:end="283:63">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="287:5" pos:end="287:50"><expr pos:start="287:5" pos:end="287:49"><name pos:start="287:5" pos:end="287:23"><name pos:start="287:5" pos:end="287:5">s</name><operator pos:start="287:6" pos:end="287:7">-&gt;</operator><name pos:start="287:8" pos:end="287:23">snapshots_offset</name></name> <operator pos:start="287:25" pos:end="287:25">=</operator> <name pos:start="287:27" pos:end="287:49"><name pos:start="287:27" pos:end="287:32">header</name><operator pos:start="287:33" pos:end="287:33">.</operator><name pos:start="287:34" pos:end="287:49">snapshots_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="289:5" pos:end="289:42"><expr pos:start="289:5" pos:end="289:41"><name pos:start="289:5" pos:end="289:19"><name pos:start="289:5" pos:end="289:5">s</name><operator pos:start="289:6" pos:end="289:7">-&gt;</operator><name pos:start="289:8" pos:end="289:19">nb_snapshots</name></name> <operator pos:start="289:21" pos:end="289:21">=</operator> <name pos:start="289:23" pos:end="289:41"><name pos:start="289:23" pos:end="289:28">header</name><operator pos:start="289:29" pos:end="289:29">.</operator><name pos:start="289:30" pos:end="289:41">nb_snapshots</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="293:5" pos:end="293:32">/* read the level 1 table */</comment>

    <expr_stmt pos:start="295:5" pos:end="295:32"><expr pos:start="295:5" pos:end="295:31"><name pos:start="295:5" pos:end="295:14"><name pos:start="295:5" pos:end="295:5">s</name><operator pos:start="295:6" pos:end="295:7">-&gt;</operator><name pos:start="295:8" pos:end="295:14">l1_size</name></name> <operator pos:start="295:16" pos:end="295:16">=</operator> <name pos:start="295:18" pos:end="295:31"><name pos:start="295:18" pos:end="295:23">header</name><operator pos:start="295:24" pos:end="295:24">.</operator><name pos:start="295:25" pos:end="295:31">l1_size</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="299:5" pos:end="299:51"><expr pos:start="299:5" pos:end="299:50"><name pos:start="299:5" pos:end="299:21">l1_vm_state_index</name> <operator pos:start="299:23" pos:end="299:23">=</operator> <call pos:start="299:25" pos:end="299:50"><name pos:start="299:25" pos:end="299:34">size_to_l1</name><argument_list pos:start="299:35" pos:end="299:50">(<argument pos:start="299:36" pos:end="299:36"><expr pos:start="299:36" pos:end="299:36"><name pos:start="299:36" pos:end="299:36">s</name></expr></argument>, <argument pos:start="299:39" pos:end="299:49"><expr pos:start="299:39" pos:end="299:49"><name pos:start="299:39" pos:end="299:49"><name pos:start="299:39" pos:end="299:44">header</name><operator pos:start="299:45" pos:end="299:45">.</operator><name pos:start="299:46" pos:end="299:49">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="301:5" pos:end="309:5"><if pos:start="301:5" pos:end="309:5">if <condition pos:start="301:8" pos:end="301:36">(<expr pos:start="301:9" pos:end="301:35"><name pos:start="301:9" pos:end="301:25">l1_vm_state_index</name> <operator pos:start="301:27" pos:end="301:27">&gt;</operator> <name pos:start="301:29" pos:end="301:35">INT_MAX</name></expr>)</condition> <block pos:start="301:38" pos:end="309:5">{<block_content pos:start="303:9" pos:end="307:18">

        <expr_stmt pos:start="303:9" pos:end="303:45"><expr pos:start="303:9" pos:end="303:44"><call pos:start="303:9" pos:end="303:44"><name pos:start="303:9" pos:end="303:18">error_setg</name><argument_list pos:start="303:19" pos:end="303:44">(<argument pos:start="303:20" pos:end="303:23"><expr pos:start="303:20" pos:end="303:23"><name pos:start="303:20" pos:end="303:23">errp</name></expr></argument>, <argument pos:start="303:26" pos:end="303:43"><expr pos:start="303:26" pos:end="303:43"><literal type="string" pos:start="303:26" pos:end="303:43">"Image is too big"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:21"><expr pos:start="305:9" pos:end="305:20"><name pos:start="305:9" pos:end="305:11">ret</name> <operator pos:start="305:13" pos:end="305:13">=</operator> <operator pos:start="305:15" pos:end="305:15">-</operator><name pos:start="305:16" pos:end="305:20">EFBIG</name></expr>;</expr_stmt>

        <goto pos:start="307:9" pos:end="307:18">goto <name pos:start="307:14" pos:end="307:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="311:5" pos:end="311:45"><expr pos:start="311:5" pos:end="311:44"><name pos:start="311:5" pos:end="311:24"><name pos:start="311:5" pos:end="311:5">s</name><operator pos:start="311:6" pos:end="311:7">-&gt;</operator><name pos:start="311:8" pos:end="311:24">l1_vm_state_index</name></name> <operator pos:start="311:26" pos:end="311:26">=</operator> <name pos:start="311:28" pos:end="311:44">l1_vm_state_index</name></expr>;</expr_stmt>



    <comment type="block" pos:start="315:5" pos:end="317:27">/* the L1 table must contain at least enough entries to put

       header.size bytes */</comment>

    <if_stmt pos:start="319:5" pos:end="327:5"><if pos:start="319:5" pos:end="327:5">if <condition pos:start="319:8" pos:end="319:42">(<expr pos:start="319:9" pos:end="319:41"><name pos:start="319:9" pos:end="319:18"><name pos:start="319:9" pos:end="319:9">s</name><operator pos:start="319:10" pos:end="319:11">-&gt;</operator><name pos:start="319:12" pos:end="319:18">l1_size</name></name> <operator pos:start="319:20" pos:end="319:20">&lt;</operator> <name pos:start="319:22" pos:end="319:41"><name pos:start="319:22" pos:end="319:22">s</name><operator pos:start="319:23" pos:end="319:24">-&gt;</operator><name pos:start="319:25" pos:end="319:41">l1_vm_state_index</name></name></expr>)</condition> <block pos:start="319:44" pos:end="327:5">{<block_content pos:start="321:9" pos:end="325:18">

        <expr_stmt pos:start="321:9" pos:end="321:50"><expr pos:start="321:9" pos:end="321:49"><call pos:start="321:9" pos:end="321:49"><name pos:start="321:9" pos:end="321:18">error_setg</name><argument_list pos:start="321:19" pos:end="321:49">(<argument pos:start="321:20" pos:end="321:23"><expr pos:start="321:20" pos:end="321:23"><name pos:start="321:20" pos:end="321:23">errp</name></expr></argument>, <argument pos:start="321:26" pos:end="321:48"><expr pos:start="321:26" pos:end="321:48"><literal type="string" pos:start="321:26" pos:end="321:48">"L1 table is too small"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="323:9" pos:end="323:22"><expr pos:start="323:9" pos:end="323:21"><name pos:start="323:9" pos:end="323:11">ret</name> <operator pos:start="323:13" pos:end="323:13">=</operator> <operator pos:start="323:15" pos:end="323:15">-</operator><name pos:start="323:16" pos:end="323:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="325:9" pos:end="325:18">goto <name pos:start="325:14" pos:end="325:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:48"><expr pos:start="329:5" pos:end="329:47"><name pos:start="329:5" pos:end="329:22"><name pos:start="329:5" pos:end="329:5">s</name><operator pos:start="329:6" pos:end="329:7">-&gt;</operator><name pos:start="329:8" pos:end="329:22">l1_table_offset</name></name> <operator pos:start="329:24" pos:end="329:24">=</operator> <name pos:start="329:26" pos:end="329:47"><name pos:start="329:26" pos:end="329:31">header</name><operator pos:start="329:32" pos:end="329:32">.</operator><name pos:start="329:33" pos:end="329:47">l1_table_offset</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="331:5" pos:end="355:5"><if pos:start="331:5" pos:end="355:5">if <condition pos:start="331:8" pos:end="331:23">(<expr pos:start="331:9" pos:end="331:22"><name pos:start="331:9" pos:end="331:18"><name pos:start="331:9" pos:end="331:9">s</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:18">l1_size</name></name> <operator pos:start="331:20" pos:end="331:20">&gt;</operator> <literal type="number" pos:start="331:22" pos:end="331:22">0</literal></expr>)</condition> <block pos:start="331:25" pos:end="355:5">{<block_content pos:start="333:9" pos:end="353:9">

        <expr_stmt pos:start="333:9" pos:end="335:62"><expr pos:start="333:9" pos:end="335:61"><name pos:start="333:9" pos:end="333:19"><name pos:start="333:9" pos:end="333:9">s</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:19">l1_table</name></name> <operator pos:start="333:21" pos:end="333:21">=</operator> <call pos:start="333:23" pos:end="335:61"><name pos:start="333:23" pos:end="333:31">g_malloc0</name><argument_list pos:start="333:32" pos:end="335:61">(

            <argument pos:start="335:13" pos:end="335:60"><expr pos:start="335:13" pos:end="335:60"><call pos:start="335:13" pos:end="335:60"><name pos:start="335:13" pos:end="335:24">align_offset</name><argument_list pos:start="335:25" pos:end="335:60">(<argument pos:start="335:26" pos:end="335:54"><expr pos:start="335:26" pos:end="335:54"><name pos:start="335:26" pos:end="335:35"><name pos:start="335:26" pos:end="335:26">s</name><operator pos:start="335:27" pos:end="335:28">-&gt;</operator><name pos:start="335:29" pos:end="335:35">l1_size</name></name> <operator pos:start="335:37" pos:end="335:37">*</operator> <sizeof pos:start="335:39" pos:end="335:54">sizeof<argument_list pos:start="335:45" pos:end="335:54">(<argument pos:start="335:46" pos:end="335:53"><expr pos:start="335:46" pos:end="335:53"><name pos:start="335:46" pos:end="335:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="335:57" pos:end="335:59"><expr pos:start="335:57" pos:end="335:59"><literal type="number" pos:start="335:57" pos:end="335:59">512</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="339:56"><expr pos:start="337:9" pos:end="339:55"><name pos:start="337:9" pos:end="337:11">ret</name> <operator pos:start="337:13" pos:end="337:13">=</operator> <call pos:start="337:15" pos:end="339:55"><name pos:start="337:15" pos:end="337:24">bdrv_pread</name><argument_list pos:start="337:25" pos:end="339:55">(<argument pos:start="337:26" pos:end="337:33"><expr pos:start="337:26" pos:end="337:33"><name pos:start="337:26" pos:end="337:33"><name pos:start="337:26" pos:end="337:27">bs</name><operator pos:start="337:28" pos:end="337:29">-&gt;</operator><name pos:start="337:30" pos:end="337:33">file</name></name></expr></argument>, <argument pos:start="337:36" pos:end="337:53"><expr pos:start="337:36" pos:end="337:53"><name pos:start="337:36" pos:end="337:53"><name pos:start="337:36" pos:end="337:36">s</name><operator pos:start="337:37" pos:end="337:38">-&gt;</operator><name pos:start="337:39" pos:end="337:53">l1_table_offset</name></name></expr></argument>, <argument pos:start="337:56" pos:end="337:66"><expr pos:start="337:56" pos:end="337:66"><name pos:start="337:56" pos:end="337:66"><name pos:start="337:56" pos:end="337:56">s</name><operator pos:start="337:57" pos:end="337:58">-&gt;</operator><name pos:start="337:59" pos:end="337:66">l1_table</name></name></expr></argument>,

                         <argument pos:start="339:26" pos:end="339:54"><expr pos:start="339:26" pos:end="339:54"><name pos:start="339:26" pos:end="339:35"><name pos:start="339:26" pos:end="339:26">s</name><operator pos:start="339:27" pos:end="339:28">-&gt;</operator><name pos:start="339:29" pos:end="339:35">l1_size</name></name> <operator pos:start="339:37" pos:end="339:37">*</operator> <sizeof pos:start="339:39" pos:end="339:54">sizeof<argument_list pos:start="339:45" pos:end="339:54">(<argument pos:start="339:46" pos:end="339:53"><expr pos:start="339:46" pos:end="339:53"><name pos:start="339:46" pos:end="339:53">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="341:9" pos:end="347:9"><if pos:start="341:9" pos:end="347:9">if <condition pos:start="341:12" pos:end="341:20">(<expr pos:start="341:13" pos:end="341:19"><name pos:start="341:13" pos:end="341:15">ret</name> <operator pos:start="341:17" pos:end="341:17">&lt;</operator> <literal type="number" pos:start="341:19" pos:end="341:19">0</literal></expr>)</condition> <block pos:start="341:22" pos:end="347:9">{<block_content pos:start="343:13" pos:end="345:22">

            <expr_stmt pos:start="343:13" pos:end="343:68"><expr pos:start="343:13" pos:end="343:67"><call pos:start="343:13" pos:end="343:67"><name pos:start="343:13" pos:end="343:28">error_setg_errno</name><argument_list pos:start="343:29" pos:end="343:67">(<argument pos:start="343:30" pos:end="343:33"><expr pos:start="343:30" pos:end="343:33"><name pos:start="343:30" pos:end="343:33">errp</name></expr></argument>, <argument pos:start="343:36" pos:end="343:39"><expr pos:start="343:36" pos:end="343:39"><operator pos:start="343:36" pos:end="343:36">-</operator><name pos:start="343:37" pos:end="343:39">ret</name></expr></argument>, <argument pos:start="343:42" pos:end="343:66"><expr pos:start="343:42" pos:end="343:66"><literal type="string" pos:start="343:42" pos:end="343:66">"Could not read L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="345:13" pos:end="345:22">goto <name pos:start="345:18" pos:end="345:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <for pos:start="349:9" pos:end="353:9">for<control pos:start="349:12" pos:end="349:38">(<init pos:start="349:13" pos:end="349:18"><expr pos:start="349:13" pos:end="349:17"><name pos:start="349:13" pos:end="349:13">i</name> <operator pos:start="349:15" pos:end="349:15">=</operator> <literal type="number" pos:start="349:17" pos:end="349:17">0</literal></expr>;</init><condition pos:start="349:19" pos:end="349:33"><expr pos:start="349:19" pos:end="349:32"><name pos:start="349:19" pos:end="349:19">i</name> <operator pos:start="349:21" pos:end="349:21">&lt;</operator> <name pos:start="349:23" pos:end="349:32"><name pos:start="349:23" pos:end="349:23">s</name><operator pos:start="349:24" pos:end="349:25">-&gt;</operator><name pos:start="349:26" pos:end="349:32">l1_size</name></name></expr>;</condition> <incr pos:start="349:35" pos:end="349:37"><expr pos:start="349:35" pos:end="349:37"><name pos:start="349:35" pos:end="349:35">i</name><operator pos:start="349:36" pos:end="349:37">++</operator></expr></incr>)</control> <block pos:start="349:40" pos:end="353:9">{<block_content pos:start="351:13" pos:end="351:42">

            <expr_stmt pos:start="351:13" pos:end="351:42"><expr pos:start="351:13" pos:end="351:41"><call pos:start="351:13" pos:end="351:41"><name pos:start="351:13" pos:end="351:24">be64_to_cpus</name><argument_list pos:start="351:25" pos:end="351:41">(<argument pos:start="351:26" pos:end="351:40"><expr pos:start="351:26" pos:end="351:40"><operator pos:start="351:26" pos:end="351:26">&amp;</operator><name pos:start="351:27" pos:end="351:40"><name pos:start="351:27" pos:end="351:27">s</name><operator pos:start="351:28" pos:end="351:29">-&gt;</operator><name pos:start="351:30" pos:end="351:37">l1_table</name><index pos:start="351:38" pos:end="351:40">[<expr pos:start="351:39" pos:end="351:39"><name pos:start="351:39" pos:end="351:39">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="359:5" pos:end="359:45">/* alloc L2 table/refcount block cache */</comment>

    <expr_stmt pos:start="361:5" pos:end="361:62"><expr pos:start="361:5" pos:end="361:61"><name pos:start="361:5" pos:end="361:21"><name pos:start="361:5" pos:end="361:5">s</name><operator pos:start="361:6" pos:end="361:7">-&gt;</operator><name pos:start="361:8" pos:end="361:21">l2_table_cache</name></name> <operator pos:start="361:23" pos:end="361:23">=</operator> <call pos:start="361:25" pos:end="361:61"><name pos:start="361:25" pos:end="361:42">qcow2_cache_create</name><argument_list pos:start="361:43" pos:end="361:61">(<argument pos:start="361:44" pos:end="361:45"><expr pos:start="361:44" pos:end="361:45"><name pos:start="361:44" pos:end="361:45">bs</name></expr></argument>, <argument pos:start="361:48" pos:end="361:60"><expr pos:start="361:48" pos:end="361:60"><name pos:start="361:48" pos:end="361:60">L2_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="363:5" pos:end="363:74"><expr pos:start="363:5" pos:end="363:73"><name pos:start="363:5" pos:end="363:27"><name pos:start="363:5" pos:end="363:5">s</name><operator pos:start="363:6" pos:end="363:7">-&gt;</operator><name pos:start="363:8" pos:end="363:27">refcount_block_cache</name></name> <operator pos:start="363:29" pos:end="363:29">=</operator> <call pos:start="363:31" pos:end="363:73"><name pos:start="363:31" pos:end="363:48">qcow2_cache_create</name><argument_list pos:start="363:49" pos:end="363:73">(<argument pos:start="363:50" pos:end="363:51"><expr pos:start="363:50" pos:end="363:51"><name pos:start="363:50" pos:end="363:51">bs</name></expr></argument>, <argument pos:start="363:54" pos:end="363:72"><expr pos:start="363:54" pos:end="363:72"><name pos:start="363:54" pos:end="363:72">REFCOUNT_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:49"><expr pos:start="367:5" pos:end="367:48"><name pos:start="367:5" pos:end="367:20"><name pos:start="367:5" pos:end="367:5">s</name><operator pos:start="367:6" pos:end="367:7">-&gt;</operator><name pos:start="367:8" pos:end="367:20">cluster_cache</name></name> <operator pos:start="367:22" pos:end="367:22">=</operator> <call pos:start="367:24" pos:end="367:48"><name pos:start="367:24" pos:end="367:31">g_malloc</name><argument_list pos:start="367:32" pos:end="367:48">(<argument pos:start="367:33" pos:end="367:47"><expr pos:start="367:33" pos:end="367:47"><name pos:start="367:33" pos:end="367:47"><name pos:start="367:33" pos:end="367:33">s</name><operator pos:start="367:34" pos:end="367:35">-&gt;</operator><name pos:start="367:36" pos:end="367:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="369:5" pos:end="369:57">/* one more sector for decompressed data alignment */</comment>

    <expr_stmt pos:start="371:5" pos:end="373:41"><expr pos:start="371:5" pos:end="373:40"><name pos:start="371:5" pos:end="371:19"><name pos:start="371:5" pos:end="371:5">s</name><operator pos:start="371:6" pos:end="371:7">-&gt;</operator><name pos:start="371:8" pos:end="371:19">cluster_data</name></name> <operator pos:start="371:21" pos:end="371:21">=</operator> <call pos:start="371:23" pos:end="373:40"><name pos:start="371:23" pos:end="371:37">qemu_blockalign</name><argument_list pos:start="371:38" pos:end="373:40">(<argument pos:start="371:39" pos:end="371:40"><expr pos:start="371:39" pos:end="371:40"><name pos:start="371:39" pos:end="371:40">bs</name></expr></argument>, <argument pos:start="371:43" pos:end="373:39"><expr pos:start="371:43" pos:end="373:39"><name pos:start="371:43" pos:end="371:65">QCOW_MAX_CRYPT_CLUSTERS</name> <operator pos:start="371:67" pos:end="371:67">*</operator> <name pos:start="371:69" pos:end="371:83"><name pos:start="371:69" pos:end="371:69">s</name><operator pos:start="371:70" pos:end="371:71">-&gt;</operator><name pos:start="371:72" pos:end="371:83">cluster_size</name></name>

                                  <operator pos:start="373:35" pos:end="373:35">+</operator> <literal type="number" pos:start="373:37" pos:end="373:39">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="375:5" pos:end="375:33"><expr pos:start="375:5" pos:end="375:32"><name pos:start="375:5" pos:end="375:27"><name pos:start="375:5" pos:end="375:5">s</name><operator pos:start="375:6" pos:end="375:7">-&gt;</operator><name pos:start="375:8" pos:end="375:27">cluster_cache_offset</name></name> <operator pos:start="375:29" pos:end="375:29">=</operator> <operator pos:start="375:31" pos:end="375:31">-</operator><literal type="number" pos:start="375:32" pos:end="375:32">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="377:5" pos:end="377:21"><expr pos:start="377:5" pos:end="377:20"><name pos:start="377:5" pos:end="377:12"><name pos:start="377:5" pos:end="377:5">s</name><operator pos:start="377:6" pos:end="377:7">-&gt;</operator><name pos:start="377:8" pos:end="377:12">flags</name></name> <operator pos:start="377:14" pos:end="377:14">=</operator> <name pos:start="377:16" pos:end="377:20">flags</name></expr>;</expr_stmt>



    <expr_stmt pos:start="381:5" pos:end="381:34"><expr pos:start="381:5" pos:end="381:33"><name pos:start="381:5" pos:end="381:7">ret</name> <operator pos:start="381:9" pos:end="381:9">=</operator> <call pos:start="381:11" pos:end="381:33"><name pos:start="381:11" pos:end="381:29">qcow2_refcount_init</name><argument_list pos:start="381:30" pos:end="381:33">(<argument pos:start="381:31" pos:end="381:32"><expr pos:start="381:31" pos:end="381:32"><name pos:start="381:31" pos:end="381:32">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="383:5" pos:end="389:5"><if pos:start="383:5" pos:end="389:5">if <condition pos:start="383:8" pos:end="383:17">(<expr pos:start="383:9" pos:end="383:16"><name pos:start="383:9" pos:end="383:11">ret</name> <operator pos:start="383:13" pos:end="383:14">!=</operator> <literal type="number" pos:start="383:16" pos:end="383:16">0</literal></expr>)</condition> <block pos:start="383:19" pos:end="389:5">{<block_content pos:start="385:9" pos:end="387:18">

        <expr_stmt pos:start="385:9" pos:end="385:79"><expr pos:start="385:9" pos:end="385:78"><call pos:start="385:9" pos:end="385:78"><name pos:start="385:9" pos:end="385:24">error_setg_errno</name><argument_list pos:start="385:25" pos:end="385:78">(<argument pos:start="385:26" pos:end="385:29"><expr pos:start="385:26" pos:end="385:29"><name pos:start="385:26" pos:end="385:29">errp</name></expr></argument>, <argument pos:start="385:32" pos:end="385:35"><expr pos:start="385:32" pos:end="385:35"><operator pos:start="385:32" pos:end="385:32">-</operator><name pos:start="385:33" pos:end="385:35">ret</name></expr></argument>, <argument pos:start="385:38" pos:end="385:77"><expr pos:start="385:38" pos:end="385:77"><literal type="string" pos:start="385:38" pos:end="385:77">"Could not initialize refcount handling"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="387:9" pos:end="387:18">goto <name pos:start="387:14" pos:end="387:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="393:5" pos:end="393:35"><expr pos:start="393:5" pos:end="393:34"><call pos:start="393:5" pos:end="393:34"><name pos:start="393:5" pos:end="393:14">QLIST_INIT</name><argument_list pos:start="393:15" pos:end="393:34">(<argument pos:start="393:16" pos:end="393:33"><expr pos:start="393:16" pos:end="393:33"><operator pos:start="393:16" pos:end="393:16">&amp;</operator><name pos:start="393:17" pos:end="393:33"><name pos:start="393:17" pos:end="393:17">s</name><operator pos:start="393:18" pos:end="393:19">-&gt;</operator><name pos:start="393:20" pos:end="393:33">cluster_allocs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="395:5" pos:end="395:30"><expr pos:start="395:5" pos:end="395:29"><call pos:start="395:5" pos:end="395:29"><name pos:start="395:5" pos:end="395:15">QTAILQ_INIT</name><argument_list pos:start="395:16" pos:end="395:29">(<argument pos:start="395:17" pos:end="395:28"><expr pos:start="395:17" pos:end="395:28"><operator pos:start="395:17" pos:end="395:17">&amp;</operator><name pos:start="395:18" pos:end="395:28"><name pos:start="395:18" pos:end="395:18">s</name><operator pos:start="395:19" pos:end="395:20">-&gt;</operator><name pos:start="395:21" pos:end="395:28">discards</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="399:5" pos:end="399:31">/* read qcow2 extensions */</comment>

    <if_stmt pos:start="401:5" pos:end="411:5"><if pos:start="401:5" pos:end="411:5">if <condition pos:start="401:8" pos:end="403:20">(<expr pos:start="401:9" pos:end="403:19"><call pos:start="401:9" pos:end="403:19"><name pos:start="401:9" pos:end="401:29">qcow2_read_extensions</name><argument_list pos:start="401:30" pos:end="403:19">(<argument pos:start="401:31" pos:end="401:32"><expr pos:start="401:31" pos:end="401:32"><name pos:start="401:31" pos:end="401:32">bs</name></expr></argument>, <argument pos:start="401:35" pos:end="401:54"><expr pos:start="401:35" pos:end="401:54"><name pos:start="401:35" pos:end="401:54"><name pos:start="401:35" pos:end="401:40">header</name><operator pos:start="401:41" pos:end="401:41">.</operator><name pos:start="401:42" pos:end="401:54">header_length</name></name></expr></argument>, <argument pos:start="401:57" pos:end="401:63"><expr pos:start="401:57" pos:end="401:63"><name pos:start="401:57" pos:end="401:63">ext_end</name></expr></argument>, <argument pos:start="401:66" pos:end="401:69"><expr pos:start="401:66" pos:end="401:69"><name pos:start="401:66" pos:end="401:69">NULL</name></expr></argument>,

        <argument pos:start="403:9" pos:end="403:18"><expr pos:start="403:9" pos:end="403:18"><operator pos:start="403:9" pos:end="403:9">&amp;</operator><name pos:start="403:10" pos:end="403:18">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="403:22" pos:end="411:5">{<block_content pos:start="405:9" pos:end="409:18">

        <expr_stmt pos:start="405:9" pos:end="405:41"><expr pos:start="405:9" pos:end="405:40"><call pos:start="405:9" pos:end="405:40"><name pos:start="405:9" pos:end="405:23">error_propagate</name><argument_list pos:start="405:24" pos:end="405:40">(<argument pos:start="405:25" pos:end="405:28"><expr pos:start="405:25" pos:end="405:28"><name pos:start="405:25" pos:end="405:28">errp</name></expr></argument>, <argument pos:start="405:31" pos:end="405:39"><expr pos:start="405:31" pos:end="405:39"><name pos:start="405:31" pos:end="405:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:22"><expr pos:start="407:9" pos:end="407:21"><name pos:start="407:9" pos:end="407:11">ret</name> <operator pos:start="407:13" pos:end="407:13">=</operator> <operator pos:start="407:15" pos:end="407:15">-</operator><name pos:start="407:16" pos:end="407:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="409:9" pos:end="409:18">goto <name pos:start="409:14" pos:end="409:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="415:5" pos:end="415:36">/* read the backing file name */</comment>

    <if_stmt pos:start="417:5" pos:end="441:5"><if pos:start="417:5" pos:end="441:5">if <condition pos:start="417:8" pos:end="417:40">(<expr pos:start="417:9" pos:end="417:39"><name pos:start="417:9" pos:end="417:34"><name pos:start="417:9" pos:end="417:14">header</name><operator pos:start="417:15" pos:end="417:15">.</operator><name pos:start="417:16" pos:end="417:34">backing_file_offset</name></name> <operator pos:start="417:36" pos:end="417:37">!=</operator> <literal type="number" pos:start="417:39" pos:end="417:39">0</literal></expr>)</condition> <block pos:start="417:42" pos:end="441:5">{<block_content pos:start="419:9" pos:end="439:37">

        <expr_stmt pos:start="419:9" pos:end="419:39"><expr pos:start="419:9" pos:end="419:38"><name pos:start="419:9" pos:end="419:11">len</name> <operator pos:start="419:13" pos:end="419:13">=</operator> <name pos:start="419:15" pos:end="419:38"><name pos:start="419:15" pos:end="419:20">header</name><operator pos:start="419:21" pos:end="419:21">.</operator><name pos:start="419:22" pos:end="419:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="421:9" pos:end="425:9"><if pos:start="421:9" pos:end="425:9">if <condition pos:start="421:12" pos:end="421:23">(<expr pos:start="421:13" pos:end="421:22"><name pos:start="421:13" pos:end="421:15">len</name> <operator pos:start="421:17" pos:end="421:17">&gt;</operator> <literal type="number" pos:start="421:19" pos:end="421:22">1023</literal></expr>)</condition> <block pos:start="421:25" pos:end="425:9">{<block_content pos:start="423:13" pos:end="423:23">

            <expr_stmt pos:start="423:13" pos:end="423:23"><expr pos:start="423:13" pos:end="423:22"><name pos:start="423:13" pos:end="423:15">len</name> <operator pos:start="423:17" pos:end="423:17">=</operator> <literal type="number" pos:start="423:19" pos:end="423:22">1023</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="427:9" pos:end="429:48"><expr pos:start="427:9" pos:end="429:47"><name pos:start="427:9" pos:end="427:11">ret</name> <operator pos:start="427:13" pos:end="427:13">=</operator> <call pos:start="427:15" pos:end="429:47"><name pos:start="427:15" pos:end="427:24">bdrv_pread</name><argument_list pos:start="427:25" pos:end="429:47">(<argument pos:start="427:26" pos:end="427:33"><expr pos:start="427:26" pos:end="427:33"><name pos:start="427:26" pos:end="427:33"><name pos:start="427:26" pos:end="427:27">bs</name><operator pos:start="427:28" pos:end="427:29">-&gt;</operator><name pos:start="427:30" pos:end="427:33">file</name></name></expr></argument>, <argument pos:start="427:36" pos:end="427:61"><expr pos:start="427:36" pos:end="427:61"><name pos:start="427:36" pos:end="427:61"><name pos:start="427:36" pos:end="427:41">header</name><operator pos:start="427:42" pos:end="427:42">.</operator><name pos:start="427:43" pos:end="427:61">backing_file_offset</name></name></expr></argument>,

                         <argument pos:start="429:26" pos:end="429:41"><expr pos:start="429:26" pos:end="429:41"><name pos:start="429:26" pos:end="429:41"><name pos:start="429:26" pos:end="429:27">bs</name><operator pos:start="429:28" pos:end="429:29">-&gt;</operator><name pos:start="429:30" pos:end="429:41">backing_file</name></name></expr></argument>, <argument pos:start="429:44" pos:end="429:46"><expr pos:start="429:44" pos:end="429:46"><name pos:start="429:44" pos:end="429:46">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="431:9" pos:end="437:9"><if pos:start="431:9" pos:end="437:9">if <condition pos:start="431:12" pos:end="431:20">(<expr pos:start="431:13" pos:end="431:19"><name pos:start="431:13" pos:end="431:15">ret</name> <operator pos:start="431:17" pos:end="431:17">&lt;</operator> <literal type="number" pos:start="431:19" pos:end="431:19">0</literal></expr>)</condition> <block pos:start="431:22" pos:end="437:9">{<block_content pos:start="433:13" pos:end="435:22">

            <expr_stmt pos:start="433:13" pos:end="433:77"><expr pos:start="433:13" pos:end="433:76"><call pos:start="433:13" pos:end="433:76"><name pos:start="433:13" pos:end="433:28">error_setg_errno</name><argument_list pos:start="433:29" pos:end="433:76">(<argument pos:start="433:30" pos:end="433:33"><expr pos:start="433:30" pos:end="433:33"><name pos:start="433:30" pos:end="433:33">errp</name></expr></argument>, <argument pos:start="433:36" pos:end="433:39"><expr pos:start="433:36" pos:end="433:39"><operator pos:start="433:36" pos:end="433:36">-</operator><name pos:start="433:37" pos:end="433:39">ret</name></expr></argument>, <argument pos:start="433:42" pos:end="433:75"><expr pos:start="433:42" pos:end="433:75"><literal type="string" pos:start="433:42" pos:end="433:75">"Could not read backing file name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="435:13" pos:end="435:22">goto <name pos:start="435:18" pos:end="435:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:37"><expr pos:start="439:9" pos:end="439:36"><name pos:start="439:9" pos:end="439:29"><name pos:start="439:9" pos:end="439:10">bs</name><operator pos:start="439:11" pos:end="439:12">-&gt;</operator><name pos:start="439:13" pos:end="439:24">backing_file</name><index pos:start="439:25" pos:end="439:29">[<expr pos:start="439:26" pos:end="439:28"><name pos:start="439:26" pos:end="439:28">len</name></expr>]</index></name> <operator pos:start="439:31" pos:end="439:31">=</operator> <literal type="char" pos:start="439:33" pos:end="439:36">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="445:5" pos:end="445:35"><expr pos:start="445:5" pos:end="445:34"><name pos:start="445:5" pos:end="445:7">ret</name> <operator pos:start="445:9" pos:end="445:9">=</operator> <call pos:start="445:11" pos:end="445:34"><name pos:start="445:11" pos:end="445:30">qcow2_read_snapshots</name><argument_list pos:start="445:31" pos:end="445:34">(<argument pos:start="445:32" pos:end="445:33"><expr pos:start="445:32" pos:end="445:33"><name pos:start="445:32" pos:end="445:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="447:5" pos:end="453:5"><if pos:start="447:5" pos:end="453:5">if <condition pos:start="447:8" pos:end="447:16">(<expr pos:start="447:9" pos:end="447:15"><name pos:start="447:9" pos:end="447:11">ret</name> <operator pos:start="447:13" pos:end="447:13">&lt;</operator> <literal type="number" pos:start="447:15" pos:end="447:15">0</literal></expr>)</condition> <block pos:start="447:18" pos:end="453:5">{<block_content pos:start="449:9" pos:end="451:18">

        <expr_stmt pos:start="449:9" pos:end="449:65"><expr pos:start="449:9" pos:end="449:64"><call pos:start="449:9" pos:end="449:64"><name pos:start="449:9" pos:end="449:24">error_setg_errno</name><argument_list pos:start="449:25" pos:end="449:64">(<argument pos:start="449:26" pos:end="449:29"><expr pos:start="449:26" pos:end="449:29"><name pos:start="449:26" pos:end="449:29">errp</name></expr></argument>, <argument pos:start="449:32" pos:end="449:35"><expr pos:start="449:32" pos:end="449:35"><operator pos:start="449:32" pos:end="449:32">-</operator><name pos:start="449:33" pos:end="449:35">ret</name></expr></argument>, <argument pos:start="449:38" pos:end="449:63"><expr pos:start="449:38" pos:end="449:63"><literal type="string" pos:start="449:38" pos:end="449:63">"Could not read snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="451:9" pos:end="451:18">goto <name pos:start="451:14" pos:end="451:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="457:5" pos:end="457:46">/* Clear unknown autoclear feature bits */</comment>

    <if_stmt pos:start="459:5" pos:end="473:5"><if pos:start="459:5" pos:end="473:5">if <condition pos:start="459:8" pos:end="459:53">(<expr pos:start="459:9" pos:end="459:52"><operator pos:start="459:9" pos:end="459:9">!</operator><name pos:start="459:10" pos:end="459:22"><name pos:start="459:10" pos:end="459:11">bs</name><operator pos:start="459:12" pos:end="459:13">-&gt;</operator><name pos:start="459:14" pos:end="459:22">read_only</name></name> <operator pos:start="459:24" pos:end="459:25">&amp;&amp;</operator> <name pos:start="459:27" pos:end="459:47"><name pos:start="459:27" pos:end="459:27">s</name><operator pos:start="459:28" pos:end="459:29">-&gt;</operator><name pos:start="459:30" pos:end="459:47">autoclear_features</name></name> <operator pos:start="459:49" pos:end="459:50">!=</operator> <literal type="number" pos:start="459:52" pos:end="459:52">0</literal></expr>)</condition> <block pos:start="459:55" pos:end="473:5">{<block_content pos:start="461:9" pos:end="471:9">

        <expr_stmt pos:start="461:9" pos:end="461:34"><expr pos:start="461:9" pos:end="461:33"><name pos:start="461:9" pos:end="461:29"><name pos:start="461:9" pos:end="461:9">s</name><operator pos:start="461:10" pos:end="461:11">-&gt;</operator><name pos:start="461:12" pos:end="461:29">autoclear_features</name></name> <operator pos:start="461:31" pos:end="461:31">=</operator> <literal type="number" pos:start="461:33" pos:end="461:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="463:9" pos:end="463:38"><expr pos:start="463:9" pos:end="463:37"><name pos:start="463:9" pos:end="463:11">ret</name> <operator pos:start="463:13" pos:end="463:13">=</operator> <call pos:start="463:15" pos:end="463:37"><name pos:start="463:15" pos:end="463:33">qcow2_update_header</name><argument_list pos:start="463:34" pos:end="463:37">(<argument pos:start="463:35" pos:end="463:36"><expr pos:start="463:35" pos:end="463:36"><name pos:start="463:35" pos:end="463:36">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="465:9" pos:end="471:9"><if pos:start="465:9" pos:end="471:9">if <condition pos:start="465:12" pos:end="465:20">(<expr pos:start="465:13" pos:end="465:19"><name pos:start="465:13" pos:end="465:15">ret</name> <operator pos:start="465:17" pos:end="465:17">&lt;</operator> <literal type="number" pos:start="465:19" pos:end="465:19">0</literal></expr>)</condition> <block pos:start="465:22" pos:end="471:9">{<block_content pos:start="467:13" pos:end="469:22">

            <expr_stmt pos:start="467:13" pos:end="467:74"><expr pos:start="467:13" pos:end="467:73"><call pos:start="467:13" pos:end="467:73"><name pos:start="467:13" pos:end="467:28">error_setg_errno</name><argument_list pos:start="467:29" pos:end="467:73">(<argument pos:start="467:30" pos:end="467:33"><expr pos:start="467:30" pos:end="467:33"><name pos:start="467:30" pos:end="467:33">errp</name></expr></argument>, <argument pos:start="467:36" pos:end="467:39"><expr pos:start="467:36" pos:end="467:39"><operator pos:start="467:36" pos:end="467:36">-</operator><name pos:start="467:37" pos:end="467:39">ret</name></expr></argument>, <argument pos:start="467:42" pos:end="467:72"><expr pos:start="467:42" pos:end="467:72"><literal type="string" pos:start="467:42" pos:end="467:72">"Could not update qcow2 header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="469:13" pos:end="469:22">goto <name pos:start="469:18" pos:end="469:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="477:5" pos:end="477:26">/* Initialise locks */</comment>

    <expr_stmt pos:start="479:5" pos:end="479:33"><expr pos:start="479:5" pos:end="479:32"><call pos:start="479:5" pos:end="479:32"><name pos:start="479:5" pos:end="479:22">qemu_co_mutex_init</name><argument_list pos:start="479:23" pos:end="479:32">(<argument pos:start="479:24" pos:end="479:31"><expr pos:start="479:24" pos:end="479:31"><operator pos:start="479:24" pos:end="479:24">&amp;</operator><name pos:start="479:25" pos:end="479:31"><name pos:start="479:25" pos:end="479:25">s</name><operator pos:start="479:26" pos:end="479:27">-&gt;</operator><name pos:start="479:28" pos:end="479:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="483:5" pos:end="483:31">/* Repair image if dirty */</comment>

    <if_stmt pos:start="485:5" pos:end="503:5"><if pos:start="485:5" pos:end="503:5">if <condition pos:start="485:8" pos:end="487:58">(<expr pos:start="485:9" pos:end="487:57"><operator pos:start="485:9" pos:end="485:9">!</operator><operator pos:start="485:10" pos:end="485:10">(</operator><name pos:start="485:11" pos:end="485:15">flags</name> <operator pos:start="485:17" pos:end="485:17">&amp;</operator> <name pos:start="485:19" pos:end="485:30">BDRV_O_CHECK</name><operator pos:start="485:31" pos:end="485:31">)</operator> <operator pos:start="485:33" pos:end="485:34">&amp;&amp;</operator> <operator pos:start="485:36" pos:end="485:36">!</operator><name pos:start="485:37" pos:end="485:49"><name pos:start="485:37" pos:end="485:38">bs</name><operator pos:start="485:39" pos:end="485:40">-&gt;</operator><name pos:start="485:41" pos:end="485:49">read_only</name></name> <operator pos:start="485:51" pos:end="485:52">&amp;&amp;</operator>

        <operator pos:start="487:9" pos:end="487:9">(</operator><name pos:start="487:10" pos:end="487:33"><name pos:start="487:10" pos:end="487:10">s</name><operator pos:start="487:11" pos:end="487:12">-&gt;</operator><name pos:start="487:13" pos:end="487:33">incompatible_features</name></name> <operator pos:start="487:35" pos:end="487:35">&amp;</operator> <name pos:start="487:37" pos:end="487:56">QCOW2_INCOMPAT_DIRTY</name><operator pos:start="487:57" pos:end="487:57">)</operator></expr>)</condition> <block pos:start="487:60" pos:end="503:5">{<block_content pos:start="489:9" pos:end="501:9">

        <decl_stmt pos:start="489:9" pos:end="489:37"><decl pos:start="489:9" pos:end="489:36"><type pos:start="489:9" pos:end="489:23"><name pos:start="489:9" pos:end="489:23">BdrvCheckResult</name></type> <name pos:start="489:25" pos:end="489:30">result</name> <init pos:start="489:32" pos:end="489:36">= <expr pos:start="489:34" pos:end="489:36"><block pos:start="489:34" pos:end="489:36">{<expr pos:start="489:35" pos:end="489:35"><literal type="number" pos:start="489:35" pos:end="489:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="493:9" pos:end="493:56"><expr pos:start="493:9" pos:end="493:55"><name pos:start="493:9" pos:end="493:11">ret</name> <operator pos:start="493:13" pos:end="493:13">=</operator> <call pos:start="493:15" pos:end="493:55"><name pos:start="493:15" pos:end="493:25">qcow2_check</name><argument_list pos:start="493:26" pos:end="493:55">(<argument pos:start="493:27" pos:end="493:28"><expr pos:start="493:27" pos:end="493:28"><name pos:start="493:27" pos:end="493:28">bs</name></expr></argument>, <argument pos:start="493:31" pos:end="493:37"><expr pos:start="493:31" pos:end="493:37"><operator pos:start="493:31" pos:end="493:31">&amp;</operator><name pos:start="493:32" pos:end="493:37">result</name></expr></argument>, <argument pos:start="493:40" pos:end="493:54"><expr pos:start="493:40" pos:end="493:54"><name pos:start="493:40" pos:end="493:54">BDRV_FIX_ERRORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="495:9" pos:end="501:9"><if pos:start="495:9" pos:end="501:9">if <condition pos:start="495:12" pos:end="495:20">(<expr pos:start="495:13" pos:end="495:19"><name pos:start="495:13" pos:end="495:15">ret</name> <operator pos:start="495:17" pos:end="495:17">&lt;</operator> <literal type="number" pos:start="495:19" pos:end="495:19">0</literal></expr>)</condition> <block pos:start="495:22" pos:end="501:9">{<block_content pos:start="497:13" pos:end="499:22">

            <expr_stmt pos:start="497:13" pos:end="497:73"><expr pos:start="497:13" pos:end="497:72"><call pos:start="497:13" pos:end="497:72"><name pos:start="497:13" pos:end="497:28">error_setg_errno</name><argument_list pos:start="497:29" pos:end="497:72">(<argument pos:start="497:30" pos:end="497:33"><expr pos:start="497:30" pos:end="497:33"><name pos:start="497:30" pos:end="497:33">errp</name></expr></argument>, <argument pos:start="497:36" pos:end="497:39"><expr pos:start="497:36" pos:end="497:39"><operator pos:start="497:36" pos:end="497:36">-</operator><name pos:start="497:37" pos:end="497:39">ret</name></expr></argument>, <argument pos:start="497:42" pos:end="497:71"><expr pos:start="497:42" pos:end="497:71"><literal type="string" pos:start="497:42" pos:end="497:71">"Could not repair dirty image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="499:13" pos:end="499:22">goto <name pos:start="499:18" pos:end="499:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="507:5" pos:end="507:75">/* Enable lazy_refcounts according to image and command line options */</comment>

    <expr_stmt pos:start="509:5" pos:end="509:72"><expr pos:start="509:5" pos:end="509:71"><name pos:start="509:5" pos:end="509:8">opts</name> <operator pos:start="509:10" pos:end="509:10">=</operator> <call pos:start="509:12" pos:end="509:71"><name pos:start="509:12" pos:end="509:27">qemu_opts_create</name><argument_list pos:start="509:28" pos:end="509:71">(<argument pos:start="509:29" pos:end="509:47"><expr pos:start="509:29" pos:end="509:47"><operator pos:start="509:29" pos:end="509:29">&amp;</operator><name pos:start="509:30" pos:end="509:47">qcow2_runtime_opts</name></expr></argument>, <argument pos:start="509:50" pos:end="509:53"><expr pos:start="509:50" pos:end="509:53"><name pos:start="509:50" pos:end="509:53">NULL</name></expr></argument>, <argument pos:start="509:56" pos:end="509:56"><expr pos:start="509:56" pos:end="509:56"><literal type="number" pos:start="509:56" pos:end="509:56">0</literal></expr></argument>, <argument pos:start="509:59" pos:end="509:70"><expr pos:start="509:59" pos:end="509:70"><operator pos:start="509:59" pos:end="509:59">&amp;</operator><name pos:start="509:60" pos:end="509:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:54"><expr pos:start="511:5" pos:end="511:53"><call pos:start="511:5" pos:end="511:53"><name pos:start="511:5" pos:end="511:26">qemu_opts_absorb_qdict</name><argument_list pos:start="511:27" pos:end="511:53">(<argument pos:start="511:28" pos:end="511:31"><expr pos:start="511:28" pos:end="511:31"><name pos:start="511:28" pos:end="511:31">opts</name></expr></argument>, <argument pos:start="511:34" pos:end="511:40"><expr pos:start="511:34" pos:end="511:40"><name pos:start="511:34" pos:end="511:40">options</name></expr></argument>, <argument pos:start="511:43" pos:end="511:52"><expr pos:start="511:43" pos:end="511:52"><operator pos:start="511:43" pos:end="511:43">&amp;</operator><name pos:start="511:44" pos:end="511:52">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="513:5" pos:end="521:5"><if pos:start="513:5" pos:end="521:5">if <condition pos:start="513:8" pos:end="513:18">(<expr pos:start="513:9" pos:end="513:17"><name pos:start="513:9" pos:end="513:17">local_err</name></expr>)</condition> <block pos:start="513:20" pos:end="521:5">{<block_content pos:start="515:9" pos:end="519:18">

        <expr_stmt pos:start="515:9" pos:end="515:41"><expr pos:start="515:9" pos:end="515:40"><call pos:start="515:9" pos:end="515:40"><name pos:start="515:9" pos:end="515:23">error_propagate</name><argument_list pos:start="515:24" pos:end="515:40">(<argument pos:start="515:25" pos:end="515:28"><expr pos:start="515:25" pos:end="515:28"><name pos:start="515:25" pos:end="515:28">errp</name></expr></argument>, <argument pos:start="515:31" pos:end="515:39"><expr pos:start="515:31" pos:end="515:39"><name pos:start="515:31" pos:end="515:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:22"><expr pos:start="517:9" pos:end="517:21"><name pos:start="517:9" pos:end="517:11">ret</name> <operator pos:start="517:13" pos:end="517:13">=</operator> <operator pos:start="517:15" pos:end="517:15">-</operator><name pos:start="517:16" pos:end="517:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="519:9" pos:end="519:18">goto <name pos:start="519:14" pos:end="519:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="525:5" pos:end="527:64"><expr pos:start="525:5" pos:end="527:63"><name pos:start="525:5" pos:end="525:25"><name pos:start="525:5" pos:end="525:5">s</name><operator pos:start="525:6" pos:end="525:7">-&gt;</operator><name pos:start="525:8" pos:end="525:25">use_lazy_refcounts</name></name> <operator pos:start="525:27" pos:end="525:27">=</operator> <call pos:start="525:29" pos:end="527:63"><name pos:start="525:29" pos:end="525:45">qemu_opt_get_bool</name><argument_list pos:start="525:46" pos:end="527:63">(<argument pos:start="525:47" pos:end="525:50"><expr pos:start="525:47" pos:end="525:50"><name pos:start="525:47" pos:end="525:50">opts</name></expr></argument>, <argument pos:start="525:53" pos:end="525:76"><expr pos:start="525:53" pos:end="525:76"><name pos:start="525:53" pos:end="525:76">QCOW2_OPT_LAZY_REFCOUNTS</name></expr></argument>,

        <argument pos:start="527:9" pos:end="527:62"><expr pos:start="527:9" pos:end="527:62"><operator pos:start="527:9" pos:end="527:9">(</operator><name pos:start="527:10" pos:end="527:31"><name pos:start="527:10" pos:end="527:10">s</name><operator pos:start="527:11" pos:end="527:12">-&gt;</operator><name pos:start="527:13" pos:end="527:31">compatible_features</name></name> <operator pos:start="527:33" pos:end="527:33">&amp;</operator> <name pos:start="527:35" pos:end="527:61">QCOW2_COMPAT_LAZY_REFCOUNTS</name><operator pos:start="527:62" pos:end="527:62">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="531:5" pos:end="531:56"><expr pos:start="531:5" pos:end="531:55"><name pos:start="531:5" pos:end="531:47"><name pos:start="531:5" pos:end="531:5">s</name><operator pos:start="531:6" pos:end="531:7">-&gt;</operator><name pos:start="531:8" pos:end="531:26">discard_passthrough</name><index pos:start="531:27" pos:end="531:47">[<expr pos:start="531:28" pos:end="531:46"><name pos:start="531:28" pos:end="531:46">QCOW2_DISCARD_NEVER</name></expr>]</index></name> <operator pos:start="531:49" pos:end="531:49">=</operator> <name pos:start="531:51" pos:end="531:55">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="533:5" pos:end="533:56"><expr pos:start="533:5" pos:end="533:55"><name pos:start="533:5" pos:end="533:48"><name pos:start="533:5" pos:end="533:5">s</name><operator pos:start="533:6" pos:end="533:7">-&gt;</operator><name pos:start="533:8" pos:end="533:26">discard_passthrough</name><index pos:start="533:27" pos:end="533:48">[<expr pos:start="533:28" pos:end="533:47"><name pos:start="533:28" pos:end="533:47">QCOW2_DISCARD_ALWAYS</name></expr>]</index></name> <operator pos:start="533:50" pos:end="533:50">=</operator> <name pos:start="533:52" pos:end="533:55">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="539:48"><expr pos:start="535:5" pos:end="539:47"><name pos:start="535:5" pos:end="535:49"><name pos:start="535:5" pos:end="535:5">s</name><operator pos:start="535:6" pos:end="535:7">-&gt;</operator><name pos:start="535:8" pos:end="535:26">discard_passthrough</name><index pos:start="535:27" pos:end="535:49">[<expr pos:start="535:28" pos:end="535:48"><name pos:start="535:28" pos:end="535:48">QCOW2_DISCARD_REQUEST</name></expr>]</index></name> <operator pos:start="535:51" pos:end="535:51">=</operator>

        <call pos:start="537:9" pos:end="539:47"><name pos:start="537:9" pos:end="537:25">qemu_opt_get_bool</name><argument_list pos:start="537:26" pos:end="539:47">(<argument pos:start="537:27" pos:end="537:30"><expr pos:start="537:27" pos:end="537:30"><name pos:start="537:27" pos:end="537:30">opts</name></expr></argument>, <argument pos:start="537:33" pos:end="537:57"><expr pos:start="537:33" pos:end="537:57"><name pos:start="537:33" pos:end="537:57">QCOW2_OPT_DISCARD_REQUEST</name></expr></argument>,

                          <argument pos:start="539:27" pos:end="539:46"><expr pos:start="539:27" pos:end="539:46"><name pos:start="539:27" pos:end="539:31">flags</name> <operator pos:start="539:33" pos:end="539:33">&amp;</operator> <name pos:start="539:35" pos:end="539:46">BDRV_O_UNMAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="541:5" pos:end="543:66"><expr pos:start="541:5" pos:end="543:65"><name pos:start="541:5" pos:end="541:50"><name pos:start="541:5" pos:end="541:5">s</name><operator pos:start="541:6" pos:end="541:7">-&gt;</operator><name pos:start="541:8" pos:end="541:26">discard_passthrough</name><index pos:start="541:27" pos:end="541:50">[<expr pos:start="541:28" pos:end="541:49"><name pos:start="541:28" pos:end="541:49">QCOW2_DISCARD_SNAPSHOT</name></expr>]</index></name> <operator pos:start="541:52" pos:end="541:52">=</operator>

        <call pos:start="543:9" pos:end="543:65"><name pos:start="543:9" pos:end="543:25">qemu_opt_get_bool</name><argument_list pos:start="543:26" pos:end="543:65">(<argument pos:start="543:27" pos:end="543:30"><expr pos:start="543:27" pos:end="543:30"><name pos:start="543:27" pos:end="543:30">opts</name></expr></argument>, <argument pos:start="543:33" pos:end="543:58"><expr pos:start="543:33" pos:end="543:58"><name pos:start="543:33" pos:end="543:58">QCOW2_OPT_DISCARD_SNAPSHOT</name></expr></argument>, <argument pos:start="543:61" pos:end="543:64"><expr pos:start="543:61" pos:end="543:64"><name pos:start="543:61" pos:end="543:64">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="545:5" pos:end="547:64"><expr pos:start="545:5" pos:end="547:63"><name pos:start="545:5" pos:end="545:47"><name pos:start="545:5" pos:end="545:5">s</name><operator pos:start="545:6" pos:end="545:7">-&gt;</operator><name pos:start="545:8" pos:end="545:26">discard_passthrough</name><index pos:start="545:27" pos:end="545:47">[<expr pos:start="545:28" pos:end="545:46"><name pos:start="545:28" pos:end="545:46">QCOW2_DISCARD_OTHER</name></expr>]</index></name> <operator pos:start="545:49" pos:end="545:49">=</operator>

        <call pos:start="547:9" pos:end="547:63"><name pos:start="547:9" pos:end="547:25">qemu_opt_get_bool</name><argument_list pos:start="547:26" pos:end="547:63">(<argument pos:start="547:27" pos:end="547:30"><expr pos:start="547:27" pos:end="547:30"><name pos:start="547:27" pos:end="547:30">opts</name></expr></argument>, <argument pos:start="547:33" pos:end="547:55"><expr pos:start="547:33" pos:end="547:55"><name pos:start="547:33" pos:end="547:55">QCOW2_OPT_DISCARD_OTHER</name></expr></argument>, <argument pos:start="547:58" pos:end="547:62"><expr pos:start="547:58" pos:end="547:62"><name pos:start="547:58" pos:end="547:62">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="551:5" pos:end="551:72"><expr pos:start="551:5" pos:end="551:71"><name pos:start="551:5" pos:end="551:21">opt_overlap_check</name> <operator pos:start="551:23" pos:end="551:23">=</operator> <ternary pos:start="551:25" pos:end="551:71"><condition pos:start="551:25" pos:end="551:61"><expr pos:start="551:25" pos:end="551:59"><call pos:start="551:25" pos:end="551:59"><name pos:start="551:25" pos:end="551:36">qemu_opt_get</name><argument_list pos:start="551:37" pos:end="551:59">(<argument pos:start="551:38" pos:end="551:41"><expr pos:start="551:38" pos:end="551:41"><name pos:start="551:38" pos:end="551:41">opts</name></expr></argument>, <argument pos:start="551:44" pos:end="551:58"><expr pos:start="551:44" pos:end="551:58"><literal type="string" pos:start="551:44" pos:end="551:58">"overlap-check"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then/><else pos:start="551:62" pos:end="551:71">: <expr pos:start="551:64" pos:end="551:71"><literal type="string" pos:start="551:64" pos:end="551:71">"cached"</literal></expr></else></ternary></expr>;</expr_stmt>

    <if_stmt pos:start="553:5" pos:end="583:5"><if pos:start="553:5" pos:end="557:5">if <condition pos:start="553:8" pos:end="553:43">(<expr pos:start="553:9" pos:end="553:42"><operator pos:start="553:9" pos:end="553:9">!</operator><call pos:start="553:10" pos:end="553:42"><name pos:start="553:10" pos:end="553:15">strcmp</name><argument_list pos:start="553:16" pos:end="553:42">(<argument pos:start="553:17" pos:end="553:33"><expr pos:start="553:17" pos:end="553:33"><name pos:start="553:17" pos:end="553:33">opt_overlap_check</name></expr></argument>, <argument pos:start="553:36" pos:end="553:41"><expr pos:start="553:36" pos:end="553:41"><literal type="string" pos:start="553:36" pos:end="553:41">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="553:45" pos:end="557:5">{<block_content pos:start="555:9" pos:end="555:35">

        <expr_stmt pos:start="555:9" pos:end="555:35"><expr pos:start="555:9" pos:end="555:34"><name pos:start="555:9" pos:end="555:30">overlap_check_template</name> <operator pos:start="555:32" pos:end="555:32">=</operator> <literal type="number" pos:start="555:34" pos:end="555:34">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="557:7" pos:end="561:5">else if <condition pos:start="557:15" pos:end="557:54">(<expr pos:start="557:16" pos:end="557:53"><operator pos:start="557:16" pos:end="557:16">!</operator><call pos:start="557:17" pos:end="557:53"><name pos:start="557:17" pos:end="557:22">strcmp</name><argument_list pos:start="557:23" pos:end="557:53">(<argument pos:start="557:24" pos:end="557:40"><expr pos:start="557:24" pos:end="557:40"><name pos:start="557:24" pos:end="557:40">opt_overlap_check</name></expr></argument>, <argument pos:start="557:43" pos:end="557:52"><expr pos:start="557:43" pos:end="557:52"><literal type="string" pos:start="557:43" pos:end="557:52">"constant"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="557:56" pos:end="561:5">{<block_content pos:start="559:9" pos:end="559:51">

        <expr_stmt pos:start="559:9" pos:end="559:51"><expr pos:start="559:9" pos:end="559:50"><name pos:start="559:9" pos:end="559:30">overlap_check_template</name> <operator pos:start="559:32" pos:end="559:32">=</operator> <name pos:start="559:34" pos:end="559:50">QCOW2_OL_CONSTANT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="561:7" pos:end="565:5">else if <condition pos:start="561:15" pos:end="561:52">(<expr pos:start="561:16" pos:end="561:51"><operator pos:start="561:16" pos:end="561:16">!</operator><call pos:start="561:17" pos:end="561:51"><name pos:start="561:17" pos:end="561:22">strcmp</name><argument_list pos:start="561:23" pos:end="561:51">(<argument pos:start="561:24" pos:end="561:40"><expr pos:start="561:24" pos:end="561:40"><name pos:start="561:24" pos:end="561:40">opt_overlap_check</name></expr></argument>, <argument pos:start="561:43" pos:end="561:50"><expr pos:start="561:43" pos:end="561:50"><literal type="string" pos:start="561:43" pos:end="561:50">"cached"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="561:54" pos:end="565:5">{<block_content pos:start="563:9" pos:end="563:49">

        <expr_stmt pos:start="563:9" pos:end="563:49"><expr pos:start="563:9" pos:end="563:48"><name pos:start="563:9" pos:end="563:30">overlap_check_template</name> <operator pos:start="563:32" pos:end="563:32">=</operator> <name pos:start="563:34" pos:end="563:48">QCOW2_OL_CACHED</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="565:7" pos:end="569:5">else if <condition pos:start="565:15" pos:end="565:49">(<expr pos:start="565:16" pos:end="565:48"><operator pos:start="565:16" pos:end="565:16">!</operator><call pos:start="565:17" pos:end="565:48"><name pos:start="565:17" pos:end="565:22">strcmp</name><argument_list pos:start="565:23" pos:end="565:48">(<argument pos:start="565:24" pos:end="565:40"><expr pos:start="565:24" pos:end="565:40"><name pos:start="565:24" pos:end="565:40">opt_overlap_check</name></expr></argument>, <argument pos:start="565:43" pos:end="565:47"><expr pos:start="565:43" pos:end="565:47"><literal type="string" pos:start="565:43" pos:end="565:47">"all"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="565:51" pos:end="569:5">{<block_content pos:start="567:9" pos:end="567:46">

        <expr_stmt pos:start="567:9" pos:end="567:46"><expr pos:start="567:9" pos:end="567:45"><name pos:start="567:9" pos:end="567:30">overlap_check_template</name> <operator pos:start="567:32" pos:end="567:32">=</operator> <name pos:start="567:34" pos:end="567:45">QCOW2_OL_ALL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="569:7" pos:end="583:5">else <block pos:start="569:12" pos:end="583:5">{<block_content pos:start="571:9" pos:end="581:18">

        <expr_stmt pos:start="571:9" pos:end="575:69"><expr pos:start="571:9" pos:end="575:68"><call pos:start="571:9" pos:end="575:68"><name pos:start="571:9" pos:end="571:18">error_setg</name><argument_list pos:start="571:19" pos:end="575:68">(<argument pos:start="571:20" pos:end="571:23"><expr pos:start="571:20" pos:end="571:23"><name pos:start="571:20" pos:end="571:23">errp</name></expr></argument>, <argument pos:start="571:26" pos:end="575:48"><expr pos:start="571:26" pos:end="575:48"><literal type="string" pos:start="571:26" pos:end="571:67">"Unsupported value '%s' for qcow2 option "</literal>

                   <literal type="string" pos:start="573:20" pos:end="573:75">"'overlap-check'. Allowed are either of the following: "</literal>

                   <literal type="string" pos:start="575:20" pos:end="575:48">"none, constant, cached, all"</literal></expr></argument>, <argument pos:start="575:51" pos:end="575:67"><expr pos:start="575:51" pos:end="575:67"><name pos:start="575:51" pos:end="575:67">opt_overlap_check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:28"><expr pos:start="577:9" pos:end="577:27"><call pos:start="577:9" pos:end="577:27"><name pos:start="577:9" pos:end="577:21">qemu_opts_del</name><argument_list pos:start="577:22" pos:end="577:27">(<argument pos:start="577:23" pos:end="577:26"><expr pos:start="577:23" pos:end="577:26"><name pos:start="577:23" pos:end="577:26">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="579:9" pos:end="579:22"><expr pos:start="579:9" pos:end="579:21"><name pos:start="579:9" pos:end="579:11">ret</name> <operator pos:start="579:13" pos:end="579:13">=</operator> <operator pos:start="579:15" pos:end="579:15">-</operator><name pos:start="579:16" pos:end="579:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="581:9" pos:end="581:18">goto <name pos:start="581:14" pos:end="581:17">fail</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="587:5" pos:end="587:25"><expr pos:start="587:5" pos:end="587:24"><name pos:start="587:5" pos:end="587:20"><name pos:start="587:5" pos:end="587:5">s</name><operator pos:start="587:6" pos:end="587:7">-&gt;</operator><name pos:start="587:8" pos:end="587:20">overlap_check</name></name> <operator pos:start="587:22" pos:end="587:22">=</operator> <literal type="number" pos:start="587:24" pos:end="587:24">0</literal></expr>;</expr_stmt>

    <for pos:start="589:5" pos:end="601:5">for <control pos:start="589:9" pos:end="589:44">(<init pos:start="589:10" pos:end="589:15"><expr pos:start="589:10" pos:end="589:14"><name pos:start="589:10" pos:end="589:10">i</name> <operator pos:start="589:12" pos:end="589:12">=</operator> <literal type="number" pos:start="589:14" pos:end="589:14">0</literal></expr>;</init> <condition pos:start="589:17" pos:end="589:39"><expr pos:start="589:17" pos:end="589:38"><name pos:start="589:17" pos:end="589:17">i</name> <operator pos:start="589:19" pos:end="589:19">&lt;</operator> <name pos:start="589:21" pos:end="589:38">QCOW2_OL_MAX_BITNR</name></expr>;</condition> <incr pos:start="589:41" pos:end="589:43"><expr pos:start="589:41" pos:end="589:43"><name pos:start="589:41" pos:end="589:41">i</name><operator pos:start="589:42" pos:end="589:43">++</operator></expr></incr>)</control> <block pos:start="589:46" pos:end="601:5">{<block_content pos:start="595:9" pos:end="599:70">

        <comment type="block" pos:start="591:9" pos:end="593:63">/* overlap-check defines a template bitmask, but every flag may be

         * overwritten through the associated boolean option */</comment>

        <expr_stmt pos:start="595:9" pos:end="599:70"><expr pos:start="595:9" pos:end="599:69"><name pos:start="595:9" pos:end="595:24"><name pos:start="595:9" pos:end="595:9">s</name><operator pos:start="595:10" pos:end="595:11">-&gt;</operator><name pos:start="595:12" pos:end="595:24">overlap_check</name></name> <operator pos:start="595:26" pos:end="595:27">|=</operator>

            <call pos:start="597:13" pos:end="599:64"><name pos:start="597:13" pos:end="597:29">qemu_opt_get_bool</name><argument_list pos:start="597:30" pos:end="599:64">(<argument pos:start="597:31" pos:end="597:34"><expr pos:start="597:31" pos:end="597:34"><name pos:start="597:31" pos:end="597:34">opts</name></expr></argument>, <argument pos:start="597:37" pos:end="597:64"><expr pos:start="597:37" pos:end="597:64"><name pos:start="597:37" pos:end="597:64"><name pos:start="597:37" pos:end="597:61">overlap_bool_option_names</name><index pos:start="597:62" pos:end="597:64">[<expr pos:start="597:63" pos:end="597:63"><name pos:start="597:63" pos:end="597:63">i</name></expr>]</index></name></expr></argument>,

                              <argument pos:start="599:31" pos:end="599:63"><expr pos:start="599:31" pos:end="599:63"><name pos:start="599:31" pos:end="599:52">overlap_check_template</name> <operator pos:start="599:54" pos:end="599:54">&amp;</operator> <operator pos:start="599:56" pos:end="599:56">(</operator><literal type="number" pos:start="599:57" pos:end="599:57">1</literal> <operator pos:start="599:59" pos:end="599:60">&lt;&lt;</operator> <name pos:start="599:62" pos:end="599:62">i</name><operator pos:start="599:63" pos:end="599:63">)</operator></expr></argument>)</argument_list></call> <operator pos:start="599:66" pos:end="599:67">&lt;&lt;</operator> <name pos:start="599:69" pos:end="599:69">i</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="605:5" pos:end="605:24"><expr pos:start="605:5" pos:end="605:23"><call pos:start="605:5" pos:end="605:23"><name pos:start="605:5" pos:end="605:17">qemu_opts_del</name><argument_list pos:start="605:18" pos:end="605:23">(<argument pos:start="605:19" pos:end="605:22"><expr pos:start="605:19" pos:end="605:22"><name pos:start="605:19" pos:end="605:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="609:5" pos:end="624:0"><if pos:start="609:5" pos:end="624:0">if <condition pos:start="609:8" pos:end="609:53">(<expr pos:start="609:9" pos:end="609:52"><name pos:start="609:9" pos:end="609:29"><name pos:start="609:9" pos:end="609:9">s</name><operator pos:start="609:10" pos:end="609:11">-&gt;</operator><name pos:start="609:12" pos:end="609:29">use_lazy_refcounts</name></name> <operator pos:start="609:31" pos:end="609:32">&amp;&amp;</operator> <name pos:start="609:34" pos:end="609:48"><name pos:start="609:34" pos:end="609:34">s</name><operator pos:start="609:35" pos:end="609:36">-&gt;</operator><name pos:start="609:37" pos:end="609:48">qcow_version</name></name> <operator pos:start="609:50" pos:end="609:50">&lt;</operator> <literal type="number" pos:start="609:52" pos:end="609:52">3</literal></expr>)</condition> <block pos:start="609:55" pos:end="624:0">{<block_content pos:start="611:9" pos:end="617:18">

        <expr_stmt pos:start="611:9" pos:end="613:51"><expr pos:start="611:9" pos:end="613:50"><call pos:start="611:9" pos:end="613:50"><name pos:start="611:9" pos:end="611:18">error_setg</name><argument_list pos:start="611:19" pos:end="613:50">(<argument pos:start="611:20" pos:end="611:23"><expr pos:start="611:20" pos:end="611:23"><name pos:start="611:20" pos:end="611:23">errp</name></expr></argument>, <argument pos:start="611:26" pos:end="613:49"><expr pos:start="611:26" pos:end="613:49"><literal type="string" pos:start="611:26" pos:end="611:78">"Lazy refcounts require a qcow2 image with at least "</literal>

                   <literal type="string" pos:start="613:20" pos:end="613:49">"qemu 1.1 compatibility level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="615:9" pos:end="615:22"><expr pos:start="615:9" pos:end="615:21"><name pos:start="615:9" pos:end="615:11">ret</name> <operator pos:start="615:13" pos:end="615:13">=</operator> <operator pos:start="615:15" pos:end="615:15">-</operator><name pos:start="615:16" pos:end="615:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="617:9" pos:end="617:18">goto <name pos:start="617:14" pos:end="617:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="623:1" pos:end="623:18">#<cpp:directive pos:start="623:2" pos:end="623:6">ifdef</cpp:directive> <name pos:start="623:8" pos:end="623:18">DEBUG_ALLOC</name></cpp:ifdef>

    <block pos:start="625:5" pos:end="634:0">{<block_content pos:start="627:9" pos:end="629:46">

        <decl_stmt pos:start="627:9" pos:end="627:37"><decl pos:start="627:9" pos:end="627:36"><type pos:start="627:9" pos:end="627:23"><name pos:start="627:9" pos:end="627:23">BdrvCheckResult</name></type> <name pos:start="627:25" pos:end="627:30">result</name> <init pos:start="627:32" pos:end="627:36">= <expr pos:start="627:34" pos:end="627:36"><block pos:start="627:34" pos:end="627:36">{<expr pos:start="627:35" pos:end="627:35"><literal type="number" pos:start="627:35" pos:end="627:35">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="629:9" pos:end="629:46"><expr pos:start="629:9" pos:end="629:45"><call pos:start="629:9" pos:end="629:45"><name pos:start="629:9" pos:end="629:29">qcow2_check_refcounts</name><argument_list pos:start="629:30" pos:end="629:45">(<argument pos:start="629:31" pos:end="629:32"><expr pos:start="629:31" pos:end="629:32"><name pos:start="629:31" pos:end="629:32">bs</name></expr></argument>, <argument pos:start="629:35" pos:end="629:41"><expr pos:start="629:35" pos:end="629:41"><operator pos:start="629:35" pos:end="629:35">&amp;</operator><name pos:start="629:36" pos:end="629:41">result</name></expr></argument>, <argument pos:start="629:44" pos:end="629:44"><expr pos:start="629:44" pos:end="629:44"><literal type="number" pos:start="629:44" pos:end="629:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="633:1" pos:end="633:6">#<cpp:directive pos:start="633:2" pos:end="633:6">endif</cpp:directive></cpp:endif>

    <return pos:start="635:5" pos:end="635:15">return <expr pos:start="635:12" pos:end="635:14"><name pos:start="635:12" pos:end="635:14">ret</name></expr>;</return>



 <label pos:start="639:2" pos:end="639:6"><name pos:start="639:2" pos:end="639:5">fail</name>:</label>

    <expr_stmt pos:start="641:5" pos:end="641:37"><expr pos:start="641:5" pos:end="641:36"><call pos:start="641:5" pos:end="641:36"><name pos:start="641:5" pos:end="641:10">g_free</name><argument_list pos:start="641:11" pos:end="641:36">(<argument pos:start="641:12" pos:end="641:35"><expr pos:start="641:12" pos:end="641:35"><name pos:start="641:12" pos:end="641:35"><name pos:start="641:12" pos:end="641:12">s</name><operator pos:start="641:13" pos:end="641:14">-&gt;</operator><name pos:start="641:15" pos:end="641:35">unknown_header_fields</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="643:5" pos:end="643:35"><expr pos:start="643:5" pos:end="643:34"><call pos:start="643:5" pos:end="643:34"><name pos:start="643:5" pos:end="643:30">cleanup_unknown_header_ext</name><argument_list pos:start="643:31" pos:end="643:34">(<argument pos:start="643:32" pos:end="643:33"><expr pos:start="643:32" pos:end="643:33"><name pos:start="643:32" pos:end="643:33">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="645:5" pos:end="645:29"><expr pos:start="645:5" pos:end="645:28"><call pos:start="645:5" pos:end="645:28"><name pos:start="645:5" pos:end="645:24">qcow2_free_snapshots</name><argument_list pos:start="645:25" pos:end="645:28">(<argument pos:start="645:26" pos:end="645:27"><expr pos:start="645:26" pos:end="645:27"><name pos:start="645:26" pos:end="645:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="647:5" pos:end="647:29"><expr pos:start="647:5" pos:end="647:28"><call pos:start="647:5" pos:end="647:28"><name pos:start="647:5" pos:end="647:24">qcow2_refcount_close</name><argument_list pos:start="647:25" pos:end="647:28">(<argument pos:start="647:26" pos:end="647:27"><expr pos:start="647:26" pos:end="647:27"><name pos:start="647:26" pos:end="647:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="649:5" pos:end="649:24"><expr pos:start="649:5" pos:end="649:23"><call pos:start="649:5" pos:end="649:23"><name pos:start="649:5" pos:end="649:10">g_free</name><argument_list pos:start="649:11" pos:end="649:23">(<argument pos:start="649:12" pos:end="649:22"><expr pos:start="649:12" pos:end="649:22"><name pos:start="649:12" pos:end="649:22"><name pos:start="649:12" pos:end="649:12">s</name><operator pos:start="649:13" pos:end="649:14">-&gt;</operator><name pos:start="649:15" pos:end="649:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="651:5" pos:end="651:66">/* else pre-write overlap checks in cache_destroy may crash */</comment>

    <expr_stmt pos:start="653:5" pos:end="653:23"><expr pos:start="653:5" pos:end="653:22"><name pos:start="653:5" pos:end="653:15"><name pos:start="653:5" pos:end="653:5">s</name><operator pos:start="653:6" pos:end="653:7">-&gt;</operator><name pos:start="653:8" pos:end="653:15">l1_table</name></name> <operator pos:start="653:17" pos:end="653:17">=</operator> <name pos:start="653:19" pos:end="653:22">NULL</name></expr>;</expr_stmt>

    <if_stmt pos:start="655:5" pos:end="659:5"><if pos:start="655:5" pos:end="659:5">if <condition pos:start="655:8" pos:end="655:26">(<expr pos:start="655:9" pos:end="655:25"><name pos:start="655:9" pos:end="655:25"><name pos:start="655:9" pos:end="655:9">s</name><operator pos:start="655:10" pos:end="655:11">-&gt;</operator><name pos:start="655:12" pos:end="655:25">l2_table_cache</name></name></expr>)</condition> <block pos:start="655:28" pos:end="659:5">{<block_content pos:start="657:9" pos:end="657:51">

        <expr_stmt pos:start="657:9" pos:end="657:51"><expr pos:start="657:9" pos:end="657:50"><call pos:start="657:9" pos:end="657:50"><name pos:start="657:9" pos:end="657:27">qcow2_cache_destroy</name><argument_list pos:start="657:28" pos:end="657:50">(<argument pos:start="657:29" pos:end="657:30"><expr pos:start="657:29" pos:end="657:30"><name pos:start="657:29" pos:end="657:30">bs</name></expr></argument>, <argument pos:start="657:33" pos:end="657:49"><expr pos:start="657:33" pos:end="657:49"><name pos:start="657:33" pos:end="657:49"><name pos:start="657:33" pos:end="657:33">s</name><operator pos:start="657:34" pos:end="657:35">-&gt;</operator><name pos:start="657:36" pos:end="657:49">l2_table_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="661:5" pos:end="661:29"><expr pos:start="661:5" pos:end="661:28"><call pos:start="661:5" pos:end="661:28"><name pos:start="661:5" pos:end="661:10">g_free</name><argument_list pos:start="661:11" pos:end="661:28">(<argument pos:start="661:12" pos:end="661:27"><expr pos:start="661:12" pos:end="661:27"><name pos:start="661:12" pos:end="661:27"><name pos:start="661:12" pos:end="661:12">s</name><operator pos:start="661:13" pos:end="661:14">-&gt;</operator><name pos:start="661:15" pos:end="661:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="663:5" pos:end="663:32"><expr pos:start="663:5" pos:end="663:31"><call pos:start="663:5" pos:end="663:31"><name pos:start="663:5" pos:end="663:14">qemu_vfree</name><argument_list pos:start="663:15" pos:end="663:31">(<argument pos:start="663:16" pos:end="663:30"><expr pos:start="663:16" pos:end="663:30"><name pos:start="663:16" pos:end="663:30"><name pos:start="663:16" pos:end="663:16">s</name><operator pos:start="663:17" pos:end="663:18">-&gt;</operator><name pos:start="663:19" pos:end="663:30">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="665:5" pos:end="665:15">return <expr pos:start="665:12" pos:end="665:14"><name pos:start="665:12" pos:end="665:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
