<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22422.c" pos:tabs="8"><function pos:start="1:1" pos:end="1349:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:22">decode_opc</name><parameter_list pos:start="1:23" pos:end="1:60">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:40"><name pos:start="1:24" pos:end="1:35">CPUMIPSState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:59"><decl pos:start="1:43" pos:end="1:59"><type pos:start="1:43" pos:end="1:59"><name pos:start="1:43" pos:end="1:54">DisasContext</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:59">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1349:1">{<block_content pos:start="5:5" pos:end="1347:5">

    <decl_stmt pos:start="5:5" pos:end="5:19"><decl pos:start="5:5" pos:end="5:18"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int32_t</name></type> <name pos:start="5:13" pos:end="5:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">rs</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">rt</name></decl>, <decl pos:start="7:17" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:18">rd</name></decl>, <decl pos:start="7:21" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:22">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:15">op</name></decl>, <decl pos:start="9:18" pos:end="9:20"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:20">op1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int16_t</name></type> <name pos:start="11:13" pos:end="11:15">imm</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:55">/* make sure instructions are on a word boundary */</comment>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:22">(<expr pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:11">ctx</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:15">pc</name></name> <operator pos:start="17:17" pos:end="17:17">&amp;</operator> <literal type="number" pos:start="17:19" pos:end="17:21">0x3</literal></expr>)</condition> <block pos:start="17:24" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:15">

        <expr_stmt pos:start="19:9" pos:end="19:36"><expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:11">env</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:25">CP0_BadVAddr</name></name> <operator pos:start="19:27" pos:end="19:27">=</operator> <name pos:start="19:29" pos:end="19:35"><name pos:start="19:29" pos:end="19:31">ctx</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:35">pc</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:67"><expr pos:start="21:9" pos:end="21:66"><call pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:30">generate_exception_err</name><argument_list pos:start="21:31" pos:end="21:66">(<argument pos:start="21:32" pos:end="21:34"><expr pos:start="21:32" pos:end="21:34"><name pos:start="21:32" pos:end="21:34">ctx</name></expr></argument>, <argument pos:start="21:37" pos:end="21:45"><expr pos:start="21:37" pos:end="21:45"><name pos:start="21:37" pos:end="21:45">EXCP_AdEL</name></expr></argument>, <argument pos:start="21:48" pos:end="21:65"><expr pos:start="21:48" pos:end="21:65"><name pos:start="21:48" pos:end="21:65">EXCP_INST_NOTAVAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:39">/* Handle blikely not taken case */</comment>

    <if_stmt pos:start="31:5" pos:end="45:5"><if pos:start="31:5" pos:end="45:5">if <condition pos:start="31:8" pos:end="31:63">(<expr pos:start="31:9" pos:end="31:62"><operator pos:start="31:9" pos:end="31:9">(</operator><name pos:start="31:10" pos:end="31:20"><name pos:start="31:10" pos:end="31:12">ctx</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:20">hflags</name></name> <operator pos:start="31:22" pos:end="31:22">&amp;</operator> <name pos:start="31:24" pos:end="31:44">MIPS_HFLAG_BMASK_BASE</name><operator pos:start="31:45" pos:end="31:45">)</operator> <operator pos:start="31:47" pos:end="31:48">==</operator> <name pos:start="31:50" pos:end="31:62">MIPS_HFLAG_BL</name></expr>)</condition> <block pos:start="31:65" pos:end="45:5">{<block_content pos:start="33:9" pos:end="43:26">

        <decl_stmt pos:start="33:9" pos:end="33:39"><decl pos:start="33:9" pos:end="33:38"><type pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:16">TCGLabel</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:20">l1</name> <init pos:start="33:22" pos:end="33:38">= <expr pos:start="33:24" pos:end="33:38"><call pos:start="33:24" pos:end="33:38"><name pos:start="33:24" pos:end="33:36">gen_new_label</name><argument_list pos:start="33:37" pos:end="33:38">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:54"><expr pos:start="37:9" pos:end="37:53"><call pos:start="37:9" pos:end="37:53"><name pos:start="37:9" pos:end="37:26">tcg_gen_brcondi_tl</name><argument_list pos:start="37:27" pos:end="37:53">(<argument pos:start="37:28" pos:end="37:38"><expr pos:start="37:28" pos:end="37:38"><name pos:start="37:28" pos:end="37:38">TCG_COND_NE</name></expr></argument>, <argument pos:start="37:41" pos:end="37:45"><expr pos:start="37:41" pos:end="37:45"><name pos:start="37:41" pos:end="37:45">bcond</name></expr></argument>, <argument pos:start="37:48" pos:end="37:48"><expr pos:start="37:48" pos:end="37:48"><literal type="number" pos:start="37:48" pos:end="37:48">0</literal></expr></argument>, <argument pos:start="37:51" pos:end="37:52"><expr pos:start="37:51" pos:end="37:52"><name pos:start="37:51" pos:end="37:52">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:66"><expr pos:start="39:9" pos:end="39:65"><call pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:24">tcg_gen_movi_i32</name><argument_list pos:start="39:25" pos:end="39:65">(<argument pos:start="39:26" pos:end="39:31"><expr pos:start="39:26" pos:end="39:31"><name pos:start="39:26" pos:end="39:31">hflags</name></expr></argument>, <argument pos:start="39:34" pos:end="39:64"><expr pos:start="39:34" pos:end="39:64"><name pos:start="39:34" pos:end="39:44"><name pos:start="39:34" pos:end="39:36">ctx</name><operator pos:start="39:37" pos:end="39:38">-&gt;</operator><name pos:start="39:39" pos:end="39:44">hflags</name></name> <operator pos:start="39:46" pos:end="39:46">&amp;</operator> <operator pos:start="39:48" pos:end="39:48">~</operator><name pos:start="39:49" pos:end="39:64">MIPS_HFLAG_BMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:41"><expr pos:start="41:9" pos:end="41:40"><call pos:start="41:9" pos:end="41:40"><name pos:start="41:9" pos:end="41:19">gen_goto_tb</name><argument_list pos:start="41:20" pos:end="41:40">(<argument pos:start="41:21" pos:end="41:23"><expr pos:start="41:21" pos:end="41:23"><name pos:start="41:21" pos:end="41:23">ctx</name></expr></argument>, <argument pos:start="41:26" pos:end="41:26"><expr pos:start="41:26" pos:end="41:26"><literal type="number" pos:start="41:26" pos:end="41:26">1</literal></expr></argument>, <argument pos:start="41:29" pos:end="41:39"><expr pos:start="41:29" pos:end="41:39"><name pos:start="41:29" pos:end="41:35"><name pos:start="41:29" pos:end="41:31">ctx</name><operator pos:start="41:32" pos:end="41:33">-&gt;</operator><name pos:start="41:34" pos:end="41:35">pc</name></name> <operator pos:start="41:37" pos:end="41:37">+</operator> <literal type="number" pos:start="41:39" pos:end="41:39">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:21">gen_set_label</name><argument_list pos:start="43:22" pos:end="43:25">(<argument pos:start="43:23" pos:end="43:24"><expr pos:start="43:23" pos:end="43:24"><name pos:start="43:23" pos:end="43:24">l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:6">op</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="49:35"><name pos:start="49:10" pos:end="49:22">MASK_OP_MAJOR</name><argument_list pos:start="49:23" pos:end="49:35">(<argument pos:start="49:24" pos:end="49:34"><expr pos:start="49:24" pos:end="49:34"><name pos:start="49:24" pos:end="49:34"><name pos:start="49:24" pos:end="49:26">ctx</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:34">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:36"><expr pos:start="51:5" pos:end="51:35"><name pos:start="51:5" pos:end="51:6">rs</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <operator pos:start="51:10" pos:end="51:10">(</operator><name pos:start="51:11" pos:end="51:21"><name pos:start="51:11" pos:end="51:13">ctx</name><operator pos:start="51:14" pos:end="51:15">-&gt;</operator><name pos:start="51:16" pos:end="51:21">opcode</name></name> <operator pos:start="51:23" pos:end="51:24">&gt;&gt;</operator> <literal type="number" pos:start="51:26" pos:end="51:27">21</literal><operator pos:start="51:28" pos:end="51:28">)</operator> <operator pos:start="51:30" pos:end="51:30">&amp;</operator> <literal type="number" pos:start="51:32" pos:end="51:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:6">rt</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <operator pos:start="53:10" pos:end="53:10">(</operator><name pos:start="53:11" pos:end="53:21"><name pos:start="53:11" pos:end="53:13">ctx</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:21">opcode</name></name> <operator pos:start="53:23" pos:end="53:24">&gt;&gt;</operator> <literal type="number" pos:start="53:26" pos:end="53:27">16</literal><operator pos:start="53:28" pos:end="53:28">)</operator> <operator pos:start="53:30" pos:end="53:30">&amp;</operator> <literal type="number" pos:start="53:32" pos:end="53:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:36"><expr pos:start="55:5" pos:end="55:35"><name pos:start="55:5" pos:end="55:6">rd</name> <operator pos:start="55:8" pos:end="55:8">=</operator> <operator pos:start="55:10" pos:end="55:10">(</operator><name pos:start="55:11" pos:end="55:21"><name pos:start="55:11" pos:end="55:13">ctx</name><operator pos:start="55:14" pos:end="55:15">-&gt;</operator><name pos:start="55:16" pos:end="55:21">opcode</name></name> <operator pos:start="55:23" pos:end="55:24">&gt;&gt;</operator> <literal type="number" pos:start="55:26" pos:end="55:27">11</literal><operator pos:start="55:28" pos:end="55:28">)</operator> <operator pos:start="55:30" pos:end="55:30">&amp;</operator> <literal type="number" pos:start="55:32" pos:end="55:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:35"><expr pos:start="57:5" pos:end="57:34"><name pos:start="57:5" pos:end="57:6">sa</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <operator pos:start="57:10" pos:end="57:10">(</operator><name pos:start="57:11" pos:end="57:21"><name pos:start="57:11" pos:end="57:13">ctx</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">opcode</name></name> <operator pos:start="57:23" pos:end="57:24">&gt;&gt;</operator> <literal type="number" pos:start="57:26" pos:end="57:26">6</literal><operator pos:start="57:27" pos:end="57:27">)</operator> <operator pos:start="57:29" pos:end="57:29">&amp;</operator> <literal type="number" pos:start="57:31" pos:end="57:34">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:31"><expr pos:start="59:5" pos:end="59:30"><name pos:start="59:5" pos:end="59:7">imm</name> <operator pos:start="59:9" pos:end="59:9">=</operator> <operator pos:start="59:11" pos:end="59:11">(</operator><name pos:start="59:12" pos:end="59:18">int16_t</name><operator pos:start="59:19" pos:end="59:19">)</operator><name pos:start="59:20" pos:end="59:30"><name pos:start="59:20" pos:end="59:22">ctx</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:30">opcode</name></name></expr>;</expr_stmt>

    <switch pos:start="61:5" pos:end="1347:5">switch <condition pos:start="61:12" pos:end="61:15">(<expr pos:start="61:13" pos:end="61:14"><name pos:start="61:13" pos:end="61:14">op</name></expr>)</condition> <block pos:start="61:17" pos:end="1347:5">{<block_content pos:start="63:5" pos:end="1345:14">

    <case pos:start="63:5" pos:end="63:21">case <expr pos:start="63:10" pos:end="63:20"><name pos:start="63:10" pos:end="63:20">OPC_SPECIAL</name></expr>:</case>

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><call pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:26">decode_opc_special</name><argument_list pos:start="65:27" pos:end="65:36">(<argument pos:start="65:28" pos:end="65:30"><expr pos:start="65:28" pos:end="65:30"><name pos:start="65:28" pos:end="65:30">env</name></expr></argument>, <argument pos:start="65:33" pos:end="65:35"><expr pos:start="65:33" pos:end="65:35"><name pos:start="65:33" pos:end="65:35">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>

    <case pos:start="69:5" pos:end="69:22">case <expr pos:start="69:10" pos:end="69:21"><name pos:start="69:10" pos:end="69:21">OPC_SPECIAL2</name></expr>:</case>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><call pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:34">decode_opc_special2_legacy</name><argument_list pos:start="71:35" pos:end="71:44">(<argument pos:start="71:36" pos:end="71:38"><expr pos:start="71:36" pos:end="71:38"><name pos:start="71:36" pos:end="71:38">env</name></expr></argument>, <argument pos:start="71:41" pos:end="71:43"><expr pos:start="71:41" pos:end="71:43"><name pos:start="71:41" pos:end="71:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:22">case <expr pos:start="75:10" pos:end="75:21"><name pos:start="75:10" pos:end="75:21">OPC_SPECIAL3</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:38"><expr pos:start="77:9" pos:end="77:37"><call pos:start="77:9" pos:end="77:37"><name pos:start="77:9" pos:end="77:27">decode_opc_special3</name><argument_list pos:start="77:28" pos:end="77:37">(<argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">env</name></expr></argument>, <argument pos:start="77:34" pos:end="77:36"><expr pos:start="77:34" pos:end="77:36"><name pos:start="77:34" pos:end="77:36">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:20">case <expr pos:start="81:10" pos:end="81:19"><name pos:start="81:10" pos:end="81:19">OPC_REGIMM</name></expr>:</case>

        <expr_stmt pos:start="83:9" pos:end="83:39"><expr pos:start="83:9" pos:end="83:38"><name pos:start="83:9" pos:end="83:11">op1</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="83:38"><name pos:start="83:15" pos:end="83:25">MASK_REGIMM</name><argument_list pos:start="83:26" pos:end="83:38">(<argument pos:start="83:27" pos:end="83:37"><expr pos:start="83:27" pos:end="83:37"><name pos:start="83:27" pos:end="83:37"><name pos:start="83:27" pos:end="83:29">ctx</name><operator pos:start="83:30" pos:end="83:31">-&gt;</operator><name pos:start="83:32" pos:end="83:37">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="85:9" pos:end="221:9">switch <condition pos:start="85:16" pos:end="85:20">(<expr pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">op1</name></expr>)</condition> <block pos:start="85:22" pos:end="221:9">{<block_content pos:start="87:9" pos:end="219:18">

        <case pos:start="87:9" pos:end="87:23">case <expr pos:start="87:14" pos:end="87:22"><name pos:start="87:14" pos:end="87:22">OPC_BLTZL</name></expr>:</case> <comment type="block" pos:start="87:25" pos:end="87:45">/* REGIMM branches */</comment>

        <case pos:start="89:9" pos:end="89:23">case <expr pos:start="89:14" pos:end="89:22"><name pos:start="89:14" pos:end="89:22">OPC_BGEZL</name></expr>:</case>

        <case pos:start="91:9" pos:end="91:25">case <expr pos:start="91:14" pos:end="91:24"><name pos:start="91:14" pos:end="91:24">OPC_BLTZALL</name></expr>:</case>

        <case pos:start="93:9" pos:end="93:25">case <expr pos:start="93:14" pos:end="93:24"><name pos:start="93:14" pos:end="93:24">OPC_BGEZALL</name></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:39"><expr pos:start="95:13" pos:end="95:38"><call pos:start="95:13" pos:end="95:38"><name pos:start="95:13" pos:end="95:22">check_insn</name><argument_list pos:start="95:23" pos:end="95:38">(<argument pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">ctx</name></expr></argument>, <argument pos:start="95:29" pos:end="95:37"><expr pos:start="95:29" pos:end="95:37"><name pos:start="95:29" pos:end="95:37">ISA_MIPS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:54"><expr pos:start="97:13" pos:end="97:53"><call pos:start="97:13" pos:end="97:53"><name pos:start="97:13" pos:end="97:34">check_insn_opc_removed</name><argument_list pos:start="97:35" pos:end="97:53">(<argument pos:start="97:36" pos:end="97:38"><expr pos:start="97:36" pos:end="97:38"><name pos:start="97:36" pos:end="97:38">ctx</name></expr></argument>, <argument pos:start="97:41" pos:end="97:52"><expr pos:start="97:41" pos:end="97:52"><name pos:start="97:41" pos:end="97:52">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="99:13" pos:end="99:29">/* Fallthrough */</comment>

        <case pos:start="101:9" pos:end="101:22">case <expr pos:start="101:14" pos:end="101:21"><name pos:start="101:14" pos:end="101:21">OPC_BLTZ</name></expr>:</case>

        <case pos:start="103:9" pos:end="103:22">case <expr pos:start="103:14" pos:end="103:21"><name pos:start="103:14" pos:end="103:21">OPC_BGEZ</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:65"><expr pos:start="105:13" pos:end="105:64"><call pos:start="105:13" pos:end="105:64"><name pos:start="105:13" pos:end="105:30">gen_compute_branch</name><argument_list pos:start="105:31" pos:end="105:64">(<argument pos:start="105:32" pos:end="105:34"><expr pos:start="105:32" pos:end="105:34"><name pos:start="105:32" pos:end="105:34">ctx</name></expr></argument>, <argument pos:start="105:37" pos:end="105:39"><expr pos:start="105:37" pos:end="105:39"><name pos:start="105:37" pos:end="105:39">op1</name></expr></argument>, <argument pos:start="105:42" pos:end="105:42"><expr pos:start="105:42" pos:end="105:42"><literal type="number" pos:start="105:42" pos:end="105:42">4</literal></expr></argument>, <argument pos:start="105:45" pos:end="105:46"><expr pos:start="105:45" pos:end="105:46"><name pos:start="105:45" pos:end="105:46">rs</name></expr></argument>, <argument pos:start="105:49" pos:end="105:50"><expr pos:start="105:49" pos:end="105:50"><operator pos:start="105:49" pos:end="105:49">-</operator><literal type="number" pos:start="105:50" pos:end="105:50">1</literal></expr></argument>, <argument pos:start="105:53" pos:end="105:60"><expr pos:start="105:53" pos:end="105:60"><name pos:start="105:53" pos:end="105:55">imm</name> <operator pos:start="105:57" pos:end="105:58">&lt;&lt;</operator> <literal type="number" pos:start="105:60" pos:end="105:60">2</literal></expr></argument>, <argument pos:start="105:63" pos:end="105:63"><expr pos:start="105:63" pos:end="105:63"><literal type="number" pos:start="105:63" pos:end="105:63">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:24">case <expr pos:start="109:14" pos:end="109:23"><name pos:start="109:14" pos:end="109:23">OPC_BLTZAL</name></expr>:</case>

        <case pos:start="111:9" pos:end="111:24">case <expr pos:start="111:14" pos:end="111:23"><name pos:start="111:14" pos:end="111:23">OPC_BGEZAL</name></expr>:</case>

            <if_stmt pos:start="113:13" pos:end="131:13"><if pos:start="113:13" pos:end="127:13">if <condition pos:start="113:16" pos:end="113:47">(<expr pos:start="113:17" pos:end="113:46"><name pos:start="113:17" pos:end="113:31"><name pos:start="113:17" pos:end="113:19">ctx</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:31">insn_flags</name></name> <operator pos:start="113:33" pos:end="113:33">&amp;</operator> <name pos:start="113:35" pos:end="113:46">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="113:49" pos:end="127:13">{<block_content pos:start="115:17" pos:end="125:17">

                <if_stmt pos:start="115:17" pos:end="125:17"><if pos:start="115:17" pos:end="121:17">if <condition pos:start="115:20" pos:end="115:28">(<expr pos:start="115:21" pos:end="115:27"><name pos:start="115:21" pos:end="115:22">rs</name> <operator pos:start="115:24" pos:end="115:25">==</operator> <literal type="number" pos:start="115:27" pos:end="115:27">0</literal></expr>)</condition> <block pos:start="115:30" pos:end="121:17">{<block_content pos:start="119:21" pos:end="119:72">

                    <comment type="block" pos:start="117:21" pos:end="117:42">/* OPC_NAL, OPC_BAL */</comment>

                    <expr_stmt pos:start="119:21" pos:end="119:72"><expr pos:start="119:21" pos:end="119:71"><call pos:start="119:21" pos:end="119:71"><name pos:start="119:21" pos:end="119:38">gen_compute_branch</name><argument_list pos:start="119:39" pos:end="119:71">(<argument pos:start="119:40" pos:end="119:42"><expr pos:start="119:40" pos:end="119:42"><name pos:start="119:40" pos:end="119:42">ctx</name></expr></argument>, <argument pos:start="119:45" pos:end="119:47"><expr pos:start="119:45" pos:end="119:47"><name pos:start="119:45" pos:end="119:47">op1</name></expr></argument>, <argument pos:start="119:50" pos:end="119:50"><expr pos:start="119:50" pos:end="119:50"><literal type="number" pos:start="119:50" pos:end="119:50">4</literal></expr></argument>, <argument pos:start="119:53" pos:end="119:53"><expr pos:start="119:53" pos:end="119:53"><literal type="number" pos:start="119:53" pos:end="119:53">0</literal></expr></argument>, <argument pos:start="119:56" pos:end="119:57"><expr pos:start="119:56" pos:end="119:57"><operator pos:start="119:56" pos:end="119:56">-</operator><literal type="number" pos:start="119:57" pos:end="119:57">1</literal></expr></argument>, <argument pos:start="119:60" pos:end="119:67"><expr pos:start="119:60" pos:end="119:67"><name pos:start="119:60" pos:end="119:62">imm</name> <operator pos:start="119:64" pos:end="119:65">&lt;&lt;</operator> <literal type="number" pos:start="119:67" pos:end="119:67">2</literal></expr></argument>, <argument pos:start="119:70" pos:end="119:70"><expr pos:start="119:70" pos:end="119:70"><literal type="number" pos:start="119:70" pos:end="119:70">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="121:19" pos:end="125:17">else <block pos:start="121:24" pos:end="125:17">{<block_content pos:start="123:21" pos:end="123:57">

                    <expr_stmt pos:start="123:21" pos:end="123:57"><expr pos:start="123:21" pos:end="123:56"><call pos:start="123:21" pos:end="123:56"><name pos:start="123:21" pos:end="123:42">generate_exception_end</name><argument_list pos:start="123:43" pos:end="123:56">(<argument pos:start="123:44" pos:end="123:46"><expr pos:start="123:44" pos:end="123:46"><name pos:start="123:44" pos:end="123:46">ctx</name></expr></argument>, <argument pos:start="123:49" pos:end="123:55"><expr pos:start="123:49" pos:end="123:55"><name pos:start="123:49" pos:end="123:55">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="127:15" pos:end="131:13">else <block pos:start="127:20" pos:end="131:13">{<block_content pos:start="129:17" pos:end="129:69">

                <expr_stmt pos:start="129:17" pos:end="129:69"><expr pos:start="129:17" pos:end="129:68"><call pos:start="129:17" pos:end="129:68"><name pos:start="129:17" pos:end="129:34">gen_compute_branch</name><argument_list pos:start="129:35" pos:end="129:68">(<argument pos:start="129:36" pos:end="129:38"><expr pos:start="129:36" pos:end="129:38"><name pos:start="129:36" pos:end="129:38">ctx</name></expr></argument>, <argument pos:start="129:41" pos:end="129:43"><expr pos:start="129:41" pos:end="129:43"><name pos:start="129:41" pos:end="129:43">op1</name></expr></argument>, <argument pos:start="129:46" pos:end="129:46"><expr pos:start="129:46" pos:end="129:46"><literal type="number" pos:start="129:46" pos:end="129:46">4</literal></expr></argument>, <argument pos:start="129:49" pos:end="129:50"><expr pos:start="129:49" pos:end="129:50"><name pos:start="129:49" pos:end="129:50">rs</name></expr></argument>, <argument pos:start="129:53" pos:end="129:54"><expr pos:start="129:53" pos:end="129:54"><operator pos:start="129:53" pos:end="129:53">-</operator><literal type="number" pos:start="129:54" pos:end="129:54">1</literal></expr></argument>, <argument pos:start="129:57" pos:end="129:64"><expr pos:start="129:57" pos:end="129:64"><name pos:start="129:57" pos:end="129:59">imm</name> <operator pos:start="129:61" pos:end="129:62">&lt;&lt;</operator> <literal type="number" pos:start="129:64" pos:end="129:64">2</literal></expr></argument>, <argument pos:start="129:67" pos:end="129:67"><expr pos:start="129:67" pos:end="129:67"><literal type="number" pos:start="129:67" pos:end="129:67">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:35">case <expr pos:start="135:14" pos:end="135:34"><name pos:start="135:14" pos:end="135:21">OPC_TGEI</name> <operator pos:start="135:23" pos:end="135:25">...</operator> <name pos:start="135:27" pos:end="135:34">OPC_TEQI</name></expr>:</case> <comment type="block" pos:start="135:37" pos:end="135:54">/* REGIMM traps */</comment>

        <case pos:start="137:9" pos:end="137:22">case <expr pos:start="137:14" pos:end="137:21"><name pos:start="137:14" pos:end="137:21">OPC_TNEI</name></expr>:</case>

            <expr_stmt pos:start="139:13" pos:end="139:39"><expr pos:start="139:13" pos:end="139:38"><call pos:start="139:13" pos:end="139:38"><name pos:start="139:13" pos:end="139:22">check_insn</name><argument_list pos:start="139:23" pos:end="139:38">(<argument pos:start="139:24" pos:end="139:26"><expr pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">ctx</name></expr></argument>, <argument pos:start="139:29" pos:end="139:37"><expr pos:start="139:29" pos:end="139:37"><name pos:start="139:29" pos:end="139:37">ISA_MIPS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="141:13" pos:end="141:54"><expr pos:start="141:13" pos:end="141:53"><call pos:start="141:13" pos:end="141:53"><name pos:start="141:13" pos:end="141:34">check_insn_opc_removed</name><argument_list pos:start="141:35" pos:end="141:53">(<argument pos:start="141:36" pos:end="141:38"><expr pos:start="141:36" pos:end="141:38"><name pos:start="141:36" pos:end="141:38">ctx</name></expr></argument>, <argument pos:start="141:41" pos:end="141:52"><expr pos:start="141:41" pos:end="141:52"><name pos:start="141:41" pos:end="141:52">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:44"><expr pos:start="143:13" pos:end="143:43"><call pos:start="143:13" pos:end="143:43"><name pos:start="143:13" pos:end="143:20">gen_trap</name><argument_list pos:start="143:21" pos:end="143:43">(<argument pos:start="143:22" pos:end="143:24"><expr pos:start="143:22" pos:end="143:24"><name pos:start="143:22" pos:end="143:24">ctx</name></expr></argument>, <argument pos:start="143:27" pos:end="143:29"><expr pos:start="143:27" pos:end="143:29"><name pos:start="143:27" pos:end="143:29">op1</name></expr></argument>, <argument pos:start="143:32" pos:end="143:33"><expr pos:start="143:32" pos:end="143:33"><name pos:start="143:32" pos:end="143:33">rs</name></expr></argument>, <argument pos:start="143:36" pos:end="143:37"><expr pos:start="143:36" pos:end="143:37"><operator pos:start="143:36" pos:end="143:36">-</operator><literal type="number" pos:start="143:37" pos:end="143:37">1</literal></expr></argument>, <argument pos:start="143:40" pos:end="143:42"><expr pos:start="143:40" pos:end="143:42"><name pos:start="143:40" pos:end="143:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        <case pos:start="147:9" pos:end="147:24">case <expr pos:start="147:14" pos:end="147:23"><name pos:start="147:14" pos:end="147:23">OPC_SIGRIE</name></expr>:</case>

            <expr_stmt pos:start="149:13" pos:end="149:42"><expr pos:start="149:13" pos:end="149:41"><call pos:start="149:13" pos:end="149:41"><name pos:start="149:13" pos:end="149:22">check_insn</name><argument_list pos:start="149:23" pos:end="149:41">(<argument pos:start="149:24" pos:end="149:26"><expr pos:start="149:24" pos:end="149:26"><name pos:start="149:24" pos:end="149:26">ctx</name></expr></argument>, <argument pos:start="149:29" pos:end="149:40"><expr pos:start="149:29" pos:end="149:40"><name pos:start="149:29" pos:end="149:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:49"><expr pos:start="151:13" pos:end="151:48"><call pos:start="151:13" pos:end="151:48"><name pos:start="151:13" pos:end="151:34">generate_exception_end</name><argument_list pos:start="151:35" pos:end="151:48">(<argument pos:start="151:36" pos:end="151:38"><expr pos:start="151:36" pos:end="151:38"><name pos:start="151:36" pos:end="151:38">ctx</name></expr></argument>, <argument pos:start="151:41" pos:end="151:47"><expr pos:start="151:41" pos:end="151:47"><name pos:start="151:41" pos:end="151:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        <case pos:start="155:9" pos:end="155:23">case <expr pos:start="155:14" pos:end="155:22"><name pos:start="155:14" pos:end="155:22">OPC_SYNCI</name></expr>:</case>

            <expr_stmt pos:start="157:13" pos:end="157:42"><expr pos:start="157:13" pos:end="157:41"><call pos:start="157:13" pos:end="157:41"><name pos:start="157:13" pos:end="157:22">check_insn</name><argument_list pos:start="157:23" pos:end="157:41">(<argument pos:start="157:24" pos:end="157:26"><expr pos:start="157:24" pos:end="157:26"><name pos:start="157:24" pos:end="157:26">ctx</name></expr></argument>, <argument pos:start="157:29" pos:end="157:40"><expr pos:start="157:29" pos:end="157:40"><name pos:start="157:29" pos:end="157:40">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="159:13" pos:end="161:29">/* Break the TB to be able to sync copied instructions

               immediately */</comment>

            <expr_stmt pos:start="163:13" pos:end="163:34"><expr pos:start="163:13" pos:end="163:33"><name pos:start="163:13" pos:end="163:23"><name pos:start="163:13" pos:end="163:15">ctx</name><operator pos:start="163:16" pos:end="163:17">-&gt;</operator><name pos:start="163:18" pos:end="163:23">bstate</name></name> <operator pos:start="163:25" pos:end="163:25">=</operator> <name pos:start="163:27" pos:end="163:33">BS_STOP</name></expr>;</expr_stmt>

            <break pos:start="165:13" pos:end="165:18">break;</break>

        <case pos:start="167:9" pos:end="170:0">case <expr pos:start="167:14" pos:end="167:25"><name pos:start="167:14" pos:end="167:25">OPC_BPOSGE32</name></expr>:</case>    <comment type="block" pos:start="167:31" pos:end="167:51">/* MIPS DSP branch */</comment>

<cpp:if pos:start="169:1" pos:end="169:26">#<cpp:directive pos:start="169:2" pos:end="169:3">if</cpp:directive> <expr pos:start="169:5" pos:end="169:26"><call pos:start="169:5" pos:end="169:26"><name pos:start="169:5" pos:end="169:11">defined</name><argument_list pos:start="169:12" pos:end="169:26">(<argument pos:start="169:13" pos:end="169:25"><expr pos:start="169:13" pos:end="169:25"><name pos:start="169:13" pos:end="169:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="171:9" pos:end="174:0">case <expr pos:start="171:14" pos:end="171:25"><name pos:start="171:14" pos:end="171:25">OPC_BPOSGE64</name></expr>:</case>

<cpp:endif pos:start="173:1" pos:end="173:6">#<cpp:directive pos:start="173:2" pos:end="173:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="175:13" pos:end="175:27"><expr pos:start="175:13" pos:end="175:26"><call pos:start="175:13" pos:end="175:26"><name pos:start="175:13" pos:end="175:21">check_dsp</name><argument_list pos:start="175:22" pos:end="175:26">(<argument pos:start="175:23" pos:end="175:25"><expr pos:start="175:23" pos:end="175:25"><name pos:start="175:23" pos:end="175:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:74"><expr pos:start="177:13" pos:end="177:73"><call pos:start="177:13" pos:end="177:73"><name pos:start="177:13" pos:end="177:30">gen_compute_branch</name><argument_list pos:start="177:31" pos:end="177:73">(<argument pos:start="177:32" pos:end="177:34"><expr pos:start="177:32" pos:end="177:34"><name pos:start="177:32" pos:end="177:34">ctx</name></expr></argument>, <argument pos:start="177:37" pos:end="177:39"><expr pos:start="177:37" pos:end="177:39"><name pos:start="177:37" pos:end="177:39">op1</name></expr></argument>, <argument pos:start="177:42" pos:end="177:42"><expr pos:start="177:42" pos:end="177:42"><literal type="number" pos:start="177:42" pos:end="177:42">4</literal></expr></argument>, <argument pos:start="177:45" pos:end="177:46"><expr pos:start="177:45" pos:end="177:46"><operator pos:start="177:45" pos:end="177:45">-</operator><literal type="number" pos:start="177:46" pos:end="177:46">1</literal></expr></argument>, <argument pos:start="177:49" pos:end="177:50"><expr pos:start="177:49" pos:end="177:50"><operator pos:start="177:49" pos:end="177:49">-</operator><literal type="number" pos:start="177:50" pos:end="177:50">2</literal></expr></argument>, <argument pos:start="177:53" pos:end="177:69"><expr pos:start="177:53" pos:end="177:69"><operator pos:start="177:53" pos:end="177:53">(</operator><name pos:start="177:54" pos:end="177:60">int32_t</name><operator pos:start="177:61" pos:end="177:61">)</operator><name pos:start="177:62" pos:end="177:64">imm</name> <operator pos:start="177:66" pos:end="177:67">&lt;&lt;</operator> <literal type="number" pos:start="177:69" pos:end="177:69">2</literal></expr></argument>, <argument pos:start="177:72" pos:end="177:72"><expr pos:start="177:72" pos:end="177:72"><literal type="number" pos:start="177:72" pos:end="177:72">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="182:0">break;</break>

<cpp:if pos:start="181:1" pos:end="181:26">#<cpp:directive pos:start="181:2" pos:end="181:3">if</cpp:directive> <expr pos:start="181:5" pos:end="181:26"><call pos:start="181:5" pos:end="181:26"><name pos:start="181:5" pos:end="181:11">defined</name><argument_list pos:start="181:12" pos:end="181:26">(<argument pos:start="181:13" pos:end="181:25"><expr pos:start="181:13" pos:end="181:25"><name pos:start="181:13" pos:end="181:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="183:9" pos:end="183:22">case <expr pos:start="183:14" pos:end="183:21"><name pos:start="183:14" pos:end="183:21">OPC_DAHI</name></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:42"><expr pos:start="185:13" pos:end="185:41"><call pos:start="185:13" pos:end="185:41"><name pos:start="185:13" pos:end="185:22">check_insn</name><argument_list pos:start="185:23" pos:end="185:41">(<argument pos:start="185:24" pos:end="185:26"><expr pos:start="185:24" pos:end="185:26"><name pos:start="185:24" pos:end="185:26">ctx</name></expr></argument>, <argument pos:start="185:29" pos:end="185:40"><expr pos:start="185:29" pos:end="185:40"><name pos:start="185:29" pos:end="185:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:31"><expr pos:start="187:13" pos:end="187:30"><call pos:start="187:13" pos:end="187:30"><name pos:start="187:13" pos:end="187:25">check_mips_64</name><argument_list pos:start="187:26" pos:end="187:30">(<argument pos:start="187:27" pos:end="187:29"><expr pos:start="187:27" pos:end="187:29"><name pos:start="187:27" pos:end="187:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="189:13" pos:end="193:13"><if pos:start="189:13" pos:end="193:13">if <condition pos:start="189:16" pos:end="189:24">(<expr pos:start="189:17" pos:end="189:23"><name pos:start="189:17" pos:end="189:18">rs</name> <operator pos:start="189:20" pos:end="189:21">!=</operator> <literal type="number" pos:start="189:23" pos:end="189:23">0</literal></expr>)</condition> <block pos:start="189:26" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:78">

                <expr_stmt pos:start="191:17" pos:end="191:78"><expr pos:start="191:17" pos:end="191:77"><call pos:start="191:17" pos:end="191:77"><name pos:start="191:17" pos:end="191:31">tcg_gen_addi_tl</name><argument_list pos:start="191:32" pos:end="191:77">(<argument pos:start="191:33" pos:end="191:43"><expr pos:start="191:33" pos:end="191:43"><name pos:start="191:33" pos:end="191:43"><name pos:start="191:33" pos:end="191:39">cpu_gpr</name><index pos:start="191:40" pos:end="191:43">[<expr pos:start="191:41" pos:end="191:42"><name pos:start="191:41" pos:end="191:42">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="191:46" pos:end="191:56"><expr pos:start="191:46" pos:end="191:56"><name pos:start="191:46" pos:end="191:56"><name pos:start="191:46" pos:end="191:52">cpu_gpr</name><index pos:start="191:53" pos:end="191:56">[<expr pos:start="191:54" pos:end="191:55"><name pos:start="191:54" pos:end="191:55">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="191:59" pos:end="191:76"><expr pos:start="191:59" pos:end="191:76"><operator pos:start="191:59" pos:end="191:59">(</operator><name pos:start="191:60" pos:end="191:66">int64_t</name><operator pos:start="191:67" pos:end="191:67">)</operator><name pos:start="191:68" pos:end="191:70">imm</name> <operator pos:start="191:72" pos:end="191:73">&lt;&lt;</operator> <literal type="number" pos:start="191:75" pos:end="191:76">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="195:13" pos:end="195:18">break;</break>

        <case pos:start="197:9" pos:end="197:22">case <expr pos:start="197:14" pos:end="197:21"><name pos:start="197:14" pos:end="197:21">OPC_DATI</name></expr>:</case>

            <expr_stmt pos:start="199:13" pos:end="199:42"><expr pos:start="199:13" pos:end="199:41"><call pos:start="199:13" pos:end="199:41"><name pos:start="199:13" pos:end="199:22">check_insn</name><argument_list pos:start="199:23" pos:end="199:41">(<argument pos:start="199:24" pos:end="199:26"><expr pos:start="199:24" pos:end="199:26"><name pos:start="199:24" pos:end="199:26">ctx</name></expr></argument>, <argument pos:start="199:29" pos:end="199:40"><expr pos:start="199:29" pos:end="199:40"><name pos:start="199:29" pos:end="199:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:31"><expr pos:start="201:13" pos:end="201:30"><call pos:start="201:13" pos:end="201:30"><name pos:start="201:13" pos:end="201:25">check_mips_64</name><argument_list pos:start="201:26" pos:end="201:30">(<argument pos:start="201:27" pos:end="201:29"><expr pos:start="201:27" pos:end="201:29"><name pos:start="201:27" pos:end="201:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="203:13" pos:end="207:13"><if pos:start="203:13" pos:end="207:13">if <condition pos:start="203:16" pos:end="203:24">(<expr pos:start="203:17" pos:end="203:23"><name pos:start="203:17" pos:end="203:18">rs</name> <operator pos:start="203:20" pos:end="203:21">!=</operator> <literal type="number" pos:start="203:23" pos:end="203:23">0</literal></expr>)</condition> <block pos:start="203:26" pos:end="207:13">{<block_content pos:start="205:17" pos:end="205:78">

                <expr_stmt pos:start="205:17" pos:end="205:78"><expr pos:start="205:17" pos:end="205:77"><call pos:start="205:17" pos:end="205:77"><name pos:start="205:17" pos:end="205:31">tcg_gen_addi_tl</name><argument_list pos:start="205:32" pos:end="205:77">(<argument pos:start="205:33" pos:end="205:43"><expr pos:start="205:33" pos:end="205:43"><name pos:start="205:33" pos:end="205:43"><name pos:start="205:33" pos:end="205:39">cpu_gpr</name><index pos:start="205:40" pos:end="205:43">[<expr pos:start="205:41" pos:end="205:42"><name pos:start="205:41" pos:end="205:42">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="205:46" pos:end="205:56"><expr pos:start="205:46" pos:end="205:56"><name pos:start="205:46" pos:end="205:56"><name pos:start="205:46" pos:end="205:52">cpu_gpr</name><index pos:start="205:53" pos:end="205:56">[<expr pos:start="205:54" pos:end="205:55"><name pos:start="205:54" pos:end="205:55">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="205:59" pos:end="205:76"><expr pos:start="205:59" pos:end="205:76"><operator pos:start="205:59" pos:end="205:59">(</operator><name pos:start="205:60" pos:end="205:66">int64_t</name><operator pos:start="205:67" pos:end="205:67">)</operator><name pos:start="205:68" pos:end="205:70">imm</name> <operator pos:start="205:72" pos:end="205:73">&lt;&lt;</operator> <literal type="number" pos:start="205:75" pos:end="205:76">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="209:13" pos:end="212:0">break;</break>

<cpp:endif pos:start="211:1" pos:end="211:6">#<cpp:directive pos:start="211:2" pos:end="211:6">endif</cpp:directive></cpp:endif>

        <default pos:start="213:9" pos:end="213:16">default:</default>            <comment type="block" pos:start="213:29" pos:end="213:41">/* Invalid */</comment>

            <expr_stmt pos:start="215:13" pos:end="215:33"><expr pos:start="215:13" pos:end="215:32"><call pos:start="215:13" pos:end="215:32"><name pos:start="215:13" pos:end="215:22">MIPS_INVAL</name><argument_list pos:start="215:23" pos:end="215:32">(<argument pos:start="215:24" pos:end="215:31"><expr pos:start="215:24" pos:end="215:31"><literal type="string" pos:start="215:24" pos:end="215:31">"regimm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:49"><expr pos:start="217:13" pos:end="217:48"><call pos:start="217:13" pos:end="217:48"><name pos:start="217:13" pos:end="217:34">generate_exception_end</name><argument_list pos:start="217:35" pos:end="217:48">(<argument pos:start="217:36" pos:end="217:38"><expr pos:start="217:36" pos:end="217:38"><name pos:start="217:36" pos:end="217:38">ctx</name></expr></argument>, <argument pos:start="217:41" pos:end="217:47"><expr pos:start="217:41" pos:end="217:47"><name pos:start="217:41" pos:end="217:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="219:13" pos:end="219:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="223:9" pos:end="223:14">break;</break>

    <case pos:start="225:5" pos:end="225:17">case <expr pos:start="225:10" pos:end="225:16"><name pos:start="225:10" pos:end="225:16">OPC_CP0</name></expr>:</case>

        <expr_stmt pos:start="227:9" pos:end="227:31"><expr pos:start="227:9" pos:end="227:30"><call pos:start="227:9" pos:end="227:30"><name pos:start="227:9" pos:end="227:25">check_cp0_enabled</name><argument_list pos:start="227:26" pos:end="227:30">(<argument pos:start="227:27" pos:end="227:29"><expr pos:start="227:27" pos:end="227:29"><name pos:start="227:27" pos:end="227:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:36"><expr pos:start="229:9" pos:end="229:35"><name pos:start="229:9" pos:end="229:11">op1</name> <operator pos:start="229:13" pos:end="229:13">=</operator> <call pos:start="229:15" pos:end="229:35"><name pos:start="229:15" pos:end="229:22">MASK_CP0</name><argument_list pos:start="229:23" pos:end="229:35">(<argument pos:start="229:24" pos:end="229:34"><expr pos:start="229:24" pos:end="229:34"><name pos:start="229:24" pos:end="229:34"><name pos:start="229:24" pos:end="229:26">ctx</name><operator pos:start="229:27" pos:end="229:28">-&gt;</operator><name pos:start="229:29" pos:end="229:34">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="231:9" pos:end="433:9">switch <condition pos:start="231:16" pos:end="231:20">(<expr pos:start="231:17" pos:end="231:19"><name pos:start="231:17" pos:end="231:19">op1</name></expr>)</condition> <block pos:start="231:22" pos:end="433:9">{<block_content pos:start="233:9" pos:end="431:18">

        <case pos:start="233:9" pos:end="233:22">case <expr pos:start="233:14" pos:end="233:21"><name pos:start="233:14" pos:end="233:21">OPC_MFC0</name></expr>:</case>

        <case pos:start="235:9" pos:end="235:22">case <expr pos:start="235:14" pos:end="235:21"><name pos:start="235:14" pos:end="235:21">OPC_MTC0</name></expr>:</case>

        <case pos:start="237:9" pos:end="237:22">case <expr pos:start="237:14" pos:end="237:21"><name pos:start="237:14" pos:end="237:21">OPC_MFTR</name></expr>:</case>

        <case pos:start="239:9" pos:end="239:22">case <expr pos:start="239:14" pos:end="239:21"><name pos:start="239:14" pos:end="239:21">OPC_MTTR</name></expr>:</case>

        <case pos:start="241:9" pos:end="241:23">case <expr pos:start="241:14" pos:end="241:22"><name pos:start="241:14" pos:end="241:22">OPC_MFHC0</name></expr>:</case>

        <case pos:start="243:9" pos:end="246:0">case <expr pos:start="243:14" pos:end="243:22"><name pos:start="243:14" pos:end="243:22">OPC_MTHC0</name></expr>:</case>

<cpp:if pos:start="245:1" pos:end="245:26">#<cpp:directive pos:start="245:2" pos:end="245:3">if</cpp:directive> <expr pos:start="245:5" pos:end="245:26"><call pos:start="245:5" pos:end="245:26"><name pos:start="245:5" pos:end="245:11">defined</name><argument_list pos:start="245:12" pos:end="245:26">(<argument pos:start="245:13" pos:end="245:25"><expr pos:start="245:13" pos:end="245:25"><name pos:start="245:13" pos:end="245:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="247:9" pos:end="247:23">case <expr pos:start="247:14" pos:end="247:22"><name pos:start="247:14" pos:end="247:22">OPC_DMFC0</name></expr>:</case>

        <case pos:start="249:9" pos:end="254:0">case <expr pos:start="249:14" pos:end="249:22"><name pos:start="249:14" pos:end="249:22">OPC_DMTC0</name></expr>:</case>

<cpp:endif pos:start="251:1" pos:end="251:6">#<cpp:directive pos:start="251:2" pos:end="251:6">endif</cpp:directive></cpp:endif>

<cpp:ifndef pos:start="253:1" pos:end="253:24">#<cpp:directive pos:start="253:2" pos:end="253:7">ifndef</cpp:directive> <name pos:start="253:9" pos:end="253:24">CONFIG_USER_ONLY</name></cpp:ifndef>

            <expr_stmt pos:start="255:13" pos:end="258:0"><expr pos:start="255:13" pos:end="255:42"><call pos:start="255:13" pos:end="255:42"><name pos:start="255:13" pos:end="255:19">gen_cp0</name><argument_list pos:start="255:20" pos:end="255:42">(<argument pos:start="255:21" pos:end="255:23"><expr pos:start="255:21" pos:end="255:23"><name pos:start="255:21" pos:end="255:23">env</name></expr></argument>, <argument pos:start="255:26" pos:end="255:28"><expr pos:start="255:26" pos:end="255:28"><name pos:start="255:26" pos:end="255:28">ctx</name></expr></argument>, <argument pos:start="255:31" pos:end="255:33"><expr pos:start="255:31" pos:end="255:33"><name pos:start="255:31" pos:end="255:33">op1</name></expr></argument>, <argument pos:start="255:36" pos:end="255:37"><expr pos:start="255:36" pos:end="255:37"><name pos:start="255:36" pos:end="255:37">rt</name></expr></argument>, <argument pos:start="255:40" pos:end="255:41"><expr pos:start="255:40" pos:end="255:41"><name pos:start="255:40" pos:end="255:41">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="257:1" pos:end="257:6">#<cpp:directive pos:start="257:2" pos:end="257:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="257:8" pos:end="257:30">/* !CONFIG_USER_ONLY */</comment>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <case pos:start="261:9" pos:end="264:0">case <expr pos:start="261:14" pos:end="261:41"><name pos:start="261:14" pos:end="261:25">OPC_C0_FIRST</name> <operator pos:start="261:27" pos:end="261:29">...</operator> <name pos:start="261:31" pos:end="261:41">OPC_C0_LAST</name></expr>:</case>

<cpp:ifndef pos:start="263:1" pos:end="263:24">#<cpp:directive pos:start="263:2" pos:end="263:7">ifndef</cpp:directive> <name pos:start="263:9" pos:end="263:24">CONFIG_USER_ONLY</name></cpp:ifndef>

            <expr_stmt pos:start="265:13" pos:end="268:0"><expr pos:start="265:13" pos:end="265:59"><call pos:start="265:13" pos:end="265:59"><name pos:start="265:13" pos:end="265:19">gen_cp0</name><argument_list pos:start="265:20" pos:end="265:59">(<argument pos:start="265:21" pos:end="265:23"><expr pos:start="265:21" pos:end="265:23"><name pos:start="265:21" pos:end="265:23">env</name></expr></argument>, <argument pos:start="265:26" pos:end="265:28"><expr pos:start="265:26" pos:end="265:28"><name pos:start="265:26" pos:end="265:28">ctx</name></expr></argument>, <argument pos:start="265:31" pos:end="265:50"><expr pos:start="265:31" pos:end="265:50"><call pos:start="265:31" pos:end="265:50"><name pos:start="265:31" pos:end="265:37">MASK_C0</name><argument_list pos:start="265:38" pos:end="265:50">(<argument pos:start="265:39" pos:end="265:49"><expr pos:start="265:39" pos:end="265:49"><name pos:start="265:39" pos:end="265:49"><name pos:start="265:39" pos:end="265:41">ctx</name><operator pos:start="265:42" pos:end="265:43">-&gt;</operator><name pos:start="265:44" pos:end="265:49">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="265:53" pos:end="265:54"><expr pos:start="265:53" pos:end="265:54"><name pos:start="265:53" pos:end="265:54">rt</name></expr></argument>, <argument pos:start="265:57" pos:end="265:58"><expr pos:start="265:57" pos:end="265:58"><name pos:start="265:57" pos:end="265:58">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="267:1" pos:end="267:6">#<cpp:directive pos:start="267:2" pos:end="267:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="267:8" pos:end="267:30">/* !CONFIG_USER_ONLY */</comment>

            <break pos:start="269:13" pos:end="269:18">break;</break>

        <case pos:start="271:9" pos:end="274:0">case <expr pos:start="271:14" pos:end="271:22"><name pos:start="271:14" pos:end="271:22">OPC_MFMC0</name></expr>:</case>

<cpp:ifndef pos:start="273:1" pos:end="273:24">#<cpp:directive pos:start="273:2" pos:end="273:7">ifndef</cpp:directive> <name pos:start="273:9" pos:end="273:24">CONFIG_USER_ONLY</name></cpp:ifndef>

            <block pos:start="275:13" pos:end="406:0">{<block_content pos:start="277:17" pos:end="401:34">

                <decl_stmt pos:start="277:17" pos:end="277:29"><decl pos:start="277:17" pos:end="277:28"><type pos:start="277:17" pos:end="277:24"><name pos:start="277:17" pos:end="277:24">uint32_t</name></type> <name pos:start="277:26" pos:end="277:28">op2</name></decl>;</decl_stmt>

                <decl_stmt pos:start="279:17" pos:end="279:41"><decl pos:start="279:17" pos:end="279:40"><type pos:start="279:17" pos:end="279:20"><name pos:start="279:17" pos:end="279:20">TCGv</name></type> <name pos:start="279:22" pos:end="279:23">t0</name> <init pos:start="279:25" pos:end="279:40">= <expr pos:start="279:27" pos:end="279:40"><call pos:start="279:27" pos:end="279:40"><name pos:start="279:27" pos:end="279:38">tcg_temp_new</name><argument_list pos:start="279:39" pos:end="279:40">()</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="283:17" pos:end="283:46"><expr pos:start="283:17" pos:end="283:45"><name pos:start="283:17" pos:end="283:19">op2</name> <operator pos:start="283:21" pos:end="283:21">=</operator> <call pos:start="283:23" pos:end="283:45"><name pos:start="283:23" pos:end="283:32">MASK_MFMC0</name><argument_list pos:start="283:33" pos:end="283:45">(<argument pos:start="283:34" pos:end="283:44"><expr pos:start="283:34" pos:end="283:44"><name pos:start="283:34" pos:end="283:44"><name pos:start="283:34" pos:end="283:36">ctx</name><operator pos:start="283:37" pos:end="283:38">-&gt;</operator><name pos:start="283:39" pos:end="283:44">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="285:17" pos:end="399:17">switch <condition pos:start="285:24" pos:end="285:28">(<expr pos:start="285:25" pos:end="285:27"><name pos:start="285:25" pos:end="285:27">op2</name></expr>)</condition> <block pos:start="285:30" pos:end="399:17">{<block_content pos:start="287:17" pos:end="397:26">

                <case pos:start="287:17" pos:end="287:29">case <expr pos:start="287:22" pos:end="287:28"><name pos:start="287:22" pos:end="287:28">OPC_DMT</name></expr>:</case>

                    <expr_stmt pos:start="289:21" pos:end="289:44"><expr pos:start="289:21" pos:end="289:43"><call pos:start="289:21" pos:end="289:43"><name pos:start="289:21" pos:end="289:30">check_insn</name><argument_list pos:start="289:31" pos:end="289:43">(<argument pos:start="289:32" pos:end="289:34"><expr pos:start="289:32" pos:end="289:34"><name pos:start="289:32" pos:end="289:34">ctx</name></expr></argument>, <argument pos:start="289:37" pos:end="289:42"><expr pos:start="289:37" pos:end="289:42"><name pos:start="289:37" pos:end="289:42">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="291:21" pos:end="291:39"><expr pos:start="291:21" pos:end="291:38"><call pos:start="291:21" pos:end="291:38"><name pos:start="291:21" pos:end="291:34">gen_helper_dmt</name><argument_list pos:start="291:35" pos:end="291:38">(<argument pos:start="291:36" pos:end="291:37"><expr pos:start="291:36" pos:end="291:37"><name pos:start="291:36" pos:end="291:37">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="293:21" pos:end="293:42"><expr pos:start="293:21" pos:end="293:41"><call pos:start="293:21" pos:end="293:41"><name pos:start="293:21" pos:end="293:33">gen_store_gpr</name><argument_list pos:start="293:34" pos:end="293:41">(<argument pos:start="293:35" pos:end="293:36"><expr pos:start="293:35" pos:end="293:36"><name pos:start="293:35" pos:end="293:36">t0</name></expr></argument>, <argument pos:start="293:39" pos:end="293:40"><expr pos:start="293:39" pos:end="293:40"><name pos:start="293:39" pos:end="293:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="295:21" pos:end="295:26">break;</break>

                <case pos:start="297:17" pos:end="297:29">case <expr pos:start="297:22" pos:end="297:28"><name pos:start="297:22" pos:end="297:28">OPC_EMT</name></expr>:</case>

                    <expr_stmt pos:start="299:21" pos:end="299:44"><expr pos:start="299:21" pos:end="299:43"><call pos:start="299:21" pos:end="299:43"><name pos:start="299:21" pos:end="299:30">check_insn</name><argument_list pos:start="299:31" pos:end="299:43">(<argument pos:start="299:32" pos:end="299:34"><expr pos:start="299:32" pos:end="299:34"><name pos:start="299:32" pos:end="299:34">ctx</name></expr></argument>, <argument pos:start="299:37" pos:end="299:42"><expr pos:start="299:37" pos:end="299:42"><name pos:start="299:37" pos:end="299:42">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:39"><expr pos:start="301:21" pos:end="301:38"><call pos:start="301:21" pos:end="301:38"><name pos:start="301:21" pos:end="301:34">gen_helper_emt</name><argument_list pos:start="301:35" pos:end="301:38">(<argument pos:start="301:36" pos:end="301:37"><expr pos:start="301:36" pos:end="301:37"><name pos:start="301:36" pos:end="301:37">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="303:21" pos:end="303:42"><expr pos:start="303:21" pos:end="303:41"><call pos:start="303:21" pos:end="303:41"><name pos:start="303:21" pos:end="303:33">gen_store_gpr</name><argument_list pos:start="303:34" pos:end="303:41">(<argument pos:start="303:35" pos:end="303:36"><expr pos:start="303:35" pos:end="303:36"><name pos:start="303:35" pos:end="303:36">t0</name></expr></argument>, <argument pos:start="303:39" pos:end="303:40"><expr pos:start="303:39" pos:end="303:40"><name pos:start="303:39" pos:end="303:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="305:21" pos:end="305:26">break;</break>

                <case pos:start="307:17" pos:end="307:30">case <expr pos:start="307:22" pos:end="307:29"><name pos:start="307:22" pos:end="307:29">OPC_DVPE</name></expr>:</case>

                    <expr_stmt pos:start="309:21" pos:end="309:44"><expr pos:start="309:21" pos:end="309:43"><call pos:start="309:21" pos:end="309:43"><name pos:start="309:21" pos:end="309:30">check_insn</name><argument_list pos:start="309:31" pos:end="309:43">(<argument pos:start="309:32" pos:end="309:34"><expr pos:start="309:32" pos:end="309:34"><name pos:start="309:32" pos:end="309:34">ctx</name></expr></argument>, <argument pos:start="309:37" pos:end="309:42"><expr pos:start="309:37" pos:end="309:42"><name pos:start="309:37" pos:end="309:42">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="311:21" pos:end="311:49"><expr pos:start="311:21" pos:end="311:48"><call pos:start="311:21" pos:end="311:48"><name pos:start="311:21" pos:end="311:35">gen_helper_dvpe</name><argument_list pos:start="311:36" pos:end="311:48">(<argument pos:start="311:37" pos:end="311:38"><expr pos:start="311:37" pos:end="311:38"><name pos:start="311:37" pos:end="311:38">t0</name></expr></argument>, <argument pos:start="311:41" pos:end="311:47"><expr pos:start="311:41" pos:end="311:47"><name pos:start="311:41" pos:end="311:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="313:21" pos:end="313:42"><expr pos:start="313:21" pos:end="313:41"><call pos:start="313:21" pos:end="313:41"><name pos:start="313:21" pos:end="313:33">gen_store_gpr</name><argument_list pos:start="313:34" pos:end="313:41">(<argument pos:start="313:35" pos:end="313:36"><expr pos:start="313:35" pos:end="313:36"><name pos:start="313:35" pos:end="313:36">t0</name></expr></argument>, <argument pos:start="313:39" pos:end="313:40"><expr pos:start="313:39" pos:end="313:40"><name pos:start="313:39" pos:end="313:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="315:21" pos:end="315:26">break;</break>

                <case pos:start="317:17" pos:end="317:30">case <expr pos:start="317:22" pos:end="317:29"><name pos:start="317:22" pos:end="317:29">OPC_EVPE</name></expr>:</case>

                    <expr_stmt pos:start="319:21" pos:end="319:44"><expr pos:start="319:21" pos:end="319:43"><call pos:start="319:21" pos:end="319:43"><name pos:start="319:21" pos:end="319:30">check_insn</name><argument_list pos:start="319:31" pos:end="319:43">(<argument pos:start="319:32" pos:end="319:34"><expr pos:start="319:32" pos:end="319:34"><name pos:start="319:32" pos:end="319:34">ctx</name></expr></argument>, <argument pos:start="319:37" pos:end="319:42"><expr pos:start="319:37" pos:end="319:42"><name pos:start="319:37" pos:end="319:42">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="321:21" pos:end="321:49"><expr pos:start="321:21" pos:end="321:48"><call pos:start="321:21" pos:end="321:48"><name pos:start="321:21" pos:end="321:35">gen_helper_evpe</name><argument_list pos:start="321:36" pos:end="321:48">(<argument pos:start="321:37" pos:end="321:38"><expr pos:start="321:37" pos:end="321:38"><name pos:start="321:37" pos:end="321:38">t0</name></expr></argument>, <argument pos:start="321:41" pos:end="321:47"><expr pos:start="321:41" pos:end="321:47"><name pos:start="321:41" pos:end="321:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="323:21" pos:end="323:42"><expr pos:start="323:21" pos:end="323:41"><call pos:start="323:21" pos:end="323:41"><name pos:start="323:21" pos:end="323:33">gen_store_gpr</name><argument_list pos:start="323:34" pos:end="323:41">(<argument pos:start="323:35" pos:end="323:36"><expr pos:start="323:35" pos:end="323:36"><name pos:start="323:35" pos:end="323:36">t0</name></expr></argument>, <argument pos:start="323:39" pos:end="323:40"><expr pos:start="323:39" pos:end="323:40"><name pos:start="323:39" pos:end="323:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="325:21" pos:end="325:26">break;</break>

                <case pos:start="327:17" pos:end="327:29">case <expr pos:start="327:22" pos:end="327:28"><name pos:start="327:22" pos:end="327:28">OPC_DVP</name></expr>:</case>

                    <expr_stmt pos:start="329:21" pos:end="329:50"><expr pos:start="329:21" pos:end="329:49"><call pos:start="329:21" pos:end="329:49"><name pos:start="329:21" pos:end="329:30">check_insn</name><argument_list pos:start="329:31" pos:end="329:49">(<argument pos:start="329:32" pos:end="329:34"><expr pos:start="329:32" pos:end="329:34"><name pos:start="329:32" pos:end="329:34">ctx</name></expr></argument>, <argument pos:start="329:37" pos:end="329:48"><expr pos:start="329:37" pos:end="329:48"><name pos:start="329:37" pos:end="329:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="331:21" pos:end="337:21"><if pos:start="331:21" pos:end="337:21">if <condition pos:start="331:24" pos:end="331:32">(<expr pos:start="331:25" pos:end="331:31"><name pos:start="331:25" pos:end="331:31"><name pos:start="331:25" pos:end="331:27">ctx</name><operator pos:start="331:28" pos:end="331:29">-&gt;</operator><name pos:start="331:30" pos:end="331:31">vp</name></name></expr>)</condition> <block pos:start="331:34" pos:end="337:21">{<block_content pos:start="333:25" pos:end="335:46">

                        <expr_stmt pos:start="333:25" pos:end="333:52"><expr pos:start="333:25" pos:end="333:51"><call pos:start="333:25" pos:end="333:51"><name pos:start="333:25" pos:end="333:38">gen_helper_dvp</name><argument_list pos:start="333:39" pos:end="333:51">(<argument pos:start="333:40" pos:end="333:41"><expr pos:start="333:40" pos:end="333:41"><name pos:start="333:40" pos:end="333:41">t0</name></expr></argument>, <argument pos:start="333:44" pos:end="333:50"><expr pos:start="333:44" pos:end="333:50"><name pos:start="333:44" pos:end="333:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="335:25" pos:end="335:46"><expr pos:start="335:25" pos:end="335:45"><call pos:start="335:25" pos:end="335:45"><name pos:start="335:25" pos:end="335:37">gen_store_gpr</name><argument_list pos:start="335:38" pos:end="335:45">(<argument pos:start="335:39" pos:end="335:40"><expr pos:start="335:39" pos:end="335:40"><name pos:start="335:39" pos:end="335:40">t0</name></expr></argument>, <argument pos:start="335:43" pos:end="335:44"><expr pos:start="335:43" pos:end="335:44"><name pos:start="335:43" pos:end="335:44">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="339:21" pos:end="339:26">break;</break>

                <case pos:start="341:17" pos:end="341:29">case <expr pos:start="341:22" pos:end="341:28"><name pos:start="341:22" pos:end="341:28">OPC_EVP</name></expr>:</case>

                    <expr_stmt pos:start="343:21" pos:end="343:50"><expr pos:start="343:21" pos:end="343:49"><call pos:start="343:21" pos:end="343:49"><name pos:start="343:21" pos:end="343:30">check_insn</name><argument_list pos:start="343:31" pos:end="343:49">(<argument pos:start="343:32" pos:end="343:34"><expr pos:start="343:32" pos:end="343:34"><name pos:start="343:32" pos:end="343:34">ctx</name></expr></argument>, <argument pos:start="343:37" pos:end="343:48"><expr pos:start="343:37" pos:end="343:48"><name pos:start="343:37" pos:end="343:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="345:21" pos:end="351:21"><if pos:start="345:21" pos:end="351:21">if <condition pos:start="345:24" pos:end="345:32">(<expr pos:start="345:25" pos:end="345:31"><name pos:start="345:25" pos:end="345:31"><name pos:start="345:25" pos:end="345:27">ctx</name><operator pos:start="345:28" pos:end="345:29">-&gt;</operator><name pos:start="345:30" pos:end="345:31">vp</name></name></expr>)</condition> <block pos:start="345:34" pos:end="351:21">{<block_content pos:start="347:25" pos:end="349:46">

                        <expr_stmt pos:start="347:25" pos:end="347:52"><expr pos:start="347:25" pos:end="347:51"><call pos:start="347:25" pos:end="347:51"><name pos:start="347:25" pos:end="347:38">gen_helper_evp</name><argument_list pos:start="347:39" pos:end="347:51">(<argument pos:start="347:40" pos:end="347:41"><expr pos:start="347:40" pos:end="347:41"><name pos:start="347:40" pos:end="347:41">t0</name></expr></argument>, <argument pos:start="347:44" pos:end="347:50"><expr pos:start="347:44" pos:end="347:50"><name pos:start="347:44" pos:end="347:50">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="349:25" pos:end="349:46"><expr pos:start="349:25" pos:end="349:45"><call pos:start="349:25" pos:end="349:45"><name pos:start="349:25" pos:end="349:37">gen_store_gpr</name><argument_list pos:start="349:38" pos:end="349:45">(<argument pos:start="349:39" pos:end="349:40"><expr pos:start="349:39" pos:end="349:40"><name pos:start="349:39" pos:end="349:40">t0</name></expr></argument>, <argument pos:start="349:43" pos:end="349:44"><expr pos:start="349:43" pos:end="349:44"><name pos:start="349:43" pos:end="349:44">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <break pos:start="353:21" pos:end="353:26">break;</break>

                <case pos:start="355:17" pos:end="355:28">case <expr pos:start="355:22" pos:end="355:27"><name pos:start="355:22" pos:end="355:27">OPC_DI</name></expr>:</case>

                    <expr_stmt pos:start="357:21" pos:end="357:50"><expr pos:start="357:21" pos:end="357:49"><call pos:start="357:21" pos:end="357:49"><name pos:start="357:21" pos:end="357:30">check_insn</name><argument_list pos:start="357:31" pos:end="357:49">(<argument pos:start="357:32" pos:end="357:34"><expr pos:start="357:32" pos:end="357:34"><name pos:start="357:32" pos:end="357:34">ctx</name></expr></argument>, <argument pos:start="357:37" pos:end="357:48"><expr pos:start="357:37" pos:end="357:48"><name pos:start="357:37" pos:end="357:48">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:43"><expr pos:start="359:21" pos:end="359:42"><call pos:start="359:21" pos:end="359:42"><name pos:start="359:21" pos:end="359:34">save_cpu_state</name><argument_list pos:start="359:35" pos:end="359:42">(<argument pos:start="359:36" pos:end="359:38"><expr pos:start="359:36" pos:end="359:38"><name pos:start="359:36" pos:end="359:38">ctx</name></expr></argument>, <argument pos:start="359:41" pos:end="359:41"><expr pos:start="359:41" pos:end="359:41"><literal type="number" pos:start="359:41" pos:end="359:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:47"><expr pos:start="361:21" pos:end="361:46"><call pos:start="361:21" pos:end="361:46"><name pos:start="361:21" pos:end="361:33">gen_helper_di</name><argument_list pos:start="361:34" pos:end="361:46">(<argument pos:start="361:35" pos:end="361:36"><expr pos:start="361:35" pos:end="361:36"><name pos:start="361:35" pos:end="361:36">t0</name></expr></argument>, <argument pos:start="361:39" pos:end="361:45"><expr pos:start="361:39" pos:end="361:45"><name pos:start="361:39" pos:end="361:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="363:21" pos:end="363:42"><expr pos:start="363:21" pos:end="363:41"><call pos:start="363:21" pos:end="363:41"><name pos:start="363:21" pos:end="363:33">gen_store_gpr</name><argument_list pos:start="363:34" pos:end="363:41">(<argument pos:start="363:35" pos:end="363:36"><expr pos:start="363:35" pos:end="363:36"><name pos:start="363:35" pos:end="363:36">t0</name></expr></argument>, <argument pos:start="363:39" pos:end="363:40"><expr pos:start="363:39" pos:end="363:40"><name pos:start="363:39" pos:end="363:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="365:21" pos:end="367:46">/* Stop translation as we may have switched

                       the execution mode.  */</comment>

                    <expr_stmt pos:start="369:21" pos:end="369:42"><expr pos:start="369:21" pos:end="369:41"><name pos:start="369:21" pos:end="369:31"><name pos:start="369:21" pos:end="369:23">ctx</name><operator pos:start="369:24" pos:end="369:25">-&gt;</operator><name pos:start="369:26" pos:end="369:31">bstate</name></name> <operator pos:start="369:33" pos:end="369:33">=</operator> <name pos:start="369:35" pos:end="369:41">BS_STOP</name></expr>;</expr_stmt>

                    <break pos:start="371:21" pos:end="371:26">break;</break>

                <case pos:start="373:17" pos:end="373:28">case <expr pos:start="373:22" pos:end="373:27"><name pos:start="373:22" pos:end="373:27">OPC_EI</name></expr>:</case>

                    <expr_stmt pos:start="375:21" pos:end="375:50"><expr pos:start="375:21" pos:end="375:49"><call pos:start="375:21" pos:end="375:49"><name pos:start="375:21" pos:end="375:30">check_insn</name><argument_list pos:start="375:31" pos:end="375:49">(<argument pos:start="375:32" pos:end="375:34"><expr pos:start="375:32" pos:end="375:34"><name pos:start="375:32" pos:end="375:34">ctx</name></expr></argument>, <argument pos:start="375:37" pos:end="375:48"><expr pos:start="375:37" pos:end="375:48"><name pos:start="375:37" pos:end="375:48">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="377:21" pos:end="377:43"><expr pos:start="377:21" pos:end="377:42"><call pos:start="377:21" pos:end="377:42"><name pos:start="377:21" pos:end="377:34">save_cpu_state</name><argument_list pos:start="377:35" pos:end="377:42">(<argument pos:start="377:36" pos:end="377:38"><expr pos:start="377:36" pos:end="377:38"><name pos:start="377:36" pos:end="377:38">ctx</name></expr></argument>, <argument pos:start="377:41" pos:end="377:41"><expr pos:start="377:41" pos:end="377:41"><literal type="number" pos:start="377:41" pos:end="377:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="379:21" pos:end="379:47"><expr pos:start="379:21" pos:end="379:46"><call pos:start="379:21" pos:end="379:46"><name pos:start="379:21" pos:end="379:33">gen_helper_ei</name><argument_list pos:start="379:34" pos:end="379:46">(<argument pos:start="379:35" pos:end="379:36"><expr pos:start="379:35" pos:end="379:36"><name pos:start="379:35" pos:end="379:36">t0</name></expr></argument>, <argument pos:start="379:39" pos:end="379:45"><expr pos:start="379:39" pos:end="379:45"><name pos:start="379:39" pos:end="379:45">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="381:21" pos:end="381:42"><expr pos:start="381:21" pos:end="381:41"><call pos:start="381:21" pos:end="381:41"><name pos:start="381:21" pos:end="381:33">gen_store_gpr</name><argument_list pos:start="381:34" pos:end="381:41">(<argument pos:start="381:35" pos:end="381:36"><expr pos:start="381:35" pos:end="381:36"><name pos:start="381:35" pos:end="381:36">t0</name></expr></argument>, <argument pos:start="381:39" pos:end="381:40"><expr pos:start="381:39" pos:end="381:40"><name pos:start="381:39" pos:end="381:40">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="383:21" pos:end="385:46">/* Stop translation as we may have switched

                       the execution mode.  */</comment>

                    <expr_stmt pos:start="387:21" pos:end="387:42"><expr pos:start="387:21" pos:end="387:41"><name pos:start="387:21" pos:end="387:31"><name pos:start="387:21" pos:end="387:23">ctx</name><operator pos:start="387:24" pos:end="387:25">-&gt;</operator><name pos:start="387:26" pos:end="387:31">bstate</name></name> <operator pos:start="387:33" pos:end="387:33">=</operator> <name pos:start="387:35" pos:end="387:41">BS_STOP</name></expr>;</expr_stmt>

                    <break pos:start="389:21" pos:end="389:26">break;</break>

                <default pos:start="391:17" pos:end="391:24">default:</default>            <comment type="block" pos:start="391:37" pos:end="391:49">/* Invalid */</comment>

                    <expr_stmt pos:start="393:21" pos:end="393:40"><expr pos:start="393:21" pos:end="393:39"><call pos:start="393:21" pos:end="393:39"><name pos:start="393:21" pos:end="393:30">MIPS_INVAL</name><argument_list pos:start="393:31" pos:end="393:39">(<argument pos:start="393:32" pos:end="393:38"><expr pos:start="393:32" pos:end="393:38"><literal type="string" pos:start="393:32" pos:end="393:38">"mfmc0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="395:21" pos:end="395:57"><expr pos:start="395:21" pos:end="395:56"><call pos:start="395:21" pos:end="395:56"><name pos:start="395:21" pos:end="395:42">generate_exception_end</name><argument_list pos:start="395:43" pos:end="395:56">(<argument pos:start="395:44" pos:end="395:46"><expr pos:start="395:44" pos:end="395:46"><name pos:start="395:44" pos:end="395:46">ctx</name></expr></argument>, <argument pos:start="395:49" pos:end="395:55"><expr pos:start="395:49" pos:end="395:55"><name pos:start="395:49" pos:end="395:55">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="397:21" pos:end="397:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="401:17" pos:end="401:34"><expr pos:start="401:17" pos:end="401:33"><call pos:start="401:17" pos:end="401:33"><name pos:start="401:17" pos:end="401:29">tcg_temp_free</name><argument_list pos:start="401:30" pos:end="401:33">(<argument pos:start="401:31" pos:end="401:32"><expr pos:start="401:31" pos:end="401:32"><name pos:start="401:31" pos:end="401:32">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block>

<cpp:endif pos:start="405:1" pos:end="405:6">#<cpp:directive pos:start="405:2" pos:end="405:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="405:8" pos:end="405:30">/* !CONFIG_USER_ONLY */</comment>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <case pos:start="409:9" pos:end="409:24">case <expr pos:start="409:14" pos:end="409:23"><name pos:start="409:14" pos:end="409:23">OPC_RDPGPR</name></expr>:</case>

            <expr_stmt pos:start="411:13" pos:end="411:42"><expr pos:start="411:13" pos:end="411:41"><call pos:start="411:13" pos:end="411:41"><name pos:start="411:13" pos:end="411:22">check_insn</name><argument_list pos:start="411:23" pos:end="411:41">(<argument pos:start="411:24" pos:end="411:26"><expr pos:start="411:24" pos:end="411:26"><name pos:start="411:24" pos:end="411:26">ctx</name></expr></argument>, <argument pos:start="411:29" pos:end="411:40"><expr pos:start="411:29" pos:end="411:40"><name pos:start="411:29" pos:end="411:40">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="413:13" pos:end="413:36"><expr pos:start="413:13" pos:end="413:35"><call pos:start="413:13" pos:end="413:35"><name pos:start="413:13" pos:end="413:27">gen_load_srsgpr</name><argument_list pos:start="413:28" pos:end="413:35">(<argument pos:start="413:29" pos:end="413:30"><expr pos:start="413:29" pos:end="413:30"><name pos:start="413:29" pos:end="413:30">rt</name></expr></argument>, <argument pos:start="413:33" pos:end="413:34"><expr pos:start="413:33" pos:end="413:34"><name pos:start="413:33" pos:end="413:34">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="415:13" pos:end="415:18">break;</break>

        <case pos:start="417:9" pos:end="417:24">case <expr pos:start="417:14" pos:end="417:23"><name pos:start="417:14" pos:end="417:23">OPC_WRPGPR</name></expr>:</case>

            <expr_stmt pos:start="419:13" pos:end="419:42"><expr pos:start="419:13" pos:end="419:41"><call pos:start="419:13" pos:end="419:41"><name pos:start="419:13" pos:end="419:22">check_insn</name><argument_list pos:start="419:23" pos:end="419:41">(<argument pos:start="419:24" pos:end="419:26"><expr pos:start="419:24" pos:end="419:26"><name pos:start="419:24" pos:end="419:26">ctx</name></expr></argument>, <argument pos:start="419:29" pos:end="419:40"><expr pos:start="419:29" pos:end="419:40"><name pos:start="419:29" pos:end="419:40">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:37"><expr pos:start="421:13" pos:end="421:36"><call pos:start="421:13" pos:end="421:36"><name pos:start="421:13" pos:end="421:28">gen_store_srsgpr</name><argument_list pos:start="421:29" pos:end="421:36">(<argument pos:start="421:30" pos:end="421:31"><expr pos:start="421:30" pos:end="421:31"><name pos:start="421:30" pos:end="421:31">rt</name></expr></argument>, <argument pos:start="421:34" pos:end="421:35"><expr pos:start="421:34" pos:end="421:35"><name pos:start="421:34" pos:end="421:35">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="423:13" pos:end="423:18">break;</break>

        <default pos:start="425:9" pos:end="425:16">default:</default>

            <expr_stmt pos:start="427:13" pos:end="427:30"><expr pos:start="427:13" pos:end="427:29"><call pos:start="427:13" pos:end="427:29"><name pos:start="427:13" pos:end="427:22">MIPS_INVAL</name><argument_list pos:start="427:23" pos:end="427:29">(<argument pos:start="427:24" pos:end="427:28"><expr pos:start="427:24" pos:end="427:28"><literal type="string" pos:start="427:24" pos:end="427:28">"cp0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:49"><expr pos:start="429:13" pos:end="429:48"><call pos:start="429:13" pos:end="429:48"><name pos:start="429:13" pos:end="429:34">generate_exception_end</name><argument_list pos:start="429:35" pos:end="429:48">(<argument pos:start="429:36" pos:end="429:38"><expr pos:start="429:36" pos:end="429:38"><name pos:start="429:36" pos:end="429:38">ctx</name></expr></argument>, <argument pos:start="429:41" pos:end="429:47"><expr pos:start="429:41" pos:end="429:47"><name pos:start="429:41" pos:end="429:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="435:9" pos:end="435:14">break;</break>

    <case pos:start="437:5" pos:end="437:18">case <expr pos:start="437:10" pos:end="437:17"><name pos:start="437:10" pos:end="437:17">OPC_BOVC</name></expr>:</case> <comment type="block" pos:start="437:20" pos:end="437:56">/* OPC_BEQZALC, OPC_BEQC, OPC_ADDI */</comment>

        <if_stmt pos:start="439:9" pos:end="453:9"><if pos:start="439:9" pos:end="445:9">if <condition pos:start="439:12" pos:end="439:43">(<expr pos:start="439:13" pos:end="439:42"><name pos:start="439:13" pos:end="439:27"><name pos:start="439:13" pos:end="439:15">ctx</name><operator pos:start="439:16" pos:end="439:17">-&gt;</operator><name pos:start="439:18" pos:end="439:27">insn_flags</name></name> <operator pos:start="439:29" pos:end="439:29">&amp;</operator> <name pos:start="439:31" pos:end="439:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="439:45" pos:end="445:9">{<block_content pos:start="443:13" pos:end="443:66">

            <comment type="block" pos:start="441:13" pos:end="441:49">/* OPC_BOVC, OPC_BEQZALC, OPC_BEQC */</comment>

            <expr_stmt pos:start="443:13" pos:end="443:66"><expr pos:start="443:13" pos:end="443:65"><call pos:start="443:13" pos:end="443:65"><name pos:start="443:13" pos:end="443:38">gen_compute_compact_branch</name><argument_list pos:start="443:39" pos:end="443:65">(<argument pos:start="443:40" pos:end="443:42"><expr pos:start="443:40" pos:end="443:42"><name pos:start="443:40" pos:end="443:42">ctx</name></expr></argument>, <argument pos:start="443:45" pos:end="443:46"><expr pos:start="443:45" pos:end="443:46"><name pos:start="443:45" pos:end="443:46">op</name></expr></argument>, <argument pos:start="443:49" pos:end="443:50"><expr pos:start="443:49" pos:end="443:50"><name pos:start="443:49" pos:end="443:50">rs</name></expr></argument>, <argument pos:start="443:53" pos:end="443:54"><expr pos:start="443:53" pos:end="443:54"><name pos:start="443:53" pos:end="443:54">rt</name></expr></argument>, <argument pos:start="443:57" pos:end="443:64"><expr pos:start="443:57" pos:end="443:64"><name pos:start="443:57" pos:end="443:59">imm</name> <operator pos:start="443:61" pos:end="443:62">&lt;&lt;</operator> <literal type="number" pos:start="443:64" pos:end="443:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="445:11" pos:end="453:9">else <block pos:start="445:16" pos:end="453:9">{<block_content pos:start="451:13" pos:end="451:48">

            <comment type="block" pos:start="447:13" pos:end="447:26">/* OPC_ADDI */</comment>

            <comment type="block" pos:start="449:13" pos:end="449:50">/* Arithmetic with immediate opcode */</comment>

            <expr_stmt pos:start="451:13" pos:end="451:48"><expr pos:start="451:13" pos:end="451:47"><call pos:start="451:13" pos:end="451:47"><name pos:start="451:13" pos:end="451:25">gen_arith_imm</name><argument_list pos:start="451:26" pos:end="451:47">(<argument pos:start="451:27" pos:end="451:29"><expr pos:start="451:27" pos:end="451:29"><name pos:start="451:27" pos:end="451:29">ctx</name></expr></argument>, <argument pos:start="451:32" pos:end="451:33"><expr pos:start="451:32" pos:end="451:33"><name pos:start="451:32" pos:end="451:33">op</name></expr></argument>, <argument pos:start="451:36" pos:end="451:37"><expr pos:start="451:36" pos:end="451:37"><name pos:start="451:36" pos:end="451:37">rt</name></expr></argument>, <argument pos:start="451:40" pos:end="451:41"><expr pos:start="451:40" pos:end="451:41"><name pos:start="451:40" pos:end="451:41">rs</name></expr></argument>, <argument pos:start="451:44" pos:end="451:46"><expr pos:start="451:44" pos:end="451:46"><name pos:start="451:44" pos:end="451:46">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="455:9" pos:end="455:14">break;</break>

    <case pos:start="457:5" pos:end="457:19">case <expr pos:start="457:10" pos:end="457:18"><name pos:start="457:10" pos:end="457:18">OPC_ADDIU</name></expr>:</case>

         <expr_stmt pos:start="459:10" pos:end="459:45"><expr pos:start="459:10" pos:end="459:44"><call pos:start="459:10" pos:end="459:44"><name pos:start="459:10" pos:end="459:22">gen_arith_imm</name><argument_list pos:start="459:23" pos:end="459:44">(<argument pos:start="459:24" pos:end="459:26"><expr pos:start="459:24" pos:end="459:26"><name pos:start="459:24" pos:end="459:26">ctx</name></expr></argument>, <argument pos:start="459:29" pos:end="459:30"><expr pos:start="459:29" pos:end="459:30"><name pos:start="459:29" pos:end="459:30">op</name></expr></argument>, <argument pos:start="459:33" pos:end="459:34"><expr pos:start="459:33" pos:end="459:34"><name pos:start="459:33" pos:end="459:34">rt</name></expr></argument>, <argument pos:start="459:37" pos:end="459:38"><expr pos:start="459:37" pos:end="459:38"><name pos:start="459:37" pos:end="459:38">rs</name></expr></argument>, <argument pos:start="459:41" pos:end="459:43"><expr pos:start="459:41" pos:end="459:43"><name pos:start="459:41" pos:end="459:43">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="461:10" pos:end="461:15">break;</break>

    <case pos:start="463:5" pos:end="463:18">case <expr pos:start="463:10" pos:end="463:17"><name pos:start="463:10" pos:end="463:17">OPC_SLTI</name></expr>:</case> <comment type="block" pos:start="463:20" pos:end="463:63">/* Set on less than with immediate opcode */</comment>

    <case pos:start="465:5" pos:end="465:19">case <expr pos:start="465:10" pos:end="465:18"><name pos:start="465:10" pos:end="465:18">OPC_SLTIU</name></expr>:</case>

         <expr_stmt pos:start="467:10" pos:end="467:43"><expr pos:start="467:10" pos:end="467:42"><call pos:start="467:10" pos:end="467:42"><name pos:start="467:10" pos:end="467:20">gen_slt_imm</name><argument_list pos:start="467:21" pos:end="467:42">(<argument pos:start="467:22" pos:end="467:24"><expr pos:start="467:22" pos:end="467:24"><name pos:start="467:22" pos:end="467:24">ctx</name></expr></argument>, <argument pos:start="467:27" pos:end="467:28"><expr pos:start="467:27" pos:end="467:28"><name pos:start="467:27" pos:end="467:28">op</name></expr></argument>, <argument pos:start="467:31" pos:end="467:32"><expr pos:start="467:31" pos:end="467:32"><name pos:start="467:31" pos:end="467:32">rt</name></expr></argument>, <argument pos:start="467:35" pos:end="467:36"><expr pos:start="467:35" pos:end="467:36"><name pos:start="467:35" pos:end="467:36">rs</name></expr></argument>, <argument pos:start="467:39" pos:end="467:41"><expr pos:start="467:39" pos:end="467:41"><name pos:start="467:39" pos:end="467:41">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="469:10" pos:end="469:15">break;</break>

    <case pos:start="471:5" pos:end="471:18">case <expr pos:start="471:10" pos:end="471:17"><name pos:start="471:10" pos:end="471:17">OPC_ANDI</name></expr>:</case> <comment type="block" pos:start="471:20" pos:end="471:57">/* Arithmetic with immediate opcode */</comment>

    <case pos:start="473:5" pos:end="473:17">case <expr pos:start="473:10" pos:end="473:16"><name pos:start="473:10" pos:end="473:16">OPC_LUI</name></expr>:</case> <comment type="block" pos:start="473:19" pos:end="473:31">/* OPC_AUI */</comment>

    <case pos:start="475:5" pos:end="475:17">case <expr pos:start="475:10" pos:end="475:16"><name pos:start="475:10" pos:end="475:16">OPC_ORI</name></expr>:</case>

    <case pos:start="477:5" pos:end="477:18">case <expr pos:start="477:10" pos:end="477:17"><name pos:start="477:10" pos:end="477:17">OPC_XORI</name></expr>:</case>

         <expr_stmt pos:start="479:10" pos:end="479:45"><expr pos:start="479:10" pos:end="479:44"><call pos:start="479:10" pos:end="479:44"><name pos:start="479:10" pos:end="479:22">gen_logic_imm</name><argument_list pos:start="479:23" pos:end="479:44">(<argument pos:start="479:24" pos:end="479:26"><expr pos:start="479:24" pos:end="479:26"><name pos:start="479:24" pos:end="479:26">ctx</name></expr></argument>, <argument pos:start="479:29" pos:end="479:30"><expr pos:start="479:29" pos:end="479:30"><name pos:start="479:29" pos:end="479:30">op</name></expr></argument>, <argument pos:start="479:33" pos:end="479:34"><expr pos:start="479:33" pos:end="479:34"><name pos:start="479:33" pos:end="479:34">rt</name></expr></argument>, <argument pos:start="479:37" pos:end="479:38"><expr pos:start="479:37" pos:end="479:38"><name pos:start="479:37" pos:end="479:38">rs</name></expr></argument>, <argument pos:start="479:41" pos:end="479:43"><expr pos:start="479:41" pos:end="479:43"><name pos:start="479:41" pos:end="479:43">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="481:10" pos:end="481:15">break;</break>

    <case pos:start="483:5" pos:end="483:27">case <expr pos:start="483:10" pos:end="483:26"><name pos:start="483:10" pos:end="483:14">OPC_J</name> <operator pos:start="483:16" pos:end="483:18">...</operator> <name pos:start="483:20" pos:end="483:26">OPC_JAL</name></expr>:</case> <comment type="block" pos:start="483:29" pos:end="483:38">/* Jump */</comment>

         <expr_stmt pos:start="485:10" pos:end="485:58"><expr pos:start="485:10" pos:end="485:57"><name pos:start="485:10" pos:end="485:15">offset</name> <operator pos:start="485:17" pos:end="485:17">=</operator> <operator pos:start="485:19" pos:end="485:19">(</operator><name pos:start="485:20" pos:end="485:26">int32_t</name><operator pos:start="485:27" pos:end="485:27">)</operator><operator pos:start="485:28" pos:end="485:28">(</operator><name pos:start="485:29" pos:end="485:39"><name pos:start="485:29" pos:end="485:31">ctx</name><operator pos:start="485:32" pos:end="485:33">-&gt;</operator><name pos:start="485:34" pos:end="485:39">opcode</name></name> <operator pos:start="485:41" pos:end="485:41">&amp;</operator> <literal type="number" pos:start="485:43" pos:end="485:51">0x3FFFFFF</literal><operator pos:start="485:52" pos:end="485:52">)</operator> <operator pos:start="485:54" pos:end="485:55">&lt;&lt;</operator> <literal type="number" pos:start="485:57" pos:end="485:57">2</literal></expr>;</expr_stmt>

         <expr_stmt pos:start="487:10" pos:end="487:59"><expr pos:start="487:10" pos:end="487:58"><call pos:start="487:10" pos:end="487:58"><name pos:start="487:10" pos:end="487:27">gen_compute_branch</name><argument_list pos:start="487:28" pos:end="487:58">(<argument pos:start="487:29" pos:end="487:31"><expr pos:start="487:29" pos:end="487:31"><name pos:start="487:29" pos:end="487:31">ctx</name></expr></argument>, <argument pos:start="487:34" pos:end="487:35"><expr pos:start="487:34" pos:end="487:35"><name pos:start="487:34" pos:end="487:35">op</name></expr></argument>, <argument pos:start="487:38" pos:end="487:38"><expr pos:start="487:38" pos:end="487:38"><literal type="number" pos:start="487:38" pos:end="487:38">4</literal></expr></argument>, <argument pos:start="487:41" pos:end="487:42"><expr pos:start="487:41" pos:end="487:42"><name pos:start="487:41" pos:end="487:42">rs</name></expr></argument>, <argument pos:start="487:45" pos:end="487:46"><expr pos:start="487:45" pos:end="487:46"><name pos:start="487:45" pos:end="487:46">rt</name></expr></argument>, <argument pos:start="487:49" pos:end="487:54"><expr pos:start="487:49" pos:end="487:54"><name pos:start="487:49" pos:end="487:54">offset</name></expr></argument>, <argument pos:start="487:57" pos:end="487:57"><expr pos:start="487:57" pos:end="487:57"><literal type="number" pos:start="487:57" pos:end="487:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="489:10" pos:end="489:15">break;</break>

    <comment type="block" pos:start="491:5" pos:end="491:16">/* Branch */</comment>

    <case pos:start="493:5" pos:end="493:19">case <expr pos:start="493:10" pos:end="493:18"><name pos:start="493:10" pos:end="493:18">OPC_BLEZC</name></expr>:</case> <comment type="block" pos:start="493:21" pos:end="493:56">/* OPC_BGEZC, OPC_BGEC, OPC_BLEZL */</comment>

        <if_stmt pos:start="495:9" pos:end="515:9"><if pos:start="495:9" pos:end="509:9">if <condition pos:start="495:12" pos:end="495:43">(<expr pos:start="495:13" pos:end="495:42"><name pos:start="495:13" pos:end="495:27"><name pos:start="495:13" pos:end="495:15">ctx</name><operator pos:start="495:16" pos:end="495:17">-&gt;</operator><name pos:start="495:18" pos:end="495:27">insn_flags</name></name> <operator pos:start="495:29" pos:end="495:29">&amp;</operator> <name pos:start="495:31" pos:end="495:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="495:45" pos:end="509:9">{<block_content pos:start="497:13" pos:end="507:66">

            <if_stmt pos:start="497:13" pos:end="503:13"><if pos:start="497:13" pos:end="503:13">if <condition pos:start="497:16" pos:end="497:24">(<expr pos:start="497:17" pos:end="497:23"><name pos:start="497:17" pos:end="497:18">rt</name> <operator pos:start="497:20" pos:end="497:21">==</operator> <literal type="number" pos:start="497:23" pos:end="497:23">0</literal></expr>)</condition> <block pos:start="497:26" pos:end="503:13">{<block_content pos:start="499:17" pos:end="501:22">

                <expr_stmt pos:start="499:17" pos:end="499:53"><expr pos:start="499:17" pos:end="499:52"><call pos:start="499:17" pos:end="499:52"><name pos:start="499:17" pos:end="499:38">generate_exception_end</name><argument_list pos:start="499:39" pos:end="499:52">(<argument pos:start="499:40" pos:end="499:42"><expr pos:start="499:40" pos:end="499:42"><name pos:start="499:40" pos:end="499:42">ctx</name></expr></argument>, <argument pos:start="499:45" pos:end="499:51"><expr pos:start="499:45" pos:end="499:51"><name pos:start="499:45" pos:end="499:51">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="501:17" pos:end="501:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="505:13" pos:end="505:48">/* OPC_BLEZC, OPC_BGEZC, OPC_BGEC */</comment>

            <expr_stmt pos:start="507:13" pos:end="507:66"><expr pos:start="507:13" pos:end="507:65"><call pos:start="507:13" pos:end="507:65"><name pos:start="507:13" pos:end="507:38">gen_compute_compact_branch</name><argument_list pos:start="507:39" pos:end="507:65">(<argument pos:start="507:40" pos:end="507:42"><expr pos:start="507:40" pos:end="507:42"><name pos:start="507:40" pos:end="507:42">ctx</name></expr></argument>, <argument pos:start="507:45" pos:end="507:46"><expr pos:start="507:45" pos:end="507:46"><name pos:start="507:45" pos:end="507:46">op</name></expr></argument>, <argument pos:start="507:49" pos:end="507:50"><expr pos:start="507:49" pos:end="507:50"><name pos:start="507:49" pos:end="507:50">rs</name></expr></argument>, <argument pos:start="507:53" pos:end="507:54"><expr pos:start="507:53" pos:end="507:54"><name pos:start="507:53" pos:end="507:54">rt</name></expr></argument>, <argument pos:start="507:57" pos:end="507:64"><expr pos:start="507:57" pos:end="507:64"><name pos:start="507:57" pos:end="507:59">imm</name> <operator pos:start="507:61" pos:end="507:62">&lt;&lt;</operator> <literal type="number" pos:start="507:64" pos:end="507:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="509:11" pos:end="515:9">else <block pos:start="509:16" pos:end="515:9">{<block_content pos:start="513:13" pos:end="513:64">

            <comment type="block" pos:start="511:13" pos:end="511:27">/* OPC_BLEZL */</comment>

            <expr_stmt pos:start="513:13" pos:end="513:64"><expr pos:start="513:13" pos:end="513:63"><call pos:start="513:13" pos:end="513:63"><name pos:start="513:13" pos:end="513:30">gen_compute_branch</name><argument_list pos:start="513:31" pos:end="513:63">(<argument pos:start="513:32" pos:end="513:34"><expr pos:start="513:32" pos:end="513:34"><name pos:start="513:32" pos:end="513:34">ctx</name></expr></argument>, <argument pos:start="513:37" pos:end="513:38"><expr pos:start="513:37" pos:end="513:38"><name pos:start="513:37" pos:end="513:38">op</name></expr></argument>, <argument pos:start="513:41" pos:end="513:41"><expr pos:start="513:41" pos:end="513:41"><literal type="number" pos:start="513:41" pos:end="513:41">4</literal></expr></argument>, <argument pos:start="513:44" pos:end="513:45"><expr pos:start="513:44" pos:end="513:45"><name pos:start="513:44" pos:end="513:45">rs</name></expr></argument>, <argument pos:start="513:48" pos:end="513:49"><expr pos:start="513:48" pos:end="513:49"><name pos:start="513:48" pos:end="513:49">rt</name></expr></argument>, <argument pos:start="513:52" pos:end="513:59"><expr pos:start="513:52" pos:end="513:59"><name pos:start="513:52" pos:end="513:54">imm</name> <operator pos:start="513:56" pos:end="513:57">&lt;&lt;</operator> <literal type="number" pos:start="513:59" pos:end="513:59">2</literal></expr></argument>, <argument pos:start="513:62" pos:end="513:62"><expr pos:start="513:62" pos:end="513:62"><literal type="number" pos:start="513:62" pos:end="513:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="517:9" pos:end="517:14">break;</break>

    <case pos:start="519:5" pos:end="519:19">case <expr pos:start="519:10" pos:end="519:18"><name pos:start="519:10" pos:end="519:18">OPC_BGTZC</name></expr>:</case> <comment type="block" pos:start="519:21" pos:end="519:56">/* OPC_BLTZC, OPC_BLTC, OPC_BGTZL */</comment>

        <if_stmt pos:start="521:9" pos:end="541:9"><if pos:start="521:9" pos:end="535:9">if <condition pos:start="521:12" pos:end="521:43">(<expr pos:start="521:13" pos:end="521:42"><name pos:start="521:13" pos:end="521:27"><name pos:start="521:13" pos:end="521:15">ctx</name><operator pos:start="521:16" pos:end="521:17">-&gt;</operator><name pos:start="521:18" pos:end="521:27">insn_flags</name></name> <operator pos:start="521:29" pos:end="521:29">&amp;</operator> <name pos:start="521:31" pos:end="521:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="521:45" pos:end="535:9">{<block_content pos:start="523:13" pos:end="533:66">

            <if_stmt pos:start="523:13" pos:end="529:13"><if pos:start="523:13" pos:end="529:13">if <condition pos:start="523:16" pos:end="523:24">(<expr pos:start="523:17" pos:end="523:23"><name pos:start="523:17" pos:end="523:18">rt</name> <operator pos:start="523:20" pos:end="523:21">==</operator> <literal type="number" pos:start="523:23" pos:end="523:23">0</literal></expr>)</condition> <block pos:start="523:26" pos:end="529:13">{<block_content pos:start="525:17" pos:end="527:22">

                <expr_stmt pos:start="525:17" pos:end="525:53"><expr pos:start="525:17" pos:end="525:52"><call pos:start="525:17" pos:end="525:52"><name pos:start="525:17" pos:end="525:38">generate_exception_end</name><argument_list pos:start="525:39" pos:end="525:52">(<argument pos:start="525:40" pos:end="525:42"><expr pos:start="525:40" pos:end="525:42"><name pos:start="525:40" pos:end="525:42">ctx</name></expr></argument>, <argument pos:start="525:45" pos:end="525:51"><expr pos:start="525:45" pos:end="525:51"><name pos:start="525:45" pos:end="525:51">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="527:17" pos:end="527:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="531:13" pos:end="531:48">/* OPC_BGTZC, OPC_BLTZC, OPC_BLTC */</comment>

            <expr_stmt pos:start="533:13" pos:end="533:66"><expr pos:start="533:13" pos:end="533:65"><call pos:start="533:13" pos:end="533:65"><name pos:start="533:13" pos:end="533:38">gen_compute_compact_branch</name><argument_list pos:start="533:39" pos:end="533:65">(<argument pos:start="533:40" pos:end="533:42"><expr pos:start="533:40" pos:end="533:42"><name pos:start="533:40" pos:end="533:42">ctx</name></expr></argument>, <argument pos:start="533:45" pos:end="533:46"><expr pos:start="533:45" pos:end="533:46"><name pos:start="533:45" pos:end="533:46">op</name></expr></argument>, <argument pos:start="533:49" pos:end="533:50"><expr pos:start="533:49" pos:end="533:50"><name pos:start="533:49" pos:end="533:50">rs</name></expr></argument>, <argument pos:start="533:53" pos:end="533:54"><expr pos:start="533:53" pos:end="533:54"><name pos:start="533:53" pos:end="533:54">rt</name></expr></argument>, <argument pos:start="533:57" pos:end="533:64"><expr pos:start="533:57" pos:end="533:64"><name pos:start="533:57" pos:end="533:59">imm</name> <operator pos:start="533:61" pos:end="533:62">&lt;&lt;</operator> <literal type="number" pos:start="533:64" pos:end="533:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="535:11" pos:end="541:9">else <block pos:start="535:16" pos:end="541:9">{<block_content pos:start="539:13" pos:end="539:64">

            <comment type="block" pos:start="537:13" pos:end="537:27">/* OPC_BGTZL */</comment>

            <expr_stmt pos:start="539:13" pos:end="539:64"><expr pos:start="539:13" pos:end="539:63"><call pos:start="539:13" pos:end="539:63"><name pos:start="539:13" pos:end="539:30">gen_compute_branch</name><argument_list pos:start="539:31" pos:end="539:63">(<argument pos:start="539:32" pos:end="539:34"><expr pos:start="539:32" pos:end="539:34"><name pos:start="539:32" pos:end="539:34">ctx</name></expr></argument>, <argument pos:start="539:37" pos:end="539:38"><expr pos:start="539:37" pos:end="539:38"><name pos:start="539:37" pos:end="539:38">op</name></expr></argument>, <argument pos:start="539:41" pos:end="539:41"><expr pos:start="539:41" pos:end="539:41"><literal type="number" pos:start="539:41" pos:end="539:41">4</literal></expr></argument>, <argument pos:start="539:44" pos:end="539:45"><expr pos:start="539:44" pos:end="539:45"><name pos:start="539:44" pos:end="539:45">rs</name></expr></argument>, <argument pos:start="539:48" pos:end="539:49"><expr pos:start="539:48" pos:end="539:49"><name pos:start="539:48" pos:end="539:49">rt</name></expr></argument>, <argument pos:start="539:52" pos:end="539:59"><expr pos:start="539:52" pos:end="539:59"><name pos:start="539:52" pos:end="539:54">imm</name> <operator pos:start="539:56" pos:end="539:57">&lt;&lt;</operator> <literal type="number" pos:start="539:59" pos:end="539:59">2</literal></expr></argument>, <argument pos:start="539:62" pos:end="539:62"><expr pos:start="539:62" pos:end="539:62"><literal type="number" pos:start="539:62" pos:end="539:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="543:9" pos:end="543:14">break;</break>

    <case pos:start="545:5" pos:end="545:21">case <expr pos:start="545:10" pos:end="545:20"><name pos:start="545:10" pos:end="545:20">OPC_BLEZALC</name></expr>:</case> <comment type="block" pos:start="545:23" pos:end="545:60">/* OPC_BGEZALC, OPC_BGEUC, OPC_BLEZ */</comment>

        <if_stmt pos:start="547:9" pos:end="561:9"><if pos:start="547:9" pos:end="553:9">if <condition pos:start="547:12" pos:end="547:20">(<expr pos:start="547:13" pos:end="547:19"><name pos:start="547:13" pos:end="547:14">rt</name> <operator pos:start="547:16" pos:end="547:17">==</operator> <literal type="number" pos:start="547:19" pos:end="547:19">0</literal></expr>)</condition> <block pos:start="547:22" pos:end="553:9">{<block_content pos:start="551:13" pos:end="551:64">

            <comment type="block" pos:start="549:13" pos:end="549:26">/* OPC_BLEZ */</comment>

            <expr_stmt pos:start="551:13" pos:end="551:64"><expr pos:start="551:13" pos:end="551:63"><call pos:start="551:13" pos:end="551:63"><name pos:start="551:13" pos:end="551:30">gen_compute_branch</name><argument_list pos:start="551:31" pos:end="551:63">(<argument pos:start="551:32" pos:end="551:34"><expr pos:start="551:32" pos:end="551:34"><name pos:start="551:32" pos:end="551:34">ctx</name></expr></argument>, <argument pos:start="551:37" pos:end="551:38"><expr pos:start="551:37" pos:end="551:38"><name pos:start="551:37" pos:end="551:38">op</name></expr></argument>, <argument pos:start="551:41" pos:end="551:41"><expr pos:start="551:41" pos:end="551:41"><literal type="number" pos:start="551:41" pos:end="551:41">4</literal></expr></argument>, <argument pos:start="551:44" pos:end="551:45"><expr pos:start="551:44" pos:end="551:45"><name pos:start="551:44" pos:end="551:45">rs</name></expr></argument>, <argument pos:start="551:48" pos:end="551:49"><expr pos:start="551:48" pos:end="551:49"><name pos:start="551:48" pos:end="551:49">rt</name></expr></argument>, <argument pos:start="551:52" pos:end="551:59"><expr pos:start="551:52" pos:end="551:59"><name pos:start="551:52" pos:end="551:54">imm</name> <operator pos:start="551:56" pos:end="551:57">&lt;&lt;</operator> <literal type="number" pos:start="551:59" pos:end="551:59">2</literal></expr></argument>, <argument pos:start="551:62" pos:end="551:62"><expr pos:start="551:62" pos:end="551:62"><literal type="number" pos:start="551:62" pos:end="551:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="553:11" pos:end="561:9">else <block pos:start="553:16" pos:end="561:9">{<block_content pos:start="555:13" pos:end="559:66">

            <expr_stmt pos:start="555:13" pos:end="555:42"><expr pos:start="555:13" pos:end="555:41"><call pos:start="555:13" pos:end="555:41"><name pos:start="555:13" pos:end="555:22">check_insn</name><argument_list pos:start="555:23" pos:end="555:41">(<argument pos:start="555:24" pos:end="555:26"><expr pos:start="555:24" pos:end="555:26"><name pos:start="555:24" pos:end="555:26">ctx</name></expr></argument>, <argument pos:start="555:29" pos:end="555:40"><expr pos:start="555:29" pos:end="555:40"><name pos:start="555:29" pos:end="555:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="557:13" pos:end="557:53">/* OPC_BLEZALC, OPC_BGEZALC, OPC_BGEUC */</comment>

            <expr_stmt pos:start="559:13" pos:end="559:66"><expr pos:start="559:13" pos:end="559:65"><call pos:start="559:13" pos:end="559:65"><name pos:start="559:13" pos:end="559:38">gen_compute_compact_branch</name><argument_list pos:start="559:39" pos:end="559:65">(<argument pos:start="559:40" pos:end="559:42"><expr pos:start="559:40" pos:end="559:42"><name pos:start="559:40" pos:end="559:42">ctx</name></expr></argument>, <argument pos:start="559:45" pos:end="559:46"><expr pos:start="559:45" pos:end="559:46"><name pos:start="559:45" pos:end="559:46">op</name></expr></argument>, <argument pos:start="559:49" pos:end="559:50"><expr pos:start="559:49" pos:end="559:50"><name pos:start="559:49" pos:end="559:50">rs</name></expr></argument>, <argument pos:start="559:53" pos:end="559:54"><expr pos:start="559:53" pos:end="559:54"><name pos:start="559:53" pos:end="559:54">rt</name></expr></argument>, <argument pos:start="559:57" pos:end="559:64"><expr pos:start="559:57" pos:end="559:64"><name pos:start="559:57" pos:end="559:59">imm</name> <operator pos:start="559:61" pos:end="559:62">&lt;&lt;</operator> <literal type="number" pos:start="559:64" pos:end="559:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="563:9" pos:end="563:14">break;</break>

    <case pos:start="565:5" pos:end="565:21">case <expr pos:start="565:10" pos:end="565:20"><name pos:start="565:10" pos:end="565:20">OPC_BGTZALC</name></expr>:</case> <comment type="block" pos:start="565:23" pos:end="565:60">/* OPC_BLTZALC, OPC_BLTUC, OPC_BGTZ */</comment>

        <if_stmt pos:start="567:9" pos:end="581:9"><if pos:start="567:9" pos:end="573:9">if <condition pos:start="567:12" pos:end="567:20">(<expr pos:start="567:13" pos:end="567:19"><name pos:start="567:13" pos:end="567:14">rt</name> <operator pos:start="567:16" pos:end="567:17">==</operator> <literal type="number" pos:start="567:19" pos:end="567:19">0</literal></expr>)</condition> <block pos:start="567:22" pos:end="573:9">{<block_content pos:start="571:13" pos:end="571:64">

            <comment type="block" pos:start="569:13" pos:end="569:26">/* OPC_BGTZ */</comment>

            <expr_stmt pos:start="571:13" pos:end="571:64"><expr pos:start="571:13" pos:end="571:63"><call pos:start="571:13" pos:end="571:63"><name pos:start="571:13" pos:end="571:30">gen_compute_branch</name><argument_list pos:start="571:31" pos:end="571:63">(<argument pos:start="571:32" pos:end="571:34"><expr pos:start="571:32" pos:end="571:34"><name pos:start="571:32" pos:end="571:34">ctx</name></expr></argument>, <argument pos:start="571:37" pos:end="571:38"><expr pos:start="571:37" pos:end="571:38"><name pos:start="571:37" pos:end="571:38">op</name></expr></argument>, <argument pos:start="571:41" pos:end="571:41"><expr pos:start="571:41" pos:end="571:41"><literal type="number" pos:start="571:41" pos:end="571:41">4</literal></expr></argument>, <argument pos:start="571:44" pos:end="571:45"><expr pos:start="571:44" pos:end="571:45"><name pos:start="571:44" pos:end="571:45">rs</name></expr></argument>, <argument pos:start="571:48" pos:end="571:49"><expr pos:start="571:48" pos:end="571:49"><name pos:start="571:48" pos:end="571:49">rt</name></expr></argument>, <argument pos:start="571:52" pos:end="571:59"><expr pos:start="571:52" pos:end="571:59"><name pos:start="571:52" pos:end="571:54">imm</name> <operator pos:start="571:56" pos:end="571:57">&lt;&lt;</operator> <literal type="number" pos:start="571:59" pos:end="571:59">2</literal></expr></argument>, <argument pos:start="571:62" pos:end="571:62"><expr pos:start="571:62" pos:end="571:62"><literal type="number" pos:start="571:62" pos:end="571:62">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="573:11" pos:end="581:9">else <block pos:start="573:16" pos:end="581:9">{<block_content pos:start="575:13" pos:end="579:66">

            <expr_stmt pos:start="575:13" pos:end="575:42"><expr pos:start="575:13" pos:end="575:41"><call pos:start="575:13" pos:end="575:41"><name pos:start="575:13" pos:end="575:22">check_insn</name><argument_list pos:start="575:23" pos:end="575:41">(<argument pos:start="575:24" pos:end="575:26"><expr pos:start="575:24" pos:end="575:26"><name pos:start="575:24" pos:end="575:26">ctx</name></expr></argument>, <argument pos:start="575:29" pos:end="575:40"><expr pos:start="575:29" pos:end="575:40"><name pos:start="575:29" pos:end="575:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="577:13" pos:end="577:53">/* OPC_BGTZALC, OPC_BLTZALC, OPC_BLTUC */</comment>

            <expr_stmt pos:start="579:13" pos:end="579:66"><expr pos:start="579:13" pos:end="579:65"><call pos:start="579:13" pos:end="579:65"><name pos:start="579:13" pos:end="579:38">gen_compute_compact_branch</name><argument_list pos:start="579:39" pos:end="579:65">(<argument pos:start="579:40" pos:end="579:42"><expr pos:start="579:40" pos:end="579:42"><name pos:start="579:40" pos:end="579:42">ctx</name></expr></argument>, <argument pos:start="579:45" pos:end="579:46"><expr pos:start="579:45" pos:end="579:46"><name pos:start="579:45" pos:end="579:46">op</name></expr></argument>, <argument pos:start="579:49" pos:end="579:50"><expr pos:start="579:49" pos:end="579:50"><name pos:start="579:49" pos:end="579:50">rs</name></expr></argument>, <argument pos:start="579:53" pos:end="579:54"><expr pos:start="579:53" pos:end="579:54"><name pos:start="579:53" pos:end="579:54">rt</name></expr></argument>, <argument pos:start="579:57" pos:end="579:64"><expr pos:start="579:57" pos:end="579:64"><name pos:start="579:57" pos:end="579:59">imm</name> <operator pos:start="579:61" pos:end="579:62">&lt;&lt;</operator> <literal type="number" pos:start="579:64" pos:end="579:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="583:9" pos:end="583:14">break;</break>

    <case pos:start="585:5" pos:end="585:18">case <expr pos:start="585:10" pos:end="585:17"><name pos:start="585:10" pos:end="585:17">OPC_BEQL</name></expr>:</case>

    <case pos:start="587:5" pos:end="587:18">case <expr pos:start="587:10" pos:end="587:17"><name pos:start="587:10" pos:end="587:17">OPC_BNEL</name></expr>:</case>

        <expr_stmt pos:start="589:9" pos:end="589:35"><expr pos:start="589:9" pos:end="589:34"><call pos:start="589:9" pos:end="589:34"><name pos:start="589:9" pos:end="589:18">check_insn</name><argument_list pos:start="589:19" pos:end="589:34">(<argument pos:start="589:20" pos:end="589:22"><expr pos:start="589:20" pos:end="589:22"><name pos:start="589:20" pos:end="589:22">ctx</name></expr></argument>, <argument pos:start="589:25" pos:end="589:33"><expr pos:start="589:25" pos:end="589:33"><name pos:start="589:25" pos:end="589:33">ISA_MIPS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="591:10" pos:end="591:51"><expr pos:start="591:10" pos:end="591:50"><call pos:start="591:10" pos:end="591:50"><name pos:start="591:10" pos:end="591:31">check_insn_opc_removed</name><argument_list pos:start="591:32" pos:end="591:50">(<argument pos:start="591:33" pos:end="591:35"><expr pos:start="591:33" pos:end="591:35"><name pos:start="591:33" pos:end="591:35">ctx</name></expr></argument>, <argument pos:start="591:38" pos:end="591:49"><expr pos:start="591:38" pos:end="591:49"><name pos:start="591:38" pos:end="591:49">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="593:9" pos:end="593:25">/* Fallthrough */</comment>

    <case pos:start="595:5" pos:end="595:17">case <expr pos:start="595:10" pos:end="595:16"><name pos:start="595:10" pos:end="595:16">OPC_BEQ</name></expr>:</case>

    <case pos:start="597:5" pos:end="597:17">case <expr pos:start="597:10" pos:end="597:16"><name pos:start="597:10" pos:end="597:16">OPC_BNE</name></expr>:</case>

         <expr_stmt pos:start="599:10" pos:end="599:61"><expr pos:start="599:10" pos:end="599:60"><call pos:start="599:10" pos:end="599:60"><name pos:start="599:10" pos:end="599:27">gen_compute_branch</name><argument_list pos:start="599:28" pos:end="599:60">(<argument pos:start="599:29" pos:end="599:31"><expr pos:start="599:29" pos:end="599:31"><name pos:start="599:29" pos:end="599:31">ctx</name></expr></argument>, <argument pos:start="599:34" pos:end="599:35"><expr pos:start="599:34" pos:end="599:35"><name pos:start="599:34" pos:end="599:35">op</name></expr></argument>, <argument pos:start="599:38" pos:end="599:38"><expr pos:start="599:38" pos:end="599:38"><literal type="number" pos:start="599:38" pos:end="599:38">4</literal></expr></argument>, <argument pos:start="599:41" pos:end="599:42"><expr pos:start="599:41" pos:end="599:42"><name pos:start="599:41" pos:end="599:42">rs</name></expr></argument>, <argument pos:start="599:45" pos:end="599:46"><expr pos:start="599:45" pos:end="599:46"><name pos:start="599:45" pos:end="599:46">rt</name></expr></argument>, <argument pos:start="599:49" pos:end="599:56"><expr pos:start="599:49" pos:end="599:56"><name pos:start="599:49" pos:end="599:51">imm</name> <operator pos:start="599:53" pos:end="599:54">&lt;&lt;</operator> <literal type="number" pos:start="599:56" pos:end="599:56">2</literal></expr></argument>, <argument pos:start="599:59" pos:end="599:59"><expr pos:start="599:59" pos:end="599:59"><literal type="number" pos:start="599:59" pos:end="599:59">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="601:10" pos:end="601:15">break;</break>

    <case pos:start="603:5" pos:end="603:16">case <expr pos:start="603:10" pos:end="603:15"><name pos:start="603:10" pos:end="603:15">OPC_LL</name></expr>:</case> <comment type="block" pos:start="603:18" pos:end="603:38">/* Load and stores */</comment>

        <expr_stmt pos:start="605:9" pos:end="605:35"><expr pos:start="605:9" pos:end="605:34"><call pos:start="605:9" pos:end="605:34"><name pos:start="605:9" pos:end="605:18">check_insn</name><argument_list pos:start="605:19" pos:end="605:34">(<argument pos:start="605:20" pos:end="605:22"><expr pos:start="605:20" pos:end="605:22"><name pos:start="605:20" pos:end="605:22">ctx</name></expr></argument>, <argument pos:start="605:25" pos:end="605:33"><expr pos:start="605:25" pos:end="605:33"><name pos:start="605:25" pos:end="605:33">ISA_MIPS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="607:9" pos:end="607:25">/* Fallthrough */</comment>

    <case pos:start="609:5" pos:end="609:17">case <expr pos:start="609:10" pos:end="609:16"><name pos:start="609:10" pos:end="609:16">OPC_LWL</name></expr>:</case>

    <case pos:start="611:5" pos:end="611:17">case <expr pos:start="611:10" pos:end="611:16"><name pos:start="611:10" pos:end="611:16">OPC_LWR</name></expr>:</case>

        <expr_stmt pos:start="613:9" pos:end="613:50"><expr pos:start="613:9" pos:end="613:49"><call pos:start="613:9" pos:end="613:49"><name pos:start="613:9" pos:end="613:30">check_insn_opc_removed</name><argument_list pos:start="613:31" pos:end="613:49">(<argument pos:start="613:32" pos:end="613:34"><expr pos:start="613:32" pos:end="613:34"><name pos:start="613:32" pos:end="613:34">ctx</name></expr></argument>, <argument pos:start="613:37" pos:end="613:48"><expr pos:start="613:37" pos:end="613:48"><name pos:start="613:37" pos:end="613:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <comment type="block" pos:start="615:10" pos:end="615:26">/* Fallthrough */</comment>

    <case pos:start="617:5" pos:end="617:27">case <expr pos:start="617:10" pos:end="617:26"><name pos:start="617:10" pos:end="617:15">OPC_LB</name> <operator pos:start="617:17" pos:end="617:19">...</operator> <name pos:start="617:21" pos:end="617:26">OPC_LH</name></expr>:</case>

    <case pos:start="619:5" pos:end="619:28">case <expr pos:start="619:10" pos:end="619:27"><name pos:start="619:10" pos:end="619:15">OPC_LW</name> <operator pos:start="619:17" pos:end="619:19">...</operator> <name pos:start="619:21" pos:end="619:27">OPC_LHU</name></expr>:</case>

         <expr_stmt pos:start="621:10" pos:end="621:38"><expr pos:start="621:10" pos:end="621:37"><call pos:start="621:10" pos:end="621:37"><name pos:start="621:10" pos:end="621:15">gen_ld</name><argument_list pos:start="621:16" pos:end="621:37">(<argument pos:start="621:17" pos:end="621:19"><expr pos:start="621:17" pos:end="621:19"><name pos:start="621:17" pos:end="621:19">ctx</name></expr></argument>, <argument pos:start="621:22" pos:end="621:23"><expr pos:start="621:22" pos:end="621:23"><name pos:start="621:22" pos:end="621:23">op</name></expr></argument>, <argument pos:start="621:26" pos:end="621:27"><expr pos:start="621:26" pos:end="621:27"><name pos:start="621:26" pos:end="621:27">rt</name></expr></argument>, <argument pos:start="621:30" pos:end="621:31"><expr pos:start="621:30" pos:end="621:31"><name pos:start="621:30" pos:end="621:31">rs</name></expr></argument>, <argument pos:start="621:34" pos:end="621:36"><expr pos:start="621:34" pos:end="621:36"><name pos:start="621:34" pos:end="621:36">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="623:10" pos:end="623:15">break;</break>

    <case pos:start="625:5" pos:end="625:17">case <expr pos:start="625:10" pos:end="625:16"><name pos:start="625:10" pos:end="625:16">OPC_SWL</name></expr>:</case>

    <case pos:start="627:5" pos:end="627:17">case <expr pos:start="627:10" pos:end="627:16"><name pos:start="627:10" pos:end="627:16">OPC_SWR</name></expr>:</case>

        <expr_stmt pos:start="629:9" pos:end="629:50"><expr pos:start="629:9" pos:end="629:49"><call pos:start="629:9" pos:end="629:49"><name pos:start="629:9" pos:end="629:30">check_insn_opc_removed</name><argument_list pos:start="629:31" pos:end="629:49">(<argument pos:start="629:32" pos:end="629:34"><expr pos:start="629:32" pos:end="629:34"><name pos:start="629:32" pos:end="629:34">ctx</name></expr></argument>, <argument pos:start="629:37" pos:end="629:48"><expr pos:start="629:37" pos:end="629:48"><name pos:start="629:37" pos:end="629:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="631:9" pos:end="631:26">/* fall through */</comment>

    <case pos:start="633:5" pos:end="633:27">case <expr pos:start="633:10" pos:end="633:26"><name pos:start="633:10" pos:end="633:15">OPC_SB</name> <operator pos:start="633:17" pos:end="633:19">...</operator> <name pos:start="633:21" pos:end="633:26">OPC_SH</name></expr>:</case>

    <case pos:start="635:5" pos:end="635:16">case <expr pos:start="635:10" pos:end="635:15"><name pos:start="635:10" pos:end="635:15">OPC_SW</name></expr>:</case>

         <expr_stmt pos:start="637:10" pos:end="637:38"><expr pos:start="637:10" pos:end="637:37"><call pos:start="637:10" pos:end="637:37"><name pos:start="637:10" pos:end="637:15">gen_st</name><argument_list pos:start="637:16" pos:end="637:37">(<argument pos:start="637:17" pos:end="637:19"><expr pos:start="637:17" pos:end="637:19"><name pos:start="637:17" pos:end="637:19">ctx</name></expr></argument>, <argument pos:start="637:22" pos:end="637:23"><expr pos:start="637:22" pos:end="637:23"><name pos:start="637:22" pos:end="637:23">op</name></expr></argument>, <argument pos:start="637:26" pos:end="637:27"><expr pos:start="637:26" pos:end="637:27"><name pos:start="637:26" pos:end="637:27">rt</name></expr></argument>, <argument pos:start="637:30" pos:end="637:31"><expr pos:start="637:30" pos:end="637:31"><name pos:start="637:30" pos:end="637:31">rs</name></expr></argument>, <argument pos:start="637:34" pos:end="637:36"><expr pos:start="637:34" pos:end="637:36"><name pos:start="637:34" pos:end="637:36">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="639:10" pos:end="639:15">break;</break>

    <case pos:start="641:5" pos:end="641:16">case <expr pos:start="641:10" pos:end="641:15"><name pos:start="641:10" pos:end="641:15">OPC_SC</name></expr>:</case>

        <expr_stmt pos:start="643:9" pos:end="643:35"><expr pos:start="643:9" pos:end="643:34"><call pos:start="643:9" pos:end="643:34"><name pos:start="643:9" pos:end="643:18">check_insn</name><argument_list pos:start="643:19" pos:end="643:34">(<argument pos:start="643:20" pos:end="643:22"><expr pos:start="643:20" pos:end="643:22"><name pos:start="643:20" pos:end="643:22">ctx</name></expr></argument>, <argument pos:start="643:25" pos:end="643:33"><expr pos:start="643:25" pos:end="643:33"><name pos:start="643:25" pos:end="643:33">ISA_MIPS2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="645:10" pos:end="645:51"><expr pos:start="645:10" pos:end="645:50"><call pos:start="645:10" pos:end="645:50"><name pos:start="645:10" pos:end="645:31">check_insn_opc_removed</name><argument_list pos:start="645:32" pos:end="645:50">(<argument pos:start="645:33" pos:end="645:35"><expr pos:start="645:33" pos:end="645:35"><name pos:start="645:33" pos:end="645:35">ctx</name></expr></argument>, <argument pos:start="645:38" pos:end="645:49"><expr pos:start="645:38" pos:end="645:49"><name pos:start="645:38" pos:end="645:49">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <expr_stmt pos:start="647:10" pos:end="647:43"><expr pos:start="647:10" pos:end="647:42"><call pos:start="647:10" pos:end="647:42"><name pos:start="647:10" pos:end="647:20">gen_st_cond</name><argument_list pos:start="647:21" pos:end="647:42">(<argument pos:start="647:22" pos:end="647:24"><expr pos:start="647:22" pos:end="647:24"><name pos:start="647:22" pos:end="647:24">ctx</name></expr></argument>, <argument pos:start="647:27" pos:end="647:28"><expr pos:start="647:27" pos:end="647:28"><name pos:start="647:27" pos:end="647:28">op</name></expr></argument>, <argument pos:start="647:31" pos:end="647:32"><expr pos:start="647:31" pos:end="647:32"><name pos:start="647:31" pos:end="647:32">rt</name></expr></argument>, <argument pos:start="647:35" pos:end="647:36"><expr pos:start="647:35" pos:end="647:36"><name pos:start="647:35" pos:end="647:36">rs</name></expr></argument>, <argument pos:start="647:39" pos:end="647:41"><expr pos:start="647:39" pos:end="647:41"><name pos:start="647:39" pos:end="647:41">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="649:10" pos:end="649:15">break;</break>

    <case pos:start="651:5" pos:end="651:19">case <expr pos:start="651:10" pos:end="651:18"><name pos:start="651:10" pos:end="651:18">OPC_CACHE</name></expr>:</case>

        <expr_stmt pos:start="653:9" pos:end="653:50"><expr pos:start="653:9" pos:end="653:49"><call pos:start="653:9" pos:end="653:49"><name pos:start="653:9" pos:end="653:30">check_insn_opc_removed</name><argument_list pos:start="653:31" pos:end="653:49">(<argument pos:start="653:32" pos:end="653:34"><expr pos:start="653:32" pos:end="653:34"><name pos:start="653:32" pos:end="653:34">ctx</name></expr></argument>, <argument pos:start="653:37" pos:end="653:48"><expr pos:start="653:37" pos:end="653:48"><name pos:start="653:37" pos:end="653:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="655:9" pos:end="655:31"><expr pos:start="655:9" pos:end="655:30"><call pos:start="655:9" pos:end="655:30"><name pos:start="655:9" pos:end="655:25">check_cp0_enabled</name><argument_list pos:start="655:26" pos:end="655:30">(<argument pos:start="655:27" pos:end="655:29"><expr pos:start="655:27" pos:end="655:29"><name pos:start="655:27" pos:end="655:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="657:9" pos:end="657:48"><expr pos:start="657:9" pos:end="657:47"><call pos:start="657:9" pos:end="657:47"><name pos:start="657:9" pos:end="657:18">check_insn</name><argument_list pos:start="657:19" pos:end="657:47">(<argument pos:start="657:20" pos:end="657:22"><expr pos:start="657:20" pos:end="657:22"><name pos:start="657:20" pos:end="657:22">ctx</name></expr></argument>, <argument pos:start="657:25" pos:end="657:46"><expr pos:start="657:25" pos:end="657:46"><name pos:start="657:25" pos:end="657:33">ISA_MIPS3</name> <operator pos:start="657:35" pos:end="657:35">|</operator> <name pos:start="657:37" pos:end="657:46">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="659:9" pos:end="663:9"><if pos:start="659:9" pos:end="663:9">if <condition pos:start="659:12" pos:end="659:47">(<expr pos:start="659:13" pos:end="659:46"><name pos:start="659:13" pos:end="659:23"><name pos:start="659:13" pos:end="659:15">ctx</name><operator pos:start="659:16" pos:end="659:17">-&gt;</operator><name pos:start="659:18" pos:end="659:23">hflags</name></name> <operator pos:start="659:25" pos:end="659:25">&amp;</operator> <name pos:start="659:27" pos:end="659:46">MIPS_HFLAG_ITC_CACHE</name></expr>)</condition> <block pos:start="659:49" pos:end="663:9">{<block_content pos:start="661:13" pos:end="661:50">

            <expr_stmt pos:start="661:13" pos:end="661:50"><expr pos:start="661:13" pos:end="661:49"><call pos:start="661:13" pos:end="661:49"><name pos:start="661:13" pos:end="661:31">gen_cache_operation</name><argument_list pos:start="661:32" pos:end="661:49">(<argument pos:start="661:33" pos:end="661:35"><expr pos:start="661:33" pos:end="661:35"><name pos:start="661:33" pos:end="661:35">ctx</name></expr></argument>, <argument pos:start="661:38" pos:end="661:39"><expr pos:start="661:38" pos:end="661:39"><name pos:start="661:38" pos:end="661:39">rt</name></expr></argument>, <argument pos:start="661:42" pos:end="661:43"><expr pos:start="661:42" pos:end="661:43"><name pos:start="661:42" pos:end="661:43">rs</name></expr></argument>, <argument pos:start="661:46" pos:end="661:48"><expr pos:start="661:46" pos:end="661:48"><name pos:start="661:46" pos:end="661:48">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="665:9" pos:end="665:27">/* Treat as NOP. */</comment>

        <break pos:start="667:9" pos:end="667:14">break;</break>

    <case pos:start="669:5" pos:end="669:18">case <expr pos:start="669:10" pos:end="669:17"><name pos:start="669:10" pos:end="669:17">OPC_PREF</name></expr>:</case>

        <expr_stmt pos:start="671:9" pos:end="671:50"><expr pos:start="671:9" pos:end="671:49"><call pos:start="671:9" pos:end="671:49"><name pos:start="671:9" pos:end="671:30">check_insn_opc_removed</name><argument_list pos:start="671:31" pos:end="671:49">(<argument pos:start="671:32" pos:end="671:34"><expr pos:start="671:32" pos:end="671:34"><name pos:start="671:32" pos:end="671:34">ctx</name></expr></argument>, <argument pos:start="671:37" pos:end="671:48"><expr pos:start="671:37" pos:end="671:48"><name pos:start="671:37" pos:end="671:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="673:9" pos:end="673:48"><expr pos:start="673:9" pos:end="673:47"><call pos:start="673:9" pos:end="673:47"><name pos:start="673:9" pos:end="673:18">check_insn</name><argument_list pos:start="673:19" pos:end="673:47">(<argument pos:start="673:20" pos:end="673:22"><expr pos:start="673:20" pos:end="673:22"><name pos:start="673:20" pos:end="673:22">ctx</name></expr></argument>, <argument pos:start="673:25" pos:end="673:46"><expr pos:start="673:25" pos:end="673:46"><name pos:start="673:25" pos:end="673:33">ISA_MIPS4</name> <operator pos:start="673:35" pos:end="673:35">|</operator> <name pos:start="673:37" pos:end="673:46">ISA_MIPS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="675:9" pos:end="675:27">/* Treat as NOP. */</comment>

        <break pos:start="677:9" pos:end="677:14">break;</break>



    <comment type="block" pos:start="681:5" pos:end="681:32">/* Floating point (COP1). */</comment>

    <case pos:start="683:5" pos:end="683:18">case <expr pos:start="683:10" pos:end="683:17"><name pos:start="683:10" pos:end="683:17">OPC_LWC1</name></expr>:</case>

    <case pos:start="685:5" pos:end="685:18">case <expr pos:start="685:10" pos:end="685:17"><name pos:start="685:10" pos:end="685:17">OPC_LDC1</name></expr>:</case>

    <case pos:start="687:5" pos:end="687:18">case <expr pos:start="687:10" pos:end="687:17"><name pos:start="687:10" pos:end="687:17">OPC_SWC1</name></expr>:</case>

    <case pos:start="689:5" pos:end="689:18">case <expr pos:start="689:10" pos:end="689:17"><name pos:start="689:10" pos:end="689:17">OPC_SDC1</name></expr>:</case>

        <expr_stmt pos:start="691:9" pos:end="691:44"><expr pos:start="691:9" pos:end="691:43"><call pos:start="691:9" pos:end="691:43"><name pos:start="691:9" pos:end="691:21">gen_cop1_ldst</name><argument_list pos:start="691:22" pos:end="691:43">(<argument pos:start="691:23" pos:end="691:25"><expr pos:start="691:23" pos:end="691:25"><name pos:start="691:23" pos:end="691:25">ctx</name></expr></argument>, <argument pos:start="691:28" pos:end="691:29"><expr pos:start="691:28" pos:end="691:29"><name pos:start="691:28" pos:end="691:29">op</name></expr></argument>, <argument pos:start="691:32" pos:end="691:33"><expr pos:start="691:32" pos:end="691:33"><name pos:start="691:32" pos:end="691:33">rt</name></expr></argument>, <argument pos:start="691:36" pos:end="691:37"><expr pos:start="691:36" pos:end="691:37"><name pos:start="691:36" pos:end="691:37">rs</name></expr></argument>, <argument pos:start="691:40" pos:end="691:42"><expr pos:start="691:40" pos:end="691:42"><name pos:start="691:40" pos:end="691:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="693:9" pos:end="693:14">break;</break>



    <case pos:start="697:5" pos:end="697:17">case <expr pos:start="697:10" pos:end="697:16"><name pos:start="697:10" pos:end="697:16">OPC_CP1</name></expr>:</case>

        <expr_stmt pos:start="699:9" pos:end="699:36"><expr pos:start="699:9" pos:end="699:35"><name pos:start="699:9" pos:end="699:11">op1</name> <operator pos:start="699:13" pos:end="699:13">=</operator> <call pos:start="699:15" pos:end="699:35"><name pos:start="699:15" pos:end="699:22">MASK_CP1</name><argument_list pos:start="699:23" pos:end="699:35">(<argument pos:start="699:24" pos:end="699:34"><expr pos:start="699:24" pos:end="699:34"><name pos:start="699:24" pos:end="699:34"><name pos:start="699:24" pos:end="699:26">ctx</name><operator pos:start="699:27" pos:end="699:28">-&gt;</operator><name pos:start="699:29" pos:end="699:34">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <switch pos:start="703:9" pos:end="995:9">switch <condition pos:start="703:16" pos:end="703:20">(<expr pos:start="703:17" pos:end="703:19"><name pos:start="703:17" pos:end="703:19">op1</name></expr>)</condition> <block pos:start="703:22" pos:end="995:9">{<block_content pos:start="705:9" pos:end="993:18">

        <case pos:start="705:9" pos:end="705:23">case <expr pos:start="705:14" pos:end="705:22"><name pos:start="705:14" pos:end="705:22">OPC_MFHC1</name></expr>:</case>

        <case pos:start="707:9" pos:end="707:23">case <expr pos:start="707:14" pos:end="707:22"><name pos:start="707:14" pos:end="707:22">OPC_MTHC1</name></expr>:</case>

            <expr_stmt pos:start="709:13" pos:end="709:35"><expr pos:start="709:13" pos:end="709:34"><call pos:start="709:13" pos:end="709:34"><name pos:start="709:13" pos:end="709:29">check_cp1_enabled</name><argument_list pos:start="709:30" pos:end="709:34">(<argument pos:start="709:31" pos:end="709:33"><expr pos:start="709:31" pos:end="709:33"><name pos:start="709:31" pos:end="709:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="711:13" pos:end="711:42"><expr pos:start="711:13" pos:end="711:41"><call pos:start="711:13" pos:end="711:41"><name pos:start="711:13" pos:end="711:22">check_insn</name><argument_list pos:start="711:23" pos:end="711:41">(<argument pos:start="711:24" pos:end="711:26"><expr pos:start="711:24" pos:end="711:26"><name pos:start="711:24" pos:end="711:26">ctx</name></expr></argument>, <argument pos:start="711:29" pos:end="711:40"><expr pos:start="711:29" pos:end="711:40"><name pos:start="711:29" pos:end="711:40">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case pos:start="713:9" pos:end="713:22">case <expr pos:start="713:14" pos:end="713:21"><name pos:start="713:14" pos:end="713:21">OPC_MFC1</name></expr>:</case>

        <case pos:start="715:9" pos:end="715:22">case <expr pos:start="715:14" pos:end="715:21"><name pos:start="715:14" pos:end="715:21">OPC_CFC1</name></expr>:</case>

        <case pos:start="717:9" pos:end="717:22">case <expr pos:start="717:14" pos:end="717:21"><name pos:start="717:14" pos:end="717:21">OPC_MTC1</name></expr>:</case>

        <case pos:start="719:9" pos:end="719:22">case <expr pos:start="719:14" pos:end="719:21"><name pos:start="719:14" pos:end="719:21">OPC_CTC1</name></expr>:</case>

            <expr_stmt pos:start="721:13" pos:end="721:35"><expr pos:start="721:13" pos:end="721:34"><call pos:start="721:13" pos:end="721:34"><name pos:start="721:13" pos:end="721:29">check_cp1_enabled</name><argument_list pos:start="721:30" pos:end="721:34">(<argument pos:start="721:31" pos:end="721:33"><expr pos:start="721:31" pos:end="721:33"><name pos:start="721:31" pos:end="721:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:38"><expr pos:start="723:13" pos:end="723:37"><call pos:start="723:13" pos:end="723:37"><name pos:start="723:13" pos:end="723:19">gen_cp1</name><argument_list pos:start="723:20" pos:end="723:37">(<argument pos:start="723:21" pos:end="723:23"><expr pos:start="723:21" pos:end="723:23"><name pos:start="723:21" pos:end="723:23">ctx</name></expr></argument>, <argument pos:start="723:26" pos:end="723:28"><expr pos:start="723:26" pos:end="723:28"><name pos:start="723:26" pos:end="723:28">op1</name></expr></argument>, <argument pos:start="723:31" pos:end="723:32"><expr pos:start="723:31" pos:end="723:32"><name pos:start="723:31" pos:end="723:32">rt</name></expr></argument>, <argument pos:start="723:35" pos:end="723:36"><expr pos:start="723:35" pos:end="723:36"><name pos:start="723:35" pos:end="723:36">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="725:13" pos:end="728:0">break;</break>

<cpp:if pos:start="727:1" pos:end="727:26">#<cpp:directive pos:start="727:2" pos:end="727:3">if</cpp:directive> <expr pos:start="727:5" pos:end="727:26"><call pos:start="727:5" pos:end="727:26"><name pos:start="727:5" pos:end="727:11">defined</name><argument_list pos:start="727:12" pos:end="727:26">(<argument pos:start="727:13" pos:end="727:25"><expr pos:start="727:13" pos:end="727:25"><name pos:start="727:13" pos:end="727:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <case pos:start="729:9" pos:end="729:23">case <expr pos:start="729:14" pos:end="729:22"><name pos:start="729:14" pos:end="729:22">OPC_DMFC1</name></expr>:</case>

        <case pos:start="731:9" pos:end="731:23">case <expr pos:start="731:14" pos:end="731:22"><name pos:start="731:14" pos:end="731:22">OPC_DMTC1</name></expr>:</case>

            <expr_stmt pos:start="733:13" pos:end="733:35"><expr pos:start="733:13" pos:end="733:34"><call pos:start="733:13" pos:end="733:34"><name pos:start="733:13" pos:end="733:29">check_cp1_enabled</name><argument_list pos:start="733:30" pos:end="733:34">(<argument pos:start="733:31" pos:end="733:33"><expr pos:start="733:31" pos:end="733:33"><name pos:start="733:31" pos:end="733:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:39"><expr pos:start="735:13" pos:end="735:38"><call pos:start="735:13" pos:end="735:38"><name pos:start="735:13" pos:end="735:22">check_insn</name><argument_list pos:start="735:23" pos:end="735:38">(<argument pos:start="735:24" pos:end="735:26"><expr pos:start="735:24" pos:end="735:26"><name pos:start="735:24" pos:end="735:26">ctx</name></expr></argument>, <argument pos:start="735:29" pos:end="735:37"><expr pos:start="735:29" pos:end="735:37"><name pos:start="735:29" pos:end="735:37">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:31"><expr pos:start="737:13" pos:end="737:30"><call pos:start="737:13" pos:end="737:30"><name pos:start="737:13" pos:end="737:25">check_mips_64</name><argument_list pos:start="737:26" pos:end="737:30">(<argument pos:start="737:27" pos:end="737:29"><expr pos:start="737:27" pos:end="737:29"><name pos:start="737:27" pos:end="737:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:38"><expr pos:start="739:13" pos:end="739:37"><call pos:start="739:13" pos:end="739:37"><name pos:start="739:13" pos:end="739:19">gen_cp1</name><argument_list pos:start="739:20" pos:end="739:37">(<argument pos:start="739:21" pos:end="739:23"><expr pos:start="739:21" pos:end="739:23"><name pos:start="739:21" pos:end="739:23">ctx</name></expr></argument>, <argument pos:start="739:26" pos:end="739:28"><expr pos:start="739:26" pos:end="739:28"><name pos:start="739:26" pos:end="739:28">op1</name></expr></argument>, <argument pos:start="739:31" pos:end="739:32"><expr pos:start="739:31" pos:end="739:32"><name pos:start="739:31" pos:end="739:32">rt</name></expr></argument>, <argument pos:start="739:35" pos:end="739:36"><expr pos:start="739:35" pos:end="739:36"><name pos:start="739:35" pos:end="739:36">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="741:13" pos:end="744:0">break;</break>

<cpp:endif pos:start="743:1" pos:end="743:6">#<cpp:directive pos:start="743:2" pos:end="743:6">endif</cpp:directive></cpp:endif>

        <case pos:start="745:9" pos:end="745:24">case <expr pos:start="745:14" pos:end="745:23"><name pos:start="745:14" pos:end="745:23">OPC_BC1EQZ</name></expr>:</case> <comment type="block" pos:start="745:26" pos:end="745:42">/* OPC_BC1ANY2 */</comment>

            <expr_stmt pos:start="747:13" pos:end="747:35"><expr pos:start="747:13" pos:end="747:34"><call pos:start="747:13" pos:end="747:34"><name pos:start="747:13" pos:end="747:29">check_cp1_enabled</name><argument_list pos:start="747:30" pos:end="747:34">(<argument pos:start="747:31" pos:end="747:33"><expr pos:start="747:31" pos:end="747:33"><name pos:start="747:31" pos:end="747:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="749:13" pos:end="769:13"><if pos:start="749:13" pos:end="757:13">if <condition pos:start="749:16" pos:end="749:47">(<expr pos:start="749:17" pos:end="749:46"><name pos:start="749:17" pos:end="749:31"><name pos:start="749:17" pos:end="749:19">ctx</name><operator pos:start="749:20" pos:end="749:21">-&gt;</operator><name pos:start="749:22" pos:end="749:31">insn_flags</name></name> <operator pos:start="749:33" pos:end="749:33">&amp;</operator> <name pos:start="749:35" pos:end="749:46">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="749:49" pos:end="757:13">{<block_content pos:start="753:17" pos:end="755:56">

                <comment type="block" pos:start="751:17" pos:end="751:32">/* OPC_BC1EQZ */</comment>

                <expr_stmt pos:start="753:17" pos:end="755:56"><expr pos:start="753:17" pos:end="755:55"><call pos:start="753:17" pos:end="755:55"><name pos:start="753:17" pos:end="753:38">gen_compute_branch1_r6</name><argument_list pos:start="753:39" pos:end="755:55">(<argument pos:start="753:40" pos:end="753:42"><expr pos:start="753:40" pos:end="753:42"><name pos:start="753:40" pos:end="753:42">ctx</name></expr></argument>, <argument pos:start="753:45" pos:end="753:65"><expr pos:start="753:45" pos:end="753:65"><call pos:start="753:45" pos:end="753:65"><name pos:start="753:45" pos:end="753:52">MASK_CP1</name><argument_list pos:start="753:53" pos:end="753:65">(<argument pos:start="753:54" pos:end="753:64"><expr pos:start="753:54" pos:end="753:64"><name pos:start="753:54" pos:end="753:64"><name pos:start="753:54" pos:end="753:56">ctx</name><operator pos:start="753:57" pos:end="753:58">-&gt;</operator><name pos:start="753:59" pos:end="753:64">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                       <argument pos:start="755:40" pos:end="755:41"><expr pos:start="755:40" pos:end="755:41"><name pos:start="755:40" pos:end="755:41">rt</name></expr></argument>, <argument pos:start="755:44" pos:end="755:51"><expr pos:start="755:44" pos:end="755:51"><name pos:start="755:44" pos:end="755:46">imm</name> <operator pos:start="755:48" pos:end="755:49">&lt;&lt;</operator> <literal type="number" pos:start="755:51" pos:end="755:51">2</literal></expr></argument>, <argument pos:start="755:54" pos:end="755:54"><expr pos:start="755:54" pos:end="755:54"><literal type="number" pos:start="755:54" pos:end="755:54">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="757:15" pos:end="769:13">else <block pos:start="757:20" pos:end="769:13">{<block_content pos:start="761:17" pos:end="767:63">

                <comment type="block" pos:start="759:17" pos:end="759:33">/* OPC_BC1ANY2 */</comment>

                <expr_stmt pos:start="761:17" pos:end="761:33"><expr pos:start="761:17" pos:end="761:32"><call pos:start="761:17" pos:end="761:32"><name pos:start="761:17" pos:end="761:27">check_cop1x</name><argument_list pos:start="761:28" pos:end="761:32">(<argument pos:start="761:29" pos:end="761:31"><expr pos:start="761:29" pos:end="761:31"><name pos:start="761:29" pos:end="761:31">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="763:17" pos:end="763:44"><expr pos:start="763:17" pos:end="763:43"><call pos:start="763:17" pos:end="763:43"><name pos:start="763:17" pos:end="763:26">check_insn</name><argument_list pos:start="763:27" pos:end="763:43">(<argument pos:start="763:28" pos:end="763:30"><expr pos:start="763:28" pos:end="763:30"><name pos:start="763:28" pos:end="763:30">ctx</name></expr></argument>, <argument pos:start="763:33" pos:end="763:42"><expr pos:start="763:33" pos:end="763:42"><name pos:start="763:33" pos:end="763:42">ASE_MIPS3D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="765:17" pos:end="767:63"><expr pos:start="765:17" pos:end="767:62"><call pos:start="765:17" pos:end="767:62"><name pos:start="765:17" pos:end="765:35">gen_compute_branch1</name><argument_list pos:start="765:36" pos:end="767:62">(<argument pos:start="765:37" pos:end="765:39"><expr pos:start="765:37" pos:end="765:39"><name pos:start="765:37" pos:end="765:39">ctx</name></expr></argument>, <argument pos:start="765:42" pos:end="765:62"><expr pos:start="765:42" pos:end="765:62"><call pos:start="765:42" pos:end="765:62"><name pos:start="765:42" pos:end="765:49">MASK_BC1</name><argument_list pos:start="765:50" pos:end="765:62">(<argument pos:start="765:51" pos:end="765:61"><expr pos:start="765:51" pos:end="765:61"><name pos:start="765:51" pos:end="765:61"><name pos:start="765:51" pos:end="765:53">ctx</name><operator pos:start="765:54" pos:end="765:55">-&gt;</operator><name pos:start="765:56" pos:end="765:61">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                    <argument pos:start="767:37" pos:end="767:51"><expr pos:start="767:37" pos:end="767:51"><operator pos:start="767:37" pos:end="767:37">(</operator><name pos:start="767:38" pos:end="767:39">rt</name> <operator pos:start="767:41" pos:end="767:42">&gt;&gt;</operator> <literal type="number" pos:start="767:44" pos:end="767:44">2</literal><operator pos:start="767:45" pos:end="767:45">)</operator> <operator pos:start="767:47" pos:end="767:47">&amp;</operator> <literal type="number" pos:start="767:49" pos:end="767:51">0x7</literal></expr></argument>, <argument pos:start="767:54" pos:end="767:61"><expr pos:start="767:54" pos:end="767:61"><name pos:start="767:54" pos:end="767:56">imm</name> <operator pos:start="767:58" pos:end="767:59">&lt;&lt;</operator> <literal type="number" pos:start="767:61" pos:end="767:61">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="771:13" pos:end="771:18">break;</break>

        <case pos:start="773:9" pos:end="773:24">case <expr pos:start="773:14" pos:end="773:23"><name pos:start="773:14" pos:end="773:23">OPC_BC1NEZ</name></expr>:</case>

            <expr_stmt pos:start="775:13" pos:end="775:35"><expr pos:start="775:13" pos:end="775:34"><call pos:start="775:13" pos:end="775:34"><name pos:start="775:13" pos:end="775:29">check_cp1_enabled</name><argument_list pos:start="775:30" pos:end="775:34">(<argument pos:start="775:31" pos:end="775:33"><expr pos:start="775:31" pos:end="775:33"><name pos:start="775:31" pos:end="775:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="777:13" pos:end="777:42"><expr pos:start="777:13" pos:end="777:41"><call pos:start="777:13" pos:end="777:41"><name pos:start="777:13" pos:end="777:22">check_insn</name><argument_list pos:start="777:23" pos:end="777:41">(<argument pos:start="777:24" pos:end="777:26"><expr pos:start="777:24" pos:end="777:26"><name pos:start="777:24" pos:end="777:26">ctx</name></expr></argument>, <argument pos:start="777:29" pos:end="777:40"><expr pos:start="777:29" pos:end="777:40"><name pos:start="777:29" pos:end="777:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="779:13" pos:end="781:52"><expr pos:start="779:13" pos:end="781:51"><call pos:start="779:13" pos:end="781:51"><name pos:start="779:13" pos:end="779:34">gen_compute_branch1_r6</name><argument_list pos:start="779:35" pos:end="781:51">(<argument pos:start="779:36" pos:end="779:38"><expr pos:start="779:36" pos:end="779:38"><name pos:start="779:36" pos:end="779:38">ctx</name></expr></argument>, <argument pos:start="779:41" pos:end="779:61"><expr pos:start="779:41" pos:end="779:61"><call pos:start="779:41" pos:end="779:61"><name pos:start="779:41" pos:end="779:48">MASK_CP1</name><argument_list pos:start="779:49" pos:end="779:61">(<argument pos:start="779:50" pos:end="779:60"><expr pos:start="779:50" pos:end="779:60"><name pos:start="779:50" pos:end="779:60"><name pos:start="779:50" pos:end="779:52">ctx</name><operator pos:start="779:53" pos:end="779:54">-&gt;</operator><name pos:start="779:55" pos:end="779:60">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="781:36" pos:end="781:37"><expr pos:start="781:36" pos:end="781:37"><name pos:start="781:36" pos:end="781:37">rt</name></expr></argument>, <argument pos:start="781:40" pos:end="781:47"><expr pos:start="781:40" pos:end="781:47"><name pos:start="781:40" pos:end="781:42">imm</name> <operator pos:start="781:44" pos:end="781:45">&lt;&lt;</operator> <literal type="number" pos:start="781:47" pos:end="781:47">2</literal></expr></argument>, <argument pos:start="781:50" pos:end="781:50"><expr pos:start="781:50" pos:end="781:50"><literal type="number" pos:start="781:50" pos:end="781:50">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="783:13" pos:end="783:18">break;</break>

        <case pos:start="785:9" pos:end="785:25">case <expr pos:start="785:14" pos:end="785:24"><name pos:start="785:14" pos:end="785:24">OPC_BC1ANY4</name></expr>:</case>

            <expr_stmt pos:start="787:13" pos:end="787:35"><expr pos:start="787:13" pos:end="787:34"><call pos:start="787:13" pos:end="787:34"><name pos:start="787:13" pos:end="787:29">check_cp1_enabled</name><argument_list pos:start="787:30" pos:end="787:34">(<argument pos:start="787:31" pos:end="787:33"><expr pos:start="787:31" pos:end="787:33"><name pos:start="787:31" pos:end="787:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="789:13" pos:end="789:54"><expr pos:start="789:13" pos:end="789:53"><call pos:start="789:13" pos:end="789:53"><name pos:start="789:13" pos:end="789:34">check_insn_opc_removed</name><argument_list pos:start="789:35" pos:end="789:53">(<argument pos:start="789:36" pos:end="789:38"><expr pos:start="789:36" pos:end="789:38"><name pos:start="789:36" pos:end="789:38">ctx</name></expr></argument>, <argument pos:start="789:41" pos:end="789:52"><expr pos:start="789:41" pos:end="789:52"><name pos:start="789:41" pos:end="789:52">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="791:13" pos:end="791:29"><expr pos:start="791:13" pos:end="791:28"><call pos:start="791:13" pos:end="791:28"><name pos:start="791:13" pos:end="791:23">check_cop1x</name><argument_list pos:start="791:24" pos:end="791:28">(<argument pos:start="791:25" pos:end="791:27"><expr pos:start="791:25" pos:end="791:27"><name pos:start="791:25" pos:end="791:27">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="793:13" pos:end="793:40"><expr pos:start="793:13" pos:end="793:39"><call pos:start="793:13" pos:end="793:39"><name pos:start="793:13" pos:end="793:22">check_insn</name><argument_list pos:start="793:23" pos:end="793:39">(<argument pos:start="793:24" pos:end="793:26"><expr pos:start="793:24" pos:end="793:26"><name pos:start="793:24" pos:end="793:26">ctx</name></expr></argument>, <argument pos:start="793:29" pos:end="793:38"><expr pos:start="793:29" pos:end="793:38"><name pos:start="793:29" pos:end="793:38">ASE_MIPS3D</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="795:13" pos:end="795:30">/* fall through */</comment>

        <case pos:start="797:9" pos:end="797:21">case <expr pos:start="797:14" pos:end="797:20"><name pos:start="797:14" pos:end="797:20">OPC_BC1</name></expr>:</case>

            <expr_stmt pos:start="799:13" pos:end="799:35"><expr pos:start="799:13" pos:end="799:34"><call pos:start="799:13" pos:end="799:34"><name pos:start="799:13" pos:end="799:29">check_cp1_enabled</name><argument_list pos:start="799:30" pos:end="799:34">(<argument pos:start="799:31" pos:end="799:33"><expr pos:start="799:31" pos:end="799:33"><name pos:start="799:31" pos:end="799:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="801:13" pos:end="801:54"><expr pos:start="801:13" pos:end="801:53"><call pos:start="801:13" pos:end="801:53"><name pos:start="801:13" pos:end="801:34">check_insn_opc_removed</name><argument_list pos:start="801:35" pos:end="801:53">(<argument pos:start="801:36" pos:end="801:38"><expr pos:start="801:36" pos:end="801:38"><name pos:start="801:36" pos:end="801:38">ctx</name></expr></argument>, <argument pos:start="801:41" pos:end="801:52"><expr pos:start="801:41" pos:end="801:52"><name pos:start="801:41" pos:end="801:52">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="803:13" pos:end="805:59"><expr pos:start="803:13" pos:end="805:58"><call pos:start="803:13" pos:end="805:58"><name pos:start="803:13" pos:end="803:31">gen_compute_branch1</name><argument_list pos:start="803:32" pos:end="805:58">(<argument pos:start="803:33" pos:end="803:35"><expr pos:start="803:33" pos:end="803:35"><name pos:start="803:33" pos:end="803:35">ctx</name></expr></argument>, <argument pos:start="803:38" pos:end="803:58"><expr pos:start="803:38" pos:end="803:58"><call pos:start="803:38" pos:end="803:58"><name pos:start="803:38" pos:end="803:45">MASK_BC1</name><argument_list pos:start="803:46" pos:end="803:58">(<argument pos:start="803:47" pos:end="803:57"><expr pos:start="803:47" pos:end="803:57"><name pos:start="803:47" pos:end="803:57"><name pos:start="803:47" pos:end="803:49">ctx</name><operator pos:start="803:50" pos:end="803:51">-&gt;</operator><name pos:start="803:52" pos:end="803:57">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>,

                                <argument pos:start="805:33" pos:end="805:47"><expr pos:start="805:33" pos:end="805:47"><operator pos:start="805:33" pos:end="805:33">(</operator><name pos:start="805:34" pos:end="805:35">rt</name> <operator pos:start="805:37" pos:end="805:38">&gt;&gt;</operator> <literal type="number" pos:start="805:40" pos:end="805:40">2</literal><operator pos:start="805:41" pos:end="805:41">)</operator> <operator pos:start="805:43" pos:end="805:43">&amp;</operator> <literal type="number" pos:start="805:45" pos:end="805:47">0x7</literal></expr></argument>, <argument pos:start="805:50" pos:end="805:57"><expr pos:start="805:50" pos:end="805:57"><name pos:start="805:50" pos:end="805:52">imm</name> <operator pos:start="805:54" pos:end="805:55">&lt;&lt;</operator> <literal type="number" pos:start="805:57" pos:end="805:57">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="807:13" pos:end="807:18">break;</break>

        <case pos:start="809:9" pos:end="809:24">case <expr pos:start="809:14" pos:end="809:23"><name pos:start="809:14" pos:end="809:23">OPC_PS_FMT</name></expr>:</case>

            <expr_stmt pos:start="811:13" pos:end="811:26"><expr pos:start="811:13" pos:end="811:25"><call pos:start="811:13" pos:end="811:25"><name pos:start="811:13" pos:end="811:20">check_ps</name><argument_list pos:start="811:21" pos:end="811:25">(<argument pos:start="811:22" pos:end="811:24"><expr pos:start="811:22" pos:end="811:24"><name pos:start="811:22" pos:end="811:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="813:13" pos:end="813:30">/* fall through */</comment>

        <case pos:start="815:9" pos:end="815:23">case <expr pos:start="815:14" pos:end="815:22"><name pos:start="815:14" pos:end="815:22">OPC_S_FMT</name></expr>:</case>

        <case pos:start="817:9" pos:end="817:23">case <expr pos:start="817:14" pos:end="817:22"><name pos:start="817:14" pos:end="817:22">OPC_D_FMT</name></expr>:</case>

            <expr_stmt pos:start="819:13" pos:end="819:35"><expr pos:start="819:13" pos:end="819:34"><call pos:start="819:13" pos:end="819:34"><name pos:start="819:13" pos:end="819:29">check_cp1_enabled</name><argument_list pos:start="819:30" pos:end="819:34">(<argument pos:start="819:31" pos:end="819:33"><expr pos:start="819:31" pos:end="819:33"><name pos:start="819:31" pos:end="819:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="821:13" pos:end="823:41"><expr pos:start="821:13" pos:end="823:40"><call pos:start="821:13" pos:end="823:40"><name pos:start="821:13" pos:end="821:22">gen_farith</name><argument_list pos:start="821:23" pos:end="823:40">(<argument pos:start="821:24" pos:end="821:26"><expr pos:start="821:24" pos:end="821:26"><name pos:start="821:24" pos:end="821:26">ctx</name></expr></argument>, <argument pos:start="821:29" pos:end="821:57"><expr pos:start="821:29" pos:end="821:57"><name pos:start="821:29" pos:end="821:39"><name pos:start="821:29" pos:end="821:31">ctx</name><operator pos:start="821:32" pos:end="821:33">-&gt;</operator><name pos:start="821:34" pos:end="821:39">opcode</name></name> <operator pos:start="821:41" pos:end="821:41">&amp;</operator> <call pos:start="821:43" pos:end="821:57"><name pos:start="821:43" pos:end="821:45">FOP</name><argument_list pos:start="821:46" pos:end="821:57">(<argument pos:start="821:47" pos:end="821:50"><expr pos:start="821:47" pos:end="821:50"><literal type="number" pos:start="821:47" pos:end="821:50">0x3f</literal></expr></argument>, <argument pos:start="821:53" pos:end="821:56"><expr pos:start="821:53" pos:end="821:56"><literal type="number" pos:start="821:53" pos:end="821:56">0x1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="821:60" pos:end="821:61"><expr pos:start="821:60" pos:end="821:61"><name pos:start="821:60" pos:end="821:61">rt</name></expr></argument>, <argument pos:start="821:64" pos:end="821:65"><expr pos:start="821:64" pos:end="821:65"><name pos:start="821:64" pos:end="821:65">rd</name></expr></argument>, <argument pos:start="821:68" pos:end="821:69"><expr pos:start="821:68" pos:end="821:69"><name pos:start="821:68" pos:end="821:69">sa</name></expr></argument>,

                       <argument pos:start="823:24" pos:end="823:39"><expr pos:start="823:24" pos:end="823:39"><operator pos:start="823:24" pos:end="823:24">(</operator><name pos:start="823:25" pos:end="823:27">imm</name> <operator pos:start="823:29" pos:end="823:30">&gt;&gt;</operator> <literal type="number" pos:start="823:32" pos:end="823:32">8</literal><operator pos:start="823:33" pos:end="823:33">)</operator> <operator pos:start="823:35" pos:end="823:35">&amp;</operator> <literal type="number" pos:start="823:37" pos:end="823:39">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="825:13" pos:end="825:18">break;</break>

        <case pos:start="827:9" pos:end="827:23">case <expr pos:start="827:14" pos:end="827:22"><name pos:start="827:14" pos:end="827:22">OPC_W_FMT</name></expr>:</case>

        <case pos:start="829:9" pos:end="829:23">case <expr pos:start="829:14" pos:end="829:22"><name pos:start="829:14" pos:end="829:22">OPC_L_FMT</name></expr>:</case>

        <block pos:start="831:9" pos:end="959:9">{<block_content pos:start="833:13" pos:end="957:18">

            <decl_stmt pos:start="833:13" pos:end="833:54"><decl pos:start="833:13" pos:end="833:53"><type pos:start="833:13" pos:end="833:15"><name pos:start="833:13" pos:end="833:15">int</name></type> <name pos:start="833:17" pos:end="833:21">r6_op</name> <init pos:start="833:23" pos:end="833:53">= <expr pos:start="833:25" pos:end="833:53"><name pos:start="833:25" pos:end="833:35"><name pos:start="833:25" pos:end="833:27">ctx</name><operator pos:start="833:28" pos:end="833:29">-&gt;</operator><name pos:start="833:30" pos:end="833:35">opcode</name></name> <operator pos:start="833:37" pos:end="833:37">&amp;</operator> <call pos:start="833:39" pos:end="833:53"><name pos:start="833:39" pos:end="833:41">FOP</name><argument_list pos:start="833:42" pos:end="833:53">(<argument pos:start="833:43" pos:end="833:46"><expr pos:start="833:43" pos:end="833:46"><literal type="number" pos:start="833:43" pos:end="833:46">0x3f</literal></expr></argument>, <argument pos:start="833:49" pos:end="833:52"><expr pos:start="833:49" pos:end="833:52"><literal type="number" pos:start="833:49" pos:end="833:52">0x1f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="835:13" pos:end="835:35"><expr pos:start="835:13" pos:end="835:34"><call pos:start="835:13" pos:end="835:34"><name pos:start="835:13" pos:end="835:29">check_cp1_enabled</name><argument_list pos:start="835:30" pos:end="835:34">(<argument pos:start="835:31" pos:end="835:33"><expr pos:start="835:31" pos:end="835:33"><name pos:start="835:31" pos:end="835:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="837:13" pos:end="955:13"><if pos:start="837:13" pos:end="949:13">if <condition pos:start="837:16" pos:end="837:47">(<expr pos:start="837:17" pos:end="837:46"><name pos:start="837:17" pos:end="837:31"><name pos:start="837:17" pos:end="837:19">ctx</name><operator pos:start="837:20" pos:end="837:21">-&gt;</operator><name pos:start="837:22" pos:end="837:31">insn_flags</name></name> <operator pos:start="837:33" pos:end="837:33">&amp;</operator> <name pos:start="837:35" pos:end="837:46">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="837:49" pos:end="949:13">{<block_content pos:start="839:17" pos:end="947:17">

                <switch pos:start="839:17" pos:end="947:17">switch <condition pos:start="839:24" pos:end="839:30">(<expr pos:start="839:25" pos:end="839:29"><name pos:start="839:25" pos:end="839:29">r6_op</name></expr>)</condition> <block pos:start="839:32" pos:end="947:17">{<block_content pos:start="841:17" pos:end="945:26">

                <case pos:start="841:17" pos:end="841:37">case <expr pos:start="841:22" pos:end="841:36"><name pos:start="841:22" pos:end="841:36">R6_OPC_CMP_AF_S</name></expr>:</case>

                <case pos:start="843:17" pos:end="843:37">case <expr pos:start="843:22" pos:end="843:36"><name pos:start="843:22" pos:end="843:36">R6_OPC_CMP_UN_S</name></expr>:</case>

                <case pos:start="845:17" pos:end="845:37">case <expr pos:start="845:22" pos:end="845:36"><name pos:start="845:22" pos:end="845:36">R6_OPC_CMP_EQ_S</name></expr>:</case>

                <case pos:start="847:17" pos:end="847:38">case <expr pos:start="847:22" pos:end="847:37"><name pos:start="847:22" pos:end="847:37">R6_OPC_CMP_UEQ_S</name></expr>:</case>

                <case pos:start="849:17" pos:end="849:37">case <expr pos:start="849:22" pos:end="849:36"><name pos:start="849:22" pos:end="849:36">R6_OPC_CMP_LT_S</name></expr>:</case>

                <case pos:start="851:17" pos:end="851:38">case <expr pos:start="851:22" pos:end="851:37"><name pos:start="851:22" pos:end="851:37">R6_OPC_CMP_ULT_S</name></expr>:</case>

                <case pos:start="853:17" pos:end="853:37">case <expr pos:start="853:22" pos:end="853:36"><name pos:start="853:22" pos:end="853:36">R6_OPC_CMP_LE_S</name></expr>:</case>

                <case pos:start="855:17" pos:end="855:38">case <expr pos:start="855:22" pos:end="855:37"><name pos:start="855:22" pos:end="855:37">R6_OPC_CMP_ULE_S</name></expr>:</case>

                <case pos:start="857:17" pos:end="857:38">case <expr pos:start="857:22" pos:end="857:37"><name pos:start="857:22" pos:end="857:37">R6_OPC_CMP_SAF_S</name></expr>:</case>

                <case pos:start="859:17" pos:end="859:38">case <expr pos:start="859:22" pos:end="859:37"><name pos:start="859:22" pos:end="859:37">R6_OPC_CMP_SUN_S</name></expr>:</case>

                <case pos:start="861:17" pos:end="861:38">case <expr pos:start="861:22" pos:end="861:37"><name pos:start="861:22" pos:end="861:37">R6_OPC_CMP_SEQ_S</name></expr>:</case>

                <case pos:start="863:17" pos:end="863:39">case <expr pos:start="863:22" pos:end="863:38"><name pos:start="863:22" pos:end="863:38">R6_OPC_CMP_SEUQ_S</name></expr>:</case>

                <case pos:start="865:17" pos:end="865:38">case <expr pos:start="865:22" pos:end="865:37"><name pos:start="865:22" pos:end="865:37">R6_OPC_CMP_SLT_S</name></expr>:</case>

                <case pos:start="867:17" pos:end="867:39">case <expr pos:start="867:22" pos:end="867:38"><name pos:start="867:22" pos:end="867:38">R6_OPC_CMP_SULT_S</name></expr>:</case>

                <case pos:start="869:17" pos:end="869:38">case <expr pos:start="869:22" pos:end="869:37"><name pos:start="869:22" pos:end="869:37">R6_OPC_CMP_SLE_S</name></expr>:</case>

                <case pos:start="871:17" pos:end="871:39">case <expr pos:start="871:22" pos:end="871:38"><name pos:start="871:22" pos:end="871:38">R6_OPC_CMP_SULE_S</name></expr>:</case>

                <case pos:start="873:17" pos:end="873:37">case <expr pos:start="873:22" pos:end="873:36"><name pos:start="873:22" pos:end="873:36">R6_OPC_CMP_OR_S</name></expr>:</case>

                <case pos:start="875:17" pos:end="875:38">case <expr pos:start="875:22" pos:end="875:37"><name pos:start="875:22" pos:end="875:37">R6_OPC_CMP_UNE_S</name></expr>:</case>

                <case pos:start="877:17" pos:end="877:37">case <expr pos:start="877:22" pos:end="877:36"><name pos:start="877:22" pos:end="877:36">R6_OPC_CMP_NE_S</name></expr>:</case>

                <case pos:start="879:17" pos:end="879:38">case <expr pos:start="879:22" pos:end="879:37"><name pos:start="879:22" pos:end="879:37">R6_OPC_CMP_SOR_S</name></expr>:</case>

                <case pos:start="881:17" pos:end="881:39">case <expr pos:start="881:22" pos:end="881:38"><name pos:start="881:22" pos:end="881:38">R6_OPC_CMP_SUNE_S</name></expr>:</case>

                <case pos:start="883:17" pos:end="883:38">case <expr pos:start="883:22" pos:end="883:37"><name pos:start="883:22" pos:end="883:37">R6_OPC_CMP_SNE_S</name></expr>:</case>

                    <expr_stmt pos:start="885:21" pos:end="885:70"><expr pos:start="885:21" pos:end="885:69"><call pos:start="885:21" pos:end="885:69"><name pos:start="885:21" pos:end="885:32">gen_r6_cmp_s</name><argument_list pos:start="885:33" pos:end="885:69">(<argument pos:start="885:34" pos:end="885:36"><expr pos:start="885:34" pos:end="885:36"><name pos:start="885:34" pos:end="885:36">ctx</name></expr></argument>, <argument pos:start="885:39" pos:end="885:56"><expr pos:start="885:39" pos:end="885:56"><name pos:start="885:39" pos:end="885:49"><name pos:start="885:39" pos:end="885:41">ctx</name><operator pos:start="885:42" pos:end="885:43">-&gt;</operator><name pos:start="885:44" pos:end="885:49">opcode</name></name> <operator pos:start="885:51" pos:end="885:51">&amp;</operator> <literal type="number" pos:start="885:53" pos:end="885:56">0x1f</literal></expr></argument>, <argument pos:start="885:59" pos:end="885:60"><expr pos:start="885:59" pos:end="885:60"><name pos:start="885:59" pos:end="885:60">rt</name></expr></argument>, <argument pos:start="885:63" pos:end="885:64"><expr pos:start="885:63" pos:end="885:64"><name pos:start="885:63" pos:end="885:64">rd</name></expr></argument>, <argument pos:start="885:67" pos:end="885:68"><expr pos:start="885:67" pos:end="885:68"><name pos:start="885:67" pos:end="885:68">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="887:21" pos:end="887:26">break;</break>

                <case pos:start="889:17" pos:end="889:37">case <expr pos:start="889:22" pos:end="889:36"><name pos:start="889:22" pos:end="889:36">R6_OPC_CMP_AF_D</name></expr>:</case>

                <case pos:start="891:17" pos:end="891:37">case <expr pos:start="891:22" pos:end="891:36"><name pos:start="891:22" pos:end="891:36">R6_OPC_CMP_UN_D</name></expr>:</case>

                <case pos:start="893:17" pos:end="893:37">case <expr pos:start="893:22" pos:end="893:36"><name pos:start="893:22" pos:end="893:36">R6_OPC_CMP_EQ_D</name></expr>:</case>

                <case pos:start="895:17" pos:end="895:38">case <expr pos:start="895:22" pos:end="895:37"><name pos:start="895:22" pos:end="895:37">R6_OPC_CMP_UEQ_D</name></expr>:</case>

                <case pos:start="897:17" pos:end="897:37">case <expr pos:start="897:22" pos:end="897:36"><name pos:start="897:22" pos:end="897:36">R6_OPC_CMP_LT_D</name></expr>:</case>

                <case pos:start="899:17" pos:end="899:38">case <expr pos:start="899:22" pos:end="899:37"><name pos:start="899:22" pos:end="899:37">R6_OPC_CMP_ULT_D</name></expr>:</case>

                <case pos:start="901:17" pos:end="901:37">case <expr pos:start="901:22" pos:end="901:36"><name pos:start="901:22" pos:end="901:36">R6_OPC_CMP_LE_D</name></expr>:</case>

                <case pos:start="903:17" pos:end="903:38">case <expr pos:start="903:22" pos:end="903:37"><name pos:start="903:22" pos:end="903:37">R6_OPC_CMP_ULE_D</name></expr>:</case>

                <case pos:start="905:17" pos:end="905:38">case <expr pos:start="905:22" pos:end="905:37"><name pos:start="905:22" pos:end="905:37">R6_OPC_CMP_SAF_D</name></expr>:</case>

                <case pos:start="907:17" pos:end="907:38">case <expr pos:start="907:22" pos:end="907:37"><name pos:start="907:22" pos:end="907:37">R6_OPC_CMP_SUN_D</name></expr>:</case>

                <case pos:start="909:17" pos:end="909:38">case <expr pos:start="909:22" pos:end="909:37"><name pos:start="909:22" pos:end="909:37">R6_OPC_CMP_SEQ_D</name></expr>:</case>

                <case pos:start="911:17" pos:end="911:39">case <expr pos:start="911:22" pos:end="911:38"><name pos:start="911:22" pos:end="911:38">R6_OPC_CMP_SEUQ_D</name></expr>:</case>

                <case pos:start="913:17" pos:end="913:38">case <expr pos:start="913:22" pos:end="913:37"><name pos:start="913:22" pos:end="913:37">R6_OPC_CMP_SLT_D</name></expr>:</case>

                <case pos:start="915:17" pos:end="915:39">case <expr pos:start="915:22" pos:end="915:38"><name pos:start="915:22" pos:end="915:38">R6_OPC_CMP_SULT_D</name></expr>:</case>

                <case pos:start="917:17" pos:end="917:38">case <expr pos:start="917:22" pos:end="917:37"><name pos:start="917:22" pos:end="917:37">R6_OPC_CMP_SLE_D</name></expr>:</case>

                <case pos:start="919:17" pos:end="919:39">case <expr pos:start="919:22" pos:end="919:38"><name pos:start="919:22" pos:end="919:38">R6_OPC_CMP_SULE_D</name></expr>:</case>

                <case pos:start="921:17" pos:end="921:37">case <expr pos:start="921:22" pos:end="921:36"><name pos:start="921:22" pos:end="921:36">R6_OPC_CMP_OR_D</name></expr>:</case>

                <case pos:start="923:17" pos:end="923:38">case <expr pos:start="923:22" pos:end="923:37"><name pos:start="923:22" pos:end="923:37">R6_OPC_CMP_UNE_D</name></expr>:</case>

                <case pos:start="925:17" pos:end="925:37">case <expr pos:start="925:22" pos:end="925:36"><name pos:start="925:22" pos:end="925:36">R6_OPC_CMP_NE_D</name></expr>:</case>

                <case pos:start="927:17" pos:end="927:38">case <expr pos:start="927:22" pos:end="927:37"><name pos:start="927:22" pos:end="927:37">R6_OPC_CMP_SOR_D</name></expr>:</case>

                <case pos:start="929:17" pos:end="929:39">case <expr pos:start="929:22" pos:end="929:38"><name pos:start="929:22" pos:end="929:38">R6_OPC_CMP_SUNE_D</name></expr>:</case>

                <case pos:start="931:17" pos:end="931:38">case <expr pos:start="931:22" pos:end="931:37"><name pos:start="931:22" pos:end="931:37">R6_OPC_CMP_SNE_D</name></expr>:</case>

                    <expr_stmt pos:start="933:21" pos:end="933:70"><expr pos:start="933:21" pos:end="933:69"><call pos:start="933:21" pos:end="933:69"><name pos:start="933:21" pos:end="933:32">gen_r6_cmp_d</name><argument_list pos:start="933:33" pos:end="933:69">(<argument pos:start="933:34" pos:end="933:36"><expr pos:start="933:34" pos:end="933:36"><name pos:start="933:34" pos:end="933:36">ctx</name></expr></argument>, <argument pos:start="933:39" pos:end="933:56"><expr pos:start="933:39" pos:end="933:56"><name pos:start="933:39" pos:end="933:49"><name pos:start="933:39" pos:end="933:41">ctx</name><operator pos:start="933:42" pos:end="933:43">-&gt;</operator><name pos:start="933:44" pos:end="933:49">opcode</name></name> <operator pos:start="933:51" pos:end="933:51">&amp;</operator> <literal type="number" pos:start="933:53" pos:end="933:56">0x1f</literal></expr></argument>, <argument pos:start="933:59" pos:end="933:60"><expr pos:start="933:59" pos:end="933:60"><name pos:start="933:59" pos:end="933:60">rt</name></expr></argument>, <argument pos:start="933:63" pos:end="933:64"><expr pos:start="933:63" pos:end="933:64"><name pos:start="933:63" pos:end="933:64">rd</name></expr></argument>, <argument pos:start="933:67" pos:end="933:68"><expr pos:start="933:67" pos:end="933:68"><name pos:start="933:67" pos:end="933:68">sa</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="935:21" pos:end="935:26">break;</break>

                <default pos:start="937:17" pos:end="937:24">default:</default>

                    <expr_stmt pos:start="939:21" pos:end="941:61"><expr pos:start="939:21" pos:end="941:60"><call pos:start="939:21" pos:end="941:60"><name pos:start="939:21" pos:end="939:30">gen_farith</name><argument_list pos:start="939:31" pos:end="941:60">(<argument pos:start="939:32" pos:end="939:34"><expr pos:start="939:32" pos:end="939:34"><name pos:start="939:32" pos:end="939:34">ctx</name></expr></argument>, <argument pos:start="939:37" pos:end="939:65"><expr pos:start="939:37" pos:end="939:65"><name pos:start="939:37" pos:end="939:47"><name pos:start="939:37" pos:end="939:39">ctx</name><operator pos:start="939:40" pos:end="939:41">-&gt;</operator><name pos:start="939:42" pos:end="939:47">opcode</name></name> <operator pos:start="939:49" pos:end="939:49">&amp;</operator> <call pos:start="939:51" pos:end="939:65"><name pos:start="939:51" pos:end="939:53">FOP</name><argument_list pos:start="939:54" pos:end="939:65">(<argument pos:start="939:55" pos:end="939:58"><expr pos:start="939:55" pos:end="939:58"><literal type="number" pos:start="939:55" pos:end="939:58">0x3f</literal></expr></argument>, <argument pos:start="939:61" pos:end="939:64"><expr pos:start="939:61" pos:end="939:64"><literal type="number" pos:start="939:61" pos:end="939:64">0x1f</literal></expr></argument>)</argument_list></call></expr></argument>,

                               <argument pos:start="941:32" pos:end="941:33"><expr pos:start="941:32" pos:end="941:33"><name pos:start="941:32" pos:end="941:33">rt</name></expr></argument>, <argument pos:start="941:36" pos:end="941:37"><expr pos:start="941:36" pos:end="941:37"><name pos:start="941:36" pos:end="941:37">rd</name></expr></argument>, <argument pos:start="941:40" pos:end="941:41"><expr pos:start="941:40" pos:end="941:41"><name pos:start="941:40" pos:end="941:41">sa</name></expr></argument>, <argument pos:start="941:44" pos:end="941:59"><expr pos:start="941:44" pos:end="941:59"><operator pos:start="941:44" pos:end="941:44">(</operator><name pos:start="941:45" pos:end="941:47">imm</name> <operator pos:start="941:49" pos:end="941:50">&gt;&gt;</operator> <literal type="number" pos:start="941:52" pos:end="941:52">8</literal><operator pos:start="941:53" pos:end="941:53">)</operator> <operator pos:start="941:55" pos:end="941:55">&amp;</operator> <literal type="number" pos:start="941:57" pos:end="941:59">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <break pos:start="945:21" pos:end="945:26">break;</break>

                </block_content>}</block></switch>

            </block_content>}</block></if> <else pos:start="949:15" pos:end="955:13">else <block pos:start="949:20" pos:end="955:13">{<block_content pos:start="951:17" pos:end="953:45">

                <expr_stmt pos:start="951:17" pos:end="953:45"><expr pos:start="951:17" pos:end="953:44"><call pos:start="951:17" pos:end="953:44"><name pos:start="951:17" pos:end="951:26">gen_farith</name><argument_list pos:start="951:27" pos:end="953:44">(<argument pos:start="951:28" pos:end="951:30"><expr pos:start="951:28" pos:end="951:30"><name pos:start="951:28" pos:end="951:30">ctx</name></expr></argument>, <argument pos:start="951:33" pos:end="951:61"><expr pos:start="951:33" pos:end="951:61"><name pos:start="951:33" pos:end="951:43"><name pos:start="951:33" pos:end="951:35">ctx</name><operator pos:start="951:36" pos:end="951:37">-&gt;</operator><name pos:start="951:38" pos:end="951:43">opcode</name></name> <operator pos:start="951:45" pos:end="951:45">&amp;</operator> <call pos:start="951:47" pos:end="951:61"><name pos:start="951:47" pos:end="951:49">FOP</name><argument_list pos:start="951:50" pos:end="951:61">(<argument pos:start="951:51" pos:end="951:54"><expr pos:start="951:51" pos:end="951:54"><literal type="number" pos:start="951:51" pos:end="951:54">0x3f</literal></expr></argument>, <argument pos:start="951:57" pos:end="951:60"><expr pos:start="951:57" pos:end="951:60"><literal type="number" pos:start="951:57" pos:end="951:60">0x1f</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="951:64" pos:end="951:65"><expr pos:start="951:64" pos:end="951:65"><name pos:start="951:64" pos:end="951:65">rt</name></expr></argument>, <argument pos:start="951:68" pos:end="951:69"><expr pos:start="951:68" pos:end="951:69"><name pos:start="951:68" pos:end="951:69">rd</name></expr></argument>, <argument pos:start="951:72" pos:end="951:73"><expr pos:start="951:72" pos:end="951:73"><name pos:start="951:72" pos:end="951:73">sa</name></expr></argument>,

                           <argument pos:start="953:28" pos:end="953:43"><expr pos:start="953:28" pos:end="953:43"><operator pos:start="953:28" pos:end="953:28">(</operator><name pos:start="953:29" pos:end="953:31">imm</name> <operator pos:start="953:33" pos:end="953:34">&gt;&gt;</operator> <literal type="number" pos:start="953:36" pos:end="953:36">8</literal><operator pos:start="953:37" pos:end="953:37">)</operator> <operator pos:start="953:39" pos:end="953:39">&amp;</operator> <literal type="number" pos:start="953:41" pos:end="953:43">0x7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="957:13" pos:end="957:18">break;</break>

        </block_content>}</block>

        <case pos:start="961:9" pos:end="961:22">case <expr pos:start="961:14" pos:end="961:21"><name pos:start="961:14" pos:end="961:21">OPC_BZ_V</name></expr>:</case>

        <case pos:start="963:9" pos:end="963:23">case <expr pos:start="963:14" pos:end="963:22"><name pos:start="963:14" pos:end="963:22">OPC_BNZ_V</name></expr>:</case>

        <case pos:start="965:9" pos:end="965:22">case <expr pos:start="965:14" pos:end="965:21"><name pos:start="965:14" pos:end="965:21">OPC_BZ_B</name></expr>:</case>

        <case pos:start="967:9" pos:end="967:22">case <expr pos:start="967:14" pos:end="967:21"><name pos:start="967:14" pos:end="967:21">OPC_BZ_H</name></expr>:</case>

        <case pos:start="969:9" pos:end="969:22">case <expr pos:start="969:14" pos:end="969:21"><name pos:start="969:14" pos:end="969:21">OPC_BZ_W</name></expr>:</case>

        <case pos:start="971:9" pos:end="971:22">case <expr pos:start="971:14" pos:end="971:21"><name pos:start="971:14" pos:end="971:21">OPC_BZ_D</name></expr>:</case>

        <case pos:start="973:9" pos:end="973:23">case <expr pos:start="973:14" pos:end="973:22"><name pos:start="973:14" pos:end="973:22">OPC_BNZ_B</name></expr>:</case>

        <case pos:start="975:9" pos:end="975:23">case <expr pos:start="975:14" pos:end="975:22"><name pos:start="975:14" pos:end="975:22">OPC_BNZ_H</name></expr>:</case>

        <case pos:start="977:9" pos:end="977:23">case <expr pos:start="977:14" pos:end="977:22"><name pos:start="977:14" pos:end="977:22">OPC_BNZ_W</name></expr>:</case>

        <case pos:start="979:9" pos:end="979:23">case <expr pos:start="979:14" pos:end="979:22"><name pos:start="979:14" pos:end="979:22">OPC_BNZ_D</name></expr>:</case>

            <expr_stmt pos:start="981:13" pos:end="981:37"><expr pos:start="981:13" pos:end="981:36"><call pos:start="981:13" pos:end="981:36"><name pos:start="981:13" pos:end="981:22">check_insn</name><argument_list pos:start="981:23" pos:end="981:36">(<argument pos:start="981:24" pos:end="981:26"><expr pos:start="981:24" pos:end="981:26"><name pos:start="981:24" pos:end="981:26">ctx</name></expr></argument>, <argument pos:start="981:29" pos:end="981:35"><expr pos:start="981:29" pos:end="981:35"><name pos:start="981:29" pos:end="981:35">ASE_MSA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="983:13" pos:end="983:42"><expr pos:start="983:13" pos:end="983:41"><call pos:start="983:13" pos:end="983:41"><name pos:start="983:13" pos:end="983:26">gen_msa_branch</name><argument_list pos:start="983:27" pos:end="983:41">(<argument pos:start="983:28" pos:end="983:30"><expr pos:start="983:28" pos:end="983:30"><name pos:start="983:28" pos:end="983:30">env</name></expr></argument>, <argument pos:start="983:33" pos:end="983:35"><expr pos:start="983:33" pos:end="983:35"><name pos:start="983:33" pos:end="983:35">ctx</name></expr></argument>, <argument pos:start="983:38" pos:end="983:40"><expr pos:start="983:38" pos:end="983:40"><name pos:start="983:38" pos:end="983:40">op1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="985:13" pos:end="985:18">break;</break>

        <default pos:start="987:9" pos:end="987:16">default:</default>

            <expr_stmt pos:start="989:13" pos:end="989:30"><expr pos:start="989:13" pos:end="989:29"><call pos:start="989:13" pos:end="989:29"><name pos:start="989:13" pos:end="989:22">MIPS_INVAL</name><argument_list pos:start="989:23" pos:end="989:29">(<argument pos:start="989:24" pos:end="989:28"><expr pos:start="989:24" pos:end="989:28"><literal type="string" pos:start="989:24" pos:end="989:28">"cp1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="991:13" pos:end="991:49"><expr pos:start="991:13" pos:end="991:48"><call pos:start="991:13" pos:end="991:48"><name pos:start="991:13" pos:end="991:34">generate_exception_end</name><argument_list pos:start="991:35" pos:end="991:48">(<argument pos:start="991:36" pos:end="991:38"><expr pos:start="991:36" pos:end="991:38"><name pos:start="991:36" pos:end="991:38">ctx</name></expr></argument>, <argument pos:start="991:41" pos:end="991:47"><expr pos:start="991:41" pos:end="991:47"><name pos:start="991:41" pos:end="991:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="993:13" pos:end="993:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="997:9" pos:end="997:14">break;</break>



    <comment type="block" pos:start="1001:5" pos:end="1001:49">/* Compact branches [R6] and COP2 [non-R6] */</comment>

    <case pos:start="1003:5" pos:end="1003:16">case <expr pos:start="1003:10" pos:end="1003:15"><name pos:start="1003:10" pos:end="1003:15">OPC_BC</name></expr>:</case> <comment type="block" pos:start="1003:18" pos:end="1003:31">/* OPC_LWC2 */</comment>

    <case pos:start="1005:5" pos:end="1005:18">case <expr pos:start="1005:10" pos:end="1005:17"><name pos:start="1005:10" pos:end="1005:17">OPC_BALC</name></expr>:</case> <comment type="block" pos:start="1005:20" pos:end="1005:33">/* OPC_SWC2 */</comment>

        <if_stmt pos:start="1007:9" pos:end="1023:9"><if pos:start="1007:9" pos:end="1015:9">if <condition pos:start="1007:12" pos:end="1007:43">(<expr pos:start="1007:13" pos:end="1007:42"><name pos:start="1007:13" pos:end="1007:27"><name pos:start="1007:13" pos:end="1007:15">ctx</name><operator pos:start="1007:16" pos:end="1007:17">-&gt;</operator><name pos:start="1007:18" pos:end="1007:27">insn_flags</name></name> <operator pos:start="1007:29" pos:end="1007:29">&amp;</operator> <name pos:start="1007:31" pos:end="1007:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="1007:45" pos:end="1015:9">{<block_content pos:start="1011:13" pos:end="1013:76">

            <comment type="block" pos:start="1009:13" pos:end="1009:34">/* OPC_BC, OPC_BALC */</comment>

            <expr_stmt pos:start="1011:13" pos:end="1013:76"><expr pos:start="1011:13" pos:end="1013:75"><call pos:start="1011:13" pos:end="1013:75"><name pos:start="1011:13" pos:end="1011:38">gen_compute_compact_branch</name><argument_list pos:start="1011:39" pos:end="1013:75">(<argument pos:start="1011:40" pos:end="1011:42"><expr pos:start="1011:40" pos:end="1011:42"><name pos:start="1011:40" pos:end="1011:42">ctx</name></expr></argument>, <argument pos:start="1011:45" pos:end="1011:46"><expr pos:start="1011:45" pos:end="1011:46"><name pos:start="1011:45" pos:end="1011:46">op</name></expr></argument>, <argument pos:start="1011:49" pos:end="1011:49"><expr pos:start="1011:49" pos:end="1011:49"><literal type="number" pos:start="1011:49" pos:end="1011:49">0</literal></expr></argument>, <argument pos:start="1011:52" pos:end="1011:52"><expr pos:start="1011:52" pos:end="1011:52"><literal type="number" pos:start="1011:52" pos:end="1011:52">0</literal></expr></argument>,

                                       <argument pos:start="1013:40" pos:end="1013:74"><expr pos:start="1013:40" pos:end="1013:74"><call pos:start="1013:40" pos:end="1013:74"><name pos:start="1013:40" pos:end="1013:49">sextract32</name><argument_list pos:start="1013:50" pos:end="1013:74">(<argument pos:start="1013:51" pos:end="1013:66"><expr pos:start="1013:51" pos:end="1013:66"><name pos:start="1013:51" pos:end="1013:61"><name pos:start="1013:51" pos:end="1013:53">ctx</name><operator pos:start="1013:54" pos:end="1013:55">-&gt;</operator><name pos:start="1013:56" pos:end="1013:61">opcode</name></name> <operator pos:start="1013:63" pos:end="1013:64">&lt;&lt;</operator> <literal type="number" pos:start="1013:66" pos:end="1013:66">2</literal></expr></argument>, <argument pos:start="1013:69" pos:end="1013:69"><expr pos:start="1013:69" pos:end="1013:69"><literal type="number" pos:start="1013:69" pos:end="1013:69">0</literal></expr></argument>, <argument pos:start="1013:72" pos:end="1013:73"><expr pos:start="1013:72" pos:end="1013:73"><literal type="number" pos:start="1013:72" pos:end="1013:73">28</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1015:11" pos:end="1023:9">else <block pos:start="1015:16" pos:end="1023:9">{<block_content pos:start="1021:13" pos:end="1021:53">

            <comment type="block" pos:start="1017:13" pos:end="1017:36">/* OPC_LWC2, OPC_SWC2 */</comment>

            <comment type="block" pos:start="1019:13" pos:end="1019:40">/* COP2: Not implemented. */</comment>

            <expr_stmt pos:start="1021:13" pos:end="1021:53"><expr pos:start="1021:13" pos:end="1021:52"><call pos:start="1021:13" pos:end="1021:52"><name pos:start="1021:13" pos:end="1021:34">generate_exception_err</name><argument_list pos:start="1021:35" pos:end="1021:52">(<argument pos:start="1021:36" pos:end="1021:38"><expr pos:start="1021:36" pos:end="1021:38"><name pos:start="1021:36" pos:end="1021:38">ctx</name></expr></argument>, <argument pos:start="1021:41" pos:end="1021:48"><expr pos:start="1021:41" pos:end="1021:48"><name pos:start="1021:41" pos:end="1021:48">EXCP_CpU</name></expr></argument>, <argument pos:start="1021:51" pos:end="1021:51"><expr pos:start="1021:51" pos:end="1021:51"><literal type="number" pos:start="1021:51" pos:end="1021:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1025:9" pos:end="1025:14">break;</break>

    <case pos:start="1027:5" pos:end="1027:19">case <expr pos:start="1027:10" pos:end="1027:18"><name pos:start="1027:10" pos:end="1027:18">OPC_BEQZC</name></expr>:</case> <comment type="block" pos:start="1027:21" pos:end="1027:43">/* OPC_JIC, OPC_LDC2 */</comment>

    <case pos:start="1029:5" pos:end="1029:19">case <expr pos:start="1029:10" pos:end="1029:18"><name pos:start="1029:10" pos:end="1029:18">OPC_BNEZC</name></expr>:</case> <comment type="block" pos:start="1029:21" pos:end="1029:45">/* OPC_JIALC, OPC_SDC2 */</comment>

        <if_stmt pos:start="1031:9" pos:end="1057:9"><if pos:start="1031:9" pos:end="1049:9">if <condition pos:start="1031:12" pos:end="1031:43">(<expr pos:start="1031:13" pos:end="1031:42"><name pos:start="1031:13" pos:end="1031:27"><name pos:start="1031:13" pos:end="1031:15">ctx</name><operator pos:start="1031:16" pos:end="1031:17">-&gt;</operator><name pos:start="1031:18" pos:end="1031:27">insn_flags</name></name> <operator pos:start="1031:29" pos:end="1031:29">&amp;</operator> <name pos:start="1031:31" pos:end="1031:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="1031:45" pos:end="1049:9">{<block_content pos:start="1033:13" pos:end="1047:13">

            <if_stmt pos:start="1033:13" pos:end="1047:13"><if pos:start="1033:13" pos:end="1041:13">if <condition pos:start="1033:16" pos:end="1033:24">(<expr pos:start="1033:17" pos:end="1033:23"><name pos:start="1033:17" pos:end="1033:18">rs</name> <operator pos:start="1033:20" pos:end="1033:21">!=</operator> <literal type="number" pos:start="1033:23" pos:end="1033:23">0</literal></expr>)</condition> <block pos:start="1033:26" pos:end="1041:13">{<block_content pos:start="1037:17" pos:end="1039:80">

                <comment type="block" pos:start="1035:17" pos:end="1035:42">/* OPC_BEQZC, OPC_BNEZC */</comment>

                <expr_stmt pos:start="1037:17" pos:end="1039:80"><expr pos:start="1037:17" pos:end="1039:79"><call pos:start="1037:17" pos:end="1039:79"><name pos:start="1037:17" pos:end="1037:42">gen_compute_compact_branch</name><argument_list pos:start="1037:43" pos:end="1039:79">(<argument pos:start="1037:44" pos:end="1037:46"><expr pos:start="1037:44" pos:end="1037:46"><name pos:start="1037:44" pos:end="1037:46">ctx</name></expr></argument>, <argument pos:start="1037:49" pos:end="1037:50"><expr pos:start="1037:49" pos:end="1037:50"><name pos:start="1037:49" pos:end="1037:50">op</name></expr></argument>, <argument pos:start="1037:53" pos:end="1037:54"><expr pos:start="1037:53" pos:end="1037:54"><name pos:start="1037:53" pos:end="1037:54">rs</name></expr></argument>, <argument pos:start="1037:57" pos:end="1037:57"><expr pos:start="1037:57" pos:end="1037:57"><literal type="number" pos:start="1037:57" pos:end="1037:57">0</literal></expr></argument>,

                                           <argument pos:start="1039:44" pos:end="1039:78"><expr pos:start="1039:44" pos:end="1039:78"><call pos:start="1039:44" pos:end="1039:78"><name pos:start="1039:44" pos:end="1039:53">sextract32</name><argument_list pos:start="1039:54" pos:end="1039:78">(<argument pos:start="1039:55" pos:end="1039:70"><expr pos:start="1039:55" pos:end="1039:70"><name pos:start="1039:55" pos:end="1039:65"><name pos:start="1039:55" pos:end="1039:57">ctx</name><operator pos:start="1039:58" pos:end="1039:59">-&gt;</operator><name pos:start="1039:60" pos:end="1039:65">opcode</name></name> <operator pos:start="1039:67" pos:end="1039:68">&lt;&lt;</operator> <literal type="number" pos:start="1039:70" pos:end="1039:70">2</literal></expr></argument>, <argument pos:start="1039:73" pos:end="1039:73"><expr pos:start="1039:73" pos:end="1039:73"><literal type="number" pos:start="1039:73" pos:end="1039:73">0</literal></expr></argument>, <argument pos:start="1039:76" pos:end="1039:77"><expr pos:start="1039:76" pos:end="1039:77"><literal type="number" pos:start="1039:76" pos:end="1039:77">23</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1041:15" pos:end="1047:13">else <block pos:start="1041:20" pos:end="1047:13">{<block_content pos:start="1045:17" pos:end="1045:64">

                <comment type="block" pos:start="1043:17" pos:end="1043:40">/* OPC_JIC, OPC_JIALC */</comment>

                <expr_stmt pos:start="1045:17" pos:end="1045:64"><expr pos:start="1045:17" pos:end="1045:63"><call pos:start="1045:17" pos:end="1045:63"><name pos:start="1045:17" pos:end="1045:42">gen_compute_compact_branch</name><argument_list pos:start="1045:43" pos:end="1045:63">(<argument pos:start="1045:44" pos:end="1045:46"><expr pos:start="1045:44" pos:end="1045:46"><name pos:start="1045:44" pos:end="1045:46">ctx</name></expr></argument>, <argument pos:start="1045:49" pos:end="1045:50"><expr pos:start="1045:49" pos:end="1045:50"><name pos:start="1045:49" pos:end="1045:50">op</name></expr></argument>, <argument pos:start="1045:53" pos:end="1045:53"><expr pos:start="1045:53" pos:end="1045:53"><literal type="number" pos:start="1045:53" pos:end="1045:53">0</literal></expr></argument>, <argument pos:start="1045:56" pos:end="1045:57"><expr pos:start="1045:56" pos:end="1045:57"><name pos:start="1045:56" pos:end="1045:57">rt</name></expr></argument>, <argument pos:start="1045:60" pos:end="1045:62"><expr pos:start="1045:60" pos:end="1045:62"><name pos:start="1045:60" pos:end="1045:62">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1049:11" pos:end="1057:9">else <block pos:start="1049:16" pos:end="1057:9">{<block_content pos:start="1055:13" pos:end="1055:53">

            <comment type="block" pos:start="1051:13" pos:end="1051:36">/* OPC_LWC2, OPC_SWC2 */</comment>

            <comment type="block" pos:start="1053:13" pos:end="1053:40">/* COP2: Not implemented. */</comment>

            <expr_stmt pos:start="1055:13" pos:end="1055:53"><expr pos:start="1055:13" pos:end="1055:52"><call pos:start="1055:13" pos:end="1055:52"><name pos:start="1055:13" pos:end="1055:34">generate_exception_err</name><argument_list pos:start="1055:35" pos:end="1055:52">(<argument pos:start="1055:36" pos:end="1055:38"><expr pos:start="1055:36" pos:end="1055:38"><name pos:start="1055:36" pos:end="1055:38">ctx</name></expr></argument>, <argument pos:start="1055:41" pos:end="1055:48"><expr pos:start="1055:41" pos:end="1055:48"><name pos:start="1055:41" pos:end="1055:48">EXCP_CpU</name></expr></argument>, <argument pos:start="1055:51" pos:end="1055:51"><expr pos:start="1055:51" pos:end="1055:51"><literal type="number" pos:start="1055:51" pos:end="1055:51">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1059:9" pos:end="1059:14">break;</break>

    <case pos:start="1061:5" pos:end="1061:17">case <expr pos:start="1061:10" pos:end="1061:16"><name pos:start="1061:10" pos:end="1061:16">OPC_CP2</name></expr>:</case>

        <expr_stmt pos:start="1063:9" pos:end="1063:41"><expr pos:start="1063:9" pos:end="1063:40"><call pos:start="1063:9" pos:end="1063:40"><name pos:start="1063:9" pos:end="1063:18">check_insn</name><argument_list pos:start="1063:19" pos:end="1063:40">(<argument pos:start="1063:20" pos:end="1063:22"><expr pos:start="1063:20" pos:end="1063:22"><name pos:start="1063:20" pos:end="1063:22">ctx</name></expr></argument>, <argument pos:start="1063:25" pos:end="1063:39"><expr pos:start="1063:25" pos:end="1063:39"><name pos:start="1063:25" pos:end="1063:39">INSN_LOONGSON2F</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1065:9" pos:end="1065:65">/* Note that these instructions use different fields.  */</comment>

        <expr_stmt pos:start="1067:9" pos:end="1067:49"><expr pos:start="1067:9" pos:end="1067:48"><call pos:start="1067:9" pos:end="1067:48"><name pos:start="1067:9" pos:end="1067:31">gen_loongson_multimedia</name><argument_list pos:start="1067:32" pos:end="1067:48">(<argument pos:start="1067:33" pos:end="1067:35"><expr pos:start="1067:33" pos:end="1067:35"><name pos:start="1067:33" pos:end="1067:35">ctx</name></expr></argument>, <argument pos:start="1067:38" pos:end="1067:39"><expr pos:start="1067:38" pos:end="1067:39"><name pos:start="1067:38" pos:end="1067:39">sa</name></expr></argument>, <argument pos:start="1067:42" pos:end="1067:43"><expr pos:start="1067:42" pos:end="1067:43"><name pos:start="1067:42" pos:end="1067:43">rd</name></expr></argument>, <argument pos:start="1067:46" pos:end="1067:47"><expr pos:start="1067:46" pos:end="1067:47"><name pos:start="1067:46" pos:end="1067:47">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1069:9" pos:end="1069:14">break;</break>



    <case pos:start="1073:5" pos:end="1073:17">case <expr pos:start="1073:10" pos:end="1073:16"><name pos:start="1073:10" pos:end="1073:16">OPC_CP3</name></expr>:</case>

        <expr_stmt pos:start="1075:9" pos:end="1075:50"><expr pos:start="1075:9" pos:end="1075:49"><call pos:start="1075:9" pos:end="1075:49"><name pos:start="1075:9" pos:end="1075:30">check_insn_opc_removed</name><argument_list pos:start="1075:31" pos:end="1075:49">(<argument pos:start="1075:32" pos:end="1075:34"><expr pos:start="1075:32" pos:end="1075:34"><name pos:start="1075:32" pos:end="1075:34">ctx</name></expr></argument>, <argument pos:start="1075:37" pos:end="1075:48"><expr pos:start="1075:37" pos:end="1075:48"><name pos:start="1075:37" pos:end="1075:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1077:9" pos:end="1165:9"><if pos:start="1077:9" pos:end="1161:9">if <condition pos:start="1077:12" pos:end="1077:47">(<expr pos:start="1077:13" pos:end="1077:46"><name pos:start="1077:13" pos:end="1077:28"><name pos:start="1077:13" pos:end="1077:15">ctx</name><operator pos:start="1077:16" pos:end="1077:17">-&gt;</operator><name pos:start="1077:18" pos:end="1077:28">CP0_Config1</name></name> <operator pos:start="1077:30" pos:end="1077:30">&amp;</operator> <operator pos:start="1077:32" pos:end="1077:32">(</operator><literal type="number" pos:start="1077:33" pos:end="1077:33">1</literal> <operator pos:start="1077:35" pos:end="1077:36">&lt;&lt;</operator> <name pos:start="1077:38" pos:end="1077:45">CP0C1_FP</name><operator pos:start="1077:46" pos:end="1077:46">)</operator></expr>)</condition> <block pos:start="1077:49" pos:end="1161:9">{<block_content pos:start="1079:13" pos:end="1159:13">

            <expr_stmt pos:start="1079:13" pos:end="1079:35"><expr pos:start="1079:13" pos:end="1079:34"><call pos:start="1079:13" pos:end="1079:34"><name pos:start="1079:13" pos:end="1079:29">check_cp1_enabled</name><argument_list pos:start="1079:30" pos:end="1079:34">(<argument pos:start="1079:31" pos:end="1079:33"><expr pos:start="1079:31" pos:end="1079:33"><name pos:start="1079:31" pos:end="1079:33">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1081:13" pos:end="1081:40"><expr pos:start="1081:13" pos:end="1081:39"><name pos:start="1081:13" pos:end="1081:15">op1</name> <operator pos:start="1081:17" pos:end="1081:17">=</operator> <call pos:start="1081:19" pos:end="1081:39"><name pos:start="1081:19" pos:end="1081:26">MASK_CP3</name><argument_list pos:start="1081:27" pos:end="1081:39">(<argument pos:start="1081:28" pos:end="1081:38"><expr pos:start="1081:28" pos:end="1081:38"><name pos:start="1081:28" pos:end="1081:38"><name pos:start="1081:28" pos:end="1081:30">ctx</name><operator pos:start="1081:31" pos:end="1081:32">-&gt;</operator><name pos:start="1081:33" pos:end="1081:38">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1083:13" pos:end="1159:13">switch <condition pos:start="1083:20" pos:end="1083:24">(<expr pos:start="1083:21" pos:end="1083:23"><name pos:start="1083:21" pos:end="1083:23">op1</name></expr>)</condition> <block pos:start="1083:26" pos:end="1159:13">{<block_content pos:start="1085:13" pos:end="1157:22">

            <case pos:start="1085:13" pos:end="1085:27">case <expr pos:start="1085:18" pos:end="1085:26"><name pos:start="1085:18" pos:end="1085:26">OPC_LUXC1</name></expr>:</case>

            <case pos:start="1087:13" pos:end="1087:27">case <expr pos:start="1087:18" pos:end="1087:26"><name pos:start="1087:18" pos:end="1087:26">OPC_SUXC1</name></expr>:</case>

                <expr_stmt pos:start="1089:17" pos:end="1089:58"><expr pos:start="1089:17" pos:end="1089:57"><call pos:start="1089:17" pos:end="1089:57"><name pos:start="1089:17" pos:end="1089:26">check_insn</name><argument_list pos:start="1089:27" pos:end="1089:57">(<argument pos:start="1089:28" pos:end="1089:30"><expr pos:start="1089:28" pos:end="1089:30"><name pos:start="1089:28" pos:end="1089:30">ctx</name></expr></argument>, <argument pos:start="1089:33" pos:end="1089:56"><expr pos:start="1089:33" pos:end="1089:56"><name pos:start="1089:33" pos:end="1089:41">ISA_MIPS5</name> <operator pos:start="1089:43" pos:end="1089:43">|</operator> <name pos:start="1089:45" pos:end="1089:56">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1091:17" pos:end="1091:33">/* Fallthrough */</comment>

            <case pos:start="1093:13" pos:end="1093:27">case <expr pos:start="1093:18" pos:end="1093:26"><name pos:start="1093:18" pos:end="1093:26">OPC_LWXC1</name></expr>:</case>

            <case pos:start="1095:13" pos:end="1095:27">case <expr pos:start="1095:18" pos:end="1095:26"><name pos:start="1095:18" pos:end="1095:26">OPC_LDXC1</name></expr>:</case>

            <case pos:start="1097:13" pos:end="1097:27">case <expr pos:start="1097:18" pos:end="1097:26"><name pos:start="1097:18" pos:end="1097:26">OPC_SWXC1</name></expr>:</case>

            <case pos:start="1099:13" pos:end="1099:27">case <expr pos:start="1099:18" pos:end="1099:26"><name pos:start="1099:18" pos:end="1099:26">OPC_SDXC1</name></expr>:</case>

                <expr_stmt pos:start="1101:17" pos:end="1101:58"><expr pos:start="1101:17" pos:end="1101:57"><call pos:start="1101:17" pos:end="1101:57"><name pos:start="1101:17" pos:end="1101:26">check_insn</name><argument_list pos:start="1101:27" pos:end="1101:57">(<argument pos:start="1101:28" pos:end="1101:30"><expr pos:start="1101:28" pos:end="1101:30"><name pos:start="1101:28" pos:end="1101:30">ctx</name></expr></argument>, <argument pos:start="1101:33" pos:end="1101:56"><expr pos:start="1101:33" pos:end="1101:56"><name pos:start="1101:33" pos:end="1101:41">ISA_MIPS4</name> <operator pos:start="1101:43" pos:end="1101:43">|</operator> <name pos:start="1101:45" pos:end="1101:56">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1103:17" pos:end="1103:56"><expr pos:start="1103:17" pos:end="1103:55"><call pos:start="1103:17" pos:end="1103:55"><name pos:start="1103:17" pos:end="1103:29">gen_flt3_ldst</name><argument_list pos:start="1103:30" pos:end="1103:55">(<argument pos:start="1103:31" pos:end="1103:33"><expr pos:start="1103:31" pos:end="1103:33"><name pos:start="1103:31" pos:end="1103:33">ctx</name></expr></argument>, <argument pos:start="1103:36" pos:end="1103:38"><expr pos:start="1103:36" pos:end="1103:38"><name pos:start="1103:36" pos:end="1103:38">op1</name></expr></argument>, <argument pos:start="1103:41" pos:end="1103:42"><expr pos:start="1103:41" pos:end="1103:42"><name pos:start="1103:41" pos:end="1103:42">sa</name></expr></argument>, <argument pos:start="1103:45" pos:end="1103:46"><expr pos:start="1103:45" pos:end="1103:46"><name pos:start="1103:45" pos:end="1103:46">rd</name></expr></argument>, <argument pos:start="1103:49" pos:end="1103:50"><expr pos:start="1103:49" pos:end="1103:50"><name pos:start="1103:49" pos:end="1103:50">rs</name></expr></argument>, <argument pos:start="1103:53" pos:end="1103:54"><expr pos:start="1103:53" pos:end="1103:54"><name pos:start="1103:53" pos:end="1103:54">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1105:17" pos:end="1105:22">break;</break>

            <case pos:start="1107:13" pos:end="1107:27">case <expr pos:start="1107:18" pos:end="1107:26"><name pos:start="1107:18" pos:end="1107:26">OPC_PREFX</name></expr>:</case>

                <expr_stmt pos:start="1109:17" pos:end="1109:58"><expr pos:start="1109:17" pos:end="1109:57"><call pos:start="1109:17" pos:end="1109:57"><name pos:start="1109:17" pos:end="1109:26">check_insn</name><argument_list pos:start="1109:27" pos:end="1109:57">(<argument pos:start="1109:28" pos:end="1109:30"><expr pos:start="1109:28" pos:end="1109:30"><name pos:start="1109:28" pos:end="1109:30">ctx</name></expr></argument>, <argument pos:start="1109:33" pos:end="1109:56"><expr pos:start="1109:33" pos:end="1109:56"><name pos:start="1109:33" pos:end="1109:41">ISA_MIPS4</name> <operator pos:start="1109:43" pos:end="1109:43">|</operator> <name pos:start="1109:45" pos:end="1109:56">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1111:17" pos:end="1111:35">/* Treat as NOP. */</comment>

                <break pos:start="1113:17" pos:end="1113:22">break;</break>

            <case pos:start="1115:13" pos:end="1115:29">case <expr pos:start="1115:18" pos:end="1115:28"><name pos:start="1115:18" pos:end="1115:28">OPC_ALNV_PS</name></expr>:</case>

                <expr_stmt pos:start="1117:17" pos:end="1117:58"><expr pos:start="1117:17" pos:end="1117:57"><call pos:start="1117:17" pos:end="1117:57"><name pos:start="1117:17" pos:end="1117:26">check_insn</name><argument_list pos:start="1117:27" pos:end="1117:57">(<argument pos:start="1117:28" pos:end="1117:30"><expr pos:start="1117:28" pos:end="1117:30"><name pos:start="1117:28" pos:end="1117:30">ctx</name></expr></argument>, <argument pos:start="1117:33" pos:end="1117:56"><expr pos:start="1117:33" pos:end="1117:56"><name pos:start="1117:33" pos:end="1117:41">ISA_MIPS5</name> <operator pos:start="1117:43" pos:end="1117:43">|</operator> <name pos:start="1117:45" pos:end="1117:56">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="1119:17" pos:end="1119:33">/* Fallthrough */</comment>

            <case pos:start="1121:13" pos:end="1121:28">case <expr pos:start="1121:18" pos:end="1121:27"><name pos:start="1121:18" pos:end="1121:27">OPC_MADD_S</name></expr>:</case>

            <case pos:start="1123:13" pos:end="1123:28">case <expr pos:start="1123:18" pos:end="1123:27"><name pos:start="1123:18" pos:end="1123:27">OPC_MADD_D</name></expr>:</case>

            <case pos:start="1125:13" pos:end="1125:29">case <expr pos:start="1125:18" pos:end="1125:28"><name pos:start="1125:18" pos:end="1125:28">OPC_MADD_PS</name></expr>:</case>

            <case pos:start="1127:13" pos:end="1127:28">case <expr pos:start="1127:18" pos:end="1127:27"><name pos:start="1127:18" pos:end="1127:27">OPC_MSUB_S</name></expr>:</case>

            <case pos:start="1129:13" pos:end="1129:28">case <expr pos:start="1129:18" pos:end="1129:27"><name pos:start="1129:18" pos:end="1129:27">OPC_MSUB_D</name></expr>:</case>

            <case pos:start="1131:13" pos:end="1131:29">case <expr pos:start="1131:18" pos:end="1131:28"><name pos:start="1131:18" pos:end="1131:28">OPC_MSUB_PS</name></expr>:</case>

            <case pos:start="1133:13" pos:end="1133:29">case <expr pos:start="1133:18" pos:end="1133:28"><name pos:start="1133:18" pos:end="1133:28">OPC_NMADD_S</name></expr>:</case>

            <case pos:start="1135:13" pos:end="1135:29">case <expr pos:start="1135:18" pos:end="1135:28"><name pos:start="1135:18" pos:end="1135:28">OPC_NMADD_D</name></expr>:</case>

            <case pos:start="1137:13" pos:end="1137:30">case <expr pos:start="1137:18" pos:end="1137:29"><name pos:start="1137:18" pos:end="1137:29">OPC_NMADD_PS</name></expr>:</case>

            <case pos:start="1139:13" pos:end="1139:29">case <expr pos:start="1139:18" pos:end="1139:28"><name pos:start="1139:18" pos:end="1139:28">OPC_NMSUB_S</name></expr>:</case>

            <case pos:start="1141:13" pos:end="1141:29">case <expr pos:start="1141:18" pos:end="1141:28"><name pos:start="1141:18" pos:end="1141:28">OPC_NMSUB_D</name></expr>:</case>

            <case pos:start="1143:13" pos:end="1143:30">case <expr pos:start="1143:18" pos:end="1143:29"><name pos:start="1143:18" pos:end="1143:29">OPC_NMSUB_PS</name></expr>:</case>

                <expr_stmt pos:start="1145:17" pos:end="1145:58"><expr pos:start="1145:17" pos:end="1145:57"><call pos:start="1145:17" pos:end="1145:57"><name pos:start="1145:17" pos:end="1145:26">check_insn</name><argument_list pos:start="1145:27" pos:end="1145:57">(<argument pos:start="1145:28" pos:end="1145:30"><expr pos:start="1145:28" pos:end="1145:30"><name pos:start="1145:28" pos:end="1145:30">ctx</name></expr></argument>, <argument pos:start="1145:33" pos:end="1145:56"><expr pos:start="1145:33" pos:end="1145:56"><name pos:start="1145:33" pos:end="1145:41">ISA_MIPS4</name> <operator pos:start="1145:43" pos:end="1145:43">|</operator> <name pos:start="1145:45" pos:end="1145:56">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1147:17" pos:end="1147:57"><expr pos:start="1147:17" pos:end="1147:56"><call pos:start="1147:17" pos:end="1147:56"><name pos:start="1147:17" pos:end="1147:30">gen_flt3_arith</name><argument_list pos:start="1147:31" pos:end="1147:56">(<argument pos:start="1147:32" pos:end="1147:34"><expr pos:start="1147:32" pos:end="1147:34"><name pos:start="1147:32" pos:end="1147:34">ctx</name></expr></argument>, <argument pos:start="1147:37" pos:end="1147:39"><expr pos:start="1147:37" pos:end="1147:39"><name pos:start="1147:37" pos:end="1147:39">op1</name></expr></argument>, <argument pos:start="1147:42" pos:end="1147:43"><expr pos:start="1147:42" pos:end="1147:43"><name pos:start="1147:42" pos:end="1147:43">sa</name></expr></argument>, <argument pos:start="1147:46" pos:end="1147:47"><expr pos:start="1147:46" pos:end="1147:47"><name pos:start="1147:46" pos:end="1147:47">rs</name></expr></argument>, <argument pos:start="1147:50" pos:end="1147:51"><expr pos:start="1147:50" pos:end="1147:51"><name pos:start="1147:50" pos:end="1147:51">rd</name></expr></argument>, <argument pos:start="1147:54" pos:end="1147:55"><expr pos:start="1147:54" pos:end="1147:55"><name pos:start="1147:54" pos:end="1147:55">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1149:17" pos:end="1149:22">break;</break>

            <default pos:start="1151:13" pos:end="1151:20">default:</default>

                <expr_stmt pos:start="1153:17" pos:end="1153:34"><expr pos:start="1153:17" pos:end="1153:33"><call pos:start="1153:17" pos:end="1153:33"><name pos:start="1153:17" pos:end="1153:26">MIPS_INVAL</name><argument_list pos:start="1153:27" pos:end="1153:33">(<argument pos:start="1153:28" pos:end="1153:32"><expr pos:start="1153:28" pos:end="1153:32"><literal type="string" pos:start="1153:28" pos:end="1153:32">"cp3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1155:17" pos:end="1155:53"><expr pos:start="1155:17" pos:end="1155:52"><call pos:start="1155:17" pos:end="1155:52"><name pos:start="1155:17" pos:end="1155:38">generate_exception_end</name><argument_list pos:start="1155:39" pos:end="1155:52">(<argument pos:start="1155:40" pos:end="1155:42"><expr pos:start="1155:40" pos:end="1155:42"><name pos:start="1155:40" pos:end="1155:42">ctx</name></expr></argument>, <argument pos:start="1155:45" pos:end="1155:51"><expr pos:start="1155:45" pos:end="1155:51"><name pos:start="1155:45" pos:end="1155:51">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="1157:17" pos:end="1157:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="1161:11" pos:end="1165:9">else <block pos:start="1161:16" pos:end="1165:9">{<block_content pos:start="1163:13" pos:end="1163:53">

            <expr_stmt pos:start="1163:13" pos:end="1163:53"><expr pos:start="1163:13" pos:end="1163:52"><call pos:start="1163:13" pos:end="1163:52"><name pos:start="1163:13" pos:end="1163:34">generate_exception_err</name><argument_list pos:start="1163:35" pos:end="1163:52">(<argument pos:start="1163:36" pos:end="1163:38"><expr pos:start="1163:36" pos:end="1163:38"><name pos:start="1163:36" pos:end="1163:38">ctx</name></expr></argument>, <argument pos:start="1163:41" pos:end="1163:48"><expr pos:start="1163:41" pos:end="1163:48"><name pos:start="1163:41" pos:end="1163:48">EXCP_CpU</name></expr></argument>, <argument pos:start="1163:51" pos:end="1163:51"><expr pos:start="1163:51" pos:end="1163:51"><literal type="number" pos:start="1163:51" pos:end="1163:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1167:9" pos:end="1172:0">break;</break>



<cpp:if pos:start="1171:1" pos:end="1171:26">#<cpp:directive pos:start="1171:2" pos:end="1171:3">if</cpp:directive> <expr pos:start="1171:5" pos:end="1171:26"><call pos:start="1171:5" pos:end="1171:26"><name pos:start="1171:5" pos:end="1171:11">defined</name><argument_list pos:start="1171:12" pos:end="1171:26">(<argument pos:start="1171:13" pos:end="1171:25"><expr pos:start="1171:13" pos:end="1171:25"><name pos:start="1171:13" pos:end="1171:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="1173:5" pos:end="1173:24">/* MIPS64 opcodes */</comment>

    <case pos:start="1175:5" pos:end="1175:29">case <expr pos:start="1175:10" pos:end="1175:28"><name pos:start="1175:10" pos:end="1175:16">OPC_LDL</name> <operator pos:start="1175:18" pos:end="1175:20">...</operator> <name pos:start="1175:22" pos:end="1175:28">OPC_LDR</name></expr>:</case>

    <case pos:start="1177:5" pos:end="1177:17">case <expr pos:start="1177:10" pos:end="1177:16"><name pos:start="1177:10" pos:end="1177:16">OPC_LLD</name></expr>:</case>

        <expr_stmt pos:start="1179:9" pos:end="1179:50"><expr pos:start="1179:9" pos:end="1179:49"><call pos:start="1179:9" pos:end="1179:49"><name pos:start="1179:9" pos:end="1179:30">check_insn_opc_removed</name><argument_list pos:start="1179:31" pos:end="1179:49">(<argument pos:start="1179:32" pos:end="1179:34"><expr pos:start="1179:32" pos:end="1179:34"><name pos:start="1179:32" pos:end="1179:34">ctx</name></expr></argument>, <argument pos:start="1179:37" pos:end="1179:48"><expr pos:start="1179:37" pos:end="1179:48"><name pos:start="1179:37" pos:end="1179:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1181:9" pos:end="1181:26">/* fall through */</comment>

    <case pos:start="1183:5" pos:end="1183:17">case <expr pos:start="1183:10" pos:end="1183:16"><name pos:start="1183:10" pos:end="1183:16">OPC_LWU</name></expr>:</case>

    <case pos:start="1185:5" pos:end="1185:16">case <expr pos:start="1185:10" pos:end="1185:15"><name pos:start="1185:10" pos:end="1185:15">OPC_LD</name></expr>:</case>

        <expr_stmt pos:start="1187:9" pos:end="1187:35"><expr pos:start="1187:9" pos:end="1187:34"><call pos:start="1187:9" pos:end="1187:34"><name pos:start="1187:9" pos:end="1187:18">check_insn</name><argument_list pos:start="1187:19" pos:end="1187:34">(<argument pos:start="1187:20" pos:end="1187:22"><expr pos:start="1187:20" pos:end="1187:22"><name pos:start="1187:20" pos:end="1187:22">ctx</name></expr></argument>, <argument pos:start="1187:25" pos:end="1187:33"><expr pos:start="1187:25" pos:end="1187:33"><name pos:start="1187:25" pos:end="1187:33">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1189:9" pos:end="1189:27"><expr pos:start="1189:9" pos:end="1189:26"><call pos:start="1189:9" pos:end="1189:26"><name pos:start="1189:9" pos:end="1189:21">check_mips_64</name><argument_list pos:start="1189:22" pos:end="1189:26">(<argument pos:start="1189:23" pos:end="1189:25"><expr pos:start="1189:23" pos:end="1189:25"><name pos:start="1189:23" pos:end="1189:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1191:9" pos:end="1191:37"><expr pos:start="1191:9" pos:end="1191:36"><call pos:start="1191:9" pos:end="1191:36"><name pos:start="1191:9" pos:end="1191:14">gen_ld</name><argument_list pos:start="1191:15" pos:end="1191:36">(<argument pos:start="1191:16" pos:end="1191:18"><expr pos:start="1191:16" pos:end="1191:18"><name pos:start="1191:16" pos:end="1191:18">ctx</name></expr></argument>, <argument pos:start="1191:21" pos:end="1191:22"><expr pos:start="1191:21" pos:end="1191:22"><name pos:start="1191:21" pos:end="1191:22">op</name></expr></argument>, <argument pos:start="1191:25" pos:end="1191:26"><expr pos:start="1191:25" pos:end="1191:26"><name pos:start="1191:25" pos:end="1191:26">rt</name></expr></argument>, <argument pos:start="1191:29" pos:end="1191:30"><expr pos:start="1191:29" pos:end="1191:30"><name pos:start="1191:29" pos:end="1191:30">rs</name></expr></argument>, <argument pos:start="1191:33" pos:end="1191:35"><expr pos:start="1191:33" pos:end="1191:35"><name pos:start="1191:33" pos:end="1191:35">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1193:9" pos:end="1193:14">break;</break>

    <case pos:start="1195:5" pos:end="1195:29">case <expr pos:start="1195:10" pos:end="1195:28"><name pos:start="1195:10" pos:end="1195:16">OPC_SDL</name> <operator pos:start="1195:18" pos:end="1195:20">...</operator> <name pos:start="1195:22" pos:end="1195:28">OPC_SDR</name></expr>:</case>

        <expr_stmt pos:start="1197:9" pos:end="1197:50"><expr pos:start="1197:9" pos:end="1197:49"><call pos:start="1197:9" pos:end="1197:49"><name pos:start="1197:9" pos:end="1197:30">check_insn_opc_removed</name><argument_list pos:start="1197:31" pos:end="1197:49">(<argument pos:start="1197:32" pos:end="1197:34"><expr pos:start="1197:32" pos:end="1197:34"><name pos:start="1197:32" pos:end="1197:34">ctx</name></expr></argument>, <argument pos:start="1197:37" pos:end="1197:48"><expr pos:start="1197:37" pos:end="1197:48"><name pos:start="1197:37" pos:end="1197:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1199:9" pos:end="1199:26">/* fall through */</comment>

    <case pos:start="1201:5" pos:end="1201:16">case <expr pos:start="1201:10" pos:end="1201:15"><name pos:start="1201:10" pos:end="1201:15">OPC_SD</name></expr>:</case>

        <expr_stmt pos:start="1203:9" pos:end="1203:35"><expr pos:start="1203:9" pos:end="1203:34"><call pos:start="1203:9" pos:end="1203:34"><name pos:start="1203:9" pos:end="1203:18">check_insn</name><argument_list pos:start="1203:19" pos:end="1203:34">(<argument pos:start="1203:20" pos:end="1203:22"><expr pos:start="1203:20" pos:end="1203:22"><name pos:start="1203:20" pos:end="1203:22">ctx</name></expr></argument>, <argument pos:start="1203:25" pos:end="1203:33"><expr pos:start="1203:25" pos:end="1203:33"><name pos:start="1203:25" pos:end="1203:33">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1205:9" pos:end="1205:27"><expr pos:start="1205:9" pos:end="1205:26"><call pos:start="1205:9" pos:end="1205:26"><name pos:start="1205:9" pos:end="1205:21">check_mips_64</name><argument_list pos:start="1205:22" pos:end="1205:26">(<argument pos:start="1205:23" pos:end="1205:25"><expr pos:start="1205:23" pos:end="1205:25"><name pos:start="1205:23" pos:end="1205:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1207:9" pos:end="1207:37"><expr pos:start="1207:9" pos:end="1207:36"><call pos:start="1207:9" pos:end="1207:36"><name pos:start="1207:9" pos:end="1207:14">gen_st</name><argument_list pos:start="1207:15" pos:end="1207:36">(<argument pos:start="1207:16" pos:end="1207:18"><expr pos:start="1207:16" pos:end="1207:18"><name pos:start="1207:16" pos:end="1207:18">ctx</name></expr></argument>, <argument pos:start="1207:21" pos:end="1207:22"><expr pos:start="1207:21" pos:end="1207:22"><name pos:start="1207:21" pos:end="1207:22">op</name></expr></argument>, <argument pos:start="1207:25" pos:end="1207:26"><expr pos:start="1207:25" pos:end="1207:26"><name pos:start="1207:25" pos:end="1207:26">rt</name></expr></argument>, <argument pos:start="1207:29" pos:end="1207:30"><expr pos:start="1207:29" pos:end="1207:30"><name pos:start="1207:29" pos:end="1207:30">rs</name></expr></argument>, <argument pos:start="1207:33" pos:end="1207:35"><expr pos:start="1207:33" pos:end="1207:35"><name pos:start="1207:33" pos:end="1207:35">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1209:9" pos:end="1209:14">break;</break>

    <case pos:start="1211:5" pos:end="1211:17">case <expr pos:start="1211:10" pos:end="1211:16"><name pos:start="1211:10" pos:end="1211:16">OPC_SCD</name></expr>:</case>

        <expr_stmt pos:start="1213:9" pos:end="1213:50"><expr pos:start="1213:9" pos:end="1213:49"><call pos:start="1213:9" pos:end="1213:49"><name pos:start="1213:9" pos:end="1213:30">check_insn_opc_removed</name><argument_list pos:start="1213:31" pos:end="1213:49">(<argument pos:start="1213:32" pos:end="1213:34"><expr pos:start="1213:32" pos:end="1213:34"><name pos:start="1213:32" pos:end="1213:34">ctx</name></expr></argument>, <argument pos:start="1213:37" pos:end="1213:48"><expr pos:start="1213:37" pos:end="1213:48"><name pos:start="1213:37" pos:end="1213:48">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1215:9" pos:end="1215:35"><expr pos:start="1215:9" pos:end="1215:34"><call pos:start="1215:9" pos:end="1215:34"><name pos:start="1215:9" pos:end="1215:18">check_insn</name><argument_list pos:start="1215:19" pos:end="1215:34">(<argument pos:start="1215:20" pos:end="1215:22"><expr pos:start="1215:20" pos:end="1215:22"><name pos:start="1215:20" pos:end="1215:22">ctx</name></expr></argument>, <argument pos:start="1215:25" pos:end="1215:33"><expr pos:start="1215:25" pos:end="1215:33"><name pos:start="1215:25" pos:end="1215:33">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1217:9" pos:end="1217:27"><expr pos:start="1217:9" pos:end="1217:26"><call pos:start="1217:9" pos:end="1217:26"><name pos:start="1217:9" pos:end="1217:21">check_mips_64</name><argument_list pos:start="1217:22" pos:end="1217:26">(<argument pos:start="1217:23" pos:end="1217:25"><expr pos:start="1217:23" pos:end="1217:25"><name pos:start="1217:23" pos:end="1217:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1219:9" pos:end="1219:42"><expr pos:start="1219:9" pos:end="1219:41"><call pos:start="1219:9" pos:end="1219:41"><name pos:start="1219:9" pos:end="1219:19">gen_st_cond</name><argument_list pos:start="1219:20" pos:end="1219:41">(<argument pos:start="1219:21" pos:end="1219:23"><expr pos:start="1219:21" pos:end="1219:23"><name pos:start="1219:21" pos:end="1219:23">ctx</name></expr></argument>, <argument pos:start="1219:26" pos:end="1219:27"><expr pos:start="1219:26" pos:end="1219:27"><name pos:start="1219:26" pos:end="1219:27">op</name></expr></argument>, <argument pos:start="1219:30" pos:end="1219:31"><expr pos:start="1219:30" pos:end="1219:31"><name pos:start="1219:30" pos:end="1219:31">rt</name></expr></argument>, <argument pos:start="1219:34" pos:end="1219:35"><expr pos:start="1219:34" pos:end="1219:35"><name pos:start="1219:34" pos:end="1219:35">rs</name></expr></argument>, <argument pos:start="1219:38" pos:end="1219:40"><expr pos:start="1219:38" pos:end="1219:40"><name pos:start="1219:38" pos:end="1219:40">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1221:9" pos:end="1221:14">break;</break>

    <case pos:start="1223:5" pos:end="1223:18">case <expr pos:start="1223:10" pos:end="1223:17"><name pos:start="1223:10" pos:end="1223:17">OPC_BNVC</name></expr>:</case> <comment type="block" pos:start="1223:20" pos:end="1223:57">/* OPC_BNEZALC, OPC_BNEC, OPC_DADDI */</comment>

        <if_stmt pos:start="1225:9" pos:end="1241:9"><if pos:start="1225:9" pos:end="1231:9">if <condition pos:start="1225:12" pos:end="1225:43">(<expr pos:start="1225:13" pos:end="1225:42"><name pos:start="1225:13" pos:end="1225:27"><name pos:start="1225:13" pos:end="1225:15">ctx</name><operator pos:start="1225:16" pos:end="1225:17">-&gt;</operator><name pos:start="1225:18" pos:end="1225:27">insn_flags</name></name> <operator pos:start="1225:29" pos:end="1225:29">&amp;</operator> <name pos:start="1225:31" pos:end="1225:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="1225:45" pos:end="1231:9">{<block_content pos:start="1229:13" pos:end="1229:66">

            <comment type="block" pos:start="1227:13" pos:end="1227:49">/* OPC_BNVC, OPC_BNEZALC, OPC_BNEC */</comment>

            <expr_stmt pos:start="1229:13" pos:end="1229:66"><expr pos:start="1229:13" pos:end="1229:65"><call pos:start="1229:13" pos:end="1229:65"><name pos:start="1229:13" pos:end="1229:38">gen_compute_compact_branch</name><argument_list pos:start="1229:39" pos:end="1229:65">(<argument pos:start="1229:40" pos:end="1229:42"><expr pos:start="1229:40" pos:end="1229:42"><name pos:start="1229:40" pos:end="1229:42">ctx</name></expr></argument>, <argument pos:start="1229:45" pos:end="1229:46"><expr pos:start="1229:45" pos:end="1229:46"><name pos:start="1229:45" pos:end="1229:46">op</name></expr></argument>, <argument pos:start="1229:49" pos:end="1229:50"><expr pos:start="1229:49" pos:end="1229:50"><name pos:start="1229:49" pos:end="1229:50">rs</name></expr></argument>, <argument pos:start="1229:53" pos:end="1229:54"><expr pos:start="1229:53" pos:end="1229:54"><name pos:start="1229:53" pos:end="1229:54">rt</name></expr></argument>, <argument pos:start="1229:57" pos:end="1229:64"><expr pos:start="1229:57" pos:end="1229:64"><name pos:start="1229:57" pos:end="1229:59">imm</name> <operator pos:start="1229:61" pos:end="1229:62">&lt;&lt;</operator> <literal type="number" pos:start="1229:64" pos:end="1229:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1231:11" pos:end="1241:9">else <block pos:start="1231:16" pos:end="1241:9">{<block_content pos:start="1235:13" pos:end="1239:48">

            <comment type="block" pos:start="1233:13" pos:end="1233:27">/* OPC_DADDI */</comment>

            <expr_stmt pos:start="1235:13" pos:end="1235:39"><expr pos:start="1235:13" pos:end="1235:38"><call pos:start="1235:13" pos:end="1235:38"><name pos:start="1235:13" pos:end="1235:22">check_insn</name><argument_list pos:start="1235:23" pos:end="1235:38">(<argument pos:start="1235:24" pos:end="1235:26"><expr pos:start="1235:24" pos:end="1235:26"><name pos:start="1235:24" pos:end="1235:26">ctx</name></expr></argument>, <argument pos:start="1235:29" pos:end="1235:37"><expr pos:start="1235:29" pos:end="1235:37"><name pos:start="1235:29" pos:end="1235:37">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1237:13" pos:end="1237:31"><expr pos:start="1237:13" pos:end="1237:30"><call pos:start="1237:13" pos:end="1237:30"><name pos:start="1237:13" pos:end="1237:25">check_mips_64</name><argument_list pos:start="1237:26" pos:end="1237:30">(<argument pos:start="1237:27" pos:end="1237:29"><expr pos:start="1237:27" pos:end="1237:29"><name pos:start="1237:27" pos:end="1237:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1239:13" pos:end="1239:48"><expr pos:start="1239:13" pos:end="1239:47"><call pos:start="1239:13" pos:end="1239:47"><name pos:start="1239:13" pos:end="1239:25">gen_arith_imm</name><argument_list pos:start="1239:26" pos:end="1239:47">(<argument pos:start="1239:27" pos:end="1239:29"><expr pos:start="1239:27" pos:end="1239:29"><name pos:start="1239:27" pos:end="1239:29">ctx</name></expr></argument>, <argument pos:start="1239:32" pos:end="1239:33"><expr pos:start="1239:32" pos:end="1239:33"><name pos:start="1239:32" pos:end="1239:33">op</name></expr></argument>, <argument pos:start="1239:36" pos:end="1239:37"><expr pos:start="1239:36" pos:end="1239:37"><name pos:start="1239:36" pos:end="1239:37">rt</name></expr></argument>, <argument pos:start="1239:40" pos:end="1239:41"><expr pos:start="1239:40" pos:end="1239:41"><name pos:start="1239:40" pos:end="1239:41">rs</name></expr></argument>, <argument pos:start="1239:44" pos:end="1239:46"><expr pos:start="1239:44" pos:end="1239:46"><name pos:start="1239:44" pos:end="1239:46">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1243:9" pos:end="1243:14">break;</break>

    <case pos:start="1245:5" pos:end="1245:20">case <expr pos:start="1245:10" pos:end="1245:19"><name pos:start="1245:10" pos:end="1245:19">OPC_DADDIU</name></expr>:</case>

        <expr_stmt pos:start="1247:9" pos:end="1247:35"><expr pos:start="1247:9" pos:end="1247:34"><call pos:start="1247:9" pos:end="1247:34"><name pos:start="1247:9" pos:end="1247:18">check_insn</name><argument_list pos:start="1247:19" pos:end="1247:34">(<argument pos:start="1247:20" pos:end="1247:22"><expr pos:start="1247:20" pos:end="1247:22"><name pos:start="1247:20" pos:end="1247:22">ctx</name></expr></argument>, <argument pos:start="1247:25" pos:end="1247:33"><expr pos:start="1247:25" pos:end="1247:33"><name pos:start="1247:25" pos:end="1247:33">ISA_MIPS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1249:9" pos:end="1249:27"><expr pos:start="1249:9" pos:end="1249:26"><call pos:start="1249:9" pos:end="1249:26"><name pos:start="1249:9" pos:end="1249:21">check_mips_64</name><argument_list pos:start="1249:22" pos:end="1249:26">(<argument pos:start="1249:23" pos:end="1249:25"><expr pos:start="1249:23" pos:end="1249:25"><name pos:start="1249:23" pos:end="1249:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1251:9" pos:end="1251:44"><expr pos:start="1251:9" pos:end="1251:43"><call pos:start="1251:9" pos:end="1251:43"><name pos:start="1251:9" pos:end="1251:21">gen_arith_imm</name><argument_list pos:start="1251:22" pos:end="1251:43">(<argument pos:start="1251:23" pos:end="1251:25"><expr pos:start="1251:23" pos:end="1251:25"><name pos:start="1251:23" pos:end="1251:25">ctx</name></expr></argument>, <argument pos:start="1251:28" pos:end="1251:29"><expr pos:start="1251:28" pos:end="1251:29"><name pos:start="1251:28" pos:end="1251:29">op</name></expr></argument>, <argument pos:start="1251:32" pos:end="1251:33"><expr pos:start="1251:32" pos:end="1251:33"><name pos:start="1251:32" pos:end="1251:33">rt</name></expr></argument>, <argument pos:start="1251:36" pos:end="1251:37"><expr pos:start="1251:36" pos:end="1251:37"><name pos:start="1251:36" pos:end="1251:37">rs</name></expr></argument>, <argument pos:start="1251:40" pos:end="1251:42"><expr pos:start="1251:40" pos:end="1251:42"><name pos:start="1251:40" pos:end="1251:42">imm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1253:9" pos:end="1256:0">break;</break>

<cpp:else pos:start="1255:1" pos:end="1255:5">#<cpp:directive pos:start="1255:2" pos:end="1255:5">else</cpp:directive></cpp:else>

    <case pos:start="1257:5" pos:end="1257:18">case <expr pos:start="1257:10" pos:end="1257:17"><name pos:start="1257:10" pos:end="1257:17">OPC_BNVC</name></expr>:</case> <comment type="block" pos:start="1257:20" pos:end="1257:46">/* OPC_BNEZALC, OPC_BNEC */</comment>

        <if_stmt pos:start="1259:9" pos:end="1269:9"><if pos:start="1259:9" pos:end="1263:9">if <condition pos:start="1259:12" pos:end="1259:43">(<expr pos:start="1259:13" pos:end="1259:42"><name pos:start="1259:13" pos:end="1259:27"><name pos:start="1259:13" pos:end="1259:15">ctx</name><operator pos:start="1259:16" pos:end="1259:17">-&gt;</operator><name pos:start="1259:18" pos:end="1259:27">insn_flags</name></name> <operator pos:start="1259:29" pos:end="1259:29">&amp;</operator> <name pos:start="1259:31" pos:end="1259:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="1259:45" pos:end="1263:9">{<block_content pos:start="1261:13" pos:end="1261:66">

            <expr_stmt pos:start="1261:13" pos:end="1261:66"><expr pos:start="1261:13" pos:end="1261:65"><call pos:start="1261:13" pos:end="1261:65"><name pos:start="1261:13" pos:end="1261:38">gen_compute_compact_branch</name><argument_list pos:start="1261:39" pos:end="1261:65">(<argument pos:start="1261:40" pos:end="1261:42"><expr pos:start="1261:40" pos:end="1261:42"><name pos:start="1261:40" pos:end="1261:42">ctx</name></expr></argument>, <argument pos:start="1261:45" pos:end="1261:46"><expr pos:start="1261:45" pos:end="1261:46"><name pos:start="1261:45" pos:end="1261:46">op</name></expr></argument>, <argument pos:start="1261:49" pos:end="1261:50"><expr pos:start="1261:49" pos:end="1261:50"><name pos:start="1261:49" pos:end="1261:50">rs</name></expr></argument>, <argument pos:start="1261:53" pos:end="1261:54"><expr pos:start="1261:53" pos:end="1261:54"><name pos:start="1261:53" pos:end="1261:54">rt</name></expr></argument>, <argument pos:start="1261:57" pos:end="1261:64"><expr pos:start="1261:57" pos:end="1261:64"><name pos:start="1261:57" pos:end="1261:59">imm</name> <operator pos:start="1261:61" pos:end="1261:62">&lt;&lt;</operator> <literal type="number" pos:start="1261:64" pos:end="1261:64">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1263:11" pos:end="1269:9">else <block pos:start="1263:16" pos:end="1269:9">{<block_content pos:start="1265:13" pos:end="1267:49">

            <expr_stmt pos:start="1265:13" pos:end="1265:39"><expr pos:start="1265:13" pos:end="1265:38"><call pos:start="1265:13" pos:end="1265:38"><name pos:start="1265:13" pos:end="1265:22">MIPS_INVAL</name><argument_list pos:start="1265:23" pos:end="1265:38">(<argument pos:start="1265:24" pos:end="1265:37"><expr pos:start="1265:24" pos:end="1265:37"><literal type="string" pos:start="1265:24" pos:end="1265:37">"major opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1267:13" pos:end="1267:49"><expr pos:start="1267:13" pos:end="1267:48"><call pos:start="1267:13" pos:end="1267:48"><name pos:start="1267:13" pos:end="1267:34">generate_exception_end</name><argument_list pos:start="1267:35" pos:end="1267:48">(<argument pos:start="1267:36" pos:end="1267:38"><expr pos:start="1267:36" pos:end="1267:38"><name pos:start="1267:36" pos:end="1267:38">ctx</name></expr></argument>, <argument pos:start="1267:41" pos:end="1267:47"><expr pos:start="1267:41" pos:end="1267:47"><name pos:start="1267:41" pos:end="1267:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1271:9" pos:end="1274:0">break;</break>

<cpp:endif pos:start="1273:1" pos:end="1273:6">#<cpp:directive pos:start="1273:2" pos:end="1273:6">endif</cpp:directive></cpp:endif>

    <case pos:start="1275:5" pos:end="1275:18">case <expr pos:start="1275:10" pos:end="1275:17"><name pos:start="1275:10" pos:end="1275:17">OPC_DAUI</name></expr>:</case> <comment type="block" pos:start="1275:20" pos:end="1275:33">/* OPC_JALX */</comment>

        <if_stmt pos:start="1277:9" pos:end="1319:9"><if pos:start="1277:9" pos:end="1309:9">if <condition pos:start="1277:12" pos:end="1277:43">(<expr pos:start="1277:13" pos:end="1277:42"><name pos:start="1277:13" pos:end="1277:27"><name pos:start="1277:13" pos:end="1277:15">ctx</name><operator pos:start="1277:16" pos:end="1277:17">-&gt;</operator><name pos:start="1277:18" pos:end="1277:27">insn_flags</name></name> <operator pos:start="1277:29" pos:end="1277:29">&amp;</operator> <name pos:start="1277:31" pos:end="1277:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="1277:45" pos:end="1309:9">{<block_content pos:start="1283:13" pos:end="1308:0">

<cpp:if pos:start="1279:1" pos:end="1279:26">#<cpp:directive pos:start="1279:2" pos:end="1279:3">if</cpp:directive> <expr pos:start="1279:5" pos:end="1279:26"><call pos:start="1279:5" pos:end="1279:26"><name pos:start="1279:5" pos:end="1279:11">defined</name><argument_list pos:start="1279:12" pos:end="1279:26">(<argument pos:start="1279:13" pos:end="1279:25"><expr pos:start="1279:13" pos:end="1279:25"><name pos:start="1279:13" pos:end="1279:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

            <comment type="block" pos:start="1281:13" pos:end="1281:26">/* OPC_DAUI */</comment>

            <expr_stmt pos:start="1283:13" pos:end="1283:31"><expr pos:start="1283:13" pos:end="1283:30"><call pos:start="1283:13" pos:end="1283:30"><name pos:start="1283:13" pos:end="1283:25">check_mips_64</name><argument_list pos:start="1283:26" pos:end="1283:30">(<argument pos:start="1283:27" pos:end="1283:29"><expr pos:start="1283:27" pos:end="1283:29"><name pos:start="1283:27" pos:end="1283:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1285:13" pos:end="1302:0"><if pos:start="1285:13" pos:end="1289:13">if <condition pos:start="1285:16" pos:end="1285:24">(<expr pos:start="1285:17" pos:end="1285:23"><name pos:start="1285:17" pos:end="1285:18">rs</name> <operator pos:start="1285:20" pos:end="1285:21">==</operator> <literal type="number" pos:start="1285:23" pos:end="1285:23">0</literal></expr>)</condition> <block pos:start="1285:26" pos:end="1289:13">{<block_content pos:start="1287:17" pos:end="1287:49">

                <expr_stmt pos:start="1287:17" pos:end="1287:49"><expr pos:start="1287:17" pos:end="1287:48"><call pos:start="1287:17" pos:end="1287:48"><name pos:start="1287:17" pos:end="1287:34">generate_exception</name><argument_list pos:start="1287:35" pos:end="1287:48">(<argument pos:start="1287:36" pos:end="1287:38"><expr pos:start="1287:36" pos:end="1287:38"><name pos:start="1287:36" pos:end="1287:38">ctx</name></expr></argument>, <argument pos:start="1287:41" pos:end="1287:47"><expr pos:start="1287:41" pos:end="1287:47"><name pos:start="1287:41" pos:end="1287:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="1289:15" pos:end="1302:0">else if <condition pos:start="1289:23" pos:end="1289:31">(<expr pos:start="1289:24" pos:end="1289:30"><name pos:start="1289:24" pos:end="1289:25">rt</name> <operator pos:start="1289:27" pos:end="1289:28">!=</operator> <literal type="number" pos:start="1289:30" pos:end="1289:30">0</literal></expr>)</condition> <block pos:start="1289:33" pos:end="1302:0">{<block_content pos:start="1291:17" pos:end="1297:34">

                <decl_stmt pos:start="1291:17" pos:end="1291:41"><decl pos:start="1291:17" pos:end="1291:40"><type pos:start="1291:17" pos:end="1291:20"><name pos:start="1291:17" pos:end="1291:20">TCGv</name></type> <name pos:start="1291:22" pos:end="1291:23">t0</name> <init pos:start="1291:25" pos:end="1291:40">= <expr pos:start="1291:27" pos:end="1291:40"><call pos:start="1291:27" pos:end="1291:40"><name pos:start="1291:27" pos:end="1291:38">tcg_temp_new</name><argument_list pos:start="1291:39" pos:end="1291:40">()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="1293:17" pos:end="1293:37"><expr pos:start="1293:17" pos:end="1293:36"><call pos:start="1293:17" pos:end="1293:36"><name pos:start="1293:17" pos:end="1293:28">gen_load_gpr</name><argument_list pos:start="1293:29" pos:end="1293:36">(<argument pos:start="1293:30" pos:end="1293:31"><expr pos:start="1293:30" pos:end="1293:31"><name pos:start="1293:30" pos:end="1293:31">t0</name></expr></argument>, <argument pos:start="1293:34" pos:end="1293:35"><expr pos:start="1293:34" pos:end="1293:35"><name pos:start="1293:34" pos:end="1293:35">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1295:17" pos:end="1295:60"><expr pos:start="1295:17" pos:end="1295:59"><call pos:start="1295:17" pos:end="1295:59"><name pos:start="1295:17" pos:end="1295:31">tcg_gen_addi_tl</name><argument_list pos:start="1295:32" pos:end="1295:59">(<argument pos:start="1295:33" pos:end="1295:43"><expr pos:start="1295:33" pos:end="1295:43"><name pos:start="1295:33" pos:end="1295:43"><name pos:start="1295:33" pos:end="1295:39">cpu_gpr</name><index pos:start="1295:40" pos:end="1295:43">[<expr pos:start="1295:41" pos:end="1295:42"><name pos:start="1295:41" pos:end="1295:42">rt</name></expr>]</index></name></expr></argument>, <argument pos:start="1295:46" pos:end="1295:47"><expr pos:start="1295:46" pos:end="1295:47"><name pos:start="1295:46" pos:end="1295:47">t0</name></expr></argument>, <argument pos:start="1295:50" pos:end="1295:58"><expr pos:start="1295:50" pos:end="1295:58"><name pos:start="1295:50" pos:end="1295:52">imm</name> <operator pos:start="1295:54" pos:end="1295:55">&lt;&lt;</operator> <literal type="number" pos:start="1295:57" pos:end="1295:58">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1297:17" pos:end="1297:34"><expr pos:start="1297:17" pos:end="1297:33"><call pos:start="1297:17" pos:end="1297:33"><name pos:start="1297:17" pos:end="1297:29">tcg_temp_free</name><argument_list pos:start="1297:30" pos:end="1297:33">(<argument pos:start="1297:31" pos:end="1297:32"><expr pos:start="1297:31" pos:end="1297:32"><name pos:start="1297:31" pos:end="1297:32">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

<cpp:else pos:start="1301:1" pos:end="1301:5">#<cpp:directive pos:start="1301:2" pos:end="1301:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1303:13" pos:end="1303:49"><expr pos:start="1303:13" pos:end="1303:48"><call pos:start="1303:13" pos:end="1303:48"><name pos:start="1303:13" pos:end="1303:34">generate_exception_end</name><argument_list pos:start="1303:35" pos:end="1303:48">(<argument pos:start="1303:36" pos:end="1303:38"><expr pos:start="1303:36" pos:end="1303:38"><name pos:start="1303:36" pos:end="1303:38">ctx</name></expr></argument>, <argument pos:start="1303:41" pos:end="1303:47"><expr pos:start="1303:41" pos:end="1303:47"><name pos:start="1303:41" pos:end="1303:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1305:13" pos:end="1308:0"><expr pos:start="1305:13" pos:end="1305:38"><call pos:start="1305:13" pos:end="1305:38"><name pos:start="1305:13" pos:end="1305:22">MIPS_INVAL</name><argument_list pos:start="1305:23" pos:end="1305:38">(<argument pos:start="1305:24" pos:end="1305:37"><expr pos:start="1305:24" pos:end="1305:37"><literal type="string" pos:start="1305:24" pos:end="1305:37">"major opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1307:1" pos:end="1307:6">#<cpp:directive pos:start="1307:2" pos:end="1307:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="1309:11" pos:end="1319:9">else <block pos:start="1309:16" pos:end="1319:9">{<block_content pos:start="1313:13" pos:end="1317:62">

            <comment type="block" pos:start="1311:13" pos:end="1311:26">/* OPC_JALX */</comment>

            <expr_stmt pos:start="1313:13" pos:end="1313:56"><expr pos:start="1313:13" pos:end="1313:55"><call pos:start="1313:13" pos:end="1313:55"><name pos:start="1313:13" pos:end="1313:22">check_insn</name><argument_list pos:start="1313:23" pos:end="1313:55">(<argument pos:start="1313:24" pos:end="1313:26"><expr pos:start="1313:24" pos:end="1313:26"><name pos:start="1313:24" pos:end="1313:26">ctx</name></expr></argument>, <argument pos:start="1313:29" pos:end="1313:54"><expr pos:start="1313:29" pos:end="1313:54"><name pos:start="1313:29" pos:end="1313:38">ASE_MIPS16</name> <operator pos:start="1313:40" pos:end="1313:40">|</operator> <name pos:start="1313:42" pos:end="1313:54">ASE_MICROMIPS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1315:13" pos:end="1315:61"><expr pos:start="1315:13" pos:end="1315:60"><name pos:start="1315:13" pos:end="1315:18">offset</name> <operator pos:start="1315:20" pos:end="1315:20">=</operator> <operator pos:start="1315:22" pos:end="1315:22">(</operator><name pos:start="1315:23" pos:end="1315:29">int32_t</name><operator pos:start="1315:30" pos:end="1315:30">)</operator><operator pos:start="1315:31" pos:end="1315:31">(</operator><name pos:start="1315:32" pos:end="1315:42"><name pos:start="1315:32" pos:end="1315:34">ctx</name><operator pos:start="1315:35" pos:end="1315:36">-&gt;</operator><name pos:start="1315:37" pos:end="1315:42">opcode</name></name> <operator pos:start="1315:44" pos:end="1315:44">&amp;</operator> <literal type="number" pos:start="1315:46" pos:end="1315:54">0x3FFFFFF</literal><operator pos:start="1315:55" pos:end="1315:55">)</operator> <operator pos:start="1315:57" pos:end="1315:58">&lt;&lt;</operator> <literal type="number" pos:start="1315:60" pos:end="1315:60">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1317:62"><expr pos:start="1317:13" pos:end="1317:61"><call pos:start="1317:13" pos:end="1317:61"><name pos:start="1317:13" pos:end="1317:30">gen_compute_branch</name><argument_list pos:start="1317:31" pos:end="1317:61">(<argument pos:start="1317:32" pos:end="1317:34"><expr pos:start="1317:32" pos:end="1317:34"><name pos:start="1317:32" pos:end="1317:34">ctx</name></expr></argument>, <argument pos:start="1317:37" pos:end="1317:38"><expr pos:start="1317:37" pos:end="1317:38"><name pos:start="1317:37" pos:end="1317:38">op</name></expr></argument>, <argument pos:start="1317:41" pos:end="1317:41"><expr pos:start="1317:41" pos:end="1317:41"><literal type="number" pos:start="1317:41" pos:end="1317:41">4</literal></expr></argument>, <argument pos:start="1317:44" pos:end="1317:45"><expr pos:start="1317:44" pos:end="1317:45"><name pos:start="1317:44" pos:end="1317:45">rs</name></expr></argument>, <argument pos:start="1317:48" pos:end="1317:49"><expr pos:start="1317:48" pos:end="1317:49"><name pos:start="1317:48" pos:end="1317:49">rt</name></expr></argument>, <argument pos:start="1317:52" pos:end="1317:57"><expr pos:start="1317:52" pos:end="1317:57"><name pos:start="1317:52" pos:end="1317:57">offset</name></expr></argument>, <argument pos:start="1317:60" pos:end="1317:60"><expr pos:start="1317:60" pos:end="1317:60"><literal type="number" pos:start="1317:60" pos:end="1317:60">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1321:9" pos:end="1321:14">break;</break>

    <case pos:start="1323:5" pos:end="1323:17">case <expr pos:start="1323:10" pos:end="1323:16"><name pos:start="1323:10" pos:end="1323:16">OPC_MSA</name></expr>:</case> <comment type="block" pos:start="1323:19" pos:end="1323:32">/* OPC_MDMX */</comment>

        <comment type="block" pos:start="1325:9" pos:end="1325:36">/* MDMX: Not implemented. */</comment>

        <expr_stmt pos:start="1327:9" pos:end="1327:26"><expr pos:start="1327:9" pos:end="1327:25"><call pos:start="1327:9" pos:end="1327:25"><name pos:start="1327:9" pos:end="1327:15">gen_msa</name><argument_list pos:start="1327:16" pos:end="1327:25">(<argument pos:start="1327:17" pos:end="1327:19"><expr pos:start="1327:17" pos:end="1327:19"><name pos:start="1327:17" pos:end="1327:19">env</name></expr></argument>, <argument pos:start="1327:22" pos:end="1327:24"><expr pos:start="1327:22" pos:end="1327:24"><name pos:start="1327:22" pos:end="1327:24">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1329:9" pos:end="1329:14">break;</break>

    <case pos:start="1331:5" pos:end="1331:19">case <expr pos:start="1331:10" pos:end="1331:18"><name pos:start="1331:10" pos:end="1331:18">OPC_PCREL</name></expr>:</case>

        <expr_stmt pos:start="1333:9" pos:end="1333:38"><expr pos:start="1333:9" pos:end="1333:37"><call pos:start="1333:9" pos:end="1333:37"><name pos:start="1333:9" pos:end="1333:18">check_insn</name><argument_list pos:start="1333:19" pos:end="1333:37">(<argument pos:start="1333:20" pos:end="1333:22"><expr pos:start="1333:20" pos:end="1333:22"><name pos:start="1333:20" pos:end="1333:22">ctx</name></expr></argument>, <argument pos:start="1333:25" pos:end="1333:36"><expr pos:start="1333:25" pos:end="1333:36"><name pos:start="1333:25" pos:end="1333:36">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1335:9" pos:end="1335:49"><expr pos:start="1335:9" pos:end="1335:48"><call pos:start="1335:9" pos:end="1335:48"><name pos:start="1335:9" pos:end="1335:17">gen_pcrel</name><argument_list pos:start="1335:18" pos:end="1335:48">(<argument pos:start="1335:19" pos:end="1335:21"><expr pos:start="1335:19" pos:end="1335:21"><name pos:start="1335:19" pos:end="1335:21">ctx</name></expr></argument>, <argument pos:start="1335:24" pos:end="1335:34"><expr pos:start="1335:24" pos:end="1335:34"><name pos:start="1335:24" pos:end="1335:34"><name pos:start="1335:24" pos:end="1335:26">ctx</name><operator pos:start="1335:27" pos:end="1335:28">-&gt;</operator><name pos:start="1335:29" pos:end="1335:34">opcode</name></name></expr></argument>, <argument pos:start="1335:37" pos:end="1335:43"><expr pos:start="1335:37" pos:end="1335:43"><name pos:start="1335:37" pos:end="1335:43"><name pos:start="1335:37" pos:end="1335:39">ctx</name><operator pos:start="1335:40" pos:end="1335:41">-&gt;</operator><name pos:start="1335:42" pos:end="1335:43">pc</name></name></expr></argument>, <argument pos:start="1335:46" pos:end="1335:47"><expr pos:start="1335:46" pos:end="1335:47"><name pos:start="1335:46" pos:end="1335:47">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1337:9" pos:end="1337:14">break;</break>

    <default pos:start="1339:5" pos:end="1339:12">default:</default>            <comment type="block" pos:start="1339:25" pos:end="1339:37">/* Invalid */</comment>

        <expr_stmt pos:start="1341:9" pos:end="1341:35"><expr pos:start="1341:9" pos:end="1341:34"><call pos:start="1341:9" pos:end="1341:34"><name pos:start="1341:9" pos:end="1341:18">MIPS_INVAL</name><argument_list pos:start="1341:19" pos:end="1341:34">(<argument pos:start="1341:20" pos:end="1341:33"><expr pos:start="1341:20" pos:end="1341:33"><literal type="string" pos:start="1341:20" pos:end="1341:33">"major opcode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1343:9" pos:end="1343:45"><expr pos:start="1343:9" pos:end="1343:44"><call pos:start="1343:9" pos:end="1343:44"><name pos:start="1343:9" pos:end="1343:30">generate_exception_end</name><argument_list pos:start="1343:31" pos:end="1343:44">(<argument pos:start="1343:32" pos:end="1343:34"><expr pos:start="1343:32" pos:end="1343:34"><name pos:start="1343:32" pos:end="1343:34">ctx</name></expr></argument>, <argument pos:start="1343:37" pos:end="1343:43"><expr pos:start="1343:37" pos:end="1343:43"><name pos:start="1343:37" pos:end="1343:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1345:9" pos:end="1345:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
