<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1359.c" pos:tabs="8"><function pos:start="1:1" pos:end="39:1"><type pos:start="1:1" pos:end="1:13"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <modifier pos:start="1:13" pos:end="1:13">*</modifier></type><name pos:start="1:14" pos:end="1:33">rcu_update_perf_test</name><parameter_list pos:start="1:34" pos:end="1:44">(<parameter pos:start="1:35" pos:end="1:43"><decl pos:start="1:35" pos:end="1:43"><type pos:start="1:35" pos:end="1:40"><name pos:start="1:35" pos:end="1:38">void</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">arg</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="39:1">{<block_content pos:start="5:5" pos:end="37:16">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:8">long</name> <name pos:start="5:10" pos:end="5:13">long</name></type> <name pos:start="5:15" pos:end="5:29">n_updates_local</name> <init pos:start="5:31" pos:end="5:33">= <expr pos:start="5:33" pos:end="5:33"><literal type="number" pos:start="5:33" pos:end="5:33">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:23">rcu_register_thread</name><argument_list pos:start="9:24" pos:end="9:25">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:50"><expr pos:start="13:5" pos:end="13:49"><operator pos:start="13:5" pos:end="13:5">*</operator><operator pos:start="13:6" pos:end="13:6">(</operator>struct <name pos:start="13:14" pos:end="13:28">rcu_reader_data</name> <operator pos:start="13:30" pos:end="13:30">*</operator><operator pos:start="13:31" pos:end="13:31">*</operator><operator pos:start="13:32" pos:end="13:32">)</operator><name pos:start="13:33" pos:end="13:35">arg</name> <operator pos:start="13:37" pos:end="13:37">=</operator> <operator pos:start="13:39" pos:end="13:39">&amp;</operator><name pos:start="13:40" pos:end="13:49">rcu_reader</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:33"><expr pos:start="15:5" pos:end="15:32"><call pos:start="15:5" pos:end="15:32"><name pos:start="15:5" pos:end="15:14">atomic_inc</name><argument_list pos:start="15:15" pos:end="15:32">(<argument pos:start="15:16" pos:end="15:31"><expr pos:start="15:16" pos:end="15:31"><operator pos:start="15:16" pos:end="15:16">&amp;</operator><name pos:start="15:17" pos:end="15:31">nthreadsrunning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="17:5" pos:end="21:5">while <condition pos:start="17:11" pos:end="17:33">(<expr pos:start="17:12" pos:end="17:32"><name pos:start="17:12" pos:end="17:17">goflag</name> <operator pos:start="17:19" pos:end="17:20">==</operator> <name pos:start="17:22" pos:end="17:32">GOFLAG_INIT</name></expr>)</condition> <block pos:start="17:35" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:23">

        <expr_stmt pos:start="19:9" pos:end="19:23"><expr pos:start="19:9" pos:end="19:22"><call pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:16">g_usleep</name><argument_list pos:start="19:17" pos:end="19:22">(<argument pos:start="19:18" pos:end="19:21"><expr pos:start="19:18" pos:end="19:21"><literal type="number" pos:start="19:18" pos:end="19:21">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="23:5" pos:end="29:5">while <condition pos:start="23:11" pos:end="23:32">(<expr pos:start="23:12" pos:end="23:31"><name pos:start="23:12" pos:end="23:17">goflag</name> <operator pos:start="23:19" pos:end="23:20">==</operator> <name pos:start="23:22" pos:end="23:31">GOFLAG_RUN</name></expr>)</condition> <block pos:start="23:34" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:26">

        <expr_stmt pos:start="25:9" pos:end="25:26"><expr pos:start="25:9" pos:end="25:25"><call pos:start="25:9" pos:end="25:25"><name pos:start="25:9" pos:end="25:23">synchronize_rcu</name><argument_list pos:start="25:24" pos:end="25:25">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:26"><expr pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:23">n_updates_local</name><operator pos:start="27:24" pos:end="27:25">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><call pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:14">atomic_add</name><argument_list pos:start="31:15" pos:end="31:43">(<argument pos:start="31:16" pos:end="31:25"><expr pos:start="31:16" pos:end="31:25"><operator pos:start="31:16" pos:end="31:16">&amp;</operator><name pos:start="31:17" pos:end="31:25">n_updates</name></expr></argument>, <argument pos:start="31:28" pos:end="31:42"><expr pos:start="31:28" pos:end="31:42"><name pos:start="31:28" pos:end="31:42">n_updates_local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><call pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:25">rcu_unregister_thread</name><argument_list pos:start="35:26" pos:end="35:27">()</argument_list></call></expr>;</expr_stmt>

    <return pos:start="37:5" pos:end="37:16">return <expr pos:start="37:12" pos:end="37:15"><name pos:start="37:12" pos:end="37:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
