<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15836.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">pxa2xx_i2s_write</name><parameter_list pos:start="1:29" pos:end="3:59">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:54"><decl pos:start="1:44" pos:end="1:54"><type pos:start="1:44" pos:end="1:54"><name pos:start="1:44" pos:end="1:49">hwaddr</name></type> <name pos:start="1:51" pos:end="1:54">addr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:43"><decl pos:start="3:30" pos:end="3:43"><type pos:start="3:30" pos:end="3:43"><name pos:start="3:30" pos:end="3:37">uint64_t</name></type> <name pos:start="3:39" pos:end="3:43">value</name></decl></parameter>, <parameter pos:start="3:46" pos:end="3:58"><decl pos:start="3:46" pos:end="3:58"><type pos:start="3:46" pos:end="3:58"><name pos:start="3:46" pos:end="3:53">unsigned</name></type> <name pos:start="3:55" pos:end="3:58">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:5">

    <decl_stmt pos:start="7:5" pos:end="7:50"><decl pos:start="7:5" pos:end="7:49"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">PXA2xxI2SState</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:49">= <expr pos:start="7:25" pos:end="7:49"><operator pos:start="7:25" pos:end="7:25">(</operator><name pos:start="7:26" pos:end="7:39">PXA2xxI2SState</name> <operator pos:start="7:41" pos:end="7:41">*</operator><operator pos:start="7:42" pos:end="7:42">)</operator> <name pos:start="7:44" pos:end="7:49">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">uint32_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:20">sample</name></decl>;</decl_stmt>



    <switch pos:start="13:5" pos:end="105:5">switch <condition pos:start="13:12" pos:end="13:17">(<expr pos:start="13:13" pos:end="13:16"><name pos:start="13:13" pos:end="13:16">addr</name></expr>)</condition> <block pos:start="13:19" pos:end="105:5">{<block_content pos:start="15:5" pos:end="103:69">

    <case pos:start="15:5" pos:end="15:15">case <expr pos:start="15:10" pos:end="15:14"><name pos:start="15:10" pos:end="15:14">SACR0</name></expr>:</case>

        <if_stmt pos:start="17:9" pos:end="19:32"><if pos:start="17:9" pos:end="19:32">if <condition pos:start="17:12" pos:end="17:29">(<expr pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:17">value</name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <operator pos:start="17:21" pos:end="17:21">(</operator><literal type="number" pos:start="17:22" pos:end="17:22">1</literal> <operator pos:start="17:24" pos:end="17:25">&lt;&lt;</operator> <literal type="number" pos:start="17:27" pos:end="17:27">3</literal><operator pos:start="17:28" pos:end="17:28">)</operator></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:32"><block_content pos:start="19:13" pos:end="19:32">				<comment type="block" pos:start="17:57" pos:end="17:65">/* RST */</comment>

            <expr_stmt pos:start="19:13" pos:end="19:32"><expr pos:start="19:13" pos:end="19:31"><call pos:start="19:13" pos:end="19:31"><name pos:start="19:13" pos:end="19:28">pxa2xx_i2s_reset</name><argument_list pos:start="19:29" pos:end="19:31">(<argument pos:start="19:30" pos:end="19:30"><expr pos:start="19:30" pos:end="19:30"><name pos:start="19:30" pos:end="19:30">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">control</name><index pos:start="21:19" pos:end="21:21">[<expr pos:start="21:20" pos:end="21:20"><literal type="number" pos:start="21:20" pos:end="21:20">0</literal></expr>]</index></name> <operator pos:start="21:23" pos:end="21:23">=</operator> <name pos:start="21:25" pos:end="21:29">value</name> <operator pos:start="21:31" pos:end="21:31">&amp;</operator> <literal type="number" pos:start="21:33" pos:end="21:38">0xff3d</literal></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="31:9"><if pos:start="23:9" pos:end="31:9">if <condition pos:start="23:12" pos:end="23:51">(<expr pos:start="23:13" pos:end="23:50"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:22"><name pos:start="23:14" pos:end="23:14">s</name><operator pos:start="23:15" pos:end="23:16">-&gt;</operator><name pos:start="23:17" pos:end="23:22">enable</name></name> <operator pos:start="23:24" pos:end="23:25">&amp;&amp;</operator> <operator pos:start="23:27" pos:end="23:27">(</operator><name pos:start="23:28" pos:end="23:32">value</name> <operator pos:start="23:34" pos:end="23:34">&amp;</operator> <literal type="number" pos:start="23:36" pos:end="23:36">1</literal><operator pos:start="23:37" pos:end="23:37">)</operator> <operator pos:start="23:39" pos:end="23:40">&amp;&amp;</operator> <name pos:start="23:42" pos:end="23:50"><name pos:start="23:42" pos:end="23:42">s</name><operator pos:start="23:43" pos:end="23:44">-&gt;</operator><name pos:start="23:45" pos:end="23:50">tx_len</name></name></expr>)</condition> <block pos:start="23:53" pos:end="31:9">{<block_content pos:start="25:13" pos:end="29:35">	<comment type="block" pos:start="23:57" pos:end="23:65">/* ENB */</comment>

            <for pos:start="25:13" pos:end="27:49">for <control pos:start="25:17" pos:end="25:78">(<init pos:start="25:18" pos:end="25:34"><expr pos:start="25:18" pos:end="25:33"><name pos:start="25:18" pos:end="25:23">sample</name> <operator pos:start="25:25" pos:end="25:25">=</operator> <name pos:start="25:27" pos:end="25:33"><name pos:start="25:27" pos:end="25:27">s</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:33">fifo</name></name></expr>;</init> <condition pos:start="25:36" pos:end="25:51"><expr pos:start="25:36" pos:end="25:50"><name pos:start="25:36" pos:end="25:46"><name pos:start="25:36" pos:end="25:36">s</name><operator pos:start="25:37" pos:end="25:38">-&gt;</operator><name pos:start="25:39" pos:end="25:46">fifo_len</name></name> <operator pos:start="25:48" pos:end="25:48">&gt;</operator> <literal type="number" pos:start="25:50" pos:end="25:50">0</literal></expr>;</condition> <incr pos:start="25:53" pos:end="25:77"><expr pos:start="25:53" pos:end="25:66"><name pos:start="25:53" pos:end="25:63"><name pos:start="25:53" pos:end="25:53">s</name><operator pos:start="25:54" pos:end="25:55">-&gt;</operator><name pos:start="25:56" pos:end="25:63">fifo_len</name></name> <operator pos:start="25:65" pos:end="25:66">--</operator></expr><operator pos:start="25:67" pos:end="25:67">,</operator> <expr pos:start="25:69" pos:end="25:77"><name pos:start="25:69" pos:end="25:74">sample</name> <operator pos:start="25:76" pos:end="25:77">++</operator></expr></incr>)</control><block type="pseudo" pos:start="27:17" pos:end="27:49"><block_content pos:start="27:17" pos:end="27:49">

                <expr_stmt pos:start="27:17" pos:end="27:49"><expr pos:start="27:17" pos:end="27:48"><call pos:start="27:17" pos:end="27:48"><name pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:17">s</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:28">codec_out</name></name><argument_list pos:start="27:29" pos:end="27:48">(<argument pos:start="27:30" pos:end="27:38"><expr pos:start="27:30" pos:end="27:38"><name pos:start="27:30" pos:end="27:38"><name pos:start="27:30" pos:end="27:30">s</name><operator pos:start="27:31" pos:end="27:32">-&gt;</operator><name pos:start="27:33" pos:end="27:38">opaque</name></name></expr></argument>, <argument pos:start="27:41" pos:end="27:47"><expr pos:start="27:41" pos:end="27:47"><operator pos:start="27:41" pos:end="27:41">*</operator><name pos:start="27:42" pos:end="27:47">sample</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="29:13" pos:end="29:35"><expr pos:start="29:13" pos:end="29:34"><name pos:start="29:13" pos:end="29:21"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:21">status</name></name> <operator pos:start="29:23" pos:end="29:24">&amp;=</operator> <operator pos:start="29:26" pos:end="29:26">~</operator><operator pos:start="29:27" pos:end="29:27">(</operator><literal type="number" pos:start="29:28" pos:end="29:28">1</literal> <operator pos:start="29:30" pos:end="29:31">&lt;&lt;</operator> <literal type="number" pos:start="29:33" pos:end="29:33">7</literal><operator pos:start="29:34" pos:end="29:34">)</operator></expr>;</expr_stmt>			<comment type="block" pos:start="29:57" pos:end="29:68">/* I2SOFF */</comment>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="33:9" pos:end="35:74"><if pos:start="33:9" pos:end="35:74">if <condition pos:start="33:12" pos:end="33:29">(<expr pos:start="33:13" pos:end="33:28"><name pos:start="33:13" pos:end="33:17">value</name> <operator pos:start="33:19" pos:end="33:19">&amp;</operator> <operator pos:start="33:21" pos:end="33:21">(</operator><literal type="number" pos:start="33:22" pos:end="33:22">1</literal> <operator pos:start="33:24" pos:end="33:25">&lt;&lt;</operator> <literal type="number" pos:start="33:27" pos:end="33:27">4</literal><operator pos:start="33:28" pos:end="33:28">)</operator></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:74"><block_content pos:start="35:13" pos:end="35:74">				<comment type="block" pos:start="33:57" pos:end="33:66">/* EFWR */</comment>

            <expr_stmt pos:start="35:13" pos:end="35:74"><expr pos:start="35:13" pos:end="35:73"><call pos:start="35:13" pos:end="35:73"><name pos:start="35:13" pos:end="35:18">printf</name><argument_list pos:start="35:19" pos:end="35:73">(<argument pos:start="35:20" pos:end="35:58"><expr pos:start="35:20" pos:end="35:58"><literal type="string" pos:start="35:20" pos:end="35:58">"%s: Attempt to use special function\n"</literal></expr></argument>, <argument pos:start="35:61" pos:end="35:72"><expr pos:start="35:61" pos:end="35:72"><name pos:start="35:61" pos:end="35:72">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:37"><expr pos:start="37:9" pos:end="37:36"><name pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:17">enable</name></name> <operator pos:start="37:19" pos:end="37:19">=</operator> <operator pos:start="37:21" pos:end="37:21">(</operator><name pos:start="37:22" pos:end="37:26">value</name> <operator pos:start="37:28" pos:end="37:28">&amp;</operator> <literal type="number" pos:start="37:30" pos:end="37:30">9</literal><operator pos:start="37:31" pos:end="37:31">)</operator> <operator pos:start="37:33" pos:end="37:34">==</operator> <literal type="number" pos:start="37:36" pos:end="37:36">1</literal></expr>;</expr_stmt>			<comment type="block" pos:start="37:57" pos:end="37:72">/* ENB &amp;&amp; !RST*/</comment>

        <expr_stmt pos:start="39:9" pos:end="39:29"><expr pos:start="39:9" pos:end="39:28"><call pos:start="39:9" pos:end="39:28"><name pos:start="39:9" pos:end="39:25">pxa2xx_i2s_update</name><argument_list pos:start="39:26" pos:end="39:28">(<argument pos:start="39:27" pos:end="39:27"><expr pos:start="39:27" pos:end="39:27"><name pos:start="39:27" pos:end="39:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:15">case <expr pos:start="43:10" pos:end="43:14"><name pos:start="43:10" pos:end="43:14">SACR1</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:39"><expr pos:start="45:9" pos:end="45:38"><name pos:start="45:9" pos:end="45:21"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:18">control</name><index pos:start="45:19" pos:end="45:21">[<expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">1</literal></expr>]</index></name> <operator pos:start="45:23" pos:end="45:23">=</operator> <name pos:start="45:25" pos:end="45:29">value</name> <operator pos:start="45:31" pos:end="45:31">&amp;</operator> <literal type="number" pos:start="45:33" pos:end="45:38">0x0039</literal></expr>;</expr_stmt>

        <if_stmt pos:start="47:9" pos:end="49:75"><if pos:start="47:9" pos:end="49:75">if <condition pos:start="47:12" pos:end="47:29">(<expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:17">value</name> <operator pos:start="47:19" pos:end="47:19">&amp;</operator> <operator pos:start="47:21" pos:end="47:21">(</operator><literal type="number" pos:start="47:22" pos:end="47:22">1</literal> <operator pos:start="47:24" pos:end="47:25">&lt;&lt;</operator> <literal type="number" pos:start="47:27" pos:end="47:27">5</literal><operator pos:start="47:28" pos:end="47:28">)</operator></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:75"><block_content pos:start="49:13" pos:end="49:75">				<comment type="block" pos:start="47:57" pos:end="47:67">/* ENLBF */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:75"><expr pos:start="49:13" pos:end="49:74"><call pos:start="49:13" pos:end="49:74"><name pos:start="49:13" pos:end="49:18">printf</name><argument_list pos:start="49:19" pos:end="49:74">(<argument pos:start="49:20" pos:end="49:59"><expr pos:start="49:20" pos:end="49:59"><literal type="string" pos:start="49:20" pos:end="49:59">"%s: Attempt to use loopback function\n"</literal></expr></argument>, <argument pos:start="49:62" pos:end="49:73"><expr pos:start="49:62" pos:end="49:73"><name pos:start="49:62" pos:end="49:73">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="53:28"><if pos:start="51:9" pos:end="53:28">if <condition pos:start="51:12" pos:end="51:29">(<expr pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:17">value</name> <operator pos:start="51:19" pos:end="51:19">&amp;</operator> <operator pos:start="51:21" pos:end="51:21">(</operator><literal type="number" pos:start="51:22" pos:end="51:22">1</literal> <operator pos:start="51:24" pos:end="51:25">&lt;&lt;</operator> <literal type="number" pos:start="51:27" pos:end="51:27">4</literal><operator pos:start="51:28" pos:end="51:28">)</operator></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:28"><block_content pos:start="53:13" pos:end="53:28">				<comment type="block" pos:start="51:57" pos:end="51:66">/* DPRL */</comment>

            <expr_stmt pos:start="53:13" pos:end="53:28"><expr pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:23">fifo_len</name></name> <operator pos:start="53:25" pos:end="53:25">=</operator> <literal type="number" pos:start="53:27" pos:end="53:27">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><call pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:25">pxa2xx_i2s_update</name><argument_list pos:start="55:26" pos:end="55:28">(<argument pos:start="55:27" pos:end="55:27"><expr pos:start="55:27" pos:end="55:27"><name pos:start="55:27" pos:end="55:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:15">case <expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:14">SAIMR</name></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:15">mask</name></name> <operator pos:start="61:17" pos:end="61:17">=</operator> <name pos:start="61:19" pos:end="61:23">value</name> <operator pos:start="61:25" pos:end="61:25">&amp;</operator> <literal type="number" pos:start="61:27" pos:end="61:32">0x0078</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:29"><expr pos:start="63:9" pos:end="63:28"><call pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:25">pxa2xx_i2s_update</name><argument_list pos:start="63:26" pos:end="63:28">(<argument pos:start="63:27" pos:end="63:27"><expr pos:start="63:27" pos:end="63:27"><name pos:start="63:27" pos:end="63:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:15">case <expr pos:start="67:10" pos:end="67:14"><name pos:start="67:10" pos:end="67:14">SAICR</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:41"><expr pos:start="69:9" pos:end="69:40"><name pos:start="69:9" pos:end="69:17"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:17">status</name></name> <operator pos:start="69:19" pos:end="69:20">&amp;=</operator> <operator pos:start="69:22" pos:end="69:22">~</operator><operator pos:start="69:23" pos:end="69:23">(</operator><name pos:start="69:24" pos:end="69:28">value</name> <operator pos:start="69:30" pos:end="69:30">&amp;</operator> <operator pos:start="69:32" pos:end="69:32">(</operator><literal type="number" pos:start="69:33" pos:end="69:33">3</literal> <operator pos:start="69:35" pos:end="69:36">&lt;&lt;</operator> <literal type="number" pos:start="69:38" pos:end="69:38">5</literal><operator pos:start="69:39" pos:end="69:39">)</operator><operator pos:start="69:40" pos:end="69:40">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><call pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:25">pxa2xx_i2s_update</name><argument_list pos:start="71:26" pos:end="71:28">(<argument pos:start="71:27" pos:end="71:27"><expr pos:start="71:27" pos:end="71:27"><name pos:start="71:27" pos:end="71:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:15">case <expr pos:start="75:10" pos:end="75:14"><name pos:start="75:10" pos:end="75:14">SADIV</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:32"><expr pos:start="77:9" pos:end="77:31"><name pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:14">clk</name></name> <operator pos:start="77:16" pos:end="77:16">=</operator> <name pos:start="77:18" pos:end="77:22">value</name> <operator pos:start="77:24" pos:end="77:24">&amp;</operator> <literal type="number" pos:start="77:26" pos:end="77:31">0x007f</literal></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <case pos:start="81:5" pos:end="81:14">case <expr pos:start="81:10" pos:end="81:13"><name pos:start="81:10" pos:end="81:13">SADR</name></expr>:</case>

        <if_stmt pos:start="83:9" pos:end="97:9"><if pos:start="83:9" pos:end="91:9">if <condition pos:start="83:12" pos:end="83:35">(<expr pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:21"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:21">tx_len</name></name> <operator pos:start="83:23" pos:end="83:24">&amp;&amp;</operator> <name pos:start="83:26" pos:end="83:34"><name pos:start="83:26" pos:end="83:26">s</name><operator pos:start="83:27" pos:end="83:28">-&gt;</operator><name pos:start="83:29" pos:end="83:34">enable</name></name></expr>)</condition> <block pos:start="83:37" pos:end="91:9">{<block_content pos:start="85:13" pos:end="89:43">

            <expr_stmt pos:start="85:13" pos:end="85:25"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:21"><name pos:start="85:13" pos:end="85:13">s</name><operator pos:start="85:14" pos:end="85:15">-&gt;</operator><name pos:start="85:16" pos:end="85:21">tx_len</name></name> <operator pos:start="85:23" pos:end="85:24">--</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:33"><expr pos:start="87:13" pos:end="87:32"><call pos:start="87:13" pos:end="87:32"><name pos:start="87:13" pos:end="87:29">pxa2xx_i2s_update</name><argument_list pos:start="87:30" pos:end="87:32">(<argument pos:start="87:31" pos:end="87:31"><expr pos:start="87:31" pos:end="87:31"><name pos:start="87:31" pos:end="87:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:43"><expr pos:start="89:13" pos:end="89:42"><call pos:start="89:13" pos:end="89:42"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:24">codec_out</name></name><argument_list pos:start="89:25" pos:end="89:42">(<argument pos:start="89:26" pos:end="89:34"><expr pos:start="89:26" pos:end="89:34"><name pos:start="89:26" pos:end="89:34"><name pos:start="89:26" pos:end="89:26">s</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:34">opaque</name></name></expr></argument>, <argument pos:start="89:37" pos:end="89:41"><expr pos:start="89:37" pos:end="89:41"><name pos:start="89:37" pos:end="89:41">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="91:11" pos:end="97:9">else if <condition pos:start="91:19" pos:end="91:36">(<expr pos:start="91:20" pos:end="91:35"><name pos:start="91:20" pos:end="91:30"><name pos:start="91:20" pos:end="91:20">s</name><operator pos:start="91:21" pos:end="91:22">-&gt;</operator><name pos:start="91:23" pos:end="91:30">fifo_len</name></name> <operator pos:start="91:32" pos:end="91:32">&lt;</operator> <literal type="number" pos:start="91:34" pos:end="91:35">16</literal></expr>)</condition> <block pos:start="91:38" pos:end="97:9">{<block_content pos:start="93:13" pos:end="95:33">

            <expr_stmt pos:start="93:13" pos:end="93:44"><expr pos:start="93:13" pos:end="93:43"><name pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:13">s</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:19">fifo</name><index pos:start="93:20" pos:end="93:35">[<expr pos:start="93:21" pos:end="93:34"><name pos:start="93:21" pos:end="93:31"><name pos:start="93:21" pos:end="93:21">s</name><operator pos:start="93:22" pos:end="93:23">-&gt;</operator><name pos:start="93:24" pos:end="93:31">fifo_len</name></name> <operator pos:start="93:33" pos:end="93:34">++</operator></expr>]</index></name> <operator pos:start="93:37" pos:end="93:37">=</operator> <name pos:start="93:39" pos:end="93:43">value</name></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:33"><expr pos:start="95:13" pos:end="95:32"><call pos:start="95:13" pos:end="95:32"><name pos:start="95:13" pos:end="95:29">pxa2xx_i2s_update</name><argument_list pos:start="95:30" pos:end="95:32">(<argument pos:start="95:31" pos:end="95:31"><expr pos:start="95:31" pos:end="95:31"><name pos:start="95:31" pos:end="95:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="99:9" pos:end="99:14">break;</break>

    <default pos:start="101:5" pos:end="101:12">default:</default>

        <expr_stmt pos:start="103:9" pos:end="103:69"><expr pos:start="103:9" pos:end="103:68"><call pos:start="103:9" pos:end="103:68"><name pos:start="103:9" pos:end="103:14">printf</name><argument_list pos:start="103:15" pos:end="103:68">(<argument pos:start="103:16" pos:end="103:47"><expr pos:start="103:16" pos:end="103:47"><literal type="string" pos:start="103:16" pos:end="103:34">"%s: Bad register "</literal> <name pos:start="103:36" pos:end="103:42">REG_FMT</name> <literal type="string" pos:start="103:44" pos:end="103:47">"\n"</literal></expr></argument>, <argument pos:start="103:50" pos:end="103:61"><expr pos:start="103:50" pos:end="103:61"><name pos:start="103:50" pos:end="103:61">__FUNCTION__</name></expr></argument>, <argument pos:start="103:64" pos:end="103:67"><expr pos:start="103:64" pos:end="103:67"><name pos:start="103:64" pos:end="103:67">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
