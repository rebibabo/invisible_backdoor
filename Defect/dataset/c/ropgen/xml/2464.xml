<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2464.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_format80</name><parameter_list pos:start="1:27" pos:end="3:55">(<parameter pos:start="1:28" pos:end="1:40"><decl pos:start="1:28" pos:end="1:40"><type pos:start="1:28" pos:end="1:40"><name pos:start="1:28" pos:end="1:37">VqaContext</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">s</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:45">int</name></type> <name pos:start="1:47" pos:end="1:54">src_size</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:23"><decl pos:start="3:5" pos:end="3:23"><type pos:start="3:5" pos:end="3:23"><name pos:start="3:5" pos:end="3:12">unsigned</name> <name pos:start="3:14" pos:end="3:17">char</name> <modifier pos:start="3:19" pos:end="3:19">*</modifier></type><name pos:start="3:20" pos:end="3:23">dest</name></decl></parameter>, <parameter pos:start="3:26" pos:end="3:38"><decl pos:start="3:26" pos:end="3:38"><type pos:start="3:26" pos:end="3:38"><name pos:start="3:26" pos:end="3:28">int</name></type> <name pos:start="3:30" pos:end="3:38">dest_size</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name></type> <name pos:start="3:45" pos:end="3:54">check_size</name></decl></parameter>)</parameter_list> <block pos:start="3:57" pos:end="173:1">{<block_content pos:start="7:5" pos:end="171:13">



    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">dest_index</name> <init pos:start="7:20" pos:end="7:22">= <expr pos:start="7:22" pos:end="7:22"><literal type="number" pos:start="7:22" pos:end="7:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:29"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">count</name></decl>, <decl pos:start="9:16" pos:end="9:21"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:21">opcode</name></decl>, <decl pos:start="9:24" pos:end="9:28"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:24" pos:end="9:28">start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:15">src_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:17">char</name></type> <name pos:start="13:19" pos:end="13:23">color</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:37"><expr pos:start="19:5" pos:end="19:36"><name pos:start="19:5" pos:end="19:9">start</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <call pos:start="19:13" pos:end="19:36"><name pos:start="19:13" pos:end="19:28">bytestream2_tell</name><argument_list pos:start="19:29" pos:end="19:36">(<argument pos:start="19:30" pos:end="19:35"><expr pos:start="19:30" pos:end="19:35"><operator pos:start="19:30" pos:end="19:30">&amp;</operator><name pos:start="19:31" pos:end="19:35"><name pos:start="19:31" pos:end="19:31">s</name><operator pos:start="19:32" pos:end="19:33">-&gt;</operator><name pos:start="19:34" pos:end="19:35">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="21:5" pos:end="149:5">while <condition pos:start="21:11" pos:end="21:55">(<expr pos:start="21:12" pos:end="21:54"><call pos:start="21:12" pos:end="21:35"><name pos:start="21:12" pos:end="21:27">bytestream2_tell</name><argument_list pos:start="21:28" pos:end="21:35">(<argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><operator pos:start="21:29" pos:end="21:29">&amp;</operator><name pos:start="21:30" pos:end="21:34"><name pos:start="21:30" pos:end="21:30">s</name><operator pos:start="21:31" pos:end="21:32">-&gt;</operator><name pos:start="21:33" pos:end="21:34">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="21:37" pos:end="21:37">-</operator> <name pos:start="21:39" pos:end="21:43">start</name> <operator pos:start="21:45" pos:end="21:45">&lt;</operator> <name pos:start="21:47" pos:end="21:54">src_size</name></expr>)</condition> <block pos:start="21:57" pos:end="149:5">{<block_content pos:start="23:9" pos:end="147:9">

        <expr_stmt pos:start="23:9" pos:end="23:46"><expr pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:14">opcode</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <call pos:start="23:18" pos:end="23:45"><name pos:start="23:18" pos:end="23:37">bytestream2_get_byte</name><argument_list pos:start="23:38" pos:end="23:45">(<argument pos:start="23:39" pos:end="23:44"><expr pos:start="23:39" pos:end="23:44"><operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:44"><name pos:start="23:40" pos:end="23:40">s</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="25:9" pos:end="25:51"><expr pos:start="25:9" pos:end="25:50"><call pos:start="25:9" pos:end="25:50"><name pos:start="25:9" pos:end="25:15">av_dlog</name><argument_list pos:start="25:16" pos:end="25:50">(<argument pos:start="25:17" pos:end="25:24"><expr pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:24"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:24">avctx</name></name></expr></argument>, <argument pos:start="25:27" pos:end="25:41"><expr pos:start="25:27" pos:end="25:41"><literal type="string" pos:start="25:27" pos:end="25:41">"opcode %02X: "</literal></expr></argument>, <argument pos:start="25:44" pos:end="25:49"><expr pos:start="25:44" pos:end="25:49"><name pos:start="25:44" pos:end="25:49">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="29:9" pos:end="29:47">/* 0x80 means that frame is finished */</comment>

        <if_stmt pos:start="31:9" pos:end="33:21"><if pos:start="31:9" pos:end="33:21">if <condition pos:start="31:12" pos:end="31:27">(<expr pos:start="31:13" pos:end="31:26"><name pos:start="31:13" pos:end="31:18">opcode</name> <operator pos:start="31:20" pos:end="31:21">==</operator> <literal type="number" pos:start="31:23" pos:end="31:26">0x80</literal></expr>)</condition><block type="pseudo" pos:start="33:13" pos:end="33:21"><block_content pos:start="33:13" pos:end="33:21">

            <return pos:start="33:13" pos:end="33:21">return <expr pos:start="33:20" pos:end="33:20"><literal type="number" pos:start="33:20" pos:end="33:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="37:9" pos:end="45:9"><if pos:start="37:9" pos:end="45:9">if <condition pos:start="37:12" pos:end="37:36">(<expr pos:start="37:13" pos:end="37:35"><name pos:start="37:13" pos:end="37:22">dest_index</name> <operator pos:start="37:24" pos:end="37:25">&gt;=</operator> <name pos:start="37:27" pos:end="37:35">dest_size</name></expr>)</condition> <block pos:start="37:38" pos:end="45:9">{<block_content pos:start="39:13" pos:end="43:39">

            <expr_stmt pos:start="39:13" pos:end="41:39"><expr pos:start="39:13" pos:end="41:38"><call pos:start="39:13" pos:end="41:38"><name pos:start="39:13" pos:end="39:18">av_log</name><argument_list pos:start="39:19" pos:end="41:38">(<argument pos:start="39:20" pos:end="39:27"><expr pos:start="39:20" pos:end="39:27"><name pos:start="39:20" pos:end="39:27"><name pos:start="39:20" pos:end="39:20">s</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:27">avctx</name></name></expr></argument>, <argument pos:start="39:30" pos:end="39:41"><expr pos:start="39:30" pos:end="39:41"><name pos:start="39:30" pos:end="39:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:44" pos:end="39:111"><expr pos:start="39:44" pos:end="39:111"><literal type="string" pos:start="39:44" pos:end="39:111">"decode_format80 problem: dest_index (%d) exceeded dest_size (%d)\n"</literal></expr></argument>,

                <argument pos:start="41:17" pos:end="41:26"><expr pos:start="41:17" pos:end="41:26"><name pos:start="41:17" pos:end="41:26">dest_index</name></expr></argument>, <argument pos:start="41:29" pos:end="41:37"><expr pos:start="41:29" pos:end="41:37"><name pos:start="41:29" pos:end="41:37">dest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="43:13" pos:end="43:39">return <expr pos:start="43:20" pos:end="43:38"><name pos:start="43:20" pos:end="43:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="49:9" pos:end="147:9"><if pos:start="49:9" pos:end="71:9">if <condition pos:start="49:12" pos:end="49:27">(<expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:18">opcode</name> <operator pos:start="49:20" pos:end="49:21">==</operator> <literal type="number" pos:start="49:23" pos:end="49:26">0xFF</literal></expr>)</condition> <block pos:start="49:29" pos:end="71:9">{<block_content pos:start="53:13" pos:end="67:32">



            <expr_stmt pos:start="53:13" pos:end="53:51"><expr pos:start="53:13" pos:end="53:50"><name pos:start="53:13" pos:end="53:17">count</name>   <operator pos:start="53:21" pos:end="53:21">=</operator> <call pos:start="53:23" pos:end="53:50"><name pos:start="53:23" pos:end="53:42">bytestream2_get_le16</name><argument_list pos:start="53:43" pos:end="53:50">(<argument pos:start="53:44" pos:end="53:49"><expr pos:start="53:44" pos:end="53:49"><operator pos:start="53:44" pos:end="53:44">&amp;</operator><name pos:start="53:45" pos:end="53:49"><name pos:start="53:45" pos:end="53:45">s</name><operator pos:start="53:46" pos:end="53:47">-&gt;</operator><name pos:start="53:48" pos:end="53:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:51"><expr pos:start="55:13" pos:end="55:50"><name pos:start="55:13" pos:end="55:19">src_pos</name> <operator pos:start="55:21" pos:end="55:21">=</operator> <call pos:start="55:23" pos:end="55:50"><name pos:start="55:23" pos:end="55:42">bytestream2_get_le16</name><argument_list pos:start="55:43" pos:end="55:50">(<argument pos:start="55:44" pos:end="55:49"><expr pos:start="55:44" pos:end="55:49"><operator pos:start="55:44" pos:end="55:44">&amp;</operator><name pos:start="55:45" pos:end="55:49"><name pos:start="55:45" pos:end="55:45">s</name><operator pos:start="55:46" pos:end="55:47">-&gt;</operator><name pos:start="55:48" pos:end="55:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:90"><expr pos:start="57:13" pos:end="57:89"><call pos:start="57:13" pos:end="57:89"><name pos:start="57:13" pos:end="57:19">av_dlog</name><argument_list pos:start="57:20" pos:end="57:89">(<argument pos:start="57:21" pos:end="57:28"><expr pos:start="57:21" pos:end="57:28"><name pos:start="57:21" pos:end="57:28"><name pos:start="57:21" pos:end="57:21">s</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:28">avctx</name></name></expr></argument>, <argument pos:start="57:31" pos:end="57:72"><expr pos:start="57:31" pos:end="57:72"><literal type="string" pos:start="57:31" pos:end="57:72">"(1) copy %X bytes from absolute pos %X\n"</literal></expr></argument>, <argument pos:start="57:75" pos:end="57:79"><expr pos:start="57:75" pos:end="57:79"><name pos:start="57:75" pos:end="57:79">count</name></expr></argument>, <argument pos:start="57:82" pos:end="57:88"><expr pos:start="57:82" pos:end="57:88"><name pos:start="57:82" pos:end="57:88">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:26"><expr pos:start="59:13" pos:end="59:25"><call pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:23">CHECK_COUNT</name><argument_list pos:start="59:24" pos:end="59:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><call pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:22">CHECK_COPY</name><argument_list pos:start="61:23" pos:end="61:31">(<argument pos:start="61:24" pos:end="61:30"><expr pos:start="61:24" pos:end="61:30"><name pos:start="61:24" pos:end="61:30">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="63:13" pos:end="65:57">for <control pos:start="63:17" pos:end="63:39">(<init pos:start="63:18" pos:end="63:23"><expr pos:start="63:18" pos:end="63:22"><name pos:start="63:18" pos:end="63:18">i</name> <operator pos:start="63:20" pos:end="63:20">=</operator> <literal type="number" pos:start="63:22" pos:end="63:22">0</literal></expr>;</init> <condition pos:start="63:25" pos:end="63:34"><expr pos:start="63:25" pos:end="63:33"><name pos:start="63:25" pos:end="63:25">i</name> <operator pos:start="63:27" pos:end="63:27">&lt;</operator> <name pos:start="63:29" pos:end="63:33">count</name></expr>;</condition> <incr pos:start="63:36" pos:end="63:38"><expr pos:start="63:36" pos:end="63:38"><name pos:start="63:36" pos:end="63:36">i</name><operator pos:start="63:37" pos:end="63:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="65:17" pos:end="65:57"><block_content pos:start="65:17" pos:end="65:57">

                <expr_stmt pos:start="65:17" pos:end="65:57"><expr pos:start="65:17" pos:end="65:56"><name pos:start="65:17" pos:end="65:36"><name pos:start="65:17" pos:end="65:20">dest</name><index pos:start="65:21" pos:end="65:36">[<expr pos:start="65:22" pos:end="65:35"><name pos:start="65:22" pos:end="65:31">dest_index</name> <operator pos:start="65:33" pos:end="65:33">+</operator> <name pos:start="65:35" pos:end="65:35">i</name></expr>]</index></name> <operator pos:start="65:38" pos:end="65:38">=</operator> <name pos:start="65:40" pos:end="65:56"><name pos:start="65:40" pos:end="65:43">dest</name><index pos:start="65:44" pos:end="65:56">[<expr pos:start="65:45" pos:end="65:55"><name pos:start="65:45" pos:end="65:51">src_pos</name> <operator pos:start="65:53" pos:end="65:53">+</operator> <name pos:start="65:55" pos:end="65:55">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:22">dest_index</name> <operator pos:start="67:24" pos:end="67:25">+=</operator> <name pos:start="67:27" pos:end="67:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="71:11" pos:end="89:9">else if <condition pos:start="71:19" pos:end="71:34">(<expr pos:start="71:20" pos:end="71:33"><name pos:start="71:20" pos:end="71:25">opcode</name> <operator pos:start="71:27" pos:end="71:28">==</operator> <literal type="number" pos:start="71:30" pos:end="71:33">0xFE</literal></expr>)</condition> <block pos:start="71:36" pos:end="89:9">{<block_content pos:start="75:13" pos:end="85:32">



            <expr_stmt pos:start="75:13" pos:end="75:49"><expr pos:start="75:13" pos:end="75:48"><name pos:start="75:13" pos:end="75:17">count</name> <operator pos:start="75:19" pos:end="75:19">=</operator> <call pos:start="75:21" pos:end="75:48"><name pos:start="75:21" pos:end="75:40">bytestream2_get_le16</name><argument_list pos:start="75:41" pos:end="75:48">(<argument pos:start="75:42" pos:end="75:47"><expr pos:start="75:42" pos:end="75:47"><operator pos:start="75:42" pos:end="75:42">&amp;</operator><name pos:start="75:43" pos:end="75:47"><name pos:start="75:43" pos:end="75:43">s</name><operator pos:start="75:44" pos:end="75:45">-&gt;</operator><name pos:start="75:46" pos:end="75:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:49"><expr pos:start="77:13" pos:end="77:48"><name pos:start="77:13" pos:end="77:17">color</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <call pos:start="77:21" pos:end="77:48"><name pos:start="77:21" pos:end="77:40">bytestream2_get_byte</name><argument_list pos:start="77:41" pos:end="77:48">(<argument pos:start="77:42" pos:end="77:47"><expr pos:start="77:42" pos:end="77:47"><operator pos:start="77:42" pos:end="77:42">&amp;</operator><name pos:start="77:43" pos:end="77:47"><name pos:start="77:43" pos:end="77:43">s</name><operator pos:start="77:44" pos:end="77:45">-&gt;</operator><name pos:start="77:46" pos:end="77:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:74"><expr pos:start="79:13" pos:end="79:73"><call pos:start="79:13" pos:end="79:73"><name pos:start="79:13" pos:end="79:19">av_dlog</name><argument_list pos:start="79:20" pos:end="79:73">(<argument pos:start="79:21" pos:end="79:28"><expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:28">avctx</name></name></expr></argument>, <argument pos:start="79:31" pos:end="79:58"><expr pos:start="79:31" pos:end="79:58"><literal type="string" pos:start="79:31" pos:end="79:58">"(2) set %X bytes to %02X\n"</literal></expr></argument>, <argument pos:start="79:61" pos:end="79:65"><expr pos:start="79:61" pos:end="79:65"><name pos:start="79:61" pos:end="79:65">count</name></expr></argument>, <argument pos:start="79:68" pos:end="79:72"><expr pos:start="79:68" pos:end="79:72"><name pos:start="79:68" pos:end="79:72">color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="81:13" pos:end="81:26"><expr pos:start="81:13" pos:end="81:25"><call pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:23">CHECK_COUNT</name><argument_list pos:start="81:24" pos:end="81:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:52"><expr pos:start="83:13" pos:end="83:51"><call pos:start="83:13" pos:end="83:51"><name pos:start="83:13" pos:end="83:18">memset</name><argument_list pos:start="83:19" pos:end="83:51">(<argument pos:start="83:20" pos:end="83:36"><expr pos:start="83:20" pos:end="83:36"><operator pos:start="83:20" pos:end="83:20">&amp;</operator><name pos:start="83:21" pos:end="83:36"><name pos:start="83:21" pos:end="83:24">dest</name><index pos:start="83:25" pos:end="83:36">[<expr pos:start="83:26" pos:end="83:35"><name pos:start="83:26" pos:end="83:35">dest_index</name></expr>]</index></name></expr></argument>, <argument pos:start="83:39" pos:end="83:43"><expr pos:start="83:39" pos:end="83:43"><name pos:start="83:39" pos:end="83:43">color</name></expr></argument>, <argument pos:start="83:46" pos:end="83:50"><expr pos:start="83:46" pos:end="83:50"><name pos:start="83:46" pos:end="83:50">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:32"><expr pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:22">dest_index</name> <operator pos:start="85:24" pos:end="85:25">+=</operator> <name pos:start="85:27" pos:end="85:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="111:9">else if <condition pos:start="89:19" pos:end="89:43">(<expr pos:start="89:20" pos:end="89:42"><operator pos:start="89:20" pos:end="89:20">(</operator><name pos:start="89:21" pos:end="89:26">opcode</name> <operator pos:start="89:28" pos:end="89:28">&amp;</operator> <literal type="number" pos:start="89:30" pos:end="89:33">0xC0</literal><operator pos:start="89:34" pos:end="89:34">)</operator> <operator pos:start="89:36" pos:end="89:37">==</operator> <literal type="number" pos:start="89:39" pos:end="89:42">0xC0</literal></expr>)</condition> <block pos:start="89:45" pos:end="111:9">{<block_content pos:start="93:13" pos:end="107:32">



            <expr_stmt pos:start="93:13" pos:end="93:40"><expr pos:start="93:13" pos:end="93:39"><name pos:start="93:13" pos:end="93:17">count</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <operator pos:start="93:21" pos:end="93:21">(</operator><name pos:start="93:22" pos:end="93:27">opcode</name> <operator pos:start="93:29" pos:end="93:29">&amp;</operator> <literal type="number" pos:start="93:31" pos:end="93:34">0x3F</literal><operator pos:start="93:35" pos:end="93:35">)</operator> <operator pos:start="93:37" pos:end="93:37">+</operator> <literal type="number" pos:start="93:39" pos:end="93:39">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:51"><expr pos:start="95:13" pos:end="95:50"><name pos:start="95:13" pos:end="95:19">src_pos</name> <operator pos:start="95:21" pos:end="95:21">=</operator> <call pos:start="95:23" pos:end="95:50"><name pos:start="95:23" pos:end="95:42">bytestream2_get_le16</name><argument_list pos:start="95:43" pos:end="95:50">(<argument pos:start="95:44" pos:end="95:49"><expr pos:start="95:44" pos:end="95:49"><operator pos:start="95:44" pos:end="95:44">&amp;</operator><name pos:start="95:45" pos:end="95:49"><name pos:start="95:45" pos:end="95:45">s</name><operator pos:start="95:46" pos:end="95:47">-&gt;</operator><name pos:start="95:48" pos:end="95:49">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:90"><expr pos:start="97:13" pos:end="97:89"><call pos:start="97:13" pos:end="97:89"><name pos:start="97:13" pos:end="97:19">av_dlog</name><argument_list pos:start="97:20" pos:end="97:89">(<argument pos:start="97:21" pos:end="97:28"><expr pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:21">s</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:28">avctx</name></name></expr></argument>, <argument pos:start="97:31" pos:end="97:72"><expr pos:start="97:31" pos:end="97:72"><literal type="string" pos:start="97:31" pos:end="97:72">"(3) copy %X bytes from absolute pos %X\n"</literal></expr></argument>, <argument pos:start="97:75" pos:end="97:79"><expr pos:start="97:75" pos:end="97:79"><name pos:start="97:75" pos:end="97:79">count</name></expr></argument>, <argument pos:start="97:82" pos:end="97:88"><expr pos:start="97:82" pos:end="97:88"><name pos:start="97:82" pos:end="97:88">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:26"><expr pos:start="99:13" pos:end="99:25"><call pos:start="99:13" pos:end="99:25"><name pos:start="99:13" pos:end="99:23">CHECK_COUNT</name><argument_list pos:start="99:24" pos:end="99:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><call pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:22">CHECK_COPY</name><argument_list pos:start="101:23" pos:end="101:31">(<argument pos:start="101:24" pos:end="101:30"><expr pos:start="101:24" pos:end="101:30"><name pos:start="101:24" pos:end="101:30">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="103:13" pos:end="105:57">for <control pos:start="103:17" pos:end="103:39">(<init pos:start="103:18" pos:end="103:23"><expr pos:start="103:18" pos:end="103:22"><name pos:start="103:18" pos:end="103:18">i</name> <operator pos:start="103:20" pos:end="103:20">=</operator> <literal type="number" pos:start="103:22" pos:end="103:22">0</literal></expr>;</init> <condition pos:start="103:25" pos:end="103:34"><expr pos:start="103:25" pos:end="103:33"><name pos:start="103:25" pos:end="103:25">i</name> <operator pos:start="103:27" pos:end="103:27">&lt;</operator> <name pos:start="103:29" pos:end="103:33">count</name></expr>;</condition> <incr pos:start="103:36" pos:end="103:38"><expr pos:start="103:36" pos:end="103:38"><name pos:start="103:36" pos:end="103:36">i</name><operator pos:start="103:37" pos:end="103:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="105:17" pos:end="105:57"><block_content pos:start="105:17" pos:end="105:57">

                <expr_stmt pos:start="105:17" pos:end="105:57"><expr pos:start="105:17" pos:end="105:56"><name pos:start="105:17" pos:end="105:36"><name pos:start="105:17" pos:end="105:20">dest</name><index pos:start="105:21" pos:end="105:36">[<expr pos:start="105:22" pos:end="105:35"><name pos:start="105:22" pos:end="105:31">dest_index</name> <operator pos:start="105:33" pos:end="105:33">+</operator> <name pos:start="105:35" pos:end="105:35">i</name></expr>]</index></name> <operator pos:start="105:38" pos:end="105:38">=</operator> <name pos:start="105:40" pos:end="105:56"><name pos:start="105:40" pos:end="105:43">dest</name><index pos:start="105:44" pos:end="105:56">[<expr pos:start="105:45" pos:end="105:55"><name pos:start="105:45" pos:end="105:51">src_pos</name> <operator pos:start="105:53" pos:end="105:53">+</operator> <name pos:start="105:55" pos:end="105:55">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="107:13" pos:end="107:32"><expr pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:22">dest_index</name> <operator pos:start="107:24" pos:end="107:25">+=</operator> <name pos:start="107:27" pos:end="107:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <if type="elseif" pos:start="111:11" pos:end="127:9">else if <condition pos:start="111:19" pos:end="111:33">(<expr pos:start="111:20" pos:end="111:32"><name pos:start="111:20" pos:end="111:25">opcode</name> <operator pos:start="111:27" pos:end="111:27">&gt;</operator> <literal type="number" pos:start="111:29" pos:end="111:32">0x80</literal></expr>)</condition> <block pos:start="111:35" pos:end="127:9">{<block_content pos:start="115:13" pos:end="123:32">



            <expr_stmt pos:start="115:13" pos:end="115:34"><expr pos:start="115:13" pos:end="115:33"><name pos:start="115:13" pos:end="115:17">count</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <name pos:start="115:21" pos:end="115:26">opcode</name> <operator pos:start="115:28" pos:end="115:28">&amp;</operator> <literal type="number" pos:start="115:30" pos:end="115:33">0x3F</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="117:80"><expr pos:start="117:13" pos:end="117:79"><call pos:start="117:13" pos:end="117:79"><name pos:start="117:13" pos:end="117:19">av_dlog</name><argument_list pos:start="117:20" pos:end="117:79">(<argument pos:start="117:21" pos:end="117:28"><expr pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:28"><name pos:start="117:21" pos:end="117:21">s</name><operator pos:start="117:22" pos:end="117:23">-&gt;</operator><name pos:start="117:24" pos:end="117:28">avctx</name></name></expr></argument>, <argument pos:start="117:31" pos:end="117:71"><expr pos:start="117:31" pos:end="117:71"><literal type="string" pos:start="117:31" pos:end="117:71">"(4) copy %X bytes from source to dest\n"</literal></expr></argument>, <argument pos:start="117:74" pos:end="117:78"><expr pos:start="117:74" pos:end="117:78"><name pos:start="117:74" pos:end="117:78">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:26"><expr pos:start="119:13" pos:end="119:25"><call pos:start="119:13" pos:end="119:25"><name pos:start="119:13" pos:end="119:23">CHECK_COUNT</name><argument_list pos:start="119:24" pos:end="119:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:69"><expr pos:start="121:13" pos:end="121:68"><call pos:start="121:13" pos:end="121:68"><name pos:start="121:13" pos:end="121:34">bytestream2_get_buffer</name><argument_list pos:start="121:35" pos:end="121:68">(<argument pos:start="121:36" pos:end="121:41"><expr pos:start="121:36" pos:end="121:41"><operator pos:start="121:36" pos:end="121:36">&amp;</operator><name pos:start="121:37" pos:end="121:41"><name pos:start="121:37" pos:end="121:37">s</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:41">gb</name></name></expr></argument>, <argument pos:start="121:44" pos:end="121:60"><expr pos:start="121:44" pos:end="121:60"><operator pos:start="121:44" pos:end="121:44">&amp;</operator><name pos:start="121:45" pos:end="121:60"><name pos:start="121:45" pos:end="121:48">dest</name><index pos:start="121:49" pos:end="121:60">[<expr pos:start="121:50" pos:end="121:59"><name pos:start="121:50" pos:end="121:59">dest_index</name></expr>]</index></name></expr></argument>, <argument pos:start="121:63" pos:end="121:67"><expr pos:start="121:63" pos:end="121:67"><name pos:start="121:63" pos:end="121:67">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:32"><expr pos:start="123:13" pos:end="123:31"><name pos:start="123:13" pos:end="123:22">dest_index</name> <operator pos:start="123:24" pos:end="123:25">+=</operator> <name pos:start="123:27" pos:end="123:31">count</name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="127:11" pos:end="147:9">else <block pos:start="127:16" pos:end="147:9">{<block_content pos:start="131:13" pos:end="145:32">



            <expr_stmt pos:start="131:13" pos:end="131:47"><expr pos:start="131:13" pos:end="131:46"><name pos:start="131:13" pos:end="131:17">count</name> <operator pos:start="131:19" pos:end="131:19">=</operator> <operator pos:start="131:21" pos:end="131:21">(</operator><operator pos:start="131:22" pos:end="131:22">(</operator><name pos:start="131:23" pos:end="131:28">opcode</name> <operator pos:start="131:30" pos:end="131:30">&amp;</operator> <literal type="number" pos:start="131:32" pos:end="131:35">0x70</literal><operator pos:start="131:36" pos:end="131:36">)</operator> <operator pos:start="131:38" pos:end="131:39">&gt;&gt;</operator> <literal type="number" pos:start="131:41" pos:end="131:41">4</literal><operator pos:start="131:42" pos:end="131:42">)</operator> <operator pos:start="131:44" pos:end="131:44">+</operator> <literal type="number" pos:start="131:46" pos:end="131:46">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:76"><expr pos:start="133:13" pos:end="133:75"><name pos:start="133:13" pos:end="133:19">src_pos</name> <operator pos:start="133:21" pos:end="133:21">=</operator> <call pos:start="133:23" pos:end="133:50"><name pos:start="133:23" pos:end="133:42">bytestream2_get_byte</name><argument_list pos:start="133:43" pos:end="133:50">(<argument pos:start="133:44" pos:end="133:49"><expr pos:start="133:44" pos:end="133:49"><operator pos:start="133:44" pos:end="133:44">&amp;</operator><name pos:start="133:45" pos:end="133:49"><name pos:start="133:45" pos:end="133:45">s</name><operator pos:start="133:46" pos:end="133:47">-&gt;</operator><name pos:start="133:48" pos:end="133:49">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="133:52" pos:end="133:52">|</operator> <operator pos:start="133:54" pos:end="133:54">(</operator><operator pos:start="133:55" pos:end="133:55">(</operator><name pos:start="133:56" pos:end="133:61">opcode</name> <operator pos:start="133:63" pos:end="133:63">&amp;</operator> <literal type="number" pos:start="133:65" pos:end="133:68">0x0F</literal><operator pos:start="133:69" pos:end="133:69">)</operator> <operator pos:start="133:71" pos:end="133:72">&lt;&lt;</operator> <literal type="number" pos:start="133:74" pos:end="133:74">8</literal><operator pos:start="133:75" pos:end="133:75">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:84"><expr pos:start="135:13" pos:end="135:83"><call pos:start="135:13" pos:end="135:83"><name pos:start="135:13" pos:end="135:19">av_dlog</name><argument_list pos:start="135:20" pos:end="135:83">(<argument pos:start="135:21" pos:end="135:28"><expr pos:start="135:21" pos:end="135:28"><name pos:start="135:21" pos:end="135:28"><name pos:start="135:21" pos:end="135:21">s</name><operator pos:start="135:22" pos:end="135:23">-&gt;</operator><name pos:start="135:24" pos:end="135:28">avctx</name></name></expr></argument>, <argument pos:start="135:31" pos:end="135:66"><expr pos:start="135:31" pos:end="135:66"><literal type="string" pos:start="135:31" pos:end="135:66">"(5) copy %X bytes from relpos %X\n"</literal></expr></argument>, <argument pos:start="135:69" pos:end="135:73"><expr pos:start="135:69" pos:end="135:73"><name pos:start="135:69" pos:end="135:73">count</name></expr></argument>, <argument pos:start="135:76" pos:end="135:82"><expr pos:start="135:76" pos:end="135:82"><name pos:start="135:76" pos:end="135:82">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:26"><expr pos:start="137:13" pos:end="137:25"><call pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:23">CHECK_COUNT</name><argument_list pos:start="137:24" pos:end="137:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:45"><expr pos:start="139:13" pos:end="139:44"><call pos:start="139:13" pos:end="139:44"><name pos:start="139:13" pos:end="139:22">CHECK_COPY</name><argument_list pos:start="139:23" pos:end="139:44">(<argument pos:start="139:24" pos:end="139:43"><expr pos:start="139:24" pos:end="139:43"><name pos:start="139:24" pos:end="139:33">dest_index</name> <operator pos:start="139:35" pos:end="139:35">-</operator> <name pos:start="139:37" pos:end="139:43">src_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="141:13" pos:end="143:70">for <control pos:start="141:17" pos:end="141:39">(<init pos:start="141:18" pos:end="141:23"><expr pos:start="141:18" pos:end="141:22"><name pos:start="141:18" pos:end="141:18">i</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <literal type="number" pos:start="141:22" pos:end="141:22">0</literal></expr>;</init> <condition pos:start="141:25" pos:end="141:34"><expr pos:start="141:25" pos:end="141:33"><name pos:start="141:25" pos:end="141:25">i</name> <operator pos:start="141:27" pos:end="141:27">&lt;</operator> <name pos:start="141:29" pos:end="141:33">count</name></expr>;</condition> <incr pos:start="141:36" pos:end="141:38"><expr pos:start="141:36" pos:end="141:38"><name pos:start="141:36" pos:end="141:36">i</name><operator pos:start="141:37" pos:end="141:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="143:17" pos:end="143:70"><block_content pos:start="143:17" pos:end="143:70">

                <expr_stmt pos:start="143:17" pos:end="143:70"><expr pos:start="143:17" pos:end="143:69"><name pos:start="143:17" pos:end="143:36"><name pos:start="143:17" pos:end="143:20">dest</name><index pos:start="143:21" pos:end="143:36">[<expr pos:start="143:22" pos:end="143:35"><name pos:start="143:22" pos:end="143:31">dest_index</name> <operator pos:start="143:33" pos:end="143:33">+</operator> <name pos:start="143:35" pos:end="143:35">i</name></expr>]</index></name> <operator pos:start="143:38" pos:end="143:38">=</operator> <name pos:start="143:40" pos:end="143:69"><name pos:start="143:40" pos:end="143:43">dest</name><index pos:start="143:44" pos:end="143:69">[<expr pos:start="143:45" pos:end="143:68"><name pos:start="143:45" pos:end="143:54">dest_index</name> <operator pos:start="143:56" pos:end="143:56">-</operator> <name pos:start="143:58" pos:end="143:64">src_pos</name> <operator pos:start="143:66" pos:end="143:66">+</operator> <name pos:start="143:68" pos:end="143:68">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="145:13" pos:end="145:32"><expr pos:start="145:13" pos:end="145:31"><name pos:start="145:13" pos:end="145:22">dest_index</name> <operator pos:start="145:24" pos:end="145:25">+=</operator> <name pos:start="145:27" pos:end="145:31">count</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="153:5" pos:end="159:44">/* validate that the entire destination buffer was filled; this is

     * important for decoding frame maps since each vector needs to have a

     * codebook entry; it is not important for compressed codebooks because

     * not every entry needs to be filled */</comment>

    <if_stmt pos:start="161:5" pos:end="167:39"><if pos:start="161:5" pos:end="167:39">if <condition pos:start="161:8" pos:end="161:19">(<expr pos:start="161:9" pos:end="161:18"><name pos:start="161:9" pos:end="161:18">check_size</name></expr>)</condition><block type="pseudo" pos:start="163:9" pos:end="167:39"><block_content pos:start="163:9" pos:end="167:39">

        <if_stmt pos:start="163:9" pos:end="167:39"><if pos:start="163:9" pos:end="167:39">if <condition pos:start="163:12" pos:end="163:35">(<expr pos:start="163:13" pos:end="163:34"><name pos:start="163:13" pos:end="163:22">dest_index</name> <operator pos:start="163:24" pos:end="163:24">&lt;</operator> <name pos:start="163:26" pos:end="163:34">dest_size</name></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="167:39"><block_content pos:start="165:13" pos:end="167:39">

            <expr_stmt pos:start="165:13" pos:end="167:39"><expr pos:start="165:13" pos:end="167:38"><call pos:start="165:13" pos:end="167:38"><name pos:start="165:13" pos:end="165:18">av_log</name><argument_list pos:start="165:19" pos:end="167:38">(<argument pos:start="165:20" pos:end="165:27"><expr pos:start="165:20" pos:end="165:27"><name pos:start="165:20" pos:end="165:27"><name pos:start="165:20" pos:end="165:20">s</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:27">avctx</name></name></expr></argument>, <argument pos:start="165:30" pos:end="165:41"><expr pos:start="165:30" pos:end="165:41"><name pos:start="165:30" pos:end="165:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:44" pos:end="165:125"><expr pos:start="165:44" pos:end="165:125"><literal type="string" pos:start="165:44" pos:end="165:125">"decode_format80 problem: decode finished with dest_index (%d) &lt; dest_size (%d)\n"</literal></expr></argument>,

                <argument pos:start="167:17" pos:end="167:26"><expr pos:start="167:17" pos:end="167:26"><name pos:start="167:17" pos:end="167:26">dest_index</name></expr></argument>, <argument pos:start="167:29" pos:end="167:37"><expr pos:start="167:29" pos:end="167:37"><name pos:start="167:29" pos:end="167:37">dest_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <return pos:start="171:5" pos:end="171:13">return <expr pos:start="171:12" pos:end="171:12"><literal type="number" pos:start="171:12" pos:end="171:12">0</literal></expr>;</return> <comment type="line" pos:start="171:15" pos:end="171:53">// let's display what we decoded anyway</comment>

</block_content>}</block></function>
</unit>
