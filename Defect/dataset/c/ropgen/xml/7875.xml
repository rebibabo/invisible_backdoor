<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7875.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:39"><name pos:start="1:1" pos:end="1:25">qio_channel_socket_accept</name><argument_list pos:start="1:26" pos:end="3:39">(<argument pos:start="1:27" pos:end="1:47">QIOChannelSocket *ioc</argument>,

                          <argument pos:start="3:27" pos:end="3:38">Error **errp</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="95:1">{<block_content pos:start="7:5" pos:end="93:16">

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">QIOChannelSocket</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:26">cioc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:67"><expr pos:start="11:5" pos:end="11:66"><name pos:start="11:5" pos:end="11:8">cioc</name> <operator pos:start="11:10" pos:end="11:10">=</operator> <call pos:start="11:12" pos:end="11:66"><name pos:start="11:12" pos:end="11:29">QIO_CHANNEL_SOCKET</name><argument_list pos:start="11:30" pos:end="11:66">(<argument pos:start="11:31" pos:end="11:65"><expr pos:start="11:31" pos:end="11:65"><call pos:start="11:31" pos:end="11:65"><name pos:start="11:31" pos:end="11:40">object_new</name><argument_list pos:start="11:41" pos:end="11:65">(<argument pos:start="11:42" pos:end="11:64"><expr pos:start="11:42" pos:end="11:64"><name pos:start="11:42" pos:end="11:64">TYPE_QIO_CHANNEL_SOCKET</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:18"><expr pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:8">cioc</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:12">fd</name></name> <operator pos:start="13:14" pos:end="13:14">=</operator> <operator pos:start="13:16" pos:end="13:16">-</operator><literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:50"><expr pos:start="15:5" pos:end="15:49"><name pos:start="15:5" pos:end="15:23"><name pos:start="15:5" pos:end="15:8">cioc</name><operator pos:start="15:9" pos:end="15:10">-&gt;</operator><name pos:start="15:11" pos:end="15:23">remoteAddrLen</name></name> <operator pos:start="15:25" pos:end="15:25">=</operator> <sizeof pos:start="15:27" pos:end="15:49">sizeof<argument_list pos:start="15:33" pos:end="15:49">(<argument pos:start="15:34" pos:end="15:48"><expr pos:start="15:34" pos:end="15:48"><name pos:start="15:34" pos:end="15:48"><name pos:start="15:34" pos:end="15:36">ioc</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:48">remoteAddr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="22:0"><expr pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:8">cioc</name><operator pos:start="17:9" pos:end="17:10">-&gt;</operator><name pos:start="17:11" pos:end="17:22">localAddrLen</name></name> <operator pos:start="17:24" pos:end="17:24">=</operator> <sizeof pos:start="17:26" pos:end="17:47">sizeof<argument_list pos:start="17:32" pos:end="17:47">(<argument pos:start="17:33" pos:end="17:46"><expr pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:46"><name pos:start="17:33" pos:end="17:35">ioc</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:46">localAddr</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



<cpp:ifdef pos:start="21:1" pos:end="21:12">#<cpp:directive pos:start="21:2" pos:end="21:6">ifdef</cpp:directive> <name pos:start="21:8" pos:end="21:12">WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="23:5" pos:end="26:0"><expr pos:start="23:5" pos:end="23:68"><call pos:start="23:5" pos:end="23:21"><name pos:start="23:5" pos:end="23:15">QIO_CHANNEL</name><argument_list pos:start="23:16" pos:end="23:21">(<argument pos:start="23:17" pos:end="23:20"><expr pos:start="23:17" pos:end="23:20"><name pos:start="23:17" pos:end="23:20">cioc</name></expr></argument>)</argument_list></call><operator pos:start="23:22" pos:end="23:23">-&gt;</operator><name pos:start="23:24" pos:end="23:28">event</name> <operator pos:start="23:30" pos:end="23:30">=</operator> <call pos:start="23:32" pos:end="23:68"><name pos:start="23:32" pos:end="23:42">CreateEvent</name><argument_list pos:start="23:43" pos:end="23:68">(<argument pos:start="23:44" pos:end="23:47"><expr pos:start="23:44" pos:end="23:47"><name pos:start="23:44" pos:end="23:47">NULL</name></expr></argument>, <argument pos:start="23:50" pos:end="23:54"><expr pos:start="23:50" pos:end="23:54"><name pos:start="23:50" pos:end="23:54">FALSE</name></expr></argument>, <argument pos:start="23:57" pos:end="23:61"><expr pos:start="23:57" pos:end="23:61"><name pos:start="23:57" pos:end="23:61">FALSE</name></expr></argument>, <argument pos:start="23:64" pos:end="23:67"><expr pos:start="23:64" pos:end="23:67"><name pos:start="23:64" pos:end="23:67">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="25:1" pos:end="25:6">#<cpp:directive pos:start="25:2" pos:end="25:6">endif</cpp:directive></cpp:endif>





 <label pos:start="31:2" pos:end="31:7"><name pos:start="31:2" pos:end="31:6">retry</name>:</label>

    <expr_stmt pos:start="33:5" pos:end="33:41"><expr pos:start="33:5" pos:end="33:40"><call pos:start="33:5" pos:end="33:40"><name pos:start="33:5" pos:end="33:35">trace_qio_channel_socket_accept</name><argument_list pos:start="33:36" pos:end="33:40">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="37:49"><expr pos:start="35:5" pos:end="37:48"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:8">cioc</name><operator pos:start="35:9" pos:end="35:10">-&gt;</operator><name pos:start="35:11" pos:end="35:12">fd</name></name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="37:48"><name pos:start="35:16" pos:end="35:26">qemu_accept</name><argument_list pos:start="35:27" pos:end="37:48">(<argument pos:start="35:28" pos:end="35:34"><expr pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:34"><name pos:start="35:28" pos:end="35:30">ioc</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:34">fd</name></name></expr></argument>, <argument pos:start="35:37" pos:end="35:72"><expr pos:start="35:37" pos:end="35:72"><operator pos:start="35:37" pos:end="35:37">(</operator>struct <name pos:start="35:45" pos:end="35:52">sockaddr</name> <operator pos:start="35:54" pos:end="35:54">*</operator><operator pos:start="35:55" pos:end="35:55">)</operator><operator pos:start="35:56" pos:end="35:56">&amp;</operator><name pos:start="35:57" pos:end="35:72"><name pos:start="35:57" pos:end="35:60">cioc</name><operator pos:start="35:61" pos:end="35:62">-&gt;</operator><name pos:start="35:63" pos:end="35:72">remoteAddr</name></name></expr></argument>,

                           <argument pos:start="37:28" pos:end="37:47"><expr pos:start="37:28" pos:end="37:47"><operator pos:start="37:28" pos:end="37:28">&amp;</operator><name pos:start="37:29" pos:end="37:47"><name pos:start="37:29" pos:end="37:32">cioc</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:47">remoteAddrLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="51:5"><if pos:start="39:5" pos:end="51:5">if <condition pos:start="39:8" pos:end="39:21">(<expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:16"><name pos:start="39:9" pos:end="39:12">cioc</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:16">fd</name></name> <operator pos:start="39:18" pos:end="39:18">&lt;</operator> <literal type="number" pos:start="39:20" pos:end="39:20">0</literal></expr>)</condition> <block pos:start="39:23" pos:end="51:5">{<block_content pos:start="41:9" pos:end="49:19">

        <expr_stmt pos:start="41:9" pos:end="41:50"><expr pos:start="41:9" pos:end="41:49"><call pos:start="41:9" pos:end="41:49"><name pos:start="41:9" pos:end="41:44">trace_qio_channel_socket_accept_fail</name><argument_list pos:start="41:45" pos:end="41:49">(<argument pos:start="41:46" pos:end="41:48"><expr pos:start="41:46" pos:end="41:48"><name pos:start="41:46" pos:end="41:48">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:27">(<expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:17">errno</name> <operator pos:start="43:19" pos:end="43:20">==</operator> <name pos:start="43:22" pos:end="43:26">EINTR</name></expr>)</condition> <block pos:start="43:29" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:23">

            <goto pos:start="45:13" pos:end="45:23">goto <name pos:start="45:18" pos:end="45:22">retry</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="49:9" pos:end="49:19">goto <name pos:start="49:14" pos:end="49:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="70:0"><if pos:start="55:5" pos:end="70:0">if <condition pos:start="55:8" pos:end="57:45">(<expr pos:start="55:9" pos:end="57:44"><call pos:start="55:9" pos:end="57:40"><name pos:start="55:9" pos:end="55:19">getsockname</name><argument_list pos:start="55:20" pos:end="57:40">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:24">cioc</name><operator pos:start="55:25" pos:end="55:26">-&gt;</operator><name pos:start="55:27" pos:end="55:28">fd</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:65"><expr pos:start="55:31" pos:end="55:65"><operator pos:start="55:31" pos:end="55:31">(</operator>struct <name pos:start="55:39" pos:end="55:46">sockaddr</name> <operator pos:start="55:48" pos:end="55:48">*</operator><operator pos:start="55:49" pos:end="55:49">)</operator><operator pos:start="55:50" pos:end="55:50">&amp;</operator><name pos:start="55:51" pos:end="55:65"><name pos:start="55:51" pos:end="55:54">cioc</name><operator pos:start="55:55" pos:end="55:56">-&gt;</operator><name pos:start="55:57" pos:end="55:65">localAddr</name></name></expr></argument>,

                    <argument pos:start="57:21" pos:end="57:39"><expr pos:start="57:21" pos:end="57:39"><operator pos:start="57:21" pos:end="57:21">&amp;</operator><name pos:start="57:22" pos:end="57:39"><name pos:start="57:22" pos:end="57:25">cioc</name><operator pos:start="57:26" pos:end="57:27">-&gt;</operator><name pos:start="57:28" pos:end="57:39">localAddrLen</name></name></expr></argument>)</argument_list></call> <operator pos:start="57:42" pos:end="57:42">&lt;</operator> <literal type="number" pos:start="57:44" pos:end="57:44">0</literal></expr>)</condition> <block pos:start="57:47" pos:end="70:0">{<block_content pos:start="59:9" pos:end="63:19">

        <expr_stmt pos:start="59:9" pos:end="61:65"><expr pos:start="59:9" pos:end="61:64"><call pos:start="59:9" pos:end="61:64"><name pos:start="59:9" pos:end="59:24">error_setg_errno</name><argument_list pos:start="59:25" pos:end="61:64">(<argument pos:start="59:26" pos:end="59:29"><expr pos:start="59:26" pos:end="59:29"><name pos:start="59:26" pos:end="59:29">errp</name></expr></argument>, <argument pos:start="59:32" pos:end="59:36"><expr pos:start="59:32" pos:end="59:36"><name pos:start="59:32" pos:end="59:36">errno</name></expr></argument>,

                         <argument pos:start="61:26" pos:end="61:63"><expr pos:start="61:26" pos:end="61:63"><literal type="string" pos:start="61:26" pos:end="61:63">"Unable to query local socket address"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:19">goto <name pos:start="63:14" pos:end="63:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



<cpp:ifndef pos:start="69:1" pos:end="69:13">#<cpp:directive pos:start="69:2" pos:end="69:7">ifndef</cpp:directive> <name pos:start="69:9" pos:end="69:13">WIN32</name></cpp:ifndef>

    <if_stmt pos:start="71:5" pos:end="80:0"><if pos:start="71:5" pos:end="80:0">if <condition pos:start="71:8" pos:end="71:45">(<expr pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:33"><name pos:start="71:9" pos:end="71:12">cioc</name><operator pos:start="71:13" pos:end="71:14">-&gt;</operator><name pos:start="71:15" pos:end="71:23">localAddr</name><operator pos:start="71:24" pos:end="71:24">.</operator><name pos:start="71:25" pos:end="71:33">ss_family</name></name> <operator pos:start="71:35" pos:end="71:36">==</operator> <name pos:start="71:38" pos:end="71:44">AF_UNIX</name></expr>)</condition> <block pos:start="71:47" pos:end="80:0">{<block_content pos:start="73:9" pos:end="75:72">

        <decl_stmt pos:start="73:9" pos:end="73:50"><decl pos:start="73:9" pos:end="73:49"><type pos:start="73:9" pos:end="73:20"><name pos:start="73:9" pos:end="73:18">QIOChannel</name> <modifier pos:start="73:20" pos:end="73:20">*</modifier></type><name pos:start="73:21" pos:end="73:29">ioc_local</name> <init pos:start="73:31" pos:end="73:49">= <expr pos:start="73:33" pos:end="73:49"><call pos:start="73:33" pos:end="73:49"><name pos:start="73:33" pos:end="73:43">QIO_CHANNEL</name><argument_list pos:start="73:44" pos:end="73:49">(<argument pos:start="73:45" pos:end="73:48"><expr pos:start="73:45" pos:end="73:48"><name pos:start="73:45" pos:end="73:48">cioc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:72"><expr pos:start="75:9" pos:end="75:71"><call pos:start="75:9" pos:end="75:71"><name pos:start="75:9" pos:end="75:31">qio_channel_set_feature</name><argument_list pos:start="75:32" pos:end="75:71">(<argument pos:start="75:33" pos:end="75:41"><expr pos:start="75:33" pos:end="75:41"><name pos:start="75:33" pos:end="75:41">ioc_local</name></expr></argument>, <argument pos:start="75:44" pos:end="75:70"><expr pos:start="75:44" pos:end="75:70"><name pos:start="75:44" pos:end="75:70">QIO_CHANNEL_FEATURE_FD_PASS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="79:8" pos:end="79:18">/* WIN32 */</comment>



    <expr_stmt pos:start="83:5" pos:end="83:66"><expr pos:start="83:5" pos:end="83:65"><call pos:start="83:5" pos:end="83:65"><name pos:start="83:5" pos:end="83:44">trace_qio_channel_socket_accept_complete</name><argument_list pos:start="83:45" pos:end="83:65">(<argument pos:start="83:46" pos:end="83:48"><expr pos:start="83:46" pos:end="83:48"><name pos:start="83:46" pos:end="83:48">ioc</name></expr></argument>, <argument pos:start="83:51" pos:end="83:54"><expr pos:start="83:51" pos:end="83:54"><name pos:start="83:51" pos:end="83:54">cioc</name></expr></argument>, <argument pos:start="83:57" pos:end="83:64"><expr pos:start="83:57" pos:end="83:64"><name pos:start="83:57" pos:end="83:64"><name pos:start="83:57" pos:end="83:60">cioc</name><operator pos:start="83:61" pos:end="83:62">-&gt;</operator><name pos:start="83:63" pos:end="83:64">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:16">return <expr pos:start="85:12" pos:end="85:15"><name pos:start="85:12" pos:end="85:15">cioc</name></expr>;</return>



 <label pos:start="89:2" pos:end="89:7"><name pos:start="89:2" pos:end="89:6">error</name>:</label>

    <expr_stmt pos:start="91:5" pos:end="91:31"><expr pos:start="91:5" pos:end="91:30"><call pos:start="91:5" pos:end="91:30"><name pos:start="91:5" pos:end="91:16">object_unref</name><argument_list pos:start="91:17" pos:end="91:30">(<argument pos:start="91:18" pos:end="91:29"><expr pos:start="91:18" pos:end="91:29"><call pos:start="91:18" pos:end="91:29"><name pos:start="91:18" pos:end="91:23">OBJECT</name><argument_list pos:start="91:24" pos:end="91:29">(<argument pos:start="91:25" pos:end="91:28"><expr pos:start="91:25" pos:end="91:28"><name pos:start="91:25" pos:end="91:28">cioc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="93:5" pos:end="93:16">return <expr pos:start="93:12" pos:end="93:15"><name pos:start="93:12" pos:end="93:15">NULL</name></expr>;</return>

</block_content>}</block>
</unit>
