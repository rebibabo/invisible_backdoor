<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15909.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:18">sd_open</name><parameter_list pos:start="1:19" pos:end="1:73">(<parameter pos:start="1:20" pos:end="1:39"><decl pos:start="1:20" pos:end="1:39"><type pos:start="1:20" pos:end="1:39"><name pos:start="1:20" pos:end="1:35">BlockDriverState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:39">bs</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:61">filename</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:72"><decl pos:start="1:64" pos:end="1:72"><type pos:start="1:64" pos:end="1:72"><name pos:start="1:64" pos:end="1:66">int</name></type> <name pos:start="1:68" pos:end="1:72">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:15">

    <decl_stmt pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>, <decl pos:start="5:14" pos:end="5:15"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:15">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">vid</name> <init pos:start="7:18" pos:end="7:20">= <expr pos:start="7:20" pos:end="7:20"><literal type="number" pos:start="7:20" pos:end="7:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:38"><decl pos:start="9:5" pos:end="9:37"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">BDRVSheepdogState</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:24">s</name> <init pos:start="9:26" pos:end="9:37">= <expr pos:start="9:28" pos:end="9:37"><name pos:start="9:28" pos:end="9:37"><name pos:start="9:28" pos:end="9:29">bs</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:37">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:28"><name pos:start="11:10" pos:end="11:12">vdi</name><index pos:start="11:13" pos:end="11:28">[<expr pos:start="11:14" pos:end="11:27"><name pos:start="11:14" pos:end="11:27">SD_MAX_VDI_LEN</name></expr>]</index></name></decl>, <decl pos:start="11:31" pos:end="11:53"><type ref="prev" pos:start="11:5" pos:end="11:8"/><name pos:start="11:31" pos:end="11:53"><name pos:start="11:31" pos:end="11:33">tag</name><index pos:start="11:34" pos:end="11:53">[<expr pos:start="11:35" pos:end="11:52"><name pos:start="11:35" pos:end="11:52">SD_MAX_VDI_TAG_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:19">snapid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">buf</name> <init pos:start="15:15" pos:end="15:20">= <expr pos:start="15:17" pos:end="15:20"><name pos:start="15:17" pos:end="15:20">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:62"><expr pos:start="19:5" pos:end="19:61"><call pos:start="19:5" pos:end="19:61"><name pos:start="19:5" pos:end="19:12">strstart</name><argument_list pos:start="19:13" pos:end="19:61">(<argument pos:start="19:14" pos:end="19:21"><expr pos:start="19:14" pos:end="19:21"><name pos:start="19:14" pos:end="19:21">filename</name></expr></argument>, <argument pos:start="19:24" pos:end="19:34"><expr pos:start="19:24" pos:end="19:34"><literal type="string" pos:start="19:24" pos:end="19:34">"sheepdog:"</literal></expr></argument>, <argument pos:start="19:37" pos:end="19:60"><expr pos:start="19:37" pos:end="19:60"><operator pos:start="19:37" pos:end="19:37">(</operator><specifier pos:start="19:38" pos:end="19:42">const</specifier> <name pos:start="19:44" pos:end="19:47">char</name> <operator pos:start="19:49" pos:end="19:49">*</operator><operator pos:start="19:50" pos:end="19:50">*</operator><operator pos:start="19:51" pos:end="19:51">)</operator><operator pos:start="19:52" pos:end="19:52">&amp;</operator><name pos:start="19:53" pos:end="19:60">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:38"><expr pos:start="23:5" pos:end="23:37"><call pos:start="23:5" pos:end="23:37"><name pos:start="23:5" pos:end="23:14">QLIST_INIT</name><argument_list pos:start="23:15" pos:end="23:37">(<argument pos:start="23:16" pos:end="23:36"><expr pos:start="23:16" pos:end="23:36"><operator pos:start="23:16" pos:end="23:16">&amp;</operator><name pos:start="23:17" pos:end="23:36"><name pos:start="23:17" pos:end="23:17">s</name><operator pos:start="23:18" pos:end="23:19">-&gt;</operator><name pos:start="23:20" pos:end="23:36">inflight_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:37"><expr pos:start="25:5" pos:end="25:36"><call pos:start="25:5" pos:end="25:36"><name pos:start="25:5" pos:end="25:14">QLIST_INIT</name><argument_list pos:start="25:15" pos:end="25:36">(<argument pos:start="25:16" pos:end="25:35"><expr pos:start="25:16" pos:end="25:35"><operator pos:start="25:16" pos:end="25:16">&amp;</operator><name pos:start="25:17" pos:end="25:35"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:35">pending_aio_head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:15"><expr pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:9"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:9">fd</name></name> <operator pos:start="27:11" pos:end="27:11">=</operator> <operator pos:start="27:13" pos:end="27:13">-</operator><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:32"><expr pos:start="31:5" pos:end="31:31"><call pos:start="31:5" pos:end="31:31"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="31:31">(<argument pos:start="31:12" pos:end="31:14"><expr pos:start="31:12" pos:end="31:14"><name pos:start="31:12" pos:end="31:14">vdi</name></expr></argument>, <argument pos:start="31:17" pos:end="31:17"><expr pos:start="31:17" pos:end="31:17"><literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr></argument>, <argument pos:start="31:20" pos:end="31:30"><expr pos:start="31:20" pos:end="31:30"><sizeof pos:start="31:20" pos:end="31:30">sizeof<argument_list pos:start="31:26" pos:end="31:30">(<argument pos:start="31:27" pos:end="31:29"><expr pos:start="31:27" pos:end="31:29"><name pos:start="31:27" pos:end="31:29">vdi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><call pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:10">memset</name><argument_list pos:start="33:11" pos:end="33:31">(<argument pos:start="33:12" pos:end="33:14"><expr pos:start="33:12" pos:end="33:14"><name pos:start="33:12" pos:end="33:14">tag</name></expr></argument>, <argument pos:start="33:17" pos:end="33:17"><expr pos:start="33:17" pos:end="33:17"><literal type="number" pos:start="33:17" pos:end="33:17">0</literal></expr></argument>, <argument pos:start="33:20" pos:end="33:30"><expr pos:start="33:20" pos:end="33:30"><sizeof pos:start="33:20" pos:end="33:30">sizeof<argument_list pos:start="33:26" pos:end="33:30">(<argument pos:start="33:27" pos:end="33:29"><expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">tag</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:58">(<expr pos:start="35:9" pos:end="35:57"><call pos:start="35:9" pos:end="35:53"><name pos:start="35:9" pos:end="35:21">parse_vdiname</name><argument_list pos:start="35:22" pos:end="35:53">(<argument pos:start="35:23" pos:end="35:23"><expr pos:start="35:23" pos:end="35:23"><name pos:start="35:23" pos:end="35:23">s</name></expr></argument>, <argument pos:start="35:26" pos:end="35:33"><expr pos:start="35:26" pos:end="35:33"><name pos:start="35:26" pos:end="35:33">filename</name></expr></argument>, <argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><name pos:start="35:36" pos:end="35:38">vdi</name></expr></argument>, <argument pos:start="35:41" pos:end="35:47"><expr pos:start="35:41" pos:end="35:47"><operator pos:start="35:41" pos:end="35:41">&amp;</operator><name pos:start="35:42" pos:end="35:47">snapid</name></expr></argument>, <argument pos:start="35:50" pos:end="35:52"><expr pos:start="35:50" pos:end="35:52"><name pos:start="35:50" pos:end="35:52">tag</name></expr></argument>)</argument_list></call> <operator pos:start="35:55" pos:end="35:55">&lt;</operator> <literal type="number" pos:start="35:57" pos:end="35:57">0</literal></expr>)</condition> <block pos:start="35:60" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:17">

        <expr_stmt pos:start="37:9" pos:end="37:22"><expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">-</operator><name pos:start="37:16" pos:end="37:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:28"><expr pos:start="43:5" pos:end="43:27"><name pos:start="43:5" pos:end="43:9"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:9">fd</name></name> <operator pos:start="43:11" pos:end="43:11">=</operator> <call pos:start="43:13" pos:end="43:27"><name pos:start="43:13" pos:end="43:24">get_sheep_fd</name><argument_list pos:start="43:25" pos:end="43:27">(<argument pos:start="43:26" pos:end="43:26"><expr pos:start="43:26" pos:end="43:26"><name pos:start="43:26" pos:end="43:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:18">(<expr pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:13"><name pos:start="45:9" pos:end="45:9">s</name><operator pos:start="45:10" pos:end="45:11">-&gt;</operator><name pos:start="45:12" pos:end="45:13">fd</name></name> <operator pos:start="45:15" pos:end="45:15">&lt;</operator> <literal type="number" pos:start="45:17" pos:end="45:17">0</literal></expr>)</condition> <block pos:start="45:20" pos:end="51:5">{<block_content pos:start="47:9" pos:end="49:17">

        <expr_stmt pos:start="47:9" pos:end="47:20"><expr pos:start="47:9" pos:end="47:19"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <name pos:start="47:15" pos:end="47:19"><name pos:start="47:15" pos:end="47:15">s</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:19">fd</name></name></expr>;</expr_stmt>

        <goto pos:start="49:9" pos:end="49:17">goto <name pos:start="49:14" pos:end="49:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:54"><expr pos:start="55:5" pos:end="55:53"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:53"><name pos:start="55:11" pos:end="55:23">find_vdi_name</name><argument_list pos:start="55:24" pos:end="55:53">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">s</name></expr></argument>, <argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">vdi</name></expr></argument>, <argument pos:start="55:33" pos:end="55:38"><expr pos:start="55:33" pos:end="55:38"><name pos:start="55:33" pos:end="55:38">snapid</name></expr></argument>, <argument pos:start="55:41" pos:end="55:43"><expr pos:start="55:41" pos:end="55:43"><name pos:start="55:41" pos:end="55:43">tag</name></expr></argument>, <argument pos:start="55:46" pos:end="55:49"><expr pos:start="55:46" pos:end="55:49"><operator pos:start="55:46" pos:end="55:46">&amp;</operator><name pos:start="55:47" pos:end="55:49">vid</name></expr></argument>, <argument pos:start="55:52" pos:end="55:52"><expr pos:start="55:52" pos:end="55:52"><literal type="number" pos:start="55:52" pos:end="55:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:12">(<expr pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">ret</name></expr>)</condition> <block pos:start="57:14" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:17">

        <goto pos:start="59:9" pos:end="59:17">goto <name pos:start="59:14" pos:end="59:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="71:7">/*

     * QEMU block layer emulates writethrough cache as 'writeback + flush', so

     * we always set SD_FLAG_CMD_CACHE (writeback cache) as default.

     */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:39"><expr pos:start="73:5" pos:end="73:38"><name pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:5">s</name><operator pos:start="73:6" pos:end="73:7">-&gt;</operator><name pos:start="73:8" pos:end="73:18">cache_flags</name></name> <operator pos:start="73:20" pos:end="73:20">=</operator> <name pos:start="73:22" pos:end="73:38">SD_FLAG_CMD_CACHE</name></expr>;</expr_stmt>

    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:31">(<expr pos:start="75:9" pos:end="75:30"><name pos:start="75:9" pos:end="75:13">flags</name> <operator pos:start="75:15" pos:end="75:15">&amp;</operator> <name pos:start="75:17" pos:end="75:30">BDRV_O_NOCACHE</name></expr>)</condition> <block pos:start="75:33" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:44">

        <expr_stmt pos:start="77:9" pos:end="77:44"><expr pos:start="77:9" pos:end="77:43"><name pos:start="77:9" pos:end="77:22"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:22">cache_flags</name></name> <operator pos:start="77:24" pos:end="77:24">=</operator> <name pos:start="77:26" pos:end="77:43">SD_FLAG_CMD_DIRECT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="97:5"><if pos:start="83:5" pos:end="97:5">if <condition pos:start="83:8" pos:end="83:44">(<expr pos:start="83:9" pos:end="83:43"><name pos:start="83:9" pos:end="83:22"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:22">cache_flags</name></name> <operator pos:start="83:24" pos:end="83:25">==</operator> <name pos:start="83:27" pos:end="83:43">SD_FLAG_CMD_CACHE</name></expr>)</condition> <block pos:start="83:46" pos:end="97:5">{<block_content pos:start="85:9" pos:end="95:9">

        <expr_stmt pos:start="85:9" pos:end="85:56"><expr pos:start="85:9" pos:end="85:55"><name pos:start="85:9" pos:end="85:19"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:19">flush_fd</name></name> <operator pos:start="85:21" pos:end="85:21">=</operator> <call pos:start="85:23" pos:end="85:55"><name pos:start="85:23" pos:end="85:37">connect_to_sdog</name><argument_list pos:start="85:38" pos:end="85:55">(<argument pos:start="85:39" pos:end="85:45"><expr pos:start="85:39" pos:end="85:45"><name pos:start="85:39" pos:end="85:45"><name pos:start="85:39" pos:end="85:39">s</name><operator pos:start="85:40" pos:end="85:41">-&gt;</operator><name pos:start="85:42" pos:end="85:45">addr</name></name></expr></argument>, <argument pos:start="85:48" pos:end="85:54"><expr pos:start="85:48" pos:end="85:54"><name pos:start="85:48" pos:end="85:54"><name pos:start="85:48" pos:end="85:48">s</name><operator pos:start="85:49" pos:end="85:50">-&gt;</operator><name pos:start="85:51" pos:end="85:54">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="87:9" pos:end="95:9"><if pos:start="87:9" pos:end="95:9">if <condition pos:start="87:12" pos:end="87:28">(<expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:23">flush_fd</name></name> <operator pos:start="87:25" pos:end="87:25">&lt;</operator> <literal type="number" pos:start="87:27" pos:end="87:27">0</literal></expr>)</condition> <block pos:start="87:30" pos:end="95:9">{<block_content pos:start="89:13" pos:end="93:21">

            <expr_stmt pos:start="89:13" pos:end="89:46"><expr pos:start="89:13" pos:end="89:45"><call pos:start="89:13" pos:end="89:45"><name pos:start="89:13" pos:end="89:24">error_report</name><argument_list pos:start="89:25" pos:end="89:45">(<argument pos:start="89:26" pos:end="89:44"><expr pos:start="89:26" pos:end="89:44"><literal type="string" pos:start="89:26" pos:end="89:44">"failed to connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:30"><expr pos:start="91:13" pos:end="91:29"><name pos:start="91:13" pos:end="91:15">ret</name> <operator pos:start="91:17" pos:end="91:17">=</operator> <name pos:start="91:19" pos:end="91:29"><name pos:start="91:19" pos:end="91:19">s</name><operator pos:start="91:20" pos:end="91:21">-&gt;</operator><name pos:start="91:22" pos:end="91:29">flush_fd</name></name></expr>;</expr_stmt>

            <goto pos:start="93:13" pos:end="93:21">goto <name pos:start="93:18" pos:end="93:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="107:5"><if pos:start="101:5" pos:end="107:5">if <condition pos:start="101:8" pos:end="101:33">(<expr pos:start="101:9" pos:end="101:32"><name pos:start="101:9" pos:end="101:14">snapid</name> <operator pos:start="101:16" pos:end="101:17">||</operator> <name pos:start="101:19" pos:end="101:24"><name pos:start="101:19" pos:end="101:21">tag</name><index pos:start="101:22" pos:end="101:24">[<expr pos:start="101:23" pos:end="101:23"><literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>]</index></name> <operator pos:start="101:26" pos:end="101:27">!=</operator> <literal type="char" pos:start="101:29" pos:end="101:32">'\0'</literal></expr>)</condition> <block pos:start="101:35" pos:end="107:5">{<block_content pos:start="103:9" pos:end="105:30">

        <expr_stmt pos:start="103:9" pos:end="103:63"><expr pos:start="103:9" pos:end="103:62"><call pos:start="103:9" pos:end="103:62"><name pos:start="103:9" pos:end="103:15">dprintf</name><argument_list pos:start="103:16" pos:end="103:62">(<argument pos:start="103:17" pos:end="103:56"><expr pos:start="103:17" pos:end="103:56"><literal type="string" pos:start="103:17" pos:end="103:19">"%"</literal> <name pos:start="103:21" pos:end="103:26">PRIx32</name> <literal type="string" pos:start="103:28" pos:end="103:56">" snapshot inode was open.\n"</literal></expr></argument>, <argument pos:start="103:59" pos:end="103:61"><expr pos:start="103:59" pos:end="103:61"><name pos:start="103:59" pos:end="103:61">vid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:30"><expr pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:9">s</name><operator pos:start="105:10" pos:end="105:11">-&gt;</operator><name pos:start="105:12" pos:end="105:22">is_snapshot</name></name> <operator pos:start="105:24" pos:end="105:24">=</operator> <name pos:start="105:26" pos:end="105:29">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:43"><expr pos:start="111:5" pos:end="111:42"><name pos:start="111:5" pos:end="111:6">fd</name> <operator pos:start="111:8" pos:end="111:8">=</operator> <call pos:start="111:10" pos:end="111:42"><name pos:start="111:10" pos:end="111:24">connect_to_sdog</name><argument_list pos:start="111:25" pos:end="111:42">(<argument pos:start="111:26" pos:end="111:32"><expr pos:start="111:26" pos:end="111:32"><name pos:start="111:26" pos:end="111:32"><name pos:start="111:26" pos:end="111:26">s</name><operator pos:start="111:27" pos:end="111:28">-&gt;</operator><name pos:start="111:29" pos:end="111:32">addr</name></name></expr></argument>, <argument pos:start="111:35" pos:end="111:41"><expr pos:start="111:35" pos:end="111:41"><name pos:start="111:35" pos:end="111:41"><name pos:start="111:35" pos:end="111:35">s</name><operator pos:start="111:36" pos:end="111:37">-&gt;</operator><name pos:start="111:38" pos:end="111:41">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="113:5" pos:end="121:5"><if pos:start="113:5" pos:end="121:5">if <condition pos:start="113:8" pos:end="113:15">(<expr pos:start="113:9" pos:end="113:14"><name pos:start="113:9" pos:end="113:10">fd</name> <operator pos:start="113:12" pos:end="113:12">&lt;</operator> <literal type="number" pos:start="113:14" pos:end="113:14">0</literal></expr>)</condition> <block pos:start="113:17" pos:end="121:5">{<block_content pos:start="115:9" pos:end="119:17">

        <expr_stmt pos:start="115:9" pos:end="115:42"><expr pos:start="115:9" pos:end="115:41"><call pos:start="115:9" pos:end="115:41"><name pos:start="115:9" pos:end="115:20">error_report</name><argument_list pos:start="115:21" pos:end="115:41">(<argument pos:start="115:22" pos:end="115:40"><expr pos:start="115:22" pos:end="115:40"><literal type="string" pos:start="115:22" pos:end="115:40">"failed to connect"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:17"><expr pos:start="117:9" pos:end="117:16"><name pos:start="117:9" pos:end="117:11">ret</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <name pos:start="117:15" pos:end="117:16">fd</name></expr>;</expr_stmt>

        <goto pos:start="119:9" pos:end="119:17">goto <name pos:start="119:14" pos:end="119:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:34"><expr pos:start="125:5" pos:end="125:33"><name pos:start="125:5" pos:end="125:7">buf</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:33"><name pos:start="125:11" pos:end="125:18">g_malloc</name><argument_list pos:start="125:19" pos:end="125:33">(<argument pos:start="125:20" pos:end="125:32"><expr pos:start="125:20" pos:end="125:32"><name pos:start="125:20" pos:end="125:32">SD_INODE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="129:38"><expr pos:start="127:5" pos:end="129:37"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="129:37"><name pos:start="127:11" pos:end="127:21">read_object</name><argument_list pos:start="127:22" pos:end="129:37">(<argument pos:start="127:23" pos:end="127:24"><expr pos:start="127:23" pos:end="127:24"><name pos:start="127:23" pos:end="127:24">fd</name></expr></argument>, <argument pos:start="127:27" pos:end="127:29"><expr pos:start="127:27" pos:end="127:29"><name pos:start="127:27" pos:end="127:29">buf</name></expr></argument>, <argument pos:start="127:32" pos:end="127:50"><expr pos:start="127:32" pos:end="127:50"><call pos:start="127:32" pos:end="127:50"><name pos:start="127:32" pos:end="127:45">vid_to_vdi_oid</name><argument_list pos:start="127:46" pos:end="127:50">(<argument pos:start="127:47" pos:end="127:49"><expr pos:start="127:47" pos:end="127:49"><name pos:start="127:47" pos:end="127:49">vid</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="127:53" pos:end="127:53"><expr pos:start="127:53" pos:end="127:53"><literal type="number" pos:start="127:53" pos:end="127:53">0</literal></expr></argument>, <argument pos:start="127:56" pos:end="127:68"><expr pos:start="127:56" pos:end="127:68"><name pos:start="127:56" pos:end="127:68">SD_INODE_SIZE</name></expr></argument>, <argument pos:start="127:71" pos:end="127:71"><expr pos:start="127:71" pos:end="127:71"><literal type="number" pos:start="127:71" pos:end="127:71">0</literal></expr></argument>,

                      <argument pos:start="129:23" pos:end="129:36"><expr pos:start="129:23" pos:end="129:36"><name pos:start="129:23" pos:end="129:36"><name pos:start="129:23" pos:end="129:23">s</name><operator pos:start="129:24" pos:end="129:25">-&gt;</operator><name pos:start="129:26" pos:end="129:36">cache_flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:20"><expr pos:start="133:5" pos:end="133:19"><call pos:start="133:5" pos:end="133:19"><name pos:start="133:5" pos:end="133:15">closesocket</name><argument_list pos:start="133:16" pos:end="133:19">(<argument pos:start="133:17" pos:end="133:18"><expr pos:start="133:17" pos:end="133:18"><name pos:start="133:17" pos:end="133:18">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="137:5" pos:end="141:5"><if pos:start="137:5" pos:end="141:5">if <condition pos:start="137:8" pos:end="137:12">(<expr pos:start="137:9" pos:end="137:11"><name pos:start="137:9" pos:end="137:11">ret</name></expr>)</condition> <block pos:start="137:14" pos:end="141:5">{<block_content pos:start="139:9" pos:end="139:17">

        <goto pos:start="139:9" pos:end="139:17">goto <name pos:start="139:14" pos:end="139:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:45"><expr pos:start="145:5" pos:end="145:44"><call pos:start="145:5" pos:end="145:44"><name pos:start="145:5" pos:end="145:10">memcpy</name><argument_list pos:start="145:11" pos:end="145:44">(<argument pos:start="145:12" pos:end="145:20"><expr pos:start="145:12" pos:end="145:20"><operator pos:start="145:12" pos:end="145:12">&amp;</operator><name pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:20">inode</name></name></expr></argument>, <argument pos:start="145:23" pos:end="145:25"><expr pos:start="145:23" pos:end="145:25"><name pos:start="145:23" pos:end="145:25">buf</name></expr></argument>, <argument pos:start="145:28" pos:end="145:43"><expr pos:start="145:28" pos:end="145:43"><sizeof pos:start="145:28" pos:end="145:43">sizeof<argument_list pos:start="145:34" pos:end="145:43">(<argument pos:start="145:35" pos:end="145:42"><expr pos:start="145:35" pos:end="145:42"><name pos:start="145:35" pos:end="145:42"><name pos:start="145:35" pos:end="145:35">s</name><operator pos:start="145:36" pos:end="145:37">-&gt;</operator><name pos:start="145:38" pos:end="145:42">inode</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="147:5" pos:end="147:39"><expr pos:start="147:5" pos:end="147:38"><name pos:start="147:5" pos:end="147:25"><name pos:start="147:5" pos:end="147:5">s</name><operator pos:start="147:6" pos:end="147:7">-&gt;</operator><name pos:start="147:8" pos:end="147:25">min_dirty_data_idx</name></name> <operator pos:start="147:27" pos:end="147:27">=</operator> <name pos:start="147:29" pos:end="147:38">UINT32_MAX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:30"><expr pos:start="149:5" pos:end="149:29"><name pos:start="149:5" pos:end="149:25"><name pos:start="149:5" pos:end="149:5">s</name><operator pos:start="149:6" pos:end="149:7">-&gt;</operator><name pos:start="149:8" pos:end="149:25">max_dirty_data_idx</name></name> <operator pos:start="149:27" pos:end="149:27">=</operator> <literal type="number" pos:start="149:29" pos:end="149:29">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:56"><expr pos:start="153:5" pos:end="153:55"><name pos:start="153:5" pos:end="153:21"><name pos:start="153:5" pos:end="153:6">bs</name><operator pos:start="153:7" pos:end="153:8">-&gt;</operator><name pos:start="153:9" pos:end="153:21">total_sectors</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <name pos:start="153:25" pos:end="153:41"><name pos:start="153:25" pos:end="153:25">s</name><operator pos:start="153:26" pos:end="153:27">-&gt;</operator><name pos:start="153:28" pos:end="153:32">inode</name><operator pos:start="153:33" pos:end="153:33">.</operator><name pos:start="153:34" pos:end="153:41">vdi_size</name></name> <operator pos:start="153:43" pos:end="153:43">/</operator> <name pos:start="153:45" pos:end="153:55">SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:43"><expr pos:start="155:5" pos:end="155:42"><call pos:start="155:5" pos:end="155:42"><name pos:start="155:5" pos:end="155:11">pstrcpy</name><argument_list pos:start="155:12" pos:end="155:42">(<argument pos:start="155:13" pos:end="155:19"><expr pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:19"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:19">name</name></name></expr></argument>, <argument pos:start="155:22" pos:end="155:36"><expr pos:start="155:22" pos:end="155:36"><sizeof pos:start="155:22" pos:end="155:36">sizeof<argument_list pos:start="155:28" pos:end="155:36">(<argument pos:start="155:29" pos:end="155:35"><expr pos:start="155:29" pos:end="155:35"><name pos:start="155:29" pos:end="155:35"><name pos:start="155:29" pos:end="155:29">s</name><operator pos:start="155:30" pos:end="155:31">-&gt;</operator><name pos:start="155:32" pos:end="155:35">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="155:39" pos:end="155:41"><expr pos:start="155:39" pos:end="155:41"><name pos:start="155:39" pos:end="155:41">vdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:33"><expr pos:start="157:5" pos:end="157:32"><call pos:start="157:5" pos:end="157:32"><name pos:start="157:5" pos:end="157:22">qemu_co_mutex_init</name><argument_list pos:start="157:23" pos:end="157:32">(<argument pos:start="157:24" pos:end="157:31"><expr pos:start="157:24" pos:end="157:31"><operator pos:start="157:24" pos:end="157:24">&amp;</operator><name pos:start="157:25" pos:end="157:31"><name pos:start="157:25" pos:end="157:25">s</name><operator pos:start="157:26" pos:end="157:27">-&gt;</operator><name pos:start="157:28" pos:end="157:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:16"><expr pos:start="159:5" pos:end="159:15"><call pos:start="159:5" pos:end="159:15"><name pos:start="159:5" pos:end="159:10">g_free</name><argument_list pos:start="159:11" pos:end="159:15">(<argument pos:start="159:12" pos:end="159:14"><expr pos:start="159:12" pos:end="159:14"><name pos:start="159:12" pos:end="159:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

<label pos:start="163:1" pos:end="163:4"><name pos:start="163:1" pos:end="163:3">out</name>:</label>

    <expr_stmt pos:start="165:5" pos:end="165:59"><expr pos:start="165:5" pos:end="165:58"><call pos:start="165:5" pos:end="165:58"><name pos:start="165:5" pos:end="165:27">qemu_aio_set_fd_handler</name><argument_list pos:start="165:28" pos:end="165:58">(<argument pos:start="165:29" pos:end="165:33"><expr pos:start="165:29" pos:end="165:33"><name pos:start="165:29" pos:end="165:33"><name pos:start="165:29" pos:end="165:29">s</name><operator pos:start="165:30" pos:end="165:31">-&gt;</operator><name pos:start="165:32" pos:end="165:33">fd</name></name></expr></argument>, <argument pos:start="165:36" pos:end="165:39"><expr pos:start="165:36" pos:end="165:39"><name pos:start="165:36" pos:end="165:39">NULL</name></expr></argument>, <argument pos:start="165:42" pos:end="165:45"><expr pos:start="165:42" pos:end="165:45"><name pos:start="165:42" pos:end="165:45">NULL</name></expr></argument>, <argument pos:start="165:48" pos:end="165:51"><expr pos:start="165:48" pos:end="165:51"><name pos:start="165:48" pos:end="165:51">NULL</name></expr></argument>, <argument pos:start="165:54" pos:end="165:57"><expr pos:start="165:54" pos:end="165:57"><name pos:start="165:54" pos:end="165:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="171:5"><if pos:start="167:5" pos:end="171:5">if <condition pos:start="167:8" pos:end="167:19">(<expr pos:start="167:9" pos:end="167:18"><name pos:start="167:9" pos:end="167:13"><name pos:start="167:9" pos:end="167:9">s</name><operator pos:start="167:10" pos:end="167:11">-&gt;</operator><name pos:start="167:12" pos:end="167:13">fd</name></name> <operator pos:start="167:15" pos:end="167:16">&gt;=</operator> <literal type="number" pos:start="167:18" pos:end="167:18">0</literal></expr>)</condition> <block pos:start="167:21" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:27">

        <expr_stmt pos:start="169:9" pos:end="169:27"><expr pos:start="169:9" pos:end="169:26"><call pos:start="169:9" pos:end="169:26"><name pos:start="169:9" pos:end="169:19">closesocket</name><argument_list pos:start="169:20" pos:end="169:26">(<argument pos:start="169:21" pos:end="169:25"><expr pos:start="169:21" pos:end="169:25"><name pos:start="169:21" pos:end="169:25"><name pos:start="169:21" pos:end="169:21">s</name><operator pos:start="169:22" pos:end="169:23">-&gt;</operator><name pos:start="169:24" pos:end="169:25">fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:16"><expr pos:start="173:5" pos:end="173:15"><call pos:start="173:5" pos:end="173:15"><name pos:start="173:5" pos:end="173:10">g_free</name><argument_list pos:start="173:11" pos:end="173:15">(<argument pos:start="173:12" pos:end="173:14"><expr pos:start="173:12" pos:end="173:14"><name pos:start="173:12" pos:end="173:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="175:5" pos:end="175:15">return <expr pos:start="175:12" pos:end="175:14"><name pos:start="175:12" pos:end="175:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
