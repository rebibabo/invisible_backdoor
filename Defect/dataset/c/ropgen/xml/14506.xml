<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14506.c" pos:tabs="8"><function pos:start="1:1" pos:end="331:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:23">qcow2_update_header</name><parameter_list pos:start="1:24" pos:end="1:45">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="331:1">{<block_content pos:start="5:5" pos:end="329:15">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:33"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">BDRVQcowState</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:33">= <expr pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:33"><name pos:start="5:24" pos:end="5:25">bs</name><operator pos:start="5:26" pos:end="5:27">-&gt;</operator><name pos:start="5:28" pos:end="5:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:14">QCowHeader</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:22">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:14"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:13">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">size_t</name></type> <name pos:start="11:12" pos:end="11:17">buflen</name> <init pos:start="11:19" pos:end="11:35">= <expr pos:start="11:21" pos:end="11:35"><name pos:start="11:21" pos:end="11:35"><name pos:start="11:21" pos:end="11:21">s</name><operator pos:start="11:22" pos:end="11:23">-&gt;</operator><name pos:start="11:24" pos:end="11:35">cluster_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:23">total_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:36">refcount_table_clusters</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:10">size_t</name></type> <name pos:start="19:12" pos:end="19:24">header_length</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:37"><type pos:start="21:5" pos:end="21:33"><name pos:start="21:5" pos:end="21:31">Qcow2UnknownHeaderExtension</name> <modifier pos:start="21:33" pos:end="21:33">*</modifier></type><name pos:start="21:34" pos:end="21:37">uext</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:38"><expr pos:start="25:5" pos:end="25:37"><name pos:start="25:5" pos:end="25:7">buf</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <call pos:start="25:11" pos:end="25:37"><name pos:start="25:11" pos:end="25:25">qemu_blockalign</name><argument_list pos:start="25:26" pos:end="25:37">(<argument pos:start="25:27" pos:end="25:28"><expr pos:start="25:27" pos:end="25:28"><name pos:start="25:27" pos:end="25:28">bs</name></expr></argument>, <argument pos:start="25:31" pos:end="25:36"><expr pos:start="25:31" pos:end="25:36"><name pos:start="25:31" pos:end="25:36">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:26">/* Header structure */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:10">header</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <operator pos:start="31:14" pos:end="31:14">(</operator><name pos:start="31:15" pos:end="31:24">QCowHeader</name><operator pos:start="31:25" pos:end="31:25">*</operator><operator pos:start="31:26" pos:end="31:26">)</operator> <name pos:start="31:28" pos:end="31:30">buf</name></expr>;</expr_stmt>



    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:33">(<expr pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:14">buflen</name> <operator pos:start="35:16" pos:end="35:16">&lt;</operator> <sizeof pos:start="35:18" pos:end="35:32">sizeof<argument_list pos:start="35:24" pos:end="35:32">(<argument pos:start="35:25" pos:end="35:31"><expr pos:start="35:25" pos:end="35:31"><operator pos:start="35:25" pos:end="35:25">*</operator><name pos:start="35:26" pos:end="35:31">header</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="35:35" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:22"><expr pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:11">ret</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <operator pos:start="37:15" pos:end="37:15">-</operator><name pos:start="37:16" pos:end="37:21">ENOSPC</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:18">goto <name pos:start="39:14" pos:end="39:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:68"><expr pos:start="45:5" pos:end="45:67"><name pos:start="45:5" pos:end="45:17">header_length</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <sizeof pos:start="45:21" pos:end="45:35">sizeof<argument_list pos:start="45:27" pos:end="45:35">(<argument pos:start="45:28" pos:end="45:34"><expr pos:start="45:28" pos:end="45:34"><operator pos:start="45:28" pos:end="45:28">*</operator><name pos:start="45:29" pos:end="45:34">header</name></expr></argument>)</argument_list></sizeof> <operator pos:start="45:37" pos:end="45:37">+</operator> <name pos:start="45:39" pos:end="45:67"><name pos:start="45:39" pos:end="45:39">s</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:67">unknown_header_fields_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:54"><expr pos:start="47:5" pos:end="47:53"><name pos:start="47:5" pos:end="47:14">total_size</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:34"><name pos:start="47:18" pos:end="47:19">bs</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:34">total_sectors</name></name> <operator pos:start="47:36" pos:end="47:36">*</operator> <name pos:start="47:38" pos:end="47:53">BDRV_SECTOR_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:78"><expr pos:start="49:5" pos:end="49:77"><name pos:start="49:5" pos:end="49:27">refcount_table_clusters</name> <operator pos:start="49:29" pos:end="49:29">=</operator> <name pos:start="49:31" pos:end="49:52"><name pos:start="49:31" pos:end="49:31">s</name><operator pos:start="49:32" pos:end="49:33">-&gt;</operator><name pos:start="49:34" pos:end="49:52">refcount_table_size</name></name> <operator pos:start="49:54" pos:end="49:55">&gt;&gt;</operator> <operator pos:start="49:57" pos:end="49:57">(</operator><name pos:start="49:58" pos:end="49:72"><name pos:start="49:58" pos:end="49:58">s</name><operator pos:start="49:59" pos:end="49:60">-&gt;</operator><name pos:start="49:61" pos:end="49:72">cluster_bits</name></name> <operator pos:start="49:74" pos:end="49:74">-</operator> <literal type="number" pos:start="49:76" pos:end="49:76">3</literal><operator pos:start="49:77" pos:end="49:77">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="97:6"><expr pos:start="53:5" pos:end="97:5"><operator pos:start="53:5" pos:end="53:5">*</operator><name pos:start="53:6" pos:end="53:11">header</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">(</operator><name pos:start="53:16" pos:end="53:25">QCowHeader</name><operator pos:start="53:26" pos:end="53:26">)</operator> <block pos:start="53:28" pos:end="97:5">{

        <comment type="block" pos:start="55:9" pos:end="55:30">/* Version 2 fields */</comment>

        <expr pos:start="57:9" pos:end="57:57"><operator pos:start="57:9" pos:end="57:9">.</operator><name pos:start="57:10" pos:end="57:14">magic</name>                  <operator pos:start="57:33" pos:end="57:33">=</operator> <call pos:start="57:35" pos:end="57:57"><name pos:start="57:35" pos:end="57:45">cpu_to_be32</name><argument_list pos:start="57:46" pos:end="57:57">(<argument pos:start="57:47" pos:end="57:56"><expr pos:start="57:47" pos:end="57:56"><name pos:start="57:47" pos:end="57:56">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="59:9" pos:end="59:62"><operator pos:start="59:9" pos:end="59:9">.</operator><name pos:start="59:10" pos:end="59:16">version</name>                <operator pos:start="59:33" pos:end="59:33">=</operator> <call pos:start="59:35" pos:end="59:62"><name pos:start="59:35" pos:end="59:45">cpu_to_be32</name><argument_list pos:start="59:46" pos:end="59:62">(<argument pos:start="59:47" pos:end="59:61"><expr pos:start="59:47" pos:end="59:61"><name pos:start="59:47" pos:end="59:61"><name pos:start="59:47" pos:end="59:47">s</name><operator pos:start="59:48" pos:end="59:49">-&gt;</operator><name pos:start="59:50" pos:end="59:61">qcow_version</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="61:9" pos:end="61:35"><operator pos:start="61:9" pos:end="61:9">.</operator><name pos:start="61:10" pos:end="61:28">backing_file_offset</name>    <operator pos:start="61:33" pos:end="61:33">=</operator> <literal type="number" pos:start="61:35" pos:end="61:35">0</literal></expr>,

        <expr pos:start="63:9" pos:end="63:35"><operator pos:start="63:9" pos:end="63:9">.</operator><name pos:start="63:10" pos:end="63:26">backing_file_size</name>      <operator pos:start="63:33" pos:end="63:33">=</operator> <literal type="number" pos:start="63:35" pos:end="63:35">0</literal></expr>,

        <expr pos:start="65:9" pos:end="65:62"><operator pos:start="65:9" pos:end="65:9">.</operator><name pos:start="65:10" pos:end="65:21">cluster_bits</name>           <operator pos:start="65:33" pos:end="65:33">=</operator> <call pos:start="65:35" pos:end="65:62"><name pos:start="65:35" pos:end="65:45">cpu_to_be32</name><argument_list pos:start="65:46" pos:end="65:62">(<argument pos:start="65:47" pos:end="65:61"><expr pos:start="65:47" pos:end="65:61"><name pos:start="65:47" pos:end="65:61"><name pos:start="65:47" pos:end="65:47">s</name><operator pos:start="65:48" pos:end="65:49">-&gt;</operator><name pos:start="65:50" pos:end="65:61">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="67:9" pos:end="67:57"><operator pos:start="67:9" pos:end="67:9">.</operator><name pos:start="67:10" pos:end="67:13">size</name>                   <operator pos:start="67:33" pos:end="67:33">=</operator> <call pos:start="67:35" pos:end="67:57"><name pos:start="67:35" pos:end="67:45">cpu_to_be64</name><argument_list pos:start="67:46" pos:end="67:57">(<argument pos:start="67:47" pos:end="67:56"><expr pos:start="67:47" pos:end="67:56"><name pos:start="67:47" pos:end="67:56">total_size</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="69:9" pos:end="69:69"><operator pos:start="69:9" pos:end="69:9">.</operator><name pos:start="69:10" pos:end="69:21">crypt_method</name>           <operator pos:start="69:33" pos:end="69:33">=</operator> <call pos:start="69:35" pos:end="69:69"><name pos:start="69:35" pos:end="69:45">cpu_to_be32</name><argument_list pos:start="69:46" pos:end="69:69">(<argument pos:start="69:47" pos:end="69:68"><expr pos:start="69:47" pos:end="69:68"><name pos:start="69:47" pos:end="69:68"><name pos:start="69:47" pos:end="69:47">s</name><operator pos:start="69:48" pos:end="69:49">-&gt;</operator><name pos:start="69:50" pos:end="69:68">crypt_method_header</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="71:9" pos:end="71:57"><operator pos:start="71:9" pos:end="71:9">.</operator><name pos:start="71:10" pos:end="71:16">l1_size</name>                <operator pos:start="71:33" pos:end="71:33">=</operator> <call pos:start="71:35" pos:end="71:57"><name pos:start="71:35" pos:end="71:45">cpu_to_be32</name><argument_list pos:start="71:46" pos:end="71:57">(<argument pos:start="71:47" pos:end="71:56"><expr pos:start="71:47" pos:end="71:56"><name pos:start="71:47" pos:end="71:56"><name pos:start="71:47" pos:end="71:47">s</name><operator pos:start="71:48" pos:end="71:49">-&gt;</operator><name pos:start="71:50" pos:end="71:56">l1_size</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="73:9" pos:end="73:65"><operator pos:start="73:9" pos:end="73:9">.</operator><name pos:start="73:10" pos:end="73:24">l1_table_offset</name>        <operator pos:start="73:33" pos:end="73:33">=</operator> <call pos:start="73:35" pos:end="73:65"><name pos:start="73:35" pos:end="73:45">cpu_to_be64</name><argument_list pos:start="73:46" pos:end="73:65">(<argument pos:start="73:47" pos:end="73:64"><expr pos:start="73:47" pos:end="73:64"><name pos:start="73:47" pos:end="73:64"><name pos:start="73:47" pos:end="73:47">s</name><operator pos:start="73:48" pos:end="73:49">-&gt;</operator><name pos:start="73:50" pos:end="73:64">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="75:9" pos:end="75:71"><operator pos:start="75:9" pos:end="75:9">.</operator><name pos:start="75:10" pos:end="75:30">refcount_table_offset</name>  <operator pos:start="75:33" pos:end="75:33">=</operator> <call pos:start="75:35" pos:end="75:71"><name pos:start="75:35" pos:end="75:45">cpu_to_be64</name><argument_list pos:start="75:46" pos:end="75:71">(<argument pos:start="75:47" pos:end="75:70"><expr pos:start="75:47" pos:end="75:70"><name pos:start="75:47" pos:end="75:70"><name pos:start="75:47" pos:end="75:47">s</name><operator pos:start="75:48" pos:end="75:49">-&gt;</operator><name pos:start="75:50" pos:end="75:70">refcount_table_offset</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="77:9" pos:end="77:71"><operator pos:start="77:9" pos:end="77:9">.</operator><name pos:start="77:10" pos:end="77:32">refcount_table_clusters</name> <operator pos:start="77:34" pos:end="77:34">=</operator> <call pos:start="77:36" pos:end="77:71"><name pos:start="77:36" pos:end="77:46">cpu_to_be32</name><argument_list pos:start="77:47" pos:end="77:71">(<argument pos:start="77:48" pos:end="77:70"><expr pos:start="77:48" pos:end="77:70"><name pos:start="77:48" pos:end="77:70">refcount_table_clusters</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="79:9" pos:end="79:62"><operator pos:start="79:9" pos:end="79:9">.</operator><name pos:start="79:10" pos:end="79:21">nb_snapshots</name>           <operator pos:start="79:33" pos:end="79:33">=</operator> <call pos:start="79:35" pos:end="79:62"><name pos:start="79:35" pos:end="79:45">cpu_to_be32</name><argument_list pos:start="79:46" pos:end="79:62">(<argument pos:start="79:47" pos:end="79:61"><expr pos:start="79:47" pos:end="79:61"><name pos:start="79:47" pos:end="79:61"><name pos:start="79:47" pos:end="79:47">s</name><operator pos:start="79:48" pos:end="79:49">-&gt;</operator><name pos:start="79:50" pos:end="79:61">nb_snapshots</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="81:9" pos:end="81:66"><operator pos:start="81:9" pos:end="81:9">.</operator><name pos:start="81:10" pos:end="81:25">snapshots_offset</name>       <operator pos:start="81:33" pos:end="81:33">=</operator> <call pos:start="81:35" pos:end="81:66"><name pos:start="81:35" pos:end="81:45">cpu_to_be64</name><argument_list pos:start="81:46" pos:end="81:66">(<argument pos:start="81:47" pos:end="81:65"><expr pos:start="81:47" pos:end="81:65"><name pos:start="81:47" pos:end="81:65"><name pos:start="81:47" pos:end="81:47">s</name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:65">snapshots_offset</name></name></expr></argument>)</argument_list></call></expr>,



        <comment type="block" pos:start="85:9" pos:end="85:30">/* Version 3 fields */</comment>

        <expr pos:start="87:9" pos:end="87:71"><operator pos:start="87:9" pos:end="87:9">.</operator><name pos:start="87:10" pos:end="87:30">incompatible_features</name>  <operator pos:start="87:33" pos:end="87:33">=</operator> <call pos:start="87:35" pos:end="87:71"><name pos:start="87:35" pos:end="87:45">cpu_to_be64</name><argument_list pos:start="87:46" pos:end="87:71">(<argument pos:start="87:47" pos:end="87:70"><expr pos:start="87:47" pos:end="87:70"><name pos:start="87:47" pos:end="87:70"><name pos:start="87:47" pos:end="87:47">s</name><operator pos:start="87:48" pos:end="87:49">-&gt;</operator><name pos:start="87:50" pos:end="87:70">incompatible_features</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="89:9" pos:end="89:69"><operator pos:start="89:9" pos:end="89:9">.</operator><name pos:start="89:10" pos:end="89:28">compatible_features</name>    <operator pos:start="89:33" pos:end="89:33">=</operator> <call pos:start="89:35" pos:end="89:69"><name pos:start="89:35" pos:end="89:45">cpu_to_be64</name><argument_list pos:start="89:46" pos:end="89:69">(<argument pos:start="89:47" pos:end="89:68"><expr pos:start="89:47" pos:end="89:68"><name pos:start="89:47" pos:end="89:68"><name pos:start="89:47" pos:end="89:47">s</name><operator pos:start="89:48" pos:end="89:49">-&gt;</operator><name pos:start="89:50" pos:end="89:68">compatible_features</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="91:9" pos:end="91:68"><operator pos:start="91:9" pos:end="91:9">.</operator><name pos:start="91:10" pos:end="91:27">autoclear_features</name>     <operator pos:start="91:33" pos:end="91:33">=</operator> <call pos:start="91:35" pos:end="91:68"><name pos:start="91:35" pos:end="91:45">cpu_to_be64</name><argument_list pos:start="91:46" pos:end="91:68">(<argument pos:start="91:47" pos:end="91:67"><expr pos:start="91:47" pos:end="91:67"><name pos:start="91:47" pos:end="91:67"><name pos:start="91:47" pos:end="91:47">s</name><operator pos:start="91:48" pos:end="91:49">-&gt;</operator><name pos:start="91:50" pos:end="91:67">autoclear_features</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="93:9" pos:end="93:64"><operator pos:start="93:9" pos:end="93:9">.</operator><name pos:start="93:10" pos:end="93:23">refcount_order</name>         <operator pos:start="93:33" pos:end="93:33">=</operator> <call pos:start="93:35" pos:end="93:64"><name pos:start="93:35" pos:end="93:45">cpu_to_be32</name><argument_list pos:start="93:46" pos:end="93:64">(<argument pos:start="93:47" pos:end="93:63"><expr pos:start="93:47" pos:end="93:63"><name pos:start="93:47" pos:end="93:63"><name pos:start="93:47" pos:end="93:47">s</name><operator pos:start="93:48" pos:end="93:49">-&gt;</operator><name pos:start="93:50" pos:end="93:63">refcount_order</name></name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="95:9" pos:end="95:60"><operator pos:start="95:9" pos:end="95:9">.</operator><name pos:start="95:10" pos:end="95:22">header_length</name>          <operator pos:start="95:33" pos:end="95:33">=</operator> <call pos:start="95:35" pos:end="95:60"><name pos:start="95:35" pos:end="95:45">cpu_to_be32</name><argument_list pos:start="95:46" pos:end="95:60">(<argument pos:start="95:47" pos:end="95:59"><expr pos:start="95:47" pos:end="95:59"><name pos:start="95:47" pos:end="95:59">header_length</name></expr></argument>)</argument_list></call></expr>,

    }</block></expr>;</expr_stmt>



    <comment type="block" pos:start="101:5" pos:end="101:52">/* For older versions, write a shorter header */</comment>

    <switch pos:start="103:5" pos:end="123:5">switch <condition pos:start="103:12" pos:end="103:28">(<expr pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:27"><name pos:start="103:13" pos:end="103:13">s</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:27">qcow_version</name></name></expr>)</condition> <block pos:start="103:30" pos:end="123:5">{<block_content pos:start="105:5" pos:end="121:18">

    <case pos:start="105:5" pos:end="105:11">case <expr pos:start="105:10" pos:end="105:10"><literal type="number" pos:start="105:10" pos:end="105:10">2</literal></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:58"><expr pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="107:57"><name pos:start="107:15" pos:end="107:22">offsetof</name><argument_list pos:start="107:23" pos:end="107:57">(<argument pos:start="107:24" pos:end="107:33"><expr pos:start="107:24" pos:end="107:33"><name pos:start="107:24" pos:end="107:33">QCowHeader</name></expr></argument>, <argument pos:start="107:36" pos:end="107:56"><expr pos:start="107:36" pos:end="107:56"><name pos:start="107:36" pos:end="107:56">incompatible_features</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="109:9" pos:end="109:14">break;</break>

    <case pos:start="111:5" pos:end="111:11">case <expr pos:start="111:10" pos:end="111:10"><literal type="number" pos:start="111:10" pos:end="111:10">3</literal></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:30"><expr pos:start="113:9" pos:end="113:29"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <sizeof pos:start="113:15" pos:end="113:29">sizeof<argument_list pos:start="113:21" pos:end="113:29">(<argument pos:start="113:22" pos:end="113:28"><expr pos:start="113:22" pos:end="113:28"><operator pos:start="113:22" pos:end="113:22">*</operator><name pos:start="113:23" pos:end="113:28">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <default pos:start="117:5" pos:end="117:12">default:</default>

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:11">ret</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">-</operator><name pos:start="119:16" pos:end="119:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></switch>



    <expr_stmt pos:start="127:5" pos:end="127:15"><expr pos:start="127:5" pos:end="127:14"><name pos:start="127:5" pos:end="127:7">buf</name> <operator pos:start="127:9" pos:end="127:10">+=</operator> <name pos:start="127:12" pos:end="127:14">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:18"><expr pos:start="129:5" pos:end="129:17"><name pos:start="129:5" pos:end="129:10">buflen</name> <operator pos:start="129:12" pos:end="129:13">-=</operator> <name pos:start="129:15" pos:end="129:17">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:27"><expr pos:start="131:5" pos:end="131:26"><call pos:start="131:5" pos:end="131:26"><name pos:start="131:5" pos:end="131:10">memset</name><argument_list pos:start="131:11" pos:end="131:26">(<argument pos:start="131:12" pos:end="131:14"><expr pos:start="131:12" pos:end="131:14"><name pos:start="131:12" pos:end="131:14">buf</name></expr></argument>, <argument pos:start="131:17" pos:end="131:17"><expr pos:start="131:17" pos:end="131:17"><literal type="number" pos:start="131:17" pos:end="131:17">0</literal></expr></argument>, <argument pos:start="131:20" pos:end="131:25"><expr pos:start="131:20" pos:end="131:25"><name pos:start="131:20" pos:end="131:25">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:50">/* Preserve any unknown field in the header */</comment>

    <if_stmt pos:start="137:5" pos:end="155:5"><if pos:start="137:5" pos:end="155:5">if <condition pos:start="137:8" pos:end="137:38">(<expr pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:37"><name pos:start="137:9" pos:end="137:9">s</name><operator pos:start="137:10" pos:end="137:11">-&gt;</operator><name pos:start="137:12" pos:end="137:37">unknown_header_fields_size</name></name></expr>)</condition> <block pos:start="137:40" pos:end="155:5">{<block_content pos:start="139:9" pos:end="153:48">

        <if_stmt pos:start="139:9" pos:end="145:9"><if pos:start="139:9" pos:end="145:9">if <condition pos:start="139:12" pos:end="139:51">(<expr pos:start="139:13" pos:end="139:50"><name pos:start="139:13" pos:end="139:18">buflen</name> <operator pos:start="139:20" pos:end="139:20">&lt;</operator> <name pos:start="139:22" pos:end="139:50"><name pos:start="139:22" pos:end="139:22">s</name><operator pos:start="139:23" pos:end="139:24">-&gt;</operator><name pos:start="139:25" pos:end="139:50">unknown_header_fields_size</name></name></expr>)</condition> <block pos:start="139:53" pos:end="145:9">{<block_content pos:start="141:13" pos:end="143:22">

            <expr_stmt pos:start="141:13" pos:end="141:26"><expr pos:start="141:13" pos:end="141:25"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:17">=</operator> <operator pos:start="141:19" pos:end="141:19">-</operator><name pos:start="141:20" pos:end="141:25">ENOSPC</name></expr>;</expr_stmt>

            <goto pos:start="143:13" pos:end="143:22">goto <name pos:start="143:18" pos:end="143:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:77"><expr pos:start="149:9" pos:end="149:76"><call pos:start="149:9" pos:end="149:76"><name pos:start="149:9" pos:end="149:14">memcpy</name><argument_list pos:start="149:15" pos:end="149:76">(<argument pos:start="149:16" pos:end="149:18"><expr pos:start="149:16" pos:end="149:18"><name pos:start="149:16" pos:end="149:18">buf</name></expr></argument>, <argument pos:start="149:21" pos:end="149:44"><expr pos:start="149:21" pos:end="149:44"><name pos:start="149:21" pos:end="149:44"><name pos:start="149:21" pos:end="149:21">s</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:44">unknown_header_fields</name></name></expr></argument>, <argument pos:start="149:47" pos:end="149:75"><expr pos:start="149:47" pos:end="149:75"><name pos:start="149:47" pos:end="149:75"><name pos:start="149:47" pos:end="149:47">s</name><operator pos:start="149:48" pos:end="149:49">-&gt;</operator><name pos:start="149:50" pos:end="149:75">unknown_header_fields_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:45"><expr pos:start="151:9" pos:end="151:44"><name pos:start="151:9" pos:end="151:11">buf</name> <operator pos:start="151:13" pos:end="151:14">+=</operator> <name pos:start="151:16" pos:end="151:44"><name pos:start="151:16" pos:end="151:16">s</name><operator pos:start="151:17" pos:end="151:18">-&gt;</operator><name pos:start="151:19" pos:end="151:44">unknown_header_fields_size</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:48"><expr pos:start="153:9" pos:end="153:47"><name pos:start="153:9" pos:end="153:14">buflen</name> <operator pos:start="153:16" pos:end="153:17">-=</operator> <name pos:start="153:19" pos:end="153:47"><name pos:start="153:19" pos:end="153:19">s</name><operator pos:start="153:20" pos:end="153:21">-&gt;</operator><name pos:start="153:22" pos:end="153:47">unknown_header_fields_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="159:5" pos:end="159:46">/* Backing file format header extension */</comment>

    <if_stmt pos:start="161:5" pos:end="181:5"><if pos:start="161:5" pos:end="181:5">if <condition pos:start="161:8" pos:end="161:28">(<expr pos:start="161:9" pos:end="161:27"><operator pos:start="161:9" pos:end="161:9">*</operator><name pos:start="161:10" pos:end="161:27"><name pos:start="161:10" pos:end="161:11">bs</name><operator pos:start="161:12" pos:end="161:13">-&gt;</operator><name pos:start="161:14" pos:end="161:27">backing_format</name></name></expr>)</condition> <block pos:start="161:30" pos:end="181:5">{<block_content pos:start="163:9" pos:end="179:22">

        <expr_stmt pos:start="163:9" pos:end="167:37"><expr pos:start="163:9" pos:end="167:36"><name pos:start="163:9" pos:end="163:11">ret</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="167:36"><name pos:start="163:15" pos:end="163:28">header_ext_add</name><argument_list pos:start="163:29" pos:end="167:36">(<argument pos:start="163:30" pos:end="163:32"><expr pos:start="163:30" pos:end="163:32"><name pos:start="163:30" pos:end="163:32">buf</name></expr></argument>, <argument pos:start="163:35" pos:end="163:64"><expr pos:start="163:35" pos:end="163:64"><name pos:start="163:35" pos:end="163:64">QCOW2_EXT_MAGIC_BACKING_FORMAT</name></expr></argument>,

                             <argument pos:start="165:30" pos:end="165:47"><expr pos:start="165:30" pos:end="165:47"><name pos:start="165:30" pos:end="165:47"><name pos:start="165:30" pos:end="165:31">bs</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:47">backing_format</name></name></expr></argument>, <argument pos:start="165:50" pos:end="165:75"><expr pos:start="165:50" pos:end="165:75"><call pos:start="165:50" pos:end="165:75"><name pos:start="165:50" pos:end="165:55">strlen</name><argument_list pos:start="165:56" pos:end="165:75">(<argument pos:start="165:57" pos:end="165:74"><expr pos:start="165:57" pos:end="165:74"><name pos:start="165:57" pos:end="165:74"><name pos:start="165:57" pos:end="165:58">bs</name><operator pos:start="165:59" pos:end="165:60">-&gt;</operator><name pos:start="165:61" pos:end="165:74">backing_format</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="167:30" pos:end="167:35"><expr pos:start="167:30" pos:end="167:35"><name pos:start="167:30" pos:end="167:35">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:20">(<expr pos:start="169:13" pos:end="169:19"><name pos:start="169:13" pos:end="169:15">ret</name> <operator pos:start="169:17" pos:end="169:17">&lt;</operator> <literal type="number" pos:start="169:19" pos:end="169:19">0</literal></expr>)</condition> <block pos:start="169:22" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:22">

            <goto pos:start="171:13" pos:end="171:22">goto <name pos:start="171:18" pos:end="171:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:19"><expr pos:start="177:9" pos:end="177:18"><name pos:start="177:9" pos:end="177:11">buf</name> <operator pos:start="177:13" pos:end="177:14">+=</operator> <name pos:start="177:16" pos:end="177:18">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:22"><expr pos:start="179:9" pos:end="179:21"><name pos:start="179:9" pos:end="179:14">buflen</name> <operator pos:start="179:16" pos:end="179:17">-=</operator> <name pos:start="179:19" pos:end="179:21">ret</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:23">/* Feature table */</comment>

    <decl_stmt pos:start="187:5" pos:end="219:6"><decl pos:start="187:5" pos:end="219:5"><type pos:start="187:5" pos:end="187:16"><name pos:start="187:5" pos:end="187:16">Qcow2Feature</name></type> <name pos:start="187:18" pos:end="187:27"><name pos:start="187:18" pos:end="187:25">features</name><index pos:start="187:26" pos:end="187:27">[]</index></name> <init pos:start="187:29" pos:end="219:5">= <expr pos:start="187:31" pos:end="219:5"><block pos:start="187:31" pos:end="219:5">{

        <expr pos:start="189:9" pos:end="197:9"><block pos:start="189:9" pos:end="197:9">{

            <expr pos:start="191:13" pos:end="191:48"><operator pos:start="191:13" pos:end="191:13">.</operator><name pos:start="191:14" pos:end="191:17">type</name> <operator pos:start="191:19" pos:end="191:19">=</operator> <name pos:start="191:21" pos:end="191:48">QCOW2_FEAT_TYPE_INCOMPATIBLE</name></expr>,

            <expr pos:start="193:13" pos:end="193:46"><operator pos:start="193:13" pos:end="193:13">.</operator><name pos:start="193:14" pos:end="193:16">bit</name>  <operator pos:start="193:19" pos:end="193:19">=</operator> <name pos:start="193:21" pos:end="193:46">QCOW2_INCOMPAT_DIRTY_BITNR</name></expr>,

            <expr pos:start="195:13" pos:end="195:31"><operator pos:start="195:13" pos:end="195:13">.</operator><name pos:start="195:14" pos:end="195:17">name</name> <operator pos:start="195:19" pos:end="195:19">=</operator> <literal type="string" pos:start="195:21" pos:end="195:31">"dirty bit"</literal></expr>,

        }</block></expr>,

        <expr pos:start="199:9" pos:end="207:9"><block pos:start="199:9" pos:end="207:9">{

            <expr pos:start="201:13" pos:end="201:48"><operator pos:start="201:13" pos:end="201:13">.</operator><name pos:start="201:14" pos:end="201:17">type</name> <operator pos:start="201:19" pos:end="201:19">=</operator> <name pos:start="201:21" pos:end="201:48">QCOW2_FEAT_TYPE_INCOMPATIBLE</name></expr>,

            <expr pos:start="203:13" pos:end="203:48"><operator pos:start="203:13" pos:end="203:13">.</operator><name pos:start="203:14" pos:end="203:16">bit</name>  <operator pos:start="203:19" pos:end="203:19">=</operator> <name pos:start="203:21" pos:end="203:48">QCOW2_INCOMPAT_CORRUPT_BITNR</name></expr>,

            <expr pos:start="205:13" pos:end="205:33"><operator pos:start="205:13" pos:end="205:13">.</operator><name pos:start="205:14" pos:end="205:17">name</name> <operator pos:start="205:19" pos:end="205:19">=</operator> <literal type="string" pos:start="205:21" pos:end="205:33">"corrupt bit"</literal></expr>,

        }</block></expr>,

        <expr pos:start="209:9" pos:end="217:9"><block pos:start="209:9" pos:end="217:9">{

            <expr pos:start="211:13" pos:end="211:46"><operator pos:start="211:13" pos:end="211:13">.</operator><name pos:start="211:14" pos:end="211:17">type</name> <operator pos:start="211:19" pos:end="211:19">=</operator> <name pos:start="211:21" pos:end="211:46">QCOW2_FEAT_TYPE_COMPATIBLE</name></expr>,

            <expr pos:start="213:13" pos:end="213:53"><operator pos:start="213:13" pos:end="213:13">.</operator><name pos:start="213:14" pos:end="213:16">bit</name>  <operator pos:start="213:19" pos:end="213:19">=</operator> <name pos:start="213:21" pos:end="213:53">QCOW2_COMPAT_LAZY_REFCOUNTS_BITNR</name></expr>,

            <expr pos:start="215:13" pos:end="215:36"><operator pos:start="215:13" pos:end="215:13">.</operator><name pos:start="215:14" pos:end="215:17">name</name> <operator pos:start="215:19" pos:end="215:19">=</operator> <literal type="string" pos:start="215:21" pos:end="215:36">"lazy refcounts"</literal></expr>,

        }</block></expr>,

    }</block></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="223:5" pos:end="225:61"><expr pos:start="223:5" pos:end="225:60"><name pos:start="223:5" pos:end="223:7">ret</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <call pos:start="223:11" pos:end="225:60"><name pos:start="223:11" pos:end="223:24">header_ext_add</name><argument_list pos:start="223:25" pos:end="225:60">(<argument pos:start="223:26" pos:end="223:28"><expr pos:start="223:26" pos:end="223:28"><name pos:start="223:26" pos:end="223:28">buf</name></expr></argument>, <argument pos:start="223:31" pos:end="223:59"><expr pos:start="223:31" pos:end="223:59"><name pos:start="223:31" pos:end="223:59">QCOW2_EXT_MAGIC_FEATURE_TABLE</name></expr></argument>,

                         <argument pos:start="225:26" pos:end="225:33"><expr pos:start="225:26" pos:end="225:33"><name pos:start="225:26" pos:end="225:33">features</name></expr></argument>, <argument pos:start="225:36" pos:end="225:51"><expr pos:start="225:36" pos:end="225:51"><sizeof pos:start="225:36" pos:end="225:51">sizeof<argument_list pos:start="225:42" pos:end="225:51">(<argument pos:start="225:43" pos:end="225:50"><expr pos:start="225:43" pos:end="225:50"><name pos:start="225:43" pos:end="225:50">features</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="225:54" pos:end="225:59"><expr pos:start="225:54" pos:end="225:59"><name pos:start="225:54" pos:end="225:59">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="227:5" pos:end="231:5"><if pos:start="227:5" pos:end="231:5">if <condition pos:start="227:8" pos:end="227:16">(<expr pos:start="227:9" pos:end="227:15"><name pos:start="227:9" pos:end="227:11">ret</name> <operator pos:start="227:13" pos:end="227:13">&lt;</operator> <literal type="number" pos:start="227:15" pos:end="227:15">0</literal></expr>)</condition> <block pos:start="227:18" pos:end="231:5">{<block_content pos:start="229:9" pos:end="229:18">

        <goto pos:start="229:9" pos:end="229:18">goto <name pos:start="229:14" pos:end="229:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:15"><expr pos:start="233:5" pos:end="233:14"><name pos:start="233:5" pos:end="233:7">buf</name> <operator pos:start="233:9" pos:end="233:10">+=</operator> <name pos:start="233:12" pos:end="233:14">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:18"><expr pos:start="235:5" pos:end="235:17"><name pos:start="235:5" pos:end="235:10">buflen</name> <operator pos:start="235:12" pos:end="235:13">-=</operator> <name pos:start="235:15" pos:end="235:17">ret</name></expr>;</expr_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:40">/* Keep unknown header extensions */</comment>

    <macro pos:start="241:5" pos:end="241:53"><name pos:start="241:5" pos:end="241:17">QLIST_FOREACH</name><argument_list pos:start="241:18" pos:end="241:53">(<argument pos:start="241:19" pos:end="241:22">uext</argument>, <argument pos:start="241:25" pos:end="241:46">&amp;s-&gt;unknown_header_ext</argument>, <argument pos:start="241:49" pos:end="241:52">next</argument>)</argument_list></macro> <block pos:start="241:55" pos:end="257:5">{<block_content pos:start="243:9" pos:end="255:22">

        <expr_stmt pos:start="243:9" pos:end="243:78"><expr pos:start="243:9" pos:end="243:77"><name pos:start="243:9" pos:end="243:11">ret</name> <operator pos:start="243:13" pos:end="243:13">=</operator> <call pos:start="243:15" pos:end="243:77"><name pos:start="243:15" pos:end="243:28">header_ext_add</name><argument_list pos:start="243:29" pos:end="243:77">(<argument pos:start="243:30" pos:end="243:32"><expr pos:start="243:30" pos:end="243:32"><name pos:start="243:30" pos:end="243:32">buf</name></expr></argument>, <argument pos:start="243:35" pos:end="243:45"><expr pos:start="243:35" pos:end="243:45"><name pos:start="243:35" pos:end="243:45"><name pos:start="243:35" pos:end="243:38">uext</name><operator pos:start="243:39" pos:end="243:40">-&gt;</operator><name pos:start="243:41" pos:end="243:45">magic</name></name></expr></argument>, <argument pos:start="243:48" pos:end="243:57"><expr pos:start="243:48" pos:end="243:57"><name pos:start="243:48" pos:end="243:57"><name pos:start="243:48" pos:end="243:51">uext</name><operator pos:start="243:52" pos:end="243:53">-&gt;</operator><name pos:start="243:54" pos:end="243:57">data</name></name></expr></argument>, <argument pos:start="243:60" pos:end="243:68"><expr pos:start="243:60" pos:end="243:68"><name pos:start="243:60" pos:end="243:68"><name pos:start="243:60" pos:end="243:63">uext</name><operator pos:start="243:64" pos:end="243:65">-&gt;</operator><name pos:start="243:66" pos:end="243:68">len</name></name></expr></argument>, <argument pos:start="243:71" pos:end="243:76"><expr pos:start="243:71" pos:end="243:76"><name pos:start="243:71" pos:end="243:76">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="245:9" pos:end="249:9"><if pos:start="245:9" pos:end="249:9">if <condition pos:start="245:12" pos:end="245:20">(<expr pos:start="245:13" pos:end="245:19"><name pos:start="245:13" pos:end="245:15">ret</name> <operator pos:start="245:17" pos:end="245:17">&lt;</operator> <literal type="number" pos:start="245:19" pos:end="245:19">0</literal></expr>)</condition> <block pos:start="245:22" pos:end="249:9">{<block_content pos:start="247:13" pos:end="247:22">

            <goto pos:start="247:13" pos:end="247:22">goto <name pos:start="247:18" pos:end="247:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="253:9" pos:end="253:19"><expr pos:start="253:9" pos:end="253:18"><name pos:start="253:9" pos:end="253:11">buf</name> <operator pos:start="253:13" pos:end="253:14">+=</operator> <name pos:start="253:16" pos:end="253:18">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="255:9" pos:end="255:22"><expr pos:start="255:9" pos:end="255:21"><name pos:start="255:9" pos:end="255:14">buflen</name> <operator pos:start="255:16" pos:end="255:17">-=</operator> <name pos:start="255:19" pos:end="255:21">ret</name></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="261:5" pos:end="261:34">/* End of header extensions */</comment>

    <expr_stmt pos:start="263:5" pos:end="263:68"><expr pos:start="263:5" pos:end="263:67"><name pos:start="263:5" pos:end="263:7">ret</name> <operator pos:start="263:9" pos:end="263:9">=</operator> <call pos:start="263:11" pos:end="263:67"><name pos:start="263:11" pos:end="263:24">header_ext_add</name><argument_list pos:start="263:25" pos:end="263:67">(<argument pos:start="263:26" pos:end="263:28"><expr pos:start="263:26" pos:end="263:28"><name pos:start="263:26" pos:end="263:28">buf</name></expr></argument>, <argument pos:start="263:31" pos:end="263:49"><expr pos:start="263:31" pos:end="263:49"><name pos:start="263:31" pos:end="263:49">QCOW2_EXT_MAGIC_END</name></expr></argument>, <argument pos:start="263:52" pos:end="263:55"><expr pos:start="263:52" pos:end="263:55"><name pos:start="263:52" pos:end="263:55">NULL</name></expr></argument>, <argument pos:start="263:58" pos:end="263:58"><expr pos:start="263:58" pos:end="263:58"><literal type="number" pos:start="263:58" pos:end="263:58">0</literal></expr></argument>, <argument pos:start="263:61" pos:end="263:66"><expr pos:start="263:61" pos:end="263:66"><name pos:start="263:61" pos:end="263:66">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="265:5" pos:end="269:5"><if pos:start="265:5" pos:end="269:5">if <condition pos:start="265:8" pos:end="265:16">(<expr pos:start="265:9" pos:end="265:15"><name pos:start="265:9" pos:end="265:11">ret</name> <operator pos:start="265:13" pos:end="265:13">&lt;</operator> <literal type="number" pos:start="265:15" pos:end="265:15">0</literal></expr>)</condition> <block pos:start="265:18" pos:end="269:5">{<block_content pos:start="267:9" pos:end="267:18">

        <goto pos:start="267:9" pos:end="267:18">goto <name pos:start="267:14" pos:end="267:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="273:5" pos:end="273:15"><expr pos:start="273:5" pos:end="273:14"><name pos:start="273:5" pos:end="273:7">buf</name> <operator pos:start="273:9" pos:end="273:10">+=</operator> <name pos:start="273:12" pos:end="273:14">ret</name></expr>;</expr_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:18"><expr pos:start="275:5" pos:end="275:17"><name pos:start="275:5" pos:end="275:10">buflen</name> <operator pos:start="275:12" pos:end="275:13">-=</operator> <name pos:start="275:15" pos:end="275:17">ret</name></expr>;</expr_stmt>



    <comment type="block" pos:start="279:5" pos:end="279:27">/* Backing file name */</comment>

    <if_stmt pos:start="281:5" pos:end="307:5"><if pos:start="281:5" pos:end="307:5">if <condition pos:start="281:8" pos:end="281:26">(<expr pos:start="281:9" pos:end="281:25"><operator pos:start="281:9" pos:end="281:9">*</operator><name pos:start="281:10" pos:end="281:25"><name pos:start="281:10" pos:end="281:11">bs</name><operator pos:start="281:12" pos:end="281:13">-&gt;</operator><name pos:start="281:14" pos:end="281:25">backing_file</name></name></expr>)</condition> <block pos:start="281:28" pos:end="307:5">{<block_content pos:start="283:9" pos:end="305:68">

        <decl_stmt pos:start="283:9" pos:end="283:59"><decl pos:start="283:9" pos:end="283:58"><type pos:start="283:9" pos:end="283:14"><name pos:start="283:9" pos:end="283:14">size_t</name></type> <name pos:start="283:16" pos:end="283:31">backing_file_len</name> <init pos:start="283:33" pos:end="283:58">= <expr pos:start="283:35" pos:end="283:58"><call pos:start="283:35" pos:end="283:58"><name pos:start="283:35" pos:end="283:40">strlen</name><argument_list pos:start="283:41" pos:end="283:58">(<argument pos:start="283:42" pos:end="283:57"><expr pos:start="283:42" pos:end="283:57"><name pos:start="283:42" pos:end="283:57"><name pos:start="283:42" pos:end="283:43">bs</name><operator pos:start="283:44" pos:end="283:45">-&gt;</operator><name pos:start="283:46" pos:end="283:57">backing_file</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="287:9" pos:end="293:9"><if pos:start="287:9" pos:end="293:9">if <condition pos:start="287:12" pos:end="287:38">(<expr pos:start="287:13" pos:end="287:37"><name pos:start="287:13" pos:end="287:18">buflen</name> <operator pos:start="287:20" pos:end="287:20">&lt;</operator> <name pos:start="287:22" pos:end="287:37">backing_file_len</name></expr>)</condition> <block pos:start="287:40" pos:end="293:9">{<block_content pos:start="289:13" pos:end="291:22">

            <expr_stmt pos:start="289:13" pos:end="289:26"><expr pos:start="289:13" pos:end="289:25"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">=</operator> <operator pos:start="289:19" pos:end="289:19">-</operator><name pos:start="289:20" pos:end="289:25">ENOSPC</name></expr>;</expr_stmt>

            <goto pos:start="291:13" pos:end="291:22">goto <name pos:start="291:18" pos:end="291:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="297:9" pos:end="297:72">/* Using strncpy is ok here, since buf is not NUL-terminated. */</comment>

        <expr_stmt pos:start="299:9" pos:end="299:47"><expr pos:start="299:9" pos:end="299:46"><call pos:start="299:9" pos:end="299:46"><name pos:start="299:9" pos:end="299:15">strncpy</name><argument_list pos:start="299:16" pos:end="299:46">(<argument pos:start="299:17" pos:end="299:19"><expr pos:start="299:17" pos:end="299:19"><name pos:start="299:17" pos:end="299:19">buf</name></expr></argument>, <argument pos:start="299:22" pos:end="299:37"><expr pos:start="299:22" pos:end="299:37"><name pos:start="299:22" pos:end="299:37"><name pos:start="299:22" pos:end="299:23">bs</name><operator pos:start="299:24" pos:end="299:25">-&gt;</operator><name pos:start="299:26" pos:end="299:37">backing_file</name></name></expr></argument>, <argument pos:start="299:40" pos:end="299:45"><expr pos:start="299:40" pos:end="299:45"><name pos:start="299:40" pos:end="299:45">buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="303:9" pos:end="303:74"><expr pos:start="303:9" pos:end="303:73"><name pos:start="303:9" pos:end="303:35"><name pos:start="303:9" pos:end="303:14">header</name><operator pos:start="303:15" pos:end="303:16">-&gt;</operator><name pos:start="303:17" pos:end="303:35">backing_file_offset</name></name> <operator pos:start="303:37" pos:end="303:37">=</operator> <call pos:start="303:39" pos:end="303:73"><name pos:start="303:39" pos:end="303:49">cpu_to_be64</name><argument_list pos:start="303:50" pos:end="303:73">(<argument pos:start="303:51" pos:end="303:72"><expr pos:start="303:51" pos:end="303:72"><name pos:start="303:51" pos:end="303:53">buf</name> <operator pos:start="303:55" pos:end="303:55">-</operator> <operator pos:start="303:57" pos:end="303:57">(</operator><operator pos:start="303:58" pos:end="303:58">(</operator><name pos:start="303:59" pos:end="303:62">char</name><operator pos:start="303:63" pos:end="303:63">*</operator><operator pos:start="303:64" pos:end="303:64">)</operator> <name pos:start="303:66" pos:end="303:71">header</name><operator pos:start="303:72" pos:end="303:72">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="305:9" pos:end="305:68"><expr pos:start="305:9" pos:end="305:67"><name pos:start="305:9" pos:end="305:33"><name pos:start="305:9" pos:end="305:14">header</name><operator pos:start="305:15" pos:end="305:16">-&gt;</operator><name pos:start="305:17" pos:end="305:33">backing_file_size</name></name>   <operator pos:start="305:37" pos:end="305:37">=</operator> <call pos:start="305:39" pos:end="305:67"><name pos:start="305:39" pos:end="305:49">cpu_to_be32</name><argument_list pos:start="305:50" pos:end="305:67">(<argument pos:start="305:51" pos:end="305:66"><expr pos:start="305:51" pos:end="305:66"><name pos:start="305:51" pos:end="305:66">backing_file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="311:5" pos:end="311:30">/* Write the new header */</comment>

    <expr_stmt pos:start="313:5" pos:end="313:60"><expr pos:start="313:5" pos:end="313:59"><name pos:start="313:5" pos:end="313:7">ret</name> <operator pos:start="313:9" pos:end="313:9">=</operator> <call pos:start="313:11" pos:end="313:59"><name pos:start="313:11" pos:end="313:21">bdrv_pwrite</name><argument_list pos:start="313:22" pos:end="313:59">(<argument pos:start="313:23" pos:end="313:30"><expr pos:start="313:23" pos:end="313:30"><name pos:start="313:23" pos:end="313:30"><name pos:start="313:23" pos:end="313:24">bs</name><operator pos:start="313:25" pos:end="313:26">-&gt;</operator><name pos:start="313:27" pos:end="313:30">file</name></name></expr></argument>, <argument pos:start="313:33" pos:end="313:33"><expr pos:start="313:33" pos:end="313:33"><literal type="number" pos:start="313:33" pos:end="313:33">0</literal></expr></argument>, <argument pos:start="313:36" pos:end="313:41"><expr pos:start="313:36" pos:end="313:41"><name pos:start="313:36" pos:end="313:41">header</name></expr></argument>, <argument pos:start="313:44" pos:end="313:58"><expr pos:start="313:44" pos:end="313:58"><name pos:start="313:44" pos:end="313:58"><name pos:start="313:44" pos:end="313:44">s</name><operator pos:start="313:45" pos:end="313:46">-&gt;</operator><name pos:start="313:47" pos:end="313:58">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="315:5" pos:end="319:5"><if pos:start="315:5" pos:end="319:5">if <condition pos:start="315:8" pos:end="315:16">(<expr pos:start="315:9" pos:end="315:15"><name pos:start="315:9" pos:end="315:11">ret</name> <operator pos:start="315:13" pos:end="315:13">&lt;</operator> <literal type="number" pos:start="315:15" pos:end="315:15">0</literal></expr>)</condition> <block pos:start="315:18" pos:end="319:5">{<block_content pos:start="317:9" pos:end="317:18">

        <goto pos:start="317:9" pos:end="317:18">goto <name pos:start="317:14" pos:end="317:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="323:5" pos:end="323:12"><expr pos:start="323:5" pos:end="323:11"><name pos:start="323:5" pos:end="323:7">ret</name> <operator pos:start="323:9" pos:end="323:9">=</operator> <literal type="number" pos:start="323:11" pos:end="323:11">0</literal></expr>;</expr_stmt>

<label pos:start="325:1" pos:end="325:5"><name pos:start="325:1" pos:end="325:4">fail</name>:</label>

    <expr_stmt pos:start="327:5" pos:end="327:23"><expr pos:start="327:5" pos:end="327:22"><call pos:start="327:5" pos:end="327:22"><name pos:start="327:5" pos:end="327:14">qemu_vfree</name><argument_list pos:start="327:15" pos:end="327:22">(<argument pos:start="327:16" pos:end="327:21"><expr pos:start="327:16" pos:end="327:21"><name pos:start="327:16" pos:end="327:21">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="329:5" pos:end="329:15">return <expr pos:start="329:12" pos:end="329:14"><name pos:start="329:12" pos:end="329:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
