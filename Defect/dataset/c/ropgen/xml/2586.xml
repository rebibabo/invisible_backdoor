<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2586.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">backup_start</name><parameter_list pos:start="1:18" pos:end="11:31">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:34">BlockDriverState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">bs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:64"><decl pos:start="1:41" pos:end="1:64"><type pos:start="1:41" pos:end="1:64"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">target</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:31"><decl pos:start="3:19" pos:end="3:31"><type pos:start="3:19" pos:end="3:31"><name pos:start="3:19" pos:end="3:25">int64_t</name></type> <name pos:start="3:27" pos:end="3:31">speed</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:49"><decl pos:start="5:19" pos:end="5:49"><type pos:start="5:19" pos:end="5:49"><name pos:start="5:19" pos:end="5:33">BlockdevOnError</name></type> <name pos:start="5:35" pos:end="5:49">on_source_error</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:49"><decl pos:start="7:19" pos:end="7:49"><type pos:start="7:19" pos:end="7:49"><name pos:start="7:19" pos:end="7:33">BlockdevOnError</name></type> <name pos:start="7:35" pos:end="7:49">on_target_error</name></decl></parameter>,

                  <parameter pos:start="9:19" pos:end="9:47"><decl pos:start="9:19" pos:end="9:47"><type pos:start="9:19" pos:end="9:47"><name pos:start="9:19" pos:end="9:43">BlockDriverCompletionFunc</name> <modifier pos:start="9:45" pos:end="9:45">*</modifier></type><name pos:start="9:46" pos:end="9:47">cb</name></decl></parameter>, <parameter pos:start="9:50" pos:end="9:61"><decl pos:start="9:50" pos:end="9:61"><type pos:start="9:50" pos:end="9:61"><name pos:start="9:50" pos:end="9:53">void</name> <modifier pos:start="9:55" pos:end="9:55">*</modifier></type><name pos:start="9:56" pos:end="9:61">opaque</name></decl></parameter>,

                  <parameter pos:start="11:19" pos:end="11:30"><decl pos:start="11:19" pos:end="11:30"><type pos:start="11:19" pos:end="11:30"><name pos:start="11:19" pos:end="11:23">Error</name> <modifier pos:start="11:25" pos:end="11:25">*</modifier><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:30">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="79:1">{<block_content pos:start="15:5" pos:end="77:46">

    <decl_stmt pos:start="15:5" pos:end="15:16"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:15">len</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:15"><expr pos:start="19:5" pos:end="19:14"><call pos:start="19:5" pos:end="19:14"><name pos:start="19:5" pos:end="19:10">assert</name><argument_list pos:start="19:11" pos:end="19:14">(<argument pos:start="19:12" pos:end="19:13"><expr pos:start="19:12" pos:end="19:13"><name pos:start="19:12" pos:end="19:13">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:19"><expr pos:start="21:5" pos:end="21:18"><call pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:18">(<argument pos:start="21:12" pos:end="21:17"><expr pos:start="21:12" pos:end="21:17"><name pos:start="21:12" pos:end="21:17">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:15"><expr pos:start="23:5" pos:end="23:14"><call pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:14">(<argument pos:start="23:12" pos:end="23:13"><expr pos:start="23:12" pos:end="23:13"><name pos:start="23:12" pos:end="23:13">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="31:38">(<expr pos:start="27:9" pos:end="31:37"><operator pos:start="27:9" pos:end="27:9">(</operator><name pos:start="27:10" pos:end="27:24">on_source_error</name> <operator pos:start="27:26" pos:end="27:27">==</operator> <name pos:start="27:29" pos:end="27:50">BLOCKDEV_ON_ERROR_STOP</name> <operator pos:start="27:52" pos:end="27:53">||</operator>

         <name pos:start="29:10" pos:end="29:24">on_source_error</name> <operator pos:start="29:26" pos:end="29:27">==</operator> <name pos:start="29:29" pos:end="29:52">BLOCKDEV_ON_ERROR_ENOSPC</name><operator pos:start="29:53" pos:end="29:53">)</operator> <operator pos:start="29:55" pos:end="29:56">&amp;&amp;</operator>

        <operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:37"><name pos:start="31:10" pos:end="31:33">bdrv_iostatus_is_enabled</name><argument_list pos:start="31:34" pos:end="31:37">(<argument pos:start="31:35" pos:end="31:36"><expr pos:start="31:35" pos:end="31:36"><name pos:start="31:35" pos:end="31:36">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:40" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:15">

        <expr_stmt pos:start="33:9" pos:end="33:67"><expr pos:start="33:9" pos:end="33:66"><call pos:start="33:9" pos:end="33:66"><name pos:start="33:9" pos:end="33:17">error_set</name><argument_list pos:start="33:18" pos:end="33:66">(<argument pos:start="33:19" pos:end="33:22"><expr pos:start="33:19" pos:end="33:22"><name pos:start="33:19" pos:end="33:22">errp</name></expr></argument>, <argument pos:start="33:25" pos:end="33:46"><expr pos:start="33:25" pos:end="33:46"><name pos:start="33:25" pos:end="33:46">QERR_INVALID_PARAMETER</name></expr></argument>, <argument pos:start="33:49" pos:end="33:65"><expr pos:start="33:49" pos:end="33:65"><literal type="string" pos:start="33:49" pos:end="33:65">"on-source-error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:7">len</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:28"><name pos:start="41:11" pos:end="41:24">bdrv_getlength</name><argument_list pos:start="41:25" pos:end="41:28">(<argument pos:start="41:26" pos:end="41:27"><expr pos:start="41:26" pos:end="41:27"><name pos:start="41:26" pos:end="41:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">len</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:15">

        <expr_stmt pos:start="45:9" pos:end="47:51"><expr pos:start="45:9" pos:end="47:50"><call pos:start="45:9" pos:end="47:50"><name pos:start="45:9" pos:end="45:24">error_setg_errno</name><argument_list pos:start="45:25" pos:end="47:50">(<argument pos:start="45:26" pos:end="45:29"><expr pos:start="45:26" pos:end="45:29"><name pos:start="45:26" pos:end="45:29">errp</name></expr></argument>, <argument pos:start="45:32" pos:end="45:35"><expr pos:start="45:32" pos:end="45:35"><operator pos:start="45:32" pos:end="45:32">-</operator><name pos:start="45:33" pos:end="45:35">len</name></expr></argument>, <argument pos:start="45:38" pos:end="45:68"><expr pos:start="45:38" pos:end="45:68"><literal type="string" pos:start="45:38" pos:end="45:68">"unable to get length for '%s'"</literal></expr></argument>,

                         <argument pos:start="47:26" pos:end="47:49"><expr pos:start="47:26" pos:end="47:49"><call pos:start="47:26" pos:end="47:49"><name pos:start="47:26" pos:end="47:45">bdrv_get_device_name</name><argument_list pos:start="47:46" pos:end="47:49">(<argument pos:start="47:47" pos:end="47:48"><expr pos:start="47:47" pos:end="47:48"><name pos:start="47:47" pos:end="47:48">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="55:5" pos:end="57:61"><decl pos:start="55:5" pos:end="57:60"><type pos:start="55:5" pos:end="55:20"><name pos:start="55:5" pos:end="55:18">BackupBlockJob</name> <modifier pos:start="55:20" pos:end="55:20">*</modifier></type><name pos:start="55:21" pos:end="55:23">job</name> <init pos:start="55:25" pos:end="57:60">= <expr pos:start="55:27" pos:end="57:60"><call pos:start="55:27" pos:end="57:60"><name pos:start="55:27" pos:end="55:42">block_job_create</name><argument_list pos:start="55:43" pos:end="57:60">(<argument pos:start="55:44" pos:end="55:59"><expr pos:start="55:44" pos:end="55:59"><operator pos:start="55:44" pos:end="55:44">&amp;</operator><name pos:start="55:45" pos:end="55:59">backup_job_type</name></expr></argument>, <argument pos:start="55:62" pos:end="55:63"><expr pos:start="55:62" pos:end="55:63"><name pos:start="55:62" pos:end="55:63">bs</name></expr></argument>, <argument pos:start="55:66" pos:end="55:70"><expr pos:start="55:66" pos:end="55:70"><name pos:start="55:66" pos:end="55:70">speed</name></expr></argument>,

                                           <argument pos:start="57:44" pos:end="57:45"><expr pos:start="57:44" pos:end="57:45"><name pos:start="57:44" pos:end="57:45">cb</name></expr></argument>, <argument pos:start="57:48" pos:end="57:53"><expr pos:start="57:48" pos:end="57:53"><name pos:start="57:48" pos:end="57:53">opaque</name></expr></argument>, <argument pos:start="57:56" pos:end="57:59"><expr pos:start="57:56" pos:end="57:59"><name pos:start="57:56" pos:end="57:59">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:13">(<expr pos:start="59:9" pos:end="59:12"><operator pos:start="59:9" pos:end="59:9">!</operator><name pos:start="59:10" pos:end="59:12">job</name></expr>)</condition> <block pos:start="59:15" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:15">

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:43"><expr pos:start="67:5" pos:end="67:42"><name pos:start="67:5" pos:end="67:24"><name pos:start="67:5" pos:end="67:7">job</name><operator pos:start="67:8" pos:end="67:9">-&gt;</operator><name pos:start="67:10" pos:end="67:24">on_source_error</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <name pos:start="67:28" pos:end="67:42">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:43"><expr pos:start="69:5" pos:end="69:42"><name pos:start="69:5" pos:end="69:24"><name pos:start="69:5" pos:end="69:7">job</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:24">on_target_error</name></name> <operator pos:start="69:26" pos:end="69:26">=</operator> <name pos:start="69:28" pos:end="69:42">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:25"><expr pos:start="71:5" pos:end="71:24"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:7">job</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:15">target</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:24">target</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:26"><expr pos:start="73:5" pos:end="73:25"><name pos:start="73:5" pos:end="73:19"><name pos:start="73:5" pos:end="73:7">job</name><operator pos:start="73:8" pos:end="73:9">-&gt;</operator><name pos:start="73:10" pos:end="73:15">common</name><operator pos:start="73:16" pos:end="73:16">.</operator><name pos:start="73:17" pos:end="73:19">len</name></name> <operator pos:start="73:21" pos:end="73:21">=</operator> <name pos:start="73:23" pos:end="73:25">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:55"><expr pos:start="75:5" pos:end="75:54"><name pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:7">job</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:15">common</name><operator pos:start="75:16" pos:end="75:16">.</operator><name pos:start="75:17" pos:end="75:18">co</name></name> <operator pos:start="75:20" pos:end="75:20">=</operator> <call pos:start="75:22" pos:end="75:54"><name pos:start="75:22" pos:end="75:42">qemu_coroutine_create</name><argument_list pos:start="75:43" pos:end="75:54">(<argument pos:start="75:44" pos:end="75:53"><expr pos:start="75:44" pos:end="75:53"><name pos:start="75:44" pos:end="75:53">backup_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:46"><expr pos:start="77:5" pos:end="77:45"><call pos:start="77:5" pos:end="77:45"><name pos:start="77:5" pos:end="77:24">qemu_coroutine_enter</name><argument_list pos:start="77:25" pos:end="77:45">(<argument pos:start="77:26" pos:end="77:39"><expr pos:start="77:26" pos:end="77:39"><name pos:start="77:26" pos:end="77:39"><name pos:start="77:26" pos:end="77:28">job</name><operator pos:start="77:29" pos:end="77:30">-&gt;</operator><name pos:start="77:31" pos:end="77:36">common</name><operator pos:start="77:37" pos:end="77:37">.</operator><name pos:start="77:38" pos:end="77:39">co</name></name></expr></argument>, <argument pos:start="77:42" pos:end="77:44"><expr pos:start="77:42" pos:end="77:44"><name pos:start="77:42" pos:end="77:44">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
