<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11345.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:43">scsi_target_emulate_report_luns</name><parameter_list pos:start="1:44" pos:end="1:61">(<parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:59"><name pos:start="1:45" pos:end="1:57">SCSITargetReq</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">r</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:16">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">BusChild</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">kid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">len</name></decl>, <decl pos:start="7:17" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:17">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:15">channel</name></decl>, <decl pos:start="9:18" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:18" pos:end="9:19">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:19">found_lun0</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:29">(<expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:9">r</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:14">req</name><operator pos:start="15:15" pos:end="15:15">.</operator><name pos:start="15:16" pos:end="15:18">cmd</name><operator pos:start="15:19" pos:end="15:19">.</operator><name pos:start="15:20" pos:end="15:23">xfer</name></name> <operator pos:start="15:25" pos:end="15:25">&lt;</operator> <literal type="number" pos:start="15:27" pos:end="15:28">16</literal></expr>)</condition> <block pos:start="15:31" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:21">

        <return pos:start="17:9" pos:end="17:21">return <expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:30">(<expr pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:25"><name pos:start="21:9" pos:end="21:9">r</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">req</name><operator pos:start="21:15" pos:end="21:15">.</operator><name pos:start="21:16" pos:end="21:18">cmd</name><operator pos:start="21:19" pos:end="21:19">.</operator><name pos:start="21:20" pos:end="21:22">buf</name><index pos:start="21:23" pos:end="21:25">[<expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">2</literal></expr>]</index></name> <operator pos:start="21:27" pos:end="21:27">&gt;</operator> <literal type="number" pos:start="21:29" pos:end="21:29">2</literal></expr>)</condition> <block pos:start="21:32" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:21">

        <return pos:start="23:9" pos:end="23:21">return <expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:11">channel</name> <operator pos:start="27:13" pos:end="27:13">=</operator> <name pos:start="27:15" pos:end="27:33"><name pos:start="27:15" pos:end="27:15">r</name><operator pos:start="27:16" pos:end="27:17">-&gt;</operator><name pos:start="27:18" pos:end="27:20">req</name><operator pos:start="27:21" pos:end="27:21">.</operator><name pos:start="27:22" pos:end="27:24">dev</name><operator pos:start="27:25" pos:end="27:26">-&gt;</operator><name pos:start="27:27" pos:end="27:33">channel</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:6">id</name> <operator pos:start="29:8" pos:end="29:8">=</operator> <name pos:start="29:10" pos:end="29:23"><name pos:start="29:10" pos:end="29:10">r</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:15">req</name><operator pos:start="29:16" pos:end="29:16">.</operator><name pos:start="29:17" pos:end="29:19">dev</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:23">id</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:23"><expr pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:14">found_lun0</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:22">false</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:10"><expr pos:start="33:5" pos:end="33:9"><name pos:start="33:5" pos:end="33:5">n</name> <operator pos:start="33:7" pos:end="33:7">=</operator> <literal type="number" pos:start="33:9" pos:end="33:9">0</literal></expr>;</expr_stmt>

    <macro pos:start="35:5" pos:end="35:60"><name pos:start="35:5" pos:end="35:18">QTAILQ_FOREACH</name><argument_list pos:start="35:19" pos:end="35:60">(<argument pos:start="35:20" pos:end="35:22">kid</argument>, <argument pos:start="35:25" pos:end="35:50">&amp;r-&gt;req.bus-&gt;qbus.children</argument>, <argument pos:start="35:53" pos:end="35:59">sibling</argument>)</argument_list></macro> <block pos:start="35:62" pos:end="55:5">{<block_content pos:start="37:9" pos:end="53:9">

        <decl_stmt pos:start="37:9" pos:end="37:39"><decl pos:start="37:9" pos:end="37:38"><type pos:start="37:9" pos:end="37:21"><name pos:start="37:9" pos:end="37:19">DeviceState</name> <modifier pos:start="37:21" pos:end="37:21">*</modifier></type><name pos:start="37:22" pos:end="37:25">qdev</name> <init pos:start="37:27" pos:end="37:38">= <expr pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:38"><name pos:start="37:29" pos:end="37:31">kid</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:38">child</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:44"><decl pos:start="39:9" pos:end="39:43"><type pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:18">SCSIDevice</name> <modifier pos:start="39:20" pos:end="39:20">*</modifier></type><name pos:start="39:21" pos:end="39:23">dev</name> <init pos:start="39:25" pos:end="39:43">= <expr pos:start="39:27" pos:end="39:43"><call pos:start="39:27" pos:end="39:43"><name pos:start="39:27" pos:end="39:37">SCSI_DEVICE</name><argument_list pos:start="39:38" pos:end="39:43">(<argument pos:start="39:39" pos:end="39:42"><expr pos:start="39:39" pos:end="39:42"><name pos:start="39:39" pos:end="39:42">qdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="43:9" pos:end="53:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:53">(<expr pos:start="43:13" pos:end="43:52"><name pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:15">dev</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:24">channel</name></name> <operator pos:start="43:26" pos:end="43:27">==</operator> <name pos:start="43:29" pos:end="43:35">channel</name> <operator pos:start="43:37" pos:end="43:38">&amp;&amp;</operator> <name pos:start="43:40" pos:end="43:46"><name pos:start="43:40" pos:end="43:42">dev</name><operator pos:start="43:43" pos:end="43:44">-&gt;</operator><name pos:start="43:45" pos:end="43:46">id</name></name> <operator pos:start="43:48" pos:end="43:49">==</operator> <name pos:start="43:51" pos:end="43:52">id</name></expr>)</condition> <block pos:start="43:55" pos:end="53:9">{<block_content pos:start="45:13" pos:end="51:19">

            <if_stmt pos:start="45:13" pos:end="49:13"><if pos:start="45:13" pos:end="49:13">if <condition pos:start="45:16" pos:end="45:30">(<expr pos:start="45:17" pos:end="45:29"><name pos:start="45:17" pos:end="45:24"><name pos:start="45:17" pos:end="45:19">dev</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:24">lun</name></name> <operator pos:start="45:26" pos:end="45:27">==</operator> <literal type="number" pos:start="45:29" pos:end="45:29">0</literal></expr>)</condition> <block pos:start="45:32" pos:end="49:13">{<block_content pos:start="47:17" pos:end="47:34">

                <expr_stmt pos:start="47:17" pos:end="47:34"><expr pos:start="47:17" pos:end="47:33"><name pos:start="47:17" pos:end="47:26">found_lun0</name> <operator pos:start="47:28" pos:end="47:28">=</operator> <name pos:start="47:30" pos:end="47:33">true</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:19"><expr pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:13">n</name> <operator pos:start="51:15" pos:end="51:16">+=</operator> <literal type="number" pos:start="51:18" pos:end="51:18">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:19">found_lun0</name></expr>)</condition> <block pos:start="57:22" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:15">

        <expr_stmt pos:start="59:9" pos:end="59:15"><expr pos:start="59:9" pos:end="59:14"><name pos:start="59:9" pos:end="59:9">n</name> <operator pos:start="59:11" pos:end="59:12">+=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">8</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:43"><expr pos:start="63:5" pos:end="63:42"><name pos:start="63:5" pos:end="63:7">len</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:42"><name pos:start="63:11" pos:end="63:13">MIN</name><argument_list pos:start="63:14" pos:end="63:42">(<argument pos:start="63:15" pos:end="63:19"><expr pos:start="63:15" pos:end="63:19"><name pos:start="63:15" pos:end="63:15">n</name> <operator pos:start="63:17" pos:end="63:17">+</operator> <literal type="number" pos:start="63:19" pos:end="63:19">8</literal></expr></argument>, <argument pos:start="63:22" pos:end="63:41"><expr pos:start="63:22" pos:end="63:41"><name pos:start="63:22" pos:end="63:36"><name pos:start="63:22" pos:end="63:22">r</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:27">req</name><operator pos:start="63:28" pos:end="63:28">.</operator><name pos:start="63:29" pos:end="63:31">cmd</name><operator pos:start="63:32" pos:end="63:32">.</operator><name pos:start="63:33" pos:end="63:36">xfer</name></name> <operator pos:start="63:38" pos:end="63:38">&amp;</operator> <operator pos:start="63:40" pos:end="63:40">~</operator><literal type="number" pos:start="63:41" pos:end="63:41">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="71:5"><if pos:start="65:5" pos:end="71:5">if <condition pos:start="65:8" pos:end="65:29">(<expr pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:11">len</name> <operator pos:start="65:13" pos:end="65:13">&gt;</operator> <sizeof pos:start="65:15" pos:end="65:28">sizeof<argument_list pos:start="65:21" pos:end="65:28">(<argument pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:27"><name pos:start="65:22" pos:end="65:22">r</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:27">buf</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="65:31" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:21">

        <comment type="block" pos:start="67:9" pos:end="67:31">/* TODO: &gt; 256 LUNs? */</comment>

        <return pos:start="69:9" pos:end="69:21">return <expr pos:start="69:16" pos:end="69:20"><name pos:start="69:16" pos:end="69:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:27"><expr pos:start="75:5" pos:end="75:26"><call pos:start="75:5" pos:end="75:26"><name pos:start="75:5" pos:end="75:10">memset</name><argument_list pos:start="75:11" pos:end="75:26">(<argument pos:start="75:12" pos:end="75:17"><expr pos:start="75:12" pos:end="75:17"><name pos:start="75:12" pos:end="75:17"><name pos:start="75:12" pos:end="75:12">r</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:17">buf</name></name></expr></argument>, <argument pos:start="75:20" pos:end="75:20"><expr pos:start="75:20" pos:end="75:20"><literal type="number" pos:start="75:20" pos:end="75:20">0</literal></expr></argument>, <argument pos:start="75:23" pos:end="75:25"><expr pos:start="75:23" pos:end="75:25"><name pos:start="75:23" pos:end="75:25">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:25"><expr pos:start="77:5" pos:end="77:24"><call pos:start="77:5" pos:end="77:24"><name pos:start="77:5" pos:end="77:12">stl_be_p</name><argument_list pos:start="77:13" pos:end="77:24">(<argument pos:start="77:14" pos:end="77:20"><expr pos:start="77:14" pos:end="77:20"><operator pos:start="77:14" pos:end="77:14">&amp;</operator><name pos:start="77:15" pos:end="77:20"><name pos:start="77:15" pos:end="77:15">r</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:20">buf</name></name></expr></argument>, <argument pos:start="77:23" pos:end="77:23"><expr pos:start="77:23" pos:end="77:23"><name pos:start="77:23" pos:end="77:23">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:28"><expr pos:start="79:5" pos:end="79:27"><name pos:start="79:5" pos:end="79:5">i</name> <operator pos:start="79:7" pos:end="79:7">=</operator> <ternary pos:start="79:9" pos:end="79:27"><condition pos:start="79:9" pos:end="79:20"><expr pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:18">found_lun0</name></expr> ?</condition><then pos:start="79:22" pos:end="79:22"> <expr pos:start="79:22" pos:end="79:22"><literal type="number" pos:start="79:22" pos:end="79:22">8</literal></expr> </then><else pos:start="79:24" pos:end="79:27">: <expr pos:start="79:26" pos:end="79:27"><literal type="number" pos:start="79:26" pos:end="79:27">16</literal></expr></else></ternary></expr>;</expr_stmt>

    <macro pos:start="81:5" pos:end="81:60"><name pos:start="81:5" pos:end="81:18">QTAILQ_FOREACH</name><argument_list pos:start="81:19" pos:end="81:60">(<argument pos:start="81:20" pos:end="81:22">kid</argument>, <argument pos:start="81:25" pos:end="81:50">&amp;r-&gt;req.bus-&gt;qbus.children</argument>, <argument pos:start="81:53" pos:end="81:59">sibling</argument>)</argument_list></macro> <block pos:start="81:62" pos:end="97:5">{<block_content pos:start="83:9" pos:end="95:9">

        <decl_stmt pos:start="83:9" pos:end="83:39"><decl pos:start="83:9" pos:end="83:38"><type pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:19">DeviceState</name> <modifier pos:start="83:21" pos:end="83:21">*</modifier></type><name pos:start="83:22" pos:end="83:25">qdev</name> <init pos:start="83:27" pos:end="83:38">= <expr pos:start="83:29" pos:end="83:38"><name pos:start="83:29" pos:end="83:38"><name pos:start="83:29" pos:end="83:31">kid</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:38">child</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="85:9" pos:end="85:44"><decl pos:start="85:9" pos:end="85:43"><type pos:start="85:9" pos:end="85:20"><name pos:start="85:9" pos:end="85:18">SCSIDevice</name> <modifier pos:start="85:20" pos:end="85:20">*</modifier></type><name pos:start="85:21" pos:end="85:23">dev</name> <init pos:start="85:25" pos:end="85:43">= <expr pos:start="85:27" pos:end="85:43"><call pos:start="85:27" pos:end="85:43"><name pos:start="85:27" pos:end="85:37">SCSI_DEVICE</name><argument_list pos:start="85:38" pos:end="85:43">(<argument pos:start="85:39" pos:end="85:42"><expr pos:start="85:39" pos:end="85:42"><name pos:start="85:39" pos:end="85:42">qdev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="89:9" pos:end="95:9"><if pos:start="89:9" pos:end="95:9">if <condition pos:start="89:12" pos:end="89:53">(<expr pos:start="89:13" pos:end="89:52"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:15">dev</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:24">channel</name></name> <operator pos:start="89:26" pos:end="89:27">==</operator> <name pos:start="89:29" pos:end="89:35">channel</name> <operator pos:start="89:37" pos:end="89:38">&amp;&amp;</operator> <name pos:start="89:40" pos:end="89:46"><name pos:start="89:40" pos:end="89:42">dev</name><operator pos:start="89:43" pos:end="89:44">-&gt;</operator><name pos:start="89:45" pos:end="89:46">id</name></name> <operator pos:start="89:48" pos:end="89:49">==</operator> <name pos:start="89:51" pos:end="89:52">id</name></expr>)</condition> <block pos:start="89:55" pos:end="95:9">{<block_content pos:start="91:13" pos:end="93:19">

            <expr_stmt pos:start="91:13" pos:end="91:44"><expr pos:start="91:13" pos:end="91:43"><call pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:21">store_lun</name><argument_list pos:start="91:22" pos:end="91:43">(<argument pos:start="91:23" pos:end="91:32"><expr pos:start="91:23" pos:end="91:32"><operator pos:start="91:23" pos:end="91:23">&amp;</operator><name pos:start="91:24" pos:end="91:32"><name pos:start="91:24" pos:end="91:24">r</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:29">buf</name><index pos:start="91:30" pos:end="91:32">[<expr pos:start="91:31" pos:end="91:31"><name pos:start="91:31" pos:end="91:31">i</name></expr>]</index></name></expr></argument>, <argument pos:start="91:35" pos:end="91:42"><expr pos:start="91:35" pos:end="91:42"><name pos:start="91:35" pos:end="91:42"><name pos:start="91:35" pos:end="91:37">dev</name><operator pos:start="91:38" pos:end="91:39">-&gt;</operator><name pos:start="91:40" pos:end="91:42">lun</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:19"><expr pos:start="93:13" pos:end="93:18"><name pos:start="93:13" pos:end="93:13">i</name> <operator pos:start="93:15" pos:end="93:16">+=</operator> <literal type="number" pos:start="93:18" pos:end="93:18">8</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>

    <expr_stmt pos:start="99:5" pos:end="99:23"><expr pos:start="99:5" pos:end="99:22"><call pos:start="99:5" pos:end="99:22"><name pos:start="99:5" pos:end="99:10">assert</name><argument_list pos:start="99:11" pos:end="99:22">(<argument pos:start="99:12" pos:end="99:21"><expr pos:start="99:12" pos:end="99:21"><name pos:start="99:12" pos:end="99:12">i</name> <operator pos:start="99:14" pos:end="99:15">==</operator> <name pos:start="99:17" pos:end="99:17">n</name> <operator pos:start="99:19" pos:end="99:19">+</operator> <literal type="number" pos:start="99:21" pos:end="99:21">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:17"><expr pos:start="101:5" pos:end="101:16"><name pos:start="101:5" pos:end="101:10"><name pos:start="101:5" pos:end="101:5">r</name><operator pos:start="101:6" pos:end="101:7">-&gt;</operator><name pos:start="101:8" pos:end="101:10">len</name></name> <operator pos:start="101:12" pos:end="101:12">=</operator> <name pos:start="101:14" pos:end="101:16">len</name></expr>;</expr_stmt>

    <return pos:start="103:5" pos:end="103:16">return <expr pos:start="103:12" pos:end="103:15"><name pos:start="103:12" pos:end="103:15">true</name></expr>;</return>

</block_content>}</block></function>
</unit>
