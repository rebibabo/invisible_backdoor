<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17557.c" pos:tabs="8"><function pos:start="1:1" pos:end="495:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">mp_decode_layer3</name><parameter_list pos:start="1:28" pos:end="1:48">(<parameter pos:start="1:29" pos:end="1:47"><decl pos:start="1:29" pos:end="1:47"><type pos:start="1:29" pos:end="1:46"><name pos:start="1:29" pos:end="1:44">MPADecodeContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="495:1">{<block_content pos:start="5:5" pos:end="493:28">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:19">nb_granules</name></decl>, <decl pos:start="5:22" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:36">main_data_begin</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:10">gr</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:13" pos:end="7:14">ch</name></decl>, <decl pos:start="7:17" pos:end="7:31"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:31">blocksplit_flag</name></decl>, <decl pos:start="7:34" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:34" pos:end="7:34">i</name></decl>, <decl pos:start="7:37" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:37" pos:end="7:37">j</name></decl>, <decl pos:start="7:40" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:40">k</name></decl>, <decl pos:start="7:43" pos:end="7:43"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:43" pos:end="7:43">n</name></decl>, <decl pos:start="7:46" pos:end="7:53"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:46" pos:end="7:53">bits_pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">GranuleDef</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">g</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int16_t</name></type> <name pos:start="11:13" pos:end="11:26"><name pos:start="11:13" pos:end="11:21">exponents</name><index pos:start="11:22" pos:end="11:26">[<expr pos:start="11:23" pos:end="11:25"><literal type="number" pos:start="11:23" pos:end="11:25">576</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" pos:start="11:29" pos:end="11:48">//FIXME try INTFLOAT</comment>



    <comment type="block" pos:start="15:5" pos:end="15:24">/* read side info */</comment>

    <if_stmt pos:start="17:5" pos:end="47:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="17:15">(<expr pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:14"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:14">lsf</name></name></expr>)</condition> <block pos:start="17:17" pos:end="25:5">{<block_content pos:start="19:9" pos:end="23:24">

        <expr_stmt pos:start="19:9" pos:end="19:46"><expr pos:start="19:9" pos:end="19:45"><name pos:start="19:9" pos:end="19:23">main_data_begin</name> <operator pos:start="19:25" pos:end="19:25">=</operator> <call pos:start="19:27" pos:end="19:45"><name pos:start="19:27" pos:end="19:34">get_bits</name><argument_list pos:start="19:35" pos:end="19:45">(<argument pos:start="19:36" pos:end="19:41"><expr pos:start="19:36" pos:end="19:41"><operator pos:start="19:36" pos:end="19:36">&amp;</operator><name pos:start="19:37" pos:end="19:41"><name pos:start="19:37" pos:end="19:37">s</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:41">gb</name></name></expr></argument>, <argument pos:start="19:44" pos:end="19:44"><expr pos:start="19:44" pos:end="19:44"><literal type="number" pos:start="19:44" pos:end="19:44">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:42"><expr pos:start="21:9" pos:end="21:41"><call pos:start="21:9" pos:end="21:41"><name pos:start="21:9" pos:end="21:17">skip_bits</name><argument_list pos:start="21:18" pos:end="21:41">(<argument pos:start="21:19" pos:end="21:24"><expr pos:start="21:19" pos:end="21:24"><operator pos:start="21:19" pos:end="21:19">&amp;</operator><name pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:20">s</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:24">gb</name></name></expr></argument>, <argument pos:start="21:27" pos:end="21:40"><expr pos:start="21:27" pos:end="21:40"><name pos:start="21:27" pos:end="21:40"><name pos:start="21:27" pos:end="21:27">s</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:40">nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:24"><expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:19">nb_granules</name> <operator pos:start="23:21" pos:end="23:21">=</operator> <literal type="number" pos:start="23:23" pos:end="23:23">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="25:7" pos:end="47:5">else <block pos:start="25:12" pos:end="47:5">{<block_content pos:start="27:9" pos:end="45:9">

        <expr_stmt pos:start="27:9" pos:end="27:46"><expr pos:start="27:9" pos:end="27:45"><name pos:start="27:9" pos:end="27:23">main_data_begin</name> <operator pos:start="27:25" pos:end="27:25">=</operator> <call pos:start="27:27" pos:end="27:45"><name pos:start="27:27" pos:end="27:34">get_bits</name><argument_list pos:start="27:35" pos:end="27:45">(<argument pos:start="27:36" pos:end="27:41"><expr pos:start="27:36" pos:end="27:41"><operator pos:start="27:36" pos:end="27:36">&amp;</operator><name pos:start="27:37" pos:end="27:41"><name pos:start="27:37" pos:end="27:37">s</name><operator pos:start="27:38" pos:end="27:39">-&gt;</operator><name pos:start="27:40" pos:end="27:41">gb</name></name></expr></argument>, <argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><literal type="number" pos:start="27:44" pos:end="27:44">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="35:33"><if pos:start="29:9" pos:end="31:33">if <condition pos:start="29:12" pos:end="29:32">(<expr pos:start="29:13" pos:end="29:31"><name pos:start="29:13" pos:end="29:26"><name pos:start="29:13" pos:end="29:13">s</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:26">nb_channels</name></name> <operator pos:start="29:28" pos:end="29:29">==</operator> <literal type="number" pos:start="29:31" pos:end="29:31">2</literal></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:33"><block_content pos:start="31:13" pos:end="31:33">

            <expr_stmt pos:start="31:13" pos:end="31:33"><expr pos:start="31:13" pos:end="31:32"><call pos:start="31:13" pos:end="31:32"><name pos:start="31:13" pos:end="31:21">skip_bits</name><argument_list pos:start="31:22" pos:end="31:32">(<argument pos:start="31:23" pos:end="31:28"><expr pos:start="31:23" pos:end="31:28"><operator pos:start="31:23" pos:end="31:23">&amp;</operator><name pos:start="31:24" pos:end="31:28"><name pos:start="31:24" pos:end="31:24">s</name><operator pos:start="31:25" pos:end="31:26">-&gt;</operator><name pos:start="31:27" pos:end="31:28">gb</name></name></expr></argument>, <argument pos:start="31:31" pos:end="31:31"><expr pos:start="31:31" pos:end="31:31"><literal type="number" pos:start="31:31" pos:end="31:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="33:9" pos:end="35:33">else<block type="pseudo" pos:start="35:13" pos:end="35:33"><block_content pos:start="35:13" pos:end="35:33">

            <expr_stmt pos:start="35:13" pos:end="35:33"><expr pos:start="35:13" pos:end="35:32"><call pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:21">skip_bits</name><argument_list pos:start="35:22" pos:end="35:32">(<argument pos:start="35:23" pos:end="35:28"><expr pos:start="35:23" pos:end="35:28"><operator pos:start="35:23" pos:end="35:23">&amp;</operator><name pos:start="35:24" pos:end="35:28"><name pos:start="35:24" pos:end="35:24">s</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:28">gb</name></name></expr></argument>, <argument pos:start="35:31" pos:end="35:31"><expr pos:start="35:31" pos:end="35:31"><literal type="number" pos:start="35:31" pos:end="35:31">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:24"><expr pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:19">nb_granules</name> <operator pos:start="37:21" pos:end="37:21">=</operator> <literal type="number" pos:start="37:23" pos:end="37:23">2</literal></expr>;</expr_stmt>

        <for pos:start="39:9" pos:end="45:9">for <control pos:start="39:13" pos:end="39:47">(<init pos:start="39:14" pos:end="39:20"><expr pos:start="39:14" pos:end="39:19"><name pos:start="39:14" pos:end="39:15">ch</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <literal type="number" pos:start="39:19" pos:end="39:19">0</literal></expr>;</init> <condition pos:start="39:22" pos:end="39:41"><expr pos:start="39:22" pos:end="39:40"><name pos:start="39:22" pos:end="39:23">ch</name> <operator pos:start="39:25" pos:end="39:25">&lt;</operator> <name pos:start="39:27" pos:end="39:40"><name pos:start="39:27" pos:end="39:27">s</name><operator pos:start="39:28" pos:end="39:29">-&gt;</operator><name pos:start="39:30" pos:end="39:40">nb_channels</name></name></expr>;</condition> <incr pos:start="39:43" pos:end="39:46"><expr pos:start="39:43" pos:end="39:46"><name pos:start="39:43" pos:end="39:44">ch</name><operator pos:start="39:45" pos:end="39:46">++</operator></expr></incr>)</control> <block pos:start="39:49" pos:end="45:9">{<block_content pos:start="41:13" pos:end="43:59">

            <expr_stmt pos:start="41:13" pos:end="41:41"><expr pos:start="41:13" pos:end="41:40"><name pos:start="41:13" pos:end="41:30"><name pos:start="41:13" pos:end="41:13">s</name><operator pos:start="41:14" pos:end="41:15">-&gt;</operator><name pos:start="41:16" pos:end="41:23">granules</name><index pos:start="41:24" pos:end="41:27">[<expr pos:start="41:25" pos:end="41:26"><name pos:start="41:25" pos:end="41:26">ch</name></expr>]</index><index pos:start="41:28" pos:end="41:30">[<expr pos:start="41:29" pos:end="41:29"><literal type="number" pos:start="41:29" pos:end="41:29">0</literal></expr>]</index></name><operator pos:start="41:31" pos:end="41:31">.</operator><name pos:start="41:32" pos:end="41:36">scfsi</name> <operator pos:start="41:38" pos:end="41:38">=</operator> <literal type="number" pos:start="41:40" pos:end="41:40">0</literal></expr>;</expr_stmt><comment type="block" pos:start="41:42" pos:end="41:80">/* all scale factors are transmitted */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:59"><expr pos:start="43:13" pos:end="43:58"><name pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:23">granules</name><index pos:start="43:24" pos:end="43:27">[<expr pos:start="43:25" pos:end="43:26"><name pos:start="43:25" pos:end="43:26">ch</name></expr>]</index><index pos:start="43:28" pos:end="43:30">[<expr pos:start="43:29" pos:end="43:29"><literal type="number" pos:start="43:29" pos:end="43:29">1</literal></expr>]</index></name><operator pos:start="43:31" pos:end="43:31">.</operator><name pos:start="43:32" pos:end="43:36">scfsi</name> <operator pos:start="43:38" pos:end="43:38">=</operator> <call pos:start="43:40" pos:end="43:58"><name pos:start="43:40" pos:end="43:47">get_bits</name><argument_list pos:start="43:48" pos:end="43:58">(<argument pos:start="43:49" pos:end="43:54"><expr pos:start="43:49" pos:end="43:54"><operator pos:start="43:49" pos:end="43:49">&amp;</operator><name pos:start="43:50" pos:end="43:54"><name pos:start="43:50" pos:end="43:50">s</name><operator pos:start="43:51" pos:end="43:52">-&gt;</operator><name pos:start="43:53" pos:end="43:54">gb</name></name></expr></argument>, <argument pos:start="43:57" pos:end="43:57"><expr pos:start="43:57" pos:end="43:57"><literal type="number" pos:start="43:57" pos:end="43:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <for pos:start="51:5" pos:end="167:5">for <control pos:start="51:9" pos:end="51:40">(<init pos:start="51:10" pos:end="51:16"><expr pos:start="51:10" pos:end="51:15"><name pos:start="51:10" pos:end="51:11">gr</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <literal type="number" pos:start="51:15" pos:end="51:15">0</literal></expr>;</init> <condition pos:start="51:18" pos:end="51:34"><expr pos:start="51:18" pos:end="51:33"><name pos:start="51:18" pos:end="51:19">gr</name> <operator pos:start="51:21" pos:end="51:21">&lt;</operator> <name pos:start="51:23" pos:end="51:33">nb_granules</name></expr>;</condition> <incr pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><name pos:start="51:36" pos:end="51:37">gr</name><operator pos:start="51:38" pos:end="51:39">++</operator></expr></incr>)</control> <block pos:start="51:42" pos:end="167:5">{<block_content pos:start="53:9" pos:end="165:9">

        <for pos:start="53:9" pos:end="165:9">for <control pos:start="53:13" pos:end="53:47">(<init pos:start="53:14" pos:end="53:20"><expr pos:start="53:14" pos:end="53:19"><name pos:start="53:14" pos:end="53:15">ch</name> <operator pos:start="53:17" pos:end="53:17">=</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>;</init> <condition pos:start="53:22" pos:end="53:41"><expr pos:start="53:22" pos:end="53:40"><name pos:start="53:22" pos:end="53:23">ch</name> <operator pos:start="53:25" pos:end="53:25">&lt;</operator> <name pos:start="53:27" pos:end="53:40"><name pos:start="53:27" pos:end="53:27">s</name><operator pos:start="53:28" pos:end="53:29">-&gt;</operator><name pos:start="53:30" pos:end="53:40">nb_channels</name></name></expr>;</condition> <incr pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><name pos:start="53:43" pos:end="53:44">ch</name><operator pos:start="53:45" pos:end="53:46">++</operator></expr></incr>)</control> <block pos:start="53:49" pos:end="165:9">{<block_content pos:start="55:13" pos:end="163:52">

            <expr_stmt pos:start="55:13" pos:end="55:66"><expr pos:start="55:13" pos:end="55:65"><call pos:start="55:13" pos:end="55:65"><name pos:start="55:13" pos:end="55:19">av_dlog</name><argument_list pos:start="55:20" pos:end="55:65">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:28">avctx</name></name></expr></argument>, <argument pos:start="55:31" pos:end="55:56"><expr pos:start="55:31" pos:end="55:56"><literal type="string" pos:start="55:31" pos:end="55:56">"gr=%d ch=%d: side_info\n"</literal></expr></argument>, <argument pos:start="55:59" pos:end="55:60"><expr pos:start="55:59" pos:end="55:60"><name pos:start="55:59" pos:end="55:60">gr</name></expr></argument>, <argument pos:start="55:63" pos:end="55:64"><expr pos:start="55:63" pos:end="55:64"><name pos:start="55:63" pos:end="55:64">ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:37"><expr pos:start="57:13" pos:end="57:36"><name pos:start="57:13" pos:end="57:13">g</name> <operator pos:start="57:15" pos:end="57:15">=</operator> <operator pos:start="57:17" pos:end="57:17">&amp;</operator><name pos:start="57:18" pos:end="57:36"><name pos:start="57:18" pos:end="57:18">s</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:28">granules</name><index pos:start="57:29" pos:end="57:32">[<expr pos:start="57:30" pos:end="57:31"><name pos:start="57:30" pos:end="57:31">ch</name></expr>]</index><index pos:start="57:33" pos:end="57:36">[<expr pos:start="57:34" pos:end="57:35"><name pos:start="57:34" pos:end="57:35">gr</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:53"><expr pos:start="59:13" pos:end="59:52"><name pos:start="59:13" pos:end="59:29"><name pos:start="59:13" pos:end="59:13">g</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:29">part2_3_length</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <call pos:start="59:33" pos:end="59:52"><name pos:start="59:33" pos:end="59:40">get_bits</name><argument_list pos:start="59:41" pos:end="59:52">(<argument pos:start="59:42" pos:end="59:47"><expr pos:start="59:42" pos:end="59:47"><operator pos:start="59:42" pos:end="59:42">&amp;</operator><name pos:start="59:43" pos:end="59:47"><name pos:start="59:43" pos:end="59:43">s</name><operator pos:start="59:44" pos:end="59:45">-&gt;</operator><name pos:start="59:46" pos:end="59:47">gb</name></name></expr></argument>, <argument pos:start="59:50" pos:end="59:51"><expr pos:start="59:50" pos:end="59:51"><literal type="number" pos:start="59:50" pos:end="59:51">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:53"><expr pos:start="61:13" pos:end="61:52"><name pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:13">g</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:25">big_values</name></name>     <operator pos:start="61:31" pos:end="61:31">=</operator> <call pos:start="61:33" pos:end="61:52"><name pos:start="61:33" pos:end="61:40">get_bits</name><argument_list pos:start="61:41" pos:end="61:52">(<argument pos:start="61:42" pos:end="61:47"><expr pos:start="61:42" pos:end="61:47"><operator pos:start="61:42" pos:end="61:42">&amp;</operator><name pos:start="61:43" pos:end="61:47"><name pos:start="61:43" pos:end="61:43">s</name><operator pos:start="61:44" pos:end="61:45">-&gt;</operator><name pos:start="61:46" pos:end="61:47">gb</name></name></expr></argument>,  <argument pos:start="61:51" pos:end="61:51"><expr pos:start="61:51" pos:end="61:51"><literal type="number" pos:start="61:51" pos:end="61:51">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if <condition pos:start="63:16" pos:end="63:36">(<expr pos:start="63:17" pos:end="63:35"><name pos:start="63:17" pos:end="63:29"><name pos:start="63:17" pos:end="63:17">g</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:29">big_values</name></name> <operator pos:start="63:31" pos:end="63:31">&gt;</operator> <literal type="number" pos:start="63:33" pos:end="63:35">288</literal></expr>)</condition> <block pos:start="63:38" pos:end="69:13">{<block_content pos:start="65:17" pos:end="67:43">

                <expr_stmt pos:start="65:17" pos:end="65:71"><expr pos:start="65:17" pos:end="65:70"><call pos:start="65:17" pos:end="65:70"><name pos:start="65:17" pos:end="65:22">av_log</name><argument_list pos:start="65:23" pos:end="65:70">(<argument pos:start="65:24" pos:end="65:31"><expr pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:31"><name pos:start="65:24" pos:end="65:24">s</name><operator pos:start="65:25" pos:end="65:26">-&gt;</operator><name pos:start="65:27" pos:end="65:31">avctx</name></name></expr></argument>, <argument pos:start="65:34" pos:end="65:45"><expr pos:start="65:34" pos:end="65:45"><name pos:start="65:34" pos:end="65:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:48" pos:end="65:69"><expr pos:start="65:48" pos:end="65:69"><literal type="string" pos:start="65:48" pos:end="65:69">"big_values too big\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="67:17" pos:end="67:43">return <expr pos:start="67:24" pos:end="67:42"><name pos:start="67:24" pos:end="67:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="73:13" pos:end="73:49"><expr pos:start="73:13" pos:end="73:48"><name pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:13">g</name><operator pos:start="73:14" pos:end="73:15">-&gt;</operator><name pos:start="73:16" pos:end="73:26">global_gain</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <call pos:start="73:30" pos:end="73:48"><name pos:start="73:30" pos:end="73:37">get_bits</name><argument_list pos:start="73:38" pos:end="73:48">(<argument pos:start="73:39" pos:end="73:44"><expr pos:start="73:39" pos:end="73:44"><operator pos:start="73:39" pos:end="73:39">&amp;</operator><name pos:start="73:40" pos:end="73:44"><name pos:start="73:40" pos:end="73:40">s</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:44">gb</name></name></expr></argument>, <argument pos:start="73:47" pos:end="73:47"><expr pos:start="73:47" pos:end="73:47"><literal type="number" pos:start="73:47" pos:end="73:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="75:13" pos:end="77:50">/* if MS stereo only is selected, we precompute the

               1/sqrt(2) renormalization factor */</comment>

            <if_stmt pos:start="79:13" pos:end="83:36"><if pos:start="79:13" pos:end="83:36">if <condition pos:start="79:16" pos:end="81:35">(<expr pos:start="79:17" pos:end="81:34"><operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:28"><name pos:start="79:18" pos:end="79:18">s</name><operator pos:start="79:19" pos:end="79:20">-&gt;</operator><name pos:start="79:21" pos:end="79:28">mode_ext</name></name> <operator pos:start="79:30" pos:end="79:30">&amp;</operator> <operator pos:start="79:32" pos:end="79:32">(</operator><name pos:start="79:33" pos:end="79:50">MODE_EXT_MS_STEREO</name> <operator pos:start="79:52" pos:end="79:52">|</operator> <name pos:start="79:54" pos:end="79:70">MODE_EXT_I_STEREO</name><operator pos:start="79:71" pos:end="79:71">)</operator><operator pos:start="79:72" pos:end="79:72">)</operator> <operator pos:start="79:74" pos:end="79:75">==</operator>

                <name pos:start="81:17" pos:end="81:34">MODE_EXT_MS_STEREO</name></expr>)</condition><block type="pseudo" pos:start="83:17" pos:end="83:36"><block_content pos:start="83:17" pos:end="83:36">

                <expr_stmt pos:start="83:17" pos:end="83:36"><expr pos:start="83:17" pos:end="83:35"><name pos:start="83:17" pos:end="83:30"><name pos:start="83:17" pos:end="83:17">g</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:30">global_gain</name></name> <operator pos:start="83:32" pos:end="83:33">-=</operator> <literal type="number" pos:start="83:35" pos:end="83:35">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="85:13" pos:end="91:59"><if pos:start="85:13" pos:end="87:59">if <condition pos:start="85:16" pos:end="85:23">(<expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:17">s</name><operator pos:start="85:18" pos:end="85:19">-&gt;</operator><name pos:start="85:20" pos:end="85:22">lsf</name></name></expr>)</condition><block type="pseudo" pos:start="87:17" pos:end="87:59"><block_content pos:start="87:17" pos:end="87:59">

                <expr_stmt pos:start="87:17" pos:end="87:59"><expr pos:start="87:17" pos:end="87:58"><name pos:start="87:17" pos:end="87:36"><name pos:start="87:17" pos:end="87:17">g</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:36">scalefac_compress</name></name> <operator pos:start="87:38" pos:end="87:38">=</operator> <call pos:start="87:40" pos:end="87:58"><name pos:start="87:40" pos:end="87:47">get_bits</name><argument_list pos:start="87:48" pos:end="87:58">(<argument pos:start="87:49" pos:end="87:54"><expr pos:start="87:49" pos:end="87:54"><operator pos:start="87:49" pos:end="87:49">&amp;</operator><name pos:start="87:50" pos:end="87:54"><name pos:start="87:50" pos:end="87:50">s</name><operator pos:start="87:51" pos:end="87:52">-&gt;</operator><name pos:start="87:53" pos:end="87:54">gb</name></name></expr></argument>, <argument pos:start="87:57" pos:end="87:57"><expr pos:start="87:57" pos:end="87:57"><literal type="number" pos:start="87:57" pos:end="87:57">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="89:13" pos:end="91:59">else<block type="pseudo" pos:start="91:17" pos:end="91:59"><block_content pos:start="91:17" pos:end="91:59">

                <expr_stmt pos:start="91:17" pos:end="91:59"><expr pos:start="91:17" pos:end="91:58"><name pos:start="91:17" pos:end="91:36"><name pos:start="91:17" pos:end="91:17">g</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:36">scalefac_compress</name></name> <operator pos:start="91:38" pos:end="91:38">=</operator> <call pos:start="91:40" pos:end="91:58"><name pos:start="91:40" pos:end="91:47">get_bits</name><argument_list pos:start="91:48" pos:end="91:58">(<argument pos:start="91:49" pos:end="91:54"><expr pos:start="91:49" pos:end="91:54"><operator pos:start="91:49" pos:end="91:49">&amp;</operator><name pos:start="91:50" pos:end="91:54"><name pos:start="91:50" pos:end="91:50">s</name><operator pos:start="91:51" pos:end="91:52">-&gt;</operator><name pos:start="91:53" pos:end="91:54">gb</name></name></expr></argument>, <argument pos:start="91:57" pos:end="91:57"><expr pos:start="91:57" pos:end="91:57"><literal type="number" pos:start="91:57" pos:end="91:57">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:48"><expr pos:start="93:13" pos:end="93:47"><name pos:start="93:13" pos:end="93:27">blocksplit_flag</name> <operator pos:start="93:29" pos:end="93:29">=</operator> <call pos:start="93:31" pos:end="93:47"><name pos:start="93:31" pos:end="93:39">get_bits1</name><argument_list pos:start="93:40" pos:end="93:47">(<argument pos:start="93:41" pos:end="93:46"><expr pos:start="93:41" pos:end="93:46"><operator pos:start="93:41" pos:end="93:41">&amp;</operator><name pos:start="93:42" pos:end="93:46"><name pos:start="93:42" pos:end="93:42">s</name><operator pos:start="93:43" pos:end="93:44">-&gt;</operator><name pos:start="93:45" pos:end="93:46">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="95:13" pos:end="143:13"><if pos:start="95:13" pos:end="119:13">if <condition pos:start="95:16" pos:end="95:32">(<expr pos:start="95:17" pos:end="95:31"><name pos:start="95:17" pos:end="95:31">blocksplit_flag</name></expr>)</condition> <block pos:start="95:34" pos:end="119:13">{<block_content pos:start="97:17" pos:end="117:43">

                <expr_stmt pos:start="97:17" pos:end="97:52"><expr pos:start="97:17" pos:end="97:51"><name pos:start="97:17" pos:end="97:29"><name pos:start="97:17" pos:end="97:17">g</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:29">block_type</name></name> <operator pos:start="97:31" pos:end="97:31">=</operator> <call pos:start="97:33" pos:end="97:51"><name pos:start="97:33" pos:end="97:40">get_bits</name><argument_list pos:start="97:41" pos:end="97:51">(<argument pos:start="97:42" pos:end="97:47"><expr pos:start="97:42" pos:end="97:47"><operator pos:start="97:42" pos:end="97:42">&amp;</operator><name pos:start="97:43" pos:end="97:47"><name pos:start="97:43" pos:end="97:43">s</name><operator pos:start="97:44" pos:end="97:45">-&gt;</operator><name pos:start="97:46" pos:end="97:47">gb</name></name></expr></argument>, <argument pos:start="97:50" pos:end="97:50"><expr pos:start="97:50" pos:end="97:50"><literal type="number" pos:start="97:50" pos:end="97:50">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="99:17" pos:end="105:17"><if pos:start="99:17" pos:end="105:17">if <condition pos:start="99:20" pos:end="99:39">(<expr pos:start="99:21" pos:end="99:38"><name pos:start="99:21" pos:end="99:33"><name pos:start="99:21" pos:end="99:21">g</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:33">block_type</name></name> <operator pos:start="99:35" pos:end="99:36">==</operator> <literal type="number" pos:start="99:38" pos:end="99:38">0</literal></expr>)</condition> <block pos:start="99:41" pos:end="105:17">{<block_content pos:start="101:21" pos:end="103:47">

                    <expr_stmt pos:start="101:21" pos:end="101:75"><expr pos:start="101:21" pos:end="101:74"><call pos:start="101:21" pos:end="101:74"><name pos:start="101:21" pos:end="101:26">av_log</name><argument_list pos:start="101:27" pos:end="101:74">(<argument pos:start="101:28" pos:end="101:35"><expr pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:35"><name pos:start="101:28" pos:end="101:28">s</name><operator pos:start="101:29" pos:end="101:30">-&gt;</operator><name pos:start="101:31" pos:end="101:35">avctx</name></name></expr></argument>, <argument pos:start="101:38" pos:end="101:49"><expr pos:start="101:38" pos:end="101:49"><name pos:start="101:38" pos:end="101:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:52" pos:end="101:73"><expr pos:start="101:52" pos:end="101:73"><literal type="string" pos:start="101:52" pos:end="101:73">"invalid block type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="103:21" pos:end="103:47">return <expr pos:start="103:28" pos:end="103:46"><name pos:start="103:28" pos:end="103:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="107:17" pos:end="107:52"><expr pos:start="107:17" pos:end="107:51"><name pos:start="107:17" pos:end="107:31"><name pos:start="107:17" pos:end="107:17">g</name><operator pos:start="107:18" pos:end="107:19">-&gt;</operator><name pos:start="107:20" pos:end="107:31">switch_point</name></name> <operator pos:start="107:33" pos:end="107:33">=</operator> <call pos:start="107:35" pos:end="107:51"><name pos:start="107:35" pos:end="107:43">get_bits1</name><argument_list pos:start="107:44" pos:end="107:51">(<argument pos:start="107:45" pos:end="107:50"><expr pos:start="107:45" pos:end="107:50"><operator pos:start="107:45" pos:end="107:45">&amp;</operator><name pos:start="107:46" pos:end="107:50"><name pos:start="107:46" pos:end="107:46">s</name><operator pos:start="107:47" pos:end="107:48">-&gt;</operator><name pos:start="107:49" pos:end="107:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="109:17" pos:end="111:61">for <control pos:start="109:21" pos:end="109:39">(<init pos:start="109:22" pos:end="109:27"><expr pos:start="109:22" pos:end="109:26"><name pos:start="109:22" pos:end="109:22">i</name> <operator pos:start="109:24" pos:end="109:24">=</operator> <literal type="number" pos:start="109:26" pos:end="109:26">0</literal></expr>;</init> <condition pos:start="109:29" pos:end="109:34"><expr pos:start="109:29" pos:end="109:33"><name pos:start="109:29" pos:end="109:29">i</name> <operator pos:start="109:31" pos:end="109:31">&lt;</operator> <literal type="number" pos:start="109:33" pos:end="109:33">2</literal></expr>;</condition> <incr pos:start="109:36" pos:end="109:38"><expr pos:start="109:36" pos:end="109:38"><name pos:start="109:36" pos:end="109:36">i</name><operator pos:start="109:37" pos:end="109:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:21" pos:end="111:61"><block_content pos:start="111:21" pos:end="111:61">

                    <expr_stmt pos:start="111:21" pos:end="111:61"><expr pos:start="111:21" pos:end="111:60"><name pos:start="111:21" pos:end="111:38"><name pos:start="111:21" pos:end="111:21">g</name><operator pos:start="111:22" pos:end="111:23">-&gt;</operator><name pos:start="111:24" pos:end="111:35">table_select</name><index pos:start="111:36" pos:end="111:38">[<expr pos:start="111:37" pos:end="111:37"><name pos:start="111:37" pos:end="111:37">i</name></expr>]</index></name> <operator pos:start="111:40" pos:end="111:40">=</operator> <call pos:start="111:42" pos:end="111:60"><name pos:start="111:42" pos:end="111:49">get_bits</name><argument_list pos:start="111:50" pos:end="111:60">(<argument pos:start="111:51" pos:end="111:56"><expr pos:start="111:51" pos:end="111:56"><operator pos:start="111:51" pos:end="111:51">&amp;</operator><name pos:start="111:52" pos:end="111:56"><name pos:start="111:52" pos:end="111:52">s</name><operator pos:start="111:53" pos:end="111:54">-&gt;</operator><name pos:start="111:55" pos:end="111:56">gb</name></name></expr></argument>, <argument pos:start="111:59" pos:end="111:59"><expr pos:start="111:59" pos:end="111:59"><literal type="number" pos:start="111:59" pos:end="111:59">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <for pos:start="113:17" pos:end="115:62">for <control pos:start="113:21" pos:end="113:39">(<init pos:start="113:22" pos:end="113:27"><expr pos:start="113:22" pos:end="113:26"><name pos:start="113:22" pos:end="113:22">i</name> <operator pos:start="113:24" pos:end="113:24">=</operator> <literal type="number" pos:start="113:26" pos:end="113:26">0</literal></expr>;</init> <condition pos:start="113:29" pos:end="113:34"><expr pos:start="113:29" pos:end="113:33"><name pos:start="113:29" pos:end="113:29">i</name> <operator pos:start="113:31" pos:end="113:31">&lt;</operator> <literal type="number" pos:start="113:33" pos:end="113:33">3</literal></expr>;</condition> <incr pos:start="113:36" pos:end="113:38"><expr pos:start="113:36" pos:end="113:38"><name pos:start="113:36" pos:end="113:36">i</name><operator pos:start="113:37" pos:end="113:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="115:21" pos:end="115:62"><block_content pos:start="115:21" pos:end="115:62">

                    <expr_stmt pos:start="115:21" pos:end="115:62"><expr pos:start="115:21" pos:end="115:61"><name pos:start="115:21" pos:end="115:39"><name pos:start="115:21" pos:end="115:21">g</name><operator pos:start="115:22" pos:end="115:23">-&gt;</operator><name pos:start="115:24" pos:end="115:36">subblock_gain</name><index pos:start="115:37" pos:end="115:39">[<expr pos:start="115:38" pos:end="115:38"><name pos:start="115:38" pos:end="115:38">i</name></expr>]</index></name> <operator pos:start="115:41" pos:end="115:41">=</operator> <call pos:start="115:43" pos:end="115:61"><name pos:start="115:43" pos:end="115:50">get_bits</name><argument_list pos:start="115:51" pos:end="115:61">(<argument pos:start="115:52" pos:end="115:57"><expr pos:start="115:52" pos:end="115:57"><operator pos:start="115:52" pos:end="115:52">&amp;</operator><name pos:start="115:53" pos:end="115:57"><name pos:start="115:53" pos:end="115:53">s</name><operator pos:start="115:54" pos:end="115:55">-&gt;</operator><name pos:start="115:56" pos:end="115:57">gb</name></name></expr></argument>, <argument pos:start="115:60" pos:end="115:60"><expr pos:start="115:60" pos:end="115:60"><literal type="number" pos:start="115:60" pos:end="115:60">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="117:17" pos:end="117:43"><expr pos:start="117:17" pos:end="117:42"><call pos:start="117:17" pos:end="117:42"><name pos:start="117:17" pos:end="117:36">ff_init_short_region</name><argument_list pos:start="117:37" pos:end="117:42">(<argument pos:start="117:38" pos:end="117:38"><expr pos:start="117:38" pos:end="117:38"><name pos:start="117:38" pos:end="117:38">s</name></expr></argument>, <argument pos:start="117:41" pos:end="117:41"><expr pos:start="117:41" pos:end="117:41"><name pos:start="117:41" pos:end="117:41">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="119:15" pos:end="143:13">else <block pos:start="119:20" pos:end="143:13">{<block_content pos:start="121:17" pos:end="141:76">

                <decl_stmt pos:start="121:17" pos:end="121:53"><decl pos:start="121:17" pos:end="121:35"><type pos:start="121:17" pos:end="121:19"><name pos:start="121:17" pos:end="121:19">int</name></type> <name pos:start="121:21" pos:end="121:35">region_address1</name></decl>, <decl pos:start="121:38" pos:end="121:52"><type ref="prev" pos:start="121:17" pos:end="121:19"/><name pos:start="121:38" pos:end="121:52">region_address2</name></decl>;</decl_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:34"><expr pos:start="123:17" pos:end="123:33"><name pos:start="123:17" pos:end="123:29"><name pos:start="123:17" pos:end="123:17">g</name><operator pos:start="123:18" pos:end="123:19">-&gt;</operator><name pos:start="123:20" pos:end="123:29">block_type</name></name> <operator pos:start="123:31" pos:end="123:31">=</operator> <literal type="number" pos:start="123:33" pos:end="123:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="125:17" pos:end="125:36"><expr pos:start="125:17" pos:end="125:35"><name pos:start="125:17" pos:end="125:31"><name pos:start="125:17" pos:end="125:17">g</name><operator pos:start="125:18" pos:end="125:19">-&gt;</operator><name pos:start="125:20" pos:end="125:31">switch_point</name></name> <operator pos:start="125:33" pos:end="125:33">=</operator> <literal type="number" pos:start="125:35" pos:end="125:35">0</literal></expr>;</expr_stmt>

                <for pos:start="127:17" pos:end="129:61">for <control pos:start="127:21" pos:end="127:39">(<init pos:start="127:22" pos:end="127:27"><expr pos:start="127:22" pos:end="127:26"><name pos:start="127:22" pos:end="127:22">i</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal></expr>;</init> <condition pos:start="127:29" pos:end="127:34"><expr pos:start="127:29" pos:end="127:33"><name pos:start="127:29" pos:end="127:29">i</name> <operator pos:start="127:31" pos:end="127:31">&lt;</operator> <literal type="number" pos:start="127:33" pos:end="127:33">3</literal></expr>;</condition> <incr pos:start="127:36" pos:end="127:38"><expr pos:start="127:36" pos:end="127:38"><name pos:start="127:36" pos:end="127:36">i</name><operator pos:start="127:37" pos:end="127:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:21" pos:end="129:61"><block_content pos:start="129:21" pos:end="129:61">

                    <expr_stmt pos:start="129:21" pos:end="129:61"><expr pos:start="129:21" pos:end="129:60"><name pos:start="129:21" pos:end="129:38"><name pos:start="129:21" pos:end="129:21">g</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:35">table_select</name><index pos:start="129:36" pos:end="129:38">[<expr pos:start="129:37" pos:end="129:37"><name pos:start="129:37" pos:end="129:37">i</name></expr>]</index></name> <operator pos:start="129:40" pos:end="129:40">=</operator> <call pos:start="129:42" pos:end="129:60"><name pos:start="129:42" pos:end="129:49">get_bits</name><argument_list pos:start="129:50" pos:end="129:60">(<argument pos:start="129:51" pos:end="129:56"><expr pos:start="129:51" pos:end="129:56"><operator pos:start="129:51" pos:end="129:51">&amp;</operator><name pos:start="129:52" pos:end="129:56"><name pos:start="129:52" pos:end="129:52">s</name><operator pos:start="129:53" pos:end="129:54">-&gt;</operator><name pos:start="129:55" pos:end="129:56">gb</name></name></expr></argument>, <argument pos:start="129:59" pos:end="129:59"><expr pos:start="129:59" pos:end="129:59"><literal type="number" pos:start="129:59" pos:end="129:59">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <comment type="block" pos:start="131:17" pos:end="131:56">/* compute huffman coded region sizes */</comment>

                <expr_stmt pos:start="133:17" pos:end="133:54"><expr pos:start="133:17" pos:end="133:53"><name pos:start="133:17" pos:end="133:31">region_address1</name> <operator pos:start="133:33" pos:end="133:33">=</operator> <call pos:start="133:35" pos:end="133:53"><name pos:start="133:35" pos:end="133:42">get_bits</name><argument_list pos:start="133:43" pos:end="133:53">(<argument pos:start="133:44" pos:end="133:49"><expr pos:start="133:44" pos:end="133:49"><operator pos:start="133:44" pos:end="133:44">&amp;</operator><name pos:start="133:45" pos:end="133:49"><name pos:start="133:45" pos:end="133:45">s</name><operator pos:start="133:46" pos:end="133:47">-&gt;</operator><name pos:start="133:48" pos:end="133:49">gb</name></name></expr></argument>, <argument pos:start="133:52" pos:end="133:52"><expr pos:start="133:52" pos:end="133:52"><literal type="number" pos:start="133:52" pos:end="133:52">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:54"><expr pos:start="135:17" pos:end="135:53"><name pos:start="135:17" pos:end="135:31">region_address2</name> <operator pos:start="135:33" pos:end="135:33">=</operator> <call pos:start="135:35" pos:end="135:53"><name pos:start="135:35" pos:end="135:42">get_bits</name><argument_list pos:start="135:43" pos:end="135:53">(<argument pos:start="135:44" pos:end="135:49"><expr pos:start="135:44" pos:end="135:49"><operator pos:start="135:44" pos:end="135:44">&amp;</operator><name pos:start="135:45" pos:end="135:49"><name pos:start="135:45" pos:end="135:45">s</name><operator pos:start="135:46" pos:end="135:47">-&gt;</operator><name pos:start="135:48" pos:end="135:49">gb</name></name></expr></argument>, <argument pos:start="135:52" pos:end="135:52"><expr pos:start="135:52" pos:end="135:52"><literal type="number" pos:start="135:52" pos:end="135:52">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="137:17" pos:end="139:58"><expr pos:start="137:17" pos:end="139:57"><call pos:start="137:17" pos:end="139:57"><name pos:start="137:17" pos:end="137:23">av_dlog</name><argument_list pos:start="137:24" pos:end="139:57">(<argument pos:start="137:25" pos:end="137:32"><expr pos:start="137:25" pos:end="137:32"><name pos:start="137:25" pos:end="137:32"><name pos:start="137:25" pos:end="137:25">s</name><operator pos:start="137:26" pos:end="137:27">-&gt;</operator><name pos:start="137:28" pos:end="137:32">avctx</name></name></expr></argument>, <argument pos:start="137:35" pos:end="137:59"><expr pos:start="137:35" pos:end="137:59"><literal type="string" pos:start="137:35" pos:end="137:59">"region1=%d region2=%d\n"</literal></expr></argument>,

                        <argument pos:start="139:25" pos:end="139:39"><expr pos:start="139:25" pos:end="139:39"><name pos:start="139:25" pos:end="139:39">region_address1</name></expr></argument>, <argument pos:start="139:42" pos:end="139:56"><expr pos:start="139:42" pos:end="139:56"><name pos:start="139:42" pos:end="139:56">region_address2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="141:17" pos:end="141:76"><expr pos:start="141:17" pos:end="141:75"><call pos:start="141:17" pos:end="141:75"><name pos:start="141:17" pos:end="141:35">ff_init_long_region</name><argument_list pos:start="141:36" pos:end="141:75">(<argument pos:start="141:37" pos:end="141:37"><expr pos:start="141:37" pos:end="141:37"><name pos:start="141:37" pos:end="141:37">s</name></expr></argument>, <argument pos:start="141:40" pos:end="141:40"><expr pos:start="141:40" pos:end="141:40"><name pos:start="141:40" pos:end="141:40">g</name></expr></argument>, <argument pos:start="141:43" pos:end="141:57"><expr pos:start="141:43" pos:end="141:57"><name pos:start="141:43" pos:end="141:57">region_address1</name></expr></argument>, <argument pos:start="141:60" pos:end="141:74"><expr pos:start="141:60" pos:end="141:74"><name pos:start="141:60" pos:end="141:74">region_address2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:37"><expr pos:start="145:13" pos:end="145:36"><call pos:start="145:13" pos:end="145:36"><name pos:start="145:13" pos:end="145:33">ff_region_offset2size</name><argument_list pos:start="145:34" pos:end="145:36">(<argument pos:start="145:35" pos:end="145:35"><expr pos:start="145:35" pos:end="145:35"><name pos:start="145:35" pos:end="145:35">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:42"><expr pos:start="147:13" pos:end="147:41"><call pos:start="147:13" pos:end="147:41"><name pos:start="147:13" pos:end="147:35">ff_compute_band_indexes</name><argument_list pos:start="147:36" pos:end="147:41">(<argument pos:start="147:37" pos:end="147:37"><expr pos:start="147:37" pos:end="147:37"><name pos:start="147:37" pos:end="147:37">s</name></expr></argument>, <argument pos:start="147:40" pos:end="147:40"><expr pos:start="147:40" pos:end="147:40"><name pos:start="147:40" pos:end="147:40">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="151:13" pos:end="151:27"><expr pos:start="151:13" pos:end="151:26"><name pos:start="151:13" pos:end="151:22"><name pos:start="151:13" pos:end="151:13">g</name><operator pos:start="151:14" pos:end="151:15">-&gt;</operator><name pos:start="151:16" pos:end="151:22">preflag</name></name> <operator pos:start="151:24" pos:end="151:24">=</operator> <literal type="number" pos:start="151:26" pos:end="151:26">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="153:13" pos:end="155:47"><if pos:start="153:13" pos:end="155:47">if <condition pos:start="153:16" pos:end="153:24">(<expr pos:start="153:17" pos:end="153:23"><operator pos:start="153:17" pos:end="153:17">!</operator><name pos:start="153:18" pos:end="153:23"><name pos:start="153:18" pos:end="153:18">s</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:23">lsf</name></name></expr>)</condition><block type="pseudo" pos:start="155:17" pos:end="155:47"><block_content pos:start="155:17" pos:end="155:47">

                <expr_stmt pos:start="155:17" pos:end="155:47"><expr pos:start="155:17" pos:end="155:46"><name pos:start="155:17" pos:end="155:26"><name pos:start="155:17" pos:end="155:17">g</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:26">preflag</name></name> <operator pos:start="155:28" pos:end="155:28">=</operator> <call pos:start="155:30" pos:end="155:46"><name pos:start="155:30" pos:end="155:38">get_bits1</name><argument_list pos:start="155:39" pos:end="155:46">(<argument pos:start="155:40" pos:end="155:45"><expr pos:start="155:40" pos:end="155:45"><operator pos:start="155:40" pos:end="155:40">&amp;</operator><name pos:start="155:41" pos:end="155:45"><name pos:start="155:41" pos:end="155:41">s</name><operator pos:start="155:42" pos:end="155:43">-&gt;</operator><name pos:start="155:44" pos:end="155:45">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:54"><expr pos:start="157:13" pos:end="157:53"><name pos:start="157:13" pos:end="157:29"><name pos:start="157:13" pos:end="157:13">g</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:29">scalefac_scale</name></name>     <operator pos:start="157:35" pos:end="157:35">=</operator> <call pos:start="157:37" pos:end="157:53"><name pos:start="157:37" pos:end="157:45">get_bits1</name><argument_list pos:start="157:46" pos:end="157:53">(<argument pos:start="157:47" pos:end="157:52"><expr pos:start="157:47" pos:end="157:52"><operator pos:start="157:47" pos:end="157:47">&amp;</operator><name pos:start="157:48" pos:end="157:52"><name pos:start="157:48" pos:end="157:48">s</name><operator pos:start="157:49" pos:end="157:50">-&gt;</operator><name pos:start="157:51" pos:end="157:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:54"><expr pos:start="159:13" pos:end="159:53"><name pos:start="159:13" pos:end="159:33"><name pos:start="159:13" pos:end="159:13">g</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:33">count1table_select</name></name> <operator pos:start="159:35" pos:end="159:35">=</operator> <call pos:start="159:37" pos:end="159:53"><name pos:start="159:37" pos:end="159:45">get_bits1</name><argument_list pos:start="159:46" pos:end="159:53">(<argument pos:start="159:47" pos:end="159:52"><expr pos:start="159:47" pos:end="159:52"><operator pos:start="159:47" pos:end="159:47">&amp;</operator><name pos:start="159:48" pos:end="159:52"><name pos:start="159:48" pos:end="159:48">s</name><operator pos:start="159:49" pos:end="159:50">-&gt;</operator><name pos:start="159:51" pos:end="159:52">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="163:52"><expr pos:start="161:13" pos:end="163:51"><call pos:start="161:13" pos:end="163:51"><name pos:start="161:13" pos:end="161:19">av_dlog</name><argument_list pos:start="161:20" pos:end="163:51">(<argument pos:start="161:21" pos:end="161:28"><expr pos:start="161:21" pos:end="161:28"><name pos:start="161:21" pos:end="161:28"><name pos:start="161:21" pos:end="161:21">s</name><operator pos:start="161:22" pos:end="161:23">-&gt;</operator><name pos:start="161:24" pos:end="161:28">avctx</name></name></expr></argument>, <argument pos:start="161:31" pos:end="161:63"><expr pos:start="161:31" pos:end="161:63"><literal type="string" pos:start="161:31" pos:end="161:63">"block_type=%d switch_point=%d\n"</literal></expr></argument>,

                    <argument pos:start="163:21" pos:end="163:33"><expr pos:start="163:21" pos:end="163:33"><name pos:start="163:21" pos:end="163:33"><name pos:start="163:21" pos:end="163:21">g</name><operator pos:start="163:22" pos:end="163:23">-&gt;</operator><name pos:start="163:24" pos:end="163:33">block_type</name></name></expr></argument>, <argument pos:start="163:36" pos:end="163:50"><expr pos:start="163:36" pos:end="163:50"><name pos:start="163:36" pos:end="163:50"><name pos:start="163:36" pos:end="163:36">g</name><operator pos:start="163:37" pos:end="163:38">-&gt;</operator><name pos:start="163:39" pos:end="163:50">switch_point</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>



    <if_stmt pos:start="171:5" pos:end="229:5"><if pos:start="171:5" pos:end="225:5">if <condition pos:start="171:8" pos:end="171:21">(<expr pos:start="171:9" pos:end="171:20"><operator pos:start="171:9" pos:end="171:9">!</operator><name pos:start="171:10" pos:end="171:20"><name pos:start="171:10" pos:end="171:10">s</name><operator pos:start="171:11" pos:end="171:12">-&gt;</operator><name pos:start="171:13" pos:end="171:20">adu_mode</name></name></expr>)</condition> <block pos:start="171:23" pos:end="225:5">{<block_content pos:start="173:9" pos:end="223:9">

        <decl_stmt pos:start="173:9" pos:end="173:72"><decl pos:start="173:9" pos:end="173:71"><type pos:start="173:9" pos:end="173:23"><specifier pos:start="173:9" pos:end="173:13">const</specifier> <name pos:start="173:15" pos:end="173:21">uint8_t</name> <modifier pos:start="173:23" pos:end="173:23">*</modifier></type><name pos:start="173:24" pos:end="173:26">ptr</name> <init pos:start="173:28" pos:end="173:71">= <expr pos:start="173:30" pos:end="173:71"><name pos:start="173:30" pos:end="173:41"><name pos:start="173:30" pos:end="173:30">s</name><operator pos:start="173:31" pos:end="173:32">-&gt;</operator><name pos:start="173:33" pos:end="173:34">gb</name><operator pos:start="173:35" pos:end="173:35">.</operator><name pos:start="173:36" pos:end="173:41">buffer</name></name> <operator pos:start="173:43" pos:end="173:43">+</operator> <operator pos:start="173:45" pos:end="173:45">(</operator><call pos:start="173:46" pos:end="173:67"><name pos:start="173:46" pos:end="173:59">get_bits_count</name><argument_list pos:start="173:60" pos:end="173:67">(<argument pos:start="173:61" pos:end="173:66"><expr pos:start="173:61" pos:end="173:66"><operator pos:start="173:61" pos:end="173:61">&amp;</operator><name pos:start="173:62" pos:end="173:66"><name pos:start="173:62" pos:end="173:62">s</name><operator pos:start="173:63" pos:end="173:64">-&gt;</operator><name pos:start="173:65" pos:end="173:66">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="173:68" pos:end="173:69">&gt;&gt;</operator><literal type="number" pos:start="173:70" pos:end="173:70">3</literal><operator pos:start="173:71" pos:end="173:71">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:50"><expr pos:start="175:9" pos:end="175:49"><call pos:start="175:9" pos:end="175:49"><name pos:start="175:9" pos:end="175:14">assert</name><argument_list pos:start="175:15" pos:end="175:49">(<argument pos:start="175:16" pos:end="175:48"><expr pos:start="175:16" pos:end="175:48"><operator pos:start="175:16" pos:end="175:16">(</operator><call pos:start="175:17" pos:end="175:38"><name pos:start="175:17" pos:end="175:30">get_bits_count</name><argument_list pos:start="175:31" pos:end="175:38">(<argument pos:start="175:32" pos:end="175:37"><expr pos:start="175:32" pos:end="175:37"><operator pos:start="175:32" pos:end="175:32">&amp;</operator><name pos:start="175:33" pos:end="175:37"><name pos:start="175:33" pos:end="175:33">s</name><operator pos:start="175:34" pos:end="175:35">-&gt;</operator><name pos:start="175:36" pos:end="175:37">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="175:40" pos:end="175:40">&amp;</operator> <literal type="number" pos:start="175:42" pos:end="175:42">7</literal><operator pos:start="175:43" pos:end="175:43">)</operator> <operator pos:start="175:45" pos:end="175:46">==</operator> <literal type="number" pos:start="175:48" pos:end="175:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="177:9" pos:end="177:61">/* now we get bits from the main_data_begin offset */</comment>

        <expr_stmt pos:start="179:9" pos:end="179:61"><expr pos:start="179:9" pos:end="179:60"><call pos:start="179:9" pos:end="179:60"><name pos:start="179:9" pos:end="179:15">av_dlog</name><argument_list pos:start="179:16" pos:end="179:60">(<argument pos:start="179:17" pos:end="179:24"><expr pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:24">avctx</name></name></expr></argument>, <argument pos:start="179:27" pos:end="179:42"><expr pos:start="179:27" pos:end="179:42"><literal type="string" pos:start="179:27" pos:end="179:42">"seekback: %d\n"</literal></expr></argument>, <argument pos:start="179:45" pos:end="179:59"><expr pos:start="179:45" pos:end="179:59"><name pos:start="179:45" pos:end="179:59">main_data_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line" pos:start="181:5" pos:end="181:97">//av_log(NULL, AV_LOG_ERROR, "backstep:%d, lastbuf:%d\n", main_data_begin, s-&gt;last_buf_size);</comment>



        <expr_stmt pos:start="185:9" pos:end="185:64"><expr pos:start="185:9" pos:end="185:63"><call pos:start="185:9" pos:end="185:63"><name pos:start="185:9" pos:end="185:14">memcpy</name><argument_list pos:start="185:15" pos:end="185:63">(<argument pos:start="185:16" pos:end="185:45"><expr pos:start="185:16" pos:end="185:45"><name pos:start="185:16" pos:end="185:26"><name pos:start="185:16" pos:end="185:16">s</name><operator pos:start="185:17" pos:end="185:18">-&gt;</operator><name pos:start="185:19" pos:end="185:26">last_buf</name></name> <operator pos:start="185:28" pos:end="185:28">+</operator> <name pos:start="185:30" pos:end="185:45"><name pos:start="185:30" pos:end="185:30">s</name><operator pos:start="185:31" pos:end="185:32">-&gt;</operator><name pos:start="185:33" pos:end="185:45">last_buf_size</name></name></expr></argument>, <argument pos:start="185:48" pos:end="185:50"><expr pos:start="185:48" pos:end="185:50"><name pos:start="185:48" pos:end="185:50">ptr</name></expr></argument>, <argument pos:start="185:53" pos:end="185:62"><expr pos:start="185:53" pos:end="185:62"><name pos:start="185:53" pos:end="185:62">EXTRABYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:25"><expr pos:start="187:9" pos:end="187:24"><name pos:start="187:9" pos:end="187:16"><name pos:start="187:9" pos:end="187:9">s</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:16">in_gb</name></name> <operator pos:start="187:18" pos:end="187:18">=</operator> <name pos:start="187:20" pos:end="187:24"><name pos:start="187:20" pos:end="187:20">s</name><operator pos:start="187:21" pos:end="187:22">-&gt;</operator><name pos:start="187:23" pos:end="187:24">gb</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="192:0"><expr pos:start="189:9" pos:end="189:62"><call pos:start="189:9" pos:end="189:62"><name pos:start="189:9" pos:end="189:21">init_get_bits</name><argument_list pos:start="189:22" pos:end="189:62">(<argument pos:start="189:23" pos:end="189:28"><expr pos:start="189:23" pos:end="189:28"><operator pos:start="189:23" pos:end="189:23">&amp;</operator><name pos:start="189:24" pos:end="189:28"><name pos:start="189:24" pos:end="189:24">s</name><operator pos:start="189:25" pos:end="189:26">-&gt;</operator><name pos:start="189:27" pos:end="189:28">gb</name></name></expr></argument>, <argument pos:start="189:31" pos:end="189:41"><expr pos:start="189:31" pos:end="189:41"><name pos:start="189:31" pos:end="189:41"><name pos:start="189:31" pos:end="189:31">s</name><operator pos:start="189:32" pos:end="189:33">-&gt;</operator><name pos:start="189:34" pos:end="189:41">last_buf</name></name></expr></argument>, <argument pos:start="189:44" pos:end="189:61"><expr pos:start="189:44" pos:end="189:61"><name pos:start="189:44" pos:end="189:59"><name pos:start="189:44" pos:end="189:44">s</name><operator pos:start="189:45" pos:end="189:46">-&gt;</operator><name pos:start="189:47" pos:end="189:59">last_buf_size</name></name><operator pos:start="189:60" pos:end="189:60">*</operator><literal type="number" pos:start="189:61" pos:end="189:61">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="191:1" pos:end="191:31">#<cpp:directive pos:start="191:2" pos:end="191:3">if</cpp:directive> <expr pos:start="191:5" pos:end="191:31"><operator pos:start="191:5" pos:end="191:5">!</operator><name pos:start="191:6" pos:end="191:31">UNCHECKED_BITSTREAM_READER</name></expr></cpp:if>

        <expr_stmt pos:start="193:9" pos:end="196:0"><expr pos:start="193:9" pos:end="193:50"><name pos:start="193:9" pos:end="193:32"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:13">gb</name><operator pos:start="193:14" pos:end="193:14">.</operator><name pos:start="193:15" pos:end="193:32">size_in_bits_plus8</name></name> <operator pos:start="193:34" pos:end="193:35">+=</operator> <name pos:start="193:37" pos:end="193:46">EXTRABYTES</name> <operator pos:start="193:48" pos:end="193:48">*</operator> <literal type="number" pos:start="193:50" pos:end="193:50">8</literal></expr>;</expr_stmt>

<cpp:endif pos:start="195:1" pos:end="195:6">#<cpp:directive pos:start="195:2" pos:end="195:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="197:9" pos:end="197:31"><expr pos:start="197:9" pos:end="197:30"><name pos:start="197:9" pos:end="197:24"><name pos:start="197:9" pos:end="197:9">s</name><operator pos:start="197:10" pos:end="197:11">-&gt;</operator><name pos:start="197:12" pos:end="197:24">last_buf_size</name></name> <operator pos:start="197:26" pos:end="197:28">&lt;&lt;=</operator> <literal type="number" pos:start="197:30" pos:end="197:30">3</literal></expr>;</expr_stmt>

        <for pos:start="199:9" pos:end="211:9">for <control pos:start="199:13" pos:end="199:105">(<init pos:start="199:14" pos:end="199:28"><expr pos:start="199:14" pos:end="199:19"><name pos:start="199:14" pos:end="199:15">gr</name> <operator pos:start="199:17" pos:end="199:17">=</operator> <literal type="number" pos:start="199:19" pos:end="199:19">0</literal></expr><operator pos:start="199:20" pos:end="199:20">,</operator> <expr pos:start="199:22" pos:end="199:27"><name pos:start="199:22" pos:end="199:23">ch</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <literal type="number" pos:start="199:27" pos:end="199:27">0</literal></expr>;</init> <condition pos:start="199:30" pos:end="199:91"><expr pos:start="199:30" pos:end="199:90"><name pos:start="199:30" pos:end="199:31">gr</name> <operator pos:start="199:33" pos:end="199:33">&lt;</operator> <name pos:start="199:35" pos:end="199:45">nb_granules</name> <operator pos:start="199:47" pos:end="199:48">&amp;&amp;</operator> <operator pos:start="199:50" pos:end="199:50">(</operator><name pos:start="199:51" pos:end="199:66"><name pos:start="199:51" pos:end="199:51">s</name><operator pos:start="199:52" pos:end="199:53">-&gt;</operator><name pos:start="199:54" pos:end="199:66">last_buf_size</name></name> <operator pos:start="199:68" pos:end="199:69">&gt;&gt;</operator> <literal type="number" pos:start="199:71" pos:end="199:71">3</literal><operator pos:start="199:72" pos:end="199:72">)</operator> <operator pos:start="199:74" pos:end="199:74">&lt;</operator> <name pos:start="199:76" pos:end="199:90">main_data_begin</name></expr>;</condition> <incr pos:start="199:93" pos:end="199:104"><expr pos:start="199:93" pos:end="199:96"><name pos:start="199:93" pos:end="199:94">gr</name><operator pos:start="199:95" pos:end="199:96">++</operator></expr><operator pos:start="199:97" pos:end="199:97">,</operator> <expr pos:start="199:99" pos:end="199:104"><name pos:start="199:99" pos:end="199:100">ch</name> <operator pos:start="199:102" pos:end="199:102">=</operator> <literal type="number" pos:start="199:104" pos:end="199:104">0</literal></expr></incr>)</control> <block pos:start="199:107" pos:end="211:9">{<block_content pos:start="201:13" pos:end="209:13">

            <for pos:start="201:13" pos:end="209:13">for <control pos:start="201:17" pos:end="201:90">(<init pos:start="201:18" pos:end="201:18">;</init> <condition pos:start="201:20" pos:end="201:84"><expr pos:start="201:20" pos:end="201:83"><name pos:start="201:20" pos:end="201:21">ch</name> <operator pos:start="201:23" pos:end="201:23">&lt;</operator> <name pos:start="201:25" pos:end="201:38"><name pos:start="201:25" pos:end="201:25">s</name><operator pos:start="201:26" pos:end="201:27">-&gt;</operator><name pos:start="201:28" pos:end="201:38">nb_channels</name></name> <operator pos:start="201:40" pos:end="201:41">&amp;&amp;</operator> <operator pos:start="201:43" pos:end="201:43">(</operator><name pos:start="201:44" pos:end="201:59"><name pos:start="201:44" pos:end="201:44">s</name><operator pos:start="201:45" pos:end="201:46">-&gt;</operator><name pos:start="201:47" pos:end="201:59">last_buf_size</name></name> <operator pos:start="201:61" pos:end="201:62">&gt;&gt;</operator> <literal type="number" pos:start="201:64" pos:end="201:64">3</literal><operator pos:start="201:65" pos:end="201:65">)</operator> <operator pos:start="201:67" pos:end="201:67">&lt;</operator> <name pos:start="201:69" pos:end="201:83">main_data_begin</name></expr>;</condition> <incr pos:start="201:86" pos:end="201:89"><expr pos:start="201:86" pos:end="201:89"><name pos:start="201:86" pos:end="201:87">ch</name><operator pos:start="201:88" pos:end="201:89">++</operator></expr></incr>)</control> <block pos:start="201:92" pos:end="209:13">{<block_content pos:start="203:17" pos:end="207:62">

                <expr_stmt pos:start="203:17" pos:end="203:41"><expr pos:start="203:17" pos:end="203:40"><name pos:start="203:17" pos:end="203:17">g</name> <operator pos:start="203:19" pos:end="203:19">=</operator> <operator pos:start="203:21" pos:end="203:21">&amp;</operator><name pos:start="203:22" pos:end="203:40"><name pos:start="203:22" pos:end="203:22">s</name><operator pos:start="203:23" pos:end="203:24">-&gt;</operator><name pos:start="203:25" pos:end="203:32">granules</name><index pos:start="203:33" pos:end="203:36">[<expr pos:start="203:34" pos:end="203:35"><name pos:start="203:34" pos:end="203:35">ch</name></expr>]</index><index pos:start="203:37" pos:end="203:40">[<expr pos:start="203:38" pos:end="203:39"><name pos:start="203:38" pos:end="203:39">gr</name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:54"><expr pos:start="205:17" pos:end="205:53"><name pos:start="205:17" pos:end="205:32"><name pos:start="205:17" pos:end="205:17">s</name><operator pos:start="205:18" pos:end="205:19">-&gt;</operator><name pos:start="205:20" pos:end="205:32">last_buf_size</name></name> <operator pos:start="205:34" pos:end="205:35">+=</operator> <name pos:start="205:37" pos:end="205:53"><name pos:start="205:37" pos:end="205:37">g</name><operator pos:start="205:38" pos:end="205:39">-&gt;</operator><name pos:start="205:40" pos:end="205:53">part2_3_length</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="207:17" pos:end="207:62"><expr pos:start="207:17" pos:end="207:61"><call pos:start="207:17" pos:end="207:61"><name pos:start="207:17" pos:end="207:22">memset</name><argument_list pos:start="207:23" pos:end="207:61">(<argument pos:start="207:24" pos:end="207:35"><expr pos:start="207:24" pos:end="207:35"><name pos:start="207:24" pos:end="207:35"><name pos:start="207:24" pos:end="207:24">g</name><operator pos:start="207:25" pos:end="207:26">-&gt;</operator><name pos:start="207:27" pos:end="207:35">sb_hybrid</name></name></expr></argument>, <argument pos:start="207:38" pos:end="207:38"><expr pos:start="207:38" pos:end="207:38"><literal type="number" pos:start="207:38" pos:end="207:38">0</literal></expr></argument>, <argument pos:start="207:41" pos:end="207:60"><expr pos:start="207:41" pos:end="207:60"><sizeof pos:start="207:41" pos:end="207:60">sizeof<argument_list pos:start="207:47" pos:end="207:60">(<argument pos:start="207:48" pos:end="207:59"><expr pos:start="207:48" pos:end="207:59"><name pos:start="207:48" pos:end="207:59"><name pos:start="207:48" pos:end="207:48">g</name><operator pos:start="207:49" pos:end="207:50">-&gt;</operator><name pos:start="207:51" pos:end="207:59">sb_hybrid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

        <expr_stmt pos:start="213:9" pos:end="213:71"><expr pos:start="213:9" pos:end="213:70"><call pos:start="213:9" pos:end="213:70"><name pos:start="213:9" pos:end="213:22">skip_bits_long</name><argument_list pos:start="213:23" pos:end="213:70">(<argument pos:start="213:24" pos:end="213:29"><expr pos:start="213:24" pos:end="213:29"><operator pos:start="213:24" pos:end="213:24">&amp;</operator><name pos:start="213:25" pos:end="213:29"><name pos:start="213:25" pos:end="213:25">s</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:29">gb</name></name></expr></argument>, <argument pos:start="213:32" pos:end="213:69"><expr pos:start="213:32" pos:end="213:69"><name pos:start="213:32" pos:end="213:47"><name pos:start="213:32" pos:end="213:32">s</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:47">last_buf_size</name></name> <operator pos:start="213:49" pos:end="213:49">-</operator> <literal type="number" pos:start="213:51" pos:end="213:51">8</literal> <operator pos:start="213:53" pos:end="213:53">*</operator> <name pos:start="213:55" pos:end="213:69">main_data_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="223:9"><if pos:start="215:9" pos:end="223:9">if <condition pos:start="215:12" pos:end="215:76">(<expr pos:start="215:13" pos:end="215:75"><call pos:start="215:13" pos:end="215:34"><name pos:start="215:13" pos:end="215:26">get_bits_count</name><argument_list pos:start="215:27" pos:end="215:34">(<argument pos:start="215:28" pos:end="215:33"><expr pos:start="215:28" pos:end="215:33"><operator pos:start="215:28" pos:end="215:28">&amp;</operator><name pos:start="215:29" pos:end="215:33"><name pos:start="215:29" pos:end="215:29">s</name><operator pos:start="215:30" pos:end="215:31">-&gt;</operator><name pos:start="215:32" pos:end="215:33">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="215:36" pos:end="215:37">&gt;=</operator> <name pos:start="215:39" pos:end="215:56"><name pos:start="215:39" pos:end="215:39">s</name><operator pos:start="215:40" pos:end="215:41">-&gt;</operator><name pos:start="215:42" pos:end="215:43">gb</name><operator pos:start="215:44" pos:end="215:44">.</operator><name pos:start="215:45" pos:end="215:56">size_in_bits</name></name> <operator pos:start="215:58" pos:end="215:59">&amp;&amp;</operator> <name pos:start="215:61" pos:end="215:75"><name pos:start="215:61" pos:end="215:61">s</name><operator pos:start="215:62" pos:end="215:63">-&gt;</operator><name pos:start="215:64" pos:end="215:68">in_gb</name><operator pos:start="215:69" pos:end="215:69">.</operator><name pos:start="215:70" pos:end="215:75">buffer</name></name></expr>)</condition> <block pos:start="215:78" pos:end="223:9">{<block_content pos:start="217:13" pos:end="221:35">

            <expr_stmt pos:start="217:13" pos:end="217:83"><expr pos:start="217:13" pos:end="217:82"><call pos:start="217:13" pos:end="217:82"><name pos:start="217:13" pos:end="217:26">skip_bits_long</name><argument_list pos:start="217:27" pos:end="217:82">(<argument pos:start="217:28" pos:end="217:36"><expr pos:start="217:28" pos:end="217:36"><operator pos:start="217:28" pos:end="217:28">&amp;</operator><name pos:start="217:29" pos:end="217:36"><name pos:start="217:29" pos:end="217:29">s</name><operator pos:start="217:30" pos:end="217:31">-&gt;</operator><name pos:start="217:32" pos:end="217:36">in_gb</name></name></expr></argument>, <argument pos:start="217:39" pos:end="217:81"><expr pos:start="217:39" pos:end="217:81"><call pos:start="217:39" pos:end="217:60"><name pos:start="217:39" pos:end="217:52">get_bits_count</name><argument_list pos:start="217:53" pos:end="217:60">(<argument pos:start="217:54" pos:end="217:59"><expr pos:start="217:54" pos:end="217:59"><operator pos:start="217:54" pos:end="217:54">&amp;</operator><name pos:start="217:55" pos:end="217:59"><name pos:start="217:55" pos:end="217:55">s</name><operator pos:start="217:56" pos:end="217:57">-&gt;</operator><name pos:start="217:58" pos:end="217:59">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="217:62" pos:end="217:62">-</operator> <name pos:start="217:64" pos:end="217:81"><name pos:start="217:64" pos:end="217:64">s</name><operator pos:start="217:65" pos:end="217:66">-&gt;</operator><name pos:start="217:67" pos:end="217:68">gb</name><operator pos:start="217:69" pos:end="217:69">.</operator><name pos:start="217:70" pos:end="217:81">size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:39"><expr pos:start="219:13" pos:end="219:38"><name pos:start="219:13" pos:end="219:17"><name pos:start="219:13" pos:end="219:13">s</name><operator pos:start="219:14" pos:end="219:15">-&gt;</operator><name pos:start="219:16" pos:end="219:17">gb</name></name>           <operator pos:start="219:29" pos:end="219:29">=</operator> <name pos:start="219:31" pos:end="219:38"><name pos:start="219:31" pos:end="219:31">s</name><operator pos:start="219:32" pos:end="219:33">-&gt;</operator><name pos:start="219:34" pos:end="219:38">in_gb</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:35"><expr pos:start="221:13" pos:end="221:34"><name pos:start="221:13" pos:end="221:27"><name pos:start="221:13" pos:end="221:13">s</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:20">in_gb</name><operator pos:start="221:21" pos:end="221:21">.</operator><name pos:start="221:22" pos:end="221:27">buffer</name></name> <operator pos:start="221:29" pos:end="221:29">=</operator> <name pos:start="221:31" pos:end="221:34">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="225:7" pos:end="229:5">else <block pos:start="225:12" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:20">

        <expr_stmt pos:start="227:9" pos:end="227:20"><expr pos:start="227:9" pos:end="227:19"><name pos:start="227:9" pos:end="227:10">gr</name> <operator pos:start="227:12" pos:end="227:12">=</operator> <name pos:start="227:14" pos:end="227:15">ch</name> <operator pos:start="227:17" pos:end="227:17">=</operator> <literal type="number" pos:start="227:19" pos:end="227:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="233:5" pos:end="487:5">for <control pos:start="233:9" pos:end="233:42">(<init pos:start="233:10" pos:end="233:10">;</init> <condition pos:start="233:12" pos:end="233:28"><expr pos:start="233:12" pos:end="233:27"><name pos:start="233:12" pos:end="233:13">gr</name> <operator pos:start="233:15" pos:end="233:15">&lt;</operator> <name pos:start="233:17" pos:end="233:27">nb_granules</name></expr>;</condition> <incr pos:start="233:30" pos:end="233:41"><expr pos:start="233:30" pos:end="233:33"><name pos:start="233:30" pos:end="233:31">gr</name><operator pos:start="233:32" pos:end="233:33">++</operator></expr><operator pos:start="233:34" pos:end="233:34">,</operator> <expr pos:start="233:36" pos:end="233:41"><name pos:start="233:36" pos:end="233:37">ch</name> <operator pos:start="233:39" pos:end="233:39">=</operator> <literal type="number" pos:start="233:41" pos:end="233:41">0</literal></expr></incr>)</control> <block pos:start="233:44" pos:end="487:5">{<block_content pos:start="235:9" pos:end="485:9">

        <for pos:start="235:9" pos:end="463:9">for <control pos:start="235:13" pos:end="235:41">(<init pos:start="235:14" pos:end="235:14">;</init> <condition pos:start="235:16" pos:end="235:35"><expr pos:start="235:16" pos:end="235:34"><name pos:start="235:16" pos:end="235:17">ch</name> <operator pos:start="235:19" pos:end="235:19">&lt;</operator> <name pos:start="235:21" pos:end="235:34"><name pos:start="235:21" pos:end="235:21">s</name><operator pos:start="235:22" pos:end="235:23">-&gt;</operator><name pos:start="235:24" pos:end="235:34">nb_channels</name></name></expr>;</condition> <incr pos:start="235:37" pos:end="235:40"><expr pos:start="235:37" pos:end="235:40"><name pos:start="235:37" pos:end="235:38">ch</name><operator pos:start="235:39" pos:end="235:40">++</operator></expr></incr>)</control> <block pos:start="235:43" pos:end="463:9">{<block_content pos:start="237:13" pos:end="461:74">

            <expr_stmt pos:start="237:13" pos:end="237:37"><expr pos:start="237:13" pos:end="237:36"><name pos:start="237:13" pos:end="237:13">g</name> <operator pos:start="237:15" pos:end="237:15">=</operator> <operator pos:start="237:17" pos:end="237:17">&amp;</operator><name pos:start="237:18" pos:end="237:36"><name pos:start="237:18" pos:end="237:18">s</name><operator pos:start="237:19" pos:end="237:20">-&gt;</operator><name pos:start="237:21" pos:end="237:28">granules</name><index pos:start="237:29" pos:end="237:32">[<expr pos:start="237:30" pos:end="237:31"><name pos:start="237:30" pos:end="237:31">ch</name></expr>]</index><index pos:start="237:33" pos:end="237:36">[<expr pos:start="237:34" pos:end="237:35"><name pos:start="237:34" pos:end="237:35">gr</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:46"><expr pos:start="239:13" pos:end="239:45"><name pos:start="239:13" pos:end="239:20">bits_pos</name> <operator pos:start="239:22" pos:end="239:22">=</operator> <call pos:start="239:24" pos:end="239:45"><name pos:start="239:24" pos:end="239:37">get_bits_count</name><argument_list pos:start="239:38" pos:end="239:45">(<argument pos:start="239:39" pos:end="239:44"><expr pos:start="239:39" pos:end="239:44"><operator pos:start="239:39" pos:end="239:39">&amp;</operator><name pos:start="239:40" pos:end="239:44"><name pos:start="239:40" pos:end="239:40">s</name><operator pos:start="239:41" pos:end="239:42">-&gt;</operator><name pos:start="239:43" pos:end="239:44">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="243:13" pos:end="451:13"><if pos:start="243:13" pos:end="345:13">if <condition pos:start="243:16" pos:end="243:24">(<expr pos:start="243:17" pos:end="243:23"><operator pos:start="243:17" pos:end="243:17">!</operator><name pos:start="243:18" pos:end="243:23"><name pos:start="243:18" pos:end="243:18">s</name><operator pos:start="243:19" pos:end="243:20">-&gt;</operator><name pos:start="243:21" pos:end="243:23">lsf</name></name></expr>)</condition> <block pos:start="243:26" pos:end="345:13">{<block_content pos:start="245:17" pos:end="343:17">

                <decl_stmt pos:start="245:17" pos:end="245:28"><decl pos:start="245:17" pos:end="245:27"><type pos:start="245:17" pos:end="245:25"><name pos:start="245:17" pos:end="245:23">uint8_t</name> <modifier pos:start="245:25" pos:end="245:25">*</modifier></type><name pos:start="245:26" pos:end="245:27">sc</name></decl>;</decl_stmt>

                <decl_stmt pos:start="247:17" pos:end="247:39"><decl pos:start="247:17" pos:end="247:24"><type pos:start="247:17" pos:end="247:19"><name pos:start="247:17" pos:end="247:19">int</name></type> <name pos:start="247:21" pos:end="247:24">slen</name></decl>, <decl pos:start="247:27" pos:end="247:31"><type ref="prev" pos:start="247:17" pos:end="247:19"/><name pos:start="247:27" pos:end="247:31">slen1</name></decl>, <decl pos:start="247:34" pos:end="247:38"><type ref="prev" pos:start="247:17" pos:end="247:19"/><name pos:start="247:34" pos:end="247:38">slen2</name></decl>;</decl_stmt>



                <comment type="block" pos:start="251:17" pos:end="251:41">/* MPEG1 scale factors */</comment>

                <expr_stmt pos:start="253:17" pos:end="253:60"><expr pos:start="253:17" pos:end="253:59"><name pos:start="253:17" pos:end="253:21">slen1</name> <operator pos:start="253:23" pos:end="253:23">=</operator> <name pos:start="253:25" pos:end="253:59"><name pos:start="253:25" pos:end="253:34">slen_table</name><index pos:start="253:35" pos:end="253:37">[<expr pos:start="253:36" pos:end="253:36"><literal type="number" pos:start="253:36" pos:end="253:36">0</literal></expr>]</index><index pos:start="253:38" pos:end="253:59">[<expr pos:start="253:39" pos:end="253:58"><name pos:start="253:39" pos:end="253:58"><name pos:start="253:39" pos:end="253:39">g</name><operator pos:start="253:40" pos:end="253:41">-&gt;</operator><name pos:start="253:42" pos:end="253:58">scalefac_compress</name></name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:60"><expr pos:start="255:17" pos:end="255:59"><name pos:start="255:17" pos:end="255:21">slen2</name> <operator pos:start="255:23" pos:end="255:23">=</operator> <name pos:start="255:25" pos:end="255:59"><name pos:start="255:25" pos:end="255:34">slen_table</name><index pos:start="255:35" pos:end="255:37">[<expr pos:start="255:36" pos:end="255:36"><literal type="number" pos:start="255:36" pos:end="255:36">1</literal></expr>]</index><index pos:start="255:38" pos:end="255:59">[<expr pos:start="255:39" pos:end="255:58"><name pos:start="255:39" pos:end="255:58"><name pos:start="255:39" pos:end="255:39">g</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:58">scalefac_compress</name></name></expr>]</index></name></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:71"><expr pos:start="257:17" pos:end="257:70"><call pos:start="257:17" pos:end="257:70"><name pos:start="257:17" pos:end="257:23">av_dlog</name><argument_list pos:start="257:24" pos:end="257:70">(<argument pos:start="257:25" pos:end="257:32"><expr pos:start="257:25" pos:end="257:32"><name pos:start="257:25" pos:end="257:32"><name pos:start="257:25" pos:end="257:25">s</name><operator pos:start="257:26" pos:end="257:27">-&gt;</operator><name pos:start="257:28" pos:end="257:32">avctx</name></name></expr></argument>, <argument pos:start="257:35" pos:end="257:55"><expr pos:start="257:35" pos:end="257:55"><literal type="string" pos:start="257:35" pos:end="257:55">"slen1=%d slen2=%d\n"</literal></expr></argument>, <argument pos:start="257:58" pos:end="257:62"><expr pos:start="257:58" pos:end="257:62"><name pos:start="257:58" pos:end="257:62">slen1</name></expr></argument>, <argument pos:start="257:65" pos:end="257:69"><expr pos:start="257:65" pos:end="257:69"><name pos:start="257:65" pos:end="257:69">slen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="259:17" pos:end="343:17"><if pos:start="259:17" pos:end="297:17">if <condition pos:start="259:20" pos:end="259:39">(<expr pos:start="259:21" pos:end="259:38"><name pos:start="259:21" pos:end="259:33"><name pos:start="259:21" pos:end="259:21">g</name><operator pos:start="259:22" pos:end="259:23">-&gt;</operator><name pos:start="259:24" pos:end="259:33">block_type</name></name> <operator pos:start="259:35" pos:end="259:36">==</operator> <literal type="number" pos:start="259:38" pos:end="259:38">2</literal></expr>)</condition> <block pos:start="259:41" pos:end="297:17">{<block_content pos:start="261:21" pos:end="295:21">

                    <expr_stmt pos:start="261:21" pos:end="261:50"><expr pos:start="261:21" pos:end="261:49"><name pos:start="261:21" pos:end="261:21">n</name> <operator pos:start="261:23" pos:end="261:23">=</operator> <ternary pos:start="261:25" pos:end="261:49"><condition pos:start="261:25" pos:end="261:41"><expr pos:start="261:25" pos:end="261:39"><name pos:start="261:25" pos:end="261:39"><name pos:start="261:25" pos:end="261:25">g</name><operator pos:start="261:26" pos:end="261:27">-&gt;</operator><name pos:start="261:28" pos:end="261:39">switch_point</name></name></expr> ?</condition><then pos:start="261:43" pos:end="261:44"> <expr pos:start="261:43" pos:end="261:44"><literal type="number" pos:start="261:43" pos:end="261:44">17</literal></expr> </then><else pos:start="261:46" pos:end="261:49">: <expr pos:start="261:48" pos:end="261:49"><literal type="number" pos:start="261:48" pos:end="261:49">18</literal></expr></else></ternary></expr>;</expr_stmt>

                    <expr_stmt pos:start="263:21" pos:end="263:26"><expr pos:start="263:21" pos:end="263:25"><name pos:start="263:21" pos:end="263:21">j</name> <operator pos:start="263:23" pos:end="263:23">=</operator> <literal type="number" pos:start="263:25" pos:end="263:25">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="265:21" pos:end="277:21"><if pos:start="265:21" pos:end="271:21">if <condition pos:start="265:24" pos:end="265:30">(<expr pos:start="265:25" pos:end="265:29"><name pos:start="265:25" pos:end="265:29">slen1</name></expr>)</condition> <block pos:start="265:32" pos:end="271:21">{<block_content pos:start="267:25" pos:end="269:76">

                        <for pos:start="267:25" pos:end="269:76">for <control pos:start="267:29" pos:end="267:47">(<init pos:start="267:30" pos:end="267:35"><expr pos:start="267:30" pos:end="267:34"><name pos:start="267:30" pos:end="267:30">i</name> <operator pos:start="267:32" pos:end="267:32">=</operator> <literal type="number" pos:start="267:34" pos:end="267:34">0</literal></expr>;</init> <condition pos:start="267:37" pos:end="267:42"><expr pos:start="267:37" pos:end="267:41"><name pos:start="267:37" pos:end="267:37">i</name> <operator pos:start="267:39" pos:end="267:39">&lt;</operator> <name pos:start="267:41" pos:end="267:41">n</name></expr>;</condition> <incr pos:start="267:44" pos:end="267:46"><expr pos:start="267:44" pos:end="267:46"><name pos:start="267:44" pos:end="267:44">i</name><operator pos:start="267:45" pos:end="267:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="269:29" pos:end="269:76"><block_content pos:start="269:29" pos:end="269:76">

                            <expr_stmt pos:start="269:29" pos:end="269:76"><expr pos:start="269:29" pos:end="269:75"><name pos:start="269:29" pos:end="269:49"><name pos:start="269:29" pos:end="269:29">g</name><operator pos:start="269:30" pos:end="269:31">-&gt;</operator><name pos:start="269:32" pos:end="269:44">scale_factors</name><index pos:start="269:45" pos:end="269:49">[<expr pos:start="269:46" pos:end="269:48"><name pos:start="269:46" pos:end="269:46">j</name><operator pos:start="269:47" pos:end="269:48">++</operator></expr>]</index></name> <operator pos:start="269:51" pos:end="269:51">=</operator> <call pos:start="269:53" pos:end="269:75"><name pos:start="269:53" pos:end="269:60">get_bits</name><argument_list pos:start="269:61" pos:end="269:75">(<argument pos:start="269:62" pos:end="269:67"><expr pos:start="269:62" pos:end="269:67"><operator pos:start="269:62" pos:end="269:62">&amp;</operator><name pos:start="269:63" pos:end="269:67"><name pos:start="269:63" pos:end="269:63">s</name><operator pos:start="269:64" pos:end="269:65">-&gt;</operator><name pos:start="269:66" pos:end="269:67">gb</name></name></expr></argument>, <argument pos:start="269:70" pos:end="269:74"><expr pos:start="269:70" pos:end="269:74"><name pos:start="269:70" pos:end="269:74">slen1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="271:23" pos:end="277:21">else <block pos:start="271:28" pos:end="277:21">{<block_content pos:start="273:25" pos:end="275:54">

                        <for pos:start="273:25" pos:end="275:54">for <control pos:start="273:29" pos:end="273:47">(<init pos:start="273:30" pos:end="273:35"><expr pos:start="273:30" pos:end="273:34"><name pos:start="273:30" pos:end="273:30">i</name> <operator pos:start="273:32" pos:end="273:32">=</operator> <literal type="number" pos:start="273:34" pos:end="273:34">0</literal></expr>;</init> <condition pos:start="273:37" pos:end="273:42"><expr pos:start="273:37" pos:end="273:41"><name pos:start="273:37" pos:end="273:37">i</name> <operator pos:start="273:39" pos:end="273:39">&lt;</operator> <name pos:start="273:41" pos:end="273:41">n</name></expr>;</condition> <incr pos:start="273:44" pos:end="273:46"><expr pos:start="273:44" pos:end="273:46"><name pos:start="273:44" pos:end="273:44">i</name><operator pos:start="273:45" pos:end="273:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="275:29" pos:end="275:54"><block_content pos:start="275:29" pos:end="275:54">

                            <expr_stmt pos:start="275:29" pos:end="275:54"><expr pos:start="275:29" pos:end="275:53"><name pos:start="275:29" pos:end="275:49"><name pos:start="275:29" pos:end="275:29">g</name><operator pos:start="275:30" pos:end="275:31">-&gt;</operator><name pos:start="275:32" pos:end="275:44">scale_factors</name><index pos:start="275:45" pos:end="275:49">[<expr pos:start="275:46" pos:end="275:48"><name pos:start="275:46" pos:end="275:46">j</name><operator pos:start="275:47" pos:end="275:48">++</operator></expr>]</index></name> <operator pos:start="275:51" pos:end="275:51">=</operator> <literal type="number" pos:start="275:53" pos:end="275:53">0</literal></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="279:21" pos:end="295:21"><if pos:start="279:21" pos:end="289:21">if <condition pos:start="279:24" pos:end="279:30">(<expr pos:start="279:25" pos:end="279:29"><name pos:start="279:25" pos:end="279:29">slen2</name></expr>)</condition> <block pos:start="279:32" pos:end="289:21">{<block_content pos:start="281:25" pos:end="287:54">

                        <for pos:start="281:25" pos:end="283:76">for <control pos:start="281:29" pos:end="281:48">(<init pos:start="281:30" pos:end="281:35"><expr pos:start="281:30" pos:end="281:34"><name pos:start="281:30" pos:end="281:30">i</name> <operator pos:start="281:32" pos:end="281:32">=</operator> <literal type="number" pos:start="281:34" pos:end="281:34">0</literal></expr>;</init> <condition pos:start="281:37" pos:end="281:43"><expr pos:start="281:37" pos:end="281:42"><name pos:start="281:37" pos:end="281:37">i</name> <operator pos:start="281:39" pos:end="281:39">&lt;</operator> <literal type="number" pos:start="281:41" pos:end="281:42">18</literal></expr>;</condition> <incr pos:start="281:45" pos:end="281:47"><expr pos:start="281:45" pos:end="281:47"><name pos:start="281:45" pos:end="281:45">i</name><operator pos:start="281:46" pos:end="281:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="283:29" pos:end="283:76"><block_content pos:start="283:29" pos:end="283:76">

                            <expr_stmt pos:start="283:29" pos:end="283:76"><expr pos:start="283:29" pos:end="283:75"><name pos:start="283:29" pos:end="283:49"><name pos:start="283:29" pos:end="283:29">g</name><operator pos:start="283:30" pos:end="283:31">-&gt;</operator><name pos:start="283:32" pos:end="283:44">scale_factors</name><index pos:start="283:45" pos:end="283:49">[<expr pos:start="283:46" pos:end="283:48"><name pos:start="283:46" pos:end="283:46">j</name><operator pos:start="283:47" pos:end="283:48">++</operator></expr>]</index></name> <operator pos:start="283:51" pos:end="283:51">=</operator> <call pos:start="283:53" pos:end="283:75"><name pos:start="283:53" pos:end="283:60">get_bits</name><argument_list pos:start="283:61" pos:end="283:75">(<argument pos:start="283:62" pos:end="283:67"><expr pos:start="283:62" pos:end="283:67"><operator pos:start="283:62" pos:end="283:62">&amp;</operator><name pos:start="283:63" pos:end="283:67"><name pos:start="283:63" pos:end="283:63">s</name><operator pos:start="283:64" pos:end="283:65">-&gt;</operator><name pos:start="283:66" pos:end="283:67">gb</name></name></expr></argument>, <argument pos:start="283:70" pos:end="283:74"><expr pos:start="283:70" pos:end="283:74"><name pos:start="283:70" pos:end="283:74">slen2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                        <for pos:start="285:25" pos:end="287:54">for <control pos:start="285:29" pos:end="285:47">(<init pos:start="285:30" pos:end="285:35"><expr pos:start="285:30" pos:end="285:34"><name pos:start="285:30" pos:end="285:30">i</name> <operator pos:start="285:32" pos:end="285:32">=</operator> <literal type="number" pos:start="285:34" pos:end="285:34">0</literal></expr>;</init> <condition pos:start="285:37" pos:end="285:42"><expr pos:start="285:37" pos:end="285:41"><name pos:start="285:37" pos:end="285:37">i</name> <operator pos:start="285:39" pos:end="285:39">&lt;</operator> <literal type="number" pos:start="285:41" pos:end="285:41">3</literal></expr>;</condition> <incr pos:start="285:44" pos:end="285:46"><expr pos:start="285:44" pos:end="285:46"><name pos:start="285:44" pos:end="285:44">i</name><operator pos:start="285:45" pos:end="285:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="287:29" pos:end="287:54"><block_content pos:start="287:29" pos:end="287:54">

                            <expr_stmt pos:start="287:29" pos:end="287:54"><expr pos:start="287:29" pos:end="287:53"><name pos:start="287:29" pos:end="287:49"><name pos:start="287:29" pos:end="287:29">g</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:44">scale_factors</name><index pos:start="287:45" pos:end="287:49">[<expr pos:start="287:46" pos:end="287:48"><name pos:start="287:46" pos:end="287:46">j</name><operator pos:start="287:47" pos:end="287:48">++</operator></expr>]</index></name> <operator pos:start="287:51" pos:end="287:51">=</operator> <literal type="number" pos:start="287:53" pos:end="287:53">0</literal></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="289:23" pos:end="295:21">else <block pos:start="289:28" pos:end="295:21">{<block_content pos:start="291:25" pos:end="293:54">

                        <for pos:start="291:25" pos:end="293:54">for <control pos:start="291:29" pos:end="291:48">(<init pos:start="291:30" pos:end="291:35"><expr pos:start="291:30" pos:end="291:34"><name pos:start="291:30" pos:end="291:30">i</name> <operator pos:start="291:32" pos:end="291:32">=</operator> <literal type="number" pos:start="291:34" pos:end="291:34">0</literal></expr>;</init> <condition pos:start="291:37" pos:end="291:43"><expr pos:start="291:37" pos:end="291:42"><name pos:start="291:37" pos:end="291:37">i</name> <operator pos:start="291:39" pos:end="291:39">&lt;</operator> <literal type="number" pos:start="291:41" pos:end="291:42">21</literal></expr>;</condition> <incr pos:start="291:45" pos:end="291:47"><expr pos:start="291:45" pos:end="291:47"><name pos:start="291:45" pos:end="291:45">i</name><operator pos:start="291:46" pos:end="291:47">++</operator></expr></incr>)</control><block type="pseudo" pos:start="293:29" pos:end="293:54"><block_content pos:start="293:29" pos:end="293:54">

                            <expr_stmt pos:start="293:29" pos:end="293:54"><expr pos:start="293:29" pos:end="293:53"><name pos:start="293:29" pos:end="293:49"><name pos:start="293:29" pos:end="293:29">g</name><operator pos:start="293:30" pos:end="293:31">-&gt;</operator><name pos:start="293:32" pos:end="293:44">scale_factors</name><index pos:start="293:45" pos:end="293:49">[<expr pos:start="293:46" pos:end="293:48"><name pos:start="293:46" pos:end="293:46">j</name><operator pos:start="293:47" pos:end="293:48">++</operator></expr>]</index></name> <operator pos:start="293:51" pos:end="293:51">=</operator> <literal type="number" pos:start="293:53" pos:end="293:53">0</literal></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="297:19" pos:end="343:17">else <block pos:start="297:24" pos:end="343:17">{<block_content pos:start="299:21" pos:end="341:46">

                    <expr_stmt pos:start="299:21" pos:end="299:58"><expr pos:start="299:21" pos:end="299:57"><name pos:start="299:21" pos:end="299:22">sc</name> <operator pos:start="299:24" pos:end="299:24">=</operator> <name pos:start="299:26" pos:end="299:43"><name pos:start="299:26" pos:end="299:26">s</name><operator pos:start="299:27" pos:end="299:28">-&gt;</operator><name pos:start="299:29" pos:end="299:36">granules</name><index pos:start="299:37" pos:end="299:40">[<expr pos:start="299:38" pos:end="299:39"><name pos:start="299:38" pos:end="299:39">ch</name></expr>]</index><index pos:start="299:41" pos:end="299:43">[<expr pos:start="299:42" pos:end="299:42"><literal type="number" pos:start="299:42" pos:end="299:42">0</literal></expr>]</index></name><operator pos:start="299:44" pos:end="299:44">.</operator><name pos:start="299:45" pos:end="299:57">scale_factors</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="301:21" pos:end="301:26"><expr pos:start="301:21" pos:end="301:25"><name pos:start="301:21" pos:end="301:21">j</name> <operator pos:start="301:23" pos:end="301:23">=</operator> <literal type="number" pos:start="301:25" pos:end="301:25">0</literal></expr>;</expr_stmt>

                    <for pos:start="303:21" pos:end="339:21">for <control pos:start="303:25" pos:end="303:43">(<init pos:start="303:26" pos:end="303:31"><expr pos:start="303:26" pos:end="303:30"><name pos:start="303:26" pos:end="303:26">k</name> <operator pos:start="303:28" pos:end="303:28">=</operator> <literal type="number" pos:start="303:30" pos:end="303:30">0</literal></expr>;</init> <condition pos:start="303:33" pos:end="303:38"><expr pos:start="303:33" pos:end="303:37"><name pos:start="303:33" pos:end="303:33">k</name> <operator pos:start="303:35" pos:end="303:35">&lt;</operator> <literal type="number" pos:start="303:37" pos:end="303:37">4</literal></expr>;</condition> <incr pos:start="303:40" pos:end="303:42"><expr pos:start="303:40" pos:end="303:42"><name pos:start="303:40" pos:end="303:40">k</name><operator pos:start="303:41" pos:end="303:42">++</operator></expr></incr>)</control> <block pos:start="303:45" pos:end="339:21">{<block_content pos:start="305:25" pos:end="337:25">

                        <expr_stmt pos:start="305:25" pos:end="305:43"><expr pos:start="305:25" pos:end="305:42"><name pos:start="305:25" pos:end="305:25">n</name> <operator pos:start="305:27" pos:end="305:27">=</operator> <ternary pos:start="305:29" pos:end="305:42"><condition pos:start="305:29" pos:end="305:36"><expr pos:start="305:29" pos:end="305:34"><name pos:start="305:29" pos:end="305:29">k</name> <operator pos:start="305:31" pos:end="305:32">==</operator> <literal type="number" pos:start="305:34" pos:end="305:34">0</literal></expr> ?</condition><then pos:start="305:38" pos:end="305:38"> <expr pos:start="305:38" pos:end="305:38"><literal type="number" pos:start="305:38" pos:end="305:38">6</literal></expr> </then><else pos:start="305:40" pos:end="305:42">: <expr pos:start="305:42" pos:end="305:42"><literal type="number" pos:start="305:42" pos:end="305:42">5</literal></expr></else></ternary></expr>;</expr_stmt>

                        <if_stmt pos:start="307:25" pos:end="337:25"><if pos:start="307:25" pos:end="325:25">if <condition pos:start="307:28" pos:end="307:57">(<expr pos:start="307:29" pos:end="307:56"><operator pos:start="307:29" pos:end="307:29">(</operator><name pos:start="307:30" pos:end="307:37"><name pos:start="307:30" pos:end="307:30">g</name><operator pos:start="307:31" pos:end="307:32">-&gt;</operator><name pos:start="307:33" pos:end="307:37">scfsi</name></name> <operator pos:start="307:39" pos:end="307:39">&amp;</operator> <operator pos:start="307:41" pos:end="307:41">(</operator><literal type="number" pos:start="307:42" pos:end="307:44">0x8</literal> <operator pos:start="307:46" pos:end="307:47">&gt;&gt;</operator> <name pos:start="307:49" pos:end="307:49">k</name><operator pos:start="307:50" pos:end="307:50">)</operator><operator pos:start="307:51" pos:end="307:51">)</operator> <operator pos:start="307:53" pos:end="307:54">==</operator> <literal type="number" pos:start="307:56" pos:end="307:56">0</literal></expr>)</condition> <block pos:start="307:59" pos:end="325:25">{<block_content pos:start="309:29" pos:end="323:29">

                            <expr_stmt pos:start="309:29" pos:end="309:59"><expr pos:start="309:29" pos:end="309:58"><name pos:start="309:29" pos:end="309:32">slen</name> <operator pos:start="309:34" pos:end="309:34">=</operator> <ternary pos:start="309:36" pos:end="309:58"><condition pos:start="309:36" pos:end="309:44"><expr pos:start="309:36" pos:end="309:42"><operator pos:start="309:36" pos:end="309:36">(</operator><name pos:start="309:37" pos:end="309:37">k</name> <operator pos:start="309:39" pos:end="309:39">&lt;</operator> <literal type="number" pos:start="309:41" pos:end="309:41">2</literal><operator pos:start="309:42" pos:end="309:42">)</operator></expr> ?</condition><then pos:start="309:46" pos:end="309:50"> <expr pos:start="309:46" pos:end="309:50"><name pos:start="309:46" pos:end="309:50">slen1</name></expr> </then><else pos:start="309:52" pos:end="309:58">: <expr pos:start="309:54" pos:end="309:58"><name pos:start="309:54" pos:end="309:58">slen2</name></expr></else></ternary></expr>;</expr_stmt>

                            <if_stmt pos:start="311:29" pos:end="323:29"><if pos:start="311:29" pos:end="317:29">if <condition pos:start="311:32" pos:end="311:37">(<expr pos:start="311:33" pos:end="311:36"><name pos:start="311:33" pos:end="311:36">slen</name></expr>)</condition> <block pos:start="311:39" pos:end="317:29">{<block_content pos:start="313:33" pos:end="315:83">

                                <for pos:start="313:33" pos:end="315:83">for <control pos:start="313:37" pos:end="313:55">(<init pos:start="313:38" pos:end="313:43"><expr pos:start="313:38" pos:end="313:42"><name pos:start="313:38" pos:end="313:38">i</name> <operator pos:start="313:40" pos:end="313:40">=</operator> <literal type="number" pos:start="313:42" pos:end="313:42">0</literal></expr>;</init> <condition pos:start="313:45" pos:end="313:50"><expr pos:start="313:45" pos:end="313:49"><name pos:start="313:45" pos:end="313:45">i</name> <operator pos:start="313:47" pos:end="313:47">&lt;</operator> <name pos:start="313:49" pos:end="313:49">n</name></expr>;</condition> <incr pos:start="313:52" pos:end="313:54"><expr pos:start="313:52" pos:end="313:54"><name pos:start="313:52" pos:end="313:52">i</name><operator pos:start="313:53" pos:end="313:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="315:37" pos:end="315:83"><block_content pos:start="315:37" pos:end="315:83">

                                    <expr_stmt pos:start="315:37" pos:end="315:83"><expr pos:start="315:37" pos:end="315:82"><name pos:start="315:37" pos:end="315:57"><name pos:start="315:37" pos:end="315:37">g</name><operator pos:start="315:38" pos:end="315:39">-&gt;</operator><name pos:start="315:40" pos:end="315:52">scale_factors</name><index pos:start="315:53" pos:end="315:57">[<expr pos:start="315:54" pos:end="315:56"><name pos:start="315:54" pos:end="315:54">j</name><operator pos:start="315:55" pos:end="315:56">++</operator></expr>]</index></name> <operator pos:start="315:59" pos:end="315:59">=</operator> <call pos:start="315:61" pos:end="315:82"><name pos:start="315:61" pos:end="315:68">get_bits</name><argument_list pos:start="315:69" pos:end="315:82">(<argument pos:start="315:70" pos:end="315:75"><expr pos:start="315:70" pos:end="315:75"><operator pos:start="315:70" pos:end="315:70">&amp;</operator><name pos:start="315:71" pos:end="315:75"><name pos:start="315:71" pos:end="315:71">s</name><operator pos:start="315:72" pos:end="315:73">-&gt;</operator><name pos:start="315:74" pos:end="315:75">gb</name></name></expr></argument>, <argument pos:start="315:78" pos:end="315:81"><expr pos:start="315:78" pos:end="315:81"><name pos:start="315:78" pos:end="315:81">slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></if> <else pos:start="317:31" pos:end="323:29">else <block pos:start="317:36" pos:end="323:29">{<block_content pos:start="319:33" pos:end="321:62">

                                <for pos:start="319:33" pos:end="321:62">for <control pos:start="319:37" pos:end="319:55">(<init pos:start="319:38" pos:end="319:43"><expr pos:start="319:38" pos:end="319:42"><name pos:start="319:38" pos:end="319:38">i</name> <operator pos:start="319:40" pos:end="319:40">=</operator> <literal type="number" pos:start="319:42" pos:end="319:42">0</literal></expr>;</init> <condition pos:start="319:45" pos:end="319:50"><expr pos:start="319:45" pos:end="319:49"><name pos:start="319:45" pos:end="319:45">i</name> <operator pos:start="319:47" pos:end="319:47">&lt;</operator> <name pos:start="319:49" pos:end="319:49">n</name></expr>;</condition> <incr pos:start="319:52" pos:end="319:54"><expr pos:start="319:52" pos:end="319:54"><name pos:start="319:52" pos:end="319:52">i</name><operator pos:start="319:53" pos:end="319:54">++</operator></expr></incr>)</control><block type="pseudo" pos:start="321:37" pos:end="321:62"><block_content pos:start="321:37" pos:end="321:62">

                                    <expr_stmt pos:start="321:37" pos:end="321:62"><expr pos:start="321:37" pos:end="321:61"><name pos:start="321:37" pos:end="321:57"><name pos:start="321:37" pos:end="321:37">g</name><operator pos:start="321:38" pos:end="321:39">-&gt;</operator><name pos:start="321:40" pos:end="321:52">scale_factors</name><index pos:start="321:53" pos:end="321:57">[<expr pos:start="321:54" pos:end="321:56"><name pos:start="321:54" pos:end="321:54">j</name><operator pos:start="321:55" pos:end="321:56">++</operator></expr>]</index></name> <operator pos:start="321:59" pos:end="321:59">=</operator> <literal type="number" pos:start="321:61" pos:end="321:61">0</literal></expr>;</expr_stmt></block_content></block></for>

                            </block_content>}</block></else></if_stmt>

                        </block_content>}</block></if> <else pos:start="325:27" pos:end="337:25">else <block pos:start="325:32" pos:end="337:25">{<block_content pos:start="329:29" pos:end="335:29">

                            <comment type="block" pos:start="327:29" pos:end="327:63">/* simply copy from last granule */</comment>

                            <for pos:start="329:29" pos:end="335:29">for <control pos:start="329:33" pos:end="329:51">(<init pos:start="329:34" pos:end="329:39"><expr pos:start="329:34" pos:end="329:38"><name pos:start="329:34" pos:end="329:34">i</name> <operator pos:start="329:36" pos:end="329:36">=</operator> <literal type="number" pos:start="329:38" pos:end="329:38">0</literal></expr>;</init> <condition pos:start="329:41" pos:end="329:46"><expr pos:start="329:41" pos:end="329:45"><name pos:start="329:41" pos:end="329:41">i</name> <operator pos:start="329:43" pos:end="329:43">&lt;</operator> <name pos:start="329:45" pos:end="329:45">n</name></expr>;</condition> <incr pos:start="329:48" pos:end="329:50"><expr pos:start="329:48" pos:end="329:50"><name pos:start="329:48" pos:end="329:48">i</name><operator pos:start="329:49" pos:end="329:50">++</operator></expr></incr>)</control> <block pos:start="329:53" pos:end="335:29">{<block_content pos:start="331:33" pos:end="333:36">

                                <expr_stmt pos:start="331:33" pos:end="331:60"><expr pos:start="331:33" pos:end="331:59"><name pos:start="331:33" pos:end="331:51"><name pos:start="331:33" pos:end="331:33">g</name><operator pos:start="331:34" pos:end="331:35">-&gt;</operator><name pos:start="331:36" pos:end="331:48">scale_factors</name><index pos:start="331:49" pos:end="331:51">[<expr pos:start="331:50" pos:end="331:50"><name pos:start="331:50" pos:end="331:50">j</name></expr>]</index></name> <operator pos:start="331:53" pos:end="331:53">=</operator> <name pos:start="331:55" pos:end="331:59"><name pos:start="331:55" pos:end="331:56">sc</name><index pos:start="331:57" pos:end="331:59">[<expr pos:start="331:58" pos:end="331:58"><name pos:start="331:58" pos:end="331:58">j</name></expr>]</index></name></expr>;</expr_stmt>

                                <expr_stmt pos:start="333:33" pos:end="333:36"><expr pos:start="333:33" pos:end="333:35"><name pos:start="333:33" pos:end="333:33">j</name><operator pos:start="333:34" pos:end="333:35">++</operator></expr>;</expr_stmt>

                            </block_content>}</block></for>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></for>

                    <expr_stmt pos:start="341:21" pos:end="341:46"><expr pos:start="341:21" pos:end="341:45"><name pos:start="341:21" pos:end="341:41"><name pos:start="341:21" pos:end="341:21">g</name><operator pos:start="341:22" pos:end="341:23">-&gt;</operator><name pos:start="341:24" pos:end="341:36">scale_factors</name><index pos:start="341:37" pos:end="341:41">[<expr pos:start="341:38" pos:end="341:40"><name pos:start="341:38" pos:end="341:38">j</name><operator pos:start="341:39" pos:end="341:40">++</operator></expr>]</index></name> <operator pos:start="341:43" pos:end="341:43">=</operator> <literal type="number" pos:start="341:45" pos:end="341:45">0</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="345:15" pos:end="451:13">else <block pos:start="345:20" pos:end="451:13">{<block_content pos:start="347:17" pos:end="449:44">

                <decl_stmt pos:start="347:17" pos:end="347:53"><decl pos:start="347:17" pos:end="347:26"><type pos:start="347:17" pos:end="347:19"><name pos:start="347:17" pos:end="347:19">int</name></type> <name pos:start="347:21" pos:end="347:26">tindex</name></decl>, <decl pos:start="347:29" pos:end="347:35"><type ref="prev" pos:start="347:17" pos:end="347:19"/><name pos:start="347:29" pos:end="347:35">tindex2</name></decl>, <decl pos:start="347:38" pos:end="347:44"><type ref="prev" pos:start="347:17" pos:end="347:19"/><name pos:start="347:38" pos:end="347:44"><name pos:start="347:38" pos:end="347:41">slen</name><index pos:start="347:42" pos:end="347:44">[<expr pos:start="347:43" pos:end="347:43"><literal type="number" pos:start="347:43" pos:end="347:43">4</literal></expr>]</index></name></decl>, <decl pos:start="347:47" pos:end="347:48"><type ref="prev" pos:start="347:17" pos:end="347:19"/><name pos:start="347:47" pos:end="347:48">sl</name></decl>, <decl pos:start="347:51" pos:end="347:52"><type ref="prev" pos:start="347:17" pos:end="347:19"/><name pos:start="347:51" pos:end="347:52">sf</name></decl>;</decl_stmt>



                <comment type="block" pos:start="351:17" pos:end="351:39">/* LSF scale factors */</comment>

                <if_stmt pos:start="353:17" pos:end="359:31"><if pos:start="353:17" pos:end="355:53">if <condition pos:start="353:20" pos:end="353:39">(<expr pos:start="353:21" pos:end="353:38"><name pos:start="353:21" pos:end="353:33"><name pos:start="353:21" pos:end="353:21">g</name><operator pos:start="353:22" pos:end="353:23">-&gt;</operator><name pos:start="353:24" pos:end="353:33">block_type</name></name> <operator pos:start="353:35" pos:end="353:36">==</operator> <literal type="number" pos:start="353:38" pos:end="353:38">2</literal></expr>)</condition><block type="pseudo" pos:start="355:21" pos:end="355:53"><block_content pos:start="355:21" pos:end="355:53">

                    <expr_stmt pos:start="355:21" pos:end="355:53"><expr pos:start="355:21" pos:end="355:52"><name pos:start="355:21" pos:end="355:26">tindex</name> <operator pos:start="355:28" pos:end="355:28">=</operator> <ternary pos:start="355:30" pos:end="355:52"><condition pos:start="355:30" pos:end="355:46"><expr pos:start="355:30" pos:end="355:44"><name pos:start="355:30" pos:end="355:44"><name pos:start="355:30" pos:end="355:30">g</name><operator pos:start="355:31" pos:end="355:32">-&gt;</operator><name pos:start="355:33" pos:end="355:44">switch_point</name></name></expr> ?</condition><then pos:start="355:48" pos:end="355:48"> <expr pos:start="355:48" pos:end="355:48"><literal type="number" pos:start="355:48" pos:end="355:48">2</literal></expr> </then><else pos:start="355:50" pos:end="355:52">: <expr pos:start="355:52" pos:end="355:52"><literal type="number" pos:start="355:52" pos:end="355:52">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="357:17" pos:end="359:31">else<block type="pseudo" pos:start="359:21" pos:end="359:31"><block_content pos:start="359:21" pos:end="359:31">

                    <expr_stmt pos:start="359:21" pos:end="359:31"><expr pos:start="359:21" pos:end="359:30"><name pos:start="359:21" pos:end="359:26">tindex</name> <operator pos:start="359:28" pos:end="359:28">=</operator> <literal type="number" pos:start="359:30" pos:end="359:30">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="363:17" pos:end="363:42"><expr pos:start="363:17" pos:end="363:41"><name pos:start="363:17" pos:end="363:18">sf</name> <operator pos:start="363:20" pos:end="363:20">=</operator> <name pos:start="363:22" pos:end="363:41"><name pos:start="363:22" pos:end="363:22">g</name><operator pos:start="363:23" pos:end="363:24">-&gt;</operator><name pos:start="363:25" pos:end="363:41">scalefac_compress</name></name></expr>;</expr_stmt>

                <if_stmt pos:start="365:17" pos:end="417:17"><if pos:start="365:17" pos:end="391:17">if <condition pos:start="365:20" pos:end="365:65">(<expr pos:start="365:21" pos:end="365:64"><operator pos:start="365:21" pos:end="365:21">(</operator><name pos:start="365:22" pos:end="365:32"><name pos:start="365:22" pos:end="365:22">s</name><operator pos:start="365:23" pos:end="365:24">-&gt;</operator><name pos:start="365:25" pos:end="365:32">mode_ext</name></name> <operator pos:start="365:34" pos:end="365:34">&amp;</operator> <name pos:start="365:36" pos:end="365:52">MODE_EXT_I_STEREO</name><operator pos:start="365:53" pos:end="365:53">)</operator> <operator pos:start="365:55" pos:end="365:56">&amp;&amp;</operator> <name pos:start="365:58" pos:end="365:59">ch</name> <operator pos:start="365:61" pos:end="365:62">==</operator> <literal type="number" pos:start="365:64" pos:end="365:64">1</literal></expr>)</condition> <block pos:start="365:67" pos:end="391:17">{<block_content pos:start="369:21" pos:end="389:21">

                    <comment type="block" pos:start="367:21" pos:end="367:47">/* intensity stereo case */</comment>

                    <expr_stmt pos:start="369:21" pos:end="369:29"><expr pos:start="369:21" pos:end="369:28"><name pos:start="369:21" pos:end="369:22">sf</name> <operator pos:start="369:24" pos:end="369:26">&gt;&gt;=</operator> <literal type="number" pos:start="369:28" pos:end="369:28">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="371:21" pos:end="389:21"><if pos:start="371:21" pos:end="377:21">if <condition pos:start="371:24" pos:end="371:33">(<expr pos:start="371:25" pos:end="371:32"><name pos:start="371:25" pos:end="371:26">sf</name> <operator pos:start="371:28" pos:end="371:28">&lt;</operator> <literal type="number" pos:start="371:30" pos:end="371:32">180</literal></expr>)</condition> <block pos:start="371:35" pos:end="377:21">{<block_content pos:start="373:25" pos:end="375:36">

                        <expr_stmt pos:start="373:25" pos:end="373:57"><expr pos:start="373:25" pos:end="373:56"><call pos:start="373:25" pos:end="373:56"><name pos:start="373:25" pos:end="373:37">lsf_sf_expand</name><argument_list pos:start="373:38" pos:end="373:56">(<argument pos:start="373:39" pos:end="373:42"><expr pos:start="373:39" pos:end="373:42"><name pos:start="373:39" pos:end="373:42">slen</name></expr></argument>, <argument pos:start="373:45" pos:end="373:46"><expr pos:start="373:45" pos:end="373:46"><name pos:start="373:45" pos:end="373:46">sf</name></expr></argument>, <argument pos:start="373:49" pos:end="373:49"><expr pos:start="373:49" pos:end="373:49"><literal type="number" pos:start="373:49" pos:end="373:49">6</literal></expr></argument>, <argument pos:start="373:52" pos:end="373:52"><expr pos:start="373:52" pos:end="373:52"><literal type="number" pos:start="373:52" pos:end="373:52">6</literal></expr></argument>, <argument pos:start="373:55" pos:end="373:55"><expr pos:start="373:55" pos:end="373:55"><literal type="number" pos:start="373:55" pos:end="373:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="375:25" pos:end="375:36"><expr pos:start="375:25" pos:end="375:35"><name pos:start="375:25" pos:end="375:31">tindex2</name> <operator pos:start="375:33" pos:end="375:33">=</operator> <literal type="number" pos:start="375:35" pos:end="375:35">3</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="377:23" pos:end="383:21">else if <condition pos:start="377:31" pos:end="377:40">(<expr pos:start="377:32" pos:end="377:39"><name pos:start="377:32" pos:end="377:33">sf</name> <operator pos:start="377:35" pos:end="377:35">&lt;</operator> <literal type="number" pos:start="377:37" pos:end="377:39">244</literal></expr>)</condition> <block pos:start="377:42" pos:end="383:21">{<block_content pos:start="379:25" pos:end="381:36">

                        <expr_stmt pos:start="379:25" pos:end="379:63"><expr pos:start="379:25" pos:end="379:62"><call pos:start="379:25" pos:end="379:62"><name pos:start="379:25" pos:end="379:37">lsf_sf_expand</name><argument_list pos:start="379:38" pos:end="379:62">(<argument pos:start="379:39" pos:end="379:42"><expr pos:start="379:39" pos:end="379:42"><name pos:start="379:39" pos:end="379:42">slen</name></expr></argument>, <argument pos:start="379:45" pos:end="379:52"><expr pos:start="379:45" pos:end="379:52"><name pos:start="379:45" pos:end="379:46">sf</name> <operator pos:start="379:48" pos:end="379:48">-</operator> <literal type="number" pos:start="379:50" pos:end="379:52">180</literal></expr></argument>, <argument pos:start="379:55" pos:end="379:55"><expr pos:start="379:55" pos:end="379:55"><literal type="number" pos:start="379:55" pos:end="379:55">4</literal></expr></argument>, <argument pos:start="379:58" pos:end="379:58"><expr pos:start="379:58" pos:end="379:58"><literal type="number" pos:start="379:58" pos:end="379:58">4</literal></expr></argument>, <argument pos:start="379:61" pos:end="379:61"><expr pos:start="379:61" pos:end="379:61"><literal type="number" pos:start="379:61" pos:end="379:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="381:25" pos:end="381:36"><expr pos:start="381:25" pos:end="381:35"><name pos:start="381:25" pos:end="381:31">tindex2</name> <operator pos:start="381:33" pos:end="381:33">=</operator> <literal type="number" pos:start="381:35" pos:end="381:35">4</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="383:23" pos:end="389:21">else <block pos:start="383:28" pos:end="389:21">{<block_content pos:start="385:25" pos:end="387:36">

                        <expr_stmt pos:start="385:25" pos:end="385:63"><expr pos:start="385:25" pos:end="385:62"><call pos:start="385:25" pos:end="385:62"><name pos:start="385:25" pos:end="385:37">lsf_sf_expand</name><argument_list pos:start="385:38" pos:end="385:62">(<argument pos:start="385:39" pos:end="385:42"><expr pos:start="385:39" pos:end="385:42"><name pos:start="385:39" pos:end="385:42">slen</name></expr></argument>, <argument pos:start="385:45" pos:end="385:52"><expr pos:start="385:45" pos:end="385:52"><name pos:start="385:45" pos:end="385:46">sf</name> <operator pos:start="385:48" pos:end="385:48">-</operator> <literal type="number" pos:start="385:50" pos:end="385:52">244</literal></expr></argument>, <argument pos:start="385:55" pos:end="385:55"><expr pos:start="385:55" pos:end="385:55"><literal type="number" pos:start="385:55" pos:end="385:55">3</literal></expr></argument>, <argument pos:start="385:58" pos:end="385:58"><expr pos:start="385:58" pos:end="385:58"><literal type="number" pos:start="385:58" pos:end="385:58">0</literal></expr></argument>, <argument pos:start="385:61" pos:end="385:61"><expr pos:start="385:61" pos:end="385:61"><literal type="number" pos:start="385:61" pos:end="385:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="387:25" pos:end="387:36"><expr pos:start="387:25" pos:end="387:35"><name pos:start="387:25" pos:end="387:31">tindex2</name> <operator pos:start="387:33" pos:end="387:33">=</operator> <literal type="number" pos:start="387:35" pos:end="387:35">5</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="391:19" pos:end="417:17">else <block pos:start="391:24" pos:end="417:17">{<block_content pos:start="395:21" pos:end="415:21">

                    <comment type="block" pos:start="393:21" pos:end="393:37">/* normal case */</comment>

                    <if_stmt pos:start="395:21" pos:end="415:21"><if pos:start="395:21" pos:end="401:21">if <condition pos:start="395:24" pos:end="395:33">(<expr pos:start="395:25" pos:end="395:32"><name pos:start="395:25" pos:end="395:26">sf</name> <operator pos:start="395:28" pos:end="395:28">&lt;</operator> <literal type="number" pos:start="395:30" pos:end="395:32">400</literal></expr>)</condition> <block pos:start="395:35" pos:end="401:21">{<block_content pos:start="397:25" pos:end="399:36">

                        <expr_stmt pos:start="397:25" pos:end="397:57"><expr pos:start="397:25" pos:end="397:56"><call pos:start="397:25" pos:end="397:56"><name pos:start="397:25" pos:end="397:37">lsf_sf_expand</name><argument_list pos:start="397:38" pos:end="397:56">(<argument pos:start="397:39" pos:end="397:42"><expr pos:start="397:39" pos:end="397:42"><name pos:start="397:39" pos:end="397:42">slen</name></expr></argument>, <argument pos:start="397:45" pos:end="397:46"><expr pos:start="397:45" pos:end="397:46"><name pos:start="397:45" pos:end="397:46">sf</name></expr></argument>, <argument pos:start="397:49" pos:end="397:49"><expr pos:start="397:49" pos:end="397:49"><literal type="number" pos:start="397:49" pos:end="397:49">5</literal></expr></argument>, <argument pos:start="397:52" pos:end="397:52"><expr pos:start="397:52" pos:end="397:52"><literal type="number" pos:start="397:52" pos:end="397:52">4</literal></expr></argument>, <argument pos:start="397:55" pos:end="397:55"><expr pos:start="397:55" pos:end="397:55"><literal type="number" pos:start="397:55" pos:end="397:55">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="399:25" pos:end="399:36"><expr pos:start="399:25" pos:end="399:35"><name pos:start="399:25" pos:end="399:31">tindex2</name> <operator pos:start="399:33" pos:end="399:33">=</operator> <literal type="number" pos:start="399:35" pos:end="399:35">0</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="401:23" pos:end="407:21">else if <condition pos:start="401:31" pos:end="401:40">(<expr pos:start="401:32" pos:end="401:39"><name pos:start="401:32" pos:end="401:33">sf</name> <operator pos:start="401:35" pos:end="401:35">&lt;</operator> <literal type="number" pos:start="401:37" pos:end="401:39">500</literal></expr>)</condition> <block pos:start="401:42" pos:end="407:21">{<block_content pos:start="403:25" pos:end="405:36">

                        <expr_stmt pos:start="403:25" pos:end="403:63"><expr pos:start="403:25" pos:end="403:62"><call pos:start="403:25" pos:end="403:62"><name pos:start="403:25" pos:end="403:37">lsf_sf_expand</name><argument_list pos:start="403:38" pos:end="403:62">(<argument pos:start="403:39" pos:end="403:42"><expr pos:start="403:39" pos:end="403:42"><name pos:start="403:39" pos:end="403:42">slen</name></expr></argument>, <argument pos:start="403:45" pos:end="403:52"><expr pos:start="403:45" pos:end="403:52"><name pos:start="403:45" pos:end="403:46">sf</name> <operator pos:start="403:48" pos:end="403:48">-</operator> <literal type="number" pos:start="403:50" pos:end="403:52">400</literal></expr></argument>, <argument pos:start="403:55" pos:end="403:55"><expr pos:start="403:55" pos:end="403:55"><literal type="number" pos:start="403:55" pos:end="403:55">5</literal></expr></argument>, <argument pos:start="403:58" pos:end="403:58"><expr pos:start="403:58" pos:end="403:58"><literal type="number" pos:start="403:58" pos:end="403:58">4</literal></expr></argument>, <argument pos:start="403:61" pos:end="403:61"><expr pos:start="403:61" pos:end="403:61"><literal type="number" pos:start="403:61" pos:end="403:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="405:25" pos:end="405:36"><expr pos:start="405:25" pos:end="405:35"><name pos:start="405:25" pos:end="405:31">tindex2</name> <operator pos:start="405:33" pos:end="405:33">=</operator> <literal type="number" pos:start="405:35" pos:end="405:35">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="407:23" pos:end="415:21">else <block pos:start="407:28" pos:end="415:21">{<block_content pos:start="409:25" pos:end="413:39">

                        <expr_stmt pos:start="409:25" pos:end="409:63"><expr pos:start="409:25" pos:end="409:62"><call pos:start="409:25" pos:end="409:62"><name pos:start="409:25" pos:end="409:37">lsf_sf_expand</name><argument_list pos:start="409:38" pos:end="409:62">(<argument pos:start="409:39" pos:end="409:42"><expr pos:start="409:39" pos:end="409:42"><name pos:start="409:39" pos:end="409:42">slen</name></expr></argument>, <argument pos:start="409:45" pos:end="409:52"><expr pos:start="409:45" pos:end="409:52"><name pos:start="409:45" pos:end="409:46">sf</name> <operator pos:start="409:48" pos:end="409:48">-</operator> <literal type="number" pos:start="409:50" pos:end="409:52">500</literal></expr></argument>, <argument pos:start="409:55" pos:end="409:55"><expr pos:start="409:55" pos:end="409:55"><literal type="number" pos:start="409:55" pos:end="409:55">3</literal></expr></argument>, <argument pos:start="409:58" pos:end="409:58"><expr pos:start="409:58" pos:end="409:58"><literal type="number" pos:start="409:58" pos:end="409:58">0</literal></expr></argument>, <argument pos:start="409:61" pos:end="409:61"><expr pos:start="409:61" pos:end="409:61"><literal type="number" pos:start="409:61" pos:end="409:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="411:25" pos:end="411:36"><expr pos:start="411:25" pos:end="411:35"><name pos:start="411:25" pos:end="411:31">tindex2</name> <operator pos:start="411:33" pos:end="411:33">=</operator> <literal type="number" pos:start="411:35" pos:end="411:35">2</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="413:25" pos:end="413:39"><expr pos:start="413:25" pos:end="413:38"><name pos:start="413:25" pos:end="413:34"><name pos:start="413:25" pos:end="413:25">g</name><operator pos:start="413:26" pos:end="413:27">-&gt;</operator><name pos:start="413:28" pos:end="413:34">preflag</name></name> <operator pos:start="413:36" pos:end="413:36">=</operator> <literal type="number" pos:start="413:38" pos:end="413:38">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>



                <expr_stmt pos:start="421:17" pos:end="421:22"><expr pos:start="421:17" pos:end="421:21"><name pos:start="421:17" pos:end="421:17">j</name> <operator pos:start="421:19" pos:end="421:19">=</operator> <literal type="number" pos:start="421:21" pos:end="421:21">0</literal></expr>;</expr_stmt>

                <for pos:start="423:17" pos:end="443:17">for <control pos:start="423:21" pos:end="423:39">(<init pos:start="423:22" pos:end="423:27"><expr pos:start="423:22" pos:end="423:26"><name pos:start="423:22" pos:end="423:22">k</name> <operator pos:start="423:24" pos:end="423:24">=</operator> <literal type="number" pos:start="423:26" pos:end="423:26">0</literal></expr>;</init> <condition pos:start="423:29" pos:end="423:34"><expr pos:start="423:29" pos:end="423:33"><name pos:start="423:29" pos:end="423:29">k</name> <operator pos:start="423:31" pos:end="423:31">&lt;</operator> <literal type="number" pos:start="423:33" pos:end="423:33">4</literal></expr>;</condition> <incr pos:start="423:36" pos:end="423:38"><expr pos:start="423:36" pos:end="423:38"><name pos:start="423:36" pos:end="423:36">k</name><operator pos:start="423:37" pos:end="423:38">++</operator></expr></incr>)</control> <block pos:start="423:41" pos:end="443:17">{<block_content pos:start="425:21" pos:end="441:21">

                    <expr_stmt pos:start="425:21" pos:end="425:59"><expr pos:start="425:21" pos:end="425:58"><name pos:start="425:21" pos:end="425:21">n</name>  <operator pos:start="425:24" pos:end="425:24">=</operator> <name pos:start="425:26" pos:end="425:58"><name pos:start="425:26" pos:end="425:38">lsf_nsf_table</name><index pos:start="425:39" pos:end="425:47">[<expr pos:start="425:40" pos:end="425:46"><name pos:start="425:40" pos:end="425:46">tindex2</name></expr>]</index><index pos:start="425:48" pos:end="425:55">[<expr pos:start="425:49" pos:end="425:54"><name pos:start="425:49" pos:end="425:54">tindex</name></expr>]</index><index pos:start="425:56" pos:end="425:58">[<expr pos:start="425:57" pos:end="425:57"><name pos:start="425:57" pos:end="425:57">k</name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="427:21" pos:end="427:33"><expr pos:start="427:21" pos:end="427:32"><name pos:start="427:21" pos:end="427:22">sl</name> <operator pos:start="427:24" pos:end="427:24">=</operator> <name pos:start="427:26" pos:end="427:32"><name pos:start="427:26" pos:end="427:29">slen</name><index pos:start="427:30" pos:end="427:32">[<expr pos:start="427:31" pos:end="427:31"><name pos:start="427:31" pos:end="427:31">k</name></expr>]</index></name></expr>;</expr_stmt>

                    <if_stmt pos:start="429:21" pos:end="441:21"><if pos:start="429:21" pos:end="435:21">if <condition pos:start="429:24" pos:end="429:27">(<expr pos:start="429:25" pos:end="429:26"><name pos:start="429:25" pos:end="429:26">sl</name></expr>)</condition> <block pos:start="429:29" pos:end="435:21">{<block_content pos:start="431:25" pos:end="433:73">

                        <for pos:start="431:25" pos:end="433:73">for <control pos:start="431:29" pos:end="431:47">(<init pos:start="431:30" pos:end="431:35"><expr pos:start="431:30" pos:end="431:34"><name pos:start="431:30" pos:end="431:30">i</name> <operator pos:start="431:32" pos:end="431:32">=</operator> <literal type="number" pos:start="431:34" pos:end="431:34">0</literal></expr>;</init> <condition pos:start="431:37" pos:end="431:42"><expr pos:start="431:37" pos:end="431:41"><name pos:start="431:37" pos:end="431:37">i</name> <operator pos:start="431:39" pos:end="431:39">&lt;</operator> <name pos:start="431:41" pos:end="431:41">n</name></expr>;</condition> <incr pos:start="431:44" pos:end="431:46"><expr pos:start="431:44" pos:end="431:46"><name pos:start="431:44" pos:end="431:44">i</name><operator pos:start="431:45" pos:end="431:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="433:29" pos:end="433:73"><block_content pos:start="433:29" pos:end="433:73">

                            <expr_stmt pos:start="433:29" pos:end="433:73"><expr pos:start="433:29" pos:end="433:72"><name pos:start="433:29" pos:end="433:49"><name pos:start="433:29" pos:end="433:29">g</name><operator pos:start="433:30" pos:end="433:31">-&gt;</operator><name pos:start="433:32" pos:end="433:44">scale_factors</name><index pos:start="433:45" pos:end="433:49">[<expr pos:start="433:46" pos:end="433:48"><name pos:start="433:46" pos:end="433:46">j</name><operator pos:start="433:47" pos:end="433:48">++</operator></expr>]</index></name> <operator pos:start="433:51" pos:end="433:51">=</operator> <call pos:start="433:53" pos:end="433:72"><name pos:start="433:53" pos:end="433:60">get_bits</name><argument_list pos:start="433:61" pos:end="433:72">(<argument pos:start="433:62" pos:end="433:67"><expr pos:start="433:62" pos:end="433:67"><operator pos:start="433:62" pos:end="433:62">&amp;</operator><name pos:start="433:63" pos:end="433:67"><name pos:start="433:63" pos:end="433:63">s</name><operator pos:start="433:64" pos:end="433:65">-&gt;</operator><name pos:start="433:66" pos:end="433:67">gb</name></name></expr></argument>, <argument pos:start="433:70" pos:end="433:71"><expr pos:start="433:70" pos:end="433:71"><name pos:start="433:70" pos:end="433:71">sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></if> <else pos:start="435:23" pos:end="441:21">else <block pos:start="435:28" pos:end="441:21">{<block_content pos:start="437:25" pos:end="439:54">

                        <for pos:start="437:25" pos:end="439:54">for <control pos:start="437:29" pos:end="437:47">(<init pos:start="437:30" pos:end="437:35"><expr pos:start="437:30" pos:end="437:34"><name pos:start="437:30" pos:end="437:30">i</name> <operator pos:start="437:32" pos:end="437:32">=</operator> <literal type="number" pos:start="437:34" pos:end="437:34">0</literal></expr>;</init> <condition pos:start="437:37" pos:end="437:42"><expr pos:start="437:37" pos:end="437:41"><name pos:start="437:37" pos:end="437:37">i</name> <operator pos:start="437:39" pos:end="437:39">&lt;</operator> <name pos:start="437:41" pos:end="437:41">n</name></expr>;</condition> <incr pos:start="437:44" pos:end="437:46"><expr pos:start="437:44" pos:end="437:46"><name pos:start="437:44" pos:end="437:44">i</name><operator pos:start="437:45" pos:end="437:46">++</operator></expr></incr>)</control><block type="pseudo" pos:start="439:29" pos:end="439:54"><block_content pos:start="439:29" pos:end="439:54">

                            <expr_stmt pos:start="439:29" pos:end="439:54"><expr pos:start="439:29" pos:end="439:53"><name pos:start="439:29" pos:end="439:49"><name pos:start="439:29" pos:end="439:29">g</name><operator pos:start="439:30" pos:end="439:31">-&gt;</operator><name pos:start="439:32" pos:end="439:44">scale_factors</name><index pos:start="439:45" pos:end="439:49">[<expr pos:start="439:46" pos:end="439:48"><name pos:start="439:46" pos:end="439:46">j</name><operator pos:start="439:47" pos:end="439:48">++</operator></expr>]</index></name> <operator pos:start="439:51" pos:end="439:51">=</operator> <literal type="number" pos:start="439:53" pos:end="439:53">0</literal></expr>;</expr_stmt></block_content></block></for>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></for>

                <comment type="block" pos:start="445:17" pos:end="445:52">/* XXX: should compute exact size */</comment>

                <for pos:start="447:17" pos:end="449:44">for <control pos:start="447:21" pos:end="447:35">(<init pos:start="447:22" pos:end="447:22">;</init> <condition pos:start="447:24" pos:end="447:30"><expr pos:start="447:24" pos:end="447:29"><name pos:start="447:24" pos:end="447:24">j</name> <operator pos:start="447:26" pos:end="447:26">&lt;</operator> <literal type="number" pos:start="447:28" pos:end="447:29">40</literal></expr>;</condition> <incr pos:start="447:32" pos:end="447:34"><expr pos:start="447:32" pos:end="447:34"><name pos:start="447:32" pos:end="447:32">j</name><operator pos:start="447:33" pos:end="447:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="449:21" pos:end="449:44"><block_content pos:start="449:21" pos:end="449:44">

                    <expr_stmt pos:start="449:21" pos:end="449:44"><expr pos:start="449:21" pos:end="449:43"><name pos:start="449:21" pos:end="449:39"><name pos:start="449:21" pos:end="449:21">g</name><operator pos:start="449:22" pos:end="449:23">-&gt;</operator><name pos:start="449:24" pos:end="449:36">scale_factors</name><index pos:start="449:37" pos:end="449:39">[<expr pos:start="449:38" pos:end="449:38"><name pos:start="449:38" pos:end="449:38">j</name></expr>]</index></name> <operator pos:start="449:41" pos:end="449:41">=</operator> <literal type="number" pos:start="449:43" pos:end="449:43">0</literal></expr>;</expr_stmt></block_content></block></for>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="455:13" pos:end="455:58"><expr pos:start="455:13" pos:end="455:57"><call pos:start="455:13" pos:end="455:57"><name pos:start="455:13" pos:end="455:40">exponents_from_scale_factors</name><argument_list pos:start="455:41" pos:end="455:57">(<argument pos:start="455:42" pos:end="455:42"><expr pos:start="455:42" pos:end="455:42"><name pos:start="455:42" pos:end="455:42">s</name></expr></argument>, <argument pos:start="455:45" pos:end="455:45"><expr pos:start="455:45" pos:end="455:45"><name pos:start="455:45" pos:end="455:45">g</name></expr></argument>, <argument pos:start="455:48" pos:end="455:56"><expr pos:start="455:48" pos:end="455:56"><name pos:start="455:48" pos:end="455:56">exponents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="459:13" pos:end="459:44">/* read Huffman coded residue */</comment>

            <expr_stmt pos:start="461:13" pos:end="461:74"><expr pos:start="461:13" pos:end="461:73"><call pos:start="461:13" pos:end="461:73"><name pos:start="461:13" pos:end="461:26">huffman_decode</name><argument_list pos:start="461:27" pos:end="461:73">(<argument pos:start="461:28" pos:end="461:28"><expr pos:start="461:28" pos:end="461:28"><name pos:start="461:28" pos:end="461:28">s</name></expr></argument>, <argument pos:start="461:31" pos:end="461:31"><expr pos:start="461:31" pos:end="461:31"><name pos:start="461:31" pos:end="461:31">g</name></expr></argument>, <argument pos:start="461:34" pos:end="461:42"><expr pos:start="461:34" pos:end="461:42"><name pos:start="461:34" pos:end="461:42">exponents</name></expr></argument>, <argument pos:start="461:45" pos:end="461:72"><expr pos:start="461:45" pos:end="461:72"><name pos:start="461:45" pos:end="461:52">bits_pos</name> <operator pos:start="461:54" pos:end="461:54">+</operator> <name pos:start="461:56" pos:end="461:72"><name pos:start="461:56" pos:end="461:56">g</name><operator pos:start="461:57" pos:end="461:58">-&gt;</operator><name pos:start="461:59" pos:end="461:72">part2_3_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for> <comment type="block" pos:start="463:11" pos:end="463:18">/* ch */</comment>



        <if_stmt pos:start="467:9" pos:end="469:72"><if pos:start="467:9" pos:end="469:72">if <condition pos:start="467:12" pos:end="467:32">(<expr pos:start="467:13" pos:end="467:31"><name pos:start="467:13" pos:end="467:26"><name pos:start="467:13" pos:end="467:13">s</name><operator pos:start="467:14" pos:end="467:15">-&gt;</operator><name pos:start="467:16" pos:end="467:26">nb_channels</name></name> <operator pos:start="467:28" pos:end="467:29">==</operator> <literal type="number" pos:start="467:31" pos:end="467:31">2</literal></expr>)</condition><block type="pseudo" pos:start="469:13" pos:end="469:72"><block_content pos:start="469:13" pos:end="469:72">

            <expr_stmt pos:start="469:13" pos:end="469:72"><expr pos:start="469:13" pos:end="469:71"><call pos:start="469:13" pos:end="469:71"><name pos:start="469:13" pos:end="469:26">compute_stereo</name><argument_list pos:start="469:27" pos:end="469:71">(<argument pos:start="469:28" pos:end="469:28"><expr pos:start="469:28" pos:end="469:28"><name pos:start="469:28" pos:end="469:28">s</name></expr></argument>, <argument pos:start="469:31" pos:end="469:49"><expr pos:start="469:31" pos:end="469:49"><operator pos:start="469:31" pos:end="469:31">&amp;</operator><name pos:start="469:32" pos:end="469:49"><name pos:start="469:32" pos:end="469:32">s</name><operator pos:start="469:33" pos:end="469:34">-&gt;</operator><name pos:start="469:35" pos:end="469:42">granules</name><index pos:start="469:43" pos:end="469:45">[<expr pos:start="469:44" pos:end="469:44"><literal type="number" pos:start="469:44" pos:end="469:44">0</literal></expr>]</index><index pos:start="469:46" pos:end="469:49">[<expr pos:start="469:47" pos:end="469:48"><name pos:start="469:47" pos:end="469:48">gr</name></expr>]</index></name></expr></argument>, <argument pos:start="469:52" pos:end="469:70"><expr pos:start="469:52" pos:end="469:70"><operator pos:start="469:52" pos:end="469:52">&amp;</operator><name pos:start="469:53" pos:end="469:70"><name pos:start="469:53" pos:end="469:53">s</name><operator pos:start="469:54" pos:end="469:55">-&gt;</operator><name pos:start="469:56" pos:end="469:63">granules</name><index pos:start="469:64" pos:end="469:66">[<expr pos:start="469:65" pos:end="469:65"><literal type="number" pos:start="469:65" pos:end="469:65">1</literal></expr>]</index><index pos:start="469:67" pos:end="469:70">[<expr pos:start="469:68" pos:end="469:69"><name pos:start="469:68" pos:end="469:69">gr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <for pos:start="473:9" pos:end="485:9">for <control pos:start="473:13" pos:end="473:47">(<init pos:start="473:14" pos:end="473:20"><expr pos:start="473:14" pos:end="473:19"><name pos:start="473:14" pos:end="473:15">ch</name> <operator pos:start="473:17" pos:end="473:17">=</operator> <literal type="number" pos:start="473:19" pos:end="473:19">0</literal></expr>;</init> <condition pos:start="473:22" pos:end="473:41"><expr pos:start="473:22" pos:end="473:40"><name pos:start="473:22" pos:end="473:23">ch</name> <operator pos:start="473:25" pos:end="473:25">&lt;</operator> <name pos:start="473:27" pos:end="473:40"><name pos:start="473:27" pos:end="473:27">s</name><operator pos:start="473:28" pos:end="473:29">-&gt;</operator><name pos:start="473:30" pos:end="473:40">nb_channels</name></name></expr>;</condition> <incr pos:start="473:43" pos:end="473:46"><expr pos:start="473:43" pos:end="473:46"><name pos:start="473:43" pos:end="473:44">ch</name><operator pos:start="473:45" pos:end="473:46">++</operator></expr></incr>)</control> <block pos:start="473:49" pos:end="485:9">{<block_content pos:start="475:13" pos:end="483:81">

            <expr_stmt pos:start="475:13" pos:end="475:37"><expr pos:start="475:13" pos:end="475:36"><name pos:start="475:13" pos:end="475:13">g</name> <operator pos:start="475:15" pos:end="475:15">=</operator> <operator pos:start="475:17" pos:end="475:17">&amp;</operator><name pos:start="475:18" pos:end="475:36"><name pos:start="475:18" pos:end="475:18">s</name><operator pos:start="475:19" pos:end="475:20">-&gt;</operator><name pos:start="475:21" pos:end="475:28">granules</name><index pos:start="475:29" pos:end="475:32">[<expr pos:start="475:30" pos:end="475:31"><name pos:start="475:30" pos:end="475:31">ch</name></expr>]</index><index pos:start="475:33" pos:end="475:36">[<expr pos:start="475:34" pos:end="475:35"><name pos:start="475:34" pos:end="475:35">gr</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="479:13" pos:end="479:32"><expr pos:start="479:13" pos:end="479:31"><call pos:start="479:13" pos:end="479:31"><name pos:start="479:13" pos:end="479:25">reorder_block</name><argument_list pos:start="479:26" pos:end="479:31">(<argument pos:start="479:27" pos:end="479:27"><expr pos:start="479:27" pos:end="479:27"><name pos:start="479:27" pos:end="479:27">s</name></expr></argument>, <argument pos:start="479:30" pos:end="479:30"><expr pos:start="479:30" pos:end="479:30"><name pos:start="479:30" pos:end="479:30">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:36"><expr pos:start="481:13" pos:end="481:35"><call pos:start="481:13" pos:end="481:35"><name pos:start="481:13" pos:end="481:29">compute_antialias</name><argument_list pos:start="481:30" pos:end="481:35">(<argument pos:start="481:31" pos:end="481:31"><expr pos:start="481:31" pos:end="481:31"><name pos:start="481:31" pos:end="481:31">s</name></expr></argument>, <argument pos:start="481:34" pos:end="481:34"><expr pos:start="481:34" pos:end="481:34"><name pos:start="481:34" pos:end="481:34">g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:81"><expr pos:start="483:13" pos:end="483:80"><call pos:start="483:13" pos:end="483:80"><name pos:start="483:13" pos:end="483:25">compute_imdct</name><argument_list pos:start="483:26" pos:end="483:80">(<argument pos:start="483:27" pos:end="483:27"><expr pos:start="483:27" pos:end="483:27"><name pos:start="483:27" pos:end="483:27">s</name></expr></argument>, <argument pos:start="483:30" pos:end="483:30"><expr pos:start="483:30" pos:end="483:30"><name pos:start="483:30" pos:end="483:30">g</name></expr></argument>, <argument pos:start="483:33" pos:end="483:62"><expr pos:start="483:33" pos:end="483:62"><operator pos:start="483:33" pos:end="483:33">&amp;</operator><name pos:start="483:34" pos:end="483:62"><name pos:start="483:34" pos:end="483:34">s</name><operator pos:start="483:35" pos:end="483:36">-&gt;</operator><name pos:start="483:37" pos:end="483:46">sb_samples</name><index pos:start="483:47" pos:end="483:50">[<expr pos:start="483:48" pos:end="483:49"><name pos:start="483:48" pos:end="483:49">ch</name></expr>]</index><index pos:start="483:51" pos:end="483:59">[<expr pos:start="483:52" pos:end="483:58"><literal type="number" pos:start="483:52" pos:end="483:53">18</literal> <operator pos:start="483:55" pos:end="483:55">*</operator> <name pos:start="483:57" pos:end="483:58">gr</name></expr>]</index><index pos:start="483:60" pos:end="483:62">[<expr pos:start="483:61" pos:end="483:61"><literal type="number" pos:start="483:61" pos:end="483:61">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="483:65" pos:end="483:79"><expr pos:start="483:65" pos:end="483:79"><name pos:start="483:65" pos:end="483:79"><name pos:start="483:65" pos:end="483:65">s</name><operator pos:start="483:66" pos:end="483:67">-&gt;</operator><name pos:start="483:68" pos:end="483:75">mdct_buf</name><index pos:start="483:76" pos:end="483:79">[<expr pos:start="483:77" pos:end="483:78"><name pos:start="483:77" pos:end="483:78">ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for> <comment type="block" pos:start="487:7" pos:end="487:14">/* gr */</comment>

    <if_stmt pos:start="489:5" pos:end="491:56"><if pos:start="489:5" pos:end="491:56">if <condition pos:start="489:8" pos:end="489:35">(<expr pos:start="489:9" pos:end="489:34"><call pos:start="489:9" pos:end="489:30"><name pos:start="489:9" pos:end="489:22">get_bits_count</name><argument_list pos:start="489:23" pos:end="489:30">(<argument pos:start="489:24" pos:end="489:29"><expr pos:start="489:24" pos:end="489:29"><operator pos:start="489:24" pos:end="489:24">&amp;</operator><name pos:start="489:25" pos:end="489:29"><name pos:start="489:25" pos:end="489:25">s</name><operator pos:start="489:26" pos:end="489:27">-&gt;</operator><name pos:start="489:28" pos:end="489:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="489:32" pos:end="489:32">&lt;</operator> <literal type="number" pos:start="489:34" pos:end="489:34">0</literal></expr>)</condition><block type="pseudo" pos:start="491:9" pos:end="491:56"><block_content pos:start="491:9" pos:end="491:56">

        <expr_stmt pos:start="491:9" pos:end="491:56"><expr pos:start="491:9" pos:end="491:55"><call pos:start="491:9" pos:end="491:55"><name pos:start="491:9" pos:end="491:22">skip_bits_long</name><argument_list pos:start="491:23" pos:end="491:55">(<argument pos:start="491:24" pos:end="491:29"><expr pos:start="491:24" pos:end="491:29"><operator pos:start="491:24" pos:end="491:24">&amp;</operator><name pos:start="491:25" pos:end="491:29"><name pos:start="491:25" pos:end="491:25">s</name><operator pos:start="491:26" pos:end="491:27">-&gt;</operator><name pos:start="491:28" pos:end="491:29">gb</name></name></expr></argument>, <argument pos:start="491:32" pos:end="491:54"><expr pos:start="491:32" pos:end="491:54"><operator pos:start="491:32" pos:end="491:32">-</operator><call pos:start="491:33" pos:end="491:54"><name pos:start="491:33" pos:end="491:46">get_bits_count</name><argument_list pos:start="491:47" pos:end="491:54">(<argument pos:start="491:48" pos:end="491:53"><expr pos:start="491:48" pos:end="491:53"><operator pos:start="491:48" pos:end="491:48">&amp;</operator><name pos:start="491:49" pos:end="491:53"><name pos:start="491:49" pos:end="491:49">s</name><operator pos:start="491:50" pos:end="491:51">-&gt;</operator><name pos:start="491:52" pos:end="491:53">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="493:5" pos:end="493:28">return <expr pos:start="493:12" pos:end="493:27"><name pos:start="493:12" pos:end="493:22">nb_granules</name> <operator pos:start="493:24" pos:end="493:24">*</operator> <literal type="number" pos:start="493:26" pos:end="493:27">18</literal></expr>;</return>

</block_content>}</block></function>
</unit>
