<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16618.c" pos:tabs="8"><macro pos:start="1:1" pos:end="3:30"><name pos:start="1:1" pos:end="1:16">iscsi_inquiry_cb</name><argument_list pos:start="1:17" pos:end="3:30">(<argument pos:start="1:18" pos:end="1:44">struct iscsi_context *iscsi</argument>, <argument pos:start="1:47" pos:end="1:56">int status</argument>, <argument pos:start="1:59" pos:end="1:76">void *command_data</argument>,

                 <argument pos:start="3:18" pos:end="3:29">void *opaque</argument>)</argument_list></macro>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:5">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:20">IscsiTask</name></name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:27">itask</name> <init pos:start="7:29" pos:end="7:36">= <expr pos:start="7:31" pos:end="7:36"><name pos:start="7:31" pos:end="7:36">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:42"><decl pos:start="9:5" pos:end="9:41"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:20">scsi_task</name></name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:26">task</name> <init pos:start="9:28" pos:end="9:41">= <expr pos:start="9:30" pos:end="9:41"><name pos:start="9:30" pos:end="9:41">command_data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:34"><name pos:start="11:5" pos:end="11:32"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:32">scsi_inquiry_standard</name></name> <modifier pos:start="11:34" pos:end="11:34">*</modifier></type><name pos:start="11:35" pos:end="11:37">inq</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="25:5"><if pos:start="15:5" pos:end="25:5">if <condition pos:start="15:8" pos:end="15:20">(<expr pos:start="15:9" pos:end="15:19"><name pos:start="15:9" pos:end="15:14">status</name> <operator pos:start="15:16" pos:end="15:17">!=</operator> <literal type="number" pos:start="15:19" pos:end="15:19">0</literal></expr>)</condition> <block pos:start="15:22" pos:end="25:5">{<block_content pos:start="17:9" pos:end="23:15">

        <expr_stmt pos:start="17:9" pos:end="17:28"><expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:21"><name pos:start="17:9" pos:end="17:13">itask</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:21">status</name></name>   <operator pos:start="17:25" pos:end="17:25">=</operator> <literal type="number" pos:start="17:27" pos:end="17:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="19:9" pos:end="19:28"><expr pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:23"><name pos:start="19:9" pos:end="19:13">itask</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:23">complete</name></name> <operator pos:start="19:25" pos:end="19:25">=</operator> <literal type="number" pos:start="19:27" pos:end="19:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:34"><expr pos:start="21:9" pos:end="21:33"><call pos:start="21:9" pos:end="21:33"><name pos:start="21:9" pos:end="21:27">scsi_free_scsi_task</name><argument_list pos:start="21:28" pos:end="21:33">(<argument pos:start="21:29" pos:end="21:32"><expr pos:start="21:29" pos:end="21:32"><name pos:start="21:29" pos:end="21:32">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="23:9" pos:end="23:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:7">inq</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:38"><name pos:start="29:11" pos:end="29:32">scsi_datain_unmarshall</name><argument_list pos:start="29:33" pos:end="29:38">(<argument pos:start="29:34" pos:end="29:37"><expr pos:start="29:34" pos:end="29:37"><name pos:start="29:34" pos:end="29:37">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="43:5"><if pos:start="31:5" pos:end="43:5">if <condition pos:start="31:8" pos:end="31:20">(<expr pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:11">inq</name> <operator pos:start="31:13" pos:end="31:14">==</operator> <name pos:start="31:16" pos:end="31:19">NULL</name></expr>)</condition> <block pos:start="31:22" pos:end="43:5">{<block_content pos:start="33:9" pos:end="41:15">

        <expr_stmt pos:start="33:9" pos:end="33:66"><expr pos:start="33:9" pos:end="33:65"><call pos:start="33:9" pos:end="33:65"><name pos:start="33:9" pos:end="33:20">error_report</name><argument_list pos:start="33:21" pos:end="33:65">(<argument pos:start="33:22" pos:end="33:64"><expr pos:start="33:22" pos:end="33:64"><literal type="string" pos:start="33:22" pos:end="33:64">"iSCSI: Failed to unmarshall inquiry data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:28"><expr pos:start="35:9" pos:end="35:27"><name pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:13">itask</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:21">status</name></name>   <operator pos:start="35:25" pos:end="35:25">=</operator> <literal type="number" pos:start="35:27" pos:end="35:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:28"><expr pos:start="37:9" pos:end="37:27"><name pos:start="37:9" pos:end="37:23"><name pos:start="37:9" pos:end="37:13">itask</name><operator pos:start="37:14" pos:end="37:15">-&gt;</operator><name pos:start="37:16" pos:end="37:23">complete</name></name> <operator pos:start="37:25" pos:end="37:25">=</operator> <literal type="number" pos:start="37:27" pos:end="37:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:34"><expr pos:start="39:9" pos:end="39:33"><call pos:start="39:9" pos:end="39:33"><name pos:start="39:9" pos:end="39:27">scsi_free_scsi_task</name><argument_list pos:start="39:28" pos:end="39:33">(<argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><name pos:start="39:29" pos:end="39:32">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:55"><expr pos:start="47:5" pos:end="47:54"><name pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:9">itask</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:19">iscsilun</name><operator pos:start="47:20" pos:end="47:21">-&gt;</operator><name pos:start="47:22" pos:end="47:25">type</name></name> <operator pos:start="47:27" pos:end="47:27">=</operator> <name pos:start="47:29" pos:end="47:54"><name pos:start="47:29" pos:end="47:31">inq</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:54">periperal_device_type</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><call pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:23">scsi_free_scsi_task</name><argument_list pos:start="51:24" pos:end="51:29">(<argument pos:start="51:25" pos:end="51:28"><expr pos:start="51:25" pos:end="51:28"><name pos:start="51:25" pos:end="51:28">task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="55:5" pos:end="105:5">switch <condition pos:start="55:12" pos:end="55:34">(<expr pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:33"><name pos:start="55:13" pos:end="55:17">itask</name><operator pos:start="55:18" pos:end="55:19">-&gt;</operator><name pos:start="55:20" pos:end="55:27">iscsilun</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:33">type</name></name></expr>)</condition> <block pos:start="55:36" pos:end="105:5">{<block_content pos:start="57:5" pos:end="103:28">

    <case pos:start="57:5" pos:end="57:19">case <expr pos:start="57:10" pos:end="57:18"><name pos:start="57:10" pos:end="57:18">TYPE_DISK</name></expr>:</case>

        <expr_stmt pos:start="59:9" pos:end="61:68"><expr pos:start="59:9" pos:end="61:67"><name pos:start="59:9" pos:end="59:12">task</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <call pos:start="59:16" pos:end="61:67"><name pos:start="59:16" pos:end="59:40">iscsi_readcapacity16_task</name><argument_list pos:start="59:41" pos:end="61:67">(<argument pos:start="59:42" pos:end="59:46"><expr pos:start="59:42" pos:end="59:46"><name pos:start="59:42" pos:end="59:46">iscsi</name></expr></argument>, <argument pos:start="59:49" pos:end="59:68"><expr pos:start="59:49" pos:end="59:68"><name pos:start="59:49" pos:end="59:68"><name pos:start="59:49" pos:end="59:53">itask</name><operator pos:start="59:54" pos:end="59:55">-&gt;</operator><name pos:start="59:56" pos:end="59:63">iscsilun</name><operator pos:start="59:64" pos:end="59:65">-&gt;</operator><name pos:start="59:66" pos:end="59:68">lun</name></name></expr></argument>,

                                   <argument pos:start="61:36" pos:end="61:58"><expr pos:start="61:36" pos:end="61:58"><name pos:start="61:36" pos:end="61:58">iscsi_readcapacity16_cb</name></expr></argument>, <argument pos:start="61:61" pos:end="61:66"><expr pos:start="61:61" pos:end="61:66"><name pos:start="61:61" pos:end="61:66">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:25">(<expr pos:start="63:13" pos:end="63:24"><name pos:start="63:13" pos:end="63:16">task</name> <operator pos:start="63:18" pos:end="63:19">==</operator> <name pos:start="63:21" pos:end="63:24">NULL</name></expr>)</condition> <block pos:start="63:27" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:19">

            <expr_stmt pos:start="65:13" pos:end="65:74"><expr pos:start="65:13" pos:end="65:73"><call pos:start="65:13" pos:end="65:73"><name pos:start="65:13" pos:end="65:24">error_report</name><argument_list pos:start="65:25" pos:end="65:73">(<argument pos:start="65:26" pos:end="65:72"><expr pos:start="65:26" pos:end="65:72"><literal type="string" pos:start="65:26" pos:end="65:72">"iSCSI: failed to send readcapacity16 command."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:32"><expr pos:start="67:13" pos:end="67:31"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:17">itask</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:25">status</name></name>   <operator pos:start="67:29" pos:end="67:29">=</operator> <literal type="number" pos:start="67:31" pos:end="67:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:32"><expr pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:17">itask</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:27">complete</name></name> <operator pos:start="69:29" pos:end="69:29">=</operator> <literal type="number" pos:start="69:31" pos:end="69:31">1</literal></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:18">case <expr pos:start="77:10" pos:end="77:17"><name pos:start="77:10" pos:end="77:17">TYPE_ROM</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="83:68"><expr pos:start="79:9" pos:end="83:67"><name pos:start="79:9" pos:end="79:12">task</name> <operator pos:start="79:14" pos:end="79:14">=</operator> <call pos:start="79:16" pos:end="83:67"><name pos:start="79:16" pos:end="79:40">iscsi_readcapacity10_task</name><argument_list pos:start="79:41" pos:end="83:67">(<argument pos:start="79:42" pos:end="79:46"><expr pos:start="79:42" pos:end="79:46"><name pos:start="79:42" pos:end="79:46">iscsi</name></expr></argument>, <argument pos:start="79:49" pos:end="79:68"><expr pos:start="79:49" pos:end="79:68"><name pos:start="79:49" pos:end="79:68"><name pos:start="79:49" pos:end="79:53">itask</name><operator pos:start="79:54" pos:end="79:55">-&gt;</operator><name pos:start="79:56" pos:end="79:63">iscsilun</name><operator pos:start="79:64" pos:end="79:65">-&gt;</operator><name pos:start="79:66" pos:end="79:68">lun</name></name></expr></argument>,

                                   <argument pos:start="81:36" pos:end="81:36"><expr pos:start="81:36" pos:end="81:36"><literal type="number" pos:start="81:36" pos:end="81:36">0</literal></expr></argument>, <argument pos:start="81:39" pos:end="81:39"><expr pos:start="81:39" pos:end="81:39"><literal type="number" pos:start="81:39" pos:end="81:39">0</literal></expr></argument>,

                                   <argument pos:start="83:36" pos:end="83:58"><expr pos:start="83:36" pos:end="83:58"><name pos:start="83:36" pos:end="83:58">iscsi_readcapacity10_cb</name></expr></argument>, <argument pos:start="83:61" pos:end="83:66"><expr pos:start="83:61" pos:end="83:66"><name pos:start="83:61" pos:end="83:66">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="95:9"><if pos:start="85:9" pos:end="95:9">if <condition pos:start="85:12" pos:end="85:25">(<expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:16">task</name> <operator pos:start="85:18" pos:end="85:19">==</operator> <name pos:start="85:21" pos:end="85:24">NULL</name></expr>)</condition> <block pos:start="85:27" pos:end="95:9">{<block_content pos:start="87:13" pos:end="93:19">

            <expr_stmt pos:start="87:13" pos:end="87:74"><expr pos:start="87:13" pos:end="87:73"><call pos:start="87:13" pos:end="87:73"><name pos:start="87:13" pos:end="87:24">error_report</name><argument_list pos:start="87:25" pos:end="87:73">(<argument pos:start="87:26" pos:end="87:72"><expr pos:start="87:26" pos:end="87:72"><literal type="string" pos:start="87:26" pos:end="87:72">"iSCSI: failed to send readcapacity16 command."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:32"><expr pos:start="89:13" pos:end="89:31"><name pos:start="89:13" pos:end="89:25"><name pos:start="89:13" pos:end="89:17">itask</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:25">status</name></name>   <operator pos:start="89:29" pos:end="89:29">=</operator> <literal type="number" pos:start="89:31" pos:end="89:31">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:32"><expr pos:start="91:13" pos:end="91:31"><name pos:start="91:13" pos:end="91:27"><name pos:start="91:13" pos:end="91:17">itask</name><operator pos:start="91:18" pos:end="91:19">-&gt;</operator><name pos:start="91:20" pos:end="91:27">complete</name></name> <operator pos:start="91:29" pos:end="91:29">=</operator> <literal type="number" pos:start="91:31" pos:end="91:31">1</literal></expr>;</expr_stmt>

            <return pos:start="93:13" pos:end="93:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    <default pos:start="99:5" pos:end="99:12">default:</default>

        <expr_stmt pos:start="101:9" pos:end="101:28"><expr pos:start="101:9" pos:end="101:27"><name pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:13">itask</name><operator pos:start="101:14" pos:end="101:15">-&gt;</operator><name pos:start="101:16" pos:end="101:21">status</name></name>   <operator pos:start="101:25" pos:end="101:25">=</operator> <literal type="number" pos:start="101:27" pos:end="101:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:28"><expr pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:23"><name pos:start="103:9" pos:end="103:13">itask</name><operator pos:start="103:14" pos:end="103:15">-&gt;</operator><name pos:start="103:16" pos:end="103:23">complete</name></name> <operator pos:start="103:25" pos:end="103:25">=</operator> <literal type="number" pos:start="103:27" pos:end="103:27">1</literal></expr>;</expr_stmt>

    </block_content>}</block></switch>

</block_content>}</block>
</unit>
