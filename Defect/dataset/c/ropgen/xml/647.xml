<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/647.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">parse_option_size</name><parameter_list pos:start="1:23" pos:end="3:51">(<parameter pos:start="1:24" pos:end="1:39"><decl pos:start="1:24" pos:end="1:39"><type pos:start="1:24" pos:end="1:39"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:39">name</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:58"><decl pos:start="1:42" pos:end="1:58"><type pos:start="1:42" pos:end="1:58"><specifier pos:start="1:42" pos:end="1:46">const</specifier> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:58">value</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:36"><decl pos:start="3:24" pos:end="3:36"><type pos:start="3:24" pos:end="3:36"><name pos:start="3:24" pos:end="3:31">uint64_t</name> <modifier pos:start="3:33" pos:end="3:33">*</modifier></type><name pos:start="3:34" pos:end="3:36">ret</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:50"><decl pos:start="3:39" pos:end="3:50"><type pos:start="3:39" pos:end="3:50"><name pos:start="3:39" pos:end="3:43">Error</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier><modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="73:1">{<block_content pos:start="7:5" pos:end="71:5">

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:17">postfix</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">double</name></type> <name pos:start="9:12" pos:end="9:16">sizef</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:9">sizef</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:35"><name pos:start="13:13" pos:end="13:18">strtod</name><argument_list pos:start="13:19" pos:end="13:35">(<argument pos:start="13:20" pos:end="13:24"><expr pos:start="13:20" pos:end="13:24"><name pos:start="13:20" pos:end="13:24">value</name></expr></argument>, <argument pos:start="13:27" pos:end="13:34"><expr pos:start="13:27" pos:end="13:34"><operator pos:start="13:27" pos:end="13:27">&amp;</operator><name pos:start="13:28" pos:end="13:34">postfix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:40">(<expr pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:13">sizef</name> <argument_list type="generic" pos:start="15:15" pos:end="15:28">&lt; <argument pos:start="15:17" pos:end="15:26"><expr pos:start="15:17" pos:end="15:26"><literal type="number" pos:start="15:17" pos:end="15:17">0</literal> <operator pos:start="15:19" pos:end="15:20">||</operator> <name pos:start="15:22" pos:end="15:26">sizef</name></expr></argument> &gt;</argument_list></name> <name pos:start="15:30" pos:end="15:39">UINT64_MAX</name></expr>)</condition> <block pos:start="15:42" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:15">

        <expr_stmt pos:start="17:9" pos:end="19:55"><expr pos:start="17:9" pos:end="19:54"><call pos:start="17:9" pos:end="19:54"><name pos:start="17:9" pos:end="17:18">error_setg</name><argument_list pos:start="17:19" pos:end="19:54">(<argument pos:start="17:20" pos:end="17:23"><expr pos:start="17:20" pos:end="17:23"><name pos:start="17:20" pos:end="17:23">errp</name></expr></argument>, <argument pos:start="17:26" pos:end="17:53"><expr pos:start="17:26" pos:end="17:53"><name pos:start="17:26" pos:end="17:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="17:56" pos:end="17:59"><expr pos:start="17:56" pos:end="17:59"><name pos:start="17:56" pos:end="17:59">name</name></expr></argument>,

                   <argument pos:start="19:20" pos:end="19:53"><expr pos:start="19:20" pos:end="19:53"><literal type="string" pos:start="19:20" pos:end="19:53">"a non-negative number below 2^64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <switch pos:start="25:5" pos:end="71:5">switch <condition pos:start="25:12" pos:end="25:21">(<expr pos:start="25:13" pos:end="25:20"><operator pos:start="25:13" pos:end="25:13">*</operator><name pos:start="25:14" pos:end="25:20">postfix</name></expr>)</condition> <block pos:start="25:23" pos:end="71:5">{<block_content pos:start="27:5" pos:end="69:15">

    <case pos:start="27:5" pos:end="27:13">case <expr pos:start="27:10" pos:end="27:12"><literal type="char" pos:start="27:10" pos:end="27:12">'T'</literal></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:13">sizef</name> <operator pos:start="29:15" pos:end="29:16">*=</operator> <literal type="number" pos:start="29:18" pos:end="29:21">1024</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="31:9" pos:end="31:26">/* fall through */</comment>

    <case pos:start="33:5" pos:end="33:13">case <expr pos:start="33:10" pos:end="33:12"><literal type="char" pos:start="33:10" pos:end="33:12">'G'</literal></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:22"><expr pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:13">sizef</name> <operator pos:start="35:15" pos:end="35:16">*=</operator> <literal type="number" pos:start="35:18" pos:end="35:21">1024</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="37:9" pos:end="37:26">/* fall through */</comment>

    <case pos:start="39:5" pos:end="39:13">case <expr pos:start="39:10" pos:end="39:12"><literal type="char" pos:start="39:10" pos:end="39:12">'M'</literal></expr>:</case>

        <expr_stmt pos:start="41:9" pos:end="41:22"><expr pos:start="41:9" pos:end="41:21"><name pos:start="41:9" pos:end="41:13">sizef</name> <operator pos:start="41:15" pos:end="41:16">*=</operator> <literal type="number" pos:start="41:18" pos:end="41:21">1024</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="43:9" pos:end="43:26">/* fall through */</comment>

    <case pos:start="45:5" pos:end="45:13">case <expr pos:start="45:10" pos:end="45:12"><literal type="char" pos:start="45:10" pos:end="45:12">'K'</literal></expr>:</case>

    <case pos:start="47:5" pos:end="47:13">case <expr pos:start="47:10" pos:end="47:12"><literal type="char" pos:start="47:10" pos:end="47:12">'k'</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:13">sizef</name> <operator pos:start="49:15" pos:end="49:16">*=</operator> <literal type="number" pos:start="49:18" pos:end="49:21">1024</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:26">/* fall through */</comment>

    <case pos:start="53:5" pos:end="53:13">case <expr pos:start="53:10" pos:end="53:12"><literal type="char" pos:start="53:10" pos:end="53:12">'b'</literal></expr>:</case>

    <case pos:start="55:5" pos:end="55:14">case <expr pos:start="55:10" pos:end="55:13"><literal type="char" pos:start="55:10" pos:end="55:13">'\0'</literal></expr>:</case>

        <expr_stmt pos:start="57:9" pos:end="57:32"><expr pos:start="57:9" pos:end="57:31"><operator pos:start="57:9" pos:end="57:9">*</operator><name pos:start="57:10" pos:end="57:12">ret</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <operator pos:start="57:16" pos:end="57:16">(</operator><name pos:start="57:17" pos:end="57:24">uint64_t</name><operator pos:start="57:25" pos:end="57:25">)</operator> <name pos:start="57:27" pos:end="57:31">sizef</name></expr>;</expr_stmt>

        <break pos:start="59:9" pos:end="59:14">break;</break>

    <default pos:start="61:5" pos:end="61:12">default:</default>

        <expr_stmt pos:start="63:9" pos:end="63:71"><expr pos:start="63:9" pos:end="63:70"><call pos:start="63:9" pos:end="63:70"><name pos:start="63:9" pos:end="63:18">error_setg</name><argument_list pos:start="63:19" pos:end="63:70">(<argument pos:start="63:20" pos:end="63:23"><expr pos:start="63:20" pos:end="63:23"><name pos:start="63:20" pos:end="63:23">errp</name></expr></argument>, <argument pos:start="63:26" pos:end="63:53"><expr pos:start="63:26" pos:end="63:53"><name pos:start="63:26" pos:end="63:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="63:56" pos:end="63:59"><expr pos:start="63:56" pos:end="63:59"><name pos:start="63:56" pos:end="63:59">name</name></expr></argument>, <argument pos:start="63:62" pos:end="63:69"><expr pos:start="63:62" pos:end="63:69"><literal type="string" pos:start="63:62" pos:end="63:69">"a size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="67:78"><expr pos:start="65:9" pos:end="67:77"><call pos:start="65:9" pos:end="67:77"><name pos:start="65:9" pos:end="65:25">error_append_hint</name><argument_list pos:start="65:26" pos:end="67:77">(<argument pos:start="65:27" pos:end="65:30"><expr pos:start="65:27" pos:end="65:30"><name pos:start="65:27" pos:end="65:30">errp</name></expr></argument>, <argument pos:start="65:33" pos:end="67:76"><expr pos:start="65:33" pos:end="67:76"><literal type="string" pos:start="65:33" pos:end="65:72">"You may use k, M, G or T suffixes for "</literal>

                          <literal type="string" pos:start="67:27" pos:end="67:76">"kilobytes, megabytes, gigabytes and terabytes.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
