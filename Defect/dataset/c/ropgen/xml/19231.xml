<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19231.c" pos:tabs="8"><function pos:start="1:1" pos:end="89:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:12">target_ulong</name></type> <name pos:start="1:14" pos:end="1:23">helper_ldr</name><parameter_list pos:start="1:24" pos:end="3:55">(<parameter pos:start="1:25" pos:end="1:41"><decl pos:start="1:25" pos:end="1:41"><type pos:start="1:25" pos:end="1:41"><name pos:start="1:25" pos:end="1:36">CPUMIPSState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">env</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:60"><decl pos:start="1:44" pos:end="1:60"><type pos:start="1:44" pos:end="1:60"><name pos:start="1:44" pos:end="1:55">target_ulong</name></type> <name pos:start="1:57" pos:end="1:60">arg1</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:41"><decl pos:start="3:25" pos:end="3:41"><type pos:start="3:25" pos:end="3:41"><name pos:start="3:25" pos:end="3:36">target_ulong</name></type> <name pos:start="3:38" pos:end="3:41">arg2</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:54"><decl pos:start="3:44" pos:end="3:54"><type pos:start="3:44" pos:end="3:54"><name pos:start="3:44" pos:end="3:46">int</name></type> <name pos:start="3:48" pos:end="3:54">mem_idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="89:1">{<block_content pos:start="7:5" pos:end="87:16">

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:37"><expr pos:start="11:5" pos:end="11:36"><name pos:start="11:5" pos:end="11:7">tmp</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:36"><name pos:start="11:11" pos:end="11:16">do_lbu</name><argument_list pos:start="11:17" pos:end="11:36">(<argument pos:start="11:18" pos:end="11:20"><expr pos:start="11:18" pos:end="11:20"><name pos:start="11:18" pos:end="11:20">env</name></expr></argument>, <argument pos:start="11:23" pos:end="11:26"><expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">arg2</name></expr></argument>, <argument pos:start="11:29" pos:end="11:35"><expr pos:start="11:29" pos:end="11:35"><name pos:start="11:29" pos:end="11:35">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:8">arg1</name> <operator pos:start="13:10" pos:end="13:10">=</operator> <operator pos:start="13:12" pos:end="13:12">(</operator><name pos:start="13:13" pos:end="13:16">arg1</name> <operator pos:start="13:18" pos:end="13:18">&amp;</operator> <literal type="number" pos:start="13:20" pos:end="13:40">0xFFFFFFFFFFFFFF00ULL</literal><operator pos:start="13:41" pos:end="13:41">)</operator> <operator pos:start="13:43" pos:end="13:43">|</operator> <name pos:start="13:45" pos:end="13:47">tmp</name></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:31">(<expr pos:start="17:9" pos:end="17:30"><call pos:start="17:9" pos:end="17:25"><name pos:start="17:9" pos:end="17:19">GET_LMASK64</name><argument_list pos:start="17:20" pos:end="17:25">(<argument pos:start="17:21" pos:end="17:24"><expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="17:27" pos:end="17:28">&gt;=</operator> <literal type="number" pos:start="17:30" pos:end="17:30">1</literal></expr>)</condition> <block pos:start="17:33" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:60">

        <expr_stmt pos:start="19:9" pos:end="19:57"><expr pos:start="19:9" pos:end="19:56"><name pos:start="19:9" pos:end="19:11">tmp</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:56"><name pos:start="19:15" pos:end="19:20">do_lbu</name><argument_list pos:start="19:21" pos:end="19:56">(<argument pos:start="19:22" pos:end="19:24"><expr pos:start="19:22" pos:end="19:24"><name pos:start="19:22" pos:end="19:24">env</name></expr></argument>, <argument pos:start="19:27" pos:end="19:46"><expr pos:start="19:27" pos:end="19:46"><call pos:start="19:27" pos:end="19:46"><name pos:start="19:27" pos:end="19:36">GET_OFFSET</name><argument_list pos:start="19:37" pos:end="19:46">(<argument pos:start="19:38" pos:end="19:41"><expr pos:start="19:38" pos:end="19:41"><name pos:start="19:38" pos:end="19:41">arg2</name></expr></argument>, <argument pos:start="19:44" pos:end="19:45"><expr pos:start="19:44" pos:end="19:45"><operator pos:start="19:44" pos:end="19:44">-</operator><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:49" pos:end="19:55"><expr pos:start="19:49" pos:end="19:55"><name pos:start="19:49" pos:end="19:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:60"><expr pos:start="21:9" pos:end="21:59"><name pos:start="21:9" pos:end="21:12">arg1</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <operator pos:start="21:16" pos:end="21:16">(</operator><name pos:start="21:17" pos:end="21:20">arg1</name> <operator pos:start="21:22" pos:end="21:22">&amp;</operator> <literal type="number" pos:start="21:24" pos:end="21:44">0xFFFFFFFFFFFF00FFULL</literal><operator pos:start="21:45" pos:end="21:45">)</operator> <operator pos:start="21:47" pos:end="21:47">|</operator> <operator pos:start="21:49" pos:end="21:49">(</operator><name pos:start="21:50" pos:end="21:52">tmp</name>  <operator pos:start="21:55" pos:end="21:56">&lt;&lt;</operator> <literal type="number" pos:start="21:58" pos:end="21:58">8</literal><operator pos:start="21:59" pos:end="21:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="33:5"><if pos:start="27:5" pos:end="33:5">if <condition pos:start="27:8" pos:end="27:31">(<expr pos:start="27:9" pos:end="27:30"><call pos:start="27:9" pos:end="27:25"><name pos:start="27:9" pos:end="27:19">GET_LMASK64</name><argument_list pos:start="27:20" pos:end="27:25">(<argument pos:start="27:21" pos:end="27:24"><expr pos:start="27:21" pos:end="27:24"><name pos:start="27:21" pos:end="27:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="27:27" pos:end="27:28">&gt;=</operator> <literal type="number" pos:start="27:30" pos:end="27:30">2</literal></expr>)</condition> <block pos:start="27:33" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:60">

        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:11">tmp</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:56"><name pos:start="29:15" pos:end="29:20">do_lbu</name><argument_list pos:start="29:21" pos:end="29:56">(<argument pos:start="29:22" pos:end="29:24"><expr pos:start="29:22" pos:end="29:24"><name pos:start="29:22" pos:end="29:24">env</name></expr></argument>, <argument pos:start="29:27" pos:end="29:46"><expr pos:start="29:27" pos:end="29:46"><call pos:start="29:27" pos:end="29:46"><name pos:start="29:27" pos:end="29:36">GET_OFFSET</name><argument_list pos:start="29:37" pos:end="29:46">(<argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><name pos:start="29:38" pos:end="29:41">arg2</name></expr></argument>, <argument pos:start="29:44" pos:end="29:45"><expr pos:start="29:44" pos:end="29:45"><operator pos:start="29:44" pos:end="29:44">-</operator><literal type="number" pos:start="29:45" pos:end="29:45">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:49" pos:end="29:55"><expr pos:start="29:49" pos:end="29:55"><name pos:start="29:49" pos:end="29:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:60"><expr pos:start="31:9" pos:end="31:59"><name pos:start="31:9" pos:end="31:12">arg1</name> <operator pos:start="31:14" pos:end="31:14">=</operator> <operator pos:start="31:16" pos:end="31:16">(</operator><name pos:start="31:17" pos:end="31:20">arg1</name> <operator pos:start="31:22" pos:end="31:22">&amp;</operator> <literal type="number" pos:start="31:24" pos:end="31:44">0xFFFFFFFFFF00FFFFULL</literal><operator pos:start="31:45" pos:end="31:45">)</operator> <operator pos:start="31:47" pos:end="31:47">|</operator> <operator pos:start="31:49" pos:end="31:49">(</operator><name pos:start="31:50" pos:end="31:52">tmp</name> <operator pos:start="31:54" pos:end="31:55">&lt;&lt;</operator> <literal type="number" pos:start="31:57" pos:end="31:58">16</literal><operator pos:start="31:59" pos:end="31:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:31">(<expr pos:start="37:9" pos:end="37:30"><call pos:start="37:9" pos:end="37:25"><name pos:start="37:9" pos:end="37:19">GET_LMASK64</name><argument_list pos:start="37:20" pos:end="37:25">(<argument pos:start="37:21" pos:end="37:24"><expr pos:start="37:21" pos:end="37:24"><name pos:start="37:21" pos:end="37:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="37:27" pos:end="37:28">&gt;=</operator> <literal type="number" pos:start="37:30" pos:end="37:30">3</literal></expr>)</condition> <block pos:start="37:33" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:60">

        <expr_stmt pos:start="39:9" pos:end="39:57"><expr pos:start="39:9" pos:end="39:56"><name pos:start="39:9" pos:end="39:11">tmp</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:56"><name pos:start="39:15" pos:end="39:20">do_lbu</name><argument_list pos:start="39:21" pos:end="39:56">(<argument pos:start="39:22" pos:end="39:24"><expr pos:start="39:22" pos:end="39:24"><name pos:start="39:22" pos:end="39:24">env</name></expr></argument>, <argument pos:start="39:27" pos:end="39:46"><expr pos:start="39:27" pos:end="39:46"><call pos:start="39:27" pos:end="39:46"><name pos:start="39:27" pos:end="39:36">GET_OFFSET</name><argument_list pos:start="39:37" pos:end="39:46">(<argument pos:start="39:38" pos:end="39:41"><expr pos:start="39:38" pos:end="39:41"><name pos:start="39:38" pos:end="39:41">arg2</name></expr></argument>, <argument pos:start="39:44" pos:end="39:45"><expr pos:start="39:44" pos:end="39:45"><operator pos:start="39:44" pos:end="39:44">-</operator><literal type="number" pos:start="39:45" pos:end="39:45">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:49" pos:end="39:55"><expr pos:start="39:49" pos:end="39:55"><name pos:start="39:49" pos:end="39:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:60"><expr pos:start="41:9" pos:end="41:59"><name pos:start="41:9" pos:end="41:12">arg1</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <operator pos:start="41:16" pos:end="41:16">(</operator><name pos:start="41:17" pos:end="41:20">arg1</name> <operator pos:start="41:22" pos:end="41:22">&amp;</operator> <literal type="number" pos:start="41:24" pos:end="41:44">0xFFFFFFFF00FFFFFFULL</literal><operator pos:start="41:45" pos:end="41:45">)</operator> <operator pos:start="41:47" pos:end="41:47">|</operator> <operator pos:start="41:49" pos:end="41:49">(</operator><name pos:start="41:50" pos:end="41:52">tmp</name> <operator pos:start="41:54" pos:end="41:55">&lt;&lt;</operator> <literal type="number" pos:start="41:57" pos:end="41:58">24</literal><operator pos:start="41:59" pos:end="41:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:31">(<expr pos:start="47:9" pos:end="47:30"><call pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:19">GET_LMASK64</name><argument_list pos:start="47:20" pos:end="47:25">(<argument pos:start="47:21" pos:end="47:24"><expr pos:start="47:21" pos:end="47:24"><name pos:start="47:21" pos:end="47:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="47:27" pos:end="47:28">&gt;=</operator> <literal type="number" pos:start="47:30" pos:end="47:30">4</literal></expr>)</condition> <block pos:start="47:33" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:60">

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:11">tmp</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:56"><name pos:start="49:15" pos:end="49:20">do_lbu</name><argument_list pos:start="49:21" pos:end="49:56">(<argument pos:start="49:22" pos:end="49:24"><expr pos:start="49:22" pos:end="49:24"><name pos:start="49:22" pos:end="49:24">env</name></expr></argument>, <argument pos:start="49:27" pos:end="49:46"><expr pos:start="49:27" pos:end="49:46"><call pos:start="49:27" pos:end="49:46"><name pos:start="49:27" pos:end="49:36">GET_OFFSET</name><argument_list pos:start="49:37" pos:end="49:46">(<argument pos:start="49:38" pos:end="49:41"><expr pos:start="49:38" pos:end="49:41"><name pos:start="49:38" pos:end="49:41">arg2</name></expr></argument>, <argument pos:start="49:44" pos:end="49:45"><expr pos:start="49:44" pos:end="49:45"><operator pos:start="49:44" pos:end="49:44">-</operator><literal type="number" pos:start="49:45" pos:end="49:45">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:49" pos:end="49:55"><expr pos:start="49:49" pos:end="49:55"><name pos:start="49:49" pos:end="49:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:60"><expr pos:start="51:9" pos:end="51:59"><name pos:start="51:9" pos:end="51:12">arg1</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <operator pos:start="51:16" pos:end="51:16">(</operator><name pos:start="51:17" pos:end="51:20">arg1</name> <operator pos:start="51:22" pos:end="51:22">&amp;</operator> <literal type="number" pos:start="51:24" pos:end="51:44">0xFFFFFF00FFFFFFFFULL</literal><operator pos:start="51:45" pos:end="51:45">)</operator> <operator pos:start="51:47" pos:end="51:47">|</operator> <operator pos:start="51:49" pos:end="51:49">(</operator><name pos:start="51:50" pos:end="51:52">tmp</name> <operator pos:start="51:54" pos:end="51:55">&lt;&lt;</operator> <literal type="number" pos:start="51:57" pos:end="51:58">32</literal><operator pos:start="51:59" pos:end="51:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:31">(<expr pos:start="57:9" pos:end="57:30"><call pos:start="57:9" pos:end="57:25"><name pos:start="57:9" pos:end="57:19">GET_LMASK64</name><argument_list pos:start="57:20" pos:end="57:25">(<argument pos:start="57:21" pos:end="57:24"><expr pos:start="57:21" pos:end="57:24"><name pos:start="57:21" pos:end="57:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="57:27" pos:end="57:28">&gt;=</operator> <literal type="number" pos:start="57:30" pos:end="57:30">5</literal></expr>)</condition> <block pos:start="57:33" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:60">

        <expr_stmt pos:start="59:9" pos:end="59:57"><expr pos:start="59:9" pos:end="59:56"><name pos:start="59:9" pos:end="59:11">tmp</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <call pos:start="59:15" pos:end="59:56"><name pos:start="59:15" pos:end="59:20">do_lbu</name><argument_list pos:start="59:21" pos:end="59:56">(<argument pos:start="59:22" pos:end="59:24"><expr pos:start="59:22" pos:end="59:24"><name pos:start="59:22" pos:end="59:24">env</name></expr></argument>, <argument pos:start="59:27" pos:end="59:46"><expr pos:start="59:27" pos:end="59:46"><call pos:start="59:27" pos:end="59:46"><name pos:start="59:27" pos:end="59:36">GET_OFFSET</name><argument_list pos:start="59:37" pos:end="59:46">(<argument pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><name pos:start="59:38" pos:end="59:41">arg2</name></expr></argument>, <argument pos:start="59:44" pos:end="59:45"><expr pos:start="59:44" pos:end="59:45"><operator pos:start="59:44" pos:end="59:44">-</operator><literal type="number" pos:start="59:45" pos:end="59:45">5</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="59:49" pos:end="59:55"><expr pos:start="59:49" pos:end="59:55"><name pos:start="59:49" pos:end="59:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:60"><expr pos:start="61:9" pos:end="61:59"><name pos:start="61:9" pos:end="61:12">arg1</name> <operator pos:start="61:14" pos:end="61:14">=</operator> <operator pos:start="61:16" pos:end="61:16">(</operator><name pos:start="61:17" pos:end="61:20">arg1</name> <operator pos:start="61:22" pos:end="61:22">&amp;</operator> <literal type="number" pos:start="61:24" pos:end="61:44">0xFFFF00FFFFFFFFFFULL</literal><operator pos:start="61:45" pos:end="61:45">)</operator> <operator pos:start="61:47" pos:end="61:47">|</operator> <operator pos:start="61:49" pos:end="61:49">(</operator><name pos:start="61:50" pos:end="61:52">tmp</name> <operator pos:start="61:54" pos:end="61:55">&lt;&lt;</operator> <literal type="number" pos:start="61:57" pos:end="61:58">40</literal><operator pos:start="61:59" pos:end="61:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:31">(<expr pos:start="67:9" pos:end="67:30"><call pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:19">GET_LMASK64</name><argument_list pos:start="67:20" pos:end="67:25">(<argument pos:start="67:21" pos:end="67:24"><expr pos:start="67:21" pos:end="67:24"><name pos:start="67:21" pos:end="67:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="67:27" pos:end="67:28">&gt;=</operator> <literal type="number" pos:start="67:30" pos:end="67:30">6</literal></expr>)</condition> <block pos:start="67:33" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:60">

        <expr_stmt pos:start="69:9" pos:end="69:57"><expr pos:start="69:9" pos:end="69:56"><name pos:start="69:9" pos:end="69:11">tmp</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <call pos:start="69:15" pos:end="69:56"><name pos:start="69:15" pos:end="69:20">do_lbu</name><argument_list pos:start="69:21" pos:end="69:56">(<argument pos:start="69:22" pos:end="69:24"><expr pos:start="69:22" pos:end="69:24"><name pos:start="69:22" pos:end="69:24">env</name></expr></argument>, <argument pos:start="69:27" pos:end="69:46"><expr pos:start="69:27" pos:end="69:46"><call pos:start="69:27" pos:end="69:46"><name pos:start="69:27" pos:end="69:36">GET_OFFSET</name><argument_list pos:start="69:37" pos:end="69:46">(<argument pos:start="69:38" pos:end="69:41"><expr pos:start="69:38" pos:end="69:41"><name pos:start="69:38" pos:end="69:41">arg2</name></expr></argument>, <argument pos:start="69:44" pos:end="69:45"><expr pos:start="69:44" pos:end="69:45"><operator pos:start="69:44" pos:end="69:44">-</operator><literal type="number" pos:start="69:45" pos:end="69:45">6</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="69:49" pos:end="69:55"><expr pos:start="69:49" pos:end="69:55"><name pos:start="69:49" pos:end="69:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:60"><expr pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:12">arg1</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <operator pos:start="71:16" pos:end="71:16">(</operator><name pos:start="71:17" pos:end="71:20">arg1</name> <operator pos:start="71:22" pos:end="71:22">&amp;</operator> <literal type="number" pos:start="71:24" pos:end="71:44">0xFF00FFFFFFFFFFFFULL</literal><operator pos:start="71:45" pos:end="71:45">)</operator> <operator pos:start="71:47" pos:end="71:47">|</operator> <operator pos:start="71:49" pos:end="71:49">(</operator><name pos:start="71:50" pos:end="71:52">tmp</name> <operator pos:start="71:54" pos:end="71:55">&lt;&lt;</operator> <literal type="number" pos:start="71:57" pos:end="71:58">48</literal><operator pos:start="71:59" pos:end="71:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:31">(<expr pos:start="77:9" pos:end="77:30"><call pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:19">GET_LMASK64</name><argument_list pos:start="77:20" pos:end="77:25">(<argument pos:start="77:21" pos:end="77:24"><expr pos:start="77:21" pos:end="77:24"><name pos:start="77:21" pos:end="77:24">arg2</name></expr></argument>)</argument_list></call> <operator pos:start="77:27" pos:end="77:28">==</operator> <literal type="number" pos:start="77:30" pos:end="77:30">7</literal></expr>)</condition> <block pos:start="77:33" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:60">

        <expr_stmt pos:start="79:9" pos:end="79:57"><expr pos:start="79:9" pos:end="79:56"><name pos:start="79:9" pos:end="79:11">tmp</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:56"><name pos:start="79:15" pos:end="79:20">do_lbu</name><argument_list pos:start="79:21" pos:end="79:56">(<argument pos:start="79:22" pos:end="79:24"><expr pos:start="79:22" pos:end="79:24"><name pos:start="79:22" pos:end="79:24">env</name></expr></argument>, <argument pos:start="79:27" pos:end="79:46"><expr pos:start="79:27" pos:end="79:46"><call pos:start="79:27" pos:end="79:46"><name pos:start="79:27" pos:end="79:36">GET_OFFSET</name><argument_list pos:start="79:37" pos:end="79:46">(<argument pos:start="79:38" pos:end="79:41"><expr pos:start="79:38" pos:end="79:41"><name pos:start="79:38" pos:end="79:41">arg2</name></expr></argument>, <argument pos:start="79:44" pos:end="79:45"><expr pos:start="79:44" pos:end="79:45"><operator pos:start="79:44" pos:end="79:44">-</operator><literal type="number" pos:start="79:45" pos:end="79:45">7</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="79:49" pos:end="79:55"><expr pos:start="79:49" pos:end="79:55"><name pos:start="79:49" pos:end="79:55">mem_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:12">arg1</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <operator pos:start="81:16" pos:end="81:16">(</operator><name pos:start="81:17" pos:end="81:20">arg1</name> <operator pos:start="81:22" pos:end="81:22">&amp;</operator> <literal type="number" pos:start="81:24" pos:end="81:44">0x00FFFFFFFFFFFFFFULL</literal><operator pos:start="81:45" pos:end="81:45">)</operator> <operator pos:start="81:47" pos:end="81:47">|</operator> <operator pos:start="81:49" pos:end="81:49">(</operator><name pos:start="81:50" pos:end="81:52">tmp</name> <operator pos:start="81:54" pos:end="81:55">&lt;&lt;</operator> <literal type="number" pos:start="81:57" pos:end="81:58">56</literal><operator pos:start="81:59" pos:end="81:59">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="87:5" pos:end="87:16">return <expr pos:start="87:12" pos:end="87:15"><name pos:start="87:12" pos:end="87:15">arg1</name></expr>;</return>

</block_content>}</block></function>
</unit>
