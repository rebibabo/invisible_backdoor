<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19562.c" pos:tabs="8"><function pos:start="1:1" pos:end="51:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:42">allocate_system_memory_nonnuma</name><parameter_list pos:start="1:43" pos:end="5:61">(<parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><name pos:start="1:44" pos:end="1:55">MemoryRegion</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">mr</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:74"><decl pos:start="1:62" pos:end="1:74"><type pos:start="1:62" pos:end="1:74"><name pos:start="1:62" pos:end="1:67">Object</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">owner</name></decl></parameter>,

                                           <parameter pos:start="3:44" pos:end="3:59"><decl pos:start="3:44" pos:end="3:59"><type pos:start="3:44" pos:end="3:59"><specifier pos:start="3:44" pos:end="3:48">const</specifier> <name pos:start="3:50" pos:end="3:53">char</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:59">name</name></decl></parameter>,

                                           <parameter pos:start="5:44" pos:end="5:60"><decl pos:start="5:44" pos:end="5:60"><type pos:start="5:44" pos:end="5:60"><name pos:start="5:44" pos:end="5:51">uint64_t</name></type> <name pos:start="5:53" pos:end="5:60">ram_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="51:1">{<block_content pos:start="9:5" pos:end="49:36">

    <if_stmt pos:start="9:5" pos:end="47:5"><if pos:start="9:5" pos:end="43:5">if <condition pos:start="9:8" pos:end="9:17">(<expr pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:16">mem_path</name></expr>)</condition> <block pos:start="9:19" pos:end="43:5">{<block_content pos:start="13:9" pos:end="42:0">

<cpp:ifdef pos:start="11:1" pos:end="11:16">#<cpp:directive pos:start="11:2" pos:end="11:6">ifdef</cpp:directive> <name pos:start="11:8" pos:end="11:16">__linux__</name></cpp:ifdef>

        <decl_stmt pos:start="13:9" pos:end="13:26"><decl pos:start="13:9" pos:end="13:25"><type pos:start="13:9" pos:end="13:15"><name pos:start="13:9" pos:end="13:13">Error</name> <modifier pos:start="13:15" pos:end="13:15">*</modifier></type><name pos:start="13:16" pos:end="13:18">err</name> <init pos:start="13:20" pos:end="13:25">= <expr pos:start="13:22" pos:end="13:25"><name pos:start="13:22" pos:end="13:25">NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="15:9" pos:end="17:57"><expr pos:start="15:9" pos:end="17:56"><call pos:start="15:9" pos:end="17:56"><name pos:start="15:9" pos:end="15:40">memory_region_init_ram_from_file</name><argument_list pos:start="15:41" pos:end="17:56">(<argument pos:start="15:42" pos:end="15:43"><expr pos:start="15:42" pos:end="15:43"><name pos:start="15:42" pos:end="15:43">mr</name></expr></argument>, <argument pos:start="15:46" pos:end="15:50"><expr pos:start="15:46" pos:end="15:50"><name pos:start="15:46" pos:end="15:50">owner</name></expr></argument>, <argument pos:start="15:53" pos:end="15:56"><expr pos:start="15:53" pos:end="15:56"><name pos:start="15:53" pos:end="15:56">name</name></expr></argument>, <argument pos:start="15:59" pos:end="15:66"><expr pos:start="15:59" pos:end="15:66"><name pos:start="15:59" pos:end="15:66">ram_size</name></expr></argument>, <argument pos:start="15:69" pos:end="15:73"><expr pos:start="15:69" pos:end="15:73"><name pos:start="15:69" pos:end="15:73">false</name></expr></argument>,

                                         <argument pos:start="17:42" pos:end="17:49"><expr pos:start="17:42" pos:end="17:49"><name pos:start="17:42" pos:end="17:49">mem_path</name></expr></argument>, <argument pos:start="17:52" pos:end="17:55"><expr pos:start="17:52" pos:end="17:55"><operator pos:start="17:52" pos:end="17:52">&amp;</operator><name pos:start="17:53" pos:end="17:55">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="21:9" pos:end="25:11">/* Legacy behavior: if allocation failed, fall back to

         * regular RAM allocation.

         */</comment>

        <if_stmt pos:start="27:9" pos:end="36:0"><if pos:start="27:9" pos:end="36:0">if <condition pos:start="27:12" pos:end="27:16">(<expr pos:start="27:13" pos:end="27:15"><name pos:start="27:13" pos:end="27:15">err</name></expr>)</condition> <block pos:start="27:18" pos:end="36:0">{<block_content pos:start="29:13" pos:end="31:76">

            <expr_stmt pos:start="29:13" pos:end="29:34"><expr pos:start="29:13" pos:end="29:33"><call pos:start="29:13" pos:end="29:33"><name pos:start="29:13" pos:end="29:28">error_report_err</name><argument_list pos:start="29:29" pos:end="29:33">(<argument pos:start="29:30" pos:end="29:32"><expr pos:start="29:30" pos:end="29:32"><name pos:start="29:30" pos:end="29:32">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:76"><expr pos:start="31:13" pos:end="31:75"><call pos:start="31:13" pos:end="31:75"><name pos:start="31:13" pos:end="31:34">memory_region_init_ram</name><argument_list pos:start="31:35" pos:end="31:75">(<argument pos:start="31:36" pos:end="31:37"><expr pos:start="31:36" pos:end="31:37"><name pos:start="31:36" pos:end="31:37">mr</name></expr></argument>, <argument pos:start="31:40" pos:end="31:44"><expr pos:start="31:40" pos:end="31:44"><name pos:start="31:40" pos:end="31:44">owner</name></expr></argument>, <argument pos:start="31:47" pos:end="31:50"><expr pos:start="31:47" pos:end="31:50"><name pos:start="31:47" pos:end="31:50">name</name></expr></argument>, <argument pos:start="31:53" pos:end="31:60"><expr pos:start="31:53" pos:end="31:60"><name pos:start="31:53" pos:end="31:60">ram_size</name></expr></argument>, <argument pos:start="31:63" pos:end="31:74"><expr pos:start="31:63" pos:end="31:74"><operator pos:start="31:63" pos:end="31:63">&amp;</operator><name pos:start="31:64" pos:end="31:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="35:1" pos:end="35:5">#<cpp:directive pos:start="35:2" pos:end="35:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><call pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:15">fprintf</name><argument_list pos:start="37:16" pos:end="37:65">(<argument pos:start="37:17" pos:end="37:22"><expr pos:start="37:17" pos:end="37:22"><name pos:start="37:17" pos:end="37:22">stderr</name></expr></argument>, <argument pos:start="37:25" pos:end="37:64"><expr pos:start="37:25" pos:end="37:64"><literal type="string" pos:start="37:25" pos:end="37:64">"-mem-path not supported on this host\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="42:0"><expr pos:start="39:9" pos:end="39:15"><call pos:start="39:9" pos:end="39:15"><name pos:start="39:9" pos:end="39:12">exit</name><argument_list pos:start="39:13" pos:end="39:15">(<argument pos:start="39:14" pos:end="39:14"><expr pos:start="39:14" pos:end="39:14"><literal type="number" pos:start="39:14" pos:end="39:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="47:5">else <block pos:start="43:12" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:72">

        <expr_stmt pos:start="45:9" pos:end="45:72"><expr pos:start="45:9" pos:end="45:71"><call pos:start="45:9" pos:end="45:71"><name pos:start="45:9" pos:end="45:30">memory_region_init_ram</name><argument_list pos:start="45:31" pos:end="45:71">(<argument pos:start="45:32" pos:end="45:33"><expr pos:start="45:32" pos:end="45:33"><name pos:start="45:32" pos:end="45:33">mr</name></expr></argument>, <argument pos:start="45:36" pos:end="45:40"><expr pos:start="45:36" pos:end="45:40"><name pos:start="45:36" pos:end="45:40">owner</name></expr></argument>, <argument pos:start="45:43" pos:end="45:46"><expr pos:start="45:43" pos:end="45:46"><name pos:start="45:43" pos:end="45:46">name</name></expr></argument>, <argument pos:start="45:49" pos:end="45:56"><expr pos:start="45:49" pos:end="45:56"><name pos:start="45:49" pos:end="45:56">ram_size</name></expr></argument>, <argument pos:start="45:59" pos:end="45:70"><expr pos:start="45:59" pos:end="45:70"><operator pos:start="45:59" pos:end="45:59">&amp;</operator><name pos:start="45:60" pos:end="45:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><call pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:31">vmstate_register_ram_global</name><argument_list pos:start="49:32" pos:end="49:35">(<argument pos:start="49:33" pos:end="49:34"><expr pos:start="49:33" pos:end="49:34"><name pos:start="49:33" pos:end="49:34">mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
