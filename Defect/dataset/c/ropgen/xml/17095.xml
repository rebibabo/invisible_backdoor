<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17095.c" pos:tabs="8"><function pos:start="1:1" pos:end="63:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:35">test_visitor_in_intList</name><parameter_list pos:start="1:36" pos:end="3:55">(<parameter pos:start="1:37" pos:end="1:62"><decl pos:start="1:37" pos:end="1:62"><type pos:start="1:37" pos:end="1:62"><name pos:start="1:37" pos:end="1:56">TestInputVisitorData</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">data</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:54"><decl pos:start="3:37" pos:end="3:54"><type pos:start="3:37" pos:end="3:54"><specifier pos:start="3:37" pos:end="3:41">const</specifier> <name pos:start="3:43" pos:end="3:46">void</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:54">unused</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="63:1">{<block_content pos:start="7:5" pos:end="61:19">

    <decl_stmt pos:start="7:5" pos:end="7:57"><decl pos:start="7:5" pos:end="7:56"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:19"><name pos:start="7:13" pos:end="7:17">value</name><index pos:start="7:18" pos:end="7:19">[]</index></name> <init pos:start="7:21" pos:end="7:56">= <expr pos:start="7:23" pos:end="7:56"><block pos:start="7:23" pos:end="7:56">{<expr pos:start="7:24" pos:end="7:24"><literal type="number" pos:start="7:24" pos:end="7:24">0</literal></expr>, <expr pos:start="7:27" pos:end="7:27"><literal type="number" pos:start="7:27" pos:end="7:27">1</literal></expr>, <expr pos:start="7:30" pos:end="7:30"><literal type="number" pos:start="7:30" pos:end="7:30">2</literal></expr>, <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">3</literal></expr>, <expr pos:start="7:36" pos:end="7:36"><literal type="number" pos:start="7:36" pos:end="7:36">4</literal></expr>, <expr pos:start="7:39" pos:end="7:39"><literal type="number" pos:start="7:39" pos:end="7:39">5</literal></expr>, <expr pos:start="7:42" pos:end="7:42"><literal type="number" pos:start="7:42" pos:end="7:42">6</literal></expr>, <expr pos:start="7:45" pos:end="7:45"><literal type="number" pos:start="7:45" pos:end="7:45">7</literal></expr>, <expr pos:start="7:48" pos:end="7:48"><literal type="number" pos:start="7:48" pos:end="7:48">8</literal></expr>, <expr pos:start="7:51" pos:end="7:51"><literal type="number" pos:start="7:51" pos:end="7:51">9</literal></expr>, <expr pos:start="7:54" pos:end="7:55"><literal type="number" pos:start="7:54" pos:end="7:55">20</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:32"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">int16List</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:18">res</name> <init pos:start="9:20" pos:end="9:25">= <expr pos:start="9:22" pos:end="9:25"><name pos:start="9:22" pos:end="9:25">NULL</name></expr></init></decl>, <decl pos:start="9:28" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:15"><modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:31">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:14">err</name> <init pos:start="11:16" pos:end="11:21">= <expr pos:start="11:18" pos:end="11:21"><name pos:start="11:18" pos:end="11:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">Visitor</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">v</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name> <init pos:start="15:11" pos:end="15:13">= <expr pos:start="15:13" pos:end="15:13"><literal type="number" pos:start="15:13" pos:end="15:13">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:62"><expr pos:start="19:5" pos:end="19:61"><name pos:start="19:5" pos:end="19:5">v</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <call pos:start="19:9" pos:end="19:61"><name pos:start="19:9" pos:end="19:31">visitor_input_test_init</name><argument_list pos:start="19:32" pos:end="19:61">(<argument pos:start="19:33" pos:end="19:36"><expr pos:start="19:33" pos:end="19:36"><name pos:start="19:33" pos:end="19:36">data</name></expr></argument>, <argument pos:start="19:39" pos:end="19:60"><expr pos:start="19:39" pos:end="19:60"><literal type="string" pos:start="19:39" pos:end="19:60">"1,2,0,2-4,20,5-9,1-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:54"><expr pos:start="23:5" pos:end="23:53"><call pos:start="23:5" pos:end="23:53"><name pos:start="23:5" pos:end="23:24">visit_type_int16List</name><argument_list pos:start="23:25" pos:end="23:53">(<argument pos:start="23:26" pos:end="23:26"><expr pos:start="23:26" pos:end="23:26"><name pos:start="23:26" pos:end="23:26">v</name></expr></argument>, <argument pos:start="23:29" pos:end="23:32"><expr pos:start="23:29" pos:end="23:32"><name pos:start="23:29" pos:end="23:32">NULL</name></expr></argument>, <argument pos:start="23:35" pos:end="23:38"><expr pos:start="23:35" pos:end="23:38"><operator pos:start="23:35" pos:end="23:35">&amp;</operator><name pos:start="23:36" pos:end="23:38">res</name></expr></argument>, <argument pos:start="23:41" pos:end="23:52"><expr pos:start="23:41" pos:end="23:52"><operator pos:start="23:41" pos:end="23:41">&amp;</operator><name pos:start="23:42" pos:end="23:52">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:14"><expr pos:start="25:5" pos:end="25:13"><name pos:start="25:5" pos:end="25:7">tmp</name> <operator pos:start="25:9" pos:end="25:9">=</operator> <name pos:start="25:11" pos:end="25:13">res</name></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="35:5">while <condition pos:start="27:11" pos:end="27:48">(<expr pos:start="27:12" pos:end="27:47"><name pos:start="27:12" pos:end="27:12">i</name> <operator pos:start="27:14" pos:end="27:14">&lt;</operator> <sizeof pos:start="27:16" pos:end="27:28">sizeof<argument_list pos:start="27:22" pos:end="27:28">(<argument pos:start="27:23" pos:end="27:27"><expr pos:start="27:23" pos:end="27:27"><name pos:start="27:23" pos:end="27:27">value</name></expr></argument>)</argument_list></sizeof> <operator pos:start="27:30" pos:end="27:30">/</operator> <sizeof pos:start="27:32" pos:end="27:47">sizeof<argument_list pos:start="27:38" pos:end="27:47">(<argument pos:start="27:39" pos:end="27:46"><expr pos:start="27:39" pos:end="27:46"><name pos:start="27:39" pos:end="27:46"><name pos:start="27:39" pos:end="27:43">value</name><index pos:start="27:44" pos:end="27:46">[<expr pos:start="27:45" pos:end="27:45"><literal type="number" pos:start="27:45" pos:end="27:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="27:50" pos:end="35:5">{<block_content pos:start="29:9" pos:end="33:24">

        <expr_stmt pos:start="29:9" pos:end="29:22"><expr pos:start="29:9" pos:end="29:21"><call pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">g_assert</name><argument_list pos:start="29:17" pos:end="29:21">(<argument pos:start="29:18" pos:end="29:20"><expr pos:start="29:18" pos:end="29:20"><name pos:start="29:18" pos:end="29:20">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:52"><expr pos:start="31:9" pos:end="31:51"><call pos:start="31:9" pos:end="31:51"><name pos:start="31:9" pos:end="31:23">g_assert_cmpint</name><argument_list pos:start="31:24" pos:end="31:51">(<argument pos:start="31:25" pos:end="31:34"><expr pos:start="31:25" pos:end="31:34"><name pos:start="31:25" pos:end="31:34"><name pos:start="31:25" pos:end="31:27">tmp</name><operator pos:start="31:28" pos:end="31:29">-&gt;</operator><name pos:start="31:30" pos:end="31:34">value</name></name></expr></argument>, <argument pos:start="31:37" pos:end="31:38"><expr pos:start="31:37" pos:end="31:38"><operator pos:start="31:37" pos:end="31:38">==</operator></expr></argument>, <argument pos:start="31:41" pos:end="31:50"><expr pos:start="31:41" pos:end="31:50"><name pos:start="31:41" pos:end="31:50"><name pos:start="31:41" pos:end="31:45">value</name><index pos:start="31:46" pos:end="31:50">[<expr pos:start="31:47" pos:end="31:49"><name pos:start="31:47" pos:end="31:47">i</name><operator pos:start="31:48" pos:end="31:49">++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:24"><expr pos:start="33:9" pos:end="33:23"><name pos:start="33:9" pos:end="33:11">tmp</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:23"><name pos:start="33:15" pos:end="33:17">tmp</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:23">next</name></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="37:5" pos:end="37:19"><expr pos:start="37:5" pos:end="37:18"><call pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:12">g_assert</name><argument_list pos:start="37:13" pos:end="37:18">(<argument pos:start="37:14" pos:end="37:17"><expr pos:start="37:14" pos:end="37:17"><operator pos:start="37:14" pos:end="37:14">!</operator><name pos:start="37:15" pos:end="37:17">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:29"><expr pos:start="41:5" pos:end="41:28"><call pos:start="41:5" pos:end="41:28"><name pos:start="41:5" pos:end="41:23">qapi_free_int16List</name><argument_list pos:start="41:24" pos:end="41:28">(<argument pos:start="41:25" pos:end="41:27"><expr pos:start="41:25" pos:end="41:27"><name pos:start="41:25" pos:end="41:27">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:41"><expr pos:start="45:5" pos:end="45:40"><call pos:start="45:5" pos:end="45:40"><name pos:start="45:5" pos:end="45:26">visitor_input_teardown</name><argument_list pos:start="45:27" pos:end="45:40">(<argument pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:31"><name pos:start="45:28" pos:end="45:31">data</name></expr></argument>, <argument pos:start="45:34" pos:end="45:39"><expr pos:start="45:34" pos:end="45:39"><name pos:start="45:34" pos:end="45:39">unused</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:57"><expr pos:start="49:5" pos:end="49:56"><name pos:start="49:5" pos:end="49:5">v</name> <operator pos:start="49:7" pos:end="49:7">=</operator> <call pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:31">visitor_input_test_init</name><argument_list pos:start="49:32" pos:end="49:56">(<argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">data</name></expr></argument>, <argument pos:start="49:39" pos:end="49:55"><expr pos:start="49:39" pos:end="49:55"><literal type="string" pos:start="49:39" pos:end="49:55">"not an int list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:76">/* FIXME: res should be NULL on failure, regardless of starting value */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:15"><expr pos:start="55:5" pos:end="55:14"><name pos:start="55:5" pos:end="55:7">res</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <name pos:start="55:11" pos:end="55:14">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><call pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:24">visit_type_int16List</name><argument_list pos:start="57:25" pos:end="57:45">(<argument pos:start="57:26" pos:end="57:26"><expr pos:start="57:26" pos:end="57:26"><name pos:start="57:26" pos:end="57:26">v</name></expr></argument>, <argument pos:start="57:29" pos:end="57:32"><expr pos:start="57:29" pos:end="57:32"><name pos:start="57:29" pos:end="57:32">NULL</name></expr></argument>, <argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><operator pos:start="57:35" pos:end="57:35">&amp;</operator><name pos:start="57:36" pos:end="57:38">res</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><operator pos:start="57:41" pos:end="57:41">&amp;</operator><name pos:start="57:42" pos:end="57:44">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:30"><expr pos:start="59:5" pos:end="59:29"><call pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:23">error_free_or_abort</name><argument_list pos:start="59:24" pos:end="59:29">(<argument pos:start="59:25" pos:end="59:28"><expr pos:start="59:25" pos:end="59:28"><operator pos:start="59:25" pos:end="59:25">&amp;</operator><name pos:start="59:26" pos:end="59:28">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:19"><expr pos:start="61:5" pos:end="61:18"><call pos:start="61:5" pos:end="61:18"><name pos:start="61:5" pos:end="61:12">g_assert</name><argument_list pos:start="61:13" pos:end="61:18">(<argument pos:start="61:14" pos:end="61:17"><expr pos:start="61:14" pos:end="61:17"><operator pos:start="61:14" pos:end="61:14">!</operator><name pos:start="61:15" pos:end="61:17">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
