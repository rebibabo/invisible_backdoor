<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18612.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:4">void</name> <name pos:start="1:6" pos:end="1:11">HELPER</name></type>(<name pos:start="1:13" pos:end="1:17">srstu</name>)<parameter_list pos:start="1:19" pos:end="1:64">(<parameter pos:start="1:20" pos:end="1:37"><decl pos:start="1:20" pos:end="1:37"><type pos:start="1:20" pos:end="1:37"><name pos:start="1:20" pos:end="1:32">CPUS390XState</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">env</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:50"><decl pos:start="1:40" pos:end="1:50"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:47">uint32_t</name></type> <name pos:start="1:49" pos:end="1:50">r1</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:60">uint32_t</name></type> <name pos:start="1:62" pos:end="1:63">r2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:36">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:13">uintptr_t</name></type> <name pos:start="5:15" pos:end="5:16">ra</name> <init pos:start="5:18" pos:end="5:26">= <expr pos:start="5:20" pos:end="5:26"><call pos:start="5:20" pos:end="5:26"><name pos:start="5:20" pos:end="5:24">GETPC</name><argument_list pos:start="5:25" pos:end="5:26">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint16_t</name></type> <name pos:start="9:14" pos:end="9:14">v</name></decl>, <decl pos:start="9:17" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:17" pos:end="9:17">c</name> <init pos:start="9:19" pos:end="9:32">= <expr pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:23">env</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:29">regs</name><index pos:start="9:30" pos:end="9:32">[<expr pos:start="9:31" pos:end="9:31"><literal type="number" pos:start="9:31" pos:end="9:31">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:16">end</name></decl>, <decl pos:start="11:19" pos:end="11:21"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:19" pos:end="11:21">str</name></decl>, <decl pos:start="11:24" pos:end="11:30"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:24" pos:end="11:30">adj_end</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:41">/* Bits 32-47 of R0 must be zero.  */</comment>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:35">(<expr pos:start="17:9" pos:end="17:34"><name pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:11">env</name><operator pos:start="17:12" pos:end="17:13">-&gt;</operator><name pos:start="17:14" pos:end="17:17">regs</name><index pos:start="17:18" pos:end="17:20">[<expr pos:start="17:19" pos:end="17:19"><literal type="number" pos:start="17:19" pos:end="17:19">0</literal></expr>]</index></name> <operator pos:start="17:22" pos:end="17:22">&amp;</operator> <literal type="number" pos:start="17:24" pos:end="17:34">0xffff0000u</literal></expr>)</condition> <block pos:start="17:37" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:53">

        <expr_stmt pos:start="19:9" pos:end="19:48"><expr pos:start="19:9" pos:end="19:47"><call pos:start="19:9" pos:end="19:47"><name pos:start="19:9" pos:end="19:25">cpu_restore_state</name><argument_list pos:start="19:26" pos:end="19:47">(<argument pos:start="19:27" pos:end="19:42"><expr pos:start="19:27" pos:end="19:42"><call pos:start="19:27" pos:end="19:42"><name pos:start="19:27" pos:end="19:37">ENV_GET_CPU</name><argument_list pos:start="19:38" pos:end="19:42">(<argument pos:start="19:39" pos:end="19:41"><expr pos:start="19:39" pos:end="19:41"><name pos:start="19:39" pos:end="19:41">env</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="19:45" pos:end="19:46"><expr pos:start="19:45" pos:end="19:46"><name pos:start="19:45" pos:end="19:46">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:53"><expr pos:start="21:9" pos:end="21:52"><call pos:start="21:9" pos:end="21:52"><name pos:start="21:9" pos:end="21:25">program_interrupt</name><argument_list pos:start="21:26" pos:end="21:52">(<argument pos:start="21:27" pos:end="21:29"><expr pos:start="21:27" pos:end="21:29"><name pos:start="21:27" pos:end="21:29">env</name></expr></argument>, <argument pos:start="21:32" pos:end="21:48"><expr pos:start="21:32" pos:end="21:48"><name pos:start="21:32" pos:end="21:48">PGM_SPECIFICATION</name></expr></argument>, <argument pos:start="21:51" pos:end="21:51"><expr pos:start="21:51" pos:end="21:51"><literal type="number" pos:start="21:51" pos:end="21:51">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:7">str</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:30"><name pos:start="27:11" pos:end="27:21">get_address</name><argument_list pos:start="27:22" pos:end="27:30">(<argument pos:start="27:23" pos:end="27:25"><expr pos:start="27:23" pos:end="27:25"><name pos:start="27:23" pos:end="27:25">env</name></expr></argument>, <argument pos:start="27:28" pos:end="27:29"><expr pos:start="27:28" pos:end="27:29"><name pos:start="27:28" pos:end="27:29">r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:7">end</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:30"><name pos:start="29:11" pos:end="29:21">get_address</name><argument_list pos:start="29:22" pos:end="29:30">(<argument pos:start="29:23" pos:end="29:25"><expr pos:start="29:23" pos:end="29:25"><name pos:start="29:23" pos:end="29:25">env</name></expr></argument>, <argument pos:start="29:28" pos:end="29:29"><expr pos:start="29:28" pos:end="29:29"><name pos:start="29:28" pos:end="29:29">r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:70">/* If the LSB of the two addresses differ, use one extra byte.  */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:38"><expr pos:start="35:5" pos:end="35:37"><name pos:start="35:5" pos:end="35:11">adj_end</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:17">end</name> <operator pos:start="35:19" pos:end="35:19">+</operator> <operator pos:start="35:21" pos:end="35:21">(</operator><operator pos:start="35:22" pos:end="35:22">(</operator><name pos:start="35:23" pos:end="35:25">str</name> <operator pos:start="35:27" pos:end="35:27">^</operator> <name pos:start="35:29" pos:end="35:31">end</name><operator pos:start="35:32" pos:end="35:32">)</operator> <operator pos:start="35:34" pos:end="35:34">&amp;</operator> <literal type="number" pos:start="35:36" pos:end="35:36">1</literal><operator pos:start="35:37" pos:end="35:37">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:73">/* Lest we fail to service interrupts in a timely manner, limit the

       amount of work we're willing to do.  For now, let's cap at 8k.  */</comment>

    <for pos:start="43:5" pos:end="69:5">for <control pos:start="43:9" pos:end="43:41">(<init pos:start="43:10" pos:end="43:17"><expr pos:start="43:10" pos:end="43:16"><name pos:start="43:10" pos:end="43:12">len</name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</init> <condition pos:start="43:19" pos:end="43:31"><expr pos:start="43:19" pos:end="43:30"><name pos:start="43:19" pos:end="43:21">len</name> <operator pos:start="43:23" pos:end="43:23">&lt;</operator> <literal type="number" pos:start="43:25" pos:end="43:30">0x2000</literal></expr>;</condition> <incr pos:start="43:33" pos:end="43:40"><expr pos:start="43:33" pos:end="43:40"><name pos:start="43:33" pos:end="43:35">len</name> <operator pos:start="43:37" pos:end="43:38">+=</operator> <literal type="number" pos:start="43:40" pos:end="43:40">2</literal></expr></incr>)</control> <block pos:start="43:43" pos:end="69:5">{<block_content pos:start="45:9" pos:end="67:9">

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:33">(<expr pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:15">str</name> <operator pos:start="45:17" pos:end="45:17">+</operator> <name pos:start="45:19" pos:end="45:21">len</name> <operator pos:start="45:23" pos:end="45:24">==</operator> <name pos:start="45:26" pos:end="45:32">adj_end</name></expr>)</condition> <block pos:start="45:35" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:19">

            <comment type="block" pos:start="47:13" pos:end="47:38">/* End of input found.  */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:27"><expr pos:start="49:13" pos:end="49:26"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:15">env</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:22">cc_op</name></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <literal type="number" pos:start="49:26" pos:end="49:26">2</literal></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:49"><expr pos:start="55:9" pos:end="55:48"><name pos:start="55:9" pos:end="55:9">v</name> <operator pos:start="55:11" pos:end="55:11">=</operator> <call pos:start="55:13" pos:end="55:48"><name pos:start="55:13" pos:end="55:28">cpu_lduw_data_ra</name><argument_list pos:start="55:29" pos:end="55:48">(<argument pos:start="55:30" pos:end="55:32"><expr pos:start="55:30" pos:end="55:32"><name pos:start="55:30" pos:end="55:32">env</name></expr></argument>, <argument pos:start="55:35" pos:end="55:43"><expr pos:start="55:35" pos:end="55:43"><name pos:start="55:35" pos:end="55:37">str</name> <operator pos:start="55:39" pos:end="55:39">+</operator> <name pos:start="55:41" pos:end="55:43">len</name></expr></argument>, <argument pos:start="55:46" pos:end="55:47"><expr pos:start="55:46" pos:end="55:47"><name pos:start="55:46" pos:end="55:47">ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="67:9"><if pos:start="57:9" pos:end="67:9">if <condition pos:start="57:12" pos:end="57:19">(<expr pos:start="57:13" pos:end="57:18"><name pos:start="57:13" pos:end="57:13">v</name> <operator pos:start="57:15" pos:end="57:16">==</operator> <name pos:start="57:18" pos:end="57:18">c</name></expr>)</condition> <block pos:start="57:21" pos:end="67:9">{<block_content pos:start="61:13" pos:end="65:19">

            <comment type="block" pos:start="59:13" pos:end="59:78">/* Character found.  Set R1 to the location; R2 is unmodified.  */</comment>

            <expr_stmt pos:start="61:13" pos:end="61:27"><expr pos:start="61:13" pos:end="61:26"><name pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:15">env</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:22">cc_op</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <literal type="number" pos:start="61:26" pos:end="61:26">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="63:13" pos:end="63:44"><expr pos:start="63:13" pos:end="63:43"><call pos:start="63:13" pos:end="63:43"><name pos:start="63:13" pos:end="63:23">set_address</name><argument_list pos:start="63:24" pos:end="63:43">(<argument pos:start="63:25" pos:end="63:27"><expr pos:start="63:25" pos:end="63:27"><name pos:start="63:25" pos:end="63:27">env</name></expr></argument>, <argument pos:start="63:30" pos:end="63:31"><expr pos:start="63:30" pos:end="63:31"><name pos:start="63:30" pos:end="63:31">r1</name></expr></argument>, <argument pos:start="63:34" pos:end="63:42"><expr pos:start="63:34" pos:end="63:42"><name pos:start="63:34" pos:end="63:36">str</name> <operator pos:start="63:38" pos:end="63:38">+</operator> <name pos:start="63:40" pos:end="63:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="73:5" pos:end="73:79">/* CPU-determined bytes processed.  Advance R2 to next byte to process.  */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:19"><expr pos:start="75:5" pos:end="75:18"><name pos:start="75:5" pos:end="75:14"><name pos:start="75:5" pos:end="75:7">env</name><operator pos:start="75:8" pos:end="75:9">-&gt;</operator><name pos:start="75:10" pos:end="75:14">cc_op</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <literal type="number" pos:start="75:18" pos:end="75:18">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:36"><expr pos:start="77:5" pos:end="77:35"><call pos:start="77:5" pos:end="77:35"><name pos:start="77:5" pos:end="77:15">set_address</name><argument_list pos:start="77:16" pos:end="77:35">(<argument pos:start="77:17" pos:end="77:19"><expr pos:start="77:17" pos:end="77:19"><name pos:start="77:17" pos:end="77:19">env</name></expr></argument>, <argument pos:start="77:22" pos:end="77:23"><expr pos:start="77:22" pos:end="77:23"><name pos:start="77:22" pos:end="77:23">r2</name></expr></argument>, <argument pos:start="77:26" pos:end="77:34"><expr pos:start="77:26" pos:end="77:34"><name pos:start="77:26" pos:end="77:28">str</name> <operator pos:start="77:30" pos:end="77:30">+</operator> <name pos:start="77:32" pos:end="77:34">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
