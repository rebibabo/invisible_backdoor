<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4513.c" pos:tabs="8"><function pos:start="1:1" pos:end="371:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">udp_open</name><parameter_list pos:start="1:20" pos:end="1:62">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:30">URLContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">h</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:50"><decl pos:start="1:36" pos:end="1:50"><type pos:start="1:36" pos:end="1:50"><specifier pos:start="1:36" pos:end="1:40">const</specifier> <name pos:start="1:42" pos:end="1:45">char</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">uri</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:61"><decl pos:start="1:53" pos:end="1:61"><type pos:start="1:53" pos:end="1:61"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:61">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="371:1">{<block_content pos:start="5:5" pos:end="369:24">

    <decl_stmt pos:start="5:5" pos:end="5:46"><decl pos:start="5:5" pos:end="5:23"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">char</name></type> <name pos:start="5:10" pos:end="5:23"><name pos:start="5:10" pos:end="5:17">hostname</name><index pos:start="5:18" pos:end="5:23">[<expr pos:start="5:19" pos:end="5:22"><literal type="number" pos:start="5:19" pos:end="5:22">1024</literal></expr>]</index></name></decl>, <decl pos:start="5:26" pos:end="5:45"><type ref="prev" pos:start="5:5" pos:end="5:8"/><name pos:start="5:26" pos:end="5:40"><name pos:start="5:26" pos:end="5:34">localaddr</name><index pos:start="5:35" pos:end="5:40">[<expr pos:start="5:36" pos:end="5:39"><literal type="number" pos:start="5:36" pos:end="5:39">1024</literal></expr>]</index></name> <init pos:start="5:42" pos:end="5:45">= <expr pos:start="5:44" pos:end="5:45"><literal type="string" pos:start="5:44" pos:end="5:45">""</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">port</name></decl>, <decl pos:start="7:15" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:20">udp_fd</name> <init pos:start="7:22" pos:end="7:25">= <expr pos:start="7:24" pos:end="7:25"><operator pos:start="7:24" pos:end="7:24">-</operator><literal type="number" pos:start="7:25" pos:end="7:25">1</literal></expr></init></decl>, <decl pos:start="7:28" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:28" pos:end="7:30">tmp</name></decl>, <decl pos:start="7:33" pos:end="7:45"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:33" pos:end="7:40">bind_ret</name> <init pos:start="7:42" pos:end="7:45">= <expr pos:start="7:44" pos:end="7:45"><operator pos:start="7:44" pos:end="7:44">-</operator><literal type="number" pos:start="7:45" pos:end="7:45">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">UDPContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:32">= <expr pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:32"><name pos:start="9:21" pos:end="9:21">h</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:17">is_output</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:17"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:17">[<expr pos:start="15:14" pos:end="15:16"><literal type="number" pos:start="15:14" pos:end="15:16">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:36"><decl pos:start="17:5" pos:end="17:35"><type pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:27"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:27">sockaddr_storage</name></name></type> <name pos:start="17:29" pos:end="17:35">my_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:12"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:23">reuse_specified</name> <init pos:start="21:25" pos:end="21:27">= <expr pos:start="21:27" pos:end="21:27"><literal type="number" pos:start="21:27" pos:end="21:27">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:23"><expr pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:5">h</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:18">is_streamed</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <literal type="number" pos:start="25:22" pos:end="25:22">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:30"><expr pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:5">h</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:22">max_packet_size</name></name> <operator pos:start="27:24" pos:end="27:24">=</operator> <literal type="number" pos:start="27:26" pos:end="27:29">1472</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:42"><expr pos:start="31:5" pos:end="31:41"><name pos:start="31:5" pos:end="31:13">is_output</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <operator pos:start="31:17" pos:end="31:17">!</operator><operator pos:start="31:18" pos:end="31:18">(</operator><name pos:start="31:19" pos:end="31:23">flags</name> <operator pos:start="31:25" pos:end="31:25">&amp;</operator> <name pos:start="31:27" pos:end="31:40">AVIO_FLAG_READ</name><operator pos:start="31:41" pos:end="31:41">)</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:16"><expr pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:10"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:10">ttl</name></name> <operator pos:start="35:12" pos:end="35:12">=</operator> <literal type="number" pos:start="35:14" pos:end="35:15">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:68"><expr pos:start="37:5" pos:end="37:67"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:5">s</name><operator pos:start="37:6" pos:end="37:7">-&gt;</operator><name pos:start="37:8" pos:end="37:18">buffer_size</name></name> <operator pos:start="37:20" pos:end="37:20">=</operator> <ternary pos:start="37:22" pos:end="37:67"><condition pos:start="37:22" pos:end="37:32"><expr pos:start="37:22" pos:end="37:30"><name pos:start="37:22" pos:end="37:30">is_output</name></expr> ?</condition><then pos:start="37:34" pos:end="37:48"> <expr pos:start="37:34" pos:end="37:48"><name pos:start="37:34" pos:end="37:48">UDP_TX_BUF_SIZE</name></expr> </then><else pos:start="37:50" pos:end="37:67">: <expr pos:start="37:52" pos:end="37:67"><name pos:start="37:52" pos:end="37:67">UDP_MAX_PKT_SIZE</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:41"><expr pos:start="41:5" pos:end="41:40"><name pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:5">s</name><operator pos:start="41:6" pos:end="41:7">-&gt;</operator><name pos:start="41:8" pos:end="41:27">circular_buffer_size</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <literal type="number" pos:start="41:31" pos:end="41:31">7</literal><operator pos:start="41:32" pos:end="41:32">*</operator><literal type="number" pos:start="41:33" pos:end="41:35">188</literal><operator pos:start="41:36" pos:end="41:36">*</operator><literal type="number" pos:start="41:37" pos:end="41:40">4096</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:5">p</name> <operator pos:start="45:7" pos:end="45:7">=</operator> <call pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:14">strchr</name><argument_list pos:start="45:15" pos:end="45:24">(<argument pos:start="45:16" pos:end="45:18"><expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">uri</name></expr></argument>, <argument pos:start="45:21" pos:end="45:23"><expr pos:start="45:21" pos:end="45:23"><literal type="char" pos:start="45:21" pos:end="45:23">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="121:5"><if pos:start="47:5" pos:end="121:5">if <condition pos:start="47:8" pos:end="47:10">(<expr pos:start="47:9" pos:end="47:9"><name pos:start="47:9" pos:end="47:9">p</name></expr>)</condition> <block pos:start="47:12" pos:end="121:5">{<block_content pos:start="49:9" pos:end="119:9">

        <if_stmt pos:start="49:9" pos:end="63:9"><if pos:start="49:9" pos:end="63:9">if <condition pos:start="49:12" pos:end="49:59">(<expr pos:start="49:13" pos:end="49:58"><call pos:start="49:13" pos:end="49:58"><name pos:start="49:13" pos:end="49:28">av_find_info_tag</name><argument_list pos:start="49:29" pos:end="49:58">(<argument pos:start="49:30" pos:end="49:32"><expr pos:start="49:30" pos:end="49:32"><name pos:start="49:30" pos:end="49:32">buf</name></expr></argument>, <argument pos:start="49:35" pos:end="49:45"><expr pos:start="49:35" pos:end="49:45"><sizeof pos:start="49:35" pos:end="49:45">sizeof<argument_list pos:start="49:41" pos:end="49:45">(<argument pos:start="49:42" pos:end="49:44"><expr pos:start="49:42" pos:end="49:44"><name pos:start="49:42" pos:end="49:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="49:48" pos:end="49:54"><expr pos:start="49:48" pos:end="49:54"><literal type="string" pos:start="49:48" pos:end="49:54">"reuse"</literal></expr></argument>, <argument pos:start="49:57" pos:end="49:57"><expr pos:start="49:57" pos:end="49:57"><name pos:start="49:57" pos:end="49:57">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:61" pos:end="63:9">{<block_content pos:start="51:13" pos:end="61:32">

            <decl_stmt pos:start="51:13" pos:end="51:32"><decl pos:start="51:13" pos:end="51:31"><type pos:start="51:13" pos:end="51:18"><name pos:start="51:13" pos:end="51:16">char</name> <modifier pos:start="51:18" pos:end="51:18">*</modifier></type><name pos:start="51:19" pos:end="51:24">endptr</name> <init pos:start="51:26" pos:end="51:31">= <expr pos:start="51:28" pos:end="51:31"><name pos:start="51:28" pos:end="51:31">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:55"><expr pos:start="53:13" pos:end="53:54"><name pos:start="53:13" pos:end="53:27"><name pos:start="53:13" pos:end="53:13">s</name><operator pos:start="53:14" pos:end="53:15">-&gt;</operator><name pos:start="53:16" pos:end="53:27">reuse_socket</name></name> <operator pos:start="53:29" pos:end="53:29">=</operator> <call pos:start="53:31" pos:end="53:54"><name pos:start="53:31" pos:end="53:36">strtol</name><argument_list pos:start="53:37" pos:end="53:54">(<argument pos:start="53:38" pos:end="53:40"><expr pos:start="53:38" pos:end="53:40"><name pos:start="53:38" pos:end="53:40">buf</name></expr></argument>, <argument pos:start="53:43" pos:end="53:49"><expr pos:start="53:43" pos:end="53:49"><operator pos:start="53:43" pos:end="53:43">&amp;</operator><name pos:start="53:44" pos:end="53:49">endptr</name></expr></argument>, <argument pos:start="53:52" pos:end="53:53"><expr pos:start="53:52" pos:end="53:53"><literal type="number" pos:start="53:52" pos:end="53:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="55:13" pos:end="55:77">/* assume if no digits were found it is a request to enable it */</comment>

            <if_stmt pos:start="57:13" pos:end="59:36"><if pos:start="57:13" pos:end="59:36">if <condition pos:start="57:16" pos:end="57:30">(<expr pos:start="57:17" pos:end="57:29"><name pos:start="57:17" pos:end="57:19">buf</name> <operator pos:start="57:21" pos:end="57:22">==</operator> <name pos:start="57:24" pos:end="57:29">endptr</name></expr>)</condition><block type="pseudo" pos:start="59:17" pos:end="59:36"><block_content pos:start="59:17" pos:end="59:36">

                <expr_stmt pos:start="59:17" pos:end="59:36"><expr pos:start="59:17" pos:end="59:35"><name pos:start="59:17" pos:end="59:31"><name pos:start="59:17" pos:end="59:17">s</name><operator pos:start="59:18" pos:end="59:19">-&gt;</operator><name pos:start="59:20" pos:end="59:31">reuse_socket</name></name> <operator pos:start="59:33" pos:end="59:33">=</operator> <literal type="number" pos:start="59:35" pos:end="59:35">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:27">reuse_specified</name> <operator pos:start="61:29" pos:end="61:29">=</operator> <literal type="number" pos:start="61:31" pos:end="61:31">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="65:9" pos:end="77:9"><if pos:start="65:9" pos:end="77:9">if <condition pos:start="65:12" pos:end="65:70">(<expr pos:start="65:13" pos:end="65:69"><call pos:start="65:13" pos:end="65:69"><name pos:start="65:13" pos:end="65:28">av_find_info_tag</name><argument_list pos:start="65:29" pos:end="65:69">(<argument pos:start="65:30" pos:end="65:32"><expr pos:start="65:30" pos:end="65:32"><name pos:start="65:30" pos:end="65:32">buf</name></expr></argument>, <argument pos:start="65:35" pos:end="65:45"><expr pos:start="65:35" pos:end="65:45"><sizeof pos:start="65:35" pos:end="65:45">sizeof<argument_list pos:start="65:41" pos:end="65:45">(<argument pos:start="65:42" pos:end="65:44"><expr pos:start="65:42" pos:end="65:44"><name pos:start="65:42" pos:end="65:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="65:48" pos:end="65:65"><expr pos:start="65:48" pos:end="65:65"><literal type="string" pos:start="65:48" pos:end="65:65">"overrun_nonfatal"</literal></expr></argument>, <argument pos:start="65:68" pos:end="65:68"><expr pos:start="65:68" pos:end="65:68"><name pos:start="65:68" pos:end="65:68">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:72" pos:end="77:9">{<block_content pos:start="67:13" pos:end="75:40">

            <decl_stmt pos:start="67:13" pos:end="67:32"><decl pos:start="67:13" pos:end="67:31"><type pos:start="67:13" pos:end="67:18"><name pos:start="67:13" pos:end="67:16">char</name> <modifier pos:start="67:18" pos:end="67:18">*</modifier></type><name pos:start="67:19" pos:end="67:24">endptr</name> <init pos:start="67:26" pos:end="67:31">= <expr pos:start="67:28" pos:end="67:31"><name pos:start="67:28" pos:end="67:31">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:59"><expr pos:start="69:13" pos:end="69:58"><name pos:start="69:13" pos:end="69:31"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:31">overrun_nonfatal</name></name> <operator pos:start="69:33" pos:end="69:33">=</operator> <call pos:start="69:35" pos:end="69:58"><name pos:start="69:35" pos:end="69:40">strtol</name><argument_list pos:start="69:41" pos:end="69:58">(<argument pos:start="69:42" pos:end="69:44"><expr pos:start="69:42" pos:end="69:44"><name pos:start="69:42" pos:end="69:44">buf</name></expr></argument>, <argument pos:start="69:47" pos:end="69:53"><expr pos:start="69:47" pos:end="69:53"><operator pos:start="69:47" pos:end="69:47">&amp;</operator><name pos:start="69:48" pos:end="69:53">endptr</name></expr></argument>, <argument pos:start="69:56" pos:end="69:57"><expr pos:start="69:56" pos:end="69:57"><literal type="number" pos:start="69:56" pos:end="69:57">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="71:13" pos:end="71:77">/* assume if no digits were found it is a request to enable it */</comment>

            <if_stmt pos:start="73:13" pos:end="75:40"><if pos:start="73:13" pos:end="75:40">if <condition pos:start="73:16" pos:end="73:30">(<expr pos:start="73:17" pos:end="73:29"><name pos:start="73:17" pos:end="73:19">buf</name> <operator pos:start="73:21" pos:end="73:22">==</operator> <name pos:start="73:24" pos:end="73:29">endptr</name></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:40"><block_content pos:start="75:17" pos:end="75:40">

                <expr_stmt pos:start="75:17" pos:end="75:40"><expr pos:start="75:17" pos:end="75:39"><name pos:start="75:17" pos:end="75:35"><name pos:start="75:17" pos:end="75:17">s</name><operator pos:start="75:18" pos:end="75:19">-&gt;</operator><name pos:start="75:20" pos:end="75:35">overrun_nonfatal</name></name> <operator pos:start="75:37" pos:end="75:37">=</operator> <literal type="number" pos:start="75:39" pos:end="75:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:57">(<expr pos:start="79:13" pos:end="79:56"><call pos:start="79:13" pos:end="79:56"><name pos:start="79:13" pos:end="79:28">av_find_info_tag</name><argument_list pos:start="79:29" pos:end="79:56">(<argument pos:start="79:30" pos:end="79:32"><expr pos:start="79:30" pos:end="79:32"><name pos:start="79:30" pos:end="79:32">buf</name></expr></argument>, <argument pos:start="79:35" pos:end="79:45"><expr pos:start="79:35" pos:end="79:45"><sizeof pos:start="79:35" pos:end="79:45">sizeof<argument_list pos:start="79:41" pos:end="79:45">(<argument pos:start="79:42" pos:end="79:44"><expr pos:start="79:42" pos:end="79:44"><name pos:start="79:42" pos:end="79:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="79:48" pos:end="79:52"><expr pos:start="79:48" pos:end="79:52"><literal type="string" pos:start="79:48" pos:end="79:52">"ttl"</literal></expr></argument>, <argument pos:start="79:55" pos:end="79:55"><expr pos:start="79:55" pos:end="79:55"><name pos:start="79:55" pos:end="79:55">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:59" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:43">

            <expr_stmt pos:start="81:13" pos:end="81:43"><expr pos:start="81:13" pos:end="81:42"><name pos:start="81:13" pos:end="81:18"><name pos:start="81:13" pos:end="81:13">s</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:18">ttl</name></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <call pos:start="81:22" pos:end="81:42"><name pos:start="81:22" pos:end="81:27">strtol</name><argument_list pos:start="81:28" pos:end="81:42">(<argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">buf</name></expr></argument>, <argument pos:start="81:34" pos:end="81:37"><expr pos:start="81:34" pos:end="81:37"><name pos:start="81:34" pos:end="81:37">NULL</name></expr></argument>, <argument pos:start="81:40" pos:end="81:41"><expr pos:start="81:40" pos:end="81:41"><literal type="number" pos:start="81:40" pos:end="81:41">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="85:9" pos:end="89:9"><if pos:start="85:9" pos:end="89:9">if <condition pos:start="85:12" pos:end="85:63">(<expr pos:start="85:13" pos:end="85:62"><call pos:start="85:13" pos:end="85:62"><name pos:start="85:13" pos:end="85:28">av_find_info_tag</name><argument_list pos:start="85:29" pos:end="85:62">(<argument pos:start="85:30" pos:end="85:32"><expr pos:start="85:30" pos:end="85:32"><name pos:start="85:30" pos:end="85:32">buf</name></expr></argument>, <argument pos:start="85:35" pos:end="85:45"><expr pos:start="85:35" pos:end="85:45"><sizeof pos:start="85:35" pos:end="85:45">sizeof<argument_list pos:start="85:41" pos:end="85:45">(<argument pos:start="85:42" pos:end="85:44"><expr pos:start="85:42" pos:end="85:44"><name pos:start="85:42" pos:end="85:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="85:48" pos:end="85:58"><expr pos:start="85:48" pos:end="85:58"><literal type="string" pos:start="85:48" pos:end="85:58">"localport"</literal></expr></argument>, <argument pos:start="85:61" pos:end="85:61"><expr pos:start="85:61" pos:end="85:61"><name pos:start="85:61" pos:end="85:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:65" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:50">

            <expr_stmt pos:start="87:13" pos:end="87:50"><expr pos:start="87:13" pos:end="87:49"><name pos:start="87:13" pos:end="87:25"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:25">local_port</name></name> <operator pos:start="87:27" pos:end="87:27">=</operator> <call pos:start="87:29" pos:end="87:49"><name pos:start="87:29" pos:end="87:34">strtol</name><argument_list pos:start="87:35" pos:end="87:49">(<argument pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:38"><name pos:start="87:36" pos:end="87:38">buf</name></expr></argument>, <argument pos:start="87:41" pos:end="87:44"><expr pos:start="87:41" pos:end="87:44"><name pos:start="87:41" pos:end="87:44">NULL</name></expr></argument>, <argument pos:start="87:47" pos:end="87:48"><expr pos:start="87:47" pos:end="87:48"><literal type="number" pos:start="87:47" pos:end="87:48">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:62">(<expr pos:start="91:13" pos:end="91:61"><call pos:start="91:13" pos:end="91:61"><name pos:start="91:13" pos:end="91:28">av_find_info_tag</name><argument_list pos:start="91:29" pos:end="91:61">(<argument pos:start="91:30" pos:end="91:32"><expr pos:start="91:30" pos:end="91:32"><name pos:start="91:30" pos:end="91:32">buf</name></expr></argument>, <argument pos:start="91:35" pos:end="91:45"><expr pos:start="91:35" pos:end="91:45"><sizeof pos:start="91:35" pos:end="91:45">sizeof<argument_list pos:start="91:41" pos:end="91:45">(<argument pos:start="91:42" pos:end="91:44"><expr pos:start="91:42" pos:end="91:44"><name pos:start="91:42" pos:end="91:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:48" pos:end="91:57"><expr pos:start="91:48" pos:end="91:57"><literal type="string" pos:start="91:48" pos:end="91:57">"pkt_size"</literal></expr></argument>, <argument pos:start="91:60" pos:end="91:60"><expr pos:start="91:60" pos:end="91:60"><name pos:start="91:60" pos:end="91:60">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:64" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:55">

            <expr_stmt pos:start="93:13" pos:end="93:55"><expr pos:start="93:13" pos:end="93:54"><name pos:start="93:13" pos:end="93:30"><name pos:start="93:13" pos:end="93:13">h</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:30">max_packet_size</name></name> <operator pos:start="93:32" pos:end="93:32">=</operator> <call pos:start="93:34" pos:end="93:54"><name pos:start="93:34" pos:end="93:39">strtol</name><argument_list pos:start="93:40" pos:end="93:54">(<argument pos:start="93:41" pos:end="93:43"><expr pos:start="93:41" pos:end="93:43"><name pos:start="93:41" pos:end="93:43">buf</name></expr></argument>, <argument pos:start="93:46" pos:end="93:49"><expr pos:start="93:46" pos:end="93:49"><name pos:start="93:46" pos:end="93:49">NULL</name></expr></argument>, <argument pos:start="93:52" pos:end="93:53"><expr pos:start="93:52" pos:end="93:53"><literal type="number" pos:start="93:52" pos:end="93:53">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="97:9" pos:end="101:9"><if pos:start="97:9" pos:end="101:9">if <condition pos:start="97:12" pos:end="97:65">(<expr pos:start="97:13" pos:end="97:64"><call pos:start="97:13" pos:end="97:64"><name pos:start="97:13" pos:end="97:28">av_find_info_tag</name><argument_list pos:start="97:29" pos:end="97:64">(<argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">buf</name></expr></argument>, <argument pos:start="97:35" pos:end="97:45"><expr pos:start="97:35" pos:end="97:45"><sizeof pos:start="97:35" pos:end="97:45">sizeof<argument_list pos:start="97:41" pos:end="97:45">(<argument pos:start="97:42" pos:end="97:44"><expr pos:start="97:42" pos:end="97:44"><name pos:start="97:42" pos:end="97:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="97:48" pos:end="97:60"><expr pos:start="97:48" pos:end="97:60"><literal type="string" pos:start="97:48" pos:end="97:60">"buffer_size"</literal></expr></argument>, <argument pos:start="97:63" pos:end="97:63"><expr pos:start="97:63" pos:end="97:63"><name pos:start="97:63" pos:end="97:63">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:67" pos:end="101:9">{<block_content pos:start="99:13" pos:end="99:51">

            <expr_stmt pos:start="99:13" pos:end="99:51"><expr pos:start="99:13" pos:end="99:50"><name pos:start="99:13" pos:end="99:26"><name pos:start="99:13" pos:end="99:13">s</name><operator pos:start="99:14" pos:end="99:15">-&gt;</operator><name pos:start="99:16" pos:end="99:26">buffer_size</name></name> <operator pos:start="99:28" pos:end="99:28">=</operator> <call pos:start="99:30" pos:end="99:50"><name pos:start="99:30" pos:end="99:35">strtol</name><argument_list pos:start="99:36" pos:end="99:50">(<argument pos:start="99:37" pos:end="99:39"><expr pos:start="99:37" pos:end="99:39"><name pos:start="99:37" pos:end="99:39">buf</name></expr></argument>, <argument pos:start="99:42" pos:end="99:45"><expr pos:start="99:42" pos:end="99:45"><name pos:start="99:42" pos:end="99:45">NULL</name></expr></argument>, <argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><literal type="number" pos:start="99:48" pos:end="99:49">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:61">(<expr pos:start="103:13" pos:end="103:60"><call pos:start="103:13" pos:end="103:60"><name pos:start="103:13" pos:end="103:28">av_find_info_tag</name><argument_list pos:start="103:29" pos:end="103:60">(<argument pos:start="103:30" pos:end="103:32"><expr pos:start="103:30" pos:end="103:32"><name pos:start="103:30" pos:end="103:32">buf</name></expr></argument>, <argument pos:start="103:35" pos:end="103:45"><expr pos:start="103:35" pos:end="103:45"><sizeof pos:start="103:35" pos:end="103:45">sizeof<argument_list pos:start="103:41" pos:end="103:45">(<argument pos:start="103:42" pos:end="103:44"><expr pos:start="103:42" pos:end="103:44"><name pos:start="103:42" pos:end="103:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="103:48" pos:end="103:56"><expr pos:start="103:48" pos:end="103:56"><literal type="string" pos:start="103:48" pos:end="103:56">"connect"</literal></expr></argument>, <argument pos:start="103:59" pos:end="103:59"><expr pos:start="103:59" pos:end="103:59"><name pos:start="103:59" pos:end="103:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:63" pos:end="107:9">{<block_content pos:start="105:13" pos:end="105:52">

            <expr_stmt pos:start="105:13" pos:end="105:52"><expr pos:start="105:13" pos:end="105:51"><name pos:start="105:13" pos:end="105:27"><name pos:start="105:13" pos:end="105:13">s</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:27">is_connected</name></name> <operator pos:start="105:29" pos:end="105:29">=</operator> <call pos:start="105:31" pos:end="105:51"><name pos:start="105:31" pos:end="105:36">strtol</name><argument_list pos:start="105:37" pos:end="105:51">(<argument pos:start="105:38" pos:end="105:40"><expr pos:start="105:38" pos:end="105:40"><name pos:start="105:38" pos:end="105:40">buf</name></expr></argument>, <argument pos:start="105:43" pos:end="105:46"><expr pos:start="105:43" pos:end="105:46"><name pos:start="105:43" pos:end="105:46">NULL</name></expr></argument>, <argument pos:start="105:49" pos:end="105:50"><expr pos:start="105:49" pos:end="105:50"><literal type="number" pos:start="105:49" pos:end="105:50">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:63">(<expr pos:start="109:13" pos:end="109:62"><call pos:start="109:13" pos:end="109:62"><name pos:start="109:13" pos:end="109:28">av_find_info_tag</name><argument_list pos:start="109:29" pos:end="109:62">(<argument pos:start="109:30" pos:end="109:32"><expr pos:start="109:30" pos:end="109:32"><name pos:start="109:30" pos:end="109:32">buf</name></expr></argument>, <argument pos:start="109:35" pos:end="109:45"><expr pos:start="109:35" pos:end="109:45"><sizeof pos:start="109:35" pos:end="109:45">sizeof<argument_list pos:start="109:41" pos:end="109:45">(<argument pos:start="109:42" pos:end="109:44"><expr pos:start="109:42" pos:end="109:44"><name pos:start="109:42" pos:end="109:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="109:48" pos:end="109:58"><expr pos:start="109:48" pos:end="109:58"><literal type="string" pos:start="109:48" pos:end="109:58">"fifo_size"</literal></expr></argument>, <argument pos:start="109:61" pos:end="109:61"><expr pos:start="109:61" pos:end="109:61"><name pos:start="109:61" pos:end="109:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="109:65" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:64">

            <expr_stmt pos:start="111:13" pos:end="111:64"><expr pos:start="111:13" pos:end="111:63"><name pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:13">s</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:35">circular_buffer_size</name></name> <operator pos:start="111:37" pos:end="111:37">=</operator> <call pos:start="111:39" pos:end="111:59"><name pos:start="111:39" pos:end="111:44">strtol</name><argument_list pos:start="111:45" pos:end="111:59">(<argument pos:start="111:46" pos:end="111:48"><expr pos:start="111:46" pos:end="111:48"><name pos:start="111:46" pos:end="111:48">buf</name></expr></argument>, <argument pos:start="111:51" pos:end="111:54"><expr pos:start="111:51" pos:end="111:54"><name pos:start="111:51" pos:end="111:54">NULL</name></expr></argument>, <argument pos:start="111:57" pos:end="111:58"><expr pos:start="111:57" pos:end="111:58"><literal type="number" pos:start="111:57" pos:end="111:58">10</literal></expr></argument>)</argument_list></call><operator pos:start="111:60" pos:end="111:60">*</operator><literal type="number" pos:start="111:61" pos:end="111:63">188</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:63">(<expr pos:start="115:13" pos:end="115:62"><call pos:start="115:13" pos:end="115:62"><name pos:start="115:13" pos:end="115:28">av_find_info_tag</name><argument_list pos:start="115:29" pos:end="115:62">(<argument pos:start="115:30" pos:end="115:32"><expr pos:start="115:30" pos:end="115:32"><name pos:start="115:30" pos:end="115:32">buf</name></expr></argument>, <argument pos:start="115:35" pos:end="115:45"><expr pos:start="115:35" pos:end="115:45"><sizeof pos:start="115:35" pos:end="115:45">sizeof<argument_list pos:start="115:41" pos:end="115:45">(<argument pos:start="115:42" pos:end="115:44"><expr pos:start="115:42" pos:end="115:44"><name pos:start="115:42" pos:end="115:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="115:48" pos:end="115:58"><expr pos:start="115:48" pos:end="115:58"><literal type="string" pos:start="115:48" pos:end="115:58">"localaddr"</literal></expr></argument>, <argument pos:start="115:61" pos:end="115:61"><expr pos:start="115:61" pos:end="115:61"><name pos:start="115:61" pos:end="115:61">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="115:65" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:58">

            <expr_stmt pos:start="117:13" pos:end="117:58"><expr pos:start="117:13" pos:end="117:57"><call pos:start="117:13" pos:end="117:57"><name pos:start="117:13" pos:end="117:22">av_strlcpy</name><argument_list pos:start="117:23" pos:end="117:57">(<argument pos:start="117:24" pos:end="117:32"><expr pos:start="117:24" pos:end="117:32"><name pos:start="117:24" pos:end="117:32">localaddr</name></expr></argument>, <argument pos:start="117:35" pos:end="117:37"><expr pos:start="117:35" pos:end="117:37"><name pos:start="117:35" pos:end="117:37">buf</name></expr></argument>, <argument pos:start="117:40" pos:end="117:56"><expr pos:start="117:40" pos:end="117:56"><sizeof pos:start="117:40" pos:end="117:56">sizeof<argument_list pos:start="117:46" pos:end="117:56">(<argument pos:start="117:47" pos:end="117:55"><expr pos:start="117:47" pos:end="117:55"><name pos:start="117:47" pos:end="117:55">localaddr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="125:5" pos:end="125:28">/* fill the dest addr */</comment>

    <expr_stmt pos:start="127:5" pos:end="127:84"><expr pos:start="127:5" pos:end="127:83"><call pos:start="127:5" pos:end="127:83"><name pos:start="127:5" pos:end="127:16">av_url_split</name><argument_list pos:start="127:17" pos:end="127:83">(<argument pos:start="127:18" pos:end="127:21"><expr pos:start="127:18" pos:end="127:21"><name pos:start="127:18" pos:end="127:21">NULL</name></expr></argument>, <argument pos:start="127:24" pos:end="127:24"><expr pos:start="127:24" pos:end="127:24"><literal type="number" pos:start="127:24" pos:end="127:24">0</literal></expr></argument>, <argument pos:start="127:27" pos:end="127:30"><expr pos:start="127:27" pos:end="127:30"><name pos:start="127:27" pos:end="127:30">NULL</name></expr></argument>, <argument pos:start="127:33" pos:end="127:33"><expr pos:start="127:33" pos:end="127:33"><literal type="number" pos:start="127:33" pos:end="127:33">0</literal></expr></argument>, <argument pos:start="127:36" pos:end="127:43"><expr pos:start="127:36" pos:end="127:43"><name pos:start="127:36" pos:end="127:43">hostname</name></expr></argument>, <argument pos:start="127:46" pos:end="127:61"><expr pos:start="127:46" pos:end="127:61"><sizeof pos:start="127:46" pos:end="127:61">sizeof<argument_list pos:start="127:52" pos:end="127:61">(<argument pos:start="127:53" pos:end="127:60"><expr pos:start="127:53" pos:end="127:60"><name pos:start="127:53" pos:end="127:60">hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="127:64" pos:end="127:68"><expr pos:start="127:64" pos:end="127:68"><operator pos:start="127:64" pos:end="127:64">&amp;</operator><name pos:start="127:65" pos:end="127:68">port</name></expr></argument>, <argument pos:start="127:71" pos:end="127:74"><expr pos:start="127:71" pos:end="127:74"><name pos:start="127:71" pos:end="127:74">NULL</name></expr></argument>, <argument pos:start="127:77" pos:end="127:77"><expr pos:start="127:77" pos:end="127:77"><literal type="number" pos:start="127:77" pos:end="127:77">0</literal></expr></argument>, <argument pos:start="127:80" pos:end="127:82"><expr pos:start="127:80" pos:end="127:82"><name pos:start="127:80" pos:end="127:82">uri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="131:5" pos:end="131:31">/* XXX: fix av_url_split */</comment>

    <if_stmt pos:start="133:5" pos:end="147:5"><if pos:start="133:5" pos:end="141:5">if <condition pos:start="133:8" pos:end="133:50">(<expr pos:start="133:9" pos:end="133:49"><name pos:start="133:9" pos:end="133:19"><name pos:start="133:9" pos:end="133:16">hostname</name><index pos:start="133:17" pos:end="133:19">[<expr pos:start="133:18" pos:end="133:18"><literal type="number" pos:start="133:18" pos:end="133:18">0</literal></expr>]</index></name> <operator pos:start="133:21" pos:end="133:22">==</operator> <literal type="char" pos:start="133:24" pos:end="133:27">'\0'</literal> <operator pos:start="133:29" pos:end="133:30">||</operator> <name pos:start="133:32" pos:end="133:42"><name pos:start="133:32" pos:end="133:39">hostname</name><index pos:start="133:40" pos:end="133:42">[<expr pos:start="133:41" pos:end="133:41"><literal type="number" pos:start="133:41" pos:end="133:41">0</literal></expr>]</index></name> <operator pos:start="133:44" pos:end="133:45">==</operator> <literal type="char" pos:start="133:47" pos:end="133:49">'?'</literal></expr>)</condition> <block pos:start="133:52" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:22">

        <comment type="block" pos:start="135:9" pos:end="135:49">/* only accepts null hostname if input */</comment>

        <if_stmt pos:start="137:9" pos:end="139:22"><if pos:start="137:9" pos:end="139:22">if <condition pos:start="137:12" pos:end="137:38">(<expr pos:start="137:13" pos:end="137:37"><operator pos:start="137:13" pos:end="137:13">!</operator><operator pos:start="137:14" pos:end="137:14">(</operator><name pos:start="137:15" pos:end="137:19">flags</name> <operator pos:start="137:21" pos:end="137:21">&amp;</operator> <name pos:start="137:23" pos:end="137:36">AVIO_FLAG_READ</name><operator pos:start="137:37" pos:end="137:37">)</operator></expr>)</condition><block type="pseudo" pos:start="139:13" pos:end="139:22"><block_content pos:start="139:13" pos:end="139:22">

            <goto pos:start="139:13" pos:end="139:22">goto <name pos:start="139:18" pos:end="139:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="141:7" pos:end="147:5">else <block pos:start="141:12" pos:end="147:5">{<block_content pos:start="143:9" pos:end="145:22">

        <if_stmt pos:start="143:9" pos:end="145:22"><if pos:start="143:9" pos:end="145:22">if <condition pos:start="143:12" pos:end="143:46">(<expr pos:start="143:13" pos:end="143:45"><call pos:start="143:13" pos:end="143:41"><name pos:start="143:13" pos:end="143:33">ff_udp_set_remote_url</name><argument_list pos:start="143:34" pos:end="143:41">(<argument pos:start="143:35" pos:end="143:35"><expr pos:start="143:35" pos:end="143:35"><name pos:start="143:35" pos:end="143:35">h</name></expr></argument>, <argument pos:start="143:38" pos:end="143:40"><expr pos:start="143:38" pos:end="143:40"><name pos:start="143:38" pos:end="143:40">uri</name></expr></argument>)</argument_list></call> <operator pos:start="143:43" pos:end="143:43">&lt;</operator> <literal type="number" pos:start="143:45" pos:end="143:45">0</literal></expr>)</condition><block type="pseudo" pos:start="145:13" pos:end="145:22"><block_content pos:start="145:13" pos:end="145:22">

            <goto pos:start="145:13" pos:end="145:22">goto <name pos:start="145:18" pos:end="145:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="151:5" pos:end="153:29"><if pos:start="151:5" pos:end="153:29">if <condition pos:start="151:8" pos:end="151:75">(<expr pos:start="151:9" pos:end="151:74"><operator pos:start="151:9" pos:end="151:9">(</operator><name pos:start="151:10" pos:end="151:24"><name pos:start="151:10" pos:end="151:10">s</name><operator pos:start="151:11" pos:end="151:12">-&gt;</operator><name pos:start="151:13" pos:end="151:24">is_multicast</name></name> <operator pos:start="151:26" pos:end="151:27">||</operator> <operator pos:start="151:29" pos:end="151:29">!</operator><name pos:start="151:30" pos:end="151:42"><name pos:start="151:30" pos:end="151:30">s</name><operator pos:start="151:31" pos:end="151:32">-&gt;</operator><name pos:start="151:33" pos:end="151:42">local_port</name></name><operator pos:start="151:43" pos:end="151:43">)</operator> <operator pos:start="151:45" pos:end="151:46">&amp;&amp;</operator> <operator pos:start="151:48" pos:end="151:48">(</operator><name pos:start="151:49" pos:end="151:56"><name pos:start="151:49" pos:end="151:49">h</name><operator pos:start="151:50" pos:end="151:51">-&gt;</operator><name pos:start="151:52" pos:end="151:56">flags</name></name> <operator pos:start="151:58" pos:end="151:58">&amp;</operator> <name pos:start="151:60" pos:end="151:73">AVIO_FLAG_READ</name><operator pos:start="151:74" pos:end="151:74">)</operator></expr>)</condition><block type="pseudo" pos:start="153:9" pos:end="153:29"><block_content pos:start="153:9" pos:end="153:29">

        <expr_stmt pos:start="153:9" pos:end="153:29"><expr pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:9">s</name><operator pos:start="153:10" pos:end="153:11">-&gt;</operator><name pos:start="153:12" pos:end="153:21">local_port</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <name pos:start="153:25" pos:end="153:28">port</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:61"><expr pos:start="155:5" pos:end="155:60"><name pos:start="155:5" pos:end="155:10">udp_fd</name> <operator pos:start="155:12" pos:end="155:12">=</operator> <call pos:start="155:14" pos:end="155:60"><name pos:start="155:14" pos:end="155:30">udp_socket_create</name><argument_list pos:start="155:31" pos:end="155:60">(<argument pos:start="155:32" pos:end="155:32"><expr pos:start="155:32" pos:end="155:32"><name pos:start="155:32" pos:end="155:32">s</name></expr></argument>, <argument pos:start="155:35" pos:end="155:42"><expr pos:start="155:35" pos:end="155:42"><operator pos:start="155:35" pos:end="155:35">&amp;</operator><name pos:start="155:36" pos:end="155:42">my_addr</name></expr></argument>, <argument pos:start="155:45" pos:end="155:48"><expr pos:start="155:45" pos:end="155:48"><operator pos:start="155:45" pos:end="155:45">&amp;</operator><name pos:start="155:46" pos:end="155:48">len</name></expr></argument>, <argument pos:start="155:51" pos:end="155:59"><expr pos:start="155:51" pos:end="155:59"><name pos:start="155:51" pos:end="155:59">localaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="159:18"><if pos:start="157:5" pos:end="159:18">if <condition pos:start="157:8" pos:end="157:19">(<expr pos:start="157:9" pos:end="157:18"><name pos:start="157:9" pos:end="157:14">udp_fd</name> <operator pos:start="157:16" pos:end="157:16">&lt;</operator> <literal type="number" pos:start="157:18" pos:end="157:18">0</literal></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:18"><block_content pos:start="159:9" pos:end="159:18">

        <goto pos:start="159:9" pos:end="159:18">goto <name pos:start="159:14" pos:end="159:17">fail</name>;</goto></block_content></block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="167:7">/* Follow the requested reuse option, unless it's multicast in which

     * case enable reuse unless explicitly disabled.

     */</comment>

    <if_stmt pos:start="169:5" pos:end="177:5"><if pos:start="169:5" pos:end="177:5">if <condition pos:start="169:8" pos:end="169:65">(<expr pos:start="169:9" pos:end="169:64"><name pos:start="169:9" pos:end="169:23"><name pos:start="169:9" pos:end="169:9">s</name><operator pos:start="169:10" pos:end="169:11">-&gt;</operator><name pos:start="169:12" pos:end="169:23">reuse_socket</name></name> <operator pos:start="169:25" pos:end="169:26">||</operator> <operator pos:start="169:28" pos:end="169:28">(</operator><name pos:start="169:29" pos:end="169:43"><name pos:start="169:29" pos:end="169:29">s</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:43">is_multicast</name></name> <operator pos:start="169:45" pos:end="169:46">&amp;&amp;</operator> <operator pos:start="169:48" pos:end="169:48">!</operator><name pos:start="169:49" pos:end="169:63">reuse_specified</name><operator pos:start="169:64" pos:end="169:64">)</operator></expr>)</condition> <block pos:start="169:67" pos:end="177:5">{<block_content pos:start="171:9" pos:end="175:22">

        <expr_stmt pos:start="171:9" pos:end="171:28"><expr pos:start="171:9" pos:end="171:27"><name pos:start="171:9" pos:end="171:23"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:23">reuse_socket</name></name> <operator pos:start="171:25" pos:end="171:25">=</operator> <literal type="number" pos:start="171:27" pos:end="171:27">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="173:9" pos:end="175:22"><if pos:start="173:9" pos:end="175:22">if <condition pos:start="173:12" pos:end="173:108">(<expr pos:start="173:13" pos:end="173:107"><call pos:start="173:13" pos:end="173:102"><name pos:start="173:13" pos:end="173:22">setsockopt</name> <argument_list pos:start="173:24" pos:end="173:102">(<argument pos:start="173:25" pos:end="173:30"><expr pos:start="173:25" pos:end="173:30"><name pos:start="173:25" pos:end="173:30">udp_fd</name></expr></argument>, <argument pos:start="173:33" pos:end="173:42"><expr pos:start="173:33" pos:end="173:42"><name pos:start="173:33" pos:end="173:42">SOL_SOCKET</name></expr></argument>, <argument pos:start="173:45" pos:end="173:56"><expr pos:start="173:45" pos:end="173:56"><name pos:start="173:45" pos:end="173:56">SO_REUSEADDR</name></expr></argument>, <argument pos:start="173:59" pos:end="173:76"><expr pos:start="173:59" pos:end="173:76"><operator pos:start="173:59" pos:end="173:59">&amp;</operator><operator pos:start="173:60" pos:end="173:60">(</operator><name pos:start="173:61" pos:end="173:75"><name pos:start="173:61" pos:end="173:61">s</name><operator pos:start="173:62" pos:end="173:63">-&gt;</operator><name pos:start="173:64" pos:end="173:75">reuse_socket</name></name><operator pos:start="173:76" pos:end="173:76">)</operator></expr></argument>, <argument pos:start="173:79" pos:end="173:101"><expr pos:start="173:79" pos:end="173:101"><sizeof pos:start="173:79" pos:end="173:101">sizeof<argument_list pos:start="173:85" pos:end="173:101">(<argument pos:start="173:86" pos:end="173:100"><expr pos:start="173:86" pos:end="173:100"><name pos:start="173:86" pos:end="173:100"><name pos:start="173:86" pos:end="173:86">s</name><operator pos:start="173:87" pos:end="173:88">-&gt;</operator><name pos:start="173:89" pos:end="173:100">reuse_socket</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="173:104" pos:end="173:105">!=</operator> <literal type="number" pos:start="173:107" pos:end="173:107">0</literal></expr>)</condition><block type="pseudo" pos:start="175:13" pos:end="175:22"><block_content pos:start="175:13" pos:end="175:22">

            <goto pos:start="175:13" pos:end="175:22">goto <name pos:start="175:18" pos:end="175:21">fail</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="181:5" pos:end="187:79">/* If multicast, try binding the multicast address first, to avoid

     * receiving UDP packets from other sources aimed at the same UDP

     * port. This fails on windows. This makes sending to the same address

     * using sendto() fail, so only do it if we're opened in read-only mode. */</comment>

    <if_stmt pos:start="189:5" pos:end="193:5"><if pos:start="189:5" pos:end="193:5">if <condition pos:start="189:8" pos:end="189:57">(<expr pos:start="189:9" pos:end="189:56"><name pos:start="189:9" pos:end="189:23"><name pos:start="189:9" pos:end="189:9">s</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:23">is_multicast</name></name> <operator pos:start="189:25" pos:end="189:26">&amp;&amp;</operator> <operator pos:start="189:28" pos:end="189:28">!</operator><operator pos:start="189:29" pos:end="189:29">(</operator><name pos:start="189:30" pos:end="189:37"><name pos:start="189:30" pos:end="189:30">h</name><operator pos:start="189:31" pos:end="189:32">-&gt;</operator><name pos:start="189:33" pos:end="189:37">flags</name></name> <operator pos:start="189:39" pos:end="189:39">&amp;</operator> <name pos:start="189:41" pos:end="189:55">AVIO_FLAG_WRITE</name><operator pos:start="189:56" pos:end="189:56">)</operator></expr>)</condition> <block pos:start="189:59" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:70">

        <expr_stmt pos:start="191:9" pos:end="191:70"><expr pos:start="191:9" pos:end="191:69"><name pos:start="191:9" pos:end="191:16">bind_ret</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <call pos:start="191:20" pos:end="191:69"><name pos:start="191:20" pos:end="191:23">bind</name><argument_list pos:start="191:24" pos:end="191:69">(<argument pos:start="191:25" pos:end="191:30"><expr pos:start="191:25" pos:end="191:30"><name pos:start="191:25" pos:end="191:30">udp_fd</name></expr></argument>,<argument pos:start="191:32" pos:end="191:63"><expr pos:start="191:32" pos:end="191:63"><operator pos:start="191:32" pos:end="191:32">(</operator>struct <name pos:start="191:40" pos:end="191:47">sockaddr</name> <operator pos:start="191:49" pos:end="191:49">*</operator><operator pos:start="191:50" pos:end="191:50">)</operator><operator pos:start="191:51" pos:end="191:51">&amp;</operator><name pos:start="191:52" pos:end="191:63"><name pos:start="191:52" pos:end="191:52">s</name><operator pos:start="191:53" pos:end="191:54">-&gt;</operator><name pos:start="191:55" pos:end="191:63">dest_addr</name></name></expr></argument>, <argument pos:start="191:66" pos:end="191:68"><expr pos:start="191:66" pos:end="191:68"><name pos:start="191:66" pos:end="191:68">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="195:5" pos:end="197:21">/* bind to the local address if not multicast or if the multicast

     * bind failed */</comment>

    <comment type="block" pos:start="199:5" pos:end="199:61">/* the bind is needed to give a port to the socket now */</comment>

    <if_stmt pos:start="201:5" pos:end="207:5"><if pos:start="201:5" pos:end="207:5">if <condition pos:start="201:8" pos:end="201:74">(<expr pos:start="201:9" pos:end="201:73"><name pos:start="201:9" pos:end="201:16">bind_ret</name> <operator pos:start="201:18" pos:end="201:18">&lt;</operator> <literal type="number" pos:start="201:20" pos:end="201:20">0</literal> <operator pos:start="201:22" pos:end="201:23">&amp;&amp;</operator> <call pos:start="201:25" pos:end="201:69"><name pos:start="201:25" pos:end="201:28">bind</name><argument_list pos:start="201:29" pos:end="201:69">(<argument pos:start="201:30" pos:end="201:35"><expr pos:start="201:30" pos:end="201:35"><name pos:start="201:30" pos:end="201:35">udp_fd</name></expr></argument>,<argument pos:start="201:37" pos:end="201:63"><expr pos:start="201:37" pos:end="201:63"><operator pos:start="201:37" pos:end="201:37">(</operator>struct <name pos:start="201:45" pos:end="201:52">sockaddr</name> <operator pos:start="201:54" pos:end="201:54">*</operator><operator pos:start="201:55" pos:end="201:55">)</operator><operator pos:start="201:56" pos:end="201:56">&amp;</operator><name pos:start="201:57" pos:end="201:63">my_addr</name></expr></argument>, <argument pos:start="201:66" pos:end="201:68"><expr pos:start="201:66" pos:end="201:68"><name pos:start="201:66" pos:end="201:68">len</name></expr></argument>)</argument_list></call> <operator pos:start="201:71" pos:end="201:71">&lt;</operator> <literal type="number" pos:start="201:73" pos:end="201:73">0</literal></expr>)</condition> <block pos:start="201:76" pos:end="207:5">{<block_content pos:start="203:9" pos:end="205:18">

        <expr_stmt pos:start="203:9" pos:end="203:70"><expr pos:start="203:9" pos:end="203:69"><call pos:start="203:9" pos:end="203:69"><name pos:start="203:9" pos:end="203:14">av_log</name><argument_list pos:start="203:15" pos:end="203:69">(<argument pos:start="203:16" pos:end="203:16"><expr pos:start="203:16" pos:end="203:16"><name pos:start="203:16" pos:end="203:16">h</name></expr></argument>, <argument pos:start="203:19" pos:end="203:30"><expr pos:start="203:19" pos:end="203:30"><name pos:start="203:19" pos:end="203:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="203:33" pos:end="203:51"><expr pos:start="203:33" pos:end="203:51"><literal type="string" pos:start="203:33" pos:end="203:51">"bind failed: %s\n"</literal></expr></argument>, <argument pos:start="203:54" pos:end="203:68"><expr pos:start="203:54" pos:end="203:68"><call pos:start="203:54" pos:end="203:68"><name pos:start="203:54" pos:end="203:61">strerror</name><argument_list pos:start="203:62" pos:end="203:68">(<argument pos:start="203:63" pos:end="203:67"><expr pos:start="203:63" pos:end="203:67"><name pos:start="203:63" pos:end="203:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="205:9" pos:end="205:18">goto <name pos:start="205:14" pos:end="205:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:26"><expr pos:start="211:5" pos:end="211:25"><name pos:start="211:5" pos:end="211:7">len</name> <operator pos:start="211:9" pos:end="211:9">=</operator> <sizeof pos:start="211:11" pos:end="211:25">sizeof<argument_list pos:start="211:17" pos:end="211:25">(<argument pos:start="211:18" pos:end="211:24"><expr pos:start="211:18" pos:end="211:24"><name pos:start="211:18" pos:end="211:24">my_addr</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:59"><expr pos:start="213:5" pos:end="213:58"><call pos:start="213:5" pos:end="213:58"><name pos:start="213:5" pos:end="213:15">getsockname</name><argument_list pos:start="213:16" pos:end="213:58">(<argument pos:start="213:17" pos:end="213:22"><expr pos:start="213:17" pos:end="213:22"><name pos:start="213:17" pos:end="213:22">udp_fd</name></expr></argument>, <argument pos:start="213:25" pos:end="213:51"><expr pos:start="213:25" pos:end="213:51"><operator pos:start="213:25" pos:end="213:25">(</operator>struct <name pos:start="213:33" pos:end="213:40">sockaddr</name> <operator pos:start="213:42" pos:end="213:42">*</operator><operator pos:start="213:43" pos:end="213:43">)</operator><operator pos:start="213:44" pos:end="213:44">&amp;</operator><name pos:start="213:45" pos:end="213:51">my_addr</name></expr></argument>, <argument pos:start="213:54" pos:end="213:57"><expr pos:start="213:54" pos:end="213:57"><operator pos:start="213:54" pos:end="213:54">&amp;</operator><name pos:start="213:55" pos:end="213:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:44"><expr pos:start="215:5" pos:end="215:43"><name pos:start="215:5" pos:end="215:17"><name pos:start="215:5" pos:end="215:5">s</name><operator pos:start="215:6" pos:end="215:7">-&gt;</operator><name pos:start="215:8" pos:end="215:17">local_port</name></name> <operator pos:start="215:19" pos:end="215:19">=</operator> <call pos:start="215:21" pos:end="215:43"><name pos:start="215:21" pos:end="215:28">udp_port</name><argument_list pos:start="215:29" pos:end="215:43">(<argument pos:start="215:30" pos:end="215:37"><expr pos:start="215:30" pos:end="215:37"><operator pos:start="215:30" pos:end="215:30">&amp;</operator><name pos:start="215:31" pos:end="215:37">my_addr</name></expr></argument>, <argument pos:start="215:40" pos:end="215:42"><expr pos:start="215:40" pos:end="215:42"><name pos:start="215:40" pos:end="215:42">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="219:5" pos:end="241:5"><if pos:start="219:5" pos:end="241:5">if <condition pos:start="219:8" pos:end="219:24">(<expr pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:23"><name pos:start="219:9" pos:end="219:9">s</name><operator pos:start="219:10" pos:end="219:11">-&gt;</operator><name pos:start="219:12" pos:end="219:23">is_multicast</name></name></expr>)</condition> <block pos:start="219:26" pos:end="241:5">{<block_content pos:start="221:9" pos:end="239:9">

        <if_stmt pos:start="221:9" pos:end="229:9"><if pos:start="221:9" pos:end="229:9">if <condition pos:start="221:12" pos:end="221:39">(<expr pos:start="221:13" pos:end="221:38"><name pos:start="221:13" pos:end="221:20"><name pos:start="221:13" pos:end="221:13">h</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:20">flags</name></name> <operator pos:start="221:22" pos:end="221:22">&amp;</operator> <name pos:start="221:24" pos:end="221:38">AVIO_FLAG_WRITE</name></expr>)</condition> <block pos:start="221:41" pos:end="229:9">{<block_content pos:start="225:13" pos:end="227:26">

            <comment type="block" pos:start="223:13" pos:end="223:24">/* output */</comment>

            <if_stmt pos:start="225:13" pos:end="227:26"><if pos:start="225:13" pos:end="227:26">if <condition pos:start="225:16" pos:end="225:92">(<expr pos:start="225:17" pos:end="225:91"><call pos:start="225:17" pos:end="225:87"><name pos:start="225:17" pos:end="225:37">udp_set_multicast_ttl</name><argument_list pos:start="225:38" pos:end="225:87">(<argument pos:start="225:39" pos:end="225:44"><expr pos:start="225:39" pos:end="225:44"><name pos:start="225:39" pos:end="225:44">udp_fd</name></expr></argument>, <argument pos:start="225:47" pos:end="225:52"><expr pos:start="225:47" pos:end="225:52"><name pos:start="225:47" pos:end="225:52"><name pos:start="225:47" pos:end="225:47">s</name><operator pos:start="225:48" pos:end="225:49">-&gt;</operator><name pos:start="225:50" pos:end="225:52">ttl</name></name></expr></argument>, <argument pos:start="225:55" pos:end="225:86"><expr pos:start="225:55" pos:end="225:86"><operator pos:start="225:55" pos:end="225:55">(</operator>struct <name pos:start="225:63" pos:end="225:70">sockaddr</name> <operator pos:start="225:72" pos:end="225:72">*</operator><operator pos:start="225:73" pos:end="225:73">)</operator><operator pos:start="225:74" pos:end="225:74">&amp;</operator><name pos:start="225:75" pos:end="225:86"><name pos:start="225:75" pos:end="225:75">s</name><operator pos:start="225:76" pos:end="225:77">-&gt;</operator><name pos:start="225:78" pos:end="225:86">dest_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="225:89" pos:end="225:89">&lt;</operator> <literal type="number" pos:start="225:91" pos:end="225:91">0</literal></expr>)</condition><block type="pseudo" pos:start="227:17" pos:end="227:26"><block_content pos:start="227:17" pos:end="227:26">

                <goto pos:start="227:17" pos:end="227:26">goto <name pos:start="227:22" pos:end="227:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="231:9" pos:end="239:9"><if pos:start="231:9" pos:end="239:9">if <condition pos:start="231:12" pos:end="231:38">(<expr pos:start="231:13" pos:end="231:37"><name pos:start="231:13" pos:end="231:20"><name pos:start="231:13" pos:end="231:13">h</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:20">flags</name></name> <operator pos:start="231:22" pos:end="231:22">&amp;</operator> <name pos:start="231:24" pos:end="231:37">AVIO_FLAG_READ</name></expr>)</condition> <block pos:start="231:40" pos:end="239:9">{<block_content pos:start="235:13" pos:end="237:26">

            <comment type="block" pos:start="233:13" pos:end="233:23">/* input */</comment>

            <if_stmt pos:start="235:13" pos:end="237:26"><if pos:start="235:13" pos:end="237:26">if <condition pos:start="235:16" pos:end="235:87">(<expr pos:start="235:17" pos:end="235:86"><call pos:start="235:17" pos:end="235:82"><name pos:start="235:17" pos:end="235:40">udp_join_multicast_group</name><argument_list pos:start="235:41" pos:end="235:82">(<argument pos:start="235:42" pos:end="235:47"><expr pos:start="235:42" pos:end="235:47"><name pos:start="235:42" pos:end="235:47">udp_fd</name></expr></argument>, <argument pos:start="235:50" pos:end="235:81"><expr pos:start="235:50" pos:end="235:81"><operator pos:start="235:50" pos:end="235:50">(</operator>struct <name pos:start="235:58" pos:end="235:65">sockaddr</name> <operator pos:start="235:67" pos:end="235:67">*</operator><operator pos:start="235:68" pos:end="235:68">)</operator><operator pos:start="235:69" pos:end="235:69">&amp;</operator><name pos:start="235:70" pos:end="235:81"><name pos:start="235:70" pos:end="235:70">s</name><operator pos:start="235:71" pos:end="235:72">-&gt;</operator><name pos:start="235:73" pos:end="235:81">dest_addr</name></name></expr></argument>)</argument_list></call> <operator pos:start="235:84" pos:end="235:84">&lt;</operator> <literal type="number" pos:start="235:86" pos:end="235:86">0</literal></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:26"><block_content pos:start="237:17" pos:end="237:26">

                <goto pos:start="237:17" pos:end="237:26">goto <name pos:start="237:22" pos:end="237:25">fail</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="245:5" pos:end="277:5"><if pos:start="245:5" pos:end="259:5">if <condition pos:start="245:8" pos:end="245:18">(<expr pos:start="245:9" pos:end="245:17"><name pos:start="245:9" pos:end="245:17">is_output</name></expr>)</condition> <block pos:start="245:20" pos:end="259:5">{<block_content pos:start="249:9" pos:end="257:9">

        <comment type="block" pos:start="247:9" pos:end="247:52">/* limit the tx buf size to limit latency */</comment>

        <expr_stmt pos:start="249:9" pos:end="249:29"><expr pos:start="249:9" pos:end="249:28"><name pos:start="249:9" pos:end="249:11">tmp</name> <operator pos:start="249:13" pos:end="249:13">=</operator> <name pos:start="249:15" pos:end="249:28"><name pos:start="249:15" pos:end="249:15">s</name><operator pos:start="249:16" pos:end="249:17">-&gt;</operator><name pos:start="249:18" pos:end="249:28">buffer_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="251:9" pos:end="257:9"><if pos:start="251:9" pos:end="257:9">if <condition pos:start="251:12" pos:end="251:77">(<expr pos:start="251:13" pos:end="251:76"><call pos:start="251:13" pos:end="251:72"><name pos:start="251:13" pos:end="251:22">setsockopt</name><argument_list pos:start="251:23" pos:end="251:72">(<argument pos:start="251:24" pos:end="251:29"><expr pos:start="251:24" pos:end="251:29"><name pos:start="251:24" pos:end="251:29">udp_fd</name></expr></argument>, <argument pos:start="251:32" pos:end="251:41"><expr pos:start="251:32" pos:end="251:41"><name pos:start="251:32" pos:end="251:41">SOL_SOCKET</name></expr></argument>, <argument pos:start="251:44" pos:end="251:52"><expr pos:start="251:44" pos:end="251:52"><name pos:start="251:44" pos:end="251:52">SO_SNDBUF</name></expr></argument>, <argument pos:start="251:55" pos:end="251:58"><expr pos:start="251:55" pos:end="251:58"><operator pos:start="251:55" pos:end="251:55">&amp;</operator><name pos:start="251:56" pos:end="251:58">tmp</name></expr></argument>, <argument pos:start="251:61" pos:end="251:71"><expr pos:start="251:61" pos:end="251:71"><sizeof pos:start="251:61" pos:end="251:71">sizeof<argument_list pos:start="251:67" pos:end="251:71">(<argument pos:start="251:68" pos:end="251:70"><expr pos:start="251:68" pos:end="251:70"><name pos:start="251:68" pos:end="251:70">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="251:74" pos:end="251:74">&lt;</operator> <literal type="number" pos:start="251:76" pos:end="251:76">0</literal></expr>)</condition> <block pos:start="251:79" pos:end="257:9">{<block_content pos:start="253:13" pos:end="255:22">

            <expr_stmt pos:start="253:13" pos:end="253:84"><expr pos:start="253:13" pos:end="253:83"><call pos:start="253:13" pos:end="253:83"><name pos:start="253:13" pos:end="253:18">av_log</name><argument_list pos:start="253:19" pos:end="253:83">(<argument pos:start="253:20" pos:end="253:20"><expr pos:start="253:20" pos:end="253:20"><name pos:start="253:20" pos:end="253:20">h</name></expr></argument>, <argument pos:start="253:23" pos:end="253:34"><expr pos:start="253:23" pos:end="253:34"><name pos:start="253:23" pos:end="253:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="253:37" pos:end="253:65"><expr pos:start="253:37" pos:end="253:65"><literal type="string" pos:start="253:37" pos:end="253:65">"setsockopt(SO_SNDBUF): %s\n"</literal></expr></argument>, <argument pos:start="253:68" pos:end="253:82"><expr pos:start="253:68" pos:end="253:82"><call pos:start="253:68" pos:end="253:82"><name pos:start="253:68" pos:end="253:75">strerror</name><argument_list pos:start="253:76" pos:end="253:82">(<argument pos:start="253:77" pos:end="253:81"><expr pos:start="253:77" pos:end="253:81"><name pos:start="253:77" pos:end="253:81">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="255:13" pos:end="255:22">goto <name pos:start="255:18" pos:end="255:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="259:7" pos:end="277:5">else <block pos:start="259:12" pos:end="277:5">{<block_content pos:start="265:9" pos:end="275:38">

        <comment type="block" pos:start="261:9" pos:end="263:73">/* set udp recv buffer size to the largest possible udp packet size to

         * avoid losing data on OSes that set this too low by default. */</comment>

        <expr_stmt pos:start="265:9" pos:end="265:29"><expr pos:start="265:9" pos:end="265:28"><name pos:start="265:9" pos:end="265:11">tmp</name> <operator pos:start="265:13" pos:end="265:13">=</operator> <name pos:start="265:15" pos:end="265:28"><name pos:start="265:15" pos:end="265:15">s</name><operator pos:start="265:16" pos:end="265:17">-&gt;</operator><name pos:start="265:18" pos:end="265:28">buffer_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="267:9" pos:end="271:9"><if pos:start="267:9" pos:end="271:9">if <condition pos:start="267:12" pos:end="267:77">(<expr pos:start="267:13" pos:end="267:76"><call pos:start="267:13" pos:end="267:72"><name pos:start="267:13" pos:end="267:22">setsockopt</name><argument_list pos:start="267:23" pos:end="267:72">(<argument pos:start="267:24" pos:end="267:29"><expr pos:start="267:24" pos:end="267:29"><name pos:start="267:24" pos:end="267:29">udp_fd</name></expr></argument>, <argument pos:start="267:32" pos:end="267:41"><expr pos:start="267:32" pos:end="267:41"><name pos:start="267:32" pos:end="267:41">SOL_SOCKET</name></expr></argument>, <argument pos:start="267:44" pos:end="267:52"><expr pos:start="267:44" pos:end="267:52"><name pos:start="267:44" pos:end="267:52">SO_RCVBUF</name></expr></argument>, <argument pos:start="267:55" pos:end="267:58"><expr pos:start="267:55" pos:end="267:58"><operator pos:start="267:55" pos:end="267:55">&amp;</operator><name pos:start="267:56" pos:end="267:58">tmp</name></expr></argument>, <argument pos:start="267:61" pos:end="267:71"><expr pos:start="267:61" pos:end="267:71"><sizeof pos:start="267:61" pos:end="267:71">sizeof<argument_list pos:start="267:67" pos:end="267:71">(<argument pos:start="267:68" pos:end="267:70"><expr pos:start="267:68" pos:end="267:70"><name pos:start="267:68" pos:end="267:70">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="267:74" pos:end="267:74">&lt;</operator> <literal type="number" pos:start="267:76" pos:end="267:76">0</literal></expr>)</condition> <block pos:start="267:79" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:87">

            <expr_stmt pos:start="269:13" pos:end="269:87"><expr pos:start="269:13" pos:end="269:86"><call pos:start="269:13" pos:end="269:86"><name pos:start="269:13" pos:end="269:18">av_log</name><argument_list pos:start="269:19" pos:end="269:86">(<argument pos:start="269:20" pos:end="269:20"><expr pos:start="269:20" pos:end="269:20"><name pos:start="269:20" pos:end="269:20">h</name></expr></argument>, <argument pos:start="269:23" pos:end="269:36"><expr pos:start="269:23" pos:end="269:36"><name pos:start="269:23" pos:end="269:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="269:39" pos:end="269:68"><expr pos:start="269:39" pos:end="269:68"><literal type="string" pos:start="269:39" pos:end="269:68">"setsockopt(SO_RECVBUF): %s\n"</literal></expr></argument>, <argument pos:start="269:71" pos:end="269:85"><expr pos:start="269:71" pos:end="269:85"><call pos:start="269:71" pos:end="269:85"><name pos:start="269:71" pos:end="269:78">strerror</name><argument_list pos:start="269:79" pos:end="269:85">(<argument pos:start="269:80" pos:end="269:84"><expr pos:start="269:80" pos:end="269:84"><name pos:start="269:80" pos:end="269:84">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="273:9" pos:end="273:42">/* make the socket non-blocking */</comment>

        <expr_stmt pos:start="275:9" pos:end="275:38"><expr pos:start="275:9" pos:end="275:37"><call pos:start="275:9" pos:end="275:37"><name pos:start="275:9" pos:end="275:26">ff_socket_nonblock</name><argument_list pos:start="275:27" pos:end="275:37">(<argument pos:start="275:28" pos:end="275:33"><expr pos:start="275:28" pos:end="275:33"><name pos:start="275:28" pos:end="275:33">udp_fd</name></expr></argument>, <argument pos:start="275:36" pos:end="275:36"><expr pos:start="275:36" pos:end="275:36"><literal type="number" pos:start="275:36" pos:end="275:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="279:5" pos:end="289:5"><if pos:start="279:5" pos:end="289:5">if <condition pos:start="279:8" pos:end="279:24">(<expr pos:start="279:9" pos:end="279:23"><name pos:start="279:9" pos:end="279:23"><name pos:start="279:9" pos:end="279:9">s</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:23">is_connected</name></name></expr>)</condition> <block pos:start="279:26" pos:end="289:5">{<block_content pos:start="281:9" pos:end="287:9">

        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:81">(<expr pos:start="281:13" pos:end="281:80"><call pos:start="281:13" pos:end="281:80"><name pos:start="281:13" pos:end="281:19">connect</name><argument_list pos:start="281:20" pos:end="281:80">(<argument pos:start="281:21" pos:end="281:26"><expr pos:start="281:21" pos:end="281:26"><name pos:start="281:21" pos:end="281:26">udp_fd</name></expr></argument>, <argument pos:start="281:29" pos:end="281:61"><expr pos:start="281:29" pos:end="281:61"><operator pos:start="281:29" pos:end="281:29">(</operator>struct <name pos:start="281:37" pos:end="281:44">sockaddr</name> <operator pos:start="281:46" pos:end="281:46">*</operator><operator pos:start="281:47" pos:end="281:47">)</operator> <operator pos:start="281:49" pos:end="281:49">&amp;</operator><name pos:start="281:50" pos:end="281:61"><name pos:start="281:50" pos:end="281:50">s</name><operator pos:start="281:51" pos:end="281:52">-&gt;</operator><name pos:start="281:53" pos:end="281:61">dest_addr</name></name></expr></argument>, <argument pos:start="281:64" pos:end="281:79"><expr pos:start="281:64" pos:end="281:79"><name pos:start="281:64" pos:end="281:79"><name pos:start="281:64" pos:end="281:64">s</name><operator pos:start="281:65" pos:end="281:66">-&gt;</operator><name pos:start="281:67" pos:end="281:79">dest_addr_len</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="281:83" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:22">

            <expr_stmt pos:start="283:13" pos:end="283:70"><expr pos:start="283:13" pos:end="283:69"><call pos:start="283:13" pos:end="283:69"><name pos:start="283:13" pos:end="283:18">av_log</name><argument_list pos:start="283:19" pos:end="283:69">(<argument pos:start="283:20" pos:end="283:20"><expr pos:start="283:20" pos:end="283:20"><name pos:start="283:20" pos:end="283:20">h</name></expr></argument>, <argument pos:start="283:23" pos:end="283:34"><expr pos:start="283:23" pos:end="283:34"><name pos:start="283:23" pos:end="283:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:37" pos:end="283:51"><expr pos:start="283:37" pos:end="283:51"><literal type="string" pos:start="283:37" pos:end="283:51">"connect: %s\n"</literal></expr></argument>, <argument pos:start="283:54" pos:end="283:68"><expr pos:start="283:54" pos:end="283:68"><call pos:start="283:54" pos:end="283:68"><name pos:start="283:54" pos:end="283:61">strerror</name><argument_list pos:start="283:62" pos:end="283:68">(<argument pos:start="283:63" pos:end="283:67"><expr pos:start="283:63" pos:end="283:67"><name pos:start="283:63" pos:end="283:67">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="285:13" pos:end="285:22">goto <name pos:start="285:18" pos:end="285:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="293:5" pos:end="298:0"><expr pos:start="293:5" pos:end="293:22"><name pos:start="293:5" pos:end="293:13"><name pos:start="293:5" pos:end="293:5">s</name><operator pos:start="293:6" pos:end="293:7">-&gt;</operator><name pos:start="293:8" pos:end="293:13">udp_fd</name></name> <operator pos:start="293:15" pos:end="293:15">=</operator> <name pos:start="293:17" pos:end="293:22">udp_fd</name></expr>;</expr_stmt>



<cpp:if pos:start="297:1" pos:end="297:17">#<cpp:directive pos:start="297:2" pos:end="297:3">if</cpp:directive> <expr pos:start="297:5" pos:end="297:17"><name pos:start="297:5" pos:end="297:17">HAVE_PTHREADS</name></expr></cpp:if>

    <if_stmt pos:start="299:5" pos:end="344:0"><if pos:start="299:5" pos:end="344:0">if <condition pos:start="299:8" pos:end="299:46">(<expr pos:start="299:9" pos:end="299:45"><operator pos:start="299:9" pos:end="299:9">!</operator><name pos:start="299:10" pos:end="299:18">is_output</name> <operator pos:start="299:20" pos:end="299:21">&amp;&amp;</operator> <name pos:start="299:23" pos:end="299:45"><name pos:start="299:23" pos:end="299:23">s</name><operator pos:start="299:24" pos:end="299:25">-&gt;</operator><name pos:start="299:26" pos:end="299:45">circular_buffer_size</name></name></expr>)</condition> <block pos:start="299:48" pos:end="344:0">{<block_content pos:start="301:9" pos:end="339:30">

        <decl_stmt pos:start="301:9" pos:end="301:16"><decl pos:start="301:9" pos:end="301:15"><type pos:start="301:9" pos:end="301:11"><name pos:start="301:9" pos:end="301:11">int</name></type> <name pos:start="301:13" pos:end="301:15">ret</name></decl>;</decl_stmt>



        <comment type="block" pos:start="305:9" pos:end="305:34">/* start the task going */</comment>

        <expr_stmt pos:start="307:9" pos:end="307:57"><expr pos:start="307:9" pos:end="307:56"><name pos:start="307:9" pos:end="307:15"><name pos:start="307:9" pos:end="307:9">s</name><operator pos:start="307:10" pos:end="307:11">-&gt;</operator><name pos:start="307:12" pos:end="307:15">fifo</name></name> <operator pos:start="307:17" pos:end="307:17">=</operator> <call pos:start="307:19" pos:end="307:56"><name pos:start="307:19" pos:end="307:31">av_fifo_alloc</name><argument_list pos:start="307:32" pos:end="307:56">(<argument pos:start="307:33" pos:end="307:55"><expr pos:start="307:33" pos:end="307:55"><name pos:start="307:33" pos:end="307:55"><name pos:start="307:33" pos:end="307:33">s</name><operator pos:start="307:34" pos:end="307:35">-&gt;</operator><name pos:start="307:36" pos:end="307:55">circular_buffer_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="309:9" pos:end="309:50"><expr pos:start="309:9" pos:end="309:49"><name pos:start="309:9" pos:end="309:11">ret</name> <operator pos:start="309:13" pos:end="309:13">=</operator> <call pos:start="309:15" pos:end="309:49"><name pos:start="309:15" pos:end="309:32">pthread_mutex_init</name><argument_list pos:start="309:33" pos:end="309:49">(<argument pos:start="309:34" pos:end="309:42"><expr pos:start="309:34" pos:end="309:42"><operator pos:start="309:34" pos:end="309:34">&amp;</operator><name pos:start="309:35" pos:end="309:42"><name pos:start="309:35" pos:end="309:35">s</name><operator pos:start="309:36" pos:end="309:37">-&gt;</operator><name pos:start="309:38" pos:end="309:42">mutex</name></name></expr></argument>, <argument pos:start="309:45" pos:end="309:48"><expr pos:start="309:45" pos:end="309:48"><name pos:start="309:45" pos:end="309:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="311:9" pos:end="317:9"><if pos:start="311:9" pos:end="317:9">if <condition pos:start="311:12" pos:end="311:21">(<expr pos:start="311:13" pos:end="311:20"><name pos:start="311:13" pos:end="311:15">ret</name> <operator pos:start="311:17" pos:end="311:18">!=</operator> <literal type="number" pos:start="311:20" pos:end="311:20">0</literal></expr>)</condition> <block pos:start="311:23" pos:end="317:9">{<block_content pos:start="313:13" pos:end="315:22">

            <expr_stmt pos:start="313:13" pos:end="313:87"><expr pos:start="313:13" pos:end="313:86"><call pos:start="313:13" pos:end="313:86"><name pos:start="313:13" pos:end="313:18">av_log</name><argument_list pos:start="313:19" pos:end="313:86">(<argument pos:start="313:20" pos:end="313:20"><expr pos:start="313:20" pos:end="313:20"><name pos:start="313:20" pos:end="313:20">h</name></expr></argument>, <argument pos:start="313:23" pos:end="313:34"><expr pos:start="313:23" pos:end="313:34"><name pos:start="313:23" pos:end="313:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="313:37" pos:end="313:70"><expr pos:start="313:37" pos:end="313:70"><literal type="string" pos:start="313:37" pos:end="313:70">"pthread_mutex_init failed : %s\n"</literal></expr></argument>, <argument pos:start="313:73" pos:end="313:85"><expr pos:start="313:73" pos:end="313:85"><call pos:start="313:73" pos:end="313:85"><name pos:start="313:73" pos:end="313:80">strerror</name><argument_list pos:start="313:81" pos:end="313:85">(<argument pos:start="313:82" pos:end="313:84"><expr pos:start="313:82" pos:end="313:84"><name pos:start="313:82" pos:end="313:84">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="315:13" pos:end="315:22">goto <name pos:start="315:18" pos:end="315:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="319:9" pos:end="319:48"><expr pos:start="319:9" pos:end="319:47"><name pos:start="319:9" pos:end="319:11">ret</name> <operator pos:start="319:13" pos:end="319:13">=</operator> <call pos:start="319:15" pos:end="319:47"><name pos:start="319:15" pos:end="319:31">pthread_cond_init</name><argument_list pos:start="319:32" pos:end="319:47">(<argument pos:start="319:33" pos:end="319:40"><expr pos:start="319:33" pos:end="319:40"><operator pos:start="319:33" pos:end="319:33">&amp;</operator><name pos:start="319:34" pos:end="319:40"><name pos:start="319:34" pos:end="319:34">s</name><operator pos:start="319:35" pos:end="319:36">-&gt;</operator><name pos:start="319:37" pos:end="319:40">cond</name></name></expr></argument>, <argument pos:start="319:43" pos:end="319:46"><expr pos:start="319:43" pos:end="319:46"><name pos:start="319:43" pos:end="319:46">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="321:9" pos:end="327:9"><if pos:start="321:9" pos:end="327:9">if <condition pos:start="321:12" pos:end="321:21">(<expr pos:start="321:13" pos:end="321:20"><name pos:start="321:13" pos:end="321:15">ret</name> <operator pos:start="321:17" pos:end="321:18">!=</operator> <literal type="number" pos:start="321:20" pos:end="321:20">0</literal></expr>)</condition> <block pos:start="321:23" pos:end="327:9">{<block_content pos:start="323:13" pos:end="325:27">

            <expr_stmt pos:start="323:13" pos:end="323:86"><expr pos:start="323:13" pos:end="323:85"><call pos:start="323:13" pos:end="323:85"><name pos:start="323:13" pos:end="323:18">av_log</name><argument_list pos:start="323:19" pos:end="323:85">(<argument pos:start="323:20" pos:end="323:20"><expr pos:start="323:20" pos:end="323:20"><name pos:start="323:20" pos:end="323:20">h</name></expr></argument>, <argument pos:start="323:23" pos:end="323:34"><expr pos:start="323:23" pos:end="323:34"><name pos:start="323:23" pos:end="323:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="323:37" pos:end="323:69"><expr pos:start="323:37" pos:end="323:69"><literal type="string" pos:start="323:37" pos:end="323:69">"pthread_cond_init failed : %s\n"</literal></expr></argument>, <argument pos:start="323:72" pos:end="323:84"><expr pos:start="323:72" pos:end="323:84"><call pos:start="323:72" pos:end="323:84"><name pos:start="323:72" pos:end="323:79">strerror</name><argument_list pos:start="323:80" pos:end="323:84">(<argument pos:start="323:81" pos:end="323:83"><expr pos:start="323:81" pos:end="323:83"><name pos:start="323:81" pos:end="323:83">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="325:13" pos:end="325:27">goto <name pos:start="325:18" pos:end="325:26">cond_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:88"><expr pos:start="329:9" pos:end="329:87"><name pos:start="329:9" pos:end="329:11">ret</name> <operator pos:start="329:13" pos:end="329:13">=</operator> <call pos:start="329:15" pos:end="329:87"><name pos:start="329:15" pos:end="329:28">pthread_create</name><argument_list pos:start="329:29" pos:end="329:87">(<argument pos:start="329:30" pos:end="329:55"><expr pos:start="329:30" pos:end="329:55"><operator pos:start="329:30" pos:end="329:30">&amp;</operator><name pos:start="329:31" pos:end="329:55"><name pos:start="329:31" pos:end="329:31">s</name><operator pos:start="329:32" pos:end="329:33">-&gt;</operator><name pos:start="329:34" pos:end="329:55">circular_buffer_thread</name></name></expr></argument>, <argument pos:start="329:58" pos:end="329:61"><expr pos:start="329:58" pos:end="329:61"><name pos:start="329:58" pos:end="329:61">NULL</name></expr></argument>, <argument pos:start="329:64" pos:end="329:83"><expr pos:start="329:64" pos:end="329:83"><name pos:start="329:64" pos:end="329:83">circular_buffer_task</name></expr></argument>, <argument pos:start="329:86" pos:end="329:86"><expr pos:start="329:86" pos:end="329:86"><name pos:start="329:86" pos:end="329:86">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="331:9" pos:end="337:9"><if pos:start="331:9" pos:end="337:9">if <condition pos:start="331:12" pos:end="331:21">(<expr pos:start="331:13" pos:end="331:20"><name pos:start="331:13" pos:end="331:15">ret</name> <operator pos:start="331:17" pos:end="331:18">!=</operator> <literal type="number" pos:start="331:20" pos:end="331:20">0</literal></expr>)</condition> <block pos:start="331:23" pos:end="337:9">{<block_content pos:start="333:13" pos:end="335:29">

            <expr_stmt pos:start="333:13" pos:end="333:83"><expr pos:start="333:13" pos:end="333:82"><call pos:start="333:13" pos:end="333:82"><name pos:start="333:13" pos:end="333:18">av_log</name><argument_list pos:start="333:19" pos:end="333:82">(<argument pos:start="333:20" pos:end="333:20"><expr pos:start="333:20" pos:end="333:20"><name pos:start="333:20" pos:end="333:20">h</name></expr></argument>, <argument pos:start="333:23" pos:end="333:34"><expr pos:start="333:23" pos:end="333:34"><name pos:start="333:23" pos:end="333:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="333:37" pos:end="333:66"><expr pos:start="333:37" pos:end="333:66"><literal type="string" pos:start="333:37" pos:end="333:66">"pthread_create failed : %s\n"</literal></expr></argument>, <argument pos:start="333:69" pos:end="333:81"><expr pos:start="333:69" pos:end="333:81"><call pos:start="333:69" pos:end="333:81"><name pos:start="333:69" pos:end="333:76">strerror</name><argument_list pos:start="333:77" pos:end="333:81">(<argument pos:start="333:78" pos:end="333:80"><expr pos:start="333:78" pos:end="333:80"><name pos:start="333:78" pos:end="333:80">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="335:13" pos:end="335:29">goto <name pos:start="335:18" pos:end="335:28">thread_fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="339:9" pos:end="339:30"><expr pos:start="339:9" pos:end="339:29"><name pos:start="339:9" pos:end="339:25"><name pos:start="339:9" pos:end="339:9">s</name><operator pos:start="339:10" pos:end="339:11">-&gt;</operator><name pos:start="339:12" pos:end="339:25">thread_started</name></name> <operator pos:start="339:27" pos:end="339:27">=</operator> <literal type="number" pos:start="339:29" pos:end="339:29">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="343:1" pos:end="343:6">#<cpp:directive pos:start="343:2" pos:end="343:6">endif</cpp:directive></cpp:endif>



    <return pos:start="347:5" pos:end="350:0">return <expr pos:start="347:12" pos:end="347:12"><literal type="number" pos:start="347:12" pos:end="347:12">0</literal></expr>;</return>

<cpp:if pos:start="349:1" pos:end="349:17">#<cpp:directive pos:start="349:2" pos:end="349:3">if</cpp:directive> <expr pos:start="349:5" pos:end="349:17"><name pos:start="349:5" pos:end="349:17">HAVE_PTHREADS</name></expr></cpp:if>

 <label pos:start="351:2" pos:end="351:13"><name pos:start="351:2" pos:end="351:12">thread_fail</name>:</label>

    <expr_stmt pos:start="353:5" pos:end="353:35"><expr pos:start="353:5" pos:end="353:34"><call pos:start="353:5" pos:end="353:34"><name pos:start="353:5" pos:end="353:24">pthread_cond_destroy</name><argument_list pos:start="353:25" pos:end="353:34">(<argument pos:start="353:26" pos:end="353:33"><expr pos:start="353:26" pos:end="353:33"><operator pos:start="353:26" pos:end="353:26">&amp;</operator><name pos:start="353:27" pos:end="353:33"><name pos:start="353:27" pos:end="353:27">s</name><operator pos:start="353:28" pos:end="353:29">-&gt;</operator><name pos:start="353:30" pos:end="353:33">cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 <label pos:start="355:2" pos:end="355:11"><name pos:start="355:2" pos:end="355:10">cond_fail</name>:</label>

    <expr_stmt pos:start="357:5" pos:end="360:0"><expr pos:start="357:5" pos:end="357:36"><call pos:start="357:5" pos:end="357:36"><name pos:start="357:5" pos:end="357:25">pthread_mutex_destroy</name><argument_list pos:start="357:26" pos:end="357:36">(<argument pos:start="357:27" pos:end="357:35"><expr pos:start="357:27" pos:end="357:35"><operator pos:start="357:27" pos:end="357:27">&amp;</operator><name pos:start="357:28" pos:end="357:35"><name pos:start="357:28" pos:end="357:28">s</name><operator pos:start="357:29" pos:end="357:30">-&gt;</operator><name pos:start="357:31" pos:end="357:35">mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="359:1" pos:end="359:6">#<cpp:directive pos:start="359:2" pos:end="359:6">endif</cpp:directive></cpp:endif>

 <label pos:start="361:2" pos:end="361:6"><name pos:start="361:2" pos:end="361:5">fail</name>:</label>

    <if_stmt pos:start="363:5" pos:end="365:28"><if pos:start="363:5" pos:end="365:28">if <condition pos:start="363:8" pos:end="363:20">(<expr pos:start="363:9" pos:end="363:19"><name pos:start="363:9" pos:end="363:14">udp_fd</name> <operator pos:start="363:16" pos:end="363:17">&gt;=</operator> <literal type="number" pos:start="363:19" pos:end="363:19">0</literal></expr>)</condition><block type="pseudo" pos:start="365:9" pos:end="365:28"><block_content pos:start="365:9" pos:end="365:28">

        <expr_stmt pos:start="365:9" pos:end="365:28"><expr pos:start="365:9" pos:end="365:27"><call pos:start="365:9" pos:end="365:27"><name pos:start="365:9" pos:end="365:19">closesocket</name><argument_list pos:start="365:20" pos:end="365:27">(<argument pos:start="365:21" pos:end="365:26"><expr pos:start="365:21" pos:end="365:26"><name pos:start="365:21" pos:end="365:26">udp_fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="367:5" pos:end="367:26"><expr pos:start="367:5" pos:end="367:25"><call pos:start="367:5" pos:end="367:25"><name pos:start="367:5" pos:end="367:16">av_fifo_free</name><argument_list pos:start="367:17" pos:end="367:25">(<argument pos:start="367:18" pos:end="367:24"><expr pos:start="367:18" pos:end="367:24"><name pos:start="367:18" pos:end="367:24"><name pos:start="367:18" pos:end="367:18">s</name><operator pos:start="367:19" pos:end="367:20">-&gt;</operator><name pos:start="367:21" pos:end="367:24">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="369:5" pos:end="369:24">return <expr pos:start="369:12" pos:end="369:23"><call pos:start="369:12" pos:end="369:23"><name pos:start="369:12" pos:end="369:18">AVERROR</name><argument_list pos:start="369:19" pos:end="369:23">(<argument pos:start="369:20" pos:end="369:22"><expr pos:start="369:20" pos:end="369:22"><name pos:start="369:20" pos:end="369:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
