<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4869.c" pos:tabs="8"><function pos:start="1:1" pos:end="65:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:34">vscsi_send_adapter_info</name><parameter_list pos:start="1:35" pos:end="1:65">(<parameter pos:start="1:36" pos:end="1:48"><decl pos:start="1:36" pos:end="1:48"><type pos:start="1:36" pos:end="1:48"><name pos:start="1:36" pos:end="1:45">VSCSIState</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:64"><decl pos:start="1:51" pos:end="1:64"><type pos:start="1:51" pos:end="1:64"><name pos:start="1:51" pos:end="1:59">vscsi_req</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:64">req</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="65:1">{<block_content pos:start="5:5" pos:end="63:68">

    <decl_stmt pos:start="5:5" pos:end="5:38"><decl pos:start="5:5" pos:end="5:37"><type pos:start="5:5" pos:end="5:32"><name pos:start="5:5" pos:end="5:30"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:30">viosrp_adapter_info</name></name> <modifier pos:start="5:32" pos:end="5:32">*</modifier></type><name pos:start="5:33" pos:end="5:37">sinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:32"><name pos:start="7:5" pos:end="7:32"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:32">mad_adapter_info_data</name></name></type> <name pos:start="7:34" pos:end="7:37">info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:11"><decl pos:start="9:5" pos:end="9:10"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:10">rc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="30:0"><expr pos:start="13:5" pos:end="13:37"><name pos:start="13:5" pos:end="13:9">sinfo</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <operator pos:start="13:13" pos:end="13:13">&amp;</operator><name pos:start="13:14" pos:end="13:37"><name pos:start="13:14" pos:end="13:16">req</name><operator pos:start="13:17" pos:end="13:18">-&gt;</operator><name pos:start="13:19" pos:end="13:20">iu</name><operator pos:start="13:21" pos:end="13:21">.</operator><name pos:start="13:22" pos:end="13:24">mad</name><operator pos:start="13:25" pos:end="13:25">.</operator><name pos:start="13:26" pos:end="13:37">adapter_info</name></name></expr>;</expr_stmt>



<cpp:if pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:5"><literal type="number" pos:start="17:5" pos:end="17:5">0</literal></expr></cpp:if> <comment type="block" pos:start="17:7" pos:end="17:22">/* What for ? */</comment>

    rc = spapr_tce_dma_read(&amp;s-&gt;vdev, be64_to_cpu(sinfo-&gt;buffer),

                            &amp;info, be16_to_cpu(sinfo-&gt;common.length));

    if (rc) {

        fprintf(stderr, "vscsi_send_adapter_info: DMA read failure !\n");

    }

<cpp:endif pos:start="29:1" pos:end="29:6">#<cpp:directive pos:start="29:2" pos:end="29:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="31:5" pos:end="31:35"><expr pos:start="31:5" pos:end="31:34"><call pos:start="31:5" pos:end="31:34"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="31:34">(<argument pos:start="31:12" pos:end="31:16"><expr pos:start="31:12" pos:end="31:16"><operator pos:start="31:12" pos:end="31:12">&amp;</operator><name pos:start="31:13" pos:end="31:16">info</name></expr></argument>, <argument pos:start="31:19" pos:end="31:19"><expr pos:start="31:19" pos:end="31:19"><literal type="number" pos:start="31:19" pos:end="31:19">0</literal></expr></argument>, <argument pos:start="31:22" pos:end="31:33"><expr pos:start="31:22" pos:end="31:33"><sizeof pos:start="31:22" pos:end="31:33">sizeof<argument_list pos:start="31:28" pos:end="31:33">(<argument pos:start="31:29" pos:end="31:32"><expr pos:start="31:29" pos:end="31:32"><name pos:start="31:29" pos:end="31:32">info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:42"><expr pos:start="33:5" pos:end="33:41"><call pos:start="33:5" pos:end="33:41"><name pos:start="33:5" pos:end="33:10">strcpy</name><argument_list pos:start="33:11" pos:end="33:41">(<argument pos:start="33:12" pos:end="33:27"><expr pos:start="33:12" pos:end="33:27"><name pos:start="33:12" pos:end="33:27"><name pos:start="33:12" pos:end="33:15">info</name><operator pos:start="33:16" pos:end="33:16">.</operator><name pos:start="33:17" pos:end="33:27">srp_version</name></name></expr></argument>, <argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><name pos:start="33:30" pos:end="33:40">SRP_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:57"><expr pos:start="35:5" pos:end="35:56"><call pos:start="35:5" pos:end="35:56"><name pos:start="35:5" pos:end="35:11">strncpy</name><argument_list pos:start="35:12" pos:end="35:56">(<argument pos:start="35:13" pos:end="35:31"><expr pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:31"><name pos:start="35:13" pos:end="35:16">info</name><operator pos:start="35:17" pos:end="35:17">.</operator><name pos:start="35:18" pos:end="35:31">partition_name</name></name></expr></argument>, <argument pos:start="35:34" pos:end="35:39"><expr pos:start="35:34" pos:end="35:39"><literal type="string" pos:start="35:34" pos:end="35:39">"qemu"</literal></expr></argument>, <argument pos:start="35:42" pos:end="35:55"><expr pos:start="35:42" pos:end="35:55"><sizeof pos:start="35:42" pos:end="35:55">sizeof<argument_list pos:start="35:48" pos:end="35:55">(<argument pos:start="35:49" pos:end="35:54"><expr pos:start="35:49" pos:end="35:54"><literal type="string" pos:start="35:49" pos:end="35:54">"qemu"</literal></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:43"><expr pos:start="37:5" pos:end="37:42"><name pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:8">info</name><operator pos:start="37:9" pos:end="37:9">.</operator><name pos:start="37:10" pos:end="37:25">partition_number</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <call pos:start="37:29" pos:end="37:42"><name pos:start="37:29" pos:end="37:39">cpu_to_be32</name><argument_list pos:start="37:40" pos:end="37:42">(<argument pos:start="37:41" pos:end="37:41"><expr pos:start="37:41" pos:end="37:41"><literal type="number" pos:start="37:41" pos:end="37:41">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:20"><name pos:start="39:5" pos:end="39:8">info</name><operator pos:start="39:9" pos:end="39:9">.</operator><name pos:start="39:10" pos:end="39:20">mad_version</name></name> <operator pos:start="39:22" pos:end="39:22">=</operator> <call pos:start="39:24" pos:end="39:37"><name pos:start="39:24" pos:end="39:34">cpu_to_be32</name><argument_list pos:start="39:35" pos:end="39:37">(<argument pos:start="39:36" pos:end="39:36"><expr pos:start="39:36" pos:end="39:36"><literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:34"><expr pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:8">info</name><operator pos:start="41:9" pos:end="41:9">.</operator><name pos:start="41:10" pos:end="41:16">os_type</name></name> <operator pos:start="41:18" pos:end="41:18">=</operator> <call pos:start="41:20" pos:end="41:33"><name pos:start="41:20" pos:end="41:30">cpu_to_be32</name><argument_list pos:start="41:31" pos:end="41:33">(<argument pos:start="41:32" pos:end="41:32"><expr pos:start="41:32" pos:end="41:32"><literal type="number" pos:start="41:32" pos:end="41:32">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:63"><expr pos:start="43:5" pos:end="43:62"><name pos:start="43:5" pos:end="43:24"><name pos:start="43:5" pos:end="43:8">info</name><operator pos:start="43:9" pos:end="43:9">.</operator><name pos:start="43:10" pos:end="43:21">port_max_txu</name><index pos:start="43:22" pos:end="43:24">[<expr pos:start="43:23" pos:end="43:23"><literal type="number" pos:start="43:23" pos:end="43:23">0</literal></expr>]</index></name> <operator pos:start="43:26" pos:end="43:26">=</operator> <call pos:start="43:28" pos:end="43:62"><name pos:start="43:28" pos:end="43:38">cpu_to_be32</name><argument_list pos:start="43:39" pos:end="43:62">(<argument pos:start="43:40" pos:end="43:61"><expr pos:start="43:40" pos:end="43:61"><name pos:start="43:40" pos:end="43:56">VSCSI_MAX_SECTORS</name> <operator pos:start="43:58" pos:end="43:59">&lt;&lt;</operator> <literal type="number" pos:start="43:61" pos:end="43:61">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="49:71"><expr pos:start="47:5" pos:end="49:70"><name pos:start="47:5" pos:end="47:6">rc</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <call pos:start="47:10" pos:end="49:70"><name pos:start="47:10" pos:end="47:28">spapr_tce_dma_write</name><argument_list pos:start="47:29" pos:end="49:70">(<argument pos:start="47:30" pos:end="47:37"><expr pos:start="47:30" pos:end="47:37"><operator pos:start="47:30" pos:end="47:30">&amp;</operator><name pos:start="47:31" pos:end="47:37"><name pos:start="47:31" pos:end="47:31">s</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:37">vdev</name></name></expr></argument>, <argument pos:start="47:40" pos:end="47:65"><expr pos:start="47:40" pos:end="47:65"><call pos:start="47:40" pos:end="47:65"><name pos:start="47:40" pos:end="47:50">be64_to_cpu</name><argument_list pos:start="47:51" pos:end="47:65">(<argument pos:start="47:52" pos:end="47:64"><expr pos:start="47:52" pos:end="47:64"><name pos:start="47:52" pos:end="47:64"><name pos:start="47:52" pos:end="47:56">sinfo</name><operator pos:start="47:57" pos:end="47:58">-&gt;</operator><name pos:start="47:59" pos:end="47:64">buffer</name></name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="49:30" pos:end="49:34"><expr pos:start="49:30" pos:end="49:34"><operator pos:start="49:30" pos:end="49:30">&amp;</operator><name pos:start="49:31" pos:end="49:34">info</name></expr></argument>, <argument pos:start="49:37" pos:end="49:69"><expr pos:start="49:37" pos:end="49:69"><call pos:start="49:37" pos:end="49:69"><name pos:start="49:37" pos:end="49:47">be16_to_cpu</name><argument_list pos:start="49:48" pos:end="49:69">(<argument pos:start="49:49" pos:end="49:68"><expr pos:start="49:49" pos:end="49:68"><name pos:start="49:49" pos:end="49:68"><name pos:start="49:49" pos:end="49:53">sinfo</name><operator pos:start="49:54" pos:end="49:55">-&gt;</operator><name pos:start="49:56" pos:end="49:61">common</name><operator pos:start="49:62" pos:end="49:62">.</operator><name pos:start="49:63" pos:end="49:68">length</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:11">(<expr pos:start="51:9" pos:end="51:10"><name pos:start="51:9" pos:end="51:10">rc</name></expr>)</condition>  <block pos:start="51:14" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:74">

        <expr_stmt pos:start="53:9" pos:end="53:74"><expr pos:start="53:9" pos:end="53:73"><call pos:start="53:9" pos:end="53:73"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:73">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:72"><expr pos:start="53:25" pos:end="53:72"><literal type="string" pos:start="53:25" pos:end="53:72">"vscsi_send_adapter_info: DMA write failure !\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:51"><expr pos:start="59:5" pos:end="59:50"><name pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:9">sinfo</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:17">common</name><operator pos:start="59:18" pos:end="59:18">.</operator><name pos:start="59:19" pos:end="59:24">status</name></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <ternary pos:start="59:28" pos:end="59:50"><condition pos:start="59:28" pos:end="59:31"><expr pos:start="59:28" pos:end="59:29"><name pos:start="59:28" pos:end="59:29">rc</name></expr> ?</condition><then pos:start="59:33" pos:end="59:46"> <expr pos:start="59:33" pos:end="59:46"><call pos:start="59:33" pos:end="59:46"><name pos:start="59:33" pos:end="59:43">cpu_to_be32</name><argument_list pos:start="59:44" pos:end="59:46">(<argument pos:start="59:45" pos:end="59:45"><expr pos:start="59:45" pos:end="59:45"><literal type="number" pos:start="59:45" pos:end="59:45">1</literal></expr></argument>)</argument_list></call></expr> </then><else pos:start="59:48" pos:end="59:50">: <expr pos:start="59:50" pos:end="59:50"><literal type="number" pos:start="59:50" pos:end="59:50">0</literal></expr></else></ternary></expr>;</expr_stmt>



    <return pos:start="63:5" pos:end="63:68">return <expr pos:start="63:12" pos:end="63:67"><call pos:start="63:12" pos:end="63:67"><name pos:start="63:12" pos:end="63:24">vscsi_send_iu</name><argument_list pos:start="63:25" pos:end="63:67">(<argument pos:start="63:26" pos:end="63:26"><expr pos:start="63:26" pos:end="63:26"><name pos:start="63:26" pos:end="63:26">s</name></expr></argument>, <argument pos:start="63:29" pos:end="63:31"><expr pos:start="63:29" pos:end="63:31"><name pos:start="63:29" pos:end="63:31">req</name></expr></argument>, <argument pos:start="63:34" pos:end="63:47"><expr pos:start="63:34" pos:end="63:47"><sizeof pos:start="63:34" pos:end="63:47">sizeof<argument_list pos:start="63:40" pos:end="63:47">(<argument pos:start="63:41" pos:end="63:46"><expr pos:start="63:41" pos:end="63:46"><operator pos:start="63:41" pos:end="63:41">*</operator><name pos:start="63:42" pos:end="63:46">sinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="63:50" pos:end="63:66"><expr pos:start="63:50" pos:end="63:66"><name pos:start="63:50" pos:end="63:66">VIOSRP_MAD_FORMAT</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
