<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5753.c" pos:tabs="8"><function pos:start="1:1" pos:end="213:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:20">sd_rsp_type_t</name></type> <name pos:start="1:22" pos:end="1:35">sd_app_command</name><parameter_list pos:start="1:36" pos:end="3:50">(<parameter pos:start="1:37" pos:end="1:47"><decl pos:start="1:37" pos:end="1:47"><type pos:start="1:37" pos:end="1:47"><name pos:start="1:37" pos:end="1:43">SDState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">sd</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:49"><decl pos:start="3:37" pos:end="3:49"><type pos:start="3:37" pos:end="3:49"><name pos:start="3:37" pos:end="3:45">SDRequest</name></type> <name pos:start="3:47" pos:end="3:49">req</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="213:1">{<block_content pos:start="7:5" pos:end="211:22">

    <expr_stmt pos:start="7:5" pos:end="7:49"><expr pos:start="7:5" pos:end="7:48"><call pos:start="7:5" pos:end="7:48"><name pos:start="7:5" pos:end="7:11">DPRINTF</name><argument_list pos:start="7:12" pos:end="7:48">(<argument pos:start="7:13" pos:end="7:29"><expr pos:start="7:13" pos:end="7:29"><literal type="string" pos:start="7:13" pos:end="7:29">"ACMD%d 0x%08x\n"</literal></expr></argument>, <argument pos:start="7:32" pos:end="7:38"><expr pos:start="7:32" pos:end="7:38"><name pos:start="7:32" pos:end="7:38"><name pos:start="7:32" pos:end="7:34">req</name><operator pos:start="7:35" pos:end="7:35">.</operator><name pos:start="7:36" pos:end="7:38">cmd</name></name></expr></argument>, <argument pos:start="7:41" pos:end="7:47"><expr pos:start="7:41" pos:end="7:47"><name pos:start="7:41" pos:end="7:47"><name pos:start="7:41" pos:end="7:43">req</name><operator pos:start="7:44" pos:end="7:44">.</operator><name pos:start="7:45" pos:end="7:47">arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="9:5" pos:end="205:5">switch <condition pos:start="9:12" pos:end="9:20">(<expr pos:start="9:13" pos:end="9:19"><name pos:start="9:13" pos:end="9:19"><name pos:start="9:13" pos:end="9:15">req</name><operator pos:start="9:16" pos:end="9:16">.</operator><name pos:start="9:17" pos:end="9:19">cmd</name></name></expr>)</condition> <block pos:start="9:22" pos:end="205:5">{<block_content pos:start="11:5" pos:end="203:42">

    <case pos:start="11:5" pos:end="11:11">case <expr pos:start="11:10" pos:end="11:10"><literal type="number" pos:start="11:10" pos:end="11:10">6</literal></expr>:</case>	<comment type="block" pos:start="11:17" pos:end="11:43">/* ACMD6:  SET_BUS_WIDTH */</comment>

        <switch pos:start="13:9" pos:end="29:9">switch <condition pos:start="13:16" pos:end="13:26">(<expr pos:start="13:17" pos:end="13:25"><name pos:start="13:17" pos:end="13:25"><name pos:start="13:17" pos:end="13:18">sd</name><operator pos:start="13:19" pos:end="13:20">-&gt;</operator><name pos:start="13:21" pos:end="13:25">state</name></name></expr>)</condition> <block pos:start="13:28" pos:end="29:9">{<block_content pos:start="15:9" pos:end="27:18">

        <case pos:start="15:9" pos:end="15:31">case <expr pos:start="15:14" pos:end="15:30"><name pos:start="15:14" pos:end="15:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="17:13" pos:end="17:37"><expr pos:start="17:13" pos:end="17:36"><name pos:start="17:13" pos:end="17:28"><name pos:start="17:13" pos:end="17:14">sd</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:25">sd_status</name><index pos:start="17:26" pos:end="17:28">[<expr pos:start="17:27" pos:end="17:27"><literal type="number" pos:start="17:27" pos:end="17:27">0</literal></expr>]</index></name> <operator pos:start="17:30" pos:end="17:31">&amp;=</operator> <literal type="number" pos:start="17:33" pos:end="17:36">0x3f</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="19:13" pos:end="19:54"><expr pos:start="19:13" pos:end="19:53"><name pos:start="19:13" pos:end="19:28"><name pos:start="19:13" pos:end="19:14">sd</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:25">sd_status</name><index pos:start="19:26" pos:end="19:28">[<expr pos:start="19:27" pos:end="19:27"><literal type="number" pos:start="19:27" pos:end="19:27">0</literal></expr>]</index></name> <operator pos:start="19:30" pos:end="19:31">|=</operator> <operator pos:start="19:33" pos:end="19:33">(</operator><name pos:start="19:34" pos:end="19:40"><name pos:start="19:34" pos:end="19:36">req</name><operator pos:start="19:37" pos:end="19:37">.</operator><name pos:start="19:38" pos:end="19:40">arg</name></name> <operator pos:start="19:42" pos:end="19:42">&amp;</operator> <literal type="number" pos:start="19:44" pos:end="19:47">0x03</literal><operator pos:start="19:48" pos:end="19:48">)</operator> <operator pos:start="19:50" pos:end="19:51">&lt;&lt;</operator> <literal type="number" pos:start="19:53" pos:end="19:53">6</literal></expr>;</expr_stmt>

            <return pos:start="21:13" pos:end="21:25">return <expr pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:24">sd_r1</name></expr>;</return>



        <default pos:start="25:9" pos:end="25:16">default:</default>

            <break pos:start="27:13" pos:end="27:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="31:9" pos:end="31:14">break;</break>



    <case pos:start="35:5" pos:end="35:12">case <expr pos:start="35:10" pos:end="35:11"><literal type="number" pos:start="35:10" pos:end="35:11">13</literal></expr>:</case>	<comment type="block" pos:start="35:17" pos:end="35:39">/* ACMD13: SD_STATUS */</comment>

        <switch pos:start="37:9" pos:end="55:9">switch <condition pos:start="37:16" pos:end="37:26">(<expr pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:25"><name pos:start="37:17" pos:end="37:18">sd</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:25">state</name></name></expr>)</condition> <block pos:start="37:28" pos:end="55:9">{<block_content pos:start="39:9" pos:end="53:18">

        <case pos:start="39:9" pos:end="39:31">case <expr pos:start="39:14" pos:end="39:30"><name pos:start="39:14" pos:end="39:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="41:13" pos:end="41:45"><expr pos:start="41:13" pos:end="41:44"><name pos:start="41:13" pos:end="41:21"><name pos:start="41:13" pos:end="41:14">sd</name><operator pos:start="41:15" pos:end="41:16">-&gt;</operator><name pos:start="41:17" pos:end="41:21">state</name></name> <operator pos:start="41:23" pos:end="41:23">=</operator> <name pos:start="41:25" pos:end="41:44">sd_sendingdata_state</name></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><name pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:14">sd</name><operator pos:start="43:15" pos:end="43:16">-&gt;</operator><name pos:start="43:17" pos:end="43:26">data_start</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:32"><expr pos:start="45:13" pos:end="45:31"><name pos:start="45:13" pos:end="45:27"><name pos:start="45:13" pos:end="45:14">sd</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:27">data_offset</name></name> <operator pos:start="45:29" pos:end="45:29">=</operator> <literal type="number" pos:start="45:31" pos:end="45:31">0</literal></expr>;</expr_stmt>

            <return pos:start="47:13" pos:end="47:25">return <expr pos:start="47:20" pos:end="47:24"><name pos:start="47:20" pos:end="47:24">sd_r1</name></expr>;</return>



        <default pos:start="51:9" pos:end="51:16">default:</default>

            <break pos:start="53:13" pos:end="53:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="57:9" pos:end="57:14">break;</break>



    <case pos:start="61:5" pos:end="61:12">case <expr pos:start="61:10" pos:end="61:11"><literal type="number" pos:start="61:10" pos:end="61:11">22</literal></expr>:</case>	<comment type="block" pos:start="61:17" pos:end="61:48">/* ACMD22: SEND_NUM_WR_BLOCKS */</comment>

        <switch pos:start="63:9" pos:end="85:9">switch <condition pos:start="63:16" pos:end="63:26">(<expr pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:25"><name pos:start="63:17" pos:end="63:18">sd</name><operator pos:start="63:19" pos:end="63:20">-&gt;</operator><name pos:start="63:21" pos:end="63:25">state</name></name></expr>)</condition> <block pos:start="63:28" pos:end="85:9">{<block_content pos:start="65:9" pos:end="83:18">

        <case pos:start="65:9" pos:end="65:31">case <expr pos:start="65:14" pos:end="65:30"><name pos:start="65:14" pos:end="65:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:53"><expr pos:start="67:13" pos:end="67:52"><operator pos:start="67:13" pos:end="67:13">*</operator><operator pos:start="67:14" pos:end="67:14">(</operator><name pos:start="67:15" pos:end="67:22">uint32_t</name> <operator pos:start="67:24" pos:end="67:24">*</operator><operator pos:start="67:25" pos:end="67:25">)</operator> <name pos:start="67:27" pos:end="67:34"><name pos:start="67:27" pos:end="67:28">sd</name><operator pos:start="67:29" pos:end="67:30">-&gt;</operator><name pos:start="67:31" pos:end="67:34">data</name></name> <operator pos:start="67:36" pos:end="67:36">=</operator> <name pos:start="67:38" pos:end="67:52"><name pos:start="67:38" pos:end="67:39">sd</name><operator pos:start="67:40" pos:end="67:41">-&gt;</operator><name pos:start="67:42" pos:end="67:52">blk_written</name></name></expr>;</expr_stmt>



            <expr_stmt pos:start="71:13" pos:end="71:45"><expr pos:start="71:13" pos:end="71:44"><name pos:start="71:13" pos:end="71:21"><name pos:start="71:13" pos:end="71:14">sd</name><operator pos:start="71:15" pos:end="71:16">-&gt;</operator><name pos:start="71:17" pos:end="71:21">state</name></name> <operator pos:start="71:23" pos:end="71:23">=</operator> <name pos:start="71:25" pos:end="71:44">sd_sendingdata_state</name></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:31"><expr pos:start="73:13" pos:end="73:30"><name pos:start="73:13" pos:end="73:26"><name pos:start="73:13" pos:end="73:14">sd</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:26">data_start</name></name> <operator pos:start="73:28" pos:end="73:28">=</operator> <literal type="number" pos:start="73:30" pos:end="73:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:14">sd</name><operator pos:start="75:15" pos:end="75:16">-&gt;</operator><name pos:start="75:17" pos:end="75:27">data_offset</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <literal type="number" pos:start="75:31" pos:end="75:31">0</literal></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:25">return <expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">sd_r1</name></expr>;</return>



        <default pos:start="81:9" pos:end="81:16">default:</default>

            <break pos:start="83:13" pos:end="83:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="87:9" pos:end="87:14">break;</break>



    <case pos:start="91:5" pos:end="91:12">case <expr pos:start="91:10" pos:end="91:11"><literal type="number" pos:start="91:10" pos:end="91:11">23</literal></expr>:</case>	<comment type="block" pos:start="91:17" pos:end="91:52">/* ACMD23: SET_WR_BLK_ERASE_COUNT */</comment>

        <switch pos:start="93:9" pos:end="105:9">switch <condition pos:start="93:16" pos:end="93:26">(<expr pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:25"><name pos:start="93:17" pos:end="93:18">sd</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:25">state</name></name></expr>)</condition> <block pos:start="93:28" pos:end="105:9">{<block_content pos:start="95:9" pos:end="103:18">

        <case pos:start="95:9" pos:end="95:31">case <expr pos:start="95:14" pos:end="95:30"><name pos:start="95:14" pos:end="95:30">sd_transfer_state</name></expr>:</case>

            <return pos:start="97:13" pos:end="97:25">return <expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">sd_r1</name></expr>;</return>



        <default pos:start="101:9" pos:end="101:16">default:</default>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="107:9" pos:end="107:14">break;</break>



    <case pos:start="111:5" pos:end="111:12">case <expr pos:start="111:10" pos:end="111:11"><literal type="number" pos:start="111:10" pos:end="111:11">41</literal></expr>:</case>	<comment type="block" pos:start="111:17" pos:end="111:44">/* ACMD41: SD_APP_OP_COND */</comment>

        <if_stmt pos:start="113:9" pos:end="121:9"><if pos:start="113:9" pos:end="121:9">if <condition pos:start="113:12" pos:end="113:20">(<expr pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:19"><name pos:start="113:13" pos:end="113:14">sd</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:19">spi</name></name></expr>)</condition> <block pos:start="113:22" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:25">

            <comment type="block" pos:start="115:13" pos:end="115:29">/* SEND_OP_CMD */</comment>

            <expr_stmt pos:start="117:13" pos:end="117:42"><expr pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:21"><name pos:start="117:13" pos:end="117:14">sd</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:21">state</name></name> <operator pos:start="117:23" pos:end="117:23">=</operator> <name pos:start="117:25" pos:end="117:41">sd_transfer_state</name></expr>;</expr_stmt>

            <return pos:start="119:13" pos:end="119:25">return <expr pos:start="119:20" pos:end="119:24"><name pos:start="119:20" pos:end="119:24">sd_r1</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <switch pos:start="123:9" pos:end="143:9">switch <condition pos:start="123:16" pos:end="123:26">(<expr pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:25"><name pos:start="123:17" pos:end="123:18">sd</name><operator pos:start="123:19" pos:end="123:20">-&gt;</operator><name pos:start="123:21" pos:end="123:25">state</name></name></expr>)</condition> <block pos:start="123:28" pos:end="143:9">{<block_content pos:start="125:9" pos:end="141:18">

        <case pos:start="125:9" pos:end="125:27">case <expr pos:start="125:14" pos:end="125:26"><name pos:start="125:14" pos:end="125:26">sd_idle_state</name></expr>:</case>

            <comment type="block" pos:start="127:13" pos:end="127:62">/* We accept any voltage.  10000 V is nothing.  */</comment>

            <if_stmt pos:start="129:13" pos:end="131:43"><if pos:start="129:13" pos:end="131:43">if <condition pos:start="129:16" pos:end="129:24">(<expr pos:start="129:17" pos:end="129:23"><name pos:start="129:17" pos:end="129:23"><name pos:start="129:17" pos:end="129:19">req</name><operator pos:start="129:20" pos:end="129:20">.</operator><name pos:start="129:21" pos:end="129:23">arg</name></name></expr>)</condition><block type="pseudo" pos:start="131:17" pos:end="131:43"><block_content pos:start="131:17" pos:end="131:43">

                <expr_stmt pos:start="131:17" pos:end="131:43"><expr pos:start="131:17" pos:end="131:42"><name pos:start="131:17" pos:end="131:25"><name pos:start="131:17" pos:end="131:18">sd</name><operator pos:start="131:19" pos:end="131:20">-&gt;</operator><name pos:start="131:21" pos:end="131:25">state</name></name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:42">sd_ready_state</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <return pos:start="135:13" pos:end="135:25">return <expr pos:start="135:20" pos:end="135:24"><name pos:start="135:20" pos:end="135:24">sd_r3</name></expr>;</return>



        <default pos:start="139:9" pos:end="139:16">default:</default>

            <break pos:start="141:13" pos:end="141:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="145:9" pos:end="145:14">break;</break>



    <case pos:start="149:5" pos:end="149:12">case <expr pos:start="149:10" pos:end="149:11"><literal type="number" pos:start="149:10" pos:end="149:11">42</literal></expr>:</case>	<comment type="block" pos:start="149:17" pos:end="149:49">/* ACMD42: SET_CLR_CARD_DETECT */</comment>

        <switch pos:start="151:9" pos:end="165:9">switch <condition pos:start="151:16" pos:end="151:26">(<expr pos:start="151:17" pos:end="151:25"><name pos:start="151:17" pos:end="151:25"><name pos:start="151:17" pos:end="151:18">sd</name><operator pos:start="151:19" pos:end="151:20">-&gt;</operator><name pos:start="151:21" pos:end="151:25">state</name></name></expr>)</condition> <block pos:start="151:28" pos:end="165:9">{<block_content pos:start="153:9" pos:end="163:18">

        <case pos:start="153:9" pos:end="153:31">case <expr pos:start="153:14" pos:end="153:30"><name pos:start="153:14" pos:end="153:30">sd_transfer_state</name></expr>:</case>

            <comment type="block" pos:start="155:13" pos:end="155:67">/* Bringing in the 50KOhm pull-up resistor... Done.  */</comment>

            <return pos:start="157:13" pos:end="157:25">return <expr pos:start="157:20" pos:end="157:24"><name pos:start="157:20" pos:end="157:24">sd_r1</name></expr>;</return>



        <default pos:start="161:9" pos:end="161:16">default:</default>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="167:9" pos:end="167:14">break;</break>



    <case pos:start="171:5" pos:end="171:12">case <expr pos:start="171:10" pos:end="171:11"><literal type="number" pos:start="171:10" pos:end="171:11">51</literal></expr>:</case>	<comment type="block" pos:start="171:17" pos:end="171:38">/* ACMD51: SEND_SCR */</comment>

        <switch pos:start="173:9" pos:end="191:9">switch <condition pos:start="173:16" pos:end="173:26">(<expr pos:start="173:17" pos:end="173:25"><name pos:start="173:17" pos:end="173:25"><name pos:start="173:17" pos:end="173:18">sd</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:25">state</name></name></expr>)</condition> <block pos:start="173:28" pos:end="191:9">{<block_content pos:start="175:9" pos:end="189:18">

        <case pos:start="175:9" pos:end="175:31">case <expr pos:start="175:14" pos:end="175:30"><name pos:start="175:14" pos:end="175:30">sd_transfer_state</name></expr>:</case>

            <expr_stmt pos:start="177:13" pos:end="177:45"><expr pos:start="177:13" pos:end="177:44"><name pos:start="177:13" pos:end="177:21"><name pos:start="177:13" pos:end="177:14">sd</name><operator pos:start="177:15" pos:end="177:16">-&gt;</operator><name pos:start="177:17" pos:end="177:21">state</name></name> <operator pos:start="177:23" pos:end="177:23">=</operator> <name pos:start="177:25" pos:end="177:44">sd_sendingdata_state</name></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:31"><expr pos:start="179:13" pos:end="179:30"><name pos:start="179:13" pos:end="179:26"><name pos:start="179:13" pos:end="179:14">sd</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:26">data_start</name></name> <operator pos:start="179:28" pos:end="179:28">=</operator> <literal type="number" pos:start="179:30" pos:end="179:30">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:32"><expr pos:start="181:13" pos:end="181:31"><name pos:start="181:13" pos:end="181:27"><name pos:start="181:13" pos:end="181:14">sd</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:27">data_offset</name></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <literal type="number" pos:start="181:31" pos:end="181:31">0</literal></expr>;</expr_stmt>

            <return pos:start="183:13" pos:end="183:25">return <expr pos:start="183:20" pos:end="183:24"><name pos:start="183:20" pos:end="183:24">sd_r1</name></expr>;</return>



        <default pos:start="187:9" pos:end="187:16">default:</default>

            <break pos:start="189:13" pos:end="189:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="193:9" pos:end="193:14">break;</break>



    <default pos:start="197:5" pos:end="197:12">default:</default>

        <comment type="block" pos:start="199:9" pos:end="199:46">/* Fall back to standard commands.  */</comment>

        <expr_stmt pos:start="201:9" pos:end="201:36"><expr pos:start="201:9" pos:end="201:35"><name pos:start="201:9" pos:end="201:23"><name pos:start="201:9" pos:end="201:10">sd</name><operator pos:start="201:11" pos:end="201:12">-&gt;</operator><name pos:start="201:13" pos:end="201:23">card_status</name></name> <operator pos:start="201:25" pos:end="201:26">&amp;=</operator> <operator pos:start="201:28" pos:end="201:28">~</operator><name pos:start="201:29" pos:end="201:35">APP_CMD</name></expr>;</expr_stmt>

        <return pos:start="203:9" pos:end="203:42">return <expr pos:start="203:16" pos:end="203:41"><call pos:start="203:16" pos:end="203:41"><name pos:start="203:16" pos:end="203:32">sd_normal_command</name><argument_list pos:start="203:33" pos:end="203:41">(<argument pos:start="203:34" pos:end="203:35"><expr pos:start="203:34" pos:end="203:35"><name pos:start="203:34" pos:end="203:35">sd</name></expr></argument>, <argument pos:start="203:38" pos:end="203:40"><expr pos:start="203:38" pos:end="203:40"><name pos:start="203:38" pos:end="203:40">req</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></switch>



    <expr_stmt pos:start="209:5" pos:end="209:62"><expr pos:start="209:5" pos:end="209:61"><call pos:start="209:5" pos:end="209:61"><name pos:start="209:5" pos:end="209:11">fprintf</name><argument_list pos:start="209:12" pos:end="209:61">(<argument pos:start="209:13" pos:end="209:18"><expr pos:start="209:13" pos:end="209:18"><name pos:start="209:13" pos:end="209:18">stderr</name></expr></argument>, <argument pos:start="209:21" pos:end="209:51"><expr pos:start="209:21" pos:end="209:51"><literal type="string" pos:start="209:21" pos:end="209:51">"SD: ACMD%i in a wrong state\n"</literal></expr></argument>, <argument pos:start="209:54" pos:end="209:60"><expr pos:start="209:54" pos:end="209:60"><name pos:start="209:54" pos:end="209:60"><name pos:start="209:54" pos:end="209:56">req</name><operator pos:start="209:57" pos:end="209:57">.</operator><name pos:start="209:58" pos:end="209:60">cmd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="211:5" pos:end="211:22">return <expr pos:start="211:12" pos:end="211:21"><name pos:start="211:12" pos:end="211:21">sd_illegal</name></expr>;</return>

</block_content>}</block></function>
</unit>
