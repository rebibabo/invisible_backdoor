<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19851.c" pos:tabs="8"><function pos:start="1:1" pos:end="101:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">decode_rle_bpp2</name><parameter_list pos:start="1:27" pos:end="1:82">(<parameter pos:start="1:28" pos:end="1:48"><decl pos:start="1:28" pos:end="1:48"><type pos:start="1:28" pos:end="1:48"><name pos:start="1:28" pos:end="1:41">AVCodecContext</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:48">avctx</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:60"><decl pos:start="1:51" pos:end="1:60"><type pos:start="1:51" pos:end="1:60"><name pos:start="1:51" pos:end="1:57">AVFrame</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">p</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:81"><decl pos:start="1:63" pos:end="1:81"><type pos:start="1:63" pos:end="1:81"><name pos:start="1:63" pos:end="1:76">GetByteContext</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:81">gbc</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="101:1">{<block_content pos:start="5:5" pos:end="99:13">

    <decl_stmt pos:start="5:5" pos:end="5:30"><decl pos:start="5:5" pos:end="5:29"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">offset</name> <init pos:start="5:16" pos:end="5:29">= <expr pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:22">avctx</name><operator pos:start="5:23" pos:end="5:24">-&gt;</operator><name pos:start="5:25" pos:end="5:29">width</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:20">outdata</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:24">p</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:30">data</name><index pos:start="7:31" pos:end="7:33">[<expr pos:start="7:32" pos:end="7:32"><literal type="number" pos:start="7:32" pos:end="7:32">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>, <decl pos:start="9:12" pos:end="9:12"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:12">j</name></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="97:5">for <control pos:start="13:9" pos:end="13:39">(<init pos:start="13:10" pos:end="13:15"><expr pos:start="13:10" pos:end="13:14"><name pos:start="13:10" pos:end="13:10">i</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <literal type="number" pos:start="13:14" pos:end="13:14">0</literal></expr>;</init> <condition pos:start="13:17" pos:end="13:34"><expr pos:start="13:17" pos:end="13:33"><name pos:start="13:17" pos:end="13:17">i</name> <operator pos:start="13:19" pos:end="13:19">&lt;</operator> <name pos:start="13:21" pos:end="13:33"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:33">height</name></name></expr>;</condition> <incr pos:start="13:36" pos:end="13:38"><expr pos:start="13:36" pos:end="13:38"><name pos:start="13:36" pos:end="13:36">i</name><operator pos:start="13:37" pos:end="13:38">++</operator></expr></incr>)</control> <block pos:start="13:41" pos:end="97:5">{<block_content pos:start="15:9" pos:end="95:34">

        <decl_stmt pos:start="15:9" pos:end="15:34"><decl pos:start="15:9" pos:end="15:16"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:16">size</name></decl>, <decl pos:start="15:19" pos:end="15:22"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:19" pos:end="15:22">left</name></decl>, <decl pos:start="15:25" pos:end="15:28"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:25" pos:end="15:28">code</name></decl>, <decl pos:start="15:31" pos:end="15:33"><type ref="prev" pos:start="15:9" pos:end="15:11"/><name pos:start="15:31" pos:end="15:33">pix</name></decl>;</decl_stmt>

        <decl_stmt pos:start="17:9" pos:end="17:31"><decl pos:start="17:9" pos:end="17:30"><type pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:15">uint8_t</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">out</name> <init pos:start="17:22" pos:end="17:30">= <expr pos:start="17:24" pos:end="17:30"><name pos:start="17:24" pos:end="17:30">outdata</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="19:9" pos:end="19:20"><decl pos:start="19:9" pos:end="19:19"><type pos:start="19:9" pos:end="19:11"><name pos:start="19:9" pos:end="19:11">int</name></type> <name pos:start="19:13" pos:end="19:15">pos</name> <init pos:start="19:17" pos:end="19:19">= <expr pos:start="19:19" pos:end="19:19"><literal type="number" pos:start="19:19" pos:end="19:19">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="23:9" pos:end="23:33">/* size of packed line */</comment>

        <expr_stmt pos:start="25:9" pos:end="25:48"><expr pos:start="25:9" pos:end="25:47"><name pos:start="25:9" pos:end="25:12">size</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <name pos:start="25:16" pos:end="25:19">left</name> <operator pos:start="25:21" pos:end="25:21">=</operator> <call pos:start="25:23" pos:end="25:47"><name pos:start="25:23" pos:end="25:42">bytestream2_get_be16</name><argument_list pos:start="25:43" pos:end="25:47">(<argument pos:start="25:44" pos:end="25:46"><expr pos:start="25:44" pos:end="25:46"><name pos:start="25:44" pos:end="25:46">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="27:9" pos:end="29:39"><if pos:start="27:9" pos:end="29:39">if <condition pos:start="27:12" pos:end="27:51">(<expr pos:start="27:13" pos:end="27:50"><call pos:start="27:13" pos:end="27:43"><name pos:start="27:13" pos:end="27:38">bytestream2_get_bytes_left</name><argument_list pos:start="27:39" pos:end="27:43">(<argument pos:start="27:40" pos:end="27:42"><expr pos:start="27:40" pos:end="27:42"><name pos:start="27:40" pos:end="27:42">gbc</name></expr></argument>)</argument_list></call> <operator pos:start="27:45" pos:end="27:45">&lt;</operator> <name pos:start="27:47" pos:end="27:50">size</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:39"><block_content pos:start="29:13" pos:end="29:39">

            <return pos:start="29:13" pos:end="29:39">return <expr pos:start="29:20" pos:end="29:38"><name pos:start="29:20" pos:end="29:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="33:9" pos:end="33:25">/* decode line */</comment>

        <while pos:start="35:9" pos:end="93:9">while <condition pos:start="35:15" pos:end="35:24">(<expr pos:start="35:16" pos:end="35:23"><name pos:start="35:16" pos:end="35:19">left</name> <operator pos:start="35:21" pos:end="35:21">&gt;</operator> <literal type="number" pos:start="35:23" pos:end="35:23">0</literal></expr>)</condition> <block pos:start="35:26" pos:end="93:9">{<block_content pos:start="37:13" pos:end="91:13">

            <expr_stmt pos:start="37:13" pos:end="37:45"><expr pos:start="37:13" pos:end="37:44"><name pos:start="37:13" pos:end="37:16">code</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:44"><name pos:start="37:20" pos:end="37:39">bytestream2_get_byte</name><argument_list pos:start="37:40" pos:end="37:44">(<argument pos:start="37:41" pos:end="37:43"><expr pos:start="37:41" pos:end="37:43"><name pos:start="37:41" pos:end="37:43">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="91:13"><if pos:start="39:13" pos:end="65:13">if <condition pos:start="39:16" pos:end="39:29">(<expr pos:start="39:17" pos:end="39:27"><name pos:start="39:17" pos:end="39:20">code</name> <operator pos:start="39:22" pos:end="39:22">&amp;</operator> <literal type="number" pos:start="39:24" pos:end="39:27">0x80</literal></expr> )</condition> <block pos:start="39:31" pos:end="65:13">{<block_content pos:start="41:17" pos:end="63:27"> <comment type="block" pos:start="39:33" pos:end="39:41">/* run */</comment>

                <expr_stmt pos:start="41:17" pos:end="41:48"><expr pos:start="41:17" pos:end="41:47"><name pos:start="41:17" pos:end="41:19">pix</name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:47"><name pos:start="41:23" pos:end="41:42">bytestream2_get_byte</name><argument_list pos:start="41:43" pos:end="41:47">(<argument pos:start="41:44" pos:end="41:46"><expr pos:start="41:44" pos:end="41:46"><name pos:start="41:44" pos:end="41:46">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="43:17" pos:end="61:17">for <control pos:start="43:21" pos:end="43:48">(<init pos:start="43:22" pos:end="43:27"><expr pos:start="43:22" pos:end="43:26"><name pos:start="43:22" pos:end="43:22">j</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">0</literal></expr>;</init> <condition pos:start="43:29" pos:end="43:43"><expr pos:start="43:29" pos:end="43:42"><name pos:start="43:29" pos:end="43:29">j</name> <operator pos:start="43:31" pos:end="43:31">&lt;</operator> <literal type="number" pos:start="43:33" pos:end="43:37">257</literal> <operator pos:start="43:37" pos:end="43:37">-</operator> <name pos:start="43:39" pos:end="43:42">code</name></expr>;</condition> <incr pos:start="43:45" pos:end="43:47"><expr pos:start="43:45" pos:end="43:47"><name pos:start="43:45" pos:end="43:45">j</name><operator pos:start="43:46" pos:end="43:47">++</operator></expr></incr>)</control> <block pos:start="43:50" pos:end="61:17">{<block_content pos:start="45:21" pos:end="59:50">

                    <if_stmt pos:start="45:21" pos:end="47:55"><if pos:start="45:21" pos:end="47:55">if <condition pos:start="45:24" pos:end="45:37">(<expr pos:start="45:25" pos:end="45:36"><name pos:start="45:25" pos:end="45:27">pos</name> <operator pos:start="45:29" pos:end="45:29">&lt;</operator> <name pos:start="45:31" pos:end="45:36">offset</name></expr>)</condition><block type="pseudo" pos:start="47:25" pos:end="47:55"><block_content pos:start="47:25" pos:end="47:55">

                        <expr_stmt pos:start="47:25" pos:end="47:55"><expr pos:start="47:25" pos:end="47:54"><name pos:start="47:25" pos:end="47:34"><name pos:start="47:25" pos:end="47:27">out</name><index pos:start="47:28" pos:end="47:34">[<expr pos:start="47:29" pos:end="47:33"><name pos:start="47:29" pos:end="47:31">pos</name><operator pos:start="47:32" pos:end="47:33">++</operator></expr>]</index></name> <operator pos:start="47:36" pos:end="47:36">=</operator> <operator pos:start="47:38" pos:end="47:38">(</operator><name pos:start="47:39" pos:end="47:41">pix</name> <operator pos:start="47:43" pos:end="47:43">&amp;</operator> <literal type="number" pos:start="47:45" pos:end="47:48">0xC0</literal><operator pos:start="47:49" pos:end="47:49">)</operator> <operator pos:start="47:51" pos:end="47:52">&gt;&gt;</operator> <literal type="number" pos:start="47:54" pos:end="47:54">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="49:21" pos:end="51:55"><if pos:start="49:21" pos:end="51:55">if <condition pos:start="49:24" pos:end="49:37">(<expr pos:start="49:25" pos:end="49:36"><name pos:start="49:25" pos:end="49:27">pos</name> <operator pos:start="49:29" pos:end="49:29">&lt;</operator> <name pos:start="49:31" pos:end="49:36">offset</name></expr>)</condition><block type="pseudo" pos:start="51:25" pos:end="51:55"><block_content pos:start="51:25" pos:end="51:55">

                        <expr_stmt pos:start="51:25" pos:end="51:55"><expr pos:start="51:25" pos:end="51:54"><name pos:start="51:25" pos:end="51:34"><name pos:start="51:25" pos:end="51:27">out</name><index pos:start="51:28" pos:end="51:34">[<expr pos:start="51:29" pos:end="51:33"><name pos:start="51:29" pos:end="51:31">pos</name><operator pos:start="51:32" pos:end="51:33">++</operator></expr>]</index></name> <operator pos:start="51:36" pos:end="51:36">=</operator> <operator pos:start="51:38" pos:end="51:38">(</operator><name pos:start="51:39" pos:end="51:41">pix</name> <operator pos:start="51:43" pos:end="51:43">&amp;</operator> <literal type="number" pos:start="51:45" pos:end="51:48">0x30</literal><operator pos:start="51:49" pos:end="51:49">)</operator> <operator pos:start="51:51" pos:end="51:52">&gt;&gt;</operator> <literal type="number" pos:start="51:54" pos:end="51:54">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="53:21" pos:end="55:55"><if pos:start="53:21" pos:end="55:55">if <condition pos:start="53:24" pos:end="53:37">(<expr pos:start="53:25" pos:end="53:36"><name pos:start="53:25" pos:end="53:27">pos</name> <operator pos:start="53:29" pos:end="53:29">&lt;</operator> <name pos:start="53:31" pos:end="53:36">offset</name></expr>)</condition><block type="pseudo" pos:start="55:25" pos:end="55:55"><block_content pos:start="55:25" pos:end="55:55">

                        <expr_stmt pos:start="55:25" pos:end="55:55"><expr pos:start="55:25" pos:end="55:54"><name pos:start="55:25" pos:end="55:34"><name pos:start="55:25" pos:end="55:27">out</name><index pos:start="55:28" pos:end="55:34">[<expr pos:start="55:29" pos:end="55:33"><name pos:start="55:29" pos:end="55:31">pos</name><operator pos:start="55:32" pos:end="55:33">++</operator></expr>]</index></name> <operator pos:start="55:36" pos:end="55:36">=</operator> <operator pos:start="55:38" pos:end="55:38">(</operator><name pos:start="55:39" pos:end="55:41">pix</name> <operator pos:start="55:43" pos:end="55:43">&amp;</operator> <literal type="number" pos:start="55:45" pos:end="55:48">0x0C</literal><operator pos:start="55:49" pos:end="55:49">)</operator> <operator pos:start="55:51" pos:end="55:52">&gt;&gt;</operator> <literal type="number" pos:start="55:54" pos:end="55:54">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="57:21" pos:end="59:50"><if pos:start="57:21" pos:end="59:50">if <condition pos:start="57:24" pos:end="57:37">(<expr pos:start="57:25" pos:end="57:36"><name pos:start="57:25" pos:end="57:27">pos</name> <operator pos:start="57:29" pos:end="57:29">&lt;</operator> <name pos:start="57:31" pos:end="57:36">offset</name></expr>)</condition><block type="pseudo" pos:start="59:25" pos:end="59:50"><block_content pos:start="59:25" pos:end="59:50">

                        <expr_stmt pos:start="59:25" pos:end="59:50"><expr pos:start="59:25" pos:end="59:49"><name pos:start="59:25" pos:end="59:34"><name pos:start="59:25" pos:end="59:27">out</name><index pos:start="59:28" pos:end="59:34">[<expr pos:start="59:29" pos:end="59:33"><name pos:start="59:29" pos:end="59:31">pos</name><operator pos:start="59:32" pos:end="59:33">++</operator></expr>]</index></name> <operator pos:start="59:36" pos:end="59:36">=</operator> <operator pos:start="59:38" pos:end="59:38">(</operator><name pos:start="59:39" pos:end="59:41">pix</name> <operator pos:start="59:43" pos:end="59:43">&amp;</operator> <literal type="number" pos:start="59:45" pos:end="59:48">0x03</literal><operator pos:start="59:49" pos:end="59:49">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="63:17" pos:end="63:27"><expr pos:start="63:17" pos:end="63:26"><name pos:start="63:17" pos:end="63:20">left</name>  <operator pos:start="63:23" pos:end="63:24">-=</operator> <literal type="number" pos:start="63:26" pos:end="63:26">2</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="65:15" pos:end="91:13">else <block pos:start="65:20" pos:end="91:13">{<block_content pos:start="67:17" pos:end="89:40"> <comment type="block" pos:start="65:22" pos:end="65:31">/* copy */</comment>

                <for pos:start="67:17" pos:end="87:17">for <control pos:start="67:21" pos:end="67:46">(<init pos:start="67:22" pos:end="67:27"><expr pos:start="67:22" pos:end="67:26"><name pos:start="67:22" pos:end="67:22">j</name> <operator pos:start="67:24" pos:end="67:24">=</operator> <literal type="number" pos:start="67:26" pos:end="67:26">0</literal></expr>;</init> <condition pos:start="67:29" pos:end="67:41"><expr pos:start="67:29" pos:end="67:40"><name pos:start="67:29" pos:end="67:29">j</name> <operator pos:start="67:31" pos:end="67:31">&lt;</operator> <name pos:start="67:33" pos:end="67:36">code</name> <operator pos:start="67:38" pos:end="67:38">+</operator> <literal type="number" pos:start="67:40" pos:end="67:40">1</literal></expr>;</condition> <incr pos:start="67:43" pos:end="67:45"><expr pos:start="67:43" pos:end="67:45"><name pos:start="67:43" pos:end="67:43">j</name><operator pos:start="67:44" pos:end="67:45">++</operator></expr></incr>)</control> <block pos:start="67:48" pos:end="87:17">{<block_content pos:start="69:21" pos:end="85:50">

                    <expr_stmt pos:start="69:21" pos:end="69:52"><expr pos:start="69:21" pos:end="69:51"><name pos:start="69:21" pos:end="69:23">pix</name> <operator pos:start="69:25" pos:end="69:25">=</operator> <call pos:start="69:27" pos:end="69:51"><name pos:start="69:27" pos:end="69:46">bytestream2_get_byte</name><argument_list pos:start="69:47" pos:end="69:51">(<argument pos:start="69:48" pos:end="69:50"><expr pos:start="69:48" pos:end="69:50"><name pos:start="69:48" pos:end="69:50">gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="71:21" pos:end="73:55"><if pos:start="71:21" pos:end="73:55">if <condition pos:start="71:24" pos:end="71:37">(<expr pos:start="71:25" pos:end="71:36"><name pos:start="71:25" pos:end="71:27">pos</name> <operator pos:start="71:29" pos:end="71:29">&lt;</operator> <name pos:start="71:31" pos:end="71:36">offset</name></expr>)</condition><block type="pseudo" pos:start="73:25" pos:end="73:55"><block_content pos:start="73:25" pos:end="73:55">

                        <expr_stmt pos:start="73:25" pos:end="73:55"><expr pos:start="73:25" pos:end="73:54"><name pos:start="73:25" pos:end="73:34"><name pos:start="73:25" pos:end="73:27">out</name><index pos:start="73:28" pos:end="73:34">[<expr pos:start="73:29" pos:end="73:33"><name pos:start="73:29" pos:end="73:31">pos</name><operator pos:start="73:32" pos:end="73:33">++</operator></expr>]</index></name> <operator pos:start="73:36" pos:end="73:36">=</operator> <operator pos:start="73:38" pos:end="73:38">(</operator><name pos:start="73:39" pos:end="73:41">pix</name> <operator pos:start="73:43" pos:end="73:43">&amp;</operator> <literal type="number" pos:start="73:45" pos:end="73:48">0xC0</literal><operator pos:start="73:49" pos:end="73:49">)</operator> <operator pos:start="73:51" pos:end="73:52">&gt;&gt;</operator> <literal type="number" pos:start="73:54" pos:end="73:54">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="75:21" pos:end="77:55"><if pos:start="75:21" pos:end="77:55">if <condition pos:start="75:24" pos:end="75:37">(<expr pos:start="75:25" pos:end="75:36"><name pos:start="75:25" pos:end="75:27">pos</name> <operator pos:start="75:29" pos:end="75:29">&lt;</operator> <name pos:start="75:31" pos:end="75:36">offset</name></expr>)</condition><block type="pseudo" pos:start="77:25" pos:end="77:55"><block_content pos:start="77:25" pos:end="77:55">

                        <expr_stmt pos:start="77:25" pos:end="77:55"><expr pos:start="77:25" pos:end="77:54"><name pos:start="77:25" pos:end="77:34"><name pos:start="77:25" pos:end="77:27">out</name><index pos:start="77:28" pos:end="77:34">[<expr pos:start="77:29" pos:end="77:33"><name pos:start="77:29" pos:end="77:31">pos</name><operator pos:start="77:32" pos:end="77:33">++</operator></expr>]</index></name> <operator pos:start="77:36" pos:end="77:36">=</operator> <operator pos:start="77:38" pos:end="77:38">(</operator><name pos:start="77:39" pos:end="77:41">pix</name> <operator pos:start="77:43" pos:end="77:43">&amp;</operator> <literal type="number" pos:start="77:45" pos:end="77:48">0x30</literal><operator pos:start="77:49" pos:end="77:49">)</operator> <operator pos:start="77:51" pos:end="77:52">&gt;&gt;</operator> <literal type="number" pos:start="77:54" pos:end="77:54">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="79:21" pos:end="81:55"><if pos:start="79:21" pos:end="81:55">if <condition pos:start="79:24" pos:end="79:37">(<expr pos:start="79:25" pos:end="79:36"><name pos:start="79:25" pos:end="79:27">pos</name> <operator pos:start="79:29" pos:end="79:29">&lt;</operator> <name pos:start="79:31" pos:end="79:36">offset</name></expr>)</condition><block type="pseudo" pos:start="81:25" pos:end="81:55"><block_content pos:start="81:25" pos:end="81:55">

                        <expr_stmt pos:start="81:25" pos:end="81:55"><expr pos:start="81:25" pos:end="81:54"><name pos:start="81:25" pos:end="81:34"><name pos:start="81:25" pos:end="81:27">out</name><index pos:start="81:28" pos:end="81:34">[<expr pos:start="81:29" pos:end="81:33"><name pos:start="81:29" pos:end="81:31">pos</name><operator pos:start="81:32" pos:end="81:33">++</operator></expr>]</index></name> <operator pos:start="81:36" pos:end="81:36">=</operator> <operator pos:start="81:38" pos:end="81:38">(</operator><name pos:start="81:39" pos:end="81:41">pix</name> <operator pos:start="81:43" pos:end="81:43">&amp;</operator> <literal type="number" pos:start="81:45" pos:end="81:48">0x0C</literal><operator pos:start="81:49" pos:end="81:49">)</operator> <operator pos:start="81:51" pos:end="81:52">&gt;&gt;</operator> <literal type="number" pos:start="81:54" pos:end="81:54">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="83:21" pos:end="85:50"><if pos:start="83:21" pos:end="85:50">if <condition pos:start="83:24" pos:end="83:37">(<expr pos:start="83:25" pos:end="83:36"><name pos:start="83:25" pos:end="83:27">pos</name> <operator pos:start="83:29" pos:end="83:29">&lt;</operator> <name pos:start="83:31" pos:end="83:36">offset</name></expr>)</condition><block type="pseudo" pos:start="85:25" pos:end="85:50"><block_content pos:start="85:25" pos:end="85:50">

                        <expr_stmt pos:start="85:25" pos:end="85:50"><expr pos:start="85:25" pos:end="85:49"><name pos:start="85:25" pos:end="85:34"><name pos:start="85:25" pos:end="85:27">out</name><index pos:start="85:28" pos:end="85:34">[<expr pos:start="85:29" pos:end="85:33"><name pos:start="85:29" pos:end="85:31">pos</name><operator pos:start="85:32" pos:end="85:33">++</operator></expr>]</index></name> <operator pos:start="85:36" pos:end="85:36">=</operator> <operator pos:start="85:38" pos:end="85:38">(</operator><name pos:start="85:39" pos:end="85:41">pix</name> <operator pos:start="85:43" pos:end="85:43">&amp;</operator> <literal type="number" pos:start="85:45" pos:end="85:48">0x03</literal><operator pos:start="85:49" pos:end="85:49">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="89:17" pos:end="89:40"><expr pos:start="89:17" pos:end="89:39"><name pos:start="89:17" pos:end="89:20">left</name>  <operator pos:start="89:23" pos:end="89:24">-=</operator> <literal type="number" pos:start="89:26" pos:end="89:28">1</literal> <operator pos:start="89:28" pos:end="89:28">+</operator> <operator pos:start="89:30" pos:end="89:30">(</operator><name pos:start="89:31" pos:end="89:34">code</name> <operator pos:start="89:36" pos:end="89:36">+</operator> <literal type="number" pos:start="89:38" pos:end="89:38">1</literal><operator pos:start="89:39" pos:end="89:39">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></while>

        <expr_stmt pos:start="95:9" pos:end="95:34"><expr pos:start="95:9" pos:end="95:33"><name pos:start="95:9" pos:end="95:15">outdata</name> <operator pos:start="95:17" pos:end="95:18">+=</operator> <name pos:start="95:20" pos:end="95:33"><name pos:start="95:20" pos:end="95:20">p</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:30">linesize</name><index pos:start="95:31" pos:end="95:33">[<expr pos:start="95:32" pos:end="95:32"><literal type="number" pos:start="95:32" pos:end="95:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
