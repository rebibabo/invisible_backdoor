<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23646.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">ram_save_complete</name><parameter_list pos:start="1:29" pos:end="1:55">(<parameter pos:start="1:30" pos:end="1:40"><decl pos:start="1:30" pos:end="1:40"><type pos:start="1:30" pos:end="1:40"><name pos:start="1:30" pos:end="1:37">QEMUFile</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:40">f</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:54"><decl pos:start="1:43" pos:end="1:54"><type pos:start="1:43" pos:end="1:54"><name pos:start="1:43" pos:end="1:46">void</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:54">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="59:1">{<block_content pos:start="5:5" pos:end="57:13">

    <expr_stmt pos:start="5:5" pos:end="5:20"><expr pos:start="5:5" pos:end="5:19"><call pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">rcu_read_lock</name><argument_list pos:start="5:18" pos:end="5:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:28"><expr pos:start="9:5" pos:end="9:27"><call pos:start="9:5" pos:end="9:27"><name pos:start="9:5" pos:end="9:25">migration_bitmap_sync</name><argument_list pos:start="9:26" pos:end="9:27">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:54"><expr pos:start="13:5" pos:end="13:53"><call pos:start="13:5" pos:end="13:53"><name pos:start="13:5" pos:end="13:30">ram_control_before_iterate</name><argument_list pos:start="13:31" pos:end="13:53">(<argument pos:start="13:32" pos:end="13:32"><expr pos:start="13:32" pos:end="13:32"><name pos:start="13:32" pos:end="13:32">f</name></expr></argument>, <argument pos:start="13:35" pos:end="13:52"><expr pos:start="13:35" pos:end="13:52"><name pos:start="13:35" pos:end="13:52">RAM_CONTROL_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:53">/* try transferring iterative blocks of memory */</comment>



    <comment type="block" pos:start="21:5" pos:end="21:64">/* flush all remaining blocks regardless of rate limiting */</comment>

    <while pos:start="23:5" pos:end="39:5">while <condition pos:start="23:11" pos:end="23:16">(<expr pos:start="23:12" pos:end="23:15"><name pos:start="23:12" pos:end="23:15">true</name></expr>)</condition> <block pos:start="23:18" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:9">

        <decl_stmt pos:start="25:9" pos:end="25:18"><decl pos:start="25:9" pos:end="25:17"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:17">pages</name></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:69"><expr pos:start="29:9" pos:end="29:68"><name pos:start="29:9" pos:end="29:13">pages</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <call pos:start="29:17" pos:end="29:68"><name pos:start="29:17" pos:end="29:39">ram_find_and_save_block</name><argument_list pos:start="29:40" pos:end="29:68">(<argument pos:start="29:41" pos:end="29:41"><expr pos:start="29:41" pos:end="29:41"><name pos:start="29:41" pos:end="29:41">f</name></expr></argument>, <argument pos:start="29:44" pos:end="29:47"><expr pos:start="29:44" pos:end="29:47"><name pos:start="29:44" pos:end="29:47">true</name></expr></argument>, <argument pos:start="29:50" pos:end="29:67"><expr pos:start="29:50" pos:end="29:67"><operator pos:start="29:50" pos:end="29:50">&amp;</operator><name pos:start="29:51" pos:end="29:67">bytes_transferred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="31:9" pos:end="31:36">/* no more blocks to sent */</comment>

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:23">(<expr pos:start="33:13" pos:end="33:22"><name pos:start="33:13" pos:end="33:17">pages</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>)</condition> <block pos:start="33:25" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><call pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:25">flush_compressed_data</name><argument_list pos:start="43:26" pos:end="43:28">(<argument pos:start="43:27" pos:end="43:27"><expr pos:start="43:27" pos:end="43:27"><name pos:start="43:27" pos:end="43:27">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:53"><expr pos:start="45:5" pos:end="45:52"><call pos:start="45:5" pos:end="45:52"><name pos:start="45:5" pos:end="45:29">ram_control_after_iterate</name><argument_list pos:start="45:30" pos:end="45:52">(<argument pos:start="45:31" pos:end="45:31"><expr pos:start="45:31" pos:end="45:31"><name pos:start="45:31" pos:end="45:31">f</name></expr></argument>, <argument pos:start="45:34" pos:end="45:51"><expr pos:start="45:34" pos:end="45:51"><name pos:start="45:34" pos:end="45:51">RAM_CONTROL_FINISH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:20"><expr pos:start="47:5" pos:end="47:19"><call pos:start="47:5" pos:end="47:19"><name pos:start="47:5" pos:end="47:17">migration_end</name><argument_list pos:start="47:18" pos:end="47:19">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:22"><expr pos:start="51:5" pos:end="51:21"><call pos:start="51:5" pos:end="51:21"><name pos:start="51:5" pos:end="51:19">rcu_read_unlock</name><argument_list pos:start="51:20" pos:end="51:21">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:40"><expr pos:start="53:5" pos:end="53:39"><call pos:start="53:5" pos:end="53:39"><name pos:start="53:5" pos:end="53:17">qemu_put_be64</name><argument_list pos:start="53:18" pos:end="53:39">(<argument pos:start="53:19" pos:end="53:19"><expr pos:start="53:19" pos:end="53:19"><name pos:start="53:19" pos:end="53:19">f</name></expr></argument>, <argument pos:start="53:22" pos:end="53:38"><expr pos:start="53:22" pos:end="53:38"><name pos:start="53:22" pos:end="53:38">RAM_SAVE_FLAG_EOS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="57:5" pos:end="57:13">return <expr pos:start="57:12" pos:end="57:12"><literal type="number" pos:start="57:12" pos:end="57:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
