<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9180.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">handle_dependencies</name><parameter_list pos:start="1:31" pos:end="3:24">(<parameter pos:start="1:32" pos:end="1:51"><decl pos:start="1:32" pos:end="1:51"><type pos:start="1:32" pos:end="1:51"><name pos:start="1:32" pos:end="1:47">BlockDriverState</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:51">bs</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:74"><decl pos:start="1:54" pos:end="1:74"><type pos:start="1:54" pos:end="1:74"><name pos:start="1:54" pos:end="1:61">uint64_t</name></type> <name pos:start="1:63" pos:end="1:74">guest_offset</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:23"><decl pos:start="3:5" pos:end="3:23"><type pos:start="3:5" pos:end="3:23"><name pos:start="3:5" pos:end="3:12">uint64_t</name> <modifier pos:start="3:14" pos:end="3:14">*</modifier></type><name pos:start="3:15" pos:end="3:23">cur_bytes</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:13">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">QCowL2Meta</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:25">old_alloc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:32"><decl pos:start="11:5" pos:end="11:31"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint64_t</name></type> <name pos:start="11:14" pos:end="11:18">bytes</name> <init pos:start="11:20" pos:end="11:31">= <expr pos:start="11:22" pos:end="11:31"><operator pos:start="11:22" pos:end="11:22">*</operator><name pos:start="11:23" pos:end="11:31">cur_bytes</name></expr></init></decl>;</decl_stmt>



    <macro pos:start="15:5" pos:end="15:64"><name pos:start="15:5" pos:end="15:17">QLIST_FOREACH</name><argument_list pos:start="15:18" pos:end="15:64">(<argument pos:start="15:19" pos:end="15:27">old_alloc</argument>, <argument pos:start="15:30" pos:end="15:47">&amp;s-&gt;cluster_allocs</argument>, <argument pos:start="15:50" pos:end="15:63">next_in_flight</argument>)</argument_list></macro> <block pos:start="15:66" pos:end="67:5">{<block_content pos:start="19:9" pos:end="65:9">



        <decl_stmt pos:start="19:9" pos:end="19:38"><decl pos:start="19:9" pos:end="19:37"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:22">start</name> <init pos:start="19:24" pos:end="19:37">= <expr pos:start="19:26" pos:end="19:37"><name pos:start="19:26" pos:end="19:37">guest_offset</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="21:9" pos:end="21:37"><decl pos:start="21:9" pos:end="21:36"><type pos:start="21:9" pos:end="21:16"><name pos:start="21:9" pos:end="21:16">uint64_t</name></type> <name pos:start="21:18" pos:end="21:20">end</name> <init pos:start="21:22" pos:end="21:36">= <expr pos:start="21:24" pos:end="21:36"><name pos:start="21:24" pos:end="21:28">start</name> <operator pos:start="21:30" pos:end="21:30">+</operator> <name pos:start="21:32" pos:end="21:36">bytes</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:57"><decl pos:start="23:9" pos:end="23:56"><type pos:start="23:9" pos:end="23:16"><name pos:start="23:9" pos:end="23:16">uint64_t</name></type> <name pos:start="23:18" pos:end="23:26">old_start</name> <init pos:start="23:28" pos:end="23:56">= <expr pos:start="23:30" pos:end="23:56"><call pos:start="23:30" pos:end="23:56"><name pos:start="23:30" pos:end="23:45">l2meta_cow_start</name><argument_list pos:start="23:46" pos:end="23:56">(<argument pos:start="23:47" pos:end="23:55"><expr pos:start="23:47" pos:end="23:55"><name pos:start="23:47" pos:end="23:55">old_alloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:53"><decl pos:start="25:9" pos:end="25:52"><type pos:start="25:9" pos:end="25:16"><name pos:start="25:9" pos:end="25:16">uint64_t</name></type> <name pos:start="25:18" pos:end="25:24">old_end</name> <init pos:start="25:26" pos:end="25:52">= <expr pos:start="25:28" pos:end="25:52"><call pos:start="25:28" pos:end="25:52"><name pos:start="25:28" pos:end="25:41">l2meta_cow_end</name><argument_list pos:start="25:42" pos:end="25:52">(<argument pos:start="25:43" pos:end="25:51"><expr pos:start="25:43" pos:end="25:51"><name pos:start="25:43" pos:end="25:51">old_alloc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="29:9" pos:end="65:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:49">(<expr pos:start="29:13" pos:end="29:48"><name pos:start="29:13" pos:end="29:15">end</name> <operator pos:start="29:17" pos:end="29:18">&lt;=</operator> <name pos:start="29:20" pos:end="29:28">old_start</name> <operator pos:start="29:30" pos:end="29:31">||</operator> <name pos:start="29:33" pos:end="29:37">start</name> <operator pos:start="29:39" pos:end="29:40">&gt;=</operator> <name pos:start="29:42" pos:end="29:48">old_end</name></expr>)</condition> <block pos:start="29:51" pos:end="33:9">{<block_content>

            <comment type="block" pos:start="31:13" pos:end="31:33">/* No intersection */</comment>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="65:9">else <block pos:start="33:16" pos:end="65:9">{<block_content pos:start="35:13" pos:end="63:13">

            <if_stmt pos:start="35:13" pos:end="45:13"><if pos:start="35:13" pos:end="41:13">if <condition pos:start="35:16" pos:end="35:34">(<expr pos:start="35:17" pos:end="35:33"><name pos:start="35:17" pos:end="35:21">start</name> <operator pos:start="35:23" pos:end="35:23">&lt;</operator> <name pos:start="35:25" pos:end="35:33">old_start</name></expr>)</condition> <block pos:start="35:36" pos:end="41:13">{<block_content pos:start="39:17" pos:end="39:42">

                <comment type="block" pos:start="37:17" pos:end="37:63">/* Stop at the start of a running allocation */</comment>

                <expr_stmt pos:start="39:17" pos:end="39:42"><expr pos:start="39:17" pos:end="39:41"><name pos:start="39:17" pos:end="39:21">bytes</name> <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:33">old_start</name> <operator pos:start="39:35" pos:end="39:35">-</operator> <name pos:start="39:37" pos:end="39:41">start</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="41:15" pos:end="45:13">else <block pos:start="41:20" pos:end="45:13">{<block_content pos:start="43:17" pos:end="43:26">

                <expr_stmt pos:start="43:17" pos:end="43:26"><expr pos:start="43:17" pos:end="43:25"><name pos:start="43:17" pos:end="43:21">bytes</name> <operator pos:start="43:23" pos:end="43:23">=</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="49:13" pos:end="63:13"><if pos:start="49:13" pos:end="63:13">if <condition pos:start="49:16" pos:end="49:27">(<expr pos:start="49:17" pos:end="49:26"><name pos:start="49:17" pos:end="49:21">bytes</name> <operator pos:start="49:23" pos:end="49:24">==</operator> <literal type="number" pos:start="49:26" pos:end="49:26">0</literal></expr>)</condition> <block pos:start="49:29" pos:end="63:13">{<block_content pos:start="55:17" pos:end="61:31">

                <comment type="block" pos:start="51:17" pos:end="53:67">/* Wait for the dependency to complete. We need to recheck

                 * the free/allocated clusters when we continue. */</comment>

                <expr_stmt pos:start="55:17" pos:end="55:47"><expr pos:start="55:17" pos:end="55:46"><call pos:start="55:17" pos:end="55:46"><name pos:start="55:17" pos:end="55:36">qemu_co_mutex_unlock</name><argument_list pos:start="55:37" pos:end="55:46">(<argument pos:start="55:38" pos:end="55:45"><expr pos:start="55:38" pos:end="55:45"><operator pos:start="55:38" pos:end="55:38">&amp;</operator><name pos:start="55:39" pos:end="55:45"><name pos:start="55:39" pos:end="55:39">s</name><operator pos:start="55:40" pos:end="55:41">-&gt;</operator><name pos:start="55:42" pos:end="55:45">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:67"><expr pos:start="57:17" pos:end="57:66"><call pos:start="57:17" pos:end="57:66"><name pos:start="57:17" pos:end="57:34">qemu_co_queue_wait</name><argument_list pos:start="57:35" pos:end="57:66">(<argument pos:start="57:36" pos:end="57:65"><expr pos:start="57:36" pos:end="57:65"><operator pos:start="57:36" pos:end="57:36">&amp;</operator><name pos:start="57:37" pos:end="57:65"><name pos:start="57:37" pos:end="57:45">old_alloc</name><operator pos:start="57:46" pos:end="57:47">-&gt;</operator><name pos:start="57:48" pos:end="57:65">dependent_requests</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:45"><expr pos:start="59:17" pos:end="59:44"><call pos:start="59:17" pos:end="59:44"><name pos:start="59:17" pos:end="59:34">qemu_co_mutex_lock</name><argument_list pos:start="59:35" pos:end="59:44">(<argument pos:start="59:36" pos:end="59:43"><expr pos:start="59:36" pos:end="59:43"><operator pos:start="59:36" pos:end="59:36">&amp;</operator><name pos:start="59:37" pos:end="59:43"><name pos:start="59:37" pos:end="59:37">s</name><operator pos:start="59:38" pos:end="59:39">-&gt;</operator><name pos:start="59:40" pos:end="59:43">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="61:17" pos:end="61:31">return <expr pos:start="61:24" pos:end="61:30"><operator pos:start="61:24" pos:end="61:24">-</operator><name pos:start="61:25" pos:end="61:30">EAGAIN</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="71:5" pos:end="73:63">/* Make sure that existing clusters and new allocations are only used up to

     * the next dependency if we shortened the request above */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:23"><expr pos:start="75:5" pos:end="75:22"><operator pos:start="75:5" pos:end="75:5">*</operator><name pos:start="75:6" pos:end="75:14">cur_bytes</name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:22">bytes</name></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
