<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1259.c" pos:tabs="8"><function pos:start="1:1" pos:end="261:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:7">av_cold</name> <name pos:start="1:9" pos:end="1:11">int</name></type> <name pos:start="1:13" pos:end="1:24">ff_alsa_open</name><parameter_list pos:start="1:25" pos:end="5:62">(<parameter pos:start="1:26" pos:end="1:45"><decl pos:start="1:26" pos:end="1:45"><type pos:start="1:26" pos:end="1:45"><name pos:start="1:26" pos:end="1:40">AVFormatContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">ctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:63">snd_pcm_stream_t</name></type> <name pos:start="1:65" pos:end="1:68">mode</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:50"><decl pos:start="3:26" pos:end="3:50"><type pos:start="3:26" pos:end="3:50"><name pos:start="3:26" pos:end="3:33">unsigned</name> <name pos:start="3:35" pos:end="3:37">int</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">sample_rate</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:37"><decl pos:start="5:26" pos:end="5:37"><type pos:start="5:26" pos:end="5:37"><name pos:start="5:26" pos:end="5:28">int</name></type> <name pos:start="5:30" pos:end="5:37">channels</name></decl></parameter>, <parameter pos:start="5:40" pos:end="5:61"><decl pos:start="5:40" pos:end="5:61"><type pos:start="5:40" pos:end="5:61"><name pos:start="5:40" pos:end="5:51"><name pos:start="5:40" pos:end="5:43">enum</name> <name pos:start="5:45" pos:end="5:51">CodecID</name></name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:61">codec_id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="261:1">{<block_content pos:start="9:5" pos:end="259:24">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:32"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">AlsaData</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:32">= <expr pos:start="9:19" pos:end="9:32"><name pos:start="9:19" pos:end="9:32"><name pos:start="9:19" pos:end="9:21">ctx</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:28">audio_device</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">res</name></decl>, <decl pos:start="13:14" pos:end="13:22"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:18">flags</name> <init pos:start="13:20" pos:end="13:22">= <expr pos:start="13:22" pos:end="13:22"><literal type="number" pos:start="13:22" pos:end="13:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:20">snd_pcm_format_t</name></type> <name pos:start="15:22" pos:end="15:27">format</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:13">snd_pcm_t</name> <modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:16">h</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:34"><type pos:start="19:5" pos:end="19:25"><name pos:start="19:5" pos:end="19:23">snd_pcm_hw_params_t</name> <modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:34">hw_params</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:21">snd_pcm_uframes_t</name></type> <name pos:start="21:23" pos:end="21:33">buffer_size</name></decl>, <decl pos:start="21:36" pos:end="21:46"><type ref="prev" pos:start="21:5" pos:end="21:21"/><name pos:start="21:36" pos:end="21:46">period_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:60"><decl pos:start="23:5" pos:end="23:59"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:18">layout</name> <init pos:start="23:20" pos:end="23:59">= <expr pos:start="23:22" pos:end="23:59"><name pos:start="23:22" pos:end="23:36"><name pos:start="23:22" pos:end="23:24">ctx</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:33">streams</name><index pos:start="23:34" pos:end="23:36">[<expr pos:start="23:35" pos:end="23:35"><literal type="number" pos:start="23:35" pos:end="23:35">0</literal></expr>]</index></name><operator pos:start="23:37" pos:end="23:38">-&gt;</operator><name pos:start="23:39" pos:end="23:59"><name pos:start="23:39" pos:end="23:43">codec</name><operator pos:start="23:44" pos:end="23:45">-&gt;</operator><name pos:start="23:46" pos:end="23:59">channel_layout</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:60"><if pos:start="27:5" pos:end="27:56">if <condition pos:start="27:8" pos:end="27:30">(<expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:24"><name pos:start="27:9" pos:end="27:11">ctx</name><operator pos:start="27:12" pos:end="27:13">-&gt;</operator><name pos:start="27:14" pos:end="27:21">filename</name><index pos:start="27:22" pos:end="27:24">[<expr pos:start="27:23" pos:end="27:23"><literal type="number" pos:start="27:23" pos:end="27:23">0</literal></expr>]</index></name> <operator pos:start="27:26" pos:end="27:27">==</operator> <literal type="number" pos:start="27:29" pos:end="27:29">0</literal></expr>)</condition><block type="pseudo" pos:start="27:32" pos:end="27:56"><block_content pos:start="27:32" pos:end="27:56"> <expr_stmt pos:start="27:32" pos:end="27:56"><expr pos:start="27:32" pos:end="27:55"><name pos:start="27:32" pos:end="27:43">audio_device</name> <operator pos:start="27:45" pos:end="27:45">=</operator> <literal type="string" pos:start="27:47" pos:end="27:55">"default"</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="29:60">else<block type="pseudo" pos:start="29:32" pos:end="29:60"><block_content pos:start="29:32" pos:end="29:60">                       <expr_stmt pos:start="29:32" pos:end="29:60"><expr pos:start="29:32" pos:end="29:59"><name pos:start="29:32" pos:end="29:43">audio_device</name> <operator pos:start="29:45" pos:end="29:45">=</operator> <name pos:start="29:47" pos:end="29:59"><name pos:start="29:47" pos:end="29:49">ctx</name><operator pos:start="29:50" pos:end="29:51">-&gt;</operator><name pos:start="29:52" pos:end="29:59">filename</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="33:5" pos:end="35:37"><if pos:start="33:5" pos:end="35:37">if <condition pos:start="33:8" pos:end="33:35">(<expr pos:start="33:9" pos:end="33:34"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:17">codec_id</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:34">CODEC_ID_NONE</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:37"><block_content pos:start="35:9" pos:end="35:37">

        <expr_stmt pos:start="35:9" pos:end="35:37"><expr pos:start="35:9" pos:end="35:36"><operator pos:start="35:9" pos:end="35:9">*</operator><name pos:start="35:10" pos:end="35:17">codec_id</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <name pos:start="35:21" pos:end="35:36">DEFAULT_CODEC_ID</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:47"><expr pos:start="37:5" pos:end="37:46"><name pos:start="37:5" pos:end="37:10">format</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <call pos:start="37:14" pos:end="37:46"><name pos:start="37:14" pos:end="37:35">codec_id_to_pcm_format</name><argument_list pos:start="37:36" pos:end="37:46">(<argument pos:start="37:37" pos:end="37:45"><expr pos:start="37:37" pos:end="37:45"><operator pos:start="37:37" pos:end="37:37">*</operator><name pos:start="37:38" pos:end="37:45">codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="45:5"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:41">(<expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:14">format</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <name pos:start="39:19" pos:end="39:40">SND_PCM_FORMAT_UNKNOWN</name></expr>)</condition> <block pos:start="39:43" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:31">

        <expr_stmt pos:start="41:9" pos:end="41:88"><expr pos:start="41:9" pos:end="41:87"><call pos:start="41:9" pos:end="41:87"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:87">(<argument pos:start="41:16" pos:end="41:18"><expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ctx</name></expr></argument>, <argument pos:start="41:21" pos:end="41:32"><expr pos:start="41:21" pos:end="41:32"><name pos:start="41:21" pos:end="41:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:35" pos:end="41:75"><expr pos:start="41:35" pos:end="41:75"><literal type="string" pos:start="41:35" pos:end="41:75">"sample format 0x%04x is not supported\n"</literal></expr></argument>, <argument pos:start="41:78" pos:end="41:86"><expr pos:start="41:78" pos:end="41:86"><operator pos:start="41:78" pos:end="41:78">*</operator><name pos:start="41:79" pos:end="41:86">codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:31">return <expr pos:start="43:16" pos:end="43:30"><call pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:22">AVERROR</name><argument_list pos:start="43:23" pos:end="43:30">(<argument pos:start="43:24" pos:end="43:29"><expr pos:start="43:24" pos:end="43:29"><name pos:start="43:24" pos:end="43:29">ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:69"><expr pos:start="47:5" pos:end="47:68"><name pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:17">frame_size</name></name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:53"><name pos:start="47:21" pos:end="47:42">av_get_bits_per_sample</name><argument_list pos:start="47:43" pos:end="47:53">(<argument pos:start="47:44" pos:end="47:52"><expr pos:start="47:44" pos:end="47:52"><operator pos:start="47:44" pos:end="47:44">*</operator><name pos:start="47:45" pos:end="47:52">codec_id</name></expr></argument>)</argument_list></call> <operator pos:start="47:55" pos:end="47:55">/</operator> <literal type="number" pos:start="47:57" pos:end="47:57">8</literal> <operator pos:start="47:59" pos:end="47:59">*</operator> <name pos:start="47:61" pos:end="47:68">channels</name></expr>;</expr_stmt>



    <if_stmt pos:start="51:5" pos:end="55:5"><if pos:start="51:5" pos:end="55:5">if <condition pos:start="51:8" pos:end="51:41">(<expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">ctx</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:18">flags</name></name> <operator pos:start="51:20" pos:end="51:20">&amp;</operator> <name pos:start="51:22" pos:end="51:40">AVFMT_FLAG_NONBLOCK</name></expr>)</condition> <block pos:start="51:43" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:33">

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:13">flags</name> <operator pos:start="53:15" pos:end="53:15">=</operator> <name pos:start="53:17" pos:end="53:32">SND_PCM_NONBLOCK</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:54"><expr pos:start="57:5" pos:end="57:53"><name pos:start="57:5" pos:end="57:7">res</name> <operator pos:start="57:9" pos:end="57:9">=</operator> <call pos:start="57:11" pos:end="57:53"><name pos:start="57:11" pos:end="57:22">snd_pcm_open</name><argument_list pos:start="57:23" pos:end="57:53">(<argument pos:start="57:24" pos:end="57:25"><expr pos:start="57:24" pos:end="57:25"><operator pos:start="57:24" pos:end="57:24">&amp;</operator><name pos:start="57:25" pos:end="57:25">h</name></expr></argument>, <argument pos:start="57:28" pos:end="57:39"><expr pos:start="57:28" pos:end="57:39"><name pos:start="57:28" pos:end="57:39">audio_device</name></expr></argument>, <argument pos:start="57:42" pos:end="57:45"><expr pos:start="57:42" pos:end="57:45"><name pos:start="57:42" pos:end="57:45">mode</name></expr></argument>, <argument pos:start="57:48" pos:end="57:52"><expr pos:start="57:48" pos:end="57:52"><name pos:start="57:48" pos:end="57:52">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:16">(<expr pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:11">res</name> <operator pos:start="59:13" pos:end="59:13">&lt;</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>)</condition> <block pos:start="59:18" pos:end="67:5">{<block_content pos:start="61:9" pos:end="65:28">

        <expr_stmt pos:start="61:9" pos:end="63:48"><expr pos:start="61:9" pos:end="63:47"><call pos:start="61:9" pos:end="63:47"><name pos:start="61:9" pos:end="61:14">av_log</name><argument_list pos:start="61:15" pos:end="63:47">(<argument pos:start="61:16" pos:end="61:18"><expr pos:start="61:16" pos:end="61:18"><name pos:start="61:16" pos:end="61:18">ctx</name></expr></argument>, <argument pos:start="61:21" pos:end="61:32"><expr pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="61:35" pos:end="61:70"><expr pos:start="61:35" pos:end="61:70"><literal type="string" pos:start="61:35" pos:end="61:70">"cannot open audio device %s (%s)\n"</literal></expr></argument>,

               <argument pos:start="63:16" pos:end="63:27"><expr pos:start="63:16" pos:end="63:27"><name pos:start="63:16" pos:end="63:27">audio_device</name></expr></argument>, <argument pos:start="63:30" pos:end="63:46"><expr pos:start="63:30" pos:end="63:46"><call pos:start="63:30" pos:end="63:46"><name pos:start="63:30" pos:end="63:41">snd_strerror</name><argument_list pos:start="63:42" pos:end="63:46">(<argument pos:start="63:43" pos:end="63:45"><expr pos:start="63:43" pos:end="63:45"><name pos:start="63:43" pos:end="63:45">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:28">return <expr pos:start="65:16" pos:end="65:27"><call pos:start="65:16" pos:end="65:27"><name pos:start="65:16" pos:end="65:22">AVERROR</name><argument_list pos:start="65:23" pos:end="65:27">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:47"><expr pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:7">res</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <call pos:start="71:11" pos:end="71:46"><name pos:start="71:11" pos:end="71:34">snd_pcm_hw_params_malloc</name><argument_list pos:start="71:35" pos:end="71:46">(<argument pos:start="71:36" pos:end="71:45"><expr pos:start="71:36" pos:end="71:45"><operator pos:start="71:36" pos:end="71:36">&amp;</operator><name pos:start="71:37" pos:end="71:45">hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="81:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:16">(<expr pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:11">res</name> <operator pos:start="73:13" pos:end="73:13">&lt;</operator> <literal type="number" pos:start="73:15" pos:end="73:15">0</literal></expr>)</condition> <block pos:start="73:18" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:19">

        <expr_stmt pos:start="75:9" pos:end="77:34"><expr pos:start="75:9" pos:end="77:33"><call pos:start="75:9" pos:end="77:33"><name pos:start="75:9" pos:end="75:14">av_log</name><argument_list pos:start="75:15" pos:end="77:33">(<argument pos:start="75:16" pos:end="75:18"><expr pos:start="75:16" pos:end="75:18"><name pos:start="75:16" pos:end="75:18">ctx</name></expr></argument>, <argument pos:start="75:21" pos:end="75:32"><expr pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:35" pos:end="75:87"><expr pos:start="75:35" pos:end="75:87"><literal type="string" pos:start="75:35" pos:end="75:87">"cannot allocate hardware parameter structure (%s)\n"</literal></expr></argument>,

               <argument pos:start="77:16" pos:end="77:32"><expr pos:start="77:16" pos:end="77:32"><call pos:start="77:16" pos:end="77:32"><name pos:start="77:16" pos:end="77:27">snd_strerror</name><argument_list pos:start="77:28" pos:end="77:32">(<argument pos:start="77:29" pos:end="77:31"><expr pos:start="77:29" pos:end="77:31"><name pos:start="77:29" pos:end="77:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="79:9" pos:end="79:19">goto <name pos:start="79:14" pos:end="79:18">fail1</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:46"><expr pos:start="85:5" pos:end="85:45"><name pos:start="85:5" pos:end="85:7">res</name> <operator pos:start="85:9" pos:end="85:9">=</operator> <call pos:start="85:11" pos:end="85:45"><name pos:start="85:11" pos:end="85:31">snd_pcm_hw_params_any</name><argument_list pos:start="85:32" pos:end="85:45">(<argument pos:start="85:33" pos:end="85:33"><expr pos:start="85:33" pos:end="85:33"><name pos:start="85:33" pos:end="85:33">h</name></expr></argument>, <argument pos:start="85:36" pos:end="85:44"><expr pos:start="85:36" pos:end="85:44"><name pos:start="85:36" pos:end="85:44">hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="87:5" pos:end="95:5"><if pos:start="87:5" pos:end="95:5">if <condition pos:start="87:8" pos:end="87:16">(<expr pos:start="87:9" pos:end="87:15"><name pos:start="87:9" pos:end="87:11">res</name> <operator pos:start="87:13" pos:end="87:13">&lt;</operator> <literal type="number" pos:start="87:15" pos:end="87:15">0</literal></expr>)</condition> <block pos:start="87:18" pos:end="95:5">{<block_content pos:start="89:9" pos:end="93:18">

        <expr_stmt pos:start="89:9" pos:end="91:34"><expr pos:start="89:9" pos:end="91:33"><call pos:start="89:9" pos:end="91:33"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="91:33">(<argument pos:start="89:16" pos:end="89:18"><expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ctx</name></expr></argument>, <argument pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="89:35" pos:end="89:89"><expr pos:start="89:35" pos:end="89:89"><literal type="string" pos:start="89:35" pos:end="89:89">"cannot initialize hardware parameter structure (%s)\n"</literal></expr></argument>,

               <argument pos:start="91:16" pos:end="91:32"><expr pos:start="91:16" pos:end="91:32"><call pos:start="91:16" pos:end="91:32"><name pos:start="91:16" pos:end="91:27">snd_strerror</name><argument_list pos:start="91:28" pos:end="91:32">(<argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:18">goto <name pos:start="93:14" pos:end="93:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:84"><expr pos:start="99:5" pos:end="99:83"><name pos:start="99:5" pos:end="99:7">res</name> <operator pos:start="99:9" pos:end="99:9">=</operator> <call pos:start="99:11" pos:end="99:83"><name pos:start="99:11" pos:end="99:38">snd_pcm_hw_params_set_access</name><argument_list pos:start="99:39" pos:end="99:83">(<argument pos:start="99:40" pos:end="99:40"><expr pos:start="99:40" pos:end="99:40"><name pos:start="99:40" pos:end="99:40">h</name></expr></argument>, <argument pos:start="99:43" pos:end="99:51"><expr pos:start="99:43" pos:end="99:51"><name pos:start="99:43" pos:end="99:51">hw_params</name></expr></argument>, <argument pos:start="99:54" pos:end="99:82"><expr pos:start="99:54" pos:end="99:82"><name pos:start="99:54" pos:end="99:82">SND_PCM_ACCESS_RW_INTERLEAVED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:16">(<expr pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:11">res</name> <operator pos:start="101:13" pos:end="101:13">&lt;</operator> <literal type="number" pos:start="101:15" pos:end="101:15">0</literal></expr>)</condition> <block pos:start="101:18" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:18">

        <expr_stmt pos:start="103:9" pos:end="105:34"><expr pos:start="103:9" pos:end="105:33"><call pos:start="103:9" pos:end="105:33"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="105:33">(<argument pos:start="103:16" pos:end="103:18"><expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ctx</name></expr></argument>, <argument pos:start="103:21" pos:end="103:32"><expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="103:35" pos:end="103:65"><expr pos:start="103:35" pos:end="103:65"><literal type="string" pos:start="103:35" pos:end="103:65">"cannot set access type (%s)\n"</literal></expr></argument>,

               <argument pos:start="105:16" pos:end="105:32"><expr pos:start="105:16" pos:end="105:32"><call pos:start="105:16" pos:end="105:32"><name pos:start="105:16" pos:end="105:27">snd_strerror</name><argument_list pos:start="105:28" pos:end="105:32">(<argument pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="107:9" pos:end="107:18">goto <name pos:start="107:14" pos:end="107:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:61"><expr pos:start="113:5" pos:end="113:60"><name pos:start="113:5" pos:end="113:7">res</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <call pos:start="113:11" pos:end="113:60"><name pos:start="113:11" pos:end="113:38">snd_pcm_hw_params_set_format</name><argument_list pos:start="113:39" pos:end="113:60">(<argument pos:start="113:40" pos:end="113:40"><expr pos:start="113:40" pos:end="113:40"><name pos:start="113:40" pos:end="113:40">h</name></expr></argument>, <argument pos:start="113:43" pos:end="113:51"><expr pos:start="113:43" pos:end="113:51"><name pos:start="113:43" pos:end="113:51">hw_params</name></expr></argument>, <argument pos:start="113:54" pos:end="113:59"><expr pos:start="113:54" pos:end="113:59"><name pos:start="113:54" pos:end="113:59">format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="123:5"><if pos:start="115:5" pos:end="123:5">if <condition pos:start="115:8" pos:end="115:16">(<expr pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:11">res</name> <operator pos:start="115:13" pos:end="115:13">&lt;</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>)</condition> <block pos:start="115:18" pos:end="123:5">{<block_content pos:start="117:9" pos:end="121:18">

        <expr_stmt pos:start="117:9" pos:end="119:53"><expr pos:start="117:9" pos:end="119:52"><call pos:start="117:9" pos:end="119:52"><name pos:start="117:9" pos:end="117:14">av_log</name><argument_list pos:start="117:15" pos:end="119:52">(<argument pos:start="117:16" pos:end="117:18"><expr pos:start="117:16" pos:end="117:18"><name pos:start="117:16" pos:end="117:18">ctx</name></expr></argument>, <argument pos:start="117:21" pos:end="117:32"><expr pos:start="117:21" pos:end="117:32"><name pos:start="117:21" pos:end="117:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="117:35" pos:end="117:77"><expr pos:start="117:35" pos:end="117:77"><literal type="string" pos:start="117:35" pos:end="117:77">"cannot set sample format 0x%04x %d (%s)\n"</literal></expr></argument>,

               <argument pos:start="119:16" pos:end="119:24"><expr pos:start="119:16" pos:end="119:24"><operator pos:start="119:16" pos:end="119:16">*</operator><name pos:start="119:17" pos:end="119:24">codec_id</name></expr></argument>, <argument pos:start="119:27" pos:end="119:32"><expr pos:start="119:27" pos:end="119:32"><name pos:start="119:27" pos:end="119:32">format</name></expr></argument>, <argument pos:start="119:35" pos:end="119:51"><expr pos:start="119:35" pos:end="119:51"><call pos:start="119:35" pos:end="119:51"><name pos:start="119:35" pos:end="119:46">snd_strerror</name><argument_list pos:start="119:47" pos:end="119:51">(<argument pos:start="119:48" pos:end="119:50"><expr pos:start="119:48" pos:end="119:50"><name pos:start="119:48" pos:end="119:50">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:18">goto <name pos:start="121:14" pos:end="121:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:72"><expr pos:start="127:5" pos:end="127:71"><name pos:start="127:5" pos:end="127:7">res</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="127:71"><name pos:start="127:11" pos:end="127:41">snd_pcm_hw_params_set_rate_near</name><argument_list pos:start="127:42" pos:end="127:71">(<argument pos:start="127:43" pos:end="127:43"><expr pos:start="127:43" pos:end="127:43"><name pos:start="127:43" pos:end="127:43">h</name></expr></argument>, <argument pos:start="127:46" pos:end="127:54"><expr pos:start="127:46" pos:end="127:54"><name pos:start="127:46" pos:end="127:54">hw_params</name></expr></argument>, <argument pos:start="127:57" pos:end="127:67"><expr pos:start="127:57" pos:end="127:67"><name pos:start="127:57" pos:end="127:67">sample_rate</name></expr></argument>, <argument pos:start="127:70" pos:end="127:70"><expr pos:start="127:70" pos:end="127:70"><literal type="number" pos:start="127:70" pos:end="127:70">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="129:5" pos:end="137:5"><if pos:start="129:5" pos:end="137:5">if <condition pos:start="129:8" pos:end="129:16">(<expr pos:start="129:9" pos:end="129:15"><name pos:start="129:9" pos:end="129:11">res</name> <operator pos:start="129:13" pos:end="129:13">&lt;</operator> <literal type="number" pos:start="129:15" pos:end="129:15">0</literal></expr>)</condition> <block pos:start="129:18" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:18">

        <expr_stmt pos:start="131:9" pos:end="133:34"><expr pos:start="131:9" pos:end="133:33"><call pos:start="131:9" pos:end="133:33"><name pos:start="131:9" pos:end="131:14">av_log</name><argument_list pos:start="131:15" pos:end="133:33">(<argument pos:start="131:16" pos:end="131:18"><expr pos:start="131:16" pos:end="131:18"><name pos:start="131:16" pos:end="131:18">ctx</name></expr></argument>, <argument pos:start="131:21" pos:end="131:32"><expr pos:start="131:21" pos:end="131:32"><name pos:start="131:21" pos:end="131:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:35" pos:end="131:65"><expr pos:start="131:35" pos:end="131:65"><literal type="string" pos:start="131:35" pos:end="131:65">"cannot set sample rate (%s)\n"</literal></expr></argument>,

               <argument pos:start="133:16" pos:end="133:32"><expr pos:start="133:16" pos:end="133:32"><call pos:start="133:16" pos:end="133:32"><name pos:start="133:16" pos:end="133:27">snd_strerror</name><argument_list pos:start="133:28" pos:end="133:32">(<argument pos:start="133:29" pos:end="133:31"><expr pos:start="133:29" pos:end="133:31"><name pos:start="133:29" pos:end="133:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:65"><expr pos:start="141:5" pos:end="141:64"><name pos:start="141:5" pos:end="141:7">res</name> <operator pos:start="141:9" pos:end="141:9">=</operator> <call pos:start="141:11" pos:end="141:64"><name pos:start="141:11" pos:end="141:40">snd_pcm_hw_params_set_channels</name><argument_list pos:start="141:41" pos:end="141:64">(<argument pos:start="141:42" pos:end="141:42"><expr pos:start="141:42" pos:end="141:42"><name pos:start="141:42" pos:end="141:42">h</name></expr></argument>, <argument pos:start="141:45" pos:end="141:53"><expr pos:start="141:45" pos:end="141:53"><name pos:start="141:45" pos:end="141:53">hw_params</name></expr></argument>, <argument pos:start="141:56" pos:end="141:63"><expr pos:start="141:56" pos:end="141:63"><name pos:start="141:56" pos:end="141:63">channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="143:5" pos:end="151:5"><if pos:start="143:5" pos:end="151:5">if <condition pos:start="143:8" pos:end="143:16">(<expr pos:start="143:9" pos:end="143:15"><name pos:start="143:9" pos:end="143:11">res</name> <operator pos:start="143:13" pos:end="143:13">&lt;</operator> <literal type="number" pos:start="143:15" pos:end="143:15">0</literal></expr>)</condition> <block pos:start="143:18" pos:end="151:5">{<block_content pos:start="145:9" pos:end="149:18">

        <expr_stmt pos:start="145:9" pos:end="147:44"><expr pos:start="145:9" pos:end="147:43"><call pos:start="145:9" pos:end="147:43"><name pos:start="145:9" pos:end="145:14">av_log</name><argument_list pos:start="145:15" pos:end="147:43">(<argument pos:start="145:16" pos:end="145:18"><expr pos:start="145:16" pos:end="145:18"><name pos:start="145:16" pos:end="145:18">ctx</name></expr></argument>, <argument pos:start="145:21" pos:end="145:32"><expr pos:start="145:21" pos:end="145:32"><name pos:start="145:21" pos:end="145:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="145:35" pos:end="145:73"><expr pos:start="145:35" pos:end="145:73"><literal type="string" pos:start="145:35" pos:end="145:73">"cannot set channel count to %d (%s)\n"</literal></expr></argument>,

               <argument pos:start="147:16" pos:end="147:23"><expr pos:start="147:16" pos:end="147:23"><name pos:start="147:16" pos:end="147:23">channels</name></expr></argument>, <argument pos:start="147:26" pos:end="147:42"><expr pos:start="147:26" pos:end="147:42"><call pos:start="147:26" pos:end="147:42"><name pos:start="147:26" pos:end="147:37">snd_strerror</name><argument_list pos:start="147:38" pos:end="147:42">(<argument pos:start="147:39" pos:end="147:41"><expr pos:start="147:39" pos:end="147:41"><name pos:start="147:39" pos:end="147:41">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="149:9" pos:end="149:18">goto <name pos:start="149:14" pos:end="149:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:67"><expr pos:start="155:5" pos:end="155:66"><call pos:start="155:5" pos:end="155:66"><name pos:start="155:5" pos:end="155:41">snd_pcm_hw_params_get_buffer_size_max</name><argument_list pos:start="155:42" pos:end="155:66">(<argument pos:start="155:43" pos:end="155:51"><expr pos:start="155:43" pos:end="155:51"><name pos:start="155:43" pos:end="155:51">hw_params</name></expr></argument>, <argument pos:start="155:54" pos:end="155:65"><expr pos:start="155:54" pos:end="155:65"><operator pos:start="155:54" pos:end="155:54">&amp;</operator><name pos:start="155:55" pos:end="155:65">buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:59"><expr pos:start="157:5" pos:end="157:58"><name pos:start="157:5" pos:end="157:15">buffer_size</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="157:58"><name pos:start="157:19" pos:end="157:23">FFMIN</name><argument_list pos:start="157:24" pos:end="157:58">(<argument pos:start="157:25" pos:end="157:35"><expr pos:start="157:25" pos:end="157:35"><name pos:start="157:25" pos:end="157:35">buffer_size</name></expr></argument>, <argument pos:start="157:38" pos:end="157:57"><expr pos:start="157:38" pos:end="157:57"><name pos:start="157:38" pos:end="157:57">ALSA_BUFFER_SIZE_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="159:5" pos:end="159:57">/* TODO: maybe use ctx-&gt;max_picture_buffer somehow */</comment>

    <expr_stmt pos:start="161:5" pos:end="161:77"><expr pos:start="161:5" pos:end="161:76"><name pos:start="161:5" pos:end="161:7">res</name> <operator pos:start="161:9" pos:end="161:9">=</operator> <call pos:start="161:11" pos:end="161:76"><name pos:start="161:11" pos:end="161:48">snd_pcm_hw_params_set_buffer_size_near</name><argument_list pos:start="161:49" pos:end="161:76">(<argument pos:start="161:50" pos:end="161:50"><expr pos:start="161:50" pos:end="161:50"><name pos:start="161:50" pos:end="161:50">h</name></expr></argument>, <argument pos:start="161:53" pos:end="161:61"><expr pos:start="161:53" pos:end="161:61"><name pos:start="161:53" pos:end="161:61">hw_params</name></expr></argument>, <argument pos:start="161:64" pos:end="161:75"><expr pos:start="161:64" pos:end="161:75"><operator pos:start="161:64" pos:end="161:64">&amp;</operator><name pos:start="161:65" pos:end="161:75">buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="163:5" pos:end="171:5"><if pos:start="163:5" pos:end="171:5">if <condition pos:start="163:8" pos:end="163:16">(<expr pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:11">res</name> <operator pos:start="163:13" pos:end="163:13">&lt;</operator> <literal type="number" pos:start="163:15" pos:end="163:15">0</literal></expr>)</condition> <block pos:start="163:18" pos:end="171:5">{<block_content pos:start="165:9" pos:end="169:18">

        <expr_stmt pos:start="165:9" pos:end="167:34"><expr pos:start="165:9" pos:end="167:33"><call pos:start="165:9" pos:end="167:33"><name pos:start="165:9" pos:end="165:14">av_log</name><argument_list pos:start="165:15" pos:end="167:33">(<argument pos:start="165:16" pos:end="165:18"><expr pos:start="165:16" pos:end="165:18"><name pos:start="165:16" pos:end="165:18">ctx</name></expr></argument>, <argument pos:start="165:21" pos:end="165:32"><expr pos:start="165:21" pos:end="165:32"><name pos:start="165:21" pos:end="165:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:35" pos:end="165:70"><expr pos:start="165:35" pos:end="165:70"><literal type="string" pos:start="165:35" pos:end="165:70">"cannot set ALSA buffer size (%s)\n"</literal></expr></argument>,

               <argument pos:start="167:16" pos:end="167:32"><expr pos:start="167:16" pos:end="167:32"><call pos:start="167:16" pos:end="167:32"><name pos:start="167:16" pos:end="167:27">snd_strerror</name><argument_list pos:start="167:28" pos:end="167:32">(<argument pos:start="167:29" pos:end="167:31"><expr pos:start="167:29" pos:end="167:31"><name pos:start="167:29" pos:end="167:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="169:9" pos:end="169:18">goto <name pos:start="169:14" pos:end="169:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="175:5" pos:end="175:73"><expr pos:start="175:5" pos:end="175:72"><call pos:start="175:5" pos:end="175:72"><name pos:start="175:5" pos:end="175:41">snd_pcm_hw_params_get_period_size_min</name><argument_list pos:start="175:42" pos:end="175:72">(<argument pos:start="175:43" pos:end="175:51"><expr pos:start="175:43" pos:end="175:51"><name pos:start="175:43" pos:end="175:51">hw_params</name></expr></argument>, <argument pos:start="175:54" pos:end="175:65"><expr pos:start="175:54" pos:end="175:65"><operator pos:start="175:54" pos:end="175:54">&amp;</operator><name pos:start="175:55" pos:end="175:65">period_size</name></expr></argument>, <argument pos:start="175:68" pos:end="175:71"><expr pos:start="175:68" pos:end="175:71"><name pos:start="175:68" pos:end="175:71">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="177:5" pos:end="179:38"><if pos:start="177:5" pos:end="179:38">if <condition pos:start="177:8" pos:end="177:21">(<expr pos:start="177:9" pos:end="177:20"><operator pos:start="177:9" pos:end="177:9">!</operator><name pos:start="177:10" pos:end="177:20">period_size</name></expr>)</condition><block type="pseudo" pos:start="179:9" pos:end="179:38"><block_content pos:start="179:9" pos:end="179:38">

        <expr_stmt pos:start="179:9" pos:end="179:38"><expr pos:start="179:9" pos:end="179:37"><name pos:start="179:9" pos:end="179:19">period_size</name> <operator pos:start="179:21" pos:end="179:21">=</operator> <name pos:start="179:23" pos:end="179:33">buffer_size</name> <operator pos:start="179:35" pos:end="179:35">/</operator> <literal type="number" pos:start="179:37" pos:end="179:37">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:83"><expr pos:start="181:5" pos:end="181:82"><name pos:start="181:5" pos:end="181:7">res</name> <operator pos:start="181:9" pos:end="181:9">=</operator> <call pos:start="181:11" pos:end="181:82"><name pos:start="181:11" pos:end="181:48">snd_pcm_hw_params_set_period_size_near</name><argument_list pos:start="181:49" pos:end="181:82">(<argument pos:start="181:50" pos:end="181:50"><expr pos:start="181:50" pos:end="181:50"><name pos:start="181:50" pos:end="181:50">h</name></expr></argument>, <argument pos:start="181:53" pos:end="181:61"><expr pos:start="181:53" pos:end="181:61"><name pos:start="181:53" pos:end="181:61">hw_params</name></expr></argument>, <argument pos:start="181:64" pos:end="181:75"><expr pos:start="181:64" pos:end="181:75"><operator pos:start="181:64" pos:end="181:64">&amp;</operator><name pos:start="181:65" pos:end="181:75">period_size</name></expr></argument>, <argument pos:start="181:78" pos:end="181:81"><expr pos:start="181:78" pos:end="181:81"><name pos:start="181:78" pos:end="181:81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="191:5"><if pos:start="183:5" pos:end="191:5">if <condition pos:start="183:8" pos:end="183:16">(<expr pos:start="183:9" pos:end="183:15"><name pos:start="183:9" pos:end="183:11">res</name> <operator pos:start="183:13" pos:end="183:13">&lt;</operator> <literal type="number" pos:start="183:15" pos:end="183:15">0</literal></expr>)</condition> <block pos:start="183:18" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:18">

        <expr_stmt pos:start="185:9" pos:end="187:34"><expr pos:start="185:9" pos:end="187:33"><call pos:start="185:9" pos:end="187:33"><name pos:start="185:9" pos:end="185:14">av_log</name><argument_list pos:start="185:15" pos:end="187:33">(<argument pos:start="185:16" pos:end="185:18"><expr pos:start="185:16" pos:end="185:18"><name pos:start="185:16" pos:end="185:18">ctx</name></expr></argument>, <argument pos:start="185:21" pos:end="185:32"><expr pos:start="185:21" pos:end="185:32"><name pos:start="185:21" pos:end="185:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="185:35" pos:end="185:70"><expr pos:start="185:35" pos:end="185:70"><literal type="string" pos:start="185:35" pos:end="185:70">"cannot set ALSA period size (%s)\n"</literal></expr></argument>,

               <argument pos:start="187:16" pos:end="187:32"><expr pos:start="187:16" pos:end="187:32"><call pos:start="187:16" pos:end="187:32"><name pos:start="187:16" pos:end="187:27">snd_strerror</name><argument_list pos:start="187:28" pos:end="187:32">(<argument pos:start="187:29" pos:end="187:31"><expr pos:start="187:29" pos:end="187:31"><name pos:start="187:29" pos:end="187:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="189:9" pos:end="189:18">goto <name pos:start="189:14" pos:end="189:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:33"><expr pos:start="193:5" pos:end="193:32"><name pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:5">s</name><operator pos:start="193:6" pos:end="193:7">-&gt;</operator><name pos:start="193:8" pos:end="193:18">period_size</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:32">period_size</name></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:42"><expr pos:start="197:5" pos:end="197:41"><name pos:start="197:5" pos:end="197:7">res</name> <operator pos:start="197:9" pos:end="197:9">=</operator> <call pos:start="197:11" pos:end="197:41"><name pos:start="197:11" pos:end="197:27">snd_pcm_hw_params</name><argument_list pos:start="197:28" pos:end="197:41">(<argument pos:start="197:29" pos:end="197:29"><expr pos:start="197:29" pos:end="197:29"><name pos:start="197:29" pos:end="197:29">h</name></expr></argument>, <argument pos:start="197:32" pos:end="197:40"><expr pos:start="197:32" pos:end="197:40"><name pos:start="197:32" pos:end="197:40">hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="199:5" pos:end="207:5"><if pos:start="199:5" pos:end="207:5">if <condition pos:start="199:8" pos:end="199:16">(<expr pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:11">res</name> <operator pos:start="199:13" pos:end="199:13">&lt;</operator> <literal type="number" pos:start="199:15" pos:end="199:15">0</literal></expr>)</condition> <block pos:start="199:18" pos:end="207:5">{<block_content pos:start="201:9" pos:end="205:18">

        <expr_stmt pos:start="201:9" pos:end="203:34"><expr pos:start="201:9" pos:end="203:33"><call pos:start="201:9" pos:end="203:33"><name pos:start="201:9" pos:end="201:14">av_log</name><argument_list pos:start="201:15" pos:end="203:33">(<argument pos:start="201:16" pos:end="201:18"><expr pos:start="201:16" pos:end="201:18"><name pos:start="201:16" pos:end="201:18">ctx</name></expr></argument>, <argument pos:start="201:21" pos:end="201:32"><expr pos:start="201:21" pos:end="201:32"><name pos:start="201:21" pos:end="201:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="201:35" pos:end="201:64"><expr pos:start="201:35" pos:end="201:64"><literal type="string" pos:start="201:35" pos:end="201:64">"cannot set parameters (%s)\n"</literal></expr></argument>,

               <argument pos:start="203:16" pos:end="203:32"><expr pos:start="203:16" pos:end="203:32"><call pos:start="203:16" pos:end="203:32"><name pos:start="203:16" pos:end="203:27">snd_strerror</name><argument_list pos:start="203:28" pos:end="203:32">(<argument pos:start="203:29" pos:end="203:31"><expr pos:start="203:29" pos:end="203:31"><name pos:start="203:29" pos:end="203:31">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="205:9" pos:end="205:18">goto <name pos:start="205:14" pos:end="205:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="211:5" pos:end="211:38"><expr pos:start="211:5" pos:end="211:37"><call pos:start="211:5" pos:end="211:37"><name pos:start="211:5" pos:end="211:26">snd_pcm_hw_params_free</name><argument_list pos:start="211:27" pos:end="211:37">(<argument pos:start="211:28" pos:end="211:36"><expr pos:start="211:28" pos:end="211:36"><name pos:start="211:28" pos:end="211:36">hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="215:5" pos:end="241:5"><if pos:start="215:5" pos:end="241:5">if <condition pos:start="215:8" pos:end="215:31">(<expr pos:start="215:9" pos:end="215:30"><name pos:start="215:9" pos:end="215:16">channels</name> <operator pos:start="215:18" pos:end="215:18">&gt;</operator> <literal type="number" pos:start="215:20" pos:end="215:20">2</literal> <operator pos:start="215:22" pos:end="215:23">&amp;&amp;</operator> <name pos:start="215:25" pos:end="215:30">layout</name></expr>)</condition> <block pos:start="215:33" pos:end="241:5">{<block_content pos:start="217:9" pos:end="239:9">

        <if_stmt pos:start="217:9" pos:end="227:9"><if pos:start="217:9" pos:end="227:9">if <condition pos:start="217:12" pos:end="217:89">(<expr pos:start="217:13" pos:end="217:88"><call pos:start="217:13" pos:end="217:84"><name pos:start="217:13" pos:end="217:29">find_reorder_func</name><argument_list pos:start="217:30" pos:end="217:84">(<argument pos:start="217:31" pos:end="217:31"><expr pos:start="217:31" pos:end="217:31"><name pos:start="217:31" pos:end="217:31">s</name></expr></argument>, <argument pos:start="217:34" pos:end="217:42"><expr pos:start="217:34" pos:end="217:42"><operator pos:start="217:34" pos:end="217:34">*</operator><name pos:start="217:35" pos:end="217:42">codec_id</name></expr></argument>, <argument pos:start="217:45" pos:end="217:50"><expr pos:start="217:45" pos:end="217:50"><name pos:start="217:45" pos:end="217:50">layout</name></expr></argument>, <argument pos:start="217:53" pos:end="217:83"><expr pos:start="217:53" pos:end="217:83"><name pos:start="217:53" pos:end="217:56">mode</name> <operator pos:start="217:58" pos:end="217:59">==</operator> <name pos:start="217:61" pos:end="217:83">SND_PCM_STREAM_PLAYBACK</name></expr></argument>)</argument_list></call> <operator pos:start="217:86" pos:end="217:86">&lt;</operator> <literal type="number" pos:start="217:88" pos:end="217:88">0</literal></expr>)</condition> <block pos:start="217:91" pos:end="227:9">{<block_content pos:start="219:13" pos:end="225:83">

            <decl_stmt pos:start="219:13" pos:end="219:27"><decl pos:start="219:13" pos:end="219:26"><type pos:start="219:13" pos:end="219:16"><name pos:start="219:13" pos:end="219:16">char</name></type> <name pos:start="219:18" pos:end="219:26"><name pos:start="219:18" pos:end="219:21">name</name><index pos:start="219:22" pos:end="219:26">[<expr pos:start="219:23" pos:end="219:25"><literal type="number" pos:start="219:23" pos:end="219:25">128</literal></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:79"><expr pos:start="221:13" pos:end="221:78"><call pos:start="221:13" pos:end="221:78"><name pos:start="221:13" pos:end="221:40">av_get_channel_layout_string</name><argument_list pos:start="221:41" pos:end="221:78">(<argument pos:start="221:42" pos:end="221:45"><expr pos:start="221:42" pos:end="221:45"><name pos:start="221:42" pos:end="221:45">name</name></expr></argument>, <argument pos:start="221:48" pos:end="221:59"><expr pos:start="221:48" pos:end="221:59"><sizeof pos:start="221:48" pos:end="221:59">sizeof<argument_list pos:start="221:54" pos:end="221:59">(<argument pos:start="221:55" pos:end="221:58"><expr pos:start="221:55" pos:end="221:58"><name pos:start="221:55" pos:end="221:58">name</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="221:62" pos:end="221:69"><expr pos:start="221:62" pos:end="221:69"><name pos:start="221:62" pos:end="221:69">channels</name></expr></argument>, <argument pos:start="221:72" pos:end="221:77"><expr pos:start="221:72" pos:end="221:77"><name pos:start="221:72" pos:end="221:77">layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="225:83"><expr pos:start="223:13" pos:end="225:82"><call pos:start="223:13" pos:end="225:82"><name pos:start="223:13" pos:end="223:18">av_log</name><argument_list pos:start="223:19" pos:end="225:82">(<argument pos:start="223:20" pos:end="223:22"><expr pos:start="223:20" pos:end="223:22"><name pos:start="223:20" pos:end="223:22">ctx</name></expr></argument>, <argument pos:start="223:25" pos:end="223:38"><expr pos:start="223:25" pos:end="223:38"><name pos:start="223:25" pos:end="223:38">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="223:41" pos:end="223:99"><expr pos:start="223:41" pos:end="223:99"><literal type="string" pos:start="223:41" pos:end="223:99">"ALSA channel layout unknown or unimplemented for %s %s.\n"</literal></expr></argument>,

                   <argument pos:start="225:20" pos:end="225:23"><expr pos:start="225:20" pos:end="225:23"><name pos:start="225:20" pos:end="225:23">name</name></expr></argument>, <argument pos:start="225:26" pos:end="225:81"><expr pos:start="225:26" pos:end="225:81"><ternary pos:start="225:26" pos:end="225:81"><condition pos:start="225:26" pos:end="225:58"><expr pos:start="225:26" pos:end="225:56"><name pos:start="225:26" pos:end="225:29">mode</name> <operator pos:start="225:31" pos:end="225:32">==</operator> <name pos:start="225:34" pos:end="225:56">SND_PCM_STREAM_PLAYBACK</name></expr> ?</condition><then pos:start="225:60" pos:end="225:69"> <expr pos:start="225:60" pos:end="225:69"><literal type="string" pos:start="225:60" pos:end="225:69">"playback"</literal></expr> </then><else pos:start="225:71" pos:end="225:81">: <expr pos:start="225:73" pos:end="225:81"><literal type="string" pos:start="225:73" pos:end="225:81">"capture"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="229:9" pos:end="239:9"><if pos:start="229:9" pos:end="239:9">if <condition pos:start="229:12" pos:end="229:28">(<expr pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:27"><name pos:start="229:13" pos:end="229:13">s</name><operator pos:start="229:14" pos:end="229:15">-&gt;</operator><name pos:start="229:16" pos:end="229:27">reorder_func</name></name></expr>)</condition> <block pos:start="229:30" pos:end="239:9">{<block_content pos:start="231:13" pos:end="237:27">

            <expr_stmt pos:start="231:13" pos:end="231:46"><expr pos:start="231:13" pos:end="231:45"><name pos:start="231:13" pos:end="231:31"><name pos:start="231:13" pos:end="231:13">s</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:31">reorder_buf_size</name></name> <operator pos:start="231:33" pos:end="231:33">=</operator> <name pos:start="231:35" pos:end="231:45">buffer_size</name></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:76"><expr pos:start="233:13" pos:end="233:75"><name pos:start="233:13" pos:end="233:26"><name pos:start="233:13" pos:end="233:13">s</name><operator pos:start="233:14" pos:end="233:15">-&gt;</operator><name pos:start="233:16" pos:end="233:26">reorder_buf</name></name> <operator pos:start="233:28" pos:end="233:28">=</operator> <call pos:start="233:30" pos:end="233:75"><name pos:start="233:30" pos:end="233:38">av_malloc</name><argument_list pos:start="233:39" pos:end="233:75">(<argument pos:start="233:40" pos:end="233:74"><expr pos:start="233:40" pos:end="233:74"><name pos:start="233:40" pos:end="233:58"><name pos:start="233:40" pos:end="233:40">s</name><operator pos:start="233:41" pos:end="233:42">-&gt;</operator><name pos:start="233:43" pos:end="233:58">reorder_buf_size</name></name> <operator pos:start="233:60" pos:end="233:60">*</operator> <name pos:start="233:62" pos:end="233:74"><name pos:start="233:62" pos:end="233:62">s</name><operator pos:start="233:63" pos:end="233:64">-&gt;</operator><name pos:start="233:65" pos:end="233:74">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="235:13" pos:end="237:27"><if pos:start="235:13" pos:end="237:27">if <condition pos:start="235:16" pos:end="235:32">(<expr pos:start="235:17" pos:end="235:31"><operator pos:start="235:17" pos:end="235:17">!</operator><name pos:start="235:18" pos:end="235:31"><name pos:start="235:18" pos:end="235:18">s</name><operator pos:start="235:19" pos:end="235:20">-&gt;</operator><name pos:start="235:21" pos:end="235:31">reorder_buf</name></name></expr>)</condition><block type="pseudo" pos:start="237:17" pos:end="237:27"><block_content pos:start="237:17" pos:end="237:27">

                <goto pos:start="237:17" pos:end="237:27">goto <name pos:start="237:22" pos:end="237:26">fail1</name>;</goto></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:13"><expr pos:start="245:5" pos:end="245:12"><name pos:start="245:5" pos:end="245:8"><name pos:start="245:5" pos:end="245:5">s</name><operator pos:start="245:6" pos:end="245:7">-&gt;</operator><name pos:start="245:8" pos:end="245:8">h</name></name> <operator pos:start="245:10" pos:end="245:10">=</operator> <name pos:start="245:12" pos:end="245:12">h</name></expr>;</expr_stmt>

    <return pos:start="247:5" pos:end="247:13">return <expr pos:start="247:12" pos:end="247:12"><literal type="number" pos:start="247:12" pos:end="247:12">0</literal></expr>;</return>



<label pos:start="251:1" pos:end="251:5"><name pos:start="251:1" pos:end="251:4">fail</name>:</label>

    <expr_stmt pos:start="253:5" pos:end="253:38"><expr pos:start="253:5" pos:end="253:37"><call pos:start="253:5" pos:end="253:37"><name pos:start="253:5" pos:end="253:26">snd_pcm_hw_params_free</name><argument_list pos:start="253:27" pos:end="253:37">(<argument pos:start="253:28" pos:end="253:36"><expr pos:start="253:28" pos:end="253:36"><name pos:start="253:28" pos:end="253:36">hw_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="255:1" pos:end="255:6"><name pos:start="255:1" pos:end="255:5">fail1</name>:</label>

    <expr_stmt pos:start="257:5" pos:end="257:21"><expr pos:start="257:5" pos:end="257:20"><call pos:start="257:5" pos:end="257:20"><name pos:start="257:5" pos:end="257:17">snd_pcm_close</name><argument_list pos:start="257:18" pos:end="257:20">(<argument pos:start="257:19" pos:end="257:19"><expr pos:start="257:19" pos:end="257:19"><name pos:start="257:19" pos:end="257:19">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="259:5" pos:end="259:24">return <expr pos:start="259:12" pos:end="259:23"><call pos:start="259:12" pos:end="259:23"><name pos:start="259:12" pos:end="259:18">AVERROR</name><argument_list pos:start="259:19" pos:end="259:23">(<argument pos:start="259:20" pos:end="259:22"><expr pos:start="259:20" pos:end="259:22"><name pos:start="259:20" pos:end="259:22">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
