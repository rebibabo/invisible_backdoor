<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/9328.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:22"><name pos:start="1:1" pos:end="1:10">NEON_TYPE4</name><argument_list pos:start="1:11" pos:end="1:22">(<argument pos:start="1:12" pos:end="1:13">s8</argument>, <argument pos:start="1:16" pos:end="1:21">int8_t</argument>)</argument_list></macro>
<macro pos:start="2:1" pos:end="2:23"><name pos:start="2:1" pos:end="2:10">NEON_TYPE4</name><argument_list pos:start="2:11" pos:end="2:23">(<argument pos:start="2:12" pos:end="2:13">u8</argument>, <argument pos:start="2:16" pos:end="2:22">uint8_t</argument>)</argument_list></macro>
<macro pos:start="3:1" pos:end="3:24"><name pos:start="3:1" pos:end="3:10">NEON_TYPE2</name><argument_list pos:start="3:11" pos:end="3:24">(<argument pos:start="3:12" pos:end="3:14">s16</argument>, <argument pos:start="3:17" pos:end="3:23">int16_t</argument>)</argument_list></macro>
<macro pos:start="4:1" pos:end="4:25"><name pos:start="4:1" pos:end="4:10">NEON_TYPE2</name><argument_list pos:start="4:11" pos:end="4:25">(<argument pos:start="4:12" pos:end="4:14">u16</argument>, <argument pos:start="4:17" pos:end="4:24">uint16_t</argument>)</argument_list></macro>
<macro pos:start="5:1" pos:end="5:24"><name pos:start="5:1" pos:end="5:10">NEON_TYPE1</name><argument_list pos:start="5:11" pos:end="5:24">(<argument pos:start="5:12" pos:end="5:14">s32</argument>, <argument pos:start="5:17" pos:end="5:23">int32_t</argument>)</argument_list></macro>
<macro pos:start="6:1" pos:end="97:0"><name pos:start="6:1" pos:end="6:10">NEON_TYPE1</name><argument_list pos:start="6:11" pos:end="97:0">(<argument pos:start="6:12" pos:end="6:14">u32</argument>, <argument pos:start="6:17" pos:end="6:24">uint32_t</argument>)</argument_list></macro>
<cpp:undef pos:start="7:1" pos:end="7:17">#<cpp:directive pos:start="7:2" pos:end="7:6">undef</cpp:directive> <name pos:start="7:8" pos:end="7:17">NEON_TYPE4</name></cpp:undef>
<cpp:undef pos:start="8:1" pos:end="8:17">#<cpp:directive pos:start="8:2" pos:end="8:6">undef</cpp:directive> <name pos:start="8:8" pos:end="8:17">NEON_TYPE2</name></cpp:undef>
<cpp:undef pos:start="9:1" pos:end="9:17">#<cpp:directive pos:start="9:2" pos:end="9:6">undef</cpp:directive> <name pos:start="9:8" pos:end="9:17">NEON_TYPE1</name></cpp:undef>
<comment type="block" pos:start="10:1" pos:end="10:55">/* Copy from a uint32_t to a vector structure type.  */</comment>
<cpp:define pos:start="11:1" pos:end="18:14">#<cpp:directive pos:start="11:2" pos:end="11:7">define</cpp:directive> <cpp:macro pos:start="11:9" pos:end="11:37"><name pos:start="11:9" pos:end="11:19">NEON_UNPACK</name><parameter_list pos:start="11:20" pos:end="11:37">(<parameter pos:start="11:21" pos:end="11:25"><type pos:start="11:21" pos:end="11:25"><name pos:start="11:21" pos:end="11:25">vtype</name></type></parameter>, <parameter pos:start="11:28" pos:end="11:31"><type pos:start="11:28" pos:end="11:31"><name pos:start="11:28" pos:end="11:31">dest</name></type></parameter>, <parameter pos:start="11:34" pos:end="11:36"><type pos:start="11:34" pos:end="11:36"><name pos:start="11:34" pos:end="11:36">val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="11:39" pos:end="18:14">do { \
    union { \
        vtype v; \
        uint32_t i; \
    } conv_u; \
    conv_u.i = (val); \
    dest = conv_u.v; \
    } while(0)</cpp:value></cpp:define>
<comment type="block" pos:start="19:1" pos:end="19:55">/* Copy from a vector structure type to a uint32_t.  */</comment>
<cpp:define pos:start="20:1" pos:end="27:14">#<cpp:directive pos:start="20:2" pos:end="20:7">define</cpp:directive> <cpp:macro pos:start="20:9" pos:end="20:35"><name pos:start="20:9" pos:end="20:17">NEON_PACK</name><parameter_list pos:start="20:18" pos:end="20:35">(<parameter pos:start="20:19" pos:end="20:23"><type pos:start="20:19" pos:end="20:23"><name pos:start="20:19" pos:end="20:23">vtype</name></type></parameter>, <parameter pos:start="20:26" pos:end="20:29"><type pos:start="20:26" pos:end="20:29"><name pos:start="20:26" pos:end="20:29">dest</name></type></parameter>, <parameter pos:start="20:32" pos:end="20:34"><type pos:start="20:32" pos:end="20:34"><name pos:start="20:32" pos:end="20:34">val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="20:37" pos:end="27:14">do { \
    union { \
        vtype v; \
        uint32_t i; \
    } conv_u; \
    conv_u.v = (val); \
    dest = conv_u.i; \
    } while(0)</cpp:value></cpp:define>
<cpp:define pos:start="28:1" pos:end="29:42">#<cpp:directive pos:start="28:2" pos:end="28:7">define</cpp:directive> <cpp:macro pos:start="28:9" pos:end="28:16"><name pos:start="28:9" pos:end="28:16">NEON_DO1</name></cpp:macro> \
    <cpp:value pos:start="29:5" pos:end="29:42">NEON_FN(vdest.v1, vsrc1.v1, vsrc2.v1);</cpp:value></cpp:define>
<cpp:define pos:start="30:1" pos:end="32:42">#<cpp:directive pos:start="30:2" pos:end="30:7">define</cpp:directive> <cpp:macro pos:start="30:9" pos:end="30:16"><name pos:start="30:9" pos:end="30:16">NEON_DO2</name></cpp:macro> \
    <cpp:value pos:start="31:5" pos:end="32:42">NEON_FN(vdest.v1, vsrc1.v1, vsrc2.v1); \
    NEON_FN(vdest.v2, vsrc1.v2, vsrc2.v2);</cpp:value></cpp:define>
<cpp:define pos:start="33:1" pos:end="37:42">#<cpp:directive pos:start="33:2" pos:end="33:7">define</cpp:directive> <cpp:macro pos:start="33:9" pos:end="33:16"><name pos:start="33:9" pos:end="33:16">NEON_DO4</name></cpp:macro> \
    <cpp:value pos:start="34:5" pos:end="37:42">NEON_FN(vdest.v1, vsrc1.v1, vsrc2.v1); \
    NEON_FN(vdest.v2, vsrc1.v2, vsrc2.v2); \
    NEON_FN(vdest.v3, vsrc1.v3, vsrc2.v3); \
    NEON_FN(vdest.v4, vsrc1.v4, vsrc2.v4);</cpp:value></cpp:define>
<cpp:define pos:start="38:1" pos:end="51:23">#<cpp:directive pos:start="38:2" pos:end="38:7">define</cpp:directive> <cpp:macro pos:start="38:9" pos:end="38:31"><name pos:start="38:9" pos:end="38:21">NEON_VOP_BODY</name><parameter_list pos:start="38:22" pos:end="38:31">(<parameter pos:start="38:23" pos:end="38:27"><type pos:start="38:23" pos:end="38:27"><name pos:start="38:23" pos:end="38:27">vtype</name></type></parameter>, <parameter pos:start="38:30" pos:end="38:30"><type pos:start="38:30" pos:end="38:30"><name pos:start="38:30" pos:end="38:30">n</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value pos:start="39:1" pos:end="51:23">{ \
    uint32_t res; \
    vtype vsrc1; \
    vtype vsrc2; \
    vtype vdest; \
    NEON_UNPACK(vtype, vsrc1, arg1); \
    NEON_UNPACK(vtype, vsrc2, arg2); \
    NEON_DO##n; \
    NEON_PACK(vtype, res, vdest); \
    return res; \
#define NEON_VOP(name, vtype, n) \
uint32_t HELPER(glue(neon_,name))(uint32_t arg1, uint32_t arg2) \
NEON_VOP_BODY(vtype, n)</cpp:value></cpp:define>
<cpp:define pos:start="52:1" pos:end="54:23">#<cpp:directive pos:start="52:2" pos:end="52:7">define</cpp:directive> <cpp:macro pos:start="52:9" pos:end="52:36"><name pos:start="52:9" pos:end="52:20">NEON_VOP_ENV</name><parameter_list pos:start="52:21" pos:end="52:36">(<parameter pos:start="52:22" pos:end="52:25"><type pos:start="52:22" pos:end="52:25"><name pos:start="52:22" pos:end="52:25">name</name></type></parameter>, <parameter pos:start="52:28" pos:end="52:32"><type pos:start="52:28" pos:end="52:32"><name pos:start="52:28" pos:end="52:32">vtype</name></type></parameter>, <parameter pos:start="52:35" pos:end="52:35"><type pos:start="52:35" pos:end="52:35"><name pos:start="52:35" pos:end="52:35">n</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value pos:start="53:1" pos:end="54:23">uint32_t HELPER(glue(neon_,name))(CPUState *env, uint32_t arg1, uint32_t arg2) \
NEON_VOP_BODY(vtype, n)</cpp:value></cpp:define>
<comment type="block" pos:start="55:1" pos:end="55:27">/* Pairwise operations.  */</comment>
<comment type="block" pos:start="56:1" pos:end="57:60">/* For 32-bit elements each segment only contains a single element, so
   the elementwise and pairwise operations are the same.  */</comment>
<cpp:define pos:start="58:1" pos:end="60:42">#<cpp:directive pos:start="58:2" pos:end="58:7">define</cpp:directive> <cpp:macro pos:start="58:9" pos:end="58:17"><name pos:start="58:9" pos:end="58:17">NEON_PDO2</name></cpp:macro> \
    <cpp:value pos:start="59:5" pos:end="60:42">NEON_FN(vdest.v1, vsrc1.v1, vsrc1.v2); \
    NEON_FN(vdest.v2, vsrc2.v1, vsrc2.v2);</cpp:value></cpp:define>
<cpp:define pos:start="61:1" pos:end="77:15">#<cpp:directive pos:start="61:2" pos:end="61:7">define</cpp:directive> <cpp:macro pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:17">NEON_PDO4</name></cpp:macro> \
    <cpp:value pos:start="62:5" pos:end="77:15">NEON_FN(vdest.v1, vsrc1.v1, vsrc1.v2); \
    NEON_FN(vdest.v2, vsrc1.v3, vsrc1.v4); \
    NEON_FN(vdest.v3, vsrc2.v1, vsrc2.v2); \
    NEON_FN(vdest.v4, vsrc2.v3, vsrc2.v4); \
#define NEON_POP(name, vtype, n) \
uint32_t HELPER(glue(neon_,name))(uint32_t arg1, uint32_t arg2) \
{ \
    uint32_t res; \
    vtype vsrc1; \
    vtype vsrc2; \
    vtype vdest; \
    NEON_UNPACK(vtype, vsrc1, arg1); \
    NEON_UNPACK(vtype, vsrc2, arg2); \
    NEON_PDO##n; \
    NEON_PACK(vtype, res, vdest); \
    return res;</cpp:value></cpp:define> \
<comment type="block" pos:start="78:1" pos:end="78:23">/* Unary operators.  */</comment>
<cpp:define pos:start="79:1" pos:end="95:15">#<cpp:directive pos:start="79:2" pos:end="79:7">define</cpp:directive> <cpp:macro pos:start="79:9" pos:end="79:33"><name pos:start="79:9" pos:end="79:17">NEON_VOP1</name><parameter_list pos:start="79:18" pos:end="79:33">(<parameter pos:start="79:19" pos:end="79:22"><type pos:start="79:19" pos:end="79:22"><name pos:start="79:19" pos:end="79:22">name</name></type></parameter>, <parameter pos:start="79:25" pos:end="79:29"><type pos:start="79:25" pos:end="79:29"><name pos:start="79:25" pos:end="79:29">vtype</name></type></parameter>, <parameter pos:start="79:32" pos:end="79:32"><type pos:start="79:32" pos:end="79:32"><name pos:start="79:32" pos:end="79:32">n</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value pos:start="80:1" pos:end="95:15">uint32_t HELPER(glue(neon_,name))(uint32_t arg) \
{ \
    vtype vsrc1; \
    vtype vdest; \
    NEON_UNPACK(vtype, vsrc1, arg); \
    NEON_DO##n; \
    NEON_PACK(vtype, arg, vdest); \
    return arg; \
#define NEON_USAT(dest, src1, src2, type) do { \
    uint32_t tmp = (uint32_t)src1 + (uint32_t)src2; \
    if (tmp != (type)tmp) { \
        SET_QC(); \
        dest = ~0; \
    } else { \
        dest = tmp; \
    }} while(0)</cpp:value></cpp:define>
<cpp:define pos:start="96:1" pos:end="96:70">#<cpp:directive pos:start="96:2" pos:end="96:7">define</cpp:directive> <cpp:macro pos:start="96:9" pos:end="96:33"><name pos:start="96:9" pos:end="96:15">NEON_FN</name><parameter_list pos:start="96:16" pos:end="96:33">(<parameter pos:start="96:17" pos:end="96:20"><type pos:start="96:17" pos:end="96:20"><name pos:start="96:17" pos:end="96:20">dest</name></type></parameter>, <parameter pos:start="96:23" pos:end="96:26"><type pos:start="96:23" pos:end="96:26"><name pos:start="96:23" pos:end="96:26">src1</name></type></parameter>, <parameter pos:start="96:29" pos:end="96:32"><type pos:start="96:29" pos:end="96:32"><name pos:start="96:29" pos:end="96:32">src2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="96:35" pos:end="96:70">NEON_USAT(dest, src1, src2, uint8_t)</cpp:value></cpp:define>
<macro pos:start="97:1" pos:end="100:0"><name pos:start="97:1" pos:end="97:12">NEON_VOP_ENV</name><argument_list pos:start="97:13" pos:end="100:0">(<argument pos:start="97:14" pos:end="97:20">qadd_u8</argument>, <argument pos:start="97:23" pos:end="97:29">neon_u8</argument>, <argument pos:start="97:32" pos:end="97:32"><literal type="number" pos:start="97:32" pos:end="97:32">4</literal></argument>)</argument_list></macro>
<cpp:undef pos:start="98:1" pos:end="98:14">#<cpp:directive pos:start="98:2" pos:end="98:6">undef</cpp:directive> <name pos:start="98:8" pos:end="98:14">NEON_FN</name></cpp:undef>
<cpp:define pos:start="99:1" pos:end="99:71">#<cpp:directive pos:start="99:2" pos:end="99:7">define</cpp:directive> <cpp:macro pos:start="99:9" pos:end="99:33"><name pos:start="99:9" pos:end="99:15">NEON_FN</name><parameter_list pos:start="99:16" pos:end="99:33">(<parameter pos:start="99:17" pos:end="99:20"><type pos:start="99:17" pos:end="99:20"><name pos:start="99:17" pos:end="99:20">dest</name></type></parameter>, <parameter pos:start="99:23" pos:end="99:26"><type pos:start="99:23" pos:end="99:26"><name pos:start="99:23" pos:end="99:26">src1</name></type></parameter>, <parameter pos:start="99:29" pos:end="99:32"><type pos:start="99:29" pos:end="99:32"><name pos:start="99:29" pos:end="99:32">src2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value pos:start="99:35" pos:end="99:71">NEON_USAT(dest, src1, src2, uint16_t)</cpp:value></cpp:define>
<macro pos:start="100:1" pos:end="102:16"><name pos:start="100:1" pos:end="100:12">NEON_VOP_ENV</name><argument_list pos:start="100:13" pos:end="102:16">(<argument pos:start="100:14" pos:end="100:21">qadd_u16</argument>, <argument pos:start="100:24" pos:end="100:31">neon_u16</argument>, <argument pos:start="100:34" pos:end="100:34"><literal type="number" pos:start="100:34" pos:end="100:34">2</literal></argument>)</argument_list></macro>
<cpp:undef pos:start="101:1" pos:end="101:14">#<cpp:directive pos:start="101:2" pos:end="101:6">undef</cpp:directive> <name pos:start="101:8" pos:end="101:14">NEON_FN</name></cpp:undef>
<cpp:undef pos:start="102:1" pos:end="102:16">#<cpp:directive pos:start="102:2" pos:end="102:6">undef</cpp:directive> <name pos:start="102:8" pos:end="102:16">NEON_USAT</name></cpp:undef></unit>
