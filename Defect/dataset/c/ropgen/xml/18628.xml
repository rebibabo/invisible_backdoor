<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18628.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_subframe_lpc</name><parameter_list pos:start="1:31" pos:end="1:75">(<parameter pos:start="1:32" pos:end="1:45"><decl pos:start="1:32" pos:end="1:45"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:42">FLACContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:58"><decl pos:start="1:48" pos:end="1:58"><type pos:start="1:48" pos:end="1:58"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:58">channel</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:74"><decl pos:start="1:61" pos:end="1:74"><type pos:start="1:61" pos:end="1:74"><name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:74">pred_order</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:13">

    <decl_stmt pos:start="5:5" pos:end="5:18"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">sum</name></decl>, <decl pos:start="5:14" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:14" pos:end="5:14">i</name></decl>, <decl pos:start="5:17" pos:end="5:17"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:17">j</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:27"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:18">coeff_prec</name></decl>, <decl pos:start="7:21" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:26">qlevel</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:26"><name pos:start="9:9" pos:end="9:14">coeffs</name><index pos:start="9:15" pos:end="9:26">[<expr pos:start="9:16" pos:end="9:25"><name pos:start="9:16" pos:end="9:25">pred_order</name></expr>]</index></name></decl>;</decl_stmt>

        

<comment type="line" pos:start="13:1" pos:end="13:57">//    av_log(s-&gt;avctx, AV_LOG_DEBUG, "  SUBFRAME LPC\n");</comment>

        

    <comment type="block" pos:start="17:5" pos:end="17:25">/* warm up samples */</comment>

<comment type="line" pos:start="19:1" pos:end="19:77">//    av_log(s-&gt;avctx, AV_LOG_DEBUG, "   warm up samples: %d\n", pred_order);</comment>

        

    <for pos:start="23:5" pos:end="31:5">for <control pos:start="23:9" pos:end="23:36">(<init pos:start="23:10" pos:end="23:15"><expr pos:start="23:10" pos:end="23:14"><name pos:start="23:10" pos:end="23:10">i</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal></expr>;</init> <condition pos:start="23:17" pos:end="23:31"><expr pos:start="23:17" pos:end="23:30"><name pos:start="23:17" pos:end="23:17">i</name> <operator pos:start="23:19" pos:end="23:19">&lt;</operator> <name pos:start="23:21" pos:end="23:30">pred_order</name></expr>;</condition> <incr pos:start="23:33" pos:end="23:35"><expr pos:start="23:33" pos:end="23:35"><name pos:start="23:33" pos:end="23:33">i</name><operator pos:start="23:34" pos:end="23:35">++</operator></expr></incr>)</control>

    <block pos:start="25:5" pos:end="31:5">{<block_content pos:start="27:9" pos:end="27:64">

        <expr_stmt pos:start="27:9" pos:end="27:64"><expr pos:start="27:9" pos:end="27:63"><name pos:start="27:9" pos:end="27:30"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:18">decoded</name><index pos:start="27:19" pos:end="27:27">[<expr pos:start="27:20" pos:end="27:26"><name pos:start="27:20" pos:end="27:26">channel</name></expr>]</index><index pos:start="27:28" pos:end="27:30">[<expr pos:start="27:29" pos:end="27:29"><name pos:start="27:29" pos:end="27:29">i</name></expr>]</index></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <call pos:start="27:34" pos:end="27:63"><name pos:start="27:34" pos:end="27:42">get_sbits</name><argument_list pos:start="27:43" pos:end="27:63">(<argument pos:start="27:44" pos:end="27:49"><expr pos:start="27:44" pos:end="27:49"><operator pos:start="27:44" pos:end="27:44">&amp;</operator><name pos:start="27:45" pos:end="27:49"><name pos:start="27:45" pos:end="27:45">s</name><operator pos:start="27:46" pos:end="27:47">-&gt;</operator><name pos:start="27:48" pos:end="27:49">gb</name></name></expr></argument>, <argument pos:start="27:52" pos:end="27:62"><expr pos:start="27:52" pos:end="27:62"><name pos:start="27:52" pos:end="27:62"><name pos:start="27:52" pos:end="27:52">s</name><operator pos:start="27:53" pos:end="27:54">-&gt;</operator><name pos:start="27:55" pos:end="27:62">curr_bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="29:1" pos:end="29:84">//        av_log(s-&gt;avctx, AV_LOG_DEBUG, "    %d: %d\n", i, s-&gt;decoded[channel][i]);</comment>

    </block_content>}</block></for>

    

    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:14">coeff_prec</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <call pos:start="35:18" pos:end="35:36"><name pos:start="35:18" pos:end="35:25">get_bits</name><argument_list pos:start="35:26" pos:end="35:36">(<argument pos:start="35:27" pos:end="35:32"><expr pos:start="35:27" pos:end="35:32"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:32"><name pos:start="35:28" pos:end="35:28">s</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:32">gb</name></name></expr></argument>, <argument pos:start="35:35" pos:end="35:35"><expr pos:start="35:35" pos:end="35:35"><literal type="number" pos:start="35:35" pos:end="35:35">4</literal></expr></argument>)</argument_list></call> <operator pos:start="35:38" pos:end="35:38">+</operator> <literal type="number" pos:start="35:40" pos:end="35:40">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="45:5"><if pos:start="37:5" pos:end="45:5">if <condition pos:start="37:8" pos:end="37:25">(<expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:18">coeff_prec</name> <operator pos:start="37:20" pos:end="37:21">==</operator> <literal type="number" pos:start="37:23" pos:end="37:24">16</literal></expr>)</condition>

    <block pos:start="39:5" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:68"><expr pos:start="41:9" pos:end="41:67"><call pos:start="41:9" pos:end="41:67"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:67">(<argument pos:start="41:16" pos:end="41:23"><expr pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:23"><name pos:start="41:16" pos:end="41:16">s</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">avctx</name></name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="41:40" pos:end="41:66"><expr pos:start="41:40" pos:end="41:66"><literal type="string" pos:start="41:40" pos:end="41:66">"invalid coeff precision\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:74"><expr pos:start="47:5" pos:end="47:73"><call pos:start="47:5" pos:end="47:73"><name pos:start="47:5" pos:end="47:10">av_log</name><argument_list pos:start="47:11" pos:end="47:73">(<argument pos:start="47:12" pos:end="47:19"><expr pos:start="47:12" pos:end="47:19"><name pos:start="47:12" pos:end="47:19"><name pos:start="47:12" pos:end="47:12">s</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:19">avctx</name></name></expr></argument>, <argument pos:start="47:22" pos:end="47:33"><expr pos:start="47:22" pos:end="47:33"><name pos:start="47:22" pos:end="47:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="47:36" pos:end="47:60"><expr pos:start="47:36" pos:end="47:60"><literal type="string" pos:start="47:36" pos:end="47:60">"   qlp coeff prec: %d\n"</literal></expr></argument>, <argument pos:start="47:63" pos:end="47:72"><expr pos:start="47:63" pos:end="47:72"><name pos:start="47:63" pos:end="47:72">coeff_prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:34"><expr pos:start="49:5" pos:end="49:33"><name pos:start="49:5" pos:end="49:10">qlevel</name> <operator pos:start="49:12" pos:end="49:12">=</operator> <call pos:start="49:14" pos:end="49:33"><name pos:start="49:14" pos:end="49:22">get_sbits</name><argument_list pos:start="49:23" pos:end="49:33">(<argument pos:start="49:24" pos:end="49:29"><expr pos:start="49:24" pos:end="49:29"><operator pos:start="49:24" pos:end="49:24">&amp;</operator><name pos:start="49:25" pos:end="49:29"><name pos:start="49:25" pos:end="49:25">s</name><operator pos:start="49:26" pos:end="49:27">-&gt;</operator><name pos:start="49:28" pos:end="49:29">gb</name></name></expr></argument>, <argument pos:start="49:32" pos:end="49:32"><expr pos:start="49:32" pos:end="49:32"><literal type="number" pos:start="49:32" pos:end="49:32">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:67"><expr pos:start="51:5" pos:end="51:66"><call pos:start="51:5" pos:end="51:66"><name pos:start="51:5" pos:end="51:10">av_log</name><argument_list pos:start="51:11" pos:end="51:66">(<argument pos:start="51:12" pos:end="51:19"><expr pos:start="51:12" pos:end="51:19"><name pos:start="51:12" pos:end="51:19"><name pos:start="51:12" pos:end="51:12">s</name><operator pos:start="51:13" pos:end="51:14">-&gt;</operator><name pos:start="51:15" pos:end="51:19">avctx</name></name></expr></argument>, <argument pos:start="51:22" pos:end="51:33"><expr pos:start="51:22" pos:end="51:33"><name pos:start="51:22" pos:end="51:33">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="51:36" pos:end="51:57"><expr pos:start="51:36" pos:end="51:57"><literal type="string" pos:start="51:36" pos:end="51:57">"   quant level: %d\n"</literal></expr></argument>, <argument pos:start="51:60" pos:end="51:65"><expr pos:start="51:60" pos:end="51:65"><name pos:start="51:60" pos:end="51:65">qlevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt pos:start="53:1" pos:end="53:20"><expr pos:start="53:1" pos:end="53:19"><call pos:start="53:1" pos:end="53:19"><name pos:start="53:1" pos:end="53:6">assert</name><argument_list pos:start="53:7" pos:end="53:19">(<argument pos:start="53:8" pos:end="53:18"><expr pos:start="53:8" pos:end="53:18"><name pos:start="53:8" pos:end="53:13">qlevel</name> <operator pos:start="53:15" pos:end="53:16">&gt;=</operator> <literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="53:22" pos:end="53:28">//FIXME</comment>

    <for pos:start="55:5" pos:end="63:5">for <control pos:start="55:9" pos:end="55:36">(<init pos:start="55:10" pos:end="55:15"><expr pos:start="55:10" pos:end="55:14"><name pos:start="55:10" pos:end="55:10">i</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>;</init> <condition pos:start="55:17" pos:end="55:31"><expr pos:start="55:17" pos:end="55:30"><name pos:start="55:17" pos:end="55:17">i</name> <operator pos:start="55:19" pos:end="55:19">&lt;</operator> <name pos:start="55:21" pos:end="55:30">pred_order</name></expr>;</condition> <incr pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><name pos:start="55:33" pos:end="55:33">i</name><operator pos:start="55:34" pos:end="55:35">++</operator></expr></incr>)</control>

    <block pos:start="57:5" pos:end="63:5">{<block_content pos:start="59:9" pos:end="59:50">

        <expr_stmt pos:start="59:9" pos:end="59:50"><expr pos:start="59:9" pos:end="59:49"><name pos:start="59:9" pos:end="59:17"><name pos:start="59:9" pos:end="59:14">coeffs</name><index pos:start="59:15" pos:end="59:17">[<expr pos:start="59:16" pos:end="59:16"><name pos:start="59:16" pos:end="59:16">i</name></expr>]</index></name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:49"><name pos:start="59:21" pos:end="59:29">get_sbits</name><argument_list pos:start="59:30" pos:end="59:49">(<argument pos:start="59:31" pos:end="59:36"><expr pos:start="59:31" pos:end="59:36"><operator pos:start="59:31" pos:end="59:31">&amp;</operator><name pos:start="59:32" pos:end="59:36"><name pos:start="59:32" pos:end="59:32">s</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:36">gb</name></name></expr></argument>, <argument pos:start="59:39" pos:end="59:48"><expr pos:start="59:39" pos:end="59:48"><name pos:start="59:39" pos:end="59:48">coeff_prec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line" pos:start="61:1" pos:end="61:71">//        av_log(s-&gt;avctx, AV_LOG_DEBUG, "    %d: %d\n", i, coeffs[i]);</comment>

    </block_content>}</block></for>

    

    <if_stmt pos:start="67:5" pos:end="69:18"><if pos:start="67:5" pos:end="69:18">if <condition pos:start="67:8" pos:end="67:53">(<expr pos:start="67:9" pos:end="67:52"><call pos:start="67:9" pos:end="67:48"><name pos:start="67:9" pos:end="67:24">decode_residuals</name><argument_list pos:start="67:25" pos:end="67:48">(<argument pos:start="67:26" pos:end="67:26"><expr pos:start="67:26" pos:end="67:26"><name pos:start="67:26" pos:end="67:26">s</name></expr></argument>, <argument pos:start="67:29" pos:end="67:35"><expr pos:start="67:29" pos:end="67:35"><name pos:start="67:29" pos:end="67:35">channel</name></expr></argument>, <argument pos:start="67:38" pos:end="67:47"><expr pos:start="67:38" pos:end="67:47"><name pos:start="67:38" pos:end="67:47">pred_order</name></expr></argument>)</argument_list></call> <operator pos:start="67:50" pos:end="67:50">&lt;</operator> <literal type="number" pos:start="67:52" pos:end="67:52">0</literal></expr>)</condition><block type="pseudo" pos:start="69:9" pos:end="69:18"><block_content pos:start="69:9" pos:end="69:18">

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="73:5" pos:end="85:5">for <control pos:start="73:9" pos:end="73:47">(<init pos:start="73:10" pos:end="73:24"><expr pos:start="73:10" pos:end="73:23"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <name pos:start="73:14" pos:end="73:23">pred_order</name></expr>;</init> <condition pos:start="73:26" pos:end="73:42"><expr pos:start="73:26" pos:end="73:41"><name pos:start="73:26" pos:end="73:26">i</name> <operator pos:start="73:28" pos:end="73:28">&lt;</operator> <name pos:start="73:30" pos:end="73:41"><name pos:start="73:30" pos:end="73:30">s</name><operator pos:start="73:31" pos:end="73:32">-&gt;</operator><name pos:start="73:33" pos:end="73:41">blocksize</name></name></expr>;</condition> <incr pos:start="73:44" pos:end="73:46"><expr pos:start="73:44" pos:end="73:46"><name pos:start="73:44" pos:end="73:44">i</name><operator pos:start="73:45" pos:end="73:46">++</operator></expr></incr>)</control>

    <block pos:start="75:5" pos:end="85:5">{<block_content pos:start="77:9" pos:end="83:48">

        <expr_stmt pos:start="77:9" pos:end="77:16"><expr pos:start="77:9" pos:end="77:15"><name pos:start="77:9" pos:end="77:11">sum</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <literal type="number" pos:start="77:15" pos:end="77:15">0</literal></expr>;</expr_stmt>

        <for pos:start="79:9" pos:end="81:58">for <control pos:start="79:13" pos:end="79:40">(<init pos:start="79:14" pos:end="79:19"><expr pos:start="79:14" pos:end="79:18"><name pos:start="79:14" pos:end="79:14">j</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>;</init> <condition pos:start="79:21" pos:end="79:35"><expr pos:start="79:21" pos:end="79:34"><name pos:start="79:21" pos:end="79:21">j</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <name pos:start="79:25" pos:end="79:34">pred_order</name></expr>;</condition> <incr pos:start="79:37" pos:end="79:39"><expr pos:start="79:37" pos:end="79:39"><name pos:start="79:37" pos:end="79:37">j</name><operator pos:start="79:38" pos:end="79:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="81:13" pos:end="81:58"><block_content pos:start="81:13" pos:end="81:58">

            <expr_stmt pos:start="81:13" pos:end="81:58"><expr pos:start="81:13" pos:end="81:57"><name pos:start="81:13" pos:end="81:15">sum</name> <operator pos:start="81:17" pos:end="81:18">+=</operator> <name pos:start="81:20" pos:end="81:28"><name pos:start="81:20" pos:end="81:25">coeffs</name><index pos:start="81:26" pos:end="81:28">[<expr pos:start="81:27" pos:end="81:27"><name pos:start="81:27" pos:end="81:27">j</name></expr>]</index></name> <operator pos:start="81:30" pos:end="81:30">*</operator> <name pos:start="81:32" pos:end="81:57"><name pos:start="81:32" pos:end="81:32">s</name><operator pos:start="81:33" pos:end="81:34">-&gt;</operator><name pos:start="81:35" pos:end="81:41">decoded</name><index pos:start="81:42" pos:end="81:50">[<expr pos:start="81:43" pos:end="81:49"><name pos:start="81:43" pos:end="81:49">channel</name></expr>]</index><index pos:start="81:51" pos:end="81:57">[<expr pos:start="81:52" pos:end="81:56"><name pos:start="81:52" pos:end="81:52">i</name><operator pos:start="81:53" pos:end="81:53">-</operator><name pos:start="81:54" pos:end="81:54">j</name><operator pos:start="81:55" pos:end="81:55">-</operator><literal type="number" pos:start="81:56" pos:end="81:56">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="83:9" pos:end="83:48"><expr pos:start="83:9" pos:end="83:47"><name pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:9">s</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:18">decoded</name><index pos:start="83:19" pos:end="83:27">[<expr pos:start="83:20" pos:end="83:26"><name pos:start="83:20" pos:end="83:26">channel</name></expr>]</index><index pos:start="83:28" pos:end="83:30">[<expr pos:start="83:29" pos:end="83:29"><name pos:start="83:29" pos:end="83:29">i</name></expr>]</index></name> <operator pos:start="83:32" pos:end="83:33">+=</operator> <name pos:start="83:35" pos:end="83:37">sum</name> <operator pos:start="83:39" pos:end="83:40">&gt;&gt;</operator> <name pos:start="83:42" pos:end="83:47">qlevel</name></expr>;</expr_stmt>

    </block_content>}</block></for>

    

    <return pos:start="89:5" pos:end="89:13">return <expr pos:start="89:12" pos:end="89:12"><literal type="number" pos:start="89:12" pos:end="89:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
