<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12323.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">unix_listen_saddr</name><parameter_list pos:start="1:29" pos:end="5:42">(<parameter pos:start="1:30" pos:end="1:53"><decl pos:start="1:30" pos:end="1:53"><type pos:start="1:30" pos:end="1:53"><name pos:start="1:30" pos:end="1:46">UnixSocketAddress</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">saddr</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:45"><decl pos:start="3:30" pos:end="3:45"><type pos:start="3:30" pos:end="3:45"><name pos:start="3:30" pos:end="3:33">bool</name></type> <name pos:start="3:35" pos:end="3:45">update_addr</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:41"><decl pos:start="5:30" pos:end="5:41"><type pos:start="5:30" pos:end="5:41"><name pos:start="5:30" pos:end="5:34">Error</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier><modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="133:1">{<block_content pos:start="9:5" pos:end="131:14">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">sockaddr_un</name></name></type> <name pos:start="9:24" pos:end="9:25">un</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">sock</name></decl>, <decl pos:start="11:15" pos:end="11:16"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:16">fd</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:48"><expr pos:start="15:5" pos:end="15:47"><name pos:start="15:5" pos:end="15:8">sock</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <call pos:start="15:12" pos:end="15:47"><name pos:start="15:12" pos:end="15:22">qemu_socket</name><argument_list pos:start="15:23" pos:end="15:47">(<argument pos:start="15:24" pos:end="15:30"><expr pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:30">PF_UNIX</name></expr></argument>, <argument pos:start="15:33" pos:end="15:43"><expr pos:start="15:33" pos:end="15:43"><name pos:start="15:33" pos:end="15:43">SOCK_STREAM</name></expr></argument>, <argument pos:start="15:46" pos:end="15:46"><expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:17">(<expr pos:start="17:9" pos:end="17:16"><name pos:start="17:9" pos:end="17:12">sock</name> <operator pos:start="17:14" pos:end="17:14">&lt;</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>)</condition> <block pos:start="17:19" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:70"><expr pos:start="19:9" pos:end="19:69"><call pos:start="19:9" pos:end="19:69"><name pos:start="19:9" pos:end="19:24">error_setg_errno</name><argument_list pos:start="19:25" pos:end="19:69">(<argument pos:start="19:26" pos:end="19:29"><expr pos:start="19:26" pos:end="19:29"><name pos:start="19:26" pos:end="19:29">errp</name></expr></argument>, <argument pos:start="19:32" pos:end="19:36"><expr pos:start="19:32" pos:end="19:36"><name pos:start="19:32" pos:end="19:36">errno</name></expr></argument>, <argument pos:start="19:39" pos:end="19:68"><expr pos:start="19:39" pos:end="19:68"><literal type="string" pos:start="19:39" pos:end="19:68">"Failed to create Unix socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><call pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:30">(<argument pos:start="27:12" pos:end="27:14"><expr pos:start="27:12" pos:end="27:14"><operator pos:start="27:12" pos:end="27:12">&amp;</operator><name pos:start="27:13" pos:end="27:14">un</name></expr></argument>, <argument pos:start="27:17" pos:end="27:17"><expr pos:start="27:17" pos:end="27:17"><literal type="number" pos:start="27:17" pos:end="27:17">0</literal></expr></argument>, <argument pos:start="27:20" pos:end="27:29"><expr pos:start="27:20" pos:end="27:29"><sizeof pos:start="27:20" pos:end="27:29">sizeof<argument_list pos:start="27:26" pos:end="27:29">(<argument pos:start="27:27" pos:end="27:28"><expr pos:start="27:27" pos:end="27:28"><name pos:start="27:27" pos:end="27:28">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:6">un</name><operator pos:start="29:7" pos:end="29:7">.</operator><name pos:start="29:8" pos:end="29:17">sun_family</name></name> <operator pos:start="29:19" pos:end="29:19">=</operator> <name pos:start="29:21" pos:end="29:27">AF_UNIX</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="91:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:43">(<expr pos:start="31:9" pos:end="31:42"><name pos:start="31:9" pos:end="31:19"><name pos:start="31:9" pos:end="31:13">saddr</name><operator pos:start="31:14" pos:end="31:15">-&gt;</operator><name pos:start="31:16" pos:end="31:19">path</name></name> <operator pos:start="31:21" pos:end="31:22">&amp;&amp;</operator> <call pos:start="31:24" pos:end="31:42"><name pos:start="31:24" pos:end="31:29">strlen</name><argument_list pos:start="31:30" pos:end="31:42">(<argument pos:start="31:31" pos:end="31:41"><expr pos:start="31:31" pos:end="31:41"><name pos:start="31:31" pos:end="31:41"><name pos:start="31:31" pos:end="31:35">saddr</name><operator pos:start="31:36" pos:end="31:37">-&gt;</operator><name pos:start="31:38" pos:end="31:41">path</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:45" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:70">

        <expr_stmt pos:start="33:9" pos:end="33:70"><expr pos:start="33:9" pos:end="33:69"><call pos:start="33:9" pos:end="33:69"><name pos:start="33:9" pos:end="33:16">snprintf</name><argument_list pos:start="33:17" pos:end="33:69">(<argument pos:start="33:18" pos:end="33:28"><expr pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:28"><name pos:start="33:18" pos:end="33:19">un</name><operator pos:start="33:20" pos:end="33:20">.</operator><name pos:start="33:21" pos:end="33:28">sun_path</name></name></expr></argument>, <argument pos:start="33:31" pos:end="33:49"><expr pos:start="33:31" pos:end="33:49"><sizeof pos:start="33:31" pos:end="33:49">sizeof<argument_list pos:start="33:37" pos:end="33:49">(<argument pos:start="33:38" pos:end="33:48"><expr pos:start="33:38" pos:end="33:48"><name pos:start="33:38" pos:end="33:48"><name pos:start="33:38" pos:end="33:39">un</name><operator pos:start="33:40" pos:end="33:40">.</operator><name pos:start="33:41" pos:end="33:48">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:52" pos:end="33:55"><expr pos:start="33:52" pos:end="33:55"><literal type="string" pos:start="33:52" pos:end="33:55">"%s"</literal></expr></argument>, <argument pos:start="33:58" pos:end="33:68"><expr pos:start="33:58" pos:end="33:68"><name pos:start="33:58" pos:end="33:68"><name pos:start="33:58" pos:end="33:62">saddr</name><operator pos:start="33:63" pos:end="33:64">-&gt;</operator><name pos:start="33:65" pos:end="33:68">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="35:7" pos:end="91:5">else <block pos:start="35:12" pos:end="91:5">{<block_content pos:start="37:9" pos:end="89:9">

        <decl_stmt pos:start="37:9" pos:end="37:46"><decl pos:start="37:9" pos:end="37:45"><type pos:start="37:9" pos:end="37:20"><specifier pos:start="37:9" pos:end="37:13">const</specifier> <name pos:start="37:15" pos:end="37:18">char</name> <modifier pos:start="37:20" pos:end="37:20">*</modifier></type><name pos:start="37:21" pos:end="37:26">tmpdir</name> <init pos:start="37:28" pos:end="37:45">= <expr pos:start="37:30" pos:end="37:45"><call pos:start="37:30" pos:end="37:45"><name pos:start="37:30" pos:end="37:35">getenv</name><argument_list pos:start="37:36" pos:end="37:45">(<argument pos:start="37:37" pos:end="37:44"><expr pos:start="37:37" pos:end="37:44"><literal type="string" pos:start="37:37" pos:end="37:44">"TMPDIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:42"><expr pos:start="39:9" pos:end="39:41"><name pos:start="39:9" pos:end="39:14">tmpdir</name> <operator pos:start="39:16" pos:end="39:16">=</operator> <ternary pos:start="39:18" pos:end="39:41"><condition pos:start="39:18" pos:end="39:25"><expr pos:start="39:18" pos:end="39:23"><name pos:start="39:18" pos:end="39:23">tmpdir</name></expr> ?</condition><then pos:start="39:27" pos:end="39:32"> <expr pos:start="39:27" pos:end="39:32"><name pos:start="39:27" pos:end="39:32">tmpdir</name></expr> </then><else pos:start="39:34" pos:end="39:41">: <expr pos:start="39:36" pos:end="39:41"><literal type="string" pos:start="39:36" pos:end="39:41">"/tmp"</literal></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="51:9"><if pos:start="41:9" pos:end="51:9">if <condition pos:start="41:12" pos:end="43:52">(<expr pos:start="41:13" pos:end="43:51"><call pos:start="41:13" pos:end="43:28"><name pos:start="41:13" pos:end="41:20">snprintf</name><argument_list pos:start="41:21" pos:end="43:28">(<argument pos:start="41:22" pos:end="41:32"><expr pos:start="41:22" pos:end="41:32"><name pos:start="41:22" pos:end="41:32"><name pos:start="41:22" pos:end="41:23">un</name><operator pos:start="41:24" pos:end="41:24">.</operator><name pos:start="41:25" pos:end="41:32">sun_path</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:53"><expr pos:start="41:35" pos:end="41:53"><sizeof pos:start="41:35" pos:end="41:53">sizeof<argument_list pos:start="41:41" pos:end="41:53">(<argument pos:start="41:42" pos:end="41:52"><expr pos:start="41:42" pos:end="41:52"><name pos:start="41:42" pos:end="41:52"><name pos:start="41:42" pos:end="41:43">un</name><operator pos:start="41:44" pos:end="41:44">.</operator><name pos:start="41:45" pos:end="41:52">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="41:56" pos:end="41:78"><expr pos:start="41:56" pos:end="41:78"><literal type="string" pos:start="41:56" pos:end="41:78">"%s/qemu-socket-XXXXXX"</literal></expr></argument>,

                     <argument pos:start="43:22" pos:end="43:27"><expr pos:start="43:22" pos:end="43:27"><name pos:start="43:22" pos:end="43:27">tmpdir</name></expr></argument>)</argument_list></call> <operator pos:start="43:30" pos:end="43:31">&gt;=</operator> <sizeof pos:start="43:33" pos:end="43:51">sizeof<argument_list pos:start="43:39" pos:end="43:51">(<argument pos:start="43:40" pos:end="43:50"><expr pos:start="43:40" pos:end="43:50"><name pos:start="43:40" pos:end="43:50"><name pos:start="43:40" pos:end="43:41">un</name><operator pos:start="43:42" pos:end="43:42">.</operator><name pos:start="43:43" pos:end="43:50">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="43:54" pos:end="51:9">{<block_content pos:start="45:13" pos:end="49:21">

            <expr_stmt pos:start="45:13" pos:end="47:83"><expr pos:start="45:13" pos:end="47:82"><call pos:start="45:13" pos:end="47:82"><name pos:start="45:13" pos:end="45:28">error_setg_errno</name><argument_list pos:start="45:29" pos:end="47:82">(<argument pos:start="45:30" pos:end="45:33"><expr pos:start="45:30" pos:end="45:33"><name pos:start="45:30" pos:end="45:33">errp</name></expr></argument>, <argument pos:start="45:36" pos:end="45:40"><expr pos:start="45:36" pos:end="45:40"><name pos:start="45:36" pos:end="45:40">errno</name></expr></argument>,

                             <argument pos:start="47:30" pos:end="47:73"><expr pos:start="47:30" pos:end="47:73"><literal type="string" pos:start="47:30" pos:end="47:73">"TMPDIR environment variable (%s) too large"</literal></expr></argument>, <argument pos:start="47:76" pos:end="47:81"><expr pos:start="47:76" pos:end="47:81"><name pos:start="47:76" pos:end="47:81">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="49:13" pos:end="49:21">goto <name pos:start="49:18" pos:end="49:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="55:9" pos:end="67:11">/*

         * This dummy fd usage silences the mktemp() unsecure warning.

         * Using mkstemp() doesn't make things more secure here

         * though.  bind() complains about existing files, so we have

         * to unlink first and thus re-open the race window.  The

         * worst case possible is bind() failing, i.e. a DoS attack.

         */</comment>

        <expr_stmt pos:start="69:9" pos:end="69:34"><expr pos:start="69:9" pos:end="69:33"><name pos:start="69:9" pos:end="69:10">fd</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <call pos:start="69:14" pos:end="69:33"><name pos:start="69:14" pos:end="69:20">mkstemp</name><argument_list pos:start="69:21" pos:end="69:33">(<argument pos:start="69:22" pos:end="69:32"><expr pos:start="69:22" pos:end="69:32"><name pos:start="69:22" pos:end="69:32"><name pos:start="69:22" pos:end="69:23">un</name><operator pos:start="69:24" pos:end="69:24">.</operator><name pos:start="69:25" pos:end="69:32">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="79:9"><if pos:start="71:9" pos:end="79:9">if <condition pos:start="71:12" pos:end="71:19">(<expr pos:start="71:13" pos:end="71:18"><name pos:start="71:13" pos:end="71:14">fd</name> <operator pos:start="71:16" pos:end="71:16">&lt;</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr>)</condition> <block pos:start="71:21" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:21">

            <expr_stmt pos:start="73:13" pos:end="75:85"><expr pos:start="73:13" pos:end="75:84"><call pos:start="73:13" pos:end="75:84"><name pos:start="73:13" pos:end="73:28">error_setg_errno</name><argument_list pos:start="73:29" pos:end="75:84">(<argument pos:start="73:30" pos:end="73:33"><expr pos:start="73:30" pos:end="73:33"><name pos:start="73:30" pos:end="73:33">errp</name></expr></argument>, <argument pos:start="73:36" pos:end="73:40"><expr pos:start="73:36" pos:end="73:40"><name pos:start="73:36" pos:end="73:40">errno</name></expr></argument>,

                             <argument pos:start="75:30" pos:end="75:75"><expr pos:start="75:30" pos:end="75:75"><literal type="string" pos:start="75:30" pos:end="75:75">"Failed to make a temporary socket name in %s"</literal></expr></argument>, <argument pos:start="75:78" pos:end="75:83"><expr pos:start="75:78" pos:end="75:83"><name pos:start="75:78" pos:end="75:83">tmpdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="77:13" pos:end="77:21">goto <name pos:start="77:18" pos:end="77:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:18"><expr pos:start="81:9" pos:end="81:17"><call pos:start="81:9" pos:end="81:17"><name pos:start="81:9" pos:end="81:13">close</name><argument_list pos:start="81:14" pos:end="81:17">(<argument pos:start="81:15" pos:end="81:16"><expr pos:start="81:15" pos:end="81:16"><name pos:start="81:15" pos:end="81:16">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="83:24">(<expr pos:start="83:13" pos:end="83:23"><name pos:start="83:13" pos:end="83:23">update_addr</name></expr>)</condition> <block pos:start="83:26" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:48">

            <expr_stmt pos:start="85:13" pos:end="85:32"><expr pos:start="85:13" pos:end="85:31"><call pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:18">g_free</name><argument_list pos:start="85:19" pos:end="85:31">(<argument pos:start="85:20" pos:end="85:30"><expr pos:start="85:20" pos:end="85:30"><name pos:start="85:20" pos:end="85:30"><name pos:start="85:20" pos:end="85:24">saddr</name><operator pos:start="85:25" pos:end="85:26">-&gt;</operator><name pos:start="85:27" pos:end="85:30">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:17">saddr</name><operator pos:start="87:18" pos:end="87:19">-&gt;</operator><name pos:start="87:20" pos:end="87:23">path</name></name> <operator pos:start="87:25" pos:end="87:25">=</operator> <call pos:start="87:27" pos:end="87:47"><name pos:start="87:27" pos:end="87:34">g_strdup</name><argument_list pos:start="87:35" pos:end="87:47">(<argument pos:start="87:36" pos:end="87:46"><expr pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:46"><name pos:start="87:36" pos:end="87:37">un</name><operator pos:start="87:38" pos:end="87:38">.</operator><name pos:start="87:39" pos:end="87:46">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:51">(<expr pos:start="95:9" pos:end="95:50"><call pos:start="95:9" pos:end="95:27"><name pos:start="95:9" pos:end="95:14">unlink</name><argument_list pos:start="95:15" pos:end="95:27">(<argument pos:start="95:16" pos:end="95:26"><expr pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:26"><name pos:start="95:16" pos:end="95:17">un</name><operator pos:start="95:18" pos:end="95:18">.</operator><name pos:start="95:19" pos:end="95:26">sun_path</name></name></expr></argument>)</argument_list></call> <operator pos:start="95:29" pos:end="95:29">&lt;</operator> <literal type="number" pos:start="95:31" pos:end="95:31">0</literal> <operator pos:start="95:33" pos:end="95:34">&amp;&amp;</operator> <name pos:start="95:36" pos:end="95:40">errno</name> <operator pos:start="95:42" pos:end="95:43">!=</operator> <name pos:start="95:45" pos:end="95:50">ENOENT</name></expr>)</condition> <block pos:start="95:53" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:17">

        <expr_stmt pos:start="97:9" pos:end="99:68"><expr pos:start="97:9" pos:end="99:67"><call pos:start="97:9" pos:end="99:67"><name pos:start="97:9" pos:end="97:24">error_setg_errno</name><argument_list pos:start="97:25" pos:end="99:67">(<argument pos:start="97:26" pos:end="97:29"><expr pos:start="97:26" pos:end="97:29"><name pos:start="97:26" pos:end="97:29">errp</name></expr></argument>, <argument pos:start="97:32" pos:end="97:36"><expr pos:start="97:32" pos:end="97:36"><name pos:start="97:32" pos:end="97:36">errno</name></expr></argument>,

                         <argument pos:start="99:26" pos:end="99:53"><expr pos:start="99:26" pos:end="99:53"><literal type="string" pos:start="99:26" pos:end="99:53">"Failed to unlink socket %s"</literal></expr></argument>, <argument pos:start="99:56" pos:end="99:66"><expr pos:start="99:56" pos:end="99:66"><name pos:start="99:56" pos:end="99:66"><name pos:start="99:56" pos:end="99:57">un</name><operator pos:start="99:58" pos:end="99:58">.</operator><name pos:start="99:59" pos:end="99:66">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="101:9" pos:end="101:17">goto <name pos:start="101:14" pos:end="101:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:59">(<expr pos:start="105:9" pos:end="105:58"><call pos:start="105:9" pos:end="105:54"><name pos:start="105:9" pos:end="105:12">bind</name><argument_list pos:start="105:13" pos:end="105:54">(<argument pos:start="105:14" pos:end="105:17"><expr pos:start="105:14" pos:end="105:17"><name pos:start="105:14" pos:end="105:17">sock</name></expr></argument>, <argument pos:start="105:20" pos:end="105:41"><expr pos:start="105:20" pos:end="105:41"><operator pos:start="105:20" pos:end="105:20">(</operator>struct <name pos:start="105:28" pos:end="105:35">sockaddr</name><operator pos:start="105:36" pos:end="105:36">*</operator><operator pos:start="105:37" pos:end="105:37">)</operator> <operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:41">un</name></expr></argument>, <argument pos:start="105:44" pos:end="105:53"><expr pos:start="105:44" pos:end="105:53"><sizeof pos:start="105:44" pos:end="105:53">sizeof<argument_list pos:start="105:50" pos:end="105:53">(<argument pos:start="105:51" pos:end="105:52"><expr pos:start="105:51" pos:end="105:52"><name pos:start="105:51" pos:end="105:52">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="105:56" pos:end="105:56">&lt;</operator> <literal type="number" pos:start="105:58" pos:end="105:58">0</literal></expr>)</condition> <block pos:start="105:61" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:17">

        <expr_stmt pos:start="107:9" pos:end="107:82"><expr pos:start="107:9" pos:end="107:81"><call pos:start="107:9" pos:end="107:81"><name pos:start="107:9" pos:end="107:24">error_setg_errno</name><argument_list pos:start="107:25" pos:end="107:81">(<argument pos:start="107:26" pos:end="107:29"><expr pos:start="107:26" pos:end="107:29"><name pos:start="107:26" pos:end="107:29">errp</name></expr></argument>, <argument pos:start="107:32" pos:end="107:36"><expr pos:start="107:32" pos:end="107:36"><name pos:start="107:32" pos:end="107:36">errno</name></expr></argument>, <argument pos:start="107:39" pos:end="107:67"><expr pos:start="107:39" pos:end="107:67"><literal type="string" pos:start="107:39" pos:end="107:67">"Failed to bind socket to %s"</literal></expr></argument>, <argument pos:start="107:70" pos:end="107:80"><expr pos:start="107:70" pos:end="107:80"><name pos:start="107:70" pos:end="107:80"><name pos:start="107:70" pos:end="107:71">un</name><operator pos:start="107:72" pos:end="107:72">.</operator><name pos:start="107:73" pos:end="107:80">sun_path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:17">goto <name pos:start="109:14" pos:end="109:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:28">(<expr pos:start="113:9" pos:end="113:27"><call pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:14">listen</name><argument_list pos:start="113:15" pos:end="113:23">(<argument pos:start="113:16" pos:end="113:19"><expr pos:start="113:16" pos:end="113:19"><name pos:start="113:16" pos:end="113:19">sock</name></expr></argument>, <argument pos:start="113:22" pos:end="113:22"><expr pos:start="113:22" pos:end="113:22"><literal type="number" pos:start="113:22" pos:end="113:22">1</literal></expr></argument>)</argument_list></call> <operator pos:start="113:25" pos:end="113:25">&lt;</operator> <literal type="number" pos:start="113:27" pos:end="113:27">0</literal></expr>)</condition> <block pos:start="113:30" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:17">

        <expr_stmt pos:start="115:9" pos:end="115:68"><expr pos:start="115:9" pos:end="115:67"><call pos:start="115:9" pos:end="115:67"><name pos:start="115:9" pos:end="115:24">error_setg_errno</name><argument_list pos:start="115:25" pos:end="115:67">(<argument pos:start="115:26" pos:end="115:29"><expr pos:start="115:26" pos:end="115:29"><name pos:start="115:26" pos:end="115:29">errp</name></expr></argument>, <argument pos:start="115:32" pos:end="115:36"><expr pos:start="115:32" pos:end="115:36"><name pos:start="115:32" pos:end="115:36">errno</name></expr></argument>, <argument pos:start="115:39" pos:end="115:66"><expr pos:start="115:39" pos:end="115:66"><literal type="string" pos:start="115:39" pos:end="115:66">"Failed to listen on socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="117:9" pos:end="117:17">goto <name pos:start="117:14" pos:end="117:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <return pos:start="123:5" pos:end="123:16">return <expr pos:start="123:12" pos:end="123:15"><name pos:start="123:12" pos:end="123:15">sock</name></expr>;</return>



<label pos:start="127:1" pos:end="127:4"><name pos:start="127:1" pos:end="127:3">err</name>:</label>

    <expr_stmt pos:start="129:5" pos:end="129:22"><expr pos:start="129:5" pos:end="129:21"><call pos:start="129:5" pos:end="129:21"><name pos:start="129:5" pos:end="129:15">closesocket</name><argument_list pos:start="129:16" pos:end="129:21">(<argument pos:start="129:17" pos:end="129:20"><expr pos:start="129:17" pos:end="129:20"><name pos:start="129:17" pos:end="129:20">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="131:5" pos:end="131:14">return <expr pos:start="131:12" pos:end="131:13"><operator pos:start="131:12" pos:end="131:12">-</operator><literal type="number" pos:start="131:13" pos:end="131:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
