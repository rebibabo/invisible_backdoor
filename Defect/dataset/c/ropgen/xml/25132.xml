<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25132.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:31">gen_op_mfspr</name><parameter_list pos:start="1:32" pos:end="1:50">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:44">DisasContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:5">

    <function_decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">void</name></type> (<modifier pos:start="5:11" pos:end="5:11">*</modifier><name pos:start="5:12" pos:end="5:18">read_cb</name>)<parameter_list pos:start="5:20" pos:end="5:53">(<parameter pos:start="5:21" pos:end="5:32"><decl pos:start="5:21" pos:end="5:32"><type pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:24">void</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:32">opaque</name></decl></parameter>, <parameter pos:start="5:35" pos:end="5:42"><decl pos:start="5:35" pos:end="5:42"><type pos:start="5:35" pos:end="5:42"><name pos:start="5:35" pos:end="5:37">int</name></type> <name pos:start="5:39" pos:end="5:42">gprn</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:52"><decl pos:start="5:45" pos:end="5:52"><type pos:start="5:45" pos:end="5:52"><name pos:start="5:45" pos:end="5:47">int</name></type> <name pos:start="5:49" pos:end="5:52">sprn</name></decl></parameter>)</parameter_list>;</function_decl>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:17">sprn</name> <init pos:start="7:19" pos:end="7:36">= <expr pos:start="7:21" pos:end="7:36"><call pos:start="7:21" pos:end="7:36"><name pos:start="7:21" pos:end="7:23">SPR</name><argument_list pos:start="7:24" pos:end="7:36">(<argument pos:start="7:25" pos:end="7:35"><expr pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:35"><name pos:start="7:25" pos:end="7:27">ctx</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:35">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:30">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:30"><operator pos:start="11:5" pos:end="11:5">!</operator><call pos:start="11:6" pos:end="11:30"><name pos:start="11:6" pos:end="11:12">defined</name><argument_list pos:start="11:13" pos:end="11:30">(<argument pos:start="11:14" pos:end="11:29"><expr pos:start="11:14" pos:end="11:29"><name pos:start="11:14" pos:end="11:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="13:5" pos:end="25:45"><if pos:start="13:5" pos:end="15:45">if <condition pos:start="13:8" pos:end="13:26">(<expr pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:11">ctx</name><operator pos:start="13:12" pos:end="13:13">-&gt;</operator><name pos:start="13:14" pos:end="13:20">mem_idx</name></name> <operator pos:start="13:22" pos:end="13:23">==</operator> <literal type="number" pos:start="13:25" pos:end="13:25">2</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:45"><block_content pos:start="15:9" pos:end="15:45">

        <expr_stmt pos:start="15:9" pos:end="15:45"><expr pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:15">read_cb</name> <operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:35"><name pos:start="15:19" pos:end="15:21">ctx</name><operator pos:start="15:22" pos:end="15:23">-&gt;</operator><name pos:start="15:24" pos:end="15:29">spr_cb</name><index pos:start="15:30" pos:end="15:35">[<expr pos:start="15:31" pos:end="15:34"><name pos:start="15:31" pos:end="15:34">sprn</name></expr>]</index></name><operator pos:start="15:36" pos:end="15:36">.</operator><name pos:start="15:37" pos:end="15:44">hea_read</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="17:5" pos:end="19:45">else if <condition pos:start="17:13" pos:end="17:26">(<expr pos:start="17:14" pos:end="17:25"><name pos:start="17:14" pos:end="17:25"><name pos:start="17:14" pos:end="17:16">ctx</name><operator pos:start="17:17" pos:end="17:18">-&gt;</operator><name pos:start="17:19" pos:end="17:25">mem_idx</name></name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:45"><block_content pos:start="19:9" pos:end="19:45">

        <expr_stmt pos:start="19:9" pos:end="19:45"><expr pos:start="19:9" pos:end="19:44"><name pos:start="19:9" pos:end="19:15">read_cb</name> <operator pos:start="19:17" pos:end="19:17">=</operator> <name pos:start="19:19" pos:end="19:35"><name pos:start="19:19" pos:end="19:21">ctx</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:29">spr_cb</name><index pos:start="19:30" pos:end="19:35">[<expr pos:start="19:31" pos:end="19:34"><name pos:start="19:31" pos:end="19:34">sprn</name></expr>]</index></name><operator pos:start="19:36" pos:end="19:36">.</operator><name pos:start="19:37" pos:end="19:44">oea_read</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="21:5" pos:end="25:45">else<block type="pseudo" pos:start="25:9" pos:end="25:45"><block_content pos:start="25:9" pos:end="25:45">

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="25:9" pos:end="25:45"><expr pos:start="25:9" pos:end="25:44"><name pos:start="25:9" pos:end="25:15">read_cb</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:35"><name pos:start="25:19" pos:end="25:21">ctx</name><operator pos:start="25:22" pos:end="25:23">-&gt;</operator><name pos:start="25:24" pos:end="25:29">spr_cb</name><index pos:start="25:30" pos:end="25:35">[<expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">sprn</name></expr>]</index></name><operator pos:start="25:36" pos:end="25:36">.</operator><name pos:start="25:37" pos:end="25:44">uea_read</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt pos:start="27:5" pos:end="75:5"><if pos:start="27:5" pos:end="61:5">if <condition pos:start="27:8" pos:end="27:32">(<expr pos:start="27:9" pos:end="27:31"><call pos:start="27:9" pos:end="27:31"><name pos:start="27:9" pos:end="27:14">likely</name><argument_list pos:start="27:15" pos:end="27:31">(<argument pos:start="27:16" pos:end="27:30"><expr pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">read_cb</name> <operator pos:start="27:24" pos:end="27:25">!=</operator> <name pos:start="27:27" pos:end="27:30">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="27:34" pos:end="61:5">{<block_content pos:start="29:9" pos:end="59:9">

        <if_stmt pos:start="29:9" pos:end="59:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:44">(<expr pos:start="29:13" pos:end="29:43"><call pos:start="29:13" pos:end="29:43"><name pos:start="29:13" pos:end="29:18">likely</name><argument_list pos:start="29:19" pos:end="29:43">(<argument pos:start="29:20" pos:end="29:42"><expr pos:start="29:20" pos:end="29:42"><name pos:start="29:20" pos:end="29:26">read_cb</name> <operator pos:start="29:28" pos:end="29:29">!=</operator> <name pos:start="29:31" pos:end="29:42">SPR_NOACCESS</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:46" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:51">

            <expr_stmt pos:start="31:13" pos:end="31:51"><expr pos:start="31:13" pos:end="31:50"><call pos:start="31:13" pos:end="31:50">(<modifier pos:start="31:14" pos:end="31:14">*</modifier><name pos:start="31:15" pos:end="31:21">read_cb</name>)<argument_list pos:start="31:23" pos:end="31:50">(<argument pos:start="31:24" pos:end="31:26"><expr pos:start="31:24" pos:end="31:26"><name pos:start="31:24" pos:end="31:26">ctx</name></expr></argument>, <argument pos:start="31:29" pos:end="31:43"><expr pos:start="31:29" pos:end="31:43"><call pos:start="31:29" pos:end="31:43"><name pos:start="31:29" pos:end="31:30">rD</name><argument_list pos:start="31:31" pos:end="31:43">(<argument pos:start="31:32" pos:end="31:42"><expr pos:start="31:32" pos:end="31:42"><name pos:start="31:32" pos:end="31:42"><name pos:start="31:32" pos:end="31:34">ctx</name><operator pos:start="31:35" pos:end="31:36">-&gt;</operator><name pos:start="31:37" pos:end="31:42">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:46" pos:end="31:49"><expr pos:start="31:46" pos:end="31:49"><name pos:start="31:46" pos:end="31:49">sprn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="59:9">else <block pos:start="33:16" pos:end="59:9">{<block_content pos:start="45:13" pos:end="57:60">

            <comment type="block" pos:start="35:13" pos:end="35:37">/* Privilege exception */</comment>

            <comment type="block" pos:start="37:13" pos:end="43:15">/* This is a hack to avoid warnings when running Linux:

             * this OS breaks the PowerPC virtualisation model,

             * allowing userland application to read the PVR

             */</comment>

            <if_stmt pos:start="45:13" pos:end="55:13"><if pos:start="45:13" pos:end="55:13">if <condition pos:start="45:16" pos:end="45:32">(<expr pos:start="45:17" pos:end="45:31"><name pos:start="45:17" pos:end="45:20">sprn</name> <operator pos:start="45:22" pos:end="45:23">!=</operator> <name pos:start="45:25" pos:end="45:31">SPR_PVR</name></expr>)</condition> <block pos:start="45:34" pos:end="55:13">{<block_content pos:start="47:17" pos:end="53:65">

                <expr_stmt pos:start="47:17" pos:end="49:67"><expr pos:start="47:17" pos:end="49:66"><call pos:start="47:17" pos:end="49:66"><name pos:start="47:17" pos:end="47:24">qemu_log</name><argument_list pos:start="47:25" pos:end="49:66">(<argument pos:start="47:26" pos:end="49:43"><expr pos:start="47:26" pos:end="49:43"><literal type="string" pos:start="47:26" pos:end="47:68">"Trying to read privileged spr %d %03x at "</literal>

                         <name pos:start="49:26" pos:end="49:38">TARGET_FMT_lx</name> <literal type="string" pos:start="49:40" pos:end="49:43">"\n"</literal></expr></argument>, <argument pos:start="49:46" pos:end="49:49"><expr pos:start="49:46" pos:end="49:49"><name pos:start="49:46" pos:end="49:49">sprn</name></expr></argument>, <argument pos:start="49:52" pos:end="49:55"><expr pos:start="49:52" pos:end="49:55"><name pos:start="49:52" pos:end="49:55">sprn</name></expr></argument>, <argument pos:start="49:58" pos:end="49:65"><expr pos:start="49:58" pos:end="49:65"><name pos:start="49:58" pos:end="49:65"><name pos:start="49:58" pos:end="49:60">ctx</name><operator pos:start="49:61" pos:end="49:62">-&gt;</operator><name pos:start="49:63" pos:end="49:65">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="53:65"><expr pos:start="51:17" pos:end="53:64"><call pos:start="51:17" pos:end="53:64"><name pos:start="51:17" pos:end="51:22">printf</name><argument_list pos:start="51:23" pos:end="53:64">(<argument pos:start="51:24" pos:end="53:41"><expr pos:start="51:24" pos:end="53:41"><literal type="string" pos:start="51:24" pos:end="51:66">"Trying to read privileged spr %d %03x at "</literal>

                       <name pos:start="53:24" pos:end="53:36">TARGET_FMT_lx</name> <literal type="string" pos:start="53:38" pos:end="53:41">"\n"</literal></expr></argument>, <argument pos:start="53:44" pos:end="53:47"><expr pos:start="53:44" pos:end="53:47"><name pos:start="53:44" pos:end="53:47">sprn</name></expr></argument>, <argument pos:start="53:50" pos:end="53:53"><expr pos:start="53:50" pos:end="53:53"><name pos:start="53:50" pos:end="53:53">sprn</name></expr></argument>, <argument pos:start="53:56" pos:end="53:63"><expr pos:start="53:56" pos:end="53:63"><name pos:start="53:56" pos:end="53:63"><name pos:start="53:56" pos:end="53:58">ctx</name><operator pos:start="53:59" pos:end="53:60">-&gt;</operator><name pos:start="53:61" pos:end="53:63">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:60"><expr pos:start="57:13" pos:end="57:59"><call pos:start="57:13" pos:end="57:59"><name pos:start="57:13" pos:end="57:31">gen_inval_exception</name><argument_list pos:start="57:32" pos:end="57:59">(<argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:35">ctx</name></expr></argument>, <argument pos:start="57:38" pos:end="57:58"><expr pos:start="57:38" pos:end="57:58"><name pos:start="57:38" pos:end="57:58">POWERPC_EXCP_PRIV_REG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="61:7" pos:end="75:5">else <block pos:start="61:12" pos:end="75:5">{<block_content pos:start="65:9" pos:end="73:57">

        <comment type="block" pos:start="63:9" pos:end="63:25">/* Not defined */</comment>

        <expr_stmt pos:start="65:9" pos:end="67:62"><expr pos:start="65:9" pos:end="67:61"><call pos:start="65:9" pos:end="67:61"><name pos:start="65:9" pos:end="65:16">qemu_log</name><argument_list pos:start="65:17" pos:end="67:61">(<argument pos:start="65:18" pos:end="67:38"><expr pos:start="65:18" pos:end="67:38"><literal type="string" pos:start="65:18" pos:end="65:57">"Trying to read invalid spr %d %03x at "</literal>

                    <name pos:start="67:21" pos:end="67:33">TARGET_FMT_lx</name> <literal type="string" pos:start="67:35" pos:end="67:38">"\n"</literal></expr></argument>, <argument pos:start="67:41" pos:end="67:44"><expr pos:start="67:41" pos:end="67:44"><name pos:start="67:41" pos:end="67:44">sprn</name></expr></argument>, <argument pos:start="67:47" pos:end="67:50"><expr pos:start="67:47" pos:end="67:50"><name pos:start="67:47" pos:end="67:50">sprn</name></expr></argument>, <argument pos:start="67:53" pos:end="67:60"><expr pos:start="67:53" pos:end="67:60"><name pos:start="67:53" pos:end="67:60"><name pos:start="67:53" pos:end="67:55">ctx</name><operator pos:start="67:56" pos:end="67:57">-&gt;</operator><name pos:start="67:58" pos:end="67:60">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="71:37"><expr pos:start="69:9" pos:end="71:36"><call pos:start="69:9" pos:end="71:36"><name pos:start="69:9" pos:end="69:14">printf</name><argument_list pos:start="69:15" pos:end="71:36">(<argument pos:start="69:16" pos:end="69:74"><expr pos:start="69:16" pos:end="69:74"><literal type="string" pos:start="69:16" pos:end="69:55">"Trying to read invalid spr %d %03x at "</literal> <name pos:start="69:57" pos:end="69:69">TARGET_FMT_lx</name> <literal type="string" pos:start="69:71" pos:end="69:74">"\n"</literal></expr></argument>,

               <argument pos:start="71:16" pos:end="71:19"><expr pos:start="71:16" pos:end="71:19"><name pos:start="71:16" pos:end="71:19">sprn</name></expr></argument>, <argument pos:start="71:22" pos:end="71:25"><expr pos:start="71:22" pos:end="71:25"><name pos:start="71:22" pos:end="71:25">sprn</name></expr></argument>, <argument pos:start="71:28" pos:end="71:35"><expr pos:start="71:28" pos:end="71:35"><name pos:start="71:28" pos:end="71:35"><name pos:start="71:28" pos:end="71:30">ctx</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:35">nip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:57"><expr pos:start="73:9" pos:end="73:56"><call pos:start="73:9" pos:end="73:56"><name pos:start="73:9" pos:end="73:27">gen_inval_exception</name><argument_list pos:start="73:28" pos:end="73:56">(<argument pos:start="73:29" pos:end="73:31"><expr pos:start="73:29" pos:end="73:31"><name pos:start="73:29" pos:end="73:31">ctx</name></expr></argument>, <argument pos:start="73:34" pos:end="73:55"><expr pos:start="73:34" pos:end="73:55"><name pos:start="73:34" pos:end="73:55">POWERPC_EXCP_INVAL_SPR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
