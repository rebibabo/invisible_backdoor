<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19755.c" pos:tabs="8"><function pos:start="1:1" pos:end="305:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">vp3_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="305:1">{<block_content pos:start="9:5" pos:end="303:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:43"><decl pos:start="13:5" pos:end="13:42"><type pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:20">Vp3DecodeContext</name> <modifier pos:start="13:22" pos:end="13:22">*</modifier></type><name pos:start="13:23" pos:end="13:23">s</name> <init pos:start="13:25" pos:end="13:42">= <expr pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:42"><name pos:start="13:27" pos:end="13:31">avctx</name><operator pos:start="13:32" pos:end="13:33">-&gt;</operator><name pos:start="13:34" pos:end="13:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:17">GetBitContext</name></type> <name pos:start="15:19" pos:end="15:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:27"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:14"><specifier pos:start="17:5" pos:end="17:10">static</specifier> <name pos:start="17:12" pos:end="17:14">int</name></type> <name pos:start="17:16" pos:end="17:22">counter</name> <init pos:start="17:24" pos:end="17:26">= <expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:42"><expr pos:start="23:5" pos:end="23:41"><call pos:start="23:5" pos:end="23:41"><name pos:start="23:5" pos:end="23:17">init_get_bits</name><argument_list pos:start="23:18" pos:end="23:41">(<argument pos:start="23:19" pos:end="23:21"><expr pos:start="23:19" pos:end="23:21"><operator pos:start="23:19" pos:end="23:19">&amp;</operator><name pos:start="23:20" pos:end="23:21">gb</name></expr></argument>, <argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">buf</name></expr></argument>, <argument pos:start="23:29" pos:end="23:40"><expr pos:start="23:29" pos:end="23:40"><name pos:start="23:29" pos:end="23:36">buf_size</name> <operator pos:start="23:38" pos:end="23:38">*</operator> <literal type="number" pos:start="23:40" pos:end="23:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="35:5"><if pos:start="27:5" pos:end="35:5">if <condition pos:start="27:8" pos:end="27:36">(<expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:17"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:17">theora</name></name> <operator pos:start="27:19" pos:end="27:20">&amp;&amp;</operator> <call pos:start="27:22" pos:end="27:35"><name pos:start="27:22" pos:end="27:30">get_bits1</name><argument_list pos:start="27:31" pos:end="27:35">(<argument pos:start="27:32" pos:end="27:34"><expr pos:start="27:32" pos:end="27:34"><operator pos:start="27:32" pos:end="27:32">&amp;</operator><name pos:start="27:33" pos:end="27:34">gb</name></expr></argument>)</argument_list></call></expr>)</condition>

    <block pos:start="29:5" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:89"><expr pos:start="31:9" pos:end="31:88"><call pos:start="31:9" pos:end="31:88"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:88">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:37" pos:end="31:87"><expr pos:start="31:37" pos:end="31:87"><literal type="string" pos:start="31:37" pos:end="31:87">"Header packet passed to frame decoder, skipping\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:34"><expr pos:start="39:5" pos:end="39:33"><name pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:15">keyframe</name></name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">!</operator><call pos:start="39:20" pos:end="39:33"><name pos:start="39:20" pos:end="39:28">get_bits1</name><argument_list pos:start="39:29" pos:end="39:33">(<argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><operator pos:start="39:30" pos:end="39:30">&amp;</operator><name pos:start="39:31" pos:end="39:32">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="41:5" pos:end="43:26"><if pos:start="41:5" pos:end="43:26">if <condition pos:start="41:8" pos:end="41:19">(<expr pos:start="41:9" pos:end="41:18"><operator pos:start="41:9" pos:end="41:9">!</operator><name pos:start="41:10" pos:end="41:18"><name pos:start="41:10" pos:end="41:10">s</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:18">theora</name></name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:26"><block_content pos:start="43:9" pos:end="43:26">

        <expr_stmt pos:start="43:9" pos:end="43:26"><expr pos:start="43:9" pos:end="43:25"><call pos:start="43:9" pos:end="43:25"><name pos:start="43:9" pos:end="43:17">skip_bits</name><argument_list pos:start="43:18" pos:end="43:25">(<argument pos:start="43:19" pos:end="43:21"><expr pos:start="43:19" pos:end="43:21"><operator pos:start="43:19" pos:end="43:19">&amp;</operator><name pos:start="43:20" pos:end="43:21">gb</name></expr></argument>, <argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for pos:start="45:5" pos:end="47:35">for <control pos:start="45:9" pos:end="45:27">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:22"><expr pos:start="45:17" pos:end="45:21"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <literal type="number" pos:start="45:21" pos:end="45:21">3</literal></expr>;</condition> <incr pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:24">i</name><operator pos:start="45:25" pos:end="45:26">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:9" pos:end="47:35"><block_content pos:start="47:9" pos:end="47:35">

        <expr_stmt pos:start="47:9" pos:end="47:35"><expr pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:19">last_qps</name><index pos:start="47:20" pos:end="47:22">[<expr pos:start="47:21" pos:end="47:21"><name pos:start="47:21" pos:end="47:21">i</name></expr>]</index></name> <operator pos:start="47:24" pos:end="47:24">=</operator> <name pos:start="47:26" pos:end="47:34"><name pos:start="47:26" pos:end="47:26">s</name><operator pos:start="47:27" pos:end="47:28">-&gt;</operator><name pos:start="47:29" pos:end="47:31">qps</name><index pos:start="47:32" pos:end="47:34">[<expr pos:start="47:33" pos:end="47:33"><name pos:start="47:33" pos:end="47:33">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="51:5" pos:end="51:14"><expr pos:start="51:5" pos:end="51:13"><name pos:start="51:5" pos:end="51:11"><name pos:start="51:5" pos:end="51:5">s</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:11">nqps</name></name><operator pos:start="51:12" pos:end="51:12">=</operator><literal type="number" pos:start="51:13" pos:end="51:13">0</literal></expr>;</expr_stmt>

    <do pos:start="53:5" pos:end="57:66">do<block pos:start="53:7" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:44">

        <expr_stmt pos:start="55:9" pos:end="55:44"><expr pos:start="55:9" pos:end="55:43"><name pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:14">qps</name><index pos:start="55:15" pos:end="55:25">[<expr pos:start="55:16" pos:end="55:24"><name pos:start="55:16" pos:end="55:22"><name pos:start="55:16" pos:end="55:16">s</name><operator pos:start="55:17" pos:end="55:18">-&gt;</operator><name pos:start="55:19" pos:end="55:22">nqps</name></name><operator pos:start="55:23" pos:end="55:24">++</operator></expr>]</index></name><operator pos:start="55:26" pos:end="55:26">=</operator> <call pos:start="55:28" pos:end="55:43"><name pos:start="55:28" pos:end="55:35">get_bits</name><argument_list pos:start="55:36" pos:end="55:43">(<argument pos:start="55:37" pos:end="55:39"><expr pos:start="55:37" pos:end="55:39"><operator pos:start="55:37" pos:end="55:37">&amp;</operator><name pos:start="55:38" pos:end="55:39">gb</name></expr></argument>, <argument pos:start="55:42" pos:end="55:42"><expr pos:start="55:42" pos:end="55:42"><literal type="number" pos:start="55:42" pos:end="55:42">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block> while<condition pos:start="57:12" pos:end="57:65">(<expr pos:start="57:13" pos:end="57:64"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">theora</name></name> <operator pos:start="57:23" pos:end="57:24">&gt;=</operator> <literal type="number" pos:start="57:26" pos:end="57:33">0x030200</literal> <operator pos:start="57:35" pos:end="57:36">&amp;&amp;</operator> <name pos:start="57:38" pos:end="57:44"><name pos:start="57:38" pos:end="57:38">s</name><operator pos:start="57:39" pos:end="57:40">-&gt;</operator><name pos:start="57:41" pos:end="57:44">nqps</name></name><operator pos:start="57:45" pos:end="57:45">&lt;</operator><literal type="number" pos:start="57:46" pos:end="57:46">3</literal> <operator pos:start="57:48" pos:end="57:49">&amp;&amp;</operator> <call pos:start="57:51" pos:end="57:64"><name pos:start="57:51" pos:end="57:59">get_bits1</name><argument_list pos:start="57:60" pos:end="57:64">(<argument pos:start="57:61" pos:end="57:63"><expr pos:start="57:61" pos:end="57:63"><operator pos:start="57:61" pos:end="57:61">&amp;</operator><name pos:start="57:62" pos:end="57:63">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <for pos:start="59:5" pos:end="61:23">for <control pos:start="59:9" pos:end="59:33">(<init pos:start="59:10" pos:end="59:21"><expr pos:start="59:10" pos:end="59:20"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:20"><name pos:start="59:14" pos:end="59:14">s</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:20">nqps</name></name></expr>;</init> <condition pos:start="59:23" pos:end="59:28"><expr pos:start="59:23" pos:end="59:27"><name pos:start="59:23" pos:end="59:23">i</name> <operator pos:start="59:25" pos:end="59:25">&lt;</operator> <literal type="number" pos:start="59:27" pos:end="59:27">3</literal></expr>;</condition> <incr pos:start="59:30" pos:end="59:32"><expr pos:start="59:30" pos:end="59:32"><name pos:start="59:30" pos:end="59:30">i</name><operator pos:start="59:31" pos:end="59:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="61:9" pos:end="61:23"><block_content pos:start="61:9" pos:end="61:23">

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:17"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:14">qps</name><index pos:start="61:15" pos:end="61:17">[<expr pos:start="61:16" pos:end="61:16"><name pos:start="61:16" pos:end="61:16">i</name></expr>]</index></name> <operator pos:start="61:19" pos:end="61:19">=</operator> <operator pos:start="61:21" pos:end="61:21">-</operator><literal type="number" pos:start="61:22" pos:end="61:22">1</literal></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="65:5" pos:end="69:54"><if pos:start="65:5" pos:end="69:54">if <condition pos:start="65:8" pos:end="65:45">(<expr pos:start="65:9" pos:end="65:44"><name pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:16">avctx</name><operator pos:start="65:17" pos:end="65:18">-&gt;</operator><name pos:start="65:19" pos:end="65:23">debug</name></name> <operator pos:start="65:25" pos:end="65:25">&amp;</operator> <name pos:start="65:27" pos:end="65:44">FF_DEBUG_PICT_INFO</name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="69:54"><block_content pos:start="67:9" pos:end="69:54">

        <expr_stmt pos:start="67:9" pos:end="69:54"><expr pos:start="67:9" pos:end="69:53"><call pos:start="67:9" pos:end="69:53"><name pos:start="67:9" pos:end="67:14">av_log</name><argument_list pos:start="67:15" pos:end="69:53">(<argument pos:start="67:16" pos:end="67:23"><expr pos:start="67:16" pos:end="67:23"><name pos:start="67:16" pos:end="67:23"><name pos:start="67:16" pos:end="67:16">s</name><operator pos:start="67:17" pos:end="67:18">-&gt;</operator><name pos:start="67:19" pos:end="67:23">avctx</name></name></expr></argument>, <argument pos:start="67:26" pos:end="67:36"><expr pos:start="67:26" pos:end="67:36"><name pos:start="67:26" pos:end="67:36">AV_LOG_INFO</name></expr></argument>, <argument pos:start="67:39" pos:end="67:72"><expr pos:start="67:39" pos:end="67:72"><literal type="string" pos:start="67:39" pos:end="67:72">" VP3 %sframe #%d: Q index = %d\n"</literal></expr></argument>,

            <argument pos:start="69:13" pos:end="69:32"><expr pos:start="69:13" pos:end="69:32"><ternary pos:start="69:13" pos:end="69:32"><condition pos:start="69:13" pos:end="69:24"><expr pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:23"><name pos:start="69:13" pos:end="69:13">s</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:23">keyframe</name></name></expr>?</condition><then pos:start="69:25" pos:end="69:29"><expr pos:start="69:25" pos:end="69:29"><literal type="string" pos:start="69:25" pos:end="69:29">"key"</literal></expr></then><else pos:start="69:30" pos:end="69:32">:<expr pos:start="69:31" pos:end="69:32"><literal type="string" pos:start="69:31" pos:end="69:32">""</literal></expr></else></ternary></expr></argument>, <argument pos:start="69:35" pos:end="69:41"><expr pos:start="69:35" pos:end="69:41"><name pos:start="69:35" pos:end="69:41">counter</name></expr></argument>, <argument pos:start="69:44" pos:end="69:52"><expr pos:start="69:44" pos:end="69:52"><name pos:start="69:44" pos:end="69:52"><name pos:start="69:44" pos:end="69:44">s</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:49">qps</name><index pos:start="69:50" pos:end="69:52">[<expr pos:start="69:51" pos:end="69:51"><literal type="number" pos:start="69:51" pos:end="69:51">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:14"><expr pos:start="71:5" pos:end="71:13"><name pos:start="71:5" pos:end="71:11">counter</name><operator pos:start="71:12" pos:end="71:13">++</operator></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="77:28"><if pos:start="75:5" pos:end="77:28">if <condition pos:start="75:8" pos:end="75:36">(<expr pos:start="75:9" pos:end="75:35"><name pos:start="75:9" pos:end="75:17"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">qps</name><index pos:start="75:15" pos:end="75:17">[<expr pos:start="75:16" pos:end="75:16"><literal type="number" pos:start="75:16" pos:end="75:16">0</literal></expr>]</index></name> <operator pos:start="75:19" pos:end="75:20">!=</operator> <name pos:start="75:22" pos:end="75:35"><name pos:start="75:22" pos:end="75:22">s</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:32">last_qps</name><index pos:start="75:33" pos:end="75:35">[<expr pos:start="75:34" pos:end="75:34"><literal type="number" pos:start="75:34" pos:end="75:34">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="77:9" pos:end="77:28"><block_content pos:start="77:9" pos:end="77:28">

        <expr_stmt pos:start="77:9" pos:end="77:28"><expr pos:start="77:9" pos:end="77:27"><call pos:start="77:9" pos:end="77:27"><name pos:start="77:9" pos:end="77:24">init_loop_filter</name><argument_list pos:start="77:25" pos:end="77:27">(<argument pos:start="77:26" pos:end="77:26"><expr pos:start="77:26" pos:end="77:26"><name pos:start="77:26" pos:end="77:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="81:5" pos:end="89:35">for <control pos:start="81:9" pos:end="81:33">(<init pos:start="81:10" pos:end="81:15"><expr pos:start="81:10" pos:end="81:14"><name pos:start="81:10" pos:end="81:10">i</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <literal type="number" pos:start="81:14" pos:end="81:14">0</literal></expr>;</init> <condition pos:start="81:17" pos:end="81:28"><expr pos:start="81:17" pos:end="81:27"><name pos:start="81:17" pos:end="81:17">i</name> <operator pos:start="81:19" pos:end="81:19">&lt;</operator> <name pos:start="81:21" pos:end="81:27"><name pos:start="81:21" pos:end="81:21">s</name><operator pos:start="81:22" pos:end="81:23">-&gt;</operator><name pos:start="81:24" pos:end="81:27">nqps</name></name></expr>;</condition> <incr pos:start="81:30" pos:end="81:32"><expr pos:start="81:30" pos:end="81:32"><name pos:start="81:30" pos:end="81:30">i</name><operator pos:start="81:31" pos:end="81:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="87:9" pos:end="89:35"><block_content pos:start="87:9" pos:end="89:35">

        <comment type="line" pos:start="83:9" pos:end="83:68">// reinit all dequantizers if the first one changed, because</comment>

        <comment type="line" pos:start="85:9" pos:end="85:70">// the DC of the first quantizer must be used for all matrices</comment>

        <if_stmt pos:start="87:9" pos:end="89:35"><if pos:start="87:9" pos:end="89:35">if <condition pos:start="87:12" pos:end="87:71">(<expr pos:start="87:13" pos:end="87:70"><name pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:13">s</name><operator pos:start="87:14" pos:end="87:15">-&gt;</operator><name pos:start="87:16" pos:end="87:18">qps</name><index pos:start="87:19" pos:end="87:21">[<expr pos:start="87:20" pos:end="87:20"><name pos:start="87:20" pos:end="87:20">i</name></expr>]</index></name> <operator pos:start="87:23" pos:end="87:24">!=</operator> <name pos:start="87:26" pos:end="87:39"><name pos:start="87:26" pos:end="87:26">s</name><operator pos:start="87:27" pos:end="87:28">-&gt;</operator><name pos:start="87:29" pos:end="87:36">last_qps</name><index pos:start="87:37" pos:end="87:39">[<expr pos:start="87:38" pos:end="87:38"><name pos:start="87:38" pos:end="87:38">i</name></expr>]</index></name> <operator pos:start="87:41" pos:end="87:42">||</operator> <name pos:start="87:44" pos:end="87:52"><name pos:start="87:44" pos:end="87:44">s</name><operator pos:start="87:45" pos:end="87:46">-&gt;</operator><name pos:start="87:47" pos:end="87:49">qps</name><index pos:start="87:50" pos:end="87:52">[<expr pos:start="87:51" pos:end="87:51"><literal type="number" pos:start="87:51" pos:end="87:51">0</literal></expr>]</index></name> <operator pos:start="87:54" pos:end="87:55">!=</operator> <name pos:start="87:57" pos:end="87:70"><name pos:start="87:57" pos:end="87:57">s</name><operator pos:start="87:58" pos:end="87:59">-&gt;</operator><name pos:start="87:60" pos:end="87:67">last_qps</name><index pos:start="87:68" pos:end="87:70">[<expr pos:start="87:69" pos:end="87:69"><literal type="number" pos:start="87:69" pos:end="87:69">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="89:13" pos:end="89:35"><block_content pos:start="89:13" pos:end="89:35">

            <expr_stmt pos:start="89:13" pos:end="89:35"><expr pos:start="89:13" pos:end="89:34"><call pos:start="89:13" pos:end="89:34"><name pos:start="89:13" pos:end="89:28">init_dequantizer</name><argument_list pos:start="89:29" pos:end="89:34">(<argument pos:start="89:30" pos:end="89:30"><expr pos:start="89:30" pos:end="89:30"><name pos:start="89:30" pos:end="89:30">s</name></expr></argument>, <argument pos:start="89:33" pos:end="89:33"><expr pos:start="89:33" pos:end="89:33"><name pos:start="89:33" pos:end="89:33">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



    <if_stmt pos:start="93:5" pos:end="95:24"><if pos:start="93:5" pos:end="95:24">if <condition pos:start="93:8" pos:end="93:62">(<expr pos:start="93:9" pos:end="93:61"><name pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:13">avctx</name><operator pos:start="93:14" pos:end="93:15">-&gt;</operator><name pos:start="93:16" pos:end="93:25">skip_frame</name></name> <operator pos:start="93:27" pos:end="93:28">&gt;=</operator> <name pos:start="93:30" pos:end="93:45">AVDISCARD_NONKEY</name> <operator pos:start="93:47" pos:end="93:48">&amp;&amp;</operator> <operator pos:start="93:50" pos:end="93:50">!</operator><name pos:start="93:51" pos:end="93:61"><name pos:start="93:51" pos:end="93:51">s</name><operator pos:start="93:52" pos:end="93:53">-&gt;</operator><name pos:start="93:54" pos:end="93:61">keyframe</name></name></expr>)</condition><block type="pseudo" pos:start="95:9" pos:end="95:24"><block_content pos:start="95:9" pos:end="95:24">

        <return pos:start="95:9" pos:end="95:24">return <expr pos:start="95:16" pos:end="95:23"><name pos:start="95:16" pos:end="95:23">buf_size</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="99:5" pos:end="211:5"><if pos:start="99:5" pos:end="189:5">if <condition pos:start="99:8" pos:end="99:20">(<expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:9">s</name><operator pos:start="99:10" pos:end="99:11">-&gt;</operator><name pos:start="99:12" pos:end="99:19">keyframe</name></name></expr>)</condition> <block pos:start="99:22" pos:end="189:5">{<block_content pos:start="101:9" pos:end="187:9">

        <if_stmt pos:start="101:9" pos:end="121:9"><if pos:start="101:9" pos:end="121:9">if <condition pos:start="101:12" pos:end="101:23">(<expr pos:start="101:13" pos:end="101:22"><operator pos:start="101:13" pos:end="101:13">!</operator><name pos:start="101:14" pos:end="101:22"><name pos:start="101:14" pos:end="101:14">s</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:22">theora</name></name></expr>)</condition>

        <block pos:start="103:9" pos:end="121:9">{<block_content pos:start="105:13" pos:end="119:13">

            <expr_stmt pos:start="105:13" pos:end="105:30"><expr pos:start="105:13" pos:end="105:29"><call pos:start="105:13" pos:end="105:29"><name pos:start="105:13" pos:end="105:21">skip_bits</name><argument_list pos:start="105:22" pos:end="105:29">(<argument pos:start="105:23" pos:end="105:25"><expr pos:start="105:23" pos:end="105:25"><operator pos:start="105:23" pos:end="105:23">&amp;</operator><name pos:start="105:24" pos:end="105:25">gb</name></expr></argument>, <argument pos:start="105:28" pos:end="105:28"><expr pos:start="105:28" pos:end="105:28"><literal type="number" pos:start="105:28" pos:end="105:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="105:32" pos:end="105:47">/* width code */</comment>

            <expr_stmt pos:start="107:13" pos:end="107:30"><expr pos:start="107:13" pos:end="107:29"><call pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:21">skip_bits</name><argument_list pos:start="107:22" pos:end="107:29">(<argument pos:start="107:23" pos:end="107:25"><expr pos:start="107:23" pos:end="107:25"><operator pos:start="107:23" pos:end="107:23">&amp;</operator><name pos:start="107:24" pos:end="107:25">gb</name></expr></argument>, <argument pos:start="107:28" pos:end="107:28"><expr pos:start="107:28" pos:end="107:28"><literal type="number" pos:start="107:28" pos:end="107:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="107:32" pos:end="107:48">/* height code */</comment>

            <if_stmt pos:start="109:13" pos:end="119:13"><if pos:start="109:13" pos:end="119:13">if <condition pos:start="109:16" pos:end="109:27">(<expr pos:start="109:17" pos:end="109:26"><name pos:start="109:17" pos:end="109:26"><name pos:start="109:17" pos:end="109:17">s</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:26">version</name></name></expr>)</condition>

            <block pos:start="111:13" pos:end="119:13">{<block_content pos:start="113:17" pos:end="117:83">

                <expr_stmt pos:start="113:17" pos:end="113:46"><expr pos:start="113:17" pos:end="113:45"><name pos:start="113:17" pos:end="113:26"><name pos:start="113:17" pos:end="113:17">s</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:26">version</name></name> <operator pos:start="113:28" pos:end="113:28">=</operator> <call pos:start="113:30" pos:end="113:45"><name pos:start="113:30" pos:end="113:37">get_bits</name><argument_list pos:start="113:38" pos:end="113:45">(<argument pos:start="113:39" pos:end="113:41"><expr pos:start="113:39" pos:end="113:41"><operator pos:start="113:39" pos:end="113:39">&amp;</operator><name pos:start="113:40" pos:end="113:41">gb</name></expr></argument>, <argument pos:start="113:44" pos:end="113:44"><expr pos:start="113:44" pos:end="113:44"><literal type="number" pos:start="113:44" pos:end="113:44">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="115:17" pos:end="117:83"><if pos:start="115:17" pos:end="117:83">if <condition pos:start="115:20" pos:end="115:33">(<expr pos:start="115:21" pos:end="115:32"><name pos:start="115:21" pos:end="115:27">counter</name> <operator pos:start="115:29" pos:end="115:30">==</operator> <literal type="number" pos:start="115:32" pos:end="115:32">1</literal></expr>)</condition><block type="pseudo" pos:start="117:21" pos:end="117:83"><block_content pos:start="117:21" pos:end="117:83">

                    <expr_stmt pos:start="117:21" pos:end="117:83"><expr pos:start="117:21" pos:end="117:82"><call pos:start="117:21" pos:end="117:82"><name pos:start="117:21" pos:end="117:26">av_log</name><argument_list pos:start="117:27" pos:end="117:82">(<argument pos:start="117:28" pos:end="117:35"><expr pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:35"><name pos:start="117:28" pos:end="117:28">s</name><operator pos:start="117:29" pos:end="117:30">-&gt;</operator><name pos:start="117:31" pos:end="117:35">avctx</name></name></expr></argument>, <argument pos:start="117:38" pos:end="117:49"><expr pos:start="117:38" pos:end="117:49"><name pos:start="117:38" pos:end="117:49">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="117:52" pos:end="117:69"><expr pos:start="117:52" pos:end="117:69"><literal type="string" pos:start="117:52" pos:end="117:69">"VP version: %d\n"</literal></expr></argument>, <argument pos:start="117:72" pos:end="117:81"><expr pos:start="117:72" pos:end="117:81"><name pos:start="117:72" pos:end="117:81"><name pos:start="117:72" pos:end="117:72">s</name><operator pos:start="117:73" pos:end="117:74">-&gt;</operator><name pos:start="117:75" pos:end="117:81">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="123:9" pos:end="133:9"><if pos:start="123:9" pos:end="133:9">if <condition pos:start="123:12" pos:end="123:36">(<expr pos:start="123:13" pos:end="123:35"><name pos:start="123:13" pos:end="123:22"><name pos:start="123:13" pos:end="123:13">s</name><operator pos:start="123:14" pos:end="123:15">-&gt;</operator><name pos:start="123:16" pos:end="123:22">version</name></name> <operator pos:start="123:24" pos:end="123:25">||</operator> <name pos:start="123:27" pos:end="123:35"><name pos:start="123:27" pos:end="123:27">s</name><operator pos:start="123:28" pos:end="123:29">-&gt;</operator><name pos:start="123:30" pos:end="123:35">theora</name></name></expr>)</condition>

        <block pos:start="125:9" pos:end="133:9">{<block_content pos:start="127:17" pos:end="131:30">

                <if_stmt pos:start="127:17" pos:end="129:100"><if pos:start="127:17" pos:end="129:100">if <condition pos:start="127:20" pos:end="127:35">(<expr pos:start="127:21" pos:end="127:34"><call pos:start="127:21" pos:end="127:34"><name pos:start="127:21" pos:end="127:29">get_bits1</name><argument_list pos:start="127:30" pos:end="127:34">(<argument pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><operator pos:start="127:31" pos:end="127:31">&amp;</operator><name pos:start="127:32" pos:end="127:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:100"><block_content pos:start="129:21" pos:end="129:100">

                    <expr_stmt pos:start="129:21" pos:end="129:100"><expr pos:start="129:21" pos:end="129:99"><call pos:start="129:21" pos:end="129:99"><name pos:start="129:21" pos:end="129:26">av_log</name><argument_list pos:start="129:27" pos:end="129:99">(<argument pos:start="129:28" pos:end="129:35"><expr pos:start="129:28" pos:end="129:35"><name pos:start="129:28" pos:end="129:35"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:35">avctx</name></name></expr></argument>, <argument pos:start="129:38" pos:end="129:49"><expr pos:start="129:38" pos:end="129:49"><name pos:start="129:38" pos:end="129:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:52" pos:end="129:98"><expr pos:start="129:52" pos:end="129:98"><literal type="string" pos:start="129:52" pos:end="129:98">"Warning, unsupported keyframe coding type?!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:30"><expr pos:start="131:13" pos:end="131:29"><call pos:start="131:13" pos:end="131:29"><name pos:start="131:13" pos:end="131:21">skip_bits</name><argument_list pos:start="131:22" pos:end="131:29">(<argument pos:start="131:23" pos:end="131:25"><expr pos:start="131:23" pos:end="131:25"><operator pos:start="131:23" pos:end="131:23">&amp;</operator><name pos:start="131:24" pos:end="131:25">gb</name></expr></argument>, <argument pos:start="131:28" pos:end="131:28"><expr pos:start="131:28" pos:end="131:28"><literal type="number" pos:start="131:28" pos:end="131:28">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="131:32" pos:end="131:46">/* reserved? */</comment>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="137:9" pos:end="155:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:61">(<expr pos:start="137:13" pos:end="137:60"><name pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:13">s</name><operator pos:start="137:14" pos:end="137:15">-&gt;</operator><name pos:start="137:16" pos:end="137:25">last_frame</name><operator pos:start="137:26" pos:end="137:26">.</operator><name pos:start="137:27" pos:end="137:30">data</name><index pos:start="137:31" pos:end="137:33">[<expr pos:start="137:32" pos:end="137:32"><literal type="number" pos:start="137:32" pos:end="137:32">0</literal></expr>]</index></name> <operator pos:start="137:35" pos:end="137:36">==</operator> <name pos:start="137:38" pos:end="137:60"><name pos:start="137:38" pos:end="137:38">s</name><operator pos:start="137:39" pos:end="137:40">-&gt;</operator><name pos:start="137:41" pos:end="137:52">golden_frame</name><operator pos:start="137:53" pos:end="137:53">.</operator><name pos:start="137:54" pos:end="137:57">data</name><index pos:start="137:58" pos:end="137:60">[<expr pos:start="137:59" pos:end="137:59"><literal type="number" pos:start="137:59" pos:end="137:59">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="137:63" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:43">

            <if_stmt pos:start="139:13" pos:end="141:63"><if pos:start="139:13" pos:end="141:63">if <condition pos:start="139:16" pos:end="139:40">(<expr pos:start="139:17" pos:end="139:39"><name pos:start="139:17" pos:end="139:39"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:31">golden_frame</name><operator pos:start="139:32" pos:end="139:32">.</operator><name pos:start="139:33" pos:end="139:36">data</name><index pos:start="139:37" pos:end="139:39">[<expr pos:start="139:38" pos:end="139:38"><literal type="number" pos:start="139:38" pos:end="139:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="141:17" pos:end="141:63"><block_content pos:start="141:17" pos:end="141:63">

                <expr_stmt pos:start="141:17" pos:end="141:63"><expr pos:start="141:17" pos:end="141:62"><call pos:start="141:17" pos:end="141:62"><name pos:start="141:17" pos:end="141:37"><name pos:start="141:17" pos:end="141:21">avctx</name><operator pos:start="141:22" pos:end="141:23">-&gt;</operator><name pos:start="141:24" pos:end="141:37">release_buffer</name></name><argument_list pos:start="141:38" pos:end="141:62">(<argument pos:start="141:39" pos:end="141:43"><expr pos:start="141:39" pos:end="141:43"><name pos:start="141:39" pos:end="141:43">avctx</name></expr></argument>, <argument pos:start="141:46" pos:end="141:61"><expr pos:start="141:46" pos:end="141:61"><operator pos:start="141:46" pos:end="141:46">&amp;</operator><name pos:start="141:47" pos:end="141:61"><name pos:start="141:47" pos:end="141:47">s</name><operator pos:start="141:48" pos:end="141:49">-&gt;</operator><name pos:start="141:50" pos:end="141:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:43"><expr pos:start="143:13" pos:end="143:42"><name pos:start="143:13" pos:end="143:25"><name pos:start="143:13" pos:end="143:13">s</name><operator pos:start="143:14" pos:end="143:15">-&gt;</operator><name pos:start="143:16" pos:end="143:25">last_frame</name></name><operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:42"><name pos:start="143:28" pos:end="143:28">s</name><operator pos:start="143:29" pos:end="143:30">-&gt;</operator><name pos:start="143:31" pos:end="143:42">golden_frame</name></name></expr>;</expr_stmt> <comment type="block" pos:start="143:45" pos:end="143:104">/* ensure that we catch any access to this released frame */</comment>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="155:9">else <block pos:start="145:16" pos:end="155:9">{<block_content pos:start="147:13" pos:end="153:61">

            <if_stmt pos:start="147:13" pos:end="149:63"><if pos:start="147:13" pos:end="149:63">if <condition pos:start="147:16" pos:end="147:40">(<expr pos:start="147:17" pos:end="147:39"><name pos:start="147:17" pos:end="147:39"><name pos:start="147:17" pos:end="147:17">s</name><operator pos:start="147:18" pos:end="147:19">-&gt;</operator><name pos:start="147:20" pos:end="147:31">golden_frame</name><operator pos:start="147:32" pos:end="147:32">.</operator><name pos:start="147:33" pos:end="147:36">data</name><index pos:start="147:37" pos:end="147:39">[<expr pos:start="147:38" pos:end="147:38"><literal type="number" pos:start="147:38" pos:end="147:38">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="149:17" pos:end="149:63"><block_content pos:start="149:17" pos:end="149:63">

                <expr_stmt pos:start="149:17" pos:end="149:63"><expr pos:start="149:17" pos:end="149:62"><call pos:start="149:17" pos:end="149:62"><name pos:start="149:17" pos:end="149:37"><name pos:start="149:17" pos:end="149:21">avctx</name><operator pos:start="149:22" pos:end="149:23">-&gt;</operator><name pos:start="149:24" pos:end="149:37">release_buffer</name></name><argument_list pos:start="149:38" pos:end="149:62">(<argument pos:start="149:39" pos:end="149:43"><expr pos:start="149:39" pos:end="149:43"><name pos:start="149:39" pos:end="149:43">avctx</name></expr></argument>, <argument pos:start="149:46" pos:end="149:61"><expr pos:start="149:46" pos:end="149:61"><operator pos:start="149:46" pos:end="149:46">&amp;</operator><name pos:start="149:47" pos:end="149:61"><name pos:start="149:47" pos:end="149:47">s</name><operator pos:start="149:48" pos:end="149:49">-&gt;</operator><name pos:start="149:50" pos:end="149:61">golden_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="151:13" pos:end="153:61"><if pos:start="151:13" pos:end="153:61">if <condition pos:start="151:16" pos:end="151:38">(<expr pos:start="151:17" pos:end="151:37"><name pos:start="151:17" pos:end="151:37"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:29">last_frame</name><operator pos:start="151:30" pos:end="151:30">.</operator><name pos:start="151:31" pos:end="151:34">data</name><index pos:start="151:35" pos:end="151:37">[<expr pos:start="151:36" pos:end="151:36"><literal type="number" pos:start="151:36" pos:end="151:36">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:61"><block_content pos:start="153:17" pos:end="153:61">

                <expr_stmt pos:start="153:17" pos:end="153:61"><expr pos:start="153:17" pos:end="153:60"><call pos:start="153:17" pos:end="153:60"><name pos:start="153:17" pos:end="153:37"><name pos:start="153:17" pos:end="153:21">avctx</name><operator pos:start="153:22" pos:end="153:23">-&gt;</operator><name pos:start="153:24" pos:end="153:37">release_buffer</name></name><argument_list pos:start="153:38" pos:end="153:60">(<argument pos:start="153:39" pos:end="153:43"><expr pos:start="153:39" pos:end="153:43"><name pos:start="153:39" pos:end="153:43">avctx</name></expr></argument>, <argument pos:start="153:46" pos:end="153:59"><expr pos:start="153:46" pos:end="153:59"><operator pos:start="153:46" pos:end="153:46">&amp;</operator><name pos:start="153:47" pos:end="153:59"><name pos:start="153:47" pos:end="153:47">s</name><operator pos:start="153:48" pos:end="153:49">-&gt;</operator><name pos:start="153:50" pos:end="153:59">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="159:9" pos:end="159:38"><expr pos:start="159:9" pos:end="159:37"><name pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:9">s</name><operator pos:start="159:10" pos:end="159:11">-&gt;</operator><name pos:start="159:12" pos:end="159:23">golden_frame</name><operator pos:start="159:24" pos:end="159:24">.</operator><name pos:start="159:25" pos:end="159:33">reference</name></name> <operator pos:start="159:35" pos:end="159:35">=</operator> <literal type="number" pos:start="159:37" pos:end="159:37">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="167:9"><if pos:start="161:9" pos:end="167:9">if<condition pos:start="161:11" pos:end="161:58">(<expr pos:start="161:12" pos:end="161:57"><call pos:start="161:12" pos:end="161:53"><name pos:start="161:12" pos:end="161:28"><name pos:start="161:12" pos:end="161:16">avctx</name><operator pos:start="161:17" pos:end="161:18">-&gt;</operator><name pos:start="161:19" pos:end="161:28">get_buffer</name></name><argument_list pos:start="161:29" pos:end="161:53">(<argument pos:start="161:30" pos:end="161:34"><expr pos:start="161:30" pos:end="161:34"><name pos:start="161:30" pos:end="161:34">avctx</name></expr></argument>, <argument pos:start="161:37" pos:end="161:52"><expr pos:start="161:37" pos:end="161:52"><operator pos:start="161:37" pos:end="161:37">&amp;</operator><name pos:start="161:38" pos:end="161:52"><name pos:start="161:38" pos:end="161:38">s</name><operator pos:start="161:39" pos:end="161:40">-&gt;</operator><name pos:start="161:41" pos:end="161:52">golden_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="161:55" pos:end="161:55">&lt;</operator> <literal type="number" pos:start="161:57" pos:end="161:57">0</literal></expr>)</condition> <block pos:start="161:60" pos:end="167:9">{<block_content pos:start="163:13" pos:end="165:22">

            <expr_stmt pos:start="163:13" pos:end="163:73"><expr pos:start="163:13" pos:end="163:72"><call pos:start="163:13" pos:end="163:72"><name pos:start="163:13" pos:end="163:18">av_log</name><argument_list pos:start="163:19" pos:end="163:72">(<argument pos:start="163:20" pos:end="163:27"><expr pos:start="163:20" pos:end="163:27"><name pos:start="163:20" pos:end="163:27"><name pos:start="163:20" pos:end="163:20">s</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:27">avctx</name></name></expr></argument>, <argument pos:start="163:30" pos:end="163:41"><expr pos:start="163:30" pos:end="163:41"><name pos:start="163:30" pos:end="163:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:44" pos:end="163:71"><expr pos:start="163:44" pos:end="163:71"><literal type="string" pos:start="163:44" pos:end="163:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="165:13" pos:end="165:22">return <expr pos:start="165:20" pos:end="165:21"><operator pos:start="165:20" pos:end="165:20">-</operator><literal type="number" pos:start="165:21" pos:end="165:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="171:9" pos:end="171:52">/* golden frame is also the current frame */</comment>

        <expr_stmt pos:start="173:9" pos:end="173:42"><expr pos:start="173:9" pos:end="173:41"><name pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:24">current_frame</name></name><operator pos:start="173:25" pos:end="173:25">=</operator> <name pos:start="173:27" pos:end="173:41"><name pos:start="173:27" pos:end="173:27">s</name><operator pos:start="173:28" pos:end="173:29">-&gt;</operator><name pos:start="173:30" pos:end="173:41">golden_frame</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="177:9" pos:end="177:49">/* time to figure out pixel addresses? */</comment>

        <if_stmt pos:start="179:9" pos:end="187:9"><if pos:start="179:9" pos:end="187:9">if <condition pos:start="179:12" pos:end="179:44">(<expr pos:start="179:13" pos:end="179:43"><operator pos:start="179:13" pos:end="179:13">!</operator><name pos:start="179:14" pos:end="179:43"><name pos:start="179:14" pos:end="179:14">s</name><operator pos:start="179:15" pos:end="179:16">-&gt;</operator><name pos:start="179:17" pos:end="179:43">pixel_addresses_initialized</name></name></expr>)</condition>

        <block pos:start="181:9" pos:end="187:9">{<block_content pos:start="183:13" pos:end="185:47">

            <expr_stmt pos:start="183:13" pos:end="183:45"><expr pos:start="183:13" pos:end="183:44"><call pos:start="183:13" pos:end="183:44"><name pos:start="183:13" pos:end="183:41">vp3_calculate_pixel_addresses</name><argument_list pos:start="183:42" pos:end="183:44">(<argument pos:start="183:43" pos:end="183:43"><expr pos:start="183:43" pos:end="183:43"><name pos:start="183:43" pos:end="183:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="185:13" pos:end="185:47"><expr pos:start="185:13" pos:end="185:46"><name pos:start="185:13" pos:end="185:42"><name pos:start="185:13" pos:end="185:13">s</name><operator pos:start="185:14" pos:end="185:15">-&gt;</operator><name pos:start="185:16" pos:end="185:42">pixel_addresses_initialized</name></name> <operator pos:start="185:44" pos:end="185:44">=</operator> <literal type="number" pos:start="185:46" pos:end="185:46">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="211:5">else <block pos:start="189:12" pos:end="211:5">{<block_content pos:start="193:9" pos:end="209:9">

        <comment type="block" pos:start="191:9" pos:end="191:42">/* allocate a new current frame */</comment>

        <expr_stmt pos:start="193:9" pos:end="193:39"><expr pos:start="193:9" pos:end="193:38"><name pos:start="193:9" pos:end="193:34"><name pos:start="193:9" pos:end="193:9">s</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:24">current_frame</name><operator pos:start="193:25" pos:end="193:25">.</operator><name pos:start="193:26" pos:end="193:34">reference</name></name> <operator pos:start="193:36" pos:end="193:36">=</operator> <literal type="number" pos:start="193:38" pos:end="193:38">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="195:9" pos:end="201:9"><if pos:start="195:9" pos:end="201:9">if <condition pos:start="195:12" pos:end="195:44">(<expr pos:start="195:13" pos:end="195:43"><operator pos:start="195:13" pos:end="195:13">!</operator><name pos:start="195:14" pos:end="195:43"><name pos:start="195:14" pos:end="195:14">s</name><operator pos:start="195:15" pos:end="195:16">-&gt;</operator><name pos:start="195:17" pos:end="195:43">pixel_addresses_initialized</name></name></expr>)</condition> <block pos:start="195:46" pos:end="201:9">{<block_content pos:start="197:13" pos:end="199:22">

            <expr_stmt pos:start="197:13" pos:end="197:80"><expr pos:start="197:13" pos:end="197:79"><call pos:start="197:13" pos:end="197:79"><name pos:start="197:13" pos:end="197:18">av_log</name><argument_list pos:start="197:19" pos:end="197:79">(<argument pos:start="197:20" pos:end="197:27"><expr pos:start="197:20" pos:end="197:27"><name pos:start="197:20" pos:end="197:27"><name pos:start="197:20" pos:end="197:20">s</name><operator pos:start="197:21" pos:end="197:22">-&gt;</operator><name pos:start="197:23" pos:end="197:27">avctx</name></name></expr></argument>, <argument pos:start="197:30" pos:end="197:41"><expr pos:start="197:30" pos:end="197:41"><name pos:start="197:30" pos:end="197:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:44" pos:end="197:78"><expr pos:start="197:44" pos:end="197:78"><literal type="string" pos:start="197:44" pos:end="197:78">"vp3: first frame not a keyframe\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="199:13" pos:end="199:22">return <expr pos:start="199:20" pos:end="199:21"><operator pos:start="199:20" pos:end="199:20">-</operator><literal type="number" pos:start="199:21" pos:end="199:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="203:9" pos:end="209:9"><if pos:start="203:9" pos:end="209:9">if<condition pos:start="203:11" pos:end="203:59">(<expr pos:start="203:12" pos:end="203:58"><call pos:start="203:12" pos:end="203:54"><name pos:start="203:12" pos:end="203:28"><name pos:start="203:12" pos:end="203:16">avctx</name><operator pos:start="203:17" pos:end="203:18">-&gt;</operator><name pos:start="203:19" pos:end="203:28">get_buffer</name></name><argument_list pos:start="203:29" pos:end="203:54">(<argument pos:start="203:30" pos:end="203:34"><expr pos:start="203:30" pos:end="203:34"><name pos:start="203:30" pos:end="203:34">avctx</name></expr></argument>, <argument pos:start="203:37" pos:end="203:53"><expr pos:start="203:37" pos:end="203:53"><operator pos:start="203:37" pos:end="203:37">&amp;</operator><name pos:start="203:38" pos:end="203:53"><name pos:start="203:38" pos:end="203:38">s</name><operator pos:start="203:39" pos:end="203:40">-&gt;</operator><name pos:start="203:41" pos:end="203:53">current_frame</name></name></expr></argument>)</argument_list></call> <operator pos:start="203:56" pos:end="203:56">&lt;</operator> <literal type="number" pos:start="203:58" pos:end="203:58">0</literal></expr>)</condition> <block pos:start="203:61" pos:end="209:9">{<block_content pos:start="205:13" pos:end="207:22">

            <expr_stmt pos:start="205:13" pos:end="205:73"><expr pos:start="205:13" pos:end="205:72"><call pos:start="205:13" pos:end="205:72"><name pos:start="205:13" pos:end="205:18">av_log</name><argument_list pos:start="205:19" pos:end="205:72">(<argument pos:start="205:20" pos:end="205:27"><expr pos:start="205:20" pos:end="205:27"><name pos:start="205:20" pos:end="205:27"><name pos:start="205:20" pos:end="205:20">s</name><operator pos:start="205:21" pos:end="205:22">-&gt;</operator><name pos:start="205:23" pos:end="205:27">avctx</name></name></expr></argument>, <argument pos:start="205:30" pos:end="205:41"><expr pos:start="205:30" pos:end="205:41"><name pos:start="205:30" pos:end="205:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="205:44" pos:end="205:71"><expr pos:start="205:44" pos:end="205:71"><literal type="string" pos:start="205:44" pos:end="205:71">"vp3: get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="207:13" pos:end="207:22">return <expr pos:start="207:20" pos:end="207:21"><operator pos:start="207:20" pos:end="207:20">-</operator><literal type="number" pos:start="207:21" pos:end="207:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="215:5" pos:end="215:51"><expr pos:start="215:5" pos:end="215:50"><name pos:start="215:5" pos:end="215:33"><name pos:start="215:5" pos:end="215:5">s</name><operator pos:start="215:6" pos:end="215:7">-&gt;</operator><name pos:start="215:8" pos:end="215:20">current_frame</name><operator pos:start="215:21" pos:end="215:21">.</operator><name pos:start="215:22" pos:end="215:33">qscale_table</name></name><operator pos:start="215:34" pos:end="215:34">=</operator> <name pos:start="215:36" pos:end="215:50"><name pos:start="215:36" pos:end="215:36">s</name><operator pos:start="215:37" pos:end="215:38">-&gt;</operator><name pos:start="215:39" pos:end="215:50">qscale_table</name></name></expr>;</expr_stmt> <comment type="line" pos:start="215:53" pos:end="215:98">//FIXME allocate individual tables per AVFrame</comment>

    <expr_stmt pos:start="217:5" pos:end="217:32"><expr pos:start="217:5" pos:end="217:31"><name pos:start="217:5" pos:end="217:28"><name pos:start="217:5" pos:end="217:5">s</name><operator pos:start="217:6" pos:end="217:7">-&gt;</operator><name pos:start="217:8" pos:end="217:20">current_frame</name><operator pos:start="217:21" pos:end="217:21">.</operator><name pos:start="217:22" pos:end="217:28">qstride</name></name><operator pos:start="217:29" pos:end="217:29">=</operator> <literal type="number" pos:start="217:31" pos:end="217:31">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="221:23"><expr pos:start="221:5" pos:end="221:22"><call pos:start="221:5" pos:end="221:22"><name pos:start="221:5" pos:end="221:14">init_frame</name><argument_list pos:start="221:15" pos:end="221:22">(<argument pos:start="221:16" pos:end="221:16"><expr pos:start="221:16" pos:end="221:16"><name pos:start="221:16" pos:end="221:16">s</name></expr></argument>, <argument pos:start="221:19" pos:end="221:21"><expr pos:start="221:19" pos:end="221:21"><operator pos:start="221:19" pos:end="221:19">&amp;</operator><name pos:start="221:20" pos:end="221:21">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:35">(<expr pos:start="225:9" pos:end="225:34"><call pos:start="225:9" pos:end="225:34"><name pos:start="225:9" pos:end="225:26">unpack_superblocks</name><argument_list pos:start="225:27" pos:end="225:34">(<argument pos:start="225:28" pos:end="225:28"><expr pos:start="225:28" pos:end="225:28"><name pos:start="225:28" pos:end="225:28">s</name></expr></argument>, <argument pos:start="225:31" pos:end="225:33"><expr pos:start="225:31" pos:end="225:33"><operator pos:start="225:31" pos:end="225:31">&amp;</operator><name pos:start="225:32" pos:end="225:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="225:36" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:18">

        <expr_stmt pos:start="227:9" pos:end="227:72"><expr pos:start="227:9" pos:end="227:71"><call pos:start="227:9" pos:end="227:71"><name pos:start="227:9" pos:end="227:14">av_log</name><argument_list pos:start="227:15" pos:end="227:71">(<argument pos:start="227:16" pos:end="227:23"><expr pos:start="227:16" pos:end="227:23"><name pos:start="227:16" pos:end="227:23"><name pos:start="227:16" pos:end="227:16">s</name><operator pos:start="227:17" pos:end="227:18">-&gt;</operator><name pos:start="227:19" pos:end="227:23">avctx</name></name></expr></argument>, <argument pos:start="227:26" pos:end="227:37"><expr pos:start="227:26" pos:end="227:37"><name pos:start="227:26" pos:end="227:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:40" pos:end="227:70"><expr pos:start="227:40" pos:end="227:70"><literal type="string" pos:start="227:40" pos:end="227:70">"error in unpack_superblocks\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="229:9" pos:end="229:18">return <expr pos:start="229:16" pos:end="229:17"><operator pos:start="229:16" pos:end="229:16">-</operator><literal type="number" pos:start="229:17" pos:end="229:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="233:5" pos:end="239:5"><if pos:start="233:5" pos:end="239:5">if <condition pos:start="233:8" pos:end="233:29">(<expr pos:start="233:9" pos:end="233:28"><call pos:start="233:9" pos:end="233:28"><name pos:start="233:9" pos:end="233:20">unpack_modes</name><argument_list pos:start="233:21" pos:end="233:28">(<argument pos:start="233:22" pos:end="233:22"><expr pos:start="233:22" pos:end="233:22"><name pos:start="233:22" pos:end="233:22">s</name></expr></argument>, <argument pos:start="233:25" pos:end="233:27"><expr pos:start="233:25" pos:end="233:27"><operator pos:start="233:25" pos:end="233:25">&amp;</operator><name pos:start="233:26" pos:end="233:27">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="233:30" pos:end="239:5">{<block_content pos:start="235:9" pos:end="237:18">

        <expr_stmt pos:start="235:9" pos:end="235:66"><expr pos:start="235:9" pos:end="235:65"><call pos:start="235:9" pos:end="235:65"><name pos:start="235:9" pos:end="235:14">av_log</name><argument_list pos:start="235:15" pos:end="235:65">(<argument pos:start="235:16" pos:end="235:23"><expr pos:start="235:16" pos:end="235:23"><name pos:start="235:16" pos:end="235:23"><name pos:start="235:16" pos:end="235:16">s</name><operator pos:start="235:17" pos:end="235:18">-&gt;</operator><name pos:start="235:19" pos:end="235:23">avctx</name></name></expr></argument>, <argument pos:start="235:26" pos:end="235:37"><expr pos:start="235:26" pos:end="235:37"><name pos:start="235:26" pos:end="235:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="235:40" pos:end="235:64"><expr pos:start="235:40" pos:end="235:64"><literal type="string" pos:start="235:40" pos:end="235:64">"error in unpack_modes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="237:9" pos:end="237:18">return <expr pos:start="237:16" pos:end="237:17"><operator pos:start="237:16" pos:end="237:16">-</operator><literal type="number" pos:start="237:17" pos:end="237:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="247:5"><if pos:start="241:5" pos:end="247:5">if <condition pos:start="241:8" pos:end="241:31">(<expr pos:start="241:9" pos:end="241:30"><call pos:start="241:9" pos:end="241:30"><name pos:start="241:9" pos:end="241:22">unpack_vectors</name><argument_list pos:start="241:23" pos:end="241:30">(<argument pos:start="241:24" pos:end="241:24"><expr pos:start="241:24" pos:end="241:24"><name pos:start="241:24" pos:end="241:24">s</name></expr></argument>, <argument pos:start="241:27" pos:end="241:29"><expr pos:start="241:27" pos:end="241:29"><operator pos:start="241:27" pos:end="241:27">&amp;</operator><name pos:start="241:28" pos:end="241:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="241:32" pos:end="247:5">{<block_content pos:start="243:9" pos:end="245:18">

        <expr_stmt pos:start="243:9" pos:end="243:68"><expr pos:start="243:9" pos:end="243:67"><call pos:start="243:9" pos:end="243:67"><name pos:start="243:9" pos:end="243:14">av_log</name><argument_list pos:start="243:15" pos:end="243:67">(<argument pos:start="243:16" pos:end="243:23"><expr pos:start="243:16" pos:end="243:23"><name pos:start="243:16" pos:end="243:23"><name pos:start="243:16" pos:end="243:16">s</name><operator pos:start="243:17" pos:end="243:18">-&gt;</operator><name pos:start="243:19" pos:end="243:23">avctx</name></name></expr></argument>, <argument pos:start="243:26" pos:end="243:37"><expr pos:start="243:26" pos:end="243:37"><name pos:start="243:26" pos:end="243:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="243:40" pos:end="243:66"><expr pos:start="243:40" pos:end="243:66"><literal type="string" pos:start="243:40" pos:end="243:66">"error in unpack_vectors\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="245:9" pos:end="245:18">return <expr pos:start="245:16" pos:end="245:17"><operator pos:start="245:16" pos:end="245:16">-</operator><literal type="number" pos:start="245:17" pos:end="245:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="249:5" pos:end="255:5"><if pos:start="249:5" pos:end="255:5">if <condition pos:start="249:8" pos:end="249:34">(<expr pos:start="249:9" pos:end="249:33"><call pos:start="249:9" pos:end="249:33"><name pos:start="249:9" pos:end="249:25">unpack_block_qpis</name><argument_list pos:start="249:26" pos:end="249:33">(<argument pos:start="249:27" pos:end="249:27"><expr pos:start="249:27" pos:end="249:27"><name pos:start="249:27" pos:end="249:27">s</name></expr></argument>, <argument pos:start="249:30" pos:end="249:32"><expr pos:start="249:30" pos:end="249:32"><operator pos:start="249:30" pos:end="249:30">&amp;</operator><name pos:start="249:31" pos:end="249:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="249:35" pos:end="255:5">{<block_content pos:start="251:9" pos:end="253:18">

        <expr_stmt pos:start="251:9" pos:end="251:71"><expr pos:start="251:9" pos:end="251:70"><call pos:start="251:9" pos:end="251:70"><name pos:start="251:9" pos:end="251:14">av_log</name><argument_list pos:start="251:15" pos:end="251:70">(<argument pos:start="251:16" pos:end="251:23"><expr pos:start="251:16" pos:end="251:23"><name pos:start="251:16" pos:end="251:23"><name pos:start="251:16" pos:end="251:16">s</name><operator pos:start="251:17" pos:end="251:18">-&gt;</operator><name pos:start="251:19" pos:end="251:23">avctx</name></name></expr></argument>, <argument pos:start="251:26" pos:end="251:37"><expr pos:start="251:26" pos:end="251:37"><name pos:start="251:26" pos:end="251:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="251:40" pos:end="251:69"><expr pos:start="251:40" pos:end="251:69"><literal type="string" pos:start="251:40" pos:end="251:69">"error in unpack_block_qpis\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="253:9" pos:end="253:18">return <expr pos:start="253:16" pos:end="253:17"><operator pos:start="253:16" pos:end="253:16">-</operator><literal type="number" pos:start="253:17" pos:end="253:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="257:5" pos:end="263:5"><if pos:start="257:5" pos:end="263:5">if <condition pos:start="257:8" pos:end="257:34">(<expr pos:start="257:9" pos:end="257:33"><call pos:start="257:9" pos:end="257:33"><name pos:start="257:9" pos:end="257:25">unpack_dct_coeffs</name><argument_list pos:start="257:26" pos:end="257:33">(<argument pos:start="257:27" pos:end="257:27"><expr pos:start="257:27" pos:end="257:27"><name pos:start="257:27" pos:end="257:27">s</name></expr></argument>, <argument pos:start="257:30" pos:end="257:32"><expr pos:start="257:30" pos:end="257:32"><operator pos:start="257:30" pos:end="257:30">&amp;</operator><name pos:start="257:31" pos:end="257:32">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="257:35" pos:end="263:5">{<block_content pos:start="259:9" pos:end="261:18">

        <expr_stmt pos:start="259:9" pos:end="259:71"><expr pos:start="259:9" pos:end="259:70"><call pos:start="259:9" pos:end="259:70"><name pos:start="259:9" pos:end="259:14">av_log</name><argument_list pos:start="259:15" pos:end="259:70">(<argument pos:start="259:16" pos:end="259:23"><expr pos:start="259:16" pos:end="259:23"><name pos:start="259:16" pos:end="259:23"><name pos:start="259:16" pos:end="259:16">s</name><operator pos:start="259:17" pos:end="259:18">-&gt;</operator><name pos:start="259:19" pos:end="259:23">avctx</name></name></expr></argument>, <argument pos:start="259:26" pos:end="259:37"><expr pos:start="259:26" pos:end="259:37"><name pos:start="259:26" pos:end="259:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="259:40" pos:end="259:69"><expr pos:start="259:40" pos:end="259:69"><literal type="string" pos:start="259:40" pos:end="259:69">"error in unpack_dct_coeffs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="261:9" pos:end="261:18">return <expr pos:start="261:16" pos:end="261:17"><operator pos:start="261:16" pos:end="261:16">-</operator><literal type="number" pos:start="261:17" pos:end="261:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="267:5" pos:end="269:27">for <control pos:start="267:9" pos:end="267:46">(<init pos:start="267:10" pos:end="267:15"><expr pos:start="267:10" pos:end="267:14"><name pos:start="267:10" pos:end="267:10">i</name> <operator pos:start="267:12" pos:end="267:12">=</operator> <literal type="number" pos:start="267:14" pos:end="267:14">0</literal></expr>;</init> <condition pos:start="267:17" pos:end="267:41"><expr pos:start="267:17" pos:end="267:40"><name pos:start="267:17" pos:end="267:17">i</name> <operator pos:start="267:19" pos:end="267:19">&lt;</operator> <name pos:start="267:21" pos:end="267:40"><name pos:start="267:21" pos:end="267:21">s</name><operator pos:start="267:22" pos:end="267:23">-&gt;</operator><name pos:start="267:24" pos:end="267:40">macroblock_height</name></name></expr>;</condition> <incr pos:start="267:43" pos:end="267:45"><expr pos:start="267:43" pos:end="267:45"><name pos:start="267:43" pos:end="267:43">i</name><operator pos:start="267:44" pos:end="267:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="269:9" pos:end="269:27"><block_content pos:start="269:9" pos:end="269:27">

        <expr_stmt pos:start="269:9" pos:end="269:27"><expr pos:start="269:9" pos:end="269:26"><call pos:start="269:9" pos:end="269:26"><name pos:start="269:9" pos:end="269:20">render_slice</name><argument_list pos:start="269:21" pos:end="269:26">(<argument pos:start="269:22" pos:end="269:22"><expr pos:start="269:22" pos:end="269:22"><name pos:start="269:22" pos:end="269:22">s</name></expr></argument>, <argument pos:start="269:25" pos:end="269:25"><expr pos:start="269:25" pos:end="269:25"><name pos:start="269:25" pos:end="269:25">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="273:5" pos:end="273:25"><expr pos:start="273:5" pos:end="273:24"><call pos:start="273:5" pos:end="273:24"><name pos:start="273:5" pos:end="273:21">apply_loop_filter</name><argument_list pos:start="273:22" pos:end="273:24">(<argument pos:start="273:23" pos:end="273:23"><expr pos:start="273:23" pos:end="273:23"><name pos:start="273:23" pos:end="273:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="277:5" pos:end="277:31"><expr pos:start="277:5" pos:end="277:30"><operator pos:start="277:5" pos:end="277:5">*</operator><name pos:start="277:6" pos:end="277:14">data_size</name><operator pos:start="277:15" pos:end="277:15">=</operator><sizeof pos:start="277:16" pos:end="277:30">sizeof<argument_list pos:start="277:22" pos:end="277:30">(<argument pos:start="277:23" pos:end="277:29"><expr pos:start="277:23" pos:end="277:29"><name pos:start="277:23" pos:end="277:29">AVFrame</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:38"><expr pos:start="279:5" pos:end="279:37"><operator pos:start="279:5" pos:end="279:5">*</operator><operator pos:start="279:6" pos:end="279:6">(</operator><name pos:start="279:7" pos:end="279:13">AVFrame</name><operator pos:start="279:14" pos:end="279:14">*</operator><operator pos:start="279:15" pos:end="279:15">)</operator><name pos:start="279:16" pos:end="279:19">data</name><operator pos:start="279:20" pos:end="279:20">=</operator> <name pos:start="279:22" pos:end="279:37"><name pos:start="279:22" pos:end="279:22">s</name><operator pos:start="279:23" pos:end="279:24">-&gt;</operator><name pos:start="279:25" pos:end="279:37">current_frame</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="283:5" pos:end="285:22">/* release the last frame, if it is allocated and if it is not the

     * golden frame */</comment>

    <if_stmt pos:start="287:5" pos:end="291:53"><if pos:start="287:5" pos:end="291:53">if <condition pos:start="287:8" pos:end="289:59">(<expr pos:start="287:9" pos:end="289:58"><operator pos:start="287:9" pos:end="287:9">(</operator><name pos:start="287:10" pos:end="287:30"><name pos:start="287:10" pos:end="287:10">s</name><operator pos:start="287:11" pos:end="287:12">-&gt;</operator><name pos:start="287:13" pos:end="287:22">last_frame</name><operator pos:start="287:23" pos:end="287:23">.</operator><name pos:start="287:24" pos:end="287:27">data</name><index pos:start="287:28" pos:end="287:30">[<expr pos:start="287:29" pos:end="287:29"><literal type="number" pos:start="287:29" pos:end="287:29">0</literal></expr>]</index></name><operator pos:start="287:31" pos:end="287:31">)</operator> <operator pos:start="287:33" pos:end="287:34">&amp;&amp;</operator>

        <operator pos:start="289:9" pos:end="289:9">(</operator><name pos:start="289:10" pos:end="289:30"><name pos:start="289:10" pos:end="289:10">s</name><operator pos:start="289:11" pos:end="289:12">-&gt;</operator><name pos:start="289:13" pos:end="289:22">last_frame</name><operator pos:start="289:23" pos:end="289:23">.</operator><name pos:start="289:24" pos:end="289:27">data</name><index pos:start="289:28" pos:end="289:30">[<expr pos:start="289:29" pos:end="289:29"><literal type="number" pos:start="289:29" pos:end="289:29">0</literal></expr>]</index></name> <operator pos:start="289:32" pos:end="289:33">!=</operator> <name pos:start="289:35" pos:end="289:57"><name pos:start="289:35" pos:end="289:35">s</name><operator pos:start="289:36" pos:end="289:37">-&gt;</operator><name pos:start="289:38" pos:end="289:49">golden_frame</name><operator pos:start="289:50" pos:end="289:50">.</operator><name pos:start="289:51" pos:end="289:54">data</name><index pos:start="289:55" pos:end="289:57">[<expr pos:start="289:56" pos:end="289:56"><literal type="number" pos:start="289:56" pos:end="289:56">0</literal></expr>]</index></name><operator pos:start="289:58" pos:end="289:58">)</operator></expr>)</condition><block type="pseudo" pos:start="291:9" pos:end="291:53"><block_content pos:start="291:9" pos:end="291:53">

        <expr_stmt pos:start="291:9" pos:end="291:53"><expr pos:start="291:9" pos:end="291:52"><call pos:start="291:9" pos:end="291:52"><name pos:start="291:9" pos:end="291:29"><name pos:start="291:9" pos:end="291:13">avctx</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:29">release_buffer</name></name><argument_list pos:start="291:30" pos:end="291:52">(<argument pos:start="291:31" pos:end="291:35"><expr pos:start="291:31" pos:end="291:35"><name pos:start="291:31" pos:end="291:35">avctx</name></expr></argument>, <argument pos:start="291:38" pos:end="291:51"><expr pos:start="291:38" pos:end="291:51"><operator pos:start="291:38" pos:end="291:38">&amp;</operator><name pos:start="291:39" pos:end="291:51"><name pos:start="291:39" pos:end="291:39">s</name><operator pos:start="291:40" pos:end="291:41">-&gt;</operator><name pos:start="291:42" pos:end="291:51">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="295:5" pos:end="295:41">/* shuffle frames (last = current) */</comment>

    <expr_stmt pos:start="297:5" pos:end="297:36"><expr pos:start="297:5" pos:end="297:35"><name pos:start="297:5" pos:end="297:17"><name pos:start="297:5" pos:end="297:5">s</name><operator pos:start="297:6" pos:end="297:7">-&gt;</operator><name pos:start="297:8" pos:end="297:17">last_frame</name></name><operator pos:start="297:18" pos:end="297:18">=</operator> <name pos:start="297:20" pos:end="297:35"><name pos:start="297:20" pos:end="297:20">s</name><operator pos:start="297:21" pos:end="297:22">-&gt;</operator><name pos:start="297:23" pos:end="297:35">current_frame</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="299:5" pos:end="299:35"><expr pos:start="299:5" pos:end="299:34"><name pos:start="299:5" pos:end="299:28"><name pos:start="299:5" pos:end="299:5">s</name><operator pos:start="299:6" pos:end="299:7">-&gt;</operator><name pos:start="299:8" pos:end="299:20">current_frame</name><operator pos:start="299:21" pos:end="299:21">.</operator><name pos:start="299:22" pos:end="299:25">data</name><index pos:start="299:26" pos:end="299:28">[<expr pos:start="299:27" pos:end="299:27"><literal type="number" pos:start="299:27" pos:end="299:27">0</literal></expr>]</index></name><operator pos:start="299:29" pos:end="299:29">=</operator> <name pos:start="299:31" pos:end="299:34">NULL</name></expr>;</expr_stmt> <comment type="block" pos:start="299:37" pos:end="299:96">/* ensure that we catch any access to this released frame */</comment>



    <return pos:start="303:5" pos:end="303:20">return <expr pos:start="303:12" pos:end="303:19"><name pos:start="303:12" pos:end="303:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
