<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19159.c" pos:tabs="8"><function pos:start="1:1" pos:end="154:13"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">ff_asf_get_packet</name><parameter_list pos:start="1:29" pos:end="1:65">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:60">AVIOContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:64">pb</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="154:13">{<block_content pos:start="5:5" pos:end="154:13">

    <decl_stmt pos:start="5:5" pos:end="5:35"><decl pos:start="5:5" pos:end="5:34"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">ASFContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">asf</name> <init pos:start="5:21" pos:end="5:34">= <expr pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:26"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:26">packet_length</name></decl>, <decl pos:start="7:29" pos:end="7:35"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:29" pos:end="7:35">padsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">rsize</name> <init pos:start="9:15" pos:end="9:17">= <expr pos:start="9:17" pos:end="9:17"><literal type="number" pos:start="9:17" pos:end="9:17">8</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">c</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">d</name></decl>, <decl pos:start="11:15" pos:end="11:15"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:15">e</name></decl>, <decl pos:start="11:18" pos:end="11:20"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:18" pos:end="11:20">off</name></decl>;</decl_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:64">// if we do not know packet size, allow skipping up to 32 kB</comment>

    <expr_stmt pos:start="17:5" pos:end="17:15"><expr pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:7">off</name><operator pos:start="17:8" pos:end="17:8">=</operator> <literal type="number" pos:start="17:10" pos:end="17:14">32768</literal></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="21:67"><if pos:start="19:5" pos:end="21:67">if <condition pos:start="19:8" pos:end="19:27">(<expr pos:start="19:9" pos:end="19:26"><name pos:start="19:9" pos:end="19:22"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:22">packet_size</name></name> <operator pos:start="19:24" pos:end="19:24">&gt;</operator> <literal type="number" pos:start="19:26" pos:end="19:26">0</literal></expr>)</condition><block type="pseudo" pos:start="21:9" pos:end="21:67"><block_content pos:start="21:9" pos:end="21:67">

        <expr_stmt pos:start="21:9" pos:end="21:67"><expr pos:start="21:9" pos:end="21:66"><name pos:start="21:9" pos:end="21:11">off</name><operator pos:start="21:12" pos:end="21:12">=</operator> <operator pos:start="21:14" pos:end="21:14">(</operator><call pos:start="21:15" pos:end="21:27"><name pos:start="21:15" pos:end="21:23">avio_tell</name><argument_list pos:start="21:24" pos:end="21:27">(<argument pos:start="21:25" pos:end="21:26"><expr pos:start="21:25" pos:end="21:26"><name pos:start="21:25" pos:end="21:26">pb</name></expr></argument>)</argument_list></call> <operator pos:start="21:29" pos:end="21:29">-</operator> <name pos:start="21:31" pos:end="21:44"><name pos:start="21:31" pos:end="21:31">s</name><operator pos:start="21:32" pos:end="21:33">-&gt;</operator><name pos:start="21:34" pos:end="21:44">data_offset</name></name><operator pos:start="21:45" pos:end="21:45">)</operator> <operator pos:start="21:47" pos:end="21:47">%</operator> <name pos:start="21:49" pos:end="21:62"><name pos:start="21:49" pos:end="21:49">s</name><operator pos:start="21:50" pos:end="21:51">-&gt;</operator><name pos:start="21:52" pos:end="21:62">packet_size</name></name> <operator pos:start="21:64" pos:end="21:64">+</operator> <literal type="number" pos:start="21:66" pos:end="21:66">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:13"><expr pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:5">c</name><operator pos:start="25:6" pos:end="25:6">=</operator><name pos:start="25:7" pos:end="25:7">d</name><operator pos:start="25:8" pos:end="25:8">=</operator><name pos:start="25:9" pos:end="25:9">e</name><operator pos:start="25:10" pos:end="25:10">=</operator><operator pos:start="25:11" pos:end="25:11">-</operator><literal type="number" pos:start="25:12" pos:end="25:12">1</literal></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="154:13">while<condition pos:start="27:10" pos:end="27:20">(<expr pos:start="27:11" pos:end="27:19"><name pos:start="27:11" pos:end="27:13">off</name><operator pos:start="27:14" pos:end="27:15">--</operator> <operator pos:start="27:17" pos:end="27:17">&gt;</operator> <literal type="number" pos:start="27:19" pos:end="27:19">0</literal></expr>)</condition><block pos:start="27:21" pos:end="154:13">{<block_content pos:start="29:9" pos:end="154:13">

        <expr_stmt pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">c</name><operator pos:start="29:10" pos:end="29:10">=</operator><name pos:start="29:11" pos:end="29:11">d</name></expr>;</expr_stmt> <expr_stmt pos:start="29:14" pos:end="29:17"><expr pos:start="29:14" pos:end="29:16"><name pos:start="29:14" pos:end="29:14">d</name><operator pos:start="29:15" pos:end="29:15">=</operator><name pos:start="29:16" pos:end="29:16">e</name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:23"><expr pos:start="31:9" pos:end="31:22"><name pos:start="31:9" pos:end="31:9">e</name><operator pos:start="31:10" pos:end="31:10">=</operator> <call pos:start="31:12" pos:end="31:22"><name pos:start="31:12" pos:end="31:18">avio_r8</name><argument_list pos:start="31:19" pos:end="31:22">(<argument pos:start="31:20" pos:end="31:21"><expr pos:start="31:20" pos:end="31:21"><name pos:start="31:20" pos:end="31:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="35:18"><if pos:start="33:9" pos:end="35:18">if<condition pos:start="33:11" pos:end="33:33">(<expr pos:start="33:12" pos:end="33:32"><name pos:start="33:12" pos:end="33:12">c</name> <operator pos:start="33:14" pos:end="33:15">==</operator> <literal type="number" pos:start="33:17" pos:end="33:20">0x82</literal> <operator pos:start="33:22" pos:end="33:23">&amp;&amp;</operator> <operator pos:start="33:25" pos:end="33:25">!</operator><name pos:start="33:26" pos:end="33:26">d</name> <operator pos:start="33:28" pos:end="33:29">&amp;&amp;</operator> <operator pos:start="33:31" pos:end="33:31">!</operator><name pos:start="33:32" pos:end="33:32">e</name></expr>)</condition><block type="pseudo" pos:start="35:13" pos:end="35:18"><block_content pos:start="35:13" pos:end="35:18">

            <break pos:start="35:13" pos:end="35:18">break;</break></block_content></block></if></if_stmt>




    <if_stmt pos:start="40:5" pos:end="154:13"><if pos:start="40:5" pos:end="154:13">if <condition pos:start="40:8" pos:end="40:18">(<expr pos:start="40:9" pos:end="40:17"><name pos:start="40:9" pos:end="40:9">c</name> <operator pos:start="40:11" pos:end="40:12">!=</operator> <literal type="number" pos:start="40:14" pos:end="40:17">0x82</literal></expr>)</condition> <block pos:start="40:20" pos:end="154:13">{<block_content pos:start="54:9" pos:end="154:13">

        <comment type="block" format="doxygen" pos:start="42:9" pos:end="52:11">/**

         * This code allows handling of -EAGAIN at packet boundaries (i.e.

         * if the packet sync code above triggers -EAGAIN). This does not

         * imply complete -EAGAIN handling support at random positions in

         * the stream.

         */</comment>

        <if_stmt pos:start="54:9" pos:end="56:35"><if pos:start="54:9" pos:end="56:35">if <condition pos:start="54:12" pos:end="54:41">(<expr pos:start="54:13" pos:end="54:40"><name pos:start="54:13" pos:end="54:21"><name pos:start="54:13" pos:end="54:14">pb</name><operator pos:start="54:15" pos:end="54:16">-&gt;</operator><name pos:start="54:17" pos:end="54:21">error</name></name> <operator pos:start="54:23" pos:end="54:24">==</operator> <call pos:start="54:26" pos:end="54:40"><name pos:start="54:26" pos:end="54:32">AVERROR</name><argument_list pos:start="54:33" pos:end="54:40">(<argument pos:start="54:34" pos:end="54:39"><expr pos:start="54:34" pos:end="54:39"><name pos:start="54:34" pos:end="54:39">EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="56:13" pos:end="56:35"><block_content pos:start="56:13" pos:end="56:35">

            <return pos:start="56:13" pos:end="56:35">return <expr pos:start="56:20" pos:end="56:34"><call pos:start="56:20" pos:end="56:34"><name pos:start="56:20" pos:end="56:26">AVERROR</name><argument_list pos:start="56:27" pos:end="56:34">(<argument pos:start="56:28" pos:end="56:33"><expr pos:start="56:28" pos:end="56:33"><name pos:start="56:28" pos:end="56:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="58:9" pos:end="60:94"><if pos:start="58:9" pos:end="60:94">if <condition pos:start="58:12" pos:end="58:29">(<expr pos:start="58:13" pos:end="58:28"><operator pos:start="58:13" pos:end="58:13">!</operator><name pos:start="58:14" pos:end="58:28"><name pos:start="58:14" pos:end="58:15">pb</name><operator pos:start="58:16" pos:end="58:17">-&gt;</operator><name pos:start="58:18" pos:end="58:28">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="60:13" pos:end="60:94"><block_content pos:start="60:13" pos:end="60:94">

            <expr_stmt pos:start="60:13" pos:end="60:94"><expr pos:start="60:13" pos:end="60:93"><call pos:start="60:13" pos:end="60:93"><name pos:start="60:13" pos:end="60:18">av_log</name><argument_list pos:start="60:19" pos:end="60:93">(<argument pos:start="60:20" pos:end="60:20"><expr pos:start="60:20" pos:end="60:20"><name pos:start="60:20" pos:end="60:20">s</name></expr></argument>, <argument pos:start="60:23" pos:end="60:34"><expr pos:start="60:23" pos:end="60:34"><name pos:start="60:23" pos:end="60:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="60:37" pos:end="60:74"><expr pos:start="60:37" pos:end="60:74"><literal type="string" pos:start="60:37" pos:end="60:64">"ff asf bad header %x  at:%"</literal><name pos:start="60:65" pos:end="60:70">PRId64</name><literal type="string" pos:start="60:71" pos:end="60:74">"\n"</literal></expr></argument>, <argument pos:start="60:77" pos:end="60:77"><expr pos:start="60:77" pos:end="60:77"><name pos:start="60:77" pos:end="60:77">c</name></expr></argument>, <argument pos:start="60:80" pos:end="60:92"><expr pos:start="60:80" pos:end="60:92"><call pos:start="60:80" pos:end="60:92"><name pos:start="60:80" pos:end="60:88">avio_tell</name><argument_list pos:start="60:89" pos:end="60:92">(<argument pos:start="60:90" pos:end="60:91"><expr pos:start="60:90" pos:end="60:91"><name pos:start="60:90" pos:end="60:91">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


    <if_stmt pos:start="63:5" pos:end="154:13"><if pos:start="63:5" pos:end="154:13">if <condition pos:start="63:8" pos:end="63:27">(<expr pos:start="63:9" pos:end="63:26"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:10">c</name> <operator pos:start="63:12" pos:end="63:12">&amp;</operator> <literal type="number" pos:start="63:14" pos:end="63:17">0x8f</literal><operator pos:start="63:18" pos:end="63:18">)</operator> <operator pos:start="63:20" pos:end="63:21">==</operator> <literal type="number" pos:start="63:23" pos:end="63:26">0x82</literal></expr>)</condition> <block pos:start="63:29" pos:end="154:13">{<block_content pos:start="65:9" pos:end="154:13">

        <if_stmt pos:start="65:9" pos:end="154:13"><if pos:start="65:9" pos:end="79:5">if <condition pos:start="65:12" pos:end="65:19">(<expr pos:start="65:13" pos:end="65:18"><name pos:start="65:13" pos:end="65:13">d</name> <operator pos:start="65:15" pos:end="65:16">||</operator> <name pos:start="65:18" pos:end="65:18">e</name></expr>)</condition> <block pos:start="65:21" pos:end="79:5">{<block_content pos:start="67:13" pos:end="77:17">

            <if_stmt pos:start="67:13" pos:end="69:65"><if pos:start="67:13" pos:end="69:65">if <condition pos:start="67:16" pos:end="67:33">(<expr pos:start="67:17" pos:end="67:32"><operator pos:start="67:17" pos:end="67:17">!</operator><name pos:start="67:18" pos:end="67:32"><name pos:start="67:18" pos:end="67:19">pb</name><operator pos:start="67:20" pos:end="67:21">-&gt;</operator><name pos:start="67:22" pos:end="67:32">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="69:17" pos:end="69:65"><block_content pos:start="69:17" pos:end="69:65">

                <expr_stmt pos:start="69:17" pos:end="69:65"><expr pos:start="69:17" pos:end="69:64"><call pos:start="69:17" pos:end="69:64"><name pos:start="69:17" pos:end="69:22">av_log</name><argument_list pos:start="69:23" pos:end="69:64">(<argument pos:start="69:24" pos:end="69:24"><expr pos:start="69:24" pos:end="69:24"><name pos:start="69:24" pos:end="69:24">s</name></expr></argument>, <argument pos:start="69:27" pos:end="69:38"><expr pos:start="69:27" pos:end="69:38"><name pos:start="69:27" pos:end="69:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:41" pos:end="69:63"><expr pos:start="69:41" pos:end="69:63"><literal type="string" pos:start="69:41" pos:end="69:63">"ff asf bad non zero\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><name pos:start="73:9" pos:end="73:9">c</name><operator pos:start="73:10" pos:end="73:10">=</operator> <call pos:start="73:12" pos:end="73:22"><name pos:start="73:12" pos:end="73:18">avio_r8</name><argument_list pos:start="73:19" pos:end="73:22">(<argument pos:start="73:20" pos:end="73:21"><expr pos:start="73:20" pos:end="73:21"><name pos:start="73:20" pos:end="73:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:23"><expr pos:start="75:9" pos:end="75:22"><name pos:start="75:9" pos:end="75:9">d</name><operator pos:start="75:10" pos:end="75:10">=</operator> <call pos:start="75:12" pos:end="75:22"><name pos:start="75:12" pos:end="75:18">avio_r8</name><argument_list pos:start="75:19" pos:end="75:22">(<argument pos:start="75:20" pos:end="75:21"><expr pos:start="75:20" pos:end="75:21"><name pos:start="75:20" pos:end="75:21">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:17"><expr pos:start="77:9" pos:end="77:16"><name pos:start="77:9" pos:end="77:13">rsize</name><operator pos:start="77:14" pos:end="77:15">+=</operator><literal type="number" pos:start="77:16" pos:end="77:16">3</literal></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="79:6" pos:end="154:13">else<block pos:start="79:10" pos:end="154:13">{<block_content pos:start="81:9" pos:end="154:13">

        <expr_stmt pos:start="81:9" pos:end="81:36"><expr pos:start="81:9" pos:end="81:35"><call pos:start="81:9" pos:end="81:35"><name pos:start="81:9" pos:end="81:17">avio_seek</name><argument_list pos:start="81:18" pos:end="81:35">(<argument pos:start="81:19" pos:end="81:20"><expr pos:start="81:19" pos:end="81:20"><name pos:start="81:19" pos:end="81:20">pb</name></expr></argument>, <argument pos:start="81:23" pos:end="81:24"><expr pos:start="81:23" pos:end="81:24"><operator pos:start="81:23" pos:end="81:23">-</operator><literal type="number" pos:start="81:24" pos:end="81:24">1</literal></expr></argument>, <argument pos:start="81:27" pos:end="81:34"><expr pos:start="81:27" pos:end="81:34"><name pos:start="81:27" pos:end="81:34">SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="81:38" pos:end="81:44">//FIXME</comment>




    <expr_stmt pos:start="86:5" pos:end="86:29"><expr pos:start="86:5" pos:end="86:28"><name pos:start="86:5" pos:end="86:21"><name pos:start="86:5" pos:end="86:7">asf</name><operator pos:start="86:8" pos:end="86:9">-&gt;</operator><name pos:start="86:10" pos:end="86:21">packet_flags</name></name>    <operator pos:start="86:26" pos:end="86:26">=</operator> <name pos:start="86:28" pos:end="86:28">c</name></expr>;</expr_stmt>

    <expr_stmt pos:start="88:5" pos:end="88:29"><expr pos:start="88:5" pos:end="88:28"><name pos:start="88:5" pos:end="88:24"><name pos:start="88:5" pos:end="88:7">asf</name><operator pos:start="88:8" pos:end="88:9">-&gt;</operator><name pos:start="88:10" pos:end="88:24">packet_property</name></name> <operator pos:start="88:26" pos:end="88:26">=</operator> <name pos:start="88:28" pos:end="88:28">d</name></expr>;</expr_stmt>



    <expr_stmt pos:start="92:5" pos:end="92:68"><expr pos:start="92:5" pos:end="92:67"><call pos:start="92:5" pos:end="92:67"><name pos:start="92:5" pos:end="92:12">DO_2BITS</name><argument_list pos:start="92:13" pos:end="92:67">(<argument pos:start="92:14" pos:end="92:35"><expr pos:start="92:14" pos:end="92:35"><name pos:start="92:14" pos:end="92:30"><name pos:start="92:14" pos:end="92:16">asf</name><operator pos:start="92:17" pos:end="92:18">-&gt;</operator><name pos:start="92:19" pos:end="92:30">packet_flags</name></name> <operator pos:start="92:32" pos:end="92:33">&gt;&gt;</operator> <literal type="number" pos:start="92:35" pos:end="92:35">5</literal></expr></argument>, <argument pos:start="92:38" pos:end="92:50"><expr pos:start="92:38" pos:end="92:50"><name pos:start="92:38" pos:end="92:50">packet_length</name></expr></argument>, <argument pos:start="92:53" pos:end="92:66"><expr pos:start="92:53" pos:end="92:66"><name pos:start="92:53" pos:end="92:66"><name pos:start="92:53" pos:end="92:53">s</name><operator pos:start="92:54" pos:end="92:55">-&gt;</operator><name pos:start="92:56" pos:end="92:66">packet_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="94:5" pos:end="94:49"><expr pos:start="94:5" pos:end="94:48"><call pos:start="94:5" pos:end="94:48"><name pos:start="94:5" pos:end="94:12">DO_2BITS</name><argument_list pos:start="94:13" pos:end="94:48">(<argument pos:start="94:14" pos:end="94:35"><expr pos:start="94:14" pos:end="94:35"><name pos:start="94:14" pos:end="94:30"><name pos:start="94:14" pos:end="94:16">asf</name><operator pos:start="94:17" pos:end="94:18">-&gt;</operator><name pos:start="94:19" pos:end="94:30">packet_flags</name></name> <operator pos:start="94:32" pos:end="94:33">&gt;&gt;</operator> <literal type="number" pos:start="94:35" pos:end="94:35">1</literal></expr></argument>, <argument pos:start="94:38" pos:end="94:44"><expr pos:start="94:38" pos:end="94:44"><name pos:start="94:38" pos:end="94:44">padsize</name></expr></argument>, <argument pos:start="94:47" pos:end="94:47"><expr pos:start="94:47" pos:end="94:47"><literal type="number" pos:start="94:47" pos:end="94:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="94:51" pos:end="94:69">// sequence ignored</comment>

    <expr_stmt pos:start="96:5" pos:end="96:49"><expr pos:start="96:5" pos:end="96:48"><call pos:start="96:5" pos:end="96:48"><name pos:start="96:5" pos:end="96:12">DO_2BITS</name><argument_list pos:start="96:13" pos:end="96:48">(<argument pos:start="96:14" pos:end="96:35"><expr pos:start="96:14" pos:end="96:35"><name pos:start="96:14" pos:end="96:30"><name pos:start="96:14" pos:end="96:16">asf</name><operator pos:start="96:17" pos:end="96:18">-&gt;</operator><name pos:start="96:19" pos:end="96:30">packet_flags</name></name> <operator pos:start="96:32" pos:end="96:33">&gt;&gt;</operator> <literal type="number" pos:start="96:35" pos:end="96:35">3</literal></expr></argument>, <argument pos:start="96:38" pos:end="96:44"><expr pos:start="96:38" pos:end="96:44"><name pos:start="96:38" pos:end="96:44">padsize</name></expr></argument>, <argument pos:start="96:47" pos:end="96:47"><expr pos:start="96:47" pos:end="96:47"><literal type="number" pos:start="96:47" pos:end="96:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="96:51" pos:end="96:67">// padding length</comment>



    <comment type="line" pos:start="100:5" pos:end="100:63">//the following checks prevent overflows and infinite loops</comment>

    <if_stmt pos:start="102:5" pos:end="154:13"><if pos:start="102:5" pos:end="154:13">if<condition pos:start="102:7" pos:end="102:51">(<expr pos:start="102:8" pos:end="102:50"><operator pos:start="102:8" pos:end="102:8">!</operator><name pos:start="102:9" pos:end="102:21">packet_length</name> <operator pos:start="102:23" pos:end="102:24">||</operator> <name pos:start="102:26" pos:end="102:38">packet_length</name> <operator pos:start="102:40" pos:end="102:41">&gt;=</operator> <operator pos:start="102:43" pos:end="102:43">(</operator><literal type="number" pos:start="102:44" pos:end="102:45">1U</literal><operator pos:start="102:46" pos:end="102:47">&lt;&lt;</operator><literal type="number" pos:start="102:48" pos:end="102:49">29</literal><operator pos:start="102:50" pos:end="102:50">)</operator></expr>)</condition><block pos:start="102:52" pos:end="154:13">{<block_content pos:start="104:9" pos:end="154:13">

        <expr_stmt pos:start="104:9" pos:end="104:105"><expr pos:start="104:9" pos:end="104:104"><call pos:start="104:9" pos:end="104:104"><name pos:start="104:9" pos:end="104:14">av_log</name><argument_list pos:start="104:15" pos:end="104:104">(<argument pos:start="104:16" pos:end="104:16"><expr pos:start="104:16" pos:end="104:16"><name pos:start="104:16" pos:end="104:16">s</name></expr></argument>, <argument pos:start="104:19" pos:end="104:30"><expr pos:start="104:19" pos:end="104:30"><name pos:start="104:19" pos:end="104:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="104:33" pos:end="104:73"><expr pos:start="104:33" pos:end="104:73"><literal type="string" pos:start="104:33" pos:end="104:63">"invalid packet_length %d at:%"</literal><name pos:start="104:64" pos:end="104:69">PRId64</name><literal type="string" pos:start="104:70" pos:end="104:73">"\n"</literal></expr></argument>, <argument pos:start="104:76" pos:end="104:88"><expr pos:start="104:76" pos:end="104:88"><name pos:start="104:76" pos:end="104:88">packet_length</name></expr></argument>, <argument pos:start="104:91" pos:end="104:103"><expr pos:start="104:91" pos:end="104:103"><call pos:start="104:91" pos:end="104:103"><name pos:start="104:91" pos:end="104:99">avio_tell</name><argument_list pos:start="104:100" pos:end="104:103">(<argument pos:start="104:101" pos:end="104:102"><expr pos:start="104:101" pos:end="104:102"><name pos:start="104:101" pos:end="104:102">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="108:5" pos:end="154:13"><if pos:start="108:5" pos:end="154:13">if<condition pos:start="108:7" pos:end="108:32">(<expr pos:start="108:8" pos:end="108:31"><name pos:start="108:8" pos:end="108:14">padsize</name> <operator pos:start="108:16" pos:end="108:17">&gt;=</operator> <name pos:start="108:19" pos:end="108:31">packet_length</name></expr>)</condition><block pos:start="108:33" pos:end="154:13">{<block_content pos:start="110:9" pos:end="154:13">

        <expr_stmt pos:start="110:9" pos:end="110:93"><expr pos:start="110:9" pos:end="110:92"><call pos:start="110:9" pos:end="110:92"><name pos:start="110:9" pos:end="110:14">av_log</name><argument_list pos:start="110:15" pos:end="110:92">(<argument pos:start="110:16" pos:end="110:16"><expr pos:start="110:16" pos:end="110:16"><name pos:start="110:16" pos:end="110:16">s</name></expr></argument>, <argument pos:start="110:19" pos:end="110:30"><expr pos:start="110:19" pos:end="110:30"><name pos:start="110:19" pos:end="110:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="110:33" pos:end="110:67"><expr pos:start="110:33" pos:end="110:67"><literal type="string" pos:start="110:33" pos:end="110:57">"invalid padsize %d at:%"</literal><name pos:start="110:58" pos:end="110:63">PRId64</name><literal type="string" pos:start="110:64" pos:end="110:67">"\n"</literal></expr></argument>, <argument pos:start="110:70" pos:end="110:76"><expr pos:start="110:70" pos:end="110:76"><name pos:start="110:70" pos:end="110:76">padsize</name></expr></argument>, <argument pos:start="110:79" pos:end="110:91"><expr pos:start="110:79" pos:end="110:91"><call pos:start="110:79" pos:end="110:91"><name pos:start="110:79" pos:end="110:87">avio_tell</name><argument_list pos:start="110:88" pos:end="110:91">(<argument pos:start="110:89" pos:end="110:90"><expr pos:start="110:89" pos:end="110:90"><name pos:start="110:89" pos:end="110:90">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="116:5" pos:end="116:42"><expr pos:start="116:5" pos:end="116:41"><name pos:start="116:5" pos:end="116:25"><name pos:start="116:5" pos:end="116:7">asf</name><operator pos:start="116:8" pos:end="116:9">-&gt;</operator><name pos:start="116:10" pos:end="116:25">packet_timestamp</name></name> <operator pos:start="116:27" pos:end="116:27">=</operator> <call pos:start="116:29" pos:end="116:41"><name pos:start="116:29" pos:end="116:37">avio_rl32</name><argument_list pos:start="116:38" pos:end="116:41">(<argument pos:start="116:39" pos:end="116:40"><expr pos:start="116:39" pos:end="116:40"><name pos:start="116:39" pos:end="116:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="118:5" pos:end="118:18"><expr pos:start="118:5" pos:end="118:17"><call pos:start="118:5" pos:end="118:17"><name pos:start="118:5" pos:end="118:13">avio_rl16</name><argument_list pos:start="118:14" pos:end="118:17">(<argument pos:start="118:15" pos:end="118:16"><expr pos:start="118:15" pos:end="118:16"><name pos:start="118:15" pos:end="118:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="118:20" pos:end="118:33">/* duration */</comment>

    <comment type="line" pos:start="120:5" pos:end="120:59">// rsize has at least 11 bytes which have to be present</comment>



    <if_stmt pos:start="124:5" pos:end="154:13"><if pos:start="124:5" pos:end="130:5">if <condition pos:start="124:8" pos:end="124:33">(<expr pos:start="124:9" pos:end="124:32"><name pos:start="124:9" pos:end="124:25"><name pos:start="124:9" pos:end="124:11">asf</name><operator pos:start="124:12" pos:end="124:13">-&gt;</operator><name pos:start="124:14" pos:end="124:25">packet_flags</name></name> <operator pos:start="124:27" pos:end="124:27">&amp;</operator> <literal type="number" pos:start="124:29" pos:end="124:32">0x01</literal></expr>)</condition> <block pos:start="124:35" pos:end="130:5">{<block_content pos:start="126:9" pos:end="128:62">

        <expr_stmt pos:start="126:9" pos:end="126:46"><expr pos:start="126:9" pos:end="126:45"><name pos:start="126:9" pos:end="126:31"><name pos:start="126:9" pos:end="126:11">asf</name><operator pos:start="126:12" pos:end="126:13">-&gt;</operator><name pos:start="126:14" pos:end="126:31">packet_segsizetype</name></name> <operator pos:start="126:33" pos:end="126:33">=</operator> <call pos:start="126:35" pos:end="126:45"><name pos:start="126:35" pos:end="126:41">avio_r8</name><argument_list pos:start="126:42" pos:end="126:45">(<argument pos:start="126:43" pos:end="126:44"><expr pos:start="126:43" pos:end="126:44"><name pos:start="126:43" pos:end="126:44">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="126:48" pos:end="126:55"><expr pos:start="126:48" pos:end="126:54"><name pos:start="126:48" pos:end="126:52">rsize</name><operator pos:start="126:53" pos:end="126:54">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="128:9" pos:end="128:62"><expr pos:start="128:9" pos:end="128:61"><name pos:start="128:9" pos:end="128:28"><name pos:start="128:9" pos:end="128:11">asf</name><operator pos:start="128:12" pos:end="128:13">-&gt;</operator><name pos:start="128:14" pos:end="128:28">packet_segments</name></name> <operator pos:start="128:30" pos:end="128:30">=</operator> <name pos:start="128:32" pos:end="128:54"><name pos:start="128:32" pos:end="128:34">asf</name><operator pos:start="128:35" pos:end="128:36">-&gt;</operator><name pos:start="128:37" pos:end="128:54">packet_segsizetype</name></name> <operator pos:start="128:56" pos:end="128:56">&amp;</operator> <literal type="number" pos:start="128:58" pos:end="128:61">0x3f</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="130:7" pos:end="154:13">else <block pos:start="130:12" pos:end="154:13">{<block_content pos:start="132:9" pos:end="154:13">

        <expr_stmt pos:start="132:9" pos:end="132:33"><expr pos:start="132:9" pos:end="132:32"><name pos:start="132:9" pos:end="132:28"><name pos:start="132:9" pos:end="132:11">asf</name><operator pos:start="132:12" pos:end="132:13">-&gt;</operator><name pos:start="132:14" pos:end="132:28">packet_segments</name></name> <operator pos:start="132:30" pos:end="132:30">=</operator> <literal type="number" pos:start="132:32" pos:end="132:32">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="134:9" pos:end="134:39"><expr pos:start="134:9" pos:end="134:38"><name pos:start="134:9" pos:end="134:31"><name pos:start="134:9" pos:end="134:11">asf</name><operator pos:start="134:12" pos:end="134:13">-&gt;</operator><name pos:start="134:14" pos:end="134:31">packet_segsizetype</name></name> <operator pos:start="134:33" pos:end="134:33">=</operator> <literal type="number" pos:start="134:35" pos:end="134:38">0x80</literal></expr>;</expr_stmt>









    <expr_stmt pos:start="144:5" pos:end="144:60"><expr pos:start="144:5" pos:end="144:59"><name pos:start="144:5" pos:end="144:25"><name pos:start="144:5" pos:end="144:7">asf</name><operator pos:start="144:8" pos:end="144:9">-&gt;</operator><name pos:start="144:10" pos:end="144:25">packet_size_left</name></name> <operator pos:start="144:27" pos:end="144:27">=</operator> <name pos:start="144:29" pos:end="144:41">packet_length</name> <operator pos:start="144:43" pos:end="144:43">-</operator> <name pos:start="144:45" pos:end="144:51">padsize</name> <operator pos:start="144:53" pos:end="144:53">-</operator> <name pos:start="144:55" pos:end="144:59">rsize</name></expr>;</expr_stmt>

    <if_stmt pos:start="146:5" pos:end="148:56"><if pos:start="146:5" pos:end="148:56">if <condition pos:start="146:8" pos:end="146:45">(<expr pos:start="146:9" pos:end="146:44"><name pos:start="146:9" pos:end="146:21">packet_length</name> <operator pos:start="146:23" pos:end="146:23">&lt;</operator> <name pos:start="146:25" pos:end="146:44"><name pos:start="146:25" pos:end="146:27">asf</name><operator pos:start="146:28" pos:end="146:29">-&gt;</operator><name pos:start="146:30" pos:end="146:32">hdr</name><operator pos:start="146:33" pos:end="146:33">.</operator><name pos:start="146:34" pos:end="146:44">min_pktsize</name></name></expr>)</condition><block type="pseudo" pos:start="148:9" pos:end="148:56"><block_content pos:start="148:9" pos:end="148:56">

        <expr_stmt pos:start="148:9" pos:end="148:56"><expr pos:start="148:9" pos:end="148:55"><name pos:start="148:9" pos:end="148:15">padsize</name> <operator pos:start="148:17" pos:end="148:18">+=</operator> <name pos:start="148:20" pos:end="148:39"><name pos:start="148:20" pos:end="148:22">asf</name><operator pos:start="148:23" pos:end="148:24">-&gt;</operator><name pos:start="148:25" pos:end="148:27">hdr</name><operator pos:start="148:28" pos:end="148:28">.</operator><name pos:start="148:29" pos:end="148:39">min_pktsize</name></name> <operator pos:start="148:41" pos:end="148:41">-</operator> <name pos:start="148:43" pos:end="148:55">packet_length</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:34"><expr pos:start="150:5" pos:end="150:33"><name pos:start="150:5" pos:end="150:23"><name pos:start="150:5" pos:end="150:7">asf</name><operator pos:start="150:8" pos:end="150:9">-&gt;</operator><name pos:start="150:10" pos:end="150:23">packet_padsize</name></name> <operator pos:start="150:25" pos:end="150:25">=</operator> <name pos:start="150:27" pos:end="150:33">padsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="152:5" pos:end="152:116"><expr pos:start="152:5" pos:end="152:115"><call pos:start="152:5" pos:end="152:115"><name pos:start="152:5" pos:end="152:11">av_dlog</name><argument_list pos:start="152:12" pos:end="152:115">(<argument pos:start="152:13" pos:end="152:13"><expr pos:start="152:13" pos:end="152:13"><name pos:start="152:13" pos:end="152:13">s</name></expr></argument>, <argument pos:start="152:16" pos:end="152:54"><expr pos:start="152:16" pos:end="152:54"><literal type="string" pos:start="152:16" pos:end="152:54">"packet: size=%d padsize=%d  left=%d\n"</literal></expr></argument>, <argument pos:start="152:57" pos:end="152:70"><expr pos:start="152:57" pos:end="152:70"><name pos:start="152:57" pos:end="152:70"><name pos:start="152:57" pos:end="152:57">s</name><operator pos:start="152:58" pos:end="152:59">-&gt;</operator><name pos:start="152:60" pos:end="152:70">packet_size</name></name></expr></argument>, <argument pos:start="152:73" pos:end="152:91"><expr pos:start="152:73" pos:end="152:91"><name pos:start="152:73" pos:end="152:91"><name pos:start="152:73" pos:end="152:75">asf</name><operator pos:start="152:76" pos:end="152:77">-&gt;</operator><name pos:start="152:78" pos:end="152:91">packet_padsize</name></name></expr></argument>, <argument pos:start="152:94" pos:end="152:114"><expr pos:start="152:94" pos:end="152:114"><name pos:start="152:94" pos:end="152:114"><name pos:start="152:94" pos:end="152:96">asf</name><operator pos:start="152:97" pos:end="152:98">-&gt;</operator><name pos:start="152:99" pos:end="152:114">packet_size_left</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="154:5" pos:end="154:13">return <expr pos:start="154:12" pos:end="154:12"><literal type="number" pos:start="154:12" pos:end="154:12">0</literal></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></function>
</unit>
