<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24321.c" pos:tabs="8"><function pos:start="1:1" pos:end="203:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">pc_basic_device_init</name><parameter_list pos:start="1:26" pos:end="9:43">(<parameter pos:start="1:27" pos:end="1:41"><decl pos:start="1:27" pos:end="1:41"><type pos:start="1:27" pos:end="1:41"><name pos:start="1:27" pos:end="1:32">ISABus</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:41">isa_bus</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">qemu_irq</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">gsi</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:47"><decl pos:start="3:27" pos:end="3:47"><type pos:start="3:27" pos:end="3:47"><name pos:start="3:27" pos:end="3:35">ISADevice</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:47">rtc_state</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:44"><decl pos:start="5:27" pos:end="5:44"><type pos:start="5:27" pos:end="5:44"><name pos:start="5:27" pos:end="5:30">bool</name></type> <name pos:start="5:32" pos:end="5:44">create_fdctrl</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:40"><decl pos:start="7:27" pos:end="7:40"><type pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:30">bool</name></type> <name pos:start="7:32" pos:end="7:40">no_vmport</name></decl></parameter>,

                          <parameter pos:start="9:27" pos:end="9:42"><decl pos:start="9:27" pos:end="9:42"><type pos:start="9:27" pos:end="9:42"><name pos:start="9:27" pos:end="9:32">uint32</name></type> <name pos:start="9:34" pos:end="9:42">hpet_irqs</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="203:1">{<block_content pos:start="13:5" pos:end="201:5">

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:26"><decl pos:start="15:5" pos:end="15:25"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">DriveInfo</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:25"><name pos:start="15:16" pos:end="15:17">fd</name><index pos:start="15:18" pos:end="15:25">[<expr pos:start="15:19" pos:end="15:24"><name pos:start="15:19" pos:end="15:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:21">hpet</name> <init pos:start="17:23" pos:end="17:28">= <expr pos:start="17:25" pos:end="17:28"><name pos:start="17:25" pos:end="17:28">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">pit_isa_irq</name> <init pos:start="19:21" pos:end="19:23">= <expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:32"><decl pos:start="21:5" pos:end="21:31"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">qemu_irq</name></type> <name pos:start="21:14" pos:end="21:24">pit_alt_irq</name> <init pos:start="21:26" pos:end="21:31">= <expr pos:start="21:28" pos:end="21:31"><name pos:start="21:28" pos:end="21:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:28"><decl pos:start="23:5" pos:end="23:27"><type pos:start="23:5" pos:end="23:12"><name pos:start="23:5" pos:end="23:12">qemu_irq</name></type> <name pos:start="23:14" pos:end="23:20">rtc_irq</name> <init pos:start="23:22" pos:end="23:27">= <expr pos:start="23:24" pos:end="23:27"><name pos:start="23:24" pos:end="23:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:22"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:12">qemu_irq</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:22">a20_line</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:53"><decl pos:start="27:5" pos:end="27:20"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">ISADevice</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:20">i8042</name></decl>, <decl pos:start="27:23" pos:end="27:29"><type ref="prev" pos:start="27:5" pos:end="27:15"><modifier pos:start="27:23" pos:end="27:23">*</modifier></type><name pos:start="27:24" pos:end="27:29">port92</name></decl>, <decl pos:start="27:32" pos:end="27:39"><type ref="prev" pos:start="27:5" pos:end="27:15"><modifier pos:start="27:32" pos:end="27:32">*</modifier></type><name pos:start="27:33" pos:end="27:39">vmmouse</name></decl>, <decl pos:start="27:42" pos:end="27:52"><type ref="prev" pos:start="27:5" pos:end="27:15"><modifier pos:start="27:42" pos:end="27:42">*</modifier></type><name pos:start="27:43" pos:end="27:45">pit</name> <init pos:start="27:47" pos:end="27:52">= <expr pos:start="27:49" pos:end="27:52"><name pos:start="27:49" pos:end="27:52">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:55"><decl pos:start="31:5" pos:end="31:54"><type pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:16">MemoryRegion</name> <modifier pos:start="31:18" pos:end="31:18">*</modifier></type><name pos:start="31:19" pos:end="31:29">ioport80_io</name> <init pos:start="31:31" pos:end="31:54">= <expr pos:start="31:33" pos:end="31:54"><call pos:start="31:33" pos:end="31:54"><name pos:start="31:33" pos:end="31:37">g_new</name><argument_list pos:start="31:38" pos:end="31:54">(<argument pos:start="31:39" pos:end="31:50"><expr pos:start="31:39" pos:end="31:50"><name pos:start="31:39" pos:end="31:50">MemoryRegion</name></expr></argument>, <argument pos:start="31:53" pos:end="31:53"><expr pos:start="31:53" pos:end="31:53"><literal type="number" pos:start="31:53" pos:end="31:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:55"><decl pos:start="33:5" pos:end="33:54"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">MemoryRegion</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:29">ioportF0_io</name> <init pos:start="33:31" pos:end="33:54">= <expr pos:start="33:33" pos:end="33:54"><call pos:start="33:33" pos:end="33:54"><name pos:start="33:33" pos:end="33:37">g_new</name><argument_list pos:start="33:38" pos:end="33:54">(<argument pos:start="33:39" pos:end="33:50"><expr pos:start="33:39" pos:end="33:50"><name pos:start="33:39" pos:end="33:50">MemoryRegion</name></expr></argument>, <argument pos:start="33:53" pos:end="33:53"><expr pos:start="33:53" pos:end="33:53"><literal type="number" pos:start="33:53" pos:end="33:53">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:84"><expr pos:start="37:5" pos:end="37:83"><call pos:start="37:5" pos:end="37:83"><name pos:start="37:5" pos:end="37:25">memory_region_init_io</name><argument_list pos:start="37:26" pos:end="37:83">(<argument pos:start="37:27" pos:end="37:37"><expr pos:start="37:27" pos:end="37:37"><name pos:start="37:27" pos:end="37:37">ioport80_io</name></expr></argument>, <argument pos:start="37:40" pos:end="37:43"><expr pos:start="37:40" pos:end="37:43"><name pos:start="37:40" pos:end="37:43">NULL</name></expr></argument>, <argument pos:start="37:46" pos:end="37:61"><expr pos:start="37:46" pos:end="37:61"><operator pos:start="37:46" pos:end="37:46">&amp;</operator><name pos:start="37:47" pos:end="37:61">ioport80_io_ops</name></expr></argument>, <argument pos:start="37:64" pos:end="37:67"><expr pos:start="37:64" pos:end="37:67"><name pos:start="37:64" pos:end="37:67">NULL</name></expr></argument>, <argument pos:start="37:70" pos:end="37:79"><expr pos:start="37:70" pos:end="37:79"><literal type="string" pos:start="37:70" pos:end="37:79">"ioport80"</literal></expr></argument>, <argument pos:start="37:82" pos:end="37:82"><expr pos:start="37:82" pos:end="37:82"><literal type="number" pos:start="37:82" pos:end="37:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:78"><expr pos:start="39:5" pos:end="39:77"><call pos:start="39:5" pos:end="39:77"><name pos:start="39:5" pos:end="39:31">memory_region_add_subregion</name><argument_list pos:start="39:32" pos:end="39:77">(<argument pos:start="39:33" pos:end="39:57"><expr pos:start="39:33" pos:end="39:57"><name pos:start="39:33" pos:end="39:57"><name pos:start="39:33" pos:end="39:39">isa_bus</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:57">address_space_io</name></name></expr></argument>, <argument pos:start="39:60" pos:end="39:63"><expr pos:start="39:60" pos:end="39:63"><literal type="number" pos:start="39:60" pos:end="39:63">0x80</literal></expr></argument>, <argument pos:start="39:66" pos:end="39:76"><expr pos:start="39:66" pos:end="39:76"><name pos:start="39:66" pos:end="39:76">ioport80_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:84"><expr pos:start="43:5" pos:end="43:83"><call pos:start="43:5" pos:end="43:83"><name pos:start="43:5" pos:end="43:25">memory_region_init_io</name><argument_list pos:start="43:26" pos:end="43:83">(<argument pos:start="43:27" pos:end="43:37"><expr pos:start="43:27" pos:end="43:37"><name pos:start="43:27" pos:end="43:37">ioportF0_io</name></expr></argument>, <argument pos:start="43:40" pos:end="43:43"><expr pos:start="43:40" pos:end="43:43"><name pos:start="43:40" pos:end="43:43">NULL</name></expr></argument>, <argument pos:start="43:46" pos:end="43:61"><expr pos:start="43:46" pos:end="43:61"><operator pos:start="43:46" pos:end="43:46">&amp;</operator><name pos:start="43:47" pos:end="43:61">ioportF0_io_ops</name></expr></argument>, <argument pos:start="43:64" pos:end="43:67"><expr pos:start="43:64" pos:end="43:67"><name pos:start="43:64" pos:end="43:67">NULL</name></expr></argument>, <argument pos:start="43:70" pos:end="43:79"><expr pos:start="43:70" pos:end="43:79"><literal type="string" pos:start="43:70" pos:end="43:79">"ioportF0"</literal></expr></argument>, <argument pos:start="43:82" pos:end="43:82"><expr pos:start="43:82" pos:end="43:82"><literal type="number" pos:start="43:82" pos:end="43:82">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:78"><expr pos:start="45:5" pos:end="45:77"><call pos:start="45:5" pos:end="45:77"><name pos:start="45:5" pos:end="45:31">memory_region_add_subregion</name><argument_list pos:start="45:32" pos:end="45:77">(<argument pos:start="45:33" pos:end="45:57"><expr pos:start="45:33" pos:end="45:57"><name pos:start="45:33" pos:end="45:57"><name pos:start="45:33" pos:end="45:39">isa_bus</name><operator pos:start="45:40" pos:end="45:41">-&gt;</operator><name pos:start="45:42" pos:end="45:57">address_space_io</name></name></expr></argument>, <argument pos:start="45:60" pos:end="45:63"><expr pos:start="45:60" pos:end="45:63"><literal type="number" pos:start="45:60" pos:end="45:63">0xf0</literal></expr></argument>, <argument pos:start="45:66" pos:end="45:76"><expr pos:start="45:66" pos:end="45:76"><name pos:start="45:66" pos:end="45:76">ioportF0_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="59:7">/*

     * Check if an HPET shall be created.

     *

     * Without KVM_CAP_PIT_STATE2, we cannot switch off the in-kernel PIT

     * when the HPET wants to take over. Thus we have to disable the latter.

     */</comment>

    <if_stmt pos:start="61:5" pos:end="107:5"><if pos:start="61:5" pos:end="107:5">if <condition pos:start="61:8" pos:end="61:71">(<expr pos:start="61:9" pos:end="61:70"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:16">no_hpet</name> <operator pos:start="61:18" pos:end="61:19">&amp;&amp;</operator> <operator pos:start="61:21" pos:end="61:21">(</operator><operator pos:start="61:22" pos:end="61:22">!</operator><call pos:start="61:23" pos:end="61:45"><name pos:start="61:23" pos:end="61:43">kvm_irqchip_in_kernel</name><argument_list pos:start="61:44" pos:end="61:45">()</argument_list></call> <operator pos:start="61:47" pos:end="61:48">||</operator> <call pos:start="61:50" pos:end="61:69"><name pos:start="61:50" pos:end="61:67">kvm_has_pit_state2</name><argument_list pos:start="61:68" pos:end="61:69">()</argument_list></call><operator pos:start="61:70" pos:end="61:70">)</operator></expr>)</condition> <block pos:start="61:73" pos:end="107:5">{<block_content pos:start="65:9" pos:end="105:9">

        <comment type="block" pos:start="63:9" pos:end="63:79">/* In order to set property, here not using sysbus_try_create_simple */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:48"><expr pos:start="65:9" pos:end="65:47"><name pos:start="65:9" pos:end="65:12">hpet</name> <operator pos:start="65:14" pos:end="65:14">=</operator> <call pos:start="65:16" pos:end="65:47"><name pos:start="65:16" pos:end="65:30">qdev_try_create</name><argument_list pos:start="65:31" pos:end="65:47">(<argument pos:start="65:32" pos:end="65:35"><expr pos:start="65:32" pos:end="65:35"><name pos:start="65:32" pos:end="65:35">NULL</name></expr></argument>, <argument pos:start="65:38" pos:end="65:46"><expr pos:start="65:38" pos:end="65:46"><name pos:start="65:38" pos:end="65:46">TYPE_HPET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="105:9"><if pos:start="67:9" pos:end="105:9">if <condition pos:start="67:12" pos:end="67:17">(<expr pos:start="67:13" pos:end="67:16"><name pos:start="67:13" pos:end="67:16">hpet</name></expr>)</condition> <block pos:start="67:19" pos:end="105:9">{<block_content pos:start="77:13" pos:end="103:66">

            <comment type="block" pos:start="69:13" pos:end="75:15">/* For pc-piix-*, hpet's intcap is always IRQ2. For pc-q35-1.7

             * and earlier, use IRQ2 for compat. Otherwise, use IRQ16~23,

             * IRQ8 and IRQ2.

             */</comment>

            <decl_stmt pos:start="77:13" pos:end="79:39"><decl pos:start="77:13" pos:end="79:38"><type pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:19">uint8_t</name></type> <name pos:start="77:21" pos:end="77:26">compat</name> <init pos:start="77:28" pos:end="79:38">= <expr pos:start="77:30" pos:end="79:38"><call pos:start="77:30" pos:end="79:38"><name pos:start="77:30" pos:end="77:52">object_property_get_int</name><argument_list pos:start="77:53" pos:end="79:38">(<argument pos:start="77:54" pos:end="77:65"><expr pos:start="77:54" pos:end="77:65"><call pos:start="77:54" pos:end="77:65"><name pos:start="77:54" pos:end="77:59">OBJECT</name><argument_list pos:start="77:60" pos:end="77:65">(<argument pos:start="77:61" pos:end="77:64"><expr pos:start="77:61" pos:end="77:64"><name pos:start="77:61" pos:end="77:64">hpet</name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="79:21" pos:end="79:31"><expr pos:start="79:21" pos:end="79:31"><name pos:start="79:21" pos:end="79:31">HPET_INTCAP</name></expr></argument>, <argument pos:start="79:34" pos:end="79:37"><expr pos:start="79:34" pos:end="79:37"><name pos:start="79:34" pos:end="79:37">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="81:13" pos:end="85:13"><if pos:start="81:13" pos:end="85:13">if <condition pos:start="81:16" pos:end="81:24">(<expr pos:start="81:17" pos:end="81:23"><operator pos:start="81:17" pos:end="81:17">!</operator><name pos:start="81:18" pos:end="81:23">compat</name></expr>)</condition> <block pos:start="81:26" pos:end="85:13">{<block_content pos:start="83:17" pos:end="83:67">

                <expr_stmt pos:start="83:17" pos:end="83:67"><expr pos:start="83:17" pos:end="83:66"><call pos:start="83:17" pos:end="83:66"><name pos:start="83:17" pos:end="83:36">qdev_prop_set_uint32</name><argument_list pos:start="83:37" pos:end="83:66">(<argument pos:start="83:38" pos:end="83:41"><expr pos:start="83:38" pos:end="83:41"><name pos:start="83:38" pos:end="83:41">hpet</name></expr></argument>, <argument pos:start="83:44" pos:end="83:54"><expr pos:start="83:44" pos:end="83:54"><name pos:start="83:44" pos:end="83:54">HPET_INTCAP</name></expr></argument>, <argument pos:start="83:57" pos:end="83:65"><expr pos:start="83:57" pos:end="83:65"><name pos:start="83:57" pos:end="83:65">hpet_irqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:35"><expr pos:start="87:13" pos:end="87:34"><call pos:start="87:13" pos:end="87:34"><name pos:start="87:13" pos:end="87:28">qdev_init_nofail</name><argument_list pos:start="87:29" pos:end="87:34">(<argument pos:start="87:30" pos:end="87:33"><expr pos:start="87:30" pos:end="87:33"><name pos:start="87:30" pos:end="87:33">hpet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:64"><expr pos:start="89:13" pos:end="89:63"><call pos:start="89:13" pos:end="89:63"><name pos:start="89:13" pos:end="89:27">sysbus_mmio_map</name><argument_list pos:start="89:28" pos:end="89:63">(<argument pos:start="89:29" pos:end="89:48"><expr pos:start="89:29" pos:end="89:48"><call pos:start="89:29" pos:end="89:48"><name pos:start="89:29" pos:end="89:42">SYS_BUS_DEVICE</name><argument_list pos:start="89:43" pos:end="89:48">(<argument pos:start="89:44" pos:end="89:47"><expr pos:start="89:44" pos:end="89:47"><name pos:start="89:44" pos:end="89:47">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:51" pos:end="89:51"><expr pos:start="89:51" pos:end="89:51"><literal type="number" pos:start="89:51" pos:end="89:51">0</literal></expr></argument>, <argument pos:start="89:54" pos:end="89:62"><expr pos:start="89:54" pos:end="89:62"><name pos:start="89:54" pos:end="89:62">HPET_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="93:13" pos:end="97:13">for <control pos:start="93:17" pos:end="93:46">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">i</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:41"><expr pos:start="93:25" pos:end="93:40"><name pos:start="93:25" pos:end="93:25">i</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <name pos:start="93:29" pos:end="93:40">GSI_NUM_PINS</name></expr>;</condition> <incr pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><name pos:start="93:43" pos:end="93:43">i</name><operator pos:start="93:44" pos:end="93:45">++</operator></expr></incr>)</control> <block pos:start="93:48" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:68">

                <expr_stmt pos:start="95:17" pos:end="95:68"><expr pos:start="95:17" pos:end="95:67"><call pos:start="95:17" pos:end="95:67"><name pos:start="95:17" pos:end="95:34">sysbus_connect_irq</name><argument_list pos:start="95:35" pos:end="95:67">(<argument pos:start="95:36" pos:end="95:55"><expr pos:start="95:36" pos:end="95:55"><call pos:start="95:36" pos:end="95:55"><name pos:start="95:36" pos:end="95:49">SYS_BUS_DEVICE</name><argument_list pos:start="95:50" pos:end="95:55">(<argument pos:start="95:51" pos:end="95:54"><expr pos:start="95:51" pos:end="95:54"><name pos:start="95:51" pos:end="95:54">hpet</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:58" pos:end="95:58"><expr pos:start="95:58" pos:end="95:58"><name pos:start="95:58" pos:end="95:58">i</name></expr></argument>, <argument pos:start="95:61" pos:end="95:66"><expr pos:start="95:61" pos:end="95:66"><name pos:start="95:61" pos:end="95:66"><name pos:start="95:61" pos:end="95:63">gsi</name><index pos:start="95:64" pos:end="95:66">[<expr pos:start="95:65" pos:end="95:65"><name pos:start="95:65" pos:end="95:65">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="99:13" pos:end="99:29"><expr pos:start="99:13" pos:end="99:28"><name pos:start="99:13" pos:end="99:23">pit_isa_irq</name> <operator pos:start="99:25" pos:end="99:25">=</operator> <operator pos:start="99:27" pos:end="99:27">-</operator><literal type="number" pos:start="99:28" pos:end="99:28">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:70"><expr pos:start="101:13" pos:end="101:69"><name pos:start="101:13" pos:end="101:23">pit_alt_irq</name> <operator pos:start="101:25" pos:end="101:25">=</operator> <call pos:start="101:27" pos:end="101:69"><name pos:start="101:27" pos:end="101:42">qdev_get_gpio_in</name><argument_list pos:start="101:43" pos:end="101:69">(<argument pos:start="101:44" pos:end="101:47"><expr pos:start="101:44" pos:end="101:47"><name pos:start="101:44" pos:end="101:47">hpet</name></expr></argument>, <argument pos:start="101:50" pos:end="101:68"><expr pos:start="101:50" pos:end="101:68"><name pos:start="101:50" pos:end="101:68">HPET_LEGACY_PIT_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:66"><expr pos:start="103:13" pos:end="103:65"><name pos:start="103:13" pos:end="103:19">rtc_irq</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="103:65"><name pos:start="103:23" pos:end="103:38">qdev_get_gpio_in</name><argument_list pos:start="103:39" pos:end="103:65">(<argument pos:start="103:40" pos:end="103:43"><expr pos:start="103:40" pos:end="103:43"><name pos:start="103:40" pos:end="103:43">hpet</name></expr></argument>, <argument pos:start="103:46" pos:end="103:64"><expr pos:start="103:46" pos:end="103:64"><name pos:start="103:46" pos:end="103:64">HPET_LEGACY_RTC_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:50"><expr pos:start="109:5" pos:end="109:49"><operator pos:start="109:5" pos:end="109:5">*</operator><name pos:start="109:6" pos:end="109:14">rtc_state</name> <operator pos:start="109:16" pos:end="109:16">=</operator> <call pos:start="109:18" pos:end="109:49"><name pos:start="109:18" pos:end="109:25">rtc_init</name><argument_list pos:start="109:26" pos:end="109:49">(<argument pos:start="109:27" pos:end="109:33"><expr pos:start="109:27" pos:end="109:33"><name pos:start="109:27" pos:end="109:33">isa_bus</name></expr></argument>, <argument pos:start="109:36" pos:end="109:39"><expr pos:start="109:36" pos:end="109:39"><literal type="number" pos:start="109:36" pos:end="109:39">2000</literal></expr></argument>, <argument pos:start="109:42" pos:end="109:48"><expr pos:start="109:42" pos:end="109:48"><name pos:start="109:42" pos:end="109:48">rtc_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:52"><expr pos:start="113:5" pos:end="113:51"><call pos:start="113:5" pos:end="113:51"><name pos:start="113:5" pos:end="113:26">qemu_register_boot_set</name><argument_list pos:start="113:27" pos:end="113:51">(<argument pos:start="113:28" pos:end="113:38"><expr pos:start="113:28" pos:end="113:38"><name pos:start="113:28" pos:end="113:38">pc_boot_set</name></expr></argument>, <argument pos:start="113:41" pos:end="113:50"><expr pos:start="113:41" pos:end="113:50"><operator pos:start="113:41" pos:end="113:41">*</operator><name pos:start="113:42" pos:end="113:50">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="117:5" pos:end="139:5"><if pos:start="117:5" pos:end="139:5">if <condition pos:start="117:8" pos:end="117:23">(<expr pos:start="117:9" pos:end="117:22"><operator pos:start="117:9" pos:end="117:9">!</operator><call pos:start="117:10" pos:end="117:22"><name pos:start="117:10" pos:end="117:20">xen_enabled</name><argument_list pos:start="117:21" pos:end="117:22">()</argument_list></call></expr>)</condition> <block pos:start="117:25" pos:end="139:5">{<block_content pos:start="119:9" pos:end="137:33">

        <if_stmt pos:start="119:9" pos:end="127:9"><if pos:start="119:9" pos:end="123:9">if <condition pos:start="119:12" pos:end="119:36">(<expr pos:start="119:13" pos:end="119:35"><call pos:start="119:13" pos:end="119:35"><name pos:start="119:13" pos:end="119:33">kvm_irqchip_in_kernel</name><argument_list pos:start="119:34" pos:end="119:35">()</argument_list></call></expr>)</condition> <block pos:start="119:38" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:46">

            <expr_stmt pos:start="121:13" pos:end="121:46"><expr pos:start="121:13" pos:end="121:45"><name pos:start="121:13" pos:end="121:15">pit</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <call pos:start="121:19" pos:end="121:45"><name pos:start="121:19" pos:end="121:30">kvm_pit_init</name><argument_list pos:start="121:31" pos:end="121:45">(<argument pos:start="121:32" pos:end="121:38"><expr pos:start="121:32" pos:end="121:38"><name pos:start="121:32" pos:end="121:38">isa_bus</name></expr></argument>, <argument pos:start="121:41" pos:end="121:44"><expr pos:start="121:41" pos:end="121:44"><literal type="number" pos:start="121:41" pos:end="121:44">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="123:11" pos:end="127:9">else <block pos:start="123:16" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:68">

            <expr_stmt pos:start="125:13" pos:end="125:68"><expr pos:start="125:13" pos:end="125:67"><name pos:start="125:13" pos:end="125:15">pit</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:67"><name pos:start="125:19" pos:end="125:26">pit_init</name><argument_list pos:start="125:27" pos:end="125:67">(<argument pos:start="125:28" pos:end="125:34"><expr pos:start="125:28" pos:end="125:34"><name pos:start="125:28" pos:end="125:34">isa_bus</name></expr></argument>, <argument pos:start="125:37" pos:end="125:40"><expr pos:start="125:37" pos:end="125:40"><literal type="number" pos:start="125:37" pos:end="125:40">0x40</literal></expr></argument>, <argument pos:start="125:43" pos:end="125:53"><expr pos:start="125:43" pos:end="125:53"><name pos:start="125:43" pos:end="125:53">pit_isa_irq</name></expr></argument>, <argument pos:start="125:56" pos:end="125:66"><expr pos:start="125:56" pos:end="125:66"><name pos:start="125:56" pos:end="125:66">pit_alt_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:17">(<expr pos:start="129:13" pos:end="129:16"><name pos:start="129:13" pos:end="129:16">hpet</name></expr>)</condition> <block pos:start="129:19" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:77">

            <comment type="block" pos:start="131:13" pos:end="131:64">/* connect PIT to output control line of the HPET */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:77"><expr pos:start="133:13" pos:end="133:76"><call pos:start="133:13" pos:end="133:76"><name pos:start="133:13" pos:end="133:33">qdev_connect_gpio_out</name><argument_list pos:start="133:34" pos:end="133:76">(<argument pos:start="133:35" pos:end="133:38"><expr pos:start="133:35" pos:end="133:38"><name pos:start="133:35" pos:end="133:38">hpet</name></expr></argument>, <argument pos:start="133:41" pos:end="133:41"><expr pos:start="133:41" pos:end="133:41"><literal type="number" pos:start="133:41" pos:end="133:41">0</literal></expr></argument>, <argument pos:start="133:44" pos:end="133:75"><expr pos:start="133:44" pos:end="133:75"><call pos:start="133:44" pos:end="133:75"><name pos:start="133:44" pos:end="133:59">qdev_get_gpio_in</name><argument_list pos:start="133:60" pos:end="133:75">(<argument pos:start="133:61" pos:end="133:71"><expr pos:start="133:61" pos:end="133:71"><call pos:start="133:61" pos:end="133:71"><name pos:start="133:61" pos:end="133:66">DEVICE</name><argument_list pos:start="133:67" pos:end="133:71">(<argument pos:start="133:68" pos:end="133:70"><expr pos:start="133:68" pos:end="133:70"><name pos:start="133:68" pos:end="133:70">pit</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="133:74" pos:end="133:74"><expr pos:start="133:74" pos:end="133:74"><literal type="number" pos:start="133:74" pos:end="133:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:33"><expr pos:start="137:9" pos:end="137:32"><call pos:start="137:9" pos:end="137:32"><name pos:start="137:9" pos:end="137:18">pcspk_init</name><argument_list pos:start="137:19" pos:end="137:32">(<argument pos:start="137:20" pos:end="137:26"><expr pos:start="137:20" pos:end="137:26"><name pos:start="137:20" pos:end="137:26">isa_bus</name></expr></argument>, <argument pos:start="137:29" pos:end="137:31"><expr pos:start="137:29" pos:end="137:31"><name pos:start="137:29" pos:end="137:31">pit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:51"><expr pos:start="143:5" pos:end="143:50"><call pos:start="143:5" pos:end="143:50"><name pos:start="143:5" pos:end="143:23">serial_hds_isa_init</name><argument_list pos:start="143:24" pos:end="143:50">(<argument pos:start="143:25" pos:end="143:31"><expr pos:start="143:25" pos:end="143:31"><name pos:start="143:25" pos:end="143:31">isa_bus</name></expr></argument>, <argument pos:start="143:34" pos:end="143:49"><expr pos:start="143:34" pos:end="143:49"><name pos:start="143:34" pos:end="143:49">MAX_SERIAL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:55"><expr pos:start="145:5" pos:end="145:54"><call pos:start="145:5" pos:end="145:54"><name pos:start="145:5" pos:end="145:25">parallel_hds_isa_init</name><argument_list pos:start="145:26" pos:end="145:54">(<argument pos:start="145:27" pos:end="145:33"><expr pos:start="145:27" pos:end="145:33"><name pos:start="145:27" pos:end="145:33">isa_bus</name></expr></argument>, <argument pos:start="145:36" pos:end="145:53"><expr pos:start="145:36" pos:end="145:53"><name pos:start="145:36" pos:end="145:53">MAX_PARALLEL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:72"><expr pos:start="149:5" pos:end="149:71"><name pos:start="149:5" pos:end="149:12">a20_line</name> <operator pos:start="149:14" pos:end="149:14">=</operator> <call pos:start="149:16" pos:end="149:71"><name pos:start="149:16" pos:end="149:33">qemu_allocate_irqs</name><argument_list pos:start="149:34" pos:end="149:71">(<argument pos:start="149:35" pos:end="149:56"><expr pos:start="149:35" pos:end="149:56"><name pos:start="149:35" pos:end="149:56">handle_a20_line_change</name></expr></argument>, <argument pos:start="149:59" pos:end="149:67"><expr pos:start="149:59" pos:end="149:67"><name pos:start="149:59" pos:end="149:67">first_cpu</name></expr></argument>, <argument pos:start="149:70" pos:end="149:70"><expr pos:start="149:70" pos:end="149:70"><literal type="number" pos:start="149:70" pos:end="149:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:48"><expr pos:start="151:5" pos:end="151:47"><name pos:start="151:5" pos:end="151:9">i8042</name> <operator pos:start="151:11" pos:end="151:11">=</operator> <call pos:start="151:13" pos:end="151:47"><name pos:start="151:13" pos:end="151:29">isa_create_simple</name><argument_list pos:start="151:30" pos:end="151:47">(<argument pos:start="151:31" pos:end="151:37"><expr pos:start="151:31" pos:end="151:37"><name pos:start="151:31" pos:end="151:37">isa_bus</name></expr></argument>, <argument pos:start="151:40" pos:end="151:46"><expr pos:start="151:40" pos:end="151:46"><literal type="string" pos:start="151:40" pos:end="151:46">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:46"><expr pos:start="153:5" pos:end="153:45"><call pos:start="153:5" pos:end="153:45"><name pos:start="153:5" pos:end="153:24">i8042_setup_a20_line</name><argument_list pos:start="153:25" pos:end="153:45">(<argument pos:start="153:26" pos:end="153:30"><expr pos:start="153:26" pos:end="153:30"><name pos:start="153:26" pos:end="153:30">i8042</name></expr></argument>, <argument pos:start="153:33" pos:end="153:44"><expr pos:start="153:33" pos:end="153:44"><operator pos:start="153:33" pos:end="153:33">&amp;</operator><name pos:start="153:34" pos:end="153:44"><name pos:start="153:34" pos:end="153:41">a20_line</name><index pos:start="153:42" pos:end="153:44">[<expr pos:start="153:43" pos:end="153:43"><literal type="number" pos:start="153:43" pos:end="153:43">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="155:5" pos:end="165:5"><if pos:start="155:5" pos:end="161:5">if <condition pos:start="155:8" pos:end="155:19">(<expr pos:start="155:9" pos:end="155:18"><operator pos:start="155:9" pos:end="155:9">!</operator><name pos:start="155:10" pos:end="155:18">no_vmport</name></expr>)</condition> <block pos:start="155:21" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:53">

        <expr_stmt pos:start="157:9" pos:end="157:29"><expr pos:start="157:9" pos:end="157:28"><call pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:19">vmport_init</name><argument_list pos:start="157:20" pos:end="157:28">(<argument pos:start="157:21" pos:end="157:27"><expr pos:start="157:21" pos:end="157:27"><name pos:start="157:21" pos:end="157:27">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:53"><expr pos:start="159:9" pos:end="159:52"><name pos:start="159:9" pos:end="159:15">vmmouse</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:52"><name pos:start="159:19" pos:end="159:32">isa_try_create</name><argument_list pos:start="159:33" pos:end="159:52">(<argument pos:start="159:34" pos:end="159:40"><expr pos:start="159:34" pos:end="159:40"><name pos:start="159:34" pos:end="159:40">isa_bus</name></expr></argument>, <argument pos:start="159:43" pos:end="159:51"><expr pos:start="159:43" pos:end="159:51"><literal type="string" pos:start="159:43" pos:end="159:51">"vmmouse"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="165:5">else <block pos:start="161:12" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:23">

        <expr_stmt pos:start="163:9" pos:end="163:23"><expr pos:start="163:9" pos:end="163:22"><name pos:start="163:9" pos:end="163:15">vmmouse</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <name pos:start="163:19" pos:end="163:22">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="167:5" pos:end="175:5"><if pos:start="167:5" pos:end="175:5">if <condition pos:start="167:8" pos:end="167:16">(<expr pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:15">vmmouse</name></expr>)</condition> <block pos:start="167:18" pos:end="175:5">{<block_content pos:start="169:9" pos:end="173:30">

        <decl_stmt pos:start="169:9" pos:end="169:43"><decl pos:start="169:9" pos:end="169:42"><type pos:start="169:9" pos:end="169:21"><name pos:start="169:9" pos:end="169:19">DeviceState</name> <modifier pos:start="169:21" pos:end="169:21">*</modifier></type><name pos:start="169:22" pos:end="169:24">dev</name> <init pos:start="169:26" pos:end="169:42">= <expr pos:start="169:28" pos:end="169:42"><call pos:start="169:28" pos:end="169:42"><name pos:start="169:28" pos:end="169:33">DEVICE</name><argument_list pos:start="169:34" pos:end="169:42">(<argument pos:start="169:35" pos:end="169:41"><expr pos:start="169:35" pos:end="169:41"><name pos:start="169:35" pos:end="169:41">vmmouse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:51"><expr pos:start="171:9" pos:end="171:50"><call pos:start="171:9" pos:end="171:50"><name pos:start="171:9" pos:end="171:25">qdev_prop_set_ptr</name><argument_list pos:start="171:26" pos:end="171:50">(<argument pos:start="171:27" pos:end="171:29"><expr pos:start="171:27" pos:end="171:29"><name pos:start="171:27" pos:end="171:29">dev</name></expr></argument>, <argument pos:start="171:32" pos:end="171:42"><expr pos:start="171:32" pos:end="171:42"><literal type="string" pos:start="171:32" pos:end="171:42">"ps2_mouse"</literal></expr></argument>, <argument pos:start="171:45" pos:end="171:49"><expr pos:start="171:45" pos:end="171:49"><name pos:start="171:45" pos:end="171:49">i8042</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:30"><expr pos:start="173:9" pos:end="173:29"><call pos:start="173:9" pos:end="173:29"><name pos:start="173:9" pos:end="173:24">qdev_init_nofail</name><argument_list pos:start="173:25" pos:end="173:29">(<argument pos:start="173:26" pos:end="173:28"><expr pos:start="173:26" pos:end="173:28"><name pos:start="173:26" pos:end="173:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:50"><expr pos:start="177:5" pos:end="177:49"><name pos:start="177:5" pos:end="177:10">port92</name> <operator pos:start="177:12" pos:end="177:12">=</operator> <call pos:start="177:14" pos:end="177:49"><name pos:start="177:14" pos:end="177:30">isa_create_simple</name><argument_list pos:start="177:31" pos:end="177:49">(<argument pos:start="177:32" pos:end="177:38"><expr pos:start="177:32" pos:end="177:38"><name pos:start="177:32" pos:end="177:38">isa_bus</name></expr></argument>, <argument pos:start="177:41" pos:end="177:48"><expr pos:start="177:41" pos:end="177:48"><literal type="string" pos:start="177:41" pos:end="177:48">"port92"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:38"><expr pos:start="179:5" pos:end="179:37"><call pos:start="179:5" pos:end="179:37"><name pos:start="179:5" pos:end="179:15">port92_init</name><argument_list pos:start="179:16" pos:end="179:37">(<argument pos:start="179:17" pos:end="179:22"><expr pos:start="179:17" pos:end="179:22"><name pos:start="179:17" pos:end="179:22">port92</name></expr></argument>, <argument pos:start="179:25" pos:end="179:36"><expr pos:start="179:25" pos:end="179:36"><operator pos:start="179:25" pos:end="179:25">&amp;</operator><name pos:start="179:26" pos:end="179:36"><name pos:start="179:26" pos:end="179:33">a20_line</name><index pos:start="179:34" pos:end="179:36">[<expr pos:start="179:35" pos:end="179:35"><literal type="number" pos:start="179:35" pos:end="179:35">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:65"><expr pos:start="183:5" pos:end="183:64"><name pos:start="183:5" pos:end="183:16">cpu_exit_irq</name> <operator pos:start="183:18" pos:end="183:18">=</operator> <call pos:start="183:20" pos:end="183:64"><name pos:start="183:20" pos:end="183:37">qemu_allocate_irqs</name><argument_list pos:start="183:38" pos:end="183:64">(<argument pos:start="183:39" pos:end="183:54"><expr pos:start="183:39" pos:end="183:54"><name pos:start="183:39" pos:end="183:54">cpu_request_exit</name></expr></argument>, <argument pos:start="183:57" pos:end="183:60"><expr pos:start="183:57" pos:end="183:60"><name pos:start="183:57" pos:end="183:60">NULL</name></expr></argument>, <argument pos:start="183:63" pos:end="183:63"><expr pos:start="183:63" pos:end="183:63"><literal type="number" pos:start="183:63" pos:end="183:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:30"><expr pos:start="185:5" pos:end="185:29"><call pos:start="185:5" pos:end="185:29"><name pos:start="185:5" pos:end="185:12">DMA_init</name><argument_list pos:start="185:13" pos:end="185:29">(<argument pos:start="185:14" pos:end="185:14"><expr pos:start="185:14" pos:end="185:14"><literal type="number" pos:start="185:14" pos:end="185:14">0</literal></expr></argument>, <argument pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:28"><name pos:start="185:17" pos:end="185:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="189:5" pos:end="195:5">for<control pos:start="189:8" pos:end="189:31">(<init pos:start="189:9" pos:end="189:14"><expr pos:start="189:9" pos:end="189:13"><name pos:start="189:9" pos:end="189:9">i</name> <operator pos:start="189:11" pos:end="189:11">=</operator> <literal type="number" pos:start="189:13" pos:end="189:13">0</literal></expr>;</init> <condition pos:start="189:16" pos:end="189:26"><expr pos:start="189:16" pos:end="189:25"><name pos:start="189:16" pos:end="189:16">i</name> <operator pos:start="189:18" pos:end="189:18">&lt;</operator> <name pos:start="189:20" pos:end="189:25">MAX_FD</name></expr>;</condition> <incr pos:start="189:28" pos:end="189:30"><expr pos:start="189:28" pos:end="189:30"><name pos:start="189:28" pos:end="189:28">i</name><operator pos:start="189:29" pos:end="189:30">++</operator></expr></incr>)</control> <block pos:start="189:33" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:33">

        <expr_stmt pos:start="191:9" pos:end="191:43"><expr pos:start="191:9" pos:end="191:42"><name pos:start="191:9" pos:end="191:13"><name pos:start="191:9" pos:end="191:10">fd</name><index pos:start="191:11" pos:end="191:13">[<expr pos:start="191:12" pos:end="191:12"><name pos:start="191:12" pos:end="191:12">i</name></expr>]</index></name> <operator pos:start="191:15" pos:end="191:15">=</operator> <call pos:start="191:17" pos:end="191:42"><name pos:start="191:17" pos:end="191:25">drive_get</name><argument_list pos:start="191:26" pos:end="191:42">(<argument pos:start="191:27" pos:end="191:35"><expr pos:start="191:27" pos:end="191:35"><name pos:start="191:27" pos:end="191:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="191:38" pos:end="191:38"><expr pos:start="191:38" pos:end="191:38"><literal type="number" pos:start="191:38" pos:end="191:38">0</literal></expr></argument>, <argument pos:start="191:41" pos:end="191:41"><expr pos:start="191:41" pos:end="191:41"><name pos:start="191:41" pos:end="191:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:33"><expr pos:start="193:9" pos:end="193:32"><name pos:start="193:9" pos:end="193:21">create_fdctrl</name> <operator pos:start="193:23" pos:end="193:24">|=</operator> <operator pos:start="193:26" pos:end="193:26">!</operator><operator pos:start="193:27" pos:end="193:27">!</operator><name pos:start="193:28" pos:end="193:32"><name pos:start="193:28" pos:end="193:29">fd</name><index pos:start="193:30" pos:end="193:32">[<expr pos:start="193:31" pos:end="193:31"><name pos:start="193:31" pos:end="193:31">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="197:5" pos:end="201:5"><if pos:start="197:5" pos:end="201:5">if <condition pos:start="197:8" pos:end="197:22">(<expr pos:start="197:9" pos:end="197:21"><name pos:start="197:9" pos:end="197:21">create_fdctrl</name></expr>)</condition> <block pos:start="197:24" pos:end="201:5">{<block_content pos:start="199:9" pos:end="199:37">

        <expr_stmt pos:start="199:9" pos:end="199:37"><expr pos:start="199:9" pos:end="199:36"><call pos:start="199:9" pos:end="199:36"><name pos:start="199:9" pos:end="199:23">fdctrl_init_isa</name><argument_list pos:start="199:24" pos:end="199:36">(<argument pos:start="199:25" pos:end="199:31"><expr pos:start="199:25" pos:end="199:31"><name pos:start="199:25" pos:end="199:31">isa_bus</name></expr></argument>, <argument pos:start="199:34" pos:end="199:35"><expr pos:start="199:34" pos:end="199:35"><name pos:start="199:34" pos:end="199:35">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
