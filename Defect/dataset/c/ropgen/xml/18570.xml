<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18570.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:5"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_rate_control_init</name><parameter_list pos:start="1:25" pos:end="1:43">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:39">MpegEncContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:5">{<block_content pos:start="5:5" pos:end="71:12">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:24"><name pos:start="5:5" pos:end="5:22">RateControlContext</name> <modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">rcc</name><init pos:start="5:28" pos:end="5:43">= <expr pos:start="5:30" pos:end="5:43"><operator pos:start="5:30" pos:end="5:30">&amp;</operator><name pos:start="5:31" pos:end="5:43"><name pos:start="5:31" pos:end="5:31">s</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:43">rc_context</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:8">char</name> <modifier pos:start="9:10" pos:end="9:10">*</modifier></type><name pos:start="9:11" pos:end="9:15">error</name> <init pos:start="9:17" pos:end="9:22">= <expr pos:start="9:19" pos:end="9:22"><name pos:start="9:19" pos:end="9:22">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="63:6"><decl pos:start="11:5" pos:end="63:5"><type pos:start="11:5" pos:end="11:23"><specifier pos:start="11:5" pos:end="11:10">static</specifier> <specifier pos:start="11:12" pos:end="11:16">const</specifier> <name pos:start="11:18" pos:end="11:21">char</name> <modifier pos:start="11:23" pos:end="11:23">*</modifier></type><name pos:start="11:24" pos:end="11:36"><name pos:start="11:24" pos:end="11:34">const_names</name><index pos:start="11:35" pos:end="11:36">[]</index></name><init pos:start="11:37" pos:end="63:5">=<expr pos:start="11:38" pos:end="63:5"><block pos:start="11:38" pos:end="63:5">{

        <expr pos:start="13:9" pos:end="13:12"><literal type="string" pos:start="13:9" pos:end="13:12">"PI"</literal></expr>,

        <expr pos:start="15:9" pos:end="15:11"><literal type="string" pos:start="15:9" pos:end="15:11">"E"</literal></expr>,

        <expr pos:start="17:9" pos:end="17:14"><literal type="string" pos:start="17:9" pos:end="17:14">"iTex"</literal></expr>,

        <expr pos:start="19:9" pos:end="19:14"><literal type="string" pos:start="19:9" pos:end="19:14">"pTex"</literal></expr>,

        <expr pos:start="21:9" pos:end="21:13"><literal type="string" pos:start="21:9" pos:end="21:13">"tex"</literal></expr>,

        <expr pos:start="23:9" pos:end="23:12"><literal type="string" pos:start="23:9" pos:end="23:12">"mv"</literal></expr>,

        <expr pos:start="25:9" pos:end="25:15"><literal type="string" pos:start="25:9" pos:end="25:15">"fCode"</literal></expr>,

        <expr pos:start="27:9" pos:end="27:16"><literal type="string" pos:start="27:9" pos:end="27:16">"iCount"</literal></expr>,

        <expr pos:start="29:9" pos:end="29:15"><literal type="string" pos:start="29:9" pos:end="29:15">"mcVar"</literal></expr>,

        <expr pos:start="31:9" pos:end="31:13"><literal type="string" pos:start="31:9" pos:end="31:13">"var"</literal></expr>,

        <expr pos:start="33:9" pos:end="33:13"><literal type="string" pos:start="33:9" pos:end="33:13">"isI"</literal></expr>,

        <expr pos:start="35:9" pos:end="35:13"><literal type="string" pos:start="35:9" pos:end="35:13">"isP"</literal></expr>,

        <expr pos:start="37:9" pos:end="37:13"><literal type="string" pos:start="37:9" pos:end="37:13">"isB"</literal></expr>,

        <expr pos:start="39:9" pos:end="39:15"><literal type="string" pos:start="39:9" pos:end="39:15">"avgQP"</literal></expr>,

        <expr pos:start="41:9" pos:end="41:15"><literal type="string" pos:start="41:9" pos:end="41:15">"qComp"</literal></expr>,

<comment type="block" pos:start="43:1" pos:end="49:23">/*        "lastIQP",

        "lastPQP",

        "lastBQP",

        "nextNonBQP",*/</comment>

        <expr pos:start="51:9" pos:end="51:18"><literal type="string" pos:start="51:9" pos:end="51:18">"avgIITex"</literal></expr>,

        <expr pos:start="53:9" pos:end="53:18"><literal type="string" pos:start="53:9" pos:end="53:18">"avgPITex"</literal></expr>,

        <expr pos:start="55:9" pos:end="55:18"><literal type="string" pos:start="55:9" pos:end="55:18">"avgPPTex"</literal></expr>,

        <expr pos:start="57:9" pos:end="57:18"><literal type="string" pos:start="57:9" pos:end="57:18">"avgBPTex"</literal></expr>,

        <expr pos:start="59:9" pos:end="59:16"><literal type="string" pos:start="59:9" pos:end="59:16">"avgTex"</literal></expr>,

        <expr pos:start="61:9" pos:end="61:12"><name pos:start="61:9" pos:end="61:12">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <function_decl pos:start="65:5" pos:end="71:12"><type pos:start="65:5" pos:end="65:17"><specifier pos:start="65:5" pos:end="65:10">static</specifier> <name pos:start="65:12" pos:end="65:17">double</name></type> (<modifier pos:start="65:20" pos:end="65:20">*</modifier><name pos:start="65:21" pos:end="65:25">func1</name><index pos:start="65:26" pos:end="65:27">[]</index>)<parameter_list pos:start="65:29" pos:end="65:44">(<parameter pos:start="65:30" pos:end="65:35"><decl pos:start="65:30" pos:end="65:35"><type pos:start="65:30" pos:end="65:35"><name pos:start="65:30" pos:end="65:33">void</name> <modifier pos:start="65:35" pos:end="65:35">*</modifier></type></decl></parameter>, <parameter pos:start="65:38" pos:end="65:43"><decl pos:start="65:38" pos:end="65:43"><type pos:start="65:38" pos:end="65:43"><name pos:start="65:38" pos:end="65:43">double</name></type></decl></parameter>)</parameter_list><init pos:start="65:45" pos:end="67:23">=<expr pos:start="65:46" pos:end="67:23"><block pos:start="65:46" pos:end="67:23">{

        <expr pos:start="67:9" pos:end="67:23"><operator pos:start="67:9" pos:end="67:9">(</operator><name pos:start="67:10" pos:end="67:13">void</name> <operator pos:start="67:15" pos:end="67:15">*</operator><operator pos:start="67:16" pos:end="67:16">)</operator><name pos:start="67:17" pos:end="67:23">bits2qp</name></expr></block></expr></init><operator pos:start="67:24" pos:end="67:24">,</operator>

        <parameter_list pos:start="69:9" pos:end="69:16">(<parameter pos:start="69:10" pos:end="69:15"><decl pos:start="69:10" pos:end="69:15"><type pos:start="69:10" pos:end="69:15"><name pos:start="69:10" pos:end="69:13">void</name> <modifier pos:start="69:15" pos:end="69:15">*</modifier></type></decl></parameter>)</parameter_list>qp2bits<operator pos:start="69:24" pos:end="69:24">,</operator>

        NULL</function_decl>

    </block_content>}</block></function><empty_stmt pos:start="73:6" pos:end="73:6">;</empty_stmt>

    <decl_stmt pos:start="75:5" pos:end="83:6"><decl pos:start="75:5" pos:end="83:5"><type pos:start="75:5" pos:end="75:23"><specifier pos:start="75:5" pos:end="75:10">static</specifier> <specifier pos:start="75:12" pos:end="75:16">const</specifier> <name pos:start="75:18" pos:end="75:21">char</name> <modifier pos:start="75:23" pos:end="75:23">*</modifier></type><name pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:34">func1_names</name><index pos:start="75:35" pos:end="75:36">[]</index></name><init pos:start="75:37" pos:end="83:5">=<expr pos:start="75:38" pos:end="83:5"><block pos:start="75:38" pos:end="83:5">{

        <expr pos:start="77:9" pos:end="77:17"><literal type="string" pos:start="77:9" pos:end="77:17">"bits2qp"</literal></expr>,

        <expr pos:start="79:9" pos:end="79:17"><literal type="string" pos:start="79:9" pos:end="79:17">"qp2bits"</literal></expr>,

        <expr pos:start="81:9" pos:end="81:12"><name pos:start="81:9" pos:end="81:12">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:13"><expr pos:start="85:5" pos:end="85:12"><call pos:start="85:5" pos:end="85:12"><name pos:start="85:5" pos:end="85:10">emms_c</name><argument_list pos:start="85:11" pos:end="85:12">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:101"><expr pos:start="89:5" pos:end="89:100"><name pos:start="89:5" pos:end="89:19"><name pos:start="89:5" pos:end="89:7">rcc</name><operator pos:start="89:8" pos:end="89:9">-&gt;</operator><name pos:start="89:10" pos:end="89:19">rc_eq_eval</name></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="89:100"><name pos:start="89:23" pos:end="89:30">ff_parse</name><argument_list pos:start="89:31" pos:end="89:100">(<argument pos:start="89:32" pos:end="89:46"><expr pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:46"><name pos:start="89:32" pos:end="89:32">s</name><operator pos:start="89:33" pos:end="89:34">-&gt;</operator><name pos:start="89:35" pos:end="89:39">avctx</name><operator pos:start="89:40" pos:end="89:41">-&gt;</operator><name pos:start="89:42" pos:end="89:46">rc_eq</name></name></expr></argument>, <argument pos:start="89:49" pos:end="89:59"><expr pos:start="89:49" pos:end="89:59"><name pos:start="89:49" pos:end="89:59">const_names</name></expr></argument>, <argument pos:start="89:62" pos:end="89:66"><expr pos:start="89:62" pos:end="89:66"><name pos:start="89:62" pos:end="89:66">func1</name></expr></argument>, <argument pos:start="89:69" pos:end="89:79"><expr pos:start="89:69" pos:end="89:79"><name pos:start="89:69" pos:end="89:79">func1_names</name></expr></argument>, <argument pos:start="89:82" pos:end="89:85"><expr pos:start="89:82" pos:end="89:85"><name pos:start="89:82" pos:end="89:85">NULL</name></expr></argument>, <argument pos:start="89:88" pos:end="89:91"><expr pos:start="89:88" pos:end="89:91"><name pos:start="89:88" pos:end="89:91">NULL</name></expr></argument>, <argument pos:start="89:94" pos:end="89:99"><expr pos:start="89:94" pos:end="89:99"><operator pos:start="89:94" pos:end="89:94">&amp;</operator><name pos:start="89:95" pos:end="89:99">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="91:5" pos:end="97:5"><if pos:start="91:5" pos:end="97:5">if <condition pos:start="91:8" pos:end="91:25">(<expr pos:start="91:9" pos:end="91:24"><operator pos:start="91:9" pos:end="91:9">!</operator><name pos:start="91:10" pos:end="91:24"><name pos:start="91:10" pos:end="91:12">rcc</name><operator pos:start="91:13" pos:end="91:14">-&gt;</operator><name pos:start="91:15" pos:end="91:24">rc_eq_eval</name></name></expr>)</condition> <block pos:start="91:27" pos:end="97:5">{<block_content pos:start="93:9" pos:end="95:18">

        <expr_stmt pos:start="93:9" pos:end="93:111"><expr pos:start="93:9" pos:end="93:110"><call pos:start="93:9" pos:end="93:110"><name pos:start="93:9" pos:end="93:14">av_log</name><argument_list pos:start="93:15" pos:end="93:110">(<argument pos:start="93:16" pos:end="93:23"><expr pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:23"><name pos:start="93:16" pos:end="93:16">s</name><operator pos:start="93:17" pos:end="93:18">-&gt;</operator><name pos:start="93:19" pos:end="93:23">avctx</name></name></expr></argument>, <argument pos:start="93:26" pos:end="93:37"><expr pos:start="93:26" pos:end="93:37"><name pos:start="93:26" pos:end="93:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:40" pos:end="93:73"><expr pos:start="93:40" pos:end="93:73"><literal type="string" pos:start="93:40" pos:end="93:73">"Error parsing rc_eq \"%s\": %s\n"</literal></expr></argument>, <argument pos:start="93:76" pos:end="93:90"><expr pos:start="93:76" pos:end="93:90"><name pos:start="93:76" pos:end="93:90"><name pos:start="93:76" pos:end="93:76">s</name><operator pos:start="93:77" pos:end="93:78">-&gt;</operator><name pos:start="93:79" pos:end="93:83">avctx</name><operator pos:start="93:84" pos:end="93:85">-&gt;</operator><name pos:start="93:86" pos:end="93:90">rc_eq</name></name></expr></argument>, <argument pos:start="93:93" pos:end="93:109"><expr pos:start="93:93" pos:end="93:109"><ternary pos:start="93:93" pos:end="93:109"><condition pos:start="93:93" pos:end="93:98"><expr pos:start="93:93" pos:end="93:97"><name pos:start="93:93" pos:end="93:97">error</name></expr>?</condition><then pos:start="93:100" pos:end="93:104"> <expr pos:start="93:100" pos:end="93:104"><name pos:start="93:100" pos:end="93:104">error</name></expr> </then><else pos:start="93:106" pos:end="93:109">: <expr pos:start="93:108" pos:end="93:109"><literal type="string" pos:start="93:108" pos:end="93:109">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:18">return <expr pos:start="95:16" pos:end="95:17"><operator pos:start="95:16" pos:end="95:16">-</operator><literal type="number" pos:start="95:17" pos:end="95:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="101:5" pos:end="123:5">for<control pos:start="101:8" pos:end="101:22">(<init pos:start="101:9" pos:end="101:12"><expr pos:start="101:9" pos:end="101:11"><name pos:start="101:9" pos:end="101:9">i</name><operator pos:start="101:10" pos:end="101:10">=</operator><literal type="number" pos:start="101:11" pos:end="101:11">0</literal></expr>;</init> <condition pos:start="101:14" pos:end="101:17"><expr pos:start="101:14" pos:end="101:16"><name pos:start="101:14" pos:end="101:14">i</name><operator pos:start="101:15" pos:end="101:15">&lt;</operator><literal type="number" pos:start="101:16" pos:end="101:16">5</literal></expr>;</condition> <incr pos:start="101:19" pos:end="101:21"><expr pos:start="101:19" pos:end="101:21"><name pos:start="101:19" pos:end="101:19">i</name><operator pos:start="101:20" pos:end="101:21">++</operator></expr></incr>)</control><block pos:start="101:23" pos:end="123:5">{<block_content pos:start="103:9" pos:end="121:49">

        <expr_stmt pos:start="103:9" pos:end="103:47"><expr pos:start="103:9" pos:end="103:46"><name pos:start="103:9" pos:end="103:20"><name pos:start="103:9" pos:end="103:11">rcc</name><operator pos:start="103:12" pos:end="103:13">-&gt;</operator><name pos:start="103:14" pos:end="103:17">pred</name><index pos:start="103:18" pos:end="103:20">[<expr pos:start="103:19" pos:end="103:19"><name pos:start="103:19" pos:end="103:19">i</name></expr>]</index></name><operator pos:start="103:21" pos:end="103:21">.</operator><name pos:start="103:22" pos:end="103:26">coeff</name><operator pos:start="103:27" pos:end="103:27">=</operator> <name pos:start="103:29" pos:end="103:40">FF_QP2LAMBDA</name> <operator pos:start="103:42" pos:end="103:42">*</operator> <literal type="number" pos:start="103:44" pos:end="103:46">7.0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:20"><name pos:start="105:9" pos:end="105:11">rcc</name><operator pos:start="105:12" pos:end="105:13">-&gt;</operator><name pos:start="105:14" pos:end="105:17">pred</name><index pos:start="105:18" pos:end="105:20">[<expr pos:start="105:19" pos:end="105:19"><name pos:start="105:19" pos:end="105:19">i</name></expr>]</index></name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:26">count</name><operator pos:start="105:27" pos:end="105:27">=</operator> <literal type="number" pos:start="105:29" pos:end="105:31">1.0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:32"><expr pos:start="109:9" pos:end="109:31"><name pos:start="109:9" pos:end="109:20"><name pos:start="109:9" pos:end="109:11">rcc</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:17">pred</name><index pos:start="109:18" pos:end="109:20">[<expr pos:start="109:19" pos:end="109:19"><name pos:start="109:19" pos:end="109:19">i</name></expr>]</index></name><operator pos:start="109:21" pos:end="109:21">.</operator><name pos:start="109:22" pos:end="109:26">decay</name><operator pos:start="109:27" pos:end="109:27">=</operator> <literal type="number" pos:start="109:29" pos:end="109:31">0.4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="119:31"><expr pos:start="111:9" pos:end="119:30"><name pos:start="111:9" pos:end="111:27"><name pos:start="111:9" pos:end="111:11">rcc</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:23">i_cplx_sum</name> <index pos:start="111:25" pos:end="111:27">[<expr pos:start="111:26" pos:end="111:26"><name pos:start="111:26" pos:end="111:26">i</name></expr>]</index></name><operator pos:start="111:28" pos:end="111:28">=</operator>

        <name pos:start="113:9" pos:end="113:27"><name pos:start="113:9" pos:end="113:11">rcc</name><operator pos:start="113:12" pos:end="113:13">-&gt;</operator><name pos:start="113:14" pos:end="113:23">p_cplx_sum</name> <index pos:start="113:25" pos:end="113:27">[<expr pos:start="113:26" pos:end="113:26"><name pos:start="113:26" pos:end="113:26">i</name></expr>]</index></name><operator pos:start="113:28" pos:end="113:28">=</operator>

        <name pos:start="115:9" pos:end="115:27"><name pos:start="115:9" pos:end="115:11">rcc</name><operator pos:start="115:12" pos:end="115:13">-&gt;</operator><name pos:start="115:14" pos:end="115:24">mv_bits_sum</name><index pos:start="115:25" pos:end="115:27">[<expr pos:start="115:26" pos:end="115:26"><name pos:start="115:26" pos:end="115:26">i</name></expr>]</index></name><operator pos:start="115:28" pos:end="115:28">=</operator>

        <name pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:11">rcc</name><operator pos:start="117:12" pos:end="117:13">-&gt;</operator><name pos:start="117:14" pos:end="117:23">qscale_sum</name> <index pos:start="117:25" pos:end="117:27">[<expr pos:start="117:26" pos:end="117:26"><name pos:start="117:26" pos:end="117:26">i</name></expr>]</index></name><operator pos:start="117:28" pos:end="117:28">=</operator>

        <name pos:start="119:9" pos:end="119:27"><name pos:start="119:9" pos:end="119:11">rcc</name><operator pos:start="119:12" pos:end="119:13">-&gt;</operator><name pos:start="119:14" pos:end="119:24">frame_count</name><index pos:start="119:25" pos:end="119:27">[<expr pos:start="119:26" pos:end="119:26"><name pos:start="119:26" pos:end="119:26">i</name></expr>]</index></name><operator pos:start="119:28" pos:end="119:28">=</operator> <literal type="number" pos:start="119:30" pos:end="119:30">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="119:33" pos:end="119:66">// 1 is better cuz of 1/0 and such</comment>

        <expr_stmt pos:start="121:9" pos:end="121:49"><expr pos:start="121:9" pos:end="121:48"><name pos:start="121:9" pos:end="121:31"><name pos:start="121:9" pos:end="121:11">rcc</name><operator pos:start="121:12" pos:end="121:13">-&gt;</operator><name pos:start="121:14" pos:end="121:28">last_qscale_for</name><index pos:start="121:29" pos:end="121:31">[<expr pos:start="121:30" pos:end="121:30"><name pos:start="121:30" pos:end="121:30">i</name></expr>]</index></name><operator pos:start="121:32" pos:end="121:32">=</operator><name pos:start="121:33" pos:end="121:44">FF_QP2LAMBDA</name> <operator pos:start="121:46" pos:end="121:46">*</operator> <literal type="number" pos:start="121:48" pos:end="121:48">5</literal></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="125:5" pos:end="125:61"><expr pos:start="125:5" pos:end="125:60"><name pos:start="125:5" pos:end="125:21"><name pos:start="125:5" pos:end="125:7">rcc</name><operator pos:start="125:8" pos:end="125:9">-&gt;</operator><name pos:start="125:10" pos:end="125:21">buffer_index</name></name><operator pos:start="125:22" pos:end="125:22">=</operator> <name pos:start="125:24" pos:end="125:60"><name pos:start="125:24" pos:end="125:24">s</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:31">avctx</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:60">rc_initial_buffer_occupancy</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="129:5" pos:end="259:5"><if pos:start="129:5" pos:end="259:5">if<condition pos:start="129:7" pos:end="129:33">(<expr pos:start="129:8" pos:end="129:32"><name pos:start="129:8" pos:end="129:15"><name pos:start="129:8" pos:end="129:8">s</name><operator pos:start="129:9" pos:end="129:10">-&gt;</operator><name pos:start="129:11" pos:end="129:15">flags</name></name><operator pos:start="129:16" pos:end="129:16">&amp;</operator><name pos:start="129:17" pos:end="129:32">CODEC_FLAG_PASS2</name></expr>)</condition><block pos:start="129:34" pos:end="259:5">{<block_content pos:start="131:9" pos:end="257:9">

        <decl_stmt pos:start="131:9" pos:end="131:14"><decl pos:start="131:9" pos:end="131:13"><type pos:start="131:9" pos:end="131:11"><name pos:start="131:9" pos:end="131:11">int</name></type> <name pos:start="131:13" pos:end="131:13">i</name></decl>;</decl_stmt>

        <decl_stmt pos:start="133:9" pos:end="133:16"><decl pos:start="133:9" pos:end="133:15"><type pos:start="133:9" pos:end="133:14"><name pos:start="133:9" pos:end="133:12">char</name> <modifier pos:start="133:14" pos:end="133:14">*</modifier></type><name pos:start="133:15" pos:end="133:15">p</name></decl>;</decl_stmt>



        <comment type="block" pos:start="137:9" pos:end="137:33">/* find number of pics */</comment>

        <expr_stmt pos:start="139:9" pos:end="139:30"><expr pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:9">p</name><operator pos:start="139:10" pos:end="139:10">=</operator> <name pos:start="139:12" pos:end="139:29"><name pos:start="139:12" pos:end="139:12">s</name><operator pos:start="139:13" pos:end="139:14">-&gt;</operator><name pos:start="139:15" pos:end="139:19">avctx</name><operator pos:start="139:20" pos:end="139:21">-&gt;</operator><name pos:start="139:22" pos:end="139:29">stats_in</name></name></expr>;</expr_stmt>

        <for pos:start="141:9" pos:end="145:9">for<control pos:start="141:12" pos:end="141:25">(<init pos:start="141:13" pos:end="141:17"><expr pos:start="141:13" pos:end="141:16"><name pos:start="141:13" pos:end="141:13">i</name><operator pos:start="141:14" pos:end="141:14">=</operator><operator pos:start="141:15" pos:end="141:15">-</operator><literal type="number" pos:start="141:16" pos:end="141:16">1</literal></expr>;</init> <condition pos:start="141:19" pos:end="141:20"><expr pos:start="141:19" pos:end="141:19"><name pos:start="141:19" pos:end="141:19">p</name></expr>;</condition> <incr pos:start="141:22" pos:end="141:24"><expr pos:start="141:22" pos:end="141:24"><name pos:start="141:22" pos:end="141:22">i</name><operator pos:start="141:23" pos:end="141:24">++</operator></expr></incr>)</control><block pos:start="141:26" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:32">

            <expr_stmt pos:start="143:13" pos:end="143:32"><expr pos:start="143:13" pos:end="143:31"><name pos:start="143:13" pos:end="143:13">p</name><operator pos:start="143:14" pos:end="143:14">=</operator> <call pos:start="143:16" pos:end="143:31"><name pos:start="143:16" pos:end="143:21">strchr</name><argument_list pos:start="143:22" pos:end="143:31">(<argument pos:start="143:23" pos:end="143:25"><expr pos:start="143:23" pos:end="143:25"><name pos:start="143:23" pos:end="143:23">p</name><operator pos:start="143:24" pos:end="143:24">+</operator><literal type="number" pos:start="143:25" pos:end="143:25">1</literal></expr></argument>, <argument pos:start="143:28" pos:end="143:30"><expr pos:start="143:28" pos:end="143:30"><literal type="char" pos:start="143:28" pos:end="143:30">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="147:9" pos:end="147:28"><expr pos:start="147:9" pos:end="147:27"><name pos:start="147:9" pos:end="147:9">i</name><operator pos:start="147:10" pos:end="147:11">+=</operator> <name pos:start="147:13" pos:end="147:27"><name pos:start="147:13" pos:end="147:13">s</name><operator pos:start="147:14" pos:end="147:15">-&gt;</operator><name pos:start="147:16" pos:end="147:27">max_b_frames</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="151:22"><if pos:start="149:9" pos:end="151:22">if<condition pos:start="149:11" pos:end="149:57">(<expr pos:start="149:12" pos:end="149:56"><name pos:start="149:12" pos:end="149:12">i</name><operator pos:start="149:13" pos:end="149:14">&lt;=</operator><literal type="number" pos:start="149:15" pos:end="149:15">0</literal> <operator pos:start="149:17" pos:end="149:18">||</operator> <name pos:start="149:20" pos:end="149:20">i</name><operator pos:start="149:21" pos:end="149:22">&gt;=</operator><name pos:start="149:23" pos:end="149:29">INT_MAX</name> <operator pos:start="149:31" pos:end="149:31">/</operator> <sizeof pos:start="149:33" pos:end="149:56">sizeof<argument_list pos:start="149:39" pos:end="149:56">(<argument pos:start="149:40" pos:end="149:55"><expr pos:start="149:40" pos:end="149:55"><name pos:start="149:40" pos:end="149:55">RateControlEntry</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="151:13" pos:end="151:22"><block_content pos:start="151:13" pos:end="151:22">

            <return pos:start="151:13" pos:end="151:22">return <expr pos:start="151:20" pos:end="151:21"><operator pos:start="151:20" pos:end="151:20">-</operator><literal type="number" pos:start="151:21" pos:end="151:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:79"><expr pos:start="153:9" pos:end="153:78"><name pos:start="153:9" pos:end="153:18"><name pos:start="153:9" pos:end="153:11">rcc</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:18">entry</name></name> <operator pos:start="153:20" pos:end="153:20">=</operator> <operator pos:start="153:22" pos:end="153:22">(</operator><name pos:start="153:23" pos:end="153:38">RateControlEntry</name><operator pos:start="153:39" pos:end="153:39">*</operator><operator pos:start="153:40" pos:end="153:40">)</operator><call pos:start="153:41" pos:end="153:78"><name pos:start="153:41" pos:end="153:50">av_mallocz</name><argument_list pos:start="153:51" pos:end="153:78">(<argument pos:start="153:52" pos:end="153:77"><expr pos:start="153:52" pos:end="153:77"><name pos:start="153:52" pos:end="153:52">i</name><operator pos:start="153:53" pos:end="153:53">*</operator><sizeof pos:start="153:54" pos:end="153:77">sizeof<argument_list pos:start="153:60" pos:end="153:77">(<argument pos:start="153:61" pos:end="153:76"><expr pos:start="153:61" pos:end="153:76"><name pos:start="153:61" pos:end="153:76">RateControlEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:28"><expr pos:start="155:9" pos:end="155:27"><name pos:start="155:9" pos:end="155:24"><name pos:start="155:9" pos:end="155:11">rcc</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:24">num_entries</name></name><operator pos:start="155:25" pos:end="155:25">=</operator> <name pos:start="155:27" pos:end="155:27">i</name></expr>;</expr_stmt>



        <comment type="block" pos:start="159:9" pos:end="159:109">/* init all to skipped p frames (with b frames we might have a not encoded frame at the end FIXME) */</comment>

        <for pos:start="161:9" pos:end="173:9">for<control pos:start="161:12" pos:end="161:41">(<init pos:start="161:13" pos:end="161:16"><expr pos:start="161:13" pos:end="161:15"><name pos:start="161:13" pos:end="161:13">i</name><operator pos:start="161:14" pos:end="161:14">=</operator><literal type="number" pos:start="161:15" pos:end="161:15">0</literal></expr>;</init> <condition pos:start="161:18" pos:end="161:36"><expr pos:start="161:18" pos:end="161:35"><name pos:start="161:18" pos:end="161:18">i</name><operator pos:start="161:19" pos:end="161:19">&lt;</operator><name pos:start="161:20" pos:end="161:35"><name pos:start="161:20" pos:end="161:22">rcc</name><operator pos:start="161:23" pos:end="161:24">-&gt;</operator><name pos:start="161:25" pos:end="161:35">num_entries</name></name></expr>;</condition> <incr pos:start="161:38" pos:end="161:40"><expr pos:start="161:38" pos:end="161:40"><name pos:start="161:38" pos:end="161:38">i</name><operator pos:start="161:39" pos:end="161:40">++</operator></expr></incr>)</control><block pos:start="161:42" pos:end="173:9">{<block_content pos:start="163:13" pos:end="171:43">

            <decl_stmt pos:start="163:13" pos:end="163:50"><decl pos:start="163:13" pos:end="163:49"><type pos:start="163:13" pos:end="163:30"><name pos:start="163:13" pos:end="163:28">RateControlEntry</name> <modifier pos:start="163:30" pos:end="163:30">*</modifier></type><name pos:start="163:31" pos:end="163:33">rce</name><init pos:start="163:34" pos:end="163:49">= <expr pos:start="163:36" pos:end="163:49"><operator pos:start="163:36" pos:end="163:36">&amp;</operator><name pos:start="163:37" pos:end="163:49"><name pos:start="163:37" pos:end="163:39">rcc</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:46">entry</name><index pos:start="163:47" pos:end="163:49">[<expr pos:start="163:48" pos:end="163:48"><name pos:start="163:48" pos:end="163:48">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:54"><expr pos:start="165:13" pos:end="165:53"><name pos:start="165:13" pos:end="165:26"><name pos:start="165:13" pos:end="165:15">rce</name><operator pos:start="165:16" pos:end="165:17">-&gt;</operator><name pos:start="165:18" pos:end="165:26">pict_type</name></name><operator pos:start="165:27" pos:end="165:27">=</operator> <name pos:start="165:29" pos:end="165:46"><name pos:start="165:29" pos:end="165:31">rce</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:46">new_pict_type</name></name><operator pos:start="165:47" pos:end="165:47">=</operator><name pos:start="165:48" pos:end="165:53">P_TYPE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:58"><expr pos:start="167:13" pos:end="167:57"><name pos:start="167:13" pos:end="167:23"><name pos:start="167:13" pos:end="167:15">rce</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:23">qscale</name></name><operator pos:start="167:24" pos:end="167:24">=</operator> <name pos:start="167:26" pos:end="167:40"><name pos:start="167:26" pos:end="167:28">rce</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:40">new_qscale</name></name><operator pos:start="167:41" pos:end="167:41">=</operator><name pos:start="167:42" pos:end="167:53">FF_QP2LAMBDA</name> <operator pos:start="167:55" pos:end="167:55">*</operator> <literal type="number" pos:start="167:57" pos:end="167:57">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:43"><expr pos:start="169:13" pos:end="169:42"><name pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:15">rce</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:26">misc_bits</name></name><operator pos:start="169:27" pos:end="169:27">=</operator> <name pos:start="169:29" pos:end="169:37"><name pos:start="169:29" pos:end="169:29">s</name><operator pos:start="169:30" pos:end="169:31">-&gt;</operator><name pos:start="169:32" pos:end="169:37">mb_num</name></name> <operator pos:start="169:39" pos:end="169:39">+</operator> <literal type="number" pos:start="169:41" pos:end="169:42">10</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:43"><expr pos:start="171:13" pos:end="171:42"><name pos:start="171:13" pos:end="171:27"><name pos:start="171:13" pos:end="171:15">rce</name><operator pos:start="171:16" pos:end="171:17">-&gt;</operator><name pos:start="171:18" pos:end="171:27">mb_var_sum</name></name><operator pos:start="171:28" pos:end="171:28">=</operator> <name pos:start="171:30" pos:end="171:38"><name pos:start="171:30" pos:end="171:30">s</name><operator pos:start="171:31" pos:end="171:32">-&gt;</operator><name pos:start="171:33" pos:end="171:38">mb_num</name></name><operator pos:start="171:39" pos:end="171:39">*</operator><literal type="number" pos:start="171:40" pos:end="171:42">100</literal></expr>;</expr_stmt>

        </block_content>}</block></for>



        <comment type="block" pos:start="177:9" pos:end="177:24">/* read stats */</comment>

        <expr_stmt pos:start="179:9" pos:end="179:30"><expr pos:start="179:9" pos:end="179:29"><name pos:start="179:9" pos:end="179:9">p</name><operator pos:start="179:10" pos:end="179:10">=</operator> <name pos:start="179:12" pos:end="179:29"><name pos:start="179:12" pos:end="179:12">s</name><operator pos:start="179:13" pos:end="179:14">-&gt;</operator><name pos:start="179:15" pos:end="179:19">avctx</name><operator pos:start="179:20" pos:end="179:21">-&gt;</operator><name pos:start="179:22" pos:end="179:29">stats_in</name></name></expr>;</expr_stmt>

        <for pos:start="181:9" pos:end="233:9">for<control pos:start="181:12" pos:end="181:59">(<init pos:start="181:13" pos:end="181:16"><expr pos:start="181:13" pos:end="181:15"><name pos:start="181:13" pos:end="181:13">i</name><operator pos:start="181:14" pos:end="181:14">=</operator><literal type="number" pos:start="181:15" pos:end="181:15">0</literal></expr>;</init> <condition pos:start="181:18" pos:end="181:54"><expr pos:start="181:18" pos:end="181:53"><name pos:start="181:18" pos:end="181:18">i</name><operator pos:start="181:19" pos:end="181:19">&lt;</operator><name pos:start="181:20" pos:end="181:35"><name pos:start="181:20" pos:end="181:22">rcc</name><operator pos:start="181:23" pos:end="181:24">-&gt;</operator><name pos:start="181:25" pos:end="181:35">num_entries</name></name> <operator pos:start="181:37" pos:end="181:37">-</operator> <name pos:start="181:39" pos:end="181:53"><name pos:start="181:39" pos:end="181:39">s</name><operator pos:start="181:40" pos:end="181:41">-&gt;</operator><name pos:start="181:42" pos:end="181:53">max_b_frames</name></name></expr>;</condition> <incr pos:start="181:56" pos:end="181:58"><expr pos:start="181:56" pos:end="181:58"><name pos:start="181:56" pos:end="181:56">i</name><operator pos:start="181:57" pos:end="181:58">++</operator></expr></incr>)</control><block pos:start="181:60" pos:end="233:9">{<block_content pos:start="183:13" pos:end="231:20">

            <decl_stmt pos:start="183:13" pos:end="183:34"><decl pos:start="183:13" pos:end="183:33"><type pos:start="183:13" pos:end="183:30"><name pos:start="183:13" pos:end="183:28">RateControlEntry</name> <modifier pos:start="183:30" pos:end="183:30">*</modifier></type><name pos:start="183:31" pos:end="183:33">rce</name></decl>;</decl_stmt>

            <decl_stmt pos:start="185:13" pos:end="185:31"><decl pos:start="185:13" pos:end="185:30"><type pos:start="185:13" pos:end="185:15"><name pos:start="185:13" pos:end="185:15">int</name></type> <name pos:start="185:17" pos:end="185:30">picture_number</name></decl>;</decl_stmt>

            <decl_stmt pos:start="187:13" pos:end="187:18"><decl pos:start="187:13" pos:end="187:17"><type pos:start="187:13" pos:end="187:15"><name pos:start="187:13" pos:end="187:15">int</name></type> <name pos:start="187:17" pos:end="187:17">e</name></decl>;</decl_stmt>

            <decl_stmt pos:start="189:13" pos:end="189:23"><decl pos:start="189:13" pos:end="189:22"><type pos:start="189:13" pos:end="189:18"><name pos:start="189:13" pos:end="189:16">char</name> <modifier pos:start="189:18" pos:end="189:18">*</modifier></type><name pos:start="189:19" pos:end="189:22">next</name></decl>;</decl_stmt>



            <expr_stmt pos:start="193:13" pos:end="193:33"><expr pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:16">next</name><operator pos:start="193:17" pos:end="193:17">=</operator> <call pos:start="193:19" pos:end="193:32"><name pos:start="193:19" pos:end="193:24">strchr</name><argument_list pos:start="193:25" pos:end="193:32">(<argument pos:start="193:26" pos:end="193:26"><expr pos:start="193:26" pos:end="193:26"><name pos:start="193:26" pos:end="193:26">p</name></expr></argument>, <argument pos:start="193:29" pos:end="193:31"><expr pos:start="193:29" pos:end="193:31"><literal type="char" pos:start="193:29" pos:end="193:31">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="195:13" pos:end="201:13"><if pos:start="195:13" pos:end="201:13">if<condition pos:start="195:15" pos:end="195:20">(<expr pos:start="195:16" pos:end="195:19"><name pos:start="195:16" pos:end="195:19">next</name></expr>)</condition><block pos:start="195:21" pos:end="201:13">{<block_content pos:start="197:17" pos:end="199:23">

                <expr_stmt pos:start="197:17" pos:end="197:26"><expr pos:start="197:17" pos:end="197:25"><operator pos:start="197:17" pos:end="197:17">(</operator><operator pos:start="197:18" pos:end="197:18">*</operator><name pos:start="197:19" pos:end="197:22">next</name><operator pos:start="197:23" pos:end="197:23">)</operator><operator pos:start="197:24" pos:end="197:24">=</operator><literal type="number" pos:start="197:25" pos:end="197:25">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="197:28" pos:end="197:102">//sscanf in unbelievably slow on looong strings //FIXME copy / do not write</comment>

                <expr_stmt pos:start="199:17" pos:end="199:23"><expr pos:start="199:17" pos:end="199:22"><name pos:start="199:17" pos:end="199:20">next</name><operator pos:start="199:21" pos:end="199:22">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:53"><expr pos:start="203:13" pos:end="203:52"><name pos:start="203:13" pos:end="203:13">e</name><operator pos:start="203:14" pos:end="203:14">=</operator> <call pos:start="203:16" pos:end="203:52"><name pos:start="203:16" pos:end="203:21">sscanf</name><argument_list pos:start="203:22" pos:end="203:52">(<argument pos:start="203:23" pos:end="203:23"><expr pos:start="203:23" pos:end="203:23"><name pos:start="203:23" pos:end="203:23">p</name></expr></argument>, <argument pos:start="203:26" pos:end="203:34"><expr pos:start="203:26" pos:end="203:34"><literal type="string" pos:start="203:26" pos:end="203:34">" in:%d "</literal></expr></argument>, <argument pos:start="203:37" pos:end="203:51"><expr pos:start="203:37" pos:end="203:51"><operator pos:start="203:37" pos:end="203:37">&amp;</operator><name pos:start="203:38" pos:end="203:51">picture_number</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:40"><expr pos:start="207:13" pos:end="207:39"><call pos:start="207:13" pos:end="207:39"><name pos:start="207:13" pos:end="207:18">assert</name><argument_list pos:start="207:19" pos:end="207:39">(<argument pos:start="207:20" pos:end="207:38"><expr pos:start="207:20" pos:end="207:38"><name pos:start="207:20" pos:end="207:33">picture_number</name> <operator pos:start="207:35" pos:end="207:36">&gt;=</operator> <literal type="number" pos:start="207:38" pos:end="207:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:54"><expr pos:start="209:13" pos:end="209:53"><call pos:start="209:13" pos:end="209:53"><name pos:start="209:13" pos:end="209:18">assert</name><argument_list pos:start="209:19" pos:end="209:53">(<argument pos:start="209:20" pos:end="209:52"><expr pos:start="209:20" pos:end="209:52"><name pos:start="209:20" pos:end="209:33">picture_number</name> <operator pos:start="209:35" pos:end="209:35">&lt;</operator> <name pos:start="209:37" pos:end="209:52"><name pos:start="209:37" pos:end="209:39">rcc</name><operator pos:start="209:40" pos:end="209:41">-&gt;</operator><name pos:start="209:42" pos:end="209:52">num_entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:45"><expr pos:start="211:13" pos:end="211:44"><name pos:start="211:13" pos:end="211:15">rce</name><operator pos:start="211:16" pos:end="211:16">=</operator> <operator pos:start="211:18" pos:end="211:18">&amp;</operator><name pos:start="211:19" pos:end="211:44"><name pos:start="211:19" pos:end="211:21">rcc</name><operator pos:start="211:22" pos:end="211:23">-&gt;</operator><name pos:start="211:24" pos:end="211:28">entry</name><index pos:start="211:29" pos:end="211:44">[<expr pos:start="211:30" pos:end="211:43"><name pos:start="211:30" pos:end="211:43">picture_number</name></expr>]</index></name></expr>;</expr_stmt>



            <expr_stmt pos:start="215:13" pos:end="219:138"><expr pos:start="215:13" pos:end="219:137"><name pos:start="215:13" pos:end="215:13">e</name><operator pos:start="215:14" pos:end="215:15">+=</operator><call pos:start="215:16" pos:end="219:137"><name pos:start="215:16" pos:end="215:21">sscanf</name><argument_list pos:start="215:22" pos:end="219:137">(<argument pos:start="215:23" pos:end="215:23"><expr pos:start="215:23" pos:end="215:23"><name pos:start="215:23" pos:end="215:23">p</name></expr></argument>, <argument pos:start="215:26" pos:end="215:152"><expr pos:start="215:26" pos:end="215:152"><literal type="string" pos:start="215:26" pos:end="215:152">" in:%*d out:%*d type:%d q:%f itex:%d ptex:%d mv:%d misc:%d fcode:%d bcode:%d mc-var:%d var:%d icount:%d skipcount:%d hbits:%d"</literal></expr></argument>,

                   <argument pos:start="217:20" pos:end="217:34"><expr pos:start="217:20" pos:end="217:34"><operator pos:start="217:20" pos:end="217:20">&amp;</operator><name pos:start="217:21" pos:end="217:34"><name pos:start="217:21" pos:end="217:23">rce</name><operator pos:start="217:24" pos:end="217:25">-&gt;</operator><name pos:start="217:26" pos:end="217:34">pict_type</name></name></expr></argument>, <argument pos:start="217:37" pos:end="217:48"><expr pos:start="217:37" pos:end="217:48"><operator pos:start="217:37" pos:end="217:37">&amp;</operator><name pos:start="217:38" pos:end="217:48"><name pos:start="217:38" pos:end="217:40">rce</name><operator pos:start="217:41" pos:end="217:42">-&gt;</operator><name pos:start="217:43" pos:end="217:48">qscale</name></name></expr></argument>, <argument pos:start="217:51" pos:end="217:66"><expr pos:start="217:51" pos:end="217:66"><operator pos:start="217:51" pos:end="217:51">&amp;</operator><name pos:start="217:52" pos:end="217:66"><name pos:start="217:52" pos:end="217:54">rce</name><operator pos:start="217:55" pos:end="217:56">-&gt;</operator><name pos:start="217:57" pos:end="217:66">i_tex_bits</name></name></expr></argument>, <argument pos:start="217:69" pos:end="217:84"><expr pos:start="217:69" pos:end="217:84"><operator pos:start="217:69" pos:end="217:69">&amp;</operator><name pos:start="217:70" pos:end="217:84"><name pos:start="217:70" pos:end="217:72">rce</name><operator pos:start="217:73" pos:end="217:74">-&gt;</operator><name pos:start="217:75" pos:end="217:84">p_tex_bits</name></name></expr></argument>, <argument pos:start="217:87" pos:end="217:99"><expr pos:start="217:87" pos:end="217:99"><operator pos:start="217:87" pos:end="217:87">&amp;</operator><name pos:start="217:88" pos:end="217:99"><name pos:start="217:88" pos:end="217:90">rce</name><operator pos:start="217:91" pos:end="217:92">-&gt;</operator><name pos:start="217:93" pos:end="217:99">mv_bits</name></name></expr></argument>, <argument pos:start="217:102" pos:end="217:116"><expr pos:start="217:102" pos:end="217:116"><operator pos:start="217:102" pos:end="217:102">&amp;</operator><name pos:start="217:103" pos:end="217:116"><name pos:start="217:103" pos:end="217:105">rce</name><operator pos:start="217:106" pos:end="217:107">-&gt;</operator><name pos:start="217:108" pos:end="217:116">misc_bits</name></name></expr></argument>,

                   <argument pos:start="219:20" pos:end="219:31"><expr pos:start="219:20" pos:end="219:31"><operator pos:start="219:20" pos:end="219:20">&amp;</operator><name pos:start="219:21" pos:end="219:31"><name pos:start="219:21" pos:end="219:23">rce</name><operator pos:start="219:24" pos:end="219:25">-&gt;</operator><name pos:start="219:26" pos:end="219:31">f_code</name></name></expr></argument>, <argument pos:start="219:34" pos:end="219:45"><expr pos:start="219:34" pos:end="219:45"><operator pos:start="219:34" pos:end="219:34">&amp;</operator><name pos:start="219:35" pos:end="219:45"><name pos:start="219:35" pos:end="219:37">rce</name><operator pos:start="219:38" pos:end="219:39">-&gt;</operator><name pos:start="219:40" pos:end="219:45">b_code</name></name></expr></argument>, <argument pos:start="219:48" pos:end="219:66"><expr pos:start="219:48" pos:end="219:66"><operator pos:start="219:48" pos:end="219:48">&amp;</operator><name pos:start="219:49" pos:end="219:66"><name pos:start="219:49" pos:end="219:51">rce</name><operator pos:start="219:52" pos:end="219:53">-&gt;</operator><name pos:start="219:54" pos:end="219:66">mc_mb_var_sum</name></name></expr></argument>, <argument pos:start="219:69" pos:end="219:84"><expr pos:start="219:69" pos:end="219:84"><operator pos:start="219:69" pos:end="219:69">&amp;</operator><name pos:start="219:70" pos:end="219:84"><name pos:start="219:70" pos:end="219:72">rce</name><operator pos:start="219:73" pos:end="219:74">-&gt;</operator><name pos:start="219:75" pos:end="219:84">mb_var_sum</name></name></expr></argument>, <argument pos:start="219:87" pos:end="219:99"><expr pos:start="219:87" pos:end="219:99"><operator pos:start="219:87" pos:end="219:87">&amp;</operator><name pos:start="219:88" pos:end="219:99"><name pos:start="219:88" pos:end="219:90">rce</name><operator pos:start="219:91" pos:end="219:92">-&gt;</operator><name pos:start="219:93" pos:end="219:99">i_count</name></name></expr></argument>, <argument pos:start="219:102" pos:end="219:117"><expr pos:start="219:102" pos:end="219:117"><operator pos:start="219:102" pos:end="219:102">&amp;</operator><name pos:start="219:103" pos:end="219:117"><name pos:start="219:103" pos:end="219:105">rce</name><operator pos:start="219:106" pos:end="219:107">-&gt;</operator><name pos:start="219:108" pos:end="219:117">skip_count</name></name></expr></argument>, <argument pos:start="219:120" pos:end="219:136"><expr pos:start="219:120" pos:end="219:136"><operator pos:start="219:120" pos:end="219:120">&amp;</operator><name pos:start="219:121" pos:end="219:136"><name pos:start="219:121" pos:end="219:123">rce</name><operator pos:start="219:124" pos:end="219:125">-&gt;</operator><name pos:start="219:126" pos:end="219:136">header_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="227:13"><if pos:start="221:13" pos:end="227:13">if<condition pos:start="221:15" pos:end="221:21">(<expr pos:start="221:16" pos:end="221:20"><name pos:start="221:16" pos:end="221:16">e</name><operator pos:start="221:17" pos:end="221:18">!=</operator><literal type="number" pos:start="221:19" pos:end="221:20">14</literal></expr>)</condition><block pos:start="221:22" pos:end="227:13">{<block_content pos:start="223:17" pos:end="225:26">

                <expr_stmt pos:start="223:17" pos:end="223:107"><expr pos:start="223:17" pos:end="223:106"><call pos:start="223:17" pos:end="223:106"><name pos:start="223:17" pos:end="223:22">av_log</name><argument_list pos:start="223:23" pos:end="223:106">(<argument pos:start="223:24" pos:end="223:31"><expr pos:start="223:24" pos:end="223:31"><name pos:start="223:24" pos:end="223:31"><name pos:start="223:24" pos:end="223:24">s</name><operator pos:start="223:25" pos:end="223:26">-&gt;</operator><name pos:start="223:27" pos:end="223:31">avctx</name></name></expr></argument>, <argument pos:start="223:34" pos:end="223:45"><expr pos:start="223:34" pos:end="223:45"><name pos:start="223:34" pos:end="223:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="223:48" pos:end="223:99"><expr pos:start="223:48" pos:end="223:99"><literal type="string" pos:start="223:48" pos:end="223:99">"statistics are damaged at line %d, parser out=%d\n"</literal></expr></argument>, <argument pos:start="223:102" pos:end="223:102"><expr pos:start="223:102" pos:end="223:102"><name pos:start="223:102" pos:end="223:102">i</name></expr></argument>, <argument pos:start="223:105" pos:end="223:105"><expr pos:start="223:105" pos:end="223:105"><name pos:start="223:105" pos:end="223:105">e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="225:17" pos:end="225:26">return <expr pos:start="225:24" pos:end="225:25"><operator pos:start="225:24" pos:end="225:24">-</operator><literal type="number" pos:start="225:25" pos:end="225:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="231:13" pos:end="231:20"><expr pos:start="231:13" pos:end="231:19"><name pos:start="231:13" pos:end="231:13">p</name><operator pos:start="231:14" pos:end="231:14">=</operator> <name pos:start="231:16" pos:end="231:19">next</name></expr>;</expr_stmt>

        </block_content>}</block></for>



        <if_stmt pos:start="237:9" pos:end="237:40"><if pos:start="237:9" pos:end="237:40">if<condition pos:start="237:11" pos:end="237:29">(<expr pos:start="237:12" pos:end="237:28"><call pos:start="237:12" pos:end="237:24"><name pos:start="237:12" pos:end="237:21">init_pass2</name><argument_list pos:start="237:22" pos:end="237:24">(<argument pos:start="237:23" pos:end="237:23"><expr pos:start="237:23" pos:end="237:23"><name pos:start="237:23" pos:end="237:23">s</name></expr></argument>)</argument_list></call> <operator pos:start="237:26" pos:end="237:26">&lt;</operator> <literal type="number" pos:start="237:28" pos:end="237:28">0</literal></expr>)</condition><block type="pseudo" pos:start="237:31" pos:end="237:40"><block_content pos:start="237:31" pos:end="237:40"> <return pos:start="237:31" pos:end="237:40">return <expr pos:start="237:38" pos:end="237:39"><operator pos:start="237:38" pos:end="237:38">-</operator><literal type="number" pos:start="237:39" pos:end="237:39">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="line" pos:start="241:9" pos:end="241:33">//FIXME maybe move to end</comment>

        <if_stmt pos:start="243:9" pos:end="257:9"><if pos:start="243:9" pos:end="257:9">if<condition pos:start="243:11" pos:end="243:87">(<expr pos:start="243:12" pos:end="243:86"><operator pos:start="243:12" pos:end="243:12">(</operator><name pos:start="243:13" pos:end="243:20"><name pos:start="243:13" pos:end="243:13">s</name><operator pos:start="243:14" pos:end="243:15">-&gt;</operator><name pos:start="243:16" pos:end="243:20">flags</name></name><operator pos:start="243:21" pos:end="243:21">&amp;</operator><name pos:start="243:22" pos:end="243:37">CODEC_FLAG_PASS2</name><operator pos:start="243:38" pos:end="243:38">)</operator> <operator pos:start="243:40" pos:end="243:41">&amp;&amp;</operator> <name pos:start="243:43" pos:end="243:63"><name pos:start="243:43" pos:end="243:43">s</name><operator pos:start="243:44" pos:end="243:45">-&gt;</operator><name pos:start="243:46" pos:end="243:50">avctx</name><operator pos:start="243:51" pos:end="243:52">-&gt;</operator><name pos:start="243:53" pos:end="243:63">rc_strategy</name></name> <operator pos:start="243:65" pos:end="243:66">==</operator> <name pos:start="243:68" pos:end="243:86">FF_RC_STRATEGY_XVID</name></expr>)</condition> <block pos:start="243:89" pos:end="257:9">{<block_content pos:start="247:13" pos:end="256:0">

<cpp:ifdef pos:start="245:1" pos:end="245:21">#<cpp:directive pos:start="245:2" pos:end="245:6">ifdef</cpp:directive> <name pos:start="245:8" pos:end="245:21">CONFIG_LIBXVID</name></cpp:ifdef>

            <return pos:start="247:13" pos:end="250:0">return <expr pos:start="247:20" pos:end="247:47"><call pos:start="247:20" pos:end="247:47"><name pos:start="247:20" pos:end="247:44">ff_xvid_rate_control_init</name><argument_list pos:start="247:45" pos:end="247:47">(<argument pos:start="247:46" pos:end="247:46"><expr pos:start="247:46" pos:end="247:46"><name pos:start="247:46" pos:end="247:46">s</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else pos:start="249:1" pos:end="249:5">#<cpp:directive pos:start="249:2" pos:end="249:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="251:13" pos:end="251:112"><expr pos:start="251:13" pos:end="251:111"><call pos:start="251:13" pos:end="251:111"><name pos:start="251:13" pos:end="251:18">av_log</name><argument_list pos:start="251:19" pos:end="251:111">(<argument pos:start="251:20" pos:end="251:27"><expr pos:start="251:20" pos:end="251:27"><name pos:start="251:20" pos:end="251:27"><name pos:start="251:20" pos:end="251:20">s</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:27">avctx</name></name></expr></argument>, <argument pos:start="251:30" pos:end="251:41"><expr pos:start="251:30" pos:end="251:41"><name pos:start="251:30" pos:end="251:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="251:44" pos:end="251:110"><expr pos:start="251:44" pos:end="251:110"><literal type="string" pos:start="251:44" pos:end="251:110">"XviD ratecontrol requires libavcodec compiled with XviD support\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="253:13" pos:end="256:0">return <expr pos:start="253:20" pos:end="253:21"><operator pos:start="253:20" pos:end="253:20">-</operator><literal type="number" pos:start="253:21" pos:end="253:21">1</literal></expr>;</return>

<cpp:endif pos:start="255:1" pos:end="255:6">#<cpp:directive pos:start="255:2" pos:end="255:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="263:5" pos:end="371:5"><if pos:start="263:5" pos:end="371:5">if<condition pos:start="263:7" pos:end="263:36">(<expr pos:start="263:8" pos:end="263:35"><operator pos:start="263:8" pos:end="263:8">!</operator><operator pos:start="263:9" pos:end="263:9">(</operator><name pos:start="263:10" pos:end="263:17"><name pos:start="263:10" pos:end="263:10">s</name><operator pos:start="263:11" pos:end="263:12">-&gt;</operator><name pos:start="263:13" pos:end="263:17">flags</name></name><operator pos:start="263:18" pos:end="263:18">&amp;</operator><name pos:start="263:19" pos:end="263:34">CODEC_FLAG_PASS2</name><operator pos:start="263:35" pos:end="263:35">)</operator></expr>)</condition><block pos:start="263:37" pos:end="371:5">{<block_content pos:start="267:9" pos:end="367:9">



        <expr_stmt pos:start="267:9" pos:end="267:35"><expr pos:start="267:9" pos:end="267:34"><name pos:start="267:9" pos:end="267:28"><name pos:start="267:9" pos:end="267:11">rcc</name><operator pos:start="267:12" pos:end="267:13">-&gt;</operator><name pos:start="267:14" pos:end="267:28">short_term_qsum</name></name><operator pos:start="267:29" pos:end="267:29">=</operator><literal type="number" pos:start="267:30" pos:end="267:34">0.001</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="269:9" pos:end="269:37"><expr pos:start="269:9" pos:end="269:36"><name pos:start="269:9" pos:end="269:30"><name pos:start="269:9" pos:end="269:11">rcc</name><operator pos:start="269:12" pos:end="269:13">-&gt;</operator><name pos:start="269:14" pos:end="269:30">short_term_qcount</name></name><operator pos:start="269:31" pos:end="269:31">=</operator><literal type="number" pos:start="269:32" pos:end="269:36">0.001</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="273:9" pos:end="273:43"><expr pos:start="273:9" pos:end="273:42"><name pos:start="273:9" pos:end="273:35"><name pos:start="273:9" pos:end="273:11">rcc</name><operator pos:start="273:12" pos:end="273:13">-&gt;</operator><name pos:start="273:14" pos:end="273:35">pass1_rc_eq_output_sum</name></name><operator pos:start="273:36" pos:end="273:36">=</operator> <literal type="number" pos:start="273:38" pos:end="273:42">0.001</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:37"><expr pos:start="275:9" pos:end="275:36"><name pos:start="275:9" pos:end="275:30"><name pos:start="275:9" pos:end="275:11">rcc</name><operator pos:start="275:12" pos:end="275:13">-&gt;</operator><name pos:start="275:14" pos:end="275:30">pass1_wanted_bits</name></name><operator pos:start="275:31" pos:end="275:31">=</operator><literal type="number" pos:start="275:32" pos:end="275:36">0.001</literal></expr>;</expr_stmt>



        <if_stmt pos:start="279:9" pos:end="285:9"><if pos:start="279:9" pos:end="285:9">if<condition pos:start="279:11" pos:end="279:33">(<expr pos:start="279:12" pos:end="279:32"><name pos:start="279:12" pos:end="279:26"><name pos:start="279:12" pos:end="279:12">s</name><operator pos:start="279:13" pos:end="279:14">-&gt;</operator><name pos:start="279:15" pos:end="279:19">avctx</name><operator pos:start="279:20" pos:end="279:21">-&gt;</operator><name pos:start="279:22" pos:end="279:26">qblur</name></name> <operator pos:start="279:28" pos:end="279:28">&gt;</operator> <literal type="number" pos:start="279:30" pos:end="279:32">1.0</literal></expr>)</condition><block pos:start="279:34" pos:end="285:9">{<block_content pos:start="281:13" pos:end="283:22">

            <expr_stmt pos:start="281:13" pos:end="281:64"><expr pos:start="281:13" pos:end="281:63"><call pos:start="281:13" pos:end="281:63"><name pos:start="281:13" pos:end="281:18">av_log</name><argument_list pos:start="281:19" pos:end="281:63">(<argument pos:start="281:20" pos:end="281:27"><expr pos:start="281:20" pos:end="281:27"><name pos:start="281:20" pos:end="281:27"><name pos:start="281:20" pos:end="281:20">s</name><operator pos:start="281:21" pos:end="281:22">-&gt;</operator><name pos:start="281:23" pos:end="281:27">avctx</name></name></expr></argument>, <argument pos:start="281:30" pos:end="281:41"><expr pos:start="281:30" pos:end="281:41"><name pos:start="281:30" pos:end="281:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:44" pos:end="281:62"><expr pos:start="281:44" pos:end="281:62"><literal type="string" pos:start="281:44" pos:end="281:62">"qblur too large\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="283:13" pos:end="283:22">return <expr pos:start="283:20" pos:end="283:21"><operator pos:start="283:20" pos:end="283:20">-</operator><literal type="number" pos:start="283:21" pos:end="283:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="287:9" pos:end="287:59">/* init stuff with the user specified complexity */</comment>

        <if_stmt pos:start="289:9" pos:end="367:9"><if pos:start="289:9" pos:end="367:9">if<condition pos:start="289:11" pos:end="289:37">(<expr pos:start="289:12" pos:end="289:36"><name pos:start="289:12" pos:end="289:36"><name pos:start="289:12" pos:end="289:12">s</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:19">avctx</name><operator pos:start="289:20" pos:end="289:21">-&gt;</operator><name pos:start="289:22" pos:end="289:36">rc_initial_cplx</name></name></expr>)</condition><block pos:start="289:38" pos:end="367:9">{<block_content pos:start="291:13" pos:end="365:13">

            <for pos:start="291:13" pos:end="365:13">for<control pos:start="291:16" pos:end="291:34">(<init pos:start="291:17" pos:end="291:20"><expr pos:start="291:17" pos:end="291:19"><name pos:start="291:17" pos:end="291:17">i</name><operator pos:start="291:18" pos:end="291:18">=</operator><literal type="number" pos:start="291:19" pos:end="291:19">0</literal></expr>;</init> <condition pos:start="291:22" pos:end="291:29"><expr pos:start="291:22" pos:end="291:28"><name pos:start="291:22" pos:end="291:22">i</name><operator pos:start="291:23" pos:end="291:23">&lt;</operator><literal type="number" pos:start="291:24" pos:end="291:25">60</literal><operator pos:start="291:26" pos:end="291:26">*</operator><literal type="number" pos:start="291:27" pos:end="291:28">30</literal></expr>;</condition> <incr pos:start="291:31" pos:end="291:33"><expr pos:start="291:31" pos:end="291:33"><name pos:start="291:31" pos:end="291:31">i</name><operator pos:start="291:32" pos:end="291:33">++</operator></expr></incr>)</control><block pos:start="291:35" pos:end="365:13">{<block_content pos:start="293:17" pos:end="363:85">

                <decl_stmt pos:start="293:17" pos:end="293:85"><decl pos:start="293:17" pos:end="293:84"><type pos:start="293:17" pos:end="293:22"><name pos:start="293:17" pos:end="293:22">double</name></type> <name pos:start="293:24" pos:end="293:27">bits</name><init pos:start="293:28" pos:end="293:84">= <expr pos:start="293:30" pos:end="293:84"><name pos:start="293:30" pos:end="293:54"><name pos:start="293:30" pos:end="293:30">s</name><operator pos:start="293:31" pos:end="293:32">-&gt;</operator><name pos:start="293:33" pos:end="293:37">avctx</name><operator pos:start="293:38" pos:end="293:39">-&gt;</operator><name pos:start="293:40" pos:end="293:54">rc_initial_cplx</name></name> <operator pos:start="293:56" pos:end="293:56">*</operator> <operator pos:start="293:58" pos:end="293:58">(</operator><name pos:start="293:59" pos:end="293:59">i</name><operator pos:start="293:60" pos:end="293:60">/</operator><literal type="number" pos:start="293:61" pos:end="293:69">10000.0</literal> <operator pos:start="293:69" pos:end="293:69">+</operator> <literal type="number" pos:start="293:71" pos:end="293:73">1.0</literal><operator pos:start="293:74" pos:end="293:74">)</operator><operator pos:start="293:75" pos:end="293:75">*</operator><name pos:start="293:76" pos:end="293:84"><name pos:start="293:76" pos:end="293:76">s</name><operator pos:start="293:77" pos:end="293:78">-&gt;</operator><name pos:start="293:79" pos:end="293:84">mb_num</name></name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="295:17" pos:end="295:37"><decl pos:start="295:17" pos:end="295:36"><type pos:start="295:17" pos:end="295:32"><name pos:start="295:17" pos:end="295:32">RateControlEntry</name></type> <name pos:start="295:34" pos:end="295:36">rce</name></decl>;</decl_stmt>

                <decl_stmt pos:start="297:17" pos:end="297:25"><decl pos:start="297:17" pos:end="297:24"><type pos:start="297:17" pos:end="297:22"><name pos:start="297:17" pos:end="297:22">double</name></type> <name pos:start="297:24" pos:end="297:24">q</name></decl>;</decl_stmt>



                <if_stmt pos:start="301:17" pos:end="305:72"><if pos:start="301:17" pos:end="301:72">if     <condition pos:start="301:24" pos:end="301:49">(<expr pos:start="301:25" pos:end="301:48"><name pos:start="301:25" pos:end="301:25">i</name><operator pos:start="301:26" pos:end="301:26">%</operator><operator pos:start="301:27" pos:end="301:27">(</operator><operator pos:start="301:28" pos:end="301:28">(</operator><name pos:start="301:29" pos:end="301:39"><name pos:start="301:29" pos:end="301:29">s</name><operator pos:start="301:30" pos:end="301:31">-&gt;</operator><name pos:start="301:32" pos:end="301:39">gop_size</name></name><operator pos:start="301:40" pos:end="301:40">+</operator><literal type="number" pos:start="301:41" pos:end="301:41">3</literal><operator pos:start="301:42" pos:end="301:42">)</operator><operator pos:start="301:43" pos:end="301:43">/</operator><literal type="number" pos:start="301:44" pos:end="301:44">4</literal><operator pos:start="301:45" pos:end="301:45">)</operator><operator pos:start="301:46" pos:end="301:47">==</operator><literal type="number" pos:start="301:48" pos:end="301:48">0</literal></expr>)</condition><block type="pseudo" pos:start="301:51" pos:end="301:72"><block_content pos:start="301:51" pos:end="301:72"> <expr_stmt pos:start="301:51" pos:end="301:72"><expr pos:start="301:51" pos:end="301:71"><name pos:start="301:51" pos:end="301:63"><name pos:start="301:51" pos:end="301:53">rce</name><operator pos:start="301:54" pos:end="301:54">.</operator><name pos:start="301:55" pos:end="301:63">pict_type</name></name><operator pos:start="301:64" pos:end="301:64">=</operator> <name pos:start="301:66" pos:end="301:71">I_TYPE</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="303:17" pos:end="303:72">else if<condition pos:start="303:24" pos:end="303:46">(<expr pos:start="303:25" pos:end="303:45"><name pos:start="303:25" pos:end="303:25">i</name><operator pos:start="303:26" pos:end="303:26">%</operator><operator pos:start="303:27" pos:end="303:27">(</operator><name pos:start="303:28" pos:end="303:42"><name pos:start="303:28" pos:end="303:28">s</name><operator pos:start="303:29" pos:end="303:30">-&gt;</operator><name pos:start="303:31" pos:end="303:42">max_b_frames</name></name><operator pos:start="303:43" pos:end="303:43">+</operator><literal type="number" pos:start="303:44" pos:end="303:44">1</literal><operator pos:start="303:45" pos:end="303:45">)</operator></expr>)</condition><block type="pseudo" pos:start="303:51" pos:end="303:72"><block_content pos:start="303:51" pos:end="303:72">    <expr_stmt pos:start="303:51" pos:end="303:72"><expr pos:start="303:51" pos:end="303:71"><name pos:start="303:51" pos:end="303:63"><name pos:start="303:51" pos:end="303:53">rce</name><operator pos:start="303:54" pos:end="303:54">.</operator><name pos:start="303:55" pos:end="303:63">pict_type</name></name><operator pos:start="303:64" pos:end="303:64">=</operator> <name pos:start="303:66" pos:end="303:71">B_TYPE</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="305:17" pos:end="305:72">else<block type="pseudo" pos:start="305:51" pos:end="305:72"><block_content pos:start="305:51" pos:end="305:72">                              <expr_stmt pos:start="305:51" pos:end="305:72"><expr pos:start="305:51" pos:end="305:71"><name pos:start="305:51" pos:end="305:63"><name pos:start="305:51" pos:end="305:53">rce</name><operator pos:start="305:54" pos:end="305:54">.</operator><name pos:start="305:55" pos:end="305:63">pict_type</name></name><operator pos:start="305:64" pos:end="305:64">=</operator> <name pos:start="305:66" pos:end="305:71">P_TYPE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



                <expr_stmt pos:start="309:17" pos:end="309:49"><expr pos:start="309:17" pos:end="309:48"><name pos:start="309:17" pos:end="309:33"><name pos:start="309:17" pos:end="309:19">rce</name><operator pos:start="309:20" pos:end="309:20">.</operator><name pos:start="309:21" pos:end="309:33">new_pict_type</name></name><operator pos:start="309:34" pos:end="309:34">=</operator> <name pos:start="309:36" pos:end="309:48"><name pos:start="309:36" pos:end="309:38">rce</name><operator pos:start="309:39" pos:end="309:39">.</operator><name pos:start="309:40" pos:end="309:48">pict_type</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:57"><expr pos:start="311:17" pos:end="311:56"><name pos:start="311:17" pos:end="311:33"><name pos:start="311:17" pos:end="311:19">rce</name><operator pos:start="311:20" pos:end="311:20">.</operator><name pos:start="311:21" pos:end="311:33">mc_mb_var_sum</name></name><operator pos:start="311:34" pos:end="311:34">=</operator> <name pos:start="311:36" pos:end="311:39">bits</name><operator pos:start="311:40" pos:end="311:40">*</operator><name pos:start="311:41" pos:end="311:49"><name pos:start="311:41" pos:end="311:41">s</name><operator pos:start="311:42" pos:end="311:43">-&gt;</operator><name pos:start="311:44" pos:end="311:49">mb_num</name></name><operator pos:start="311:50" pos:end="311:50">/</operator><literal type="number" pos:start="311:51" pos:end="311:56">100000</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:45"><expr pos:start="313:17" pos:end="313:44"><name pos:start="313:17" pos:end="313:30"><name pos:start="313:17" pos:end="313:19">rce</name><operator pos:start="313:20" pos:end="313:20">.</operator><name pos:start="313:21" pos:end="313:30">mb_var_sum</name></name>   <operator pos:start="313:34" pos:end="313:34">=</operator> <name pos:start="313:36" pos:end="313:44"><name pos:start="313:36" pos:end="313:36">s</name><operator pos:start="313:37" pos:end="313:38">-&gt;</operator><name pos:start="313:39" pos:end="313:44">mb_num</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="315:17" pos:end="315:48"><expr pos:start="315:17" pos:end="315:47"><name pos:start="315:17" pos:end="315:26"><name pos:start="315:17" pos:end="315:19">rce</name><operator pos:start="315:20" pos:end="315:20">.</operator><name pos:start="315:21" pos:end="315:26">qscale</name></name>   <operator pos:start="315:30" pos:end="315:30">=</operator> <name pos:start="315:32" pos:end="315:43">FF_QP2LAMBDA</name> <operator pos:start="315:45" pos:end="315:45">*</operator> <literal type="number" pos:start="315:47" pos:end="315:47">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="317:17" pos:end="317:33"><expr pos:start="317:17" pos:end="317:32"><name pos:start="317:17" pos:end="317:26"><name pos:start="317:17" pos:end="317:19">rce</name><operator pos:start="317:20" pos:end="317:20">.</operator><name pos:start="317:21" pos:end="317:26">f_code</name></name>   <operator pos:start="317:30" pos:end="317:30">=</operator> <literal type="number" pos:start="317:32" pos:end="317:32">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="319:17" pos:end="319:33"><expr pos:start="319:17" pos:end="319:32"><name pos:start="319:17" pos:end="319:26"><name pos:start="319:17" pos:end="319:19">rce</name><operator pos:start="319:20" pos:end="319:20">.</operator><name pos:start="319:21" pos:end="319:26">b_code</name></name>   <operator pos:start="319:30" pos:end="319:30">=</operator> <literal type="number" pos:start="319:32" pos:end="319:32">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="321:33"><expr pos:start="321:17" pos:end="321:32"><name pos:start="321:17" pos:end="321:29"><name pos:start="321:17" pos:end="321:19">rce</name><operator pos:start="321:20" pos:end="321:20">.</operator><name pos:start="321:21" pos:end="321:29">misc_bits</name></name><operator pos:start="321:30" pos:end="321:30">=</operator> <literal type="number" pos:start="321:32" pos:end="321:32">1</literal></expr>;</expr_stmt>



                <if_stmt pos:start="325:17" pos:end="345:17"><if pos:start="325:17" pos:end="335:17">if<condition pos:start="325:19" pos:end="325:41">(<expr pos:start="325:20" pos:end="325:40"><name pos:start="325:20" pos:end="325:31"><name pos:start="325:20" pos:end="325:20">s</name><operator pos:start="325:21" pos:end="325:22">-&gt;</operator><name pos:start="325:23" pos:end="325:31">pict_type</name></name><operator pos:start="325:32" pos:end="325:33">==</operator> <name pos:start="325:35" pos:end="325:40">I_TYPE</name></expr>)</condition><block pos:start="325:42" pos:end="335:17">{<block_content pos:start="327:21" pos:end="333:35">

                    <expr_stmt pos:start="327:21" pos:end="327:46"><expr pos:start="327:21" pos:end="327:45"><name pos:start="327:21" pos:end="327:31"><name pos:start="327:21" pos:end="327:23">rce</name><operator pos:start="327:24" pos:end="327:24">.</operator><name pos:start="327:25" pos:end="327:31">i_count</name></name>   <operator pos:start="327:35" pos:end="327:35">=</operator> <name pos:start="327:37" pos:end="327:45"><name pos:start="327:37" pos:end="327:37">s</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:45">mb_num</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="329:21" pos:end="329:41"><expr pos:start="329:21" pos:end="329:40"><name pos:start="329:21" pos:end="329:34"><name pos:start="329:21" pos:end="329:23">rce</name><operator pos:start="329:24" pos:end="329:24">.</operator><name pos:start="329:25" pos:end="329:34">i_tex_bits</name></name><operator pos:start="329:35" pos:end="329:35">=</operator> <name pos:start="329:37" pos:end="329:40">bits</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="331:21" pos:end="331:38"><expr pos:start="331:21" pos:end="331:37"><name pos:start="331:21" pos:end="331:34"><name pos:start="331:21" pos:end="331:23">rce</name><operator pos:start="331:24" pos:end="331:24">.</operator><name pos:start="331:25" pos:end="331:34">p_tex_bits</name></name><operator pos:start="331:35" pos:end="331:35">=</operator> <literal type="number" pos:start="331:37" pos:end="331:37">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="333:21" pos:end="333:35"><expr pos:start="333:21" pos:end="333:34"><name pos:start="333:21" pos:end="333:31"><name pos:start="333:21" pos:end="333:23">rce</name><operator pos:start="333:24" pos:end="333:24">.</operator><name pos:start="333:25" pos:end="333:31">mv_bits</name></name><operator pos:start="333:32" pos:end="333:32">=</operator> <literal type="number" pos:start="333:34" pos:end="333:34">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if><else pos:start="335:18" pos:end="345:17">else<block pos:start="335:22" pos:end="345:17">{<block_content pos:start="337:21" pos:end="343:42">

                    <expr_stmt pos:start="337:21" pos:end="337:38"><expr pos:start="337:21" pos:end="337:37"><name pos:start="337:21" pos:end="337:31"><name pos:start="337:21" pos:end="337:23">rce</name><operator pos:start="337:24" pos:end="337:24">.</operator><name pos:start="337:25" pos:end="337:31">i_count</name></name>   <operator pos:start="337:35" pos:end="337:35">=</operator> <literal type="number" pos:start="337:37" pos:end="337:37">0</literal></expr>;</expr_stmt> <comment type="line" pos:start="337:40" pos:end="337:69">//FIXME we do know this approx</comment>

                    <expr_stmt pos:start="339:21" pos:end="339:38"><expr pos:start="339:21" pos:end="339:37"><name pos:start="339:21" pos:end="339:34"><name pos:start="339:21" pos:end="339:23">rce</name><operator pos:start="339:24" pos:end="339:24">.</operator><name pos:start="339:25" pos:end="339:34">i_tex_bits</name></name><operator pos:start="339:35" pos:end="339:35">=</operator> <literal type="number" pos:start="339:37" pos:end="339:37">0</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="341:21" pos:end="341:45"><expr pos:start="341:21" pos:end="341:44"><name pos:start="341:21" pos:end="341:34"><name pos:start="341:21" pos:end="341:23">rce</name><operator pos:start="341:24" pos:end="341:24">.</operator><name pos:start="341:25" pos:end="341:34">p_tex_bits</name></name><operator pos:start="341:35" pos:end="341:35">=</operator> <name pos:start="341:37" pos:end="341:40">bits</name><operator pos:start="341:41" pos:end="341:41">*</operator><literal type="number" pos:start="341:42" pos:end="341:44">0.9</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="343:21" pos:end="343:42"><expr pos:start="343:21" pos:end="343:41"><name pos:start="343:21" pos:end="343:31"><name pos:start="343:21" pos:end="343:23">rce</name><operator pos:start="343:24" pos:end="343:24">.</operator><name pos:start="343:25" pos:end="343:31">mv_bits</name></name><operator pos:start="343:32" pos:end="343:32">=</operator> <name pos:start="343:34" pos:end="343:37">bits</name><operator pos:start="343:38" pos:end="343:38">*</operator><literal type="number" pos:start="343:39" pos:end="343:41">0.1</literal></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="347:17" pos:end="347:77"><expr pos:start="347:17" pos:end="347:76"><name pos:start="347:17" pos:end="347:47"><name pos:start="347:17" pos:end="347:19">rcc</name><operator pos:start="347:20" pos:end="347:21">-&gt;</operator><name pos:start="347:22" pos:end="347:31">i_cplx_sum</name> <index pos:start="347:33" pos:end="347:47">[<expr pos:start="347:34" pos:end="347:46"><name pos:start="347:34" pos:end="347:46"><name pos:start="347:34" pos:end="347:36">rce</name><operator pos:start="347:37" pos:end="347:37">.</operator><name pos:start="347:38" pos:end="347:46">pict_type</name></name></expr>]</index></name> <operator pos:start="347:49" pos:end="347:50">+=</operator> <name pos:start="347:52" pos:end="347:65"><name pos:start="347:52" pos:end="347:54">rce</name><operator pos:start="347:55" pos:end="347:55">.</operator><name pos:start="347:56" pos:end="347:65">i_tex_bits</name></name><operator pos:start="347:66" pos:end="347:66">*</operator><name pos:start="347:67" pos:end="347:76"><name pos:start="347:67" pos:end="347:69">rce</name><operator pos:start="347:70" pos:end="347:70">.</operator><name pos:start="347:71" pos:end="347:76">qscale</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="349:17" pos:end="349:77"><expr pos:start="349:17" pos:end="349:76"><name pos:start="349:17" pos:end="349:47"><name pos:start="349:17" pos:end="349:19">rcc</name><operator pos:start="349:20" pos:end="349:21">-&gt;</operator><name pos:start="349:22" pos:end="349:31">p_cplx_sum</name> <index pos:start="349:33" pos:end="349:47">[<expr pos:start="349:34" pos:end="349:46"><name pos:start="349:34" pos:end="349:46"><name pos:start="349:34" pos:end="349:36">rce</name><operator pos:start="349:37" pos:end="349:37">.</operator><name pos:start="349:38" pos:end="349:46">pict_type</name></name></expr>]</index></name> <operator pos:start="349:49" pos:end="349:50">+=</operator> <name pos:start="349:52" pos:end="349:65"><name pos:start="349:52" pos:end="349:54">rce</name><operator pos:start="349:55" pos:end="349:55">.</operator><name pos:start="349:56" pos:end="349:65">p_tex_bits</name></name><operator pos:start="349:66" pos:end="349:66">*</operator><name pos:start="349:67" pos:end="349:76"><name pos:start="349:67" pos:end="349:69">rce</name><operator pos:start="349:70" pos:end="349:70">.</operator><name pos:start="349:71" pos:end="349:76">qscale</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="351:17" pos:end="351:63"><expr pos:start="351:17" pos:end="351:62"><name pos:start="351:17" pos:end="351:47"><name pos:start="351:17" pos:end="351:19">rcc</name><operator pos:start="351:20" pos:end="351:21">-&gt;</operator><name pos:start="351:22" pos:end="351:32">mv_bits_sum</name><index pos:start="351:33" pos:end="351:47">[<expr pos:start="351:34" pos:end="351:46"><name pos:start="351:34" pos:end="351:46"><name pos:start="351:34" pos:end="351:36">rce</name><operator pos:start="351:37" pos:end="351:37">.</operator><name pos:start="351:38" pos:end="351:46">pict_type</name></name></expr>]</index></name> <operator pos:start="351:49" pos:end="351:50">+=</operator> <name pos:start="351:52" pos:end="351:62"><name pos:start="351:52" pos:end="351:54">rce</name><operator pos:start="351:55" pos:end="351:55">.</operator><name pos:start="351:56" pos:end="351:62">mv_bits</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:51"><expr pos:start="353:17" pos:end="353:50"><name pos:start="353:17" pos:end="353:47"><name pos:start="353:17" pos:end="353:19">rcc</name><operator pos:start="353:20" pos:end="353:21">-&gt;</operator><name pos:start="353:22" pos:end="353:32">frame_count</name><index pos:start="353:33" pos:end="353:47">[<expr pos:start="353:34" pos:end="353:46"><name pos:start="353:34" pos:end="353:46"><name pos:start="353:34" pos:end="353:36">rce</name><operator pos:start="353:37" pos:end="353:37">.</operator><name pos:start="353:38" pos:end="353:46">pict_type</name></name></expr>]</index></name> <operator pos:start="353:49" pos:end="353:50">++</operator></expr>;</expr_stmt>



                <expr_stmt pos:start="357:17" pos:end="357:54"><expr pos:start="357:17" pos:end="357:53"><name pos:start="357:17" pos:end="357:20">bits</name><operator pos:start="357:21" pos:end="357:21">=</operator> <name pos:start="357:23" pos:end="357:36"><name pos:start="357:23" pos:end="357:25">rce</name><operator pos:start="357:26" pos:end="357:26">.</operator><name pos:start="357:27" pos:end="357:36">i_tex_bits</name></name> <operator pos:start="357:38" pos:end="357:38">+</operator> <name pos:start="357:40" pos:end="357:53"><name pos:start="357:40" pos:end="357:42">rce</name><operator pos:start="357:43" pos:end="357:43">.</operator><name pos:start="357:44" pos:end="357:53">p_tex_bits</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="361:17" pos:end="361:94"><expr pos:start="361:17" pos:end="361:93"><name pos:start="361:17" pos:end="361:17">q</name><operator pos:start="361:18" pos:end="361:18">=</operator> <call pos:start="361:20" pos:end="361:93"><name pos:start="361:20" pos:end="361:29">get_qscale</name><argument_list pos:start="361:30" pos:end="361:93">(<argument pos:start="361:31" pos:end="361:31"><expr pos:start="361:31" pos:end="361:31"><name pos:start="361:31" pos:end="361:31">s</name></expr></argument>, <argument pos:start="361:34" pos:end="361:37"><expr pos:start="361:34" pos:end="361:37"><operator pos:start="361:34" pos:end="361:34">&amp;</operator><name pos:start="361:35" pos:end="361:37">rce</name></expr></argument>, <argument pos:start="361:40" pos:end="361:89"><expr pos:start="361:40" pos:end="361:89"><name pos:start="361:40" pos:end="361:61"><name pos:start="361:40" pos:end="361:42">rcc</name><operator pos:start="361:43" pos:end="361:44">-&gt;</operator><name pos:start="361:45" pos:end="361:61">pass1_wanted_bits</name></name><operator pos:start="361:62" pos:end="361:62">/</operator><name pos:start="361:63" pos:end="361:89"><name pos:start="361:63" pos:end="361:65">rcc</name><operator pos:start="361:66" pos:end="361:67">-&gt;</operator><name pos:start="361:68" pos:end="361:89">pass1_rc_eq_output_sum</name></name></expr></argument>, <argument pos:start="361:92" pos:end="361:92"><expr pos:start="361:92" pos:end="361:92"><name pos:start="361:92" pos:end="361:92">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="363:17" pos:end="363:85"><expr pos:start="363:17" pos:end="363:84"><name pos:start="363:17" pos:end="363:38"><name pos:start="363:17" pos:end="363:19">rcc</name><operator pos:start="363:20" pos:end="363:21">-&gt;</operator><name pos:start="363:22" pos:end="363:38">pass1_wanted_bits</name></name><operator pos:start="363:39" pos:end="363:40">+=</operator> <name pos:start="363:42" pos:end="363:52"><name pos:start="363:42" pos:end="363:42">s</name><operator pos:start="363:43" pos:end="363:44">-&gt;</operator><name pos:start="363:45" pos:end="363:52">bit_rate</name></name><operator pos:start="363:53" pos:end="363:53">/</operator><operator pos:start="363:54" pos:end="363:54">(</operator><literal type="number" pos:start="363:55" pos:end="363:55">1</literal><operator pos:start="363:56" pos:end="363:56">/</operator><call pos:start="363:57" pos:end="363:83"><name pos:start="363:57" pos:end="363:62">av_q2d</name><argument_list pos:start="363:63" pos:end="363:83">(<argument pos:start="363:64" pos:end="363:82"><expr pos:start="363:64" pos:end="363:82"><name pos:start="363:64" pos:end="363:82"><name pos:start="363:64" pos:end="363:64">s</name><operator pos:start="363:65" pos:end="363:66">-&gt;</operator><name pos:start="363:67" pos:end="363:71">avctx</name><operator pos:start="363:72" pos:end="363:73">-&gt;</operator><name pos:start="363:74" pos:end="363:82">time_base</name></name></expr></argument>)</argument_list></call><operator pos:start="363:84" pos:end="363:84">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="363:87" pos:end="363:130">//FIXME misbehaves a little for variable fps</comment>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



    </block_content>}</block></if></if_stmt>



    <return pos:start="375:5" pos:end="375:13">return <expr pos:start="375:12" pos:end="375:12"><literal type="number" pos:start="375:12" pos:end="375:12">0</literal></expr>;</return>

}
</unit>
