<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26923.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">decode_main_header</name><parameter_list pos:start="1:30" pos:end="1:46">(<parameter pos:start="1:31" pos:end="1:45"><decl pos:start="1:31" pos:end="1:45"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:40">NUTContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:45">nut</name></decl></parameter>)</parameter_list><block pos:start="1:47" pos:end="171:1">{<block_content pos:start="3:5" pos:end="169:13">

    <decl_stmt pos:start="3:5" pos:end="3:33"><decl pos:start="3:5" pos:end="3:32"><type pos:start="3:5" pos:end="3:21"><name pos:start="3:5" pos:end="3:19">AVFormatContext</name> <modifier pos:start="3:21" pos:end="3:21">*</modifier></type><name pos:start="3:22" pos:end="3:22">s</name><init pos:start="3:23" pos:end="3:32">= <expr pos:start="3:25" pos:end="3:32"><name pos:start="3:25" pos:end="3:32"><name pos:start="3:25" pos:end="3:27">nut</name><operator pos:start="3:28" pos:end="3:29">-&gt;</operator><name pos:start="3:30" pos:end="3:32">avf</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">ByteIOContext</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:21">bc</name> <init pos:start="5:23" pos:end="5:30">= <expr pos:start="5:25" pos:end="5:30"><operator pos:start="5:25" pos:end="5:25">&amp;</operator><name pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:26">s</name><operator pos:start="5:27" pos:end="5:28">-&gt;</operator><name pos:start="5:29" pos:end="5:30">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">tmp</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:21">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:29">stream_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:69"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">j</name></decl>, <decl pos:start="11:15" pos:end="11:24"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:15" pos:end="11:24">tmp_stream</name></decl>, <decl pos:start="11:27" pos:end="11:33"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:27" pos:end="11:33">tmp_mul</name></decl>, <decl pos:start="11:36" pos:end="11:42"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:36" pos:end="11:42">tmp_pts</name></decl>, <decl pos:start="11:45" pos:end="11:52"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:45" pos:end="11:52">tmp_size</name></decl>, <decl pos:start="11:55" pos:end="11:59"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:55" pos:end="11:59">count</name></decl>, <decl pos:start="11:62" pos:end="11:68"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:62" pos:end="11:68">tmp_res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:38"><expr pos:start="15:5" pos:end="15:37"><name pos:start="15:5" pos:end="15:7">end</name><operator pos:start="15:8" pos:end="15:8">=</operator> <call pos:start="15:10" pos:end="15:37"><name pos:start="15:10" pos:end="15:25">get_packetheader</name><argument_list pos:start="15:26" pos:end="15:37">(<argument pos:start="15:27" pos:end="15:29"><expr pos:start="15:27" pos:end="15:29"><name pos:start="15:27" pos:end="15:29">nut</name></expr></argument>, <argument pos:start="15:32" pos:end="15:33"><expr pos:start="15:32" pos:end="15:33"><name pos:start="15:32" pos:end="15:33">bc</name></expr></argument>, <argument pos:start="15:36" pos:end="15:36"><expr pos:start="15:36" pos:end="15:36"><literal type="number" pos:start="15:36" pos:end="15:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:29"><expr pos:start="17:5" pos:end="17:28"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:10">+=</operator> <call pos:start="17:12" pos:end="17:24"><name pos:start="17:12" pos:end="17:20">url_ftell</name><argument_list pos:start="17:21" pos:end="17:24">(<argument pos:start="17:22" pos:end="17:23"><expr pos:start="17:22" pos:end="17:23"><name pos:start="17:22" pos:end="17:23">bc</name></expr></argument>)</argument_list></call> <operator pos:start="17:26" pos:end="17:26">-</operator> <literal type="number" pos:start="17:28" pos:end="17:28">4</literal></expr>;</expr_stmt>



    <macro pos:start="21:5" pos:end="21:49"><name pos:start="21:5" pos:end="21:9">GET_V</name><argument_list pos:start="21:10" pos:end="21:49">(<argument pos:start="21:11" pos:end="21:13">tmp</argument>              , <argument pos:start="21:30" pos:end="21:48">tmp &gt;=<literal type="number" pos:start="21:36" pos:end="21:36">2</literal> &amp;&amp; tmp &lt;= <literal type="number" pos:start="21:48" pos:end="21:48">3</literal></argument>)</argument_list></macro>

    <macro pos:start="23:5" pos:end="23:58"><name pos:start="23:5" pos:end="23:9">GET_V</name><argument_list pos:start="23:10" pos:end="23:58">(<argument pos:start="23:11" pos:end="23:22">stream_count</argument>     , <argument pos:start="23:30" pos:end="23:57">tmp &gt; <literal type="number" pos:start="23:36" pos:end="23:36">0</literal> &amp;&amp; tmp &lt;=MAX_STREAMS</argument>)</argument_list></macro>



    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:21"><name pos:start="27:5" pos:end="27:7">nut</name><operator pos:start="27:8" pos:end="27:9">-&gt;</operator><name pos:start="27:10" pos:end="27:21">max_distance</name></name> <operator pos:start="27:23" pos:end="27:23">=</operator> <call pos:start="27:25" pos:end="27:33"><name pos:start="27:25" pos:end="27:29">get_v</name><argument_list pos:start="27:30" pos:end="27:33">(<argument pos:start="27:31" pos:end="27:32"><expr pos:start="27:31" pos:end="27:32"><name pos:start="27:31" pos:end="27:32">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if<condition pos:start="29:7" pos:end="29:33">(<expr pos:start="29:8" pos:end="29:32"><name pos:start="29:8" pos:end="29:24"><name pos:start="29:8" pos:end="29:10">nut</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:24">max_distance</name></name> <operator pos:start="29:26" pos:end="29:26">&gt;</operator> <literal type="number" pos:start="29:28" pos:end="29:32">65536</literal></expr>)</condition><block pos:start="29:34" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:33">

        <expr_stmt pos:start="31:9" pos:end="31:72"><expr pos:start="31:9" pos:end="31:71"><call pos:start="31:9" pos:end="31:71"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="31:71">(<argument pos:start="31:16" pos:end="31:16"><expr pos:start="31:16" pos:end="31:16"><name pos:start="31:16" pos:end="31:16">s</name></expr></argument>, <argument pos:start="31:19" pos:end="31:30"><expr pos:start="31:19" pos:end="31:30"><name pos:start="31:19" pos:end="31:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="31:33" pos:end="31:51"><expr pos:start="31:33" pos:end="31:51"><literal type="string" pos:start="31:33" pos:end="31:51">"max_distance %d\n"</literal></expr></argument>, <argument pos:start="31:54" pos:end="31:70"><expr pos:start="31:54" pos:end="31:70"><name pos:start="31:54" pos:end="31:70"><name pos:start="31:54" pos:end="31:56">nut</name><operator pos:start="31:57" pos:end="31:58">-&gt;</operator><name pos:start="31:59" pos:end="31:70">max_distance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:11">nut</name><operator pos:start="33:12" pos:end="33:13">-&gt;</operator><name pos:start="33:14" pos:end="33:25">max_distance</name></name><operator pos:start="33:26" pos:end="33:26">=</operator> <literal type="number" pos:start="33:28" pos:end="33:32">65536</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <macro pos:start="39:5" pos:end="39:74"><name pos:start="39:5" pos:end="39:9">GET_V</name><argument_list pos:start="39:10" pos:end="39:74">(<argument pos:start="39:11" pos:end="39:30">nut-&gt;time_base_count</argument>, <argument pos:start="39:33" pos:end="39:73">tmp&gt;<literal type="number" pos:start="39:37" pos:end="39:37">0</literal> &amp;&amp; tmp&lt;INT_MAX / sizeof(AVRational)</argument>)</argument_list></macro>

    <expr_stmt pos:start="41:5" pos:end="41:73"><expr pos:start="41:5" pos:end="41:72"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:7">nut</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:18">time_base</name></name><operator pos:start="41:19" pos:end="41:19">=</operator> <call pos:start="41:21" pos:end="41:72"><name pos:start="41:21" pos:end="41:29">av_malloc</name><argument_list pos:start="41:30" pos:end="41:72">(<argument pos:start="41:31" pos:end="41:71"><expr pos:start="41:31" pos:end="41:71"><name pos:start="41:31" pos:end="41:50"><name pos:start="41:31" pos:end="41:33">nut</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:50">time_base_count</name></name> <operator pos:start="41:52" pos:end="41:52">*</operator> <sizeof pos:start="41:54" pos:end="41:71">sizeof<argument_list pos:start="41:60" pos:end="41:71">(<argument pos:start="41:61" pos:end="41:70"><expr pos:start="41:61" pos:end="41:70"><name pos:start="41:61" pos:end="41:70">AVRational</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="45:5" pos:end="59:5">for<control pos:start="45:8" pos:end="45:41">(<init pos:start="45:9" pos:end="45:12"><expr pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:9">i</name><operator pos:start="45:10" pos:end="45:10">=</operator><literal type="number" pos:start="45:11" pos:end="45:11">0</literal></expr>;</init> <condition pos:start="45:14" pos:end="45:36"><expr pos:start="45:14" pos:end="45:35"><name pos:start="45:14" pos:end="45:14">i</name><operator pos:start="45:15" pos:end="45:15">&lt;</operator><name pos:start="45:16" pos:end="45:35"><name pos:start="45:16" pos:end="45:18">nut</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:35">time_base_count</name></name></expr>;</condition> <incr pos:start="45:38" pos:end="45:40"><expr pos:start="45:38" pos:end="45:40"><name pos:start="45:38" pos:end="45:38">i</name><operator pos:start="45:39" pos:end="45:40">++</operator></expr></incr>)</control><block pos:start="45:42" pos:end="59:5">{<block_content pos:start="47:9" pos:end="57:9">

        <macro pos:start="47:9" pos:end="47:61"><name pos:start="47:9" pos:end="47:13">GET_V</name><argument_list pos:start="47:14" pos:end="47:61">(<argument pos:start="47:15" pos:end="47:35">nut-&gt;time_base[i].num</argument>, <argument pos:start="47:38" pos:end="47:60">tmp&gt;<literal type="number" pos:start="47:42" pos:end="47:42">0</literal> &amp;&amp; tmp&lt;(<literal type="number" pos:start="47:52" pos:end="47:55">1ULL</literal>&lt;&lt;<literal type="number" pos:start="47:58" pos:end="47:59">31</literal>)</argument>)</argument_list></macro>

        <macro pos:start="49:9" pos:end="49:61"><name pos:start="49:9" pos:end="49:13">GET_V</name><argument_list pos:start="49:14" pos:end="49:61">(<argument pos:start="49:15" pos:end="49:35">nut-&gt;time_base[i].den</argument>, <argument pos:start="49:38" pos:end="49:60">tmp&gt;<literal type="number" pos:start="49:42" pos:end="49:42">0</literal> &amp;&amp; tmp&lt;(<literal type="number" pos:start="49:52" pos:end="49:55">1ULL</literal>&lt;&lt;<literal type="number" pos:start="49:58" pos:end="49:59">31</literal>)</argument>)</argument_list></macro>

        <if_stmt pos:start="51:9" pos:end="57:9"><if pos:start="51:9" pos:end="57:9">if<condition pos:start="51:11" pos:end="51:69">(<expr pos:start="51:12" pos:end="51:68"><call pos:start="51:12" pos:end="51:63"><name pos:start="51:12" pos:end="51:17">ff_gcd</name><argument_list pos:start="51:18" pos:end="51:63">(<argument pos:start="51:19" pos:end="51:39"><expr pos:start="51:19" pos:end="51:39"><name pos:start="51:19" pos:end="51:35"><name pos:start="51:19" pos:end="51:21">nut</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:32">time_base</name><index pos:start="51:33" pos:end="51:35">[<expr pos:start="51:34" pos:end="51:34"><name pos:start="51:34" pos:end="51:34">i</name></expr>]</index></name><operator pos:start="51:36" pos:end="51:36">.</operator><name pos:start="51:37" pos:end="51:39">num</name></expr></argument>, <argument pos:start="51:42" pos:end="51:62"><expr pos:start="51:42" pos:end="51:62"><name pos:start="51:42" pos:end="51:58"><name pos:start="51:42" pos:end="51:44">nut</name><operator pos:start="51:45" pos:end="51:46">-&gt;</operator><name pos:start="51:47" pos:end="51:55">time_base</name><index pos:start="51:56" pos:end="51:58">[<expr pos:start="51:57" pos:end="51:57"><name pos:start="51:57" pos:end="51:57">i</name></expr>]</index></name><operator pos:start="51:59" pos:end="51:59">.</operator><name pos:start="51:60" pos:end="51:62">den</name></expr></argument>)</argument_list></call> <operator pos:start="51:65" pos:end="51:66">!=</operator> <literal type="number" pos:start="51:68" pos:end="51:68">1</literal></expr>)</condition><block pos:start="51:70" pos:end="57:9">{<block_content pos:start="53:13" pos:end="55:22">

            <expr_stmt pos:start="53:13" pos:end="53:59"><expr pos:start="53:13" pos:end="53:58"><call pos:start="53:13" pos:end="53:58"><name pos:start="53:13" pos:end="53:18">av_log</name><argument_list pos:start="53:19" pos:end="53:58">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">s</name></expr></argument>, <argument pos:start="53:23" pos:end="53:34"><expr pos:start="53:23" pos:end="53:34"><name pos:start="53:23" pos:end="53:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="53:37" pos:end="53:57"><expr pos:start="53:37" pos:end="53:57"><literal type="string" pos:start="53:37" pos:end="53:57">"time base invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:22">return <expr pos:start="55:20" pos:end="55:21"><operator pos:start="55:20" pos:end="55:20">-</operator><literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="61:5" pos:end="61:14"><expr pos:start="61:5" pos:end="61:13"><name pos:start="61:5" pos:end="61:11">tmp_pts</name><operator pos:start="61:12" pos:end="61:12">=</operator><literal type="number" pos:start="61:13" pos:end="61:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:14"><expr pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:11">tmp_mul</name><operator pos:start="63:12" pos:end="63:12">=</operator><literal type="number" pos:start="63:13" pos:end="63:13">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:17"><expr pos:start="65:5" pos:end="65:16"><name pos:start="65:5" pos:end="65:14">tmp_stream</name><operator pos:start="65:15" pos:end="65:15">=</operator><literal type="number" pos:start="65:16" pos:end="65:16">0</literal></expr>;</expr_stmt>

    <for pos:start="67:5" pos:end="143:5">for<control pos:start="67:8" pos:end="67:20">(<init pos:start="67:9" pos:end="67:12"><expr pos:start="67:9" pos:end="67:11"><name pos:start="67:9" pos:end="67:9">i</name><operator pos:start="67:10" pos:end="67:10">=</operator><literal type="number" pos:start="67:11" pos:end="67:11">0</literal></expr>;</init> <condition pos:start="67:14" pos:end="67:19"><expr pos:start="67:14" pos:end="67:18"><name pos:start="67:14" pos:end="67:14">i</name><operator pos:start="67:15" pos:end="67:15">&lt;</operator><literal type="number" pos:start="67:16" pos:end="67:18">256</literal></expr>;</condition><incr/>)</control><block pos:start="67:21" pos:end="143:5">{<block_content pos:start="69:9" pos:end="141:9">

        <decl_stmt pos:start="69:9" pos:end="69:34"><decl pos:start="69:9" pos:end="69:33"><type pos:start="69:9" pos:end="69:11"><name pos:start="69:9" pos:end="69:11">int</name></type> <name pos:start="69:13" pos:end="69:21">tmp_flags</name> <init pos:start="69:23" pos:end="69:33">= <expr pos:start="69:25" pos:end="69:33"><call pos:start="69:25" pos:end="69:33"><name pos:start="69:25" pos:end="69:29">get_v</name><argument_list pos:start="69:30" pos:end="69:33">(<argument pos:start="69:31" pos:end="69:32"><expr pos:start="69:31" pos:end="69:32"><name pos:start="69:31" pos:end="69:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="71:9" pos:end="71:34"><decl pos:start="71:9" pos:end="71:33"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:22">tmp_fields</name><init pos:start="71:23" pos:end="71:33">= <expr pos:start="71:25" pos:end="71:33"><call pos:start="71:25" pos:end="71:33"><name pos:start="71:25" pos:end="71:29">get_v</name><argument_list pos:start="71:30" pos:end="71:33">(<argument pos:start="71:31" pos:end="71:32"><expr pos:start="71:31" pos:end="71:32"><name pos:start="71:31" pos:end="71:32">bc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="73:9" pos:end="73:47"><if pos:start="73:9" pos:end="73:47">if<condition pos:start="73:11" pos:end="73:24">(<expr pos:start="73:12" pos:end="73:23"><name pos:start="73:12" pos:end="73:21">tmp_fields</name><operator pos:start="73:22" pos:end="73:22">&gt;</operator><literal type="number" pos:start="73:23" pos:end="73:23">0</literal></expr>)</condition><block type="pseudo" pos:start="73:26" pos:end="73:47"><block_content pos:start="73:26" pos:end="73:47"> <expr_stmt pos:start="73:26" pos:end="73:47"><expr pos:start="73:26" pos:end="73:46"><name pos:start="73:26" pos:end="73:32">tmp_pts</name>   <operator pos:start="73:36" pos:end="73:36">=</operator> <call pos:start="73:38" pos:end="73:46"><name pos:start="73:38" pos:end="73:42">get_s</name><argument_list pos:start="73:43" pos:end="73:46">(<argument pos:start="73:44" pos:end="73:45"><expr pos:start="73:44" pos:end="73:45"><name pos:start="73:44" pos:end="73:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="75:47"><if pos:start="75:9" pos:end="75:47">if<condition pos:start="75:11" pos:end="75:24">(<expr pos:start="75:12" pos:end="75:23"><name pos:start="75:12" pos:end="75:21">tmp_fields</name><operator pos:start="75:22" pos:end="75:22">&gt;</operator><literal type="number" pos:start="75:23" pos:end="75:23">1</literal></expr>)</condition><block type="pseudo" pos:start="75:26" pos:end="75:47"><block_content pos:start="75:26" pos:end="75:47"> <expr_stmt pos:start="75:26" pos:end="75:47"><expr pos:start="75:26" pos:end="75:46"><name pos:start="75:26" pos:end="75:32">tmp_mul</name>   <operator pos:start="75:36" pos:end="75:36">=</operator> <call pos:start="75:38" pos:end="75:46"><name pos:start="75:38" pos:end="75:42">get_v</name><argument_list pos:start="75:43" pos:end="75:46">(<argument pos:start="75:44" pos:end="75:45"><expr pos:start="75:44" pos:end="75:45"><name pos:start="75:44" pos:end="75:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="77:9" pos:end="77:47"><if pos:start="77:9" pos:end="77:47">if<condition pos:start="77:11" pos:end="77:24">(<expr pos:start="77:12" pos:end="77:23"><name pos:start="77:12" pos:end="77:21">tmp_fields</name><operator pos:start="77:22" pos:end="77:22">&gt;</operator><literal type="number" pos:start="77:23" pos:end="77:23">2</literal></expr>)</condition><block type="pseudo" pos:start="77:26" pos:end="77:47"><block_content pos:start="77:26" pos:end="77:47"> <expr_stmt pos:start="77:26" pos:end="77:47"><expr pos:start="77:26" pos:end="77:46"><name pos:start="77:26" pos:end="77:35">tmp_stream</name><operator pos:start="77:36" pos:end="77:36">=</operator> <call pos:start="77:38" pos:end="77:46"><name pos:start="77:38" pos:end="77:42">get_v</name><argument_list pos:start="77:43" pos:end="77:46">(<argument pos:start="77:44" pos:end="77:45"><expr pos:start="77:44" pos:end="77:45"><name pos:start="77:44" pos:end="77:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="81:39"><if pos:start="79:9" pos:end="79:47">if<condition pos:start="79:11" pos:end="79:24">(<expr pos:start="79:12" pos:end="79:23"><name pos:start="79:12" pos:end="79:21">tmp_fields</name><operator pos:start="79:22" pos:end="79:22">&gt;</operator><literal type="number" pos:start="79:23" pos:end="79:23">3</literal></expr>)</condition><block type="pseudo" pos:start="79:26" pos:end="79:47"><block_content pos:start="79:26" pos:end="79:47"> <expr_stmt pos:start="79:26" pos:end="79:47"><expr pos:start="79:26" pos:end="79:46"><name pos:start="79:26" pos:end="79:33">tmp_size</name>  <operator pos:start="79:36" pos:end="79:36">=</operator> <call pos:start="79:38" pos:end="79:46"><name pos:start="79:38" pos:end="79:42">get_v</name><argument_list pos:start="79:43" pos:end="79:46">(<argument pos:start="79:44" pos:end="79:45"><expr pos:start="79:44" pos:end="79:45"><name pos:start="79:44" pos:end="79:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="81:9" pos:end="81:39">else<block type="pseudo" pos:start="81:26" pos:end="81:39"><block_content pos:start="81:26" pos:end="81:39">             <expr_stmt pos:start="81:26" pos:end="81:39"><expr pos:start="81:26" pos:end="81:38"><name pos:start="81:26" pos:end="81:33">tmp_size</name>  <operator pos:start="81:36" pos:end="81:36">=</operator> <literal type="number" pos:start="81:38" pos:end="81:38">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="83:9" pos:end="85:39"><if pos:start="83:9" pos:end="83:47">if<condition pos:start="83:11" pos:end="83:24">(<expr pos:start="83:12" pos:end="83:23"><name pos:start="83:12" pos:end="83:21">tmp_fields</name><operator pos:start="83:22" pos:end="83:22">&gt;</operator><literal type="number" pos:start="83:23" pos:end="83:23">4</literal></expr>)</condition><block type="pseudo" pos:start="83:26" pos:end="83:47"><block_content pos:start="83:26" pos:end="83:47"> <expr_stmt pos:start="83:26" pos:end="83:47"><expr pos:start="83:26" pos:end="83:46"><name pos:start="83:26" pos:end="83:32">tmp_res</name>   <operator pos:start="83:36" pos:end="83:36">=</operator> <call pos:start="83:38" pos:end="83:46"><name pos:start="83:38" pos:end="83:42">get_v</name><argument_list pos:start="83:43" pos:end="83:46">(<argument pos:start="83:44" pos:end="83:45"><expr pos:start="83:44" pos:end="83:45"><name pos:start="83:44" pos:end="83:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="85:9" pos:end="85:39">else<block type="pseudo" pos:start="85:26" pos:end="85:39"><block_content pos:start="85:26" pos:end="85:39">             <expr_stmt pos:start="85:26" pos:end="85:39"><expr pos:start="85:26" pos:end="85:38"><name pos:start="85:26" pos:end="85:32">tmp_res</name>   <operator pos:start="85:36" pos:end="85:36">=</operator> <literal type="number" pos:start="85:38" pos:end="85:38">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="87:9" pos:end="89:56"><if pos:start="87:9" pos:end="87:47">if<condition pos:start="87:11" pos:end="87:24">(<expr pos:start="87:12" pos:end="87:23"><name pos:start="87:12" pos:end="87:21">tmp_fields</name><operator pos:start="87:22" pos:end="87:22">&gt;</operator><literal type="number" pos:start="87:23" pos:end="87:23">5</literal></expr>)</condition><block type="pseudo" pos:start="87:26" pos:end="87:47"><block_content pos:start="87:26" pos:end="87:47"> <expr_stmt pos:start="87:26" pos:end="87:47"><expr pos:start="87:26" pos:end="87:46"><name pos:start="87:26" pos:end="87:30">count</name>     <operator pos:start="87:36" pos:end="87:36">=</operator> <call pos:start="87:38" pos:end="87:46"><name pos:start="87:38" pos:end="87:42">get_v</name><argument_list pos:start="87:43" pos:end="87:46">(<argument pos:start="87:44" pos:end="87:45"><expr pos:start="87:44" pos:end="87:45"><name pos:start="87:44" pos:end="87:45">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="89:9" pos:end="89:56">else<block type="pseudo" pos:start="89:26" pos:end="89:56"><block_content pos:start="89:26" pos:end="89:56">             <expr_stmt pos:start="89:26" pos:end="89:56"><expr pos:start="89:26" pos:end="89:55"><name pos:start="89:26" pos:end="89:30">count</name>     <operator pos:start="89:36" pos:end="89:36">=</operator> <name pos:start="89:38" pos:end="89:44">tmp_mul</name> <operator pos:start="89:46" pos:end="89:46">-</operator> <name pos:start="89:48" pos:end="89:55">tmp_size</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <while pos:start="93:9" pos:end="95:21">while<condition pos:start="93:14" pos:end="93:31">(<expr pos:start="93:15" pos:end="93:30"><name pos:start="93:15" pos:end="93:24">tmp_fields</name><operator pos:start="93:25" pos:end="93:26">--</operator> <operator pos:start="93:28" pos:end="93:28">&gt;</operator> <literal type="number" pos:start="93:30" pos:end="93:30">6</literal></expr>)</condition><block type="pseudo" pos:start="95:12" pos:end="95:21"><block_content pos:start="95:12" pos:end="95:21">

           <expr_stmt pos:start="95:12" pos:end="95:21"><expr pos:start="95:12" pos:end="95:20"><call pos:start="95:12" pos:end="95:20"><name pos:start="95:12" pos:end="95:16">get_v</name><argument_list pos:start="95:17" pos:end="95:20">(<argument pos:start="95:18" pos:end="95:19"><expr pos:start="95:18" pos:end="95:19"><name pos:start="95:18" pos:end="95:19">bc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>



        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if<condition pos:start="99:11" pos:end="99:39">(<expr pos:start="99:12" pos:end="99:38"><name pos:start="99:12" pos:end="99:16">count</name> <operator pos:start="99:18" pos:end="99:19">==</operator> <literal type="number" pos:start="99:21" pos:end="99:21">0</literal> <operator pos:start="99:23" pos:end="99:24">||</operator> <name pos:start="99:26" pos:end="99:26">i</name><operator pos:start="99:27" pos:end="99:27">+</operator><name pos:start="99:28" pos:end="99:32">count</name> <operator pos:start="99:34" pos:end="99:34">&gt;</operator> <literal type="number" pos:start="99:36" pos:end="99:38">256</literal></expr>)</condition><block pos:start="99:40" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:22">

            <expr_stmt pos:start="101:13" pos:end="101:74"><expr pos:start="101:13" pos:end="101:73"><call pos:start="101:13" pos:end="101:73"><name pos:start="101:13" pos:end="101:18">av_log</name><argument_list pos:start="101:19" pos:end="101:73">(<argument pos:start="101:20" pos:end="101:20"><expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">s</name></expr></argument>, <argument pos:start="101:23" pos:end="101:34"><expr pos:start="101:23" pos:end="101:34"><name pos:start="101:23" pos:end="101:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:37" pos:end="101:62"><expr pos:start="101:37" pos:end="101:62"><literal type="string" pos:start="101:37" pos:end="101:62">"illegal count %d at %d\n"</literal></expr></argument>, <argument pos:start="101:65" pos:end="101:69"><expr pos:start="101:65" pos:end="101:69"><name pos:start="101:65" pos:end="101:69">count</name></expr></argument>, <argument pos:start="101:72" pos:end="101:72"><expr pos:start="101:72" pos:end="101:72"><name pos:start="101:72" pos:end="101:72">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:22">return <expr pos:start="103:20" pos:end="103:21"><operator pos:start="103:20" pos:end="103:20">-</operator><literal type="number" pos:start="103:21" pos:end="103:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if<condition pos:start="107:11" pos:end="107:38">(<expr pos:start="107:12" pos:end="107:37"><name pos:start="107:12" pos:end="107:21">tmp_stream</name> <operator pos:start="107:23" pos:end="107:24">&gt;=</operator> <name pos:start="107:26" pos:end="107:37">stream_count</name></expr>)</condition><block pos:start="107:39" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:22">

            <expr_stmt pos:start="109:13" pos:end="109:63"><expr pos:start="109:13" pos:end="109:62"><call pos:start="109:13" pos:end="109:62"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="109:62">(<argument pos:start="109:20" pos:end="109:20"><expr pos:start="109:20" pos:end="109:20"><name pos:start="109:20" pos:end="109:20">s</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:37" pos:end="109:61"><expr pos:start="109:37" pos:end="109:61"><literal type="string" pos:start="109:37" pos:end="109:61">"illegal stream number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:22">return <expr pos:start="111:20" pos:end="111:21"><operator pos:start="111:20" pos:end="111:20">-</operator><literal type="number" pos:start="111:21" pos:end="111:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <for pos:start="117:9" pos:end="141:9">for<control pos:start="117:12" pos:end="117:34">(<init pos:start="117:13" pos:end="117:16"><expr pos:start="117:13" pos:end="117:15"><name pos:start="117:13" pos:end="117:13">j</name><operator pos:start="117:14" pos:end="117:14">=</operator><literal type="number" pos:start="117:15" pos:end="117:15">0</literal></expr>;</init> <condition pos:start="117:18" pos:end="117:25"><expr pos:start="117:18" pos:end="117:24"><name pos:start="117:18" pos:end="117:18">j</name><operator pos:start="117:19" pos:end="117:19">&lt;</operator><name pos:start="117:20" pos:end="117:24">count</name></expr>;</condition> <incr pos:start="117:27" pos:end="117:33"><expr pos:start="117:27" pos:end="117:29"><name pos:start="117:27" pos:end="117:27">j</name><operator pos:start="117:28" pos:end="117:29">++</operator></expr><operator pos:start="117:30" pos:end="117:30">,</operator><expr pos:start="117:31" pos:end="117:33"><name pos:start="117:31" pos:end="117:31">i</name><operator pos:start="117:32" pos:end="117:33">++</operator></expr></incr>)</control><block pos:start="117:35" pos:end="141:9">{<block_content pos:start="119:13" pos:end="139:60">

            <if_stmt pos:start="119:13" pos:end="127:13"><if pos:start="119:13" pos:end="127:13">if <condition pos:start="119:16" pos:end="119:25">(<expr pos:start="119:17" pos:end="119:24"><name pos:start="119:17" pos:end="119:17">i</name> <operator pos:start="119:19" pos:end="119:20">==</operator> <literal type="char" pos:start="119:22" pos:end="119:24">'N'</literal></expr>)</condition> <block pos:start="119:27" pos:end="127:13">{<block_content pos:start="121:17" pos:end="125:25">

                <expr_stmt pos:start="121:17" pos:end="121:55"><expr pos:start="121:17" pos:end="121:54"><name pos:start="121:17" pos:end="121:34"><name pos:start="121:17" pos:end="121:19">nut</name><operator pos:start="121:20" pos:end="121:21">-&gt;</operator><name pos:start="121:22" pos:end="121:31">frame_code</name><index pos:start="121:32" pos:end="121:34">[<expr pos:start="121:33" pos:end="121:33"><name pos:start="121:33" pos:end="121:33">i</name></expr>]</index></name><operator pos:start="121:35" pos:end="121:35">.</operator><name pos:start="121:36" pos:end="121:40">flags</name><operator pos:start="121:41" pos:end="121:41">=</operator> <name pos:start="121:43" pos:end="121:54">FLAG_INVALID</name></expr>;</expr_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:20"><expr pos:start="123:17" pos:end="123:19"><name pos:start="123:17" pos:end="123:17">j</name><operator pos:start="123:18" pos:end="123:19">--</operator></expr>;</expr_stmt>

                <continue pos:start="125:17" pos:end="125:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:60"><expr pos:start="129:13" pos:end="129:58"><name pos:start="129:13" pos:end="129:30"><name pos:start="129:13" pos:end="129:15">nut</name><operator pos:start="129:16" pos:end="129:17">-&gt;</operator><name pos:start="129:18" pos:end="129:27">frame_code</name><index pos:start="129:28" pos:end="129:30">[<expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">i</name></expr>]</index></name><operator pos:start="129:31" pos:end="129:31">.</operator><name pos:start="129:32" pos:end="129:36">flags</name>           <operator pos:start="129:48" pos:end="129:48">=</operator> <name pos:start="129:50" pos:end="129:58">tmp_flags</name></expr> ;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:60"><expr pos:start="131:13" pos:end="131:56"><name pos:start="131:13" pos:end="131:30"><name pos:start="131:13" pos:end="131:15">nut</name><operator pos:start="131:16" pos:end="131:17">-&gt;</operator><name pos:start="131:18" pos:end="131:27">frame_code</name><index pos:start="131:28" pos:end="131:30">[<expr pos:start="131:29" pos:end="131:29"><name pos:start="131:29" pos:end="131:29">i</name></expr>]</index></name><operator pos:start="131:31" pos:end="131:31">.</operator><name pos:start="131:32" pos:end="131:40">pts_delta</name>       <operator pos:start="131:48" pos:end="131:48">=</operator> <name pos:start="131:50" pos:end="131:56">tmp_pts</name></expr>   ;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:60"><expr pos:start="133:13" pos:end="133:59"><name pos:start="133:13" pos:end="133:30"><name pos:start="133:13" pos:end="133:15">nut</name><operator pos:start="133:16" pos:end="133:17">-&gt;</operator><name pos:start="133:18" pos:end="133:27">frame_code</name><index pos:start="133:28" pos:end="133:30">[<expr pos:start="133:29" pos:end="133:29"><name pos:start="133:29" pos:end="133:29">i</name></expr>]</index></name><operator pos:start="133:31" pos:end="133:31">.</operator><name pos:start="133:32" pos:end="133:40">stream_id</name>       <operator pos:start="133:48" pos:end="133:48">=</operator> <name pos:start="133:50" pos:end="133:59">tmp_stream</name></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:60"><expr pos:start="135:13" pos:end="135:56"><name pos:start="135:13" pos:end="135:30"><name pos:start="135:13" pos:end="135:15">nut</name><operator pos:start="135:16" pos:end="135:17">-&gt;</operator><name pos:start="135:18" pos:end="135:27">frame_code</name><index pos:start="135:28" pos:end="135:30">[<expr pos:start="135:29" pos:end="135:29"><name pos:start="135:29" pos:end="135:29">i</name></expr>]</index></name><operator pos:start="135:31" pos:end="135:31">.</operator><name pos:start="135:32" pos:end="135:39">size_mul</name>        <operator pos:start="135:48" pos:end="135:48">=</operator> <name pos:start="135:50" pos:end="135:56">tmp_mul</name></expr>   ;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:60"><expr pos:start="137:13" pos:end="137:59"><name pos:start="137:13" pos:end="137:30"><name pos:start="137:13" pos:end="137:15">nut</name><operator pos:start="137:16" pos:end="137:17">-&gt;</operator><name pos:start="137:18" pos:end="137:27">frame_code</name><index pos:start="137:28" pos:end="137:30">[<expr pos:start="137:29" pos:end="137:29"><name pos:start="137:29" pos:end="137:29">i</name></expr>]</index></name><operator pos:start="137:31" pos:end="137:31">.</operator><name pos:start="137:32" pos:end="137:39">size_lsb</name>        <operator pos:start="137:48" pos:end="137:48">=</operator> <name pos:start="137:50" pos:end="137:57">tmp_size</name><operator pos:start="137:58" pos:end="137:58">+</operator><name pos:start="137:59" pos:end="137:59">j</name></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:60"><expr pos:start="139:13" pos:end="139:56"><name pos:start="139:13" pos:end="139:30"><name pos:start="139:13" pos:end="139:15">nut</name><operator pos:start="139:16" pos:end="139:17">-&gt;</operator><name pos:start="139:18" pos:end="139:27">frame_code</name><index pos:start="139:28" pos:end="139:30">[<expr pos:start="139:29" pos:end="139:29"><name pos:start="139:29" pos:end="139:29">i</name></expr>]</index></name><operator pos:start="139:31" pos:end="139:31">.</operator><name pos:start="139:32" pos:end="139:45">reserved_count</name>  <operator pos:start="139:48" pos:end="139:48">=</operator> <name pos:start="139:50" pos:end="139:56">tmp_res</name></expr>   ;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

    <expr_stmt pos:start="145:5" pos:end="145:55"><expr pos:start="145:5" pos:end="145:54"><call pos:start="145:5" pos:end="145:54"><name pos:start="145:5" pos:end="145:10">assert</name><argument_list pos:start="145:11" pos:end="145:54">(<argument pos:start="145:12" pos:end="145:53"><expr pos:start="145:12" pos:end="145:53"><name pos:start="145:12" pos:end="145:31"><name pos:start="145:12" pos:end="145:14">nut</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:26">frame_code</name><index pos:start="145:27" pos:end="145:31">[<expr pos:start="145:28" pos:end="145:30"><literal type="char" pos:start="145:28" pos:end="145:30">'N'</literal></expr>]</index></name><operator pos:start="145:32" pos:end="145:32">.</operator><name pos:start="145:33" pos:end="145:37">flags</name> <operator pos:start="145:39" pos:end="145:40">==</operator> <name pos:start="145:42" pos:end="145:53">FLAG_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="155:5"><if pos:start="149:5" pos:end="155:5">if<condition pos:start="149:7" pos:end="149:52">(<expr pos:start="149:8" pos:end="149:51"><call pos:start="149:8" pos:end="149:29"><name pos:start="149:8" pos:end="149:20">skip_reserved</name><argument_list pos:start="149:21" pos:end="149:29">(<argument pos:start="149:22" pos:end="149:23"><expr pos:start="149:22" pos:end="149:23"><name pos:start="149:22" pos:end="149:23">bc</name></expr></argument>, <argument pos:start="149:26" pos:end="149:28"><expr pos:start="149:26" pos:end="149:28"><name pos:start="149:26" pos:end="149:28">end</name></expr></argument>)</argument_list></call> <operator pos:start="149:31" pos:end="149:32">||</operator> <call pos:start="149:34" pos:end="149:51"><name pos:start="149:34" pos:end="149:47">check_checksum</name><argument_list pos:start="149:48" pos:end="149:51">(<argument pos:start="149:49" pos:end="149:50"><expr pos:start="149:49" pos:end="149:50"><name pos:start="149:49" pos:end="149:50">bc</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="149:53" pos:end="155:5">{<block_content pos:start="151:9" pos:end="153:18">

        <expr_stmt pos:start="151:9" pos:end="151:67"><expr pos:start="151:9" pos:end="151:66"><call pos:start="151:9" pos:end="151:66"><name pos:start="151:9" pos:end="151:14">av_log</name><argument_list pos:start="151:15" pos:end="151:66">(<argument pos:start="151:16" pos:end="151:16"><expr pos:start="151:16" pos:end="151:16"><name pos:start="151:16" pos:end="151:16">s</name></expr></argument>, <argument pos:start="151:19" pos:end="151:30"><expr pos:start="151:19" pos:end="151:30"><name pos:start="151:19" pos:end="151:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="151:33" pos:end="151:65"><expr pos:start="151:33" pos:end="151:65"><literal type="string" pos:start="151:33" pos:end="151:65">"Main header checksum mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="153:9" pos:end="153:18">return <expr pos:start="153:16" pos:end="153:17"><operator pos:start="153:16" pos:end="153:16">-</operator><literal type="number" pos:start="153:17" pos:end="153:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="159:5" pos:end="159:65"><expr pos:start="159:5" pos:end="159:64"><name pos:start="159:5" pos:end="159:15"><name pos:start="159:5" pos:end="159:7">nut</name><operator pos:start="159:8" pos:end="159:9">-&gt;</operator><name pos:start="159:10" pos:end="159:15">stream</name></name> <operator pos:start="159:17" pos:end="159:17">=</operator> <call pos:start="159:19" pos:end="159:64"><name pos:start="159:19" pos:end="159:28">av_mallocz</name><argument_list pos:start="159:29" pos:end="159:64">(<argument pos:start="159:30" pos:end="159:63"><expr pos:start="159:30" pos:end="159:63"><sizeof pos:start="159:30" pos:end="159:50">sizeof<argument_list pos:start="159:36" pos:end="159:50">(<argument pos:start="159:37" pos:end="159:49"><expr pos:start="159:37" pos:end="159:49"><name pos:start="159:37" pos:end="159:49">StreamContext</name></expr></argument>)</argument_list></sizeof><operator pos:start="159:51" pos:end="159:51">*</operator><name pos:start="159:52" pos:end="159:63">stream_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="161:5" pos:end="165:5">for<control pos:start="161:8" pos:end="161:33">(<init pos:start="161:9" pos:end="161:12"><expr pos:start="161:9" pos:end="161:11"><name pos:start="161:9" pos:end="161:9">i</name><operator pos:start="161:10" pos:end="161:10">=</operator><literal type="number" pos:start="161:11" pos:end="161:11">0</literal></expr>;</init> <condition pos:start="161:14" pos:end="161:28"><expr pos:start="161:14" pos:end="161:27"><name pos:start="161:14" pos:end="161:14">i</name><operator pos:start="161:15" pos:end="161:15">&lt;</operator><name pos:start="161:16" pos:end="161:27">stream_count</name></expr>;</condition> <incr pos:start="161:30" pos:end="161:32"><expr pos:start="161:30" pos:end="161:32"><name pos:start="161:30" pos:end="161:30">i</name><operator pos:start="161:31" pos:end="161:32">++</operator></expr></incr>)</control><block pos:start="161:34" pos:end="165:5">{<block_content pos:start="163:9" pos:end="163:28">

        <expr_stmt pos:start="163:9" pos:end="163:28"><expr pos:start="163:9" pos:end="163:27"><call pos:start="163:9" pos:end="163:27"><name pos:start="163:9" pos:end="163:21">av_new_stream</name><argument_list pos:start="163:22" pos:end="163:27">(<argument pos:start="163:23" pos:end="163:23"><expr pos:start="163:23" pos:end="163:23"><name pos:start="163:23" pos:end="163:23">s</name></expr></argument>, <argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><name pos:start="163:26" pos:end="163:26">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="169:5" pos:end="169:13">return <expr pos:start="169:12" pos:end="169:12"><literal type="number" pos:start="169:12" pos:end="169:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
