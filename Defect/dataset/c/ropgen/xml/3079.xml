<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3079.c" pos:tabs="8"><function pos:start="1:1" pos:end="555:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">bmp_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:61">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:46"><decl pos:start="5:29" pos:end="5:46"><type pos:start="5:29" pos:end="5:46"><specifier pos:start="5:29" pos:end="5:33">const</specifier> <name pos:start="5:35" pos:end="5:41">uint8_t</name> <modifier pos:start="5:43" pos:end="5:43">*</modifier></type><name pos:start="5:44" pos:end="5:46">buf</name></decl></parameter>, <parameter pos:start="5:49" pos:end="5:60"><decl pos:start="5:49" pos:end="5:60"><type pos:start="5:49" pos:end="5:60"><name pos:start="5:49" pos:end="5:51">int</name></type> <name pos:start="5:53" pos:end="5:60">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="555:1">{<block_content pos:start="9:5" pos:end="553:20">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">BMPContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:17">s</name> <init pos:start="9:19" pos:end="9:36">= <expr pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:36"><name pos:start="9:21" pos:end="9:25">avctx</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:13"><name pos:start="11:5" pos:end="11:11">AVFrame</name> <modifier pos:start="11:13" pos:end="11:13">*</modifier></type><name pos:start="11:14" pos:end="11:20">picture</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:29"><decl pos:start="13:5" pos:end="13:28"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">AVFrame</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:14">p</name> <init pos:start="13:16" pos:end="13:28">= <expr pos:start="13:18" pos:end="13:28"><operator pos:start="13:18" pos:end="13:18">&amp;</operator><name pos:start="13:19" pos:end="13:28"><name pos:start="13:19" pos:end="13:19">s</name><operator pos:start="13:20" pos:end="13:21">-&gt;</operator><name pos:start="13:22" pos:end="13:28">picture</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:22">fsize</name></decl>, <decl pos:start="15:25" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:25" pos:end="15:29">hsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">width</name></decl>, <decl pos:start="17:16" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:16" pos:end="17:21">height</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:23"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:22">depth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:17">BiCompression</name></type> <name pos:start="21:19" pos:end="21:22">comp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:16">int</name></type> <name pos:start="23:18" pos:end="23:23">ihsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>, <decl pos:start="25:12" pos:end="25:12"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:12" pos:end="25:12">j</name></decl>, <decl pos:start="25:15" pos:end="25:15"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:15" pos:end="25:15">n</name></decl>, <decl pos:start="25:18" pos:end="25:25"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:18" pos:end="25:25">linesize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:12"><name pos:start="27:5" pos:end="27:12">uint32_t</name></type> <name pos:start="27:14" pos:end="27:19"><name pos:start="27:14" pos:end="27:16">rgb</name><index pos:start="27:17" pos:end="27:19">[<expr pos:start="27:18" pos:end="27:18"><literal type="number" pos:start="27:18" pos:end="27:18">3</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:17"><decl pos:start="29:5" pos:end="29:16"><type pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">uint8_t</name> <modifier pos:start="29:13" pos:end="29:13">*</modifier></type><name pos:start="29:14" pos:end="29:16">ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:14"><decl pos:start="31:5" pos:end="31:13"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:13">dsize</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:30"><decl pos:start="33:5" pos:end="33:29"><type pos:start="33:5" pos:end="33:19"><specifier pos:start="33:5" pos:end="33:9">const</specifier> <name pos:start="33:11" pos:end="33:17">uint8_t</name> <modifier pos:start="33:19" pos:end="33:19">*</modifier></type><name pos:start="33:20" pos:end="33:23">buf0</name> <init pos:start="33:25" pos:end="33:29">= <expr pos:start="33:27" pos:end="33:29"><name pos:start="33:27" pos:end="33:29">buf</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if<condition pos:start="37:7" pos:end="37:21">(<expr pos:start="37:8" pos:end="37:20"><name pos:start="37:8" pos:end="37:15">buf_size</name> <operator pos:start="37:17" pos:end="37:17">&lt;</operator> <literal type="number" pos:start="37:19" pos:end="37:20">14</literal></expr>)</condition><block pos:start="37:22" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:18">

        <expr_stmt pos:start="39:9" pos:end="39:75"><expr pos:start="39:9" pos:end="39:74"><call pos:start="39:9" pos:end="39:74"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="39:74">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="39:37" pos:end="39:63"><expr pos:start="39:37" pos:end="39:63"><literal type="string" pos:start="39:37" pos:end="39:63">"buf size too small (%d)\n"</literal></expr></argument>, <argument pos:start="39:66" pos:end="39:73"><expr pos:start="39:66" pos:end="39:73"><name pos:start="39:66" pos:end="39:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:18">return <expr pos:start="41:16" pos:end="41:17"><operator pos:start="41:16" pos:end="41:16">-</operator><literal type="number" pos:start="41:17" pos:end="41:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if<condition pos:start="47:7" pos:end="49:40">(<expr pos:start="47:8" pos:end="49:39"><call pos:start="47:8" pos:end="47:32"><name pos:start="47:8" pos:end="47:26">bytestream_get_byte</name><argument_list pos:start="47:27" pos:end="47:32">(<argument pos:start="47:28" pos:end="47:31"><expr pos:start="47:28" pos:end="47:31"><operator pos:start="47:28" pos:end="47:28">&amp;</operator><name pos:start="47:29" pos:end="47:31">buf</name></expr></argument>)</argument_list></call> <operator pos:start="47:34" pos:end="47:35">!=</operator> <literal type="char" pos:start="47:37" pos:end="47:39">'B'</literal> <operator pos:start="47:41" pos:end="47:42">||</operator>

       <call pos:start="49:8" pos:end="49:32"><name pos:start="49:8" pos:end="49:26">bytestream_get_byte</name><argument_list pos:start="49:27" pos:end="49:32">(<argument pos:start="49:28" pos:end="49:31"><expr pos:start="49:28" pos:end="49:31"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:31">buf</name></expr></argument>)</argument_list></call> <operator pos:start="49:34" pos:end="49:35">!=</operator> <literal type="char" pos:start="49:37" pos:end="49:39">'M'</literal></expr>)</condition> <block pos:start="49:42" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <expr_stmt pos:start="51:9" pos:end="51:58"><expr pos:start="51:9" pos:end="51:57"><call pos:start="51:9" pos:end="51:57"><name pos:start="51:9" pos:end="51:14">av_log</name><argument_list pos:start="51:15" pos:end="51:57">(<argument pos:start="51:16" pos:end="51:20"><expr pos:start="51:16" pos:end="51:20"><name pos:start="51:16" pos:end="51:20">avctx</name></expr></argument>, <argument pos:start="51:23" pos:end="51:34"><expr pos:start="51:23" pos:end="51:34"><name pos:start="51:23" pos:end="51:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="51:37" pos:end="51:56"><expr pos:start="51:37" pos:end="51:56"><literal type="string" pos:start="51:37" pos:end="51:56">"bad magic number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:38"><expr pos:start="59:5" pos:end="59:37"><name pos:start="59:5" pos:end="59:9">fsize</name> <operator pos:start="59:11" pos:end="59:11">=</operator> <call pos:start="59:13" pos:end="59:37"><name pos:start="59:13" pos:end="59:31">bytestream_get_le32</name><argument_list pos:start="59:32" pos:end="59:37">(<argument pos:start="59:33" pos:end="59:36"><expr pos:start="59:33" pos:end="59:36"><operator pos:start="59:33" pos:end="59:33">&amp;</operator><name pos:start="59:34" pos:end="59:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="61:5" pos:end="69:5"><if pos:start="61:5" pos:end="69:5">if<condition pos:start="61:7" pos:end="61:24">(<expr pos:start="61:8" pos:end="61:23"><name pos:start="61:8" pos:end="61:15">buf_size</name> <operator pos:start="61:17" pos:end="61:17">&lt;</operator> <name pos:start="61:19" pos:end="61:23">fsize</name></expr>)</condition><block pos:start="61:25" pos:end="69:5">{<block_content pos:start="63:9" pos:end="67:18">

        <expr_stmt pos:start="63:9" pos:end="65:32"><expr pos:start="63:9" pos:end="65:31"><call pos:start="63:9" pos:end="65:31"><name pos:start="63:9" pos:end="63:14">av_log</name><argument_list pos:start="63:15" pos:end="65:31">(<argument pos:start="63:16" pos:end="63:20"><expr pos:start="63:16" pos:end="63:20"><name pos:start="63:16" pos:end="63:20">avctx</name></expr></argument>, <argument pos:start="63:23" pos:end="63:34"><expr pos:start="63:23" pos:end="63:34"><name pos:start="63:23" pos:end="63:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="63:37" pos:end="63:65"><expr pos:start="63:37" pos:end="63:65"><literal type="string" pos:start="63:37" pos:end="63:65">"not enough data (%d &lt; %d)\n"</literal></expr></argument>,

               <argument pos:start="65:16" pos:end="65:23"><expr pos:start="65:16" pos:end="65:23"><name pos:start="65:16" pos:end="65:23">buf_size</name></expr></argument>, <argument pos:start="65:26" pos:end="65:30"><expr pos:start="65:26" pos:end="65:30"><name pos:start="65:26" pos:end="65:30">fsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:18">return <expr pos:start="67:16" pos:end="67:17"><operator pos:start="67:16" pos:end="67:16">-</operator><literal type="number" pos:start="67:17" pos:end="67:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:13"><expr pos:start="73:5" pos:end="73:12"><name pos:start="73:5" pos:end="73:7">buf</name> <operator pos:start="73:9" pos:end="73:10">+=</operator> <literal type="number" pos:start="73:12" pos:end="73:12">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="73:15" pos:end="73:29">/* reserved1 */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:13"><expr pos:start="75:5" pos:end="75:12"><name pos:start="75:5" pos:end="75:7">buf</name> <operator pos:start="75:9" pos:end="75:10">+=</operator> <literal type="number" pos:start="75:12" pos:end="75:12">2</literal></expr>;</expr_stmt> <comment type="block" pos:start="75:15" pos:end="75:29">/* reserved2 */</comment>



    <expr_stmt pos:start="79:5" pos:end="79:38"><expr pos:start="79:5" pos:end="79:37"><name pos:start="79:5" pos:end="79:9">hsize</name> <operator pos:start="79:11" pos:end="79:11">=</operator> <call pos:start="79:13" pos:end="79:37"><name pos:start="79:13" pos:end="79:31">bytestream_get_le32</name><argument_list pos:start="79:32" pos:end="79:37">(<argument pos:start="79:33" pos:end="79:36"><expr pos:start="79:33" pos:end="79:36"><operator pos:start="79:33" pos:end="79:33">&amp;</operator><name pos:start="79:34" pos:end="79:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:40" pos:end="79:56">/* header size */</comment>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if<condition pos:start="81:7" pos:end="81:22">(<expr pos:start="81:8" pos:end="81:21"><name pos:start="81:8" pos:end="81:12">fsize</name> <operator pos:start="81:14" pos:end="81:15">&lt;=</operator> <name pos:start="81:17" pos:end="81:21">hsize</name></expr>)</condition><block pos:start="81:23" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:18">

        <expr_stmt pos:start="83:9" pos:end="85:29"><expr pos:start="83:9" pos:end="85:28"><call pos:start="83:9" pos:end="85:28"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="85:28">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:93"><expr pos:start="83:37" pos:end="83:93"><literal type="string" pos:start="83:37" pos:end="83:93">"declared file size is less than header size (%d &lt; %d)\n"</literal></expr></argument>,

               <argument pos:start="85:16" pos:end="85:20"><expr pos:start="85:16" pos:end="85:20"><name pos:start="85:16" pos:end="85:20">fsize</name></expr></argument>, <argument pos:start="85:23" pos:end="85:27"><expr pos:start="85:23" pos:end="85:27"><name pos:start="85:23" pos:end="85:27">hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:39"><expr pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:10">ihsize</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <call pos:start="93:14" pos:end="93:38"><name pos:start="93:14" pos:end="93:32">bytestream_get_le32</name><argument_list pos:start="93:33" pos:end="93:38">(<argument pos:start="93:34" pos:end="93:37"><expr pos:start="93:34" pos:end="93:37"><operator pos:start="93:34" pos:end="93:34">&amp;</operator><name pos:start="93:35" pos:end="93:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>       <comment type="block" pos:start="93:47" pos:end="93:68">/* more header size */</comment>

    <if_stmt pos:start="95:5" pos:end="101:5"><if pos:start="95:5" pos:end="101:5">if<condition pos:start="95:7" pos:end="95:27">(<expr pos:start="95:8" pos:end="95:26"><name pos:start="95:8" pos:end="95:13">ihsize</name> <operator pos:start="95:15" pos:end="95:15">+</operator> <literal type="number" pos:start="95:17" pos:end="95:18">14</literal> <operator pos:start="95:20" pos:end="95:20">&gt;</operator> <name pos:start="95:22" pos:end="95:26">hsize</name></expr>)</condition><block pos:start="95:28" pos:end="101:5">{<block_content pos:start="97:9" pos:end="99:18">

        <expr_stmt pos:start="97:9" pos:end="97:71"><expr pos:start="97:9" pos:end="97:70"><call pos:start="97:9" pos:end="97:70"><name pos:start="97:9" pos:end="97:14">av_log</name><argument_list pos:start="97:15" pos:end="97:70">(<argument pos:start="97:16" pos:end="97:20"><expr pos:start="97:16" pos:end="97:20"><name pos:start="97:16" pos:end="97:20">avctx</name></expr></argument>, <argument pos:start="97:23" pos:end="97:34"><expr pos:start="97:23" pos:end="97:34"><name pos:start="97:23" pos:end="97:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:37" pos:end="97:62"><expr pos:start="97:37" pos:end="97:62"><literal type="string" pos:start="97:37" pos:end="97:62">"invalid header size %d\n"</literal></expr></argument>, <argument pos:start="97:65" pos:end="97:69"><expr pos:start="97:65" pos:end="97:69"><name pos:start="97:65" pos:end="97:69">hsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:18">return <expr pos:start="99:16" pos:end="99:17"><operator pos:start="99:16" pos:end="99:16">-</operator><literal type="number" pos:start="99:17" pos:end="99:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="105:5" pos:end="135:5">switch<condition pos:start="105:11" pos:end="105:18">(<expr pos:start="105:12" pos:end="105:17"><name pos:start="105:12" pos:end="105:17">ihsize</name></expr>)</condition><block pos:start="105:19" pos:end="135:5">{<block_content pos:start="107:5" pos:end="133:18">

    <case pos:start="107:5" pos:end="107:13">case  <expr pos:start="107:11" pos:end="107:12"><literal type="number" pos:start="107:11" pos:end="107:12">40</literal></expr>:</case> <comment type="line" pos:start="107:15" pos:end="107:26">// windib v3</comment>

    <case pos:start="109:5" pos:end="109:13">case  <expr pos:start="109:11" pos:end="109:12"><literal type="number" pos:start="109:11" pos:end="109:12">64</literal></expr>:</case> <comment type="line" pos:start="109:15" pos:end="109:24">// OS/2 v2</comment>

    <case pos:start="111:5" pos:end="111:13">case <expr pos:start="111:10" pos:end="111:12"><literal type="number" pos:start="111:10" pos:end="111:12">108</literal></expr>:</case> <comment type="line" pos:start="111:15" pos:end="111:26">// windib v4</comment>

    <case pos:start="113:5" pos:end="113:13">case <expr pos:start="113:10" pos:end="113:12"><literal type="number" pos:start="113:10" pos:end="113:12">124</literal></expr>:</case> <comment type="line" pos:start="113:15" pos:end="113:26">// windib v5</comment>

        <expr_stmt pos:start="115:9" pos:end="115:42"><expr pos:start="115:9" pos:end="115:41"><name pos:start="115:9" pos:end="115:13">width</name> <operator pos:start="115:15" pos:end="115:15">=</operator> <call pos:start="115:17" pos:end="115:41"><name pos:start="115:17" pos:end="115:35">bytestream_get_le32</name><argument_list pos:start="115:36" pos:end="115:41">(<argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><operator pos:start="115:37" pos:end="115:37">&amp;</operator><name pos:start="115:38" pos:end="115:40">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:43"><expr pos:start="117:9" pos:end="117:42"><name pos:start="117:9" pos:end="117:14">height</name> <operator pos:start="117:16" pos:end="117:16">=</operator> <call pos:start="117:18" pos:end="117:42"><name pos:start="117:18" pos:end="117:36">bytestream_get_le32</name><argument_list pos:start="117:37" pos:end="117:42">(<argument pos:start="117:38" pos:end="117:41"><expr pos:start="117:38" pos:end="117:41"><operator pos:start="117:38" pos:end="117:38">&amp;</operator><name pos:start="117:39" pos:end="117:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="119:9" pos:end="119:14">break;</break>

    <case pos:start="121:5" pos:end="121:13">case  <expr pos:start="121:11" pos:end="121:12"><literal type="number" pos:start="121:11" pos:end="121:12">12</literal></expr>:</case> <comment type="line" pos:start="121:15" pos:end="121:24">// OS/2 v1</comment>

        <expr_stmt pos:start="123:9" pos:end="123:43"><expr pos:start="123:9" pos:end="123:42"><name pos:start="123:9" pos:end="123:13">width</name>  <operator pos:start="123:16" pos:end="123:16">=</operator> <call pos:start="123:18" pos:end="123:42"><name pos:start="123:18" pos:end="123:36">bytestream_get_le16</name><argument_list pos:start="123:37" pos:end="123:42">(<argument pos:start="123:38" pos:end="123:41"><expr pos:start="123:38" pos:end="123:41"><operator pos:start="123:38" pos:end="123:38">&amp;</operator><name pos:start="123:39" pos:end="123:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:43"><expr pos:start="125:9" pos:end="125:42"><name pos:start="125:9" pos:end="125:14">height</name> <operator pos:start="125:16" pos:end="125:16">=</operator> <call pos:start="125:18" pos:end="125:42"><name pos:start="125:18" pos:end="125:36">bytestream_get_le16</name><argument_list pos:start="125:37" pos:end="125:42">(<argument pos:start="125:38" pos:end="125:41"><expr pos:start="125:38" pos:end="125:41"><operator pos:start="125:38" pos:end="125:38">&amp;</operator><name pos:start="125:39" pos:end="125:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="127:9" pos:end="127:14">break;</break>

    <default pos:start="129:5" pos:end="129:12">default:</default>

        <expr_stmt pos:start="131:9" pos:end="131:77"><expr pos:start="131:9" pos:end="131:76"><call pos:start="131:9" pos:end="131:76"><name pos:start="131:9" pos:end="131:14">av_log</name><argument_list pos:start="131:15" pos:end="131:76">(<argument pos:start="131:16" pos:end="131:20"><expr pos:start="131:16" pos:end="131:20"><name pos:start="131:16" pos:end="131:20">avctx</name></expr></argument>, <argument pos:start="131:23" pos:end="131:34"><expr pos:start="131:23" pos:end="131:34"><name pos:start="131:23" pos:end="131:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="131:37" pos:end="131:75"><expr pos:start="131:37" pos:end="131:75"><literal type="string" pos:start="131:37" pos:end="131:75">"unsupported BMP file, patch welcome\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="133:9" pos:end="133:18">return <expr pos:start="133:16" pos:end="133:17"><operator pos:start="133:16" pos:end="133:16">-</operator><literal type="number" pos:start="133:17" pos:end="133:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if<condition pos:start="139:7" pos:end="139:38">(<expr pos:start="139:8" pos:end="139:37"><call pos:start="139:8" pos:end="139:32"><name pos:start="139:8" pos:end="139:26">bytestream_get_le16</name><argument_list pos:start="139:27" pos:end="139:32">(<argument pos:start="139:28" pos:end="139:31"><expr pos:start="139:28" pos:end="139:31"><operator pos:start="139:28" pos:end="139:28">&amp;</operator><name pos:start="139:29" pos:end="139:31">buf</name></expr></argument>)</argument_list></call> <operator pos:start="139:34" pos:end="139:35">!=</operator> <literal type="number" pos:start="139:37" pos:end="139:37">1</literal></expr>)</condition><block pos:start="139:39" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:18"> <comment type="block" pos:start="139:41" pos:end="139:52">/* planes */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:60"><expr pos:start="141:9" pos:end="141:59"><call pos:start="141:9" pos:end="141:59"><name pos:start="141:9" pos:end="141:14">av_log</name><argument_list pos:start="141:15" pos:end="141:59">(<argument pos:start="141:16" pos:end="141:20"><expr pos:start="141:16" pos:end="141:20"><name pos:start="141:16" pos:end="141:20">avctx</name></expr></argument>, <argument pos:start="141:23" pos:end="141:34"><expr pos:start="141:23" pos:end="141:34"><name pos:start="141:23" pos:end="141:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:37" pos:end="141:58"><expr pos:start="141:37" pos:end="141:58"><literal type="string" pos:start="141:37" pos:end="141:58">"invalid BMP header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:18">return <expr pos:start="143:16" pos:end="143:17"><operator pos:start="143:16" pos:end="143:16">-</operator><literal type="number" pos:start="143:17" pos:end="143:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:38"><expr pos:start="149:5" pos:end="149:37"><name pos:start="149:5" pos:end="149:9">depth</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <call pos:start="149:13" pos:end="149:37"><name pos:start="149:13" pos:end="149:31">bytestream_get_le16</name><argument_list pos:start="149:32" pos:end="149:37">(<argument pos:start="149:33" pos:end="149:36"><expr pos:start="149:33" pos:end="149:36"><operator pos:start="149:33" pos:end="149:33">&amp;</operator><name pos:start="149:34" pos:end="149:36">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="153:5" pos:end="159:23"><if pos:start="153:5" pos:end="155:41">if<condition pos:start="153:7" pos:end="153:20">(<expr pos:start="153:8" pos:end="153:19"><name pos:start="153:8" pos:end="153:13">ihsize</name> <operator pos:start="153:15" pos:end="153:16">==</operator> <literal type="number" pos:start="153:18" pos:end="153:19">40</literal></expr>)</condition><block type="pseudo" pos:start="155:9" pos:end="155:41"><block_content pos:start="155:9" pos:end="155:41">

        <expr_stmt pos:start="155:9" pos:end="155:41"><expr pos:start="155:9" pos:end="155:40"><name pos:start="155:9" pos:end="155:12">comp</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <call pos:start="155:16" pos:end="155:40"><name pos:start="155:16" pos:end="155:34">bytestream_get_le32</name><argument_list pos:start="155:35" pos:end="155:40">(<argument pos:start="155:36" pos:end="155:39"><expr pos:start="155:36" pos:end="155:39"><operator pos:start="155:36" pos:end="155:36">&amp;</operator><name pos:start="155:37" pos:end="155:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="157:5" pos:end="159:23">else<block type="pseudo" pos:start="159:9" pos:end="159:23"><block_content pos:start="159:9" pos:end="159:23">

        <expr_stmt pos:start="159:9" pos:end="159:23"><expr pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:12">comp</name> <operator pos:start="159:14" pos:end="159:14">=</operator> <name pos:start="159:16" pos:end="159:22">BMP_RGB</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="163:5" pos:end="169:5"><if pos:start="163:5" pos:end="169:5">if<condition pos:start="163:7" pos:end="163:88">(<expr pos:start="163:8" pos:end="163:87"><name pos:start="163:8" pos:end="163:11">comp</name> <operator pos:start="163:13" pos:end="163:14">!=</operator> <name pos:start="163:16" pos:end="163:22">BMP_RGB</name> <operator pos:start="163:24" pos:end="163:25">&amp;&amp;</operator> <name pos:start="163:27" pos:end="163:30">comp</name> <operator pos:start="163:32" pos:end="163:33">!=</operator> <name pos:start="163:35" pos:end="163:47">BMP_BITFIELDS</name> <operator pos:start="163:49" pos:end="163:50">&amp;&amp;</operator> <name pos:start="163:52" pos:end="163:55">comp</name> <operator pos:start="163:57" pos:end="163:58">!=</operator> <name pos:start="163:60" pos:end="163:67">BMP_RLE4</name> <operator pos:start="163:69" pos:end="163:70">&amp;&amp;</operator> <name pos:start="163:72" pos:end="163:75">comp</name> <operator pos:start="163:77" pos:end="163:78">!=</operator> <name pos:start="163:80" pos:end="163:87">BMP_RLE8</name></expr>)</condition><block pos:start="163:89" pos:end="169:5">{<block_content pos:start="165:9" pos:end="167:18">

        <expr_stmt pos:start="165:9" pos:end="165:75"><expr pos:start="165:9" pos:end="165:74"><call pos:start="165:9" pos:end="165:74"><name pos:start="165:9" pos:end="165:14">av_log</name><argument_list pos:start="165:15" pos:end="165:74">(<argument pos:start="165:16" pos:end="165:20"><expr pos:start="165:16" pos:end="165:20"><name pos:start="165:16" pos:end="165:20">avctx</name></expr></argument>, <argument pos:start="165:23" pos:end="165:34"><expr pos:start="165:23" pos:end="165:34"><name pos:start="165:23" pos:end="165:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="165:37" pos:end="165:67"><expr pos:start="165:37" pos:end="165:67"><literal type="string" pos:start="165:37" pos:end="165:67">"BMP coding %d not supported\n"</literal></expr></argument>, <argument pos:start="165:70" pos:end="165:73"><expr pos:start="165:70" pos:end="165:73"><name pos:start="165:70" pos:end="165:73">comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:18">return <expr pos:start="167:16" pos:end="167:17"><operator pos:start="167:16" pos:end="167:16">-</operator><literal type="number" pos:start="167:17" pos:end="167:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="173:5" pos:end="183:5"><if pos:start="173:5" pos:end="183:5">if<condition pos:start="173:7" pos:end="173:29">(<expr pos:start="173:8" pos:end="173:28"><name pos:start="173:8" pos:end="173:11">comp</name> <operator pos:start="173:13" pos:end="173:14">==</operator> <name pos:start="173:16" pos:end="173:28">BMP_BITFIELDS</name></expr>)</condition><block pos:start="173:30" pos:end="183:5">{<block_content pos:start="175:9" pos:end="181:43">

        <expr_stmt pos:start="175:9" pos:end="175:18"><expr pos:start="175:9" pos:end="175:17"><name pos:start="175:9" pos:end="175:11">buf</name> <operator pos:start="175:13" pos:end="175:14">+=</operator> <literal type="number" pos:start="175:16" pos:end="175:17">20</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:43"><expr pos:start="177:9" pos:end="177:42"><name pos:start="177:9" pos:end="177:14"><name pos:start="177:9" pos:end="177:11">rgb</name><index pos:start="177:12" pos:end="177:14">[<expr pos:start="177:13" pos:end="177:13"><literal type="number" pos:start="177:13" pos:end="177:13">0</literal></expr>]</index></name> <operator pos:start="177:16" pos:end="177:16">=</operator> <call pos:start="177:18" pos:end="177:42"><name pos:start="177:18" pos:end="177:36">bytestream_get_le32</name><argument_list pos:start="177:37" pos:end="177:42">(<argument pos:start="177:38" pos:end="177:41"><expr pos:start="177:38" pos:end="177:41"><operator pos:start="177:38" pos:end="177:38">&amp;</operator><name pos:start="177:39" pos:end="177:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:43"><expr pos:start="179:9" pos:end="179:42"><name pos:start="179:9" pos:end="179:14"><name pos:start="179:9" pos:end="179:11">rgb</name><index pos:start="179:12" pos:end="179:14">[<expr pos:start="179:13" pos:end="179:13"><literal type="number" pos:start="179:13" pos:end="179:13">1</literal></expr>]</index></name> <operator pos:start="179:16" pos:end="179:16">=</operator> <call pos:start="179:18" pos:end="179:42"><name pos:start="179:18" pos:end="179:36">bytestream_get_le32</name><argument_list pos:start="179:37" pos:end="179:42">(<argument pos:start="179:38" pos:end="179:41"><expr pos:start="179:38" pos:end="179:41"><operator pos:start="179:38" pos:end="179:38">&amp;</operator><name pos:start="179:39" pos:end="179:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:43"><expr pos:start="181:9" pos:end="181:42"><name pos:start="181:9" pos:end="181:14"><name pos:start="181:9" pos:end="181:11">rgb</name><index pos:start="181:12" pos:end="181:14">[<expr pos:start="181:13" pos:end="181:13"><literal type="number" pos:start="181:13" pos:end="181:13">2</literal></expr>]</index></name> <operator pos:start="181:16" pos:end="181:16">=</operator> <call pos:start="181:18" pos:end="181:42"><name pos:start="181:18" pos:end="181:36">bytestream_get_le32</name><argument_list pos:start="181:37" pos:end="181:42">(<argument pos:start="181:38" pos:end="181:41"><expr pos:start="181:38" pos:end="181:41"><operator pos:start="181:38" pos:end="181:38">&amp;</operator><name pos:start="181:39" pos:end="181:41">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:25"><expr pos:start="187:5" pos:end="187:24"><name pos:start="187:5" pos:end="187:16"><name pos:start="187:5" pos:end="187:9">avctx</name><operator pos:start="187:10" pos:end="187:11">-&gt;</operator><name pos:start="187:12" pos:end="187:16">width</name></name> <operator pos:start="187:18" pos:end="187:18">=</operator> <name pos:start="187:20" pos:end="187:24">width</name></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:48"><expr pos:start="189:5" pos:end="189:47"><name pos:start="189:5" pos:end="189:17"><name pos:start="189:5" pos:end="189:9">avctx</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:17">height</name></name> <operator pos:start="189:19" pos:end="189:19">=</operator> <ternary pos:start="189:21" pos:end="189:47"><condition pos:start="189:21" pos:end="189:31"><expr pos:start="189:21" pos:end="189:30"><name pos:start="189:21" pos:end="189:26">height</name> <operator pos:start="189:28" pos:end="189:28">&gt;</operator> <literal type="number" pos:start="189:30" pos:end="189:30">0</literal></expr>?</condition><then pos:start="189:33" pos:end="189:38"> <expr pos:start="189:33" pos:end="189:38"><name pos:start="189:33" pos:end="189:38">height</name></expr></then><else pos:start="189:39" pos:end="189:47">: <expr pos:start="189:41" pos:end="189:47"><operator pos:start="189:41" pos:end="189:41">-</operator><name pos:start="189:42" pos:end="189:47">height</name></expr></else></ternary></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:34"><expr pos:start="193:5" pos:end="193:33"><name pos:start="193:5" pos:end="193:18"><name pos:start="193:5" pos:end="193:9">avctx</name><operator pos:start="193:10" pos:end="193:11">-&gt;</operator><name pos:start="193:12" pos:end="193:18">pix_fmt</name></name> <operator pos:start="193:20" pos:end="193:20">=</operator> <name pos:start="193:22" pos:end="193:33">PIX_FMT_NONE</name></expr>;</expr_stmt>



    <switch pos:start="197:5" pos:end="293:5">switch<condition pos:start="197:11" pos:end="197:17">(<expr pos:start="197:12" pos:end="197:16"><name pos:start="197:12" pos:end="197:16">depth</name></expr>)</condition><block pos:start="197:18" pos:end="293:5">{<block_content pos:start="199:5" pos:end="291:18">

    <case pos:start="199:5" pos:end="199:12">case <expr pos:start="199:10" pos:end="199:11"><literal type="number" pos:start="199:10" pos:end="199:11">32</literal></expr>:</case>

        <if_stmt pos:start="201:9" pos:end="227:9"><if pos:start="201:9" pos:end="219:9">if<condition pos:start="201:11" pos:end="201:33">(<expr pos:start="201:12" pos:end="201:32"><name pos:start="201:12" pos:end="201:15">comp</name> <operator pos:start="201:17" pos:end="201:18">==</operator> <name pos:start="201:20" pos:end="201:32">BMP_BITFIELDS</name></expr>)</condition><block pos:start="201:34" pos:end="219:9">{<block_content pos:start="203:13" pos:end="217:13">

            <expr_stmt pos:start="203:13" pos:end="203:40"><expr pos:start="203:13" pos:end="203:39"><name pos:start="203:13" pos:end="203:18"><name pos:start="203:13" pos:end="203:15">rgb</name><index pos:start="203:16" pos:end="203:18">[<expr pos:start="203:17" pos:end="203:17"><literal type="number" pos:start="203:17" pos:end="203:17">0</literal></expr>]</index></name> <operator pos:start="203:20" pos:end="203:20">=</operator> <operator pos:start="203:22" pos:end="203:22">(</operator><name pos:start="203:23" pos:end="203:28"><name pos:start="203:23" pos:end="203:25">rgb</name><index pos:start="203:26" pos:end="203:28">[<expr pos:start="203:27" pos:end="203:27"><literal type="number" pos:start="203:27" pos:end="203:27">0</literal></expr>]</index></name> <operator pos:start="203:30" pos:end="203:31">&gt;&gt;</operator> <literal type="number" pos:start="203:33" pos:end="203:34">15</literal><operator pos:start="203:35" pos:end="203:35">)</operator> <operator pos:start="203:37" pos:end="203:37">&amp;</operator> <literal type="number" pos:start="203:39" pos:end="203:39">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:40"><expr pos:start="205:13" pos:end="205:39"><name pos:start="205:13" pos:end="205:18"><name pos:start="205:13" pos:end="205:15">rgb</name><index pos:start="205:16" pos:end="205:18">[<expr pos:start="205:17" pos:end="205:17"><literal type="number" pos:start="205:17" pos:end="205:17">1</literal></expr>]</index></name> <operator pos:start="205:20" pos:end="205:20">=</operator> <operator pos:start="205:22" pos:end="205:22">(</operator><name pos:start="205:23" pos:end="205:28"><name pos:start="205:23" pos:end="205:25">rgb</name><index pos:start="205:26" pos:end="205:28">[<expr pos:start="205:27" pos:end="205:27"><literal type="number" pos:start="205:27" pos:end="205:27">1</literal></expr>]</index></name> <operator pos:start="205:30" pos:end="205:31">&gt;&gt;</operator> <literal type="number" pos:start="205:33" pos:end="205:34">15</literal><operator pos:start="205:35" pos:end="205:35">)</operator> <operator pos:start="205:37" pos:end="205:37">&amp;</operator> <literal type="number" pos:start="205:39" pos:end="205:39">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:40"><expr pos:start="207:13" pos:end="207:39"><name pos:start="207:13" pos:end="207:18"><name pos:start="207:13" pos:end="207:15">rgb</name><index pos:start="207:16" pos:end="207:18">[<expr pos:start="207:17" pos:end="207:17"><literal type="number" pos:start="207:17" pos:end="207:17">2</literal></expr>]</index></name> <operator pos:start="207:20" pos:end="207:20">=</operator> <operator pos:start="207:22" pos:end="207:22">(</operator><name pos:start="207:23" pos:end="207:28"><name pos:start="207:23" pos:end="207:25">rgb</name><index pos:start="207:26" pos:end="207:28">[<expr pos:start="207:27" pos:end="207:27"><literal type="number" pos:start="207:27" pos:end="207:27">2</literal></expr>]</index></name> <operator pos:start="207:30" pos:end="207:31">&gt;&gt;</operator> <literal type="number" pos:start="207:33" pos:end="207:34">15</literal><operator pos:start="207:35" pos:end="207:35">)</operator> <operator pos:start="207:37" pos:end="207:37">&amp;</operator> <literal type="number" pos:start="207:39" pos:end="207:39">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="211:13" pos:end="217:13"><if pos:start="211:13" pos:end="217:13">if<condition pos:start="211:15" pos:end="213:72">(<expr pos:start="211:16" pos:end="213:71"><name pos:start="211:16" pos:end="211:21"><name pos:start="211:16" pos:end="211:18">rgb</name><index pos:start="211:19" pos:end="211:21">[<expr pos:start="211:20" pos:end="211:20"><literal type="number" pos:start="211:20" pos:end="211:20">0</literal></expr>]</index></name> <operator pos:start="211:23" pos:end="211:23">+</operator> <name pos:start="211:25" pos:end="211:30"><name pos:start="211:25" pos:end="211:27">rgb</name><index pos:start="211:28" pos:end="211:30">[<expr pos:start="211:29" pos:end="211:29"><literal type="number" pos:start="211:29" pos:end="211:29">1</literal></expr>]</index></name> <operator pos:start="211:32" pos:end="211:32">+</operator> <name pos:start="211:34" pos:end="211:39"><name pos:start="211:34" pos:end="211:36">rgb</name><index pos:start="211:37" pos:end="211:39">[<expr pos:start="211:38" pos:end="211:38"><literal type="number" pos:start="211:38" pos:end="211:38">2</literal></expr>]</index></name> <operator pos:start="211:41" pos:end="211:42">!=</operator> <literal type="number" pos:start="211:44" pos:end="211:44">3</literal> <operator pos:start="211:46" pos:end="211:47">||</operator>

               <name pos:start="213:16" pos:end="213:21"><name pos:start="213:16" pos:end="213:18">rgb</name><index pos:start="213:19" pos:end="213:21">[<expr pos:start="213:20" pos:end="213:20"><literal type="number" pos:start="213:20" pos:end="213:20">0</literal></expr>]</index></name> <operator pos:start="213:23" pos:end="213:24">==</operator> <name pos:start="213:26" pos:end="213:31"><name pos:start="213:26" pos:end="213:28">rgb</name><index pos:start="213:29" pos:end="213:31">[<expr pos:start="213:30" pos:end="213:30"><literal type="number" pos:start="213:30" pos:end="213:30">1</literal></expr>]</index></name> <operator pos:start="213:33" pos:end="213:34">||</operator> <name pos:start="213:36" pos:end="213:41"><name pos:start="213:36" pos:end="213:38">rgb</name><index pos:start="213:39" pos:end="213:41">[<expr pos:start="213:40" pos:end="213:40"><literal type="number" pos:start="213:40" pos:end="213:40">0</literal></expr>]</index></name> <operator pos:start="213:43" pos:end="213:44">==</operator> <name pos:start="213:46" pos:end="213:51"><name pos:start="213:46" pos:end="213:48">rgb</name><index pos:start="213:49" pos:end="213:51">[<expr pos:start="213:50" pos:end="213:50"><literal type="number" pos:start="213:50" pos:end="213:50">2</literal></expr>]</index></name> <operator pos:start="213:53" pos:end="213:54">||</operator> <name pos:start="213:56" pos:end="213:61"><name pos:start="213:56" pos:end="213:58">rgb</name><index pos:start="213:59" pos:end="213:61">[<expr pos:start="213:60" pos:end="213:60"><literal type="number" pos:start="213:60" pos:end="213:60">1</literal></expr>]</index></name> <operator pos:start="213:63" pos:end="213:64">==</operator> <name pos:start="213:66" pos:end="213:71"><name pos:start="213:66" pos:end="213:68">rgb</name><index pos:start="213:69" pos:end="213:71">[<expr pos:start="213:70" pos:end="213:70"><literal type="number" pos:start="213:70" pos:end="213:70">2</literal></expr>]</index></name></expr>)</condition><block pos:start="213:73" pos:end="217:13">{<block_content pos:start="215:17" pos:end="215:22">

                <break pos:start="215:17" pos:end="215:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="219:11" pos:end="227:9">else <block pos:start="219:16" pos:end="227:9">{<block_content pos:start="221:13" pos:end="225:23">

            <expr_stmt pos:start="221:13" pos:end="221:23"><expr pos:start="221:13" pos:end="221:22"><name pos:start="221:13" pos:end="221:18"><name pos:start="221:13" pos:end="221:15">rgb</name><index pos:start="221:16" pos:end="221:18">[<expr pos:start="221:17" pos:end="221:17"><literal type="number" pos:start="221:17" pos:end="221:17">0</literal></expr>]</index></name> <operator pos:start="221:20" pos:end="221:20">=</operator> <literal type="number" pos:start="221:22" pos:end="221:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="223:13" pos:end="223:23"><expr pos:start="223:13" pos:end="223:22"><name pos:start="223:13" pos:end="223:18"><name pos:start="223:13" pos:end="223:15">rgb</name><index pos:start="223:16" pos:end="223:18">[<expr pos:start="223:17" pos:end="223:17"><literal type="number" pos:start="223:17" pos:end="223:17">1</literal></expr>]</index></name> <operator pos:start="223:20" pos:end="223:20">=</operator> <literal type="number" pos:start="223:22" pos:end="223:22">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:23"><expr pos:start="225:13" pos:end="225:22"><name pos:start="225:13" pos:end="225:18"><name pos:start="225:13" pos:end="225:15">rgb</name><index pos:start="225:16" pos:end="225:18">[<expr pos:start="225:17" pos:end="225:17"><literal type="number" pos:start="225:17" pos:end="225:17">2</literal></expr>]</index></name> <operator pos:start="225:20" pos:end="225:20">=</operator> <literal type="number" pos:start="225:22" pos:end="225:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="231:9" pos:end="231:39"><expr pos:start="231:9" pos:end="231:38"><name pos:start="231:9" pos:end="231:22"><name pos:start="231:9" pos:end="231:13">avctx</name><operator pos:start="231:14" pos:end="231:15">-&gt;</operator><name pos:start="231:16" pos:end="231:22">pix_fmt</name></name> <operator pos:start="231:24" pos:end="231:24">=</operator> <name pos:start="231:26" pos:end="231:38">PIX_FMT_BGR24</name></expr>;</expr_stmt>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:12">case <expr pos:start="235:10" pos:end="235:11"><literal type="number" pos:start="235:10" pos:end="235:11">24</literal></expr>:</case>

        <expr_stmt pos:start="237:9" pos:end="237:39"><expr pos:start="237:9" pos:end="237:38"><name pos:start="237:9" pos:end="237:22"><name pos:start="237:9" pos:end="237:13">avctx</name><operator pos:start="237:14" pos:end="237:15">-&gt;</operator><name pos:start="237:16" pos:end="237:22">pix_fmt</name></name> <operator pos:start="237:24" pos:end="237:24">=</operator> <name pos:start="237:26" pos:end="237:38">PIX_FMT_BGR24</name></expr>;</expr_stmt>

        <break pos:start="239:9" pos:end="239:14">break;</break>

    <case pos:start="241:5" pos:end="241:12">case <expr pos:start="241:10" pos:end="241:11"><literal type="number" pos:start="241:10" pos:end="241:11">16</literal></expr>:</case>

        <if_stmt pos:start="243:9" pos:end="245:44"><if pos:start="243:9" pos:end="245:44">if<condition pos:start="243:11" pos:end="243:27">(<expr pos:start="243:12" pos:end="243:26"><name pos:start="243:12" pos:end="243:15">comp</name> <operator pos:start="243:17" pos:end="243:18">==</operator> <name pos:start="243:20" pos:end="243:26">BMP_RGB</name></expr>)</condition><block type="pseudo" pos:start="245:13" pos:end="245:44"><block_content pos:start="245:13" pos:end="245:44">

            <expr_stmt pos:start="245:13" pos:end="245:44"><expr pos:start="245:13" pos:end="245:43"><name pos:start="245:13" pos:end="245:26"><name pos:start="245:13" pos:end="245:17">avctx</name><operator pos:start="245:18" pos:end="245:19">-&gt;</operator><name pos:start="245:20" pos:end="245:26">pix_fmt</name></name> <operator pos:start="245:28" pos:end="245:28">=</operator> <name pos:start="245:30" pos:end="245:43">PIX_FMT_RGB555</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="249:80"><if pos:start="247:9" pos:end="249:80">if<condition pos:start="247:11" pos:end="247:33">(<expr pos:start="247:12" pos:end="247:32"><name pos:start="247:12" pos:end="247:15">comp</name> <operator pos:start="247:17" pos:end="247:18">==</operator> <name pos:start="247:20" pos:end="247:32">BMP_BITFIELDS</name></expr>)</condition><block type="pseudo" pos:start="249:13" pos:end="249:80"><block_content pos:start="249:13" pos:end="249:80">

            <expr_stmt pos:start="249:13" pos:end="249:80"><expr pos:start="249:13" pos:end="249:79"><name pos:start="249:13" pos:end="249:26"><name pos:start="249:13" pos:end="249:17">avctx</name><operator pos:start="249:18" pos:end="249:19">-&gt;</operator><name pos:start="249:20" pos:end="249:26">pix_fmt</name></name> <operator pos:start="249:28" pos:end="249:28">=</operator> <ternary pos:start="249:30" pos:end="249:79"><condition pos:start="249:30" pos:end="249:47"><expr pos:start="249:30" pos:end="249:45"><name pos:start="249:30" pos:end="249:35"><name pos:start="249:30" pos:end="249:32">rgb</name><index pos:start="249:33" pos:end="249:35">[<expr pos:start="249:34" pos:end="249:34"><literal type="number" pos:start="249:34" pos:end="249:34">1</literal></expr>]</index></name> <operator pos:start="249:37" pos:end="249:38">==</operator> <literal type="number" pos:start="249:40" pos:end="249:45">0x07E0</literal></expr> ?</condition><then pos:start="249:49" pos:end="249:62"> <expr pos:start="249:49" pos:end="249:62"><name pos:start="249:49" pos:end="249:62">PIX_FMT_RGB565</name></expr> </then><else pos:start="249:64" pos:end="249:79">: <expr pos:start="249:66" pos:end="249:79"><name pos:start="249:66" pos:end="249:79">PIX_FMT_RGB555</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <break pos:start="251:9" pos:end="251:14">break;</break>

    <case pos:start="253:5" pos:end="253:11">case <expr pos:start="253:10" pos:end="253:10"><literal type="number" pos:start="253:10" pos:end="253:10">8</literal></expr>:</case>

        <if_stmt pos:start="255:9" pos:end="261:43"><if pos:start="255:9" pos:end="257:42">if<condition pos:start="255:11" pos:end="255:35">(<expr pos:start="255:12" pos:end="255:34"><name pos:start="255:12" pos:end="255:16">hsize</name> <operator pos:start="255:18" pos:end="255:18">-</operator> <name pos:start="255:20" pos:end="255:25">ihsize</name> <operator pos:start="255:27" pos:end="255:27">-</operator> <literal type="number" pos:start="255:29" pos:end="255:30">14</literal> <operator pos:start="255:32" pos:end="255:32">&gt;</operator> <literal type="number" pos:start="255:34" pos:end="255:34">0</literal></expr>)</condition><block type="pseudo" pos:start="257:13" pos:end="257:42"><block_content pos:start="257:13" pos:end="257:42">

            <expr_stmt pos:start="257:13" pos:end="257:42"><expr pos:start="257:13" pos:end="257:41"><name pos:start="257:13" pos:end="257:26"><name pos:start="257:13" pos:end="257:17">avctx</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:26">pix_fmt</name></name> <operator pos:start="257:28" pos:end="257:28">=</operator> <name pos:start="257:30" pos:end="257:41">PIX_FMT_PAL8</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="259:9" pos:end="261:43">else<block type="pseudo" pos:start="261:13" pos:end="261:43"><block_content pos:start="261:13" pos:end="261:43">

            <expr_stmt pos:start="261:13" pos:end="261:43"><expr pos:start="261:13" pos:end="261:42"><name pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:17">avctx</name><operator pos:start="261:18" pos:end="261:19">-&gt;</operator><name pos:start="261:20" pos:end="261:26">pix_fmt</name></name> <operator pos:start="261:28" pos:end="261:28">=</operator> <name pos:start="261:30" pos:end="261:42">PIX_FMT_GRAY8</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="263:9" pos:end="263:14">break;</break>

    <case pos:start="265:5" pos:end="265:11">case <expr pos:start="265:10" pos:end="265:10"><literal type="number" pos:start="265:10" pos:end="265:10">4</literal></expr>:</case>

        <if_stmt pos:start="267:9" pos:end="277:9"><if pos:start="267:9" pos:end="271:9">if<condition pos:start="267:11" pos:end="267:35">(<expr pos:start="267:12" pos:end="267:34"><name pos:start="267:12" pos:end="267:16">hsize</name> <operator pos:start="267:18" pos:end="267:18">-</operator> <name pos:start="267:20" pos:end="267:25">ihsize</name> <operator pos:start="267:27" pos:end="267:27">-</operator> <literal type="number" pos:start="267:29" pos:end="267:30">14</literal> <operator pos:start="267:32" pos:end="267:32">&gt;</operator> <literal type="number" pos:start="267:34" pos:end="267:34">0</literal></expr>)</condition><block pos:start="267:36" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:42">

            <expr_stmt pos:start="269:13" pos:end="269:42"><expr pos:start="269:13" pos:end="269:41"><name pos:start="269:13" pos:end="269:26"><name pos:start="269:13" pos:end="269:17">avctx</name><operator pos:start="269:18" pos:end="269:19">-&gt;</operator><name pos:start="269:20" pos:end="269:26">pix_fmt</name></name> <operator pos:start="269:28" pos:end="269:28">=</operator> <name pos:start="269:30" pos:end="269:41">PIX_FMT_PAL8</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="271:10" pos:end="277:9">else<block pos:start="271:14" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:22">

            <expr_stmt pos:start="273:13" pos:end="273:79"><expr pos:start="273:13" pos:end="273:78"><call pos:start="273:13" pos:end="273:78"><name pos:start="273:13" pos:end="273:18">av_log</name><argument_list pos:start="273:19" pos:end="273:78">(<argument pos:start="273:20" pos:end="273:24"><expr pos:start="273:20" pos:end="273:24"><name pos:start="273:20" pos:end="273:24">avctx</name></expr></argument>, <argument pos:start="273:27" pos:end="273:38"><expr pos:start="273:27" pos:end="273:38"><name pos:start="273:27" pos:end="273:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="273:41" pos:end="273:77"><expr pos:start="273:41" pos:end="273:77"><literal type="string" pos:start="273:41" pos:end="273:77">"Unknown palette for 16-colour BMP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="275:13" pos:end="275:22">return <expr pos:start="275:20" pos:end="275:21"><operator pos:start="275:20" pos:end="275:20">-</operator><literal type="number" pos:start="275:21" pos:end="275:21">1</literal></expr>;</return>

        </block_content>}</block></else></if_stmt>

        <break pos:start="279:9" pos:end="279:14">break;</break>

    <case pos:start="281:5" pos:end="281:11">case <expr pos:start="281:10" pos:end="281:10"><literal type="number" pos:start="281:10" pos:end="281:10">1</literal></expr>:</case>

        <expr_stmt pos:start="283:9" pos:end="283:43"><expr pos:start="283:9" pos:end="283:42"><name pos:start="283:9" pos:end="283:22"><name pos:start="283:9" pos:end="283:13">avctx</name><operator pos:start="283:14" pos:end="283:15">-&gt;</operator><name pos:start="283:16" pos:end="283:22">pix_fmt</name></name> <operator pos:start="283:24" pos:end="283:24">=</operator> <name pos:start="283:26" pos:end="283:42">PIX_FMT_MONOBLACK</name></expr>;</expr_stmt>

        <break pos:start="285:9" pos:end="285:14">break;</break>

    <default pos:start="287:5" pos:end="287:12">default:</default>

        <expr_stmt pos:start="289:9" pos:end="289:71"><expr pos:start="289:9" pos:end="289:70"><call pos:start="289:9" pos:end="289:70"><name pos:start="289:9" pos:end="289:14">av_log</name><argument_list pos:start="289:15" pos:end="289:70">(<argument pos:start="289:16" pos:end="289:20"><expr pos:start="289:16" pos:end="289:20"><name pos:start="289:16" pos:end="289:20">avctx</name></expr></argument>, <argument pos:start="289:23" pos:end="289:34"><expr pos:start="289:23" pos:end="289:34"><name pos:start="289:23" pos:end="289:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="289:37" pos:end="289:62"><expr pos:start="289:37" pos:end="289:62"><literal type="string" pos:start="289:37" pos:end="289:62">"depth %d not supported\n"</literal></expr></argument>, <argument pos:start="289:65" pos:end="289:69"><expr pos:start="289:65" pos:end="289:69"><name pos:start="289:65" pos:end="289:69">depth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="291:9" pos:end="291:18">return <expr pos:start="291:16" pos:end="291:17"><operator pos:start="291:16" pos:end="291:16">-</operator><literal type="number" pos:start="291:17" pos:end="291:17">1</literal></expr>;</return>

    </block_content>}</block></switch>



    <if_stmt pos:start="297:5" pos:end="303:5"><if pos:start="297:5" pos:end="303:5">if<condition pos:start="297:7" pos:end="297:38">(<expr pos:start="297:8" pos:end="297:37"><name pos:start="297:8" pos:end="297:21"><name pos:start="297:8" pos:end="297:12">avctx</name><operator pos:start="297:13" pos:end="297:14">-&gt;</operator><name pos:start="297:15" pos:end="297:21">pix_fmt</name></name> <operator pos:start="297:23" pos:end="297:24">==</operator> <name pos:start="297:26" pos:end="297:37">PIX_FMT_NONE</name></expr>)</condition><block pos:start="297:39" pos:end="303:5">{<block_content pos:start="299:9" pos:end="301:18">

        <expr_stmt pos:start="299:9" pos:end="299:66"><expr pos:start="299:9" pos:end="299:65"><call pos:start="299:9" pos:end="299:65"><name pos:start="299:9" pos:end="299:14">av_log</name><argument_list pos:start="299:15" pos:end="299:65">(<argument pos:start="299:16" pos:end="299:20"><expr pos:start="299:16" pos:end="299:20"><name pos:start="299:16" pos:end="299:20">avctx</name></expr></argument>, <argument pos:start="299:23" pos:end="299:34"><expr pos:start="299:23" pos:end="299:34"><name pos:start="299:23" pos:end="299:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="299:37" pos:end="299:64"><expr pos:start="299:37" pos:end="299:64"><literal type="string" pos:start="299:37" pos:end="299:64">"unsupported pixel format\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="301:9" pos:end="301:18">return <expr pos:start="301:16" pos:end="301:17"><operator pos:start="301:16" pos:end="301:16">-</operator><literal type="number" pos:start="301:17" pos:end="301:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="307:5" pos:end="309:40"><if pos:start="307:5" pos:end="309:40">if<condition pos:start="307:7" pos:end="307:18">(<expr pos:start="307:8" pos:end="307:17"><name pos:start="307:8" pos:end="307:17"><name pos:start="307:8" pos:end="307:8">p</name><operator pos:start="307:9" pos:end="307:10">-&gt;</operator><name pos:start="307:11" pos:end="307:14">data</name><index pos:start="307:15" pos:end="307:17">[<expr pos:start="307:16" pos:end="307:16"><literal type="number" pos:start="307:16" pos:end="307:16">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="309:9" pos:end="309:40"><block_content pos:start="309:9" pos:end="309:40">

        <expr_stmt pos:start="309:9" pos:end="309:40"><expr pos:start="309:9" pos:end="309:39"><call pos:start="309:9" pos:end="309:39"><name pos:start="309:9" pos:end="309:29"><name pos:start="309:9" pos:end="309:13">avctx</name><operator pos:start="309:14" pos:end="309:15">-&gt;</operator><name pos:start="309:16" pos:end="309:29">release_buffer</name></name><argument_list pos:start="309:30" pos:end="309:39">(<argument pos:start="309:31" pos:end="309:35"><expr pos:start="309:31" pos:end="309:35"><name pos:start="309:31" pos:end="309:35">avctx</name></expr></argument>, <argument pos:start="309:38" pos:end="309:38"><expr pos:start="309:38" pos:end="309:38"><name pos:start="309:38" pos:end="309:38">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="313:5" pos:end="313:21"><expr pos:start="313:5" pos:end="313:20"><name pos:start="313:5" pos:end="313:16"><name pos:start="313:5" pos:end="313:5">p</name><operator pos:start="313:6" pos:end="313:7">-&gt;</operator><name pos:start="313:8" pos:end="313:16">reference</name></name> <operator pos:start="313:18" pos:end="313:18">=</operator> <literal type="number" pos:start="313:20" pos:end="313:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="315:5" pos:end="321:5"><if pos:start="315:5" pos:end="321:5">if<condition pos:start="315:7" pos:end="315:39">(<expr pos:start="315:8" pos:end="315:38"><call pos:start="315:8" pos:end="315:34"><name pos:start="315:8" pos:end="315:24"><name pos:start="315:8" pos:end="315:12">avctx</name><operator pos:start="315:13" pos:end="315:14">-&gt;</operator><name pos:start="315:15" pos:end="315:24">get_buffer</name></name><argument_list pos:start="315:25" pos:end="315:34">(<argument pos:start="315:26" pos:end="315:30"><expr pos:start="315:26" pos:end="315:30"><name pos:start="315:26" pos:end="315:30">avctx</name></expr></argument>, <argument pos:start="315:33" pos:end="315:33"><expr pos:start="315:33" pos:end="315:33"><name pos:start="315:33" pos:end="315:33">p</name></expr></argument>)</argument_list></call> <operator pos:start="315:36" pos:end="315:36">&lt;</operator> <literal type="number" pos:start="315:38" pos:end="315:38">0</literal></expr>)</condition><block pos:start="315:40" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:18">

        <expr_stmt pos:start="317:9" pos:end="317:61"><expr pos:start="317:9" pos:end="317:60"><call pos:start="317:9" pos:end="317:60"><name pos:start="317:9" pos:end="317:14">av_log</name><argument_list pos:start="317:15" pos:end="317:60">(<argument pos:start="317:16" pos:end="317:20"><expr pos:start="317:16" pos:end="317:20"><name pos:start="317:16" pos:end="317:20">avctx</name></expr></argument>, <argument pos:start="317:23" pos:end="317:34"><expr pos:start="317:23" pos:end="317:34"><name pos:start="317:23" pos:end="317:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="317:37" pos:end="317:59"><expr pos:start="317:37" pos:end="317:59"><literal type="string" pos:start="317:37" pos:end="317:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="319:9" pos:end="319:18">return <expr pos:start="319:16" pos:end="319:17"><operator pos:start="319:16" pos:end="319:16">-</operator><literal type="number" pos:start="319:17" pos:end="319:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:29"><expr pos:start="323:5" pos:end="323:28"><name pos:start="323:5" pos:end="323:16"><name pos:start="323:5" pos:end="323:5">p</name><operator pos:start="323:6" pos:end="323:7">-&gt;</operator><name pos:start="323:8" pos:end="323:16">pict_type</name></name> <operator pos:start="323:18" pos:end="323:18">=</operator> <name pos:start="323:20" pos:end="323:28">FF_I_TYPE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:21"><expr pos:start="325:5" pos:end="325:20"><name pos:start="325:5" pos:end="325:16"><name pos:start="325:5" pos:end="325:5">p</name><operator pos:start="325:6" pos:end="325:7">-&gt;</operator><name pos:start="325:8" pos:end="325:16">key_frame</name></name> <operator pos:start="325:18" pos:end="325:18">=</operator> <literal type="number" pos:start="325:20" pos:end="325:20">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="329:5" pos:end="329:23"><expr pos:start="329:5" pos:end="329:22"><name pos:start="329:5" pos:end="329:7">buf</name> <operator pos:start="329:9" pos:end="329:9">=</operator> <name pos:start="329:11" pos:end="329:14">buf0</name> <operator pos:start="329:16" pos:end="329:16">+</operator> <name pos:start="329:18" pos:end="329:22">hsize</name></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:29"><expr pos:start="331:5" pos:end="331:28"><name pos:start="331:5" pos:end="331:9">dsize</name> <operator pos:start="331:11" pos:end="331:11">=</operator> <name pos:start="331:13" pos:end="331:20">buf_size</name> <operator pos:start="331:22" pos:end="331:22">-</operator> <name pos:start="331:24" pos:end="331:28">hsize</name></expr>;</expr_stmt>



    <comment type="block" pos:start="335:5" pos:end="335:41">/* Line size in file multiple of 4 */</comment>

    <expr_stmt pos:start="337:5" pos:end="337:46"><expr pos:start="337:5" pos:end="337:45"><name pos:start="337:5" pos:end="337:5">n</name> <operator pos:start="337:7" pos:end="337:7">=</operator> <operator pos:start="337:9" pos:end="337:9">(</operator><operator pos:start="337:10" pos:end="337:10">(</operator><name pos:start="337:11" pos:end="337:22"><name pos:start="337:11" pos:end="337:15">avctx</name><operator pos:start="337:16" pos:end="337:17">-&gt;</operator><name pos:start="337:18" pos:end="337:22">width</name></name> <operator pos:start="337:24" pos:end="337:24">*</operator> <name pos:start="337:26" pos:end="337:30">depth</name><operator pos:start="337:31" pos:end="337:31">)</operator> <operator pos:start="337:33" pos:end="337:33">/</operator> <literal type="number" pos:start="337:35" pos:end="337:37">8</literal> <operator pos:start="337:37" pos:end="337:37">+</operator> <literal type="number" pos:start="337:39" pos:end="337:39">3</literal><operator pos:start="337:40" pos:end="337:40">)</operator> <operator pos:start="337:42" pos:end="337:42">&amp;</operator> <operator pos:start="337:44" pos:end="337:44">~</operator><literal type="number" pos:start="337:45" pos:end="337:45">3</literal></expr>;</expr_stmt>



    <if_stmt pos:start="341:5" pos:end="349:5"><if pos:start="341:5" pos:end="349:5">if<condition pos:start="341:7" pos:end="341:73">(<expr pos:start="341:8" pos:end="341:72"><name pos:start="341:8" pos:end="341:8">n</name> <operator pos:start="341:10" pos:end="341:10">*</operator> <name pos:start="341:12" pos:end="341:24"><name pos:start="341:12" pos:end="341:16">avctx</name><operator pos:start="341:17" pos:end="341:18">-&gt;</operator><name pos:start="341:19" pos:end="341:24">height</name></name> <operator pos:start="341:26" pos:end="341:26">&gt;</operator> <name pos:start="341:28" pos:end="341:32">dsize</name> <operator pos:start="341:34" pos:end="341:35">&amp;&amp;</operator> <name pos:start="341:37" pos:end="341:40">comp</name> <operator pos:start="341:42" pos:end="341:43">!=</operator> <name pos:start="341:45" pos:end="341:52">BMP_RLE4</name> <operator pos:start="341:54" pos:end="341:55">&amp;&amp;</operator> <name pos:start="341:57" pos:end="341:60">comp</name> <operator pos:start="341:62" pos:end="341:63">!=</operator> <name pos:start="341:65" pos:end="341:72">BMP_RLE8</name></expr>)</condition><block pos:start="341:74" pos:end="349:5">{<block_content pos:start="343:9" pos:end="347:18">

        <expr_stmt pos:start="343:9" pos:end="345:41"><expr pos:start="343:9" pos:end="345:40"><call pos:start="343:9" pos:end="345:40"><name pos:start="343:9" pos:end="343:14">av_log</name><argument_list pos:start="343:15" pos:end="345:40">(<argument pos:start="343:16" pos:end="343:20"><expr pos:start="343:16" pos:end="343:20"><name pos:start="343:16" pos:end="343:20">avctx</name></expr></argument>, <argument pos:start="343:23" pos:end="343:34"><expr pos:start="343:23" pos:end="343:34"><name pos:start="343:23" pos:end="343:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="343:37" pos:end="343:65"><expr pos:start="343:37" pos:end="343:65"><literal type="string" pos:start="343:37" pos:end="343:65">"not enough data (%d &lt; %d)\n"</literal></expr></argument>,

               <argument pos:start="345:16" pos:end="345:20"><expr pos:start="345:16" pos:end="345:20"><name pos:start="345:16" pos:end="345:20">dsize</name></expr></argument>, <argument pos:start="345:23" pos:end="345:39"><expr pos:start="345:23" pos:end="345:39"><name pos:start="345:23" pos:end="345:23">n</name> <operator pos:start="345:25" pos:end="345:25">*</operator> <name pos:start="345:27" pos:end="345:39"><name pos:start="345:27" pos:end="345:31">avctx</name><operator pos:start="345:32" pos:end="345:33">-&gt;</operator><name pos:start="345:34" pos:end="345:39">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="347:9" pos:end="347:18">return <expr pos:start="347:16" pos:end="347:17"><operator pos:start="347:16" pos:end="347:16">-</operator><literal type="number" pos:start="347:17" pos:end="347:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="353:5" pos:end="353:81">// RLE may skip decoding some picture areas, so blank picture before decoding</comment>

    <if_stmt pos:start="355:5" pos:end="357:62"><if pos:start="355:5" pos:end="357:62">if<condition pos:start="355:7" pos:end="355:44">(<expr pos:start="355:8" pos:end="355:43"><name pos:start="355:8" pos:end="355:11">comp</name> <operator pos:start="355:13" pos:end="355:14">==</operator> <name pos:start="355:16" pos:end="355:23">BMP_RLE4</name> <operator pos:start="355:25" pos:end="355:26">||</operator> <name pos:start="355:28" pos:end="355:31">comp</name> <operator pos:start="355:33" pos:end="355:34">==</operator> <name pos:start="355:36" pos:end="355:43">BMP_RLE8</name></expr>)</condition><block type="pseudo" pos:start="357:9" pos:end="357:62"><block_content pos:start="357:9" pos:end="357:62">

        <expr_stmt pos:start="357:9" pos:end="357:62"><expr pos:start="357:9" pos:end="357:61"><call pos:start="357:9" pos:end="357:61"><name pos:start="357:9" pos:end="357:14">memset</name><argument_list pos:start="357:15" pos:end="357:61">(<argument pos:start="357:16" pos:end="357:25"><expr pos:start="357:16" pos:end="357:25"><name pos:start="357:16" pos:end="357:25"><name pos:start="357:16" pos:end="357:16">p</name><operator pos:start="357:17" pos:end="357:18">-&gt;</operator><name pos:start="357:19" pos:end="357:22">data</name><index pos:start="357:23" pos:end="357:25">[<expr pos:start="357:24" pos:end="357:24"><literal type="number" pos:start="357:24" pos:end="357:24">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="357:28" pos:end="357:28"><expr pos:start="357:28" pos:end="357:28"><literal type="number" pos:start="357:28" pos:end="357:28">0</literal></expr></argument>, <argument pos:start="357:31" pos:end="357:60"><expr pos:start="357:31" pos:end="357:60"><name pos:start="357:31" pos:end="357:43"><name pos:start="357:31" pos:end="357:35">avctx</name><operator pos:start="357:36" pos:end="357:37">-&gt;</operator><name pos:start="357:38" pos:end="357:43">height</name></name> <operator pos:start="357:45" pos:end="357:45">*</operator> <name pos:start="357:47" pos:end="357:60"><name pos:start="357:47" pos:end="357:47">p</name><operator pos:start="357:48" pos:end="357:49">-&gt;</operator><name pos:start="357:50" pos:end="357:57">linesize</name><index pos:start="357:58" pos:end="357:60">[<expr pos:start="357:59" pos:end="357:59"><literal type="number" pos:start="357:59" pos:end="357:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="361:5" pos:end="363:36"><if pos:start="361:5" pos:end="363:36">if<condition pos:start="361:7" pos:end="361:32">(<expr pos:start="361:8" pos:end="361:31"><name pos:start="361:8" pos:end="361:12">depth</name> <operator pos:start="361:14" pos:end="361:15">==</operator> <literal type="number" pos:start="361:17" pos:end="361:17">4</literal> <operator pos:start="361:19" pos:end="361:20">||</operator> <name pos:start="361:22" pos:end="361:26">depth</name> <operator pos:start="361:28" pos:end="361:29">==</operator> <literal type="number" pos:start="361:31" pos:end="361:31">8</literal></expr>)</condition><block type="pseudo" pos:start="363:9" pos:end="363:36"><block_content pos:start="363:9" pos:end="363:36">

        <expr_stmt pos:start="363:9" pos:end="363:36"><expr pos:start="363:9" pos:end="363:35"><call pos:start="363:9" pos:end="363:35"><name pos:start="363:9" pos:end="363:14">memset</name><argument_list pos:start="363:15" pos:end="363:35">(<argument pos:start="363:16" pos:end="363:25"><expr pos:start="363:16" pos:end="363:25"><name pos:start="363:16" pos:end="363:25"><name pos:start="363:16" pos:end="363:16">p</name><operator pos:start="363:17" pos:end="363:18">-&gt;</operator><name pos:start="363:19" pos:end="363:22">data</name><index pos:start="363:23" pos:end="363:25">[<expr pos:start="363:24" pos:end="363:24"><literal type="number" pos:start="363:24" pos:end="363:24">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="363:28" pos:end="363:28"><expr pos:start="363:28" pos:end="363:28"><literal type="number" pos:start="363:28" pos:end="363:28">0</literal></expr></argument>, <argument pos:start="363:31" pos:end="363:34"><expr pos:start="363:31" pos:end="363:34"><literal type="number" pos:start="363:31" pos:end="363:34">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="367:5" pos:end="379:5"><if pos:start="367:5" pos:end="373:5">if<condition pos:start="367:7" pos:end="367:18">(<expr pos:start="367:8" pos:end="367:17"><name pos:start="367:8" pos:end="367:13">height</name> <operator pos:start="367:15" pos:end="367:15">&gt;</operator> <literal type="number" pos:start="367:17" pos:end="367:17">0</literal></expr>)</condition><block pos:start="367:19" pos:end="373:5">{<block_content pos:start="369:9" pos:end="371:35">

        <expr_stmt pos:start="369:9" pos:end="369:64"><expr pos:start="369:9" pos:end="369:63"><name pos:start="369:9" pos:end="369:11">ptr</name> <operator pos:start="369:13" pos:end="369:13">=</operator> <name pos:start="369:15" pos:end="369:24"><name pos:start="369:15" pos:end="369:15">p</name><operator pos:start="369:16" pos:end="369:17">-&gt;</operator><name pos:start="369:18" pos:end="369:21">data</name><index pos:start="369:22" pos:end="369:24">[<expr pos:start="369:23" pos:end="369:23"><literal type="number" pos:start="369:23" pos:end="369:23">0</literal></expr>]</index></name> <operator pos:start="369:26" pos:end="369:26">+</operator> <operator pos:start="369:28" pos:end="369:28">(</operator><name pos:start="369:29" pos:end="369:41"><name pos:start="369:29" pos:end="369:33">avctx</name><operator pos:start="369:34" pos:end="369:35">-&gt;</operator><name pos:start="369:36" pos:end="369:41">height</name></name> <operator pos:start="369:43" pos:end="369:43">-</operator> <literal type="number" pos:start="369:45" pos:end="369:45">1</literal><operator pos:start="369:46" pos:end="369:46">)</operator> <operator pos:start="369:48" pos:end="369:48">*</operator> <name pos:start="369:50" pos:end="369:63"><name pos:start="369:50" pos:end="369:50">p</name><operator pos:start="369:51" pos:end="369:52">-&gt;</operator><name pos:start="369:53" pos:end="369:60">linesize</name><index pos:start="369:61" pos:end="369:63">[<expr pos:start="369:62" pos:end="369:62"><literal type="number" pos:start="369:62" pos:end="369:62">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="371:35"><expr pos:start="371:9" pos:end="371:34"><name pos:start="371:9" pos:end="371:16">linesize</name> <operator pos:start="371:18" pos:end="371:18">=</operator> <operator pos:start="371:20" pos:end="371:20">-</operator><name pos:start="371:21" pos:end="371:34"><name pos:start="371:21" pos:end="371:21">p</name><operator pos:start="371:22" pos:end="371:23">-&gt;</operator><name pos:start="371:24" pos:end="371:31">linesize</name><index pos:start="371:32" pos:end="371:34">[<expr pos:start="371:33" pos:end="371:33"><literal type="number" pos:start="371:33" pos:end="371:33">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="373:7" pos:end="379:5">else <block pos:start="373:12" pos:end="379:5">{<block_content pos:start="375:9" pos:end="377:34">

        <expr_stmt pos:start="375:9" pos:end="375:25"><expr pos:start="375:9" pos:end="375:24"><name pos:start="375:9" pos:end="375:11">ptr</name> <operator pos:start="375:13" pos:end="375:13">=</operator> <name pos:start="375:15" pos:end="375:24"><name pos:start="375:15" pos:end="375:15">p</name><operator pos:start="375:16" pos:end="375:17">-&gt;</operator><name pos:start="375:18" pos:end="375:21">data</name><index pos:start="375:22" pos:end="375:24">[<expr pos:start="375:23" pos:end="375:23"><literal type="number" pos:start="375:23" pos:end="375:23">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:34"><expr pos:start="377:9" pos:end="377:33"><name pos:start="377:9" pos:end="377:16">linesize</name> <operator pos:start="377:18" pos:end="377:18">=</operator> <name pos:start="377:20" pos:end="377:33"><name pos:start="377:20" pos:end="377:20">p</name><operator pos:start="377:21" pos:end="377:22">-&gt;</operator><name pos:start="377:23" pos:end="377:30">linesize</name><index pos:start="377:31" pos:end="377:33">[<expr pos:start="377:32" pos:end="377:32"><literal type="number" pos:start="377:32" pos:end="377:32">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="383:5" pos:end="403:5"><if pos:start="383:5" pos:end="403:5">if<condition pos:start="383:7" pos:end="383:38">(<expr pos:start="383:8" pos:end="383:37"><name pos:start="383:8" pos:end="383:21"><name pos:start="383:8" pos:end="383:12">avctx</name><operator pos:start="383:13" pos:end="383:14">-&gt;</operator><name pos:start="383:15" pos:end="383:21">pix_fmt</name></name> <operator pos:start="383:23" pos:end="383:24">==</operator> <name pos:start="383:26" pos:end="383:37">PIX_FMT_PAL8</name></expr>)</condition><block pos:start="383:39" pos:end="403:5">{<block_content pos:start="385:9" pos:end="401:27">

        <expr_stmt pos:start="385:9" pos:end="385:33"><expr pos:start="385:9" pos:end="385:32"><name pos:start="385:9" pos:end="385:11">buf</name> <operator pos:start="385:13" pos:end="385:13">=</operator> <name pos:start="385:15" pos:end="385:18">buf0</name> <operator pos:start="385:20" pos:end="385:20">+</operator> <literal type="number" pos:start="385:22" pos:end="385:25">14</literal> <operator pos:start="385:25" pos:end="385:25">+</operator> <name pos:start="385:27" pos:end="385:32">ihsize</name></expr>;</expr_stmt> <comment type="line" pos:start="385:35" pos:end="385:52">//palette location</comment>

        <if_stmt pos:start="387:9" pos:end="399:9"><if pos:start="387:9" pos:end="393:9">if<condition pos:start="387:11" pos:end="387:40">(<expr pos:start="387:12" pos:end="387:39"><operator pos:start="387:12" pos:end="387:12">(</operator><name pos:start="387:13" pos:end="387:17">hsize</name><operator pos:start="387:18" pos:end="387:18">-</operator><name pos:start="387:19" pos:end="387:24">ihsize</name><operator pos:start="387:25" pos:end="387:25">-</operator><literal type="number" pos:start="387:26" pos:end="387:27">14</literal><operator pos:start="387:28" pos:end="387:28">)</operator><operator pos:start="387:29" pos:end="387:30">&gt;&gt;</operator><name pos:start="387:31" pos:end="387:35">depth</name> <operator pos:start="387:37" pos:end="387:37">&lt;</operator> <literal type="number" pos:start="387:39" pos:end="387:39">4</literal></expr>)</condition><block pos:start="387:41" pos:end="393:9">{<block_content pos:start="389:13" pos:end="391:71"> <comment type="line" pos:start="387:43" pos:end="387:83">// OS/2 bitmap, 3 bytes per palette entry</comment>

            <for pos:start="389:13" pos:end="391:71">for<control pos:start="389:16" pos:end="389:45">(<init pos:start="389:17" pos:end="389:22"><expr pos:start="389:17" pos:end="389:21"><name pos:start="389:17" pos:end="389:17">i</name> <operator pos:start="389:19" pos:end="389:19">=</operator> <literal type="number" pos:start="389:21" pos:end="389:21">0</literal></expr>;</init> <condition pos:start="389:24" pos:end="389:40"><expr pos:start="389:24" pos:end="389:39"><name pos:start="389:24" pos:end="389:24">i</name> <operator pos:start="389:26" pos:end="389:26">&lt;</operator> <operator pos:start="389:28" pos:end="389:28">(</operator><literal type="number" pos:start="389:29" pos:end="389:29">1</literal> <operator pos:start="389:31" pos:end="389:32">&lt;&lt;</operator> <name pos:start="389:34" pos:end="389:38">depth</name><operator pos:start="389:39" pos:end="389:39">)</operator></expr>;</condition> <incr pos:start="389:42" pos:end="389:44"><expr pos:start="389:42" pos:end="389:44"><name pos:start="389:42" pos:end="389:42">i</name><operator pos:start="389:43" pos:end="389:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="391:17" pos:end="391:71"><block_content pos:start="391:17" pos:end="391:71">

                <expr_stmt pos:start="391:17" pos:end="391:71"><expr pos:start="391:17" pos:end="391:70"><operator pos:start="391:17" pos:end="391:17">(</operator><operator pos:start="391:18" pos:end="391:18">(</operator><name pos:start="391:19" pos:end="391:26">uint32_t</name><operator pos:start="391:27" pos:end="391:27">*</operator><operator pos:start="391:28" pos:end="391:28">)</operator><name pos:start="391:29" pos:end="391:38"><name pos:start="391:29" pos:end="391:29">p</name><operator pos:start="391:30" pos:end="391:31">-&gt;</operator><name pos:start="391:32" pos:end="391:35">data</name><index pos:start="391:36" pos:end="391:38">[<expr pos:start="391:37" pos:end="391:37"><literal type="number" pos:start="391:37" pos:end="391:37">1</literal></expr>]</index></name><operator pos:start="391:39" pos:end="391:39">)</operator><index pos:start="391:40" pos:end="391:42">[<expr pos:start="391:41" pos:end="391:41"><name pos:start="391:41" pos:end="391:41">i</name></expr>]</index> <operator pos:start="391:44" pos:end="391:44">=</operator> <call pos:start="391:46" pos:end="391:70"><name pos:start="391:46" pos:end="391:64">bytestream_get_le24</name><argument_list pos:start="391:65" pos:end="391:70">(<argument pos:start="391:66" pos:end="391:69"><expr pos:start="391:66" pos:end="391:69"><operator pos:start="391:66" pos:end="391:66">&amp;</operator><name pos:start="391:67" pos:end="391:69">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></if><else pos:start="393:10" pos:end="399:9">else<block pos:start="393:14" pos:end="399:9">{<block_content pos:start="395:13" pos:end="397:71">

            <for pos:start="395:13" pos:end="397:71">for<control pos:start="395:16" pos:end="395:45">(<init pos:start="395:17" pos:end="395:22"><expr pos:start="395:17" pos:end="395:21"><name pos:start="395:17" pos:end="395:17">i</name> <operator pos:start="395:19" pos:end="395:19">=</operator> <literal type="number" pos:start="395:21" pos:end="395:21">0</literal></expr>;</init> <condition pos:start="395:24" pos:end="395:40"><expr pos:start="395:24" pos:end="395:39"><name pos:start="395:24" pos:end="395:24">i</name> <operator pos:start="395:26" pos:end="395:26">&lt;</operator> <operator pos:start="395:28" pos:end="395:28">(</operator><literal type="number" pos:start="395:29" pos:end="395:29">1</literal> <operator pos:start="395:31" pos:end="395:32">&lt;&lt;</operator> <name pos:start="395:34" pos:end="395:38">depth</name><operator pos:start="395:39" pos:end="395:39">)</operator></expr>;</condition> <incr pos:start="395:42" pos:end="395:44"><expr pos:start="395:42" pos:end="395:44"><name pos:start="395:42" pos:end="395:42">i</name><operator pos:start="395:43" pos:end="395:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="397:17" pos:end="397:71"><block_content pos:start="397:17" pos:end="397:71">

                <expr_stmt pos:start="397:17" pos:end="397:71"><expr pos:start="397:17" pos:end="397:70"><operator pos:start="397:17" pos:end="397:17">(</operator><operator pos:start="397:18" pos:end="397:18">(</operator><name pos:start="397:19" pos:end="397:26">uint32_t</name><operator pos:start="397:27" pos:end="397:27">*</operator><operator pos:start="397:28" pos:end="397:28">)</operator><name pos:start="397:29" pos:end="397:38"><name pos:start="397:29" pos:end="397:29">p</name><operator pos:start="397:30" pos:end="397:31">-&gt;</operator><name pos:start="397:32" pos:end="397:35">data</name><index pos:start="397:36" pos:end="397:38">[<expr pos:start="397:37" pos:end="397:37"><literal type="number" pos:start="397:37" pos:end="397:37">1</literal></expr>]</index></name><operator pos:start="397:39" pos:end="397:39">)</operator><index pos:start="397:40" pos:end="397:42">[<expr pos:start="397:41" pos:end="397:41"><name pos:start="397:41" pos:end="397:41">i</name></expr>]</index> <operator pos:start="397:44" pos:end="397:44">=</operator> <call pos:start="397:46" pos:end="397:70"><name pos:start="397:46" pos:end="397:64">bytestream_get_le32</name><argument_list pos:start="397:65" pos:end="397:70">(<argument pos:start="397:66" pos:end="397:69"><expr pos:start="397:66" pos:end="397:69"><operator pos:start="397:66" pos:end="397:66">&amp;</operator><name pos:start="397:67" pos:end="397:69">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="401:9" pos:end="401:27"><expr pos:start="401:9" pos:end="401:26"><name pos:start="401:9" pos:end="401:11">buf</name> <operator pos:start="401:13" pos:end="401:13">=</operator> <name pos:start="401:15" pos:end="401:18">buf0</name> <operator pos:start="401:20" pos:end="401:20">+</operator> <name pos:start="401:22" pos:end="401:26">hsize</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="405:5" pos:end="543:5"><if pos:start="405:5" pos:end="409:5">if<condition pos:start="405:7" pos:end="405:44">(<expr pos:start="405:8" pos:end="405:43"><name pos:start="405:8" pos:end="405:11">comp</name> <operator pos:start="405:13" pos:end="405:14">==</operator> <name pos:start="405:16" pos:end="405:23">BMP_RLE4</name> <operator pos:start="405:25" pos:end="405:26">||</operator> <name pos:start="405:28" pos:end="405:31">comp</name> <operator pos:start="405:33" pos:end="405:34">==</operator> <name pos:start="405:36" pos:end="405:43">BMP_RLE8</name></expr>)</condition><block pos:start="405:45" pos:end="409:5">{<block_content pos:start="407:9" pos:end="407:53">

        <expr_stmt pos:start="407:9" pos:end="407:53"><expr pos:start="407:9" pos:end="407:52"><call pos:start="407:9" pos:end="407:52"><name pos:start="407:9" pos:end="407:23">ff_msrle_decode</name><argument_list pos:start="407:24" pos:end="407:52">(<argument pos:start="407:25" pos:end="407:29"><expr pos:start="407:25" pos:end="407:29"><name pos:start="407:25" pos:end="407:29">avctx</name></expr></argument>, <argument pos:start="407:32" pos:end="407:32"><expr pos:start="407:32" pos:end="407:32"><name pos:start="407:32" pos:end="407:32">p</name></expr></argument>, <argument pos:start="407:35" pos:end="407:39"><expr pos:start="407:35" pos:end="407:39"><name pos:start="407:35" pos:end="407:39">depth</name></expr></argument>, <argument pos:start="407:42" pos:end="407:44"><expr pos:start="407:42" pos:end="407:44"><name pos:start="407:42" pos:end="407:44">buf</name></expr></argument>, <argument pos:start="407:47" pos:end="407:51"><expr pos:start="407:47" pos:end="407:51"><name pos:start="407:47" pos:end="407:51">dsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="409:6" pos:end="543:5">else<block pos:start="409:10" pos:end="543:5">{<block_content pos:start="411:9" pos:end="541:9">

        <switch pos:start="411:9" pos:end="541:9">switch<condition pos:start="411:15" pos:end="411:21">(<expr pos:start="411:16" pos:end="411:20"><name pos:start="411:16" pos:end="411:20">depth</name></expr>)</condition><block pos:start="411:22" pos:end="541:9">{<block_content pos:start="413:9" pos:end="539:22">

        <case pos:start="413:9" pos:end="413:15">case <expr pos:start="413:14" pos:end="413:14"><literal type="number" pos:start="413:14" pos:end="413:14">1</literal></expr>:</case>

            <for pos:start="415:13" pos:end="423:13">for<control pos:start="415:16" pos:end="415:46">(<init pos:start="415:17" pos:end="415:22"><expr pos:start="415:17" pos:end="415:21"><name pos:start="415:17" pos:end="415:17">i</name> <operator pos:start="415:19" pos:end="415:19">=</operator> <literal type="number" pos:start="415:21" pos:end="415:21">0</literal></expr>;</init> <condition pos:start="415:24" pos:end="415:41"><expr pos:start="415:24" pos:end="415:40"><name pos:start="415:24" pos:end="415:24">i</name> <operator pos:start="415:26" pos:end="415:26">&lt;</operator> <name pos:start="415:28" pos:end="415:40"><name pos:start="415:28" pos:end="415:32">avctx</name><operator pos:start="415:33" pos:end="415:34">-&gt;</operator><name pos:start="415:35" pos:end="415:40">height</name></name></expr>;</condition> <incr pos:start="415:43" pos:end="415:45"><expr pos:start="415:43" pos:end="415:45"><name pos:start="415:43" pos:end="415:43">i</name><operator pos:start="415:44" pos:end="415:45">++</operator></expr></incr>)</control><block pos:start="415:47" pos:end="423:13">{<block_content pos:start="417:17" pos:end="421:32">

                <expr_stmt pos:start="417:17" pos:end="417:36"><expr pos:start="417:17" pos:end="417:35"><call pos:start="417:17" pos:end="417:35"><name pos:start="417:17" pos:end="417:22">memcpy</name><argument_list pos:start="417:23" pos:end="417:35">(<argument pos:start="417:24" pos:end="417:26"><expr pos:start="417:24" pos:end="417:26"><name pos:start="417:24" pos:end="417:26">ptr</name></expr></argument>, <argument pos:start="417:29" pos:end="417:31"><expr pos:start="417:29" pos:end="417:31"><name pos:start="417:29" pos:end="417:31">buf</name></expr></argument>, <argument pos:start="417:34" pos:end="417:34"><expr pos:start="417:34" pos:end="417:34"><name pos:start="417:34" pos:end="417:34">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="419:17" pos:end="419:25"><expr pos:start="419:17" pos:end="419:24"><name pos:start="419:17" pos:end="419:19">buf</name> <operator pos:start="419:21" pos:end="419:22">+=</operator> <name pos:start="419:24" pos:end="419:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="421:32"><expr pos:start="421:17" pos:end="421:31"><name pos:start="421:17" pos:end="421:19">ptr</name> <operator pos:start="421:21" pos:end="421:22">+=</operator> <name pos:start="421:24" pos:end="421:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="425:13" pos:end="425:18">break;</break>

        <case pos:start="427:9" pos:end="427:15">case <expr pos:start="427:14" pos:end="427:14"><literal type="number" pos:start="427:14" pos:end="427:14">4</literal></expr>:</case>

            <for pos:start="429:13" pos:end="445:13">for<control pos:start="429:16" pos:end="429:46">(<init pos:start="429:17" pos:end="429:22"><expr pos:start="429:17" pos:end="429:21"><name pos:start="429:17" pos:end="429:17">i</name> <operator pos:start="429:19" pos:end="429:19">=</operator> <literal type="number" pos:start="429:21" pos:end="429:21">0</literal></expr>;</init> <condition pos:start="429:24" pos:end="429:41"><expr pos:start="429:24" pos:end="429:40"><name pos:start="429:24" pos:end="429:24">i</name> <operator pos:start="429:26" pos:end="429:26">&lt;</operator> <name pos:start="429:28" pos:end="429:40"><name pos:start="429:28" pos:end="429:32">avctx</name><operator pos:start="429:33" pos:end="429:34">-&gt;</operator><name pos:start="429:35" pos:end="429:40">height</name></name></expr>;</condition> <incr pos:start="429:43" pos:end="429:45"><expr pos:start="429:43" pos:end="429:45"><name pos:start="429:43" pos:end="429:43">i</name><operator pos:start="429:44" pos:end="429:45">++</operator></expr></incr>)</control><block pos:start="429:47" pos:end="445:13">{<block_content pos:start="431:17" pos:end="443:32">

                <decl_stmt pos:start="431:17" pos:end="431:22"><decl pos:start="431:17" pos:end="431:21"><type pos:start="431:17" pos:end="431:19"><name pos:start="431:17" pos:end="431:19">int</name></type> <name pos:start="431:21" pos:end="431:21">j</name></decl>;</decl_stmt>

                <for pos:start="433:17" pos:end="439:17">for<control pos:start="433:20" pos:end="433:38">(<init pos:start="433:21" pos:end="433:26"><expr pos:start="433:21" pos:end="433:25"><name pos:start="433:21" pos:end="433:21">j</name> <operator pos:start="433:23" pos:end="433:23">=</operator> <literal type="number" pos:start="433:25" pos:end="433:25">0</literal></expr>;</init> <condition pos:start="433:28" pos:end="433:33"><expr pos:start="433:28" pos:end="433:32"><name pos:start="433:28" pos:end="433:28">j</name> <operator pos:start="433:30" pos:end="433:30">&lt;</operator> <name pos:start="433:32" pos:end="433:32">n</name></expr>;</condition> <incr pos:start="433:35" pos:end="433:37"><expr pos:start="433:35" pos:end="433:37"><name pos:start="433:35" pos:end="433:35">j</name><operator pos:start="433:36" pos:end="433:37">++</operator></expr></incr>)</control><block pos:start="433:39" pos:end="439:17">{<block_content pos:start="435:21" pos:end="437:46">

                    <expr_stmt pos:start="435:21" pos:end="435:53"><expr pos:start="435:21" pos:end="435:52"><name pos:start="435:21" pos:end="435:30"><name pos:start="435:21" pos:end="435:23">ptr</name><index pos:start="435:24" pos:end="435:30">[<expr pos:start="435:25" pos:end="435:29"><name pos:start="435:25" pos:end="435:25">j</name><operator pos:start="435:26" pos:end="435:26">*</operator><literal type="number" pos:start="435:27" pos:end="435:27">2</literal><operator pos:start="435:28" pos:end="435:28">+</operator><literal type="number" pos:start="435:29" pos:end="435:29">0</literal></expr>]</index></name> <operator pos:start="435:32" pos:end="435:32">=</operator> <operator pos:start="435:34" pos:end="435:34">(</operator><name pos:start="435:35" pos:end="435:40"><name pos:start="435:35" pos:end="435:37">buf</name><index pos:start="435:38" pos:end="435:40">[<expr pos:start="435:39" pos:end="435:39"><name pos:start="435:39" pos:end="435:39">j</name></expr>]</index></name> <operator pos:start="435:42" pos:end="435:43">&gt;&gt;</operator> <literal type="number" pos:start="435:45" pos:end="435:45">4</literal><operator pos:start="435:46" pos:end="435:46">)</operator> <operator pos:start="435:48" pos:end="435:48">&amp;</operator> <literal type="number" pos:start="435:50" pos:end="435:52">0xF</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="437:21" pos:end="437:46"><expr pos:start="437:21" pos:end="437:45"><name pos:start="437:21" pos:end="437:30"><name pos:start="437:21" pos:end="437:23">ptr</name><index pos:start="437:24" pos:end="437:30">[<expr pos:start="437:25" pos:end="437:29"><name pos:start="437:25" pos:end="437:25">j</name><operator pos:start="437:26" pos:end="437:26">*</operator><literal type="number" pos:start="437:27" pos:end="437:27">2</literal><operator pos:start="437:28" pos:end="437:28">+</operator><literal type="number" pos:start="437:29" pos:end="437:29">1</literal></expr>]</index></name> <operator pos:start="437:32" pos:end="437:32">=</operator> <name pos:start="437:34" pos:end="437:39"><name pos:start="437:34" pos:end="437:36">buf</name><index pos:start="437:37" pos:end="437:39">[<expr pos:start="437:38" pos:end="437:38"><name pos:start="437:38" pos:end="437:38">j</name></expr>]</index></name> <operator pos:start="437:41" pos:end="437:41">&amp;</operator> <literal type="number" pos:start="437:43" pos:end="437:45">0xF</literal></expr>;</expr_stmt>

                </block_content>}</block></for>

                <expr_stmt pos:start="441:17" pos:end="441:25"><expr pos:start="441:17" pos:end="441:24"><name pos:start="441:17" pos:end="441:19">buf</name> <operator pos:start="441:21" pos:end="441:22">+=</operator> <name pos:start="441:24" pos:end="441:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="443:17" pos:end="443:32"><expr pos:start="443:17" pos:end="443:31"><name pos:start="443:17" pos:end="443:19">ptr</name> <operator pos:start="443:21" pos:end="443:22">+=</operator> <name pos:start="443:24" pos:end="443:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="447:13" pos:end="447:18">break;</break>

        <case pos:start="449:9" pos:end="449:15">case <expr pos:start="449:14" pos:end="449:14"><literal type="number" pos:start="449:14" pos:end="449:14">8</literal></expr>:</case>

            <for pos:start="451:13" pos:end="459:13">for<control pos:start="451:16" pos:end="451:46">(<init pos:start="451:17" pos:end="451:22"><expr pos:start="451:17" pos:end="451:21"><name pos:start="451:17" pos:end="451:17">i</name> <operator pos:start="451:19" pos:end="451:19">=</operator> <literal type="number" pos:start="451:21" pos:end="451:21">0</literal></expr>;</init> <condition pos:start="451:24" pos:end="451:41"><expr pos:start="451:24" pos:end="451:40"><name pos:start="451:24" pos:end="451:24">i</name> <operator pos:start="451:26" pos:end="451:26">&lt;</operator> <name pos:start="451:28" pos:end="451:40"><name pos:start="451:28" pos:end="451:32">avctx</name><operator pos:start="451:33" pos:end="451:34">-&gt;</operator><name pos:start="451:35" pos:end="451:40">height</name></name></expr>;</condition> <incr pos:start="451:43" pos:end="451:45"><expr pos:start="451:43" pos:end="451:45"><name pos:start="451:43" pos:end="451:43">i</name><operator pos:start="451:44" pos:end="451:45">++</operator></expr></incr>)</control><block pos:start="451:47" pos:end="459:13">{<block_content pos:start="453:17" pos:end="457:32">

                <expr_stmt pos:start="453:17" pos:end="453:47"><expr pos:start="453:17" pos:end="453:46"><call pos:start="453:17" pos:end="453:46"><name pos:start="453:17" pos:end="453:22">memcpy</name><argument_list pos:start="453:23" pos:end="453:46">(<argument pos:start="453:24" pos:end="453:26"><expr pos:start="453:24" pos:end="453:26"><name pos:start="453:24" pos:end="453:26">ptr</name></expr></argument>, <argument pos:start="453:29" pos:end="453:31"><expr pos:start="453:29" pos:end="453:31"><name pos:start="453:29" pos:end="453:31">buf</name></expr></argument>, <argument pos:start="453:34" pos:end="453:45"><expr pos:start="453:34" pos:end="453:45"><name pos:start="453:34" pos:end="453:45"><name pos:start="453:34" pos:end="453:38">avctx</name><operator pos:start="453:39" pos:end="453:40">-&gt;</operator><name pos:start="453:41" pos:end="453:45">width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="455:17" pos:end="455:25"><expr pos:start="455:17" pos:end="455:24"><name pos:start="455:17" pos:end="455:19">buf</name> <operator pos:start="455:21" pos:end="455:22">+=</operator> <name pos:start="455:24" pos:end="455:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:32"><expr pos:start="457:17" pos:end="457:31"><name pos:start="457:17" pos:end="457:19">ptr</name> <operator pos:start="457:21" pos:end="457:22">+=</operator> <name pos:start="457:24" pos:end="457:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="461:13" pos:end="461:18">break;</break>

        <case pos:start="463:9" pos:end="463:16">case <expr pos:start="463:14" pos:end="463:15"><literal type="number" pos:start="463:14" pos:end="463:15">24</literal></expr>:</case>

            <for pos:start="465:13" pos:end="473:13">for<control pos:start="465:16" pos:end="465:46">(<init pos:start="465:17" pos:end="465:22"><expr pos:start="465:17" pos:end="465:21"><name pos:start="465:17" pos:end="465:17">i</name> <operator pos:start="465:19" pos:end="465:19">=</operator> <literal type="number" pos:start="465:21" pos:end="465:21">0</literal></expr>;</init> <condition pos:start="465:24" pos:end="465:41"><expr pos:start="465:24" pos:end="465:40"><name pos:start="465:24" pos:end="465:24">i</name> <operator pos:start="465:26" pos:end="465:26">&lt;</operator> <name pos:start="465:28" pos:end="465:40"><name pos:start="465:28" pos:end="465:32">avctx</name><operator pos:start="465:33" pos:end="465:34">-&gt;</operator><name pos:start="465:35" pos:end="465:40">height</name></name></expr>;</condition> <incr pos:start="465:43" pos:end="465:45"><expr pos:start="465:43" pos:end="465:45"><name pos:start="465:43" pos:end="465:43">i</name><operator pos:start="465:44" pos:end="465:45">++</operator></expr></incr>)</control><block pos:start="465:47" pos:end="473:13">{<block_content pos:start="467:17" pos:end="471:32">

                <expr_stmt pos:start="467:17" pos:end="467:58"><expr pos:start="467:17" pos:end="467:57"><call pos:start="467:17" pos:end="467:57"><name pos:start="467:17" pos:end="467:22">memcpy</name><argument_list pos:start="467:23" pos:end="467:57">(<argument pos:start="467:24" pos:end="467:26"><expr pos:start="467:24" pos:end="467:26"><name pos:start="467:24" pos:end="467:26">ptr</name></expr></argument>, <argument pos:start="467:29" pos:end="467:31"><expr pos:start="467:29" pos:end="467:31"><name pos:start="467:29" pos:end="467:31">buf</name></expr></argument>, <argument pos:start="467:34" pos:end="467:56"><expr pos:start="467:34" pos:end="467:56"><name pos:start="467:34" pos:end="467:45"><name pos:start="467:34" pos:end="467:38">avctx</name><operator pos:start="467:39" pos:end="467:40">-&gt;</operator><name pos:start="467:41" pos:end="467:45">width</name></name><operator pos:start="467:46" pos:end="467:46">*</operator><operator pos:start="467:47" pos:end="467:47">(</operator><name pos:start="467:48" pos:end="467:52">depth</name><operator pos:start="467:53" pos:end="467:54">&gt;&gt;</operator><literal type="number" pos:start="467:55" pos:end="467:55">3</literal><operator pos:start="467:56" pos:end="467:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="469:17" pos:end="469:25"><expr pos:start="469:17" pos:end="469:24"><name pos:start="469:17" pos:end="469:19">buf</name> <operator pos:start="469:21" pos:end="469:22">+=</operator> <name pos:start="469:24" pos:end="469:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="471:17" pos:end="471:32"><expr pos:start="471:17" pos:end="471:31"><name pos:start="471:17" pos:end="471:19">ptr</name> <operator pos:start="471:21" pos:end="471:22">+=</operator> <name pos:start="471:24" pos:end="471:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="475:13" pos:end="475:18">break;</break>

        <case pos:start="477:9" pos:end="477:16">case <expr pos:start="477:14" pos:end="477:15"><literal type="number" pos:start="477:14" pos:end="477:15">16</literal></expr>:</case>

            <for pos:start="479:13" pos:end="497:13">for<control pos:start="479:16" pos:end="479:46">(<init pos:start="479:17" pos:end="479:22"><expr pos:start="479:17" pos:end="479:21"><name pos:start="479:17" pos:end="479:17">i</name> <operator pos:start="479:19" pos:end="479:19">=</operator> <literal type="number" pos:start="479:21" pos:end="479:21">0</literal></expr>;</init> <condition pos:start="479:24" pos:end="479:41"><expr pos:start="479:24" pos:end="479:40"><name pos:start="479:24" pos:end="479:24">i</name> <operator pos:start="479:26" pos:end="479:26">&lt;</operator> <name pos:start="479:28" pos:end="479:40"><name pos:start="479:28" pos:end="479:32">avctx</name><operator pos:start="479:33" pos:end="479:34">-&gt;</operator><name pos:start="479:35" pos:end="479:40">height</name></name></expr>;</condition> <incr pos:start="479:43" pos:end="479:45"><expr pos:start="479:43" pos:end="479:45"><name pos:start="479:43" pos:end="479:43">i</name><operator pos:start="479:44" pos:end="479:45">++</operator></expr></incr>)</control><block pos:start="479:47" pos:end="497:13">{<block_content pos:start="481:17" pos:end="495:32">

                <decl_stmt pos:start="481:17" pos:end="481:61"><decl pos:start="481:17" pos:end="481:60"><type pos:start="481:17" pos:end="481:32"><specifier pos:start="481:17" pos:end="481:21">const</specifier> <name pos:start="481:23" pos:end="481:30">uint16_t</name> <modifier pos:start="481:32" pos:end="481:32">*</modifier></type><name pos:start="481:33" pos:end="481:35">src</name> <init pos:start="481:37" pos:end="481:60">= <expr pos:start="481:39" pos:end="481:60"><operator pos:start="481:39" pos:end="481:39">(</operator><specifier pos:start="481:40" pos:end="481:44">const</specifier> <name pos:start="481:46" pos:end="481:53">uint16_t</name> <operator pos:start="481:55" pos:end="481:55">*</operator><operator pos:start="481:56" pos:end="481:56">)</operator> <name pos:start="481:58" pos:end="481:60">buf</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="483:17" pos:end="483:49"><decl pos:start="483:17" pos:end="483:48"><type pos:start="483:17" pos:end="483:26"><name pos:start="483:17" pos:end="483:24">uint16_t</name> <modifier pos:start="483:26" pos:end="483:26">*</modifier></type><name pos:start="483:27" pos:end="483:29">dst</name> <init pos:start="483:31" pos:end="483:48">= <expr pos:start="483:33" pos:end="483:48"><operator pos:start="483:33" pos:end="483:33">(</operator><name pos:start="483:34" pos:end="483:41">uint16_t</name> <operator pos:start="483:43" pos:end="483:43">*</operator><operator pos:start="483:44" pos:end="483:44">)</operator> <name pos:start="483:46" pos:end="483:48">ptr</name></expr></init></decl>;</decl_stmt>



                <for pos:start="487:17" pos:end="489:46">for<control pos:start="487:20" pos:end="487:49">(<init pos:start="487:21" pos:end="487:26"><expr pos:start="487:21" pos:end="487:25"><name pos:start="487:21" pos:end="487:21">j</name> <operator pos:start="487:23" pos:end="487:23">=</operator> <literal type="number" pos:start="487:25" pos:end="487:25">0</literal></expr>;</init> <condition pos:start="487:28" pos:end="487:44"><expr pos:start="487:28" pos:end="487:43"><name pos:start="487:28" pos:end="487:28">j</name> <operator pos:start="487:30" pos:end="487:30">&lt;</operator> <name pos:start="487:32" pos:end="487:43"><name pos:start="487:32" pos:end="487:36">avctx</name><operator pos:start="487:37" pos:end="487:38">-&gt;</operator><name pos:start="487:39" pos:end="487:43">width</name></name></expr>;</condition> <incr pos:start="487:46" pos:end="487:48"><expr pos:start="487:46" pos:end="487:48"><name pos:start="487:46" pos:end="487:46">j</name><operator pos:start="487:47" pos:end="487:48">++</operator></expr></incr>)</control><block type="pseudo" pos:start="489:21" pos:end="489:46"><block_content pos:start="489:21" pos:end="489:46">

                    <expr_stmt pos:start="489:21" pos:end="489:46"><expr pos:start="489:21" pos:end="489:45"><operator pos:start="489:21" pos:end="489:21">*</operator><name pos:start="489:22" pos:end="489:24">dst</name><operator pos:start="489:25" pos:end="489:26">++</operator> <operator pos:start="489:28" pos:end="489:28">=</operator> <call pos:start="489:30" pos:end="489:45"><name pos:start="489:30" pos:end="489:37">le2me_16</name><argument_list pos:start="489:38" pos:end="489:45">(<argument pos:start="489:39" pos:end="489:44"><expr pos:start="489:39" pos:end="489:44"><operator pos:start="489:39" pos:end="489:39">*</operator><name pos:start="489:40" pos:end="489:42">src</name><operator pos:start="489:43" pos:end="489:44">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



                <expr_stmt pos:start="493:17" pos:end="493:25"><expr pos:start="493:17" pos:end="493:24"><name pos:start="493:17" pos:end="493:19">buf</name> <operator pos:start="493:21" pos:end="493:22">+=</operator> <name pos:start="493:24" pos:end="493:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:32"><expr pos:start="495:17" pos:end="495:31"><name pos:start="495:17" pos:end="495:19">ptr</name> <operator pos:start="495:21" pos:end="495:22">+=</operator> <name pos:start="495:24" pos:end="495:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="499:13" pos:end="499:18">break;</break>

        <case pos:start="501:9" pos:end="501:16">case <expr pos:start="501:14" pos:end="501:15"><literal type="number" pos:start="501:14" pos:end="501:15">32</literal></expr>:</case>

            <for pos:start="503:13" pos:end="531:13">for<control pos:start="503:16" pos:end="503:46">(<init pos:start="503:17" pos:end="503:22"><expr pos:start="503:17" pos:end="503:21"><name pos:start="503:17" pos:end="503:17">i</name> <operator pos:start="503:19" pos:end="503:19">=</operator> <literal type="number" pos:start="503:21" pos:end="503:21">0</literal></expr>;</init> <condition pos:start="503:24" pos:end="503:41"><expr pos:start="503:24" pos:end="503:40"><name pos:start="503:24" pos:end="503:24">i</name> <operator pos:start="503:26" pos:end="503:26">&lt;</operator> <name pos:start="503:28" pos:end="503:40"><name pos:start="503:28" pos:end="503:32">avctx</name><operator pos:start="503:33" pos:end="503:34">-&gt;</operator><name pos:start="503:35" pos:end="503:40">height</name></name></expr>;</condition> <incr pos:start="503:43" pos:end="503:45"><expr pos:start="503:43" pos:end="503:45"><name pos:start="503:43" pos:end="503:43">i</name><operator pos:start="503:44" pos:end="503:45">++</operator></expr></incr>)</control><block pos:start="503:47" pos:end="531:13">{<block_content pos:start="505:17" pos:end="529:32">

                <decl_stmt pos:start="505:17" pos:end="505:41"><decl pos:start="505:17" pos:end="505:40"><type pos:start="505:17" pos:end="505:31"><specifier pos:start="505:17" pos:end="505:21">const</specifier> <name pos:start="505:23" pos:end="505:29">uint8_t</name> <modifier pos:start="505:31" pos:end="505:31">*</modifier></type><name pos:start="505:32" pos:end="505:34">src</name> <init pos:start="505:36" pos:end="505:40">= <expr pos:start="505:38" pos:end="505:40"><name pos:start="505:38" pos:end="505:40">buf</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="507:17" pos:end="507:35"><decl pos:start="507:17" pos:end="507:34"><type pos:start="507:17" pos:end="507:25"><name pos:start="507:17" pos:end="507:23">uint8_t</name> <modifier pos:start="507:25" pos:end="507:25">*</modifier></type><name pos:start="507:26" pos:end="507:28">dst</name> <init pos:start="507:30" pos:end="507:34">= <expr pos:start="507:32" pos:end="507:34"><name pos:start="507:32" pos:end="507:34">ptr</name></expr></init></decl>;</decl_stmt>



                <for pos:start="511:17" pos:end="523:17">for<control pos:start="511:20" pos:end="511:49">(<init pos:start="511:21" pos:end="511:26"><expr pos:start="511:21" pos:end="511:25"><name pos:start="511:21" pos:end="511:21">j</name> <operator pos:start="511:23" pos:end="511:23">=</operator> <literal type="number" pos:start="511:25" pos:end="511:25">0</literal></expr>;</init> <condition pos:start="511:28" pos:end="511:44"><expr pos:start="511:28" pos:end="511:43"><name pos:start="511:28" pos:end="511:28">j</name> <operator pos:start="511:30" pos:end="511:30">&lt;</operator> <name pos:start="511:32" pos:end="511:43"><name pos:start="511:32" pos:end="511:36">avctx</name><operator pos:start="511:37" pos:end="511:38">-&gt;</operator><name pos:start="511:39" pos:end="511:43">width</name></name></expr>;</condition> <incr pos:start="511:46" pos:end="511:48"><expr pos:start="511:46" pos:end="511:48"><name pos:start="511:46" pos:end="511:46">j</name><operator pos:start="511:47" pos:end="511:48">++</operator></expr></incr>)</control><block pos:start="511:50" pos:end="523:17">{<block_content pos:start="513:21" pos:end="521:29">

                    <expr_stmt pos:start="513:21" pos:end="513:41"><expr pos:start="513:21" pos:end="513:40"><name pos:start="513:21" pos:end="513:26"><name pos:start="513:21" pos:end="513:23">dst</name><index pos:start="513:24" pos:end="513:26">[<expr pos:start="513:25" pos:end="513:25"><literal type="number" pos:start="513:25" pos:end="513:25">0</literal></expr>]</index></name> <operator pos:start="513:28" pos:end="513:28">=</operator> <name pos:start="513:30" pos:end="513:40"><name pos:start="513:30" pos:end="513:32">src</name><index pos:start="513:33" pos:end="513:40">[<expr pos:start="513:34" pos:end="513:39"><name pos:start="513:34" pos:end="513:39"><name pos:start="513:34" pos:end="513:36">rgb</name><index pos:start="513:37" pos:end="513:39">[<expr pos:start="513:38" pos:end="513:38"><literal type="number" pos:start="513:38" pos:end="513:38">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="515:21" pos:end="515:41"><expr pos:start="515:21" pos:end="515:40"><name pos:start="515:21" pos:end="515:26"><name pos:start="515:21" pos:end="515:23">dst</name><index pos:start="515:24" pos:end="515:26">[<expr pos:start="515:25" pos:end="515:25"><literal type="number" pos:start="515:25" pos:end="515:25">1</literal></expr>]</index></name> <operator pos:start="515:28" pos:end="515:28">=</operator> <name pos:start="515:30" pos:end="515:40"><name pos:start="515:30" pos:end="515:32">src</name><index pos:start="515:33" pos:end="515:40">[<expr pos:start="515:34" pos:end="515:39"><name pos:start="515:34" pos:end="515:39"><name pos:start="515:34" pos:end="515:36">rgb</name><index pos:start="515:37" pos:end="515:39">[<expr pos:start="515:38" pos:end="515:38"><literal type="number" pos:start="515:38" pos:end="515:38">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="517:21" pos:end="517:41"><expr pos:start="517:21" pos:end="517:40"><name pos:start="517:21" pos:end="517:26"><name pos:start="517:21" pos:end="517:23">dst</name><index pos:start="517:24" pos:end="517:26">[<expr pos:start="517:25" pos:end="517:25"><literal type="number" pos:start="517:25" pos:end="517:25">2</literal></expr>]</index></name> <operator pos:start="517:28" pos:end="517:28">=</operator> <name pos:start="517:30" pos:end="517:40"><name pos:start="517:30" pos:end="517:32">src</name><index pos:start="517:33" pos:end="517:40">[<expr pos:start="517:34" pos:end="517:39"><name pos:start="517:34" pos:end="517:39"><name pos:start="517:34" pos:end="517:36">rgb</name><index pos:start="517:37" pos:end="517:39">[<expr pos:start="517:38" pos:end="517:38"><literal type="number" pos:start="517:38" pos:end="517:38">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="519:21" pos:end="519:29"><expr pos:start="519:21" pos:end="519:28"><name pos:start="519:21" pos:end="519:23">dst</name> <operator pos:start="519:25" pos:end="519:26">+=</operator> <literal type="number" pos:start="519:28" pos:end="519:28">3</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="521:21" pos:end="521:29"><expr pos:start="521:21" pos:end="521:28"><name pos:start="521:21" pos:end="521:23">src</name> <operator pos:start="521:25" pos:end="521:26">+=</operator> <literal type="number" pos:start="521:28" pos:end="521:28">4</literal></expr>;</expr_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="527:17" pos:end="527:25"><expr pos:start="527:17" pos:end="527:24"><name pos:start="527:17" pos:end="527:19">buf</name> <operator pos:start="527:21" pos:end="527:22">+=</operator> <name pos:start="527:24" pos:end="527:24">n</name></expr>;</expr_stmt>

                <expr_stmt pos:start="529:17" pos:end="529:32"><expr pos:start="529:17" pos:end="529:31"><name pos:start="529:17" pos:end="529:19">ptr</name> <operator pos:start="529:21" pos:end="529:22">+=</operator> <name pos:start="529:24" pos:end="529:31">linesize</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="533:13" pos:end="533:18">break;</break>

        <default pos:start="535:9" pos:end="535:16">default:</default>

            <expr_stmt pos:start="537:13" pos:end="537:67"><expr pos:start="537:13" pos:end="537:66"><call pos:start="537:13" pos:end="537:66"><name pos:start="537:13" pos:end="537:18">av_log</name><argument_list pos:start="537:19" pos:end="537:66">(<argument pos:start="537:20" pos:end="537:24"><expr pos:start="537:20" pos:end="537:24"><name pos:start="537:20" pos:end="537:24">avctx</name></expr></argument>, <argument pos:start="537:27" pos:end="537:38"><expr pos:start="537:27" pos:end="537:38"><name pos:start="537:27" pos:end="537:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="537:41" pos:end="537:65"><expr pos:start="537:41" pos:end="537:65"><literal type="string" pos:start="537:41" pos:end="537:65">"BMP decoder is broken\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="539:13" pos:end="539:22">return <expr pos:start="539:20" pos:end="539:21"><operator pos:start="539:20" pos:end="539:20">-</operator><literal type="number" pos:start="539:21" pos:end="539:21">1</literal></expr>;</return>

        </block_content>}</block></switch>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="547:5" pos:end="547:26"><expr pos:start="547:5" pos:end="547:25"><operator pos:start="547:5" pos:end="547:5">*</operator><name pos:start="547:6" pos:end="547:12">picture</name> <operator pos:start="547:14" pos:end="547:14">=</operator> <name pos:start="547:16" pos:end="547:25"><name pos:start="547:16" pos:end="547:16">s</name><operator pos:start="547:17" pos:end="547:18">-&gt;</operator><name pos:start="547:19" pos:end="547:25">picture</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="549:5" pos:end="549:35"><expr pos:start="549:5" pos:end="549:34"><operator pos:start="549:5" pos:end="549:5">*</operator><name pos:start="549:6" pos:end="549:14">data_size</name> <operator pos:start="549:16" pos:end="549:16">=</operator> <sizeof pos:start="549:18" pos:end="549:34">sizeof<argument_list pos:start="549:24" pos:end="549:34">(<argument pos:start="549:25" pos:end="549:33"><expr pos:start="549:25" pos:end="549:33"><name pos:start="549:25" pos:end="549:33">AVPicture</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>



    <return pos:start="553:5" pos:end="553:20">return <expr pos:start="553:12" pos:end="553:19"><name pos:start="553:12" pos:end="553:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
