<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17359.c" pos:tabs="8"><function pos:start="1:1" pos:end="363:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">dmg_open</name><parameter_list pos:start="1:20" pos:end="3:33">(<parameter pos:start="1:21" pos:end="1:40"><decl pos:start="1:21" pos:end="1:40"><type pos:start="1:21" pos:end="1:40"><name pos:start="1:21" pos:end="1:36">BlockDriverState</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:40">bs</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:56"><decl pos:start="1:43" pos:end="1:56"><type pos:start="1:43" pos:end="1:56"><name pos:start="1:43" pos:end="1:47">QDict</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:56">options</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:61">int</name></type> <name pos:start="1:63" pos:end="1:67">flags</name></decl></parameter>,

                    <parameter pos:start="3:21" pos:end="3:32"><decl pos:start="3:21" pos:end="3:32"><type pos:start="3:21" pos:end="3:32"><name pos:start="3:21" pos:end="3:25">Error</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier><modifier pos:start="3:28" pos:end="3:28">*</modifier></type><name pos:start="3:29" pos:end="3:32">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="363:1">{<block_content pos:start="7:5" pos:end="361:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVDMGState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint64_t</name></type> <name pos:start="9:14" pos:end="9:23">info_begin</name></decl>, <decl pos:start="9:26" pos:end="9:33"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:26" pos:end="9:33">info_end</name></decl>, <decl pos:start="9:36" pos:end="9:49"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:36" pos:end="9:49">last_in_offset</name></decl>, <decl pos:start="9:52" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:52" pos:end="9:66">last_out_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">count</name></decl>, <decl pos:start="11:21" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:21" pos:end="11:23">tmp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:67"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:32">max_compressed_size</name> <init pos:start="13:34" pos:end="13:36">= <expr pos:start="13:36" pos:end="13:36"><literal type="number" pos:start="13:36" pos:end="13:36">1</literal></expr></init></decl>, <decl pos:start="13:39" pos:end="13:63"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:39" pos:end="13:59">max_sectors_per_chunk</name> <init pos:start="13:61" pos:end="13:63">= <expr pos:start="13:63" pos:end="13:63"><literal type="number" pos:start="13:63" pos:end="13:63">1</literal></expr></init></decl>, <decl pos:start="13:66" pos:end="13:66"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:66" pos:end="13:66">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:18">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:6">bs</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:17">read_only</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:20"><expr pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:15">n_chunks</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <literal type="number" pos:start="23:19" pos:end="23:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:66"><expr pos:start="25:5" pos:end="25:65"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:14">offsets</name></name> <operator pos:start="25:16" pos:end="25:16">=</operator> <name pos:start="25:18" pos:end="25:27"><name pos:start="25:18" pos:end="25:18">s</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:27">lengths</name></name> <operator pos:start="25:29" pos:end="25:29">=</operator> <name pos:start="25:31" pos:end="25:40"><name pos:start="25:31" pos:end="25:31">s</name><operator pos:start="25:32" pos:end="25:33">-&gt;</operator><name pos:start="25:34" pos:end="25:40">sectors</name></name> <operator pos:start="25:42" pos:end="25:42">=</operator> <name pos:start="25:44" pos:end="25:58"><name pos:start="25:44" pos:end="25:44">s</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:58">sectorcounts</name></name> <operator pos:start="25:60" pos:end="25:60">=</operator> <name pos:start="25:62" pos:end="25:65">NULL</name></expr>;</expr_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:36">/* read offset of info blocks */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:38"><expr pos:start="31:5" pos:end="31:37"><name pos:start="31:5" pos:end="31:10">offset</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <call pos:start="31:14" pos:end="31:37"><name pos:start="31:14" pos:end="31:27">bdrv_getlength</name><argument_list pos:start="31:28" pos:end="31:37">(<argument pos:start="31:29" pos:end="31:36"><expr pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:30">bs</name><operator pos:start="31:31" pos:end="31:32">-&gt;</operator><name pos:start="31:33" pos:end="31:36">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><name pos:start="33:9" pos:end="33:14">offset</name> <operator pos:start="33:16" pos:end="33:16">&lt;</operator> <literal type="number" pos:start="33:18" pos:end="33:18">0</literal></expr>)</condition> <block pos:start="33:21" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:18">

        <expr_stmt pos:start="35:9" pos:end="35:21"><expr pos:start="35:9" pos:end="35:20"><name pos:start="35:9" pos:end="35:11">ret</name> <operator pos:start="35:13" pos:end="35:13">=</operator> <name pos:start="35:15" pos:end="35:20">offset</name></expr>;</expr_stmt>

        <goto pos:start="37:9" pos:end="37:18">goto <name pos:start="37:14" pos:end="37:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:20"><expr pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:10">offset</name> <operator pos:start="41:12" pos:end="41:13">-=</operator> <literal type="number" pos:start="41:15" pos:end="41:19">0x1d8</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:7">ret</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:46"><name pos:start="45:11" pos:end="45:21">read_uint64</name><argument_list pos:start="45:22" pos:end="45:46">(<argument pos:start="45:23" pos:end="45:24"><expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">bs</name></expr></argument>, <argument pos:start="45:27" pos:end="45:32"><expr pos:start="45:27" pos:end="45:32"><name pos:start="45:27" pos:end="45:32">offset</name></expr></argument>, <argument pos:start="45:35" pos:end="45:45"><expr pos:start="45:35" pos:end="45:45"><operator pos:start="45:35" pos:end="45:35">&amp;</operator><name pos:start="45:36" pos:end="45:45">info_begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="57:5"><if pos:start="47:5" pos:end="51:5">if <condition pos:start="47:8" pos:end="47:16">(<expr pos:start="47:9" pos:end="47:15"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">&lt;</operator> <literal type="number" pos:start="47:15" pos:end="47:15">0</literal></expr>)</condition> <block pos:start="47:18" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:18">

        <goto pos:start="49:9" pos:end="49:18">goto <name pos:start="49:14" pos:end="49:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="51:7" pos:end="57:5">else if <condition pos:start="51:15" pos:end="51:31">(<expr pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:25">info_begin</name> <operator pos:start="51:27" pos:end="51:28">==</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>)</condition> <block pos:start="51:33" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:18">

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <operator pos:start="53:15" pos:end="53:15">-</operator><name pos:start="53:16" pos:end="53:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="55:9" pos:end="55:18">goto <name pos:start="55:14" pos:end="55:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:44"><expr pos:start="61:5" pos:end="61:43"><name pos:start="61:5" pos:end="61:7">ret</name> <operator pos:start="61:9" pos:end="61:9">=</operator> <call pos:start="61:11" pos:end="61:43"><name pos:start="61:11" pos:end="61:21">read_uint32</name><argument_list pos:start="61:22" pos:end="61:43">(<argument pos:start="61:23" pos:end="61:24"><expr pos:start="61:23" pos:end="61:24"><name pos:start="61:23" pos:end="61:24">bs</name></expr></argument>, <argument pos:start="61:27" pos:end="61:36"><expr pos:start="61:27" pos:end="61:36"><name pos:start="61:27" pos:end="61:36">info_begin</name></expr></argument>, <argument pos:start="61:39" pos:end="61:42"><expr pos:start="61:39" pos:end="61:42"><operator pos:start="61:39" pos:end="61:39">&amp;</operator><name pos:start="61:40" pos:end="61:42">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:13">&lt;</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:18">

        <goto pos:start="65:9" pos:end="65:18">goto <name pos:start="65:14" pos:end="65:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="67:7" pos:end="73:5">else if <condition pos:start="67:15" pos:end="67:28">(<expr pos:start="67:16" pos:end="67:27"><name pos:start="67:16" pos:end="67:18">tmp</name> <operator pos:start="67:20" pos:end="67:21">!=</operator> <literal type="number" pos:start="67:23" pos:end="67:27">0x100</literal></expr>)</condition> <block pos:start="67:30" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:18">

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">=</operator> <operator pos:start="69:15" pos:end="69:15">-</operator><name pos:start="69:16" pos:end="69:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="71:9" pos:end="71:18">goto <name pos:start="71:14" pos:end="71:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:50"><expr pos:start="77:5" pos:end="77:49"><name pos:start="77:5" pos:end="77:7">ret</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <call pos:start="77:11" pos:end="77:49"><name pos:start="77:11" pos:end="77:21">read_uint32</name><argument_list pos:start="77:22" pos:end="77:49">(<argument pos:start="77:23" pos:end="77:24"><expr pos:start="77:23" pos:end="77:24"><name pos:start="77:23" pos:end="77:24">bs</name></expr></argument>, <argument pos:start="77:27" pos:end="77:40"><expr pos:start="77:27" pos:end="77:40"><name pos:start="77:27" pos:end="77:36">info_begin</name> <operator pos:start="77:38" pos:end="77:38">+</operator> <literal type="number" pos:start="77:40" pos:end="77:40">4</literal></expr></argument>, <argument pos:start="77:43" pos:end="77:48"><expr pos:start="77:43" pos:end="77:48"><operator pos:start="77:43" pos:end="77:43">&amp;</operator><name pos:start="77:44" pos:end="77:48">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="89:5"><if pos:start="79:5" pos:end="83:5">if <condition pos:start="79:8" pos:end="79:16">(<expr pos:start="79:9" pos:end="79:15"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">&lt;</operator> <literal type="number" pos:start="79:15" pos:end="79:15">0</literal></expr>)</condition> <block pos:start="79:18" pos:end="83:5">{<block_content pos:start="81:9" pos:end="81:18">

        <goto pos:start="81:9" pos:end="81:18">goto <name pos:start="81:14" pos:end="81:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="89:5">else if <condition pos:start="83:15" pos:end="83:26">(<expr pos:start="83:16" pos:end="83:25"><name pos:start="83:16" pos:end="83:20">count</name> <operator pos:start="83:22" pos:end="83:23">==</operator> <literal type="number" pos:start="83:25" pos:end="83:25">0</literal></expr>)</condition> <block pos:start="83:28" pos:end="89:5">{<block_content pos:start="85:9" pos:end="87:18">

        <expr_stmt pos:start="85:9" pos:end="85:22"><expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:11">ret</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <operator pos:start="85:15" pos:end="85:15">-</operator><name pos:start="85:16" pos:end="85:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:18">goto <name pos:start="87:14" pos:end="87:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:34"><expr pos:start="91:5" pos:end="91:33"><name pos:start="91:5" pos:end="91:12">info_end</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <name pos:start="91:16" pos:end="91:25">info_begin</name> <operator pos:start="91:27" pos:end="91:27">+</operator> <name pos:start="91:29" pos:end="91:33">count</name></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:32"><expr pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:10">offset</name> <operator pos:start="95:12" pos:end="95:12">=</operator> <name pos:start="95:14" pos:end="95:23">info_begin</name> <operator pos:start="95:25" pos:end="95:25">+</operator> <literal type="number" pos:start="95:27" pos:end="95:31">0x100</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:22">/* read offsets */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:41"><expr pos:start="101:5" pos:end="101:40"><name pos:start="101:5" pos:end="101:18">last_in_offset</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <name pos:start="101:22" pos:end="101:36">last_out_offset</name> <operator pos:start="101:38" pos:end="101:38">=</operator> <literal type="number" pos:start="101:40" pos:end="101:40">0</literal></expr>;</expr_stmt>

    <while pos:start="103:5" pos:end="301:5">while <condition pos:start="103:11" pos:end="103:29">(<expr pos:start="103:12" pos:end="103:28"><name pos:start="103:12" pos:end="103:17">offset</name> <operator pos:start="103:19" pos:end="103:19">&lt;</operator> <name pos:start="103:21" pos:end="103:28">info_end</name></expr>)</condition> <block pos:start="103:31" pos:end="301:5">{<block_content pos:start="105:9" pos:end="299:9">

        <decl_stmt pos:start="105:9" pos:end="105:22"><decl pos:start="105:9" pos:end="105:21"><type pos:start="105:9" pos:end="105:16"><name pos:start="105:9" pos:end="105:16">uint32_t</name></type> <name pos:start="105:18" pos:end="105:21">type</name></decl>;</decl_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:46"><expr pos:start="109:9" pos:end="109:45"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <call pos:start="109:15" pos:end="109:45"><name pos:start="109:15" pos:end="109:25">read_uint32</name><argument_list pos:start="109:26" pos:end="109:45">(<argument pos:start="109:27" pos:end="109:28"><expr pos:start="109:27" pos:end="109:28"><name pos:start="109:27" pos:end="109:28">bs</name></expr></argument>, <argument pos:start="109:31" pos:end="109:36"><expr pos:start="109:31" pos:end="109:36"><name pos:start="109:31" pos:end="109:36">offset</name></expr></argument>, <argument pos:start="109:39" pos:end="109:44"><expr pos:start="109:39" pos:end="109:44"><operator pos:start="109:39" pos:end="109:39">&amp;</operator><name pos:start="109:40" pos:end="109:44">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="121:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:20">(<expr pos:start="111:13" pos:end="111:19"><name pos:start="111:13" pos:end="111:15">ret</name> <operator pos:start="111:17" pos:end="111:17">&lt;</operator> <literal type="number" pos:start="111:19" pos:end="111:19">0</literal></expr>)</condition> <block pos:start="111:22" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:22">

            <goto pos:start="113:13" pos:end="113:22">goto <name pos:start="113:18" pos:end="113:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="115:11" pos:end="121:9">else if <condition pos:start="115:19" pos:end="115:30">(<expr pos:start="115:20" pos:end="115:29"><name pos:start="115:20" pos:end="115:24">count</name> <operator pos:start="115:26" pos:end="115:27">==</operator> <literal type="number" pos:start="115:29" pos:end="115:29">0</literal></expr>)</condition> <block pos:start="115:32" pos:end="121:9">{<block_content pos:start="117:13" pos:end="119:22">

            <expr_stmt pos:start="117:13" pos:end="117:26"><expr pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">=</operator> <operator pos:start="117:19" pos:end="117:19">-</operator><name pos:start="117:20" pos:end="117:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="119:13" pos:end="119:22">goto <name pos:start="119:18" pos:end="119:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:20"><expr pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:14">offset</name> <operator pos:start="123:16" pos:end="123:17">+=</operator> <literal type="number" pos:start="123:19" pos:end="123:19">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:45"><expr pos:start="127:9" pos:end="127:44"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:13">=</operator> <call pos:start="127:15" pos:end="127:44"><name pos:start="127:15" pos:end="127:25">read_uint32</name><argument_list pos:start="127:26" pos:end="127:44">(<argument pos:start="127:27" pos:end="127:28"><expr pos:start="127:27" pos:end="127:28"><name pos:start="127:27" pos:end="127:28">bs</name></expr></argument>, <argument pos:start="127:31" pos:end="127:36"><expr pos:start="127:31" pos:end="127:36"><name pos:start="127:31" pos:end="127:36">offset</name></expr></argument>, <argument pos:start="127:39" pos:end="127:43"><expr pos:start="127:39" pos:end="127:43"><operator pos:start="127:39" pos:end="127:39">&amp;</operator><name pos:start="127:40" pos:end="127:43">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="133:9"><if pos:start="129:9" pos:end="133:9">if <condition pos:start="129:12" pos:end="129:20">(<expr pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:17">&lt;</operator> <literal type="number" pos:start="129:19" pos:end="129:19">0</literal></expr>)</condition> <block pos:start="129:22" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:22">

            <goto pos:start="131:13" pos:end="131:22">goto <name pos:start="131:18" pos:end="131:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="137:9" pos:end="299:9"><if pos:start="137:9" pos:end="299:9">if <condition pos:start="137:12" pos:end="137:47">(<expr pos:start="137:13" pos:end="137:46"><name pos:start="137:13" pos:end="137:16">type</name> <operator pos:start="137:18" pos:end="137:19">==</operator> <literal type="number" pos:start="137:21" pos:end="137:30">0x6d697368</literal> <operator pos:start="137:32" pos:end="137:33">&amp;&amp;</operator> <name pos:start="137:35" pos:end="137:39">count</name> <operator pos:start="137:41" pos:end="137:42">&gt;=</operator> <literal type="number" pos:start="137:44" pos:end="137:46">244</literal></expr>)</condition> <block pos:start="137:49" pos:end="299:9">{<block_content pos:start="139:13" pos:end="297:39">

            <decl_stmt pos:start="139:13" pos:end="139:28"><decl pos:start="139:13" pos:end="139:27"><type pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:18">size_t</name></type> <name pos:start="139:20" pos:end="139:27">new_size</name></decl>;</decl_stmt>

            <decl_stmt pos:start="141:13" pos:end="141:33"><decl pos:start="141:13" pos:end="141:32"><type pos:start="141:13" pos:end="141:20"><name pos:start="141:13" pos:end="141:20">uint32_t</name></type> <name pos:start="141:22" pos:end="141:32">chunk_count</name></decl>;</decl_stmt>



            <expr_stmt pos:start="145:13" pos:end="145:24"><expr pos:start="145:13" pos:end="145:23"><name pos:start="145:13" pos:end="145:18">offset</name> <operator pos:start="145:20" pos:end="145:21">+=</operator> <literal type="number" pos:start="145:23" pos:end="145:23">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:26"><expr pos:start="147:13" pos:end="147:25"><name pos:start="147:13" pos:end="147:18">offset</name> <operator pos:start="147:20" pos:end="147:21">+=</operator> <literal type="number" pos:start="147:23" pos:end="147:25">200</literal></expr>;</expr_stmt>



            <expr_stmt pos:start="151:13" pos:end="151:45"><expr pos:start="151:13" pos:end="151:44"><name pos:start="151:13" pos:end="151:23">chunk_count</name> <operator pos:start="151:25" pos:end="151:25">=</operator> <operator pos:start="151:27" pos:end="151:27">(</operator><name pos:start="151:28" pos:end="151:32">count</name> <operator pos:start="151:34" pos:end="151:34">-</operator> <literal type="number" pos:start="151:36" pos:end="151:38">204</literal><operator pos:start="151:39" pos:end="151:39">)</operator> <operator pos:start="151:41" pos:end="151:41">/</operator> <literal type="number" pos:start="151:43" pos:end="151:44">40</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:70"><expr pos:start="153:13" pos:end="153:69"><name pos:start="153:13" pos:end="153:20">new_size</name> <operator pos:start="153:22" pos:end="153:22">=</operator> <sizeof pos:start="153:24" pos:end="153:39">sizeof<argument_list pos:start="153:30" pos:end="153:39">(<argument pos:start="153:31" pos:end="153:38"><expr pos:start="153:31" pos:end="153:38"><name pos:start="153:31" pos:end="153:38">uint64_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="153:41" pos:end="153:41">*</operator> <operator pos:start="153:43" pos:end="153:43">(</operator><name pos:start="153:44" pos:end="153:54"><name pos:start="153:44" pos:end="153:44">s</name><operator pos:start="153:45" pos:end="153:46">-&gt;</operator><name pos:start="153:47" pos:end="153:54">n_chunks</name></name> <operator pos:start="153:56" pos:end="153:56">+</operator> <name pos:start="153:58" pos:end="153:68">chunk_count</name><operator pos:start="153:69" pos:end="153:69">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:57"><expr pos:start="155:13" pos:end="155:56"><name pos:start="155:13" pos:end="155:20"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:20">types</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <call pos:start="155:24" pos:end="155:56"><name pos:start="155:24" pos:end="155:32">g_realloc</name><argument_list pos:start="155:33" pos:end="155:56">(<argument pos:start="155:34" pos:end="155:41"><expr pos:start="155:34" pos:end="155:41"><name pos:start="155:34" pos:end="155:41"><name pos:start="155:34" pos:end="155:34">s</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:41">types</name></name></expr></argument>, <argument pos:start="155:44" pos:end="155:55"><expr pos:start="155:44" pos:end="155:55"><name pos:start="155:44" pos:end="155:51">new_size</name> <operator pos:start="155:53" pos:end="155:53">/</operator> <literal type="number" pos:start="155:55" pos:end="155:55">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:57"><expr pos:start="157:13" pos:end="157:56"><name pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:22">offsets</name></name> <operator pos:start="157:24" pos:end="157:24">=</operator> <call pos:start="157:26" pos:end="157:56"><name pos:start="157:26" pos:end="157:34">g_realloc</name><argument_list pos:start="157:35" pos:end="157:56">(<argument pos:start="157:36" pos:end="157:45"><expr pos:start="157:36" pos:end="157:45"><name pos:start="157:36" pos:end="157:45"><name pos:start="157:36" pos:end="157:36">s</name><operator pos:start="157:37" pos:end="157:38">-&gt;</operator><name pos:start="157:39" pos:end="157:45">offsets</name></name></expr></argument>, <argument pos:start="157:48" pos:end="157:55"><expr pos:start="157:48" pos:end="157:55"><name pos:start="157:48" pos:end="157:55">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:57"><expr pos:start="159:13" pos:end="159:56"><name pos:start="159:13" pos:end="159:22"><name pos:start="159:13" pos:end="159:13">s</name><operator pos:start="159:14" pos:end="159:15">-&gt;</operator><name pos:start="159:16" pos:end="159:22">lengths</name></name> <operator pos:start="159:24" pos:end="159:24">=</operator> <call pos:start="159:26" pos:end="159:56"><name pos:start="159:26" pos:end="159:34">g_realloc</name><argument_list pos:start="159:35" pos:end="159:56">(<argument pos:start="159:36" pos:end="159:45"><expr pos:start="159:36" pos:end="159:45"><name pos:start="159:36" pos:end="159:45"><name pos:start="159:36" pos:end="159:36">s</name><operator pos:start="159:37" pos:end="159:38">-&gt;</operator><name pos:start="159:39" pos:end="159:45">lengths</name></name></expr></argument>, <argument pos:start="159:48" pos:end="159:55"><expr pos:start="159:48" pos:end="159:55"><name pos:start="159:48" pos:end="159:55">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:57"><expr pos:start="161:13" pos:end="161:56"><name pos:start="161:13" pos:end="161:22"><name pos:start="161:13" pos:end="161:13">s</name><operator pos:start="161:14" pos:end="161:15">-&gt;</operator><name pos:start="161:16" pos:end="161:22">sectors</name></name> <operator pos:start="161:24" pos:end="161:24">=</operator> <call pos:start="161:26" pos:end="161:56"><name pos:start="161:26" pos:end="161:34">g_realloc</name><argument_list pos:start="161:35" pos:end="161:56">(<argument pos:start="161:36" pos:end="161:45"><expr pos:start="161:36" pos:end="161:45"><name pos:start="161:36" pos:end="161:45"><name pos:start="161:36" pos:end="161:36">s</name><operator pos:start="161:37" pos:end="161:38">-&gt;</operator><name pos:start="161:39" pos:end="161:45">sectors</name></name></expr></argument>, <argument pos:start="161:48" pos:end="161:55"><expr pos:start="161:48" pos:end="161:55"><name pos:start="161:48" pos:end="161:55">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:67"><expr pos:start="163:13" pos:end="163:66"><name pos:start="163:13" pos:end="163:27"><name pos:start="163:13" pos:end="163:13">s</name><operator pos:start="163:14" pos:end="163:15">-&gt;</operator><name pos:start="163:16" pos:end="163:27">sectorcounts</name></name> <operator pos:start="163:29" pos:end="163:29">=</operator> <call pos:start="163:31" pos:end="163:66"><name pos:start="163:31" pos:end="163:39">g_realloc</name><argument_list pos:start="163:40" pos:end="163:66">(<argument pos:start="163:41" pos:end="163:55"><expr pos:start="163:41" pos:end="163:55"><name pos:start="163:41" pos:end="163:55"><name pos:start="163:41" pos:end="163:41">s</name><operator pos:start="163:42" pos:end="163:43">-&gt;</operator><name pos:start="163:44" pos:end="163:55">sectorcounts</name></name></expr></argument>, <argument pos:start="163:58" pos:end="163:65"><expr pos:start="163:58" pos:end="163:65"><name pos:start="163:58" pos:end="163:65">new_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="167:13" pos:end="295:13">for <control pos:start="167:17" pos:end="167:69">(<init pos:start="167:18" pos:end="167:33"><expr pos:start="167:18" pos:end="167:32"><name pos:start="167:18" pos:end="167:18">i</name> <operator pos:start="167:20" pos:end="167:20">=</operator> <name pos:start="167:22" pos:end="167:32"><name pos:start="167:22" pos:end="167:22">s</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:32">n_chunks</name></name></expr>;</init> <condition pos:start="167:35" pos:end="167:64"><expr pos:start="167:35" pos:end="167:63"><name pos:start="167:35" pos:end="167:35">i</name> <operator pos:start="167:37" pos:end="167:37">&lt;</operator> <name pos:start="167:39" pos:end="167:49"><name pos:start="167:39" pos:end="167:39">s</name><operator pos:start="167:40" pos:end="167:41">-&gt;</operator><name pos:start="167:42" pos:end="167:49">n_chunks</name></name> <operator pos:start="167:51" pos:end="167:51">+</operator> <name pos:start="167:53" pos:end="167:63">chunk_count</name></expr>;</condition> <incr pos:start="167:66" pos:end="167:68"><expr pos:start="167:66" pos:end="167:68"><name pos:start="167:66" pos:end="167:66">i</name><operator pos:start="167:67" pos:end="167:68">++</operator></expr></incr>)</control> <block pos:start="167:71" pos:end="295:13">{<block_content pos:start="169:17" pos:end="293:62">

                <expr_stmt pos:start="169:17" pos:end="169:60"><expr pos:start="169:17" pos:end="169:59"><name pos:start="169:17" pos:end="169:19">ret</name> <operator pos:start="169:21" pos:end="169:21">=</operator> <call pos:start="169:23" pos:end="169:59"><name pos:start="169:23" pos:end="169:33">read_uint32</name><argument_list pos:start="169:34" pos:end="169:59">(<argument pos:start="169:35" pos:end="169:36"><expr pos:start="169:35" pos:end="169:36"><name pos:start="169:35" pos:end="169:36">bs</name></expr></argument>, <argument pos:start="169:39" pos:end="169:44"><expr pos:start="169:39" pos:end="169:44"><name pos:start="169:39" pos:end="169:44">offset</name></expr></argument>, <argument pos:start="169:47" pos:end="169:58"><expr pos:start="169:47" pos:end="169:58"><operator pos:start="169:47" pos:end="169:47">&amp;</operator><name pos:start="169:48" pos:end="169:58"><name pos:start="169:48" pos:end="169:48">s</name><operator pos:start="169:49" pos:end="169:50">-&gt;</operator><name pos:start="169:51" pos:end="169:55">types</name><index pos:start="169:56" pos:end="169:58">[<expr pos:start="169:57" pos:end="169:57"><name pos:start="169:57" pos:end="169:57">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="171:17" pos:end="175:17"><if pos:start="171:17" pos:end="175:17">if <condition pos:start="171:20" pos:end="171:28">(<expr pos:start="171:21" pos:end="171:27"><name pos:start="171:21" pos:end="171:23">ret</name> <operator pos:start="171:25" pos:end="171:25">&lt;</operator> <literal type="number" pos:start="171:27" pos:end="171:27">0</literal></expr>)</condition> <block pos:start="171:30" pos:end="175:17">{<block_content pos:start="173:21" pos:end="173:30">

                    <goto pos:start="173:21" pos:end="173:30">goto <name pos:start="173:26" pos:end="173:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="177:17" pos:end="177:28"><expr pos:start="177:17" pos:end="177:27"><name pos:start="177:17" pos:end="177:22">offset</name> <operator pos:start="177:24" pos:end="177:25">+=</operator> <literal type="number" pos:start="177:27" pos:end="177:27">4</literal></expr>;</expr_stmt>

                <if_stmt pos:start="179:17" pos:end="201:17"><if pos:start="179:17" pos:end="201:17">if <condition pos:start="179:20" pos:end="181:37">(<expr pos:start="179:21" pos:end="181:36"><name pos:start="179:21" pos:end="179:31"><name pos:start="179:21" pos:end="179:21">s</name><operator pos:start="179:22" pos:end="179:23">-&gt;</operator><name pos:start="179:24" pos:end="179:28">types</name><index pos:start="179:29" pos:end="179:31">[<expr pos:start="179:30" pos:end="179:30"><name pos:start="179:30" pos:end="179:30">i</name></expr>]</index></name> <operator pos:start="179:33" pos:end="179:34">!=</operator> <literal type="number" pos:start="179:36" pos:end="179:45">0x80000005</literal> <operator pos:start="179:47" pos:end="179:48">&amp;&amp;</operator> <name pos:start="179:50" pos:end="179:60"><name pos:start="179:50" pos:end="179:50">s</name><operator pos:start="179:51" pos:end="179:52">-&gt;</operator><name pos:start="179:53" pos:end="179:57">types</name><index pos:start="179:58" pos:end="179:60">[<expr pos:start="179:59" pos:end="179:59"><name pos:start="179:59" pos:end="179:59">i</name></expr>]</index></name> <operator pos:start="179:62" pos:end="179:63">!=</operator> <literal type="number" pos:start="179:65" pos:end="179:65">1</literal> <operator pos:start="179:67" pos:end="179:68">&amp;&amp;</operator>

                    <name pos:start="181:21" pos:end="181:31"><name pos:start="181:21" pos:end="181:21">s</name><operator pos:start="181:22" pos:end="181:23">-&gt;</operator><name pos:start="181:24" pos:end="181:28">types</name><index pos:start="181:29" pos:end="181:31">[<expr pos:start="181:30" pos:end="181:30"><name pos:start="181:30" pos:end="181:30">i</name></expr>]</index></name> <operator pos:start="181:33" pos:end="181:34">!=</operator> <literal type="number" pos:start="181:36" pos:end="181:36">2</literal></expr>)</condition> <block pos:start="181:39" pos:end="201:17">{<block_content pos:start="183:21" pos:end="199:29">

                    <if_stmt pos:start="183:21" pos:end="191:21"><if pos:start="183:21" pos:end="191:21">if <condition pos:start="183:24" pos:end="183:59">(<expr pos:start="183:25" pos:end="183:58"><name pos:start="183:25" pos:end="183:35"><name pos:start="183:25" pos:end="183:25">s</name><operator pos:start="183:26" pos:end="183:27">-&gt;</operator><name pos:start="183:28" pos:end="183:32">types</name><index pos:start="183:33" pos:end="183:35">[<expr pos:start="183:34" pos:end="183:34"><name pos:start="183:34" pos:end="183:34">i</name></expr>]</index></name> <operator pos:start="183:37" pos:end="183:38">==</operator> <literal type="number" pos:start="183:40" pos:end="183:49">0xffffffff</literal> <operator pos:start="183:51" pos:end="183:52">&amp;&amp;</operator> <name pos:start="183:54" pos:end="183:54">i</name> <operator pos:start="183:56" pos:end="183:56">&gt;</operator> <literal type="number" pos:start="183:58" pos:end="183:58">0</literal></expr>)</condition> <block pos:start="183:61" pos:end="191:21">{<block_content pos:start="185:25" pos:end="189:65">

                        <expr_stmt pos:start="185:25" pos:end="185:79"><expr pos:start="185:25" pos:end="185:78"><name pos:start="185:25" pos:end="185:38">last_in_offset</name> <operator pos:start="185:40" pos:end="185:40">=</operator> <name pos:start="185:42" pos:end="185:58"><name pos:start="185:42" pos:end="185:42">s</name><operator pos:start="185:43" pos:end="185:44">-&gt;</operator><name pos:start="185:45" pos:end="185:51">offsets</name><index pos:start="185:52" pos:end="185:58">[<expr pos:start="185:53" pos:end="185:57"><name pos:start="185:53" pos:end="185:53">i</name> <operator pos:start="185:55" pos:end="185:55">-</operator> <literal type="number" pos:start="185:57" pos:end="185:57">1</literal></expr>]</index></name> <operator pos:start="185:60" pos:end="185:60">+</operator> <name pos:start="185:62" pos:end="185:78"><name pos:start="185:62" pos:end="185:62">s</name><operator pos:start="185:63" pos:end="185:64">-&gt;</operator><name pos:start="185:65" pos:end="185:71">lengths</name><index pos:start="185:72" pos:end="185:78">[<expr pos:start="185:73" pos:end="185:77"><name pos:start="185:73" pos:end="185:73">i</name> <operator pos:start="185:75" pos:end="185:75">-</operator> <literal type="number" pos:start="185:77" pos:end="185:77">1</literal></expr>]</index></name></expr>;</expr_stmt>

                        <expr_stmt pos:start="187:25" pos:end="189:65"><expr pos:start="187:25" pos:end="189:64"><name pos:start="187:25" pos:end="187:39">last_out_offset</name> <operator pos:start="187:41" pos:end="187:41">=</operator> <name pos:start="187:43" pos:end="187:59"><name pos:start="187:43" pos:end="187:43">s</name><operator pos:start="187:44" pos:end="187:45">-&gt;</operator><name pos:start="187:46" pos:end="187:52">sectors</name><index pos:start="187:53" pos:end="187:59">[<expr pos:start="187:54" pos:end="187:58"><name pos:start="187:54" pos:end="187:54">i</name> <operator pos:start="187:56" pos:end="187:56">-</operator> <literal type="number" pos:start="187:58" pos:end="187:58">1</literal></expr>]</index></name> <operator pos:start="187:61" pos:end="187:61">+</operator>

                                          <name pos:start="189:43" pos:end="189:64"><name pos:start="189:43" pos:end="189:43">s</name><operator pos:start="189:44" pos:end="189:45">-&gt;</operator><name pos:start="189:46" pos:end="189:57">sectorcounts</name><index pos:start="189:58" pos:end="189:64">[<expr pos:start="189:59" pos:end="189:63"><name pos:start="189:59" pos:end="189:59">i</name> <operator pos:start="189:61" pos:end="189:61">-</operator> <literal type="number" pos:start="189:63" pos:end="189:63">1</literal></expr>]</index></name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="193:21" pos:end="193:34"><expr pos:start="193:21" pos:end="193:33"><name pos:start="193:21" pos:end="193:31">chunk_count</name><operator pos:start="193:32" pos:end="193:33">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="195:21" pos:end="195:24"><expr pos:start="195:21" pos:end="195:23"><name pos:start="195:21" pos:end="195:21">i</name><operator pos:start="195:22" pos:end="195:23">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="197:21" pos:end="197:33"><expr pos:start="197:21" pos:end="197:32"><name pos:start="197:21" pos:end="197:26">offset</name> <operator pos:start="197:28" pos:end="197:29">+=</operator> <literal type="number" pos:start="197:31" pos:end="197:32">36</literal></expr>;</expr_stmt>

                    <continue pos:start="199:21" pos:end="199:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:28"><expr pos:start="203:17" pos:end="203:27"><name pos:start="203:17" pos:end="203:22">offset</name> <operator pos:start="203:24" pos:end="203:25">+=</operator> <literal type="number" pos:start="203:27" pos:end="203:27">4</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="207:17" pos:end="207:62"><expr pos:start="207:17" pos:end="207:61"><name pos:start="207:17" pos:end="207:19">ret</name> <operator pos:start="207:21" pos:end="207:21">=</operator> <call pos:start="207:23" pos:end="207:61"><name pos:start="207:23" pos:end="207:33">read_uint64</name><argument_list pos:start="207:34" pos:end="207:61">(<argument pos:start="207:35" pos:end="207:36"><expr pos:start="207:35" pos:end="207:36"><name pos:start="207:35" pos:end="207:36">bs</name></expr></argument>, <argument pos:start="207:39" pos:end="207:44"><expr pos:start="207:39" pos:end="207:44"><name pos:start="207:39" pos:end="207:44">offset</name></expr></argument>, <argument pos:start="207:47" pos:end="207:60"><expr pos:start="207:47" pos:end="207:60"><operator pos:start="207:47" pos:end="207:47">&amp;</operator><name pos:start="207:48" pos:end="207:60"><name pos:start="207:48" pos:end="207:48">s</name><operator pos:start="207:49" pos:end="207:50">-&gt;</operator><name pos:start="207:51" pos:end="207:57">sectors</name><index pos:start="207:58" pos:end="207:60">[<expr pos:start="207:59" pos:end="207:59"><name pos:start="207:59" pos:end="207:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="209:17" pos:end="213:17"><if pos:start="209:17" pos:end="213:17">if <condition pos:start="209:20" pos:end="209:28">(<expr pos:start="209:21" pos:end="209:27"><name pos:start="209:21" pos:end="209:23">ret</name> <operator pos:start="209:25" pos:end="209:25">&lt;</operator> <literal type="number" pos:start="209:27" pos:end="209:27">0</literal></expr>)</condition> <block pos:start="209:30" pos:end="213:17">{<block_content pos:start="211:21" pos:end="211:30">

                    <goto pos:start="211:21" pos:end="211:30">goto <name pos:start="211:26" pos:end="211:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:49"><expr pos:start="215:17" pos:end="215:48"><name pos:start="215:17" pos:end="215:29"><name pos:start="215:17" pos:end="215:17">s</name><operator pos:start="215:18" pos:end="215:19">-&gt;</operator><name pos:start="215:20" pos:end="215:26">sectors</name><index pos:start="215:27" pos:end="215:29">[<expr pos:start="215:28" pos:end="215:28"><name pos:start="215:28" pos:end="215:28">i</name></expr>]</index></name> <operator pos:start="215:31" pos:end="215:32">+=</operator> <name pos:start="215:34" pos:end="215:48">last_out_offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:28"><expr pos:start="217:17" pos:end="217:27"><name pos:start="217:17" pos:end="217:22">offset</name> <operator pos:start="217:24" pos:end="217:25">+=</operator> <literal type="number" pos:start="217:27" pos:end="217:27">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="221:17" pos:end="221:67"><expr pos:start="221:17" pos:end="221:66"><name pos:start="221:17" pos:end="221:19">ret</name> <operator pos:start="221:21" pos:end="221:21">=</operator> <call pos:start="221:23" pos:end="221:66"><name pos:start="221:23" pos:end="221:33">read_uint64</name><argument_list pos:start="221:34" pos:end="221:66">(<argument pos:start="221:35" pos:end="221:36"><expr pos:start="221:35" pos:end="221:36"><name pos:start="221:35" pos:end="221:36">bs</name></expr></argument>, <argument pos:start="221:39" pos:end="221:44"><expr pos:start="221:39" pos:end="221:44"><name pos:start="221:39" pos:end="221:44">offset</name></expr></argument>, <argument pos:start="221:47" pos:end="221:65"><expr pos:start="221:47" pos:end="221:65"><operator pos:start="221:47" pos:end="221:47">&amp;</operator><name pos:start="221:48" pos:end="221:65"><name pos:start="221:48" pos:end="221:48">s</name><operator pos:start="221:49" pos:end="221:50">-&gt;</operator><name pos:start="221:51" pos:end="221:62">sectorcounts</name><index pos:start="221:63" pos:end="221:65">[<expr pos:start="221:64" pos:end="221:64"><name pos:start="221:64" pos:end="221:64">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="223:17" pos:end="227:17"><if pos:start="223:17" pos:end="227:17">if <condition pos:start="223:20" pos:end="223:28">(<expr pos:start="223:21" pos:end="223:27"><name pos:start="223:21" pos:end="223:23">ret</name> <operator pos:start="223:25" pos:end="223:25">&lt;</operator> <literal type="number" pos:start="223:27" pos:end="223:27">0</literal></expr>)</condition> <block pos:start="223:30" pos:end="227:17">{<block_content pos:start="225:21" pos:end="225:30">

                    <goto pos:start="225:21" pos:end="225:30">goto <name pos:start="225:26" pos:end="225:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="229:17" pos:end="229:28"><expr pos:start="229:17" pos:end="229:27"><name pos:start="229:17" pos:end="229:22">offset</name> <operator pos:start="229:24" pos:end="229:25">+=</operator> <literal type="number" pos:start="229:27" pos:end="229:27">8</literal></expr>;</expr_stmt>



                <if_stmt pos:start="233:17" pos:end="245:17"><if pos:start="233:17" pos:end="245:17">if <condition pos:start="233:20" pos:end="233:62">(<expr pos:start="233:21" pos:end="233:61"><name pos:start="233:21" pos:end="233:38"><name pos:start="233:21" pos:end="233:21">s</name><operator pos:start="233:22" pos:end="233:23">-&gt;</operator><name pos:start="233:24" pos:end="233:35">sectorcounts</name><index pos:start="233:36" pos:end="233:38">[<expr pos:start="233:37" pos:end="233:37"><name pos:start="233:37" pos:end="233:37">i</name></expr>]</index></name> <operator pos:start="233:40" pos:end="233:40">&gt;</operator> <name pos:start="233:42" pos:end="233:61">DMG_SECTORCOUNTS_MAX</name></expr>)</condition> <block pos:start="233:64" pos:end="245:17">{<block_content pos:start="235:21" pos:end="243:30">

                    <expr_stmt pos:start="235:21" pos:end="239:78"><expr pos:start="235:21" pos:end="239:77"><call pos:start="235:21" pos:end="239:77"><name pos:start="235:21" pos:end="235:32">error_report</name><argument_list pos:start="235:33" pos:end="239:77">(<argument pos:start="235:34" pos:end="237:59"><expr pos:start="235:34" pos:end="237:59"><literal type="string" pos:start="235:34" pos:end="235:49">"sector count %"</literal> <name pos:start="235:51" pos:end="235:56">PRIu64</name> <literal type="string" pos:start="235:58" pos:end="235:71">" for chunk %"</literal> <name pos:start="235:73" pos:end="235:78">PRIu32</name>

                                 <literal type="string" pos:start="237:34" pos:end="237:59">" is larger than max (%u)"</literal></expr></argument>,

                                 <argument pos:start="239:34" pos:end="239:51"><expr pos:start="239:34" pos:end="239:51"><name pos:start="239:34" pos:end="239:51"><name pos:start="239:34" pos:end="239:34">s</name><operator pos:start="239:35" pos:end="239:36">-&gt;</operator><name pos:start="239:37" pos:end="239:48">sectorcounts</name><index pos:start="239:49" pos:end="239:51">[<expr pos:start="239:50" pos:end="239:50"><name pos:start="239:50" pos:end="239:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="239:54" pos:end="239:54"><expr pos:start="239:54" pos:end="239:54"><name pos:start="239:54" pos:end="239:54">i</name></expr></argument>, <argument pos:start="239:57" pos:end="239:76"><expr pos:start="239:57" pos:end="239:76"><name pos:start="239:57" pos:end="239:76">DMG_SECTORCOUNTS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="241:21" pos:end="241:34"><expr pos:start="241:21" pos:end="241:33"><name pos:start="241:21" pos:end="241:23">ret</name> <operator pos:start="241:25" pos:end="241:25">=</operator> <operator pos:start="241:27" pos:end="241:27">-</operator><name pos:start="241:28" pos:end="241:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="243:21" pos:end="243:30">goto <name pos:start="243:26" pos:end="243:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="249:17" pos:end="249:62"><expr pos:start="249:17" pos:end="249:61"><name pos:start="249:17" pos:end="249:19">ret</name> <operator pos:start="249:21" pos:end="249:21">=</operator> <call pos:start="249:23" pos:end="249:61"><name pos:start="249:23" pos:end="249:33">read_uint64</name><argument_list pos:start="249:34" pos:end="249:61">(<argument pos:start="249:35" pos:end="249:36"><expr pos:start="249:35" pos:end="249:36"><name pos:start="249:35" pos:end="249:36">bs</name></expr></argument>, <argument pos:start="249:39" pos:end="249:44"><expr pos:start="249:39" pos:end="249:44"><name pos:start="249:39" pos:end="249:44">offset</name></expr></argument>, <argument pos:start="249:47" pos:end="249:60"><expr pos:start="249:47" pos:end="249:60"><operator pos:start="249:47" pos:end="249:47">&amp;</operator><name pos:start="249:48" pos:end="249:60"><name pos:start="249:48" pos:end="249:48">s</name><operator pos:start="249:49" pos:end="249:50">-&gt;</operator><name pos:start="249:51" pos:end="249:57">offsets</name><index pos:start="249:58" pos:end="249:60">[<expr pos:start="249:59" pos:end="249:59"><name pos:start="249:59" pos:end="249:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="251:17" pos:end="255:17"><if pos:start="251:17" pos:end="255:17">if <condition pos:start="251:20" pos:end="251:28">(<expr pos:start="251:21" pos:end="251:27"><name pos:start="251:21" pos:end="251:23">ret</name> <operator pos:start="251:25" pos:end="251:25">&lt;</operator> <literal type="number" pos:start="251:27" pos:end="251:27">0</literal></expr>)</condition> <block pos:start="251:30" pos:end="255:17">{<block_content pos:start="253:21" pos:end="253:30">

                    <goto pos:start="253:21" pos:end="253:30">goto <name pos:start="253:26" pos:end="253:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:48"><expr pos:start="257:17" pos:end="257:47"><name pos:start="257:17" pos:end="257:29"><name pos:start="257:17" pos:end="257:17">s</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:26">offsets</name><index pos:start="257:27" pos:end="257:29">[<expr pos:start="257:28" pos:end="257:28"><name pos:start="257:28" pos:end="257:28">i</name></expr>]</index></name> <operator pos:start="257:31" pos:end="257:32">+=</operator> <name pos:start="257:34" pos:end="257:47">last_in_offset</name></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:28"><expr pos:start="259:17" pos:end="259:27"><name pos:start="259:17" pos:end="259:22">offset</name> <operator pos:start="259:24" pos:end="259:25">+=</operator> <literal type="number" pos:start="259:27" pos:end="259:27">8</literal></expr>;</expr_stmt>



                <expr_stmt pos:start="263:17" pos:end="263:62"><expr pos:start="263:17" pos:end="263:61"><name pos:start="263:17" pos:end="263:19">ret</name> <operator pos:start="263:21" pos:end="263:21">=</operator> <call pos:start="263:23" pos:end="263:61"><name pos:start="263:23" pos:end="263:33">read_uint64</name><argument_list pos:start="263:34" pos:end="263:61">(<argument pos:start="263:35" pos:end="263:36"><expr pos:start="263:35" pos:end="263:36"><name pos:start="263:35" pos:end="263:36">bs</name></expr></argument>, <argument pos:start="263:39" pos:end="263:44"><expr pos:start="263:39" pos:end="263:44"><name pos:start="263:39" pos:end="263:44">offset</name></expr></argument>, <argument pos:start="263:47" pos:end="263:60"><expr pos:start="263:47" pos:end="263:60"><operator pos:start="263:47" pos:end="263:47">&amp;</operator><name pos:start="263:48" pos:end="263:60"><name pos:start="263:48" pos:end="263:48">s</name><operator pos:start="263:49" pos:end="263:50">-&gt;</operator><name pos:start="263:51" pos:end="263:57">lengths</name><index pos:start="263:58" pos:end="263:60">[<expr pos:start="263:59" pos:end="263:59"><name pos:start="263:59" pos:end="263:59">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="265:17" pos:end="269:17"><if pos:start="265:17" pos:end="269:17">if <condition pos:start="265:20" pos:end="265:28">(<expr pos:start="265:21" pos:end="265:27"><name pos:start="265:21" pos:end="265:23">ret</name> <operator pos:start="265:25" pos:end="265:25">&lt;</operator> <literal type="number" pos:start="265:27" pos:end="265:27">0</literal></expr>)</condition> <block pos:start="265:30" pos:end="269:17">{<block_content pos:start="267:21" pos:end="267:30">

                    <goto pos:start="267:21" pos:end="267:30">goto <name pos:start="267:26" pos:end="267:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:28"><expr pos:start="271:17" pos:end="271:27"><name pos:start="271:17" pos:end="271:22">offset</name> <operator pos:start="271:24" pos:end="271:25">+=</operator> <literal type="number" pos:start="271:27" pos:end="271:27">8</literal></expr>;</expr_stmt>



                <if_stmt pos:start="275:17" pos:end="287:17"><if pos:start="275:17" pos:end="287:17">if <condition pos:start="275:20" pos:end="275:52">(<expr pos:start="275:21" pos:end="275:51"><name pos:start="275:21" pos:end="275:33"><name pos:start="275:21" pos:end="275:21">s</name><operator pos:start="275:22" pos:end="275:23">-&gt;</operator><name pos:start="275:24" pos:end="275:30">lengths</name><index pos:start="275:31" pos:end="275:33">[<expr pos:start="275:32" pos:end="275:32"><name pos:start="275:32" pos:end="275:32">i</name></expr>]</index></name> <operator pos:start="275:35" pos:end="275:35">&gt;</operator> <name pos:start="275:37" pos:end="275:51">DMG_LENGTHS_MAX</name></expr>)</condition> <block pos:start="275:54" pos:end="287:17">{<block_content pos:start="277:21" pos:end="285:30">

                    <expr_stmt pos:start="277:21" pos:end="281:68"><expr pos:start="277:21" pos:end="281:67"><call pos:start="277:21" pos:end="281:67"><name pos:start="277:21" pos:end="277:32">error_report</name><argument_list pos:start="277:33" pos:end="281:67">(<argument pos:start="277:34" pos:end="279:59"><expr pos:start="277:34" pos:end="279:59"><literal type="string" pos:start="277:34" pos:end="277:43">"length %"</literal> <name pos:start="277:45" pos:end="277:50">PRIu64</name> <literal type="string" pos:start="277:52" pos:end="277:65">" for chunk %"</literal> <name pos:start="277:67" pos:end="277:72">PRIu32</name>

                                 <literal type="string" pos:start="279:34" pos:end="279:59">" is larger than max (%u)"</literal></expr></argument>,

                                 <argument pos:start="281:34" pos:end="281:46"><expr pos:start="281:34" pos:end="281:46"><name pos:start="281:34" pos:end="281:46"><name pos:start="281:34" pos:end="281:34">s</name><operator pos:start="281:35" pos:end="281:36">-&gt;</operator><name pos:start="281:37" pos:end="281:43">lengths</name><index pos:start="281:44" pos:end="281:46">[<expr pos:start="281:45" pos:end="281:45"><name pos:start="281:45" pos:end="281:45">i</name></expr>]</index></name></expr></argument>, <argument pos:start="281:49" pos:end="281:49"><expr pos:start="281:49" pos:end="281:49"><name pos:start="281:49" pos:end="281:49">i</name></expr></argument>, <argument pos:start="281:52" pos:end="281:66"><expr pos:start="281:52" pos:end="281:66"><name pos:start="281:52" pos:end="281:66">DMG_LENGTHS_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="283:21" pos:end="283:34"><expr pos:start="283:21" pos:end="283:33"><name pos:start="283:21" pos:end="283:23">ret</name> <operator pos:start="283:25" pos:end="283:25">=</operator> <operator pos:start="283:27" pos:end="283:27">-</operator><name pos:start="283:28" pos:end="283:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="285:21" pos:end="285:30">goto <name pos:start="285:26" pos:end="285:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="291:17" pos:end="293:62"><expr pos:start="291:17" pos:end="293:61"><call pos:start="291:17" pos:end="293:61"><name pos:start="291:17" pos:end="291:37">update_max_chunk_size</name><argument_list pos:start="291:38" pos:end="293:61">(<argument pos:start="291:39" pos:end="291:39"><expr pos:start="291:39" pos:end="291:39"><name pos:start="291:39" pos:end="291:39">s</name></expr></argument>, <argument pos:start="291:42" pos:end="291:42"><expr pos:start="291:42" pos:end="291:42"><name pos:start="291:42" pos:end="291:42">i</name></expr></argument>, <argument pos:start="291:45" pos:end="291:64"><expr pos:start="291:45" pos:end="291:64"><operator pos:start="291:45" pos:end="291:45">&amp;</operator><name pos:start="291:46" pos:end="291:64">max_compressed_size</name></expr></argument>,

                                      <argument pos:start="293:39" pos:end="293:60"><expr pos:start="293:39" pos:end="293:60"><operator pos:start="293:39" pos:end="293:39">&amp;</operator><name pos:start="293:40" pos:end="293:60">max_sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="297:13" pos:end="297:39"><expr pos:start="297:13" pos:end="297:38"><name pos:start="297:13" pos:end="297:23"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:23">n_chunks</name></name> <operator pos:start="297:25" pos:end="297:26">+=</operator> <name pos:start="297:28" pos:end="297:38">chunk_count</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="305:5" pos:end="305:32">/* initialize zlib engine */</comment>

    <expr_stmt pos:start="307:5" pos:end="309:71"><expr pos:start="307:5" pos:end="309:70"><name pos:start="307:5" pos:end="307:23"><name pos:start="307:5" pos:end="307:5">s</name><operator pos:start="307:6" pos:end="307:7">-&gt;</operator><name pos:start="307:8" pos:end="307:23">compressed_chunk</name></name> <operator pos:start="307:25" pos:end="307:25">=</operator> <call pos:start="307:27" pos:end="309:70"><name pos:start="307:27" pos:end="307:45">qemu_try_blockalign</name><argument_list pos:start="307:46" pos:end="309:70">(<argument pos:start="307:47" pos:end="307:54"><expr pos:start="307:47" pos:end="307:54"><name pos:start="307:47" pos:end="307:54"><name pos:start="307:47" pos:end="307:48">bs</name><operator pos:start="307:49" pos:end="307:50">-&gt;</operator><name pos:start="307:51" pos:end="307:54">file</name></name></expr></argument>,

                                              <argument pos:start="309:47" pos:end="309:69"><expr pos:start="309:47" pos:end="309:69"><name pos:start="309:47" pos:end="309:65">max_compressed_size</name> <operator pos:start="309:67" pos:end="309:67">+</operator> <literal type="number" pos:start="309:69" pos:end="309:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="311:5" pos:end="313:77"><expr pos:start="311:5" pos:end="313:76"><name pos:start="311:5" pos:end="311:25"><name pos:start="311:5" pos:end="311:5">s</name><operator pos:start="311:6" pos:end="311:7">-&gt;</operator><name pos:start="311:8" pos:end="311:25">uncompressed_chunk</name></name> <operator pos:start="311:27" pos:end="311:27">=</operator> <call pos:start="311:29" pos:end="313:76"><name pos:start="311:29" pos:end="311:47">qemu_try_blockalign</name><argument_list pos:start="311:48" pos:end="313:76">(<argument pos:start="311:49" pos:end="311:56"><expr pos:start="311:49" pos:end="311:56"><name pos:start="311:49" pos:end="311:56"><name pos:start="311:49" pos:end="311:50">bs</name><operator pos:start="311:51" pos:end="311:52">-&gt;</operator><name pos:start="311:53" pos:end="311:56">file</name></name></expr></argument>,

                                                <argument pos:start="313:49" pos:end="313:75"><expr pos:start="313:49" pos:end="313:75"><literal type="number" pos:start="313:49" pos:end="313:51">512</literal> <operator pos:start="313:53" pos:end="313:53">*</operator> <name pos:start="313:55" pos:end="313:75">max_sectors_per_chunk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="315:5" pos:end="321:5"><if pos:start="315:5" pos:end="321:5">if <condition pos:start="315:8" pos:end="315:69">(<expr pos:start="315:9" pos:end="315:68"><name pos:start="315:9" pos:end="315:27"><name pos:start="315:9" pos:end="315:9">s</name><operator pos:start="315:10" pos:end="315:11">-&gt;</operator><name pos:start="315:12" pos:end="315:27">compressed_chunk</name></name> <operator pos:start="315:29" pos:end="315:30">==</operator> <name pos:start="315:32" pos:end="315:35">NULL</name> <operator pos:start="315:37" pos:end="315:38">||</operator> <name pos:start="315:40" pos:end="315:60"><name pos:start="315:40" pos:end="315:40">s</name><operator pos:start="315:41" pos:end="315:42">-&gt;</operator><name pos:start="315:43" pos:end="315:60">uncompressed_chunk</name></name> <operator pos:start="315:62" pos:end="315:63">==</operator> <name pos:start="315:65" pos:end="315:68">NULL</name></expr>)</condition> <block pos:start="315:71" pos:end="321:5">{<block_content pos:start="317:9" pos:end="319:18">

        <expr_stmt pos:start="317:9" pos:end="317:22"><expr pos:start="317:9" pos:end="317:21"><name pos:start="317:9" pos:end="317:11">ret</name> <operator pos:start="317:13" pos:end="317:13">=</operator> <operator pos:start="317:15" pos:end="317:15">-</operator><name pos:start="317:16" pos:end="317:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="319:9" pos:end="319:18">goto <name pos:start="319:14" pos:end="319:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="325:5" pos:end="331:5"><if pos:start="325:5" pos:end="331:5">if <condition pos:start="325:8" pos:end="325:41">(<expr pos:start="325:9" pos:end="325:40"><call pos:start="325:9" pos:end="325:32"><name pos:start="325:9" pos:end="325:19">inflateInit</name><argument_list pos:start="325:20" pos:end="325:32">(<argument pos:start="325:21" pos:end="325:31"><expr pos:start="325:21" pos:end="325:31"><operator pos:start="325:21" pos:end="325:21">&amp;</operator><name pos:start="325:22" pos:end="325:31"><name pos:start="325:22" pos:end="325:22">s</name><operator pos:start="325:23" pos:end="325:24">-&gt;</operator><name pos:start="325:25" pos:end="325:31">zstream</name></name></expr></argument>)</argument_list></call> <operator pos:start="325:34" pos:end="325:35">!=</operator> <name pos:start="325:37" pos:end="325:40">Z_OK</name></expr>)</condition> <block pos:start="325:43" pos:end="331:5">{<block_content pos:start="327:9" pos:end="329:18">

        <expr_stmt pos:start="327:9" pos:end="327:22"><expr pos:start="327:9" pos:end="327:21"><name pos:start="327:9" pos:end="327:11">ret</name> <operator pos:start="327:13" pos:end="327:13">=</operator> <operator pos:start="327:15" pos:end="327:15">-</operator><name pos:start="327:16" pos:end="327:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="329:9" pos:end="329:18">goto <name pos:start="329:14" pos:end="329:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="335:5" pos:end="335:35"><expr pos:start="335:5" pos:end="335:34"><name pos:start="335:5" pos:end="335:20"><name pos:start="335:5" pos:end="335:5">s</name><operator pos:start="335:6" pos:end="335:7">-&gt;</operator><name pos:start="335:8" pos:end="335:20">current_chunk</name></name> <operator pos:start="335:22" pos:end="335:22">=</operator> <name pos:start="335:24" pos:end="335:34"><name pos:start="335:24" pos:end="335:24">s</name><operator pos:start="335:25" pos:end="335:26">-&gt;</operator><name pos:start="335:27" pos:end="335:34">n_chunks</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="339:5" pos:end="339:33"><expr pos:start="339:5" pos:end="339:32"><call pos:start="339:5" pos:end="339:32"><name pos:start="339:5" pos:end="339:22">qemu_co_mutex_init</name><argument_list pos:start="339:23" pos:end="339:32">(<argument pos:start="339:24" pos:end="339:31"><expr pos:start="339:24" pos:end="339:31"><operator pos:start="339:24" pos:end="339:24">&amp;</operator><name pos:start="339:25" pos:end="339:31"><name pos:start="339:25" pos:end="339:25">s</name><operator pos:start="339:26" pos:end="339:27">-&gt;</operator><name pos:start="339:28" pos:end="339:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="341:5" pos:end="341:13">return <expr pos:start="341:12" pos:end="341:12"><literal type="number" pos:start="341:12" pos:end="341:12">0</literal></expr>;</return>



<label pos:start="345:1" pos:end="345:5"><name pos:start="345:1" pos:end="345:4">fail</name>:</label>

    <expr_stmt pos:start="347:5" pos:end="347:21"><expr pos:start="347:5" pos:end="347:20"><call pos:start="347:5" pos:end="347:20"><name pos:start="347:5" pos:end="347:10">g_free</name><argument_list pos:start="347:11" pos:end="347:20">(<argument pos:start="347:12" pos:end="347:19"><expr pos:start="347:12" pos:end="347:19"><name pos:start="347:12" pos:end="347:19"><name pos:start="347:12" pos:end="347:12">s</name><operator pos:start="347:13" pos:end="347:14">-&gt;</operator><name pos:start="347:15" pos:end="347:19">types</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:23"><expr pos:start="349:5" pos:end="349:22"><call pos:start="349:5" pos:end="349:22"><name pos:start="349:5" pos:end="349:10">g_free</name><argument_list pos:start="349:11" pos:end="349:22">(<argument pos:start="349:12" pos:end="349:21"><expr pos:start="349:12" pos:end="349:21"><name pos:start="349:12" pos:end="349:21"><name pos:start="349:12" pos:end="349:12">s</name><operator pos:start="349:13" pos:end="349:14">-&gt;</operator><name pos:start="349:15" pos:end="349:21">offsets</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:23"><expr pos:start="351:5" pos:end="351:22"><call pos:start="351:5" pos:end="351:22"><name pos:start="351:5" pos:end="351:10">g_free</name><argument_list pos:start="351:11" pos:end="351:22">(<argument pos:start="351:12" pos:end="351:21"><expr pos:start="351:12" pos:end="351:21"><name pos:start="351:12" pos:end="351:21"><name pos:start="351:12" pos:end="351:12">s</name><operator pos:start="351:13" pos:end="351:14">-&gt;</operator><name pos:start="351:15" pos:end="351:21">lengths</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:23"><expr pos:start="353:5" pos:end="353:22"><call pos:start="353:5" pos:end="353:22"><name pos:start="353:5" pos:end="353:10">g_free</name><argument_list pos:start="353:11" pos:end="353:22">(<argument pos:start="353:12" pos:end="353:21"><expr pos:start="353:12" pos:end="353:21"><name pos:start="353:12" pos:end="353:21"><name pos:start="353:12" pos:end="353:12">s</name><operator pos:start="353:13" pos:end="353:14">-&gt;</operator><name pos:start="353:15" pos:end="353:21">sectors</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:28"><expr pos:start="355:5" pos:end="355:27"><call pos:start="355:5" pos:end="355:27"><name pos:start="355:5" pos:end="355:10">g_free</name><argument_list pos:start="355:11" pos:end="355:27">(<argument pos:start="355:12" pos:end="355:26"><expr pos:start="355:12" pos:end="355:26"><name pos:start="355:12" pos:end="355:26"><name pos:start="355:12" pos:end="355:12">s</name><operator pos:start="355:13" pos:end="355:14">-&gt;</operator><name pos:start="355:15" pos:end="355:26">sectorcounts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="357:5" pos:end="357:36"><expr pos:start="357:5" pos:end="357:35"><call pos:start="357:5" pos:end="357:35"><name pos:start="357:5" pos:end="357:14">qemu_vfree</name><argument_list pos:start="357:15" pos:end="357:35">(<argument pos:start="357:16" pos:end="357:34"><expr pos:start="357:16" pos:end="357:34"><name pos:start="357:16" pos:end="357:34"><name pos:start="357:16" pos:end="357:16">s</name><operator pos:start="357:17" pos:end="357:18">-&gt;</operator><name pos:start="357:19" pos:end="357:34">compressed_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="359:5" pos:end="359:38"><expr pos:start="359:5" pos:end="359:37"><call pos:start="359:5" pos:end="359:37"><name pos:start="359:5" pos:end="359:14">qemu_vfree</name><argument_list pos:start="359:15" pos:end="359:37">(<argument pos:start="359:16" pos:end="359:36"><expr pos:start="359:16" pos:end="359:36"><name pos:start="359:16" pos:end="359:36"><name pos:start="359:16" pos:end="359:16">s</name><operator pos:start="359:17" pos:end="359:18">-&gt;</operator><name pos:start="359:19" pos:end="359:36">uncompressed_chunk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="361:5" pos:end="361:15">return <expr pos:start="361:12" pos:end="361:14"><name pos:start="361:12" pos:end="361:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
