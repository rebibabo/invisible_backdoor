<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/64.c" pos:tabs="8"><function pos:start="1:1" pos:end="287:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">qcow2_read_extensions</name><parameter_list pos:start="1:33" pos:end="5:57">(<parameter pos:start="1:34" pos:end="1:53"><decl pos:start="1:34" pos:end="1:53"><type pos:start="1:34" pos:end="1:53"><name pos:start="1:34" pos:end="1:49">BlockDriverState</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:53">bs</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:76"><decl pos:start="1:56" pos:end="1:76"><type pos:start="1:56" pos:end="1:76"><name pos:start="1:56" pos:end="1:63">uint64_t</name></type> <name pos:start="1:65" pos:end="1:76">start_offset</name></decl></parameter>,

                                 <parameter pos:start="3:34" pos:end="3:52"><decl pos:start="3:34" pos:end="3:52"><type pos:start="3:34" pos:end="3:52"><name pos:start="3:34" pos:end="3:41">uint64_t</name></type> <name pos:start="3:43" pos:end="3:52">end_offset</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:76"><decl pos:start="3:55" pos:end="3:76"><type pos:start="3:55" pos:end="3:76"><name pos:start="3:55" pos:end="3:58">void</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier><modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:76">p_feature_table</name></decl></parameter>,

                                 <parameter pos:start="5:34" pos:end="5:42"><decl pos:start="5:34" pos:end="5:42"><type pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:36">int</name></type> <name pos:start="5:38" pos:end="5:42">flags</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:56"><decl pos:start="5:45" pos:end="5:56"><type pos:start="5:45" pos:end="5:56"><name pos:start="5:45" pos:end="5:49">Error</name> <modifier pos:start="5:51" pos:end="5:51">*</modifier><modifier pos:start="5:52" pos:end="5:52">*</modifier></type><name pos:start="5:53" pos:end="5:56">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="287:1">{<block_content pos:start="9:5" pos:end="285:13">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">BDRVQcow2State</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:21">s</name> <init pos:start="9:23" pos:end="9:34">= <expr pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:34"><name pos:start="9:25" pos:end="9:26">bs</name><operator pos:start="9:27" pos:end="9:28">-&gt;</operator><name pos:start="9:29" pos:end="9:34">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:17">QCowExtension</name></type> <name pos:start="11:19" pos:end="11:21">ext</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:19">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="20:0"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>



<cpp:ifdef pos:start="19:1" pos:end="19:16">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:16">DEBUG_EXT</name></cpp:ifdef>

    <expr_stmt pos:start="21:5" pos:end="24:0"><expr pos:start="21:5" pos:end="21:82"><call pos:start="21:5" pos:end="21:82"><name pos:start="21:5" pos:end="21:10">printf</name><argument_list pos:start="21:11" pos:end="21:82">(<argument pos:start="21:12" pos:end="21:55"><expr pos:start="21:12" pos:end="21:55"><literal type="string" pos:start="21:12" pos:end="21:55">"qcow2_read_extensions: start=%ld end=%ld\n"</literal></expr></argument>, <argument pos:start="21:58" pos:end="21:69"><expr pos:start="21:58" pos:end="21:69"><name pos:start="21:58" pos:end="21:69">start_offset</name></expr></argument>, <argument pos:start="21:72" pos:end="21:81"><expr pos:start="21:72" pos:end="21:81"><name pos:start="21:72" pos:end="21:81">end_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="23:1" pos:end="23:6">#<cpp:directive pos:start="23:2" pos:end="23:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:10">offset</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <name pos:start="25:14" pos:end="25:25">start_offset</name></expr>;</expr_stmt>

    <while pos:start="27:5" pos:end="281:5">while <condition pos:start="27:11" pos:end="27:31">(<expr pos:start="27:12" pos:end="27:30"><name pos:start="27:12" pos:end="27:17">offset</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:30">end_offset</name></expr>)</condition> <block pos:start="27:33" pos:end="281:5">{<block_content pos:start="35:9" pos:end="279:39">



<cpp:ifdef pos:start="31:1" pos:end="31:16">#<cpp:directive pos:start="31:2" pos:end="31:6">ifdef</cpp:directive> <name pos:start="31:8" pos:end="31:16">DEBUG_EXT</name></cpp:ifdef>

        <comment type="block" pos:start="33:9" pos:end="33:26">/* Sanity check */</comment>

        <if_stmt pos:start="35:9" pos:end="37:76"><if pos:start="35:9" pos:end="37:76">if <condition pos:start="35:12" pos:end="35:37">(<expr pos:start="35:13" pos:end="35:36"><name pos:start="35:13" pos:end="35:18">offset</name> <operator pos:start="35:20" pos:end="35:20">&gt;</operator> <name pos:start="35:22" pos:end="35:36"><name pos:start="35:22" pos:end="35:22">s</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:36">cluster_size</name></name></expr>)</condition><block type="pseudo" pos:start="37:13" pos:end="37:76"><block_content pos:start="37:13" pos:end="37:76">

            <expr_stmt pos:start="37:13" pos:end="37:76"><expr pos:start="37:13" pos:end="37:75"><call pos:start="37:13" pos:end="37:75"><name pos:start="37:13" pos:end="37:18">printf</name><argument_list pos:start="37:19" pos:end="37:75">(<argument pos:start="37:20" pos:end="37:66"><expr pos:start="37:20" pos:end="37:66"><literal type="string" pos:start="37:20" pos:end="37:66">"qcow2_read_extension: suspicious offset %lu\n"</literal></expr></argument>, <argument pos:start="37:69" pos:end="37:74"><expr pos:start="37:69" pos:end="37:74"><name pos:start="37:69" pos:end="37:74">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <expr_stmt pos:start="41:9" pos:end="44:0"><expr pos:start="41:9" pos:end="41:76"><call pos:start="41:9" pos:end="41:76"><name pos:start="41:9" pos:end="41:14">printf</name><argument_list pos:start="41:15" pos:end="41:76">(<argument pos:start="41:16" pos:end="41:67"><expr pos:start="41:16" pos:end="41:67"><literal type="string" pos:start="41:16" pos:end="41:67">"attempting to read extended header in offset %lu\n"</literal></expr></argument>, <argument pos:start="41:70" pos:end="41:75"><expr pos:start="41:70" pos:end="41:75"><name pos:start="41:70" pos:end="41:75">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>



        <expr_stmt pos:start="47:9" pos:end="47:62"><expr pos:start="47:9" pos:end="47:61"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:61"><name pos:start="47:15" pos:end="47:24">bdrv_pread</name><argument_list pos:start="47:25" pos:end="47:61">(<argument pos:start="47:26" pos:end="47:33"><expr pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:33"><name pos:start="47:26" pos:end="47:27">bs</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:33">file</name></name></expr></argument>, <argument pos:start="47:36" pos:end="47:41"><expr pos:start="47:36" pos:end="47:41"><name pos:start="47:36" pos:end="47:41">offset</name></expr></argument>, <argument pos:start="47:44" pos:end="47:47"><expr pos:start="47:44" pos:end="47:47"><operator pos:start="47:44" pos:end="47:44">&amp;</operator><name pos:start="47:45" pos:end="47:47">ext</name></expr></argument>, <argument pos:start="47:50" pos:end="47:60"><expr pos:start="47:50" pos:end="47:60"><sizeof pos:start="47:50" pos:end="47:60">sizeof<argument_list pos:start="47:56" pos:end="47:60">(<argument pos:start="47:57" pos:end="47:59"><expr pos:start="47:57" pos:end="47:59"><name pos:start="47:57" pos:end="47:59">ext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="57:9"><if pos:start="49:9" pos:end="57:9">if <condition pos:start="49:12" pos:end="49:20">(<expr pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:15">ret</name> <operator pos:start="49:17" pos:end="49:17">&lt;</operator> <literal type="number" pos:start="49:19" pos:end="49:19">0</literal></expr>)</condition> <block pos:start="49:22" pos:end="57:9">{<block_content pos:start="51:13" pos:end="55:21">

            <expr_stmt pos:start="51:13" pos:end="53:72"><expr pos:start="51:13" pos:end="53:71"><call pos:start="51:13" pos:end="53:71"><name pos:start="51:13" pos:end="51:28">error_setg_errno</name><argument_list pos:start="51:29" pos:end="53:71">(<argument pos:start="51:30" pos:end="51:33"><expr pos:start="51:30" pos:end="51:33"><name pos:start="51:30" pos:end="51:33">errp</name></expr></argument>, <argument pos:start="51:36" pos:end="51:39"><expr pos:start="51:36" pos:end="51:39"><operator pos:start="51:36" pos:end="51:36">-</operator><name pos:start="51:37" pos:end="51:39">ret</name></expr></argument>, <argument pos:start="51:42" pos:end="53:62"><expr pos:start="51:42" pos:end="53:62"><literal type="string" pos:start="51:42" pos:end="51:72">"qcow2_read_extension: ERROR: "</literal>

                             <literal type="string" pos:start="53:30" pos:end="53:55">"pread fail from offset %"</literal> <name pos:start="53:57" pos:end="53:62">PRIu64</name></expr></argument>, <argument pos:start="53:65" pos:end="53:70"><expr pos:start="53:65" pos:end="53:70"><name pos:start="53:65" pos:end="53:70">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="55:13" pos:end="55:21">return <expr pos:start="55:20" pos:end="55:20"><literal type="number" pos:start="55:20" pos:end="55:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:33"><expr pos:start="59:9" pos:end="59:32"><call pos:start="59:9" pos:end="59:32"><name pos:start="59:9" pos:end="59:20">be32_to_cpus</name><argument_list pos:start="59:21" pos:end="59:32">(<argument pos:start="59:22" pos:end="59:31"><expr pos:start="59:22" pos:end="59:31"><operator pos:start="59:22" pos:end="59:22">&amp;</operator><name pos:start="59:23" pos:end="59:31"><name pos:start="59:23" pos:end="59:25">ext</name><operator pos:start="59:26" pos:end="59:26">.</operator><name pos:start="59:27" pos:end="59:31">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:31"><expr pos:start="61:9" pos:end="61:30"><call pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:20">be32_to_cpus</name><argument_list pos:start="61:21" pos:end="61:30">(<argument pos:start="61:22" pos:end="61:29"><expr pos:start="61:22" pos:end="61:29"><operator pos:start="61:22" pos:end="61:22">&amp;</operator><name pos:start="61:23" pos:end="61:29"><name pos:start="61:23" pos:end="61:25">ext</name><operator pos:start="61:26" pos:end="61:26">.</operator><name pos:start="61:27" pos:end="61:29">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="66:0"><expr pos:start="63:9" pos:end="63:29"><name pos:start="63:9" pos:end="63:14">offset</name> <operator pos:start="63:16" pos:end="63:17">+=</operator> <sizeof pos:start="63:19" pos:end="63:29">sizeof<argument_list pos:start="63:25" pos:end="63:29">(<argument pos:start="63:26" pos:end="63:28"><expr pos:start="63:26" pos:end="63:28"><name pos:start="63:26" pos:end="63:28">ext</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<cpp:ifdef pos:start="65:1" pos:end="65:16">#<cpp:directive pos:start="65:2" pos:end="65:6">ifdef</cpp:directive> <name pos:start="65:8" pos:end="65:16">DEBUG_EXT</name></cpp:ifdef>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:47"><call pos:start="67:9" pos:end="67:47"><name pos:start="67:9" pos:end="67:14">printf</name><argument_list pos:start="67:15" pos:end="67:47">(<argument pos:start="67:16" pos:end="67:35"><expr pos:start="67:16" pos:end="67:35"><literal type="string" pos:start="67:16" pos:end="67:35">"ext.magic = 0x%x\n"</literal></expr></argument>, <argument pos:start="67:38" pos:end="67:46"><expr pos:start="67:38" pos:end="67:46"><name pos:start="67:38" pos:end="67:46"><name pos:start="67:38" pos:end="67:40">ext</name><operator pos:start="67:41" pos:end="67:41">.</operator><name pos:start="67:42" pos:end="67:46">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="69:1" pos:end="69:6">#<cpp:directive pos:start="69:2" pos:end="69:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:65">(<expr pos:start="71:13" pos:end="71:64"><name pos:start="71:13" pos:end="71:18">offset</name> <operator pos:start="71:20" pos:end="71:20">&gt;</operator> <name pos:start="71:22" pos:end="71:31">end_offset</name> <operator pos:start="71:33" pos:end="71:34">||</operator> <name pos:start="71:36" pos:end="71:42"><name pos:start="71:36" pos:end="71:38">ext</name><operator pos:start="71:39" pos:end="71:39">.</operator><name pos:start="71:40" pos:end="71:42">len</name></name> <operator pos:start="71:44" pos:end="71:44">&gt;</operator> <name pos:start="71:46" pos:end="71:55">end_offset</name> <operator pos:start="71:57" pos:end="71:57">-</operator> <name pos:start="71:59" pos:end="71:64">offset</name></expr>)</condition> <block pos:start="71:67" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:27">

            <expr_stmt pos:start="73:13" pos:end="73:59"><expr pos:start="73:13" pos:end="73:58"><call pos:start="73:13" pos:end="73:58"><name pos:start="73:13" pos:end="73:22">error_setg</name><argument_list pos:start="73:23" pos:end="73:58">(<argument pos:start="73:24" pos:end="73:27"><expr pos:start="73:24" pos:end="73:27"><name pos:start="73:24" pos:end="73:27">errp</name></expr></argument>, <argument pos:start="73:30" pos:end="73:57"><expr pos:start="73:30" pos:end="73:57"><literal type="string" pos:start="73:30" pos:end="73:57">"Header extension too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:27">return <expr pos:start="75:20" pos:end="75:26"><operator pos:start="75:20" pos:end="75:20">-</operator><name pos:start="75:21" pos:end="75:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="81:9" pos:end="275:9">switch <condition pos:start="81:16" pos:end="81:26">(<expr pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:25"><name pos:start="81:17" pos:end="81:19">ext</name><operator pos:start="81:20" pos:end="81:20">.</operator><name pos:start="81:21" pos:end="81:25">magic</name></name></expr>)</condition> <block pos:start="81:28" pos:end="275:9">{<block_content pos:start="83:9" pos:end="273:18">

        <case pos:start="83:9" pos:end="83:33">case <expr pos:start="83:14" pos:end="83:32"><name pos:start="83:14" pos:end="83:32">QCOW2_EXT_MAGIC_END</name></expr>:</case>

            <return pos:start="85:13" pos:end="85:21">return <expr pos:start="85:20" pos:end="85:20"><literal type="number" pos:start="85:20" pos:end="85:20">0</literal></expr>;</return>



        <case pos:start="89:9" pos:end="89:44">case <expr pos:start="89:14" pos:end="89:43"><name pos:start="89:14" pos:end="89:43">QCOW2_EXT_MAGIC_BACKING_FORMAT</name></expr>:</case>

            <if_stmt pos:start="91:13" pos:end="101:13"><if pos:start="91:13" pos:end="101:13">if <condition pos:start="91:16" pos:end="91:54">(<expr pos:start="91:17" pos:end="91:53"><name pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:19">ext</name><operator pos:start="91:20" pos:end="91:20">.</operator><name pos:start="91:21" pos:end="91:23">len</name></name> <operator pos:start="91:25" pos:end="91:26">&gt;=</operator> <sizeof pos:start="91:28" pos:end="91:53">sizeof<argument_list pos:start="91:34" pos:end="91:53">(<argument pos:start="91:35" pos:end="91:52"><expr pos:start="91:35" pos:end="91:52"><name pos:start="91:35" pos:end="91:52"><name pos:start="91:35" pos:end="91:36">bs</name><operator pos:start="91:37" pos:end="91:38">-&gt;</operator><name pos:start="91:39" pos:end="91:52">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="91:56" pos:end="101:13">{<block_content pos:start="93:17" pos:end="99:25">

                <expr_stmt pos:start="93:17" pos:end="97:55"><expr pos:start="93:17" pos:end="97:54"><call pos:start="93:17" pos:end="97:54"><name pos:start="93:17" pos:end="93:26">error_setg</name><argument_list pos:start="93:27" pos:end="97:54">(<argument pos:start="93:28" pos:end="93:31"><expr pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:31">errp</name></expr></argument>, <argument pos:start="93:34" pos:end="95:47"><expr pos:start="93:34" pos:end="95:47"><literal type="string" pos:start="93:34" pos:end="93:67">"ERROR: ext_backing_format: len=%"</literal> <name pos:start="93:69" pos:end="93:74">PRIu32</name>

                           <literal type="string" pos:start="95:28" pos:end="95:47">" too large (&gt;=%zu)"</literal></expr></argument>, <argument pos:start="95:50" pos:end="95:56"><expr pos:start="95:50" pos:end="95:56"><name pos:start="95:50" pos:end="95:56"><name pos:start="95:50" pos:end="95:52">ext</name><operator pos:start="95:53" pos:end="95:53">.</operator><name pos:start="95:54" pos:end="95:56">len</name></name></expr></argument>,

                           <argument pos:start="97:28" pos:end="97:53"><expr pos:start="97:28" pos:end="97:53"><sizeof pos:start="97:28" pos:end="97:53">sizeof<argument_list pos:start="97:34" pos:end="97:53">(<argument pos:start="97:35" pos:end="97:52"><expr pos:start="97:35" pos:end="97:52"><name pos:start="97:35" pos:end="97:52"><name pos:start="97:35" pos:end="97:36">bs</name><operator pos:start="97:37" pos:end="97:38">-&gt;</operator><name pos:start="97:39" pos:end="97:52">backing_format</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="99:17" pos:end="99:25">return <expr pos:start="99:24" pos:end="99:24"><literal type="number" pos:start="99:24" pos:end="99:24">2</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:76"><expr pos:start="103:13" pos:end="103:75"><name pos:start="103:13" pos:end="103:15">ret</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <call pos:start="103:19" pos:end="103:75"><name pos:start="103:19" pos:end="103:28">bdrv_pread</name><argument_list pos:start="103:29" pos:end="103:75">(<argument pos:start="103:30" pos:end="103:37"><expr pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:37"><name pos:start="103:30" pos:end="103:31">bs</name><operator pos:start="103:32" pos:end="103:33">-&gt;</operator><name pos:start="103:34" pos:end="103:37">file</name></name></expr></argument>, <argument pos:start="103:40" pos:end="103:45"><expr pos:start="103:40" pos:end="103:45"><name pos:start="103:40" pos:end="103:45">offset</name></expr></argument>, <argument pos:start="103:48" pos:end="103:65"><expr pos:start="103:48" pos:end="103:65"><name pos:start="103:48" pos:end="103:65"><name pos:start="103:48" pos:end="103:49">bs</name><operator pos:start="103:50" pos:end="103:51">-&gt;</operator><name pos:start="103:52" pos:end="103:65">backing_format</name></name></expr></argument>, <argument pos:start="103:68" pos:end="103:74"><expr pos:start="103:68" pos:end="103:74"><name pos:start="103:68" pos:end="103:74"><name pos:start="103:68" pos:end="103:70">ext</name><operator pos:start="103:71" pos:end="103:71">.</operator><name pos:start="103:72" pos:end="103:74">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="105:13" pos:end="113:13"><if pos:start="105:13" pos:end="113:13">if <condition pos:start="105:16" pos:end="105:24">(<expr pos:start="105:17" pos:end="105:23"><name pos:start="105:17" pos:end="105:19">ret</name> <operator pos:start="105:21" pos:end="105:21">&lt;</operator> <literal type="number" pos:start="105:23" pos:end="105:23">0</literal></expr>)</condition> <block pos:start="105:26" pos:end="113:13">{<block_content pos:start="107:17" pos:end="111:25">

                <expr_stmt pos:start="107:17" pos:end="109:63"><expr pos:start="107:17" pos:end="109:62"><call pos:start="107:17" pos:end="109:62"><name pos:start="107:17" pos:end="107:32">error_setg_errno</name><argument_list pos:start="107:33" pos:end="109:62">(<argument pos:start="107:34" pos:end="107:37"><expr pos:start="107:34" pos:end="107:37"><name pos:start="107:34" pos:end="107:37">errp</name></expr></argument>, <argument pos:start="107:40" pos:end="107:43"><expr pos:start="107:40" pos:end="107:43"><operator pos:start="107:40" pos:end="107:40">-</operator><name pos:start="107:41" pos:end="107:43">ret</name></expr></argument>, <argument pos:start="107:46" pos:end="109:61"><expr pos:start="107:46" pos:end="109:61"><literal type="string" pos:start="107:46" pos:end="107:74">"ERROR: ext_backing_format: "</literal>

                                 <literal type="string" pos:start="109:34" pos:end="109:61">"Could not read format name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="111:17" pos:end="111:25">return <expr pos:start="111:24" pos:end="111:24"><literal type="number" pos:start="111:24" pos:end="111:24">3</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="115:13" pos:end="115:47"><expr pos:start="115:13" pos:end="115:46"><name pos:start="115:13" pos:end="115:39"><name pos:start="115:13" pos:end="115:14">bs</name><operator pos:start="115:15" pos:end="115:16">-&gt;</operator><name pos:start="115:17" pos:end="115:30">backing_format</name><index pos:start="115:31" pos:end="115:39">[<expr pos:start="115:32" pos:end="115:38"><name pos:start="115:32" pos:end="115:38"><name pos:start="115:32" pos:end="115:34">ext</name><operator pos:start="115:35" pos:end="115:35">.</operator><name pos:start="115:36" pos:end="115:38">len</name></name></expr>]</index></name> <operator pos:start="115:41" pos:end="115:41">=</operator> <literal type="char" pos:start="115:43" pos:end="115:46">'\0'</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="117:13" pos:end="120:0"><expr pos:start="117:13" pos:end="117:66"><name pos:start="117:13" pos:end="117:35"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:35">image_backing_format</name></name> <operator pos:start="117:37" pos:end="117:37">=</operator> <call pos:start="117:39" pos:end="117:66"><name pos:start="117:39" pos:end="117:46">g_strdup</name><argument_list pos:start="117:47" pos:end="117:66">(<argument pos:start="117:48" pos:end="117:65"><expr pos:start="117:48" pos:end="117:65"><name pos:start="117:48" pos:end="117:65"><name pos:start="117:48" pos:end="117:49">bs</name><operator pos:start="117:50" pos:end="117:51">-&gt;</operator><name pos:start="117:52" pos:end="117:65">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="119:1" pos:end="119:16">#<cpp:directive pos:start="119:2" pos:end="119:6">ifdef</cpp:directive> <name pos:start="119:8" pos:end="119:16">DEBUG_EXT</name></cpp:ifdef>

            <expr_stmt pos:start="121:13" pos:end="124:0"><expr pos:start="121:13" pos:end="121:74"><call pos:start="121:13" pos:end="121:74"><name pos:start="121:13" pos:end="121:18">printf</name><argument_list pos:start="121:19" pos:end="121:74">(<argument pos:start="121:20" pos:end="121:53"><expr pos:start="121:20" pos:end="121:53"><literal type="string" pos:start="121:20" pos:end="121:53">"Qcow2: Got format extension %s\n"</literal></expr></argument>, <argument pos:start="121:56" pos:end="121:73"><expr pos:start="121:56" pos:end="121:73"><name pos:start="121:56" pos:end="121:73"><name pos:start="121:56" pos:end="121:57">bs</name><operator pos:start="121:58" pos:end="121:59">-&gt;</operator><name pos:start="121:60" pos:end="121:73">backing_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="123:1" pos:end="123:6">#<cpp:directive pos:start="123:2" pos:end="123:6">endif</cpp:directive></cpp:endif>

            <break pos:start="125:13" pos:end="125:18">break;</break>



        <case pos:start="129:9" pos:end="129:43">case <expr pos:start="129:14" pos:end="129:42"><name pos:start="129:14" pos:end="129:42">QCOW2_EXT_MAGIC_FEATURE_TABLE</name></expr>:</case>

            <if_stmt pos:start="131:13" pos:end="151:13"><if pos:start="131:13" pos:end="151:13">if <condition pos:start="131:16" pos:end="131:40">(<expr pos:start="131:17" pos:end="131:39"><name pos:start="131:17" pos:end="131:31">p_feature_table</name> <operator pos:start="131:33" pos:end="131:34">!=</operator> <name pos:start="131:36" pos:end="131:39">NULL</name></expr>)</condition> <block pos:start="131:42" pos:end="151:13">{<block_content pos:start="133:17" pos:end="149:49">

                <decl_stmt pos:start="133:17" pos:end="133:84"><decl pos:start="133:17" pos:end="133:83"><type pos:start="133:17" pos:end="133:21"><name pos:start="133:17" pos:end="133:20">void</name><modifier pos:start="133:21" pos:end="133:21">*</modifier></type> <name pos:start="133:23" pos:end="133:35">feature_table</name> <init pos:start="133:37" pos:end="133:83">= <expr pos:start="133:39" pos:end="133:83"><call pos:start="133:39" pos:end="133:83"><name pos:start="133:39" pos:end="133:47">g_malloc0</name><argument_list pos:start="133:48" pos:end="133:83">(<argument pos:start="133:49" pos:end="133:82"><expr pos:start="133:49" pos:end="133:82"><name pos:start="133:49" pos:end="133:55"><name pos:start="133:49" pos:end="133:51">ext</name><operator pos:start="133:52" pos:end="133:52">.</operator><name pos:start="133:53" pos:end="133:55">len</name></name> <operator pos:start="133:57" pos:end="133:57">+</operator> <literal type="number" pos:start="133:59" pos:end="133:59">2</literal> <operator pos:start="133:61" pos:end="133:61">*</operator> <sizeof pos:start="133:63" pos:end="133:82">sizeof<argument_list pos:start="133:69" pos:end="133:82">(<argument pos:start="133:70" pos:end="133:81"><expr pos:start="133:70" pos:end="133:81"><name pos:start="133:70" pos:end="133:81">Qcow2Feature</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="135:17" pos:end="135:76"><expr pos:start="135:17" pos:end="135:75"><name pos:start="135:17" pos:end="135:19">ret</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:75"><name pos:start="135:23" pos:end="135:32">bdrv_pread</name><argument_list pos:start="135:33" pos:end="135:75">(<argument pos:start="135:34" pos:end="135:41"><expr pos:start="135:34" pos:end="135:41"><name pos:start="135:34" pos:end="135:41"><name pos:start="135:34" pos:end="135:35">bs</name><operator pos:start="135:36" pos:end="135:37">-&gt;</operator><name pos:start="135:38" pos:end="135:41">file</name></name></expr></argument>, <argument pos:start="135:44" pos:end="135:49"><expr pos:start="135:44" pos:end="135:49"><name pos:start="135:44" pos:end="135:49">offset</name></expr></argument> , <argument pos:start="135:53" pos:end="135:65"><expr pos:start="135:53" pos:end="135:65"><name pos:start="135:53" pos:end="135:65">feature_table</name></expr></argument>, <argument pos:start="135:68" pos:end="135:74"><expr pos:start="135:68" pos:end="135:74"><name pos:start="135:68" pos:end="135:74"><name pos:start="135:68" pos:end="135:70">ext</name><operator pos:start="135:71" pos:end="135:71">.</operator><name pos:start="135:72" pos:end="135:74">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="137:17" pos:end="145:17"><if pos:start="137:17" pos:end="145:17">if <condition pos:start="137:20" pos:end="137:28">(<expr pos:start="137:21" pos:end="137:27"><name pos:start="137:21" pos:end="137:23">ret</name> <operator pos:start="137:25" pos:end="137:25">&lt;</operator> <literal type="number" pos:start="137:27" pos:end="137:27">0</literal></expr>)</condition> <block pos:start="137:30" pos:end="145:17">{<block_content pos:start="139:21" pos:end="143:31">

                    <expr_stmt pos:start="139:21" pos:end="141:61"><expr pos:start="139:21" pos:end="141:60"><call pos:start="139:21" pos:end="141:60"><name pos:start="139:21" pos:end="139:36">error_setg_errno</name><argument_list pos:start="139:37" pos:end="141:60">(<argument pos:start="139:38" pos:end="139:41"><expr pos:start="139:38" pos:end="139:41"><name pos:start="139:38" pos:end="139:41">errp</name></expr></argument>, <argument pos:start="139:44" pos:end="139:47"><expr pos:start="139:44" pos:end="139:47"><operator pos:start="139:44" pos:end="139:44">-</operator><name pos:start="139:45" pos:end="139:47">ret</name></expr></argument>, <argument pos:start="139:50" pos:end="141:59"><expr pos:start="139:50" pos:end="141:59"><literal type="string" pos:start="139:50" pos:end="139:77">"ERROR: ext_feature_table: "</literal>

                                     <literal type="string" pos:start="141:38" pos:end="141:59">"Could not read table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="143:21" pos:end="143:31">return <expr pos:start="143:28" pos:end="143:30"><name pos:start="143:28" pos:end="143:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="149:17" pos:end="149:49"><expr pos:start="149:17" pos:end="149:48"><operator pos:start="149:17" pos:end="149:17">*</operator><name pos:start="149:18" pos:end="149:32">p_feature_table</name> <operator pos:start="149:34" pos:end="149:34">=</operator> <name pos:start="149:36" pos:end="149:48">feature_table</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>



        <case pos:start="157:9" pos:end="157:43">case <expr pos:start="157:14" pos:end="157:42"><name pos:start="157:14" pos:end="157:42">QCOW2_EXT_MAGIC_CRYPTO_HEADER</name></expr>:</case> <block pos:start="157:45" pos:end="235:9">{<block_content pos:start="159:13" pos:end="233:13">

            <decl_stmt pos:start="159:13" pos:end="159:36"><decl pos:start="159:13" pos:end="159:35"><type pos:start="159:13" pos:end="159:24"><name pos:start="159:13" pos:end="159:20">unsigned</name> <name pos:start="159:22" pos:end="159:24">int</name></type> <name pos:start="159:26" pos:end="159:31">cflags</name> <init pos:start="159:33" pos:end="159:35">= <expr pos:start="159:35" pos:end="159:35"><literal type="number" pos:start="159:35" pos:end="159:35">0</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="161:13" pos:end="169:13"><if pos:start="161:13" pos:end="169:13">if <condition pos:start="161:16" pos:end="161:58">(<expr pos:start="161:17" pos:end="161:57"><name pos:start="161:17" pos:end="161:38"><name pos:start="161:17" pos:end="161:17">s</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:38">crypt_method_header</name></name> <operator pos:start="161:40" pos:end="161:41">!=</operator> <name pos:start="161:43" pos:end="161:57">QCOW_CRYPT_LUKS</name></expr>)</condition> <block pos:start="161:60" pos:end="169:13">{<block_content pos:start="163:17" pos:end="167:31">

                <expr_stmt pos:start="163:17" pos:end="165:67"><expr pos:start="163:17" pos:end="165:66"><call pos:start="163:17" pos:end="165:66"><name pos:start="163:17" pos:end="163:26">error_setg</name><argument_list pos:start="163:27" pos:end="165:66">(<argument pos:start="163:28" pos:end="163:31"><expr pos:start="163:28" pos:end="163:31"><name pos:start="163:28" pos:end="163:31">errp</name></expr></argument>, <argument pos:start="163:34" pos:end="165:65"><expr pos:start="163:34" pos:end="165:65"><literal type="string" pos:start="163:34" pos:end="163:64">"CRYPTO header extension only "</literal>

                           <literal type="string" pos:start="165:28" pos:end="165:65">"expected with LUKS encryption method"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="167:17" pos:end="167:31">return <expr pos:start="167:24" pos:end="167:30"><operator pos:start="167:24" pos:end="167:24">-</operator><name pos:start="167:25" pos:end="167:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="171:13" pos:end="181:13"><if pos:start="171:13" pos:end="181:13">if <condition pos:start="171:16" pos:end="171:62">(<expr pos:start="171:17" pos:end="171:61"><name pos:start="171:17" pos:end="171:23"><name pos:start="171:17" pos:end="171:19">ext</name><operator pos:start="171:20" pos:end="171:20">.</operator><name pos:start="171:21" pos:end="171:23">len</name></name> <operator pos:start="171:25" pos:end="171:26">!=</operator> <sizeof pos:start="171:28" pos:end="171:61">sizeof<argument_list pos:start="171:34" pos:end="171:61">(<argument pos:start="171:35" pos:end="171:60"><expr pos:start="171:35" pos:end="171:60"><name pos:start="171:35" pos:end="171:60">Qcow2CryptoHeaderExtension</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="171:64" pos:end="181:13">{<block_content pos:start="173:17" pos:end="179:31">

                <expr_stmt pos:start="173:17" pos:end="177:63"><expr pos:start="173:17" pos:end="177:62"><call pos:start="173:17" pos:end="177:62"><name pos:start="173:17" pos:end="173:26">error_setg</name><argument_list pos:start="173:27" pos:end="177:62">(<argument pos:start="173:28" pos:end="173:31"><expr pos:start="173:28" pos:end="173:31"><name pos:start="173:28" pos:end="173:31">errp</name></expr></argument>, <argument pos:start="173:34" pos:end="175:50"><expr pos:start="173:34" pos:end="175:50"><literal type="string" pos:start="173:34" pos:end="173:68">"CRYPTO header extension size %u, "</literal>

                           <literal type="string" pos:start="175:28" pos:end="175:50">"but expected size %zu"</literal></expr></argument>, <argument pos:start="175:53" pos:end="175:59"><expr pos:start="175:53" pos:end="175:59"><name pos:start="175:53" pos:end="175:59"><name pos:start="175:53" pos:end="175:55">ext</name><operator pos:start="175:56" pos:end="175:56">.</operator><name pos:start="175:57" pos:end="175:59">len</name></name></expr></argument>,

                           <argument pos:start="177:28" pos:end="177:61"><expr pos:start="177:28" pos:end="177:61"><sizeof pos:start="177:28" pos:end="177:61">sizeof<argument_list pos:start="177:34" pos:end="177:61">(<argument pos:start="177:35" pos:end="177:60"><expr pos:start="177:35" pos:end="177:60"><name pos:start="177:35" pos:end="177:60">Qcow2CryptoHeaderExtension</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="179:17" pos:end="179:31">return <expr pos:start="179:24" pos:end="179:30"><operator pos:start="179:24" pos:end="179:24">-</operator><name pos:start="179:25" pos:end="179:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="185:13" pos:end="185:75"><expr pos:start="185:13" pos:end="185:74"><name pos:start="185:13" pos:end="185:15">ret</name> <operator pos:start="185:17" pos:end="185:17">=</operator> <call pos:start="185:19" pos:end="185:74"><name pos:start="185:19" pos:end="185:28">bdrv_pread</name><argument_list pos:start="185:29" pos:end="185:74">(<argument pos:start="185:30" pos:end="185:37"><expr pos:start="185:30" pos:end="185:37"><name pos:start="185:30" pos:end="185:37"><name pos:start="185:30" pos:end="185:31">bs</name><operator pos:start="185:32" pos:end="185:33">-&gt;</operator><name pos:start="185:34" pos:end="185:37">file</name></name></expr></argument>, <argument pos:start="185:40" pos:end="185:45"><expr pos:start="185:40" pos:end="185:45"><name pos:start="185:40" pos:end="185:45">offset</name></expr></argument>, <argument pos:start="185:48" pos:end="185:64"><expr pos:start="185:48" pos:end="185:64"><operator pos:start="185:48" pos:end="185:48">&amp;</operator><name pos:start="185:49" pos:end="185:64"><name pos:start="185:49" pos:end="185:49">s</name><operator pos:start="185:50" pos:end="185:51">-&gt;</operator><name pos:start="185:52" pos:end="185:64">crypto_header</name></name></expr></argument>, <argument pos:start="185:67" pos:end="185:73"><expr pos:start="185:67" pos:end="185:73"><name pos:start="185:67" pos:end="185:73"><name pos:start="185:67" pos:end="185:69">ext</name><operator pos:start="185:70" pos:end="185:70">.</operator><name pos:start="185:71" pos:end="185:73">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="187:13" pos:end="195:13"><if pos:start="187:13" pos:end="195:13">if <condition pos:start="187:16" pos:end="187:24">(<expr pos:start="187:17" pos:end="187:23"><name pos:start="187:17" pos:end="187:19">ret</name> <operator pos:start="187:21" pos:end="187:21">&lt;</operator> <literal type="number" pos:start="187:23" pos:end="187:23">0</literal></expr>)</condition> <block pos:start="187:26" pos:end="195:13">{<block_content pos:start="189:17" pos:end="193:27">

                <expr_stmt pos:start="189:17" pos:end="191:75"><expr pos:start="189:17" pos:end="191:74"><call pos:start="189:17" pos:end="191:74"><name pos:start="189:17" pos:end="189:32">error_setg_errno</name><argument_list pos:start="189:33" pos:end="191:74">(<argument pos:start="189:34" pos:end="189:37"><expr pos:start="189:34" pos:end="189:37"><name pos:start="189:34" pos:end="189:37">errp</name></expr></argument>, <argument pos:start="189:40" pos:end="189:43"><expr pos:start="189:40" pos:end="189:43"><operator pos:start="189:40" pos:end="189:40">-</operator><name pos:start="189:41" pos:end="189:43">ret</name></expr></argument>,

                                 <argument pos:start="191:34" pos:end="191:73"><expr pos:start="191:34" pos:end="191:73"><literal type="string" pos:start="191:34" pos:end="191:73">"Unable to read CRYPTO header extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="193:17" pos:end="193:27">return <expr pos:start="193:24" pos:end="193:26"><name pos:start="193:24" pos:end="193:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:51"><expr pos:start="197:13" pos:end="197:50"><call pos:start="197:13" pos:end="197:50"><name pos:start="197:13" pos:end="197:24">be64_to_cpus</name><argument_list pos:start="197:25" pos:end="197:50">(<argument pos:start="197:26" pos:end="197:49"><expr pos:start="197:26" pos:end="197:49"><operator pos:start="197:26" pos:end="197:26">&amp;</operator><name pos:start="197:27" pos:end="197:49"><name pos:start="197:27" pos:end="197:27">s</name><operator pos:start="197:28" pos:end="197:29">-&gt;</operator><name pos:start="197:30" pos:end="197:42">crypto_header</name><operator pos:start="197:43" pos:end="197:43">.</operator><name pos:start="197:44" pos:end="197:49">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="199:13" pos:end="199:51"><expr pos:start="199:13" pos:end="199:50"><call pos:start="199:13" pos:end="199:50"><name pos:start="199:13" pos:end="199:24">be64_to_cpus</name><argument_list pos:start="199:25" pos:end="199:50">(<argument pos:start="199:26" pos:end="199:49"><expr pos:start="199:26" pos:end="199:49"><operator pos:start="199:26" pos:end="199:26">&amp;</operator><name pos:start="199:27" pos:end="199:49"><name pos:start="199:27" pos:end="199:27">s</name><operator pos:start="199:28" pos:end="199:29">-&gt;</operator><name pos:start="199:30" pos:end="199:42">crypto_header</name><operator pos:start="199:43" pos:end="199:43">.</operator><name pos:start="199:44" pos:end="199:49">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="203:13" pos:end="213:13"><if pos:start="203:13" pos:end="213:13">if <condition pos:start="203:16" pos:end="203:65">(<expr pos:start="203:17" pos:end="203:64"><operator pos:start="203:17" pos:end="203:17">(</operator><name pos:start="203:18" pos:end="203:40"><name pos:start="203:18" pos:end="203:18">s</name><operator pos:start="203:19" pos:end="203:20">-&gt;</operator><name pos:start="203:21" pos:end="203:33">crypto_header</name><operator pos:start="203:34" pos:end="203:34">.</operator><name pos:start="203:35" pos:end="203:40">offset</name></name> <operator pos:start="203:42" pos:end="203:42">%</operator> <name pos:start="203:44" pos:end="203:58"><name pos:start="203:44" pos:end="203:44">s</name><operator pos:start="203:45" pos:end="203:46">-&gt;</operator><name pos:start="203:47" pos:end="203:58">cluster_size</name></name><operator pos:start="203:59" pos:end="203:59">)</operator> <operator pos:start="203:61" pos:end="203:62">!=</operator> <literal type="number" pos:start="203:64" pos:end="203:64">0</literal></expr>)</condition> <block pos:start="203:67" pos:end="213:13">{<block_content pos:start="205:17" pos:end="211:31">

                <expr_stmt pos:start="205:17" pos:end="209:69"><expr pos:start="205:17" pos:end="209:68"><call pos:start="205:17" pos:end="209:68"><name pos:start="205:17" pos:end="205:26">error_setg</name><argument_list pos:start="205:27" pos:end="209:68">(<argument pos:start="205:28" pos:end="205:31"><expr pos:start="205:28" pos:end="205:31"><name pos:start="205:28" pos:end="205:31">errp</name></expr></argument>, <argument pos:start="205:34" pos:end="207:64"><expr pos:start="205:34" pos:end="207:64"><literal type="string" pos:start="205:34" pos:end="205:62">"Encryption header offset '%"</literal> <name pos:start="205:64" pos:end="205:69">PRIu64</name> <literal type="string" pos:start="205:71" pos:end="205:77">"' is "</literal>

                           <literal type="string" pos:start="207:28" pos:end="207:64">"not a multiple of cluster size '%u'"</literal></expr></argument>,

                           <argument pos:start="209:28" pos:end="209:50"><expr pos:start="209:28" pos:end="209:50"><name pos:start="209:28" pos:end="209:50"><name pos:start="209:28" pos:end="209:28">s</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:43">crypto_header</name><operator pos:start="209:44" pos:end="209:44">.</operator><name pos:start="209:45" pos:end="209:50">offset</name></name></expr></argument>, <argument pos:start="209:53" pos:end="209:67"><expr pos:start="209:53" pos:end="209:67"><name pos:start="209:53" pos:end="209:67"><name pos:start="209:53" pos:end="209:53">s</name><operator pos:start="209:54" pos:end="209:55">-&gt;</operator><name pos:start="209:56" pos:end="209:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="211:17" pos:end="211:31">return <expr pos:start="211:24" pos:end="211:30"><operator pos:start="211:24" pos:end="211:24">-</operator><name pos:start="211:25" pos:end="211:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="217:13" pos:end="221:13"><if pos:start="217:13" pos:end="221:13">if <condition pos:start="217:16" pos:end="217:37">(<expr pos:start="217:17" pos:end="217:36"><name pos:start="217:17" pos:end="217:21">flags</name> <operator pos:start="217:23" pos:end="217:23">&amp;</operator> <name pos:start="217:25" pos:end="217:36">BDRV_O_NO_IO</name></expr>)</condition> <block pos:start="217:39" pos:end="221:13">{<block_content pos:start="219:17" pos:end="219:51">

                <expr_stmt pos:start="219:17" pos:end="219:51"><expr pos:start="219:17" pos:end="219:50"><name pos:start="219:17" pos:end="219:22">cflags</name> <operator pos:start="219:24" pos:end="219:25">|=</operator> <name pos:start="219:27" pos:end="219:50">QCRYPTO_BLOCK_OPEN_NO_IO</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="223:13" pos:end="227:61"><expr pos:start="223:13" pos:end="227:60"><name pos:start="223:13" pos:end="223:21"><name pos:start="223:13" pos:end="223:13">s</name><operator pos:start="223:14" pos:end="223:15">-&gt;</operator><name pos:start="223:16" pos:end="223:21">crypto</name></name> <operator pos:start="223:23" pos:end="223:23">=</operator> <call pos:start="223:25" pos:end="227:60"><name pos:start="223:25" pos:end="223:42">qcrypto_block_open</name><argument_list pos:start="223:43" pos:end="227:60">(<argument pos:start="223:44" pos:end="223:57"><expr pos:start="223:44" pos:end="223:57"><name pos:start="223:44" pos:end="223:57"><name pos:start="223:44" pos:end="223:44">s</name><operator pos:start="223:45" pos:end="223:46">-&gt;</operator><name pos:start="223:47" pos:end="223:57">crypto_opts</name></name></expr></argument>, <argument pos:start="223:60" pos:end="223:69"><expr pos:start="223:60" pos:end="223:69"><literal type="string" pos:start="223:60" pos:end="223:69">"encrypt."</literal></expr></argument>,

                                           <argument pos:start="225:44" pos:end="225:69"><expr pos:start="225:44" pos:end="225:69"><name pos:start="225:44" pos:end="225:69">qcow2_crypto_hdr_read_func</name></expr></argument>,

                                           <argument pos:start="227:44" pos:end="227:45"><expr pos:start="227:44" pos:end="227:45"><name pos:start="227:44" pos:end="227:45">bs</name></expr></argument>, <argument pos:start="227:48" pos:end="227:53"><expr pos:start="227:48" pos:end="227:53"><name pos:start="227:48" pos:end="227:53">cflags</name></expr></argument>, <argument pos:start="227:56" pos:end="227:59"><expr pos:start="227:56" pos:end="227:59"><name pos:start="227:56" pos:end="227:59">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="229:13" pos:end="233:13"><if pos:start="229:13" pos:end="233:13">if <condition pos:start="229:16" pos:end="229:27">(<expr pos:start="229:17" pos:end="229:26"><operator pos:start="229:17" pos:end="229:17">!</operator><name pos:start="229:18" pos:end="229:26"><name pos:start="229:18" pos:end="229:18">s</name><operator pos:start="229:19" pos:end="229:20">-&gt;</operator><name pos:start="229:21" pos:end="229:26">crypto</name></name></expr>)</condition> <block pos:start="229:29" pos:end="233:13">{<block_content pos:start="231:17" pos:end="231:31">

                <return pos:start="231:17" pos:end="231:31">return <expr pos:start="231:24" pos:end="231:30"><operator pos:start="231:24" pos:end="231:24">-</operator><name pos:start="231:25" pos:end="231:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>   <break pos:start="235:13" pos:end="235:18">break;</break>



        <default pos:start="239:9" pos:end="239:16">default:</default>

            <comment type="block" pos:start="241:13" pos:end="241:79">/* unknown magic - save it in case we need to rewrite the header */</comment>

            <block pos:start="243:13" pos:end="271:13">{<block_content pos:start="245:17" pos:end="269:17">

                <decl_stmt pos:start="245:17" pos:end="245:50"><decl pos:start="245:17" pos:end="245:49"><type pos:start="245:17" pos:end="245:45"><name pos:start="245:17" pos:end="245:43">Qcow2UnknownHeaderExtension</name> <modifier pos:start="245:45" pos:end="245:45">*</modifier></type><name pos:start="245:46" pos:end="245:49">uext</name></decl>;</decl_stmt>



                <expr_stmt pos:start="249:17" pos:end="249:59"><expr pos:start="249:17" pos:end="249:58"><name pos:start="249:17" pos:end="249:20">uext</name> <operator pos:start="249:22" pos:end="249:22">=</operator> <call pos:start="249:24" pos:end="249:58"><name pos:start="249:24" pos:end="249:32">g_malloc0</name><argument_list pos:start="249:33" pos:end="249:58">(<argument pos:start="249:34" pos:end="249:57"><expr pos:start="249:34" pos:end="249:57"><sizeof pos:start="249:34" pos:end="249:46">sizeof<argument_list pos:start="249:40" pos:end="249:46">(<argument pos:start="249:41" pos:end="249:45"><expr pos:start="249:41" pos:end="249:45"><operator pos:start="249:41" pos:end="249:41">*</operator><name pos:start="249:42" pos:end="249:45">uext</name></expr></argument>)</argument_list></sizeof>  <operator pos:start="249:49" pos:end="249:49">+</operator> <name pos:start="249:51" pos:end="249:57"><name pos:start="249:51" pos:end="249:53">ext</name><operator pos:start="249:54" pos:end="249:54">.</operator><name pos:start="249:55" pos:end="249:57">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:40"><expr pos:start="251:17" pos:end="251:39"><name pos:start="251:17" pos:end="251:27"><name pos:start="251:17" pos:end="251:20">uext</name><operator pos:start="251:21" pos:end="251:22">-&gt;</operator><name pos:start="251:23" pos:end="251:27">magic</name></name> <operator pos:start="251:29" pos:end="251:29">=</operator> <name pos:start="251:31" pos:end="251:39"><name pos:start="251:31" pos:end="251:33">ext</name><operator pos:start="251:34" pos:end="251:34">.</operator><name pos:start="251:35" pos:end="251:39">magic</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="253:17" pos:end="253:36"><expr pos:start="253:17" pos:end="253:35"><name pos:start="253:17" pos:end="253:25"><name pos:start="253:17" pos:end="253:20">uext</name><operator pos:start="253:21" pos:end="253:22">-&gt;</operator><name pos:start="253:23" pos:end="253:25">len</name></name> <operator pos:start="253:27" pos:end="253:27">=</operator> <name pos:start="253:29" pos:end="253:35"><name pos:start="253:29" pos:end="253:31">ext</name><operator pos:start="253:32" pos:end="253:32">.</operator><name pos:start="253:33" pos:end="253:35">len</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:70"><expr pos:start="255:17" pos:end="255:69"><call pos:start="255:17" pos:end="255:69"><name pos:start="255:17" pos:end="255:33">QLIST_INSERT_HEAD</name><argument_list pos:start="255:34" pos:end="255:69">(<argument pos:start="255:35" pos:end="255:56"><expr pos:start="255:35" pos:end="255:56"><operator pos:start="255:35" pos:end="255:35">&amp;</operator><name pos:start="255:36" pos:end="255:56"><name pos:start="255:36" pos:end="255:36">s</name><operator pos:start="255:37" pos:end="255:38">-&gt;</operator><name pos:start="255:39" pos:end="255:56">unknown_header_ext</name></name></expr></argument>, <argument pos:start="255:59" pos:end="255:62"><expr pos:start="255:59" pos:end="255:62"><name pos:start="255:59" pos:end="255:62">uext</name></expr></argument>, <argument pos:start="255:65" pos:end="255:68"><expr pos:start="255:65" pos:end="255:68"><name pos:start="255:65" pos:end="255:68">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="259:17" pos:end="259:75"><expr pos:start="259:17" pos:end="259:74"><name pos:start="259:17" pos:end="259:19">ret</name> <operator pos:start="259:21" pos:end="259:21">=</operator> <call pos:start="259:23" pos:end="259:74"><name pos:start="259:23" pos:end="259:32">bdrv_pread</name><argument_list pos:start="259:33" pos:end="259:74">(<argument pos:start="259:34" pos:end="259:41"><expr pos:start="259:34" pos:end="259:41"><name pos:start="259:34" pos:end="259:41"><name pos:start="259:34" pos:end="259:35">bs</name><operator pos:start="259:36" pos:end="259:37">-&gt;</operator><name pos:start="259:38" pos:end="259:41">file</name></name></expr></argument>, <argument pos:start="259:44" pos:end="259:49"><expr pos:start="259:44" pos:end="259:49"><name pos:start="259:44" pos:end="259:49">offset</name></expr></argument> , <argument pos:start="259:53" pos:end="259:62"><expr pos:start="259:53" pos:end="259:62"><name pos:start="259:53" pos:end="259:62"><name pos:start="259:53" pos:end="259:56">uext</name><operator pos:start="259:57" pos:end="259:58">-&gt;</operator><name pos:start="259:59" pos:end="259:62">data</name></name></expr></argument>, <argument pos:start="259:65" pos:end="259:73"><expr pos:start="259:65" pos:end="259:73"><name pos:start="259:65" pos:end="259:73"><name pos:start="259:65" pos:end="259:68">uext</name><operator pos:start="259:69" pos:end="259:70">-&gt;</operator><name pos:start="259:71" pos:end="259:73">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="261:17" pos:end="269:17"><if pos:start="261:17" pos:end="269:17">if <condition pos:start="261:20" pos:end="261:28">(<expr pos:start="261:21" pos:end="261:27"><name pos:start="261:21" pos:end="261:23">ret</name> <operator pos:start="261:25" pos:end="261:25">&lt;</operator> <literal type="number" pos:start="261:27" pos:end="261:27">0</literal></expr>)</condition> <block pos:start="261:30" pos:end="269:17">{<block_content pos:start="263:21" pos:end="267:31">

                    <expr_stmt pos:start="263:21" pos:end="265:60"><expr pos:start="263:21" pos:end="265:59"><call pos:start="263:21" pos:end="265:59"><name pos:start="263:21" pos:end="263:36">error_setg_errno</name><argument_list pos:start="263:37" pos:end="265:59">(<argument pos:start="263:38" pos:end="263:41"><expr pos:start="263:38" pos:end="263:41"><name pos:start="263:38" pos:end="263:41">errp</name></expr></argument>, <argument pos:start="263:44" pos:end="263:47"><expr pos:start="263:44" pos:end="263:47"><operator pos:start="263:44" pos:end="263:44">-</operator><name pos:start="263:45" pos:end="263:47">ret</name></expr></argument>, <argument pos:start="263:50" pos:end="265:58"><expr pos:start="263:50" pos:end="265:58"><literal type="string" pos:start="263:50" pos:end="263:77">"ERROR: unknown extension: "</literal>

                                     <literal type="string" pos:start="265:38" pos:end="265:58">"Could not read data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="267:21" pos:end="267:31">return <expr pos:start="267:28" pos:end="267:30"><name pos:start="267:28" pos:end="267:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

            <break pos:start="273:13" pos:end="273:18">break;</break>

        </block_content>}</block></switch>



        <expr_stmt pos:start="279:9" pos:end="279:39"><expr pos:start="279:9" pos:end="279:38"><name pos:start="279:9" pos:end="279:14">offset</name> <operator pos:start="279:16" pos:end="279:17">+=</operator> <operator pos:start="279:19" pos:end="279:19">(</operator><operator pos:start="279:20" pos:end="279:20">(</operator><name pos:start="279:21" pos:end="279:27"><name pos:start="279:21" pos:end="279:23">ext</name><operator pos:start="279:24" pos:end="279:24">.</operator><name pos:start="279:25" pos:end="279:27">len</name></name> <operator pos:start="279:29" pos:end="279:29">+</operator> <literal type="number" pos:start="279:31" pos:end="279:31">7</literal><operator pos:start="279:32" pos:end="279:32">)</operator> <operator pos:start="279:34" pos:end="279:34">&amp;</operator> <operator pos:start="279:36" pos:end="279:36">~</operator><literal type="number" pos:start="279:37" pos:end="279:37">7</literal><operator pos:start="279:38" pos:end="279:38">)</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="285:5" pos:end="285:13">return <expr pos:start="285:12" pos:end="285:12"><literal type="number" pos:start="285:12" pos:end="285:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
