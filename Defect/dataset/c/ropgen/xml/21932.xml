<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21932.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:23"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:32">nbd_negotiate_options</name><parameter_list pos:start="1:33" pos:end="2:46">(<parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:42">NBDClient</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:50">client</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:60">uint16_t</name></type> <name pos:start="1:62" pos:end="1:68">myflags</name></decl></parameter>,
                                 <parameter pos:start="2:34" pos:end="2:45"><decl pos:start="2:34" pos:end="2:45"><type pos:start="2:34" pos:end="2:45"><name pos:start="2:34" pos:end="2:38">Error</name> <modifier pos:start="2:40" pos:end="2:40">*</modifier><modifier pos:start="2:41" pos:end="2:41">*</modifier></type><name pos:start="2:42" pos:end="2:45">errp</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="169:23">{<block_content pos:start="4:5" pos:end="169:23">
    <decl_stmt pos:start="4:5" pos:end="4:19"><decl pos:start="4:5" pos:end="4:18"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">uint32_t</name></type> <name pos:start="4:14" pos:end="4:18">flags</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">bool</name></type> <name pos:start="5:10" pos:end="5:22">fixedNewstyle</name> <init pos:start="5:24" pos:end="5:30">= <expr pos:start="5:26" pos:end="5:30"><name pos:start="5:26" pos:end="5:30">false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:27"><decl pos:start="6:5" pos:end="6:26"><type pos:start="6:5" pos:end="6:8"><name pos:start="6:5" pos:end="6:8">bool</name></type> <name pos:start="6:10" pos:end="6:18">no_zeroes</name> <init pos:start="6:20" pos:end="6:26">= <expr pos:start="6:22" pos:end="6:26"><name pos:start="6:22" pos:end="6:26">false</name></expr></init></decl>;</decl_stmt>
    <comment type="block" pos:start="7:5" pos:end="18:6">/* Client sends:
        [ 0 ..   3]   client flags
       Then we loop until NBD_OPT_EXPORT_NAME or NBD_OPT_GO:
        [ 0 ..   7]   NBD_OPTS_MAGIC
        [ 8 ..  11]   NBD option
        [12 ..  15]   Data length
        ...           Rest of request
        [ 0 ..   7]   NBD_OPTS_MAGIC
        [ 8 ..  11]   Second NBD option
        [12 ..  15]   Data length
        ...           Rest of request
    */</comment>
    <if_stmt pos:start="19:5" pos:end="169:23"><if pos:start="19:5" pos:end="169:23">if <condition pos:start="19:8" pos:end="19:63">(<expr pos:start="19:9" pos:end="19:62"><call pos:start="19:9" pos:end="19:58"><name pos:start="19:9" pos:end="19:16">nbd_read</name><argument_list pos:start="19:17" pos:end="19:58">(<argument pos:start="19:18" pos:end="19:28"><expr pos:start="19:18" pos:end="19:28"><name pos:start="19:18" pos:end="19:28"><name pos:start="19:18" pos:end="19:23">client</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:28">ioc</name></name></expr></argument>, <argument pos:start="19:31" pos:end="19:36"><expr pos:start="19:31" pos:end="19:36"><operator pos:start="19:31" pos:end="19:31">&amp;</operator><name pos:start="19:32" pos:end="19:36">flags</name></expr></argument>, <argument pos:start="19:39" pos:end="19:51"><expr pos:start="19:39" pos:end="19:51"><sizeof pos:start="19:39" pos:end="19:51">sizeof<argument_list pos:start="19:45" pos:end="19:51">(<argument pos:start="19:46" pos:end="19:50"><expr pos:start="19:46" pos:end="19:50"><name pos:start="19:46" pos:end="19:50">flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="19:54" pos:end="19:57"><expr pos:start="19:54" pos:end="19:57"><name pos:start="19:54" pos:end="19:57">errp</name></expr></argument>)</argument_list></call> <operator pos:start="19:60" pos:end="19:60">&lt;</operator> <literal type="number" pos:start="19:62" pos:end="19:62">0</literal></expr>)</condition> <block pos:start="19:65" pos:end="169:23">{<block_content pos:start="20:9" pos:end="169:23">
        <expr_stmt pos:start="20:9" pos:end="20:45"><expr pos:start="20:9" pos:end="20:44"><call pos:start="20:9" pos:end="20:44"><name pos:start="20:9" pos:end="20:21">error_prepend</name><argument_list pos:start="20:22" pos:end="20:44">(<argument pos:start="20:23" pos:end="20:26"><expr pos:start="20:23" pos:end="20:26"><name pos:start="20:23" pos:end="20:26">errp</name></expr></argument>, <argument pos:start="20:29" pos:end="20:43"><expr pos:start="20:29" pos:end="20:43"><literal type="string" pos:start="20:29" pos:end="20:43">"read failed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="21:9" pos:end="21:20">return <expr pos:start="21:16" pos:end="21:19"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:19">EIO</name></expr>;</return>
    <expr_stmt pos:start="22:5" pos:end="22:25"><expr pos:start="22:5" pos:end="22:24"><call pos:start="22:5" pos:end="22:24"><name pos:start="22:5" pos:end="22:16">be32_to_cpus</name><argument_list pos:start="22:17" pos:end="22:24">(<argument pos:start="22:18" pos:end="22:23"><expr pos:start="22:18" pos:end="22:23"><operator pos:start="22:18" pos:end="22:18">&amp;</operator><name pos:start="22:19" pos:end="22:23">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="23:5" pos:end="23:45"><expr pos:start="23:5" pos:end="23:44"><call pos:start="23:5" pos:end="23:44"><name pos:start="23:5" pos:end="23:37">trace_nbd_negotiate_options_flags</name><argument_list pos:start="23:38" pos:end="23:44">(<argument pos:start="23:39" pos:end="23:43"><expr pos:start="23:39" pos:end="23:43"><name pos:start="23:39" pos:end="23:43">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="24:5" pos:end="169:23"><if pos:start="24:5" pos:end="169:23">if <condition pos:start="24:8" pos:end="24:42">(<expr pos:start="24:9" pos:end="24:41"><name pos:start="24:9" pos:end="24:13">flags</name> <operator pos:start="24:15" pos:end="24:15">&amp;</operator> <name pos:start="24:17" pos:end="24:41">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>)</condition> <block pos:start="24:44" pos:end="169:23">{<block_content pos:start="25:9" pos:end="169:23">
        <expr_stmt pos:start="25:9" pos:end="25:29"><expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:21">fixedNewstyle</name> <operator pos:start="25:23" pos:end="25:23">=</operator> <name pos:start="25:25" pos:end="25:28">true</name></expr>;</expr_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:44"><expr pos:start="26:9" pos:end="26:43"><name pos:start="26:9" pos:end="26:13">flags</name> <operator pos:start="26:15" pos:end="26:16">&amp;=</operator> <operator pos:start="26:18" pos:end="26:18">~</operator><name pos:start="26:19" pos:end="26:43">NBD_FLAG_C_FIXED_NEWSTYLE</name></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="169:23"><if pos:start="27:5" pos:end="169:23">if <condition pos:start="27:8" pos:end="27:37">(<expr pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:13">flags</name> <operator pos:start="27:15" pos:end="27:15">&amp;</operator> <name pos:start="27:17" pos:end="27:36">NBD_FLAG_C_NO_ZEROES</name></expr>)</condition> <block pos:start="27:39" pos:end="169:23">{<block_content pos:start="28:9" pos:end="169:23">
        <expr_stmt pos:start="28:9" pos:end="28:25"><expr pos:start="28:9" pos:end="28:24"><name pos:start="28:9" pos:end="28:17">no_zeroes</name> <operator pos:start="28:19" pos:end="28:19">=</operator> <name pos:start="28:21" pos:end="28:24">true</name></expr>;</expr_stmt>
        <expr_stmt pos:start="29:9" pos:end="29:39"><expr pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:13">flags</name> <operator pos:start="29:15" pos:end="29:16">&amp;=</operator> <operator pos:start="29:18" pos:end="29:18">~</operator><name pos:start="29:19" pos:end="29:38">NBD_FLAG_C_NO_ZEROES</name></expr>;</expr_stmt>
    <if_stmt pos:start="30:5" pos:end="169:23"><if pos:start="30:5" pos:end="169:23">if <condition pos:start="30:8" pos:end="30:19">(<expr pos:start="30:9" pos:end="30:18"><name pos:start="30:9" pos:end="30:13">flags</name> <operator pos:start="30:15" pos:end="30:16">!=</operator> <literal type="number" pos:start="30:18" pos:end="30:18">0</literal></expr>)</condition> <block pos:start="30:21" pos:end="169:23">{<block_content pos:start="31:9" pos:end="169:23">
        <expr_stmt pos:start="31:9" pos:end="31:79"><expr pos:start="31:9" pos:end="31:78"><call pos:start="31:9" pos:end="31:78"><name pos:start="31:9" pos:end="31:18">error_setg</name><argument_list pos:start="31:19" pos:end="31:78">(<argument pos:start="31:20" pos:end="31:23"><expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">errp</name></expr></argument>, <argument pos:start="31:26" pos:end="31:70"><expr pos:start="31:26" pos:end="31:70"><literal type="string" pos:start="31:26" pos:end="31:51">"Unknown client flags 0x%"</literal> <name pos:start="31:53" pos:end="31:58">PRIx32</name> <literal type="string" pos:start="31:60" pos:end="31:70">" received"</literal></expr></argument>, <argument pos:start="31:73" pos:end="31:77"><expr pos:start="31:73" pos:end="31:77"><name pos:start="31:73" pos:end="31:77">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while pos:start="32:5" pos:end="169:23">while <condition pos:start="32:11" pos:end="32:13">(<expr pos:start="32:12" pos:end="32:12"><literal type="number" pos:start="32:12" pos:end="32:12">1</literal></expr>)</condition> <block pos:start="32:15" pos:end="169:23">{<block_content pos:start="33:9" pos:end="169:23">
        <decl_stmt pos:start="33:9" pos:end="33:16"><decl pos:start="33:9" pos:end="33:15"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:15">ret</name></decl>;</decl_stmt>
        <decl_stmt pos:start="34:9" pos:end="34:32"><decl pos:start="34:9" pos:end="34:23"><type pos:start="34:9" pos:end="34:16"><name pos:start="34:9" pos:end="34:16">uint32_t</name></type> <name pos:start="34:18" pos:end="34:23">option</name></decl>, <decl pos:start="34:26" pos:end="34:31"><type ref="prev" pos:start="34:9" pos:end="34:16"/><name pos:start="34:26" pos:end="34:31">length</name></decl>;</decl_stmt>
        <decl_stmt pos:start="35:9" pos:end="35:23"><decl pos:start="35:9" pos:end="35:22"><type pos:start="35:9" pos:end="35:16"><name pos:start="35:9" pos:end="35:16">uint64_t</name></type> <name pos:start="35:18" pos:end="35:22">magic</name></decl>;</decl_stmt>
        <if_stmt pos:start="36:9" pos:end="169:23"><if pos:start="36:9" pos:end="169:23">if <condition pos:start="36:12" pos:end="36:67">(<expr pos:start="36:13" pos:end="36:66"><call pos:start="36:13" pos:end="36:62"><name pos:start="36:13" pos:end="36:20">nbd_read</name><argument_list pos:start="36:21" pos:end="36:62">(<argument pos:start="36:22" pos:end="36:32"><expr pos:start="36:22" pos:end="36:32"><name pos:start="36:22" pos:end="36:32"><name pos:start="36:22" pos:end="36:27">client</name><operator pos:start="36:28" pos:end="36:29">-&gt;</operator><name pos:start="36:30" pos:end="36:32">ioc</name></name></expr></argument>, <argument pos:start="36:35" pos:end="36:40"><expr pos:start="36:35" pos:end="36:40"><operator pos:start="36:35" pos:end="36:35">&amp;</operator><name pos:start="36:36" pos:end="36:40">magic</name></expr></argument>, <argument pos:start="36:43" pos:end="36:55"><expr pos:start="36:43" pos:end="36:55"><sizeof pos:start="36:43" pos:end="36:55">sizeof<argument_list pos:start="36:49" pos:end="36:55">(<argument pos:start="36:50" pos:end="36:54"><expr pos:start="36:50" pos:end="36:54"><name pos:start="36:50" pos:end="36:54">magic</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="36:58" pos:end="36:61"><expr pos:start="36:58" pos:end="36:61"><name pos:start="36:58" pos:end="36:61">errp</name></expr></argument>)</argument_list></call> <operator pos:start="36:64" pos:end="36:64">&lt;</operator> <literal type="number" pos:start="36:66" pos:end="36:66">0</literal></expr>)</condition> <block pos:start="36:69" pos:end="169:23">{<block_content pos:start="37:13" pos:end="169:23">
            <expr_stmt pos:start="37:13" pos:end="37:49"><expr pos:start="37:13" pos:end="37:48"><call pos:start="37:13" pos:end="37:48"><name pos:start="37:13" pos:end="37:25">error_prepend</name><argument_list pos:start="37:26" pos:end="37:48">(<argument pos:start="37:27" pos:end="37:30"><expr pos:start="37:27" pos:end="37:30"><name pos:start="37:27" pos:end="37:30">errp</name></expr></argument>, <argument pos:start="37:33" pos:end="37:47"><expr pos:start="37:33" pos:end="37:47"><literal type="string" pos:start="37:33" pos:end="37:47">"read failed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="38:9" pos:end="38:35"><expr pos:start="38:9" pos:end="38:34"><name pos:start="38:9" pos:end="38:13">magic</name> <operator pos:start="38:15" pos:end="38:15">=</operator> <call pos:start="38:17" pos:end="38:34"><name pos:start="38:17" pos:end="38:27">be64_to_cpu</name><argument_list pos:start="38:28" pos:end="38:34">(<argument pos:start="38:29" pos:end="38:33"><expr pos:start="38:29" pos:end="38:33"><name pos:start="38:29" pos:end="38:33">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="39:9" pos:end="39:55"><expr pos:start="39:9" pos:end="39:54"><call pos:start="39:9" pos:end="39:54"><name pos:start="39:9" pos:end="39:47">trace_nbd_negotiate_options_check_magic</name><argument_list pos:start="39:48" pos:end="39:54">(<argument pos:start="39:49" pos:end="39:53"><expr pos:start="39:49" pos:end="39:53"><name pos:start="39:49" pos:end="39:53">magic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="40:9" pos:end="169:23"><if pos:start="40:9" pos:end="169:23">if <condition pos:start="40:12" pos:end="40:36">(<expr pos:start="40:13" pos:end="40:35"><name pos:start="40:13" pos:end="40:17">magic</name> <operator pos:start="40:19" pos:end="40:20">!=</operator> <name pos:start="40:22" pos:end="40:35">NBD_OPTS_MAGIC</name></expr>)</condition> <block pos:start="40:38" pos:end="169:23">{<block_content pos:start="41:13" pos:end="169:23">
            <expr_stmt pos:start="41:13" pos:end="41:51"><expr pos:start="41:13" pos:end="41:50"><call pos:start="41:13" pos:end="41:50"><name pos:start="41:13" pos:end="41:22">error_setg</name><argument_list pos:start="41:23" pos:end="41:50">(<argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">errp</name></expr></argument>, <argument pos:start="41:30" pos:end="41:49"><expr pos:start="41:30" pos:end="41:49"><literal type="string" pos:start="41:30" pos:end="41:49">"Bad magic received"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="42:9" pos:end="169:23"><if pos:start="42:9" pos:end="169:23">if <condition pos:start="42:12" pos:end="43:47">(<expr pos:start="42:13" pos:end="43:46"><call pos:start="42:13" pos:end="43:42"><name pos:start="42:13" pos:end="42:20">nbd_read</name><argument_list pos:start="42:21" pos:end="43:42">(<argument pos:start="42:22" pos:end="42:32"><expr pos:start="42:22" pos:end="42:32"><name pos:start="42:22" pos:end="42:32"><name pos:start="42:22" pos:end="42:27">client</name><operator pos:start="42:28" pos:end="42:29">-&gt;</operator><name pos:start="42:30" pos:end="42:32">ioc</name></name></expr></argument>, <argument pos:start="42:35" pos:end="42:41"><expr pos:start="42:35" pos:end="42:41"><operator pos:start="42:35" pos:end="42:35">&amp;</operator><name pos:start="42:36" pos:end="42:41">option</name></expr></argument>,
                     <argument pos:start="43:22" pos:end="43:35"><expr pos:start="43:22" pos:end="43:35"><sizeof pos:start="43:22" pos:end="43:35">sizeof<argument_list pos:start="43:28" pos:end="43:35">(<argument pos:start="43:29" pos:end="43:34"><expr pos:start="43:29" pos:end="43:34"><name pos:start="43:29" pos:end="43:34">option</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="43:38" pos:end="43:41"><expr pos:start="43:38" pos:end="43:41"><name pos:start="43:38" pos:end="43:41">errp</name></expr></argument>)</argument_list></call> <operator pos:start="43:44" pos:end="43:44">&lt;</operator> <literal type="number" pos:start="43:46" pos:end="43:46">0</literal></expr>)</condition> <block pos:start="43:49" pos:end="169:23">{<block_content pos:start="44:13" pos:end="169:23">
            <expr_stmt pos:start="44:13" pos:end="44:49"><expr pos:start="44:13" pos:end="44:48"><call pos:start="44:13" pos:end="44:48"><name pos:start="44:13" pos:end="44:25">error_prepend</name><argument_list pos:start="44:26" pos:end="44:48">(<argument pos:start="44:27" pos:end="44:30"><expr pos:start="44:27" pos:end="44:30"><name pos:start="44:27" pos:end="44:30">errp</name></expr></argument>, <argument pos:start="44:33" pos:end="44:47"><expr pos:start="44:33" pos:end="44:47"><literal type="string" pos:start="44:33" pos:end="44:47">"read failed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:14">option</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <call pos:start="45:18" pos:end="45:36"><name pos:start="45:18" pos:end="45:28">be32_to_cpu</name><argument_list pos:start="45:29" pos:end="45:36">(<argument pos:start="45:30" pos:end="45:35"><expr pos:start="45:30" pos:end="45:35"><name pos:start="45:30" pos:end="45:35">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="46:9" pos:end="169:23"><if pos:start="46:9" pos:end="169:23">if <condition pos:start="46:12" pos:end="46:69">(<expr pos:start="46:13" pos:end="46:68"><call pos:start="46:13" pos:end="46:64"><name pos:start="46:13" pos:end="46:20">nbd_read</name><argument_list pos:start="46:21" pos:end="46:64">(<argument pos:start="46:22" pos:end="46:32"><expr pos:start="46:22" pos:end="46:32"><name pos:start="46:22" pos:end="46:32"><name pos:start="46:22" pos:end="46:27">client</name><operator pos:start="46:28" pos:end="46:29">-&gt;</operator><name pos:start="46:30" pos:end="46:32">ioc</name></name></expr></argument>, <argument pos:start="46:35" pos:end="46:41"><expr pos:start="46:35" pos:end="46:41"><operator pos:start="46:35" pos:end="46:35">&amp;</operator><name pos:start="46:36" pos:end="46:41">length</name></expr></argument>, <argument pos:start="46:44" pos:end="46:57"><expr pos:start="46:44" pos:end="46:57"><sizeof pos:start="46:44" pos:end="46:57">sizeof<argument_list pos:start="46:50" pos:end="46:57">(<argument pos:start="46:51" pos:end="46:56"><expr pos:start="46:51" pos:end="46:56"><name pos:start="46:51" pos:end="46:56">length</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="46:60" pos:end="46:63"><expr pos:start="46:60" pos:end="46:63"><name pos:start="46:60" pos:end="46:63">errp</name></expr></argument>)</argument_list></call> <operator pos:start="46:66" pos:end="46:66">&lt;</operator> <literal type="number" pos:start="46:68" pos:end="46:68">0</literal></expr>)</condition> <block pos:start="46:71" pos:end="169:23">{<block_content pos:start="47:13" pos:end="169:23">
            <expr_stmt pos:start="47:13" pos:end="47:49"><expr pos:start="47:13" pos:end="47:48"><call pos:start="47:13" pos:end="47:48"><name pos:start="47:13" pos:end="47:25">error_prepend</name><argument_list pos:start="47:26" pos:end="47:48">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><name pos:start="47:27" pos:end="47:30">errp</name></expr></argument>, <argument pos:start="47:33" pos:end="47:47"><expr pos:start="47:33" pos:end="47:47"><literal type="string" pos:start="47:33" pos:end="47:47">"read failed: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="48:9" pos:end="48:37"><expr pos:start="48:9" pos:end="48:36"><name pos:start="48:9" pos:end="48:14">length</name> <operator pos:start="48:16" pos:end="48:16">=</operator> <call pos:start="48:18" pos:end="48:36"><name pos:start="48:18" pos:end="48:28">be32_to_cpu</name><argument_list pos:start="48:29" pos:end="48:36">(<argument pos:start="48:30" pos:end="48:35"><expr pos:start="48:30" pos:end="48:35"><name pos:start="48:30" pos:end="48:35">length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="49:9" pos:end="50:73"><expr pos:start="49:9" pos:end="50:72"><call pos:start="49:9" pos:end="50:72"><name pos:start="49:9" pos:end="49:48">trace_nbd_negotiate_options_check_option</name><argument_list pos:start="49:49" pos:end="50:72">(<argument pos:start="49:50" pos:end="49:55"><expr pos:start="49:50" pos:end="49:55"><name pos:start="49:50" pos:end="49:55">option</name></expr></argument>,
                                                 <argument pos:start="50:50" pos:end="50:71"><expr pos:start="50:50" pos:end="50:71"><call pos:start="50:50" pos:end="50:71"><name pos:start="50:50" pos:end="50:63">nbd_opt_lookup</name><argument_list pos:start="50:64" pos:end="50:71">(<argument pos:start="50:65" pos:end="50:70"><expr pos:start="50:65" pos:end="50:70"><name pos:start="50:65" pos:end="50:70">option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="51:9" pos:end="169:23"><if pos:start="51:9" pos:end="169:23">if <condition pos:start="51:12" pos:end="52:54">(<expr pos:start="51:13" pos:end="52:53"><name pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:18">client</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:28">tlscreds</name></name> <operator pos:start="51:30" pos:end="51:31">&amp;&amp;</operator>
            <name pos:start="52:13" pos:end="52:23"><name pos:start="52:13" pos:end="52:18">client</name><operator pos:start="52:19" pos:end="52:20">-&gt;</operator><name pos:start="52:21" pos:end="52:23">ioc</name></name> <operator pos:start="52:25" pos:end="52:26">==</operator> <operator pos:start="52:28" pos:end="52:28">(</operator><name pos:start="52:29" pos:end="52:38">QIOChannel</name> <operator pos:start="52:40" pos:end="52:40">*</operator><operator pos:start="52:41" pos:end="52:41">)</operator><name pos:start="52:42" pos:end="52:53"><name pos:start="52:42" pos:end="52:47">client</name><operator pos:start="52:48" pos:end="52:49">-&gt;</operator><name pos:start="52:50" pos:end="52:53">sioc</name></name></expr>)</condition> <block pos:start="52:56" pos:end="169:23">{<block_content pos:start="53:13" pos:end="169:23">
            <decl_stmt pos:start="53:13" pos:end="53:29"><decl pos:start="53:13" pos:end="53:28"><type pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:22">QIOChannel</name> <modifier pos:start="53:24" pos:end="53:24">*</modifier></type><name pos:start="53:25" pos:end="53:28">tioc</name></decl>;</decl_stmt>
            <if_stmt pos:start="54:13" pos:end="169:23"><if pos:start="54:13" pos:end="169:23">if <condition pos:start="54:16" pos:end="54:31">(<expr pos:start="54:17" pos:end="54:30"><operator pos:start="54:17" pos:end="54:17">!</operator><name pos:start="54:18" pos:end="54:30">fixedNewstyle</name></expr>)</condition> <block pos:start="54:33" pos:end="169:23">{<block_content pos:start="55:17" pos:end="169:23">
                <expr_stmt pos:start="55:17" pos:end="55:74"><expr pos:start="55:17" pos:end="55:73"><call pos:start="55:17" pos:end="55:73"><name pos:start="55:17" pos:end="55:26">error_setg</name><argument_list pos:start="55:27" pos:end="55:73">(<argument pos:start="55:28" pos:end="55:31"><expr pos:start="55:28" pos:end="55:31"><name pos:start="55:28" pos:end="55:31">errp</name></expr></argument>, <argument pos:start="55:34" pos:end="55:64"><expr pos:start="55:34" pos:end="55:64"><literal type="string" pos:start="55:34" pos:end="55:57">"Unsupported option 0x%"</literal> <name pos:start="55:59" pos:end="55:64">PRIx32</name></expr></argument>, <argument pos:start="55:67" pos:end="55:72"><expr pos:start="55:67" pos:end="55:72"><name pos:start="55:67" pos:end="55:72">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <switch pos:start="56:13" pos:end="169:23">switch <condition pos:start="56:20" pos:end="56:27">(<expr pos:start="56:21" pos:end="56:26"><name pos:start="56:21" pos:end="56:26">option</name></expr>)</condition> <block pos:start="56:29" pos:end="169:23">{<block_content pos:start="57:13" pos:end="169:23">
            <case pos:start="57:13" pos:end="57:34">case <expr pos:start="57:18" pos:end="57:33"><name pos:start="57:18" pos:end="57:33">NBD_OPT_STARTTLS</name></expr>:</case>
                <if_stmt pos:start="58:17" pos:end="169:23"><if pos:start="58:17" pos:end="169:23">if <condition pos:start="58:20" pos:end="58:27">(<expr pos:start="58:21" pos:end="58:26"><name pos:start="58:21" pos:end="58:26">length</name></expr>)</condition> <block pos:start="58:29" pos:end="169:23">{<block_content pos:start="61:21" pos:end="169:23">
                    <comment type="block" pos:start="59:21" pos:end="60:65">/* Unconditionally drop the connection if the client
                     * can't start a TLS negotiation correctly */</comment>
                    <return pos:start="61:21" pos:end="62:51">return <expr pos:start="61:28" pos:end="62:50"><call pos:start="61:28" pos:end="62:50"><name pos:start="61:28" pos:end="61:44">nbd_reject_length</name><argument_list pos:start="61:45" pos:end="62:50">(<argument pos:start="61:46" pos:end="61:51"><expr pos:start="61:46" pos:end="61:51"><name pos:start="61:46" pos:end="61:51">client</name></expr></argument>, <argument pos:start="61:54" pos:end="61:59"><expr pos:start="61:54" pos:end="61:59"><name pos:start="61:54" pos:end="61:59">length</name></expr></argument>, <argument pos:start="61:62" pos:end="61:67"><expr pos:start="61:62" pos:end="61:67"><name pos:start="61:62" pos:end="61:67">option</name></expr></argument>, <argument pos:start="61:70" pos:end="61:73"><expr pos:start="61:70" pos:end="61:73"><name pos:start="61:70" pos:end="61:73">true</name></expr></argument>,
                                             <argument pos:start="62:46" pos:end="62:49"><expr pos:start="62:46" pos:end="62:49"><name pos:start="62:46" pos:end="62:49">errp</name></expr></argument>)</argument_list></call></expr>;</return>
                <expr_stmt pos:start="63:17" pos:end="63:67"><expr pos:start="63:17" pos:end="63:66"><name pos:start="63:17" pos:end="63:20">tioc</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <call pos:start="63:24" pos:end="63:66"><name pos:start="63:24" pos:end="63:52">nbd_negotiate_handle_starttls</name><argument_list pos:start="63:53" pos:end="63:66">(<argument pos:start="63:54" pos:end="63:59"><expr pos:start="63:54" pos:end="63:59"><name pos:start="63:54" pos:end="63:59">client</name></expr></argument>, <argument pos:start="63:62" pos:end="63:65"><expr pos:start="63:62" pos:end="63:65"><name pos:start="63:62" pos:end="63:65">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="64:17" pos:end="169:23"><if pos:start="64:17" pos:end="169:23">if <condition pos:start="64:20" pos:end="64:26">(<expr pos:start="64:21" pos:end="64:25"><operator pos:start="64:21" pos:end="64:21">!</operator><name pos:start="64:22" pos:end="64:25">tioc</name></expr>)</condition> <block pos:start="64:28" pos:end="169:23">{<block_content pos:start="65:21" pos:end="169:23">
                    <return pos:start="65:21" pos:end="65:32">return <expr pos:start="65:28" pos:end="65:31"><operator pos:start="65:28" pos:end="65:28">-</operator><name pos:start="65:29" pos:end="65:31">EIO</name></expr>;</return>
                <expr_stmt pos:start="66:17" pos:end="66:24"><expr pos:start="66:17" pos:end="66:23"><name pos:start="66:17" pos:end="66:19">ret</name> <operator pos:start="66:21" pos:end="66:21">=</operator> <literal type="number" pos:start="66:23" pos:end="66:23">0</literal></expr>;</expr_stmt>
                <expr_stmt pos:start="67:17" pos:end="67:50"><expr pos:start="67:17" pos:end="67:49"><call pos:start="67:17" pos:end="67:49"><name pos:start="67:17" pos:end="67:28">object_unref</name><argument_list pos:start="67:29" pos:end="67:49">(<argument pos:start="67:30" pos:end="67:48"><expr pos:start="67:30" pos:end="67:48"><call pos:start="67:30" pos:end="67:48"><name pos:start="67:30" pos:end="67:35">OBJECT</name><argument_list pos:start="67:36" pos:end="67:48">(<argument pos:start="67:37" pos:end="67:47"><expr pos:start="67:37" pos:end="67:47"><name pos:start="67:37" pos:end="67:47"><name pos:start="67:37" pos:end="67:42">client</name><operator pos:start="67:43" pos:end="67:44">-&gt;</operator><name pos:start="67:45" pos:end="67:47">ioc</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="68:17" pos:end="68:48"><expr pos:start="68:17" pos:end="68:47"><name pos:start="68:17" pos:end="68:27"><name pos:start="68:17" pos:end="68:22">client</name><operator pos:start="68:23" pos:end="68:24">-&gt;</operator><name pos:start="68:25" pos:end="68:27">ioc</name></name> <operator pos:start="68:29" pos:end="68:29">=</operator> <call pos:start="68:31" pos:end="68:47"><name pos:start="68:31" pos:end="68:41">QIO_CHANNEL</name><argument_list pos:start="68:42" pos:end="68:47">(<argument pos:start="68:43" pos:end="68:46"><expr pos:start="68:43" pos:end="68:46"><name pos:start="68:43" pos:end="68:46">tioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="69:17" pos:end="69:22">break;</break>
            <case pos:start="70:13" pos:end="70:37">case <expr pos:start="70:18" pos:end="70:36"><name pos:start="70:18" pos:end="70:36">NBD_OPT_EXPORT_NAME</name></expr>:</case>
                <comment type="block" pos:start="71:17" pos:end="71:77">/* No way to return an error to client, so drop connection */</comment>
                <expr_stmt pos:start="72:17" pos:end="73:35"><expr pos:start="72:17" pos:end="73:34"><call pos:start="72:17" pos:end="73:34"><name pos:start="72:17" pos:end="72:26">error_setg</name><argument_list pos:start="72:27" pos:end="73:34">(<argument pos:start="72:28" pos:end="72:31"><expr pos:start="72:28" pos:end="72:31"><name pos:start="72:28" pos:end="72:31">errp</name></expr></argument>, <argument pos:start="72:34" pos:end="72:71"><expr pos:start="72:34" pos:end="72:71"><literal type="string" pos:start="72:34" pos:end="72:71">"Option 0x%x not permitted before TLS"</literal></expr></argument>,
                           <argument pos:start="73:28" pos:end="73:33"><expr pos:start="73:28" pos:end="73:33"><name pos:start="73:28" pos:end="73:33">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <default pos:start="74:13" pos:end="74:20">default:</default>
                <if_stmt pos:start="75:17" pos:end="169:23"><if pos:start="75:17" pos:end="169:23">if <condition pos:start="75:20" pos:end="75:60">(<expr pos:start="75:21" pos:end="75:59"><call pos:start="75:21" pos:end="75:55"><name pos:start="75:21" pos:end="75:28">nbd_drop</name><argument_list pos:start="75:29" pos:end="75:55">(<argument pos:start="75:30" pos:end="75:40"><expr pos:start="75:30" pos:end="75:40"><name pos:start="75:30" pos:end="75:40"><name pos:start="75:30" pos:end="75:35">client</name><operator pos:start="75:36" pos:end="75:37">-&gt;</operator><name pos:start="75:38" pos:end="75:40">ioc</name></name></expr></argument>, <argument pos:start="75:43" pos:end="75:48"><expr pos:start="75:43" pos:end="75:48"><name pos:start="75:43" pos:end="75:48">length</name></expr></argument>, <argument pos:start="75:51" pos:end="75:54"><expr pos:start="75:51" pos:end="75:54"><name pos:start="75:51" pos:end="75:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="75:57" pos:end="75:57">&lt;</operator> <literal type="number" pos:start="75:59" pos:end="75:59">0</literal></expr>)</condition> <block pos:start="75:62" pos:end="169:23">{<block_content pos:start="76:21" pos:end="169:23">
                    <return pos:start="76:21" pos:end="76:32">return <expr pos:start="76:28" pos:end="76:31"><operator pos:start="76:28" pos:end="76:28">-</operator><name pos:start="76:29" pos:end="76:31">EIO</name></expr>;</return>
                <expr_stmt pos:start="77:17" pos:end="82:57"><expr pos:start="77:17" pos:end="82:56"><name pos:start="77:17" pos:end="77:19">ret</name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="82:56"><name pos:start="77:23" pos:end="77:48">nbd_negotiate_send_rep_err</name><argument_list pos:start="77:49" pos:end="82:56">(<argument pos:start="77:50" pos:end="77:60"><expr pos:start="77:50" pos:end="77:60"><name pos:start="77:50" pos:end="77:60"><name pos:start="77:50" pos:end="77:55">client</name><operator pos:start="77:56" pos:end="77:57">-&gt;</operator><name pos:start="77:58" pos:end="77:60">ioc</name></name></expr></argument>,
                                                 <argument pos:start="78:50" pos:end="78:69"><expr pos:start="78:50" pos:end="78:69"><name pos:start="78:50" pos:end="78:69">NBD_REP_ERR_TLS_REQD</name></expr></argument>,
                                                 <argument pos:start="79:50" pos:end="79:55"><expr pos:start="79:50" pos:end="79:55"><name pos:start="79:50" pos:end="79:55">option</name></expr></argument>, <argument pos:start="79:58" pos:end="79:61"><expr pos:start="79:58" pos:end="79:61"><name pos:start="79:58" pos:end="79:61">errp</name></expr></argument>,
                                                 <argument pos:start="80:50" pos:end="81:75"><expr pos:start="80:50" pos:end="81:75"><literal type="string" pos:start="80:50" pos:end="80:61">"Option 0x%"</literal> <name pos:start="80:63" pos:end="80:68">PRIx32</name>
                                                 <literal type="string" pos:start="81:50" pos:end="81:75">"not permitted before TLS"</literal></expr></argument>,
                                                 <argument pos:start="82:50" pos:end="82:55"><expr pos:start="82:50" pos:end="82:55"><name pos:start="82:50" pos:end="82:55">option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="block" pos:start="83:17" pos:end="85:46">/* Let the client keep trying, unless they asked to
                 * quit. In this mode, we've already sent an error, so
                 * we can't ack the abort.  */</comment>
                <if_stmt pos:start="86:17" pos:end="169:23"><if pos:start="86:17" pos:end="89:9">if <condition pos:start="86:20" pos:end="86:44">(<expr pos:start="86:21" pos:end="86:43"><name pos:start="86:21" pos:end="86:26">option</name> <operator pos:start="86:28" pos:end="86:29">==</operator> <name pos:start="86:31" pos:end="86:43">NBD_OPT_ABORT</name></expr>)</condition> <block pos:start="86:46" pos:end="89:9">{<block_content pos:start="87:21" pos:end="88:22">
                    <return pos:start="87:21" pos:end="87:29">return <expr pos:start="87:28" pos:end="87:28"><literal type="number" pos:start="87:28" pos:end="87:28">1</literal></expr>;</return>
                <break pos:start="88:17" pos:end="88:22">break;</break>
        </block_content>}</block></if> <if type="elseif" pos:start="89:11" pos:end="169:23">else if <condition pos:start="89:19" pos:end="89:33">(<expr pos:start="89:20" pos:end="89:32"><name pos:start="89:20" pos:end="89:32">fixedNewstyle</name></expr>)</condition> <block pos:start="89:35" pos:end="169:23">{<block_content pos:start="90:13" pos:end="169:23">
            <switch pos:start="90:13" pos:end="169:23">switch <condition pos:start="90:20" pos:end="90:27">(<expr pos:start="90:21" pos:end="90:26"><name pos:start="90:21" pos:end="90:26">option</name></expr>)</condition> <block pos:start="90:29" pos:end="169:23">{<block_content pos:start="91:13" pos:end="169:23">
            <case pos:start="91:13" pos:end="91:30">case <expr pos:start="91:18" pos:end="91:29"><name pos:start="91:18" pos:end="91:29">NBD_OPT_LIST</name></expr>:</case>
                <if_stmt pos:start="92:17" pos:end="169:23"><if pos:start="92:17" pos:end="95:17">if <condition pos:start="92:20" pos:end="92:27">(<expr pos:start="92:21" pos:end="92:26"><name pos:start="92:21" pos:end="92:26">length</name></expr>)</condition> <block pos:start="92:29" pos:end="95:17">{<block_content pos:start="93:21" pos:end="94:50">
                    <expr_stmt pos:start="93:21" pos:end="94:50"><expr pos:start="93:21" pos:end="94:49"><name pos:start="93:21" pos:end="93:23">ret</name> <operator pos:start="93:25" pos:end="93:25">=</operator> <call pos:start="93:27" pos:end="94:49"><name pos:start="93:27" pos:end="93:43">nbd_reject_length</name><argument_list pos:start="93:44" pos:end="94:49">(<argument pos:start="93:45" pos:end="93:50"><expr pos:start="93:45" pos:end="93:50"><name pos:start="93:45" pos:end="93:50">client</name></expr></argument>, <argument pos:start="93:53" pos:end="93:58"><expr pos:start="93:53" pos:end="93:58"><name pos:start="93:53" pos:end="93:58">length</name></expr></argument>, <argument pos:start="93:61" pos:end="93:66"><expr pos:start="93:61" pos:end="93:66"><name pos:start="93:61" pos:end="93:66">option</name></expr></argument>, <argument pos:start="93:69" pos:end="93:73"><expr pos:start="93:69" pos:end="93:73"><name pos:start="93:69" pos:end="93:73">false</name></expr></argument>,
                                            <argument pos:start="94:45" pos:end="94:48"><expr pos:start="94:45" pos:end="94:48"><name pos:start="94:45" pos:end="94:48">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="95:19" pos:end="169:23">else <block pos:start="95:24" pos:end="169:23">{<block_content pos:start="96:21" pos:end="169:23">
                    <expr_stmt pos:start="96:21" pos:end="96:66"><expr pos:start="96:21" pos:end="96:65"><name pos:start="96:21" pos:end="96:23">ret</name> <operator pos:start="96:25" pos:end="96:25">=</operator> <call pos:start="96:27" pos:end="96:65"><name pos:start="96:27" pos:end="96:51">nbd_negotiate_handle_list</name><argument_list pos:start="96:52" pos:end="96:65">(<argument pos:start="96:53" pos:end="96:58"><expr pos:start="96:53" pos:end="96:58"><name pos:start="96:53" pos:end="96:58">client</name></expr></argument>, <argument pos:start="96:61" pos:end="96:64"><expr pos:start="96:61" pos:end="96:64"><name pos:start="96:61" pos:end="96:64">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="97:17" pos:end="97:22">break;</break>
            <case pos:start="98:13" pos:end="98:31">case <expr pos:start="98:18" pos:end="98:30"><name pos:start="98:18" pos:end="98:30">NBD_OPT_ABORT</name></expr>:</case>
                <comment type="block" pos:start="99:17" pos:end="101:59">/* NBD spec says we must try to reply before
                 * disconnecting, but that we must also tolerate
                 * guests that don't wait for our reply. */</comment>
                <expr_stmt pos:start="102:17" pos:end="102:79"><expr pos:start="102:17" pos:end="102:78"><call pos:start="102:17" pos:end="102:78"><name pos:start="102:17" pos:end="102:38">nbd_negotiate_send_rep</name><argument_list pos:start="102:39" pos:end="102:78">(<argument pos:start="102:40" pos:end="102:50"><expr pos:start="102:40" pos:end="102:50"><name pos:start="102:40" pos:end="102:50"><name pos:start="102:40" pos:end="102:45">client</name><operator pos:start="102:46" pos:end="102:47">-&gt;</operator><name pos:start="102:48" pos:end="102:50">ioc</name></name></expr></argument>, <argument pos:start="102:53" pos:end="102:63"><expr pos:start="102:53" pos:end="102:63"><name pos:start="102:53" pos:end="102:63">NBD_REP_ACK</name></expr></argument>, <argument pos:start="102:66" pos:end="102:71"><expr pos:start="102:66" pos:end="102:71"><name pos:start="102:66" pos:end="102:71">option</name></expr></argument>, <argument pos:start="102:74" pos:end="102:77"><expr pos:start="102:74" pos:end="102:77"><name pos:start="102:74" pos:end="102:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="103:17" pos:end="103:25">return <expr pos:start="103:24" pos:end="103:24"><literal type="number" pos:start="103:24" pos:end="103:24">1</literal></expr>;</return>
            <case pos:start="104:13" pos:end="104:37">case <expr pos:start="104:18" pos:end="104:36"><name pos:start="104:18" pos:end="104:36">NBD_OPT_EXPORT_NAME</name></expr>:</case>
                <return pos:start="105:17" pos:end="107:62">return <expr pos:start="105:24" pos:end="107:61"><call pos:start="105:24" pos:end="107:61"><name pos:start="105:24" pos:end="105:55">nbd_negotiate_handle_export_name</name><argument_list pos:start="105:56" pos:end="107:61">(<argument pos:start="105:57" pos:end="105:62"><expr pos:start="105:57" pos:end="105:62"><name pos:start="105:57" pos:end="105:62">client</name></expr></argument>, <argument pos:start="105:65" pos:end="105:70"><expr pos:start="105:65" pos:end="105:70"><name pos:start="105:65" pos:end="105:70">length</name></expr></argument>,
                                                        <argument pos:start="106:57" pos:end="106:63"><expr pos:start="106:57" pos:end="106:63"><name pos:start="106:57" pos:end="106:63">myflags</name></expr></argument>, <argument pos:start="106:66" pos:end="106:74"><expr pos:start="106:66" pos:end="106:74"><name pos:start="106:66" pos:end="106:74">no_zeroes</name></expr></argument>,
                                                        <argument pos:start="107:57" pos:end="107:60"><expr pos:start="107:57" pos:end="107:60"><name pos:start="107:57" pos:end="107:60">errp</name></expr></argument>)</argument_list></call></expr>;</return>
            <case pos:start="108:13" pos:end="108:30">case <expr pos:start="108:18" pos:end="108:29"><name pos:start="108:18" pos:end="108:29">NBD_OPT_INFO</name></expr>:</case>
            <case pos:start="109:13" pos:end="109:28">case <expr pos:start="109:18" pos:end="109:27"><name pos:start="109:18" pos:end="109:27">NBD_OPT_GO</name></expr>:</case>
                <expr_stmt pos:start="110:17" pos:end="111:63"><expr pos:start="110:17" pos:end="111:62"><name pos:start="110:17" pos:end="110:19">ret</name> <operator pos:start="110:21" pos:end="110:21">=</operator> <call pos:start="110:23" pos:end="111:62"><name pos:start="110:23" pos:end="110:47">nbd_negotiate_handle_info</name><argument_list pos:start="110:48" pos:end="111:62">(<argument pos:start="110:49" pos:end="110:54"><expr pos:start="110:49" pos:end="110:54"><name pos:start="110:49" pos:end="110:54">client</name></expr></argument>, <argument pos:start="110:57" pos:end="110:62"><expr pos:start="110:57" pos:end="110:62"><name pos:start="110:57" pos:end="110:62">length</name></expr></argument>, <argument pos:start="110:65" pos:end="110:70"><expr pos:start="110:65" pos:end="110:70"><name pos:start="110:65" pos:end="110:70">option</name></expr></argument>,
                                                <argument pos:start="111:49" pos:end="111:55"><expr pos:start="111:49" pos:end="111:55"><name pos:start="111:49" pos:end="111:55">myflags</name></expr></argument>, <argument pos:start="111:58" pos:end="111:61"><expr pos:start="111:58" pos:end="111:61"><name pos:start="111:58" pos:end="111:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="112:17" pos:end="169:23"><if pos:start="112:17" pos:end="169:23">if <condition pos:start="112:20" pos:end="112:29">(<expr pos:start="112:21" pos:end="112:28"><name pos:start="112:21" pos:end="112:23">ret</name> <operator pos:start="112:25" pos:end="112:26">==</operator> <literal type="number" pos:start="112:28" pos:end="112:28">1</literal></expr>)</condition> <block pos:start="112:31" pos:end="169:23">{<block_content pos:start="113:21" pos:end="169:23">
                    <expr_stmt pos:start="113:21" pos:end="113:49"><expr pos:start="113:21" pos:end="113:48"><call pos:start="113:21" pos:end="113:48"><name pos:start="113:21" pos:end="113:26">assert</name><argument_list pos:start="113:27" pos:end="113:48">(<argument pos:start="113:28" pos:end="113:47"><expr pos:start="113:28" pos:end="113:47"><name pos:start="113:28" pos:end="113:33">option</name> <operator pos:start="113:35" pos:end="113:36">==</operator> <name pos:start="113:38" pos:end="113:47">NBD_OPT_GO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return pos:start="114:21" pos:end="114:29">return <expr pos:start="114:28" pos:end="114:28"><literal type="number" pos:start="114:28" pos:end="114:28">0</literal></expr>;</return>
                <break pos:start="115:17" pos:end="115:22">break;</break>
            <case pos:start="116:13" pos:end="116:34">case <expr pos:start="116:18" pos:end="116:33"><name pos:start="116:18" pos:end="116:33">NBD_OPT_STARTTLS</name></expr>:</case>
                <if_stmt pos:start="117:17" pos:end="169:23"><if pos:start="117:17" pos:end="120:17">if <condition pos:start="117:20" pos:end="117:27">(<expr pos:start="117:21" pos:end="117:26"><name pos:start="117:21" pos:end="117:26">length</name></expr>)</condition> <block pos:start="117:29" pos:end="120:17">{<block_content pos:start="118:21" pos:end="119:50">
                    <expr_stmt pos:start="118:21" pos:end="119:50"><expr pos:start="118:21" pos:end="119:49"><name pos:start="118:21" pos:end="118:23">ret</name> <operator pos:start="118:25" pos:end="118:25">=</operator> <call pos:start="118:27" pos:end="119:49"><name pos:start="118:27" pos:end="118:43">nbd_reject_length</name><argument_list pos:start="118:44" pos:end="119:49">(<argument pos:start="118:45" pos:end="118:50"><expr pos:start="118:45" pos:end="118:50"><name pos:start="118:45" pos:end="118:50">client</name></expr></argument>, <argument pos:start="118:53" pos:end="118:58"><expr pos:start="118:53" pos:end="118:58"><name pos:start="118:53" pos:end="118:58">length</name></expr></argument>, <argument pos:start="118:61" pos:end="118:66"><expr pos:start="118:61" pos:end="118:66"><name pos:start="118:61" pos:end="118:66">option</name></expr></argument>, <argument pos:start="118:69" pos:end="118:73"><expr pos:start="118:69" pos:end="118:73"><name pos:start="118:69" pos:end="118:73">false</name></expr></argument>,
                                            <argument pos:start="119:45" pos:end="119:48"><expr pos:start="119:45" pos:end="119:48"><name pos:start="119:45" pos:end="119:48">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="120:19" pos:end="125:17">else if <condition pos:start="120:27" pos:end="120:44">(<expr pos:start="120:28" pos:end="120:43"><name pos:start="120:28" pos:end="120:43"><name pos:start="120:28" pos:end="120:33">client</name><operator pos:start="120:34" pos:end="120:35">-&gt;</operator><name pos:start="120:36" pos:end="120:43">tlscreds</name></name></expr>)</condition> <block pos:start="120:46" pos:end="125:17">{<block_content pos:start="121:21" pos:end="124:76">
                    <expr_stmt pos:start="121:21" pos:end="124:76"><expr pos:start="121:21" pos:end="124:75"><name pos:start="121:21" pos:end="121:23">ret</name> <operator pos:start="121:25" pos:end="121:25">=</operator> <call pos:start="121:27" pos:end="124:75"><name pos:start="121:27" pos:end="121:52">nbd_negotiate_send_rep_err</name><argument_list pos:start="121:53" pos:end="124:75">(<argument pos:start="121:54" pos:end="121:64"><expr pos:start="121:54" pos:end="121:64"><name pos:start="121:54" pos:end="121:64"><name pos:start="121:54" pos:end="121:59">client</name><operator pos:start="121:60" pos:end="121:61">-&gt;</operator><name pos:start="121:62" pos:end="121:64">ioc</name></name></expr></argument>,
                                                     <argument pos:start="122:54" pos:end="122:72"><expr pos:start="122:54" pos:end="122:72"><name pos:start="122:54" pos:end="122:72">NBD_REP_ERR_INVALID</name></expr></argument>,
                                                     <argument pos:start="123:54" pos:end="123:59"><expr pos:start="123:54" pos:end="123:59"><name pos:start="123:54" pos:end="123:59">option</name></expr></argument>, <argument pos:start="123:62" pos:end="123:65"><expr pos:start="123:62" pos:end="123:65"><name pos:start="123:62" pos:end="123:65">errp</name></expr></argument>,
                                                     <argument pos:start="124:54" pos:end="124:74"><expr pos:start="124:54" pos:end="124:74"><literal type="string" pos:start="124:54" pos:end="124:74">"TLS already enabled"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="125:19" pos:end="169:23">else <block pos:start="125:24" pos:end="169:23">{<block_content pos:start="126:21" pos:end="169:23">
                    <expr_stmt pos:start="126:21" pos:end="129:75"><expr pos:start="126:21" pos:end="129:74"><name pos:start="126:21" pos:end="126:23">ret</name> <operator pos:start="126:25" pos:end="126:25">=</operator> <call pos:start="126:27" pos:end="129:74"><name pos:start="126:27" pos:end="126:52">nbd_negotiate_send_rep_err</name><argument_list pos:start="126:53" pos:end="129:74">(<argument pos:start="126:54" pos:end="126:64"><expr pos:start="126:54" pos:end="126:64"><name pos:start="126:54" pos:end="126:64"><name pos:start="126:54" pos:end="126:59">client</name><operator pos:start="126:60" pos:end="126:61">-&gt;</operator><name pos:start="126:62" pos:end="126:64">ioc</name></name></expr></argument>,
                                                     <argument pos:start="127:54" pos:end="127:71"><expr pos:start="127:54" pos:end="127:71"><name pos:start="127:54" pos:end="127:71">NBD_REP_ERR_POLICY</name></expr></argument>,
                                                     <argument pos:start="128:54" pos:end="128:59"><expr pos:start="128:54" pos:end="128:59"><name pos:start="128:54" pos:end="128:59">option</name></expr></argument>, <argument pos:start="128:62" pos:end="128:65"><expr pos:start="128:62" pos:end="128:65"><name pos:start="128:62" pos:end="128:65">errp</name></expr></argument>,
                                                     <argument pos:start="129:54" pos:end="129:73"><expr pos:start="129:54" pos:end="129:73"><literal type="string" pos:start="129:54" pos:end="129:73">"TLS not configured"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="130:17" pos:end="130:22">break;</break>
            <case pos:start="131:13" pos:end="131:42">case <expr pos:start="131:18" pos:end="131:41"><name pos:start="131:18" pos:end="131:41">NBD_OPT_STRUCTURED_REPLY</name></expr>:</case>
                <if_stmt pos:start="132:17" pos:end="169:23"><if pos:start="132:17" pos:end="135:17">if <condition pos:start="132:20" pos:end="132:27">(<expr pos:start="132:21" pos:end="132:26"><name pos:start="132:21" pos:end="132:26">length</name></expr>)</condition> <block pos:start="132:29" pos:end="135:17">{<block_content pos:start="133:21" pos:end="134:50">
                    <expr_stmt pos:start="133:21" pos:end="134:50"><expr pos:start="133:21" pos:end="134:49"><name pos:start="133:21" pos:end="133:23">ret</name> <operator pos:start="133:25" pos:end="133:25">=</operator> <call pos:start="133:27" pos:end="134:49"><name pos:start="133:27" pos:end="133:43">nbd_reject_length</name><argument_list pos:start="133:44" pos:end="134:49">(<argument pos:start="133:45" pos:end="133:50"><expr pos:start="133:45" pos:end="133:50"><name pos:start="133:45" pos:end="133:50">client</name></expr></argument>, <argument pos:start="133:53" pos:end="133:58"><expr pos:start="133:53" pos:end="133:58"><name pos:start="133:53" pos:end="133:58">length</name></expr></argument>, <argument pos:start="133:61" pos:end="133:66"><expr pos:start="133:61" pos:end="133:66"><name pos:start="133:61" pos:end="133:66">option</name></expr></argument>, <argument pos:start="133:69" pos:end="133:73"><expr pos:start="133:69" pos:end="133:73"><name pos:start="133:69" pos:end="133:73">false</name></expr></argument>,
                                            <argument pos:start="134:45" pos:end="134:48"><expr pos:start="134:45" pos:end="134:48"><name pos:start="134:45" pos:end="134:48">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif" pos:start="135:19" pos:end="139:17">else if <condition pos:start="135:27" pos:end="135:52">(<expr pos:start="135:28" pos:end="135:51"><name pos:start="135:28" pos:end="135:51"><name pos:start="135:28" pos:end="135:33">client</name><operator pos:start="135:34" pos:end="135:35">-&gt;</operator><name pos:start="135:36" pos:end="135:51">structured_reply</name></name></expr>)</condition> <block pos:start="135:54" pos:end="139:17">{<block_content pos:start="136:21" pos:end="138:63">
                    <expr_stmt pos:start="136:21" pos:end="138:63"><expr pos:start="136:21" pos:end="138:62"><name pos:start="136:21" pos:end="136:23">ret</name> <operator pos:start="136:25" pos:end="136:25">=</operator> <call pos:start="136:27" pos:end="138:62"><name pos:start="136:27" pos:end="136:52">nbd_negotiate_send_rep_err</name><argument_list pos:start="136:53" pos:end="138:62">(
                        <argument pos:start="137:25" pos:end="137:35"><expr pos:start="137:25" pos:end="137:35"><name pos:start="137:25" pos:end="137:35"><name pos:start="137:25" pos:end="137:30">client</name><operator pos:start="137:31" pos:end="137:32">-&gt;</operator><name pos:start="137:33" pos:end="137:35">ioc</name></name></expr></argument>, <argument pos:start="137:38" pos:end="137:56"><expr pos:start="137:38" pos:end="137:56"><name pos:start="137:38" pos:end="137:56">NBD_REP_ERR_INVALID</name></expr></argument>, <argument pos:start="137:59" pos:end="137:64"><expr pos:start="137:59" pos:end="137:64"><name pos:start="137:59" pos:end="137:64">option</name></expr></argument>, <argument pos:start="137:67" pos:end="137:70"><expr pos:start="137:67" pos:end="137:70"><name pos:start="137:67" pos:end="137:70">errp</name></expr></argument>,
                        <argument pos:start="138:25" pos:end="138:61"><expr pos:start="138:25" pos:end="138:61"><literal type="string" pos:start="138:25" pos:end="138:61">"structured reply already negotiated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="139:19" pos:end="169:23">else <block pos:start="139:24" pos:end="169:23">{<block_content pos:start="140:21" pos:end="169:23">
                    <expr_stmt pos:start="140:21" pos:end="141:63"><expr pos:start="140:21" pos:end="141:62"><name pos:start="140:21" pos:end="140:23">ret</name> <operator pos:start="140:25" pos:end="140:25">=</operator> <call pos:start="140:27" pos:end="141:62"><name pos:start="140:27" pos:end="140:48">nbd_negotiate_send_rep</name><argument_list pos:start="140:49" pos:end="141:62">(<argument pos:start="140:50" pos:end="140:60"><expr pos:start="140:50" pos:end="140:60"><name pos:start="140:50" pos:end="140:60"><name pos:start="140:50" pos:end="140:55">client</name><operator pos:start="140:56" pos:end="140:57">-&gt;</operator><name pos:start="140:58" pos:end="140:60">ioc</name></name></expr></argument>, <argument pos:start="140:63" pos:end="140:73"><expr pos:start="140:63" pos:end="140:73"><name pos:start="140:63" pos:end="140:73">NBD_REP_ACK</name></expr></argument>,
                                                 <argument pos:start="141:50" pos:end="141:55"><expr pos:start="141:50" pos:end="141:55"><name pos:start="141:50" pos:end="141:55">option</name></expr></argument>, <argument pos:start="141:58" pos:end="141:61"><expr pos:start="141:58" pos:end="141:61"><name pos:start="141:58" pos:end="141:61">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="142:21" pos:end="142:52"><expr pos:start="142:21" pos:end="142:51"><name pos:start="142:21" pos:end="142:44"><name pos:start="142:21" pos:end="142:26">client</name><operator pos:start="142:27" pos:end="142:28">-&gt;</operator><name pos:start="142:29" pos:end="142:44">structured_reply</name></name> <operator pos:start="142:46" pos:end="142:46">=</operator> <name pos:start="142:48" pos:end="142:51">true</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="143:21" pos:end="143:48"><expr pos:start="143:21" pos:end="143:47"><name pos:start="143:21" pos:end="143:27">myflags</name> <operator pos:start="143:29" pos:end="143:30">|=</operator> <name pos:start="143:32" pos:end="143:47">NBD_FLAG_SEND_DF</name></expr>;</expr_stmt>
                <break pos:start="144:17" pos:end="144:22">break;</break>
            <default pos:start="145:13" pos:end="145:20">default:</default>
                <if_stmt pos:start="146:17" pos:end="169:23"><if pos:start="146:17" pos:end="155:9">if <condition pos:start="146:20" pos:end="146:60">(<expr pos:start="146:21" pos:end="146:59"><call pos:start="146:21" pos:end="146:55"><name pos:start="146:21" pos:end="146:28">nbd_drop</name><argument_list pos:start="146:29" pos:end="146:55">(<argument pos:start="146:30" pos:end="146:40"><expr pos:start="146:30" pos:end="146:40"><name pos:start="146:30" pos:end="146:40"><name pos:start="146:30" pos:end="146:35">client</name><operator pos:start="146:36" pos:end="146:37">-&gt;</operator><name pos:start="146:38" pos:end="146:40">ioc</name></name></expr></argument>, <argument pos:start="146:43" pos:end="146:48"><expr pos:start="146:43" pos:end="146:48"><name pos:start="146:43" pos:end="146:48">length</name></expr></argument>, <argument pos:start="146:51" pos:end="146:54"><expr pos:start="146:51" pos:end="146:54"><name pos:start="146:51" pos:end="146:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="146:57" pos:end="146:57">&lt;</operator> <literal type="number" pos:start="146:59" pos:end="146:59">0</literal></expr>)</condition> <block pos:start="146:62" pos:end="155:9">{<block_content pos:start="147:21" pos:end="154:22">
                    <return pos:start="147:21" pos:end="147:32">return <expr pos:start="147:28" pos:end="147:31"><operator pos:start="147:28" pos:end="147:28">-</operator><name pos:start="147:29" pos:end="147:31">EIO</name></expr>;</return>
                <expr_stmt pos:start="148:17" pos:end="153:73"><expr pos:start="148:17" pos:end="153:72"><name pos:start="148:17" pos:end="148:19">ret</name> <operator pos:start="148:21" pos:end="148:21">=</operator> <call pos:start="148:23" pos:end="153:72"><name pos:start="148:23" pos:end="148:48">nbd_negotiate_send_rep_err</name><argument_list pos:start="148:49" pos:end="153:72">(<argument pos:start="148:50" pos:end="148:60"><expr pos:start="148:50" pos:end="148:60"><name pos:start="148:50" pos:end="148:60"><name pos:start="148:50" pos:end="148:55">client</name><operator pos:start="148:56" pos:end="148:57">-&gt;</operator><name pos:start="148:58" pos:end="148:60">ioc</name></name></expr></argument>,
                                                 <argument pos:start="149:50" pos:end="149:66"><expr pos:start="149:50" pos:end="149:66"><name pos:start="149:50" pos:end="149:66">NBD_REP_ERR_UNSUP</name></expr></argument>,
                                                 <argument pos:start="150:50" pos:end="150:55"><expr pos:start="150:50" pos:end="150:55"><name pos:start="150:50" pos:end="150:55">option</name></expr></argument>, <argument pos:start="150:58" pos:end="150:61"><expr pos:start="150:58" pos:end="150:61"><name pos:start="150:58" pos:end="150:61">errp</name></expr></argument>,
                                                 <argument pos:start="151:50" pos:end="152:63"><expr pos:start="151:50" pos:end="152:63"><literal type="string" pos:start="151:50" pos:end="151:73">"Unsupported option 0x%"</literal>
                                                 <name pos:start="152:50" pos:end="152:55">PRIx32</name> <literal type="string" pos:start="152:57" pos:end="152:63">" (%s)"</literal></expr></argument>, <argument pos:start="152:66" pos:end="152:71"><expr pos:start="152:66" pos:end="152:71"><name pos:start="152:66" pos:end="152:71">option</name></expr></argument>,
                                                 <argument pos:start="153:50" pos:end="153:71"><expr pos:start="153:50" pos:end="153:71"><call pos:start="153:50" pos:end="153:71"><name pos:start="153:50" pos:end="153:63">nbd_opt_lookup</name><argument_list pos:start="153:64" pos:end="153:71">(<argument pos:start="153:65" pos:end="153:70"><expr pos:start="153:65" pos:end="153:70"><name pos:start="153:65" pos:end="153:70">option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break pos:start="154:17" pos:end="154:22">break;</break>
        </block_content>}</block></if> <else pos:start="155:11" pos:end="169:23">else <block pos:start="155:16" pos:end="169:23">{<block_content pos:start="160:13" pos:end="169:23">
            <comment type="block" pos:start="156:13" pos:end="159:15">/*
             * If broken new-style we should drop the connection
             * for anything except NBD_OPT_EXPORT_NAME
             */</comment>
            <switch pos:start="160:13" pos:end="169:23">switch <condition pos:start="160:20" pos:end="160:27">(<expr pos:start="160:21" pos:end="160:26"><name pos:start="160:21" pos:end="160:26">option</name></expr>)</condition> <block pos:start="160:29" pos:end="169:23">{<block_content pos:start="161:13" pos:end="169:23">
            <case pos:start="161:13" pos:end="161:37">case <expr pos:start="161:18" pos:end="161:36"><name pos:start="161:18" pos:end="161:36">NBD_OPT_EXPORT_NAME</name></expr>:</case>
                <return pos:start="162:17" pos:end="164:62">return <expr pos:start="162:24" pos:end="164:61"><call pos:start="162:24" pos:end="164:61"><name pos:start="162:24" pos:end="162:55">nbd_negotiate_handle_export_name</name><argument_list pos:start="162:56" pos:end="164:61">(<argument pos:start="162:57" pos:end="162:62"><expr pos:start="162:57" pos:end="162:62"><name pos:start="162:57" pos:end="162:62">client</name></expr></argument>, <argument pos:start="162:65" pos:end="162:70"><expr pos:start="162:65" pos:end="162:70"><name pos:start="162:65" pos:end="162:70">length</name></expr></argument>,
                                                        <argument pos:start="163:57" pos:end="163:63"><expr pos:start="163:57" pos:end="163:63"><name pos:start="163:57" pos:end="163:63">myflags</name></expr></argument>, <argument pos:start="163:66" pos:end="163:74"><expr pos:start="163:66" pos:end="163:74"><name pos:start="163:66" pos:end="163:74">no_zeroes</name></expr></argument>,
                                                        <argument pos:start="164:57" pos:end="164:60"><expr pos:start="164:57" pos:end="164:60"><name pos:start="164:57" pos:end="164:60">errp</name></expr></argument>)</argument_list></call></expr>;</return>
            <default pos:start="165:13" pos:end="165:20">default:</default>
                <expr_stmt pos:start="166:17" pos:end="167:59"><expr pos:start="166:17" pos:end="167:58"><call pos:start="166:17" pos:end="167:58"><name pos:start="166:17" pos:end="166:26">error_setg</name><argument_list pos:start="166:27" pos:end="167:58">(<argument pos:start="166:28" pos:end="166:31"><expr pos:start="166:28" pos:end="166:31"><name pos:start="166:28" pos:end="166:31">errp</name></expr></argument>, <argument pos:start="166:34" pos:end="166:72"><expr pos:start="166:34" pos:end="166:72"><literal type="string" pos:start="166:34" pos:end="166:57">"Unsupported option 0x%"</literal> <name pos:start="166:59" pos:end="166:64">PRIx32</name> <literal type="string" pos:start="166:66" pos:end="166:72">" (%s)"</literal></expr></argument>,
                           <argument pos:start="167:28" pos:end="167:33"><expr pos:start="167:28" pos:end="167:33"><name pos:start="167:28" pos:end="167:33">option</name></expr></argument>, <argument pos:start="167:36" pos:end="167:57"><expr pos:start="167:36" pos:end="167:57"><call pos:start="167:36" pos:end="167:57"><name pos:start="167:36" pos:end="167:49">nbd_opt_lookup</name><argument_list pos:start="167:50" pos:end="167:57">(<argument pos:start="167:51" pos:end="167:56"><expr pos:start="167:51" pos:end="167:56"><name pos:start="167:51" pos:end="167:56">option</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="168:9" pos:end="169:23"><if pos:start="168:9" pos:end="169:23">if <condition pos:start="168:12" pos:end="168:20">(<expr pos:start="168:13" pos:end="168:19"><name pos:start="168:13" pos:end="168:15">ret</name> <operator pos:start="168:17" pos:end="168:17">&lt;</operator> <literal type="number" pos:start="168:19" pos:end="168:19">0</literal></expr>)</condition> <block pos:start="168:22" pos:end="169:23">{<block_content pos:start="169:13" pos:end="169:23">
            <return pos:start="169:13" pos:end="169:23">return <expr pos:start="169:20" pos:end="169:22"><name pos:start="169:20" pos:end="169:22">ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
