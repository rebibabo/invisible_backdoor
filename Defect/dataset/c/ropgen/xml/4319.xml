<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4319.c" pos:tabs="8"><function pos:start="1:1" pos:end="143:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:28">qemu_set_dfilter_ranges</name><parameter_list pos:start="1:29" pos:end="1:67">(<parameter pos:start="1:30" pos:end="1:52"><decl pos:start="1:30" pos:end="1:52"><type pos:start="1:30" pos:end="1:52"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:52">filter_spec</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:66"><decl pos:start="1:55" pos:end="1:66"><type pos:start="1:55" pos:end="1:66"><name pos:start="1:55" pos:end="1:59">Error</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier><modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="143:1">{<block_content pos:start="5:5" pos:end="141:23">

    <decl_stmt pos:start="5:5" pos:end="5:53"><decl pos:start="5:5" pos:end="5:52"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:9">gchar</name> <modifier pos:start="5:11" pos:end="5:11">*</modifier><modifier pos:start="5:12" pos:end="5:12">*</modifier></type><name pos:start="5:13" pos:end="5:18">ranges</name> <init pos:start="5:20" pos:end="5:52">= <expr pos:start="5:22" pos:end="5:52"><call pos:start="5:22" pos:end="5:52"><name pos:start="5:22" pos:end="5:31">g_strsplit</name><argument_list pos:start="5:32" pos:end="5:52">(<argument pos:start="5:33" pos:end="5:43"><expr pos:start="5:33" pos:end="5:43"><name pos:start="5:33" pos:end="5:43">filter_spec</name></expr></argument>, <argument pos:start="5:46" pos:end="5:48"><expr pos:start="5:46" pos:end="5:48"><literal type="string" pos:start="5:46" pos:end="5:48">","</literal></expr></argument>, <argument pos:start="5:51" pos:end="5:51"><expr pos:start="5:51" pos:end="5:51"><literal type="number" pos:start="5:51" pos:end="5:51">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:22">(<expr pos:start="11:9" pos:end="11:21"><name pos:start="11:9" pos:end="11:21">debug_regions</name></expr>)</condition> <block pos:start="11:24" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:29">

        <expr_stmt pos:start="13:9" pos:end="13:37"><expr pos:start="13:9" pos:end="13:36"><call pos:start="13:9" pos:end="13:36"><name pos:start="13:9" pos:end="13:21">g_array_unref</name><argument_list pos:start="13:22" pos:end="13:36">(<argument pos:start="13:23" pos:end="13:35"><expr pos:start="13:23" pos:end="13:35"><name pos:start="13:23" pos:end="13:35">debug_regions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="15:9" pos:end="15:29"><expr pos:start="15:9" pos:end="15:28"><name pos:start="15:9" pos:end="15:21">debug_regions</name> <operator pos:start="15:23" pos:end="15:23">=</operator> <name pos:start="15:25" pos:end="15:28">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="21:5" pos:end="23:76"><expr pos:start="21:5" pos:end="23:75"><name pos:start="21:5" pos:end="21:17">debug_regions</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="23:75"><name pos:start="21:21" pos:end="21:37">g_array_sized_new</name><argument_list pos:start="21:38" pos:end="23:75">(<argument pos:start="21:39" pos:end="21:43"><expr pos:start="21:39" pos:end="21:43"><name pos:start="21:39" pos:end="21:43">FALSE</name></expr></argument>, <argument pos:start="21:46" pos:end="21:50"><expr pos:start="21:46" pos:end="21:50"><name pos:start="21:46" pos:end="21:50">FALSE</name></expr></argument>,

                                      <argument pos:start="23:39" pos:end="23:51"><expr pos:start="23:39" pos:end="23:51"><sizeof pos:start="23:39" pos:end="23:51">sizeof<argument_list pos:start="23:45" pos:end="23:51">(<argument pos:start="23:46" pos:end="23:50"><expr pos:start="23:46" pos:end="23:50"><name pos:start="23:46" pos:end="23:50">Range</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:54" pos:end="23:74"><expr pos:start="23:54" pos:end="23:74"><call pos:start="23:54" pos:end="23:74"><name pos:start="23:54" pos:end="23:66">g_strv_length</name><argument_list pos:start="23:67" pos:end="23:74">(<argument pos:start="23:68" pos:end="23:73"><expr pos:start="23:68" pos:end="23:73"><name pos:start="23:68" pos:end="23:73">ranges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="25:5" pos:end="137:5">for <control pos:start="25:9" pos:end="25:31">(<init pos:start="25:10" pos:end="25:15"><expr pos:start="25:10" pos:end="25:14"><name pos:start="25:10" pos:end="25:10">i</name> <operator pos:start="25:12" pos:end="25:12">=</operator> <literal type="number" pos:start="25:14" pos:end="25:14">0</literal></expr>;</init> <condition pos:start="25:17" pos:end="25:26"><expr pos:start="25:17" pos:end="25:25"><name pos:start="25:17" pos:end="25:25"><name pos:start="25:17" pos:end="25:22">ranges</name><index pos:start="25:23" pos:end="25:25">[<expr pos:start="25:24" pos:end="25:24"><name pos:start="25:24" pos:end="25:24">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="25:28" pos:end="25:30"><expr pos:start="25:28" pos:end="25:30"><name pos:start="25:28" pos:end="25:28">i</name><operator pos:start="25:29" pos:end="25:30">++</operator></expr></incr>)</control> <block pos:start="25:33" pos:end="137:5">{<block_content pos:start="27:9" pos:end="135:49">

        <decl_stmt pos:start="27:9" pos:end="27:34"><decl pos:start="27:9" pos:end="27:33"><type pos:start="27:9" pos:end="27:20"><specifier pos:start="27:9" pos:end="27:13">const</specifier> <name pos:start="27:15" pos:end="27:18">char</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:21">r</name> <init pos:start="27:23" pos:end="27:33">= <expr pos:start="27:25" pos:end="27:33"><name pos:start="27:25" pos:end="27:33"><name pos:start="27:25" pos:end="27:30">ranges</name><index pos:start="27:31" pos:end="27:33">[<expr pos:start="27:32" pos:end="27:32"><name pos:start="27:32" pos:end="27:32">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:38"><decl pos:start="29:9" pos:end="29:28"><type pos:start="29:9" pos:end="29:20"><specifier pos:start="29:9" pos:end="29:13">const</specifier> <name pos:start="29:15" pos:end="29:18">char</name> <modifier pos:start="29:20" pos:end="29:20">*</modifier></type><name pos:start="29:21" pos:end="29:28">range_op</name></decl>, <decl pos:start="29:31" pos:end="29:33"><type ref="prev" pos:start="29:9" pos:end="29:20"><modifier pos:start="29:31" pos:end="29:31">*</modifier></type><name pos:start="29:32" pos:end="29:33">r2</name></decl>, <decl pos:start="29:36" pos:end="29:37"><type ref="prev" pos:start="29:9" pos:end="29:20"><modifier pos:start="29:36" pos:end="29:36">*</modifier></type><name pos:start="29:37" pos:end="29:37">e</name></decl>;</decl_stmt>

        <decl_stmt pos:start="31:9" pos:end="31:40"><decl pos:start="31:9" pos:end="31:22"><type pos:start="31:9" pos:end="31:16"><name pos:start="31:9" pos:end="31:16">uint64_t</name></type> <name pos:start="31:18" pos:end="31:22">r1val</name></decl>, <decl pos:start="31:25" pos:end="31:29"><type ref="prev" pos:start="31:9" pos:end="31:16"/><name pos:start="31:25" pos:end="31:29">r2val</name></decl>, <decl pos:start="31:32" pos:end="31:34"><type ref="prev" pos:start="31:9" pos:end="31:16"/><name pos:start="31:32" pos:end="31:34">lob</name></decl>, <decl pos:start="31:37" pos:end="31:39"><type ref="prev" pos:start="31:9" pos:end="31:16"/><name pos:start="31:37" pos:end="31:39">upb</name></decl>;</decl_stmt>

        <decl_stmt pos:start="33:9" pos:end="33:27"><decl pos:start="33:9" pos:end="33:26"><type pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:14">struct</name> <name pos:start="33:16" pos:end="33:20">Range</name></name></type> <name pos:start="33:22" pos:end="33:26">range</name></decl>;</decl_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:34"><expr pos:start="37:9" pos:end="37:33"><name pos:start="37:9" pos:end="37:16">range_op</name> <operator pos:start="37:18" pos:end="37:18">=</operator> <call pos:start="37:20" pos:end="37:33"><name pos:start="37:20" pos:end="37:25">strstr</name><argument_list pos:start="37:26" pos:end="37:33">(<argument pos:start="37:27" pos:end="37:27"><expr pos:start="37:27" pos:end="37:27"><name pos:start="37:27" pos:end="37:27">r</name></expr></argument>, <argument pos:start="37:30" pos:end="37:32"><expr pos:start="37:30" pos:end="37:32"><literal type="string" pos:start="37:30" pos:end="37:32">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:44"><expr pos:start="39:9" pos:end="39:43"><name pos:start="39:9" pos:end="39:10">r2</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <ternary pos:start="39:14" pos:end="39:43"><condition pos:start="39:14" pos:end="39:23"><expr pos:start="39:14" pos:end="39:21"><name pos:start="39:14" pos:end="39:21">range_op</name></expr> ?</condition><then pos:start="39:25" pos:end="39:36"> <expr pos:start="39:25" pos:end="39:36"><name pos:start="39:25" pos:end="39:32">range_op</name> <operator pos:start="39:34" pos:end="39:34">+</operator> <literal type="number" pos:start="39:36" pos:end="39:36">1</literal></expr> </then><else pos:start="39:38" pos:end="39:43">: <expr pos:start="39:40" pos:end="39:43"><name pos:start="39:40" pos:end="39:43">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:22">(<expr pos:start="41:13" pos:end="41:21"><operator pos:start="41:13" pos:end="41:13">!</operator><name pos:start="41:14" pos:end="41:21">range_op</name></expr>)</condition> <block pos:start="41:24" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:48">

            <expr_stmt pos:start="43:13" pos:end="43:38"><expr pos:start="43:13" pos:end="43:37"><name pos:start="43:13" pos:end="43:20">range_op</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:37"><name pos:start="43:24" pos:end="43:29">strstr</name><argument_list pos:start="43:30" pos:end="43:37">(<argument pos:start="43:31" pos:end="43:31"><expr pos:start="43:31" pos:end="43:31"><name pos:start="43:31" pos:end="43:31">r</name></expr></argument>, <argument pos:start="43:34" pos:end="43:36"><expr pos:start="43:34" pos:end="43:36"><literal type="string" pos:start="43:34" pos:end="43:36">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:48"><expr pos:start="45:13" pos:end="45:47"><name pos:start="45:13" pos:end="45:14">r2</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <ternary pos:start="45:18" pos:end="45:47"><condition pos:start="45:18" pos:end="45:27"><expr pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:25">range_op</name></expr> ?</condition><then pos:start="45:29" pos:end="45:40"> <expr pos:start="45:29" pos:end="45:40"><name pos:start="45:29" pos:end="45:36">range_op</name> <operator pos:start="45:38" pos:end="45:38">+</operator> <literal type="number" pos:start="45:40" pos:end="45:40">1</literal></expr> </then><else pos:start="45:42" pos:end="45:47">: <expr pos:start="45:44" pos:end="45:47"><name pos:start="45:44" pos:end="45:47">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="49:9" pos:end="55:9"><if pos:start="49:9" pos:end="55:9">if <condition pos:start="49:12" pos:end="49:22">(<expr pos:start="49:13" pos:end="49:21"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:21">range_op</name></expr>)</condition> <block pos:start="49:24" pos:end="55:9">{<block_content pos:start="51:13" pos:end="53:48">

            <expr_stmt pos:start="51:13" pos:end="51:39"><expr pos:start="51:13" pos:end="51:38"><name pos:start="51:13" pos:end="51:20">range_op</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <call pos:start="51:24" pos:end="51:38"><name pos:start="51:24" pos:end="51:29">strstr</name><argument_list pos:start="51:30" pos:end="51:38">(<argument pos:start="51:31" pos:end="51:31"><expr pos:start="51:31" pos:end="51:31"><name pos:start="51:31" pos:end="51:31">r</name></expr></argument>, <argument pos:start="51:34" pos:end="51:37"><expr pos:start="51:34" pos:end="51:37"><literal type="string" pos:start="51:34" pos:end="51:37">".."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="53:13" pos:end="53:48"><expr pos:start="53:13" pos:end="53:47"><name pos:start="53:13" pos:end="53:14">r2</name> <operator pos:start="53:16" pos:end="53:16">=</operator> <ternary pos:start="53:18" pos:end="53:47"><condition pos:start="53:18" pos:end="53:27"><expr pos:start="53:18" pos:end="53:25"><name pos:start="53:18" pos:end="53:25">range_op</name></expr> ?</condition><then pos:start="53:29" pos:end="53:40"> <expr pos:start="53:29" pos:end="53:40"><name pos:start="53:29" pos:end="53:36">range_op</name> <operator pos:start="53:38" pos:end="53:38">+</operator> <literal type="number" pos:start="53:40" pos:end="53:40">2</literal></expr> </then><else pos:start="53:42" pos:end="53:47">: <expr pos:start="53:44" pos:end="53:47"><name pos:start="53:44" pos:end="53:47">NULL</name></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="63:9"><if pos:start="57:9" pos:end="63:9">if <condition pos:start="57:12" pos:end="57:22">(<expr pos:start="57:13" pos:end="57:21"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:21">range_op</name></expr>)</condition> <block pos:start="57:24" pos:end="63:9">{<block_content pos:start="59:13" pos:end="61:21">

            <expr_stmt pos:start="59:13" pos:end="59:52"><expr pos:start="59:13" pos:end="59:51"><call pos:start="59:13" pos:end="59:51"><name pos:start="59:13" pos:end="59:22">error_setg</name><argument_list pos:start="59:23" pos:end="59:51">(<argument pos:start="59:24" pos:end="59:27"><expr pos:start="59:24" pos:end="59:27"><name pos:start="59:24" pos:end="59:27">errp</name></expr></argument>, <argument pos:start="59:30" pos:end="59:50"><expr pos:start="59:30" pos:end="59:50"><literal type="string" pos:start="59:30" pos:end="59:50">"Bad range specifier"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="61:13" pos:end="61:21">goto <name pos:start="61:18" pos:end="61:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="67:9" pos:end="77:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="69:29">(<expr pos:start="67:13" pos:end="69:28"><call pos:start="67:13" pos:end="67:43"><name pos:start="67:13" pos:end="67:25">qemu_strtoull</name><argument_list pos:start="67:26" pos:end="67:43">(<argument pos:start="67:27" pos:end="67:27"><expr pos:start="67:27" pos:end="67:27"><name pos:start="67:27" pos:end="67:27">r</name></expr></argument>, <argument pos:start="67:30" pos:end="67:31"><expr pos:start="67:30" pos:end="67:31"><operator pos:start="67:30" pos:end="67:30">&amp;</operator><name pos:start="67:31" pos:end="67:31">e</name></expr></argument>, <argument pos:start="67:34" pos:end="67:34"><expr pos:start="67:34" pos:end="67:34"><literal type="number" pos:start="67:34" pos:end="67:34">0</literal></expr></argument>, <argument pos:start="67:37" pos:end="67:42"><expr pos:start="67:37" pos:end="67:42"><operator pos:start="67:37" pos:end="67:37">&amp;</operator><name pos:start="67:38" pos:end="67:42">r1val</name></expr></argument>)</argument_list></call>

            <operator pos:start="69:13" pos:end="69:14">||</operator> <name pos:start="69:16" pos:end="69:16">e</name> <operator pos:start="69:18" pos:end="69:19">!=</operator> <name pos:start="69:21" pos:end="69:28">range_op</name></expr>)</condition> <block pos:start="69:31" pos:end="77:9">{<block_content pos:start="71:13" pos:end="75:21">

            <expr_stmt pos:start="71:13" pos:end="73:55"><expr pos:start="71:13" pos:end="73:54"><call pos:start="71:13" pos:end="73:54"><name pos:start="71:13" pos:end="71:22">error_setg</name><argument_list pos:start="71:23" pos:end="73:54">(<argument pos:start="71:24" pos:end="71:27"><expr pos:start="71:24" pos:end="71:27"><name pos:start="71:24" pos:end="71:27">errp</name></expr></argument>, <argument pos:start="71:30" pos:end="71:65"><expr pos:start="71:30" pos:end="71:65"><literal type="string" pos:start="71:30" pos:end="71:65">"Invalid number to the left of %.*s"</literal></expr></argument>,

                       <argument pos:start="73:24" pos:end="73:43"><expr pos:start="73:24" pos:end="73:43"><operator pos:start="73:24" pos:end="73:24">(</operator><name pos:start="73:25" pos:end="73:27">int</name><operator pos:start="73:28" pos:end="73:28">)</operator><operator pos:start="73:29" pos:end="73:29">(</operator><name pos:start="73:30" pos:end="73:31">r2</name> <operator pos:start="73:33" pos:end="73:33">-</operator> <name pos:start="73:35" pos:end="73:42">range_op</name><operator pos:start="73:43" pos:end="73:43">)</operator></expr></argument>, <argument pos:start="73:46" pos:end="73:53"><expr pos:start="73:46" pos:end="73:53"><name pos:start="73:46" pos:end="73:53">range_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="75:13" pos:end="75:21">goto <name pos:start="75:18" pos:end="75:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="79:9" pos:end="87:9"><if pos:start="79:9" pos:end="87:9">if <condition pos:start="79:12" pos:end="79:47">(<expr pos:start="79:13" pos:end="79:46"><call pos:start="79:13" pos:end="79:46"><name pos:start="79:13" pos:end="79:25">qemu_strtoull</name><argument_list pos:start="79:26" pos:end="79:46">(<argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><name pos:start="79:27" pos:end="79:28">r2</name></expr></argument>, <argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">NULL</name></expr></argument>, <argument pos:start="79:37" pos:end="79:37"><expr pos:start="79:37" pos:end="79:37"><literal type="number" pos:start="79:37" pos:end="79:37">0</literal></expr></argument>, <argument pos:start="79:40" pos:end="79:45"><expr pos:start="79:40" pos:end="79:45"><operator pos:start="79:40" pos:end="79:40">&amp;</operator><name pos:start="79:41" pos:end="79:45">r2val</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:49" pos:end="87:9">{<block_content pos:start="81:13" pos:end="85:21">

            <expr_stmt pos:start="81:13" pos:end="83:55"><expr pos:start="81:13" pos:end="83:54"><call pos:start="81:13" pos:end="83:54"><name pos:start="81:13" pos:end="81:22">error_setg</name><argument_list pos:start="81:23" pos:end="83:54">(<argument pos:start="81:24" pos:end="81:27"><expr pos:start="81:24" pos:end="81:27"><name pos:start="81:24" pos:end="81:27">errp</name></expr></argument>, <argument pos:start="81:30" pos:end="81:66"><expr pos:start="81:30" pos:end="81:66"><literal type="string" pos:start="81:30" pos:end="81:66">"Invalid number to the right of %.*s"</literal></expr></argument>,

                       <argument pos:start="83:24" pos:end="83:43"><expr pos:start="83:24" pos:end="83:43"><operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:27">int</name><operator pos:start="83:28" pos:end="83:28">)</operator><operator pos:start="83:29" pos:end="83:29">(</operator><name pos:start="83:30" pos:end="83:31">r2</name> <operator pos:start="83:33" pos:end="83:33">-</operator> <name pos:start="83:35" pos:end="83:42">range_op</name><operator pos:start="83:43" pos:end="83:43">)</operator></expr></argument>, <argument pos:start="83:46" pos:end="83:53"><expr pos:start="83:46" pos:end="83:53"><name pos:start="83:46" pos:end="83:53">range_op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="85:13" pos:end="85:21">goto <name pos:start="85:18" pos:end="85:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <switch pos:start="91:9" pos:end="121:9">switch <condition pos:start="91:16" pos:end="91:26">(<expr pos:start="91:17" pos:end="91:25"><operator pos:start="91:17" pos:end="91:17">*</operator><name pos:start="91:18" pos:end="91:25">range_op</name></expr>)</condition> <block pos:start="91:28" pos:end="121:9">{<block_content pos:start="93:9" pos:end="119:35">

        <case pos:start="93:9" pos:end="93:17">case <expr pos:start="93:14" pos:end="93:16"><literal type="char" pos:start="93:14" pos:end="93:16">'+'</literal></expr>:</case>

            <expr_stmt pos:start="95:13" pos:end="95:24"><expr pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:15">lob</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:23">r1val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:36"><expr pos:start="97:13" pos:end="97:35"><name pos:start="97:13" pos:end="97:15">upb</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:23">r1val</name> <operator pos:start="97:25" pos:end="97:25">+</operator> <name pos:start="97:27" pos:end="97:31">r2val</name> <operator pos:start="97:33" pos:end="97:33">-</operator> <literal type="number" pos:start="97:35" pos:end="97:35">1</literal></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        <case pos:start="101:9" pos:end="101:17">case <expr pos:start="101:14" pos:end="101:16"><literal type="char" pos:start="101:14" pos:end="101:16">'-'</literal></expr>:</case>

            <expr_stmt pos:start="103:13" pos:end="103:24"><expr pos:start="103:13" pos:end="103:23"><name pos:start="103:13" pos:end="103:15">upb</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <name pos:start="103:19" pos:end="103:23">r1val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:38"><expr pos:start="105:13" pos:end="105:37"><name pos:start="105:13" pos:end="105:15">lob</name> <operator pos:start="105:17" pos:end="105:17">=</operator> <name pos:start="105:19" pos:end="105:23">r1val</name> <operator pos:start="105:25" pos:end="105:25">-</operator> <operator pos:start="105:27" pos:end="105:27">(</operator><name pos:start="105:28" pos:end="105:32">r2val</name> <operator pos:start="105:34" pos:end="105:34">-</operator> <literal type="number" pos:start="105:36" pos:end="105:36">1</literal><operator pos:start="105:37" pos:end="105:37">)</operator></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:17">case <expr pos:start="109:14" pos:end="109:16"><literal type="char" pos:start="109:14" pos:end="109:16">'.'</literal></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="111:24"><expr pos:start="111:13" pos:end="111:23"><name pos:start="111:13" pos:end="111:15">lob</name> <operator pos:start="111:17" pos:end="111:17">=</operator> <name pos:start="111:19" pos:end="111:23">r1val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:24"><expr pos:start="113:13" pos:end="113:23"><name pos:start="113:13" pos:end="113:15">upb</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:23">r2val</name></expr>;</expr_stmt>

            <break pos:start="115:13" pos:end="115:18">break;</break>

        <default pos:start="117:9" pos:end="117:16">default:</default>

            <expr_stmt pos:start="119:13" pos:end="119:35"><expr pos:start="119:13" pos:end="119:34"><call pos:start="119:13" pos:end="119:34"><name pos:start="119:13" pos:end="119:32">g_assert_not_reached</name><argument_list pos:start="119:33" pos:end="119:34">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <if_stmt pos:start="123:9" pos:end="129:9"><if pos:start="123:9" pos:end="129:9">if <condition pos:start="123:12" pos:end="123:57">(<expr pos:start="123:13" pos:end="123:56"><name pos:start="123:13" pos:end="123:15">lob</name> <operator pos:start="123:17" pos:end="123:17">&gt;</operator> <name pos:start="123:19" pos:end="123:21">upb</name> <operator pos:start="123:23" pos:end="123:24">||</operator> <operator pos:start="123:26" pos:end="123:26">(</operator><name pos:start="123:27" pos:end="123:29">lob</name> <operator pos:start="123:31" pos:end="123:32">==</operator> <literal type="number" pos:start="123:34" pos:end="123:34">0</literal> <operator pos:start="123:36" pos:end="123:37">&amp;&amp;</operator> <name pos:start="123:39" pos:end="123:41">upb</name> <operator pos:start="123:43" pos:end="123:44">==</operator> <name pos:start="123:46" pos:end="123:55">UINT64_MAX</name><operator pos:start="123:56" pos:end="123:56">)</operator></expr>)</condition> <block pos:start="123:59" pos:end="129:9">{<block_content pos:start="125:13" pos:end="127:21">

            <expr_stmt pos:start="125:13" pos:end="125:46"><expr pos:start="125:13" pos:end="125:45"><call pos:start="125:13" pos:end="125:45"><name pos:start="125:13" pos:end="125:22">error_setg</name><argument_list pos:start="125:23" pos:end="125:45">(<argument pos:start="125:24" pos:end="125:27"><expr pos:start="125:24" pos:end="125:27"><name pos:start="125:24" pos:end="125:27">errp</name></expr></argument>, <argument pos:start="125:30" pos:end="125:44"><expr pos:start="125:30" pos:end="125:44"><literal type="string" pos:start="125:30" pos:end="125:44">"Invalid range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="127:13" pos:end="127:21">goto <name pos:start="127:18" pos:end="127:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:19"><name pos:start="131:9" pos:end="131:13">range</name><operator pos:start="131:14" pos:end="131:14">.</operator><name pos:start="131:15" pos:end="131:19">begin</name></name> <operator pos:start="131:21" pos:end="131:21">=</operator> <name pos:start="131:23" pos:end="131:25">lob</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:28"><expr pos:start="133:9" pos:end="133:27"><name pos:start="133:9" pos:end="133:17"><name pos:start="133:9" pos:end="133:13">range</name><operator pos:start="133:14" pos:end="133:14">.</operator><name pos:start="133:15" pos:end="133:17">end</name></name> <operator pos:start="133:19" pos:end="133:19">=</operator> <name pos:start="133:21" pos:end="133:23">upb</name> <operator pos:start="133:25" pos:end="133:25">+</operator> <literal type="number" pos:start="133:27" pos:end="133:27">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:49"><expr pos:start="135:9" pos:end="135:48"><call pos:start="135:9" pos:end="135:48"><name pos:start="135:9" pos:end="135:26">g_array_append_val</name><argument_list pos:start="135:27" pos:end="135:48">(<argument pos:start="135:28" pos:end="135:40"><expr pos:start="135:28" pos:end="135:40"><name pos:start="135:28" pos:end="135:40">debug_regions</name></expr></argument>, <argument pos:start="135:43" pos:end="135:47"><expr pos:start="135:43" pos:end="135:47"><name pos:start="135:43" pos:end="135:47">range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<label pos:start="139:1" pos:end="139:4"><name pos:start="139:1" pos:end="139:3">out</name>:</label>

    <expr_stmt pos:start="141:5" pos:end="141:23"><expr pos:start="141:5" pos:end="141:22"><call pos:start="141:5" pos:end="141:22"><name pos:start="141:5" pos:end="141:14">g_strfreev</name><argument_list pos:start="141:15" pos:end="141:22">(<argument pos:start="141:16" pos:end="141:21"><expr pos:start="141:16" pos:end="141:21"><name pos:start="141:16" pos:end="141:21">ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
