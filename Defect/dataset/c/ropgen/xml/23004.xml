<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23004.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">bareetraxfs_init</name> <parameter_list pos:start="1:23" pos:end="7:74">(<parameter pos:start="1:24" pos:end="1:42"><decl pos:start="1:24" pos:end="1:42"><type pos:start="1:24" pos:end="1:42"><name pos:start="1:24" pos:end="1:33">ram_addr_t</name></type> <name pos:start="1:35" pos:end="1:42">ram_size</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:60">vga_ram_size</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:46"><decl pos:start="3:24" pos:end="3:46"><type pos:start="3:24" pos:end="3:46"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:33">char</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:46">boot_device</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:64"><decl pos:start="3:49" pos:end="3:64"><type pos:start="3:49" pos:end="3:64"><name pos:start="3:49" pos:end="3:60">DisplayState</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:64">ds</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:50"><decl pos:start="5:24" pos:end="5:50"><type pos:start="5:24" pos:end="5:50"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:33">char</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:50">kernel_filename</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:78"><decl pos:start="5:53" pos:end="5:78"><type pos:start="5:53" pos:end="5:78"><specifier pos:start="5:53" pos:end="5:57">const</specifier> <name pos:start="5:59" pos:end="5:62">char</name> <modifier pos:start="5:64" pos:end="5:64">*</modifier></type><name pos:start="5:65" pos:end="5:78">kernel_cmdline</name></decl></parameter>,

                       <parameter pos:start="7:24" pos:end="7:50"><decl pos:start="7:24" pos:end="7:50"><type pos:start="7:24" pos:end="7:50"><specifier pos:start="7:24" pos:end="7:28">const</specifier> <name pos:start="7:30" pos:end="7:33">char</name> <modifier pos:start="7:35" pos:end="7:35">*</modifier></type><name pos:start="7:36" pos:end="7:50">initrd_filename</name></decl></parameter>, <parameter pos:start="7:53" pos:end="7:73"><decl pos:start="7:53" pos:end="7:73"><type pos:start="7:53" pos:end="7:73"><specifier pos:start="7:53" pos:end="7:57">const</specifier> <name pos:start="7:59" pos:end="7:62">char</name> <modifier pos:start="7:64" pos:end="7:64">*</modifier></type><name pos:start="7:65" pos:end="7:73">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="207:1">{<block_content pos:start="11:5" pos:end="205:41">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:24"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:10">struct</name> <name pos:start="13:12" pos:end="13:22">etraxfs_pic</name></name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:27">pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:22">etraxfs_dmac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:53"><decl pos:start="17:5" pos:end="17:52"><type pos:start="17:5" pos:end="17:31"><name pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:29">etraxfs_dma_client</name></name> <modifier pos:start="17:31" pos:end="17:31">*</modifier></type><name pos:start="17:32" pos:end="17:37"><name pos:start="17:32" pos:end="17:34">eth</name><index pos:start="17:35" pos:end="17:37">[<expr pos:start="17:36" pos:end="17:36"><literal type="number" pos:start="17:36" pos:end="17:36">2</literal></expr>]</index></name> <init pos:start="17:39" pos:end="17:52">= <expr pos:start="17:41" pos:end="17:52"><block pos:start="17:41" pos:end="17:52">{<expr pos:start="17:42" pos:end="17:45"><name pos:start="17:42" pos:end="17:45">NULL</name></expr>, <expr pos:start="17:48" pos:end="17:51"><name pos:start="17:48" pos:end="17:51">NULL</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:10"><decl pos:start="21:5" pos:end="21:9"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:24"><decl pos:start="23:5" pos:end="23:23"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:23">phys_ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:14">ram_addr_t</name></type> <name pos:start="25:16" pos:end="25:25">phys_flash</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:14">ram_addr_t</name></type> <name pos:start="27:16" pos:end="27:26">phys_intmem</name></decl>;</decl_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:19">/* init CPUs */</comment>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:26">(<expr pos:start="33:9" pos:end="33:25"><name pos:start="33:9" pos:end="33:17">cpu_model</name> <operator pos:start="33:19" pos:end="33:20">==</operator> <name pos:start="33:22" pos:end="33:25">NULL</name></expr>)</condition> <block pos:start="33:28" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:30">

        <expr_stmt pos:start="35:9" pos:end="35:30"><expr pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:17">cpu_model</name> <operator pos:start="35:19" pos:end="35:19">=</operator> <literal type="string" pos:start="35:21" pos:end="35:29">"crisv32"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:7">env</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:29"><name pos:start="39:11" pos:end="39:18">cpu_init</name><argument_list pos:start="39:19" pos:end="39:29">(<argument pos:start="39:20" pos:end="39:28"><expr pos:start="39:20" pos:end="39:28"><name pos:start="39:20" pos:end="39:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><call pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:23">qemu_register_reset</name><argument_list pos:start="41:24" pos:end="41:44">(<argument pos:start="41:25" pos:end="41:38"><expr pos:start="41:25" pos:end="41:38"><name pos:start="41:25" pos:end="41:38">main_cpu_reset</name></expr></argument>, <argument pos:start="41:41" pos:end="41:43"><expr pos:start="41:41" pos:end="41:43"><name pos:start="41:41" pos:end="41:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:40"><expr pos:start="47:5" pos:end="47:39"><name pos:start="47:5" pos:end="47:12">phys_ram</name> <operator pos:start="47:14" pos:end="47:14">=</operator> <call pos:start="47:16" pos:end="47:39"><name pos:start="47:16" pos:end="47:29">qemu_ram_alloc</name><argument_list pos:start="47:30" pos:end="47:39">(<argument pos:start="47:31" pos:end="47:38"><expr pos:start="47:31" pos:end="47:38"><name pos:start="47:31" pos:end="47:38">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:78"><expr pos:start="49:5" pos:end="49:77"><call pos:start="49:5" pos:end="49:77"><name pos:start="49:5" pos:end="49:32">cpu_register_physical_memory</name><argument_list pos:start="49:33" pos:end="49:77">(<argument pos:start="49:34" pos:end="49:43"><expr pos:start="49:34" pos:end="49:43"><literal type="number" pos:start="49:34" pos:end="49:43">0x40000000</literal></expr></argument>, <argument pos:start="49:46" pos:end="49:53"><expr pos:start="49:46" pos:end="49:53"><name pos:start="49:46" pos:end="49:53">ram_size</name></expr></argument>, <argument pos:start="49:56" pos:end="49:76"><expr pos:start="49:56" pos:end="49:76"><name pos:start="49:56" pos:end="49:63">phys_ram</name> <operator pos:start="49:65" pos:end="49:65">|</operator> <name pos:start="49:67" pos:end="49:76">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="55:27">/* The ETRAX-FS has 128Kb on chip ram, the docs refer to it as the 

       internal memory.  */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:46"><expr pos:start="57:5" pos:end="57:45"><name pos:start="57:5" pos:end="57:15">phys_intmem</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:45"><name pos:start="57:19" pos:end="57:32">qemu_ram_alloc</name><argument_list pos:start="57:33" pos:end="57:45">(<argument pos:start="57:34" pos:end="57:44"><expr pos:start="57:34" pos:end="57:44"><name pos:start="57:34" pos:end="57:44">INTMEM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="61:59"><expr pos:start="59:5" pos:end="61:58"><call pos:start="59:5" pos:end="61:58"><name pos:start="59:5" pos:end="59:32">cpu_register_physical_memory</name><argument_list pos:start="59:33" pos:end="61:58">(<argument pos:start="59:34" pos:end="59:43"><expr pos:start="59:34" pos:end="59:43"><literal type="number" pos:start="59:34" pos:end="59:43">0x38000000</literal></expr></argument>, <argument pos:start="59:46" pos:end="59:56"><expr pos:start="59:46" pos:end="59:56"><name pos:start="59:46" pos:end="59:56">INTMEM_SIZE</name></expr></argument>,

                                 <argument pos:start="61:34" pos:end="61:57"><expr pos:start="61:34" pos:end="61:57"><name pos:start="61:34" pos:end="61:44">phys_intmem</name> <operator pos:start="61:46" pos:end="61:46">|</operator> <name pos:start="61:48" pos:end="61:57">IO_MEM_RAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:14">phys_flash</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <call pos:start="67:18" pos:end="67:43"><name pos:start="67:18" pos:end="67:31">qemu_ram_alloc</name><argument_list pos:start="67:32" pos:end="67:43">(<argument pos:start="67:33" pos:end="67:42"><expr pos:start="67:33" pos:end="67:42"><name pos:start="67:33" pos:end="67:42">FLASH_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:41"><expr pos:start="69:5" pos:end="69:40"><name pos:start="69:5" pos:end="69:5">i</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <call pos:start="69:9" pos:end="69:40"><name pos:start="69:9" pos:end="69:23">drive_get_index</name><argument_list pos:start="69:24" pos:end="69:40">(<argument pos:start="69:25" pos:end="69:33"><expr pos:start="69:25" pos:end="69:33"><name pos:start="69:25" pos:end="69:33">IF_PFLASH</name></expr></argument>, <argument pos:start="69:36" pos:end="69:36"><expr pos:start="69:36" pos:end="69:36"><literal type="number" pos:start="69:36" pos:end="69:36">0</literal></expr></argument>, <argument pos:start="69:39" pos:end="69:39"><expr pos:start="69:39" pos:end="69:39"><literal type="number" pos:start="69:39" pos:end="69:39">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="79:40"><expr pos:start="71:5" pos:end="79:39"><call pos:start="71:5" pos:end="79:39"><name pos:start="71:5" pos:end="71:25">pflash_cfi02_register</name><argument_list pos:start="71:26" pos:end="79:39">(<argument pos:start="71:27" pos:end="71:29"><expr pos:start="71:27" pos:end="71:29"><literal type="number" pos:start="71:27" pos:end="71:29">0x0</literal></expr></argument>, <argument pos:start="71:32" pos:end="71:41"><expr pos:start="71:32" pos:end="71:41"><name pos:start="71:32" pos:end="71:41">phys_flash</name></expr></argument>,

                          <argument pos:start="73:27" pos:end="73:63"><expr pos:start="73:27" pos:end="73:63"><ternary pos:start="73:27" pos:end="73:63"><condition pos:start="73:27" pos:end="73:35"><expr pos:start="73:27" pos:end="73:33"><name pos:start="73:27" pos:end="73:27">i</name> <operator pos:start="73:29" pos:end="73:30">!=</operator> <operator pos:start="73:32" pos:end="73:32">-</operator><literal type="number" pos:start="73:33" pos:end="73:33">1</literal></expr> ?</condition><then pos:start="73:37" pos:end="73:56"> <expr pos:start="73:37" pos:end="73:56"><name pos:start="73:37" pos:end="73:51"><name pos:start="73:37" pos:end="73:48">drives_table</name><index pos:start="73:49" pos:end="73:51">[<expr pos:start="73:50" pos:end="73:50"><name pos:start="73:50" pos:end="73:50">i</name></expr>]</index></name><operator pos:start="73:52" pos:end="73:52">.</operator><name pos:start="73:53" pos:end="73:56">bdrv</name></expr> </then><else pos:start="73:58" pos:end="73:63">: <expr pos:start="73:60" pos:end="73:63"><name pos:start="73:60" pos:end="73:63">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="73:66" pos:end="73:76"><expr pos:start="73:66" pos:end="73:76"><operator pos:start="73:66" pos:end="73:66">(</operator><literal type="number" pos:start="73:67" pos:end="73:68">64</literal> <operator pos:start="73:70" pos:end="73:70">*</operator> <literal type="number" pos:start="73:72" pos:end="73:75">1024</literal><operator pos:start="73:76" pos:end="73:76">)</operator></expr></argument>,

                          <argument pos:start="75:27" pos:end="75:42"><expr pos:start="75:27" pos:end="75:42"><name pos:start="75:27" pos:end="75:36">FLASH_SIZE</name> <operator pos:start="75:38" pos:end="75:39">&gt;&gt;</operator> <literal type="number" pos:start="75:41" pos:end="75:42">16</literal></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:27"><expr pos:start="77:27" pos:end="77:27"><literal type="number" pos:start="77:27" pos:end="77:27">1</literal></expr></argument>, <argument pos:start="77:30" pos:end="77:30"><expr pos:start="77:30" pos:end="77:30"><literal type="number" pos:start="77:30" pos:end="77:30">2</literal></expr></argument>, <argument pos:start="77:33" pos:end="77:38"><expr pos:start="77:33" pos:end="77:38"><literal type="number" pos:start="77:33" pos:end="77:38">0x0000</literal></expr></argument>, <argument pos:start="77:41" pos:end="77:46"><expr pos:start="77:41" pos:end="77:46"><literal type="number" pos:start="77:41" pos:end="77:46">0x0000</literal></expr></argument>, <argument pos:start="77:49" pos:end="77:54"><expr pos:start="77:49" pos:end="77:54"><literal type="number" pos:start="77:49" pos:end="77:54">0x0000</literal></expr></argument>, <argument pos:start="77:57" pos:end="77:62"><expr pos:start="77:57" pos:end="77:62"><literal type="number" pos:start="77:57" pos:end="77:62">0x0000</literal></expr></argument>,

                          <argument pos:start="79:27" pos:end="79:31"><expr pos:start="79:27" pos:end="79:31"><literal type="number" pos:start="79:27" pos:end="79:31">0x555</literal></expr></argument>, <argument pos:start="79:34" pos:end="79:38"><expr pos:start="79:34" pos:end="79:38"><literal type="number" pos:start="79:34" pos:end="79:38">0x2aa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:44"><expr pos:start="81:5" pos:end="81:43"><name pos:start="81:5" pos:end="81:7">pic</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:43"><name pos:start="81:11" pos:end="81:26">etraxfs_pic_init</name><argument_list pos:start="81:27" pos:end="81:43">(<argument pos:start="81:28" pos:end="81:30"><expr pos:start="81:28" pos:end="81:30"><name pos:start="81:28" pos:end="81:30">env</name></expr></argument>, <argument pos:start="81:33" pos:end="81:42"><expr pos:start="81:33" pos:end="81:42"><literal type="number" pos:start="81:33" pos:end="81:42">0x3001c000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:58"><expr pos:start="83:5" pos:end="83:57"><name pos:start="83:5" pos:end="83:16">etraxfs_dmac</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <call pos:start="83:20" pos:end="83:57"><name pos:start="83:20" pos:end="83:36">etraxfs_dmac_init</name><argument_list pos:start="83:37" pos:end="83:57">(<argument pos:start="83:38" pos:end="83:40"><expr pos:start="83:38" pos:end="83:40"><name pos:start="83:38" pos:end="83:40">env</name></expr></argument>, <argument pos:start="83:43" pos:end="83:52"><expr pos:start="83:43" pos:end="83:52"><literal type="number" pos:start="83:43" pos:end="83:52">0x30000000</literal></expr></argument>, <argument pos:start="83:55" pos:end="83:56"><expr pos:start="83:55" pos:end="83:56"><literal type="number" pos:start="83:55" pos:end="83:56">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="85:5" pos:end="91:5">for <control pos:start="85:9" pos:end="85:28">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:23"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <literal type="number" pos:start="85:21" pos:end="85:22">10</literal></expr>;</condition> <incr pos:start="85:25" pos:end="85:27"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:25">i</name><operator pos:start="85:26" pos:end="85:27">++</operator></expr></incr>)</control> <block pos:start="85:30" pos:end="91:5">{<block_content pos:start="89:9" pos:end="89:71">

        <comment type="block" pos:start="87:9" pos:end="87:58">/* On ETRAX, odd numbered channels are inputs.  */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:71"><expr pos:start="89:9" pos:end="89:70"><call pos:start="89:9" pos:end="89:70"><name pos:start="89:9" pos:end="89:28">etraxfs_dmac_connect</name><argument_list pos:start="89:29" pos:end="89:70">(<argument pos:start="89:30" pos:end="89:41"><expr pos:start="89:30" pos:end="89:41"><name pos:start="89:30" pos:end="89:41">etraxfs_dmac</name></expr></argument>, <argument pos:start="89:44" pos:end="89:44"><expr pos:start="89:44" pos:end="89:44"><name pos:start="89:44" pos:end="89:44">i</name></expr></argument>, <argument pos:start="89:47" pos:end="89:62"><expr pos:start="89:47" pos:end="89:62"><name pos:start="89:47" pos:end="89:54"><name pos:start="89:47" pos:end="89:49">pic</name><operator pos:start="89:50" pos:end="89:51">-&gt;</operator><name pos:start="89:52" pos:end="89:54">irq</name></name> <operator pos:start="89:56" pos:end="89:56">+</operator> <literal type="number" pos:start="89:58" pos:end="89:60">7</literal> <operator pos:start="89:60" pos:end="89:60">+</operator> <name pos:start="89:62" pos:end="89:62">i</name></expr></argument>, <argument pos:start="89:65" pos:end="89:69"><expr pos:start="89:65" pos:end="89:69"><name pos:start="89:65" pos:end="89:65">i</name> <operator pos:start="89:67" pos:end="89:67">&amp;</operator> <literal type="number" pos:start="89:69" pos:end="89:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="95:5" pos:end="95:39">/* Add the two ethernet blocks.  */</comment>

    <expr_stmt pos:start="97:5" pos:end="97:76"><expr pos:start="97:5" pos:end="97:75"><name pos:start="97:5" pos:end="97:10"><name pos:start="97:5" pos:end="97:7">eth</name><index pos:start="97:8" pos:end="97:10">[<expr pos:start="97:9" pos:end="97:9"><literal type="number" pos:start="97:9" pos:end="97:9">0</literal></expr>]</index></name> <operator pos:start="97:12" pos:end="97:12">=</operator> <call pos:start="97:14" pos:end="97:75"><name pos:start="97:14" pos:end="97:29">etraxfs_eth_init</name><argument_list pos:start="97:30" pos:end="97:75">(<argument pos:start="97:31" pos:end="97:42"><expr pos:start="97:31" pos:end="97:42"><operator pos:start="97:31" pos:end="97:31">&amp;</operator><name pos:start="97:32" pos:end="97:42"><name pos:start="97:32" pos:end="97:39">nd_table</name><index pos:start="97:40" pos:end="97:42">[<expr pos:start="97:41" pos:end="97:41"><literal type="number" pos:start="97:41" pos:end="97:41">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:45" pos:end="97:47"><expr pos:start="97:45" pos:end="97:47"><name pos:start="97:45" pos:end="97:47">env</name></expr></argument>, <argument pos:start="97:50" pos:end="97:62"><expr pos:start="97:50" pos:end="97:62"><name pos:start="97:50" pos:end="97:57"><name pos:start="97:50" pos:end="97:52">pic</name><operator pos:start="97:53" pos:end="97:54">-&gt;</operator><name pos:start="97:55" pos:end="97:57">irq</name></name> <operator pos:start="97:59" pos:end="97:59">+</operator> <literal type="number" pos:start="97:61" pos:end="97:62">25</literal></expr></argument>, <argument pos:start="97:65" pos:end="97:74"><expr pos:start="97:65" pos:end="97:74"><literal type="number" pos:start="97:65" pos:end="97:74">0x30034000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="101:80"><if pos:start="99:5" pos:end="101:80">if <condition pos:start="99:8" pos:end="99:20">(<expr pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:15">nb_nics</name> <operator pos:start="99:17" pos:end="99:17">&gt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">1</literal></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:80"><block_content pos:start="101:9" pos:end="101:80">

        <expr_stmt pos:start="101:9" pos:end="101:80"><expr pos:start="101:9" pos:end="101:79"><name pos:start="101:9" pos:end="101:14"><name pos:start="101:9" pos:end="101:11">eth</name><index pos:start="101:12" pos:end="101:14">[<expr pos:start="101:13" pos:end="101:13"><literal type="number" pos:start="101:13" pos:end="101:13">1</literal></expr>]</index></name> <operator pos:start="101:16" pos:end="101:16">=</operator> <call pos:start="101:18" pos:end="101:79"><name pos:start="101:18" pos:end="101:33">etraxfs_eth_init</name><argument_list pos:start="101:34" pos:end="101:79">(<argument pos:start="101:35" pos:end="101:46"><expr pos:start="101:35" pos:end="101:46"><operator pos:start="101:35" pos:end="101:35">&amp;</operator><name pos:start="101:36" pos:end="101:46"><name pos:start="101:36" pos:end="101:43">nd_table</name><index pos:start="101:44" pos:end="101:46">[<expr pos:start="101:45" pos:end="101:45"><literal type="number" pos:start="101:45" pos:end="101:45">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="101:49" pos:end="101:51"><expr pos:start="101:49" pos:end="101:51"><name pos:start="101:49" pos:end="101:51">env</name></expr></argument>, <argument pos:start="101:54" pos:end="101:66"><expr pos:start="101:54" pos:end="101:66"><name pos:start="101:54" pos:end="101:61"><name pos:start="101:54" pos:end="101:56">pic</name><operator pos:start="101:57" pos:end="101:58">-&gt;</operator><name pos:start="101:59" pos:end="101:61">irq</name></name> <operator pos:start="101:63" pos:end="101:63">+</operator> <literal type="number" pos:start="101:65" pos:end="101:66">26</literal></expr></argument>, <argument pos:start="101:69" pos:end="101:78"><expr pos:start="101:69" pos:end="101:78"><literal type="number" pos:start="101:69" pos:end="101:78">0x30036000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:71">/* The DMA Connector block is missing, hardwire things for now.  */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:57"><expr pos:start="107:5" pos:end="107:56"><call pos:start="107:5" pos:end="107:56"><name pos:start="107:5" pos:end="107:31">etraxfs_dmac_connect_client</name><argument_list pos:start="107:32" pos:end="107:56">(<argument pos:start="107:33" pos:end="107:44"><expr pos:start="107:33" pos:end="107:44"><name pos:start="107:33" pos:end="107:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="107:47" pos:end="107:47"><expr pos:start="107:47" pos:end="107:47"><literal type="number" pos:start="107:47" pos:end="107:47">0</literal></expr></argument>, <argument pos:start="107:50" pos:end="107:55"><expr pos:start="107:50" pos:end="107:55"><name pos:start="107:50" pos:end="107:55"><name pos:start="107:50" pos:end="107:52">eth</name><index pos:start="107:53" pos:end="107:55">[<expr pos:start="107:54" pos:end="107:54"><literal type="number" pos:start="107:54" pos:end="107:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="109:5" pos:end="109:61"><expr pos:start="109:5" pos:end="109:60"><call pos:start="109:5" pos:end="109:60"><name pos:start="109:5" pos:end="109:31">etraxfs_dmac_connect_client</name><argument_list pos:start="109:32" pos:end="109:60">(<argument pos:start="109:33" pos:end="109:44"><expr pos:start="109:33" pos:end="109:44"><name pos:start="109:33" pos:end="109:44">etraxfs_dmac</name></expr></argument>, <argument pos:start="109:47" pos:end="109:47"><expr pos:start="109:47" pos:end="109:47"><literal type="number" pos:start="109:47" pos:end="109:47">1</literal></expr></argument>, <argument pos:start="109:50" pos:end="109:59"><expr pos:start="109:50" pos:end="109:59"><name pos:start="109:50" pos:end="109:55"><name pos:start="109:50" pos:end="109:52">eth</name><index pos:start="109:53" pos:end="109:55">[<expr pos:start="109:54" pos:end="109:54"><literal type="number" pos:start="109:54" pos:end="109:54">0</literal></expr>]</index></name> <operator pos:start="109:57" pos:end="109:57">+</operator> <literal type="number" pos:start="109:59" pos:end="109:59">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:15">(<expr pos:start="111:9" pos:end="111:14"><name pos:start="111:9" pos:end="111:14"><name pos:start="111:9" pos:end="111:11">eth</name><index pos:start="111:12" pos:end="111:14">[<expr pos:start="111:13" pos:end="111:13"><literal type="number" pos:start="111:13" pos:end="111:13">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="111:17" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:65">

        <expr_stmt pos:start="113:9" pos:end="113:61"><expr pos:start="113:9" pos:end="113:60"><call pos:start="113:9" pos:end="113:60"><name pos:start="113:9" pos:end="113:35">etraxfs_dmac_connect_client</name><argument_list pos:start="113:36" pos:end="113:60">(<argument pos:start="113:37" pos:end="113:48"><expr pos:start="113:37" pos:end="113:48"><name pos:start="113:37" pos:end="113:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="113:51" pos:end="113:51"><expr pos:start="113:51" pos:end="113:51"><literal type="number" pos:start="113:51" pos:end="113:51">6</literal></expr></argument>, <argument pos:start="113:54" pos:end="113:59"><expr pos:start="113:54" pos:end="113:59"><name pos:start="113:54" pos:end="113:59"><name pos:start="113:54" pos:end="113:56">eth</name><index pos:start="113:57" pos:end="113:59">[<expr pos:start="113:58" pos:end="113:58"><literal type="number" pos:start="113:58" pos:end="113:58">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:65"><expr pos:start="115:9" pos:end="115:64"><call pos:start="115:9" pos:end="115:64"><name pos:start="115:9" pos:end="115:35">etraxfs_dmac_connect_client</name><argument_list pos:start="115:36" pos:end="115:64">(<argument pos:start="115:37" pos:end="115:48"><expr pos:start="115:37" pos:end="115:48"><name pos:start="115:37" pos:end="115:48">etraxfs_dmac</name></expr></argument>, <argument pos:start="115:51" pos:end="115:51"><expr pos:start="115:51" pos:end="115:51"><literal type="number" pos:start="115:51" pos:end="115:51">7</literal></expr></argument>, <argument pos:start="115:54" pos:end="115:63"><expr pos:start="115:54" pos:end="115:63"><name pos:start="115:54" pos:end="115:59"><name pos:start="115:54" pos:end="115:56">eth</name><index pos:start="115:57" pos:end="115:59">[<expr pos:start="115:58" pos:end="115:58"><literal type="number" pos:start="115:58" pos:end="115:58">1</literal></expr>]</index></name> <operator pos:start="115:61" pos:end="115:61">+</operator> <literal type="number" pos:start="115:63" pos:end="115:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:20">/* 2 timers.  */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:71"><expr pos:start="123:5" pos:end="123:70"><call pos:start="123:5" pos:end="123:70"><name pos:start="123:5" pos:end="123:22">etraxfs_timer_init</name><argument_list pos:start="123:23" pos:end="123:70">(<argument pos:start="123:24" pos:end="123:26"><expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">env</name></expr></argument>, <argument pos:start="123:29" pos:end="123:43"><expr pos:start="123:29" pos:end="123:43"><name pos:start="123:29" pos:end="123:36"><name pos:start="123:29" pos:end="123:31">pic</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:36">irq</name></name> <operator pos:start="123:38" pos:end="123:38">+</operator> <literal type="number" pos:start="123:40" pos:end="123:43">0x1b</literal></expr></argument>, <argument pos:start="123:46" pos:end="123:57"><expr pos:start="123:46" pos:end="123:57"><name pos:start="123:46" pos:end="123:53"><name pos:start="123:46" pos:end="123:48">pic</name><operator pos:start="123:49" pos:end="123:50">-&gt;</operator><name pos:start="123:51" pos:end="123:53">nmi</name></name> <operator pos:start="123:55" pos:end="123:55">+</operator> <literal type="number" pos:start="123:57" pos:end="123:57">1</literal></expr></argument>, <argument pos:start="123:60" pos:end="123:69"><expr pos:start="123:60" pos:end="123:69"><literal type="number" pos:start="123:60" pos:end="123:69">0x3001e000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:71"><expr pos:start="125:5" pos:end="125:70"><call pos:start="125:5" pos:end="125:70"><name pos:start="125:5" pos:end="125:22">etraxfs_timer_init</name><argument_list pos:start="125:23" pos:end="125:70">(<argument pos:start="125:24" pos:end="125:26"><expr pos:start="125:24" pos:end="125:26"><name pos:start="125:24" pos:end="125:26">env</name></expr></argument>, <argument pos:start="125:29" pos:end="125:43"><expr pos:start="125:29" pos:end="125:43"><name pos:start="125:29" pos:end="125:36"><name pos:start="125:29" pos:end="125:31">pic</name><operator pos:start="125:32" pos:end="125:33">-&gt;</operator><name pos:start="125:34" pos:end="125:36">irq</name></name> <operator pos:start="125:38" pos:end="125:38">+</operator> <literal type="number" pos:start="125:40" pos:end="125:43">0x1b</literal></expr></argument>, <argument pos:start="125:46" pos:end="125:57"><expr pos:start="125:46" pos:end="125:57"><name pos:start="125:46" pos:end="125:53"><name pos:start="125:46" pos:end="125:48">pic</name><operator pos:start="125:49" pos:end="125:50">-&gt;</operator><name pos:start="125:51" pos:end="125:53">nmi</name></name> <operator pos:start="125:55" pos:end="125:55">+</operator> <literal type="number" pos:start="125:57" pos:end="125:57">1</literal></expr></argument>, <argument pos:start="125:60" pos:end="125:69"><expr pos:start="125:60" pos:end="125:69"><literal type="number" pos:start="125:60" pos:end="125:69">0x3005e000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="129:5" pos:end="139:5">for <control pos:start="129:9" pos:end="129:27">(<init pos:start="129:10" pos:end="129:15"><expr pos:start="129:10" pos:end="129:14"><name pos:start="129:10" pos:end="129:10">i</name> <operator pos:start="129:12" pos:end="129:12">=</operator> <literal type="number" pos:start="129:14" pos:end="129:14">0</literal></expr>;</init> <condition pos:start="129:17" pos:end="129:22"><expr pos:start="129:17" pos:end="129:21"><name pos:start="129:17" pos:end="129:17">i</name> <operator pos:start="129:19" pos:end="129:19">&lt;</operator> <literal type="number" pos:start="129:21" pos:end="129:21">4</literal></expr>;</condition> <incr pos:start="129:24" pos:end="129:26"><expr pos:start="129:24" pos:end="129:26"><name pos:start="129:24" pos:end="129:24">i</name><operator pos:start="129:25" pos:end="129:26">++</operator></expr></incr>)</control> <block pos:start="129:29" pos:end="139:5">{<block_content pos:start="131:9" pos:end="137:9">

        <if_stmt pos:start="131:9" pos:end="137:9"><if pos:start="131:9" pos:end="137:9">if <condition pos:start="131:12" pos:end="131:26">(<expr pos:start="131:13" pos:end="131:25"><name pos:start="131:13" pos:end="131:25"><name pos:start="131:13" pos:end="131:22">serial_hds</name><index pos:start="131:23" pos:end="131:25">[<expr pos:start="131:24" pos:end="131:24"><name pos:start="131:24" pos:end="131:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="131:28" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:69">

            <expr_stmt pos:start="133:13" pos:end="135:69"><expr pos:start="133:13" pos:end="135:68"><call pos:start="133:13" pos:end="135:68"><name pos:start="133:13" pos:end="133:28">etraxfs_ser_init</name><argument_list pos:start="133:29" pos:end="135:68">(<argument pos:start="133:30" pos:end="133:32"><expr pos:start="133:30" pos:end="133:32"><name pos:start="133:30" pos:end="133:32">env</name></expr></argument>, <argument pos:start="133:35" pos:end="133:53"><expr pos:start="133:35" pos:end="133:53"><name pos:start="133:35" pos:end="133:42"><name pos:start="133:35" pos:end="133:37">pic</name><operator pos:start="133:38" pos:end="133:39">-&gt;</operator><name pos:start="133:40" pos:end="133:42">irq</name></name> <operator pos:start="133:44" pos:end="133:44">+</operator> <literal type="number" pos:start="133:46" pos:end="133:51">0x14</literal> <operator pos:start="133:51" pos:end="133:51">+</operator> <name pos:start="133:53" pos:end="133:53">i</name></expr></argument>,

                             <argument pos:start="135:30" pos:end="135:42"><expr pos:start="135:30" pos:end="135:42"><name pos:start="135:30" pos:end="135:42"><name pos:start="135:30" pos:end="135:39">serial_hds</name><index pos:start="135:40" pos:end="135:42">[<expr pos:start="135:41" pos:end="135:41"><name pos:start="135:41" pos:end="135:41">i</name></expr>]</index></name></expr></argument>, <argument pos:start="135:45" pos:end="135:67"><expr pos:start="135:45" pos:end="135:67"><literal type="number" pos:start="135:45" pos:end="135:56">0x30026000</literal> <operator pos:start="135:56" pos:end="135:56">+</operator> <name pos:start="135:58" pos:end="135:58">i</name> <operator pos:start="135:60" pos:end="135:60">*</operator> <literal type="number" pos:start="135:62" pos:end="135:67">0x2000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="143:5" pos:end="197:5"><if pos:start="143:5" pos:end="197:5">if <condition pos:start="143:8" pos:end="143:24">(<expr pos:start="143:9" pos:end="143:23"><name pos:start="143:9" pos:end="143:23">kernel_filename</name></expr>)</condition> <block pos:start="143:26" pos:end="197:5">{<block_content pos:start="145:9" pos:end="195:9">

        <decl_stmt pos:start="145:9" pos:end="145:29"><decl pos:start="145:9" pos:end="145:22"><type pos:start="145:9" pos:end="145:16"><name pos:start="145:9" pos:end="145:16">uint64_t</name></type> <name pos:start="145:18" pos:end="145:22">entry</name></decl>, <decl pos:start="145:25" pos:end="145:28"><type ref="prev" pos:start="145:9" pos:end="145:16"/><name pos:start="145:25" pos:end="145:28">high</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:25"><decl pos:start="147:9" pos:end="147:24"><type pos:start="147:9" pos:end="147:11"><name pos:start="147:9" pos:end="147:11">int</name></type> <name pos:start="147:13" pos:end="147:24">kcmdline_len</name></decl>;</decl_stmt>



        <comment type="block" pos:start="151:9" pos:end="153:28">/* Boots a kernel elf binary, os/linux-2.6/vmlinux from the axis 

           devboard SDK.  */</comment>

        <expr_stmt pos:start="155:9" pos:end="157:52"><expr pos:start="155:9" pos:end="157:51"><name pos:start="155:9" pos:end="155:19">kernel_size</name> <operator pos:start="155:21" pos:end="155:21">=</operator> <call pos:start="155:23" pos:end="157:51"><name pos:start="155:23" pos:end="155:30">load_elf</name><argument_list pos:start="155:31" pos:end="157:51">(<argument pos:start="155:32" pos:end="155:46"><expr pos:start="155:32" pos:end="155:46"><name pos:start="155:32" pos:end="155:46">kernel_filename</name></expr></argument>, <argument pos:start="155:49" pos:end="155:61"><expr pos:start="155:49" pos:end="155:61"><operator pos:start="155:49" pos:end="155:49">-</operator><literal type="number" pos:start="155:50" pos:end="155:61">0x80000000LL</literal></expr></argument>,

                               <argument pos:start="157:32" pos:end="157:37"><expr pos:start="157:32" pos:end="157:37"><operator pos:start="157:32" pos:end="157:32">&amp;</operator><name pos:start="157:33" pos:end="157:37">entry</name></expr></argument>, <argument pos:start="157:40" pos:end="157:43"><expr pos:start="157:40" pos:end="157:43"><name pos:start="157:40" pos:end="157:43">NULL</name></expr></argument>, <argument pos:start="157:46" pos:end="157:50"><expr pos:start="157:46" pos:end="157:50"><operator pos:start="157:46" pos:end="157:46">&amp;</operator><name pos:start="157:47" pos:end="157:50">high</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:29"><expr pos:start="159:9" pos:end="159:28"><name pos:start="159:9" pos:end="159:20">bootstrap_pc</name> <operator pos:start="159:22" pos:end="159:22">=</operator> <name pos:start="159:24" pos:end="159:28">entry</name></expr>;</expr_stmt>

        <if_stmt pos:start="161:9" pos:end="171:9"><if pos:start="161:9" pos:end="171:9">if <condition pos:start="161:12" pos:end="161:28">(<expr pos:start="161:13" pos:end="161:27"><name pos:start="161:13" pos:end="161:23">kernel_size</name> <operator pos:start="161:25" pos:end="161:25">&lt;</operator> <literal type="number" pos:start="161:27" pos:end="161:27">0</literal></expr>)</condition> <block pos:start="161:30" pos:end="171:9">{<block_content pos:start="165:13" pos:end="169:52">

            <comment type="block" pos:start="163:13" pos:end="163:61">/* Takes a kimage from the axis devboard SDK.  */</comment>

            <expr_stmt pos:start="165:13" pos:end="165:78"><expr pos:start="165:13" pos:end="165:77"><name pos:start="165:13" pos:end="165:23">kernel_size</name> <operator pos:start="165:25" pos:end="165:25">=</operator> <call pos:start="165:27" pos:end="165:77"><name pos:start="165:27" pos:end="165:36">load_image</name><argument_list pos:start="165:37" pos:end="165:77">(<argument pos:start="165:38" pos:end="165:52"><expr pos:start="165:38" pos:end="165:52"><name pos:start="165:38" pos:end="165:52">kernel_filename</name></expr></argument>, <argument pos:start="165:55" pos:end="165:76"><expr pos:start="165:55" pos:end="165:76"><name pos:start="165:55" pos:end="165:67">phys_ram_base</name> <operator pos:start="165:69" pos:end="165:69">+</operator> <literal type="number" pos:start="165:71" pos:end="165:76">0x4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:38"><expr pos:start="167:13" pos:end="167:37"><name pos:start="167:13" pos:end="167:24">bootstrap_pc</name> <operator pos:start="167:26" pos:end="167:26">=</operator> <literal type="number" pos:start="167:28" pos:end="167:37">0x40004000</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:52"><expr pos:start="169:13" pos:end="169:51"><name pos:start="169:13" pos:end="169:24"><name pos:start="169:13" pos:end="169:15">env</name><operator pos:start="169:16" pos:end="169:17">-&gt;</operator><name pos:start="169:18" pos:end="169:21">regs</name><index pos:start="169:22" pos:end="169:24">[<expr pos:start="169:23" pos:end="169:23"><literal type="number" pos:start="169:23" pos:end="169:23">9</literal></expr>]</index></name> <operator pos:start="169:26" pos:end="169:26">=</operator> <literal type="number" pos:start="169:28" pos:end="169:39">0x40004000</literal> <operator pos:start="169:39" pos:end="169:39">+</operator> <name pos:start="169:41" pos:end="169:51">kernel_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:34"><expr pos:start="173:9" pos:end="173:33"><name pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:11">env</name><operator pos:start="173:12" pos:end="173:13">-&gt;</operator><name pos:start="173:14" pos:end="173:17">regs</name><index pos:start="173:18" pos:end="173:20">[<expr pos:start="173:19" pos:end="173:19"><literal type="number" pos:start="173:19" pos:end="173:19">8</literal></expr>]</index></name> <operator pos:start="173:22" pos:end="173:22">=</operator> <literal type="number" pos:start="173:24" pos:end="173:33">0x56902387</literal></expr>;</expr_stmt> <comment type="block" pos:start="173:36" pos:end="173:57">/* RAM init magic.  */</comment>



        <if_stmt pos:start="177:9" pos:end="195:9"><if pos:start="177:9" pos:end="195:9">if <condition pos:start="177:12" pos:end="177:70">(<expr pos:start="177:13" pos:end="177:69"><name pos:start="177:13" pos:end="177:26">kernel_cmdline</name> <operator pos:start="177:28" pos:end="177:29">&amp;&amp;</operator> <operator pos:start="177:31" pos:end="177:31">(</operator><name pos:start="177:32" pos:end="177:43">kcmdline_len</name> <operator pos:start="177:45" pos:end="177:45">=</operator> <call pos:start="177:47" pos:end="177:68"><name pos:start="177:47" pos:end="177:52">strlen</name><argument_list pos:start="177:53" pos:end="177:68">(<argument pos:start="177:54" pos:end="177:67"><expr pos:start="177:54" pos:end="177:67"><name pos:start="177:54" pos:end="177:67">kernel_cmdline</name></expr></argument>)</argument_list></call><operator pos:start="177:69" pos:end="177:69">)</operator></expr>)</condition> <block pos:start="177:72" pos:end="195:9">{<block_content pos:start="179:13" pos:end="193:33">

            <if_stmt pos:start="179:13" pos:end="185:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:35">(<expr pos:start="179:17" pos:end="179:34"><name pos:start="179:17" pos:end="179:28">kcmdline_len</name> <operator pos:start="179:30" pos:end="179:30">&gt;</operator> <literal type="number" pos:start="179:32" pos:end="179:34">256</literal></expr>)</condition> <block pos:start="179:37" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:24">

                <expr_stmt pos:start="181:17" pos:end="181:76"><expr pos:start="181:17" pos:end="181:75"><call pos:start="181:17" pos:end="181:75"><name pos:start="181:17" pos:end="181:23">fprintf</name><argument_list pos:start="181:24" pos:end="181:75">(<argument pos:start="181:25" pos:end="181:30"><expr pos:start="181:25" pos:end="181:30"><name pos:start="181:25" pos:end="181:30">stderr</name></expr></argument>, <argument pos:start="181:33" pos:end="181:74"><expr pos:start="181:33" pos:end="181:74"><literal type="string" pos:start="181:33" pos:end="181:74">"Too long CRIS kernel cmdline (max 256)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:24"><expr pos:start="183:17" pos:end="183:23"><call pos:start="183:17" pos:end="183:23"><name pos:start="183:17" pos:end="183:20">exit</name><argument_list pos:start="183:21" pos:end="183:23">(<argument pos:start="183:22" pos:end="183:22"><expr pos:start="183:22" pos:end="183:22"><literal type="number" pos:start="183:22" pos:end="183:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:56"><expr pos:start="187:13" pos:end="187:55"><call pos:start="187:13" pos:end="187:55"><name pos:start="187:13" pos:end="187:28">pstrcpy_targphys</name><argument_list pos:start="187:29" pos:end="187:55">(<argument pos:start="187:30" pos:end="187:33"><expr pos:start="187:30" pos:end="187:33"><name pos:start="187:30" pos:end="187:33">high</name></expr></argument>, <argument pos:start="187:36" pos:end="187:38"><expr pos:start="187:36" pos:end="187:38"><literal type="number" pos:start="187:36" pos:end="187:38">256</literal></expr></argument>, <argument pos:start="187:41" pos:end="187:54"><expr pos:start="187:41" pos:end="187:54"><name pos:start="187:41" pos:end="187:54">kernel_cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="189:13" pos:end="189:68">/* Let the kernel know we are modifying the cmdline.  */</comment>

            <expr_stmt pos:start="191:13" pos:end="191:39"><expr pos:start="191:13" pos:end="191:38"><name pos:start="191:13" pos:end="191:25"><name pos:start="191:13" pos:end="191:15">env</name><operator pos:start="191:16" pos:end="191:17">-&gt;</operator><name pos:start="191:18" pos:end="191:21">regs</name><index pos:start="191:22" pos:end="191:25">[<expr pos:start="191:23" pos:end="191:24"><literal type="number" pos:start="191:23" pos:end="191:24">10</literal></expr>]</index></name> <operator pos:start="191:27" pos:end="191:27">=</operator> <literal type="number" pos:start="191:29" pos:end="191:38">0x87109563</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:33"><expr pos:start="193:13" pos:end="193:32"><name pos:start="193:13" pos:end="193:25"><name pos:start="193:13" pos:end="193:15">env</name><operator pos:start="193:16" pos:end="193:17">-&gt;</operator><name pos:start="193:18" pos:end="193:21">regs</name><index pos:start="193:22" pos:end="193:25">[<expr pos:start="193:23" pos:end="193:24"><literal type="number" pos:start="193:23" pos:end="193:24">11</literal></expr>]</index></name> <operator pos:start="193:27" pos:end="193:27">=</operator> <name pos:start="193:29" pos:end="193:32">high</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:27"><expr pos:start="199:5" pos:end="199:26"><name pos:start="199:5" pos:end="199:11"><name pos:start="199:5" pos:end="199:7">env</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:11">pc</name></name> <operator pos:start="199:13" pos:end="199:13">=</operator> <name pos:start="199:15" pos:end="199:26">bootstrap_pc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="203:5" pos:end="203:33"><expr pos:start="203:5" pos:end="203:32"><call pos:start="203:5" pos:end="203:32"><name pos:start="203:5" pos:end="203:10">printf</name> <argument_list pos:start="203:12" pos:end="203:32">(<argument pos:start="203:13" pos:end="203:22"><expr pos:start="203:13" pos:end="203:22"><literal type="string" pos:start="203:13" pos:end="203:22">"pc =%x\n"</literal></expr></argument>, <argument pos:start="203:25" pos:end="203:31"><expr pos:start="203:25" pos:end="203:31"><name pos:start="203:25" pos:end="203:31"><name pos:start="203:25" pos:end="203:27">env</name><operator pos:start="203:28" pos:end="203:29">-&gt;</operator><name pos:start="203:30" pos:end="203:31">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:41"><expr pos:start="205:5" pos:end="205:40"><call pos:start="205:5" pos:end="205:40"><name pos:start="205:5" pos:end="205:10">printf</name> <argument_list pos:start="205:12" pos:end="205:40">(<argument pos:start="205:13" pos:end="205:29"><expr pos:start="205:13" pos:end="205:29"><literal type="string" pos:start="205:13" pos:end="205:29">"ram size =%ld\n"</literal></expr></argument>, <argument pos:start="205:32" pos:end="205:39"><expr pos:start="205:32" pos:end="205:39"><name pos:start="205:32" pos:end="205:39">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
