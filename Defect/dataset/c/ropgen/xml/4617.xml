<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4617.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:38">iscsi_co_readv</name><parameter_list pos:start="1:39" pos:end="5:57">(<parameter pos:start="1:40" pos:end="1:59"><decl pos:start="1:40" pos:end="1:59"><type pos:start="1:40" pos:end="1:59"><name pos:start="1:40" pos:end="1:55">BlockDriverState</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:59">bs</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:57"><decl pos:start="3:40" pos:end="3:57"><type pos:start="3:40" pos:end="3:57"><name pos:start="3:40" pos:end="3:46">int64_t</name></type> <name pos:start="3:48" pos:end="3:57">sector_num</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:73"><decl pos:start="3:60" pos:end="3:73"><type pos:start="3:60" pos:end="3:73"><name pos:start="3:60" pos:end="3:62">int</name></type> <name pos:start="3:64" pos:end="3:73">nb_sectors</name></decl></parameter>,

                                       <parameter pos:start="5:40" pos:end="5:56"><decl pos:start="5:40" pos:end="5:56"><type pos:start="5:40" pos:end="5:56"><name pos:start="5:40" pos:end="5:51">QEMUIOVector</name> <modifier pos:start="5:53" pos:end="5:53">*</modifier></type><name pos:start="5:54" pos:end="5:56">iov</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="157:1">{<block_content pos:start="9:5" pos:end="155:13">

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">IscsiLun</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:22">iscsilun</name> <init pos:start="9:24" pos:end="9:35">= <expr pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:35"><name pos:start="9:26" pos:end="9:27">bs</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:35">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:20">IscsiTask</name></name></type> <name pos:start="11:22" pos:end="11:26">iTask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">lba</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:24">num_sectors</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:73">(<expr pos:start="19:9" pos:end="19:72"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:72"><name pos:start="19:10" pos:end="19:38">is_sector_request_lun_aligned</name><argument_list pos:start="19:39" pos:end="19:72">(<argument pos:start="19:40" pos:end="19:49"><expr pos:start="19:40" pos:end="19:49"><name pos:start="19:40" pos:end="19:49">sector_num</name></expr></argument>, <argument pos:start="19:52" pos:end="19:61"><expr pos:start="19:52" pos:end="19:61"><name pos:start="19:52" pos:end="19:61">nb_sectors</name></expr></argument>, <argument pos:start="19:64" pos:end="19:71"><expr pos:start="19:64" pos:end="19:71"><name pos:start="19:64" pos:end="19:71">iscsilun</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:75" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:23">

        <return pos:start="21:9" pos:end="21:23">return <expr pos:start="21:16" pos:end="21:22"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="29:61">(<expr pos:start="27:9" pos:end="29:60"><name pos:start="27:9" pos:end="27:27"><name pos:start="27:9" pos:end="27:10">bs</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:14">bl</name><operator pos:start="27:15" pos:end="27:15">.</operator><name pos:start="27:16" pos:end="27:27">max_transfer</name></name> <operator pos:start="27:29" pos:end="27:30">&amp;&amp;</operator>

        <name pos:start="29:9" pos:end="29:18">nb_sectors</name> <operator pos:start="29:20" pos:end="29:21">&lt;&lt;</operator> <name pos:start="29:23" pos:end="29:38">BDRV_SECTOR_BITS</name> <operator pos:start="29:40" pos:end="29:40">&gt;</operator> <name pos:start="29:42" pos:end="29:60"><name pos:start="29:42" pos:end="29:43">bs</name><operator pos:start="29:44" pos:end="29:45">-&gt;</operator><name pos:start="29:46" pos:end="29:47">bl</name><operator pos:start="29:48" pos:end="29:48">.</operator><name pos:start="29:49" pos:end="29:60">max_transfer</name></name></expr>)</condition> <block pos:start="29:63" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:23">

        <expr_stmt pos:start="31:9" pos:end="33:78"><expr pos:start="31:9" pos:end="33:77"><call pos:start="31:9" pos:end="33:77"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="33:77">(<argument pos:start="31:22" pos:end="33:43"><expr pos:start="31:22" pos:end="33:43"><literal type="string" pos:start="31:22" pos:end="31:76">"iSCSI Error: Read of %d sectors exceeds max_xfer_len "</literal>

                     <literal type="string" pos:start="33:22" pos:end="33:27">"of %"</literal> <name pos:start="33:29" pos:end="33:34">PRIu32</name> <literal type="string" pos:start="33:36" pos:end="33:43">" bytes"</literal></expr></argument>, <argument pos:start="33:46" pos:end="33:55"><expr pos:start="33:46" pos:end="33:55"><name pos:start="33:46" pos:end="33:55">nb_sectors</name></expr></argument>, <argument pos:start="33:58" pos:end="33:76"><expr pos:start="33:58" pos:end="33:76"><name pos:start="33:58" pos:end="33:76"><name pos:start="33:58" pos:end="33:59">bs</name><operator pos:start="33:60" pos:end="33:61">-&gt;</operator><name pos:start="33:62" pos:end="33:63">bl</name><operator pos:start="33:64" pos:end="33:64">.</operator><name pos:start="33:65" pos:end="33:76">max_transfer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:23">return <expr pos:start="35:16" pos:end="35:22"><operator pos:start="35:16" pos:end="35:16">-</operator><name pos:start="35:17" pos:end="35:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="69:5"><if pos:start="41:5" pos:end="69:5">if <condition pos:start="41:8" pos:end="43:76">(<expr pos:start="41:9" pos:end="43:75"><name pos:start="41:9" pos:end="41:23"><name pos:start="41:9" pos:end="41:16">iscsilun</name><operator pos:start="41:17" pos:end="41:18">-&gt;</operator><name pos:start="41:19" pos:end="41:23">lbprz</name></name> <operator pos:start="41:25" pos:end="41:26">&amp;&amp;</operator> <name pos:start="41:28" pos:end="41:37">nb_sectors</name> <operator pos:start="41:39" pos:end="41:40">&gt;=</operator> <name pos:start="41:42" pos:end="41:63">ISCSI_CHECKALLOC_THRES</name> <operator pos:start="41:65" pos:end="41:66">&amp;&amp;</operator>

        <operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:75"><name pos:start="43:10" pos:end="43:41">iscsi_allocationmap_is_allocated</name><argument_list pos:start="43:42" pos:end="43:75">(<argument pos:start="43:43" pos:end="43:50"><expr pos:start="43:43" pos:end="43:50"><name pos:start="43:43" pos:end="43:50">iscsilun</name></expr></argument>, <argument pos:start="43:53" pos:end="43:62"><expr pos:start="43:53" pos:end="43:62"><name pos:start="43:53" pos:end="43:62">sector_num</name></expr></argument>, <argument pos:start="43:65" pos:end="43:74"><expr pos:start="43:65" pos:end="43:74"><name pos:start="43:65" pos:end="43:74">nb_sectors</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:78" pos:end="69:5">{<block_content pos:start="45:9" pos:end="67:9">

        <decl_stmt pos:start="45:9" pos:end="45:20"><decl pos:start="45:9" pos:end="45:19"><type pos:start="45:9" pos:end="45:15"><name pos:start="45:9" pos:end="45:15">int64_t</name></type> <name pos:start="45:17" pos:end="45:19">ret</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:17"><decl pos:start="47:9" pos:end="47:16"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:16">pnum</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:31"><decl pos:start="49:9" pos:end="49:30"><type pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:24">BlockDriverState</name> <modifier pos:start="49:26" pos:end="49:26">*</modifier></type><name pos:start="49:27" pos:end="49:30">file</name></decl>;</decl_stmt>

        <expr_stmt pos:start="51:9" pos:end="53:80"><expr pos:start="51:9" pos:end="53:79"><name pos:start="51:9" pos:end="51:11">ret</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="53:79"><name pos:start="51:15" pos:end="51:39">iscsi_co_get_block_status</name><argument_list pos:start="51:40" pos:end="53:79">(<argument pos:start="51:41" pos:end="51:42"><expr pos:start="51:41" pos:end="51:42"><name pos:start="51:41" pos:end="51:42">bs</name></expr></argument>, <argument pos:start="51:45" pos:end="51:54"><expr pos:start="51:45" pos:end="51:54"><name pos:start="51:45" pos:end="51:54">sector_num</name></expr></argument>,

                                        <argument pos:start="53:41" pos:end="53:64"><expr pos:start="53:41" pos:end="53:64"><name pos:start="53:41" pos:end="53:64">BDRV_REQUEST_MAX_SECTORS</name></expr></argument>, <argument pos:start="53:67" pos:end="53:71"><expr pos:start="53:67" pos:end="53:71"><operator pos:start="53:67" pos:end="53:67">&amp;</operator><name pos:start="53:68" pos:end="53:71">pnum</name></expr></argument>, <argument pos:start="53:74" pos:end="53:78"><expr pos:start="53:74" pos:end="53:78"><operator pos:start="53:74" pos:end="53:74">&amp;</operator><name pos:start="53:75" pos:end="53:78">file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="55:9" pos:end="59:9"><if pos:start="55:9" pos:end="59:9">if <condition pos:start="55:12" pos:end="55:20">(<expr pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:15">ret</name> <operator pos:start="55:17" pos:end="55:17">&lt;</operator> <literal type="number" pos:start="55:19" pos:end="55:19">0</literal></expr>)</condition> <block pos:start="55:22" pos:end="59:9">{<block_content pos:start="57:13" pos:end="57:23">

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="61:9" pos:end="67:9"><if pos:start="61:9" pos:end="67:9">if <condition pos:start="61:12" pos:end="61:56">(<expr pos:start="61:13" pos:end="61:55"><name pos:start="61:13" pos:end="61:15">ret</name> <operator pos:start="61:17" pos:end="61:17">&amp;</operator> <name pos:start="61:19" pos:end="61:33">BDRV_BLOCK_ZERO</name> <operator pos:start="61:35" pos:end="61:36">&amp;&amp;</operator> <name pos:start="61:38" pos:end="61:41">pnum</name> <operator pos:start="61:43" pos:end="61:44">&gt;=</operator> <name pos:start="61:46" pos:end="61:55">nb_sectors</name></expr>)</condition> <block pos:start="61:58" pos:end="67:9">{<block_content pos:start="63:13" pos:end="65:21">

            <expr_stmt pos:start="63:13" pos:end="63:55"><expr pos:start="63:13" pos:end="63:54"><call pos:start="63:13" pos:end="63:54"><name pos:start="63:13" pos:end="63:29">qemu_iovec_memset</name><argument_list pos:start="63:30" pos:end="63:54">(<argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">iov</name></expr></argument>, <argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><literal type="number" pos:start="63:36" pos:end="63:36">0</literal></expr></argument>, <argument pos:start="63:39" pos:end="63:42"><expr pos:start="63:39" pos:end="63:42"><literal type="number" pos:start="63:39" pos:end="63:42">0x00</literal></expr></argument>, <argument pos:start="63:45" pos:end="63:53"><expr pos:start="63:45" pos:end="63:53"><name pos:start="63:45" pos:end="63:53"><name pos:start="63:45" pos:end="63:47">iov</name><operator pos:start="63:48" pos:end="63:49">-&gt;</operator><name pos:start="63:50" pos:end="63:53">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="65:13" pos:end="65:21">return <expr pos:start="65:20" pos:end="65:20"><literal type="number" pos:start="65:20" pos:end="65:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:48"><expr pos:start="73:5" pos:end="73:47"><name pos:start="73:5" pos:end="73:7">lba</name> <operator pos:start="73:9" pos:end="73:9">=</operator> <call pos:start="73:11" pos:end="73:47"><name pos:start="73:11" pos:end="73:25">sector_qemu2lun</name><argument_list pos:start="73:26" pos:end="73:47">(<argument pos:start="73:27" pos:end="73:36"><expr pos:start="73:27" pos:end="73:36"><name pos:start="73:27" pos:end="73:36">sector_num</name></expr></argument>, <argument pos:start="73:39" pos:end="73:46"><expr pos:start="73:39" pos:end="73:46"><name pos:start="73:39" pos:end="73:46">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:56"><expr pos:start="75:5" pos:end="75:55"><name pos:start="75:5" pos:end="75:15">num_sectors</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:55"><name pos:start="75:19" pos:end="75:33">sector_qemu2lun</name><argument_list pos:start="75:34" pos:end="75:55">(<argument pos:start="75:35" pos:end="75:44"><expr pos:start="75:35" pos:end="75:44"><name pos:start="75:35" pos:end="75:44">nb_sectors</name></expr></argument>, <argument pos:start="75:47" pos:end="75:54"><expr pos:start="75:47" pos:end="75:54"><name pos:start="75:47" pos:end="75:54">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:46"><expr pos:start="79:5" pos:end="79:45"><call pos:start="79:5" pos:end="79:45"><name pos:start="79:5" pos:end="79:27">iscsi_co_init_iscsitask</name><argument_list pos:start="79:28" pos:end="79:45">(<argument pos:start="79:29" pos:end="79:36"><expr pos:start="79:29" pos:end="79:36"><name pos:start="79:29" pos:end="79:36">iscsilun</name></expr></argument>, <argument pos:start="79:39" pos:end="79:44"><expr pos:start="79:39" pos:end="79:44"><operator pos:start="79:39" pos:end="79:39">&amp;</operator><name pos:start="79:40" pos:end="79:44">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="81:1" pos:end="81:6"><name pos:start="81:1" pos:end="81:5">retry</name>:</label>

    <if_stmt pos:start="83:5" pos:end="105:5"><if pos:start="83:5" pos:end="93:5">if <condition pos:start="83:8" pos:end="83:32">(<expr pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:16">iscsilun</name><operator pos:start="83:17" pos:end="83:18">-&gt;</operator><name pos:start="83:19" pos:end="83:31">use_16_for_rw</name></name></expr>)</condition> <block pos:start="83:34" pos:end="93:5">{<block_content pos:start="85:9" pos:end="91:68">

        <expr_stmt pos:start="85:9" pos:end="91:68"><expr pos:start="85:9" pos:end="91:67"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:13">iTask</name><operator pos:start="85:14" pos:end="85:14">.</operator><name pos:start="85:15" pos:end="85:18">task</name></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <call pos:start="85:22" pos:end="91:67"><name pos:start="85:22" pos:end="85:38">iscsi_read16_task</name><argument_list pos:start="85:39" pos:end="91:67">(<argument pos:start="85:40" pos:end="85:54"><expr pos:start="85:40" pos:end="85:54"><name pos:start="85:40" pos:end="85:54"><name pos:start="85:40" pos:end="85:47">iscsilun</name><operator pos:start="85:48" pos:end="85:49">-&gt;</operator><name pos:start="85:50" pos:end="85:54">iscsi</name></name></expr></argument>, <argument pos:start="85:57" pos:end="85:69"><expr pos:start="85:57" pos:end="85:69"><name pos:start="85:57" pos:end="85:69"><name pos:start="85:57" pos:end="85:64">iscsilun</name><operator pos:start="85:65" pos:end="85:66">-&gt;</operator><name pos:start="85:67" pos:end="85:69">lun</name></name></expr></argument>, <argument pos:start="85:72" pos:end="85:74"><expr pos:start="85:72" pos:end="85:74"><name pos:start="85:72" pos:end="85:74">lba</name></expr></argument>,

                                       <argument pos:start="87:40" pos:end="87:73"><expr pos:start="87:40" pos:end="87:73"><name pos:start="87:40" pos:end="87:50">num_sectors</name> <operator pos:start="87:52" pos:end="87:52">*</operator> <name pos:start="87:54" pos:end="87:73"><name pos:start="87:54" pos:end="87:61">iscsilun</name><operator pos:start="87:62" pos:end="87:63">-&gt;</operator><name pos:start="87:64" pos:end="87:73">block_size</name></name></expr></argument>,

                                       <argument pos:start="89:40" pos:end="89:59"><expr pos:start="89:40" pos:end="89:59"><name pos:start="89:40" pos:end="89:59"><name pos:start="89:40" pos:end="89:47">iscsilun</name><operator pos:start="89:48" pos:end="89:49">-&gt;</operator><name pos:start="89:50" pos:end="89:59">block_size</name></name></expr></argument>, <argument pos:start="89:62" pos:end="89:62"><expr pos:start="89:62" pos:end="89:62"><literal type="number" pos:start="89:62" pos:end="89:62">0</literal></expr></argument>, <argument pos:start="89:65" pos:end="89:65"><expr pos:start="89:65" pos:end="89:65"><literal type="number" pos:start="89:65" pos:end="89:65">0</literal></expr></argument>, <argument pos:start="89:68" pos:end="89:68"><expr pos:start="89:68" pos:end="89:68"><literal type="number" pos:start="89:68" pos:end="89:68">0</literal></expr></argument>, <argument pos:start="89:71" pos:end="89:71"><expr pos:start="89:71" pos:end="89:71"><literal type="number" pos:start="89:71" pos:end="89:71">0</literal></expr></argument>, <argument pos:start="89:74" pos:end="89:74"><expr pos:start="89:74" pos:end="89:74"><literal type="number" pos:start="89:74" pos:end="89:74">0</literal></expr></argument>,

                                       <argument pos:start="91:40" pos:end="91:58"><expr pos:start="91:40" pos:end="91:58"><name pos:start="91:40" pos:end="91:58">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="91:61" pos:end="91:66"><expr pos:start="91:61" pos:end="91:66"><operator pos:start="91:61" pos:end="91:61">&amp;</operator><name pos:start="91:62" pos:end="91:66">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="93:7" pos:end="105:5">else <block pos:start="93:12" pos:end="105:5">{<block_content pos:start="95:9" pos:end="103:68">

        <expr_stmt pos:start="95:9" pos:end="103:68"><expr pos:start="95:9" pos:end="103:67"><name pos:start="95:9" pos:end="95:18"><name pos:start="95:9" pos:end="95:13">iTask</name><operator pos:start="95:14" pos:end="95:14">.</operator><name pos:start="95:15" pos:end="95:18">task</name></name> <operator pos:start="95:20" pos:end="95:20">=</operator> <call pos:start="95:22" pos:end="103:67"><name pos:start="95:22" pos:end="95:38">iscsi_read10_task</name><argument_list pos:start="95:39" pos:end="103:67">(<argument pos:start="95:40" pos:end="95:54"><expr pos:start="95:40" pos:end="95:54"><name pos:start="95:40" pos:end="95:54"><name pos:start="95:40" pos:end="95:47">iscsilun</name><operator pos:start="95:48" pos:end="95:49">-&gt;</operator><name pos:start="95:50" pos:end="95:54">iscsi</name></name></expr></argument>, <argument pos:start="95:57" pos:end="95:69"><expr pos:start="95:57" pos:end="95:69"><name pos:start="95:57" pos:end="95:69"><name pos:start="95:57" pos:end="95:64">iscsilun</name><operator pos:start="95:65" pos:end="95:66">-&gt;</operator><name pos:start="95:67" pos:end="95:69">lun</name></name></expr></argument>, <argument pos:start="95:72" pos:end="95:74"><expr pos:start="95:72" pos:end="95:74"><name pos:start="95:72" pos:end="95:74">lba</name></expr></argument>,

                                       <argument pos:start="97:40" pos:end="97:73"><expr pos:start="97:40" pos:end="97:73"><name pos:start="97:40" pos:end="97:50">num_sectors</name> <operator pos:start="97:52" pos:end="97:52">*</operator> <name pos:start="97:54" pos:end="97:73"><name pos:start="97:54" pos:end="97:61">iscsilun</name><operator pos:start="97:62" pos:end="97:63">-&gt;</operator><name pos:start="97:64" pos:end="97:73">block_size</name></name></expr></argument>,

                                       <argument pos:start="99:40" pos:end="99:59"><expr pos:start="99:40" pos:end="99:59"><name pos:start="99:40" pos:end="99:59"><name pos:start="99:40" pos:end="99:47">iscsilun</name><operator pos:start="99:48" pos:end="99:49">-&gt;</operator><name pos:start="99:50" pos:end="99:59">block_size</name></name></expr></argument>,

                                       <argument pos:start="101:40" pos:end="101:40"><expr pos:start="101:40" pos:end="101:40"><literal type="number" pos:start="101:40" pos:end="101:40">0</literal></expr></argument>, <argument pos:start="101:43" pos:end="101:43"><expr pos:start="101:43" pos:end="101:43"><literal type="number" pos:start="101:43" pos:end="101:43">0</literal></expr></argument>, <argument pos:start="101:46" pos:end="101:46"><expr pos:start="101:46" pos:end="101:46"><literal type="number" pos:start="101:46" pos:end="101:46">0</literal></expr></argument>, <argument pos:start="101:49" pos:end="101:49"><expr pos:start="101:49" pos:end="101:49"><literal type="number" pos:start="101:49" pos:end="101:49">0</literal></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><literal type="number" pos:start="101:52" pos:end="101:52">0</literal></expr></argument>,

                                       <argument pos:start="103:40" pos:end="103:58"><expr pos:start="103:40" pos:end="103:58"><name pos:start="103:40" pos:end="103:58">iscsi_co_generic_cb</name></expr></argument>, <argument pos:start="103:61" pos:end="103:66"><expr pos:start="103:61" pos:end="103:66"><operator pos:start="103:61" pos:end="103:61">&amp;</operator><name pos:start="103:62" pos:end="103:66">iTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="107:5" pos:end="111:5"><if pos:start="107:5" pos:end="111:5">if <condition pos:start="107:8" pos:end="107:27">(<expr pos:start="107:9" pos:end="107:26"><name pos:start="107:9" pos:end="107:18"><name pos:start="107:9" pos:end="107:13">iTask</name><operator pos:start="107:14" pos:end="107:14">.</operator><name pos:start="107:15" pos:end="107:18">task</name></name> <operator pos:start="107:20" pos:end="107:21">==</operator> <name pos:start="107:23" pos:end="107:26">NULL</name></expr>)</condition> <block pos:start="107:29" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:23">

        <return pos:start="109:9" pos:end="109:23">return <expr pos:start="109:16" pos:end="109:22"><operator pos:start="109:16" pos:end="109:16">-</operator><name pos:start="109:17" pos:end="109:22">ENOMEM</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:80"><expr pos:start="113:5" pos:end="113:79"><call pos:start="113:5" pos:end="113:79"><name pos:start="113:5" pos:end="113:24">scsi_task_set_iov_in</name><argument_list pos:start="113:25" pos:end="113:79">(<argument pos:start="113:26" pos:end="113:35"><expr pos:start="113:26" pos:end="113:35"><name pos:start="113:26" pos:end="113:35"><name pos:start="113:26" pos:end="113:30">iTask</name><operator pos:start="113:31" pos:end="113:31">.</operator><name pos:start="113:32" pos:end="113:35">task</name></name></expr></argument>, <argument pos:start="113:38" pos:end="113:67"><expr pos:start="113:38" pos:end="113:67"><operator pos:start="113:38" pos:end="113:38">(</operator>struct <name pos:start="113:46" pos:end="113:55">scsi_iovec</name> <operator pos:start="113:57" pos:end="113:57">*</operator><operator pos:start="113:58" pos:end="113:58">)</operator> <name pos:start="113:60" pos:end="113:67"><name pos:start="113:60" pos:end="113:62">iov</name><operator pos:start="113:63" pos:end="113:64">-&gt;</operator><name pos:start="113:65" pos:end="113:67">iov</name></name></expr></argument>, <argument pos:start="113:70" pos:end="113:78"><expr pos:start="113:70" pos:end="113:78"><name pos:start="113:70" pos:end="113:78"><name pos:start="113:70" pos:end="113:72">iov</name><operator pos:start="113:73" pos:end="113:74">-&gt;</operator><name pos:start="113:75" pos:end="113:78">niov</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <while pos:start="117:5" pos:end="123:5">while <condition pos:start="117:11" pos:end="117:27">(<expr pos:start="117:12" pos:end="117:26"><operator pos:start="117:12" pos:end="117:12">!</operator><name pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:17">iTask</name><operator pos:start="117:18" pos:end="117:18">.</operator><name pos:start="117:19" pos:end="117:26">complete</name></name></expr>)</condition> <block pos:start="117:29" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:31">

        <expr_stmt pos:start="119:9" pos:end="119:35"><expr pos:start="119:9" pos:end="119:34"><call pos:start="119:9" pos:end="119:34"><name pos:start="119:9" pos:end="119:24">iscsi_set_events</name><argument_list pos:start="119:25" pos:end="119:34">(<argument pos:start="119:26" pos:end="119:33"><expr pos:start="119:26" pos:end="119:33"><name pos:start="119:26" pos:end="119:33">iscsilun</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><call pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:28">qemu_coroutine_yield</name><argument_list pos:start="121:29" pos:end="121:30">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:27">(<expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:18"><name pos:start="127:9" pos:end="127:13">iTask</name><operator pos:start="127:14" pos:end="127:14">.</operator><name pos:start="127:15" pos:end="127:18">task</name></name> <operator pos:start="127:20" pos:end="127:21">!=</operator> <name pos:start="127:23" pos:end="127:26">NULL</name></expr>)</condition> <block pos:start="127:29" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:26">

        <expr_stmt pos:start="129:9" pos:end="129:40"><expr pos:start="129:9" pos:end="129:39"><call pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:27">scsi_free_scsi_task</name><argument_list pos:start="129:28" pos:end="129:39">(<argument pos:start="129:29" pos:end="129:38"><expr pos:start="129:29" pos:end="129:38"><name pos:start="129:29" pos:end="129:38"><name pos:start="129:29" pos:end="129:33">iTask</name><operator pos:start="129:34" pos:end="129:34">.</operator><name pos:start="129:35" pos:end="129:38">task</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:26"><expr pos:start="131:9" pos:end="131:25"><name pos:start="131:9" pos:end="131:18"><name pos:start="131:9" pos:end="131:13">iTask</name><operator pos:start="131:14" pos:end="131:14">.</operator><name pos:start="131:15" pos:end="131:18">task</name></name> <operator pos:start="131:20" pos:end="131:20">=</operator> <name pos:start="131:22" pos:end="131:25">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:23">(<expr pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:13">iTask</name><operator pos:start="137:14" pos:end="137:14">.</operator><name pos:start="137:15" pos:end="137:22">do_retry</name></name></expr>)</condition> <block pos:start="137:25" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:19">

        <expr_stmt pos:start="139:9" pos:end="139:27"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:22"><name pos:start="139:9" pos:end="139:13">iTask</name><operator pos:start="139:14" pos:end="139:14">.</operator><name pos:start="139:15" pos:end="139:22">complete</name></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <literal type="number" pos:start="139:26" pos:end="139:26">0</literal></expr>;</expr_stmt>

        <goto pos:start="141:9" pos:end="141:19">goto <name pos:start="141:14" pos:end="141:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="147:5" pos:end="151:5"><if pos:start="147:5" pos:end="151:5">if <condition pos:start="147:8" pos:end="147:41">(<expr pos:start="147:9" pos:end="147:40"><name pos:start="147:9" pos:end="147:20"><name pos:start="147:9" pos:end="147:13">iTask</name><operator pos:start="147:14" pos:end="147:14">.</operator><name pos:start="147:15" pos:end="147:20">status</name></name> <operator pos:start="147:22" pos:end="147:23">!=</operator> <name pos:start="147:25" pos:end="147:40">SCSI_STATUS_GOOD</name></expr>)</condition> <block pos:start="147:43" pos:end="151:5">{<block_content pos:start="149:9" pos:end="149:30">

        <return pos:start="149:9" pos:end="149:30">return <expr pos:start="149:16" pos:end="149:29"><name pos:start="149:16" pos:end="149:29"><name pos:start="149:16" pos:end="149:20">iTask</name><operator pos:start="149:21" pos:end="149:21">.</operator><name pos:start="149:22" pos:end="149:29">err_code</name></name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
