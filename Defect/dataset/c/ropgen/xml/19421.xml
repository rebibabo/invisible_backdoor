<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19421.c" pos:tabs="8"><function pos:start="1:1" pos:end="559:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">assigned_device_pci_cap_init</name><parameter_list pos:start="1:40" pos:end="1:59">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:51"><name pos:start="1:41" pos:end="1:49">PCIDevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">pci_dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="559:1">{<block_content pos:start="5:5" pos:end="557:13">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AssignedDevice</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">dev</name> <init pos:start="5:25" pos:end="5:65">= <expr pos:start="5:27" pos:end="5:65"><call pos:start="5:27" pos:end="5:65"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:65">(<argument pos:start="5:37" pos:end="5:50"><expr pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:50">AssignedDevice</name></expr></argument>, <argument pos:start="5:53" pos:end="5:55"><expr pos:start="5:53" pos:end="5:55"><name pos:start="5:53" pos:end="5:55">dev</name></expr></argument>, <argument pos:start="5:58" pos:end="5:64"><expr pos:start="5:58" pos:end="5:64"><name pos:start="5:58" pos:end="5:64">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIRegion</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:25">pci_region</name> <init pos:start="7:27" pos:end="7:52">= <expr pos:start="7:29" pos:end="7:52"><name pos:start="7:29" pos:end="7:52"><name pos:start="7:29" pos:end="7:31">dev</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:44">real_device</name><operator pos:start="7:45" pos:end="7:45">.</operator><name pos:start="7:46" pos:end="7:52">regions</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">pos</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="13:70">/* Clear initial capabilities pointer and status copied from hw */</comment>

    <expr_stmt pos:start="15:5" pos:end="15:59"><expr pos:start="15:5" pos:end="15:58"><call pos:start="15:5" pos:end="15:58"><name pos:start="15:5" pos:end="15:16">pci_set_byte</name><argument_list pos:start="15:17" pos:end="15:58">(<argument pos:start="15:18" pos:end="15:54"><expr pos:start="15:18" pos:end="15:54"><name pos:start="15:18" pos:end="15:32"><name pos:start="15:18" pos:end="15:24">pci_dev</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:32">config</name></name> <operator pos:start="15:34" pos:end="15:34">+</operator> <name pos:start="15:36" pos:end="15:54">PCI_CAPABILITY_LIST</name></expr></argument>, <argument pos:start="15:57" pos:end="15:57"><expr pos:start="15:57" pos:end="15:57"><literal type="number" pos:start="15:57" pos:end="15:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="21:39"><expr pos:start="17:5" pos:end="21:38"><call pos:start="17:5" pos:end="21:38"><name pos:start="17:5" pos:end="17:16">pci_set_word</name><argument_list pos:start="17:17" pos:end="21:38">(<argument pos:start="17:18" pos:end="17:45"><expr pos:start="17:18" pos:end="17:45"><name pos:start="17:18" pos:end="17:32"><name pos:start="17:18" pos:end="17:24">pci_dev</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:32">config</name></name> <operator pos:start="17:34" pos:end="17:34">+</operator> <name pos:start="17:36" pos:end="17:45">PCI_STATUS</name></expr></argument>,

                 <argument pos:start="19:18" pos:end="21:37"><expr pos:start="19:18" pos:end="21:37"><call pos:start="19:18" pos:end="19:59"><name pos:start="19:18" pos:end="19:29">pci_get_word</name><argument_list pos:start="19:30" pos:end="19:59">(<argument pos:start="19:31" pos:end="19:58"><expr pos:start="19:31" pos:end="19:58"><name pos:start="19:31" pos:end="19:45"><name pos:start="19:31" pos:end="19:37">pci_dev</name><operator pos:start="19:38" pos:end="19:39">-&gt;</operator><name pos:start="19:40" pos:end="19:45">config</name></name> <operator pos:start="19:47" pos:end="19:47">+</operator> <name pos:start="19:49" pos:end="19:58">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="19:61" pos:end="19:61">&amp;</operator>

                 <operator pos:start="21:18" pos:end="21:18">~</operator><name pos:start="21:19" pos:end="21:37">PCI_STATUS_CAP_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="27:67">/* Expose MSI capability

     * MSI capability is the 1st capability in capability config */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:58"><expr pos:start="29:5" pos:end="29:57"><name pos:start="29:5" pos:end="29:7">pos</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:57"><name pos:start="29:11" pos:end="29:29">pci_find_cap_offset</name><argument_list pos:start="29:30" pos:end="29:57">(<argument pos:start="29:31" pos:end="29:37"><expr pos:start="29:31" pos:end="29:37"><name pos:start="29:31" pos:end="29:37">pci_dev</name></expr></argument>, <argument pos:start="29:40" pos:end="29:53"><expr pos:start="29:40" pos:end="29:53"><name pos:start="29:40" pos:end="29:53">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="29:56" pos:end="29:56"><expr pos:start="29:56" pos:end="29:56"><literal type="number" pos:start="29:56" pos:end="29:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="77:5"><if pos:start="31:5" pos:end="77:5">if <condition pos:start="31:8" pos:end="31:75">(<expr pos:start="31:9" pos:end="31:74"><name pos:start="31:9" pos:end="31:11">pos</name> <operator pos:start="31:13" pos:end="31:14">!=</operator> <literal type="number" pos:start="31:16" pos:end="31:16">0</literal> <operator pos:start="31:18" pos:end="31:19">&amp;&amp;</operator> <call pos:start="31:21" pos:end="31:74"><name pos:start="31:21" pos:end="31:39">kvm_check_extension</name><argument_list pos:start="31:40" pos:end="31:74">(<argument pos:start="31:41" pos:end="31:49"><expr pos:start="31:41" pos:end="31:49"><name pos:start="31:41" pos:end="31:49">kvm_state</name></expr></argument>, <argument pos:start="31:52" pos:end="31:73"><expr pos:start="31:52" pos:end="31:73"><name pos:start="31:52" pos:end="31:73">KVM_CAP_ASSIGN_DEV_IRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:77" pos:end="77:5">{<block_content pos:start="33:9" pos:end="75:69">

        <if_stmt pos:start="33:9" pos:end="37:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:39">(<expr pos:start="33:13" pos:end="33:38"><operator pos:start="33:13" pos:end="33:13">!</operator><call pos:start="33:14" pos:end="33:38"><name pos:start="33:14" pos:end="33:36">check_irqchip_in_kernel</name><argument_list pos:start="33:37" pos:end="33:38">()</argument_list></call></expr>)</condition> <block pos:start="33:41" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:28">

            <return pos:start="35:13" pos:end="35:28">return <expr pos:start="35:20" pos:end="35:27"><operator pos:start="35:20" pos:end="35:20">-</operator><name pos:start="35:21" pos:end="35:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:54"><expr pos:start="39:9" pos:end="39:53"><name pos:start="39:9" pos:end="39:26"><name pos:start="39:9" pos:end="39:11">dev</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:16">cap</name><operator pos:start="39:17" pos:end="39:17">.</operator><name pos:start="39:18" pos:end="39:26">available</name></name> <operator pos:start="39:28" pos:end="39:29">|=</operator> <name pos:start="39:31" pos:end="39:53">ASSIGNED_DEVICE_CAP_MSI</name></expr>;</expr_stmt>

        <comment type="block" pos:start="41:9" pos:end="41:53">/* Only 32-bit/no-mask currently supported */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:67"><expr pos:start="43:9" pos:end="43:66"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">=</operator> <call pos:start="43:15" pos:end="43:66"><name pos:start="43:15" pos:end="43:32">pci_add_capability</name><argument_list pos:start="43:33" pos:end="43:66">(<argument pos:start="43:34" pos:end="43:40"><expr pos:start="43:34" pos:end="43:40"><name pos:start="43:34" pos:end="43:40">pci_dev</name></expr></argument>, <argument pos:start="43:43" pos:end="43:56"><expr pos:start="43:43" pos:end="43:56"><name pos:start="43:43" pos:end="43:56">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="43:59" pos:end="43:61"><expr pos:start="43:59" pos:end="43:61"><name pos:start="43:59" pos:end="43:61">pos</name></expr></argument>, <argument pos:start="43:64" pos:end="43:65"><expr pos:start="43:64" pos:end="43:65"><literal type="number" pos:start="43:64" pos:end="43:65">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="45:9" pos:end="49:9"><if pos:start="45:9" pos:end="49:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">ret</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="49:9">{<block_content pos:start="47:13" pos:end="47:23">

            <return pos:start="47:13" pos:end="47:23">return <expr pos:start="47:20" pos:end="47:22"><name pos:start="47:20" pos:end="47:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:31"><expr pos:start="51:9" pos:end="51:30"><name pos:start="51:9" pos:end="51:24"><name pos:start="51:9" pos:end="51:15">pci_dev</name><operator pos:start="51:16" pos:end="51:17">-&gt;</operator><name pos:start="51:18" pos:end="51:24">msi_cap</name></name> <operator pos:start="51:26" pos:end="51:26">=</operator> <name pos:start="51:28" pos:end="51:30">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="59:42"><expr pos:start="55:9" pos:end="59:41"><call pos:start="55:9" pos:end="59:41"><name pos:start="55:9" pos:end="55:20">pci_set_word</name><argument_list pos:start="55:21" pos:end="59:41">(<argument pos:start="55:22" pos:end="55:58"><expr pos:start="55:22" pos:end="55:58"><name pos:start="55:22" pos:end="55:36"><name pos:start="55:22" pos:end="55:28">pci_dev</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:36">config</name></name> <operator pos:start="55:38" pos:end="55:38">+</operator> <name pos:start="55:40" pos:end="55:42">pos</name> <operator pos:start="55:44" pos:end="55:44">+</operator> <name pos:start="55:46" pos:end="55:58">PCI_MSI_FLAGS</name></expr></argument>,

                     <argument pos:start="57:22" pos:end="59:40"><expr pos:start="57:22" pos:end="59:40"><call pos:start="57:22" pos:end="57:72"><name pos:start="57:22" pos:end="57:33">pci_get_word</name><argument_list pos:start="57:34" pos:end="57:72">(<argument pos:start="57:35" pos:end="57:71"><expr pos:start="57:35" pos:end="57:71"><name pos:start="57:35" pos:end="57:49"><name pos:start="57:35" pos:end="57:41">pci_dev</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:49">config</name></name> <operator pos:start="57:51" pos:end="57:51">+</operator> <name pos:start="57:53" pos:end="57:55">pos</name> <operator pos:start="57:57" pos:end="57:57">+</operator> <name pos:start="57:59" pos:end="57:71">PCI_MSI_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="57:74" pos:end="57:74">&amp;</operator>

                     <name pos:start="59:22" pos:end="59:40">PCI_MSI_FLAGS_QMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:68"><expr pos:start="61:9" pos:end="61:67"><call pos:start="61:9" pos:end="61:67"><name pos:start="61:9" pos:end="61:20">pci_set_long</name><argument_list pos:start="61:21" pos:end="61:67">(<argument pos:start="61:22" pos:end="61:63"><expr pos:start="61:22" pos:end="61:63"><name pos:start="61:22" pos:end="61:36"><name pos:start="61:22" pos:end="61:28">pci_dev</name><operator pos:start="61:29" pos:end="61:30">-&gt;</operator><name pos:start="61:31" pos:end="61:36">config</name></name> <operator pos:start="61:38" pos:end="61:38">+</operator> <name pos:start="61:40" pos:end="61:42">pos</name> <operator pos:start="61:44" pos:end="61:44">+</operator> <name pos:start="61:46" pos:end="61:63">PCI_MSI_ADDRESS_LO</name></expr></argument>, <argument pos:start="61:66" pos:end="61:66"><expr pos:start="61:66" pos:end="61:66"><literal type="number" pos:start="61:66" pos:end="61:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:65"><expr pos:start="63:9" pos:end="63:64"><call pos:start="63:9" pos:end="63:64"><name pos:start="63:9" pos:end="63:20">pci_set_word</name><argument_list pos:start="63:21" pos:end="63:64">(<argument pos:start="63:22" pos:end="63:60"><expr pos:start="63:22" pos:end="63:60"><name pos:start="63:22" pos:end="63:36"><name pos:start="63:22" pos:end="63:28">pci_dev</name><operator pos:start="63:29" pos:end="63:30">-&gt;</operator><name pos:start="63:31" pos:end="63:36">config</name></name> <operator pos:start="63:38" pos:end="63:38">+</operator> <name pos:start="63:40" pos:end="63:42">pos</name> <operator pos:start="63:44" pos:end="63:44">+</operator> <name pos:start="63:46" pos:end="63:60">PCI_MSI_DATA_32</name></expr></argument>, <argument pos:start="63:63" pos:end="63:63"><expr pos:start="63:63" pos:end="63:63"><literal type="number" pos:start="63:63" pos:end="63:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="67:9" pos:end="67:33">/* Set writable fields */</comment>

        <expr_stmt pos:start="69:9" pos:end="71:65"><expr pos:start="69:9" pos:end="71:64"><call pos:start="69:9" pos:end="71:64"><name pos:start="69:9" pos:end="69:20">pci_set_word</name><argument_list pos:start="69:21" pos:end="71:64">(<argument pos:start="69:22" pos:end="69:57"><expr pos:start="69:22" pos:end="69:57"><name pos:start="69:22" pos:end="69:35"><name pos:start="69:22" pos:end="69:28">pci_dev</name><operator pos:start="69:29" pos:end="69:30">-&gt;</operator><name pos:start="69:31" pos:end="69:35">wmask</name></name> <operator pos:start="69:37" pos:end="69:37">+</operator> <name pos:start="69:39" pos:end="69:41">pos</name> <operator pos:start="69:43" pos:end="69:43">+</operator> <name pos:start="69:45" pos:end="69:57">PCI_MSI_FLAGS</name></expr></argument>,

                     <argument pos:start="71:22" pos:end="71:63"><expr pos:start="71:22" pos:end="71:63"><name pos:start="71:22" pos:end="71:40">PCI_MSI_FLAGS_QSIZE</name> <operator pos:start="71:42" pos:end="71:42">|</operator> <name pos:start="71:44" pos:end="71:63">PCI_MSI_FLAGS_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:76"><expr pos:start="73:9" pos:end="73:75"><call pos:start="73:9" pos:end="73:75"><name pos:start="73:9" pos:end="73:20">pci_set_long</name><argument_list pos:start="73:21" pos:end="73:75">(<argument pos:start="73:22" pos:end="73:62"><expr pos:start="73:22" pos:end="73:62"><name pos:start="73:22" pos:end="73:35"><name pos:start="73:22" pos:end="73:28">pci_dev</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:35">wmask</name></name> <operator pos:start="73:37" pos:end="73:37">+</operator> <name pos:start="73:39" pos:end="73:41">pos</name> <operator pos:start="73:43" pos:end="73:43">+</operator> <name pos:start="73:45" pos:end="73:62">PCI_MSI_ADDRESS_LO</name></expr></argument>, <argument pos:start="73:65" pos:end="73:74"><expr pos:start="73:65" pos:end="73:74"><literal type="number" pos:start="73:65" pos:end="73:74">0xfffffffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:69"><expr pos:start="75:9" pos:end="75:68"><call pos:start="75:9" pos:end="75:68"><name pos:start="75:9" pos:end="75:20">pci_set_word</name><argument_list pos:start="75:21" pos:end="75:68">(<argument pos:start="75:22" pos:end="75:59"><expr pos:start="75:22" pos:end="75:59"><name pos:start="75:22" pos:end="75:35"><name pos:start="75:22" pos:end="75:28">pci_dev</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:35">wmask</name></name> <operator pos:start="75:37" pos:end="75:37">+</operator> <name pos:start="75:39" pos:end="75:41">pos</name> <operator pos:start="75:43" pos:end="75:43">+</operator> <name pos:start="75:45" pos:end="75:59">PCI_MSI_DATA_32</name></expr></argument>, <argument pos:start="75:62" pos:end="75:67"><expr pos:start="75:62" pos:end="75:67"><literal type="number" pos:start="75:62" pos:end="75:67">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="79:5" pos:end="79:33">/* Expose MSI-X capability */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:59"><expr pos:start="81:5" pos:end="81:58"><name pos:start="81:5" pos:end="81:7">pos</name> <operator pos:start="81:9" pos:end="81:9">=</operator> <call pos:start="81:11" pos:end="81:58"><name pos:start="81:11" pos:end="81:29">pci_find_cap_offset</name><argument_list pos:start="81:30" pos:end="81:58">(<argument pos:start="81:31" pos:end="81:37"><expr pos:start="81:31" pos:end="81:37"><name pos:start="81:31" pos:end="81:37">pci_dev</name></expr></argument>, <argument pos:start="81:40" pos:end="81:54"><expr pos:start="81:40" pos:end="81:54"><name pos:start="81:40" pos:end="81:54">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="81:57" pos:end="81:57"><expr pos:start="81:57" pos:end="81:57"><literal type="number" pos:start="81:57" pos:end="81:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="83:5" pos:end="141:5"><if pos:start="83:5" pos:end="141:5">if <condition pos:start="83:8" pos:end="83:57">(<expr pos:start="83:9" pos:end="83:56"><name pos:start="83:9" pos:end="83:11">pos</name> <operator pos:start="83:13" pos:end="83:14">!=</operator> <literal type="number" pos:start="83:16" pos:end="83:16">0</literal> <operator pos:start="83:18" pos:end="83:19">&amp;&amp;</operator> <call pos:start="83:21" pos:end="83:56"><name pos:start="83:21" pos:end="83:45">kvm_device_msix_supported</name><argument_list pos:start="83:46" pos:end="83:56">(<argument pos:start="83:47" pos:end="83:55"><expr pos:start="83:47" pos:end="83:55"><name pos:start="83:47" pos:end="83:55">kvm_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:59" pos:end="141:5">{<block_content pos:start="85:9" pos:end="139:27">

        <decl_stmt pos:start="85:9" pos:end="85:19"><decl pos:start="85:9" pos:end="85:18"><type pos:start="85:9" pos:end="85:11"><name pos:start="85:9" pos:end="85:11">int</name></type> <name pos:start="85:13" pos:end="85:18">bar_nr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="87:9" pos:end="87:34"><decl pos:start="87:9" pos:end="87:33"><type pos:start="87:9" pos:end="87:16"><name pos:start="87:9" pos:end="87:16">uint32_t</name></type> <name pos:start="87:18" pos:end="87:33">msix_table_entry</name></decl>;</decl_stmt>



        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:39">(<expr pos:start="91:13" pos:end="91:38"><operator pos:start="91:13" pos:end="91:13">!</operator><call pos:start="91:14" pos:end="91:38"><name pos:start="91:14" pos:end="91:36">check_irqchip_in_kernel</name><argument_list pos:start="91:37" pos:end="91:38">()</argument_list></call></expr>)</condition> <block pos:start="91:41" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:28">

            <return pos:start="93:13" pos:end="93:28">return <expr pos:start="93:20" pos:end="93:27"><operator pos:start="93:20" pos:end="93:20">-</operator><name pos:start="93:21" pos:end="93:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:55"><expr pos:start="97:9" pos:end="97:54"><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:11">dev</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:16">cap</name><operator pos:start="97:17" pos:end="97:17">.</operator><name pos:start="97:18" pos:end="97:26">available</name></name> <operator pos:start="97:28" pos:end="97:29">|=</operator> <name pos:start="97:31" pos:end="97:54">ASSIGNED_DEVICE_CAP_MSIX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:68"><expr pos:start="99:9" pos:end="99:67"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">=</operator> <call pos:start="99:15" pos:end="99:67"><name pos:start="99:15" pos:end="99:32">pci_add_capability</name><argument_list pos:start="99:33" pos:end="99:67">(<argument pos:start="99:34" pos:end="99:40"><expr pos:start="99:34" pos:end="99:40"><name pos:start="99:34" pos:end="99:40">pci_dev</name></expr></argument>, <argument pos:start="99:43" pos:end="99:57"><expr pos:start="99:43" pos:end="99:57"><name pos:start="99:43" pos:end="99:57">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="99:60" pos:end="99:62"><expr pos:start="99:60" pos:end="99:62"><name pos:start="99:60" pos:end="99:62">pos</name></expr></argument>, <argument pos:start="99:65" pos:end="99:66"><expr pos:start="99:65" pos:end="99:66"><literal type="number" pos:start="99:65" pos:end="99:66">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="101:9" pos:end="105:9"><if pos:start="101:9" pos:end="105:9">if <condition pos:start="101:12" pos:end="101:20">(<expr pos:start="101:13" pos:end="101:19"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">&lt;</operator> <literal type="number" pos:start="101:19" pos:end="101:19">0</literal></expr>)</condition> <block pos:start="101:22" pos:end="105:9">{<block_content pos:start="103:13" pos:end="103:23">

            <return pos:start="103:13" pos:end="103:23">return <expr pos:start="103:20" pos:end="103:22"><name pos:start="103:20" pos:end="103:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:15">pci_dev</name><operator pos:start="107:16" pos:end="107:17">-&gt;</operator><name pos:start="107:18" pos:end="107:25">msix_cap</name></name> <operator pos:start="107:27" pos:end="107:27">=</operator> <name pos:start="107:29" pos:end="107:31">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="111:9" pos:end="115:43"><expr pos:start="111:9" pos:end="115:42"><call pos:start="111:9" pos:end="115:42"><name pos:start="111:9" pos:end="111:20">pci_set_word</name><argument_list pos:start="111:21" pos:end="115:42">(<argument pos:start="111:22" pos:end="111:59"><expr pos:start="111:22" pos:end="111:59"><name pos:start="111:22" pos:end="111:36"><name pos:start="111:22" pos:end="111:28">pci_dev</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:36">config</name></name> <operator pos:start="111:38" pos:end="111:38">+</operator> <name pos:start="111:40" pos:end="111:42">pos</name> <operator pos:start="111:44" pos:end="111:44">+</operator> <name pos:start="111:46" pos:end="111:59">PCI_MSIX_FLAGS</name></expr></argument>,

                     <argument pos:start="113:22" pos:end="115:41"><expr pos:start="113:22" pos:end="115:41"><call pos:start="113:22" pos:end="113:73"><name pos:start="113:22" pos:end="113:33">pci_get_word</name><argument_list pos:start="113:34" pos:end="113:73">(<argument pos:start="113:35" pos:end="113:72"><expr pos:start="113:35" pos:end="113:72"><name pos:start="113:35" pos:end="113:49"><name pos:start="113:35" pos:end="113:41">pci_dev</name><operator pos:start="113:42" pos:end="113:43">-&gt;</operator><name pos:start="113:44" pos:end="113:49">config</name></name> <operator pos:start="113:51" pos:end="113:51">+</operator> <name pos:start="113:53" pos:end="113:55">pos</name> <operator pos:start="113:57" pos:end="113:57">+</operator> <name pos:start="113:59" pos:end="113:72">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="113:75" pos:end="113:75">&amp;</operator>

                     <name pos:start="115:22" pos:end="115:41">PCI_MSIX_FLAGS_QSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="119:9" pos:end="119:61">/* Only enable and function mask bits are writable */</comment>

        <expr_stmt pos:start="121:9" pos:end="123:69"><expr pos:start="121:9" pos:end="123:68"><call pos:start="121:9" pos:end="123:68"><name pos:start="121:9" pos:end="121:20">pci_set_word</name><argument_list pos:start="121:21" pos:end="123:68">(<argument pos:start="121:22" pos:end="121:58"><expr pos:start="121:22" pos:end="121:58"><name pos:start="121:22" pos:end="121:35"><name pos:start="121:22" pos:end="121:28">pci_dev</name><operator pos:start="121:29" pos:end="121:30">-&gt;</operator><name pos:start="121:31" pos:end="121:35">wmask</name></name> <operator pos:start="121:37" pos:end="121:37">+</operator> <name pos:start="121:39" pos:end="121:41">pos</name> <operator pos:start="121:43" pos:end="121:43">+</operator> <name pos:start="121:45" pos:end="121:58">PCI_MSIX_FLAGS</name></expr></argument>,

                     <argument pos:start="123:22" pos:end="123:67"><expr pos:start="123:22" pos:end="123:67"><name pos:start="123:22" pos:end="123:42">PCI_MSIX_FLAGS_ENABLE</name> <operator pos:start="123:44" pos:end="123:44">|</operator> <name pos:start="123:46" pos:end="123:67">PCI_MSIX_FLAGS_MASKALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="127:9" pos:end="127:80"><expr pos:start="127:9" pos:end="127:79"><name pos:start="127:9" pos:end="127:24">msix_table_entry</name> <operator pos:start="127:26" pos:end="127:26">=</operator> <call pos:start="127:28" pos:end="127:79"><name pos:start="127:28" pos:end="127:39">pci_get_long</name><argument_list pos:start="127:40" pos:end="127:79">(<argument pos:start="127:41" pos:end="127:78"><expr pos:start="127:41" pos:end="127:78"><name pos:start="127:41" pos:end="127:55"><name pos:start="127:41" pos:end="127:47">pci_dev</name><operator pos:start="127:48" pos:end="127:49">-&gt;</operator><name pos:start="127:50" pos:end="127:55">config</name></name> <operator pos:start="127:57" pos:end="127:57">+</operator> <name pos:start="127:59" pos:end="127:61">pos</name> <operator pos:start="127:63" pos:end="127:63">+</operator> <name pos:start="127:65" pos:end="127:78">PCI_MSIX_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:59"><expr pos:start="129:9" pos:end="129:58"><name pos:start="129:9" pos:end="129:14">bar_nr</name> <operator pos:start="129:16" pos:end="129:16">=</operator> <name pos:start="129:18" pos:end="129:33">msix_table_entry</name> <operator pos:start="129:35" pos:end="129:35">&amp;</operator> <name pos:start="129:37" pos:end="129:58">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:52"><expr pos:start="131:9" pos:end="131:51"><name pos:start="131:9" pos:end="131:24">msix_table_entry</name> <operator pos:start="131:26" pos:end="131:27">&amp;=</operator> <operator pos:start="131:29" pos:end="131:29">~</operator><name pos:start="131:30" pos:end="131:51">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:79"><expr pos:start="133:9" pos:end="133:78"><name pos:start="133:9" pos:end="133:28"><name pos:start="133:9" pos:end="133:11">dev</name><operator pos:start="133:12" pos:end="133:13">-&gt;</operator><name pos:start="133:14" pos:end="133:28">msix_table_addr</name></name> <operator pos:start="133:30" pos:end="133:30">=</operator> <name pos:start="133:32" pos:end="133:49"><name pos:start="133:32" pos:end="133:41">pci_region</name><index pos:start="133:42" pos:end="133:49">[<expr pos:start="133:43" pos:end="133:48"><name pos:start="133:43" pos:end="133:48">bar_nr</name></expr>]</index></name><operator pos:start="133:50" pos:end="133:50">.</operator><name pos:start="133:51" pos:end="133:59">base_addr</name> <operator pos:start="133:61" pos:end="133:61">+</operator> <name pos:start="133:63" pos:end="133:78">msix_table_entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:77"><expr pos:start="135:9" pos:end="135:76"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:11">dev</name><operator pos:start="135:12" pos:end="135:13">-&gt;</operator><name pos:start="135:14" pos:end="135:21">msix_max</name></name> <operator pos:start="135:23" pos:end="135:23">=</operator> <call pos:start="135:25" pos:end="135:76"><name pos:start="135:25" pos:end="135:36">pci_get_word</name><argument_list pos:start="135:37" pos:end="135:76">(<argument pos:start="135:38" pos:end="135:75"><expr pos:start="135:38" pos:end="135:75"><name pos:start="135:38" pos:end="135:52"><name pos:start="135:38" pos:end="135:44">pci_dev</name><operator pos:start="135:45" pos:end="135:46">-&gt;</operator><name pos:start="135:47" pos:end="135:52">config</name></name> <operator pos:start="135:54" pos:end="135:54">+</operator> <name pos:start="135:56" pos:end="135:58">pos</name> <operator pos:start="135:60" pos:end="135:60">+</operator> <name pos:start="135:62" pos:end="135:75">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:46"><expr pos:start="137:9" pos:end="137:45"><name pos:start="137:9" pos:end="137:21"><name pos:start="137:9" pos:end="137:11">dev</name><operator pos:start="137:12" pos:end="137:13">-&gt;</operator><name pos:start="137:14" pos:end="137:21">msix_max</name></name> <operator pos:start="137:23" pos:end="137:24">&amp;=</operator> <name pos:start="137:26" pos:end="137:45">PCI_MSIX_FLAGS_QSIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:27"><expr pos:start="139:9" pos:end="139:26"><name pos:start="139:9" pos:end="139:21"><name pos:start="139:9" pos:end="139:11">dev</name><operator pos:start="139:12" pos:end="139:13">-&gt;</operator><name pos:start="139:14" pos:end="139:21">msix_max</name></name> <operator pos:start="139:23" pos:end="139:24">+=</operator> <literal type="number" pos:start="139:26" pos:end="139:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:77">/* Minimal PM support, nothing writable, device appears to NAK changes */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:57"><expr pos:start="147:5" pos:end="147:56"><name pos:start="147:5" pos:end="147:7">pos</name> <operator pos:start="147:9" pos:end="147:9">=</operator> <call pos:start="147:11" pos:end="147:56"><name pos:start="147:11" pos:end="147:29">pci_find_cap_offset</name><argument_list pos:start="147:30" pos:end="147:56">(<argument pos:start="147:31" pos:end="147:37"><expr pos:start="147:31" pos:end="147:37"><name pos:start="147:31" pos:end="147:37">pci_dev</name></expr></argument>, <argument pos:start="147:40" pos:end="147:52"><expr pos:start="147:40" pos:end="147:52"><name pos:start="147:40" pos:end="147:52">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="147:55" pos:end="147:55"><expr pos:start="147:55" pos:end="147:55"><literal type="number" pos:start="147:55" pos:end="147:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="191:5"><if pos:start="149:5" pos:end="191:5">if <condition pos:start="149:8" pos:end="149:12">(<expr pos:start="149:9" pos:end="149:11"><name pos:start="149:9" pos:end="149:11">pos</name></expr>)</condition> <block pos:start="149:14" pos:end="191:5">{<block_content pos:start="151:9" pos:end="189:70">

        <decl_stmt pos:start="151:9" pos:end="151:21"><decl pos:start="151:9" pos:end="151:20"><type pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:16">uint16_t</name></type> <name pos:start="151:18" pos:end="151:20">pmc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:77"><expr pos:start="155:9" pos:end="155:76"><name pos:start="155:9" pos:end="155:11">ret</name> <operator pos:start="155:13" pos:end="155:13">=</operator> <call pos:start="155:15" pos:end="155:76"><name pos:start="155:15" pos:end="155:32">pci_add_capability</name><argument_list pos:start="155:33" pos:end="155:76">(<argument pos:start="155:34" pos:end="155:40"><expr pos:start="155:34" pos:end="155:40"><name pos:start="155:34" pos:end="155:40">pci_dev</name></expr></argument>, <argument pos:start="155:43" pos:end="155:55"><expr pos:start="155:43" pos:end="155:55"><name pos:start="155:43" pos:end="155:55">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="155:58" pos:end="155:60"><expr pos:start="155:58" pos:end="155:60"><name pos:start="155:58" pos:end="155:60">pos</name></expr></argument>, <argument pos:start="155:63" pos:end="155:75"><expr pos:start="155:63" pos:end="155:75"><name pos:start="155:63" pos:end="155:75">PCI_PM_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="157:9" pos:end="161:9"><if pos:start="157:9" pos:end="161:9">if <condition pos:start="157:12" pos:end="157:20">(<expr pos:start="157:13" pos:end="157:19"><name pos:start="157:13" pos:end="157:15">ret</name> <operator pos:start="157:17" pos:end="157:17">&lt;</operator> <literal type="number" pos:start="157:19" pos:end="157:19">0</literal></expr>)</condition> <block pos:start="157:22" pos:end="161:9">{<block_content pos:start="159:13" pos:end="159:23">

            <return pos:start="159:13" pos:end="159:23">return <expr pos:start="159:20" pos:end="159:22"><name pos:start="159:20" pos:end="159:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="165:9" pos:end="165:61"><expr pos:start="165:9" pos:end="165:60"><call pos:start="165:9" pos:end="165:60"><name pos:start="165:9" pos:end="165:35">assigned_dev_setup_cap_read</name><argument_list pos:start="165:36" pos:end="165:60">(<argument pos:start="165:37" pos:end="165:39"><expr pos:start="165:37" pos:end="165:39"><name pos:start="165:37" pos:end="165:39">dev</name></expr></argument>, <argument pos:start="165:42" pos:end="165:44"><expr pos:start="165:42" pos:end="165:44"><name pos:start="165:42" pos:end="165:44">pos</name></expr></argument>, <argument pos:start="165:47" pos:end="165:59"><expr pos:start="165:47" pos:end="165:59"><name pos:start="165:47" pos:end="165:59">PCI_PM_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="169:9" pos:end="169:66"><expr pos:start="169:9" pos:end="169:65"><name pos:start="169:9" pos:end="169:11">pmc</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:65"><name pos:start="169:15" pos:end="169:26">pci_get_word</name><argument_list pos:start="169:27" pos:end="169:65">(<argument pos:start="169:28" pos:end="169:64"><expr pos:start="169:28" pos:end="169:64"><name pos:start="169:28" pos:end="169:42"><name pos:start="169:28" pos:end="169:34">pci_dev</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:42">config</name></name> <operator pos:start="169:44" pos:end="169:44">+</operator> <name pos:start="169:46" pos:end="169:48">pos</name> <operator pos:start="169:50" pos:end="169:50">+</operator> <name pos:start="169:52" pos:end="169:64">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:54"><expr pos:start="171:9" pos:end="171:53"><name pos:start="171:9" pos:end="171:11">pmc</name> <operator pos:start="171:13" pos:end="171:14">&amp;=</operator> <operator pos:start="171:16" pos:end="171:16">(</operator><name pos:start="171:17" pos:end="171:35">PCI_PM_CAP_VER_MASK</name> <operator pos:start="171:37" pos:end="171:37">|</operator> <name pos:start="171:39" pos:end="171:52">PCI_PM_CAP_DSI</name><operator pos:start="171:53" pos:end="171:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:65"><expr pos:start="173:9" pos:end="173:64"><call pos:start="173:9" pos:end="173:64"><name pos:start="173:9" pos:end="173:20">pci_set_word</name><argument_list pos:start="173:21" pos:end="173:64">(<argument pos:start="173:22" pos:end="173:58"><expr pos:start="173:22" pos:end="173:58"><name pos:start="173:22" pos:end="173:36"><name pos:start="173:22" pos:end="173:28">pci_dev</name><operator pos:start="173:29" pos:end="173:30">-&gt;</operator><name pos:start="173:31" pos:end="173:36">config</name></name> <operator pos:start="173:38" pos:end="173:38">+</operator> <name pos:start="173:40" pos:end="173:42">pos</name> <operator pos:start="173:44" pos:end="173:44">+</operator> <name pos:start="173:46" pos:end="173:58">PCI_CAP_FLAGS</name></expr></argument>, <argument pos:start="173:61" pos:end="173:63"><expr pos:start="173:61" pos:end="173:63"><name pos:start="173:61" pos:end="173:63">pmc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="177:9" pos:end="179:55">/* assign_device will bring the device up to D0, so we don't need

         * to worry about doing that ourselves here. */</comment>

        <expr_stmt pos:start="181:9" pos:end="183:48"><expr pos:start="181:9" pos:end="183:47"><call pos:start="181:9" pos:end="183:47"><name pos:start="181:9" pos:end="181:20">pci_set_word</name><argument_list pos:start="181:21" pos:end="183:47">(<argument pos:start="181:22" pos:end="181:56"><expr pos:start="181:22" pos:end="181:56"><name pos:start="181:22" pos:end="181:36"><name pos:start="181:22" pos:end="181:28">pci_dev</name><operator pos:start="181:29" pos:end="181:30">-&gt;</operator><name pos:start="181:31" pos:end="181:36">config</name></name> <operator pos:start="181:38" pos:end="181:38">+</operator> <name pos:start="181:40" pos:end="181:42">pos</name> <operator pos:start="181:44" pos:end="181:44">+</operator> <name pos:start="181:46" pos:end="181:56">PCI_PM_CTRL</name></expr></argument>,

                     <argument pos:start="183:22" pos:end="183:46"><expr pos:start="183:22" pos:end="183:46"><name pos:start="183:22" pos:end="183:46">PCI_PM_CTRL_NO_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:71"><expr pos:start="187:9" pos:end="187:70"><call pos:start="187:9" pos:end="187:70"><name pos:start="187:9" pos:end="187:20">pci_set_byte</name><argument_list pos:start="187:21" pos:end="187:70">(<argument pos:start="187:22" pos:end="187:66"><expr pos:start="187:22" pos:end="187:66"><name pos:start="187:22" pos:end="187:36"><name pos:start="187:22" pos:end="187:28">pci_dev</name><operator pos:start="187:29" pos:end="187:30">-&gt;</operator><name pos:start="187:31" pos:end="187:36">config</name></name> <operator pos:start="187:38" pos:end="187:38">+</operator> <name pos:start="187:40" pos:end="187:42">pos</name> <operator pos:start="187:44" pos:end="187:44">+</operator> <name pos:start="187:46" pos:end="187:66">PCI_PM_PPB_EXTENSIONS</name></expr></argument>, <argument pos:start="187:69" pos:end="187:69"><expr pos:start="187:69" pos:end="187:69"><literal type="number" pos:start="187:69" pos:end="187:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="189:9" pos:end="189:70"><expr pos:start="189:9" pos:end="189:69"><call pos:start="189:9" pos:end="189:69"><name pos:start="189:9" pos:end="189:20">pci_set_byte</name><argument_list pos:start="189:21" pos:end="189:69">(<argument pos:start="189:22" pos:end="189:65"><expr pos:start="189:22" pos:end="189:65"><name pos:start="189:22" pos:end="189:36"><name pos:start="189:22" pos:end="189:28">pci_dev</name><operator pos:start="189:29" pos:end="189:30">-&gt;</operator><name pos:start="189:31" pos:end="189:36">config</name></name> <operator pos:start="189:38" pos:end="189:38">+</operator> <name pos:start="189:40" pos:end="189:42">pos</name> <operator pos:start="189:44" pos:end="189:44">+</operator> <name pos:start="189:46" pos:end="189:65">PCI_PM_DATA_REGISTER</name></expr></argument>, <argument pos:start="189:68" pos:end="189:68"><expr pos:start="189:68" pos:end="189:68"><literal type="number" pos:start="189:68" pos:end="189:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="195:5" pos:end="195:58"><expr pos:start="195:5" pos:end="195:57"><name pos:start="195:5" pos:end="195:7">pos</name> <operator pos:start="195:9" pos:end="195:9">=</operator> <call pos:start="195:11" pos:end="195:57"><name pos:start="195:11" pos:end="195:29">pci_find_cap_offset</name><argument_list pos:start="195:30" pos:end="195:57">(<argument pos:start="195:31" pos:end="195:37"><expr pos:start="195:31" pos:end="195:37"><name pos:start="195:31" pos:end="195:37">pci_dev</name></expr></argument>, <argument pos:start="195:40" pos:end="195:53"><expr pos:start="195:40" pos:end="195:53"><name pos:start="195:40" pos:end="195:53">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="195:56" pos:end="195:56"><expr pos:start="195:56" pos:end="195:56"><literal type="number" pos:start="195:56" pos:end="195:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="197:5" pos:end="419:5"><if pos:start="197:5" pos:end="419:5">if <condition pos:start="197:8" pos:end="197:12">(<expr pos:start="197:9" pos:end="197:11"><name pos:start="197:9" pos:end="197:11">pos</name></expr>)</condition> <block pos:start="197:14" pos:end="419:5">{<block_content pos:start="199:9" pos:end="417:9">

        <decl_stmt pos:start="199:9" pos:end="199:34"><decl pos:start="199:9" pos:end="199:23"><type pos:start="199:9" pos:end="199:15"><name pos:start="199:9" pos:end="199:15">uint8_t</name></type> <name pos:start="199:17" pos:end="199:23">version</name></decl>, <decl pos:start="199:26" pos:end="199:33"><type ref="prev" pos:start="199:9" pos:end="199:15"/><name pos:start="199:26" pos:end="199:29">size</name> <init pos:start="199:31" pos:end="199:33">= <expr pos:start="199:33" pos:end="199:33"><literal type="number" pos:start="199:33" pos:end="199:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="201:9" pos:end="201:38"><decl pos:start="201:9" pos:end="201:21"><type pos:start="201:9" pos:end="201:16"><name pos:start="201:9" pos:end="201:16">uint16_t</name></type> <name pos:start="201:18" pos:end="201:21">type</name></decl>, <decl pos:start="201:24" pos:end="201:29"><type ref="prev" pos:start="201:9" pos:end="201:16"/><name pos:start="201:24" pos:end="201:29">devctl</name></decl>, <decl pos:start="201:32" pos:end="201:37"><type ref="prev" pos:start="201:9" pos:end="201:16"/><name pos:start="201:32" pos:end="201:37">lnksta</name></decl>;</decl_stmt>

        <decl_stmt pos:start="203:9" pos:end="203:32"><decl pos:start="203:9" pos:end="203:23"><type pos:start="203:9" pos:end="203:16"><name pos:start="203:9" pos:end="203:16">uint32_t</name></type> <name pos:start="203:18" pos:end="203:23">devcap</name></decl>, <decl pos:start="203:26" pos:end="203:31"><type ref="prev" pos:start="203:9" pos:end="203:16"/><name pos:start="203:26" pos:end="203:31">lnkcap</name></decl>;</decl_stmt>



        <expr_stmt pos:start="207:9" pos:end="207:70"><expr pos:start="207:9" pos:end="207:69"><name pos:start="207:9" pos:end="207:15">version</name> <operator pos:start="207:17" pos:end="207:17">=</operator> <call pos:start="207:19" pos:end="207:69"><name pos:start="207:19" pos:end="207:30">pci_get_byte</name><argument_list pos:start="207:31" pos:end="207:69">(<argument pos:start="207:32" pos:end="207:68"><expr pos:start="207:32" pos:end="207:68"><name pos:start="207:32" pos:end="207:46"><name pos:start="207:32" pos:end="207:38">pci_dev</name><operator pos:start="207:39" pos:end="207:40">-&gt;</operator><name pos:start="207:41" pos:end="207:46">config</name></name> <operator pos:start="207:48" pos:end="207:48">+</operator> <name pos:start="207:50" pos:end="207:52">pos</name> <operator pos:start="207:54" pos:end="207:54">+</operator> <name pos:start="207:56" pos:end="207:68">PCI_EXP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:38"><expr pos:start="209:9" pos:end="209:37"><name pos:start="209:9" pos:end="209:15">version</name> <operator pos:start="209:17" pos:end="209:18">&amp;=</operator> <name pos:start="209:20" pos:end="209:37">PCI_EXP_FLAGS_VERS</name></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="271:9"><if pos:start="211:9" pos:end="215:9">if <condition pos:start="211:12" pos:end="211:25">(<expr pos:start="211:13" pos:end="211:24"><name pos:start="211:13" pos:end="211:19">version</name> <operator pos:start="211:21" pos:end="211:22">==</operator> <literal type="number" pos:start="211:24" pos:end="211:24">1</literal></expr>)</condition> <block pos:start="211:27" pos:end="215:9">{<block_content pos:start="213:13" pos:end="213:24">

            <expr_stmt pos:start="213:13" pos:end="213:24"><expr pos:start="213:13" pos:end="213:23"><name pos:start="213:13" pos:end="213:16">size</name> <operator pos:start="213:18" pos:end="213:18">=</operator> <literal type="number" pos:start="213:20" pos:end="213:23">0x14</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="215:11" pos:end="249:9">else if <condition pos:start="215:19" pos:end="215:32">(<expr pos:start="215:20" pos:end="215:31"><name pos:start="215:20" pos:end="215:26">version</name> <operator pos:start="215:28" pos:end="215:29">==</operator> <literal type="number" pos:start="215:31" pos:end="215:31">2</literal></expr>)</condition> <block pos:start="215:34" pos:end="249:9">{<block_content pos:start="229:13" pos:end="247:13">

            <comment type="block" pos:start="217:13" pos:end="227:15">/*

             * Check for non-std size, accept reduced size to 0x34,

             * which is what bcm5761 implemented, violating the

             * PCIe v3.0 spec that regs should exist and be read as 0,

             * not optionally provided and shorten the struct size.

             */</comment>

            <expr_stmt pos:start="229:13" pos:end="229:58"><expr pos:start="229:13" pos:end="229:57"><name pos:start="229:13" pos:end="229:16">size</name> <operator pos:start="229:18" pos:end="229:18">=</operator> <call pos:start="229:20" pos:end="229:57"><name pos:start="229:20" pos:end="229:22">MIN</name><argument_list pos:start="229:23" pos:end="229:57">(<argument pos:start="229:24" pos:end="229:27"><expr pos:start="229:24" pos:end="229:27"><literal type="number" pos:start="229:24" pos:end="229:27">0x3c</literal></expr></argument>, <argument pos:start="229:30" pos:end="229:56"><expr pos:start="229:30" pos:end="229:56"><name pos:start="229:30" pos:end="229:50">PCI_CONFIG_SPACE_SIZE</name> <operator pos:start="229:52" pos:end="229:52">-</operator> <name pos:start="229:54" pos:end="229:56">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="231:13" pos:end="247:13"><if pos:start="231:13" pos:end="239:13">if <condition pos:start="231:16" pos:end="231:28">(<expr pos:start="231:17" pos:end="231:27"><name pos:start="231:17" pos:end="231:20">size</name> <operator pos:start="231:22" pos:end="231:22">&lt;</operator> <literal type="number" pos:start="231:24" pos:end="231:27">0x34</literal></expr>)</condition> <block pos:start="231:30" pos:end="239:13">{<block_content pos:start="233:17" pos:end="237:31">

                <expr_stmt pos:start="233:17" pos:end="235:55"><expr pos:start="233:17" pos:end="235:54"><call pos:start="233:17" pos:end="235:54"><name pos:start="233:17" pos:end="233:28">error_report</name><argument_list pos:start="233:29" pos:end="235:54">(<argument pos:start="233:30" pos:end="233:64"><expr pos:start="233:30" pos:end="233:64"><literal type="string" pos:start="233:30" pos:end="233:64">"%s: Invalid size PCIe cap-id 0x%x"</literal></expr></argument>,

                             <argument pos:start="235:30" pos:end="235:37"><expr pos:start="235:30" pos:end="235:37"><name pos:start="235:30" pos:end="235:37">__func__</name></expr></argument>, <argument pos:start="235:40" pos:end="235:53"><expr pos:start="235:40" pos:end="235:53"><name pos:start="235:40" pos:end="235:53">PCI_CAP_ID_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="237:17" pos:end="237:31">return <expr pos:start="237:24" pos:end="237:30"><operator pos:start="237:24" pos:end="237:24">-</operator><name pos:start="237:25" pos:end="237:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="239:15" pos:end="247:13">else if <condition pos:start="239:23" pos:end="239:36">(<expr pos:start="239:24" pos:end="239:35"><name pos:start="239:24" pos:end="239:27">size</name> <operator pos:start="239:29" pos:end="239:30">!=</operator> <literal type="number" pos:start="239:32" pos:end="239:35">0x3c</literal></expr>)</condition> <block pos:start="239:38" pos:end="247:13">{<block_content pos:start="241:17" pos:end="245:61">

                <expr_stmt pos:start="241:17" pos:end="245:61"><expr pos:start="241:17" pos:end="245:60"><call pos:start="241:17" pos:end="245:60"><name pos:start="241:17" pos:end="241:28">error_report</name><argument_list pos:start="241:29" pos:end="245:60">(<argument pos:start="241:30" pos:end="243:78"><expr pos:start="241:30" pos:end="243:78"><literal type="string" pos:start="241:30" pos:end="241:65">"WARNING, %s: PCIe cap-id 0x%x has "</literal>

                             <literal type="string" pos:start="243:30" pos:end="243:78">"non-standard size 0x%x; std size should be 0x3c"</literal></expr></argument>,

                             <argument pos:start="245:30" pos:end="245:37"><expr pos:start="245:30" pos:end="245:37"><name pos:start="245:30" pos:end="245:37">__func__</name></expr></argument>, <argument pos:start="245:40" pos:end="245:53"><expr pos:start="245:40" pos:end="245:53"><name pos:start="245:40" pos:end="245:53">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="245:56" pos:end="245:59"><expr pos:start="245:56" pos:end="245:59"><name pos:start="245:56" pos:end="245:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="249:11" pos:end="271:9">else if <condition pos:start="249:19" pos:end="249:32">(<expr pos:start="249:20" pos:end="249:31"><name pos:start="249:20" pos:end="249:26">version</name> <operator pos:start="249:28" pos:end="249:29">==</operator> <literal type="number" pos:start="249:31" pos:end="249:31">0</literal></expr>)</condition> <block pos:start="249:34" pos:end="271:9">{<block_content pos:start="251:13" pos:end="269:13">

            <decl_stmt pos:start="251:13" pos:end="251:30"><decl pos:start="251:13" pos:end="251:24"><type pos:start="251:13" pos:end="251:20"><name pos:start="251:13" pos:end="251:20">uint16_t</name></type> <name pos:start="251:22" pos:end="251:24">vid</name></decl>, <decl pos:start="251:27" pos:end="251:29"><type ref="prev" pos:start="251:13" pos:end="251:20"/><name pos:start="251:27" pos:end="251:29">did</name></decl>;</decl_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:64"><expr pos:start="253:13" pos:end="253:63"><name pos:start="253:13" pos:end="253:15">vid</name> <operator pos:start="253:17" pos:end="253:17">=</operator> <call pos:start="253:19" pos:end="253:63"><name pos:start="253:19" pos:end="253:30">pci_get_word</name><argument_list pos:start="253:31" pos:end="253:63">(<argument pos:start="253:32" pos:end="253:62"><expr pos:start="253:32" pos:end="253:62"><name pos:start="253:32" pos:end="253:46"><name pos:start="253:32" pos:end="253:38">pci_dev</name><operator pos:start="253:39" pos:end="253:40">-&gt;</operator><name pos:start="253:41" pos:end="253:46">config</name></name> <operator pos:start="253:48" pos:end="253:48">+</operator> <name pos:start="253:50" pos:end="253:62">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:64"><expr pos:start="255:13" pos:end="255:63"><name pos:start="255:13" pos:end="255:15">did</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="255:63"><name pos:start="255:19" pos:end="255:30">pci_get_word</name><argument_list pos:start="255:31" pos:end="255:63">(<argument pos:start="255:32" pos:end="255:62"><expr pos:start="255:32" pos:end="255:62"><name pos:start="255:32" pos:end="255:46"><name pos:start="255:32" pos:end="255:38">pci_dev</name><operator pos:start="255:39" pos:end="255:40">-&gt;</operator><name pos:start="255:41" pos:end="255:46">config</name></name> <operator pos:start="255:48" pos:end="255:48">+</operator> <name pos:start="255:50" pos:end="255:62">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="257:13" pos:end="269:13"><if pos:start="257:13" pos:end="269:13">if <condition pos:start="257:16" pos:end="257:60">(<expr pos:start="257:17" pos:end="257:59"><name pos:start="257:17" pos:end="257:19">vid</name> <operator pos:start="257:21" pos:end="257:22">==</operator> <name pos:start="257:24" pos:end="257:42">PCI_VENDOR_ID_INTEL</name> <operator pos:start="257:44" pos:end="257:45">&amp;&amp;</operator> <name pos:start="257:47" pos:end="257:49">did</name> <operator pos:start="257:51" pos:end="257:52">==</operator> <literal type="number" pos:start="257:54" pos:end="257:59">0x10ed</literal></expr>)</condition> <block pos:start="257:62" pos:end="269:13">{<block_content pos:start="267:17" pos:end="267:28">

                <comment type="block" pos:start="259:17" pos:end="265:19">/*

                 * quirk for Intel 82599 VF with invalid PCIe capability

                 * version, should really be version 2 (same as PF)

                 */</comment>

                <expr_stmt pos:start="267:17" pos:end="267:28"><expr pos:start="267:17" pos:end="267:27"><name pos:start="267:17" pos:end="267:20">size</name> <operator pos:start="267:22" pos:end="267:22">=</operator> <literal type="number" pos:start="267:24" pos:end="267:27">0x3c</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="275:9" pos:end="283:9"><if pos:start="275:9" pos:end="283:9">if <condition pos:start="275:12" pos:end="275:22">(<expr pos:start="275:13" pos:end="275:21"><name pos:start="275:13" pos:end="275:16">size</name> <operator pos:start="275:18" pos:end="275:19">==</operator> <literal type="number" pos:start="275:21" pos:end="275:21">0</literal></expr>)</condition> <block pos:start="275:24" pos:end="283:9">{<block_content pos:start="277:13" pos:end="281:27">

            <expr_stmt pos:start="277:13" pos:end="279:44"><expr pos:start="277:13" pos:end="279:43"><call pos:start="277:13" pos:end="279:43"><name pos:start="277:13" pos:end="277:24">error_report</name><argument_list pos:start="277:25" pos:end="279:43">(<argument pos:start="277:26" pos:end="277:76"><expr pos:start="277:26" pos:end="277:76"><literal type="string" pos:start="277:26" pos:end="277:76">"%s: Unsupported PCI express capability version %d"</literal></expr></argument>,

                         <argument pos:start="279:26" pos:end="279:33"><expr pos:start="279:26" pos:end="279:33"><name pos:start="279:26" pos:end="279:33">__func__</name></expr></argument>, <argument pos:start="279:36" pos:end="279:42"><expr pos:start="279:36" pos:end="279:42"><name pos:start="279:36" pos:end="279:42">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="281:13" pos:end="281:27">return <expr pos:start="281:20" pos:end="281:26"><operator pos:start="281:20" pos:end="281:20">-</operator><name pos:start="281:21" pos:end="281:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="287:9" pos:end="287:69"><expr pos:start="287:9" pos:end="287:68"><name pos:start="287:9" pos:end="287:11">ret</name> <operator pos:start="287:13" pos:end="287:13">=</operator> <call pos:start="287:15" pos:end="287:68"><name pos:start="287:15" pos:end="287:32">pci_add_capability</name><argument_list pos:start="287:33" pos:end="287:68">(<argument pos:start="287:34" pos:end="287:40"><expr pos:start="287:34" pos:end="287:40"><name pos:start="287:34" pos:end="287:40">pci_dev</name></expr></argument>, <argument pos:start="287:43" pos:end="287:56"><expr pos:start="287:43" pos:end="287:56"><name pos:start="287:43" pos:end="287:56">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="287:59" pos:end="287:61"><expr pos:start="287:59" pos:end="287:61"><name pos:start="287:59" pos:end="287:61">pos</name></expr></argument>, <argument pos:start="287:64" pos:end="287:67"><expr pos:start="287:64" pos:end="287:67"><name pos:start="287:64" pos:end="287:67">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="289:9" pos:end="293:9"><if pos:start="289:9" pos:end="293:9">if <condition pos:start="289:12" pos:end="289:20">(<expr pos:start="289:13" pos:end="289:19"><name pos:start="289:13" pos:end="289:15">ret</name> <operator pos:start="289:17" pos:end="289:17">&lt;</operator> <literal type="number" pos:start="289:19" pos:end="289:19">0</literal></expr>)</condition> <block pos:start="289:22" pos:end="293:9">{<block_content pos:start="291:13" pos:end="291:23">

            <return pos:start="291:13" pos:end="291:23">return <expr pos:start="291:20" pos:end="291:22"><name pos:start="291:20" pos:end="291:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="297:9" pos:end="297:52"><expr pos:start="297:9" pos:end="297:51"><call pos:start="297:9" pos:end="297:51"><name pos:start="297:9" pos:end="297:35">assigned_dev_setup_cap_read</name><argument_list pos:start="297:36" pos:end="297:51">(<argument pos:start="297:37" pos:end="297:39"><expr pos:start="297:37" pos:end="297:39"><name pos:start="297:37" pos:end="297:39">dev</name></expr></argument>, <argument pos:start="297:42" pos:end="297:44"><expr pos:start="297:42" pos:end="297:44"><name pos:start="297:42" pos:end="297:44">pos</name></expr></argument>, <argument pos:start="297:47" pos:end="297:50"><expr pos:start="297:47" pos:end="297:50"><name pos:start="297:47" pos:end="297:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="301:9" pos:end="301:67"><expr pos:start="301:9" pos:end="301:66"><name pos:start="301:9" pos:end="301:12">type</name> <operator pos:start="301:14" pos:end="301:14">=</operator> <call pos:start="301:16" pos:end="301:66"><name pos:start="301:16" pos:end="301:27">pci_get_word</name><argument_list pos:start="301:28" pos:end="301:66">(<argument pos:start="301:29" pos:end="301:65"><expr pos:start="301:29" pos:end="301:65"><name pos:start="301:29" pos:end="301:43"><name pos:start="301:29" pos:end="301:35">pci_dev</name><operator pos:start="301:36" pos:end="301:37">-&gt;</operator><name pos:start="301:38" pos:end="301:43">config</name></name> <operator pos:start="301:45" pos:end="301:45">+</operator> <name pos:start="301:47" pos:end="301:49">pos</name> <operator pos:start="301:51" pos:end="301:51">+</operator> <name pos:start="301:53" pos:end="301:65">PCI_EXP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:48"><expr pos:start="303:9" pos:end="303:47"><name pos:start="303:9" pos:end="303:12">type</name> <operator pos:start="303:14" pos:end="303:14">=</operator> <operator pos:start="303:16" pos:end="303:16">(</operator><name pos:start="303:17" pos:end="303:20">type</name> <operator pos:start="303:22" pos:end="303:22">&amp;</operator> <name pos:start="303:24" pos:end="303:41">PCI_EXP_FLAGS_TYPE</name><operator pos:start="303:42" pos:end="303:42">)</operator> <operator pos:start="303:44" pos:end="303:45">&gt;&gt;</operator> <literal type="number" pos:start="303:47" pos:end="303:47">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="305:9" pos:end="315:9"><if pos:start="305:9" pos:end="315:9">if <condition pos:start="305:12" pos:end="307:72">(<expr pos:start="305:13" pos:end="307:71"><name pos:start="305:13" pos:end="305:16">type</name> <operator pos:start="305:18" pos:end="305:19">!=</operator> <name pos:start="305:21" pos:end="305:41">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="305:43" pos:end="305:44">&amp;&amp;</operator>

            <name pos:start="307:13" pos:end="307:16">type</name> <operator pos:start="307:18" pos:end="307:19">!=</operator> <name pos:start="307:21" pos:end="307:40">PCI_EXP_TYPE_LEG_END</name> <operator pos:start="307:42" pos:end="307:43">&amp;&amp;</operator> <name pos:start="307:45" pos:end="307:48">type</name> <operator pos:start="307:50" pos:end="307:51">!=</operator> <name pos:start="307:53" pos:end="307:71">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="307:74" pos:end="315:9">{<block_content pos:start="309:13" pos:end="313:27">

            <expr_stmt pos:start="309:13" pos:end="311:50"><expr pos:start="309:13" pos:end="311:49"><call pos:start="309:13" pos:end="311:49"><name pos:start="309:13" pos:end="309:24">error_report</name><argument_list pos:start="309:25" pos:end="311:49">(<argument pos:start="309:26" pos:end="311:42"><expr pos:start="309:26" pos:end="311:42"><literal type="string" pos:start="309:26" pos:end="309:79">"Device assignment only supports endpoint assignment,"</literal>

                         <literal type="string" pos:start="311:26" pos:end="311:42">" device type %d"</literal></expr></argument>, <argument pos:start="311:45" pos:end="311:48"><expr pos:start="311:45" pos:end="311:48"><name pos:start="311:45" pos:end="311:48">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="313:13" pos:end="313:27">return <expr pos:start="313:20" pos:end="313:26"><operator pos:start="313:20" pos:end="313:20">-</operator><name pos:start="313:21" pos:end="313:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="319:9" pos:end="321:75">/* capabilities, pass existing read-only copy

         * PCI_EXP_FLAGS_IRQ: updated by hardware, should be direct read */</comment>



        <comment type="block" pos:start="325:9" pos:end="325:43">/* device capabilities: hide FLR */</comment>

        <expr_stmt pos:start="327:9" pos:end="327:70"><expr pos:start="327:9" pos:end="327:69"><name pos:start="327:9" pos:end="327:14">devcap</name> <operator pos:start="327:16" pos:end="327:16">=</operator> <call pos:start="327:18" pos:end="327:69"><name pos:start="327:18" pos:end="327:29">pci_get_long</name><argument_list pos:start="327:30" pos:end="327:69">(<argument pos:start="327:31" pos:end="327:68"><expr pos:start="327:31" pos:end="327:68"><name pos:start="327:31" pos:end="327:45"><name pos:start="327:31" pos:end="327:37">pci_dev</name><operator pos:start="327:38" pos:end="327:39">-&gt;</operator><name pos:start="327:40" pos:end="327:45">config</name></name> <operator pos:start="327:47" pos:end="327:47">+</operator> <name pos:start="327:49" pos:end="327:51">pos</name> <operator pos:start="327:53" pos:end="327:53">+</operator> <name pos:start="327:55" pos:end="327:68">PCI_EXP_DEVCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:38"><expr pos:start="329:9" pos:end="329:37"><name pos:start="329:9" pos:end="329:14">devcap</name> <operator pos:start="329:16" pos:end="329:17">&amp;=</operator> <operator pos:start="329:19" pos:end="329:19">~</operator><name pos:start="329:20" pos:end="329:37">PCI_EXP_DEVCAP_FLR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:69"><expr pos:start="331:9" pos:end="331:68"><call pos:start="331:9" pos:end="331:68"><name pos:start="331:9" pos:end="331:20">pci_set_long</name><argument_list pos:start="331:21" pos:end="331:68">(<argument pos:start="331:22" pos:end="331:59"><expr pos:start="331:22" pos:end="331:59"><name pos:start="331:22" pos:end="331:36"><name pos:start="331:22" pos:end="331:28">pci_dev</name><operator pos:start="331:29" pos:end="331:30">-&gt;</operator><name pos:start="331:31" pos:end="331:36">config</name></name> <operator pos:start="331:38" pos:end="331:38">+</operator> <name pos:start="331:40" pos:end="331:42">pos</name> <operator pos:start="331:44" pos:end="331:44">+</operator> <name pos:start="331:46" pos:end="331:59">PCI_EXP_DEVCAP</name></expr></argument>, <argument pos:start="331:62" pos:end="331:67"><expr pos:start="331:62" pos:end="331:67"><name pos:start="331:62" pos:end="331:67">devcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="335:9" pos:end="341:11">/* device control: clear all error reporting enable bits, leaving

         *                 only a few host values.  Note, these are

         *                 all writable, but not passed to hw.

         */</comment>

        <expr_stmt pos:start="343:9" pos:end="343:70"><expr pos:start="343:9" pos:end="343:69"><name pos:start="343:9" pos:end="343:14">devctl</name> <operator pos:start="343:16" pos:end="343:16">=</operator> <call pos:start="343:18" pos:end="343:69"><name pos:start="343:18" pos:end="343:29">pci_get_word</name><argument_list pos:start="343:30" pos:end="343:69">(<argument pos:start="343:31" pos:end="343:68"><expr pos:start="343:31" pos:end="343:68"><name pos:start="343:31" pos:end="343:45"><name pos:start="343:31" pos:end="343:37">pci_dev</name><operator pos:start="343:38" pos:end="343:39">-&gt;</operator><name pos:start="343:40" pos:end="343:45">config</name></name> <operator pos:start="343:47" pos:end="343:47">+</operator> <name pos:start="343:49" pos:end="343:51">pos</name> <operator pos:start="343:53" pos:end="343:53">+</operator> <name pos:start="343:55" pos:end="343:68">PCI_EXP_DEVCTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="345:9" pos:end="347:70"><expr pos:start="345:9" pos:end="347:69"><name pos:start="345:9" pos:end="345:14">devctl</name> <operator pos:start="345:16" pos:end="345:16">=</operator> <operator pos:start="345:18" pos:end="345:18">(</operator><name pos:start="345:19" pos:end="345:24">devctl</name> <operator pos:start="345:26" pos:end="345:26">&amp;</operator> <operator pos:start="345:28" pos:end="345:28">(</operator><name pos:start="345:29" pos:end="345:49">PCI_EXP_DEVCTL_READRQ</name> <operator pos:start="345:51" pos:end="345:51">|</operator> <name pos:start="345:53" pos:end="345:74">PCI_EXP_DEVCTL_PAYLOAD</name><operator pos:start="345:75" pos:end="345:75">)</operator><operator pos:start="345:76" pos:end="345:76">)</operator> <operator pos:start="345:78" pos:end="345:78">|</operator>

                  <name pos:start="347:19" pos:end="347:41">PCI_EXP_DEVCTL_RELAX_EN</name> <operator pos:start="347:43" pos:end="347:43">|</operator> <name pos:start="347:45" pos:end="347:69">PCI_EXP_DEVCTL_NOSNOOP_EN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="349:9" pos:end="349:69"><expr pos:start="349:9" pos:end="349:68"><call pos:start="349:9" pos:end="349:68"><name pos:start="349:9" pos:end="349:20">pci_set_word</name><argument_list pos:start="349:21" pos:end="349:68">(<argument pos:start="349:22" pos:end="349:59"><expr pos:start="349:22" pos:end="349:59"><name pos:start="349:22" pos:end="349:36"><name pos:start="349:22" pos:end="349:28">pci_dev</name><operator pos:start="349:29" pos:end="349:30">-&gt;</operator><name pos:start="349:31" pos:end="349:36">config</name></name> <operator pos:start="349:38" pos:end="349:38">+</operator> <name pos:start="349:40" pos:end="349:42">pos</name> <operator pos:start="349:44" pos:end="349:44">+</operator> <name pos:start="349:46" pos:end="349:59">PCI_EXP_DEVCTL</name></expr></argument>, <argument pos:start="349:62" pos:end="349:67"><expr pos:start="349:62" pos:end="349:67"><name pos:start="349:62" pos:end="349:67">devctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="351:9" pos:end="351:65"><expr pos:start="351:9" pos:end="351:64"><name pos:start="351:9" pos:end="351:14">devctl</name> <operator pos:start="351:16" pos:end="351:16">=</operator> <name pos:start="351:18" pos:end="351:39">PCI_EXP_DEVCTL_BCR_FLR</name> <operator pos:start="351:41" pos:end="351:41">|</operator> <name pos:start="351:43" pos:end="351:64">PCI_EXP_DEVCTL_AUX_PME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="353:9" pos:end="353:69"><expr pos:start="353:9" pos:end="353:68"><call pos:start="353:9" pos:end="353:68"><name pos:start="353:9" pos:end="353:20">pci_set_word</name><argument_list pos:start="353:21" pos:end="353:68">(<argument pos:start="353:22" pos:end="353:58"><expr pos:start="353:22" pos:end="353:58"><name pos:start="353:22" pos:end="353:35"><name pos:start="353:22" pos:end="353:28">pci_dev</name><operator pos:start="353:29" pos:end="353:30">-&gt;</operator><name pos:start="353:31" pos:end="353:35">wmask</name></name> <operator pos:start="353:37" pos:end="353:37">+</operator> <name pos:start="353:39" pos:end="353:41">pos</name> <operator pos:start="353:43" pos:end="353:43">+</operator> <name pos:start="353:45" pos:end="353:58">PCI_EXP_DEVCTL</name></expr></argument>, <argument pos:start="353:61" pos:end="353:67"><expr pos:start="353:61" pos:end="353:67"><operator pos:start="353:61" pos:end="353:61">~</operator><name pos:start="353:62" pos:end="353:67">devctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="357:9" pos:end="357:33">/* Clear device status */</comment>

        <expr_stmt pos:start="359:9" pos:end="359:64"><expr pos:start="359:9" pos:end="359:63"><call pos:start="359:9" pos:end="359:63"><name pos:start="359:9" pos:end="359:20">pci_set_word</name><argument_list pos:start="359:21" pos:end="359:63">(<argument pos:start="359:22" pos:end="359:59"><expr pos:start="359:22" pos:end="359:59"><name pos:start="359:22" pos:end="359:36"><name pos:start="359:22" pos:end="359:28">pci_dev</name><operator pos:start="359:29" pos:end="359:30">-&gt;</operator><name pos:start="359:31" pos:end="359:36">config</name></name> <operator pos:start="359:38" pos:end="359:38">+</operator> <name pos:start="359:40" pos:end="359:42">pos</name> <operator pos:start="359:44" pos:end="359:44">+</operator> <name pos:start="359:46" pos:end="359:59">PCI_EXP_DEVSTA</name></expr></argument>, <argument pos:start="359:62" pos:end="359:62"><expr pos:start="359:62" pos:end="359:62"><literal type="number" pos:start="359:62" pos:end="359:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="363:9" pos:end="363:76">/* Link capabilities, expose links and latencues, clear reporting */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:70"><expr pos:start="365:9" pos:end="365:69"><name pos:start="365:9" pos:end="365:14">lnkcap</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <call pos:start="365:18" pos:end="365:69"><name pos:start="365:18" pos:end="365:29">pci_get_long</name><argument_list pos:start="365:30" pos:end="365:69">(<argument pos:start="365:31" pos:end="365:68"><expr pos:start="365:31" pos:end="365:68"><name pos:start="365:31" pos:end="365:45"><name pos:start="365:31" pos:end="365:37">pci_dev</name><operator pos:start="365:38" pos:end="365:39">-&gt;</operator><name pos:start="365:40" pos:end="365:45">config</name></name> <operator pos:start="365:47" pos:end="365:47">+</operator> <name pos:start="365:49" pos:end="365:51">pos</name> <operator pos:start="365:53" pos:end="365:53">+</operator> <name pos:start="365:55" pos:end="365:68">PCI_EXP_LNKCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="371:40"><expr pos:start="367:9" pos:end="371:39"><name pos:start="367:9" pos:end="367:14">lnkcap</name> <operator pos:start="367:16" pos:end="367:17">&amp;=</operator> <operator pos:start="367:19" pos:end="367:19">(</operator><name pos:start="367:20" pos:end="367:37">PCI_EXP_LNKCAP_SLS</name> <operator pos:start="367:39" pos:end="367:39">|</operator> <name pos:start="367:41" pos:end="367:58">PCI_EXP_LNKCAP_MLW</name> <operator pos:start="367:60" pos:end="367:60">|</operator>

                   <name pos:start="369:20" pos:end="369:39">PCI_EXP_LNKCAP_ASPMS</name> <operator pos:start="369:41" pos:end="369:41">|</operator> <name pos:start="369:43" pos:end="369:62">PCI_EXP_LNKCAP_L0SEL</name> <operator pos:start="369:64" pos:end="369:64">|</operator>

                   <name pos:start="371:20" pos:end="371:38">PCI_EXP_LNKCAP_L1EL</name><operator pos:start="371:39" pos:end="371:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:69"><expr pos:start="373:9" pos:end="373:68"><call pos:start="373:9" pos:end="373:68"><name pos:start="373:9" pos:end="373:20">pci_set_long</name><argument_list pos:start="373:21" pos:end="373:68">(<argument pos:start="373:22" pos:end="373:59"><expr pos:start="373:22" pos:end="373:59"><name pos:start="373:22" pos:end="373:36"><name pos:start="373:22" pos:end="373:28">pci_dev</name><operator pos:start="373:29" pos:end="373:30">-&gt;</operator><name pos:start="373:31" pos:end="373:36">config</name></name> <operator pos:start="373:38" pos:end="373:38">+</operator> <name pos:start="373:40" pos:end="373:42">pos</name> <operator pos:start="373:44" pos:end="373:44">+</operator> <name pos:start="373:46" pos:end="373:59">PCI_EXP_LNKCAP</name></expr></argument>, <argument pos:start="373:62" pos:end="373:67"><expr pos:start="373:62" pos:end="373:67"><name pos:start="373:62" pos:end="373:67">lnkcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="377:9" pos:end="377:78">/* Link control, pass existing read-only copy.  Should be writable? */</comment>



        <comment type="block" pos:start="381:9" pos:end="381:62">/* Link status, only expose current speed and width */</comment>

        <expr_stmt pos:start="383:9" pos:end="383:70"><expr pos:start="383:9" pos:end="383:69"><name pos:start="383:9" pos:end="383:14">lnksta</name> <operator pos:start="383:16" pos:end="383:16">=</operator> <call pos:start="383:18" pos:end="383:69"><name pos:start="383:18" pos:end="383:29">pci_get_word</name><argument_list pos:start="383:30" pos:end="383:69">(<argument pos:start="383:31" pos:end="383:68"><expr pos:start="383:31" pos:end="383:68"><name pos:start="383:31" pos:end="383:45"><name pos:start="383:31" pos:end="383:37">pci_dev</name><operator pos:start="383:38" pos:end="383:39">-&gt;</operator><name pos:start="383:40" pos:end="383:45">config</name></name> <operator pos:start="383:47" pos:end="383:47">+</operator> <name pos:start="383:49" pos:end="383:51">pos</name> <operator pos:start="383:53" pos:end="383:53">+</operator> <name pos:start="383:55" pos:end="383:68">PCI_EXP_LNKSTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="385:9" pos:end="385:60"><expr pos:start="385:9" pos:end="385:59"><name pos:start="385:9" pos:end="385:14">lnksta</name> <operator pos:start="385:16" pos:end="385:17">&amp;=</operator> <operator pos:start="385:19" pos:end="385:19">(</operator><name pos:start="385:20" pos:end="385:37">PCI_EXP_LNKSTA_CLS</name> <operator pos:start="385:39" pos:end="385:39">|</operator> <name pos:start="385:41" pos:end="385:58">PCI_EXP_LNKSTA_NLW</name><operator pos:start="385:59" pos:end="385:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="387:9" pos:end="387:69"><expr pos:start="387:9" pos:end="387:68"><call pos:start="387:9" pos:end="387:68"><name pos:start="387:9" pos:end="387:20">pci_set_word</name><argument_list pos:start="387:21" pos:end="387:68">(<argument pos:start="387:22" pos:end="387:59"><expr pos:start="387:22" pos:end="387:59"><name pos:start="387:22" pos:end="387:36"><name pos:start="387:22" pos:end="387:28">pci_dev</name><operator pos:start="387:29" pos:end="387:30">-&gt;</operator><name pos:start="387:31" pos:end="387:36">config</name></name> <operator pos:start="387:38" pos:end="387:38">+</operator> <name pos:start="387:40" pos:end="387:42">pos</name> <operator pos:start="387:44" pos:end="387:44">+</operator> <name pos:start="387:46" pos:end="387:59">PCI_EXP_LNKSTA</name></expr></argument>, <argument pos:start="387:62" pos:end="387:67"><expr pos:start="387:62" pos:end="387:67"><name pos:start="387:62" pos:end="387:67">lnksta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="391:9" pos:end="417:9"><if pos:start="391:9" pos:end="417:9">if <condition pos:start="391:12" pos:end="391:25">(<expr pos:start="391:13" pos:end="391:24"><name pos:start="391:13" pos:end="391:19">version</name> <operator pos:start="391:21" pos:end="391:22">&gt;=</operator> <literal type="number" pos:start="391:24" pos:end="391:24">2</literal></expr>)</condition> <block pos:start="391:27" pos:end="417:9">{<block_content pos:start="395:13" pos:end="409:67">

            <comment type="block" pos:start="393:13" pos:end="393:79">/* Slot capabilities, control, status - not needed for endpoints */</comment>

            <expr_stmt pos:start="395:13" pos:end="395:68"><expr pos:start="395:13" pos:end="395:67"><call pos:start="395:13" pos:end="395:67"><name pos:start="395:13" pos:end="395:24">pci_set_long</name><argument_list pos:start="395:25" pos:end="395:67">(<argument pos:start="395:26" pos:end="395:63"><expr pos:start="395:26" pos:end="395:63"><name pos:start="395:26" pos:end="395:40"><name pos:start="395:26" pos:end="395:32">pci_dev</name><operator pos:start="395:33" pos:end="395:34">-&gt;</operator><name pos:start="395:35" pos:end="395:40">config</name></name> <operator pos:start="395:42" pos:end="395:42">+</operator> <name pos:start="395:44" pos:end="395:46">pos</name> <operator pos:start="395:48" pos:end="395:48">+</operator> <name pos:start="395:50" pos:end="395:63">PCI_EXP_SLTCAP</name></expr></argument>, <argument pos:start="395:66" pos:end="395:66"><expr pos:start="395:66" pos:end="395:66"><literal type="number" pos:start="395:66" pos:end="395:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="397:13" pos:end="397:68"><expr pos:start="397:13" pos:end="397:67"><call pos:start="397:13" pos:end="397:67"><name pos:start="397:13" pos:end="397:24">pci_set_word</name><argument_list pos:start="397:25" pos:end="397:67">(<argument pos:start="397:26" pos:end="397:63"><expr pos:start="397:26" pos:end="397:63"><name pos:start="397:26" pos:end="397:40"><name pos:start="397:26" pos:end="397:32">pci_dev</name><operator pos:start="397:33" pos:end="397:34">-&gt;</operator><name pos:start="397:35" pos:end="397:40">config</name></name> <operator pos:start="397:42" pos:end="397:42">+</operator> <name pos:start="397:44" pos:end="397:46">pos</name> <operator pos:start="397:48" pos:end="397:48">+</operator> <name pos:start="397:50" pos:end="397:63">PCI_EXP_SLTCTL</name></expr></argument>, <argument pos:start="397:66" pos:end="397:66"><expr pos:start="397:66" pos:end="397:66"><literal type="number" pos:start="397:66" pos:end="397:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="399:13" pos:end="399:68"><expr pos:start="399:13" pos:end="399:67"><call pos:start="399:13" pos:end="399:67"><name pos:start="399:13" pos:end="399:24">pci_set_word</name><argument_list pos:start="399:25" pos:end="399:67">(<argument pos:start="399:26" pos:end="399:63"><expr pos:start="399:26" pos:end="399:63"><name pos:start="399:26" pos:end="399:40"><name pos:start="399:26" pos:end="399:32">pci_dev</name><operator pos:start="399:33" pos:end="399:34">-&gt;</operator><name pos:start="399:35" pos:end="399:40">config</name></name> <operator pos:start="399:42" pos:end="399:42">+</operator> <name pos:start="399:44" pos:end="399:46">pos</name> <operator pos:start="399:48" pos:end="399:48">+</operator> <name pos:start="399:50" pos:end="399:63">PCI_EXP_SLTSTA</name></expr></argument>, <argument pos:start="399:66" pos:end="399:66"><expr pos:start="399:66" pos:end="399:66"><literal type="number" pos:start="399:66" pos:end="399:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="403:13" pos:end="403:79">/* Root control, capabilities, status - not needed for endpoints */</comment>

            <expr_stmt pos:start="405:13" pos:end="405:67"><expr pos:start="405:13" pos:end="405:66"><call pos:start="405:13" pos:end="405:66"><name pos:start="405:13" pos:end="405:24">pci_set_word</name><argument_list pos:start="405:25" pos:end="405:66">(<argument pos:start="405:26" pos:end="405:62"><expr pos:start="405:26" pos:end="405:62"><name pos:start="405:26" pos:end="405:40"><name pos:start="405:26" pos:end="405:32">pci_dev</name><operator pos:start="405:33" pos:end="405:34">-&gt;</operator><name pos:start="405:35" pos:end="405:40">config</name></name> <operator pos:start="405:42" pos:end="405:42">+</operator> <name pos:start="405:44" pos:end="405:46">pos</name> <operator pos:start="405:48" pos:end="405:48">+</operator> <name pos:start="405:50" pos:end="405:62">PCI_EXP_RTCTL</name></expr></argument>, <argument pos:start="405:65" pos:end="405:65"><expr pos:start="405:65" pos:end="405:65"><literal type="number" pos:start="405:65" pos:end="405:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="407:13" pos:end="407:67"><expr pos:start="407:13" pos:end="407:66"><call pos:start="407:13" pos:end="407:66"><name pos:start="407:13" pos:end="407:24">pci_set_word</name><argument_list pos:start="407:25" pos:end="407:66">(<argument pos:start="407:26" pos:end="407:62"><expr pos:start="407:26" pos:end="407:62"><name pos:start="407:26" pos:end="407:40"><name pos:start="407:26" pos:end="407:32">pci_dev</name><operator pos:start="407:33" pos:end="407:34">-&gt;</operator><name pos:start="407:35" pos:end="407:40">config</name></name> <operator pos:start="407:42" pos:end="407:42">+</operator> <name pos:start="407:44" pos:end="407:46">pos</name> <operator pos:start="407:48" pos:end="407:48">+</operator> <name pos:start="407:50" pos:end="407:62">PCI_EXP_RTCAP</name></expr></argument>, <argument pos:start="407:65" pos:end="407:65"><expr pos:start="407:65" pos:end="407:65"><literal type="number" pos:start="407:65" pos:end="407:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:67"><expr pos:start="409:13" pos:end="409:66"><call pos:start="409:13" pos:end="409:66"><name pos:start="409:13" pos:end="409:24">pci_set_long</name><argument_list pos:start="409:25" pos:end="409:66">(<argument pos:start="409:26" pos:end="409:62"><expr pos:start="409:26" pos:end="409:62"><name pos:start="409:26" pos:end="409:40"><name pos:start="409:26" pos:end="409:32">pci_dev</name><operator pos:start="409:33" pos:end="409:34">-&gt;</operator><name pos:start="409:35" pos:end="409:40">config</name></name> <operator pos:start="409:42" pos:end="409:42">+</operator> <name pos:start="409:44" pos:end="409:46">pos</name> <operator pos:start="409:48" pos:end="409:48">+</operator> <name pos:start="409:50" pos:end="409:62">PCI_EXP_RTSTA</name></expr></argument>, <argument pos:start="409:65" pos:end="409:65"><expr pos:start="409:65" pos:end="409:65"><literal type="number" pos:start="409:65" pos:end="409:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="413:13" pos:end="413:77">/* Device capabilities/control 2, pass existing read-only copy */</comment>

            <comment type="block" pos:start="415:13" pos:end="415:62">/* Link control 2, pass existing read-only copy */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="423:5" pos:end="423:59"><expr pos:start="423:5" pos:end="423:58"><name pos:start="423:5" pos:end="423:7">pos</name> <operator pos:start="423:9" pos:end="423:9">=</operator> <call pos:start="423:11" pos:end="423:58"><name pos:start="423:11" pos:end="423:29">pci_find_cap_offset</name><argument_list pos:start="423:30" pos:end="423:58">(<argument pos:start="423:31" pos:end="423:37"><expr pos:start="423:31" pos:end="423:37"><name pos:start="423:31" pos:end="423:37">pci_dev</name></expr></argument>, <argument pos:start="423:40" pos:end="423:54"><expr pos:start="423:40" pos:end="423:54"><name pos:start="423:40" pos:end="423:54">PCI_CAP_ID_PCIX</name></expr></argument>, <argument pos:start="423:57" pos:end="423:57"><expr pos:start="423:57" pos:end="423:57"><literal type="number" pos:start="423:57" pos:end="423:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="425:5" pos:end="477:5"><if pos:start="425:5" pos:end="477:5">if <condition pos:start="425:8" pos:end="425:12">(<expr pos:start="425:9" pos:end="425:11"><name pos:start="425:9" pos:end="425:11">pos</name></expr>)</condition> <block pos:start="425:14" pos:end="477:5">{<block_content pos:start="427:9" pos:end="475:67">

        <decl_stmt pos:start="427:9" pos:end="427:21"><decl pos:start="427:9" pos:end="427:20"><type pos:start="427:9" pos:end="427:16"><name pos:start="427:9" pos:end="427:16">uint16_t</name></type> <name pos:start="427:18" pos:end="427:20">cmd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="429:9" pos:end="429:24"><decl pos:start="429:9" pos:end="429:23"><type pos:start="429:9" pos:end="429:16"><name pos:start="429:9" pos:end="429:16">uint32_t</name></type> <name pos:start="429:18" pos:end="429:23">status</name></decl>;</decl_stmt>



        <comment type="block" pos:start="433:9" pos:end="433:56">/* Only expose the minimum, 8 byte capability */</comment>

        <expr_stmt pos:start="435:9" pos:end="435:67"><expr pos:start="435:9" pos:end="435:66"><name pos:start="435:9" pos:end="435:11">ret</name> <operator pos:start="435:13" pos:end="435:13">=</operator> <call pos:start="435:15" pos:end="435:66"><name pos:start="435:15" pos:end="435:32">pci_add_capability</name><argument_list pos:start="435:33" pos:end="435:66">(<argument pos:start="435:34" pos:end="435:40"><expr pos:start="435:34" pos:end="435:40"><name pos:start="435:34" pos:end="435:40">pci_dev</name></expr></argument>, <argument pos:start="435:43" pos:end="435:57"><expr pos:start="435:43" pos:end="435:57"><name pos:start="435:43" pos:end="435:57">PCI_CAP_ID_PCIX</name></expr></argument>, <argument pos:start="435:60" pos:end="435:62"><expr pos:start="435:60" pos:end="435:62"><name pos:start="435:60" pos:end="435:62">pos</name></expr></argument>, <argument pos:start="435:65" pos:end="435:65"><expr pos:start="435:65" pos:end="435:65"><literal type="number" pos:start="435:65" pos:end="435:65">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="437:9" pos:end="441:9"><if pos:start="437:9" pos:end="441:9">if <condition pos:start="437:12" pos:end="437:20">(<expr pos:start="437:13" pos:end="437:19"><name pos:start="437:13" pos:end="437:15">ret</name> <operator pos:start="437:17" pos:end="437:17">&lt;</operator> <literal type="number" pos:start="437:19" pos:end="437:19">0</literal></expr>)</condition> <block pos:start="437:22" pos:end="441:9">{<block_content pos:start="439:13" pos:end="439:23">

            <return pos:start="439:13" pos:end="439:23">return <expr pos:start="439:20" pos:end="439:22"><name pos:start="439:20" pos:end="439:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="445:9" pos:end="445:49"><expr pos:start="445:9" pos:end="445:48"><call pos:start="445:9" pos:end="445:48"><name pos:start="445:9" pos:end="445:35">assigned_dev_setup_cap_read</name><argument_list pos:start="445:36" pos:end="445:48">(<argument pos:start="445:37" pos:end="445:39"><expr pos:start="445:37" pos:end="445:39"><name pos:start="445:37" pos:end="445:39">dev</name></expr></argument>, <argument pos:start="445:42" pos:end="445:44"><expr pos:start="445:42" pos:end="445:44"><name pos:start="445:42" pos:end="445:44">pos</name></expr></argument>, <argument pos:start="445:47" pos:end="445:47"><expr pos:start="445:47" pos:end="445:47"><literal type="number" pos:start="445:47" pos:end="445:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="449:9" pos:end="449:74">/* Command register, clear upper bits, including extended modes */</comment>

        <expr_stmt pos:start="451:9" pos:end="451:62"><expr pos:start="451:9" pos:end="451:61"><name pos:start="451:9" pos:end="451:11">cmd</name> <operator pos:start="451:13" pos:end="451:13">=</operator> <call pos:start="451:15" pos:end="451:61"><name pos:start="451:15" pos:end="451:26">pci_get_word</name><argument_list pos:start="451:27" pos:end="451:61">(<argument pos:start="451:28" pos:end="451:60"><expr pos:start="451:28" pos:end="451:60"><name pos:start="451:28" pos:end="451:42"><name pos:start="451:28" pos:end="451:34">pci_dev</name><operator pos:start="451:35" pos:end="451:36">-&gt;</operator><name pos:start="451:37" pos:end="451:42">config</name></name> <operator pos:start="451:44" pos:end="451:44">+</operator> <name pos:start="451:46" pos:end="451:48">pos</name> <operator pos:start="451:50" pos:end="451:50">+</operator> <name pos:start="451:52" pos:end="451:60">PCI_X_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="453:9" pos:end="455:37"><expr pos:start="453:9" pos:end="455:36"><name pos:start="453:9" pos:end="453:11">cmd</name> <operator pos:start="453:13" pos:end="453:14">&amp;=</operator> <operator pos:start="453:16" pos:end="453:16">(</operator><name pos:start="453:17" pos:end="453:33">PCI_X_CMD_DPERR_E</name> <operator pos:start="453:35" pos:end="453:35">|</operator> <name pos:start="453:37" pos:end="453:49">PCI_X_CMD_ERO</name> <operator pos:start="453:51" pos:end="453:51">|</operator> <name pos:start="453:53" pos:end="453:70">PCI_X_CMD_MAX_READ</name> <operator pos:start="453:72" pos:end="453:72">|</operator>

                <name pos:start="455:17" pos:end="455:35">PCI_X_CMD_MAX_SPLIT</name><operator pos:start="455:36" pos:end="455:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="457:9" pos:end="457:61"><expr pos:start="457:9" pos:end="457:60"><call pos:start="457:9" pos:end="457:60"><name pos:start="457:9" pos:end="457:20">pci_set_word</name><argument_list pos:start="457:21" pos:end="457:60">(<argument pos:start="457:22" pos:end="457:54"><expr pos:start="457:22" pos:end="457:54"><name pos:start="457:22" pos:end="457:36"><name pos:start="457:22" pos:end="457:28">pci_dev</name><operator pos:start="457:29" pos:end="457:30">-&gt;</operator><name pos:start="457:31" pos:end="457:36">config</name></name> <operator pos:start="457:38" pos:end="457:38">+</operator> <name pos:start="457:40" pos:end="457:42">pos</name> <operator pos:start="457:44" pos:end="457:44">+</operator> <name pos:start="457:46" pos:end="457:54">PCI_X_CMD</name></expr></argument>, <argument pos:start="457:57" pos:end="457:59"><expr pos:start="457:57" pos:end="457:59"><name pos:start="457:57" pos:end="457:59">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="461:9" pos:end="463:41">/* Status register, update with emulated PCI bus location, clear

         * error bits, leave the rest. */</comment>

        <expr_stmt pos:start="465:9" pos:end="465:68"><expr pos:start="465:9" pos:end="465:67"><name pos:start="465:9" pos:end="465:14">status</name> <operator pos:start="465:16" pos:end="465:16">=</operator> <call pos:start="465:18" pos:end="465:67"><name pos:start="465:18" pos:end="465:29">pci_get_long</name><argument_list pos:start="465:30" pos:end="465:67">(<argument pos:start="465:31" pos:end="465:66"><expr pos:start="465:31" pos:end="465:66"><name pos:start="465:31" pos:end="465:45"><name pos:start="465:31" pos:end="465:37">pci_dev</name><operator pos:start="465:38" pos:end="465:39">-&gt;</operator><name pos:start="465:40" pos:end="465:45">config</name></name> <operator pos:start="465:47" pos:end="465:47">+</operator> <name pos:start="465:49" pos:end="465:51">pos</name> <operator pos:start="465:53" pos:end="465:53">+</operator> <name pos:start="465:55" pos:end="465:66">PCI_X_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:59"><expr pos:start="467:9" pos:end="467:58"><name pos:start="467:9" pos:end="467:14">status</name> <operator pos:start="467:16" pos:end="467:17">&amp;=</operator> <operator pos:start="467:19" pos:end="467:19">~</operator><operator pos:start="467:20" pos:end="467:20">(</operator><name pos:start="467:21" pos:end="467:36">PCI_X_STATUS_BUS</name> <operator pos:start="467:38" pos:end="467:38">|</operator> <name pos:start="467:40" pos:end="467:57">PCI_X_STATUS_DEVFN</name><operator pos:start="467:58" pos:end="467:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="469:9" pos:end="469:68"><expr pos:start="469:9" pos:end="469:67"><name pos:start="469:9" pos:end="469:14">status</name> <operator pos:start="469:16" pos:end="469:17">|=</operator> <operator pos:start="469:19" pos:end="469:19">(</operator><call pos:start="469:20" pos:end="469:44"><name pos:start="469:20" pos:end="469:30">pci_bus_num</name><argument_list pos:start="469:31" pos:end="469:44">(<argument pos:start="469:32" pos:end="469:43"><expr pos:start="469:32" pos:end="469:43"><name pos:start="469:32" pos:end="469:43"><name pos:start="469:32" pos:end="469:38">pci_dev</name><operator pos:start="469:39" pos:end="469:40">-&gt;</operator><name pos:start="469:41" pos:end="469:43">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="469:46" pos:end="469:47">&lt;&lt;</operator> <literal type="number" pos:start="469:49" pos:end="469:49">8</literal><operator pos:start="469:50" pos:end="469:50">)</operator> <operator pos:start="469:52" pos:end="469:52">|</operator> <name pos:start="469:54" pos:end="469:67"><name pos:start="469:54" pos:end="469:60">pci_dev</name><operator pos:start="469:61" pos:end="469:62">-&gt;</operator><name pos:start="469:63" pos:end="469:67">devfn</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="471:9" pos:end="473:42"><expr pos:start="471:9" pos:end="473:41"><name pos:start="471:9" pos:end="471:14">status</name> <operator pos:start="471:16" pos:end="471:17">&amp;=</operator> <operator pos:start="471:19" pos:end="471:19">~</operator><operator pos:start="471:20" pos:end="471:20">(</operator><name pos:start="471:21" pos:end="471:41">PCI_X_STATUS_SPL_DISC</name> <operator pos:start="471:43" pos:end="471:43">|</operator> <name pos:start="471:45" pos:end="471:64">PCI_X_STATUS_UNX_SPL</name> <operator pos:start="471:66" pos:end="471:66">|</operator>

                    <name pos:start="473:21" pos:end="473:40">PCI_X_STATUS_SPL_ERR</name><operator pos:start="473:41" pos:end="473:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="475:9" pos:end="475:67"><expr pos:start="475:9" pos:end="475:66"><call pos:start="475:9" pos:end="475:66"><name pos:start="475:9" pos:end="475:20">pci_set_long</name><argument_list pos:start="475:21" pos:end="475:66">(<argument pos:start="475:22" pos:end="475:57"><expr pos:start="475:22" pos:end="475:57"><name pos:start="475:22" pos:end="475:36"><name pos:start="475:22" pos:end="475:28">pci_dev</name><operator pos:start="475:29" pos:end="475:30">-&gt;</operator><name pos:start="475:31" pos:end="475:36">config</name></name> <operator pos:start="475:38" pos:end="475:38">+</operator> <name pos:start="475:40" pos:end="475:42">pos</name> <operator pos:start="475:44" pos:end="475:44">+</operator> <name pos:start="475:46" pos:end="475:57">PCI_X_STATUS</name></expr></argument>, <argument pos:start="475:60" pos:end="475:65"><expr pos:start="475:60" pos:end="475:65"><name pos:start="475:60" pos:end="475:65">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="481:5" pos:end="481:58"><expr pos:start="481:5" pos:end="481:57"><name pos:start="481:5" pos:end="481:7">pos</name> <operator pos:start="481:9" pos:end="481:9">=</operator> <call pos:start="481:11" pos:end="481:57"><name pos:start="481:11" pos:end="481:29">pci_find_cap_offset</name><argument_list pos:start="481:30" pos:end="481:57">(<argument pos:start="481:31" pos:end="481:37"><expr pos:start="481:31" pos:end="481:37"><name pos:start="481:31" pos:end="481:37">pci_dev</name></expr></argument>, <argument pos:start="481:40" pos:end="481:53"><expr pos:start="481:40" pos:end="481:53"><name pos:start="481:40" pos:end="481:53">PCI_CAP_ID_VPD</name></expr></argument>, <argument pos:start="481:56" pos:end="481:56"><expr pos:start="481:56" pos:end="481:56"><literal type="number" pos:start="481:56" pos:end="481:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="483:5" pos:end="505:5"><if pos:start="483:5" pos:end="505:5">if <condition pos:start="483:8" pos:end="483:12">(<expr pos:start="483:9" pos:end="483:11"><name pos:start="483:9" pos:end="483:11">pos</name></expr>)</condition> <block pos:start="483:14" pos:end="505:5">{<block_content pos:start="487:9" pos:end="503:58">

        <comment type="block" pos:start="485:9" pos:end="485:36">/* Direct R/W passthrough */</comment>

        <expr_stmt pos:start="487:9" pos:end="487:66"><expr pos:start="487:9" pos:end="487:65"><name pos:start="487:9" pos:end="487:11">ret</name> <operator pos:start="487:13" pos:end="487:13">=</operator> <call pos:start="487:15" pos:end="487:65"><name pos:start="487:15" pos:end="487:32">pci_add_capability</name><argument_list pos:start="487:33" pos:end="487:65">(<argument pos:start="487:34" pos:end="487:40"><expr pos:start="487:34" pos:end="487:40"><name pos:start="487:34" pos:end="487:40">pci_dev</name></expr></argument>, <argument pos:start="487:43" pos:end="487:56"><expr pos:start="487:43" pos:end="487:56"><name pos:start="487:43" pos:end="487:56">PCI_CAP_ID_VPD</name></expr></argument>, <argument pos:start="487:59" pos:end="487:61"><expr pos:start="487:59" pos:end="487:61"><name pos:start="487:59" pos:end="487:61">pos</name></expr></argument>, <argument pos:start="487:64" pos:end="487:64"><expr pos:start="487:64" pos:end="487:64"><literal type="number" pos:start="487:64" pos:end="487:64">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="489:9" pos:end="493:9"><if pos:start="489:9" pos:end="493:9">if <condition pos:start="489:12" pos:end="489:20">(<expr pos:start="489:13" pos:end="489:19"><name pos:start="489:13" pos:end="489:15">ret</name> <operator pos:start="489:17" pos:end="489:17">&lt;</operator> <literal type="number" pos:start="489:19" pos:end="489:19">0</literal></expr>)</condition> <block pos:start="489:22" pos:end="493:9">{<block_content pos:start="491:13" pos:end="491:23">

            <return pos:start="491:13" pos:end="491:23">return <expr pos:start="491:20" pos:end="491:22"><name pos:start="491:20" pos:end="491:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="497:9" pos:end="497:49"><expr pos:start="497:9" pos:end="497:48"><call pos:start="497:9" pos:end="497:48"><name pos:start="497:9" pos:end="497:35">assigned_dev_setup_cap_read</name><argument_list pos:start="497:36" pos:end="497:48">(<argument pos:start="497:37" pos:end="497:39"><expr pos:start="497:37" pos:end="497:39"><name pos:start="497:37" pos:end="497:39">dev</name></expr></argument>, <argument pos:start="497:42" pos:end="497:44"><expr pos:start="497:42" pos:end="497:44"><name pos:start="497:42" pos:end="497:44">pos</name></expr></argument>, <argument pos:start="497:47" pos:end="497:47"><expr pos:start="497:47" pos:end="497:47"><literal type="number" pos:start="497:47" pos:end="497:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="501:9" pos:end="501:42">/* direct write for cap content */</comment>

        <expr_stmt pos:start="503:9" pos:end="503:58"><expr pos:start="503:9" pos:end="503:57"><call pos:start="503:9" pos:end="503:57"><name pos:start="503:9" pos:end="503:40">assigned_dev_direct_config_write</name><argument_list pos:start="503:41" pos:end="503:57">(<argument pos:start="503:42" pos:end="503:44"><expr pos:start="503:42" pos:end="503:44"><name pos:start="503:42" pos:end="503:44">dev</name></expr></argument>, <argument pos:start="503:47" pos:end="503:53"><expr pos:start="503:47" pos:end="503:53"><name pos:start="503:47" pos:end="503:49">pos</name> <operator pos:start="503:51" pos:end="503:51">+</operator> <literal type="number" pos:start="503:53" pos:end="503:53">2</literal></expr></argument>, <argument pos:start="503:56" pos:end="503:56"><expr pos:start="503:56" pos:end="503:56"><literal type="number" pos:start="503:56" pos:end="503:56">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="509:5" pos:end="509:69">/* Devices can have multiple vendor capabilities, get them all */</comment>

    <for pos:start="511:5" pos:end="537:5">for <control pos:start="511:9" pos:end="513:33">(<init pos:start="511:10" pos:end="511:17"><expr pos:start="511:10" pos:end="511:16"><name pos:start="511:10" pos:end="511:12">pos</name> <operator pos:start="511:14" pos:end="511:14">=</operator> <literal type="number" pos:start="511:16" pos:end="511:16">0</literal></expr>;</init> <condition pos:start="511:19" pos:end="511:77"><expr pos:start="511:19" pos:end="511:76"><operator pos:start="511:19" pos:end="511:19">(</operator><name pos:start="511:20" pos:end="511:22">pos</name> <operator pos:start="511:24" pos:end="511:24">=</operator> <call pos:start="511:26" pos:end="511:75"><name pos:start="511:26" pos:end="511:44">pci_find_cap_offset</name><argument_list pos:start="511:45" pos:end="511:75">(<argument pos:start="511:46" pos:end="511:52"><expr pos:start="511:46" pos:end="511:52"><name pos:start="511:46" pos:end="511:52">pci_dev</name></expr></argument>, <argument pos:start="511:55" pos:end="511:69"><expr pos:start="511:55" pos:end="511:69"><name pos:start="511:55" pos:end="511:69">PCI_CAP_ID_VNDR</name></expr></argument>, <argument pos:start="511:72" pos:end="511:74"><expr pos:start="511:72" pos:end="511:74"><name pos:start="511:72" pos:end="511:74">pos</name></expr></argument>)</argument_list></call><operator pos:start="511:76" pos:end="511:76">)</operator></expr>;</condition>

        <incr pos:start="513:9" pos:end="513:32"><expr pos:start="513:9" pos:end="513:32"><name pos:start="513:9" pos:end="513:11">pos</name> <operator pos:start="513:13" pos:end="513:14">+=</operator> <name pos:start="513:16" pos:end="513:32">PCI_CAP_LIST_NEXT</name></expr></incr>)</control> <block pos:start="513:35" pos:end="537:5">{<block_content pos:start="515:9" pos:end="535:64">

        <decl_stmt pos:start="515:9" pos:end="515:74"><decl pos:start="515:9" pos:end="515:73"><type pos:start="515:9" pos:end="515:15"><name pos:start="515:9" pos:end="515:15">uint8_t</name></type> <name pos:start="515:17" pos:end="515:19">len</name> <init pos:start="515:21" pos:end="515:73">= <expr pos:start="515:23" pos:end="515:73"><call pos:start="515:23" pos:end="515:73"><name pos:start="515:23" pos:end="515:34">pci_get_byte</name><argument_list pos:start="515:35" pos:end="515:73">(<argument pos:start="515:36" pos:end="515:72"><expr pos:start="515:36" pos:end="515:72"><name pos:start="515:36" pos:end="515:50"><name pos:start="515:36" pos:end="515:42">pci_dev</name><operator pos:start="515:43" pos:end="515:44">-&gt;</operator><name pos:start="515:45" pos:end="515:50">config</name></name> <operator pos:start="515:52" pos:end="515:52">+</operator> <name pos:start="515:54" pos:end="515:56">pos</name> <operator pos:start="515:58" pos:end="515:58">+</operator> <name pos:start="515:60" pos:end="515:72">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="517:9" pos:end="517:36">/* Direct R/W passthrough */</comment>

        <expr_stmt pos:start="519:9" pos:end="519:69"><expr pos:start="519:9" pos:end="519:68"><name pos:start="519:9" pos:end="519:11">ret</name> <operator pos:start="519:13" pos:end="519:13">=</operator> <call pos:start="519:15" pos:end="519:68"><name pos:start="519:15" pos:end="519:32">pci_add_capability</name><argument_list pos:start="519:33" pos:end="519:68">(<argument pos:start="519:34" pos:end="519:40"><expr pos:start="519:34" pos:end="519:40"><name pos:start="519:34" pos:end="519:40">pci_dev</name></expr></argument>, <argument pos:start="519:43" pos:end="519:57"><expr pos:start="519:43" pos:end="519:57"><name pos:start="519:43" pos:end="519:57">PCI_CAP_ID_VNDR</name></expr></argument>, <argument pos:start="519:60" pos:end="519:62"><expr pos:start="519:60" pos:end="519:62"><name pos:start="519:60" pos:end="519:62">pos</name></expr></argument>, <argument pos:start="519:65" pos:end="519:67"><expr pos:start="519:65" pos:end="519:67"><name pos:start="519:65" pos:end="519:67">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="521:9" pos:end="525:9"><if pos:start="521:9" pos:end="525:9">if <condition pos:start="521:12" pos:end="521:20">(<expr pos:start="521:13" pos:end="521:19"><name pos:start="521:13" pos:end="521:15">ret</name> <operator pos:start="521:17" pos:end="521:17">&lt;</operator> <literal type="number" pos:start="521:19" pos:end="521:19">0</literal></expr>)</condition> <block pos:start="521:22" pos:end="525:9">{<block_content pos:start="523:13" pos:end="523:23">

            <return pos:start="523:13" pos:end="523:23">return <expr pos:start="523:20" pos:end="523:22"><name pos:start="523:20" pos:end="523:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="529:9" pos:end="529:51"><expr pos:start="529:9" pos:end="529:50"><call pos:start="529:9" pos:end="529:50"><name pos:start="529:9" pos:end="529:35">assigned_dev_setup_cap_read</name><argument_list pos:start="529:36" pos:end="529:50">(<argument pos:start="529:37" pos:end="529:39"><expr pos:start="529:37" pos:end="529:39"><name pos:start="529:37" pos:end="529:39">dev</name></expr></argument>, <argument pos:start="529:42" pos:end="529:44"><expr pos:start="529:42" pos:end="529:44"><name pos:start="529:42" pos:end="529:44">pos</name></expr></argument>, <argument pos:start="529:47" pos:end="529:49"><expr pos:start="529:47" pos:end="529:49"><name pos:start="529:47" pos:end="529:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="533:9" pos:end="533:42">/* direct write for cap content */</comment>

        <expr_stmt pos:start="535:9" pos:end="535:64"><expr pos:start="535:9" pos:end="535:63"><call pos:start="535:9" pos:end="535:63"><name pos:start="535:9" pos:end="535:40">assigned_dev_direct_config_write</name><argument_list pos:start="535:41" pos:end="535:63">(<argument pos:start="535:42" pos:end="535:44"><expr pos:start="535:42" pos:end="535:44"><name pos:start="535:42" pos:end="535:44">dev</name></expr></argument>, <argument pos:start="535:47" pos:end="535:53"><expr pos:start="535:47" pos:end="535:53"><name pos:start="535:47" pos:end="535:49">pos</name> <operator pos:start="535:51" pos:end="535:51">+</operator> <literal type="number" pos:start="535:53" pos:end="535:53">2</literal></expr></argument>, <argument pos:start="535:56" pos:end="535:62"><expr pos:start="535:56" pos:end="535:62"><name pos:start="535:56" pos:end="535:58">len</name> <operator pos:start="535:60" pos:end="535:60">-</operator> <literal type="number" pos:start="535:62" pos:end="535:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="541:5" pos:end="543:17">/* If real and virtual capability list status bits differ, virtualize the

     * access. */</comment>

    <if_stmt pos:start="545:5" pos:end="553:5"><if pos:start="545:5" pos:end="553:5">if <condition pos:start="545:8" pos:end="549:30">(<expr pos:start="545:9" pos:end="549:29"><operator pos:start="545:9" pos:end="545:9">(</operator><call pos:start="545:10" pos:end="545:51"><name pos:start="545:10" pos:end="545:21">pci_get_word</name><argument_list pos:start="545:22" pos:end="545:51">(<argument pos:start="545:23" pos:end="545:50"><expr pos:start="545:23" pos:end="545:50"><name pos:start="545:23" pos:end="545:37"><name pos:start="545:23" pos:end="545:29">pci_dev</name><operator pos:start="545:30" pos:end="545:31">-&gt;</operator><name pos:start="545:32" pos:end="545:37">config</name></name> <operator pos:start="545:39" pos:end="545:39">+</operator> <name pos:start="545:41" pos:end="545:50">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="545:53" pos:end="545:53">&amp;</operator> <name pos:start="545:55" pos:end="545:73">PCI_STATUS_CAP_LIST</name><operator pos:start="545:74" pos:end="545:74">)</operator> <operator pos:start="545:76" pos:end="545:77">!=</operator>

        <operator pos:start="547:9" pos:end="547:9">(</operator><call pos:start="547:10" pos:end="547:56"><name pos:start="547:10" pos:end="547:35">assigned_dev_pci_read_byte</name><argument_list pos:start="547:36" pos:end="547:56">(<argument pos:start="547:37" pos:end="547:43"><expr pos:start="547:37" pos:end="547:43"><name pos:start="547:37" pos:end="547:43">pci_dev</name></expr></argument>, <argument pos:start="547:46" pos:end="547:55"><expr pos:start="547:46" pos:end="547:55"><name pos:start="547:46" pos:end="547:55">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="547:58" pos:end="547:58">&amp;</operator>

         <name pos:start="549:10" pos:end="549:28">PCI_STATUS_CAP_LIST</name><operator pos:start="549:29" pos:end="549:29">)</operator></expr>)</condition> <block pos:start="549:32" pos:end="553:5">{<block_content pos:start="551:9" pos:end="551:68">

        <expr_stmt pos:start="551:9" pos:end="551:68"><expr pos:start="551:9" pos:end="551:67"><name pos:start="551:9" pos:end="551:44"><name pos:start="551:9" pos:end="551:11">dev</name><operator pos:start="551:12" pos:end="551:13">-&gt;</operator><name pos:start="551:14" pos:end="551:32">emulate_config_read</name><index pos:start="551:33" pos:end="551:44">[<expr pos:start="551:34" pos:end="551:43"><name pos:start="551:34" pos:end="551:43">PCI_STATUS</name></expr>]</index></name> <operator pos:start="551:46" pos:end="551:47">|=</operator> <name pos:start="551:49" pos:end="551:67">PCI_STATUS_CAP_LIST</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="557:5" pos:end="557:13">return <expr pos:start="557:12" pos:end="557:12"><literal type="number" pos:start="557:12" pos:end="557:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
