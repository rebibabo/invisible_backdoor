<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19533.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:15"><name pos:start="1:1" pos:end="1:13">GuestFileRead</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:34">qmp_guest_file_read</name><parameter_list pos:start="1:35" pos:end="3:63">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:42">int64_t</name></type> <name pos:start="1:44" pos:end="1:49">handle</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:65"><decl pos:start="1:52" pos:end="1:65"><type pos:start="1:52" pos:end="1:65"><name pos:start="1:52" pos:end="1:55">bool</name></type> <name pos:start="1:57" pos:end="1:65">has_count</name></decl></parameter>,

                                   <parameter pos:start="3:36" pos:end="3:48"><decl pos:start="3:36" pos:end="3:48"><type pos:start="3:36" pos:end="3:48"><name pos:start="3:36" pos:end="3:42">int64_t</name></type> <name pos:start="3:44" pos:end="3:48">count</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:62"><decl pos:start="3:51" pos:end="3:62"><type pos:start="3:51" pos:end="3:62"><name pos:start="3:51" pos:end="3:55">Error</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier><modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:62">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:21">

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">GuestFileRead</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:28">read_data</name> <init pos:start="7:30" pos:end="7:35">= <expr pos:start="7:32" pos:end="7:35"><name pos:start="7:32" pos:end="7:35">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:10">guchar</name> <modifier pos:start="9:12" pos:end="9:12">*</modifier></type><name pos:start="9:13" pos:end="9:15">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:10">HANDLE</name></type> <name pos:start="11:12" pos:end="11:13">fh</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:15"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">bool</name></type> <name pos:start="13:10" pos:end="13:14">is_ok</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:9">DWORD</name></type> <name pos:start="15:11" pos:end="15:20">read_count</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:64"><decl pos:start="17:5" pos:end="17:63"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:19">GuestFileHandle</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">gfh</name> <init pos:start="17:26" pos:end="17:63">= <expr pos:start="17:28" pos:end="17:63"><call pos:start="17:28" pos:end="17:63"><name pos:start="17:28" pos:end="17:49">guest_file_handle_find</name><argument_list pos:start="17:50" pos:end="17:63">(<argument pos:start="17:51" pos:end="17:56"><expr pos:start="17:51" pos:end="17:56"><name pos:start="17:51" pos:end="17:56">handle</name></expr></argument>, <argument pos:start="17:59" pos:end="17:62"><expr pos:start="17:59" pos:end="17:62"><name pos:start="17:59" pos:end="17:62">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:13">(<expr pos:start="21:9" pos:end="21:12"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:12">gfh</name></expr>)</condition> <block pos:start="21:15" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:20">

        <return pos:start="23:9" pos:end="23:20">return <expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="27:5" pos:end="39:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:18">has_count</name></expr>)</condition> <block pos:start="27:21" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:39">

        <expr_stmt pos:start="29:9" pos:end="29:39"><expr pos:start="29:9" pos:end="29:38"><name pos:start="29:9" pos:end="29:13">count</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <name pos:start="29:17" pos:end="29:38">QGA_READ_COUNT_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="31:7" pos:end="39:5">else if <condition pos:start="31:15" pos:end="31:25">(<expr pos:start="31:16" pos:end="31:24"><name pos:start="31:16" pos:end="31:20">count</name> <operator pos:start="31:22" pos:end="31:22">&lt;</operator> <literal type="number" pos:start="31:24" pos:end="31:24">0</literal></expr>)</condition> <block pos:start="31:27" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:20">

        <expr_stmt pos:start="33:9" pos:end="35:61"><expr pos:start="33:9" pos:end="35:60"><call pos:start="33:9" pos:end="35:60"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="35:60">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="35:52"><expr pos:start="33:26" pos:end="35:52"><literal type="string" pos:start="33:26" pos:end="33:35">"value '%"</literal> <name pos:start="33:37" pos:end="33:42">PRId64</name>

                   <literal type="string" pos:start="35:20" pos:end="35:52">"' is invalid for argument count"</literal></expr></argument>, <argument pos:start="35:55" pos:end="35:59"><expr pos:start="35:55" pos:end="35:59"><name pos:start="35:55" pos:end="35:59">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><name pos:start="37:16" pos:end="37:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:6">fh</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <name pos:start="43:10" pos:end="43:16"><name pos:start="43:10" pos:end="43:12">gfh</name><operator pos:start="43:13" pos:end="43:14">-&gt;</operator><name pos:start="43:15" pos:end="43:16">fh</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><name pos:start="45:5" pos:end="45:7">buf</name> <operator pos:start="45:9" pos:end="45:9">=</operator> <call pos:start="45:11" pos:end="45:28"><name pos:start="45:11" pos:end="45:19">g_malloc0</name><argument_list pos:start="45:20" pos:end="45:28">(<argument pos:start="45:21" pos:end="45:27"><expr pos:start="45:21" pos:end="45:27"><name pos:start="45:21" pos:end="45:25">count</name><operator pos:start="45:26" pos:end="45:26">+</operator><literal type="number" pos:start="45:27" pos:end="45:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:56"><expr pos:start="47:5" pos:end="47:55"><name pos:start="47:5" pos:end="47:9">is_ok</name> <operator pos:start="47:11" pos:end="47:11">=</operator> <call pos:start="47:13" pos:end="47:55"><name pos:start="47:13" pos:end="47:20">ReadFile</name><argument_list pos:start="47:21" pos:end="47:55">(<argument pos:start="47:22" pos:end="47:23"><expr pos:start="47:22" pos:end="47:23"><name pos:start="47:22" pos:end="47:23">fh</name></expr></argument>, <argument pos:start="47:26" pos:end="47:28"><expr pos:start="47:26" pos:end="47:28"><name pos:start="47:26" pos:end="47:28">buf</name></expr></argument>, <argument pos:start="47:31" pos:end="47:35"><expr pos:start="47:31" pos:end="47:35"><name pos:start="47:31" pos:end="47:35">count</name></expr></argument>, <argument pos:start="47:38" pos:end="47:48"><expr pos:start="47:38" pos:end="47:48"><operator pos:start="47:38" pos:end="47:38">&amp;</operator><name pos:start="47:39" pos:end="47:48">read_count</name></expr></argument>, <argument pos:start="47:51" pos:end="47:54"><expr pos:start="47:51" pos:end="47:54"><name pos:start="47:51" pos:end="47:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="73:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:15">(<expr pos:start="49:9" pos:end="49:14"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:14">is_ok</name></expr>)</condition> <block pos:start="49:17" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:64">

        <expr_stmt pos:start="51:9" pos:end="51:70"><expr pos:start="51:9" pos:end="51:69"><call pos:start="51:9" pos:end="51:69"><name pos:start="51:9" pos:end="51:24">error_setg_win32</name><argument_list pos:start="51:25" pos:end="51:69">(<argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">errp</name></expr></argument>, <argument pos:start="51:32" pos:end="51:45"><expr pos:start="51:32" pos:end="51:45"><call pos:start="51:32" pos:end="51:45"><name pos:start="51:32" pos:end="51:43">GetLastError</name><argument_list pos:start="51:44" pos:end="51:45">()</argument_list></call></expr></argument>, <argument pos:start="51:48" pos:end="51:68"><expr pos:start="51:48" pos:end="51:68"><literal type="string" pos:start="51:48" pos:end="51:68">"failed to read file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:64"><expr pos:start="53:9" pos:end="53:63"><call pos:start="53:9" pos:end="53:63"><name pos:start="53:9" pos:end="53:12">slog</name><argument_list pos:start="53:13" pos:end="53:63">(<argument pos:start="53:14" pos:end="53:54"><expr pos:start="53:14" pos:end="53:54"><literal type="string" pos:start="53:14" pos:end="53:47">"guest-file-read failed, handle %"</literal> <name pos:start="53:49" pos:end="53:54">PRId64</name></expr></argument>, <argument pos:start="53:57" pos:end="53:62"><expr pos:start="53:57" pos:end="53:62"><name pos:start="53:57" pos:end="53:62">handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="73:5">else <block pos:start="55:12" pos:end="73:5">{<block_content pos:start="57:9" pos:end="71:9">

        <expr_stmt pos:start="57:9" pos:end="57:28"><expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:11">buf</name><index pos:start="57:12" pos:end="57:23">[<expr pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:22">read_count</name></expr>]</index></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <literal type="number" pos:start="57:27" pos:end="57:27">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:53"><expr pos:start="59:9" pos:end="59:52"><name pos:start="59:9" pos:end="59:17">read_data</name> <operator pos:start="59:19" pos:end="59:19">=</operator> <call pos:start="59:21" pos:end="59:52"><name pos:start="59:21" pos:end="59:29">g_malloc0</name><argument_list pos:start="59:30" pos:end="59:52">(<argument pos:start="59:31" pos:end="59:51"><expr pos:start="59:31" pos:end="59:51"><sizeof pos:start="59:31" pos:end="59:51">sizeof<argument_list pos:start="59:37" pos:end="59:51">(<argument pos:start="59:38" pos:end="59:50"><expr pos:start="59:38" pos:end="59:50"><name pos:start="59:38" pos:end="59:50">GuestFileRead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:46"><expr pos:start="61:9" pos:end="61:45"><name pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:17">read_data</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:24">count</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <operator pos:start="61:28" pos:end="61:28">(</operator><name pos:start="61:29" pos:end="61:34">size_t</name><operator pos:start="61:35" pos:end="61:35">)</operator><name pos:start="61:36" pos:end="61:45">read_count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:22"><name pos:start="63:9" pos:end="63:17">read_data</name><operator pos:start="63:18" pos:end="63:19">-&gt;</operator><name pos:start="63:20" pos:end="63:22">eof</name></name> <operator pos:start="63:24" pos:end="63:24">=</operator> <name pos:start="63:26" pos:end="63:35">read_count</name> <operator pos:start="63:37" pos:end="63:38">==</operator> <literal type="number" pos:start="63:40" pos:end="63:40">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:28">(<expr pos:start="67:13" pos:end="67:27"><name pos:start="67:13" pos:end="67:22">read_count</name> <operator pos:start="67:24" pos:end="67:25">!=</operator> <literal type="number" pos:start="67:27" pos:end="67:27">0</literal></expr>)</condition> <block pos:start="67:30" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:66">

            <expr_stmt pos:start="69:13" pos:end="69:66"><expr pos:start="69:13" pos:end="69:65"><name pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:21">read_data</name><operator pos:start="69:22" pos:end="69:23">-&gt;</operator><name pos:start="69:24" pos:end="69:30">buf_b64</name></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <call pos:start="69:34" pos:end="69:65"><name pos:start="69:34" pos:end="69:48">g_base64_encode</name><argument_list pos:start="69:49" pos:end="69:65">(<argument pos:start="69:50" pos:end="69:52"><expr pos:start="69:50" pos:end="69:52"><name pos:start="69:50" pos:end="69:52">buf</name></expr></argument>, <argument pos:start="69:55" pos:end="69:64"><expr pos:start="69:55" pos:end="69:64"><name pos:start="69:55" pos:end="69:64">read_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:16"><expr pos:start="75:5" pos:end="75:15"><call pos:start="75:5" pos:end="75:15"><name pos:start="75:5" pos:end="75:10">g_free</name><argument_list pos:start="75:11" pos:end="75:15">(<argument pos:start="75:12" pos:end="75:14"><expr pos:start="75:12" pos:end="75:14"><name pos:start="75:12" pos:end="75:14">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="79:5" pos:end="79:21">return <expr pos:start="79:12" pos:end="79:20"><name pos:start="79:12" pos:end="79:20">read_data</name></expr>;</return>

</block_content>}</block></function>
</unit>
