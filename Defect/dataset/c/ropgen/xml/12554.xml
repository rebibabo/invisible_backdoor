<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12554.c" pos:tabs="8"><function pos:start="1:1" pos:end="1397:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">parse_ffconfig</name><parameter_list pos:start="1:26" pos:end="1:47">(<parameter pos:start="1:27" pos:end="1:46"><decl pos:start="1:27" pos:end="1:46"><type pos:start="1:27" pos:end="1:38"><specifier pos:start="1:27" pos:end="1:31">const</specifier> <name pos:start="1:33" pos:end="1:36">char</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:46">filename</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1397:1">{<block_content pos:start="5:5" pos:end="1395:17">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:8">FILE</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:11">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">char</name></type> <name pos:start="7:10" pos:end="7:19"><name pos:start="7:10" pos:end="7:13">line</name><index pos:start="7:14" pos:end="7:19">[<expr pos:start="7:15" pos:end="7:18"><literal type="number" pos:start="7:15" pos:end="7:18">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:16"><name pos:start="9:10" pos:end="9:12">cmd</name><index pos:start="9:13" pos:end="9:16">[<expr pos:start="9:14" pos:end="9:15"><literal type="number" pos:start="9:14" pos:end="9:15">64</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">arg</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:30"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">val</name></decl>, <decl pos:start="15:14" pos:end="15:19"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:14" pos:end="15:19">errors</name></decl>, <decl pos:start="15:22" pos:end="15:29"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:22" pos:end="15:29">line_num</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:47"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:15"><name pos:start="17:5" pos:end="17:12">FFStream</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier><modifier pos:start="17:15" pos:end="17:15">*</modifier></type><name pos:start="17:16" pos:end="17:26">last_stream</name></decl>, <decl pos:start="17:29" pos:end="17:35"><type ref="prev" pos:start="17:5" pos:end="17:15"><modifier pos:start="17:29" pos:end="17:29">*</modifier></type><name pos:start="17:30" pos:end="17:35">stream</name></decl>, <decl pos:start="17:38" pos:end="17:46"><type ref="prev" pos:start="17:5" pos:end="17:15"><modifier pos:start="17:38" pos:end="17:38">*</modifier></type><name pos:start="17:39" pos:end="17:46">redirect</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:12">FFStream</name> <modifier pos:start="19:14" pos:end="19:14">*</modifier><modifier pos:start="19:15" pos:end="19:15">*</modifier></type><name pos:start="19:16" pos:end="19:24">last_feed</name></decl>, <decl pos:start="19:27" pos:end="19:31"><type ref="prev" pos:start="19:5" pos:end="19:15"><modifier pos:start="19:27" pos:end="19:27">*</modifier></type><name pos:start="19:28" pos:end="19:31">feed</name></decl>, <decl pos:start="19:34" pos:end="19:35"><type ref="prev" pos:start="19:5" pos:end="19:15"><modifier pos:start="19:34" pos:end="19:34">*</modifier></type><name pos:start="19:35" pos:end="19:35">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:28"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:18">AVCodecContext</name></type> <name pos:start="21:20" pos:end="21:28">audio_enc</name></decl>, <decl pos:start="21:31" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:18"/><name pos:start="21:31" pos:end="21:39">video_enc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:36"><decl pos:start="23:5" pos:end="23:25"><type pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:8">enum</name> <name pos:start="23:10" pos:end="23:16">CodecID</name></name></type> <name pos:start="23:18" pos:end="23:25">audio_id</name></decl>, <decl pos:start="23:28" pos:end="23:35"><type ref="prev" pos:start="23:5" pos:end="23:16"/><name pos:start="23:28" pos:end="23:35">video_id</name></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:5">f</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:28"><name pos:start="27:9" pos:end="27:13">fopen</name><argument_list pos:start="27:14" pos:end="27:28">(<argument pos:start="27:15" pos:end="27:22"><expr pos:start="27:15" pos:end="27:22"><name pos:start="27:15" pos:end="27:22">filename</name></expr></argument>, <argument pos:start="27:25" pos:end="27:27"><expr pos:start="27:25" pos:end="27:27"><literal type="string" pos:start="27:25" pos:end="27:27">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:11">(<expr pos:start="29:9" pos:end="29:10"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:10">f</name></expr>)</condition> <block pos:start="29:13" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:25"><expr pos:start="31:9" pos:end="31:24"><call pos:start="31:9" pos:end="31:24"><name pos:start="31:9" pos:end="31:14">perror</name><argument_list pos:start="31:15" pos:end="31:24">(<argument pos:start="31:16" pos:end="31:23"><expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:15"><expr pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:10">errors</name> <operator pos:start="39:12" pos:end="39:12">=</operator> <literal type="number" pos:start="39:14" pos:end="39:14">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:17"><expr pos:start="41:5" pos:end="41:16"><name pos:start="41:5" pos:end="41:12">line_num</name> <operator pos:start="41:14" pos:end="41:14">=</operator> <literal type="number" pos:start="41:16" pos:end="41:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:16">first_stream</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:23">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:32"><expr pos:start="45:5" pos:end="45:31"><name pos:start="45:5" pos:end="45:15">last_stream</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:31">first_stream</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:14">first_feed</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <name pos:start="47:18" pos:end="47:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:28"><expr pos:start="49:5" pos:end="49:27"><name pos:start="49:5" pos:end="49:13">last_feed</name> <operator pos:start="49:15" pos:end="49:15">=</operator> <operator pos:start="49:17" pos:end="49:17">&amp;</operator><name pos:start="49:18" pos:end="49:27">first_feed</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:18"><expr pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:10">stream</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <name pos:start="51:14" pos:end="51:17">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:16"><expr pos:start="53:5" pos:end="53:15"><name pos:start="53:5" pos:end="53:8">feed</name> <operator pos:start="53:10" pos:end="53:10">=</operator> <name pos:start="53:12" pos:end="53:15">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:20"><expr pos:start="55:5" pos:end="55:19"><name pos:start="55:5" pos:end="55:12">redirect</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <name pos:start="55:16" pos:end="55:19">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:29"><expr pos:start="57:5" pos:end="57:28"><name pos:start="57:5" pos:end="57:12">audio_id</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:28">CODEC_ID_NONE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:29"><expr pos:start="59:5" pos:end="59:28"><name pos:start="59:5" pos:end="59:12">video_id</name> <operator pos:start="59:14" pos:end="59:14">=</operator> <name pos:start="59:16" pos:end="59:28">CODEC_ID_NONE</name></expr>;</expr_stmt>

    <for pos:start="61:5" pos:end="1383:5">for<control pos:start="61:8" pos:end="61:11">(<init pos:start="61:9" pos:end="61:9">;</init><condition pos:start="61:10" pos:end="61:10">;</condition><incr/>)</control> <block pos:start="61:13" pos:end="1383:5">{<block_content pos:start="63:9" pos:end="1381:9">

        <if_stmt pos:start="63:9" pos:end="65:18"><if pos:start="63:9" pos:end="65:18">if <condition pos:start="63:12" pos:end="63:49">(<expr pos:start="63:13" pos:end="63:48"><call pos:start="63:13" pos:end="63:40"><name pos:start="63:13" pos:end="63:17">fgets</name><argument_list pos:start="63:18" pos:end="63:40">(<argument pos:start="63:19" pos:end="63:22"><expr pos:start="63:19" pos:end="63:22"><name pos:start="63:19" pos:end="63:22">line</name></expr></argument>, <argument pos:start="63:25" pos:end="63:36"><expr pos:start="63:25" pos:end="63:36"><sizeof pos:start="63:25" pos:end="63:36">sizeof<argument_list pos:start="63:31" pos:end="63:36">(<argument pos:start="63:32" pos:end="63:35"><expr pos:start="63:32" pos:end="63:35"><name pos:start="63:32" pos:end="63:35">line</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><name pos:start="63:39" pos:end="63:39">f</name></expr></argument>)</argument_list></call> <operator pos:start="63:42" pos:end="63:43">==</operator> <name pos:start="63:45" pos:end="63:48">NULL</name></expr>)</condition><block type="pseudo" pos:start="65:13" pos:end="65:18"><block_content pos:start="65:13" pos:end="65:18">

            <break pos:start="65:13" pos:end="65:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:19"><expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:16">line_num</name><operator pos:start="67:17" pos:end="67:18">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:17"><expr pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">p</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <name pos:start="69:13" pos:end="69:16">line</name></expr>;</expr_stmt>

        <while pos:start="71:9" pos:end="73:16">while <condition pos:start="71:15" pos:end="71:27">(<expr pos:start="71:16" pos:end="71:26"><call pos:start="71:16" pos:end="71:26"><name pos:start="71:16" pos:end="71:22">isspace</name><argument_list pos:start="71:23" pos:end="71:26">(<argument pos:start="71:24" pos:end="71:25"><expr pos:start="71:24" pos:end="71:25"><operator pos:start="71:24" pos:end="71:24">*</operator><name pos:start="71:25" pos:end="71:25">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="73:13" pos:end="73:16"><block_content pos:start="73:13" pos:end="73:16">

            <expr_stmt pos:start="73:13" pos:end="73:16"><expr pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:13">p</name><operator pos:start="73:14" pos:end="73:15">++</operator></expr>;</expr_stmt></block_content></block></while>

        <if_stmt pos:start="75:9" pos:end="77:21"><if pos:start="75:9" pos:end="77:21">if <condition pos:start="75:12" pos:end="75:36">(<expr pos:start="75:13" pos:end="75:35"><operator pos:start="75:13" pos:end="75:13">*</operator><name pos:start="75:14" pos:end="75:14">p</name> <operator pos:start="75:16" pos:end="75:17">==</operator> <literal type="char" pos:start="75:19" pos:end="75:22">'\0'</literal> <operator pos:start="75:24" pos:end="75:25">||</operator> <operator pos:start="75:27" pos:end="75:27">*</operator><name pos:start="75:28" pos:end="75:28">p</name> <operator pos:start="75:30" pos:end="75:31">==</operator> <literal type="char" pos:start="75:33" pos:end="75:35">'#'</literal></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:21"><block_content pos:start="77:13" pos:end="77:21">

            <continue pos:start="77:13" pos:end="77:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:38"><expr pos:start="81:9" pos:end="81:37"><call pos:start="81:9" pos:end="81:37"><name pos:start="81:9" pos:end="81:15">get_arg</name><argument_list pos:start="81:16" pos:end="81:37">(<argument pos:start="81:17" pos:end="81:19"><expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">cmd</name></expr></argument>, <argument pos:start="81:22" pos:end="81:32"><expr pos:start="81:22" pos:end="81:32"><sizeof pos:start="81:22" pos:end="81:32">sizeof<argument_list pos:start="81:28" pos:end="81:32">(<argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:35" pos:end="81:36"><expr pos:start="81:35" pos:end="81:36"><operator pos:start="81:35" pos:end="81:35">&amp;</operator><name pos:start="81:36" pos:end="81:36">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="85:9" pos:end="1381:9"><if pos:start="85:9" pos:end="103:9">if <condition pos:start="85:12" pos:end="85:37">(<expr pos:start="85:13" pos:end="85:36"><operator pos:start="85:13" pos:end="85:13">!</operator><call pos:start="85:14" pos:end="85:36"><name pos:start="85:14" pos:end="85:23">strcasecmp</name><argument_list pos:start="85:24" pos:end="85:36">(<argument pos:start="85:25" pos:end="85:27"><expr pos:start="85:25" pos:end="85:27"><name pos:start="85:25" pos:end="85:27">cmd</name></expr></argument>, <argument pos:start="85:30" pos:end="85:35"><expr pos:start="85:30" pos:end="85:35"><literal type="string" pos:start="85:30" pos:end="85:35">"Port"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:39" pos:end="103:9">{<block_content pos:start="87:13" pos:end="101:47">

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><call pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:19">get_arg</name><argument_list pos:start="87:20" pos:end="87:41">(<argument pos:start="87:21" pos:end="87:23"><expr pos:start="87:21" pos:end="87:23"><name pos:start="87:21" pos:end="87:23">arg</name></expr></argument>, <argument pos:start="87:26" pos:end="87:36"><expr pos:start="87:26" pos:end="87:36"><sizeof pos:start="87:26" pos:end="87:36">sizeof<argument_list pos:start="87:32" pos:end="87:36">(<argument pos:start="87:33" pos:end="87:35"><expr pos:start="87:33" pos:end="87:35"><name pos:start="87:33" pos:end="87:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="87:39" pos:end="87:40"><expr pos:start="87:39" pos:end="87:40"><operator pos:start="87:39" pos:end="87:39">&amp;</operator><name pos:start="87:40" pos:end="87:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:28"><expr pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:15">val</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:27"><name pos:start="89:19" pos:end="89:22">atoi</name><argument_list pos:start="89:23" pos:end="89:27">(<argument pos:start="89:24" pos:end="89:26"><expr pos:start="89:24" pos:end="89:26"><name pos:start="89:24" pos:end="89:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="99:13"><if pos:start="91:13" pos:end="99:13">if <condition pos:start="91:16" pos:end="91:39">(<expr pos:start="91:17" pos:end="91:38"><name pos:start="91:17" pos:end="91:32"><name pos:start="91:17" pos:end="91:19">val</name> <argument_list type="generic" pos:start="91:21" pos:end="91:32">&lt; <argument pos:start="91:23" pos:end="91:30"><expr pos:start="91:23" pos:end="91:30"><literal type="number" pos:start="91:23" pos:end="91:23">1</literal> <operator pos:start="91:25" pos:end="91:26">||</operator> <name pos:start="91:28" pos:end="91:30">val</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="91:34" pos:end="91:38">65536</literal></expr>)</condition> <block pos:start="91:41" pos:end="99:13">{<block_content pos:start="93:17" pos:end="97:25">

                <expr_stmt pos:start="93:17" pos:end="95:49"><expr pos:start="93:17" pos:end="95:48"><call pos:start="93:17" pos:end="95:48"><name pos:start="93:17" pos:end="93:23">fprintf</name><argument_list pos:start="93:24" pos:end="95:48">(<argument pos:start="93:25" pos:end="93:30"><expr pos:start="93:25" pos:end="93:30"><name pos:start="93:25" pos:end="93:30">stderr</name></expr></argument>, <argument pos:start="93:33" pos:end="93:59"><expr pos:start="93:33" pos:end="93:59"><literal type="string" pos:start="93:33" pos:end="93:59">"%s:%d: Invalid port: %s\n"</literal></expr></argument>,

                        <argument pos:start="95:25" pos:end="95:32"><expr pos:start="95:25" pos:end="95:32"><name pos:start="95:25" pos:end="95:32">filename</name></expr></argument>, <argument pos:start="95:35" pos:end="95:42"><expr pos:start="95:35" pos:end="95:42"><name pos:start="95:35" pos:end="95:42">line_num</name></expr></argument>, <argument pos:start="95:45" pos:end="95:47"><expr pos:start="95:45" pos:end="95:47"><name pos:start="95:45" pos:end="95:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:25"><expr pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:22">errors</name><operator pos:start="97:23" pos:end="97:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:47"><expr pos:start="101:13" pos:end="101:46"><name pos:start="101:13" pos:end="101:33"><name pos:start="101:13" pos:end="101:24">my_http_addr</name><operator pos:start="101:25" pos:end="101:25">.</operator><name pos:start="101:26" pos:end="101:33">sin_port</name></name> <operator pos:start="101:35" pos:end="101:35">=</operator> <call pos:start="101:37" pos:end="101:46"><name pos:start="101:37" pos:end="101:41">htons</name><argument_list pos:start="101:42" pos:end="101:46">(<argument pos:start="101:43" pos:end="101:45"><expr pos:start="101:43" pos:end="101:45"><name pos:start="101:43" pos:end="101:45">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="103:11" pos:end="117:9">else if <condition pos:start="103:19" pos:end="103:51">(<expr pos:start="103:20" pos:end="103:50"><operator pos:start="103:20" pos:end="103:20">!</operator><call pos:start="103:21" pos:end="103:50"><name pos:start="103:21" pos:end="103:30">strcasecmp</name><argument_list pos:start="103:31" pos:end="103:50">(<argument pos:start="103:32" pos:end="103:34"><expr pos:start="103:32" pos:end="103:34"><name pos:start="103:32" pos:end="103:34">cmd</name></expr></argument>, <argument pos:start="103:37" pos:end="103:49"><expr pos:start="103:37" pos:end="103:49"><literal type="string" pos:start="103:37" pos:end="103:49">"BindAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="103:53" pos:end="117:9">{<block_content pos:start="105:13" pos:end="115:13">

            <expr_stmt pos:start="105:13" pos:end="105:42"><expr pos:start="105:13" pos:end="105:41"><call pos:start="105:13" pos:end="105:41"><name pos:start="105:13" pos:end="105:19">get_arg</name><argument_list pos:start="105:20" pos:end="105:41">(<argument pos:start="105:21" pos:end="105:23"><expr pos:start="105:21" pos:end="105:23"><name pos:start="105:21" pos:end="105:23">arg</name></expr></argument>, <argument pos:start="105:26" pos:end="105:36"><expr pos:start="105:26" pos:end="105:36"><sizeof pos:start="105:26" pos:end="105:36">sizeof<argument_list pos:start="105:32" pos:end="105:36">(<argument pos:start="105:33" pos:end="105:35"><expr pos:start="105:33" pos:end="105:35"><name pos:start="105:33" pos:end="105:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:39" pos:end="105:40"><expr pos:start="105:39" pos:end="105:40"><operator pos:start="105:39" pos:end="105:39">&amp;</operator><name pos:start="105:40" pos:end="105:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="107:13" pos:end="115:13"><if pos:start="107:13" pos:end="115:13">if <condition pos:start="107:16" pos:end="107:63">(<expr pos:start="107:17" pos:end="107:62"><call pos:start="107:17" pos:end="107:57"><name pos:start="107:17" pos:end="107:28">resolve_host</name><argument_list pos:start="107:29" pos:end="107:57">(<argument pos:start="107:30" pos:end="107:51"><expr pos:start="107:30" pos:end="107:51"><operator pos:start="107:30" pos:end="107:30">&amp;</operator><name pos:start="107:31" pos:end="107:51"><name pos:start="107:31" pos:end="107:42">my_http_addr</name><operator pos:start="107:43" pos:end="107:43">.</operator><name pos:start="107:44" pos:end="107:51">sin_addr</name></name></expr></argument>, <argument pos:start="107:54" pos:end="107:56"><expr pos:start="107:54" pos:end="107:56"><name pos:start="107:54" pos:end="107:56">arg</name></expr></argument>)</argument_list></call> <operator pos:start="107:59" pos:end="107:60">!=</operator> <literal type="number" pos:start="107:62" pos:end="107:62">0</literal></expr>)</condition> <block pos:start="107:65" pos:end="115:13">{<block_content pos:start="109:17" pos:end="113:25">

                <expr_stmt pos:start="109:17" pos:end="111:49"><expr pos:start="109:17" pos:end="111:48"><call pos:start="109:17" pos:end="111:48"><name pos:start="109:17" pos:end="109:23">fprintf</name><argument_list pos:start="109:24" pos:end="111:48">(<argument pos:start="109:25" pos:end="109:30"><expr pos:start="109:25" pos:end="109:30"><name pos:start="109:25" pos:end="109:30">stderr</name></expr></argument>, <argument pos:start="109:33" pos:end="109:70"><expr pos:start="109:33" pos:end="109:70"><literal type="string" pos:start="109:33" pos:end="109:70">"%s:%d: Invalid host/IP address: %s\n"</literal></expr></argument>,

                        <argument pos:start="111:25" pos:end="111:32"><expr pos:start="111:25" pos:end="111:32"><name pos:start="111:25" pos:end="111:32">filename</name></expr></argument>, <argument pos:start="111:35" pos:end="111:42"><expr pos:start="111:35" pos:end="111:42"><name pos:start="111:35" pos:end="111:42">line_num</name></expr></argument>, <argument pos:start="111:45" pos:end="111:47"><expr pos:start="111:45" pos:end="111:47"><name pos:start="111:45" pos:end="111:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="113:17" pos:end="113:25"><expr pos:start="113:17" pos:end="113:24"><name pos:start="113:17" pos:end="113:22">errors</name><operator pos:start="113:23" pos:end="113:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="117:11" pos:end="121:9">else if <condition pos:start="117:19" pos:end="117:48">(<expr pos:start="117:20" pos:end="117:47"><operator pos:start="117:20" pos:end="117:20">!</operator><call pos:start="117:21" pos:end="117:47"><name pos:start="117:21" pos:end="117:30">strcasecmp</name><argument_list pos:start="117:31" pos:end="117:47">(<argument pos:start="117:32" pos:end="117:34"><expr pos:start="117:32" pos:end="117:34"><name pos:start="117:32" pos:end="117:34">cmd</name></expr></argument>, <argument pos:start="117:37" pos:end="117:46"><expr pos:start="117:37" pos:end="117:46"><literal type="string" pos:start="117:37" pos:end="117:46">"NoDaemon"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="117:50" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:32">

            <expr_stmt pos:start="119:13" pos:end="119:32"><expr pos:start="119:13" pos:end="119:31"><name pos:start="119:13" pos:end="119:27">ffserver_daemon</name> <operator pos:start="119:29" pos:end="119:29">=</operator> <literal type="number" pos:start="119:31" pos:end="119:31">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="121:11" pos:end="139:9">else if <condition pos:start="121:19" pos:end="121:48">(<expr pos:start="121:20" pos:end="121:47"><operator pos:start="121:20" pos:end="121:20">!</operator><call pos:start="121:21" pos:end="121:47"><name pos:start="121:21" pos:end="121:30">strcasecmp</name><argument_list pos:start="121:31" pos:end="121:47">(<argument pos:start="121:32" pos:end="121:34"><expr pos:start="121:32" pos:end="121:34"><name pos:start="121:32" pos:end="121:34">cmd</name></expr></argument>, <argument pos:start="121:37" pos:end="121:46"><expr pos:start="121:37" pos:end="121:46"><literal type="string" pos:start="121:37" pos:end="121:46">"RTSPPort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="121:50" pos:end="139:9">{<block_content pos:start="123:13" pos:end="137:53">

            <expr_stmt pos:start="123:13" pos:end="123:42"><expr pos:start="123:13" pos:end="123:41"><call pos:start="123:13" pos:end="123:41"><name pos:start="123:13" pos:end="123:19">get_arg</name><argument_list pos:start="123:20" pos:end="123:41">(<argument pos:start="123:21" pos:end="123:23"><expr pos:start="123:21" pos:end="123:23"><name pos:start="123:21" pos:end="123:23">arg</name></expr></argument>, <argument pos:start="123:26" pos:end="123:36"><expr pos:start="123:26" pos:end="123:36"><sizeof pos:start="123:26" pos:end="123:36">sizeof<argument_list pos:start="123:32" pos:end="123:36">(<argument pos:start="123:33" pos:end="123:35"><expr pos:start="123:33" pos:end="123:35"><name pos:start="123:33" pos:end="123:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="123:39" pos:end="123:40"><expr pos:start="123:39" pos:end="123:40"><operator pos:start="123:39" pos:end="123:39">&amp;</operator><name pos:start="123:40" pos:end="123:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="125:13" pos:end="125:28"><expr pos:start="125:13" pos:end="125:27"><name pos:start="125:13" pos:end="125:15">val</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:27"><name pos:start="125:19" pos:end="125:22">atoi</name><argument_list pos:start="125:23" pos:end="125:27">(<argument pos:start="125:24" pos:end="125:26"><expr pos:start="125:24" pos:end="125:26"><name pos:start="125:24" pos:end="125:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="127:13" pos:end="135:13"><if pos:start="127:13" pos:end="135:13">if <condition pos:start="127:16" pos:end="127:39">(<expr pos:start="127:17" pos:end="127:38"><name pos:start="127:17" pos:end="127:32"><name pos:start="127:17" pos:end="127:19">val</name> <argument_list type="generic" pos:start="127:21" pos:end="127:32">&lt; <argument pos:start="127:23" pos:end="127:30"><expr pos:start="127:23" pos:end="127:30"><literal type="number" pos:start="127:23" pos:end="127:23">1</literal> <operator pos:start="127:25" pos:end="127:26">||</operator> <name pos:start="127:28" pos:end="127:30">val</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="127:34" pos:end="127:38">65536</literal></expr>)</condition> <block pos:start="127:41" pos:end="135:13">{<block_content pos:start="129:17" pos:end="133:25">

                <expr_stmt pos:start="129:17" pos:end="131:49"><expr pos:start="129:17" pos:end="131:48"><call pos:start="129:17" pos:end="131:48"><name pos:start="129:17" pos:end="129:23">fprintf</name><argument_list pos:start="129:24" pos:end="131:48">(<argument pos:start="129:25" pos:end="129:30"><expr pos:start="129:25" pos:end="129:30"><name pos:start="129:25" pos:end="129:30">stderr</name></expr></argument>, <argument pos:start="129:33" pos:end="129:59"><expr pos:start="129:33" pos:end="129:59"><literal type="string" pos:start="129:33" pos:end="129:59">"%s:%d: Invalid port: %s\n"</literal></expr></argument>,

                        <argument pos:start="131:25" pos:end="131:32"><expr pos:start="131:25" pos:end="131:32"><name pos:start="131:25" pos:end="131:32">filename</name></expr></argument>, <argument pos:start="131:35" pos:end="131:42"><expr pos:start="131:35" pos:end="131:42"><name pos:start="131:35" pos:end="131:42">line_num</name></expr></argument>, <argument pos:start="131:45" pos:end="131:47"><expr pos:start="131:45" pos:end="131:47"><name pos:start="131:45" pos:end="131:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:25"><expr pos:start="133:17" pos:end="133:24"><name pos:start="133:17" pos:end="133:22">errors</name><operator pos:start="133:23" pos:end="133:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:53"><expr pos:start="137:13" pos:end="137:52"><name pos:start="137:13" pos:end="137:33"><name pos:start="137:13" pos:end="137:24">my_rtsp_addr</name><operator pos:start="137:25" pos:end="137:25">.</operator><name pos:start="137:26" pos:end="137:33">sin_port</name></name> <operator pos:start="137:35" pos:end="137:35">=</operator> <call pos:start="137:37" pos:end="137:52"><name pos:start="137:37" pos:end="137:41">htons</name><argument_list pos:start="137:42" pos:end="137:52">(<argument pos:start="137:43" pos:end="137:51"><expr pos:start="137:43" pos:end="137:51"><call pos:start="137:43" pos:end="137:51"><name pos:start="137:43" pos:end="137:46">atoi</name><argument_list pos:start="137:47" pos:end="137:51">(<argument pos:start="137:48" pos:end="137:50"><expr pos:start="137:48" pos:end="137:50"><name pos:start="137:48" pos:end="137:50">arg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="139:11" pos:end="153:9">else if <condition pos:start="139:19" pos:end="139:55">(<expr pos:start="139:20" pos:end="139:54"><operator pos:start="139:20" pos:end="139:20">!</operator><call pos:start="139:21" pos:end="139:54"><name pos:start="139:21" pos:end="139:30">strcasecmp</name><argument_list pos:start="139:31" pos:end="139:54">(<argument pos:start="139:32" pos:end="139:34"><expr pos:start="139:32" pos:end="139:34"><name pos:start="139:32" pos:end="139:34">cmd</name></expr></argument>, <argument pos:start="139:37" pos:end="139:53"><expr pos:start="139:37" pos:end="139:53"><literal type="string" pos:start="139:37" pos:end="139:53">"RTSPBindAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="139:57" pos:end="153:9">{<block_content pos:start="141:13" pos:end="151:13">

            <expr_stmt pos:start="141:13" pos:end="141:42"><expr pos:start="141:13" pos:end="141:41"><call pos:start="141:13" pos:end="141:41"><name pos:start="141:13" pos:end="141:19">get_arg</name><argument_list pos:start="141:20" pos:end="141:41">(<argument pos:start="141:21" pos:end="141:23"><expr pos:start="141:21" pos:end="141:23"><name pos:start="141:21" pos:end="141:23">arg</name></expr></argument>, <argument pos:start="141:26" pos:end="141:36"><expr pos:start="141:26" pos:end="141:36"><sizeof pos:start="141:26" pos:end="141:36">sizeof<argument_list pos:start="141:32" pos:end="141:36">(<argument pos:start="141:33" pos:end="141:35"><expr pos:start="141:33" pos:end="141:35"><name pos:start="141:33" pos:end="141:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="141:39" pos:end="141:40"><expr pos:start="141:39" pos:end="141:40"><operator pos:start="141:39" pos:end="141:39">&amp;</operator><name pos:start="141:40" pos:end="141:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="143:13" pos:end="151:13"><if pos:start="143:13" pos:end="151:13">if <condition pos:start="143:16" pos:end="143:63">(<expr pos:start="143:17" pos:end="143:62"><call pos:start="143:17" pos:end="143:57"><name pos:start="143:17" pos:end="143:28">resolve_host</name><argument_list pos:start="143:29" pos:end="143:57">(<argument pos:start="143:30" pos:end="143:51"><expr pos:start="143:30" pos:end="143:51"><operator pos:start="143:30" pos:end="143:30">&amp;</operator><name pos:start="143:31" pos:end="143:51"><name pos:start="143:31" pos:end="143:42">my_rtsp_addr</name><operator pos:start="143:43" pos:end="143:43">.</operator><name pos:start="143:44" pos:end="143:51">sin_addr</name></name></expr></argument>, <argument pos:start="143:54" pos:end="143:56"><expr pos:start="143:54" pos:end="143:56"><name pos:start="143:54" pos:end="143:56">arg</name></expr></argument>)</argument_list></call> <operator pos:start="143:59" pos:end="143:60">!=</operator> <literal type="number" pos:start="143:62" pos:end="143:62">0</literal></expr>)</condition> <block pos:start="143:65" pos:end="151:13">{<block_content pos:start="145:17" pos:end="149:25">

                <expr_stmt pos:start="145:17" pos:end="147:49"><expr pos:start="145:17" pos:end="147:48"><call pos:start="145:17" pos:end="147:48"><name pos:start="145:17" pos:end="145:23">fprintf</name><argument_list pos:start="145:24" pos:end="147:48">(<argument pos:start="145:25" pos:end="145:30"><expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:30">stderr</name></expr></argument>, <argument pos:start="145:33" pos:end="145:70"><expr pos:start="145:33" pos:end="145:70"><literal type="string" pos:start="145:33" pos:end="145:70">"%s:%d: Invalid host/IP address: %s\n"</literal></expr></argument>,

                        <argument pos:start="147:25" pos:end="147:32"><expr pos:start="147:25" pos:end="147:32"><name pos:start="147:25" pos:end="147:32">filename</name></expr></argument>, <argument pos:start="147:35" pos:end="147:42"><expr pos:start="147:35" pos:end="147:42"><name pos:start="147:35" pos:end="147:42">line_num</name></expr></argument>, <argument pos:start="147:45" pos:end="147:47"><expr pos:start="147:45" pos:end="147:47"><name pos:start="147:45" pos:end="147:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="149:17" pos:end="149:25"><expr pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:22">errors</name><operator pos:start="149:23" pos:end="149:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="153:11" pos:end="171:9">else if <condition pos:start="153:19" pos:end="153:58">(<expr pos:start="153:20" pos:end="153:57"><operator pos:start="153:20" pos:end="153:20">!</operator><call pos:start="153:21" pos:end="153:57"><name pos:start="153:21" pos:end="153:30">strcasecmp</name><argument_list pos:start="153:31" pos:end="153:57">(<argument pos:start="153:32" pos:end="153:34"><expr pos:start="153:32" pos:end="153:34"><name pos:start="153:32" pos:end="153:34">cmd</name></expr></argument>, <argument pos:start="153:37" pos:end="153:56"><expr pos:start="153:37" pos:end="153:56"><literal type="string" pos:start="153:37" pos:end="153:56">"MaxHTTPConnections"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:60" pos:end="171:9">{<block_content pos:start="155:13" pos:end="169:42">

            <expr_stmt pos:start="155:13" pos:end="155:42"><expr pos:start="155:13" pos:end="155:41"><call pos:start="155:13" pos:end="155:41"><name pos:start="155:13" pos:end="155:19">get_arg</name><argument_list pos:start="155:20" pos:end="155:41">(<argument pos:start="155:21" pos:end="155:23"><expr pos:start="155:21" pos:end="155:23"><name pos:start="155:21" pos:end="155:23">arg</name></expr></argument>, <argument pos:start="155:26" pos:end="155:36"><expr pos:start="155:26" pos:end="155:36"><sizeof pos:start="155:26" pos:end="155:36">sizeof<argument_list pos:start="155:32" pos:end="155:36">(<argument pos:start="155:33" pos:end="155:35"><expr pos:start="155:33" pos:end="155:35"><name pos:start="155:33" pos:end="155:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="155:39" pos:end="155:40"><expr pos:start="155:39" pos:end="155:40"><operator pos:start="155:39" pos:end="155:39">&amp;</operator><name pos:start="155:40" pos:end="155:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:28"><expr pos:start="157:13" pos:end="157:27"><name pos:start="157:13" pos:end="157:15">val</name> <operator pos:start="157:17" pos:end="157:17">=</operator> <call pos:start="157:19" pos:end="157:27"><name pos:start="157:19" pos:end="157:22">atoi</name><argument_list pos:start="157:23" pos:end="157:27">(<argument pos:start="157:24" pos:end="157:26"><expr pos:start="157:24" pos:end="157:26"><name pos:start="157:24" pos:end="157:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="159:13" pos:end="167:13"><if pos:start="159:13" pos:end="167:13">if <condition pos:start="159:16" pos:end="159:39">(<expr pos:start="159:17" pos:end="159:38"><name pos:start="159:17" pos:end="159:32"><name pos:start="159:17" pos:end="159:19">val</name> <argument_list type="generic" pos:start="159:21" pos:end="159:32">&lt; <argument pos:start="159:23" pos:end="159:30"><expr pos:start="159:23" pos:end="159:30"><literal type="number" pos:start="159:23" pos:end="159:23">1</literal> <operator pos:start="159:25" pos:end="159:26">||</operator> <name pos:start="159:28" pos:end="159:30">val</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="159:34" pos:end="159:38">65536</literal></expr>)</condition> <block pos:start="159:41" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:25">

                <expr_stmt pos:start="161:17" pos:end="163:49"><expr pos:start="161:17" pos:end="163:48"><call pos:start="161:17" pos:end="163:48"><name pos:start="161:17" pos:end="161:23">fprintf</name><argument_list pos:start="161:24" pos:end="163:48">(<argument pos:start="161:25" pos:end="161:30"><expr pos:start="161:25" pos:end="161:30"><name pos:start="161:25" pos:end="161:30">stderr</name></expr></argument>, <argument pos:start="161:33" pos:end="161:73"><expr pos:start="161:33" pos:end="161:73"><literal type="string" pos:start="161:33" pos:end="161:73">"%s:%d: Invalid MaxHTTPConnections: %s\n"</literal></expr></argument>,

                        <argument pos:start="163:25" pos:end="163:32"><expr pos:start="163:25" pos:end="163:32"><name pos:start="163:25" pos:end="163:32">filename</name></expr></argument>, <argument pos:start="163:35" pos:end="163:42"><expr pos:start="163:35" pos:end="163:42"><name pos:start="163:35" pos:end="163:42">line_num</name></expr></argument>, <argument pos:start="163:45" pos:end="163:47"><expr pos:start="163:45" pos:end="163:47"><name pos:start="163:45" pos:end="163:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="165:17" pos:end="165:25"><expr pos:start="165:17" pos:end="165:24"><name pos:start="165:17" pos:end="165:22">errors</name><operator pos:start="165:23" pos:end="165:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="169:13" pos:end="169:42"><expr pos:start="169:13" pos:end="169:41"><name pos:start="169:13" pos:end="169:35">nb_max_http_connections</name> <operator pos:start="169:37" pos:end="169:37">=</operator> <name pos:start="169:39" pos:end="169:41">val</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="171:11" pos:end="191:9">else if <condition pos:start="171:19" pos:end="171:50">(<expr pos:start="171:20" pos:end="171:49"><operator pos:start="171:20" pos:end="171:20">!</operator><call pos:start="171:21" pos:end="171:49"><name pos:start="171:21" pos:end="171:30">strcasecmp</name><argument_list pos:start="171:31" pos:end="171:49">(<argument pos:start="171:32" pos:end="171:34"><expr pos:start="171:32" pos:end="171:34"><name pos:start="171:32" pos:end="171:34">cmd</name></expr></argument>, <argument pos:start="171:37" pos:end="171:48"><expr pos:start="171:37" pos:end="171:48"><literal type="string" pos:start="171:37" pos:end="171:48">"MaxClients"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="171:52" pos:end="191:9">{<block_content pos:start="173:13" pos:end="189:13">

            <expr_stmt pos:start="173:13" pos:end="173:42"><expr pos:start="173:13" pos:end="173:41"><call pos:start="173:13" pos:end="173:41"><name pos:start="173:13" pos:end="173:19">get_arg</name><argument_list pos:start="173:20" pos:end="173:41">(<argument pos:start="173:21" pos:end="173:23"><expr pos:start="173:21" pos:end="173:23"><name pos:start="173:21" pos:end="173:23">arg</name></expr></argument>, <argument pos:start="173:26" pos:end="173:36"><expr pos:start="173:26" pos:end="173:36"><sizeof pos:start="173:26" pos:end="173:36">sizeof<argument_list pos:start="173:32" pos:end="173:36">(<argument pos:start="173:33" pos:end="173:35"><expr pos:start="173:33" pos:end="173:35"><name pos:start="173:33" pos:end="173:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="173:39" pos:end="173:40"><expr pos:start="173:39" pos:end="173:40"><operator pos:start="173:39" pos:end="173:39">&amp;</operator><name pos:start="173:40" pos:end="173:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:28"><expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:15">val</name> <operator pos:start="175:17" pos:end="175:17">=</operator> <call pos:start="175:19" pos:end="175:27"><name pos:start="175:19" pos:end="175:22">atoi</name><argument_list pos:start="175:23" pos:end="175:27">(<argument pos:start="175:24" pos:end="175:26"><expr pos:start="175:24" pos:end="175:26"><name pos:start="175:24" pos:end="175:26">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="177:13" pos:end="189:13"><if pos:start="177:13" pos:end="185:13">if <condition pos:start="177:16" pos:end="177:57">(<expr pos:start="177:17" pos:end="177:56"><name pos:start="177:17" pos:end="177:32"><name pos:start="177:17" pos:end="177:19">val</name> <argument_list type="generic" pos:start="177:21" pos:end="177:32">&lt; <argument pos:start="177:23" pos:end="177:30"><expr pos:start="177:23" pos:end="177:30"><literal type="number" pos:start="177:23" pos:end="177:23">1</literal> <operator pos:start="177:25" pos:end="177:26">||</operator> <name pos:start="177:28" pos:end="177:30">val</name></expr></argument> &gt;</argument_list></name> <name pos:start="177:34" pos:end="177:56">nb_max_http_connections</name></expr>)</condition> <block pos:start="177:59" pos:end="185:13">{<block_content pos:start="179:17" pos:end="183:25">

                <expr_stmt pos:start="179:17" pos:end="181:49"><expr pos:start="179:17" pos:end="181:48"><call pos:start="179:17" pos:end="181:48"><name pos:start="179:17" pos:end="179:23">fprintf</name><argument_list pos:start="179:24" pos:end="181:48">(<argument pos:start="179:25" pos:end="179:30"><expr pos:start="179:25" pos:end="179:30"><name pos:start="179:25" pos:end="179:30">stderr</name></expr></argument>, <argument pos:start="179:33" pos:end="179:65"><expr pos:start="179:33" pos:end="179:65"><literal type="string" pos:start="179:33" pos:end="179:65">"%s:%d: Invalid MaxClients: %s\n"</literal></expr></argument>,

                        <argument pos:start="181:25" pos:end="181:32"><expr pos:start="181:25" pos:end="181:32"><name pos:start="181:25" pos:end="181:32">filename</name></expr></argument>, <argument pos:start="181:35" pos:end="181:42"><expr pos:start="181:35" pos:end="181:42"><name pos:start="181:35" pos:end="181:42">line_num</name></expr></argument>, <argument pos:start="181:45" pos:end="181:47"><expr pos:start="181:45" pos:end="181:47"><name pos:start="181:45" pos:end="181:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:25"><expr pos:start="183:17" pos:end="183:24"><name pos:start="183:17" pos:end="183:22">errors</name><operator pos:start="183:23" pos:end="183:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="189:13">else <block pos:start="185:20" pos:end="189:13">{<block_content pos:start="187:17" pos:end="187:41">

                <expr_stmt pos:start="187:17" pos:end="187:41"><expr pos:start="187:17" pos:end="187:40"><name pos:start="187:17" pos:end="187:34">nb_max_connections</name> <operator pos:start="187:36" pos:end="187:36">=</operator> <name pos:start="187:38" pos:end="187:40">val</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="191:11" pos:end="211:9">else if <condition pos:start="191:19" pos:end="191:52">(<expr pos:start="191:20" pos:end="191:51"><operator pos:start="191:20" pos:end="191:20">!</operator><call pos:start="191:21" pos:end="191:51"><name pos:start="191:21" pos:end="191:30">strcasecmp</name><argument_list pos:start="191:31" pos:end="191:51">(<argument pos:start="191:32" pos:end="191:34"><expr pos:start="191:32" pos:end="191:34"><name pos:start="191:32" pos:end="191:34">cmd</name></expr></argument>, <argument pos:start="191:37" pos:end="191:50"><expr pos:start="191:37" pos:end="191:50"><literal type="string" pos:start="191:37" pos:end="191:50">"MaxBandwidth"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="191:54" pos:end="211:9">{<block_content pos:start="193:13" pos:end="209:38">

            <decl_stmt pos:start="193:13" pos:end="193:26"><decl pos:start="193:13" pos:end="193:25"><type pos:start="193:13" pos:end="193:19"><name pos:start="193:13" pos:end="193:19">int64_t</name></type> <name pos:start="193:21" pos:end="193:25">llval</name></decl>;</decl_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:42"><expr pos:start="195:13" pos:end="195:41"><call pos:start="195:13" pos:end="195:41"><name pos:start="195:13" pos:end="195:19">get_arg</name><argument_list pos:start="195:20" pos:end="195:41">(<argument pos:start="195:21" pos:end="195:23"><expr pos:start="195:21" pos:end="195:23"><name pos:start="195:21" pos:end="195:23">arg</name></expr></argument>, <argument pos:start="195:26" pos:end="195:36"><expr pos:start="195:26" pos:end="195:36"><sizeof pos:start="195:26" pos:end="195:36">sizeof<argument_list pos:start="195:32" pos:end="195:36">(<argument pos:start="195:33" pos:end="195:35"><expr pos:start="195:33" pos:end="195:35"><name pos:start="195:33" pos:end="195:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="195:39" pos:end="195:40"><expr pos:start="195:39" pos:end="195:40"><operator pos:start="195:39" pos:end="195:39">&amp;</operator><name pos:start="195:40" pos:end="195:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:31"><expr pos:start="197:13" pos:end="197:30"><name pos:start="197:13" pos:end="197:17">llval</name> <operator pos:start="197:19" pos:end="197:19">=</operator> <call pos:start="197:21" pos:end="197:30"><name pos:start="197:21" pos:end="197:25">atoll</name><argument_list pos:start="197:26" pos:end="197:30">(<argument pos:start="197:27" pos:end="197:29"><expr pos:start="197:27" pos:end="197:29"><name pos:start="197:27" pos:end="197:29">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="199:13" pos:end="209:38"><if pos:start="199:13" pos:end="207:13">if <condition pos:start="199:16" pos:end="199:47">(<expr pos:start="199:17" pos:end="199:46"><name pos:start="199:17" pos:end="199:37"><name pos:start="199:17" pos:end="199:21">llval</name> <argument_list type="generic" pos:start="199:23" pos:end="199:37">&lt; <argument pos:start="199:25" pos:end="199:35"><expr pos:start="199:25" pos:end="199:35"><literal type="number" pos:start="199:25" pos:end="199:26">10</literal> <operator pos:start="199:28" pos:end="199:29">||</operator> <name pos:start="199:31" pos:end="199:35">llval</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="199:39" pos:end="199:46">10000000</literal></expr>)</condition> <block pos:start="199:49" pos:end="207:13">{<block_content pos:start="201:17" pos:end="205:25">

                <expr_stmt pos:start="201:17" pos:end="203:49"><expr pos:start="201:17" pos:end="203:48"><call pos:start="201:17" pos:end="203:48"><name pos:start="201:17" pos:end="201:23">fprintf</name><argument_list pos:start="201:24" pos:end="203:48">(<argument pos:start="201:25" pos:end="201:30"><expr pos:start="201:25" pos:end="201:30"><name pos:start="201:25" pos:end="201:30">stderr</name></expr></argument>, <argument pos:start="201:33" pos:end="201:67"><expr pos:start="201:33" pos:end="201:67"><literal type="string" pos:start="201:33" pos:end="201:67">"%s:%d: Invalid MaxBandwidth: %s\n"</literal></expr></argument>,

                        <argument pos:start="203:25" pos:end="203:32"><expr pos:start="203:25" pos:end="203:32"><name pos:start="203:25" pos:end="203:32">filename</name></expr></argument>, <argument pos:start="203:35" pos:end="203:42"><expr pos:start="203:35" pos:end="203:42"><name pos:start="203:35" pos:end="203:42">line_num</name></expr></argument>, <argument pos:start="203:45" pos:end="203:47"><expr pos:start="203:45" pos:end="203:47"><name pos:start="203:45" pos:end="203:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:25"><expr pos:start="205:17" pos:end="205:24"><name pos:start="205:17" pos:end="205:22">errors</name><operator pos:start="205:23" pos:end="205:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="207:15" pos:end="209:38">else<block type="pseudo" pos:start="209:17" pos:end="209:38"><block_content pos:start="209:17" pos:end="209:38">

                <expr_stmt pos:start="209:17" pos:end="209:38"><expr pos:start="209:17" pos:end="209:37"><name pos:start="209:17" pos:end="209:29">max_bandwidth</name> <operator pos:start="209:31" pos:end="209:31">=</operator> <name pos:start="209:33" pos:end="209:37">llval</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="211:11" pos:end="217:9">else if <condition pos:start="211:19" pos:end="211:49">(<expr pos:start="211:20" pos:end="211:48"><operator pos:start="211:20" pos:end="211:20">!</operator><call pos:start="211:21" pos:end="211:48"><name pos:start="211:21" pos:end="211:30">strcasecmp</name><argument_list pos:start="211:31" pos:end="211:48">(<argument pos:start="211:32" pos:end="211:34"><expr pos:start="211:32" pos:end="211:34"><name pos:start="211:32" pos:end="211:34">cmd</name></expr></argument>, <argument pos:start="211:37" pos:end="211:47"><expr pos:start="211:37" pos:end="211:47"><literal type="string" pos:start="211:37" pos:end="211:47">"CustomLog"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="211:51" pos:end="217:9">{<block_content pos:start="213:13" pos:end="215:62">

            <if_stmt pos:start="213:13" pos:end="215:62"><if pos:start="213:13" pos:end="215:62">if <condition pos:start="213:16" pos:end="213:32">(<expr pos:start="213:17" pos:end="213:31"><operator pos:start="213:17" pos:end="213:17">!</operator><name pos:start="213:18" pos:end="213:31">ffserver_debug</name></expr>)</condition><block type="pseudo" pos:start="215:17" pos:end="215:62"><block_content pos:start="215:17" pos:end="215:62">

                <expr_stmt pos:start="215:17" pos:end="215:62"><expr pos:start="215:17" pos:end="215:61"><call pos:start="215:17" pos:end="215:61"><name pos:start="215:17" pos:end="215:23">get_arg</name><argument_list pos:start="215:24" pos:end="215:61">(<argument pos:start="215:25" pos:end="215:35"><expr pos:start="215:25" pos:end="215:35"><name pos:start="215:25" pos:end="215:35">logfilename</name></expr></argument>, <argument pos:start="215:38" pos:end="215:56"><expr pos:start="215:38" pos:end="215:56"><sizeof pos:start="215:38" pos:end="215:56">sizeof<argument_list pos:start="215:44" pos:end="215:56">(<argument pos:start="215:45" pos:end="215:55"><expr pos:start="215:45" pos:end="215:55"><name pos:start="215:45" pos:end="215:55">logfilename</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="215:59" pos:end="215:60"><expr pos:start="215:59" pos:end="215:60"><operator pos:start="215:59" pos:end="215:59">&amp;</operator><name pos:start="215:60" pos:end="215:60">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="217:11" pos:end="291:9">else if <condition pos:start="217:19" pos:end="217:45">(<expr pos:start="217:20" pos:end="217:44"><operator pos:start="217:20" pos:end="217:20">!</operator><call pos:start="217:21" pos:end="217:44"><name pos:start="217:21" pos:end="217:30">strcasecmp</name><argument_list pos:start="217:31" pos:end="217:44">(<argument pos:start="217:32" pos:end="217:34"><expr pos:start="217:32" pos:end="217:34"><name pos:start="217:32" pos:end="217:34">cmd</name></expr></argument>, <argument pos:start="217:37" pos:end="217:43"><expr pos:start="217:37" pos:end="217:43"><literal type="string" pos:start="217:37" pos:end="217:43">"&lt;Feed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="217:47" pos:end="291:9">{<block_content pos:start="223:13" pos:end="289:13">

            <comment type="block" format="doxygen" pos:start="219:13" pos:end="219:59">/*********************************************/</comment>

            <comment type="block" pos:start="221:13" pos:end="221:38">/* Feed related options */</comment>

            <decl_stmt pos:start="223:13" pos:end="223:20"><decl pos:start="223:13" pos:end="223:19"><type pos:start="223:13" pos:end="223:18"><name pos:start="223:13" pos:end="223:16">char</name> <modifier pos:start="223:18" pos:end="223:18">*</modifier></type><name pos:start="223:19" pos:end="223:19">q</name></decl>;</decl_stmt>

            <if_stmt pos:start="225:13" pos:end="289:13"><if pos:start="225:13" pos:end="231:13">if <condition pos:start="225:16" pos:end="225:31">(<expr pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:22">stream</name> <operator pos:start="225:24" pos:end="225:25">||</operator> <name pos:start="225:27" pos:end="225:30">feed</name></expr>)</condition> <block pos:start="225:33" pos:end="231:13">{<block_content pos:start="227:17" pos:end="229:44">

                <expr_stmt pos:start="227:17" pos:end="229:44"><expr pos:start="227:17" pos:end="229:43"><call pos:start="227:17" pos:end="229:43"><name pos:start="227:17" pos:end="227:23">fprintf</name><argument_list pos:start="227:24" pos:end="229:43">(<argument pos:start="227:25" pos:end="227:30"><expr pos:start="227:25" pos:end="227:30"><name pos:start="227:25" pos:end="227:30">stderr</name></expr></argument>, <argument pos:start="227:33" pos:end="227:59"><expr pos:start="227:33" pos:end="227:59"><literal type="string" pos:start="227:33" pos:end="227:59">"%s:%d: Already in a tag\n"</literal></expr></argument>,

                        <argument pos:start="229:25" pos:end="229:32"><expr pos:start="229:25" pos:end="229:32"><name pos:start="229:25" pos:end="229:32">filename</name></expr></argument>, <argument pos:start="229:35" pos:end="229:42"><expr pos:start="229:35" pos:end="229:42"><name pos:start="229:35" pos:end="229:42">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="231:15" pos:end="289:13">else <block pos:start="231:20" pos:end="289:13">{<block_content pos:start="233:17" pos:end="287:45">

                <expr_stmt pos:start="233:17" pos:end="233:52"><expr pos:start="233:17" pos:end="233:51"><name pos:start="233:17" pos:end="233:20">feed</name> <operator pos:start="233:22" pos:end="233:22">=</operator> <call pos:start="233:24" pos:end="233:51"><name pos:start="233:24" pos:end="233:33">av_mallocz</name><argument_list pos:start="233:34" pos:end="233:51">(<argument pos:start="233:35" pos:end="233:50"><expr pos:start="233:35" pos:end="233:50"><sizeof pos:start="233:35" pos:end="233:50">sizeof<argument_list pos:start="233:41" pos:end="233:50">(<argument pos:start="233:42" pos:end="233:49"><expr pos:start="233:42" pos:end="233:49"><name pos:start="233:42" pos:end="233:49">FFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:68"><expr pos:start="235:17" pos:end="235:67"><call pos:start="235:17" pos:end="235:67"><name pos:start="235:17" pos:end="235:23">get_arg</name><argument_list pos:start="235:24" pos:end="235:67">(<argument pos:start="235:25" pos:end="235:38"><expr pos:start="235:25" pos:end="235:38"><name pos:start="235:25" pos:end="235:38"><name pos:start="235:25" pos:end="235:28">feed</name><operator pos:start="235:29" pos:end="235:30">-&gt;</operator><name pos:start="235:31" pos:end="235:38">filename</name></name></expr></argument>, <argument pos:start="235:41" pos:end="235:62"><expr pos:start="235:41" pos:end="235:62"><sizeof pos:start="235:41" pos:end="235:62">sizeof<argument_list pos:start="235:47" pos:end="235:62">(<argument pos:start="235:48" pos:end="235:61"><expr pos:start="235:48" pos:end="235:61"><name pos:start="235:48" pos:end="235:61"><name pos:start="235:48" pos:end="235:51">feed</name><operator pos:start="235:52" pos:end="235:53">-&gt;</operator><name pos:start="235:54" pos:end="235:61">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="235:65" pos:end="235:66"><expr pos:start="235:65" pos:end="235:66"><operator pos:start="235:65" pos:end="235:65">&amp;</operator><name pos:start="235:66" pos:end="235:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:49"><expr pos:start="237:17" pos:end="237:48"><name pos:start="237:17" pos:end="237:17">q</name> <operator pos:start="237:19" pos:end="237:19">=</operator> <call pos:start="237:21" pos:end="237:48"><name pos:start="237:21" pos:end="237:27">strrchr</name><argument_list pos:start="237:28" pos:end="237:48">(<argument pos:start="237:29" pos:end="237:42"><expr pos:start="237:29" pos:end="237:42"><name pos:start="237:29" pos:end="237:42"><name pos:start="237:29" pos:end="237:32">feed</name><operator pos:start="237:33" pos:end="237:34">-&gt;</operator><name pos:start="237:35" pos:end="237:42">filename</name></name></expr></argument>, <argument pos:start="237:45" pos:end="237:47"><expr pos:start="237:45" pos:end="237:47"><literal type="char" pos:start="237:45" pos:end="237:47">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="239:17" pos:end="241:30"><if pos:start="239:17" pos:end="241:30">if <condition pos:start="239:20" pos:end="239:23">(<expr pos:start="239:21" pos:end="239:22"><operator pos:start="239:21" pos:end="239:21">*</operator><name pos:start="239:22" pos:end="239:22">q</name></expr>)</condition><block type="pseudo" pos:start="241:21" pos:end="241:30"><block_content pos:start="241:21" pos:end="241:30">

                    <expr_stmt pos:start="241:21" pos:end="241:30"><expr pos:start="241:21" pos:end="241:29"><operator pos:start="241:21" pos:end="241:21">*</operator><name pos:start="241:22" pos:end="241:22">q</name> <operator pos:start="241:24" pos:end="241:24">=</operator> <literal type="char" pos:start="241:26" pos:end="241:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <for pos:start="245:17" pos:end="257:17">for <control pos:start="245:21" pos:end="245:52">(<init pos:start="245:22" pos:end="245:36"><expr pos:start="245:22" pos:end="245:35"><name pos:start="245:22" pos:end="245:22">s</name> <operator pos:start="245:24" pos:end="245:24">=</operator> <name pos:start="245:26" pos:end="245:35">first_feed</name></expr>;</init> <condition pos:start="245:38" pos:end="245:39"><expr pos:start="245:38" pos:end="245:38"><name pos:start="245:38" pos:end="245:38">s</name></expr>;</condition> <incr pos:start="245:41" pos:end="245:51"><expr pos:start="245:41" pos:end="245:51"><name pos:start="245:41" pos:end="245:41">s</name> <operator pos:start="245:43" pos:end="245:43">=</operator> <name pos:start="245:45" pos:end="245:51"><name pos:start="245:45" pos:end="245:45">s</name><operator pos:start="245:46" pos:end="245:47">-&gt;</operator><name pos:start="245:48" pos:end="245:51">next</name></name></expr></incr>)</control> <block pos:start="245:54" pos:end="257:17">{<block_content pos:start="247:21" pos:end="255:21">

                    <if_stmt pos:start="247:21" pos:end="255:21"><if pos:start="247:21" pos:end="255:21">if <condition pos:start="247:24" pos:end="247:61">(<expr pos:start="247:25" pos:end="247:60"><operator pos:start="247:25" pos:end="247:25">!</operator><call pos:start="247:26" pos:end="247:60"><name pos:start="247:26" pos:end="247:31">strcmp</name><argument_list pos:start="247:32" pos:end="247:60">(<argument pos:start="247:33" pos:end="247:46"><expr pos:start="247:33" pos:end="247:46"><name pos:start="247:33" pos:end="247:46"><name pos:start="247:33" pos:end="247:36">feed</name><operator pos:start="247:37" pos:end="247:38">-&gt;</operator><name pos:start="247:39" pos:end="247:46">filename</name></name></expr></argument>, <argument pos:start="247:49" pos:end="247:59"><expr pos:start="247:49" pos:end="247:59"><name pos:start="247:49" pos:end="247:59"><name pos:start="247:49" pos:end="247:49">s</name><operator pos:start="247:50" pos:end="247:51">-&gt;</operator><name pos:start="247:52" pos:end="247:59">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="247:63" pos:end="255:21">{<block_content pos:start="249:25" pos:end="253:33">

                        <expr_stmt pos:start="249:25" pos:end="251:65"><expr pos:start="249:25" pos:end="251:64"><call pos:start="249:25" pos:end="251:64"><name pos:start="249:25" pos:end="249:31">fprintf</name><argument_list pos:start="249:32" pos:end="251:64">(<argument pos:start="249:33" pos:end="249:38"><expr pos:start="249:33" pos:end="249:38"><name pos:start="249:33" pos:end="249:38">stderr</name></expr></argument>, <argument pos:start="249:41" pos:end="249:79"><expr pos:start="249:41" pos:end="249:79"><literal type="string" pos:start="249:41" pos:end="249:79">"%s:%d: Feed '%s' already registered\n"</literal></expr></argument>,

                                <argument pos:start="251:33" pos:end="251:40"><expr pos:start="251:33" pos:end="251:40"><name pos:start="251:33" pos:end="251:40">filename</name></expr></argument>, <argument pos:start="251:43" pos:end="251:50"><expr pos:start="251:43" pos:end="251:50"><name pos:start="251:43" pos:end="251:50">line_num</name></expr></argument>, <argument pos:start="251:53" pos:end="251:63"><expr pos:start="251:53" pos:end="251:63"><name pos:start="251:53" pos:end="251:63"><name pos:start="251:53" pos:end="251:53">s</name><operator pos:start="251:54" pos:end="251:55">-&gt;</operator><name pos:start="251:56" pos:end="251:63">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="253:25" pos:end="253:33"><expr pos:start="253:25" pos:end="253:32"><name pos:start="253:25" pos:end="253:30">errors</name><operator pos:start="253:31" pos:end="253:32">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="261:17" pos:end="261:60"><expr pos:start="261:17" pos:end="261:59"><name pos:start="261:17" pos:end="261:25"><name pos:start="261:17" pos:end="261:20">feed</name><operator pos:start="261:21" pos:end="261:22">-&gt;</operator><name pos:start="261:23" pos:end="261:25">fmt</name></name> <operator pos:start="261:27" pos:end="261:27">=</operator> <call pos:start="261:29" pos:end="261:59"><name pos:start="261:29" pos:end="261:40">guess_format</name><argument_list pos:start="261:41" pos:end="261:59">(<argument pos:start="261:42" pos:end="261:46"><expr pos:start="261:42" pos:end="261:46"><literal type="string" pos:start="261:42" pos:end="261:46">"ffm"</literal></expr></argument>, <argument pos:start="261:49" pos:end="261:52"><expr pos:start="261:49" pos:end="261:52"><name pos:start="261:49" pos:end="261:52">NULL</name></expr></argument>, <argument pos:start="261:55" pos:end="261:58"><expr pos:start="261:55" pos:end="261:58"><name pos:start="261:55" pos:end="261:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="263:17" pos:end="263:38">/* defaut feed file */</comment>

                <expr_stmt pos:start="265:17" pos:end="267:56"><expr pos:start="265:17" pos:end="267:55"><call pos:start="265:17" pos:end="267:55"><name pos:start="265:17" pos:end="265:24">snprintf</name><argument_list pos:start="265:25" pos:end="267:55">(<argument pos:start="265:26" pos:end="265:44"><expr pos:start="265:26" pos:end="265:44"><name pos:start="265:26" pos:end="265:44"><name pos:start="265:26" pos:end="265:29">feed</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:44">feed_filename</name></name></expr></argument>, <argument pos:start="265:47" pos:end="265:73"><expr pos:start="265:47" pos:end="265:73"><sizeof pos:start="265:47" pos:end="265:73">sizeof<argument_list pos:start="265:53" pos:end="265:73">(<argument pos:start="265:54" pos:end="265:72"><expr pos:start="265:54" pos:end="265:72"><name pos:start="265:54" pos:end="265:72"><name pos:start="265:54" pos:end="265:57">feed</name><operator pos:start="265:58" pos:end="265:59">-&gt;</operator><name pos:start="265:60" pos:end="265:72">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

                         <argument pos:start="267:26" pos:end="267:38"><expr pos:start="267:26" pos:end="267:38"><literal type="string" pos:start="267:26" pos:end="267:38">"/tmp/%s.ffm"</literal></expr></argument>, <argument pos:start="267:41" pos:end="267:54"><expr pos:start="267:41" pos:end="267:54"><name pos:start="267:41" pos:end="267:54"><name pos:start="267:41" pos:end="267:44">feed</name><operator pos:start="267:45" pos:end="267:46">-&gt;</operator><name pos:start="267:47" pos:end="267:54">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="269:17" pos:end="269:54"><expr pos:start="269:17" pos:end="269:53"><name pos:start="269:17" pos:end="269:35"><name pos:start="269:17" pos:end="269:20">feed</name><operator pos:start="269:21" pos:end="269:22">-&gt;</operator><name pos:start="269:23" pos:end="269:35">feed_max_size</name></name> <operator pos:start="269:37" pos:end="269:37">=</operator> <literal type="number" pos:start="269:39" pos:end="269:39">5</literal> <operator pos:start="269:41" pos:end="269:41">*</operator> <literal type="number" pos:start="269:43" pos:end="269:46">1024</literal> <operator pos:start="269:48" pos:end="269:48">*</operator> <literal type="number" pos:start="269:50" pos:end="269:53">1024</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="271:34"><expr pos:start="271:17" pos:end="271:33"><name pos:start="271:17" pos:end="271:29"><name pos:start="271:17" pos:end="271:20">feed</name><operator pos:start="271:21" pos:end="271:22">-&gt;</operator><name pos:start="271:23" pos:end="271:29">is_feed</name></name> <operator pos:start="271:31" pos:end="271:31">=</operator> <literal type="number" pos:start="271:33" pos:end="271:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="273:17" pos:end="273:34"><expr pos:start="273:17" pos:end="273:33"><name pos:start="273:17" pos:end="273:26"><name pos:start="273:17" pos:end="273:20">feed</name><operator pos:start="273:21" pos:end="273:22">-&gt;</operator><name pos:start="273:23" pos:end="273:26">feed</name></name> <operator pos:start="273:28" pos:end="273:28">=</operator> <name pos:start="273:30" pos:end="273:33">feed</name></expr>;</expr_stmt> <comment type="block" pos:start="273:36" pos:end="273:57">/* self feeding :-) */</comment>



                <comment type="block" pos:start="277:17" pos:end="277:40">/* add in stream list */</comment>

                <expr_stmt pos:start="279:17" pos:end="279:36"><expr pos:start="279:17" pos:end="279:35"><operator pos:start="279:17" pos:end="279:17">*</operator><name pos:start="279:18" pos:end="279:28">last_stream</name> <operator pos:start="279:30" pos:end="279:30">=</operator> <name pos:start="279:32" pos:end="279:35">feed</name></expr>;</expr_stmt>

                <expr_stmt pos:start="281:17" pos:end="281:42"><expr pos:start="281:17" pos:end="281:41"><name pos:start="281:17" pos:end="281:27">last_stream</name> <operator pos:start="281:29" pos:end="281:29">=</operator> <operator pos:start="281:31" pos:end="281:31">&amp;</operator><name pos:start="281:32" pos:end="281:41"><name pos:start="281:32" pos:end="281:35">feed</name><operator pos:start="281:36" pos:end="281:37">-&gt;</operator><name pos:start="281:38" pos:end="281:41">next</name></name></expr>;</expr_stmt>

                <comment type="block" pos:start="283:17" pos:end="283:38">/* add in feed list */</comment>

                <expr_stmt pos:start="285:17" pos:end="285:34"><expr pos:start="285:17" pos:end="285:33"><operator pos:start="285:17" pos:end="285:17">*</operator><name pos:start="285:18" pos:end="285:26">last_feed</name> <operator pos:start="285:28" pos:end="285:28">=</operator> <name pos:start="285:30" pos:end="285:33">feed</name></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:45"><expr pos:start="287:17" pos:end="287:44"><name pos:start="287:17" pos:end="287:25">last_feed</name> <operator pos:start="287:27" pos:end="287:27">=</operator> <operator pos:start="287:29" pos:end="287:29">&amp;</operator><name pos:start="287:30" pos:end="287:44"><name pos:start="287:30" pos:end="287:33">feed</name><operator pos:start="287:34" pos:end="287:35">-&gt;</operator><name pos:start="287:36" pos:end="287:44">next_feed</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="291:11" pos:end="335:9">else if <condition pos:start="291:19" pos:end="291:46">(<expr pos:start="291:20" pos:end="291:45"><operator pos:start="291:20" pos:end="291:20">!</operator><call pos:start="291:21" pos:end="291:45"><name pos:start="291:21" pos:end="291:30">strcasecmp</name><argument_list pos:start="291:31" pos:end="291:45">(<argument pos:start="291:32" pos:end="291:34"><expr pos:start="291:32" pos:end="291:34"><name pos:start="291:32" pos:end="291:34">cmd</name></expr></argument>, <argument pos:start="291:37" pos:end="291:44"><expr pos:start="291:37" pos:end="291:44"><literal type="string" pos:start="291:37" pos:end="291:44">"Launch"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="291:48" pos:end="335:9">{<block_content pos:start="293:13" pos:end="333:13">

            <if_stmt pos:start="293:13" pos:end="333:13"><if pos:start="293:13" pos:end="333:13">if <condition pos:start="293:16" pos:end="293:21">(<expr pos:start="293:17" pos:end="293:20"><name pos:start="293:17" pos:end="293:20">feed</name></expr>)</condition> <block pos:start="293:23" pos:end="333:13">{<block_content pos:start="295:17" pos:end="331:66">

                <decl_stmt pos:start="295:17" pos:end="295:22"><decl pos:start="295:17" pos:end="295:21"><type pos:start="295:17" pos:end="295:19"><name pos:start="295:17" pos:end="295:19">int</name></type> <name pos:start="295:21" pos:end="295:21">i</name></decl>;</decl_stmt>



                <expr_stmt pos:start="299:17" pos:end="299:67"><expr pos:start="299:17" pos:end="299:66"><name pos:start="299:17" pos:end="299:32"><name pos:start="299:17" pos:end="299:20">feed</name><operator pos:start="299:21" pos:end="299:22">-&gt;</operator><name pos:start="299:23" pos:end="299:32">child_argv</name></name> <operator pos:start="299:34" pos:end="299:34">=</operator> <call pos:start="299:36" pos:end="299:66"><name pos:start="299:36" pos:end="299:45">av_mallocz</name><argument_list pos:start="299:46" pos:end="299:66">(<argument pos:start="299:47" pos:end="299:65"><expr pos:start="299:47" pos:end="299:65"><literal type="number" pos:start="299:47" pos:end="299:48">64</literal> <operator pos:start="299:50" pos:end="299:50">*</operator> <sizeof pos:start="299:52" pos:end="299:65">sizeof<argument_list pos:start="299:58" pos:end="299:65">(<argument pos:start="299:59" pos:end="299:64"><expr pos:start="299:59" pos:end="299:64"><name pos:start="299:59" pos:end="299:62">char</name> <operator pos:start="299:64" pos:end="299:64">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <for pos:start="303:17" pos:end="315:17">for <control pos:start="303:21" pos:end="303:40">(<init pos:start="303:22" pos:end="303:27"><expr pos:start="303:22" pos:end="303:26"><name pos:start="303:22" pos:end="303:22">i</name> <operator pos:start="303:24" pos:end="303:24">=</operator> <literal type="number" pos:start="303:26" pos:end="303:26">0</literal></expr>;</init> <condition pos:start="303:29" pos:end="303:35"><expr pos:start="303:29" pos:end="303:34"><name pos:start="303:29" pos:end="303:29">i</name> <operator pos:start="303:31" pos:end="303:31">&lt;</operator> <literal type="number" pos:start="303:33" pos:end="303:34">62</literal></expr>;</condition> <incr pos:start="303:37" pos:end="303:39"><expr pos:start="303:37" pos:end="303:39"><name pos:start="303:37" pos:end="303:37">i</name><operator pos:start="303:38" pos:end="303:39">++</operator></expr></incr>)</control> <block pos:start="303:42" pos:end="315:17">{<block_content pos:start="305:21" pos:end="313:57">

                    <expr_stmt pos:start="305:21" pos:end="305:50"><expr pos:start="305:21" pos:end="305:49"><call pos:start="305:21" pos:end="305:49"><name pos:start="305:21" pos:end="305:27">get_arg</name><argument_list pos:start="305:28" pos:end="305:49">(<argument pos:start="305:29" pos:end="305:31"><expr pos:start="305:29" pos:end="305:31"><name pos:start="305:29" pos:end="305:31">arg</name></expr></argument>, <argument pos:start="305:34" pos:end="305:44"><expr pos:start="305:34" pos:end="305:44"><sizeof pos:start="305:34" pos:end="305:44">sizeof<argument_list pos:start="305:40" pos:end="305:44">(<argument pos:start="305:41" pos:end="305:43"><expr pos:start="305:41" pos:end="305:43"><name pos:start="305:41" pos:end="305:43">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="305:47" pos:end="305:48"><expr pos:start="305:47" pos:end="305:48"><operator pos:start="305:47" pos:end="305:47">&amp;</operator><name pos:start="305:48" pos:end="305:48">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="307:21" pos:end="309:30"><if pos:start="307:21" pos:end="309:30">if <condition pos:start="307:24" pos:end="307:32">(<expr pos:start="307:25" pos:end="307:31"><operator pos:start="307:25" pos:end="307:25">!</operator><name pos:start="307:26" pos:end="307:31"><name pos:start="307:26" pos:end="307:28">arg</name><index pos:start="307:29" pos:end="307:31">[<expr pos:start="307:30" pos:end="307:30"><literal type="number" pos:start="307:30" pos:end="307:30">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="309:25" pos:end="309:30"><block_content pos:start="309:25" pos:end="309:30">

                        <break pos:start="309:25" pos:end="309:30">break;</break></block_content></block></if></if_stmt>



                    <expr_stmt pos:start="313:21" pos:end="313:57"><expr pos:start="313:21" pos:end="313:56"><name pos:start="313:21" pos:end="313:39"><name pos:start="313:21" pos:end="313:24">feed</name><operator pos:start="313:25" pos:end="313:26">-&gt;</operator><name pos:start="313:27" pos:end="313:36">child_argv</name><index pos:start="313:37" pos:end="313:39">[<expr pos:start="313:38" pos:end="313:38"><name pos:start="313:38" pos:end="313:38">i</name></expr>]</index></name> <operator pos:start="313:41" pos:end="313:41">=</operator> <call pos:start="313:43" pos:end="313:56"><name pos:start="313:43" pos:end="313:51">av_strdup</name><argument_list pos:start="313:52" pos:end="313:56">(<argument pos:start="313:53" pos:end="313:55"><expr pos:start="313:53" pos:end="313:55"><name pos:start="313:53" pos:end="313:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="319:17" pos:end="319:77"><expr pos:start="319:17" pos:end="319:76"><name pos:start="319:17" pos:end="319:35"><name pos:start="319:17" pos:end="319:20">feed</name><operator pos:start="319:21" pos:end="319:22">-&gt;</operator><name pos:start="319:23" pos:end="319:32">child_argv</name><index pos:start="319:33" pos:end="319:35">[<expr pos:start="319:34" pos:end="319:34"><name pos:start="319:34" pos:end="319:34">i</name></expr>]</index></name> <operator pos:start="319:37" pos:end="319:37">=</operator> <call pos:start="319:39" pos:end="319:76"><name pos:start="319:39" pos:end="319:47">av_malloc</name><argument_list pos:start="319:48" pos:end="319:76">(<argument pos:start="319:49" pos:end="319:75"><expr pos:start="319:49" pos:end="319:75"><literal type="number" pos:start="319:49" pos:end="319:52">30</literal> <operator pos:start="319:52" pos:end="319:52">+</operator> <call pos:start="319:54" pos:end="319:75"><name pos:start="319:54" pos:end="319:59">strlen</name><argument_list pos:start="319:60" pos:end="319:75">(<argument pos:start="319:61" pos:end="319:74"><expr pos:start="319:61" pos:end="319:74"><name pos:start="319:61" pos:end="319:74"><name pos:start="319:61" pos:end="319:64">feed</name><operator pos:start="319:65" pos:end="319:66">-&gt;</operator><name pos:start="319:67" pos:end="319:74">filename</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="323:17" pos:end="331:66"><expr pos:start="323:17" pos:end="331:65"><call pos:start="323:17" pos:end="331:65"><name pos:start="323:17" pos:end="323:24">snprintf</name><argument_list pos:start="323:25" pos:end="331:65">(<argument pos:start="323:26" pos:end="323:44"><expr pos:start="323:26" pos:end="323:44"><name pos:start="323:26" pos:end="323:44"><name pos:start="323:26" pos:end="323:29">feed</name><operator pos:start="323:30" pos:end="323:31">-&gt;</operator><name pos:start="323:32" pos:end="323:41">child_argv</name><index pos:start="323:42" pos:end="323:44">[<expr pos:start="323:43" pos:end="323:43"><name pos:start="323:43" pos:end="323:43">i</name></expr>]</index></name></expr></argument>, <argument pos:start="323:47" pos:end="323:71"><expr pos:start="323:47" pos:end="323:71"><literal type="number" pos:start="323:47" pos:end="323:49">30</literal><operator pos:start="323:49" pos:end="323:49">+</operator><call pos:start="323:50" pos:end="323:71"><name pos:start="323:50" pos:end="323:55">strlen</name><argument_list pos:start="323:56" pos:end="323:71">(<argument pos:start="323:57" pos:end="323:70"><expr pos:start="323:57" pos:end="323:70"><name pos:start="323:57" pos:end="323:70"><name pos:start="323:57" pos:end="323:60">feed</name><operator pos:start="323:61" pos:end="323:62">-&gt;</operator><name pos:start="323:63" pos:end="323:70">filename</name></name></expr></argument>)</argument_list></call></expr></argument>,

                    <argument pos:start="325:21" pos:end="325:37"><expr pos:start="325:21" pos:end="325:37"><literal type="string" pos:start="325:21" pos:end="325:37">"http://%s:%d/%s"</literal></expr></argument>,

                        <argument pos:start="327:25" pos:end="329:52"><expr pos:start="327:25" pos:end="329:52"><ternary pos:start="327:25" pos:end="329:52"><condition pos:start="327:25" pos:end="327:70"><expr pos:start="327:25" pos:end="327:68"><operator pos:start="327:25" pos:end="327:25">(</operator><name pos:start="327:26" pos:end="327:53"><name pos:start="327:26" pos:end="327:37">my_http_addr</name><operator pos:start="327:38" pos:end="327:38">.</operator><name pos:start="327:39" pos:end="327:46">sin_addr</name><operator pos:start="327:47" pos:end="327:47">.</operator><name pos:start="327:48" pos:end="327:53">s_addr</name></name> <operator pos:start="327:55" pos:end="327:56">==</operator> <name pos:start="327:58" pos:end="327:67">INADDR_ANY</name><operator pos:start="327:68" pos:end="327:68">)</operator></expr> ?</condition><then pos:start="327:72" pos:end="327:82"> <expr pos:start="327:72" pos:end="327:82"><literal type="string" pos:start="327:72" pos:end="327:82">"127.0.0.1"</literal></expr> </then><else pos:start="327:84" pos:end="329:52">:

                    <expr pos:start="329:21" pos:end="329:52"><call pos:start="329:21" pos:end="329:52"><name pos:start="329:21" pos:end="329:29">inet_ntoa</name><argument_list pos:start="329:30" pos:end="329:52">(<argument pos:start="329:31" pos:end="329:51"><expr pos:start="329:31" pos:end="329:51"><name pos:start="329:31" pos:end="329:51"><name pos:start="329:31" pos:end="329:42">my_http_addr</name><operator pos:start="329:43" pos:end="329:43">.</operator><name pos:start="329:44" pos:end="329:51">sin_addr</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

                    <argument pos:start="331:21" pos:end="331:48"><expr pos:start="331:21" pos:end="331:48"><call pos:start="331:21" pos:end="331:48"><name pos:start="331:21" pos:end="331:25">ntohs</name><argument_list pos:start="331:26" pos:end="331:48">(<argument pos:start="331:27" pos:end="331:47"><expr pos:start="331:27" pos:end="331:47"><name pos:start="331:27" pos:end="331:47"><name pos:start="331:27" pos:end="331:38">my_http_addr</name><operator pos:start="331:39" pos:end="331:39">.</operator><name pos:start="331:40" pos:end="331:47">sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="331:51" pos:end="331:64"><expr pos:start="331:51" pos:end="331:64"><name pos:start="331:51" pos:end="331:64"><name pos:start="331:51" pos:end="331:54">feed</name><operator pos:start="331:55" pos:end="331:56">-&gt;</operator><name pos:start="331:57" pos:end="331:64">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="335:11" pos:end="349:9">else if <condition pos:start="335:19" pos:end="335:52">(<expr pos:start="335:20" pos:end="335:51"><operator pos:start="335:20" pos:end="335:20">!</operator><call pos:start="335:21" pos:end="335:51"><name pos:start="335:21" pos:end="335:30">strcasecmp</name><argument_list pos:start="335:31" pos:end="335:51">(<argument pos:start="335:32" pos:end="335:34"><expr pos:start="335:32" pos:end="335:34"><name pos:start="335:32" pos:end="335:34">cmd</name></expr></argument>, <argument pos:start="335:37" pos:end="335:50"><expr pos:start="335:37" pos:end="335:50"><literal type="string" pos:start="335:37" pos:end="335:50">"ReadOnlyFile"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="335:54" pos:end="349:9">{<block_content pos:start="337:13" pos:end="347:13">

            <if_stmt pos:start="337:13" pos:end="347:13"><if pos:start="337:13" pos:end="343:13">if <condition pos:start="337:16" pos:end="337:21">(<expr pos:start="337:17" pos:end="337:20"><name pos:start="337:17" pos:end="337:20">feed</name></expr>)</condition> <block pos:start="337:23" pos:end="343:13">{<block_content pos:start="339:17" pos:end="341:35">

                <expr_stmt pos:start="339:17" pos:end="339:78"><expr pos:start="339:17" pos:end="339:77"><call pos:start="339:17" pos:end="339:77"><name pos:start="339:17" pos:end="339:23">get_arg</name><argument_list pos:start="339:24" pos:end="339:77">(<argument pos:start="339:25" pos:end="339:43"><expr pos:start="339:25" pos:end="339:43"><name pos:start="339:25" pos:end="339:43"><name pos:start="339:25" pos:end="339:28">feed</name><operator pos:start="339:29" pos:end="339:30">-&gt;</operator><name pos:start="339:31" pos:end="339:43">feed_filename</name></name></expr></argument>, <argument pos:start="339:46" pos:end="339:72"><expr pos:start="339:46" pos:end="339:72"><sizeof pos:start="339:46" pos:end="339:72">sizeof<argument_list pos:start="339:52" pos:end="339:72">(<argument pos:start="339:53" pos:end="339:71"><expr pos:start="339:53" pos:end="339:71"><name pos:start="339:53" pos:end="339:71"><name pos:start="339:53" pos:end="339:56">feed</name><operator pos:start="339:57" pos:end="339:58">-&gt;</operator><name pos:start="339:59" pos:end="339:71">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="339:75" pos:end="339:76"><expr pos:start="339:75" pos:end="339:76"><operator pos:start="339:75" pos:end="339:75">&amp;</operator><name pos:start="339:76" pos:end="339:76">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="341:35"><expr pos:start="341:17" pos:end="341:34"><name pos:start="341:17" pos:end="341:30"><name pos:start="341:17" pos:end="341:20">feed</name><operator pos:start="341:21" pos:end="341:22">-&gt;</operator><name pos:start="341:23" pos:end="341:30">readonly</name></name> <operator pos:start="341:32" pos:end="341:32">=</operator> <literal type="number" pos:start="341:34" pos:end="341:34">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="343:15" pos:end="347:13">else if <condition pos:start="343:23" pos:end="343:30">(<expr pos:start="343:24" pos:end="343:29"><name pos:start="343:24" pos:end="343:29">stream</name></expr>)</condition> <block pos:start="343:32" pos:end="347:13">{<block_content pos:start="345:17" pos:end="345:82">

                <expr_stmt pos:start="345:17" pos:end="345:82"><expr pos:start="345:17" pos:end="345:81"><call pos:start="345:17" pos:end="345:81"><name pos:start="345:17" pos:end="345:23">get_arg</name><argument_list pos:start="345:24" pos:end="345:81">(<argument pos:start="345:25" pos:end="345:45"><expr pos:start="345:25" pos:end="345:45"><name pos:start="345:25" pos:end="345:45"><name pos:start="345:25" pos:end="345:30">stream</name><operator pos:start="345:31" pos:end="345:32">-&gt;</operator><name pos:start="345:33" pos:end="345:45">feed_filename</name></name></expr></argument>, <argument pos:start="345:48" pos:end="345:76"><expr pos:start="345:48" pos:end="345:76"><sizeof pos:start="345:48" pos:end="345:76">sizeof<argument_list pos:start="345:54" pos:end="345:76">(<argument pos:start="345:55" pos:end="345:75"><expr pos:start="345:55" pos:end="345:75"><name pos:start="345:55" pos:end="345:75"><name pos:start="345:55" pos:end="345:60">stream</name><operator pos:start="345:61" pos:end="345:62">-&gt;</operator><name pos:start="345:63" pos:end="345:75">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="345:79" pos:end="345:80"><expr pos:start="345:79" pos:end="345:80"><operator pos:start="345:79" pos:end="345:79">&amp;</operator><name pos:start="345:80" pos:end="345:80">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="349:11" pos:end="359:9">else if <condition pos:start="349:19" pos:end="349:44">(<expr pos:start="349:20" pos:end="349:43"><operator pos:start="349:20" pos:end="349:20">!</operator><call pos:start="349:21" pos:end="349:43"><name pos:start="349:21" pos:end="349:30">strcasecmp</name><argument_list pos:start="349:31" pos:end="349:43">(<argument pos:start="349:32" pos:end="349:34"><expr pos:start="349:32" pos:end="349:34"><name pos:start="349:32" pos:end="349:34">cmd</name></expr></argument>, <argument pos:start="349:37" pos:end="349:42"><expr pos:start="349:37" pos:end="349:42"><literal type="string" pos:start="349:37" pos:end="349:42">"File"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="349:46" pos:end="359:9">{<block_content pos:start="351:13" pos:end="357:82">

            <if_stmt pos:start="351:13" pos:end="357:82"><if pos:start="351:13" pos:end="355:13">if <condition pos:start="351:16" pos:end="351:21">(<expr pos:start="351:17" pos:end="351:20"><name pos:start="351:17" pos:end="351:20">feed</name></expr>)</condition> <block pos:start="351:23" pos:end="355:13">{<block_content pos:start="353:17" pos:end="353:78">

                <expr_stmt pos:start="353:17" pos:end="353:78"><expr pos:start="353:17" pos:end="353:77"><call pos:start="353:17" pos:end="353:77"><name pos:start="353:17" pos:end="353:23">get_arg</name><argument_list pos:start="353:24" pos:end="353:77">(<argument pos:start="353:25" pos:end="353:43"><expr pos:start="353:25" pos:end="353:43"><name pos:start="353:25" pos:end="353:43"><name pos:start="353:25" pos:end="353:28">feed</name><operator pos:start="353:29" pos:end="353:30">-&gt;</operator><name pos:start="353:31" pos:end="353:43">feed_filename</name></name></expr></argument>, <argument pos:start="353:46" pos:end="353:72"><expr pos:start="353:46" pos:end="353:72"><sizeof pos:start="353:46" pos:end="353:72">sizeof<argument_list pos:start="353:52" pos:end="353:72">(<argument pos:start="353:53" pos:end="353:71"><expr pos:start="353:53" pos:end="353:71"><name pos:start="353:53" pos:end="353:71"><name pos:start="353:53" pos:end="353:56">feed</name><operator pos:start="353:57" pos:end="353:58">-&gt;</operator><name pos:start="353:59" pos:end="353:71">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="353:75" pos:end="353:76"><expr pos:start="353:75" pos:end="353:76"><operator pos:start="353:75" pos:end="353:75">&amp;</operator><name pos:start="353:76" pos:end="353:76">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="355:15" pos:end="357:82">else if <condition pos:start="355:23" pos:end="355:30">(<expr pos:start="355:24" pos:end="355:29"><name pos:start="355:24" pos:end="355:29">stream</name></expr>)</condition><block type="pseudo" pos:start="357:17" pos:end="357:82"><block_content pos:start="357:17" pos:end="357:82">

                <expr_stmt pos:start="357:17" pos:end="357:82"><expr pos:start="357:17" pos:end="357:81"><call pos:start="357:17" pos:end="357:81"><name pos:start="357:17" pos:end="357:23">get_arg</name><argument_list pos:start="357:24" pos:end="357:81">(<argument pos:start="357:25" pos:end="357:45"><expr pos:start="357:25" pos:end="357:45"><name pos:start="357:25" pos:end="357:45"><name pos:start="357:25" pos:end="357:30">stream</name><operator pos:start="357:31" pos:end="357:32">-&gt;</operator><name pos:start="357:33" pos:end="357:45">feed_filename</name></name></expr></argument>, <argument pos:start="357:48" pos:end="357:76"><expr pos:start="357:48" pos:end="357:76"><sizeof pos:start="357:48" pos:end="357:76">sizeof<argument_list pos:start="357:54" pos:end="357:76">(<argument pos:start="357:55" pos:end="357:75"><expr pos:start="357:55" pos:end="357:75"><name pos:start="357:55" pos:end="357:75"><name pos:start="357:55" pos:end="357:60">stream</name><operator pos:start="357:61" pos:end="357:62">-&gt;</operator><name pos:start="357:63" pos:end="357:75">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="357:79" pos:end="357:80"><expr pos:start="357:79" pos:end="357:80"><operator pos:start="357:79" pos:end="357:79">&amp;</operator><name pos:start="357:80" pos:end="357:80">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="359:11" pos:end="369:9">else if <condition pos:start="359:19" pos:end="359:48">(<expr pos:start="359:20" pos:end="359:47"><operator pos:start="359:20" pos:end="359:20">!</operator><call pos:start="359:21" pos:end="359:47"><name pos:start="359:21" pos:end="359:30">strcasecmp</name><argument_list pos:start="359:31" pos:end="359:47">(<argument pos:start="359:32" pos:end="359:34"><expr pos:start="359:32" pos:end="359:34"><name pos:start="359:32" pos:end="359:34">cmd</name></expr></argument>, <argument pos:start="359:37" pos:end="359:46"><expr pos:start="359:37" pos:end="359:46"><literal type="string" pos:start="359:37" pos:end="359:46">"Truncate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="359:50" pos:end="369:9">{<block_content pos:start="361:13" pos:end="367:13">

            <if_stmt pos:start="361:13" pos:end="367:13"><if pos:start="361:13" pos:end="367:13">if <condition pos:start="361:16" pos:end="361:21">(<expr pos:start="361:17" pos:end="361:20"><name pos:start="361:17" pos:end="361:20">feed</name></expr>)</condition> <block pos:start="361:23" pos:end="367:13">{<block_content pos:start="363:17" pos:end="365:51">

                <expr_stmt pos:start="363:17" pos:end="363:46"><expr pos:start="363:17" pos:end="363:45"><call pos:start="363:17" pos:end="363:45"><name pos:start="363:17" pos:end="363:23">get_arg</name><argument_list pos:start="363:24" pos:end="363:45">(<argument pos:start="363:25" pos:end="363:27"><expr pos:start="363:25" pos:end="363:27"><name pos:start="363:25" pos:end="363:27">arg</name></expr></argument>, <argument pos:start="363:30" pos:end="363:40"><expr pos:start="363:30" pos:end="363:40"><sizeof pos:start="363:30" pos:end="363:40">sizeof<argument_list pos:start="363:36" pos:end="363:40">(<argument pos:start="363:37" pos:end="363:39"><expr pos:start="363:37" pos:end="363:39"><name pos:start="363:37" pos:end="363:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="363:43" pos:end="363:44"><expr pos:start="363:43" pos:end="363:44"><operator pos:start="363:43" pos:end="363:43">&amp;</operator><name pos:start="363:44" pos:end="363:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="365:17" pos:end="365:51"><expr pos:start="365:17" pos:end="365:50"><name pos:start="365:17" pos:end="365:30"><name pos:start="365:17" pos:end="365:20">feed</name><operator pos:start="365:21" pos:end="365:22">-&gt;</operator><name pos:start="365:23" pos:end="365:30">truncate</name></name> <operator pos:start="365:32" pos:end="365:32">=</operator> <call pos:start="365:34" pos:end="365:50"><name pos:start="365:34" pos:end="365:39">strtod</name><argument_list pos:start="365:40" pos:end="365:50">(<argument pos:start="365:41" pos:end="365:43"><expr pos:start="365:41" pos:end="365:43"><name pos:start="365:41" pos:end="365:43">arg</name></expr></argument>, <argument pos:start="365:46" pos:end="365:49"><expr pos:start="365:46" pos:end="365:49"><name pos:start="365:46" pos:end="365:49">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="369:11" pos:end="421:9">else if <condition pos:start="369:19" pos:end="369:51">(<expr pos:start="369:20" pos:end="369:50"><operator pos:start="369:20" pos:end="369:20">!</operator><call pos:start="369:21" pos:end="369:50"><name pos:start="369:21" pos:end="369:30">strcasecmp</name><argument_list pos:start="369:31" pos:end="369:50">(<argument pos:start="369:32" pos:end="369:34"><expr pos:start="369:32" pos:end="369:34"><name pos:start="369:32" pos:end="369:34">cmd</name></expr></argument>, <argument pos:start="369:37" pos:end="369:49"><expr pos:start="369:37" pos:end="369:49"><literal type="string" pos:start="369:37" pos:end="369:49">"FileMaxSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="369:53" pos:end="421:9">{<block_content pos:start="371:13" pos:end="419:13">

            <if_stmt pos:start="371:13" pos:end="419:13"><if pos:start="371:13" pos:end="419:13">if <condition pos:start="371:16" pos:end="371:21">(<expr pos:start="371:17" pos:end="371:20"><name pos:start="371:17" pos:end="371:20">feed</name></expr>)</condition> <block pos:start="371:23" pos:end="419:13">{<block_content pos:start="373:17" pos:end="417:17">

                <decl_stmt pos:start="373:17" pos:end="373:25"><decl pos:start="373:17" pos:end="373:24"><type pos:start="373:17" pos:end="373:22"><name pos:start="373:17" pos:end="373:20">char</name> <modifier pos:start="373:22" pos:end="373:22">*</modifier></type><name pos:start="373:23" pos:end="373:24">p1</name></decl>;</decl_stmt>

                <decl_stmt pos:start="375:17" pos:end="375:29"><decl pos:start="375:17" pos:end="375:28"><type pos:start="375:17" pos:end="375:22"><name pos:start="375:17" pos:end="375:22">double</name></type> <name pos:start="375:24" pos:end="375:28">fsize</name></decl>;</decl_stmt>



                <expr_stmt pos:start="379:17" pos:end="379:46"><expr pos:start="379:17" pos:end="379:45"><call pos:start="379:17" pos:end="379:45"><name pos:start="379:17" pos:end="379:23">get_arg</name><argument_list pos:start="379:24" pos:end="379:45">(<argument pos:start="379:25" pos:end="379:27"><expr pos:start="379:25" pos:end="379:27"><name pos:start="379:25" pos:end="379:27">arg</name></expr></argument>, <argument pos:start="379:30" pos:end="379:40"><expr pos:start="379:30" pos:end="379:40"><sizeof pos:start="379:30" pos:end="379:40">sizeof<argument_list pos:start="379:36" pos:end="379:40">(<argument pos:start="379:37" pos:end="379:39"><expr pos:start="379:37" pos:end="379:39"><name pos:start="379:37" pos:end="379:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="379:43" pos:end="379:44"><expr pos:start="379:43" pos:end="379:44"><operator pos:start="379:43" pos:end="379:43">&amp;</operator><name pos:start="379:44" pos:end="379:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="381:17" pos:end="381:25"><expr pos:start="381:17" pos:end="381:24"><name pos:start="381:17" pos:end="381:18">p1</name> <operator pos:start="381:20" pos:end="381:20">=</operator> <name pos:start="381:22" pos:end="381:24">arg</name></expr>;</expr_stmt>

                <expr_stmt pos:start="383:17" pos:end="383:40"><expr pos:start="383:17" pos:end="383:39"><name pos:start="383:17" pos:end="383:21">fsize</name> <operator pos:start="383:23" pos:end="383:23">=</operator> <call pos:start="383:25" pos:end="383:39"><name pos:start="383:25" pos:end="383:30">strtod</name><argument_list pos:start="383:31" pos:end="383:39">(<argument pos:start="383:32" pos:end="383:33"><expr pos:start="383:32" pos:end="383:33"><name pos:start="383:32" pos:end="383:33">p1</name></expr></argument>, <argument pos:start="383:36" pos:end="383:38"><expr pos:start="383:36" pos:end="383:38"><operator pos:start="383:36" pos:end="383:36">&amp;</operator><name pos:start="383:37" pos:end="383:38">p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <switch pos:start="385:17" pos:end="405:17">switch<condition pos:start="385:23" pos:end="385:36">(<expr pos:start="385:24" pos:end="385:35"><call pos:start="385:24" pos:end="385:35"><name pos:start="385:24" pos:end="385:30">toupper</name><argument_list pos:start="385:31" pos:end="385:35">(<argument pos:start="385:32" pos:end="385:34"><expr pos:start="385:32" pos:end="385:34"><operator pos:start="385:32" pos:end="385:32">*</operator><name pos:start="385:33" pos:end="385:34">p1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="385:38" pos:end="405:17">{<block_content pos:start="387:17" pos:end="403:26">

                <case pos:start="387:17" pos:end="387:25">case <expr pos:start="387:22" pos:end="387:24"><literal type="char" pos:start="387:22" pos:end="387:24">'K'</literal></expr>:</case>

                    <expr_stmt pos:start="389:21" pos:end="389:34"><expr pos:start="389:21" pos:end="389:33"><name pos:start="389:21" pos:end="389:25">fsize</name> <operator pos:start="389:27" pos:end="389:28">*=</operator> <literal type="number" pos:start="389:30" pos:end="389:33">1024</literal></expr>;</expr_stmt>

                    <break pos:start="391:21" pos:end="391:26">break;</break>

                <case pos:start="393:17" pos:end="393:25">case <expr pos:start="393:22" pos:end="393:24"><literal type="char" pos:start="393:22" pos:end="393:24">'M'</literal></expr>:</case>

                    <expr_stmt pos:start="395:21" pos:end="395:41"><expr pos:start="395:21" pos:end="395:40"><name pos:start="395:21" pos:end="395:25">fsize</name> <operator pos:start="395:27" pos:end="395:28">*=</operator> <literal type="number" pos:start="395:30" pos:end="395:33">1024</literal> <operator pos:start="395:35" pos:end="395:35">*</operator> <literal type="number" pos:start="395:37" pos:end="395:40">1024</literal></expr>;</expr_stmt>

                    <break pos:start="397:21" pos:end="397:26">break;</break>

                <case pos:start="399:17" pos:end="399:25">case <expr pos:start="399:22" pos:end="399:24"><literal type="char" pos:start="399:22" pos:end="399:24">'G'</literal></expr>:</case>

                    <expr_stmt pos:start="401:21" pos:end="401:48"><expr pos:start="401:21" pos:end="401:47"><name pos:start="401:21" pos:end="401:25">fsize</name> <operator pos:start="401:27" pos:end="401:28">*=</operator> <literal type="number" pos:start="401:30" pos:end="401:33">1024</literal> <operator pos:start="401:35" pos:end="401:35">*</operator> <literal type="number" pos:start="401:37" pos:end="401:40">1024</literal> <operator pos:start="401:42" pos:end="401:42">*</operator> <literal type="number" pos:start="401:44" pos:end="401:47">1024</literal></expr>;</expr_stmt>

                    <break pos:start="403:21" pos:end="403:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="407:17" pos:end="407:53"><expr pos:start="407:17" pos:end="407:52"><name pos:start="407:17" pos:end="407:35"><name pos:start="407:17" pos:end="407:20">feed</name><operator pos:start="407:21" pos:end="407:22">-&gt;</operator><name pos:start="407:23" pos:end="407:35">feed_max_size</name></name> <operator pos:start="407:37" pos:end="407:37">=</operator> <operator pos:start="407:39" pos:end="407:39">(</operator><name pos:start="407:40" pos:end="407:46">int64_t</name><operator pos:start="407:47" pos:end="407:47">)</operator><name pos:start="407:48" pos:end="407:52">fsize</name></expr>;</expr_stmt>

                <if_stmt pos:start="409:17" pos:end="417:17"><if pos:start="409:17" pos:end="417:17">if <condition pos:start="409:20" pos:end="409:60">(<expr pos:start="409:21" pos:end="409:59"><name pos:start="409:21" pos:end="409:39"><name pos:start="409:21" pos:end="409:24">feed</name><operator pos:start="409:25" pos:end="409:26">-&gt;</operator><name pos:start="409:27" pos:end="409:39">feed_max_size</name></name> <operator pos:start="409:41" pos:end="409:41">&lt;</operator> <name pos:start="409:43" pos:end="409:57">FFM_PACKET_SIZE</name><operator pos:start="409:58" pos:end="409:58">*</operator><literal type="number" pos:start="409:59" pos:end="409:59">4</literal></expr>)</condition> <block pos:start="409:62" pos:end="417:17">{<block_content pos:start="411:21" pos:end="415:29">

                    <expr_stmt pos:start="411:21" pos:end="413:92"><expr pos:start="411:21" pos:end="413:91"><call pos:start="411:21" pos:end="413:91"><name pos:start="411:21" pos:end="411:27">fprintf</name><argument_list pos:start="411:28" pos:end="413:91">(<argument pos:start="411:29" pos:end="411:34"><expr pos:start="411:29" pos:end="411:34"><name pos:start="411:29" pos:end="411:34">stderr</name></expr></argument>, <argument pos:start="411:37" pos:end="413:51"><expr pos:start="411:37" pos:end="413:51"><literal type="string" pos:start="411:37" pos:end="411:78">"%s:%d: Feed max file size is too small, "</literal>

                            <literal type="string" pos:start="413:29" pos:end="413:51">"must be at least %d\n"</literal></expr></argument>, <argument pos:start="413:54" pos:end="413:61"><expr pos:start="413:54" pos:end="413:61"><name pos:start="413:54" pos:end="413:61">filename</name></expr></argument>, <argument pos:start="413:64" pos:end="413:71"><expr pos:start="413:64" pos:end="413:71"><name pos:start="413:64" pos:end="413:71">line_num</name></expr></argument>, <argument pos:start="413:74" pos:end="413:90"><expr pos:start="413:74" pos:end="413:90"><name pos:start="413:74" pos:end="413:88">FFM_PACKET_SIZE</name><operator pos:start="413:89" pos:end="413:89">*</operator><literal type="number" pos:start="413:90" pos:end="413:90">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="415:21" pos:end="415:29"><expr pos:start="415:21" pos:end="415:28"><name pos:start="415:21" pos:end="415:26">errors</name><operator pos:start="415:27" pos:end="415:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="421:11" pos:end="435:9">else if <condition pos:start="421:19" pos:end="421:47">(<expr pos:start="421:20" pos:end="421:46"><operator pos:start="421:20" pos:end="421:20">!</operator><call pos:start="421:21" pos:end="421:46"><name pos:start="421:21" pos:end="421:30">strcasecmp</name><argument_list pos:start="421:31" pos:end="421:46">(<argument pos:start="421:32" pos:end="421:34"><expr pos:start="421:32" pos:end="421:34"><name pos:start="421:32" pos:end="421:34">cmd</name></expr></argument>, <argument pos:start="421:37" pos:end="421:45"><expr pos:start="421:37" pos:end="421:45"><literal type="string" pos:start="421:37" pos:end="421:45">"&lt;/Feed&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="421:49" pos:end="435:9">{<block_content pos:start="423:13" pos:end="433:24">

            <if_stmt pos:start="423:13" pos:end="431:13"><if pos:start="423:13" pos:end="431:13">if <condition pos:start="423:16" pos:end="423:22">(<expr pos:start="423:17" pos:end="423:21"><operator pos:start="423:17" pos:end="423:17">!</operator><name pos:start="423:18" pos:end="423:21">feed</name></expr>)</condition> <block pos:start="423:24" pos:end="431:13">{<block_content pos:start="425:17" pos:end="429:25">

                <expr_stmt pos:start="425:17" pos:end="427:44"><expr pos:start="425:17" pos:end="427:43"><call pos:start="425:17" pos:end="427:43"><name pos:start="425:17" pos:end="425:23">fprintf</name><argument_list pos:start="425:24" pos:end="427:43">(<argument pos:start="425:25" pos:end="425:30"><expr pos:start="425:25" pos:end="425:30"><name pos:start="425:25" pos:end="425:30">stderr</name></expr></argument>, <argument pos:start="425:33" pos:end="425:78"><expr pos:start="425:33" pos:end="425:78"><literal type="string" pos:start="425:33" pos:end="425:78">"%s:%d: No corresponding &lt;Feed&gt; for &lt;/Feed&gt;\n"</literal></expr></argument>,

                        <argument pos:start="427:25" pos:end="427:32"><expr pos:start="427:25" pos:end="427:32"><name pos:start="427:25" pos:end="427:32">filename</name></expr></argument>, <argument pos:start="427:35" pos:end="427:42"><expr pos:start="427:35" pos:end="427:42"><name pos:start="427:35" pos:end="427:42">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="429:17" pos:end="429:25"><expr pos:start="429:17" pos:end="429:24"><name pos:start="429:17" pos:end="429:22">errors</name><operator pos:start="429:23" pos:end="429:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:24"><expr pos:start="433:13" pos:end="433:23"><name pos:start="433:13" pos:end="433:16">feed</name> <operator pos:start="433:18" pos:end="433:18">=</operator> <name pos:start="433:20" pos:end="433:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="435:11" pos:end="523:9">else if <condition pos:start="435:19" pos:end="435:47">(<expr pos:start="435:20" pos:end="435:46"><operator pos:start="435:20" pos:end="435:20">!</operator><call pos:start="435:21" pos:end="435:46"><name pos:start="435:21" pos:end="435:30">strcasecmp</name><argument_list pos:start="435:31" pos:end="435:46">(<argument pos:start="435:32" pos:end="435:34"><expr pos:start="435:32" pos:end="435:34"><name pos:start="435:32" pos:end="435:34">cmd</name></expr></argument>, <argument pos:start="435:37" pos:end="435:45"><expr pos:start="435:37" pos:end="435:45"><literal type="string" pos:start="435:37" pos:end="435:45">"&lt;Stream"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="435:49" pos:end="523:9">{<block_content pos:start="441:13" pos:end="521:13">

            <comment type="block" format="doxygen" pos:start="437:13" pos:end="437:59">/*********************************************/</comment>

            <comment type="block" pos:start="439:13" pos:end="439:40">/* Stream related options */</comment>

            <decl_stmt pos:start="441:13" pos:end="441:20"><decl pos:start="441:13" pos:end="441:19"><type pos:start="441:13" pos:end="441:18"><name pos:start="441:13" pos:end="441:16">char</name> <modifier pos:start="441:18" pos:end="441:18">*</modifier></type><name pos:start="441:19" pos:end="441:19">q</name></decl>;</decl_stmt>

            <if_stmt pos:start="443:13" pos:end="521:13"><if pos:start="443:13" pos:end="449:13">if <condition pos:start="443:16" pos:end="443:31">(<expr pos:start="443:17" pos:end="443:30"><name pos:start="443:17" pos:end="443:22">stream</name> <operator pos:start="443:24" pos:end="443:25">||</operator> <name pos:start="443:27" pos:end="443:30">feed</name></expr>)</condition> <block pos:start="443:33" pos:end="449:13">{<block_content pos:start="445:17" pos:end="447:44">

                <expr_stmt pos:start="445:17" pos:end="447:44"><expr pos:start="445:17" pos:end="447:43"><call pos:start="445:17" pos:end="447:43"><name pos:start="445:17" pos:end="445:23">fprintf</name><argument_list pos:start="445:24" pos:end="447:43">(<argument pos:start="445:25" pos:end="445:30"><expr pos:start="445:25" pos:end="445:30"><name pos:start="445:25" pos:end="445:30">stderr</name></expr></argument>, <argument pos:start="445:33" pos:end="445:59"><expr pos:start="445:33" pos:end="445:59"><literal type="string" pos:start="445:33" pos:end="445:59">"%s:%d: Already in a tag\n"</literal></expr></argument>,

                        <argument pos:start="447:25" pos:end="447:32"><expr pos:start="447:25" pos:end="447:32"><name pos:start="447:25" pos:end="447:32">filename</name></expr></argument>, <argument pos:start="447:35" pos:end="447:42"><expr pos:start="447:35" pos:end="447:42"><name pos:start="447:35" pos:end="447:42">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="449:15" pos:end="521:13">else <block pos:start="449:20" pos:end="521:13">{<block_content pos:start="451:17" pos:end="519:44">

                <decl_stmt pos:start="451:17" pos:end="451:28"><decl pos:start="451:17" pos:end="451:27"><type pos:start="451:17" pos:end="451:26"><name pos:start="451:17" pos:end="451:24">FFStream</name> <modifier pos:start="451:26" pos:end="451:26">*</modifier></type><name pos:start="451:27" pos:end="451:27">s</name></decl>;</decl_stmt>

                <decl_stmt pos:start="453:17" pos:end="453:37"><decl pos:start="453:17" pos:end="453:36"><type pos:start="453:17" pos:end="453:31"><specifier pos:start="453:17" pos:end="453:21">const</specifier> <name pos:start="453:23" pos:end="453:29">AVClass</name> <modifier pos:start="453:31" pos:end="453:31">*</modifier></type><name pos:start="453:32" pos:end="453:36">class</name></decl>;</decl_stmt>

                <expr_stmt pos:start="455:17" pos:end="455:54"><expr pos:start="455:17" pos:end="455:53"><name pos:start="455:17" pos:end="455:22">stream</name> <operator pos:start="455:24" pos:end="455:24">=</operator> <call pos:start="455:26" pos:end="455:53"><name pos:start="455:26" pos:end="455:35">av_mallocz</name><argument_list pos:start="455:36" pos:end="455:53">(<argument pos:start="455:37" pos:end="455:52"><expr pos:start="455:37" pos:end="455:52"><sizeof pos:start="455:37" pos:end="455:52">sizeof<argument_list pos:start="455:43" pos:end="455:52">(<argument pos:start="455:44" pos:end="455:51"><expr pos:start="455:44" pos:end="455:51"><name pos:start="455:44" pos:end="455:51">FFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="457:17" pos:end="457:72"><expr pos:start="457:17" pos:end="457:71"><call pos:start="457:17" pos:end="457:71"><name pos:start="457:17" pos:end="457:23">get_arg</name><argument_list pos:start="457:24" pos:end="457:71">(<argument pos:start="457:25" pos:end="457:40"><expr pos:start="457:25" pos:end="457:40"><name pos:start="457:25" pos:end="457:40"><name pos:start="457:25" pos:end="457:30">stream</name><operator pos:start="457:31" pos:end="457:32">-&gt;</operator><name pos:start="457:33" pos:end="457:40">filename</name></name></expr></argument>, <argument pos:start="457:43" pos:end="457:66"><expr pos:start="457:43" pos:end="457:66"><sizeof pos:start="457:43" pos:end="457:66">sizeof<argument_list pos:start="457:49" pos:end="457:66">(<argument pos:start="457:50" pos:end="457:65"><expr pos:start="457:50" pos:end="457:65"><name pos:start="457:50" pos:end="457:65"><name pos:start="457:50" pos:end="457:55">stream</name><operator pos:start="457:56" pos:end="457:57">-&gt;</operator><name pos:start="457:58" pos:end="457:65">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="457:69" pos:end="457:70"><expr pos:start="457:69" pos:end="457:70"><operator pos:start="457:69" pos:end="457:69">&amp;</operator><name pos:start="457:70" pos:end="457:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="459:17" pos:end="459:51"><expr pos:start="459:17" pos:end="459:50"><name pos:start="459:17" pos:end="459:17">q</name> <operator pos:start="459:19" pos:end="459:19">=</operator> <call pos:start="459:21" pos:end="459:50"><name pos:start="459:21" pos:end="459:27">strrchr</name><argument_list pos:start="459:28" pos:end="459:50">(<argument pos:start="459:29" pos:end="459:44"><expr pos:start="459:29" pos:end="459:44"><name pos:start="459:29" pos:end="459:44"><name pos:start="459:29" pos:end="459:34">stream</name><operator pos:start="459:35" pos:end="459:36">-&gt;</operator><name pos:start="459:37" pos:end="459:44">filename</name></name></expr></argument>, <argument pos:start="459:47" pos:end="459:49"><expr pos:start="459:47" pos:end="459:49"><literal type="char" pos:start="459:47" pos:end="459:49">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="461:17" pos:end="463:30"><if pos:start="461:17" pos:end="463:30">if <condition pos:start="461:20" pos:end="461:23">(<expr pos:start="461:21" pos:end="461:22"><operator pos:start="461:21" pos:end="461:21">*</operator><name pos:start="461:22" pos:end="461:22">q</name></expr>)</condition><block type="pseudo" pos:start="463:21" pos:end="463:30"><block_content pos:start="463:21" pos:end="463:30">

                    <expr_stmt pos:start="463:21" pos:end="463:30"><expr pos:start="463:21" pos:end="463:29"><operator pos:start="463:21" pos:end="463:21">*</operator><name pos:start="463:22" pos:end="463:22">q</name> <operator pos:start="463:24" pos:end="463:24">=</operator> <literal type="char" pos:start="463:26" pos:end="463:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <for pos:start="467:17" pos:end="479:17">for <control pos:start="467:21" pos:end="467:54">(<init pos:start="467:22" pos:end="467:38"><expr pos:start="467:22" pos:end="467:37"><name pos:start="467:22" pos:end="467:22">s</name> <operator pos:start="467:24" pos:end="467:24">=</operator> <name pos:start="467:26" pos:end="467:37">first_stream</name></expr>;</init> <condition pos:start="467:40" pos:end="467:41"><expr pos:start="467:40" pos:end="467:40"><name pos:start="467:40" pos:end="467:40">s</name></expr>;</condition> <incr pos:start="467:43" pos:end="467:53"><expr pos:start="467:43" pos:end="467:53"><name pos:start="467:43" pos:end="467:43">s</name> <operator pos:start="467:45" pos:end="467:45">=</operator> <name pos:start="467:47" pos:end="467:53"><name pos:start="467:47" pos:end="467:47">s</name><operator pos:start="467:48" pos:end="467:49">-&gt;</operator><name pos:start="467:50" pos:end="467:53">next</name></name></expr></incr>)</control> <block pos:start="467:56" pos:end="479:17">{<block_content pos:start="469:21" pos:end="477:21">

                    <if_stmt pos:start="469:21" pos:end="477:21"><if pos:start="469:21" pos:end="477:21">if <condition pos:start="469:24" pos:end="469:63">(<expr pos:start="469:25" pos:end="469:62"><operator pos:start="469:25" pos:end="469:25">!</operator><call pos:start="469:26" pos:end="469:62"><name pos:start="469:26" pos:end="469:31">strcmp</name><argument_list pos:start="469:32" pos:end="469:62">(<argument pos:start="469:33" pos:end="469:48"><expr pos:start="469:33" pos:end="469:48"><name pos:start="469:33" pos:end="469:48"><name pos:start="469:33" pos:end="469:38">stream</name><operator pos:start="469:39" pos:end="469:40">-&gt;</operator><name pos:start="469:41" pos:end="469:48">filename</name></name></expr></argument>, <argument pos:start="469:51" pos:end="469:61"><expr pos:start="469:51" pos:end="469:61"><name pos:start="469:51" pos:end="469:61"><name pos:start="469:51" pos:end="469:51">s</name><operator pos:start="469:52" pos:end="469:53">-&gt;</operator><name pos:start="469:54" pos:end="469:61">filename</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="469:65" pos:end="477:21">{<block_content pos:start="471:25" pos:end="475:33">

                        <expr_stmt pos:start="471:25" pos:end="473:65"><expr pos:start="471:25" pos:end="473:64"><call pos:start="471:25" pos:end="473:64"><name pos:start="471:25" pos:end="471:31">fprintf</name><argument_list pos:start="471:32" pos:end="473:64">(<argument pos:start="471:33" pos:end="471:38"><expr pos:start="471:33" pos:end="471:38"><name pos:start="471:33" pos:end="471:38">stderr</name></expr></argument>, <argument pos:start="471:41" pos:end="471:81"><expr pos:start="471:41" pos:end="471:81"><literal type="string" pos:start="471:41" pos:end="471:81">"%s:%d: Stream '%s' already registered\n"</literal></expr></argument>,

                                <argument pos:start="473:33" pos:end="473:40"><expr pos:start="473:33" pos:end="473:40"><name pos:start="473:33" pos:end="473:40">filename</name></expr></argument>, <argument pos:start="473:43" pos:end="473:50"><expr pos:start="473:43" pos:end="473:50"><name pos:start="473:43" pos:end="473:50">line_num</name></expr></argument>, <argument pos:start="473:53" pos:end="473:63"><expr pos:start="473:53" pos:end="473:63"><name pos:start="473:53" pos:end="473:63"><name pos:start="473:53" pos:end="473:53">s</name><operator pos:start="473:54" pos:end="473:55">-&gt;</operator><name pos:start="473:56" pos:end="473:63">filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="475:25" pos:end="475:33"><expr pos:start="475:25" pos:end="475:32"><name pos:start="475:25" pos:end="475:30">errors</name><operator pos:start="475:31" pos:end="475:32">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></for>



                <expr_stmt pos:start="483:17" pos:end="483:80"><expr pos:start="483:17" pos:end="483:79"><name pos:start="483:17" pos:end="483:27"><name pos:start="483:17" pos:end="483:22">stream</name><operator pos:start="483:23" pos:end="483:24">-&gt;</operator><name pos:start="483:25" pos:end="483:27">fmt</name></name> <operator pos:start="483:29" pos:end="483:29">=</operator> <call pos:start="483:31" pos:end="483:79"><name pos:start="483:31" pos:end="483:49">guess_stream_format</name><argument_list pos:start="483:50" pos:end="483:79">(<argument pos:start="483:51" pos:end="483:54"><expr pos:start="483:51" pos:end="483:54"><name pos:start="483:51" pos:end="483:54">NULL</name></expr></argument>, <argument pos:start="483:57" pos:end="483:72"><expr pos:start="483:57" pos:end="483:72"><name pos:start="483:57" pos:end="483:72"><name pos:start="483:57" pos:end="483:62">stream</name><operator pos:start="483:63" pos:end="483:64">-&gt;</operator><name pos:start="483:65" pos:end="483:72">filename</name></name></expr></argument>, <argument pos:start="483:75" pos:end="483:78"><expr pos:start="483:75" pos:end="483:78"><name pos:start="483:75" pos:end="483:78">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block" pos:start="485:17" pos:end="489:56">/* fetch avclass so AVOption works

                 * FIXME try to use avcodec_get_context_defaults2

                 * without changing defaults too much */</comment>

                <expr_stmt pos:start="491:17" pos:end="491:57"><expr pos:start="491:17" pos:end="491:56"><call pos:start="491:17" pos:end="491:56"><name pos:start="491:17" pos:end="491:44">avcodec_get_context_defaults</name><argument_list pos:start="491:45" pos:end="491:56">(<argument pos:start="491:46" pos:end="491:55"><expr pos:start="491:46" pos:end="491:55"><operator pos:start="491:46" pos:end="491:46">&amp;</operator><name pos:start="491:47" pos:end="491:55">video_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="493:17" pos:end="493:43"><expr pos:start="493:17" pos:end="493:42"><name pos:start="493:17" pos:end="493:21">class</name> <operator pos:start="493:23" pos:end="493:23">=</operator> <name pos:start="493:25" pos:end="493:42"><name pos:start="493:25" pos:end="493:33">video_enc</name><operator pos:start="493:34" pos:end="493:34">.</operator><name pos:start="493:35" pos:end="493:42">av_class</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:62"><expr pos:start="495:17" pos:end="495:61"><call pos:start="495:17" pos:end="495:61"><name pos:start="495:17" pos:end="495:22">memset</name><argument_list pos:start="495:23" pos:end="495:61">(<argument pos:start="495:24" pos:end="495:33"><expr pos:start="495:24" pos:end="495:33"><operator pos:start="495:24" pos:end="495:24">&amp;</operator><name pos:start="495:25" pos:end="495:33">audio_enc</name></expr></argument>, <argument pos:start="495:36" pos:end="495:36"><expr pos:start="495:36" pos:end="495:36"><literal type="number" pos:start="495:36" pos:end="495:36">0</literal></expr></argument>, <argument pos:start="495:39" pos:end="495:60"><expr pos:start="495:39" pos:end="495:60"><sizeof pos:start="495:39" pos:end="495:60">sizeof<argument_list pos:start="495:45" pos:end="495:60">(<argument pos:start="495:46" pos:end="495:59"><expr pos:start="495:46" pos:end="495:59"><name pos:start="495:46" pos:end="495:59">AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="497:17" pos:end="497:62"><expr pos:start="497:17" pos:end="497:61"><call pos:start="497:17" pos:end="497:61"><name pos:start="497:17" pos:end="497:22">memset</name><argument_list pos:start="497:23" pos:end="497:61">(<argument pos:start="497:24" pos:end="497:33"><expr pos:start="497:24" pos:end="497:33"><operator pos:start="497:24" pos:end="497:24">&amp;</operator><name pos:start="497:25" pos:end="497:33">video_enc</name></expr></argument>, <argument pos:start="497:36" pos:end="497:36"><expr pos:start="497:36" pos:end="497:36"><literal type="number" pos:start="497:36" pos:end="497:36">0</literal></expr></argument>, <argument pos:start="497:39" pos:end="497:60"><expr pos:start="497:39" pos:end="497:60"><sizeof pos:start="497:39" pos:end="497:60">sizeof<argument_list pos:start="497:45" pos:end="497:60">(<argument pos:start="497:46" pos:end="497:59"><expr pos:start="497:46" pos:end="497:59"><name pos:start="497:46" pos:end="497:59">AVCodecContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="499:17" pos:end="499:43"><expr pos:start="499:17" pos:end="499:42"><name pos:start="499:17" pos:end="499:34"><name pos:start="499:17" pos:end="499:25">audio_enc</name><operator pos:start="499:26" pos:end="499:26">.</operator><name pos:start="499:27" pos:end="499:34">av_class</name></name> <operator pos:start="499:36" pos:end="499:36">=</operator> <name pos:start="499:38" pos:end="499:42">class</name></expr>;</expr_stmt>

                <expr_stmt pos:start="501:17" pos:end="501:43"><expr pos:start="501:17" pos:end="501:42"><name pos:start="501:17" pos:end="501:34"><name pos:start="501:17" pos:end="501:25">video_enc</name><operator pos:start="501:26" pos:end="501:26">.</operator><name pos:start="501:27" pos:end="501:34">av_class</name></name> <operator pos:start="501:36" pos:end="501:36">=</operator> <name pos:start="501:38" pos:end="501:42">class</name></expr>;</expr_stmt>

                <expr_stmt pos:start="503:17" pos:end="503:41"><expr pos:start="503:17" pos:end="503:40"><name pos:start="503:17" pos:end="503:24">audio_id</name> <operator pos:start="503:26" pos:end="503:26">=</operator> <name pos:start="503:28" pos:end="503:40">CODEC_ID_NONE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="505:17" pos:end="505:41"><expr pos:start="505:17" pos:end="505:40"><name pos:start="505:17" pos:end="505:24">video_id</name> <operator pos:start="505:26" pos:end="505:26">=</operator> <name pos:start="505:28" pos:end="505:40">CODEC_ID_NONE</name></expr>;</expr_stmt>

                <if_stmt pos:start="507:17" pos:end="513:17"><if pos:start="507:17" pos:end="513:17">if <condition pos:start="507:20" pos:end="507:32">(<expr pos:start="507:21" pos:end="507:31"><name pos:start="507:21" pos:end="507:31"><name pos:start="507:21" pos:end="507:26">stream</name><operator pos:start="507:27" pos:end="507:28">-&gt;</operator><name pos:start="507:29" pos:end="507:31">fmt</name></name></expr>)</condition> <block pos:start="507:34" pos:end="513:17">{<block_content pos:start="509:21" pos:end="511:56">

                    <expr_stmt pos:start="509:21" pos:end="509:56"><expr pos:start="509:21" pos:end="509:55"><name pos:start="509:21" pos:end="509:28">audio_id</name> <operator pos:start="509:30" pos:end="509:30">=</operator> <name pos:start="509:32" pos:end="509:55"><name pos:start="509:32" pos:end="509:37">stream</name><operator pos:start="509:38" pos:end="509:39">-&gt;</operator><name pos:start="509:40" pos:end="509:42">fmt</name><operator pos:start="509:43" pos:end="509:44">-&gt;</operator><name pos:start="509:45" pos:end="509:55">audio_codec</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="511:21" pos:end="511:56"><expr pos:start="511:21" pos:end="511:55"><name pos:start="511:21" pos:end="511:28">video_id</name> <operator pos:start="511:30" pos:end="511:30">=</operator> <name pos:start="511:32" pos:end="511:55"><name pos:start="511:32" pos:end="511:37">stream</name><operator pos:start="511:38" pos:end="511:39">-&gt;</operator><name pos:start="511:40" pos:end="511:42">fmt</name><operator pos:start="511:43" pos:end="511:44">-&gt;</operator><name pos:start="511:45" pos:end="511:55">video_codec</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="517:17" pos:end="517:38"><expr pos:start="517:17" pos:end="517:37"><operator pos:start="517:17" pos:end="517:17">*</operator><name pos:start="517:18" pos:end="517:28">last_stream</name> <operator pos:start="517:30" pos:end="517:30">=</operator> <name pos:start="517:32" pos:end="517:37">stream</name></expr>;</expr_stmt>

                <expr_stmt pos:start="519:17" pos:end="519:44"><expr pos:start="519:17" pos:end="519:43"><name pos:start="519:17" pos:end="519:27">last_stream</name> <operator pos:start="519:29" pos:end="519:29">=</operator> <operator pos:start="519:31" pos:end="519:31">&amp;</operator><name pos:start="519:32" pos:end="519:43"><name pos:start="519:32" pos:end="519:37">stream</name><operator pos:start="519:38" pos:end="519:39">-&gt;</operator><name pos:start="519:40" pos:end="519:43">next</name></name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="523:11" pos:end="557:9">else if <condition pos:start="523:19" pos:end="523:44">(<expr pos:start="523:20" pos:end="523:43"><operator pos:start="523:20" pos:end="523:20">!</operator><call pos:start="523:21" pos:end="523:43"><name pos:start="523:21" pos:end="523:30">strcasecmp</name><argument_list pos:start="523:31" pos:end="523:43">(<argument pos:start="523:32" pos:end="523:34"><expr pos:start="523:32" pos:end="523:34"><name pos:start="523:32" pos:end="523:34">cmd</name></expr></argument>, <argument pos:start="523:37" pos:end="523:42"><expr pos:start="523:37" pos:end="523:42"><literal type="string" pos:start="523:37" pos:end="523:42">"Feed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="523:46" pos:end="557:9">{<block_content pos:start="525:13" pos:end="555:13">

            <expr_stmt pos:start="525:13" pos:end="525:42"><expr pos:start="525:13" pos:end="525:41"><call pos:start="525:13" pos:end="525:41"><name pos:start="525:13" pos:end="525:19">get_arg</name><argument_list pos:start="525:20" pos:end="525:41">(<argument pos:start="525:21" pos:end="525:23"><expr pos:start="525:21" pos:end="525:23"><name pos:start="525:21" pos:end="525:23">arg</name></expr></argument>, <argument pos:start="525:26" pos:end="525:36"><expr pos:start="525:26" pos:end="525:36"><sizeof pos:start="525:26" pos:end="525:36">sizeof<argument_list pos:start="525:32" pos:end="525:36">(<argument pos:start="525:33" pos:end="525:35"><expr pos:start="525:33" pos:end="525:35"><name pos:start="525:33" pos:end="525:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="525:39" pos:end="525:40"><expr pos:start="525:39" pos:end="525:40"><operator pos:start="525:39" pos:end="525:39">&amp;</operator><name pos:start="525:40" pos:end="525:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="527:13" pos:end="555:13"><if pos:start="527:13" pos:end="555:13">if <condition pos:start="527:16" pos:end="527:23">(<expr pos:start="527:17" pos:end="527:22"><name pos:start="527:17" pos:end="527:22">stream</name></expr>)</condition> <block pos:start="527:25" pos:end="555:13">{<block_content pos:start="529:17" pos:end="553:41">

                <decl_stmt pos:start="529:17" pos:end="529:32"><decl pos:start="529:17" pos:end="529:31"><type pos:start="529:17" pos:end="529:26"><name pos:start="529:17" pos:end="529:24">FFStream</name> <modifier pos:start="529:26" pos:end="529:26">*</modifier></type><name pos:start="529:27" pos:end="529:31">sfeed</name></decl>;</decl_stmt>



                <expr_stmt pos:start="533:17" pos:end="533:35"><expr pos:start="533:17" pos:end="533:34"><name pos:start="533:17" pos:end="533:21">sfeed</name> <operator pos:start="533:23" pos:end="533:23">=</operator> <name pos:start="533:25" pos:end="533:34">first_feed</name></expr>;</expr_stmt>

                <while pos:start="535:17" pos:end="543:17">while <condition pos:start="535:23" pos:end="535:37">(<expr pos:start="535:24" pos:end="535:36"><name pos:start="535:24" pos:end="535:28">sfeed</name> <operator pos:start="535:30" pos:end="535:31">!=</operator> <name pos:start="535:33" pos:end="535:36">NULL</name></expr>)</condition> <block pos:start="535:39" pos:end="543:17">{<block_content pos:start="537:21" pos:end="541:45">

                    <if_stmt pos:start="537:21" pos:end="539:30"><if pos:start="537:21" pos:end="539:30">if <condition pos:start="537:24" pos:end="537:54">(<expr pos:start="537:25" pos:end="537:53"><operator pos:start="537:25" pos:end="537:25">!</operator><call pos:start="537:26" pos:end="537:53"><name pos:start="537:26" pos:end="537:31">strcmp</name><argument_list pos:start="537:32" pos:end="537:53">(<argument pos:start="537:33" pos:end="537:47"><expr pos:start="537:33" pos:end="537:47"><name pos:start="537:33" pos:end="537:47"><name pos:start="537:33" pos:end="537:37">sfeed</name><operator pos:start="537:38" pos:end="537:39">-&gt;</operator><name pos:start="537:40" pos:end="537:47">filename</name></name></expr></argument>, <argument pos:start="537:50" pos:end="537:52"><expr pos:start="537:50" pos:end="537:52"><name pos:start="537:50" pos:end="537:52">arg</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="539:25" pos:end="539:30"><block_content pos:start="539:25" pos:end="539:30">

                        <break pos:start="539:25" pos:end="539:30">break;</break></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="541:21" pos:end="541:45"><expr pos:start="541:21" pos:end="541:44"><name pos:start="541:21" pos:end="541:25">sfeed</name> <operator pos:start="541:27" pos:end="541:27">=</operator> <name pos:start="541:29" pos:end="541:44"><name pos:start="541:29" pos:end="541:33">sfeed</name><operator pos:start="541:34" pos:end="541:35">-&gt;</operator><name pos:start="541:36" pos:end="541:44">next_feed</name></name></expr>;</expr_stmt>

                </block_content>}</block></while>

                <if_stmt pos:start="545:17" pos:end="553:41"><if pos:start="545:17" pos:end="549:53">if <condition pos:start="545:20" pos:end="545:27">(<expr pos:start="545:21" pos:end="545:26"><operator pos:start="545:21" pos:end="545:21">!</operator><name pos:start="545:22" pos:end="545:26">sfeed</name></expr>)</condition><block type="pseudo" pos:start="547:21" pos:end="549:53"><block_content pos:start="547:21" pos:end="549:53">

                    <expr_stmt pos:start="547:21" pos:end="549:53"><expr pos:start="547:21" pos:end="549:52"><call pos:start="547:21" pos:end="549:52"><name pos:start="547:21" pos:end="547:27">fprintf</name><argument_list pos:start="547:28" pos:end="549:52">(<argument pos:start="547:29" pos:end="547:34"><expr pos:start="547:29" pos:end="547:34"><name pos:start="547:29" pos:end="547:34">stderr</name></expr></argument>, <argument pos:start="547:37" pos:end="547:68"><expr pos:start="547:37" pos:end="547:68"><literal type="string" pos:start="547:37" pos:end="547:68">"%s:%d: feed '%s' not defined\n"</literal></expr></argument>,

                            <argument pos:start="549:29" pos:end="549:36"><expr pos:start="549:29" pos:end="549:36"><name pos:start="549:29" pos:end="549:36">filename</name></expr></argument>, <argument pos:start="549:39" pos:end="549:46"><expr pos:start="549:39" pos:end="549:46"><name pos:start="549:39" pos:end="549:46">line_num</name></expr></argument>, <argument pos:start="549:49" pos:end="549:51"><expr pos:start="549:49" pos:end="549:51"><name pos:start="549:49" pos:end="549:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="551:17" pos:end="553:41">else<block type="pseudo" pos:start="553:21" pos:end="553:41"><block_content pos:start="553:21" pos:end="553:41">

                    <expr_stmt pos:start="553:21" pos:end="553:41"><expr pos:start="553:21" pos:end="553:40"><name pos:start="553:21" pos:end="553:32"><name pos:start="553:21" pos:end="553:26">stream</name><operator pos:start="553:27" pos:end="553:28">-&gt;</operator><name pos:start="553:29" pos:end="553:32">feed</name></name> <operator pos:start="553:34" pos:end="553:34">=</operator> <name pos:start="553:36" pos:end="553:40">sfeed</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="557:11" pos:end="603:9">else if <condition pos:start="557:19" pos:end="557:46">(<expr pos:start="557:20" pos:end="557:45"><operator pos:start="557:20" pos:end="557:20">!</operator><call pos:start="557:21" pos:end="557:45"><name pos:start="557:21" pos:end="557:30">strcasecmp</name><argument_list pos:start="557:31" pos:end="557:45">(<argument pos:start="557:32" pos:end="557:34"><expr pos:start="557:32" pos:end="557:34"><name pos:start="557:32" pos:end="557:34">cmd</name></expr></argument>, <argument pos:start="557:37" pos:end="557:44"><expr pos:start="557:37" pos:end="557:44"><literal type="string" pos:start="557:37" pos:end="557:44">"Format"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="557:48" pos:end="603:9">{<block_content pos:start="559:13" pos:end="601:13">

            <expr_stmt pos:start="559:13" pos:end="559:42"><expr pos:start="559:13" pos:end="559:41"><call pos:start="559:13" pos:end="559:41"><name pos:start="559:13" pos:end="559:19">get_arg</name><argument_list pos:start="559:20" pos:end="559:41">(<argument pos:start="559:21" pos:end="559:23"><expr pos:start="559:21" pos:end="559:23"><name pos:start="559:21" pos:end="559:23">arg</name></expr></argument>, <argument pos:start="559:26" pos:end="559:36"><expr pos:start="559:26" pos:end="559:36"><sizeof pos:start="559:26" pos:end="559:36">sizeof<argument_list pos:start="559:32" pos:end="559:36">(<argument pos:start="559:33" pos:end="559:35"><expr pos:start="559:33" pos:end="559:35"><name pos:start="559:33" pos:end="559:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="559:39" pos:end="559:40"><expr pos:start="559:39" pos:end="559:40"><operator pos:start="559:39" pos:end="559:39">&amp;</operator><name pos:start="559:40" pos:end="559:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="561:13" pos:end="601:13"><if pos:start="561:13" pos:end="601:13">if <condition pos:start="561:16" pos:end="561:23">(<expr pos:start="561:17" pos:end="561:22"><name pos:start="561:17" pos:end="561:22">stream</name></expr>)</condition> <block pos:start="561:25" pos:end="601:13">{<block_content pos:start="563:17" pos:end="599:17">

                <if_stmt pos:start="563:17" pos:end="591:17"><if pos:start="563:17" pos:end="569:17">if <condition pos:start="563:20" pos:end="563:43">(<expr pos:start="563:21" pos:end="563:42"><operator pos:start="563:21" pos:end="563:21">!</operator><call pos:start="563:22" pos:end="563:42"><name pos:start="563:22" pos:end="563:27">strcmp</name><argument_list pos:start="563:28" pos:end="563:42">(<argument pos:start="563:29" pos:end="563:31"><expr pos:start="563:29" pos:end="563:31"><name pos:start="563:29" pos:end="563:31">arg</name></expr></argument>, <argument pos:start="563:34" pos:end="563:41"><expr pos:start="563:34" pos:end="563:41"><literal type="string" pos:start="563:34" pos:end="563:41">"status"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="563:45" pos:end="569:17">{<block_content pos:start="565:21" pos:end="567:39">

                    <expr_stmt pos:start="565:21" pos:end="565:61"><expr pos:start="565:21" pos:end="565:60"><name pos:start="565:21" pos:end="565:39"><name pos:start="565:21" pos:end="565:26">stream</name><operator pos:start="565:27" pos:end="565:28">-&gt;</operator><name pos:start="565:29" pos:end="565:39">stream_type</name></name> <operator pos:start="565:41" pos:end="565:41">=</operator> <name pos:start="565:43" pos:end="565:60">STREAM_TYPE_STATUS</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="567:21" pos:end="567:39"><expr pos:start="567:21" pos:end="567:38"><name pos:start="567:21" pos:end="567:31"><name pos:start="567:21" pos:end="567:26">stream</name><operator pos:start="567:27" pos:end="567:28">-&gt;</operator><name pos:start="567:29" pos:end="567:31">fmt</name></name> <operator pos:start="567:33" pos:end="567:33">=</operator> <name pos:start="567:35" pos:end="567:38">NULL</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="569:19" pos:end="591:17">else <block pos:start="569:24" pos:end="591:17">{<block_content pos:start="571:21" pos:end="589:21">

                    <expr_stmt pos:start="571:21" pos:end="571:59"><expr pos:start="571:21" pos:end="571:58"><name pos:start="571:21" pos:end="571:39"><name pos:start="571:21" pos:end="571:26">stream</name><operator pos:start="571:27" pos:end="571:28">-&gt;</operator><name pos:start="571:29" pos:end="571:39">stream_type</name></name> <operator pos:start="571:41" pos:end="571:41">=</operator> <name pos:start="571:43" pos:end="571:58">STREAM_TYPE_LIVE</name></expr>;</expr_stmt>

                    <comment type="block" pos:start="573:21" pos:end="573:76">/* jpeg cannot be used here, so use single frame jpeg */</comment>

                    <if_stmt pos:start="575:21" pos:end="577:45"><if pos:start="575:21" pos:end="577:45">if <condition pos:start="575:24" pos:end="575:45">(<expr pos:start="575:25" pos:end="575:44"><operator pos:start="575:25" pos:end="575:25">!</operator><call pos:start="575:26" pos:end="575:44"><name pos:start="575:26" pos:end="575:31">strcmp</name><argument_list pos:start="575:32" pos:end="575:44">(<argument pos:start="575:33" pos:end="575:35"><expr pos:start="575:33" pos:end="575:35"><name pos:start="575:33" pos:end="575:35">arg</name></expr></argument>, <argument pos:start="575:38" pos:end="575:43"><expr pos:start="575:38" pos:end="575:43"><literal type="string" pos:start="575:38" pos:end="575:43">"jpeg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="577:25" pos:end="577:45"><block_content pos:start="577:25" pos:end="577:45">

                        <expr_stmt pos:start="577:25" pos:end="577:45"><expr pos:start="577:25" pos:end="577:44"><call pos:start="577:25" pos:end="577:44"><name pos:start="577:25" pos:end="577:30">strcpy</name><argument_list pos:start="577:31" pos:end="577:44">(<argument pos:start="577:32" pos:end="577:34"><expr pos:start="577:32" pos:end="577:34"><name pos:start="577:32" pos:end="577:34">arg</name></expr></argument>, <argument pos:start="577:37" pos:end="577:43"><expr pos:start="577:37" pos:end="577:43"><literal type="string" pos:start="577:37" pos:end="577:43">"mjpeg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="579:21" pos:end="579:71"><expr pos:start="579:21" pos:end="579:70"><name pos:start="579:21" pos:end="579:31"><name pos:start="579:21" pos:end="579:26">stream</name><operator pos:start="579:27" pos:end="579:28">-&gt;</operator><name pos:start="579:29" pos:end="579:31">fmt</name></name> <operator pos:start="579:33" pos:end="579:33">=</operator> <call pos:start="579:35" pos:end="579:70"><name pos:start="579:35" pos:end="579:53">guess_stream_format</name><argument_list pos:start="579:54" pos:end="579:70">(<argument pos:start="579:55" pos:end="579:57"><expr pos:start="579:55" pos:end="579:57"><name pos:start="579:55" pos:end="579:57">arg</name></expr></argument>, <argument pos:start="579:60" pos:end="579:63"><expr pos:start="579:60" pos:end="579:63"><name pos:start="579:60" pos:end="579:63">NULL</name></expr></argument>, <argument pos:start="579:66" pos:end="579:69"><expr pos:start="579:66" pos:end="579:69"><name pos:start="579:66" pos:end="579:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="581:21" pos:end="589:21"><if pos:start="581:21" pos:end="589:21">if <condition pos:start="581:24" pos:end="581:37">(<expr pos:start="581:25" pos:end="581:36"><operator pos:start="581:25" pos:end="581:25">!</operator><name pos:start="581:26" pos:end="581:36"><name pos:start="581:26" pos:end="581:31">stream</name><operator pos:start="581:32" pos:end="581:33">-&gt;</operator><name pos:start="581:34" pos:end="581:36">fmt</name></name></expr>)</condition> <block pos:start="581:39" pos:end="589:21">{<block_content pos:start="583:25" pos:end="587:33">

                        <expr_stmt pos:start="583:25" pos:end="585:57"><expr pos:start="583:25" pos:end="585:56"><call pos:start="583:25" pos:end="585:56"><name pos:start="583:25" pos:end="583:31">fprintf</name><argument_list pos:start="583:32" pos:end="585:56">(<argument pos:start="583:33" pos:end="583:38"><expr pos:start="583:33" pos:end="583:38"><name pos:start="583:33" pos:end="583:38">stderr</name></expr></argument>, <argument pos:start="583:41" pos:end="583:69"><expr pos:start="583:41" pos:end="583:69"><literal type="string" pos:start="583:41" pos:end="583:69">"%s:%d: Unknown Format: %s\n"</literal></expr></argument>,

                                <argument pos:start="585:33" pos:end="585:40"><expr pos:start="585:33" pos:end="585:40"><name pos:start="585:33" pos:end="585:40">filename</name></expr></argument>, <argument pos:start="585:43" pos:end="585:50"><expr pos:start="585:43" pos:end="585:50"><name pos:start="585:43" pos:end="585:50">line_num</name></expr></argument>, <argument pos:start="585:53" pos:end="585:55"><expr pos:start="585:53" pos:end="585:55"><name pos:start="585:53" pos:end="585:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="587:25" pos:end="587:33"><expr pos:start="587:25" pos:end="587:32"><name pos:start="587:25" pos:end="587:30">errors</name><operator pos:start="587:31" pos:end="587:32">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="593:17" pos:end="599:17"><if pos:start="593:17" pos:end="599:17">if <condition pos:start="593:20" pos:end="593:32">(<expr pos:start="593:21" pos:end="593:31"><name pos:start="593:21" pos:end="593:31"><name pos:start="593:21" pos:end="593:26">stream</name><operator pos:start="593:27" pos:end="593:28">-&gt;</operator><name pos:start="593:29" pos:end="593:31">fmt</name></name></expr>)</condition> <block pos:start="593:34" pos:end="599:17">{<block_content pos:start="595:21" pos:end="597:56">

                    <expr_stmt pos:start="595:21" pos:end="595:56"><expr pos:start="595:21" pos:end="595:55"><name pos:start="595:21" pos:end="595:28">audio_id</name> <operator pos:start="595:30" pos:end="595:30">=</operator> <name pos:start="595:32" pos:end="595:55"><name pos:start="595:32" pos:end="595:37">stream</name><operator pos:start="595:38" pos:end="595:39">-&gt;</operator><name pos:start="595:40" pos:end="595:42">fmt</name><operator pos:start="595:43" pos:end="595:44">-&gt;</operator><name pos:start="595:45" pos:end="595:55">audio_codec</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="597:21" pos:end="597:56"><expr pos:start="597:21" pos:end="597:55"><name pos:start="597:21" pos:end="597:28">video_id</name> <operator pos:start="597:30" pos:end="597:30">=</operator> <name pos:start="597:32" pos:end="597:55"><name pos:start="597:32" pos:end="597:37">stream</name><operator pos:start="597:38" pos:end="597:39">-&gt;</operator><name pos:start="597:40" pos:end="597:42">fmt</name><operator pos:start="597:43" pos:end="597:44">-&gt;</operator><name pos:start="597:45" pos:end="597:55">video_codec</name></name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="603:11" pos:end="621:9">else if <condition pos:start="603:19" pos:end="603:51">(<expr pos:start="603:20" pos:end="603:50"><operator pos:start="603:20" pos:end="603:20">!</operator><call pos:start="603:21" pos:end="603:50"><name pos:start="603:21" pos:end="603:30">strcasecmp</name><argument_list pos:start="603:31" pos:end="603:50">(<argument pos:start="603:32" pos:end="603:34"><expr pos:start="603:32" pos:end="603:34"><name pos:start="603:32" pos:end="603:34">cmd</name></expr></argument>, <argument pos:start="603:37" pos:end="603:49"><expr pos:start="603:37" pos:end="603:49"><literal type="string" pos:start="603:37" pos:end="603:49">"InputFormat"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="603:53" pos:end="621:9">{<block_content pos:start="605:13" pos:end="619:13">

            <expr_stmt pos:start="605:13" pos:end="605:42"><expr pos:start="605:13" pos:end="605:41"><call pos:start="605:13" pos:end="605:41"><name pos:start="605:13" pos:end="605:19">get_arg</name><argument_list pos:start="605:20" pos:end="605:41">(<argument pos:start="605:21" pos:end="605:23"><expr pos:start="605:21" pos:end="605:23"><name pos:start="605:21" pos:end="605:23">arg</name></expr></argument>, <argument pos:start="605:26" pos:end="605:36"><expr pos:start="605:26" pos:end="605:36"><sizeof pos:start="605:26" pos:end="605:36">sizeof<argument_list pos:start="605:32" pos:end="605:36">(<argument pos:start="605:33" pos:end="605:35"><expr pos:start="605:33" pos:end="605:35"><name pos:start="605:33" pos:end="605:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="605:39" pos:end="605:40"><expr pos:start="605:39" pos:end="605:40"><operator pos:start="605:39" pos:end="605:39">&amp;</operator><name pos:start="605:40" pos:end="605:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="607:13" pos:end="619:13"><if pos:start="607:13" pos:end="619:13">if <condition pos:start="607:16" pos:end="607:23">(<expr pos:start="607:17" pos:end="607:22"><name pos:start="607:17" pos:end="607:22">stream</name></expr>)</condition> <block pos:start="607:25" pos:end="619:13">{<block_content pos:start="609:17" pos:end="617:17">

                <expr_stmt pos:start="609:17" pos:end="609:57"><expr pos:start="609:17" pos:end="609:56"><name pos:start="609:17" pos:end="609:28"><name pos:start="609:17" pos:end="609:22">stream</name><operator pos:start="609:23" pos:end="609:24">-&gt;</operator><name pos:start="609:25" pos:end="609:28">ifmt</name></name> <operator pos:start="609:30" pos:end="609:30">=</operator> <call pos:start="609:32" pos:end="609:56"><name pos:start="609:32" pos:end="609:51">av_find_input_format</name><argument_list pos:start="609:52" pos:end="609:56">(<argument pos:start="609:53" pos:end="609:55"><expr pos:start="609:53" pos:end="609:55"><name pos:start="609:53" pos:end="609:55">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="611:17" pos:end="617:17"><if pos:start="611:17" pos:end="617:17">if <condition pos:start="611:20" pos:end="611:34">(<expr pos:start="611:21" pos:end="611:33"><operator pos:start="611:21" pos:end="611:21">!</operator><name pos:start="611:22" pos:end="611:33"><name pos:start="611:22" pos:end="611:27">stream</name><operator pos:start="611:28" pos:end="611:29">-&gt;</operator><name pos:start="611:30" pos:end="611:33">ifmt</name></name></expr>)</condition> <block pos:start="611:36" pos:end="617:17">{<block_content pos:start="613:21" pos:end="615:53">

                    <expr_stmt pos:start="613:21" pos:end="615:53"><expr pos:start="613:21" pos:end="615:52"><call pos:start="613:21" pos:end="615:52"><name pos:start="613:21" pos:end="613:27">fprintf</name><argument_list pos:start="613:28" pos:end="615:52">(<argument pos:start="613:29" pos:end="613:34"><expr pos:start="613:29" pos:end="613:34"><name pos:start="613:29" pos:end="613:34">stderr</name></expr></argument>, <argument pos:start="613:37" pos:end="613:71"><expr pos:start="613:37" pos:end="613:71"><literal type="string" pos:start="613:37" pos:end="613:71">"%s:%d: Unknown input format: %s\n"</literal></expr></argument>,

                            <argument pos:start="615:29" pos:end="615:36"><expr pos:start="615:29" pos:end="615:36"><name pos:start="615:29" pos:end="615:36">filename</name></expr></argument>, <argument pos:start="615:39" pos:end="615:46"><expr pos:start="615:39" pos:end="615:46"><name pos:start="615:39" pos:end="615:46">line_num</name></expr></argument>, <argument pos:start="615:49" pos:end="615:51"><expr pos:start="615:49" pos:end="615:51"><name pos:start="615:49" pos:end="615:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="621:11" pos:end="637:9">else if <condition pos:start="621:19" pos:end="621:50">(<expr pos:start="621:20" pos:end="621:49"><operator pos:start="621:20" pos:end="621:20">!</operator><call pos:start="621:21" pos:end="621:49"><name pos:start="621:21" pos:end="621:30">strcasecmp</name><argument_list pos:start="621:31" pos:end="621:49">(<argument pos:start="621:32" pos:end="621:34"><expr pos:start="621:32" pos:end="621:34"><name pos:start="621:32" pos:end="621:34">cmd</name></expr></argument>, <argument pos:start="621:37" pos:end="621:48"><expr pos:start="621:37" pos:end="621:48"><literal type="string" pos:start="621:37" pos:end="621:48">"FaviconURL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="621:52" pos:end="637:9">{<block_content pos:start="623:13" pos:end="635:13">

            <if_stmt pos:start="623:13" pos:end="635:13"><if pos:start="623:13" pos:end="627:13">if <condition pos:start="623:16" pos:end="623:68">(<expr pos:start="623:17" pos:end="623:67"><name pos:start="623:17" pos:end="623:22">stream</name> <operator pos:start="623:24" pos:end="623:25">&amp;&amp;</operator> <name pos:start="623:27" pos:end="623:45"><name pos:start="623:27" pos:end="623:32">stream</name><operator pos:start="623:33" pos:end="623:34">-&gt;</operator><name pos:start="623:35" pos:end="623:45">stream_type</name></name> <operator pos:start="623:47" pos:end="623:48">==</operator> <name pos:start="623:50" pos:end="623:67">STREAM_TYPE_STATUS</name></expr>)</condition> <block pos:start="623:70" pos:end="627:13">{<block_content pos:start="625:17" pos:end="625:82">

                <expr_stmt pos:start="625:17" pos:end="625:82"><expr pos:start="625:17" pos:end="625:81"><call pos:start="625:17" pos:end="625:81"><name pos:start="625:17" pos:end="625:23">get_arg</name><argument_list pos:start="625:24" pos:end="625:81">(<argument pos:start="625:25" pos:end="625:45"><expr pos:start="625:25" pos:end="625:45"><name pos:start="625:25" pos:end="625:45"><name pos:start="625:25" pos:end="625:30">stream</name><operator pos:start="625:31" pos:end="625:32">-&gt;</operator><name pos:start="625:33" pos:end="625:45">feed_filename</name></name></expr></argument>, <argument pos:start="625:48" pos:end="625:76"><expr pos:start="625:48" pos:end="625:76"><sizeof pos:start="625:48" pos:end="625:76">sizeof<argument_list pos:start="625:54" pos:end="625:76">(<argument pos:start="625:55" pos:end="625:75"><expr pos:start="625:55" pos:end="625:75"><name pos:start="625:55" pos:end="625:75"><name pos:start="625:55" pos:end="625:60">stream</name><operator pos:start="625:61" pos:end="625:62">-&gt;</operator><name pos:start="625:63" pos:end="625:75">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="625:79" pos:end="625:80"><expr pos:start="625:79" pos:end="625:80"><operator pos:start="625:79" pos:end="625:79">&amp;</operator><name pos:start="625:80" pos:end="625:80">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="627:15" pos:end="635:13">else <block pos:start="627:20" pos:end="635:13">{<block_content pos:start="629:17" pos:end="633:25">

                <expr_stmt pos:start="629:17" pos:end="631:48"><expr pos:start="629:17" pos:end="631:47"><call pos:start="629:17" pos:end="631:47"><name pos:start="629:17" pos:end="629:23">fprintf</name><argument_list pos:start="629:24" pos:end="631:47">(<argument pos:start="629:25" pos:end="629:30"><expr pos:start="629:25" pos:end="629:30"><name pos:start="629:25" pos:end="629:30">stderr</name></expr></argument>, <argument pos:start="629:33" pos:end="629:87"><expr pos:start="629:33" pos:end="629:87"><literal type="string" pos:start="629:33" pos:end="629:87">"%s:%d: FaviconURL only permitted for status streams\n"</literal></expr></argument>,

                            <argument pos:start="631:29" pos:end="631:36"><expr pos:start="631:29" pos:end="631:36"><name pos:start="631:29" pos:end="631:36">filename</name></expr></argument>, <argument pos:start="631:39" pos:end="631:46"><expr pos:start="631:39" pos:end="631:46"><name pos:start="631:39" pos:end="631:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="633:17" pos:end="633:25"><expr pos:start="633:17" pos:end="633:24"><name pos:start="633:17" pos:end="633:22">errors</name><operator pos:start="633:23" pos:end="633:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="637:11" pos:end="643:9">else if <condition pos:start="637:19" pos:end="637:46">(<expr pos:start="637:20" pos:end="637:45"><operator pos:start="637:20" pos:end="637:20">!</operator><call pos:start="637:21" pos:end="637:45"><name pos:start="637:21" pos:end="637:30">strcasecmp</name><argument_list pos:start="637:31" pos:end="637:45">(<argument pos:start="637:32" pos:end="637:34"><expr pos:start="637:32" pos:end="637:34"><name pos:start="637:32" pos:end="637:34">cmd</name></expr></argument>, <argument pos:start="637:37" pos:end="637:44"><expr pos:start="637:37" pos:end="637:44"><literal type="string" pos:start="637:37" pos:end="637:44">"Author"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="637:48" pos:end="643:9">{<block_content pos:start="639:13" pos:end="641:68">

            <if_stmt pos:start="639:13" pos:end="641:68"><if pos:start="639:13" pos:end="641:68">if <condition pos:start="639:16" pos:end="639:23">(<expr pos:start="639:17" pos:end="639:22"><name pos:start="639:17" pos:end="639:22">stream</name></expr>)</condition><block type="pseudo" pos:start="641:17" pos:end="641:68"><block_content pos:start="641:17" pos:end="641:68">

                <expr_stmt pos:start="641:17" pos:end="641:68"><expr pos:start="641:17" pos:end="641:67"><call pos:start="641:17" pos:end="641:67"><name pos:start="641:17" pos:end="641:23">get_arg</name><argument_list pos:start="641:24" pos:end="641:67">(<argument pos:start="641:25" pos:end="641:38"><expr pos:start="641:25" pos:end="641:38"><name pos:start="641:25" pos:end="641:38"><name pos:start="641:25" pos:end="641:30">stream</name><operator pos:start="641:31" pos:end="641:32">-&gt;</operator><name pos:start="641:33" pos:end="641:38">author</name></name></expr></argument>, <argument pos:start="641:41" pos:end="641:62"><expr pos:start="641:41" pos:end="641:62"><sizeof pos:start="641:41" pos:end="641:62">sizeof<argument_list pos:start="641:47" pos:end="641:62">(<argument pos:start="641:48" pos:end="641:61"><expr pos:start="641:48" pos:end="641:61"><name pos:start="641:48" pos:end="641:61"><name pos:start="641:48" pos:end="641:53">stream</name><operator pos:start="641:54" pos:end="641:55">-&gt;</operator><name pos:start="641:56" pos:end="641:61">author</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="641:65" pos:end="641:66"><expr pos:start="641:65" pos:end="641:66"><operator pos:start="641:65" pos:end="641:65">&amp;</operator><name pos:start="641:66" pos:end="641:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="643:11" pos:end="649:9">else if <condition pos:start="643:19" pos:end="643:47">(<expr pos:start="643:20" pos:end="643:46"><operator pos:start="643:20" pos:end="643:20">!</operator><call pos:start="643:21" pos:end="643:46"><name pos:start="643:21" pos:end="643:30">strcasecmp</name><argument_list pos:start="643:31" pos:end="643:46">(<argument pos:start="643:32" pos:end="643:34"><expr pos:start="643:32" pos:end="643:34"><name pos:start="643:32" pos:end="643:34">cmd</name></expr></argument>, <argument pos:start="643:37" pos:end="643:45"><expr pos:start="643:37" pos:end="643:45"><literal type="string" pos:start="643:37" pos:end="643:45">"Comment"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="643:49" pos:end="649:9">{<block_content pos:start="645:13" pos:end="647:70">

            <if_stmt pos:start="645:13" pos:end="647:70"><if pos:start="645:13" pos:end="647:70">if <condition pos:start="645:16" pos:end="645:23">(<expr pos:start="645:17" pos:end="645:22"><name pos:start="645:17" pos:end="645:22">stream</name></expr>)</condition><block type="pseudo" pos:start="647:17" pos:end="647:70"><block_content pos:start="647:17" pos:end="647:70">

                <expr_stmt pos:start="647:17" pos:end="647:70"><expr pos:start="647:17" pos:end="647:69"><call pos:start="647:17" pos:end="647:69"><name pos:start="647:17" pos:end="647:23">get_arg</name><argument_list pos:start="647:24" pos:end="647:69">(<argument pos:start="647:25" pos:end="647:39"><expr pos:start="647:25" pos:end="647:39"><name pos:start="647:25" pos:end="647:39"><name pos:start="647:25" pos:end="647:30">stream</name><operator pos:start="647:31" pos:end="647:32">-&gt;</operator><name pos:start="647:33" pos:end="647:39">comment</name></name></expr></argument>, <argument pos:start="647:42" pos:end="647:64"><expr pos:start="647:42" pos:end="647:64"><sizeof pos:start="647:42" pos:end="647:64">sizeof<argument_list pos:start="647:48" pos:end="647:64">(<argument pos:start="647:49" pos:end="647:63"><expr pos:start="647:49" pos:end="647:63"><name pos:start="647:49" pos:end="647:63"><name pos:start="647:49" pos:end="647:54">stream</name><operator pos:start="647:55" pos:end="647:56">-&gt;</operator><name pos:start="647:57" pos:end="647:63">comment</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="647:67" pos:end="647:68"><expr pos:start="647:67" pos:end="647:68"><operator pos:start="647:67" pos:end="647:67">&amp;</operator><name pos:start="647:68" pos:end="647:68">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="649:11" pos:end="655:9">else if <condition pos:start="649:19" pos:end="649:49">(<expr pos:start="649:20" pos:end="649:48"><operator pos:start="649:20" pos:end="649:20">!</operator><call pos:start="649:21" pos:end="649:48"><name pos:start="649:21" pos:end="649:30">strcasecmp</name><argument_list pos:start="649:31" pos:end="649:48">(<argument pos:start="649:32" pos:end="649:34"><expr pos:start="649:32" pos:end="649:34"><name pos:start="649:32" pos:end="649:34">cmd</name></expr></argument>, <argument pos:start="649:37" pos:end="649:47"><expr pos:start="649:37" pos:end="649:47"><literal type="string" pos:start="649:37" pos:end="649:47">"Copyright"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="649:51" pos:end="655:9">{<block_content pos:start="651:13" pos:end="653:74">

            <if_stmt pos:start="651:13" pos:end="653:74"><if pos:start="651:13" pos:end="653:74">if <condition pos:start="651:16" pos:end="651:23">(<expr pos:start="651:17" pos:end="651:22"><name pos:start="651:17" pos:end="651:22">stream</name></expr>)</condition><block type="pseudo" pos:start="653:17" pos:end="653:74"><block_content pos:start="653:17" pos:end="653:74">

                <expr_stmt pos:start="653:17" pos:end="653:74"><expr pos:start="653:17" pos:end="653:73"><call pos:start="653:17" pos:end="653:73"><name pos:start="653:17" pos:end="653:23">get_arg</name><argument_list pos:start="653:24" pos:end="653:73">(<argument pos:start="653:25" pos:end="653:41"><expr pos:start="653:25" pos:end="653:41"><name pos:start="653:25" pos:end="653:41"><name pos:start="653:25" pos:end="653:30">stream</name><operator pos:start="653:31" pos:end="653:32">-&gt;</operator><name pos:start="653:33" pos:end="653:41">copyright</name></name></expr></argument>, <argument pos:start="653:44" pos:end="653:68"><expr pos:start="653:44" pos:end="653:68"><sizeof pos:start="653:44" pos:end="653:68">sizeof<argument_list pos:start="653:50" pos:end="653:68">(<argument pos:start="653:51" pos:end="653:67"><expr pos:start="653:51" pos:end="653:67"><name pos:start="653:51" pos:end="653:67"><name pos:start="653:51" pos:end="653:56">stream</name><operator pos:start="653:57" pos:end="653:58">-&gt;</operator><name pos:start="653:59" pos:end="653:67">copyright</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="653:71" pos:end="653:72"><expr pos:start="653:71" pos:end="653:72"><operator pos:start="653:71" pos:end="653:71">&amp;</operator><name pos:start="653:72" pos:end="653:72">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="655:11" pos:end="661:9">else if <condition pos:start="655:19" pos:end="655:45">(<expr pos:start="655:20" pos:end="655:44"><operator pos:start="655:20" pos:end="655:20">!</operator><call pos:start="655:21" pos:end="655:44"><name pos:start="655:21" pos:end="655:30">strcasecmp</name><argument_list pos:start="655:31" pos:end="655:44">(<argument pos:start="655:32" pos:end="655:34"><expr pos:start="655:32" pos:end="655:34"><name pos:start="655:32" pos:end="655:34">cmd</name></expr></argument>, <argument pos:start="655:37" pos:end="655:43"><expr pos:start="655:37" pos:end="655:43"><literal type="string" pos:start="655:37" pos:end="655:43">"Title"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="655:47" pos:end="661:9">{<block_content pos:start="657:13" pos:end="659:66">

            <if_stmt pos:start="657:13" pos:end="659:66"><if pos:start="657:13" pos:end="659:66">if <condition pos:start="657:16" pos:end="657:23">(<expr pos:start="657:17" pos:end="657:22"><name pos:start="657:17" pos:end="657:22">stream</name></expr>)</condition><block type="pseudo" pos:start="659:17" pos:end="659:66"><block_content pos:start="659:17" pos:end="659:66">

                <expr_stmt pos:start="659:17" pos:end="659:66"><expr pos:start="659:17" pos:end="659:65"><call pos:start="659:17" pos:end="659:65"><name pos:start="659:17" pos:end="659:23">get_arg</name><argument_list pos:start="659:24" pos:end="659:65">(<argument pos:start="659:25" pos:end="659:37"><expr pos:start="659:25" pos:end="659:37"><name pos:start="659:25" pos:end="659:37"><name pos:start="659:25" pos:end="659:30">stream</name><operator pos:start="659:31" pos:end="659:32">-&gt;</operator><name pos:start="659:33" pos:end="659:37">title</name></name></expr></argument>, <argument pos:start="659:40" pos:end="659:60"><expr pos:start="659:40" pos:end="659:60"><sizeof pos:start="659:40" pos:end="659:60">sizeof<argument_list pos:start="659:46" pos:end="659:60">(<argument pos:start="659:47" pos:end="659:59"><expr pos:start="659:47" pos:end="659:59"><name pos:start="659:47" pos:end="659:59"><name pos:start="659:47" pos:end="659:52">stream</name><operator pos:start="659:53" pos:end="659:54">-&gt;</operator><name pos:start="659:55" pos:end="659:59">title</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="659:63" pos:end="659:64"><expr pos:start="659:63" pos:end="659:64"><operator pos:start="659:63" pos:end="659:63">&amp;</operator><name pos:start="659:64" pos:end="659:64">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="661:11" pos:end="669:9">else if <condition pos:start="661:19" pos:end="661:47">(<expr pos:start="661:20" pos:end="661:46"><operator pos:start="661:20" pos:end="661:20">!</operator><call pos:start="661:21" pos:end="661:46"><name pos:start="661:21" pos:end="661:30">strcasecmp</name><argument_list pos:start="661:31" pos:end="661:46">(<argument pos:start="661:32" pos:end="661:34"><expr pos:start="661:32" pos:end="661:34"><name pos:start="661:32" pos:end="661:34">cmd</name></expr></argument>, <argument pos:start="661:37" pos:end="661:45"><expr pos:start="661:37" pos:end="661:45"><literal type="string" pos:start="661:37" pos:end="661:45">"Preroll"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="661:49" pos:end="669:9">{<block_content pos:start="663:13" pos:end="667:53">

            <expr_stmt pos:start="663:13" pos:end="663:42"><expr pos:start="663:13" pos:end="663:41"><call pos:start="663:13" pos:end="663:41"><name pos:start="663:13" pos:end="663:19">get_arg</name><argument_list pos:start="663:20" pos:end="663:41">(<argument pos:start="663:21" pos:end="663:23"><expr pos:start="663:21" pos:end="663:23"><name pos:start="663:21" pos:end="663:23">arg</name></expr></argument>, <argument pos:start="663:26" pos:end="663:36"><expr pos:start="663:26" pos:end="663:36"><sizeof pos:start="663:26" pos:end="663:36">sizeof<argument_list pos:start="663:32" pos:end="663:36">(<argument pos:start="663:33" pos:end="663:35"><expr pos:start="663:33" pos:end="663:35"><name pos:start="663:33" pos:end="663:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="663:39" pos:end="663:40"><expr pos:start="663:39" pos:end="663:40"><operator pos:start="663:39" pos:end="663:39">&amp;</operator><name pos:start="663:40" pos:end="663:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="665:13" pos:end="667:53"><if pos:start="665:13" pos:end="667:53">if <condition pos:start="665:16" pos:end="665:23">(<expr pos:start="665:17" pos:end="665:22"><name pos:start="665:17" pos:end="665:22">stream</name></expr>)</condition><block type="pseudo" pos:start="667:17" pos:end="667:53"><block_content pos:start="667:17" pos:end="667:53">

                <expr_stmt pos:start="667:17" pos:end="667:53"><expr pos:start="667:17" pos:end="667:52"><name pos:start="667:17" pos:end="667:33"><name pos:start="667:17" pos:end="667:22">stream</name><operator pos:start="667:23" pos:end="667:24">-&gt;</operator><name pos:start="667:25" pos:end="667:33">prebuffer</name></name> <operator pos:start="667:35" pos:end="667:35">=</operator> <call pos:start="667:37" pos:end="667:45"><name pos:start="667:37" pos:end="667:40">atof</name><argument_list pos:start="667:41" pos:end="667:45">(<argument pos:start="667:42" pos:end="667:44"><expr pos:start="667:42" pos:end="667:44"><name pos:start="667:42" pos:end="667:44">arg</name></expr></argument>)</argument_list></call> <operator pos:start="667:47" pos:end="667:47">*</operator> <literal type="number" pos:start="667:49" pos:end="667:52">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="669:11" pos:end="675:9">else if <condition pos:start="669:19" pos:end="669:54">(<expr pos:start="669:20" pos:end="669:53"><operator pos:start="669:20" pos:end="669:20">!</operator><call pos:start="669:21" pos:end="669:53"><name pos:start="669:21" pos:end="669:30">strcasecmp</name><argument_list pos:start="669:31" pos:end="669:53">(<argument pos:start="669:32" pos:end="669:34"><expr pos:start="669:32" pos:end="669:34"><name pos:start="669:32" pos:end="669:34">cmd</name></expr></argument>, <argument pos:start="669:37" pos:end="669:52"><expr pos:start="669:37" pos:end="669:52"><literal type="string" pos:start="669:37" pos:end="669:52">"StartSendOnKey"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="669:56" pos:end="675:9">{<block_content pos:start="671:13" pos:end="673:40">

            <if_stmt pos:start="671:13" pos:end="673:40"><if pos:start="671:13" pos:end="673:40">if <condition pos:start="671:16" pos:end="671:23">(<expr pos:start="671:17" pos:end="671:22"><name pos:start="671:17" pos:end="671:22">stream</name></expr>)</condition><block type="pseudo" pos:start="673:17" pos:end="673:40"><block_content pos:start="673:17" pos:end="673:40">

                <expr_stmt pos:start="673:17" pos:end="673:40"><expr pos:start="673:17" pos:end="673:39"><name pos:start="673:17" pos:end="673:35"><name pos:start="673:17" pos:end="673:22">stream</name><operator pos:start="673:23" pos:end="673:24">-&gt;</operator><name pos:start="673:25" pos:end="673:35">send_on_key</name></name> <operator pos:start="673:37" pos:end="673:37">=</operator> <literal type="number" pos:start="673:39" pos:end="673:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="675:11" pos:end="691:9">else if <condition pos:start="675:19" pos:end="675:50">(<expr pos:start="675:20" pos:end="675:49"><operator pos:start="675:20" pos:end="675:20">!</operator><call pos:start="675:21" pos:end="675:49"><name pos:start="675:21" pos:end="675:30">strcasecmp</name><argument_list pos:start="675:31" pos:end="675:49">(<argument pos:start="675:32" pos:end="675:34"><expr pos:start="675:32" pos:end="675:34"><name pos:start="675:32" pos:end="675:34">cmd</name></expr></argument>, <argument pos:start="675:37" pos:end="675:48"><expr pos:start="675:37" pos:end="675:48"><literal type="string" pos:start="675:37" pos:end="675:48">"AudioCodec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="675:52" pos:end="691:9">{<block_content pos:start="677:13" pos:end="689:13">

            <expr_stmt pos:start="677:13" pos:end="677:42"><expr pos:start="677:13" pos:end="677:41"><call pos:start="677:13" pos:end="677:41"><name pos:start="677:13" pos:end="677:19">get_arg</name><argument_list pos:start="677:20" pos:end="677:41">(<argument pos:start="677:21" pos:end="677:23"><expr pos:start="677:21" pos:end="677:23"><name pos:start="677:21" pos:end="677:23">arg</name></expr></argument>, <argument pos:start="677:26" pos:end="677:36"><expr pos:start="677:26" pos:end="677:36"><sizeof pos:start="677:26" pos:end="677:36">sizeof<argument_list pos:start="677:32" pos:end="677:36">(<argument pos:start="677:33" pos:end="677:35"><expr pos:start="677:33" pos:end="677:35"><name pos:start="677:33" pos:end="677:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="677:39" pos:end="677:40"><expr pos:start="677:39" pos:end="677:40"><operator pos:start="677:39" pos:end="677:39">&amp;</operator><name pos:start="677:40" pos:end="677:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:44"><expr pos:start="679:13" pos:end="679:43"><name pos:start="679:13" pos:end="679:20">audio_id</name> <operator pos:start="679:22" pos:end="679:22">=</operator> <call pos:start="679:24" pos:end="679:43"><name pos:start="679:24" pos:end="679:38">opt_audio_codec</name><argument_list pos:start="679:39" pos:end="679:43">(<argument pos:start="679:40" pos:end="679:42"><expr pos:start="679:40" pos:end="679:42"><name pos:start="679:40" pos:end="679:42">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="681:13" pos:end="689:13"><if pos:start="681:13" pos:end="689:13">if <condition pos:start="681:16" pos:end="681:42">(<expr pos:start="681:17" pos:end="681:41"><name pos:start="681:17" pos:end="681:24">audio_id</name> <operator pos:start="681:26" pos:end="681:27">==</operator> <name pos:start="681:29" pos:end="681:41">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="681:44" pos:end="689:13">{<block_content pos:start="683:17" pos:end="687:25">

                <expr_stmt pos:start="683:17" pos:end="685:49"><expr pos:start="683:17" pos:end="685:48"><call pos:start="683:17" pos:end="685:48"><name pos:start="683:17" pos:end="683:23">fprintf</name><argument_list pos:start="683:24" pos:end="685:48">(<argument pos:start="683:25" pos:end="683:30"><expr pos:start="683:25" pos:end="683:30"><name pos:start="683:25" pos:end="683:30">stderr</name></expr></argument>, <argument pos:start="683:33" pos:end="683:65"><expr pos:start="683:33" pos:end="683:65"><literal type="string" pos:start="683:33" pos:end="683:65">"%s:%d: Unknown AudioCodec: %s\n"</literal></expr></argument>,

                        <argument pos:start="685:25" pos:end="685:32"><expr pos:start="685:25" pos:end="685:32"><name pos:start="685:25" pos:end="685:32">filename</name></expr></argument>, <argument pos:start="685:35" pos:end="685:42"><expr pos:start="685:35" pos:end="685:42"><name pos:start="685:35" pos:end="685:42">line_num</name></expr></argument>, <argument pos:start="685:45" pos:end="685:47"><expr pos:start="685:45" pos:end="685:47"><name pos:start="685:45" pos:end="685:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="687:17" pos:end="687:25"><expr pos:start="687:17" pos:end="687:24"><name pos:start="687:17" pos:end="687:22">errors</name><operator pos:start="687:23" pos:end="687:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="691:11" pos:end="707:9">else if <condition pos:start="691:19" pos:end="691:50">(<expr pos:start="691:20" pos:end="691:49"><operator pos:start="691:20" pos:end="691:20">!</operator><call pos:start="691:21" pos:end="691:49"><name pos:start="691:21" pos:end="691:30">strcasecmp</name><argument_list pos:start="691:31" pos:end="691:49">(<argument pos:start="691:32" pos:end="691:34"><expr pos:start="691:32" pos:end="691:34"><name pos:start="691:32" pos:end="691:34">cmd</name></expr></argument>, <argument pos:start="691:37" pos:end="691:48"><expr pos:start="691:37" pos:end="691:48"><literal type="string" pos:start="691:37" pos:end="691:48">"VideoCodec"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="691:52" pos:end="707:9">{<block_content pos:start="693:13" pos:end="705:13">

            <expr_stmt pos:start="693:13" pos:end="693:42"><expr pos:start="693:13" pos:end="693:41"><call pos:start="693:13" pos:end="693:41"><name pos:start="693:13" pos:end="693:19">get_arg</name><argument_list pos:start="693:20" pos:end="693:41">(<argument pos:start="693:21" pos:end="693:23"><expr pos:start="693:21" pos:end="693:23"><name pos:start="693:21" pos:end="693:23">arg</name></expr></argument>, <argument pos:start="693:26" pos:end="693:36"><expr pos:start="693:26" pos:end="693:36"><sizeof pos:start="693:26" pos:end="693:36">sizeof<argument_list pos:start="693:32" pos:end="693:36">(<argument pos:start="693:33" pos:end="693:35"><expr pos:start="693:33" pos:end="693:35"><name pos:start="693:33" pos:end="693:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="693:39" pos:end="693:40"><expr pos:start="693:39" pos:end="693:40"><operator pos:start="693:39" pos:end="693:39">&amp;</operator><name pos:start="693:40" pos:end="693:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:44"><expr pos:start="695:13" pos:end="695:43"><name pos:start="695:13" pos:end="695:20">video_id</name> <operator pos:start="695:22" pos:end="695:22">=</operator> <call pos:start="695:24" pos:end="695:43"><name pos:start="695:24" pos:end="695:38">opt_video_codec</name><argument_list pos:start="695:39" pos:end="695:43">(<argument pos:start="695:40" pos:end="695:42"><expr pos:start="695:40" pos:end="695:42"><name pos:start="695:40" pos:end="695:42">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="697:13" pos:end="705:13"><if pos:start="697:13" pos:end="705:13">if <condition pos:start="697:16" pos:end="697:42">(<expr pos:start="697:17" pos:end="697:41"><name pos:start="697:17" pos:end="697:24">video_id</name> <operator pos:start="697:26" pos:end="697:27">==</operator> <name pos:start="697:29" pos:end="697:41">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="697:44" pos:end="705:13">{<block_content pos:start="699:17" pos:end="703:25">

                <expr_stmt pos:start="699:17" pos:end="701:49"><expr pos:start="699:17" pos:end="701:48"><call pos:start="699:17" pos:end="701:48"><name pos:start="699:17" pos:end="699:23">fprintf</name><argument_list pos:start="699:24" pos:end="701:48">(<argument pos:start="699:25" pos:end="699:30"><expr pos:start="699:25" pos:end="699:30"><name pos:start="699:25" pos:end="699:30">stderr</name></expr></argument>, <argument pos:start="699:33" pos:end="699:65"><expr pos:start="699:33" pos:end="699:65"><literal type="string" pos:start="699:33" pos:end="699:65">"%s:%d: Unknown VideoCodec: %s\n"</literal></expr></argument>,

                        <argument pos:start="701:25" pos:end="701:32"><expr pos:start="701:25" pos:end="701:32"><name pos:start="701:25" pos:end="701:32">filename</name></expr></argument>, <argument pos:start="701:35" pos:end="701:42"><expr pos:start="701:35" pos:end="701:42"><name pos:start="701:35" pos:end="701:42">line_num</name></expr></argument>, <argument pos:start="701:45" pos:end="701:47"><expr pos:start="701:45" pos:end="701:47"><name pos:start="701:45" pos:end="701:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="703:17" pos:end="703:25"><expr pos:start="703:17" pos:end="703:24"><name pos:start="703:17" pos:end="703:22">errors</name><operator pos:start="703:23" pos:end="703:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="707:11" pos:end="715:9">else if <condition pos:start="707:19" pos:end="707:47">(<expr pos:start="707:20" pos:end="707:46"><operator pos:start="707:20" pos:end="707:20">!</operator><call pos:start="707:21" pos:end="707:46"><name pos:start="707:21" pos:end="707:30">strcasecmp</name><argument_list pos:start="707:31" pos:end="707:46">(<argument pos:start="707:32" pos:end="707:34"><expr pos:start="707:32" pos:end="707:34"><name pos:start="707:32" pos:end="707:34">cmd</name></expr></argument>, <argument pos:start="707:37" pos:end="707:45"><expr pos:start="707:37" pos:end="707:45"><literal type="string" pos:start="707:37" pos:end="707:45">"MaxTime"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="707:49" pos:end="715:9">{<block_content pos:start="709:13" pos:end="713:52">

            <expr_stmt pos:start="709:13" pos:end="709:42"><expr pos:start="709:13" pos:end="709:41"><call pos:start="709:13" pos:end="709:41"><name pos:start="709:13" pos:end="709:19">get_arg</name><argument_list pos:start="709:20" pos:end="709:41">(<argument pos:start="709:21" pos:end="709:23"><expr pos:start="709:21" pos:end="709:23"><name pos:start="709:21" pos:end="709:23">arg</name></expr></argument>, <argument pos:start="709:26" pos:end="709:36"><expr pos:start="709:26" pos:end="709:36"><sizeof pos:start="709:26" pos:end="709:36">sizeof<argument_list pos:start="709:32" pos:end="709:36">(<argument pos:start="709:33" pos:end="709:35"><expr pos:start="709:33" pos:end="709:35"><name pos:start="709:33" pos:end="709:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="709:39" pos:end="709:40"><expr pos:start="709:39" pos:end="709:40"><operator pos:start="709:39" pos:end="709:39">&amp;</operator><name pos:start="709:40" pos:end="709:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="711:13" pos:end="713:52"><if pos:start="711:13" pos:end="713:52">if <condition pos:start="711:16" pos:end="711:23">(<expr pos:start="711:17" pos:end="711:22"><name pos:start="711:17" pos:end="711:22">stream</name></expr>)</condition><block type="pseudo" pos:start="713:17" pos:end="713:52"><block_content pos:start="713:17" pos:end="713:52">

                <expr_stmt pos:start="713:17" pos:end="713:52"><expr pos:start="713:17" pos:end="713:51"><name pos:start="713:17" pos:end="713:32"><name pos:start="713:17" pos:end="713:22">stream</name><operator pos:start="713:23" pos:end="713:24">-&gt;</operator><name pos:start="713:25" pos:end="713:32">max_time</name></name> <operator pos:start="713:34" pos:end="713:34">=</operator> <call pos:start="713:36" pos:end="713:44"><name pos:start="713:36" pos:end="713:39">atof</name><argument_list pos:start="713:40" pos:end="713:44">(<argument pos:start="713:41" pos:end="713:43"><expr pos:start="713:41" pos:end="713:43"><name pos:start="713:41" pos:end="713:43">arg</name></expr></argument>)</argument_list></call> <operator pos:start="713:46" pos:end="713:46">*</operator> <literal type="number" pos:start="713:48" pos:end="713:51">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="715:11" pos:end="723:9">else if <condition pos:start="715:19" pos:end="715:52">(<expr pos:start="715:20" pos:end="715:51"><operator pos:start="715:20" pos:end="715:20">!</operator><call pos:start="715:21" pos:end="715:51"><name pos:start="715:21" pos:end="715:30">strcasecmp</name><argument_list pos:start="715:31" pos:end="715:51">(<argument pos:start="715:32" pos:end="715:34"><expr pos:start="715:32" pos:end="715:34"><name pos:start="715:32" pos:end="715:34">cmd</name></expr></argument>, <argument pos:start="715:37" pos:end="715:50"><expr pos:start="715:37" pos:end="715:50"><literal type="string" pos:start="715:37" pos:end="715:50">"AudioBitRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="715:54" pos:end="723:9">{<block_content pos:start="717:13" pos:end="721:54">

            <expr_stmt pos:start="717:13" pos:end="717:42"><expr pos:start="717:13" pos:end="717:41"><call pos:start="717:13" pos:end="717:41"><name pos:start="717:13" pos:end="717:19">get_arg</name><argument_list pos:start="717:20" pos:end="717:41">(<argument pos:start="717:21" pos:end="717:23"><expr pos:start="717:21" pos:end="717:23"><name pos:start="717:21" pos:end="717:23">arg</name></expr></argument>, <argument pos:start="717:26" pos:end="717:36"><expr pos:start="717:26" pos:end="717:36"><sizeof pos:start="717:26" pos:end="717:36">sizeof<argument_list pos:start="717:32" pos:end="717:36">(<argument pos:start="717:33" pos:end="717:35"><expr pos:start="717:33" pos:end="717:35"><name pos:start="717:33" pos:end="717:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="717:39" pos:end="717:40"><expr pos:start="717:39" pos:end="717:40"><operator pos:start="717:39" pos:end="717:39">&amp;</operator><name pos:start="717:40" pos:end="717:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="719:13" pos:end="721:54"><if pos:start="719:13" pos:end="721:54">if <condition pos:start="719:16" pos:end="719:23">(<expr pos:start="719:17" pos:end="719:22"><name pos:start="719:17" pos:end="719:22">stream</name></expr>)</condition><block type="pseudo" pos:start="721:17" pos:end="721:54"><block_content pos:start="721:17" pos:end="721:54">

                <expr_stmt pos:start="721:17" pos:end="721:54"><expr pos:start="721:17" pos:end="721:53"><name pos:start="721:17" pos:end="721:34"><name pos:start="721:17" pos:end="721:25">audio_enc</name><operator pos:start="721:26" pos:end="721:26">.</operator><name pos:start="721:27" pos:end="721:34">bit_rate</name></name> <operator pos:start="721:36" pos:end="721:36">=</operator> <call pos:start="721:38" pos:end="721:46"><name pos:start="721:38" pos:end="721:41">atoi</name><argument_list pos:start="721:42" pos:end="721:46">(<argument pos:start="721:43" pos:end="721:45"><expr pos:start="721:43" pos:end="721:45"><name pos:start="721:43" pos:end="721:45">arg</name></expr></argument>)</argument_list></call> <operator pos:start="721:48" pos:end="721:48">*</operator> <literal type="number" pos:start="721:50" pos:end="721:53">1000</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="723:11" pos:end="731:9">else if <condition pos:start="723:19" pos:end="723:53">(<expr pos:start="723:20" pos:end="723:52"><operator pos:start="723:20" pos:end="723:20">!</operator><call pos:start="723:21" pos:end="723:52"><name pos:start="723:21" pos:end="723:30">strcasecmp</name><argument_list pos:start="723:31" pos:end="723:52">(<argument pos:start="723:32" pos:end="723:34"><expr pos:start="723:32" pos:end="723:34"><name pos:start="723:32" pos:end="723:34">cmd</name></expr></argument>, <argument pos:start="723:37" pos:end="723:51"><expr pos:start="723:37" pos:end="723:51"><literal type="string" pos:start="723:37" pos:end="723:51">"AudioChannels"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="723:55" pos:end="731:9">{<block_content pos:start="725:13" pos:end="729:47">

            <expr_stmt pos:start="725:13" pos:end="725:42"><expr pos:start="725:13" pos:end="725:41"><call pos:start="725:13" pos:end="725:41"><name pos:start="725:13" pos:end="725:19">get_arg</name><argument_list pos:start="725:20" pos:end="725:41">(<argument pos:start="725:21" pos:end="725:23"><expr pos:start="725:21" pos:end="725:23"><name pos:start="725:21" pos:end="725:23">arg</name></expr></argument>, <argument pos:start="725:26" pos:end="725:36"><expr pos:start="725:26" pos:end="725:36"><sizeof pos:start="725:26" pos:end="725:36">sizeof<argument_list pos:start="725:32" pos:end="725:36">(<argument pos:start="725:33" pos:end="725:35"><expr pos:start="725:33" pos:end="725:35"><name pos:start="725:33" pos:end="725:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="725:39" pos:end="725:40"><expr pos:start="725:39" pos:end="725:40"><operator pos:start="725:39" pos:end="725:39">&amp;</operator><name pos:start="725:40" pos:end="725:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="727:13" pos:end="729:47"><if pos:start="727:13" pos:end="729:47">if <condition pos:start="727:16" pos:end="727:23">(<expr pos:start="727:17" pos:end="727:22"><name pos:start="727:17" pos:end="727:22">stream</name></expr>)</condition><block type="pseudo" pos:start="729:17" pos:end="729:47"><block_content pos:start="729:17" pos:end="729:47">

                <expr_stmt pos:start="729:17" pos:end="729:47"><expr pos:start="729:17" pos:end="729:46"><name pos:start="729:17" pos:end="729:34"><name pos:start="729:17" pos:end="729:25">audio_enc</name><operator pos:start="729:26" pos:end="729:26">.</operator><name pos:start="729:27" pos:end="729:34">channels</name></name> <operator pos:start="729:36" pos:end="729:36">=</operator> <call pos:start="729:38" pos:end="729:46"><name pos:start="729:38" pos:end="729:41">atoi</name><argument_list pos:start="729:42" pos:end="729:46">(<argument pos:start="729:43" pos:end="729:45"><expr pos:start="729:43" pos:end="729:45"><name pos:start="729:43" pos:end="729:45">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="731:11" pos:end="739:9">else if <condition pos:start="731:19" pos:end="731:55">(<expr pos:start="731:20" pos:end="731:54"><operator pos:start="731:20" pos:end="731:20">!</operator><call pos:start="731:21" pos:end="731:54"><name pos:start="731:21" pos:end="731:30">strcasecmp</name><argument_list pos:start="731:31" pos:end="731:54">(<argument pos:start="731:32" pos:end="731:34"><expr pos:start="731:32" pos:end="731:34"><name pos:start="731:32" pos:end="731:34">cmd</name></expr></argument>, <argument pos:start="731:37" pos:end="731:53"><expr pos:start="731:37" pos:end="731:53"><literal type="string" pos:start="731:37" pos:end="731:53">"AudioSampleRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="731:57" pos:end="739:9">{<block_content pos:start="733:13" pos:end="737:50">

            <expr_stmt pos:start="733:13" pos:end="733:42"><expr pos:start="733:13" pos:end="733:41"><call pos:start="733:13" pos:end="733:41"><name pos:start="733:13" pos:end="733:19">get_arg</name><argument_list pos:start="733:20" pos:end="733:41">(<argument pos:start="733:21" pos:end="733:23"><expr pos:start="733:21" pos:end="733:23"><name pos:start="733:21" pos:end="733:23">arg</name></expr></argument>, <argument pos:start="733:26" pos:end="733:36"><expr pos:start="733:26" pos:end="733:36"><sizeof pos:start="733:26" pos:end="733:36">sizeof<argument_list pos:start="733:32" pos:end="733:36">(<argument pos:start="733:33" pos:end="733:35"><expr pos:start="733:33" pos:end="733:35"><name pos:start="733:33" pos:end="733:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="733:39" pos:end="733:40"><expr pos:start="733:39" pos:end="733:40"><operator pos:start="733:39" pos:end="733:39">&amp;</operator><name pos:start="733:40" pos:end="733:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="735:13" pos:end="737:50"><if pos:start="735:13" pos:end="737:50">if <condition pos:start="735:16" pos:end="735:23">(<expr pos:start="735:17" pos:end="735:22"><name pos:start="735:17" pos:end="735:22">stream</name></expr>)</condition><block type="pseudo" pos:start="737:17" pos:end="737:50"><block_content pos:start="737:17" pos:end="737:50">

                <expr_stmt pos:start="737:17" pos:end="737:50"><expr pos:start="737:17" pos:end="737:49"><name pos:start="737:17" pos:end="737:37"><name pos:start="737:17" pos:end="737:25">audio_enc</name><operator pos:start="737:26" pos:end="737:26">.</operator><name pos:start="737:27" pos:end="737:37">sample_rate</name></name> <operator pos:start="737:39" pos:end="737:39">=</operator> <call pos:start="737:41" pos:end="737:49"><name pos:start="737:41" pos:end="737:44">atoi</name><argument_list pos:start="737:45" pos:end="737:49">(<argument pos:start="737:46" pos:end="737:48"><expr pos:start="737:46" pos:end="737:48"><name pos:start="737:46" pos:end="737:48">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="739:11" pos:end="749:9">else if <condition pos:start="739:19" pos:end="739:52">(<expr pos:start="739:20" pos:end="739:51"><operator pos:start="739:20" pos:end="739:20">!</operator><call pos:start="739:21" pos:end="739:51"><name pos:start="739:21" pos:end="739:30">strcasecmp</name><argument_list pos:start="739:31" pos:end="739:51">(<argument pos:start="739:32" pos:end="739:34"><expr pos:start="739:32" pos:end="739:34"><name pos:start="739:32" pos:end="739:34">cmd</name></expr></argument>, <argument pos:start="739:37" pos:end="739:50"><expr pos:start="739:37" pos:end="739:50"><literal type="string" pos:start="739:37" pos:end="739:50">"AudioQuality"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="739:54" pos:end="749:9">{<block_content pos:start="741:13" pos:end="747:13">

            <expr_stmt pos:start="741:13" pos:end="741:42"><expr pos:start="741:13" pos:end="741:41"><call pos:start="741:13" pos:end="741:41"><name pos:start="741:13" pos:end="741:19">get_arg</name><argument_list pos:start="741:20" pos:end="741:41">(<argument pos:start="741:21" pos:end="741:23"><expr pos:start="741:21" pos:end="741:23"><name pos:start="741:21" pos:end="741:23">arg</name></expr></argument>, <argument pos:start="741:26" pos:end="741:36"><expr pos:start="741:26" pos:end="741:36"><sizeof pos:start="741:26" pos:end="741:36">sizeof<argument_list pos:start="741:32" pos:end="741:36">(<argument pos:start="741:33" pos:end="741:35"><expr pos:start="741:33" pos:end="741:35"><name pos:start="741:33" pos:end="741:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="741:39" pos:end="741:40"><expr pos:start="741:39" pos:end="741:40"><operator pos:start="741:39" pos:end="741:39">&amp;</operator><name pos:start="741:40" pos:end="741:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="743:13" pos:end="747:13"><if pos:start="743:13" pos:end="747:13">if <condition pos:start="743:16" pos:end="743:23">(<expr pos:start="743:17" pos:end="743:22"><name pos:start="743:17" pos:end="743:22">stream</name></expr>)</condition> <block pos:start="743:25" pos:end="747:13">{<block_content>

<comment type="line" pos:start="745:1" pos:end="745:55">//                audio_enc.quality = atof(arg) * 1000;</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="749:11" pos:end="779:9">else if <condition pos:start="749:19" pos:end="749:57">(<expr pos:start="749:20" pos:end="749:56"><operator pos:start="749:20" pos:end="749:20">!</operator><call pos:start="749:21" pos:end="749:56"><name pos:start="749:21" pos:end="749:30">strcasecmp</name><argument_list pos:start="749:31" pos:end="749:56">(<argument pos:start="749:32" pos:end="749:34"><expr pos:start="749:32" pos:end="749:34"><name pos:start="749:32" pos:end="749:34">cmd</name></expr></argument>, <argument pos:start="749:37" pos:end="749:55"><expr pos:start="749:37" pos:end="749:55"><literal type="string" pos:start="749:37" pos:end="749:55">"VideoBitRateRange"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="749:59" pos:end="779:9">{<block_content pos:start="751:13" pos:end="777:13">

            <if_stmt pos:start="751:13" pos:end="777:13"><if pos:start="751:13" pos:end="777:13">if <condition pos:start="751:16" pos:end="751:23">(<expr pos:start="751:17" pos:end="751:22"><name pos:start="751:17" pos:end="751:22">stream</name></expr>)</condition> <block pos:start="751:25" pos:end="777:13">{<block_content pos:start="753:17" pos:end="775:17">

                <decl_stmt pos:start="753:17" pos:end="753:37"><decl pos:start="753:17" pos:end="753:27"><type pos:start="753:17" pos:end="753:19"><name pos:start="753:17" pos:end="753:19">int</name></type> <name pos:start="753:21" pos:end="753:27">minrate</name></decl>, <decl pos:start="753:30" pos:end="753:36"><type ref="prev" pos:start="753:17" pos:end="753:19"/><name pos:start="753:30" pos:end="753:36">maxrate</name></decl>;</decl_stmt>



                <expr_stmt pos:start="757:17" pos:end="757:46"><expr pos:start="757:17" pos:end="757:45"><call pos:start="757:17" pos:end="757:45"><name pos:start="757:17" pos:end="757:23">get_arg</name><argument_list pos:start="757:24" pos:end="757:45">(<argument pos:start="757:25" pos:end="757:27"><expr pos:start="757:25" pos:end="757:27"><name pos:start="757:25" pos:end="757:27">arg</name></expr></argument>, <argument pos:start="757:30" pos:end="757:40"><expr pos:start="757:30" pos:end="757:40"><sizeof pos:start="757:30" pos:end="757:40">sizeof<argument_list pos:start="757:36" pos:end="757:40">(<argument pos:start="757:37" pos:end="757:39"><expr pos:start="757:37" pos:end="757:39"><name pos:start="757:37" pos:end="757:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="757:43" pos:end="757:44"><expr pos:start="757:43" pos:end="757:44"><operator pos:start="757:43" pos:end="757:43">&amp;</operator><name pos:start="757:44" pos:end="757:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="761:17" pos:end="775:17"><if pos:start="761:17" pos:end="767:17">if <condition pos:start="761:20" pos:end="761:66">(<expr pos:start="761:21" pos:end="761:65"><call pos:start="761:21" pos:end="761:60"><name pos:start="761:21" pos:end="761:26">sscanf</name><argument_list pos:start="761:27" pos:end="761:60">(<argument pos:start="761:28" pos:end="761:30"><expr pos:start="761:28" pos:end="761:30"><name pos:start="761:28" pos:end="761:30">arg</name></expr></argument>, <argument pos:start="761:33" pos:end="761:39"><expr pos:start="761:33" pos:end="761:39"><literal type="string" pos:start="761:33" pos:end="761:39">"%d-%d"</literal></expr></argument>, <argument pos:start="761:42" pos:end="761:49"><expr pos:start="761:42" pos:end="761:49"><operator pos:start="761:42" pos:end="761:42">&amp;</operator><name pos:start="761:43" pos:end="761:49">minrate</name></expr></argument>, <argument pos:start="761:52" pos:end="761:59"><expr pos:start="761:52" pos:end="761:59"><operator pos:start="761:52" pos:end="761:52">&amp;</operator><name pos:start="761:53" pos:end="761:59">maxrate</name></expr></argument>)</argument_list></call> <operator pos:start="761:62" pos:end="761:63">==</operator> <literal type="number" pos:start="761:65" pos:end="761:65">2</literal></expr>)</condition> <block pos:start="761:68" pos:end="767:17">{<block_content pos:start="763:21" pos:end="765:59">

                    <expr_stmt pos:start="763:21" pos:end="763:59"><expr pos:start="763:21" pos:end="763:58"><name pos:start="763:21" pos:end="763:41"><name pos:start="763:21" pos:end="763:29">video_enc</name><operator pos:start="763:30" pos:end="763:30">.</operator><name pos:start="763:31" pos:end="763:41">rc_min_rate</name></name> <operator pos:start="763:43" pos:end="763:43">=</operator> <name pos:start="763:45" pos:end="763:51">minrate</name> <operator pos:start="763:53" pos:end="763:53">*</operator> <literal type="number" pos:start="763:55" pos:end="763:58">1000</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="765:21" pos:end="765:59"><expr pos:start="765:21" pos:end="765:58"><name pos:start="765:21" pos:end="765:41"><name pos:start="765:21" pos:end="765:29">video_enc</name><operator pos:start="765:30" pos:end="765:30">.</operator><name pos:start="765:31" pos:end="765:41">rc_max_rate</name></name> <operator pos:start="765:43" pos:end="765:43">=</operator> <name pos:start="765:45" pos:end="765:51">maxrate</name> <operator pos:start="765:53" pos:end="765:53">*</operator> <literal type="number" pos:start="765:55" pos:end="765:58">1000</literal></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="767:19" pos:end="775:17">else <block pos:start="767:24" pos:end="775:17">{<block_content pos:start="769:21" pos:end="773:29">

                    <expr_stmt pos:start="769:21" pos:end="771:53"><expr pos:start="769:21" pos:end="771:52"><call pos:start="769:21" pos:end="771:52"><name pos:start="769:21" pos:end="769:27">fprintf</name><argument_list pos:start="769:28" pos:end="771:52">(<argument pos:start="769:29" pos:end="769:34"><expr pos:start="769:29" pos:end="769:34"><name pos:start="769:29" pos:end="769:34">stderr</name></expr></argument>, <argument pos:start="769:37" pos:end="769:114"><expr pos:start="769:37" pos:end="769:114"><literal type="string" pos:start="769:37" pos:end="769:114">"%s:%d: Incorrect format for VideoBitRateRange -- should be &lt;min&gt;-&lt;max&gt;: %s\n"</literal></expr></argument>,

                            <argument pos:start="771:29" pos:end="771:36"><expr pos:start="771:29" pos:end="771:36"><name pos:start="771:29" pos:end="771:36">filename</name></expr></argument>, <argument pos:start="771:39" pos:end="771:46"><expr pos:start="771:39" pos:end="771:46"><name pos:start="771:39" pos:end="771:46">line_num</name></expr></argument>, <argument pos:start="771:49" pos:end="771:51"><expr pos:start="771:49" pos:end="771:51"><name pos:start="771:49" pos:end="771:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="773:21" pos:end="773:29"><expr pos:start="773:21" pos:end="773:28"><name pos:start="773:21" pos:end="773:26">errors</name><operator pos:start="773:27" pos:end="773:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="779:11" pos:end="789:9">else if <condition pos:start="779:19" pos:end="779:45">(<expr pos:start="779:20" pos:end="779:44"><operator pos:start="779:20" pos:end="779:20">!</operator><call pos:start="779:21" pos:end="779:44"><name pos:start="779:21" pos:end="779:30">strcasecmp</name><argument_list pos:start="779:31" pos:end="779:44">(<argument pos:start="779:32" pos:end="779:34"><expr pos:start="779:32" pos:end="779:34"><name pos:start="779:32" pos:end="779:34">cmd</name></expr></argument>, <argument pos:start="779:37" pos:end="779:43"><expr pos:start="779:37" pos:end="779:43"><literal type="string" pos:start="779:37" pos:end="779:43">"Debug"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="779:47" pos:end="789:9">{<block_content pos:start="781:13" pos:end="787:13">

            <if_stmt pos:start="781:13" pos:end="787:13"><if pos:start="781:13" pos:end="787:13">if <condition pos:start="781:16" pos:end="781:23">(<expr pos:start="781:17" pos:end="781:22"><name pos:start="781:17" pos:end="781:22">stream</name></expr>)</condition> <block pos:start="781:25" pos:end="787:13">{<block_content pos:start="783:17" pos:end="785:50">

                <expr_stmt pos:start="783:17" pos:end="783:46"><expr pos:start="783:17" pos:end="783:45"><call pos:start="783:17" pos:end="783:45"><name pos:start="783:17" pos:end="783:23">get_arg</name><argument_list pos:start="783:24" pos:end="783:45">(<argument pos:start="783:25" pos:end="783:27"><expr pos:start="783:25" pos:end="783:27"><name pos:start="783:25" pos:end="783:27">arg</name></expr></argument>, <argument pos:start="783:30" pos:end="783:40"><expr pos:start="783:30" pos:end="783:40"><sizeof pos:start="783:30" pos:end="783:40">sizeof<argument_list pos:start="783:36" pos:end="783:40">(<argument pos:start="783:37" pos:end="783:39"><expr pos:start="783:37" pos:end="783:39"><name pos:start="783:37" pos:end="783:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="783:43" pos:end="783:44"><expr pos:start="783:43" pos:end="783:44"><operator pos:start="783:43" pos:end="783:43">&amp;</operator><name pos:start="783:44" pos:end="783:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="785:17" pos:end="785:50"><expr pos:start="785:17" pos:end="785:49"><name pos:start="785:17" pos:end="785:31"><name pos:start="785:17" pos:end="785:25">video_enc</name><operator pos:start="785:26" pos:end="785:26">.</operator><name pos:start="785:27" pos:end="785:31">debug</name></name> <operator pos:start="785:33" pos:end="785:33">=</operator> <call pos:start="785:35" pos:end="785:49"><name pos:start="785:35" pos:end="785:40">strtol</name><argument_list pos:start="785:41" pos:end="785:49">(<argument pos:start="785:42" pos:end="785:44"><expr pos:start="785:42" pos:end="785:44"><name pos:start="785:42" pos:end="785:44">arg</name></expr></argument>,<argument pos:start="785:46" pos:end="785:46"><expr pos:start="785:46" pos:end="785:46"><literal type="number" pos:start="785:46" pos:end="785:46">0</literal></expr></argument>,<argument pos:start="785:48" pos:end="785:48"><expr pos:start="785:48" pos:end="785:48"><literal type="number" pos:start="785:48" pos:end="785:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="789:11" pos:end="799:9">else if <condition pos:start="789:19" pos:end="789:46">(<expr pos:start="789:20" pos:end="789:45"><operator pos:start="789:20" pos:end="789:20">!</operator><call pos:start="789:21" pos:end="789:45"><name pos:start="789:21" pos:end="789:30">strcasecmp</name><argument_list pos:start="789:31" pos:end="789:45">(<argument pos:start="789:32" pos:end="789:34"><expr pos:start="789:32" pos:end="789:34"><name pos:start="789:32" pos:end="789:34">cmd</name></expr></argument>, <argument pos:start="789:37" pos:end="789:44"><expr pos:start="789:37" pos:end="789:44"><literal type="string" pos:start="789:37" pos:end="789:44">"Strict"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="789:48" pos:end="799:9">{<block_content pos:start="791:13" pos:end="797:13">

            <if_stmt pos:start="791:13" pos:end="797:13"><if pos:start="791:13" pos:end="797:13">if <condition pos:start="791:16" pos:end="791:23">(<expr pos:start="791:17" pos:end="791:22"><name pos:start="791:17" pos:end="791:22">stream</name></expr>)</condition> <block pos:start="791:25" pos:end="797:13">{<block_content pos:start="793:17" pos:end="795:60">

                <expr_stmt pos:start="793:17" pos:end="793:46"><expr pos:start="793:17" pos:end="793:45"><call pos:start="793:17" pos:end="793:45"><name pos:start="793:17" pos:end="793:23">get_arg</name><argument_list pos:start="793:24" pos:end="793:45">(<argument pos:start="793:25" pos:end="793:27"><expr pos:start="793:25" pos:end="793:27"><name pos:start="793:25" pos:end="793:27">arg</name></expr></argument>, <argument pos:start="793:30" pos:end="793:40"><expr pos:start="793:30" pos:end="793:40"><sizeof pos:start="793:30" pos:end="793:40">sizeof<argument_list pos:start="793:36" pos:end="793:40">(<argument pos:start="793:37" pos:end="793:39"><expr pos:start="793:37" pos:end="793:39"><name pos:start="793:37" pos:end="793:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="793:43" pos:end="793:44"><expr pos:start="793:43" pos:end="793:44"><operator pos:start="793:43" pos:end="793:43">&amp;</operator><name pos:start="793:44" pos:end="793:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:60"><expr pos:start="795:17" pos:end="795:59"><name pos:start="795:17" pos:end="795:47"><name pos:start="795:17" pos:end="795:25">video_enc</name><operator pos:start="795:26" pos:end="795:26">.</operator><name pos:start="795:27" pos:end="795:47">strict_std_compliance</name></name> <operator pos:start="795:49" pos:end="795:49">=</operator> <call pos:start="795:51" pos:end="795:59"><name pos:start="795:51" pos:end="795:54">atoi</name><argument_list pos:start="795:55" pos:end="795:59">(<argument pos:start="795:56" pos:end="795:58"><expr pos:start="795:56" pos:end="795:58"><name pos:start="795:56" pos:end="795:58">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="799:11" pos:end="809:9">else if <condition pos:start="799:19" pos:end="799:55">(<expr pos:start="799:20" pos:end="799:54"><operator pos:start="799:20" pos:end="799:20">!</operator><call pos:start="799:21" pos:end="799:54"><name pos:start="799:21" pos:end="799:30">strcasecmp</name><argument_list pos:start="799:31" pos:end="799:54">(<argument pos:start="799:32" pos:end="799:34"><expr pos:start="799:32" pos:end="799:34"><name pos:start="799:32" pos:end="799:34">cmd</name></expr></argument>, <argument pos:start="799:37" pos:end="799:53"><expr pos:start="799:37" pos:end="799:53"><literal type="string" pos:start="799:37" pos:end="799:53">"VideoBufferSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="799:57" pos:end="809:9">{<block_content pos:start="801:13" pos:end="807:13">

            <if_stmt pos:start="801:13" pos:end="807:13"><if pos:start="801:13" pos:end="807:13">if <condition pos:start="801:16" pos:end="801:23">(<expr pos:start="801:17" pos:end="801:22"><name pos:start="801:17" pos:end="801:22">stream</name></expr>)</condition> <block pos:start="801:25" pos:end="807:13">{<block_content pos:start="803:17" pos:end="805:62">

                <expr_stmt pos:start="803:17" pos:end="803:46"><expr pos:start="803:17" pos:end="803:45"><call pos:start="803:17" pos:end="803:45"><name pos:start="803:17" pos:end="803:23">get_arg</name><argument_list pos:start="803:24" pos:end="803:45">(<argument pos:start="803:25" pos:end="803:27"><expr pos:start="803:25" pos:end="803:27"><name pos:start="803:25" pos:end="803:27">arg</name></expr></argument>, <argument pos:start="803:30" pos:end="803:40"><expr pos:start="803:30" pos:end="803:40"><sizeof pos:start="803:30" pos:end="803:40">sizeof<argument_list pos:start="803:36" pos:end="803:40">(<argument pos:start="803:37" pos:end="803:39"><expr pos:start="803:37" pos:end="803:39"><name pos:start="803:37" pos:end="803:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="803:43" pos:end="803:44"><expr pos:start="803:43" pos:end="803:44"><operator pos:start="803:43" pos:end="803:43">&amp;</operator><name pos:start="803:44" pos:end="803:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="805:17" pos:end="805:62"><expr pos:start="805:17" pos:end="805:61"><name pos:start="805:17" pos:end="805:40"><name pos:start="805:17" pos:end="805:25">video_enc</name><operator pos:start="805:26" pos:end="805:26">.</operator><name pos:start="805:27" pos:end="805:40">rc_buffer_size</name></name> <operator pos:start="805:42" pos:end="805:42">=</operator> <call pos:start="805:44" pos:end="805:52"><name pos:start="805:44" pos:end="805:47">atoi</name><argument_list pos:start="805:48" pos:end="805:52">(<argument pos:start="805:49" pos:end="805:51"><expr pos:start="805:49" pos:end="805:51"><name pos:start="805:49" pos:end="805:51">arg</name></expr></argument>)</argument_list></call> <operator pos:start="805:54" pos:end="805:54">*</operator> <literal type="number" pos:start="805:56" pos:end="805:56">8</literal><operator pos:start="805:57" pos:end="805:57">*</operator><literal type="number" pos:start="805:58" pos:end="805:61">1024</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="809:11" pos:end="819:9">else if <condition pos:start="809:19" pos:end="809:61">(<expr pos:start="809:20" pos:end="809:60"><operator pos:start="809:20" pos:end="809:20">!</operator><call pos:start="809:21" pos:end="809:60"><name pos:start="809:21" pos:end="809:30">strcasecmp</name><argument_list pos:start="809:31" pos:end="809:60">(<argument pos:start="809:32" pos:end="809:34"><expr pos:start="809:32" pos:end="809:34"><name pos:start="809:32" pos:end="809:34">cmd</name></expr></argument>, <argument pos:start="809:37" pos:end="809:59"><expr pos:start="809:37" pos:end="809:59"><literal type="string" pos:start="809:37" pos:end="809:59">"VideoBitRateTolerance"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="809:63" pos:end="819:9">{<block_content pos:start="811:13" pos:end="817:13">

            <if_stmt pos:start="811:13" pos:end="817:13"><if pos:start="811:13" pos:end="817:13">if <condition pos:start="811:16" pos:end="811:23">(<expr pos:start="811:17" pos:end="811:22"><name pos:start="811:17" pos:end="811:22">stream</name></expr>)</condition> <block pos:start="811:25" pos:end="817:13">{<block_content pos:start="813:17" pos:end="815:64">

                <expr_stmt pos:start="813:17" pos:end="813:46"><expr pos:start="813:17" pos:end="813:45"><call pos:start="813:17" pos:end="813:45"><name pos:start="813:17" pos:end="813:23">get_arg</name><argument_list pos:start="813:24" pos:end="813:45">(<argument pos:start="813:25" pos:end="813:27"><expr pos:start="813:25" pos:end="813:27"><name pos:start="813:25" pos:end="813:27">arg</name></expr></argument>, <argument pos:start="813:30" pos:end="813:40"><expr pos:start="813:30" pos:end="813:40"><sizeof pos:start="813:30" pos:end="813:40">sizeof<argument_list pos:start="813:36" pos:end="813:40">(<argument pos:start="813:37" pos:end="813:39"><expr pos:start="813:37" pos:end="813:39"><name pos:start="813:37" pos:end="813:39">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="813:43" pos:end="813:44"><expr pos:start="813:43" pos:end="813:44"><operator pos:start="813:43" pos:end="813:43">&amp;</operator><name pos:start="813:44" pos:end="813:44">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="815:17" pos:end="815:64"><expr pos:start="815:17" pos:end="815:63"><name pos:start="815:17" pos:end="815:44"><name pos:start="815:17" pos:end="815:25">video_enc</name><operator pos:start="815:26" pos:end="815:26">.</operator><name pos:start="815:27" pos:end="815:44">bit_rate_tolerance</name></name> <operator pos:start="815:46" pos:end="815:46">=</operator> <call pos:start="815:48" pos:end="815:56"><name pos:start="815:48" pos:end="815:51">atoi</name><argument_list pos:start="815:52" pos:end="815:56">(<argument pos:start="815:53" pos:end="815:55"><expr pos:start="815:53" pos:end="815:55"><name pos:start="815:53" pos:end="815:55">arg</name></expr></argument>)</argument_list></call> <operator pos:start="815:58" pos:end="815:58">*</operator> <literal type="number" pos:start="815:60" pos:end="815:63">1000</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="819:11" pos:end="829:9">else if <condition pos:start="819:19" pos:end="819:52">(<expr pos:start="819:20" pos:end="819:51"><operator pos:start="819:20" pos:end="819:20">!</operator><call pos:start="819:21" pos:end="819:51"><name pos:start="819:21" pos:end="819:30">strcasecmp</name><argument_list pos:start="819:31" pos:end="819:51">(<argument pos:start="819:32" pos:end="819:34"><expr pos:start="819:32" pos:end="819:34"><name pos:start="819:32" pos:end="819:34">cmd</name></expr></argument>, <argument pos:start="819:37" pos:end="819:50"><expr pos:start="819:37" pos:end="819:50"><literal type="string" pos:start="819:37" pos:end="819:50">"VideoBitRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="819:54" pos:end="829:9">{<block_content pos:start="821:13" pos:end="827:13">

            <expr_stmt pos:start="821:13" pos:end="821:42"><expr pos:start="821:13" pos:end="821:41"><call pos:start="821:13" pos:end="821:41"><name pos:start="821:13" pos:end="821:19">get_arg</name><argument_list pos:start="821:20" pos:end="821:41">(<argument pos:start="821:21" pos:end="821:23"><expr pos:start="821:21" pos:end="821:23"><name pos:start="821:21" pos:end="821:23">arg</name></expr></argument>, <argument pos:start="821:26" pos:end="821:36"><expr pos:start="821:26" pos:end="821:36"><sizeof pos:start="821:26" pos:end="821:36">sizeof<argument_list pos:start="821:32" pos:end="821:36">(<argument pos:start="821:33" pos:end="821:35"><expr pos:start="821:33" pos:end="821:35"><name pos:start="821:33" pos:end="821:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="821:39" pos:end="821:40"><expr pos:start="821:39" pos:end="821:40"><operator pos:start="821:39" pos:end="821:39">&amp;</operator><name pos:start="821:40" pos:end="821:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="823:13" pos:end="827:13"><if pos:start="823:13" pos:end="827:13">if <condition pos:start="823:16" pos:end="823:23">(<expr pos:start="823:17" pos:end="823:22"><name pos:start="823:17" pos:end="823:22">stream</name></expr>)</condition> <block pos:start="823:25" pos:end="827:13">{<block_content pos:start="825:17" pos:end="825:54">

                <expr_stmt pos:start="825:17" pos:end="825:54"><expr pos:start="825:17" pos:end="825:53"><name pos:start="825:17" pos:end="825:34"><name pos:start="825:17" pos:end="825:25">video_enc</name><operator pos:start="825:26" pos:end="825:26">.</operator><name pos:start="825:27" pos:end="825:34">bit_rate</name></name> <operator pos:start="825:36" pos:end="825:36">=</operator> <call pos:start="825:38" pos:end="825:46"><name pos:start="825:38" pos:end="825:41">atoi</name><argument_list pos:start="825:42" pos:end="825:46">(<argument pos:start="825:43" pos:end="825:45"><expr pos:start="825:43" pos:end="825:45"><name pos:start="825:43" pos:end="825:45">arg</name></expr></argument>)</argument_list></call> <operator pos:start="825:48" pos:end="825:48">*</operator> <literal type="number" pos:start="825:50" pos:end="825:53">1000</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="829:11" pos:end="851:9">else if <condition pos:start="829:19" pos:end="829:49">(<expr pos:start="829:20" pos:end="829:48"><operator pos:start="829:20" pos:end="829:20">!</operator><call pos:start="829:21" pos:end="829:48"><name pos:start="829:21" pos:end="829:30">strcasecmp</name><argument_list pos:start="829:31" pos:end="829:48">(<argument pos:start="829:32" pos:end="829:34"><expr pos:start="829:32" pos:end="829:34"><name pos:start="829:32" pos:end="829:34">cmd</name></expr></argument>, <argument pos:start="829:37" pos:end="829:47"><expr pos:start="829:37" pos:end="829:47"><literal type="string" pos:start="829:37" pos:end="829:47">"VideoSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="829:51" pos:end="851:9">{<block_content pos:start="831:13" pos:end="849:13">

            <expr_stmt pos:start="831:13" pos:end="831:42"><expr pos:start="831:13" pos:end="831:41"><call pos:start="831:13" pos:end="831:41"><name pos:start="831:13" pos:end="831:19">get_arg</name><argument_list pos:start="831:20" pos:end="831:41">(<argument pos:start="831:21" pos:end="831:23"><expr pos:start="831:21" pos:end="831:23"><name pos:start="831:21" pos:end="831:23">arg</name></expr></argument>, <argument pos:start="831:26" pos:end="831:36"><expr pos:start="831:26" pos:end="831:36"><sizeof pos:start="831:26" pos:end="831:36">sizeof<argument_list pos:start="831:32" pos:end="831:36">(<argument pos:start="831:33" pos:end="831:35"><expr pos:start="831:33" pos:end="831:35"><name pos:start="831:33" pos:end="831:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="831:39" pos:end="831:40"><expr pos:start="831:39" pos:end="831:40"><operator pos:start="831:39" pos:end="831:39">&amp;</operator><name pos:start="831:40" pos:end="831:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="833:13" pos:end="849:13"><if pos:start="833:13" pos:end="849:13">if <condition pos:start="833:16" pos:end="833:23">(<expr pos:start="833:17" pos:end="833:22"><name pos:start="833:17" pos:end="833:22">stream</name></expr>)</condition> <block pos:start="833:25" pos:end="849:13">{<block_content pos:start="835:17" pos:end="847:17">

                <expr_stmt pos:start="835:17" pos:end="835:84"><expr pos:start="835:17" pos:end="835:83"><call pos:start="835:17" pos:end="835:83"><name pos:start="835:17" pos:end="835:41">av_parse_video_frame_size</name><argument_list pos:start="835:42" pos:end="835:83">(<argument pos:start="835:43" pos:end="835:58"><expr pos:start="835:43" pos:end="835:58"><operator pos:start="835:43" pos:end="835:43">&amp;</operator><name pos:start="835:44" pos:end="835:58"><name pos:start="835:44" pos:end="835:52">video_enc</name><operator pos:start="835:53" pos:end="835:53">.</operator><name pos:start="835:54" pos:end="835:58">width</name></name></expr></argument>, <argument pos:start="835:61" pos:end="835:77"><expr pos:start="835:61" pos:end="835:77"><operator pos:start="835:61" pos:end="835:61">&amp;</operator><name pos:start="835:62" pos:end="835:77"><name pos:start="835:62" pos:end="835:70">video_enc</name><operator pos:start="835:71" pos:end="835:71">.</operator><name pos:start="835:72" pos:end="835:77">height</name></name></expr></argument>, <argument pos:start="835:80" pos:end="835:82"><expr pos:start="835:80" pos:end="835:82"><name pos:start="835:80" pos:end="835:82">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="837:17" pos:end="847:17"><if pos:start="837:17" pos:end="847:17">if <condition pos:start="837:20" pos:end="839:49">(<expr pos:start="837:21" pos:end="839:48"><operator pos:start="837:21" pos:end="837:21">(</operator><name pos:start="837:22" pos:end="837:36"><name pos:start="837:22" pos:end="837:30">video_enc</name><operator pos:start="837:31" pos:end="837:31">.</operator><name pos:start="837:32" pos:end="837:36">width</name></name> <operator pos:start="837:38" pos:end="837:38">%</operator> <literal type="number" pos:start="837:40" pos:end="837:41">16</literal><operator pos:start="837:42" pos:end="837:42">)</operator> <operator pos:start="837:44" pos:end="837:45">!=</operator> <literal type="number" pos:start="837:47" pos:end="837:47">0</literal> <operator pos:start="837:49" pos:end="837:50">||</operator>

                    <operator pos:start="839:21" pos:end="839:21">(</operator><name pos:start="839:22" pos:end="839:37"><name pos:start="839:22" pos:end="839:30">video_enc</name><operator pos:start="839:31" pos:end="839:31">.</operator><name pos:start="839:32" pos:end="839:37">height</name></name> <operator pos:start="839:39" pos:end="839:39">%</operator> <literal type="number" pos:start="839:41" pos:end="839:42">16</literal><operator pos:start="839:43" pos:end="839:43">)</operator> <operator pos:start="839:45" pos:end="839:46">!=</operator> <literal type="number" pos:start="839:48" pos:end="839:48">0</literal></expr>)</condition> <block pos:start="839:51" pos:end="847:17">{<block_content pos:start="841:21" pos:end="845:29">

                    <expr_stmt pos:start="841:21" pos:end="843:48"><expr pos:start="841:21" pos:end="843:47"><call pos:start="841:21" pos:end="843:47"><name pos:start="841:21" pos:end="841:27">fprintf</name><argument_list pos:start="841:28" pos:end="843:47">(<argument pos:start="841:29" pos:end="841:34"><expr pos:start="841:29" pos:end="841:34"><name pos:start="841:29" pos:end="841:34">stderr</name></expr></argument>, <argument pos:start="841:37" pos:end="841:82"><expr pos:start="841:37" pos:end="841:82"><literal type="string" pos:start="841:37" pos:end="841:82">"%s:%d: Image size must be a multiple of 16\n"</literal></expr></argument>,

                            <argument pos:start="843:29" pos:end="843:36"><expr pos:start="843:29" pos:end="843:36"><name pos:start="843:29" pos:end="843:36">filename</name></expr></argument>, <argument pos:start="843:39" pos:end="843:46"><expr pos:start="843:39" pos:end="843:46"><name pos:start="843:39" pos:end="843:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="845:21" pos:end="845:29"><expr pos:start="845:21" pos:end="845:28"><name pos:start="845:21" pos:end="845:26">errors</name><operator pos:start="845:27" pos:end="845:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="851:11" pos:end="875:9">else if <condition pos:start="851:19" pos:end="851:54">(<expr pos:start="851:20" pos:end="851:53"><operator pos:start="851:20" pos:end="851:20">!</operator><call pos:start="851:21" pos:end="851:53"><name pos:start="851:21" pos:end="851:30">strcasecmp</name><argument_list pos:start="851:31" pos:end="851:53">(<argument pos:start="851:32" pos:end="851:34"><expr pos:start="851:32" pos:end="851:34"><name pos:start="851:32" pos:end="851:34">cmd</name></expr></argument>, <argument pos:start="851:37" pos:end="851:52"><expr pos:start="851:37" pos:end="851:52"><literal type="string" pos:start="851:37" pos:end="851:52">"VideoFrameRate"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="851:56" pos:end="875:9">{<block_content pos:start="853:13" pos:end="873:13">

            <expr_stmt pos:start="853:13" pos:end="853:42"><expr pos:start="853:13" pos:end="853:41"><call pos:start="853:13" pos:end="853:41"><name pos:start="853:13" pos:end="853:19">get_arg</name><argument_list pos:start="853:20" pos:end="853:41">(<argument pos:start="853:21" pos:end="853:23"><expr pos:start="853:21" pos:end="853:23"><name pos:start="853:21" pos:end="853:23">arg</name></expr></argument>, <argument pos:start="853:26" pos:end="853:36"><expr pos:start="853:26" pos:end="853:36"><sizeof pos:start="853:26" pos:end="853:36">sizeof<argument_list pos:start="853:32" pos:end="853:36">(<argument pos:start="853:33" pos:end="853:35"><expr pos:start="853:33" pos:end="853:35"><name pos:start="853:33" pos:end="853:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="853:39" pos:end="853:40"><expr pos:start="853:39" pos:end="853:40"><operator pos:start="853:39" pos:end="853:39">&amp;</operator><name pos:start="853:40" pos:end="853:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="855:13" pos:end="873:13"><if pos:start="855:13" pos:end="873:13">if <condition pos:start="855:16" pos:end="855:23">(<expr pos:start="855:17" pos:end="855:22"><name pos:start="855:17" pos:end="855:22">stream</name></expr>)</condition> <block pos:start="855:25" pos:end="873:13">{<block_content pos:start="857:17" pos:end="871:17">

                <decl_stmt pos:start="857:17" pos:end="857:38"><decl pos:start="857:17" pos:end="857:37"><type pos:start="857:17" pos:end="857:26"><name pos:start="857:17" pos:end="857:26">AVRational</name></type> <name pos:start="857:28" pos:end="857:37">frame_rate</name></decl>;</decl_stmt>

                <if_stmt pos:start="859:17" pos:end="871:17"><if pos:start="859:17" pos:end="865:17">if <condition pos:start="859:20" pos:end="859:68">(<expr pos:start="859:21" pos:end="859:67"><call pos:start="859:21" pos:end="859:63"><name pos:start="859:21" pos:end="859:45">av_parse_video_frame_rate</name><argument_list pos:start="859:46" pos:end="859:63">(<argument pos:start="859:47" pos:end="859:57"><expr pos:start="859:47" pos:end="859:57"><operator pos:start="859:47" pos:end="859:47">&amp;</operator><name pos:start="859:48" pos:end="859:57">frame_rate</name></expr></argument>, <argument pos:start="859:60" pos:end="859:62"><expr pos:start="859:60" pos:end="859:62"><name pos:start="859:60" pos:end="859:62">arg</name></expr></argument>)</argument_list></call> <operator pos:start="859:65" pos:end="859:65">&lt;</operator> <literal type="number" pos:start="859:67" pos:end="859:67">0</literal></expr>)</condition> <block pos:start="859:70" pos:end="865:17">{<block_content pos:start="861:21" pos:end="863:29">

                    <expr_stmt pos:start="861:21" pos:end="861:62"><expr pos:start="861:21" pos:end="861:61"><call pos:start="861:21" pos:end="861:61"><name pos:start="861:21" pos:end="861:27">fprintf</name><argument_list pos:start="861:28" pos:end="861:61">(<argument pos:start="861:29" pos:end="861:34"><expr pos:start="861:29" pos:end="861:34"><name pos:start="861:29" pos:end="861:34">stderr</name></expr></argument>, <argument pos:start="861:37" pos:end="861:60"><expr pos:start="861:37" pos:end="861:60"><literal type="string" pos:start="861:37" pos:end="861:60">"Incorrect frame rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="863:21" pos:end="863:29"><expr pos:start="863:21" pos:end="863:28"><name pos:start="863:21" pos:end="863:26">errors</name><operator pos:start="863:27" pos:end="863:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="865:19" pos:end="871:17">else <block pos:start="865:24" pos:end="871:17">{<block_content pos:start="867:21" pos:end="869:61">

                    <expr_stmt pos:start="867:21" pos:end="867:61"><expr pos:start="867:21" pos:end="867:60"><name pos:start="867:21" pos:end="867:43"><name pos:start="867:21" pos:end="867:29">video_enc</name><operator pos:start="867:30" pos:end="867:30">.</operator><name pos:start="867:31" pos:end="867:39">time_base</name><operator pos:start="867:40" pos:end="867:40">.</operator><name pos:start="867:41" pos:end="867:43">num</name></name> <operator pos:start="867:45" pos:end="867:45">=</operator> <name pos:start="867:47" pos:end="867:60"><name pos:start="867:47" pos:end="867:56">frame_rate</name><operator pos:start="867:57" pos:end="867:57">.</operator><name pos:start="867:58" pos:end="867:60">den</name></name></expr>;</expr_stmt>

                    <expr_stmt pos:start="869:21" pos:end="869:61"><expr pos:start="869:21" pos:end="869:60"><name pos:start="869:21" pos:end="869:43"><name pos:start="869:21" pos:end="869:29">video_enc</name><operator pos:start="869:30" pos:end="869:30">.</operator><name pos:start="869:31" pos:end="869:39">time_base</name><operator pos:start="869:40" pos:end="869:40">.</operator><name pos:start="869:41" pos:end="869:43">den</name></name> <operator pos:start="869:45" pos:end="869:45">=</operator> <name pos:start="869:47" pos:end="869:60"><name pos:start="869:47" pos:end="869:56">frame_rate</name><operator pos:start="869:57" pos:end="869:57">.</operator><name pos:start="869:58" pos:end="869:60">num</name></name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="875:11" pos:end="883:9">else if <condition pos:start="875:19" pos:end="875:52">(<expr pos:start="875:20" pos:end="875:51"><operator pos:start="875:20" pos:end="875:20">!</operator><call pos:start="875:21" pos:end="875:51"><name pos:start="875:21" pos:end="875:30">strcasecmp</name><argument_list pos:start="875:31" pos:end="875:51">(<argument pos:start="875:32" pos:end="875:34"><expr pos:start="875:32" pos:end="875:34"><name pos:start="875:32" pos:end="875:34">cmd</name></expr></argument>, <argument pos:start="875:37" pos:end="875:50"><expr pos:start="875:37" pos:end="875:50"><literal type="string" pos:start="875:37" pos:end="875:50">"VideoGopSize"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="875:54" pos:end="883:9">{<block_content pos:start="877:13" pos:end="881:47">

            <expr_stmt pos:start="877:13" pos:end="877:42"><expr pos:start="877:13" pos:end="877:41"><call pos:start="877:13" pos:end="877:41"><name pos:start="877:13" pos:end="877:19">get_arg</name><argument_list pos:start="877:20" pos:end="877:41">(<argument pos:start="877:21" pos:end="877:23"><expr pos:start="877:21" pos:end="877:23"><name pos:start="877:21" pos:end="877:23">arg</name></expr></argument>, <argument pos:start="877:26" pos:end="877:36"><expr pos:start="877:26" pos:end="877:36"><sizeof pos:start="877:26" pos:end="877:36">sizeof<argument_list pos:start="877:32" pos:end="877:36">(<argument pos:start="877:33" pos:end="877:35"><expr pos:start="877:33" pos:end="877:35"><name pos:start="877:33" pos:end="877:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="877:39" pos:end="877:40"><expr pos:start="877:39" pos:end="877:40"><operator pos:start="877:39" pos:end="877:39">&amp;</operator><name pos:start="877:40" pos:end="877:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="879:13" pos:end="881:47"><if pos:start="879:13" pos:end="881:47">if <condition pos:start="879:16" pos:end="879:23">(<expr pos:start="879:17" pos:end="879:22"><name pos:start="879:17" pos:end="879:22">stream</name></expr>)</condition><block type="pseudo" pos:start="881:17" pos:end="881:47"><block_content pos:start="881:17" pos:end="881:47">

                <expr_stmt pos:start="881:17" pos:end="881:47"><expr pos:start="881:17" pos:end="881:46"><name pos:start="881:17" pos:end="881:34"><name pos:start="881:17" pos:end="881:25">video_enc</name><operator pos:start="881:26" pos:end="881:26">.</operator><name pos:start="881:27" pos:end="881:34">gop_size</name></name> <operator pos:start="881:36" pos:end="881:36">=</operator> <call pos:start="881:38" pos:end="881:46"><name pos:start="881:38" pos:end="881:41">atoi</name><argument_list pos:start="881:42" pos:end="881:46">(<argument pos:start="881:43" pos:end="881:45"><expr pos:start="881:43" pos:end="881:45"><name pos:start="881:43" pos:end="881:45">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="883:11" pos:end="889:9">else if <condition pos:start="883:19" pos:end="883:54">(<expr pos:start="883:20" pos:end="883:53"><operator pos:start="883:20" pos:end="883:20">!</operator><call pos:start="883:21" pos:end="883:53"><name pos:start="883:21" pos:end="883:30">strcasecmp</name><argument_list pos:start="883:31" pos:end="883:53">(<argument pos:start="883:32" pos:end="883:34"><expr pos:start="883:32" pos:end="883:34"><name pos:start="883:32" pos:end="883:34">cmd</name></expr></argument>, <argument pos:start="883:37" pos:end="883:52"><expr pos:start="883:37" pos:end="883:52"><literal type="string" pos:start="883:37" pos:end="883:52">"VideoIntraOnly"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="883:56" pos:end="889:9">{<block_content pos:start="885:13" pos:end="887:39">

            <if_stmt pos:start="885:13" pos:end="887:39"><if pos:start="885:13" pos:end="887:39">if <condition pos:start="885:16" pos:end="885:23">(<expr pos:start="885:17" pos:end="885:22"><name pos:start="885:17" pos:end="885:22">stream</name></expr>)</condition><block type="pseudo" pos:start="887:17" pos:end="887:39"><block_content pos:start="887:17" pos:end="887:39">

                <expr_stmt pos:start="887:17" pos:end="887:39"><expr pos:start="887:17" pos:end="887:38"><name pos:start="887:17" pos:end="887:34"><name pos:start="887:17" pos:end="887:25">video_enc</name><operator pos:start="887:26" pos:end="887:26">.</operator><name pos:start="887:27" pos:end="887:34">gop_size</name></name> <operator pos:start="887:36" pos:end="887:36">=</operator> <literal type="number" pos:start="887:38" pos:end="887:38">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="889:11" pos:end="895:9">else if <condition pos:start="889:19" pos:end="889:56">(<expr pos:start="889:20" pos:end="889:55"><operator pos:start="889:20" pos:end="889:20">!</operator><call pos:start="889:21" pos:end="889:55"><name pos:start="889:21" pos:end="889:30">strcasecmp</name><argument_list pos:start="889:31" pos:end="889:55">(<argument pos:start="889:32" pos:end="889:34"><expr pos:start="889:32" pos:end="889:34"><name pos:start="889:32" pos:end="889:34">cmd</name></expr></argument>, <argument pos:start="889:37" pos:end="889:54"><expr pos:start="889:37" pos:end="889:54"><literal type="string" pos:start="889:37" pos:end="889:54">"VideoHighQuality"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="889:58" pos:end="895:9">{<block_content pos:start="891:13" pos:end="893:60">

            <if_stmt pos:start="891:13" pos:end="893:60"><if pos:start="891:13" pos:end="893:60">if <condition pos:start="891:16" pos:end="891:23">(<expr pos:start="891:17" pos:end="891:22"><name pos:start="891:17" pos:end="891:22">stream</name></expr>)</condition><block type="pseudo" pos:start="893:17" pos:end="893:60"><block_content pos:start="893:17" pos:end="893:60">

                <expr_stmt pos:start="893:17" pos:end="893:60"><expr pos:start="893:17" pos:end="893:59"><name pos:start="893:17" pos:end="893:37"><name pos:start="893:17" pos:end="893:25">video_enc</name><operator pos:start="893:26" pos:end="893:26">.</operator><name pos:start="893:27" pos:end="893:37">mb_decision</name></name> <operator pos:start="893:39" pos:end="893:39">=</operator> <name pos:start="893:41" pos:end="893:59">FF_MB_DECISION_BITS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="895:11" pos:end="905:9">else if <condition pos:start="895:19" pos:end="895:58">(<expr pos:start="895:20" pos:end="895:57"><operator pos:start="895:20" pos:end="895:20">!</operator><call pos:start="895:21" pos:end="895:57"><name pos:start="895:21" pos:end="895:30">strcasecmp</name><argument_list pos:start="895:31" pos:end="895:57">(<argument pos:start="895:32" pos:end="895:34"><expr pos:start="895:32" pos:end="895:34"><name pos:start="895:32" pos:end="895:34">cmd</name></expr></argument>, <argument pos:start="895:37" pos:end="895:56"><expr pos:start="895:37" pos:end="895:56"><literal type="string" pos:start="895:37" pos:end="895:56">"Video4MotionVector"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="895:60" pos:end="905:9">{<block_content pos:start="897:13" pos:end="903:13">

            <if_stmt pos:start="897:13" pos:end="903:13"><if pos:start="897:13" pos:end="903:13">if <condition pos:start="897:16" pos:end="897:23">(<expr pos:start="897:17" pos:end="897:22"><name pos:start="897:17" pos:end="897:22">stream</name></expr>)</condition> <block pos:start="897:25" pos:end="903:13">{<block_content pos:start="899:17" pos:end="901:50">

                <expr_stmt pos:start="899:17" pos:end="899:60"><expr pos:start="899:17" pos:end="899:59"><name pos:start="899:17" pos:end="899:37"><name pos:start="899:17" pos:end="899:25">video_enc</name><operator pos:start="899:26" pos:end="899:26">.</operator><name pos:start="899:27" pos:end="899:37">mb_decision</name></name> <operator pos:start="899:39" pos:end="899:39">=</operator> <name pos:start="899:41" pos:end="899:59">FF_MB_DECISION_BITS</name></expr>;</expr_stmt> <comment type="line" pos:start="899:62" pos:end="899:75">//FIXME remove</comment>

                <expr_stmt pos:start="901:17" pos:end="901:50"><expr pos:start="901:17" pos:end="901:49"><name pos:start="901:17" pos:end="901:31"><name pos:start="901:17" pos:end="901:25">video_enc</name><operator pos:start="901:26" pos:end="901:26">.</operator><name pos:start="901:27" pos:end="901:31">flags</name></name> <operator pos:start="901:33" pos:end="901:34">|=</operator> <name pos:start="901:36" pos:end="901:49">CODEC_FLAG_4MV</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="905:11" pos:end="941:9">else if <condition pos:start="905:19" pos:end="907:53">(<expr pos:start="905:20" pos:end="907:52"><operator pos:start="905:20" pos:end="905:20">!</operator><call pos:start="905:21" pos:end="905:52"><name pos:start="905:21" pos:end="905:30">strcasecmp</name><argument_list pos:start="905:31" pos:end="905:52">(<argument pos:start="905:32" pos:end="905:34"><expr pos:start="905:32" pos:end="905:34"><name pos:start="905:32" pos:end="905:34">cmd</name></expr></argument>, <argument pos:start="905:37" pos:end="905:51"><expr pos:start="905:37" pos:end="905:51"><literal type="string" pos:start="905:37" pos:end="905:51">"AVOptionVideo"</literal></expr></argument>)</argument_list></call> <operator pos:start="905:54" pos:end="905:55">||</operator>

                   <operator pos:start="907:20" pos:end="907:20">!</operator><call pos:start="907:21" pos:end="907:52"><name pos:start="907:21" pos:end="907:30">strcasecmp</name><argument_list pos:start="907:31" pos:end="907:52">(<argument pos:start="907:32" pos:end="907:34"><expr pos:start="907:32" pos:end="907:34"><name pos:start="907:32" pos:end="907:34">cmd</name></expr></argument>, <argument pos:start="907:37" pos:end="907:51"><expr pos:start="907:37" pos:end="907:51"><literal type="string" pos:start="907:37" pos:end="907:51">"AVOptionAudio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="907:55" pos:end="941:9">{<block_content pos:start="909:13" pos:end="939:13">

            <decl_stmt pos:start="909:13" pos:end="909:28"><decl pos:start="909:13" pos:end="909:27"><type pos:start="909:13" pos:end="909:16"><name pos:start="909:13" pos:end="909:16">char</name></type> <name pos:start="909:18" pos:end="909:27"><name pos:start="909:18" pos:end="909:21">arg2</name><index pos:start="909:22" pos:end="909:27">[<expr pos:start="909:23" pos:end="909:26"><literal type="number" pos:start="909:23" pos:end="909:26">1024</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="911:13" pos:end="911:34"><decl pos:start="911:13" pos:end="911:33"><type pos:start="911:13" pos:end="911:28"><name pos:start="911:13" pos:end="911:26">AVCodecContext</name> <modifier pos:start="911:28" pos:end="911:28">*</modifier></type><name pos:start="911:29" pos:end="911:33">avctx</name></decl>;</decl_stmt>

            <decl_stmt pos:start="913:13" pos:end="913:21"><decl pos:start="913:13" pos:end="913:20"><type pos:start="913:13" pos:end="913:15"><name pos:start="913:13" pos:end="913:15">int</name></type> <name pos:start="913:17" pos:end="913:20">type</name></decl>;</decl_stmt>

            <expr_stmt pos:start="915:13" pos:end="915:42"><expr pos:start="915:13" pos:end="915:41"><call pos:start="915:13" pos:end="915:41"><name pos:start="915:13" pos:end="915:19">get_arg</name><argument_list pos:start="915:20" pos:end="915:41">(<argument pos:start="915:21" pos:end="915:23"><expr pos:start="915:21" pos:end="915:23"><name pos:start="915:21" pos:end="915:23">arg</name></expr></argument>, <argument pos:start="915:26" pos:end="915:36"><expr pos:start="915:26" pos:end="915:36"><sizeof pos:start="915:26" pos:end="915:36">sizeof<argument_list pos:start="915:32" pos:end="915:36">(<argument pos:start="915:33" pos:end="915:35"><expr pos:start="915:33" pos:end="915:35"><name pos:start="915:33" pos:end="915:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="915:39" pos:end="915:40"><expr pos:start="915:39" pos:end="915:40"><operator pos:start="915:39" pos:end="915:39">&amp;</operator><name pos:start="915:40" pos:end="915:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="917:13" pos:end="917:44"><expr pos:start="917:13" pos:end="917:43"><call pos:start="917:13" pos:end="917:43"><name pos:start="917:13" pos:end="917:19">get_arg</name><argument_list pos:start="917:20" pos:end="917:43">(<argument pos:start="917:21" pos:end="917:24"><expr pos:start="917:21" pos:end="917:24"><name pos:start="917:21" pos:end="917:24">arg2</name></expr></argument>, <argument pos:start="917:27" pos:end="917:38"><expr pos:start="917:27" pos:end="917:38"><sizeof pos:start="917:27" pos:end="917:38">sizeof<argument_list pos:start="917:33" pos:end="917:38">(<argument pos:start="917:34" pos:end="917:37"><expr pos:start="917:34" pos:end="917:37"><name pos:start="917:34" pos:end="917:37">arg2</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="917:41" pos:end="917:42"><expr pos:start="917:41" pos:end="917:42"><operator pos:start="917:41" pos:end="917:41">&amp;</operator><name pos:start="917:42" pos:end="917:42">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="919:13" pos:end="931:13"><if pos:start="919:13" pos:end="925:13">if <condition pos:start="919:16" pos:end="919:50">(<expr pos:start="919:17" pos:end="919:49"><operator pos:start="919:17" pos:end="919:17">!</operator><call pos:start="919:18" pos:end="919:49"><name pos:start="919:18" pos:end="919:27">strcasecmp</name><argument_list pos:start="919:28" pos:end="919:49">(<argument pos:start="919:29" pos:end="919:31"><expr pos:start="919:29" pos:end="919:31"><name pos:start="919:29" pos:end="919:31">cmd</name></expr></argument>, <argument pos:start="919:34" pos:end="919:48"><expr pos:start="919:34" pos:end="919:48"><literal type="string" pos:start="919:34" pos:end="919:48">"AVOptionVideo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="919:52" pos:end="925:13">{<block_content pos:start="921:17" pos:end="923:47">

                <expr_stmt pos:start="921:17" pos:end="921:35"><expr pos:start="921:17" pos:end="921:34"><name pos:start="921:17" pos:end="921:21">avctx</name> <operator pos:start="921:23" pos:end="921:23">=</operator> <operator pos:start="921:25" pos:end="921:25">&amp;</operator><name pos:start="921:26" pos:end="921:34">video_enc</name></expr>;</expr_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:47"><expr pos:start="923:17" pos:end="923:46"><name pos:start="923:17" pos:end="923:20">type</name> <operator pos:start="923:22" pos:end="923:22">=</operator> <name pos:start="923:24" pos:end="923:46">AV_OPT_FLAG_VIDEO_PARAM</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="925:15" pos:end="931:13">else <block pos:start="925:20" pos:end="931:13">{<block_content pos:start="927:17" pos:end="929:47">

                <expr_stmt pos:start="927:17" pos:end="927:35"><expr pos:start="927:17" pos:end="927:34"><name pos:start="927:17" pos:end="927:21">avctx</name> <operator pos:start="927:23" pos:end="927:23">=</operator> <operator pos:start="927:25" pos:end="927:25">&amp;</operator><name pos:start="927:26" pos:end="927:34">audio_enc</name></expr>;</expr_stmt>

                <expr_stmt pos:start="929:17" pos:end="929:47"><expr pos:start="929:17" pos:end="929:46"><name pos:start="929:17" pos:end="929:20">type</name> <operator pos:start="929:22" pos:end="929:22">=</operator> <name pos:start="929:24" pos:end="929:46">AV_OPT_FLAG_AUDIO_PARAM</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <if_stmt pos:start="933:13" pos:end="939:13"><if pos:start="933:13" pos:end="939:13">if <condition pos:start="933:16" pos:end="933:88">(<expr pos:start="933:17" pos:end="933:87"><call pos:start="933:17" pos:end="933:87"><name pos:start="933:17" pos:end="933:36">ffserver_opt_default</name><argument_list pos:start="933:37" pos:end="933:87">(<argument pos:start="933:38" pos:end="933:40"><expr pos:start="933:38" pos:end="933:40"><name pos:start="933:38" pos:end="933:40">arg</name></expr></argument>, <argument pos:start="933:43" pos:end="933:46"><expr pos:start="933:43" pos:end="933:46"><name pos:start="933:43" pos:end="933:46">arg2</name></expr></argument>, <argument pos:start="933:49" pos:end="933:53"><expr pos:start="933:49" pos:end="933:53"><name pos:start="933:49" pos:end="933:53">avctx</name></expr></argument>, <argument pos:start="933:56" pos:end="933:86"><expr pos:start="933:56" pos:end="933:86"><name pos:start="933:56" pos:end="933:59">type</name><operator pos:start="933:60" pos:end="933:60">|</operator><name pos:start="933:61" pos:end="933:86">AV_OPT_FLAG_ENCODING_PARAM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="933:90" pos:end="939:13">{<block_content pos:start="935:17" pos:end="937:25">

                <expr_stmt pos:start="935:17" pos:end="935:70"><expr pos:start="935:17" pos:end="935:69"><call pos:start="935:17" pos:end="935:69"><name pos:start="935:17" pos:end="935:23">fprintf</name><argument_list pos:start="935:24" pos:end="935:69">(<argument pos:start="935:25" pos:end="935:30"><expr pos:start="935:25" pos:end="935:30"><name pos:start="935:25" pos:end="935:30">stderr</name></expr></argument>, <argument pos:start="935:33" pos:end="935:57"><expr pos:start="935:33" pos:end="935:57"><literal type="string" pos:start="935:33" pos:end="935:57">"AVOption error: %s %s\n"</literal></expr></argument>, <argument pos:start="935:60" pos:end="935:62"><expr pos:start="935:60" pos:end="935:62"><name pos:start="935:60" pos:end="935:62">arg</name></expr></argument>, <argument pos:start="935:65" pos:end="935:68"><expr pos:start="935:65" pos:end="935:68"><name pos:start="935:65" pos:end="935:68">arg2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="937:17" pos:end="937:25"><expr pos:start="937:17" pos:end="937:24"><name pos:start="937:17" pos:end="937:22">errors</name><operator pos:start="937:23" pos:end="937:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="941:11" pos:end="949:9">else if <condition pos:start="941:19" pos:end="941:48">(<expr pos:start="941:20" pos:end="941:47"><operator pos:start="941:20" pos:end="941:20">!</operator><call pos:start="941:21" pos:end="941:47"><name pos:start="941:21" pos:end="941:30">strcasecmp</name><argument_list pos:start="941:31" pos:end="941:47">(<argument pos:start="941:32" pos:end="941:34"><expr pos:start="941:32" pos:end="941:34"><name pos:start="941:32" pos:end="941:34">cmd</name></expr></argument>, <argument pos:start="941:37" pos:end="941:46"><expr pos:start="941:37" pos:end="941:46"><literal type="string" pos:start="941:37" pos:end="941:46">"VideoTag"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="941:50" pos:end="949:9">{<block_content pos:start="943:13" pos:end="947:51">

            <expr_stmt pos:start="943:13" pos:end="943:42"><expr pos:start="943:13" pos:end="943:41"><call pos:start="943:13" pos:end="943:41"><name pos:start="943:13" pos:end="943:19">get_arg</name><argument_list pos:start="943:20" pos:end="943:41">(<argument pos:start="943:21" pos:end="943:23"><expr pos:start="943:21" pos:end="943:23"><name pos:start="943:21" pos:end="943:23">arg</name></expr></argument>, <argument pos:start="943:26" pos:end="943:36"><expr pos:start="943:26" pos:end="943:36"><sizeof pos:start="943:26" pos:end="943:36">sizeof<argument_list pos:start="943:32" pos:end="943:36">(<argument pos:start="943:33" pos:end="943:35"><expr pos:start="943:33" pos:end="943:35"><name pos:start="943:33" pos:end="943:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="943:39" pos:end="943:40"><expr pos:start="943:39" pos:end="943:40"><operator pos:start="943:39" pos:end="943:39">&amp;</operator><name pos:start="943:40" pos:end="943:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="945:13" pos:end="947:51"><if pos:start="945:13" pos:end="947:51">if <condition pos:start="945:16" pos:end="945:45">(<expr pos:start="945:17" pos:end="945:44"><operator pos:start="945:17" pos:end="945:17">(</operator><call pos:start="945:18" pos:end="945:28"><name pos:start="945:18" pos:end="945:23">strlen</name><argument_list pos:start="945:24" pos:end="945:28">(<argument pos:start="945:25" pos:end="945:27"><expr pos:start="945:25" pos:end="945:27"><name pos:start="945:25" pos:end="945:27">arg</name></expr></argument>)</argument_list></call> <operator pos:start="945:30" pos:end="945:31">==</operator> <literal type="number" pos:start="945:33" pos:end="945:33">4</literal><operator pos:start="945:34" pos:end="945:34">)</operator> <operator pos:start="945:36" pos:end="945:37">&amp;&amp;</operator> <name pos:start="945:39" pos:end="945:44">stream</name></expr>)</condition><block type="pseudo" pos:start="947:17" pos:end="947:51"><block_content pos:start="947:17" pos:end="947:51">

                <expr_stmt pos:start="947:17" pos:end="947:51"><expr pos:start="947:17" pos:end="947:50"><name pos:start="947:17" pos:end="947:35"><name pos:start="947:17" pos:end="947:25">video_enc</name><operator pos:start="947:26" pos:end="947:26">.</operator><name pos:start="947:27" pos:end="947:35">codec_tag</name></name> <operator pos:start="947:37" pos:end="947:37">=</operator> <call pos:start="947:39" pos:end="947:50"><name pos:start="947:39" pos:end="947:45">AV_RL32</name><argument_list pos:start="947:46" pos:end="947:50">(<argument pos:start="947:47" pos:end="947:49"><expr pos:start="947:47" pos:end="947:49"><name pos:start="947:47" pos:end="947:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="949:11" pos:end="955:9">else if <condition pos:start="949:19" pos:end="949:48">(<expr pos:start="949:20" pos:end="949:47"><operator pos:start="949:20" pos:end="949:20">!</operator><call pos:start="949:21" pos:end="949:47"><name pos:start="949:21" pos:end="949:30">strcasecmp</name><argument_list pos:start="949:31" pos:end="949:47">(<argument pos:start="949:32" pos:end="949:34"><expr pos:start="949:32" pos:end="949:34"><name pos:start="949:32" pos:end="949:34">cmd</name></expr></argument>, <argument pos:start="949:37" pos:end="949:46"><expr pos:start="949:37" pos:end="949:46"><literal type="string" pos:start="949:37" pos:end="949:46">"BitExact"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="949:50" pos:end="955:9">{<block_content pos:start="951:13" pos:end="953:55">

            <if_stmt pos:start="951:13" pos:end="953:55"><if pos:start="951:13" pos:end="953:55">if <condition pos:start="951:16" pos:end="951:23">(<expr pos:start="951:17" pos:end="951:22"><name pos:start="951:17" pos:end="951:22">stream</name></expr>)</condition><block type="pseudo" pos:start="953:17" pos:end="953:55"><block_content pos:start="953:17" pos:end="953:55">

                <expr_stmt pos:start="953:17" pos:end="953:55"><expr pos:start="953:17" pos:end="953:54"><name pos:start="953:17" pos:end="953:31"><name pos:start="953:17" pos:end="953:25">video_enc</name><operator pos:start="953:26" pos:end="953:26">.</operator><name pos:start="953:27" pos:end="953:31">flags</name></name> <operator pos:start="953:33" pos:end="953:34">|=</operator> <name pos:start="953:36" pos:end="953:54">CODEC_FLAG_BITEXACT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="955:11" pos:end="961:9">else if <condition pos:start="955:19" pos:end="955:50">(<expr pos:start="955:20" pos:end="955:49"><operator pos:start="955:20" pos:end="955:20">!</operator><call pos:start="955:21" pos:end="955:49"><name pos:start="955:21" pos:end="955:30">strcasecmp</name><argument_list pos:start="955:31" pos:end="955:49">(<argument pos:start="955:32" pos:end="955:34"><expr pos:start="955:32" pos:end="955:34"><name pos:start="955:32" pos:end="955:34">cmd</name></expr></argument>, <argument pos:start="955:37" pos:end="955:48"><expr pos:start="955:37" pos:end="955:48"><literal type="string" pos:start="955:37" pos:end="955:48">"DctFastint"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="955:52" pos:end="961:9">{<block_content pos:start="957:13" pos:end="959:53">

            <if_stmt pos:start="957:13" pos:end="959:53"><if pos:start="957:13" pos:end="959:53">if <condition pos:start="957:16" pos:end="957:23">(<expr pos:start="957:17" pos:end="957:22"><name pos:start="957:17" pos:end="957:22">stream</name></expr>)</condition><block type="pseudo" pos:start="959:17" pos:end="959:53"><block_content pos:start="959:17" pos:end="959:53">

                <expr_stmt pos:start="959:17" pos:end="959:53"><expr pos:start="959:17" pos:end="959:52"><name pos:start="959:17" pos:end="959:34"><name pos:start="959:17" pos:end="959:25">video_enc</name><operator pos:start="959:26" pos:end="959:26">.</operator><name pos:start="959:27" pos:end="959:34">dct_algo</name></name>  <operator pos:start="959:37" pos:end="959:37">=</operator> <name pos:start="959:39" pos:end="959:52">FF_DCT_FASTINT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="961:11" pos:end="967:9">else if <condition pos:start="961:19" pos:end="961:50">(<expr pos:start="961:20" pos:end="961:49"><operator pos:start="961:20" pos:end="961:20">!</operator><call pos:start="961:21" pos:end="961:49"><name pos:start="961:21" pos:end="961:30">strcasecmp</name><argument_list pos:start="961:31" pos:end="961:49">(<argument pos:start="961:32" pos:end="961:34"><expr pos:start="961:32" pos:end="961:34"><name pos:start="961:32" pos:end="961:34">cmd</name></expr></argument>, <argument pos:start="961:37" pos:end="961:48"><expr pos:start="961:37" pos:end="961:48"><literal type="string" pos:start="961:37" pos:end="961:48">"IdctSimple"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="961:52" pos:end="967:9">{<block_content pos:start="963:13" pos:end="965:53">

            <if_stmt pos:start="963:13" pos:end="965:53"><if pos:start="963:13" pos:end="965:53">if <condition pos:start="963:16" pos:end="963:23">(<expr pos:start="963:17" pos:end="963:22"><name pos:start="963:17" pos:end="963:22">stream</name></expr>)</condition><block type="pseudo" pos:start="965:17" pos:end="965:53"><block_content pos:start="965:17" pos:end="965:53">

                <expr_stmt pos:start="965:17" pos:end="965:53"><expr pos:start="965:17" pos:end="965:52"><name pos:start="965:17" pos:end="965:35"><name pos:start="965:17" pos:end="965:25">video_enc</name><operator pos:start="965:26" pos:end="965:26">.</operator><name pos:start="965:27" pos:end="965:35">idct_algo</name></name> <operator pos:start="965:37" pos:end="965:37">=</operator> <name pos:start="965:39" pos:end="965:52">FF_IDCT_SIMPLE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="967:11" pos:end="979:9">else if <condition pos:start="967:19" pos:end="967:46">(<expr pos:start="967:20" pos:end="967:45"><operator pos:start="967:20" pos:end="967:20">!</operator><call pos:start="967:21" pos:end="967:45"><name pos:start="967:21" pos:end="967:30">strcasecmp</name><argument_list pos:start="967:31" pos:end="967:45">(<argument pos:start="967:32" pos:end="967:34"><expr pos:start="967:32" pos:end="967:34"><name pos:start="967:32" pos:end="967:34">cmd</name></expr></argument>, <argument pos:start="967:37" pos:end="967:44"><expr pos:start="967:37" pos:end="967:44"><literal type="string" pos:start="967:37" pos:end="967:44">"Qscale"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="967:48" pos:end="979:9">{<block_content pos:start="969:13" pos:end="977:13">

            <expr_stmt pos:start="969:13" pos:end="969:42"><expr pos:start="969:13" pos:end="969:41"><call pos:start="969:13" pos:end="969:41"><name pos:start="969:13" pos:end="969:19">get_arg</name><argument_list pos:start="969:20" pos:end="969:41">(<argument pos:start="969:21" pos:end="969:23"><expr pos:start="969:21" pos:end="969:23"><name pos:start="969:21" pos:end="969:23">arg</name></expr></argument>, <argument pos:start="969:26" pos:end="969:36"><expr pos:start="969:26" pos:end="969:36"><sizeof pos:start="969:26" pos:end="969:36">sizeof<argument_list pos:start="969:32" pos:end="969:36">(<argument pos:start="969:33" pos:end="969:35"><expr pos:start="969:33" pos:end="969:35"><name pos:start="969:33" pos:end="969:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="969:39" pos:end="969:40"><expr pos:start="969:39" pos:end="969:40"><operator pos:start="969:39" pos:end="969:39">&amp;</operator><name pos:start="969:40" pos:end="969:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="971:13" pos:end="977:13"><if pos:start="971:13" pos:end="977:13">if <condition pos:start="971:16" pos:end="971:23">(<expr pos:start="971:17" pos:end="971:22"><name pos:start="971:17" pos:end="971:22">stream</name></expr>)</condition> <block pos:start="971:25" pos:end="977:13">{<block_content pos:start="973:17" pos:end="975:68">

                <expr_stmt pos:start="973:17" pos:end="973:53"><expr pos:start="973:17" pos:end="973:52"><name pos:start="973:17" pos:end="973:31"><name pos:start="973:17" pos:end="973:25">video_enc</name><operator pos:start="973:26" pos:end="973:26">.</operator><name pos:start="973:27" pos:end="973:31">flags</name></name> <operator pos:start="973:33" pos:end="973:34">|=</operator> <name pos:start="973:36" pos:end="973:52">CODEC_FLAG_QSCALE</name></expr>;</expr_stmt>

                <expr_stmt pos:start="975:17" pos:end="975:68"><expr pos:start="975:17" pos:end="975:67"><name pos:start="975:17" pos:end="975:40"><name pos:start="975:17" pos:end="975:25">video_enc</name><operator pos:start="975:26" pos:end="975:26">.</operator><name pos:start="975:27" pos:end="975:40">global_quality</name></name> <operator pos:start="975:42" pos:end="975:42">=</operator> <name pos:start="975:44" pos:end="975:55">FF_QP2LAMBDA</name> <operator pos:start="975:57" pos:end="975:57">*</operator> <call pos:start="975:59" pos:end="975:67"><name pos:start="975:59" pos:end="975:62">atoi</name><argument_list pos:start="975:63" pos:end="975:67">(<argument pos:start="975:64" pos:end="975:66"><expr pos:start="975:64" pos:end="975:66"><name pos:start="975:64" pos:end="975:66">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="979:11" pos:end="999:9">else if <condition pos:start="979:19" pos:end="979:50">(<expr pos:start="979:20" pos:end="979:49"><operator pos:start="979:20" pos:end="979:20">!</operator><call pos:start="979:21" pos:end="979:49"><name pos:start="979:21" pos:end="979:30">strcasecmp</name><argument_list pos:start="979:31" pos:end="979:49">(<argument pos:start="979:32" pos:end="979:34"><expr pos:start="979:32" pos:end="979:34"><name pos:start="979:32" pos:end="979:34">cmd</name></expr></argument>, <argument pos:start="979:37" pos:end="979:48"><expr pos:start="979:37" pos:end="979:48"><literal type="string" pos:start="979:37" pos:end="979:48">"VideoQDiff"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="979:52" pos:end="999:9">{<block_content pos:start="981:13" pos:end="997:13">

            <expr_stmt pos:start="981:13" pos:end="981:42"><expr pos:start="981:13" pos:end="981:41"><call pos:start="981:13" pos:end="981:41"><name pos:start="981:13" pos:end="981:19">get_arg</name><argument_list pos:start="981:20" pos:end="981:41">(<argument pos:start="981:21" pos:end="981:23"><expr pos:start="981:21" pos:end="981:23"><name pos:start="981:21" pos:end="981:23">arg</name></expr></argument>, <argument pos:start="981:26" pos:end="981:36"><expr pos:start="981:26" pos:end="981:36"><sizeof pos:start="981:26" pos:end="981:36">sizeof<argument_list pos:start="981:32" pos:end="981:36">(<argument pos:start="981:33" pos:end="981:35"><expr pos:start="981:33" pos:end="981:35"><name pos:start="981:33" pos:end="981:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="981:39" pos:end="981:40"><expr pos:start="981:39" pos:end="981:40"><operator pos:start="981:39" pos:end="981:39">&amp;</operator><name pos:start="981:40" pos:end="981:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="983:13" pos:end="997:13"><if pos:start="983:13" pos:end="997:13">if <condition pos:start="983:16" pos:end="983:23">(<expr pos:start="983:17" pos:end="983:22"><name pos:start="983:17" pos:end="983:22">stream</name></expr>)</condition> <block pos:start="983:25" pos:end="997:13">{<block_content pos:start="985:17" pos:end="995:17">

                <expr_stmt pos:start="985:17" pos:end="985:48"><expr pos:start="985:17" pos:end="985:47"><name pos:start="985:17" pos:end="985:35"><name pos:start="985:17" pos:end="985:25">video_enc</name><operator pos:start="985:26" pos:end="985:26">.</operator><name pos:start="985:27" pos:end="985:35">max_qdiff</name></name> <operator pos:start="985:37" pos:end="985:37">=</operator> <call pos:start="985:39" pos:end="985:47"><name pos:start="985:39" pos:end="985:42">atoi</name><argument_list pos:start="985:43" pos:end="985:47">(<argument pos:start="985:44" pos:end="985:46"><expr pos:start="985:44" pos:end="985:46"><name pos:start="985:44" pos:end="985:46">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="987:17" pos:end="995:17"><if pos:start="987:17" pos:end="995:17">if <condition pos:start="987:20" pos:end="987:72">(<expr pos:start="987:21" pos:end="987:71"><name pos:start="987:21" pos:end="987:39"><name pos:start="987:21" pos:end="987:29">video_enc</name><operator pos:start="987:30" pos:end="987:30">.</operator><name pos:start="987:31" pos:end="987:39">max_qdiff</name></name> <operator pos:start="987:41" pos:end="987:41">&lt;</operator> <literal type="number" pos:start="987:43" pos:end="987:43">1</literal> <operator pos:start="987:45" pos:end="987:46">||</operator> <name pos:start="987:48" pos:end="987:66"><name pos:start="987:48" pos:end="987:56">video_enc</name><operator pos:start="987:57" pos:end="987:57">.</operator><name pos:start="987:58" pos:end="987:66">max_qdiff</name></name> <operator pos:start="987:68" pos:end="987:68">&gt;</operator> <literal type="number" pos:start="987:70" pos:end="987:71">31</literal></expr>)</condition> <block pos:start="987:74" pos:end="995:17">{<block_content pos:start="989:21" pos:end="993:29">

                    <expr_stmt pos:start="989:21" pos:end="991:48"><expr pos:start="989:21" pos:end="991:47"><call pos:start="989:21" pos:end="991:47"><name pos:start="989:21" pos:end="989:27">fprintf</name><argument_list pos:start="989:28" pos:end="991:47">(<argument pos:start="989:29" pos:end="989:34"><expr pos:start="989:29" pos:end="989:34"><name pos:start="989:29" pos:end="989:34">stderr</name></expr></argument>, <argument pos:start="989:37" pos:end="989:70"><expr pos:start="989:37" pos:end="989:70"><literal type="string" pos:start="989:37" pos:end="989:70">"%s:%d: VideoQDiff out of range\n"</literal></expr></argument>,

                            <argument pos:start="991:29" pos:end="991:36"><expr pos:start="991:29" pos:end="991:36"><name pos:start="991:29" pos:end="991:36">filename</name></expr></argument>, <argument pos:start="991:39" pos:end="991:46"><expr pos:start="991:39" pos:end="991:46"><name pos:start="991:39" pos:end="991:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="993:21" pos:end="993:29"><expr pos:start="993:21" pos:end="993:28"><name pos:start="993:21" pos:end="993:26">errors</name><operator pos:start="993:27" pos:end="993:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="999:11" pos:end="1019:9">else if <condition pos:start="999:19" pos:end="999:49">(<expr pos:start="999:20" pos:end="999:48"><operator pos:start="999:20" pos:end="999:20">!</operator><call pos:start="999:21" pos:end="999:48"><name pos:start="999:21" pos:end="999:30">strcasecmp</name><argument_list pos:start="999:31" pos:end="999:48">(<argument pos:start="999:32" pos:end="999:34"><expr pos:start="999:32" pos:end="999:34"><name pos:start="999:32" pos:end="999:34">cmd</name></expr></argument>, <argument pos:start="999:37" pos:end="999:47"><expr pos:start="999:37" pos:end="999:47"><literal type="string" pos:start="999:37" pos:end="999:47">"VideoQMax"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="999:51" pos:end="1019:9">{<block_content pos:start="1001:13" pos:end="1017:13">

            <expr_stmt pos:start="1001:13" pos:end="1001:42"><expr pos:start="1001:13" pos:end="1001:41"><call pos:start="1001:13" pos:end="1001:41"><name pos:start="1001:13" pos:end="1001:19">get_arg</name><argument_list pos:start="1001:20" pos:end="1001:41">(<argument pos:start="1001:21" pos:end="1001:23"><expr pos:start="1001:21" pos:end="1001:23"><name pos:start="1001:21" pos:end="1001:23">arg</name></expr></argument>, <argument pos:start="1001:26" pos:end="1001:36"><expr pos:start="1001:26" pos:end="1001:36"><sizeof pos:start="1001:26" pos:end="1001:36">sizeof<argument_list pos:start="1001:32" pos:end="1001:36">(<argument pos:start="1001:33" pos:end="1001:35"><expr pos:start="1001:33" pos:end="1001:35"><name pos:start="1001:33" pos:end="1001:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1001:39" pos:end="1001:40"><expr pos:start="1001:39" pos:end="1001:40"><operator pos:start="1001:39" pos:end="1001:39">&amp;</operator><name pos:start="1001:40" pos:end="1001:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1003:13" pos:end="1017:13"><if pos:start="1003:13" pos:end="1017:13">if <condition pos:start="1003:16" pos:end="1003:23">(<expr pos:start="1003:17" pos:end="1003:22"><name pos:start="1003:17" pos:end="1003:22">stream</name></expr>)</condition> <block pos:start="1003:25" pos:end="1017:13">{<block_content pos:start="1005:17" pos:end="1015:17">

                <expr_stmt pos:start="1005:17" pos:end="1005:43"><expr pos:start="1005:17" pos:end="1005:42"><name pos:start="1005:17" pos:end="1005:30"><name pos:start="1005:17" pos:end="1005:25">video_enc</name><operator pos:start="1005:26" pos:end="1005:26">.</operator><name pos:start="1005:27" pos:end="1005:30">qmax</name></name> <operator pos:start="1005:32" pos:end="1005:32">=</operator> <call pos:start="1005:34" pos:end="1005:42"><name pos:start="1005:34" pos:end="1005:37">atoi</name><argument_list pos:start="1005:38" pos:end="1005:42">(<argument pos:start="1005:39" pos:end="1005:41"><expr pos:start="1005:39" pos:end="1005:41"><name pos:start="1005:39" pos:end="1005:41">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1007:17" pos:end="1015:17"><if pos:start="1007:17" pos:end="1015:17">if <condition pos:start="1007:20" pos:end="1007:62">(<expr pos:start="1007:21" pos:end="1007:61"><name pos:start="1007:21" pos:end="1007:34"><name pos:start="1007:21" pos:end="1007:29">video_enc</name><operator pos:start="1007:30" pos:end="1007:30">.</operator><name pos:start="1007:31" pos:end="1007:34">qmax</name></name> <operator pos:start="1007:36" pos:end="1007:36">&lt;</operator> <literal type="number" pos:start="1007:38" pos:end="1007:38">1</literal> <operator pos:start="1007:40" pos:end="1007:41">||</operator> <name pos:start="1007:43" pos:end="1007:56"><name pos:start="1007:43" pos:end="1007:51">video_enc</name><operator pos:start="1007:52" pos:end="1007:52">.</operator><name pos:start="1007:53" pos:end="1007:56">qmax</name></name> <operator pos:start="1007:58" pos:end="1007:58">&gt;</operator> <literal type="number" pos:start="1007:60" pos:end="1007:61">31</literal></expr>)</condition> <block pos:start="1007:64" pos:end="1015:17">{<block_content pos:start="1009:21" pos:end="1013:29">

                    <expr_stmt pos:start="1009:21" pos:end="1011:48"><expr pos:start="1009:21" pos:end="1011:47"><call pos:start="1009:21" pos:end="1011:47"><name pos:start="1009:21" pos:end="1009:27">fprintf</name><argument_list pos:start="1009:28" pos:end="1011:47">(<argument pos:start="1009:29" pos:end="1009:34"><expr pos:start="1009:29" pos:end="1009:34"><name pos:start="1009:29" pos:end="1009:34">stderr</name></expr></argument>, <argument pos:start="1009:37" pos:end="1009:69"><expr pos:start="1009:37" pos:end="1009:69"><literal type="string" pos:start="1009:37" pos:end="1009:69">"%s:%d: VideoQMax out of range\n"</literal></expr></argument>,

                            <argument pos:start="1011:29" pos:end="1011:36"><expr pos:start="1011:29" pos:end="1011:36"><name pos:start="1011:29" pos:end="1011:36">filename</name></expr></argument>, <argument pos:start="1011:39" pos:end="1011:46"><expr pos:start="1011:39" pos:end="1011:46"><name pos:start="1011:39" pos:end="1011:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1013:21" pos:end="1013:29"><expr pos:start="1013:21" pos:end="1013:28"><name pos:start="1013:21" pos:end="1013:26">errors</name><operator pos:start="1013:27" pos:end="1013:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1019:11" pos:end="1039:9">else if <condition pos:start="1019:19" pos:end="1019:49">(<expr pos:start="1019:20" pos:end="1019:48"><operator pos:start="1019:20" pos:end="1019:20">!</operator><call pos:start="1019:21" pos:end="1019:48"><name pos:start="1019:21" pos:end="1019:30">strcasecmp</name><argument_list pos:start="1019:31" pos:end="1019:48">(<argument pos:start="1019:32" pos:end="1019:34"><expr pos:start="1019:32" pos:end="1019:34"><name pos:start="1019:32" pos:end="1019:34">cmd</name></expr></argument>, <argument pos:start="1019:37" pos:end="1019:47"><expr pos:start="1019:37" pos:end="1019:47"><literal type="string" pos:start="1019:37" pos:end="1019:47">"VideoQMin"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1019:51" pos:end="1039:9">{<block_content pos:start="1021:13" pos:end="1037:13">

            <expr_stmt pos:start="1021:13" pos:end="1021:42"><expr pos:start="1021:13" pos:end="1021:41"><call pos:start="1021:13" pos:end="1021:41"><name pos:start="1021:13" pos:end="1021:19">get_arg</name><argument_list pos:start="1021:20" pos:end="1021:41">(<argument pos:start="1021:21" pos:end="1021:23"><expr pos:start="1021:21" pos:end="1021:23"><name pos:start="1021:21" pos:end="1021:23">arg</name></expr></argument>, <argument pos:start="1021:26" pos:end="1021:36"><expr pos:start="1021:26" pos:end="1021:36"><sizeof pos:start="1021:26" pos:end="1021:36">sizeof<argument_list pos:start="1021:32" pos:end="1021:36">(<argument pos:start="1021:33" pos:end="1021:35"><expr pos:start="1021:33" pos:end="1021:35"><name pos:start="1021:33" pos:end="1021:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1021:39" pos:end="1021:40"><expr pos:start="1021:39" pos:end="1021:40"><operator pos:start="1021:39" pos:end="1021:39">&amp;</operator><name pos:start="1021:40" pos:end="1021:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1023:13" pos:end="1037:13"><if pos:start="1023:13" pos:end="1037:13">if <condition pos:start="1023:16" pos:end="1023:23">(<expr pos:start="1023:17" pos:end="1023:22"><name pos:start="1023:17" pos:end="1023:22">stream</name></expr>)</condition> <block pos:start="1023:25" pos:end="1037:13">{<block_content pos:start="1025:17" pos:end="1035:17">

                <expr_stmt pos:start="1025:17" pos:end="1025:43"><expr pos:start="1025:17" pos:end="1025:42"><name pos:start="1025:17" pos:end="1025:30"><name pos:start="1025:17" pos:end="1025:25">video_enc</name><operator pos:start="1025:26" pos:end="1025:26">.</operator><name pos:start="1025:27" pos:end="1025:30">qmin</name></name> <operator pos:start="1025:32" pos:end="1025:32">=</operator> <call pos:start="1025:34" pos:end="1025:42"><name pos:start="1025:34" pos:end="1025:37">atoi</name><argument_list pos:start="1025:38" pos:end="1025:42">(<argument pos:start="1025:39" pos:end="1025:41"><expr pos:start="1025:39" pos:end="1025:41"><name pos:start="1025:39" pos:end="1025:41">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1027:17" pos:end="1035:17"><if pos:start="1027:17" pos:end="1035:17">if <condition pos:start="1027:20" pos:end="1027:62">(<expr pos:start="1027:21" pos:end="1027:61"><name pos:start="1027:21" pos:end="1027:34"><name pos:start="1027:21" pos:end="1027:29">video_enc</name><operator pos:start="1027:30" pos:end="1027:30">.</operator><name pos:start="1027:31" pos:end="1027:34">qmin</name></name> <operator pos:start="1027:36" pos:end="1027:36">&lt;</operator> <literal type="number" pos:start="1027:38" pos:end="1027:38">1</literal> <operator pos:start="1027:40" pos:end="1027:41">||</operator> <name pos:start="1027:43" pos:end="1027:56"><name pos:start="1027:43" pos:end="1027:51">video_enc</name><operator pos:start="1027:52" pos:end="1027:52">.</operator><name pos:start="1027:53" pos:end="1027:56">qmin</name></name> <operator pos:start="1027:58" pos:end="1027:58">&gt;</operator> <literal type="number" pos:start="1027:60" pos:end="1027:61">31</literal></expr>)</condition> <block pos:start="1027:64" pos:end="1035:17">{<block_content pos:start="1029:21" pos:end="1033:29">

                    <expr_stmt pos:start="1029:21" pos:end="1031:48"><expr pos:start="1029:21" pos:end="1031:47"><call pos:start="1029:21" pos:end="1031:47"><name pos:start="1029:21" pos:end="1029:27">fprintf</name><argument_list pos:start="1029:28" pos:end="1031:47">(<argument pos:start="1029:29" pos:end="1029:34"><expr pos:start="1029:29" pos:end="1029:34"><name pos:start="1029:29" pos:end="1029:34">stderr</name></expr></argument>, <argument pos:start="1029:37" pos:end="1029:69"><expr pos:start="1029:37" pos:end="1029:69"><literal type="string" pos:start="1029:37" pos:end="1029:69">"%s:%d: VideoQMin out of range\n"</literal></expr></argument>,

                            <argument pos:start="1031:29" pos:end="1031:36"><expr pos:start="1031:29" pos:end="1031:36"><name pos:start="1031:29" pos:end="1031:36">filename</name></expr></argument>, <argument pos:start="1031:39" pos:end="1031:46"><expr pos:start="1031:39" pos:end="1031:46"><name pos:start="1031:39" pos:end="1031:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1033:21" pos:end="1033:29"><expr pos:start="1033:21" pos:end="1033:28"><name pos:start="1033:21" pos:end="1033:26">errors</name><operator pos:start="1033:27" pos:end="1033:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1039:11" pos:end="1047:9">else if <condition pos:start="1039:19" pos:end="1039:48">(<expr pos:start="1039:20" pos:end="1039:47"><operator pos:start="1039:20" pos:end="1039:20">!</operator><call pos:start="1039:21" pos:end="1039:47"><name pos:start="1039:21" pos:end="1039:30">strcasecmp</name><argument_list pos:start="1039:31" pos:end="1039:47">(<argument pos:start="1039:32" pos:end="1039:34"><expr pos:start="1039:32" pos:end="1039:34"><name pos:start="1039:32" pos:end="1039:34">cmd</name></expr></argument>, <argument pos:start="1039:37" pos:end="1039:46"><expr pos:start="1039:37" pos:end="1039:46"><literal type="string" pos:start="1039:37" pos:end="1039:46">"LumaElim"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1039:50" pos:end="1047:9">{<block_content pos:start="1041:13" pos:end="1045:58">

            <expr_stmt pos:start="1041:13" pos:end="1041:42"><expr pos:start="1041:13" pos:end="1041:41"><call pos:start="1041:13" pos:end="1041:41"><name pos:start="1041:13" pos:end="1041:19">get_arg</name><argument_list pos:start="1041:20" pos:end="1041:41">(<argument pos:start="1041:21" pos:end="1041:23"><expr pos:start="1041:21" pos:end="1041:23"><name pos:start="1041:21" pos:end="1041:23">arg</name></expr></argument>, <argument pos:start="1041:26" pos:end="1041:36"><expr pos:start="1041:26" pos:end="1041:36"><sizeof pos:start="1041:26" pos:end="1041:36">sizeof<argument_list pos:start="1041:32" pos:end="1041:36">(<argument pos:start="1041:33" pos:end="1041:35"><expr pos:start="1041:33" pos:end="1041:35"><name pos:start="1041:33" pos:end="1041:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1041:39" pos:end="1041:40"><expr pos:start="1041:39" pos:end="1041:40"><operator pos:start="1041:39" pos:end="1041:39">&amp;</operator><name pos:start="1041:40" pos:end="1041:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1043:13" pos:end="1045:58"><if pos:start="1043:13" pos:end="1045:58">if <condition pos:start="1043:16" pos:end="1043:23">(<expr pos:start="1043:17" pos:end="1043:22"><name pos:start="1043:17" pos:end="1043:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1045:17" pos:end="1045:58"><block_content pos:start="1045:17" pos:end="1045:58">

                <expr_stmt pos:start="1045:17" pos:end="1045:58"><expr pos:start="1045:17" pos:end="1045:57"><name pos:start="1045:17" pos:end="1045:45"><name pos:start="1045:17" pos:end="1045:25">video_enc</name><operator pos:start="1045:26" pos:end="1045:26">.</operator><name pos:start="1045:27" pos:end="1045:45">luma_elim_threshold</name></name> <operator pos:start="1045:47" pos:end="1045:47">=</operator> <call pos:start="1045:49" pos:end="1045:57"><name pos:start="1045:49" pos:end="1045:52">atoi</name><argument_list pos:start="1045:53" pos:end="1045:57">(<argument pos:start="1045:54" pos:end="1045:56"><expr pos:start="1045:54" pos:end="1045:56"><name pos:start="1045:54" pos:end="1045:56">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1047:11" pos:end="1055:9">else if <condition pos:start="1047:19" pos:end="1047:50">(<expr pos:start="1047:20" pos:end="1047:49"><operator pos:start="1047:20" pos:end="1047:20">!</operator><call pos:start="1047:21" pos:end="1047:49"><name pos:start="1047:21" pos:end="1047:30">strcasecmp</name><argument_list pos:start="1047:31" pos:end="1047:49">(<argument pos:start="1047:32" pos:end="1047:34"><expr pos:start="1047:32" pos:end="1047:34"><name pos:start="1047:32" pos:end="1047:34">cmd</name></expr></argument>, <argument pos:start="1047:37" pos:end="1047:48"><expr pos:start="1047:37" pos:end="1047:48"><literal type="string" pos:start="1047:37" pos:end="1047:48">"ChromaElim"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1047:52" pos:end="1055:9">{<block_content pos:start="1049:13" pos:end="1053:60">

            <expr_stmt pos:start="1049:13" pos:end="1049:42"><expr pos:start="1049:13" pos:end="1049:41"><call pos:start="1049:13" pos:end="1049:41"><name pos:start="1049:13" pos:end="1049:19">get_arg</name><argument_list pos:start="1049:20" pos:end="1049:41">(<argument pos:start="1049:21" pos:end="1049:23"><expr pos:start="1049:21" pos:end="1049:23"><name pos:start="1049:21" pos:end="1049:23">arg</name></expr></argument>, <argument pos:start="1049:26" pos:end="1049:36"><expr pos:start="1049:26" pos:end="1049:36"><sizeof pos:start="1049:26" pos:end="1049:36">sizeof<argument_list pos:start="1049:32" pos:end="1049:36">(<argument pos:start="1049:33" pos:end="1049:35"><expr pos:start="1049:33" pos:end="1049:35"><name pos:start="1049:33" pos:end="1049:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1049:39" pos:end="1049:40"><expr pos:start="1049:39" pos:end="1049:40"><operator pos:start="1049:39" pos:end="1049:39">&amp;</operator><name pos:start="1049:40" pos:end="1049:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1051:13" pos:end="1053:60"><if pos:start="1051:13" pos:end="1053:60">if <condition pos:start="1051:16" pos:end="1051:23">(<expr pos:start="1051:17" pos:end="1051:22"><name pos:start="1051:17" pos:end="1051:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1053:17" pos:end="1053:60"><block_content pos:start="1053:17" pos:end="1053:60">

                <expr_stmt pos:start="1053:17" pos:end="1053:60"><expr pos:start="1053:17" pos:end="1053:59"><name pos:start="1053:17" pos:end="1053:47"><name pos:start="1053:17" pos:end="1053:25">video_enc</name><operator pos:start="1053:26" pos:end="1053:26">.</operator><name pos:start="1053:27" pos:end="1053:47">chroma_elim_threshold</name></name> <operator pos:start="1053:49" pos:end="1053:49">=</operator> <call pos:start="1053:51" pos:end="1053:59"><name pos:start="1053:51" pos:end="1053:54">atoi</name><argument_list pos:start="1053:55" pos:end="1053:59">(<argument pos:start="1053:56" pos:end="1053:58"><expr pos:start="1053:56" pos:end="1053:58"><name pos:start="1053:56" pos:end="1053:58">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1055:11" pos:end="1063:9">else if <condition pos:start="1055:19" pos:end="1055:48">(<expr pos:start="1055:20" pos:end="1055:47"><operator pos:start="1055:20" pos:end="1055:20">!</operator><call pos:start="1055:21" pos:end="1055:47"><name pos:start="1055:21" pos:end="1055:30">strcasecmp</name><argument_list pos:start="1055:31" pos:end="1055:47">(<argument pos:start="1055:32" pos:end="1055:34"><expr pos:start="1055:32" pos:end="1055:34"><name pos:start="1055:32" pos:end="1055:34">cmd</name></expr></argument>, <argument pos:start="1055:37" pos:end="1055:46"><expr pos:start="1055:37" pos:end="1055:46"><literal type="string" pos:start="1055:37" pos:end="1055:46">"LumiMask"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1055:50" pos:end="1063:9">{<block_content pos:start="1057:13" pos:end="1061:51">

            <expr_stmt pos:start="1057:13" pos:end="1057:42"><expr pos:start="1057:13" pos:end="1057:41"><call pos:start="1057:13" pos:end="1057:41"><name pos:start="1057:13" pos:end="1057:19">get_arg</name><argument_list pos:start="1057:20" pos:end="1057:41">(<argument pos:start="1057:21" pos:end="1057:23"><expr pos:start="1057:21" pos:end="1057:23"><name pos:start="1057:21" pos:end="1057:23">arg</name></expr></argument>, <argument pos:start="1057:26" pos:end="1057:36"><expr pos:start="1057:26" pos:end="1057:36"><sizeof pos:start="1057:26" pos:end="1057:36">sizeof<argument_list pos:start="1057:32" pos:end="1057:36">(<argument pos:start="1057:33" pos:end="1057:35"><expr pos:start="1057:33" pos:end="1057:35"><name pos:start="1057:33" pos:end="1057:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1057:39" pos:end="1057:40"><expr pos:start="1057:39" pos:end="1057:40"><operator pos:start="1057:39" pos:end="1057:39">&amp;</operator><name pos:start="1057:40" pos:end="1057:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1059:13" pos:end="1061:51"><if pos:start="1059:13" pos:end="1061:51">if <condition pos:start="1059:16" pos:end="1059:23">(<expr pos:start="1059:17" pos:end="1059:22"><name pos:start="1059:17" pos:end="1059:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1061:17" pos:end="1061:51"><block_content pos:start="1061:17" pos:end="1061:51">

                <expr_stmt pos:start="1061:17" pos:end="1061:51"><expr pos:start="1061:17" pos:end="1061:50"><name pos:start="1061:17" pos:end="1061:38"><name pos:start="1061:17" pos:end="1061:25">video_enc</name><operator pos:start="1061:26" pos:end="1061:26">.</operator><name pos:start="1061:27" pos:end="1061:38">lumi_masking</name></name> <operator pos:start="1061:40" pos:end="1061:40">=</operator> <call pos:start="1061:42" pos:end="1061:50"><name pos:start="1061:42" pos:end="1061:45">atof</name><argument_list pos:start="1061:46" pos:end="1061:50">(<argument pos:start="1061:47" pos:end="1061:49"><expr pos:start="1061:47" pos:end="1061:49"><name pos:start="1061:47" pos:end="1061:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1063:11" pos:end="1071:9">else if <condition pos:start="1063:19" pos:end="1063:48">(<expr pos:start="1063:20" pos:end="1063:47"><operator pos:start="1063:20" pos:end="1063:20">!</operator><call pos:start="1063:21" pos:end="1063:47"><name pos:start="1063:21" pos:end="1063:30">strcasecmp</name><argument_list pos:start="1063:31" pos:end="1063:47">(<argument pos:start="1063:32" pos:end="1063:34"><expr pos:start="1063:32" pos:end="1063:34"><name pos:start="1063:32" pos:end="1063:34">cmd</name></expr></argument>, <argument pos:start="1063:37" pos:end="1063:46"><expr pos:start="1063:37" pos:end="1063:46"><literal type="string" pos:start="1063:37" pos:end="1063:46">"DarkMask"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1063:50" pos:end="1071:9">{<block_content pos:start="1065:13" pos:end="1069:51">

            <expr_stmt pos:start="1065:13" pos:end="1065:42"><expr pos:start="1065:13" pos:end="1065:41"><call pos:start="1065:13" pos:end="1065:41"><name pos:start="1065:13" pos:end="1065:19">get_arg</name><argument_list pos:start="1065:20" pos:end="1065:41">(<argument pos:start="1065:21" pos:end="1065:23"><expr pos:start="1065:21" pos:end="1065:23"><name pos:start="1065:21" pos:end="1065:23">arg</name></expr></argument>, <argument pos:start="1065:26" pos:end="1065:36"><expr pos:start="1065:26" pos:end="1065:36"><sizeof pos:start="1065:26" pos:end="1065:36">sizeof<argument_list pos:start="1065:32" pos:end="1065:36">(<argument pos:start="1065:33" pos:end="1065:35"><expr pos:start="1065:33" pos:end="1065:35"><name pos:start="1065:33" pos:end="1065:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1065:39" pos:end="1065:40"><expr pos:start="1065:39" pos:end="1065:40"><operator pos:start="1065:39" pos:end="1065:39">&amp;</operator><name pos:start="1065:40" pos:end="1065:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1067:13" pos:end="1069:51"><if pos:start="1067:13" pos:end="1069:51">if <condition pos:start="1067:16" pos:end="1067:23">(<expr pos:start="1067:17" pos:end="1067:22"><name pos:start="1067:17" pos:end="1067:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1069:17" pos:end="1069:51"><block_content pos:start="1069:17" pos:end="1069:51">

                <expr_stmt pos:start="1069:17" pos:end="1069:51"><expr pos:start="1069:17" pos:end="1069:50"><name pos:start="1069:17" pos:end="1069:38"><name pos:start="1069:17" pos:end="1069:25">video_enc</name><operator pos:start="1069:26" pos:end="1069:26">.</operator><name pos:start="1069:27" pos:end="1069:38">dark_masking</name></name> <operator pos:start="1069:40" pos:end="1069:40">=</operator> <call pos:start="1069:42" pos:end="1069:50"><name pos:start="1069:42" pos:end="1069:45">atof</name><argument_list pos:start="1069:46" pos:end="1069:50">(<argument pos:start="1069:47" pos:end="1069:49"><expr pos:start="1069:47" pos:end="1069:49"><name pos:start="1069:47" pos:end="1069:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1071:11" pos:end="1075:9">else if <condition pos:start="1071:19" pos:end="1071:47">(<expr pos:start="1071:20" pos:end="1071:46"><operator pos:start="1071:20" pos:end="1071:20">!</operator><call pos:start="1071:21" pos:end="1071:46"><name pos:start="1071:21" pos:end="1071:30">strcasecmp</name><argument_list pos:start="1071:31" pos:end="1071:46">(<argument pos:start="1071:32" pos:end="1071:34"><expr pos:start="1071:32" pos:end="1071:34"><name pos:start="1071:32" pos:end="1071:34">cmd</name></expr></argument>, <argument pos:start="1071:37" pos:end="1071:45"><expr pos:start="1071:37" pos:end="1071:45"><literal type="string" pos:start="1071:37" pos:end="1071:45">"NoVideo"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1071:49" pos:end="1075:9">{<block_content pos:start="1073:13" pos:end="1073:37">

            <expr_stmt pos:start="1073:13" pos:end="1073:37"><expr pos:start="1073:13" pos:end="1073:36"><name pos:start="1073:13" pos:end="1073:20">video_id</name> <operator pos:start="1073:22" pos:end="1073:22">=</operator> <name pos:start="1073:24" pos:end="1073:36">CODEC_ID_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1075:11" pos:end="1079:9">else if <condition pos:start="1075:19" pos:end="1075:47">(<expr pos:start="1075:20" pos:end="1075:46"><operator pos:start="1075:20" pos:end="1075:20">!</operator><call pos:start="1075:21" pos:end="1075:46"><name pos:start="1075:21" pos:end="1075:30">strcasecmp</name><argument_list pos:start="1075:31" pos:end="1075:46">(<argument pos:start="1075:32" pos:end="1075:34"><expr pos:start="1075:32" pos:end="1075:34"><name pos:start="1075:32" pos:end="1075:34">cmd</name></expr></argument>, <argument pos:start="1075:37" pos:end="1075:45"><expr pos:start="1075:37" pos:end="1075:45"><literal type="string" pos:start="1075:37" pos:end="1075:45">"NoAudio"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1075:49" pos:end="1079:9">{<block_content pos:start="1077:13" pos:end="1077:37">

            <expr_stmt pos:start="1077:13" pos:end="1077:37"><expr pos:start="1077:13" pos:end="1077:36"><name pos:start="1077:13" pos:end="1077:20">audio_id</name> <operator pos:start="1077:22" pos:end="1077:22">=</operator> <name pos:start="1077:24" pos:end="1077:36">CODEC_ID_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1079:11" pos:end="1193:9">else if <condition pos:start="1079:19" pos:end="1079:43">(<expr pos:start="1079:20" pos:end="1079:42"><operator pos:start="1079:20" pos:end="1079:20">!</operator><call pos:start="1079:21" pos:end="1079:42"><name pos:start="1079:21" pos:end="1079:30">strcasecmp</name><argument_list pos:start="1079:31" pos:end="1079:42">(<argument pos:start="1079:32" pos:end="1079:34"><expr pos:start="1079:32" pos:end="1079:34"><name pos:start="1079:32" pos:end="1079:34">cmd</name></expr></argument>, <argument pos:start="1079:37" pos:end="1079:41"><expr pos:start="1079:37" pos:end="1079:41"><literal type="string" pos:start="1079:37" pos:end="1079:41">"ACL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1079:45" pos:end="1193:9">{<block_content pos:start="1081:13" pos:end="1191:13">

            <decl_stmt pos:start="1081:13" pos:end="1081:29"><decl pos:start="1081:13" pos:end="1081:28"><type pos:start="1081:13" pos:end="1081:24"><name pos:start="1081:13" pos:end="1081:24">IPAddressACL</name></type> <name pos:start="1081:26" pos:end="1081:28">acl</name></decl>;</decl_stmt>



            <expr_stmt pos:start="1085:13" pos:end="1085:42"><expr pos:start="1085:13" pos:end="1085:41"><call pos:start="1085:13" pos:end="1085:41"><name pos:start="1085:13" pos:end="1085:19">get_arg</name><argument_list pos:start="1085:20" pos:end="1085:41">(<argument pos:start="1085:21" pos:end="1085:23"><expr pos:start="1085:21" pos:end="1085:23"><name pos:start="1085:21" pos:end="1085:23">arg</name></expr></argument>, <argument pos:start="1085:26" pos:end="1085:36"><expr pos:start="1085:26" pos:end="1085:36"><sizeof pos:start="1085:26" pos:end="1085:36">sizeof<argument_list pos:start="1085:32" pos:end="1085:36">(<argument pos:start="1085:33" pos:end="1085:35"><expr pos:start="1085:33" pos:end="1085:35"><name pos:start="1085:33" pos:end="1085:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1085:39" pos:end="1085:40"><expr pos:start="1085:39" pos:end="1085:40"><operator pos:start="1085:39" pos:end="1085:39">&amp;</operator><name pos:start="1085:40" pos:end="1085:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1087:13" pos:end="1103:13"><if pos:start="1087:13" pos:end="1089:38">if <condition pos:start="1087:16" pos:end="1087:46">(<expr pos:start="1087:17" pos:end="1087:45"><call pos:start="1087:17" pos:end="1087:40"><name pos:start="1087:17" pos:end="1087:26">strcasecmp</name><argument_list pos:start="1087:27" pos:end="1087:40">(<argument pos:start="1087:28" pos:end="1087:30"><expr pos:start="1087:28" pos:end="1087:30"><name pos:start="1087:28" pos:end="1087:30">arg</name></expr></argument>, <argument pos:start="1087:33" pos:end="1087:39"><expr pos:start="1087:33" pos:end="1087:39"><literal type="string" pos:start="1087:33" pos:end="1087:39">"allow"</literal></expr></argument>)</argument_list></call> <operator pos:start="1087:42" pos:end="1087:43">==</operator> <literal type="number" pos:start="1087:45" pos:end="1087:45">0</literal></expr>)</condition><block type="pseudo" pos:start="1089:17" pos:end="1089:38"><block_content pos:start="1089:17" pos:end="1089:38">

                <expr_stmt pos:start="1089:17" pos:end="1089:38"><expr pos:start="1089:17" pos:end="1089:37"><name pos:start="1089:17" pos:end="1089:26"><name pos:start="1089:17" pos:end="1089:19">acl</name><operator pos:start="1089:20" pos:end="1089:20">.</operator><name pos:start="1089:21" pos:end="1089:26">action</name></name> <operator pos:start="1089:28" pos:end="1089:28">=</operator> <name pos:start="1089:30" pos:end="1089:37">IP_ALLOW</name></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="1091:13" pos:end="1093:37">else if <condition pos:start="1091:21" pos:end="1091:50">(<expr pos:start="1091:22" pos:end="1091:49"><call pos:start="1091:22" pos:end="1091:44"><name pos:start="1091:22" pos:end="1091:31">strcasecmp</name><argument_list pos:start="1091:32" pos:end="1091:44">(<argument pos:start="1091:33" pos:end="1091:35"><expr pos:start="1091:33" pos:end="1091:35"><name pos:start="1091:33" pos:end="1091:35">arg</name></expr></argument>, <argument pos:start="1091:38" pos:end="1091:43"><expr pos:start="1091:38" pos:end="1091:43"><literal type="string" pos:start="1091:38" pos:end="1091:43">"deny"</literal></expr></argument>)</argument_list></call> <operator pos:start="1091:46" pos:end="1091:47">==</operator> <literal type="number" pos:start="1091:49" pos:end="1091:49">0</literal></expr>)</condition><block type="pseudo" pos:start="1093:17" pos:end="1093:37"><block_content pos:start="1093:17" pos:end="1093:37">

                <expr_stmt pos:start="1093:17" pos:end="1093:37"><expr pos:start="1093:17" pos:end="1093:36"><name pos:start="1093:17" pos:end="1093:26"><name pos:start="1093:17" pos:end="1093:19">acl</name><operator pos:start="1093:20" pos:end="1093:20">.</operator><name pos:start="1093:21" pos:end="1093:26">action</name></name> <operator pos:start="1093:28" pos:end="1093:28">=</operator> <name pos:start="1093:30" pos:end="1093:36">IP_DENY</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1095:13" pos:end="1103:13">else <block pos:start="1095:18" pos:end="1103:13">{<block_content pos:start="1097:17" pos:end="1101:25">

                <expr_stmt pos:start="1097:17" pos:end="1099:49"><expr pos:start="1097:17" pos:end="1099:48"><call pos:start="1097:17" pos:end="1099:48"><name pos:start="1097:17" pos:end="1097:23">fprintf</name><argument_list pos:start="1097:24" pos:end="1099:48">(<argument pos:start="1097:25" pos:end="1097:30"><expr pos:start="1097:25" pos:end="1097:30"><name pos:start="1097:25" pos:end="1097:30">stderr</name></expr></argument>, <argument pos:start="1097:33" pos:end="1097:79"><expr pos:start="1097:33" pos:end="1097:79"><literal type="string" pos:start="1097:33" pos:end="1097:79">"%s:%d: ACL action '%s' is not ALLOW or DENY\n"</literal></expr></argument>,

                        <argument pos:start="1099:25" pos:end="1099:32"><expr pos:start="1099:25" pos:end="1099:32"><name pos:start="1099:25" pos:end="1099:32">filename</name></expr></argument>, <argument pos:start="1099:35" pos:end="1099:42"><expr pos:start="1099:35" pos:end="1099:42"><name pos:start="1099:35" pos:end="1099:42">line_num</name></expr></argument>, <argument pos:start="1099:45" pos:end="1099:47"><expr pos:start="1099:45" pos:end="1099:47"><name pos:start="1099:45" pos:end="1099:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1101:17" pos:end="1101:25"><expr pos:start="1101:17" pos:end="1101:24"><name pos:start="1101:17" pos:end="1101:22">errors</name><operator pos:start="1101:23" pos:end="1101:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="1107:13" pos:end="1107:42"><expr pos:start="1107:13" pos:end="1107:41"><call pos:start="1107:13" pos:end="1107:41"><name pos:start="1107:13" pos:end="1107:19">get_arg</name><argument_list pos:start="1107:20" pos:end="1107:41">(<argument pos:start="1107:21" pos:end="1107:23"><expr pos:start="1107:21" pos:end="1107:23"><name pos:start="1107:21" pos:end="1107:23">arg</name></expr></argument>, <argument pos:start="1107:26" pos:end="1107:36"><expr pos:start="1107:26" pos:end="1107:36"><sizeof pos:start="1107:26" pos:end="1107:36">sizeof<argument_list pos:start="1107:32" pos:end="1107:36">(<argument pos:start="1107:33" pos:end="1107:35"><expr pos:start="1107:33" pos:end="1107:35"><name pos:start="1107:33" pos:end="1107:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1107:39" pos:end="1107:40"><expr pos:start="1107:39" pos:end="1107:40"><operator pos:start="1107:39" pos:end="1107:39">&amp;</operator><name pos:start="1107:40" pos:end="1107:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1111:13" pos:end="1121:37"><if pos:start="1111:13" pos:end="1119:13">if <condition pos:start="1111:16" pos:end="1111:51">(<expr pos:start="1111:17" pos:end="1111:50"><call pos:start="1111:17" pos:end="1111:45"><name pos:start="1111:17" pos:end="1111:28">resolve_host</name><argument_list pos:start="1111:29" pos:end="1111:45">(<argument pos:start="1111:30" pos:end="1111:39"><expr pos:start="1111:30" pos:end="1111:39"><operator pos:start="1111:30" pos:end="1111:30">&amp;</operator><name pos:start="1111:31" pos:end="1111:39"><name pos:start="1111:31" pos:end="1111:33">acl</name><operator pos:start="1111:34" pos:end="1111:34">.</operator><name pos:start="1111:35" pos:end="1111:39">first</name></name></expr></argument>, <argument pos:start="1111:42" pos:end="1111:44"><expr pos:start="1111:42" pos:end="1111:44"><name pos:start="1111:42" pos:end="1111:44">arg</name></expr></argument>)</argument_list></call> <operator pos:start="1111:47" pos:end="1111:48">!=</operator> <literal type="number" pos:start="1111:50" pos:end="1111:50">0</literal></expr>)</condition> <block pos:start="1111:53" pos:end="1119:13">{<block_content pos:start="1113:17" pos:end="1117:25">

                <expr_stmt pos:start="1113:17" pos:end="1115:49"><expr pos:start="1113:17" pos:end="1115:48"><call pos:start="1113:17" pos:end="1115:48"><name pos:start="1113:17" pos:end="1113:23">fprintf</name><argument_list pos:start="1113:24" pos:end="1115:48">(<argument pos:start="1113:25" pos:end="1113:30"><expr pos:start="1113:25" pos:end="1113:30"><name pos:start="1113:25" pos:end="1113:30">stderr</name></expr></argument>, <argument pos:start="1113:33" pos:end="1113:88"><expr pos:start="1113:33" pos:end="1113:88"><literal type="string" pos:start="1113:33" pos:end="1113:88">"%s:%d: ACL refers to invalid host or ip address '%s'\n"</literal></expr></argument>,

                        <argument pos:start="1115:25" pos:end="1115:32"><expr pos:start="1115:25" pos:end="1115:32"><name pos:start="1115:25" pos:end="1115:32">filename</name></expr></argument>, <argument pos:start="1115:35" pos:end="1115:42"><expr pos:start="1115:35" pos:end="1115:42"><name pos:start="1115:35" pos:end="1115:42">line_num</name></expr></argument>, <argument pos:start="1115:45" pos:end="1115:47"><expr pos:start="1115:45" pos:end="1115:47"><name pos:start="1115:45" pos:end="1115:47">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1117:17" pos:end="1117:25"><expr pos:start="1117:17" pos:end="1117:24"><name pos:start="1117:17" pos:end="1117:22">errors</name><operator pos:start="1117:23" pos:end="1117:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1119:15" pos:end="1121:37">else<block type="pseudo" pos:start="1121:17" pos:end="1121:37"><block_content pos:start="1121:17" pos:end="1121:37">

                <expr_stmt pos:start="1121:17" pos:end="1121:37"><expr pos:start="1121:17" pos:end="1121:36"><name pos:start="1121:17" pos:end="1121:24"><name pos:start="1121:17" pos:end="1121:19">acl</name><operator pos:start="1121:20" pos:end="1121:20">.</operator><name pos:start="1121:21" pos:end="1121:24">last</name></name> <operator pos:start="1121:26" pos:end="1121:26">=</operator> <name pos:start="1121:28" pos:end="1121:36"><name pos:start="1121:28" pos:end="1121:30">acl</name><operator pos:start="1121:31" pos:end="1121:31">.</operator><name pos:start="1121:32" pos:end="1121:36">first</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="1125:13" pos:end="1125:42"><expr pos:start="1125:13" pos:end="1125:41"><call pos:start="1125:13" pos:end="1125:41"><name pos:start="1125:13" pos:end="1125:19">get_arg</name><argument_list pos:start="1125:20" pos:end="1125:41">(<argument pos:start="1125:21" pos:end="1125:23"><expr pos:start="1125:21" pos:end="1125:23"><name pos:start="1125:21" pos:end="1125:23">arg</name></expr></argument>, <argument pos:start="1125:26" pos:end="1125:36"><expr pos:start="1125:26" pos:end="1125:36"><sizeof pos:start="1125:26" pos:end="1125:36">sizeof<argument_list pos:start="1125:32" pos:end="1125:36">(<argument pos:start="1125:33" pos:end="1125:35"><expr pos:start="1125:33" pos:end="1125:35"><name pos:start="1125:33" pos:end="1125:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1125:39" pos:end="1125:40"><expr pos:start="1125:39" pos:end="1125:40"><operator pos:start="1125:39" pos:end="1125:39">&amp;</operator><name pos:start="1125:40" pos:end="1125:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="1129:13" pos:end="1141:13"><if pos:start="1129:13" pos:end="1141:13">if <condition pos:start="1129:16" pos:end="1129:23">(<expr pos:start="1129:17" pos:end="1129:22"><name pos:start="1129:17" pos:end="1129:22"><name pos:start="1129:17" pos:end="1129:19">arg</name><index pos:start="1129:20" pos:end="1129:22">[<expr pos:start="1129:21" pos:end="1129:21"><literal type="number" pos:start="1129:21" pos:end="1129:21">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="1129:25" pos:end="1141:13">{<block_content pos:start="1131:17" pos:end="1139:17">

                <if_stmt pos:start="1131:17" pos:end="1139:17"><if pos:start="1131:17" pos:end="1139:17">if <condition pos:start="1131:20" pos:end="1131:54">(<expr pos:start="1131:21" pos:end="1131:53"><call pos:start="1131:21" pos:end="1131:48"><name pos:start="1131:21" pos:end="1131:32">resolve_host</name><argument_list pos:start="1131:33" pos:end="1131:48">(<argument pos:start="1131:34" pos:end="1131:42"><expr pos:start="1131:34" pos:end="1131:42"><operator pos:start="1131:34" pos:end="1131:34">&amp;</operator><name pos:start="1131:35" pos:end="1131:42"><name pos:start="1131:35" pos:end="1131:37">acl</name><operator pos:start="1131:38" pos:end="1131:38">.</operator><name pos:start="1131:39" pos:end="1131:42">last</name></name></expr></argument>, <argument pos:start="1131:45" pos:end="1131:47"><expr pos:start="1131:45" pos:end="1131:47"><name pos:start="1131:45" pos:end="1131:47">arg</name></expr></argument>)</argument_list></call> <operator pos:start="1131:50" pos:end="1131:51">!=</operator> <literal type="number" pos:start="1131:53" pos:end="1131:53">0</literal></expr>)</condition> <block pos:start="1131:56" pos:end="1139:17">{<block_content pos:start="1133:21" pos:end="1137:29">

                    <expr_stmt pos:start="1133:21" pos:end="1135:53"><expr pos:start="1133:21" pos:end="1135:52"><call pos:start="1133:21" pos:end="1135:52"><name pos:start="1133:21" pos:end="1133:27">fprintf</name><argument_list pos:start="1133:28" pos:end="1135:52">(<argument pos:start="1133:29" pos:end="1133:34"><expr pos:start="1133:29" pos:end="1133:34"><name pos:start="1133:29" pos:end="1133:34">stderr</name></expr></argument>, <argument pos:start="1133:37" pos:end="1133:92"><expr pos:start="1133:37" pos:end="1133:92"><literal type="string" pos:start="1133:37" pos:end="1133:92">"%s:%d: ACL refers to invalid host or ip address '%s'\n"</literal></expr></argument>,

                            <argument pos:start="1135:29" pos:end="1135:36"><expr pos:start="1135:29" pos:end="1135:36"><name pos:start="1135:29" pos:end="1135:36">filename</name></expr></argument>, <argument pos:start="1135:39" pos:end="1135:46"><expr pos:start="1135:39" pos:end="1135:46"><name pos:start="1135:39" pos:end="1135:46">line_num</name></expr></argument>, <argument pos:start="1135:49" pos:end="1135:51"><expr pos:start="1135:49" pos:end="1135:51"><name pos:start="1135:49" pos:end="1135:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1137:21" pos:end="1137:29"><expr pos:start="1137:21" pos:end="1137:28"><name pos:start="1137:21" pos:end="1137:26">errors</name><operator pos:start="1137:27" pos:end="1137:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="1145:13" pos:end="1191:13"><if pos:start="1145:13" pos:end="1191:13">if <condition pos:start="1145:16" pos:end="1145:24">(<expr pos:start="1145:17" pos:end="1145:23"><operator pos:start="1145:17" pos:end="1145:17">!</operator><name pos:start="1145:18" pos:end="1145:23">errors</name></expr>)</condition> <block pos:start="1145:26" pos:end="1191:13">{<block_content pos:start="1147:17" pos:end="1189:17">

                <decl_stmt pos:start="1147:17" pos:end="1147:63"><decl pos:start="1147:17" pos:end="1147:62"><type pos:start="1147:17" pos:end="1147:30"><name pos:start="1147:17" pos:end="1147:28">IPAddressACL</name> <modifier pos:start="1147:30" pos:end="1147:30">*</modifier></type><name pos:start="1147:31" pos:end="1147:34">nacl</name> <init pos:start="1147:36" pos:end="1147:62">= <expr pos:start="1147:38" pos:end="1147:62"><call pos:start="1147:38" pos:end="1147:62"><name pos:start="1147:38" pos:end="1147:47">av_mallocz</name><argument_list pos:start="1147:48" pos:end="1147:62">(<argument pos:start="1147:49" pos:end="1147:61"><expr pos:start="1147:49" pos:end="1147:61"><sizeof pos:start="1147:49" pos:end="1147:61">sizeof<argument_list pos:start="1147:55" pos:end="1147:61">(<argument pos:start="1147:56" pos:end="1147:60"><expr pos:start="1147:56" pos:end="1147:60"><operator pos:start="1147:56" pos:end="1147:56">*</operator><name pos:start="1147:57" pos:end="1147:60">nacl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="1149:17" pos:end="1149:41"><decl pos:start="1149:17" pos:end="1149:40"><type pos:start="1149:17" pos:end="1149:31"><name pos:start="1149:17" pos:end="1149:28">IPAddressACL</name> <modifier pos:start="1149:30" pos:end="1149:30">*</modifier><modifier pos:start="1149:31" pos:end="1149:31">*</modifier></type><name pos:start="1149:32" pos:end="1149:36">naclp</name> <init pos:start="1149:38" pos:end="1149:40">= <expr pos:start="1149:40" pos:end="1149:40"><literal type="number" pos:start="1149:40" pos:end="1149:40">0</literal></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="1153:17" pos:end="1153:29"><expr pos:start="1153:17" pos:end="1153:28"><name pos:start="1153:17" pos:end="1153:24"><name pos:start="1153:17" pos:end="1153:19">acl</name><operator pos:start="1153:20" pos:end="1153:20">.</operator><name pos:start="1153:21" pos:end="1153:24">next</name></name> <operator pos:start="1153:26" pos:end="1153:26">=</operator> <literal type="number" pos:start="1153:28" pos:end="1153:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1155:17" pos:end="1155:28"><expr pos:start="1155:17" pos:end="1155:27"><operator pos:start="1155:17" pos:end="1155:17">*</operator><name pos:start="1155:18" pos:end="1155:21">nacl</name> <operator pos:start="1155:23" pos:end="1155:23">=</operator> <name pos:start="1155:25" pos:end="1155:27">acl</name></expr>;</expr_stmt>



                <if_stmt pos:start="1159:17" pos:end="1175:17"><if pos:start="1159:17" pos:end="1161:41">if <condition pos:start="1159:20" pos:end="1159:27">(<expr pos:start="1159:21" pos:end="1159:26"><name pos:start="1159:21" pos:end="1159:26">stream</name></expr>)</condition><block type="pseudo" pos:start="1161:21" pos:end="1161:41"><block_content pos:start="1161:21" pos:end="1161:41">

                    <expr_stmt pos:start="1161:21" pos:end="1161:41"><expr pos:start="1161:21" pos:end="1161:40"><name pos:start="1161:21" pos:end="1161:25">naclp</name> <operator pos:start="1161:27" pos:end="1161:27">=</operator> <operator pos:start="1161:29" pos:end="1161:29">&amp;</operator><name pos:start="1161:30" pos:end="1161:40"><name pos:start="1161:30" pos:end="1161:35">stream</name><operator pos:start="1161:36" pos:end="1161:37">-&gt;</operator><name pos:start="1161:38" pos:end="1161:40">acl</name></name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1163:17" pos:end="1165:39">else if <condition pos:start="1163:25" pos:end="1163:30">(<expr pos:start="1163:26" pos:end="1163:29"><name pos:start="1163:26" pos:end="1163:29">feed</name></expr>)</condition><block type="pseudo" pos:start="1165:21" pos:end="1165:39"><block_content pos:start="1165:21" pos:end="1165:39">

                    <expr_stmt pos:start="1165:21" pos:end="1165:39"><expr pos:start="1165:21" pos:end="1165:38"><name pos:start="1165:21" pos:end="1165:25">naclp</name> <operator pos:start="1165:27" pos:end="1165:27">=</operator> <operator pos:start="1165:29" pos:end="1165:29">&amp;</operator><name pos:start="1165:30" pos:end="1165:38"><name pos:start="1165:30" pos:end="1165:33">feed</name><operator pos:start="1165:34" pos:end="1165:35">-&gt;</operator><name pos:start="1165:36" pos:end="1165:38">acl</name></name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1167:17" pos:end="1175:17">else <block pos:start="1167:22" pos:end="1175:17">{<block_content pos:start="1169:21" pos:end="1173:29">

                    <expr_stmt pos:start="1169:21" pos:end="1171:48"><expr pos:start="1169:21" pos:end="1171:47"><call pos:start="1169:21" pos:end="1171:47"><name pos:start="1169:21" pos:end="1169:27">fprintf</name><argument_list pos:start="1169:28" pos:end="1171:47">(<argument pos:start="1169:29" pos:end="1169:34"><expr pos:start="1169:29" pos:end="1169:34"><name pos:start="1169:29" pos:end="1169:34">stderr</name></expr></argument>, <argument pos:start="1169:37" pos:end="1169:82"><expr pos:start="1169:37" pos:end="1169:82"><literal type="string" pos:start="1169:37" pos:end="1169:82">"%s:%d: ACL found not in &lt;stream&gt; or &lt;feed&gt;\n"</literal></expr></argument>,

                            <argument pos:start="1171:29" pos:end="1171:36"><expr pos:start="1171:29" pos:end="1171:36"><name pos:start="1171:29" pos:end="1171:36">filename</name></expr></argument>, <argument pos:start="1171:39" pos:end="1171:46"><expr pos:start="1171:39" pos:end="1171:46"><name pos:start="1171:39" pos:end="1171:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1173:21" pos:end="1173:29"><expr pos:start="1173:21" pos:end="1173:28"><name pos:start="1173:21" pos:end="1173:26">errors</name><operator pos:start="1173:27" pos:end="1173:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>



                <if_stmt pos:start="1179:17" pos:end="1189:17"><if pos:start="1179:17" pos:end="1189:17">if <condition pos:start="1179:20" pos:end="1179:26">(<expr pos:start="1179:21" pos:end="1179:25"><name pos:start="1179:21" pos:end="1179:25">naclp</name></expr>)</condition> <block pos:start="1179:28" pos:end="1189:17">{<block_content pos:start="1181:21" pos:end="1187:34">

                    <while pos:start="1181:21" pos:end="1183:48">while <condition pos:start="1181:27" pos:end="1181:34">(<expr pos:start="1181:28" pos:end="1181:33"><operator pos:start="1181:28" pos:end="1181:28">*</operator><name pos:start="1181:29" pos:end="1181:33">naclp</name></expr>)</condition><block type="pseudo" pos:start="1183:25" pos:end="1183:48"><block_content pos:start="1183:25" pos:end="1183:48">

                        <expr_stmt pos:start="1183:25" pos:end="1183:48"><expr pos:start="1183:25" pos:end="1183:47"><name pos:start="1183:25" pos:end="1183:29">naclp</name> <operator pos:start="1183:31" pos:end="1183:31">=</operator> <operator pos:start="1183:33" pos:end="1183:33">&amp;</operator><name pos:start="1183:34" pos:end="1183:47"><operator pos:start="1183:34" pos:end="1183:34">(</operator><operator pos:start="1183:35" pos:end="1183:35">*</operator><name pos:start="1183:36" pos:end="1183:40">naclp</name><operator pos:start="1183:41" pos:end="1183:41">)</operator><operator pos:start="1183:42" pos:end="1183:43">-&gt;</operator><name pos:start="1183:44" pos:end="1183:47">next</name></name></expr>;</expr_stmt></block_content></block></while>



                    <expr_stmt pos:start="1187:21" pos:end="1187:34"><expr pos:start="1187:21" pos:end="1187:33"><operator pos:start="1187:21" pos:end="1187:21">*</operator><name pos:start="1187:22" pos:end="1187:26">naclp</name> <operator pos:start="1187:28" pos:end="1187:28">=</operator> <name pos:start="1187:30" pos:end="1187:33">nacl</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1193:11" pos:end="1205:9">else if <condition pos:start="1193:19" pos:end="1193:50">(<expr pos:start="1193:20" pos:end="1193:49"><operator pos:start="1193:20" pos:end="1193:20">!</operator><call pos:start="1193:21" pos:end="1193:49"><name pos:start="1193:21" pos:end="1193:30">strcasecmp</name><argument_list pos:start="1193:31" pos:end="1193:49">(<argument pos:start="1193:32" pos:end="1193:34"><expr pos:start="1193:32" pos:end="1193:34"><name pos:start="1193:32" pos:end="1193:34">cmd</name></expr></argument>, <argument pos:start="1193:37" pos:end="1193:48"><expr pos:start="1193:37" pos:end="1193:48"><literal type="string" pos:start="1193:37" pos:end="1193:48">"RTSPOption"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1193:52" pos:end="1205:9">{<block_content pos:start="1195:13" pos:end="1203:13">

            <expr_stmt pos:start="1195:13" pos:end="1195:42"><expr pos:start="1195:13" pos:end="1195:41"><call pos:start="1195:13" pos:end="1195:41"><name pos:start="1195:13" pos:end="1195:19">get_arg</name><argument_list pos:start="1195:20" pos:end="1195:41">(<argument pos:start="1195:21" pos:end="1195:23"><expr pos:start="1195:21" pos:end="1195:23"><name pos:start="1195:21" pos:end="1195:23">arg</name></expr></argument>, <argument pos:start="1195:26" pos:end="1195:36"><expr pos:start="1195:26" pos:end="1195:36"><sizeof pos:start="1195:26" pos:end="1195:36">sizeof<argument_list pos:start="1195:32" pos:end="1195:36">(<argument pos:start="1195:33" pos:end="1195:35"><expr pos:start="1195:33" pos:end="1195:35"><name pos:start="1195:33" pos:end="1195:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1195:39" pos:end="1195:40"><expr pos:start="1195:39" pos:end="1195:40"><operator pos:start="1195:39" pos:end="1195:39">&amp;</operator><name pos:start="1195:40" pos:end="1195:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1197:13" pos:end="1203:13"><if pos:start="1197:13" pos:end="1203:13">if <condition pos:start="1197:16" pos:end="1197:23">(<expr pos:start="1197:17" pos:end="1197:22"><name pos:start="1197:17" pos:end="1197:22">stream</name></expr>)</condition> <block pos:start="1197:25" pos:end="1203:13">{<block_content pos:start="1199:17" pos:end="1201:53">

                <expr_stmt pos:start="1199:17" pos:end="1199:47"><expr pos:start="1199:17" pos:end="1199:46"><call pos:start="1199:17" pos:end="1199:46"><name pos:start="1199:17" pos:end="1199:24">av_freep</name><argument_list pos:start="1199:25" pos:end="1199:46">(<argument pos:start="1199:26" pos:end="1199:45"><expr pos:start="1199:26" pos:end="1199:45"><operator pos:start="1199:26" pos:end="1199:26">&amp;</operator><name pos:start="1199:27" pos:end="1199:45"><name pos:start="1199:27" pos:end="1199:32">stream</name><operator pos:start="1199:33" pos:end="1199:34">-&gt;</operator><name pos:start="1199:35" pos:end="1199:45">rtsp_option</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1201:17" pos:end="1201:53"><expr pos:start="1201:17" pos:end="1201:52"><name pos:start="1201:17" pos:end="1201:35"><name pos:start="1201:17" pos:end="1201:22">stream</name><operator pos:start="1201:23" pos:end="1201:24">-&gt;</operator><name pos:start="1201:25" pos:end="1201:35">rtsp_option</name></name> <operator pos:start="1201:37" pos:end="1201:37">=</operator> <call pos:start="1201:39" pos:end="1201:52"><name pos:start="1201:39" pos:end="1201:47">av_strdup</name><argument_list pos:start="1201:48" pos:end="1201:52">(<argument pos:start="1201:49" pos:end="1201:51"><expr pos:start="1201:49" pos:end="1201:51"><name pos:start="1201:49" pos:end="1201:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1205:11" pos:end="1227:9">else if <condition pos:start="1205:19" pos:end="1205:56">(<expr pos:start="1205:20" pos:end="1205:55"><operator pos:start="1205:20" pos:end="1205:20">!</operator><call pos:start="1205:21" pos:end="1205:55"><name pos:start="1205:21" pos:end="1205:30">strcasecmp</name><argument_list pos:start="1205:31" pos:end="1205:55">(<argument pos:start="1205:32" pos:end="1205:34"><expr pos:start="1205:32" pos:end="1205:34"><name pos:start="1205:32" pos:end="1205:34">cmd</name></expr></argument>, <argument pos:start="1205:37" pos:end="1205:54"><expr pos:start="1205:37" pos:end="1205:54"><literal type="string" pos:start="1205:37" pos:end="1205:54">"MulticastAddress"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1205:58" pos:end="1227:9">{<block_content pos:start="1207:13" pos:end="1225:13">

            <expr_stmt pos:start="1207:13" pos:end="1207:42"><expr pos:start="1207:13" pos:end="1207:41"><call pos:start="1207:13" pos:end="1207:41"><name pos:start="1207:13" pos:end="1207:19">get_arg</name><argument_list pos:start="1207:20" pos:end="1207:41">(<argument pos:start="1207:21" pos:end="1207:23"><expr pos:start="1207:21" pos:end="1207:23"><name pos:start="1207:21" pos:end="1207:23">arg</name></expr></argument>, <argument pos:start="1207:26" pos:end="1207:36"><expr pos:start="1207:26" pos:end="1207:36"><sizeof pos:start="1207:26" pos:end="1207:36">sizeof<argument_list pos:start="1207:32" pos:end="1207:36">(<argument pos:start="1207:33" pos:end="1207:35"><expr pos:start="1207:33" pos:end="1207:35"><name pos:start="1207:33" pos:end="1207:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1207:39" pos:end="1207:40"><expr pos:start="1207:39" pos:end="1207:40"><operator pos:start="1207:39" pos:end="1207:39">&amp;</operator><name pos:start="1207:40" pos:end="1207:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1209:13" pos:end="1225:13"><if pos:start="1209:13" pos:end="1225:13">if <condition pos:start="1209:16" pos:end="1209:23">(<expr pos:start="1209:17" pos:end="1209:22"><name pos:start="1209:17" pos:end="1209:22">stream</name></expr>)</condition> <block pos:start="1209:25" pos:end="1225:13">{<block_content pos:start="1211:17" pos:end="1223:33">

                <if_stmt pos:start="1211:17" pos:end="1219:17"><if pos:start="1211:17" pos:end="1219:17">if <condition pos:start="1211:20" pos:end="1211:66">(<expr pos:start="1211:21" pos:end="1211:65"><call pos:start="1211:21" pos:end="1211:60"><name pos:start="1211:21" pos:end="1211:32">resolve_host</name><argument_list pos:start="1211:33" pos:end="1211:60">(<argument pos:start="1211:34" pos:end="1211:54"><expr pos:start="1211:34" pos:end="1211:54"><operator pos:start="1211:34" pos:end="1211:34">&amp;</operator><name pos:start="1211:35" pos:end="1211:54"><name pos:start="1211:35" pos:end="1211:40">stream</name><operator pos:start="1211:41" pos:end="1211:42">-&gt;</operator><name pos:start="1211:43" pos:end="1211:54">multicast_ip</name></name></expr></argument>, <argument pos:start="1211:57" pos:end="1211:59"><expr pos:start="1211:57" pos:end="1211:59"><name pos:start="1211:57" pos:end="1211:59">arg</name></expr></argument>)</argument_list></call> <operator pos:start="1211:62" pos:end="1211:63">!=</operator> <literal type="number" pos:start="1211:65" pos:end="1211:65">0</literal></expr>)</condition> <block pos:start="1211:68" pos:end="1219:17">{<block_content pos:start="1213:21" pos:end="1217:29">

                    <expr_stmt pos:start="1213:21" pos:end="1215:53"><expr pos:start="1213:21" pos:end="1215:52"><call pos:start="1213:21" pos:end="1215:52"><name pos:start="1213:21" pos:end="1213:27">fprintf</name><argument_list pos:start="1213:28" pos:end="1215:52">(<argument pos:start="1213:29" pos:end="1213:34"><expr pos:start="1213:29" pos:end="1213:34"><name pos:start="1213:29" pos:end="1213:34">stderr</name></expr></argument>, <argument pos:start="1213:37" pos:end="1213:74"><expr pos:start="1213:37" pos:end="1213:74"><literal type="string" pos:start="1213:37" pos:end="1213:74">"%s:%d: Invalid host/IP address: %s\n"</literal></expr></argument>,

                            <argument pos:start="1215:29" pos:end="1215:36"><expr pos:start="1215:29" pos:end="1215:36"><name pos:start="1215:29" pos:end="1215:36">filename</name></expr></argument>, <argument pos:start="1215:39" pos:end="1215:46"><expr pos:start="1215:39" pos:end="1215:46"><name pos:start="1215:39" pos:end="1215:46">line_num</name></expr></argument>, <argument pos:start="1215:49" pos:end="1215:51"><expr pos:start="1215:49" pos:end="1215:51"><name pos:start="1215:49" pos:end="1215:51">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1217:21" pos:end="1217:29"><expr pos:start="1217:21" pos:end="1217:28"><name pos:start="1217:21" pos:end="1217:26">errors</name><operator pos:start="1217:27" pos:end="1217:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1221:17" pos:end="1221:41"><expr pos:start="1221:17" pos:end="1221:40"><name pos:start="1221:17" pos:end="1221:36"><name pos:start="1221:17" pos:end="1221:22">stream</name><operator pos:start="1221:23" pos:end="1221:24">-&gt;</operator><name pos:start="1221:25" pos:end="1221:36">is_multicast</name></name> <operator pos:start="1221:38" pos:end="1221:38">=</operator> <literal type="number" pos:start="1221:40" pos:end="1221:40">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="1223:17" pos:end="1223:33"><expr pos:start="1223:17" pos:end="1223:32"><name pos:start="1223:17" pos:end="1223:28"><name pos:start="1223:17" pos:end="1223:22">stream</name><operator pos:start="1223:23" pos:end="1223:24">-&gt;</operator><name pos:start="1223:25" pos:end="1223:28">loop</name></name> <operator pos:start="1223:30" pos:end="1223:30">=</operator> <literal type="number" pos:start="1223:32" pos:end="1223:32">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="1223:35" pos:end="1223:58">/* default is looping */</comment>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1227:11" pos:end="1235:9">else if <condition pos:start="1227:19" pos:end="1227:53">(<expr pos:start="1227:20" pos:end="1227:52"><operator pos:start="1227:20" pos:end="1227:20">!</operator><call pos:start="1227:21" pos:end="1227:52"><name pos:start="1227:21" pos:end="1227:30">strcasecmp</name><argument_list pos:start="1227:31" pos:end="1227:52">(<argument pos:start="1227:32" pos:end="1227:34"><expr pos:start="1227:32" pos:end="1227:34"><name pos:start="1227:32" pos:end="1227:34">cmd</name></expr></argument>, <argument pos:start="1227:37" pos:end="1227:51"><expr pos:start="1227:37" pos:end="1227:51"><literal type="string" pos:start="1227:37" pos:end="1227:51">"MulticastPort"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1227:55" pos:end="1235:9">{<block_content pos:start="1229:13" pos:end="1233:51">

            <expr_stmt pos:start="1229:13" pos:end="1229:42"><expr pos:start="1229:13" pos:end="1229:41"><call pos:start="1229:13" pos:end="1229:41"><name pos:start="1229:13" pos:end="1229:19">get_arg</name><argument_list pos:start="1229:20" pos:end="1229:41">(<argument pos:start="1229:21" pos:end="1229:23"><expr pos:start="1229:21" pos:end="1229:23"><name pos:start="1229:21" pos:end="1229:23">arg</name></expr></argument>, <argument pos:start="1229:26" pos:end="1229:36"><expr pos:start="1229:26" pos:end="1229:36"><sizeof pos:start="1229:26" pos:end="1229:36">sizeof<argument_list pos:start="1229:32" pos:end="1229:36">(<argument pos:start="1229:33" pos:end="1229:35"><expr pos:start="1229:33" pos:end="1229:35"><name pos:start="1229:33" pos:end="1229:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1229:39" pos:end="1229:40"><expr pos:start="1229:39" pos:end="1229:40"><operator pos:start="1229:39" pos:end="1229:39">&amp;</operator><name pos:start="1229:40" pos:end="1229:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1231:13" pos:end="1233:51"><if pos:start="1231:13" pos:end="1233:51">if <condition pos:start="1231:16" pos:end="1231:23">(<expr pos:start="1231:17" pos:end="1231:22"><name pos:start="1231:17" pos:end="1231:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1233:17" pos:end="1233:51"><block_content pos:start="1233:17" pos:end="1233:51">

                <expr_stmt pos:start="1233:17" pos:end="1233:51"><expr pos:start="1233:17" pos:end="1233:50"><name pos:start="1233:17" pos:end="1233:38"><name pos:start="1233:17" pos:end="1233:22">stream</name><operator pos:start="1233:23" pos:end="1233:24">-&gt;</operator><name pos:start="1233:25" pos:end="1233:38">multicast_port</name></name> <operator pos:start="1233:40" pos:end="1233:40">=</operator> <call pos:start="1233:42" pos:end="1233:50"><name pos:start="1233:42" pos:end="1233:45">atoi</name><argument_list pos:start="1233:46" pos:end="1233:50">(<argument pos:start="1233:47" pos:end="1233:49"><expr pos:start="1233:47" pos:end="1233:49"><name pos:start="1233:47" pos:end="1233:49">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1235:11" pos:end="1243:9">else if <condition pos:start="1235:19" pos:end="1235:52">(<expr pos:start="1235:20" pos:end="1235:51"><operator pos:start="1235:20" pos:end="1235:20">!</operator><call pos:start="1235:21" pos:end="1235:51"><name pos:start="1235:21" pos:end="1235:30">strcasecmp</name><argument_list pos:start="1235:31" pos:end="1235:51">(<argument pos:start="1235:32" pos:end="1235:34"><expr pos:start="1235:32" pos:end="1235:34"><name pos:start="1235:32" pos:end="1235:34">cmd</name></expr></argument>, <argument pos:start="1235:37" pos:end="1235:50"><expr pos:start="1235:37" pos:end="1235:50"><literal type="string" pos:start="1235:37" pos:end="1235:50">"MulticastTTL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1235:54" pos:end="1243:9">{<block_content pos:start="1237:13" pos:end="1241:50">

            <expr_stmt pos:start="1237:13" pos:end="1237:42"><expr pos:start="1237:13" pos:end="1237:41"><call pos:start="1237:13" pos:end="1237:41"><name pos:start="1237:13" pos:end="1237:19">get_arg</name><argument_list pos:start="1237:20" pos:end="1237:41">(<argument pos:start="1237:21" pos:end="1237:23"><expr pos:start="1237:21" pos:end="1237:23"><name pos:start="1237:21" pos:end="1237:23">arg</name></expr></argument>, <argument pos:start="1237:26" pos:end="1237:36"><expr pos:start="1237:26" pos:end="1237:36"><sizeof pos:start="1237:26" pos:end="1237:36">sizeof<argument_list pos:start="1237:32" pos:end="1237:36">(<argument pos:start="1237:33" pos:end="1237:35"><expr pos:start="1237:33" pos:end="1237:35"><name pos:start="1237:33" pos:end="1237:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1237:39" pos:end="1237:40"><expr pos:start="1237:39" pos:end="1237:40"><operator pos:start="1237:39" pos:end="1237:39">&amp;</operator><name pos:start="1237:40" pos:end="1237:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1239:13" pos:end="1241:50"><if pos:start="1239:13" pos:end="1241:50">if <condition pos:start="1239:16" pos:end="1239:23">(<expr pos:start="1239:17" pos:end="1239:22"><name pos:start="1239:17" pos:end="1239:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1241:17" pos:end="1241:50"><block_content pos:start="1241:17" pos:end="1241:50">

                <expr_stmt pos:start="1241:17" pos:end="1241:50"><expr pos:start="1241:17" pos:end="1241:49"><name pos:start="1241:17" pos:end="1241:37"><name pos:start="1241:17" pos:end="1241:22">stream</name><operator pos:start="1241:23" pos:end="1241:24">-&gt;</operator><name pos:start="1241:25" pos:end="1241:37">multicast_ttl</name></name> <operator pos:start="1241:39" pos:end="1241:39">=</operator> <call pos:start="1241:41" pos:end="1241:49"><name pos:start="1241:41" pos:end="1241:44">atoi</name><argument_list pos:start="1241:45" pos:end="1241:49">(<argument pos:start="1241:46" pos:end="1241:48"><expr pos:start="1241:46" pos:end="1241:48"><name pos:start="1241:46" pos:end="1241:48">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1243:11" pos:end="1249:9">else if <condition pos:start="1243:19" pos:end="1243:46">(<expr pos:start="1243:20" pos:end="1243:45"><operator pos:start="1243:20" pos:end="1243:20">!</operator><call pos:start="1243:21" pos:end="1243:45"><name pos:start="1243:21" pos:end="1243:30">strcasecmp</name><argument_list pos:start="1243:31" pos:end="1243:45">(<argument pos:start="1243:32" pos:end="1243:34"><expr pos:start="1243:32" pos:end="1243:34"><name pos:start="1243:32" pos:end="1243:34">cmd</name></expr></argument>, <argument pos:start="1243:37" pos:end="1243:44"><expr pos:start="1243:37" pos:end="1243:44"><literal type="string" pos:start="1243:37" pos:end="1243:44">"NoLoop"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1243:48" pos:end="1249:9">{<block_content pos:start="1245:13" pos:end="1247:33">

            <if_stmt pos:start="1245:13" pos:end="1247:33"><if pos:start="1245:13" pos:end="1247:33">if <condition pos:start="1245:16" pos:end="1245:23">(<expr pos:start="1245:17" pos:end="1245:22"><name pos:start="1245:17" pos:end="1245:22">stream</name></expr>)</condition><block type="pseudo" pos:start="1247:17" pos:end="1247:33"><block_content pos:start="1247:17" pos:end="1247:33">

                <expr_stmt pos:start="1247:17" pos:end="1247:33"><expr pos:start="1247:17" pos:end="1247:32"><name pos:start="1247:17" pos:end="1247:28"><name pos:start="1247:17" pos:end="1247:22">stream</name><operator pos:start="1247:23" pos:end="1247:24">-&gt;</operator><name pos:start="1247:25" pos:end="1247:28">loop</name></name> <operator pos:start="1247:30" pos:end="1247:30">=</operator> <literal type="number" pos:start="1247:32" pos:end="1247:32">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1249:11" pos:end="1289:9">else if <condition pos:start="1249:19" pos:end="1249:49">(<expr pos:start="1249:20" pos:end="1249:48"><operator pos:start="1249:20" pos:end="1249:20">!</operator><call pos:start="1249:21" pos:end="1249:48"><name pos:start="1249:21" pos:end="1249:30">strcasecmp</name><argument_list pos:start="1249:31" pos:end="1249:48">(<argument pos:start="1249:32" pos:end="1249:34"><expr pos:start="1249:32" pos:end="1249:34"><name pos:start="1249:32" pos:end="1249:34">cmd</name></expr></argument>, <argument pos:start="1249:37" pos:end="1249:47"><expr pos:start="1249:37" pos:end="1249:47"><literal type="string" pos:start="1249:37" pos:end="1249:47">"&lt;/Stream&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1249:51" pos:end="1289:9">{<block_content pos:start="1251:13" pos:end="1287:13">

            <if_stmt pos:start="1251:13" pos:end="1287:13"><if pos:start="1251:13" pos:end="1259:13">if <condition pos:start="1251:16" pos:end="1251:24">(<expr pos:start="1251:17" pos:end="1251:23"><operator pos:start="1251:17" pos:end="1251:17">!</operator><name pos:start="1251:18" pos:end="1251:23">stream</name></expr>)</condition> <block pos:start="1251:26" pos:end="1259:13">{<block_content pos:start="1253:17" pos:end="1257:25">

                <expr_stmt pos:start="1253:17" pos:end="1255:44"><expr pos:start="1253:17" pos:end="1255:43"><call pos:start="1253:17" pos:end="1255:43"><name pos:start="1253:17" pos:end="1253:23">fprintf</name><argument_list pos:start="1253:24" pos:end="1255:43">(<argument pos:start="1253:25" pos:end="1253:30"><expr pos:start="1253:25" pos:end="1253:30"><name pos:start="1253:25" pos:end="1253:30">stderr</name></expr></argument>, <argument pos:start="1253:33" pos:end="1253:82"><expr pos:start="1253:33" pos:end="1253:82"><literal type="string" pos:start="1253:33" pos:end="1253:82">"%s:%d: No corresponding &lt;Stream&gt; for &lt;/Stream&gt;\n"</literal></expr></argument>,

                        <argument pos:start="1255:25" pos:end="1255:32"><expr pos:start="1255:25" pos:end="1255:32"><name pos:start="1255:25" pos:end="1255:32">filename</name></expr></argument>, <argument pos:start="1255:35" pos:end="1255:42"><expr pos:start="1255:35" pos:end="1255:42"><name pos:start="1255:35" pos:end="1255:42">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1257:17" pos:end="1257:25"><expr pos:start="1257:17" pos:end="1257:24"><name pos:start="1257:17" pos:end="1257:22">errors</name><operator pos:start="1257:23" pos:end="1257:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1259:15" pos:end="1287:13">else <block pos:start="1259:20" pos:end="1287:13">{<block_content pos:start="1261:17" pos:end="1285:30">

                <if_stmt pos:start="1261:17" pos:end="1283:17"><if pos:start="1261:17" pos:end="1283:17">if <condition pos:start="1261:20" pos:end="1261:89">(<expr pos:start="1261:21" pos:end="1261:88"><name pos:start="1261:21" pos:end="1261:32"><name pos:start="1261:21" pos:end="1261:26">stream</name><operator pos:start="1261:27" pos:end="1261:28">-&gt;</operator><name pos:start="1261:29" pos:end="1261:32">feed</name></name> <operator pos:start="1261:34" pos:end="1261:35">&amp;&amp;</operator> <name pos:start="1261:37" pos:end="1261:47"><name pos:start="1261:37" pos:end="1261:42">stream</name><operator pos:start="1261:43" pos:end="1261:44">-&gt;</operator><name pos:start="1261:45" pos:end="1261:47">fmt</name></name> <operator pos:start="1261:49" pos:end="1261:50">&amp;&amp;</operator> <call pos:start="1261:52" pos:end="1261:83"><name pos:start="1261:52" pos:end="1261:57">strcmp</name><argument_list pos:start="1261:58" pos:end="1261:83">(<argument pos:start="1261:59" pos:end="1261:75"><expr pos:start="1261:59" pos:end="1261:75"><name pos:start="1261:59" pos:end="1261:75"><name pos:start="1261:59" pos:end="1261:64">stream</name><operator pos:start="1261:65" pos:end="1261:66">-&gt;</operator><name pos:start="1261:67" pos:end="1261:69">fmt</name><operator pos:start="1261:70" pos:end="1261:71">-&gt;</operator><name pos:start="1261:72" pos:end="1261:75">name</name></name></expr></argument>, <argument pos:start="1261:78" pos:end="1261:82"><expr pos:start="1261:78" pos:end="1261:82"><literal type="string" pos:start="1261:78" pos:end="1261:82">"ffm"</literal></expr></argument>)</argument_list></call> <operator pos:start="1261:85" pos:end="1261:86">!=</operator> <literal type="number" pos:start="1261:88" pos:end="1261:88">0</literal></expr>)</condition> <block pos:start="1261:91" pos:end="1283:17">{<block_content pos:start="1263:21" pos:end="1281:21">

                    <if_stmt pos:start="1263:21" pos:end="1271:21"><if pos:start="1263:21" pos:end="1271:21">if <condition pos:start="1263:24" pos:end="1263:50">(<expr pos:start="1263:25" pos:end="1263:49"><name pos:start="1263:25" pos:end="1263:32">audio_id</name> <operator pos:start="1263:34" pos:end="1263:35">!=</operator> <name pos:start="1263:37" pos:end="1263:49">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="1263:52" pos:end="1271:21">{<block_content pos:start="1265:25" pos:end="1269:54">

                        <expr_stmt pos:start="1265:25" pos:end="1265:64"><expr pos:start="1265:25" pos:end="1265:63"><name pos:start="1265:25" pos:end="1265:44"><name pos:start="1265:25" pos:end="1265:33">audio_enc</name><operator pos:start="1265:34" pos:end="1265:34">.</operator><name pos:start="1265:35" pos:end="1265:44">codec_type</name></name> <operator pos:start="1265:46" pos:end="1265:46">=</operator> <name pos:start="1265:48" pos:end="1265:63">CODEC_TYPE_AUDIO</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1267:25" pos:end="1267:54"><expr pos:start="1267:25" pos:end="1267:53"><name pos:start="1267:25" pos:end="1267:42"><name pos:start="1267:25" pos:end="1267:33">audio_enc</name><operator pos:start="1267:34" pos:end="1267:34">.</operator><name pos:start="1267:35" pos:end="1267:42">codec_id</name></name> <operator pos:start="1267:44" pos:end="1267:44">=</operator> <name pos:start="1267:46" pos:end="1267:53">audio_id</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1269:25" pos:end="1269:54"><expr pos:start="1269:25" pos:end="1269:53"><call pos:start="1269:25" pos:end="1269:53"><name pos:start="1269:25" pos:end="1269:33">add_codec</name><argument_list pos:start="1269:34" pos:end="1269:53">(<argument pos:start="1269:35" pos:end="1269:40"><expr pos:start="1269:35" pos:end="1269:40"><name pos:start="1269:35" pos:end="1269:40">stream</name></expr></argument>, <argument pos:start="1269:43" pos:end="1269:52"><expr pos:start="1269:43" pos:end="1269:52"><operator pos:start="1269:43" pos:end="1269:43">&amp;</operator><name pos:start="1269:44" pos:end="1269:52">audio_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="1273:21" pos:end="1281:21"><if pos:start="1273:21" pos:end="1281:21">if <condition pos:start="1273:24" pos:end="1273:50">(<expr pos:start="1273:25" pos:end="1273:49"><name pos:start="1273:25" pos:end="1273:32">video_id</name> <operator pos:start="1273:34" pos:end="1273:35">!=</operator> <name pos:start="1273:37" pos:end="1273:49">CODEC_ID_NONE</name></expr>)</condition> <block pos:start="1273:52" pos:end="1281:21">{<block_content pos:start="1275:25" pos:end="1279:54">

                        <expr_stmt pos:start="1275:25" pos:end="1275:64"><expr pos:start="1275:25" pos:end="1275:63"><name pos:start="1275:25" pos:end="1275:44"><name pos:start="1275:25" pos:end="1275:33">video_enc</name><operator pos:start="1275:34" pos:end="1275:34">.</operator><name pos:start="1275:35" pos:end="1275:44">codec_type</name></name> <operator pos:start="1275:46" pos:end="1275:46">=</operator> <name pos:start="1275:48" pos:end="1275:63">CODEC_TYPE_VIDEO</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1277:25" pos:end="1277:54"><expr pos:start="1277:25" pos:end="1277:53"><name pos:start="1277:25" pos:end="1277:42"><name pos:start="1277:25" pos:end="1277:33">video_enc</name><operator pos:start="1277:34" pos:end="1277:34">.</operator><name pos:start="1277:35" pos:end="1277:42">codec_id</name></name> <operator pos:start="1277:44" pos:end="1277:44">=</operator> <name pos:start="1277:46" pos:end="1277:53">video_id</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="1279:25" pos:end="1279:54"><expr pos:start="1279:25" pos:end="1279:53"><call pos:start="1279:25" pos:end="1279:53"><name pos:start="1279:25" pos:end="1279:33">add_codec</name><argument_list pos:start="1279:34" pos:end="1279:53">(<argument pos:start="1279:35" pos:end="1279:40"><expr pos:start="1279:35" pos:end="1279:40"><name pos:start="1279:35" pos:end="1279:40">stream</name></expr></argument>, <argument pos:start="1279:43" pos:end="1279:52"><expr pos:start="1279:43" pos:end="1279:52"><operator pos:start="1279:43" pos:end="1279:43">&amp;</operator><name pos:start="1279:44" pos:end="1279:52">video_enc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1285:17" pos:end="1285:30"><expr pos:start="1285:17" pos:end="1285:29"><name pos:start="1285:17" pos:end="1285:22">stream</name> <operator pos:start="1285:24" pos:end="1285:24">=</operator> <name pos:start="1285:26" pos:end="1285:29">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1289:11" pos:end="1325:9">else if <condition pos:start="1289:19" pos:end="1289:49">(<expr pos:start="1289:20" pos:end="1289:48"><operator pos:start="1289:20" pos:end="1289:20">!</operator><call pos:start="1289:21" pos:end="1289:48"><name pos:start="1289:21" pos:end="1289:30">strcasecmp</name><argument_list pos:start="1289:31" pos:end="1289:48">(<argument pos:start="1289:32" pos:end="1289:34"><expr pos:start="1289:32" pos:end="1289:34"><name pos:start="1289:32" pos:end="1289:34">cmd</name></expr></argument>, <argument pos:start="1289:37" pos:end="1289:47"><expr pos:start="1289:37" pos:end="1289:47"><literal type="string" pos:start="1289:37" pos:end="1289:47">"&lt;Redirect"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1289:51" pos:end="1325:9">{<block_content pos:start="1293:13" pos:end="1323:13">

            <comment type="block" format="doxygen" pos:start="1291:13" pos:end="1291:59">/*********************************************/</comment>

            <decl_stmt pos:start="1293:13" pos:end="1293:20"><decl pos:start="1293:13" pos:end="1293:19"><type pos:start="1293:13" pos:end="1293:18"><name pos:start="1293:13" pos:end="1293:16">char</name> <modifier pos:start="1293:18" pos:end="1293:18">*</modifier></type><name pos:start="1293:19" pos:end="1293:19">q</name></decl>;</decl_stmt>

            <if_stmt pos:start="1295:13" pos:end="1323:13"><if pos:start="1295:13" pos:end="1303:13">if <condition pos:start="1295:16" pos:end="1295:43">(<expr pos:start="1295:17" pos:end="1295:42"><name pos:start="1295:17" pos:end="1295:22">stream</name> <operator pos:start="1295:24" pos:end="1295:25">||</operator> <name pos:start="1295:27" pos:end="1295:30">feed</name> <operator pos:start="1295:32" pos:end="1295:33">||</operator> <name pos:start="1295:35" pos:end="1295:42">redirect</name></expr>)</condition> <block pos:start="1295:45" pos:end="1303:13">{<block_content pos:start="1297:17" pos:end="1301:25">

                <expr_stmt pos:start="1297:17" pos:end="1299:44"><expr pos:start="1297:17" pos:end="1299:43"><call pos:start="1297:17" pos:end="1299:43"><name pos:start="1297:17" pos:end="1297:23">fprintf</name><argument_list pos:start="1297:24" pos:end="1299:43">(<argument pos:start="1297:25" pos:end="1297:30"><expr pos:start="1297:25" pos:end="1297:30"><name pos:start="1297:25" pos:end="1297:30">stderr</name></expr></argument>, <argument pos:start="1297:33" pos:end="1297:59"><expr pos:start="1297:33" pos:end="1297:59"><literal type="string" pos:start="1297:33" pos:end="1297:59">"%s:%d: Already in a tag\n"</literal></expr></argument>,

                        <argument pos:start="1299:25" pos:end="1299:32"><expr pos:start="1299:25" pos:end="1299:32"><name pos:start="1299:25" pos:end="1299:32">filename</name></expr></argument>, <argument pos:start="1299:35" pos:end="1299:42"><expr pos:start="1299:35" pos:end="1299:42"><name pos:start="1299:35" pos:end="1299:42">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1301:17" pos:end="1301:25"><expr pos:start="1301:17" pos:end="1301:24"><name pos:start="1301:17" pos:end="1301:22">errors</name><operator pos:start="1301:23" pos:end="1301:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1303:15" pos:end="1323:13">else <block pos:start="1303:20" pos:end="1323:13">{<block_content pos:start="1305:17" pos:end="1321:61">

                <expr_stmt pos:start="1305:17" pos:end="1305:56"><expr pos:start="1305:17" pos:end="1305:55"><name pos:start="1305:17" pos:end="1305:24">redirect</name> <operator pos:start="1305:26" pos:end="1305:26">=</operator> <call pos:start="1305:28" pos:end="1305:55"><name pos:start="1305:28" pos:end="1305:37">av_mallocz</name><argument_list pos:start="1305:38" pos:end="1305:55">(<argument pos:start="1305:39" pos:end="1305:54"><expr pos:start="1305:39" pos:end="1305:54"><sizeof pos:start="1305:39" pos:end="1305:54">sizeof<argument_list pos:start="1305:45" pos:end="1305:54">(<argument pos:start="1305:46" pos:end="1305:53"><expr pos:start="1305:46" pos:end="1305:53"><name pos:start="1305:46" pos:end="1305:53">FFStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1307:17" pos:end="1307:40"><expr pos:start="1307:17" pos:end="1307:39"><operator pos:start="1307:17" pos:end="1307:17">*</operator><name pos:start="1307:18" pos:end="1307:28">last_stream</name> <operator pos:start="1307:30" pos:end="1307:30">=</operator> <name pos:start="1307:32" pos:end="1307:39">redirect</name></expr>;</expr_stmt>

                <expr_stmt pos:start="1309:17" pos:end="1309:46"><expr pos:start="1309:17" pos:end="1309:45"><name pos:start="1309:17" pos:end="1309:27">last_stream</name> <operator pos:start="1309:29" pos:end="1309:29">=</operator> <operator pos:start="1309:31" pos:end="1309:31">&amp;</operator><name pos:start="1309:32" pos:end="1309:45"><name pos:start="1309:32" pos:end="1309:39">redirect</name><operator pos:start="1309:40" pos:end="1309:41">-&gt;</operator><name pos:start="1309:42" pos:end="1309:45">next</name></name></expr>;</expr_stmt>



                <expr_stmt pos:start="1313:17" pos:end="1313:76"><expr pos:start="1313:17" pos:end="1313:75"><call pos:start="1313:17" pos:end="1313:75"><name pos:start="1313:17" pos:end="1313:23">get_arg</name><argument_list pos:start="1313:24" pos:end="1313:75">(<argument pos:start="1313:25" pos:end="1313:42"><expr pos:start="1313:25" pos:end="1313:42"><name pos:start="1313:25" pos:end="1313:42"><name pos:start="1313:25" pos:end="1313:32">redirect</name><operator pos:start="1313:33" pos:end="1313:34">-&gt;</operator><name pos:start="1313:35" pos:end="1313:42">filename</name></name></expr></argument>, <argument pos:start="1313:45" pos:end="1313:70"><expr pos:start="1313:45" pos:end="1313:70"><sizeof pos:start="1313:45" pos:end="1313:70">sizeof<argument_list pos:start="1313:51" pos:end="1313:70">(<argument pos:start="1313:52" pos:end="1313:69"><expr pos:start="1313:52" pos:end="1313:69"><name pos:start="1313:52" pos:end="1313:69"><name pos:start="1313:52" pos:end="1313:59">redirect</name><operator pos:start="1313:60" pos:end="1313:61">-&gt;</operator><name pos:start="1313:62" pos:end="1313:69">filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1313:73" pos:end="1313:74"><expr pos:start="1313:73" pos:end="1313:74"><operator pos:start="1313:73" pos:end="1313:73">&amp;</operator><name pos:start="1313:74" pos:end="1313:74">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1315:17" pos:end="1315:53"><expr pos:start="1315:17" pos:end="1315:52"><name pos:start="1315:17" pos:end="1315:17">q</name> <operator pos:start="1315:19" pos:end="1315:19">=</operator> <call pos:start="1315:21" pos:end="1315:52"><name pos:start="1315:21" pos:end="1315:27">strrchr</name><argument_list pos:start="1315:28" pos:end="1315:52">(<argument pos:start="1315:29" pos:end="1315:46"><expr pos:start="1315:29" pos:end="1315:46"><name pos:start="1315:29" pos:end="1315:46"><name pos:start="1315:29" pos:end="1315:36">redirect</name><operator pos:start="1315:37" pos:end="1315:38">-&gt;</operator><name pos:start="1315:39" pos:end="1315:46">filename</name></name></expr></argument>, <argument pos:start="1315:49" pos:end="1315:51"><expr pos:start="1315:49" pos:end="1315:51"><literal type="char" pos:start="1315:49" pos:end="1315:51">'&gt;'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1317:17" pos:end="1319:30"><if pos:start="1317:17" pos:end="1319:30">if <condition pos:start="1317:20" pos:end="1317:23">(<expr pos:start="1317:21" pos:end="1317:22"><operator pos:start="1317:21" pos:end="1317:21">*</operator><name pos:start="1317:22" pos:end="1317:22">q</name></expr>)</condition><block type="pseudo" pos:start="1319:21" pos:end="1319:30"><block_content pos:start="1319:21" pos:end="1319:30">

                    <expr_stmt pos:start="1319:21" pos:end="1319:30"><expr pos:start="1319:21" pos:end="1319:29"><operator pos:start="1319:21" pos:end="1319:21">*</operator><name pos:start="1319:22" pos:end="1319:22">q</name> <operator pos:start="1319:24" pos:end="1319:24">=</operator> <literal type="char" pos:start="1319:26" pos:end="1319:29">'\0'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="1321:17" pos:end="1321:61"><expr pos:start="1321:17" pos:end="1321:60"><name pos:start="1321:17" pos:end="1321:37"><name pos:start="1321:17" pos:end="1321:24">redirect</name><operator pos:start="1321:25" pos:end="1321:26">-&gt;</operator><name pos:start="1321:27" pos:end="1321:37">stream_type</name></name> <operator pos:start="1321:39" pos:end="1321:39">=</operator> <name pos:start="1321:41" pos:end="1321:60">STREAM_TYPE_REDIRECT</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1325:11" pos:end="1331:9">else if <condition pos:start="1325:19" pos:end="1325:43">(<expr pos:start="1325:20" pos:end="1325:42"><operator pos:start="1325:20" pos:end="1325:20">!</operator><call pos:start="1325:21" pos:end="1325:42"><name pos:start="1325:21" pos:end="1325:30">strcasecmp</name><argument_list pos:start="1325:31" pos:end="1325:42">(<argument pos:start="1325:32" pos:end="1325:34"><expr pos:start="1325:32" pos:end="1325:34"><name pos:start="1325:32" pos:end="1325:34">cmd</name></expr></argument>, <argument pos:start="1325:37" pos:end="1325:41"><expr pos:start="1325:37" pos:end="1325:41"><literal type="string" pos:start="1325:37" pos:end="1325:41">"URL"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1325:45" pos:end="1331:9">{<block_content pos:start="1327:13" pos:end="1329:86">

            <if_stmt pos:start="1327:13" pos:end="1329:86"><if pos:start="1327:13" pos:end="1329:86">if <condition pos:start="1327:16" pos:end="1327:25">(<expr pos:start="1327:17" pos:end="1327:24"><name pos:start="1327:17" pos:end="1327:24">redirect</name></expr>)</condition><block type="pseudo" pos:start="1329:17" pos:end="1329:86"><block_content pos:start="1329:17" pos:end="1329:86">

                <expr_stmt pos:start="1329:17" pos:end="1329:86"><expr pos:start="1329:17" pos:end="1329:85"><call pos:start="1329:17" pos:end="1329:85"><name pos:start="1329:17" pos:end="1329:23">get_arg</name><argument_list pos:start="1329:24" pos:end="1329:85">(<argument pos:start="1329:25" pos:end="1329:47"><expr pos:start="1329:25" pos:end="1329:47"><name pos:start="1329:25" pos:end="1329:47"><name pos:start="1329:25" pos:end="1329:32">redirect</name><operator pos:start="1329:33" pos:end="1329:34">-&gt;</operator><name pos:start="1329:35" pos:end="1329:47">feed_filename</name></name></expr></argument>, <argument pos:start="1329:50" pos:end="1329:80"><expr pos:start="1329:50" pos:end="1329:80"><sizeof pos:start="1329:50" pos:end="1329:80">sizeof<argument_list pos:start="1329:56" pos:end="1329:80">(<argument pos:start="1329:57" pos:end="1329:79"><expr pos:start="1329:57" pos:end="1329:79"><name pos:start="1329:57" pos:end="1329:79"><name pos:start="1329:57" pos:end="1329:64">redirect</name><operator pos:start="1329:65" pos:end="1329:66">-&gt;</operator><name pos:start="1329:67" pos:end="1329:79">feed_filename</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1329:83" pos:end="1329:84"><expr pos:start="1329:83" pos:end="1329:84"><operator pos:start="1329:83" pos:end="1329:83">&amp;</operator><name pos:start="1329:84" pos:end="1329:84">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1331:11" pos:end="1357:9">else if <condition pos:start="1331:19" pos:end="1331:51">(<expr pos:start="1331:20" pos:end="1331:50"><operator pos:start="1331:20" pos:end="1331:20">!</operator><call pos:start="1331:21" pos:end="1331:50"><name pos:start="1331:21" pos:end="1331:30">strcasecmp</name><argument_list pos:start="1331:31" pos:end="1331:50">(<argument pos:start="1331:32" pos:end="1331:34"><expr pos:start="1331:32" pos:end="1331:34"><name pos:start="1331:32" pos:end="1331:34">cmd</name></expr></argument>, <argument pos:start="1331:37" pos:end="1331:49"><expr pos:start="1331:37" pos:end="1331:49"><literal type="string" pos:start="1331:37" pos:end="1331:49">"&lt;/Redirect&gt;"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1331:53" pos:end="1357:9">{<block_content pos:start="1333:13" pos:end="1355:13">

            <if_stmt pos:start="1333:13" pos:end="1355:13"><if pos:start="1333:13" pos:end="1341:13">if <condition pos:start="1333:16" pos:end="1333:26">(<expr pos:start="1333:17" pos:end="1333:25"><operator pos:start="1333:17" pos:end="1333:17">!</operator><name pos:start="1333:18" pos:end="1333:25">redirect</name></expr>)</condition> <block pos:start="1333:28" pos:end="1341:13">{<block_content pos:start="1335:17" pos:end="1339:25">

                <expr_stmt pos:start="1335:17" pos:end="1337:44"><expr pos:start="1335:17" pos:end="1337:43"><call pos:start="1335:17" pos:end="1337:43"><name pos:start="1335:17" pos:end="1335:23">fprintf</name><argument_list pos:start="1335:24" pos:end="1337:43">(<argument pos:start="1335:25" pos:end="1335:30"><expr pos:start="1335:25" pos:end="1335:30"><name pos:start="1335:25" pos:end="1335:30">stderr</name></expr></argument>, <argument pos:start="1335:33" pos:end="1335:86"><expr pos:start="1335:33" pos:end="1335:86"><literal type="string" pos:start="1335:33" pos:end="1335:86">"%s:%d: No corresponding &lt;Redirect&gt; for &lt;/Redirect&gt;\n"</literal></expr></argument>,

                        <argument pos:start="1337:25" pos:end="1337:32"><expr pos:start="1337:25" pos:end="1337:32"><name pos:start="1337:25" pos:end="1337:32">filename</name></expr></argument>, <argument pos:start="1337:35" pos:end="1337:42"><expr pos:start="1337:35" pos:end="1337:42"><name pos:start="1337:35" pos:end="1337:42">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1339:17" pos:end="1339:25"><expr pos:start="1339:17" pos:end="1339:24"><name pos:start="1339:17" pos:end="1339:22">errors</name><operator pos:start="1339:23" pos:end="1339:24">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1341:15" pos:end="1355:13">else <block pos:start="1341:20" pos:end="1355:13">{<block_content pos:start="1343:17" pos:end="1353:32">

                <if_stmt pos:start="1343:17" pos:end="1351:17"><if pos:start="1343:17" pos:end="1351:17">if <condition pos:start="1343:20" pos:end="1343:48">(<expr pos:start="1343:21" pos:end="1343:47"><operator pos:start="1343:21" pos:end="1343:21">!</operator><name pos:start="1343:22" pos:end="1343:47"><name pos:start="1343:22" pos:end="1343:29">redirect</name><operator pos:start="1343:30" pos:end="1343:31">-&gt;</operator><name pos:start="1343:32" pos:end="1343:44">feed_filename</name><index pos:start="1343:45" pos:end="1343:47">[<expr pos:start="1343:46" pos:end="1343:46"><literal type="number" pos:start="1343:46" pos:end="1343:46">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="1343:50" pos:end="1351:17">{<block_content pos:start="1345:21" pos:end="1349:29">

                    <expr_stmt pos:start="1345:21" pos:end="1347:48"><expr pos:start="1345:21" pos:end="1347:47"><call pos:start="1345:21" pos:end="1347:47"><name pos:start="1345:21" pos:end="1345:27">fprintf</name><argument_list pos:start="1345:28" pos:end="1347:47">(<argument pos:start="1345:29" pos:end="1345:34"><expr pos:start="1345:29" pos:end="1345:34"><name pos:start="1345:29" pos:end="1345:34">stderr</name></expr></argument>, <argument pos:start="1345:37" pos:end="1345:74"><expr pos:start="1345:37" pos:end="1345:74"><literal type="string" pos:start="1345:37" pos:end="1345:74">"%s:%d: No URL found for &lt;Redirect&gt;\n"</literal></expr></argument>,

                            <argument pos:start="1347:29" pos:end="1347:36"><expr pos:start="1347:29" pos:end="1347:36"><name pos:start="1347:29" pos:end="1347:36">filename</name></expr></argument>, <argument pos:start="1347:39" pos:end="1347:46"><expr pos:start="1347:39" pos:end="1347:46"><name pos:start="1347:39" pos:end="1347:46">line_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="1349:21" pos:end="1349:29"><expr pos:start="1349:21" pos:end="1349:28"><name pos:start="1349:21" pos:end="1349:26">errors</name><operator pos:start="1349:27" pos:end="1349:28">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1353:17" pos:end="1353:32"><expr pos:start="1353:17" pos:end="1353:31"><name pos:start="1353:17" pos:end="1353:24">redirect</name> <operator pos:start="1353:26" pos:end="1353:26">=</operator> <name pos:start="1353:28" pos:end="1353:31">NULL</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="1357:11" pos:end="1375:9">else if <condition pos:start="1357:19" pos:end="1357:50">(<expr pos:start="1357:20" pos:end="1357:49"><operator pos:start="1357:20" pos:end="1357:20">!</operator><call pos:start="1357:21" pos:end="1357:49"><name pos:start="1357:21" pos:end="1357:30">strcasecmp</name><argument_list pos:start="1357:31" pos:end="1357:49">(<argument pos:start="1357:32" pos:end="1357:34"><expr pos:start="1357:32" pos:end="1357:34"><name pos:start="1357:32" pos:end="1357:34">cmd</name></expr></argument>, <argument pos:start="1357:37" pos:end="1357:48"><expr pos:start="1357:37" pos:end="1357:48"><literal type="string" pos:start="1357:37" pos:end="1357:48">"LoadModule"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1357:52" pos:end="1375:9">{<block_content pos:start="1359:13" pos:end="1374:0">

            <expr_stmt pos:start="1359:13" pos:end="1362:0"><expr pos:start="1359:13" pos:end="1359:41"><call pos:start="1359:13" pos:end="1359:41"><name pos:start="1359:13" pos:end="1359:19">get_arg</name><argument_list pos:start="1359:20" pos:end="1359:41">(<argument pos:start="1359:21" pos:end="1359:23"><expr pos:start="1359:21" pos:end="1359:23"><name pos:start="1359:21" pos:end="1359:23">arg</name></expr></argument>, <argument pos:start="1359:26" pos:end="1359:36"><expr pos:start="1359:26" pos:end="1359:36"><sizeof pos:start="1359:26" pos:end="1359:36">sizeof<argument_list pos:start="1359:32" pos:end="1359:36">(<argument pos:start="1359:33" pos:end="1359:35"><expr pos:start="1359:33" pos:end="1359:35"><name pos:start="1359:33" pos:end="1359:35">arg</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="1359:39" pos:end="1359:40"><expr pos:start="1359:39" pos:end="1359:40"><operator pos:start="1359:39" pos:end="1359:39">&amp;</operator><name pos:start="1359:40" pos:end="1359:40">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1361:1" pos:end="1361:15">#<cpp:directive pos:start="1361:2" pos:end="1361:3">if</cpp:directive> <expr pos:start="1361:5" pos:end="1361:15"><name pos:start="1361:5" pos:end="1361:15">HAVE_DLOPEN</name></expr></cpp:if>

            <expr_stmt pos:start="1363:13" pos:end="1366:0"><expr pos:start="1363:13" pos:end="1363:28"><call pos:start="1363:13" pos:end="1363:28"><name pos:start="1363:13" pos:end="1363:23">load_module</name><argument_list pos:start="1363:24" pos:end="1363:28">(<argument pos:start="1363:25" pos:end="1363:27"><expr pos:start="1363:25" pos:end="1363:27"><name pos:start="1363:25" pos:end="1363:27">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1365:1" pos:end="1365:5">#<cpp:directive pos:start="1365:2" pos:end="1365:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1367:13" pos:end="1369:45"><expr pos:start="1367:13" pos:end="1369:44"><call pos:start="1367:13" pos:end="1369:44"><name pos:start="1367:13" pos:end="1367:19">fprintf</name><argument_list pos:start="1367:20" pos:end="1369:44">(<argument pos:start="1367:21" pos:end="1367:26"><expr pos:start="1367:21" pos:end="1367:26"><name pos:start="1367:21" pos:end="1367:26">stderr</name></expr></argument>, <argument pos:start="1367:29" pos:end="1367:90"><expr pos:start="1367:29" pos:end="1367:90"><literal type="string" pos:start="1367:29" pos:end="1367:90">"%s:%d: Module support not compiled into this version: '%s'\n"</literal></expr></argument>,

                    <argument pos:start="1369:21" pos:end="1369:28"><expr pos:start="1369:21" pos:end="1369:28"><name pos:start="1369:21" pos:end="1369:28">filename</name></expr></argument>, <argument pos:start="1369:31" pos:end="1369:38"><expr pos:start="1369:31" pos:end="1369:38"><name pos:start="1369:31" pos:end="1369:38">line_num</name></expr></argument>, <argument pos:start="1369:41" pos:end="1369:43"><expr pos:start="1369:41" pos:end="1369:43"><name pos:start="1369:41" pos:end="1369:43">arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1371:13" pos:end="1374:0"><expr pos:start="1371:13" pos:end="1371:20"><name pos:start="1371:13" pos:end="1371:18">errors</name><operator pos:start="1371:19" pos:end="1371:20">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1373:1" pos:end="1373:6">#<cpp:directive pos:start="1373:2" pos:end="1373:6">endif</cpp:directive></cpp:endif>

        </block_content>}</block></if> <else pos:start="1375:11" pos:end="1381:9">else <block pos:start="1375:16" pos:end="1381:9">{<block_content pos:start="1377:13" pos:end="1379:45">

            <expr_stmt pos:start="1377:13" pos:end="1379:45"><expr pos:start="1377:13" pos:end="1379:44"><call pos:start="1377:13" pos:end="1379:44"><name pos:start="1377:13" pos:end="1377:19">fprintf</name><argument_list pos:start="1377:20" pos:end="1379:44">(<argument pos:start="1377:21" pos:end="1377:26"><expr pos:start="1377:21" pos:end="1377:26"><name pos:start="1377:21" pos:end="1377:26">stderr</name></expr></argument>, <argument pos:start="1377:29" pos:end="1377:62"><expr pos:start="1377:29" pos:end="1377:62"><literal type="string" pos:start="1377:29" pos:end="1377:62">"%s:%d: Incorrect keyword: '%s'\n"</literal></expr></argument>,

                    <argument pos:start="1379:21" pos:end="1379:28"><expr pos:start="1379:21" pos:end="1379:28"><name pos:start="1379:21" pos:end="1379:28">filename</name></expr></argument>, <argument pos:start="1379:31" pos:end="1379:38"><expr pos:start="1379:31" pos:end="1379:38"><name pos:start="1379:31" pos:end="1379:38">line_num</name></expr></argument>, <argument pos:start="1379:41" pos:end="1379:43"><expr pos:start="1379:41" pos:end="1379:43"><name pos:start="1379:41" pos:end="1379:43">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="1387:5" pos:end="1387:14"><expr pos:start="1387:5" pos:end="1387:13"><call pos:start="1387:5" pos:end="1387:13"><name pos:start="1387:5" pos:end="1387:10">fclose</name><argument_list pos:start="1387:11" pos:end="1387:13">(<argument pos:start="1387:12" pos:end="1387:12"><expr pos:start="1387:12" pos:end="1387:12"><name pos:start="1387:12" pos:end="1387:12">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="1389:5" pos:end="1395:17"><if pos:start="1389:5" pos:end="1391:18">if <condition pos:start="1389:8" pos:end="1389:15">(<expr pos:start="1389:9" pos:end="1389:14"><name pos:start="1389:9" pos:end="1389:14">errors</name></expr>)</condition><block type="pseudo" pos:start="1391:9" pos:end="1391:18"><block_content pos:start="1391:9" pos:end="1391:18">

        <return pos:start="1391:9" pos:end="1391:18">return <expr pos:start="1391:16" pos:end="1391:17"><operator pos:start="1391:16" pos:end="1391:16">-</operator><literal type="number" pos:start="1391:17" pos:end="1391:17">1</literal></expr>;</return></block_content></block></if>

    <else pos:start="1393:5" pos:end="1395:17">else<block type="pseudo" pos:start="1395:9" pos:end="1395:17"><block_content pos:start="1395:9" pos:end="1395:17">

        <return pos:start="1395:9" pos:end="1395:17">return <expr pos:start="1395:16" pos:end="1395:16"><literal type="number" pos:start="1395:16" pos:end="1395:16">0</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>
</unit>
