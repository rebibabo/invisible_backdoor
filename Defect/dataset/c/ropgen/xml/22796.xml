<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22796.c" pos:tabs="8"><function pos:start="1:1" pos:end="245:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">quantize_and_encode_band</name><parameter_list pos:start="1:37" pos:end="5:64">(<parameter pos:start="1:38" pos:end="1:60"><decl pos:start="1:38" pos:end="1:60"><type pos:start="1:38" pos:end="1:60"><name pos:start="1:38" pos:end="1:57"><name pos:start="1:38" pos:end="1:43">struct</name> <name pos:start="1:45" pos:end="1:57">AACEncContext</name></name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:60">s</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:79"><decl pos:start="1:63" pos:end="1:79"><type pos:start="1:63" pos:end="1:79"><name pos:start="1:63" pos:end="1:75">PutBitContext</name> <modifier pos:start="1:77" pos:end="1:77">*</modifier></type><name pos:start="1:78" pos:end="1:79">pb</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:52"><decl pos:start="3:38" pos:end="3:52"><type pos:start="3:38" pos:end="3:52"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:48">float</name> <modifier pos:start="3:50" pos:end="3:50">*</modifier></type><name pos:start="3:51" pos:end="3:52">in</name></decl></parameter>, <parameter pos:start="3:55" pos:end="3:62"><decl pos:start="3:55" pos:end="3:62"><type pos:start="3:55" pos:end="3:62"><name pos:start="3:55" pos:end="3:57">int</name></type> <name pos:start="3:59" pos:end="3:62">size</name></decl></parameter>, <parameter pos:start="3:65" pos:end="3:77"><decl pos:start="3:65" pos:end="3:77"><type pos:start="3:65" pos:end="3:77"><name pos:start="3:65" pos:end="3:67">int</name></type> <name pos:start="3:69" pos:end="3:77">scale_idx</name></decl></parameter>,

                                     <parameter pos:start="5:38" pos:end="5:43"><decl pos:start="5:38" pos:end="5:43"><type pos:start="5:38" pos:end="5:43"><name pos:start="5:38" pos:end="5:40">int</name></type> <name pos:start="5:42" pos:end="5:43">cb</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:63"><decl pos:start="5:46" pos:end="5:63"><type pos:start="5:46" pos:end="5:63"><specifier pos:start="5:46" pos:end="5:50">const</specifier> <name pos:start="5:52" pos:end="5:56">float</name></type> <name pos:start="5:58" pos:end="5:63">lambda</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="245:1">{<block_content pos:start="9:5" pos:end="245:1">

    <decl_stmt pos:start="9:5" pos:end="9:88"><decl pos:start="9:5" pos:end="9:87"><type pos:start="9:5" pos:end="9:15"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:15">float</name></type> <name pos:start="9:17" pos:end="9:18">IQ</name> <init pos:start="9:20" pos:end="9:87">= <expr pos:start="9:22" pos:end="9:87"><name pos:start="9:22" pos:end="9:87"><name pos:start="9:22" pos:end="9:38">ff_aac_pow2sf_tab</name><index pos:start="9:39" pos:end="9:87">[<expr pos:start="9:40" pos:end="9:86"><literal type="number" pos:start="9:40" pos:end="9:44">200</literal> <operator pos:start="9:44" pos:end="9:44">+</operator> <name pos:start="9:46" pos:end="9:54">scale_idx</name> <operator pos:start="9:56" pos:end="9:56">-</operator> <name pos:start="9:58" pos:end="9:70">SCALE_ONE_POS</name> <operator pos:start="9:72" pos:end="9:72">+</operator> <name pos:start="9:74" pos:end="9:86">SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:88"><decl pos:start="11:5" pos:end="11:87"><type pos:start="11:5" pos:end="11:15"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:15">float</name></type>  <name pos:start="11:18" pos:end="11:18">Q</name> <init pos:start="11:20" pos:end="11:87">= <expr pos:start="11:22" pos:end="11:87"><name pos:start="11:22" pos:end="11:87"><name pos:start="11:22" pos:end="11:38">ff_aac_pow2sf_tab</name><index pos:start="11:39" pos:end="11:87">[<expr pos:start="11:40" pos:end="11:86"><literal type="number" pos:start="11:40" pos:end="11:44">200</literal> <operator pos:start="11:44" pos:end="11:44">-</operator> <name pos:start="11:46" pos:end="11:54">scale_idx</name> <operator pos:start="11:56" pos:end="11:56">+</operator> <name pos:start="11:58" pos:end="11:70">SCALE_ONE_POS</name> <operator pos:start="11:72" pos:end="11:72">-</operator> <name pos:start="11:74" pos:end="11:86">SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:15"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:15">float</name></type> <name pos:start="13:17" pos:end="13:30">CLIPPED_ESCAPE</name> <init pos:start="13:32" pos:end="13:45">= <expr pos:start="13:34" pos:end="13:45"><literal type="number" pos:start="13:34" pos:end="13:42">165140.0f</literal><operator pos:start="13:43" pos:end="13:43">*</operator><name pos:start="13:44" pos:end="13:45">IQ</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:49"><decl pos:start="15:5" pos:end="15:48"><type pos:start="15:5" pos:end="15:13"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:13">int</name></type> <name pos:start="15:15" pos:end="15:17">dim</name> <init pos:start="15:19" pos:end="15:48">= <expr pos:start="15:21" pos:end="15:48"><ternary pos:start="15:21" pos:end="15:48"><condition pos:start="15:21" pos:end="15:42"><expr pos:start="15:21" pos:end="15:40"><operator pos:start="15:21" pos:end="15:21">(</operator><name pos:start="15:22" pos:end="15:23">cb</name> <operator pos:start="15:25" pos:end="15:25">&lt;</operator> <name pos:start="15:27" pos:end="15:39">FIRST_PAIR_BT</name><operator pos:start="15:40" pos:end="15:40">)</operator></expr> ?</condition><then pos:start="15:44" pos:end="15:44"> <expr pos:start="15:44" pos:end="15:44"><literal type="number" pos:start="15:44" pos:end="15:44">4</literal></expr> </then><else pos:start="15:46" pos:end="15:48">: <expr pos:start="15:48" pos:end="15:48"><literal type="number" pos:start="15:48" pos:end="15:48">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:9"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:9">i</name></decl>, <decl pos:start="17:12" pos:end="17:12"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:12" pos:end="17:12">j</name></decl>, <decl pos:start="17:15" pos:end="17:15"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:15">k</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="19:1" pos:end="19:30">#<cpp:directive pos:start="19:2" pos:end="19:7">ifndef</cpp:directive> <name pos:start="19:9" pos:end="19:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

    <decl_stmt pos:start="21:5" pos:end="21:43"><decl pos:start="21:5" pos:end="21:42"><type pos:start="21:5" pos:end="21:15"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:15">float</name></type>  <name pos:start="21:18" pos:end="21:20">Q34</name> <init pos:start="21:22" pos:end="21:42">= <expr pos:start="21:24" pos:end="21:42"><call pos:start="21:24" pos:end="21:42"><name pos:start="21:24" pos:end="21:28">sqrtf</name><argument_list pos:start="21:29" pos:end="21:42">(<argument pos:start="21:30" pos:end="21:41"><expr pos:start="21:30" pos:end="21:41"><name pos:start="21:30" pos:end="21:30">Q</name> <operator pos:start="21:32" pos:end="21:32">*</operator> <call pos:start="21:34" pos:end="21:41"><name pos:start="21:34" pos:end="21:38">sqrtf</name><argument_list pos:start="21:39" pos:end="21:41">(<argument pos:start="21:40" pos:end="21:40"><expr pos:start="21:40" pos:end="21:40"><name pos:start="21:40" pos:end="21:40">Q</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:39"><type pos:start="23:5" pos:end="23:13"><specifier pos:start="23:5" pos:end="23:9">const</specifier> <name pos:start="23:11" pos:end="23:13">int</name></type> <name pos:start="23:15" pos:end="23:19">range</name>  <init pos:start="23:22" pos:end="23:39">= <expr pos:start="23:24" pos:end="23:39"><name pos:start="23:24" pos:end="23:39"><name pos:start="23:24" pos:end="23:35">aac_cb_range</name><index pos:start="23:36" pos:end="23:39">[<expr pos:start="23:37" pos:end="23:38"><name pos:start="23:37" pos:end="23:38">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:40"><type pos:start="25:5" pos:end="25:13"><specifier pos:start="25:5" pos:end="25:9">const</specifier> <name pos:start="25:11" pos:end="25:13">int</name></type> <name pos:start="25:15" pos:end="25:20">maxval</name> <init pos:start="25:22" pos:end="25:40">= <expr pos:start="25:24" pos:end="25:40"><name pos:start="25:24" pos:end="25:40"><name pos:start="25:24" pos:end="25:36">aac_cb_maxval</name><index pos:start="25:37" pos:end="25:40">[<expr pos:start="25:38" pos:end="25:39"><name pos:start="25:38" pos:end="25:39">cb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:16"><decl pos:start="27:5" pos:end="27:15"><type pos:start="27:5" pos:end="27:7"><name pos:start="27:5" pos:end="27:7">int</name></type> <name pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">offs</name><index pos:start="27:13" pos:end="27:15">[<expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:29"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">float</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:17">scaled</name> <init pos:start="29:19" pos:end="29:29">= <expr pos:start="29:21" pos:end="29:29"><name pos:start="29:21" pos:end="29:29"><name pos:start="29:21" pos:end="29:21">s</name><operator pos:start="29:22" pos:end="29:23">-&gt;</operator><name pos:start="29:24" pos:end="29:29">scoefs</name></name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="31:8" pos:end="31:35">/* USE_REALLY_FULL_SEARCH */</comment>



<comment type="line" pos:start="35:1" pos:end="35:13">//START_TIMER</comment>

    <if_stmt pos:start="37:5" pos:end="44:0"><if pos:start="37:5" pos:end="44:0">if <condition pos:start="37:8" pos:end="37:12">(<expr pos:start="37:9" pos:end="37:11"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:11">cb</name></expr>)</condition><block type="pseudo" pos:start="39:9" pos:end="44:0"><block_content pos:start="39:9" pos:end="44:0">

        <return pos:start="39:9" pos:end="44:0">return;</return></block_content></block></if></if_stmt>



<cpp:ifndef pos:start="43:1" pos:end="43:30">#<cpp:directive pos:start="43:2" pos:end="43:7">ifndef</cpp:directive> <name pos:start="43:9" pos:end="43:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

    <expr_stmt pos:start="45:5" pos:end="45:16"><expr pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:11"><name pos:start="45:5" pos:end="45:8">offs</name><index pos:start="45:9" pos:end="45:11">[<expr pos:start="45:10" pos:end="45:10"><literal type="number" pos:start="45:10" pos:end="45:10">0</literal></expr>]</index></name> <operator pos:start="45:13" pos:end="45:13">=</operator> <literal type="number" pos:start="45:15" pos:end="45:15">1</literal></expr>;</expr_stmt>

    <for pos:start="47:5" pos:end="49:34">for <control pos:start="47:9" pos:end="47:29">(<init pos:start="47:10" pos:end="47:15"><expr pos:start="47:10" pos:end="47:14"><name pos:start="47:10" pos:end="47:10">i</name> <operator pos:start="47:12" pos:end="47:12">=</operator> <literal type="number" pos:start="47:14" pos:end="47:14">1</literal></expr>;</init> <condition pos:start="47:17" pos:end="47:24"><expr pos:start="47:17" pos:end="47:23"><name pos:start="47:17" pos:end="47:17">i</name> <operator pos:start="47:19" pos:end="47:19">&lt;</operator> <name pos:start="47:21" pos:end="47:23">dim</name></expr>;</condition> <incr pos:start="47:26" pos:end="47:28"><expr pos:start="47:26" pos:end="47:28"><name pos:start="47:26" pos:end="47:26">i</name><operator pos:start="47:27" pos:end="47:28">++</operator></expr></incr>)</control><block type="pseudo" pos:start="49:9" pos:end="49:34"><block_content pos:start="49:9" pos:end="49:34">

        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:15"><name pos:start="49:9" pos:end="49:12">offs</name><index pos:start="49:13" pos:end="49:15">[<expr pos:start="49:14" pos:end="49:14"><name pos:start="49:14" pos:end="49:14">i</name></expr>]</index></name> <operator pos:start="49:17" pos:end="49:17">=</operator> <name pos:start="49:19" pos:end="49:27"><name pos:start="49:19" pos:end="49:22">offs</name><index pos:start="49:23" pos:end="49:27">[<expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:24">i</name><operator pos:start="49:25" pos:end="49:25">-</operator><literal type="number" pos:start="49:26" pos:end="49:26">1</literal></expr>]</index></name><operator pos:start="49:28" pos:end="49:28">*</operator><name pos:start="49:29" pos:end="49:33">range</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><call pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:15">abs_pow34_v</name><argument_list pos:start="51:16" pos:end="51:33">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">scaled</name></expr></argument>, <argument pos:start="51:25" pos:end="51:26"><expr pos:start="51:25" pos:end="51:26"><name pos:start="51:25" pos:end="51:26">in</name></expr></argument>, <argument pos:start="51:29" pos:end="51:32"><expr pos:start="51:29" pos:end="51:32"><name pos:start="51:29" pos:end="51:32">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="56:0"><expr pos:start="53:5" pos:end="53:87"><call pos:start="53:5" pos:end="53:87"><name pos:start="53:5" pos:end="53:18">quantize_bands</name><argument_list pos:start="53:19" pos:end="53:87">(<argument pos:start="53:20" pos:end="53:28"><expr pos:start="53:20" pos:end="53:28"><name pos:start="53:20" pos:end="53:28"><name pos:start="53:20" pos:end="53:20">s</name><operator pos:start="53:21" pos:end="53:22">-&gt;</operator><name pos:start="53:23" pos:end="53:28">qcoefs</name></name></expr></argument>, <argument pos:start="53:31" pos:end="53:32"><expr pos:start="53:31" pos:end="53:32"><name pos:start="53:31" pos:end="53:32">in</name></expr></argument>, <argument pos:start="53:35" pos:end="53:40"><expr pos:start="53:35" pos:end="53:40"><name pos:start="53:35" pos:end="53:40">scaled</name></expr></argument>, <argument pos:start="53:43" pos:end="53:46"><expr pos:start="53:43" pos:end="53:46"><name pos:start="53:43" pos:end="53:46">size</name></expr></argument>, <argument pos:start="53:49" pos:end="53:51"><expr pos:start="53:49" pos:end="53:51"><name pos:start="53:49" pos:end="53:51">Q34</name></expr></argument>, <argument pos:start="53:54" pos:end="53:78"><expr pos:start="53:54" pos:end="53:78"><operator pos:start="53:54" pos:end="53:54">!</operator><call pos:start="53:55" pos:end="53:78"><name pos:start="53:55" pos:end="53:74">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="53:75" pos:end="53:78">(<argument pos:start="53:76" pos:end="53:77"><expr pos:start="53:76" pos:end="53:77"><name pos:start="53:76" pos:end="53:77">cb</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="53:81" pos:end="53:86"><expr pos:start="53:81" pos:end="53:86"><name pos:start="53:81" pos:end="53:86">maxval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="55:8" pos:end="55:35">/* USE_REALLY_FULL_SEARCH */</comment>

    <for pos:start="57:5" pos:end="245:1">for <control pos:start="57:9" pos:end="57:35">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:25"><expr pos:start="57:17" pos:end="57:24"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:24">size</name></expr>;</condition> <incr pos:start="57:27" pos:end="57:34"><expr pos:start="57:27" pos:end="57:34"><name pos:start="57:27" pos:end="57:27">i</name> <operator pos:start="57:29" pos:end="57:30">+=</operator> <name pos:start="57:32" pos:end="57:34">dim</name></expr></incr>)</control> <block pos:start="57:37" pos:end="245:1">{<block_content pos:start="59:9" pos:end="241:5">

        <decl_stmt pos:start="59:9" pos:end="59:22"><decl pos:start="59:9" pos:end="59:21"><type pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:13">float</name></type> <name pos:start="59:15" pos:end="59:21">mincost</name></decl>;</decl_stmt>

        <decl_stmt pos:start="61:9" pos:end="61:24"><decl pos:start="61:9" pos:end="61:23"><type pos:start="61:9" pos:end="61:11"><name pos:start="61:9" pos:end="61:11">int</name></type> <name pos:start="61:13" pos:end="61:18">minidx</name>  <init pos:start="61:21" pos:end="61:23">= <expr pos:start="61:23" pos:end="61:23"><literal type="number" pos:start="61:23" pos:end="61:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="63:9" pos:end="63:24"><decl pos:start="63:9" pos:end="63:23"><type pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:11">int</name></type> <name pos:start="63:13" pos:end="63:19">minbits</name> <init pos:start="63:21" pos:end="63:23">= <expr pos:start="63:23" pos:end="63:23"><literal type="number" pos:start="63:23" pos:end="63:23">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="65:9" pos:end="68:0"><decl pos:start="65:9" pos:end="65:24"><type pos:start="65:9" pos:end="65:21"><specifier pos:start="65:9" pos:end="65:13">const</specifier> <name pos:start="65:15" pos:end="65:19">float</name> <modifier pos:start="65:21" pos:end="65:21">*</modifier></type><name pos:start="65:22" pos:end="65:24">vec</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="67:1" pos:end="67:30">#<cpp:directive pos:start="67:2" pos:end="67:7">ifndef</cpp:directive> <name pos:start="67:9" pos:end="67:30">USE_REALLY_FULL_SEARCH</name></cpp:ifndef>

        <expr_stmt pos:start="69:9" pos:end="69:41"><expr pos:start="69:9" pos:end="69:40"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:11">int</name> <argument_list pos:start="69:13" pos:end="69:21">(<argument pos:start="69:14" pos:end="69:20"><expr pos:start="69:14" pos:end="69:20"><operator pos:start="69:14" pos:end="69:14">*</operator><name pos:start="69:15" pos:end="69:20">quants</name></expr></argument>)</argument_list></call><index pos:start="69:22" pos:end="69:24">[<expr pos:start="69:23" pos:end="69:23"><literal type="number" pos:start="69:23" pos:end="69:23">2</literal></expr>]</index> <operator pos:start="69:26" pos:end="69:26">=</operator> <operator pos:start="69:28" pos:end="69:28">&amp;</operator><name pos:start="69:29" pos:end="69:40"><name pos:start="69:29" pos:end="69:29">s</name><operator pos:start="69:30" pos:end="69:31">-&gt;</operator><name pos:start="69:32" pos:end="69:37">qcoefs</name><index pos:start="69:38" pos:end="69:40">[<expr pos:start="69:39" pos:end="69:39"><name pos:start="69:39" pos:end="69:39">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:15">mincost</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <literal type="number" pos:start="71:19" pos:end="71:22">0.0f</literal></expr>;</expr_stmt>

        <for pos:start="73:9" pos:end="75:46">for <control pos:start="73:13" pos:end="73:33">(<init pos:start="73:14" pos:end="73:19"><expr pos:start="73:14" pos:end="73:18"><name pos:start="73:14" pos:end="73:14">j</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="number" pos:start="73:18" pos:end="73:18">0</literal></expr>;</init> <condition pos:start="73:21" pos:end="73:28"><expr pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:21">j</name> <operator pos:start="73:23" pos:end="73:23">&lt;</operator> <name pos:start="73:25" pos:end="73:27">dim</name></expr>;</condition> <incr pos:start="73:30" pos:end="73:32"><expr pos:start="73:30" pos:end="73:32"><name pos:start="73:30" pos:end="73:30">j</name><operator pos:start="73:31" pos:end="73:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="75:13" pos:end="75:46"><block_content pos:start="75:13" pos:end="75:46">

            <expr_stmt pos:start="75:13" pos:end="75:46"><expr pos:start="75:13" pos:end="75:45"><name pos:start="75:13" pos:end="75:19">mincost</name> <operator pos:start="75:21" pos:end="75:22">+=</operator> <name pos:start="75:24" pos:end="75:30"><name pos:start="75:24" pos:end="75:25">in</name><index pos:start="75:26" pos:end="75:30">[<expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:27">i</name><operator pos:start="75:28" pos:end="75:28">+</operator><name pos:start="75:29" pos:end="75:29">j</name></expr>]</index></name><operator pos:start="75:31" pos:end="75:31">*</operator><name pos:start="75:32" pos:end="75:38"><name pos:start="75:32" pos:end="75:33">in</name><index pos:start="75:34" pos:end="75:38">[<expr pos:start="75:35" pos:end="75:37"><name pos:start="75:35" pos:end="75:35">i</name><operator pos:start="75:36" pos:end="75:36">+</operator><name pos:start="75:37" pos:end="75:37">j</name></expr>]</index></name><operator pos:start="75:39" pos:end="75:39">*</operator><name pos:start="75:40" pos:end="75:45">lambda</name></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt pos:start="77:9" pos:end="77:51"><expr pos:start="77:9" pos:end="77:50"><name pos:start="77:9" pos:end="77:14">minidx</name> <operator pos:start="77:16" pos:end="77:16">=</operator> <ternary pos:start="77:18" pos:end="77:50"><condition pos:start="77:18" pos:end="77:43"><expr pos:start="77:18" pos:end="77:41"><call pos:start="77:18" pos:end="77:41"><name pos:start="77:18" pos:end="77:37">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="77:38" pos:end="77:41">(<argument pos:start="77:39" pos:end="77:40"><expr pos:start="77:39" pos:end="77:40"><name pos:start="77:39" pos:end="77:40">cb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="77:45" pos:end="77:45"> <expr pos:start="77:45" pos:end="77:45"><literal type="number" pos:start="77:45" pos:end="77:45">0</literal></expr> </then><else pos:start="77:47" pos:end="77:50">: <expr pos:start="77:49" pos:end="77:50"><literal type="number" pos:start="77:49" pos:end="77:50">40</literal></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:53"><expr pos:start="79:9" pos:end="79:52"><name pos:start="79:9" pos:end="79:15">minbits</name> <operator pos:start="79:17" pos:end="79:17">=</operator> <name pos:start="79:19" pos:end="79:52"><name pos:start="79:19" pos:end="79:38">ff_aac_spectral_bits</name><index pos:start="79:39" pos:end="79:44">[<expr pos:start="79:40" pos:end="79:43"><name pos:start="79:40" pos:end="79:41">cb</name><operator pos:start="79:42" pos:end="79:42">-</operator><literal type="number" pos:start="79:43" pos:end="79:43">1</literal></expr>]</index><index pos:start="79:45" pos:end="79:52">[<expr pos:start="79:46" pos:end="79:51"><name pos:start="79:46" pos:end="79:51">minidx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:15">mincost</name> <operator pos:start="81:17" pos:end="81:18">+=</operator> <name pos:start="81:20" pos:end="81:26">minbits</name></expr>;</expr_stmt>

        <for pos:start="83:9" pos:end="241:5">for <control pos:start="83:13" pos:end="83:38">(<init pos:start="83:14" pos:end="83:19"><expr pos:start="83:14" pos:end="83:18"><name pos:start="83:14" pos:end="83:14">j</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <literal type="number" pos:start="83:18" pos:end="83:18">0</literal></expr>;</init> <condition pos:start="83:21" pos:end="83:33"><expr pos:start="83:21" pos:end="83:32"><name pos:start="83:21" pos:end="83:21">j</name> <operator pos:start="83:23" pos:end="83:23">&lt;</operator> <operator pos:start="83:25" pos:end="83:25">(</operator><literal type="number" pos:start="83:26" pos:end="83:26">1</literal><operator pos:start="83:27" pos:end="83:28">&lt;&lt;</operator><name pos:start="83:29" pos:end="83:31">dim</name><operator pos:start="83:32" pos:end="83:32">)</operator></expr>;</condition> <incr pos:start="83:35" pos:end="83:37"><expr pos:start="83:35" pos:end="83:37"><name pos:start="83:35" pos:end="83:35">j</name><operator pos:start="83:36" pos:end="83:37">++</operator></expr></incr>)</control> <block pos:start="83:40" pos:end="241:5">{<block_content pos:start="85:13" pos:end="239:9">

            <decl_stmt pos:start="85:13" pos:end="85:28"><decl pos:start="85:13" pos:end="85:27"><type pos:start="85:13" pos:end="85:17"><name pos:start="85:13" pos:end="85:17">float</name></type> <name pos:start="85:19" pos:end="85:20">rd</name> <init pos:start="85:22" pos:end="85:27">= <expr pos:start="85:24" pos:end="85:27"><literal type="number" pos:start="85:24" pos:end="85:27">0.0f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="87:13" pos:end="87:24"><decl pos:start="87:13" pos:end="87:23"><type pos:start="87:13" pos:end="87:15"><name pos:start="87:13" pos:end="87:15">int</name></type> <name pos:start="87:17" pos:end="87:23">curbits</name></decl>;</decl_stmt>

            <decl_stmt pos:start="89:13" pos:end="89:59"><decl pos:start="89:13" pos:end="89:58"><type pos:start="89:13" pos:end="89:15"><name pos:start="89:13" pos:end="89:15">int</name></type> <name pos:start="89:17" pos:end="89:22">curidx</name> <init pos:start="89:24" pos:end="89:58">= <expr pos:start="89:26" pos:end="89:58"><ternary pos:start="89:26" pos:end="89:58"><condition pos:start="89:26" pos:end="89:51"><expr pos:start="89:26" pos:end="89:49"><call pos:start="89:26" pos:end="89:49"><name pos:start="89:26" pos:end="89:45">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="89:46" pos:end="89:49">(<argument pos:start="89:47" pos:end="89:48"><expr pos:start="89:47" pos:end="89:48"><name pos:start="89:47" pos:end="89:48">cb</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="89:53" pos:end="89:53"> <expr pos:start="89:53" pos:end="89:53"><literal type="number" pos:start="89:53" pos:end="89:53">0</literal></expr> </then><else pos:start="89:55" pos:end="89:58">: <expr pos:start="89:57" pos:end="89:58"><literal type="number" pos:start="89:57" pos:end="89:58">40</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="91:13" pos:end="91:27"><decl pos:start="91:13" pos:end="91:26"><type pos:start="91:13" pos:end="91:15"><name pos:start="91:13" pos:end="91:15">int</name></type> <name pos:start="91:17" pos:end="91:20">same</name>   <init pos:start="91:24" pos:end="91:26">= <expr pos:start="91:26" pos:end="91:26"><literal type="number" pos:start="91:26" pos:end="91:26">0</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="93:13" pos:end="103:13">for <control pos:start="93:17" pos:end="93:37">(<init pos:start="93:18" pos:end="93:23"><expr pos:start="93:18" pos:end="93:22"><name pos:start="93:18" pos:end="93:18">k</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">0</literal></expr>;</init> <condition pos:start="93:25" pos:end="93:32"><expr pos:start="93:25" pos:end="93:31"><name pos:start="93:25" pos:end="93:25">k</name> <operator pos:start="93:27" pos:end="93:27">&lt;</operator> <name pos:start="93:29" pos:end="93:31">dim</name></expr>;</condition> <incr pos:start="93:34" pos:end="93:36"><expr pos:start="93:34" pos:end="93:36"><name pos:start="93:34" pos:end="93:34">k</name><operator pos:start="93:35" pos:end="93:36">++</operator></expr></incr>)</control> <block pos:start="93:39" pos:end="103:13">{<block_content pos:start="95:17" pos:end="101:17">

                <if_stmt pos:start="95:17" pos:end="101:17"><if pos:start="95:17" pos:end="101:17">if <condition pos:start="95:20" pos:end="95:67">(<expr pos:start="95:21" pos:end="95:66"><operator pos:start="95:21" pos:end="95:21">(</operator><name pos:start="95:22" pos:end="95:22">j</name> <operator pos:start="95:24" pos:end="95:24">&amp;</operator> <operator pos:start="95:26" pos:end="95:26">(</operator><literal type="number" pos:start="95:27" pos:end="95:27">1</literal> <operator pos:start="95:29" pos:end="95:30">&lt;&lt;</operator> <name pos:start="95:32" pos:end="95:32">k</name><operator pos:start="95:33" pos:end="95:33">)</operator><operator pos:start="95:34" pos:end="95:34">)</operator> <operator pos:start="95:36" pos:end="95:37">&amp;&amp;</operator> <name pos:start="95:39" pos:end="95:50"><name pos:start="95:39" pos:end="95:44">quants</name><index pos:start="95:45" pos:end="95:47">[<expr pos:start="95:46" pos:end="95:46"><name pos:start="95:46" pos:end="95:46">k</name></expr>]</index><index pos:start="95:48" pos:end="95:50">[<expr pos:start="95:49" pos:end="95:49"><literal type="number" pos:start="95:49" pos:end="95:49">0</literal></expr>]</index></name> <operator pos:start="95:52" pos:end="95:53">==</operator> <name pos:start="95:55" pos:end="95:66"><name pos:start="95:55" pos:end="95:60">quants</name><index pos:start="95:61" pos:end="95:63">[<expr pos:start="95:62" pos:end="95:62"><name pos:start="95:62" pos:end="95:62">k</name></expr>]</index><index pos:start="95:64" pos:end="95:66">[<expr pos:start="95:65" pos:end="95:65"><literal type="number" pos:start="95:65" pos:end="95:65">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="95:69" pos:end="101:17">{<block_content pos:start="97:21" pos:end="99:26">

                    <expr_stmt pos:start="97:21" pos:end="97:29"><expr pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:24">same</name> <operator pos:start="97:26" pos:end="97:26">=</operator> <literal type="number" pos:start="97:28" pos:end="97:28">1</literal></expr>;</expr_stmt>

                    <break pos:start="99:21" pos:end="99:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <if_stmt pos:start="105:13" pos:end="107:25"><if pos:start="105:13" pos:end="107:25">if <condition pos:start="105:16" pos:end="105:21">(<expr pos:start="105:17" pos:end="105:20"><name pos:start="105:17" pos:end="105:20">same</name></expr>)</condition><block type="pseudo" pos:start="107:17" pos:end="107:25"><block_content pos:start="107:17" pos:end="107:25">

                <continue pos:start="107:17" pos:end="107:25">continue;</continue></block_content></block></if></if_stmt>

            <for pos:start="109:13" pos:end="111:74">for <control pos:start="109:17" pos:end="109:37">(<init pos:start="109:18" pos:end="109:23"><expr pos:start="109:18" pos:end="109:22"><name pos:start="109:18" pos:end="109:18">k</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</init> <condition pos:start="109:25" pos:end="109:32"><expr pos:start="109:25" pos:end="109:31"><name pos:start="109:25" pos:end="109:25">k</name> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <name pos:start="109:29" pos:end="109:31">dim</name></expr>;</condition> <incr pos:start="109:34" pos:end="109:36"><expr pos:start="109:34" pos:end="109:36"><name pos:start="109:34" pos:end="109:34">k</name><operator pos:start="109:35" pos:end="109:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="111:17" pos:end="111:74"><block_content pos:start="111:17" pos:end="111:74">

                <expr_stmt pos:start="111:17" pos:end="111:74"><expr pos:start="111:17" pos:end="111:73"><name pos:start="111:17" pos:end="111:22">curidx</name> <operator pos:start="111:24" pos:end="111:25">+=</operator> <name pos:start="111:27" pos:end="111:53"><name pos:start="111:27" pos:end="111:32">quants</name><index pos:start="111:33" pos:end="111:35">[<expr pos:start="111:34" pos:end="111:34"><name pos:start="111:34" pos:end="111:34">k</name></expr>]</index><index pos:start="111:36" pos:end="111:53">[<expr pos:start="111:37" pos:end="111:52"><operator pos:start="111:37" pos:end="111:37">!</operator><operator pos:start="111:38" pos:end="111:38">!</operator><operator pos:start="111:39" pos:end="111:39">(</operator><name pos:start="111:40" pos:end="111:40">j</name> <operator pos:start="111:42" pos:end="111:42">&amp;</operator> <operator pos:start="111:44" pos:end="111:44">(</operator><literal type="number" pos:start="111:45" pos:end="111:45">1</literal> <operator pos:start="111:47" pos:end="111:48">&lt;&lt;</operator> <name pos:start="111:50" pos:end="111:50">k</name><operator pos:start="111:51" pos:end="111:51">)</operator><operator pos:start="111:52" pos:end="111:52">)</operator></expr>]</index></name> <operator pos:start="111:55" pos:end="111:55">*</operator> <name pos:start="111:57" pos:end="111:73"><name pos:start="111:57" pos:end="111:60">offs</name><index pos:start="111:61" pos:end="111:73">[<expr pos:start="111:62" pos:end="111:72"><name pos:start="111:62" pos:end="111:64">dim</name> <operator pos:start="111:66" pos:end="111:66">-</operator> <literal type="number" pos:start="111:68" pos:end="111:70">1</literal> <operator pos:start="111:70" pos:end="111:70">-</operator> <name pos:start="111:72" pos:end="111:72">k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt pos:start="113:13" pos:end="113:58"><expr pos:start="113:13" pos:end="113:57"><name pos:start="113:13" pos:end="113:19">curbits</name> <operator pos:start="113:21" pos:end="113:21">=</operator>  <name pos:start="113:24" pos:end="113:57"><name pos:start="113:24" pos:end="113:43">ff_aac_spectral_bits</name><index pos:start="113:44" pos:end="113:49">[<expr pos:start="113:45" pos:end="113:48"><name pos:start="113:45" pos:end="113:46">cb</name><operator pos:start="113:47" pos:end="113:47">-</operator><literal type="number" pos:start="113:48" pos:end="113:48">1</literal></expr>]</index><index pos:start="113:50" pos:end="113:57">[<expr pos:start="113:51" pos:end="113:56"><name pos:start="113:51" pos:end="113:56">curidx</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="115:13" pos:end="118:0"><expr pos:start="115:13" pos:end="115:64"><name pos:start="115:13" pos:end="115:15">vec</name>     <operator pos:start="115:21" pos:end="115:21">=</operator> <operator pos:start="115:23" pos:end="115:23">&amp;</operator><name pos:start="115:24" pos:end="115:64"><name pos:start="115:24" pos:end="115:46">ff_aac_codebook_vectors</name><index pos:start="115:47" pos:end="115:52">[<expr pos:start="115:48" pos:end="115:51"><name pos:start="115:48" pos:end="115:49">cb</name><operator pos:start="115:50" pos:end="115:50">-</operator><literal type="number" pos:start="115:51" pos:end="115:51">1</literal></expr>]</index><index pos:start="115:53" pos:end="115:64">[<expr pos:start="115:54" pos:end="115:63"><name pos:start="115:54" pos:end="115:59">curidx</name><operator pos:start="115:60" pos:end="115:60">*</operator><name pos:start="115:61" pos:end="115:63">dim</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:else pos:start="117:1" pos:end="117:5">#<cpp:directive pos:start="117:2" pos:end="117:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="119:9" pos:end="119:44"><expr pos:start="119:9" pos:end="119:43"><name pos:start="119:9" pos:end="119:11">vec</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <name pos:start="119:15" pos:end="119:43"><name pos:start="119:15" pos:end="119:37">ff_aac_codebook_vectors</name><index pos:start="119:38" pos:end="119:43">[<expr pos:start="119:39" pos:end="119:42"><name pos:start="119:39" pos:end="119:40">cb</name><operator pos:start="119:41" pos:end="119:41">-</operator><literal type="number" pos:start="119:42" pos:end="119:42">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:27"><expr pos:start="121:9" pos:end="121:26"><name pos:start="121:9" pos:end="121:15">mincost</name> <operator pos:start="121:17" pos:end="121:17">=</operator> <name pos:start="121:19" pos:end="121:26">INFINITY</name></expr>;</expr_stmt>

        <for pos:start="123:9" pos:end="207:9">for <control pos:start="123:13" pos:end="123:69">(<init pos:start="123:14" pos:end="123:19"><expr pos:start="123:14" pos:end="123:18"><name pos:start="123:14" pos:end="123:14">j</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <literal type="number" pos:start="123:18" pos:end="123:18">0</literal></expr>;</init> <condition pos:start="123:21" pos:end="123:52"><expr pos:start="123:21" pos:end="123:51"><name pos:start="123:21" pos:end="123:21">j</name> <operator pos:start="123:23" pos:end="123:23">&lt;</operator> <name pos:start="123:25" pos:end="123:51"><name pos:start="123:25" pos:end="123:45">ff_aac_spectral_sizes</name><index pos:start="123:46" pos:end="123:51">[<expr pos:start="123:47" pos:end="123:50"><name pos:start="123:47" pos:end="123:48">cb</name><operator pos:start="123:49" pos:end="123:49">-</operator><literal type="number" pos:start="123:50" pos:end="123:50">1</literal></expr>]</index></name></expr>;</condition> <incr pos:start="123:54" pos:end="123:68"><expr pos:start="123:54" pos:end="123:56"><name pos:start="123:54" pos:end="123:54">j</name><operator pos:start="123:55" pos:end="123:56">++</operator></expr><operator pos:start="123:57" pos:end="123:57">,</operator> <expr pos:start="123:59" pos:end="123:68"><name pos:start="123:59" pos:end="123:61">vec</name> <operator pos:start="123:63" pos:end="123:64">+=</operator> <name pos:start="123:66" pos:end="123:68">dim</name></expr></incr>)</control> <block pos:start="123:71" pos:end="207:9">{<block_content pos:start="125:13" pos:end="205:13">

            <decl_stmt pos:start="125:13" pos:end="125:28"><decl pos:start="125:13" pos:end="125:27"><type pos:start="125:13" pos:end="125:17"><name pos:start="125:13" pos:end="125:17">float</name></type> <name pos:start="125:19" pos:end="125:20">rd</name> <init pos:start="125:22" pos:end="125:27">= <expr pos:start="125:24" pos:end="125:27"><literal type="number" pos:start="125:24" pos:end="125:27">0.0f</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="127:13" pos:end="127:56"><decl pos:start="127:13" pos:end="127:55"><type pos:start="127:13" pos:end="127:15"><name pos:start="127:13" pos:end="127:15">int</name></type> <name pos:start="127:17" pos:end="127:23">curbits</name> <init pos:start="127:25" pos:end="127:55">= <expr pos:start="127:27" pos:end="127:55"><name pos:start="127:27" pos:end="127:55"><name pos:start="127:27" pos:end="127:46">ff_aac_spectral_bits</name><index pos:start="127:47" pos:end="127:52">[<expr pos:start="127:48" pos:end="127:51"><name pos:start="127:48" pos:end="127:49">cb</name><operator pos:start="127:50" pos:end="127:50">-</operator><literal type="number" pos:start="127:51" pos:end="127:51">1</literal></expr>]</index><index pos:start="127:53" pos:end="127:55">[<expr pos:start="127:54" pos:end="127:54"><name pos:start="127:54" pos:end="127:54">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="129:13" pos:end="132:0"><decl pos:start="129:13" pos:end="129:27"><type pos:start="129:13" pos:end="129:15"><name pos:start="129:13" pos:end="129:15">int</name></type> <name pos:start="129:17" pos:end="129:22">curidx</name>  <init pos:start="129:25" pos:end="129:27">= <expr pos:start="129:27" pos:end="129:27"><name pos:start="129:27" pos:end="129:27">j</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="131:1" pos:end="131:6">#<cpp:directive pos:start="131:2" pos:end="131:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="131:8" pos:end="131:35">/* USE_REALLY_FULL_SEARCH */</comment>

            <if_stmt pos:start="133:13" pos:end="193:13"><if pos:start="133:13" pos:end="183:13">if <condition pos:start="133:16" pos:end="133:41">(<expr pos:start="133:17" pos:end="133:40"><call pos:start="133:17" pos:end="133:40"><name pos:start="133:17" pos:end="133:36">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="133:37" pos:end="133:40">(<argument pos:start="133:38" pos:end="133:39"><expr pos:start="133:38" pos:end="133:39"><name pos:start="133:38" pos:end="133:39">cb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="133:43" pos:end="183:13">{<block_content pos:start="135:17" pos:end="181:17">

                <for pos:start="135:17" pos:end="181:17">for <control pos:start="135:21" pos:end="135:41">(<init pos:start="135:22" pos:end="135:27"><expr pos:start="135:22" pos:end="135:26"><name pos:start="135:22" pos:end="135:22">k</name> <operator pos:start="135:24" pos:end="135:24">=</operator> <literal type="number" pos:start="135:26" pos:end="135:26">0</literal></expr>;</init> <condition pos:start="135:29" pos:end="135:36"><expr pos:start="135:29" pos:end="135:35"><name pos:start="135:29" pos:end="135:29">k</name> <operator pos:start="135:31" pos:end="135:31">&lt;</operator> <name pos:start="135:33" pos:end="135:35">dim</name></expr>;</condition> <incr pos:start="135:38" pos:end="135:40"><expr pos:start="135:38" pos:end="135:40"><name pos:start="135:38" pos:end="135:38">k</name><operator pos:start="135:39" pos:end="135:40">++</operator></expr></incr>)</control> <block pos:start="135:43" pos:end="181:17">{<block_content pos:start="137:21" pos:end="179:39">

                    <decl_stmt pos:start="137:21" pos:end="137:45"><decl pos:start="137:21" pos:end="137:44"><type pos:start="137:21" pos:end="137:25"><name pos:start="137:21" pos:end="137:25">float</name></type> <name pos:start="137:27" pos:end="137:27">t</name> <init pos:start="137:29" pos:end="137:44">= <expr pos:start="137:31" pos:end="137:44"><call pos:start="137:31" pos:end="137:44"><name pos:start="137:31" pos:end="137:35">fabsf</name><argument_list pos:start="137:36" pos:end="137:44">(<argument pos:start="137:37" pos:end="137:43"><expr pos:start="137:37" pos:end="137:43"><name pos:start="137:37" pos:end="137:43"><name pos:start="137:37" pos:end="137:38">in</name><index pos:start="137:39" pos:end="137:43">[<expr pos:start="137:40" pos:end="137:42"><name pos:start="137:40" pos:end="137:40">i</name><operator pos:start="137:41" pos:end="137:41">+</operator><name pos:start="137:42" pos:end="137:42">k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="139:21" pos:end="139:29"><decl pos:start="139:21" pos:end="139:28"><type pos:start="139:21" pos:end="139:25"><name pos:start="139:21" pos:end="139:25">float</name></type> <name pos:start="139:27" pos:end="139:28">di</name></decl>;</decl_stmt>

                    <comment type="line" pos:start="141:21" pos:end="141:67">//do not code with escape sequence small values</comment>

                    <if_stmt pos:start="143:21" pos:end="149:21"><if pos:start="143:21" pos:end="149:21">if <condition pos:start="143:24" pos:end="143:56">(<expr pos:start="143:25" pos:end="143:55"><name pos:start="143:25" pos:end="143:30"><name pos:start="143:25" pos:end="143:27">vec</name><index pos:start="143:28" pos:end="143:30">[<expr pos:start="143:29" pos:end="143:29"><name pos:start="143:29" pos:end="143:29">k</name></expr>]</index></name> <operator pos:start="143:32" pos:end="143:33">==</operator> <literal type="number" pos:start="143:35" pos:end="143:39">64.0f</literal> <operator pos:start="143:41" pos:end="143:42">&amp;&amp;</operator> <name pos:start="143:44" pos:end="143:44">t</name> <operator pos:start="143:46" pos:end="143:46">&lt;</operator> <literal type="number" pos:start="143:48" pos:end="143:52">39.0f</literal><operator pos:start="143:53" pos:end="143:53">*</operator><name pos:start="143:54" pos:end="143:55">IQ</name></expr>)</condition> <block pos:start="143:58" pos:end="149:21">{<block_content pos:start="145:25" pos:end="147:30">

                        <expr_stmt pos:start="145:25" pos:end="145:38"><expr pos:start="145:25" pos:end="145:37"><name pos:start="145:25" pos:end="145:26">rd</name> <operator pos:start="145:28" pos:end="145:28">=</operator> <name pos:start="145:30" pos:end="145:37">INFINITY</name></expr>;</expr_stmt>

                        <break pos:start="147:25" pos:end="147:30">break;</break>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="151:21" pos:end="173:21"><if pos:start="151:21" pos:end="169:21">if <condition pos:start="151:24" pos:end="151:40">(<expr pos:start="151:25" pos:end="151:39"><name pos:start="151:25" pos:end="151:30"><name pos:start="151:25" pos:end="151:27">vec</name><index pos:start="151:28" pos:end="151:30">[<expr pos:start="151:29" pos:end="151:29"><name pos:start="151:29" pos:end="151:29">k</name></expr>]</index></name> <operator pos:start="151:32" pos:end="151:33">==</operator> <literal type="number" pos:start="151:35" pos:end="151:39">64.0f</literal></expr>)</condition> <block pos:start="151:42" pos:end="169:21">{<block_content pos:start="153:25" pos:end="167:25"> <comment type="line" pos:start="151:44" pos:end="151:56">//FIXME: slow</comment>

                        <if_stmt pos:start="153:25" pos:end="167:25"><if pos:start="153:25" pos:end="159:25">if <condition pos:start="153:28" pos:end="153:48">(<expr pos:start="153:29" pos:end="153:47"><name pos:start="153:29" pos:end="153:29">t</name> <operator pos:start="153:31" pos:end="153:32">&gt;=</operator> <name pos:start="153:34" pos:end="153:47">CLIPPED_ESCAPE</name></expr>)</condition> <block pos:start="153:50" pos:end="159:25">{<block_content pos:start="155:29" pos:end="157:42">

                            <expr_stmt pos:start="155:29" pos:end="155:52"><expr pos:start="155:29" pos:end="155:51"><name pos:start="155:29" pos:end="155:30">di</name> <operator pos:start="155:32" pos:end="155:32">=</operator> <name pos:start="155:34" pos:end="155:34">t</name> <operator pos:start="155:36" pos:end="155:36">-</operator> <name pos:start="155:38" pos:end="155:51">CLIPPED_ESCAPE</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="157:29" pos:end="157:42"><expr pos:start="157:29" pos:end="157:41"><name pos:start="157:29" pos:end="157:35">curbits</name> <operator pos:start="157:37" pos:end="157:38">+=</operator> <literal type="number" pos:start="157:40" pos:end="157:41">21</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="159:27" pos:end="167:25">else <block pos:start="159:32" pos:end="167:25">{<block_content pos:start="161:29" pos:end="165:60">

                            <decl_stmt pos:start="161:29" pos:end="161:66"><decl pos:start="161:29" pos:end="161:65"><type pos:start="161:29" pos:end="161:31"><name pos:start="161:29" pos:end="161:31">int</name></type> <name pos:start="161:33" pos:end="161:33">c</name> <init pos:start="161:35" pos:end="161:65">= <expr pos:start="161:37" pos:end="161:65"><call pos:start="161:37" pos:end="161:65"><name pos:start="161:37" pos:end="161:43">av_clip</name><argument_list pos:start="161:44" pos:end="161:65">(<argument pos:start="161:45" pos:end="161:55"><expr pos:start="161:45" pos:end="161:55"><call pos:start="161:45" pos:end="161:55"><name pos:start="161:45" pos:end="161:49">quant</name><argument_list pos:start="161:50" pos:end="161:55">(<argument pos:start="161:51" pos:end="161:51"><expr pos:start="161:51" pos:end="161:51"><name pos:start="161:51" pos:end="161:51">t</name></expr></argument>, <argument pos:start="161:54" pos:end="161:54"><expr pos:start="161:54" pos:end="161:54"><name pos:start="161:54" pos:end="161:54">Q</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:58" pos:end="161:58"><expr pos:start="161:58" pos:end="161:58"><literal type="number" pos:start="161:58" pos:end="161:58">0</literal></expr></argument>, <argument pos:start="161:61" pos:end="161:64"><expr pos:start="161:61" pos:end="161:64"><literal type="number" pos:start="161:61" pos:end="161:64">8191</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <expr_stmt pos:start="163:29" pos:end="163:50"><expr pos:start="163:29" pos:end="163:49"><name pos:start="163:29" pos:end="163:30">di</name> <operator pos:start="163:32" pos:end="163:32">=</operator> <name pos:start="163:34" pos:end="163:34">t</name> <operator pos:start="163:36" pos:end="163:36">-</operator> <name pos:start="163:38" pos:end="163:38">c</name><operator pos:start="163:39" pos:end="163:39">*</operator><call pos:start="163:40" pos:end="163:46"><name pos:start="163:40" pos:end="163:43">cbrt</name><argument_list pos:start="163:44" pos:end="163:46">(<argument pos:start="163:45" pos:end="163:45"><expr pos:start="163:45" pos:end="163:45"><name pos:start="163:45" pos:end="163:45">c</name></expr></argument>)</argument_list></call><operator pos:start="163:47" pos:end="163:47">*</operator><name pos:start="163:48" pos:end="163:49">IQ</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="165:29" pos:end="165:60"><expr pos:start="165:29" pos:end="165:59"><name pos:start="165:29" pos:end="165:35">curbits</name> <operator pos:start="165:37" pos:end="165:38">+=</operator> <call pos:start="165:40" pos:end="165:49"><name pos:start="165:40" pos:end="165:46">av_log2</name><argument_list pos:start="165:47" pos:end="165:49">(<argument pos:start="165:48" pos:end="165:48"><expr pos:start="165:48" pos:end="165:48"><name pos:start="165:48" pos:end="165:48">c</name></expr></argument>)</argument_list></call><operator pos:start="165:50" pos:end="165:50">*</operator><literal type="number" pos:start="165:51" pos:end="165:53">2</literal> <operator pos:start="165:53" pos:end="165:53">-</operator> <literal type="number" pos:start="165:55" pos:end="165:57">4</literal> <operator pos:start="165:57" pos:end="165:57">+</operator> <literal type="number" pos:start="165:59" pos:end="165:59">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="169:23" pos:end="173:21">else <block pos:start="169:28" pos:end="173:21">{<block_content pos:start="171:25" pos:end="171:43">

                        <expr_stmt pos:start="171:25" pos:end="171:43"><expr pos:start="171:25" pos:end="171:42"><name pos:start="171:25" pos:end="171:26">di</name> <operator pos:start="171:28" pos:end="171:28">=</operator> <name pos:start="171:30" pos:end="171:30">t</name> <operator pos:start="171:32" pos:end="171:32">-</operator> <name pos:start="171:34" pos:end="171:39"><name pos:start="171:34" pos:end="171:36">vec</name><index pos:start="171:37" pos:end="171:39">[<expr pos:start="171:38" pos:end="171:38"><name pos:start="171:38" pos:end="171:38">k</name></expr>]</index></name><operator pos:start="171:40" pos:end="171:40">*</operator><name pos:start="171:41" pos:end="171:42">IQ</name></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                    <if_stmt pos:start="175:21" pos:end="177:34"><if pos:start="175:21" pos:end="177:34">if <condition pos:start="175:24" pos:end="175:39">(<expr pos:start="175:25" pos:end="175:38"><name pos:start="175:25" pos:end="175:30"><name pos:start="175:25" pos:end="175:27">vec</name><index pos:start="175:28" pos:end="175:30">[<expr pos:start="175:29" pos:end="175:29"><name pos:start="175:29" pos:end="175:29">k</name></expr>]</index></name> <operator pos:start="175:32" pos:end="175:33">!=</operator> <literal type="number" pos:start="175:35" pos:end="175:38">0.0f</literal></expr>)</condition><block type="pseudo" pos:start="177:25" pos:end="177:34"><block_content pos:start="177:25" pos:end="177:34">

                        <expr_stmt pos:start="177:25" pos:end="177:34"><expr pos:start="177:25" pos:end="177:33"><name pos:start="177:25" pos:end="177:31">curbits</name><operator pos:start="177:32" pos:end="177:33">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="179:21" pos:end="179:39"><expr pos:start="179:21" pos:end="179:38"><name pos:start="179:21" pos:end="179:22">rd</name> <operator pos:start="179:24" pos:end="179:25">+=</operator> <name pos:start="179:27" pos:end="179:28">di</name><operator pos:start="179:29" pos:end="179:29">*</operator><name pos:start="179:30" pos:end="179:31">di</name><operator pos:start="179:32" pos:end="179:32">*</operator><name pos:start="179:33" pos:end="179:38">lambda</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></if> <else pos:start="183:15" pos:end="193:13">else <block pos:start="183:20" pos:end="193:13">{<block_content pos:start="185:17" pos:end="191:17">

                <for pos:start="185:17" pos:end="191:17">for <control pos:start="185:21" pos:end="185:41">(<init pos:start="185:22" pos:end="185:27"><expr pos:start="185:22" pos:end="185:26"><name pos:start="185:22" pos:end="185:22">k</name> <operator pos:start="185:24" pos:end="185:24">=</operator> <literal type="number" pos:start="185:26" pos:end="185:26">0</literal></expr>;</init> <condition pos:start="185:29" pos:end="185:36"><expr pos:start="185:29" pos:end="185:35"><name pos:start="185:29" pos:end="185:29">k</name> <operator pos:start="185:31" pos:end="185:31">&lt;</operator> <name pos:start="185:33" pos:end="185:35">dim</name></expr>;</condition> <incr pos:start="185:38" pos:end="185:40"><expr pos:start="185:38" pos:end="185:40"><name pos:start="185:38" pos:end="185:38">k</name><operator pos:start="185:39" pos:end="185:40">++</operator></expr></incr>)</control> <block pos:start="185:43" pos:end="191:17">{<block_content pos:start="187:21" pos:end="189:39">

                    <decl_stmt pos:start="187:21" pos:end="187:51"><decl pos:start="187:21" pos:end="187:50"><type pos:start="187:21" pos:end="187:25"><name pos:start="187:21" pos:end="187:25">float</name></type> <name pos:start="187:27" pos:end="187:28">di</name> <init pos:start="187:30" pos:end="187:50">= <expr pos:start="187:32" pos:end="187:50"><name pos:start="187:32" pos:end="187:38"><name pos:start="187:32" pos:end="187:33">in</name><index pos:start="187:34" pos:end="187:38">[<expr pos:start="187:35" pos:end="187:37"><name pos:start="187:35" pos:end="187:35">i</name><operator pos:start="187:36" pos:end="187:36">+</operator><name pos:start="187:37" pos:end="187:37">k</name></expr>]</index></name> <operator pos:start="187:40" pos:end="187:40">-</operator> <name pos:start="187:42" pos:end="187:47"><name pos:start="187:42" pos:end="187:44">vec</name><index pos:start="187:45" pos:end="187:47">[<expr pos:start="187:46" pos:end="187:46"><name pos:start="187:46" pos:end="187:46">k</name></expr>]</index></name><operator pos:start="187:48" pos:end="187:48">*</operator><name pos:start="187:49" pos:end="187:50">IQ</name></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="189:21" pos:end="189:39"><expr pos:start="189:21" pos:end="189:38"><name pos:start="189:21" pos:end="189:22">rd</name> <operator pos:start="189:24" pos:end="189:25">+=</operator> <name pos:start="189:27" pos:end="189:28">di</name><operator pos:start="189:29" pos:end="189:29">*</operator><name pos:start="189:30" pos:end="189:31">di</name><operator pos:start="189:32" pos:end="189:32">*</operator><name pos:start="189:33" pos:end="189:38">lambda</name></expr>;</expr_stmt>

                </block_content>}</block></for>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:26"><expr pos:start="195:13" pos:end="195:25"><name pos:start="195:13" pos:end="195:14">rd</name> <operator pos:start="195:16" pos:end="195:17">+=</operator> <name pos:start="195:19" pos:end="195:25">curbits</name></expr>;</expr_stmt>

            <if_stmt pos:start="197:13" pos:end="205:13"><if pos:start="197:13" pos:end="205:13">if <condition pos:start="197:16" pos:end="197:29">(<expr pos:start="197:17" pos:end="197:28"><name pos:start="197:17" pos:end="197:18">rd</name> <operator pos:start="197:20" pos:end="197:20">&lt;</operator> <name pos:start="197:22" pos:end="197:28">mincost</name></expr>)</condition> <block pos:start="197:31" pos:end="205:13">{<block_content pos:start="199:17" pos:end="203:34">

                <expr_stmt pos:start="199:17" pos:end="199:29"><expr pos:start="199:17" pos:end="199:28"><name pos:start="199:17" pos:end="199:23">mincost</name> <operator pos:start="199:25" pos:end="199:25">=</operator> <name pos:start="199:27" pos:end="199:28">rd</name></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:33"><expr pos:start="201:17" pos:end="201:32"><name pos:start="201:17" pos:end="201:22">minidx</name>  <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:32">curidx</name></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:34"><expr pos:start="203:17" pos:end="203:33"><name pos:start="203:17" pos:end="203:23">minbits</name> <operator pos:start="203:25" pos:end="203:25">=</operator> <name pos:start="203:27" pos:end="203:33">curbits</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="209:9" pos:end="209:94"><expr pos:start="209:9" pos:end="209:93"><call pos:start="209:9" pos:end="209:93"><name pos:start="209:9" pos:end="209:16">put_bits</name><argument_list pos:start="209:17" pos:end="209:93">(<argument pos:start="209:18" pos:end="209:19"><expr pos:start="209:18" pos:end="209:19"><name pos:start="209:18" pos:end="209:19">pb</name></expr></argument>, <argument pos:start="209:22" pos:end="209:55"><expr pos:start="209:22" pos:end="209:55"><name pos:start="209:22" pos:end="209:55"><name pos:start="209:22" pos:end="209:41">ff_aac_spectral_bits</name><index pos:start="209:42" pos:end="209:47">[<expr pos:start="209:43" pos:end="209:46"><name pos:start="209:43" pos:end="209:44">cb</name><operator pos:start="209:45" pos:end="209:45">-</operator><literal type="number" pos:start="209:46" pos:end="209:46">1</literal></expr>]</index><index pos:start="209:48" pos:end="209:55">[<expr pos:start="209:49" pos:end="209:54"><name pos:start="209:49" pos:end="209:54">minidx</name></expr>]</index></name></expr></argument>, <argument pos:start="209:58" pos:end="209:92"><expr pos:start="209:58" pos:end="209:92"><name pos:start="209:58" pos:end="209:92"><name pos:start="209:58" pos:end="209:78">ff_aac_spectral_codes</name><index pos:start="209:79" pos:end="209:84">[<expr pos:start="209:80" pos:end="209:83"><name pos:start="209:80" pos:end="209:81">cb</name><operator pos:start="209:82" pos:end="209:82">-</operator><literal type="number" pos:start="209:83" pos:end="209:83">1</literal></expr>]</index><index pos:start="209:85" pos:end="209:92">[<expr pos:start="209:86" pos:end="209:91"><name pos:start="209:86" pos:end="209:91">minidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="211:9" pos:end="217:52"><if pos:start="211:9" pos:end="217:52">if <condition pos:start="211:12" pos:end="211:37">(<expr pos:start="211:13" pos:end="211:36"><call pos:start="211:13" pos:end="211:36"><name pos:start="211:13" pos:end="211:32">IS_CODEBOOK_UNSIGNED</name><argument_list pos:start="211:33" pos:end="211:36">(<argument pos:start="211:34" pos:end="211:35"><expr pos:start="211:34" pos:end="211:35"><name pos:start="211:34" pos:end="211:35">cb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="213:13" pos:end="217:52"><block_content pos:start="213:13" pos:end="217:52">

            <for pos:start="213:13" pos:end="217:52">for <control pos:start="213:17" pos:end="213:37">(<init pos:start="213:18" pos:end="213:23"><expr pos:start="213:18" pos:end="213:22"><name pos:start="213:18" pos:end="213:18">j</name> <operator pos:start="213:20" pos:end="213:20">=</operator> <literal type="number" pos:start="213:22" pos:end="213:22">0</literal></expr>;</init> <condition pos:start="213:25" pos:end="213:32"><expr pos:start="213:25" pos:end="213:31"><name pos:start="213:25" pos:end="213:25">j</name> <operator pos:start="213:27" pos:end="213:27">&lt;</operator> <name pos:start="213:29" pos:end="213:31">dim</name></expr>;</condition> <incr pos:start="213:34" pos:end="213:36"><expr pos:start="213:34" pos:end="213:36"><name pos:start="213:34" pos:end="213:34">j</name><operator pos:start="213:35" pos:end="213:36">++</operator></expr></incr>)</control><block type="pseudo" pos:start="215:17" pos:end="217:52"><block_content pos:start="215:17" pos:end="217:52">

                <if_stmt pos:start="215:17" pos:end="217:52"><if pos:start="215:17" pos:end="217:52">if <condition pos:start="215:20" pos:end="215:72">(<expr pos:start="215:21" pos:end="215:71"><name pos:start="215:21" pos:end="215:63"><name pos:start="215:21" pos:end="215:43">ff_aac_codebook_vectors</name><index pos:start="215:44" pos:end="215:49">[<expr pos:start="215:45" pos:end="215:48"><name pos:start="215:45" pos:end="215:46">cb</name><operator pos:start="215:47" pos:end="215:47">-</operator><literal type="number" pos:start="215:48" pos:end="215:48">1</literal></expr>]</index><index pos:start="215:50" pos:end="215:63">[<expr pos:start="215:51" pos:end="215:62"><name pos:start="215:51" pos:end="215:56">minidx</name><operator pos:start="215:57" pos:end="215:57">*</operator><name pos:start="215:58" pos:end="215:60">dim</name><operator pos:start="215:61" pos:end="215:61">+</operator><name pos:start="215:62" pos:end="215:62">j</name></expr>]</index></name> <operator pos:start="215:65" pos:end="215:66">!=</operator> <literal type="number" pos:start="215:68" pos:end="215:71">0.0f</literal></expr>)</condition><block type="pseudo" pos:start="217:21" pos:end="217:52"><block_content pos:start="217:21" pos:end="217:52">

                    <expr_stmt pos:start="217:21" pos:end="217:52"><expr pos:start="217:21" pos:end="217:51"><call pos:start="217:21" pos:end="217:51"><name pos:start="217:21" pos:end="217:28">put_bits</name><argument_list pos:start="217:29" pos:end="217:51">(<argument pos:start="217:30" pos:end="217:31"><expr pos:start="217:30" pos:end="217:31"><name pos:start="217:30" pos:end="217:31">pb</name></expr></argument>, <argument pos:start="217:34" pos:end="217:34"><expr pos:start="217:34" pos:end="217:34"><literal type="number" pos:start="217:34" pos:end="217:34">1</literal></expr></argument>, <argument pos:start="217:37" pos:end="217:50"><expr pos:start="217:37" pos:end="217:50"><name pos:start="217:37" pos:end="217:43"><name pos:start="217:37" pos:end="217:38">in</name><index pos:start="217:39" pos:end="217:43">[<expr pos:start="217:40" pos:end="217:42"><name pos:start="217:40" pos:end="217:40">i</name><operator pos:start="217:41" pos:end="217:41">+</operator><name pos:start="217:42" pos:end="217:42">j</name></expr>]</index></name> <operator pos:start="217:45" pos:end="217:45">&lt;</operator> <literal type="number" pos:start="217:47" pos:end="217:50">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

        <if_stmt pos:start="219:9" pos:end="239:9"><if pos:start="219:9" pos:end="239:9">if <condition pos:start="219:12" pos:end="219:25">(<expr pos:start="219:13" pos:end="219:24"><name pos:start="219:13" pos:end="219:14">cb</name> <operator pos:start="219:16" pos:end="219:17">==</operator> <name pos:start="219:19" pos:end="219:24">ESC_BT</name></expr>)</condition> <block pos:start="219:27" pos:end="239:9">{<block_content pos:start="221:13" pos:end="237:13">

            <for pos:start="221:13" pos:end="237:13">for <control pos:start="221:17" pos:end="221:35">(<init pos:start="221:18" pos:end="221:23"><expr pos:start="221:18" pos:end="221:22"><name pos:start="221:18" pos:end="221:18">j</name> <operator pos:start="221:20" pos:end="221:20">=</operator> <literal type="number" pos:start="221:22" pos:end="221:22">0</literal></expr>;</init> <condition pos:start="221:25" pos:end="221:30"><expr pos:start="221:25" pos:end="221:29"><name pos:start="221:25" pos:end="221:25">j</name> <operator pos:start="221:27" pos:end="221:27">&lt;</operator> <literal type="number" pos:start="221:29" pos:end="221:29">2</literal></expr>;</condition> <incr pos:start="221:32" pos:end="221:34"><expr pos:start="221:32" pos:end="221:34"><name pos:start="221:32" pos:end="221:32">j</name><operator pos:start="221:33" pos:end="221:34">++</operator></expr></incr>)</control> <block pos:start="221:37" pos:end="237:13">{<block_content pos:start="223:17" pos:end="235:17">

                <if_stmt pos:start="223:17" pos:end="235:17"><if pos:start="223:17" pos:end="235:17">if <condition pos:start="223:20" pos:end="223:71">(<expr pos:start="223:21" pos:end="223:70"><name pos:start="223:21" pos:end="223:61"><name pos:start="223:21" pos:end="223:43">ff_aac_codebook_vectors</name><index pos:start="223:44" pos:end="223:49">[<expr pos:start="223:45" pos:end="223:48"><name pos:start="223:45" pos:end="223:46">cb</name><operator pos:start="223:47" pos:end="223:47">-</operator><literal type="number" pos:start="223:48" pos:end="223:48">1</literal></expr>]</index><index pos:start="223:50" pos:end="223:61">[<expr pos:start="223:51" pos:end="223:60"><name pos:start="223:51" pos:end="223:56">minidx</name><operator pos:start="223:57" pos:end="223:57">*</operator><literal type="number" pos:start="223:58" pos:end="223:58">2</literal><operator pos:start="223:59" pos:end="223:59">+</operator><name pos:start="223:60" pos:end="223:60">j</name></expr>]</index></name> <operator pos:start="223:63" pos:end="223:64">==</operator> <literal type="number" pos:start="223:66" pos:end="223:70">64.0f</literal></expr>)</condition> <block pos:start="223:73" pos:end="235:17">{<block_content pos:start="225:21" pos:end="233:63">

                    <decl_stmt pos:start="225:21" pos:end="225:74"><decl pos:start="225:21" pos:end="225:73"><type pos:start="225:21" pos:end="225:23"><name pos:start="225:21" pos:end="225:23">int</name></type> <name pos:start="225:25" pos:end="225:28">coef</name> <init pos:start="225:30" pos:end="225:73">= <expr pos:start="225:32" pos:end="225:73"><call pos:start="225:32" pos:end="225:73"><name pos:start="225:32" pos:end="225:38">av_clip</name><argument_list pos:start="225:39" pos:end="225:73">(<argument pos:start="225:40" pos:end="225:63"><expr pos:start="225:40" pos:end="225:63"><call pos:start="225:40" pos:end="225:63"><name pos:start="225:40" pos:end="225:44">quant</name><argument_list pos:start="225:45" pos:end="225:63">(<argument pos:start="225:46" pos:end="225:59"><expr pos:start="225:46" pos:end="225:59"><call pos:start="225:46" pos:end="225:59"><name pos:start="225:46" pos:end="225:50">fabsf</name><argument_list pos:start="225:51" pos:end="225:59">(<argument pos:start="225:52" pos:end="225:58"><expr pos:start="225:52" pos:end="225:58"><name pos:start="225:52" pos:end="225:58"><name pos:start="225:52" pos:end="225:53">in</name><index pos:start="225:54" pos:end="225:58">[<expr pos:start="225:55" pos:end="225:57"><name pos:start="225:55" pos:end="225:55">i</name><operator pos:start="225:56" pos:end="225:56">+</operator><name pos:start="225:57" pos:end="225:57">j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="225:62" pos:end="225:62"><expr pos:start="225:62" pos:end="225:62"><name pos:start="225:62" pos:end="225:62">Q</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="225:66" pos:end="225:66"><expr pos:start="225:66" pos:end="225:66"><literal type="number" pos:start="225:66" pos:end="225:66">0</literal></expr></argument>, <argument pos:start="225:69" pos:end="225:72"><expr pos:start="225:69" pos:end="225:72"><literal type="number" pos:start="225:69" pos:end="225:72">8191</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="227:21" pos:end="227:44"><decl pos:start="227:21" pos:end="227:43"><type pos:start="227:21" pos:end="227:23"><name pos:start="227:21" pos:end="227:23">int</name></type> <name pos:start="227:25" pos:end="227:27">len</name> <init pos:start="227:29" pos:end="227:43">= <expr pos:start="227:31" pos:end="227:43"><call pos:start="227:31" pos:end="227:43"><name pos:start="227:31" pos:end="227:37">av_log2</name><argument_list pos:start="227:38" pos:end="227:43">(<argument pos:start="227:39" pos:end="227:42"><expr pos:start="227:39" pos:end="227:42"><name pos:start="227:39" pos:end="227:42">coef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="231:21" pos:end="231:72"><expr pos:start="231:21" pos:end="231:71"><call pos:start="231:21" pos:end="231:71"><name pos:start="231:21" pos:end="231:28">put_bits</name><argument_list pos:start="231:29" pos:end="231:71">(<argument pos:start="231:30" pos:end="231:31"><expr pos:start="231:30" pos:end="231:31"><name pos:start="231:30" pos:end="231:31">pb</name></expr></argument>, <argument pos:start="231:34" pos:end="231:44"><expr pos:start="231:34" pos:end="231:44"><name pos:start="231:34" pos:end="231:36">len</name> <operator pos:start="231:38" pos:end="231:38">-</operator> <literal type="number" pos:start="231:40" pos:end="231:42">4</literal> <operator pos:start="231:42" pos:end="231:42">+</operator> <literal type="number" pos:start="231:44" pos:end="231:44">1</literal></expr></argument>, <argument pos:start="231:47" pos:end="231:70"><expr pos:start="231:47" pos:end="231:70"><operator pos:start="231:47" pos:end="231:47">(</operator><literal type="number" pos:start="231:48" pos:end="231:48">1</literal> <operator pos:start="231:50" pos:end="231:51">&lt;&lt;</operator> <operator pos:start="231:53" pos:end="231:53">(</operator><name pos:start="231:54" pos:end="231:56">len</name> <operator pos:start="231:58" pos:end="231:58">-</operator> <literal type="number" pos:start="231:60" pos:end="231:62">4</literal> <operator pos:start="231:62" pos:end="231:62">+</operator> <literal type="number" pos:start="231:64" pos:end="231:64">1</literal><operator pos:start="231:65" pos:end="231:65">)</operator><operator pos:start="231:66" pos:end="231:66">)</operator> <operator pos:start="231:68" pos:end="231:68">-</operator> <literal type="number" pos:start="231:70" pos:end="231:70">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="233:21" pos:end="233:63"><expr pos:start="233:21" pos:end="233:62"><call pos:start="233:21" pos:end="233:62"><name pos:start="233:21" pos:end="233:28">put_bits</name><argument_list pos:start="233:29" pos:end="233:62">(<argument pos:start="233:30" pos:end="233:31"><expr pos:start="233:30" pos:end="233:31"><name pos:start="233:30" pos:end="233:31">pb</name></expr></argument>, <argument pos:start="233:34" pos:end="233:36"><expr pos:start="233:34" pos:end="233:36"><name pos:start="233:34" pos:end="233:36">len</name></expr></argument>, <argument pos:start="233:39" pos:end="233:61"><expr pos:start="233:39" pos:end="233:61"><name pos:start="233:39" pos:end="233:42">coef</name> <operator pos:start="233:44" pos:end="233:44">&amp;</operator> <operator pos:start="233:46" pos:end="233:46">(</operator><operator pos:start="233:47" pos:end="233:47">(</operator><literal type="number" pos:start="233:48" pos:end="233:48">1</literal> <operator pos:start="233:50" pos:end="233:51">&lt;&lt;</operator> <name pos:start="233:53" pos:end="233:55">len</name><operator pos:start="233:56" pos:end="233:56">)</operator> <operator pos:start="233:58" pos:end="233:58">-</operator> <literal type="number" pos:start="233:60" pos:end="233:60">1</literal><operator pos:start="233:61" pos:end="233:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<comment type="line" pos:start="243:1" pos:end="243:35">//STOP_TIMER("quantize_and_encode")</comment>

</block_content>}</block></for></block_content></block></function>
</unit>
