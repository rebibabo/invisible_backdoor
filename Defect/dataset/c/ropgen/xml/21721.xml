<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21721.c" pos:tabs="8"><function pos:start="1:1" pos:end="345:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">vfio_connect_container</name><parameter_list pos:start="1:34" pos:end="1:69">(<parameter pos:start="1:35" pos:end="1:50"><decl pos:start="1:35" pos:end="1:50"><type pos:start="1:35" pos:end="1:50"><name pos:start="1:35" pos:end="1:43">VFIOGroup</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:50">group</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:68"><decl pos:start="1:53" pos:end="1:68"><type pos:start="1:53" pos:end="1:68"><name pos:start="1:53" pos:end="1:64">AddressSpace</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">as</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="345:1">{<block_content pos:start="5:5" pos:end="343:15">

    <decl_stmt pos:start="5:5" pos:end="5:29"><decl pos:start="5:5" pos:end="5:28"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:17">VFIOContainer</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:28">container</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:15"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:15">fd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">VFIOAddressSpace</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:27">space</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:39"><expr pos:start="13:5" pos:end="13:38"><name pos:start="13:5" pos:end="13:9">space</name> <operator pos:start="13:11" pos:end="13:11">=</operator> <call pos:start="13:13" pos:end="13:38"><name pos:start="13:13" pos:end="13:34">vfio_get_address_space</name><argument_list pos:start="13:35" pos:end="13:38">(<argument pos:start="13:36" pos:end="13:37"><expr pos:start="13:36" pos:end="13:37"><name pos:start="13:36" pos:end="13:37">as</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <macro pos:start="17:5" pos:end="17:54"><name pos:start="17:5" pos:end="17:17">QLIST_FOREACH</name><argument_list pos:start="17:18" pos:end="17:54">(<argument pos:start="17:19" pos:end="17:27">container</argument>, <argument pos:start="17:30" pos:end="17:47">&amp;space-&gt;containers</argument>, <argument pos:start="17:50" pos:end="17:53">next</argument>)</argument_list></macro> <block pos:start="17:56" pos:end="29:5">{<block_content pos:start="19:9" pos:end="27:9">

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:72">(<expr pos:start="19:13" pos:end="19:71"><operator pos:start="19:13" pos:end="19:13">!</operator><call pos:start="19:14" pos:end="19:71"><name pos:start="19:14" pos:end="19:18">ioctl</name><argument_list pos:start="19:19" pos:end="19:71">(<argument pos:start="19:20" pos:end="19:28"><expr pos:start="19:20" pos:end="19:28"><name pos:start="19:20" pos:end="19:28"><name pos:start="19:20" pos:end="19:24">group</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:28">fd</name></name></expr></argument>, <argument pos:start="19:31" pos:end="19:54"><expr pos:start="19:31" pos:end="19:54"><name pos:start="19:31" pos:end="19:54">VFIO_GROUP_SET_CONTAINER</name></expr></argument>, <argument pos:start="19:57" pos:end="19:70"><expr pos:start="19:57" pos:end="19:70"><operator pos:start="19:57" pos:end="19:57">&amp;</operator><name pos:start="19:58" pos:end="19:70"><name pos:start="19:58" pos:end="19:66">container</name><operator pos:start="19:67" pos:end="19:68">-&gt;</operator><name pos:start="19:69" pos:end="19:70">fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:74" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:21">

            <expr_stmt pos:start="21:13" pos:end="21:41"><expr pos:start="21:13" pos:end="21:40"><name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:17">group</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:28">container</name></name> <operator pos:start="21:30" pos:end="21:30">=</operator> <name pos:start="21:32" pos:end="21:40">container</name></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:77"><expr pos:start="23:13" pos:end="23:76"><call pos:start="23:13" pos:end="23:76"><name pos:start="23:13" pos:end="23:29">QLIST_INSERT_HEAD</name><argument_list pos:start="23:30" pos:end="23:76">(<argument pos:start="23:31" pos:end="23:52"><expr pos:start="23:31" pos:end="23:52"><operator pos:start="23:31" pos:end="23:31">&amp;</operator><name pos:start="23:32" pos:end="23:52"><name pos:start="23:32" pos:end="23:40">container</name><operator pos:start="23:41" pos:end="23:42">-&gt;</operator><name pos:start="23:43" pos:end="23:52">group_list</name></name></expr></argument>, <argument pos:start="23:55" pos:end="23:59"><expr pos:start="23:55" pos:end="23:59"><name pos:start="23:55" pos:end="23:59">group</name></expr></argument>, <argument pos:start="23:62" pos:end="23:75"><expr pos:start="23:62" pos:end="23:75"><name pos:start="23:62" pos:end="23:75">container_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:21">return <expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



    <expr_stmt pos:start="33:5" pos:end="33:45"><expr pos:start="33:5" pos:end="33:44"><name pos:start="33:5" pos:end="33:6">fd</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:44"><name pos:start="33:10" pos:end="33:18">qemu_open</name><argument_list pos:start="33:19" pos:end="33:44">(<argument pos:start="33:20" pos:end="33:35"><expr pos:start="33:20" pos:end="33:35"><literal type="string" pos:start="33:20" pos:end="33:35">"/dev/vfio/vfio"</literal></expr></argument>, <argument pos:start="33:38" pos:end="33:43"><expr pos:start="33:38" pos:end="33:43"><name pos:start="33:38" pos:end="33:43">O_RDWR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="43:5"><if pos:start="35:5" pos:end="43:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:10">fd</name> <operator pos:start="35:12" pos:end="35:12">&lt;</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition> <block pos:start="35:17" pos:end="43:5">{<block_content pos:start="37:9" pos:end="41:28">

        <expr_stmt pos:start="37:9" pos:end="37:64"><expr pos:start="37:9" pos:end="37:63"><call pos:start="37:9" pos:end="37:63"><name pos:start="37:9" pos:end="37:20">error_report</name><argument_list pos:start="37:21" pos:end="37:63">(<argument pos:start="37:22" pos:end="37:62"><expr pos:start="37:22" pos:end="37:62"><literal type="string" pos:start="37:22" pos:end="37:62">"vfio: failed to open /dev/vfio/vfio: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:21"><expr pos:start="39:9" pos:end="39:20"><name pos:start="39:9" pos:end="39:11">ret</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <operator pos:start="39:15" pos:end="39:15">-</operator><name pos:start="39:16" pos:end="39:20">errno</name></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:28">goto <name pos:start="41:14" pos:end="41:27">put_space_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:7">ret</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:41"><name pos:start="47:11" pos:end="47:15">ioctl</name><argument_list pos:start="47:16" pos:end="47:41">(<argument pos:start="47:17" pos:end="47:18"><expr pos:start="47:17" pos:end="47:18"><name pos:start="47:17" pos:end="47:18">fd</name></expr></argument>, <argument pos:start="47:21" pos:end="47:40"><expr pos:start="47:21" pos:end="47:40"><name pos:start="47:21" pos:end="47:40">VFIO_GET_API_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="59:5"><if pos:start="49:5" pos:end="59:5">if <condition pos:start="49:8" pos:end="49:32">(<expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:14">!=</operator> <name pos:start="49:16" pos:end="49:31">VFIO_API_VERSION</name></expr>)</condition> <block pos:start="49:34" pos:end="59:5">{<block_content pos:start="51:9" pos:end="57:27">

        <expr_stmt pos:start="51:9" pos:end="53:68"><expr pos:start="51:9" pos:end="53:67"><call pos:start="51:9" pos:end="53:67"><name pos:start="51:9" pos:end="51:20">error_report</name><argument_list pos:start="51:21" pos:end="53:67">(<argument pos:start="51:22" pos:end="53:43"><expr pos:start="51:22" pos:end="53:43"><literal type="string" pos:start="51:22" pos:end="51:57">"vfio: supported vfio version: %d, "</literal>

                     <literal type="string" pos:start="53:22" pos:end="53:43">"reported version: %d"</literal></expr></argument>, <argument pos:start="53:46" pos:end="53:61"><expr pos:start="53:46" pos:end="53:61"><name pos:start="53:46" pos:end="53:61">VFIO_API_VERSION</name></expr></argument>, <argument pos:start="53:64" pos:end="53:66"><expr pos:start="53:64" pos:end="53:66"><name pos:start="53:64" pos:end="53:66">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:22"><expr pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:11">ret</name> <operator pos:start="55:13" pos:end="55:13">=</operator> <operator pos:start="55:15" pos:end="55:15">-</operator><name pos:start="55:16" pos:end="55:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:27">goto <name pos:start="57:14" pos:end="57:26">close_fd_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:46"><expr pos:start="63:5" pos:end="63:45"><name pos:start="63:5" pos:end="63:13">container</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:45"><name pos:start="63:17" pos:end="63:25">g_malloc0</name><argument_list pos:start="63:26" pos:end="63:45">(<argument pos:start="63:27" pos:end="63:44"><expr pos:start="63:27" pos:end="63:44"><sizeof pos:start="63:27" pos:end="63:44">sizeof<argument_list pos:start="63:33" pos:end="63:44">(<argument pos:start="63:34" pos:end="63:43"><expr pos:start="63:34" pos:end="63:43"><operator pos:start="63:34" pos:end="63:34">*</operator><name pos:start="63:35" pos:end="63:43">container</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:29"><expr pos:start="65:5" pos:end="65:28"><name pos:start="65:5" pos:end="65:20"><name pos:start="65:5" pos:end="65:13">container</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:20">space</name></name> <operator pos:start="65:22" pos:end="65:22">=</operator> <name pos:start="65:24" pos:end="65:28">space</name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:23"><expr pos:start="67:5" pos:end="67:22"><name pos:start="67:5" pos:end="67:17"><name pos:start="67:5" pos:end="67:13">container</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:17">fd</name></name> <operator pos:start="67:19" pos:end="67:19">=</operator> <name pos:start="67:21" pos:end="67:22">fd</name></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="277:5"><if pos:start="69:5" pos:end="139:5">if <condition pos:start="69:8" pos:end="71:60">(<expr pos:start="69:9" pos:end="71:59"><call pos:start="69:9" pos:end="69:57"><name pos:start="69:9" pos:end="69:13">ioctl</name><argument_list pos:start="69:14" pos:end="69:57">(<argument pos:start="69:15" pos:end="69:16"><expr pos:start="69:15" pos:end="69:16"><name pos:start="69:15" pos:end="69:16">fd</name></expr></argument>, <argument pos:start="69:19" pos:end="69:38"><expr pos:start="69:19" pos:end="69:38"><name pos:start="69:19" pos:end="69:38">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="69:41" pos:end="69:56"><expr pos:start="69:41" pos:end="69:56"><name pos:start="69:41" pos:end="69:56">VFIO_TYPE1_IOMMU</name></expr></argument>)</argument_list></call> <operator pos:start="69:59" pos:end="69:60">||</operator>

        <call pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:13">ioctl</name><argument_list pos:start="71:14" pos:end="71:59">(<argument pos:start="71:15" pos:end="71:16"><expr pos:start="71:15" pos:end="71:16"><name pos:start="71:15" pos:end="71:16">fd</name></expr></argument>, <argument pos:start="71:19" pos:end="71:38"><expr pos:start="71:19" pos:end="71:38"><name pos:start="71:19" pos:end="71:38">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="71:41" pos:end="71:58"><expr pos:start="71:41" pos:end="71:58"><name pos:start="71:41" pos:end="71:58">VFIO_TYPE1v2_IOMMU</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:62" pos:end="139:5">{<block_content pos:start="73:9" pos:end="137:71">

        <decl_stmt pos:start="73:9" pos:end="73:72"><decl pos:start="73:9" pos:end="73:71"><type pos:start="73:9" pos:end="73:12"><name pos:start="73:9" pos:end="73:12">bool</name></type> <name pos:start="73:14" pos:end="73:15">v2</name> <init pos:start="73:17" pos:end="73:71">= <expr pos:start="73:19" pos:end="73:71"><operator pos:start="73:19" pos:end="73:19">!</operator><operator pos:start="73:20" pos:end="73:20">!</operator><call pos:start="73:21" pos:end="73:71"><name pos:start="73:21" pos:end="73:25">ioctl</name><argument_list pos:start="73:26" pos:end="73:71">(<argument pos:start="73:27" pos:end="73:28"><expr pos:start="73:27" pos:end="73:28"><name pos:start="73:27" pos:end="73:28">fd</name></expr></argument>, <argument pos:start="73:31" pos:end="73:50"><expr pos:start="73:31" pos:end="73:50"><name pos:start="73:31" pos:end="73:50">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="73:53" pos:end="73:70"><expr pos:start="73:53" pos:end="73:70"><name pos:start="73:53" pos:end="73:70">VFIO_TYPE1v2_IOMMU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="75:9" pos:end="75:42"><decl pos:start="75:9" pos:end="75:41"><type pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:14">struct</name> <name pos:start="75:16" pos:end="75:36">vfio_iommu_type1_info</name></name></type> <name pos:start="75:38" pos:end="75:41">info</name></decl>;</decl_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:62"><expr pos:start="79:9" pos:end="79:61"><name pos:start="79:9" pos:end="79:11">ret</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:61"><name pos:start="79:15" pos:end="79:19">ioctl</name><argument_list pos:start="79:20" pos:end="79:61">(<argument pos:start="79:21" pos:end="79:29"><expr pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:29"><name pos:start="79:21" pos:end="79:25">group</name><operator pos:start="79:26" pos:end="79:27">-&gt;</operator><name pos:start="79:28" pos:end="79:29">fd</name></name></expr></argument>, <argument pos:start="79:32" pos:end="79:55"><expr pos:start="79:32" pos:end="79:55"><name pos:start="79:32" pos:end="79:55">VFIO_GROUP_SET_CONTAINER</name></expr></argument>, <argument pos:start="79:58" pos:end="79:60"><expr pos:start="79:58" pos:end="79:60"><operator pos:start="79:58" pos:end="79:58">&amp;</operator><name pos:start="79:59" pos:end="79:60">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="89:9"><if pos:start="81:9" pos:end="89:9">if <condition pos:start="81:12" pos:end="81:16">(<expr pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">ret</name></expr>)</condition> <block pos:start="81:18" pos:end="89:9">{<block_content pos:start="83:13" pos:end="87:37">

            <expr_stmt pos:start="83:13" pos:end="83:68"><expr pos:start="83:13" pos:end="83:67"><call pos:start="83:13" pos:end="83:67"><name pos:start="83:13" pos:end="83:24">error_report</name><argument_list pos:start="83:25" pos:end="83:67">(<argument pos:start="83:26" pos:end="83:66"><expr pos:start="83:26" pos:end="83:66"><literal type="string" pos:start="83:26" pos:end="83:66">"vfio: failed to set group container: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:25"><expr pos:start="85:13" pos:end="85:24"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <operator pos:start="85:19" pos:end="85:19">-</operator><name pos:start="85:20" pos:end="85:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:37">goto <name pos:start="87:18" pos:end="87:36">free_container_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="93:9" pos:end="93:75"><expr pos:start="93:9" pos:end="93:74"><name pos:start="93:9" pos:end="93:29"><name pos:start="93:9" pos:end="93:17">container</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:29">iommu_type</name></name> <operator pos:start="93:31" pos:end="93:31">=</operator> <ternary pos:start="93:33" pos:end="93:74"><condition pos:start="93:33" pos:end="93:36"><expr pos:start="93:33" pos:end="93:34"><name pos:start="93:33" pos:end="93:34">v2</name></expr> ?</condition><then pos:start="93:38" pos:end="93:55"> <expr pos:start="93:38" pos:end="93:55"><name pos:start="93:38" pos:end="93:55">VFIO_TYPE1v2_IOMMU</name></expr> </then><else pos:start="93:57" pos:end="93:74">: <expr pos:start="93:59" pos:end="93:74"><name pos:start="93:59" pos:end="93:74">VFIO_TYPE1_IOMMU</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:63"><expr pos:start="95:9" pos:end="95:62"><name pos:start="95:9" pos:end="95:11">ret</name> <operator pos:start="95:13" pos:end="95:13">=</operator> <call pos:start="95:15" pos:end="95:62"><name pos:start="95:15" pos:end="95:19">ioctl</name><argument_list pos:start="95:20" pos:end="95:62">(<argument pos:start="95:21" pos:end="95:22"><expr pos:start="95:21" pos:end="95:22"><name pos:start="95:21" pos:end="95:22">fd</name></expr></argument>, <argument pos:start="95:25" pos:end="95:38"><expr pos:start="95:25" pos:end="95:38"><name pos:start="95:25" pos:end="95:38">VFIO_SET_IOMMU</name></expr></argument>, <argument pos:start="95:41" pos:end="95:61"><expr pos:start="95:41" pos:end="95:61"><name pos:start="95:41" pos:end="95:61"><name pos:start="95:41" pos:end="95:49">container</name><operator pos:start="95:50" pos:end="95:51">-&gt;</operator><name pos:start="95:52" pos:end="95:61">iommu_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="105:9"><if pos:start="97:9" pos:end="105:9">if <condition pos:start="97:12" pos:end="97:16">(<expr pos:start="97:13" pos:end="97:15"><name pos:start="97:13" pos:end="97:15">ret</name></expr>)</condition> <block pos:start="97:18" pos:end="105:9">{<block_content pos:start="99:13" pos:end="103:37">

            <expr_stmt pos:start="99:13" pos:end="99:72"><expr pos:start="99:13" pos:end="99:71"><call pos:start="99:13" pos:end="99:71"><name pos:start="99:13" pos:end="99:24">error_report</name><argument_list pos:start="99:25" pos:end="99:71">(<argument pos:start="99:26" pos:end="99:70"><expr pos:start="99:26" pos:end="99:70"><literal type="string" pos:start="99:26" pos:end="99:70">"vfio: failed to set iommu for container: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:25"><expr pos:start="101:13" pos:end="101:24"><name pos:start="101:13" pos:end="101:15">ret</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <operator pos:start="101:19" pos:end="101:19">-</operator><name pos:start="101:20" pos:end="101:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="103:13" pos:end="103:37">goto <name pos:start="103:18" pos:end="103:36">free_container_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="109:9" pos:end="121:11">/*

         * FIXME: This assumes that a Type1 IOMMU can map any 64-bit

         * IOVA whatsoever.  That's not actually true, but the current

         * kernel interface doesn't tell us what it can map, and the

         * existing Type1 IOMMUs generally support any IOVA we're

         * going to actually try in practice.

         */</comment>

        <expr_stmt pos:start="123:9" pos:end="123:34"><expr pos:start="123:9" pos:end="123:33"><name pos:start="123:9" pos:end="123:18"><name pos:start="123:9" pos:end="123:12">info</name><operator pos:start="123:13" pos:end="123:13">.</operator><name pos:start="123:14" pos:end="123:18">argsz</name></name> <operator pos:start="123:20" pos:end="123:20">=</operator> <sizeof pos:start="123:22" pos:end="123:33">sizeof<argument_list pos:start="123:28" pos:end="123:33">(<argument pos:start="123:29" pos:end="123:32"><expr pos:start="123:29" pos:end="123:32"><name pos:start="123:29" pos:end="123:32">info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:52"><expr pos:start="125:9" pos:end="125:51"><name pos:start="125:9" pos:end="125:11">ret</name> <operator pos:start="125:13" pos:end="125:13">=</operator> <call pos:start="125:15" pos:end="125:51"><name pos:start="125:15" pos:end="125:19">ioctl</name><argument_list pos:start="125:20" pos:end="125:51">(<argument pos:start="125:21" pos:end="125:22"><expr pos:start="125:21" pos:end="125:22"><name pos:start="125:21" pos:end="125:22">fd</name></expr></argument>, <argument pos:start="125:25" pos:end="125:43"><expr pos:start="125:25" pos:end="125:43"><name pos:start="125:25" pos:end="125:43">VFIO_IOMMU_GET_INFO</name></expr></argument>, <argument pos:start="125:46" pos:end="125:50"><expr pos:start="125:46" pos:end="125:50"><operator pos:start="125:46" pos:end="125:46">&amp;</operator><name pos:start="125:47" pos:end="125:50">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="127:9" pos:end="127:27">/* Ignore errors */</comment>

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:59">(<expr pos:start="129:13" pos:end="129:58"><name pos:start="129:13" pos:end="129:15">ret</name> <operator pos:start="129:17" pos:end="129:18">||</operator> <operator pos:start="129:20" pos:end="129:20">!</operator><operator pos:start="129:21" pos:end="129:21">(</operator><name pos:start="129:22" pos:end="129:31"><name pos:start="129:22" pos:end="129:25">info</name><operator pos:start="129:26" pos:end="129:26">.</operator><name pos:start="129:27" pos:end="129:31">flags</name></name> <operator pos:start="129:33" pos:end="129:33">&amp;</operator> <name pos:start="129:35" pos:end="129:57">VFIO_IOMMU_INFO_PGSIZES</name><operator pos:start="129:58" pos:end="129:58">)</operator></expr>)</condition> <block pos:start="129:61" pos:end="135:9">{<block_content pos:start="133:13" pos:end="133:37">

            <comment type="block" pos:start="131:13" pos:end="131:42">/* Assume 4k IOVA page size */</comment>

            <expr_stmt pos:start="133:13" pos:end="133:37"><expr pos:start="133:13" pos:end="133:36"><name pos:start="133:13" pos:end="133:29"><name pos:start="133:13" pos:end="133:16">info</name><operator pos:start="133:17" pos:end="133:17">.</operator><name pos:start="133:18" pos:end="133:29">iova_pgsizes</name></name> <operator pos:start="133:31" pos:end="133:31">=</operator> <literal type="number" pos:start="133:33" pos:end="133:36">4096</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="137:9" pos:end="137:71"><expr pos:start="137:9" pos:end="137:70"><call pos:start="137:9" pos:end="137:70"><name pos:start="137:9" pos:end="137:25">vfio_host_win_add</name><argument_list pos:start="137:26" pos:end="137:70">(<argument pos:start="137:27" pos:end="137:35"><expr pos:start="137:27" pos:end="137:35"><name pos:start="137:27" pos:end="137:35">container</name></expr></argument>, <argument pos:start="137:38" pos:end="137:38"><expr pos:start="137:38" pos:end="137:38"><literal type="number" pos:start="137:38" pos:end="137:38">0</literal></expr></argument>, <argument pos:start="137:41" pos:end="137:50"><expr pos:start="137:41" pos:end="137:50"><operator pos:start="137:41" pos:end="137:41">(</operator><name pos:start="137:42" pos:end="137:47">hwaddr</name><operator pos:start="137:48" pos:end="137:48">)</operator><operator pos:start="137:49" pos:end="137:49">-</operator><literal type="number" pos:start="137:50" pos:end="137:50">1</literal></expr></argument>, <argument pos:start="137:53" pos:end="137:69"><expr pos:start="137:53" pos:end="137:69"><name pos:start="137:53" pos:end="137:69"><name pos:start="137:53" pos:end="137:56">info</name><operator pos:start="137:57" pos:end="137:57">.</operator><name pos:start="137:58" pos:end="137:69">iova_pgsizes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="139:7" pos:end="269:5">else if <condition pos:start="139:15" pos:end="141:72">(<expr pos:start="139:16" pos:end="141:71"><call pos:start="139:16" pos:end="139:68"><name pos:start="139:16" pos:end="139:20">ioctl</name><argument_list pos:start="139:21" pos:end="139:68">(<argument pos:start="139:22" pos:end="139:23"><expr pos:start="139:22" pos:end="139:23"><name pos:start="139:22" pos:end="139:23">fd</name></expr></argument>, <argument pos:start="139:26" pos:end="139:45"><expr pos:start="139:26" pos:end="139:45"><name pos:start="139:26" pos:end="139:45">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="139:48" pos:end="139:67"><expr pos:start="139:48" pos:end="139:67"><name pos:start="139:48" pos:end="139:67">VFIO_SPAPR_TCE_IOMMU</name></expr></argument>)</argument_list></call> <operator pos:start="139:70" pos:end="139:71">||</operator>

               <call pos:start="141:16" pos:end="141:71"><name pos:start="141:16" pos:end="141:20">ioctl</name><argument_list pos:start="141:21" pos:end="141:71">(<argument pos:start="141:22" pos:end="141:23"><expr pos:start="141:22" pos:end="141:23"><name pos:start="141:22" pos:end="141:23">fd</name></expr></argument>, <argument pos:start="141:26" pos:end="141:45"><expr pos:start="141:26" pos:end="141:45"><name pos:start="141:26" pos:end="141:45">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="141:48" pos:end="141:70"><expr pos:start="141:48" pos:end="141:70"><name pos:start="141:48" pos:end="141:70">VFIO_SPAPR_TCE_v2_IOMMU</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:74" pos:end="269:5">{<block_content pos:start="143:9" pos:end="267:34">

        <decl_stmt pos:start="143:9" pos:end="143:46"><decl pos:start="143:9" pos:end="143:45"><type pos:start="143:9" pos:end="143:40"><name pos:start="143:9" pos:end="143:40"><name pos:start="143:9" pos:end="143:14">struct</name> <name pos:start="143:16" pos:end="143:40">vfio_iommu_spapr_tce_info</name></name></type> <name pos:start="143:42" pos:end="143:45">info</name></decl>;</decl_stmt>

        <decl_stmt pos:start="145:9" pos:end="145:77"><decl pos:start="145:9" pos:end="145:76"><type pos:start="145:9" pos:end="145:12"><name pos:start="145:9" pos:end="145:12">bool</name></type> <name pos:start="145:14" pos:end="145:15">v2</name> <init pos:start="145:17" pos:end="145:76">= <expr pos:start="145:19" pos:end="145:76"><operator pos:start="145:19" pos:end="145:19">!</operator><operator pos:start="145:20" pos:end="145:20">!</operator><call pos:start="145:21" pos:end="145:76"><name pos:start="145:21" pos:end="145:25">ioctl</name><argument_list pos:start="145:26" pos:end="145:76">(<argument pos:start="145:27" pos:end="145:28"><expr pos:start="145:27" pos:end="145:28"><name pos:start="145:27" pos:end="145:28">fd</name></expr></argument>, <argument pos:start="145:31" pos:end="145:50"><expr pos:start="145:31" pos:end="145:50"><name pos:start="145:31" pos:end="145:50">VFIO_CHECK_EXTENSION</name></expr></argument>, <argument pos:start="145:53" pos:end="145:75"><expr pos:start="145:53" pos:end="145:75"><name pos:start="145:53" pos:end="145:75">VFIO_SPAPR_TCE_v2_IOMMU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="149:9" pos:end="149:62"><expr pos:start="149:9" pos:end="149:61"><name pos:start="149:9" pos:end="149:11">ret</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <call pos:start="149:15" pos:end="149:61"><name pos:start="149:15" pos:end="149:19">ioctl</name><argument_list pos:start="149:20" pos:end="149:61">(<argument pos:start="149:21" pos:end="149:29"><expr pos:start="149:21" pos:end="149:29"><name pos:start="149:21" pos:end="149:29"><name pos:start="149:21" pos:end="149:25">group</name><operator pos:start="149:26" pos:end="149:27">-&gt;</operator><name pos:start="149:28" pos:end="149:29">fd</name></name></expr></argument>, <argument pos:start="149:32" pos:end="149:55"><expr pos:start="149:32" pos:end="149:55"><name pos:start="149:32" pos:end="149:55">VFIO_GROUP_SET_CONTAINER</name></expr></argument>, <argument pos:start="149:58" pos:end="149:60"><expr pos:start="149:58" pos:end="149:60"><operator pos:start="149:58" pos:end="149:58">&amp;</operator><name pos:start="149:59" pos:end="149:60">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="151:9" pos:end="159:9"><if pos:start="151:9" pos:end="159:9">if <condition pos:start="151:12" pos:end="151:16">(<expr pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">ret</name></expr>)</condition> <block pos:start="151:18" pos:end="159:9">{<block_content pos:start="153:13" pos:end="157:37">

            <expr_stmt pos:start="153:13" pos:end="153:68"><expr pos:start="153:13" pos:end="153:67"><call pos:start="153:13" pos:end="153:67"><name pos:start="153:13" pos:end="153:24">error_report</name><argument_list pos:start="153:25" pos:end="153:67">(<argument pos:start="153:26" pos:end="153:66"><expr pos:start="153:26" pos:end="153:66"><literal type="string" pos:start="153:26" pos:end="153:66">"vfio: failed to set group container: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:25"><expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <operator pos:start="155:19" pos:end="155:19">-</operator><name pos:start="155:20" pos:end="155:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="157:13" pos:end="157:37">goto <name pos:start="157:18" pos:end="157:36">free_container_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="161:9" pos:end="163:64"><expr pos:start="161:9" pos:end="163:63"><name pos:start="161:9" pos:end="161:29"><name pos:start="161:9" pos:end="161:17">container</name><operator pos:start="161:18" pos:end="161:19">-&gt;</operator><name pos:start="161:20" pos:end="161:29">iommu_type</name></name> <operator pos:start="161:31" pos:end="161:31">=</operator>

            <ternary pos:start="163:13" pos:end="163:63"><condition pos:start="163:13" pos:end="163:16"><expr pos:start="163:13" pos:end="163:14"><name pos:start="163:13" pos:end="163:14">v2</name></expr> ?</condition><then pos:start="163:18" pos:end="163:40"> <expr pos:start="163:18" pos:end="163:40"><name pos:start="163:18" pos:end="163:40">VFIO_SPAPR_TCE_v2_IOMMU</name></expr> </then><else pos:start="163:42" pos:end="163:63">: <expr pos:start="163:44" pos:end="163:63"><name pos:start="163:44" pos:end="163:63">VFIO_SPAPR_TCE_IOMMU</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:63"><expr pos:start="165:9" pos:end="165:62"><name pos:start="165:9" pos:end="165:11">ret</name> <operator pos:start="165:13" pos:end="165:13">=</operator> <call pos:start="165:15" pos:end="165:62"><name pos:start="165:15" pos:end="165:19">ioctl</name><argument_list pos:start="165:20" pos:end="165:62">(<argument pos:start="165:21" pos:end="165:22"><expr pos:start="165:21" pos:end="165:22"><name pos:start="165:21" pos:end="165:22">fd</name></expr></argument>, <argument pos:start="165:25" pos:end="165:38"><expr pos:start="165:25" pos:end="165:38"><name pos:start="165:25" pos:end="165:38">VFIO_SET_IOMMU</name></expr></argument>, <argument pos:start="165:41" pos:end="165:61"><expr pos:start="165:41" pos:end="165:61"><name pos:start="165:41" pos:end="165:61"><name pos:start="165:41" pos:end="165:49">container</name><operator pos:start="165:50" pos:end="165:51">-&gt;</operator><name pos:start="165:52" pos:end="165:61">iommu_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="167:9" pos:end="175:9"><if pos:start="167:9" pos:end="175:9">if <condition pos:start="167:12" pos:end="167:16">(<expr pos:start="167:13" pos:end="167:15"><name pos:start="167:13" pos:end="167:15">ret</name></expr>)</condition> <block pos:start="167:18" pos:end="175:9">{<block_content pos:start="169:13" pos:end="173:37">

            <expr_stmt pos:start="169:13" pos:end="169:72"><expr pos:start="169:13" pos:end="169:71"><call pos:start="169:13" pos:end="169:71"><name pos:start="169:13" pos:end="169:24">error_report</name><argument_list pos:start="169:25" pos:end="169:71">(<argument pos:start="169:26" pos:end="169:70"><expr pos:start="169:26" pos:end="169:70"><literal type="string" pos:start="169:26" pos:end="169:70">"vfio: failed to set iommu for container: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:25"><expr pos:start="171:13" pos:end="171:24"><name pos:start="171:13" pos:end="171:15">ret</name> <operator pos:start="171:17" pos:end="171:17">=</operator> <operator pos:start="171:19" pos:end="171:19">-</operator><name pos:start="171:20" pos:end="171:24">errno</name></expr>;</expr_stmt>

            <goto pos:start="173:13" pos:end="173:37">goto <name pos:start="173:18" pos:end="173:36">free_container_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="179:9" pos:end="187:11">/*

         * The host kernel code implementing VFIO_IOMMU_DISABLE is called

         * when container fd is closed so we do not call it explicitly

         * in this file.

         */</comment>

        <if_stmt pos:start="189:9" pos:end="223:9"><if pos:start="189:9" pos:end="203:9">if <condition pos:start="189:12" pos:end="189:16">(<expr pos:start="189:13" pos:end="189:15"><operator pos:start="189:13" pos:end="189:13">!</operator><name pos:start="189:14" pos:end="189:15">v2</name></expr>)</condition> <block pos:start="189:18" pos:end="203:9">{<block_content pos:start="191:13" pos:end="201:13">

            <expr_stmt pos:start="191:13" pos:end="191:47"><expr pos:start="191:13" pos:end="191:46"><name pos:start="191:13" pos:end="191:15">ret</name> <operator pos:start="191:17" pos:end="191:17">=</operator> <call pos:start="191:19" pos:end="191:46"><name pos:start="191:19" pos:end="191:23">ioctl</name><argument_list pos:start="191:24" pos:end="191:46">(<argument pos:start="191:25" pos:end="191:26"><expr pos:start="191:25" pos:end="191:26"><name pos:start="191:25" pos:end="191:26">fd</name></expr></argument>, <argument pos:start="191:29" pos:end="191:45"><expr pos:start="191:29" pos:end="191:45"><name pos:start="191:29" pos:end="191:45">VFIO_IOMMU_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="193:13" pos:end="201:13"><if pos:start="193:13" pos:end="201:13">if <condition pos:start="193:16" pos:end="193:20">(<expr pos:start="193:17" pos:end="193:19"><name pos:start="193:17" pos:end="193:19">ret</name></expr>)</condition> <block pos:start="193:22" pos:end="201:13">{<block_content pos:start="195:17" pos:end="199:41">

                <expr_stmt pos:start="195:17" pos:end="195:69"><expr pos:start="195:17" pos:end="195:68"><call pos:start="195:17" pos:end="195:68"><name pos:start="195:17" pos:end="195:28">error_report</name><argument_list pos:start="195:29" pos:end="195:68">(<argument pos:start="195:30" pos:end="195:67"><expr pos:start="195:30" pos:end="195:67"><literal type="string" pos:start="195:30" pos:end="195:67">"vfio: failed to enable container: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:29"><expr pos:start="197:17" pos:end="197:28"><name pos:start="197:17" pos:end="197:19">ret</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <operator pos:start="197:23" pos:end="197:23">-</operator><name pos:start="197:24" pos:end="197:28">errno</name></expr>;</expr_stmt>

                <goto pos:start="199:17" pos:end="199:41">goto <name pos:start="199:22" pos:end="199:40">free_container_exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="203:11" pos:end="223:9">else <block pos:start="203:16" pos:end="223:9">{<block_content pos:start="205:13" pos:end="221:13">

            <expr_stmt pos:start="205:13" pos:end="205:62"><expr pos:start="205:13" pos:end="205:61"><name pos:start="205:13" pos:end="205:38"><name pos:start="205:13" pos:end="205:21">container</name><operator pos:start="205:22" pos:end="205:23">-&gt;</operator><name pos:start="205:24" pos:end="205:38">prereg_listener</name></name> <operator pos:start="205:40" pos:end="205:40">=</operator> <name pos:start="205:42" pos:end="205:61">vfio_prereg_listener</name></expr>;</expr_stmt>



            <expr_stmt pos:start="209:13" pos:end="211:60"><expr pos:start="209:13" pos:end="211:59"><call pos:start="209:13" pos:end="211:59"><name pos:start="209:13" pos:end="209:36">memory_listener_register</name><argument_list pos:start="209:37" pos:end="211:59">(<argument pos:start="209:38" pos:end="209:64"><expr pos:start="209:38" pos:end="209:64"><operator pos:start="209:38" pos:end="209:38">&amp;</operator><name pos:start="209:39" pos:end="209:64"><name pos:start="209:39" pos:end="209:47">container</name><operator pos:start="209:48" pos:end="209:49">-&gt;</operator><name pos:start="209:50" pos:end="209:64">prereg_listener</name></name></expr></argument>,

                                     <argument pos:start="211:38" pos:end="211:58"><expr pos:start="211:38" pos:end="211:58"><operator pos:start="211:38" pos:end="211:38">&amp;</operator><name pos:start="211:39" pos:end="211:58">address_space_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="221:13"><if pos:start="213:13" pos:end="221:13">if <condition pos:start="213:16" pos:end="213:33">(<expr pos:start="213:17" pos:end="213:32"><name pos:start="213:17" pos:end="213:32"><name pos:start="213:17" pos:end="213:25">container</name><operator pos:start="213:26" pos:end="213:27">-&gt;</operator><name pos:start="213:28" pos:end="213:32">error</name></name></expr>)</condition> <block pos:start="213:35" pos:end="221:13">{<block_content pos:start="215:17" pos:end="219:41">

                <expr_stmt pos:start="215:17" pos:end="215:72"><expr pos:start="215:17" pos:end="215:71"><call pos:start="215:17" pos:end="215:71"><name pos:start="215:17" pos:end="215:42">memory_listener_unregister</name><argument_list pos:start="215:43" pos:end="215:71">(<argument pos:start="215:44" pos:end="215:70"><expr pos:start="215:44" pos:end="215:70"><operator pos:start="215:44" pos:end="215:44">&amp;</operator><name pos:start="215:45" pos:end="215:70"><name pos:start="215:45" pos:end="215:53">container</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:70">prereg_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="217:17" pos:end="217:94"><expr pos:start="217:17" pos:end="217:93"><call pos:start="217:17" pos:end="217:93"><name pos:start="217:17" pos:end="217:28">error_report</name><argument_list pos:start="217:29" pos:end="217:93">(<argument pos:start="217:30" pos:end="217:92"><expr pos:start="217:30" pos:end="217:92"><literal type="string" pos:start="217:30" pos:end="217:92">"vfio: RAM memory listener initialization failed for container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="219:17" pos:end="219:41">goto <name pos:start="219:22" pos:end="219:40">free_container_exit</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="227:9" pos:end="235:11">/*

         * This only considers the host IOMMU's 32-bit window.  At

         * some point we need to add support for the optional 64-bit

         * window and dynamic windows

         */</comment>

        <expr_stmt pos:start="237:9" pos:end="237:34"><expr pos:start="237:9" pos:end="237:33"><name pos:start="237:9" pos:end="237:18"><name pos:start="237:9" pos:end="237:12">info</name><operator pos:start="237:13" pos:end="237:13">.</operator><name pos:start="237:14" pos:end="237:18">argsz</name></name> <operator pos:start="237:20" pos:end="237:20">=</operator> <sizeof pos:start="237:22" pos:end="237:33">sizeof<argument_list pos:start="237:28" pos:end="237:33">(<argument pos:start="237:29" pos:end="237:32"><expr pos:start="237:29" pos:end="237:32"><name pos:start="237:29" pos:end="237:32">info</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="239:9" pos:end="239:62"><expr pos:start="239:9" pos:end="239:61"><name pos:start="239:9" pos:end="239:11">ret</name> <operator pos:start="239:13" pos:end="239:13">=</operator> <call pos:start="239:15" pos:end="239:61"><name pos:start="239:15" pos:end="239:19">ioctl</name><argument_list pos:start="239:20" pos:end="239:61">(<argument pos:start="239:21" pos:end="239:22"><expr pos:start="239:21" pos:end="239:22"><name pos:start="239:21" pos:end="239:22">fd</name></expr></argument>, <argument pos:start="239:25" pos:end="239:53"><expr pos:start="239:25" pos:end="239:53"><name pos:start="239:25" pos:end="239:53">VFIO_IOMMU_SPAPR_TCE_GET_INFO</name></expr></argument>, <argument pos:start="239:56" pos:end="239:60"><expr pos:start="239:56" pos:end="239:60"><operator pos:start="239:56" pos:end="239:56">&amp;</operator><name pos:start="239:57" pos:end="239:60">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="241:9" pos:end="255:9"><if pos:start="241:9" pos:end="255:9">if <condition pos:start="241:12" pos:end="241:16">(<expr pos:start="241:13" pos:end="241:15"><name pos:start="241:13" pos:end="241:15">ret</name></expr>)</condition> <block pos:start="241:18" pos:end="255:9">{<block_content pos:start="243:13" pos:end="253:37">

            <expr_stmt pos:start="243:13" pos:end="243:75"><expr pos:start="243:13" pos:end="243:74"><call pos:start="243:13" pos:end="243:74"><name pos:start="243:13" pos:end="243:24">error_report</name><argument_list pos:start="243:25" pos:end="243:74">(<argument pos:start="243:26" pos:end="243:73"><expr pos:start="243:26" pos:end="243:73"><literal type="string" pos:start="243:26" pos:end="243:73">"vfio: VFIO_IOMMU_SPAPR_TCE_GET_INFO failed: %m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:25"><expr pos:start="245:13" pos:end="245:24"><name pos:start="245:13" pos:end="245:15">ret</name> <operator pos:start="245:17" pos:end="245:17">=</operator> <operator pos:start="245:19" pos:end="245:19">-</operator><name pos:start="245:20" pos:end="245:24">errno</name></expr>;</expr_stmt>

            <if_stmt pos:start="247:13" pos:end="251:13"><if pos:start="247:13" pos:end="251:13">if <condition pos:start="247:16" pos:end="247:19">(<expr pos:start="247:17" pos:end="247:18"><name pos:start="247:17" pos:end="247:18">v2</name></expr>)</condition> <block pos:start="247:21" pos:end="251:13">{<block_content pos:start="249:17" pos:end="249:72">

                <expr_stmt pos:start="249:17" pos:end="249:72"><expr pos:start="249:17" pos:end="249:71"><call pos:start="249:17" pos:end="249:71"><name pos:start="249:17" pos:end="249:42">memory_listener_unregister</name><argument_list pos:start="249:43" pos:end="249:71">(<argument pos:start="249:44" pos:end="249:70"><expr pos:start="249:44" pos:end="249:70"><operator pos:start="249:44" pos:end="249:44">&amp;</operator><name pos:start="249:45" pos:end="249:70"><name pos:start="249:45" pos:end="249:53">container</name><operator pos:start="249:54" pos:end="249:55">-&gt;</operator><name pos:start="249:56" pos:end="249:70">prereg_listener</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <goto pos:start="253:13" pos:end="253:37">goto <name pos:start="253:18" pos:end="253:36">free_container_exit</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="259:9" pos:end="259:45">/* The default table uses 4K pages */</comment>

        <expr_stmt pos:start="261:9" pos:end="267:34"><expr pos:start="261:9" pos:end="267:33"><call pos:start="261:9" pos:end="267:33"><name pos:start="261:9" pos:end="261:25">vfio_host_win_add</name><argument_list pos:start="261:26" pos:end="267:33">(<argument pos:start="261:27" pos:end="261:35"><expr pos:start="261:27" pos:end="261:35"><name pos:start="261:27" pos:end="261:35">container</name></expr></argument>, <argument pos:start="261:38" pos:end="261:60"><expr pos:start="261:38" pos:end="261:60"><name pos:start="261:38" pos:end="261:60"><name pos:start="261:38" pos:end="261:41">info</name><operator pos:start="261:42" pos:end="261:42">.</operator><name pos:start="261:43" pos:end="261:60">dma32_window_start</name></name></expr></argument>,

                          <argument pos:start="263:27" pos:end="265:52"><expr pos:start="263:27" pos:end="265:52"><name pos:start="263:27" pos:end="263:49"><name pos:start="263:27" pos:end="263:30">info</name><operator pos:start="263:31" pos:end="263:31">.</operator><name pos:start="263:32" pos:end="263:49">dma32_window_start</name></name> <operator pos:start="263:51" pos:end="263:51">+</operator>

                          <name pos:start="265:27" pos:end="265:48"><name pos:start="265:27" pos:end="265:30">info</name><operator pos:start="265:31" pos:end="265:31">.</operator><name pos:start="265:32" pos:end="265:48">dma32_window_size</name></name> <operator pos:start="265:50" pos:end="265:50">-</operator> <literal type="number" pos:start="265:52" pos:end="265:52">1</literal></expr></argument>,

                          <argument pos:start="267:27" pos:end="267:32"><expr pos:start="267:27" pos:end="267:32"><literal type="number" pos:start="267:27" pos:end="267:32">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="269:7" pos:end="277:5">else <block pos:start="269:12" pos:end="277:5">{<block_content pos:start="271:9" pos:end="275:33">

        <expr_stmt pos:start="271:9" pos:end="271:56"><expr pos:start="271:9" pos:end="271:55"><call pos:start="271:9" pos:end="271:55"><name pos:start="271:9" pos:end="271:20">error_report</name><argument_list pos:start="271:21" pos:end="271:55">(<argument pos:start="271:22" pos:end="271:54"><expr pos:start="271:22" pos:end="271:54"><literal type="string" pos:start="271:22" pos:end="271:54">"vfio: No available IOMMU models"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:22"><expr pos:start="273:9" pos:end="273:21"><name pos:start="273:9" pos:end="273:11">ret</name> <operator pos:start="273:13" pos:end="273:13">=</operator> <operator pos:start="273:15" pos:end="273:15">-</operator><name pos:start="273:16" pos:end="273:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="275:9" pos:end="275:33">goto <name pos:start="275:14" pos:end="275:32">free_container_exit</name>;</goto>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:47"><expr pos:start="281:5" pos:end="281:46"><name pos:start="281:5" pos:end="281:23"><name pos:start="281:5" pos:end="281:13">container</name><operator pos:start="281:14" pos:end="281:15">-&gt;</operator><name pos:start="281:16" pos:end="281:23">listener</name></name> <operator pos:start="281:25" pos:end="281:25">=</operator> <name pos:start="281:27" pos:end="281:46">vfio_memory_listener</name></expr>;</expr_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:73"><expr pos:start="285:5" pos:end="285:72"><call pos:start="285:5" pos:end="285:72"><name pos:start="285:5" pos:end="285:28">memory_listener_register</name><argument_list pos:start="285:29" pos:end="285:72">(<argument pos:start="285:30" pos:end="285:49"><expr pos:start="285:30" pos:end="285:49"><operator pos:start="285:30" pos:end="285:30">&amp;</operator><name pos:start="285:31" pos:end="285:49"><name pos:start="285:31" pos:end="285:39">container</name><operator pos:start="285:40" pos:end="285:41">-&gt;</operator><name pos:start="285:42" pos:end="285:49">listener</name></name></expr></argument>, <argument pos:start="285:52" pos:end="285:71"><expr pos:start="285:52" pos:end="285:71"><name pos:start="285:52" pos:end="285:71"><name pos:start="285:52" pos:end="285:60">container</name><operator pos:start="285:61" pos:end="285:62">-&gt;</operator><name pos:start="285:63" pos:end="285:67">space</name><operator pos:start="285:68" pos:end="285:69">-&gt;</operator><name pos:start="285:70" pos:end="285:71">as</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="289:5" pos:end="297:5"><if pos:start="289:5" pos:end="297:5">if <condition pos:start="289:8" pos:end="289:25">(<expr pos:start="289:9" pos:end="289:24"><name pos:start="289:9" pos:end="289:24"><name pos:start="289:9" pos:end="289:17">container</name><operator pos:start="289:18" pos:end="289:19">-&gt;</operator><name pos:start="289:20" pos:end="289:24">error</name></name></expr>)</condition> <block pos:start="289:27" pos:end="297:5">{<block_content pos:start="291:9" pos:end="295:35">

        <expr_stmt pos:start="291:9" pos:end="291:31"><expr pos:start="291:9" pos:end="291:30"><name pos:start="291:9" pos:end="291:11">ret</name> <operator pos:start="291:13" pos:end="291:13">=</operator> <name pos:start="291:15" pos:end="291:30"><name pos:start="291:15" pos:end="291:23">container</name><operator pos:start="291:24" pos:end="291:25">-&gt;</operator><name pos:start="291:26" pos:end="291:30">error</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:82"><expr pos:start="293:9" pos:end="293:81"><call pos:start="293:9" pos:end="293:81"><name pos:start="293:9" pos:end="293:20">error_report</name><argument_list pos:start="293:21" pos:end="293:81">(<argument pos:start="293:22" pos:end="293:80"><expr pos:start="293:22" pos:end="293:80"><literal type="string" pos:start="293:22" pos:end="293:80">"vfio: memory listener initialization failed for container"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="295:9" pos:end="295:35">goto <name pos:start="295:14" pos:end="295:34">listener_release_exit</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="301:5" pos:end="301:34"><expr pos:start="301:5" pos:end="301:33"><name pos:start="301:5" pos:end="301:26"><name pos:start="301:5" pos:end="301:13">container</name><operator pos:start="301:14" pos:end="301:15">-&gt;</operator><name pos:start="301:16" pos:end="301:26">initialized</name></name> <operator pos:start="301:28" pos:end="301:28">=</operator> <name pos:start="301:30" pos:end="301:33">true</name></expr>;</expr_stmt>



    <expr_stmt pos:start="305:5" pos:end="305:39"><expr pos:start="305:5" pos:end="305:38"><call pos:start="305:5" pos:end="305:38"><name pos:start="305:5" pos:end="305:14">QLIST_INIT</name><argument_list pos:start="305:15" pos:end="305:38">(<argument pos:start="305:16" pos:end="305:37"><expr pos:start="305:16" pos:end="305:37"><operator pos:start="305:16" pos:end="305:16">&amp;</operator><name pos:start="305:17" pos:end="305:37"><name pos:start="305:17" pos:end="305:25">container</name><operator pos:start="305:26" pos:end="305:27">-&gt;</operator><name pos:start="305:28" pos:end="305:37">group_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="307:5" pos:end="307:59"><expr pos:start="307:5" pos:end="307:58"><call pos:start="307:5" pos:end="307:58"><name pos:start="307:5" pos:end="307:21">QLIST_INSERT_HEAD</name><argument_list pos:start="307:22" pos:end="307:58">(<argument pos:start="307:23" pos:end="307:40"><expr pos:start="307:23" pos:end="307:40"><operator pos:start="307:23" pos:end="307:23">&amp;</operator><name pos:start="307:24" pos:end="307:40"><name pos:start="307:24" pos:end="307:28">space</name><operator pos:start="307:29" pos:end="307:30">-&gt;</operator><name pos:start="307:31" pos:end="307:40">containers</name></name></expr></argument>, <argument pos:start="307:43" pos:end="307:51"><expr pos:start="307:43" pos:end="307:51"><name pos:start="307:43" pos:end="307:51">container</name></expr></argument>, <argument pos:start="307:54" pos:end="307:57"><expr pos:start="307:54" pos:end="307:57"><name pos:start="307:54" pos:end="307:57">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="311:5" pos:end="311:33"><expr pos:start="311:5" pos:end="311:32"><name pos:start="311:5" pos:end="311:20"><name pos:start="311:5" pos:end="311:9">group</name><operator pos:start="311:10" pos:end="311:11">-&gt;</operator><name pos:start="311:12" pos:end="311:20">container</name></name> <operator pos:start="311:22" pos:end="311:22">=</operator> <name pos:start="311:24" pos:end="311:32">container</name></expr>;</expr_stmt>

    <expr_stmt pos:start="313:5" pos:end="313:69"><expr pos:start="313:5" pos:end="313:68"><call pos:start="313:5" pos:end="313:68"><name pos:start="313:5" pos:end="313:21">QLIST_INSERT_HEAD</name><argument_list pos:start="313:22" pos:end="313:68">(<argument pos:start="313:23" pos:end="313:44"><expr pos:start="313:23" pos:end="313:44"><operator pos:start="313:23" pos:end="313:23">&amp;</operator><name pos:start="313:24" pos:end="313:44"><name pos:start="313:24" pos:end="313:32">container</name><operator pos:start="313:33" pos:end="313:34">-&gt;</operator><name pos:start="313:35" pos:end="313:44">group_list</name></name></expr></argument>, <argument pos:start="313:47" pos:end="313:51"><expr pos:start="313:47" pos:end="313:51"><name pos:start="313:47" pos:end="313:51">group</name></expr></argument>, <argument pos:start="313:54" pos:end="313:67"><expr pos:start="313:54" pos:end="313:67"><name pos:start="313:54" pos:end="313:67">container_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="317:5" pos:end="317:13">return <expr pos:start="317:12" pos:end="317:12"><literal type="number" pos:start="317:12" pos:end="317:12">0</literal></expr>;</return>

<label pos:start="319:1" pos:end="319:22"><name pos:start="319:1" pos:end="319:21">listener_release_exit</name>:</label>

    <expr_stmt pos:start="321:5" pos:end="321:37"><expr pos:start="321:5" pos:end="321:36"><call pos:start="321:5" pos:end="321:36"><name pos:start="321:5" pos:end="321:25">vfio_listener_release</name><argument_list pos:start="321:26" pos:end="321:36">(<argument pos:start="321:27" pos:end="321:35"><expr pos:start="321:27" pos:end="321:35"><name pos:start="321:27" pos:end="321:35">container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="325:1" pos:end="325:20"><name pos:start="325:1" pos:end="325:19">free_container_exit</name>:</label>

    <expr_stmt pos:start="327:5" pos:end="327:22"><expr pos:start="327:5" pos:end="327:21"><call pos:start="327:5" pos:end="327:21"><name pos:start="327:5" pos:end="327:10">g_free</name><argument_list pos:start="327:11" pos:end="327:21">(<argument pos:start="327:12" pos:end="327:20"><expr pos:start="327:12" pos:end="327:20"><name pos:start="327:12" pos:end="327:20">container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="331:1" pos:end="331:14"><name pos:start="331:1" pos:end="331:13">close_fd_exit</name>:</label>

    <expr_stmt pos:start="333:5" pos:end="333:14"><expr pos:start="333:5" pos:end="333:13"><call pos:start="333:5" pos:end="333:13"><name pos:start="333:5" pos:end="333:9">close</name><argument_list pos:start="333:10" pos:end="333:13">(<argument pos:start="333:11" pos:end="333:12"><expr pos:start="333:11" pos:end="333:12"><name pos:start="333:11" pos:end="333:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<label pos:start="337:1" pos:end="337:15"><name pos:start="337:1" pos:end="337:14">put_space_exit</name>:</label>

    <expr_stmt pos:start="339:5" pos:end="339:34"><expr pos:start="339:5" pos:end="339:33"><call pos:start="339:5" pos:end="339:33"><name pos:start="339:5" pos:end="339:26">vfio_put_address_space</name><argument_list pos:start="339:27" pos:end="339:33">(<argument pos:start="339:28" pos:end="339:32"><expr pos:start="339:28" pos:end="339:32"><name pos:start="339:28" pos:end="339:32">space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="343:5" pos:end="343:15">return <expr pos:start="343:12" pos:end="343:14"><name pos:start="343:12" pos:end="343:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
