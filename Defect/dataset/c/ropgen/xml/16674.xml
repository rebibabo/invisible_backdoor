<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16674.c" pos:tabs="8"><function pos:start="1:1" pos:end="265:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:25">musicpal_init</name><parameter_list pos:start="1:26" pos:end="7:66">(<parameter pos:start="1:27" pos:end="1:45"><decl pos:start="1:27" pos:end="1:45"><type pos:start="1:27" pos:end="1:45"><name pos:start="1:27" pos:end="1:36">ram_addr_t</name></type> <name pos:start="1:38" pos:end="1:45">ram_size</name></decl></parameter>,

               <parameter pos:start="3:16" pos:end="3:38"><decl pos:start="3:16" pos:end="3:38"><type pos:start="3:16" pos:end="3:38"><specifier pos:start="3:16" pos:end="3:20">const</specifier> <name pos:start="3:22" pos:end="3:25">char</name> <modifier pos:start="3:27" pos:end="3:27">*</modifier></type><name pos:start="3:28" pos:end="3:38">boot_device</name></decl></parameter>,

               <parameter pos:start="5:16" pos:end="5:42"><decl pos:start="5:16" pos:end="5:42"><type pos:start="5:16" pos:end="5:42"><specifier pos:start="5:16" pos:end="5:20">const</specifier> <name pos:start="5:22" pos:end="5:25">char</name> <modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:42">kernel_filename</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:70"><decl pos:start="5:45" pos:end="5:70"><type pos:start="5:45" pos:end="5:70"><specifier pos:start="5:45" pos:end="5:49">const</specifier> <name pos:start="5:51" pos:end="5:54">char</name> <modifier pos:start="5:56" pos:end="5:56">*</modifier></type><name pos:start="5:57" pos:end="5:70">kernel_cmdline</name></decl></parameter>,

               <parameter pos:start="7:16" pos:end="7:42"><decl pos:start="7:16" pos:end="7:42"><type pos:start="7:16" pos:end="7:42"><specifier pos:start="7:16" pos:end="7:20">const</specifier> <name pos:start="7:22" pos:end="7:25">char</name> <modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:42">initrd_filename</name></decl></parameter>, <parameter pos:start="7:45" pos:end="7:65"><decl pos:start="7:45" pos:end="7:65"><type pos:start="7:45" pos:end="7:65"><specifier pos:start="7:45" pos:end="7:49">const</specifier> <name pos:start="7:51" pos:end="7:54">char</name> <modifier pos:start="7:56" pos:end="7:56">*</modifier></type><name pos:start="7:57" pos:end="7:65">cpu_model</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="265:1">{<block_content pos:start="11:5" pos:end="263:42">

    <decl_stmt pos:start="11:5" pos:end="11:18"><decl pos:start="11:5" pos:end="11:17"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">CPUState</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:17">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">qemu_irq</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:21">cpu_pic</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">qemu_irq</name></type> <name pos:start="15:14" pos:end="15:20"><name pos:start="15:14" pos:end="15:16">pic</name><index pos:start="15:17" pos:end="15:20">[<expr pos:start="15:18" pos:end="15:19"><literal type="number" pos:start="15:18" pos:end="15:19">32</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceState</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:20">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:17"><name pos:start="19:5" pos:end="19:15">DeviceState</name> <modifier pos:start="19:17" pos:end="19:17">*</modifier></type><name pos:start="19:18" pos:end="19:24">i2c_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">DeviceState</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:24">lcd_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="26:0"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:17"><name pos:start="23:5" pos:end="23:15">DeviceState</name> <modifier pos:start="23:17" pos:end="23:17">*</modifier></type><name pos:start="23:18" pos:end="23:24">key_dev</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="25:1" pos:end="25:16">#<cpp:directive pos:start="25:2" pos:end="25:6">ifdef</cpp:directive> <name pos:start="25:8" pos:end="25:16">HAS_AUDIO</name></cpp:ifdef>

    <decl_stmt pos:start="27:5" pos:end="27:28"><decl pos:start="27:5" pos:end="27:27"><type pos:start="27:5" pos:end="27:17"><name pos:start="27:5" pos:end="27:15">DeviceState</name> <modifier pos:start="27:17" pos:end="27:17">*</modifier></type><name pos:start="27:18" pos:end="27:27">wm8750_dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="32:0"><decl pos:start="29:5" pos:end="29:19"><type pos:start="29:5" pos:end="29:18"><name pos:start="29:5" pos:end="29:16">SysBusDevice</name> <modifier pos:start="29:18" pos:end="29:18">*</modifier></type><name pos:start="29:19" pos:end="29:19">s</name></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="33:5" pos:end="33:17"><decl pos:start="33:5" pos:end="33:16"><type pos:start="33:5" pos:end="33:13"><name pos:start="33:5" pos:end="33:11">i2c_bus</name> <modifier pos:start="33:13" pos:end="33:13">*</modifier></type><name pos:start="33:14" pos:end="33:16">i2c</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:10"><decl pos:start="35:5" pos:end="35:9"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:29"><decl pos:start="37:5" pos:end="37:28"><type pos:start="37:5" pos:end="37:17"><name pos:start="37:5" pos:end="37:12">unsigned</name> <name pos:start="37:14" pos:end="37:17">long</name></type> <name pos:start="37:19" pos:end="37:28">flash_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:21"><decl pos:start="39:5" pos:end="39:20"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">DriveInfo</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:24"><decl pos:start="41:5" pos:end="41:23"><type pos:start="41:5" pos:end="41:14"><name pos:start="41:5" pos:end="41:14">ram_addr_t</name></type> <name pos:start="41:16" pos:end="41:23">sram_off</name></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="49:5"><if pos:start="45:5" pos:end="49:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><operator pos:start="45:9" pos:end="45:9">!</operator><name pos:start="45:10" pos:end="45:18">cpu_model</name></expr>)</condition> <block pos:start="45:21" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:29">

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:17">cpu_model</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <literal type="string" pos:start="47:21" pos:end="47:28">"arm926"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:7">env</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:29"><name pos:start="51:11" pos:end="51:18">cpu_init</name><argument_list pos:start="51:19" pos:end="51:29">(<argument pos:start="51:20" pos:end="51:28"><expr pos:start="51:20" pos:end="51:28"><name pos:start="51:20" pos:end="51:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="59:5"><if pos:start="53:5" pos:end="59:5">if <condition pos:start="53:8" pos:end="53:13">(<expr pos:start="53:9" pos:end="53:12"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:12">env</name></expr>)</condition> <block pos:start="53:15" pos:end="59:5">{<block_content pos:start="55:9" pos:end="57:16">

        <expr_stmt pos:start="55:9" pos:end="55:59"><expr pos:start="55:9" pos:end="55:58"><call pos:start="55:9" pos:end="55:58"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="55:58">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:57"><expr pos:start="55:25" pos:end="55:57"><literal type="string" pos:start="55:25" pos:end="55:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:16"><expr pos:start="57:9" pos:end="57:15"><call pos:start="57:9" pos:end="57:15"><name pos:start="57:9" pos:end="57:12">exit</name><argument_list pos:start="57:13" pos:end="57:15">(<argument pos:start="57:14" pos:end="57:14"><expr pos:start="57:14" pos:end="57:14"><literal type="number" pos:start="57:14" pos:end="57:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:36"><expr pos:start="61:5" pos:end="61:35"><name pos:start="61:5" pos:end="61:11">cpu_pic</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:35"><name pos:start="61:15" pos:end="61:30">arm_pic_init_cpu</name><argument_list pos:start="61:31" pos:end="61:35">(<argument pos:start="61:32" pos:end="61:34"><expr pos:start="61:32" pos:end="61:34"><name pos:start="61:32" pos:end="61:34">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:58">/* For now we use a fixed - the original - RAM size */</comment>

    <expr_stmt pos:start="67:5" pos:end="69:70"><expr pos:start="67:5" pos:end="69:69"><call pos:start="67:5" pos:end="69:69"><name pos:start="67:5" pos:end="67:32">cpu_register_physical_memory</name><argument_list pos:start="67:33" pos:end="69:69">(<argument pos:start="67:34" pos:end="67:34"><expr pos:start="67:34" pos:end="67:34"><literal type="number" pos:start="67:34" pos:end="67:34">0</literal></expr></argument>, <argument pos:start="67:37" pos:end="67:55"><expr pos:start="67:37" pos:end="67:55"><name pos:start="67:37" pos:end="67:55">MP_RAM_DEFAULT_SIZE</name></expr></argument>,

                                 <argument pos:start="69:34" pos:end="69:68"><expr pos:start="69:34" pos:end="69:68"><call pos:start="69:34" pos:end="69:68"><name pos:start="69:34" pos:end="69:47">qemu_ram_alloc</name><argument_list pos:start="69:48" pos:end="69:68">(<argument pos:start="69:49" pos:end="69:67"><expr pos:start="69:49" pos:end="69:67"><name pos:start="69:49" pos:end="69:67">MP_RAM_DEFAULT_SIZE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:44"><expr pos:start="73:5" pos:end="73:43"><name pos:start="73:5" pos:end="73:12">sram_off</name> <operator pos:start="73:14" pos:end="73:14">=</operator> <call pos:start="73:16" pos:end="73:43"><name pos:start="73:16" pos:end="73:29">qemu_ram_alloc</name><argument_list pos:start="73:30" pos:end="73:43">(<argument pos:start="73:31" pos:end="73:42"><expr pos:start="73:31" pos:end="73:42"><name pos:start="73:31" pos:end="73:42">MP_SRAM_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:71"><expr pos:start="75:5" pos:end="75:70"><call pos:start="75:5" pos:end="75:70"><name pos:start="75:5" pos:end="75:32">cpu_register_physical_memory</name><argument_list pos:start="75:33" pos:end="75:70">(<argument pos:start="75:34" pos:end="75:45"><expr pos:start="75:34" pos:end="75:45"><name pos:start="75:34" pos:end="75:45">MP_SRAM_BASE</name></expr></argument>, <argument pos:start="75:48" pos:end="75:59"><expr pos:start="75:48" pos:end="75:59"><name pos:start="75:48" pos:end="75:59">MP_SRAM_SIZE</name></expr></argument>, <argument pos:start="75:62" pos:end="75:69"><expr pos:start="75:62" pos:end="75:69"><name pos:start="75:62" pos:end="75:69">sram_off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="79:5" pos:end="81:57"><expr pos:start="79:5" pos:end="81:56"><name pos:start="79:5" pos:end="79:7">dev</name> <operator pos:start="79:9" pos:end="79:9">=</operator> <call pos:start="79:11" pos:end="81:56"><name pos:start="79:11" pos:end="79:30">sysbus_create_simple</name><argument_list pos:start="79:31" pos:end="81:56">(<argument pos:start="79:32" pos:end="79:46"><expr pos:start="79:32" pos:end="79:46"><literal type="string" pos:start="79:32" pos:end="79:46">"mv88w8618_pic"</literal></expr></argument>, <argument pos:start="79:49" pos:end="79:59"><expr pos:start="79:49" pos:end="79:59"><name pos:start="79:49" pos:end="79:59">MP_PIC_BASE</name></expr></argument>,

                               <argument pos:start="81:32" pos:end="81:55"><expr pos:start="81:32" pos:end="81:55"><name pos:start="81:32" pos:end="81:55"><name pos:start="81:32" pos:end="81:38">cpu_pic</name><index pos:start="81:39" pos:end="81:55">[<expr pos:start="81:40" pos:end="81:54"><name pos:start="81:40" pos:end="81:54">ARM_PIC_CPU_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="83:5" pos:end="87:5">for <control pos:start="83:9" pos:end="83:28">(<init pos:start="83:10" pos:end="83:15"><expr pos:start="83:10" pos:end="83:14"><name pos:start="83:10" pos:end="83:10">i</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <literal type="number" pos:start="83:14" pos:end="83:14">0</literal></expr>;</init> <condition pos:start="83:17" pos:end="83:23"><expr pos:start="83:17" pos:end="83:22"><name pos:start="83:17" pos:end="83:17">i</name> <operator pos:start="83:19" pos:end="83:19">&lt;</operator> <literal type="number" pos:start="83:21" pos:end="83:22">32</literal></expr>;</condition> <incr pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:25">i</name><operator pos:start="83:26" pos:end="83:27">++</operator></expr></incr>)</control> <block pos:start="83:30" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:42">

        <expr_stmt pos:start="85:9" pos:end="85:42"><expr pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:14"><name pos:start="85:9" pos:end="85:11">pic</name><index pos:start="85:12" pos:end="85:14">[<expr pos:start="85:13" pos:end="85:13"><name pos:start="85:13" pos:end="85:13">i</name></expr>]</index></name> <operator pos:start="85:16" pos:end="85:16">=</operator> <call pos:start="85:18" pos:end="85:41"><name pos:start="85:18" pos:end="85:33">qdev_get_gpio_in</name><argument_list pos:start="85:34" pos:end="85:41">(<argument pos:start="85:35" pos:end="85:37"><expr pos:start="85:35" pos:end="85:37"><name pos:start="85:35" pos:end="85:37">dev</name></expr></argument>, <argument pos:start="85:40" pos:end="85:40"><expr pos:start="85:40" pos:end="85:40"><name pos:start="85:40" pos:end="85:40">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="89:5" pos:end="93:52"><expr pos:start="89:5" pos:end="93:51"><call pos:start="89:5" pos:end="93:51"><name pos:start="89:5" pos:end="89:25">sysbus_create_varargs</name><argument_list pos:start="89:26" pos:end="93:51">(<argument pos:start="89:27" pos:end="89:41"><expr pos:start="89:27" pos:end="89:41"><literal type="string" pos:start="89:27" pos:end="89:41">"mv88w8618_pit"</literal></expr></argument>, <argument pos:start="89:44" pos:end="89:54"><expr pos:start="89:44" pos:end="89:54"><name pos:start="89:44" pos:end="89:54">MP_PIT_BASE</name></expr></argument>, <argument pos:start="89:57" pos:end="89:74"><expr pos:start="89:57" pos:end="89:74"><name pos:start="89:57" pos:end="89:74"><name pos:start="89:57" pos:end="89:59">pic</name><index pos:start="89:60" pos:end="89:74">[<expr pos:start="89:61" pos:end="89:73"><name pos:start="89:61" pos:end="89:73">MP_TIMER1_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="91:27" pos:end="91:44"><expr pos:start="91:27" pos:end="91:44"><name pos:start="91:27" pos:end="91:44"><name pos:start="91:27" pos:end="91:29">pic</name><index pos:start="91:30" pos:end="91:44">[<expr pos:start="91:31" pos:end="91:43"><name pos:start="91:31" pos:end="91:43">MP_TIMER2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="91:47" pos:end="91:64"><expr pos:start="91:47" pos:end="91:64"><name pos:start="91:47" pos:end="91:64"><name pos:start="91:47" pos:end="91:49">pic</name><index pos:start="91:50" pos:end="91:64">[<expr pos:start="91:51" pos:end="91:63"><name pos:start="91:51" pos:end="91:63">MP_TIMER3_IRQ</name></expr>]</index></name></expr></argument>,

                          <argument pos:start="93:27" pos:end="93:44"><expr pos:start="93:27" pos:end="93:44"><name pos:start="93:27" pos:end="93:44"><name pos:start="93:27" pos:end="93:29">pic</name><index pos:start="93:30" pos:end="93:44">[<expr pos:start="93:31" pos:end="93:43"><name pos:start="93:31" pos:end="93:43">MP_TIMER4_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="93:47" pos:end="93:50"><expr pos:start="93:47" pos:end="93:50"><name pos:start="93:47" pos:end="93:50">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="103:5"><if pos:start="97:5" pos:end="103:5">if <condition pos:start="97:8" pos:end="97:22">(<expr pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:21"><name pos:start="97:9" pos:end="97:18">serial_hds</name><index pos:start="97:19" pos:end="97:21">[<expr pos:start="97:20" pos:end="97:20"><literal type="number" pos:start="97:20" pos:end="97:20">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="97:24" pos:end="103:5">{<block_content pos:start="99:9" pos:end="101:37">

        <expr_stmt pos:start="99:9" pos:end="101:37"><expr pos:start="99:9" pos:end="101:36"><call pos:start="99:9" pos:end="101:36"><name pos:start="99:9" pos:end="99:22">serial_mm_init</name><argument_list pos:start="99:23" pos:end="101:36">(<argument pos:start="99:24" pos:end="99:36"><expr pos:start="99:24" pos:end="99:36"><name pos:start="99:24" pos:end="99:36">MP_UART1_BASE</name></expr></argument>, <argument pos:start="99:39" pos:end="99:39"><expr pos:start="99:39" pos:end="99:39"><literal type="number" pos:start="99:39" pos:end="99:39">2</literal></expr></argument>, <argument pos:start="99:42" pos:end="99:58"><expr pos:start="99:42" pos:end="99:58"><name pos:start="99:42" pos:end="99:58"><name pos:start="99:42" pos:end="99:44">pic</name><index pos:start="99:45" pos:end="99:58">[<expr pos:start="99:46" pos:end="99:57"><name pos:start="99:46" pos:end="99:57">MP_UART1_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="99:61" pos:end="99:67"><expr pos:start="99:61" pos:end="99:67"><literal type="number" pos:start="99:61" pos:end="99:67">1825000</literal></expr></argument>,

                   <argument pos:start="101:20" pos:end="101:32"><expr pos:start="101:20" pos:end="101:32"><name pos:start="101:20" pos:end="101:32"><name pos:start="101:20" pos:end="101:29">serial_hds</name><index pos:start="101:30" pos:end="101:32">[<expr pos:start="101:31" pos:end="101:31"><literal type="number" pos:start="101:31" pos:end="101:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="101:35" pos:end="101:35"><expr pos:start="101:35" pos:end="101:35"><literal type="number" pos:start="101:35" pos:end="101:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="111:5"><if pos:start="105:5" pos:end="111:5">if <condition pos:start="105:8" pos:end="105:22">(<expr pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:18">serial_hds</name><index pos:start="105:19" pos:end="105:21">[<expr pos:start="105:20" pos:end="105:20"><literal type="number" pos:start="105:20" pos:end="105:20">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="105:24" pos:end="111:5">{<block_content pos:start="107:9" pos:end="109:37">

        <expr_stmt pos:start="107:9" pos:end="109:37"><expr pos:start="107:9" pos:end="109:36"><call pos:start="107:9" pos:end="109:36"><name pos:start="107:9" pos:end="107:22">serial_mm_init</name><argument_list pos:start="107:23" pos:end="109:36">(<argument pos:start="107:24" pos:end="107:36"><expr pos:start="107:24" pos:end="107:36"><name pos:start="107:24" pos:end="107:36">MP_UART2_BASE</name></expr></argument>, <argument pos:start="107:39" pos:end="107:39"><expr pos:start="107:39" pos:end="107:39"><literal type="number" pos:start="107:39" pos:end="107:39">2</literal></expr></argument>, <argument pos:start="107:42" pos:end="107:58"><expr pos:start="107:42" pos:end="107:58"><name pos:start="107:42" pos:end="107:58"><name pos:start="107:42" pos:end="107:44">pic</name><index pos:start="107:45" pos:end="107:58">[<expr pos:start="107:46" pos:end="107:57"><name pos:start="107:46" pos:end="107:57">MP_UART2_IRQ</name></expr>]</index></name></expr></argument>, <argument pos:start="107:61" pos:end="107:67"><expr pos:start="107:61" pos:end="107:67"><literal type="number" pos:start="107:61" pos:end="107:67">1825000</literal></expr></argument>,

                   <argument pos:start="109:20" pos:end="109:32"><expr pos:start="109:20" pos:end="109:32"><name pos:start="109:20" pos:end="109:32"><name pos:start="109:20" pos:end="109:29">serial_hds</name><index pos:start="109:30" pos:end="109:32">[<expr pos:start="109:31" pos:end="109:31"><literal type="number" pos:start="109:31" pos:end="109:31">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:35" pos:end="109:35"><expr pos:start="109:35" pos:end="109:35"><literal type="number" pos:start="109:35" pos:end="109:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:24">/* Register flash */</comment>

    <expr_stmt pos:start="117:5" pos:end="117:39"><expr pos:start="117:5" pos:end="117:38"><name pos:start="117:5" pos:end="117:9">dinfo</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <call pos:start="117:13" pos:end="117:38"><name pos:start="117:13" pos:end="117:21">drive_get</name><argument_list pos:start="117:22" pos:end="117:38">(<argument pos:start="117:23" pos:end="117:31"><expr pos:start="117:23" pos:end="117:31"><name pos:start="117:23" pos:end="117:31">IF_PFLASH</name></expr></argument>, <argument pos:start="117:34" pos:end="117:34"><expr pos:start="117:34" pos:end="117:34"><literal type="number" pos:start="117:34" pos:end="117:34">0</literal></expr></argument>, <argument pos:start="117:37" pos:end="117:37"><expr pos:start="117:37" pos:end="117:37"><literal type="number" pos:start="117:37" pos:end="117:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="119:5" pos:end="157:5"><if pos:start="119:5" pos:end="157:5">if <condition pos:start="119:8" pos:end="119:14">(<expr pos:start="119:9" pos:end="119:13"><name pos:start="119:9" pos:end="119:13">dinfo</name></expr>)</condition> <block pos:start="119:16" pos:end="157:5">{<block_content pos:start="121:9" pos:end="155:46">

        <expr_stmt pos:start="121:9" pos:end="121:49"><expr pos:start="121:9" pos:end="121:48"><name pos:start="121:9" pos:end="121:18">flash_size</name> <operator pos:start="121:20" pos:end="121:20">=</operator> <call pos:start="121:22" pos:end="121:48"><name pos:start="121:22" pos:end="121:35">bdrv_getlength</name><argument_list pos:start="121:36" pos:end="121:48">(<argument pos:start="121:37" pos:end="121:47"><expr pos:start="121:37" pos:end="121:47"><name pos:start="121:37" pos:end="121:47"><name pos:start="121:37" pos:end="121:41">dinfo</name><operator pos:start="121:42" pos:end="121:43">-&gt;</operator><name pos:start="121:44" pos:end="121:47">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="123:9" pos:end="131:9"><if pos:start="123:9" pos:end="131:9">if <condition pos:start="123:12" pos:end="125:39">(<expr pos:start="123:13" pos:end="125:38"><name pos:start="123:13" pos:end="123:22">flash_size</name> <operator pos:start="123:24" pos:end="123:25">!=</operator> <literal type="number" pos:start="123:27" pos:end="123:27">8</literal><operator pos:start="123:28" pos:end="123:28">*</operator><literal type="number" pos:start="123:29" pos:end="123:32">1024</literal><operator pos:start="123:33" pos:end="123:33">*</operator><literal type="number" pos:start="123:34" pos:end="123:37">1024</literal> <operator pos:start="123:39" pos:end="123:40">&amp;&amp;</operator> <name pos:start="123:42" pos:end="123:51">flash_size</name> <operator pos:start="123:53" pos:end="123:54">!=</operator> <literal type="number" pos:start="123:56" pos:end="123:57">16</literal><operator pos:start="123:58" pos:end="123:58">*</operator><literal type="number" pos:start="123:59" pos:end="123:62">1024</literal><operator pos:start="123:63" pos:end="123:63">*</operator><literal type="number" pos:start="123:64" pos:end="123:67">1024</literal> <operator pos:start="123:69" pos:end="123:70">&amp;&amp;</operator>

            <name pos:start="125:13" pos:end="125:22">flash_size</name> <operator pos:start="125:24" pos:end="125:25">!=</operator> <literal type="number" pos:start="125:27" pos:end="125:28">32</literal><operator pos:start="125:29" pos:end="125:29">*</operator><literal type="number" pos:start="125:30" pos:end="125:33">1024</literal><operator pos:start="125:34" pos:end="125:34">*</operator><literal type="number" pos:start="125:35" pos:end="125:38">1024</literal></expr>)</condition> <block pos:start="125:41" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:20">

            <expr_stmt pos:start="127:13" pos:end="127:58"><expr pos:start="127:13" pos:end="127:57"><call pos:start="127:13" pos:end="127:57"><name pos:start="127:13" pos:end="127:19">fprintf</name><argument_list pos:start="127:20" pos:end="127:57">(<argument pos:start="127:21" pos:end="127:26"><expr pos:start="127:21" pos:end="127:26"><name pos:start="127:21" pos:end="127:26">stderr</name></expr></argument>, <argument pos:start="127:29" pos:end="127:56"><expr pos:start="127:29" pos:end="127:56"><literal type="string" pos:start="127:29" pos:end="127:56">"Invalid flash image size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:20"><expr pos:start="129:13" pos:end="129:19"><call pos:start="129:13" pos:end="129:19"><name pos:start="129:13" pos:end="129:16">exit</name><argument_list pos:start="129:17" pos:end="129:19">(<argument pos:start="129:18" pos:end="129:18"><expr pos:start="129:18" pos:end="129:18"><literal type="number" pos:start="129:18" pos:end="129:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="135:9" pos:end="143:11">/*

         * The original U-Boot accesses the flash at 0xFE000000 instead of

         * 0xFF800000 (if there is 8 MB flash). So remap flash access if the

         * image is smaller than 32 MB.

         */</comment>

        <expr_stmt pos:start="145:9" pos:end="155:46"><expr pos:start="145:9" pos:end="155:45"><call pos:start="145:9" pos:end="155:45"><name pos:start="145:9" pos:end="145:29">pflash_cfi02_register</name><argument_list pos:start="145:30" pos:end="155:45">(<argument pos:start="145:31" pos:end="145:49"><expr pos:start="145:31" pos:end="145:49"><literal type="number" pos:start="145:31" pos:end="145:32">0</literal><operator pos:start="145:32" pos:end="145:32">-</operator><name pos:start="145:33" pos:end="145:49">MP_FLASH_SIZE_MAX</name></expr></argument>, <argument pos:start="145:52" pos:end="145:77"><expr pos:start="145:52" pos:end="145:77"><call pos:start="145:52" pos:end="145:77"><name pos:start="145:52" pos:end="145:65">qemu_ram_alloc</name><argument_list pos:start="145:66" pos:end="145:77">(<argument pos:start="145:67" pos:end="145:76"><expr pos:start="145:67" pos:end="145:76"><name pos:start="145:67" pos:end="145:76">flash_size</name></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="147:31" pos:end="147:41"><expr pos:start="147:31" pos:end="147:41"><name pos:start="147:31" pos:end="147:41"><name pos:start="147:31" pos:end="147:35">dinfo</name><operator pos:start="147:36" pos:end="147:37">-&gt;</operator><name pos:start="147:38" pos:end="147:41">bdrv</name></name></expr></argument>, <argument pos:start="147:44" pos:end="147:50"><expr pos:start="147:44" pos:end="147:50"><literal type="number" pos:start="147:44" pos:end="147:50">0x10000</literal></expr></argument>,

                              <argument pos:start="149:31" pos:end="149:57"><expr pos:start="149:31" pos:end="149:57"><operator pos:start="149:31" pos:end="149:31">(</operator><name pos:start="149:32" pos:end="149:41">flash_size</name> <operator pos:start="149:43" pos:end="149:43">+</operator> <literal type="number" pos:start="149:45" pos:end="149:50">0xffff</literal><operator pos:start="149:51" pos:end="149:51">)</operator> <operator pos:start="149:53" pos:end="149:54">&gt;&gt;</operator> <literal type="number" pos:start="149:56" pos:end="149:57">16</literal></expr></argument>,

                              <argument pos:start="151:31" pos:end="151:60"><expr pos:start="151:31" pos:end="151:60"><name pos:start="151:31" pos:end="151:47">MP_FLASH_SIZE_MAX</name> <operator pos:start="151:49" pos:end="151:49">/</operator> <name pos:start="151:51" pos:end="151:60">flash_size</name></expr></argument>,

                              <argument pos:start="153:31" pos:end="153:31"><expr pos:start="153:31" pos:end="153:31"><literal type="number" pos:start="153:31" pos:end="153:31">2</literal></expr></argument>, <argument pos:start="153:34" pos:end="153:39"><expr pos:start="153:34" pos:end="153:39"><literal type="number" pos:start="153:34" pos:end="153:39">0x00BF</literal></expr></argument>, <argument pos:start="153:42" pos:end="153:47"><expr pos:start="153:42" pos:end="153:47"><literal type="number" pos:start="153:42" pos:end="153:47">0x236D</literal></expr></argument>, <argument pos:start="153:50" pos:end="153:55"><expr pos:start="153:50" pos:end="153:55"><literal type="number" pos:start="153:50" pos:end="153:55">0x0000</literal></expr></argument>, <argument pos:start="153:58" pos:end="153:63"><expr pos:start="153:58" pos:end="153:63"><literal type="number" pos:start="153:58" pos:end="153:63">0x0000</literal></expr></argument>,

                              <argument pos:start="155:31" pos:end="155:36"><expr pos:start="155:31" pos:end="155:36"><literal type="number" pos:start="155:31" pos:end="155:36">0x5555</literal></expr></argument>, <argument pos:start="155:39" pos:end="155:44"><expr pos:start="155:39" pos:end="155:44"><literal type="number" pos:start="155:39" pos:end="155:44">0x2AAA</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:71"><expr pos:start="159:5" pos:end="159:70"><call pos:start="159:5" pos:end="159:70"><name pos:start="159:5" pos:end="159:24">sysbus_create_simple</name><argument_list pos:start="159:25" pos:end="159:70">(<argument pos:start="159:26" pos:end="159:45"><expr pos:start="159:26" pos:end="159:45"><literal type="string" pos:start="159:26" pos:end="159:45">"mv88w8618_flashcfg"</literal></expr></argument>, <argument pos:start="159:48" pos:end="159:63"><expr pos:start="159:48" pos:end="159:63"><name pos:start="159:48" pos:end="159:63">MP_FLASHCFG_BASE</name></expr></argument>, <argument pos:start="159:66" pos:end="159:69"><expr pos:start="159:66" pos:end="159:69"><name pos:start="159:66" pos:end="159:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:52"><expr pos:start="163:5" pos:end="163:51"><call pos:start="163:5" pos:end="163:51"><name pos:start="163:5" pos:end="163:24">qemu_check_nic_model</name><argument_list pos:start="163:25" pos:end="163:51">(<argument pos:start="163:26" pos:end="163:37"><expr pos:start="163:26" pos:end="163:37"><operator pos:start="163:26" pos:end="163:26">&amp;</operator><name pos:start="163:27" pos:end="163:37"><name pos:start="163:27" pos:end="163:34">nd_table</name><index pos:start="163:35" pos:end="163:37">[<expr pos:start="163:36" pos:end="163:36"><literal type="number" pos:start="163:36" pos:end="163:36">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="163:40" pos:end="163:50"><expr pos:start="163:40" pos:end="163:50"><literal type="string" pos:start="163:40" pos:end="163:50">"mv88w8618"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="165:5" pos:end="165:45"><expr pos:start="165:5" pos:end="165:44"><name pos:start="165:5" pos:end="165:7">dev</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:44"><name pos:start="165:11" pos:end="165:21">qdev_create</name><argument_list pos:start="165:22" pos:end="165:44">(<argument pos:start="165:23" pos:end="165:26"><expr pos:start="165:23" pos:end="165:26"><name pos:start="165:23" pos:end="165:26">NULL</name></expr></argument>, <argument pos:start="165:29" pos:end="165:43"><expr pos:start="165:29" pos:end="165:43"><literal type="string" pos:start="165:29" pos:end="165:43">"mv88w8618_eth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:27"><expr pos:start="167:5" pos:end="167:26"><name pos:start="167:5" pos:end="167:11"><name pos:start="167:5" pos:end="167:7">dev</name><operator pos:start="167:8" pos:end="167:9">-&gt;</operator><name pos:start="167:10" pos:end="167:11">nd</name></name> <operator pos:start="167:13" pos:end="167:13">=</operator> <operator pos:start="167:15" pos:end="167:15">&amp;</operator><name pos:start="167:16" pos:end="167:26"><name pos:start="167:16" pos:end="167:23">nd_table</name><index pos:start="167:24" pos:end="167:26">[<expr pos:start="167:25" pos:end="167:25"><literal type="number" pos:start="167:25" pos:end="167:25">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:19"><expr pos:start="169:5" pos:end="169:18"><call pos:start="169:5" pos:end="169:18"><name pos:start="169:5" pos:end="169:13">qdev_init</name><argument_list pos:start="169:14" pos:end="169:18">(<argument pos:start="169:15" pos:end="169:17"><expr pos:start="169:15" pos:end="169:17"><name pos:start="169:15" pos:end="169:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:59"><expr pos:start="171:5" pos:end="171:58"><call pos:start="171:5" pos:end="171:58"><name pos:start="171:5" pos:end="171:19">sysbus_mmio_map</name><argument_list pos:start="171:20" pos:end="171:58">(<argument pos:start="171:21" pos:end="171:41"><expr pos:start="171:21" pos:end="171:41"><call pos:start="171:21" pos:end="171:41"><name pos:start="171:21" pos:end="171:36">sysbus_from_qdev</name><argument_list pos:start="171:37" pos:end="171:41">(<argument pos:start="171:38" pos:end="171:40"><expr pos:start="171:38" pos:end="171:40"><name pos:start="171:38" pos:end="171:40">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="171:44" pos:end="171:44"><expr pos:start="171:44" pos:end="171:44"><literal type="number" pos:start="171:44" pos:end="171:44">0</literal></expr></argument>, <argument pos:start="171:47" pos:end="171:57"><expr pos:start="171:47" pos:end="171:57"><name pos:start="171:47" pos:end="171:57">MP_ETH_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:66"><expr pos:start="173:5" pos:end="173:65"><call pos:start="173:5" pos:end="173:65"><name pos:start="173:5" pos:end="173:22">sysbus_connect_irq</name><argument_list pos:start="173:23" pos:end="173:65">(<argument pos:start="173:24" pos:end="173:44"><expr pos:start="173:24" pos:end="173:44"><call pos:start="173:24" pos:end="173:44"><name pos:start="173:24" pos:end="173:39">sysbus_from_qdev</name><argument_list pos:start="173:40" pos:end="173:44">(<argument pos:start="173:41" pos:end="173:43"><expr pos:start="173:41" pos:end="173:43"><name pos:start="173:41" pos:end="173:43">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="173:47" pos:end="173:47"><expr pos:start="173:47" pos:end="173:47"><literal type="number" pos:start="173:47" pos:end="173:47">0</literal></expr></argument>, <argument pos:start="173:50" pos:end="173:64"><expr pos:start="173:50" pos:end="173:64"><name pos:start="173:50" pos:end="173:64"><name pos:start="173:50" pos:end="173:52">pic</name><index pos:start="173:53" pos:end="173:64">[<expr pos:start="173:54" pos:end="173:63"><name pos:start="173:54" pos:end="173:63">MP_ETH_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:63"><expr pos:start="177:5" pos:end="177:62"><call pos:start="177:5" pos:end="177:62"><name pos:start="177:5" pos:end="177:24">sysbus_create_simple</name><argument_list pos:start="177:25" pos:end="177:62">(<argument pos:start="177:26" pos:end="177:41"><expr pos:start="177:26" pos:end="177:41"><literal type="string" pos:start="177:26" pos:end="177:41">"mv88w8618_wlan"</literal></expr></argument>, <argument pos:start="177:44" pos:end="177:55"><expr pos:start="177:44" pos:end="177:55"><name pos:start="177:44" pos:end="177:55">MP_WLAN_BASE</name></expr></argument>, <argument pos:start="177:58" pos:end="177:61"><expr pos:start="177:58" pos:end="177:61"><name pos:start="177:58" pos:end="177:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:25"><expr pos:start="181:5" pos:end="181:24"><call pos:start="181:5" pos:end="181:24"><name pos:start="181:5" pos:end="181:22">musicpal_misc_init</name><argument_list pos:start="181:23" pos:end="181:24">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:80"><expr pos:start="185:5" pos:end="185:79"><name pos:start="185:5" pos:end="185:7">dev</name> <operator pos:start="185:9" pos:end="185:9">=</operator> <call pos:start="185:11" pos:end="185:79"><name pos:start="185:11" pos:end="185:30">sysbus_create_simple</name><argument_list pos:start="185:31" pos:end="185:79">(<argument pos:start="185:32" pos:end="185:46"><expr pos:start="185:32" pos:end="185:46"><literal type="string" pos:start="185:32" pos:end="185:46">"musicpal_gpio"</literal></expr></argument>, <argument pos:start="185:49" pos:end="185:60"><expr pos:start="185:49" pos:end="185:60"><name pos:start="185:49" pos:end="185:60">MP_GPIO_BASE</name></expr></argument>, <argument pos:start="185:63" pos:end="185:78"><expr pos:start="185:63" pos:end="185:78"><name pos:start="185:63" pos:end="185:78"><name pos:start="185:63" pos:end="185:65">pic</name><index pos:start="185:66" pos:end="185:78">[<expr pos:start="185:67" pos:end="185:77"><name pos:start="185:67" pos:end="185:77">MP_GPIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:59"><expr pos:start="187:5" pos:end="187:58"><name pos:start="187:5" pos:end="187:11">i2c_dev</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:58"><name pos:start="187:15" pos:end="187:34">sysbus_create_simple</name><argument_list pos:start="187:35" pos:end="187:58">(<argument pos:start="187:36" pos:end="187:48"><expr pos:start="187:36" pos:end="187:48"><literal type="string" pos:start="187:36" pos:end="187:48">"bitbang_i2c"</literal></expr></argument>, <argument pos:start="187:51" pos:end="187:51"><expr pos:start="187:51" pos:end="187:51"><literal type="number" pos:start="187:51" pos:end="187:51">0</literal></expr></argument>, <argument pos:start="187:54" pos:end="187:57"><expr pos:start="187:54" pos:end="187:57"><name pos:start="187:54" pos:end="187:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:56"><expr pos:start="189:5" pos:end="189:55"><name pos:start="189:5" pos:end="189:7">i2c</name> <operator pos:start="189:9" pos:end="189:9">=</operator> <operator pos:start="189:11" pos:end="189:11">(</operator><name pos:start="189:12" pos:end="189:18">i2c_bus</name> <operator pos:start="189:20" pos:end="189:20">*</operator><operator pos:start="189:21" pos:end="189:21">)</operator><call pos:start="189:22" pos:end="189:55"><name pos:start="189:22" pos:end="189:39">qdev_get_child_bus</name><argument_list pos:start="189:40" pos:end="189:55">(<argument pos:start="189:41" pos:end="189:47"><expr pos:start="189:41" pos:end="189:47"><name pos:start="189:41" pos:end="189:47">i2c_dev</name></expr></argument>, <argument pos:start="189:50" pos:end="189:54"><expr pos:start="189:50" pos:end="189:54"><literal type="string" pos:start="189:50" pos:end="189:54">"i2c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="193:5" pos:end="193:70"><expr pos:start="193:5" pos:end="193:69"><name pos:start="193:5" pos:end="193:11">lcd_dev</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="193:69"><name pos:start="193:15" pos:end="193:34">sysbus_create_simple</name><argument_list pos:start="193:35" pos:end="193:69">(<argument pos:start="193:36" pos:end="193:49"><expr pos:start="193:36" pos:end="193:49"><literal type="string" pos:start="193:36" pos:end="193:49">"musicpal_lcd"</literal></expr></argument>, <argument pos:start="193:52" pos:end="193:62"><expr pos:start="193:52" pos:end="193:62"><name pos:start="193:52" pos:end="193:62">MP_LCD_BASE</name></expr></argument>, <argument pos:start="193:65" pos:end="193:68"><expr pos:start="193:65" pos:end="193:68"><name pos:start="193:65" pos:end="193:68">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:60"><expr pos:start="195:5" pos:end="195:59"><name pos:start="195:5" pos:end="195:11">key_dev</name> <operator pos:start="195:13" pos:end="195:13">=</operator> <call pos:start="195:15" pos:end="195:59"><name pos:start="195:15" pos:end="195:34">sysbus_create_simple</name><argument_list pos:start="195:35" pos:end="195:59">(<argument pos:start="195:36" pos:end="195:49"><expr pos:start="195:36" pos:end="195:49"><literal type="string" pos:start="195:36" pos:end="195:49">"musicpal_key"</literal></expr></argument>, <argument pos:start="195:52" pos:end="195:52"><expr pos:start="195:52" pos:end="195:52"><literal type="number" pos:start="195:52" pos:end="195:52">0</literal></expr></argument>, <argument pos:start="195:55" pos:end="195:58"><expr pos:start="195:55" pos:end="195:58"><name pos:start="195:55" pos:end="195:58">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:23">/* I2C read data */</comment>

    <expr_stmt pos:start="201:5" pos:end="203:71"><expr pos:start="201:5" pos:end="203:70"><call pos:start="201:5" pos:end="203:70"><name pos:start="201:5" pos:end="201:25">qdev_connect_gpio_out</name><argument_list pos:start="201:26" pos:end="203:70">(<argument pos:start="201:27" pos:end="201:33"><expr pos:start="201:27" pos:end="201:33"><name pos:start="201:27" pos:end="201:33">i2c_dev</name></expr></argument>, <argument pos:start="201:36" pos:end="201:36"><expr pos:start="201:36" pos:end="201:36"><literal type="number" pos:start="201:36" pos:end="201:36">0</literal></expr></argument>,

                          <argument pos:start="203:27" pos:end="203:69"><expr pos:start="203:27" pos:end="203:69"><call pos:start="203:27" pos:end="203:69"><name pos:start="203:27" pos:end="203:42">qdev_get_gpio_in</name><argument_list pos:start="203:43" pos:end="203:69">(<argument pos:start="203:44" pos:end="203:46"><expr pos:start="203:44" pos:end="203:46"><name pos:start="203:44" pos:end="203:46">dev</name></expr></argument>, <argument pos:start="203:49" pos:end="203:68"><expr pos:start="203:49" pos:end="203:68"><name pos:start="203:49" pos:end="203:68">MP_GPIO_I2C_DATA_BIT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="205:5" pos:end="205:18">/* I2C data */</comment>

    <expr_stmt pos:start="207:5" pos:end="207:64"><expr pos:start="207:5" pos:end="207:63"><call pos:start="207:5" pos:end="207:63"><name pos:start="207:5" pos:end="207:25">qdev_connect_gpio_out</name><argument_list pos:start="207:26" pos:end="207:63">(<argument pos:start="207:27" pos:end="207:29"><expr pos:start="207:27" pos:end="207:29"><name pos:start="207:27" pos:end="207:29">dev</name></expr></argument>, <argument pos:start="207:32" pos:end="207:32"><expr pos:start="207:32" pos:end="207:32"><literal type="number" pos:start="207:32" pos:end="207:32">3</literal></expr></argument>, <argument pos:start="207:35" pos:end="207:62"><expr pos:start="207:35" pos:end="207:62"><call pos:start="207:35" pos:end="207:62"><name pos:start="207:35" pos:end="207:50">qdev_get_gpio_in</name><argument_list pos:start="207:51" pos:end="207:62">(<argument pos:start="207:52" pos:end="207:58"><expr pos:start="207:52" pos:end="207:58"><name pos:start="207:52" pos:end="207:58">i2c_dev</name></expr></argument>, <argument pos:start="207:61" pos:end="207:61"><expr pos:start="207:61" pos:end="207:61"><literal type="number" pos:start="207:61" pos:end="207:61">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="209:5" pos:end="209:19">/* I2C clock */</comment>

    <expr_stmt pos:start="211:5" pos:end="211:64"><expr pos:start="211:5" pos:end="211:63"><call pos:start="211:5" pos:end="211:63"><name pos:start="211:5" pos:end="211:25">qdev_connect_gpio_out</name><argument_list pos:start="211:26" pos:end="211:63">(<argument pos:start="211:27" pos:end="211:29"><expr pos:start="211:27" pos:end="211:29"><name pos:start="211:27" pos:end="211:29">dev</name></expr></argument>, <argument pos:start="211:32" pos:end="211:32"><expr pos:start="211:32" pos:end="211:32"><literal type="number" pos:start="211:32" pos:end="211:32">4</literal></expr></argument>, <argument pos:start="211:35" pos:end="211:62"><expr pos:start="211:35" pos:end="211:62"><call pos:start="211:35" pos:end="211:62"><name pos:start="211:35" pos:end="211:50">qdev_get_gpio_in</name><argument_list pos:start="211:51" pos:end="211:62">(<argument pos:start="211:52" pos:end="211:58"><expr pos:start="211:52" pos:end="211:58"><name pos:start="211:52" pos:end="211:58">i2c_dev</name></expr></argument>, <argument pos:start="211:61" pos:end="211:61"><expr pos:start="211:61" pos:end="211:61"><literal type="number" pos:start="211:61" pos:end="211:61">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="215:5" pos:end="219:5">for <control pos:start="215:9" pos:end="215:27">(<init pos:start="215:10" pos:end="215:15"><expr pos:start="215:10" pos:end="215:14"><name pos:start="215:10" pos:end="215:10">i</name> <operator pos:start="215:12" pos:end="215:12">=</operator> <literal type="number" pos:start="215:14" pos:end="215:14">0</literal></expr>;</init> <condition pos:start="215:17" pos:end="215:22"><expr pos:start="215:17" pos:end="215:21"><name pos:start="215:17" pos:end="215:17">i</name> <operator pos:start="215:19" pos:end="215:19">&lt;</operator> <literal type="number" pos:start="215:21" pos:end="215:21">3</literal></expr>;</condition> <incr pos:start="215:24" pos:end="215:26"><expr pos:start="215:24" pos:end="215:26"><name pos:start="215:24" pos:end="215:24">i</name><operator pos:start="215:25" pos:end="215:26">++</operator></expr></incr>)</control> <block pos:start="215:29" pos:end="219:5">{<block_content pos:start="217:9" pos:end="217:68">

        <expr_stmt pos:start="217:9" pos:end="217:68"><expr pos:start="217:9" pos:end="217:67"><call pos:start="217:9" pos:end="217:67"><name pos:start="217:9" pos:end="217:29">qdev_connect_gpio_out</name><argument_list pos:start="217:30" pos:end="217:67">(<argument pos:start="217:31" pos:end="217:33"><expr pos:start="217:31" pos:end="217:33"><name pos:start="217:31" pos:end="217:33">dev</name></expr></argument>, <argument pos:start="217:36" pos:end="217:36"><expr pos:start="217:36" pos:end="217:36"><name pos:start="217:36" pos:end="217:36">i</name></expr></argument>, <argument pos:start="217:39" pos:end="217:66"><expr pos:start="217:39" pos:end="217:66"><call pos:start="217:39" pos:end="217:66"><name pos:start="217:39" pos:end="217:54">qdev_get_gpio_in</name><argument_list pos:start="217:55" pos:end="217:66">(<argument pos:start="217:56" pos:end="217:62"><expr pos:start="217:56" pos:end="217:62"><name pos:start="217:56" pos:end="217:62">lcd_dev</name></expr></argument>, <argument pos:start="217:65" pos:end="217:65"><expr pos:start="217:65" pos:end="217:65"><name pos:start="217:65" pos:end="217:65">i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="221:5" pos:end="225:5">for <control pos:start="221:9" pos:end="221:27">(<init pos:start="221:10" pos:end="221:15"><expr pos:start="221:10" pos:end="221:14"><name pos:start="221:10" pos:end="221:10">i</name> <operator pos:start="221:12" pos:end="221:12">=</operator> <literal type="number" pos:start="221:14" pos:end="221:14">0</literal></expr>;</init> <condition pos:start="221:17" pos:end="221:22"><expr pos:start="221:17" pos:end="221:21"><name pos:start="221:17" pos:end="221:17">i</name> <operator pos:start="221:19" pos:end="221:19">&lt;</operator> <literal type="number" pos:start="221:21" pos:end="221:21">4</literal></expr>;</condition> <incr pos:start="221:24" pos:end="221:26"><expr pos:start="221:24" pos:end="221:26"><name pos:start="221:24" pos:end="221:24">i</name><operator pos:start="221:25" pos:end="221:26">++</operator></expr></incr>)</control> <block pos:start="221:29" pos:end="225:5">{<block_content pos:start="223:9" pos:end="223:72">

        <expr_stmt pos:start="223:9" pos:end="223:72"><expr pos:start="223:9" pos:end="223:71"><call pos:start="223:9" pos:end="223:71"><name pos:start="223:9" pos:end="223:29">qdev_connect_gpio_out</name><argument_list pos:start="223:30" pos:end="223:71">(<argument pos:start="223:31" pos:end="223:37"><expr pos:start="223:31" pos:end="223:37"><name pos:start="223:31" pos:end="223:37">key_dev</name></expr></argument>, <argument pos:start="223:40" pos:end="223:40"><expr pos:start="223:40" pos:end="223:40"><name pos:start="223:40" pos:end="223:40">i</name></expr></argument>, <argument pos:start="223:43" pos:end="223:70"><expr pos:start="223:43" pos:end="223:70"><call pos:start="223:43" pos:end="223:70"><name pos:start="223:43" pos:end="223:58">qdev_get_gpio_in</name><argument_list pos:start="223:59" pos:end="223:70">(<argument pos:start="223:60" pos:end="223:62"><expr pos:start="223:60" pos:end="223:62"><name pos:start="223:60" pos:end="223:62">dev</name></expr></argument>, <argument pos:start="223:65" pos:end="223:69"><expr pos:start="223:65" pos:end="223:69"><name pos:start="223:65" pos:end="223:65">i</name> <operator pos:start="223:67" pos:end="223:67">+</operator> <literal type="number" pos:start="223:69" pos:end="223:69">8</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <for pos:start="227:5" pos:end="236:0">for <control pos:start="227:9" pos:end="227:27">(<init pos:start="227:10" pos:end="227:15"><expr pos:start="227:10" pos:end="227:14"><name pos:start="227:10" pos:end="227:10">i</name> <operator pos:start="227:12" pos:end="227:12">=</operator> <literal type="number" pos:start="227:14" pos:end="227:14">4</literal></expr>;</init> <condition pos:start="227:17" pos:end="227:22"><expr pos:start="227:17" pos:end="227:21"><name pos:start="227:17" pos:end="227:17">i</name> <operator pos:start="227:19" pos:end="227:19">&lt;</operator> <literal type="number" pos:start="227:21" pos:end="227:21">8</literal></expr>;</condition> <incr pos:start="227:24" pos:end="227:26"><expr pos:start="227:24" pos:end="227:26"><name pos:start="227:24" pos:end="227:24">i</name><operator pos:start="227:25" pos:end="227:26">++</operator></expr></incr>)</control> <block pos:start="227:29" pos:end="236:0">{<block_content pos:start="229:9" pos:end="229:73">

        <expr_stmt pos:start="229:9" pos:end="229:73"><expr pos:start="229:9" pos:end="229:72"><call pos:start="229:9" pos:end="229:72"><name pos:start="229:9" pos:end="229:29">qdev_connect_gpio_out</name><argument_list pos:start="229:30" pos:end="229:72">(<argument pos:start="229:31" pos:end="229:37"><expr pos:start="229:31" pos:end="229:37"><name pos:start="229:31" pos:end="229:37">key_dev</name></expr></argument>, <argument pos:start="229:40" pos:end="229:40"><expr pos:start="229:40" pos:end="229:40"><name pos:start="229:40" pos:end="229:40">i</name></expr></argument>, <argument pos:start="229:43" pos:end="229:71"><expr pos:start="229:43" pos:end="229:71"><call pos:start="229:43" pos:end="229:71"><name pos:start="229:43" pos:end="229:58">qdev_get_gpio_in</name><argument_list pos:start="229:59" pos:end="229:71">(<argument pos:start="229:60" pos:end="229:62"><expr pos:start="229:60" pos:end="229:62"><name pos:start="229:60" pos:end="229:62">dev</name></expr></argument>, <argument pos:start="229:65" pos:end="229:70"><expr pos:start="229:65" pos:end="229:70"><name pos:start="229:65" pos:end="229:65">i</name> <operator pos:start="229:67" pos:end="229:67">+</operator> <literal type="number" pos:start="229:69" pos:end="229:70">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



<cpp:ifdef pos:start="235:1" pos:end="235:16">#<cpp:directive pos:start="235:2" pos:end="235:6">ifdef</cpp:directive> <name pos:start="235:8" pos:end="235:16">HAS_AUDIO</name></cpp:ifdef>

    <expr_stmt pos:start="237:5" pos:end="237:61"><expr pos:start="237:5" pos:end="237:60"><name pos:start="237:5" pos:end="237:14">wm8750_dev</name> <operator pos:start="237:16" pos:end="237:16">=</operator> <call pos:start="237:18" pos:end="237:60"><name pos:start="237:18" pos:end="237:33">i2c_create_slave</name><argument_list pos:start="237:34" pos:end="237:60">(<argument pos:start="237:35" pos:end="237:37"><expr pos:start="237:35" pos:end="237:37"><name pos:start="237:35" pos:end="237:37">i2c</name></expr></argument>, <argument pos:start="237:40" pos:end="237:47"><expr pos:start="237:40" pos:end="237:47"><literal type="string" pos:start="237:40" pos:end="237:47">"wm8750"</literal></expr></argument>, <argument pos:start="237:50" pos:end="237:59"><expr pos:start="237:50" pos:end="237:59"><name pos:start="237:50" pos:end="237:59">MP_WM_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:47"><expr pos:start="239:5" pos:end="239:46"><name pos:start="239:5" pos:end="239:7">dev</name> <operator pos:start="239:9" pos:end="239:9">=</operator> <call pos:start="239:11" pos:end="239:46"><name pos:start="239:11" pos:end="239:21">qdev_create</name><argument_list pos:start="239:22" pos:end="239:46">(<argument pos:start="239:23" pos:end="239:26"><expr pos:start="239:23" pos:end="239:26"><name pos:start="239:23" pos:end="239:26">NULL</name></expr></argument>, <argument pos:start="239:29" pos:end="239:45"><expr pos:start="239:29" pos:end="239:45"><literal type="string" pos:start="239:29" pos:end="239:45">"mv88w8618_audio"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:30"><expr pos:start="241:5" pos:end="241:29"><name pos:start="241:5" pos:end="241:5">s</name> <operator pos:start="241:7" pos:end="241:7">=</operator> <call pos:start="241:9" pos:end="241:29"><name pos:start="241:9" pos:end="241:24">sysbus_from_qdev</name><argument_list pos:start="241:25" pos:end="241:29">(<argument pos:start="241:26" pos:end="241:28"><expr pos:start="241:26" pos:end="241:28"><name pos:start="241:26" pos:end="241:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:49"><expr pos:start="243:5" pos:end="243:48"><call pos:start="243:5" pos:end="243:48"><name pos:start="243:5" pos:end="243:21">qdev_prop_set_ptr</name><argument_list pos:start="243:22" pos:end="243:48">(<argument pos:start="243:23" pos:end="243:25"><expr pos:start="243:23" pos:end="243:25"><name pos:start="243:23" pos:end="243:25">dev</name></expr></argument>, <argument pos:start="243:28" pos:end="243:35"><expr pos:start="243:28" pos:end="243:35"><literal type="string" pos:start="243:28" pos:end="243:35">"wm8750"</literal></expr></argument>, <argument pos:start="243:38" pos:end="243:47"><expr pos:start="243:38" pos:end="243:47"><name pos:start="243:38" pos:end="243:47">wm8750_dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:19"><expr pos:start="245:5" pos:end="245:18"><call pos:start="245:5" pos:end="245:18"><name pos:start="245:5" pos:end="245:13">qdev_init</name><argument_list pos:start="245:14" pos:end="245:18">(<argument pos:start="245:15" pos:end="245:17"><expr pos:start="245:15" pos:end="245:17"><name pos:start="245:15" pos:end="245:17">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:41"><expr pos:start="247:5" pos:end="247:40"><call pos:start="247:5" pos:end="247:40"><name pos:start="247:5" pos:end="247:19">sysbus_mmio_map</name><argument_list pos:start="247:20" pos:end="247:40">(<argument pos:start="247:21" pos:end="247:21"><expr pos:start="247:21" pos:end="247:21"><name pos:start="247:21" pos:end="247:21">s</name></expr></argument>, <argument pos:start="247:24" pos:end="247:24"><expr pos:start="247:24" pos:end="247:24"><literal type="number" pos:start="247:24" pos:end="247:24">0</literal></expr></argument>, <argument pos:start="247:27" pos:end="247:39"><expr pos:start="247:27" pos:end="247:39"><name pos:start="247:27" pos:end="247:39">MP_AUDIO_BASE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="252:0"><expr pos:start="249:5" pos:end="249:47"><call pos:start="249:5" pos:end="249:47"><name pos:start="249:5" pos:end="249:22">sysbus_connect_irq</name><argument_list pos:start="249:23" pos:end="249:47">(<argument pos:start="249:24" pos:end="249:24"><expr pos:start="249:24" pos:end="249:24"><name pos:start="249:24" pos:end="249:24">s</name></expr></argument>, <argument pos:start="249:27" pos:end="249:27"><expr pos:start="249:27" pos:end="249:27"><literal type="number" pos:start="249:27" pos:end="249:27">0</literal></expr></argument>, <argument pos:start="249:30" pos:end="249:46"><expr pos:start="249:30" pos:end="249:46"><name pos:start="249:30" pos:end="249:46"><name pos:start="249:30" pos:end="249:32">pic</name><index pos:start="249:33" pos:end="249:46">[<expr pos:start="249:34" pos:end="249:45"><name pos:start="249:34" pos:end="249:45">MP_AUDIO_IRQ</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="251:1" pos:end="251:6">#<cpp:directive pos:start="251:2" pos:end="251:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="255:5" pos:end="255:50"><expr pos:start="255:5" pos:end="255:49"><name pos:start="255:5" pos:end="255:27"><name pos:start="255:5" pos:end="255:18">musicpal_binfo</name><operator pos:start="255:19" pos:end="255:19">.</operator><name pos:start="255:20" pos:end="255:27">ram_size</name></name> <operator pos:start="255:29" pos:end="255:29">=</operator> <name pos:start="255:31" pos:end="255:49">MP_RAM_DEFAULT_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:53"><expr pos:start="257:5" pos:end="257:52"><name pos:start="257:5" pos:end="257:34"><name pos:start="257:5" pos:end="257:18">musicpal_binfo</name><operator pos:start="257:19" pos:end="257:19">.</operator><name pos:start="257:20" pos:end="257:34">kernel_filename</name></name> <operator pos:start="257:36" pos:end="257:36">=</operator> <name pos:start="257:38" pos:end="257:52">kernel_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:51"><expr pos:start="259:5" pos:end="259:50"><name pos:start="259:5" pos:end="259:33"><name pos:start="259:5" pos:end="259:18">musicpal_binfo</name><operator pos:start="259:19" pos:end="259:19">.</operator><name pos:start="259:20" pos:end="259:33">kernel_cmdline</name></name> <operator pos:start="259:35" pos:end="259:35">=</operator> <name pos:start="259:37" pos:end="259:50">kernel_cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:53"><expr pos:start="261:5" pos:end="261:52"><name pos:start="261:5" pos:end="261:34"><name pos:start="261:5" pos:end="261:18">musicpal_binfo</name><operator pos:start="261:19" pos:end="261:19">.</operator><name pos:start="261:20" pos:end="261:34">initrd_filename</name></name> <operator pos:start="261:36" pos:end="261:36">=</operator> <name pos:start="261:38" pos:end="261:52">initrd_filename</name></expr>;</expr_stmt>

    <expr_stmt pos:start="263:5" pos:end="263:42"><expr pos:start="263:5" pos:end="263:41"><call pos:start="263:5" pos:end="263:41"><name pos:start="263:5" pos:end="263:19">arm_load_kernel</name><argument_list pos:start="263:20" pos:end="263:41">(<argument pos:start="263:21" pos:end="263:23"><expr pos:start="263:21" pos:end="263:23"><name pos:start="263:21" pos:end="263:23">env</name></expr></argument>, <argument pos:start="263:26" pos:end="263:40"><expr pos:start="263:26" pos:end="263:40"><operator pos:start="263:26" pos:end="263:26">&amp;</operator><name pos:start="263:27" pos:end="263:40">musicpal_binfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
