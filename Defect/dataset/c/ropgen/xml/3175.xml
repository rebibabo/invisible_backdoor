<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3175.c" pos:tabs="8"><function pos:start="1:1" pos:end="293:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:27">vp8_init</name><parameter_list pos:start="1:28" pos:end="1:50">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:44"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="293:1">{<block_content pos:start="5:5" pos:end="291:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">VP8Context</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:19">ctx</name> <init pos:start="5:21" pos:end="5:38">= <expr pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:38"><name pos:start="5:23" pos:end="5:27">avctx</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:65"><decl pos:start="7:5" pos:end="7:64"><type pos:start="7:5" pos:end="7:34"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:32"><name pos:start="7:11" pos:end="7:16">struct</name> <name pos:start="7:18" pos:end="7:32">vpx_codec_iface</name></name> <modifier pos:start="7:34" pos:end="7:34">*</modifier></type><name pos:start="7:35" pos:end="7:39">iface</name> <init pos:start="7:41" pos:end="7:64">= <expr pos:start="7:43" pos:end="7:64"><operator pos:start="7:43" pos:end="7:43">&amp;</operator><name pos:start="7:44" pos:end="7:64">vpx_codec_vp8_cx_algo</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:28">vpx_codec_enc_cfg</name></name></type> <name pos:start="9:30" pos:end="9:35">enccfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:64"><expr pos:start="15:5" pos:end="15:63"><call pos:start="15:5" pos:end="15:63"><name pos:start="15:5" pos:end="15:10">av_log</name><argument_list pos:start="15:11" pos:end="15:63">(<argument pos:start="15:12" pos:end="15:16"><expr pos:start="15:12" pos:end="15:16"><name pos:start="15:12" pos:end="15:16">avctx</name></expr></argument>, <argument pos:start="15:19" pos:end="15:29"><expr pos:start="15:19" pos:end="15:29"><name pos:start="15:19" pos:end="15:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="15:32" pos:end="15:37"><expr pos:start="15:32" pos:end="15:37"><literal type="string" pos:start="15:32" pos:end="15:37">"%s\n"</literal></expr></argument>, <argument pos:start="15:40" pos:end="15:62"><expr pos:start="15:40" pos:end="15:62"><call pos:start="15:40" pos:end="15:62"><name pos:start="15:40" pos:end="15:60">vpx_codec_version_str</name><argument_list pos:start="15:61" pos:end="15:62">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:68"><expr pos:start="17:5" pos:end="17:67"><call pos:start="17:5" pos:end="17:67"><name pos:start="17:5" pos:end="17:10">av_log</name><argument_list pos:start="17:11" pos:end="17:67">(<argument pos:start="17:12" pos:end="17:16"><expr pos:start="17:12" pos:end="17:16"><name pos:start="17:12" pos:end="17:16">avctx</name></expr></argument>, <argument pos:start="17:19" pos:end="17:32"><expr pos:start="17:19" pos:end="17:32"><name pos:start="17:19" pos:end="17:32">AV_LOG_VERBOSE</name></expr></argument>, <argument pos:start="17:35" pos:end="17:40"><expr pos:start="17:35" pos:end="17:40"><literal type="string" pos:start="17:35" pos:end="17:40">"%s\n"</literal></expr></argument>, <argument pos:start="17:43" pos:end="17:66"><expr pos:start="17:43" pos:end="17:66"><call pos:start="17:43" pos:end="17:66"><name pos:start="17:43" pos:end="17:64">vpx_codec_build_config</name><argument_list pos:start="17:65" pos:end="17:66">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="21:5" pos:end="29:5"><if pos:start="21:5" pos:end="29:5">if <condition pos:start="21:8" pos:end="21:80">(<expr pos:start="21:9" pos:end="21:79"><operator pos:start="21:9" pos:end="21:9">(</operator><name pos:start="21:10" pos:end="21:12">res</name> <operator pos:start="21:14" pos:end="21:14">=</operator> <call pos:start="21:16" pos:end="21:62"><name pos:start="21:16" pos:end="21:43">vpx_codec_enc_config_default</name><argument_list pos:start="21:44" pos:end="21:62">(<argument pos:start="21:45" pos:end="21:49"><expr pos:start="21:45" pos:end="21:49"><name pos:start="21:45" pos:end="21:49">iface</name></expr></argument>, <argument pos:start="21:52" pos:end="21:58"><expr pos:start="21:52" pos:end="21:58"><operator pos:start="21:52" pos:end="21:52">&amp;</operator><name pos:start="21:53" pos:end="21:58">enccfg</name></expr></argument>, <argument pos:start="21:61" pos:end="21:61"><expr pos:start="21:61" pos:end="21:61"><literal type="number" pos:start="21:61" pos:end="21:61">0</literal></expr></argument>)</argument_list></call><operator pos:start="21:63" pos:end="21:63">)</operator> <operator pos:start="21:65" pos:end="21:66">!=</operator> <name pos:start="21:68" pos:end="21:79">VPX_CODEC_OK</name></expr>)</condition> <block pos:start="21:82" pos:end="29:5">{<block_content pos:start="23:9" pos:end="27:31">

        <expr_stmt pos:start="23:9" pos:end="25:45"><expr pos:start="23:9" pos:end="25:44"><call pos:start="23:9" pos:end="25:44"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="25:44">(<argument pos:start="23:16" pos:end="23:20"><expr pos:start="23:16" pos:end="23:20"><name pos:start="23:16" pos:end="23:20">avctx</name></expr></argument>, <argument pos:start="23:23" pos:end="23:34"><expr pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:37" pos:end="23:64"><expr pos:start="23:37" pos:end="23:64"><literal type="string" pos:start="23:37" pos:end="23:64">"Failed to get config: %s\n"</literal></expr></argument>,

               <argument pos:start="25:16" pos:end="25:43"><expr pos:start="25:16" pos:end="25:43"><call pos:start="25:16" pos:end="25:43"><name pos:start="25:16" pos:end="25:38">vpx_codec_err_to_string</name><argument_list pos:start="25:39" pos:end="25:43">(<argument pos:start="25:40" pos:end="25:42"><expr pos:start="25:40" pos:end="25:42"><name pos:start="25:40" pos:end="25:42">res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:31">return <expr pos:start="27:16" pos:end="27:30"><call pos:start="27:16" pos:end="27:30"><name pos:start="27:16" pos:end="27:22">AVERROR</name><argument_list pos:start="27:23" pos:end="27:30">(<argument pos:start="27:24" pos:end="27:29"><expr pos:start="27:24" pos:end="27:29"><name pos:start="27:24" pos:end="27:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:33"><expr pos:start="31:5" pos:end="31:32"><call pos:start="31:5" pos:end="31:32"><name pos:start="31:5" pos:end="31:16">dump_enc_cfg</name><argument_list pos:start="31:17" pos:end="31:32">(<argument pos:start="31:18" pos:end="31:22"><expr pos:start="31:18" pos:end="31:22"><name pos:start="31:18" pos:end="31:22">avctx</name></expr></argument>, <argument pos:start="31:25" pos:end="31:31"><expr pos:start="31:25" pos:end="31:31"><operator pos:start="31:25" pos:end="31:25">&amp;</operator><name pos:start="31:26" pos:end="31:31">enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:41"><expr pos:start="35:5" pos:end="35:40"><name pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:10">enccfg</name><operator pos:start="35:11" pos:end="35:11">.</operator><name pos:start="35:12" pos:end="35:14">g_w</name></name>            <operator pos:start="35:27" pos:end="35:27">=</operator> <name pos:start="35:29" pos:end="35:40"><name pos:start="35:29" pos:end="35:33">avctx</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:40">width</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:42"><expr pos:start="37:5" pos:end="37:41"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:10">enccfg</name><operator pos:start="37:11" pos:end="37:11">.</operator><name pos:start="37:12" pos:end="37:14">g_h</name></name>            <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:41"><name pos:start="37:29" pos:end="37:33">avctx</name><operator pos:start="37:34" pos:end="37:35">-&gt;</operator><name pos:start="37:36" pos:end="37:41">height</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:49"><expr pos:start="39:5" pos:end="39:48"><name pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:10">enccfg</name><operator pos:start="39:11" pos:end="39:11">.</operator><name pos:start="39:12" pos:end="39:21">g_timebase</name><operator pos:start="39:22" pos:end="39:22">.</operator><name pos:start="39:23" pos:end="39:25">num</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:48"><name pos:start="39:29" pos:end="39:33">avctx</name><operator pos:start="39:34" pos:end="39:35">-&gt;</operator><name pos:start="39:36" pos:end="39:44">time_base</name><operator pos:start="39:45" pos:end="39:45">.</operator><name pos:start="39:46" pos:end="39:48">num</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:25"><name pos:start="41:5" pos:end="41:10">enccfg</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:21">g_timebase</name><operator pos:start="41:22" pos:end="41:22">.</operator><name pos:start="41:23" pos:end="41:25">den</name></name> <operator pos:start="41:27" pos:end="41:27">=</operator> <name pos:start="41:29" pos:end="41:48"><name pos:start="41:29" pos:end="41:33">avctx</name><operator pos:start="41:34" pos:end="41:35">-&gt;</operator><name pos:start="41:36" pos:end="41:44">time_base</name><operator pos:start="41:45" pos:end="41:45">.</operator><name pos:start="41:46" pos:end="41:48">den</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:10">enccfg</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:20">g_threads</name></name>      <operator pos:start="43:27" pos:end="43:27">=</operator> <name pos:start="43:29" pos:end="43:47"><name pos:start="43:29" pos:end="43:33">avctx</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:47">thread_count</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:47"><expr pos:start="45:5" pos:end="45:46"><name pos:start="45:5" pos:end="45:26"><name pos:start="45:5" pos:end="45:10">enccfg</name><operator pos:start="45:11" pos:end="45:11">.</operator><name pos:start="45:12" pos:end="45:26">g_lag_in_frames</name></name><operator pos:start="45:27" pos:end="45:27">=</operator> <name pos:start="45:29" pos:end="45:46"><name pos:start="45:29" pos:end="45:31">ctx</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:46">lag_in_frames</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="49:5" pos:end="59:40"><if pos:start="49:5" pos:end="51:42">if <condition pos:start="49:8" pos:end="49:40">(<expr pos:start="49:9" pos:end="49:39"><name pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:13">avctx</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:20">flags</name></name> <operator pos:start="49:22" pos:end="49:22">&amp;</operator> <name pos:start="49:24" pos:end="49:39">CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:42"><block_content pos:start="51:9" pos:end="51:42">

        <expr_stmt pos:start="51:9" pos:end="51:42"><expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:14">enccfg</name><operator pos:start="51:15" pos:end="51:15">.</operator><name pos:start="51:16" pos:end="51:21">g_pass</name></name> <operator pos:start="51:23" pos:end="51:23">=</operator> <name pos:start="51:25" pos:end="51:41">VPX_RC_FIRST_PASS</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="53:5" pos:end="55:41">else if <condition pos:start="53:13" pos:end="53:45">(<expr pos:start="53:14" pos:end="53:44"><name pos:start="53:14" pos:end="53:25"><name pos:start="53:14" pos:end="53:18">avctx</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:25">flags</name></name> <operator pos:start="53:27" pos:end="53:27">&amp;</operator> <name pos:start="53:29" pos:end="53:44">CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo" pos:start="55:9" pos:end="55:41"><block_content pos:start="55:9" pos:end="55:41">

        <expr_stmt pos:start="55:9" pos:end="55:41"><expr pos:start="55:9" pos:end="55:40"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:14">enccfg</name><operator pos:start="55:15" pos:end="55:15">.</operator><name pos:start="55:16" pos:end="55:21">g_pass</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <name pos:start="55:25" pos:end="55:40">VPX_RC_LAST_PASS</name></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="57:5" pos:end="59:40">else<block type="pseudo" pos:start="59:9" pos:end="59:40"><block_content pos:start="59:9" pos:end="59:40">

        <expr_stmt pos:start="59:9" pos:end="59:40"><expr pos:start="59:9" pos:end="59:39"><name pos:start="59:9" pos:end="59:21"><name pos:start="59:9" pos:end="59:14">enccfg</name><operator pos:start="59:15" pos:end="59:15">.</operator><name pos:start="59:16" pos:end="59:21">g_pass</name></name> <operator pos:start="59:23" pos:end="59:23">=</operator> <name pos:start="59:25" pos:end="59:39">VPX_RC_ONE_PASS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="63:5" pos:end="71:37"><if pos:start="63:5" pos:end="67:38">if <condition pos:start="63:8" pos:end="65:46">(<expr pos:start="63:9" pos:end="65:45"><name pos:start="63:9" pos:end="63:26"><name pos:start="63:9" pos:end="63:13">avctx</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:26">rc_min_rate</name></name> <operator pos:start="63:28" pos:end="63:29">==</operator> <name pos:start="63:31" pos:end="63:48"><name pos:start="63:31" pos:end="63:35">avctx</name><operator pos:start="63:36" pos:end="63:37">-&gt;</operator><name pos:start="63:38" pos:end="63:48">rc_max_rate</name></name> <operator pos:start="63:50" pos:end="63:51">&amp;&amp;</operator>

        <name pos:start="65:9" pos:end="65:26"><name pos:start="65:9" pos:end="65:13">avctx</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:26">rc_min_rate</name></name> <operator pos:start="65:28" pos:end="65:29">==</operator> <name pos:start="65:31" pos:end="65:45"><name pos:start="65:31" pos:end="65:35">avctx</name><operator pos:start="65:36" pos:end="65:37">-&gt;</operator><name pos:start="65:38" pos:end="65:45">bit_rate</name></name></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:38"><block_content pos:start="67:9" pos:end="67:38">

        <expr_stmt pos:start="67:9" pos:end="67:38"><expr pos:start="67:9" pos:end="67:37"><name pos:start="67:9" pos:end="67:27"><name pos:start="67:9" pos:end="67:14">enccfg</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:27">rc_end_usage</name></name> <operator pos:start="67:29" pos:end="67:29">=</operator> <name pos:start="67:31" pos:end="67:37">VPX_CBR</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="69:5" pos:end="71:37">else if <condition pos:start="69:13" pos:end="69:22">(<expr pos:start="69:14" pos:end="69:21"><name pos:start="69:14" pos:end="69:21"><name pos:start="69:14" pos:end="69:16">ctx</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:21">crf</name></name></expr>)</condition><block type="pseudo" pos:start="71:9" pos:end="71:37"><block_content pos:start="71:9" pos:end="71:37">

        <expr_stmt pos:start="71:9" pos:end="71:37"><expr pos:start="71:9" pos:end="71:36"><name pos:start="71:9" pos:end="71:27"><name pos:start="71:9" pos:end="71:14">enccfg</name><operator pos:start="71:15" pos:end="71:15">.</operator><name pos:start="71:16" pos:end="71:27">rc_end_usage</name></name> <operator pos:start="71:29" pos:end="71:29">=</operator> <name pos:start="71:31" pos:end="71:36">VPX_CQ</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="73:5" pos:end="75:65"><expr pos:start="73:5" pos:end="75:64"><name pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:10">enccfg</name><operator pos:start="73:11" pos:end="73:11">.</operator><name pos:start="73:12" pos:end="73:28">rc_target_bitrate</name></name> <operator pos:start="73:30" pos:end="73:30">=</operator> <call pos:start="73:32" pos:end="75:64"><name pos:start="73:32" pos:end="73:45">av_rescale_rnd</name><argument_list pos:start="73:46" pos:end="75:64">(<argument pos:start="73:47" pos:end="73:61"><expr pos:start="73:47" pos:end="73:61"><name pos:start="73:47" pos:end="73:61"><name pos:start="73:47" pos:end="73:51">avctx</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:61">bit_rate</name></name></expr></argument>, <argument pos:start="73:64" pos:end="73:64"><expr pos:start="73:64" pos:end="73:64"><literal type="number" pos:start="73:64" pos:end="73:64">1</literal></expr></argument>, <argument pos:start="73:67" pos:end="73:70"><expr pos:start="73:67" pos:end="73:70"><literal type="number" pos:start="73:67" pos:end="73:70">1000</literal></expr></argument>,

                                              <argument pos:start="75:47" pos:end="75:63"><expr pos:start="75:47" pos:end="75:63"><name pos:start="75:47" pos:end="75:63">AV_ROUND_NEAR_INF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="79:46"><if pos:start="77:5" pos:end="79:46">if <condition pos:start="77:8" pos:end="77:24">(<expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:13">avctx</name><operator pos:start="77:14" pos:end="77:15">-&gt;</operator><name pos:start="77:16" pos:end="77:19">qmin</name></name> <operator pos:start="77:21" pos:end="77:21">&gt;</operator> <literal type="number" pos:start="77:23" pos:end="77:23">0</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:46"><block_content pos:start="79:9" pos:end="79:46">

        <expr_stmt pos:start="79:9" pos:end="79:46"><expr pos:start="79:9" pos:end="79:45"><name pos:start="79:9" pos:end="79:31"><name pos:start="79:9" pos:end="79:14">enccfg</name><operator pos:start="79:15" pos:end="79:15">.</operator><name pos:start="79:16" pos:end="79:31">rc_min_quantizer</name></name> <operator pos:start="79:33" pos:end="79:33">=</operator> <name pos:start="79:35" pos:end="79:45"><name pos:start="79:35" pos:end="79:39">avctx</name><operator pos:start="79:40" pos:end="79:41">-&gt;</operator><name pos:start="79:42" pos:end="79:45">qmin</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="83:46"><if pos:start="81:5" pos:end="83:46">if <condition pos:start="81:8" pos:end="81:24">(<expr pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:13">avctx</name><operator pos:start="81:14" pos:end="81:15">-&gt;</operator><name pos:start="81:16" pos:end="81:19">qmax</name></name> <operator pos:start="81:21" pos:end="81:21">&gt;</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>)</condition><block type="pseudo" pos:start="83:9" pos:end="83:46"><block_content pos:start="83:9" pos:end="83:46">

        <expr_stmt pos:start="83:9" pos:end="83:46"><expr pos:start="83:9" pos:end="83:45"><name pos:start="83:9" pos:end="83:31"><name pos:start="83:9" pos:end="83:14">enccfg</name><operator pos:start="83:15" pos:end="83:15">.</operator><name pos:start="83:16" pos:end="83:31">rc_max_quantizer</name></name> <operator pos:start="83:33" pos:end="83:33">=</operator> <name pos:start="83:35" pos:end="83:45"><name pos:start="83:35" pos:end="83:39">avctx</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:45">qmax</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:61"><expr pos:start="85:5" pos:end="85:60"><name pos:start="85:5" pos:end="85:30"><name pos:start="85:5" pos:end="85:10">enccfg</name><operator pos:start="85:11" pos:end="85:11">.</operator><name pos:start="85:12" pos:end="85:30">rc_dropframe_thresh</name></name> <operator pos:start="85:32" pos:end="85:32">=</operator> <name pos:start="85:34" pos:end="85:60"><name pos:start="85:34" pos:end="85:38">avctx</name><operator pos:start="85:39" pos:end="85:40">-&gt;</operator><name pos:start="85:41" pos:end="85:60">frame_skip_threshold</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="89:5" pos:end="89:34">//0-100 (0 =&gt; CBR, 100 =&gt; VBR)</comment>

    <expr_stmt pos:start="91:5" pos:end="91:75"><expr pos:start="91:5" pos:end="91:74"><name pos:start="91:5" pos:end="91:32"><name pos:start="91:5" pos:end="91:10">enccfg</name><operator pos:start="91:11" pos:end="91:11">.</operator><name pos:start="91:12" pos:end="91:32">rc_2pass_vbr_bias_pct</name></name>           <operator pos:start="91:44" pos:end="91:44">=</operator> <call pos:start="91:46" pos:end="91:74"><name pos:start="91:46" pos:end="91:50">round</name><argument_list pos:start="91:51" pos:end="91:74">(<argument pos:start="91:52" pos:end="91:73"><expr pos:start="91:52" pos:end="91:73"><name pos:start="91:52" pos:end="91:67"><name pos:start="91:52" pos:end="91:56">avctx</name><operator pos:start="91:57" pos:end="91:58">-&gt;</operator><name pos:start="91:59" pos:end="91:67">qcompress</name></name> <operator pos:start="91:69" pos:end="91:69">*</operator> <literal type="number" pos:start="91:71" pos:end="91:73">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="95:53"><expr pos:start="93:5" pos:end="95:52"><name pos:start="93:5" pos:end="93:38"><name pos:start="93:5" pos:end="93:10">enccfg</name><operator pos:start="93:11" pos:end="93:11">.</operator><name pos:start="93:12" pos:end="93:38">rc_2pass_vbr_minsection_pct</name></name>     <operator pos:start="93:44" pos:end="93:44">=</operator>

        <name pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:13">avctx</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:26">rc_min_rate</name></name> <operator pos:start="95:28" pos:end="95:28">*</operator> <literal type="number" pos:start="95:30" pos:end="95:34">100LL</literal> <operator pos:start="95:36" pos:end="95:36">/</operator> <name pos:start="95:38" pos:end="95:52"><name pos:start="95:38" pos:end="95:42">avctx</name><operator pos:start="95:43" pos:end="95:44">-&gt;</operator><name pos:start="95:45" pos:end="95:52">bit_rate</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="97:5" pos:end="101:57"><if pos:start="97:5" pos:end="101:57">if <condition pos:start="97:8" pos:end="97:27">(<expr pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:26"><name pos:start="97:9" pos:end="97:13">avctx</name><operator pos:start="97:14" pos:end="97:15">-&gt;</operator><name pos:start="97:16" pos:end="97:26">rc_max_rate</name></name></expr>)</condition><block type="pseudo" pos:start="99:9" pos:end="101:57"><block_content pos:start="99:9" pos:end="101:57">

        <expr_stmt pos:start="99:9" pos:end="101:57"><expr pos:start="99:9" pos:end="101:56"><name pos:start="99:9" pos:end="99:42"><name pos:start="99:9" pos:end="99:14">enccfg</name><operator pos:start="99:15" pos:end="99:15">.</operator><name pos:start="99:16" pos:end="99:42">rc_2pass_vbr_maxsection_pct</name></name> <operator pos:start="99:44" pos:end="99:44">=</operator>

            <name pos:start="101:13" pos:end="101:30"><name pos:start="101:13" pos:end="101:17">avctx</name><operator pos:start="101:18" pos:end="101:19">-&gt;</operator><name pos:start="101:20" pos:end="101:30">rc_max_rate</name></name> <operator pos:start="101:32" pos:end="101:32">*</operator> <literal type="number" pos:start="101:34" pos:end="101:38">100LL</literal> <operator pos:start="101:40" pos:end="101:40">/</operator> <name pos:start="101:42" pos:end="101:56"><name pos:start="101:42" pos:end="101:46">avctx</name><operator pos:start="101:47" pos:end="101:48">-&gt;</operator><name pos:start="101:49" pos:end="101:56">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="109:61"><if pos:start="105:5" pos:end="109:61">if <condition pos:start="105:8" pos:end="105:30">(<expr pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:29"><name pos:start="105:9" pos:end="105:13">avctx</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:29">rc_buffer_size</name></name></expr>)</condition><block type="pseudo" pos:start="107:9" pos:end="109:61"><block_content pos:start="107:9" pos:end="109:61">

        <expr_stmt pos:start="107:9" pos:end="109:61"><expr pos:start="107:9" pos:end="109:60"><name pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:14">enccfg</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:24">rc_buf_sz</name></name>         <operator pos:start="107:34" pos:end="107:34">=</operator>

            <name pos:start="109:13" pos:end="109:33"><name pos:start="109:13" pos:end="109:17">avctx</name><operator pos:start="109:18" pos:end="109:19">-&gt;</operator><name pos:start="109:20" pos:end="109:33">rc_buffer_size</name></name> <operator pos:start="109:35" pos:end="109:35">*</operator> <literal type="number" pos:start="109:37" pos:end="109:42">1000LL</literal> <operator pos:start="109:44" pos:end="109:44">/</operator> <name pos:start="109:46" pos:end="109:60"><name pos:start="109:46" pos:end="109:50">avctx</name><operator pos:start="109:51" pos:end="109:52">-&gt;</operator><name pos:start="109:53" pos:end="109:60">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="115:74"><if pos:start="111:5" pos:end="115:74">if <condition pos:start="111:8" pos:end="111:43">(<expr pos:start="111:9" pos:end="111:42"><name pos:start="111:9" pos:end="111:42"><name pos:start="111:9" pos:end="111:13">avctx</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:42">rc_initial_buffer_occupancy</name></name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="115:74"><block_content pos:start="113:9" pos:end="115:74">

        <expr_stmt pos:start="113:9" pos:end="115:74"><expr pos:start="113:9" pos:end="115:73"><name pos:start="113:9" pos:end="113:32"><name pos:start="113:9" pos:end="113:14">enccfg</name><operator pos:start="113:15" pos:end="113:15">.</operator><name pos:start="113:16" pos:end="113:32">rc_buf_initial_sz</name></name> <operator pos:start="113:34" pos:end="113:34">=</operator>

            <name pos:start="115:13" pos:end="115:46"><name pos:start="115:13" pos:end="115:17">avctx</name><operator pos:start="115:18" pos:end="115:19">-&gt;</operator><name pos:start="115:20" pos:end="115:46">rc_initial_buffer_occupancy</name></name> <operator pos:start="115:48" pos:end="115:48">*</operator> <literal type="number" pos:start="115:50" pos:end="115:55">1000LL</literal> <operator pos:start="115:57" pos:end="115:57">/</operator> <name pos:start="115:59" pos:end="115:73"><name pos:start="115:59" pos:end="115:63">avctx</name><operator pos:start="115:64" pos:end="115:65">-&gt;</operator><name pos:start="115:66" pos:end="115:73">bit_rate</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:60"><expr pos:start="117:5" pos:end="117:59"><name pos:start="117:5" pos:end="117:28"><name pos:start="117:5" pos:end="117:10">enccfg</name><operator pos:start="117:11" pos:end="117:11">.</operator><name pos:start="117:12" pos:end="117:28">rc_buf_optimal_sz</name></name>     <operator pos:start="117:34" pos:end="117:34">=</operator> <name pos:start="117:36" pos:end="117:51"><name pos:start="117:36" pos:end="117:41">enccfg</name><operator pos:start="117:42" pos:end="117:42">.</operator><name pos:start="117:43" pos:end="117:51">rc_buf_sz</name></name> <operator pos:start="117:53" pos:end="117:53">*</operator> <literal type="number" pos:start="117:55" pos:end="117:55">5</literal> <operator pos:start="117:57" pos:end="117:57">/</operator> <literal type="number" pos:start="117:59" pos:end="117:59">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:78"><expr pos:start="119:5" pos:end="119:77"><name pos:start="119:5" pos:end="119:28"><name pos:start="119:5" pos:end="119:10">enccfg</name><operator pos:start="119:11" pos:end="119:11">.</operator><name pos:start="119:12" pos:end="119:28">rc_undershoot_pct</name></name>     <operator pos:start="119:34" pos:end="119:34">=</operator> <call pos:start="119:36" pos:end="119:77"><name pos:start="119:36" pos:end="119:40">round</name><argument_list pos:start="119:41" pos:end="119:77">(<argument pos:start="119:42" pos:end="119:76"><expr pos:start="119:42" pos:end="119:76"><name pos:start="119:42" pos:end="119:70"><name pos:start="119:42" pos:end="119:46">avctx</name><operator pos:start="119:47" pos:end="119:48">-&gt;</operator><name pos:start="119:49" pos:end="119:70">rc_buffer_aggressivity</name></name> <operator pos:start="119:72" pos:end="119:72">*</operator> <literal type="number" pos:start="119:74" pos:end="119:76">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="123:5" pos:end="123:73">//_enc_init() will balk if kf_min_dist differs from max w/VPX_KF_AUTO</comment>

    <if_stmt pos:start="125:5" pos:end="127:47"><if pos:start="125:5" pos:end="127:47">if <condition pos:start="125:8" pos:end="125:71">(<expr pos:start="125:9" pos:end="125:70"><name pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:13">avctx</name><operator pos:start="125:14" pos:end="125:15">-&gt;</operator><name pos:start="125:16" pos:end="125:25">keyint_min</name></name> <operator pos:start="125:27" pos:end="125:28">&gt;=</operator> <literal type="number" pos:start="125:30" pos:end="125:30">0</literal> <operator pos:start="125:32" pos:end="125:33">&amp;&amp;</operator> <name pos:start="125:35" pos:end="125:51"><name pos:start="125:35" pos:end="125:39">avctx</name><operator pos:start="125:40" pos:end="125:41">-&gt;</operator><name pos:start="125:42" pos:end="125:51">keyint_min</name></name> <operator pos:start="125:53" pos:end="125:54">==</operator> <name pos:start="125:56" pos:end="125:70"><name pos:start="125:56" pos:end="125:60">avctx</name><operator pos:start="125:61" pos:end="125:62">-&gt;</operator><name pos:start="125:63" pos:end="125:70">gop_size</name></name></expr>)</condition><block type="pseudo" pos:start="127:9" pos:end="127:47"><block_content pos:start="127:9" pos:end="127:47">

        <expr_stmt pos:start="127:9" pos:end="127:47"><expr pos:start="127:9" pos:end="127:46"><name pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:14">enccfg</name><operator pos:start="127:15" pos:end="127:15">.</operator><name pos:start="127:16" pos:end="127:26">kf_min_dist</name></name> <operator pos:start="127:28" pos:end="127:28">=</operator> <name pos:start="127:30" pos:end="127:46"><name pos:start="127:30" pos:end="127:34">avctx</name><operator pos:start="127:35" pos:end="127:36">-&gt;</operator><name pos:start="127:37" pos:end="127:46">keyint_min</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="129:5" pos:end="131:45"><if pos:start="129:5" pos:end="131:45">if <condition pos:start="129:8" pos:end="129:29">(<expr pos:start="129:9" pos:end="129:28"><name pos:start="129:9" pos:end="129:23"><name pos:start="129:9" pos:end="129:13">avctx</name><operator pos:start="129:14" pos:end="129:15">-&gt;</operator><name pos:start="129:16" pos:end="129:23">gop_size</name></name> <operator pos:start="129:25" pos:end="129:26">&gt;=</operator> <literal type="number" pos:start="129:28" pos:end="129:28">0</literal></expr>)</condition><block type="pseudo" pos:start="131:9" pos:end="131:45"><block_content pos:start="131:9" pos:end="131:45">

        <expr_stmt pos:start="131:9" pos:end="131:45"><expr pos:start="131:9" pos:end="131:44"><name pos:start="131:9" pos:end="131:26"><name pos:start="131:9" pos:end="131:14">enccfg</name><operator pos:start="131:15" pos:end="131:15">.</operator><name pos:start="131:16" pos:end="131:26">kf_max_dist</name></name> <operator pos:start="131:28" pos:end="131:28">=</operator> <name pos:start="131:30" pos:end="131:44"><name pos:start="131:30" pos:end="131:34">avctx</name><operator pos:start="131:35" pos:end="131:36">-&gt;</operator><name pos:start="131:37" pos:end="131:44">gop_size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="135:5" pos:end="189:5"><if pos:start="135:5" pos:end="137:35">if <condition pos:start="135:8" pos:end="135:43">(<expr pos:start="135:9" pos:end="135:42"><name pos:start="135:9" pos:end="135:21"><name pos:start="135:9" pos:end="135:14">enccfg</name><operator pos:start="135:15" pos:end="135:15">.</operator><name pos:start="135:16" pos:end="135:21">g_pass</name></name> <operator pos:start="135:23" pos:end="135:24">==</operator> <name pos:start="135:26" pos:end="135:42">VPX_RC_FIRST_PASS</name></expr>)</condition><block type="pseudo" pos:start="137:9" pos:end="137:35"><block_content pos:start="137:9" pos:end="137:35">

        <expr_stmt pos:start="137:9" pos:end="137:35"><expr pos:start="137:9" pos:end="137:34"><name pos:start="137:9" pos:end="137:30"><name pos:start="137:9" pos:end="137:14">enccfg</name><operator pos:start="137:15" pos:end="137:15">.</operator><name pos:start="137:16" pos:end="137:30">g_lag_in_frames</name></name> <operator pos:start="137:32" pos:end="137:32">=</operator> <literal type="number" pos:start="137:34" pos:end="137:34">0</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="139:5" pos:end="189:5">else if <condition pos:start="139:13" pos:end="139:47">(<expr pos:start="139:14" pos:end="139:46"><name pos:start="139:14" pos:end="139:26"><name pos:start="139:14" pos:end="139:19">enccfg</name><operator pos:start="139:20" pos:end="139:20">.</operator><name pos:start="139:21" pos:end="139:26">g_pass</name></name> <operator pos:start="139:28" pos:end="139:29">==</operator> <name pos:start="139:31" pos:end="139:46">VPX_RC_LAST_PASS</name></expr>)</condition> <block pos:start="139:49" pos:end="189:5">{<block_content pos:start="141:9" pos:end="187:56">

        <decl_stmt pos:start="141:9" pos:end="141:24"><decl pos:start="141:9" pos:end="141:23"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:23">decode_size</name></decl>;</decl_stmt>



        <if_stmt pos:start="145:9" pos:end="151:9"><if pos:start="145:9" pos:end="151:9">if <condition pos:start="145:12" pos:end="145:29">(<expr pos:start="145:13" pos:end="145:28"><operator pos:start="145:13" pos:end="145:13">!</operator><name pos:start="145:14" pos:end="145:28"><name pos:start="145:14" pos:end="145:18">avctx</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:28">stats_in</name></name></expr>)</condition> <block pos:start="145:31" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:39">

            <expr_stmt pos:start="147:13" pos:end="147:75"><expr pos:start="147:13" pos:end="147:74"><call pos:start="147:13" pos:end="147:74"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:74">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:41" pos:end="147:73"><expr pos:start="147:41" pos:end="147:73"><literal type="string" pos:start="147:41" pos:end="147:73">"No stats file for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="149:13" pos:end="149:39">return <expr pos:start="149:20" pos:end="149:38"><name pos:start="149:20" pos:end="149:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:65"><expr pos:start="155:9" pos:end="155:64"><name pos:start="155:9" pos:end="155:29"><name pos:start="155:9" pos:end="155:11">ctx</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:26">twopass_stats</name><operator pos:start="155:27" pos:end="155:27">.</operator><name pos:start="155:28" pos:end="155:29">sz</name></name>  <operator pos:start="155:32" pos:end="155:32">=</operator> <call pos:start="155:34" pos:end="155:56"><name pos:start="155:34" pos:end="155:39">strlen</name><argument_list pos:start="155:40" pos:end="155:56">(<argument pos:start="155:41" pos:end="155:55"><expr pos:start="155:41" pos:end="155:55"><name pos:start="155:41" pos:end="155:55"><name pos:start="155:41" pos:end="155:45">avctx</name><operator pos:start="155:46" pos:end="155:47">-&gt;</operator><name pos:start="155:48" pos:end="155:55">stats_in</name></name></expr></argument>)</argument_list></call> <operator pos:start="155:58" pos:end="155:58">*</operator> <literal type="number" pos:start="155:60" pos:end="155:60">3</literal> <operator pos:start="155:62" pos:end="155:62">/</operator> <literal type="number" pos:start="155:64" pos:end="155:64">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:66"><expr pos:start="157:9" pos:end="157:65"><name pos:start="157:9" pos:end="157:30"><name pos:start="157:9" pos:end="157:11">ctx</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:26">twopass_stats</name><operator pos:start="157:27" pos:end="157:27">.</operator><name pos:start="157:28" pos:end="157:30">buf</name></name> <operator pos:start="157:32" pos:end="157:32">=</operator> <call pos:start="157:34" pos:end="157:65"><name pos:start="157:34" pos:end="157:42">av_malloc</name><argument_list pos:start="157:43" pos:end="157:65">(<argument pos:start="157:44" pos:end="157:64"><expr pos:start="157:44" pos:end="157:64"><name pos:start="157:44" pos:end="157:64"><name pos:start="157:44" pos:end="157:46">ctx</name><operator pos:start="157:47" pos:end="157:48">-&gt;</operator><name pos:start="157:49" pos:end="157:61">twopass_stats</name><operator pos:start="157:62" pos:end="157:62">.</operator><name pos:start="157:63" pos:end="157:64">sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="159:9" pos:end="169:9"><if pos:start="159:9" pos:end="169:9">if <condition pos:start="159:12" pos:end="159:36">(<expr pos:start="159:13" pos:end="159:35"><operator pos:start="159:13" pos:end="159:13">!</operator><name pos:start="159:14" pos:end="159:35"><name pos:start="159:14" pos:end="159:16">ctx</name><operator pos:start="159:17" pos:end="159:18">-&gt;</operator><name pos:start="159:19" pos:end="159:31">twopass_stats</name><operator pos:start="159:32" pos:end="159:32">.</operator><name pos:start="159:33" pos:end="159:35">buf</name></name></expr>)</condition> <block pos:start="159:38" pos:end="169:9">{<block_content pos:start="161:13" pos:end="167:35">

            <expr_stmt pos:start="161:13" pos:end="165:42"><expr pos:start="161:13" pos:end="165:41"><call pos:start="161:13" pos:end="165:41"><name pos:start="161:13" pos:end="161:18">av_log</name><argument_list pos:start="161:19" pos:end="165:41">(<argument pos:start="161:20" pos:end="161:24"><expr pos:start="161:20" pos:end="161:24"><name pos:start="161:20" pos:end="161:24">avctx</name></expr></argument>, <argument pos:start="161:27" pos:end="161:38"><expr pos:start="161:27" pos:end="161:38"><name pos:start="161:27" pos:end="161:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="163:20" pos:end="163:59"><expr pos:start="163:20" pos:end="163:59"><literal type="string" pos:start="163:20" pos:end="163:59">"Stat buffer alloc (%zu bytes) failed\n"</literal></expr></argument>,

                   <argument pos:start="165:20" pos:end="165:40"><expr pos:start="165:20" pos:end="165:40"><name pos:start="165:20" pos:end="165:40"><name pos:start="165:20" pos:end="165:22">ctx</name><operator pos:start="165:23" pos:end="165:24">-&gt;</operator><name pos:start="165:25" pos:end="165:37">twopass_stats</name><operator pos:start="165:38" pos:end="165:38">.</operator><name pos:start="165:39" pos:end="165:40">sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="167:13" pos:end="167:35">return <expr pos:start="167:20" pos:end="167:34"><call pos:start="167:20" pos:end="167:34"><name pos:start="167:20" pos:end="167:26">AVERROR</name><argument_list pos:start="167:27" pos:end="167:34">(<argument pos:start="167:28" pos:end="167:33"><expr pos:start="167:28" pos:end="167:33"><name pos:start="167:28" pos:end="167:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="171:9" pos:end="173:62"><expr pos:start="171:9" pos:end="173:61"><name pos:start="171:9" pos:end="171:19">decode_size</name> <operator pos:start="171:21" pos:end="171:21">=</operator> <call pos:start="171:23" pos:end="173:61"><name pos:start="171:23" pos:end="171:38">av_base64_decode</name><argument_list pos:start="171:39" pos:end="173:61">(<argument pos:start="171:40" pos:end="171:61"><expr pos:start="171:40" pos:end="171:61"><name pos:start="171:40" pos:end="171:61"><name pos:start="171:40" pos:end="171:42">ctx</name><operator pos:start="171:43" pos:end="171:44">-&gt;</operator><name pos:start="171:45" pos:end="171:57">twopass_stats</name><operator pos:start="171:58" pos:end="171:58">.</operator><name pos:start="171:59" pos:end="171:61">buf</name></name></expr></argument>, <argument pos:start="171:64" pos:end="171:78"><expr pos:start="171:64" pos:end="171:78"><name pos:start="171:64" pos:end="171:78"><name pos:start="171:64" pos:end="171:68">avctx</name><operator pos:start="171:69" pos:end="171:70">-&gt;</operator><name pos:start="171:71" pos:end="171:78">stats_in</name></name></expr></argument>,

                                       <argument pos:start="173:40" pos:end="173:60"><expr pos:start="173:40" pos:end="173:60"><name pos:start="173:40" pos:end="173:60"><name pos:start="173:40" pos:end="173:42">ctx</name><operator pos:start="173:43" pos:end="173:44">-&gt;</operator><name pos:start="173:45" pos:end="173:57">twopass_stats</name><operator pos:start="173:58" pos:end="173:58">.</operator><name pos:start="173:59" pos:end="173:60">sz</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="175:9" pos:end="181:9"><if pos:start="175:9" pos:end="181:9">if <condition pos:start="175:12" pos:end="175:28">(<expr pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:23">decode_size</name> <operator pos:start="175:25" pos:end="175:25">&lt;</operator> <literal type="number" pos:start="175:27" pos:end="175:27">0</literal></expr>)</condition> <block pos:start="175:30" pos:end="181:9">{<block_content pos:start="177:13" pos:end="179:39">

            <expr_stmt pos:start="177:13" pos:end="177:71"><expr pos:start="177:13" pos:end="177:70"><call pos:start="177:13" pos:end="177:70"><name pos:start="177:13" pos:end="177:18">av_log</name><argument_list pos:start="177:19" pos:end="177:70">(<argument pos:start="177:20" pos:end="177:24"><expr pos:start="177:20" pos:end="177:24"><name pos:start="177:20" pos:end="177:24">avctx</name></expr></argument>, <argument pos:start="177:27" pos:end="177:38"><expr pos:start="177:27" pos:end="177:38"><name pos:start="177:27" pos:end="177:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="177:41" pos:end="177:69"><expr pos:start="177:41" pos:end="177:69"><literal type="string" pos:start="177:41" pos:end="177:69">"Stat buffer decode failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="179:13" pos:end="179:39">return <expr pos:start="179:20" pos:end="179:38"><name pos:start="179:20" pos:end="179:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="185:9" pos:end="185:49"><expr pos:start="185:9" pos:end="185:48"><name pos:start="185:9" pos:end="185:29"><name pos:start="185:9" pos:end="185:11">ctx</name><operator pos:start="185:12" pos:end="185:13">-&gt;</operator><name pos:start="185:14" pos:end="185:26">twopass_stats</name><operator pos:start="185:27" pos:end="185:27">.</operator><name pos:start="185:28" pos:end="185:29">sz</name></name>      <operator pos:start="185:36" pos:end="185:36">=</operator> <name pos:start="185:38" pos:end="185:48">decode_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="187:9" pos:end="187:56"><expr pos:start="187:9" pos:end="187:55"><name pos:start="187:9" pos:end="187:34"><name pos:start="187:9" pos:end="187:14">enccfg</name><operator pos:start="187:15" pos:end="187:15">.</operator><name pos:start="187:16" pos:end="187:34">rc_twopass_stats_in</name></name> <operator pos:start="187:36" pos:end="187:36">=</operator> <name pos:start="187:38" pos:end="187:55"><name pos:start="187:38" pos:end="187:40">ctx</name><operator pos:start="187:41" pos:end="187:42">-&gt;</operator><name pos:start="187:43" pos:end="187:55">twopass_stats</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="193:5" pos:end="197:18">/* 0-3: For non-zero values the encoder increasingly optimizes for reduced

       complexity playback on low powered devices at the expense of encode

       quality. */</comment>

   <if_stmt pos:start="199:4" pos:end="201:41"><if pos:start="199:4" pos:end="201:41">if <condition pos:start="199:7" pos:end="199:44">(<expr pos:start="199:8" pos:end="199:43"><name pos:start="199:8" pos:end="199:21"><name pos:start="199:8" pos:end="199:12">avctx</name><operator pos:start="199:13" pos:end="199:14">-&gt;</operator><name pos:start="199:15" pos:end="199:21">profile</name></name> <operator pos:start="199:23" pos:end="199:24">!=</operator> <name pos:start="199:26" pos:end="199:43">FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo" pos:start="201:8" pos:end="201:41"><block_content pos:start="201:8" pos:end="201:41">

       <expr_stmt pos:start="201:8" pos:end="201:41"><expr pos:start="201:8" pos:end="201:40"><name pos:start="201:8" pos:end="201:23"><name pos:start="201:8" pos:end="201:13">enccfg</name><operator pos:start="201:14" pos:end="201:14">.</operator><name pos:start="201:15" pos:end="201:23">g_profile</name></name> <operator pos:start="201:25" pos:end="201:25">=</operator> <name pos:start="201:27" pos:end="201:40"><name pos:start="201:27" pos:end="201:31">avctx</name><operator pos:start="201:32" pos:end="201:33">-&gt;</operator><name pos:start="201:34" pos:end="201:40">profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:89"><expr pos:start="205:5" pos:end="205:88"><name pos:start="205:5" pos:end="205:28"><name pos:start="205:5" pos:end="205:10">enccfg</name><operator pos:start="205:11" pos:end="205:11">.</operator><name pos:start="205:12" pos:end="205:28">g_error_resilient</name></name> <operator pos:start="205:30" pos:end="205:30">=</operator> <name pos:start="205:32" pos:end="205:51"><name pos:start="205:32" pos:end="205:34">ctx</name><operator pos:start="205:35" pos:end="205:36">-&gt;</operator><name pos:start="205:37" pos:end="205:51">error_resilient</name></name> <operator pos:start="205:53" pos:end="205:54">||</operator> <name pos:start="205:56" pos:end="205:65"><name pos:start="205:56" pos:end="205:58">ctx</name><operator pos:start="205:59" pos:end="205:60">-&gt;</operator><name pos:start="205:61" pos:end="205:65">flags</name></name> <operator pos:start="205:67" pos:end="205:67">&amp;</operator> <name pos:start="205:69" pos:end="205:88">VP8F_ERROR_RESILIENT</name></expr>;</expr_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:33"><expr pos:start="209:5" pos:end="209:32"><call pos:start="209:5" pos:end="209:32"><name pos:start="209:5" pos:end="209:16">dump_enc_cfg</name><argument_list pos:start="209:17" pos:end="209:32">(<argument pos:start="209:18" pos:end="209:22"><expr pos:start="209:18" pos:end="209:22"><name pos:start="209:18" pos:end="209:22">avctx</name></expr></argument>, <argument pos:start="209:25" pos:end="209:31"><expr pos:start="209:25" pos:end="209:31"><operator pos:start="209:25" pos:end="209:25">&amp;</operator><name pos:start="209:26" pos:end="209:31">enccfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="211:5" pos:end="211:35">/* Construct Encoder Context */</comment>

    <expr_stmt pos:start="213:5" pos:end="213:63"><expr pos:start="213:5" pos:end="213:62"><name pos:start="213:5" pos:end="213:7">res</name> <operator pos:start="213:9" pos:end="213:9">=</operator> <call pos:start="213:11" pos:end="213:62"><name pos:start="213:11" pos:end="213:28">vpx_codec_enc_init</name><argument_list pos:start="213:29" pos:end="213:62">(<argument pos:start="213:30" pos:end="213:42"><expr pos:start="213:30" pos:end="213:42"><operator pos:start="213:30" pos:end="213:30">&amp;</operator><name pos:start="213:31" pos:end="213:42"><name pos:start="213:31" pos:end="213:33">ctx</name><operator pos:start="213:34" pos:end="213:35">-&gt;</operator><name pos:start="213:36" pos:end="213:42">encoder</name></name></expr></argument>, <argument pos:start="213:45" pos:end="213:49"><expr pos:start="213:45" pos:end="213:49"><name pos:start="213:45" pos:end="213:49">iface</name></expr></argument>, <argument pos:start="213:52" pos:end="213:58"><expr pos:start="213:52" pos:end="213:58"><operator pos:start="213:52" pos:end="213:52">&amp;</operator><name pos:start="213:53" pos:end="213:58">enccfg</name></expr></argument>, <argument pos:start="213:61" pos:end="213:61"><expr pos:start="213:61" pos:end="213:61"><literal type="number" pos:start="213:61" pos:end="213:61">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="215:5" pos:end="221:5"><if pos:start="215:5" pos:end="221:5">if <condition pos:start="215:8" pos:end="215:28">(<expr pos:start="215:9" pos:end="215:27"><name pos:start="215:9" pos:end="215:11">res</name> <operator pos:start="215:13" pos:end="215:14">!=</operator> <name pos:start="215:16" pos:end="215:27">VPX_CODEC_OK</name></expr>)</condition> <block pos:start="215:30" pos:end="221:5">{<block_content pos:start="217:9" pos:end="219:31">

        <expr_stmt pos:start="217:9" pos:end="217:65"><expr pos:start="217:9" pos:end="217:64"><call pos:start="217:9" pos:end="217:64"><name pos:start="217:9" pos:end="217:25">log_encoder_error</name><argument_list pos:start="217:26" pos:end="217:64">(<argument pos:start="217:27" pos:end="217:31"><expr pos:start="217:27" pos:end="217:31"><name pos:start="217:27" pos:end="217:31">avctx</name></expr></argument>, <argument pos:start="217:34" pos:end="217:63"><expr pos:start="217:34" pos:end="217:63"><literal type="string" pos:start="217:34" pos:end="217:63">"Failed to initialize encoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="219:9" pos:end="219:31">return <expr pos:start="219:16" pos:end="219:30"><call pos:start="219:16" pos:end="219:30"><name pos:start="219:16" pos:end="219:22">AVERROR</name><argument_list pos:start="219:23" pos:end="219:30">(<argument pos:start="219:24" pos:end="219:29"><expr pos:start="219:24" pos:end="219:29"><name pos:start="219:24" pos:end="219:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="225:5" pos:end="225:67">//codec control failures are currently treated only as warnings</comment>

    <expr_stmt pos:start="227:5" pos:end="227:55"><expr pos:start="227:5" pos:end="227:54"><call pos:start="227:5" pos:end="227:54"><name pos:start="227:5" pos:end="227:10">av_log</name><argument_list pos:start="227:11" pos:end="227:54">(<argument pos:start="227:12" pos:end="227:16"><expr pos:start="227:12" pos:end="227:16"><name pos:start="227:12" pos:end="227:16">avctx</name></expr></argument>, <argument pos:start="227:19" pos:end="227:30"><expr pos:start="227:19" pos:end="227:30"><name pos:start="227:19" pos:end="227:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="227:33" pos:end="227:53"><expr pos:start="227:33" pos:end="227:53"><literal type="string" pos:start="227:33" pos:end="227:53">"vpx_codec_control\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="229:5" pos:end="231:70"><if pos:start="229:5" pos:end="231:70">if <condition pos:start="229:8" pos:end="229:33">(<expr pos:start="229:9" pos:end="229:32"><name pos:start="229:9" pos:end="229:21"><name pos:start="229:9" pos:end="229:11">ctx</name><operator pos:start="229:12" pos:end="229:13">-&gt;</operator><name pos:start="229:14" pos:end="229:21">cpu_used</name></name> <operator pos:start="229:23" pos:end="229:24">!=</operator> <name pos:start="229:26" pos:end="229:32">INT_MIN</name></expr>)</condition><block type="pseudo" pos:start="231:9" pos:end="231:70"><block_content pos:start="231:9" pos:end="231:70">

        <expr_stmt pos:start="231:9" pos:end="231:70"><expr pos:start="231:9" pos:end="231:69"><call pos:start="231:9" pos:end="231:69"><name pos:start="231:9" pos:end="231:20">codecctl_int</name><argument_list pos:start="231:21" pos:end="231:69">(<argument pos:start="231:22" pos:end="231:26"><expr pos:start="231:22" pos:end="231:26"><name pos:start="231:22" pos:end="231:26">avctx</name></expr></argument>, <argument pos:start="231:29" pos:end="231:44"><expr pos:start="231:29" pos:end="231:44"><name pos:start="231:29" pos:end="231:44">VP8E_SET_CPUUSED</name></expr></argument>,          <argument pos:start="231:56" pos:end="231:68"><expr pos:start="231:56" pos:end="231:68"><name pos:start="231:56" pos:end="231:68"><name pos:start="231:56" pos:end="231:58">ctx</name><operator pos:start="231:59" pos:end="231:60">-&gt;</operator><name pos:start="231:61" pos:end="231:68">cpu_used</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="233:5" pos:end="235:30"><if pos:start="233:5" pos:end="235:30">if <condition pos:start="233:8" pos:end="233:39">(<expr pos:start="233:9" pos:end="233:38"><name pos:start="233:9" pos:end="233:18"><name pos:start="233:9" pos:end="233:11">ctx</name><operator pos:start="233:12" pos:end="233:13">-&gt;</operator><name pos:start="233:14" pos:end="233:18">flags</name></name> <operator pos:start="233:20" pos:end="233:20">&amp;</operator> <name pos:start="233:22" pos:end="233:38">VP8F_AUTO_ALT_REF</name></expr>)</condition><block type="pseudo" pos:start="235:9" pos:end="235:30"><block_content pos:start="235:9" pos:end="235:30">

        <expr_stmt pos:start="235:9" pos:end="235:30"><expr pos:start="235:9" pos:end="235:29"><name pos:start="235:9" pos:end="235:25"><name pos:start="235:9" pos:end="235:11">ctx</name><operator pos:start="235:12" pos:end="235:13">-&gt;</operator><name pos:start="235:14" pos:end="235:25">auto_alt_ref</name></name> <operator pos:start="235:27" pos:end="235:27">=</operator> <literal type="number" pos:start="235:29" pos:end="235:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="237:5" pos:end="239:74"><if pos:start="237:5" pos:end="239:74">if <condition pos:start="237:8" pos:end="237:31">(<expr pos:start="237:9" pos:end="237:30"><name pos:start="237:9" pos:end="237:25"><name pos:start="237:9" pos:end="237:11">ctx</name><operator pos:start="237:12" pos:end="237:13">-&gt;</operator><name pos:start="237:14" pos:end="237:25">auto_alt_ref</name></name> <operator pos:start="237:27" pos:end="237:28">&gt;=</operator> <literal type="number" pos:start="237:30" pos:end="237:30">0</literal></expr>)</condition><block type="pseudo" pos:start="239:9" pos:end="239:74"><block_content pos:start="239:9" pos:end="239:74">

        <expr_stmt pos:start="239:9" pos:end="239:74"><expr pos:start="239:9" pos:end="239:73"><call pos:start="239:9" pos:end="239:73"><name pos:start="239:9" pos:end="239:20">codecctl_int</name><argument_list pos:start="239:21" pos:end="239:73">(<argument pos:start="239:22" pos:end="239:26"><expr pos:start="239:22" pos:end="239:26"><name pos:start="239:22" pos:end="239:26">avctx</name></expr></argument>, <argument pos:start="239:29" pos:end="239:53"><expr pos:start="239:29" pos:end="239:53"><name pos:start="239:29" pos:end="239:53">VP8E_SET_ENABLEAUTOALTREF</name></expr></argument>, <argument pos:start="239:56" pos:end="239:72"><expr pos:start="239:56" pos:end="239:72"><name pos:start="239:56" pos:end="239:72"><name pos:start="239:56" pos:end="239:58">ctx</name><operator pos:start="239:59" pos:end="239:60">-&gt;</operator><name pos:start="239:61" pos:end="239:72">auto_alt_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="241:5" pos:end="243:77"><if pos:start="241:5" pos:end="243:77">if <condition pos:start="241:8" pos:end="241:34">(<expr pos:start="241:9" pos:end="241:33"><name pos:start="241:9" pos:end="241:28"><name pos:start="241:9" pos:end="241:11">ctx</name><operator pos:start="241:12" pos:end="241:13">-&gt;</operator><name pos:start="241:14" pos:end="241:28">arnr_max_frames</name></name> <operator pos:start="241:30" pos:end="241:31">&gt;=</operator> <literal type="number" pos:start="241:33" pos:end="241:33">0</literal></expr>)</condition><block type="pseudo" pos:start="243:9" pos:end="243:77"><block_content pos:start="243:9" pos:end="243:77">

        <expr_stmt pos:start="243:9" pos:end="243:77"><expr pos:start="243:9" pos:end="243:76"><call pos:start="243:9" pos:end="243:76"><name pos:start="243:9" pos:end="243:20">codecctl_int</name><argument_list pos:start="243:21" pos:end="243:76">(<argument pos:start="243:22" pos:end="243:26"><expr pos:start="243:22" pos:end="243:26"><name pos:start="243:22" pos:end="243:26">avctx</name></expr></argument>, <argument pos:start="243:29" pos:end="243:51"><expr pos:start="243:29" pos:end="243:51"><name pos:start="243:29" pos:end="243:51">VP8E_SET_ARNR_MAXFRAMES</name></expr></argument>,   <argument pos:start="243:56" pos:end="243:75"><expr pos:start="243:56" pos:end="243:75"><name pos:start="243:56" pos:end="243:75"><name pos:start="243:56" pos:end="243:58">ctx</name><operator pos:start="243:59" pos:end="243:60">-&gt;</operator><name pos:start="243:61" pos:end="243:75">arnr_max_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="245:5" pos:end="247:75"><if pos:start="245:5" pos:end="247:75">if <condition pos:start="245:8" pos:end="245:32">(<expr pos:start="245:9" pos:end="245:31"><name pos:start="245:9" pos:end="245:26"><name pos:start="245:9" pos:end="245:11">ctx</name><operator pos:start="245:12" pos:end="245:13">-&gt;</operator><name pos:start="245:14" pos:end="245:26">arnr_strength</name></name> <operator pos:start="245:28" pos:end="245:29">&gt;=</operator> <literal type="number" pos:start="245:31" pos:end="245:31">0</literal></expr>)</condition><block type="pseudo" pos:start="247:9" pos:end="247:75"><block_content pos:start="247:9" pos:end="247:75">

        <expr_stmt pos:start="247:9" pos:end="247:75"><expr pos:start="247:9" pos:end="247:74"><call pos:start="247:9" pos:end="247:74"><name pos:start="247:9" pos:end="247:20">codecctl_int</name><argument_list pos:start="247:21" pos:end="247:74">(<argument pos:start="247:22" pos:end="247:26"><expr pos:start="247:22" pos:end="247:26"><name pos:start="247:22" pos:end="247:26">avctx</name></expr></argument>, <argument pos:start="247:29" pos:end="247:50"><expr pos:start="247:29" pos:end="247:50"><name pos:start="247:29" pos:end="247:50">VP8E_SET_ARNR_STRENGTH</name></expr></argument>,    <argument pos:start="247:56" pos:end="247:73"><expr pos:start="247:56" pos:end="247:73"><name pos:start="247:56" pos:end="247:73"><name pos:start="247:56" pos:end="247:58">ctx</name><operator pos:start="247:59" pos:end="247:60">-&gt;</operator><name pos:start="247:61" pos:end="247:73">arnr_strength</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="249:5" pos:end="251:71"><if pos:start="249:5" pos:end="251:71">if <condition pos:start="249:8" pos:end="249:28">(<expr pos:start="249:9" pos:end="249:27"><name pos:start="249:9" pos:end="249:22"><name pos:start="249:9" pos:end="249:11">ctx</name><operator pos:start="249:12" pos:end="249:13">-&gt;</operator><name pos:start="249:14" pos:end="249:22">arnr_type</name></name> <operator pos:start="249:24" pos:end="249:25">&gt;=</operator> <literal type="number" pos:start="249:27" pos:end="249:27">0</literal></expr>)</condition><block type="pseudo" pos:start="251:9" pos:end="251:71"><block_content pos:start="251:9" pos:end="251:71">

        <expr_stmt pos:start="251:9" pos:end="251:71"><expr pos:start="251:9" pos:end="251:70"><call pos:start="251:9" pos:end="251:70"><name pos:start="251:9" pos:end="251:20">codecctl_int</name><argument_list pos:start="251:21" pos:end="251:70">(<argument pos:start="251:22" pos:end="251:26"><expr pos:start="251:22" pos:end="251:26"><name pos:start="251:22" pos:end="251:26">avctx</name></expr></argument>, <argument pos:start="251:29" pos:end="251:46"><expr pos:start="251:29" pos:end="251:46"><name pos:start="251:29" pos:end="251:46">VP8E_SET_ARNR_TYPE</name></expr></argument>,        <argument pos:start="251:56" pos:end="251:69"><expr pos:start="251:56" pos:end="251:69"><name pos:start="251:56" pos:end="251:69"><name pos:start="251:56" pos:end="251:58">ctx</name><operator pos:start="251:59" pos:end="251:60">-&gt;</operator><name pos:start="251:61" pos:end="251:69">arnr_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:76"><expr pos:start="253:5" pos:end="253:75"><call pos:start="253:5" pos:end="253:75"><name pos:start="253:5" pos:end="253:16">codecctl_int</name><argument_list pos:start="253:17" pos:end="253:75">(<argument pos:start="253:18" pos:end="253:22"><expr pos:start="253:18" pos:end="253:22"><name pos:start="253:18" pos:end="253:22">avctx</name></expr></argument>, <argument pos:start="253:25" pos:end="253:50"><expr pos:start="253:25" pos:end="253:50"><name pos:start="253:25" pos:end="253:50">VP8E_SET_NOISE_SENSITIVITY</name></expr></argument>, <argument pos:start="253:53" pos:end="253:74"><expr pos:start="253:53" pos:end="253:74"><name pos:start="253:53" pos:end="253:74"><name pos:start="253:53" pos:end="253:57">avctx</name><operator pos:start="253:58" pos:end="253:59">-&gt;</operator><name pos:start="253:60" pos:end="253:74">noise_reduction</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="255:5" pos:end="255:76"><expr pos:start="255:5" pos:end="255:75"><call pos:start="255:5" pos:end="255:75"><name pos:start="255:5" pos:end="255:16">codecctl_int</name><argument_list pos:start="255:17" pos:end="255:75">(<argument pos:start="255:18" pos:end="255:22"><expr pos:start="255:18" pos:end="255:22"><name pos:start="255:18" pos:end="255:22">avctx</name></expr></argument>, <argument pos:start="255:25" pos:end="255:49"><expr pos:start="255:25" pos:end="255:49"><name pos:start="255:25" pos:end="255:49">VP8E_SET_TOKEN_PARTITIONS</name></expr></argument>,  <argument pos:start="255:53" pos:end="255:74"><expr pos:start="255:53" pos:end="255:74"><call pos:start="255:53" pos:end="255:74"><name pos:start="255:53" pos:end="255:59">av_log2</name><argument_list pos:start="255:60" pos:end="255:74">(<argument pos:start="255:61" pos:end="255:73"><expr pos:start="255:61" pos:end="255:73"><name pos:start="255:61" pos:end="255:73"><name pos:start="255:61" pos:end="255:65">avctx</name><operator pos:start="255:66" pos:end="255:67">-&gt;</operator><name pos:start="255:68" pos:end="255:73">slices</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:73"><expr pos:start="257:5" pos:end="257:72"><call pos:start="257:5" pos:end="257:72"><name pos:start="257:5" pos:end="257:16">codecctl_int</name><argument_list pos:start="257:17" pos:end="257:72">(<argument pos:start="257:18" pos:end="257:22"><expr pos:start="257:18" pos:end="257:22"><name pos:start="257:18" pos:end="257:22">avctx</name></expr></argument>, <argument pos:start="257:25" pos:end="257:49"><expr pos:start="257:25" pos:end="257:49"><name pos:start="257:25" pos:end="257:49">VP8E_SET_STATIC_THRESHOLD</name></expr></argument>,  <argument pos:start="257:53" pos:end="257:71"><expr pos:start="257:53" pos:end="257:71"><name pos:start="257:53" pos:end="257:71"><name pos:start="257:53" pos:end="257:57">avctx</name><operator pos:start="257:58" pos:end="257:59">-&gt;</operator><name pos:start="257:60" pos:end="257:71">mb_threshold</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:62"><expr pos:start="259:5" pos:end="259:61"><call pos:start="259:5" pos:end="259:61"><name pos:start="259:5" pos:end="259:16">codecctl_int</name><argument_list pos:start="259:17" pos:end="259:61">(<argument pos:start="259:18" pos:end="259:22"><expr pos:start="259:18" pos:end="259:22"><name pos:start="259:18" pos:end="259:22">avctx</name></expr></argument>, <argument pos:start="259:25" pos:end="259:41"><expr pos:start="259:25" pos:end="259:41"><name pos:start="259:25" pos:end="259:41">VP8E_SET_CQ_LEVEL</name></expr></argument>,          <argument pos:start="259:53" pos:end="259:60"><expr pos:start="259:53" pos:end="259:60"><name pos:start="259:53" pos:end="259:60"><name pos:start="259:53" pos:end="259:55">ctx</name><operator pos:start="259:56" pos:end="259:57">-&gt;</operator><name pos:start="259:58" pos:end="259:60">crf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="261:5" pos:end="263:81"><if pos:start="261:5" pos:end="263:81">if <condition pos:start="261:8" pos:end="261:33">(<expr pos:start="261:9" pos:end="261:32"><name pos:start="261:9" pos:end="261:27"><name pos:start="261:9" pos:end="261:11">ctx</name><operator pos:start="261:12" pos:end="261:13">-&gt;</operator><name pos:start="261:14" pos:end="261:27">max_intra_rate</name></name> <operator pos:start="261:29" pos:end="261:30">&gt;=</operator> <literal type="number" pos:start="261:32" pos:end="261:32">0</literal></expr>)</condition><block type="pseudo" pos:start="263:9" pos:end="263:81"><block_content pos:start="263:9" pos:end="263:81">

        <expr_stmt pos:start="263:9" pos:end="263:81"><expr pos:start="263:9" pos:end="263:80"><call pos:start="263:9" pos:end="263:80"><name pos:start="263:9" pos:end="263:20">codecctl_int</name><argument_list pos:start="263:21" pos:end="263:80">(<argument pos:start="263:22" pos:end="263:26"><expr pos:start="263:22" pos:end="263:26"><name pos:start="263:22" pos:end="263:26">avctx</name></expr></argument>, <argument pos:start="263:29" pos:end="263:58"><expr pos:start="263:29" pos:end="263:58"><name pos:start="263:29" pos:end="263:58">VP8E_SET_MAX_INTRA_BITRATE_PCT</name></expr></argument>, <argument pos:start="263:61" pos:end="263:79"><expr pos:start="263:61" pos:end="263:79"><name pos:start="263:61" pos:end="263:79"><name pos:start="263:61" pos:end="263:63">ctx</name><operator pos:start="263:64" pos:end="263:65">-&gt;</operator><name pos:start="263:66" pos:end="263:79">max_intra_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:71"><expr pos:start="267:5" pos:end="267:70"><call pos:start="267:5" pos:end="267:70"><name pos:start="267:5" pos:end="267:10">av_log</name><argument_list pos:start="267:11" pos:end="267:70">(<argument pos:start="267:12" pos:end="267:16"><expr pos:start="267:12" pos:end="267:16"><name pos:start="267:12" pos:end="267:16">avctx</name></expr></argument>, <argument pos:start="267:19" pos:end="267:30"><expr pos:start="267:19" pos:end="267:30"><name pos:start="267:19" pos:end="267:30">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="267:33" pos:end="267:54"><expr pos:start="267:33" pos:end="267:54"><literal type="string" pos:start="267:33" pos:end="267:54">"Using deadline: %d\n"</literal></expr></argument>, <argument pos:start="267:57" pos:end="267:69"><expr pos:start="267:57" pos:end="267:69"><name pos:start="267:57" pos:end="267:69"><name pos:start="267:57" pos:end="267:59">ctx</name><operator pos:start="267:60" pos:end="267:61">-&gt;</operator><name pos:start="267:62" pos:end="267:69">deadline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="271:5" pos:end="271:86">//provide dummy value to initialize wrapper, values will be updated each _encode()</comment>

    <expr_stmt pos:start="273:5" pos:end="275:36"><expr pos:start="273:5" pos:end="275:35"><call pos:start="273:5" pos:end="275:35"><name pos:start="273:5" pos:end="273:16">vpx_img_wrap</name><argument_list pos:start="273:17" pos:end="275:35">(<argument pos:start="273:18" pos:end="273:29"><expr pos:start="273:18" pos:end="273:29"><operator pos:start="273:18" pos:end="273:18">&amp;</operator><name pos:start="273:19" pos:end="273:29"><name pos:start="273:19" pos:end="273:21">ctx</name><operator pos:start="273:22" pos:end="273:23">-&gt;</operator><name pos:start="273:24" pos:end="273:29">rawimg</name></name></expr></argument>, <argument pos:start="273:32" pos:end="273:47"><expr pos:start="273:32" pos:end="273:47"><name pos:start="273:32" pos:end="273:47">VPX_IMG_FMT_I420</name></expr></argument>, <argument pos:start="273:50" pos:end="273:61"><expr pos:start="273:50" pos:end="273:61"><name pos:start="273:50" pos:end="273:61"><name pos:start="273:50" pos:end="273:54">avctx</name><operator pos:start="273:55" pos:end="273:56">-&gt;</operator><name pos:start="273:57" pos:end="273:61">width</name></name></expr></argument>, <argument pos:start="273:64" pos:end="273:76"><expr pos:start="273:64" pos:end="273:76"><name pos:start="273:64" pos:end="273:76"><name pos:start="273:64" pos:end="273:68">avctx</name><operator pos:start="273:69" pos:end="273:70">-&gt;</operator><name pos:start="273:71" pos:end="273:76">height</name></name></expr></argument>, <argument pos:start="273:79" pos:end="273:79"><expr pos:start="273:79" pos:end="273:79"><literal type="number" pos:start="273:79" pos:end="273:79">1</literal></expr></argument>,

                 <argument pos:start="275:18" pos:end="275:34"><expr pos:start="275:18" pos:end="275:34"><operator pos:start="275:18" pos:end="275:18">(</operator><name pos:start="275:19" pos:end="275:26">unsigned</name> <name pos:start="275:28" pos:end="275:31">char</name><operator pos:start="275:32" pos:end="275:32">*</operator><operator pos:start="275:33" pos:end="275:33">)</operator><literal type="number" pos:start="275:34" pos:end="275:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="279:5" pos:end="279:47"><expr pos:start="279:5" pos:end="279:46"><name pos:start="279:5" pos:end="279:22"><name pos:start="279:5" pos:end="279:9">avctx</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:22">coded_frame</name></name> <operator pos:start="279:24" pos:end="279:24">=</operator> <call pos:start="279:26" pos:end="279:46"><name pos:start="279:26" pos:end="279:44">avcodec_alloc_frame</name><argument_list pos:start="279:45" pos:end="279:46">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="281:5" pos:end="289:5"><if pos:start="281:5" pos:end="289:5">if <condition pos:start="281:8" pos:end="281:28">(<expr pos:start="281:9" pos:end="281:27"><operator pos:start="281:9" pos:end="281:9">!</operator><name pos:start="281:10" pos:end="281:27"><name pos:start="281:10" pos:end="281:14">avctx</name><operator pos:start="281:15" pos:end="281:16">-&gt;</operator><name pos:start="281:17" pos:end="281:27">coded_frame</name></name></expr>)</condition> <block pos:start="281:30" pos:end="289:5">{<block_content pos:start="283:9" pos:end="287:31">

        <expr_stmt pos:start="283:9" pos:end="283:70"><expr pos:start="283:9" pos:end="283:69"><call pos:start="283:9" pos:end="283:69"><name pos:start="283:9" pos:end="283:14">av_log</name><argument_list pos:start="283:15" pos:end="283:69">(<argument pos:start="283:16" pos:end="283:20"><expr pos:start="283:16" pos:end="283:20"><name pos:start="283:16" pos:end="283:20">avctx</name></expr></argument>, <argument pos:start="283:23" pos:end="283:34"><expr pos:start="283:23" pos:end="283:34"><name pos:start="283:23" pos:end="283:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="283:37" pos:end="283:68"><expr pos:start="283:37" pos:end="283:68"><literal type="string" pos:start="283:37" pos:end="283:68">"Error allocating coded frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="285:9" pos:end="285:24"><expr pos:start="285:9" pos:end="285:23"><call pos:start="285:9" pos:end="285:23"><name pos:start="285:9" pos:end="285:16">vp8_free</name><argument_list pos:start="285:17" pos:end="285:23">(<argument pos:start="285:18" pos:end="285:22"><expr pos:start="285:18" pos:end="285:22"><name pos:start="285:18" pos:end="285:22">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="287:9" pos:end="287:31">return <expr pos:start="287:16" pos:end="287:30"><call pos:start="287:16" pos:end="287:30"><name pos:start="287:16" pos:end="287:22">AVERROR</name><argument_list pos:start="287:23" pos:end="287:30">(<argument pos:start="287:24" pos:end="287:29"><expr pos:start="287:24" pos:end="287:29"><name pos:start="287:24" pos:end="287:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <return pos:start="291:5" pos:end="291:13">return <expr pos:start="291:12" pos:end="291:12"><literal type="number" pos:start="291:12" pos:end="291:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
