<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26487.c" pos:tabs="8"><function pos:start="1:1" pos:end="519:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:16">DriveInfo</name> <modifier pos:start="1:18" pos:end="1:18">*</modifier></type><name pos:start="1:19" pos:end="1:31">blockdev_init</name><parameter_list pos:start="1:32" pos:end="5:53">(<parameter pos:start="1:33" pos:end="1:46"><decl pos:start="1:33" pos:end="1:46"><type pos:start="1:33" pos:end="1:46"><name pos:start="1:33" pos:end="1:37">QDict</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">bs_opts</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:55"><decl pos:start="3:33" pos:end="3:55"><type pos:start="3:33" pos:end="3:55"><name pos:start="3:33" pos:end="3:50">BlockInterfaceType</name></type> <name pos:start="3:52" pos:end="3:55">type</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:52"><decl pos:start="5:33" pos:end="5:52"><type pos:start="5:33" pos:end="5:52"><name pos:start="5:33" pos:end="5:46">DriveMediaType</name></type> <name pos:start="5:48" pos:end="5:52">media</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="519:1">{<block_content pos:start="9:5" pos:end="517:16">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">buf</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:20">file</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:22">serial</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:10">ro</name> <init pos:start="15:12" pos:end="15:14">= <expr pos:start="15:14" pos:end="15:14"><literal type="number" pos:start="15:14" pos:end="15:14">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">bdrv_flags</name> <init pos:start="17:20" pos:end="17:22">= <expr pos:start="17:22" pos:end="17:22"><literal type="number" pos:start="17:22" pos:end="17:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:38"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:21">on_read_error</name></decl>, <decl pos:start="19:24" pos:end="19:37"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:24" pos:end="19:37">on_write_error</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:13">DriveInfo</name> <modifier pos:start="21:15" pos:end="21:15">*</modifier></type><name pos:start="21:16" pos:end="21:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:18">ThrottleConfig</name></type> <name pos:start="23:20" pos:end="23:22">cfg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:21"><decl pos:start="25:5" pos:end="25:20"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:16">snapshot</name> <init pos:start="25:18" pos:end="25:20">= <expr pos:start="25:20" pos:end="25:20"><literal type="number" pos:start="25:20" pos:end="25:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:21">copy_on_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:12"><decl pos:start="29:5" pos:end="29:11"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:23"><type pos:start="31:5" pos:end="31:11"><name pos:start="31:5" pos:end="31:9">Error</name> <modifier pos:start="31:11" pos:end="31:11">*</modifier></type><name pos:start="31:12" pos:end="31:16">error</name> <init pos:start="31:18" pos:end="31:23">= <expr pos:start="31:20" pos:end="31:23"><name pos:start="31:20" pos:end="31:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:19"><decl pos:start="33:5" pos:end="33:18"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">QemuOpts</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:18">opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:19"><decl pos:start="35:5" pos:end="35:18"><type pos:start="35:5" pos:end="35:16"><specifier pos:start="35:5" pos:end="35:9">const</specifier> <name pos:start="35:11" pos:end="35:14">char</name> <modifier pos:start="35:16" pos:end="35:16">*</modifier></type><name pos:start="35:17" pos:end="35:18">id</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:34"><decl pos:start="37:5" pos:end="37:33"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">bool</name></type> <name pos:start="37:10" pos:end="37:33">has_driver_specific_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:28"><decl pos:start="39:5" pos:end="39:27"><type pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:15">BlockDriver</name> <modifier pos:start="39:17" pos:end="39:17">*</modifier></type><name pos:start="39:18" pos:end="39:20">drv</name> <init pos:start="39:22" pos:end="39:27">= <expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="43:5" pos:end="45:56">/* Check common options by copying from bs_opts to opts, all other options

     * stay in bs_opts for processing by bdrv_open(). */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:42"><expr pos:start="47:5" pos:end="47:41"><name pos:start="47:5" pos:end="47:6">id</name> <operator pos:start="47:8" pos:end="47:8">=</operator> <call pos:start="47:10" pos:end="47:41"><name pos:start="47:10" pos:end="47:26">qdict_get_try_str</name><argument_list pos:start="47:27" pos:end="47:41">(<argument pos:start="47:28" pos:end="47:34"><expr pos:start="47:28" pos:end="47:34"><name pos:start="47:28" pos:end="47:34">bs_opts</name></expr></argument>, <argument pos:start="47:37" pos:end="47:40"><expr pos:start="47:37" pos:end="47:40"><literal type="string" pos:start="47:37" pos:end="47:40">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:68"><expr pos:start="49:5" pos:end="49:67"><name pos:start="49:5" pos:end="49:8">opts</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <call pos:start="49:12" pos:end="49:67"><name pos:start="49:12" pos:end="49:27">qemu_opts_create</name><argument_list pos:start="49:28" pos:end="49:67">(<argument pos:start="49:29" pos:end="49:51"><expr pos:start="49:29" pos:end="49:51"><operator pos:start="49:29" pos:end="49:29">&amp;</operator><name pos:start="49:30" pos:end="49:51">qemu_common_drive_opts</name></expr></argument>, <argument pos:start="49:54" pos:end="49:55"><expr pos:start="49:54" pos:end="49:55"><name pos:start="49:54" pos:end="49:55">id</name></expr></argument>, <argument pos:start="49:58" pos:end="49:58"><expr pos:start="49:58" pos:end="49:58"><literal type="number" pos:start="49:58" pos:end="49:58">1</literal></expr></argument>, <argument pos:start="49:61" pos:end="49:66"><expr pos:start="49:61" pos:end="49:66"><operator pos:start="49:61" pos:end="49:61">&amp;</operator><name pos:start="49:62" pos:end="49:66">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="59:5"><if pos:start="51:5" pos:end="59:5">if <condition pos:start="51:8" pos:end="51:29">(<expr pos:start="51:9" pos:end="51:28"><call pos:start="51:9" pos:end="51:28"><name pos:start="51:9" pos:end="51:20">error_is_set</name><argument_list pos:start="51:21" pos:end="51:28">(<argument pos:start="51:22" pos:end="51:27"><expr pos:start="51:22" pos:end="51:27"><operator pos:start="51:22" pos:end="51:22">&amp;</operator><name pos:start="51:23" pos:end="51:27">error</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:31" pos:end="59:5">{<block_content pos:start="53:9" pos:end="57:20">

        <expr_stmt pos:start="53:9" pos:end="53:33"><expr pos:start="53:9" pos:end="53:32"><call pos:start="53:9" pos:end="53:32"><name pos:start="53:9" pos:end="53:25">qerror_report_err</name><argument_list pos:start="53:26" pos:end="53:32">(<argument pos:start="53:27" pos:end="53:31"><expr pos:start="53:27" pos:end="53:31"><name pos:start="53:27" pos:end="53:31">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:26"><expr pos:start="55:9" pos:end="55:25"><call pos:start="55:9" pos:end="55:25"><name pos:start="55:9" pos:end="55:18">error_free</name><argument_list pos:start="55:19" pos:end="55:25">(<argument pos:start="55:20" pos:end="55:24"><expr pos:start="55:20" pos:end="55:24"><name pos:start="55:20" pos:end="55:24">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:20">return <expr pos:start="57:16" pos:end="57:19"><name pos:start="57:16" pos:end="57:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:50"><expr pos:start="63:5" pos:end="63:49"><call pos:start="63:5" pos:end="63:49"><name pos:start="63:5" pos:end="63:26">qemu_opts_absorb_qdict</name><argument_list pos:start="63:27" pos:end="63:49">(<argument pos:start="63:28" pos:end="63:31"><expr pos:start="63:28" pos:end="63:31"><name pos:start="63:28" pos:end="63:31">opts</name></expr></argument>, <argument pos:start="63:34" pos:end="63:40"><expr pos:start="63:34" pos:end="63:40"><name pos:start="63:34" pos:end="63:40">bs_opts</name></expr></argument>, <argument pos:start="63:43" pos:end="63:48"><expr pos:start="63:43" pos:end="63:48"><operator pos:start="63:43" pos:end="63:43">&amp;</operator><name pos:start="63:44" pos:end="63:48">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="65:5" pos:end="73:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:29">(<expr pos:start="65:9" pos:end="65:28"><call pos:start="65:9" pos:end="65:28"><name pos:start="65:9" pos:end="65:20">error_is_set</name><argument_list pos:start="65:21" pos:end="65:28">(<argument pos:start="65:22" pos:end="65:27"><expr pos:start="65:22" pos:end="65:27"><operator pos:start="65:22" pos:end="65:22">&amp;</operator><name pos:start="65:23" pos:end="65:27">error</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:31" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:20">

        <expr_stmt pos:start="67:9" pos:end="67:33"><expr pos:start="67:9" pos:end="67:32"><call pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:25">qerror_report_err</name><argument_list pos:start="67:26" pos:end="67:32">(<argument pos:start="67:27" pos:end="67:31"><expr pos:start="67:27" pos:end="67:31"><name pos:start="67:27" pos:end="67:31">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:26"><expr pos:start="69:9" pos:end="69:25"><call pos:start="69:9" pos:end="69:25"><name pos:start="69:9" pos:end="69:18">error_free</name><argument_list pos:start="69:19" pos:end="69:25">(<argument pos:start="69:20" pos:end="69:24"><expr pos:start="69:20" pos:end="69:24"><name pos:start="69:20" pos:end="69:24">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:20">return <expr pos:start="71:16" pos:end="71:19"><name pos:start="71:16" pos:end="71:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:11">(<expr pos:start="77:9" pos:end="77:10"><name pos:start="77:9" pos:end="77:10">id</name></expr>)</condition> <block pos:start="77:13" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:33">

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><call pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:17">qdict_del</name><argument_list pos:start="79:18" pos:end="79:32">(<argument pos:start="79:19" pos:end="79:25"><expr pos:start="79:19" pos:end="79:25"><name pos:start="79:19" pos:end="79:25">bs_opts</name></expr></argument>, <argument pos:start="79:28" pos:end="79:31"><expr pos:start="79:28" pos:end="79:31"><literal type="string" pos:start="79:28" pos:end="79:31">"id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:53"><expr pos:start="85:5" pos:end="85:52"><name pos:start="85:5" pos:end="85:28">has_driver_specific_opts</name> <operator pos:start="85:30" pos:end="85:30">=</operator> <operator pos:start="85:32" pos:end="85:32">!</operator><operator pos:start="85:33" pos:end="85:33">!</operator><call pos:start="85:34" pos:end="85:52"><name pos:start="85:34" pos:end="85:43">qdict_size</name><argument_list pos:start="85:44" pos:end="85:52">(<argument pos:start="85:45" pos:end="85:51"><expr pos:start="85:45" pos:end="85:51"><name pos:start="85:45" pos:end="85:51">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="89:5" pos:end="89:28">/* extract parameters */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:54"><expr pos:start="91:5" pos:end="91:53"><name pos:start="91:5" pos:end="91:12">snapshot</name> <operator pos:start="91:14" pos:end="91:14">=</operator> <call pos:start="91:16" pos:end="91:53"><name pos:start="91:16" pos:end="91:32">qemu_opt_get_bool</name><argument_list pos:start="91:33" pos:end="91:53">(<argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">opts</name></expr></argument>, <argument pos:start="91:40" pos:end="91:49"><expr pos:start="91:40" pos:end="91:49"><literal type="string" pos:start="91:40" pos:end="91:49">"snapshot"</literal></expr></argument>, <argument pos:start="91:52" pos:end="91:52"><expr pos:start="91:52" pos:end="91:52"><literal type="number" pos:start="91:52" pos:end="91:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:49"><expr pos:start="93:5" pos:end="93:48"><name pos:start="93:5" pos:end="93:6">ro</name> <operator pos:start="93:8" pos:end="93:8">=</operator> <call pos:start="93:10" pos:end="93:48"><name pos:start="93:10" pos:end="93:26">qemu_opt_get_bool</name><argument_list pos:start="93:27" pos:end="93:48">(<argument pos:start="93:28" pos:end="93:31"><expr pos:start="93:28" pos:end="93:31"><name pos:start="93:28" pos:end="93:31">opts</name></expr></argument>, <argument pos:start="93:34" pos:end="93:44"><expr pos:start="93:34" pos:end="93:44"><literal type="string" pos:start="93:34" pos:end="93:44">"read-only"</literal></expr></argument>, <argument pos:start="93:47" pos:end="93:47"><expr pos:start="93:47" pos:end="93:47"><literal type="number" pos:start="93:47" pos:end="93:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:66"><expr pos:start="95:5" pos:end="95:65"><name pos:start="95:5" pos:end="95:16">copy_on_read</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:65"><name pos:start="95:20" pos:end="95:36">qemu_opt_get_bool</name><argument_list pos:start="95:37" pos:end="95:65">(<argument pos:start="95:38" pos:end="95:41"><expr pos:start="95:38" pos:end="95:41"><name pos:start="95:38" pos:end="95:41">opts</name></expr></argument>, <argument pos:start="95:44" pos:end="95:57"><expr pos:start="95:44" pos:end="95:57"><literal type="string" pos:start="95:44" pos:end="95:57">"copy-on-read"</literal></expr></argument>, <argument pos:start="95:60" pos:end="95:64"><expr pos:start="95:60" pos:end="95:64"><name pos:start="95:60" pos:end="95:64">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="99:5" pos:end="99:38"><expr pos:start="99:5" pos:end="99:37"><name pos:start="99:5" pos:end="99:8">file</name> <operator pos:start="99:10" pos:end="99:10">=</operator> <call pos:start="99:12" pos:end="99:37"><name pos:start="99:12" pos:end="99:23">qemu_opt_get</name><argument_list pos:start="99:24" pos:end="99:37">(<argument pos:start="99:25" pos:end="99:28"><expr pos:start="99:25" pos:end="99:28"><name pos:start="99:25" pos:end="99:28">opts</name></expr></argument>, <argument pos:start="99:31" pos:end="99:36"><expr pos:start="99:31" pos:end="99:36"><literal type="string" pos:start="99:31" pos:end="99:36">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="101:5" pos:end="101:42"><expr pos:start="101:5" pos:end="101:41"><name pos:start="101:5" pos:end="101:10">serial</name> <operator pos:start="101:12" pos:end="101:12">=</operator> <call pos:start="101:14" pos:end="101:41"><name pos:start="101:14" pos:end="101:25">qemu_opt_get</name><argument_list pos:start="101:26" pos:end="101:41">(<argument pos:start="101:27" pos:end="101:30"><expr pos:start="101:27" pos:end="101:30"><name pos:start="101:27" pos:end="101:30">opts</name></expr></argument>, <argument pos:start="101:33" pos:end="101:40"><expr pos:start="101:33" pos:end="101:40"><literal type="string" pos:start="101:33" pos:end="101:40">"serial"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="105:5" pos:end="115:5"><if pos:start="105:5" pos:end="115:5">if <condition pos:start="105:8" pos:end="105:54">(<expr pos:start="105:9" pos:end="105:53"><operator pos:start="105:9" pos:end="105:9">(</operator><name pos:start="105:10" pos:end="105:12">buf</name> <operator pos:start="105:14" pos:end="105:14">=</operator> <call pos:start="105:16" pos:end="105:44"><name pos:start="105:16" pos:end="105:27">qemu_opt_get</name><argument_list pos:start="105:28" pos:end="105:44">(<argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><name pos:start="105:29" pos:end="105:32">opts</name></expr></argument>, <argument pos:start="105:35" pos:end="105:43"><expr pos:start="105:35" pos:end="105:43"><literal type="string" pos:start="105:35" pos:end="105:43">"discard"</literal></expr></argument>)</argument_list></call><operator pos:start="105:45" pos:end="105:45">)</operator> <operator pos:start="105:47" pos:end="105:48">!=</operator> <name pos:start="105:50" pos:end="105:53">NULL</name></expr>)</condition> <block pos:start="105:56" pos:end="115:5">{<block_content pos:start="107:9" pos:end="113:9">

        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:60">(<expr pos:start="107:13" pos:end="107:59"><call pos:start="107:13" pos:end="107:54"><name pos:start="107:13" pos:end="107:36">bdrv_parse_discard_flags</name><argument_list pos:start="107:37" pos:end="107:54">(<argument pos:start="107:38" pos:end="107:40"><expr pos:start="107:38" pos:end="107:40"><name pos:start="107:38" pos:end="107:40">buf</name></expr></argument>, <argument pos:start="107:43" pos:end="107:53"><expr pos:start="107:43" pos:end="107:53"><operator pos:start="107:43" pos:end="107:43">&amp;</operator><name pos:start="107:44" pos:end="107:53">bdrv_flags</name></expr></argument>)</argument_list></call> <operator pos:start="107:56" pos:end="107:57">!=</operator> <literal type="number" pos:start="107:59" pos:end="107:59">0</literal></expr>)</condition> <block pos:start="107:62" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:24">

            <expr_stmt pos:start="109:13" pos:end="109:51"><expr pos:start="109:13" pos:end="109:50"><call pos:start="109:13" pos:end="109:50"><name pos:start="109:13" pos:end="109:24">error_report</name><argument_list pos:start="109:25" pos:end="109:50">(<argument pos:start="109:26" pos:end="109:49"><expr pos:start="109:26" pos:end="109:49"><literal type="string" pos:start="109:26" pos:end="109:49">"invalid discard option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:24">return <expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="119:5" pos:end="123:5"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:57">(<expr pos:start="119:9" pos:end="119:56"><call pos:start="119:9" pos:end="119:56"><name pos:start="119:9" pos:end="119:25">qemu_opt_get_bool</name><argument_list pos:start="119:26" pos:end="119:56">(<argument pos:start="119:27" pos:end="119:30"><expr pos:start="119:27" pos:end="119:30"><name pos:start="119:27" pos:end="119:30">opts</name></expr></argument>, <argument pos:start="119:33" pos:end="119:49"><expr pos:start="119:33" pos:end="119:49"><literal type="string" pos:start="119:33" pos:end="119:49">"cache.writeback"</literal></expr></argument>, <argument pos:start="119:52" pos:end="119:55"><expr pos:start="119:52" pos:end="119:55"><name pos:start="119:52" pos:end="119:55">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="119:59" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:38">

        <expr_stmt pos:start="121:9" pos:end="121:38"><expr pos:start="121:9" pos:end="121:37"><name pos:start="121:9" pos:end="121:18">bdrv_flags</name> <operator pos:start="121:20" pos:end="121:21">|=</operator> <name pos:start="121:23" pos:end="121:37">BDRV_O_CACHE_WB</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="125:5" pos:end="129:5"><if pos:start="125:5" pos:end="129:5">if <condition pos:start="125:8" pos:end="125:55">(<expr pos:start="125:9" pos:end="125:54"><call pos:start="125:9" pos:end="125:54"><name pos:start="125:9" pos:end="125:25">qemu_opt_get_bool</name><argument_list pos:start="125:26" pos:end="125:54">(<argument pos:start="125:27" pos:end="125:30"><expr pos:start="125:27" pos:end="125:30"><name pos:start="125:27" pos:end="125:30">opts</name></expr></argument>, <argument pos:start="125:33" pos:end="125:46"><expr pos:start="125:33" pos:end="125:46"><literal type="string" pos:start="125:33" pos:end="125:46">"cache.direct"</literal></expr></argument>, <argument pos:start="125:49" pos:end="125:53"><expr pos:start="125:49" pos:end="125:53"><name pos:start="125:49" pos:end="125:53">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="125:57" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:37">

        <expr_stmt pos:start="127:9" pos:end="127:37"><expr pos:start="127:9" pos:end="127:36"><name pos:start="127:9" pos:end="127:18">bdrv_flags</name> <operator pos:start="127:20" pos:end="127:21">|=</operator> <name pos:start="127:23" pos:end="127:36">BDRV_O_NOCACHE</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="131:5" pos:end="140:0"><if pos:start="131:5" pos:end="140:0">if <condition pos:start="131:8" pos:end="131:57">(<expr pos:start="131:9" pos:end="131:56"><call pos:start="131:9" pos:end="131:56"><name pos:start="131:9" pos:end="131:25">qemu_opt_get_bool</name><argument_list pos:start="131:26" pos:end="131:56">(<argument pos:start="131:27" pos:end="131:30"><expr pos:start="131:27" pos:end="131:30"><name pos:start="131:27" pos:end="131:30">opts</name></expr></argument>, <argument pos:start="131:33" pos:end="131:48"><expr pos:start="131:33" pos:end="131:48"><literal type="string" pos:start="131:33" pos:end="131:48">"cache.no-flush"</literal></expr></argument>, <argument pos:start="131:51" pos:end="131:55"><expr pos:start="131:51" pos:end="131:55"><name pos:start="131:51" pos:end="131:55">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="131:59" pos:end="140:0">{<block_content pos:start="133:9" pos:end="133:38">

        <expr_stmt pos:start="133:9" pos:end="133:38"><expr pos:start="133:9" pos:end="133:37"><name pos:start="133:9" pos:end="133:18">bdrv_flags</name> <operator pos:start="133:20" pos:end="133:21">|=</operator> <name pos:start="133:23" pos:end="133:37">BDRV_O_NO_FLUSH</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:ifdef pos:start="139:1" pos:end="139:23">#<cpp:directive pos:start="139:2" pos:end="139:6">ifdef</cpp:directive> <name pos:start="139:8" pos:end="139:23">CONFIG_LINUX_AIO</name></cpp:ifdef>

    <if_stmt pos:start="141:5" pos:end="162:0"><if pos:start="141:5" pos:end="162:0">if <condition pos:start="141:8" pos:end="141:50">(<expr pos:start="141:9" pos:end="141:49"><operator pos:start="141:9" pos:end="141:9">(</operator><name pos:start="141:10" pos:end="141:12">buf</name> <operator pos:start="141:14" pos:end="141:14">=</operator> <call pos:start="141:16" pos:end="141:40"><name pos:start="141:16" pos:end="141:27">qemu_opt_get</name><argument_list pos:start="141:28" pos:end="141:40">(<argument pos:start="141:29" pos:end="141:32"><expr pos:start="141:29" pos:end="141:32"><name pos:start="141:29" pos:end="141:32">opts</name></expr></argument>, <argument pos:start="141:35" pos:end="141:39"><expr pos:start="141:35" pos:end="141:39"><literal type="string" pos:start="141:35" pos:end="141:39">"aio"</literal></expr></argument>)</argument_list></call><operator pos:start="141:41" pos:end="141:41">)</operator> <operator pos:start="141:43" pos:end="141:44">!=</operator> <name pos:start="141:46" pos:end="141:49">NULL</name></expr>)</condition> <block pos:start="141:52" pos:end="162:0">{<block_content pos:start="143:9" pos:end="157:9">

        <if_stmt pos:start="143:9" pos:end="157:9"><if pos:start="143:9" pos:end="147:9">if <condition pos:start="143:12" pos:end="143:35">(<expr pos:start="143:13" pos:end="143:34"><operator pos:start="143:13" pos:end="143:13">!</operator><call pos:start="143:14" pos:end="143:34"><name pos:start="143:14" pos:end="143:19">strcmp</name><argument_list pos:start="143:20" pos:end="143:34">(<argument pos:start="143:21" pos:end="143:23"><expr pos:start="143:21" pos:end="143:23"><name pos:start="143:21" pos:end="143:23">buf</name></expr></argument>, <argument pos:start="143:26" pos:end="143:33"><expr pos:start="143:26" pos:end="143:33"><literal type="string" pos:start="143:26" pos:end="143:33">"native"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="143:37" pos:end="147:9">{<block_content pos:start="145:13" pos:end="145:44">

            <expr_stmt pos:start="145:13" pos:end="145:44"><expr pos:start="145:13" pos:end="145:43"><name pos:start="145:13" pos:end="145:22">bdrv_flags</name> <operator pos:start="145:24" pos:end="145:25">|=</operator> <name pos:start="145:27" pos:end="145:43">BDRV_O_NATIVE_AIO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="147:11" pos:end="151:9">else if <condition pos:start="147:19" pos:end="147:43">(<expr pos:start="147:20" pos:end="147:42"><operator pos:start="147:20" pos:end="147:20">!</operator><call pos:start="147:21" pos:end="147:42"><name pos:start="147:21" pos:end="147:26">strcmp</name><argument_list pos:start="147:27" pos:end="147:42">(<argument pos:start="147:28" pos:end="147:30"><expr pos:start="147:28" pos:end="147:30"><name pos:start="147:28" pos:end="147:30">buf</name></expr></argument>, <argument pos:start="147:33" pos:end="147:41"><expr pos:start="147:33" pos:end="147:41"><literal type="string" pos:start="147:33" pos:end="147:41">"threads"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:45" pos:end="151:9">{<block_content>

            <comment type="block" pos:start="149:13" pos:end="149:37">/* this is the default */</comment>

        </block_content>}</block></if> <else pos:start="151:11" pos:end="157:9">else <block pos:start="151:16" pos:end="157:9">{<block_content pos:start="153:12" pos:end="155:23">

           <expr_stmt pos:start="153:12" pos:end="153:46"><expr pos:start="153:12" pos:end="153:45"><call pos:start="153:12" pos:end="153:45"><name pos:start="153:12" pos:end="153:23">error_report</name><argument_list pos:start="153:24" pos:end="153:45">(<argument pos:start="153:25" pos:end="153:44"><expr pos:start="153:25" pos:end="153:44"><literal type="string" pos:start="153:25" pos:end="153:44">"invalid aio option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

           <return pos:start="155:12" pos:end="155:23">return <expr pos:start="155:19" pos:end="155:22"><name pos:start="155:19" pos:end="155:22">NULL</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>



    <if_stmt pos:start="165:5" pos:end="191:5"><if pos:start="165:5" pos:end="191:5">if <condition pos:start="165:8" pos:end="165:53">(<expr pos:start="165:9" pos:end="165:52"><operator pos:start="165:9" pos:end="165:9">(</operator><name pos:start="165:10" pos:end="165:12">buf</name> <operator pos:start="165:14" pos:end="165:14">=</operator> <call pos:start="165:16" pos:end="165:43"><name pos:start="165:16" pos:end="165:27">qemu_opt_get</name><argument_list pos:start="165:28" pos:end="165:43">(<argument pos:start="165:29" pos:end="165:32"><expr pos:start="165:29" pos:end="165:32"><name pos:start="165:29" pos:end="165:32">opts</name></expr></argument>, <argument pos:start="165:35" pos:end="165:42"><expr pos:start="165:35" pos:end="165:42"><literal type="string" pos:start="165:35" pos:end="165:42">"format"</literal></expr></argument>)</argument_list></call><operator pos:start="165:44" pos:end="165:44">)</operator> <operator pos:start="165:46" pos:end="165:47">!=</operator> <name pos:start="165:49" pos:end="165:52">NULL</name></expr>)</condition> <block pos:start="165:55" pos:end="191:5">{<block_content pos:start="167:9" pos:end="189:9">

        <if_stmt pos:start="167:9" pos:end="177:9"><if pos:start="167:9" pos:end="177:9">if <condition pos:start="167:12" pos:end="167:32">(<expr pos:start="167:13" pos:end="167:31"><call pos:start="167:13" pos:end="167:31"><name pos:start="167:13" pos:end="167:26">is_help_option</name><argument_list pos:start="167:27" pos:end="167:31">(<argument pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:30">buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="167:34" pos:end="177:9">{<block_content pos:start="169:13" pos:end="175:24">

            <expr_stmt pos:start="169:13" pos:end="169:47"><expr pos:start="169:13" pos:end="169:46"><call pos:start="169:13" pos:end="169:46"><name pos:start="169:13" pos:end="169:24">error_printf</name><argument_list pos:start="169:25" pos:end="169:46">(<argument pos:start="169:26" pos:end="169:45"><expr pos:start="169:26" pos:end="169:45"><literal type="string" pos:start="169:26" pos:end="169:45">"Supported formats:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:57"><expr pos:start="171:13" pos:end="171:56"><call pos:start="171:13" pos:end="171:56"><name pos:start="171:13" pos:end="171:31">bdrv_iterate_format</name><argument_list pos:start="171:32" pos:end="171:56">(<argument pos:start="171:33" pos:end="171:49"><expr pos:start="171:33" pos:end="171:49"><name pos:start="171:33" pos:end="171:49">bdrv_format_print</name></expr></argument>, <argument pos:start="171:52" pos:end="171:55"><expr pos:start="171:52" pos:end="171:55"><name pos:start="171:52" pos:end="171:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:31"><expr pos:start="173:13" pos:end="173:30"><call pos:start="173:13" pos:end="173:30"><name pos:start="173:13" pos:end="173:24">error_printf</name><argument_list pos:start="173:25" pos:end="173:30">(<argument pos:start="173:26" pos:end="173:29"><expr pos:start="173:26" pos:end="173:29"><literal type="string" pos:start="173:26" pos:end="173:29">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="175:13" pos:end="175:24">return <expr pos:start="175:20" pos:end="175:23"><name pos:start="175:20" pos:end="175:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="181:9" pos:end="181:36"><expr pos:start="181:9" pos:end="181:35"><name pos:start="181:9" pos:end="181:11">drv</name> <operator pos:start="181:13" pos:end="181:13">=</operator> <call pos:start="181:15" pos:end="181:35"><name pos:start="181:15" pos:end="181:30">bdrv_find_format</name><argument_list pos:start="181:31" pos:end="181:35">(<argument pos:start="181:32" pos:end="181:34"><expr pos:start="181:32" pos:end="181:34"><name pos:start="181:32" pos:end="181:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="183:17">(<expr pos:start="183:13" pos:end="183:16"><operator pos:start="183:13" pos:end="183:13">!</operator><name pos:start="183:14" pos:end="183:16">drv</name></expr>)</condition> <block pos:start="183:19" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:24">

            <expr_stmt pos:start="185:13" pos:end="185:53"><expr pos:start="185:13" pos:end="185:52"><call pos:start="185:13" pos:end="185:52"><name pos:start="185:13" pos:end="185:24">error_report</name><argument_list pos:start="185:25" pos:end="185:52">(<argument pos:start="185:26" pos:end="185:46"><expr pos:start="185:26" pos:end="185:46"><literal type="string" pos:start="185:26" pos:end="185:46">"'%s' invalid format"</literal></expr></argument>, <argument pos:start="185:49" pos:end="185:51"><expr pos:start="185:49" pos:end="185:51"><name pos:start="185:49" pos:end="185:51">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="187:13" pos:end="187:24">return <expr pos:start="187:20" pos:end="187:23"><name pos:start="187:20" pos:end="187:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:29">/* disk I/O throttling */</comment>

    <expr_stmt pos:start="197:5" pos:end="197:33"><expr pos:start="197:5" pos:end="197:32"><call pos:start="197:5" pos:end="197:32"><name pos:start="197:5" pos:end="197:10">memset</name><argument_list pos:start="197:11" pos:end="197:32">(<argument pos:start="197:12" pos:end="197:15"><expr pos:start="197:12" pos:end="197:15"><operator pos:start="197:12" pos:end="197:12">&amp;</operator><name pos:start="197:13" pos:end="197:15">cfg</name></expr></argument>, <argument pos:start="197:18" pos:end="197:18"><expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">0</literal></expr></argument>, <argument pos:start="197:21" pos:end="197:31"><expr pos:start="197:21" pos:end="197:31"><sizeof pos:start="197:21" pos:end="197:31">sizeof<argument_list pos:start="197:27" pos:end="197:31">(<argument pos:start="197:28" pos:end="197:30"><expr pos:start="197:28" pos:end="197:30"><name pos:start="197:28" pos:end="197:30">cfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="201:61"><expr pos:start="199:5" pos:end="201:60"><name pos:start="199:5" pos:end="199:35"><name pos:start="199:5" pos:end="199:7">cfg</name><operator pos:start="199:8" pos:end="199:8">.</operator><name pos:start="199:9" pos:end="199:15">buckets</name><index pos:start="199:16" pos:end="199:35">[<expr pos:start="199:17" pos:end="199:34"><name pos:start="199:17" pos:end="199:34">THROTTLE_BPS_TOTAL</name></expr>]</index></name><operator pos:start="199:36" pos:end="199:36">.</operator><name pos:start="199:37" pos:end="199:39">avg</name> <operator pos:start="199:41" pos:end="199:41">=</operator>

        <call pos:start="201:9" pos:end="201:60"><name pos:start="201:9" pos:end="201:27">qemu_opt_get_number</name><argument_list pos:start="201:28" pos:end="201:60">(<argument pos:start="201:29" pos:end="201:32"><expr pos:start="201:29" pos:end="201:32"><name pos:start="201:29" pos:end="201:32">opts</name></expr></argument>, <argument pos:start="201:35" pos:end="201:56"><expr pos:start="201:35" pos:end="201:56"><literal type="string" pos:start="201:35" pos:end="201:56">"throttling.bps-total"</literal></expr></argument>, <argument pos:start="201:59" pos:end="201:59"><expr pos:start="201:59" pos:end="201:59"><literal type="number" pos:start="201:59" pos:end="201:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="205:60"><expr pos:start="203:5" pos:end="205:59"><name pos:start="203:5" pos:end="203:34"><name pos:start="203:5" pos:end="203:7">cfg</name><operator pos:start="203:8" pos:end="203:8">.</operator><name pos:start="203:9" pos:end="203:15">buckets</name><index pos:start="203:16" pos:end="203:34">[<expr pos:start="203:17" pos:end="203:33"><name pos:start="203:17" pos:end="203:33">THROTTLE_BPS_READ</name></expr>]</index></name><operator pos:start="203:35" pos:end="203:35">.</operator><name pos:start="203:36" pos:end="203:38">avg</name>  <operator pos:start="203:41" pos:end="203:41">=</operator>

        <call pos:start="205:9" pos:end="205:59"><name pos:start="205:9" pos:end="205:27">qemu_opt_get_number</name><argument_list pos:start="205:28" pos:end="205:59">(<argument pos:start="205:29" pos:end="205:32"><expr pos:start="205:29" pos:end="205:32"><name pos:start="205:29" pos:end="205:32">opts</name></expr></argument>, <argument pos:start="205:35" pos:end="205:55"><expr pos:start="205:35" pos:end="205:55"><literal type="string" pos:start="205:35" pos:end="205:55">"throttling.bps-read"</literal></expr></argument>, <argument pos:start="205:58" pos:end="205:58"><expr pos:start="205:58" pos:end="205:58"><literal type="number" pos:start="205:58" pos:end="205:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="209:61"><expr pos:start="207:5" pos:end="209:60"><name pos:start="207:5" pos:end="207:35"><name pos:start="207:5" pos:end="207:7">cfg</name><operator pos:start="207:8" pos:end="207:8">.</operator><name pos:start="207:9" pos:end="207:15">buckets</name><index pos:start="207:16" pos:end="207:35">[<expr pos:start="207:17" pos:end="207:34"><name pos:start="207:17" pos:end="207:34">THROTTLE_BPS_WRITE</name></expr>]</index></name><operator pos:start="207:36" pos:end="207:36">.</operator><name pos:start="207:37" pos:end="207:39">avg</name> <operator pos:start="207:41" pos:end="207:41">=</operator>

        <call pos:start="209:9" pos:end="209:60"><name pos:start="209:9" pos:end="209:27">qemu_opt_get_number</name><argument_list pos:start="209:28" pos:end="209:60">(<argument pos:start="209:29" pos:end="209:32"><expr pos:start="209:29" pos:end="209:32"><name pos:start="209:29" pos:end="209:32">opts</name></expr></argument>, <argument pos:start="209:35" pos:end="209:56"><expr pos:start="209:35" pos:end="209:56"><literal type="string" pos:start="209:35" pos:end="209:56">"throttling.bps-write"</literal></expr></argument>, <argument pos:start="209:59" pos:end="209:59"><expr pos:start="209:59" pos:end="209:59"><literal type="number" pos:start="209:59" pos:end="209:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="213:62"><expr pos:start="211:5" pos:end="213:61"><name pos:start="211:5" pos:end="211:35"><name pos:start="211:5" pos:end="211:7">cfg</name><operator pos:start="211:8" pos:end="211:8">.</operator><name pos:start="211:9" pos:end="211:15">buckets</name><index pos:start="211:16" pos:end="211:35">[<expr pos:start="211:17" pos:end="211:34"><name pos:start="211:17" pos:end="211:34">THROTTLE_OPS_TOTAL</name></expr>]</index></name><operator pos:start="211:36" pos:end="211:36">.</operator><name pos:start="211:37" pos:end="211:39">avg</name> <operator pos:start="211:41" pos:end="211:41">=</operator>

        <call pos:start="213:9" pos:end="213:61"><name pos:start="213:9" pos:end="213:27">qemu_opt_get_number</name><argument_list pos:start="213:28" pos:end="213:61">(<argument pos:start="213:29" pos:end="213:32"><expr pos:start="213:29" pos:end="213:32"><name pos:start="213:29" pos:end="213:32">opts</name></expr></argument>, <argument pos:start="213:35" pos:end="213:57"><expr pos:start="213:35" pos:end="213:57"><literal type="string" pos:start="213:35" pos:end="213:57">"throttling.iops-total"</literal></expr></argument>, <argument pos:start="213:60" pos:end="213:60"><expr pos:start="213:60" pos:end="213:60"><literal type="number" pos:start="213:60" pos:end="213:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="217:61"><expr pos:start="215:5" pos:end="217:60"><name pos:start="215:5" pos:end="215:34"><name pos:start="215:5" pos:end="215:7">cfg</name><operator pos:start="215:8" pos:end="215:8">.</operator><name pos:start="215:9" pos:end="215:15">buckets</name><index pos:start="215:16" pos:end="215:34">[<expr pos:start="215:17" pos:end="215:33"><name pos:start="215:17" pos:end="215:33">THROTTLE_OPS_READ</name></expr>]</index></name><operator pos:start="215:35" pos:end="215:35">.</operator><name pos:start="215:36" pos:end="215:38">avg</name> <operator pos:start="215:40" pos:end="215:40">=</operator>

        <call pos:start="217:9" pos:end="217:60"><name pos:start="217:9" pos:end="217:27">qemu_opt_get_number</name><argument_list pos:start="217:28" pos:end="217:60">(<argument pos:start="217:29" pos:end="217:32"><expr pos:start="217:29" pos:end="217:32"><name pos:start="217:29" pos:end="217:32">opts</name></expr></argument>, <argument pos:start="217:35" pos:end="217:56"><expr pos:start="217:35" pos:end="217:56"><literal type="string" pos:start="217:35" pos:end="217:56">"throttling.iops-read"</literal></expr></argument>, <argument pos:start="217:59" pos:end="217:59"><expr pos:start="217:59" pos:end="217:59"><literal type="number" pos:start="217:59" pos:end="217:59">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="221:62"><expr pos:start="219:5" pos:end="221:61"><name pos:start="219:5" pos:end="219:35"><name pos:start="219:5" pos:end="219:7">cfg</name><operator pos:start="219:8" pos:end="219:8">.</operator><name pos:start="219:9" pos:end="219:15">buckets</name><index pos:start="219:16" pos:end="219:35">[<expr pos:start="219:17" pos:end="219:34"><name pos:start="219:17" pos:end="219:34">THROTTLE_OPS_WRITE</name></expr>]</index></name><operator pos:start="219:36" pos:end="219:36">.</operator><name pos:start="219:37" pos:end="219:39">avg</name> <operator pos:start="219:41" pos:end="219:41">=</operator>

        <call pos:start="221:9" pos:end="221:61"><name pos:start="221:9" pos:end="221:27">qemu_opt_get_number</name><argument_list pos:start="221:28" pos:end="221:61">(<argument pos:start="221:29" pos:end="221:32"><expr pos:start="221:29" pos:end="221:32"><name pos:start="221:29" pos:end="221:32">opts</name></expr></argument>, <argument pos:start="221:35" pos:end="221:57"><expr pos:start="221:35" pos:end="221:57"><literal type="string" pos:start="221:35" pos:end="221:57">"throttling.iops-write"</literal></expr></argument>, <argument pos:start="221:60" pos:end="221:60"><expr pos:start="221:60" pos:end="221:60"><literal type="number" pos:start="221:60" pos:end="221:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="225:5" pos:end="227:65"><expr pos:start="225:5" pos:end="227:64"><name pos:start="225:5" pos:end="225:35"><name pos:start="225:5" pos:end="225:7">cfg</name><operator pos:start="225:8" pos:end="225:8">.</operator><name pos:start="225:9" pos:end="225:15">buckets</name><index pos:start="225:16" pos:end="225:35">[<expr pos:start="225:17" pos:end="225:34"><name pos:start="225:17" pos:end="225:34">THROTTLE_BPS_TOTAL</name></expr>]</index></name><operator pos:start="225:36" pos:end="225:36">.</operator><name pos:start="225:37" pos:end="225:39">max</name> <operator pos:start="225:41" pos:end="225:41">=</operator>

        <call pos:start="227:9" pos:end="227:64"><name pos:start="227:9" pos:end="227:27">qemu_opt_get_number</name><argument_list pos:start="227:28" pos:end="227:64">(<argument pos:start="227:29" pos:end="227:32"><expr pos:start="227:29" pos:end="227:32"><name pos:start="227:29" pos:end="227:32">opts</name></expr></argument>, <argument pos:start="227:35" pos:end="227:60"><expr pos:start="227:35" pos:end="227:60"><literal type="string" pos:start="227:35" pos:end="227:60">"throttling.bps-total-max"</literal></expr></argument>, <argument pos:start="227:63" pos:end="227:63"><expr pos:start="227:63" pos:end="227:63"><literal type="number" pos:start="227:63" pos:end="227:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="231:64"><expr pos:start="229:5" pos:end="231:63"><name pos:start="229:5" pos:end="229:34"><name pos:start="229:5" pos:end="229:7">cfg</name><operator pos:start="229:8" pos:end="229:8">.</operator><name pos:start="229:9" pos:end="229:15">buckets</name><index pos:start="229:16" pos:end="229:34">[<expr pos:start="229:17" pos:end="229:33"><name pos:start="229:17" pos:end="229:33">THROTTLE_BPS_READ</name></expr>]</index></name><operator pos:start="229:35" pos:end="229:35">.</operator><name pos:start="229:36" pos:end="229:38">max</name>  <operator pos:start="229:41" pos:end="229:41">=</operator>

        <call pos:start="231:9" pos:end="231:63"><name pos:start="231:9" pos:end="231:27">qemu_opt_get_number</name><argument_list pos:start="231:28" pos:end="231:63">(<argument pos:start="231:29" pos:end="231:32"><expr pos:start="231:29" pos:end="231:32"><name pos:start="231:29" pos:end="231:32">opts</name></expr></argument>, <argument pos:start="231:35" pos:end="231:59"><expr pos:start="231:35" pos:end="231:59"><literal type="string" pos:start="231:35" pos:end="231:59">"throttling.bps-read-max"</literal></expr></argument>, <argument pos:start="231:62" pos:end="231:62"><expr pos:start="231:62" pos:end="231:62"><literal type="number" pos:start="231:62" pos:end="231:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="235:65"><expr pos:start="233:5" pos:end="235:64"><name pos:start="233:5" pos:end="233:35"><name pos:start="233:5" pos:end="233:7">cfg</name><operator pos:start="233:8" pos:end="233:8">.</operator><name pos:start="233:9" pos:end="233:15">buckets</name><index pos:start="233:16" pos:end="233:35">[<expr pos:start="233:17" pos:end="233:34"><name pos:start="233:17" pos:end="233:34">THROTTLE_BPS_WRITE</name></expr>]</index></name><operator pos:start="233:36" pos:end="233:36">.</operator><name pos:start="233:37" pos:end="233:39">max</name> <operator pos:start="233:41" pos:end="233:41">=</operator>

        <call pos:start="235:9" pos:end="235:64"><name pos:start="235:9" pos:end="235:27">qemu_opt_get_number</name><argument_list pos:start="235:28" pos:end="235:64">(<argument pos:start="235:29" pos:end="235:32"><expr pos:start="235:29" pos:end="235:32"><name pos:start="235:29" pos:end="235:32">opts</name></expr></argument>, <argument pos:start="235:35" pos:end="235:60"><expr pos:start="235:35" pos:end="235:60"><literal type="string" pos:start="235:35" pos:end="235:60">"throttling.bps-write-max"</literal></expr></argument>, <argument pos:start="235:63" pos:end="235:63"><expr pos:start="235:63" pos:end="235:63"><literal type="number" pos:start="235:63" pos:end="235:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="239:66"><expr pos:start="237:5" pos:end="239:65"><name pos:start="237:5" pos:end="237:35"><name pos:start="237:5" pos:end="237:7">cfg</name><operator pos:start="237:8" pos:end="237:8">.</operator><name pos:start="237:9" pos:end="237:15">buckets</name><index pos:start="237:16" pos:end="237:35">[<expr pos:start="237:17" pos:end="237:34"><name pos:start="237:17" pos:end="237:34">THROTTLE_OPS_TOTAL</name></expr>]</index></name><operator pos:start="237:36" pos:end="237:36">.</operator><name pos:start="237:37" pos:end="237:39">max</name> <operator pos:start="237:41" pos:end="237:41">=</operator>

        <call pos:start="239:9" pos:end="239:65"><name pos:start="239:9" pos:end="239:27">qemu_opt_get_number</name><argument_list pos:start="239:28" pos:end="239:65">(<argument pos:start="239:29" pos:end="239:32"><expr pos:start="239:29" pos:end="239:32"><name pos:start="239:29" pos:end="239:32">opts</name></expr></argument>, <argument pos:start="239:35" pos:end="239:61"><expr pos:start="239:35" pos:end="239:61"><literal type="string" pos:start="239:35" pos:end="239:61">"throttling.iops-total-max"</literal></expr></argument>, <argument pos:start="239:64" pos:end="239:64"><expr pos:start="239:64" pos:end="239:64"><literal type="number" pos:start="239:64" pos:end="239:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="243:65"><expr pos:start="241:5" pos:end="243:64"><name pos:start="241:5" pos:end="241:34"><name pos:start="241:5" pos:end="241:7">cfg</name><operator pos:start="241:8" pos:end="241:8">.</operator><name pos:start="241:9" pos:end="241:15">buckets</name><index pos:start="241:16" pos:end="241:34">[<expr pos:start="241:17" pos:end="241:33"><name pos:start="241:17" pos:end="241:33">THROTTLE_OPS_READ</name></expr>]</index></name><operator pos:start="241:35" pos:end="241:35">.</operator><name pos:start="241:36" pos:end="241:38">max</name> <operator pos:start="241:40" pos:end="241:40">=</operator>

        <call pos:start="243:9" pos:end="243:64"><name pos:start="243:9" pos:end="243:27">qemu_opt_get_number</name><argument_list pos:start="243:28" pos:end="243:64">(<argument pos:start="243:29" pos:end="243:32"><expr pos:start="243:29" pos:end="243:32"><name pos:start="243:29" pos:end="243:32">opts</name></expr></argument>, <argument pos:start="243:35" pos:end="243:60"><expr pos:start="243:35" pos:end="243:60"><literal type="string" pos:start="243:35" pos:end="243:60">"throttling.iops-read-max"</literal></expr></argument>, <argument pos:start="243:63" pos:end="243:63"><expr pos:start="243:63" pos:end="243:63"><literal type="number" pos:start="243:63" pos:end="243:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="247:66"><expr pos:start="245:5" pos:end="247:65"><name pos:start="245:5" pos:end="245:35"><name pos:start="245:5" pos:end="245:7">cfg</name><operator pos:start="245:8" pos:end="245:8">.</operator><name pos:start="245:9" pos:end="245:15">buckets</name><index pos:start="245:16" pos:end="245:35">[<expr pos:start="245:17" pos:end="245:34"><name pos:start="245:17" pos:end="245:34">THROTTLE_OPS_WRITE</name></expr>]</index></name><operator pos:start="245:36" pos:end="245:36">.</operator><name pos:start="245:37" pos:end="245:39">max</name> <operator pos:start="245:41" pos:end="245:41">=</operator>

        <call pos:start="247:9" pos:end="247:65"><name pos:start="247:9" pos:end="247:27">qemu_opt_get_number</name><argument_list pos:start="247:28" pos:end="247:65">(<argument pos:start="247:29" pos:end="247:32"><expr pos:start="247:29" pos:end="247:32"><name pos:start="247:29" pos:end="247:32">opts</name></expr></argument>, <argument pos:start="247:35" pos:end="247:61"><expr pos:start="247:35" pos:end="247:61"><literal type="string" pos:start="247:35" pos:end="247:61">"throttling.iops-write-max"</literal></expr></argument>, <argument pos:start="247:64" pos:end="247:64"><expr pos:start="247:64" pos:end="247:64"><literal type="number" pos:start="247:64" pos:end="247:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:71"><expr pos:start="251:5" pos:end="251:70"><name pos:start="251:5" pos:end="251:15"><name pos:start="251:5" pos:end="251:7">cfg</name><operator pos:start="251:8" pos:end="251:8">.</operator><name pos:start="251:9" pos:end="251:15">op_size</name></name> <operator pos:start="251:17" pos:end="251:17">=</operator> <call pos:start="251:19" pos:end="251:70"><name pos:start="251:19" pos:end="251:37">qemu_opt_get_number</name><argument_list pos:start="251:38" pos:end="251:70">(<argument pos:start="251:39" pos:end="251:42"><expr pos:start="251:39" pos:end="251:42"><name pos:start="251:39" pos:end="251:42">opts</name></expr></argument>, <argument pos:start="251:45" pos:end="251:66"><expr pos:start="251:45" pos:end="251:66"><literal type="string" pos:start="251:45" pos:end="251:66">"throttling.iops-size"</literal></expr></argument>, <argument pos:start="251:69" pos:end="251:69"><expr pos:start="251:69" pos:end="251:69"><literal type="number" pos:start="251:69" pos:end="251:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="255:5" pos:end="263:5"><if pos:start="255:5" pos:end="263:5">if <condition pos:start="255:8" pos:end="255:45">(<expr pos:start="255:9" pos:end="255:44"><operator pos:start="255:9" pos:end="255:9">!</operator><call pos:start="255:10" pos:end="255:44"><name pos:start="255:10" pos:end="255:30">check_throttle_config</name><argument_list pos:start="255:31" pos:end="255:44">(<argument pos:start="255:32" pos:end="255:35"><expr pos:start="255:32" pos:end="255:35"><operator pos:start="255:32" pos:end="255:32">&amp;</operator><name pos:start="255:33" pos:end="255:35">cfg</name></expr></argument>, <argument pos:start="255:38" pos:end="255:43"><expr pos:start="255:38" pos:end="255:43"><operator pos:start="255:38" pos:end="255:38">&amp;</operator><name pos:start="255:39" pos:end="255:43">error</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="255:47" pos:end="263:5">{<block_content pos:start="257:9" pos:end="261:20">

        <expr_stmt pos:start="257:9" pos:end="257:52"><expr pos:start="257:9" pos:end="257:51"><call pos:start="257:9" pos:end="257:51"><name pos:start="257:9" pos:end="257:20">error_report</name><argument_list pos:start="257:21" pos:end="257:51">(<argument pos:start="257:22" pos:end="257:25"><expr pos:start="257:22" pos:end="257:25"><literal type="string" pos:start="257:22" pos:end="257:25">"%s"</literal></expr></argument>, <argument pos:start="257:28" pos:end="257:50"><expr pos:start="257:28" pos:end="257:50"><call pos:start="257:28" pos:end="257:50"><name pos:start="257:28" pos:end="257:43">error_get_pretty</name><argument_list pos:start="257:44" pos:end="257:50">(<argument pos:start="257:45" pos:end="257:49"><expr pos:start="257:45" pos:end="257:49"><name pos:start="257:45" pos:end="257:49">error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:26"><expr pos:start="259:9" pos:end="259:25"><call pos:start="259:9" pos:end="259:25"><name pos:start="259:9" pos:end="259:18">error_free</name><argument_list pos:start="259:19" pos:end="259:25">(<argument pos:start="259:20" pos:end="259:24"><expr pos:start="259:20" pos:end="259:24"><name pos:start="259:20" pos:end="259:24">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="261:9" pos:end="261:20">return <expr pos:start="261:16" pos:end="261:19"><name pos:start="261:16" pos:end="261:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="267:5" pos:end="267:46"><expr pos:start="267:5" pos:end="267:45"><name pos:start="267:5" pos:end="267:18">on_write_error</name> <operator pos:start="267:20" pos:end="267:20">=</operator> <name pos:start="267:22" pos:end="267:45">BLOCKDEV_ON_ERROR_ENOSPC</name></expr>;</expr_stmt>

    <if_stmt pos:start="269:5" pos:end="289:5"><if pos:start="269:5" pos:end="289:5">if <condition pos:start="269:8" pos:end="269:53">(<expr pos:start="269:9" pos:end="269:52"><operator pos:start="269:9" pos:end="269:9">(</operator><name pos:start="269:10" pos:end="269:12">buf</name> <operator pos:start="269:14" pos:end="269:14">=</operator> <call pos:start="269:16" pos:end="269:43"><name pos:start="269:16" pos:end="269:27">qemu_opt_get</name><argument_list pos:start="269:28" pos:end="269:43">(<argument pos:start="269:29" pos:end="269:32"><expr pos:start="269:29" pos:end="269:32"><name pos:start="269:29" pos:end="269:32">opts</name></expr></argument>, <argument pos:start="269:35" pos:end="269:42"><expr pos:start="269:35" pos:end="269:42"><literal type="string" pos:start="269:35" pos:end="269:42">"werror"</literal></expr></argument>)</argument_list></call><operator pos:start="269:44" pos:end="269:44">)</operator> <operator pos:start="269:46" pos:end="269:47">!=</operator> <name pos:start="269:49" pos:end="269:52">NULL</name></expr>)</condition> <block pos:start="269:55" pos:end="289:5">{<block_content pos:start="271:9" pos:end="287:9">

        <if_stmt pos:start="271:9" pos:end="277:9"><if pos:start="271:9" pos:end="277:9">if <condition pos:start="271:12" pos:end="271:86">(<expr pos:start="271:13" pos:end="271:85"><name pos:start="271:13" pos:end="271:16">type</name> <operator pos:start="271:18" pos:end="271:19">!=</operator> <name pos:start="271:21" pos:end="271:26">IF_IDE</name> <operator pos:start="271:28" pos:end="271:29">&amp;&amp;</operator> <name pos:start="271:31" pos:end="271:34">type</name> <operator pos:start="271:36" pos:end="271:37">!=</operator> <name pos:start="271:39" pos:end="271:45">IF_SCSI</name> <operator pos:start="271:47" pos:end="271:48">&amp;&amp;</operator> <name pos:start="271:50" pos:end="271:53">type</name> <operator pos:start="271:55" pos:end="271:56">!=</operator> <name pos:start="271:58" pos:end="271:66">IF_VIRTIO</name> <operator pos:start="271:68" pos:end="271:69">&amp;&amp;</operator> <name pos:start="271:71" pos:end="271:74">type</name> <operator pos:start="271:76" pos:end="271:77">!=</operator> <name pos:start="271:79" pos:end="271:85">IF_NONE</name></expr>)</condition> <block pos:start="271:88" pos:end="277:9">{<block_content pos:start="273:13" pos:end="275:24">

            <expr_stmt pos:start="273:13" pos:end="273:69"><expr pos:start="273:13" pos:end="273:68"><call pos:start="273:13" pos:end="273:68"><name pos:start="273:13" pos:end="273:24">error_report</name><argument_list pos:start="273:25" pos:end="273:68">(<argument pos:start="273:26" pos:end="273:67"><expr pos:start="273:26" pos:end="273:67"><literal type="string" pos:start="273:26" pos:end="273:67">"werror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="275:13" pos:end="275:24">return <expr pos:start="275:20" pos:end="275:23"><name pos:start="275:20" pos:end="275:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="281:9" pos:end="281:58"><expr pos:start="281:9" pos:end="281:57"><name pos:start="281:9" pos:end="281:22">on_write_error</name> <operator pos:start="281:24" pos:end="281:24">=</operator> <call pos:start="281:26" pos:end="281:57"><name pos:start="281:26" pos:end="281:49">parse_block_error_action</name><argument_list pos:start="281:50" pos:end="281:57">(<argument pos:start="281:51" pos:end="281:53"><expr pos:start="281:51" pos:end="281:53"><name pos:start="281:51" pos:end="281:53">buf</name></expr></argument>, <argument pos:start="281:56" pos:end="281:56"><expr pos:start="281:56" pos:end="281:56"><literal type="number" pos:start="281:56" pos:end="281:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="283:9" pos:end="287:9"><if pos:start="283:9" pos:end="287:9">if <condition pos:start="283:12" pos:end="283:31">(<expr pos:start="283:13" pos:end="283:30"><name pos:start="283:13" pos:end="283:26">on_write_error</name> <operator pos:start="283:28" pos:end="283:28">&lt;</operator> <literal type="number" pos:start="283:30" pos:end="283:30">0</literal></expr>)</condition> <block pos:start="283:33" pos:end="287:9">{<block_content pos:start="285:13" pos:end="285:24">

            <return pos:start="285:13" pos:end="285:24">return <expr pos:start="285:20" pos:end="285:23"><name pos:start="285:20" pos:end="285:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="293:5" pos:end="293:45"><expr pos:start="293:5" pos:end="293:44"><name pos:start="293:5" pos:end="293:17">on_read_error</name> <operator pos:start="293:19" pos:end="293:19">=</operator> <name pos:start="293:21" pos:end="293:44">BLOCKDEV_ON_ERROR_REPORT</name></expr>;</expr_stmt>

    <if_stmt pos:start="295:5" pos:end="315:5"><if pos:start="295:5" pos:end="315:5">if <condition pos:start="295:8" pos:end="295:53">(<expr pos:start="295:9" pos:end="295:52"><operator pos:start="295:9" pos:end="295:9">(</operator><name pos:start="295:10" pos:end="295:12">buf</name> <operator pos:start="295:14" pos:end="295:14">=</operator> <call pos:start="295:16" pos:end="295:43"><name pos:start="295:16" pos:end="295:27">qemu_opt_get</name><argument_list pos:start="295:28" pos:end="295:43">(<argument pos:start="295:29" pos:end="295:32"><expr pos:start="295:29" pos:end="295:32"><name pos:start="295:29" pos:end="295:32">opts</name></expr></argument>, <argument pos:start="295:35" pos:end="295:42"><expr pos:start="295:35" pos:end="295:42"><literal type="string" pos:start="295:35" pos:end="295:42">"rerror"</literal></expr></argument>)</argument_list></call><operator pos:start="295:44" pos:end="295:44">)</operator> <operator pos:start="295:46" pos:end="295:47">!=</operator> <name pos:start="295:49" pos:end="295:52">NULL</name></expr>)</condition> <block pos:start="295:55" pos:end="315:5">{<block_content pos:start="297:9" pos:end="313:9">

        <if_stmt pos:start="297:9" pos:end="303:9"><if pos:start="297:9" pos:end="303:9">if <condition pos:start="297:12" pos:end="297:86">(<expr pos:start="297:13" pos:end="297:85"><name pos:start="297:13" pos:end="297:16">type</name> <operator pos:start="297:18" pos:end="297:19">!=</operator> <name pos:start="297:21" pos:end="297:26">IF_IDE</name> <operator pos:start="297:28" pos:end="297:29">&amp;&amp;</operator> <name pos:start="297:31" pos:end="297:34">type</name> <operator pos:start="297:36" pos:end="297:37">!=</operator> <name pos:start="297:39" pos:end="297:47">IF_VIRTIO</name> <operator pos:start="297:49" pos:end="297:50">&amp;&amp;</operator> <name pos:start="297:52" pos:end="297:55">type</name> <operator pos:start="297:57" pos:end="297:58">!=</operator> <name pos:start="297:60" pos:end="297:66">IF_SCSI</name> <operator pos:start="297:68" pos:end="297:69">&amp;&amp;</operator> <name pos:start="297:71" pos:end="297:74">type</name> <operator pos:start="297:76" pos:end="297:77">!=</operator> <name pos:start="297:79" pos:end="297:85">IF_NONE</name></expr>)</condition> <block pos:start="297:88" pos:end="303:9">{<block_content pos:start="299:13" pos:end="301:24">

            <expr_stmt pos:start="299:13" pos:end="299:69"><expr pos:start="299:13" pos:end="299:68"><call pos:start="299:13" pos:end="299:68"><name pos:start="299:13" pos:end="299:24">error_report</name><argument_list pos:start="299:25" pos:end="299:68">(<argument pos:start="299:26" pos:end="299:67"><expr pos:start="299:26" pos:end="299:67"><literal type="string" pos:start="299:26" pos:end="299:67">"rerror is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="301:13" pos:end="301:24">return <expr pos:start="301:20" pos:end="301:23"><name pos:start="301:20" pos:end="301:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="307:9" pos:end="307:57"><expr pos:start="307:9" pos:end="307:56"><name pos:start="307:9" pos:end="307:21">on_read_error</name> <operator pos:start="307:23" pos:end="307:23">=</operator> <call pos:start="307:25" pos:end="307:56"><name pos:start="307:25" pos:end="307:48">parse_block_error_action</name><argument_list pos:start="307:49" pos:end="307:56">(<argument pos:start="307:50" pos:end="307:52"><expr pos:start="307:50" pos:end="307:52"><name pos:start="307:50" pos:end="307:52">buf</name></expr></argument>, <argument pos:start="307:55" pos:end="307:55"><expr pos:start="307:55" pos:end="307:55"><literal type="number" pos:start="307:55" pos:end="307:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="309:9" pos:end="313:9"><if pos:start="309:9" pos:end="313:9">if <condition pos:start="309:12" pos:end="309:30">(<expr pos:start="309:13" pos:end="309:29"><name pos:start="309:13" pos:end="309:25">on_read_error</name> <operator pos:start="309:27" pos:end="309:27">&lt;</operator> <literal type="number" pos:start="309:29" pos:end="309:29">0</literal></expr>)</condition> <block pos:start="309:32" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:24">

            <return pos:start="311:13" pos:end="311:24">return <expr pos:start="311:20" pos:end="311:23"><name pos:start="311:20" pos:end="311:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="319:5" pos:end="319:14">/* init */</comment>

    <expr_stmt pos:start="321:5" pos:end="321:38"><expr pos:start="321:5" pos:end="321:37"><name pos:start="321:5" pos:end="321:9">dinfo</name> <operator pos:start="321:11" pos:end="321:11">=</operator> <call pos:start="321:13" pos:end="321:37"><name pos:start="321:13" pos:end="321:21">g_malloc0</name><argument_list pos:start="321:22" pos:end="321:37">(<argument pos:start="321:23" pos:end="321:36"><expr pos:start="321:23" pos:end="321:36"><sizeof pos:start="321:23" pos:end="321:36">sizeof<argument_list pos:start="321:29" pos:end="321:36">(<argument pos:start="321:30" pos:end="321:35"><expr pos:start="321:30" pos:end="321:35"><operator pos:start="321:30" pos:end="321:30">*</operator><name pos:start="321:31" pos:end="321:35">dinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:45"><expr pos:start="323:5" pos:end="323:44"><name pos:start="323:5" pos:end="323:13"><name pos:start="323:5" pos:end="323:9">dinfo</name><operator pos:start="323:10" pos:end="323:11">-&gt;</operator><name pos:start="323:12" pos:end="323:13">id</name></name> <operator pos:start="323:15" pos:end="323:15">=</operator> <call pos:start="323:17" pos:end="323:44"><name pos:start="323:17" pos:end="323:24">g_strdup</name><argument_list pos:start="323:25" pos:end="323:44">(<argument pos:start="323:26" pos:end="323:43"><expr pos:start="323:26" pos:end="323:43"><call pos:start="323:26" pos:end="323:43"><name pos:start="323:26" pos:end="323:37">qemu_opts_id</name><argument_list pos:start="323:38" pos:end="323:43">(<argument pos:start="323:39" pos:end="323:42"><expr pos:start="323:39" pos:end="323:42"><name pos:start="323:39" pos:end="323:42">opts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:38"><expr pos:start="325:5" pos:end="325:37"><name pos:start="325:5" pos:end="325:15"><name pos:start="325:5" pos:end="325:9">dinfo</name><operator pos:start="325:10" pos:end="325:11">-&gt;</operator><name pos:start="325:12" pos:end="325:15">bdrv</name></name> <operator pos:start="325:17" pos:end="325:17">=</operator> <call pos:start="325:19" pos:end="325:37"><name pos:start="325:19" pos:end="325:26">bdrv_new</name><argument_list pos:start="325:27" pos:end="325:37">(<argument pos:start="325:28" pos:end="325:36"><expr pos:start="325:28" pos:end="325:36"><name pos:start="325:28" pos:end="325:36"><name pos:start="325:28" pos:end="325:32">dinfo</name><operator pos:start="325:33" pos:end="325:34">-&gt;</operator><name pos:start="325:35" pos:end="325:36">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="327:5" pos:end="327:61"><expr pos:start="327:5" pos:end="327:60"><name pos:start="327:5" pos:end="327:27"><name pos:start="327:5" pos:end="327:9">dinfo</name><operator pos:start="327:10" pos:end="327:11">-&gt;</operator><name pos:start="327:12" pos:end="327:15">bdrv</name><operator pos:start="327:16" pos:end="327:17">-&gt;</operator><name pos:start="327:18" pos:end="327:27">open_flags</name></name> <operator pos:start="327:29" pos:end="327:29">=</operator> <ternary pos:start="327:31" pos:end="327:60"><condition pos:start="327:31" pos:end="327:40"><expr pos:start="327:31" pos:end="327:38"><name pos:start="327:31" pos:end="327:38">snapshot</name></expr> ?</condition><then pos:start="327:42" pos:end="327:56"> <expr pos:start="327:42" pos:end="327:56"><name pos:start="327:42" pos:end="327:56">BDRV_O_SNAPSHOT</name></expr> </then><else pos:start="327:58" pos:end="327:60">: <expr pos:start="327:60" pos:end="327:60"><literal type="number" pos:start="327:60" pos:end="327:60">0</literal></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="329:5" pos:end="329:32"><expr pos:start="329:5" pos:end="329:31"><name pos:start="329:5" pos:end="329:26"><name pos:start="329:5" pos:end="329:9">dinfo</name><operator pos:start="329:10" pos:end="329:11">-&gt;</operator><name pos:start="329:12" pos:end="329:15">bdrv</name><operator pos:start="329:16" pos:end="329:17">-&gt;</operator><name pos:start="329:18" pos:end="329:26">read_only</name></name> <operator pos:start="329:28" pos:end="329:28">=</operator> <name pos:start="329:30" pos:end="329:31">ro</name></expr>;</expr_stmt>

    <expr_stmt pos:start="331:5" pos:end="331:23"><expr pos:start="331:5" pos:end="331:22"><name pos:start="331:5" pos:end="331:15"><name pos:start="331:5" pos:end="331:9">dinfo</name><operator pos:start="331:10" pos:end="331:11">-&gt;</operator><name pos:start="331:12" pos:end="331:15">type</name></name> <operator pos:start="331:17" pos:end="331:17">=</operator> <name pos:start="331:19" pos:end="331:22">type</name></expr>;</expr_stmt>

    <expr_stmt pos:start="333:5" pos:end="333:24"><expr pos:start="333:5" pos:end="333:23"><name pos:start="333:5" pos:end="333:19"><name pos:start="333:5" pos:end="333:9">dinfo</name><operator pos:start="333:10" pos:end="333:11">-&gt;</operator><name pos:start="333:12" pos:end="333:19">refcount</name></name> <operator pos:start="333:21" pos:end="333:21">=</operator> <literal type="number" pos:start="333:23" pos:end="333:23">1</literal></expr>;</expr_stmt>

    <if_stmt pos:start="335:5" pos:end="339:5"><if pos:start="335:5" pos:end="339:5">if <condition pos:start="335:8" pos:end="335:23">(<expr pos:start="335:9" pos:end="335:22"><name pos:start="335:9" pos:end="335:14">serial</name> <operator pos:start="335:16" pos:end="335:17">!=</operator> <name pos:start="335:19" pos:end="335:22">NULL</name></expr>)</condition> <block pos:start="335:25" pos:end="339:5">{<block_content pos:start="337:9" pos:end="337:41">

        <expr_stmt pos:start="337:9" pos:end="337:41"><expr pos:start="337:9" pos:end="337:40"><name pos:start="337:9" pos:end="337:21"><name pos:start="337:9" pos:end="337:13">dinfo</name><operator pos:start="337:14" pos:end="337:15">-&gt;</operator><name pos:start="337:16" pos:end="337:21">serial</name></name> <operator pos:start="337:23" pos:end="337:23">=</operator> <call pos:start="337:25" pos:end="337:40"><name pos:start="337:25" pos:end="337:32">g_strdup</name><argument_list pos:start="337:33" pos:end="337:40">(<argument pos:start="337:34" pos:end="337:39"><expr pos:start="337:34" pos:end="337:39"><name pos:start="337:34" pos:end="337:39">serial</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="341:5" pos:end="341:45"><expr pos:start="341:5" pos:end="341:44"><call pos:start="341:5" pos:end="341:44"><name pos:start="341:5" pos:end="341:22">QTAILQ_INSERT_TAIL</name><argument_list pos:start="341:23" pos:end="341:44">(<argument pos:start="341:24" pos:end="341:30"><expr pos:start="341:24" pos:end="341:30"><operator pos:start="341:24" pos:end="341:24">&amp;</operator><name pos:start="341:25" pos:end="341:30">drives</name></expr></argument>, <argument pos:start="341:33" pos:end="341:37"><expr pos:start="341:33" pos:end="341:37"><name pos:start="341:33" pos:end="341:37">dinfo</name></expr></argument>, <argument pos:start="341:40" pos:end="341:43"><expr pos:start="341:40" pos:end="341:43"><name pos:start="341:40" pos:end="341:43">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="345:5" pos:end="345:66"><expr pos:start="345:5" pos:end="345:65"><call pos:start="345:5" pos:end="345:65"><name pos:start="345:5" pos:end="345:21">bdrv_set_on_error</name><argument_list pos:start="345:22" pos:end="345:65">(<argument pos:start="345:23" pos:end="345:33"><expr pos:start="345:23" pos:end="345:33"><name pos:start="345:23" pos:end="345:33"><name pos:start="345:23" pos:end="345:27">dinfo</name><operator pos:start="345:28" pos:end="345:29">-&gt;</operator><name pos:start="345:30" pos:end="345:33">bdrv</name></name></expr></argument>, <argument pos:start="345:36" pos:end="345:48"><expr pos:start="345:36" pos:end="345:48"><name pos:start="345:36" pos:end="345:48">on_read_error</name></expr></argument>, <argument pos:start="345:51" pos:end="345:64"><expr pos:start="345:51" pos:end="345:64"><name pos:start="345:51" pos:end="345:64">on_write_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="349:5" pos:end="349:29">/* disk I/O throttling */</comment>

    <if_stmt pos:start="351:5" pos:end="357:5"><if pos:start="351:5" pos:end="357:5">if <condition pos:start="351:8" pos:end="351:31">(<expr pos:start="351:9" pos:end="351:30"><call pos:start="351:9" pos:end="351:30"><name pos:start="351:9" pos:end="351:24">throttle_enabled</name><argument_list pos:start="351:25" pos:end="351:30">(<argument pos:start="351:26" pos:end="351:29"><expr pos:start="351:26" pos:end="351:29"><operator pos:start="351:26" pos:end="351:26">&amp;</operator><name pos:start="351:27" pos:end="351:29">cfg</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="351:33" pos:end="357:5">{<block_content pos:start="353:9" pos:end="355:46">

        <expr_stmt pos:start="353:9" pos:end="353:43"><expr pos:start="353:9" pos:end="353:42"><call pos:start="353:9" pos:end="353:42"><name pos:start="353:9" pos:end="353:29">bdrv_io_limits_enable</name><argument_list pos:start="353:30" pos:end="353:42">(<argument pos:start="353:31" pos:end="353:41"><expr pos:start="353:31" pos:end="353:41"><name pos:start="353:31" pos:end="353:41"><name pos:start="353:31" pos:end="353:35">dinfo</name><operator pos:start="353:36" pos:end="353:37">-&gt;</operator><name pos:start="353:38" pos:end="353:41">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:46"><expr pos:start="355:9" pos:end="355:45"><call pos:start="355:9" pos:end="355:45"><name pos:start="355:9" pos:end="355:26">bdrv_set_io_limits</name><argument_list pos:start="355:27" pos:end="355:45">(<argument pos:start="355:28" pos:end="355:38"><expr pos:start="355:28" pos:end="355:38"><name pos:start="355:28" pos:end="355:38"><name pos:start="355:28" pos:end="355:32">dinfo</name><operator pos:start="355:33" pos:end="355:34">-&gt;</operator><name pos:start="355:35" pos:end="355:38">bdrv</name></name></expr></argument>, <argument pos:start="355:41" pos:end="355:44"><expr pos:start="355:41" pos:end="355:44"><operator pos:start="355:41" pos:end="355:41">&amp;</operator><name pos:start="355:42" pos:end="355:44">cfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="361:5" pos:end="391:5">switch<condition pos:start="361:11" pos:end="361:16">(<expr pos:start="361:12" pos:end="361:15"><name pos:start="361:12" pos:end="361:15">type</name></expr>)</condition> <block pos:start="361:18" pos:end="391:5">{<block_content pos:start="363:5" pos:end="389:16">

    <case pos:start="363:5" pos:end="363:16">case <expr pos:start="363:10" pos:end="363:15"><name pos:start="363:10" pos:end="363:15">IF_IDE</name></expr>:</case>

    <case pos:start="365:5" pos:end="365:17">case <expr pos:start="365:10" pos:end="365:16"><name pos:start="365:10" pos:end="365:16">IF_SCSI</name></expr>:</case>

    <case pos:start="367:5" pos:end="367:16">case <expr pos:start="367:10" pos:end="367:15"><name pos:start="367:10" pos:end="367:15">IF_XEN</name></expr>:</case>

    <case pos:start="369:5" pos:end="369:17">case <expr pos:start="369:10" pos:end="369:16"><name pos:start="369:10" pos:end="369:16">IF_NONE</name></expr>:</case>

        <expr_stmt pos:start="371:9" pos:end="371:47"><expr pos:start="371:9" pos:end="371:46"><name pos:start="371:9" pos:end="371:23"><name pos:start="371:9" pos:end="371:13">dinfo</name><operator pos:start="371:14" pos:end="371:15">-&gt;</operator><name pos:start="371:16" pos:end="371:23">media_cd</name></name> <operator pos:start="371:25" pos:end="371:25">=</operator> <name pos:start="371:27" pos:end="371:31">media</name> <operator pos:start="371:33" pos:end="371:34">==</operator> <name pos:start="371:36" pos:end="371:46">MEDIA_CDROM</name></expr>;</expr_stmt>

        <break pos:start="373:9" pos:end="373:14">break;</break>

    <case pos:start="375:5" pos:end="375:15">case <expr pos:start="375:10" pos:end="375:14"><name pos:start="375:10" pos:end="375:14">IF_SD</name></expr>:</case>

    <case pos:start="377:5" pos:end="377:19">case <expr pos:start="377:10" pos:end="377:18"><name pos:start="377:10" pos:end="377:18">IF_FLOPPY</name></expr>:</case>

    <case pos:start="379:5" pos:end="379:19">case <expr pos:start="379:10" pos:end="379:18"><name pos:start="379:10" pos:end="379:18">IF_PFLASH</name></expr>:</case>

    <case pos:start="381:5" pos:end="381:16">case <expr pos:start="381:10" pos:end="381:15"><name pos:start="381:10" pos:end="381:15">IF_MTD</name></expr>:</case>

    <case pos:start="383:5" pos:end="383:19">case <expr pos:start="383:10" pos:end="383:18"><name pos:start="383:10" pos:end="383:18">IF_VIRTIO</name></expr>:</case>

        <break pos:start="385:9" pos:end="385:14">break;</break>

    <default pos:start="387:5" pos:end="387:12">default:</default>

        <expr_stmt pos:start="389:9" pos:end="389:16"><expr pos:start="389:9" pos:end="389:15"><call pos:start="389:9" pos:end="389:15"><name pos:start="389:9" pos:end="389:13">abort</name><argument_list pos:start="389:14" pos:end="389:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <if_stmt pos:start="393:5" pos:end="405:5"><if pos:start="393:5" pos:end="405:5">if <condition pos:start="393:8" pos:end="393:24">(<expr pos:start="393:9" pos:end="393:23"><operator pos:start="393:9" pos:end="393:9">!</operator><name pos:start="393:10" pos:end="393:13">file</name> <operator pos:start="393:15" pos:end="393:16">||</operator> <operator pos:start="393:18" pos:end="393:18">!</operator><operator pos:start="393:19" pos:end="393:19">*</operator><name pos:start="393:20" pos:end="393:23">file</name></expr>)</condition> <block pos:start="393:26" pos:end="405:5">{<block_content pos:start="395:9" pos:end="403:9">

        <if_stmt pos:start="395:9" pos:end="403:9"><if pos:start="395:9" pos:end="399:9">if <condition pos:start="395:12" pos:end="395:37">(<expr pos:start="395:13" pos:end="395:36"><name pos:start="395:13" pos:end="395:36">has_driver_specific_opts</name></expr>)</condition> <block pos:start="395:39" pos:end="399:9">{<block_content pos:start="397:13" pos:end="397:24">

            <expr_stmt pos:start="397:13" pos:end="397:24"><expr pos:start="397:13" pos:end="397:23"><name pos:start="397:13" pos:end="397:16">file</name> <operator pos:start="397:18" pos:end="397:18">=</operator> <name pos:start="397:20" pos:end="397:23">NULL</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="399:11" pos:end="403:9">else <block pos:start="399:16" pos:end="403:9">{<block_content pos:start="401:13" pos:end="401:25">

            <return pos:start="401:13" pos:end="401:25">return <expr pos:start="401:20" pos:end="401:24"><name pos:start="401:20" pos:end="401:24">dinfo</name></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="407:5" pos:end="415:5"><if pos:start="407:5" pos:end="415:5">if <condition pos:start="407:8" pos:end="407:17">(<expr pos:start="407:9" pos:end="407:16"><name pos:start="407:9" pos:end="407:16">snapshot</name></expr>)</condition> <block pos:start="407:19" pos:end="415:5">{<block_content pos:start="411:9" pos:end="413:72">

        <comment type="block" pos:start="409:9" pos:end="409:51">/* always use cache=unsafe with snapshot */</comment>

        <expr_stmt pos:start="411:9" pos:end="411:41"><expr pos:start="411:9" pos:end="411:40"><name pos:start="411:9" pos:end="411:18">bdrv_flags</name> <operator pos:start="411:20" pos:end="411:21">&amp;=</operator> <operator pos:start="411:23" pos:end="411:23">~</operator><name pos:start="411:24" pos:end="411:40">BDRV_O_CACHE_MASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:72"><expr pos:start="413:9" pos:end="413:71"><name pos:start="413:9" pos:end="413:18">bdrv_flags</name> <operator pos:start="413:20" pos:end="413:21">|=</operator> <operator pos:start="413:23" pos:end="413:23">(</operator><name pos:start="413:24" pos:end="413:38">BDRV_O_SNAPSHOT</name><operator pos:start="413:39" pos:end="413:39">|</operator><name pos:start="413:40" pos:end="413:54">BDRV_O_CACHE_WB</name><operator pos:start="413:55" pos:end="413:55">|</operator><name pos:start="413:56" pos:end="413:70">BDRV_O_NO_FLUSH</name><operator pos:start="413:71" pos:end="413:71">)</operator></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="419:5" pos:end="423:5"><if pos:start="419:5" pos:end="423:5">if <condition pos:start="419:8" pos:end="419:21">(<expr pos:start="419:9" pos:end="419:20"><name pos:start="419:9" pos:end="419:20">copy_on_read</name></expr>)</condition> <block pos:start="419:23" pos:end="423:5">{<block_content pos:start="421:9" pos:end="421:42">

        <expr_stmt pos:start="421:9" pos:end="421:42"><expr pos:start="421:9" pos:end="421:41"><name pos:start="421:9" pos:end="421:18">bdrv_flags</name> <operator pos:start="421:20" pos:end="421:21">|=</operator> <name pos:start="421:23" pos:end="421:41">BDRV_O_COPY_ON_READ</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="427:5" pos:end="431:5"><if pos:start="427:5" pos:end="431:5">if <condition pos:start="427:8" pos:end="427:44">(<expr pos:start="427:9" pos:end="427:43"><call pos:start="427:9" pos:end="427:43"><name pos:start="427:9" pos:end="427:22">runstate_check</name><argument_list pos:start="427:23" pos:end="427:43">(<argument pos:start="427:24" pos:end="427:42"><expr pos:start="427:24" pos:end="427:42"><name pos:start="427:24" pos:end="427:42">RUN_STATE_INMIGRATE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="427:46" pos:end="431:5">{<block_content pos:start="429:9" pos:end="429:38">

        <expr_stmt pos:start="429:9" pos:end="429:38"><expr pos:start="429:9" pos:end="429:37"><name pos:start="429:9" pos:end="429:18">bdrv_flags</name> <operator pos:start="429:20" pos:end="429:21">|=</operator> <name pos:start="429:23" pos:end="429:37">BDRV_O_INCOMING</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="435:5" pos:end="453:5"><if pos:start="435:5" pos:end="441:5">if <condition pos:start="435:8" pos:end="435:29">(<expr pos:start="435:9" pos:end="435:28"><name pos:start="435:9" pos:end="435:13">media</name> <operator pos:start="435:15" pos:end="435:16">==</operator> <name pos:start="435:18" pos:end="435:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="435:31" pos:end="441:5">{<block_content pos:start="439:9" pos:end="439:15">

        <comment type="block" pos:start="437:9" pos:end="437:60">/* CDROM is fine for any interface, don't check.  */</comment>

        <expr_stmt pos:start="439:9" pos:end="439:15"><expr pos:start="439:9" pos:end="439:14"><name pos:start="439:9" pos:end="439:10">ro</name> <operator pos:start="439:12" pos:end="439:12">=</operator> <literal type="number" pos:start="439:14" pos:end="439:14">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="441:7" pos:end="453:5">else if <condition pos:start="441:15" pos:end="441:23">(<expr pos:start="441:16" pos:end="441:22"><name pos:start="441:16" pos:end="441:17">ro</name> <operator pos:start="441:19" pos:end="441:20">==</operator> <literal type="number" pos:start="441:22" pos:end="441:22">1</literal></expr>)</condition> <block pos:start="441:25" pos:end="453:5">{<block_content pos:start="443:9" pos:end="451:9">

        <if_stmt pos:start="443:9" pos:end="451:9"><if pos:start="443:9" pos:end="451:9">if <condition pos:start="443:12" pos:end="445:49">(<expr pos:start="443:13" pos:end="445:48"><name pos:start="443:13" pos:end="443:16">type</name> <operator pos:start="443:18" pos:end="443:19">!=</operator> <name pos:start="443:21" pos:end="443:27">IF_SCSI</name> <operator pos:start="443:29" pos:end="443:30">&amp;&amp;</operator> <name pos:start="443:32" pos:end="443:35">type</name> <operator pos:start="443:37" pos:end="443:38">!=</operator> <name pos:start="443:40" pos:end="443:48">IF_VIRTIO</name> <operator pos:start="443:50" pos:end="443:51">&amp;&amp;</operator> <name pos:start="443:53" pos:end="443:56">type</name> <operator pos:start="443:58" pos:end="443:59">!=</operator> <name pos:start="443:61" pos:end="443:69">IF_FLOPPY</name> <operator pos:start="443:71" pos:end="443:72">&amp;&amp;</operator>

            <name pos:start="445:13" pos:end="445:16">type</name> <operator pos:start="445:18" pos:end="445:19">!=</operator> <name pos:start="445:21" pos:end="445:27">IF_NONE</name> <operator pos:start="445:29" pos:end="445:30">&amp;&amp;</operator> <name pos:start="445:32" pos:end="445:35">type</name> <operator pos:start="445:37" pos:end="445:38">!=</operator> <name pos:start="445:40" pos:end="445:48">IF_PFLASH</name></expr>)</condition> <block pos:start="445:51" pos:end="451:9">{<block_content pos:start="447:13" pos:end="449:21">

            <expr_stmt pos:start="447:13" pos:end="447:69"><expr pos:start="447:13" pos:end="447:68"><call pos:start="447:13" pos:end="447:68"><name pos:start="447:13" pos:end="447:24">error_report</name><argument_list pos:start="447:25" pos:end="447:68">(<argument pos:start="447:26" pos:end="447:67"><expr pos:start="447:26" pos:end="447:67"><literal type="string" pos:start="447:26" pos:end="447:67">"read-only not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="449:13" pos:end="449:21">goto <name pos:start="449:18" pos:end="449:20">err</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="457:5" pos:end="457:39"><expr pos:start="457:5" pos:end="457:38"><name pos:start="457:5" pos:end="457:14">bdrv_flags</name> <operator pos:start="457:16" pos:end="457:17">|=</operator> <ternary pos:start="457:19" pos:end="457:38"><condition pos:start="457:19" pos:end="457:22"><expr pos:start="457:19" pos:end="457:20"><name pos:start="457:19" pos:end="457:20">ro</name></expr> ?</condition><then pos:start="457:24" pos:end="457:24"> <expr pos:start="457:24" pos:end="457:24"><literal type="number" pos:start="457:24" pos:end="457:24">0</literal></expr> </then><else pos:start="457:26" pos:end="457:38">: <expr pos:start="457:28" pos:end="457:38"><name pos:start="457:28" pos:end="457:38">BDRV_O_RDWR</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="461:5" pos:end="465:5"><if pos:start="461:5" pos:end="465:5">if <condition pos:start="461:8" pos:end="461:27">(<expr pos:start="461:9" pos:end="461:26"><name pos:start="461:9" pos:end="461:10">ro</name> <operator pos:start="461:12" pos:end="461:13">&amp;&amp;</operator> <name pos:start="461:15" pos:end="461:26">copy_on_read</name></expr>)</condition> <block pos:start="461:29" pos:end="465:5">{<block_content pos:start="463:9" pos:end="463:75">

        <expr_stmt pos:start="463:9" pos:end="463:75"><expr pos:start="463:9" pos:end="463:74"><call pos:start="463:9" pos:end="463:74"><name pos:start="463:9" pos:end="463:20">error_report</name><argument_list pos:start="463:21" pos:end="463:74">(<argument pos:start="463:22" pos:end="463:73"><expr pos:start="463:22" pos:end="463:73"><literal type="string" pos:start="463:22" pos:end="463:73">"warning: disabling copy_on_read on read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="469:5" pos:end="469:21"><expr pos:start="469:5" pos:end="469:20"><call pos:start="469:5" pos:end="469:20"><name pos:start="469:5" pos:end="469:11">QINCREF</name><argument_list pos:start="469:12" pos:end="469:20">(<argument pos:start="469:13" pos:end="469:19"><expr pos:start="469:13" pos:end="469:19"><name pos:start="469:13" pos:end="469:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="471:5" pos:end="471:73"><expr pos:start="471:5" pos:end="471:72"><name pos:start="471:5" pos:end="471:7">ret</name> <operator pos:start="471:9" pos:end="471:9">=</operator> <call pos:start="471:11" pos:end="471:72"><name pos:start="471:11" pos:end="471:19">bdrv_open</name><argument_list pos:start="471:20" pos:end="471:72">(<argument pos:start="471:21" pos:end="471:31"><expr pos:start="471:21" pos:end="471:31"><name pos:start="471:21" pos:end="471:31"><name pos:start="471:21" pos:end="471:25">dinfo</name><operator pos:start="471:26" pos:end="471:27">-&gt;</operator><name pos:start="471:28" pos:end="471:31">bdrv</name></name></expr></argument>, <argument pos:start="471:34" pos:end="471:37"><expr pos:start="471:34" pos:end="471:37"><name pos:start="471:34" pos:end="471:37">file</name></expr></argument>, <argument pos:start="471:40" pos:end="471:46"><expr pos:start="471:40" pos:end="471:46"><name pos:start="471:40" pos:end="471:46">bs_opts</name></expr></argument>, <argument pos:start="471:49" pos:end="471:58"><expr pos:start="471:49" pos:end="471:58"><name pos:start="471:49" pos:end="471:58">bdrv_flags</name></expr></argument>, <argument pos:start="471:61" pos:end="471:63"><expr pos:start="471:61" pos:end="471:63"><name pos:start="471:61" pos:end="471:63">drv</name></expr></argument>, <argument pos:start="471:66" pos:end="471:71"><expr pos:start="471:66" pos:end="471:71"><operator pos:start="471:66" pos:end="471:66">&amp;</operator><name pos:start="471:67" pos:end="471:71">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="475:5" pos:end="483:5"><if pos:start="475:5" pos:end="483:5">if <condition pos:start="475:8" pos:end="475:16">(<expr pos:start="475:9" pos:end="475:15"><name pos:start="475:9" pos:end="475:11">ret</name> <operator pos:start="475:13" pos:end="475:13">&lt;</operator> <literal type="number" pos:start="475:15" pos:end="475:15">0</literal></expr>)</condition> <block pos:start="475:18" pos:end="483:5">{<block_content pos:start="477:9" pos:end="481:17">

        <expr_stmt pos:start="477:9" pos:end="479:65"><expr pos:start="477:9" pos:end="479:64"><call pos:start="477:9" pos:end="479:64"><name pos:start="477:9" pos:end="477:20">error_report</name><argument_list pos:start="477:21" pos:end="479:64">(<argument pos:start="477:22" pos:end="477:55"><expr pos:start="477:22" pos:end="477:55"><literal type="string" pos:start="477:22" pos:end="477:55">"could not open disk image %s: %s"</literal></expr></argument>,

                     <argument pos:start="479:22" pos:end="479:38"><expr pos:start="479:22" pos:end="479:38"><ternary pos:start="479:22" pos:end="479:38"><condition pos:start="479:22" pos:end="479:27"><expr pos:start="479:22" pos:end="479:25"><name pos:start="479:22" pos:end="479:25">file</name></expr> ?</condition><then/><else pos:start="479:28" pos:end="479:38">: <expr pos:start="479:30" pos:end="479:38"><name pos:start="479:30" pos:end="479:38"><name pos:start="479:30" pos:end="479:34">dinfo</name><operator pos:start="479:35" pos:end="479:36">-&gt;</operator><name pos:start="479:37" pos:end="479:38">id</name></name></expr></else></ternary></expr></argument>, <argument pos:start="479:41" pos:end="479:63"><expr pos:start="479:41" pos:end="479:63"><call pos:start="479:41" pos:end="479:63"><name pos:start="479:41" pos:end="479:56">error_get_pretty</name><argument_list pos:start="479:57" pos:end="479:63">(<argument pos:start="479:58" pos:end="479:62"><expr pos:start="479:58" pos:end="479:62"><name pos:start="479:58" pos:end="479:62">error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="481:9" pos:end="481:17">goto <name pos:start="481:14" pos:end="481:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="487:5" pos:end="489:22"><if pos:start="487:5" pos:end="489:22">if <condition pos:start="487:8" pos:end="487:39">(<expr pos:start="487:9" pos:end="487:38"><call pos:start="487:9" pos:end="487:38"><name pos:start="487:9" pos:end="487:25">bdrv_key_required</name><argument_list pos:start="487:26" pos:end="487:38">(<argument pos:start="487:27" pos:end="487:37"><expr pos:start="487:27" pos:end="487:37"><name pos:start="487:27" pos:end="487:37"><name pos:start="487:27" pos:end="487:31">dinfo</name><operator pos:start="487:32" pos:end="487:33">-&gt;</operator><name pos:start="487:34" pos:end="487:37">bdrv</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="489:9" pos:end="489:22"><block_content pos:start="489:9" pos:end="489:22">

        <expr_stmt pos:start="489:9" pos:end="489:22"><expr pos:start="489:9" pos:end="489:21"><name pos:start="489:9" pos:end="489:17">autostart</name> <operator pos:start="489:19" pos:end="489:19">=</operator> <literal type="number" pos:start="489:21" pos:end="489:21">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="493:5" pos:end="493:21"><expr pos:start="493:5" pos:end="493:20"><call pos:start="493:5" pos:end="493:20"><name pos:start="493:5" pos:end="493:11">QDECREF</name><argument_list pos:start="493:12" pos:end="493:20">(<argument pos:start="493:13" pos:end="493:19"><expr pos:start="493:13" pos:end="493:19"><name pos:start="493:13" pos:end="493:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="495:5" pos:end="495:24"><expr pos:start="495:5" pos:end="495:23"><call pos:start="495:5" pos:end="495:23"><name pos:start="495:5" pos:end="495:17">qemu_opts_del</name><argument_list pos:start="495:18" pos:end="495:23">(<argument pos:start="495:19" pos:end="495:22"><expr pos:start="495:19" pos:end="495:22"><name pos:start="495:19" pos:end="495:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="499:5" pos:end="499:17">return <expr pos:start="499:12" pos:end="499:16"><name pos:start="499:12" pos:end="499:16">dinfo</name></expr>;</return>



<label pos:start="503:1" pos:end="503:4"><name pos:start="503:1" pos:end="503:3">err</name>:</label>

    <expr_stmt pos:start="505:5" pos:end="505:24"><expr pos:start="505:5" pos:end="505:23"><call pos:start="505:5" pos:end="505:23"><name pos:start="505:5" pos:end="505:17">qemu_opts_del</name><argument_list pos:start="505:18" pos:end="505:23">(<argument pos:start="505:19" pos:end="505:22"><expr pos:start="505:19" pos:end="505:22"><name pos:start="505:19" pos:end="505:22">opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="507:5" pos:end="507:21"><expr pos:start="507:5" pos:end="507:20"><call pos:start="507:5" pos:end="507:20"><name pos:start="507:5" pos:end="507:11">QDECREF</name><argument_list pos:start="507:12" pos:end="507:20">(<argument pos:start="507:13" pos:end="507:19"><expr pos:start="507:13" pos:end="507:19"><name pos:start="507:13" pos:end="507:19">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="509:5" pos:end="509:28"><expr pos:start="509:5" pos:end="509:27"><call pos:start="509:5" pos:end="509:27"><name pos:start="509:5" pos:end="509:14">bdrv_unref</name><argument_list pos:start="509:15" pos:end="509:27">(<argument pos:start="509:16" pos:end="509:26"><expr pos:start="509:16" pos:end="509:26"><name pos:start="509:16" pos:end="509:26"><name pos:start="509:16" pos:end="509:20">dinfo</name><operator pos:start="509:21" pos:end="509:22">-&gt;</operator><name pos:start="509:23" pos:end="509:26">bdrv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="511:5" pos:end="511:22"><expr pos:start="511:5" pos:end="511:21"><call pos:start="511:5" pos:end="511:21"><name pos:start="511:5" pos:end="511:10">g_free</name><argument_list pos:start="511:11" pos:end="511:21">(<argument pos:start="511:12" pos:end="511:20"><expr pos:start="511:12" pos:end="511:20"><name pos:start="511:12" pos:end="511:20"><name pos:start="511:12" pos:end="511:16">dinfo</name><operator pos:start="511:17" pos:end="511:18">-&gt;</operator><name pos:start="511:19" pos:end="511:20">id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="513:5" pos:end="513:40"><expr pos:start="513:5" pos:end="513:39"><call pos:start="513:5" pos:end="513:39"><name pos:start="513:5" pos:end="513:17">QTAILQ_REMOVE</name><argument_list pos:start="513:18" pos:end="513:39">(<argument pos:start="513:19" pos:end="513:25"><expr pos:start="513:19" pos:end="513:25"><operator pos:start="513:19" pos:end="513:19">&amp;</operator><name pos:start="513:20" pos:end="513:25">drives</name></expr></argument>, <argument pos:start="513:28" pos:end="513:32"><expr pos:start="513:28" pos:end="513:32"><name pos:start="513:28" pos:end="513:32">dinfo</name></expr></argument>, <argument pos:start="513:35" pos:end="513:38"><expr pos:start="513:35" pos:end="513:38"><name pos:start="513:35" pos:end="513:38">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="515:5" pos:end="515:18"><expr pos:start="515:5" pos:end="515:17"><call pos:start="515:5" pos:end="515:17"><name pos:start="515:5" pos:end="515:10">g_free</name><argument_list pos:start="515:11" pos:end="515:17">(<argument pos:start="515:12" pos:end="515:16"><expr pos:start="515:12" pos:end="515:16"><name pos:start="515:12" pos:end="515:16">dinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="517:5" pos:end="517:16">return <expr pos:start="517:12" pos:end="517:15"><name pos:start="517:12" pos:end="517:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
