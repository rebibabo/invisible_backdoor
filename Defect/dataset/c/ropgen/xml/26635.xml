<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26635.c" pos:tabs="8"><function pos:start="1:1" pos:end="233:33"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:22">decode_cell</name><parameter_list pos:start="1:23" pos:end="5:47">(<parameter pos:start="1:24" pos:end="1:47"><decl pos:start="1:24" pos:end="1:47"><type pos:start="1:24" pos:end="1:47"><name pos:start="1:24" pos:end="1:42">Indeo3DecodeContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">ctx</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:70"><decl pos:start="1:50" pos:end="1:70"><type pos:start="1:50" pos:end="1:70"><name pos:start="1:50" pos:end="1:63">AVCodecContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:70">avctx</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:28">Plane</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier></type><name pos:start="3:31" pos:end="3:35">plane</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:47"><decl pos:start="3:38" pos:end="3:47"><type pos:start="3:38" pos:end="3:47"><name pos:start="3:38" pos:end="3:41">Cell</name> <modifier pos:start="3:43" pos:end="3:43">*</modifier></type><name pos:start="3:44" pos:end="3:47">cell</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:72"><decl pos:start="3:50" pos:end="3:72"><type pos:start="3:50" pos:end="3:72"><specifier pos:start="3:50" pos:end="3:54">const</specifier> <name pos:start="3:56" pos:end="3:62">uint8_t</name> <modifier pos:start="3:64" pos:end="3:64">*</modifier></type><name pos:start="3:65" pos:end="3:72">data_ptr</name></decl></parameter>,

                       <parameter pos:start="5:24" pos:end="5:46"><decl pos:start="5:24" pos:end="5:46"><type pos:start="5:24" pos:end="5:46"><specifier pos:start="5:24" pos:end="5:28">const</specifier> <name pos:start="5:30" pos:end="5:36">uint8_t</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:46">last_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="233:33">{<block_content pos:start="9:5" pos:end="233:33">

    <decl_stmt pos:start="9:5" pos:end="9:72"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type>           <name pos:start="9:19" pos:end="9:19">x</name></decl>, <decl pos:start="9:22" pos:end="9:25"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:22" pos:end="9:25">mv_x</name></decl>, <decl pos:start="9:28" pos:end="9:31"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:28" pos:end="9:31">mv_y</name></decl>, <decl pos:start="9:34" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:34" pos:end="9:37">mode</name></decl>, <decl pos:start="9:40" pos:end="9:47"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:47">vq_index</name></decl>, <decl pos:start="9:50" pos:end="9:58"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:50" pos:end="9:58">prim_indx</name></decl>, <decl pos:start="9:61" pos:end="9:71"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:61" pos:end="9:71">second_indx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type>           <name pos:start="11:19" pos:end="11:26">zoom_fac</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:51"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type>           <name pos:start="13:19" pos:end="13:24">offset</name></decl>, <decl pos:start="13:27" pos:end="13:35"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:27" pos:end="13:31">error</name> <init pos:start="13:33" pos:end="13:35">= <expr pos:start="13:35" pos:end="13:35"><literal type="number" pos:start="13:35" pos:end="13:35">0</literal></expr></init></decl>, <decl pos:start="13:38" pos:end="13:50"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:38" pos:end="13:50"><name pos:start="13:38" pos:end="13:47">swap_quads</name><index pos:start="13:48" pos:end="13:50">[<expr pos:start="13:49" pos:end="13:49"><literal type="number" pos:start="13:49" pos:end="13:49">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:47"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">uint8_t</name></type>       <name pos:start="15:19" pos:end="15:22">code</name></decl>, <decl pos:start="15:25" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:11"><modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:30">block</name></decl>, <decl pos:start="15:33" pos:end="15:46"><type ref="prev" pos:start="15:5" pos:end="15:11"><modifier pos:start="15:33" pos:end="15:33">*</modifier></type><name pos:start="15:34" pos:end="15:42">ref_block</name> <init pos:start="15:44" pos:end="15:46">= <expr pos:start="15:46" pos:end="15:46"><literal type="number" pos:start="15:46" pos:end="15:46">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:28"><decl pos:start="17:5" pos:end="17:27"><type pos:start="17:5" pos:end="17:19"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:17">vqEntry</name> <modifier pos:start="17:19" pos:end="17:19">*</modifier></type><name pos:start="17:20" pos:end="17:27"><name pos:start="17:20" pos:end="17:24">delta</name><index pos:start="17:25" pos:end="17:27">[<expr pos:start="17:26" pos:end="17:26"><literal type="number" pos:start="17:26" pos:end="17:26">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:40"><type pos:start="19:5" pos:end="19:19"><specifier pos:start="19:5" pos:end="19:9">const</specifier> <name pos:start="19:11" pos:end="19:17">uint8_t</name> <modifier pos:start="19:19" pos:end="19:19">*</modifier></type><name pos:start="19:20" pos:end="19:29">data_start</name> <init pos:start="19:31" pos:end="19:40">= <expr pos:start="19:33" pos:end="19:40"><name pos:start="19:33" pos:end="19:40">data_ptr</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="23:5" pos:end="23:72">/* get coding mode and VQ table index from the VQ descriptor byte */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:27"><expr pos:start="25:5" pos:end="25:26"><name pos:start="25:5" pos:end="25:8">code</name>     <operator pos:start="25:14" pos:end="25:14">=</operator> <operator pos:start="25:16" pos:end="25:16">*</operator><name pos:start="25:17" pos:end="25:24">data_ptr</name><operator pos:start="25:25" pos:end="25:26">++</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:25"><expr pos:start="27:5" pos:end="27:24"><name pos:start="27:5" pos:end="27:8">mode</name>     <operator pos:start="27:14" pos:end="27:14">=</operator> <name pos:start="27:16" pos:end="27:19">code</name> <operator pos:start="27:21" pos:end="27:22">&gt;&gt;</operator> <literal type="number" pos:start="27:24" pos:end="27:24">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:12">vq_index</name> <operator pos:start="29:14" pos:end="29:14">=</operator> <name pos:start="29:16" pos:end="29:19">code</name> <operator pos:start="29:21" pos:end="29:21">&amp;</operator> <literal type="number" pos:start="29:23" pos:end="29:25">0xF</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:45">/* setup output and reference pointers */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:66"><expr pos:start="35:5" pos:end="35:65"><name pos:start="35:5" pos:end="35:10">offset</name> <operator pos:start="35:12" pos:end="35:12">=</operator> <operator pos:start="35:14" pos:end="35:14">(</operator><name pos:start="35:15" pos:end="35:24"><name pos:start="35:15" pos:end="35:18">cell</name><operator pos:start="35:19" pos:end="35:20">-&gt;</operator><name pos:start="35:21" pos:end="35:24">ypos</name></name> <operator pos:start="35:26" pos:end="35:27">&lt;&lt;</operator> <literal type="number" pos:start="35:29" pos:end="35:29">2</literal><operator pos:start="35:30" pos:end="35:30">)</operator> <operator pos:start="35:32" pos:end="35:32">*</operator> <name pos:start="35:34" pos:end="35:45"><name pos:start="35:34" pos:end="35:38">plane</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:45">pitch</name></name> <operator pos:start="35:47" pos:end="35:47">+</operator> <operator pos:start="35:49" pos:end="35:49">(</operator><name pos:start="35:50" pos:end="35:59"><name pos:start="35:50" pos:end="35:53">cell</name><operator pos:start="35:54" pos:end="35:55">-&gt;</operator><name pos:start="35:56" pos:end="35:59">xpos</name></name> <operator pos:start="35:61" pos:end="35:62">&lt;&lt;</operator> <literal type="number" pos:start="35:64" pos:end="35:64">2</literal><operator pos:start="35:65" pos:end="35:65">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:51"><expr pos:start="37:5" pos:end="37:50"><name pos:start="37:5" pos:end="37:9">block</name>  <operator pos:start="37:12" pos:end="37:12">=</operator>  <name pos:start="37:15" pos:end="37:41"><name pos:start="37:15" pos:end="37:19">plane</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:27">pixels</name><index pos:start="37:28" pos:end="37:41">[<expr pos:start="37:29" pos:end="37:40"><name pos:start="37:29" pos:end="37:40"><name pos:start="37:29" pos:end="37:31">ctx</name><operator pos:start="37:32" pos:end="37:33">-&gt;</operator><name pos:start="37:34" pos:end="37:40">buf_sel</name></name></expr>]</index></name> <operator pos:start="37:43" pos:end="37:43">+</operator> <name pos:start="37:45" pos:end="37:50">offset</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="233:33"><if pos:start="39:5" pos:end="45:5">if <condition pos:start="39:8" pos:end="39:22">(<expr pos:start="39:9" pos:end="39:21"><operator pos:start="39:9" pos:end="39:9">!</operator><name pos:start="39:10" pos:end="39:21"><name pos:start="39:10" pos:end="39:13">cell</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:21">mv_ptr</name></name></expr>)</condition> <block pos:start="39:24" pos:end="45:5">{<block_content pos:start="43:9" pos:end="43:41">

        <comment type="block" pos:start="41:9" pos:end="41:60">/* use previous line as reference for INTRA cells */</comment>

        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:17">ref_block</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <name pos:start="43:21" pos:end="43:25">block</name> <operator pos:start="43:27" pos:end="43:27">-</operator> <name pos:start="43:29" pos:end="43:40"><name pos:start="43:29" pos:end="43:33">plane</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:40">pitch</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="45:7" pos:end="53:5">else if <condition pos:start="45:15" pos:end="45:26">(<expr pos:start="45:16" pos:end="45:25"><name pos:start="45:16" pos:end="45:19">mode</name> <operator pos:start="45:21" pos:end="45:22">&gt;=</operator> <literal type="number" pos:start="45:24" pos:end="45:25">10</literal></expr>)</condition> <block pos:start="45:28" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:36">

        <comment type="block" pos:start="47:9" pos:end="47:89">/* for mode 10 and 11 INTER first copy the predicted cell into the current one */</comment>

        <comment type="block" pos:start="49:9" pos:end="49:73">/* so we don't need to do data copying for each RLE code later */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><call pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:17">copy_cell</name><argument_list pos:start="51:18" pos:end="51:35">(<argument pos:start="51:19" pos:end="51:21"><expr pos:start="51:19" pos:end="51:21"><name pos:start="51:19" pos:end="51:21">ctx</name></expr></argument>, <argument pos:start="51:24" pos:end="51:28"><expr pos:start="51:24" pos:end="51:28"><name pos:start="51:24" pos:end="51:28">plane</name></expr></argument>, <argument pos:start="51:31" pos:end="51:34"><expr pos:start="51:31" pos:end="51:34"><name pos:start="51:31" pos:end="51:34">cell</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="233:33">else <block pos:start="53:12" pos:end="233:33">{<block_content pos:start="57:9" pos:end="233:33">

        <comment type="block" pos:start="55:9" pos:end="55:73">/* set the pointer to the reference pixels for modes 0-4 INTER */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:36"><expr pos:start="57:9" pos:end="57:35"><name pos:start="57:9" pos:end="57:12">mv_y</name>      <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:35"><name pos:start="57:21" pos:end="57:24">cell</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:32">mv_ptr</name><index pos:start="57:33" pos:end="57:35">[<expr pos:start="57:34" pos:end="57:34"><literal type="number" pos:start="57:34" pos:end="57:34">0</literal></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:36"><expr pos:start="59:9" pos:end="59:35"><name pos:start="59:9" pos:end="59:12">mv_x</name>      <operator pos:start="59:19" pos:end="59:19">=</operator> <name pos:start="59:21" pos:end="59:35"><name pos:start="59:21" pos:end="59:24">cell</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:32">mv_ptr</name><index pos:start="59:33" pos:end="59:35">[<expr pos:start="59:34" pos:end="59:34"><literal type="number" pos:start="59:34" pos:end="59:34">1</literal></expr>]</index></name></expr>;</expr_stmt>








        <expr_stmt pos:start="68:9" pos:end="68:47"><expr pos:start="68:9" pos:end="68:46"><name pos:start="68:9" pos:end="68:14">offset</name>   <operator pos:start="68:18" pos:end="68:19">+=</operator> <name pos:start="68:21" pos:end="68:24">mv_y</name> <operator pos:start="68:26" pos:end="68:26">*</operator> <name pos:start="68:28" pos:end="68:39"><name pos:start="68:28" pos:end="68:32">plane</name><operator pos:start="68:33" pos:end="68:34">-&gt;</operator><name pos:start="68:35" pos:end="68:39">pitch</name></name> <operator pos:start="68:41" pos:end="68:41">+</operator> <name pos:start="68:43" pos:end="68:46">mv_x</name></expr>;</expr_stmt>

        <expr_stmt pos:start="70:9" pos:end="70:61"><expr pos:start="70:9" pos:end="70:60"><name pos:start="70:9" pos:end="70:17">ref_block</name> <operator pos:start="70:19" pos:end="70:19">=</operator> <name pos:start="70:21" pos:end="70:51"><name pos:start="70:21" pos:end="70:25">plane</name><operator pos:start="70:26" pos:end="70:27">-&gt;</operator><name pos:start="70:28" pos:end="70:33">pixels</name><index pos:start="70:34" pos:end="70:51">[<expr pos:start="70:35" pos:end="70:50"><name pos:start="70:35" pos:end="70:46"><name pos:start="70:35" pos:end="70:37">ctx</name><operator pos:start="70:38" pos:end="70:39">-&gt;</operator><name pos:start="70:40" pos:end="70:46">buf_sel</name></name> <operator pos:start="70:48" pos:end="70:48">^</operator> <literal type="number" pos:start="70:50" pos:end="70:50">1</literal></expr>]</index></name> <operator pos:start="70:53" pos:end="70:53">+</operator> <name pos:start="70:55" pos:end="70:60">offset</name></expr>;</expr_stmt>




    <comment type="block" pos:start="75:5" pos:end="75:38">/* select VQ tables as follows: */</comment>

    <comment type="block" pos:start="77:5" pos:end="77:75">/* modes 0 and 3 use only the primary table for all lines in a block */</comment>

    <comment type="block" pos:start="79:5" pos:end="79:92">/* while modes 1 and 4 switch between primary and secondary tables on alternate lines */</comment>

    <if_stmt pos:start="81:5" pos:end="233:33"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:31">(<expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:12">mode</name> <operator pos:start="81:14" pos:end="81:15">==</operator> <literal type="number" pos:start="81:17" pos:end="81:17">1</literal> <operator pos:start="81:19" pos:end="81:20">||</operator> <name pos:start="81:22" pos:end="81:25">mode</name> <operator pos:start="81:27" pos:end="81:28">==</operator> <literal type="number" pos:start="81:30" pos:end="81:30">4</literal></expr>)</condition> <block pos:start="81:33" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:52">

        <expr_stmt pos:start="83:9" pos:end="83:47"><expr pos:start="83:9" pos:end="83:46"><name pos:start="83:9" pos:end="83:12">code</name>        <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:46"><name pos:start="83:23" pos:end="83:25">ctx</name><operator pos:start="83:26" pos:end="83:27">-&gt;</operator><name pos:start="83:28" pos:end="83:36">alt_quant</name><index pos:start="83:37" pos:end="83:46">[<expr pos:start="83:38" pos:end="83:45"><name pos:start="83:38" pos:end="83:45">vq_index</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:52"><expr pos:start="85:9" pos:end="85:51"><name pos:start="85:9" pos:end="85:17">prim_indx</name>   <operator pos:start="85:21" pos:end="85:21">=</operator> <operator pos:start="85:23" pos:end="85:23">(</operator><name pos:start="85:24" pos:end="85:27">code</name> <operator pos:start="85:29" pos:end="85:30">&gt;&gt;</operator> <literal type="number" pos:start="85:32" pos:end="85:32">4</literal><operator pos:start="85:33" pos:end="85:33">)</operator>  <operator pos:start="85:36" pos:end="85:36">+</operator> <name pos:start="85:38" pos:end="85:51"><name pos:start="85:38" pos:end="85:40">ctx</name><operator pos:start="85:41" pos:end="85:42">-&gt;</operator><name pos:start="85:43" pos:end="85:51">cb_offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:52"><expr pos:start="87:9" pos:end="87:51"><name pos:start="87:9" pos:end="87:19">second_indx</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:27">code</name> <operator pos:start="87:29" pos:end="87:29">&amp;</operator> <literal type="number" pos:start="87:31" pos:end="87:33">0xF</literal><operator pos:start="87:34" pos:end="87:34">)</operator> <operator pos:start="87:36" pos:end="87:36">+</operator> <name pos:start="87:38" pos:end="87:51"><name pos:start="87:38" pos:end="87:40">ctx</name><operator pos:start="87:41" pos:end="87:42">-&gt;</operator><name pos:start="87:43" pos:end="87:51">cb_offset</name></name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="89:7" pos:end="233:33">else <block pos:start="89:12" pos:end="233:33">{<block_content pos:start="91:9" pos:end="233:33">

        <expr_stmt pos:start="91:9" pos:end="91:35"><expr pos:start="91:9" pos:end="91:34"><name pos:start="91:9" pos:end="91:16">vq_index</name> <operator pos:start="91:18" pos:end="91:19">+=</operator> <name pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:23">ctx</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:34">cb_offset</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:17">prim_indx</name> <operator pos:start="93:19" pos:end="93:19">=</operator> <name pos:start="93:21" pos:end="93:31">second_indx</name> <operator pos:start="93:33" pos:end="93:33">=</operator> <name pos:start="93:35" pos:end="93:42">vq_index</name></expr>;</expr_stmt>




    <if_stmt pos:start="98:5" pos:end="233:33"><if pos:start="98:5" pos:end="233:33">if <condition pos:start="98:8" pos:end="98:45">(<expr pos:start="98:9" pos:end="98:44"><name pos:start="98:9" pos:end="98:17">prim_indx</name> <operator pos:start="98:19" pos:end="98:20">&gt;=</operator> <literal type="number" pos:start="98:22" pos:end="98:23">24</literal> <operator pos:start="98:25" pos:end="98:26">||</operator> <name pos:start="98:28" pos:end="98:38">second_indx</name> <operator pos:start="98:40" pos:end="98:41">&gt;=</operator> <literal type="number" pos:start="98:43" pos:end="98:44">24</literal></expr>)</condition> <block pos:start="98:47" pos:end="233:33">{<block_content pos:start="100:9" pos:end="233:33">

        <expr_stmt pos:start="100:9" pos:end="102:39"><expr pos:start="100:9" pos:end="102:38"><call pos:start="100:9" pos:end="102:38"><name pos:start="100:9" pos:end="100:14">av_log</name><argument_list pos:start="100:15" pos:end="102:38">(<argument pos:start="100:16" pos:end="100:20"><expr pos:start="100:16" pos:end="100:20"><name pos:start="100:16" pos:end="100:20">avctx</name></expr></argument>, <argument pos:start="100:23" pos:end="100:34"><expr pos:start="100:23" pos:end="100:34"><name pos:start="100:23" pos:end="100:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="100:37" pos:end="100:93"><expr pos:start="100:37" pos:end="100:93"><literal type="string" pos:start="100:37" pos:end="100:93">"Invalid VQ table indexes! Primary: %d, secondary: %d!\n"</literal></expr></argument>,

               <argument pos:start="102:16" pos:end="102:24"><expr pos:start="102:16" pos:end="102:24"><name pos:start="102:16" pos:end="102:24">prim_indx</name></expr></argument>, <argument pos:start="102:27" pos:end="102:37"><expr pos:start="102:27" pos:end="102:37"><name pos:start="102:27" pos:end="102:37">second_indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <expr_stmt pos:start="108:5" pos:end="108:36"><expr pos:start="108:5" pos:end="108:35"><name pos:start="108:5" pos:end="108:12"><name pos:start="108:5" pos:end="108:9">delta</name><index pos:start="108:10" pos:end="108:12">[<expr pos:start="108:11" pos:end="108:11"><literal type="number" pos:start="108:11" pos:end="108:11">0</literal></expr>]</index></name> <operator pos:start="108:14" pos:end="108:14">=</operator> <operator pos:start="108:16" pos:end="108:16">&amp;</operator><name pos:start="108:17" pos:end="108:35"><name pos:start="108:17" pos:end="108:22">vq_tab</name><index pos:start="108:23" pos:end="108:35">[<expr pos:start="108:24" pos:end="108:34"><name pos:start="108:24" pos:end="108:34">second_indx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="110:5" pos:end="110:34"><expr pos:start="110:5" pos:end="110:33"><name pos:start="110:5" pos:end="110:12"><name pos:start="110:5" pos:end="110:9">delta</name><index pos:start="110:10" pos:end="110:12">[<expr pos:start="110:11" pos:end="110:11"><literal type="number" pos:start="110:11" pos:end="110:11">1</literal></expr>]</index></name> <operator pos:start="110:14" pos:end="110:14">=</operator> <operator pos:start="110:16" pos:end="110:16">&amp;</operator><name pos:start="110:17" pos:end="110:33"><name pos:start="110:17" pos:end="110:22">vq_tab</name><index pos:start="110:23" pos:end="110:33">[<expr pos:start="110:24" pos:end="110:32"><name pos:start="110:24" pos:end="110:32">prim_indx</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="112:5" pos:end="112:38"><expr pos:start="112:5" pos:end="112:37"><name pos:start="112:5" pos:end="112:17"><name pos:start="112:5" pos:end="112:14">swap_quads</name><index pos:start="112:15" pos:end="112:17">[<expr pos:start="112:16" pos:end="112:16"><literal type="number" pos:start="112:16" pos:end="112:16">0</literal></expr>]</index></name> <operator pos:start="112:19" pos:end="112:19">=</operator> <name pos:start="112:21" pos:end="112:31">second_indx</name> <operator pos:start="112:33" pos:end="112:34">&gt;=</operator> <literal type="number" pos:start="112:36" pos:end="112:37">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="114:5" pos:end="114:38"><expr pos:start="114:5" pos:end="114:37"><name pos:start="114:5" pos:end="114:17"><name pos:start="114:5" pos:end="114:14">swap_quads</name><index pos:start="114:15" pos:end="114:17">[<expr pos:start="114:16" pos:end="114:16"><literal type="number" pos:start="114:16" pos:end="114:16">1</literal></expr>]</index></name> <operator pos:start="114:19" pos:end="114:19">=</operator> <name pos:start="114:21" pos:end="114:29">prim_indx</name>   <operator pos:start="114:33" pos:end="114:34">&gt;=</operator> <literal type="number" pos:start="114:36" pos:end="114:37">16</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="118:5" pos:end="118:82">/* requantize the prediction if VQ index of this cell differs from VQ index */</comment>

    <comment type="block" pos:start="120:5" pos:end="120:60">/* of the predicted cell in order to avoid overflows. */</comment>

    <if_stmt pos:start="122:5" pos:end="233:33"><if pos:start="122:5" pos:end="233:33">if <condition pos:start="122:8" pos:end="122:35">(<expr pos:start="122:9" pos:end="122:34"><name pos:start="122:9" pos:end="122:16">vq_index</name> <operator pos:start="122:18" pos:end="122:19">&gt;=</operator> <literal type="number" pos:start="122:21" pos:end="122:21">8</literal> <operator pos:start="122:23" pos:end="122:24">&amp;&amp;</operator> <name pos:start="122:26" pos:end="122:34">ref_block</name></expr>)</condition> <block pos:start="122:37" pos:end="233:33">{<block_content pos:start="124:9" pos:end="233:33">

        <for pos:start="124:9" pos:end="126:67">for <control pos:start="124:13" pos:end="124:46">(<init pos:start="124:14" pos:end="124:19"><expr pos:start="124:14" pos:end="124:18"><name pos:start="124:14" pos:end="124:14">x</name> <operator pos:start="124:16" pos:end="124:16">=</operator> <literal type="number" pos:start="124:18" pos:end="124:18">0</literal></expr>;</init> <condition pos:start="124:21" pos:end="124:41"><expr pos:start="124:21" pos:end="124:40"><name pos:start="124:21" pos:end="124:21">x</name> <operator pos:start="124:23" pos:end="124:23">&lt;</operator> <name pos:start="124:25" pos:end="124:35"><name pos:start="124:25" pos:end="124:28">cell</name><operator pos:start="124:29" pos:end="124:30">-&gt;</operator><name pos:start="124:31" pos:end="124:35">width</name></name> <operator pos:start="124:37" pos:end="124:38">&lt;&lt;</operator> <literal type="number" pos:start="124:40" pos:end="124:40">2</literal></expr>;</condition> <incr pos:start="124:43" pos:end="124:45"><expr pos:start="124:43" pos:end="124:45"><name pos:start="124:43" pos:end="124:43">x</name><operator pos:start="124:44" pos:end="124:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="126:13" pos:end="126:67"><block_content pos:start="126:13" pos:end="126:67">

            <expr_stmt pos:start="126:13" pos:end="126:67"><expr pos:start="126:13" pos:end="126:66"><name pos:start="126:13" pos:end="126:24"><name pos:start="126:13" pos:end="126:21">ref_block</name><index pos:start="126:22" pos:end="126:24">[<expr pos:start="126:23" pos:end="126:23"><name pos:start="126:23" pos:end="126:23">x</name></expr>]</index></name> <operator pos:start="126:26" pos:end="126:26">=</operator> <name pos:start="126:28" pos:end="126:66"><name pos:start="126:28" pos:end="126:38">requant_tab</name><index pos:start="126:39" pos:end="126:52">[<expr pos:start="126:40" pos:end="126:51"><name pos:start="126:40" pos:end="126:47">vq_index</name> <operator pos:start="126:49" pos:end="126:49">&amp;</operator> <literal type="number" pos:start="126:51" pos:end="126:51">7</literal></expr>]</index><index pos:start="126:53" pos:end="126:66">[<expr pos:start="126:54" pos:end="126:65"><name pos:start="126:54" pos:end="126:65"><name pos:start="126:54" pos:end="126:62">ref_block</name><index pos:start="126:63" pos:end="126:65">[<expr pos:start="126:64" pos:end="126:64"><name pos:start="126:64" pos:end="126:64">x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>




    <expr_stmt pos:start="131:5" pos:end="131:22"><expr pos:start="131:5" pos:end="131:21"><name pos:start="131:5" pos:end="131:9">error</name> <operator pos:start="131:11" pos:end="131:11">=</operator> <name pos:start="131:13" pos:end="131:21">IV3_NOERR</name></expr>;</expr_stmt>



    <switch pos:start="135:5" pos:end="233:33">switch <condition pos:start="135:12" pos:end="135:17">(<expr pos:start="135:13" pos:end="135:16"><name pos:start="135:13" pos:end="135:16">mode</name></expr>)</condition> <block pos:start="135:19" pos:end="233:33">{<block_content pos:start="137:5" pos:end="233:33">

    <case pos:start="137:5" pos:end="137:11">case <expr pos:start="137:10" pos:end="137:10"><literal type="number" pos:start="137:10" pos:end="137:10">0</literal></expr>:</case> <comment type="block" pos:start="137:13" pos:end="137:90">/*------------------ MODES 0 &amp; 1 (4x4 block processing) --------------------*/</comment>

    <case pos:start="139:5" pos:end="139:11">case <expr pos:start="139:10" pos:end="139:10"><literal type="number" pos:start="139:10" pos:end="139:10">1</literal></expr>:</case>

    <case pos:start="141:5" pos:end="141:11">case <expr pos:start="141:10" pos:end="141:10"><literal type="number" pos:start="141:10" pos:end="141:10">3</literal></expr>:</case> <comment type="block" pos:start="141:13" pos:end="141:90">/*------------------ MODES 3 &amp; 4 (4x8 block processing) --------------------*/</comment>

    <case pos:start="143:5" pos:end="143:11">case <expr pos:start="143:10" pos:end="143:10"><literal type="number" pos:start="143:10" pos:end="143:10">4</literal></expr>:</case>

        <if_stmt pos:start="145:9" pos:end="233:33"><if pos:start="145:9" pos:end="233:33">if <condition pos:start="145:12" pos:end="145:38">(<expr pos:start="145:13" pos:end="145:37"><name pos:start="145:13" pos:end="145:16">mode</name> <operator pos:start="145:18" pos:end="145:19">&gt;=</operator> <literal type="number" pos:start="145:21" pos:end="145:21">3</literal> <operator pos:start="145:23" pos:end="145:24">&amp;&amp;</operator> <name pos:start="145:26" pos:end="145:37"><name pos:start="145:26" pos:end="145:29">cell</name><operator pos:start="145:30" pos:end="145:31">-&gt;</operator><name pos:start="145:32" pos:end="145:37">mv_ptr</name></name></expr>)</condition> <block pos:start="145:40" pos:end="233:33">{<block_content pos:start="147:13" pos:end="233:33">

            <expr_stmt pos:start="147:13" pos:end="147:89"><expr pos:start="147:13" pos:end="147:88"><call pos:start="147:13" pos:end="147:88"><name pos:start="147:13" pos:end="147:18">av_log</name><argument_list pos:start="147:19" pos:end="147:88">(<argument pos:start="147:20" pos:end="147:24"><expr pos:start="147:20" pos:end="147:24"><name pos:start="147:20" pos:end="147:24">avctx</name></expr></argument>, <argument pos:start="147:27" pos:end="147:38"><expr pos:start="147:27" pos:end="147:38"><name pos:start="147:27" pos:end="147:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="147:41" pos:end="147:87"><expr pos:start="147:41" pos:end="147:87"><literal type="string" pos:start="147:41" pos:end="147:87">"Attempt to apply Mode 3/4 to an INTER cell!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





        <expr_stmt pos:start="153:9" pos:end="153:29"><expr pos:start="153:9" pos:end="153:28"><name pos:start="153:9" pos:end="153:16">zoom_fac</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <name pos:start="153:20" pos:end="153:23">mode</name> <operator pos:start="153:25" pos:end="153:26">&gt;=</operator> <literal type="number" pos:start="153:28" pos:end="153:28">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="157:79"><expr pos:start="155:9" pos:end="157:78"><name pos:start="155:9" pos:end="155:13">error</name> <operator pos:start="155:15" pos:end="155:15">=</operator> <call pos:start="155:17" pos:end="157:78"><name pos:start="155:17" pos:end="155:32">decode_cell_data</name><argument_list pos:start="155:33" pos:end="157:78">(<argument pos:start="155:34" pos:end="155:37"><expr pos:start="155:34" pos:end="155:37"><name pos:start="155:34" pos:end="155:37">cell</name></expr></argument>, <argument pos:start="155:40" pos:end="155:44"><expr pos:start="155:40" pos:end="155:44"><name pos:start="155:40" pos:end="155:44">block</name></expr></argument>, <argument pos:start="155:47" pos:end="155:55"><expr pos:start="155:47" pos:end="155:55"><name pos:start="155:47" pos:end="155:55">ref_block</name></expr></argument>, <argument pos:start="155:58" pos:end="155:69"><expr pos:start="155:58" pos:end="155:69"><name pos:start="155:58" pos:end="155:69"><name pos:start="155:58" pos:end="155:62">plane</name><operator pos:start="155:63" pos:end="155:64">-&gt;</operator><name pos:start="155:65" pos:end="155:69">pitch</name></name></expr></argument>, <argument pos:start="155:72" pos:end="155:72"><expr pos:start="155:72" pos:end="155:72"><literal type="number" pos:start="155:72" pos:end="155:72">0</literal></expr></argument>, <argument pos:start="155:75" pos:end="155:82"><expr pos:start="155:75" pos:end="155:82"><name pos:start="155:75" pos:end="155:82">zoom_fac</name></expr></argument>,

                                 <argument pos:start="157:34" pos:end="157:37"><expr pos:start="157:34" pos:end="157:37"><name pos:start="157:34" pos:end="157:37">mode</name></expr></argument>, <argument pos:start="157:40" pos:end="157:44"><expr pos:start="157:40" pos:end="157:44"><name pos:start="157:40" pos:end="157:44">delta</name></expr></argument>, <argument pos:start="157:47" pos:end="157:56"><expr pos:start="157:47" pos:end="157:56"><name pos:start="157:47" pos:end="157:56">swap_quads</name></expr></argument>, <argument pos:start="157:59" pos:end="157:67"><expr pos:start="157:59" pos:end="157:67"><operator pos:start="157:59" pos:end="157:59">&amp;</operator><name pos:start="157:60" pos:end="157:67">data_ptr</name></expr></argument>, <argument pos:start="157:70" pos:end="157:77"><expr pos:start="157:70" pos:end="157:77"><name pos:start="157:70" pos:end="157:77">last_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="159:9" pos:end="159:14">break;</break>

    <case pos:start="161:5" pos:end="161:12">case <expr pos:start="161:10" pos:end="161:11"><literal type="number" pos:start="161:10" pos:end="161:11">10</literal></expr>:</case> <comment type="block" pos:start="161:14" pos:end="161:90">/*-------------------- MODE 10 (8x8 block processing) ---------------------*/</comment>

    <case pos:start="163:5" pos:end="163:12">case <expr pos:start="163:10" pos:end="163:11"><literal type="number" pos:start="163:10" pos:end="163:11">11</literal></expr>:</case> <comment type="block" pos:start="163:14" pos:end="163:90">/*----------------- MODE 11 (4x8 INTER block processing) ------------------*/</comment>

        <if_stmt pos:start="165:9" pos:end="233:33"><if pos:start="165:9" pos:end="171:9">if <condition pos:start="165:12" pos:end="165:40">(<expr pos:start="165:13" pos:end="165:39"><name pos:start="165:13" pos:end="165:16">mode</name> <operator pos:start="165:18" pos:end="165:19">==</operator> <literal type="number" pos:start="165:21" pos:end="165:22">10</literal> <operator pos:start="165:24" pos:end="165:25">&amp;&amp;</operator> <operator pos:start="165:27" pos:end="165:27">!</operator><name pos:start="165:28" pos:end="165:39"><name pos:start="165:28" pos:end="165:31">cell</name><operator pos:start="165:32" pos:end="165:33">-&gt;</operator><name pos:start="165:34" pos:end="165:39">mv_ptr</name></name></expr>)</condition> <block pos:start="165:42" pos:end="171:9">{<block_content pos:start="167:13" pos:end="169:83"> <comment type="block" pos:start="165:44" pos:end="165:73">/* MODE 10 INTRA processing */</comment>

            <expr_stmt pos:start="167:13" pos:end="169:83"><expr pos:start="167:13" pos:end="169:82"><name pos:start="167:13" pos:end="167:17">error</name> <operator pos:start="167:19" pos:end="167:19">=</operator> <call pos:start="167:21" pos:end="169:82"><name pos:start="167:21" pos:end="167:36">decode_cell_data</name><argument_list pos:start="167:37" pos:end="169:82">(<argument pos:start="167:38" pos:end="167:41"><expr pos:start="167:38" pos:end="167:41"><name pos:start="167:38" pos:end="167:41">cell</name></expr></argument>, <argument pos:start="167:44" pos:end="167:48"><expr pos:start="167:44" pos:end="167:48"><name pos:start="167:44" pos:end="167:48">block</name></expr></argument>, <argument pos:start="167:51" pos:end="167:59"><expr pos:start="167:51" pos:end="167:59"><name pos:start="167:51" pos:end="167:59">ref_block</name></expr></argument>, <argument pos:start="167:62" pos:end="167:73"><expr pos:start="167:62" pos:end="167:73"><name pos:start="167:62" pos:end="167:73"><name pos:start="167:62" pos:end="167:66">plane</name><operator pos:start="167:67" pos:end="167:68">-&gt;</operator><name pos:start="167:69" pos:end="167:73">pitch</name></name></expr></argument>, <argument pos:start="167:76" pos:end="167:76"><expr pos:start="167:76" pos:end="167:76"><literal type="number" pos:start="167:76" pos:end="167:76">1</literal></expr></argument>, <argument pos:start="167:79" pos:end="167:79"><expr pos:start="167:79" pos:end="167:79"><literal type="number" pos:start="167:79" pos:end="167:79">1</literal></expr></argument>,

                                     <argument pos:start="169:38" pos:end="169:41"><expr pos:start="169:38" pos:end="169:41"><name pos:start="169:38" pos:end="169:41">mode</name></expr></argument>, <argument pos:start="169:44" pos:end="169:48"><expr pos:start="169:44" pos:end="169:48"><name pos:start="169:44" pos:end="169:48">delta</name></expr></argument>, <argument pos:start="169:51" pos:end="169:60"><expr pos:start="169:51" pos:end="169:60"><name pos:start="169:51" pos:end="169:60">swap_quads</name></expr></argument>, <argument pos:start="169:63" pos:end="169:71"><expr pos:start="169:63" pos:end="169:71"><operator pos:start="169:63" pos:end="169:63">&amp;</operator><name pos:start="169:64" pos:end="169:71">data_ptr</name></expr></argument>, <argument pos:start="169:74" pos:end="169:81"><expr pos:start="169:74" pos:end="169:81"><name pos:start="169:74" pos:end="169:81">last_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="171:11" pos:end="233:33">else <block pos:start="171:16" pos:end="233:33">{<block_content pos:start="173:13" pos:end="233:33"> <comment type="block" pos:start="171:18" pos:end="171:54">/* mode 10 and 11 INTER processing */</comment>

            <if_stmt pos:start="173:13" pos:end="197:5"><if pos:start="173:13" pos:end="197:5">if <condition pos:start="173:16" pos:end="173:44">(<expr pos:start="173:17" pos:end="173:43"><name pos:start="173:17" pos:end="173:20">mode</name> <operator pos:start="173:22" pos:end="173:23">==</operator> <literal type="number" pos:start="173:25" pos:end="173:26">11</literal> <operator pos:start="173:28" pos:end="173:29">&amp;&amp;</operator> <operator pos:start="173:31" pos:end="173:31">!</operator><name pos:start="173:32" pos:end="173:43"><name pos:start="173:32" pos:end="173:35">cell</name><operator pos:start="173:36" pos:end="173:37">-&gt;</operator><name pos:start="173:38" pos:end="173:43">mv_ptr</name></name></expr>)</condition> <block pos:start="173:46" pos:end="197:5">{<block_content pos:start="175:16" pos:end="194:75">

               <expr_stmt pos:start="175:16" pos:end="175:90"><expr pos:start="175:16" pos:end="175:89"><call pos:start="175:16" pos:end="175:89"><name pos:start="175:16" pos:end="175:21">av_log</name><argument_list pos:start="175:22" pos:end="175:89">(<argument pos:start="175:23" pos:end="175:27"><expr pos:start="175:23" pos:end="175:27"><name pos:start="175:23" pos:end="175:27">avctx</name></expr></argument>, <argument pos:start="175:30" pos:end="175:41"><expr pos:start="175:30" pos:end="175:41"><name pos:start="175:30" pos:end="175:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:44" pos:end="175:88"><expr pos:start="175:44" pos:end="175:88"><literal type="string" pos:start="175:44" pos:end="175:88">"Attempt to use Mode 11 for an INTRA cell!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>





            <expr_stmt pos:start="181:13" pos:end="181:34"><expr pos:start="181:13" pos:end="181:33"><name pos:start="181:13" pos:end="181:20">zoom_fac</name> <operator pos:start="181:22" pos:end="181:22">=</operator> <name pos:start="181:24" pos:end="181:27">mode</name> <operator pos:start="181:29" pos:end="181:30">==</operator> <literal type="number" pos:start="181:32" pos:end="181:33">10</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="187:58"><expr pos:start="183:13" pos:end="187:57"><name pos:start="183:13" pos:end="183:17">error</name> <operator pos:start="183:19" pos:end="183:19">=</operator> <call pos:start="183:21" pos:end="187:57"><name pos:start="183:21" pos:end="183:36">decode_cell_data</name><argument_list pos:start="183:37" pos:end="187:57">(<argument pos:start="183:38" pos:end="183:41"><expr pos:start="183:38" pos:end="183:41"><name pos:start="183:38" pos:end="183:41">cell</name></expr></argument>, <argument pos:start="183:44" pos:end="183:48"><expr pos:start="183:44" pos:end="183:48"><name pos:start="183:44" pos:end="183:48">block</name></expr></argument>, <argument pos:start="183:51" pos:end="183:59"><expr pos:start="183:51" pos:end="183:59"><name pos:start="183:51" pos:end="183:59">ref_block</name></expr></argument>, <argument pos:start="183:62" pos:end="183:73"><expr pos:start="183:62" pos:end="183:73"><name pos:start="183:62" pos:end="183:73"><name pos:start="183:62" pos:end="183:66">plane</name><operator pos:start="183:67" pos:end="183:68">-&gt;</operator><name pos:start="183:69" pos:end="183:73">pitch</name></name></expr></argument>,

                                     <argument pos:start="185:38" pos:end="185:45"><expr pos:start="185:38" pos:end="185:45"><name pos:start="185:38" pos:end="185:45">zoom_fac</name></expr></argument>, <argument pos:start="185:48" pos:end="185:48"><expr pos:start="185:48" pos:end="185:48"><literal type="number" pos:start="185:48" pos:end="185:48">1</literal></expr></argument>, <argument pos:start="185:51" pos:end="185:54"><expr pos:start="185:51" pos:end="185:54"><name pos:start="185:51" pos:end="185:54">mode</name></expr></argument>, <argument pos:start="185:57" pos:end="185:61"><expr pos:start="185:57" pos:end="185:61"><name pos:start="185:57" pos:end="185:61">delta</name></expr></argument>, <argument pos:start="185:64" pos:end="185:73"><expr pos:start="185:64" pos:end="185:73"><name pos:start="185:64" pos:end="185:73">swap_quads</name></expr></argument>,

                                     <argument pos:start="187:38" pos:end="187:46"><expr pos:start="187:38" pos:end="187:46"><operator pos:start="187:38" pos:end="187:38">&amp;</operator><name pos:start="187:39" pos:end="187:46">data_ptr</name></expr></argument>, <argument pos:start="187:49" pos:end="187:56"><expr pos:start="187:49" pos:end="187:56"><name pos:start="187:49" pos:end="187:56">last_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <break pos:start="190:9" pos:end="190:14">break;</break>

    <default pos:start="192:5" pos:end="192:12">default:</default>

        <expr_stmt pos:start="194:9" pos:end="194:75"><expr pos:start="194:9" pos:end="194:74"><call pos:start="194:9" pos:end="194:74"><name pos:start="194:9" pos:end="194:14">av_log</name><argument_list pos:start="194:15" pos:end="194:74">(<argument pos:start="194:16" pos:end="194:20"><expr pos:start="194:16" pos:end="194:20"><name pos:start="194:16" pos:end="194:20">avctx</name></expr></argument>, <argument pos:start="194:23" pos:end="194:34"><expr pos:start="194:23" pos:end="194:34"><name pos:start="194:23" pos:end="194:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="194:37" pos:end="194:67"><expr pos:start="194:37" pos:end="194:67"><literal type="string" pos:start="194:37" pos:end="194:67">"Unsupported coding mode: %d\n"</literal></expr></argument>, <argument pos:start="194:70" pos:end="194:73"><expr pos:start="194:70" pos:end="194:73"><name pos:start="194:70" pos:end="194:73">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    </block_content>}</block></if></if_stmt><comment type="line" pos:start="197:6" pos:end="197:18">//switch mode</comment>



    <switch pos:start="201:5" pos:end="233:33">switch <condition pos:start="201:12" pos:end="201:18">(<expr pos:start="201:13" pos:end="201:17"><name pos:start="201:13" pos:end="201:17">error</name></expr>)</condition> <block pos:start="201:20" pos:end="233:33">{<block_content pos:start="203:5" pos:end="233:33">

    <case pos:start="203:5" pos:end="203:21">case <expr pos:start="203:10" pos:end="203:20"><name pos:start="203:10" pos:end="203:20">IV3_BAD_RLE</name></expr>:</case>

        <expr_stmt pos:start="205:9" pos:end="207:35"><expr pos:start="205:9" pos:end="207:34"><call pos:start="205:9" pos:end="207:34"><name pos:start="205:9" pos:end="205:14">av_log</name><argument_list pos:start="205:15" pos:end="207:34">(<argument pos:start="205:16" pos:end="205:20"><expr pos:start="205:16" pos:end="205:20"><name pos:start="205:16" pos:end="205:20">avctx</name></expr></argument>, <argument pos:start="205:23" pos:end="205:34"><expr pos:start="205:23" pos:end="205:34"><name pos:start="205:23" pos:end="205:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="205:37" pos:end="205:95"><expr pos:start="205:37" pos:end="205:95"><literal type="string" pos:start="205:37" pos:end="205:95">"Mode %d: RLE code %X is not allowed at the current line\n"</literal></expr></argument>,

               <argument pos:start="207:16" pos:end="207:19"><expr pos:start="207:16" pos:end="207:19"><name pos:start="207:16" pos:end="207:19">mode</name></expr></argument>, <argument pos:start="207:22" pos:end="207:33"><expr pos:start="207:22" pos:end="207:33"><name pos:start="207:22" pos:end="207:33"><name pos:start="207:22" pos:end="207:29">data_ptr</name><index pos:start="207:30" pos:end="207:33">[<expr pos:start="207:31" pos:end="207:32"><operator pos:start="207:31" pos:end="207:31">-</operator><literal type="number" pos:start="207:32" pos:end="207:32">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <case pos:start="210:5" pos:end="210:22">case <expr pos:start="210:10" pos:end="210:21"><name pos:start="210:10" pos:end="210:21">IV3_BAD_DATA</name></expr>:</case>

        <expr_stmt pos:start="212:9" pos:end="212:72"><expr pos:start="212:9" pos:end="212:71"><call pos:start="212:9" pos:end="212:71"><name pos:start="212:9" pos:end="212:14">av_log</name><argument_list pos:start="212:15" pos:end="212:71">(<argument pos:start="212:16" pos:end="212:20"><expr pos:start="212:16" pos:end="212:20"><name pos:start="212:16" pos:end="212:20">avctx</name></expr></argument>, <argument pos:start="212:23" pos:end="212:34"><expr pos:start="212:23" pos:end="212:34"><name pos:start="212:23" pos:end="212:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="212:37" pos:end="212:64"><expr pos:start="212:37" pos:end="212:64"><literal type="string" pos:start="212:37" pos:end="212:64">"Mode %d: invalid VQ data\n"</literal></expr></argument>, <argument pos:start="212:67" pos:end="212:70"><expr pos:start="212:67" pos:end="212:70"><name pos:start="212:67" pos:end="212:70">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <case pos:start="215:5" pos:end="215:25">case <expr pos:start="215:10" pos:end="215:24"><name pos:start="215:10" pos:end="215:24">IV3_BAD_COUNTER</name></expr>:</case>

        <expr_stmt pos:start="217:9" pos:end="217:89"><expr pos:start="217:9" pos:end="217:88"><call pos:start="217:9" pos:end="217:88"><name pos:start="217:9" pos:end="217:14">av_log</name><argument_list pos:start="217:15" pos:end="217:88">(<argument pos:start="217:16" pos:end="217:20"><expr pos:start="217:16" pos:end="217:20"><name pos:start="217:16" pos:end="217:20">avctx</name></expr></argument>, <argument pos:start="217:23" pos:end="217:34"><expr pos:start="217:23" pos:end="217:34"><name pos:start="217:23" pos:end="217:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="217:37" pos:end="217:75"><expr pos:start="217:37" pos:end="217:75"><literal type="string" pos:start="217:37" pos:end="217:75">"Mode %d: RLE-FB invalid counter: %d\n"</literal></expr></argument>, <argument pos:start="217:78" pos:end="217:81"><expr pos:start="217:78" pos:end="217:81"><name pos:start="217:78" pos:end="217:81">mode</name></expr></argument>, <argument pos:start="217:84" pos:end="217:87"><expr pos:start="217:84" pos:end="217:87"><name pos:start="217:84" pos:end="217:87">code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <case pos:start="220:5" pos:end="220:25">case <expr pos:start="220:10" pos:end="220:24"><name pos:start="220:10" pos:end="220:24">IV3_UNSUPPORTED</name></expr>:</case>

        <expr_stmt pos:start="222:9" pos:end="222:95"><expr pos:start="222:9" pos:end="222:94"><call pos:start="222:9" pos:end="222:94"><name pos:start="222:9" pos:end="222:14">av_log</name><argument_list pos:start="222:15" pos:end="222:94">(<argument pos:start="222:16" pos:end="222:20"><expr pos:start="222:16" pos:end="222:20"><name pos:start="222:16" pos:end="222:20">avctx</name></expr></argument>, <argument pos:start="222:23" pos:end="222:34"><expr pos:start="222:23" pos:end="222:34"><name pos:start="222:23" pos:end="222:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="222:37" pos:end="222:73"><expr pos:start="222:37" pos:end="222:73"><literal type="string" pos:start="222:37" pos:end="222:73">"Mode %d: unsupported RLE code: %X\n"</literal></expr></argument>, <argument pos:start="222:76" pos:end="222:79"><expr pos:start="222:76" pos:end="222:79"><name pos:start="222:76" pos:end="222:79">mode</name></expr></argument>, <argument pos:start="222:82" pos:end="222:93"><expr pos:start="222:82" pos:end="222:93"><name pos:start="222:82" pos:end="222:93"><name pos:start="222:82" pos:end="222:89">data_ptr</name><index pos:start="222:90" pos:end="222:93">[<expr pos:start="222:91" pos:end="222:92"><operator pos:start="222:91" pos:end="222:91">-</operator><literal type="number" pos:start="222:92" pos:end="222:92">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <case pos:start="225:5" pos:end="225:25">case <expr pos:start="225:10" pos:end="225:24"><name pos:start="225:10" pos:end="225:24">IV3_OUT_OF_DATA</name></expr>:</case>

        <expr_stmt pos:start="227:9" pos:end="227:91"><expr pos:start="227:9" pos:end="227:90"><call pos:start="227:9" pos:end="227:90"><name pos:start="227:9" pos:end="227:14">av_log</name><argument_list pos:start="227:15" pos:end="227:90">(<argument pos:start="227:16" pos:end="227:20"><expr pos:start="227:16" pos:end="227:20"><name pos:start="227:16" pos:end="227:20">avctx</name></expr></argument>, <argument pos:start="227:23" pos:end="227:34"><expr pos:start="227:23" pos:end="227:34"><name pos:start="227:23" pos:end="227:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:37" pos:end="227:83"><expr pos:start="227:37" pos:end="227:83"><literal type="string" pos:start="227:37" pos:end="227:83">"Mode %d: attempt to read past end of buffer\n"</literal></expr></argument>, <argument pos:start="227:86" pos:end="227:89"><expr pos:start="227:86" pos:end="227:89"><name pos:start="227:86" pos:end="227:89">mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





    <return pos:start="233:5" pos:end="233:33">return <expr pos:start="233:12" pos:end="233:32"><name pos:start="233:12" pos:end="233:19">data_ptr</name> <operator pos:start="233:21" pos:end="233:21">-</operator> <name pos:start="233:23" pos:end="233:32">data_start</name></expr>;</return></block_content></block></switch></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></function> <comment type="block" pos:start="233:35" pos:end="233:93">/* report number of bytes consumed from the input buffer */</comment>
</unit>
