<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18026.c" pos:tabs="8"><function pos:start="1:1" pos:end="257:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:37">atrac3_decode_init</name><parameter_list pos:start="1:38" pos:end="1:60">(<parameter pos:start="1:39" pos:end="1:59"><decl pos:start="1:39" pos:end="1:59"><type pos:start="1:39" pos:end="1:54"><name pos:start="1:39" pos:end="1:52">AVCodecContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:59">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="257:1">{<block_content pos:start="5:5" pos:end="255:13">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">version</name></decl>, <decl pos:start="7:18" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:22">delay</name></decl>, <decl pos:start="7:25" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:41">samples_per_frame</name></decl>, <decl pos:start="7:44" pos:end="7:55"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:44" pos:end="7:55">frame_factor</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:48"><decl pos:start="9:5" pos:end="9:47"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:28">edata_ptr</name> <init pos:start="9:30" pos:end="9:47">= <expr pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:47"><name pos:start="9:32" pos:end="9:36">avctx</name><operator pos:start="9:37" pos:end="9:38">-&gt;</operator><name pos:start="9:39" pos:end="9:47">extradata</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:40"><decl pos:start="11:5" pos:end="11:39"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">ATRAC3Context</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">q</name> <init pos:start="11:22" pos:end="11:39">= <expr pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:39"><name pos:start="11:24" pos:end="11:28">avctx</name><operator pos:start="11:29" pos:end="11:30">-&gt;</operator><name pos:start="11:31" pos:end="11:39">priv_data</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:5"><if pos:start="15:5" pos:end="21:5">if <condition pos:start="15:8" pos:end="15:52">(<expr pos:start="15:9" pos:end="15:51"><name pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:13">avctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:23">channels</name></name> <operator pos:start="15:25" pos:end="15:26">&lt;=</operator> <literal type="number" pos:start="15:28" pos:end="15:28">0</literal> <operator pos:start="15:30" pos:end="15:31">||</operator> <name pos:start="15:33" pos:end="15:47"><name pos:start="15:33" pos:end="15:37">avctx</name><operator pos:start="15:38" pos:end="15:39">-&gt;</operator><name pos:start="15:40" pos:end="15:47">channels</name></name> <operator pos:start="15:49" pos:end="15:49">&gt;</operator> <literal type="number" pos:start="15:51" pos:end="15:51">2</literal></expr>)</condition> <block pos:start="15:54" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:31">

        <expr_stmt pos:start="17:9" pos:end="17:70"><expr pos:start="17:9" pos:end="17:69"><call pos:start="17:9" pos:end="17:69"><name pos:start="17:9" pos:end="17:14">av_log</name><argument_list pos:start="17:15" pos:end="17:69">(<argument pos:start="17:16" pos:end="17:20"><expr pos:start="17:16" pos:end="17:20"><name pos:start="17:16" pos:end="17:20">avctx</name></expr></argument>, <argument pos:start="17:23" pos:end="17:34"><expr pos:start="17:23" pos:end="17:34"><name pos:start="17:23" pos:end="17:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="17:37" pos:end="17:68"><expr pos:start="17:37" pos:end="17:68"><literal type="string" pos:start="17:37" pos:end="17:68">"Channel configuration error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="19:9" pos:end="19:31">return <expr pos:start="19:16" pos:end="19:30"><call pos:start="19:16" pos:end="19:30"><name pos:start="19:16" pos:end="19:22">AVERROR</name><argument_list pos:start="19:23" pos:end="19:30">(<argument pos:start="19:24" pos:end="19:29"><expr pos:start="19:24" pos:end="19:29"><name pos:start="19:24" pos:end="19:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:52">/* Take care of the codec-specific extradata. */</comment>

    <if_stmt pos:start="27:5" pos:end="105:5"><if pos:start="27:5" pos:end="81:5">if <condition pos:start="27:8" pos:end="27:36">(<expr pos:start="27:9" pos:end="27:35"><name pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:29">extradata_size</name></name> <operator pos:start="27:31" pos:end="27:32">==</operator> <literal type="number" pos:start="27:34" pos:end="27:35">14</literal></expr>)</condition> <block pos:start="27:38" pos:end="81:5">{<block_content pos:start="31:9" pos:end="79:9">

        <comment type="block" pos:start="29:9" pos:end="29:45">/* Parse the extradata, WAV format */</comment>

        <expr_stmt pos:start="31:9" pos:end="33:48"><expr pos:start="31:9" pos:end="33:47"><call pos:start="31:9" pos:end="33:47"><name pos:start="31:9" pos:end="31:14">av_log</name><argument_list pos:start="31:15" pos:end="33:47">(<argument pos:start="31:16" pos:end="31:20"><expr pos:start="31:16" pos:end="31:20"><name pos:start="31:16" pos:end="31:20">avctx</name></expr></argument>, <argument pos:start="31:23" pos:end="31:34"><expr pos:start="31:23" pos:end="31:34"><name pos:start="31:23" pos:end="31:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="31:37" pos:end="31:48"><expr pos:start="31:37" pos:end="31:48"><literal type="string" pos:start="31:37" pos:end="31:48">"[0-1] %d\n"</literal></expr></argument>,

               <argument pos:start="33:16" pos:end="33:46"><expr pos:start="33:16" pos:end="33:46"><call pos:start="33:16" pos:end="33:46"><name pos:start="33:16" pos:end="33:34">bytestream_get_le16</name><argument_list pos:start="33:35" pos:end="33:46">(<argument pos:start="33:36" pos:end="33:45"><expr pos:start="33:36" pos:end="33:45"><operator pos:start="33:36" pos:end="33:36">&amp;</operator><name pos:start="33:37" pos:end="33:45">edata_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="33:51" pos:end="33:75">// Unknown value always 1</comment>

        <expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:17">edata_ptr</name> <operator pos:start="35:19" pos:end="35:20">+=</operator> <literal type="number" pos:start="35:22" pos:end="35:22">4</literal></expr>;</expr_stmt>                             <comment type="line" pos:start="35:53" pos:end="35:74">// samples per channel</comment>

        <expr_stmt pos:start="37:9" pos:end="37:57"><expr pos:start="37:9" pos:end="37:56"><name pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:9">q</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:22">coding_mode</name></name> <operator pos:start="37:24" pos:end="37:24">=</operator> <call pos:start="37:26" pos:end="37:56"><name pos:start="37:26" pos:end="37:44">bytestream_get_le16</name><argument_list pos:start="37:45" pos:end="37:56">(<argument pos:start="37:46" pos:end="37:55"><expr pos:start="37:46" pos:end="37:55"><operator pos:start="37:46" pos:end="37:46">&amp;</operator><name pos:start="37:47" pos:end="37:55">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="41:48"><expr pos:start="39:9" pos:end="41:47"><call pos:start="39:9" pos:end="41:47"><name pos:start="39:9" pos:end="39:14">av_log</name><argument_list pos:start="39:15" pos:end="41:47">(<argument pos:start="39:16" pos:end="39:20"><expr pos:start="39:16" pos:end="39:20"><name pos:start="39:16" pos:end="39:20">avctx</name></expr></argument>, <argument pos:start="39:23" pos:end="39:34"><expr pos:start="39:23" pos:end="39:34"><name pos:start="39:23" pos:end="39:34">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="39:36" pos:end="39:47"><expr pos:start="39:36" pos:end="39:47"><literal type="string" pos:start="39:36" pos:end="39:47">"[8-9] %d\n"</literal></expr></argument>,

               <argument pos:start="41:16" pos:end="41:46"><expr pos:start="41:16" pos:end="41:46"><call pos:start="41:16" pos:end="41:46"><name pos:start="41:16" pos:end="41:34">bytestream_get_le16</name><argument_list pos:start="41:35" pos:end="41:46">(<argument pos:start="41:36" pos:end="41:45"><expr pos:start="41:36" pos:end="41:45"><operator pos:start="41:36" pos:end="41:36">&amp;</operator><name pos:start="41:37" pos:end="41:45">edata_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="41:51" pos:end="41:71">//Dupe of coding mode</comment>

        <expr_stmt pos:start="43:9" pos:end="43:55"><expr pos:start="43:9" pos:end="43:54"><name pos:start="43:9" pos:end="43:20">frame_factor</name> <operator pos:start="43:22" pos:end="43:22">=</operator> <call pos:start="43:24" pos:end="43:54"><name pos:start="43:24" pos:end="43:42">bytestream_get_le16</name><argument_list pos:start="43:43" pos:end="43:54">(<argument pos:start="43:44" pos:end="43:53"><expr pos:start="43:44" pos:end="43:53"><operator pos:start="43:44" pos:end="43:44">&amp;</operator><name pos:start="43:45" pos:end="43:53">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="43:58" pos:end="43:76">// Unknown always 1</comment>

        <expr_stmt pos:start="45:9" pos:end="47:48"><expr pos:start="45:9" pos:end="47:47"><call pos:start="45:9" pos:end="47:47"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="47:47">(<argument pos:start="45:16" pos:end="45:20"><expr pos:start="45:16" pos:end="45:20"><name pos:start="45:16" pos:end="45:20">avctx</name></expr></argument>, <argument pos:start="45:23" pos:end="45:34"><expr pos:start="45:23" pos:end="45:34"><name pos:start="45:23" pos:end="45:34">AV_LOG_DEBUG</name></expr></argument>,<argument pos:start="45:36" pos:end="45:49"><expr pos:start="45:36" pos:end="45:49"><literal type="string" pos:start="45:36" pos:end="45:49">"[12-13] %d\n"</literal></expr></argument>,

               <argument pos:start="47:16" pos:end="47:46"><expr pos:start="47:16" pos:end="47:46"><call pos:start="47:16" pos:end="47:46"><name pos:start="47:16" pos:end="47:34">bytestream_get_le16</name><argument_list pos:start="47:35" pos:end="47:46">(<argument pos:start="47:36" pos:end="47:45"><expr pos:start="47:36" pos:end="47:45"><operator pos:start="47:36" pos:end="47:36">&amp;</operator><name pos:start="47:37" pos:end="47:45">edata_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line" pos:start="47:51" pos:end="47:69">// Unknown always 0</comment>



        <comment type="block" pos:start="51:9" pos:end="51:19">/* setup */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:67"><expr pos:start="53:9" pos:end="53:66"><name pos:start="53:9" pos:end="53:25">samples_per_frame</name>    <operator pos:start="53:30" pos:end="53:30">=</operator> <name pos:start="53:32" pos:end="53:48">SAMPLES_PER_FRAME</name> <operator pos:start="53:50" pos:end="53:50">*</operator> <name pos:start="53:52" pos:end="53:66"><name pos:start="53:52" pos:end="53:56">avctx</name><operator pos:start="53:57" pos:end="53:58">-&gt;</operator><name pos:start="53:59" pos:end="53:66">channels</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:33"><expr pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:15">version</name>              <operator pos:start="55:30" pos:end="55:30">=</operator> <literal type="number" pos:start="55:32" pos:end="55:32">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:13">delay</name>                <operator pos:start="57:30" pos:end="57:30">=</operator> <literal type="number" pos:start="57:32" pos:end="57:36">0x88E</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:70"><expr pos:start="59:9" pos:end="59:69"><name pos:start="59:9" pos:end="59:22"><name pos:start="59:9" pos:end="59:9">q</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:22">coding_mode</name></name>       <operator pos:start="59:30" pos:end="59:30">=</operator> <ternary pos:start="59:32" pos:end="59:69"><condition pos:start="59:32" pos:end="59:47"><expr pos:start="59:32" pos:end="59:45"><name pos:start="59:32" pos:end="59:45"><name pos:start="59:32" pos:end="59:32">q</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:45">coding_mode</name></name></expr> ?</condition><then pos:start="59:49" pos:end="59:60"> <expr pos:start="59:49" pos:end="59:60"><name pos:start="59:49" pos:end="59:60">JOINT_STEREO</name></expr> </then><else pos:start="59:62" pos:end="59:69">: <expr pos:start="59:64" pos:end="59:69"><name pos:start="59:64" pos:end="59:69">STEREO</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:33"><expr pos:start="61:9" pos:end="61:32"><name pos:start="61:9" pos:end="61:27"><name pos:start="61:9" pos:end="61:9">q</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:27">scrambled_stream</name></name>  <operator pos:start="61:30" pos:end="61:30">=</operator> <literal type="number" pos:start="61:32" pos:end="61:32">0</literal></expr>;</expr_stmt>



        <if_stmt pos:start="65:9" pos:end="79:9"><if pos:start="65:9" pos:end="79:9">if <condition pos:start="65:12" pos:end="69:71">(<expr pos:start="65:13" pos:end="69:70"><name pos:start="65:13" pos:end="65:30"><name pos:start="65:13" pos:end="65:17">avctx</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:30">block_align</name></name> <operator pos:start="65:32" pos:end="65:33">!=</operator>  <literal type="number" pos:start="65:36" pos:end="65:37">96</literal> <operator pos:start="65:39" pos:end="65:39">*</operator> <name pos:start="65:41" pos:end="65:55"><name pos:start="65:41" pos:end="65:45">avctx</name><operator pos:start="65:46" pos:end="65:47">-&gt;</operator><name pos:start="65:48" pos:end="65:55">channels</name></name> <operator pos:start="65:57" pos:end="65:57">*</operator> <name pos:start="65:59" pos:end="65:70">frame_factor</name> <operator pos:start="65:72" pos:end="65:73">&amp;&amp;</operator>

            <name pos:start="67:13" pos:end="67:30"><name pos:start="67:13" pos:end="67:17">avctx</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:30">block_align</name></name> <operator pos:start="67:32" pos:end="67:33">!=</operator> <literal type="number" pos:start="67:35" pos:end="67:37">152</literal> <operator pos:start="67:39" pos:end="67:39">*</operator> <name pos:start="67:41" pos:end="67:55"><name pos:start="67:41" pos:end="67:45">avctx</name><operator pos:start="67:46" pos:end="67:47">-&gt;</operator><name pos:start="67:48" pos:end="67:55">channels</name></name> <operator pos:start="67:57" pos:end="67:57">*</operator> <name pos:start="67:59" pos:end="67:70">frame_factor</name> <operator pos:start="67:72" pos:end="67:73">&amp;&amp;</operator>

            <name pos:start="69:13" pos:end="69:30"><name pos:start="69:13" pos:end="69:17">avctx</name><operator pos:start="69:18" pos:end="69:19">-&gt;</operator><name pos:start="69:20" pos:end="69:30">block_align</name></name> <operator pos:start="69:32" pos:end="69:33">!=</operator> <literal type="number" pos:start="69:35" pos:end="69:37">192</literal> <operator pos:start="69:39" pos:end="69:39">*</operator> <name pos:start="69:41" pos:end="69:55"><name pos:start="69:41" pos:end="69:45">avctx</name><operator pos:start="69:46" pos:end="69:47">-&gt;</operator><name pos:start="69:48" pos:end="69:55">channels</name></name> <operator pos:start="69:57" pos:end="69:57">*</operator> <name pos:start="69:59" pos:end="69:70">frame_factor</name></expr>)</condition> <block pos:start="69:73" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:39">

            <expr_stmt pos:start="71:13" pos:end="75:50"><expr pos:start="71:13" pos:end="75:49"><call pos:start="71:13" pos:end="75:49"><name pos:start="71:13" pos:end="71:18">av_log</name><argument_list pos:start="71:19" pos:end="75:49">(<argument pos:start="71:20" pos:end="71:24"><expr pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:24">avctx</name></expr></argument>, <argument pos:start="71:27" pos:end="71:38"><expr pos:start="71:27" pos:end="71:38"><name pos:start="71:27" pos:end="71:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:41" pos:end="73:45"><expr pos:start="71:41" pos:end="73:45"><literal type="string" pos:start="71:41" pos:end="71:77">"Unknown frame/channel/frame_factor "</literal>

                   <literal type="string" pos:start="73:20" pos:end="73:45">"configuration %d/%d/%d\n"</literal></expr></argument>, <argument pos:start="73:48" pos:end="73:65"><expr pos:start="73:48" pos:end="73:65"><name pos:start="73:48" pos:end="73:65"><name pos:start="73:48" pos:end="73:52">avctx</name><operator pos:start="73:53" pos:end="73:54">-&gt;</operator><name pos:start="73:55" pos:end="73:65">block_align</name></name></expr></argument>,

                   <argument pos:start="75:20" pos:end="75:34"><expr pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:34"><name pos:start="75:20" pos:end="75:24">avctx</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:34">channels</name></name></expr></argument>, <argument pos:start="75:37" pos:end="75:48"><expr pos:start="75:37" pos:end="75:48"><name pos:start="75:37" pos:end="75:48">frame_factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:39">return <expr pos:start="77:20" pos:end="77:38"><name pos:start="77:20" pos:end="77:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="81:7" pos:end="97:5">else if <condition pos:start="81:15" pos:end="81:43">(<expr pos:start="81:16" pos:end="81:42"><name pos:start="81:16" pos:end="81:36"><name pos:start="81:16" pos:end="81:20">avctx</name><operator pos:start="81:21" pos:end="81:22">-&gt;</operator><name pos:start="81:23" pos:end="81:36">extradata_size</name></name> <operator pos:start="81:38" pos:end="81:39">==</operator> <literal type="number" pos:start="81:41" pos:end="81:42">10</literal></expr>)</condition> <block pos:start="81:45" pos:end="97:5">{<block_content pos:start="85:9" pos:end="93:35">

        <comment type="block" pos:start="83:9" pos:end="83:45">/* Parse the extradata, RM format. */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:65"><expr pos:start="85:9" pos:end="85:64"><name pos:start="85:9" pos:end="85:15">version</name>                <operator pos:start="85:32" pos:end="85:32">=</operator> <call pos:start="85:34" pos:end="85:64"><name pos:start="85:34" pos:end="85:52">bytestream_get_be32</name><argument_list pos:start="85:53" pos:end="85:64">(<argument pos:start="85:54" pos:end="85:63"><expr pos:start="85:54" pos:end="85:63"><operator pos:start="85:54" pos:end="85:54">&amp;</operator><name pos:start="85:55" pos:end="85:63">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:65"><expr pos:start="87:9" pos:end="87:64"><name pos:start="87:9" pos:end="87:25">samples_per_frame</name>      <operator pos:start="87:32" pos:end="87:32">=</operator> <call pos:start="87:34" pos:end="87:64"><name pos:start="87:34" pos:end="87:52">bytestream_get_be16</name><argument_list pos:start="87:53" pos:end="87:64">(<argument pos:start="87:54" pos:end="87:63"><expr pos:start="87:54" pos:end="87:63"><operator pos:start="87:54" pos:end="87:54">&amp;</operator><name pos:start="87:55" pos:end="87:63">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:65"><expr pos:start="89:9" pos:end="89:64"><name pos:start="89:9" pos:end="89:13">delay</name>                  <operator pos:start="89:32" pos:end="89:32">=</operator> <call pos:start="89:34" pos:end="89:64"><name pos:start="89:34" pos:end="89:52">bytestream_get_be16</name><argument_list pos:start="89:53" pos:end="89:64">(<argument pos:start="89:54" pos:end="89:63"><expr pos:start="89:54" pos:end="89:63"><operator pos:start="89:54" pos:end="89:54">&amp;</operator><name pos:start="89:55" pos:end="89:63">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:65"><expr pos:start="91:9" pos:end="91:64"><name pos:start="91:9" pos:end="91:22"><name pos:start="91:9" pos:end="91:9">q</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:22">coding_mode</name></name>         <operator pos:start="91:32" pos:end="91:32">=</operator> <call pos:start="91:34" pos:end="91:64"><name pos:start="91:34" pos:end="91:52">bytestream_get_be16</name><argument_list pos:start="91:53" pos:end="91:64">(<argument pos:start="91:54" pos:end="91:63"><expr pos:start="91:54" pos:end="91:63"><operator pos:start="91:54" pos:end="91:54">&amp;</operator><name pos:start="91:55" pos:end="91:63">edata_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:35"><expr pos:start="93:9" pos:end="93:34"><name pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:9">q</name><operator pos:start="93:10" pos:end="93:11">-&gt;</operator><name pos:start="93:12" pos:end="93:27">scrambled_stream</name></name>    <operator pos:start="93:32" pos:end="93:32">=</operator> <literal type="number" pos:start="93:34" pos:end="93:34">1</literal></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="97:7" pos:end="105:5">else <block pos:start="97:12" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:31">

        <expr_stmt pos:start="99:9" pos:end="101:38"><expr pos:start="99:9" pos:end="101:37"><call pos:start="99:9" pos:end="101:37"><name pos:start="99:9" pos:end="99:14">av_log</name><argument_list pos:start="99:15" pos:end="101:37">(<argument pos:start="99:16" pos:end="99:19"><expr pos:start="99:16" pos:end="99:19"><name pos:start="99:16" pos:end="99:19">NULL</name></expr></argument>, <argument pos:start="99:22" pos:end="99:33"><expr pos:start="99:22" pos:end="99:33"><name pos:start="99:22" pos:end="99:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="99:36" pos:end="99:65"><expr pos:start="99:36" pos:end="99:65"><literal type="string" pos:start="99:36" pos:end="99:65">"Unknown extradata size %d.\n"</literal></expr></argument>,

               <argument pos:start="101:16" pos:end="101:36"><expr pos:start="101:16" pos:end="101:36"><name pos:start="101:16" pos:end="101:36"><name pos:start="101:16" pos:end="101:20">avctx</name><operator pos:start="101:21" pos:end="101:22">-&gt;</operator><name pos:start="101:23" pos:end="101:36">extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:31">return <expr pos:start="103:16" pos:end="103:30"><call pos:start="103:16" pos:end="103:30"><name pos:start="103:16" pos:end="103:22">AVERROR</name><argument_list pos:start="103:23" pos:end="103:30">(<argument pos:start="103:24" pos:end="103:29"><expr pos:start="103:24" pos:end="103:29"><name pos:start="103:24" pos:end="103:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:29">/* Check the extradata */</comment>



    <if_stmt pos:start="113:5" pos:end="119:5"><if pos:start="113:5" pos:end="119:5">if <condition pos:start="113:8" pos:end="113:21">(<expr pos:start="113:9" pos:end="113:20"><name pos:start="113:9" pos:end="113:15">version</name> <operator pos:start="113:17" pos:end="113:18">!=</operator> <literal type="number" pos:start="113:20" pos:end="113:20">4</literal></expr>)</condition> <block pos:start="113:23" pos:end="119:5">{<block_content pos:start="115:9" pos:end="117:35">

        <expr_stmt pos:start="115:9" pos:end="115:67"><expr pos:start="115:9" pos:end="115:66"><call pos:start="115:9" pos:end="115:66"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="115:66">(<argument pos:start="115:16" pos:end="115:20"><expr pos:start="115:16" pos:end="115:20"><name pos:start="115:16" pos:end="115:20">avctx</name></expr></argument>, <argument pos:start="115:23" pos:end="115:34"><expr pos:start="115:23" pos:end="115:34"><name pos:start="115:23" pos:end="115:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="115:37" pos:end="115:56"><expr pos:start="115:37" pos:end="115:56"><literal type="string" pos:start="115:37" pos:end="115:56">"Version %d != 4.\n"</literal></expr></argument>, <argument pos:start="115:59" pos:end="115:65"><expr pos:start="115:59" pos:end="115:65"><name pos:start="115:59" pos:end="115:65">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="117:9" pos:end="117:35">return <expr pos:start="117:16" pos:end="117:34"><name pos:start="117:16" pos:end="117:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="133:5"><if pos:start="123:5" pos:end="133:5">if <condition pos:start="123:8" pos:end="125:51">(<expr pos:start="123:9" pos:end="125:50"><name pos:start="123:9" pos:end="123:25">samples_per_frame</name> <operator pos:start="123:27" pos:end="123:28">!=</operator> <name pos:start="123:30" pos:end="123:46">SAMPLES_PER_FRAME</name> <operator pos:start="123:48" pos:end="123:49">&amp;&amp;</operator>

        <name pos:start="125:9" pos:end="125:25">samples_per_frame</name> <operator pos:start="125:27" pos:end="125:28">!=</operator> <name pos:start="125:30" pos:end="125:46">SAMPLES_PER_FRAME</name> <operator pos:start="125:48" pos:end="125:48">*</operator> <literal type="number" pos:start="125:50" pos:end="125:50">2</literal></expr>)</condition> <block pos:start="125:53" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:35">

        <expr_stmt pos:start="127:9" pos:end="129:34"><expr pos:start="127:9" pos:end="129:33"><call pos:start="127:9" pos:end="129:33"><name pos:start="127:9" pos:end="127:14">av_log</name><argument_list pos:start="127:15" pos:end="129:33">(<argument pos:start="127:16" pos:end="127:20"><expr pos:start="127:16" pos:end="127:20"><name pos:start="127:16" pos:end="127:20">avctx</name></expr></argument>, <argument pos:start="127:23" pos:end="127:34"><expr pos:start="127:23" pos:end="127:34"><name pos:start="127:23" pos:end="127:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="127:37" pos:end="127:79"><expr pos:start="127:37" pos:end="127:79"><literal type="string" pos:start="127:37" pos:end="127:79">"Unknown amount of samples per frame %d.\n"</literal></expr></argument>,

               <argument pos:start="129:16" pos:end="129:32"><expr pos:start="129:16" pos:end="129:32"><name pos:start="129:16" pos:end="129:32">samples_per_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:35">return <expr pos:start="131:16" pos:end="131:34"><name pos:start="131:16" pos:end="131:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="145:5"><if pos:start="137:5" pos:end="145:5">if <condition pos:start="137:8" pos:end="137:23">(<expr pos:start="137:9" pos:end="137:22"><name pos:start="137:9" pos:end="137:13">delay</name> <operator pos:start="137:15" pos:end="137:16">!=</operator> <literal type="number" pos:start="137:18" pos:end="137:22">0x88E</literal></expr>)</condition> <block pos:start="137:25" pos:end="145:5">{<block_content pos:start="139:9" pos:end="143:35">

        <expr_stmt pos:start="139:9" pos:end="141:22"><expr pos:start="139:9" pos:end="141:21"><call pos:start="139:9" pos:end="141:21"><name pos:start="139:9" pos:end="139:14">av_log</name><argument_list pos:start="139:15" pos:end="141:21">(<argument pos:start="139:16" pos:end="139:20"><expr pos:start="139:16" pos:end="139:20"><name pos:start="139:16" pos:end="139:20">avctx</name></expr></argument>, <argument pos:start="139:23" pos:end="139:34"><expr pos:start="139:23" pos:end="139:34"><name pos:start="139:23" pos:end="139:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="139:37" pos:end="139:76"><expr pos:start="139:37" pos:end="139:76"><literal type="string" pos:start="139:37" pos:end="139:76">"Unknown amount of delay %x != 0x88E.\n"</literal></expr></argument>,

               <argument pos:start="141:16" pos:end="141:20"><expr pos:start="141:16" pos:end="141:20"><name pos:start="141:16" pos:end="141:20">delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:35">return <expr pos:start="143:16" pos:end="143:34"><name pos:start="143:16" pos:end="143:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="149:5" pos:end="169:5"><if pos:start="149:5" pos:end="151:65">if <condition pos:start="149:8" pos:end="149:33">(<expr pos:start="149:9" pos:end="149:32"><name pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:9">q</name><operator pos:start="149:10" pos:end="149:11">-&gt;</operator><name pos:start="149:12" pos:end="149:22">coding_mode</name></name> <operator pos:start="149:24" pos:end="149:25">==</operator> <name pos:start="149:27" pos:end="149:32">STEREO</name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:65"><block_content pos:start="151:9" pos:end="151:65">

        <expr_stmt pos:start="151:9" pos:end="151:65"><expr pos:start="151:9" pos:end="151:64"><call pos:start="151:9" pos:end="151:64"><name pos:start="151:9" pos:end="151:14">av_log</name><argument_list pos:start="151:15" pos:end="151:64">(<argument pos:start="151:16" pos:end="151:20"><expr pos:start="151:16" pos:end="151:20"><name pos:start="151:16" pos:end="151:20">avctx</name></expr></argument>, <argument pos:start="151:23" pos:end="151:34"><expr pos:start="151:23" pos:end="151:34"><name pos:start="151:23" pos:end="151:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="151:37" pos:end="151:63"><expr pos:start="151:37" pos:end="151:63"><literal type="string" pos:start="151:37" pos:end="151:63">"Normal stereo detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="153:5" pos:end="161:5">else if <condition pos:start="153:13" pos:end="153:44">(<expr pos:start="153:14" pos:end="153:43"><name pos:start="153:14" pos:end="153:27"><name pos:start="153:14" pos:end="153:14">q</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:27">coding_mode</name></name> <operator pos:start="153:29" pos:end="153:30">==</operator> <name pos:start="153:32" pos:end="153:43">JOINT_STEREO</name></expr>)</condition> <block pos:start="153:46" pos:end="161:5">{<block_content pos:start="155:9" pos:end="159:64">

        <if_stmt pos:start="155:9" pos:end="157:39"><if pos:start="155:9" pos:end="157:39">if <condition pos:start="155:12" pos:end="155:33">(<expr pos:start="155:13" pos:end="155:32"><name pos:start="155:13" pos:end="155:27"><name pos:start="155:13" pos:end="155:17">avctx</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:27">channels</name></name> <operator pos:start="155:29" pos:end="155:30">!=</operator> <literal type="number" pos:start="155:32" pos:end="155:32">2</literal></expr>)</condition><block type="pseudo" pos:start="157:13" pos:end="157:39"><block_content pos:start="157:13" pos:end="157:39">

            <return pos:start="157:13" pos:end="157:39">return <expr pos:start="157:20" pos:end="157:38"><name pos:start="157:20" pos:end="157:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:64"><expr pos:start="159:9" pos:end="159:63"><call pos:start="159:9" pos:end="159:63"><name pos:start="159:9" pos:end="159:14">av_log</name><argument_list pos:start="159:15" pos:end="159:63">(<argument pos:start="159:16" pos:end="159:20"><expr pos:start="159:16" pos:end="159:20"><name pos:start="159:16" pos:end="159:20">avctx</name></expr></argument>, <argument pos:start="159:23" pos:end="159:34"><expr pos:start="159:23" pos:end="159:34"><name pos:start="159:23" pos:end="159:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="159:37" pos:end="159:62"><expr pos:start="159:37" pos:end="159:62"><literal type="string" pos:start="159:37" pos:end="159:62">"Joint stereo detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="161:7" pos:end="169:5">else <block pos:start="161:12" pos:end="169:5">{<block_content pos:start="163:9" pos:end="167:35">

        <expr_stmt pos:start="163:9" pos:end="165:31"><expr pos:start="163:9" pos:end="165:30"><call pos:start="163:9" pos:end="165:30"><name pos:start="163:9" pos:end="163:14">av_log</name><argument_list pos:start="163:15" pos:end="165:30">(<argument pos:start="163:16" pos:end="163:20"><expr pos:start="163:16" pos:end="163:20"><name pos:start="163:16" pos:end="163:20">avctx</name></expr></argument>, <argument pos:start="163:23" pos:end="163:34"><expr pos:start="163:23" pos:end="163:34"><name pos:start="163:23" pos:end="163:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="163:37" pos:end="163:71"><expr pos:start="163:37" pos:end="163:71"><literal type="string" pos:start="163:37" pos:end="163:71">"Unknown channel coding mode %x!\n"</literal></expr></argument>,

               <argument pos:start="165:16" pos:end="165:29"><expr pos:start="165:16" pos:end="165:29"><name pos:start="165:16" pos:end="165:29"><name pos:start="165:16" pos:end="165:16">q</name><operator pos:start="165:17" pos:end="165:18">-&gt;</operator><name pos:start="165:19" pos:end="165:29">coding_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="167:9" pos:end="167:35">return <expr pos:start="167:16" pos:end="167:34"><name pos:start="167:16" pos:end="167:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="173:5" pos:end="175:31"><if pos:start="173:5" pos:end="175:31">if <condition pos:start="173:8" pos:end="173:43">(<expr pos:start="173:9" pos:end="173:42"><name pos:start="173:9" pos:end="173:26"><name pos:start="173:9" pos:end="173:13">avctx</name><operator pos:start="173:14" pos:end="173:15">-&gt;</operator><name pos:start="173:16" pos:end="173:26">block_align</name></name> <operator pos:start="173:28" pos:end="173:29">&gt;=</operator> <name pos:start="173:31" pos:end="173:38">UINT_MAX</name> <operator pos:start="173:40" pos:end="173:40">/</operator> <literal type="number" pos:start="173:42" pos:end="173:42">2</literal></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:31"><block_content pos:start="175:9" pos:end="175:31">

        <return pos:start="175:9" pos:end="175:31">return <expr pos:start="175:16" pos:end="175:30"><call pos:start="175:16" pos:end="175:30"><name pos:start="175:16" pos:end="175:22">AVERROR</name><argument_list pos:start="175:23" pos:end="175:30">(<argument pos:start="175:24" pos:end="175:29"><expr pos:start="175:24" pos:end="175:29"><name pos:start="175:24" pos:end="175:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="181:71"><expr pos:start="179:5" pos:end="181:70"><name pos:start="179:5" pos:end="179:27"><name pos:start="179:5" pos:end="179:5">q</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:27">decoded_bytes_buffer</name></name> <operator pos:start="179:29" pos:end="179:29">=</operator> <call pos:start="179:31" pos:end="181:70"><name pos:start="179:31" pos:end="179:40">av_mallocz</name><argument_list pos:start="179:41" pos:end="181:70">(<argument pos:start="179:42" pos:end="181:69"><expr pos:start="179:42" pos:end="181:69"><call pos:start="179:42" pos:end="179:71"><name pos:start="179:42" pos:end="179:48">FFALIGN</name><argument_list pos:start="179:49" pos:end="179:71">(<argument pos:start="179:50" pos:end="179:67"><expr pos:start="179:50" pos:end="179:67"><name pos:start="179:50" pos:end="179:67"><name pos:start="179:50" pos:end="179:54">avctx</name><operator pos:start="179:55" pos:end="179:56">-&gt;</operator><name pos:start="179:57" pos:end="179:67">block_align</name></name></expr></argument>, <argument pos:start="179:70" pos:end="179:70"><expr pos:start="179:70" pos:end="179:70"><literal type="number" pos:start="179:70" pos:end="179:70">4</literal></expr></argument>)</argument_list></call> <operator pos:start="179:73" pos:end="179:73">+</operator>

                                         <name pos:start="181:42" pos:end="181:69">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="183:5" pos:end="185:31"><if pos:start="183:5" pos:end="185:31">if <condition pos:start="183:8" pos:end="183:40">(<expr pos:start="183:9" pos:end="183:39"><name pos:start="183:9" pos:end="183:31"><name pos:start="183:9" pos:end="183:9">q</name><operator pos:start="183:10" pos:end="183:11">-&gt;</operator><name pos:start="183:12" pos:end="183:31">decoded_bytes_buffer</name></name> <operator pos:start="183:33" pos:end="183:34">==</operator> <name pos:start="183:36" pos:end="183:39">NULL</name></expr>)</condition><block type="pseudo" pos:start="185:9" pos:end="185:31"><block_content pos:start="185:9" pos:end="185:31">

        <return pos:start="185:9" pos:end="185:31">return <expr pos:start="185:16" pos:end="185:30"><call pos:start="185:16" pos:end="185:30"><name pos:start="185:16" pos:end="185:22">AVERROR</name><argument_list pos:start="185:23" pos:end="185:30">(<argument pos:start="185:24" pos:end="185:29"><expr pos:start="185:24" pos:end="185:29"><name pos:start="185:24" pos:end="185:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="189:5" pos:end="189:43"><expr pos:start="189:5" pos:end="189:42"><name pos:start="189:5" pos:end="189:21"><name pos:start="189:5" pos:end="189:9">avctx</name><operator pos:start="189:10" pos:end="189:11">-&gt;</operator><name pos:start="189:12" pos:end="189:21">sample_fmt</name></name> <operator pos:start="189:23" pos:end="189:23">=</operator> <name pos:start="189:25" pos:end="189:42">AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>



    <comment type="block" pos:start="193:5" pos:end="193:39">/* initialize the MDCT transform */</comment>

    <if_stmt pos:start="195:5" pos:end="203:5"><if pos:start="195:5" pos:end="203:5">if <condition pos:start="195:8" pos:end="195:66">(<expr pos:start="195:9" pos:end="195:65"><operator pos:start="195:9" pos:end="195:9">(</operator><name pos:start="195:10" pos:end="195:12">ret</name> <operator pos:start="195:14" pos:end="195:14">=</operator> <call pos:start="195:16" pos:end="195:60"><name pos:start="195:16" pos:end="195:27">ff_mdct_init</name><argument_list pos:start="195:28" pos:end="195:60">(<argument pos:start="195:29" pos:end="195:40"><expr pos:start="195:29" pos:end="195:40"><operator pos:start="195:29" pos:end="195:29">&amp;</operator><name pos:start="195:30" pos:end="195:40"><name pos:start="195:30" pos:end="195:30">q</name><operator pos:start="195:31" pos:end="195:32">-&gt;</operator><name pos:start="195:33" pos:end="195:40">mdct_ctx</name></name></expr></argument>, <argument pos:start="195:43" pos:end="195:43"><expr pos:start="195:43" pos:end="195:43"><literal type="number" pos:start="195:43" pos:end="195:43">9</literal></expr></argument>, <argument pos:start="195:46" pos:end="195:46"><expr pos:start="195:46" pos:end="195:46"><literal type="number" pos:start="195:46" pos:end="195:46">1</literal></expr></argument>, <argument pos:start="195:49" pos:end="195:59"><expr pos:start="195:49" pos:end="195:59"><literal type="number" pos:start="195:49" pos:end="195:51">1.0</literal> <operator pos:start="195:53" pos:end="195:53">/</operator> <literal type="number" pos:start="195:55" pos:end="195:59">32768</literal></expr></argument>)</argument_list></call><operator pos:start="195:61" pos:end="195:61">)</operator> <operator pos:start="195:63" pos:end="195:63">&lt;</operator> <literal type="number" pos:start="195:65" pos:end="195:65">0</literal></expr>)</condition> <block pos:start="195:68" pos:end="203:5">{<block_content pos:start="197:9" pos:end="201:19">

        <expr_stmt pos:start="197:9" pos:end="197:65"><expr pos:start="197:9" pos:end="197:64"><call pos:start="197:9" pos:end="197:64"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="197:64">(<argument pos:start="197:16" pos:end="197:20"><expr pos:start="197:16" pos:end="197:20"><name pos:start="197:16" pos:end="197:20">avctx</name></expr></argument>, <argument pos:start="197:23" pos:end="197:34"><expr pos:start="197:23" pos:end="197:34"><name pos:start="197:23" pos:end="197:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:37" pos:end="197:63"><expr pos:start="197:37" pos:end="197:63"><literal type="string" pos:start="197:37" pos:end="197:63">"Error initializing MDCT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:43"><expr pos:start="199:9" pos:end="199:42"><call pos:start="199:9" pos:end="199:42"><name pos:start="199:9" pos:end="199:16">av_freep</name><argument_list pos:start="199:17" pos:end="199:42">(<argument pos:start="199:18" pos:end="199:41"><expr pos:start="199:18" pos:end="199:41"><operator pos:start="199:18" pos:end="199:18">&amp;</operator><name pos:start="199:19" pos:end="199:41"><name pos:start="199:19" pos:end="199:19">q</name><operator pos:start="199:20" pos:end="199:21">-&gt;</operator><name pos:start="199:22" pos:end="199:41">decoded_bytes_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="201:9" pos:end="201:19">return <expr pos:start="201:16" pos:end="201:18"><name pos:start="201:16" pos:end="201:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="207:5" pos:end="207:45">/* init the joint-stereo decoding data */</comment>

    <expr_stmt pos:start="209:5" pos:end="209:30"><expr pos:start="209:5" pos:end="209:29"><name pos:start="209:5" pos:end="209:25"><name pos:start="209:5" pos:end="209:5">q</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:22">weighting_delay</name><index pos:start="209:23" pos:end="209:25">[<expr pos:start="209:24" pos:end="209:24"><literal type="number" pos:start="209:24" pos:end="209:24">0</literal></expr>]</index></name> <operator pos:start="209:27" pos:end="209:27">=</operator> <literal type="number" pos:start="209:29" pos:end="209:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:30"><expr pos:start="211:5" pos:end="211:29"><name pos:start="211:5" pos:end="211:25"><name pos:start="211:5" pos:end="211:5">q</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:22">weighting_delay</name><index pos:start="211:23" pos:end="211:25">[<expr pos:start="211:24" pos:end="211:24"><literal type="number" pos:start="211:24" pos:end="211:24">1</literal></expr>]</index></name> <operator pos:start="211:27" pos:end="211:27">=</operator> <literal type="number" pos:start="211:29" pos:end="211:29">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="213:5" pos:end="213:30"><expr pos:start="213:5" pos:end="213:29"><name pos:start="213:5" pos:end="213:25"><name pos:start="213:5" pos:end="213:5">q</name><operator pos:start="213:6" pos:end="213:7">-&gt;</operator><name pos:start="213:8" pos:end="213:22">weighting_delay</name><index pos:start="213:23" pos:end="213:25">[<expr pos:start="213:24" pos:end="213:24"><literal type="number" pos:start="213:24" pos:end="213:24">2</literal></expr>]</index></name> <operator pos:start="213:27" pos:end="213:27">=</operator> <literal type="number" pos:start="213:29" pos:end="213:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="215:30"><expr pos:start="215:5" pos:end="215:29"><name pos:start="215:5" pos:end="215:25"><name pos:start="215:5" pos:end="215:5">q</name><operator pos:start="215:6" pos:end="215:7">-&gt;</operator><name pos:start="215:8" pos:end="215:22">weighting_delay</name><index pos:start="215:23" pos:end="215:25">[<expr pos:start="215:24" pos:end="215:24"><literal type="number" pos:start="215:24" pos:end="215:24">3</literal></expr>]</index></name> <operator pos:start="215:27" pos:end="215:27">=</operator> <literal type="number" pos:start="215:29" pos:end="215:29">7</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="217:30"><expr pos:start="217:5" pos:end="217:29"><name pos:start="217:5" pos:end="217:25"><name pos:start="217:5" pos:end="217:5">q</name><operator pos:start="217:6" pos:end="217:7">-&gt;</operator><name pos:start="217:8" pos:end="217:22">weighting_delay</name><index pos:start="217:23" pos:end="217:25">[<expr pos:start="217:24" pos:end="217:24"><literal type="number" pos:start="217:24" pos:end="217:24">4</literal></expr>]</index></name> <operator pos:start="217:27" pos:end="217:27">=</operator> <literal type="number" pos:start="217:29" pos:end="217:29">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:30"><expr pos:start="219:5" pos:end="219:29"><name pos:start="219:5" pos:end="219:25"><name pos:start="219:5" pos:end="219:5">q</name><operator pos:start="219:6" pos:end="219:7">-&gt;</operator><name pos:start="219:8" pos:end="219:22">weighting_delay</name><index pos:start="219:23" pos:end="219:25">[<expr pos:start="219:24" pos:end="219:24"><literal type="number" pos:start="219:24" pos:end="219:24">5</literal></expr>]</index></name> <operator pos:start="219:27" pos:end="219:27">=</operator> <literal type="number" pos:start="219:29" pos:end="219:29">7</literal></expr>;</expr_stmt>



    <for pos:start="223:5" pos:end="231:5">for <control pos:start="223:9" pos:end="223:27">(<init pos:start="223:10" pos:end="223:15"><expr pos:start="223:10" pos:end="223:14"><name pos:start="223:10" pos:end="223:10">i</name> <operator pos:start="223:12" pos:end="223:12">=</operator> <literal type="number" pos:start="223:14" pos:end="223:14">0</literal></expr>;</init> <condition pos:start="223:17" pos:end="223:22"><expr pos:start="223:17" pos:end="223:21"><name pos:start="223:17" pos:end="223:17">i</name> <operator pos:start="223:19" pos:end="223:19">&lt;</operator> <literal type="number" pos:start="223:21" pos:end="223:21">4</literal></expr>;</condition> <incr pos:start="223:24" pos:end="223:26"><expr pos:start="223:24" pos:end="223:26"><name pos:start="223:24" pos:end="223:24">i</name><operator pos:start="223:25" pos:end="223:26">++</operator></expr></incr>)</control> <block pos:start="223:29" pos:end="231:5">{<block_content pos:start="225:9" pos:end="229:42">

        <expr_stmt pos:start="225:9" pos:end="225:42"><expr pos:start="225:9" pos:end="225:41"><name pos:start="225:9" pos:end="225:37"><name pos:start="225:9" pos:end="225:9">q</name><operator pos:start="225:10" pos:end="225:11">-&gt;</operator><name pos:start="225:12" pos:end="225:34">matrix_coeff_index_prev</name><index pos:start="225:35" pos:end="225:37">[<expr pos:start="225:36" pos:end="225:36"><name pos:start="225:36" pos:end="225:36">i</name></expr>]</index></name> <operator pos:start="225:39" pos:end="225:39">=</operator> <literal type="number" pos:start="225:41" pos:end="225:41">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:42"><expr pos:start="227:9" pos:end="227:41"><name pos:start="227:9" pos:end="227:36"><name pos:start="227:9" pos:end="227:9">q</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:33">matrix_coeff_index_now</name><index pos:start="227:34" pos:end="227:36">[<expr pos:start="227:35" pos:end="227:35"><name pos:start="227:35" pos:end="227:35">i</name></expr>]</index></name>  <operator pos:start="227:39" pos:end="227:39">=</operator> <literal type="number" pos:start="227:41" pos:end="227:41">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:42"><expr pos:start="229:9" pos:end="229:41"><name pos:start="229:9" pos:end="229:37"><name pos:start="229:9" pos:end="229:9">q</name><operator pos:start="229:10" pos:end="229:11">-&gt;</operator><name pos:start="229:12" pos:end="229:34">matrix_coeff_index_next</name><index pos:start="229:35" pos:end="229:37">[<expr pos:start="229:36" pos:end="229:36"><name pos:start="229:36" pos:end="229:36">i</name></expr>]</index></name> <operator pos:start="229:39" pos:end="229:39">=</operator> <literal type="number" pos:start="229:41" pos:end="229:41">3</literal></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="235:5" pos:end="235:57"><expr pos:start="235:5" pos:end="235:56"><call pos:start="235:5" pos:end="235:56"><name pos:start="235:5" pos:end="235:35">ff_atrac_init_gain_compensation</name><argument_list pos:start="235:36" pos:end="235:56">(<argument pos:start="235:37" pos:end="235:49"><expr pos:start="235:37" pos:end="235:49"><operator pos:start="235:37" pos:end="235:37">&amp;</operator><name pos:start="235:38" pos:end="235:49"><name pos:start="235:38" pos:end="235:38">q</name><operator pos:start="235:39" pos:end="235:40">-&gt;</operator><name pos:start="235:41" pos:end="235:49">gainc_ctx</name></name></expr></argument>, <argument pos:start="235:52" pos:end="235:52"><expr pos:start="235:52" pos:end="235:52"><literal type="number" pos:start="235:52" pos:end="235:52">4</literal></expr></argument>, <argument pos:start="235:55" pos:end="235:55"><expr pos:start="235:55" pos:end="235:55"><literal type="number" pos:start="235:55" pos:end="235:55">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:72"><expr pos:start="237:5" pos:end="237:71"><call pos:start="237:5" pos:end="237:71"><name pos:start="237:5" pos:end="237:25">avpriv_float_dsp_init</name><argument_list pos:start="237:26" pos:end="237:71">(<argument pos:start="237:27" pos:end="237:34"><expr pos:start="237:27" pos:end="237:34"><operator pos:start="237:27" pos:end="237:27">&amp;</operator><name pos:start="237:28" pos:end="237:34"><name pos:start="237:28" pos:end="237:28">q</name><operator pos:start="237:29" pos:end="237:30">-&gt;</operator><name pos:start="237:31" pos:end="237:34">fdsp</name></name></expr></argument>, <argument pos:start="237:37" pos:end="237:70"><expr pos:start="237:37" pos:end="237:70"><name pos:start="237:37" pos:end="237:48"><name pos:start="237:37" pos:end="237:41">avctx</name><operator pos:start="237:42" pos:end="237:43">-&gt;</operator><name pos:start="237:44" pos:end="237:48">flags</name></name> <operator pos:start="237:50" pos:end="237:50">&amp;</operator> <name pos:start="237:52" pos:end="237:70">CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:45"><expr pos:start="239:5" pos:end="239:44"><call pos:start="239:5" pos:end="239:44"><name pos:start="239:5" pos:end="239:23">ff_fmt_convert_init</name><argument_list pos:start="239:24" pos:end="239:44">(<argument pos:start="239:25" pos:end="239:36"><expr pos:start="239:25" pos:end="239:36"><operator pos:start="239:25" pos:end="239:25">&amp;</operator><name pos:start="239:26" pos:end="239:36"><name pos:start="239:26" pos:end="239:26">q</name><operator pos:start="239:27" pos:end="239:28">-&gt;</operator><name pos:start="239:29" pos:end="239:36">fmt_conv</name></name></expr></argument>, <argument pos:start="239:39" pos:end="239:43"><expr pos:start="239:39" pos:end="239:43"><name pos:start="239:39" pos:end="239:43">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:63"><expr pos:start="243:5" pos:end="243:62"><name pos:start="243:5" pos:end="243:12"><name pos:start="243:5" pos:end="243:5">q</name><operator pos:start="243:6" pos:end="243:7">-&gt;</operator><name pos:start="243:8" pos:end="243:12">units</name></name> <operator pos:start="243:14" pos:end="243:14">=</operator> <call pos:start="243:16" pos:end="243:62"><name pos:start="243:16" pos:end="243:25">av_mallocz</name><argument_list pos:start="243:26" pos:end="243:62">(<argument pos:start="243:27" pos:end="243:61"><expr pos:start="243:27" pos:end="243:61"><sizeof pos:start="243:27" pos:end="243:43">sizeof<argument_list pos:start="243:33" pos:end="243:43">(<argument pos:start="243:34" pos:end="243:42"><expr pos:start="243:34" pos:end="243:42"><operator pos:start="243:34" pos:end="243:34">*</operator><name pos:start="243:35" pos:end="243:42"><name pos:start="243:35" pos:end="243:35">q</name><operator pos:start="243:36" pos:end="243:37">-&gt;</operator><name pos:start="243:38" pos:end="243:42">units</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="243:45" pos:end="243:45">*</operator> <name pos:start="243:47" pos:end="243:61"><name pos:start="243:47" pos:end="243:51">avctx</name><operator pos:start="243:52" pos:end="243:53">-&gt;</operator><name pos:start="243:54" pos:end="243:61">channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="245:5" pos:end="251:5"><if pos:start="245:5" pos:end="251:5">if <condition pos:start="245:8" pos:end="245:18">(<expr pos:start="245:9" pos:end="245:17"><operator pos:start="245:9" pos:end="245:9">!</operator><name pos:start="245:10" pos:end="245:17"><name pos:start="245:10" pos:end="245:10">q</name><operator pos:start="245:11" pos:end="245:12">-&gt;</operator><name pos:start="245:13" pos:end="245:17">units</name></name></expr>)</condition> <block pos:start="245:20" pos:end="251:5">{<block_content pos:start="247:9" pos:end="249:31">

        <expr_stmt pos:start="247:9" pos:end="247:35"><expr pos:start="247:9" pos:end="247:34"><call pos:start="247:9" pos:end="247:34"><name pos:start="247:9" pos:end="247:27">atrac3_decode_close</name><argument_list pos:start="247:28" pos:end="247:34">(<argument pos:start="247:29" pos:end="247:33"><expr pos:start="247:29" pos:end="247:33"><name pos:start="247:29" pos:end="247:33">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="249:9" pos:end="249:31">return <expr pos:start="249:16" pos:end="249:30"><call pos:start="249:16" pos:end="249:30"><name pos:start="249:16" pos:end="249:22">AVERROR</name><argument_list pos:start="249:23" pos:end="249:30">(<argument pos:start="249:24" pos:end="249:29"><expr pos:start="249:24" pos:end="249:29"><name pos:start="249:24" pos:end="249:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="255:5" pos:end="255:13">return <expr pos:start="255:12" pos:end="255:12"><literal type="number" pos:start="255:12" pos:end="255:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
