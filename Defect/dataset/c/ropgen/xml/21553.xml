<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21553.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:18">MemTxResult</name></type> <name pos:start="1:20" pos:end="1:35">nvic_sysreg_read</name><parameter_list pos:start="1:36" pos:end="5:53">(<parameter pos:start="1:37" pos:end="1:48"><decl pos:start="1:37" pos:end="1:48"><type pos:start="1:37" pos:end="1:48"><name pos:start="1:37" pos:end="1:40">void</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:48">opaque</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:61"><decl pos:start="1:51" pos:end="1:61"><type pos:start="1:51" pos:end="1:61"><name pos:start="1:51" pos:end="1:56">hwaddr</name></type> <name pos:start="1:58" pos:end="1:61">addr</name></decl></parameter>,

                                    <parameter pos:start="3:37" pos:end="3:50"><decl pos:start="3:37" pos:end="3:50"><type pos:start="3:37" pos:end="3:50"><name pos:start="3:37" pos:end="3:44">uint64_t</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:50">data</name></decl></parameter>, <parameter pos:start="3:53" pos:end="3:65"><decl pos:start="3:53" pos:end="3:65"><type pos:start="3:53" pos:end="3:65"><name pos:start="3:53" pos:end="3:60">unsigned</name></type> <name pos:start="3:62" pos:end="3:65">size</name></decl></parameter>,

                                    <parameter pos:start="5:37" pos:end="5:52"><decl pos:start="5:37" pos:end="5:52"><type pos:start="5:37" pos:end="5:52"><name pos:start="5:37" pos:end="5:46">MemTxAttrs</name></type> <name pos:start="5:48" pos:end="5:52">attrs</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="173:1">{<block_content pos:start="9:5" pos:end="171:20">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">NVICState</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:16">s</name> <init pos:start="9:18" pos:end="9:38">= <expr pos:start="9:20" pos:end="9:38"><operator pos:start="9:20" pos:end="9:20">(</operator><name pos:start="9:21" pos:end="9:29">NVICState</name> <operator pos:start="9:31" pos:end="9:31">*</operator><operator pos:start="9:32" pos:end="9:32">)</operator><name pos:start="9:33" pos:end="9:38">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:19">offset</name> <init pos:start="11:21" pos:end="11:26">= <expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">addr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:30"><decl pos:start="13:5" pos:end="13:14"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:14">i</name></decl>, <decl pos:start="13:17" pos:end="13:24"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:17" pos:end="13:24">startvec</name></decl>, <decl pos:start="13:27" pos:end="13:29"><type ref="prev" pos:start="13:5" pos:end="13:12"/><name pos:start="13:27" pos:end="13:29">end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:16">val</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="25:5"><if pos:start="19:5" pos:end="25:5">if <condition pos:start="19:8" pos:end="19:52">(<expr pos:start="19:9" pos:end="19:51"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:13">attrs</name><operator pos:start="19:14" pos:end="19:14">.</operator><name pos:start="19:15" pos:end="19:18">user</name></name> <operator pos:start="19:20" pos:end="19:21">&amp;&amp;</operator> <operator pos:start="19:23" pos:end="19:23">!</operator><call pos:start="19:24" pos:end="19:51"><name pos:start="19:24" pos:end="19:42">nvic_user_access_ok</name><argument_list pos:start="19:43" pos:end="19:51">(<argument pos:start="19:44" pos:end="19:44"><expr pos:start="19:44" pos:end="19:44"><name pos:start="19:44" pos:end="19:44">s</name></expr></argument>, <argument pos:start="19:47" pos:end="19:50"><expr pos:start="19:47" pos:end="19:50"><name pos:start="19:47" pos:end="19:50">addr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:54" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:27">

        <comment type="block" pos:start="21:9" pos:end="21:57">/* Generate BusFault for unprivileged accesses */</comment>

        <return pos:start="23:9" pos:end="23:27">return <expr pos:start="23:16" pos:end="23:26"><name pos:start="23:16" pos:end="23:26">MEMTX_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="29:5" pos:end="163:5">switch <condition pos:start="29:12" pos:end="29:19">(<expr pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:18">offset</name></expr>)</condition> <block pos:start="29:21" pos:end="163:5">{<block_content pos:start="33:5" pos:end="161:9">

    <comment type="block" pos:start="31:5" pos:end="31:55">/* reads of set and clear both return the status */</comment>

    <case pos:start="33:5" pos:end="33:25">case <expr pos:start="33:10" pos:end="33:24"><literal type="number" pos:start="33:10" pos:end="33:14">0x100</literal> <operator pos:start="33:16" pos:end="33:18">...</operator> <literal type="number" pos:start="33:20" pos:end="33:24">0x13f</literal></expr>:</case> <comment type="block" pos:start="33:27" pos:end="33:47">/* NVIC Set enable */</comment>

        <expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:14">offset</name> <operator pos:start="35:16" pos:end="35:17">+=</operator> <literal type="number" pos:start="35:19" pos:end="35:22">0x80</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="37:9" pos:end="37:26">/* fall through */</comment>

    <case pos:start="39:5" pos:end="39:25">case <expr pos:start="39:10" pos:end="39:24"><literal type="number" pos:start="39:10" pos:end="39:14">0x180</literal> <operator pos:start="39:16" pos:end="39:18">...</operator> <literal type="number" pos:start="39:20" pos:end="39:24">0x1bf</literal></expr>:</case> <comment type="block" pos:start="39:27" pos:end="39:49">/* NVIC Clear enable */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:16"><expr pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:11">val</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <literal type="number" pos:start="41:15" pos:end="41:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:51"><expr pos:start="43:9" pos:end="43:50"><name pos:start="43:9" pos:end="43:16">startvec</name> <operator pos:start="43:18" pos:end="43:18">=</operator> <name pos:start="43:20" pos:end="43:25">offset</name> <operator pos:start="43:27" pos:end="43:27">-</operator> <literal type="number" pos:start="43:29" pos:end="43:35">0x180</literal> <operator pos:start="43:35" pos:end="43:35">+</operator> <name pos:start="43:37" pos:end="43:50">NVIC_FIRST_IRQ</name></expr>;</expr_stmt> <comment type="block" pos:start="43:53" pos:end="43:66">/* vector # */</comment>



        <for pos:start="47:9" pos:end="55:9">for <control pos:start="47:13" pos:end="47:78">(<init pos:start="47:14" pos:end="47:35"><expr pos:start="47:14" pos:end="47:18"><name pos:start="47:14" pos:end="47:14">i</name> <operator pos:start="47:16" pos:end="47:16">=</operator> <literal type="number" pos:start="47:18" pos:end="47:18">0</literal></expr><operator pos:start="47:19" pos:end="47:19">,</operator> <expr pos:start="47:21" pos:end="47:34"><name pos:start="47:21" pos:end="47:23">end</name> <operator pos:start="47:25" pos:end="47:25">=</operator> <name pos:start="47:27" pos:end="47:30">size</name> <operator pos:start="47:32" pos:end="47:32">*</operator> <literal type="number" pos:start="47:34" pos:end="47:34">8</literal></expr>;</init> <condition pos:start="47:37" pos:end="47:73"><expr pos:start="47:37" pos:end="47:72"><name pos:start="47:37" pos:end="47:37">i</name> <operator pos:start="47:39" pos:end="47:39">&lt;</operator> <name pos:start="47:41" pos:end="47:43">end</name> <operator pos:start="47:45" pos:end="47:46">&amp;&amp;</operator> <name pos:start="47:48" pos:end="47:55">startvec</name> <operator pos:start="47:57" pos:end="47:57">+</operator> <name pos:start="47:59" pos:end="47:59">i</name> <operator pos:start="47:61" pos:end="47:61">&lt;</operator> <name pos:start="47:63" pos:end="47:72"><name pos:start="47:63" pos:end="47:63">s</name><operator pos:start="47:64" pos:end="47:65">-&gt;</operator><name pos:start="47:66" pos:end="47:72">num_irq</name></name></expr>;</condition> <incr pos:start="47:75" pos:end="47:77"><expr pos:start="47:75" pos:end="47:77"><name pos:start="47:75" pos:end="47:75">i</name><operator pos:start="47:76" pos:end="47:77">++</operator></expr></incr>)</control> <block pos:start="47:80" pos:end="55:9">{<block_content pos:start="49:13" pos:end="53:13">

            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:49">(<expr pos:start="49:17" pos:end="49:48"><name pos:start="49:17" pos:end="49:40"><name pos:start="49:17" pos:end="49:17">s</name><operator pos:start="49:18" pos:end="49:19">-&gt;</operator><name pos:start="49:20" pos:end="49:26">vectors</name><index pos:start="49:27" pos:end="49:40">[<expr pos:start="49:28" pos:end="49:39"><name pos:start="49:28" pos:end="49:35">startvec</name> <operator pos:start="49:37" pos:end="49:37">+</operator> <name pos:start="49:39" pos:end="49:39">i</name></expr>]</index></name><operator pos:start="49:41" pos:end="49:41">.</operator><name pos:start="49:42" pos:end="49:48">enabled</name></expr>)</condition> <block pos:start="49:51" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:32">

                <expr_stmt pos:start="51:17" pos:end="51:32"><expr pos:start="51:17" pos:end="51:31"><name pos:start="51:17" pos:end="51:19">val</name> <operator pos:start="51:21" pos:end="51:22">|=</operator> <operator pos:start="51:24" pos:end="51:24">(</operator><literal type="number" pos:start="51:25" pos:end="51:25">1</literal> <operator pos:start="51:27" pos:end="51:28">&lt;&lt;</operator> <name pos:start="51:30" pos:end="51:30">i</name><operator pos:start="51:31" pos:end="51:31">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <break pos:start="57:9" pos:end="57:14">break;</break>

    <case pos:start="59:5" pos:end="59:25">case <expr pos:start="59:10" pos:end="59:24"><literal type="number" pos:start="59:10" pos:end="59:14">0x200</literal> <operator pos:start="59:16" pos:end="59:18">...</operator> <literal type="number" pos:start="59:20" pos:end="59:24">0x23f</literal></expr>:</case> <comment type="block" pos:start="59:27" pos:end="59:45">/* NVIC Set pend */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:14">offset</name> <operator pos:start="61:16" pos:end="61:17">+=</operator> <literal type="number" pos:start="61:19" pos:end="61:22">0x80</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="63:9" pos:end="63:26">/* fall through */</comment>

    <case pos:start="65:5" pos:end="65:25">case <expr pos:start="65:10" pos:end="65:24"><literal type="number" pos:start="65:10" pos:end="65:14">0x280</literal> <operator pos:start="65:16" pos:end="65:18">...</operator> <literal type="number" pos:start="65:20" pos:end="65:24">0x2bf</literal></expr>:</case> <comment type="block" pos:start="65:27" pos:end="65:47">/* NVIC Clear pend */</comment>

        <expr_stmt pos:start="67:9" pos:end="67:16"><expr pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:11">val</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <literal type="number" pos:start="67:15" pos:end="67:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:51"><expr pos:start="69:9" pos:end="69:50"><name pos:start="69:9" pos:end="69:16">startvec</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:25">offset</name> <operator pos:start="69:27" pos:end="69:27">-</operator> <literal type="number" pos:start="69:29" pos:end="69:35">0x280</literal> <operator pos:start="69:35" pos:end="69:35">+</operator> <name pos:start="69:37" pos:end="69:50">NVIC_FIRST_IRQ</name></expr>;</expr_stmt> <comment type="block" pos:start="69:53" pos:end="69:66">/* vector # */</comment>

        <for pos:start="71:9" pos:end="79:9">for <control pos:start="71:13" pos:end="71:78">(<init pos:start="71:14" pos:end="71:35"><expr pos:start="71:14" pos:end="71:18"><name pos:start="71:14" pos:end="71:14">i</name> <operator pos:start="71:16" pos:end="71:16">=</operator> <literal type="number" pos:start="71:18" pos:end="71:18">0</literal></expr><operator pos:start="71:19" pos:end="71:19">,</operator> <expr pos:start="71:21" pos:end="71:34"><name pos:start="71:21" pos:end="71:23">end</name> <operator pos:start="71:25" pos:end="71:25">=</operator> <name pos:start="71:27" pos:end="71:30">size</name> <operator pos:start="71:32" pos:end="71:32">*</operator> <literal type="number" pos:start="71:34" pos:end="71:34">8</literal></expr>;</init> <condition pos:start="71:37" pos:end="71:73"><expr pos:start="71:37" pos:end="71:72"><name pos:start="71:37" pos:end="71:37">i</name> <operator pos:start="71:39" pos:end="71:39">&lt;</operator> <name pos:start="71:41" pos:end="71:43">end</name> <operator pos:start="71:45" pos:end="71:46">&amp;&amp;</operator> <name pos:start="71:48" pos:end="71:55">startvec</name> <operator pos:start="71:57" pos:end="71:57">+</operator> <name pos:start="71:59" pos:end="71:59">i</name> <operator pos:start="71:61" pos:end="71:61">&lt;</operator> <name pos:start="71:63" pos:end="71:72"><name pos:start="71:63" pos:end="71:63">s</name><operator pos:start="71:64" pos:end="71:65">-&gt;</operator><name pos:start="71:66" pos:end="71:72">num_irq</name></name></expr>;</condition> <incr pos:start="71:75" pos:end="71:77"><expr pos:start="71:75" pos:end="71:77"><name pos:start="71:75" pos:end="71:75">i</name><operator pos:start="71:76" pos:end="71:77">++</operator></expr></incr>)</control> <block pos:start="71:80" pos:end="79:9">{<block_content pos:start="73:13" pos:end="77:13">

            <if_stmt pos:start="73:13" pos:end="77:13"><if pos:start="73:13" pos:end="77:13">if <condition pos:start="73:16" pos:end="73:49">(<expr pos:start="73:17" pos:end="73:48"><name pos:start="73:17" pos:end="73:40"><name pos:start="73:17" pos:end="73:17">s</name><operator pos:start="73:18" pos:end="73:19">-&gt;</operator><name pos:start="73:20" pos:end="73:26">vectors</name><index pos:start="73:27" pos:end="73:40">[<expr pos:start="73:28" pos:end="73:39"><name pos:start="73:28" pos:end="73:35">startvec</name> <operator pos:start="73:37" pos:end="73:37">+</operator> <name pos:start="73:39" pos:end="73:39">i</name></expr>]</index></name><operator pos:start="73:41" pos:end="73:41">.</operator><name pos:start="73:42" pos:end="73:48">pending</name></expr>)</condition> <block pos:start="73:51" pos:end="77:13">{<block_content pos:start="75:17" pos:end="75:32">

                <expr_stmt pos:start="75:17" pos:end="75:32"><expr pos:start="75:17" pos:end="75:31"><name pos:start="75:17" pos:end="75:19">val</name> <operator pos:start="75:21" pos:end="75:22">|=</operator> <operator pos:start="75:24" pos:end="75:24">(</operator><literal type="number" pos:start="75:25" pos:end="75:25">1</literal> <operator pos:start="75:27" pos:end="75:28">&lt;&lt;</operator> <name pos:start="75:30" pos:end="75:30">i</name><operator pos:start="75:31" pos:end="75:31">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    <case pos:start="83:5" pos:end="83:25">case <expr pos:start="83:10" pos:end="83:24"><literal type="number" pos:start="83:10" pos:end="83:14">0x300</literal> <operator pos:start="83:16" pos:end="83:18">...</operator> <literal type="number" pos:start="83:20" pos:end="83:24">0x33f</literal></expr>:</case> <comment type="block" pos:start="83:27" pos:end="83:43">/* NVIC Active */</comment>

        <expr_stmt pos:start="85:9" pos:end="85:16"><expr pos:start="85:9" pos:end="85:15"><name pos:start="85:9" pos:end="85:11">val</name> <operator pos:start="85:13" pos:end="85:13">=</operator> <literal type="number" pos:start="85:15" pos:end="85:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:51"><expr pos:start="87:9" pos:end="87:50"><name pos:start="87:9" pos:end="87:16">startvec</name> <operator pos:start="87:18" pos:end="87:18">=</operator> <name pos:start="87:20" pos:end="87:25">offset</name> <operator pos:start="87:27" pos:end="87:27">-</operator> <literal type="number" pos:start="87:29" pos:end="87:35">0x300</literal> <operator pos:start="87:35" pos:end="87:35">+</operator> <name pos:start="87:37" pos:end="87:50">NVIC_FIRST_IRQ</name></expr>;</expr_stmt> <comment type="block" pos:start="87:53" pos:end="87:66">/* vector # */</comment>



        <for pos:start="91:9" pos:end="99:9">for <control pos:start="91:13" pos:end="91:78">(<init pos:start="91:14" pos:end="91:35"><expr pos:start="91:14" pos:end="91:18"><name pos:start="91:14" pos:end="91:14">i</name> <operator pos:start="91:16" pos:end="91:16">=</operator> <literal type="number" pos:start="91:18" pos:end="91:18">0</literal></expr><operator pos:start="91:19" pos:end="91:19">,</operator> <expr pos:start="91:21" pos:end="91:34"><name pos:start="91:21" pos:end="91:23">end</name> <operator pos:start="91:25" pos:end="91:25">=</operator> <name pos:start="91:27" pos:end="91:30">size</name> <operator pos:start="91:32" pos:end="91:32">*</operator> <literal type="number" pos:start="91:34" pos:end="91:34">8</literal></expr>;</init> <condition pos:start="91:37" pos:end="91:73"><expr pos:start="91:37" pos:end="91:72"><name pos:start="91:37" pos:end="91:37">i</name> <operator pos:start="91:39" pos:end="91:39">&lt;</operator> <name pos:start="91:41" pos:end="91:43">end</name> <operator pos:start="91:45" pos:end="91:46">&amp;&amp;</operator> <name pos:start="91:48" pos:end="91:55">startvec</name> <operator pos:start="91:57" pos:end="91:57">+</operator> <name pos:start="91:59" pos:end="91:59">i</name> <operator pos:start="91:61" pos:end="91:61">&lt;</operator> <name pos:start="91:63" pos:end="91:72"><name pos:start="91:63" pos:end="91:63">s</name><operator pos:start="91:64" pos:end="91:65">-&gt;</operator><name pos:start="91:66" pos:end="91:72">num_irq</name></name></expr>;</condition> <incr pos:start="91:75" pos:end="91:77"><expr pos:start="91:75" pos:end="91:77"><name pos:start="91:75" pos:end="91:75">i</name><operator pos:start="91:76" pos:end="91:77">++</operator></expr></incr>)</control> <block pos:start="91:80" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:13">

            <if_stmt pos:start="93:13" pos:end="97:13"><if pos:start="93:13" pos:end="97:13">if <condition pos:start="93:16" pos:end="93:48">(<expr pos:start="93:17" pos:end="93:47"><name pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:17">s</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:26">vectors</name><index pos:start="93:27" pos:end="93:40">[<expr pos:start="93:28" pos:end="93:39"><name pos:start="93:28" pos:end="93:35">startvec</name> <operator pos:start="93:37" pos:end="93:37">+</operator> <name pos:start="93:39" pos:end="93:39">i</name></expr>]</index></name><operator pos:start="93:41" pos:end="93:41">.</operator><name pos:start="93:42" pos:end="93:47">active</name></expr>)</condition> <block pos:start="93:50" pos:end="97:13">{<block_content pos:start="95:17" pos:end="95:32">

                <expr_stmt pos:start="95:17" pos:end="95:32"><expr pos:start="95:17" pos:end="95:31"><name pos:start="95:17" pos:end="95:19">val</name> <operator pos:start="95:21" pos:end="95:22">|=</operator> <operator pos:start="95:24" pos:end="95:24">(</operator><literal type="number" pos:start="95:25" pos:end="95:25">1</literal> <operator pos:start="95:27" pos:end="95:28">&lt;&lt;</operator> <name pos:start="95:30" pos:end="95:30">i</name><operator pos:start="95:31" pos:end="95:31">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <case pos:start="103:5" pos:end="103:25">case <expr pos:start="103:10" pos:end="103:24"><literal type="number" pos:start="103:10" pos:end="103:14">0x400</literal> <operator pos:start="103:16" pos:end="103:18">...</operator> <literal type="number" pos:start="103:20" pos:end="103:24">0x5ef</literal></expr>:</case> <comment type="block" pos:start="103:27" pos:end="103:45">/* NVIC Priority */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:16"><expr pos:start="105:9" pos:end="105:15"><name pos:start="105:9" pos:end="105:11">val</name> <operator pos:start="105:13" pos:end="105:13">=</operator> <literal type="number" pos:start="105:15" pos:end="105:15">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:51"><expr pos:start="107:9" pos:end="107:50"><name pos:start="107:9" pos:end="107:16">startvec</name> <operator pos:start="107:18" pos:end="107:18">=</operator> <name pos:start="107:20" pos:end="107:25">offset</name> <operator pos:start="107:27" pos:end="107:27">-</operator> <literal type="number" pos:start="107:29" pos:end="107:35">0x400</literal> <operator pos:start="107:35" pos:end="107:35">+</operator> <name pos:start="107:37" pos:end="107:50">NVIC_FIRST_IRQ</name></expr>;</expr_stmt> <comment type="block" pos:start="107:53" pos:end="107:66">/* vector # */</comment>



        <for pos:start="111:9" pos:end="115:9">for <control pos:start="111:13" pos:end="111:63">(<init pos:start="111:14" pos:end="111:19"><expr pos:start="111:14" pos:end="111:18"><name pos:start="111:14" pos:end="111:14">i</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <literal type="number" pos:start="111:18" pos:end="111:18">0</literal></expr>;</init> <condition pos:start="111:21" pos:end="111:58"><expr pos:start="111:21" pos:end="111:57"><name pos:start="111:21" pos:end="111:21">i</name> <operator pos:start="111:23" pos:end="111:23">&lt;</operator> <name pos:start="111:25" pos:end="111:28">size</name> <operator pos:start="111:30" pos:end="111:31">&amp;&amp;</operator> <name pos:start="111:33" pos:end="111:40">startvec</name> <operator pos:start="111:42" pos:end="111:42">+</operator> <name pos:start="111:44" pos:end="111:44">i</name> <operator pos:start="111:46" pos:end="111:46">&lt;</operator> <name pos:start="111:48" pos:end="111:57"><name pos:start="111:48" pos:end="111:48">s</name><operator pos:start="111:49" pos:end="111:50">-&gt;</operator><name pos:start="111:51" pos:end="111:57">num_irq</name></name></expr>;</condition> <incr pos:start="111:60" pos:end="111:62"><expr pos:start="111:60" pos:end="111:62"><name pos:start="111:60" pos:end="111:60">i</name><operator pos:start="111:61" pos:end="111:62">++</operator></expr></incr>)</control> <block pos:start="111:65" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:60">

            <expr_stmt pos:start="113:13" pos:end="113:60"><expr pos:start="113:13" pos:end="113:59"><name pos:start="113:13" pos:end="113:15">val</name> <operator pos:start="113:17" pos:end="113:18">|=</operator> <name pos:start="113:20" pos:end="113:43"><name pos:start="113:20" pos:end="113:20">s</name><operator pos:start="113:21" pos:end="113:22">-&gt;</operator><name pos:start="113:23" pos:end="113:29">vectors</name><index pos:start="113:30" pos:end="113:43">[<expr pos:start="113:31" pos:end="113:42"><name pos:start="113:31" pos:end="113:38">startvec</name> <operator pos:start="113:40" pos:end="113:40">+</operator> <name pos:start="113:42" pos:end="113:42">i</name></expr>]</index></name><operator pos:start="113:44" pos:end="113:44">.</operator><name pos:start="113:45" pos:end="113:48">prio</name> <operator pos:start="113:50" pos:end="113:51">&lt;&lt;</operator> <operator pos:start="113:53" pos:end="113:53">(</operator><literal type="number" pos:start="113:54" pos:end="113:54">8</literal> <operator pos:start="113:56" pos:end="113:56">*</operator> <name pos:start="113:58" pos:end="113:58">i</name><operator pos:start="113:59" pos:end="113:59">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="117:9" pos:end="117:14">break;</break>

    <case pos:start="119:5" pos:end="119:25">case <expr pos:start="119:10" pos:end="119:24"><literal type="number" pos:start="119:10" pos:end="119:14">0xd18</literal> <operator pos:start="119:16" pos:end="119:18">...</operator> <literal type="number" pos:start="119:20" pos:end="119:24">0xd23</literal></expr>:</case> <comment type="block" pos:start="119:27" pos:end="119:57">/* System Handler Priority.  */</comment>

        <expr_stmt pos:start="121:9" pos:end="121:16"><expr pos:start="121:9" pos:end="121:15"><name pos:start="121:9" pos:end="121:11">val</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <literal type="number" pos:start="121:15" pos:end="121:15">0</literal></expr>;</expr_stmt>

        <for pos:start="123:9" pos:end="127:9">for <control pos:start="123:13" pos:end="123:34">(<init pos:start="123:14" pos:end="123:19"><expr pos:start="123:14" pos:end="123:18"><name pos:start="123:14" pos:end="123:14">i</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <literal type="number" pos:start="123:18" pos:end="123:18">0</literal></expr>;</init> <condition pos:start="123:21" pos:end="123:29"><expr pos:start="123:21" pos:end="123:28"><name pos:start="123:21" pos:end="123:21">i</name> <operator pos:start="123:23" pos:end="123:23">&lt;</operator> <name pos:start="123:25" pos:end="123:28">size</name></expr>;</condition> <incr pos:start="123:31" pos:end="123:33"><expr pos:start="123:31" pos:end="123:33"><name pos:start="123:31" pos:end="123:31">i</name><operator pos:start="123:32" pos:end="123:33">++</operator></expr></incr>)</control> <block pos:start="123:36" pos:end="127:9">{<block_content pos:start="125:13" pos:end="125:68">

            <expr_stmt pos:start="125:13" pos:end="125:68"><expr pos:start="125:13" pos:end="125:67"><name pos:start="125:13" pos:end="125:15">val</name> <operator pos:start="125:17" pos:end="125:18">|=</operator> <name pos:start="125:20" pos:end="125:51"><name pos:start="125:20" pos:end="125:20">s</name><operator pos:start="125:21" pos:end="125:22">-&gt;</operator><name pos:start="125:23" pos:end="125:29">vectors</name><index pos:start="125:30" pos:end="125:51">[<expr pos:start="125:31" pos:end="125:50"><operator pos:start="125:31" pos:end="125:31">(</operator><name pos:start="125:32" pos:end="125:37">offset</name> <operator pos:start="125:39" pos:end="125:39">-</operator> <literal type="number" pos:start="125:41" pos:end="125:45">0xd14</literal><operator pos:start="125:46" pos:end="125:46">)</operator> <operator pos:start="125:48" pos:end="125:48">+</operator> <name pos:start="125:50" pos:end="125:50">i</name></expr>]</index></name><operator pos:start="125:52" pos:end="125:52">.</operator><name pos:start="125:53" pos:end="125:56">prio</name> <operator pos:start="125:58" pos:end="125:59">&lt;&lt;</operator> <operator pos:start="125:61" pos:end="125:61">(</operator><name pos:start="125:62" pos:end="125:62">i</name> <operator pos:start="125:64" pos:end="125:64">*</operator> <literal type="number" pos:start="125:66" pos:end="125:66">8</literal><operator pos:start="125:67" pos:end="125:67">)</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <break pos:start="129:9" pos:end="129:14">break;</break>

    <case pos:start="131:5" pos:end="131:25">case <expr pos:start="131:10" pos:end="131:24"><literal type="number" pos:start="131:10" pos:end="131:14">0xfe0</literal> <operator pos:start="131:16" pos:end="131:18">...</operator> <literal type="number" pos:start="131:20" pos:end="131:24">0xfff</literal></expr>:</case> <comment type="block" pos:start="131:27" pos:end="131:36">/* ID.  */</comment>

        <if_stmt pos:start="133:9" pos:end="141:9"><if pos:start="133:9" pos:end="137:9">if <condition pos:start="133:12" pos:end="133:23">(<expr pos:start="133:13" pos:end="133:22"><name pos:start="133:13" pos:end="133:18">offset</name> <operator pos:start="133:20" pos:end="133:20">&amp;</operator> <literal type="number" pos:start="133:22" pos:end="133:22">3</literal></expr>)</condition> <block pos:start="133:25" pos:end="137:9">{<block_content pos:start="135:13" pos:end="135:20">

            <expr_stmt pos:start="135:13" pos:end="135:20"><expr pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:15">val</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <literal type="number" pos:start="135:19" pos:end="135:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="137:11" pos:end="141:9">else <block pos:start="137:16" pos:end="141:9">{<block_content pos:start="139:13" pos:end="139:49">

            <expr_stmt pos:start="139:13" pos:end="139:49"><expr pos:start="139:13" pos:end="139:48"><name pos:start="139:13" pos:end="139:15">val</name> <operator pos:start="139:17" pos:end="139:17">=</operator> <name pos:start="139:19" pos:end="139:48"><name pos:start="139:19" pos:end="139:25">nvic_id</name><index pos:start="139:26" pos:end="139:48">[<expr pos:start="139:27" pos:end="139:47"><operator pos:start="139:27" pos:end="139:27">(</operator><name pos:start="139:28" pos:end="139:33">offset</name> <operator pos:start="139:35" pos:end="139:35">-</operator> <literal type="number" pos:start="139:37" pos:end="139:41">0xfe0</literal><operator pos:start="139:42" pos:end="139:42">)</operator> <operator pos:start="139:44" pos:end="139:45">&gt;&gt;</operator> <literal type="number" pos:start="139:47" pos:end="139:47">2</literal></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="143:9" pos:end="143:14">break;</break>

    <default pos:start="145:5" pos:end="145:12">default:</default>

        <if_stmt pos:start="147:9" pos:end="161:9"><if pos:start="147:9" pos:end="151:9">if <condition pos:start="147:12" pos:end="147:22">(<expr pos:start="147:13" pos:end="147:21"><name pos:start="147:13" pos:end="147:16">size</name> <operator pos:start="147:18" pos:end="147:19">==</operator> <literal type="number" pos:start="147:21" pos:end="147:21">4</literal></expr>)</condition> <block pos:start="147:24" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:40">

            <expr_stmt pos:start="149:13" pos:end="149:40"><expr pos:start="149:13" pos:end="149:39"><name pos:start="149:13" pos:end="149:15">val</name> <operator pos:start="149:17" pos:end="149:17">=</operator> <call pos:start="149:19" pos:end="149:39"><name pos:start="149:19" pos:end="149:28">nvic_readl</name><argument_list pos:start="149:29" pos:end="149:39">(<argument pos:start="149:30" pos:end="149:30"><expr pos:start="149:30" pos:end="149:30"><name pos:start="149:30" pos:end="149:30">s</name></expr></argument>, <argument pos:start="149:33" pos:end="149:38"><expr pos:start="149:33" pos:end="149:38"><name pos:start="149:33" pos:end="149:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="151:11" pos:end="161:9">else <block pos:start="151:16" pos:end="161:9">{<block_content pos:start="153:13" pos:end="159:20">

            <expr_stmt pos:start="153:13" pos:end="157:40"><expr pos:start="153:13" pos:end="157:39"><call pos:start="153:13" pos:end="157:39"><name pos:start="153:13" pos:end="153:25">qemu_log_mask</name><argument_list pos:start="153:26" pos:end="157:39">(<argument pos:start="153:27" pos:end="153:41"><expr pos:start="153:27" pos:end="153:41"><name pos:start="153:27" pos:end="153:41">LOG_GUEST_ERROR</name></expr></argument>,

                          <argument pos:start="155:27" pos:end="155:70"><expr pos:start="155:27" pos:end="155:70"><literal type="string" pos:start="155:27" pos:end="155:70">"NVIC: Bad read of size %d at offset 0x%x\n"</literal></expr></argument>,

                          <argument pos:start="157:27" pos:end="157:30"><expr pos:start="157:27" pos:end="157:30"><name pos:start="157:27" pos:end="157:30">size</name></expr></argument>, <argument pos:start="157:33" pos:end="157:38"><expr pos:start="157:33" pos:end="157:38"><name pos:start="157:33" pos:end="157:38">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:20"><expr pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:15">val</name> <operator pos:start="159:17" pos:end="159:17">=</operator> <literal type="number" pos:start="159:19" pos:end="159:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="167:5" pos:end="167:44"><expr pos:start="167:5" pos:end="167:43"><call pos:start="167:5" pos:end="167:43"><name pos:start="167:5" pos:end="167:26">trace_nvic_sysreg_read</name><argument_list pos:start="167:27" pos:end="167:43">(<argument pos:start="167:28" pos:end="167:31"><expr pos:start="167:28" pos:end="167:31"><name pos:start="167:28" pos:end="167:31">addr</name></expr></argument>, <argument pos:start="167:34" pos:end="167:36"><expr pos:start="167:34" pos:end="167:36"><name pos:start="167:34" pos:end="167:36">val</name></expr></argument>, <argument pos:start="167:39" pos:end="167:42"><expr pos:start="167:39" pos:end="167:42"><name pos:start="167:39" pos:end="167:42">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="169:5" pos:end="169:16"><expr pos:start="169:5" pos:end="169:15"><operator pos:start="169:5" pos:end="169:5">*</operator><name pos:start="169:6" pos:end="169:9">data</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <name pos:start="169:13" pos:end="169:15">val</name></expr>;</expr_stmt>

    <return pos:start="171:5" pos:end="171:20">return <expr pos:start="171:12" pos:end="171:19"><name pos:start="171:12" pos:end="171:19">MEMTX_OK</name></expr>;</return>

</block_content>}</block></function>
</unit>
