<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11310.c" pos:tabs="8"><function pos:start="1:1" pos:end="37:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">mov_read_smi</name><parameter_list pos:start="1:24" pos:end="1:71">(<parameter pos:start="1:25" pos:end="1:37"><decl pos:start="1:25" pos:end="1:37"><type pos:start="1:25" pos:end="1:37"><name pos:start="1:25" pos:end="1:34">MOVContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">c</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:52">ByteIOContext</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">pb</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:65">MOVAtom</name></type> <name pos:start="1:67" pos:end="1:70">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="37:1">{<block_content pos:start="5:5" pos:end="35:13">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name> <init pos:start="5:18" pos:end="5:54">= <expr pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:54"><name pos:start="5:20" pos:end="5:20">c</name><operator pos:start="5:21" pos:end="5:22">-&gt;</operator><name pos:start="5:23" pos:end="5:24">fc</name><operator pos:start="5:25" pos:end="5:26">-&gt;</operator><name pos:start="5:27" pos:end="5:33">streams</name><index pos:start="5:34" pos:end="5:54">[<expr pos:start="5:35" pos:end="5:53"><name pos:start="5:35" pos:end="5:51"><name pos:start="5:35" pos:end="5:35">c</name><operator pos:start="5:36" pos:end="5:37">-&gt;</operator><name pos:start="5:38" pos:end="5:39">fc</name><operator pos:start="5:40" pos:end="5:41">-&gt;</operator><name pos:start="5:42" pos:end="5:51">nb_streams</name></name><operator pos:start="5:52" pos:end="5:52">-</operator><literal type="number" pos:start="5:53" pos:end="5:53">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="11:18"><if pos:start="9:5" pos:end="11:18">if<condition pos:start="9:7" pos:end="9:37">(<expr pos:start="9:8" pos:end="9:36"><operator pos:start="9:8" pos:end="9:8">(</operator><name pos:start="9:9" pos:end="9:16">uint64_t</name><operator pos:start="9:17" pos:end="9:17">)</operator><name pos:start="9:18" pos:end="9:26"><name pos:start="9:18" pos:end="9:21">atom</name><operator pos:start="9:22" pos:end="9:22">.</operator><name pos:start="9:23" pos:end="9:26">size</name></name> <operator pos:start="9:28" pos:end="9:28">&gt;</operator> <operator pos:start="9:30" pos:end="9:30">(</operator><literal type="number" pos:start="9:31" pos:end="9:31">1</literal><operator pos:start="9:32" pos:end="9:33">&lt;&lt;</operator><literal type="number" pos:start="9:34" pos:end="9:35">30</literal><operator pos:start="9:36" pos:end="9:36">)</operator></expr>)</condition><block type="pseudo" pos:start="11:9" pos:end="11:18"><block_content pos:start="11:9" pos:end="11:18">

        <return pos:start="11:9" pos:end="11:18">return <expr pos:start="11:16" pos:end="11:17"><operator pos:start="11:16" pos:end="11:16">-</operator><literal type="number" pos:start="11:17" pos:end="11:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="line" pos:start="15:5" pos:end="15:72">// currently SVQ3 decoder expect full STSD header - so let's fake it</comment>

    <comment type="line" pos:start="17:5" pos:end="17:64">// this should be fixed and just SMI header should be passed</comment>

    <expr_stmt pos:start="19:5" pos:end="19:34"><expr pos:start="19:5" pos:end="19:33"><call pos:start="19:5" pos:end="19:33"><name pos:start="19:5" pos:end="19:11">av_free</name><argument_list pos:start="19:12" pos:end="19:33">(<argument pos:start="19:13" pos:end="19:32"><expr pos:start="19:13" pos:end="19:32"><name pos:start="19:13" pos:end="19:32"><name pos:start="19:13" pos:end="19:14">st</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:21">codec</name><operator pos:start="19:22" pos:end="19:23">-&gt;</operator><name pos:start="19:24" pos:end="19:32">extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:87"><expr pos:start="21:5" pos:end="21:86"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:6">st</name><operator pos:start="21:7" pos:end="21:8">-&gt;</operator><name pos:start="21:9" pos:end="21:13">codec</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:24">extradata</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <call pos:start="21:28" pos:end="21:86"><name pos:start="21:28" pos:end="21:37">av_mallocz</name><argument_list pos:start="21:38" pos:end="21:86">(<argument pos:start="21:39" pos:end="21:85"><expr pos:start="21:39" pos:end="21:85"><name pos:start="21:39" pos:end="21:47"><name pos:start="21:39" pos:end="21:42">atom</name><operator pos:start="21:43" pos:end="21:43">.</operator><name pos:start="21:44" pos:end="21:47">size</name></name> <operator pos:start="21:49" pos:end="21:49">+</operator> <literal type="number" pos:start="21:51" pos:end="21:56">0x5a</literal> <operator pos:start="21:56" pos:end="21:56">+</operator> <name pos:start="21:58" pos:end="21:85">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="25:31"><if pos:start="23:5" pos:end="25:31">if <condition pos:start="23:8" pos:end="23:30">(<expr pos:start="23:9" pos:end="23:29"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:29"><name pos:start="23:10" pos:end="23:11">st</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:18">codec</name><operator pos:start="23:19" pos:end="23:20">-&gt;</operator><name pos:start="23:21" pos:end="23:29">extradata</name></name></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:31"><block_content pos:start="25:9" pos:end="25:31">

        <return pos:start="25:9" pos:end="25:31">return <expr pos:start="25:16" pos:end="25:30"><call pos:start="25:16" pos:end="25:30"><name pos:start="25:16" pos:end="25:22">AVERROR</name><argument_list pos:start="25:23" pos:end="25:30">(<argument pos:start="25:24" pos:end="25:29"><expr pos:start="25:24" pos:end="25:29"><name pos:start="25:24" pos:end="25:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:49"><expr pos:start="27:5" pos:end="27:48"><name pos:start="27:5" pos:end="27:29"><name pos:start="27:5" pos:end="27:6">st</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:13">codec</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:29">extradata_size</name></name> <operator pos:start="27:31" pos:end="27:31">=</operator> <literal type="number" pos:start="27:33" pos:end="27:38">0x5a</literal> <operator pos:start="27:38" pos:end="27:38">+</operator> <name pos:start="27:40" pos:end="27:48"><name pos:start="27:40" pos:end="27:43">atom</name><operator pos:start="27:44" pos:end="27:44">.</operator><name pos:start="27:45" pos:end="27:48">size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:44"><expr pos:start="29:5" pos:end="29:43"><call pos:start="29:5" pos:end="29:43"><name pos:start="29:5" pos:end="29:10">memcpy</name><argument_list pos:start="29:11" pos:end="29:43">(<argument pos:start="29:12" pos:end="29:31"><expr pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:31"><name pos:start="29:12" pos:end="29:13">st</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:20">codec</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:31">extradata</name></name></expr></argument>, <argument pos:start="29:34" pos:end="29:39"><expr pos:start="29:34" pos:end="29:39"><literal type="string" pos:start="29:34" pos:end="29:39">"SVQ3"</literal></expr></argument>, <argument pos:start="29:42" pos:end="29:42"><expr pos:start="29:42" pos:end="29:42"><literal type="number" pos:start="29:42" pos:end="29:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="29:46" pos:end="29:52">// fake</comment>

    <expr_stmt pos:start="31:5" pos:end="31:59"><expr pos:start="31:5" pos:end="31:58"><call pos:start="31:5" pos:end="31:58"><name pos:start="31:5" pos:end="31:14">get_buffer</name><argument_list pos:start="31:15" pos:end="31:58">(<argument pos:start="31:16" pos:end="31:17"><expr pos:start="31:16" pos:end="31:17"><name pos:start="31:16" pos:end="31:17">pb</name></expr></argument>, <argument pos:start="31:20" pos:end="31:46"><expr pos:start="31:20" pos:end="31:46"><name pos:start="31:20" pos:end="31:39"><name pos:start="31:20" pos:end="31:21">st</name><operator pos:start="31:22" pos:end="31:23">-&gt;</operator><name pos:start="31:24" pos:end="31:28">codec</name><operator pos:start="31:29" pos:end="31:30">-&gt;</operator><name pos:start="31:31" pos:end="31:39">extradata</name></name> <operator pos:start="31:41" pos:end="31:41">+</operator> <literal type="number" pos:start="31:43" pos:end="31:46">0x5a</literal></expr></argument>, <argument pos:start="31:49" pos:end="31:57"><expr pos:start="31:49" pos:end="31:57"><name pos:start="31:49" pos:end="31:57"><name pos:start="31:49" pos:end="31:52">atom</name><operator pos:start="31:53" pos:end="31:53">.</operator><name pos:start="31:54" pos:end="31:57">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:90"><expr pos:start="33:5" pos:end="33:89"><call pos:start="33:5" pos:end="33:89"><name pos:start="33:5" pos:end="33:11">dprintf</name><argument_list pos:start="33:12" pos:end="33:89">(<argument pos:start="33:13" pos:end="33:17"><expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:13">c</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:17">fc</name></name></expr></argument>, <argument pos:start="33:20" pos:end="33:48"><expr pos:start="33:20" pos:end="33:48"><literal type="string" pos:start="33:20" pos:end="33:34">"Reading SMI %"</literal><name pos:start="33:35" pos:end="33:40">PRId64</name><literal type="string" pos:start="33:41" pos:end="33:48">"  %s\n"</literal></expr></argument>, <argument pos:start="33:51" pos:end="33:59"><expr pos:start="33:51" pos:end="33:59"><name pos:start="33:51" pos:end="33:59"><name pos:start="33:51" pos:end="33:54">atom</name><operator pos:start="33:55" pos:end="33:55">.</operator><name pos:start="33:56" pos:end="33:59">size</name></name></expr></argument>, <argument pos:start="33:62" pos:end="33:88"><expr pos:start="33:62" pos:end="33:88"><name pos:start="33:62" pos:end="33:81"><name pos:start="33:62" pos:end="33:63">st</name><operator pos:start="33:64" pos:end="33:65">-&gt;</operator><name pos:start="33:66" pos:end="33:70">codec</name><operator pos:start="33:71" pos:end="33:72">-&gt;</operator><name pos:start="33:73" pos:end="33:81">extradata</name></name> <operator pos:start="33:83" pos:end="33:83">+</operator> <literal type="number" pos:start="33:85" pos:end="33:88">0x5a</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="35:5" pos:end="35:13">return <expr pos:start="35:12" pos:end="35:12"><literal type="number" pos:start="35:12" pos:end="35:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
