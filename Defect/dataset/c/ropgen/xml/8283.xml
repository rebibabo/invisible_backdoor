<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8283.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:56"><name pos:start="1:1" pos:end="1:9">fork_exec</name><argument_list pos:start="1:10" pos:end="1:56">(<argument pos:start="1:11" pos:end="1:27">struct socket *so</argument>, <argument pos:start="1:30" pos:end="1:43">const char *ex</argument>, <argument pos:start="1:46" pos:end="1:55">int do_pty</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="311:1">{<block_content pos:start="5:9" pos:end="309:9">

	<decl_stmt pos:start="5:9" pos:end="5:14"><decl pos:start="5:9" pos:end="5:13"><type pos:start="5:9" pos:end="5:11"><name pos:start="5:9" pos:end="5:11">int</name></type> <name pos:start="5:13" pos:end="5:13">s</name></decl>;</decl_stmt>

	<decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:26">sockaddr_in</name></name></type> <name pos:start="7:28" pos:end="7:31">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:35"><decl pos:start="9:9" pos:end="9:34"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:19">addrlen</name> <init pos:start="9:21" pos:end="9:34">= <expr pos:start="9:23" pos:end="9:34"><sizeof pos:start="9:23" pos:end="9:34">sizeof<argument_list pos:start="9:29" pos:end="9:34">(<argument pos:start="9:30" pos:end="9:33"><expr pos:start="9:30" pos:end="9:33"><name pos:start="9:30" pos:end="9:33">addr</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="11:9" pos:end="11:16"><decl pos:start="11:9" pos:end="11:15"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:15">opt</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:24"><decl pos:start="13:9" pos:end="13:23"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:18">master</name> <init pos:start="13:20" pos:end="13:23">= <expr pos:start="13:22" pos:end="13:23"><operator pos:start="13:22" pos:end="13:22">-</operator><literal type="number" pos:start="13:23" pos:end="13:23">1</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt pos:start="15:9" pos:end="22:0"><decl pos:start="15:9" pos:end="15:23"><type pos:start="15:9" pos:end="15:14"><name pos:start="15:9" pos:end="15:12">char</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:23"><name pos:start="15:15" pos:end="15:18">argv</name><index pos:start="15:19" pos:end="15:23">[<expr pos:start="15:20" pos:end="15:22"><literal type="number" pos:start="15:20" pos:end="15:22">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:5"><literal type="number" pos:start="17:5" pos:end="17:5">0</literal></expr></cpp:if>

	char buff[256];

<cpp:endif pos:start="21:1" pos:end="21:6">#<cpp:directive pos:start="21:2" pos:end="21:6">endif</cpp:directive></cpp:endif>

	<comment type="block" pos:start="23:9" pos:end="23:48">/* don't want to clobber the original */</comment>

	<decl_stmt pos:start="25:9" pos:end="25:19"><decl pos:start="25:9" pos:end="25:18"><type pos:start="25:9" pos:end="25:14"><name pos:start="25:9" pos:end="25:12">char</name> <modifier pos:start="25:14" pos:end="25:14">*</modifier></type><name pos:start="25:15" pos:end="25:18">bptr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="27:9" pos:end="27:27"><decl pos:start="27:9" pos:end="27:26"><type pos:start="27:9" pos:end="27:20"><specifier pos:start="27:9" pos:end="27:13">const</specifier> <name pos:start="27:15" pos:end="27:18">char</name> <modifier pos:start="27:20" pos:end="27:20">*</modifier></type><name pos:start="27:21" pos:end="27:26">curarg</name></decl>;</decl_stmt>

	<decl_stmt pos:start="29:9" pos:end="29:22"><decl pos:start="29:9" pos:end="29:13"><type pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:11">int</name></type> <name pos:start="29:13" pos:end="29:13">c</name></decl>, <decl pos:start="29:16" pos:end="29:16"><type ref="prev" pos:start="29:9" pos:end="29:11"/><name pos:start="29:16" pos:end="29:16">i</name></decl>, <decl pos:start="29:19" pos:end="29:21"><type ref="prev" pos:start="29:9" pos:end="29:11"/><name pos:start="29:19" pos:end="29:21">ret</name></decl>;</decl_stmt>



	<expr_stmt pos:start="33:9" pos:end="33:32"><expr pos:start="33:9" pos:end="33:31"><call pos:start="33:9" pos:end="33:31"><name pos:start="33:9" pos:end="33:18">DEBUG_CALL</name><argument_list pos:start="33:19" pos:end="33:31">(<argument pos:start="33:20" pos:end="33:30"><expr pos:start="33:20" pos:end="33:30"><literal type="string" pos:start="33:20" pos:end="33:30">"fork_exec"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><call pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:17">DEBUG_ARG</name><argument_list pos:start="35:18" pos:end="35:39">(<argument pos:start="35:19" pos:end="35:28"><expr pos:start="35:19" pos:end="35:28"><literal type="string" pos:start="35:19" pos:end="35:28">"so = %lx"</literal></expr></argument>, <argument pos:start="35:31" pos:end="35:38"><expr pos:start="35:31" pos:end="35:38"><operator pos:start="35:31" pos:end="35:31">(</operator><name pos:start="35:32" pos:end="35:35">long</name><operator pos:start="35:36" pos:end="35:36">)</operator><name pos:start="35:37" pos:end="35:38">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="37:9" pos:end="37:40"><expr pos:start="37:9" pos:end="37:39"><call pos:start="37:9" pos:end="37:39"><name pos:start="37:9" pos:end="37:17">DEBUG_ARG</name><argument_list pos:start="37:18" pos:end="37:39">(<argument pos:start="37:19" pos:end="37:28"><expr pos:start="37:19" pos:end="37:28"><literal type="string" pos:start="37:19" pos:end="37:28">"ex = %lx"</literal></expr></argument>, <argument pos:start="37:31" pos:end="37:38"><expr pos:start="37:31" pos:end="37:38"><operator pos:start="37:31" pos:end="37:31">(</operator><name pos:start="37:32" pos:end="37:35">long</name><operator pos:start="37:36" pos:end="37:36">)</operator><name pos:start="37:37" pos:end="37:38">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="39:9" pos:end="39:48"><expr pos:start="39:9" pos:end="39:47"><call pos:start="39:9" pos:end="39:47"><name pos:start="39:9" pos:end="39:17">DEBUG_ARG</name><argument_list pos:start="39:18" pos:end="39:47">(<argument pos:start="39:19" pos:end="39:32"><expr pos:start="39:19" pos:end="39:32"><literal type="string" pos:start="39:19" pos:end="39:32">"do_pty = %lx"</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:46"><expr pos:start="39:35" pos:end="39:46"><operator pos:start="39:35" pos:end="39:35">(</operator><name pos:start="39:36" pos:end="39:39">long</name><operator pos:start="39:40" pos:end="39:40">)</operator><name pos:start="39:41" pos:end="39:46">do_pty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="43:9" pos:end="87:9"><if pos:start="43:9" pos:end="61:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><name pos:start="43:13" pos:end="43:18">do_pty</name> <operator pos:start="43:20" pos:end="43:21">==</operator> <literal type="number" pos:start="43:23" pos:end="43:23">2</literal></expr>)</condition> <block pos:start="43:26" pos:end="61:9">{<block_content pos:start="57:17" pos:end="60:0">

<cpp:if pos:start="45:1" pos:end="45:5">#<cpp:directive pos:start="45:2" pos:end="45:3">if</cpp:directive> <expr pos:start="45:5" pos:end="45:5"><literal type="number" pos:start="45:5" pos:end="45:5">0</literal></expr></cpp:if>

		if (slirp_openpty(&amp;master, &amp;s) == -1) {

			lprint("Error: openpty failed: %s\n", strerror(errno));

			return 0;

		}

<cpp:else pos:start="55:1" pos:end="55:5">#<cpp:directive pos:start="55:2" pos:end="55:5">else</cpp:directive></cpp:else>

                <return pos:start="57:17" pos:end="60:0">return <expr pos:start="57:24" pos:end="57:24"><literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>;</return>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

	</block_content>}</block></if> <else pos:start="61:11" pos:end="87:9">else <block pos:start="61:16" pos:end="87:9">{<block_content pos:start="63:17" pos:end="85:17">

		<expr_stmt pos:start="63:17" pos:end="63:42"><expr pos:start="63:17" pos:end="63:41"><name pos:start="63:17" pos:end="63:31"><name pos:start="63:17" pos:end="63:20">addr</name><operator pos:start="63:21" pos:end="63:21">.</operator><name pos:start="63:22" pos:end="63:31">sin_family</name></name> <operator pos:start="63:33" pos:end="63:33">=</operator> <name pos:start="63:35" pos:end="63:41">AF_INET</name></expr>;</expr_stmt>

		<expr_stmt pos:start="65:17" pos:end="65:34"><expr pos:start="65:17" pos:end="65:33"><name pos:start="65:17" pos:end="65:29"><name pos:start="65:17" pos:end="65:20">addr</name><operator pos:start="65:21" pos:end="65:21">.</operator><name pos:start="65:22" pos:end="65:29">sin_port</name></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <literal type="number" pos:start="65:33" pos:end="65:33">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="67:17" pos:end="67:50"><expr pos:start="67:17" pos:end="67:49"><name pos:start="67:17" pos:end="67:36"><name pos:start="67:17" pos:end="67:20">addr</name><operator pos:start="67:21" pos:end="67:21">.</operator><name pos:start="67:22" pos:end="67:29">sin_addr</name><operator pos:start="67:30" pos:end="67:30">.</operator><name pos:start="67:31" pos:end="67:36">s_addr</name></name> <operator pos:start="67:38" pos:end="67:38">=</operator> <name pos:start="67:40" pos:end="67:49">INADDR_ANY</name></expr>;</expr_stmt>



		<if_stmt pos:start="71:17" pos:end="85:17"><if pos:start="71:17" pos:end="85:17">if <condition pos:start="71:20" pos:end="75:37">(<expr pos:start="71:21" pos:end="75:36"><operator pos:start="71:21" pos:end="71:21">(</operator><name pos:start="71:22" pos:end="71:22">s</name> <operator pos:start="71:24" pos:end="71:24">=</operator> <call pos:start="71:26" pos:end="71:56"><name pos:start="71:26" pos:end="71:31">socket</name><argument_list pos:start="71:32" pos:end="71:56">(<argument pos:start="71:33" pos:end="71:39"><expr pos:start="71:33" pos:end="71:39"><name pos:start="71:33" pos:end="71:39">AF_INET</name></expr></argument>, <argument pos:start="71:42" pos:end="71:52"><expr pos:start="71:42" pos:end="71:52"><name pos:start="71:42" pos:end="71:52">SOCK_STREAM</name></expr></argument>, <argument pos:start="71:55" pos:end="71:55"><expr pos:start="71:55" pos:end="71:55"><literal type="number" pos:start="71:55" pos:end="71:55">0</literal></expr></argument>)</argument_list></call><operator pos:start="71:57" pos:end="71:57">)</operator> <operator pos:start="71:59" pos:end="71:59">&lt;</operator> <literal type="number" pos:start="71:61" pos:end="71:61">0</literal> <operator pos:start="71:63" pos:end="71:64">||</operator>

		    <call pos:start="73:21" pos:end="73:62"><name pos:start="73:21" pos:end="73:24">bind</name><argument_list pos:start="73:25" pos:end="73:62">(<argument pos:start="73:26" pos:end="73:26"><expr pos:start="73:26" pos:end="73:26"><name pos:start="73:26" pos:end="73:26">s</name></expr></argument>, <argument pos:start="73:29" pos:end="73:52"><expr pos:start="73:29" pos:end="73:52"><operator pos:start="73:29" pos:end="73:29">(</operator>struct <name pos:start="73:37" pos:end="73:44">sockaddr</name> <operator pos:start="73:46" pos:end="73:46">*</operator><operator pos:start="73:47" pos:end="73:47">)</operator><operator pos:start="73:48" pos:end="73:48">&amp;</operator><name pos:start="73:49" pos:end="73:52">addr</name></expr></argument>, <argument pos:start="73:55" pos:end="73:61"><expr pos:start="73:55" pos:end="73:61"><name pos:start="73:55" pos:end="73:61">addrlen</name></expr></argument>)</argument_list></call> <operator pos:start="73:64" pos:end="73:64">&lt;</operator> <literal type="number" pos:start="73:66" pos:end="73:66">0</literal> <operator pos:start="73:68" pos:end="73:69">||</operator>

		    <call pos:start="75:21" pos:end="75:32"><name pos:start="75:21" pos:end="75:26">listen</name><argument_list pos:start="75:27" pos:end="75:32">(<argument pos:start="75:28" pos:end="75:28"><expr pos:start="75:28" pos:end="75:28"><name pos:start="75:28" pos:end="75:28">s</name></expr></argument>, <argument pos:start="75:31" pos:end="75:31"><expr pos:start="75:31" pos:end="75:31"><literal type="number" pos:start="75:31" pos:end="75:31">1</literal></expr></argument>)</argument_list></call> <operator pos:start="75:34" pos:end="75:34">&lt;</operator> <literal type="number" pos:start="75:36" pos:end="75:36">0</literal></expr>)</condition> <block pos:start="75:39" pos:end="85:17">{<block_content pos:start="77:25" pos:end="83:33">

			<expr_stmt pos:start="77:25" pos:end="77:76"><expr pos:start="77:25" pos:end="77:75"><call pos:start="77:25" pos:end="77:75"><name pos:start="77:25" pos:end="77:30">lprint</name><argument_list pos:start="77:31" pos:end="77:75">(<argument pos:start="77:32" pos:end="77:57"><expr pos:start="77:32" pos:end="77:57"><literal type="string" pos:start="77:32" pos:end="77:57">"Error: inet socket: %s\n"</literal></expr></argument>, <argument pos:start="77:60" pos:end="77:74"><expr pos:start="77:60" pos:end="77:74"><call pos:start="77:60" pos:end="77:74"><name pos:start="77:60" pos:end="77:67">strerror</name><argument_list pos:start="77:68" pos:end="77:74">(<argument pos:start="77:69" pos:end="77:73"><expr pos:start="77:69" pos:end="77:73"><name pos:start="77:69" pos:end="77:73">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="79:25" pos:end="79:39"><expr pos:start="79:25" pos:end="79:38"><call pos:start="79:25" pos:end="79:38"><name pos:start="79:25" pos:end="79:35">closesocket</name><argument_list pos:start="79:36" pos:end="79:38">(<argument pos:start="79:37" pos:end="79:37"><expr pos:start="79:37" pos:end="79:37"><name pos:start="79:37" pos:end="79:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



			<return pos:start="83:25" pos:end="83:33">return <expr pos:start="83:32" pos:end="83:32"><literal type="number" pos:start="83:32" pos:end="83:32">0</literal></expr>;</return>

		</block_content>}</block></if></if_stmt>

	</block_content>}</block></else></if_stmt>



	<switch pos:start="91:9" pos:end="309:9">switch<condition pos:start="91:15" pos:end="91:22">(<expr pos:start="91:16" pos:end="91:21"><call pos:start="91:16" pos:end="91:21"><name pos:start="91:16" pos:end="91:19">fork</name><argument_list pos:start="91:20" pos:end="91:21">()</argument_list></call></expr>)</condition> <block pos:start="91:24" pos:end="309:9">{<block_content pos:start="93:10" pos:end="307:25">

	 <case pos:start="93:10" pos:end="93:17">case <expr pos:start="93:15" pos:end="93:16"><operator pos:start="93:15" pos:end="93:15">-</operator><literal type="number" pos:start="93:16" pos:end="93:16">1</literal></expr>:</case>

		<expr_stmt pos:start="95:17" pos:end="95:68"><expr pos:start="95:17" pos:end="95:67"><call pos:start="95:17" pos:end="95:67"><name pos:start="95:17" pos:end="95:22">lprint</name><argument_list pos:start="95:23" pos:end="95:67">(<argument pos:start="95:24" pos:end="95:49"><expr pos:start="95:24" pos:end="95:49"><literal type="string" pos:start="95:24" pos:end="95:49">"Error: fork failed: %s\n"</literal></expr></argument>, <argument pos:start="95:52" pos:end="95:66"><expr pos:start="95:52" pos:end="95:66"><call pos:start="95:52" pos:end="95:66"><name pos:start="95:52" pos:end="95:59">strerror</name><argument_list pos:start="95:60" pos:end="95:66">(<argument pos:start="95:61" pos:end="95:65"><expr pos:start="95:61" pos:end="95:65"><name pos:start="95:61" pos:end="95:65">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="97:17" pos:end="97:25"><expr pos:start="97:17" pos:end="97:24"><call pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:21">close</name><argument_list pos:start="97:22" pos:end="97:24">(<argument pos:start="97:23" pos:end="97:23"><expr pos:start="97:23" pos:end="97:23"><name pos:start="97:23" pos:end="97:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt pos:start="99:17" pos:end="101:33"><if pos:start="99:17" pos:end="101:33">if <condition pos:start="99:20" pos:end="99:32">(<expr pos:start="99:21" pos:end="99:31"><name pos:start="99:21" pos:end="99:26">do_pty</name> <operator pos:start="99:28" pos:end="99:29">==</operator> <literal type="number" pos:start="99:31" pos:end="99:31">2</literal></expr>)</condition><block type="pseudo" pos:start="101:20" pos:end="101:33"><block_content pos:start="101:20" pos:end="101:33">

		   <expr_stmt pos:start="101:20" pos:end="101:33"><expr pos:start="101:20" pos:end="101:32"><call pos:start="101:20" pos:end="101:32"><name pos:start="101:20" pos:end="101:24">close</name><argument_list pos:start="101:25" pos:end="101:32">(<argument pos:start="101:26" pos:end="101:31"><expr pos:start="101:26" pos:end="101:31"><name pos:start="101:26" pos:end="101:31">master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<return pos:start="103:17" pos:end="103:25">return <expr pos:start="103:24" pos:end="103:24"><literal type="number" pos:start="103:24" pos:end="103:24">0</literal></expr>;</return>



	 <case pos:start="107:10" pos:end="107:16">case <expr pos:start="107:15" pos:end="107:15"><literal type="number" pos:start="107:15" pos:end="107:15">0</literal></expr>:</case>

		<comment type="block" pos:start="109:17" pos:end="109:37">/* Set the DISPLAY */</comment>

		<if_stmt pos:start="111:17" pos:end="172:0"><if pos:start="111:17" pos:end="123:17">if <condition pos:start="111:20" pos:end="111:32">(<expr pos:start="111:21" pos:end="111:31"><name pos:start="111:21" pos:end="111:26">do_pty</name> <operator pos:start="111:28" pos:end="111:29">==</operator> <literal type="number" pos:start="111:31" pos:end="111:31">2</literal></expr>)</condition> <block pos:start="111:34" pos:end="123:17">{<block_content pos:start="113:25" pos:end="122:0">

			<expr_stmt pos:start="113:25" pos:end="116:0"><expr pos:start="113:25" pos:end="113:44"><operator pos:start="113:25" pos:end="113:25">(</operator><name pos:start="113:26" pos:end="113:29">void</name><operator pos:start="113:30" pos:end="113:30">)</operator> <call pos:start="113:32" pos:end="113:44"><name pos:start="113:32" pos:end="113:36">close</name><argument_list pos:start="113:37" pos:end="113:44">(<argument pos:start="113:38" pos:end="113:43"><expr pos:start="113:38" pos:end="113:43"><name pos:start="113:38" pos:end="113:43">master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="115:1" pos:end="115:16">#<cpp:directive pos:start="115:2" pos:end="115:6">ifdef</cpp:directive> <name pos:start="115:8" pos:end="115:16">TIOCSCTTY</name></cpp:ifdef> <comment type="block" pos:start="115:18" pos:end="115:28">/* XXXXX */</comment>

			<expr_stmt pos:start="117:25" pos:end="117:40"><expr pos:start="117:25" pos:end="117:39"><operator pos:start="117:25" pos:end="117:25">(</operator><name pos:start="117:26" pos:end="117:29">void</name><operator pos:start="117:30" pos:end="117:30">)</operator> <call pos:start="117:32" pos:end="117:39"><name pos:start="117:32" pos:end="117:37">setsid</name><argument_list pos:start="117:38" pos:end="117:39">()</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="119:25" pos:end="122:0"><expr pos:start="119:25" pos:end="119:57"><call pos:start="119:25" pos:end="119:57"><name pos:start="119:25" pos:end="119:29">ioctl</name><argument_list pos:start="119:30" pos:end="119:57">(<argument pos:start="119:31" pos:end="119:31"><expr pos:start="119:31" pos:end="119:31"><name pos:start="119:31" pos:end="119:31">s</name></expr></argument>, <argument pos:start="119:34" pos:end="119:42"><expr pos:start="119:34" pos:end="119:42"><name pos:start="119:34" pos:end="119:42">TIOCSCTTY</name></expr></argument>, <argument pos:start="119:45" pos:end="119:56"><expr pos:start="119:45" pos:end="119:56"><operator pos:start="119:45" pos:end="119:45">(</operator><name pos:start="119:46" pos:end="119:49">char</name> <operator pos:start="119:51" pos:end="119:51">*</operator><operator pos:start="119:52" pos:end="119:52">)</operator><name pos:start="119:53" pos:end="119:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="121:1" pos:end="121:6">#<cpp:directive pos:start="121:2" pos:end="121:6">endif</cpp:directive></cpp:endif>

		</block_content>}</block></if> <else pos:start="123:19" pos:end="172:0">else <block pos:start="123:24" pos:end="172:0">{<block_content pos:start="125:25" pos:end="145:60">

			<expr_stmt pos:start="125:25" pos:end="125:75"><expr pos:start="125:25" pos:end="125:74"><call pos:start="125:25" pos:end="125:74"><name pos:start="125:25" pos:end="125:35">getsockname</name><argument_list pos:start="125:36" pos:end="125:74">(<argument pos:start="125:37" pos:end="125:37"><expr pos:start="125:37" pos:end="125:37"><name pos:start="125:37" pos:end="125:37">s</name></expr></argument>, <argument pos:start="125:40" pos:end="125:63"><expr pos:start="125:40" pos:end="125:63"><operator pos:start="125:40" pos:end="125:40">(</operator>struct <name pos:start="125:48" pos:end="125:55">sockaddr</name> <operator pos:start="125:57" pos:end="125:57">*</operator><operator pos:start="125:58" pos:end="125:58">)</operator><operator pos:start="125:59" pos:end="125:59">&amp;</operator><name pos:start="125:60" pos:end="125:63">addr</name></expr></argument>, <argument pos:start="125:66" pos:end="125:73"><expr pos:start="125:66" pos:end="125:73"><operator pos:start="125:66" pos:end="125:66">&amp;</operator><name pos:start="125:67" pos:end="125:73">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="127:25" pos:end="127:33"><expr pos:start="127:25" pos:end="127:32"><call pos:start="127:25" pos:end="127:32"><name pos:start="127:25" pos:end="127:29">close</name><argument_list pos:start="127:30" pos:end="127:32">(<argument pos:start="127:31" pos:end="127:31"><expr pos:start="127:31" pos:end="127:31"><name pos:start="127:31" pos:end="127:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block" pos:start="129:25" pos:end="135:27">/*

			 * Connect to the socket

			 * XXX If any of these fail, we're in trouble!

	 		 */</comment>

			<expr_stmt pos:start="137:25" pos:end="137:60"><expr pos:start="137:25" pos:end="137:59"><name pos:start="137:25" pos:end="137:25">s</name> <operator pos:start="137:27" pos:end="137:27">=</operator> <call pos:start="137:29" pos:end="137:59"><name pos:start="137:29" pos:end="137:34">socket</name><argument_list pos:start="137:35" pos:end="137:59">(<argument pos:start="137:36" pos:end="137:42"><expr pos:start="137:36" pos:end="137:42"><name pos:start="137:36" pos:end="137:42">AF_INET</name></expr></argument>, <argument pos:start="137:45" pos:end="137:55"><expr pos:start="137:45" pos:end="137:55"><name pos:start="137:45" pos:end="137:55">SOCK_STREAM</name></expr></argument>, <argument pos:start="137:58" pos:end="137:58"><expr pos:start="137:58" pos:end="137:58"><literal type="number" pos:start="137:58" pos:end="137:58">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="139:25" pos:end="139:54"><expr pos:start="139:25" pos:end="139:53"><name pos:start="139:25" pos:end="139:37"><name pos:start="139:25" pos:end="139:28">addr</name><operator pos:start="139:29" pos:end="139:29">.</operator><name pos:start="139:30" pos:end="139:37">sin_addr</name></name> <operator pos:start="139:39" pos:end="139:39">=</operator> <name pos:start="139:41" pos:end="139:53">loopback_addr</name></expr>;</expr_stmt>

                        <do pos:start="141:25" pos:end="145:60">do <block pos:start="141:28" pos:end="145:25">{<block_content pos:start="143:29" pos:end="143:80">

                            <expr_stmt pos:start="143:29" pos:end="143:80"><expr pos:start="143:29" pos:end="143:79"><name pos:start="143:29" pos:end="143:31">ret</name> <operator pos:start="143:33" pos:end="143:33">=</operator> <call pos:start="143:35" pos:end="143:79"><name pos:start="143:35" pos:end="143:41">connect</name><argument_list pos:start="143:42" pos:end="143:79">(<argument pos:start="143:43" pos:end="143:43"><expr pos:start="143:43" pos:end="143:43"><name pos:start="143:43" pos:end="143:43">s</name></expr></argument>, <argument pos:start="143:46" pos:end="143:69"><expr pos:start="143:46" pos:end="143:69"><operator pos:start="143:46" pos:end="143:46">(</operator>struct <name pos:start="143:54" pos:end="143:61">sockaddr</name> <operator pos:start="143:63" pos:end="143:63">*</operator><operator pos:start="143:64" pos:end="143:64">)</operator><operator pos:start="143:65" pos:end="143:65">&amp;</operator><name pos:start="143:66" pos:end="143:69">addr</name></expr></argument>, <argument pos:start="143:72" pos:end="143:78"><expr pos:start="143:72" pos:end="143:78"><name pos:start="143:72" pos:end="143:78">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block> while <condition pos:start="145:33" pos:end="145:59">(<expr pos:start="145:34" pos:end="145:58"><name pos:start="145:34" pos:end="145:36">ret</name> <operator pos:start="145:38" pos:end="145:38">&lt;</operator> <literal type="number" pos:start="145:40" pos:end="145:40">0</literal> <operator pos:start="145:42" pos:end="145:43">&amp;&amp;</operator> <name pos:start="145:45" pos:end="145:49">errno</name> <operator pos:start="145:51" pos:end="145:52">==</operator> <name pos:start="145:54" pos:end="145:58">EINTR</name></expr>)</condition>;</do>

		</block_content>}</block></else></if_stmt>



<cpp:if pos:start="151:1" pos:end="151:5">#<cpp:directive pos:start="151:2" pos:end="151:3">if</cpp:directive> <expr pos:start="151:5" pos:end="151:5"><literal type="number" pos:start="151:5" pos:end="151:5">0</literal></expr></cpp:if>

		if (x_port &gt;= 0) {

<cpp:ifdef pos:start="155:1" pos:end="155:18">#<cpp:directive pos:start="155:2" pos:end="155:6">ifdef</cpp:directive> <name pos:start="155:8" pos:end="155:18">HAVE_SETENV</name></cpp:ifdef>

			sprintf(buff, "%s:%d.%d", inet_ntoa(our_addr), x_port, x_screen);

			setenv("DISPLAY", buff, 1);

<cpp:else pos:start="161:1" pos:end="161:5">#<cpp:directive pos:start="161:2" pos:end="161:5">else</cpp:directive></cpp:else>

			sprintf(buff, "DISPLAY=%s:%d.%d", inet_ntoa(our_addr), x_port, x_screen);

			putenv(buff);

<cpp:endif pos:start="167:1" pos:end="167:6">#<cpp:directive pos:start="167:2" pos:end="167:6">endif</cpp:directive></cpp:endif>

		}

<cpp:endif pos:start="171:1" pos:end="171:6">#<cpp:directive pos:start="171:2" pos:end="171:6">endif</cpp:directive></cpp:endif>

		<expr_stmt pos:start="173:17" pos:end="173:27"><expr pos:start="173:17" pos:end="173:26"><call pos:start="173:17" pos:end="173:26"><name pos:start="173:17" pos:end="173:20">dup2</name><argument_list pos:start="173:21" pos:end="173:26">(<argument pos:start="173:22" pos:end="173:22"><expr pos:start="173:22" pos:end="173:22"><name pos:start="173:22" pos:end="173:22">s</name></expr></argument>, <argument pos:start="173:25" pos:end="173:25"><expr pos:start="173:25" pos:end="173:25"><literal type="number" pos:start="173:25" pos:end="173:25">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="175:17" pos:end="175:27"><expr pos:start="175:17" pos:end="175:26"><call pos:start="175:17" pos:end="175:26"><name pos:start="175:17" pos:end="175:20">dup2</name><argument_list pos:start="175:21" pos:end="175:26">(<argument pos:start="175:22" pos:end="175:22"><expr pos:start="175:22" pos:end="175:22"><name pos:start="175:22" pos:end="175:22">s</name></expr></argument>, <argument pos:start="175:25" pos:end="175:25"><expr pos:start="175:25" pos:end="175:25"><literal type="number" pos:start="175:25" pos:end="175:25">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt pos:start="177:17" pos:end="177:27"><expr pos:start="177:17" pos:end="177:26"><call pos:start="177:17" pos:end="177:26"><name pos:start="177:17" pos:end="177:20">dup2</name><argument_list pos:start="177:21" pos:end="177:26">(<argument pos:start="177:22" pos:end="177:22"><expr pos:start="177:22" pos:end="177:22"><name pos:start="177:22" pos:end="177:22">s</name></expr></argument>, <argument pos:start="177:25" pos:end="177:25"><expr pos:start="177:25" pos:end="177:25"><literal type="number" pos:start="177:25" pos:end="177:25">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for pos:start="179:17" pos:end="181:28">for <control pos:start="179:21" pos:end="179:58">(<init pos:start="179:22" pos:end="179:45"><expr pos:start="179:22" pos:end="179:44"><name pos:start="179:22" pos:end="179:22">s</name> <operator pos:start="179:24" pos:end="179:24">=</operator> <call pos:start="179:26" pos:end="179:40"><name pos:start="179:26" pos:end="179:38">getdtablesize</name><argument_list pos:start="179:39" pos:end="179:40">()</argument_list></call> <operator pos:start="179:42" pos:end="179:42">-</operator> <literal type="number" pos:start="179:44" pos:end="179:44">1</literal></expr>;</init> <condition pos:start="179:47" pos:end="179:53"><expr pos:start="179:47" pos:end="179:52"><name pos:start="179:47" pos:end="179:47">s</name> <operator pos:start="179:49" pos:end="179:50">&gt;=</operator> <literal type="number" pos:start="179:52" pos:end="179:52">3</literal></expr>;</condition> <incr pos:start="179:55" pos:end="179:57"><expr pos:start="179:55" pos:end="179:57"><name pos:start="179:55" pos:end="179:55">s</name><operator pos:start="179:56" pos:end="179:57">--</operator></expr></incr>)</control><block type="pseudo" pos:start="181:20" pos:end="181:28"><block_content pos:start="181:20" pos:end="181:28">

		   <expr_stmt pos:start="181:20" pos:end="181:28"><expr pos:start="181:20" pos:end="181:27"><call pos:start="181:20" pos:end="181:27"><name pos:start="181:20" pos:end="181:24">close</name><argument_list pos:start="181:25" pos:end="181:27">(<argument pos:start="181:26" pos:end="181:26"><expr pos:start="181:26" pos:end="181:26"><name pos:start="181:26" pos:end="181:26">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



		<expr_stmt pos:start="185:17" pos:end="185:22"><expr pos:start="185:17" pos:end="185:21"><name pos:start="185:17" pos:end="185:17">i</name> <operator pos:start="185:19" pos:end="185:19">=</operator> <literal type="number" pos:start="185:21" pos:end="185:21">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="187:17" pos:end="187:34"><expr pos:start="187:17" pos:end="187:33"><name pos:start="187:17" pos:end="187:20">bptr</name> <operator pos:start="187:22" pos:end="187:22">=</operator> <call pos:start="187:24" pos:end="187:33"><name pos:start="187:24" pos:end="187:29">strdup</name><argument_list pos:start="187:30" pos:end="187:33">(<argument pos:start="187:31" pos:end="187:32"><expr pos:start="187:31" pos:end="187:32"><name pos:start="187:31" pos:end="187:32">ex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="187:36" pos:end="187:63">/* No need to free() this */</comment>

		<if_stmt pos:start="189:17" pos:end="217:31"><if pos:start="189:17" pos:end="199:17">if <condition pos:start="189:20" pos:end="189:32">(<expr pos:start="189:21" pos:end="189:31"><name pos:start="189:21" pos:end="189:26">do_pty</name> <operator pos:start="189:28" pos:end="189:29">==</operator> <literal type="number" pos:start="189:31" pos:end="189:31">1</literal></expr>)</condition> <block pos:start="189:34" pos:end="199:17">{<block_content pos:start="193:25" pos:end="197:41">

			<comment type="block" pos:start="191:25" pos:end="191:54">/* Setup "slirp.telnetd -x" */</comment>

			<expr_stmt pos:start="193:25" pos:end="193:52"><expr pos:start="193:25" pos:end="193:51"><name pos:start="193:25" pos:end="193:33"><name pos:start="193:25" pos:end="193:28">argv</name><index pos:start="193:29" pos:end="193:33">[<expr pos:start="193:30" pos:end="193:32"><name pos:start="193:30" pos:end="193:30">i</name><operator pos:start="193:31" pos:end="193:32">++</operator></expr>]</index></name> <operator pos:start="193:35" pos:end="193:35">=</operator> <literal type="string" pos:start="193:37" pos:end="193:51">"slirp.telnetd"</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="195:25" pos:end="195:41"><expr pos:start="195:25" pos:end="195:40"><name pos:start="195:25" pos:end="195:33"><name pos:start="195:25" pos:end="195:28">argv</name><index pos:start="195:29" pos:end="195:33">[<expr pos:start="195:30" pos:end="195:32"><name pos:start="195:30" pos:end="195:30">i</name><operator pos:start="195:31" pos:end="195:32">++</operator></expr>]</index></name> <operator pos:start="195:35" pos:end="195:35">=</operator> <literal type="string" pos:start="195:37" pos:end="195:40">"-x"</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="197:25" pos:end="197:41"><expr pos:start="197:25" pos:end="197:40"><name pos:start="197:25" pos:end="197:33"><name pos:start="197:25" pos:end="197:28">argv</name><index pos:start="197:29" pos:end="197:33">[<expr pos:start="197:30" pos:end="197:32"><name pos:start="197:30" pos:end="197:30">i</name><operator pos:start="197:31" pos:end="197:32">++</operator></expr>]</index></name> <operator pos:start="197:35" pos:end="197:35">=</operator> <name pos:start="197:37" pos:end="197:40">bptr</name></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="199:19" pos:end="217:31">else<block type="pseudo" pos:start="201:20" pos:end="217:31"><block_content pos:start="201:20" pos:end="217:31">

		   <do pos:start="201:20" pos:end="217:31">do <block pos:start="201:23" pos:end="217:20">{<block_content pos:start="205:25" pos:end="215:51">

			<comment type="block" pos:start="203:25" pos:end="203:59">/* Change the string into argv[] */</comment>

			<expr_stmt pos:start="205:25" pos:end="205:38"><expr pos:start="205:25" pos:end="205:37"><name pos:start="205:25" pos:end="205:30">curarg</name> <operator pos:start="205:32" pos:end="205:32">=</operator> <name pos:start="205:34" pos:end="205:37">bptr</name></expr>;</expr_stmt>

			<while pos:start="207:25" pos:end="209:34">while <condition pos:start="207:31" pos:end="207:64">(<expr pos:start="207:32" pos:end="207:63"><operator pos:start="207:32" pos:end="207:32">*</operator><name pos:start="207:33" pos:end="207:36">bptr</name> <operator pos:start="207:38" pos:end="207:39">!=</operator> <literal type="char" pos:start="207:41" pos:end="207:43">' '</literal> <operator pos:start="207:45" pos:end="207:46">&amp;&amp;</operator> <operator pos:start="207:48" pos:end="207:48">*</operator><name pos:start="207:49" pos:end="207:52">bptr</name> <operator pos:start="207:54" pos:end="207:55">!=</operator> <operator pos:start="207:57" pos:end="207:57">(</operator><name pos:start="207:58" pos:end="207:61">char</name><operator pos:start="207:62" pos:end="207:62">)</operator><literal type="number" pos:start="207:63" pos:end="207:63">0</literal></expr>)</condition><block type="pseudo" pos:start="209:28" pos:end="209:34"><block_content pos:start="209:28" pos:end="209:34">

			   <expr_stmt pos:start="209:28" pos:end="209:34"><expr pos:start="209:28" pos:end="209:33"><name pos:start="209:28" pos:end="209:31">bptr</name><operator pos:start="209:32" pos:end="209:33">++</operator></expr>;</expr_stmt></block_content></block></while>

			<expr_stmt pos:start="211:25" pos:end="211:34"><expr pos:start="211:25" pos:end="211:33"><name pos:start="211:25" pos:end="211:25">c</name> <operator pos:start="211:27" pos:end="211:27">=</operator> <operator pos:start="211:29" pos:end="211:29">*</operator><name pos:start="211:30" pos:end="211:33">bptr</name></expr>;</expr_stmt>

			<expr_stmt pos:start="213:25" pos:end="213:42"><expr pos:start="213:25" pos:end="213:41"><operator pos:start="213:25" pos:end="213:25">*</operator><name pos:start="213:26" pos:end="213:29">bptr</name><operator pos:start="213:30" pos:end="213:31">++</operator> <operator pos:start="213:33" pos:end="213:33">=</operator> <operator pos:start="213:35" pos:end="213:35">(</operator><name pos:start="213:36" pos:end="213:39">char</name><operator pos:start="213:40" pos:end="213:40">)</operator><literal type="number" pos:start="213:41" pos:end="213:41">0</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="215:25" pos:end="215:51"><expr pos:start="215:25" pos:end="215:50"><name pos:start="215:25" pos:end="215:33"><name pos:start="215:25" pos:end="215:28">argv</name><index pos:start="215:29" pos:end="215:33">[<expr pos:start="215:30" pos:end="215:32"><name pos:start="215:30" pos:end="215:30">i</name><operator pos:start="215:31" pos:end="215:32">++</operator></expr>]</index></name> <operator pos:start="215:35" pos:end="215:35">=</operator> <call pos:start="215:37" pos:end="215:50"><name pos:start="215:37" pos:end="215:42">strdup</name><argument_list pos:start="215:43" pos:end="215:50">(<argument pos:start="215:44" pos:end="215:49"><expr pos:start="215:44" pos:end="215:49"><name pos:start="215:44" pos:end="215:49">curarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		   </block_content>}</block> while <condition pos:start="217:28" pos:end="217:30">(<expr pos:start="217:29" pos:end="217:29"><name pos:start="217:29" pos:end="217:29">c</name></expr>)</condition>;</do></block_content></block></else></if_stmt>



		<expr_stmt pos:start="221:17" pos:end="221:28"><expr pos:start="221:17" pos:end="221:27"><name pos:start="221:17" pos:end="221:23"><name pos:start="221:17" pos:end="221:20">argv</name><index pos:start="221:21" pos:end="221:23">[<expr pos:start="221:22" pos:end="221:22"><name pos:start="221:22" pos:end="221:22">i</name></expr>]</index></name> <operator pos:start="221:25" pos:end="221:25">=</operator> <literal type="number" pos:start="221:27" pos:end="221:27">0</literal></expr>;</expr_stmt>

		<expr_stmt pos:start="223:17" pos:end="223:38"><expr pos:start="223:17" pos:end="223:37"><call pos:start="223:17" pos:end="223:37"><name pos:start="223:17" pos:end="223:22">execvp</name><argument_list pos:start="223:23" pos:end="223:37">(<argument pos:start="223:24" pos:end="223:30"><expr pos:start="223:24" pos:end="223:30"><name pos:start="223:24" pos:end="223:30"><name pos:start="223:24" pos:end="223:27">argv</name><index pos:start="223:28" pos:end="223:30">[<expr pos:start="223:29" pos:end="223:29"><literal type="number" pos:start="223:29" pos:end="223:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="223:33" pos:end="223:36"><expr pos:start="223:33" pos:end="223:36"><name pos:start="223:33" pos:end="223:36">argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		<comment type="block" pos:start="227:17" pos:end="227:60">/* Ooops, failed, let's tell the user why */</comment>

		  <block pos:start="229:19" pos:end="241:19">{<block_content pos:start="231:27" pos:end="239:57">

			  <decl_stmt pos:start="231:27" pos:end="231:41"><decl pos:start="231:27" pos:end="231:40"><type pos:start="231:27" pos:end="231:30"><name pos:start="231:27" pos:end="231:30">char</name></type> <name pos:start="231:32" pos:end="231:40"><name pos:start="231:32" pos:end="231:35">buff</name><index pos:start="231:36" pos:end="231:40">[<expr pos:start="231:37" pos:end="231:39"><literal type="number" pos:start="231:37" pos:end="231:39">256</literal></expr>]</index></name></decl>;</decl_stmt>



			  <expr_stmt pos:start="235:27" pos:end="237:60"><expr pos:start="235:27" pos:end="237:59"><call pos:start="235:27" pos:end="237:59"><name pos:start="235:27" pos:end="235:33">sprintf</name><argument_list pos:start="235:34" pos:end="237:59">(<argument pos:start="235:35" pos:end="235:38"><expr pos:start="235:35" pos:end="235:38"><name pos:start="235:35" pos:end="235:38">buff</name></expr></argument>, <argument pos:start="235:41" pos:end="235:74"><expr pos:start="235:41" pos:end="235:74"><literal type="string" pos:start="235:41" pos:end="235:74">"Error: execvp of %s failed: %s\n"</literal></expr></argument>,

				  <argument pos:start="237:35" pos:end="237:41"><expr pos:start="237:35" pos:end="237:41"><name pos:start="237:35" pos:end="237:41"><name pos:start="237:35" pos:end="237:38">argv</name><index pos:start="237:39" pos:end="237:41">[<expr pos:start="237:40" pos:end="237:40"><literal type="number" pos:start="237:40" pos:end="237:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="237:44" pos:end="237:58"><expr pos:start="237:44" pos:end="237:58"><call pos:start="237:44" pos:end="237:58"><name pos:start="237:44" pos:end="237:51">strerror</name><argument_list pos:start="237:52" pos:end="237:58">(<argument pos:start="237:53" pos:end="237:57"><expr pos:start="237:53" pos:end="237:57"><name pos:start="237:53" pos:end="237:57">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			  <expr_stmt pos:start="239:27" pos:end="239:57"><expr pos:start="239:27" pos:end="239:56"><call pos:start="239:27" pos:end="239:56"><name pos:start="239:27" pos:end="239:31">write</name><argument_list pos:start="239:32" pos:end="239:56">(<argument pos:start="239:33" pos:end="239:33"><expr pos:start="239:33" pos:end="239:33"><literal type="number" pos:start="239:33" pos:end="239:33">2</literal></expr></argument>, <argument pos:start="239:36" pos:end="239:39"><expr pos:start="239:36" pos:end="239:39"><name pos:start="239:36" pos:end="239:39">buff</name></expr></argument>, <argument pos:start="239:42" pos:end="239:55"><expr pos:start="239:42" pos:end="239:55"><call pos:start="239:42" pos:end="239:53"><name pos:start="239:42" pos:end="239:47">strlen</name><argument_list pos:start="239:48" pos:end="239:53">(<argument pos:start="239:49" pos:end="239:52"><expr pos:start="239:49" pos:end="239:52"><name pos:start="239:49" pos:end="239:52">buff</name></expr></argument>)</argument_list></call><operator pos:start="239:54" pos:end="239:54">+</operator><literal type="number" pos:start="239:55" pos:end="239:55">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  </block_content>}</block>

		<expr_stmt pos:start="243:17" pos:end="243:25"><expr pos:start="243:17" pos:end="243:24"><call pos:start="243:17" pos:end="243:24"><name pos:start="243:17" pos:end="243:21">close</name><argument_list pos:start="243:22" pos:end="243:24">(<argument pos:start="243:23" pos:end="243:23"><expr pos:start="243:23" pos:end="243:23"><literal type="number" pos:start="243:23" pos:end="243:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="243:27" pos:end="243:35"><expr pos:start="243:27" pos:end="243:34"><call pos:start="243:27" pos:end="243:34"><name pos:start="243:27" pos:end="243:31">close</name><argument_list pos:start="243:32" pos:end="243:34">(<argument pos:start="243:33" pos:end="243:33"><expr pos:start="243:33" pos:end="243:33"><literal type="number" pos:start="243:33" pos:end="243:33">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt pos:start="243:37" pos:end="243:45"><expr pos:start="243:37" pos:end="243:44"><call pos:start="243:37" pos:end="243:44"><name pos:start="243:37" pos:end="243:41">close</name><argument_list pos:start="243:42" pos:end="243:44">(<argument pos:start="243:43" pos:end="243:43"><expr pos:start="243:43" pos:end="243:43"><literal type="number" pos:start="243:43" pos:end="243:43">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="243:47" pos:end="243:55">/* XXX */</comment>

		<expr_stmt pos:start="245:17" pos:end="245:24"><expr pos:start="245:17" pos:end="245:23"><call pos:start="245:17" pos:end="245:23"><name pos:start="245:17" pos:end="245:20">exit</name><argument_list pos:start="245:21" pos:end="245:23">(<argument pos:start="245:22" pos:end="245:22"><expr pos:start="245:22" pos:end="245:22"><literal type="number" pos:start="245:22" pos:end="245:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	 <default pos:start="249:10" pos:end="249:17">default:</default>

		<if_stmt pos:start="251:17" pos:end="289:17"><if pos:start="251:17" pos:end="257:17">if <condition pos:start="251:20" pos:end="251:32">(<expr pos:start="251:21" pos:end="251:31"><name pos:start="251:21" pos:end="251:26">do_pty</name> <operator pos:start="251:28" pos:end="251:29">==</operator> <literal type="number" pos:start="251:31" pos:end="251:31">2</literal></expr>)</condition> <block pos:start="251:34" pos:end="257:17">{<block_content pos:start="253:25" pos:end="255:39">

			<expr_stmt pos:start="253:25" pos:end="253:33"><expr pos:start="253:25" pos:end="253:32"><call pos:start="253:25" pos:end="253:32"><name pos:start="253:25" pos:end="253:29">close</name><argument_list pos:start="253:30" pos:end="253:32">(<argument pos:start="253:31" pos:end="253:31"><expr pos:start="253:31" pos:end="253:31"><name pos:start="253:31" pos:end="253:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="255:25" pos:end="255:39"><expr pos:start="255:25" pos:end="255:38"><name pos:start="255:25" pos:end="255:29"><name pos:start="255:25" pos:end="255:26">so</name><operator pos:start="255:27" pos:end="255:28">-&gt;</operator><name pos:start="255:29" pos:end="255:29">s</name></name> <operator pos:start="255:31" pos:end="255:31">=</operator> <name pos:start="255:33" pos:end="255:38">master</name></expr>;</expr_stmt>

		</block_content>}</block></if> <else pos:start="257:19" pos:end="289:17">else <block pos:start="257:24" pos:end="289:17">{<block_content pos:start="273:25" pos:end="287:91">

			<comment type="block" pos:start="259:25" pos:end="271:27">/*

			 * XXX this could block us...

			 * XXX Should set a timer here, and if accept() doesn't

		 	 * return after X seconds, declare it a failure

		 	 * The only reason this will block forever is if socket()

		 	 * of connect() fail in the child process

		 	 */</comment>

                        <do pos:start="273:25" pos:end="277:62">do <block pos:start="273:28" pos:end="277:25">{<block_content pos:start="275:29" pos:end="275:82">

                            <expr_stmt pos:start="275:29" pos:end="275:82"><expr pos:start="275:29" pos:end="275:81"><name pos:start="275:29" pos:end="275:33"><name pos:start="275:29" pos:end="275:30">so</name><operator pos:start="275:31" pos:end="275:32">-&gt;</operator><name pos:start="275:33" pos:end="275:33">s</name></name> <operator pos:start="275:35" pos:end="275:35">=</operator> <call pos:start="275:37" pos:end="275:81"><name pos:start="275:37" pos:end="275:42">accept</name><argument_list pos:start="275:43" pos:end="275:81">(<argument pos:start="275:44" pos:end="275:44"><expr pos:start="275:44" pos:end="275:44"><name pos:start="275:44" pos:end="275:44">s</name></expr></argument>, <argument pos:start="275:47" pos:end="275:70"><expr pos:start="275:47" pos:end="275:70"><operator pos:start="275:47" pos:end="275:47">(</operator>struct <name pos:start="275:55" pos:end="275:62">sockaddr</name> <operator pos:start="275:64" pos:end="275:64">*</operator><operator pos:start="275:65" pos:end="275:65">)</operator><operator pos:start="275:66" pos:end="275:66">&amp;</operator><name pos:start="275:67" pos:end="275:70">addr</name></expr></argument>, <argument pos:start="275:73" pos:end="275:80"><expr pos:start="275:73" pos:end="275:80"><operator pos:start="275:73" pos:end="275:73">&amp;</operator><name pos:start="275:74" pos:end="275:80">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block> while <condition pos:start="277:33" pos:end="277:61">(<expr pos:start="277:34" pos:end="277:60"><name pos:start="277:34" pos:end="277:38"><name pos:start="277:34" pos:end="277:35">so</name><operator pos:start="277:36" pos:end="277:37">-&gt;</operator><name pos:start="277:38" pos:end="277:38">s</name></name> <operator pos:start="277:40" pos:end="277:40">&lt;</operator> <literal type="number" pos:start="277:42" pos:end="277:42">0</literal> <operator pos:start="277:44" pos:end="277:45">&amp;&amp;</operator> <name pos:start="277:47" pos:end="277:51">errno</name> <operator pos:start="277:53" pos:end="277:54">==</operator> <name pos:start="277:56" pos:end="277:60">EINTR</name></expr>)</condition>;</do>

                        <expr_stmt pos:start="279:25" pos:end="279:39"><expr pos:start="279:25" pos:end="279:38"><call pos:start="279:25" pos:end="279:38"><name pos:start="279:25" pos:end="279:35">closesocket</name><argument_list pos:start="279:36" pos:end="279:38">(<argument pos:start="279:37" pos:end="279:37"><expr pos:start="279:37" pos:end="279:37"><name pos:start="279:37" pos:end="279:37">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="281:25" pos:end="281:32"><expr pos:start="281:25" pos:end="281:31"><name pos:start="281:25" pos:end="281:27">opt</name> <operator pos:start="281:29" pos:end="281:29">=</operator> <literal type="number" pos:start="281:31" pos:end="281:31">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="283:25" pos:end="283:91"><expr pos:start="283:25" pos:end="283:90"><call pos:start="283:25" pos:end="283:90"><name pos:start="283:25" pos:end="283:34">setsockopt</name><argument_list pos:start="283:35" pos:end="283:90">(<argument pos:start="283:36" pos:end="283:40"><expr pos:start="283:36" pos:end="283:40"><name pos:start="283:36" pos:end="283:40"><name pos:start="283:36" pos:end="283:37">so</name><operator pos:start="283:38" pos:end="283:39">-&gt;</operator><name pos:start="283:40" pos:end="283:40">s</name></name></expr></argument>,<argument pos:start="283:42" pos:end="283:51"><expr pos:start="283:42" pos:end="283:51"><name pos:start="283:42" pos:end="283:51">SOL_SOCKET</name></expr></argument>,<argument pos:start="283:53" pos:end="283:64"><expr pos:start="283:53" pos:end="283:64"><name pos:start="283:53" pos:end="283:64">SO_REUSEADDR</name></expr></argument>,<argument pos:start="283:66" pos:end="283:77"><expr pos:start="283:66" pos:end="283:77"><operator pos:start="283:66" pos:end="283:66">(</operator><name pos:start="283:67" pos:end="283:70">char</name> <operator pos:start="283:72" pos:end="283:72">*</operator><operator pos:start="283:73" pos:end="283:73">)</operator><operator pos:start="283:74" pos:end="283:74">&amp;</operator><name pos:start="283:75" pos:end="283:77">opt</name></expr></argument>,<argument pos:start="283:79" pos:end="283:89"><expr pos:start="283:79" pos:end="283:89"><sizeof pos:start="283:79" pos:end="283:89">sizeof<argument_list pos:start="283:85" pos:end="283:89">(<argument pos:start="283:86" pos:end="283:88"><expr pos:start="283:86" pos:end="283:88"><name pos:start="283:86" pos:end="283:88">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="285:25" pos:end="285:32"><expr pos:start="285:25" pos:end="285:31"><name pos:start="285:25" pos:end="285:27">opt</name> <operator pos:start="285:29" pos:end="285:29">=</operator> <literal type="number" pos:start="285:31" pos:end="285:31">1</literal></expr>;</expr_stmt>

			<expr_stmt pos:start="287:25" pos:end="287:91"><expr pos:start="287:25" pos:end="287:90"><call pos:start="287:25" pos:end="287:90"><name pos:start="287:25" pos:end="287:34">setsockopt</name><argument_list pos:start="287:35" pos:end="287:90">(<argument pos:start="287:36" pos:end="287:40"><expr pos:start="287:36" pos:end="287:40"><name pos:start="287:36" pos:end="287:40"><name pos:start="287:36" pos:end="287:37">so</name><operator pos:start="287:38" pos:end="287:39">-&gt;</operator><name pos:start="287:40" pos:end="287:40">s</name></name></expr></argument>,<argument pos:start="287:42" pos:end="287:51"><expr pos:start="287:42" pos:end="287:51"><name pos:start="287:42" pos:end="287:51">SOL_SOCKET</name></expr></argument>,<argument pos:start="287:53" pos:end="287:64"><expr pos:start="287:53" pos:end="287:64"><name pos:start="287:53" pos:end="287:64">SO_OOBINLINE</name></expr></argument>,<argument pos:start="287:66" pos:end="287:77"><expr pos:start="287:66" pos:end="287:77"><operator pos:start="287:66" pos:end="287:66">(</operator><name pos:start="287:67" pos:end="287:70">char</name> <operator pos:start="287:72" pos:end="287:72">*</operator><operator pos:start="287:73" pos:end="287:73">)</operator><operator pos:start="287:74" pos:end="287:74">&amp;</operator><name pos:start="287:75" pos:end="287:77">opt</name></expr></argument>,<argument pos:start="287:79" pos:end="287:89"><expr pos:start="287:79" pos:end="287:89"><sizeof pos:start="287:79" pos:end="287:89">sizeof<argument_list pos:start="287:85" pos:end="287:89">(<argument pos:start="287:86" pos:end="287:88"><expr pos:start="287:86" pos:end="287:88"><name pos:start="287:86" pos:end="287:88">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></else></if_stmt>

		<expr_stmt pos:start="291:17" pos:end="291:35"><expr pos:start="291:17" pos:end="291:34"><call pos:start="291:17" pos:end="291:34"><name pos:start="291:17" pos:end="291:27">fd_nonblock</name><argument_list pos:start="291:28" pos:end="291:34">(<argument pos:start="291:29" pos:end="291:33"><expr pos:start="291:29" pos:end="291:33"><name pos:start="291:29" pos:end="291:33"><name pos:start="291:29" pos:end="291:30">so</name><operator pos:start="291:31" pos:end="291:32">-&gt;</operator><name pos:start="291:33" pos:end="291:33">s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



		<comment type="block" pos:start="295:17" pos:end="295:51">/* Append the telnet options now */</comment>

		<if_stmt pos:start="297:17" pos:end="303:17"><if pos:start="297:17" pos:end="303:17">if <condition pos:start="297:20" pos:end="297:49">(<expr pos:start="297:21" pos:end="297:48"><name pos:start="297:21" pos:end="297:28"><name pos:start="297:21" pos:end="297:22">so</name><operator pos:start="297:23" pos:end="297:24">-&gt;</operator><name pos:start="297:25" pos:end="297:28">so_m</name></name> <operator pos:start="297:30" pos:end="297:31">!=</operator> <literal type="number" pos:start="297:33" pos:end="297:33">0</literal> <operator pos:start="297:35" pos:end="297:36">&amp;&amp;</operator> <name pos:start="297:38" pos:end="297:43">do_pty</name> <operator pos:start="297:45" pos:end="297:46">==</operator> <literal type="number" pos:start="297:48" pos:end="297:48">1</literal></expr>)</condition>  <block pos:start="297:52" pos:end="303:17">{<block_content pos:start="299:25" pos:end="301:37">

			<expr_stmt pos:start="299:25" pos:end="299:47"><expr pos:start="299:25" pos:end="299:46"><call pos:start="299:25" pos:end="299:46"><name pos:start="299:25" pos:end="299:32">sbappend</name><argument_list pos:start="299:33" pos:end="299:46">(<argument pos:start="299:34" pos:end="299:35"><expr pos:start="299:34" pos:end="299:35"><name pos:start="299:34" pos:end="299:35">so</name></expr></argument>, <argument pos:start="299:38" pos:end="299:45"><expr pos:start="299:38" pos:end="299:45"><name pos:start="299:38" pos:end="299:45"><name pos:start="299:38" pos:end="299:39">so</name><operator pos:start="299:40" pos:end="299:41">-&gt;</operator><name pos:start="299:42" pos:end="299:45">so_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt pos:start="301:25" pos:end="301:37"><expr pos:start="301:25" pos:end="301:36"><name pos:start="301:25" pos:end="301:32"><name pos:start="301:25" pos:end="301:26">so</name><operator pos:start="301:27" pos:end="301:28">-&gt;</operator><name pos:start="301:29" pos:end="301:32">so_m</name></name> <operator pos:start="301:34" pos:end="301:34">=</operator> <literal type="number" pos:start="301:36" pos:end="301:36">0</literal></expr>;</expr_stmt>

		</block_content>}</block></if></if_stmt>



		<return pos:start="307:17" pos:end="307:25">return <expr pos:start="307:24" pos:end="307:24"><literal type="number" pos:start="307:24" pos:end="307:24">1</literal></expr>;</return>

	</block_content>}</block></switch>

</block_content>}</block>
</unit>
