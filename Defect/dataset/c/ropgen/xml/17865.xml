<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17865.c" pos:tabs="8"><function pos:start="1:1" pos:end="47:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">ahci_test_identify</name><parameter_list pos:start="1:31" pos:end="1:48">(<parameter pos:start="1:32" pos:end="1:47"><decl pos:start="1:32" pos:end="1:47"><type pos:start="1:32" pos:end="1:43"><name pos:start="1:32" pos:end="1:41">AHCIQState</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">ahci</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="47:1">{<block_content pos:start="3:5" pos:end="46:31">
    <decl_stmt pos:start="3:5" pos:end="3:23"><decl pos:start="3:5" pos:end="3:22"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:12">uint16_t</name></type> <name pos:start="3:14" pos:end="3:22"><name pos:start="3:14" pos:end="3:17">buff</name><index pos:start="3:18" pos:end="3:22">[<expr pos:start="3:19" pos:end="3:21"><literal type="number" pos:start="3:19" pos:end="3:21">256</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:16"><decl pos:start="4:5" pos:end="4:15"><type pos:start="4:5" pos:end="4:12"><name pos:start="4:5" pos:end="4:12">unsigned</name></type> <name pos:start="4:14" pos:end="4:15">px</name></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rc</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:23"><decl pos:start="6:5" pos:end="6:22"><type pos:start="6:5" pos:end="6:12"><name pos:start="6:5" pos:end="6:12">uint16_t</name></type> <name pos:start="6:14" pos:end="6:22">sect_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:16">size_t</name></type> <name pos:start="7:18" pos:end="7:25">buffsize</name> <init pos:start="7:27" pos:end="7:31">= <expr pos:start="7:29" pos:end="7:31"><literal type="number" pos:start="7:29" pos:end="7:31">512</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="8:5" pos:end="8:27"><expr pos:start="8:5" pos:end="8:26"><call pos:start="8:5" pos:end="8:26"><name pos:start="8:5" pos:end="8:12">g_assert</name><argument_list pos:start="8:13" pos:end="8:26">(<argument pos:start="8:14" pos:end="8:25"><expr pos:start="8:14" pos:end="8:25"><name pos:start="8:14" pos:end="8:17">ahci</name> <operator pos:start="8:19" pos:end="8:20">!=</operator> <name pos:start="8:22" pos:end="8:25">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" format="doxygen" pos:start="9:5" pos:end="28:7">/**
     * This serves as a bit of a tutorial on AHCI device programming:
     *
     * (1) Create a data buffer for the IDENTIFY response to be sent to
     * (2) Create a Command Table buffer, where we will store the
     *     command and PRDT (Physical Region Descriptor Table)
     * (3) Construct an FIS host-to-device command structure, and write it to
     *     the top of the Command Table buffer.
     * (4) Create one or more Physical Region Descriptors (PRDs) that describe
     *     a location in memory where data may be stored/retrieved.
     * (5) Write these PRDTs to the bottom (offset 0x80) of the Command Table.
     * (6) Each AHCI port has up to 32 command slots. Each slot contains a
     *     header that points to a Command Table buffer. Pick an unused slot
     *     and update it to point to the Command Table we have built.
     * (7) Now: Command #n points to our Command Table, and our Command Table
     *     contains the FIS (that describes our command) and the PRDTL, which
     *     describes our buffer.
     * (8) We inform the HBA via PxCI (Command Issue) that the command in slot
     *     #n is ready for processing.
     */</comment>
    <comment type="block" pos:start="29:5" pos:end="29:53">/* Pick the first implemented and running port */</comment>
    <expr_stmt pos:start="30:5" pos:end="30:32"><expr pos:start="30:5" pos:end="30:31"><name pos:start="30:5" pos:end="30:6">px</name> <operator pos:start="30:8" pos:end="30:8">=</operator> <call pos:start="30:10" pos:end="30:31"><name pos:start="30:10" pos:end="30:25">ahci_port_select</name><argument_list pos:start="30:26" pos:end="30:31">(<argument pos:start="30:27" pos:end="30:30"><expr pos:start="30:27" pos:end="30:30"><name pos:start="30:27" pos:end="30:30">ahci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="31:5" pos:end="31:52"><expr pos:start="31:5" pos:end="31:51"><call pos:start="31:5" pos:end="31:51"><name pos:start="31:5" pos:end="31:18">g_test_message</name><argument_list pos:start="31:19" pos:end="31:51">(<argument pos:start="31:20" pos:end="31:46"><expr pos:start="31:20" pos:end="31:46"><literal type="string" pos:start="31:20" pos:end="31:46">"Selected port %u for test"</literal></expr></argument>, <argument pos:start="31:49" pos:end="31:50"><expr pos:start="31:49" pos:end="31:50"><name pos:start="31:49" pos:end="31:50">px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="32:5" pos:end="32:68">/* Clear out the FIS Receive area and any pending interrupts. */</comment>
    <expr_stmt pos:start="33:5" pos:end="33:30"><expr pos:start="33:5" pos:end="33:29"><call pos:start="33:5" pos:end="33:29"><name pos:start="33:5" pos:end="33:19">ahci_port_clear</name><argument_list pos:start="33:20" pos:end="33:29">(<argument pos:start="33:21" pos:end="33:24"><expr pos:start="33:21" pos:end="33:24"><name pos:start="33:21" pos:end="33:24">ahci</name></expr></argument>, <argument pos:start="33:27" pos:end="33:28"><expr pos:start="33:27" pos:end="33:28"><name pos:start="33:27" pos:end="33:28">px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="34:5" pos:end="34:67">/* "Read" 512 bytes using CMD_IDENTIFY into the host buffer. */</comment>
    <expr_stmt pos:start="35:5" pos:end="35:53"><expr pos:start="35:5" pos:end="35:52"><call pos:start="35:5" pos:end="35:52"><name pos:start="35:5" pos:end="35:11">ahci_io</name><argument_list pos:start="35:12" pos:end="35:52">(<argument pos:start="35:13" pos:end="35:16"><expr pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">ahci</name></expr></argument>, <argument pos:start="35:19" pos:end="35:20"><expr pos:start="35:19" pos:end="35:20"><name pos:start="35:19" pos:end="35:20">px</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">CMD_IDENTIFY</name></expr></argument>, <argument pos:start="35:37" pos:end="35:41"><expr pos:start="35:37" pos:end="35:41"><operator pos:start="35:37" pos:end="35:37">&amp;</operator><name pos:start="35:38" pos:end="35:41">buff</name></expr></argument>, <argument pos:start="35:44" pos:end="35:51"><expr pos:start="35:44" pos:end="35:51"><name pos:start="35:44" pos:end="35:51">buffsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="36:5" pos:end="36:51">/* Check serial number/version in the buffer */</comment>
    <comment type="block" pos:start="37:5" pos:end="40:74">/* NB: IDENTIFY strings are packed in 16bit little endian chunks.
     * Since we copy byte-for-byte in ahci-test, on both LE and BE, we need to
     * unchunk this data. By contrast, ide-test copies 2 bytes at a time, and
     * as a consequence, only needs to unchunk the data on LE machines. */</comment>
    <expr_stmt pos:start="41:5" pos:end="41:34"><expr pos:start="41:5" pos:end="41:33"><call pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:18">string_bswap16</name><argument_list pos:start="41:19" pos:end="41:33">(<argument pos:start="41:20" pos:end="41:28"><expr pos:start="41:20" pos:end="41:28"><operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:28"><name pos:start="41:21" pos:end="41:24">buff</name><index pos:start="41:25" pos:end="41:28">[<expr pos:start="41:26" pos:end="41:27"><literal type="number" pos:start="41:26" pos:end="41:27">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="41:31" pos:end="41:32"><expr pos:start="41:31" pos:end="41:32"><literal type="number" pos:start="41:31" pos:end="41:32">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="42:5" pos:end="42:55"><expr pos:start="42:5" pos:end="42:54"><name pos:start="42:5" pos:end="42:6">rc</name> <operator pos:start="42:8" pos:end="42:8">=</operator> <call pos:start="42:10" pos:end="42:54"><name pos:start="42:10" pos:end="42:15">memcmp</name><argument_list pos:start="42:16" pos:end="42:54">(<argument pos:start="42:17" pos:end="42:25"><expr pos:start="42:17" pos:end="42:25"><operator pos:start="42:17" pos:end="42:17">&amp;</operator><name pos:start="42:18" pos:end="42:25"><name pos:start="42:18" pos:end="42:21">buff</name><index pos:start="42:22" pos:end="42:25">[<expr pos:start="42:23" pos:end="42:24"><literal type="number" pos:start="42:23" pos:end="42:24">10</literal></expr>]</index></name></expr></argument>, <argument pos:start="42:28" pos:end="42:49"><expr pos:start="42:28" pos:end="42:49"><literal type="string" pos:start="42:28" pos:end="42:49">"testdisk            "</literal></expr></argument>, <argument pos:start="42:52" pos:end="42:53"><expr pos:start="42:52" pos:end="42:53"><literal type="number" pos:start="42:52" pos:end="42:53">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="43:5" pos:end="43:31"><expr pos:start="43:5" pos:end="43:30"><call pos:start="43:5" pos:end="43:30"><name pos:start="43:5" pos:end="43:19">g_assert_cmphex</name><argument_list pos:start="43:20" pos:end="43:30">(<argument pos:start="43:21" pos:end="43:22"><expr pos:start="43:21" pos:end="43:22"><name pos:start="43:21" pos:end="43:22">rc</name></expr></argument>, <argument pos:start="43:25" pos:end="43:26"><expr pos:start="43:25" pos:end="43:26"><operator pos:start="43:25" pos:end="43:26">==</operator></expr></argument>, <argument pos:start="43:29" pos:end="43:29"><expr pos:start="43:29" pos:end="43:29"><literal type="number" pos:start="43:29" pos:end="43:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="44:5" pos:end="44:33"><expr pos:start="44:5" pos:end="44:32"><call pos:start="44:5" pos:end="44:32"><name pos:start="44:5" pos:end="44:18">string_bswap16</name><argument_list pos:start="44:19" pos:end="44:32">(<argument pos:start="44:20" pos:end="44:28"><expr pos:start="44:20" pos:end="44:28"><operator pos:start="44:20" pos:end="44:20">&amp;</operator><name pos:start="44:21" pos:end="44:28"><name pos:start="44:21" pos:end="44:24">buff</name><index pos:start="44:25" pos:end="44:28">[<expr pos:start="44:26" pos:end="44:27"><literal type="number" pos:start="44:26" pos:end="44:27">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="44:31" pos:end="44:31"><expr pos:start="44:31" pos:end="44:31"><literal type="number" pos:start="44:31" pos:end="44:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="45:5" pos:end="45:42"><expr pos:start="45:5" pos:end="45:41"><name pos:start="45:5" pos:end="45:6">rc</name> <operator pos:start="45:8" pos:end="45:8">=</operator> <call pos:start="45:10" pos:end="45:41"><name pos:start="45:10" pos:end="45:15">memcmp</name><argument_list pos:start="45:16" pos:end="45:41">(<argument pos:start="45:17" pos:end="45:25"><expr pos:start="45:17" pos:end="45:25"><operator pos:start="45:17" pos:end="45:17">&amp;</operator><name pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:21">buff</name><index pos:start="45:22" pos:end="45:25">[<expr pos:start="45:23" pos:end="45:24"><literal type="number" pos:start="45:23" pos:end="45:24">23</literal></expr>]</index></name></expr></argument>, <argument pos:start="45:28" pos:end="45:37"><expr pos:start="45:28" pos:end="45:37"><literal type="string" pos:start="45:28" pos:end="45:37">"version "</literal></expr></argument>, <argument pos:start="45:40" pos:end="45:40"><expr pos:start="45:40" pos:end="45:40"><literal type="number" pos:start="45:40" pos:end="45:40">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="46:5" pos:end="46:31"><expr pos:start="46:5" pos:end="46:30"><call pos:start="46:5" pos:end="46:30"><name pos:start="46:5" pos:end="46:19">g_assert_cmphex</name><argument_list pos:start="46:20" pos:end="46:30">(<argument pos:start="46:21" pos:end="46:22"><expr pos:start="46:21" pos:end="46:22"><name pos:start="46:21" pos:end="46:22">rc</name></expr></argument>, <argument pos:start="46:25" pos:end="46:26"><expr pos:start="46:25" pos:end="46:26"><operator pos:start="46:25" pos:end="46:26">==</operator></expr></argument>, <argument pos:start="46:29" pos:end="46:29"><expr pos:start="46:29" pos:end="46:29"><literal type="number" pos:start="46:29" pos:end="46:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
