<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21541.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">bmdma_cmd_writeb</name><parameter_list pos:start="1:22" pos:end="1:64">(<parameter pos:start="1:23" pos:end="1:34"><decl pos:start="1:23" pos:end="1:34"><type pos:start="1:23" pos:end="1:34"><name pos:start="1:23" pos:end="1:26">void</name> <modifier pos:start="1:28" pos:end="1:28">*</modifier></type><name pos:start="1:29" pos:end="1:34">opaque</name></decl></parameter>, <parameter pos:start="1:37" pos:end="1:49"><decl pos:start="1:37" pos:end="1:49"><type pos:start="1:37" pos:end="1:49"><name pos:start="1:37" pos:end="1:44">uint32_t</name></type> <name pos:start="1:46" pos:end="1:49">addr</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:63"><decl pos:start="1:52" pos:end="1:63"><type pos:start="1:52" pos:end="1:63"><name pos:start="1:52" pos:end="1:59">uint32_t</name></type> <name pos:start="1:61" pos:end="1:63">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:25">

    <decl_stmt pos:start="5:5" pos:end="8:0"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">BMDMAState</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:18">bm</name> <init pos:start="5:20" pos:end="5:27">= <expr pos:start="5:22" pos:end="5:27"><name pos:start="5:22" pos:end="5:27">opaque</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef pos:start="7:1" pos:end="7:16">#<cpp:directive pos:start="7:2" pos:end="7:6">ifdef</cpp:directive> <name pos:start="7:8" pos:end="7:16">DEBUG_IDE</name></cpp:ifdef>

    <expr_stmt pos:start="9:5" pos:end="12:0"><expr pos:start="9:5" pos:end="9:41"><call pos:start="9:5" pos:end="9:41"><name pos:start="9:5" pos:end="9:10">printf</name><argument_list pos:start="9:11" pos:end="9:41">(<argument pos:start="9:12" pos:end="9:25"><expr pos:start="9:12" pos:end="9:25"><literal type="string" pos:start="9:12" pos:end="9:25">"%s: 0x%08x\n"</literal></expr></argument>, <argument pos:start="9:28" pos:end="9:35"><expr pos:start="9:28" pos:end="9:35"><name pos:start="9:28" pos:end="9:35">__func__</name></expr></argument>, <argument pos:start="9:38" pos:end="9:40"><expr pos:start="9:38" pos:end="9:40"><name pos:start="9:38" pos:end="9:40">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="11:1" pos:end="11:6">#<cpp:directive pos:start="11:2" pos:end="11:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="15:5" pos:end="15:57">/* Ignore writes to SSBM if it keeps the old value */</comment>

    <if_stmt pos:start="17:5" pos:end="81:5"><if pos:start="17:5" pos:end="81:5">if <condition pos:start="17:8" pos:end="17:57">(<expr pos:start="17:9" pos:end="17:56"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:12">val</name> <operator pos:start="17:14" pos:end="17:14">&amp;</operator> <name pos:start="17:16" pos:end="17:27">BM_CMD_START</name><operator pos:start="17:28" pos:end="17:28">)</operator> <operator pos:start="17:30" pos:end="17:31">!=</operator> <operator pos:start="17:33" pos:end="17:33">(</operator><name pos:start="17:34" pos:end="17:40"><name pos:start="17:34" pos:end="17:35">bm</name><operator pos:start="17:36" pos:end="17:37">-&gt;</operator><name pos:start="17:38" pos:end="17:40">cmd</name></name> <operator pos:start="17:42" pos:end="17:42">&amp;</operator> <name pos:start="17:44" pos:end="17:55">BM_CMD_START</name><operator pos:start="17:56" pos:end="17:56">)</operator></expr>)</condition> <block pos:start="17:59" pos:end="81:5">{<block_content pos:start="19:9" pos:end="79:9">

        <if_stmt pos:start="19:9" pos:end="79:9"><if pos:start="19:9" pos:end="63:9">if <condition pos:start="19:12" pos:end="19:34">(<expr pos:start="19:13" pos:end="19:33"><operator pos:start="19:13" pos:end="19:13">!</operator><operator pos:start="19:14" pos:end="19:14">(</operator><name pos:start="19:15" pos:end="19:17">val</name> <operator pos:start="19:19" pos:end="19:19">&amp;</operator> <name pos:start="19:21" pos:end="19:32">BM_CMD_START</name><operator pos:start="19:33" pos:end="19:33">)</operator></expr>)</condition> <block pos:start="19:36" pos:end="63:9">{<block_content pos:start="45:13" pos:end="61:13">

            <comment type="block" pos:start="21:13" pos:end="43:15">/*

             * We can't cancel Scatter Gather DMA in the middle of the

             * operation or a partial (not full) DMA transfer would reach

             * the storage so we wait for completion instead (we beahve

             * like if the DMA was completed by the time the guest trying

             * to cancel dma with bmdma_cmd_writeb with BM_CMD_START not

             * set).

             *

             * In the future we'll be able to safely cancel the I/O if the

             * whole DMA operation will be submitted to disk with a single

             * aio operation with preadv/pwritev.

             */</comment>

            <if_stmt pos:start="45:13" pos:end="61:13"><if pos:start="45:13" pos:end="61:13">if <condition pos:start="45:16" pos:end="45:36">(<expr pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:35"><name pos:start="45:17" pos:end="45:18">bm</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:23">bus</name><operator pos:start="45:24" pos:end="45:25">-&gt;</operator><name pos:start="45:26" pos:end="45:28">dma</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:35">aiocb</name></name></expr>)</condition> <block pos:start="45:38" pos:end="61:13">{<block_content pos:start="47:17" pos:end="60:0">

                <expr_stmt pos:start="47:17" pos:end="50:0"><expr pos:start="47:17" pos:end="47:32"><call pos:start="47:17" pos:end="47:32"><name pos:start="47:17" pos:end="47:30">qemu_aio_flush</name><argument_list pos:start="47:31" pos:end="47:32">()</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="49:1" pos:end="49:16">#<cpp:directive pos:start="49:2" pos:end="49:6">ifdef</cpp:directive> <name pos:start="49:8" pos:end="49:16">DEBUG_IDE</name></cpp:ifdef>

                <if_stmt pos:start="51:17" pos:end="53:68"><if pos:start="51:17" pos:end="53:68">if <condition pos:start="51:20" pos:end="51:40">(<expr pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:39"><name pos:start="51:21" pos:end="51:22">bm</name><operator pos:start="51:23" pos:end="51:24">-&gt;</operator><name pos:start="51:25" pos:end="51:27">bus</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:32">dma</name><operator pos:start="51:33" pos:end="51:34">-&gt;</operator><name pos:start="51:35" pos:end="51:39">aiocb</name></name></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:68"><block_content pos:start="53:21" pos:end="53:68">

                    <expr_stmt pos:start="53:21" pos:end="53:68"><expr pos:start="53:21" pos:end="53:67"><call pos:start="53:21" pos:end="53:67"><name pos:start="53:21" pos:end="53:26">printf</name><argument_list pos:start="53:27" pos:end="53:67">(<argument pos:start="53:28" pos:end="53:66"><expr pos:start="53:28" pos:end="53:66"><literal type="string" pos:start="53:28" pos:end="53:66">"ide_dma_cancel: aiocb still pending\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="55:17" pos:end="60:0"><if pos:start="55:17" pos:end="60:0">if <condition pos:start="55:20" pos:end="55:50">(<expr pos:start="55:21" pos:end="55:49"><name pos:start="55:21" pos:end="55:30"><name pos:start="55:21" pos:end="55:22">bm</name><operator pos:start="55:23" pos:end="55:24">-&gt;</operator><name pos:start="55:25" pos:end="55:30">status</name></name> <operator pos:start="55:32" pos:end="55:32">&amp;</operator> <name pos:start="55:34" pos:end="55:49">BM_STATUS_DMAING</name></expr>)</condition><block type="pseudo" pos:start="57:21" pos:end="60:0"><block_content pos:start="57:21" pos:end="60:0">

                    <expr_stmt pos:start="57:21" pos:end="60:0"><expr pos:start="57:21" pos:end="57:78"><call pos:start="57:21" pos:end="57:78"><name pos:start="57:21" pos:end="57:26">printf</name><argument_list pos:start="57:27" pos:end="57:78">(<argument pos:start="57:28" pos:end="57:77"><expr pos:start="57:28" pos:end="57:77"><literal type="string" pos:start="57:28" pos:end="57:77">"ide_dma_cancel: BM_STATUS_DMAING still pending\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="79:9">else <block pos:start="63:16" pos:end="79:9">{<block_content pos:start="65:13" pos:end="77:13">

            <expr_stmt pos:start="65:13" pos:end="65:36"><expr pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:14">bm</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:24">cur_addr</name></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <name pos:start="65:28" pos:end="65:35"><name pos:start="65:28" pos:end="65:29">bm</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:35">addr</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="67:13" pos:end="77:13"><if pos:start="67:13" pos:end="77:13">if <condition pos:start="67:16" pos:end="67:49">(<expr pos:start="67:17" pos:end="67:48"><operator pos:start="67:17" pos:end="67:17">!</operator><operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:28"><name pos:start="67:19" pos:end="67:20">bm</name><operator pos:start="67:21" pos:end="67:22">-&gt;</operator><name pos:start="67:23" pos:end="67:28">status</name></name> <operator pos:start="67:30" pos:end="67:30">&amp;</operator> <name pos:start="67:32" pos:end="67:47">BM_STATUS_DMAING</name><operator pos:start="67:48" pos:end="67:48">)</operator></expr>)</condition> <block pos:start="67:51" pos:end="77:13">{<block_content pos:start="69:17" pos:end="75:55">

                <expr_stmt pos:start="69:17" pos:end="69:47"><expr pos:start="69:17" pos:end="69:46"><name pos:start="69:17" pos:end="69:26"><name pos:start="69:17" pos:end="69:18">bm</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:26">status</name></name> <operator pos:start="69:28" pos:end="69:29">|=</operator> <name pos:start="69:31" pos:end="69:46">BM_STATUS_DMAING</name></expr>;</expr_stmt>

                <comment type="block" pos:start="71:17" pos:end="71:52">/* start dma transfer if possible */</comment>

                <if_stmt pos:start="73:17" pos:end="75:55"><if pos:start="73:17" pos:end="75:55">if <condition pos:start="73:20" pos:end="73:31">(<expr pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:30"><name pos:start="73:21" pos:end="73:22">bm</name><operator pos:start="73:23" pos:end="73:24">-&gt;</operator><name pos:start="73:25" pos:end="73:30">dma_cb</name></name></expr>)</condition><block type="pseudo" pos:start="75:21" pos:end="75:55"><block_content pos:start="75:21" pos:end="75:55">

                    <expr_stmt pos:start="75:21" pos:end="75:55"><expr pos:start="75:21" pos:end="75:54"><call pos:start="75:21" pos:end="75:54"><name pos:start="75:21" pos:end="75:30"><name pos:start="75:21" pos:end="75:22">bm</name><operator pos:start="75:23" pos:end="75:24">-&gt;</operator><name pos:start="75:25" pos:end="75:30">dma_cb</name></name><argument_list pos:start="75:31" pos:end="75:54">(<argument pos:start="75:32" pos:end="75:50"><expr pos:start="75:32" pos:end="75:50"><call pos:start="75:32" pos:end="75:50"><name pos:start="75:32" pos:end="75:46">bmdma_active_if</name><argument_list pos:start="75:47" pos:end="75:50">(<argument pos:start="75:48" pos:end="75:49"><expr pos:start="75:48" pos:end="75:49"><name pos:start="75:48" pos:end="75:49">bm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="75:53" pos:end="75:53"><expr pos:start="75:53" pos:end="75:53"><literal type="number" pos:start="75:53" pos:end="75:53">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:25"><expr pos:start="85:5" pos:end="85:24"><name pos:start="85:5" pos:end="85:11"><name pos:start="85:5" pos:end="85:6">bm</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:11">cmd</name></name> <operator pos:start="85:13" pos:end="85:13">=</operator> <name pos:start="85:15" pos:end="85:17">val</name> <operator pos:start="85:19" pos:end="85:19">&amp;</operator> <literal type="number" pos:start="85:21" pos:end="85:24">0x09</literal></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
