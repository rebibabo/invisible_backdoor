<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6248.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">check_watchpoint</name><parameter_list pos:start="1:29" pos:end="1:78">(<parameter pos:start="1:30" pos:end="1:39"><decl pos:start="1:30" pos:end="1:39"><type pos:start="1:30" pos:end="1:39"><name pos:start="1:30" pos:end="1:32">int</name></type> <name pos:start="1:34" pos:end="1:39">offset</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:48"><decl pos:start="1:42" pos:end="1:48"><type pos:start="1:42" pos:end="1:48"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:48">len</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><name pos:start="1:51" pos:end="1:60">MemTxAttrs</name></type> <name pos:start="1:62" pos:end="1:66">attrs</name></decl></parameter>, <parameter pos:start="1:69" pos:end="1:77"><decl pos:start="1:69" pos:end="1:77"><type pos:start="1:69" pos:end="1:77"><name pos:start="1:69" pos:end="1:71">int</name></type> <name pos:start="1:73" pos:end="1:77">flags</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:5">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:31">= <expr pos:start="5:21" pos:end="5:31"><name pos:start="5:21" pos:end="5:31">current_cpu</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">CPUClass</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">cc</name> <init pos:start="7:18" pos:end="7:37">= <expr pos:start="7:20" pos:end="7:37"><call pos:start="7:20" pos:end="7:37"><name pos:start="7:20" pos:end="7:32">CPU_GET_CLASS</name><argument_list pos:start="7:33" pos:end="7:37">(<argument pos:start="7:34" pos:end="7:36"><expr pos:start="7:34" pos:end="7:36"><name pos:start="7:34" pos:end="7:36">cpu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">CPUArchState</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:21">env</name> <init pos:start="9:23" pos:end="9:36">= <expr pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:36"><name pos:start="9:25" pos:end="9:27">cpu</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:19">pc</name></decl>, <decl pos:start="11:22" pos:end="11:28"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:22" pos:end="11:28">cs_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:23"><decl pos:start="13:5" pos:end="13:22"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:16">target_ulong</name></type> <name pos:start="13:18" pos:end="13:22">vaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUWatchpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">wp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:23"><decl pos:start="17:5" pos:end="17:22"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:22">cpu_flags</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:26"><expr pos:start="21:5" pos:end="21:25"><call pos:start="21:5" pos:end="21:25"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:25">(<argument pos:start="21:12" pos:end="21:24"><expr pos:start="21:12" pos:end="21:24"><call pos:start="21:12" pos:end="21:24"><name pos:start="21:12" pos:end="21:22">tcg_enabled</name><argument_list pos:start="21:23" pos:end="21:24">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="35:5"><if pos:start="23:5" pos:end="35:5">if <condition pos:start="23:8" pos:end="23:28">(<expr pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:27"><name pos:start="23:9" pos:end="23:11">cpu</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:27">watchpoint_hit</name></name></expr>)</condition> <block pos:start="23:30" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:15">

        <comment type="block" pos:start="25:9" pos:end="29:34">/* We re-entered the check after replacing the TB. Now raise

         * the debug interrupt so that is will trigger after the

         * current instruction. */</comment>

        <expr_stmt pos:start="31:9" pos:end="31:48"><expr pos:start="31:9" pos:end="31:47"><call pos:start="31:9" pos:end="31:47"><name pos:start="31:9" pos:end="31:21">cpu_interrupt</name><argument_list pos:start="31:22" pos:end="31:47">(<argument pos:start="31:23" pos:end="31:25"><expr pos:start="31:23" pos:end="31:25"><name pos:start="31:23" pos:end="31:25">cpu</name></expr></argument>, <argument pos:start="31:28" pos:end="31:46"><expr pos:start="31:28" pos:end="31:46"><name pos:start="31:28" pos:end="31:46">CPU_INTERRUPT_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:60"><expr pos:start="37:5" pos:end="37:59"><name pos:start="37:5" pos:end="37:9">vaddr</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <operator pos:start="37:13" pos:end="37:13">(</operator><name pos:start="37:14" pos:end="37:30"><name pos:start="37:14" pos:end="37:16">cpu</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:30">mem_io_vaddr</name></name> <operator pos:start="37:32" pos:end="37:32">&amp;</operator> <name pos:start="37:34" pos:end="37:49">TARGET_PAGE_MASK</name><operator pos:start="37:50" pos:end="37:50">)</operator> <operator pos:start="37:52" pos:end="37:52">+</operator> <name pos:start="37:54" pos:end="37:59">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:59"><expr pos:start="39:5" pos:end="39:58"><name pos:start="39:5" pos:end="39:9">vaddr</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <call pos:start="39:13" pos:end="39:58"><name pos:start="39:13" pos:end="39:41"><name pos:start="39:13" pos:end="39:14">cc</name><operator pos:start="39:15" pos:end="39:16">-&gt;</operator><name pos:start="39:17" pos:end="39:41">adjust_watchpoint_address</name></name><argument_list pos:start="39:42" pos:end="39:58">(<argument pos:start="39:43" pos:end="39:45"><expr pos:start="39:43" pos:end="39:45"><name pos:start="39:43" pos:end="39:45">cpu</name></expr></argument>, <argument pos:start="39:48" pos:end="39:52"><expr pos:start="39:48" pos:end="39:52"><name pos:start="39:48" pos:end="39:52">vaddr</name></expr></argument>, <argument pos:start="39:55" pos:end="39:57"><expr pos:start="39:55" pos:end="39:57"><name pos:start="39:55" pos:end="39:57">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:18">QTAILQ_FOREACH</name><argument_list pos:start="41:19" pos:end="41:48">(<argument pos:start="41:20" pos:end="41:21">wp</argument>, <argument pos:start="41:24" pos:end="41:40">&amp;cpu-&gt;watchpoints</argument>, <argument pos:start="41:43" pos:end="41:47">entry</argument>)</argument_list></macro> <block pos:start="41:50" pos:end="113:5">{<block_content pos:start="43:9" pos:end="111:9">

        <if_stmt pos:start="43:9" pos:end="111:9"><if pos:start="43:9" pos:end="107:9">if <condition pos:start="43:12" pos:end="45:35">(<expr pos:start="43:13" pos:end="45:34"><call pos:start="43:13" pos:end="43:58"><name pos:start="43:13" pos:end="43:42">cpu_watchpoint_address_matches</name><argument_list pos:start="43:43" pos:end="43:58">(<argument pos:start="43:44" pos:end="43:45"><expr pos:start="43:44" pos:end="43:45"><name pos:start="43:44" pos:end="43:45">wp</name></expr></argument>, <argument pos:start="43:48" pos:end="43:52"><expr pos:start="43:48" pos:end="43:52"><name pos:start="43:48" pos:end="43:52">vaddr</name></expr></argument>, <argument pos:start="43:55" pos:end="43:57"><expr pos:start="43:55" pos:end="43:57"><name pos:start="43:55" pos:end="43:57">len</name></expr></argument>)</argument_list></call>

            <operator pos:start="45:13" pos:end="45:14">&amp;&amp;</operator> <operator pos:start="45:16" pos:end="45:16">(</operator><name pos:start="45:17" pos:end="45:25"><name pos:start="45:17" pos:end="45:18">wp</name><operator pos:start="45:19" pos:end="45:20">-&gt;</operator><name pos:start="45:21" pos:end="45:25">flags</name></name> <operator pos:start="45:27" pos:end="45:27">&amp;</operator> <name pos:start="45:29" pos:end="45:33">flags</name><operator pos:start="45:34" pos:end="45:34">)</operator></expr>)</condition> <block pos:start="45:37" pos:end="107:9">{<block_content pos:start="47:13" pos:end="105:13">

            <if_stmt pos:start="47:13" pos:end="55:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:37">(<expr pos:start="47:17" pos:end="47:36"><name pos:start="47:17" pos:end="47:21">flags</name> <operator pos:start="47:23" pos:end="47:24">==</operator> <name pos:start="47:26" pos:end="47:36">BP_MEM_READ</name></expr>)</condition> <block pos:start="47:39" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:52">

                <expr_stmt pos:start="49:17" pos:end="49:52"><expr pos:start="49:17" pos:end="49:51"><name pos:start="49:17" pos:end="49:25"><name pos:start="49:17" pos:end="49:18">wp</name><operator pos:start="49:19" pos:end="49:20">-&gt;</operator><name pos:start="49:21" pos:end="49:25">flags</name></name> <operator pos:start="49:27" pos:end="49:28">|=</operator> <name pos:start="49:30" pos:end="49:51">BP_WATCHPOINT_HIT_READ</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="51:15" pos:end="55:13">else <block pos:start="51:20" pos:end="55:13">{<block_content pos:start="53:17" pos:end="53:53">

                <expr_stmt pos:start="53:17" pos:end="53:53"><expr pos:start="53:17" pos:end="53:52"><name pos:start="53:17" pos:end="53:25"><name pos:start="53:17" pos:end="53:18">wp</name><operator pos:start="53:19" pos:end="53:20">-&gt;</operator><name pos:start="53:21" pos:end="53:25">flags</name></name> <operator pos:start="53:27" pos:end="53:28">|=</operator> <name pos:start="53:30" pos:end="53:52">BP_WATCHPOINT_HIT_WRITE</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:32"><expr pos:start="57:13" pos:end="57:31"><name pos:start="57:13" pos:end="57:23"><name pos:start="57:13" pos:end="57:14">wp</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:23">hitaddr</name></name> <operator pos:start="57:25" pos:end="57:25">=</operator> <name pos:start="57:27" pos:end="57:31">vaddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:33"><expr pos:start="59:13" pos:end="59:32"><name pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:14">wp</name><operator pos:start="59:15" pos:end="59:16">-&gt;</operator><name pos:start="59:17" pos:end="59:24">hitattrs</name></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:32">attrs</name></expr>;</expr_stmt>

            <if_stmt pos:start="61:13" pos:end="105:13"><if pos:start="61:13" pos:end="105:13">if <condition pos:start="61:16" pos:end="61:37">(<expr pos:start="61:17" pos:end="61:36"><operator pos:start="61:17" pos:end="61:17">!</operator><name pos:start="61:18" pos:end="61:36"><name pos:start="61:18" pos:end="61:20">cpu</name><operator pos:start="61:21" pos:end="61:22">-&gt;</operator><name pos:start="61:23" pos:end="61:36">watchpoint_hit</name></name></expr>)</condition> <block pos:start="61:39" pos:end="105:13">{<block_content pos:start="63:17" pos:end="103:17">

                <if_stmt pos:start="63:17" pos:end="71:17"><if pos:start="63:17" pos:end="71:17">if <condition pos:start="63:20" pos:end="65:57">(<expr pos:start="63:21" pos:end="65:56"><name pos:start="63:21" pos:end="63:29"><name pos:start="63:21" pos:end="63:22">wp</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:29">flags</name></name> <operator pos:start="63:31" pos:end="63:31">&amp;</operator> <name pos:start="63:33" pos:end="63:38">BP_CPU</name> <operator pos:start="63:40" pos:end="63:41">&amp;&amp;</operator>

                    <operator pos:start="65:21" pos:end="65:21">!</operator><call pos:start="65:22" pos:end="65:56"><name pos:start="65:22" pos:end="65:47"><name pos:start="65:22" pos:end="65:23">cc</name><operator pos:start="65:24" pos:end="65:25">-&gt;</operator><name pos:start="65:26" pos:end="65:47">debug_check_watchpoint</name></name><argument_list pos:start="65:48" pos:end="65:56">(<argument pos:start="65:49" pos:end="65:51"><expr pos:start="65:49" pos:end="65:51"><name pos:start="65:49" pos:end="65:51">cpu</name></expr></argument>, <argument pos:start="65:54" pos:end="65:55"><expr pos:start="65:54" pos:end="65:55"><name pos:start="65:54" pos:end="65:55">wp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="65:59" pos:end="71:17">{<block_content pos:start="67:21" pos:end="69:29">

                    <expr_stmt pos:start="67:21" pos:end="67:52"><expr pos:start="67:21" pos:end="67:51"><name pos:start="67:21" pos:end="67:29"><name pos:start="67:21" pos:end="67:22">wp</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:29">flags</name></name> <operator pos:start="67:31" pos:end="67:32">&amp;=</operator> <operator pos:start="67:34" pos:end="67:34">~</operator><name pos:start="67:35" pos:end="67:51">BP_WATCHPOINT_HIT</name></expr>;</expr_stmt>

                    <continue pos:start="69:21" pos:end="69:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="73:17" pos:end="73:41"><expr pos:start="73:17" pos:end="73:40"><name pos:start="73:17" pos:end="73:35"><name pos:start="73:17" pos:end="73:19">cpu</name><operator pos:start="73:20" pos:end="73:21">-&gt;</operator><name pos:start="73:22" pos:end="73:35">watchpoint_hit</name></name> <operator pos:start="73:37" pos:end="73:37">=</operator> <name pos:start="73:39" pos:end="73:40">wp</name></expr>;</expr_stmt>



                <comment type="block" pos:start="77:17" pos:end="83:19">/* Both tb_lock and iothread_mutex will be reset when

                 * cpu_loop_exit or cpu_loop_exit_noexc longjmp

                 * back into the cpu_exec main loop.

                 */</comment>

                <expr_stmt pos:start="85:17" pos:end="85:26"><expr pos:start="85:17" pos:end="85:25"><call pos:start="85:17" pos:end="85:25"><name pos:start="85:17" pos:end="85:23">tb_lock</name><argument_list pos:start="85:24" pos:end="85:25">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:41"><expr pos:start="87:17" pos:end="87:40"><call pos:start="87:17" pos:end="87:40"><name pos:start="87:17" pos:end="87:35">tb_check_watchpoint</name><argument_list pos:start="87:36" pos:end="87:40">(<argument pos:start="87:37" pos:end="87:39"><expr pos:start="87:37" pos:end="87:39"><name pos:start="87:37" pos:end="87:39">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="89:17" pos:end="103:17"><if pos:start="89:17" pos:end="95:17">if <condition pos:start="89:20" pos:end="89:54">(<expr pos:start="89:21" pos:end="89:53"><name pos:start="89:21" pos:end="89:29"><name pos:start="89:21" pos:end="89:22">wp</name><operator pos:start="89:23" pos:end="89:24">-&gt;</operator><name pos:start="89:25" pos:end="89:29">flags</name></name> <operator pos:start="89:31" pos:end="89:31">&amp;</operator> <name pos:start="89:33" pos:end="89:53">BP_STOP_BEFORE_ACCESS</name></expr>)</condition> <block pos:start="89:56" pos:end="95:17">{<block_content pos:start="91:21" pos:end="93:39">

                    <expr_stmt pos:start="91:21" pos:end="91:54"><expr pos:start="91:21" pos:end="91:53"><name pos:start="91:21" pos:end="91:40"><name pos:start="91:21" pos:end="91:23">cpu</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:40">exception_index</name></name> <operator pos:start="91:42" pos:end="91:42">=</operator> <name pos:start="91:44" pos:end="91:53">EXCP_DEBUG</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="93:21" pos:end="93:39"><expr pos:start="93:21" pos:end="93:38"><call pos:start="93:21" pos:end="93:38"><name pos:start="93:21" pos:end="93:33">cpu_loop_exit</name><argument_list pos:start="93:34" pos:end="93:38">(<argument pos:start="93:35" pos:end="93:37"><expr pos:start="93:35" pos:end="93:37"><name pos:start="93:35" pos:end="93:37">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="95:19" pos:end="103:17">else <block pos:start="95:24" pos:end="103:17">{<block_content pos:start="97:21" pos:end="101:45">

                    <expr_stmt pos:start="97:21" pos:end="97:73"><expr pos:start="97:21" pos:end="97:72"><call pos:start="97:21" pos:end="97:72"><name pos:start="97:21" pos:end="97:40">cpu_get_tb_cpu_state</name><argument_list pos:start="97:41" pos:end="97:72">(<argument pos:start="97:42" pos:end="97:44"><expr pos:start="97:42" pos:end="97:44"><name pos:start="97:42" pos:end="97:44">env</name></expr></argument>, <argument pos:start="97:47" pos:end="97:49"><expr pos:start="97:47" pos:end="97:49"><operator pos:start="97:47" pos:end="97:47">&amp;</operator><name pos:start="97:48" pos:end="97:49">pc</name></expr></argument>, <argument pos:start="97:52" pos:end="97:59"><expr pos:start="97:52" pos:end="97:59"><operator pos:start="97:52" pos:end="97:52">&amp;</operator><name pos:start="97:53" pos:end="97:59">cs_base</name></expr></argument>, <argument pos:start="97:62" pos:end="97:71"><expr pos:start="97:62" pos:end="97:71"><operator pos:start="97:62" pos:end="97:62">&amp;</operator><name pos:start="97:63" pos:end="97:71">cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="99:21" pos:end="99:80"><expr pos:start="99:21" pos:end="99:79"><call pos:start="99:21" pos:end="99:79"><name pos:start="99:21" pos:end="99:31">tb_gen_code</name><argument_list pos:start="99:32" pos:end="99:79">(<argument pos:start="99:33" pos:end="99:35"><expr pos:start="99:33" pos:end="99:35"><name pos:start="99:33" pos:end="99:35">cpu</name></expr></argument>, <argument pos:start="99:38" pos:end="99:39"><expr pos:start="99:38" pos:end="99:39"><name pos:start="99:38" pos:end="99:39">pc</name></expr></argument>, <argument pos:start="99:42" pos:end="99:48"><expr pos:start="99:42" pos:end="99:48"><name pos:start="99:42" pos:end="99:48">cs_base</name></expr></argument>, <argument pos:start="99:51" pos:end="99:59"><expr pos:start="99:51" pos:end="99:59"><name pos:start="99:51" pos:end="99:59">cpu_flags</name></expr></argument>, <argument pos:start="99:62" pos:end="99:78"><expr pos:start="99:62" pos:end="99:78"><literal type="number" pos:start="99:62" pos:end="99:62">1</literal> <operator pos:start="99:64" pos:end="99:64">|</operator> <call pos:start="99:66" pos:end="99:78"><name pos:start="99:66" pos:end="99:76">curr_cflags</name><argument_list pos:start="99:77" pos:end="99:78">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="101:21" pos:end="101:45"><expr pos:start="101:21" pos:end="101:44"><call pos:start="101:21" pos:end="101:44"><name pos:start="101:21" pos:end="101:39">cpu_loop_exit_noexc</name><argument_list pos:start="101:40" pos:end="101:44">(<argument pos:start="101:41" pos:end="101:43"><expr pos:start="101:41" pos:end="101:43"><name pos:start="101:41" pos:end="101:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="107:11" pos:end="111:9">else <block pos:start="107:16" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:44">

            <expr_stmt pos:start="109:13" pos:end="109:44"><expr pos:start="109:13" pos:end="109:43"><name pos:start="109:13" pos:end="109:21"><name pos:start="109:13" pos:end="109:14">wp</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:21">flags</name></name> <operator pos:start="109:23" pos:end="109:24">&amp;=</operator> <operator pos:start="109:26" pos:end="109:26">~</operator><name pos:start="109:27" pos:end="109:43">BP_WATCHPOINT_HIT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block>

</block_content>}</block></function>
</unit>
