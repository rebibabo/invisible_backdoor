<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2378.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:6"><name pos:start="1:1" pos:end="1:4">void</name> <modifier pos:start="1:6" pos:end="1:6">*</modifier></type><name pos:start="1:7" pos:end="1:19">qemu_ram_mmap</name><parameter_list pos:start="1:20" pos:end="1:67">(<parameter pos:start="1:21" pos:end="1:26"><decl pos:start="1:21" pos:end="1:26"><type pos:start="1:21" pos:end="1:26"><name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:26">fd</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:39"><decl pos:start="1:29" pos:end="1:39"><type pos:start="1:29" pos:end="1:39"><name pos:start="1:29" pos:end="1:34">size_t</name></type> <name pos:start="1:36" pos:end="1:39">size</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:53"><decl pos:start="1:42" pos:end="1:53"><type pos:start="1:42" pos:end="1:53"><name pos:start="1:42" pos:end="1:47">size_t</name></type> <name pos:start="1:49" pos:end="1:53">align</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:66"><decl pos:start="1:56" pos:end="1:66"><type pos:start="1:56" pos:end="1:66"><name pos:start="1:56" pos:end="1:59">bool</name></type> <name pos:start="1:61" pos:end="1:66">shared</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="93:1">{<block_content pos:start="13:5" pos:end="91:15">

    <comment type="block" pos:start="5:5" pos:end="11:7">/*

     * Note: this always allocates at least one extra page of virtual address

     * space, even if size is already aligned.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">size_t</name></type> <name pos:start="13:12" pos:end="13:16">total</name> <init pos:start="13:18" pos:end="13:31">= <expr pos:start="13:20" pos:end="13:31"><name pos:start="13:20" pos:end="13:23">size</name> <operator pos:start="13:25" pos:end="13:25">+</operator> <name pos:start="13:27" pos:end="13:31">align</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:78"><decl pos:start="15:5" pos:end="15:77"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">void</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:13">ptr</name> <init pos:start="15:15" pos:end="15:77">= <expr pos:start="15:17" pos:end="15:77"><call pos:start="15:17" pos:end="15:77"><name pos:start="15:17" pos:end="15:20">mmap</name><argument_list pos:start="15:21" pos:end="15:77">(<argument pos:start="15:22" pos:end="15:22"><expr pos:start="15:22" pos:end="15:22"><literal type="number" pos:start="15:22" pos:end="15:22">0</literal></expr></argument>, <argument pos:start="15:25" pos:end="15:29"><expr pos:start="15:25" pos:end="15:29"><name pos:start="15:25" pos:end="15:29">total</name></expr></argument>, <argument pos:start="15:32" pos:end="15:40"><expr pos:start="15:32" pos:end="15:40"><name pos:start="15:32" pos:end="15:40">PROT_NONE</name></expr></argument>, <argument pos:start="15:43" pos:end="15:69"><expr pos:start="15:43" pos:end="15:69"><name pos:start="15:43" pos:end="15:55">MAP_ANONYMOUS</name> <operator pos:start="15:57" pos:end="15:57">|</operator> <name pos:start="15:59" pos:end="15:69">MAP_PRIVATE</name></expr></argument>, <argument pos:start="15:72" pos:end="15:73"><expr pos:start="15:72" pos:end="15:73"><operator pos:start="15:72" pos:end="15:72">-</operator><literal type="number" pos:start="15:73" pos:end="15:73">1</literal></expr></argument>, <argument pos:start="15:76" pos:end="15:76"><expr pos:start="15:76" pos:end="15:76"><literal type="number" pos:start="15:76" pos:end="15:76">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:74"><decl pos:start="17:5" pos:end="17:73"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">size_t</name></type> <name pos:start="17:12" pos:end="17:17">offset</name> <init pos:start="17:19" pos:end="17:73">= <expr pos:start="17:21" pos:end="17:73"><call pos:start="17:21" pos:end="17:56"><name pos:start="17:21" pos:end="17:33">QEMU_ALIGN_UP</name><argument_list pos:start="17:34" pos:end="17:56">(<argument pos:start="17:35" pos:end="17:48"><expr pos:start="17:35" pos:end="17:48"><operator pos:start="17:35" pos:end="17:35">(</operator><name pos:start="17:36" pos:end="17:44">uintptr_t</name><operator pos:start="17:45" pos:end="17:45">)</operator><name pos:start="17:46" pos:end="17:48">ptr</name></expr></argument>, <argument pos:start="17:51" pos:end="17:55"><expr pos:start="17:51" pos:end="17:55"><name pos:start="17:51" pos:end="17:55">align</name></expr></argument>)</argument_list></call> <operator pos:start="17:58" pos:end="17:58">-</operator> <operator pos:start="17:60" pos:end="17:60">(</operator><name pos:start="17:61" pos:end="17:69">uintptr_t</name><operator pos:start="17:70" pos:end="17:70">)</operator><name pos:start="17:71" pos:end="17:73">ptr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:15"><decl pos:start="19:5" pos:end="19:14"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:14">ptr1</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:26">(<expr pos:start="23:9" pos:end="23:25"><name pos:start="23:9" pos:end="23:11">ptr</name> <operator pos:start="23:13" pos:end="23:14">==</operator> <name pos:start="23:16" pos:end="23:25">MAP_FAILED</name></expr>)</condition> <block pos:start="23:28" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <return pos:start="25:9" pos:end="25:20">return <expr pos:start="25:16" pos:end="25:19"><name pos:start="25:16" pos:end="25:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:41">/* Make sure align is a power of 2 */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><call pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:10">assert</name><argument_list pos:start="33:11" pos:end="33:34">(<argument pos:start="33:12" pos:end="33:33"><expr pos:start="33:12" pos:end="33:33"><operator pos:start="33:12" pos:end="33:12">!</operator><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:18">align</name> <operator pos:start="33:20" pos:end="33:20">&amp;</operator> <operator pos:start="33:22" pos:end="33:22">(</operator><name pos:start="33:23" pos:end="33:27">align</name> <operator pos:start="33:29" pos:end="33:29">-</operator> <literal type="number" pos:start="33:31" pos:end="33:31">1</literal><operator pos:start="33:32" pos:end="33:32">)</operator><operator pos:start="33:33" pos:end="33:33">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:40">/* Always align to host page size */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:10">assert</name><argument_list pos:start="37:11" pos:end="37:34">(<argument pos:start="37:12" pos:end="37:33"><expr pos:start="37:12" pos:end="37:33"><name pos:start="37:12" pos:end="37:16">align</name> <operator pos:start="37:18" pos:end="37:19">&gt;=</operator> <call pos:start="37:21" pos:end="37:33"><name pos:start="37:21" pos:end="37:31">getpagesize</name><argument_list pos:start="37:32" pos:end="37:33">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="49:23"><expr pos:start="41:5" pos:end="49:22"><name pos:start="41:5" pos:end="41:8">ptr1</name> <operator pos:start="41:10" pos:end="41:10">=</operator> <call pos:start="41:12" pos:end="49:22"><name pos:start="41:12" pos:end="41:15">mmap</name><argument_list pos:start="41:16" pos:end="49:22">(<argument pos:start="41:17" pos:end="41:28"><expr pos:start="41:17" pos:end="41:28"><name pos:start="41:17" pos:end="41:19">ptr</name> <operator pos:start="41:21" pos:end="41:21">+</operator> <name pos:start="41:23" pos:end="41:28">offset</name></expr></argument>, <argument pos:start="41:31" pos:end="41:34"><expr pos:start="41:31" pos:end="41:34"><name pos:start="41:31" pos:end="41:34">size</name></expr></argument>, <argument pos:start="41:37" pos:end="41:58"><expr pos:start="41:37" pos:end="41:58"><name pos:start="41:37" pos:end="41:45">PROT_READ</name> <operator pos:start="41:47" pos:end="41:47">|</operator> <name pos:start="41:49" pos:end="41:58">PROT_WRITE</name></expr></argument>,

                <argument pos:start="43:17" pos:end="47:51"><expr pos:start="43:17" pos:end="47:51"><name pos:start="43:17" pos:end="43:25">MAP_FIXED</name> <operator pos:start="43:27" pos:end="43:27">|</operator>

                <operator pos:start="45:17" pos:end="45:17">(</operator><ternary pos:start="45:18" pos:end="45:45"><condition pos:start="45:18" pos:end="45:27"><expr pos:start="45:18" pos:end="45:25"><name pos:start="45:18" pos:end="45:19">fd</name> <operator pos:start="45:21" pos:end="45:22">==</operator> <operator pos:start="45:24" pos:end="45:24">-</operator><literal type="number" pos:start="45:25" pos:end="45:25">1</literal></expr> ?</condition><then pos:start="45:29" pos:end="45:41"> <expr pos:start="45:29" pos:end="45:41"><name pos:start="45:29" pos:end="45:41">MAP_ANONYMOUS</name></expr> </then><else pos:start="45:43" pos:end="45:45">: <expr pos:start="45:45" pos:end="45:45"><literal type="number" pos:start="45:45" pos:end="45:45">0</literal></expr></else></ternary><operator pos:start="45:46" pos:end="45:46">)</operator> <operator pos:start="45:48" pos:end="45:48">|</operator>

                <operator pos:start="47:17" pos:end="47:17">(</operator><ternary pos:start="47:18" pos:end="47:50"><condition pos:start="47:18" pos:end="47:25"><expr pos:start="47:18" pos:end="47:23"><name pos:start="47:18" pos:end="47:23">shared</name></expr> ?</condition><then pos:start="47:27" pos:end="47:36"> <expr pos:start="47:27" pos:end="47:36"><name pos:start="47:27" pos:end="47:36">MAP_SHARED</name></expr> </then><else pos:start="47:38" pos:end="47:50">: <expr pos:start="47:40" pos:end="47:50"><name pos:start="47:40" pos:end="47:50">MAP_PRIVATE</name></expr></else></ternary><operator pos:start="47:51" pos:end="47:51">)</operator></expr></argument>,

                <argument pos:start="49:17" pos:end="49:18"><expr pos:start="49:17" pos:end="49:18"><name pos:start="49:17" pos:end="49:18">fd</name></expr></argument>, <argument pos:start="49:21" pos:end="49:21"><expr pos:start="49:21" pos:end="49:21"><literal type="number" pos:start="49:21" pos:end="49:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="57:5"><if pos:start="51:5" pos:end="57:5">if <condition pos:start="51:8" pos:end="51:27">(<expr pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:12">ptr1</name> <operator pos:start="51:14" pos:end="51:15">==</operator> <name pos:start="51:17" pos:end="51:26">MAP_FAILED</name></expr>)</condition> <block pos:start="51:29" pos:end="57:5">{<block_content pos:start="53:9" pos:end="55:20">

        <expr_stmt pos:start="53:9" pos:end="53:27"><expr pos:start="53:9" pos:end="53:26"><call pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:14">munmap</name><argument_list pos:start="53:15" pos:end="53:26">(<argument pos:start="53:16" pos:end="53:18"><expr pos:start="53:16" pos:end="53:18"><name pos:start="53:16" pos:end="53:18">ptr</name></expr></argument>, <argument pos:start="53:21" pos:end="53:25"><expr pos:start="53:21" pos:end="53:25"><name pos:start="53:21" pos:end="53:25">total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="55:9" pos:end="55:20">return <expr pos:start="55:16" pos:end="55:19"><name pos:start="55:16" pos:end="55:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="61:5" pos:end="61:18"><expr pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:7">ptr</name> <operator pos:start="61:9" pos:end="61:10">+=</operator> <name pos:start="61:12" pos:end="61:17">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:20"><expr pos:start="63:5" pos:end="63:19"><name pos:start="63:5" pos:end="63:9">total</name> <operator pos:start="63:11" pos:end="63:12">-=</operator> <name pos:start="63:14" pos:end="63:19">offset</name></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:19">(<expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:14">offset</name> <operator pos:start="67:16" pos:end="67:16">&gt;</operator> <literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>)</condition> <block pos:start="67:21" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:37">

        <expr_stmt pos:start="69:9" pos:end="69:37"><expr pos:start="69:9" pos:end="69:36"><call pos:start="69:9" pos:end="69:36"><name pos:start="69:9" pos:end="69:14">munmap</name><argument_list pos:start="69:15" pos:end="69:36">(<argument pos:start="69:16" pos:end="69:27"><expr pos:start="69:16" pos:end="69:27"><name pos:start="69:16" pos:end="69:18">ptr</name> <operator pos:start="69:20" pos:end="69:20">-</operator> <name pos:start="69:22" pos:end="69:27">offset</name></expr></argument>, <argument pos:start="69:30" pos:end="69:35"><expr pos:start="69:30" pos:end="69:35"><name pos:start="69:30" pos:end="69:35">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="81:7">/*

     * Leave a single PROT_NONE page allocated after the RAM block, to serve as

     * a guard page guarding against potential buffer overflows.

     */</comment>

    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:37">(<expr pos:start="83:9" pos:end="83:36"><name pos:start="83:9" pos:end="83:13">total</name> <operator pos:start="83:15" pos:end="83:15">&gt;</operator> <name pos:start="83:17" pos:end="83:20">size</name> <operator pos:start="83:22" pos:end="83:22">+</operator> <call pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:34">getpagesize</name><argument_list pos:start="83:35" pos:end="83:36">()</argument_list></call></expr>)</condition> <block pos:start="83:39" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:73">

        <expr_stmt pos:start="85:9" pos:end="85:73"><expr pos:start="85:9" pos:end="85:72"><call pos:start="85:9" pos:end="85:72"><name pos:start="85:9" pos:end="85:14">munmap</name><argument_list pos:start="85:15" pos:end="85:72">(<argument pos:start="85:16" pos:end="85:41"><expr pos:start="85:16" pos:end="85:41"><name pos:start="85:16" pos:end="85:18">ptr</name> <operator pos:start="85:20" pos:end="85:20">+</operator> <name pos:start="85:22" pos:end="85:25">size</name> <operator pos:start="85:27" pos:end="85:27">+</operator> <call pos:start="85:29" pos:end="85:41"><name pos:start="85:29" pos:end="85:39">getpagesize</name><argument_list pos:start="85:40" pos:end="85:41">()</argument_list></call></expr></argument>, <argument pos:start="85:44" pos:end="85:71"><expr pos:start="85:44" pos:end="85:71"><name pos:start="85:44" pos:end="85:48">total</name> <operator pos:start="85:50" pos:end="85:50">-</operator> <name pos:start="85:52" pos:end="85:55">size</name> <operator pos:start="85:57" pos:end="85:57">-</operator> <call pos:start="85:59" pos:end="85:71"><name pos:start="85:59" pos:end="85:69">getpagesize</name><argument_list pos:start="85:70" pos:end="85:71">()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="91:5" pos:end="91:15">return <expr pos:start="91:12" pos:end="91:14"><name pos:start="91:12" pos:end="91:14">ptr</name></expr>;</return>

</block_content>}</block></function>
</unit>
