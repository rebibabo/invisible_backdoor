<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6227.c" pos:tabs="8"><function pos:start="1:1" pos:end="93:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">omap_pwt_write</name><parameter_list pos:start="1:27" pos:end="3:57">(<parameter pos:start="1:28" pos:end="1:39"><decl pos:start="1:28" pos:end="1:39"><type pos:start="1:28" pos:end="1:39"><name pos:start="1:28" pos:end="1:31">void</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:39">opaque</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:47">hwaddr</name></type> <name pos:start="1:49" pos:end="1:52">addr</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:41"><decl pos:start="3:28" pos:end="3:41"><type pos:start="3:28" pos:end="3:41"><name pos:start="3:28" pos:end="3:35">uint64_t</name></type> <name pos:start="3:37" pos:end="3:41">value</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:56"><decl pos:start="3:44" pos:end="3:56"><type pos:start="3:44" pos:end="3:56"><name pos:start="3:44" pos:end="3:51">unsigned</name></type> <name pos:start="3:53" pos:end="3:56">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="93:1">{<block_content pos:start="7:5" pos:end="91:5">

    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:21">omap_pwt_s</name></name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:24">s</name> <init pos:start="7:26" pos:end="7:55">= <expr pos:start="7:28" pos:end="7:55"><operator pos:start="7:28" pos:end="7:28">(</operator>struct <name pos:start="7:36" pos:end="7:45">omap_pwt_s</name> <operator pos:start="7:47" pos:end="7:47">*</operator><operator pos:start="7:48" pos:end="7:48">)</operator> <name pos:start="7:50" pos:end="7:55">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">offset</name> <init pos:start="9:16" pos:end="9:42">= <expr pos:start="9:18" pos:end="9:42"><name pos:start="9:18" pos:end="9:21">addr</name> <operator pos:start="9:23" pos:end="9:23">&amp;</operator> <name pos:start="9:25" pos:end="9:42">OMAP_MPUI_REG_MASK</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:18">(<expr pos:start="13:9" pos:end="13:17"><name pos:start="13:9" pos:end="13:12">size</name> <operator pos:start="13:14" pos:end="13:15">!=</operator> <literal type="number" pos:start="13:17" pos:end="13:17">1</literal></expr>)</condition> <block pos:start="13:20" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:15">

        <expr_stmt pos:start="15:9" pos:end="15:50"><expr pos:start="15:9" pos:end="15:49"><call pos:start="15:9" pos:end="15:49"><name pos:start="15:9" pos:end="15:28">omap_badwidth_write8</name><argument_list pos:start="15:29" pos:end="15:49">(<argument pos:start="15:30" pos:end="15:35"><expr pos:start="15:30" pos:end="15:35"><name pos:start="15:30" pos:end="15:35">opaque</name></expr></argument>, <argument pos:start="15:38" pos:end="15:41"><expr pos:start="15:38" pos:end="15:41"><name pos:start="15:38" pos:end="15:41">addr</name></expr></argument>, <argument pos:start="15:44" pos:end="15:48"><expr pos:start="15:44" pos:end="15:48"><name pos:start="15:44" pos:end="15:48">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="23:5" pos:end="91:5">switch <condition pos:start="23:12" pos:end="23:19">(<expr pos:start="23:13" pos:end="23:18"><name pos:start="23:13" pos:end="23:18">offset</name></expr>)</condition> <block pos:start="23:21" pos:end="91:5">{<block_content pos:start="25:5" pos:end="89:15">

    <case pos:start="25:5" pos:end="25:14">case <expr pos:start="25:10" pos:end="25:13"><literal type="number" pos:start="25:10" pos:end="25:13">0x00</literal></expr>:</case>	<comment type="block" pos:start="25:17" pos:end="25:25">/* FRC */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:9">s</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:14">frc</name></name> <operator pos:start="27:16" pos:end="27:16">=</operator> <name pos:start="27:18" pos:end="27:22">value</name> <operator pos:start="27:24" pos:end="27:24">&amp;</operator> <literal type="number" pos:start="27:26" pos:end="27:29">0x3f</literal></expr>;</expr_stmt>

        <break pos:start="29:9" pos:end="29:14">break;</break>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><literal type="number" pos:start="31:10" pos:end="31:13">0x04</literal></expr>:</case>	<comment type="block" pos:start="31:17" pos:end="31:25">/* VRC */</comment>

        <if_stmt pos:start="33:9" pos:end="73:9"><if pos:start="33:9" pos:end="73:9">if <condition pos:start="33:12" pos:end="33:33">(<expr pos:start="33:13" pos:end="33:32"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:18">value</name> <operator pos:start="33:20" pos:end="33:20">^</operator> <name pos:start="33:22" pos:end="33:27"><name pos:start="33:22" pos:end="33:22">s</name><operator pos:start="33:23" pos:end="33:24">-&gt;</operator><name pos:start="33:25" pos:end="33:27">vrc</name></name><operator pos:start="33:28" pos:end="33:28">)</operator> <operator pos:start="33:30" pos:end="33:30">&amp;</operator> <literal type="number" pos:start="33:32" pos:end="33:32">1</literal></expr>)</condition> <block pos:start="33:35" pos:end="73:9">{<block_content pos:start="35:13" pos:end="71:55">

            <if_stmt pos:start="35:13" pos:end="71:55"><if pos:start="35:13" pos:end="67:57">if <condition pos:start="35:16" pos:end="35:26">(<expr pos:start="35:17" pos:end="35:25"><name pos:start="35:17" pos:end="35:21">value</name> <operator pos:start="35:23" pos:end="35:23">&amp;</operator> <literal type="number" pos:start="35:25" pos:end="35:25">1</literal></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="67:57"><block_content pos:start="37:17" pos:end="67:57">

                <expr_stmt pos:start="37:17" pos:end="67:57"><expr pos:start="37:17" pos:end="67:56"><call pos:start="37:17" pos:end="67:56"><name pos:start="37:17" pos:end="37:22">printf</name><argument_list pos:start="37:23" pos:end="67:56">(<argument pos:start="37:24" pos:end="37:43"><expr pos:start="37:24" pos:end="37:43"><literal type="string" pos:start="37:24" pos:end="37:43">"%s: %iHz buzz on\n"</literal></expr></argument>, <argument pos:start="37:46" pos:end="37:57"><expr pos:start="37:46" pos:end="37:57"><name pos:start="37:46" pos:end="37:57">__FUNCTION__</name></expr></argument>, <argument pos:start="37:60" pos:end="67:55"><expr pos:start="37:60" pos:end="67:55"><operator pos:start="37:60" pos:end="37:60">(</operator><name pos:start="37:61" pos:end="37:63">int</name><operator pos:start="37:64" pos:end="37:64">)</operator>

                                <comment type="block" pos:start="39:33" pos:end="39:77">/* 1.5 MHz from a 12-MHz or 13-MHz PWT_CLK */</comment>

                                <operator pos:start="41:33" pos:end="41:33">(</operator><operator pos:start="41:34" pos:end="41:34">(</operator><call pos:start="41:35" pos:end="41:58"><name pos:start="41:35" pos:end="41:50">omap_clk_getrate</name><argument_list pos:start="41:51" pos:end="41:58">(<argument pos:start="41:52" pos:end="41:57"><expr pos:start="41:52" pos:end="41:57"><name pos:start="41:52" pos:end="41:57"><name pos:start="41:52" pos:end="41:52">s</name><operator pos:start="41:53" pos:end="41:54">-&gt;</operator><name pos:start="41:55" pos:end="41:57">clk</name></name></expr></argument>)</argument_list></call> <operator pos:start="41:60" pos:end="41:61">&gt;&gt;</operator> <literal type="number" pos:start="41:63" pos:end="41:63">3</literal><operator pos:start="41:64" pos:end="41:64">)</operator> <operator pos:start="41:66" pos:end="41:66">/</operator>

                                 <comment type="block" pos:start="43:34" pos:end="43:62">/* Pre-multiplexer divider */</comment>

                                 <operator pos:start="45:34" pos:end="45:34">(</operator><ternary pos:start="45:35" pos:end="45:56"><condition pos:start="45:35" pos:end="45:48"><expr pos:start="45:35" pos:end="45:46"><operator pos:start="45:35" pos:end="45:35">(</operator><name pos:start="45:36" pos:end="45:41"><name pos:start="45:36" pos:end="45:36">s</name><operator pos:start="45:37" pos:end="45:38">-&gt;</operator><name pos:start="45:39" pos:end="45:41">gcr</name></name> <operator pos:start="45:43" pos:end="45:43">&amp;</operator> <literal type="number" pos:start="45:45" pos:end="45:45">2</literal><operator pos:start="45:46" pos:end="45:46">)</operator></expr> ?</condition><then pos:start="45:50" pos:end="45:50"> <expr pos:start="45:50" pos:end="45:50"><literal type="number" pos:start="45:50" pos:end="45:50">1</literal></expr> </then><else pos:start="45:52" pos:end="45:56">: <expr pos:start="45:54" pos:end="45:56"><literal type="number" pos:start="45:54" pos:end="45:56">154</literal></expr></else></ternary><operator pos:start="45:57" pos:end="45:57">)</operator> <operator pos:start="45:59" pos:end="45:59">/</operator>

                                 <comment type="block" pos:start="47:34" pos:end="47:57">/* Octave multiplexer */</comment>

                                 <operator pos:start="49:34" pos:end="49:34">(</operator><literal type="number" pos:start="49:35" pos:end="49:35">2</literal> <operator pos:start="49:37" pos:end="49:38">&lt;&lt;</operator> <operator pos:start="49:40" pos:end="49:40">(</operator><name pos:start="49:41" pos:end="49:45">value</name> <operator pos:start="49:47" pos:end="49:47">&amp;</operator> <literal type="number" pos:start="49:49" pos:end="49:49">3</literal><operator pos:start="49:50" pos:end="49:50">)</operator><operator pos:start="49:51" pos:end="49:51">)</operator> <operator pos:start="49:53" pos:end="49:53">*</operator>

                                 <comment type="block" pos:start="51:34" pos:end="51:54">/* 101/107 divider */</comment>

                                 <operator pos:start="53:34" pos:end="53:34">(</operator><ternary pos:start="53:35" pos:end="53:64"><condition pos:start="53:35" pos:end="53:54"><expr pos:start="53:35" pos:end="53:52"><operator pos:start="53:35" pos:end="53:35">(</operator><name pos:start="53:36" pos:end="53:40">value</name> <operator pos:start="53:42" pos:end="53:42">&amp;</operator> <operator pos:start="53:44" pos:end="53:44">(</operator><literal type="number" pos:start="53:45" pos:end="53:45">1</literal> <operator pos:start="53:47" pos:end="53:48">&lt;&lt;</operator> <literal type="number" pos:start="53:50" pos:end="53:50">2</literal><operator pos:start="53:51" pos:end="53:51">)</operator><operator pos:start="53:52" pos:end="53:52">)</operator></expr> ?</condition><then pos:start="53:56" pos:end="53:58"> <expr pos:start="53:56" pos:end="53:58"><literal type="number" pos:start="53:56" pos:end="53:58">101</literal></expr> </then><else pos:start="53:60" pos:end="53:64">: <expr pos:start="53:62" pos:end="53:64"><literal type="number" pos:start="53:62" pos:end="53:64">107</literal></expr></else></ternary><operator pos:start="53:65" pos:end="53:65">)</operator> <operator pos:start="53:67" pos:end="53:67">*</operator>

                                 <comment type="block" pos:start="55:34" pos:end="55:53">/*  49/55 divider */</comment>

                                 <operator pos:start="57:34" pos:end="57:34">(</operator><ternary pos:start="57:35" pos:end="57:63"><condition pos:start="57:35" pos:end="57:54"><expr pos:start="57:35" pos:end="57:52"><operator pos:start="57:35" pos:end="57:35">(</operator><name pos:start="57:36" pos:end="57:40">value</name> <operator pos:start="57:42" pos:end="57:42">&amp;</operator> <operator pos:start="57:44" pos:end="57:44">(</operator><literal type="number" pos:start="57:45" pos:end="57:45">1</literal> <operator pos:start="57:47" pos:end="57:48">&lt;&lt;</operator> <literal type="number" pos:start="57:50" pos:end="57:50">3</literal><operator pos:start="57:51" pos:end="57:51">)</operator><operator pos:start="57:52" pos:end="57:52">)</operator></expr> ?</condition><then pos:start="57:57" pos:end="57:58">  <expr pos:start="57:57" pos:end="57:58"><literal type="number" pos:start="57:57" pos:end="57:58">49</literal></expr> </then><else pos:start="57:60" pos:end="57:63">: <expr pos:start="57:62" pos:end="57:63"><literal type="number" pos:start="57:62" pos:end="57:63">55</literal></expr></else></ternary><operator pos:start="57:64" pos:end="57:64">)</operator> <operator pos:start="57:66" pos:end="57:66">*</operator>

                                 <comment type="block" pos:start="59:34" pos:end="59:53">/*  50/63 divider */</comment>

                                 <operator pos:start="61:34" pos:end="61:34">(</operator><ternary pos:start="61:35" pos:end="61:63"><condition pos:start="61:35" pos:end="61:54"><expr pos:start="61:35" pos:end="61:52"><operator pos:start="61:35" pos:end="61:35">(</operator><name pos:start="61:36" pos:end="61:40">value</name> <operator pos:start="61:42" pos:end="61:42">&amp;</operator> <operator pos:start="61:44" pos:end="61:44">(</operator><literal type="number" pos:start="61:45" pos:end="61:45">1</literal> <operator pos:start="61:47" pos:end="61:48">&lt;&lt;</operator> <literal type="number" pos:start="61:50" pos:end="61:50">4</literal><operator pos:start="61:51" pos:end="61:51">)</operator><operator pos:start="61:52" pos:end="61:52">)</operator></expr> ?</condition><then pos:start="61:57" pos:end="61:58">  <expr pos:start="61:57" pos:end="61:58"><literal type="number" pos:start="61:57" pos:end="61:58">50</literal></expr> </then><else pos:start="61:60" pos:end="61:63">: <expr pos:start="61:62" pos:end="61:63"><literal type="number" pos:start="61:62" pos:end="61:63">63</literal></expr></else></ternary><operator pos:start="61:64" pos:end="61:64">)</operator> <operator pos:start="61:66" pos:end="61:66">*</operator>

                                 <comment type="block" pos:start="63:34" pos:end="63:54">/*  80/127 divider */</comment>

                                 <operator pos:start="65:34" pos:end="65:34">(</operator><ternary pos:start="65:35" pos:end="65:64"><condition pos:start="65:35" pos:end="65:54"><expr pos:start="65:35" pos:end="65:52"><operator pos:start="65:35" pos:end="65:35">(</operator><name pos:start="65:36" pos:end="65:40">value</name> <operator pos:start="65:42" pos:end="65:42">&amp;</operator> <operator pos:start="65:44" pos:end="65:44">(</operator><literal type="number" pos:start="65:45" pos:end="65:45">1</literal> <operator pos:start="65:47" pos:end="65:48">&lt;&lt;</operator> <literal type="number" pos:start="65:50" pos:end="65:50">5</literal><operator pos:start="65:51" pos:end="65:51">)</operator><operator pos:start="65:52" pos:end="65:52">)</operator></expr> ?</condition><then pos:start="65:57" pos:end="65:58">  <expr pos:start="65:57" pos:end="65:58"><literal type="number" pos:start="65:57" pos:end="65:58">80</literal></expr> </then><else pos:start="65:60" pos:end="65:64">: <expr pos:start="65:62" pos:end="65:64"><literal type="number" pos:start="65:62" pos:end="65:64">127</literal></expr></else></ternary><operator pos:start="65:65" pos:end="65:65">)</operator> <operator pos:start="65:67" pos:end="65:67">/</operator>

                                 <operator pos:start="67:34" pos:end="67:34">(</operator><literal type="number" pos:start="67:35" pos:end="67:37">107</literal> <operator pos:start="67:39" pos:end="67:39">*</operator> <literal type="number" pos:start="67:41" pos:end="67:42">55</literal> <operator pos:start="67:44" pos:end="67:44">*</operator> <literal type="number" pos:start="67:46" pos:end="67:47">63</literal> <operator pos:start="67:49" pos:end="67:49">*</operator> <literal type="number" pos:start="67:51" pos:end="67:53">127</literal><operator pos:start="67:54" pos:end="67:54">)</operator><operator pos:start="67:55" pos:end="67:55">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="69:13" pos:end="71:55">else<block type="pseudo" pos:start="71:17" pos:end="71:55"><block_content pos:start="71:17" pos:end="71:55">

                <expr_stmt pos:start="71:17" pos:end="71:55"><expr pos:start="71:17" pos:end="71:54"><call pos:start="71:17" pos:end="71:54"><name pos:start="71:17" pos:end="71:22">printf</name><argument_list pos:start="71:23" pos:end="71:54">(<argument pos:start="71:24" pos:end="71:39"><expr pos:start="71:24" pos:end="71:39"><literal type="string" pos:start="71:24" pos:end="71:39">"%s: silence!\n"</literal></expr></argument>, <argument pos:start="71:42" pos:end="71:53"><expr pos:start="71:42" pos:end="71:53"><name pos:start="71:42" pos:end="71:53">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">vrc</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:22">value</name> <operator pos:start="75:24" pos:end="75:24">&amp;</operator> <literal type="number" pos:start="75:26" pos:end="75:29">0x7f</literal></expr>;</expr_stmt>

        <break pos:start="77:9" pos:end="77:14">break;</break>

    <case pos:start="79:5" pos:end="79:14">case <expr pos:start="79:10" pos:end="79:13"><literal type="number" pos:start="79:10" pos:end="79:13">0x08</literal></expr>:</case>	<comment type="block" pos:start="79:17" pos:end="79:25">/* GCR */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:27"><expr pos:start="81:9" pos:end="81:26"><name pos:start="81:9" pos:end="81:14"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:14">gcr</name></name> <operator pos:start="81:16" pos:end="81:16">=</operator> <name pos:start="81:18" pos:end="81:22">value</name> <operator pos:start="81:24" pos:end="81:24">&amp;</operator> <literal type="number" pos:start="81:26" pos:end="81:26">3</literal></expr>;</expr_stmt>

        <break pos:start="83:9" pos:end="83:14">break;</break>

    <default pos:start="85:5" pos:end="85:12">default:</default>

        <expr_stmt pos:start="87:9" pos:end="87:27"><expr pos:start="87:9" pos:end="87:26"><call pos:start="87:9" pos:end="87:26"><name pos:start="87:9" pos:end="87:20">OMAP_BAD_REG</name><argument_list pos:start="87:21" pos:end="87:26">(<argument pos:start="87:22" pos:end="87:25"><expr pos:start="87:22" pos:end="87:25"><name pos:start="87:22" pos:end="87:25">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
