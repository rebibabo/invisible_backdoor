<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7061.c" pos:tabs="8"><function pos:start="1:1" pos:end="183:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">mxf_write_partition</name><parameter_list pos:start="1:32" pos:end="5:71">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:47">AVFormatContext</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:50">s</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:63"><decl pos:start="1:53" pos:end="1:63"><type pos:start="1:53" pos:end="1:63"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:63">bodysid</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:44"><decl pos:start="3:33" pos:end="3:44"><type pos:start="3:33" pos:end="3:44"><name pos:start="3:33" pos:end="3:35">int</name></type> <name pos:start="3:37" pos:end="3:44">indexsid</name></decl></parameter>,

                                <parameter pos:start="5:33" pos:end="5:50"><decl pos:start="5:33" pos:end="5:50"><type pos:start="5:33" pos:end="5:50"><specifier pos:start="5:33" pos:end="5:37">const</specifier> <name pos:start="5:39" pos:end="5:45">uint8_t</name> <modifier pos:start="5:47" pos:end="5:47">*</modifier></type><name pos:start="5:48" pos:end="5:50">key</name></decl></parameter>, <parameter pos:start="5:53" pos:end="5:70"><decl pos:start="5:53" pos:end="5:70"><type pos:start="5:53" pos:end="5:70"><name pos:start="5:53" pos:end="5:55">int</name></type> <name pos:start="5:57" pos:end="5:70">write_metadata</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="183:1">{<block_content pos:start="9:5" pos:end="181:19">

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">MXFContext</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">mxf</name> <init pos:start="9:21" pos:end="9:34">= <expr pos:start="9:23" pos:end="9:34"><name pos:start="9:23" pos:end="9:34"><name pos:start="9:23" pos:end="9:23">s</name><operator pos:start="9:24" pos:end="9:25">-&gt;</operator><name pos:start="9:26" pos:end="9:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">AVIOContext</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:19">pb</name> <init pos:start="11:21" pos:end="11:27">= <expr pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:27"><name pos:start="11:23" pos:end="11:23">s</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:36">header_byte_count_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">unsigned</name></type> <name pos:start="15:14" pos:end="15:29">index_byte_count</name> <init pos:start="15:31" pos:end="15:33">= <expr pos:start="15:33" pos:end="15:33"><literal type="number" pos:start="15:33" pos:end="15:33">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:46"><decl pos:start="17:5" pos:end="17:45"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:29">partition_offset</name> <init pos:start="17:31" pos:end="17:45">= <expr pos:start="17:33" pos:end="17:45"><call pos:start="17:33" pos:end="17:45"><name pos:start="17:33" pos:end="17:41">avio_tell</name><argument_list pos:start="17:42" pos:end="17:45">(<argument pos:start="17:43" pos:end="17:44"><expr pos:start="17:43" pos:end="17:44"><name pos:start="17:43" pos:end="17:44">pb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="29:30"><if pos:start="21:5" pos:end="25:61">if <condition pos:start="21:8" pos:end="21:60">(<expr pos:start="21:9" pos:end="21:59"><operator pos:start="21:9" pos:end="21:9">!</operator><name pos:start="21:10" pos:end="21:34"><name pos:start="21:10" pos:end="21:12">mxf</name><operator pos:start="21:13" pos:end="21:14">-&gt;</operator><name pos:start="21:15" pos:end="21:34">edit_unit_byte_count</name></name> <operator pos:start="21:36" pos:end="21:37">&amp;&amp;</operator> <name pos:start="21:39" pos:end="21:59"><name pos:start="21:39" pos:end="21:41">mxf</name><operator pos:start="21:42" pos:end="21:43">-&gt;</operator><name pos:start="21:44" pos:end="21:59">edit_units_count</name></name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="25:61"><block_content pos:start="23:9" pos:end="25:61">

        <expr_stmt pos:start="23:9" pos:end="25:61"><expr pos:start="23:9" pos:end="25:60"><name pos:start="23:9" pos:end="23:24">index_byte_count</name> <operator pos:start="23:26" pos:end="23:26">=</operator> <literal type="number" pos:start="23:28" pos:end="23:31">85</literal> <operator pos:start="23:31" pos:end="23:31">+</operator> <literal type="number" pos:start="23:33" pos:end="23:35">12</literal><operator pos:start="23:35" pos:end="23:35">+</operator><operator pos:start="23:36" pos:end="23:36">(</operator><name pos:start="23:37" pos:end="23:49"><name pos:start="23:37" pos:end="23:37">s</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:49">nb_streams</name></name><operator pos:start="23:50" pos:end="23:50">+</operator><literal type="number" pos:start="23:51" pos:end="23:51">1</literal><operator pos:start="23:52" pos:end="23:52">)</operator><operator pos:start="23:53" pos:end="23:53">*</operator><literal type="number" pos:start="23:54" pos:end="23:56">6</literal> <operator pos:start="23:56" pos:end="23:56">+</operator>

            <literal type="number" pos:start="25:13" pos:end="25:15">12</literal><operator pos:start="25:15" pos:end="25:15">+</operator><name pos:start="25:16" pos:end="25:36"><name pos:start="25:16" pos:end="25:18">mxf</name><operator pos:start="25:19" pos:end="25:20">-&gt;</operator><name pos:start="25:21" pos:end="25:36">edit_units_count</name></name><operator pos:start="25:37" pos:end="25:37">*</operator><operator pos:start="25:38" pos:end="25:38">(</operator><literal type="number" pos:start="25:39" pos:end="25:41">11</literal><operator pos:start="25:41" pos:end="25:41">+</operator><name pos:start="25:42" pos:end="25:57"><name pos:start="25:42" pos:end="25:44">mxf</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:57">slice_count</name></name><operator pos:start="25:58" pos:end="25:58">*</operator><literal type="number" pos:start="25:59" pos:end="25:59">4</literal><operator pos:start="25:60" pos:end="25:60">)</operator></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="27:5" pos:end="29:30">else if <condition pos:start="27:13" pos:end="27:51">(<expr pos:start="27:14" pos:end="27:50"><name pos:start="27:14" pos:end="27:38"><name pos:start="27:14" pos:end="27:16">mxf</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:38">edit_unit_byte_count</name></name> <operator pos:start="27:40" pos:end="27:41">&amp;&amp;</operator> <name pos:start="27:43" pos:end="27:50">indexsid</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:30"><block_content pos:start="29:9" pos:end="29:30">

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:24">index_byte_count</name> <operator pos:start="29:26" pos:end="29:26">=</operator> <literal type="number" pos:start="29:28" pos:end="29:29">80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="33:5" pos:end="41:5"><if pos:start="33:5" pos:end="41:5">if <condition pos:start="33:8" pos:end="33:25">(<expr pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:24">index_byte_count</name></expr>)</condition> <block pos:start="33:27" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:60">

        <comment type="line" pos:start="35:9" pos:end="35:33">// add encoded ber length</comment>

        <expr_stmt pos:start="37:9" pos:end="37:66"><expr pos:start="37:9" pos:end="37:65"><name pos:start="37:9" pos:end="37:24">index_byte_count</name> <operator pos:start="37:26" pos:end="37:27">+=</operator> <literal type="number" pos:start="37:29" pos:end="37:32">16</literal> <operator pos:start="37:32" pos:end="37:32">+</operator> <call pos:start="37:34" pos:end="37:65"><name pos:start="37:34" pos:end="37:47">klv_ber_length</name><argument_list pos:start="37:48" pos:end="37:65">(<argument pos:start="37:49" pos:end="37:64"><expr pos:start="37:49" pos:end="37:64"><name pos:start="37:49" pos:end="37:64">index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:24">index_byte_count</name> <operator pos:start="39:26" pos:end="39:27">+=</operator> <call pos:start="39:29" pos:end="39:59"><name pos:start="39:29" pos:end="39:41">klv_fill_size</name><argument_list pos:start="39:42" pos:end="39:59">(<argument pos:start="39:43" pos:end="39:58"><expr pos:start="39:43" pos:end="39:58"><name pos:start="39:43" pos:end="39:58">index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="45:5" pos:end="57:5"><if pos:start="45:5" pos:end="57:5">if <condition pos:start="45:8" pos:end="45:45">(<expr pos:start="45:9" pos:end="45:44"><operator pos:start="45:9" pos:end="45:9">!</operator><call pos:start="45:10" pos:end="45:44"><name pos:start="45:10" pos:end="45:15">memcmp</name><argument_list pos:start="45:16" pos:end="45:44">(<argument pos:start="45:17" pos:end="45:19"><expr pos:start="45:17" pos:end="45:19"><name pos:start="45:17" pos:end="45:19">key</name></expr></argument>, <argument pos:start="45:22" pos:end="45:39"><expr pos:start="45:22" pos:end="45:39"><name pos:start="45:22" pos:end="45:39">body_partition_key</name></expr></argument>, <argument pos:start="45:42" pos:end="45:43"><expr pos:start="45:42" pos:end="45:43"><literal type="number" pos:start="45:42" pos:end="45:43">16</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="45:47" pos:end="57:5">{<block_content pos:start="47:9" pos:end="55:84">

        <expr_stmt pos:start="47:9" pos:end="53:60"><expr pos:start="47:9" pos:end="53:59"><name pos:start="47:9" pos:end="47:34"><name pos:start="47:9" pos:end="47:11">mxf</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:34">body_partition_offset</name></name> <operator pos:start="47:36" pos:end="47:36">=</operator>

            <call pos:start="49:13" pos:end="53:59"><name pos:start="49:13" pos:end="49:22">av_realloc</name><argument_list pos:start="49:23" pos:end="53:59">(<argument pos:start="49:24" pos:end="49:49"><expr pos:start="49:24" pos:end="49:49"><name pos:start="49:24" pos:end="49:49"><name pos:start="49:24" pos:end="49:26">mxf</name><operator pos:start="49:27" pos:end="49:28">-&gt;</operator><name pos:start="49:29" pos:end="49:49">body_partition_offset</name></name></expr></argument>,

                       <argument pos:start="51:24" pos:end="53:58"><expr pos:start="51:24" pos:end="53:58"><operator pos:start="51:24" pos:end="51:24">(</operator><name pos:start="51:25" pos:end="51:50"><name pos:start="51:25" pos:end="51:27">mxf</name><operator pos:start="51:28" pos:end="51:29">-&gt;</operator><name pos:start="51:30" pos:end="51:50">body_partitions_count</name></name><operator pos:start="51:51" pos:end="51:51">+</operator><literal type="number" pos:start="51:52" pos:end="51:52">1</literal><operator pos:start="51:53" pos:end="51:53">)</operator><operator pos:start="51:54" pos:end="51:54">*</operator>

                       <sizeof pos:start="53:24" pos:end="53:58">sizeof<argument_list pos:start="53:30" pos:end="53:58">(<argument pos:start="53:31" pos:end="53:57"><expr pos:start="53:31" pos:end="53:57"><operator pos:start="53:31" pos:end="53:31">*</operator><name pos:start="53:32" pos:end="53:57"><name pos:start="53:32" pos:end="53:34">mxf</name><operator pos:start="53:35" pos:end="53:36">-&gt;</operator><name pos:start="53:37" pos:end="53:57">body_partition_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:84"><expr pos:start="55:9" pos:end="55:83"><name pos:start="55:9" pos:end="55:64"><name pos:start="55:9" pos:end="55:11">mxf</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:34">body_partition_offset</name><index pos:start="55:35" pos:end="55:64">[<expr pos:start="55:36" pos:end="55:63"><name pos:start="55:36" pos:end="55:61"><name pos:start="55:36" pos:end="55:38">mxf</name><operator pos:start="55:39" pos:end="55:40">-&gt;</operator><name pos:start="55:41" pos:end="55:61">body_partitions_count</name></name><operator pos:start="55:62" pos:end="55:63">++</operator></expr>]</index></name> <operator pos:start="55:66" pos:end="55:66">=</operator> <name pos:start="55:68" pos:end="55:83">partition_offset</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="61:5" pos:end="61:16">// write klv</comment>

    <expr_stmt pos:start="63:5" pos:end="63:28"><expr pos:start="63:5" pos:end="63:27"><call pos:start="63:5" pos:end="63:27"><name pos:start="63:5" pos:end="63:14">avio_write</name><argument_list pos:start="63:15" pos:end="63:27">(<argument pos:start="63:16" pos:end="63:17"><expr pos:start="63:16" pos:end="63:17"><name pos:start="63:16" pos:end="63:17">pb</name></expr></argument>, <argument pos:start="63:20" pos:end="63:22"><expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:22">key</name></expr></argument>, <argument pos:start="63:25" pos:end="63:26"><expr pos:start="63:25" pos:end="63:26"><literal type="number" pos:start="63:25" pos:end="63:26">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:70"><expr pos:start="65:5" pos:end="65:69"><call pos:start="65:5" pos:end="65:69"><name pos:start="65:5" pos:end="65:25">klv_encode_ber_length</name><argument_list pos:start="65:26" pos:end="65:69">(<argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">pb</name></expr></argument>, <argument pos:start="65:31" pos:end="65:68"><expr pos:start="65:31" pos:end="65:68"><literal type="number" pos:start="65:31" pos:end="65:34">88</literal> <operator pos:start="65:34" pos:end="65:34">+</operator> <literal type="number" pos:start="65:36" pos:end="65:37">16</literal> <operator pos:start="65:39" pos:end="65:39">*</operator> <name pos:start="65:41" pos:end="65:68"><name pos:start="65:41" pos:end="65:43">mxf</name><operator pos:start="65:44" pos:end="65:45">-&gt;</operator><name pos:start="65:46" pos:end="65:68">essence_container_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="69:5" pos:end="69:28">// write partition value</comment>

    <expr_stmt pos:start="71:5" pos:end="71:21"><expr pos:start="71:5" pos:end="71:20"><call pos:start="71:5" pos:end="71:20"><name pos:start="71:5" pos:end="71:13">avio_wb16</name><argument_list pos:start="71:14" pos:end="71:20">(<argument pos:start="71:15" pos:end="71:16"><expr pos:start="71:15" pos:end="71:16"><name pos:start="71:15" pos:end="71:16">pb</name></expr></argument>, <argument pos:start="71:19" pos:end="71:19"><expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="71:23" pos:end="71:37">// majorVersion</comment>

    <expr_stmt pos:start="73:5" pos:end="73:21"><expr pos:start="73:5" pos:end="73:20"><call pos:start="73:5" pos:end="73:20"><name pos:start="73:5" pos:end="73:13">avio_wb16</name><argument_list pos:start="73:14" pos:end="73:20">(<argument pos:start="73:15" pos:end="73:16"><expr pos:start="73:15" pos:end="73:16"><name pos:start="73:15" pos:end="73:16">pb</name></expr></argument>, <argument pos:start="73:19" pos:end="73:19"><expr pos:start="73:19" pos:end="73:19"><literal type="number" pos:start="73:19" pos:end="73:19">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="73:23" pos:end="73:37">// minorVersion</comment>

    <expr_stmt pos:start="75:5" pos:end="75:28"><expr pos:start="75:5" pos:end="75:27"><call pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:13">avio_wb32</name><argument_list pos:start="75:14" pos:end="75:27">(<argument pos:start="75:15" pos:end="75:16"><expr pos:start="75:15" pos:end="75:16"><name pos:start="75:15" pos:end="75:16">pb</name></expr></argument>, <argument pos:start="75:19" pos:end="75:26"><expr pos:start="75:19" pos:end="75:26"><name pos:start="75:19" pos:end="75:26">KAG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="75:30" pos:end="75:39">// KAGSize</comment>



    <expr_stmt pos:start="79:5" pos:end="79:36"><expr pos:start="79:5" pos:end="79:35"><call pos:start="79:5" pos:end="79:35"><name pos:start="79:5" pos:end="79:13">avio_wb64</name><argument_list pos:start="79:14" pos:end="79:35">(<argument pos:start="79:15" pos:end="79:16"><expr pos:start="79:15" pos:end="79:16"><name pos:start="79:15" pos:end="79:16">pb</name></expr></argument>, <argument pos:start="79:19" pos:end="79:34"><expr pos:start="79:19" pos:end="79:34"><name pos:start="79:19" pos:end="79:34">partition_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="79:38" pos:end="79:53">// ThisPartition</comment>



    <if_stmt pos:start="83:5" pos:end="93:25"><if pos:start="83:5" pos:end="85:80">if <condition pos:start="83:8" pos:end="83:79">(<expr pos:start="83:9" pos:end="83:78"><operator pos:start="83:9" pos:end="83:9">!</operator><call pos:start="83:10" pos:end="83:44"><name pos:start="83:10" pos:end="83:15">memcmp</name><argument_list pos:start="83:16" pos:end="83:44">(<argument pos:start="83:17" pos:end="83:19"><expr pos:start="83:17" pos:end="83:19"><name pos:start="83:17" pos:end="83:19">key</name></expr></argument>, <argument pos:start="83:22" pos:end="83:39"><expr pos:start="83:22" pos:end="83:39"><name pos:start="83:22" pos:end="83:39">body_partition_key</name></expr></argument>, <argument pos:start="83:42" pos:end="83:43"><expr pos:start="83:42" pos:end="83:43"><literal type="number" pos:start="83:42" pos:end="83:43">16</literal></expr></argument>)</argument_list></call> <operator pos:start="83:46" pos:end="83:47">&amp;&amp;</operator> <name pos:start="83:49" pos:end="83:74"><name pos:start="83:49" pos:end="83:51">mxf</name><operator pos:start="83:52" pos:end="83:53">-&gt;</operator><name pos:start="83:54" pos:end="83:74">body_partitions_count</name></name> <operator pos:start="83:76" pos:end="83:76">&gt;</operator> <literal type="number" pos:start="83:78" pos:end="83:78">1</literal></expr>)</condition><block type="pseudo" pos:start="85:9" pos:end="85:80"><block_content pos:start="85:9" pos:end="85:80">

        <expr_stmt pos:start="85:9" pos:end="85:80"><expr pos:start="85:9" pos:end="85:79"><call pos:start="85:9" pos:end="85:79"><name pos:start="85:9" pos:end="85:17">avio_wb64</name><argument_list pos:start="85:18" pos:end="85:79">(<argument pos:start="85:19" pos:end="85:20"><expr pos:start="85:19" pos:end="85:20"><name pos:start="85:19" pos:end="85:20">pb</name></expr></argument>, <argument pos:start="85:23" pos:end="85:78"><expr pos:start="85:23" pos:end="85:78"><name pos:start="85:23" pos:end="85:78"><name pos:start="85:23" pos:end="85:25">mxf</name><operator pos:start="85:26" pos:end="85:27">-&gt;</operator><name pos:start="85:28" pos:end="85:48">body_partition_offset</name><index pos:start="85:49" pos:end="85:78">[<expr pos:start="85:50" pos:end="85:77"><name pos:start="85:50" pos:end="85:75"><name pos:start="85:50" pos:end="85:52">mxf</name><operator pos:start="85:53" pos:end="85:54">-&gt;</operator><name pos:start="85:55" pos:end="85:75">body_partitions_count</name></name><operator pos:start="85:76" pos:end="85:76">-</operator><literal type="number" pos:start="85:77" pos:end="85:77">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="85:82" pos:end="85:101">// PreviousPartition</comment>

    <if type="elseif" pos:start="87:5" pos:end="89:80">else if <condition pos:start="87:13" pos:end="87:82">(<expr pos:start="87:14" pos:end="87:81"><operator pos:start="87:14" pos:end="87:14">!</operator><call pos:start="87:15" pos:end="87:51"><name pos:start="87:15" pos:end="87:20">memcmp</name><argument_list pos:start="87:21" pos:end="87:51">(<argument pos:start="87:22" pos:end="87:24"><expr pos:start="87:22" pos:end="87:24"><name pos:start="87:22" pos:end="87:24">key</name></expr></argument>, <argument pos:start="87:27" pos:end="87:46"><expr pos:start="87:27" pos:end="87:46"><name pos:start="87:27" pos:end="87:46">footer_partition_key</name></expr></argument>, <argument pos:start="87:49" pos:end="87:50"><expr pos:start="87:49" pos:end="87:50"><literal type="number" pos:start="87:49" pos:end="87:50">16</literal></expr></argument>)</argument_list></call> <operator pos:start="87:53" pos:end="87:54">&amp;&amp;</operator> <name pos:start="87:56" pos:end="87:81"><name pos:start="87:56" pos:end="87:58">mxf</name><operator pos:start="87:59" pos:end="87:60">-&gt;</operator><name pos:start="87:61" pos:end="87:81">body_partitions_count</name></name></expr>)</condition><block type="pseudo" pos:start="89:9" pos:end="89:80"><block_content pos:start="89:9" pos:end="89:80">

        <expr_stmt pos:start="89:9" pos:end="89:80"><expr pos:start="89:9" pos:end="89:79"><call pos:start="89:9" pos:end="89:79"><name pos:start="89:9" pos:end="89:17">avio_wb64</name><argument_list pos:start="89:18" pos:end="89:79">(<argument pos:start="89:19" pos:end="89:20"><expr pos:start="89:19" pos:end="89:20"><name pos:start="89:19" pos:end="89:20">pb</name></expr></argument>, <argument pos:start="89:23" pos:end="89:78"><expr pos:start="89:23" pos:end="89:78"><name pos:start="89:23" pos:end="89:78"><name pos:start="89:23" pos:end="89:25">mxf</name><operator pos:start="89:26" pos:end="89:27">-&gt;</operator><name pos:start="89:28" pos:end="89:48">body_partition_offset</name><index pos:start="89:49" pos:end="89:78">[<expr pos:start="89:50" pos:end="89:77"><name pos:start="89:50" pos:end="89:75"><name pos:start="89:50" pos:end="89:52">mxf</name><operator pos:start="89:53" pos:end="89:54">-&gt;</operator><name pos:start="89:55" pos:end="89:75">body_partitions_count</name></name><operator pos:start="89:76" pos:end="89:76">-</operator><literal type="number" pos:start="89:77" pos:end="89:77">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="89:82" pos:end="89:101">// PreviousPartition</comment>

    <else pos:start="91:5" pos:end="93:25">else<block type="pseudo" pos:start="93:9" pos:end="93:25"><block_content pos:start="93:9" pos:end="93:25">

        <expr_stmt pos:start="93:9" pos:end="93:25"><expr pos:start="93:9" pos:end="93:24"><call pos:start="93:9" pos:end="93:24"><name pos:start="93:9" pos:end="93:17">avio_wb64</name><argument_list pos:start="93:18" pos:end="93:24">(<argument pos:start="93:19" pos:end="93:20"><expr pos:start="93:19" pos:end="93:20"><name pos:start="93:19" pos:end="93:20">pb</name></expr></argument>, <argument pos:start="93:23" pos:end="93:23"><expr pos:start="93:23" pos:end="93:23"><literal type="number" pos:start="93:23" pos:end="93:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:48"><expr pos:start="97:5" pos:end="97:47"><call pos:start="97:5" pos:end="97:47"><name pos:start="97:5" pos:end="97:13">avio_wb64</name><argument_list pos:start="97:14" pos:end="97:47">(<argument pos:start="97:15" pos:end="97:16"><expr pos:start="97:15" pos:end="97:16"><name pos:start="97:15" pos:end="97:16">pb</name></expr></argument>, <argument pos:start="97:19" pos:end="97:46"><expr pos:start="97:19" pos:end="97:46"><name pos:start="97:19" pos:end="97:46"><name pos:start="97:19" pos:end="97:21">mxf</name><operator pos:start="97:22" pos:end="97:23">-&gt;</operator><name pos:start="97:24" pos:end="97:46">footer_partition_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="97:50" pos:end="97:67">// footerPartition</comment>



    <comment type="line" pos:start="101:5" pos:end="101:17">// set offset</comment>

    <expr_stmt pos:start="103:5" pos:end="103:45"><expr pos:start="103:5" pos:end="103:44"><name pos:start="103:5" pos:end="103:28">header_byte_count_offset</name> <operator pos:start="103:30" pos:end="103:30">=</operator> <call pos:start="103:32" pos:end="103:44"><name pos:start="103:32" pos:end="103:40">avio_tell</name><argument_list pos:start="103:41" pos:end="103:44">(<argument pos:start="103:42" pos:end="103:43"><expr pos:start="103:42" pos:end="103:43"><name pos:start="103:42" pos:end="103:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:21"><expr pos:start="105:5" pos:end="105:20"><call pos:start="105:5" pos:end="105:20"><name pos:start="105:5" pos:end="105:13">avio_wb64</name><argument_list pos:start="105:14" pos:end="105:20">(<argument pos:start="105:15" pos:end="105:16"><expr pos:start="105:15" pos:end="105:16"><name pos:start="105:15" pos:end="105:16">pb</name></expr></argument>, <argument pos:start="105:19" pos:end="105:19"><expr pos:start="105:19" pos:end="105:19"><literal type="number" pos:start="105:19" pos:end="105:19">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="105:23" pos:end="105:54">// headerByteCount, update later</comment>



    <comment type="line" pos:start="109:5" pos:end="109:17">// indexTable</comment>

    <expr_stmt pos:start="111:5" pos:end="111:36"><expr pos:start="111:5" pos:end="111:35"><call pos:start="111:5" pos:end="111:35"><name pos:start="111:5" pos:end="111:13">avio_wb64</name><argument_list pos:start="111:14" pos:end="111:35">(<argument pos:start="111:15" pos:end="111:16"><expr pos:start="111:15" pos:end="111:16"><name pos:start="111:15" pos:end="111:16">pb</name></expr></argument>, <argument pos:start="111:19" pos:end="111:34"><expr pos:start="111:19" pos:end="111:34"><name pos:start="111:19" pos:end="111:34">index_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="111:38" pos:end="111:54">// indexByteCount</comment>

    <expr_stmt pos:start="113:5" pos:end="113:51"><expr pos:start="113:5" pos:end="113:50"><call pos:start="113:5" pos:end="113:50"><name pos:start="113:5" pos:end="113:13">avio_wb32</name><argument_list pos:start="113:14" pos:end="113:50">(<argument pos:start="113:15" pos:end="113:16"><expr pos:start="113:15" pos:end="113:16"><name pos:start="113:15" pos:end="113:16">pb</name></expr></argument>, <argument pos:start="113:19" pos:end="113:49"><expr pos:start="113:19" pos:end="113:49"><ternary pos:start="113:19" pos:end="113:49"><condition pos:start="113:19" pos:end="113:36"><expr pos:start="113:19" pos:end="113:34"><name pos:start="113:19" pos:end="113:34">index_byte_count</name></expr> ?</condition><then pos:start="113:38" pos:end="113:45"> <expr pos:start="113:38" pos:end="113:45"><name pos:start="113:38" pos:end="113:45">indexsid</name></expr> </then><else pos:start="113:47" pos:end="113:49">: <expr pos:start="113:49" pos:end="113:49"><literal type="number" pos:start="113:49" pos:end="113:49">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="113:53" pos:end="113:63">// indexSID</comment>



    <comment type="line" pos:start="117:5" pos:end="117:17">// BodyOffset</comment>

    <if_stmt pos:start="119:5" pos:end="125:25"><if pos:start="119:5" pos:end="123:5">if <condition pos:start="119:8" pos:end="119:71">(<expr pos:start="119:9" pos:end="119:70"><name pos:start="119:9" pos:end="119:15">bodysid</name> <operator pos:start="119:17" pos:end="119:18">&amp;&amp;</operator> <name pos:start="119:20" pos:end="119:40"><name pos:start="119:20" pos:end="119:22">mxf</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:40">edit_units_count</name></name> <operator pos:start="119:42" pos:end="119:43">&amp;&amp;</operator> <name pos:start="119:45" pos:end="119:70"><name pos:start="119:45" pos:end="119:47">mxf</name><operator pos:start="119:48" pos:end="119:49">-&gt;</operator><name pos:start="119:50" pos:end="119:70">body_partitions_count</name></name></expr>)</condition> <block pos:start="119:73" pos:end="123:5">{<block_content pos:start="121:9" pos:end="121:40">

        <expr_stmt pos:start="121:9" pos:end="121:40"><expr pos:start="121:9" pos:end="121:39"><call pos:start="121:9" pos:end="121:39"><name pos:start="121:9" pos:end="121:17">avio_wb64</name><argument_list pos:start="121:18" pos:end="121:39">(<argument pos:start="121:19" pos:end="121:20"><expr pos:start="121:19" pos:end="121:20"><name pos:start="121:19" pos:end="121:20">pb</name></expr></argument>, <argument pos:start="121:23" pos:end="121:38"><expr pos:start="121:23" pos:end="121:38"><name pos:start="121:23" pos:end="121:38"><name pos:start="121:23" pos:end="121:25">mxf</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:38">body_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="123:7" pos:end="125:25">else<block type="pseudo" pos:start="125:9" pos:end="125:25"><block_content pos:start="125:9" pos:end="125:25">

        <expr_stmt pos:start="125:9" pos:end="125:25"><expr pos:start="125:9" pos:end="125:24"><call pos:start="125:9" pos:end="125:24"><name pos:start="125:9" pos:end="125:17">avio_wb64</name><argument_list pos:start="125:18" pos:end="125:24">(<argument pos:start="125:19" pos:end="125:20"><expr pos:start="125:19" pos:end="125:20"><name pos:start="125:19" pos:end="125:20">pb</name></expr></argument>, <argument pos:start="125:23" pos:end="125:23"><expr pos:start="125:23" pos:end="125:23"><literal type="number" pos:start="125:23" pos:end="125:23">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:27"><expr pos:start="129:5" pos:end="129:26"><call pos:start="129:5" pos:end="129:26"><name pos:start="129:5" pos:end="129:13">avio_wb32</name><argument_list pos:start="129:14" pos:end="129:26">(<argument pos:start="129:15" pos:end="129:16"><expr pos:start="129:15" pos:end="129:16"><name pos:start="129:15" pos:end="129:16">pb</name></expr></argument>, <argument pos:start="129:19" pos:end="129:25"><expr pos:start="129:19" pos:end="129:25"><name pos:start="129:19" pos:end="129:25">bodysid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="129:29" pos:end="129:38">// bodySID</comment>



    <comment type="line" pos:start="133:5" pos:end="133:26">// operational pattern</comment>

    <expr_stmt pos:start="135:5" pos:end="135:32"><expr pos:start="135:5" pos:end="135:31"><call pos:start="135:5" pos:end="135:31"><name pos:start="135:5" pos:end="135:14">avio_write</name><argument_list pos:start="135:15" pos:end="135:31">(<argument pos:start="135:16" pos:end="135:17"><expr pos:start="135:16" pos:end="135:17"><name pos:start="135:16" pos:end="135:17">pb</name></expr></argument>, <argument pos:start="135:20" pos:end="135:26"><expr pos:start="135:20" pos:end="135:26"><name pos:start="135:20" pos:end="135:26">op1a_ul</name></expr></argument>, <argument pos:start="135:29" pos:end="135:30"><expr pos:start="135:29" pos:end="135:30"><literal type="number" pos:start="135:29" pos:end="135:30">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="139:5" pos:end="139:24">// essence container</comment>

    <expr_stmt pos:start="141:5" pos:end="141:40"><expr pos:start="141:5" pos:end="141:39"><call pos:start="141:5" pos:end="141:39"><name pos:start="141:5" pos:end="141:36">mxf_write_essence_container_refs</name><argument_list pos:start="141:37" pos:end="141:39">(<argument pos:start="141:38" pos:end="141:38"><expr pos:start="141:38" pos:end="141:38"><name pos:start="141:38" pos:end="141:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="145:5" pos:end="177:5"><if pos:start="145:5" pos:end="177:5">if <condition pos:start="145:8" pos:end="145:23">(<expr pos:start="145:9" pos:end="145:22"><name pos:start="145:9" pos:end="145:22">write_metadata</name></expr>)</condition> <block pos:start="145:25" pos:end="177:5">{<block_content pos:start="149:9" pos:end="175:37">

        <comment type="line" pos:start="147:9" pos:end="147:75">// mark the start of the headermetadata and calculate metadata size</comment>

        <decl_stmt pos:start="149:9" pos:end="149:27"><decl pos:start="149:9" pos:end="149:19"><type pos:start="149:9" pos:end="149:15"><name pos:start="149:9" pos:end="149:15">int64_t</name></type> <name pos:start="149:17" pos:end="149:19">pos</name></decl>, <decl pos:start="149:22" pos:end="149:26"><type ref="prev" pos:start="149:9" pos:end="149:15"/><name pos:start="149:22" pos:end="149:26">start</name></decl>;</decl_stmt>

        <decl_stmt pos:start="151:9" pos:end="151:35"><decl pos:start="151:9" pos:end="151:34"><type pos:start="151:9" pos:end="151:16"><name pos:start="151:9" pos:end="151:16">unsigned</name></type> <name pos:start="151:18" pos:end="151:34">header_byte_count</name></decl>;</decl_stmt>



        <expr_stmt pos:start="155:9" pos:end="155:30"><expr pos:start="155:9" pos:end="155:29"><call pos:start="155:9" pos:end="155:29"><name pos:start="155:9" pos:end="155:26">mxf_write_klv_fill</name><argument_list pos:start="155:27" pos:end="155:29">(<argument pos:start="155:28" pos:end="155:28"><expr pos:start="155:28" pos:end="155:28"><name pos:start="155:28" pos:end="155:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:33"><expr pos:start="157:9" pos:end="157:32"><name pos:start="157:9" pos:end="157:13">start</name> <operator pos:start="157:15" pos:end="157:15">=</operator> <call pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:25">avio_tell</name><argument_list pos:start="157:26" pos:end="157:32">(<argument pos:start="157:27" pos:end="157:31"><expr pos:start="157:27" pos:end="157:31"><name pos:start="157:27" pos:end="157:31"><name pos:start="157:27" pos:end="157:27">s</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:31">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:33"><expr pos:start="159:9" pos:end="159:32"><call pos:start="159:9" pos:end="159:32"><name pos:start="159:9" pos:end="159:29">mxf_write_primer_pack</name><argument_list pos:start="159:30" pos:end="159:32">(<argument pos:start="159:31" pos:end="159:31"><expr pos:start="159:31" pos:end="159:31"><name pos:start="159:31" pos:end="159:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:42"><expr pos:start="161:9" pos:end="161:41"><call pos:start="161:9" pos:end="161:41"><name pos:start="161:9" pos:end="161:38">mxf_write_header_metadata_sets</name><argument_list pos:start="161:39" pos:end="161:41">(<argument pos:start="161:40" pos:end="161:40"><expr pos:start="161:40" pos:end="161:40"><name pos:start="161:40" pos:end="161:40">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:31"><expr pos:start="163:9" pos:end="163:30"><name pos:start="163:9" pos:end="163:11">pos</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:30"><name pos:start="163:15" pos:end="163:23">avio_tell</name><argument_list pos:start="163:24" pos:end="163:30">(<argument pos:start="163:25" pos:end="163:29"><expr pos:start="163:25" pos:end="163:29"><name pos:start="163:25" pos:end="163:29"><name pos:start="163:25" pos:end="163:25">s</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:29">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:61"><expr pos:start="165:9" pos:end="165:60"><name pos:start="165:9" pos:end="165:25">header_byte_count</name> <operator pos:start="165:27" pos:end="165:27">=</operator> <name pos:start="165:29" pos:end="165:31">pos</name> <operator pos:start="165:33" pos:end="165:33">-</operator> <name pos:start="165:35" pos:end="165:39">start</name> <operator pos:start="165:41" pos:end="165:41">+</operator> <call pos:start="165:43" pos:end="165:60"><name pos:start="165:43" pos:end="165:55">klv_fill_size</name><argument_list pos:start="165:56" pos:end="165:60">(<argument pos:start="165:57" pos:end="165:59"><expr pos:start="165:57" pos:end="165:59"><name pos:start="165:57" pos:end="165:59">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="line" pos:start="169:9" pos:end="169:35">// update header_byte_count</comment>

        <expr_stmt pos:start="171:9" pos:end="171:58"><expr pos:start="171:9" pos:end="171:57"><call pos:start="171:9" pos:end="171:57"><name pos:start="171:9" pos:end="171:17">avio_seek</name><argument_list pos:start="171:18" pos:end="171:57">(<argument pos:start="171:19" pos:end="171:20"><expr pos:start="171:19" pos:end="171:20"><name pos:start="171:19" pos:end="171:20">pb</name></expr></argument>, <argument pos:start="171:23" pos:end="171:46"><expr pos:start="171:23" pos:end="171:46"><name pos:start="171:23" pos:end="171:46">header_byte_count_offset</name></expr></argument>, <argument pos:start="171:49" pos:end="171:56"><expr pos:start="171:49" pos:end="171:56"><name pos:start="171:49" pos:end="171:56">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="173:9" pos:end="173:41"><expr pos:start="173:9" pos:end="173:40"><call pos:start="173:9" pos:end="173:40"><name pos:start="173:9" pos:end="173:17">avio_wb64</name><argument_list pos:start="173:18" pos:end="173:40">(<argument pos:start="173:19" pos:end="173:20"><expr pos:start="173:19" pos:end="173:20"><name pos:start="173:19" pos:end="173:20">pb</name></expr></argument>, <argument pos:start="173:23" pos:end="173:39"><expr pos:start="173:23" pos:end="173:39"><name pos:start="173:23" pos:end="173:39">header_byte_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:37"><expr pos:start="175:9" pos:end="175:36"><call pos:start="175:9" pos:end="175:36"><name pos:start="175:9" pos:end="175:17">avio_seek</name><argument_list pos:start="175:18" pos:end="175:36">(<argument pos:start="175:19" pos:end="175:20"><expr pos:start="175:19" pos:end="175:20"><name pos:start="175:19" pos:end="175:20">pb</name></expr></argument>, <argument pos:start="175:23" pos:end="175:25"><expr pos:start="175:23" pos:end="175:25"><name pos:start="175:23" pos:end="175:25">pos</name></expr></argument>, <argument pos:start="175:28" pos:end="175:35"><expr pos:start="175:28" pos:end="175:35"><name pos:start="175:28" pos:end="175:35">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="181:5" pos:end="181:19"><expr pos:start="181:5" pos:end="181:18"><call pos:start="181:5" pos:end="181:18"><name pos:start="181:5" pos:end="181:14">avio_flush</name><argument_list pos:start="181:15" pos:end="181:18">(<argument pos:start="181:16" pos:end="181:17"><expr pos:start="181:16" pos:end="181:17"><name pos:start="181:16" pos:end="181:17">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
