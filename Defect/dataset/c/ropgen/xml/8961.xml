<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8961.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">ioh3420_initfn</name><parameter_list pos:start="1:26" pos:end="1:39">(<parameter pos:start="1:27" pos:end="1:38"><decl pos:start="1:27" pos:end="1:38"><type pos:start="1:27" pos:end="1:37"><name pos:start="1:27" pos:end="1:35">PCIDevice</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">d</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:14">

    <decl_stmt pos:start="5:5" pos:end="5:49"><decl pos:start="5:5" pos:end="5:48"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:13">PCIBridge</name><modifier pos:start="5:14" pos:end="5:14">*</modifier></type> <name pos:start="5:16" pos:end="5:17">br</name> <init pos:start="5:19" pos:end="5:48">= <expr pos:start="5:21" pos:end="5:48"><call pos:start="5:21" pos:end="5:48"><name pos:start="5:21" pos:end="5:29">DO_UPCAST</name><argument_list pos:start="5:30" pos:end="5:48">(<argument pos:start="5:31" pos:end="5:39"><expr pos:start="5:31" pos:end="5:39"><name pos:start="5:31" pos:end="5:39">PCIBridge</name></expr></argument>, <argument pos:start="5:42" pos:end="5:44"><expr pos:start="5:42" pos:end="5:44"><name pos:start="5:42" pos:end="5:44">dev</name></expr></argument>, <argument pos:start="5:47" pos:end="5:47"><expr pos:start="5:47" pos:end="5:47"><name pos:start="5:47" pos:end="5:47">d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:46"><decl pos:start="7:5" pos:end="7:45"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">PCIEPort</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:15">p</name> <init pos:start="7:17" pos:end="7:45">= <expr pos:start="7:19" pos:end="7:45"><call pos:start="7:19" pos:end="7:45"><name pos:start="7:19" pos:end="7:27">DO_UPCAST</name><argument_list pos:start="7:28" pos:end="7:45">(<argument pos:start="7:29" pos:end="7:36"><expr pos:start="7:29" pos:end="7:36"><name pos:start="7:29" pos:end="7:36">PCIEPort</name></expr></argument>, <argument pos:start="7:39" pos:end="7:40"><expr pos:start="7:39" pos:end="7:40"><name pos:start="7:39" pos:end="7:40">br</name></expr></argument>, <argument pos:start="7:43" pos:end="7:44"><expr pos:start="7:43" pos:end="7:44"><name pos:start="7:43" pos:end="7:44">br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:47"><decl pos:start="9:5" pos:end="9:46"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">PCIESlot</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">s</name> <init pos:start="9:17" pos:end="9:46">= <expr pos:start="9:19" pos:end="9:46"><call pos:start="9:19" pos:end="9:46"><name pos:start="9:19" pos:end="9:27">DO_UPCAST</name><argument_list pos:start="9:28" pos:end="9:46">(<argument pos:start="9:29" pos:end="9:36"><expr pos:start="9:29" pos:end="9:36"><name pos:start="9:29" pos:end="9:36">PCIESlot</name></expr></argument>, <argument pos:start="9:39" pos:end="9:42"><expr pos:start="9:39" pos:end="9:42"><name pos:start="9:39" pos:end="9:42">port</name></expr></argument>, <argument pos:start="9:45" pos:end="9:45"><expr pos:start="9:45" pos:end="9:45"><name pos:start="9:45" pos:end="9:45">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:11"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">rc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">tmp</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:30"><expr pos:start="17:5" pos:end="17:29"><name pos:start="17:5" pos:end="17:6">rc</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <call pos:start="17:10" pos:end="17:29"><name pos:start="17:10" pos:end="17:26">pci_bridge_initfn</name><argument_list pos:start="17:27" pos:end="17:29">(<argument pos:start="17:28" pos:end="17:28"><expr pos:start="17:28" pos:end="17:28"><name pos:start="17:28" pos:end="17:28">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:15">(<expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:10">rc</name> <operator pos:start="19:12" pos:end="19:12">&lt;</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>)</condition> <block pos:start="19:17" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><name pos:start="21:16" pos:end="21:17">rc</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:55"><expr pos:start="27:5" pos:end="27:54"><name pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:5">d</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:13">config</name><index pos:start="27:14" pos:end="27:30">[<expr pos:start="27:15" pos:end="27:29"><name pos:start="27:15" pos:end="27:29">PCI_REVISION_ID</name></expr>]</index></name> <operator pos:start="27:32" pos:end="27:32">=</operator> <name pos:start="27:34" pos:end="27:54">PCI_DEVICE_ID_IOH_REV</name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:26"><expr pos:start="29:5" pos:end="29:25"><call pos:start="29:5" pos:end="29:25"><name pos:start="29:5" pos:end="29:22">pcie_port_init_reg</name><argument_list pos:start="29:23" pos:end="29:25">(<argument pos:start="29:24" pos:end="29:24"><expr pos:start="29:24" pos:end="29:24"><name pos:start="29:24" pos:end="29:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:61"><expr pos:start="33:5" pos:end="33:60"><call pos:start="33:5" pos:end="33:60"><name pos:start="33:5" pos:end="33:28">pci_config_set_vendor_id</name><argument_list pos:start="33:29" pos:end="33:60">(<argument pos:start="33:30" pos:end="33:38"><expr pos:start="33:30" pos:end="33:38"><name pos:start="33:30" pos:end="33:38"><name pos:start="33:30" pos:end="33:30">d</name><operator pos:start="33:31" pos:end="33:32">-&gt;</operator><name pos:start="33:33" pos:end="33:38">config</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:59"><expr pos:start="33:41" pos:end="33:59"><name pos:start="33:41" pos:end="33:59">PCI_VENDOR_ID_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:65"><expr pos:start="35:5" pos:end="35:64"><call pos:start="35:5" pos:end="35:64"><name pos:start="35:5" pos:end="35:28">pci_config_set_device_id</name><argument_list pos:start="35:29" pos:end="35:64">(<argument pos:start="35:30" pos:end="35:38"><expr pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:38"><name pos:start="35:30" pos:end="35:30">d</name><operator pos:start="35:31" pos:end="35:32">-&gt;</operator><name pos:start="35:33" pos:end="35:38">config</name></name></expr></argument>, <argument pos:start="35:41" pos:end="35:63"><expr pos:start="35:41" pos:end="35:63"><name pos:start="35:41" pos:end="35:63">PCI_DEVICE_ID_IOH_EPORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="41:69"><expr pos:start="39:5" pos:end="41:68"><name pos:start="39:5" pos:end="39:6">rc</name> <operator pos:start="39:8" pos:end="39:8">=</operator> <call pos:start="39:10" pos:end="41:68"><name pos:start="39:10" pos:end="39:30">pci_bridge_ssvid_init</name><argument_list pos:start="39:31" pos:end="41:68">(<argument pos:start="39:32" pos:end="39:32"><expr pos:start="39:32" pos:end="39:32"><name pos:start="39:32" pos:end="39:32">d</name></expr></argument>, <argument pos:start="39:35" pos:end="39:53"><expr pos:start="39:35" pos:end="39:53"><name pos:start="39:35" pos:end="39:53">IOH_EP_SSVID_OFFSET</name></expr></argument>,

                               <argument pos:start="41:32" pos:end="41:48"><expr pos:start="41:32" pos:end="41:48"><name pos:start="41:32" pos:end="41:48">IOH_EP_SSVID_SVID</name></expr></argument>, <argument pos:start="41:51" pos:end="41:67"><expr pos:start="41:51" pos:end="41:67"><name pos:start="41:51" pos:end="41:67">IOH_EP_SSVID_SSID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="47:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:15">(<expr pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:10">rc</name> <operator pos:start="43:12" pos:end="43:12">&lt;</operator> <literal type="number" pos:start="43:14" pos:end="43:14">0</literal></expr>)</condition> <block pos:start="43:17" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:24">

        <goto pos:start="45:9" pos:end="45:24">goto <name pos:start="45:14" pos:end="45:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="53:70"><expr pos:start="49:5" pos:end="53:69"><name pos:start="49:5" pos:end="49:6">rc</name> <operator pos:start="49:8" pos:end="49:8">=</operator> <call pos:start="49:10" pos:end="53:69"><name pos:start="49:10" pos:end="49:17">msi_init</name><argument_list pos:start="49:18" pos:end="53:69">(<argument pos:start="49:19" pos:end="49:19"><expr pos:start="49:19" pos:end="49:19"><name pos:start="49:19" pos:end="49:19">d</name></expr></argument>, <argument pos:start="49:22" pos:end="49:38"><expr pos:start="49:22" pos:end="49:38"><name pos:start="49:22" pos:end="49:38">IOH_EP_MSI_OFFSET</name></expr></argument>, <argument pos:start="49:41" pos:end="49:60"><expr pos:start="49:41" pos:end="49:60"><name pos:start="49:41" pos:end="49:60">IOH_EP_MSI_NR_VECTOR</name></expr></argument>,

                  <argument pos:start="51:19" pos:end="51:66"><expr pos:start="51:19" pos:end="51:66"><name pos:start="51:19" pos:end="51:44">IOH_EP_MSI_SUPPORTED_FLAGS</name> <operator pos:start="51:46" pos:end="51:46">&amp;</operator> <name pos:start="51:48" pos:end="51:66">PCI_MSI_FLAGS_64BIT</name></expr></argument>,

                  <argument pos:start="53:19" pos:end="53:68"><expr pos:start="53:19" pos:end="53:68"><name pos:start="53:19" pos:end="53:44">IOH_EP_MSI_SUPPORTED_FLAGS</name> <operator pos:start="53:46" pos:end="53:46">&amp;</operator> <name pos:start="53:48" pos:end="53:68">PCI_MSI_FLAGS_MASKBIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:15">(<expr pos:start="55:9" pos:end="55:14"><name pos:start="55:9" pos:end="55:10">rc</name> <operator pos:start="55:12" pos:end="55:12">&lt;</operator> <literal type="number" pos:start="55:14" pos:end="55:14">0</literal></expr>)</condition> <block pos:start="55:17" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:24">

        <goto pos:start="57:9" pos:end="57:24">goto <name pos:start="57:14" pos:end="57:23">err_bridge</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:78"><expr pos:start="61:5" pos:end="61:77"><name pos:start="61:5" pos:end="61:6">rc</name> <operator pos:start="61:8" pos:end="61:8">=</operator> <call pos:start="61:10" pos:end="61:77"><name pos:start="61:10" pos:end="61:22">pcie_cap_init</name><argument_list pos:start="61:23" pos:end="61:77">(<argument pos:start="61:24" pos:end="61:24"><expr pos:start="61:24" pos:end="61:24"><name pos:start="61:24" pos:end="61:24">d</name></expr></argument>, <argument pos:start="61:27" pos:end="61:43"><expr pos:start="61:27" pos:end="61:43"><name pos:start="61:27" pos:end="61:43">IOH_EP_EXP_OFFSET</name></expr></argument>, <argument pos:start="61:46" pos:end="61:67"><expr pos:start="61:46" pos:end="61:67"><name pos:start="61:46" pos:end="61:67">PCI_EXP_TYPE_ROOT_PORT</name></expr></argument>, <argument pos:start="61:70" pos:end="61:76"><expr pos:start="61:70" pos:end="61:76"><name pos:start="61:70" pos:end="61:76"><name pos:start="61:70" pos:end="61:70">p</name><operator pos:start="61:71" pos:end="61:72">-&gt;</operator><name pos:start="61:73" pos:end="61:76">port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:15">(<expr pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:10">rc</name> <operator pos:start="63:12" pos:end="63:12">&lt;</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>)</condition> <block pos:start="63:17" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:21">

        <goto pos:start="65:9" pos:end="65:21">goto <name pos:start="65:14" pos:end="65:20">err_msi</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:28"><expr pos:start="69:5" pos:end="69:27"><call pos:start="69:5" pos:end="69:27"><name pos:start="69:5" pos:end="69:24">pcie_cap_deverr_init</name><argument_list pos:start="69:25" pos:end="69:27">(<argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><name pos:start="69:26" pos:end="69:26">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:35"><expr pos:start="71:5" pos:end="71:34"><call pos:start="71:5" pos:end="71:34"><name pos:start="71:5" pos:end="71:22">pcie_cap_slot_init</name><argument_list pos:start="71:23" pos:end="71:34">(<argument pos:start="71:24" pos:end="71:24"><expr pos:start="71:24" pos:end="71:24"><name pos:start="71:24" pos:end="71:24">d</name></expr></argument>, <argument pos:start="71:27" pos:end="71:33"><expr pos:start="71:27" pos:end="71:33"><name pos:start="71:27" pos:end="71:33"><name pos:start="71:27" pos:end="71:27">s</name><operator pos:start="71:28" pos:end="71:29">-&gt;</operator><name pos:start="71:30" pos:end="71:33">slot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:36"><expr pos:start="73:5" pos:end="73:35"><call pos:start="73:5" pos:end="73:35"><name pos:start="73:5" pos:end="73:23">pcie_chassis_create</name><argument_list pos:start="73:24" pos:end="73:35">(<argument pos:start="73:25" pos:end="73:34"><expr pos:start="73:25" pos:end="73:34"><name pos:start="73:25" pos:end="73:34"><name pos:start="73:25" pos:end="73:25">s</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:34">chassis</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:34"><expr pos:start="75:5" pos:end="75:33"><name pos:start="75:5" pos:end="75:6">rc</name> <operator pos:start="75:8" pos:end="75:8">=</operator> <call pos:start="75:10" pos:end="75:33"><name pos:start="75:10" pos:end="75:30">pcie_chassis_add_slot</name><argument_list pos:start="75:31" pos:end="75:33">(<argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="83:5"><if pos:start="77:5" pos:end="83:5">if <condition pos:start="77:8" pos:end="77:15">(<expr pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:10">rc</name> <operator pos:start="77:12" pos:end="77:12">&lt;</operator> <literal type="number" pos:start="77:14" pos:end="77:14">0</literal></expr>)</condition> <block pos:start="77:17" pos:end="83:5">{<block_content pos:start="79:9" pos:end="81:18">

        <goto pos:start="79:9" pos:end="79:26">goto <name pos:start="79:14" pos:end="79:25">err_pcie_cap</name>;</goto>

        <return pos:start="81:9" pos:end="81:18">return <expr pos:start="81:16" pos:end="81:17"><name pos:start="81:16" pos:end="81:17">rc</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:26"><expr pos:start="85:5" pos:end="85:25"><call pos:start="85:5" pos:end="85:25"><name pos:start="85:5" pos:end="85:22">pcie_cap_root_init</name><argument_list pos:start="85:23" pos:end="85:25">(<argument pos:start="85:24" pos:end="85:24"><expr pos:start="85:24" pos:end="85:24"><name pos:start="85:24" pos:end="85:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:45"><expr pos:start="87:5" pos:end="87:44"><name pos:start="87:5" pos:end="87:6">rc</name> <operator pos:start="87:8" pos:end="87:8">=</operator> <call pos:start="87:10" pos:end="87:44"><name pos:start="87:10" pos:end="87:22">pcie_aer_init</name><argument_list pos:start="87:23" pos:end="87:44">(<argument pos:start="87:24" pos:end="87:24"><expr pos:start="87:24" pos:end="87:24"><name pos:start="87:24" pos:end="87:24">d</name></expr></argument>, <argument pos:start="87:27" pos:end="87:43"><expr pos:start="87:27" pos:end="87:43"><name pos:start="87:27" pos:end="87:43">IOH_EP_AER_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="89:5" pos:end="93:5"><if pos:start="89:5" pos:end="93:5">if <condition pos:start="89:8" pos:end="89:15">(<expr pos:start="89:9" pos:end="89:14"><name pos:start="89:9" pos:end="89:10">rc</name> <operator pos:start="89:12" pos:end="89:12">&lt;</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>)</condition> <block pos:start="89:17" pos:end="93:5">{<block_content pos:start="91:9" pos:end="91:17">

        <goto pos:start="91:9" pos:end="91:17">goto <name pos:start="91:14" pos:end="91:16">err</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><call pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:22">pcie_aer_root_init</name><argument_list pos:start="95:23" pos:end="95:25">(<argument pos:start="95:24" pos:end="95:24"><expr pos:start="95:24" pos:end="95:24"><name pos:start="95:24" pos:end="95:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:33"><expr pos:start="97:5" pos:end="97:32"><call pos:start="97:5" pos:end="97:32"><name pos:start="97:5" pos:end="97:29">ioh3420_aer_vector_update</name><argument_list pos:start="97:30" pos:end="97:32">(<argument pos:start="97:31" pos:end="97:31"><expr pos:start="97:31" pos:end="97:31"><name pos:start="97:31" pos:end="97:31">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:13">return <expr pos:start="99:12" pos:end="99:12"><literal type="number" pos:start="99:12" pos:end="99:12">0</literal></expr>;</return>



<label pos:start="103:1" pos:end="103:4"><name pos:start="103:1" pos:end="103:3">err</name>:</label>

    <expr_stmt pos:start="105:5" pos:end="105:29"><expr pos:start="105:5" pos:end="105:28"><call pos:start="105:5" pos:end="105:28"><name pos:start="105:5" pos:end="105:25">pcie_chassis_del_slot</name><argument_list pos:start="105:26" pos:end="105:28">(<argument pos:start="105:27" pos:end="105:27"><expr pos:start="105:27" pos:end="105:27"><name pos:start="105:27" pos:end="105:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="107:1" pos:end="107:13"><name pos:start="107:1" pos:end="107:12">err_pcie_cap</name>:</label>

    <expr_stmt pos:start="109:5" pos:end="109:21"><expr pos:start="109:5" pos:end="109:20"><call pos:start="109:5" pos:end="109:20"><name pos:start="109:5" pos:end="109:17">pcie_cap_exit</name><argument_list pos:start="109:18" pos:end="109:20">(<argument pos:start="109:19" pos:end="109:19"><expr pos:start="109:19" pos:end="109:19"><name pos:start="109:19" pos:end="109:19">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="111:1" pos:end="111:8"><name pos:start="111:1" pos:end="111:7">err_msi</name>:</label>

    <expr_stmt pos:start="113:5" pos:end="113:18"><expr pos:start="113:5" pos:end="113:17"><call pos:start="113:5" pos:end="113:17"><name pos:start="113:5" pos:end="113:14">msi_uninit</name><argument_list pos:start="113:15" pos:end="113:17">(<argument pos:start="113:16" pos:end="113:16"><expr pos:start="113:16" pos:end="113:16"><name pos:start="113:16" pos:end="113:16">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="115:1" pos:end="115:11"><name pos:start="115:1" pos:end="115:10">err_bridge</name>:</label>

    <expr_stmt pos:start="117:5" pos:end="117:31"><expr pos:start="117:5" pos:end="117:30"><name pos:start="117:5" pos:end="117:7">tmp</name> <operator pos:start="117:9" pos:end="117:9">=</operator> <call pos:start="117:11" pos:end="117:30"><name pos:start="117:11" pos:end="117:27">pci_bridge_exitfn</name><argument_list pos:start="117:28" pos:end="117:30">(<argument pos:start="117:29" pos:end="117:29"><expr pos:start="117:29" pos:end="117:29"><name pos:start="117:29" pos:end="117:29">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:17"><expr pos:start="119:5" pos:end="119:16"><call pos:start="119:5" pos:end="119:16"><name pos:start="119:5" pos:end="119:10">assert</name><argument_list pos:start="119:11" pos:end="119:16">(<argument pos:start="119:12" pos:end="119:15"><expr pos:start="119:12" pos:end="119:15"><operator pos:start="119:12" pos:end="119:12">!</operator><name pos:start="119:13" pos:end="119:15">tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="121:5" pos:end="121:14">return <expr pos:start="121:12" pos:end="121:13"><name pos:start="121:12" pos:end="121:13">rc</name></expr>;</return>

</block_content>}</block></function>
</unit>
