<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13661.c" pos:tabs="8"><macro pos:start="1:1" pos:end="7:1"><name pos:start="1:1" pos:end="1:15">connect_to_qemu</name><argument_list pos:start="1:16" pos:end="7:1">(

    <argument pos:start="3:5" pos:end="3:20">const char *host</argument>,

    <argument pos:start="5:5" pos:end="5:20">const char *port</argument>

)</argument_list></macro> <block pos:start="7:3" pos:end="77:1">{<block_content pos:start="9:5" pos:end="75:16">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:19">addrinfo</name></name></type> <name pos:start="9:21" pos:end="9:25">hints</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:19">addrinfo</name></name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:27">server</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>, <decl pos:start="13:14" pos:end="13:17"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:14" pos:end="13:17">sock</name></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:48"><expr pos:start="17:5" pos:end="17:47"><name pos:start="17:5" pos:end="17:8">sock</name> <operator pos:start="17:10" pos:end="17:10">=</operator> <call pos:start="17:12" pos:end="17:47"><name pos:start="17:12" pos:end="17:22">qemu_socket</name><argument_list pos:start="17:23" pos:end="17:47">(<argument pos:start="17:24" pos:end="17:30"><expr pos:start="17:24" pos:end="17:30"><name pos:start="17:24" pos:end="17:30">AF_INET</name></expr></argument>, <argument pos:start="17:33" pos:end="17:43"><expr pos:start="17:33" pos:end="17:43"><name pos:start="17:33" pos:end="17:43">SOCK_STREAM</name></expr></argument>, <argument pos:start="17:46" pos:end="17:46"><expr pos:start="17:46" pos:end="17:46"><literal type="number" pos:start="17:46" pos:end="17:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:17">(<expr pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:12">sock</name> <operator pos:start="19:14" pos:end="19:14">&lt;</operator> <literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr>)</condition> <block pos:start="19:19" pos:end="27:5">{<block_content pos:start="23:9" pos:end="25:18">

        <comment type="block" pos:start="21:9" pos:end="21:19">/* Error */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:51"><expr pos:start="23:9" pos:end="23:50"><call pos:start="23:9" pos:end="23:50"><name pos:start="23:9" pos:end="23:15">fprintf</name><argument_list pos:start="23:16" pos:end="23:50">(<argument pos:start="23:17" pos:end="23:22"><expr pos:start="23:17" pos:end="23:22"><name pos:start="23:17" pos:end="23:22">stderr</name></expr></argument>, <argument pos:start="23:25" pos:end="23:49"><expr pos:start="23:25" pos:end="23:49"><literal type="string" pos:start="23:25" pos:end="23:49">"Error opening socket!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:47"><expr pos:start="31:5" pos:end="31:46"><call pos:start="31:5" pos:end="31:46"><name pos:start="31:5" pos:end="31:10">memset</name><argument_list pos:start="31:11" pos:end="31:46">(<argument pos:start="31:12" pos:end="31:17"><expr pos:start="31:12" pos:end="31:17"><operator pos:start="31:12" pos:end="31:12">&amp;</operator><name pos:start="31:13" pos:end="31:17">hints</name></expr></argument>, <argument pos:start="31:20" pos:end="31:20"><expr pos:start="31:20" pos:end="31:20"><literal type="number" pos:start="31:20" pos:end="31:20">0</literal></expr></argument>, <argument pos:start="31:23" pos:end="31:45"><expr pos:start="31:23" pos:end="31:45"><sizeof pos:start="31:23" pos:end="31:45">sizeof<argument_list pos:start="31:29" pos:end="31:45">(<argument pos:start="31:30" pos:end="31:44"><expr pos:start="31:30" pos:end="31:44">struct <name pos:start="31:37" pos:end="31:44">addrinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:32"><expr pos:start="33:5" pos:end="33:31"><name pos:start="33:5" pos:end="33:19"><name pos:start="33:5" pos:end="33:9">hints</name><operator pos:start="33:10" pos:end="33:10">.</operator><name pos:start="33:11" pos:end="33:19">ai_family</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:31">AF_UNSPEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:36"><expr pos:start="35:5" pos:end="35:35"><name pos:start="35:5" pos:end="35:21"><name pos:start="35:5" pos:end="35:9">hints</name><operator pos:start="35:10" pos:end="35:10">.</operator><name pos:start="35:11" pos:end="35:21">ai_socktype</name></name> <operator pos:start="35:23" pos:end="35:23">=</operator> <name pos:start="35:25" pos:end="35:35">SOCK_STREAM</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:18"><name pos:start="37:5" pos:end="37:9">hints</name><operator pos:start="37:10" pos:end="37:10">.</operator><name pos:start="37:11" pos:end="37:18">ai_flags</name></name> <operator pos:start="37:20" pos:end="37:20">=</operator> <literal type="number" pos:start="37:22" pos:end="37:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:26"><expr pos:start="39:5" pos:end="39:25"><name pos:start="39:5" pos:end="39:21"><name pos:start="39:5" pos:end="39:9">hints</name><operator pos:start="39:10" pos:end="39:10">.</operator><name pos:start="39:11" pos:end="39:21">ai_protocol</name></name> <operator pos:start="39:23" pos:end="39:23">=</operator> <literal type="number" pos:start="39:25" pos:end="39:25">0</literal></expr>;</expr_stmt>          <comment type="block" pos:start="39:37" pos:end="39:54">/* Any protocol */</comment>



    <expr_stmt pos:start="43:5" pos:end="43:51"><expr pos:start="43:5" pos:end="43:50"><name pos:start="43:5" pos:end="43:7">ret</name> <operator pos:start="43:9" pos:end="43:9">=</operator> <call pos:start="43:11" pos:end="43:50"><name pos:start="43:11" pos:end="43:21">getaddrinfo</name><argument_list pos:start="43:22" pos:end="43:50">(<argument pos:start="43:23" pos:end="43:26"><expr pos:start="43:23" pos:end="43:26"><name pos:start="43:23" pos:end="43:26">host</name></expr></argument>, <argument pos:start="43:29" pos:end="43:32"><expr pos:start="43:29" pos:end="43:32"><name pos:start="43:29" pos:end="43:32">port</name></expr></argument>, <argument pos:start="43:35" pos:end="43:40"><expr pos:start="43:35" pos:end="43:40"><operator pos:start="43:35" pos:end="43:35">&amp;</operator><name pos:start="43:36" pos:end="43:40">hints</name></expr></argument>, <argument pos:start="43:43" pos:end="43:49"><expr pos:start="43:43" pos:end="43:49"><operator pos:start="43:43" pos:end="43:43">&amp;</operator><name pos:start="43:44" pos:end="43:49">server</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="55:5"><if pos:start="47:5" pos:end="55:5">if <condition pos:start="47:8" pos:end="47:17">(<expr pos:start="47:9" pos:end="47:16"><name pos:start="47:9" pos:end="47:11">ret</name> <operator pos:start="47:13" pos:end="47:14">!=</operator> <literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>)</condition> <block pos:start="47:19" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:18">

        <comment type="block" pos:start="49:9" pos:end="49:19">/* Error */</comment>

        <expr_stmt pos:start="51:9" pos:end="51:48"><expr pos:start="51:9" pos:end="51:47"><call pos:start="51:9" pos:end="51:47"><name pos:start="51:9" pos:end="51:15">fprintf</name><argument_list pos:start="51:16" pos:end="51:47">(<argument pos:start="51:17" pos:end="51:22"><expr pos:start="51:17" pos:end="51:22"><name pos:start="51:17" pos:end="51:22">stderr</name></expr></argument>, <argument pos:start="51:25" pos:end="51:46"><expr pos:start="51:25" pos:end="51:46"><literal type="string" pos:start="51:25" pos:end="51:46">"getaddrinfo failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:18">return <expr pos:start="53:16" pos:end="53:17"><operator pos:start="53:16" pos:end="53:16">-</operator><literal type="number" pos:start="53:17" pos:end="53:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="59:5" pos:end="67:5"><if pos:start="59:5" pos:end="67:5">if <condition pos:start="59:8" pos:end="59:63">(<expr pos:start="59:9" pos:end="59:62"><call pos:start="59:9" pos:end="59:58"><name pos:start="59:9" pos:end="59:15">connect</name><argument_list pos:start="59:16" pos:end="59:58">(<argument pos:start="59:17" pos:end="59:20"><expr pos:start="59:17" pos:end="59:20"><name pos:start="59:17" pos:end="59:20">sock</name></expr></argument>, <argument pos:start="59:23" pos:end="59:37"><expr pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:28">server</name><operator pos:start="59:29" pos:end="59:30">-&gt;</operator><name pos:start="59:31" pos:end="59:37">ai_addr</name></name></expr></argument>, <argument pos:start="59:40" pos:end="59:57"><expr pos:start="59:40" pos:end="59:57"><name pos:start="59:40" pos:end="59:57"><name pos:start="59:40" pos:end="59:45">server</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:57">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="59:60" pos:end="59:60">&lt;</operator> <literal type="number" pos:start="59:62" pos:end="59:62">0</literal></expr>)</condition> <block pos:start="59:65" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:18">

        <comment type="block" pos:start="61:9" pos:end="61:19">/* Error */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:47"><expr pos:start="63:9" pos:end="63:46"><call pos:start="63:9" pos:end="63:46"><name pos:start="63:9" pos:end="63:15">fprintf</name><argument_list pos:start="63:16" pos:end="63:46">(<argument pos:start="63:17" pos:end="63:22"><expr pos:start="63:17" pos:end="63:22"><name pos:start="63:17" pos:end="63:22">stderr</name></expr></argument>, <argument pos:start="63:25" pos:end="63:45"><expr pos:start="63:25" pos:end="63:45"><literal type="string" pos:start="63:25" pos:end="63:45">"Could not connect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="73:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:15">verbose</name></expr>)</condition> <block pos:start="69:18" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:73">

        <expr_stmt pos:start="71:9" pos:end="71:73"><expr pos:start="71:9" pos:end="71:72"><call pos:start="71:9" pos:end="71:72"><name pos:start="71:9" pos:end="71:14">printf</name><argument_list pos:start="71:15" pos:end="71:72">(<argument pos:start="71:16" pos:end="71:49"><expr pos:start="71:16" pos:end="71:49"><literal type="string" pos:start="71:16" pos:end="71:49">"Connected (sizeof Header=%zd)!\n"</literal></expr></argument>, <argument pos:start="71:52" pos:end="71:71"><expr pos:start="71:52" pos:end="71:71"><sizeof pos:start="71:52" pos:end="71:71">sizeof<argument_list pos:start="71:58" pos:end="71:71">(<argument pos:start="71:59" pos:end="71:70"><expr pos:start="71:59" pos:end="71:70"><name pos:start="71:59" pos:end="71:70">VSCMsgHeader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="75:5" pos:end="75:16">return <expr pos:start="75:12" pos:end="75:15"><name pos:start="75:12" pos:end="75:15">sock</name></expr>;</return>

</block_content>}</block>
</unit>
