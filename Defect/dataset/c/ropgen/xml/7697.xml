<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/7697.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vmdk_write_extent</name><parameter_list pos:start="1:29" pos:end="5:63">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:39">VmdkExtent</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">extent</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:71"><decl pos:start="1:50" pos:end="1:71"><type pos:start="1:50" pos:end="1:71"><name pos:start="1:50" pos:end="1:56">int64_t</name></type> <name pos:start="1:58" pos:end="1:71">cluster_offset</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:53"><decl pos:start="3:29" pos:end="3:53"><type pos:start="3:29" pos:end="3:53"><name pos:start="3:29" pos:end="3:35">int64_t</name></type> <name pos:start="3:37" pos:end="3:53">offset_in_cluster</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:73"><decl pos:start="3:56" pos:end="3:73"><type pos:start="3:56" pos:end="3:73"><specifier pos:start="3:56" pos:end="3:60">const</specifier> <name pos:start="3:62" pos:end="3:68">uint8_t</name> <modifier pos:start="3:70" pos:end="3:70">*</modifier></type><name pos:start="3:71" pos:end="3:73">buf</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:42"><decl pos:start="5:29" pos:end="5:42"><type pos:start="5:29" pos:end="5:42"><name pos:start="5:29" pos:end="5:31">int</name></type> <name pos:start="5:33" pos:end="5:42">nb_sectors</name></decl></parameter>, <parameter pos:start="5:45" pos:end="5:62"><decl pos:start="5:45" pos:end="5:62"><type pos:start="5:45" pos:end="5:62"><name pos:start="5:45" pos:end="5:51">int64_t</name></type> <name pos:start="5:53" pos:end="5:62">sector_num</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="79:1">{<block_content pos:start="9:5" pos:end="77:15">

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:33"><decl pos:start="11:5" pos:end="11:32"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">VmdkGrainMarker</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">data</name> <init pos:start="11:27" pos:end="11:32">= <expr pos:start="11:29" pos:end="11:32"><name pos:start="11:29" pos:end="11:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">uLongf</name></type> <name pos:start="13:12" pos:end="13:18">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:35"><decl pos:start="15:5" pos:end="15:34"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:28">write_buf</name> <init pos:start="15:30" pos:end="15:34">= <expr pos:start="15:32" pos:end="15:34"><name pos:start="15:32" pos:end="15:34">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:37"><decl pos:start="17:5" pos:end="17:36"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:17">write_len</name> <init pos:start="17:19" pos:end="17:36">= <expr pos:start="17:21" pos:end="17:36"><name pos:start="17:21" pos:end="17:30">nb_sectors</name> <operator pos:start="17:32" pos:end="17:32">*</operator> <literal type="number" pos:start="17:34" pos:end="17:36">512</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="21:5" pos:end="53:5"><if pos:start="21:5" pos:end="53:5">if <condition pos:start="21:8" pos:end="21:27">(<expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:14">extent</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:26">compressed</name></name></expr>)</condition> <block pos:start="21:29" pos:end="53:5">{<block_content pos:start="23:9" pos:end="51:54">

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:32">(<expr pos:start="23:13" pos:end="23:31"><operator pos:start="23:13" pos:end="23:13">!</operator><name pos:start="23:14" pos:end="23:31"><name pos:start="23:14" pos:end="23:19">extent</name><operator pos:start="23:20" pos:end="23:21">-&gt;</operator><name pos:start="23:22" pos:end="23:31">has_marker</name></name></expr>)</condition> <block pos:start="23:34" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:21">

            <expr_stmt pos:start="25:13" pos:end="25:26"><expr pos:start="25:13" pos:end="25:25"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <operator pos:start="25:19" pos:end="25:19">-</operator><name pos:start="25:20" pos:end="25:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="27:13" pos:end="27:21">goto <name pos:start="27:18" pos:end="27:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:53"><expr pos:start="31:9" pos:end="31:52"><name pos:start="31:9" pos:end="31:15">buf_len</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <operator pos:start="31:19" pos:end="31:19">(</operator><name pos:start="31:20" pos:end="31:42"><name pos:start="31:20" pos:end="31:25">extent</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:42">cluster_sectors</name></name> <operator pos:start="31:44" pos:end="31:45">&lt;&lt;</operator> <literal type="number" pos:start="31:47" pos:end="31:47">9</literal><operator pos:start="31:48" pos:end="31:48">)</operator> <operator pos:start="31:50" pos:end="31:50">*</operator> <literal type="number" pos:start="31:52" pos:end="31:52">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:59"><expr pos:start="33:9" pos:end="33:58"><name pos:start="33:9" pos:end="33:12">data</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:58"><name pos:start="33:16" pos:end="33:23">g_malloc</name><argument_list pos:start="33:24" pos:end="33:58">(<argument pos:start="33:25" pos:end="33:57"><expr pos:start="33:25" pos:end="33:57"><name pos:start="33:25" pos:end="33:31">buf_len</name> <operator pos:start="33:33" pos:end="33:33">+</operator> <sizeof pos:start="33:35" pos:end="33:57">sizeof<argument_list pos:start="33:41" pos:end="33:57">(<argument pos:start="33:42" pos:end="33:56"><expr pos:start="33:42" pos:end="33:56"><name pos:start="33:42" pos:end="33:56">VmdkGrainMarker</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="35:9" pos:end="43:9"><if pos:start="35:9" pos:end="43:9">if <condition pos:start="35:12" pos:end="37:29">(<expr pos:start="35:13" pos:end="37:28"><call pos:start="35:13" pos:end="35:64"><name pos:start="35:13" pos:end="35:20">compress</name><argument_list pos:start="35:21" pos:end="35:64">(<argument pos:start="35:22" pos:end="35:31"><expr pos:start="35:22" pos:end="35:31"><name pos:start="35:22" pos:end="35:31"><name pos:start="35:22" pos:end="35:25">data</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:31">data</name></name></expr></argument>, <argument pos:start="35:34" pos:end="35:41"><expr pos:start="35:34" pos:end="35:41"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:41">buf_len</name></expr></argument>, <argument pos:start="35:44" pos:end="35:46"><expr pos:start="35:44" pos:end="35:46"><name pos:start="35:44" pos:end="35:46">buf</name></expr></argument>, <argument pos:start="35:49" pos:end="35:63"><expr pos:start="35:49" pos:end="35:63"><name pos:start="35:49" pos:end="35:58">nb_sectors</name> <operator pos:start="35:60" pos:end="35:61">&lt;&lt;</operator> <literal type="number" pos:start="35:63" pos:end="35:63">9</literal></expr></argument>)</argument_list></call> <operator pos:start="35:66" pos:end="35:67">!=</operator> <name pos:start="35:69" pos:end="35:72">Z_OK</name> <operator pos:start="35:74" pos:end="35:75">||</operator>

                <name pos:start="37:17" pos:end="37:23">buf_len</name> <operator pos:start="37:25" pos:end="37:26">==</operator> <literal type="number" pos:start="37:28" pos:end="37:28">0</literal></expr>)</condition> <block pos:start="37:31" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:21">

            <expr_stmt pos:start="39:13" pos:end="39:26"><expr pos:start="39:13" pos:end="39:25"><name pos:start="39:13" pos:end="39:15">ret</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <operator pos:start="39:19" pos:end="39:19">-</operator><name pos:start="39:20" pos:end="39:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="41:13" pos:end="41:21">goto <name pos:start="41:18" pos:end="41:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:31"><expr pos:start="45:9" pos:end="45:30"><name pos:start="45:9" pos:end="45:17"><name pos:start="45:9" pos:end="45:12">data</name><operator pos:start="45:13" pos:end="45:14">-&gt;</operator><name pos:start="45:15" pos:end="45:17">lba</name></name> <operator pos:start="45:19" pos:end="45:19">=</operator> <name pos:start="45:21" pos:end="45:30">sector_num</name></expr>;</expr_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:29"><expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:12">data</name><operator pos:start="47:13" pos:end="47:14">-&gt;</operator><name pos:start="47:15" pos:end="47:18">size</name></name> <operator pos:start="47:20" pos:end="47:20">=</operator> <name pos:start="47:22" pos:end="47:28">buf_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:36"><expr pos:start="49:9" pos:end="49:35"><name pos:start="49:9" pos:end="49:17">write_buf</name> <operator pos:start="49:19" pos:end="49:19">=</operator> <operator pos:start="49:21" pos:end="49:21">(</operator><name pos:start="49:22" pos:end="49:28">uint8_t</name> <operator pos:start="49:30" pos:end="49:30">*</operator><operator pos:start="49:31" pos:end="49:31">)</operator><name pos:start="49:32" pos:end="49:35">data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:54"><expr pos:start="51:9" pos:end="51:53"><name pos:start="51:9" pos:end="51:17">write_len</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <name pos:start="51:21" pos:end="51:27">buf_len</name> <operator pos:start="51:29" pos:end="51:29">+</operator> <sizeof pos:start="51:31" pos:end="51:53">sizeof<argument_list pos:start="51:37" pos:end="51:53">(<argument pos:start="51:38" pos:end="51:52"><expr pos:start="51:38" pos:end="51:52"><name pos:start="51:38" pos:end="51:52">VmdkGrainMarker</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="61:35"><expr pos:start="55:5" pos:end="61:34"><name pos:start="55:5" pos:end="55:7">ret</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="61:34"><name pos:start="55:11" pos:end="55:21">bdrv_pwrite</name><argument_list pos:start="55:22" pos:end="61:34">(<argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:28">extent</name><operator pos:start="55:29" pos:end="55:30">-&gt;</operator><name pos:start="55:31" pos:end="55:34">file</name></name></expr></argument>,

                        <argument pos:start="57:25" pos:end="57:58"><expr pos:start="57:25" pos:end="57:58"><name pos:start="57:25" pos:end="57:38">cluster_offset</name> <operator pos:start="57:40" pos:end="57:40">+</operator> <name pos:start="57:42" pos:end="57:58">offset_in_cluster</name></expr></argument>,

                        <argument pos:start="59:25" pos:end="59:33"><expr pos:start="59:25" pos:end="59:33"><name pos:start="59:25" pos:end="59:33">write_buf</name></expr></argument>,

                        <argument pos:start="61:25" pos:end="61:33"><expr pos:start="61:25" pos:end="61:33"><name pos:start="61:25" pos:end="61:33">write_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:25">(<expr pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:11">ret</name> <operator pos:start="63:13" pos:end="63:14">!=</operator> <name pos:start="63:16" pos:end="63:24">write_len</name></expr>)</condition> <block pos:start="63:27" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:17">

        <expr_stmt pos:start="65:9" pos:end="65:35"><expr pos:start="65:9" pos:end="65:34"><name pos:start="65:9" pos:end="65:11">ret</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <ternary pos:start="65:15" pos:end="65:34"><condition pos:start="65:15" pos:end="65:23"><expr pos:start="65:15" pos:end="65:21"><name pos:start="65:15" pos:end="65:17">ret</name> <operator pos:start="65:19" pos:end="65:19">&lt;</operator> <literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr> ?</condition><then pos:start="65:25" pos:end="65:27"> <expr pos:start="65:25" pos:end="65:27"><name pos:start="65:25" pos:end="65:27">ret</name></expr> </then><else pos:start="65:29" pos:end="65:34">: <expr pos:start="65:31" pos:end="65:34"><operator pos:start="65:31" pos:end="65:31">-</operator><name pos:start="65:32" pos:end="65:34">EIO</name></expr></else></ternary></expr>;</expr_stmt>

        <goto pos:start="67:9" pos:end="67:17">goto <name pos:start="67:14" pos:end="67:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:12"><expr pos:start="71:5" pos:end="71:11"><name pos:start="71:5" pos:end="71:7">ret</name> <operator pos:start="71:9" pos:end="71:9">=</operator> <literal type="number" pos:start="71:11" pos:end="71:11">0</literal></expr>;</expr_stmt>

 <label pos:start="73:2" pos:end="73:5"><name pos:start="73:2" pos:end="73:4">out</name>:</label>

    <expr_stmt pos:start="75:5" pos:end="75:17"><expr pos:start="75:5" pos:end="75:16"><call pos:start="75:5" pos:end="75:16"><name pos:start="75:5" pos:end="75:10">g_free</name><argument_list pos:start="75:11" pos:end="75:16">(<argument pos:start="75:12" pos:end="75:15"><expr pos:start="75:12" pos:end="75:15"><name pos:start="75:12" pos:end="75:15">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="77:5" pos:end="77:15">return <expr pos:start="77:12" pos:end="77:14"><name pos:start="77:12" pos:end="77:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
