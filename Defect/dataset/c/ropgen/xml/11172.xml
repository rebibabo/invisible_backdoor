<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11172.c" pos:tabs="8"><function pos:start="1:1" pos:end="225:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">wav_read_header</name><parameter_list pos:start="1:27" pos:end="3:50">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:45"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:49"><decl pos:start="3:28" pos:end="3:49"><type pos:start="3:28" pos:end="3:49"><name pos:start="3:28" pos:end="3:45">AVFormatParameters</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">ap</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="225:1">{<block_content pos:start="7:5" pos:end="223:13">

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:16">size</name></decl>, <decl pos:start="7:19" pos:end="7:38"><type ref="prev" pos:start="7:5" pos:end="7:11"/><name pos:start="7:19" pos:end="7:27">av_uninit</name><argument_list pos:start="7:28" pos:end="7:38">(<argument pos:start="7:29" pos:end="7:37"><expr pos:start="7:29" pos:end="7:37"><name pos:start="7:29" pos:end="7:37">data_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">int64_t</name></type> <name pos:start="9:13" pos:end="9:24">sample_count</name><init pos:start="9:25" pos:end="9:26">=<expr pos:start="9:26" pos:end="9:26"><literal type="number" pos:start="9:26" pos:end="9:26">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:12"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:12">rf64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:20">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:17"><name pos:start="15:5" pos:end="15:15">AVIOContext</name> <modifier pos:start="15:17" pos:end="15:17">*</modifier></type><name pos:start="15:18" pos:end="15:19">pb</name> <init pos:start="15:21" pos:end="15:27">= <expr pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:27"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:17"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:12">AVStream</name> <modifier pos:start="17:14" pos:end="17:14">*</modifier></type><name pos:start="17:15" pos:end="17:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:35"><decl pos:start="19:5" pos:end="19:34"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">WAVContext</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:19">wav</name> <init pos:start="19:21" pos:end="19:34">= <expr pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:34"><name pos:start="19:23" pos:end="19:23">s</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name></decl>, <decl pos:start="21:14" pos:end="21:24"><type ref="prev" pos:start="21:5" pos:end="21:7"/><name pos:start="21:14" pos:end="21:20">got_fmt</name> <init pos:start="21:22" pos:end="21:24">= <expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:40"><decl pos:start="23:5" pos:end="23:24"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:24">next_tag_ofs</name></decl>, <decl pos:start="23:27" pos:end="23:39"><type ref="prev" pos:start="23:5" pos:end="23:11"/><name pos:start="23:27" pos:end="23:34">data_ofs</name> <init pos:start="23:36" pos:end="23:39">= <expr pos:start="23:38" pos:end="23:39"><operator pos:start="23:38" pos:end="23:38">-</operator><literal type="number" pos:start="23:39" pos:end="23:39">1</literal></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:27">/* check RIFF header */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:24"><expr pos:start="29:5" pos:end="29:23"><name pos:start="29:5" pos:end="29:7">tag</name> <operator pos:start="29:9" pos:end="29:9">=</operator> <call pos:start="29:11" pos:end="29:23"><name pos:start="29:11" pos:end="29:19">avio_rl32</name><argument_list pos:start="29:20" pos:end="29:23">(<argument pos:start="29:21" pos:end="29:22"><expr pos:start="29:21" pos:end="29:22"><name pos:start="29:21" pos:end="29:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:44"><expr pos:start="33:5" pos:end="33:43"><name pos:start="33:5" pos:end="33:8">rf64</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <name pos:start="33:12" pos:end="33:14">tag</name> <operator pos:start="33:16" pos:end="33:17">==</operator> <call pos:start="33:19" pos:end="33:43"><name pos:start="33:19" pos:end="33:23">MKTAG</name><argument_list pos:start="33:24" pos:end="33:43">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><literal type="char" pos:start="33:25" pos:end="33:27">'R'</literal></expr></argument>, <argument pos:start="33:30" pos:end="33:32"><expr pos:start="33:30" pos:end="33:32"><literal type="char" pos:start="33:30" pos:end="33:32">'F'</literal></expr></argument>, <argument pos:start="33:35" pos:end="33:37"><expr pos:start="33:35" pos:end="33:37"><literal type="char" pos:start="33:35" pos:end="33:37">'6'</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:42"><expr pos:start="33:40" pos:end="33:42"><literal type="char" pos:start="33:40" pos:end="33:42">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:18"><if pos:start="35:5" pos:end="37:18">if <condition pos:start="35:8" pos:end="35:50">(<expr pos:start="35:9" pos:end="35:49"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:13">rf64</name> <operator pos:start="35:15" pos:end="35:16">&amp;&amp;</operator> <name pos:start="35:18" pos:end="35:20">tag</name> <operator pos:start="35:22" pos:end="35:23">!=</operator> <call pos:start="35:25" pos:end="35:49"><name pos:start="35:25" pos:end="35:29">MKTAG</name><argument_list pos:start="35:30" pos:end="35:49">(<argument pos:start="35:31" pos:end="35:33"><expr pos:start="35:31" pos:end="35:33"><literal type="char" pos:start="35:31" pos:end="35:33">'R'</literal></expr></argument>, <argument pos:start="35:36" pos:end="35:38"><expr pos:start="35:36" pos:end="35:38"><literal type="char" pos:start="35:36" pos:end="35:38">'I'</literal></expr></argument>, <argument pos:start="35:41" pos:end="35:43"><expr pos:start="35:41" pos:end="35:43"><literal type="char" pos:start="35:41" pos:end="35:43">'F'</literal></expr></argument>, <argument pos:start="35:46" pos:end="35:48"><expr pos:start="35:46" pos:end="35:48"><literal type="char" pos:start="35:46" pos:end="35:48">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:18"><block_content pos:start="37:9" pos:end="37:18">

        <return pos:start="37:9" pos:end="37:18">return <expr pos:start="37:16" pos:end="37:17"><operator pos:start="37:16" pos:end="37:16">-</operator><literal type="number" pos:start="37:17" pos:end="37:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:18"><expr pos:start="39:5" pos:end="39:17"><call pos:start="39:5" pos:end="39:17"><name pos:start="39:5" pos:end="39:13">avio_rl32</name><argument_list pos:start="39:14" pos:end="39:17">(<argument pos:start="39:15" pos:end="39:16"><expr pos:start="39:15" pos:end="39:16"><name pos:start="39:15" pos:end="39:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="39:20" pos:end="39:34">/* file size */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:7">tag</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:23"><name pos:start="41:11" pos:end="41:19">avio_rl32</name><argument_list pos:start="41:20" pos:end="41:23">(<argument pos:start="41:21" pos:end="41:22"><expr pos:start="41:21" pos:end="41:22"><name pos:start="41:21" pos:end="41:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:18"><if pos:start="43:5" pos:end="45:18">if <condition pos:start="43:8" pos:end="43:41">(<expr pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:11">tag</name> <operator pos:start="43:13" pos:end="43:14">!=</operator> <call pos:start="43:16" pos:end="43:40"><name pos:start="43:16" pos:end="43:20">MKTAG</name><argument_list pos:start="43:21" pos:end="43:40">(<argument pos:start="43:22" pos:end="43:24"><expr pos:start="43:22" pos:end="43:24"><literal type="char" pos:start="43:22" pos:end="43:24">'W'</literal></expr></argument>, <argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><literal type="char" pos:start="43:27" pos:end="43:29">'A'</literal></expr></argument>, <argument pos:start="43:32" pos:end="43:34"><expr pos:start="43:32" pos:end="43:34"><literal type="char" pos:start="43:32" pos:end="43:34">'V'</literal></expr></argument>, <argument pos:start="43:37" pos:end="43:39"><expr pos:start="43:37" pos:end="43:39"><literal type="char" pos:start="43:37" pos:end="43:39">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:18"><block_content pos:start="45:9" pos:end="45:18">

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="49:5" pos:end="81:5"><if pos:start="49:5" pos:end="81:5">if <condition pos:start="49:8" pos:end="49:13">(<expr pos:start="49:9" pos:end="49:12"><name pos:start="49:9" pos:end="49:12">rf64</name></expr>)</condition> <block pos:start="49:15" pos:end="81:5">{<block_content pos:start="51:9" pos:end="79:33">

        <if_stmt pos:start="51:9" pos:end="53:22"><if pos:start="51:9" pos:end="53:22">if <condition pos:start="51:12" pos:end="51:55">(<expr pos:start="51:13" pos:end="51:54"><call pos:start="51:13" pos:end="51:25"><name pos:start="51:13" pos:end="51:21">avio_rl32</name><argument_list pos:start="51:22" pos:end="51:25">(<argument pos:start="51:23" pos:end="51:24"><expr pos:start="51:23" pos:end="51:24"><name pos:start="51:23" pos:end="51:24">pb</name></expr></argument>)</argument_list></call> <operator pos:start="51:27" pos:end="51:28">!=</operator> <call pos:start="51:30" pos:end="51:54"><name pos:start="51:30" pos:end="51:34">MKTAG</name><argument_list pos:start="51:35" pos:end="51:54">(<argument pos:start="51:36" pos:end="51:38"><expr pos:start="51:36" pos:end="51:38"><literal type="char" pos:start="51:36" pos:end="51:38">'d'</literal></expr></argument>, <argument pos:start="51:41" pos:end="51:43"><expr pos:start="51:41" pos:end="51:43"><literal type="char" pos:start="51:41" pos:end="51:43">'s'</literal></expr></argument>, <argument pos:start="51:46" pos:end="51:48"><expr pos:start="51:46" pos:end="51:48"><literal type="char" pos:start="51:46" pos:end="51:48">'6'</literal></expr></argument>, <argument pos:start="51:51" pos:end="51:53"><expr pos:start="51:51" pos:end="51:53"><literal type="char" pos:start="51:51" pos:end="51:53">'4'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:13" pos:end="53:22"><block_content pos:start="53:13" pos:end="53:22">

            <return pos:start="53:13" pos:end="53:22">return <expr pos:start="53:20" pos:end="53:21"><operator pos:start="53:20" pos:end="53:20">-</operator><literal type="number" pos:start="53:21" pos:end="53:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:29"><expr pos:start="55:9" pos:end="55:28"><name pos:start="55:9" pos:end="55:12">size</name> <operator pos:start="55:14" pos:end="55:14">=</operator> <call pos:start="55:16" pos:end="55:28"><name pos:start="55:16" pos:end="55:24">avio_rl32</name><argument_list pos:start="55:25" pos:end="55:28">(<argument pos:start="55:26" pos:end="55:27"><expr pos:start="55:26" pos:end="55:27"><name pos:start="55:26" pos:end="55:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="59:22"><if pos:start="57:9" pos:end="59:22">if <condition pos:start="57:12" pos:end="57:22">(<expr pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:16">size</name> <operator pos:start="57:18" pos:end="57:18">&lt;</operator> <literal type="number" pos:start="57:20" pos:end="57:21">16</literal></expr>)</condition><block type="pseudo" pos:start="59:13" pos:end="59:22"><block_content pos:start="59:13" pos:end="59:22">

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><call pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:17">avio_rl64</name><argument_list pos:start="61:18" pos:end="61:21">(<argument pos:start="61:19" pos:end="61:20"><expr pos:start="61:19" pos:end="61:20"><name pos:start="61:19" pos:end="61:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="61:24" pos:end="61:38">/* RIFF size */</comment>

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:17">data_size</name> <operator pos:start="63:19" pos:end="63:19">=</operator> <call pos:start="63:21" pos:end="63:33"><name pos:start="63:21" pos:end="63:29">avio_rl64</name><argument_list pos:start="63:30" pos:end="63:33">(<argument pos:start="63:31" pos:end="63:32"><expr pos:start="63:31" pos:end="63:32"><name pos:start="63:31" pos:end="63:32">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:20">sample_count</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <call pos:start="65:24" pos:end="65:36"><name pos:start="65:24" pos:end="65:32">avio_rl64</name><argument_list pos:start="65:33" pos:end="65:36">(<argument pos:start="65:34" pos:end="65:35"><expr pos:start="65:34" pos:end="65:35"><name pos:start="65:34" pos:end="65:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="77:9"><if pos:start="67:9" pos:end="77:9">if <condition pos:start="67:12" pos:end="67:46">(<expr pos:start="67:13" pos:end="67:45"><name pos:start="67:13" pos:end="67:21">data_size</name> <operator pos:start="67:23" pos:end="67:23">&lt;</operator> <literal type="number" pos:start="67:25" pos:end="67:25">0</literal> <operator pos:start="67:27" pos:end="67:28">||</operator> <name pos:start="67:30" pos:end="67:41">sample_count</name> <operator pos:start="67:43" pos:end="67:43">&lt;</operator> <literal type="number" pos:start="67:45" pos:end="67:45">0</literal></expr>)</condition> <block pos:start="67:48" pos:end="77:9">{<block_content pos:start="69:13" pos:end="75:39">

            <expr_stmt pos:start="69:13" pos:end="73:44"><expr pos:start="69:13" pos:end="73:43"><call pos:start="69:13" pos:end="73:43"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="73:43">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">s</name></expr></argument>, <argument pos:start="69:23" pos:end="69:34"><expr pos:start="69:23" pos:end="69:34"><name pos:start="69:23" pos:end="69:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="69:37" pos:end="71:76"><expr pos:start="69:37" pos:end="71:76"><literal type="string" pos:start="69:37" pos:end="69:80">"negative data_size and/or sample_count in "</literal>

                   <literal type="string" pos:start="71:20" pos:end="71:40">"ds64: data_size = %"</literal><name pos:start="71:41" pos:end="71:46">PRId64</name><literal type="string" pos:start="71:47" pos:end="71:66">", sample_count = %"</literal><name pos:start="71:67" pos:end="71:72">PRId64</name><literal type="string" pos:start="71:73" pos:end="71:76">"\n"</literal></expr></argument>,

                   <argument pos:start="73:20" pos:end="73:28"><expr pos:start="73:20" pos:end="73:28"><name pos:start="73:20" pos:end="73:28">data_size</name></expr></argument>, <argument pos:start="73:31" pos:end="73:42"><expr pos:start="73:31" pos:end="73:42"><name pos:start="73:31" pos:end="73:42">sample_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:39">return <expr pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:33"><expr pos:start="79:9" pos:end="79:32"><call pos:start="79:9" pos:end="79:32"><name pos:start="79:9" pos:end="79:17">avio_skip</name><argument_list pos:start="79:18" pos:end="79:32">(<argument pos:start="79:19" pos:end="79:20"><expr pos:start="79:19" pos:end="79:20"><name pos:start="79:19" pos:end="79:20">pb</name></expr></argument>, <argument pos:start="79:23" pos:end="79:31"><expr pos:start="79:23" pos:end="79:31"><name pos:start="79:23" pos:end="79:26">size</name> <operator pos:start="79:28" pos:end="79:28">-</operator> <literal type="number" pos:start="79:30" pos:end="79:31">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="79:35" pos:end="79:63">/* skip rest of ds64 chunk */</comment>

    </block_content>}</block></if></if_stmt>



    <for pos:start="85:5" pos:end="191:5">for <control pos:start="85:9" pos:end="85:12">(<init pos:start="85:10" pos:end="85:10">;</init><condition pos:start="85:11" pos:end="85:11">;</condition><incr/>)</control> <block pos:start="85:14" pos:end="191:5">{<block_content pos:start="87:9" pos:end="189:9">

        <expr_stmt pos:start="87:9" pos:end="87:34"><expr pos:start="87:9" pos:end="87:33"><name pos:start="87:9" pos:end="87:12">size</name> <operator pos:start="87:14" pos:end="87:14">=</operator> <call pos:start="87:16" pos:end="87:33"><name pos:start="87:16" pos:end="87:23">next_tag</name><argument_list pos:start="87:24" pos:end="87:33">(<argument pos:start="87:25" pos:end="87:26"><expr pos:start="87:25" pos:end="87:26"><name pos:start="87:25" pos:end="87:26">pb</name></expr></argument>, <argument pos:start="87:29" pos:end="87:32"><expr pos:start="87:29" pos:end="87:32"><operator pos:start="87:29" pos:end="87:29">&amp;</operator><name pos:start="87:30" pos:end="87:32">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:44"><expr pos:start="89:9" pos:end="89:43"><name pos:start="89:9" pos:end="89:20">next_tag_ofs</name> <operator pos:start="89:22" pos:end="89:22">=</operator> <call pos:start="89:24" pos:end="89:36"><name pos:start="89:24" pos:end="89:32">avio_tell</name><argument_list pos:start="89:33" pos:end="89:36">(<argument pos:start="89:34" pos:end="89:35"><expr pos:start="89:34" pos:end="89:35"><name pos:start="89:34" pos:end="89:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="89:38" pos:end="89:38">+</operator> <name pos:start="89:40" pos:end="89:43">size</name></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="95:18"><if pos:start="93:9" pos:end="95:18">if <condition pos:start="93:12" pos:end="93:25">(<expr pos:start="93:13" pos:end="93:24"><call pos:start="93:13" pos:end="93:24"><name pos:start="93:13" pos:end="93:20">url_feof</name><argument_list pos:start="93:21" pos:end="93:24">(<argument pos:start="93:22" pos:end="93:23"><expr pos:start="93:22" pos:end="93:23"><name pos:start="93:22" pos:end="93:23">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="95:13" pos:end="95:18"><block_content pos:start="95:13" pos:end="95:18">

            <break pos:start="95:13" pos:end="95:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="99:9" pos:end="177:9">switch <condition pos:start="99:16" pos:end="99:20">(<expr pos:start="99:17" pos:end="99:19"><name pos:start="99:17" pos:end="99:19">tag</name></expr>)</condition> <block pos:start="99:22" pos:end="177:9">{<block_content pos:start="101:9" pos:end="175:18">

        <case pos:start="101:9" pos:end="101:39">case <expr pos:start="101:14" pos:end="101:38"><call pos:start="101:14" pos:end="101:38"><name pos:start="101:14" pos:end="101:18">MKTAG</name><argument_list pos:start="101:19" pos:end="101:38">(<argument pos:start="101:20" pos:end="101:22"><expr pos:start="101:20" pos:end="101:22"><literal type="char" pos:start="101:20" pos:end="101:22">'f'</literal></expr></argument>, <argument pos:start="101:25" pos:end="101:27"><expr pos:start="101:25" pos:end="101:27"><literal type="char" pos:start="101:25" pos:end="101:27">'m'</literal></expr></argument>, <argument pos:start="101:30" pos:end="101:32"><expr pos:start="101:30" pos:end="101:32"><literal type="char" pos:start="101:30" pos:end="101:32">'t'</literal></expr></argument>, <argument pos:start="101:35" pos:end="101:37"><expr pos:start="101:35" pos:end="101:37"><literal type="char" pos:start="101:35" pos:end="101:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <comment type="block" pos:start="103:13" pos:end="103:55">/* only parse the first 'fmt ' tag found */</comment>

            <if_stmt pos:start="105:13" pos:end="111:78"><if pos:start="105:13" pos:end="109:13">if <condition pos:start="105:16" pos:end="105:72">(<expr pos:start="105:17" pos:end="105:71"><operator pos:start="105:17" pos:end="105:17">!</operator><name pos:start="105:18" pos:end="105:24">got_fmt</name> <operator pos:start="105:26" pos:end="105:27">&amp;&amp;</operator> <operator pos:start="105:29" pos:end="105:29">(</operator><name pos:start="105:30" pos:end="105:32">ret</name> <operator pos:start="105:34" pos:end="105:34">=</operator> <call pos:start="105:36" pos:end="105:66"><name pos:start="105:36" pos:end="105:52">wav_parse_fmt_tag</name><argument_list pos:start="105:53" pos:end="105:66">(<argument pos:start="105:54" pos:end="105:54"><expr pos:start="105:54" pos:end="105:54"><name pos:start="105:54" pos:end="105:54">s</name></expr></argument>, <argument pos:start="105:57" pos:end="105:60"><expr pos:start="105:57" pos:end="105:60"><name pos:start="105:57" pos:end="105:60">size</name></expr></argument>, <argument pos:start="105:63" pos:end="105:65"><expr pos:start="105:63" pos:end="105:65"><operator pos:start="105:63" pos:end="105:63">&amp;</operator><name pos:start="105:64" pos:end="105:65">st</name></expr></argument>)</argument_list></call> <operator pos:start="105:68" pos:end="105:68">&lt;</operator> <literal type="number" pos:start="105:70" pos:end="105:70">0</literal><operator pos:start="105:71" pos:end="105:71">)</operator></expr>)</condition> <block pos:start="105:74" pos:end="109:13">{<block_content pos:start="107:17" pos:end="107:27">

                <return pos:start="107:17" pos:end="107:27">return <expr pos:start="107:24" pos:end="107:26"><name pos:start="107:24" pos:end="107:26">ret</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="109:15" pos:end="111:78">else if <condition pos:start="109:23" pos:end="109:31">(<expr pos:start="109:24" pos:end="109:30"><name pos:start="109:24" pos:end="109:30">got_fmt</name></expr>)</condition><block type="pseudo" pos:start="111:17" pos:end="111:78"><block_content pos:start="111:17" pos:end="111:78">

                <expr_stmt pos:start="111:17" pos:end="111:78"><expr pos:start="111:17" pos:end="111:77"><call pos:start="111:17" pos:end="111:77"><name pos:start="111:17" pos:end="111:22">av_log</name><argument_list pos:start="111:23" pos:end="111:77">(<argument pos:start="111:24" pos:end="111:24"><expr pos:start="111:24" pos:end="111:24"><name pos:start="111:24" pos:end="111:24">s</name></expr></argument>, <argument pos:start="111:27" pos:end="111:40"><expr pos:start="111:27" pos:end="111:40"><name pos:start="111:27" pos:end="111:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="111:43" pos:end="111:76"><expr pos:start="111:43" pos:end="111:76"><literal type="string" pos:start="111:43" pos:end="111:76">"found more than one 'fmt ' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="115:13" pos:end="115:24"><expr pos:start="115:13" pos:end="115:23"><name pos:start="115:13" pos:end="115:19">got_fmt</name> <operator pos:start="115:21" pos:end="115:21">=</operator> <literal type="number" pos:start="115:23" pos:end="115:23">1</literal></expr>;</expr_stmt>

            <break pos:start="117:13" pos:end="117:18">break;</break>

        <case pos:start="119:9" pos:end="119:39">case <expr pos:start="119:14" pos:end="119:38"><call pos:start="119:14" pos:end="119:38"><name pos:start="119:14" pos:end="119:18">MKTAG</name><argument_list pos:start="119:19" pos:end="119:38">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><literal type="char" pos:start="119:20" pos:end="119:22">'d'</literal></expr></argument>, <argument pos:start="119:25" pos:end="119:27"><expr pos:start="119:25" pos:end="119:27"><literal type="char" pos:start="119:25" pos:end="119:27">'a'</literal></expr></argument>, <argument pos:start="119:30" pos:end="119:32"><expr pos:start="119:30" pos:end="119:32"><literal type="char" pos:start="119:30" pos:end="119:32">'t'</literal></expr></argument>, <argument pos:start="119:35" pos:end="119:37"><expr pos:start="119:35" pos:end="119:37"><literal type="char" pos:start="119:35" pos:end="119:37">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="121:13" pos:end="127:13"><if pos:start="121:13" pos:end="127:13">if <condition pos:start="121:16" pos:end="121:25">(<expr pos:start="121:17" pos:end="121:24"><operator pos:start="121:17" pos:end="121:17">!</operator><name pos:start="121:18" pos:end="121:24">got_fmt</name></expr>)</condition> <block pos:start="121:27" pos:end="127:13">{<block_content pos:start="123:17" pos:end="125:43">

                <expr_stmt pos:start="123:17" pos:end="123:87"><expr pos:start="123:17" pos:end="123:86"><call pos:start="123:17" pos:end="123:86"><name pos:start="123:17" pos:end="123:22">av_log</name><argument_list pos:start="123:23" pos:end="123:86">(<argument pos:start="123:24" pos:end="123:24"><expr pos:start="123:24" pos:end="123:24"><name pos:start="123:24" pos:end="123:24">s</name></expr></argument>, <argument pos:start="123:27" pos:end="123:38"><expr pos:start="123:27" pos:end="123:38"><name pos:start="123:27" pos:end="123:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="123:41" pos:end="123:85"><expr pos:start="123:41" pos:end="123:85"><literal type="string" pos:start="123:41" pos:end="123:85">"found no 'fmt ' tag before the 'data' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="125:17" pos:end="125:43">return <expr pos:start="125:24" pos:end="125:42"><name pos:start="125:24" pos:end="125:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="131:13" pos:end="141:13"><if pos:start="131:13" pos:end="135:13">if <condition pos:start="131:16" pos:end="131:21">(<expr pos:start="131:17" pos:end="131:20"><name pos:start="131:17" pos:end="131:20">rf64</name></expr>)</condition> <block pos:start="131:23" pos:end="135:13">{<block_content pos:start="133:17" pos:end="133:73">

                <expr_stmt pos:start="133:17" pos:end="133:73"><expr pos:start="133:17" pos:end="133:72"><name pos:start="133:17" pos:end="133:28">next_tag_ofs</name> <operator pos:start="133:30" pos:end="133:30">=</operator> <name pos:start="133:32" pos:end="133:44"><name pos:start="133:32" pos:end="133:34">wav</name><operator pos:start="133:35" pos:end="133:36">-&gt;</operator><name pos:start="133:37" pos:end="133:44">data_end</name></name> <operator pos:start="133:46" pos:end="133:46">=</operator> <call pos:start="133:48" pos:end="133:60"><name pos:start="133:48" pos:end="133:56">avio_tell</name><argument_list pos:start="133:57" pos:end="133:60">(<argument pos:start="133:58" pos:end="133:59"><expr pos:start="133:58" pos:end="133:59"><name pos:start="133:58" pos:end="133:59">pb</name></expr></argument>)</argument_list></call> <operator pos:start="133:62" pos:end="133:62">+</operator> <name pos:start="133:64" pos:end="133:72">data_size</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="135:15" pos:end="141:13">else <block pos:start="135:20" pos:end="141:13">{<block_content pos:start="137:17" pos:end="139:79">

                <expr_stmt pos:start="137:17" pos:end="137:33"><expr pos:start="137:17" pos:end="137:32"><name pos:start="137:17" pos:end="137:25">data_size</name> <operator pos:start="137:27" pos:end="137:27">=</operator> <name pos:start="137:29" pos:end="137:32">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="139:17" pos:end="139:79"><expr pos:start="139:17" pos:end="139:78"><name pos:start="139:17" pos:end="139:28">next_tag_ofs</name> <operator pos:start="139:30" pos:end="139:30">=</operator> <name pos:start="139:32" pos:end="139:44"><name pos:start="139:32" pos:end="139:34">wav</name><operator pos:start="139:35" pos:end="139:36">-&gt;</operator><name pos:start="139:37" pos:end="139:44">data_end</name></name> <operator pos:start="139:46" pos:end="139:46">=</operator> <ternary pos:start="139:48" pos:end="139:78"><condition pos:start="139:48" pos:end="139:53"><expr pos:start="139:48" pos:end="139:51"><name pos:start="139:48" pos:end="139:51">size</name></expr> ?</condition><then pos:start="139:55" pos:end="139:66"> <expr pos:start="139:55" pos:end="139:66"><name pos:start="139:55" pos:end="139:66">next_tag_ofs</name></expr> </then><else pos:start="139:68" pos:end="139:78">: <expr pos:start="139:70" pos:end="139:78"><name pos:start="139:70" pos:end="139:78">INT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="145:13" pos:end="145:37"><expr pos:start="145:13" pos:end="145:36"><name pos:start="145:13" pos:end="145:20">data_ofs</name> <operator pos:start="145:22" pos:end="145:22">=</operator> <call pos:start="145:24" pos:end="145:36"><name pos:start="145:24" pos:end="145:32">avio_tell</name><argument_list pos:start="145:33" pos:end="145:36">(<argument pos:start="145:34" pos:end="145:35"><expr pos:start="145:34" pos:end="145:35"><name pos:start="145:34" pos:end="145:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="149:13" pos:end="153:15">/* don't look for footer metadata if we can't seek or if we don't

             * know where the data tag ends

             */</comment>

            <if_stmt pos:start="155:13" pos:end="157:32"><if pos:start="155:13" pos:end="157:32">if <condition pos:start="155:16" pos:end="155:50">(<expr pos:start="155:17" pos:end="155:49"><operator pos:start="155:17" pos:end="155:17">!</operator><name pos:start="155:18" pos:end="155:29"><name pos:start="155:18" pos:end="155:19">pb</name><operator pos:start="155:20" pos:end="155:21">-&gt;</operator><name pos:start="155:22" pos:end="155:29">seekable</name></name> <operator pos:start="155:31" pos:end="155:32">||</operator> <operator pos:start="155:34" pos:end="155:34">(</operator><operator pos:start="155:35" pos:end="155:35">!</operator><name pos:start="155:36" pos:end="155:39">rf64</name> <operator pos:start="155:41" pos:end="155:42">&amp;&amp;</operator> <operator pos:start="155:44" pos:end="155:44">!</operator><name pos:start="155:45" pos:end="155:48">size</name><operator pos:start="155:49" pos:end="155:49">)</operator></expr>)</condition><block type="pseudo" pos:start="157:17" pos:end="157:32"><block_content pos:start="157:17" pos:end="157:32">

                <goto pos:start="157:17" pos:end="157:32">goto <name pos:start="157:22" pos:end="157:31">break_loop</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="159:13" pos:end="159:18">break;</break>

        <case pos:start="161:9" pos:end="161:36">case <expr pos:start="161:14" pos:end="161:35"><call pos:start="161:14" pos:end="161:35"><name pos:start="161:14" pos:end="161:18">MKTAG</name><argument_list pos:start="161:19" pos:end="161:35">(<argument pos:start="161:20" pos:end="161:22"><expr pos:start="161:20" pos:end="161:22"><literal type="char" pos:start="161:20" pos:end="161:22">'f'</literal></expr></argument>,<argument pos:start="161:24" pos:end="161:26"><expr pos:start="161:24" pos:end="161:26"><literal type="char" pos:start="161:24" pos:end="161:26">'a'</literal></expr></argument>,<argument pos:start="161:28" pos:end="161:30"><expr pos:start="161:28" pos:end="161:30"><literal type="char" pos:start="161:28" pos:end="161:30">'c'</literal></expr></argument>,<argument pos:start="161:32" pos:end="161:34"><expr pos:start="161:32" pos:end="161:34"><literal type="char" pos:start="161:32" pos:end="161:34">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="163:13" pos:end="165:45"><if pos:start="163:13" pos:end="165:45">if<condition pos:start="163:15" pos:end="163:29">(<expr pos:start="163:16" pos:end="163:28"><operator pos:start="163:16" pos:end="163:16">!</operator><name pos:start="163:17" pos:end="163:28">sample_count</name></expr>)</condition><block type="pseudo" pos:start="165:17" pos:end="165:45"><block_content pos:start="165:17" pos:end="165:45">

                <expr_stmt pos:start="165:17" pos:end="165:45"><expr pos:start="165:17" pos:end="165:44"><name pos:start="165:17" pos:end="165:28">sample_count</name> <operator pos:start="165:30" pos:end="165:30">=</operator> <call pos:start="165:32" pos:end="165:44"><name pos:start="165:32" pos:end="165:40">avio_rl32</name><argument_list pos:start="165:41" pos:end="165:44">(<argument pos:start="165:42" pos:end="165:43"><expr pos:start="165:42" pos:end="165:43"><name pos:start="165:42" pos:end="165:43">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="167:13" pos:end="167:18">break;</break>

        <case pos:start="169:9" pos:end="169:36">case <expr pos:start="169:14" pos:end="169:35"><call pos:start="169:14" pos:end="169:35"><name pos:start="169:14" pos:end="169:18">MKTAG</name><argument_list pos:start="169:19" pos:end="169:35">(<argument pos:start="169:20" pos:end="169:22"><expr pos:start="169:20" pos:end="169:22"><literal type="char" pos:start="169:20" pos:end="169:22">'b'</literal></expr></argument>,<argument pos:start="169:24" pos:end="169:26"><expr pos:start="169:24" pos:end="169:26"><literal type="char" pos:start="169:24" pos:end="169:26">'e'</literal></expr></argument>,<argument pos:start="169:28" pos:end="169:30"><expr pos:start="169:28" pos:end="169:30"><literal type="char" pos:start="169:28" pos:end="169:30">'x'</literal></expr></argument>,<argument pos:start="169:32" pos:end="169:34"><expr pos:start="169:32" pos:end="169:34"><literal type="char" pos:start="169:32" pos:end="169:34">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="171:13" pos:end="173:27"><if pos:start="171:13" pos:end="173:27">if <condition pos:start="171:16" pos:end="171:56">(<expr pos:start="171:17" pos:end="171:55"><operator pos:start="171:17" pos:end="171:17">(</operator><name pos:start="171:18" pos:end="171:20">ret</name> <operator pos:start="171:22" pos:end="171:22">=</operator> <call pos:start="171:24" pos:end="171:50"><name pos:start="171:24" pos:end="171:41">wav_parse_bext_tag</name><argument_list pos:start="171:42" pos:end="171:50">(<argument pos:start="171:43" pos:end="171:43"><expr pos:start="171:43" pos:end="171:43"><name pos:start="171:43" pos:end="171:43">s</name></expr></argument>, <argument pos:start="171:46" pos:end="171:49"><expr pos:start="171:46" pos:end="171:49"><name pos:start="171:46" pos:end="171:49">size</name></expr></argument>)</argument_list></call><operator pos:start="171:51" pos:end="171:51">)</operator> <operator pos:start="171:53" pos:end="171:53">&lt;</operator> <literal type="number" pos:start="171:55" pos:end="171:55">0</literal></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:27"><block_content pos:start="173:17" pos:end="173:27">

                <return pos:start="173:17" pos:end="173:27">return <expr pos:start="173:24" pos:end="173:26"><name pos:start="173:24" pos:end="173:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="175:13" pos:end="175:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="181:9" pos:end="181:69">/* seek to next tag unless we know that we'll run into EOF */</comment>

        <if_stmt pos:start="183:9" pos:end="189:9"><if pos:start="183:9" pos:end="189:9">if <condition pos:start="183:12" pos:end="185:54">(<expr pos:start="183:13" pos:end="185:53"><operator pos:start="183:13" pos:end="183:13">(</operator><call pos:start="183:14" pos:end="183:26"><name pos:start="183:14" pos:end="183:22">avio_size</name><argument_list pos:start="183:23" pos:end="183:26">(<argument pos:start="183:24" pos:end="183:25"><expr pos:start="183:24" pos:end="183:25"><name pos:start="183:24" pos:end="183:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="183:28" pos:end="183:28">&gt;</operator> <literal type="number" pos:start="183:30" pos:end="183:30">0</literal> <operator pos:start="183:32" pos:end="183:33">&amp;&amp;</operator> <name pos:start="183:35" pos:end="183:46">next_tag_ofs</name> <operator pos:start="183:48" pos:end="183:49">&gt;=</operator> <call pos:start="183:51" pos:end="183:63"><name pos:start="183:51" pos:end="183:59">avio_size</name><argument_list pos:start="183:60" pos:end="183:63">(<argument pos:start="183:61" pos:end="183:62"><expr pos:start="183:61" pos:end="183:62"><name pos:start="183:61" pos:end="183:62">pb</name></expr></argument>)</argument_list></call><operator pos:start="183:64" pos:end="183:64">)</operator> <operator pos:start="183:66" pos:end="183:67">||</operator>

            <call pos:start="185:13" pos:end="185:49"><name pos:start="185:13" pos:end="185:21">avio_seek</name><argument_list pos:start="185:22" pos:end="185:49">(<argument pos:start="185:23" pos:end="185:24"><expr pos:start="185:23" pos:end="185:24"><name pos:start="185:23" pos:end="185:24">pb</name></expr></argument>, <argument pos:start="185:27" pos:end="185:38"><expr pos:start="185:27" pos:end="185:38"><name pos:start="185:27" pos:end="185:38">next_tag_ofs</name></expr></argument>, <argument pos:start="185:41" pos:end="185:48"><expr pos:start="185:41" pos:end="185:48"><name pos:start="185:41" pos:end="185:48">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="185:51" pos:end="185:51">&lt;</operator> <literal type="number" pos:start="185:53" pos:end="185:53">0</literal></expr>)</condition> <block pos:start="185:56" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:18">

            <break pos:start="187:13" pos:end="187:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<label pos:start="193:1" pos:end="193:11"><name pos:start="193:1" pos:end="193:10">break_loop</name>:</label>

    <if_stmt pos:start="195:5" pos:end="201:5"><if pos:start="195:5" pos:end="201:5">if <condition pos:start="195:8" pos:end="195:21">(<expr pos:start="195:9" pos:end="195:20"><name pos:start="195:9" pos:end="195:16">data_ofs</name> <operator pos:start="195:18" pos:end="195:18">&lt;</operator> <literal type="number" pos:start="195:20" pos:end="195:20">0</literal></expr>)</condition> <block pos:start="195:23" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:35">

        <expr_stmt pos:start="197:9" pos:end="197:57"><expr pos:start="197:9" pos:end="197:56"><call pos:start="197:9" pos:end="197:56"><name pos:start="197:9" pos:end="197:14">av_log</name><argument_list pos:start="197:15" pos:end="197:56">(<argument pos:start="197:16" pos:end="197:16"><expr pos:start="197:16" pos:end="197:16"><name pos:start="197:16" pos:end="197:16">s</name></expr></argument>, <argument pos:start="197:19" pos:end="197:30"><expr pos:start="197:19" pos:end="197:30"><name pos:start="197:19" pos:end="197:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="197:33" pos:end="197:55"><expr pos:start="197:33" pos:end="197:55"><literal type="string" pos:start="197:33" pos:end="197:55">"no 'data' tag found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="199:9" pos:end="199:35">return <expr pos:start="199:16" pos:end="199:34"><name pos:start="199:16" pos:end="199:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="205:5" pos:end="205:38"><expr pos:start="205:5" pos:end="205:37"><call pos:start="205:5" pos:end="205:37"><name pos:start="205:5" pos:end="205:13">avio_seek</name><argument_list pos:start="205:14" pos:end="205:37">(<argument pos:start="205:15" pos:end="205:16"><expr pos:start="205:15" pos:end="205:16"><name pos:start="205:15" pos:end="205:16">pb</name></expr></argument>, <argument pos:start="205:19" pos:end="205:26"><expr pos:start="205:19" pos:end="205:26"><name pos:start="205:19" pos:end="205:26">data_ofs</name></expr></argument>, <argument pos:start="205:29" pos:end="205:36"><expr pos:start="205:29" pos:end="205:36"><name pos:start="205:29" pos:end="205:36">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="209:5" pos:end="211:118"><if pos:start="209:5" pos:end="211:118">if <condition pos:start="209:8" pos:end="209:92">(<expr pos:start="209:9" pos:end="209:91"><operator pos:start="209:9" pos:end="209:9">!</operator><name pos:start="209:10" pos:end="209:21">sample_count</name> <operator pos:start="209:23" pos:end="209:24">&amp;&amp;</operator> <name pos:start="209:26" pos:end="209:44"><name pos:start="209:26" pos:end="209:27">st</name><operator pos:start="209:28" pos:end="209:29">-&gt;</operator><name pos:start="209:30" pos:end="209:34">codec</name><operator pos:start="209:35" pos:end="209:36">-&gt;</operator><name pos:start="209:37" pos:end="209:44">channels</name></name> <operator pos:start="209:46" pos:end="209:47">&amp;&amp;</operator> <call pos:start="209:49" pos:end="209:91"><name pos:start="209:49" pos:end="209:70">av_get_bits_per_sample</name><argument_list pos:start="209:71" pos:end="209:91">(<argument pos:start="209:72" pos:end="209:90"><expr pos:start="209:72" pos:end="209:90"><name pos:start="209:72" pos:end="209:90"><name pos:start="209:72" pos:end="209:73">st</name><operator pos:start="209:74" pos:end="209:75">-&gt;</operator><name pos:start="209:76" pos:end="209:80">codec</name><operator pos:start="209:81" pos:end="209:82">-&gt;</operator><name pos:start="209:83" pos:end="209:90">codec_id</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="211:9" pos:end="211:118"><block_content pos:start="211:9" pos:end="211:118">

        <expr_stmt pos:start="211:9" pos:end="211:118"><expr pos:start="211:9" pos:end="211:117"><name pos:start="211:9" pos:end="211:20">sample_count</name> <operator pos:start="211:22" pos:end="211:22">=</operator> <operator pos:start="211:24" pos:end="211:24">(</operator><name pos:start="211:25" pos:end="211:33">data_size</name><operator pos:start="211:34" pos:end="211:35">&lt;&lt;</operator><literal type="number" pos:start="211:36" pos:end="211:36">3</literal><operator pos:start="211:37" pos:end="211:37">)</operator> <operator pos:start="211:39" pos:end="211:39">/</operator> <operator pos:start="211:41" pos:end="211:41">(</operator><name pos:start="211:42" pos:end="211:60"><name pos:start="211:42" pos:end="211:43">st</name><operator pos:start="211:44" pos:end="211:45">-&gt;</operator><name pos:start="211:46" pos:end="211:50">codec</name><operator pos:start="211:51" pos:end="211:52">-&gt;</operator><name pos:start="211:53" pos:end="211:60">channels</name></name> <operator pos:start="211:62" pos:end="211:62">*</operator> <operator pos:start="211:64" pos:end="211:64">(</operator><name pos:start="211:65" pos:end="211:72">uint64_t</name><operator pos:start="211:73" pos:end="211:73">)</operator><call pos:start="211:74" pos:end="211:116"><name pos:start="211:74" pos:end="211:95">av_get_bits_per_sample</name><argument_list pos:start="211:96" pos:end="211:116">(<argument pos:start="211:97" pos:end="211:115"><expr pos:start="211:97" pos:end="211:115"><name pos:start="211:97" pos:end="211:115"><name pos:start="211:97" pos:end="211:98">st</name><operator pos:start="211:99" pos:end="211:100">-&gt;</operator><name pos:start="211:101" pos:end="211:105">codec</name><operator pos:start="211:106" pos:end="211:107">-&gt;</operator><name pos:start="211:108" pos:end="211:115">codec_id</name></name></expr></argument>)</argument_list></call><operator pos:start="211:117" pos:end="211:117">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="213:5" pos:end="215:36"><if pos:start="213:5" pos:end="215:36">if <condition pos:start="213:8" pos:end="213:21">(<expr pos:start="213:9" pos:end="213:20"><name pos:start="213:9" pos:end="213:20">sample_count</name></expr>)</condition><block type="pseudo" pos:start="215:9" pos:end="215:36"><block_content pos:start="215:9" pos:end="215:36">

        <expr_stmt pos:start="215:9" pos:end="215:36"><expr pos:start="215:9" pos:end="215:35"><name pos:start="215:9" pos:end="215:20"><name pos:start="215:9" pos:end="215:10">st</name><operator pos:start="215:11" pos:end="215:12">-&gt;</operator><name pos:start="215:13" pos:end="215:20">duration</name></name> <operator pos:start="215:22" pos:end="215:22">=</operator> <name pos:start="215:24" pos:end="215:35">sample_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="219:5" pos:end="219:53"><expr pos:start="219:5" pos:end="219:52"><call pos:start="219:5" pos:end="219:52"><name pos:start="219:5" pos:end="219:24">ff_metadata_conv_ctx</name><argument_list pos:start="219:25" pos:end="219:52">(<argument pos:start="219:26" pos:end="219:26"><expr pos:start="219:26" pos:end="219:26"><name pos:start="219:26" pos:end="219:26">s</name></expr></argument>, <argument pos:start="219:29" pos:end="219:32"><expr pos:start="219:29" pos:end="219:32"><name pos:start="219:29" pos:end="219:32">NULL</name></expr></argument>, <argument pos:start="219:35" pos:end="219:51"><expr pos:start="219:35" pos:end="219:51"><name pos:start="219:35" pos:end="219:51">wav_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="223:5" pos:end="223:13">return <expr pos:start="223:12" pos:end="223:12"><literal type="number" pos:start="223:12" pos:end="223:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
