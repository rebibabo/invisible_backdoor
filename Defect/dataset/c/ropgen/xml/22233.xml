<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22233.c" pos:tabs="8"><function pos:start="1:1" pos:end="208:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:20">mips_malta_init</name><parameter_list pos:start="1:21" pos:end="1:47">(<parameter pos:start="1:22" pos:end="1:46"><decl pos:start="1:22" pos:end="1:46"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:40">QEMUMachineInitArgs</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">args</name></decl></parameter>)</parameter_list>
<block pos:start="2:1" pos:end="208:1">{<block_content pos:start="3:5" pos:end="207:26">
    <decl_stmt pos:start="3:5" pos:end="3:41"><decl pos:start="3:5" pos:end="3:40"><type pos:start="3:5" pos:end="3:14"><name pos:start="3:5" pos:end="3:14">ram_addr_t</name></type> <name pos:start="3:16" pos:end="3:23">ram_size</name> <init pos:start="3:25" pos:end="3:40">= <expr pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:40"><name pos:start="3:27" pos:end="3:30">args</name><operator pos:start="3:31" pos:end="3:32">-&gt;</operator><name pos:start="3:33" pos:end="3:40">ram_size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="4:5" pos:end="4:44"><decl pos:start="4:5" pos:end="4:43"><type pos:start="4:5" pos:end="4:16"><specifier pos:start="4:5" pos:end="4:9">const</specifier> <name pos:start="4:11" pos:end="4:14">char</name> <modifier pos:start="4:16" pos:end="4:16">*</modifier></type><name pos:start="4:17" pos:end="4:25">cpu_model</name> <init pos:start="4:27" pos:end="4:43">= <expr pos:start="4:29" pos:end="4:43"><name pos:start="4:29" pos:end="4:43"><name pos:start="4:29" pos:end="4:32">args</name><operator pos:start="4:33" pos:end="4:34">-&gt;</operator><name pos:start="4:35" pos:end="4:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:56"><decl pos:start="5:5" pos:end="5:55"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:31">kernel_filename</name> <init pos:start="5:33" pos:end="5:55">= <expr pos:start="5:35" pos:end="5:55"><name pos:start="5:35" pos:end="5:55"><name pos:start="5:35" pos:end="5:38">args</name><operator pos:start="5:39" pos:end="5:40">-&gt;</operator><name pos:start="5:41" pos:end="5:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:54"><decl pos:start="6:5" pos:end="6:53"><type pos:start="6:5" pos:end="6:16"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:14">char</name> <modifier pos:start="6:16" pos:end="6:16">*</modifier></type><name pos:start="6:17" pos:end="6:30">kernel_cmdline</name> <init pos:start="6:32" pos:end="6:53">= <expr pos:start="6:34" pos:end="6:53"><name pos:start="6:34" pos:end="6:53"><name pos:start="6:34" pos:end="6:37">args</name><operator pos:start="6:38" pos:end="6:39">-&gt;</operator><name pos:start="6:40" pos:end="6:53">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:56"><decl pos:start="7:5" pos:end="7:55"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:31">initrd_filename</name> <init pos:start="7:33" pos:end="7:55">= <expr pos:start="7:35" pos:end="7:55"><name pos:start="7:35" pos:end="7:55"><name pos:start="7:35" pos:end="7:38">args</name><operator pos:start="7:39" pos:end="7:40">-&gt;</operator><name pos:start="7:41" pos:end="7:55">initrd_filename</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:19"><decl pos:start="8:5" pos:end="8:18"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:8">char</name> <modifier pos:start="8:10" pos:end="8:10">*</modifier></type><name pos:start="8:11" pos:end="8:18">filename</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">pflash_t</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:16">fl</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:54"><decl pos:start="10:5" pos:end="10:53"><type pos:start="10:5" pos:end="10:18"><name pos:start="10:5" pos:end="10:16">MemoryRegion</name> <modifier pos:start="10:18" pos:end="10:18">*</modifier></type><name pos:start="10:19" pos:end="10:31">system_memory</name> <init pos:start="10:33" pos:end="10:53">= <expr pos:start="10:35" pos:end="10:53"><call pos:start="10:35" pos:end="10:53"><name pos:start="10:35" pos:end="10:51">get_system_memory</name><argument_list pos:start="10:52" pos:end="10:53">()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:46"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">ram</name> <init pos:start="11:23" pos:end="11:46">= <expr pos:start="11:25" pos:end="11:46"><call pos:start="11:25" pos:end="11:46"><name pos:start="11:25" pos:end="11:29">g_new</name><argument_list pos:start="11:30" pos:end="11:46">(<argument pos:start="11:31" pos:end="11:42"><expr pos:start="11:31" pos:end="11:42"><name pos:start="11:31" pos:end="11:42">MemoryRegion</name></expr></argument>, <argument pos:start="11:45" pos:end="11:45"><expr pos:start="11:45" pos:end="11:45"><literal type="number" pos:start="11:45" pos:end="11:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:60"><decl pos:start="12:5" pos:end="12:22"><type pos:start="12:5" pos:end="12:18"><name pos:start="12:5" pos:end="12:16">MemoryRegion</name> <modifier pos:start="12:18" pos:end="12:18">*</modifier></type><name pos:start="12:19" pos:end="12:22">bios</name></decl>, <decl pos:start="12:25" pos:end="12:59"><type ref="prev" pos:start="12:5" pos:end="12:18"><modifier pos:start="12:25" pos:end="12:25">*</modifier></type><name pos:start="12:26" pos:end="12:34">bios_copy</name> <init pos:start="12:36" pos:end="12:59">= <expr pos:start="12:38" pos:end="12:59"><call pos:start="12:38" pos:end="12:59"><name pos:start="12:38" pos:end="12:42">g_new</name><argument_list pos:start="12:43" pos:end="12:59">(<argument pos:start="12:44" pos:end="12:55"><expr pos:start="12:44" pos:end="12:55"><name pos:start="12:44" pos:end="12:55">MemoryRegion</name></expr></argument>, <argument pos:start="12:58" pos:end="12:58"><expr pos:start="12:58" pos:end="12:58"><literal type="number" pos:start="12:58" pos:end="12:58">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:39"><decl pos:start="13:5" pos:end="13:38"><type pos:start="13:5" pos:end="13:15"><name pos:start="13:5" pos:end="13:15">target_long</name></type> <name pos:start="13:17" pos:end="13:25">bios_size</name> <init pos:start="13:27" pos:end="13:38">= <expr pos:start="13:29" pos:end="13:38"><name pos:start="13:29" pos:end="13:38">FLASH_SIZE</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:45"><decl pos:start="14:5" pos:end="14:44"><type pos:start="14:5" pos:end="14:16"><specifier pos:start="14:5" pos:end="14:9">const</specifier> <name pos:start="14:11" pos:end="14:16">size_t</name></type> <name pos:start="14:18" pos:end="14:34">smbus_eeprom_size</name> <init pos:start="14:36" pos:end="14:44">= <expr pos:start="14:38" pos:end="14:44"><literal type="number" pos:start="14:38" pos:end="14:38">8</literal> <operator pos:start="14:40" pos:end="14:40">*</operator> <literal type="number" pos:start="14:42" pos:end="14:44">256</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="15:5" pos:end="15:61"><decl pos:start="15:5" pos:end="15:60"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:29">smbus_eeprom_buf</name> <init pos:start="15:31" pos:end="15:60">= <expr pos:start="15:33" pos:end="15:60"><call pos:start="15:33" pos:end="15:60"><name pos:start="15:33" pos:end="15:41">g_malloc0</name><argument_list pos:start="15:42" pos:end="15:60">(<argument pos:start="15:43" pos:end="15:59"><expr pos:start="15:43" pos:end="15:59"><name pos:start="15:43" pos:end="15:59">smbus_eeprom_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="16:5" pos:end="16:25"><decl pos:start="16:5" pos:end="16:24"><type pos:start="16:5" pos:end="16:11"><name pos:start="16:5" pos:end="16:11">int64_t</name></type> <name pos:start="16:13" pos:end="16:24">kernel_entry</name></decl>;</decl_stmt>
    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:10">PCIBus</name> <modifier pos:start="17:12" pos:end="17:12">*</modifier></type><name pos:start="17:13" pos:end="17:19">pci_bus</name></decl>;</decl_stmt>
    <decl_stmt pos:start="18:5" pos:end="18:20"><decl pos:start="18:5" pos:end="18:19"><type pos:start="18:5" pos:end="18:12"><name pos:start="18:5" pos:end="18:10">ISABus</name> <modifier pos:start="18:12" pos:end="18:12">*</modifier></type><name pos:start="18:13" pos:end="18:19">isa_bus</name></decl>;</decl_stmt>
    <decl_stmt pos:start="19:5" pos:end="19:17"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">MIPSCPU</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:16">cpu</name></decl>;</decl_stmt>
    <decl_stmt pos:start="20:5" pos:end="20:22"><decl pos:start="20:5" pos:end="20:21"><type pos:start="20:5" pos:end="20:18"><name pos:start="20:5" pos:end="20:16">CPUMIPSState</name> <modifier pos:start="20:18" pos:end="20:18">*</modifier></type><name pos:start="20:19" pos:end="20:21">env</name></decl>;</decl_stmt>
    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:12">qemu_irq</name> <modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:21">isa_irq</name></decl>;</decl_stmt>
    <decl_stmt pos:start="22:5" pos:end="22:27"><decl pos:start="22:5" pos:end="22:26"><type pos:start="22:5" pos:end="22:14"><name pos:start="22:5" pos:end="22:12">qemu_irq</name> <modifier pos:start="22:14" pos:end="22:14">*</modifier></type><name pos:start="22:15" pos:end="22:26">cpu_exit_irq</name></decl>;</decl_stmt>
    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:19">piix4_devfn</name></decl>;</decl_stmt>
    <decl_stmt pos:start="24:5" pos:end="24:19"><decl pos:start="24:5" pos:end="24:18"><type pos:start="24:5" pos:end="24:13"><name pos:start="24:5" pos:end="24:11">i2c_bus</name> <modifier pos:start="24:13" pos:end="24:13">*</modifier></type><name pos:start="24:14" pos:end="24:18">smbus</name></decl>;</decl_stmt>
    <decl_stmt pos:start="25:5" pos:end="25:10"><decl pos:start="25:5" pos:end="25:9"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:9">i</name></decl>;</decl_stmt>
    <decl_stmt pos:start="26:5" pos:end="26:21"><decl pos:start="26:5" pos:end="26:20"><type pos:start="26:5" pos:end="26:15"><name pos:start="26:5" pos:end="26:13">DriveInfo</name> <modifier pos:start="26:15" pos:end="26:15">*</modifier></type><name pos:start="26:16" pos:end="26:20">dinfo</name></decl>;</decl_stmt>
    <decl_stmt pos:start="27:5" pos:end="27:46"><decl pos:start="27:5" pos:end="27:45"><type pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:13">DriveInfo</name> <modifier pos:start="27:15" pos:end="27:15">*</modifier></type><name pos:start="27:16" pos:end="27:45"><name pos:start="27:16" pos:end="27:17">hd</name><index pos:start="27:18" pos:end="27:45">[<expr pos:start="27:19" pos:end="27:44"><name pos:start="27:19" pos:end="27:29">MAX_IDE_BUS</name> <operator pos:start="27:31" pos:end="27:31">*</operator> <name pos:start="27:33" pos:end="27:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="28:5" pos:end="28:26"><decl pos:start="28:5" pos:end="28:25"><type pos:start="28:5" pos:end="28:15"><name pos:start="28:5" pos:end="28:13">DriveInfo</name> <modifier pos:start="28:15" pos:end="28:15">*</modifier></type><name pos:start="28:16" pos:end="28:25"><name pos:start="28:16" pos:end="28:17">fd</name><index pos:start="28:18" pos:end="28:25">[<expr pos:start="28:19" pos:end="28:24"><name pos:start="28:19" pos:end="28:24">MAX_FD</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="29:5" pos:end="29:19"><decl pos:start="29:5" pos:end="29:18"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:14">fl_idx</name> <init pos:start="29:16" pos:end="29:18">= <expr pos:start="29:18" pos:end="29:18"><literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="30:5" pos:end="30:37"><decl pos:start="30:5" pos:end="30:36"><type pos:start="30:5" pos:end="30:7"><name pos:start="30:5" pos:end="30:7">int</name></type> <name pos:start="30:9" pos:end="30:18">fl_sectors</name> <init pos:start="30:20" pos:end="30:36">= <expr pos:start="30:22" pos:end="30:36"><name pos:start="30:22" pos:end="30:30">bios_size</name> <operator pos:start="30:32" pos:end="30:33">&gt;&gt;</operator> <literal type="number" pos:start="30:35" pos:end="30:36">16</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="31:5" pos:end="31:11"><decl pos:start="31:5" pos:end="31:10"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:10">be</name></decl>;</decl_stmt>
    <decl_stmt pos:start="32:5" pos:end="32:58"><decl pos:start="32:5" pos:end="32:57"><type pos:start="32:5" pos:end="32:17"><name pos:start="32:5" pos:end="32:15">DeviceState</name> <modifier pos:start="32:17" pos:end="32:17">*</modifier></type><name pos:start="32:18" pos:end="32:20">dev</name> <init pos:start="32:22" pos:end="32:57">= <expr pos:start="32:24" pos:end="32:57"><call pos:start="32:24" pos:end="32:57"><name pos:start="32:24" pos:end="32:34">qdev_create</name><argument_list pos:start="32:35" pos:end="32:57">(<argument pos:start="32:36" pos:end="32:39"><expr pos:start="32:36" pos:end="32:39"><name pos:start="32:36" pos:end="32:39">NULL</name></expr></argument>, <argument pos:start="32:42" pos:end="32:56"><expr pos:start="32:42" pos:end="32:56"><name pos:start="32:42" pos:end="32:56">TYPE_MIPS_MALTA</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="33:5" pos:end="33:36"><decl pos:start="33:5" pos:end="33:35"><type pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:14">MaltaState</name> <modifier pos:start="33:16" pos:end="33:16">*</modifier></type><name pos:start="33:17" pos:end="33:17">s</name> <init pos:start="33:19" pos:end="33:35">= <expr pos:start="33:21" pos:end="33:35"><call pos:start="33:21" pos:end="33:35"><name pos:start="33:21" pos:end="33:30">MIPS_MALTA</name><argument_list pos:start="33:31" pos:end="33:35">(<argument pos:start="33:32" pos:end="33:34"><expr pos:start="33:32" pos:end="33:34"><name pos:start="33:32" pos:end="33:34">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:26"><expr pos:start="34:5" pos:end="34:25"><call pos:start="34:5" pos:end="34:25"><name pos:start="34:5" pos:end="34:20">qdev_init_nofail</name><argument_list pos:start="34:21" pos:end="34:25">(<argument pos:start="34:22" pos:end="34:24"><expr pos:start="34:22" pos:end="34:24"><name pos:start="34:22" pos:end="34:24">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="35:5" pos:end="35:74">/* Make sure the first 3 serial ports are associated with a device. */</comment>
    <for pos:start="36:5" pos:end="42:5">for<control pos:start="36:8" pos:end="36:26">(<init pos:start="36:9" pos:end="36:14"><expr pos:start="36:9" pos:end="36:13"><name pos:start="36:9" pos:end="36:9">i</name> <operator pos:start="36:11" pos:end="36:11">=</operator> <literal type="number" pos:start="36:13" pos:end="36:13">0</literal></expr>;</init> <condition pos:start="36:16" pos:end="36:21"><expr pos:start="36:16" pos:end="36:20"><name pos:start="36:16" pos:end="36:16">i</name> <operator pos:start="36:18" pos:end="36:18">&lt;</operator> <literal type="number" pos:start="36:20" pos:end="36:20">3</literal></expr>;</condition> <incr pos:start="36:23" pos:end="36:25"><expr pos:start="36:23" pos:end="36:25"><name pos:start="36:23" pos:end="36:23">i</name><operator pos:start="36:24" pos:end="36:25">++</operator></expr></incr>)</control> <block pos:start="36:28" pos:end="42:5">{<block_content pos:start="37:9" pos:end="41:9">
        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:27">(<expr pos:start="37:13" pos:end="37:26"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:26"><name pos:start="37:14" pos:end="37:23">serial_hds</name><index pos:start="37:24" pos:end="37:26">[<expr pos:start="37:25" pos:end="37:25"><name pos:start="37:25" pos:end="37:25">i</name></expr>]</index></name></expr>)</condition> <block pos:start="37:29" pos:end="41:9">{<block_content pos:start="38:13" pos:end="40:62">
            <decl_stmt pos:start="38:13" pos:end="38:27"><decl pos:start="38:13" pos:end="38:26"><type pos:start="38:13" pos:end="38:16"><name pos:start="38:13" pos:end="38:16">char</name></type> <name pos:start="38:18" pos:end="38:26"><name pos:start="38:18" pos:end="38:22">label</name><index pos:start="38:23" pos:end="38:26">[<expr pos:start="38:24" pos:end="38:25"><literal type="number" pos:start="38:24" pos:end="38:25">32</literal></expr>]</index></name></decl>;</decl_stmt>
            <expr_stmt pos:start="39:13" pos:end="39:58"><expr pos:start="39:13" pos:end="39:57"><call pos:start="39:13" pos:end="39:57"><name pos:start="39:13" pos:end="39:20">snprintf</name><argument_list pos:start="39:21" pos:end="39:57">(<argument pos:start="39:22" pos:end="39:26"><expr pos:start="39:22" pos:end="39:26"><name pos:start="39:22" pos:end="39:26">label</name></expr></argument>, <argument pos:start="39:29" pos:end="39:41"><expr pos:start="39:29" pos:end="39:41"><sizeof pos:start="39:29" pos:end="39:41">sizeof<argument_list pos:start="39:35" pos:end="39:41">(<argument pos:start="39:36" pos:end="39:40"><expr pos:start="39:36" pos:end="39:40"><name pos:start="39:36" pos:end="39:40">label</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="39:44" pos:end="39:53"><expr pos:start="39:44" pos:end="39:53"><literal type="string" pos:start="39:44" pos:end="39:53">"serial%d"</literal></expr></argument>, <argument pos:start="39:56" pos:end="39:56"><expr pos:start="39:56" pos:end="39:56"><name pos:start="39:56" pos:end="39:56">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:62"><expr pos:start="40:13" pos:end="40:61"><name pos:start="40:13" pos:end="40:25"><name pos:start="40:13" pos:end="40:22">serial_hds</name><index pos:start="40:23" pos:end="40:25">[<expr pos:start="40:24" pos:end="40:24"><name pos:start="40:24" pos:end="40:24">i</name></expr>]</index></name> <operator pos:start="40:27" pos:end="40:27">=</operator> <call pos:start="40:29" pos:end="40:61"><name pos:start="40:29" pos:end="40:40">qemu_chr_new</name><argument_list pos:start="40:41" pos:end="40:61">(<argument pos:start="40:42" pos:end="40:46"><expr pos:start="40:42" pos:end="40:46"><name pos:start="40:42" pos:end="40:46">label</name></expr></argument>, <argument pos:start="40:49" pos:end="40:54"><expr pos:start="40:49" pos:end="40:54"><literal type="string" pos:start="40:49" pos:end="40:54">"null"</literal></expr></argument>, <argument pos:start="40:57" pos:end="40:60"><expr pos:start="40:57" pos:end="40:60"><name pos:start="40:57" pos:end="40:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <comment type="block" pos:start="43:5" pos:end="43:19">/* init CPUs */</comment>
    <if_stmt pos:start="44:5" pos:end="50:5"><if pos:start="44:5" pos:end="50:5">if <condition pos:start="44:8" pos:end="44:26">(<expr pos:start="44:9" pos:end="44:25"><name pos:start="44:9" pos:end="44:17">cpu_model</name> <operator pos:start="44:19" pos:end="44:20">==</operator> <name pos:start="44:22" pos:end="44:25">NULL</name></expr>)</condition> <block pos:start="44:28" pos:end="50:5">{<block_content pos:start="46:9" pos:end="50:0">
<cpp:ifdef pos:start="45:1" pos:end="45:20">#<cpp:directive pos:start="45:2" pos:end="45:6">ifdef</cpp:directive> <name pos:start="45:8" pos:end="45:20">TARGET_MIPS64</name></cpp:ifdef>
        <expr_stmt pos:start="46:9" pos:end="48:0"><expr pos:start="46:9" pos:end="46:26"><name pos:start="46:9" pos:end="46:17">cpu_model</name> <operator pos:start="46:19" pos:end="46:19">=</operator> <literal type="string" pos:start="46:21" pos:end="46:26">"20Kc"</literal></expr>;</expr_stmt>
<cpp:else pos:start="47:1" pos:end="47:5">#<cpp:directive pos:start="47:2" pos:end="47:5">else</cpp:directive></cpp:else>
        <expr_stmt pos:start="48:9" pos:end="50:0"><expr pos:start="48:9" pos:end="48:26"><name pos:start="48:9" pos:end="48:17">cpu_model</name> <operator pos:start="48:19" pos:end="48:19">=</operator> <literal type="string" pos:start="48:21" pos:end="48:26">"24Kf"</literal></expr>;</expr_stmt>
<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <for pos:start="51:5" pos:end="62:5">for <control pos:start="51:9" pos:end="51:34">(<init pos:start="51:10" pos:end="51:15"><expr pos:start="51:10" pos:end="51:14"><name pos:start="51:10" pos:end="51:10">i</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <literal type="number" pos:start="51:14" pos:end="51:14">0</literal></expr>;</init> <condition pos:start="51:17" pos:end="51:29"><expr pos:start="51:17" pos:end="51:28"><name pos:start="51:17" pos:end="51:17">i</name> <operator pos:start="51:19" pos:end="51:19">&lt;</operator> <name pos:start="51:21" pos:end="51:28">smp_cpus</name></expr>;</condition> <incr pos:start="51:31" pos:end="51:33"><expr pos:start="51:31" pos:end="51:33"><name pos:start="51:31" pos:end="51:31">i</name><operator pos:start="51:32" pos:end="51:33">++</operator></expr></incr>)</control> <block pos:start="51:36" pos:end="62:5">{<block_content pos:start="52:9" pos:end="61:49">
        <expr_stmt pos:start="52:9" pos:end="52:39"><expr pos:start="52:9" pos:end="52:38"><name pos:start="52:9" pos:end="52:11">cpu</name> <operator pos:start="52:13" pos:end="52:13">=</operator> <call pos:start="52:15" pos:end="52:38"><name pos:start="52:15" pos:end="52:27">cpu_mips_init</name><argument_list pos:start="52:28" pos:end="52:38">(<argument pos:start="52:29" pos:end="52:37"><expr pos:start="52:29" pos:end="52:37"><name pos:start="52:29" pos:end="52:37">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="53:9" pos:end="56:9"><if pos:start="53:9" pos:end="56:9">if <condition pos:start="53:12" pos:end="53:24">(<expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:15">cpu</name> <operator pos:start="53:17" pos:end="53:18">==</operator> <name pos:start="53:20" pos:end="53:23">NULL</name></expr>)</condition> <block pos:start="53:26" pos:end="56:9">{<block_content pos:start="54:13" pos:end="55:20">
            <expr_stmt pos:start="54:13" pos:end="54:63"><expr pos:start="54:13" pos:end="54:62"><call pos:start="54:13" pos:end="54:62"><name pos:start="54:13" pos:end="54:19">fprintf</name><argument_list pos:start="54:20" pos:end="54:62">(<argument pos:start="54:21" pos:end="54:26"><expr pos:start="54:21" pos:end="54:26"><name pos:start="54:21" pos:end="54:26">stderr</name></expr></argument>, <argument pos:start="54:29" pos:end="54:61"><expr pos:start="54:29" pos:end="54:61"><literal type="string" pos:start="54:29" pos:end="54:61">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="55:13" pos:end="55:20"><expr pos:start="55:13" pos:end="55:19"><call pos:start="55:13" pos:end="55:19"><name pos:start="55:13" pos:end="55:16">exit</name><argument_list pos:start="55:17" pos:end="55:19">(<argument pos:start="55:18" pos:end="55:18"><expr pos:start="55:18" pos:end="55:18"><literal type="number" pos:start="55:18" pos:end="55:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:11">env</name> <operator pos:start="57:13" pos:end="57:13">=</operator> <operator pos:start="57:15" pos:end="57:15">&amp;</operator><name pos:start="57:16" pos:end="57:23"><name pos:start="57:16" pos:end="57:18">cpu</name><operator pos:start="57:19" pos:end="57:20">-&gt;</operator><name pos:start="57:21" pos:end="57:23">env</name></name></expr>;</expr_stmt>
        <comment type="block" pos:start="58:9" pos:end="58:35">/* Init internal devices */</comment>
        <expr_stmt pos:start="59:9" pos:end="59:35"><expr pos:start="59:9" pos:end="59:34"><call pos:start="59:9" pos:end="59:34"><name pos:start="59:9" pos:end="59:29">cpu_mips_irq_init_cpu</name><argument_list pos:start="59:30" pos:end="59:34">(<argument pos:start="59:31" pos:end="59:33"><expr pos:start="59:31" pos:end="59:33"><name pos:start="59:31" pos:end="59:33">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="60:9" pos:end="60:33"><expr pos:start="60:9" pos:end="60:32"><call pos:start="60:9" pos:end="60:32"><name pos:start="60:9" pos:end="60:27">cpu_mips_clock_init</name><argument_list pos:start="60:28" pos:end="60:32">(<argument pos:start="60:29" pos:end="60:31"><expr pos:start="60:29" pos:end="60:31"><name pos:start="60:29" pos:end="60:31">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="61:9" pos:end="61:49"><expr pos:start="61:9" pos:end="61:48"><call pos:start="61:9" pos:end="61:48"><name pos:start="61:9" pos:end="61:27">qemu_register_reset</name><argument_list pos:start="61:28" pos:end="61:48">(<argument pos:start="61:29" pos:end="61:42"><expr pos:start="61:29" pos:end="61:42"><name pos:start="61:29" pos:end="61:42">main_cpu_reset</name></expr></argument>, <argument pos:start="61:45" pos:end="61:47"><expr pos:start="61:45" pos:end="61:47"><name pos:start="61:45" pos:end="61:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="63:5" pos:end="63:30"><expr pos:start="63:5" pos:end="63:29"><name pos:start="63:5" pos:end="63:7">cpu</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="63:29"><name pos:start="63:11" pos:end="63:18">MIPS_CPU</name><argument_list pos:start="63:19" pos:end="63:29">(<argument pos:start="63:20" pos:end="63:28"><expr pos:start="63:20" pos:end="63:28"><name pos:start="63:20" pos:end="63:28">first_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:20"><expr pos:start="64:5" pos:end="64:19"><name pos:start="64:5" pos:end="64:7">env</name> <operator pos:start="64:9" pos:end="64:9">=</operator> <operator pos:start="64:11" pos:end="64:11">&amp;</operator><name pos:start="64:12" pos:end="64:19"><name pos:start="64:12" pos:end="64:14">cpu</name><operator pos:start="64:15" pos:end="64:16">-&gt;</operator><name pos:start="64:17" pos:end="64:19">env</name></name></expr>;</expr_stmt>
    <comment type="block" pos:start="65:5" pos:end="65:22">/* allocate RAM */</comment>
    <if_stmt pos:start="66:5" pos:end="71:5"><if pos:start="66:5" pos:end="71:5">if <condition pos:start="66:8" pos:end="66:31">(<expr pos:start="66:9" pos:end="66:30"><name pos:start="66:9" pos:end="66:16">ram_size</name> <operator pos:start="66:18" pos:end="66:18">&gt;</operator> <operator pos:start="66:20" pos:end="66:20">(</operator><literal type="number" pos:start="66:21" pos:end="66:23">256</literal> <operator pos:start="66:25" pos:end="66:26">&lt;&lt;</operator> <literal type="number" pos:start="66:28" pos:end="66:29">20</literal><operator pos:start="66:30" pos:end="66:30">)</operator></expr>)</condition> <block pos:start="66:33" pos:end="71:5">{<block_content pos:start="67:9" pos:end="70:16">
        <expr_stmt pos:start="67:9" pos:end="69:54"><expr pos:start="67:9" pos:end="69:53"><call pos:start="67:9" pos:end="69:53"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="69:53">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>,
                <argument pos:start="68:17" pos:end="68:81"><expr pos:start="68:17" pos:end="68:81"><literal type="string" pos:start="68:17" pos:end="68:81">"qemu: Too much memory for this machine: %d MB, maximum 256 MB\n"</literal></expr></argument>,
                <argument pos:start="69:17" pos:end="69:52"><expr pos:start="69:17" pos:end="69:52"><operator pos:start="69:17" pos:end="69:17">(</operator><operator pos:start="69:18" pos:end="69:18">(</operator><name pos:start="69:19" pos:end="69:26">unsigned</name> <name pos:start="69:28" pos:end="69:30">int</name><operator pos:start="69:31" pos:end="69:31">)</operator><name pos:start="69:32" pos:end="69:39">ram_size</name> <operator pos:start="69:41" pos:end="69:41">/</operator> <operator pos:start="69:43" pos:end="69:43">(</operator><literal type="number" pos:start="69:44" pos:end="69:44">1</literal> <operator pos:start="69:46" pos:end="69:47">&lt;&lt;</operator> <literal type="number" pos:start="69:49" pos:end="69:50">20</literal><operator pos:start="69:51" pos:end="69:51">)</operator><operator pos:start="69:52" pos:end="69:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="70:9" pos:end="70:16"><expr pos:start="70:9" pos:end="70:15"><call pos:start="70:9" pos:end="70:15"><name pos:start="70:9" pos:end="70:12">exit</name><argument_list pos:start="70:13" pos:end="70:15">(<argument pos:start="70:14" pos:end="70:14"><expr pos:start="70:14" pos:end="70:14"><literal type="number" pos:start="70:14" pos:end="70:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="72:5" pos:end="72:66"><expr pos:start="72:5" pos:end="72:65"><call pos:start="72:5" pos:end="72:65"><name pos:start="72:5" pos:end="72:26">memory_region_init_ram</name><argument_list pos:start="72:27" pos:end="72:65">(<argument pos:start="72:28" pos:end="72:30"><expr pos:start="72:28" pos:end="72:30"><name pos:start="72:28" pos:end="72:30">ram</name></expr></argument>, <argument pos:start="72:33" pos:end="72:36"><expr pos:start="72:33" pos:end="72:36"><name pos:start="72:33" pos:end="72:36">NULL</name></expr></argument>, <argument pos:start="72:39" pos:end="72:54"><expr pos:start="72:39" pos:end="72:54"><literal type="string" pos:start="72:39" pos:end="72:54">"mips_malta.ram"</literal></expr></argument>, <argument pos:start="72:57" pos:end="72:64"><expr pos:start="72:57" pos:end="72:64"><name pos:start="72:57" pos:end="72:64">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><call pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:31">vmstate_register_ram_global</name><argument_list pos:start="73:32" pos:end="73:36">(<argument pos:start="73:33" pos:end="73:35"><expr pos:start="73:33" pos:end="73:35"><name pos:start="73:33" pos:end="73:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="74:5" pos:end="74:55"><expr pos:start="74:5" pos:end="74:54"><call pos:start="74:5" pos:end="74:54"><name pos:start="74:5" pos:end="74:31">memory_region_add_subregion</name><argument_list pos:start="74:32" pos:end="74:54">(<argument pos:start="74:33" pos:end="74:45"><expr pos:start="74:33" pos:end="74:45"><name pos:start="74:33" pos:end="74:45">system_memory</name></expr></argument>, <argument pos:start="74:48" pos:end="74:48"><expr pos:start="74:48" pos:end="74:48"><literal type="number" pos:start="74:48" pos:end="74:48">0</literal></expr></argument>, <argument pos:start="74:51" pos:end="74:53"><expr pos:start="74:51" pos:end="74:53"><name pos:start="74:51" pos:end="74:53">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="75:5" pos:end="75:34">/* generate SPD EEPROM data */</comment>
    <expr_stmt pos:start="76:5" pos:end="76:62"><expr pos:start="76:5" pos:end="76:61"><call pos:start="76:5" pos:end="76:61"><name pos:start="76:5" pos:end="76:23">generate_eeprom_spd</name><argument_list pos:start="76:24" pos:end="76:61">(<argument pos:start="76:25" pos:end="76:50"><expr pos:start="76:25" pos:end="76:50"><operator pos:start="76:25" pos:end="76:25">&amp;</operator><name pos:start="76:26" pos:end="76:50"><name pos:start="76:26" pos:end="76:41">smbus_eeprom_buf</name><index pos:start="76:42" pos:end="76:50">[<expr pos:start="76:43" pos:end="76:49"><literal type="number" pos:start="76:43" pos:end="76:43">0</literal> <operator pos:start="76:45" pos:end="76:45">*</operator> <literal type="number" pos:start="76:47" pos:end="76:49">256</literal></expr>]</index></name></expr></argument>, <argument pos:start="76:53" pos:end="76:60"><expr pos:start="76:53" pos:end="76:60"><name pos:start="76:53" pos:end="76:60">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="77:5" pos:end="79:0"><expr pos:start="77:5" pos:end="77:54"><call pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:26">generate_eeprom_serial</name><argument_list pos:start="77:27" pos:end="77:54">(<argument pos:start="77:28" pos:end="77:53"><expr pos:start="77:28" pos:end="77:53"><operator pos:start="77:28" pos:end="77:28">&amp;</operator><name pos:start="77:29" pos:end="77:53"><name pos:start="77:29" pos:end="77:44">smbus_eeprom_buf</name><index pos:start="77:45" pos:end="77:53">[<expr pos:start="77:46" pos:end="77:52"><literal type="number" pos:start="77:46" pos:end="77:46">6</literal> <operator pos:start="77:48" pos:end="77:48">*</operator> <literal type="number" pos:start="77:50" pos:end="77:52">256</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="78:1" pos:end="78:29">#<cpp:directive pos:start="78:2" pos:end="78:6">ifdef</cpp:directive> <name pos:start="78:8" pos:end="78:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>
    <expr_stmt pos:start="79:5" pos:end="81:0"><expr pos:start="79:5" pos:end="79:10"><name pos:start="79:5" pos:end="79:6">be</name> <operator pos:start="79:8" pos:end="79:8">=</operator> <literal type="number" pos:start="79:10" pos:end="79:10">1</literal></expr>;</expr_stmt>
<cpp:else pos:start="80:1" pos:end="80:5">#<cpp:directive pos:start="80:2" pos:end="80:5">else</cpp:directive></cpp:else>
    <expr_stmt pos:start="81:5" pos:end="83:0"><expr pos:start="81:5" pos:end="81:10"><name pos:start="81:5" pos:end="81:6">be</name> <operator pos:start="81:8" pos:end="81:8">=</operator> <literal type="number" pos:start="81:10" pos:end="81:10">0</literal></expr>;</expr_stmt>
<cpp:endif pos:start="82:1" pos:end="82:6">#<cpp:directive pos:start="82:2" pos:end="82:6">endif</cpp:directive></cpp:endif>
    <comment type="block" pos:start="83:5" pos:end="83:14">/* FPGA */</comment>
    <comment type="block" pos:start="84:5" pos:end="84:76">/* The CBUS UART is attached to the MIPS CPU INT2 pin, ie interrupt 4 */</comment>
    <expr_stmt pos:start="85:5" pos:end="85:77"><expr pos:start="85:5" pos:end="85:76"><call pos:start="85:5" pos:end="85:76"><name pos:start="85:5" pos:end="85:19">malta_fpga_init</name><argument_list pos:start="85:20" pos:end="85:76">(<argument pos:start="85:21" pos:end="85:33"><expr pos:start="85:21" pos:end="85:33"><name pos:start="85:21" pos:end="85:33">system_memory</name></expr></argument>, <argument pos:start="85:36" pos:end="85:47"><expr pos:start="85:36" pos:end="85:47"><name pos:start="85:36" pos:end="85:47">FPGA_ADDRESS</name></expr></argument>, <argument pos:start="85:50" pos:end="85:60"><expr pos:start="85:50" pos:end="85:60"><name pos:start="85:50" pos:end="85:60"><name pos:start="85:50" pos:end="85:52">env</name><operator pos:start="85:53" pos:end="85:54">-&gt;</operator><name pos:start="85:55" pos:end="85:57">irq</name><index pos:start="85:58" pos:end="85:60">[<expr pos:start="85:59" pos:end="85:59"><literal type="number" pos:start="85:59" pos:end="85:59">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:63" pos:end="85:75"><expr pos:start="85:63" pos:end="85:75"><name pos:start="85:63" pos:end="85:75"><name pos:start="85:63" pos:end="85:72">serial_hds</name><index pos:start="85:73" pos:end="85:75">[<expr pos:start="85:74" pos:end="85:74"><literal type="number" pos:start="85:74" pos:end="85:74">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="86:5" pos:end="86:40">/* Load firmware in flash / BIOS. */</comment>
    <expr_stmt pos:start="87:5" pos:end="89:0"><expr pos:start="87:5" pos:end="87:43"><name pos:start="87:5" pos:end="87:9">dinfo</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:43"><name pos:start="87:13" pos:end="87:21">drive_get</name><argument_list pos:start="87:22" pos:end="87:43">(<argument pos:start="87:23" pos:end="87:31"><expr pos:start="87:23" pos:end="87:31"><name pos:start="87:23" pos:end="87:31">IF_PFLASH</name></expr></argument>, <argument pos:start="87:34" pos:end="87:34"><expr pos:start="87:34" pos:end="87:34"><literal type="number" pos:start="87:34" pos:end="87:34">0</literal></expr></argument>, <argument pos:start="87:37" pos:end="87:42"><expr pos:start="87:37" pos:end="87:42"><name pos:start="87:37" pos:end="87:42">fl_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef pos:start="88:1" pos:end="88:23">#<cpp:directive pos:start="88:2" pos:end="88:6">ifdef</cpp:directive> <name pos:start="88:8" pos:end="88:23">DEBUG_BOARD_INIT</name></cpp:ifdef>
    <if_stmt pos:start="89:5" pos:end="96:0"><if pos:start="89:5" pos:end="96:0">if <condition pos:start="89:8" pos:end="89:14">(<expr pos:start="89:9" pos:end="89:13"><name pos:start="89:9" pos:end="89:13">dinfo</name></expr>)</condition> <block pos:start="89:16" pos:end="96:0">{<block_content pos:start="90:9" pos:end="93:62">
        <expr_stmt pos:start="90:9" pos:end="93:62"><expr pos:start="90:9" pos:end="93:61"><call pos:start="90:9" pos:end="93:61"><name pos:start="90:9" pos:end="90:14">printf</name><argument_list pos:start="90:15" pos:end="93:61">(<argument pos:start="90:16" pos:end="91:38"><expr pos:start="90:16" pos:end="91:38"><literal type="string" pos:start="90:16" pos:end="90:49">"Register parallel flash %d size "</literal> <name pos:start="90:51" pos:end="90:63">TARGET_FMT_lx</name> <literal type="string" pos:start="90:65" pos:end="90:70">" at "</literal>
               <literal type="string" pos:start="91:16" pos:end="91:38">"addr %08llx '%s' %x\n"</literal></expr></argument>,
               <argument pos:start="92:16" pos:end="92:21"><expr pos:start="92:16" pos:end="92:21"><name pos:start="92:16" pos:end="92:21">fl_idx</name></expr></argument>, <argument pos:start="92:24" pos:end="92:32"><expr pos:start="92:24" pos:end="92:32"><name pos:start="92:24" pos:end="92:32">bios_size</name></expr></argument>, <argument pos:start="92:35" pos:end="92:47"><expr pos:start="92:35" pos:end="92:47"><name pos:start="92:35" pos:end="92:47">FLASH_ADDRESS</name></expr></argument>,
               <argument pos:start="93:16" pos:end="93:48"><expr pos:start="93:16" pos:end="93:48"><call pos:start="93:16" pos:end="93:48"><name pos:start="93:16" pos:end="93:35">bdrv_get_device_name</name><argument_list pos:start="93:36" pos:end="93:48">(<argument pos:start="93:37" pos:end="93:47"><expr pos:start="93:37" pos:end="93:47"><name pos:start="93:37" pos:end="93:47"><name pos:start="93:37" pos:end="93:41">dinfo</name><operator pos:start="93:42" pos:end="93:43">-&gt;</operator><name pos:start="93:44" pos:end="93:47">bdrv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="93:51" pos:end="93:60"><expr pos:start="93:51" pos:end="93:60"><name pos:start="93:51" pos:end="93:60">fl_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>
    <expr_stmt pos:start="96:5" pos:end="99:70"><expr pos:start="96:5" pos:end="99:69"><name pos:start="96:5" pos:end="96:6">fl</name> <operator pos:start="96:8" pos:end="96:8">=</operator> <call pos:start="96:10" pos:end="99:69"><name pos:start="96:10" pos:end="96:30">pflash_cfi01_register</name><argument_list pos:start="96:31" pos:end="99:69">(<argument pos:start="96:32" pos:end="96:44"><expr pos:start="96:32" pos:end="96:44"><name pos:start="96:32" pos:end="96:44">FLASH_ADDRESS</name></expr></argument>, <argument pos:start="96:47" pos:end="96:50"><expr pos:start="96:47" pos:end="96:50"><name pos:start="96:47" pos:end="96:50">NULL</name></expr></argument>, <argument pos:start="96:53" pos:end="96:69"><expr pos:start="96:53" pos:end="96:69"><literal type="string" pos:start="96:53" pos:end="96:69">"mips_malta.bios"</literal></expr></argument>,
                               <argument pos:start="97:32" pos:end="97:40"><expr pos:start="97:32" pos:end="97:40"><name pos:start="97:32" pos:end="97:40">BIOS_SIZE</name></expr></argument>, <argument pos:start="97:43" pos:end="97:68"><expr pos:start="97:43" pos:end="97:68"><ternary pos:start="97:43" pos:end="97:68"><condition pos:start="97:43" pos:end="97:49"><expr pos:start="97:43" pos:end="97:47"><name pos:start="97:43" pos:end="97:47">dinfo</name></expr> ?</condition><then pos:start="97:51" pos:end="97:61"> <expr pos:start="97:51" pos:end="97:61"><name pos:start="97:51" pos:end="97:61"><name pos:start="97:51" pos:end="97:55">dinfo</name><operator pos:start="97:56" pos:end="97:57">-&gt;</operator><name pos:start="97:58" pos:end="97:61">bdrv</name></name></expr> </then><else pos:start="97:63" pos:end="97:68">: <expr pos:start="97:65" pos:end="97:68"><name pos:start="97:65" pos:end="97:68">NULL</name></expr></else></ternary></expr></argument>,
                               <argument pos:start="98:32" pos:end="98:36"><expr pos:start="98:32" pos:end="98:36"><literal type="number" pos:start="98:32" pos:end="98:36">65536</literal></expr></argument>, <argument pos:start="98:39" pos:end="98:48"><expr pos:start="98:39" pos:end="98:48"><name pos:start="98:39" pos:end="98:48">fl_sectors</name></expr></argument>,
                               <argument pos:start="99:32" pos:end="99:32"><expr pos:start="99:32" pos:end="99:32"><literal type="number" pos:start="99:32" pos:end="99:32">4</literal></expr></argument>, <argument pos:start="99:35" pos:end="99:40"><expr pos:start="99:35" pos:end="99:40"><literal type="number" pos:start="99:35" pos:end="99:40">0x0000</literal></expr></argument>, <argument pos:start="99:43" pos:end="99:48"><expr pos:start="99:43" pos:end="99:48"><literal type="number" pos:start="99:43" pos:end="99:48">0x0000</literal></expr></argument>, <argument pos:start="99:51" pos:end="99:56"><expr pos:start="99:51" pos:end="99:56"><literal type="number" pos:start="99:51" pos:end="99:56">0x0000</literal></expr></argument>, <argument pos:start="99:59" pos:end="99:64"><expr pos:start="99:59" pos:end="99:64"><literal type="number" pos:start="99:59" pos:end="99:64">0x0000</literal></expr></argument>, <argument pos:start="99:67" pos:end="99:68"><expr pos:start="99:67" pos:end="99:68"><name pos:start="99:67" pos:end="99:68">be</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:39"><expr pos:start="100:5" pos:end="100:38"><name pos:start="100:5" pos:end="100:8">bios</name> <operator pos:start="100:10" pos:end="100:10">=</operator> <call pos:start="100:12" pos:end="100:38"><name pos:start="100:12" pos:end="100:34">pflash_cfi01_get_memory</name><argument_list pos:start="100:35" pos:end="100:38">(<argument pos:start="100:36" pos:end="100:37"><expr pos:start="100:36" pos:end="100:37"><name pos:start="100:36" pos:end="100:37">fl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="101:5" pos:end="101:13"><expr pos:start="101:5" pos:end="101:12"><name pos:start="101:5" pos:end="101:10">fl_idx</name><operator pos:start="101:11" pos:end="101:12">++</operator></expr>;</expr_stmt>
    <if_stmt pos:start="102:5" pos:end="147:5"><if pos:start="102:5" pos:end="110:5">if <condition pos:start="102:8" pos:end="102:24">(<expr pos:start="102:9" pos:end="102:23"><name pos:start="102:9" pos:end="102:23">kernel_filename</name></expr>)</condition> <block pos:start="102:26" pos:end="110:5">{<block_content pos:start="104:9" pos:end="109:77">
        <comment type="block" pos:start="103:9" pos:end="103:61">/* Write a small bootloader to the flash location. */</comment>
        <expr_stmt pos:start="104:9" pos:end="104:41"><expr pos:start="104:9" pos:end="104:40"><name pos:start="104:9" pos:end="104:29"><name pos:start="104:9" pos:end="104:20">loaderparams</name><operator pos:start="104:21" pos:end="104:21">.</operator><name pos:start="104:22" pos:end="104:29">ram_size</name></name> <operator pos:start="104:31" pos:end="104:31">=</operator> <name pos:start="104:33" pos:end="104:40">ram_size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="105:9" pos:end="105:55"><expr pos:start="105:9" pos:end="105:54"><name pos:start="105:9" pos:end="105:36"><name pos:start="105:9" pos:end="105:20">loaderparams</name><operator pos:start="105:21" pos:end="105:21">.</operator><name pos:start="105:22" pos:end="105:36">kernel_filename</name></name> <operator pos:start="105:38" pos:end="105:38">=</operator> <name pos:start="105:40" pos:end="105:54">kernel_filename</name></expr>;</expr_stmt>
        <expr_stmt pos:start="106:9" pos:end="106:53"><expr pos:start="106:9" pos:end="106:52"><name pos:start="106:9" pos:end="106:35"><name pos:start="106:9" pos:end="106:20">loaderparams</name><operator pos:start="106:21" pos:end="106:21">.</operator><name pos:start="106:22" pos:end="106:35">kernel_cmdline</name></name> <operator pos:start="106:37" pos:end="106:37">=</operator> <name pos:start="106:39" pos:end="106:52">kernel_cmdline</name></expr>;</expr_stmt>
        <expr_stmt pos:start="107:9" pos:end="107:55"><expr pos:start="107:9" pos:end="107:54"><name pos:start="107:9" pos:end="107:36"><name pos:start="107:9" pos:end="107:20">loaderparams</name><operator pos:start="107:21" pos:end="107:21">.</operator><name pos:start="107:22" pos:end="107:36">initrd_filename</name></name> <operator pos:start="107:38" pos:end="107:38">=</operator> <name pos:start="107:40" pos:end="107:54">initrd_filename</name></expr>;</expr_stmt>
        <expr_stmt pos:start="108:9" pos:end="108:37"><expr pos:start="108:9" pos:end="108:36"><name pos:start="108:9" pos:end="108:20">kernel_entry</name> <operator pos:start="108:22" pos:end="108:22">=</operator> <call pos:start="108:24" pos:end="108:36"><name pos:start="108:24" pos:end="108:34">load_kernel</name><argument_list pos:start="108:35" pos:end="108:36">()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="109:9" pos:end="109:77"><expr pos:start="109:9" pos:end="109:76"><call pos:start="109:9" pos:end="109:76"><name pos:start="109:9" pos:end="109:24">write_bootloader</name><argument_list pos:start="109:25" pos:end="109:76">(<argument pos:start="109:26" pos:end="109:28"><expr pos:start="109:26" pos:end="109:28"><name pos:start="109:26" pos:end="109:28">env</name></expr></argument>, <argument pos:start="109:31" pos:end="109:61"><expr pos:start="109:31" pos:end="109:61"><call pos:start="109:31" pos:end="109:61"><name pos:start="109:31" pos:end="109:55">memory_region_get_ram_ptr</name><argument_list pos:start="109:56" pos:end="109:61">(<argument pos:start="109:57" pos:end="109:60"><expr pos:start="109:57" pos:end="109:60"><name pos:start="109:57" pos:end="109:60">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="109:64" pos:end="109:75"><expr pos:start="109:64" pos:end="109:75"><name pos:start="109:64" pos:end="109:75">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="110:7" pos:end="147:5">else <block pos:start="110:12" pos:end="147:5">{<block_content pos:start="112:9" pos:end="147:0">
        <comment type="block" pos:start="111:9" pos:end="111:39">/* Load firmware from flash. */</comment>
        <if_stmt pos:start="112:9" pos:end="135:0"><if pos:start="112:9" pos:end="135:0">if <condition pos:start="112:12" pos:end="112:19">(<expr pos:start="112:13" pos:end="112:18"><operator pos:start="112:13" pos:end="112:13">!</operator><name pos:start="112:14" pos:end="112:18">dinfo</name></expr>)</condition> <block pos:start="112:21" pos:end="135:0">{<block_content pos:start="114:13" pos:end="130:13">
            <comment type="block" pos:start="113:13" pos:end="113:36">/* Load a BIOS image. */</comment>
            <if_stmt pos:start="114:13" pos:end="116:13"><if pos:start="114:13" pos:end="116:13">if <condition pos:start="114:16" pos:end="114:34">(<expr pos:start="114:17" pos:end="114:33"><name pos:start="114:17" pos:end="114:25">bios_name</name> <operator pos:start="114:27" pos:end="114:28">==</operator> <name pos:start="114:30" pos:end="114:33">NULL</name></expr>)</condition> <block pos:start="114:36" pos:end="116:13">{<block_content pos:start="115:17" pos:end="115:42">
                <expr_stmt pos:start="115:17" pos:end="115:42"><expr pos:start="115:17" pos:end="115:41"><name pos:start="115:17" pos:end="115:25">bios_name</name> <operator pos:start="115:27" pos:end="115:27">=</operator> <name pos:start="115:29" pos:end="115:41">BIOS_FILENAME</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="117:13" pos:end="117:70"><expr pos:start="117:13" pos:end="117:69"><name pos:start="117:13" pos:end="117:20">filename</name> <operator pos:start="117:22" pos:end="117:22">=</operator> <call pos:start="117:24" pos:end="117:69"><name pos:start="117:24" pos:end="117:37">qemu_find_file</name><argument_list pos:start="117:38" pos:end="117:69">(<argument pos:start="117:39" pos:end="117:57"><expr pos:start="117:39" pos:end="117:57"><name pos:start="117:39" pos:end="117:57">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="117:60" pos:end="117:68"><expr pos:start="117:60" pos:end="117:68"><name pos:start="117:60" pos:end="117:68">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="118:13" pos:end="124:13"><if pos:start="118:13" pos:end="122:13">if <condition pos:start="118:16" pos:end="118:25">(<expr pos:start="118:17" pos:end="118:24"><name pos:start="118:17" pos:end="118:24">filename</name></expr>)</condition> <block pos:start="118:27" pos:end="122:13">{<block_content pos:start="119:17" pos:end="121:33">
                <expr_stmt pos:start="119:17" pos:end="120:59"><expr pos:start="119:17" pos:end="120:58"><name pos:start="119:17" pos:end="119:25">bios_size</name> <operator pos:start="119:27" pos:end="119:27">=</operator> <call pos:start="119:29" pos:end="120:58"><name pos:start="119:29" pos:end="119:47">load_image_targphys</name><argument_list pos:start="119:48" pos:end="120:58">(<argument pos:start="119:49" pos:end="119:56"><expr pos:start="119:49" pos:end="119:56"><name pos:start="119:49" pos:end="119:56">filename</name></expr></argument>, <argument pos:start="119:59" pos:end="119:71"><expr pos:start="119:59" pos:end="119:71"><name pos:start="119:59" pos:end="119:71">FLASH_ADDRESS</name></expr></argument>,
                                                <argument pos:start="120:49" pos:end="120:57"><expr pos:start="120:49" pos:end="120:57"><name pos:start="120:49" pos:end="120:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="121:17" pos:end="121:33"><expr pos:start="121:17" pos:end="121:32"><call pos:start="121:17" pos:end="121:32"><name pos:start="121:17" pos:end="121:22">g_free</name><argument_list pos:start="121:23" pos:end="121:32">(<argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:31">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="122:15" pos:end="124:13">else <block pos:start="122:20" pos:end="124:13">{<block_content pos:start="123:17" pos:end="123:31">
                <expr_stmt pos:start="123:17" pos:end="123:31"><expr pos:start="123:17" pos:end="123:30"><name pos:start="123:17" pos:end="123:25">bios_size</name> <operator pos:start="123:27" pos:end="123:27">=</operator> <operator pos:start="123:29" pos:end="123:29">-</operator><literal type="number" pos:start="123:30" pos:end="123:30">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <if_stmt pos:start="125:13" pos:end="130:13"><if pos:start="125:13" pos:end="130:13">if <condition pos:start="125:16" pos:end="126:53">(<expr pos:start="125:17" pos:end="126:52"><operator pos:start="125:17" pos:end="125:17">(</operator><name pos:start="125:18" pos:end="125:45"><name pos:start="125:18" pos:end="125:26">bios_size</name> <argument_list type="generic" pos:start="125:28" pos:end="125:45">&lt; <argument pos:start="125:30" pos:end="125:43"><expr pos:start="125:30" pos:end="125:43"><literal type="number" pos:start="125:30" pos:end="125:30">0</literal> <operator pos:start="125:32" pos:end="125:33">||</operator> <name pos:start="125:35" pos:end="125:43">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="125:47" pos:end="125:55">BIOS_SIZE</name><operator pos:start="125:56" pos:end="125:56">)</operator> <operator pos:start="125:58" pos:end="125:59">&amp;&amp;</operator>
                <operator pos:start="126:17" pos:end="126:17">!</operator><name pos:start="126:18" pos:end="126:32">kernel_filename</name> <operator pos:start="126:34" pos:end="126:35">&amp;&amp;</operator> <operator pos:start="126:37" pos:end="126:37">!</operator><call pos:start="126:38" pos:end="126:52"><name pos:start="126:38" pos:end="126:50">qtest_enabled</name><argument_list pos:start="126:51" pos:end="126:52">()</argument_list></call></expr>)</condition> <block pos:start="126:55" pos:end="130:13">{<block_content pos:start="127:17" pos:end="129:24">
                <expr_stmt pos:start="127:17" pos:end="128:74"><expr pos:start="127:17" pos:end="128:73"><call pos:start="127:17" pos:end="128:73"><name pos:start="127:17" pos:end="127:28">error_report</name><argument_list pos:start="127:29" pos:end="128:73">(<argument pos:start="127:30" pos:end="128:61"><expr pos:start="127:30" pos:end="128:61"><literal type="string" pos:start="127:30" pos:end="127:69">"Could not load MIPS bios '%s', and no "</literal>
                             <literal type="string" pos:start="128:30" pos:end="128:61">"-kernel argument was specified"</literal></expr></argument>, <argument pos:start="128:64" pos:end="128:72"><expr pos:start="128:64" pos:end="128:72"><name pos:start="128:64" pos:end="128:72">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="129:17" pos:end="129:24"><expr pos:start="129:17" pos:end="129:23"><call pos:start="129:17" pos:end="129:23"><name pos:start="129:17" pos:end="129:20">exit</name><argument_list pos:start="129:21" pos:end="129:23">(<argument pos:start="129:22" pos:end="129:22"><expr pos:start="129:22" pos:end="129:22"><literal type="number" pos:start="129:22" pos:end="129:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <comment type="block" pos:start="132:9" pos:end="133:59">/* In little endian mode the 32bit words in the bios are swapped,
           a neat trick which allows bi-endian firmware. */</comment>
<cpp:ifndef pos:start="134:1" pos:end="134:30">#<cpp:directive pos:start="134:2" pos:end="134:7">ifndef</cpp:directive> <name pos:start="134:9" pos:end="134:30">TARGET_WORDS_BIGENDIAN</name></cpp:ifndef>
        <block pos:start="135:9" pos:end="147:0">{<block_content pos:start="136:13" pos:end="144:13">
            <decl_stmt pos:start="136:13" pos:end="136:58"><decl pos:start="136:13" pos:end="136:25"><type pos:start="136:13" pos:end="136:22"><name pos:start="136:13" pos:end="136:20">uint32_t</name> <modifier pos:start="136:22" pos:end="136:22">*</modifier></type><name pos:start="136:23" pos:end="136:25">end</name></decl>, <decl pos:start="136:28" pos:end="136:57"><type ref="prev" pos:start="136:13" pos:end="136:22"><modifier pos:start="136:28" pos:end="136:28">*</modifier></type><name pos:start="136:29" pos:end="136:32">addr</name> <init pos:start="136:34" pos:end="136:57">= <expr pos:start="136:36" pos:end="136:57"><call pos:start="136:36" pos:end="136:57"><name pos:start="136:36" pos:end="136:42">rom_ptr</name><argument_list pos:start="136:43" pos:end="136:57">(<argument pos:start="136:44" pos:end="136:56"><expr pos:start="136:44" pos:end="136:56"><name pos:start="136:44" pos:end="136:56">FLASH_ADDRESS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="137:13" pos:end="139:13"><if pos:start="137:13" pos:end="139:13">if <condition pos:start="137:16" pos:end="137:22">(<expr pos:start="137:17" pos:end="137:21"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:21">addr</name></expr>)</condition> <block pos:start="137:24" pos:end="139:13">{<block_content pos:start="138:17" pos:end="138:55">
                <expr_stmt pos:start="138:17" pos:end="138:55"><expr pos:start="138:17" pos:end="138:54"><name pos:start="138:17" pos:end="138:20">addr</name> <operator pos:start="138:22" pos:end="138:22">=</operator> <call pos:start="138:24" pos:end="138:54"><name pos:start="138:24" pos:end="138:48">memory_region_get_ram_ptr</name><argument_list pos:start="138:49" pos:end="138:54">(<argument pos:start="138:50" pos:end="138:53"><expr pos:start="138:50" pos:end="138:53"><name pos:start="138:50" pos:end="138:53">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="140:13" pos:end="140:58"><expr pos:start="140:13" pos:end="140:57"><name pos:start="140:13" pos:end="140:15">end</name> <operator pos:start="140:17" pos:end="140:17">=</operator> <operator pos:start="140:19" pos:end="140:19">(</operator><name pos:start="140:20" pos:end="140:23">void</name> <operator pos:start="140:25" pos:end="140:25">*</operator><operator pos:start="140:26" pos:end="140:26">)</operator><name pos:start="140:27" pos:end="140:30">addr</name> <operator pos:start="140:32" pos:end="140:32">+</operator> <call pos:start="140:34" pos:end="140:57"><name pos:start="140:34" pos:end="140:36">MIN</name><argument_list pos:start="140:37" pos:end="140:57">(<argument pos:start="140:38" pos:end="140:46"><expr pos:start="140:38" pos:end="140:46"><name pos:start="140:38" pos:end="140:46">bios_size</name></expr></argument>, <argument pos:start="140:49" pos:end="140:56"><expr pos:start="140:49" pos:end="140:56"><literal type="number" pos:start="140:49" pos:end="140:56">0x3e0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while pos:start="141:13" pos:end="144:13">while <condition pos:start="141:19" pos:end="141:30">(<expr pos:start="141:20" pos:end="141:29"><name pos:start="141:20" pos:end="141:23">addr</name> <operator pos:start="141:25" pos:end="141:25">&lt;</operator> <name pos:start="141:27" pos:end="141:29">end</name></expr>)</condition> <block pos:start="141:32" pos:end="144:13">{<block_content pos:start="142:17" pos:end="143:23">
                <expr_stmt pos:start="142:17" pos:end="142:31"><expr pos:start="142:17" pos:end="142:30"><call pos:start="142:17" pos:end="142:30"><name pos:start="142:17" pos:end="142:24">bswap32s</name><argument_list pos:start="142:25" pos:end="142:30">(<argument pos:start="142:26" pos:end="142:29"><expr pos:start="142:26" pos:end="142:29"><name pos:start="142:26" pos:end="142:29">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="143:17" pos:end="143:23"><expr pos:start="143:17" pos:end="143:22"><name pos:start="143:17" pos:end="143:20">addr</name><operator pos:start="143:21" pos:end="143:22">++</operator></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block>
<cpp:endif pos:start="146:1" pos:end="146:6">#<cpp:directive pos:start="146:2" pos:end="146:6">endif</cpp:directive></cpp:endif>
    </block_content>}</block></else></if_stmt>
    <comment type="block" pos:start="148:5" pos:end="153:7">/*
     * Map the BIOS at a 2nd physical location, as on the real board.
     * Copy it so that we can patch in the MIPS revision, which cannot be
     * handled by an overlapping region as the resulting ROM code subpage
     * regions are not executable.
     */</comment>
    <expr_stmt pos:start="154:5" pos:end="154:67"><expr pos:start="154:5" pos:end="154:66"><call pos:start="154:5" pos:end="154:66"><name pos:start="154:5" pos:end="154:26">memory_region_init_ram</name><argument_list pos:start="154:27" pos:end="154:66">(<argument pos:start="154:28" pos:end="154:36"><expr pos:start="154:28" pos:end="154:36"><name pos:start="154:28" pos:end="154:36">bios_copy</name></expr></argument>, <argument pos:start="154:39" pos:end="154:42"><expr pos:start="154:39" pos:end="154:42"><name pos:start="154:39" pos:end="154:42">NULL</name></expr></argument>, <argument pos:start="154:45" pos:end="154:54"><expr pos:start="154:45" pos:end="154:54"><literal type="string" pos:start="154:45" pos:end="154:54">"bios.1fc"</literal></expr></argument>, <argument pos:start="154:57" pos:end="154:65"><expr pos:start="154:57" pos:end="154:65"><name pos:start="154:57" pos:end="154:65">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="155:5" pos:end="159:5"><if pos:start="155:5" pos:end="159:5">if <condition pos:start="155:8" pos:end="156:44">(<expr pos:start="155:9" pos:end="156:43"><operator pos:start="155:9" pos:end="155:9">!</operator><call pos:start="155:10" pos:end="156:43"><name pos:start="155:10" pos:end="155:17">rom_copy</name><argument_list pos:start="155:18" pos:end="156:43">(<argument pos:start="155:19" pos:end="155:54"><expr pos:start="155:19" pos:end="155:54"><call pos:start="155:19" pos:end="155:54"><name pos:start="155:19" pos:end="155:43">memory_region_get_ram_ptr</name><argument_list pos:start="155:44" pos:end="155:54">(<argument pos:start="155:45" pos:end="155:53"><expr pos:start="155:45" pos:end="155:53"><name pos:start="155:45" pos:end="155:53">bios_copy</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument pos:start="156:19" pos:end="156:31"><expr pos:start="156:19" pos:end="156:31"><name pos:start="156:19" pos:end="156:31">FLASH_ADDRESS</name></expr></argument>, <argument pos:start="156:34" pos:end="156:42"><expr pos:start="156:34" pos:end="156:42"><name pos:start="156:34" pos:end="156:42">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="156:46" pos:end="159:5">{<block_content pos:start="157:9" pos:end="158:59">
        <expr_stmt pos:start="157:9" pos:end="158:59"><expr pos:start="157:9" pos:end="158:58"><call pos:start="157:9" pos:end="158:58"><name pos:start="157:9" pos:end="157:14">memcpy</name><argument_list pos:start="157:15" pos:end="158:58">(<argument pos:start="157:16" pos:end="157:51"><expr pos:start="157:16" pos:end="157:51"><call pos:start="157:16" pos:end="157:51"><name pos:start="157:16" pos:end="157:40">memory_region_get_ram_ptr</name><argument_list pos:start="157:41" pos:end="157:51">(<argument pos:start="157:42" pos:end="157:50"><expr pos:start="157:42" pos:end="157:50"><name pos:start="157:42" pos:end="157:50">bios_copy</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument pos:start="158:16" pos:end="158:46"><expr pos:start="158:16" pos:end="158:46"><call pos:start="158:16" pos:end="158:46"><name pos:start="158:16" pos:end="158:40">memory_region_get_ram_ptr</name><argument_list pos:start="158:41" pos:end="158:46">(<argument pos:start="158:42" pos:end="158:45"><expr pos:start="158:42" pos:end="158:45"><name pos:start="158:42" pos:end="158:45">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="158:49" pos:end="158:57"><expr pos:start="158:49" pos:end="158:57"><name pos:start="158:49" pos:end="158:57">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="160:5" pos:end="160:48"><expr pos:start="160:5" pos:end="160:47"><call pos:start="160:5" pos:end="160:47"><name pos:start="160:5" pos:end="160:30">memory_region_set_readonly</name><argument_list pos:start="160:31" pos:end="160:47">(<argument pos:start="160:32" pos:end="160:40"><expr pos:start="160:32" pos:end="160:40"><name pos:start="160:32" pos:end="160:40">bios_copy</name></expr></argument>, <argument pos:start="160:43" pos:end="160:46"><expr pos:start="160:43" pos:end="160:46"><name pos:start="160:43" pos:end="160:46">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="161:5" pos:end="161:73"><expr pos:start="161:5" pos:end="161:72"><call pos:start="161:5" pos:end="161:72"><name pos:start="161:5" pos:end="161:31">memory_region_add_subregion</name><argument_list pos:start="161:32" pos:end="161:72">(<argument pos:start="161:33" pos:end="161:45"><expr pos:start="161:33" pos:end="161:45"><name pos:start="161:33" pos:end="161:45">system_memory</name></expr></argument>, <argument pos:start="161:48" pos:end="161:60"><expr pos:start="161:48" pos:end="161:60"><name pos:start="161:48" pos:end="161:60">RESET_ADDRESS</name></expr></argument>, <argument pos:start="161:63" pos:end="161:71"><expr pos:start="161:63" pos:end="161:71"><name pos:start="161:63" pos:end="161:71">bios_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="162:5" pos:end="162:52">/* Board ID = 0x420 (Malta Board with CoreLV) */</comment>
    <expr_stmt pos:start="163:5" pos:end="163:67"><expr pos:start="163:5" pos:end="163:66"><call pos:start="163:5" pos:end="163:66"><name pos:start="163:5" pos:end="163:9">stl_p</name><argument_list pos:start="163:10" pos:end="163:66">(<argument pos:start="163:11" pos:end="163:53"><expr pos:start="163:11" pos:end="163:53"><call pos:start="163:11" pos:end="163:46"><name pos:start="163:11" pos:end="163:35">memory_region_get_ram_ptr</name><argument_list pos:start="163:36" pos:end="163:46">(<argument pos:start="163:37" pos:end="163:45"><expr pos:start="163:37" pos:end="163:45"><name pos:start="163:37" pos:end="163:45">bios_copy</name></expr></argument>)</argument_list></call> <operator pos:start="163:48" pos:end="163:48">+</operator> <literal type="number" pos:start="163:50" pos:end="163:53">0x10</literal></expr></argument>, <argument pos:start="163:56" pos:end="163:65"><expr pos:start="163:56" pos:end="163:65"><literal type="number" pos:start="163:56" pos:end="163:65">0x00000420</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="164:5" pos:end="164:31">/* Init internal devices */</comment>
    <expr_stmt pos:start="165:5" pos:end="165:31"><expr pos:start="165:5" pos:end="165:30"><call pos:start="165:5" pos:end="165:30"><name pos:start="165:5" pos:end="165:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="165:26" pos:end="165:30">(<argument pos:start="165:27" pos:end="165:29"><expr pos:start="165:27" pos:end="165:29"><name pos:start="165:27" pos:end="165:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="166:5" pos:end="166:29"><expr pos:start="166:5" pos:end="166:28"><call pos:start="166:5" pos:end="166:28"><name pos:start="166:5" pos:end="166:23">cpu_mips_clock_init</name><argument_list pos:start="166:24" pos:end="166:28">(<argument pos:start="166:25" pos:end="166:27"><expr pos:start="166:25" pos:end="166:27"><name pos:start="166:25" pos:end="166:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="167:5" pos:end="173:7">/*
     * We have a circular dependency problem: pci_bus depends on isa_irq,
     * isa_irq is provided by i8259, i8259 depends on ISA, ISA depends
     * on piix4, and piix4 depends on pci_bus.  To stop the cycle we have
     * qemu_irq_proxy() adds an extra bit of indirection, allowing us
     * to resolve the isa_irq -&gt; i8259 dependency after i8259 is initialized.
     */</comment>
    <expr_stmt pos:start="174:5" pos:end="174:44"><expr pos:start="174:5" pos:end="174:43"><name pos:start="174:5" pos:end="174:11">isa_irq</name> <operator pos:start="174:13" pos:end="174:13">=</operator> <call pos:start="174:15" pos:end="174:43"><name pos:start="174:15" pos:end="174:28">qemu_irq_proxy</name><argument_list pos:start="174:29" pos:end="174:43">(<argument pos:start="174:30" pos:end="174:38"><expr pos:start="174:30" pos:end="174:38"><operator pos:start="174:30" pos:end="174:30">&amp;</operator><name pos:start="174:31" pos:end="174:38"><name pos:start="174:31" pos:end="174:31">s</name><operator pos:start="174:32" pos:end="174:33">-&gt;</operator><name pos:start="174:34" pos:end="174:38">i8259</name></name></expr></argument>, <argument pos:start="174:41" pos:end="174:42"><expr pos:start="174:41" pos:end="174:42"><literal type="number" pos:start="174:41" pos:end="174:42">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="175:5" pos:end="175:21">/* Northbridge */</comment>
    <expr_stmt pos:start="176:5" pos:end="176:40"><expr pos:start="176:5" pos:end="176:39"><name pos:start="176:5" pos:end="176:11">pci_bus</name> <operator pos:start="176:13" pos:end="176:13">=</operator> <call pos:start="176:15" pos:end="176:39"><name pos:start="176:15" pos:end="176:30">gt64120_register</name><argument_list pos:start="176:31" pos:end="176:39">(<argument pos:start="176:32" pos:end="176:38"><expr pos:start="176:32" pos:end="176:38"><name pos:start="176:32" pos:end="176:38">isa_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="177:5" pos:end="177:21">/* Southbridge */</comment>
    <expr_stmt pos:start="178:5" pos:end="178:35"><expr pos:start="178:5" pos:end="178:34"><call pos:start="178:5" pos:end="178:34"><name pos:start="178:5" pos:end="178:17">ide_drive_get</name><argument_list pos:start="178:18" pos:end="178:34">(<argument pos:start="178:19" pos:end="178:20"><expr pos:start="178:19" pos:end="178:20"><name pos:start="178:19" pos:end="178:20">hd</name></expr></argument>, <argument pos:start="178:23" pos:end="178:33"><expr pos:start="178:23" pos:end="178:33"><name pos:start="178:23" pos:end="178:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="179:5" pos:end="179:52"><expr pos:start="179:5" pos:end="179:51"><name pos:start="179:5" pos:end="179:15">piix4_devfn</name> <operator pos:start="179:17" pos:end="179:17">=</operator> <call pos:start="179:19" pos:end="179:51"><name pos:start="179:19" pos:end="179:28">piix4_init</name><argument_list pos:start="179:29" pos:end="179:51">(<argument pos:start="179:30" pos:end="179:36"><expr pos:start="179:30" pos:end="179:36"><name pos:start="179:30" pos:end="179:36">pci_bus</name></expr></argument>, <argument pos:start="179:39" pos:end="179:46"><expr pos:start="179:39" pos:end="179:46"><operator pos:start="179:39" pos:end="179:39">&amp;</operator><name pos:start="179:40" pos:end="179:46">isa_bus</name></expr></argument>, <argument pos:start="179:49" pos:end="179:50"><expr pos:start="179:49" pos:end="179:50"><literal type="number" pos:start="179:49" pos:end="179:50">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="180:5" pos:end="180:30">/* Interrupt controller */</comment>
    <comment type="block" pos:start="181:5" pos:end="181:71">/* The 8259 is attached to the MIPS CPU INT0 pin, ie interrupt 2 */</comment>
    <expr_stmt pos:start="182:5" pos:end="182:48"><expr pos:start="182:5" pos:end="182:47"><name pos:start="182:5" pos:end="182:12"><name pos:start="182:5" pos:end="182:5">s</name><operator pos:start="182:6" pos:end="182:7">-&gt;</operator><name pos:start="182:8" pos:end="182:12">i8259</name></name> <operator pos:start="182:14" pos:end="182:14">=</operator> <call pos:start="182:16" pos:end="182:47"><name pos:start="182:16" pos:end="182:25">i8259_init</name><argument_list pos:start="182:26" pos:end="182:47">(<argument pos:start="182:27" pos:end="182:33"><expr pos:start="182:27" pos:end="182:33"><name pos:start="182:27" pos:end="182:33">isa_bus</name></expr></argument>, <argument pos:start="182:36" pos:end="182:46"><expr pos:start="182:36" pos:end="182:46"><name pos:start="182:36" pos:end="182:46"><name pos:start="182:36" pos:end="182:38">env</name><operator pos:start="182:39" pos:end="182:40">-&gt;</operator><name pos:start="182:41" pos:end="182:43">irq</name><index pos:start="182:44" pos:end="182:46">[<expr pos:start="182:45" pos:end="182:45"><literal type="number" pos:start="182:45" pos:end="182:45">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="183:5" pos:end="183:36"><expr pos:start="183:5" pos:end="183:35"><call pos:start="183:5" pos:end="183:35"><name pos:start="183:5" pos:end="183:16">isa_bus_irqs</name><argument_list pos:start="183:17" pos:end="183:35">(<argument pos:start="183:18" pos:end="183:24"><expr pos:start="183:18" pos:end="183:24"><name pos:start="183:18" pos:end="183:24">isa_bus</name></expr></argument>, <argument pos:start="183:27" pos:end="183:34"><expr pos:start="183:27" pos:end="183:34"><name pos:start="183:27" pos:end="183:34"><name pos:start="183:27" pos:end="183:27">s</name><operator pos:start="183:28" pos:end="183:29">-&gt;</operator><name pos:start="183:30" pos:end="183:34">i8259</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="184:5" pos:end="184:53"><expr pos:start="184:5" pos:end="184:52"><call pos:start="184:5" pos:end="184:52"><name pos:start="184:5" pos:end="184:22">pci_piix4_ide_init</name><argument_list pos:start="184:23" pos:end="184:52">(<argument pos:start="184:24" pos:end="184:30"><expr pos:start="184:24" pos:end="184:30"><name pos:start="184:24" pos:end="184:30">pci_bus</name></expr></argument>, <argument pos:start="184:33" pos:end="184:34"><expr pos:start="184:33" pos:end="184:34"><name pos:start="184:33" pos:end="184:34">hd</name></expr></argument>, <argument pos:start="184:37" pos:end="184:51"><expr pos:start="184:37" pos:end="184:51"><name pos:start="184:37" pos:end="184:47">piix4_devfn</name> <operator pos:start="184:49" pos:end="184:49">+</operator> <literal type="number" pos:start="184:51" pos:end="184:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="185:5" pos:end="185:66"><expr pos:start="185:5" pos:end="185:65"><call pos:start="185:5" pos:end="185:65"><name pos:start="185:5" pos:end="185:21">pci_create_simple</name><argument_list pos:start="185:22" pos:end="185:65">(<argument pos:start="185:23" pos:end="185:29"><expr pos:start="185:23" pos:end="185:29"><name pos:start="185:23" pos:end="185:29">pci_bus</name></expr></argument>, <argument pos:start="185:32" pos:end="185:46"><expr pos:start="185:32" pos:end="185:46"><name pos:start="185:32" pos:end="185:42">piix4_devfn</name> <operator pos:start="185:44" pos:end="185:44">+</operator> <literal type="number" pos:start="185:46" pos:end="185:46">2</literal></expr></argument>, <argument pos:start="185:49" pos:end="185:64"><expr pos:start="185:49" pos:end="185:64"><literal type="string" pos:start="185:49" pos:end="185:64">"piix4-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="186:5" pos:end="187:63"><expr pos:start="186:5" pos:end="187:62"><name pos:start="186:5" pos:end="186:9">smbus</name> <operator pos:start="186:11" pos:end="186:11">=</operator> <call pos:start="186:13" pos:end="187:62"><name pos:start="186:13" pos:end="186:25">piix4_pm_init</name><argument_list pos:start="186:26" pos:end="187:62">(<argument pos:start="186:27" pos:end="186:33"><expr pos:start="186:27" pos:end="186:33"><name pos:start="186:27" pos:end="186:33">pci_bus</name></expr></argument>, <argument pos:start="186:36" pos:end="186:50"><expr pos:start="186:36" pos:end="186:50"><name pos:start="186:36" pos:end="186:46">piix4_devfn</name> <operator pos:start="186:48" pos:end="186:48">+</operator> <literal type="number" pos:start="186:50" pos:end="186:50">3</literal></expr></argument>, <argument pos:start="186:53" pos:end="186:58"><expr pos:start="186:53" pos:end="186:58"><literal type="number" pos:start="186:53" pos:end="186:58">0x1100</literal></expr></argument>,
                          <argument pos:start="187:27" pos:end="187:46"><expr pos:start="187:27" pos:end="187:46"><call pos:start="187:27" pos:end="187:46"><name pos:start="187:27" pos:end="187:37">isa_get_irq</name><argument_list pos:start="187:38" pos:end="187:46">(<argument pos:start="187:39" pos:end="187:42"><expr pos:start="187:39" pos:end="187:42"><name pos:start="187:39" pos:end="187:42">NULL</name></expr></argument>, <argument pos:start="187:45" pos:end="187:45"><expr pos:start="187:45" pos:end="187:45"><literal type="number" pos:start="187:45" pos:end="187:45">9</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="187:49" pos:end="187:52"><expr pos:start="187:49" pos:end="187:52"><name pos:start="187:49" pos:end="187:52">NULL</name></expr></argument>, <argument pos:start="187:55" pos:end="187:55"><expr pos:start="187:55" pos:end="187:55"><literal type="number" pos:start="187:55" pos:end="187:55">0</literal></expr></argument>, <argument pos:start="187:58" pos:end="187:61"><expr pos:start="187:58" pos:end="187:61"><name pos:start="187:58" pos:end="187:61">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="188:5" pos:end="188:69"><expr pos:start="188:5" pos:end="188:68"><call pos:start="188:5" pos:end="188:68"><name pos:start="188:5" pos:end="188:21">smbus_eeprom_init</name><argument_list pos:start="188:22" pos:end="188:68">(<argument pos:start="188:23" pos:end="188:27"><expr pos:start="188:23" pos:end="188:27"><name pos:start="188:23" pos:end="188:27">smbus</name></expr></argument>, <argument pos:start="188:30" pos:end="188:30"><expr pos:start="188:30" pos:end="188:30"><literal type="number" pos:start="188:30" pos:end="188:30">8</literal></expr></argument>, <argument pos:start="188:33" pos:end="188:48"><expr pos:start="188:33" pos:end="188:48"><name pos:start="188:33" pos:end="188:48">smbus_eeprom_buf</name></expr></argument>, <argument pos:start="188:51" pos:end="188:67"><expr pos:start="188:51" pos:end="188:67"><name pos:start="188:51" pos:end="188:67">smbus_eeprom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="189:5" pos:end="189:29"><expr pos:start="189:5" pos:end="189:28"><call pos:start="189:5" pos:end="189:28"><name pos:start="189:5" pos:end="189:10">g_free</name><argument_list pos:start="189:11" pos:end="189:28">(<argument pos:start="189:12" pos:end="189:27"><expr pos:start="189:12" pos:end="189:27"><name pos:start="189:12" pos:end="189:27">smbus_eeprom_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="190:5" pos:end="190:43"><expr pos:start="190:5" pos:end="190:42"><name pos:start="190:5" pos:end="190:7">pit</name> <operator pos:start="190:9" pos:end="190:9">=</operator> <call pos:start="190:11" pos:end="190:42"><name pos:start="190:11" pos:end="190:18">pit_init</name><argument_list pos:start="190:19" pos:end="190:42">(<argument pos:start="190:20" pos:end="190:26"><expr pos:start="190:20" pos:end="190:26"><name pos:start="190:20" pos:end="190:26">isa_bus</name></expr></argument>, <argument pos:start="190:29" pos:end="190:32"><expr pos:start="190:29" pos:end="190:32"><literal type="number" pos:start="190:29" pos:end="190:32">0x40</literal></expr></argument>, <argument pos:start="190:35" pos:end="190:35"><expr pos:start="190:35" pos:end="190:35"><literal type="number" pos:start="190:35" pos:end="190:35">0</literal></expr></argument>, <argument pos:start="190:38" pos:end="190:41"><expr pos:start="190:38" pos:end="190:41"><name pos:start="190:38" pos:end="190:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="191:5" pos:end="191:65"><expr pos:start="191:5" pos:end="191:64"><name pos:start="191:5" pos:end="191:16">cpu_exit_irq</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <call pos:start="191:20" pos:end="191:64"><name pos:start="191:20" pos:end="191:37">qemu_allocate_irqs</name><argument_list pos:start="191:38" pos:end="191:64">(<argument pos:start="191:39" pos:end="191:54"><expr pos:start="191:39" pos:end="191:54"><name pos:start="191:39" pos:end="191:54">cpu_request_exit</name></expr></argument>, <argument pos:start="191:57" pos:end="191:60"><expr pos:start="191:57" pos:end="191:60"><name pos:start="191:57" pos:end="191:60">NULL</name></expr></argument>, <argument pos:start="191:63" pos:end="191:63"><expr pos:start="191:63" pos:end="191:63"><literal type="number" pos:start="191:63" pos:end="191:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="192:5" pos:end="192:30"><expr pos:start="192:5" pos:end="192:29"><call pos:start="192:5" pos:end="192:29"><name pos:start="192:5" pos:end="192:12">DMA_init</name><argument_list pos:start="192:13" pos:end="192:29">(<argument pos:start="192:14" pos:end="192:14"><expr pos:start="192:14" pos:end="192:14"><literal type="number" pos:start="192:14" pos:end="192:14">0</literal></expr></argument>, <argument pos:start="192:17" pos:end="192:28"><expr pos:start="192:17" pos:end="192:28"><name pos:start="192:17" pos:end="192:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="193:5" pos:end="193:19">/* Super I/O */</comment>
    <expr_stmt pos:start="194:5" pos:end="194:40"><expr pos:start="194:5" pos:end="194:39"><call pos:start="194:5" pos:end="194:39"><name pos:start="194:5" pos:end="194:21">isa_create_simple</name><argument_list pos:start="194:22" pos:end="194:39">(<argument pos:start="194:23" pos:end="194:29"><expr pos:start="194:23" pos:end="194:29"><name pos:start="194:23" pos:end="194:29">isa_bus</name></expr></argument>, <argument pos:start="194:32" pos:end="194:38"><expr pos:start="194:32" pos:end="194:38"><literal type="string" pos:start="194:32" pos:end="194:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="195:5" pos:end="195:34"><expr pos:start="195:5" pos:end="195:33"><call pos:start="195:5" pos:end="195:33"><name pos:start="195:5" pos:end="195:12">rtc_init</name><argument_list pos:start="195:13" pos:end="195:33">(<argument pos:start="195:14" pos:end="195:20"><expr pos:start="195:14" pos:end="195:20"><name pos:start="195:14" pos:end="195:20">isa_bus</name></expr></argument>, <argument pos:start="195:23" pos:end="195:26"><expr pos:start="195:23" pos:end="195:26"><literal type="number" pos:start="195:23" pos:end="195:26">2000</literal></expr></argument>, <argument pos:start="195:29" pos:end="195:32"><expr pos:start="195:29" pos:end="195:32"><name pos:start="195:29" pos:end="195:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="196:5" pos:end="196:47"><expr pos:start="196:5" pos:end="196:46"><call pos:start="196:5" pos:end="196:46"><name pos:start="196:5" pos:end="196:19">serial_isa_init</name><argument_list pos:start="196:20" pos:end="196:46">(<argument pos:start="196:21" pos:end="196:27"><expr pos:start="196:21" pos:end="196:27"><name pos:start="196:21" pos:end="196:27">isa_bus</name></expr></argument>, <argument pos:start="196:30" pos:end="196:30"><expr pos:start="196:30" pos:end="196:30"><literal type="number" pos:start="196:30" pos:end="196:30">0</literal></expr></argument>, <argument pos:start="196:33" pos:end="196:45"><expr pos:start="196:33" pos:end="196:45"><name pos:start="196:33" pos:end="196:45"><name pos:start="196:33" pos:end="196:42">serial_hds</name><index pos:start="196:43" pos:end="196:45">[<expr pos:start="196:44" pos:end="196:44"><literal type="number" pos:start="196:44" pos:end="196:44">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="197:5" pos:end="197:47"><expr pos:start="197:5" pos:end="197:46"><call pos:start="197:5" pos:end="197:46"><name pos:start="197:5" pos:end="197:19">serial_isa_init</name><argument_list pos:start="197:20" pos:end="197:46">(<argument pos:start="197:21" pos:end="197:27"><expr pos:start="197:21" pos:end="197:27"><name pos:start="197:21" pos:end="197:27">isa_bus</name></expr></argument>, <argument pos:start="197:30" pos:end="197:30"><expr pos:start="197:30" pos:end="197:30"><literal type="number" pos:start="197:30" pos:end="197:30">1</literal></expr></argument>, <argument pos:start="197:33" pos:end="197:45"><expr pos:start="197:33" pos:end="197:45"><name pos:start="197:33" pos:end="197:45"><name pos:start="197:33" pos:end="197:42">serial_hds</name><index pos:start="197:43" pos:end="197:45">[<expr pos:start="197:44" pos:end="197:44"><literal type="number" pos:start="197:44" pos:end="197:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="198:5" pos:end="199:51"><if pos:start="198:5" pos:end="199:51">if <condition pos:start="198:8" pos:end="198:24">(<expr pos:start="198:9" pos:end="198:23"><name pos:start="198:9" pos:end="198:23"><name pos:start="198:9" pos:end="198:20">parallel_hds</name><index pos:start="198:21" pos:end="198:23">[<expr pos:start="198:22" pos:end="198:22"><literal type="number" pos:start="198:22" pos:end="198:22">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="199:9" pos:end="199:51"><block_content pos:start="199:9" pos:end="199:51">
        <expr_stmt pos:start="199:9" pos:end="199:51"><expr pos:start="199:9" pos:end="199:50"><call pos:start="199:9" pos:end="199:50"><name pos:start="199:9" pos:end="199:21">parallel_init</name><argument_list pos:start="199:22" pos:end="199:50">(<argument pos:start="199:23" pos:end="199:29"><expr pos:start="199:23" pos:end="199:29"><name pos:start="199:23" pos:end="199:29">isa_bus</name></expr></argument>, <argument pos:start="199:32" pos:end="199:32"><expr pos:start="199:32" pos:end="199:32"><literal type="number" pos:start="199:32" pos:end="199:32">0</literal></expr></argument>, <argument pos:start="199:35" pos:end="199:49"><expr pos:start="199:35" pos:end="199:49"><name pos:start="199:35" pos:end="199:49"><name pos:start="199:35" pos:end="199:46">parallel_hds</name><index pos:start="199:47" pos:end="199:49">[<expr pos:start="199:48" pos:end="199:48"><literal type="number" pos:start="199:48" pos:end="199:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="200:5" pos:end="202:5">for<control pos:start="200:8" pos:end="200:31">(<init pos:start="200:9" pos:end="200:14"><expr pos:start="200:9" pos:end="200:13"><name pos:start="200:9" pos:end="200:9">i</name> <operator pos:start="200:11" pos:end="200:11">=</operator> <literal type="number" pos:start="200:13" pos:end="200:13">0</literal></expr>;</init> <condition pos:start="200:16" pos:end="200:26"><expr pos:start="200:16" pos:end="200:25"><name pos:start="200:16" pos:end="200:16">i</name> <operator pos:start="200:18" pos:end="200:18">&lt;</operator> <name pos:start="200:20" pos:end="200:25">MAX_FD</name></expr>;</condition> <incr pos:start="200:28" pos:end="200:30"><expr pos:start="200:28" pos:end="200:30"><name pos:start="200:28" pos:end="200:28">i</name><operator pos:start="200:29" pos:end="200:30">++</operator></expr></incr>)</control> <block pos:start="200:33" pos:end="202:5">{<block_content pos:start="201:9" pos:end="201:43">
        <expr_stmt pos:start="201:9" pos:end="201:43"><expr pos:start="201:9" pos:end="201:42"><name pos:start="201:9" pos:end="201:13"><name pos:start="201:9" pos:end="201:10">fd</name><index pos:start="201:11" pos:end="201:13">[<expr pos:start="201:12" pos:end="201:12"><name pos:start="201:12" pos:end="201:12">i</name></expr>]</index></name> <operator pos:start="201:15" pos:end="201:15">=</operator> <call pos:start="201:17" pos:end="201:42"><name pos:start="201:17" pos:end="201:25">drive_get</name><argument_list pos:start="201:26" pos:end="201:42">(<argument pos:start="201:27" pos:end="201:35"><expr pos:start="201:27" pos:end="201:35"><name pos:start="201:27" pos:end="201:35">IF_FLOPPY</name></expr></argument>, <argument pos:start="201:38" pos:end="201:38"><expr pos:start="201:38" pos:end="201:38"><literal type="number" pos:start="201:38" pos:end="201:38">0</literal></expr></argument>, <argument pos:start="201:41" pos:end="201:41"><expr pos:start="201:41" pos:end="201:41"><name pos:start="201:41" pos:end="201:41">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt pos:start="203:5" pos:end="203:33"><expr pos:start="203:5" pos:end="203:32"><call pos:start="203:5" pos:end="203:32"><name pos:start="203:5" pos:end="203:19">fdctrl_init_isa</name><argument_list pos:start="203:20" pos:end="203:32">(<argument pos:start="203:21" pos:end="203:27"><expr pos:start="203:21" pos:end="203:27"><name pos:start="203:21" pos:end="203:27">isa_bus</name></expr></argument>, <argument pos:start="203:30" pos:end="203:31"><expr pos:start="203:30" pos:end="203:31"><name pos:start="203:30" pos:end="203:31">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="204:5" pos:end="204:22">/* Network card */</comment>
    <expr_stmt pos:start="205:5" pos:end="205:26"><expr pos:start="205:5" pos:end="205:25"><call pos:start="205:5" pos:end="205:25"><name pos:start="205:5" pos:end="205:16">network_init</name><argument_list pos:start="205:17" pos:end="205:25">(<argument pos:start="205:18" pos:end="205:24"><expr pos:start="205:18" pos:end="205:24"><name pos:start="205:18" pos:end="205:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="206:5" pos:end="206:33">/* Optional PCI video card */</comment>
    <expr_stmt pos:start="207:5" pos:end="207:26"><expr pos:start="207:5" pos:end="207:25"><call pos:start="207:5" pos:end="207:25"><name pos:start="207:5" pos:end="207:16">pci_vga_init</name><argument_list pos:start="207:17" pos:end="207:25">(<argument pos:start="207:18" pos:end="207:24"><expr pos:start="207:18" pos:end="207:24"><name pos:start="207:18" pos:end="207:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
