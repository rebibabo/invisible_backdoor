<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/24909.c" pos:tabs="8"><function pos:start="1:1" pos:end="115:1"><type pos:start="1:1" pos:end="1:25"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name> <name pos:start="1:20" pos:end="1:25">RENAME</name></type>(<name pos:start="1:27" pos:end="1:38">rgb32tobgr16</name>)<parameter_list pos:start="1:40" pos:end="1:88">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">src</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:67">uint8_t</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">dst</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:87"><decl pos:start="1:75" pos:end="1:87"><type pos:start="1:75" pos:end="1:87"><name pos:start="1:75" pos:end="1:78">long</name></type> <name pos:start="1:80" pos:end="1:87">src_size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="115:1">{<block_content pos:start="5:5" pos:end="113:5">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:20">s</name> <init pos:start="5:22" pos:end="5:26">= <expr pos:start="5:24" pos:end="5:26"><name pos:start="5:24" pos:end="5:26">src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="10:0"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">end</name></decl>;</decl_stmt>

<cpp:if pos:start="9:1" pos:end="9:24">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:19"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:17">uint8_t</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:25">mm_end</name></decl>;</decl_stmt>

<cpp:endif pos:start="13:1" pos:end="13:6">#<cpp:directive pos:start="13:2" pos:end="13:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:33"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">uint16_t</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:15">d</name> <init pos:start="15:17" pos:end="15:33">= <expr pos:start="15:19" pos:end="15:33"><operator pos:start="15:19" pos:end="15:19">(</operator><name pos:start="15:20" pos:end="15:27">uint16_t</name> <operator pos:start="15:29" pos:end="15:29">*</operator><operator pos:start="15:30" pos:end="15:30">)</operator><name pos:start="15:31" pos:end="15:33">dst</name></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="17:5" pos:end="20:0"><expr pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:7">end</name> <operator pos:start="17:9" pos:end="17:9">=</operator> <name pos:start="17:11" pos:end="17:11">s</name> <operator pos:start="17:13" pos:end="17:13">+</operator> <name pos:start="17:15" pos:end="17:22">src_size</name></expr>;</expr_stmt>

<cpp:if pos:start="19:1" pos:end="19:24">#<cpp:directive pos:start="19:2" pos:end="19:3">if</cpp:directive> <expr pos:start="19:5" pos:end="19:24"><name pos:start="19:5" pos:end="19:24">COMPILE_TEMPLATE_MMX</name></expr></cpp:if>

    <asm pos:start="21:5" pos:end="21:59">__asm__ <specifier pos:start="21:13" pos:end="21:20">volatile</specifier>(PREFETCH"    %0"::"m"(*src):"memory");</asm>

    <asm pos:start="23:5" pos:end="29:45">__asm__ <specifier pos:start="23:13" pos:end="23:20">volatile</specifier>(

        "movq          %0, %%mm7    \n\t"

        "movq          %1, %%mm6    \n\t"

        ::"m"(red_16mask),"m"(green_16mask));</asm>

    <expr_stmt pos:start="31:5" pos:end="31:22"><expr pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:10">mm_end</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <name pos:start="31:14" pos:end="31:16">end</name> <operator pos:start="31:18" pos:end="31:18">-</operator> <literal type="number" pos:start="31:20" pos:end="31:21">15</literal></expr>;</expr_stmt>

    <while pos:start="33:5" pos:end="99:5">while <condition pos:start="33:11" pos:end="33:22">(<expr pos:start="33:12" pos:end="33:21"><name pos:start="33:12" pos:end="33:12">s</name> <operator pos:start="33:14" pos:end="33:14">&lt;</operator> <name pos:start="33:16" pos:end="33:21">mm_end</name></expr>)</condition> <block pos:start="33:24" pos:end="99:5">{<block_content pos:start="35:9" pos:end="97:16">

        <asm pos:start="35:9" pos:end="93:57">__asm__ <specifier pos:start="35:17" pos:end="35:24">volatile</specifier>(

            PREFETCH"    32%1           \n\t"

            "movd          %1, %%mm0    \n\t"

            "movd         4%1, %%mm3    \n\t"

            "punpckldq    8%1, %%mm0    \n\t"

            "punpckldq   12%1, %%mm3    \n\t"

            "movq       %%mm0, %%mm1    \n\t"

            "movq       %%mm0, %%mm2    \n\t"

            "movq       %%mm3, %%mm4    \n\t"

            "movq       %%mm3, %%mm5    \n\t"

            "psllq         $8, %%mm0    \n\t"

            "psllq         $8, %%mm3    \n\t"

            "pand       %%mm7, %%mm0    \n\t"

            "pand       %%mm7, %%mm3    \n\t"

            "psrlq         $5, %%mm1    \n\t"

            "psrlq         $5, %%mm4    \n\t"

            "pand       %%mm6, %%mm1    \n\t"

            "pand       %%mm6, %%mm4    \n\t"

            "psrlq        $19, %%mm2    \n\t"

            "psrlq        $19, %%mm5    \n\t"

            "pand          %2, %%mm2    \n\t"

            "pand          %2, %%mm5    \n\t"

            "por        %%mm1, %%mm0    \n\t"

            "por        %%mm4, %%mm3    \n\t"

            "por        %%mm2, %%mm0    \n\t"

            "por        %%mm5, %%mm3    \n\t"

            "psllq        $16, %%mm3    \n\t"

            "por        %%mm3, %%mm0    \n\t"

            MOVNTQ"     %%mm0, %0       \n\t"

            :"=m"(*d):"m"(*s),"m"(blue_16mask):"memory");</asm>

        <expr_stmt pos:start="95:9" pos:end="95:15"><expr pos:start="95:9" pos:end="95:14"><name pos:start="95:9" pos:end="95:9">d</name> <operator pos:start="95:11" pos:end="95:12">+=</operator> <literal type="number" pos:start="95:14" pos:end="95:14">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:9">s</name> <operator pos:start="97:11" pos:end="97:12">+=</operator> <literal type="number" pos:start="97:14" pos:end="97:15">16</literal></expr>;</expr_stmt>

    </block_content>}</block></while>

    <asm pos:start="101:5" pos:end="101:40">__asm__ <specifier pos:start="101:13" pos:end="101:20">volatile</specifier>(SFENCE:::"memory");</asm>

    <asm pos:start="103:5" pos:end="106:0">__asm__ <specifier pos:start="103:13" pos:end="103:20">volatile</specifier>(EMMS:::"memory");</asm>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

    <while pos:start="107:5" pos:end="113:5">while <condition pos:start="107:11" pos:end="107:19">(<expr pos:start="107:12" pos:end="107:18"><name pos:start="107:12" pos:end="107:12">s</name> <operator pos:start="107:14" pos:end="107:14">&lt;</operator> <name pos:start="107:16" pos:end="107:18">end</name></expr>)</condition> <block pos:start="107:21" pos:end="113:5">{<block_content pos:start="109:9" pos:end="111:74">

        <decl_stmt pos:start="109:9" pos:end="109:47"><decl pos:start="109:9" pos:end="109:46"><type pos:start="109:9" pos:end="109:20"><specifier pos:start="109:9" pos:end="109:16">register</specifier> <name pos:start="109:18" pos:end="109:20">int</name></type> <name pos:start="109:22" pos:end="109:24">rgb</name> <init pos:start="109:26" pos:end="109:46">= <expr pos:start="109:28" pos:end="109:46"><operator pos:start="109:28" pos:end="109:28">*</operator><operator pos:start="109:29" pos:end="109:29">(</operator><specifier pos:start="109:30" pos:end="109:34">const</specifier> <name pos:start="109:36" pos:end="109:43">uint32_t</name><operator pos:start="109:44" pos:end="109:44">*</operator><operator pos:start="109:45" pos:end="109:45">)</operator><name pos:start="109:46" pos:end="109:46">s</name></expr></init></decl>;</decl_stmt> <expr_stmt pos:start="109:49" pos:end="109:55"><expr pos:start="109:49" pos:end="109:54"><name pos:start="109:49" pos:end="109:49">s</name> <operator pos:start="109:51" pos:end="109:52">+=</operator> <literal type="number" pos:start="109:54" pos:end="109:54">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:74"><expr pos:start="111:9" pos:end="111:73"><operator pos:start="111:9" pos:end="111:9">*</operator><name pos:start="111:10" pos:end="111:10">d</name><operator pos:start="111:11" pos:end="111:12">++</operator> <operator pos:start="111:14" pos:end="111:14">=</operator> <operator pos:start="111:16" pos:end="111:16">(</operator><operator pos:start="111:17" pos:end="111:17">(</operator><name pos:start="111:18" pos:end="111:20">rgb</name><operator pos:start="111:21" pos:end="111:21">&amp;</operator><literal type="number" pos:start="111:22" pos:end="111:25">0xF8</literal><operator pos:start="111:26" pos:end="111:26">)</operator><operator pos:start="111:27" pos:end="111:28">&lt;&lt;</operator><literal type="number" pos:start="111:29" pos:end="111:29">8</literal><operator pos:start="111:30" pos:end="111:30">)</operator> <operator pos:start="111:32" pos:end="111:32">+</operator> <operator pos:start="111:34" pos:end="111:34">(</operator><operator pos:start="111:35" pos:end="111:35">(</operator><name pos:start="111:36" pos:end="111:38">rgb</name><operator pos:start="111:39" pos:end="111:39">&amp;</operator><literal type="number" pos:start="111:40" pos:end="111:45">0xFC00</literal><operator pos:start="111:46" pos:end="111:46">)</operator><operator pos:start="111:47" pos:end="111:48">&gt;&gt;</operator><literal type="number" pos:start="111:49" pos:end="111:49">5</literal><operator pos:start="111:50" pos:end="111:50">)</operator> <operator pos:start="111:52" pos:end="111:52">+</operator> <operator pos:start="111:54" pos:end="111:54">(</operator><operator pos:start="111:55" pos:end="111:55">(</operator><name pos:start="111:56" pos:end="111:58">rgb</name><operator pos:start="111:59" pos:end="111:59">&amp;</operator><literal type="number" pos:start="111:60" pos:end="111:67">0xF80000</literal><operator pos:start="111:68" pos:end="111:68">)</operator><operator pos:start="111:69" pos:end="111:70">&gt;&gt;</operator><literal type="number" pos:start="111:71" pos:end="111:72">19</literal><operator pos:start="111:73" pos:end="111:73">)</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

</block_content>}</block></function>
</unit>
