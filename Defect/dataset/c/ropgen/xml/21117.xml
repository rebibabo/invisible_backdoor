<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/21117.c" pos:tabs="8"><function pos:start="1:1" pos:end="279:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">mips_fulong2e_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:45"><name pos:start="1:32" pos:end="1:43">MachineState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:52">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="279:1">{<block_content pos:start="5:5" pos:end="277:26">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:35">address_space_mem</name> <init pos:start="17:37" pos:end="17:57">= <expr pos:start="17:39" pos:end="17:57"><call pos:start="17:39" pos:end="17:57"><name pos:start="17:39" pos:end="17:55">get_system_memory</name><argument_list pos:start="17:56" pos:end="17:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">ram</name> <init pos:start="19:23" pos:end="19:46">= <expr pos:start="19:25" pos:end="19:46"><call pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:29">g_new</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><name pos:start="19:31" pos:end="19:42">MemoryRegion</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:48"><decl pos:start="21:5" pos:end="21:47"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:22">bios</name> <init pos:start="21:24" pos:end="21:47">= <expr pos:start="21:26" pos:end="21:47"><call pos:start="21:26" pos:end="21:47"><name pos:start="21:26" pos:end="21:30">g_new</name><argument_list pos:start="21:31" pos:end="21:47">(<argument pos:start="21:32" pos:end="21:43"><expr pos:start="21:32" pos:end="21:43"><name pos:start="21:32" pos:end="21:43">MemoryRegion</name></expr></argument>, <argument pos:start="21:46" pos:end="21:46"><expr pos:start="21:46" pos:end="21:46"><literal type="number" pos:start="21:46" pos:end="21:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">long</name></type> <name pos:start="23:10" pos:end="23:18">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:11"><name pos:start="25:5" pos:end="25:11">int64_t</name></type> <name pos:start="25:13" pos:end="25:24">kernel_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:20"><decl pos:start="27:5" pos:end="27:19"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:27"><decl pos:start="29:5" pos:end="29:26"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:26">cpu_exit_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:12"><name pos:start="31:5" pos:end="31:10">PCIBus</name> <modifier pos:start="31:12" pos:end="31:12">*</modifier></type><name pos:start="31:13" pos:end="31:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:20"><decl pos:start="33:5" pos:end="33:19"><type pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:10">ISABus</name> <modifier pos:start="33:12" pos:end="33:12">*</modifier></type><name pos:start="33:13" pos:end="33:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:18"><decl pos:start="35:5" pos:end="35:17"><type pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:10">I2CBus</name> <modifier pos:start="35:12" pos:end="35:12">*</modifier></type><name pos:start="35:13" pos:end="35:17">smbus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:10"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:46"><decl pos:start="39:5" pos:end="39:45"><type pos:start="39:5" pos:end="39:15"><name pos:start="39:5" pos:end="39:13">DriveInfo</name> <modifier pos:start="39:15" pos:end="39:15">*</modifier></type><name pos:start="39:16" pos:end="39:45"><name pos:start="39:16" pos:end="39:17">hd</name><index pos:start="39:18" pos:end="39:45">[<expr pos:start="39:19" pos:end="39:44"><name pos:start="39:19" pos:end="39:29">MAX_IDE_BUS</name> <operator pos:start="39:31" pos:end="39:31">*</operator> <name pos:start="39:33" pos:end="39:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:17"><decl pos:start="41:5" pos:end="41:16"><type pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:11">MIPSCPU</name> <modifier pos:start="41:13" pos:end="41:13">*</modifier></type><name pos:start="41:14" pos:end="41:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:16">CPUMIPSState</name> <modifier pos:start="43:18" pos:end="43:18">*</modifier></type><name pos:start="43:19" pos:end="43:21">env</name></decl>;</decl_stmt>



    <comment type="block" pos:start="47:5" pos:end="47:19">/* init CPUs */</comment>

    <if_stmt pos:start="49:5" pos:end="53:5"><if pos:start="49:5" pos:end="53:5">if <condition pos:start="49:8" pos:end="49:26">(<expr pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:17">cpu_model</name> <operator pos:start="49:19" pos:end="49:20">==</operator> <name pos:start="49:22" pos:end="49:25">NULL</name></expr>)</condition> <block pos:start="49:28" pos:end="53:5">{<block_content pos:start="51:9" pos:end="51:34">

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:17">cpu_model</name> <operator pos:start="51:19" pos:end="51:19">=</operator> <literal type="string" pos:start="51:21" pos:end="51:33">"Loongson-2E"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:35"><expr pos:start="55:5" pos:end="55:34"><name pos:start="55:5" pos:end="55:7">cpu</name> <operator pos:start="55:9" pos:end="55:9">=</operator> <call pos:start="55:11" pos:end="55:34"><name pos:start="55:11" pos:end="55:23">cpu_mips_init</name><argument_list pos:start="55:24" pos:end="55:34">(<argument pos:start="55:25" pos:end="55:33"><expr pos:start="55:25" pos:end="55:33"><name pos:start="55:25" pos:end="55:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="63:5"><if pos:start="57:5" pos:end="63:5">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:11">cpu</name> <operator pos:start="57:13" pos:end="57:14">==</operator> <name pos:start="57:16" pos:end="57:19">NULL</name></expr>)</condition> <block pos:start="57:22" pos:end="63:5">{<block_content pos:start="59:9" pos:end="61:16">

        <expr_stmt pos:start="59:9" pos:end="59:59"><expr pos:start="59:9" pos:end="59:58"><call pos:start="59:9" pos:end="59:58"><name pos:start="59:9" pos:end="59:15">fprintf</name><argument_list pos:start="59:16" pos:end="59:58">(<argument pos:start="59:17" pos:end="59:22"><expr pos:start="59:17" pos:end="59:22"><name pos:start="59:17" pos:end="59:22">stderr</name></expr></argument>, <argument pos:start="59:25" pos:end="59:57"><expr pos:start="59:25" pos:end="59:57"><literal type="string" pos:start="59:25" pos:end="59:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:16"><expr pos:start="61:9" pos:end="61:15"><call pos:start="61:9" pos:end="61:15"><name pos:start="61:9" pos:end="61:12">exit</name><argument_list pos:start="61:13" pos:end="61:15">(<argument pos:start="61:14" pos:end="61:14"><expr pos:start="61:14" pos:end="61:14"><literal type="number" pos:start="61:14" pos:end="61:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:20"><expr pos:start="65:5" pos:end="65:19"><name pos:start="65:5" pos:end="65:7">env</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <operator pos:start="65:11" pos:end="65:11">&amp;</operator><name pos:start="65:12" pos:end="65:19"><name pos:start="65:12" pos:end="65:14">cpu</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:45"><expr pos:start="69:5" pos:end="69:44"><call pos:start="69:5" pos:end="69:44"><name pos:start="69:5" pos:end="69:23">qemu_register_reset</name><argument_list pos:start="69:24" pos:end="69:44">(<argument pos:start="69:25" pos:end="69:38"><expr pos:start="69:25" pos:end="69:38"><name pos:start="69:25" pos:end="69:38">main_cpu_reset</name></expr></argument>, <argument pos:start="69:41" pos:end="69:43"><expr pos:start="69:41" pos:end="69:43"><name pos:start="69:41" pos:end="69:43">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="73:5" pos:end="73:33">/* fulong 2e has 256M ram. */</comment>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:12">ram_size</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <literal type="number" pos:start="75:16" pos:end="75:18">256</literal> <operator pos:start="75:20" pos:end="75:20">*</operator> <literal type="number" pos:start="75:22" pos:end="75:25">1024</literal> <operator pos:start="75:27" pos:end="75:27">*</operator> <literal type="number" pos:start="75:29" pos:end="75:32">1024</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:55">/* fulong 2e has a 1M flash.Winbond W39L040AP70Z */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:28"><expr pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:13">bios_size</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <literal type="number" pos:start="81:17" pos:end="81:20">1024</literal> <operator pos:start="81:22" pos:end="81:22">*</operator> <literal type="number" pos:start="81:24" pos:end="81:27">1024</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:22">/* allocate RAM */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:78"><expr pos:start="87:5" pos:end="87:77"><call pos:start="87:5" pos:end="87:77"><name pos:start="87:5" pos:end="87:26">memory_region_init_ram</name><argument_list pos:start="87:27" pos:end="87:77">(<argument pos:start="87:28" pos:end="87:30"><expr pos:start="87:28" pos:end="87:30"><name pos:start="87:28" pos:end="87:30">ram</name></expr></argument>, <argument pos:start="87:33" pos:end="87:36"><expr pos:start="87:33" pos:end="87:36"><name pos:start="87:33" pos:end="87:36">NULL</name></expr></argument>, <argument pos:start="87:39" pos:end="87:52"><expr pos:start="87:39" pos:end="87:52"><literal type="string" pos:start="87:39" pos:end="87:52">"fulong2e.ram"</literal></expr></argument>, <argument pos:start="87:55" pos:end="87:62"><expr pos:start="87:55" pos:end="87:62"><name pos:start="87:55" pos:end="87:62">ram_size</name></expr></argument>, <argument pos:start="87:65" pos:end="87:76"><expr pos:start="87:65" pos:end="87:76"><operator pos:start="87:65" pos:end="87:65">&amp;</operator><name pos:start="87:66" pos:end="87:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:37"><expr pos:start="89:5" pos:end="89:36"><call pos:start="89:5" pos:end="89:36"><name pos:start="89:5" pos:end="89:31">vmstate_register_ram_global</name><argument_list pos:start="89:32" pos:end="89:36">(<argument pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="93:41"><expr pos:start="91:5" pos:end="93:40"><call pos:start="91:5" pos:end="93:40"><name pos:start="91:5" pos:end="91:26">memory_region_init_ram</name><argument_list pos:start="91:27" pos:end="93:40">(<argument pos:start="91:28" pos:end="91:31"><expr pos:start="91:28" pos:end="91:31"><name pos:start="91:28" pos:end="91:31">bios</name></expr></argument>, <argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">NULL</name></expr></argument>, <argument pos:start="91:40" pos:end="91:54"><expr pos:start="91:40" pos:end="91:54"><literal type="string" pos:start="91:40" pos:end="91:54">"fulong2e.bios"</literal></expr></argument>, <argument pos:start="91:57" pos:end="91:65"><expr pos:start="91:57" pos:end="91:65"><name pos:start="91:57" pos:end="91:65">bios_size</name></expr></argument>,

                           <argument pos:start="93:28" pos:end="93:39"><expr pos:start="93:28" pos:end="93:39"><operator pos:start="93:28" pos:end="93:28">&amp;</operator><name pos:start="93:29" pos:end="93:39">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:38"><expr pos:start="95:5" pos:end="95:37"><call pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:31">vmstate_register_ram_global</name><argument_list pos:start="95:32" pos:end="95:37">(<argument pos:start="95:33" pos:end="95:36"><expr pos:start="95:33" pos:end="95:36"><name pos:start="95:33" pos:end="95:36">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:43"><expr pos:start="97:5" pos:end="97:42"><call pos:start="97:5" pos:end="97:42"><name pos:start="97:5" pos:end="97:30">memory_region_set_readonly</name><argument_list pos:start="97:31" pos:end="97:42">(<argument pos:start="97:32" pos:end="97:35"><expr pos:start="97:32" pos:end="97:35"><name pos:start="97:32" pos:end="97:35">bios</name></expr></argument>, <argument pos:start="97:38" pos:end="97:41"><expr pos:start="97:38" pos:end="97:41"><name pos:start="97:38" pos:end="97:41">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:59"><expr pos:start="101:5" pos:end="101:58"><call pos:start="101:5" pos:end="101:58"><name pos:start="101:5" pos:end="101:31">memory_region_add_subregion</name><argument_list pos:start="101:32" pos:end="101:58">(<argument pos:start="101:33" pos:end="101:49"><expr pos:start="101:33" pos:end="101:49"><name pos:start="101:33" pos:end="101:49">address_space_mem</name></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><literal type="number" pos:start="101:52" pos:end="101:52">0</literal></expr></argument>, <argument pos:start="101:55" pos:end="101:57"><expr pos:start="101:55" pos:end="101:57"><name pos:start="101:55" pos:end="101:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:71"><expr pos:start="103:5" pos:end="103:70"><call pos:start="103:5" pos:end="103:70"><name pos:start="103:5" pos:end="103:31">memory_region_add_subregion</name><argument_list pos:start="103:32" pos:end="103:70">(<argument pos:start="103:33" pos:end="103:49"><expr pos:start="103:33" pos:end="103:49"><name pos:start="103:33" pos:end="103:49">address_space_mem</name></expr></argument>, <argument pos:start="103:52" pos:end="103:63"><expr pos:start="103:52" pos:end="103:63"><literal type="number" pos:start="103:52" pos:end="103:63">0x1fc00000LL</literal></expr></argument>, <argument pos:start="103:66" pos:end="103:69"><expr pos:start="103:66" pos:end="103:69"><name pos:start="103:66" pos:end="103:69">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="107:5" pos:end="109:72">/* We do not support flash operation, just loading pmon.bin as raw BIOS.

     * Please use -L to set the BIOS path and -bios to set bios name. */</comment>



    <if_stmt pos:start="113:5" pos:end="163:5"><if pos:start="113:5" pos:end="127:5">if <condition pos:start="113:8" pos:end="113:24">(<expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:23">kernel_filename</name></expr>)</condition> <block pos:start="113:26" pos:end="127:5">{<block_content pos:start="115:9" pos:end="125:77">

        <expr_stmt pos:start="115:9" pos:end="115:41"><expr pos:start="115:9" pos:end="115:40"><name pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:20">loaderparams</name><operator pos:start="115:21" pos:end="115:21">.</operator><name pos:start="115:22" pos:end="115:29">ram_size</name></name> <operator pos:start="115:31" pos:end="115:31">=</operator> <name pos:start="115:33" pos:end="115:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:55"><expr pos:start="117:9" pos:end="117:54"><name pos:start="117:9" pos:end="117:36"><name pos:start="117:9" pos:end="117:20">loaderparams</name><operator pos:start="117:21" pos:end="117:21">.</operator><name pos:start="117:22" pos:end="117:36">kernel_filename</name></name> <operator pos:start="117:38" pos:end="117:38">=</operator> <name pos:start="117:40" pos:end="117:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:53"><expr pos:start="119:9" pos:end="119:52"><name pos:start="119:9" pos:end="119:35"><name pos:start="119:9" pos:end="119:20">loaderparams</name><operator pos:start="119:21" pos:end="119:21">.</operator><name pos:start="119:22" pos:end="119:35">kernel_cmdline</name></name> <operator pos:start="119:37" pos:end="119:37">=</operator> <name pos:start="119:39" pos:end="119:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:55"><expr pos:start="121:9" pos:end="121:54"><name pos:start="121:9" pos:end="121:36"><name pos:start="121:9" pos:end="121:20">loaderparams</name><operator pos:start="121:21" pos:end="121:21">.</operator><name pos:start="121:22" pos:end="121:36">initrd_filename</name></name> <operator pos:start="121:38" pos:end="121:38">=</operator> <name pos:start="121:40" pos:end="121:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:41"><expr pos:start="123:9" pos:end="123:40"><name pos:start="123:9" pos:end="123:20">kernel_entry</name> <operator pos:start="123:22" pos:end="123:22">=</operator> <call pos:start="123:24" pos:end="123:40"><name pos:start="123:24" pos:end="123:34">load_kernel</name> <argument_list pos:start="123:36" pos:end="123:40">(<argument pos:start="123:37" pos:end="123:39"><expr pos:start="123:37" pos:end="123:39"><name pos:start="123:37" pos:end="123:39">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:77"><expr pos:start="125:9" pos:end="125:76"><call pos:start="125:9" pos:end="125:76"><name pos:start="125:9" pos:end="125:24">write_bootloader</name><argument_list pos:start="125:25" pos:end="125:76">(<argument pos:start="125:26" pos:end="125:28"><expr pos:start="125:26" pos:end="125:28"><name pos:start="125:26" pos:end="125:28">env</name></expr></argument>, <argument pos:start="125:31" pos:end="125:61"><expr pos:start="125:31" pos:end="125:61"><call pos:start="125:31" pos:end="125:61"><name pos:start="125:31" pos:end="125:55">memory_region_get_ram_ptr</name><argument_list pos:start="125:56" pos:end="125:61">(<argument pos:start="125:57" pos:end="125:60"><expr pos:start="125:57" pos:end="125:60"><name pos:start="125:57" pos:end="125:60">bios</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="125:64" pos:end="125:75"><expr pos:start="125:64" pos:end="125:75"><name pos:start="125:64" pos:end="125:75">kernel_entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="163:5">else <block pos:start="127:12" pos:end="163:5">{<block_content pos:start="129:9" pos:end="161:9">

        <if_stmt pos:start="129:9" pos:end="133:9"><if pos:start="129:9" pos:end="133:9">if <condition pos:start="129:12" pos:end="129:30">(<expr pos:start="129:13" pos:end="129:29"><name pos:start="129:13" pos:end="129:21">bios_name</name> <operator pos:start="129:23" pos:end="129:24">==</operator> <name pos:start="129:26" pos:end="129:29">NULL</name></expr>)</condition> <block pos:start="129:32" pos:end="133:9">{<block_content pos:start="131:17" pos:end="131:44">

                <expr_stmt pos:start="131:17" pos:end="131:44"><expr pos:start="131:17" pos:end="131:43"><name pos:start="131:17" pos:end="131:25">bios_name</name> <operator pos:start="131:27" pos:end="131:27">=</operator> <name pos:start="131:29" pos:end="131:43">FULONG_BIOSNAME</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:66"><expr pos:start="135:9" pos:end="135:65"><name pos:start="135:9" pos:end="135:16">filename</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <call pos:start="135:20" pos:end="135:65"><name pos:start="135:20" pos:end="135:33">qemu_find_file</name><argument_list pos:start="135:34" pos:end="135:65">(<argument pos:start="135:35" pos:end="135:53"><expr pos:start="135:35" pos:end="135:53"><name pos:start="135:35" pos:end="135:53">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="135:56" pos:end="135:64"><expr pos:start="135:56" pos:end="135:64"><name pos:start="135:56" pos:end="135:64">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="137:9" pos:end="149:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:21">(<expr pos:start="137:13" pos:end="137:20"><name pos:start="137:13" pos:end="137:20">filename</name></expr>)</condition> <block pos:start="137:23" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:29">

            <expr_stmt pos:start="139:13" pos:end="141:55"><expr pos:start="139:13" pos:end="141:54"><name pos:start="139:13" pos:end="139:21">bios_size</name> <operator pos:start="139:23" pos:end="139:23">=</operator> <call pos:start="139:25" pos:end="141:54"><name pos:start="139:25" pos:end="139:43">load_image_targphys</name><argument_list pos:start="139:44" pos:end="141:54">(<argument pos:start="139:45" pos:end="139:52"><expr pos:start="139:45" pos:end="139:52"><name pos:start="139:45" pos:end="139:52">filename</name></expr></argument>, <argument pos:start="139:55" pos:end="139:66"><expr pos:start="139:55" pos:end="139:66"><literal type="number" pos:start="139:55" pos:end="139:66">0x1fc00000LL</literal></expr></argument>,

                                            <argument pos:start="141:45" pos:end="141:53"><expr pos:start="141:45" pos:end="141:53"><name pos:start="141:45" pos:end="141:53">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:29"><expr pos:start="143:13" pos:end="143:28"><call pos:start="143:13" pos:end="143:28"><name pos:start="143:13" pos:end="143:18">g_free</name><argument_list pos:start="143:19" pos:end="143:28">(<argument pos:start="143:20" pos:end="143:27"><expr pos:start="143:20" pos:end="143:27"><name pos:start="143:20" pos:end="143:27">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="149:9">else <block pos:start="145:16" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:27">

            <expr_stmt pos:start="147:13" pos:end="147:27"><expr pos:start="147:13" pos:end="147:26"><name pos:start="147:13" pos:end="147:21">bios_size</name> <operator pos:start="147:23" pos:end="147:23">=</operator> <operator pos:start="147:25" pos:end="147:25">-</operator><literal type="number" pos:start="147:26" pos:end="147:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="153:9" pos:end="161:9"><if pos:start="153:9" pos:end="161:9">if <condition pos:start="153:12" pos:end="155:49">(<expr pos:start="153:13" pos:end="155:48"><operator pos:start="153:13" pos:end="153:13">(</operator><name pos:start="153:14" pos:end="153:41"><name pos:start="153:14" pos:end="153:22">bios_size</name> <argument_list type="generic" pos:start="153:24" pos:end="153:41">&lt; <argument pos:start="153:26" pos:end="153:39"><expr pos:start="153:26" pos:end="153:39"><literal type="number" pos:start="153:26" pos:end="153:26">0</literal> <operator pos:start="153:28" pos:end="153:29">||</operator> <name pos:start="153:31" pos:end="153:39">bios_size</name></expr></argument> &gt;</argument_list></name> <name pos:start="153:43" pos:end="153:51">BIOS_SIZE</name><operator pos:start="153:52" pos:end="153:52">)</operator> <operator pos:start="153:54" pos:end="153:55">&amp;&amp;</operator>

            <operator pos:start="155:13" pos:end="155:13">!</operator><name pos:start="155:14" pos:end="155:28">kernel_filename</name> <operator pos:start="155:30" pos:end="155:31">&amp;&amp;</operator> <operator pos:start="155:33" pos:end="155:33">!</operator><call pos:start="155:34" pos:end="155:48"><name pos:start="155:34" pos:end="155:46">qtest_enabled</name><argument_list pos:start="155:47" pos:end="155:48">()</argument_list></call></expr>)</condition> <block pos:start="155:51" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:20">

            <expr_stmt pos:start="157:13" pos:end="157:69"><expr pos:start="157:13" pos:end="157:68"><call pos:start="157:13" pos:end="157:68"><name pos:start="157:13" pos:end="157:24">error_report</name><argument_list pos:start="157:25" pos:end="157:68">(<argument pos:start="157:26" pos:end="157:56"><expr pos:start="157:26" pos:end="157:56"><literal type="string" pos:start="157:26" pos:end="157:56">"Could not load MIPS bios '%s'"</literal></expr></argument>, <argument pos:start="157:59" pos:end="157:67"><expr pos:start="157:59" pos:end="157:67"><name pos:start="157:59" pos:end="157:67">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:20"><expr pos:start="159:13" pos:end="159:19"><call pos:start="159:13" pos:end="159:19"><name pos:start="159:13" pos:end="159:16">exit</name><argument_list pos:start="159:17" pos:end="159:19">(<argument pos:start="159:18" pos:end="159:18"><expr pos:start="159:18" pos:end="159:18"><literal type="number" pos:start="159:18" pos:end="159:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:31">/* Init internal devices */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:31"><expr pos:start="169:5" pos:end="169:30"><call pos:start="169:5" pos:end="169:30"><name pos:start="169:5" pos:end="169:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="169:26" pos:end="169:30">(<argument pos:start="169:27" pos:end="169:29"><expr pos:start="169:27" pos:end="169:29"><name pos:start="169:27" pos:end="169:29">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:29"><expr pos:start="171:5" pos:end="171:28"><call pos:start="171:5" pos:end="171:28"><name pos:start="171:5" pos:end="171:23">cpu_mips_clock_init</name><argument_list pos:start="171:24" pos:end="171:28">(<argument pos:start="171:25" pos:end="171:27"><expr pos:start="171:25" pos:end="171:27"><name pos:start="171:25" pos:end="171:27">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="175:5" pos:end="175:38">/* North bridge, Bonito --&gt; IP2 */</comment>

    <expr_stmt pos:start="177:5" pos:end="177:54"><expr pos:start="177:5" pos:end="177:53"><name pos:start="177:5" pos:end="177:11">pci_bus</name> <operator pos:start="177:13" pos:end="177:13">=</operator> <call pos:start="177:15" pos:end="177:53"><name pos:start="177:15" pos:end="177:25">bonito_init</name><argument_list pos:start="177:26" pos:end="177:53">(<argument pos:start="177:27" pos:end="177:52"><expr pos:start="177:27" pos:end="177:52"><operator pos:start="177:27" pos:end="177:27">(</operator><name pos:start="177:28" pos:end="177:35">qemu_irq</name> <operator pos:start="177:37" pos:end="177:37">*</operator><operator pos:start="177:38" pos:end="177:38">)</operator><operator pos:start="177:39" pos:end="177:39">&amp;</operator><operator pos:start="177:40" pos:end="177:40">(</operator><name pos:start="177:41" pos:end="177:51"><name pos:start="177:41" pos:end="177:43">env</name><operator pos:start="177:44" pos:end="177:45">-&gt;</operator><name pos:start="177:46" pos:end="177:48">irq</name><index pos:start="177:49" pos:end="177:51">[<expr pos:start="177:50" pos:end="177:50"><literal type="number" pos:start="177:50" pos:end="177:50">2</literal></expr>]</index></name><operator pos:start="177:52" pos:end="177:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="181:5" pos:end="181:22">/* South bridge */</comment>

    <expr_stmt pos:start="183:5" pos:end="183:35"><expr pos:start="183:5" pos:end="183:34"><call pos:start="183:5" pos:end="183:34"><name pos:start="183:5" pos:end="183:17">ide_drive_get</name><argument_list pos:start="183:18" pos:end="183:34">(<argument pos:start="183:19" pos:end="183:20"><expr pos:start="183:19" pos:end="183:20"><name pos:start="183:19" pos:end="183:20">hd</name></expr></argument>, <argument pos:start="183:23" pos:end="183:33"><expr pos:start="183:23" pos:end="183:33"><name pos:start="183:23" pos:end="183:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:71"><expr pos:start="187:5" pos:end="187:70"><name pos:start="187:5" pos:end="187:11">isa_bus</name> <operator pos:start="187:13" pos:end="187:13">=</operator> <call pos:start="187:15" pos:end="187:70"><name pos:start="187:15" pos:end="187:28">vt82c686b_init</name><argument_list pos:start="187:29" pos:end="187:70">(<argument pos:start="187:30" pos:end="187:36"><expr pos:start="187:30" pos:end="187:36"><name pos:start="187:30" pos:end="187:36">pci_bus</name></expr></argument>, <argument pos:start="187:39" pos:end="187:69"><expr pos:start="187:39" pos:end="187:69"><call pos:start="187:39" pos:end="187:69"><name pos:start="187:39" pos:end="187:47">PCI_DEVFN</name><argument_list pos:start="187:48" pos:end="187:69">(<argument pos:start="187:49" pos:end="187:65"><expr pos:start="187:49" pos:end="187:65"><name pos:start="187:49" pos:end="187:65">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="187:68" pos:end="187:68"><expr pos:start="187:68" pos:end="187:68"><literal type="number" pos:start="187:68" pos:end="187:68">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:17">(<expr pos:start="189:9" pos:end="189:16"><operator pos:start="189:9" pos:end="189:9">!</operator><name pos:start="189:10" pos:end="189:16">isa_bus</name></expr>)</condition> <block pos:start="189:19" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:16">

        <expr_stmt pos:start="191:9" pos:end="191:50"><expr pos:start="191:9" pos:end="191:49"><call pos:start="191:9" pos:end="191:49"><name pos:start="191:9" pos:end="191:15">fprintf</name><argument_list pos:start="191:16" pos:end="191:49">(<argument pos:start="191:17" pos:end="191:22"><expr pos:start="191:17" pos:end="191:22"><name pos:start="191:17" pos:end="191:22">stderr</name></expr></argument>, <argument pos:start="191:25" pos:end="191:48"><expr pos:start="191:25" pos:end="191:48"><literal type="string" pos:start="191:25" pos:end="191:48">"vt82c686b_init error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:16"><expr pos:start="193:9" pos:end="193:15"><call pos:start="193:9" pos:end="193:15"><name pos:start="193:9" pos:end="193:12">exit</name><argument_list pos:start="193:13" pos:end="193:15">(<argument pos:start="193:14" pos:end="193:14"><expr pos:start="193:14" pos:end="193:14"><literal type="number" pos:start="193:14" pos:end="193:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="199:5" pos:end="199:30">/* Interrupt controller */</comment>

    <comment type="block" pos:start="201:5" pos:end="201:26">/* The 8259 -&gt; IP5  */</comment>

    <expr_stmt pos:start="203:5" pos:end="203:45"><expr pos:start="203:5" pos:end="203:44"><name pos:start="203:5" pos:end="203:9">i8259</name> <operator pos:start="203:11" pos:end="203:11">=</operator> <call pos:start="203:13" pos:end="203:44"><name pos:start="203:13" pos:end="203:22">i8259_init</name><argument_list pos:start="203:23" pos:end="203:44">(<argument pos:start="203:24" pos:end="203:30"><expr pos:start="203:24" pos:end="203:30"><name pos:start="203:24" pos:end="203:30">isa_bus</name></expr></argument>, <argument pos:start="203:33" pos:end="203:43"><expr pos:start="203:33" pos:end="203:43"><name pos:start="203:33" pos:end="203:43"><name pos:start="203:33" pos:end="203:35">env</name><operator pos:start="203:36" pos:end="203:37">-&gt;</operator><name pos:start="203:38" pos:end="203:40">irq</name><index pos:start="203:41" pos:end="203:43">[<expr pos:start="203:42" pos:end="203:42"><literal type="number" pos:start="203:42" pos:end="203:42">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:33"><expr pos:start="205:5" pos:end="205:32"><call pos:start="205:5" pos:end="205:32"><name pos:start="205:5" pos:end="205:16">isa_bus_irqs</name><argument_list pos:start="205:17" pos:end="205:32">(<argument pos:start="205:18" pos:end="205:24"><expr pos:start="205:18" pos:end="205:24"><name pos:start="205:18" pos:end="205:24">isa_bus</name></expr></argument>, <argument pos:start="205:27" pos:end="205:31"><expr pos:start="205:27" pos:end="205:31"><name pos:start="205:27" pos:end="205:31">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="209:5" pos:end="209:69"><expr pos:start="209:5" pos:end="209:68"><call pos:start="209:5" pos:end="209:68"><name pos:start="209:5" pos:end="209:22">vt82c686b_ide_init</name><argument_list pos:start="209:23" pos:end="209:68">(<argument pos:start="209:24" pos:end="209:30"><expr pos:start="209:24" pos:end="209:30"><name pos:start="209:24" pos:end="209:30">pci_bus</name></expr></argument>, <argument pos:start="209:33" pos:end="209:34"><expr pos:start="209:33" pos:end="209:34"><name pos:start="209:33" pos:end="209:34">hd</name></expr></argument>, <argument pos:start="209:37" pos:end="209:67"><expr pos:start="209:37" pos:end="209:67"><call pos:start="209:37" pos:end="209:67"><name pos:start="209:37" pos:end="209:45">PCI_DEVFN</name><argument_list pos:start="209:46" pos:end="209:67">(<argument pos:start="209:47" pos:end="209:63"><expr pos:start="209:47" pos:end="209:63"><name pos:start="209:47" pos:end="209:63">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="209:66" pos:end="209:66"><expr pos:start="209:66" pos:end="209:66"><literal type="number" pos:start="209:66" pos:end="209:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="213:44"><expr pos:start="211:5" pos:end="213:43"><call pos:start="211:5" pos:end="213:43"><name pos:start="211:5" pos:end="211:21">pci_create_simple</name><argument_list pos:start="211:22" pos:end="213:43">(<argument pos:start="211:23" pos:end="211:29"><expr pos:start="211:23" pos:end="211:29"><name pos:start="211:23" pos:end="211:29">pci_bus</name></expr></argument>, <argument pos:start="211:32" pos:end="211:62"><expr pos:start="211:32" pos:end="211:62"><call pos:start="211:32" pos:end="211:62"><name pos:start="211:32" pos:end="211:40">PCI_DEVFN</name><argument_list pos:start="211:41" pos:end="211:62">(<argument pos:start="211:42" pos:end="211:58"><expr pos:start="211:42" pos:end="211:58"><name pos:start="211:42" pos:end="211:58">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="211:61" pos:end="211:61"><expr pos:start="211:61" pos:end="211:61"><literal type="number" pos:start="211:61" pos:end="211:61">2</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="213:23" pos:end="213:42"><expr pos:start="213:23" pos:end="213:42"><literal type="string" pos:start="213:23" pos:end="213:42">"vt82c686b-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="215:5" pos:end="217:44"><expr pos:start="215:5" pos:end="217:43"><call pos:start="215:5" pos:end="217:43"><name pos:start="215:5" pos:end="215:21">pci_create_simple</name><argument_list pos:start="215:22" pos:end="217:43">(<argument pos:start="215:23" pos:end="215:29"><expr pos:start="215:23" pos:end="215:29"><name pos:start="215:23" pos:end="215:29">pci_bus</name></expr></argument>, <argument pos:start="215:32" pos:end="215:62"><expr pos:start="215:32" pos:end="215:62"><call pos:start="215:32" pos:end="215:62"><name pos:start="215:32" pos:end="215:40">PCI_DEVFN</name><argument_list pos:start="215:41" pos:end="215:62">(<argument pos:start="215:42" pos:end="215:58"><expr pos:start="215:42" pos:end="215:58"><name pos:start="215:42" pos:end="215:58">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="215:61" pos:end="215:61"><expr pos:start="215:61" pos:end="215:61"><literal type="number" pos:start="215:61" pos:end="215:61">3</literal></expr></argument>)</argument_list></call></expr></argument>,

                      <argument pos:start="217:23" pos:end="217:42"><expr pos:start="217:23" pos:end="217:42"><literal type="string" pos:start="217:23" pos:end="217:42">"vt82c686b-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="221:5" pos:end="223:44"><expr pos:start="221:5" pos:end="223:43"><name pos:start="221:5" pos:end="221:9">smbus</name> <operator pos:start="221:11" pos:end="221:11">=</operator> <call pos:start="221:13" pos:end="223:43"><name pos:start="221:13" pos:end="221:29">vt82c686b_pm_init</name><argument_list pos:start="221:30" pos:end="223:43">(<argument pos:start="221:31" pos:end="221:37"><expr pos:start="221:31" pos:end="221:37"><name pos:start="221:31" pos:end="221:37">pci_bus</name></expr></argument>, <argument pos:start="221:40" pos:end="221:70"><expr pos:start="221:40" pos:end="221:70"><call pos:start="221:40" pos:end="221:70"><name pos:start="221:40" pos:end="221:48">PCI_DEVFN</name><argument_list pos:start="221:49" pos:end="221:70">(<argument pos:start="221:50" pos:end="221:66"><expr pos:start="221:50" pos:end="221:66"><name pos:start="221:50" pos:end="221:66">FULONG2E_VIA_SLOT</name></expr></argument>, <argument pos:start="221:69" pos:end="221:69"><expr pos:start="221:69" pos:end="221:69"><literal type="number" pos:start="221:69" pos:end="221:69">4</literal></expr></argument>)</argument_list></call></expr></argument>,

                              <argument pos:start="223:31" pos:end="223:36"><expr pos:start="223:31" pos:end="223:36"><literal type="number" pos:start="223:31" pos:end="223:36">0xeee1</literal></expr></argument>, <argument pos:start="223:39" pos:end="223:42"><expr pos:start="223:39" pos:end="223:42"><name pos:start="223:39" pos:end="223:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="225:5" pos:end="225:42">/* TODO: Populate SPD eeprom data.  */</comment>

    <expr_stmt pos:start="227:5" pos:end="227:64"><expr pos:start="227:5" pos:end="227:63"><call pos:start="227:5" pos:end="227:63"><name pos:start="227:5" pos:end="227:21">smbus_eeprom_init</name><argument_list pos:start="227:22" pos:end="227:63">(<argument pos:start="227:23" pos:end="227:27"><expr pos:start="227:23" pos:end="227:27"><name pos:start="227:23" pos:end="227:27">smbus</name></expr></argument>, <argument pos:start="227:30" pos:end="227:30"><expr pos:start="227:30" pos:end="227:30"><literal type="number" pos:start="227:30" pos:end="227:30">1</literal></expr></argument>, <argument pos:start="227:33" pos:end="227:42"><expr pos:start="227:33" pos:end="227:42"><name pos:start="227:33" pos:end="227:42">eeprom_spd</name></expr></argument>, <argument pos:start="227:45" pos:end="227:62"><expr pos:start="227:45" pos:end="227:62"><sizeof pos:start="227:45" pos:end="227:62">sizeof<argument_list pos:start="227:51" pos:end="227:62">(<argument pos:start="227:52" pos:end="227:61"><expr pos:start="227:52" pos:end="227:61"><name pos:start="227:52" pos:end="227:61">eeprom_spd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="231:5" pos:end="231:28">/* init other devices */</comment>

    <expr_stmt pos:start="233:5" pos:end="233:43"><expr pos:start="233:5" pos:end="233:42"><name pos:start="233:5" pos:end="233:7">pit</name> <operator pos:start="233:9" pos:end="233:9">=</operator> <call pos:start="233:11" pos:end="233:42"><name pos:start="233:11" pos:end="233:18">pit_init</name><argument_list pos:start="233:19" pos:end="233:42">(<argument pos:start="233:20" pos:end="233:26"><expr pos:start="233:20" pos:end="233:26"><name pos:start="233:20" pos:end="233:26">isa_bus</name></expr></argument>, <argument pos:start="233:29" pos:end="233:32"><expr pos:start="233:29" pos:end="233:32"><literal type="number" pos:start="233:29" pos:end="233:32">0x40</literal></expr></argument>, <argument pos:start="233:35" pos:end="233:35"><expr pos:start="233:35" pos:end="233:35"><literal type="number" pos:start="233:35" pos:end="233:35">0</literal></expr></argument>, <argument pos:start="233:38" pos:end="233:41"><expr pos:start="233:38" pos:end="233:41"><name pos:start="233:38" pos:end="233:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:65"><expr pos:start="235:5" pos:end="235:64"><name pos:start="235:5" pos:end="235:16">cpu_exit_irq</name> <operator pos:start="235:18" pos:end="235:18">=</operator> <call pos:start="235:20" pos:end="235:64"><name pos:start="235:20" pos:end="235:37">qemu_allocate_irqs</name><argument_list pos:start="235:38" pos:end="235:64">(<argument pos:start="235:39" pos:end="235:54"><expr pos:start="235:39" pos:end="235:54"><name pos:start="235:39" pos:end="235:54">cpu_request_exit</name></expr></argument>, <argument pos:start="235:57" pos:end="235:60"><expr pos:start="235:57" pos:end="235:60"><name pos:start="235:57" pos:end="235:60">NULL</name></expr></argument>, <argument pos:start="235:63" pos:end="235:63"><expr pos:start="235:63" pos:end="235:63"><literal type="number" pos:start="235:63" pos:end="235:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="237:5" pos:end="237:30"><expr pos:start="237:5" pos:end="237:29"><call pos:start="237:5" pos:end="237:29"><name pos:start="237:5" pos:end="237:12">DMA_init</name><argument_list pos:start="237:13" pos:end="237:29">(<argument pos:start="237:14" pos:end="237:14"><expr pos:start="237:14" pos:end="237:14"><literal type="number" pos:start="237:14" pos:end="237:14">0</literal></expr></argument>, <argument pos:start="237:17" pos:end="237:28"><expr pos:start="237:17" pos:end="237:28"><name pos:start="237:17" pos:end="237:28">cpu_exit_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="241:5" pos:end="241:19">/* Super I/O */</comment>

    <expr_stmt pos:start="243:5" pos:end="243:40"><expr pos:start="243:5" pos:end="243:39"><call pos:start="243:5" pos:end="243:39"><name pos:start="243:5" pos:end="243:21">isa_create_simple</name><argument_list pos:start="243:22" pos:end="243:39">(<argument pos:start="243:23" pos:end="243:29"><expr pos:start="243:23" pos:end="243:29"><name pos:start="243:23" pos:end="243:29">isa_bus</name></expr></argument>, <argument pos:start="243:32" pos:end="243:38"><expr pos:start="243:32" pos:end="243:38"><literal type="string" pos:start="243:32" pos:end="243:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:34"><expr pos:start="247:5" pos:end="247:33"><call pos:start="247:5" pos:end="247:33"><name pos:start="247:5" pos:end="247:12">rtc_init</name><argument_list pos:start="247:13" pos:end="247:33">(<argument pos:start="247:14" pos:end="247:20"><expr pos:start="247:14" pos:end="247:20"><name pos:start="247:14" pos:end="247:20">isa_bus</name></expr></argument>, <argument pos:start="247:23" pos:end="247:26"><expr pos:start="247:23" pos:end="247:26"><literal type="number" pos:start="247:23" pos:end="247:26">2000</literal></expr></argument>, <argument pos:start="247:29" pos:end="247:32"><expr pos:start="247:29" pos:end="247:32"><name pos:start="247:29" pos:end="247:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="251:5" pos:end="259:5">for<control pos:start="251:8" pos:end="251:41">(<init pos:start="251:9" pos:end="251:14"><expr pos:start="251:9" pos:end="251:13"><name pos:start="251:9" pos:end="251:9">i</name> <operator pos:start="251:11" pos:end="251:11">=</operator> <literal type="number" pos:start="251:13" pos:end="251:13">0</literal></expr>;</init> <condition pos:start="251:16" pos:end="251:36"><expr pos:start="251:16" pos:end="251:35"><name pos:start="251:16" pos:end="251:16">i</name> <operator pos:start="251:18" pos:end="251:18">&lt;</operator> <name pos:start="251:20" pos:end="251:35">MAX_SERIAL_PORTS</name></expr>;</condition> <incr pos:start="251:38" pos:end="251:40"><expr pos:start="251:38" pos:end="251:40"><name pos:start="251:38" pos:end="251:38">i</name><operator pos:start="251:39" pos:end="251:40">++</operator></expr></incr>)</control> <block pos:start="251:43" pos:end="259:5">{<block_content pos:start="253:9" pos:end="257:9">

        <if_stmt pos:start="253:9" pos:end="257:9"><if pos:start="253:9" pos:end="257:9">if <condition pos:start="253:12" pos:end="253:26">(<expr pos:start="253:13" pos:end="253:25"><name pos:start="253:13" pos:end="253:25"><name pos:start="253:13" pos:end="253:22">serial_hds</name><index pos:start="253:23" pos:end="253:25">[<expr pos:start="253:24" pos:end="253:24"><name pos:start="253:24" pos:end="253:24">i</name></expr>]</index></name></expr>)</condition> <block pos:start="253:28" pos:end="257:9">{<block_content pos:start="255:13" pos:end="255:55">

            <expr_stmt pos:start="255:13" pos:end="255:55"><expr pos:start="255:13" pos:end="255:54"><call pos:start="255:13" pos:end="255:54"><name pos:start="255:13" pos:end="255:27">serial_isa_init</name><argument_list pos:start="255:28" pos:end="255:54">(<argument pos:start="255:29" pos:end="255:35"><expr pos:start="255:29" pos:end="255:35"><name pos:start="255:29" pos:end="255:35">isa_bus</name></expr></argument>, <argument pos:start="255:38" pos:end="255:38"><expr pos:start="255:38" pos:end="255:38"><name pos:start="255:38" pos:end="255:38">i</name></expr></argument>, <argument pos:start="255:41" pos:end="255:53"><expr pos:start="255:41" pos:end="255:53"><name pos:start="255:41" pos:end="255:53"><name pos:start="255:41" pos:end="255:50">serial_hds</name><index pos:start="255:51" pos:end="255:53">[<expr pos:start="255:52" pos:end="255:52"><name pos:start="255:52" pos:end="255:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="263:5" pos:end="267:5"><if pos:start="263:5" pos:end="267:5">if <condition pos:start="263:8" pos:end="263:24">(<expr pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:23"><name pos:start="263:9" pos:end="263:20">parallel_hds</name><index pos:start="263:21" pos:end="263:23">[<expr pos:start="263:22" pos:end="263:22"><literal type="number" pos:start="263:22" pos:end="263:22">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="263:26" pos:end="267:5">{<block_content pos:start="265:9" pos:end="265:51">

        <expr_stmt pos:start="265:9" pos:end="265:51"><expr pos:start="265:9" pos:end="265:50"><call pos:start="265:9" pos:end="265:50"><name pos:start="265:9" pos:end="265:21">parallel_init</name><argument_list pos:start="265:22" pos:end="265:50">(<argument pos:start="265:23" pos:end="265:29"><expr pos:start="265:23" pos:end="265:29"><name pos:start="265:23" pos:end="265:29">isa_bus</name></expr></argument>, <argument pos:start="265:32" pos:end="265:32"><expr pos:start="265:32" pos:end="265:32"><literal type="number" pos:start="265:32" pos:end="265:32">0</literal></expr></argument>, <argument pos:start="265:35" pos:end="265:49"><expr pos:start="265:35" pos:end="265:49"><name pos:start="265:35" pos:end="265:49"><name pos:start="265:35" pos:end="265:46">parallel_hds</name><index pos:start="265:47" pos:end="265:49">[<expr pos:start="265:48" pos:end="265:48"><literal type="number" pos:start="265:48" pos:end="265:48">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="271:5" pos:end="271:20">/* Sound card */</comment>

    <expr_stmt pos:start="273:5" pos:end="273:24"><expr pos:start="273:5" pos:end="273:23"><call pos:start="273:5" pos:end="273:23"><name pos:start="273:5" pos:end="273:14">audio_init</name><argument_list pos:start="273:15" pos:end="273:23">(<argument pos:start="273:16" pos:end="273:22"><expr pos:start="273:16" pos:end="273:22"><name pos:start="273:16" pos:end="273:22">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="275:5" pos:end="275:22">/* Network card */</comment>

    <expr_stmt pos:start="277:5" pos:end="277:26"><expr pos:start="277:5" pos:end="277:25"><call pos:start="277:5" pos:end="277:25"><name pos:start="277:5" pos:end="277:16">network_init</name><argument_list pos:start="277:17" pos:end="277:25">(<argument pos:start="277:18" pos:end="277:24"><expr pos:start="277:18" pos:end="277:24"><name pos:start="277:18" pos:end="277:24">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
