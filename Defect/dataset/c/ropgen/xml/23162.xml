<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23162.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:59"><name pos:start="1:1" pos:end="1:14">opts_next_list</name><argument_list pos:start="1:15" pos:end="1:59">(<argument pos:start="1:16" pos:end="1:25">Visitor *v</argument>, <argument pos:start="1:28" pos:end="1:45">GenericList **list</argument>, <argument pos:start="1:48" pos:end="1:58">size_t size</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="91:1">{<block_content pos:start="5:5" pos:end="89:17">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:30"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">OptsVisitor</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">ov</name> <init pos:start="5:21" pos:end="5:30">= <expr pos:start="5:23" pos:end="5:30"><call pos:start="5:23" pos:end="5:30"><name pos:start="5:23" pos:end="5:27">to_ov</name><argument_list pos:start="5:28" pos:end="5:30">(<argument pos:start="5:29" pos:end="5:29"><expr pos:start="5:29" pos:end="5:29"><name pos:start="5:29" pos:end="5:29">v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:23"><decl pos:start="7:5" pos:end="7:22"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:15">GenericList</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier><modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:22">link</name></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="83:5">switch <condition pos:start="11:12" pos:end="11:26">(<expr pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:25"><name pos:start="11:13" pos:end="11:14">ov</name><operator pos:start="11:15" pos:end="11:16">-&gt;</operator><name pos:start="11:17" pos:end="11:25">list_mode</name></name></expr>)</condition> <block pos:start="11:28" pos:end="83:5">{<block_content pos:start="13:5" pos:end="81:16">

    <case pos:start="13:5" pos:end="13:20">case <expr pos:start="13:10" pos:end="13:19"><name pos:start="13:10" pos:end="13:19">LM_STARTED</name></expr>:</case>

        <expr_stmt pos:start="15:9" pos:end="15:39"><expr pos:start="15:9" pos:end="15:38"><name pos:start="15:9" pos:end="15:21"><name pos:start="15:9" pos:end="15:10">ov</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:21">list_mode</name></name> <operator pos:start="15:23" pos:end="15:23">=</operator> <name pos:start="15:25" pos:end="15:38">LM_IN_PROGRESS</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:20"><expr pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:12">link</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <name pos:start="17:16" pos:end="17:19">list</name></expr>;</expr_stmt>

        <break pos:start="19:9" pos:end="19:14">break;</break>



    <case pos:start="23:5" pos:end="23:28">case <expr pos:start="23:10" pos:end="23:27"><name pos:start="23:10" pos:end="23:27">LM_SIGNED_INTERVAL</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:30">case <expr pos:start="25:10" pos:end="25:29"><name pos:start="25:10" pos:end="25:29">LM_UNSIGNED_INTERVAL</name></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:12">link</name> <operator pos:start="27:14" pos:end="27:14">=</operator> <operator pos:start="27:16" pos:end="27:16">&amp;</operator><name pos:start="27:17" pos:end="27:29"><operator pos:start="27:17" pos:end="27:17">(</operator><operator pos:start="27:18" pos:end="27:18">*</operator><name pos:start="27:19" pos:end="27:22">list</name><operator pos:start="27:23" pos:end="27:23">)</operator><operator pos:start="27:24" pos:end="27:25">-&gt;</operator><name pos:start="27:26" pos:end="27:29">next</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="47:9"><if pos:start="31:9" pos:end="41:9">if <condition pos:start="31:12" pos:end="31:48">(<expr pos:start="31:13" pos:end="31:47"><name pos:start="31:13" pos:end="31:25"><name pos:start="31:13" pos:end="31:14">ov</name><operator pos:start="31:15" pos:end="31:16">-&gt;</operator><name pos:start="31:17" pos:end="31:25">list_mode</name></name> <operator pos:start="31:27" pos:end="31:28">==</operator> <name pos:start="31:30" pos:end="31:47">LM_SIGNED_INTERVAL</name></expr>)</condition> <block pos:start="31:50" pos:end="41:9">{<block_content pos:start="33:13" pos:end="39:13">

            <if_stmt pos:start="33:13" pos:end="39:13"><if pos:start="33:13" pos:end="39:13">if <condition pos:start="33:16" pos:end="33:53">(<expr pos:start="33:17" pos:end="33:52"><name pos:start="33:17" pos:end="33:32"><name pos:start="33:17" pos:end="33:18">ov</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:30">range_next</name><operator pos:start="33:31" pos:end="33:31">.</operator><name pos:start="33:32" pos:end="33:32">s</name></name> <operator pos:start="33:34" pos:end="33:34">&lt;</operator> <name pos:start="33:36" pos:end="33:52"><name pos:start="33:36" pos:end="33:37">ov</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:50">range_limit</name><operator pos:start="33:51" pos:end="33:51">.</operator><name pos:start="33:52" pos:end="33:52">s</name></name></expr>)</condition> <block pos:start="33:55" pos:end="39:13">{<block_content pos:start="35:17" pos:end="37:22">

                <expr_stmt pos:start="35:17" pos:end="35:35"><expr pos:start="35:17" pos:end="35:34"><operator pos:start="35:17" pos:end="35:18">++</operator><name pos:start="35:19" pos:end="35:34"><name pos:start="35:19" pos:end="35:20">ov</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:32">range_next</name><operator pos:start="35:33" pos:end="35:33">.</operator><name pos:start="35:34" pos:end="35:34">s</name></name></expr>;</expr_stmt>

                <break pos:start="37:17" pos:end="37:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="41:11" pos:end="47:9">else if <condition pos:start="41:19" pos:end="41:56">(<expr pos:start="41:20" pos:end="41:55"><name pos:start="41:20" pos:end="41:35"><name pos:start="41:20" pos:end="41:21">ov</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:33">range_next</name><operator pos:start="41:34" pos:end="41:34">.</operator><name pos:start="41:35" pos:end="41:35">u</name></name> <operator pos:start="41:37" pos:end="41:37">&lt;</operator> <name pos:start="41:39" pos:end="41:55"><name pos:start="41:39" pos:end="41:40">ov</name><operator pos:start="41:41" pos:end="41:42">-&gt;</operator><name pos:start="41:43" pos:end="41:53">range_limit</name><operator pos:start="41:54" pos:end="41:54">.</operator><name pos:start="41:55" pos:end="41:55">u</name></name></expr>)</condition> <block pos:start="41:58" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:18">

            <expr_stmt pos:start="43:13" pos:end="43:31"><expr pos:start="43:13" pos:end="43:30"><operator pos:start="43:13" pos:end="43:14">++</operator><name pos:start="43:15" pos:end="43:30"><name pos:start="43:15" pos:end="43:16">ov</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:28">range_next</name><operator pos:start="43:29" pos:end="43:29">.</operator><name pos:start="43:30" pos:end="43:30">u</name></name></expr>;</expr_stmt>

            <break pos:start="45:13" pos:end="45:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:39"><expr pos:start="49:9" pos:end="49:38"><name pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:10">ov</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:21">list_mode</name></name> <operator pos:start="49:23" pos:end="49:23">=</operator> <name pos:start="49:25" pos:end="49:38">LM_IN_PROGRESS</name></expr>;</expr_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:75">/* range has been completed, fall through in order to pop option */</comment>



    <case pos:start="55:5" pos:end="55:24">case <expr pos:start="55:10" pos:end="55:23"><name pos:start="55:10" pos:end="55:23">LM_IN_PROGRESS</name></expr>:</case> <block pos:start="55:26" pos:end="75:5">{<block_content pos:start="57:9" pos:end="73:14">

        <decl_stmt pos:start="57:9" pos:end="57:27"><decl pos:start="57:9" pos:end="57:26"><type pos:start="57:9" pos:end="57:23"><specifier pos:start="57:9" pos:end="57:13">const</specifier> <name pos:start="57:15" pos:end="57:21">QemuOpt</name> <modifier pos:start="57:23" pos:end="57:23">*</modifier></type><name pos:start="57:24" pos:end="57:26">opt</name></decl>;</decl_stmt>



        <expr_stmt pos:start="61:9" pos:end="61:50"><expr pos:start="61:9" pos:end="61:49"><name pos:start="61:9" pos:end="61:11">opt</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:49"><name pos:start="61:15" pos:end="61:30">g_queue_pop_head</name><argument_list pos:start="61:31" pos:end="61:49">(<argument pos:start="61:32" pos:end="61:48"><expr pos:start="61:32" pos:end="61:48"><name pos:start="61:32" pos:end="61:48"><name pos:start="61:32" pos:end="61:33">ov</name><operator pos:start="61:34" pos:end="61:35">-&gt;</operator><name pos:start="61:36" pos:end="61:48">repeated_opts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="69:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:48">(<expr pos:start="63:13" pos:end="63:47"><call pos:start="63:13" pos:end="63:47"><name pos:start="63:13" pos:end="63:28">g_queue_is_empty</name><argument_list pos:start="63:29" pos:end="63:47">(<argument pos:start="63:30" pos:end="63:46"><expr pos:start="63:30" pos:end="63:46"><name pos:start="63:30" pos:end="63:46"><name pos:start="63:30" pos:end="63:31">ov</name><operator pos:start="63:32" pos:end="63:33">-&gt;</operator><name pos:start="63:34" pos:end="63:46">repeated_opts</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:50" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:24">

            <expr_stmt pos:start="65:13" pos:end="65:65"><expr pos:start="65:13" pos:end="65:64"><call pos:start="65:13" pos:end="65:64"><name pos:start="65:13" pos:end="65:31">g_hash_table_remove</name><argument_list pos:start="65:32" pos:end="65:64">(<argument pos:start="65:33" pos:end="65:52"><expr pos:start="65:33" pos:end="65:52"><name pos:start="65:33" pos:end="65:52"><name pos:start="65:33" pos:end="65:34">ov</name><operator pos:start="65:35" pos:end="65:36">-&gt;</operator><name pos:start="65:37" pos:end="65:52">unprocessed_opts</name></name></expr></argument>, <argument pos:start="65:55" pos:end="65:63"><expr pos:start="65:55" pos:end="65:63"><name pos:start="65:55" pos:end="65:63"><name pos:start="65:55" pos:end="65:57">opt</name><operator pos:start="65:58" pos:end="65:59">-&gt;</operator><name pos:start="65:60" pos:end="65:63">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="67:13" pos:end="67:24">return <expr pos:start="67:20" pos:end="67:23"><name pos:start="67:20" pos:end="67:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:30"><expr pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:12">link</name> <operator pos:start="71:14" pos:end="71:14">=</operator> <operator pos:start="71:16" pos:end="71:16">&amp;</operator><name pos:start="71:17" pos:end="71:29"><operator pos:start="71:17" pos:end="71:17">(</operator><operator pos:start="71:18" pos:end="71:18">*</operator><name pos:start="71:19" pos:end="71:22">list</name><operator pos:start="71:23" pos:end="71:23">)</operator><operator pos:start="71:24" pos:end="71:25">-&gt;</operator><name pos:start="71:26" pos:end="71:29">next</name></name></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    </block_content>}</block>



    <default pos:start="79:5" pos:end="79:12">default:</default>

        <expr_stmt pos:start="81:9" pos:end="81:16"><expr pos:start="81:9" pos:end="81:15"><call pos:start="81:9" pos:end="81:15"><name pos:start="81:9" pos:end="81:13">abort</name><argument_list pos:start="81:14" pos:end="81:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <expr_stmt pos:start="87:5" pos:end="87:28"><expr pos:start="87:5" pos:end="87:27"><operator pos:start="87:5" pos:end="87:5">*</operator><name pos:start="87:6" pos:end="87:9">link</name> <operator pos:start="87:11" pos:end="87:11">=</operator> <call pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:21">g_malloc0</name><argument_list pos:start="87:22" pos:end="87:27">(<argument pos:start="87:23" pos:end="87:26"><expr pos:start="87:23" pos:end="87:26"><name pos:start="87:23" pos:end="87:26">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="89:5" pos:end="89:17">return <expr pos:start="89:12" pos:end="89:16"><operator pos:start="89:12" pos:end="89:12">*</operator><name pos:start="89:13" pos:end="89:16">link</name></expr>;</return>

</block_content>}</block>
</unit>
