<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/23716.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:7"><name pos:start="1:1" pos:end="1:7">ssize_t</name></type> <name pos:start="1:9" pos:end="1:19">nbd_wr_sync</name><parameter_list pos:start="1:20" pos:end="1:68">(<parameter pos:start="1:21" pos:end="1:26"><decl pos:start="1:21" pos:end="1:26"><type pos:start="1:21" pos:end="1:26"><name pos:start="1:21" pos:end="1:23">int</name></type> <name pos:start="1:25" pos:end="1:26">fd</name></decl></parameter>, <parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">buffer</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:53"><decl pos:start="1:43" pos:end="1:53"><type pos:start="1:43" pos:end="1:53"><name pos:start="1:43" pos:end="1:48">size_t</name></type> <name pos:start="1:50" pos:end="1:53">size</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:67"><decl pos:start="1:56" pos:end="1:67"><type pos:start="1:56" pos:end="1:67"><name pos:start="1:56" pos:end="1:59">bool</name></type> <name pos:start="1:61" pos:end="1:67">do_read</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:18">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">size_t</name></type> <name pos:start="5:12" pos:end="5:17">offset</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">err</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="23:5"><if pos:start="11:5" pos:end="23:5">if <condition pos:start="11:8" pos:end="11:28">(<expr pos:start="11:9" pos:end="11:27"><call pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:25">qemu_in_coroutine</name><argument_list pos:start="11:26" pos:end="11:27">()</argument_list></call></expr>)</condition> <block pos:start="11:30" pos:end="23:5">{<block_content pos:start="13:9" pos:end="21:9">

        <if_stmt pos:start="13:9" pos:end="21:9"><if pos:start="13:9" pos:end="17:9">if <condition pos:start="13:12" pos:end="13:20">(<expr pos:start="13:13" pos:end="13:19"><name pos:start="13:13" pos:end="13:19">do_read</name></expr>)</condition> <block pos:start="13:22" pos:end="17:9">{<block_content pos:start="15:13" pos:end="15:50">

            <return pos:start="15:13" pos:end="15:50">return <expr pos:start="15:20" pos:end="15:49"><call pos:start="15:20" pos:end="15:49"><name pos:start="15:20" pos:end="15:31">qemu_co_recv</name><argument_list pos:start="15:32" pos:end="15:49">(<argument pos:start="15:33" pos:end="15:34"><expr pos:start="15:33" pos:end="15:34"><name pos:start="15:33" pos:end="15:34">fd</name></expr></argument>, <argument pos:start="15:37" pos:end="15:42"><expr pos:start="15:37" pos:end="15:42"><name pos:start="15:37" pos:end="15:42">buffer</name></expr></argument>, <argument pos:start="15:45" pos:end="15:48"><expr pos:start="15:45" pos:end="15:48"><name pos:start="15:45" pos:end="15:48">size</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if> <else pos:start="17:11" pos:end="21:9">else <block pos:start="17:16" pos:end="21:9">{<block_content pos:start="19:13" pos:end="19:50">

            <return pos:start="19:13" pos:end="19:50">return <expr pos:start="19:20" pos:end="19:49"><call pos:start="19:20" pos:end="19:49"><name pos:start="19:20" pos:end="19:31">qemu_co_send</name><argument_list pos:start="19:32" pos:end="19:49">(<argument pos:start="19:33" pos:end="19:34"><expr pos:start="19:33" pos:end="19:34"><name pos:start="19:33" pos:end="19:34">fd</name></expr></argument>, <argument pos:start="19:37" pos:end="19:42"><expr pos:start="19:37" pos:end="19:42"><name pos:start="19:37" pos:end="19:42">buffer</name></expr></argument>, <argument pos:start="19:45" pos:end="19:48"><expr pos:start="19:45" pos:end="19:48"><name pos:start="19:45" pos:end="19:48">size</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="27:5" pos:end="81:5">while <condition pos:start="27:11" pos:end="27:25">(<expr pos:start="27:12" pos:end="27:24"><name pos:start="27:12" pos:end="27:17">offset</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:24">size</name></expr>)</condition> <block pos:start="27:27" pos:end="81:5">{<block_content pos:start="29:9" pos:end="79:22">

        <decl_stmt pos:start="29:9" pos:end="29:20"><decl pos:start="29:9" pos:end="29:19"><type pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:15">ssize_t</name></type> <name pos:start="29:17" pos:end="29:19">len</name></decl>;</decl_stmt>



        <if_stmt pos:start="33:9" pos:end="41:9"><if pos:start="33:9" pos:end="37:9">if <condition pos:start="33:12" pos:end="33:20">(<expr pos:start="33:13" pos:end="33:19"><name pos:start="33:13" pos:end="33:19">do_read</name></expr>)</condition> <block pos:start="33:22" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:67">

            <expr_stmt pos:start="35:13" pos:end="35:67"><expr pos:start="35:13" pos:end="35:66"><name pos:start="35:13" pos:end="35:15">len</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:66"><name pos:start="35:19" pos:end="35:27">qemu_recv</name><argument_list pos:start="35:28" pos:end="35:66">(<argument pos:start="35:29" pos:end="35:30"><expr pos:start="35:29" pos:end="35:30"><name pos:start="35:29" pos:end="35:30">fd</name></expr></argument>, <argument pos:start="35:33" pos:end="35:47"><expr pos:start="35:33" pos:end="35:47"><name pos:start="35:33" pos:end="35:38">buffer</name> <operator pos:start="35:40" pos:end="35:40">+</operator> <name pos:start="35:42" pos:end="35:47">offset</name></expr></argument>, <argument pos:start="35:50" pos:end="35:62"><expr pos:start="35:50" pos:end="35:62"><name pos:start="35:50" pos:end="35:53">size</name> <operator pos:start="35:55" pos:end="35:55">-</operator> <name pos:start="35:57" pos:end="35:62">offset</name></expr></argument>, <argument pos:start="35:65" pos:end="35:65"><expr pos:start="35:65" pos:end="35:65"><literal type="number" pos:start="35:65" pos:end="35:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="37:11" pos:end="41:9">else <block pos:start="37:16" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:62">

            <expr_stmt pos:start="39:13" pos:end="39:62"><expr pos:start="39:13" pos:end="39:61"><name pos:start="39:13" pos:end="39:15">len</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:61"><name pos:start="39:19" pos:end="39:22">send</name><argument_list pos:start="39:23" pos:end="39:61">(<argument pos:start="39:24" pos:end="39:25"><expr pos:start="39:24" pos:end="39:25"><name pos:start="39:24" pos:end="39:25">fd</name></expr></argument>, <argument pos:start="39:28" pos:end="39:42"><expr pos:start="39:28" pos:end="39:42"><name pos:start="39:28" pos:end="39:33">buffer</name> <operator pos:start="39:35" pos:end="39:35">+</operator> <name pos:start="39:37" pos:end="39:42">offset</name></expr></argument>, <argument pos:start="39:45" pos:end="39:57"><expr pos:start="39:45" pos:end="39:57"><name pos:start="39:45" pos:end="39:48">size</name> <operator pos:start="39:50" pos:end="39:50">-</operator> <name pos:start="39:52" pos:end="39:57">offset</name></expr></argument>, <argument pos:start="39:60" pos:end="39:60"><expr pos:start="39:60" pos:end="39:60"><literal type="number" pos:start="39:60" pos:end="39:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="45:9" pos:end="65:9"><if pos:start="45:9" pos:end="65:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:15">len</name> <operator pos:start="45:17" pos:end="45:17">&lt;</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="65:9">{<block_content pos:start="47:13" pos:end="63:24">

            <expr_stmt pos:start="47:13" pos:end="47:33"><expr pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:15">err</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:32"><name pos:start="47:19" pos:end="47:30">socket_error</name><argument_list pos:start="47:31" pos:end="47:32">()</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="51:13" pos:end="51:35">/* recoverable error */</comment>

            <if_stmt pos:start="53:13" pos:end="57:13"><if pos:start="53:13" pos:end="57:13">if <condition pos:start="53:16" pos:end="53:46">(<expr pos:start="53:17" pos:end="53:45"><name pos:start="53:17" pos:end="53:19">err</name> <operator pos:start="53:21" pos:end="53:22">==</operator> <name pos:start="53:24" pos:end="53:28">EINTR</name> <operator pos:start="53:30" pos:end="53:31">||</operator> <name pos:start="53:33" pos:end="53:35">err</name> <operator pos:start="53:37" pos:end="53:38">==</operator> <name pos:start="53:40" pos:end="53:45">EAGAIN</name></expr>)</condition> <block pos:start="53:48" pos:end="57:13">{<block_content pos:start="55:17" pos:end="55:25">

                <continue pos:start="55:17" pos:end="55:25">continue;</continue>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="61:13" pos:end="61:37">/* unrecoverable error */</comment>

            <return pos:start="63:13" pos:end="63:24">return <expr pos:start="63:20" pos:end="63:23"><operator pos:start="63:20" pos:end="63:20">-</operator><name pos:start="63:21" pos:end="63:23">err</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="69:9" pos:end="69:17">/* eof */</comment>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:21">(<expr pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:15">len</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <literal type="number" pos:start="71:20" pos:end="71:20">0</literal></expr>)</condition> <block pos:start="71:23" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:18">

            <break pos:start="73:13" pos:end="73:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="79:9" pos:end="79:22"><expr pos:start="79:9" pos:end="79:21"><name pos:start="79:9" pos:end="79:14">offset</name> <operator pos:start="79:16" pos:end="79:17">+=</operator> <name pos:start="79:19" pos:end="79:21">len</name></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="85:5" pos:end="85:18">return <expr pos:start="85:12" pos:end="85:17"><name pos:start="85:12" pos:end="85:17">offset</name></expr>;</return>

</block_content>}</block></function>
</unit>
