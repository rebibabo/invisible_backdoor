<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18745.c" pos:tabs="8"><function pos:start="1:1" pos:end="375:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">wav_read_header</name><parameter_list pos:start="1:27" pos:end="1:46">(<parameter pos:start="1:28" pos:end="1:45"><decl pos:start="1:28" pos:end="1:45"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:42">AVFormatContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="375:1">{<block_content pos:start="5:5" pos:end="373:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:11"><name pos:start="5:5" pos:end="5:11">int64_t</name></type> <name pos:start="5:13" pos:end="5:16">size</name></decl>, <decl pos:start="5:19" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:11"/><name pos:start="5:19" pos:end="5:27">av_uninit</name><argument_list pos:start="5:28" pos:end="5:38">(<argument pos:start="5:29" pos:end="5:37"><expr pos:start="5:29" pos:end="5:37"><name pos:start="5:29" pos:end="5:37">data_size</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">int64_t</name></type> <name pos:start="7:13" pos:end="7:24">sample_count</name> <init pos:start="7:26" pos:end="7:28">= <expr pos:start="7:28" pos:end="7:28"><literal type="number" pos:start="7:28" pos:end="7:28">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:13"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">rf64</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">tag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">AVIOContext</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:19">pb</name>      <init pos:start="13:26" pos:end="13:32">= <expr pos:start="13:28" pos:end="13:32"><name pos:start="13:28" pos:end="13:32"><name pos:start="13:28" pos:end="13:28">s</name><operator pos:start="13:29" pos:end="13:30">-&gt;</operator><name pos:start="13:31" pos:end="13:32">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:31"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:12">AVStream</name> <modifier pos:start="15:14" pos:end="15:14">*</modifier></type><name pos:start="15:15" pos:end="15:16">st</name>         <init pos:start="15:26" pos:end="15:31">= <expr pos:start="15:28" pos:end="15:31"><name pos:start="15:28" pos:end="15:31">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:40"><decl pos:start="17:5" pos:end="17:39"><type pos:start="17:5" pos:end="17:21"><name pos:start="17:5" pos:end="17:19">WAVDemuxContext</name> <modifier pos:start="17:21" pos:end="17:21">*</modifier></type><name pos:start="17:22" pos:end="17:24">wav</name> <init pos:start="17:26" pos:end="17:39">= <expr pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:39"><name pos:start="17:28" pos:end="17:28">s</name><operator pos:start="17:29" pos:end="17:30">-&gt;</operator><name pos:start="17:31" pos:end="17:39">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:11"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:11">ret</name></decl>, <decl pos:start="19:14" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:14" pos:end="19:20">got_fmt</name> <init pos:start="19:22" pos:end="19:24">= <expr pos:start="19:24" pos:end="19:24"><literal type="number" pos:start="19:24" pos:end="19:24">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:24">next_tag_ofs</name></decl>, <decl pos:start="21:27" pos:end="21:39"><type ref="prev" pos:start="21:5" pos:end="21:11"/><name pos:start="21:27" pos:end="21:34">data_ofs</name> <init pos:start="21:36" pos:end="21:39">= <expr pos:start="21:38" pos:end="21:39"><operator pos:start="21:38" pos:end="21:38">-</operator><literal type="number" pos:start="21:39" pos:end="21:39">1</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:42"><expr pos:start="25:5" pos:end="25:41"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:7">wav</name><operator pos:start="25:8" pos:end="25:9">-&gt;</operator><name pos:start="25:10" pos:end="25:18">unaligned</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <call pos:start="25:22" pos:end="25:37"><name pos:start="25:22" pos:end="25:30">avio_tell</name><argument_list pos:start="25:31" pos:end="25:37">(<argument pos:start="25:32" pos:end="25:36"><expr pos:start="25:32" pos:end="25:36"><name pos:start="25:32" pos:end="25:36"><name pos:start="25:32" pos:end="25:32">s</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:36">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="25:39" pos:end="25:39">&amp;</operator> <literal type="number" pos:start="25:41" pos:end="25:41">1</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:27"><expr pos:start="29:5" pos:end="29:26"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:7">wav</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:21">smv_data_ofs</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <operator pos:start="29:25" pos:end="29:25">-</operator><literal type="number" pos:start="29:26" pos:end="29:26">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:27">/* check RIFF header */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:24"><expr pos:start="35:5" pos:end="35:23"><name pos:start="35:5" pos:end="35:7">tag</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:23"><name pos:start="35:11" pos:end="35:19">avio_rl32</name><argument_list pos:start="35:20" pos:end="35:23">(<argument pos:start="35:21" pos:end="35:22"><expr pos:start="35:21" pos:end="35:22"><name pos:start="35:21" pos:end="35:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:44"><expr pos:start="39:5" pos:end="39:43"><name pos:start="39:5" pos:end="39:8">rf64</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <name pos:start="39:12" pos:end="39:14">tag</name> <operator pos:start="39:16" pos:end="39:17">==</operator> <call pos:start="39:19" pos:end="39:43"><name pos:start="39:19" pos:end="39:23">MKTAG</name><argument_list pos:start="39:24" pos:end="39:43">(<argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><literal type="char" pos:start="39:25" pos:end="39:27">'R'</literal></expr></argument>, <argument pos:start="39:30" pos:end="39:32"><expr pos:start="39:30" pos:end="39:32"><literal type="char" pos:start="39:30" pos:end="39:32">'F'</literal></expr></argument>, <argument pos:start="39:35" pos:end="39:37"><expr pos:start="39:35" pos:end="39:37"><literal type="char" pos:start="39:35" pos:end="39:37">'6'</literal></expr></argument>, <argument pos:start="39:40" pos:end="39:42"><expr pos:start="39:40" pos:end="39:42"><literal type="char" pos:start="39:40" pos:end="39:42">'4'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:49"><expr pos:start="41:5" pos:end="41:48"><name pos:start="41:5" pos:end="41:13"><name pos:start="41:5" pos:end="41:7">wav</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:13">rifx</name></name> <operator pos:start="41:15" pos:end="41:15">=</operator> <name pos:start="41:17" pos:end="41:19">tag</name> <operator pos:start="41:21" pos:end="41:22">==</operator> <call pos:start="41:24" pos:end="41:48"><name pos:start="41:24" pos:end="41:28">MKTAG</name><argument_list pos:start="41:29" pos:end="41:48">(<argument pos:start="41:30" pos:end="41:32"><expr pos:start="41:30" pos:end="41:32"><literal type="char" pos:start="41:30" pos:end="41:32">'R'</literal></expr></argument>, <argument pos:start="41:35" pos:end="41:37"><expr pos:start="41:35" pos:end="41:37"><literal type="char" pos:start="41:35" pos:end="41:37">'I'</literal></expr></argument>, <argument pos:start="41:40" pos:end="41:42"><expr pos:start="41:40" pos:end="41:42"><literal type="char" pos:start="41:40" pos:end="41:42">'F'</literal></expr></argument>, <argument pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><literal type="char" pos:start="41:45" pos:end="41:47">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="45:35"><if pos:start="43:5" pos:end="45:35">if <condition pos:start="43:8" pos:end="43:64">(<expr pos:start="43:9" pos:end="43:63"><operator pos:start="43:9" pos:end="43:9">!</operator><name pos:start="43:10" pos:end="43:13">rf64</name> <operator pos:start="43:15" pos:end="43:16">&amp;&amp;</operator> <operator pos:start="43:18" pos:end="43:18">!</operator><name pos:start="43:19" pos:end="43:27"><name pos:start="43:19" pos:end="43:21">wav</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:27">rifx</name></name> <operator pos:start="43:29" pos:end="43:30">&amp;&amp;</operator> <name pos:start="43:32" pos:end="43:34">tag</name> <operator pos:start="43:36" pos:end="43:37">!=</operator> <call pos:start="43:39" pos:end="43:63"><name pos:start="43:39" pos:end="43:43">MKTAG</name><argument_list pos:start="43:44" pos:end="43:63">(<argument pos:start="43:45" pos:end="43:47"><expr pos:start="43:45" pos:end="43:47"><literal type="char" pos:start="43:45" pos:end="43:47">'R'</literal></expr></argument>, <argument pos:start="43:50" pos:end="43:52"><expr pos:start="43:50" pos:end="43:52"><literal type="char" pos:start="43:50" pos:end="43:52">'I'</literal></expr></argument>, <argument pos:start="43:55" pos:end="43:57"><expr pos:start="43:55" pos:end="43:57"><literal type="char" pos:start="43:55" pos:end="43:57">'F'</literal></expr></argument>, <argument pos:start="43:60" pos:end="43:62"><expr pos:start="43:60" pos:end="43:62"><literal type="char" pos:start="43:60" pos:end="43:62">'F'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:9" pos:end="45:35"><block_content pos:start="45:9" pos:end="45:35">

        <return pos:start="45:9" pos:end="45:35">return <expr pos:start="45:16" pos:end="45:34"><name pos:start="45:16" pos:end="45:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:18"><expr pos:start="47:5" pos:end="47:17"><call pos:start="47:5" pos:end="47:17"><name pos:start="47:5" pos:end="47:13">avio_rl32</name><argument_list pos:start="47:14" pos:end="47:17">(<argument pos:start="47:15" pos:end="47:16"><expr pos:start="47:15" pos:end="47:16"><name pos:start="47:15" pos:end="47:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:20" pos:end="47:34">/* file size */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:24"><expr pos:start="49:5" pos:end="49:23"><name pos:start="49:5" pos:end="49:7">tag</name> <operator pos:start="49:9" pos:end="49:9">=</operator> <call pos:start="49:11" pos:end="49:23"><name pos:start="49:11" pos:end="49:19">avio_rl32</name><argument_list pos:start="49:20" pos:end="49:23">(<argument pos:start="49:21" pos:end="49:22"><expr pos:start="49:21" pos:end="49:22"><name pos:start="49:21" pos:end="49:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="51:5" pos:end="53:35"><if pos:start="51:5" pos:end="53:35">if <condition pos:start="51:8" pos:end="51:41">(<expr pos:start="51:9" pos:end="51:40"><name pos:start="51:9" pos:end="51:11">tag</name> <operator pos:start="51:13" pos:end="51:14">!=</operator> <call pos:start="51:16" pos:end="51:40"><name pos:start="51:16" pos:end="51:20">MKTAG</name><argument_list pos:start="51:21" pos:end="51:40">(<argument pos:start="51:22" pos:end="51:24"><expr pos:start="51:22" pos:end="51:24"><literal type="char" pos:start="51:22" pos:end="51:24">'W'</literal></expr></argument>, <argument pos:start="51:27" pos:end="51:29"><expr pos:start="51:27" pos:end="51:29"><literal type="char" pos:start="51:27" pos:end="51:29">'A'</literal></expr></argument>, <argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><literal type="char" pos:start="51:32" pos:end="51:34">'V'</literal></expr></argument>, <argument pos:start="51:37" pos:end="51:39"><expr pos:start="51:37" pos:end="51:39"><literal type="char" pos:start="51:37" pos:end="51:39">'E'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:35"><block_content pos:start="53:9" pos:end="53:35">

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="95:5"><if pos:start="57:5" pos:end="95:5">if <condition pos:start="57:8" pos:end="57:13">(<expr pos:start="57:9" pos:end="57:12"><name pos:start="57:9" pos:end="57:12">rf64</name></expr>)</condition> <block pos:start="57:15" pos:end="95:5">{<block_content pos:start="59:9" pos:end="91:33">

        <if_stmt pos:start="59:9" pos:end="61:39"><if pos:start="59:9" pos:end="61:39">if <condition pos:start="59:12" pos:end="59:55">(<expr pos:start="59:13" pos:end="59:54"><call pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:21">avio_rl32</name><argument_list pos:start="59:22" pos:end="59:25">(<argument pos:start="59:23" pos:end="59:24"><expr pos:start="59:23" pos:end="59:24"><name pos:start="59:23" pos:end="59:24">pb</name></expr></argument>)</argument_list></call> <operator pos:start="59:27" pos:end="59:28">!=</operator> <call pos:start="59:30" pos:end="59:54"><name pos:start="59:30" pos:end="59:34">MKTAG</name><argument_list pos:start="59:35" pos:end="59:54">(<argument pos:start="59:36" pos:end="59:38"><expr pos:start="59:36" pos:end="59:38"><literal type="char" pos:start="59:36" pos:end="59:38">'d'</literal></expr></argument>, <argument pos:start="59:41" pos:end="59:43"><expr pos:start="59:41" pos:end="59:43"><literal type="char" pos:start="59:41" pos:end="59:43">'s'</literal></expr></argument>, <argument pos:start="59:46" pos:end="59:48"><expr pos:start="59:46" pos:end="59:48"><literal type="char" pos:start="59:46" pos:end="59:48">'6'</literal></expr></argument>, <argument pos:start="59:51" pos:end="59:53"><expr pos:start="59:51" pos:end="59:53"><literal type="char" pos:start="59:51" pos:end="59:53">'4'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:39"><block_content pos:start="61:13" pos:end="61:39">

            <return pos:start="61:13" pos:end="61:39">return <expr pos:start="61:20" pos:end="61:38"><name pos:start="61:20" pos:end="61:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:29"><expr pos:start="63:9" pos:end="63:28"><name pos:start="63:9" pos:end="63:12">size</name> <operator pos:start="63:14" pos:end="63:14">=</operator> <call pos:start="63:16" pos:end="63:28"><name pos:start="63:16" pos:end="63:24">avio_rl32</name><argument_list pos:start="63:25" pos:end="63:28">(<argument pos:start="63:26" pos:end="63:27"><expr pos:start="63:26" pos:end="63:27"><name pos:start="63:26" pos:end="63:27">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="67:39"><if pos:start="65:9" pos:end="67:39">if <condition pos:start="65:12" pos:end="65:22">(<expr pos:start="65:13" pos:end="65:21"><name pos:start="65:13" pos:end="65:16">size</name> <operator pos:start="65:18" pos:end="65:18">&lt;</operator> <literal type="number" pos:start="65:20" pos:end="65:21">24</literal></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:39"><block_content pos:start="67:13" pos:end="67:39">

            <return pos:start="67:13" pos:end="67:39">return <expr pos:start="67:20" pos:end="67:38"><name pos:start="67:20" pos:end="67:38">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:22"><expr pos:start="69:9" pos:end="69:21"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:17">avio_rl64</name><argument_list pos:start="69:18" pos:end="69:21">(<argument pos:start="69:19" pos:end="69:20"><expr pos:start="69:19" pos:end="69:20"><name pos:start="69:19" pos:end="69:20">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="69:24" pos:end="69:38">/* RIFF size */</comment>



        <expr_stmt pos:start="73:9" pos:end="73:37"><expr pos:start="73:9" pos:end="73:36"><name pos:start="73:9" pos:end="73:17">data_size</name>    <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:36"><name pos:start="73:24" pos:end="73:32">avio_rl64</name><argument_list pos:start="73:33" pos:end="73:36">(<argument pos:start="73:34" pos:end="73:35"><expr pos:start="73:34" pos:end="73:35"><name pos:start="73:34" pos:end="73:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:37"><expr pos:start="75:9" pos:end="75:36"><name pos:start="75:9" pos:end="75:20">sample_count</name> <operator pos:start="75:22" pos:end="75:22">=</operator> <call pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:32">avio_rl64</name><argument_list pos:start="75:33" pos:end="75:36">(<argument pos:start="75:34" pos:end="75:35"><expr pos:start="75:34" pos:end="75:35"><name pos:start="75:34" pos:end="75:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="89:9">if <condition pos:start="79:12" pos:end="79:46">(<expr pos:start="79:13" pos:end="79:45"><name pos:start="79:13" pos:end="79:21">data_size</name> <operator pos:start="79:23" pos:end="79:23">&lt;</operator> <literal type="number" pos:start="79:25" pos:end="79:25">0</literal> <operator pos:start="79:27" pos:end="79:28">||</operator> <name pos:start="79:30" pos:end="79:41">sample_count</name> <operator pos:start="79:43" pos:end="79:43">&lt;</operator> <literal type="number" pos:start="79:45" pos:end="79:45">0</literal></expr>)</condition> <block pos:start="79:48" pos:end="89:9">{<block_content pos:start="81:13" pos:end="87:39">

            <expr_stmt pos:start="81:13" pos:end="85:44"><expr pos:start="81:13" pos:end="85:43"><call pos:start="81:13" pos:end="85:43"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="85:43">(<argument pos:start="81:20" pos:end="81:20"><expr pos:start="81:20" pos:end="81:20"><name pos:start="81:20" pos:end="81:20">s</name></expr></argument>, <argument pos:start="81:23" pos:end="81:34"><expr pos:start="81:23" pos:end="81:34"><name pos:start="81:23" pos:end="81:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="81:37" pos:end="83:76"><expr pos:start="81:37" pos:end="83:76"><literal type="string" pos:start="81:37" pos:end="81:80">"negative data_size and/or sample_count in "</literal>

                   <literal type="string" pos:start="83:20" pos:end="83:40">"ds64: data_size = %"</literal><name pos:start="83:41" pos:end="83:46">PRId64</name><literal type="string" pos:start="83:47" pos:end="83:66">", sample_count = %"</literal><name pos:start="83:67" pos:end="83:72">PRId64</name><literal type="string" pos:start="83:73" pos:end="83:76">"\n"</literal></expr></argument>,

                   <argument pos:start="85:20" pos:end="85:28"><expr pos:start="85:20" pos:end="85:28"><name pos:start="85:20" pos:end="85:28">data_size</name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:42">sample_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="87:13" pos:end="87:39">return <expr pos:start="87:20" pos:end="87:38"><name pos:start="87:20" pos:end="87:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:33"><expr pos:start="91:9" pos:end="91:32"><call pos:start="91:9" pos:end="91:32"><name pos:start="91:9" pos:end="91:17">avio_skip</name><argument_list pos:start="91:18" pos:end="91:32">(<argument pos:start="91:19" pos:end="91:20"><expr pos:start="91:19" pos:end="91:20"><name pos:start="91:19" pos:end="91:20">pb</name></expr></argument>, <argument pos:start="91:23" pos:end="91:31"><expr pos:start="91:23" pos:end="91:31"><name pos:start="91:23" pos:end="91:26">size</name> <operator pos:start="91:28" pos:end="91:28">-</operator> <literal type="number" pos:start="91:30" pos:end="91:31">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="91:35" pos:end="91:63">/* skip rest of ds64 chunk */</comment>



    </block_content>}</block></if></if_stmt>



    <for pos:start="99:5" pos:end="311:5">for <control pos:start="99:9" pos:end="99:12">(<init pos:start="99:10" pos:end="99:10">;</init><condition pos:start="99:11" pos:end="99:11">;</condition><incr/>)</control> <block pos:start="99:14" pos:end="311:5">{<block_content pos:start="101:9" pos:end="309:9">

        <decl_stmt pos:start="101:9" pos:end="101:22"><decl pos:start="101:9" pos:end="101:21"><type pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:16">AVStream</name> <modifier pos:start="101:18" pos:end="101:18">*</modifier></type><name pos:start="101:19" pos:end="101:21">vst</name></decl>;</decl_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:53"><expr pos:start="103:9" pos:end="103:52"><name pos:start="103:9" pos:end="103:12">size</name>         <operator pos:start="103:22" pos:end="103:22">=</operator> <call pos:start="103:24" pos:end="103:52"><name pos:start="103:24" pos:end="103:31">next_tag</name><argument_list pos:start="103:32" pos:end="103:52">(<argument pos:start="103:33" pos:end="103:34"><expr pos:start="103:33" pos:end="103:34"><name pos:start="103:33" pos:end="103:34">pb</name></expr></argument>, <argument pos:start="103:37" pos:end="103:40"><expr pos:start="103:37" pos:end="103:40"><operator pos:start="103:37" pos:end="103:37">&amp;</operator><name pos:start="103:38" pos:end="103:40">tag</name></expr></argument>, <argument pos:start="103:43" pos:end="103:51"><expr pos:start="103:43" pos:end="103:51"><name pos:start="103:43" pos:end="103:51"><name pos:start="103:43" pos:end="103:45">wav</name><operator pos:start="103:46" pos:end="103:47">-&gt;</operator><name pos:start="103:48" pos:end="103:51">rifx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:44"><expr pos:start="105:9" pos:end="105:43"><name pos:start="105:9" pos:end="105:20">next_tag_ofs</name> <operator pos:start="105:22" pos:end="105:22">=</operator> <call pos:start="105:24" pos:end="105:36"><name pos:start="105:24" pos:end="105:32">avio_tell</name><argument_list pos:start="105:33" pos:end="105:36">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">pb</name></expr></argument>)</argument_list></call> <operator pos:start="105:38" pos:end="105:38">+</operator> <name pos:start="105:40" pos:end="105:43">size</name></expr>;</expr_stmt>



        <if_stmt pos:start="109:9" pos:end="111:18"><if pos:start="109:9" pos:end="111:18">if <condition pos:start="109:12" pos:end="109:26">(<expr pos:start="109:13" pos:end="109:25"><call pos:start="109:13" pos:end="109:25"><name pos:start="109:13" pos:end="109:21">avio_feof</name><argument_list pos:start="109:22" pos:end="109:25">(<argument pos:start="109:23" pos:end="109:24"><expr pos:start="109:23" pos:end="109:24"><name pos:start="109:23" pos:end="109:24">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="111:13" pos:end="111:18"><block_content pos:start="111:13" pos:end="111:18">

            <break pos:start="111:13" pos:end="111:18">break;</break></block_content></block></if></if_stmt>



        <switch pos:start="115:9" pos:end="297:9">switch <condition pos:start="115:16" pos:end="115:20">(<expr pos:start="115:17" pos:end="115:19"><name pos:start="115:17" pos:end="115:19">tag</name></expr>)</condition> <block pos:start="115:22" pos:end="297:9">{<block_content pos:start="117:9" pos:end="295:18">

        <case pos:start="117:9" pos:end="117:39">case <expr pos:start="117:14" pos:end="117:38"><call pos:start="117:14" pos:end="117:38"><name pos:start="117:14" pos:end="117:18">MKTAG</name><argument_list pos:start="117:19" pos:end="117:38">(<argument pos:start="117:20" pos:end="117:22"><expr pos:start="117:20" pos:end="117:22"><literal type="char" pos:start="117:20" pos:end="117:22">'f'</literal></expr></argument>, <argument pos:start="117:25" pos:end="117:27"><expr pos:start="117:25" pos:end="117:27"><literal type="char" pos:start="117:25" pos:end="117:27">'m'</literal></expr></argument>, <argument pos:start="117:30" pos:end="117:32"><expr pos:start="117:30" pos:end="117:32"><literal type="char" pos:start="117:30" pos:end="117:32">'t'</literal></expr></argument>, <argument pos:start="117:35" pos:end="117:37"><expr pos:start="117:35" pos:end="117:37"><literal type="char" pos:start="117:35" pos:end="117:37">' '</literal></expr></argument>)</argument_list></call></expr>:</case>

            <comment type="block" pos:start="119:13" pos:end="119:55">/* only parse the first 'fmt ' tag found */</comment>

            <if_stmt pos:start="121:13" pos:end="127:78"><if pos:start="121:13" pos:end="125:13">if <condition pos:start="121:16" pos:end="121:72">(<expr pos:start="121:17" pos:end="121:71"><operator pos:start="121:17" pos:end="121:17">!</operator><name pos:start="121:18" pos:end="121:24">got_fmt</name> <operator pos:start="121:26" pos:end="121:27">&amp;&amp;</operator> <operator pos:start="121:29" pos:end="121:29">(</operator><name pos:start="121:30" pos:end="121:32">ret</name> <operator pos:start="121:34" pos:end="121:34">=</operator> <call pos:start="121:36" pos:end="121:66"><name pos:start="121:36" pos:end="121:52">wav_parse_fmt_tag</name><argument_list pos:start="121:53" pos:end="121:66">(<argument pos:start="121:54" pos:end="121:54"><expr pos:start="121:54" pos:end="121:54"><name pos:start="121:54" pos:end="121:54">s</name></expr></argument>, <argument pos:start="121:57" pos:end="121:60"><expr pos:start="121:57" pos:end="121:60"><name pos:start="121:57" pos:end="121:60">size</name></expr></argument>, <argument pos:start="121:63" pos:end="121:65"><expr pos:start="121:63" pos:end="121:65"><operator pos:start="121:63" pos:end="121:63">&amp;</operator><name pos:start="121:64" pos:end="121:65">st</name></expr></argument>)</argument_list></call><operator pos:start="121:67" pos:end="121:67">)</operator> <operator pos:start="121:69" pos:end="121:69">&lt;</operator> <literal type="number" pos:start="121:71" pos:end="121:71">0</literal></expr>)</condition> <block pos:start="121:74" pos:end="125:13">{<block_content pos:start="123:17" pos:end="123:27">

                <return pos:start="123:17" pos:end="123:27">return <expr pos:start="123:24" pos:end="123:26"><name pos:start="123:24" pos:end="123:26">ret</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="125:15" pos:end="127:78">else if <condition pos:start="125:23" pos:end="125:31">(<expr pos:start="125:24" pos:end="125:30"><name pos:start="125:24" pos:end="125:30">got_fmt</name></expr>)</condition><block type="pseudo" pos:start="127:17" pos:end="127:78"><block_content pos:start="127:17" pos:end="127:78">

                <expr_stmt pos:start="127:17" pos:end="127:78"><expr pos:start="127:17" pos:end="127:77"><call pos:start="127:17" pos:end="127:77"><name pos:start="127:17" pos:end="127:22">av_log</name><argument_list pos:start="127:23" pos:end="127:77">(<argument pos:start="127:24" pos:end="127:24"><expr pos:start="127:24" pos:end="127:24"><name pos:start="127:24" pos:end="127:24">s</name></expr></argument>, <argument pos:start="127:27" pos:end="127:40"><expr pos:start="127:27" pos:end="127:40"><name pos:start="127:27" pos:end="127:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="127:43" pos:end="127:76"><expr pos:start="127:43" pos:end="127:76"><literal type="string" pos:start="127:43" pos:end="127:76">"found more than one 'fmt ' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <expr_stmt pos:start="131:13" pos:end="131:24"><expr pos:start="131:13" pos:end="131:23"><name pos:start="131:13" pos:end="131:19">got_fmt</name> <operator pos:start="131:21" pos:end="131:21">=</operator> <literal type="number" pos:start="131:23" pos:end="131:23">1</literal></expr>;</expr_stmt>

            <break pos:start="133:13" pos:end="133:18">break;</break>

        <case pos:start="135:9" pos:end="135:39">case <expr pos:start="135:14" pos:end="135:38"><call pos:start="135:14" pos:end="135:38"><name pos:start="135:14" pos:end="135:18">MKTAG</name><argument_list pos:start="135:19" pos:end="135:38">(<argument pos:start="135:20" pos:end="135:22"><expr pos:start="135:20" pos:end="135:22"><literal type="char" pos:start="135:20" pos:end="135:22">'d'</literal></expr></argument>, <argument pos:start="135:25" pos:end="135:27"><expr pos:start="135:25" pos:end="135:27"><literal type="char" pos:start="135:25" pos:end="135:27">'a'</literal></expr></argument>, <argument pos:start="135:30" pos:end="135:32"><expr pos:start="135:30" pos:end="135:32"><literal type="char" pos:start="135:30" pos:end="135:32">'t'</literal></expr></argument>, <argument pos:start="135:35" pos:end="135:37"><expr pos:start="135:35" pos:end="135:37"><literal type="char" pos:start="135:35" pos:end="135:37">'a'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="137:13" pos:end="145:13"><if pos:start="137:13" pos:end="145:13">if <condition pos:start="137:16" pos:end="137:25">(<expr pos:start="137:17" pos:end="137:24"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:24">got_fmt</name></expr>)</condition> <block pos:start="137:27" pos:end="145:13">{<block_content pos:start="139:17" pos:end="143:43">

                <expr_stmt pos:start="139:17" pos:end="141:70"><expr pos:start="139:17" pos:end="141:69"><call pos:start="139:17" pos:end="141:69"><name pos:start="139:17" pos:end="139:22">av_log</name><argument_list pos:start="139:23" pos:end="141:69">(<argument pos:start="139:24" pos:end="139:24"><expr pos:start="139:24" pos:end="139:24"><name pos:start="139:24" pos:end="139:24">s</name></expr></argument>, <argument pos:start="139:27" pos:end="139:38"><expr pos:start="139:27" pos:end="139:38"><name pos:start="139:27" pos:end="139:38">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="141:24" pos:end="141:68"><expr pos:start="141:24" pos:end="141:68"><literal type="string" pos:start="141:24" pos:end="141:68">"found no 'fmt ' tag before the 'data' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="143:17" pos:end="143:43">return <expr pos:start="143:24" pos:end="143:42"><name pos:start="143:24" pos:end="143:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="149:13" pos:end="159:13"><if pos:start="149:13" pos:end="153:13">if <condition pos:start="149:16" pos:end="149:21">(<expr pos:start="149:17" pos:end="149:20"><name pos:start="149:17" pos:end="149:20">rf64</name></expr>)</condition> <block pos:start="149:23" pos:end="153:13">{<block_content pos:start="151:17" pos:end="151:73">

                <expr_stmt pos:start="151:17" pos:end="151:73"><expr pos:start="151:17" pos:end="151:72"><name pos:start="151:17" pos:end="151:28">next_tag_ofs</name> <operator pos:start="151:30" pos:end="151:30">=</operator> <name pos:start="151:32" pos:end="151:44"><name pos:start="151:32" pos:end="151:34">wav</name><operator pos:start="151:35" pos:end="151:36">-&gt;</operator><name pos:start="151:37" pos:end="151:44">data_end</name></name> <operator pos:start="151:46" pos:end="151:46">=</operator> <call pos:start="151:48" pos:end="151:60"><name pos:start="151:48" pos:end="151:56">avio_tell</name><argument_list pos:start="151:57" pos:end="151:60">(<argument pos:start="151:58" pos:end="151:59"><expr pos:start="151:58" pos:end="151:59"><name pos:start="151:58" pos:end="151:59">pb</name></expr></argument>)</argument_list></call> <operator pos:start="151:62" pos:end="151:62">+</operator> <name pos:start="151:64" pos:end="151:72">data_size</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="153:15" pos:end="159:13">else <block pos:start="153:20" pos:end="159:13">{<block_content pos:start="155:17" pos:end="157:79">

                <expr_stmt pos:start="155:17" pos:end="155:36"><expr pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:25">data_size</name>    <operator pos:start="155:30" pos:end="155:30">=</operator> <name pos:start="155:32" pos:end="155:35">size</name></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:79"><expr pos:start="157:17" pos:end="157:78"><name pos:start="157:17" pos:end="157:28">next_tag_ofs</name> <operator pos:start="157:30" pos:end="157:30">=</operator> <name pos:start="157:32" pos:end="157:44"><name pos:start="157:32" pos:end="157:34">wav</name><operator pos:start="157:35" pos:end="157:36">-&gt;</operator><name pos:start="157:37" pos:end="157:44">data_end</name></name> <operator pos:start="157:46" pos:end="157:46">=</operator> <ternary pos:start="157:48" pos:end="157:78"><condition pos:start="157:48" pos:end="157:53"><expr pos:start="157:48" pos:end="157:51"><name pos:start="157:48" pos:end="157:51">size</name></expr> ?</condition><then pos:start="157:55" pos:end="157:66"> <expr pos:start="157:55" pos:end="157:66"><name pos:start="157:55" pos:end="157:66">next_tag_ofs</name></expr> </then><else pos:start="157:68" pos:end="157:78">: <expr pos:start="157:70" pos:end="157:78"><name pos:start="157:70" pos:end="157:78">INT64_MAX</name></expr></else></ternary></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <expr_stmt pos:start="163:13" pos:end="163:37"><expr pos:start="163:13" pos:end="163:36"><name pos:start="163:13" pos:end="163:20">data_ofs</name> <operator pos:start="163:22" pos:end="163:22">=</operator> <call pos:start="163:24" pos:end="163:36"><name pos:start="163:24" pos:end="163:32">avio_tell</name><argument_list pos:start="163:33" pos:end="163:36">(<argument pos:start="163:34" pos:end="163:35"><expr pos:start="163:34" pos:end="163:35"><name pos:start="163:34" pos:end="163:35">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="167:13" pos:end="171:15">/* don't look for footer metadata if we can't seek or if we don't

             * know where the data tag ends

             */</comment>

            <if_stmt pos:start="173:13" pos:end="175:32"><if pos:start="173:13" pos:end="175:32">if <condition pos:start="173:16" pos:end="173:50">(<expr pos:start="173:17" pos:end="173:49"><operator pos:start="173:17" pos:end="173:17">!</operator><name pos:start="173:18" pos:end="173:29"><name pos:start="173:18" pos:end="173:19">pb</name><operator pos:start="173:20" pos:end="173:21">-&gt;</operator><name pos:start="173:22" pos:end="173:29">seekable</name></name> <operator pos:start="173:31" pos:end="173:32">||</operator> <operator pos:start="173:34" pos:end="173:34">(</operator><operator pos:start="173:35" pos:end="173:35">!</operator><name pos:start="173:36" pos:end="173:39">rf64</name> <operator pos:start="173:41" pos:end="173:42">&amp;&amp;</operator> <operator pos:start="173:44" pos:end="173:44">!</operator><name pos:start="173:45" pos:end="173:48">size</name><operator pos:start="173:49" pos:end="173:49">)</operator></expr>)</condition><block type="pseudo" pos:start="175:17" pos:end="175:32"><block_content pos:start="175:17" pos:end="175:32">

                <goto pos:start="175:17" pos:end="175:32">goto <name pos:start="175:22" pos:end="175:31">break_loop</name>;</goto></block_content></block></if></if_stmt>

            <break pos:start="177:13" pos:end="177:18">break;</break>

        <case pos:start="179:9" pos:end="179:39">case <expr pos:start="179:14" pos:end="179:38"><call pos:start="179:14" pos:end="179:38"><name pos:start="179:14" pos:end="179:18">MKTAG</name><argument_list pos:start="179:19" pos:end="179:38">(<argument pos:start="179:20" pos:end="179:22"><expr pos:start="179:20" pos:end="179:22"><literal type="char" pos:start="179:20" pos:end="179:22">'f'</literal></expr></argument>, <argument pos:start="179:25" pos:end="179:27"><expr pos:start="179:25" pos:end="179:27"><literal type="char" pos:start="179:25" pos:end="179:27">'a'</literal></expr></argument>, <argument pos:start="179:30" pos:end="179:32"><expr pos:start="179:30" pos:end="179:32"><literal type="char" pos:start="179:30" pos:end="179:32">'c'</literal></expr></argument>, <argument pos:start="179:35" pos:end="179:37"><expr pos:start="179:35" pos:end="179:37"><literal type="char" pos:start="179:35" pos:end="179:37">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="181:13" pos:end="183:76"><if pos:start="181:13" pos:end="183:76">if <condition pos:start="181:16" pos:end="181:30">(<expr pos:start="181:17" pos:end="181:29"><operator pos:start="181:17" pos:end="181:17">!</operator><name pos:start="181:18" pos:end="181:29">sample_count</name></expr>)</condition><block type="pseudo" pos:start="183:17" pos:end="183:76"><block_content pos:start="183:17" pos:end="183:76">

                <expr_stmt pos:start="183:17" pos:end="183:76"><expr pos:start="183:17" pos:end="183:75"><name pos:start="183:17" pos:end="183:28">sample_count</name> <operator pos:start="183:30" pos:end="183:30">=</operator> <operator pos:start="183:32" pos:end="183:32">(</operator><ternary pos:start="183:33" pos:end="183:74"><condition pos:start="183:33" pos:end="183:44"><expr pos:start="183:33" pos:end="183:42"><operator pos:start="183:33" pos:end="183:33">!</operator><name pos:start="183:34" pos:end="183:42"><name pos:start="183:34" pos:end="183:36">wav</name><operator pos:start="183:37" pos:end="183:38">-&gt;</operator><name pos:start="183:39" pos:end="183:42">rifx</name></name></expr> ?</condition><then pos:start="183:46" pos:end="183:58"> <expr pos:start="183:46" pos:end="183:58"><call pos:start="183:46" pos:end="183:58"><name pos:start="183:46" pos:end="183:54">avio_rl32</name><argument_list pos:start="183:55" pos:end="183:58">(<argument pos:start="183:56" pos:end="183:57"><expr pos:start="183:56" pos:end="183:57"><name pos:start="183:56" pos:end="183:57">pb</name></expr></argument>)</argument_list></call></expr> </then><else pos:start="183:60" pos:end="183:74">: <expr pos:start="183:62" pos:end="183:74"><call pos:start="183:62" pos:end="183:74"><name pos:start="183:62" pos:end="183:70">avio_rb32</name><argument_list pos:start="183:71" pos:end="183:74">(<argument pos:start="183:72" pos:end="183:73"><expr pos:start="183:72" pos:end="183:73"><name pos:start="183:72" pos:end="183:73">pb</name></expr></argument>)</argument_list></call></expr></else></ternary><operator pos:start="183:75" pos:end="183:75">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <break pos:start="185:13" pos:end="185:18">break;</break>

        <case pos:start="187:9" pos:end="187:39">case <expr pos:start="187:14" pos:end="187:38"><call pos:start="187:14" pos:end="187:38"><name pos:start="187:14" pos:end="187:18">MKTAG</name><argument_list pos:start="187:19" pos:end="187:38">(<argument pos:start="187:20" pos:end="187:22"><expr pos:start="187:20" pos:end="187:22"><literal type="char" pos:start="187:20" pos:end="187:22">'b'</literal></expr></argument>, <argument pos:start="187:25" pos:end="187:27"><expr pos:start="187:25" pos:end="187:27"><literal type="char" pos:start="187:25" pos:end="187:27">'e'</literal></expr></argument>, <argument pos:start="187:30" pos:end="187:32"><expr pos:start="187:30" pos:end="187:32"><literal type="char" pos:start="187:30" pos:end="187:32">'x'</literal></expr></argument>, <argument pos:start="187:35" pos:end="187:37"><expr pos:start="187:35" pos:end="187:37"><literal type="char" pos:start="187:35" pos:end="187:37">'t'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="189:13" pos:end="191:27"><if pos:start="189:13" pos:end="191:27">if <condition pos:start="189:16" pos:end="189:56">(<expr pos:start="189:17" pos:end="189:55"><operator pos:start="189:17" pos:end="189:17">(</operator><name pos:start="189:18" pos:end="189:20">ret</name> <operator pos:start="189:22" pos:end="189:22">=</operator> <call pos:start="189:24" pos:end="189:50"><name pos:start="189:24" pos:end="189:41">wav_parse_bext_tag</name><argument_list pos:start="189:42" pos:end="189:50">(<argument pos:start="189:43" pos:end="189:43"><expr pos:start="189:43" pos:end="189:43"><name pos:start="189:43" pos:end="189:43">s</name></expr></argument>, <argument pos:start="189:46" pos:end="189:49"><expr pos:start="189:46" pos:end="189:49"><name pos:start="189:46" pos:end="189:49">size</name></expr></argument>)</argument_list></call><operator pos:start="189:51" pos:end="189:51">)</operator> <operator pos:start="189:53" pos:end="189:53">&lt;</operator> <literal type="number" pos:start="189:55" pos:end="189:55">0</literal></expr>)</condition><block type="pseudo" pos:start="191:17" pos:end="191:27"><block_content pos:start="191:17" pos:end="191:27">

                <return pos:start="191:17" pos:end="191:27">return <expr pos:start="191:24" pos:end="191:26"><name pos:start="191:24" pos:end="191:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <break pos:start="193:13" pos:end="193:18">break;</break>

        <case pos:start="195:9" pos:end="195:36">case <expr pos:start="195:14" pos:end="195:35"><call pos:start="195:14" pos:end="195:35"><name pos:start="195:14" pos:end="195:18">MKTAG</name><argument_list pos:start="195:19" pos:end="195:35">(<argument pos:start="195:20" pos:end="195:22"><expr pos:start="195:20" pos:end="195:22"><literal type="char" pos:start="195:20" pos:end="195:22">'S'</literal></expr></argument>,<argument pos:start="195:24" pos:end="195:26"><expr pos:start="195:24" pos:end="195:26"><literal type="char" pos:start="195:24" pos:end="195:26">'M'</literal></expr></argument>,<argument pos:start="195:28" pos:end="195:30"><expr pos:start="195:28" pos:end="195:30"><literal type="char" pos:start="195:28" pos:end="195:30">'V'</literal></expr></argument>,<argument pos:start="195:32" pos:end="195:34"><expr pos:start="195:32" pos:end="195:34"><literal type="char" pos:start="195:32" pos:end="195:34">'0'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="197:13" pos:end="203:13"><if pos:start="197:13" pos:end="203:13">if <condition pos:start="197:16" pos:end="197:25">(<expr pos:start="197:17" pos:end="197:24"><operator pos:start="197:17" pos:end="197:17">!</operator><name pos:start="197:18" pos:end="197:24">got_fmt</name></expr>)</condition> <block pos:start="197:27" pos:end="203:13">{<block_content pos:start="199:17" pos:end="201:43">

                <expr_stmt pos:start="199:17" pos:end="199:87"><expr pos:start="199:17" pos:end="199:86"><call pos:start="199:17" pos:end="199:86"><name pos:start="199:17" pos:end="199:22">av_log</name><argument_list pos:start="199:23" pos:end="199:86">(<argument pos:start="199:24" pos:end="199:24"><expr pos:start="199:24" pos:end="199:24"><name pos:start="199:24" pos:end="199:24">s</name></expr></argument>, <argument pos:start="199:27" pos:end="199:38"><expr pos:start="199:27" pos:end="199:38"><name pos:start="199:27" pos:end="199:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="199:41" pos:end="199:85"><expr pos:start="199:41" pos:end="199:85"><literal type="string" pos:start="199:41" pos:end="199:85">"found no 'fmt ' tag before the 'SMV0' tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="201:17" pos:end="201:43">return <expr pos:start="201:24" pos:end="201:42"><name pos:start="201:24" pos:end="201:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="205:13" pos:end="205:56">// SMV file, a wav file with video appended.</comment>

            <if_stmt pos:start="207:13" pos:end="213:13"><if pos:start="207:13" pos:end="213:13">if <condition pos:start="207:16" pos:end="207:47">(<expr pos:start="207:17" pos:end="207:46"><name pos:start="207:17" pos:end="207:20">size</name> <operator pos:start="207:22" pos:end="207:23">!=</operator> <call pos:start="207:25" pos:end="207:46"><name pos:start="207:25" pos:end="207:29">MKTAG</name><argument_list pos:start="207:30" pos:end="207:46">(<argument pos:start="207:31" pos:end="207:33"><expr pos:start="207:31" pos:end="207:33"><literal type="char" pos:start="207:31" pos:end="207:33">'0'</literal></expr></argument>,<argument pos:start="207:35" pos:end="207:37"><expr pos:start="207:35" pos:end="207:37"><literal type="char" pos:start="207:35" pos:end="207:37">'2'</literal></expr></argument>,<argument pos:start="207:39" pos:end="207:41"><expr pos:start="207:39" pos:end="207:41"><literal type="char" pos:start="207:39" pos:end="207:41">'0'</literal></expr></argument>,<argument pos:start="207:43" pos:end="207:45"><expr pos:start="207:43" pos:end="207:45"><literal type="char" pos:start="207:43" pos:end="207:45">'0'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="207:49" pos:end="213:13">{<block_content pos:start="209:17" pos:end="211:32">

                <expr_stmt pos:start="209:17" pos:end="209:71"><expr pos:start="209:17" pos:end="209:70"><call pos:start="209:17" pos:end="209:70"><name pos:start="209:17" pos:end="209:22">av_log</name><argument_list pos:start="209:23" pos:end="209:70">(<argument pos:start="209:24" pos:end="209:24"><expr pos:start="209:24" pos:end="209:24"><name pos:start="209:24" pos:end="209:24">s</name></expr></argument>, <argument pos:start="209:27" pos:end="209:38"><expr pos:start="209:27" pos:end="209:38"><name pos:start="209:27" pos:end="209:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="209:41" pos:end="209:69"><expr pos:start="209:41" pos:end="209:69"><literal type="string" pos:start="209:41" pos:end="209:69">"Unknown SMV version found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="211:17" pos:end="211:32">goto <name pos:start="211:22" pos:end="211:31">break_loop</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="215:13" pos:end="215:56"><expr pos:start="215:13" pos:end="215:55"><call pos:start="215:13" pos:end="215:55"><name pos:start="215:13" pos:end="215:18">av_log</name><argument_list pos:start="215:19" pos:end="215:55">(<argument pos:start="215:20" pos:end="215:20"><expr pos:start="215:20" pos:end="215:20"><name pos:start="215:20" pos:end="215:20">s</name></expr></argument>, <argument pos:start="215:23" pos:end="215:34"><expr pos:start="215:23" pos:end="215:34"><name pos:start="215:23" pos:end="215:34">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="215:37" pos:end="215:54"><expr pos:start="215:37" pos:end="215:54"><literal type="string" pos:start="215:37" pos:end="215:54">"Found SMV data\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="217:13" pos:end="217:37"><expr pos:start="217:13" pos:end="217:36"><name pos:start="217:13" pos:end="217:32"><name pos:start="217:13" pos:end="217:15">wav</name><operator pos:start="217:16" pos:end="217:17">-&gt;</operator><name pos:start="217:18" pos:end="217:32">smv_given_first</name></name> <operator pos:start="217:34" pos:end="217:34">=</operator> <literal type="number" pos:start="217:36" pos:end="217:36">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:47"><expr pos:start="219:13" pos:end="219:46"><name pos:start="219:13" pos:end="219:15">vst</name> <operator pos:start="219:17" pos:end="219:17">=</operator> <call pos:start="219:19" pos:end="219:46"><name pos:start="219:19" pos:end="219:37">avformat_new_stream</name><argument_list pos:start="219:38" pos:end="219:46">(<argument pos:start="219:39" pos:end="219:39"><expr pos:start="219:39" pos:end="219:39"><name pos:start="219:39" pos:end="219:39">s</name></expr></argument>, <argument pos:start="219:42" pos:end="219:45"><expr pos:start="219:42" pos:end="219:45"><name pos:start="219:42" pos:end="219:45">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="221:13" pos:end="223:39"><if pos:start="221:13" pos:end="223:39">if <condition pos:start="221:16" pos:end="221:21">(<expr pos:start="221:17" pos:end="221:20"><operator pos:start="221:17" pos:end="221:17">!</operator><name pos:start="221:18" pos:end="221:20">vst</name></expr>)</condition><block type="pseudo" pos:start="223:17" pos:end="223:39"><block_content pos:start="223:17" pos:end="223:39">

                <return pos:start="223:17" pos:end="223:39">return <expr pos:start="223:24" pos:end="223:38"><call pos:start="223:24" pos:end="223:38"><name pos:start="223:24" pos:end="223:30">AVERROR</name><argument_list pos:start="223:31" pos:end="223:38">(<argument pos:start="223:32" pos:end="223:37"><expr pos:start="223:32" pos:end="223:37"><name pos:start="223:32" pos:end="223:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="225:13" pos:end="225:24"><expr pos:start="225:13" pos:end="225:23"><call pos:start="225:13" pos:end="225:23"><name pos:start="225:13" pos:end="225:19">avio_r8</name><argument_list pos:start="225:20" pos:end="225:23">(<argument pos:start="225:21" pos:end="225:22"><expr pos:start="225:21" pos:end="225:22"><name pos:start="225:21" pos:end="225:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="227:13" pos:end="227:24"><expr pos:start="227:13" pos:end="227:23"><name pos:start="227:13" pos:end="227:19"><name pos:start="227:13" pos:end="227:15">vst</name><operator pos:start="227:16" pos:end="227:17">-&gt;</operator><name pos:start="227:18" pos:end="227:19">id</name></name> <operator pos:start="227:21" pos:end="227:21">=</operator> <literal type="number" pos:start="227:23" pos:end="227:23">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:56"><expr pos:start="229:13" pos:end="229:55"><name pos:start="229:13" pos:end="229:34"><name pos:start="229:13" pos:end="229:15">vst</name><operator pos:start="229:16" pos:end="229:17">-&gt;</operator><name pos:start="229:18" pos:end="229:22">codec</name><operator pos:start="229:23" pos:end="229:24">-&gt;</operator><name pos:start="229:25" pos:end="229:34">codec_type</name></name> <operator pos:start="229:36" pos:end="229:36">=</operator> <name pos:start="229:38" pos:end="229:55">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:55"><expr pos:start="231:13" pos:end="231:54"><name pos:start="231:13" pos:end="231:32"><name pos:start="231:13" pos:end="231:15">vst</name><operator pos:start="231:16" pos:end="231:17">-&gt;</operator><name pos:start="231:18" pos:end="231:22">codec</name><operator pos:start="231:23" pos:end="231:24">-&gt;</operator><name pos:start="231:25" pos:end="231:32">codec_id</name></name> <operator pos:start="231:34" pos:end="231:34">=</operator> <name pos:start="231:36" pos:end="231:54">AV_CODEC_ID_SMVJPEG</name></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:47"><expr pos:start="233:13" pos:end="233:46"><name pos:start="233:13" pos:end="233:29"><name pos:start="233:13" pos:end="233:15">vst</name><operator pos:start="233:16" pos:end="233:17">-&gt;</operator><name pos:start="233:18" pos:end="233:22">codec</name><operator pos:start="233:23" pos:end="233:24">-&gt;</operator><name pos:start="233:25" pos:end="233:29">width</name></name>  <operator pos:start="233:32" pos:end="233:32">=</operator> <call pos:start="233:34" pos:end="233:46"><name pos:start="233:34" pos:end="233:42">avio_rl24</name><argument_list pos:start="233:43" pos:end="233:46">(<argument pos:start="233:44" pos:end="233:45"><expr pos:start="233:44" pos:end="233:45"><name pos:start="233:44" pos:end="233:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="235:13" pos:end="235:47"><expr pos:start="235:13" pos:end="235:46"><name pos:start="235:13" pos:end="235:30"><name pos:start="235:13" pos:end="235:15">vst</name><operator pos:start="235:16" pos:end="235:17">-&gt;</operator><name pos:start="235:18" pos:end="235:22">codec</name><operator pos:start="235:23" pos:end="235:24">-&gt;</operator><name pos:start="235:25" pos:end="235:30">height</name></name> <operator pos:start="235:32" pos:end="235:32">=</operator> <call pos:start="235:34" pos:end="235:46"><name pos:start="235:34" pos:end="235:42">avio_rl24</name><argument_list pos:start="235:43" pos:end="235:46">(<argument pos:start="235:44" pos:end="235:45"><expr pos:start="235:44" pos:end="235:45"><name pos:start="235:44" pos:end="235:45">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="237:13" pos:end="243:13"><if pos:start="237:13" pos:end="243:13">if <condition pos:start="237:16" pos:end="237:50">(<expr pos:start="237:17" pos:end="237:49"><call pos:start="237:17" pos:end="237:49"><name pos:start="237:17" pos:end="237:34">ff_alloc_extradata</name><argument_list pos:start="237:35" pos:end="237:49">(<argument pos:start="237:36" pos:end="237:45"><expr pos:start="237:36" pos:end="237:45"><name pos:start="237:36" pos:end="237:45"><name pos:start="237:36" pos:end="237:38">vst</name><operator pos:start="237:39" pos:end="237:40">-&gt;</operator><name pos:start="237:41" pos:end="237:45">codec</name></name></expr></argument>, <argument pos:start="237:48" pos:end="237:48"><expr pos:start="237:48" pos:end="237:48"><literal type="number" pos:start="237:48" pos:end="237:48">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="237:52" pos:end="243:13">{<block_content pos:start="239:17" pos:end="241:39">

                <expr_stmt pos:start="239:17" pos:end="239:75"><expr pos:start="239:17" pos:end="239:74"><call pos:start="239:17" pos:end="239:74"><name pos:start="239:17" pos:end="239:22">av_log</name><argument_list pos:start="239:23" pos:end="239:74">(<argument pos:start="239:24" pos:end="239:24"><expr pos:start="239:24" pos:end="239:24"><name pos:start="239:24" pos:end="239:24">s</name></expr></argument>, <argument pos:start="239:27" pos:end="239:38"><expr pos:start="239:27" pos:end="239:38"><name pos:start="239:27" pos:end="239:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="239:41" pos:end="239:73"><expr pos:start="239:41" pos:end="239:73"><literal type="string" pos:start="239:41" pos:end="239:73">"Could not allocate extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="241:17" pos:end="241:39">return <expr pos:start="241:24" pos:end="241:38"><call pos:start="241:24" pos:end="241:38"><name pos:start="241:24" pos:end="241:30">AVERROR</name><argument_list pos:start="241:31" pos:end="241:38">(<argument pos:start="241:32" pos:end="241:37"><expr pos:start="241:32" pos:end="241:37"><name pos:start="241:32" pos:end="241:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:33"><expr pos:start="245:13" pos:end="245:32"><name pos:start="245:13" pos:end="245:16">size</name> <operator pos:start="245:18" pos:end="245:18">=</operator> <call pos:start="245:20" pos:end="245:32"><name pos:start="245:20" pos:end="245:28">avio_rl24</name><argument_list pos:start="245:29" pos:end="245:32">(<argument pos:start="245:30" pos:end="245:31"><expr pos:start="245:30" pos:end="245:31"><name pos:start="245:30" pos:end="245:31">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:63"><expr pos:start="247:13" pos:end="247:62"><name pos:start="247:13" pos:end="247:29"><name pos:start="247:13" pos:end="247:15">wav</name><operator pos:start="247:16" pos:end="247:17">-&gt;</operator><name pos:start="247:18" pos:end="247:29">smv_data_ofs</name></name> <operator pos:start="247:31" pos:end="247:31">=</operator> <call pos:start="247:33" pos:end="247:45"><name pos:start="247:33" pos:end="247:41">avio_tell</name><argument_list pos:start="247:42" pos:end="247:45">(<argument pos:start="247:43" pos:end="247:44"><expr pos:start="247:43" pos:end="247:44"><name pos:start="247:43" pos:end="247:44">pb</name></expr></argument>)</argument_list></call> <operator pos:start="247:47" pos:end="247:47">+</operator> <operator pos:start="247:49" pos:end="247:49">(</operator><name pos:start="247:50" pos:end="247:53">size</name> <operator pos:start="247:55" pos:end="247:55">-</operator> <literal type="number" pos:start="247:57" pos:end="247:57">5</literal><operator pos:start="247:58" pos:end="247:58">)</operator> <operator pos:start="247:60" pos:end="247:60">*</operator> <literal type="number" pos:start="247:62" pos:end="247:62">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:26"><expr pos:start="249:13" pos:end="249:25"><call pos:start="249:13" pos:end="249:25"><name pos:start="249:13" pos:end="249:21">avio_rl24</name><argument_list pos:start="249:22" pos:end="249:25">(<argument pos:start="249:23" pos:end="249:24"><expr pos:start="249:23" pos:end="249:24"><name pos:start="249:23" pos:end="249:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:48"><expr pos:start="251:13" pos:end="251:47"><name pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:15">wav</name><operator pos:start="251:16" pos:end="251:17">-&gt;</operator><name pos:start="251:18" pos:end="251:31">smv_block_size</name></name> <operator pos:start="251:33" pos:end="251:33">=</operator> <call pos:start="251:35" pos:end="251:47"><name pos:start="251:35" pos:end="251:43">avio_rl24</name><argument_list pos:start="251:44" pos:end="251:47">(<argument pos:start="251:45" pos:end="251:46"><expr pos:start="251:45" pos:end="251:46"><name pos:start="251:45" pos:end="251:46">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="253:13" pos:end="253:59"><expr pos:start="253:13" pos:end="253:58"><call pos:start="253:13" pos:end="253:58"><name pos:start="253:13" pos:end="253:31">avpriv_set_pts_info</name><argument_list pos:start="253:32" pos:end="253:58">(<argument pos:start="253:33" pos:end="253:35"><expr pos:start="253:33" pos:end="253:35"><name pos:start="253:33" pos:end="253:35">vst</name></expr></argument>, <argument pos:start="253:38" pos:end="253:39"><expr pos:start="253:38" pos:end="253:39"><literal type="number" pos:start="253:38" pos:end="253:39">32</literal></expr></argument>, <argument pos:start="253:42" pos:end="253:42"><expr pos:start="253:42" pos:end="253:42"><literal type="number" pos:start="253:42" pos:end="253:42">1</literal></expr></argument>, <argument pos:start="253:45" pos:end="253:57"><expr pos:start="253:45" pos:end="253:57"><call pos:start="253:45" pos:end="253:57"><name pos:start="253:45" pos:end="253:53">avio_rl24</name><argument_list pos:start="253:54" pos:end="253:57">(<argument pos:start="253:55" pos:end="253:56"><expr pos:start="253:55" pos:end="253:56"><name pos:start="253:55" pos:end="253:56">pb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="255:13" pos:end="255:42"><expr pos:start="255:13" pos:end="255:41"><name pos:start="255:13" pos:end="255:25"><name pos:start="255:13" pos:end="255:15">vst</name><operator pos:start="255:16" pos:end="255:17">-&gt;</operator><name pos:start="255:18" pos:end="255:25">duration</name></name> <operator pos:start="255:27" pos:end="255:27">=</operator> <call pos:start="255:29" pos:end="255:41"><name pos:start="255:29" pos:end="255:37">avio_rl24</name><argument_list pos:start="255:38" pos:end="255:41">(<argument pos:start="255:39" pos:end="255:40"><expr pos:start="255:39" pos:end="255:40"><name pos:start="255:39" pos:end="255:40">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="257:13" pos:end="257:26"><expr pos:start="257:13" pos:end="257:25"><call pos:start="257:13" pos:end="257:25"><name pos:start="257:13" pos:end="257:21">avio_rl24</name><argument_list pos:start="257:22" pos:end="257:25">(<argument pos:start="257:23" pos:end="257:24"><expr pos:start="257:23" pos:end="257:24"><name pos:start="257:23" pos:end="257:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="259:13" pos:end="259:26"><expr pos:start="259:13" pos:end="259:25"><call pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:21">avio_rl24</name><argument_list pos:start="259:22" pos:end="259:25">(<argument pos:start="259:23" pos:end="259:24"><expr pos:start="259:23" pos:end="259:24"><name pos:start="259:23" pos:end="259:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:53"><expr pos:start="261:13" pos:end="261:52"><name pos:start="261:13" pos:end="261:36"><name pos:start="261:13" pos:end="261:15">wav</name><operator pos:start="261:16" pos:end="261:17">-&gt;</operator><name pos:start="261:18" pos:end="261:36">smv_frames_per_jpeg</name></name> <operator pos:start="261:38" pos:end="261:38">=</operator> <call pos:start="261:40" pos:end="261:52"><name pos:start="261:40" pos:end="261:48">avio_rl24</name><argument_list pos:start="261:49" pos:end="261:52">(<argument pos:start="261:50" pos:end="261:51"><expr pos:start="261:50" pos:end="261:51"><name pos:start="261:50" pos:end="261:51">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="263:13" pos:end="269:13"><if pos:start="263:13" pos:end="269:13">if <condition pos:start="263:16" pos:end="263:49">(<expr pos:start="263:17" pos:end="263:48"><name pos:start="263:17" pos:end="263:40"><name pos:start="263:17" pos:end="263:19">wav</name><operator pos:start="263:20" pos:end="263:21">-&gt;</operator><name pos:start="263:22" pos:end="263:40">smv_frames_per_jpeg</name></name> <operator pos:start="263:42" pos:end="263:42">&gt;</operator> <literal type="number" pos:start="263:44" pos:end="263:48">65536</literal></expr>)</condition> <block pos:start="263:51" pos:end="269:13">{<block_content pos:start="265:17" pos:end="267:43">

                <expr_stmt pos:start="265:17" pos:end="265:70"><expr pos:start="265:17" pos:end="265:69"><call pos:start="265:17" pos:end="265:69"><name pos:start="265:17" pos:end="265:22">av_log</name><argument_list pos:start="265:23" pos:end="265:69">(<argument pos:start="265:24" pos:end="265:24"><expr pos:start="265:24" pos:end="265:24"><name pos:start="265:24" pos:end="265:24">s</name></expr></argument>, <argument pos:start="265:27" pos:end="265:38"><expr pos:start="265:27" pos:end="265:38"><name pos:start="265:27" pos:end="265:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="265:41" pos:end="265:68"><expr pos:start="265:41" pos:end="265:68"><literal type="string" pos:start="265:41" pos:end="265:68">"too many frames per jpeg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="267:17" pos:end="267:43">return <expr pos:start="267:24" pos:end="267:42"><name pos:start="267:24" pos:end="267:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:69"><expr pos:start="271:13" pos:end="271:68"><call pos:start="271:13" pos:end="271:68"><name pos:start="271:13" pos:end="271:19">AV_WL32</name><argument_list pos:start="271:20" pos:end="271:68">(<argument pos:start="271:21" pos:end="271:41"><expr pos:start="271:21" pos:end="271:41"><name pos:start="271:21" pos:end="271:41"><name pos:start="271:21" pos:end="271:23">vst</name><operator pos:start="271:24" pos:end="271:25">-&gt;</operator><name pos:start="271:26" pos:end="271:30">codec</name><operator pos:start="271:31" pos:end="271:32">-&gt;</operator><name pos:start="271:33" pos:end="271:41">extradata</name></name></expr></argument>, <argument pos:start="271:44" pos:end="271:67"><expr pos:start="271:44" pos:end="271:67"><name pos:start="271:44" pos:end="271:67"><name pos:start="271:44" pos:end="271:46">wav</name><operator pos:start="271:47" pos:end="271:48">-&gt;</operator><name pos:start="271:49" pos:end="271:67">smv_frames_per_jpeg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:32"><expr pos:start="273:13" pos:end="273:31"><name pos:start="273:13" pos:end="273:27"><name pos:start="273:13" pos:end="273:15">wav</name><operator pos:start="273:16" pos:end="273:17">-&gt;</operator><name pos:start="273:18" pos:end="273:27">smv_cur_pt</name></name> <operator pos:start="273:29" pos:end="273:29">=</operator> <literal type="number" pos:start="273:31" pos:end="273:31">0</literal></expr>;</expr_stmt>

            <goto pos:start="275:13" pos:end="275:28">goto <name pos:start="275:18" pos:end="275:27">break_loop</name>;</goto>

        <case pos:start="277:9" pos:end="277:39">case <expr pos:start="277:14" pos:end="277:38"><call pos:start="277:14" pos:end="277:38"><name pos:start="277:14" pos:end="277:18">MKTAG</name><argument_list pos:start="277:19" pos:end="277:38">(<argument pos:start="277:20" pos:end="277:22"><expr pos:start="277:20" pos:end="277:22"><literal type="char" pos:start="277:20" pos:end="277:22">'L'</literal></expr></argument>, <argument pos:start="277:25" pos:end="277:27"><expr pos:start="277:25" pos:end="277:27"><literal type="char" pos:start="277:25" pos:end="277:27">'I'</literal></expr></argument>, <argument pos:start="277:30" pos:end="277:32"><expr pos:start="277:30" pos:end="277:32"><literal type="char" pos:start="277:30" pos:end="277:32">'S'</literal></expr></argument>, <argument pos:start="277:35" pos:end="277:37"><expr pos:start="277:35" pos:end="277:37"><literal type="char" pos:start="277:35" pos:end="277:37">'T'</literal></expr></argument>)</argument_list></call></expr>:</case>

            <if_stmt pos:start="279:13" pos:end="285:13"><if pos:start="279:13" pos:end="285:13">if <condition pos:start="279:16" pos:end="279:25">(<expr pos:start="279:17" pos:end="279:24"><name pos:start="279:17" pos:end="279:20">size</name> <operator pos:start="279:22" pos:end="279:22">&lt;</operator> <literal type="number" pos:start="279:24" pos:end="279:24">4</literal></expr>)</condition> <block pos:start="279:27" pos:end="285:13">{<block_content pos:start="281:17" pos:end="283:43">

                <expr_stmt pos:start="281:17" pos:end="281:64"><expr pos:start="281:17" pos:end="281:63"><call pos:start="281:17" pos:end="281:63"><name pos:start="281:17" pos:end="281:22">av_log</name><argument_list pos:start="281:23" pos:end="281:63">(<argument pos:start="281:24" pos:end="281:24"><expr pos:start="281:24" pos:end="281:24"><name pos:start="281:24" pos:end="281:24">s</name></expr></argument>, <argument pos:start="281:27" pos:end="281:38"><expr pos:start="281:27" pos:end="281:38"><name pos:start="281:27" pos:end="281:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="281:41" pos:end="281:62"><expr pos:start="281:41" pos:end="281:62"><literal type="string" pos:start="281:41" pos:end="281:62">"too short LIST tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="283:17" pos:end="283:43">return <expr pos:start="283:24" pos:end="283:42"><name pos:start="283:24" pos:end="283:42">AVERROR_INVALIDDATA</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <switch pos:start="287:13" pos:end="293:13">switch <condition pos:start="287:20" pos:end="287:34">(<expr pos:start="287:21" pos:end="287:33"><call pos:start="287:21" pos:end="287:33"><name pos:start="287:21" pos:end="287:29">avio_rl32</name><argument_list pos:start="287:30" pos:end="287:33">(<argument pos:start="287:31" pos:end="287:32"><expr pos:start="287:31" pos:end="287:32"><name pos:start="287:31" pos:end="287:32">pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="287:36" pos:end="293:13">{<block_content pos:start="289:13" pos:end="291:47">

            <case pos:start="289:13" pos:end="289:43">case <expr pos:start="289:18" pos:end="289:42"><call pos:start="289:18" pos:end="289:42"><name pos:start="289:18" pos:end="289:22">MKTAG</name><argument_list pos:start="289:23" pos:end="289:42">(<argument pos:start="289:24" pos:end="289:26"><expr pos:start="289:24" pos:end="289:26"><literal type="char" pos:start="289:24" pos:end="289:26">'I'</literal></expr></argument>, <argument pos:start="289:29" pos:end="289:31"><expr pos:start="289:29" pos:end="289:31"><literal type="char" pos:start="289:29" pos:end="289:31">'N'</literal></expr></argument>, <argument pos:start="289:34" pos:end="289:36"><expr pos:start="289:34" pos:end="289:36"><literal type="char" pos:start="289:34" pos:end="289:36">'F'</literal></expr></argument>, <argument pos:start="289:39" pos:end="289:41"><expr pos:start="289:39" pos:end="289:41"><literal type="char" pos:start="289:39" pos:end="289:41">'O'</literal></expr></argument>)</argument_list></call></expr>:</case>

                <expr_stmt pos:start="291:17" pos:end="291:47"><expr pos:start="291:17" pos:end="291:46"><call pos:start="291:17" pos:end="291:46"><name pos:start="291:17" pos:end="291:33">ff_read_riff_info</name><argument_list pos:start="291:34" pos:end="291:46">(<argument pos:start="291:35" pos:end="291:35"><expr pos:start="291:35" pos:end="291:35"><name pos:start="291:35" pos:end="291:35">s</name></expr></argument>, <argument pos:start="291:38" pos:end="291:45"><expr pos:start="291:38" pos:end="291:45"><name pos:start="291:38" pos:end="291:41">size</name> <operator pos:start="291:43" pos:end="291:43">-</operator> <literal type="number" pos:start="291:45" pos:end="291:45">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></switch>

            <break pos:start="295:13" pos:end="295:18">break;</break>

        </block_content>}</block></switch>



        <comment type="block" pos:start="301:9" pos:end="301:69">/* seek to next tag unless we know that we'll run into EOF */</comment>

        <if_stmt pos:start="303:9" pos:end="309:9"><if pos:start="303:9" pos:end="309:9">if <condition pos:start="303:12" pos:end="305:62">(<expr pos:start="303:13" pos:end="305:61"><operator pos:start="303:13" pos:end="303:13">(</operator><call pos:start="303:14" pos:end="303:26"><name pos:start="303:14" pos:end="303:22">avio_size</name><argument_list pos:start="303:23" pos:end="303:26">(<argument pos:start="303:24" pos:end="303:25"><expr pos:start="303:24" pos:end="303:25"><name pos:start="303:24" pos:end="303:25">pb</name></expr></argument>)</argument_list></call> <operator pos:start="303:28" pos:end="303:28">&gt;</operator> <literal type="number" pos:start="303:30" pos:end="303:30">0</literal> <operator pos:start="303:32" pos:end="303:33">&amp;&amp;</operator> <name pos:start="303:35" pos:end="303:46">next_tag_ofs</name> <operator pos:start="303:48" pos:end="303:49">&gt;=</operator> <call pos:start="303:51" pos:end="303:63"><name pos:start="303:51" pos:end="303:59">avio_size</name><argument_list pos:start="303:60" pos:end="303:63">(<argument pos:start="303:61" pos:end="303:62"><expr pos:start="303:61" pos:end="303:62"><name pos:start="303:61" pos:end="303:62">pb</name></expr></argument>)</argument_list></call><operator pos:start="303:64" pos:end="303:64">)</operator> <operator pos:start="303:66" pos:end="303:67">||</operator>

            <call pos:start="305:13" pos:end="305:57"><name pos:start="305:13" pos:end="305:24">wav_seek_tag</name><argument_list pos:start="305:25" pos:end="305:57">(<argument pos:start="305:26" pos:end="305:28"><expr pos:start="305:26" pos:end="305:28"><name pos:start="305:26" pos:end="305:28">wav</name></expr></argument>, <argument pos:start="305:31" pos:end="305:32"><expr pos:start="305:31" pos:end="305:32"><name pos:start="305:31" pos:end="305:32">pb</name></expr></argument>, <argument pos:start="305:35" pos:end="305:46"><expr pos:start="305:35" pos:end="305:46"><name pos:start="305:35" pos:end="305:46">next_tag_ofs</name></expr></argument>, <argument pos:start="305:49" pos:end="305:56"><expr pos:start="305:49" pos:end="305:56"><name pos:start="305:49" pos:end="305:56">SEEK_SET</name></expr></argument>)</argument_list></call> <operator pos:start="305:59" pos:end="305:59">&lt;</operator> <literal type="number" pos:start="305:61" pos:end="305:61">0</literal></expr>)</condition> <block pos:start="305:64" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:18">

            <break pos:start="307:13" pos:end="307:18">break;</break>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



<label pos:start="315:1" pos:end="315:11"><name pos:start="315:1" pos:end="315:10">break_loop</name>:</label>

    <if_stmt pos:start="317:5" pos:end="323:5"><if pos:start="317:5" pos:end="323:5">if <condition pos:start="317:8" pos:end="317:21">(<expr pos:start="317:9" pos:end="317:20"><name pos:start="317:9" pos:end="317:16">data_ofs</name> <operator pos:start="317:18" pos:end="317:18">&lt;</operator> <literal type="number" pos:start="317:20" pos:end="317:20">0</literal></expr>)</condition> <block pos:start="317:23" pos:end="323:5">{<block_content pos:start="319:9" pos:end="321:35">

        <expr_stmt pos:start="319:9" pos:end="319:57"><expr pos:start="319:9" pos:end="319:56"><call pos:start="319:9" pos:end="319:56"><name pos:start="319:9" pos:end="319:14">av_log</name><argument_list pos:start="319:15" pos:end="319:56">(<argument pos:start="319:16" pos:end="319:16"><expr pos:start="319:16" pos:end="319:16"><name pos:start="319:16" pos:end="319:16">s</name></expr></argument>, <argument pos:start="319:19" pos:end="319:30"><expr pos:start="319:19" pos:end="319:30"><name pos:start="319:19" pos:end="319:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="319:33" pos:end="319:55"><expr pos:start="319:33" pos:end="319:55"><literal type="string" pos:start="319:33" pos:end="319:55">"no 'data' tag found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="321:9" pos:end="321:35">return <expr pos:start="321:16" pos:end="321:34"><name pos:start="321:16" pos:end="321:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="327:5" pos:end="327:38"><expr pos:start="327:5" pos:end="327:37"><call pos:start="327:5" pos:end="327:37"><name pos:start="327:5" pos:end="327:13">avio_seek</name><argument_list pos:start="327:14" pos:end="327:37">(<argument pos:start="327:15" pos:end="327:16"><expr pos:start="327:15" pos:end="327:16"><name pos:start="327:15" pos:end="327:16">pb</name></expr></argument>, <argument pos:start="327:19" pos:end="327:26"><expr pos:start="327:19" pos:end="327:26"><name pos:start="327:19" pos:end="327:26">data_ofs</name></expr></argument>, <argument pos:start="327:29" pos:end="327:36"><expr pos:start="327:29" pos:end="327:36"><name pos:start="327:29" pos:end="327:36">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="331:5" pos:end="339:5"><if pos:start="331:5" pos:end="339:5">if <condition pos:start="331:8" pos:end="333:62">(   <expr pos:start="331:12" pos:end="333:61"><name pos:start="331:12" pos:end="331:20">data_size</name> <operator pos:start="331:22" pos:end="331:22">&gt;</operator> <literal type="number" pos:start="331:24" pos:end="331:24">0</literal> <operator pos:start="331:26" pos:end="331:27">&amp;&amp;</operator> <name pos:start="331:29" pos:end="331:40">sample_count</name> <operator pos:start="331:42" pos:end="331:43">&amp;&amp;</operator> <name pos:start="331:45" pos:end="331:63"><name pos:start="331:45" pos:end="331:46">st</name><operator pos:start="331:47" pos:end="331:48">-&gt;</operator><name pos:start="331:49" pos:end="331:53">codec</name><operator pos:start="331:54" pos:end="331:55">-&gt;</operator><name pos:start="331:56" pos:end="331:63">channels</name></name>

        <operator pos:start="333:9" pos:end="333:10">&amp;&amp;</operator> <name pos:start="333:12" pos:end="333:20">data_size</name> <operator pos:start="333:22" pos:end="333:22">/</operator> <name pos:start="333:24" pos:end="333:35">sample_count</name> <operator pos:start="333:37" pos:end="333:37">/</operator> <name pos:start="333:39" pos:end="333:57"><name pos:start="333:39" pos:end="333:40">st</name><operator pos:start="333:41" pos:end="333:42">-&gt;</operator><name pos:start="333:43" pos:end="333:47">codec</name><operator pos:start="333:48" pos:end="333:49">-&gt;</operator><name pos:start="333:50" pos:end="333:57">channels</name></name> <operator pos:start="333:59" pos:end="333:59">&gt;</operator> <literal type="number" pos:start="333:61" pos:end="333:61">8</literal></expr>)</condition> <block pos:start="333:64" pos:end="339:5">{<block_content pos:start="335:9" pos:end="337:25">

        <expr_stmt pos:start="335:9" pos:end="335:91"><expr pos:start="335:9" pos:end="335:90"><call pos:start="335:9" pos:end="335:90"><name pos:start="335:9" pos:end="335:14">av_log</name><argument_list pos:start="335:15" pos:end="335:90">(<argument pos:start="335:16" pos:end="335:16"><expr pos:start="335:16" pos:end="335:16"><name pos:start="335:16" pos:end="335:16">s</name></expr></argument>, <argument pos:start="335:19" pos:end="335:32"><expr pos:start="335:19" pos:end="335:32"><name pos:start="335:19" pos:end="335:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="335:35" pos:end="335:75"><expr pos:start="335:35" pos:end="335:75"><literal type="string" pos:start="335:35" pos:end="335:65">"ignoring wrong sample_count %"</literal><name pos:start="335:66" pos:end="335:71">PRId64</name><literal type="string" pos:start="335:72" pos:end="335:75">"\n"</literal></expr></argument>, <argument pos:start="335:78" pos:end="335:89"><expr pos:start="335:78" pos:end="335:89"><name pos:start="335:78" pos:end="335:89">sample_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:25"><expr pos:start="337:9" pos:end="337:24"><name pos:start="337:9" pos:end="337:20">sample_count</name> <operator pos:start="337:22" pos:end="337:22">=</operator> <literal type="number" pos:start="337:24" pos:end="337:24">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="343:5" pos:end="357:94"><if pos:start="343:5" pos:end="357:94">if <condition pos:start="343:8" pos:end="343:79">(<expr pos:start="343:9" pos:end="343:78"><operator pos:start="343:9" pos:end="343:9">!</operator><name pos:start="343:10" pos:end="343:21">sample_count</name> <operator pos:start="343:23" pos:end="343:24">||</operator> <call pos:start="343:26" pos:end="343:74"><name pos:start="343:26" pos:end="343:53">av_get_exact_bits_per_sample</name><argument_list pos:start="343:54" pos:end="343:74">(<argument pos:start="343:55" pos:end="343:73"><expr pos:start="343:55" pos:end="343:73"><name pos:start="343:55" pos:end="343:73"><name pos:start="343:55" pos:end="343:56">st</name><operator pos:start="343:57" pos:end="343:58">-&gt;</operator><name pos:start="343:59" pos:end="343:63">codec</name><operator pos:start="343:64" pos:end="343:65">-&gt;</operator><name pos:start="343:66" pos:end="343:73">codec_id</name></name></expr></argument>)</argument_list></call> <operator pos:start="343:76" pos:end="343:76">&gt;</operator> <literal type="number" pos:start="343:78" pos:end="343:78">0</literal></expr>)</condition><block type="pseudo" pos:start="345:9" pos:end="357:94"><block_content pos:start="345:9" pos:end="357:94">

        <if_stmt pos:start="345:9" pos:end="357:94"><if pos:start="345:9" pos:end="357:94">if <condition pos:start="345:12" pos:end="351:46">(   <expr pos:start="345:16" pos:end="351:45"><name pos:start="345:16" pos:end="345:34"><name pos:start="345:16" pos:end="345:17">st</name><operator pos:start="345:18" pos:end="345:19">-&gt;</operator><name pos:start="345:20" pos:end="345:24">codec</name><operator pos:start="345:25" pos:end="345:26">-&gt;</operator><name pos:start="345:27" pos:end="345:34">channels</name></name>

            <operator pos:start="347:13" pos:end="347:14">&amp;&amp;</operator> <name pos:start="347:16" pos:end="347:24">data_size</name>

            <operator pos:start="349:13" pos:end="349:14">&amp;&amp;</operator> <call pos:start="349:16" pos:end="349:58"><name pos:start="349:16" pos:end="349:37">av_get_bits_per_sample</name><argument_list pos:start="349:38" pos:end="349:58">(<argument pos:start="349:39" pos:end="349:57"><expr pos:start="349:39" pos:end="349:57"><name pos:start="349:39" pos:end="349:57"><name pos:start="349:39" pos:end="349:40">st</name><operator pos:start="349:41" pos:end="349:42">-&gt;</operator><name pos:start="349:43" pos:end="349:47">codec</name><operator pos:start="349:48" pos:end="349:49">-&gt;</operator><name pos:start="349:50" pos:end="349:57">codec_id</name></name></expr></argument>)</argument_list></call>

            <operator pos:start="351:13" pos:end="351:14">&amp;&amp;</operator> <name pos:start="351:16" pos:end="351:28"><name pos:start="351:16" pos:end="351:18">wav</name><operator pos:start="351:19" pos:end="351:20">-&gt;</operator><name pos:start="351:21" pos:end="351:28">data_end</name></name> <operator pos:start="351:30" pos:end="351:31">&lt;=</operator> <call pos:start="351:33" pos:end="351:45"><name pos:start="351:33" pos:end="351:41">avio_size</name><argument_list pos:start="351:42" pos:end="351:45">(<argument pos:start="351:43" pos:end="351:44"><expr pos:start="351:43" pos:end="351:44"><name pos:start="351:43" pos:end="351:44">pb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="353:13" pos:end="357:94"><block_content pos:start="353:13" pos:end="357:94">

            <expr_stmt pos:start="353:13" pos:end="357:94"><expr pos:start="353:13" pos:end="357:93"><name pos:start="353:13" pos:end="353:24">sample_count</name> <operator pos:start="353:26" pos:end="353:26">=</operator> <operator pos:start="353:28" pos:end="353:28">(</operator><name pos:start="353:29" pos:end="353:37">data_size</name> <operator pos:start="353:39" pos:end="353:40">&lt;&lt;</operator> <literal type="number" pos:start="353:42" pos:end="353:42">3</literal><operator pos:start="353:43" pos:end="353:43">)</operator>

                                  <operator pos:start="355:35" pos:end="355:35">/</operator>

                <operator pos:start="357:17" pos:end="357:17">(</operator><name pos:start="357:18" pos:end="357:36"><name pos:start="357:18" pos:end="357:19">st</name><operator pos:start="357:20" pos:end="357:21">-&gt;</operator><name pos:start="357:22" pos:end="357:26">codec</name><operator pos:start="357:27" pos:end="357:28">-&gt;</operator><name pos:start="357:29" pos:end="357:36">channels</name></name> <operator pos:start="357:38" pos:end="357:38">*</operator> <operator pos:start="357:40" pos:end="357:40">(</operator><name pos:start="357:41" pos:end="357:48">uint64_t</name><operator pos:start="357:49" pos:end="357:49">)</operator><call pos:start="357:50" pos:end="357:92"><name pos:start="357:50" pos:end="357:71">av_get_bits_per_sample</name><argument_list pos:start="357:72" pos:end="357:92">(<argument pos:start="357:73" pos:end="357:91"><expr pos:start="357:73" pos:end="357:91"><name pos:start="357:73" pos:end="357:91"><name pos:start="357:73" pos:end="357:74">st</name><operator pos:start="357:75" pos:end="357:76">-&gt;</operator><name pos:start="357:77" pos:end="357:81">codec</name><operator pos:start="357:82" pos:end="357:83">-&gt;</operator><name pos:start="357:84" pos:end="357:91">codec_id</name></name></expr></argument>)</argument_list></call><operator pos:start="357:93" pos:end="357:93">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="361:5" pos:end="363:36"><if pos:start="361:5" pos:end="363:36">if <condition pos:start="361:8" pos:end="361:21">(<expr pos:start="361:9" pos:end="361:20"><name pos:start="361:9" pos:end="361:20">sample_count</name></expr>)</condition><block type="pseudo" pos:start="363:9" pos:end="363:36"><block_content pos:start="363:9" pos:end="363:36">

        <expr_stmt pos:start="363:9" pos:end="363:36"><expr pos:start="363:9" pos:end="363:35"><name pos:start="363:9" pos:end="363:20"><name pos:start="363:9" pos:end="363:10">st</name><operator pos:start="363:11" pos:end="363:12">-&gt;</operator><name pos:start="363:13" pos:end="363:20">duration</name></name> <operator pos:start="363:22" pos:end="363:22">=</operator> <name pos:start="363:24" pos:end="363:35">sample_count</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="367:5" pos:end="367:53"><expr pos:start="367:5" pos:end="367:52"><call pos:start="367:5" pos:end="367:52"><name pos:start="367:5" pos:end="367:24">ff_metadata_conv_ctx</name><argument_list pos:start="367:25" pos:end="367:52">(<argument pos:start="367:26" pos:end="367:26"><expr pos:start="367:26" pos:end="367:26"><name pos:start="367:26" pos:end="367:26">s</name></expr></argument>, <argument pos:start="367:29" pos:end="367:32"><expr pos:start="367:29" pos:end="367:32"><name pos:start="367:29" pos:end="367:32">NULL</name></expr></argument>, <argument pos:start="367:35" pos:end="367:51"><expr pos:start="367:35" pos:end="367:51"><name pos:start="367:35" pos:end="367:51">wav_metadata_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="369:5" pos:end="369:53"><expr pos:start="369:5" pos:end="369:52"><call pos:start="369:5" pos:end="369:52"><name pos:start="369:5" pos:end="369:24">ff_metadata_conv_ctx</name><argument_list pos:start="369:25" pos:end="369:52">(<argument pos:start="369:26" pos:end="369:26"><expr pos:start="369:26" pos:end="369:26"><name pos:start="369:26" pos:end="369:26">s</name></expr></argument>, <argument pos:start="369:29" pos:end="369:32"><expr pos:start="369:29" pos:end="369:32"><name pos:start="369:29" pos:end="369:32">NULL</name></expr></argument>, <argument pos:start="369:35" pos:end="369:51"><expr pos:start="369:35" pos:end="369:51"><name pos:start="369:35" pos:end="369:51">ff_riff_info_conv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="373:5" pos:end="373:13">return <expr pos:start="373:12" pos:end="373:12"><literal type="number" pos:start="373:12" pos:end="373:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
