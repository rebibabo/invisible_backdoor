<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24350.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">virtio_setup</name><parameter_list pos:start="1:25" pos:end="1:43">(<parameter pos:start="1:26" pos:end="1:42"><decl pos:start="1:26" pos:end="1:42"><type pos:start="1:26" pos:end="1:33"><name pos:start="1:26" pos:end="1:33">uint64_t</name></type> <name pos:start="1:35" pos:end="1:42">dev_info</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:16">schib</name></name></type> <name pos:start="5:18" pos:end="5:22">schib</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:13"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">ssid</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">bool</name></type> <name pos:start="9:10" pos:end="9:14">found</name> <init pos:start="9:16" pos:end="9:22">= <expr pos:start="9:18" pos:end="9:22"><name pos:start="9:18" pos:end="9:22">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint16_t</name></type> <name pos:start="11:14" pos:end="11:19">dev_no</name></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="23:7">/*

     * We unconditionally enable mss support. In every sane configuration,

     * this will succeed; and even if it doesn't, stsch_err() can deal

     * with the consequences.

     */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:26"><expr pos:start="25:5" pos:end="25:25"><call pos:start="25:5" pos:end="25:25"><name pos:start="25:5" pos:end="25:23">enable_mss_facility</name><argument_list pos:start="25:24" pos:end="25:25">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="57:5"><if pos:start="29:5" pos:end="41:5">if <condition pos:start="29:8" pos:end="29:23">(<expr pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:16">dev_info</name> <operator pos:start="29:18" pos:end="29:19">!=</operator> <operator pos:start="29:21" pos:end="29:21">-</operator><literal type="number" pos:start="29:22" pos:end="29:22">1</literal></expr>)</condition> <block pos:start="29:25" pos:end="41:5">{<block_content pos:start="31:9" pos:end="39:41">

        <expr_stmt pos:start="31:9" pos:end="31:35"><expr pos:start="31:9" pos:end="31:34"><name pos:start="31:9" pos:end="31:14">dev_no</name> <operator pos:start="31:16" pos:end="31:16">=</operator> <name pos:start="31:18" pos:end="31:25">dev_info</name> <operator pos:start="31:27" pos:end="31:27">&amp;</operator> <literal type="number" pos:start="31:29" pos:end="31:34">0xffff</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:47"><expr pos:start="33:9" pos:end="33:46"><call pos:start="33:9" pos:end="33:46"><name pos:start="33:9" pos:end="33:23">debug_print_int</name><argument_list pos:start="33:24" pos:end="33:46">(<argument pos:start="33:25" pos:end="33:37"><expr pos:start="33:25" pos:end="33:37"><literal type="string" pos:start="33:25" pos:end="33:37">"device no. "</literal></expr></argument>, <argument pos:start="33:40" pos:end="33:45"><expr pos:start="33:40" pos:end="33:45"><name pos:start="33:40" pos:end="33:45">dev_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:48"><expr pos:start="35:9" pos:end="35:47"><name pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:17">blk_schid</name><operator pos:start="35:18" pos:end="35:18">.</operator><name pos:start="35:19" pos:end="35:22">ssid</name></name> <operator pos:start="35:24" pos:end="35:24">=</operator> <operator pos:start="35:26" pos:end="35:26">(</operator><name pos:start="35:27" pos:end="35:34">dev_info</name> <operator pos:start="35:36" pos:end="35:37">&gt;&gt;</operator> <literal type="number" pos:start="35:39" pos:end="35:40">16</literal><operator pos:start="35:41" pos:end="35:41">)</operator> <operator pos:start="35:43" pos:end="35:43">&amp;</operator> <literal type="number" pos:start="35:45" pos:end="35:47">0x3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:49"><expr pos:start="37:9" pos:end="37:48"><call pos:start="37:9" pos:end="37:48"><name pos:start="37:9" pos:end="37:23">debug_print_int</name><argument_list pos:start="37:24" pos:end="37:48">(<argument pos:start="37:25" pos:end="37:31"><expr pos:start="37:25" pos:end="37:31"><literal type="string" pos:start="37:25" pos:end="37:31">"ssid "</literal></expr></argument>, <argument pos:start="37:34" pos:end="37:47"><expr pos:start="37:34" pos:end="37:47"><name pos:start="37:34" pos:end="37:47"><name pos:start="37:34" pos:end="37:42">blk_schid</name><operator pos:start="37:43" pos:end="37:43">.</operator><name pos:start="37:44" pos:end="37:47">ssid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:13">found</name> <operator pos:start="39:15" pos:end="39:15">=</operator> <call pos:start="39:17" pos:end="39:40"><name pos:start="39:17" pos:end="39:24">find_dev</name><argument_list pos:start="39:25" pos:end="39:40">(<argument pos:start="39:26" pos:end="39:31"><expr pos:start="39:26" pos:end="39:31"><operator pos:start="39:26" pos:end="39:26">&amp;</operator><name pos:start="39:27" pos:end="39:31">schib</name></expr></argument>, <argument pos:start="39:34" pos:end="39:39"><expr pos:start="39:34" pos:end="39:39"><name pos:start="39:34" pos:end="39:39">dev_no</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="41:7" pos:end="57:5">else <block pos:start="41:12" pos:end="57:5">{<block_content pos:start="43:9" pos:end="55:9">

        <for pos:start="43:9" pos:end="55:9">for <control pos:start="43:13" pos:end="43:42">(<init pos:start="43:14" pos:end="43:22"><expr pos:start="43:14" pos:end="43:21"><name pos:start="43:14" pos:end="43:17">ssid</name> <operator pos:start="43:19" pos:end="43:19">=</operator> <literal type="number" pos:start="43:21" pos:end="43:21">0</literal></expr>;</init> <condition pos:start="43:24" pos:end="43:34"><expr pos:start="43:24" pos:end="43:33"><name pos:start="43:24" pos:end="43:27">ssid</name> <operator pos:start="43:29" pos:end="43:29">&lt;</operator> <literal type="number" pos:start="43:31" pos:end="43:33">0x3</literal></expr>;</condition> <incr pos:start="43:36" pos:end="43:41"><expr pos:start="43:36" pos:end="43:41"><name pos:start="43:36" pos:end="43:39">ssid</name><operator pos:start="43:40" pos:end="43:41">++</operator></expr></incr>)</control> <block pos:start="43:44" pos:end="55:9">{<block_content pos:start="45:13" pos:end="53:13">

            <expr_stmt pos:start="45:13" pos:end="45:34"><expr pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:26"><name pos:start="45:13" pos:end="45:21">blk_schid</name><operator pos:start="45:22" pos:end="45:22">.</operator><name pos:start="45:23" pos:end="45:26">ssid</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <name pos:start="45:30" pos:end="45:33">ssid</name></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:41"><expr pos:start="47:13" pos:end="47:40"><name pos:start="47:13" pos:end="47:17">found</name> <operator pos:start="47:19" pos:end="47:19">=</operator> <call pos:start="47:21" pos:end="47:40"><name pos:start="47:21" pos:end="47:28">find_dev</name><argument_list pos:start="47:29" pos:end="47:40">(<argument pos:start="47:30" pos:end="47:35"><expr pos:start="47:30" pos:end="47:35"><operator pos:start="47:30" pos:end="47:30">&amp;</operator><name pos:start="47:31" pos:end="47:35">schib</name></expr></argument>, <argument pos:start="47:38" pos:end="47:39"><expr pos:start="47:38" pos:end="47:39"><operator pos:start="47:38" pos:end="47:38">-</operator><literal type="number" pos:start="47:39" pos:end="47:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="49:13" pos:end="53:13"><if pos:start="49:13" pos:end="53:13">if <condition pos:start="49:16" pos:end="49:22">(<expr pos:start="49:17" pos:end="49:21"><name pos:start="49:17" pos:end="49:21">found</name></expr>)</condition> <block pos:start="49:24" pos:end="53:13">{<block_content pos:start="51:17" pos:end="51:22">

                <break pos:start="51:17" pos:end="51:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="61:5" pos:end="65:5"><if pos:start="61:5" pos:end="65:5">if <condition pos:start="61:8" pos:end="61:15">(<expr pos:start="61:9" pos:end="61:14"><operator pos:start="61:9" pos:end="61:9">!</operator><name pos:start="61:10" pos:end="61:14">found</name></expr>)</condition> <block pos:start="61:17" pos:end="65:5">{<block_content pos:start="63:9" pos:end="63:54">

        <expr_stmt pos:start="63:9" pos:end="63:54"><expr pos:start="63:9" pos:end="63:53"><call pos:start="63:9" pos:end="63:53"><name pos:start="63:9" pos:end="63:20">virtio_panic</name><argument_list pos:start="63:21" pos:end="63:53">(<argument pos:start="63:22" pos:end="63:52"><expr pos:start="63:22" pos:end="63:52"><literal type="string" pos:start="63:22" pos:end="63:52">"No virtio-blk device found!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="69:5" pos:end="69:34"><expr pos:start="69:5" pos:end="69:33"><call pos:start="69:5" pos:end="69:33"><name pos:start="69:5" pos:end="69:22">virtio_setup_block</name><argument_list pos:start="69:23" pos:end="69:33">(<argument pos:start="69:24" pos:end="69:32"><expr pos:start="69:24" pos:end="69:32"><name pos:start="69:24" pos:end="69:32">blk_schid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="73:5" pos:end="77:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:36">(<expr pos:start="73:9" pos:end="73:35"><operator pos:start="73:9" pos:end="73:9">!</operator><call pos:start="73:10" pos:end="73:35"><name pos:start="73:10" pos:end="73:33">virtio_ipl_disk_is_valid</name><argument_list pos:start="73:34" pos:end="73:35">()</argument_list></call></expr>)</condition> <block pos:start="73:38" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:55">

        <expr_stmt pos:start="75:9" pos:end="75:55"><expr pos:start="75:9" pos:end="75:54"><call pos:start="75:9" pos:end="75:54"><name pos:start="75:9" pos:end="75:20">virtio_panic</name><argument_list pos:start="75:21" pos:end="75:54">(<argument pos:start="75:22" pos:end="75:53"><expr pos:start="75:22" pos:end="75:53"><literal type="string" pos:start="75:22" pos:end="75:53">"No valid hard disk detected.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
