<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16035.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:37">PerformComparison</name><parameter_list pos:start="1:38" pos:end="1:64">(<parameter pos:start="1:39" pos:end="1:63"><decl pos:start="1:39" pos:end="1:63"><type pos:start="1:39" pos:end="1:56"><specifier pos:start="1:39" pos:end="1:43">const</specifier> <name pos:start="1:45" pos:end="1:52">unsigned</name> <name pos:start="1:54" pos:end="1:56">int</name></type> <name pos:start="1:58" pos:end="1:63">opcode</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="209:1">{<block_content pos:start="5:4" pos:end="207:12">

   <decl_stmt pos:start="5:4" pos:end="5:30"><decl pos:start="5:4" pos:end="5:29"><type pos:start="5:4" pos:end="5:10"><name pos:start="5:4" pos:end="5:8">FPA11</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:15">fpa11</name> <init pos:start="5:17" pos:end="5:29">= <expr pos:start="5:19" pos:end="5:29"><call pos:start="5:19" pos:end="5:29"><name pos:start="5:19" pos:end="5:27">GET_FPA11</name><argument_list pos:start="5:28" pos:end="5:29">()</argument_list></call></expr></init></decl>;</decl_stmt>

   <decl_stmt pos:start="7:4" pos:end="7:23"><decl pos:start="7:4" pos:end="7:18"><type pos:start="7:4" pos:end="7:15"><name pos:start="7:4" pos:end="7:11">unsigned</name> <name pos:start="7:13" pos:end="7:15">int</name></type> <name pos:start="7:17" pos:end="7:18">Fn</name></decl>, <decl pos:start="7:21" pos:end="7:22"><type ref="prev" pos:start="7:4" pos:end="7:15"/><name pos:start="7:21" pos:end="7:22">Fm</name></decl>;</decl_stmt>

   <decl_stmt pos:start="9:4" pos:end="9:21"><decl pos:start="9:4" pos:end="9:15"><type pos:start="9:4" pos:end="9:11"><name pos:start="9:4" pos:end="9:11">floatx80</name></type> <name pos:start="9:13" pos:end="9:15">rFn</name></decl>, <decl pos:start="9:18" pos:end="9:20"><type ref="prev" pos:start="9:4" pos:end="9:11"/><name pos:start="9:18" pos:end="9:20">rFm</name></decl>;</decl_stmt>

   <decl_stmt pos:start="11:4" pos:end="11:34"><decl pos:start="11:4" pos:end="11:33"><type pos:start="11:4" pos:end="11:6"><name pos:start="11:4" pos:end="11:6">int</name></type> <name pos:start="11:8" pos:end="11:13">e_flag</name> <init pos:start="11:15" pos:end="11:33">= <expr pos:start="11:17" pos:end="11:33"><name pos:start="11:17" pos:end="11:22">opcode</name> <operator pos:start="11:24" pos:end="11:24">&amp;</operator> <literal type="number" pos:start="11:26" pos:end="11:33">0x400000</literal></expr></init></decl>;</decl_stmt>	<comment type="block" pos:start="11:41" pos:end="11:55">/* 1 if CxFE */</comment>

   <decl_stmt pos:start="13:4" pos:end="13:34"><decl pos:start="13:4" pos:end="13:33"><type pos:start="13:4" pos:end="13:6"><name pos:start="13:4" pos:end="13:6">int</name></type> <name pos:start="13:8" pos:end="13:13">n_flag</name> <init pos:start="13:15" pos:end="13:33">= <expr pos:start="13:17" pos:end="13:33"><name pos:start="13:17" pos:end="13:22">opcode</name> <operator pos:start="13:24" pos:end="13:24">&amp;</operator> <literal type="number" pos:start="13:26" pos:end="13:33">0x200000</literal></expr></init></decl>;</decl_stmt>	<comment type="block" pos:start="13:41" pos:end="13:55">/* 1 if CNxx */</comment>

   <decl_stmt pos:start="15:4" pos:end="15:26"><decl pos:start="15:4" pos:end="15:25"><type pos:start="15:4" pos:end="15:15"><name pos:start="15:4" pos:end="15:11">unsigned</name> <name pos:start="15:13" pos:end="15:15">int</name></type> <name pos:start="15:17" pos:end="15:21">flags</name> <init pos:start="15:23" pos:end="15:25">= <expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></init></decl>;</decl_stmt>



   <comment type="line" pos:start="19:4" pos:end="19:50">//printk("PerformComparison(0x%08x)\n",opcode);</comment>



   <expr_stmt pos:start="23:4" pos:end="23:22"><expr pos:start="23:4" pos:end="23:21"><name pos:start="23:4" pos:end="23:5">Fn</name> <operator pos:start="23:7" pos:end="23:7">=</operator> <call pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:13">getFn</name><argument_list pos:start="23:14" pos:end="23:21">(<argument pos:start="23:15" pos:end="23:20"><expr pos:start="23:15" pos:end="23:20"><name pos:start="23:15" pos:end="23:20">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <expr_stmt pos:start="25:4" pos:end="25:22"><expr pos:start="25:4" pos:end="25:21"><name pos:start="25:4" pos:end="25:5">Fm</name> <operator pos:start="25:7" pos:end="25:7">=</operator> <call pos:start="25:9" pos:end="25:21"><name pos:start="25:9" pos:end="25:13">getFm</name><argument_list pos:start="25:14" pos:end="25:21">(<argument pos:start="25:15" pos:end="25:20"><expr pos:start="25:15" pos:end="25:20"><name pos:start="25:15" pos:end="25:20">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



   <comment type="block" pos:start="29:4" pos:end="37:50">/* Check for unordered condition and convert all operands to 80-bit

      format.

      ?? Might be some mileage in avoiding this conversion if possible.

      Eg, if both operands are 32-bit, detect this and do a 32-bit

      comparison (cheaper than an 80-bit one).  */</comment>

   <switch pos:start="39:4" pos:end="87:4">switch <condition pos:start="39:11" pos:end="39:28">(<expr pos:start="39:12" pos:end="39:27"><name pos:start="39:12" pos:end="39:27"><name pos:start="39:12" pos:end="39:16">fpa11</name><operator pos:start="39:17" pos:end="39:18">-&gt;</operator><name pos:start="39:19" pos:end="39:23">fType</name><index pos:start="39:24" pos:end="39:27">[<expr pos:start="39:25" pos:end="39:26"><name pos:start="39:25" pos:end="39:26">Fn</name></expr>]</index></name></expr>)</condition>

   <block pos:start="41:4" pos:end="87:4">{<block_content pos:start="43:7" pos:end="85:24">

      <case pos:start="43:7" pos:end="43:22">case <expr pos:start="43:12" pos:end="43:21"><name pos:start="43:12" pos:end="43:21">typeSingle</name></expr>:</case>

        <comment type="line" pos:start="45:9" pos:end="45:30">//printk("single.\n");</comment>

	<if_stmt pos:start="47:9" pos:end="49:26"><if pos:start="47:9" pos:end="49:26">if <condition pos:start="47:12" pos:end="47:53">(<expr pos:start="47:13" pos:end="47:52"><call pos:start="47:13" pos:end="47:52"><name pos:start="47:13" pos:end="47:26">float32_is_nan</name><argument_list pos:start="47:27" pos:end="47:52">(<argument pos:start="47:28" pos:end="47:51"><expr pos:start="47:28" pos:end="47:51"><name pos:start="47:28" pos:end="47:43"><name pos:start="47:28" pos:end="47:32">fpa11</name><operator pos:start="47:33" pos:end="47:34">-&gt;</operator><name pos:start="47:35" pos:end="47:39">fpreg</name><index pos:start="47:40" pos:end="47:43">[<expr pos:start="47:41" pos:end="47:42"><name pos:start="47:41" pos:end="47:42">Fn</name></expr>]</index></name><operator pos:start="47:44" pos:end="47:44">.</operator><name pos:start="47:45" pos:end="47:51">fSingle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:12" pos:end="49:26"><block_content pos:start="49:12" pos:end="49:26">

	   <goto pos:start="49:12" pos:end="49:26">goto <name pos:start="49:17" pos:end="49:25">unordered</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:79"><expr pos:start="51:9" pos:end="51:78"><name pos:start="51:9" pos:end="51:11">rFn</name> <operator pos:start="51:13" pos:end="51:13">=</operator> <call pos:start="51:15" pos:end="51:78"><name pos:start="51:15" pos:end="51:33">float32_to_floatx80</name><argument_list pos:start="51:34" pos:end="51:78">(<argument pos:start="51:35" pos:end="51:58"><expr pos:start="51:35" pos:end="51:58"><name pos:start="51:35" pos:end="51:50"><name pos:start="51:35" pos:end="51:39">fpa11</name><operator pos:start="51:40" pos:end="51:41">-&gt;</operator><name pos:start="51:42" pos:end="51:46">fpreg</name><index pos:start="51:47" pos:end="51:50">[<expr pos:start="51:48" pos:end="51:49"><name pos:start="51:48" pos:end="51:49">Fn</name></expr>]</index></name><operator pos:start="51:51" pos:end="51:51">.</operator><name pos:start="51:52" pos:end="51:58">fSingle</name></expr></argument>, <argument pos:start="51:61" pos:end="51:77"><expr pos:start="51:61" pos:end="51:77"><operator pos:start="51:61" pos:end="51:61">&amp;</operator><name pos:start="51:62" pos:end="51:77"><name pos:start="51:62" pos:end="51:66">fpa11</name><operator pos:start="51:67" pos:end="51:68">-&gt;</operator><name pos:start="51:69" pos:end="51:77">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="53:7" pos:end="53:12">break;</break>



      <case pos:start="57:7" pos:end="57:22">case <expr pos:start="57:12" pos:end="57:21"><name pos:start="57:12" pos:end="57:21">typeDouble</name></expr>:</case>

        <comment type="line" pos:start="59:9" pos:end="59:30">//printk("double.\n");</comment>

	<if_stmt pos:start="61:9" pos:end="63:26"><if pos:start="61:9" pos:end="63:26">if <condition pos:start="61:12" pos:end="61:53">(<expr pos:start="61:13" pos:end="61:52"><call pos:start="61:13" pos:end="61:52"><name pos:start="61:13" pos:end="61:26">float64_is_nan</name><argument_list pos:start="61:27" pos:end="61:52">(<argument pos:start="61:28" pos:end="61:51"><expr pos:start="61:28" pos:end="61:51"><name pos:start="61:28" pos:end="61:43"><name pos:start="61:28" pos:end="61:32">fpa11</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:39">fpreg</name><index pos:start="61:40" pos:end="61:43">[<expr pos:start="61:41" pos:end="61:42"><name pos:start="61:41" pos:end="61:42">Fn</name></expr>]</index></name><operator pos:start="61:44" pos:end="61:44">.</operator><name pos:start="61:45" pos:end="61:51">fDouble</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="63:12" pos:end="63:26"><block_content pos:start="63:12" pos:end="63:26">

	   <goto pos:start="63:12" pos:end="63:26">goto <name pos:start="63:17" pos:end="63:25">unordered</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:79"><expr pos:start="65:9" pos:end="65:78"><name pos:start="65:9" pos:end="65:11">rFn</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:78"><name pos:start="65:15" pos:end="65:33">float64_to_floatx80</name><argument_list pos:start="65:34" pos:end="65:78">(<argument pos:start="65:35" pos:end="65:58"><expr pos:start="65:35" pos:end="65:58"><name pos:start="65:35" pos:end="65:50"><name pos:start="65:35" pos:end="65:39">fpa11</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:46">fpreg</name><index pos:start="65:47" pos:end="65:50">[<expr pos:start="65:48" pos:end="65:49"><name pos:start="65:48" pos:end="65:49">Fn</name></expr>]</index></name><operator pos:start="65:51" pos:end="65:51">.</operator><name pos:start="65:52" pos:end="65:58">fDouble</name></expr></argument>, <argument pos:start="65:61" pos:end="65:77"><expr pos:start="65:61" pos:end="65:77"><operator pos:start="65:61" pos:end="65:61">&amp;</operator><name pos:start="65:62" pos:end="65:77"><name pos:start="65:62" pos:end="65:66">fpa11</name><operator pos:start="65:67" pos:end="65:68">-&gt;</operator><name pos:start="65:69" pos:end="65:77">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <break pos:start="67:7" pos:end="67:12">break;</break>



      <case pos:start="71:7" pos:end="71:24">case <expr pos:start="71:12" pos:end="71:23"><name pos:start="71:12" pos:end="71:23">typeExtended</name></expr>:</case>

        <comment type="line" pos:start="73:9" pos:end="73:32">//printk("extended.\n");</comment>

	<if_stmt pos:start="75:9" pos:end="77:26"><if pos:start="75:9" pos:end="77:26">if <condition pos:start="75:12" pos:end="75:56">(<expr pos:start="75:13" pos:end="75:55"><call pos:start="75:13" pos:end="75:55"><name pos:start="75:13" pos:end="75:27">floatx80_is_nan</name><argument_list pos:start="75:28" pos:end="75:55">(<argument pos:start="75:29" pos:end="75:54"><expr pos:start="75:29" pos:end="75:54"><name pos:start="75:29" pos:end="75:44"><name pos:start="75:29" pos:end="75:33">fpa11</name><operator pos:start="75:34" pos:end="75:35">-&gt;</operator><name pos:start="75:36" pos:end="75:40">fpreg</name><index pos:start="75:41" pos:end="75:44">[<expr pos:start="75:42" pos:end="75:43"><name pos:start="75:42" pos:end="75:43">Fn</name></expr>]</index></name><operator pos:start="75:45" pos:end="75:45">.</operator><name pos:start="75:46" pos:end="75:54">fExtended</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="77:12" pos:end="77:26"><block_content pos:start="77:12" pos:end="77:26">

	   <goto pos:start="77:12" pos:end="77:26">goto <name pos:start="77:17" pos:end="77:25">unordered</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:41"><expr pos:start="79:9" pos:end="79:40"><name pos:start="79:9" pos:end="79:11">rFn</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <name pos:start="79:15" pos:end="79:30"><name pos:start="79:15" pos:end="79:19">fpa11</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:26">fpreg</name><index pos:start="79:27" pos:end="79:30">[<expr pos:start="79:28" pos:end="79:29"><name pos:start="79:28" pos:end="79:29">Fn</name></expr>]</index></name><operator pos:start="79:31" pos:end="79:31">.</operator><name pos:start="79:32" pos:end="79:40">fExtended</name></expr>;</expr_stmt>

      <break pos:start="81:7" pos:end="81:12">break;</break>



      <default pos:start="85:7" pos:end="85:14">default:</default> <return pos:start="85:16" pos:end="85:24">return <expr pos:start="85:23" pos:end="85:23"><literal type="number" pos:start="85:23" pos:end="85:23">0</literal></expr>;</return>

   </block_content>}</block></switch>



   <if_stmt pos:start="91:4" pos:end="161:4"><if pos:start="91:4" pos:end="103:4">if <condition pos:start="91:7" pos:end="91:27">(<expr pos:start="91:8" pos:end="91:26"><call pos:start="91:8" pos:end="91:26"><name pos:start="91:8" pos:end="91:18">CONSTANT_FM</name><argument_list pos:start="91:19" pos:end="91:26">(<argument pos:start="91:20" pos:end="91:25"><expr pos:start="91:20" pos:end="91:25"><name pos:start="91:20" pos:end="91:25">opcode</name></expr></argument>)</argument_list></call></expr>)</condition>

   <block pos:start="93:4" pos:end="103:4">{<block_content pos:start="97:6" pos:end="101:23">

     <comment type="line" pos:start="95:6" pos:end="95:45">//printk("Fm is a constant: #%d.\n",Fm);</comment>

     <expr_stmt pos:start="97:6" pos:end="97:35"><expr pos:start="97:6" pos:end="97:34"><name pos:start="97:6" pos:end="97:8">rFm</name> <operator pos:start="97:10" pos:end="97:10">=</operator> <call pos:start="97:12" pos:end="97:34"><name pos:start="97:12" pos:end="97:30">getExtendedConstant</name><argument_list pos:start="97:31" pos:end="97:34">(<argument pos:start="97:32" pos:end="97:33"><expr pos:start="97:32" pos:end="97:33"><name pos:start="97:32" pos:end="97:33">Fm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <if_stmt pos:start="99:6" pos:end="101:23"><if pos:start="99:6" pos:end="101:23">if <condition pos:start="99:9" pos:end="99:30">(<expr pos:start="99:10" pos:end="99:29"><call pos:start="99:10" pos:end="99:29"><name pos:start="99:10" pos:end="99:24">floatx80_is_nan</name><argument_list pos:start="99:25" pos:end="99:29">(<argument pos:start="99:26" pos:end="99:28"><expr pos:start="99:26" pos:end="99:28"><name pos:start="99:26" pos:end="99:28">rFm</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="101:9" pos:end="101:23"><block_content pos:start="101:9" pos:end="101:23">

        <goto pos:start="101:9" pos:end="101:23">goto <name pos:start="101:14" pos:end="101:22">unordered</name>;</goto></block_content></block></if></if_stmt>

   </block_content>}</block></if>

   <else pos:start="105:4" pos:end="161:4">else

   <block pos:start="107:4" pos:end="161:4">{<block_content pos:start="111:7" pos:end="159:7">

     <comment type="line" pos:start="109:6" pos:end="109:47">//printk("Fm = r%d which contains a ",Fm);</comment>

      <switch pos:start="111:7" pos:end="159:7">switch <condition pos:start="111:14" pos:end="111:31">(<expr pos:start="111:15" pos:end="111:30"><name pos:start="111:15" pos:end="111:30"><name pos:start="111:15" pos:end="111:19">fpa11</name><operator pos:start="111:20" pos:end="111:21">-&gt;</operator><name pos:start="111:22" pos:end="111:26">fType</name><index pos:start="111:27" pos:end="111:30">[<expr pos:start="111:28" pos:end="111:29"><name pos:start="111:28" pos:end="111:29">Fm</name></expr>]</index></name></expr>)</condition>

      <block pos:start="113:7" pos:end="159:7">{<block_content pos:start="115:10" pos:end="157:27">

         <case pos:start="115:10" pos:end="115:25">case <expr pos:start="115:15" pos:end="115:24"><name pos:start="115:15" pos:end="115:24">typeSingle</name></expr>:</case>

           <comment type="line" pos:start="117:12" pos:end="117:33">//printk("single.\n");</comment>

	   <if_stmt pos:start="119:12" pos:end="121:29"><if pos:start="119:12" pos:end="121:29">if <condition pos:start="119:15" pos:end="119:56">(<expr pos:start="119:16" pos:end="119:55"><call pos:start="119:16" pos:end="119:55"><name pos:start="119:16" pos:end="119:29">float32_is_nan</name><argument_list pos:start="119:30" pos:end="119:55">(<argument pos:start="119:31" pos:end="119:54"><expr pos:start="119:31" pos:end="119:54"><name pos:start="119:31" pos:end="119:46"><name pos:start="119:31" pos:end="119:35">fpa11</name><operator pos:start="119:36" pos:end="119:37">-&gt;</operator><name pos:start="119:38" pos:end="119:42">fpreg</name><index pos:start="119:43" pos:end="119:46">[<expr pos:start="119:44" pos:end="119:45"><name pos:start="119:44" pos:end="119:45">Fm</name></expr>]</index></name><operator pos:start="119:47" pos:end="119:47">.</operator><name pos:start="119:48" pos:end="119:54">fSingle</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="121:15" pos:end="121:29"><block_content pos:start="121:15" pos:end="121:29">

	      <goto pos:start="121:15" pos:end="121:29">goto <name pos:start="121:20" pos:end="121:28">unordered</name>;</goto></block_content></block></if></if_stmt>

           <expr_stmt pos:start="123:12" pos:end="123:82"><expr pos:start="123:12" pos:end="123:81"><name pos:start="123:12" pos:end="123:14">rFm</name> <operator pos:start="123:16" pos:end="123:16">=</operator> <call pos:start="123:18" pos:end="123:81"><name pos:start="123:18" pos:end="123:36">float32_to_floatx80</name><argument_list pos:start="123:37" pos:end="123:81">(<argument pos:start="123:38" pos:end="123:61"><expr pos:start="123:38" pos:end="123:61"><name pos:start="123:38" pos:end="123:53"><name pos:start="123:38" pos:end="123:42">fpa11</name><operator pos:start="123:43" pos:end="123:44">-&gt;</operator><name pos:start="123:45" pos:end="123:49">fpreg</name><index pos:start="123:50" pos:end="123:53">[<expr pos:start="123:51" pos:end="123:52"><name pos:start="123:51" pos:end="123:52">Fm</name></expr>]</index></name><operator pos:start="123:54" pos:end="123:54">.</operator><name pos:start="123:55" pos:end="123:61">fSingle</name></expr></argument>, <argument pos:start="123:64" pos:end="123:80"><expr pos:start="123:64" pos:end="123:80"><operator pos:start="123:64" pos:end="123:64">&amp;</operator><name pos:start="123:65" pos:end="123:80"><name pos:start="123:65" pos:end="123:69">fpa11</name><operator pos:start="123:70" pos:end="123:71">-&gt;</operator><name pos:start="123:72" pos:end="123:80">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="125:10" pos:end="125:15">break;</break>



         <case pos:start="129:10" pos:end="129:25">case <expr pos:start="129:15" pos:end="129:24"><name pos:start="129:15" pos:end="129:24">typeDouble</name></expr>:</case>

           <comment type="line" pos:start="131:12" pos:end="131:33">//printk("double.\n");</comment>

	   <if_stmt pos:start="133:12" pos:end="135:29"><if pos:start="133:12" pos:end="135:29">if <condition pos:start="133:15" pos:end="133:56">(<expr pos:start="133:16" pos:end="133:55"><call pos:start="133:16" pos:end="133:55"><name pos:start="133:16" pos:end="133:29">float64_is_nan</name><argument_list pos:start="133:30" pos:end="133:55">(<argument pos:start="133:31" pos:end="133:54"><expr pos:start="133:31" pos:end="133:54"><name pos:start="133:31" pos:end="133:46"><name pos:start="133:31" pos:end="133:35">fpa11</name><operator pos:start="133:36" pos:end="133:37">-&gt;</operator><name pos:start="133:38" pos:end="133:42">fpreg</name><index pos:start="133:43" pos:end="133:46">[<expr pos:start="133:44" pos:end="133:45"><name pos:start="133:44" pos:end="133:45">Fm</name></expr>]</index></name><operator pos:start="133:47" pos:end="133:47">.</operator><name pos:start="133:48" pos:end="133:54">fDouble</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="135:15" pos:end="135:29"><block_content pos:start="135:15" pos:end="135:29">

	      <goto pos:start="135:15" pos:end="135:29">goto <name pos:start="135:20" pos:end="135:28">unordered</name>;</goto></block_content></block></if></if_stmt>

           <expr_stmt pos:start="137:12" pos:end="137:82"><expr pos:start="137:12" pos:end="137:81"><name pos:start="137:12" pos:end="137:14">rFm</name> <operator pos:start="137:16" pos:end="137:16">=</operator> <call pos:start="137:18" pos:end="137:81"><name pos:start="137:18" pos:end="137:36">float64_to_floatx80</name><argument_list pos:start="137:37" pos:end="137:81">(<argument pos:start="137:38" pos:end="137:61"><expr pos:start="137:38" pos:end="137:61"><name pos:start="137:38" pos:end="137:53"><name pos:start="137:38" pos:end="137:42">fpa11</name><operator pos:start="137:43" pos:end="137:44">-&gt;</operator><name pos:start="137:45" pos:end="137:49">fpreg</name><index pos:start="137:50" pos:end="137:53">[<expr pos:start="137:51" pos:end="137:52"><name pos:start="137:51" pos:end="137:52">Fm</name></expr>]</index></name><operator pos:start="137:54" pos:end="137:54">.</operator><name pos:start="137:55" pos:end="137:61">fDouble</name></expr></argument>, <argument pos:start="137:64" pos:end="137:80"><expr pos:start="137:64" pos:end="137:80"><operator pos:start="137:64" pos:end="137:64">&amp;</operator><name pos:start="137:65" pos:end="137:80"><name pos:start="137:65" pos:end="137:69">fpa11</name><operator pos:start="137:70" pos:end="137:71">-&gt;</operator><name pos:start="137:72" pos:end="137:80">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

         <break pos:start="139:10" pos:end="139:15">break;</break>



         <case pos:start="143:10" pos:end="143:27">case <expr pos:start="143:15" pos:end="143:26"><name pos:start="143:15" pos:end="143:26">typeExtended</name></expr>:</case>

           <comment type="line" pos:start="145:12" pos:end="145:35">//printk("extended.\n");</comment>

	   <if_stmt pos:start="147:12" pos:end="149:29"><if pos:start="147:12" pos:end="149:29">if <condition pos:start="147:15" pos:end="147:59">(<expr pos:start="147:16" pos:end="147:58"><call pos:start="147:16" pos:end="147:58"><name pos:start="147:16" pos:end="147:30">floatx80_is_nan</name><argument_list pos:start="147:31" pos:end="147:58">(<argument pos:start="147:32" pos:end="147:57"><expr pos:start="147:32" pos:end="147:57"><name pos:start="147:32" pos:end="147:47"><name pos:start="147:32" pos:end="147:36">fpa11</name><operator pos:start="147:37" pos:end="147:38">-&gt;</operator><name pos:start="147:39" pos:end="147:43">fpreg</name><index pos:start="147:44" pos:end="147:47">[<expr pos:start="147:45" pos:end="147:46"><name pos:start="147:45" pos:end="147:46">Fm</name></expr>]</index></name><operator pos:start="147:48" pos:end="147:48">.</operator><name pos:start="147:49" pos:end="147:57">fExtended</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="149:15" pos:end="149:29"><block_content pos:start="149:15" pos:end="149:29">

	      <goto pos:start="149:15" pos:end="149:29">goto <name pos:start="149:20" pos:end="149:28">unordered</name>;</goto></block_content></block></if></if_stmt>

           <expr_stmt pos:start="151:12" pos:end="151:44"><expr pos:start="151:12" pos:end="151:43"><name pos:start="151:12" pos:end="151:14">rFm</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <name pos:start="151:18" pos:end="151:33"><name pos:start="151:18" pos:end="151:22">fpa11</name><operator pos:start="151:23" pos:end="151:24">-&gt;</operator><name pos:start="151:25" pos:end="151:29">fpreg</name><index pos:start="151:30" pos:end="151:33">[<expr pos:start="151:31" pos:end="151:32"><name pos:start="151:31" pos:end="151:32">Fm</name></expr>]</index></name><operator pos:start="151:34" pos:end="151:34">.</operator><name pos:start="151:35" pos:end="151:43">fExtended</name></expr>;</expr_stmt>

         <break pos:start="153:10" pos:end="153:15">break;</break>



         <default pos:start="157:10" pos:end="157:17">default:</default> <return pos:start="157:19" pos:end="157:27">return <expr pos:start="157:26" pos:end="157:26"><literal type="number" pos:start="157:26" pos:end="157:26">0</literal></expr>;</return>

      </block_content>}</block></switch>

   </block_content>}</block></else></if_stmt>



   <if_stmt pos:start="165:4" pos:end="171:4"><if pos:start="165:4" pos:end="171:4">if <condition pos:start="165:7" pos:end="165:14">(<expr pos:start="165:8" pos:end="165:13"><name pos:start="165:8" pos:end="165:13">n_flag</name></expr>)</condition>

   <block pos:start="167:4" pos:end="171:4">{<block_content pos:start="169:7" pos:end="169:25">

      <expr_stmt pos:start="169:7" pos:end="169:25"><expr pos:start="169:7" pos:end="169:24"><name pos:start="169:7" pos:end="169:14"><name pos:start="169:7" pos:end="169:9">rFm</name><operator pos:start="169:10" pos:end="169:10">.</operator><name pos:start="169:11" pos:end="169:14">high</name></name> <operator pos:start="169:16" pos:end="169:17">^=</operator> <literal type="number" pos:start="169:19" pos:end="169:24">0x8000</literal></expr>;</expr_stmt>

   </block_content>}</block></if></if_stmt>



   <return pos:start="175:4" pos:end="175:46">return <expr pos:start="175:11" pos:end="175:45"><call pos:start="175:11" pos:end="175:45"><name pos:start="175:11" pos:end="175:36">PerformComparisonOperation</name><argument_list pos:start="175:37" pos:end="175:45">(<argument pos:start="175:38" pos:end="175:40"><expr pos:start="175:38" pos:end="175:40"><name pos:start="175:38" pos:end="175:40">rFn</name></expr></argument>,<argument pos:start="175:42" pos:end="175:44"><expr pos:start="175:42" pos:end="175:44"><name pos:start="175:42" pos:end="175:44">rFm</name></expr></argument>)</argument_list></call></expr>;</return>



 <label pos:start="179:2" pos:end="179:11"><name pos:start="179:2" pos:end="179:10">unordered</name>:</label>

   <comment type="block" pos:start="181:4" pos:end="189:64">/* ?? The FPA data sheet is pretty vague about this, in particular

      about whether the non-E comparisons can ever raise exceptions.

      This implementation is based on a combination of what it says in

      the data sheet, observation of how the Acorn emulator actually

      behaves (and how programs expect it to) and guesswork.  */</comment>

   <expr_stmt pos:start="191:4" pos:end="191:24"><expr pos:start="191:4" pos:end="191:23"><name pos:start="191:4" pos:end="191:8">flags</name> <operator pos:start="191:10" pos:end="191:11">|=</operator> <name pos:start="191:13" pos:end="191:23">CC_OVERFLOW</name></expr>;</expr_stmt>

   <expr_stmt pos:start="193:4" pos:end="193:37"><expr pos:start="193:4" pos:end="193:36"><name pos:start="193:4" pos:end="193:8">flags</name> <operator pos:start="193:10" pos:end="193:11">&amp;=</operator> <operator pos:start="193:13" pos:end="193:13">~</operator><operator pos:start="193:14" pos:end="193:14">(</operator><name pos:start="193:15" pos:end="193:21">CC_ZERO</name> <operator pos:start="193:23" pos:end="193:23">|</operator> <name pos:start="193:25" pos:end="193:35">CC_NEGATIVE</name><operator pos:start="193:36" pos:end="193:36">)</operator></expr>;</expr_stmt>



   <if_stmt pos:start="197:4" pos:end="197:46"><if pos:start="197:4" pos:end="197:46">if <condition pos:start="197:7" pos:end="197:27">(<expr pos:start="197:8" pos:end="197:26"><name pos:start="197:8" pos:end="197:13">BIT_AC</name> <operator pos:start="197:15" pos:end="197:15">&amp;</operator> <call pos:start="197:17" pos:end="197:26"><name pos:start="197:17" pos:end="197:24">readFPSR</name><argument_list pos:start="197:25" pos:end="197:26">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="197:29" pos:end="197:46"><block_content pos:start="197:29" pos:end="197:46"> <expr_stmt pos:start="197:29" pos:end="197:46"><expr pos:start="197:29" pos:end="197:45"><name pos:start="197:29" pos:end="197:33">flags</name> <operator pos:start="197:35" pos:end="197:36">|=</operator> <name pos:start="197:38" pos:end="197:45">CC_CARRY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



   <if_stmt pos:start="201:4" pos:end="201:66"><if pos:start="201:4" pos:end="201:66">if <condition pos:start="201:7" pos:end="201:14">(<expr pos:start="201:8" pos:end="201:13"><name pos:start="201:8" pos:end="201:13">e_flag</name></expr>)</condition><block type="pseudo" pos:start="201:16" pos:end="201:66"><block_content pos:start="201:16" pos:end="201:66"> <expr_stmt pos:start="201:16" pos:end="201:66"><expr pos:start="201:16" pos:end="201:65"><call pos:start="201:16" pos:end="201:65"><name pos:start="201:16" pos:end="201:26">float_raise</name><argument_list pos:start="201:27" pos:end="201:65">(<argument pos:start="201:28" pos:end="201:45"><expr pos:start="201:28" pos:end="201:45"><name pos:start="201:28" pos:end="201:45">float_flag_invalid</name></expr></argument>, <argument pos:start="201:48" pos:end="201:64"><expr pos:start="201:48" pos:end="201:64"><operator pos:start="201:48" pos:end="201:48">&amp;</operator><name pos:start="201:49" pos:end="201:64"><name pos:start="201:49" pos:end="201:53">fpa11</name><operator pos:start="201:54" pos:end="201:55">-&gt;</operator><name pos:start="201:56" pos:end="201:64">fp_status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



   <expr_stmt pos:start="205:4" pos:end="205:30"><expr pos:start="205:4" pos:end="205:29"><call pos:start="205:4" pos:end="205:29"><name pos:start="205:4" pos:end="205:22">writeConditionCodes</name><argument_list pos:start="205:23" pos:end="205:29">(<argument pos:start="205:24" pos:end="205:28"><expr pos:start="205:24" pos:end="205:28"><name pos:start="205:24" pos:end="205:28">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <return pos:start="207:4" pos:end="207:12">return <expr pos:start="207:11" pos:end="207:11"><literal type="number" pos:start="207:11" pos:end="207:11">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
