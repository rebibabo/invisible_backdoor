<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17089.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:29">s390_cpu_handle_mmu_fault</name><parameter_list pos:start="1:30" pos:end="3:50">(<parameter pos:start="1:31" pos:end="1:42"><decl pos:start="1:31" pos:end="1:42"><type pos:start="1:31" pos:end="1:42"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:42">cs</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:60"><decl pos:start="1:45" pos:end="1:60"><type pos:start="1:45" pos:end="1:60"><name pos:start="1:45" pos:end="1:49">vaddr</name></type> <name pos:start="1:51" pos:end="1:60">orig_vaddr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:36"><decl pos:start="3:31" pos:end="3:36"><type pos:start="3:31" pos:end="3:36"><name pos:start="3:31" pos:end="3:33">int</name></type> <name pos:start="3:35" pos:end="3:36">rw</name></decl></parameter>, <parameter pos:start="3:39" pos:end="3:49"><decl pos:start="3:39" pos:end="3:49"><type pos:start="3:39" pos:end="3:49"><name pos:start="3:39" pos:end="3:41">int</name></type> <name pos:start="3:43" pos:end="3:49">mmu_idx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="97:1">{<block_content pos:start="7:5" pos:end="95:13">

    <decl_stmt pos:start="7:5" pos:end="7:32"><decl pos:start="7:5" pos:end="7:31"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">S390CPU</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:16">cpu</name> <init pos:start="7:18" pos:end="7:31">= <expr pos:start="7:20" pos:end="7:31"><call pos:start="7:20" pos:end="7:31"><name pos:start="7:20" pos:end="7:27">S390_CPU</name><argument_list pos:start="7:28" pos:end="7:31">(<argument pos:start="7:29" pos:end="7:30"><expr pos:start="7:29" pos:end="7:30"><name pos:start="7:29" pos:end="7:30">cs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:34"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">CPUS390XState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">env</name> <init pos:start="9:24" pos:end="9:34">= <expr pos:start="9:26" pos:end="9:34"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:34"><name pos:start="9:27" pos:end="9:29">cpu</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:34">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">target_ulong</name></type> <name pos:start="11:18" pos:end="11:22">vaddr</name></decl>, <decl pos:start="11:25" pos:end="11:29"><type ref="prev" pos:start="11:5" pos:end="11:16"/><name pos:start="11:25" pos:end="11:29">raddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint64_t</name></type> <name pos:start="13:14" pos:end="13:16">asc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:13"><decl pos:start="15:5" pos:end="15:12"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:12">prot</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:47"><expr pos:start="19:5" pos:end="21:46"><call pos:start="19:5" pos:end="21:46"><name pos:start="19:5" pos:end="19:11">DPRINTF</name><argument_list pos:start="19:12" pos:end="21:46">(<argument pos:start="19:13" pos:end="19:62"><expr pos:start="19:13" pos:end="19:62"><literal type="string" pos:start="19:13" pos:end="19:29">"%s: address 0x%"</literal> <name pos:start="19:31" pos:end="19:40">VADDR_PRIx</name> <literal type="string" pos:start="19:42" pos:end="19:62">" rw %d mmu_idx %d\n"</literal></expr></argument>,

            <argument pos:start="21:13" pos:end="21:20"><expr pos:start="21:13" pos:end="21:20"><name pos:start="21:13" pos:end="21:20">__func__</name></expr></argument>, <argument pos:start="21:23" pos:end="21:32"><expr pos:start="21:23" pos:end="21:32"><name pos:start="21:23" pos:end="21:32">orig_vaddr</name></expr></argument>, <argument pos:start="21:35" pos:end="21:36"><expr pos:start="21:35" pos:end="21:36"><name pos:start="21:35" pos:end="21:36">rw</name></expr></argument>, <argument pos:start="21:39" pos:end="21:45"><expr pos:start="21:39" pos:end="21:45"><name pos:start="21:39" pos:end="21:45">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:35"><expr pos:start="25:5" pos:end="25:34"><name pos:start="25:5" pos:end="25:14">orig_vaddr</name> <operator pos:start="25:16" pos:end="25:17">&amp;=</operator> <name pos:start="25:19" pos:end="25:34">TARGET_PAGE_MASK</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:23"><expr pos:start="27:5" pos:end="27:22"><name pos:start="27:5" pos:end="27:9">vaddr</name> <operator pos:start="27:11" pos:end="27:11">=</operator> <name pos:start="27:13" pos:end="27:22">orig_vaddr</name></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="61:5"><if pos:start="31:5" pos:end="49:5">if <condition pos:start="31:8" pos:end="31:31">(<expr pos:start="31:9" pos:end="31:30"><name pos:start="31:9" pos:end="31:15">mmu_idx</name> <operator pos:start="31:17" pos:end="31:17">&lt;</operator> <name pos:start="31:19" pos:end="31:30">MMU_REAL_IDX</name></expr>)</condition> <block pos:start="31:33" pos:end="49:5">{<block_content pos:start="33:9" pos:end="47:9">

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:11">asc</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <call pos:start="33:15" pos:end="33:41"><name pos:start="33:15" pos:end="33:32">cpu_mmu_idx_to_asc</name><argument_list pos:start="33:33" pos:end="33:41">(<argument pos:start="33:34" pos:end="33:40"><expr pos:start="33:34" pos:end="33:40"><name pos:start="33:34" pos:end="33:40">mmu_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:25">/* 31-Bit mode */</comment>

        <if_stmt pos:start="37:9" pos:end="41:9"><if pos:start="37:9" pos:end="41:9">if <condition pos:start="37:12" pos:end="37:43">(<expr pos:start="37:13" pos:end="37:42"><operator pos:start="37:13" pos:end="37:13">!</operator><operator pos:start="37:14" pos:end="37:14">(</operator><name pos:start="37:15" pos:end="37:27"><name pos:start="37:15" pos:end="37:17">env</name><operator pos:start="37:18" pos:end="37:19">-&gt;</operator><name pos:start="37:20" pos:end="37:22">psw</name><operator pos:start="37:23" pos:end="37:23">.</operator><name pos:start="37:24" pos:end="37:27">mask</name></name> <operator pos:start="37:29" pos:end="37:29">&amp;</operator> <name pos:start="37:31" pos:end="37:41">PSW_MASK_64</name><operator pos:start="37:42" pos:end="37:42">)</operator></expr>)</condition> <block pos:start="37:45" pos:end="41:9">{<block_content pos:start="39:13" pos:end="39:32">

            <expr_stmt pos:start="39:13" pos:end="39:32"><expr pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:17">vaddr</name> <operator pos:start="39:19" pos:end="39:20">&amp;=</operator> <literal type="number" pos:start="39:22" pos:end="39:31">0x7fffffff</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:68">(<expr pos:start="43:13" pos:end="43:67"><call pos:start="43:13" pos:end="43:67"><name pos:start="43:13" pos:end="43:25">mmu_translate</name><argument_list pos:start="43:26" pos:end="43:67">(<argument pos:start="43:27" pos:end="43:29"><expr pos:start="43:27" pos:end="43:29"><name pos:start="43:27" pos:end="43:29">env</name></expr></argument>, <argument pos:start="43:32" pos:end="43:36"><expr pos:start="43:32" pos:end="43:36"><name pos:start="43:32" pos:end="43:36">vaddr</name></expr></argument>, <argument pos:start="43:39" pos:end="43:40"><expr pos:start="43:39" pos:end="43:40"><name pos:start="43:39" pos:end="43:40">rw</name></expr></argument>, <argument pos:start="43:43" pos:end="43:45"><expr pos:start="43:43" pos:end="43:45"><name pos:start="43:43" pos:end="43:45">asc</name></expr></argument>, <argument pos:start="43:48" pos:end="43:53"><expr pos:start="43:48" pos:end="43:53"><operator pos:start="43:48" pos:end="43:48">&amp;</operator><name pos:start="43:49" pos:end="43:53">raddr</name></expr></argument>, <argument pos:start="43:56" pos:end="43:60"><expr pos:start="43:56" pos:end="43:60"><operator pos:start="43:56" pos:end="43:56">&amp;</operator><name pos:start="43:57" pos:end="43:60">prot</name></expr></argument>, <argument pos:start="43:63" pos:end="43:66"><expr pos:start="43:63" pos:end="43:66"><name pos:start="43:63" pos:end="43:66">true</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:70" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:21">

            <return pos:start="45:13" pos:end="45:21">return <expr pos:start="45:20" pos:end="45:20"><literal type="number" pos:start="45:20" pos:end="45:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="49:7" pos:end="57:5">else if <condition pos:start="49:15" pos:end="49:39">(<expr pos:start="49:16" pos:end="49:38"><name pos:start="49:16" pos:end="49:22">mmu_idx</name> <operator pos:start="49:24" pos:end="49:25">==</operator> <name pos:start="49:27" pos:end="49:38">MMU_REAL_IDX</name></expr>)</condition> <block pos:start="49:41" pos:end="57:5">{<block_content pos:start="51:9" pos:end="55:9">

        <if_stmt pos:start="51:9" pos:end="55:9"><if pos:start="51:9" pos:end="55:9">if <condition pos:start="51:12" pos:end="51:62">(<expr pos:start="51:13" pos:end="51:61"><call pos:start="51:13" pos:end="51:61"><name pos:start="51:13" pos:end="51:30">mmu_translate_real</name><argument_list pos:start="51:31" pos:end="51:61">(<argument pos:start="51:32" pos:end="51:34"><expr pos:start="51:32" pos:end="51:34"><name pos:start="51:32" pos:end="51:34">env</name></expr></argument>, <argument pos:start="51:37" pos:end="51:41"><expr pos:start="51:37" pos:end="51:41"><name pos:start="51:37" pos:end="51:41">vaddr</name></expr></argument>, <argument pos:start="51:44" pos:end="51:45"><expr pos:start="51:44" pos:end="51:45"><name pos:start="51:44" pos:end="51:45">rw</name></expr></argument>, <argument pos:start="51:48" pos:end="51:53"><expr pos:start="51:48" pos:end="51:53"><operator pos:start="51:48" pos:end="51:48">&amp;</operator><name pos:start="51:49" pos:end="51:53">raddr</name></expr></argument>, <argument pos:start="51:56" pos:end="51:60"><expr pos:start="51:56" pos:end="51:60"><operator pos:start="51:56" pos:end="51:56">&amp;</operator><name pos:start="51:57" pos:end="51:60">prot</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="51:64" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:21">

            <return pos:start="53:13" pos:end="53:21">return <expr pos:start="53:20" pos:end="53:20"><literal type="number" pos:start="53:20" pos:end="53:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="57:7" pos:end="61:5">else <block pos:start="57:12" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:16">

        <expr_stmt pos:start="59:9" pos:end="59:16"><expr pos:start="59:9" pos:end="59:15"><call pos:start="59:9" pos:end="59:15"><name pos:start="59:9" pos:end="59:13">abort</name><argument_list pos:start="59:14" pos:end="59:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:33">/* check out of RAM access */</comment>

    <if_stmt pos:start="67:5" pos:end="79:5"><if pos:start="67:5" pos:end="79:5">if <condition pos:start="67:8" pos:end="69:58">(<expr pos:start="67:9" pos:end="69:57"><operator pos:start="67:9" pos:end="67:9">!</operator><call pos:start="67:10" pos:end="69:57"><name pos:start="67:10" pos:end="67:35">address_space_access_valid</name><argument_list pos:start="67:36" pos:end="69:57">(<argument pos:start="67:37" pos:end="67:57"><expr pos:start="67:37" pos:end="67:57"><operator pos:start="67:37" pos:end="67:37">&amp;</operator><name pos:start="67:38" pos:end="67:57">address_space_memory</name></expr></argument>, <argument pos:start="67:60" pos:end="67:64"><expr pos:start="67:60" pos:end="67:64"><name pos:start="67:60" pos:end="67:64">raddr</name></expr></argument>,

                                    <argument pos:start="69:37" pos:end="69:52"><expr pos:start="69:37" pos:end="69:52"><name pos:start="69:37" pos:end="69:52">TARGET_PAGE_SIZE</name></expr></argument>, <argument pos:start="69:55" pos:end="69:56"><expr pos:start="69:55" pos:end="69:56"><name pos:start="69:55" pos:end="69:56">rw</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:60" pos:end="79:5">{<block_content pos:start="71:9" pos:end="77:17">

        <expr_stmt pos:start="71:9" pos:end="73:53"><expr pos:start="71:9" pos:end="73:52"><call pos:start="71:9" pos:end="73:52"><name pos:start="71:9" pos:end="71:15">DPRINTF</name><argument_list pos:start="71:16" pos:end="73:52">(<argument pos:start="71:17" pos:end="71:64"><expr pos:start="71:17" pos:end="71:64"><literal type="string" pos:start="71:17" pos:end="71:29">"%s: raddr %"</literal> <name pos:start="71:31" pos:end="71:36">PRIx64</name> <literal type="string" pos:start="71:38" pos:end="71:52">" &gt; ram_size %"</literal> <name pos:start="71:54" pos:end="71:59">PRIx64</name> <literal type="string" pos:start="71:61" pos:end="71:64">"\n"</literal></expr></argument>, <argument pos:start="71:67" pos:end="71:74"><expr pos:start="71:67" pos:end="71:74"><name pos:start="71:67" pos:end="71:74">__func__</name></expr></argument>,

                <argument pos:start="73:17" pos:end="73:31"><expr pos:start="73:17" pos:end="73:31"><operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:25">uint64_t</name><operator pos:start="73:26" pos:end="73:26">)</operator><name pos:start="73:27" pos:end="73:31">raddr</name></expr></argument>, <argument pos:start="73:34" pos:end="73:51"><expr pos:start="73:34" pos:end="73:51"><operator pos:start="73:34" pos:end="73:34">(</operator><name pos:start="73:35" pos:end="73:42">uint64_t</name><operator pos:start="73:43" pos:end="73:43">)</operator><name pos:start="73:44" pos:end="73:51">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:62"><expr pos:start="75:9" pos:end="75:61"><call pos:start="75:9" pos:end="75:61"><name pos:start="75:9" pos:end="75:29">trigger_pgm_exception</name><argument_list pos:start="75:30" pos:end="75:61">(<argument pos:start="75:31" pos:end="75:33"><expr pos:start="75:31" pos:end="75:33"><name pos:start="75:31" pos:end="75:33">env</name></expr></argument>, <argument pos:start="75:36" pos:end="75:49"><expr pos:start="75:36" pos:end="75:49"><name pos:start="75:36" pos:end="75:49">PGM_ADDRESSING</name></expr></argument>, <argument pos:start="75:52" pos:end="75:60"><expr pos:start="75:52" pos:end="75:60"><name pos:start="75:52" pos:end="75:60">ILEN_AUTO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:17">return <expr pos:start="77:16" pos:end="77:16"><literal type="number" pos:start="77:16" pos:end="77:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="83:5" pos:end="85:62"><expr pos:start="83:5" pos:end="85:61"><call pos:start="83:5" pos:end="85:61"><name pos:start="83:5" pos:end="83:17">qemu_log_mask</name><argument_list pos:start="83:18" pos:end="85:61">(<argument pos:start="83:19" pos:end="83:29"><expr pos:start="83:19" pos:end="83:29"><name pos:start="83:19" pos:end="83:29">CPU_LOG_MMU</name></expr></argument>, <argument pos:start="83:32" pos:end="83:78"><expr pos:start="83:32" pos:end="83:78"><literal type="string" pos:start="83:32" pos:end="83:46">"%s: set tlb %"</literal> <name pos:start="83:48" pos:end="83:53">PRIx64</name> <literal type="string" pos:start="83:55" pos:end="83:61">" -&gt; %"</literal> <name pos:start="83:63" pos:end="83:68">PRIx64</name> <literal type="string" pos:start="83:70" pos:end="83:78">" (%x)\n"</literal></expr></argument>,

            <argument pos:start="85:13" pos:end="85:20"><expr pos:start="85:13" pos:end="85:20"><name pos:start="85:13" pos:end="85:20">__func__</name></expr></argument>, <argument pos:start="85:23" pos:end="85:37"><expr pos:start="85:23" pos:end="85:37"><operator pos:start="85:23" pos:end="85:23">(</operator><name pos:start="85:24" pos:end="85:31">uint64_t</name><operator pos:start="85:32" pos:end="85:32">)</operator><name pos:start="85:33" pos:end="85:37">vaddr</name></expr></argument>, <argument pos:start="85:40" pos:end="85:54"><expr pos:start="85:40" pos:end="85:54"><operator pos:start="85:40" pos:end="85:40">(</operator><name pos:start="85:41" pos:end="85:48">uint64_t</name><operator pos:start="85:49" pos:end="85:49">)</operator><name pos:start="85:50" pos:end="85:54">raddr</name></expr></argument>, <argument pos:start="85:57" pos:end="85:60"><expr pos:start="85:57" pos:end="85:60"><name pos:start="85:57" pos:end="85:60">prot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="91:44"><expr pos:start="89:5" pos:end="91:43"><call pos:start="89:5" pos:end="91:43"><name pos:start="89:5" pos:end="89:16">tlb_set_page</name><argument_list pos:start="89:17" pos:end="91:43">(<argument pos:start="89:18" pos:end="89:19"><expr pos:start="89:18" pos:end="89:19"><name pos:start="89:18" pos:end="89:19">cs</name></expr></argument>, <argument pos:start="89:22" pos:end="89:31"><expr pos:start="89:22" pos:end="89:31"><name pos:start="89:22" pos:end="89:31">orig_vaddr</name></expr></argument>, <argument pos:start="89:34" pos:end="89:38"><expr pos:start="89:34" pos:end="89:38"><name pos:start="89:34" pos:end="89:38">raddr</name></expr></argument>, <argument pos:start="89:41" pos:end="89:44"><expr pos:start="89:41" pos:end="89:44"><name pos:start="89:41" pos:end="89:44">prot</name></expr></argument>,

                 <argument pos:start="91:18" pos:end="91:24"><expr pos:start="91:18" pos:end="91:24"><name pos:start="91:18" pos:end="91:24">mmu_idx</name></expr></argument>, <argument pos:start="91:27" pos:end="91:42"><expr pos:start="91:27" pos:end="91:42"><name pos:start="91:27" pos:end="91:42">TARGET_PAGE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
