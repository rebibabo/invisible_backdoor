<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17204.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">integrate</name><parameter_list pos:start="1:21" pos:end="1:99">(<parameter pos:start="1:22" pos:end="1:40"><decl pos:start="1:22" pos:end="1:40"><type pos:start="1:22" pos:end="1:40"><name pos:start="1:22" pos:end="1:33">hdcd_state_t</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:40">state</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:51"><decl pos:start="1:43" pos:end="1:51"><type pos:start="1:43" pos:end="1:51"><name pos:start="1:43" pos:end="1:45">int</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:51">flag</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:75"><decl pos:start="1:54" pos:end="1:75"><type pos:start="1:54" pos:end="1:75"><specifier pos:start="1:54" pos:end="1:58">const</specifier> <name pos:start="1:60" pos:end="1:66">int32_t</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:75">samples</name></decl></parameter>, <parameter pos:start="1:78" pos:end="1:86"><decl pos:start="1:78" pos:end="1:86"><type pos:start="1:78" pos:end="1:86"><name pos:start="1:78" pos:end="1:80">int</name></type> <name pos:start="1:82" pos:end="1:86">count</name></decl></parameter>, <parameter pos:start="1:89" pos:end="1:98"><decl pos:start="1:89" pos:end="1:98"><type pos:start="1:89" pos:end="1:98"><name pos:start="1:89" pos:end="1:91">int</name></type> <name pos:start="1:93" pos:end="1:98">stride</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="87:1">{<block_content pos:start="5:5" pos:end="85:18">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:17">bits</name> <init pos:start="5:19" pos:end="5:21">= <expr pos:start="5:21" pos:end="5:21"><literal type="number" pos:start="5:21" pos:end="5:21">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">result</name> <init pos:start="7:16" pos:end="7:47">= <expr pos:start="7:18" pos:end="7:47"><call pos:start="7:18" pos:end="7:47"><name pos:start="7:18" pos:end="7:22">FFMIN</name><argument_list pos:start="7:23" pos:end="7:47">(<argument pos:start="7:24" pos:end="7:39"><expr pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:39"><name pos:start="7:24" pos:end="7:28">state</name><operator pos:start="7:29" pos:end="7:30">-&gt;</operator><name pos:start="7:31" pos:end="7:39">readahead</name></name></expr></argument>, <argument pos:start="7:42" pos:end="7:46"><expr pos:start="7:42" pos:end="7:46"><name pos:start="7:42" pos:end="7:46">count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>

    <expr_stmt pos:start="11:5" pos:end="11:14"><expr pos:start="11:5" pos:end="11:13"><operator pos:start="11:5" pos:end="11:5">*</operator><name pos:start="11:6" pos:end="11:9">flag</name> <operator pos:start="11:11" pos:end="11:11">=</operator> <literal type="number" pos:start="11:13" pos:end="11:13">0</literal></expr>;</expr_stmt>



    <for pos:start="15:5" pos:end="21:5">for <control pos:start="15:9" pos:end="15:37">(<init pos:start="15:10" pos:end="15:24"><expr pos:start="15:10" pos:end="15:23"><name pos:start="15:10" pos:end="15:10">i</name> <operator pos:start="15:12" pos:end="15:12">=</operator> <name pos:start="15:14" pos:end="15:19">result</name> <operator pos:start="15:21" pos:end="15:21">-</operator> <literal type="number" pos:start="15:23" pos:end="15:23">1</literal></expr>;</init> <condition pos:start="15:26" pos:end="15:32"><expr pos:start="15:26" pos:end="15:31"><name pos:start="15:26" pos:end="15:26">i</name> <operator pos:start="15:28" pos:end="15:29">&gt;=</operator> <literal type="number" pos:start="15:31" pos:end="15:31">0</literal></expr>;</condition> <incr pos:start="15:34" pos:end="15:36"><expr pos:start="15:34" pos:end="15:36"><name pos:start="15:34" pos:end="15:34">i</name><operator pos:start="15:35" pos:end="15:36">--</operator></expr></incr>)</control> <block pos:start="15:39" pos:end="21:5">{<block_content pos:start="17:9" pos:end="19:26">

        <expr_stmt pos:start="17:9" pos:end="17:36"><expr pos:start="17:9" pos:end="17:35"><name pos:start="17:9" pos:end="17:12">bits</name> <operator pos:start="17:14" pos:end="17:15">|=</operator> <operator pos:start="17:17" pos:end="17:17">(</operator><operator pos:start="17:18" pos:end="17:18">*</operator><name pos:start="17:19" pos:end="17:25">samples</name> <operator pos:start="17:27" pos:end="17:27">&amp;</operator> <literal type="number" pos:start="17:29" pos:end="17:29">1</literal><operator pos:start="17:30" pos:end="17:30">)</operator> <operator pos:start="17:32" pos:end="17:33">&lt;&lt;</operator> <name pos:start="17:35" pos:end="17:35">i</name></expr>;</expr_stmt> <comment type="block" pos:start="17:38" pos:end="17:76">/* might be better as a conditional? */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:26"><expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:15">samples</name> <operator pos:start="19:17" pos:end="19:18">+=</operator> <name pos:start="19:20" pos:end="19:25">stride</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="25:5" pos:end="25:53"><expr pos:start="25:5" pos:end="25:52"><name pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:9">state</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:17">window</name></name> <operator pos:start="25:19" pos:end="25:19">=</operator> <operator pos:start="25:21" pos:end="25:21">(</operator><name pos:start="25:22" pos:end="25:34"><name pos:start="25:22" pos:end="25:26">state</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:34">window</name></name> <operator pos:start="25:36" pos:end="25:37">&lt;&lt;</operator> <name pos:start="25:39" pos:end="25:44">result</name><operator pos:start="25:45" pos:end="25:45">)</operator> <operator pos:start="25:47" pos:end="25:47">|</operator> <name pos:start="25:49" pos:end="25:52">bits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:31"><expr pos:start="27:5" pos:end="27:30"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:9">state</name><operator pos:start="27:10" pos:end="27:11">-&gt;</operator><name pos:start="27:12" pos:end="27:20">readahead</name></name> <operator pos:start="27:22" pos:end="27:23">-=</operator> <name pos:start="27:25" pos:end="27:30">result</name></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="31:22"><if pos:start="29:5" pos:end="31:22">if <condition pos:start="29:8" pos:end="29:29">(<expr pos:start="29:9" pos:end="29:28"><name pos:start="29:9" pos:end="29:24"><name pos:start="29:9" pos:end="29:13">state</name><operator pos:start="29:14" pos:end="29:15">-&gt;</operator><name pos:start="29:16" pos:end="29:24">readahead</name></name> <operator pos:start="29:26" pos:end="29:26">&gt;</operator> <literal type="number" pos:start="29:28" pos:end="29:28">0</literal></expr>)</condition><block type="pseudo" pos:start="31:9" pos:end="31:22"><block_content pos:start="31:9" pos:end="31:22">

        <return pos:start="31:9" pos:end="31:22">return <expr pos:start="31:16" pos:end="31:21"><name pos:start="31:16" pos:end="31:21">result</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:70"><expr pos:start="35:5" pos:end="35:69"><name pos:start="35:5" pos:end="35:8">bits</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <operator pos:start="35:12" pos:end="35:12">(</operator><name pos:start="35:13" pos:end="35:25"><name pos:start="35:13" pos:end="35:17">state</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:25">window</name></name> <operator pos:start="35:27" pos:end="35:27">^</operator> <name pos:start="35:29" pos:end="35:41"><name pos:start="35:29" pos:end="35:33">state</name><operator pos:start="35:34" pos:end="35:35">-&gt;</operator><name pos:start="35:36" pos:end="35:41">window</name></name> <operator pos:start="35:43" pos:end="35:44">&gt;&gt;</operator> <literal type="number" pos:start="35:46" pos:end="35:46">5</literal> <operator pos:start="35:48" pos:end="35:48">^</operator> <name pos:start="35:50" pos:end="35:62"><name pos:start="35:50" pos:end="35:54">state</name><operator pos:start="35:55" pos:end="35:56">-&gt;</operator><name pos:start="35:57" pos:end="35:62">window</name></name> <operator pos:start="35:64" pos:end="35:65">&gt;&gt;</operator> <literal type="number" pos:start="35:67" pos:end="35:68">23</literal><operator pos:start="35:69" pos:end="35:69">)</operator></expr>;</expr_stmt>



    <if_stmt pos:start="39:5" pos:end="63:5"><if pos:start="39:5" pos:end="63:5">if <condition pos:start="39:8" pos:end="39:19">(<expr pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:18"><name pos:start="39:9" pos:end="39:13">state</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:18">arg</name></name></expr>)</condition> <block pos:start="39:21" pos:end="63:5">{<block_content pos:start="41:9" pos:end="61:23">

        <if_stmt pos:start="41:9" pos:end="49:9"><if pos:start="41:9" pos:end="49:9">if <condition pos:start="41:12" pos:end="41:46">(<expr pos:start="41:13" pos:end="41:45"><operator pos:start="41:13" pos:end="41:13">(</operator><name pos:start="41:14" pos:end="41:17">bits</name> <operator pos:start="41:19" pos:end="41:19">&amp;</operator> <literal type="number" pos:start="41:21" pos:end="41:30">0xffffffc8</literal><operator pos:start="41:31" pos:end="41:31">)</operator> <operator pos:start="41:33" pos:end="41:34">==</operator> <literal type="number" pos:start="41:36" pos:end="41:45">0x0fa00500</literal></expr>)</condition> <block pos:start="41:48" pos:end="49:9">{<block_content pos:start="43:13" pos:end="47:35">

            <expr_stmt pos:start="43:13" pos:end="43:55"><expr pos:start="43:13" pos:end="43:54"><name pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:17">state</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:26">control</name></name> <operator pos:start="43:28" pos:end="43:28">=</operator> <operator pos:start="43:30" pos:end="43:30">(</operator><name pos:start="43:31" pos:end="43:34">bits</name> <operator pos:start="43:36" pos:end="43:36">&amp;</operator> <literal type="number" pos:start="43:38" pos:end="43:40">255</literal><operator pos:start="43:41" pos:end="43:41">)</operator> <operator pos:start="43:43" pos:end="43:43">+</operator> <operator pos:start="43:45" pos:end="43:45">(</operator><name pos:start="43:46" pos:end="43:49">bits</name> <operator pos:start="43:51" pos:end="43:51">&amp;</operator> <literal type="number" pos:start="43:53" pos:end="43:53">7</literal><operator pos:start="43:54" pos:end="43:54">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:22"><expr pos:start="45:13" pos:end="45:21"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:17">flag</name> <operator pos:start="45:19" pos:end="45:19">=</operator> <literal type="number" pos:start="45:21" pos:end="45:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:35"><expr pos:start="47:13" pos:end="47:34"><name pos:start="47:13" pos:end="47:32"><name pos:start="47:13" pos:end="47:17">state</name><operator pos:start="47:18" pos:end="47:19">-&gt;</operator><name pos:start="47:20" pos:end="47:32">code_counterA</name></name><operator pos:start="47:33" pos:end="47:34">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="51:9" pos:end="59:9"><if pos:start="51:9" pos:end="59:9">if <condition pos:start="51:12" pos:end="51:69">(<expr pos:start="51:13" pos:end="51:68"><operator pos:start="51:13" pos:end="51:13">(</operator><operator pos:start="51:14" pos:end="51:14">(</operator><name pos:start="51:15" pos:end="51:18">bits</name> <operator pos:start="51:20" pos:end="51:20">^</operator> <operator pos:start="51:22" pos:end="51:22">(</operator><operator pos:start="51:23" pos:end="51:23">~</operator><name pos:start="51:24" pos:end="51:27">bits</name> <operator pos:start="51:29" pos:end="51:30">&gt;&gt;</operator> <literal type="number" pos:start="51:32" pos:end="51:32">8</literal> <operator pos:start="51:34" pos:end="51:34">&amp;</operator> <literal type="number" pos:start="51:36" pos:end="51:38">255</literal><operator pos:start="51:39" pos:end="51:39">)</operator><operator pos:start="51:40" pos:end="51:40">)</operator> <operator pos:start="51:42" pos:end="51:42">&amp;</operator> <literal type="number" pos:start="51:44" pos:end="51:53">0xffff00ff</literal><operator pos:start="51:54" pos:end="51:54">)</operator> <operator pos:start="51:56" pos:end="51:57">==</operator> <literal type="number" pos:start="51:59" pos:end="51:68">0xa0060000</literal></expr>)</condition> <block pos:start="51:71" pos:end="59:9">{<block_content pos:start="53:13" pos:end="57:35">

            <expr_stmt pos:start="53:13" pos:end="53:45"><expr pos:start="53:13" pos:end="53:44"><name pos:start="53:13" pos:end="53:26"><name pos:start="53:13" pos:end="53:17">state</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:26">control</name></name> <operator pos:start="53:28" pos:end="53:28">=</operator> <name pos:start="53:30" pos:end="53:33">bits</name> <operator pos:start="53:35" pos:end="53:36">&gt;&gt;</operator> <literal type="number" pos:start="53:38" pos:end="53:38">8</literal> <operator pos:start="53:40" pos:end="53:40">&amp;</operator> <literal type="number" pos:start="53:42" pos:end="53:44">255</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:22"><expr pos:start="55:13" pos:end="55:21"><operator pos:start="55:13" pos:end="55:13">*</operator><name pos:start="55:14" pos:end="55:17">flag</name> <operator pos:start="55:19" pos:end="55:19">=</operator> <literal type="number" pos:start="55:21" pos:end="55:21">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:35"><expr pos:start="57:13" pos:end="57:34"><name pos:start="57:13" pos:end="57:32"><name pos:start="57:13" pos:end="57:17">state</name><operator pos:start="57:18" pos:end="57:19">-&gt;</operator><name pos:start="57:20" pos:end="57:32">code_counterB</name></name><operator pos:start="57:33" pos:end="57:34">++</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:23"><expr pos:start="61:9" pos:end="61:22"><name pos:start="61:9" pos:end="61:18"><name pos:start="61:9" pos:end="61:13">state</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:18">arg</name></name> <operator pos:start="61:20" pos:end="61:20">=</operator> <literal type="number" pos:start="61:22" pos:end="61:22">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="65:5" pos:end="83:5"><if pos:start="65:5" pos:end="73:5">if <condition pos:start="65:8" pos:end="65:49">(<expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:12">bits</name> <operator pos:start="65:14" pos:end="65:15">==</operator> <literal type="number" pos:start="65:17" pos:end="65:26">0x7e0fa005</literal> <operator pos:start="65:28" pos:end="65:29">||</operator> <name pos:start="65:31" pos:end="65:34">bits</name> <operator pos:start="65:36" pos:end="65:37">==</operator> <literal type="number" pos:start="65:39" pos:end="65:48">0x7e0fa006</literal></expr>)</condition> <block pos:start="65:51" pos:end="73:5">{<block_content pos:start="67:9" pos:end="71:31">

        <expr_stmt pos:start="67:9" pos:end="67:42"><expr pos:start="67:9" pos:end="67:41"><name pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:13">state</name><operator pos:start="67:14" pos:end="67:15">-&gt;</operator><name pos:start="67:16" pos:end="67:24">readahead</name></name> <operator pos:start="67:26" pos:end="67:26">=</operator> <operator pos:start="67:28" pos:end="67:28">(</operator><name pos:start="67:29" pos:end="67:32">bits</name> <operator pos:start="67:34" pos:end="67:34">&amp;</operator> <literal type="number" pos:start="67:36" pos:end="67:36">3</literal><operator pos:start="67:37" pos:end="67:37">)</operator> <operator pos:start="67:39" pos:end="67:39">*</operator> <literal type="number" pos:start="67:41" pos:end="67:41">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:18"><name pos:start="69:9" pos:end="69:13">state</name><operator pos:start="69:14" pos:end="69:15">-&gt;</operator><name pos:start="69:16" pos:end="69:18">arg</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <literal type="number" pos:start="69:22" pos:end="69:22">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:31"><expr pos:start="71:9" pos:end="71:30"><name pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:13">state</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:28">code_counterC</name></name><operator pos:start="71:29" pos:end="71:30">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="73:7" pos:end="83:5">else <block pos:start="73:12" pos:end="83:5">{<block_content pos:start="75:9" pos:end="81:34">

        <if_stmt pos:start="75:9" pos:end="81:34"><if pos:start="75:9" pos:end="77:63">if <condition pos:start="75:12" pos:end="75:17">(<expr pos:start="75:13" pos:end="75:16"><name pos:start="75:13" pos:end="75:16">bits</name></expr>)</condition><block type="pseudo" pos:start="77:13" pos:end="77:63"><block_content pos:start="77:13" pos:end="77:63">

            <expr_stmt pos:start="77:13" pos:end="77:63"><expr pos:start="77:13" pos:end="77:62"><name pos:start="77:13" pos:end="77:28"><name pos:start="77:13" pos:end="77:17">state</name><operator pos:start="77:18" pos:end="77:19">-&gt;</operator><name pos:start="77:20" pos:end="77:28">readahead</name></name> <operator pos:start="77:30" pos:end="77:30">=</operator> <name pos:start="77:32" pos:end="77:62"><name pos:start="77:32" pos:end="77:43">readaheadtab</name><index pos:start="77:44" pos:end="77:62">[<expr pos:start="77:45" pos:end="77:61"><name pos:start="77:45" pos:end="77:48">bits</name> <operator pos:start="77:50" pos:end="77:50">&amp;</operator> <operator pos:start="77:52" pos:end="77:52">~</operator><operator pos:start="77:53" pos:end="77:53">(</operator><operator pos:start="77:54" pos:end="77:54">-</operator><literal type="number" pos:start="77:55" pos:end="77:55">1</literal> <operator pos:start="77:57" pos:end="77:58">&lt;&lt;</operator> <literal type="number" pos:start="77:60" pos:end="77:60">8</literal><operator pos:start="77:61" pos:end="77:61">)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="79:9" pos:end="81:34">else<block type="pseudo" pos:start="81:13" pos:end="81:34"><block_content pos:start="81:13" pos:end="81:34">

            <expr_stmt pos:start="81:13" pos:end="81:34"><expr pos:start="81:13" pos:end="81:33"><name pos:start="81:13" pos:end="81:28"><name pos:start="81:13" pos:end="81:17">state</name><operator pos:start="81:18" pos:end="81:19">-&gt;</operator><name pos:start="81:20" pos:end="81:28">readahead</name></name> <operator pos:start="81:30" pos:end="81:30">=</operator> <literal type="number" pos:start="81:32" pos:end="81:33">31</literal></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="block" pos:start="81:36" pos:end="81:62">/* ffwd over digisilence */</comment>

    </block_content>}</block></else></if_stmt>

    <return pos:start="85:5" pos:end="85:18">return <expr pos:start="85:12" pos:end="85:17"><name pos:start="85:12" pos:end="85:17">result</name></expr>;</return>

</block_content>}</block></function>
</unit>
