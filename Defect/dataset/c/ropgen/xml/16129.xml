<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/16129.c" pos:tabs="8"><function pos:start="1:1" pos:end="133:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:30">xhci_events_update</name><parameter_list pos:start="1:31" pos:end="1:54">(<parameter pos:start="1:32" pos:end="1:46"><decl pos:start="1:32" pos:end="1:46"><type pos:start="1:32" pos:end="1:46"><name pos:start="1:32" pos:end="1:40">XHCIState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:46">xhci</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:53"><decl pos:start="1:49" pos:end="1:53"><type pos:start="1:49" pos:end="1:53"><name pos:start="1:49" pos:end="1:51">int</name></type> <name pos:start="1:53" pos:end="1:53">v</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="133:1">{<block_content pos:start="5:5" pos:end="131:5">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">XHCIInterrupter</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:25">intr</name> <init pos:start="5:27" pos:end="5:42">= <expr pos:start="5:29" pos:end="5:42"><operator pos:start="5:29" pos:end="5:29">&amp;</operator><name pos:start="5:30" pos:end="5:42"><name pos:start="5:30" pos:end="5:33">xhci</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:39">intr</name><index pos:start="5:40" pos:end="5:42">[<expr pos:start="5:41" pos:end="5:41"><name pos:start="5:41" pos:end="5:41">v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:14">dma_addr_t</name></type> <name pos:start="7:16" pos:end="7:19">erdp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:23">dp_idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:19"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">bool</name></type> <name pos:start="11:10" pos:end="11:15">do_irq</name> <init pos:start="11:17" pos:end="11:19">= <expr pos:start="11:19" pos:end="11:19"><literal type="number" pos:start="11:19" pos:end="11:19">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:34">(<expr pos:start="15:9" pos:end="15:33"><name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:12">xhci</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:20">usbsts</name></name> <operator pos:start="15:22" pos:end="15:22">&amp;</operator> <name pos:start="15:24" pos:end="15:33">USBSTS_HCH</name></expr>)</condition> <block pos:start="15:36" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:56"><expr pos:start="23:5" pos:end="23:55"><name pos:start="23:5" pos:end="23:8">erdp</name> <operator pos:start="23:10" pos:end="23:10">=</operator> <call pos:start="23:12" pos:end="23:55"><name pos:start="23:12" pos:end="23:22">xhci_addr64</name><argument_list pos:start="23:23" pos:end="23:55">(<argument pos:start="23:24" pos:end="23:37"><expr pos:start="23:24" pos:end="23:37"><name pos:start="23:24" pos:end="23:37"><name pos:start="23:24" pos:end="23:27">intr</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:37">erdp_low</name></name></expr></argument>, <argument pos:start="23:40" pos:end="23:54"><expr pos:start="23:40" pos:end="23:54"><name pos:start="23:40" pos:end="23:54"><name pos:start="23:40" pos:end="23:43">intr</name><operator pos:start="23:44" pos:end="23:45">-&gt;</operator><name pos:start="23:46" pos:end="23:54">erdp_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="39:5"><if pos:start="25:5" pos:end="39:5">if <condition pos:start="25:8" pos:end="27:58">(<expr pos:start="25:9" pos:end="27:57"><name pos:start="25:9" pos:end="25:12">erdp</name> <operator pos:start="25:14" pos:end="25:14">&lt;</operator> <name pos:start="25:16" pos:end="25:29"><name pos:start="25:16" pos:end="25:19">intr</name><operator pos:start="25:20" pos:end="25:21">-&gt;</operator><name pos:start="25:22" pos:end="25:29">er_start</name></name> <operator pos:start="25:31" pos:end="25:32">||</operator>

        <name pos:start="27:9" pos:end="27:12">erdp</name> <operator pos:start="27:14" pos:end="27:15">&gt;=</operator> <operator pos:start="27:17" pos:end="27:17">(</operator><name pos:start="27:18" pos:end="27:31"><name pos:start="27:18" pos:end="27:21">intr</name><operator pos:start="27:22" pos:end="27:23">-&gt;</operator><name pos:start="27:24" pos:end="27:31">er_start</name></name> <operator pos:start="27:33" pos:end="27:33">+</operator> <name pos:start="27:35" pos:end="27:42">TRB_SIZE</name><operator pos:start="27:43" pos:end="27:43">*</operator><name pos:start="27:44" pos:end="27:56"><name pos:start="27:44" pos:end="27:47">intr</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:56">er_size</name></name><operator pos:start="27:57" pos:end="27:57">)</operator></expr>)</condition> <block pos:start="27:60" pos:end="39:5">{<block_content pos:start="29:9" pos:end="37:15">

        <expr_stmt pos:start="29:9" pos:end="29:68"><expr pos:start="29:9" pos:end="29:67"><call pos:start="29:9" pos:end="29:67"><name pos:start="29:9" pos:end="29:15">DPRINTF</name><argument_list pos:start="29:16" pos:end="29:67">(<argument pos:start="29:17" pos:end="29:60"><expr pos:start="29:17" pos:end="29:60"><literal type="string" pos:start="29:17" pos:end="29:44">"xhci: ERDP out of bounds: "</literal><name pos:start="29:45" pos:end="29:56">DMA_ADDR_FMT</name><literal type="string" pos:start="29:57" pos:end="29:60">"\n"</literal></expr></argument>, <argument pos:start="29:63" pos:end="29:66"><expr pos:start="29:63" pos:end="29:66"><name pos:start="29:63" pos:end="29:66">erdp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:50"><expr pos:start="31:9" pos:end="33:49"><call pos:start="31:9" pos:end="33:49"><name pos:start="31:9" pos:end="31:15">DPRINTF</name><argument_list pos:start="31:16" pos:end="33:49">(<argument pos:start="31:17" pos:end="31:57"><expr pos:start="31:17" pos:end="31:57"><literal type="string" pos:start="31:17" pos:end="31:34">"xhci: ER[%d] at "</literal><name pos:start="31:35" pos:end="31:46">DMA_ADDR_FMT</name><literal type="string" pos:start="31:47" pos:end="31:57">" len %d\n"</literal></expr></argument>,

                <argument pos:start="33:17" pos:end="33:17"><expr pos:start="33:17" pos:end="33:17"><name pos:start="33:17" pos:end="33:17">v</name></expr></argument>, <argument pos:start="33:20" pos:end="33:33"><expr pos:start="33:20" pos:end="33:33"><name pos:start="33:20" pos:end="33:33"><name pos:start="33:20" pos:end="33:23">intr</name><operator pos:start="33:24" pos:end="33:25">-&gt;</operator><name pos:start="33:26" pos:end="33:33">er_start</name></name></expr></argument>, <argument pos:start="33:36" pos:end="33:48"><expr pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:48"><name pos:start="33:36" pos:end="33:39">intr</name><operator pos:start="33:40" pos:end="33:41">-&gt;</operator><name pos:start="33:42" pos:end="33:48">er_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:23"><expr pos:start="35:9" pos:end="35:22"><call pos:start="35:9" pos:end="35:22"><name pos:start="35:9" pos:end="35:16">xhci_die</name><argument_list pos:start="35:17" pos:end="35:22">(<argument pos:start="35:18" pos:end="35:21"><expr pos:start="35:18" pos:end="35:21"><name pos:start="35:18" pos:end="35:21">xhci</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:48"><expr pos:start="41:5" pos:end="41:47"><name pos:start="41:5" pos:end="41:10">dp_idx</name> <operator pos:start="41:12" pos:end="41:12">=</operator> <operator pos:start="41:14" pos:end="41:14">(</operator><name pos:start="41:15" pos:end="41:18">erdp</name> <operator pos:start="41:20" pos:end="41:20">-</operator> <name pos:start="41:22" pos:end="41:35"><name pos:start="41:22" pos:end="41:25">intr</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:35">er_start</name></name><operator pos:start="41:36" pos:end="41:36">)</operator> <operator pos:start="41:38" pos:end="41:38">/</operator> <name pos:start="41:40" pos:end="41:47">TRB_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:35"><expr pos:start="43:5" pos:end="43:34"><call pos:start="43:5" pos:end="43:34"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:34">(<argument pos:start="43:12" pos:end="43:33"><expr pos:start="43:12" pos:end="43:33"><name pos:start="43:12" pos:end="43:17">dp_idx</name> <operator pos:start="43:19" pos:end="43:19">&lt;</operator> <name pos:start="43:21" pos:end="43:33"><name pos:start="43:21" pos:end="43:24">intr</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:33">er_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="47:5" pos:end="51:62">/* NEC didn't read section 4.9.4 of the spec (v1.0 p139 top Note) and thus

     * deadlocks when the ER is full. Hack it by holding off events until

     * the driver decides to free at least half of the ring */</comment>

    <if_stmt pos:start="53:5" pos:end="73:5"><if pos:start="53:5" pos:end="73:5">if <condition pos:start="53:8" pos:end="53:22">(<expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:12">intr</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:21">er_full</name></name></expr>)</condition> <block pos:start="53:24" pos:end="73:5">{<block_content pos:start="55:9" pos:end="71:9">

        <decl_stmt pos:start="55:9" pos:end="55:47"><decl pos:start="55:9" pos:end="55:46"><type pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:11">int</name></type> <name pos:start="55:13" pos:end="55:19">er_free</name> <init pos:start="55:21" pos:end="55:46">= <expr pos:start="55:23" pos:end="55:46"><name pos:start="55:23" pos:end="55:28">dp_idx</name> <operator pos:start="55:30" pos:end="55:30">-</operator> <name pos:start="55:32" pos:end="55:46"><name pos:start="55:32" pos:end="55:35">intr</name><operator pos:start="55:36" pos:end="55:37">-&gt;</operator><name pos:start="55:38" pos:end="55:46">er_ep_idx</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:25">(<expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:19">er_free</name> <operator pos:start="57:21" pos:end="57:22">&lt;=</operator> <literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>)</condition> <block pos:start="57:27" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:37">

            <expr_stmt pos:start="59:13" pos:end="59:37"><expr pos:start="59:13" pos:end="59:36"><name pos:start="59:13" pos:end="59:19">er_free</name> <operator pos:start="59:21" pos:end="59:22">+=</operator> <name pos:start="59:24" pos:end="59:36"><name pos:start="59:24" pos:end="59:27">intr</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:36">er_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="71:9">if <condition pos:start="63:12" pos:end="63:40">(<expr pos:start="63:13" pos:end="63:39"><name pos:start="63:13" pos:end="63:19">er_free</name> <operator pos:start="63:21" pos:end="63:21">&lt;</operator> <operator pos:start="63:23" pos:end="63:23">(</operator><name pos:start="63:24" pos:end="63:36"><name pos:start="63:24" pos:end="63:27">intr</name><operator pos:start="63:28" pos:end="63:29">-&gt;</operator><name pos:start="63:30" pos:end="63:36">er_size</name></name><operator pos:start="63:37" pos:end="63:37">/</operator><literal type="number" pos:start="63:38" pos:end="63:38">2</literal><operator pos:start="63:39" pos:end="63:39">)</operator></expr>)</condition> <block pos:start="63:42" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:19">

            <expr_stmt pos:start="65:13" pos:end="67:52"><expr pos:start="65:13" pos:end="67:51"><call pos:start="65:13" pos:end="67:51"><name pos:start="65:13" pos:end="65:19">DPRINTF</name><argument_list pos:start="65:20" pos:end="67:51">(<argument pos:start="65:21" pos:end="67:50"><expr pos:start="65:21" pos:end="67:50"><literal type="string" pos:start="65:21" pos:end="65:61">"xhci_events_update(): event ring still "</literal>

                    <literal type="string" pos:start="67:21" pos:end="67:50">"more than half full (hack)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="77:5" pos:end="113:5">while <condition pos:start="77:11" pos:end="77:54">(<expr pos:start="77:12" pos:end="77:53"><name pos:start="77:12" pos:end="77:30"><name pos:start="77:12" pos:end="77:15">intr</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:30">ev_buffer_put</name></name> <operator pos:start="77:32" pos:end="77:33">!=</operator> <name pos:start="77:35" pos:end="77:53"><name pos:start="77:35" pos:end="77:38">intr</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:53">ev_buffer_get</name></name></expr>)</condition> <block pos:start="77:56" pos:end="113:5">{<block_content pos:start="79:9" pos:end="111:9">

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><call pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:14">assert</name><argument_list pos:start="79:15" pos:end="79:29">(<argument pos:start="79:16" pos:end="79:28"><expr pos:start="79:16" pos:end="79:28"><name pos:start="79:16" pos:end="79:28"><name pos:start="79:16" pos:end="79:19">intr</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:28">er_full</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="97:9"><if pos:start="81:9" pos:end="97:9">if <condition pos:start="81:12" pos:end="81:60">(<expr pos:start="81:13" pos:end="81:59"><operator pos:start="81:13" pos:end="81:13">(</operator><operator pos:start="81:14" pos:end="81:14">(</operator><name pos:start="81:15" pos:end="81:29"><name pos:start="81:15" pos:end="81:18">intr</name><operator pos:start="81:19" pos:end="81:20">-&gt;</operator><name pos:start="81:21" pos:end="81:29">er_ep_idx</name></name><operator pos:start="81:30" pos:end="81:30">+</operator><literal type="number" pos:start="81:31" pos:end="81:31">1</literal><operator pos:start="81:32" pos:end="81:32">)</operator> <operator pos:start="81:34" pos:end="81:34">%</operator> <name pos:start="81:36" pos:end="81:48"><name pos:start="81:36" pos:end="81:39">intr</name><operator pos:start="81:40" pos:end="81:41">-&gt;</operator><name pos:start="81:42" pos:end="81:48">er_size</name></name><operator pos:start="81:49" pos:end="81:49">)</operator> <operator pos:start="81:51" pos:end="81:52">==</operator> <name pos:start="81:54" pos:end="81:59">dp_idx</name></expr>)</condition> <block pos:start="81:62" pos:end="97:9">{<block_content pos:start="83:13" pos:end="95:18">

            <expr_stmt pos:start="83:13" pos:end="86:0"><expr pos:start="83:13" pos:end="83:68"><call pos:start="83:13" pos:end="83:68"><name pos:start="83:13" pos:end="83:19">DPRINTF</name><argument_list pos:start="83:20" pos:end="83:68">(<argument pos:start="83:21" pos:end="83:67"><expr pos:start="83:21" pos:end="83:67"><literal type="string" pos:start="83:21" pos:end="83:67">"xhci_events_update(): event ring full again\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="85:1" pos:end="85:20">#<cpp:directive pos:start="85:2" pos:end="85:7">ifndef</cpp:directive> <name pos:start="85:9" pos:end="85:20">ER_FULL_HACK</name></cpp:ifndef>

            <decl_stmt pos:start="87:13" pos:end="87:76"><decl pos:start="87:13" pos:end="87:75"><type pos:start="87:13" pos:end="87:21"><name pos:start="87:13" pos:end="87:21">XHCIEvent</name></type> <name pos:start="87:23" pos:end="87:26">full</name> <init pos:start="87:28" pos:end="87:75">= <expr pos:start="87:30" pos:end="87:75"><block pos:start="87:30" pos:end="87:75">{<expr pos:start="87:31" pos:end="87:48"><name pos:start="87:31" pos:end="87:48">ER_HOST_CONTROLLER</name></expr>, <expr pos:start="87:51" pos:end="87:74"><name pos:start="87:51" pos:end="87:74">CC_EVENT_RING_FULL_ERROR</name></expr>}</block></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="89:13" pos:end="92:0"><expr pos:start="89:13" pos:end="89:44"><call pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:28">xhci_write_event</name><argument_list pos:start="89:29" pos:end="89:44">(<argument pos:start="89:30" pos:end="89:33"><expr pos:start="89:30" pos:end="89:33"><name pos:start="89:30" pos:end="89:33">xhci</name></expr></argument>, <argument pos:start="89:36" pos:end="89:40"><expr pos:start="89:36" pos:end="89:40"><operator pos:start="89:36" pos:end="89:36">&amp;</operator><name pos:start="89:37" pos:end="89:40">full</name></expr></argument>, <argument pos:start="89:43" pos:end="89:43"><expr pos:start="89:43" pos:end="89:43"><name pos:start="89:43" pos:end="89:43">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="91:1" pos:end="91:6">#<cpp:directive pos:start="91:2" pos:end="91:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="93:13" pos:end="93:23"><expr pos:start="93:13" pos:end="93:22"><name pos:start="93:13" pos:end="93:18">do_irq</name> <operator pos:start="93:20" pos:end="93:20">=</operator> <literal type="number" pos:start="93:22" pos:end="93:22">1</literal></expr>;</expr_stmt>

            <break pos:start="95:13" pos:end="95:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:65"><decl pos:start="99:9" pos:end="99:64"><type pos:start="99:9" pos:end="99:19"><name pos:start="99:9" pos:end="99:17">XHCIEvent</name> <modifier pos:start="99:19" pos:end="99:19">*</modifier></type><name pos:start="99:20" pos:end="99:24">event</name> <init pos:start="99:26" pos:end="99:64">= <expr pos:start="99:28" pos:end="99:64"><operator pos:start="99:28" pos:end="99:28">&amp;</operator><name pos:start="99:29" pos:end="99:64"><name pos:start="99:29" pos:end="99:32">intr</name><operator pos:start="99:33" pos:end="99:34">-&gt;</operator><name pos:start="99:35" pos:end="99:43">ev_buffer</name><index pos:start="99:44" pos:end="99:64">[<expr pos:start="99:45" pos:end="99:63"><name pos:start="99:45" pos:end="99:63"><name pos:start="99:45" pos:end="99:48">intr</name><operator pos:start="99:49" pos:end="99:50">-&gt;</operator><name pos:start="99:51" pos:end="99:63">ev_buffer_get</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:41"><expr pos:start="101:9" pos:end="101:40"><call pos:start="101:9" pos:end="101:40"><name pos:start="101:9" pos:end="101:24">xhci_write_event</name><argument_list pos:start="101:25" pos:end="101:40">(<argument pos:start="101:26" pos:end="101:29"><expr pos:start="101:26" pos:end="101:29"><name pos:start="101:26" pos:end="101:29">xhci</name></expr></argument>, <argument pos:start="101:32" pos:end="101:36"><expr pos:start="101:32" pos:end="101:36"><name pos:start="101:32" pos:end="101:36">event</name></expr></argument>, <argument pos:start="101:39" pos:end="101:39"><expr pos:start="101:39" pos:end="101:39"><name pos:start="101:39" pos:end="101:39">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:30"><expr pos:start="103:9" pos:end="103:29"><name pos:start="103:9" pos:end="103:27"><name pos:start="103:9" pos:end="103:12">intr</name><operator pos:start="103:13" pos:end="103:14">-&gt;</operator><name pos:start="103:15" pos:end="103:27">ev_buffer_get</name></name><operator pos:start="103:28" pos:end="103:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:19"><expr pos:start="105:9" pos:end="105:18"><name pos:start="105:9" pos:end="105:14">do_irq</name> <operator pos:start="105:16" pos:end="105:16">=</operator> <literal type="number" pos:start="105:18" pos:end="105:18">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="107:9" pos:end="111:9"><if pos:start="107:9" pos:end="111:9">if <condition pos:start="107:12" pos:end="107:44">(<expr pos:start="107:13" pos:end="107:43"><name pos:start="107:13" pos:end="107:31"><name pos:start="107:13" pos:end="107:16">intr</name><operator pos:start="107:17" pos:end="107:18">-&gt;</operator><name pos:start="107:19" pos:end="107:31">ev_buffer_get</name></name> <operator pos:start="107:33" pos:end="107:34">==</operator> <name pos:start="107:36" pos:end="107:43">EV_QUEUE</name></expr>)</condition> <block pos:start="107:46" pos:end="111:9">{<block_content pos:start="109:13" pos:end="109:36">

            <expr_stmt pos:start="109:13" pos:end="109:36"><expr pos:start="109:13" pos:end="109:35"><name pos:start="109:13" pos:end="109:31"><name pos:start="109:13" pos:end="109:16">intr</name><operator pos:start="109:17" pos:end="109:18">-&gt;</operator><name pos:start="109:19" pos:end="109:31">ev_buffer_get</name></name> <operator pos:start="109:33" pos:end="109:33">=</operator> <literal type="number" pos:start="109:35" pos:end="109:35">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="117:5" pos:end="121:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:15">(<expr pos:start="117:9" pos:end="117:14"><name pos:start="117:9" pos:end="117:14">do_irq</name></expr>)</condition> <block pos:start="117:17" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:33">

        <expr_stmt pos:start="119:9" pos:end="119:33"><expr pos:start="119:9" pos:end="119:32"><call pos:start="119:9" pos:end="119:32"><name pos:start="119:9" pos:end="119:23">xhci_intr_raise</name><argument_list pos:start="119:24" pos:end="119:32">(<argument pos:start="119:25" pos:end="119:28"><expr pos:start="119:25" pos:end="119:28"><name pos:start="119:25" pos:end="119:28">xhci</name></expr></argument>, <argument pos:start="119:31" pos:end="119:31"><expr pos:start="119:31" pos:end="119:31"><name pos:start="119:31" pos:end="119:31">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="125:5" pos:end="131:5"><if pos:start="125:5" pos:end="131:5">if <condition pos:start="125:8" pos:end="125:68">(<expr pos:start="125:9" pos:end="125:67"><name pos:start="125:9" pos:end="125:21"><name pos:start="125:9" pos:end="125:12">intr</name><operator pos:start="125:13" pos:end="125:14">-&gt;</operator><name pos:start="125:15" pos:end="125:21">er_full</name></name> <operator pos:start="125:23" pos:end="125:24">&amp;&amp;</operator> <name pos:start="125:26" pos:end="125:44"><name pos:start="125:26" pos:end="125:29">intr</name><operator pos:start="125:30" pos:end="125:31">-&gt;</operator><name pos:start="125:32" pos:end="125:44">ev_buffer_put</name></name> <operator pos:start="125:46" pos:end="125:47">==</operator> <name pos:start="125:49" pos:end="125:67"><name pos:start="125:49" pos:end="125:52">intr</name><operator pos:start="125:53" pos:end="125:54">-&gt;</operator><name pos:start="125:55" pos:end="125:67">ev_buffer_get</name></name></expr>)</condition> <block pos:start="125:70" pos:end="131:5">{<block_content pos:start="127:9" pos:end="129:26">

        <expr_stmt pos:start="127:9" pos:end="127:69"><expr pos:start="127:9" pos:end="127:68"><call pos:start="127:9" pos:end="127:68"><name pos:start="127:9" pos:end="127:15">DPRINTF</name><argument_list pos:start="127:16" pos:end="127:68">(<argument pos:start="127:17" pos:end="127:67"><expr pos:start="127:17" pos:end="127:67"><literal type="string" pos:start="127:17" pos:end="127:67">"xhci_events_update(): event ring no longer full\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:26"><expr pos:start="129:9" pos:end="129:25"><name pos:start="129:9" pos:end="129:21"><name pos:start="129:9" pos:end="129:12">intr</name><operator pos:start="129:13" pos:end="129:14">-&gt;</operator><name pos:start="129:15" pos:end="129:21">er_full</name></name> <operator pos:start="129:23" pos:end="129:23">=</operator> <literal type="number" pos:start="129:25" pos:end="129:25">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
