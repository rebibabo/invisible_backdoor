<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17471.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">vmxnet3_pci_realize</name><parameter_list pos:start="1:32" pos:end="1:65">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:41">PCIDevice</name> <modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:50">pci_dev</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:64"><decl pos:start="1:53" pos:end="1:64"><type pos:start="1:53" pos:end="1:64"><name pos:start="1:53" pos:end="1:57">Error</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier><modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:61">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:38"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">DeviceState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">dev</name> <init pos:start="5:22" pos:end="5:38">= <expr pos:start="5:24" pos:end="5:38"><call pos:start="5:24" pos:end="5:38"><name pos:start="5:24" pos:end="5:29">DEVICE</name><argument_list pos:start="5:30" pos:end="5:38">(<argument pos:start="5:31" pos:end="5:37"><expr pos:start="5:31" pos:end="5:37"><name pos:start="5:31" pos:end="5:37">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:39"><decl pos:start="7:5" pos:end="7:38"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">VMXNET3State</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:38">= <expr pos:start="7:23" pos:end="7:38"><call pos:start="7:23" pos:end="7:38"><name pos:start="7:23" pos:end="7:29">VMXNET3</name><argument_list pos:start="7:30" pos:end="7:38">(<argument pos:start="7:31" pos:end="7:37"><expr pos:start="7:31" pos:end="7:37"><name pos:start="7:31" pos:end="7:37">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:34"><expr pos:start="11:5" pos:end="11:33"><call pos:start="11:5" pos:end="11:33"><name pos:start="11:5" pos:end="11:13">VMW_CBPRN</name><argument_list pos:start="11:14" pos:end="11:33">(<argument pos:start="11:15" pos:end="11:32"><expr pos:start="11:15" pos:end="11:32"><literal type="string" pos:start="11:15" pos:end="11:32">"Starting init..."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="15:5" pos:end="17:61"><expr pos:start="15:5" pos:end="17:60"><call pos:start="15:5" pos:end="17:60"><name pos:start="15:5" pos:end="15:25">memory_region_init_io</name><argument_list pos:start="15:26" pos:end="17:60">(<argument pos:start="15:27" pos:end="15:34"><expr pos:start="15:27" pos:end="15:34"><operator pos:start="15:27" pos:end="15:27">&amp;</operator><name pos:start="15:28" pos:end="15:34"><name pos:start="15:28" pos:end="15:28">s</name><operator pos:start="15:29" pos:end="15:30">-&gt;</operator><name pos:start="15:31" pos:end="15:34">bar0</name></name></expr></argument>, <argument pos:start="15:37" pos:end="15:45"><expr pos:start="15:37" pos:end="15:45"><call pos:start="15:37" pos:end="15:45"><name pos:start="15:37" pos:end="15:42">OBJECT</name><argument_list pos:start="15:43" pos:end="15:45">(<argument pos:start="15:44" pos:end="15:44"><expr pos:start="15:44" pos:end="15:44"><name pos:start="15:44" pos:end="15:44">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="15:48" pos:end="15:54"><expr pos:start="15:48" pos:end="15:54"><operator pos:start="15:48" pos:end="15:48">&amp;</operator><name pos:start="15:49" pos:end="15:54">b0_ops</name></expr></argument>, <argument pos:start="15:57" pos:end="15:57"><expr pos:start="15:57" pos:end="15:57"><name pos:start="15:57" pos:end="15:57">s</name></expr></argument>,

                          <argument pos:start="17:27" pos:end="17:38"><expr pos:start="17:27" pos:end="17:38"><literal type="string" pos:start="17:27" pos:end="17:38">"vmxnet3-b0"</literal></expr></argument>, <argument pos:start="17:41" pos:end="17:59"><expr pos:start="17:41" pos:end="17:59"><name pos:start="17:41" pos:end="17:59">VMXNET3_PT_REG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="21:62"><expr pos:start="19:5" pos:end="21:61"><call pos:start="19:5" pos:end="21:61"><name pos:start="19:5" pos:end="19:20">pci_register_bar</name><argument_list pos:start="19:21" pos:end="21:61">(<argument pos:start="19:22" pos:end="19:28"><expr pos:start="19:22" pos:end="19:28"><name pos:start="19:22" pos:end="19:28">pci_dev</name></expr></argument>, <argument pos:start="19:31" pos:end="19:46"><expr pos:start="19:31" pos:end="19:46"><name pos:start="19:31" pos:end="19:46">VMXNET3_BAR0_IDX</name></expr></argument>,

                     <argument pos:start="21:22" pos:end="21:50"><expr pos:start="21:22" pos:end="21:50"><name pos:start="21:22" pos:end="21:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="21:53" pos:end="21:60"><expr pos:start="21:53" pos:end="21:60"><operator pos:start="21:53" pos:end="21:53">&amp;</operator><name pos:start="21:54" pos:end="21:60"><name pos:start="21:54" pos:end="21:54">s</name><operator pos:start="21:55" pos:end="21:56">-&gt;</operator><name pos:start="21:57" pos:end="21:60">bar0</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="25:5" pos:end="27:61"><expr pos:start="25:5" pos:end="27:60"><call pos:start="25:5" pos:end="27:60"><name pos:start="25:5" pos:end="25:25">memory_region_init_io</name><argument_list pos:start="25:26" pos:end="27:60">(<argument pos:start="25:27" pos:end="25:34"><expr pos:start="25:27" pos:end="25:34"><operator pos:start="25:27" pos:end="25:27">&amp;</operator><name pos:start="25:28" pos:end="25:34"><name pos:start="25:28" pos:end="25:28">s</name><operator pos:start="25:29" pos:end="25:30">-&gt;</operator><name pos:start="25:31" pos:end="25:34">bar1</name></name></expr></argument>, <argument pos:start="25:37" pos:end="25:45"><expr pos:start="25:37" pos:end="25:45"><call pos:start="25:37" pos:end="25:45"><name pos:start="25:37" pos:end="25:42">OBJECT</name><argument_list pos:start="25:43" pos:end="25:45">(<argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><name pos:start="25:44" pos:end="25:44">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="25:48" pos:end="25:54"><expr pos:start="25:48" pos:end="25:54"><operator pos:start="25:48" pos:end="25:48">&amp;</operator><name pos:start="25:49" pos:end="25:54">b1_ops</name></expr></argument>, <argument pos:start="25:57" pos:end="25:57"><expr pos:start="25:57" pos:end="25:57"><name pos:start="25:57" pos:end="25:57">s</name></expr></argument>,

                          <argument pos:start="27:27" pos:end="27:38"><expr pos:start="27:27" pos:end="27:38"><literal type="string" pos:start="27:27" pos:end="27:38">"vmxnet3-b1"</literal></expr></argument>, <argument pos:start="27:41" pos:end="27:59"><expr pos:start="27:41" pos:end="27:59"><name pos:start="27:41" pos:end="27:59">VMXNET3_VD_REG_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:62"><expr pos:start="29:5" pos:end="31:61"><call pos:start="29:5" pos:end="31:61"><name pos:start="29:5" pos:end="29:20">pci_register_bar</name><argument_list pos:start="29:21" pos:end="31:61">(<argument pos:start="29:22" pos:end="29:28"><expr pos:start="29:22" pos:end="29:28"><name pos:start="29:22" pos:end="29:28">pci_dev</name></expr></argument>, <argument pos:start="29:31" pos:end="29:46"><expr pos:start="29:31" pos:end="29:46"><name pos:start="29:31" pos:end="29:46">VMXNET3_BAR1_IDX</name></expr></argument>,

                     <argument pos:start="31:22" pos:end="31:50"><expr pos:start="31:22" pos:end="31:50"><name pos:start="31:22" pos:end="31:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="31:53" pos:end="31:60"><expr pos:start="31:53" pos:end="31:60"><operator pos:start="31:53" pos:end="31:53">&amp;</operator><name pos:start="31:54" pos:end="31:60"><name pos:start="31:54" pos:end="31:54">s</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:60">bar1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="35:5" pos:end="37:46"><expr pos:start="35:5" pos:end="37:45"><call pos:start="35:5" pos:end="37:45"><name pos:start="35:5" pos:end="35:22">memory_region_init</name><argument_list pos:start="35:23" pos:end="37:45">(<argument pos:start="35:24" pos:end="35:35"><expr pos:start="35:24" pos:end="35:35"><operator pos:start="35:24" pos:end="35:24">&amp;</operator><name pos:start="35:25" pos:end="35:35"><name pos:start="35:25" pos:end="35:25">s</name><operator pos:start="35:26" pos:end="35:27">-&gt;</operator><name pos:start="35:28" pos:end="35:35">msix_bar</name></name></expr></argument>, <argument pos:start="35:38" pos:end="35:46"><expr pos:start="35:38" pos:end="35:46"><call pos:start="35:38" pos:end="35:46"><name pos:start="35:38" pos:end="35:43">OBJECT</name><argument_list pos:start="35:44" pos:end="35:46">(<argument pos:start="35:45" pos:end="35:45"><expr pos:start="35:45" pos:end="35:45"><name pos:start="35:45" pos:end="35:45">s</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:49" pos:end="35:66"><expr pos:start="35:49" pos:end="35:66"><literal type="string" pos:start="35:49" pos:end="35:66">"vmxnet3-msix-bar"</literal></expr></argument>,

                       <argument pos:start="37:24" pos:end="37:44"><expr pos:start="37:24" pos:end="37:44"><name pos:start="37:24" pos:end="37:44">VMXNET3_MSIX_BAR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="41:66"><expr pos:start="39:5" pos:end="41:65"><call pos:start="39:5" pos:end="41:65"><name pos:start="39:5" pos:end="39:20">pci_register_bar</name><argument_list pos:start="39:21" pos:end="41:65">(<argument pos:start="39:22" pos:end="39:28"><expr pos:start="39:22" pos:end="39:28"><name pos:start="39:22" pos:end="39:28">pci_dev</name></expr></argument>, <argument pos:start="39:31" pos:end="39:50"><expr pos:start="39:31" pos:end="39:50"><name pos:start="39:31" pos:end="39:50">VMXNET3_MSIX_BAR_IDX</name></expr></argument>,

                     <argument pos:start="41:22" pos:end="41:50"><expr pos:start="41:22" pos:end="41:50"><name pos:start="41:22" pos:end="41:50">PCI_BASE_ADDRESS_SPACE_MEMORY</name></expr></argument>, <argument pos:start="41:53" pos:end="41:64"><expr pos:start="41:53" pos:end="41:64"><operator pos:start="41:53" pos:end="41:53">&amp;</operator><name pos:start="41:54" pos:end="41:64"><name pos:start="41:54" pos:end="41:54">s</name><operator pos:start="41:55" pos:end="41:56">-&gt;</operator><name pos:start="41:57" pos:end="41:64">msix_bar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:38"><expr pos:start="45:5" pos:end="45:37"><call pos:start="45:5" pos:end="45:37"><name pos:start="45:5" pos:end="45:34">vmxnet3_reset_interrupt_states</name><argument_list pos:start="45:35" pos:end="45:37">(<argument pos:start="45:36" pos:end="45:36"><expr pos:start="45:36" pos:end="45:36"><name pos:start="45:36" pos:end="45:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:25">/* Interrupt pin A */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:46"><expr pos:start="51:5" pos:end="51:45"><name pos:start="51:5" pos:end="51:38"><name pos:start="51:5" pos:end="51:11">pci_dev</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:19">config</name><index pos:start="51:20" pos:end="51:38">[<expr pos:start="51:21" pos:end="51:37"><name pos:start="51:21" pos:end="51:37">PCI_INTERRUPT_PIN</name></expr>]</index></name> <operator pos:start="51:40" pos:end="51:40">=</operator> <literal type="number" pos:start="51:42" pos:end="51:45">0x01</literal></expr>;</expr_stmt>



    <if_stmt pos:start="55:5" pos:end="59:5"><if pos:start="55:5" pos:end="59:5">if <condition pos:start="55:8" pos:end="55:30">(<expr pos:start="55:9" pos:end="55:29"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:29"><name pos:start="55:10" pos:end="55:26">vmxnet3_init_msix</name><argument_list pos:start="55:27" pos:end="55:29">(<argument pos:start="55:28" pos:end="55:28"><expr pos:start="55:28" pos:end="55:28"><name pos:start="55:28" pos:end="55:28">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:32" pos:end="59:5">{<block_content pos:start="57:9" pos:end="57:80">

        <expr_stmt pos:start="57:9" pos:end="57:80"><expr pos:start="57:9" pos:end="57:79"><call pos:start="57:9" pos:end="57:79"><name pos:start="57:9" pos:end="57:17">VMW_WRPRN</name><argument_list pos:start="57:18" pos:end="57:79">(<argument pos:start="57:19" pos:end="57:78"><expr pos:start="57:19" pos:end="57:78"><literal type="string" pos:start="57:19" pos:end="57:78">"Failed to initialize MSI-X, configuration is inconsistent."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:29">(<expr pos:start="63:9" pos:end="63:28"><operator pos:start="63:9" pos:end="63:9">!</operator><call pos:start="63:10" pos:end="63:28"><name pos:start="63:10" pos:end="63:25">vmxnet3_init_msi</name><argument_list pos:start="63:26" pos:end="63:28">(<argument pos:start="63:27" pos:end="63:27"><expr pos:start="63:27" pos:end="63:27"><name pos:start="63:27" pos:end="63:27">s</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="63:31" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:78">

        <expr_stmt pos:start="65:9" pos:end="65:78"><expr pos:start="65:9" pos:end="65:77"><call pos:start="65:9" pos:end="65:77"><name pos:start="65:9" pos:end="65:17">VMW_WRPRN</name><argument_list pos:start="65:18" pos:end="65:77">(<argument pos:start="65:19" pos:end="65:76"><expr pos:start="65:19" pos:end="65:76"><literal type="string" pos:start="65:19" pos:end="65:76">"Failed to initialize MSI, configuration is inconsistent."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><call pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:20">vmxnet3_net_init</name><argument_list pos:start="71:21" pos:end="71:23">(<argument pos:start="71:22" pos:end="71:22"><expr pos:start="71:22" pos:end="71:22"><name pos:start="71:22" pos:end="71:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="75:5" pos:end="89:5"><if pos:start="75:5" pos:end="89:5">if <condition pos:start="75:8" pos:end="75:32">(<expr pos:start="75:9" pos:end="75:31"><call pos:start="75:9" pos:end="75:31"><name pos:start="75:9" pos:end="75:22">pci_is_express</name><argument_list pos:start="75:23" pos:end="75:31">(<argument pos:start="75:24" pos:end="75:30"><expr pos:start="75:24" pos:end="75:30"><name pos:start="75:24" pos:end="75:30">pci_dev</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:34" pos:end="89:5">{<block_content pos:start="77:9" pos:end="87:60">

        <if_stmt pos:start="77:9" pos:end="81:9"><if pos:start="77:9" pos:end="81:9">if <condition pos:start="77:12" pos:end="77:45">(<expr pos:start="77:13" pos:end="77:44"><call pos:start="77:13" pos:end="77:44"><name pos:start="77:13" pos:end="77:30">pci_bus_is_express</name><argument_list pos:start="77:31" pos:end="77:44">(<argument pos:start="77:32" pos:end="77:43"><expr pos:start="77:32" pos:end="77:43"><name pos:start="77:32" pos:end="77:43"><name pos:start="77:32" pos:end="77:38">pci_dev</name><operator pos:start="77:39" pos:end="77:40">-&gt;</operator><name pos:start="77:41" pos:end="77:43">bus</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="77:47" pos:end="81:9">{<block_content pos:start="79:13" pos:end="79:67">

            <expr_stmt pos:start="79:13" pos:end="79:67"><expr pos:start="79:13" pos:end="79:66"><call pos:start="79:13" pos:end="79:66"><name pos:start="79:13" pos:end="79:34">pcie_endpoint_cap_init</name><argument_list pos:start="79:35" pos:end="79:66">(<argument pos:start="79:36" pos:end="79:42"><expr pos:start="79:36" pos:end="79:42"><name pos:start="79:36" pos:end="79:42">pci_dev</name></expr></argument>, <argument pos:start="79:45" pos:end="79:65"><expr pos:start="79:45" pos:end="79:65"><name pos:start="79:45" pos:end="79:65">VMXNET3_EXP_EP_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="85:9" pos:end="87:60"><expr pos:start="85:9" pos:end="87:59"><call pos:start="85:9" pos:end="87:59"><name pos:start="85:9" pos:end="85:29">pcie_dev_ser_num_init</name><argument_list pos:start="85:30" pos:end="87:59">(<argument pos:start="85:31" pos:end="85:37"><expr pos:start="85:31" pos:end="85:37"><name pos:start="85:31" pos:end="85:37">pci_dev</name></expr></argument>, <argument pos:start="85:40" pos:end="85:57"><expr pos:start="85:40" pos:end="85:57"><name pos:start="85:40" pos:end="85:57">VMXNET3_DSN_OFFSET</name></expr></argument>,

                              <argument pos:start="87:31" pos:end="87:58"><expr pos:start="87:31" pos:end="87:58"><call pos:start="87:31" pos:end="87:58"><name pos:start="87:31" pos:end="87:55">vmxnet3_device_serial_num</name><argument_list pos:start="87:56" pos:end="87:58">(<argument pos:start="87:57" pos:end="87:57"><expr pos:start="87:57" pos:end="87:57"><name pos:start="87:57" pos:end="87:57">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="95:61"><expr pos:start="93:5" pos:end="95:60"><call pos:start="93:5" pos:end="95:60"><name pos:start="93:5" pos:end="93:19">register_savevm</name><argument_list pos:start="93:20" pos:end="95:60">(<argument pos:start="93:21" pos:end="93:23"><expr pos:start="93:21" pos:end="93:23"><name pos:start="93:21" pos:end="93:23">dev</name></expr></argument>, <argument pos:start="93:26" pos:end="93:39"><expr pos:start="93:26" pos:end="93:39"><literal type="string" pos:start="93:26" pos:end="93:39">"vmxnet3-msix"</literal></expr></argument>, <argument pos:start="93:42" pos:end="93:43"><expr pos:start="93:42" pos:end="93:43"><operator pos:start="93:42" pos:end="93:42">-</operator><literal type="number" pos:start="93:43" pos:end="93:43">1</literal></expr></argument>, <argument pos:start="93:46" pos:end="93:46"><expr pos:start="93:46" pos:end="93:46"><literal type="number" pos:start="93:46" pos:end="93:46">1</literal></expr></argument>,

                    <argument pos:start="95:21" pos:end="95:37"><expr pos:start="95:21" pos:end="95:37"><name pos:start="95:21" pos:end="95:37">vmxnet3_msix_save</name></expr></argument>, <argument pos:start="95:40" pos:end="95:56"><expr pos:start="95:40" pos:end="95:56"><name pos:start="95:40" pos:end="95:56">vmxnet3_msix_load</name></expr></argument>, <argument pos:start="95:59" pos:end="95:59"><expr pos:start="95:59" pos:end="95:59"><name pos:start="95:59" pos:end="95:59">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
