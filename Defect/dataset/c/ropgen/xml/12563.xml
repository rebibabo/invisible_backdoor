<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/12563.c" pos:tabs="8"><function pos:start="1:1" pos:end="597:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:39">assigned_device_pci_cap_init</name><parameter_list pos:start="1:40" pos:end="1:73">(<parameter pos:start="1:41" pos:end="1:58"><decl pos:start="1:41" pos:end="1:58"><type pos:start="1:41" pos:end="1:58"><name pos:start="1:41" pos:end="1:49">PCIDevice</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:58">pci_dev</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:72"><decl pos:start="1:61" pos:end="1:72"><type pos:start="1:61" pos:end="1:72"><name pos:start="1:61" pos:end="1:65">Error</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier><modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="597:1">{<block_content pos:start="5:5" pos:end="595:13">

    <decl_stmt pos:start="5:5" pos:end="5:66"><decl pos:start="5:5" pos:end="5:65"><type pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:18">AssignedDevice</name> <modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:23">dev</name> <init pos:start="5:25" pos:end="5:65">= <expr pos:start="5:27" pos:end="5:65"><call pos:start="5:27" pos:end="5:65"><name pos:start="5:27" pos:end="5:35">DO_UPCAST</name><argument_list pos:start="5:36" pos:end="5:65">(<argument pos:start="5:37" pos:end="5:50"><expr pos:start="5:37" pos:end="5:50"><name pos:start="5:37" pos:end="5:50">AssignedDevice</name></expr></argument>, <argument pos:start="5:53" pos:end="5:55"><expr pos:start="5:53" pos:end="5:55"><name pos:start="5:53" pos:end="5:55">dev</name></expr></argument>, <argument pos:start="5:58" pos:end="5:64"><expr pos:start="5:58" pos:end="5:64"><name pos:start="5:58" pos:end="5:64">pci_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:53"><decl pos:start="7:5" pos:end="7:52"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">PCIRegion</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:25">pci_region</name> <init pos:start="7:27" pos:end="7:52">= <expr pos:start="7:29" pos:end="7:52"><name pos:start="7:29" pos:end="7:52"><name pos:start="7:29" pos:end="7:31">dev</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:44">real_device</name><operator pos:start="7:45" pos:end="7:45">.</operator><name pos:start="7:46" pos:end="7:52">regions</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>, <decl pos:start="9:14" pos:end="9:16"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:14" pos:end="9:16">pos</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">Error</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:20">local_err</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:70">/* Clear initial capabilities pointer and status copied from hw */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:59"><expr pos:start="17:5" pos:end="17:58"><call pos:start="17:5" pos:end="17:58"><name pos:start="17:5" pos:end="17:16">pci_set_byte</name><argument_list pos:start="17:17" pos:end="17:58">(<argument pos:start="17:18" pos:end="17:54"><expr pos:start="17:18" pos:end="17:54"><name pos:start="17:18" pos:end="17:32"><name pos:start="17:18" pos:end="17:24">pci_dev</name><operator pos:start="17:25" pos:end="17:26">-&gt;</operator><name pos:start="17:27" pos:end="17:32">config</name></name> <operator pos:start="17:34" pos:end="17:34">+</operator> <name pos:start="17:36" pos:end="17:54">PCI_CAPABILITY_LIST</name></expr></argument>, <argument pos:start="17:57" pos:end="17:57"><expr pos:start="17:57" pos:end="17:57"><literal type="number" pos:start="17:57" pos:end="17:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="23:39"><expr pos:start="19:5" pos:end="23:38"><call pos:start="19:5" pos:end="23:38"><name pos:start="19:5" pos:end="19:16">pci_set_word</name><argument_list pos:start="19:17" pos:end="23:38">(<argument pos:start="19:18" pos:end="19:45"><expr pos:start="19:18" pos:end="19:45"><name pos:start="19:18" pos:end="19:32"><name pos:start="19:18" pos:end="19:24">pci_dev</name><operator pos:start="19:25" pos:end="19:26">-&gt;</operator><name pos:start="19:27" pos:end="19:32">config</name></name> <operator pos:start="19:34" pos:end="19:34">+</operator> <name pos:start="19:36" pos:end="19:45">PCI_STATUS</name></expr></argument>,

                 <argument pos:start="21:18" pos:end="23:37"><expr pos:start="21:18" pos:end="23:37"><call pos:start="21:18" pos:end="21:59"><name pos:start="21:18" pos:end="21:29">pci_get_word</name><argument_list pos:start="21:30" pos:end="21:59">(<argument pos:start="21:31" pos:end="21:58"><expr pos:start="21:31" pos:end="21:58"><name pos:start="21:31" pos:end="21:45"><name pos:start="21:31" pos:end="21:37">pci_dev</name><operator pos:start="21:38" pos:end="21:39">-&gt;</operator><name pos:start="21:40" pos:end="21:45">config</name></name> <operator pos:start="21:47" pos:end="21:47">+</operator> <name pos:start="21:49" pos:end="21:58">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="21:61" pos:end="21:61">&amp;</operator>

                 <operator pos:start="23:18" pos:end="23:18">~</operator><name pos:start="23:19" pos:end="23:37">PCI_STATUS_CAP_LIST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="29:67">/* Expose MSI capability

     * MSI capability is the 1st capability in capability config */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:58"><expr pos:start="31:5" pos:end="31:57"><name pos:start="31:5" pos:end="31:7">pos</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:57"><name pos:start="31:11" pos:end="31:29">pci_find_cap_offset</name><argument_list pos:start="31:30" pos:end="31:57">(<argument pos:start="31:31" pos:end="31:37"><expr pos:start="31:31" pos:end="31:37"><name pos:start="31:31" pos:end="31:37">pci_dev</name></expr></argument>, <argument pos:start="31:40" pos:end="31:53"><expr pos:start="31:40" pos:end="31:53"><name pos:start="31:40" pos:end="31:53">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="31:56" pos:end="31:56"><expr pos:start="31:56" pos:end="31:56"><literal type="number" pos:start="31:56" pos:end="31:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="87:5"><if pos:start="33:5" pos:end="87:5">if <condition pos:start="33:8" pos:end="33:75">(<expr pos:start="33:9" pos:end="33:74"><name pos:start="33:9" pos:end="33:11">pos</name> <operator pos:start="33:13" pos:end="33:14">!=</operator> <literal type="number" pos:start="33:16" pos:end="33:16">0</literal> <operator pos:start="33:18" pos:end="33:19">&amp;&amp;</operator> <call pos:start="33:21" pos:end="33:74"><name pos:start="33:21" pos:end="33:39">kvm_check_extension</name><argument_list pos:start="33:40" pos:end="33:74">(<argument pos:start="33:41" pos:end="33:49"><expr pos:start="33:41" pos:end="33:49"><name pos:start="33:41" pos:end="33:49">kvm_state</name></expr></argument>, <argument pos:start="33:52" pos:end="33:73"><expr pos:start="33:52" pos:end="33:73"><name pos:start="33:52" pos:end="33:73">KVM_CAP_ASSIGN_DEV_IRQ</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:77" pos:end="87:5">{<block_content pos:start="35:9" pos:end="85:69">

        <expr_stmt pos:start="35:9" pos:end="35:45"><expr pos:start="35:9" pos:end="35:44"><call pos:start="35:9" pos:end="35:44"><name pos:start="35:9" pos:end="35:32">verify_irqchip_in_kernel</name><argument_list pos:start="35:33" pos:end="35:44">(<argument pos:start="35:34" pos:end="35:43"><expr pos:start="35:34" pos:end="35:43"><operator pos:start="35:34" pos:end="35:34">&amp;</operator><name pos:start="35:35" pos:end="35:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="43:9"><if pos:start="37:9" pos:end="43:9">if <condition pos:start="37:12" pos:end="37:22">(<expr pos:start="37:13" pos:end="37:21"><name pos:start="37:13" pos:end="37:21">local_err</name></expr>)</condition> <block pos:start="37:24" pos:end="43:9">{<block_content pos:start="39:13" pos:end="41:28">

            <expr_stmt pos:start="39:13" pos:end="39:45"><expr pos:start="39:13" pos:end="39:44"><call pos:start="39:13" pos:end="39:44"><name pos:start="39:13" pos:end="39:27">error_propagate</name><argument_list pos:start="39:28" pos:end="39:44">(<argument pos:start="39:29" pos:end="39:32"><expr pos:start="39:29" pos:end="39:32"><name pos:start="39:29" pos:end="39:32">errp</name></expr></argument>, <argument pos:start="39:35" pos:end="39:43"><expr pos:start="39:35" pos:end="39:43"><name pos:start="39:35" pos:end="39:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="41:13" pos:end="41:28">return <expr pos:start="41:20" pos:end="41:27"><operator pos:start="41:20" pos:end="41:20">-</operator><name pos:start="41:21" pos:end="41:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:54"><expr pos:start="45:9" pos:end="45:53"><name pos:start="45:9" pos:end="45:26"><name pos:start="45:9" pos:end="45:11">dev</name><operator pos:start="45:12" pos:end="45:13">-&gt;</operator><name pos:start="45:14" pos:end="45:16">cap</name><operator pos:start="45:17" pos:end="45:17">.</operator><name pos:start="45:18" pos:end="45:26">available</name></name> <operator pos:start="45:28" pos:end="45:29">|=</operator> <name pos:start="45:31" pos:end="45:53">ASSIGNED_DEVICE_CAP_MSI</name></expr>;</expr_stmt>

        <comment type="block" pos:start="47:9" pos:end="47:53">/* Only 32-bit/no-mask currently supported */</comment>

        <expr_stmt pos:start="49:9" pos:end="51:46"><expr pos:start="49:9" pos:end="51:45"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="51:45"><name pos:start="49:15" pos:end="49:33">pci_add_capability2</name><argument_list pos:start="49:34" pos:end="51:45">(<argument pos:start="49:35" pos:end="49:41"><expr pos:start="49:35" pos:end="49:41"><name pos:start="49:35" pos:end="49:41">pci_dev</name></expr></argument>, <argument pos:start="49:44" pos:end="49:57"><expr pos:start="49:44" pos:end="49:57"><name pos:start="49:44" pos:end="49:57">PCI_CAP_ID_MSI</name></expr></argument>, <argument pos:start="49:60" pos:end="49:62"><expr pos:start="49:60" pos:end="49:62"><name pos:start="49:60" pos:end="49:62">pos</name></expr></argument>, <argument pos:start="49:65" pos:end="49:66"><expr pos:start="49:65" pos:end="49:66"><literal type="number" pos:start="49:65" pos:end="49:66">10</literal></expr></argument>,

                                  <argument pos:start="51:35" pos:end="51:44"><expr pos:start="51:35" pos:end="51:44"><operator pos:start="51:35" pos:end="51:35">&amp;</operator><name pos:start="51:36" pos:end="51:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="53:9" pos:end="59:9"><if pos:start="53:9" pos:end="59:9">if <condition pos:start="53:12" pos:end="53:20">(<expr pos:start="53:13" pos:end="53:19"><name pos:start="53:13" pos:end="53:15">ret</name> <operator pos:start="53:17" pos:end="53:17">&lt;</operator> <literal type="number" pos:start="53:19" pos:end="53:19">0</literal></expr>)</condition> <block pos:start="53:22" pos:end="59:9">{<block_content pos:start="55:13" pos:end="57:23">

            <expr_stmt pos:start="55:13" pos:end="55:45"><expr pos:start="55:13" pos:end="55:44"><call pos:start="55:13" pos:end="55:44"><name pos:start="55:13" pos:end="55:27">error_propagate</name><argument_list pos:start="55:28" pos:end="55:44">(<argument pos:start="55:29" pos:end="55:32"><expr pos:start="55:29" pos:end="55:32"><name pos:start="55:29" pos:end="55:32">errp</name></expr></argument>, <argument pos:start="55:35" pos:end="55:43"><expr pos:start="55:35" pos:end="55:43"><name pos:start="55:35" pos:end="55:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="57:13" pos:end="57:23">return <expr pos:start="57:20" pos:end="57:22"><name pos:start="57:20" pos:end="57:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:31"><expr pos:start="61:9" pos:end="61:30"><name pos:start="61:9" pos:end="61:24"><name pos:start="61:9" pos:end="61:15">pci_dev</name><operator pos:start="61:16" pos:end="61:17">-&gt;</operator><name pos:start="61:18" pos:end="61:24">msi_cap</name></name> <operator pos:start="61:26" pos:end="61:26">=</operator> <name pos:start="61:28" pos:end="61:30">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="65:9" pos:end="69:42"><expr pos:start="65:9" pos:end="69:41"><call pos:start="65:9" pos:end="69:41"><name pos:start="65:9" pos:end="65:20">pci_set_word</name><argument_list pos:start="65:21" pos:end="69:41">(<argument pos:start="65:22" pos:end="65:58"><expr pos:start="65:22" pos:end="65:58"><name pos:start="65:22" pos:end="65:36"><name pos:start="65:22" pos:end="65:28">pci_dev</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:36">config</name></name> <operator pos:start="65:38" pos:end="65:38">+</operator> <name pos:start="65:40" pos:end="65:42">pos</name> <operator pos:start="65:44" pos:end="65:44">+</operator> <name pos:start="65:46" pos:end="65:58">PCI_MSI_FLAGS</name></expr></argument>,

                     <argument pos:start="67:22" pos:end="69:40"><expr pos:start="67:22" pos:end="69:40"><call pos:start="67:22" pos:end="67:72"><name pos:start="67:22" pos:end="67:33">pci_get_word</name><argument_list pos:start="67:34" pos:end="67:72">(<argument pos:start="67:35" pos:end="67:71"><expr pos:start="67:35" pos:end="67:71"><name pos:start="67:35" pos:end="67:49"><name pos:start="67:35" pos:end="67:41">pci_dev</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:49">config</name></name> <operator pos:start="67:51" pos:end="67:51">+</operator> <name pos:start="67:53" pos:end="67:55">pos</name> <operator pos:start="67:57" pos:end="67:57">+</operator> <name pos:start="67:59" pos:end="67:71">PCI_MSI_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="67:74" pos:end="67:74">&amp;</operator>

                     <name pos:start="69:22" pos:end="69:40">PCI_MSI_FLAGS_QMASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:68"><expr pos:start="71:9" pos:end="71:67"><call pos:start="71:9" pos:end="71:67"><name pos:start="71:9" pos:end="71:20">pci_set_long</name><argument_list pos:start="71:21" pos:end="71:67">(<argument pos:start="71:22" pos:end="71:63"><expr pos:start="71:22" pos:end="71:63"><name pos:start="71:22" pos:end="71:36"><name pos:start="71:22" pos:end="71:28">pci_dev</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:36">config</name></name> <operator pos:start="71:38" pos:end="71:38">+</operator> <name pos:start="71:40" pos:end="71:42">pos</name> <operator pos:start="71:44" pos:end="71:44">+</operator> <name pos:start="71:46" pos:end="71:63">PCI_MSI_ADDRESS_LO</name></expr></argument>, <argument pos:start="71:66" pos:end="71:66"><expr pos:start="71:66" pos:end="71:66"><literal type="number" pos:start="71:66" pos:end="71:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:65"><expr pos:start="73:9" pos:end="73:64"><call pos:start="73:9" pos:end="73:64"><name pos:start="73:9" pos:end="73:20">pci_set_word</name><argument_list pos:start="73:21" pos:end="73:64">(<argument pos:start="73:22" pos:end="73:60"><expr pos:start="73:22" pos:end="73:60"><name pos:start="73:22" pos:end="73:36"><name pos:start="73:22" pos:end="73:28">pci_dev</name><operator pos:start="73:29" pos:end="73:30">-&gt;</operator><name pos:start="73:31" pos:end="73:36">config</name></name> <operator pos:start="73:38" pos:end="73:38">+</operator> <name pos:start="73:40" pos:end="73:42">pos</name> <operator pos:start="73:44" pos:end="73:44">+</operator> <name pos:start="73:46" pos:end="73:60">PCI_MSI_DATA_32</name></expr></argument>, <argument pos:start="73:63" pos:end="73:63"><expr pos:start="73:63" pos:end="73:63"><literal type="number" pos:start="73:63" pos:end="73:63">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="77:9" pos:end="77:33">/* Set writable fields */</comment>

        <expr_stmt pos:start="79:9" pos:end="81:65"><expr pos:start="79:9" pos:end="81:64"><call pos:start="79:9" pos:end="81:64"><name pos:start="79:9" pos:end="79:20">pci_set_word</name><argument_list pos:start="79:21" pos:end="81:64">(<argument pos:start="79:22" pos:end="79:57"><expr pos:start="79:22" pos:end="79:57"><name pos:start="79:22" pos:end="79:35"><name pos:start="79:22" pos:end="79:28">pci_dev</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:35">wmask</name></name> <operator pos:start="79:37" pos:end="79:37">+</operator> <name pos:start="79:39" pos:end="79:41">pos</name> <operator pos:start="79:43" pos:end="79:43">+</operator> <name pos:start="79:45" pos:end="79:57">PCI_MSI_FLAGS</name></expr></argument>,

                     <argument pos:start="81:22" pos:end="81:63"><expr pos:start="81:22" pos:end="81:63"><name pos:start="81:22" pos:end="81:40">PCI_MSI_FLAGS_QSIZE</name> <operator pos:start="81:42" pos:end="81:42">|</operator> <name pos:start="81:44" pos:end="81:63">PCI_MSI_FLAGS_ENABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:76"><expr pos:start="83:9" pos:end="83:75"><call pos:start="83:9" pos:end="83:75"><name pos:start="83:9" pos:end="83:20">pci_set_long</name><argument_list pos:start="83:21" pos:end="83:75">(<argument pos:start="83:22" pos:end="83:62"><expr pos:start="83:22" pos:end="83:62"><name pos:start="83:22" pos:end="83:35"><name pos:start="83:22" pos:end="83:28">pci_dev</name><operator pos:start="83:29" pos:end="83:30">-&gt;</operator><name pos:start="83:31" pos:end="83:35">wmask</name></name> <operator pos:start="83:37" pos:end="83:37">+</operator> <name pos:start="83:39" pos:end="83:41">pos</name> <operator pos:start="83:43" pos:end="83:43">+</operator> <name pos:start="83:45" pos:end="83:62">PCI_MSI_ADDRESS_LO</name></expr></argument>, <argument pos:start="83:65" pos:end="83:74"><expr pos:start="83:65" pos:end="83:74"><literal type="number" pos:start="83:65" pos:end="83:74">0xfffffffc</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:69"><expr pos:start="85:9" pos:end="85:68"><call pos:start="85:9" pos:end="85:68"><name pos:start="85:9" pos:end="85:20">pci_set_word</name><argument_list pos:start="85:21" pos:end="85:68">(<argument pos:start="85:22" pos:end="85:59"><expr pos:start="85:22" pos:end="85:59"><name pos:start="85:22" pos:end="85:35"><name pos:start="85:22" pos:end="85:28">pci_dev</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:35">wmask</name></name> <operator pos:start="85:37" pos:end="85:37">+</operator> <name pos:start="85:39" pos:end="85:41">pos</name> <operator pos:start="85:43" pos:end="85:43">+</operator> <name pos:start="85:45" pos:end="85:59">PCI_MSI_DATA_32</name></expr></argument>, <argument pos:start="85:62" pos:end="85:67"><expr pos:start="85:62" pos:end="85:67"><literal type="number" pos:start="85:62" pos:end="85:67">0xffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="89:5" pos:end="89:33">/* Expose MSI-X capability */</comment>

    <expr_stmt pos:start="91:5" pos:end="91:59"><expr pos:start="91:5" pos:end="91:58"><name pos:start="91:5" pos:end="91:7">pos</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:58"><name pos:start="91:11" pos:end="91:29">pci_find_cap_offset</name><argument_list pos:start="91:30" pos:end="91:58">(<argument pos:start="91:31" pos:end="91:37"><expr pos:start="91:31" pos:end="91:37"><name pos:start="91:31" pos:end="91:37">pci_dev</name></expr></argument>, <argument pos:start="91:40" pos:end="91:54"><expr pos:start="91:40" pos:end="91:54"><name pos:start="91:40" pos:end="91:54">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="91:57" pos:end="91:57"><expr pos:start="91:57" pos:end="91:57"><literal type="number" pos:start="91:57" pos:end="91:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="159:5"><if pos:start="93:5" pos:end="159:5">if <condition pos:start="93:8" pos:end="93:57">(<expr pos:start="93:9" pos:end="93:56"><name pos:start="93:9" pos:end="93:11">pos</name> <operator pos:start="93:13" pos:end="93:14">!=</operator> <literal type="number" pos:start="93:16" pos:end="93:16">0</literal> <operator pos:start="93:18" pos:end="93:19">&amp;&amp;</operator> <call pos:start="93:21" pos:end="93:56"><name pos:start="93:21" pos:end="93:45">kvm_device_msix_supported</name><argument_list pos:start="93:46" pos:end="93:56">(<argument pos:start="93:47" pos:end="93:55"><expr pos:start="93:47" pos:end="93:55"><name pos:start="93:47" pos:end="93:55">kvm_state</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="93:59" pos:end="159:5">{<block_content pos:start="95:9" pos:end="157:27">

        <decl_stmt pos:start="95:9" pos:end="95:19"><decl pos:start="95:9" pos:end="95:18"><type pos:start="95:9" pos:end="95:11"><name pos:start="95:9" pos:end="95:11">int</name></type> <name pos:start="95:13" pos:end="95:18">bar_nr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="97:9" pos:end="97:34"><decl pos:start="97:9" pos:end="97:33"><type pos:start="97:9" pos:end="97:16"><name pos:start="97:9" pos:end="97:16">uint32_t</name></type> <name pos:start="97:18" pos:end="97:33">msix_table_entry</name></decl>;</decl_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:45"><expr pos:start="101:9" pos:end="101:44"><call pos:start="101:9" pos:end="101:44"><name pos:start="101:9" pos:end="101:32">verify_irqchip_in_kernel</name><argument_list pos:start="101:33" pos:end="101:44">(<argument pos:start="101:34" pos:end="101:43"><expr pos:start="101:34" pos:end="101:43"><operator pos:start="101:34" pos:end="101:34">&amp;</operator><name pos:start="101:35" pos:end="101:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="103:9" pos:end="109:9"><if pos:start="103:9" pos:end="109:9">if <condition pos:start="103:12" pos:end="103:22">(<expr pos:start="103:13" pos:end="103:21"><name pos:start="103:13" pos:end="103:21">local_err</name></expr>)</condition> <block pos:start="103:24" pos:end="109:9">{<block_content pos:start="105:13" pos:end="107:28">

            <expr_stmt pos:start="105:13" pos:end="105:45"><expr pos:start="105:13" pos:end="105:44"><call pos:start="105:13" pos:end="105:44"><name pos:start="105:13" pos:end="105:27">error_propagate</name><argument_list pos:start="105:28" pos:end="105:44">(<argument pos:start="105:29" pos:end="105:32"><expr pos:start="105:29" pos:end="105:32"><name pos:start="105:29" pos:end="105:32">errp</name></expr></argument>, <argument pos:start="105:35" pos:end="105:43"><expr pos:start="105:35" pos:end="105:43"><name pos:start="105:35" pos:end="105:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="107:13" pos:end="107:28">return <expr pos:start="107:20" pos:end="107:27"><operator pos:start="107:20" pos:end="107:20">-</operator><name pos:start="107:21" pos:end="107:27">ENOTSUP</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:55"><expr pos:start="111:9" pos:end="111:54"><name pos:start="111:9" pos:end="111:26"><name pos:start="111:9" pos:end="111:11">dev</name><operator pos:start="111:12" pos:end="111:13">-&gt;</operator><name pos:start="111:14" pos:end="111:16">cap</name><operator pos:start="111:17" pos:end="111:17">.</operator><name pos:start="111:18" pos:end="111:26">available</name></name> <operator pos:start="111:28" pos:end="111:29">|=</operator> <name pos:start="111:31" pos:end="111:54">ASSIGNED_DEVICE_CAP_MSIX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="115:46"><expr pos:start="113:9" pos:end="115:45"><name pos:start="113:9" pos:end="113:11">ret</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <call pos:start="113:15" pos:end="115:45"><name pos:start="113:15" pos:end="113:33">pci_add_capability2</name><argument_list pos:start="113:34" pos:end="115:45">(<argument pos:start="113:35" pos:end="113:41"><expr pos:start="113:35" pos:end="113:41"><name pos:start="113:35" pos:end="113:41">pci_dev</name></expr></argument>, <argument pos:start="113:44" pos:end="113:58"><expr pos:start="113:44" pos:end="113:58"><name pos:start="113:44" pos:end="113:58">PCI_CAP_ID_MSIX</name></expr></argument>, <argument pos:start="113:61" pos:end="113:63"><expr pos:start="113:61" pos:end="113:63"><name pos:start="113:61" pos:end="113:63">pos</name></expr></argument>, <argument pos:start="113:66" pos:end="113:67"><expr pos:start="113:66" pos:end="113:67"><literal type="number" pos:start="113:66" pos:end="113:67">12</literal></expr></argument>,

                                  <argument pos:start="115:35" pos:end="115:44"><expr pos:start="115:35" pos:end="115:44"><operator pos:start="115:35" pos:end="115:35">&amp;</operator><name pos:start="115:36" pos:end="115:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="117:9" pos:end="123:9"><if pos:start="117:9" pos:end="123:9">if <condition pos:start="117:12" pos:end="117:20">(<expr pos:start="117:13" pos:end="117:19"><name pos:start="117:13" pos:end="117:15">ret</name> <operator pos:start="117:17" pos:end="117:17">&lt;</operator> <literal type="number" pos:start="117:19" pos:end="117:19">0</literal></expr>)</condition> <block pos:start="117:22" pos:end="123:9">{<block_content pos:start="119:13" pos:end="121:23">

            <expr_stmt pos:start="119:13" pos:end="119:45"><expr pos:start="119:13" pos:end="119:44"><call pos:start="119:13" pos:end="119:44"><name pos:start="119:13" pos:end="119:27">error_propagate</name><argument_list pos:start="119:28" pos:end="119:44">(<argument pos:start="119:29" pos:end="119:32"><expr pos:start="119:29" pos:end="119:32"><name pos:start="119:29" pos:end="119:32">errp</name></expr></argument>, <argument pos:start="119:35" pos:end="119:43"><expr pos:start="119:35" pos:end="119:43"><name pos:start="119:35" pos:end="119:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="121:13" pos:end="121:23">return <expr pos:start="121:20" pos:end="121:22"><name pos:start="121:20" pos:end="121:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:32"><expr pos:start="125:9" pos:end="125:31"><name pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:15">pci_dev</name><operator pos:start="125:16" pos:end="125:17">-&gt;</operator><name pos:start="125:18" pos:end="125:25">msix_cap</name></name> <operator pos:start="125:27" pos:end="125:27">=</operator> <name pos:start="125:29" pos:end="125:31">pos</name></expr>;</expr_stmt>



        <expr_stmt pos:start="129:9" pos:end="133:43"><expr pos:start="129:9" pos:end="133:42"><call pos:start="129:9" pos:end="133:42"><name pos:start="129:9" pos:end="129:20">pci_set_word</name><argument_list pos:start="129:21" pos:end="133:42">(<argument pos:start="129:22" pos:end="129:59"><expr pos:start="129:22" pos:end="129:59"><name pos:start="129:22" pos:end="129:36"><name pos:start="129:22" pos:end="129:28">pci_dev</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:36">config</name></name> <operator pos:start="129:38" pos:end="129:38">+</operator> <name pos:start="129:40" pos:end="129:42">pos</name> <operator pos:start="129:44" pos:end="129:44">+</operator> <name pos:start="129:46" pos:end="129:59">PCI_MSIX_FLAGS</name></expr></argument>,

                     <argument pos:start="131:22" pos:end="133:41"><expr pos:start="131:22" pos:end="133:41"><call pos:start="131:22" pos:end="131:73"><name pos:start="131:22" pos:end="131:33">pci_get_word</name><argument_list pos:start="131:34" pos:end="131:73">(<argument pos:start="131:35" pos:end="131:72"><expr pos:start="131:35" pos:end="131:72"><name pos:start="131:35" pos:end="131:49"><name pos:start="131:35" pos:end="131:41">pci_dev</name><operator pos:start="131:42" pos:end="131:43">-&gt;</operator><name pos:start="131:44" pos:end="131:49">config</name></name> <operator pos:start="131:51" pos:end="131:51">+</operator> <name pos:start="131:53" pos:end="131:55">pos</name> <operator pos:start="131:57" pos:end="131:57">+</operator> <name pos:start="131:59" pos:end="131:72">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call> <operator pos:start="131:75" pos:end="131:75">&amp;</operator>

                     <name pos:start="133:22" pos:end="133:41">PCI_MSIX_FLAGS_QSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="137:9" pos:end="137:61">/* Only enable and function mask bits are writable */</comment>

        <expr_stmt pos:start="139:9" pos:end="141:69"><expr pos:start="139:9" pos:end="141:68"><call pos:start="139:9" pos:end="141:68"><name pos:start="139:9" pos:end="139:20">pci_set_word</name><argument_list pos:start="139:21" pos:end="141:68">(<argument pos:start="139:22" pos:end="139:58"><expr pos:start="139:22" pos:end="139:58"><name pos:start="139:22" pos:end="139:35"><name pos:start="139:22" pos:end="139:28">pci_dev</name><operator pos:start="139:29" pos:end="139:30">-&gt;</operator><name pos:start="139:31" pos:end="139:35">wmask</name></name> <operator pos:start="139:37" pos:end="139:37">+</operator> <name pos:start="139:39" pos:end="139:41">pos</name> <operator pos:start="139:43" pos:end="139:43">+</operator> <name pos:start="139:45" pos:end="139:58">PCI_MSIX_FLAGS</name></expr></argument>,

                     <argument pos:start="141:22" pos:end="141:67"><expr pos:start="141:22" pos:end="141:67"><name pos:start="141:22" pos:end="141:42">PCI_MSIX_FLAGS_ENABLE</name> <operator pos:start="141:44" pos:end="141:44">|</operator> <name pos:start="141:46" pos:end="141:67">PCI_MSIX_FLAGS_MASKALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:80"><expr pos:start="145:9" pos:end="145:79"><name pos:start="145:9" pos:end="145:24">msix_table_entry</name> <operator pos:start="145:26" pos:end="145:26">=</operator> <call pos:start="145:28" pos:end="145:79"><name pos:start="145:28" pos:end="145:39">pci_get_long</name><argument_list pos:start="145:40" pos:end="145:79">(<argument pos:start="145:41" pos:end="145:78"><expr pos:start="145:41" pos:end="145:78"><name pos:start="145:41" pos:end="145:55"><name pos:start="145:41" pos:end="145:47">pci_dev</name><operator pos:start="145:48" pos:end="145:49">-&gt;</operator><name pos:start="145:50" pos:end="145:55">config</name></name> <operator pos:start="145:57" pos:end="145:57">+</operator> <name pos:start="145:59" pos:end="145:61">pos</name> <operator pos:start="145:63" pos:end="145:63">+</operator> <name pos:start="145:65" pos:end="145:78">PCI_MSIX_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:59"><expr pos:start="147:9" pos:end="147:58"><name pos:start="147:9" pos:end="147:14">bar_nr</name> <operator pos:start="147:16" pos:end="147:16">=</operator> <name pos:start="147:18" pos:end="147:33">msix_table_entry</name> <operator pos:start="147:35" pos:end="147:35">&amp;</operator> <name pos:start="147:37" pos:end="147:58">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:52"><expr pos:start="149:9" pos:end="149:51"><name pos:start="149:9" pos:end="149:24">msix_table_entry</name> <operator pos:start="149:26" pos:end="149:27">&amp;=</operator> <operator pos:start="149:29" pos:end="149:29">~</operator><name pos:start="149:30" pos:end="149:51">PCI_MSIX_FLAGS_BIRMASK</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:79"><expr pos:start="151:9" pos:end="151:78"><name pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:11">dev</name><operator pos:start="151:12" pos:end="151:13">-&gt;</operator><name pos:start="151:14" pos:end="151:28">msix_table_addr</name></name> <operator pos:start="151:30" pos:end="151:30">=</operator> <name pos:start="151:32" pos:end="151:49"><name pos:start="151:32" pos:end="151:41">pci_region</name><index pos:start="151:42" pos:end="151:49">[<expr pos:start="151:43" pos:end="151:48"><name pos:start="151:43" pos:end="151:48">bar_nr</name></expr>]</index></name><operator pos:start="151:50" pos:end="151:50">.</operator><name pos:start="151:51" pos:end="151:59">base_addr</name> <operator pos:start="151:61" pos:end="151:61">+</operator> <name pos:start="151:63" pos:end="151:78">msix_table_entry</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:77"><expr pos:start="153:9" pos:end="153:76"><name pos:start="153:9" pos:end="153:21"><name pos:start="153:9" pos:end="153:11">dev</name><operator pos:start="153:12" pos:end="153:13">-&gt;</operator><name pos:start="153:14" pos:end="153:21">msix_max</name></name> <operator pos:start="153:23" pos:end="153:23">=</operator> <call pos:start="153:25" pos:end="153:76"><name pos:start="153:25" pos:end="153:36">pci_get_word</name><argument_list pos:start="153:37" pos:end="153:76">(<argument pos:start="153:38" pos:end="153:75"><expr pos:start="153:38" pos:end="153:75"><name pos:start="153:38" pos:end="153:52"><name pos:start="153:38" pos:end="153:44">pci_dev</name><operator pos:start="153:45" pos:end="153:46">-&gt;</operator><name pos:start="153:47" pos:end="153:52">config</name></name> <operator pos:start="153:54" pos:end="153:54">+</operator> <name pos:start="153:56" pos:end="153:58">pos</name> <operator pos:start="153:60" pos:end="153:60">+</operator> <name pos:start="153:62" pos:end="153:75">PCI_MSIX_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:46"><expr pos:start="155:9" pos:end="155:45"><name pos:start="155:9" pos:end="155:21"><name pos:start="155:9" pos:end="155:11">dev</name><operator pos:start="155:12" pos:end="155:13">-&gt;</operator><name pos:start="155:14" pos:end="155:21">msix_max</name></name> <operator pos:start="155:23" pos:end="155:24">&amp;=</operator> <name pos:start="155:26" pos:end="155:45">PCI_MSIX_FLAGS_QSIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:27"><expr pos:start="157:9" pos:end="157:26"><name pos:start="157:9" pos:end="157:21"><name pos:start="157:9" pos:end="157:11">dev</name><operator pos:start="157:12" pos:end="157:13">-&gt;</operator><name pos:start="157:14" pos:end="157:21">msix_max</name></name> <operator pos:start="157:23" pos:end="157:24">+=</operator> <literal type="number" pos:start="157:26" pos:end="157:26">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="163:5" pos:end="163:77">/* Minimal PM support, nothing writable, device appears to NAK changes */</comment>

    <expr_stmt pos:start="165:5" pos:end="165:57"><expr pos:start="165:5" pos:end="165:56"><name pos:start="165:5" pos:end="165:7">pos</name> <operator pos:start="165:9" pos:end="165:9">=</operator> <call pos:start="165:11" pos:end="165:56"><name pos:start="165:11" pos:end="165:29">pci_find_cap_offset</name><argument_list pos:start="165:30" pos:end="165:56">(<argument pos:start="165:31" pos:end="165:37"><expr pos:start="165:31" pos:end="165:37"><name pos:start="165:31" pos:end="165:37">pci_dev</name></expr></argument>, <argument pos:start="165:40" pos:end="165:52"><expr pos:start="165:40" pos:end="165:52"><name pos:start="165:40" pos:end="165:52">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="165:55" pos:end="165:55"><expr pos:start="165:55" pos:end="165:55"><literal type="number" pos:start="165:55" pos:end="165:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="167:5" pos:end="213:5"><if pos:start="167:5" pos:end="213:5">if <condition pos:start="167:8" pos:end="167:12">(<expr pos:start="167:9" pos:end="167:11"><name pos:start="167:9" pos:end="167:11">pos</name></expr>)</condition> <block pos:start="167:14" pos:end="213:5">{<block_content pos:start="169:9" pos:end="211:70">

        <decl_stmt pos:start="169:9" pos:end="169:21"><decl pos:start="169:9" pos:end="169:20"><type pos:start="169:9" pos:end="169:16"><name pos:start="169:9" pos:end="169:16">uint16_t</name></type> <name pos:start="169:18" pos:end="169:20">pmc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="173:9" pos:end="175:46"><expr pos:start="173:9" pos:end="175:45"><name pos:start="173:9" pos:end="173:11">ret</name> <operator pos:start="173:13" pos:end="173:13">=</operator> <call pos:start="173:15" pos:end="175:45"><name pos:start="173:15" pos:end="173:33">pci_add_capability2</name><argument_list pos:start="173:34" pos:end="175:45">(<argument pos:start="173:35" pos:end="173:41"><expr pos:start="173:35" pos:end="173:41"><name pos:start="173:35" pos:end="173:41">pci_dev</name></expr></argument>, <argument pos:start="173:44" pos:end="173:56"><expr pos:start="173:44" pos:end="173:56"><name pos:start="173:44" pos:end="173:56">PCI_CAP_ID_PM</name></expr></argument>, <argument pos:start="173:59" pos:end="173:61"><expr pos:start="173:59" pos:end="173:61"><name pos:start="173:59" pos:end="173:61">pos</name></expr></argument>, <argument pos:start="173:64" pos:end="173:76"><expr pos:start="173:64" pos:end="173:76"><name pos:start="173:64" pos:end="173:76">PCI_PM_SIZEOF</name></expr></argument>,

                                  <argument pos:start="175:35" pos:end="175:44"><expr pos:start="175:35" pos:end="175:44"><operator pos:start="175:35" pos:end="175:35">&amp;</operator><name pos:start="175:36" pos:end="175:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="177:9" pos:end="183:9"><if pos:start="177:9" pos:end="183:9">if <condition pos:start="177:12" pos:end="177:20">(<expr pos:start="177:13" pos:end="177:19"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">&lt;</operator> <literal type="number" pos:start="177:19" pos:end="177:19">0</literal></expr>)</condition> <block pos:start="177:22" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:23">

            <expr_stmt pos:start="179:13" pos:end="179:45"><expr pos:start="179:13" pos:end="179:44"><call pos:start="179:13" pos:end="179:44"><name pos:start="179:13" pos:end="179:27">error_propagate</name><argument_list pos:start="179:28" pos:end="179:44">(<argument pos:start="179:29" pos:end="179:32"><expr pos:start="179:29" pos:end="179:32"><name pos:start="179:29" pos:end="179:32">errp</name></expr></argument>, <argument pos:start="179:35" pos:end="179:43"><expr pos:start="179:35" pos:end="179:43"><name pos:start="179:35" pos:end="179:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="181:13" pos:end="181:23">return <expr pos:start="181:20" pos:end="181:22"><name pos:start="181:20" pos:end="181:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="187:9" pos:end="187:61"><expr pos:start="187:9" pos:end="187:60"><call pos:start="187:9" pos:end="187:60"><name pos:start="187:9" pos:end="187:35">assigned_dev_setup_cap_read</name><argument_list pos:start="187:36" pos:end="187:60">(<argument pos:start="187:37" pos:end="187:39"><expr pos:start="187:37" pos:end="187:39"><name pos:start="187:37" pos:end="187:39">dev</name></expr></argument>, <argument pos:start="187:42" pos:end="187:44"><expr pos:start="187:42" pos:end="187:44"><name pos:start="187:42" pos:end="187:44">pos</name></expr></argument>, <argument pos:start="187:47" pos:end="187:59"><expr pos:start="187:47" pos:end="187:59"><name pos:start="187:47" pos:end="187:59">PCI_PM_SIZEOF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="191:9" pos:end="191:66"><expr pos:start="191:9" pos:end="191:65"><name pos:start="191:9" pos:end="191:11">pmc</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <call pos:start="191:15" pos:end="191:65"><name pos:start="191:15" pos:end="191:26">pci_get_word</name><argument_list pos:start="191:27" pos:end="191:65">(<argument pos:start="191:28" pos:end="191:64"><expr pos:start="191:28" pos:end="191:64"><name pos:start="191:28" pos:end="191:42"><name pos:start="191:28" pos:end="191:34">pci_dev</name><operator pos:start="191:35" pos:end="191:36">-&gt;</operator><name pos:start="191:37" pos:end="191:42">config</name></name> <operator pos:start="191:44" pos:end="191:44">+</operator> <name pos:start="191:46" pos:end="191:48">pos</name> <operator pos:start="191:50" pos:end="191:50">+</operator> <name pos:start="191:52" pos:end="191:64">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="193:9" pos:end="193:54"><expr pos:start="193:9" pos:end="193:53"><name pos:start="193:9" pos:end="193:11">pmc</name> <operator pos:start="193:13" pos:end="193:14">&amp;=</operator> <operator pos:start="193:16" pos:end="193:16">(</operator><name pos:start="193:17" pos:end="193:35">PCI_PM_CAP_VER_MASK</name> <operator pos:start="193:37" pos:end="193:37">|</operator> <name pos:start="193:39" pos:end="193:52">PCI_PM_CAP_DSI</name><operator pos:start="193:53" pos:end="193:53">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="195:9" pos:end="195:65"><expr pos:start="195:9" pos:end="195:64"><call pos:start="195:9" pos:end="195:64"><name pos:start="195:9" pos:end="195:20">pci_set_word</name><argument_list pos:start="195:21" pos:end="195:64">(<argument pos:start="195:22" pos:end="195:58"><expr pos:start="195:22" pos:end="195:58"><name pos:start="195:22" pos:end="195:36"><name pos:start="195:22" pos:end="195:28">pci_dev</name><operator pos:start="195:29" pos:end="195:30">-&gt;</operator><name pos:start="195:31" pos:end="195:36">config</name></name> <operator pos:start="195:38" pos:end="195:38">+</operator> <name pos:start="195:40" pos:end="195:42">pos</name> <operator pos:start="195:44" pos:end="195:44">+</operator> <name pos:start="195:46" pos:end="195:58">PCI_CAP_FLAGS</name></expr></argument>, <argument pos:start="195:61" pos:end="195:63"><expr pos:start="195:61" pos:end="195:63"><name pos:start="195:61" pos:end="195:63">pmc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="199:9" pos:end="201:55">/* assign_device will bring the device up to D0, so we don't need

         * to worry about doing that ourselves here. */</comment>

        <expr_stmt pos:start="203:9" pos:end="205:48"><expr pos:start="203:9" pos:end="205:47"><call pos:start="203:9" pos:end="205:47"><name pos:start="203:9" pos:end="203:20">pci_set_word</name><argument_list pos:start="203:21" pos:end="205:47">(<argument pos:start="203:22" pos:end="203:56"><expr pos:start="203:22" pos:end="203:56"><name pos:start="203:22" pos:end="203:36"><name pos:start="203:22" pos:end="203:28">pci_dev</name><operator pos:start="203:29" pos:end="203:30">-&gt;</operator><name pos:start="203:31" pos:end="203:36">config</name></name> <operator pos:start="203:38" pos:end="203:38">+</operator> <name pos:start="203:40" pos:end="203:42">pos</name> <operator pos:start="203:44" pos:end="203:44">+</operator> <name pos:start="203:46" pos:end="203:56">PCI_PM_CTRL</name></expr></argument>,

                     <argument pos:start="205:22" pos:end="205:46"><expr pos:start="205:22" pos:end="205:46"><name pos:start="205:22" pos:end="205:46">PCI_PM_CTRL_NO_SOFT_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="209:9" pos:end="209:71"><expr pos:start="209:9" pos:end="209:70"><call pos:start="209:9" pos:end="209:70"><name pos:start="209:9" pos:end="209:20">pci_set_byte</name><argument_list pos:start="209:21" pos:end="209:70">(<argument pos:start="209:22" pos:end="209:66"><expr pos:start="209:22" pos:end="209:66"><name pos:start="209:22" pos:end="209:36"><name pos:start="209:22" pos:end="209:28">pci_dev</name><operator pos:start="209:29" pos:end="209:30">-&gt;</operator><name pos:start="209:31" pos:end="209:36">config</name></name> <operator pos:start="209:38" pos:end="209:38">+</operator> <name pos:start="209:40" pos:end="209:42">pos</name> <operator pos:start="209:44" pos:end="209:44">+</operator> <name pos:start="209:46" pos:end="209:66">PCI_PM_PPB_EXTENSIONS</name></expr></argument>, <argument pos:start="209:69" pos:end="209:69"><expr pos:start="209:69" pos:end="209:69"><literal type="number" pos:start="209:69" pos:end="209:69">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:70"><expr pos:start="211:9" pos:end="211:69"><call pos:start="211:9" pos:end="211:69"><name pos:start="211:9" pos:end="211:20">pci_set_byte</name><argument_list pos:start="211:21" pos:end="211:69">(<argument pos:start="211:22" pos:end="211:65"><expr pos:start="211:22" pos:end="211:65"><name pos:start="211:22" pos:end="211:36"><name pos:start="211:22" pos:end="211:28">pci_dev</name><operator pos:start="211:29" pos:end="211:30">-&gt;</operator><name pos:start="211:31" pos:end="211:36">config</name></name> <operator pos:start="211:38" pos:end="211:38">+</operator> <name pos:start="211:40" pos:end="211:42">pos</name> <operator pos:start="211:44" pos:end="211:44">+</operator> <name pos:start="211:46" pos:end="211:65">PCI_PM_DATA_REGISTER</name></expr></argument>, <argument pos:start="211:68" pos:end="211:68"><expr pos:start="211:68" pos:end="211:68"><literal type="number" pos:start="211:68" pos:end="211:68">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="217:5" pos:end="217:58"><expr pos:start="217:5" pos:end="217:57"><name pos:start="217:5" pos:end="217:7">pos</name> <operator pos:start="217:9" pos:end="217:9">=</operator> <call pos:start="217:11" pos:end="217:57"><name pos:start="217:11" pos:end="217:29">pci_find_cap_offset</name><argument_list pos:start="217:30" pos:end="217:57">(<argument pos:start="217:31" pos:end="217:37"><expr pos:start="217:31" pos:end="217:37"><name pos:start="217:31" pos:end="217:37">pci_dev</name></expr></argument>, <argument pos:start="217:40" pos:end="217:53"><expr pos:start="217:40" pos:end="217:53"><name pos:start="217:40" pos:end="217:53">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="217:56" pos:end="217:56"><expr pos:start="217:56" pos:end="217:56"><literal type="number" pos:start="217:56" pos:end="217:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="219:5" pos:end="445:5"><if pos:start="219:5" pos:end="445:5">if <condition pos:start="219:8" pos:end="219:12">(<expr pos:start="219:9" pos:end="219:11"><name pos:start="219:9" pos:end="219:11">pos</name></expr>)</condition> <block pos:start="219:14" pos:end="445:5">{<block_content pos:start="221:9" pos:end="443:9">

        <decl_stmt pos:start="221:9" pos:end="221:34"><decl pos:start="221:9" pos:end="221:23"><type pos:start="221:9" pos:end="221:15"><name pos:start="221:9" pos:end="221:15">uint8_t</name></type> <name pos:start="221:17" pos:end="221:23">version</name></decl>, <decl pos:start="221:26" pos:end="221:33"><type ref="prev" pos:start="221:9" pos:end="221:15"/><name pos:start="221:26" pos:end="221:29">size</name> <init pos:start="221:31" pos:end="221:33">= <expr pos:start="221:33" pos:end="221:33"><literal type="number" pos:start="221:33" pos:end="221:33">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="223:9" pos:end="223:38"><decl pos:start="223:9" pos:end="223:21"><type pos:start="223:9" pos:end="223:16"><name pos:start="223:9" pos:end="223:16">uint16_t</name></type> <name pos:start="223:18" pos:end="223:21">type</name></decl>, <decl pos:start="223:24" pos:end="223:29"><type ref="prev" pos:start="223:9" pos:end="223:16"/><name pos:start="223:24" pos:end="223:29">devctl</name></decl>, <decl pos:start="223:32" pos:end="223:37"><type ref="prev" pos:start="223:9" pos:end="223:16"/><name pos:start="223:32" pos:end="223:37">lnksta</name></decl>;</decl_stmt>

        <decl_stmt pos:start="225:9" pos:end="225:32"><decl pos:start="225:9" pos:end="225:23"><type pos:start="225:9" pos:end="225:16"><name pos:start="225:9" pos:end="225:16">uint32_t</name></type> <name pos:start="225:18" pos:end="225:23">devcap</name></decl>, <decl pos:start="225:26" pos:end="225:31"><type ref="prev" pos:start="225:9" pos:end="225:16"/><name pos:start="225:26" pos:end="225:31">lnkcap</name></decl>;</decl_stmt>



        <expr_stmt pos:start="229:9" pos:end="229:70"><expr pos:start="229:9" pos:end="229:69"><name pos:start="229:9" pos:end="229:15">version</name> <operator pos:start="229:17" pos:end="229:17">=</operator> <call pos:start="229:19" pos:end="229:69"><name pos:start="229:19" pos:end="229:30">pci_get_byte</name><argument_list pos:start="229:31" pos:end="229:69">(<argument pos:start="229:32" pos:end="229:68"><expr pos:start="229:32" pos:end="229:68"><name pos:start="229:32" pos:end="229:46"><name pos:start="229:32" pos:end="229:38">pci_dev</name><operator pos:start="229:39" pos:end="229:40">-&gt;</operator><name pos:start="229:41" pos:end="229:46">config</name></name> <operator pos:start="229:48" pos:end="229:48">+</operator> <name pos:start="229:50" pos:end="229:52">pos</name> <operator pos:start="229:54" pos:end="229:54">+</operator> <name pos:start="229:56" pos:end="229:68">PCI_EXP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:38"><expr pos:start="231:9" pos:end="231:37"><name pos:start="231:9" pos:end="231:15">version</name> <operator pos:start="231:17" pos:end="231:18">&amp;=</operator> <name pos:start="231:20" pos:end="231:37">PCI_EXP_FLAGS_VERS</name></expr>;</expr_stmt>

        <if_stmt pos:start="233:9" pos:end="293:9"><if pos:start="233:9" pos:end="237:9">if <condition pos:start="233:12" pos:end="233:25">(<expr pos:start="233:13" pos:end="233:24"><name pos:start="233:13" pos:end="233:19">version</name> <operator pos:start="233:21" pos:end="233:22">==</operator> <literal type="number" pos:start="233:24" pos:end="233:24">1</literal></expr>)</condition> <block pos:start="233:27" pos:end="237:9">{<block_content pos:start="235:13" pos:end="235:24">

            <expr_stmt pos:start="235:13" pos:end="235:24"><expr pos:start="235:13" pos:end="235:23"><name pos:start="235:13" pos:end="235:16">size</name> <operator pos:start="235:18" pos:end="235:18">=</operator> <literal type="number" pos:start="235:20" pos:end="235:23">0x14</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="237:11" pos:end="271:9">else if <condition pos:start="237:19" pos:end="237:32">(<expr pos:start="237:20" pos:end="237:31"><name pos:start="237:20" pos:end="237:26">version</name> <operator pos:start="237:28" pos:end="237:29">==</operator> <literal type="number" pos:start="237:31" pos:end="237:31">2</literal></expr>)</condition> <block pos:start="237:34" pos:end="271:9">{<block_content pos:start="251:13" pos:end="269:13">

            <comment type="block" pos:start="239:13" pos:end="249:15">/*

             * Check for non-std size, accept reduced size to 0x34,

             * which is what bcm5761 implemented, violating the

             * PCIe v3.0 spec that regs should exist and be read as 0,

             * not optionally provided and shorten the struct size.

             */</comment>

            <expr_stmt pos:start="251:13" pos:end="251:58"><expr pos:start="251:13" pos:end="251:57"><name pos:start="251:13" pos:end="251:16">size</name> <operator pos:start="251:18" pos:end="251:18">=</operator> <call pos:start="251:20" pos:end="251:57"><name pos:start="251:20" pos:end="251:22">MIN</name><argument_list pos:start="251:23" pos:end="251:57">(<argument pos:start="251:24" pos:end="251:27"><expr pos:start="251:24" pos:end="251:27"><literal type="number" pos:start="251:24" pos:end="251:27">0x3c</literal></expr></argument>, <argument pos:start="251:30" pos:end="251:56"><expr pos:start="251:30" pos:end="251:56"><name pos:start="251:30" pos:end="251:50">PCI_CONFIG_SPACE_SIZE</name> <operator pos:start="251:52" pos:end="251:52">-</operator> <name pos:start="251:54" pos:end="251:56">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="253:13" pos:end="269:13"><if pos:start="253:13" pos:end="261:13">if <condition pos:start="253:16" pos:end="253:28">(<expr pos:start="253:17" pos:end="253:27"><name pos:start="253:17" pos:end="253:20">size</name> <operator pos:start="253:22" pos:end="253:22">&lt;</operator> <literal type="number" pos:start="253:24" pos:end="253:27">0x34</literal></expr>)</condition> <block pos:start="253:30" pos:end="261:13">{<block_content pos:start="255:17" pos:end="259:31">

                <expr_stmt pos:start="255:17" pos:end="257:43"><expr pos:start="255:17" pos:end="257:42"><call pos:start="255:17" pos:end="257:42"><name pos:start="255:17" pos:end="255:26">error_setg</name><argument_list pos:start="255:27" pos:end="257:42">(<argument pos:start="255:28" pos:end="255:31"><expr pos:start="255:28" pos:end="255:31"><name pos:start="255:28" pos:end="255:31">errp</name></expr></argument>, <argument pos:start="255:34" pos:end="255:64"><expr pos:start="255:34" pos:end="255:64"><literal type="string" pos:start="255:34" pos:end="255:64">"Invalid size PCIe cap-id 0x%x"</literal></expr></argument>,

                           <argument pos:start="257:28" pos:end="257:41"><expr pos:start="257:28" pos:end="257:41"><name pos:start="257:28" pos:end="257:41">PCI_CAP_ID_EXP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="259:17" pos:end="259:31">return <expr pos:start="259:24" pos:end="259:30"><operator pos:start="259:24" pos:end="259:24">-</operator><name pos:start="259:25" pos:end="259:30">EINVAL</name></expr>;</return>

            </block_content>}</block></if> <if type="elseif" pos:start="261:15" pos:end="269:13">else if <condition pos:start="261:23" pos:end="261:36">(<expr pos:start="261:24" pos:end="261:35"><name pos:start="261:24" pos:end="261:27">size</name> <operator pos:start="261:29" pos:end="261:30">!=</operator> <literal type="number" pos:start="261:32" pos:end="261:35">0x3c</literal></expr>)</condition> <block pos:start="261:38" pos:end="269:13">{<block_content pos:start="263:17" pos:end="267:61">

                <expr_stmt pos:start="263:17" pos:end="267:61"><expr pos:start="263:17" pos:end="267:60"><call pos:start="263:17" pos:end="267:60"><name pos:start="263:17" pos:end="263:28">error_report</name><argument_list pos:start="263:29" pos:end="267:60">(<argument pos:start="263:30" pos:end="265:78"><expr pos:start="263:30" pos:end="265:78"><literal type="string" pos:start="263:30" pos:end="263:65">"WARNING, %s: PCIe cap-id 0x%x has "</literal>

                             <literal type="string" pos:start="265:30" pos:end="265:78">"non-standard size 0x%x; std size should be 0x3c"</literal></expr></argument>,

                             <argument pos:start="267:30" pos:end="267:37"><expr pos:start="267:30" pos:end="267:37"><name pos:start="267:30" pos:end="267:37">__func__</name></expr></argument>, <argument pos:start="267:40" pos:end="267:53"><expr pos:start="267:40" pos:end="267:53"><name pos:start="267:40" pos:end="267:53">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="267:56" pos:end="267:59"><expr pos:start="267:56" pos:end="267:59"><name pos:start="267:56" pos:end="267:59">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="271:11" pos:end="293:9">else if <condition pos:start="271:19" pos:end="271:32">(<expr pos:start="271:20" pos:end="271:31"><name pos:start="271:20" pos:end="271:26">version</name> <operator pos:start="271:28" pos:end="271:29">==</operator> <literal type="number" pos:start="271:31" pos:end="271:31">0</literal></expr>)</condition> <block pos:start="271:34" pos:end="293:9">{<block_content pos:start="273:13" pos:end="291:13">

            <decl_stmt pos:start="273:13" pos:end="273:30"><decl pos:start="273:13" pos:end="273:24"><type pos:start="273:13" pos:end="273:20"><name pos:start="273:13" pos:end="273:20">uint16_t</name></type> <name pos:start="273:22" pos:end="273:24">vid</name></decl>, <decl pos:start="273:27" pos:end="273:29"><type ref="prev" pos:start="273:13" pos:end="273:20"/><name pos:start="273:27" pos:end="273:29">did</name></decl>;</decl_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:64"><expr pos:start="275:13" pos:end="275:63"><name pos:start="275:13" pos:end="275:15">vid</name> <operator pos:start="275:17" pos:end="275:17">=</operator> <call pos:start="275:19" pos:end="275:63"><name pos:start="275:19" pos:end="275:30">pci_get_word</name><argument_list pos:start="275:31" pos:end="275:63">(<argument pos:start="275:32" pos:end="275:62"><expr pos:start="275:32" pos:end="275:62"><name pos:start="275:32" pos:end="275:46"><name pos:start="275:32" pos:end="275:38">pci_dev</name><operator pos:start="275:39" pos:end="275:40">-&gt;</operator><name pos:start="275:41" pos:end="275:46">config</name></name> <operator pos:start="275:48" pos:end="275:48">+</operator> <name pos:start="275:50" pos:end="275:62">PCI_VENDOR_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="277:13" pos:end="277:64"><expr pos:start="277:13" pos:end="277:63"><name pos:start="277:13" pos:end="277:15">did</name> <operator pos:start="277:17" pos:end="277:17">=</operator> <call pos:start="277:19" pos:end="277:63"><name pos:start="277:19" pos:end="277:30">pci_get_word</name><argument_list pos:start="277:31" pos:end="277:63">(<argument pos:start="277:32" pos:end="277:62"><expr pos:start="277:32" pos:end="277:62"><name pos:start="277:32" pos:end="277:46"><name pos:start="277:32" pos:end="277:38">pci_dev</name><operator pos:start="277:39" pos:end="277:40">-&gt;</operator><name pos:start="277:41" pos:end="277:46">config</name></name> <operator pos:start="277:48" pos:end="277:48">+</operator> <name pos:start="277:50" pos:end="277:62">PCI_DEVICE_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="279:13" pos:end="291:13"><if pos:start="279:13" pos:end="291:13">if <condition pos:start="279:16" pos:end="279:60">(<expr pos:start="279:17" pos:end="279:59"><name pos:start="279:17" pos:end="279:19">vid</name> <operator pos:start="279:21" pos:end="279:22">==</operator> <name pos:start="279:24" pos:end="279:42">PCI_VENDOR_ID_INTEL</name> <operator pos:start="279:44" pos:end="279:45">&amp;&amp;</operator> <name pos:start="279:47" pos:end="279:49">did</name> <operator pos:start="279:51" pos:end="279:52">==</operator> <literal type="number" pos:start="279:54" pos:end="279:59">0x10ed</literal></expr>)</condition> <block pos:start="279:62" pos:end="291:13">{<block_content pos:start="289:17" pos:end="289:28">

                <comment type="block" pos:start="281:17" pos:end="287:19">/*

                 * quirk for Intel 82599 VF with invalid PCIe capability

                 * version, should really be version 2 (same as PF)

                 */</comment>

                <expr_stmt pos:start="289:17" pos:end="289:28"><expr pos:start="289:17" pos:end="289:27"><name pos:start="289:17" pos:end="289:20">size</name> <operator pos:start="289:22" pos:end="289:22">=</operator> <literal type="number" pos:start="289:24" pos:end="289:27">0x3c</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="297:9" pos:end="305:9"><if pos:start="297:9" pos:end="305:9">if <condition pos:start="297:12" pos:end="297:22">(<expr pos:start="297:13" pos:end="297:21"><name pos:start="297:13" pos:end="297:16">size</name> <operator pos:start="297:18" pos:end="297:19">==</operator> <literal type="number" pos:start="297:21" pos:end="297:21">0</literal></expr>)</condition> <block pos:start="297:24" pos:end="305:9">{<block_content pos:start="299:13" pos:end="303:27">

            <expr_stmt pos:start="299:13" pos:end="301:32"><expr pos:start="299:13" pos:end="301:31"><call pos:start="299:13" pos:end="301:31"><name pos:start="299:13" pos:end="299:22">error_setg</name><argument_list pos:start="299:23" pos:end="301:31">(<argument pos:start="299:24" pos:end="299:27"><expr pos:start="299:24" pos:end="299:27"><name pos:start="299:24" pos:end="299:27">errp</name></expr></argument>, <argument pos:start="299:30" pos:end="299:76"><expr pos:start="299:30" pos:end="299:76"><literal type="string" pos:start="299:30" pos:end="299:76">"Unsupported PCI express capability version %d"</literal></expr></argument>,

                       <argument pos:start="301:24" pos:end="301:30"><expr pos:start="301:24" pos:end="301:30"><name pos:start="301:24" pos:end="301:30">version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="303:13" pos:end="303:27">return <expr pos:start="303:20" pos:end="303:26"><operator pos:start="303:20" pos:end="303:20">-</operator><name pos:start="303:21" pos:end="303:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="309:9" pos:end="311:46"><expr pos:start="309:9" pos:end="311:45"><name pos:start="309:9" pos:end="309:11">ret</name> <operator pos:start="309:13" pos:end="309:13">=</operator> <call pos:start="309:15" pos:end="311:45"><name pos:start="309:15" pos:end="309:33">pci_add_capability2</name><argument_list pos:start="309:34" pos:end="311:45">(<argument pos:start="309:35" pos:end="309:41"><expr pos:start="309:35" pos:end="309:41"><name pos:start="309:35" pos:end="309:41">pci_dev</name></expr></argument>, <argument pos:start="309:44" pos:end="309:57"><expr pos:start="309:44" pos:end="309:57"><name pos:start="309:44" pos:end="309:57">PCI_CAP_ID_EXP</name></expr></argument>, <argument pos:start="309:60" pos:end="309:62"><expr pos:start="309:60" pos:end="309:62"><name pos:start="309:60" pos:end="309:62">pos</name></expr></argument>, <argument pos:start="309:65" pos:end="309:68"><expr pos:start="309:65" pos:end="309:68"><name pos:start="309:65" pos:end="309:68">size</name></expr></argument>,

                                  <argument pos:start="311:35" pos:end="311:44"><expr pos:start="311:35" pos:end="311:44"><operator pos:start="311:35" pos:end="311:35">&amp;</operator><name pos:start="311:36" pos:end="311:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="319:9"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:20">(<expr pos:start="313:13" pos:end="313:19"><name pos:start="313:13" pos:end="313:15">ret</name> <operator pos:start="313:17" pos:end="313:17">&lt;</operator> <literal type="number" pos:start="313:19" pos:end="313:19">0</literal></expr>)</condition> <block pos:start="313:22" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:23">

            <expr_stmt pos:start="315:13" pos:end="315:45"><expr pos:start="315:13" pos:end="315:44"><call pos:start="315:13" pos:end="315:44"><name pos:start="315:13" pos:end="315:27">error_propagate</name><argument_list pos:start="315:28" pos:end="315:44">(<argument pos:start="315:29" pos:end="315:32"><expr pos:start="315:29" pos:end="315:32"><name pos:start="315:29" pos:end="315:32">errp</name></expr></argument>, <argument pos:start="315:35" pos:end="315:43"><expr pos:start="315:35" pos:end="315:43"><name pos:start="315:35" pos:end="315:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="317:13" pos:end="317:23">return <expr pos:start="317:20" pos:end="317:22"><name pos:start="317:20" pos:end="317:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="323:9" pos:end="323:52"><expr pos:start="323:9" pos:end="323:51"><call pos:start="323:9" pos:end="323:51"><name pos:start="323:9" pos:end="323:35">assigned_dev_setup_cap_read</name><argument_list pos:start="323:36" pos:end="323:51">(<argument pos:start="323:37" pos:end="323:39"><expr pos:start="323:37" pos:end="323:39"><name pos:start="323:37" pos:end="323:39">dev</name></expr></argument>, <argument pos:start="323:42" pos:end="323:44"><expr pos:start="323:42" pos:end="323:44"><name pos:start="323:42" pos:end="323:44">pos</name></expr></argument>, <argument pos:start="323:47" pos:end="323:50"><expr pos:start="323:47" pos:end="323:50"><name pos:start="323:47" pos:end="323:50">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="327:9" pos:end="327:67"><expr pos:start="327:9" pos:end="327:66"><name pos:start="327:9" pos:end="327:12">type</name> <operator pos:start="327:14" pos:end="327:14">=</operator> <call pos:start="327:16" pos:end="327:66"><name pos:start="327:16" pos:end="327:27">pci_get_word</name><argument_list pos:start="327:28" pos:end="327:66">(<argument pos:start="327:29" pos:end="327:65"><expr pos:start="327:29" pos:end="327:65"><name pos:start="327:29" pos:end="327:43"><name pos:start="327:29" pos:end="327:35">pci_dev</name><operator pos:start="327:36" pos:end="327:37">-&gt;</operator><name pos:start="327:38" pos:end="327:43">config</name></name> <operator pos:start="327:45" pos:end="327:45">+</operator> <name pos:start="327:47" pos:end="327:49">pos</name> <operator pos:start="327:51" pos:end="327:51">+</operator> <name pos:start="327:53" pos:end="327:65">PCI_EXP_FLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="329:9" pos:end="329:48"><expr pos:start="329:9" pos:end="329:47"><name pos:start="329:9" pos:end="329:12">type</name> <operator pos:start="329:14" pos:end="329:14">=</operator> <operator pos:start="329:16" pos:end="329:16">(</operator><name pos:start="329:17" pos:end="329:20">type</name> <operator pos:start="329:22" pos:end="329:22">&amp;</operator> <name pos:start="329:24" pos:end="329:41">PCI_EXP_FLAGS_TYPE</name><operator pos:start="329:42" pos:end="329:42">)</operator> <operator pos:start="329:44" pos:end="329:45">&gt;&gt;</operator> <literal type="number" pos:start="329:47" pos:end="329:47">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="331:9" pos:end="341:9"><if pos:start="331:9" pos:end="341:9">if <condition pos:start="331:12" pos:end="333:72">(<expr pos:start="331:13" pos:end="333:71"><name pos:start="331:13" pos:end="331:16">type</name> <operator pos:start="331:18" pos:end="331:19">!=</operator> <name pos:start="331:21" pos:end="331:41">PCI_EXP_TYPE_ENDPOINT</name> <operator pos:start="331:43" pos:end="331:44">&amp;&amp;</operator>

            <name pos:start="333:13" pos:end="333:16">type</name> <operator pos:start="333:18" pos:end="333:19">!=</operator> <name pos:start="333:21" pos:end="333:40">PCI_EXP_TYPE_LEG_END</name> <operator pos:start="333:42" pos:end="333:43">&amp;&amp;</operator> <name pos:start="333:45" pos:end="333:48">type</name> <operator pos:start="333:50" pos:end="333:51">!=</operator> <name pos:start="333:53" pos:end="333:71">PCI_EXP_TYPE_RC_END</name></expr>)</condition> <block pos:start="333:74" pos:end="341:9">{<block_content pos:start="335:13" pos:end="339:27">

            <expr_stmt pos:start="335:13" pos:end="337:59"><expr pos:start="335:13" pos:end="337:58"><call pos:start="335:13" pos:end="337:58"><name pos:start="335:13" pos:end="335:22">error_setg</name><argument_list pos:start="335:23" pos:end="337:58">(<argument pos:start="335:24" pos:end="335:27"><expr pos:start="335:24" pos:end="335:27"><name pos:start="335:24" pos:end="335:27">errp</name></expr></argument>, <argument pos:start="335:30" pos:end="337:51"><expr pos:start="335:30" pos:end="337:51"><literal type="string" pos:start="335:30" pos:end="335:72">"Device assignment only supports endpoint "</literal>

                       <literal type="string" pos:start="337:24" pos:end="337:51">"assignment, device type %d"</literal></expr></argument>, <argument pos:start="337:54" pos:end="337:57"><expr pos:start="337:54" pos:end="337:57"><name pos:start="337:54" pos:end="337:57">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="339:13" pos:end="339:27">return <expr pos:start="339:20" pos:end="339:26"><operator pos:start="339:20" pos:end="339:20">-</operator><name pos:start="339:21" pos:end="339:26">EINVAL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="345:9" pos:end="347:75">/* capabilities, pass existing read-only copy

         * PCI_EXP_FLAGS_IRQ: updated by hardware, should be direct read */</comment>



        <comment type="block" pos:start="351:9" pos:end="351:43">/* device capabilities: hide FLR */</comment>

        <expr_stmt pos:start="353:9" pos:end="353:70"><expr pos:start="353:9" pos:end="353:69"><name pos:start="353:9" pos:end="353:14">devcap</name> <operator pos:start="353:16" pos:end="353:16">=</operator> <call pos:start="353:18" pos:end="353:69"><name pos:start="353:18" pos:end="353:29">pci_get_long</name><argument_list pos:start="353:30" pos:end="353:69">(<argument pos:start="353:31" pos:end="353:68"><expr pos:start="353:31" pos:end="353:68"><name pos:start="353:31" pos:end="353:45"><name pos:start="353:31" pos:end="353:37">pci_dev</name><operator pos:start="353:38" pos:end="353:39">-&gt;</operator><name pos:start="353:40" pos:end="353:45">config</name></name> <operator pos:start="353:47" pos:end="353:47">+</operator> <name pos:start="353:49" pos:end="353:51">pos</name> <operator pos:start="353:53" pos:end="353:53">+</operator> <name pos:start="353:55" pos:end="353:68">PCI_EXP_DEVCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="355:9" pos:end="355:38"><expr pos:start="355:9" pos:end="355:37"><name pos:start="355:9" pos:end="355:14">devcap</name> <operator pos:start="355:16" pos:end="355:17">&amp;=</operator> <operator pos:start="355:19" pos:end="355:19">~</operator><name pos:start="355:20" pos:end="355:37">PCI_EXP_DEVCAP_FLR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:69"><expr pos:start="357:9" pos:end="357:68"><call pos:start="357:9" pos:end="357:68"><name pos:start="357:9" pos:end="357:20">pci_set_long</name><argument_list pos:start="357:21" pos:end="357:68">(<argument pos:start="357:22" pos:end="357:59"><expr pos:start="357:22" pos:end="357:59"><name pos:start="357:22" pos:end="357:36"><name pos:start="357:22" pos:end="357:28">pci_dev</name><operator pos:start="357:29" pos:end="357:30">-&gt;</operator><name pos:start="357:31" pos:end="357:36">config</name></name> <operator pos:start="357:38" pos:end="357:38">+</operator> <name pos:start="357:40" pos:end="357:42">pos</name> <operator pos:start="357:44" pos:end="357:44">+</operator> <name pos:start="357:46" pos:end="357:59">PCI_EXP_DEVCAP</name></expr></argument>, <argument pos:start="357:62" pos:end="357:67"><expr pos:start="357:62" pos:end="357:67"><name pos:start="357:62" pos:end="357:67">devcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="361:9" pos:end="367:11">/* device control: clear all error reporting enable bits, leaving

         *                 only a few host values.  Note, these are

         *                 all writable, but not passed to hw.

         */</comment>

        <expr_stmt pos:start="369:9" pos:end="369:70"><expr pos:start="369:9" pos:end="369:69"><name pos:start="369:9" pos:end="369:14">devctl</name> <operator pos:start="369:16" pos:end="369:16">=</operator> <call pos:start="369:18" pos:end="369:69"><name pos:start="369:18" pos:end="369:29">pci_get_word</name><argument_list pos:start="369:30" pos:end="369:69">(<argument pos:start="369:31" pos:end="369:68"><expr pos:start="369:31" pos:end="369:68"><name pos:start="369:31" pos:end="369:45"><name pos:start="369:31" pos:end="369:37">pci_dev</name><operator pos:start="369:38" pos:end="369:39">-&gt;</operator><name pos:start="369:40" pos:end="369:45">config</name></name> <operator pos:start="369:47" pos:end="369:47">+</operator> <name pos:start="369:49" pos:end="369:51">pos</name> <operator pos:start="369:53" pos:end="369:53">+</operator> <name pos:start="369:55" pos:end="369:68">PCI_EXP_DEVCTL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="371:9" pos:end="373:70"><expr pos:start="371:9" pos:end="373:69"><name pos:start="371:9" pos:end="371:14">devctl</name> <operator pos:start="371:16" pos:end="371:16">=</operator> <operator pos:start="371:18" pos:end="371:18">(</operator><name pos:start="371:19" pos:end="371:24">devctl</name> <operator pos:start="371:26" pos:end="371:26">&amp;</operator> <operator pos:start="371:28" pos:end="371:28">(</operator><name pos:start="371:29" pos:end="371:49">PCI_EXP_DEVCTL_READRQ</name> <operator pos:start="371:51" pos:end="371:51">|</operator> <name pos:start="371:53" pos:end="371:74">PCI_EXP_DEVCTL_PAYLOAD</name><operator pos:start="371:75" pos:end="371:75">)</operator><operator pos:start="371:76" pos:end="371:76">)</operator> <operator pos:start="371:78" pos:end="371:78">|</operator>

                  <name pos:start="373:19" pos:end="373:41">PCI_EXP_DEVCTL_RELAX_EN</name> <operator pos:start="373:43" pos:end="373:43">|</operator> <name pos:start="373:45" pos:end="373:69">PCI_EXP_DEVCTL_NOSNOOP_EN</name></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:69"><expr pos:start="375:9" pos:end="375:68"><call pos:start="375:9" pos:end="375:68"><name pos:start="375:9" pos:end="375:20">pci_set_word</name><argument_list pos:start="375:21" pos:end="375:68">(<argument pos:start="375:22" pos:end="375:59"><expr pos:start="375:22" pos:end="375:59"><name pos:start="375:22" pos:end="375:36"><name pos:start="375:22" pos:end="375:28">pci_dev</name><operator pos:start="375:29" pos:end="375:30">-&gt;</operator><name pos:start="375:31" pos:end="375:36">config</name></name> <operator pos:start="375:38" pos:end="375:38">+</operator> <name pos:start="375:40" pos:end="375:42">pos</name> <operator pos:start="375:44" pos:end="375:44">+</operator> <name pos:start="375:46" pos:end="375:59">PCI_EXP_DEVCTL</name></expr></argument>, <argument pos:start="375:62" pos:end="375:67"><expr pos:start="375:62" pos:end="375:67"><name pos:start="375:62" pos:end="375:67">devctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="377:9" pos:end="377:65"><expr pos:start="377:9" pos:end="377:64"><name pos:start="377:9" pos:end="377:14">devctl</name> <operator pos:start="377:16" pos:end="377:16">=</operator> <name pos:start="377:18" pos:end="377:39">PCI_EXP_DEVCTL_BCR_FLR</name> <operator pos:start="377:41" pos:end="377:41">|</operator> <name pos:start="377:43" pos:end="377:64">PCI_EXP_DEVCTL_AUX_PME</name></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:69"><expr pos:start="379:9" pos:end="379:68"><call pos:start="379:9" pos:end="379:68"><name pos:start="379:9" pos:end="379:20">pci_set_word</name><argument_list pos:start="379:21" pos:end="379:68">(<argument pos:start="379:22" pos:end="379:58"><expr pos:start="379:22" pos:end="379:58"><name pos:start="379:22" pos:end="379:35"><name pos:start="379:22" pos:end="379:28">pci_dev</name><operator pos:start="379:29" pos:end="379:30">-&gt;</operator><name pos:start="379:31" pos:end="379:35">wmask</name></name> <operator pos:start="379:37" pos:end="379:37">+</operator> <name pos:start="379:39" pos:end="379:41">pos</name> <operator pos:start="379:43" pos:end="379:43">+</operator> <name pos:start="379:45" pos:end="379:58">PCI_EXP_DEVCTL</name></expr></argument>, <argument pos:start="379:61" pos:end="379:67"><expr pos:start="379:61" pos:end="379:67"><operator pos:start="379:61" pos:end="379:61">~</operator><name pos:start="379:62" pos:end="379:67">devctl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="383:9" pos:end="383:33">/* Clear device status */</comment>

        <expr_stmt pos:start="385:9" pos:end="385:64"><expr pos:start="385:9" pos:end="385:63"><call pos:start="385:9" pos:end="385:63"><name pos:start="385:9" pos:end="385:20">pci_set_word</name><argument_list pos:start="385:21" pos:end="385:63">(<argument pos:start="385:22" pos:end="385:59"><expr pos:start="385:22" pos:end="385:59"><name pos:start="385:22" pos:end="385:36"><name pos:start="385:22" pos:end="385:28">pci_dev</name><operator pos:start="385:29" pos:end="385:30">-&gt;</operator><name pos:start="385:31" pos:end="385:36">config</name></name> <operator pos:start="385:38" pos:end="385:38">+</operator> <name pos:start="385:40" pos:end="385:42">pos</name> <operator pos:start="385:44" pos:end="385:44">+</operator> <name pos:start="385:46" pos:end="385:59">PCI_EXP_DEVSTA</name></expr></argument>, <argument pos:start="385:62" pos:end="385:62"><expr pos:start="385:62" pos:end="385:62"><literal type="number" pos:start="385:62" pos:end="385:62">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="389:9" pos:end="389:76">/* Link capabilities, expose links and latencues, clear reporting */</comment>

        <expr_stmt pos:start="391:9" pos:end="391:70"><expr pos:start="391:9" pos:end="391:69"><name pos:start="391:9" pos:end="391:14">lnkcap</name> <operator pos:start="391:16" pos:end="391:16">=</operator> <call pos:start="391:18" pos:end="391:69"><name pos:start="391:18" pos:end="391:29">pci_get_long</name><argument_list pos:start="391:30" pos:end="391:69">(<argument pos:start="391:31" pos:end="391:68"><expr pos:start="391:31" pos:end="391:68"><name pos:start="391:31" pos:end="391:45"><name pos:start="391:31" pos:end="391:37">pci_dev</name><operator pos:start="391:38" pos:end="391:39">-&gt;</operator><name pos:start="391:40" pos:end="391:45">config</name></name> <operator pos:start="391:47" pos:end="391:47">+</operator> <name pos:start="391:49" pos:end="391:51">pos</name> <operator pos:start="391:53" pos:end="391:53">+</operator> <name pos:start="391:55" pos:end="391:68">PCI_EXP_LNKCAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="393:9" pos:end="397:40"><expr pos:start="393:9" pos:end="397:39"><name pos:start="393:9" pos:end="393:14">lnkcap</name> <operator pos:start="393:16" pos:end="393:17">&amp;=</operator> <operator pos:start="393:19" pos:end="393:19">(</operator><name pos:start="393:20" pos:end="393:37">PCI_EXP_LNKCAP_SLS</name> <operator pos:start="393:39" pos:end="393:39">|</operator> <name pos:start="393:41" pos:end="393:58">PCI_EXP_LNKCAP_MLW</name> <operator pos:start="393:60" pos:end="393:60">|</operator>

                   <name pos:start="395:20" pos:end="395:39">PCI_EXP_LNKCAP_ASPMS</name> <operator pos:start="395:41" pos:end="395:41">|</operator> <name pos:start="395:43" pos:end="395:62">PCI_EXP_LNKCAP_L0SEL</name> <operator pos:start="395:64" pos:end="395:64">|</operator>

                   <name pos:start="397:20" pos:end="397:38">PCI_EXP_LNKCAP_L1EL</name><operator pos:start="397:39" pos:end="397:39">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:69"><expr pos:start="399:9" pos:end="399:68"><call pos:start="399:9" pos:end="399:68"><name pos:start="399:9" pos:end="399:20">pci_set_long</name><argument_list pos:start="399:21" pos:end="399:68">(<argument pos:start="399:22" pos:end="399:59"><expr pos:start="399:22" pos:end="399:59"><name pos:start="399:22" pos:end="399:36"><name pos:start="399:22" pos:end="399:28">pci_dev</name><operator pos:start="399:29" pos:end="399:30">-&gt;</operator><name pos:start="399:31" pos:end="399:36">config</name></name> <operator pos:start="399:38" pos:end="399:38">+</operator> <name pos:start="399:40" pos:end="399:42">pos</name> <operator pos:start="399:44" pos:end="399:44">+</operator> <name pos:start="399:46" pos:end="399:59">PCI_EXP_LNKCAP</name></expr></argument>, <argument pos:start="399:62" pos:end="399:67"><expr pos:start="399:62" pos:end="399:67"><name pos:start="399:62" pos:end="399:67">lnkcap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="403:9" pos:end="403:78">/* Link control, pass existing read-only copy.  Should be writable? */</comment>



        <comment type="block" pos:start="407:9" pos:end="407:62">/* Link status, only expose current speed and width */</comment>

        <expr_stmt pos:start="409:9" pos:end="409:70"><expr pos:start="409:9" pos:end="409:69"><name pos:start="409:9" pos:end="409:14">lnksta</name> <operator pos:start="409:16" pos:end="409:16">=</operator> <call pos:start="409:18" pos:end="409:69"><name pos:start="409:18" pos:end="409:29">pci_get_word</name><argument_list pos:start="409:30" pos:end="409:69">(<argument pos:start="409:31" pos:end="409:68"><expr pos:start="409:31" pos:end="409:68"><name pos:start="409:31" pos:end="409:45"><name pos:start="409:31" pos:end="409:37">pci_dev</name><operator pos:start="409:38" pos:end="409:39">-&gt;</operator><name pos:start="409:40" pos:end="409:45">config</name></name> <operator pos:start="409:47" pos:end="409:47">+</operator> <name pos:start="409:49" pos:end="409:51">pos</name> <operator pos:start="409:53" pos:end="409:53">+</operator> <name pos:start="409:55" pos:end="409:68">PCI_EXP_LNKSTA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:60"><expr pos:start="411:9" pos:end="411:59"><name pos:start="411:9" pos:end="411:14">lnksta</name> <operator pos:start="411:16" pos:end="411:17">&amp;=</operator> <operator pos:start="411:19" pos:end="411:19">(</operator><name pos:start="411:20" pos:end="411:37">PCI_EXP_LNKSTA_CLS</name> <operator pos:start="411:39" pos:end="411:39">|</operator> <name pos:start="411:41" pos:end="411:58">PCI_EXP_LNKSTA_NLW</name><operator pos:start="411:59" pos:end="411:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:69"><expr pos:start="413:9" pos:end="413:68"><call pos:start="413:9" pos:end="413:68"><name pos:start="413:9" pos:end="413:20">pci_set_word</name><argument_list pos:start="413:21" pos:end="413:68">(<argument pos:start="413:22" pos:end="413:59"><expr pos:start="413:22" pos:end="413:59"><name pos:start="413:22" pos:end="413:36"><name pos:start="413:22" pos:end="413:28">pci_dev</name><operator pos:start="413:29" pos:end="413:30">-&gt;</operator><name pos:start="413:31" pos:end="413:36">config</name></name> <operator pos:start="413:38" pos:end="413:38">+</operator> <name pos:start="413:40" pos:end="413:42">pos</name> <operator pos:start="413:44" pos:end="413:44">+</operator> <name pos:start="413:46" pos:end="413:59">PCI_EXP_LNKSTA</name></expr></argument>, <argument pos:start="413:62" pos:end="413:67"><expr pos:start="413:62" pos:end="413:67"><name pos:start="413:62" pos:end="413:67">lnksta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="417:9" pos:end="443:9"><if pos:start="417:9" pos:end="443:9">if <condition pos:start="417:12" pos:end="417:25">(<expr pos:start="417:13" pos:end="417:24"><name pos:start="417:13" pos:end="417:19">version</name> <operator pos:start="417:21" pos:end="417:22">&gt;=</operator> <literal type="number" pos:start="417:24" pos:end="417:24">2</literal></expr>)</condition> <block pos:start="417:27" pos:end="443:9">{<block_content pos:start="421:13" pos:end="435:67">

            <comment type="block" pos:start="419:13" pos:end="419:79">/* Slot capabilities, control, status - not needed for endpoints */</comment>

            <expr_stmt pos:start="421:13" pos:end="421:68"><expr pos:start="421:13" pos:end="421:67"><call pos:start="421:13" pos:end="421:67"><name pos:start="421:13" pos:end="421:24">pci_set_long</name><argument_list pos:start="421:25" pos:end="421:67">(<argument pos:start="421:26" pos:end="421:63"><expr pos:start="421:26" pos:end="421:63"><name pos:start="421:26" pos:end="421:40"><name pos:start="421:26" pos:end="421:32">pci_dev</name><operator pos:start="421:33" pos:end="421:34">-&gt;</operator><name pos:start="421:35" pos:end="421:40">config</name></name> <operator pos:start="421:42" pos:end="421:42">+</operator> <name pos:start="421:44" pos:end="421:46">pos</name> <operator pos:start="421:48" pos:end="421:48">+</operator> <name pos:start="421:50" pos:end="421:63">PCI_EXP_SLTCAP</name></expr></argument>, <argument pos:start="421:66" pos:end="421:66"><expr pos:start="421:66" pos:end="421:66"><literal type="number" pos:start="421:66" pos:end="421:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:68"><expr pos:start="423:13" pos:end="423:67"><call pos:start="423:13" pos:end="423:67"><name pos:start="423:13" pos:end="423:24">pci_set_word</name><argument_list pos:start="423:25" pos:end="423:67">(<argument pos:start="423:26" pos:end="423:63"><expr pos:start="423:26" pos:end="423:63"><name pos:start="423:26" pos:end="423:40"><name pos:start="423:26" pos:end="423:32">pci_dev</name><operator pos:start="423:33" pos:end="423:34">-&gt;</operator><name pos:start="423:35" pos:end="423:40">config</name></name> <operator pos:start="423:42" pos:end="423:42">+</operator> <name pos:start="423:44" pos:end="423:46">pos</name> <operator pos:start="423:48" pos:end="423:48">+</operator> <name pos:start="423:50" pos:end="423:63">PCI_EXP_SLTCTL</name></expr></argument>, <argument pos:start="423:66" pos:end="423:66"><expr pos:start="423:66" pos:end="423:66"><literal type="number" pos:start="423:66" pos:end="423:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:68"><expr pos:start="425:13" pos:end="425:67"><call pos:start="425:13" pos:end="425:67"><name pos:start="425:13" pos:end="425:24">pci_set_word</name><argument_list pos:start="425:25" pos:end="425:67">(<argument pos:start="425:26" pos:end="425:63"><expr pos:start="425:26" pos:end="425:63"><name pos:start="425:26" pos:end="425:40"><name pos:start="425:26" pos:end="425:32">pci_dev</name><operator pos:start="425:33" pos:end="425:34">-&gt;</operator><name pos:start="425:35" pos:end="425:40">config</name></name> <operator pos:start="425:42" pos:end="425:42">+</operator> <name pos:start="425:44" pos:end="425:46">pos</name> <operator pos:start="425:48" pos:end="425:48">+</operator> <name pos:start="425:50" pos:end="425:63">PCI_EXP_SLTSTA</name></expr></argument>, <argument pos:start="425:66" pos:end="425:66"><expr pos:start="425:66" pos:end="425:66"><literal type="number" pos:start="425:66" pos:end="425:66">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="429:13" pos:end="429:79">/* Root control, capabilities, status - not needed for endpoints */</comment>

            <expr_stmt pos:start="431:13" pos:end="431:67"><expr pos:start="431:13" pos:end="431:66"><call pos:start="431:13" pos:end="431:66"><name pos:start="431:13" pos:end="431:24">pci_set_word</name><argument_list pos:start="431:25" pos:end="431:66">(<argument pos:start="431:26" pos:end="431:62"><expr pos:start="431:26" pos:end="431:62"><name pos:start="431:26" pos:end="431:40"><name pos:start="431:26" pos:end="431:32">pci_dev</name><operator pos:start="431:33" pos:end="431:34">-&gt;</operator><name pos:start="431:35" pos:end="431:40">config</name></name> <operator pos:start="431:42" pos:end="431:42">+</operator> <name pos:start="431:44" pos:end="431:46">pos</name> <operator pos:start="431:48" pos:end="431:48">+</operator> <name pos:start="431:50" pos:end="431:62">PCI_EXP_RTCTL</name></expr></argument>, <argument pos:start="431:65" pos:end="431:65"><expr pos:start="431:65" pos:end="431:65"><literal type="number" pos:start="431:65" pos:end="431:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:67"><expr pos:start="433:13" pos:end="433:66"><call pos:start="433:13" pos:end="433:66"><name pos:start="433:13" pos:end="433:24">pci_set_word</name><argument_list pos:start="433:25" pos:end="433:66">(<argument pos:start="433:26" pos:end="433:62"><expr pos:start="433:26" pos:end="433:62"><name pos:start="433:26" pos:end="433:40"><name pos:start="433:26" pos:end="433:32">pci_dev</name><operator pos:start="433:33" pos:end="433:34">-&gt;</operator><name pos:start="433:35" pos:end="433:40">config</name></name> <operator pos:start="433:42" pos:end="433:42">+</operator> <name pos:start="433:44" pos:end="433:46">pos</name> <operator pos:start="433:48" pos:end="433:48">+</operator> <name pos:start="433:50" pos:end="433:62">PCI_EXP_RTCAP</name></expr></argument>, <argument pos:start="433:65" pos:end="433:65"><expr pos:start="433:65" pos:end="433:65"><literal type="number" pos:start="433:65" pos:end="433:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="435:67"><expr pos:start="435:13" pos:end="435:66"><call pos:start="435:13" pos:end="435:66"><name pos:start="435:13" pos:end="435:24">pci_set_long</name><argument_list pos:start="435:25" pos:end="435:66">(<argument pos:start="435:26" pos:end="435:62"><expr pos:start="435:26" pos:end="435:62"><name pos:start="435:26" pos:end="435:40"><name pos:start="435:26" pos:end="435:32">pci_dev</name><operator pos:start="435:33" pos:end="435:34">-&gt;</operator><name pos:start="435:35" pos:end="435:40">config</name></name> <operator pos:start="435:42" pos:end="435:42">+</operator> <name pos:start="435:44" pos:end="435:46">pos</name> <operator pos:start="435:48" pos:end="435:48">+</operator> <name pos:start="435:50" pos:end="435:62">PCI_EXP_RTSTA</name></expr></argument>, <argument pos:start="435:65" pos:end="435:65"><expr pos:start="435:65" pos:end="435:65"><literal type="number" pos:start="435:65" pos:end="435:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="439:13" pos:end="439:77">/* Device capabilities/control 2, pass existing read-only copy */</comment>

            <comment type="block" pos:start="441:13" pos:end="441:62">/* Link control 2, pass existing read-only copy */</comment>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="449:5" pos:end="449:59"><expr pos:start="449:5" pos:end="449:58"><name pos:start="449:5" pos:end="449:7">pos</name> <operator pos:start="449:9" pos:end="449:9">=</operator> <call pos:start="449:11" pos:end="449:58"><name pos:start="449:11" pos:end="449:29">pci_find_cap_offset</name><argument_list pos:start="449:30" pos:end="449:58">(<argument pos:start="449:31" pos:end="449:37"><expr pos:start="449:31" pos:end="449:37"><name pos:start="449:31" pos:end="449:37">pci_dev</name></expr></argument>, <argument pos:start="449:40" pos:end="449:54"><expr pos:start="449:40" pos:end="449:54"><name pos:start="449:40" pos:end="449:54">PCI_CAP_ID_PCIX</name></expr></argument>, <argument pos:start="449:57" pos:end="449:57"><expr pos:start="449:57" pos:end="449:57"><literal type="number" pos:start="449:57" pos:end="449:57">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="451:5" pos:end="507:5"><if pos:start="451:5" pos:end="507:5">if <condition pos:start="451:8" pos:end="451:12">(<expr pos:start="451:9" pos:end="451:11"><name pos:start="451:9" pos:end="451:11">pos</name></expr>)</condition> <block pos:start="451:14" pos:end="507:5">{<block_content pos:start="453:9" pos:end="505:67">

        <decl_stmt pos:start="453:9" pos:end="453:21"><decl pos:start="453:9" pos:end="453:20"><type pos:start="453:9" pos:end="453:16"><name pos:start="453:9" pos:end="453:16">uint16_t</name></type> <name pos:start="453:18" pos:end="453:20">cmd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="455:9" pos:end="455:24"><decl pos:start="455:9" pos:end="455:23"><type pos:start="455:9" pos:end="455:16"><name pos:start="455:9" pos:end="455:16">uint32_t</name></type> <name pos:start="455:18" pos:end="455:23">status</name></decl>;</decl_stmt>



        <comment type="block" pos:start="459:9" pos:end="459:56">/* Only expose the minimum, 8 byte capability */</comment>

        <expr_stmt pos:start="461:9" pos:end="463:46"><expr pos:start="461:9" pos:end="463:45"><name pos:start="461:9" pos:end="461:11">ret</name> <operator pos:start="461:13" pos:end="461:13">=</operator> <call pos:start="461:15" pos:end="463:45"><name pos:start="461:15" pos:end="461:33">pci_add_capability2</name><argument_list pos:start="461:34" pos:end="463:45">(<argument pos:start="461:35" pos:end="461:41"><expr pos:start="461:35" pos:end="461:41"><name pos:start="461:35" pos:end="461:41">pci_dev</name></expr></argument>, <argument pos:start="461:44" pos:end="461:58"><expr pos:start="461:44" pos:end="461:58"><name pos:start="461:44" pos:end="461:58">PCI_CAP_ID_PCIX</name></expr></argument>, <argument pos:start="461:61" pos:end="461:63"><expr pos:start="461:61" pos:end="461:63"><name pos:start="461:61" pos:end="461:63">pos</name></expr></argument>, <argument pos:start="461:66" pos:end="461:66"><expr pos:start="461:66" pos:end="461:66"><literal type="number" pos:start="461:66" pos:end="461:66">8</literal></expr></argument>,

                                  <argument pos:start="463:35" pos:end="463:44"><expr pos:start="463:35" pos:end="463:44"><operator pos:start="463:35" pos:end="463:35">&amp;</operator><name pos:start="463:36" pos:end="463:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="465:9" pos:end="471:9"><if pos:start="465:9" pos:end="471:9">if <condition pos:start="465:12" pos:end="465:20">(<expr pos:start="465:13" pos:end="465:19"><name pos:start="465:13" pos:end="465:15">ret</name> <operator pos:start="465:17" pos:end="465:17">&lt;</operator> <literal type="number" pos:start="465:19" pos:end="465:19">0</literal></expr>)</condition> <block pos:start="465:22" pos:end="471:9">{<block_content pos:start="467:13" pos:end="469:23">

            <expr_stmt pos:start="467:13" pos:end="467:45"><expr pos:start="467:13" pos:end="467:44"><call pos:start="467:13" pos:end="467:44"><name pos:start="467:13" pos:end="467:27">error_propagate</name><argument_list pos:start="467:28" pos:end="467:44">(<argument pos:start="467:29" pos:end="467:32"><expr pos:start="467:29" pos:end="467:32"><name pos:start="467:29" pos:end="467:32">errp</name></expr></argument>, <argument pos:start="467:35" pos:end="467:43"><expr pos:start="467:35" pos:end="467:43"><name pos:start="467:35" pos:end="467:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="469:13" pos:end="469:23">return <expr pos:start="469:20" pos:end="469:22"><name pos:start="469:20" pos:end="469:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="475:9" pos:end="475:49"><expr pos:start="475:9" pos:end="475:48"><call pos:start="475:9" pos:end="475:48"><name pos:start="475:9" pos:end="475:35">assigned_dev_setup_cap_read</name><argument_list pos:start="475:36" pos:end="475:48">(<argument pos:start="475:37" pos:end="475:39"><expr pos:start="475:37" pos:end="475:39"><name pos:start="475:37" pos:end="475:39">dev</name></expr></argument>, <argument pos:start="475:42" pos:end="475:44"><expr pos:start="475:42" pos:end="475:44"><name pos:start="475:42" pos:end="475:44">pos</name></expr></argument>, <argument pos:start="475:47" pos:end="475:47"><expr pos:start="475:47" pos:end="475:47"><literal type="number" pos:start="475:47" pos:end="475:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="479:9" pos:end="479:74">/* Command register, clear upper bits, including extended modes */</comment>

        <expr_stmt pos:start="481:9" pos:end="481:62"><expr pos:start="481:9" pos:end="481:61"><name pos:start="481:9" pos:end="481:11">cmd</name> <operator pos:start="481:13" pos:end="481:13">=</operator> <call pos:start="481:15" pos:end="481:61"><name pos:start="481:15" pos:end="481:26">pci_get_word</name><argument_list pos:start="481:27" pos:end="481:61">(<argument pos:start="481:28" pos:end="481:60"><expr pos:start="481:28" pos:end="481:60"><name pos:start="481:28" pos:end="481:42"><name pos:start="481:28" pos:end="481:34">pci_dev</name><operator pos:start="481:35" pos:end="481:36">-&gt;</operator><name pos:start="481:37" pos:end="481:42">config</name></name> <operator pos:start="481:44" pos:end="481:44">+</operator> <name pos:start="481:46" pos:end="481:48">pos</name> <operator pos:start="481:50" pos:end="481:50">+</operator> <name pos:start="481:52" pos:end="481:60">PCI_X_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="483:9" pos:end="485:37"><expr pos:start="483:9" pos:end="485:36"><name pos:start="483:9" pos:end="483:11">cmd</name> <operator pos:start="483:13" pos:end="483:14">&amp;=</operator> <operator pos:start="483:16" pos:end="483:16">(</operator><name pos:start="483:17" pos:end="483:33">PCI_X_CMD_DPERR_E</name> <operator pos:start="483:35" pos:end="483:35">|</operator> <name pos:start="483:37" pos:end="483:49">PCI_X_CMD_ERO</name> <operator pos:start="483:51" pos:end="483:51">|</operator> <name pos:start="483:53" pos:end="483:70">PCI_X_CMD_MAX_READ</name> <operator pos:start="483:72" pos:end="483:72">|</operator>

                <name pos:start="485:17" pos:end="485:35">PCI_X_CMD_MAX_SPLIT</name><operator pos:start="485:36" pos:end="485:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="487:9" pos:end="487:61"><expr pos:start="487:9" pos:end="487:60"><call pos:start="487:9" pos:end="487:60"><name pos:start="487:9" pos:end="487:20">pci_set_word</name><argument_list pos:start="487:21" pos:end="487:60">(<argument pos:start="487:22" pos:end="487:54"><expr pos:start="487:22" pos:end="487:54"><name pos:start="487:22" pos:end="487:36"><name pos:start="487:22" pos:end="487:28">pci_dev</name><operator pos:start="487:29" pos:end="487:30">-&gt;</operator><name pos:start="487:31" pos:end="487:36">config</name></name> <operator pos:start="487:38" pos:end="487:38">+</operator> <name pos:start="487:40" pos:end="487:42">pos</name> <operator pos:start="487:44" pos:end="487:44">+</operator> <name pos:start="487:46" pos:end="487:54">PCI_X_CMD</name></expr></argument>, <argument pos:start="487:57" pos:end="487:59"><expr pos:start="487:57" pos:end="487:59"><name pos:start="487:57" pos:end="487:59">cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="491:9" pos:end="493:41">/* Status register, update with emulated PCI bus location, clear

         * error bits, leave the rest. */</comment>

        <expr_stmt pos:start="495:9" pos:end="495:68"><expr pos:start="495:9" pos:end="495:67"><name pos:start="495:9" pos:end="495:14">status</name> <operator pos:start="495:16" pos:end="495:16">=</operator> <call pos:start="495:18" pos:end="495:67"><name pos:start="495:18" pos:end="495:29">pci_get_long</name><argument_list pos:start="495:30" pos:end="495:67">(<argument pos:start="495:31" pos:end="495:66"><expr pos:start="495:31" pos:end="495:66"><name pos:start="495:31" pos:end="495:45"><name pos:start="495:31" pos:end="495:37">pci_dev</name><operator pos:start="495:38" pos:end="495:39">-&gt;</operator><name pos:start="495:40" pos:end="495:45">config</name></name> <operator pos:start="495:47" pos:end="495:47">+</operator> <name pos:start="495:49" pos:end="495:51">pos</name> <operator pos:start="495:53" pos:end="495:53">+</operator> <name pos:start="495:55" pos:end="495:66">PCI_X_STATUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="497:9" pos:end="497:59"><expr pos:start="497:9" pos:end="497:58"><name pos:start="497:9" pos:end="497:14">status</name> <operator pos:start="497:16" pos:end="497:17">&amp;=</operator> <operator pos:start="497:19" pos:end="497:19">~</operator><operator pos:start="497:20" pos:end="497:20">(</operator><name pos:start="497:21" pos:end="497:36">PCI_X_STATUS_BUS</name> <operator pos:start="497:38" pos:end="497:38">|</operator> <name pos:start="497:40" pos:end="497:57">PCI_X_STATUS_DEVFN</name><operator pos:start="497:58" pos:end="497:58">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="499:9" pos:end="499:68"><expr pos:start="499:9" pos:end="499:67"><name pos:start="499:9" pos:end="499:14">status</name> <operator pos:start="499:16" pos:end="499:17">|=</operator> <operator pos:start="499:19" pos:end="499:19">(</operator><call pos:start="499:20" pos:end="499:44"><name pos:start="499:20" pos:end="499:30">pci_bus_num</name><argument_list pos:start="499:31" pos:end="499:44">(<argument pos:start="499:32" pos:end="499:43"><expr pos:start="499:32" pos:end="499:43"><name pos:start="499:32" pos:end="499:43"><name pos:start="499:32" pos:end="499:38">pci_dev</name><operator pos:start="499:39" pos:end="499:40">-&gt;</operator><name pos:start="499:41" pos:end="499:43">bus</name></name></expr></argument>)</argument_list></call> <operator pos:start="499:46" pos:end="499:47">&lt;&lt;</operator> <literal type="number" pos:start="499:49" pos:end="499:49">8</literal><operator pos:start="499:50" pos:end="499:50">)</operator> <operator pos:start="499:52" pos:end="499:52">|</operator> <name pos:start="499:54" pos:end="499:67"><name pos:start="499:54" pos:end="499:60">pci_dev</name><operator pos:start="499:61" pos:end="499:62">-&gt;</operator><name pos:start="499:63" pos:end="499:67">devfn</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="501:9" pos:end="503:42"><expr pos:start="501:9" pos:end="503:41"><name pos:start="501:9" pos:end="501:14">status</name> <operator pos:start="501:16" pos:end="501:17">&amp;=</operator> <operator pos:start="501:19" pos:end="501:19">~</operator><operator pos:start="501:20" pos:end="501:20">(</operator><name pos:start="501:21" pos:end="501:41">PCI_X_STATUS_SPL_DISC</name> <operator pos:start="501:43" pos:end="501:43">|</operator> <name pos:start="501:45" pos:end="501:64">PCI_X_STATUS_UNX_SPL</name> <operator pos:start="501:66" pos:end="501:66">|</operator>

                    <name pos:start="503:21" pos:end="503:40">PCI_X_STATUS_SPL_ERR</name><operator pos:start="503:41" pos:end="503:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="505:9" pos:end="505:67"><expr pos:start="505:9" pos:end="505:66"><call pos:start="505:9" pos:end="505:66"><name pos:start="505:9" pos:end="505:20">pci_set_long</name><argument_list pos:start="505:21" pos:end="505:66">(<argument pos:start="505:22" pos:end="505:57"><expr pos:start="505:22" pos:end="505:57"><name pos:start="505:22" pos:end="505:36"><name pos:start="505:22" pos:end="505:28">pci_dev</name><operator pos:start="505:29" pos:end="505:30">-&gt;</operator><name pos:start="505:31" pos:end="505:36">config</name></name> <operator pos:start="505:38" pos:end="505:38">+</operator> <name pos:start="505:40" pos:end="505:42">pos</name> <operator pos:start="505:44" pos:end="505:44">+</operator> <name pos:start="505:46" pos:end="505:57">PCI_X_STATUS</name></expr></argument>, <argument pos:start="505:60" pos:end="505:65"><expr pos:start="505:60" pos:end="505:65"><name pos:start="505:60" pos:end="505:65">status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="511:5" pos:end="511:58"><expr pos:start="511:5" pos:end="511:57"><name pos:start="511:5" pos:end="511:7">pos</name> <operator pos:start="511:9" pos:end="511:9">=</operator> <call pos:start="511:11" pos:end="511:57"><name pos:start="511:11" pos:end="511:29">pci_find_cap_offset</name><argument_list pos:start="511:30" pos:end="511:57">(<argument pos:start="511:31" pos:end="511:37"><expr pos:start="511:31" pos:end="511:37"><name pos:start="511:31" pos:end="511:37">pci_dev</name></expr></argument>, <argument pos:start="511:40" pos:end="511:53"><expr pos:start="511:40" pos:end="511:53"><name pos:start="511:40" pos:end="511:53">PCI_CAP_ID_VPD</name></expr></argument>, <argument pos:start="511:56" pos:end="511:56"><expr pos:start="511:56" pos:end="511:56"><literal type="number" pos:start="511:56" pos:end="511:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="513:5" pos:end="539:5"><if pos:start="513:5" pos:end="539:5">if <condition pos:start="513:8" pos:end="513:12">(<expr pos:start="513:9" pos:end="513:11"><name pos:start="513:9" pos:end="513:11">pos</name></expr>)</condition> <block pos:start="513:14" pos:end="539:5">{<block_content pos:start="517:9" pos:end="537:58">

        <comment type="block" pos:start="515:9" pos:end="515:36">/* Direct R/W passthrough */</comment>

        <expr_stmt pos:start="517:9" pos:end="519:46"><expr pos:start="517:9" pos:end="519:45"><name pos:start="517:9" pos:end="517:11">ret</name> <operator pos:start="517:13" pos:end="517:13">=</operator> <call pos:start="517:15" pos:end="519:45"><name pos:start="517:15" pos:end="517:33">pci_add_capability2</name><argument_list pos:start="517:34" pos:end="519:45">(<argument pos:start="517:35" pos:end="517:41"><expr pos:start="517:35" pos:end="517:41"><name pos:start="517:35" pos:end="517:41">pci_dev</name></expr></argument>, <argument pos:start="517:44" pos:end="517:57"><expr pos:start="517:44" pos:end="517:57"><name pos:start="517:44" pos:end="517:57">PCI_CAP_ID_VPD</name></expr></argument>, <argument pos:start="517:60" pos:end="517:62"><expr pos:start="517:60" pos:end="517:62"><name pos:start="517:60" pos:end="517:62">pos</name></expr></argument>, <argument pos:start="517:65" pos:end="517:65"><expr pos:start="517:65" pos:end="517:65"><literal type="number" pos:start="517:65" pos:end="517:65">8</literal></expr></argument>,

                                  <argument pos:start="519:35" pos:end="519:44"><expr pos:start="519:35" pos:end="519:44"><operator pos:start="519:35" pos:end="519:35">&amp;</operator><name pos:start="519:36" pos:end="519:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="521:9" pos:end="527:9"><if pos:start="521:9" pos:end="527:9">if <condition pos:start="521:12" pos:end="521:20">(<expr pos:start="521:13" pos:end="521:19"><name pos:start="521:13" pos:end="521:15">ret</name> <operator pos:start="521:17" pos:end="521:17">&lt;</operator> <literal type="number" pos:start="521:19" pos:end="521:19">0</literal></expr>)</condition> <block pos:start="521:22" pos:end="527:9">{<block_content pos:start="523:13" pos:end="525:23">

            <expr_stmt pos:start="523:13" pos:end="523:45"><expr pos:start="523:13" pos:end="523:44"><call pos:start="523:13" pos:end="523:44"><name pos:start="523:13" pos:end="523:27">error_propagate</name><argument_list pos:start="523:28" pos:end="523:44">(<argument pos:start="523:29" pos:end="523:32"><expr pos:start="523:29" pos:end="523:32"><name pos:start="523:29" pos:end="523:32">errp</name></expr></argument>, <argument pos:start="523:35" pos:end="523:43"><expr pos:start="523:35" pos:end="523:43"><name pos:start="523:35" pos:end="523:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="525:13" pos:end="525:23">return <expr pos:start="525:20" pos:end="525:22"><name pos:start="525:20" pos:end="525:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="531:9" pos:end="531:49"><expr pos:start="531:9" pos:end="531:48"><call pos:start="531:9" pos:end="531:48"><name pos:start="531:9" pos:end="531:35">assigned_dev_setup_cap_read</name><argument_list pos:start="531:36" pos:end="531:48">(<argument pos:start="531:37" pos:end="531:39"><expr pos:start="531:37" pos:end="531:39"><name pos:start="531:37" pos:end="531:39">dev</name></expr></argument>, <argument pos:start="531:42" pos:end="531:44"><expr pos:start="531:42" pos:end="531:44"><name pos:start="531:42" pos:end="531:44">pos</name></expr></argument>, <argument pos:start="531:47" pos:end="531:47"><expr pos:start="531:47" pos:end="531:47"><literal type="number" pos:start="531:47" pos:end="531:47">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="535:9" pos:end="535:42">/* direct write for cap content */</comment>

        <expr_stmt pos:start="537:9" pos:end="537:58"><expr pos:start="537:9" pos:end="537:57"><call pos:start="537:9" pos:end="537:57"><name pos:start="537:9" pos:end="537:40">assigned_dev_direct_config_write</name><argument_list pos:start="537:41" pos:end="537:57">(<argument pos:start="537:42" pos:end="537:44"><expr pos:start="537:42" pos:end="537:44"><name pos:start="537:42" pos:end="537:44">dev</name></expr></argument>, <argument pos:start="537:47" pos:end="537:53"><expr pos:start="537:47" pos:end="537:53"><name pos:start="537:47" pos:end="537:49">pos</name> <operator pos:start="537:51" pos:end="537:51">+</operator> <literal type="number" pos:start="537:53" pos:end="537:53">2</literal></expr></argument>, <argument pos:start="537:56" pos:end="537:56"><expr pos:start="537:56" pos:end="537:56"><literal type="number" pos:start="537:56" pos:end="537:56">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="543:5" pos:end="543:69">/* Devices can have multiple vendor capabilities, get them all */</comment>

    <for pos:start="545:5" pos:end="575:5">for <control pos:start="545:9" pos:end="547:33">(<init pos:start="545:10" pos:end="545:17"><expr pos:start="545:10" pos:end="545:16"><name pos:start="545:10" pos:end="545:12">pos</name> <operator pos:start="545:14" pos:end="545:14">=</operator> <literal type="number" pos:start="545:16" pos:end="545:16">0</literal></expr>;</init> <condition pos:start="545:19" pos:end="545:77"><expr pos:start="545:19" pos:end="545:76"><operator pos:start="545:19" pos:end="545:19">(</operator><name pos:start="545:20" pos:end="545:22">pos</name> <operator pos:start="545:24" pos:end="545:24">=</operator> <call pos:start="545:26" pos:end="545:75"><name pos:start="545:26" pos:end="545:44">pci_find_cap_offset</name><argument_list pos:start="545:45" pos:end="545:75">(<argument pos:start="545:46" pos:end="545:52"><expr pos:start="545:46" pos:end="545:52"><name pos:start="545:46" pos:end="545:52">pci_dev</name></expr></argument>, <argument pos:start="545:55" pos:end="545:69"><expr pos:start="545:55" pos:end="545:69"><name pos:start="545:55" pos:end="545:69">PCI_CAP_ID_VNDR</name></expr></argument>, <argument pos:start="545:72" pos:end="545:74"><expr pos:start="545:72" pos:end="545:74"><name pos:start="545:72" pos:end="545:74">pos</name></expr></argument>)</argument_list></call><operator pos:start="545:76" pos:end="545:76">)</operator></expr>;</condition>

        <incr pos:start="547:9" pos:end="547:32"><expr pos:start="547:9" pos:end="547:32"><name pos:start="547:9" pos:end="547:11">pos</name> <operator pos:start="547:13" pos:end="547:14">+=</operator> <name pos:start="547:16" pos:end="547:32">PCI_CAP_LIST_NEXT</name></expr></incr>)</control> <block pos:start="547:35" pos:end="575:5">{<block_content pos:start="549:9" pos:end="573:64">

        <decl_stmt pos:start="549:9" pos:end="549:74"><decl pos:start="549:9" pos:end="549:73"><type pos:start="549:9" pos:end="549:15"><name pos:start="549:9" pos:end="549:15">uint8_t</name></type> <name pos:start="549:17" pos:end="549:19">len</name> <init pos:start="549:21" pos:end="549:73">= <expr pos:start="549:23" pos:end="549:73"><call pos:start="549:23" pos:end="549:73"><name pos:start="549:23" pos:end="549:34">pci_get_byte</name><argument_list pos:start="549:35" pos:end="549:73">(<argument pos:start="549:36" pos:end="549:72"><expr pos:start="549:36" pos:end="549:72"><name pos:start="549:36" pos:end="549:50"><name pos:start="549:36" pos:end="549:42">pci_dev</name><operator pos:start="549:43" pos:end="549:44">-&gt;</operator><name pos:start="549:45" pos:end="549:50">config</name></name> <operator pos:start="549:52" pos:end="549:52">+</operator> <name pos:start="549:54" pos:end="549:56">pos</name> <operator pos:start="549:58" pos:end="549:58">+</operator> <name pos:start="549:60" pos:end="549:72">PCI_CAP_FLAGS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="551:9" pos:end="551:36">/* Direct R/W passthrough */</comment>

        <expr_stmt pos:start="553:9" pos:end="555:46"><expr pos:start="553:9" pos:end="555:45"><name pos:start="553:9" pos:end="553:11">ret</name> <operator pos:start="553:13" pos:end="553:13">=</operator> <call pos:start="553:15" pos:end="555:45"><name pos:start="553:15" pos:end="553:33">pci_add_capability2</name><argument_list pos:start="553:34" pos:end="555:45">(<argument pos:start="553:35" pos:end="553:41"><expr pos:start="553:35" pos:end="553:41"><name pos:start="553:35" pos:end="553:41">pci_dev</name></expr></argument>, <argument pos:start="553:44" pos:end="553:58"><expr pos:start="553:44" pos:end="553:58"><name pos:start="553:44" pos:end="553:58">PCI_CAP_ID_VNDR</name></expr></argument>, <argument pos:start="553:61" pos:end="553:63"><expr pos:start="553:61" pos:end="553:63"><name pos:start="553:61" pos:end="553:63">pos</name></expr></argument>, <argument pos:start="553:66" pos:end="553:68"><expr pos:start="553:66" pos:end="553:68"><name pos:start="553:66" pos:end="553:68">len</name></expr></argument>,

                                  <argument pos:start="555:35" pos:end="555:44"><expr pos:start="555:35" pos:end="555:44"><operator pos:start="555:35" pos:end="555:35">&amp;</operator><name pos:start="555:36" pos:end="555:44">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="557:9" pos:end="563:9"><if pos:start="557:9" pos:end="563:9">if <condition pos:start="557:12" pos:end="557:20">(<expr pos:start="557:13" pos:end="557:19"><name pos:start="557:13" pos:end="557:15">ret</name> <operator pos:start="557:17" pos:end="557:17">&lt;</operator> <literal type="number" pos:start="557:19" pos:end="557:19">0</literal></expr>)</condition> <block pos:start="557:22" pos:end="563:9">{<block_content pos:start="559:13" pos:end="561:23">

            <expr_stmt pos:start="559:13" pos:end="559:45"><expr pos:start="559:13" pos:end="559:44"><call pos:start="559:13" pos:end="559:44"><name pos:start="559:13" pos:end="559:27">error_propagate</name><argument_list pos:start="559:28" pos:end="559:44">(<argument pos:start="559:29" pos:end="559:32"><expr pos:start="559:29" pos:end="559:32"><name pos:start="559:29" pos:end="559:32">errp</name></expr></argument>, <argument pos:start="559:35" pos:end="559:43"><expr pos:start="559:35" pos:end="559:43"><name pos:start="559:35" pos:end="559:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="561:13" pos:end="561:23">return <expr pos:start="561:20" pos:end="561:22"><name pos:start="561:20" pos:end="561:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="567:9" pos:end="567:51"><expr pos:start="567:9" pos:end="567:50"><call pos:start="567:9" pos:end="567:50"><name pos:start="567:9" pos:end="567:35">assigned_dev_setup_cap_read</name><argument_list pos:start="567:36" pos:end="567:50">(<argument pos:start="567:37" pos:end="567:39"><expr pos:start="567:37" pos:end="567:39"><name pos:start="567:37" pos:end="567:39">dev</name></expr></argument>, <argument pos:start="567:42" pos:end="567:44"><expr pos:start="567:42" pos:end="567:44"><name pos:start="567:42" pos:end="567:44">pos</name></expr></argument>, <argument pos:start="567:47" pos:end="567:49"><expr pos:start="567:47" pos:end="567:49"><name pos:start="567:47" pos:end="567:49">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="571:9" pos:end="571:42">/* direct write for cap content */</comment>

        <expr_stmt pos:start="573:9" pos:end="573:64"><expr pos:start="573:9" pos:end="573:63"><call pos:start="573:9" pos:end="573:63"><name pos:start="573:9" pos:end="573:40">assigned_dev_direct_config_write</name><argument_list pos:start="573:41" pos:end="573:63">(<argument pos:start="573:42" pos:end="573:44"><expr pos:start="573:42" pos:end="573:44"><name pos:start="573:42" pos:end="573:44">dev</name></expr></argument>, <argument pos:start="573:47" pos:end="573:53"><expr pos:start="573:47" pos:end="573:53"><name pos:start="573:47" pos:end="573:49">pos</name> <operator pos:start="573:51" pos:end="573:51">+</operator> <literal type="number" pos:start="573:53" pos:end="573:53">2</literal></expr></argument>, <argument pos:start="573:56" pos:end="573:62"><expr pos:start="573:56" pos:end="573:62"><name pos:start="573:56" pos:end="573:58">len</name> <operator pos:start="573:60" pos:end="573:60">-</operator> <literal type="number" pos:start="573:62" pos:end="573:62">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="579:5" pos:end="581:17">/* If real and virtual capability list status bits differ, virtualize the

     * access. */</comment>

    <if_stmt pos:start="583:5" pos:end="591:5"><if pos:start="583:5" pos:end="591:5">if <condition pos:start="583:8" pos:end="587:30">(<expr pos:start="583:9" pos:end="587:29"><operator pos:start="583:9" pos:end="583:9">(</operator><call pos:start="583:10" pos:end="583:51"><name pos:start="583:10" pos:end="583:21">pci_get_word</name><argument_list pos:start="583:22" pos:end="583:51">(<argument pos:start="583:23" pos:end="583:50"><expr pos:start="583:23" pos:end="583:50"><name pos:start="583:23" pos:end="583:37"><name pos:start="583:23" pos:end="583:29">pci_dev</name><operator pos:start="583:30" pos:end="583:31">-&gt;</operator><name pos:start="583:32" pos:end="583:37">config</name></name> <operator pos:start="583:39" pos:end="583:39">+</operator> <name pos:start="583:41" pos:end="583:50">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="583:53" pos:end="583:53">&amp;</operator> <name pos:start="583:55" pos:end="583:73">PCI_STATUS_CAP_LIST</name><operator pos:start="583:74" pos:end="583:74">)</operator> <operator pos:start="583:76" pos:end="583:77">!=</operator>

        <operator pos:start="585:9" pos:end="585:9">(</operator><call pos:start="585:10" pos:end="585:56"><name pos:start="585:10" pos:end="585:35">assigned_dev_pci_read_byte</name><argument_list pos:start="585:36" pos:end="585:56">(<argument pos:start="585:37" pos:end="585:43"><expr pos:start="585:37" pos:end="585:43"><name pos:start="585:37" pos:end="585:43">pci_dev</name></expr></argument>, <argument pos:start="585:46" pos:end="585:55"><expr pos:start="585:46" pos:end="585:55"><name pos:start="585:46" pos:end="585:55">PCI_STATUS</name></expr></argument>)</argument_list></call> <operator pos:start="585:58" pos:end="585:58">&amp;</operator>

         <name pos:start="587:10" pos:end="587:28">PCI_STATUS_CAP_LIST</name><operator pos:start="587:29" pos:end="587:29">)</operator></expr>)</condition> <block pos:start="587:32" pos:end="591:5">{<block_content pos:start="589:9" pos:end="589:68">

        <expr_stmt pos:start="589:9" pos:end="589:68"><expr pos:start="589:9" pos:end="589:67"><name pos:start="589:9" pos:end="589:44"><name pos:start="589:9" pos:end="589:11">dev</name><operator pos:start="589:12" pos:end="589:13">-&gt;</operator><name pos:start="589:14" pos:end="589:32">emulate_config_read</name><index pos:start="589:33" pos:end="589:44">[<expr pos:start="589:34" pos:end="589:43"><name pos:start="589:34" pos:end="589:43">PCI_STATUS</name></expr>]</index></name> <operator pos:start="589:46" pos:end="589:47">|=</operator> <name pos:start="589:49" pos:end="589:67">PCI_STATUS_CAP_LIST</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="595:5" pos:end="595:13">return <expr pos:start="595:12" pos:end="595:12"><literal type="number" pos:start="595:12" pos:end="595:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
