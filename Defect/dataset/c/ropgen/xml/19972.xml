<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19972.c" pos:tabs="8"><function pos:start="1:1" pos:end="78:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">parse_inputs</name><parameter_list pos:start="1:24" pos:end="3:68">(<parameter pos:start="1:25" pos:end="1:40"><decl pos:start="1:25" pos:end="1:40"><type pos:start="1:25" pos:end="1:40"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier><modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">buf</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:68"><decl pos:start="1:43" pos:end="1:68"><type pos:start="1:43" pos:end="1:68"><name pos:start="1:43" pos:end="1:55">AVFilterInOut</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier><modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:68">currInputs</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:49"><decl pos:start="3:25" pos:end="3:49"><type pos:start="3:25" pos:end="3:49"><name pos:start="3:25" pos:end="3:37">AVFilterInOut</name> <modifier pos:start="3:39" pos:end="3:39">*</modifier><modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:49">openLinks</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:67"><decl pos:start="3:52" pos:end="3:67"><type pos:start="3:52" pos:end="3:67"><name pos:start="3:52" pos:end="3:58">AVClass</name> <modifier pos:start="3:60" pos:end="3:60">*</modifier></type><name pos:start="3:61" pos:end="3:67">log_ctx</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="78:1">{<block_content pos:start="7:5" pos:end="76:15">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">pad</name> <init pos:start="7:13" pos:end="7:15">= <expr pos:start="7:15" pos:end="7:15"><literal type="number" pos:start="7:15" pos:end="7:15">0</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="11:5" pos:end="72:5">while<condition pos:start="11:10" pos:end="11:23">(<expr pos:start="11:11" pos:end="11:22"><operator pos:start="11:11" pos:end="11:11">*</operator><operator pos:start="11:12" pos:end="11:12">*</operator><name pos:start="11:13" pos:end="11:15">buf</name> <operator pos:start="11:17" pos:end="11:18">==</operator> <literal type="char" pos:start="11:20" pos:end="11:22">'['</literal></expr>)</condition> <block pos:start="11:25" pos:end="72:5">{<block_content pos:start="13:9" pos:end="70:14">

        <decl_stmt pos:start="13:9" pos:end="13:51"><decl pos:start="13:9" pos:end="13:50"><type pos:start="13:9" pos:end="13:14"><name pos:start="13:9" pos:end="13:12">char</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:18">name</name> <init pos:start="13:20" pos:end="13:50">= <expr pos:start="13:22" pos:end="13:50"><call pos:start="13:22" pos:end="13:50"><name pos:start="13:22" pos:end="13:36">parse_link_name</name><argument_list pos:start="13:37" pos:end="13:50">(<argument pos:start="13:38" pos:end="13:40"><expr pos:start="13:38" pos:end="13:40"><name pos:start="13:38" pos:end="13:40">buf</name></expr></argument>, <argument pos:start="13:43" pos:end="13:49"><expr pos:start="13:43" pos:end="13:49"><name pos:start="13:43" pos:end="13:49">log_ctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:29"><decl pos:start="15:9" pos:end="15:28"><type pos:start="15:9" pos:end="15:23"><name pos:start="15:9" pos:end="15:21">AVFilterInOut</name> <modifier pos:start="15:23" pos:end="15:23">*</modifier></type><name pos:start="15:24" pos:end="15:28">match</name></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="21:22"><if pos:start="19:9" pos:end="21:22">if<condition pos:start="19:11" pos:end="19:17">(<expr pos:start="19:12" pos:end="19:16"><operator pos:start="19:12" pos:end="19:12">!</operator><name pos:start="19:13" pos:end="19:16">name</name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:22"><block_content pos:start="21:13" pos:end="21:22">

            <return pos:start="21:13" pos:end="21:22">return <expr pos:start="21:20" pos:end="21:21"><operator pos:start="21:20" pos:end="21:20">-</operator><literal type="number" pos:start="21:21" pos:end="21:21">1</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="25:9" pos:end="25:67">/* First check if the label is not in the openLinks list */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:47"><expr pos:start="27:9" pos:end="27:46"><name pos:start="27:9" pos:end="27:13">match</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="27:46"><name pos:start="27:17" pos:end="27:29">extract_inout</name><argument_list pos:start="27:30" pos:end="27:46">(<argument pos:start="27:31" pos:end="27:34"><expr pos:start="27:31" pos:end="27:34"><name pos:start="27:31" pos:end="27:34">name</name></expr></argument>, <argument pos:start="27:37" pos:end="27:45"><expr pos:start="27:37" pos:end="27:45"><name pos:start="27:37" pos:end="27:45">openLinks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="31:9" pos:end="60:9"><if pos:start="31:9" pos:end="48:9">if<condition pos:start="31:11" pos:end="31:17">(<expr pos:start="31:12" pos:end="31:16"><name pos:start="31:12" pos:end="31:16">match</name></expr>)</condition> <block pos:start="31:19" pos:end="48:9">{<block_content pos:start="37:13" pos:end="45:13">

            <comment type="block" pos:start="33:13" pos:end="35:24">/* A label of a open link. Make it one of the inputs of the next

               filter */</comment>

            <if_stmt pos:start="37:13" pos:end="45:13"><if pos:start="37:13" pos:end="45:13">if<condition pos:start="37:15" pos:end="37:42">(<expr pos:start="37:16" pos:end="37:41"><name pos:start="37:16" pos:end="37:26"><name pos:start="37:16" pos:end="37:20">match</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:26">type</name></name> <operator pos:start="37:28" pos:end="37:29">!=</operator> <name pos:start="37:31" pos:end="37:41">LinkTypeOut</name></expr>)</condition> <block pos:start="37:44" pos:end="45:13">{<block_content pos:start="39:17" pos:end="43:26">

                <expr_stmt pos:start="39:17" pos:end="41:78"><expr pos:start="39:17" pos:end="41:77"><call pos:start="39:17" pos:end="41:77"><name pos:start="39:17" pos:end="39:22">av_log</name><argument_list pos:start="39:23" pos:end="41:77">(<argument pos:start="39:24" pos:end="39:30"><expr pos:start="39:24" pos:end="39:30"><name pos:start="39:24" pos:end="39:30">log_ctx</name></expr></argument>, <argument pos:start="39:33" pos:end="39:44"><expr pos:start="39:33" pos:end="39:44"><name pos:start="39:33" pos:end="39:44">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="41:24" pos:end="41:63"><expr pos:start="41:24" pos:end="41:63"><literal type="string" pos:start="41:24" pos:end="41:63">"Label \"%s\" appears twice as input!\n"</literal></expr></argument>, <argument pos:start="41:66" pos:end="41:76"><expr pos:start="41:66" pos:end="41:76"><name pos:start="41:66" pos:end="41:76"><name pos:start="41:66" pos:end="41:70">match</name><operator pos:start="41:71" pos:end="41:72">-&gt;</operator><name pos:start="41:73" pos:end="41:76">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="43:17" pos:end="43:26">return <expr pos:start="43:24" pos:end="43:25"><operator pos:start="43:24" pos:end="43:24">-</operator><literal type="number" pos:start="43:25" pos:end="43:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>


        </block_content>}</block></if> <else pos:start="48:11" pos:end="60:9">else <block pos:start="48:16" pos:end="60:9">{<block_content pos:start="52:13" pos:end="58:33">

            <comment type="block" pos:start="50:13" pos:end="50:56">/* Not in the list, so add it as an input */</comment>

            <expr_stmt pos:start="52:13" pos:end="52:54"><expr pos:start="52:13" pos:end="52:53"><name pos:start="52:13" pos:end="52:17">match</name> <operator pos:start="52:19" pos:end="52:19">=</operator> <call pos:start="52:21" pos:end="52:53"><name pos:start="52:21" pos:end="52:30">av_mallocz</name><argument_list pos:start="52:31" pos:end="52:53">(<argument pos:start="52:32" pos:end="52:52"><expr pos:start="52:32" pos:end="52:52"><sizeof pos:start="52:32" pos:end="52:52">sizeof<argument_list pos:start="52:38" pos:end="52:52">(<argument pos:start="52:39" pos:end="52:51"><expr pos:start="52:39" pos:end="52:51"><name pos:start="52:39" pos:end="52:51">AVFilterInOut</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="54:13" pos:end="54:34"><expr pos:start="54:13" pos:end="54:33"><name pos:start="54:13" pos:end="54:23"><name pos:start="54:13" pos:end="54:17">match</name><operator pos:start="54:18" pos:end="54:19">-&gt;</operator><name pos:start="54:20" pos:end="54:23">name</name></name>    <operator pos:start="54:28" pos:end="54:28">=</operator> <name pos:start="54:30" pos:end="54:33">name</name></expr>;</expr_stmt>

            <expr_stmt pos:start="56:13" pos:end="56:40"><expr pos:start="56:13" pos:end="56:39"><name pos:start="56:13" pos:end="56:23"><name pos:start="56:13" pos:end="56:17">match</name><operator pos:start="56:18" pos:end="56:19">-&gt;</operator><name pos:start="56:20" pos:end="56:23">type</name></name>    <operator pos:start="56:28" pos:end="56:28">=</operator> <name pos:start="56:30" pos:end="56:39">LinkTypeIn</name></expr>;</expr_stmt>

            <expr_stmt pos:start="58:13" pos:end="58:33"><expr pos:start="58:13" pos:end="58:32"><name pos:start="58:13" pos:end="58:26"><name pos:start="58:13" pos:end="58:17">match</name><operator pos:start="58:18" pos:end="58:19">-&gt;</operator><name pos:start="58:20" pos:end="58:26">pad_idx</name></name> <operator pos:start="58:28" pos:end="58:28">=</operator> <name pos:start="58:30" pos:end="58:32">pad</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <expr_stmt pos:start="64:9" pos:end="64:40"><expr pos:start="64:9" pos:end="64:39"><call pos:start="64:9" pos:end="64:39"><name pos:start="64:9" pos:end="64:20">insert_inout</name><argument_list pos:start="64:21" pos:end="64:39">(<argument pos:start="64:22" pos:end="64:31"><expr pos:start="64:22" pos:end="64:31"><name pos:start="64:22" pos:end="64:31">currInputs</name></expr></argument>, <argument pos:start="64:34" pos:end="64:38"><expr pos:start="64:34" pos:end="64:38"><name pos:start="64:34" pos:end="64:38">match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="68:9" pos:end="68:41"><expr pos:start="68:9" pos:end="68:40"><operator pos:start="68:9" pos:end="68:9">*</operator><name pos:start="68:10" pos:end="68:12">buf</name> <operator pos:start="68:14" pos:end="68:15">+=</operator> <call pos:start="68:17" pos:end="68:40"><name pos:start="68:17" pos:end="68:34">consume_whitespace</name><argument_list pos:start="68:35" pos:end="68:40">(<argument pos:start="68:36" pos:end="68:39"><expr pos:start="68:36" pos:end="68:39"><operator pos:start="68:36" pos:end="68:36">*</operator><name pos:start="68:37" pos:end="68:39">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="70:9" pos:end="70:14"><expr pos:start="70:9" pos:end="70:13"><name pos:start="70:9" pos:end="70:11">pad</name><operator pos:start="70:12" pos:end="70:13">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>



    <return pos:start="76:5" pos:end="76:15">return <expr pos:start="76:12" pos:end="76:14"><name pos:start="76:12" pos:end="76:14">pad</name></expr>;</return>

</block_content>}</block></function></unit>
