<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/191.c" pos:tabs="8"><function pos:start="1:1" pos:end="255:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">dv_decode_ac</name><parameter_list pos:start="1:25" pos:end="3:71">(<parameter pos:start="1:26" pos:end="1:48"><decl pos:start="1:26" pos:end="1:48"><type pos:start="1:26" pos:end="1:48"><name pos:start="1:26" pos:end="1:45">DVVideoDecodeContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>, 

                         <parameter pos:start="3:26" pos:end="3:38"><decl pos:start="3:26" pos:end="3:38"><type pos:start="3:26" pos:end="3:38"><name pos:start="3:26" pos:end="3:34">BlockInfo</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:38">mb</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:47">DCTELEM</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:54">block</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:70"><decl pos:start="3:57" pos:end="3:70"><type pos:start="3:57" pos:end="3:70"><name pos:start="3:57" pos:end="3:59">int</name></type> <name pos:start="3:61" pos:end="3:70">last_index</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="255:1">{<block_content pos:start="7:5" pos:end="253:18">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:21">last_re_index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:40"><decl pos:start="9:5" pos:end="9:39"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:20">shift_offset</name> <init pos:start="9:22" pos:end="9:39">= <expr pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:39"><name pos:start="9:24" pos:end="9:25">mb</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:39">shift_offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:45"><decl pos:start="11:5" pos:end="11:44"><type pos:start="11:5" pos:end="11:17"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:15">UINT8</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:27">scan_table</name> <init pos:start="11:29" pos:end="11:44">= <expr pos:start="11:31" pos:end="11:44"><name pos:start="11:31" pos:end="11:44"><name pos:start="11:31" pos:end="11:32">mb</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:44">scan_table</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:46"><type pos:start="13:5" pos:end="13:17"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:15">UINT8</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:28">shift_table</name> <init pos:start="13:30" pos:end="13:46">= <expr pos:start="13:32" pos:end="13:46"><name pos:start="13:32" pos:end="13:46"><name pos:start="13:32" pos:end="13:33">mb</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:46">shift_table</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">pos</name> <init pos:start="15:13" pos:end="15:21">= <expr pos:start="15:15" pos:end="15:21"><name pos:start="15:15" pos:end="15:21"><name pos:start="15:15" pos:end="15:16">mb</name><operator pos:start="15:17" pos:end="15:18">-&gt;</operator><name pos:start="15:19" pos:end="15:21">pos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:31"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">level</name></decl>, <decl pos:start="17:16" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:16" pos:end="17:19">pos1</name></decl>, <decl pos:start="17:22" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:25">sign</name></decl>, <decl pos:start="17:28" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:28" pos:end="17:30">run</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:26"><decl pos:start="19:5" pos:end="19:25"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:25">partial_bit_count</name></decl>;</decl_stmt>



    <expr_stmt pos:start="23:5" pos:end="28:0"><expr pos:start="23:5" pos:end="23:27"><call pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:15">OPEN_READER</name><argument_list pos:start="23:16" pos:end="23:27">(<argument pos:start="23:17" pos:end="23:18"><expr pos:start="23:17" pos:end="23:18"><name pos:start="23:17" pos:end="23:18">re</name></expr></argument>, <argument pos:start="23:21" pos:end="23:26"><expr pos:start="23:21" pos:end="23:26"><operator pos:start="23:21" pos:end="23:21">&amp;</operator><name pos:start="23:22" pos:end="23:26"><name pos:start="23:22" pos:end="23:22">s</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:26">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    

<cpp:ifdef pos:start="27:1" pos:end="27:16">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:16">VLC_DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="29:5" pos:end="32:0"><expr pos:start="29:5" pos:end="29:21"><call pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:10">printf</name><argument_list pos:start="29:11" pos:end="29:21">(<argument pos:start="29:12" pos:end="29:20"><expr pos:start="29:12" pos:end="29:20"><literal type="string" pos:start="29:12" pos:end="29:20">"start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="35:5" pos:end="35:55">/* if we must parse a partial vlc, we do it here */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:46"><expr pos:start="37:5" pos:end="37:45"><name pos:start="37:5" pos:end="37:21">partial_bit_count</name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:45"><name pos:start="37:25" pos:end="37:26">mb</name><operator pos:start="37:27" pos:end="37:28">-&gt;</operator><name pos:start="37:29" pos:end="37:45">partial_bit_count</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="131:5"><if pos:start="39:5" pos:end="131:5">if <condition pos:start="39:8" pos:end="39:30">(<expr pos:start="39:9" pos:end="39:29"><name pos:start="39:9" pos:end="39:25">partial_bit_count</name> <operator pos:start="39:27" pos:end="39:27">&gt;</operator> <literal type="number" pos:start="39:29" pos:end="39:29">0</literal></expr>)</condition> <block pos:start="39:32" pos:end="131:5">{<block_content pos:start="41:9" pos:end="129:24">

        <decl_stmt pos:start="41:9" pos:end="41:21"><decl pos:start="41:9" pos:end="41:20"><type pos:start="41:9" pos:end="41:13"><name pos:start="41:9" pos:end="41:13">UINT8</name></type> <name pos:start="41:15" pos:end="41:20"><name pos:start="41:15" pos:end="41:17">buf</name><index pos:start="41:18" pos:end="41:20">[<expr pos:start="41:19" pos:end="41:19"><literal type="number" pos:start="41:19" pos:end="41:19">4</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:17"><decl pos:start="43:9" pos:end="43:16"><type pos:start="43:9" pos:end="43:14"><name pos:start="43:9" pos:end="43:14">UINT32</name></type> <name pos:start="43:16" pos:end="43:16">v</name></decl>;</decl_stmt>

        <decl_stmt pos:start="45:9" pos:end="45:18"><decl pos:start="45:9" pos:end="45:13"><type pos:start="45:9" pos:end="45:11"><name pos:start="45:9" pos:end="45:11">int</name></type> <name pos:start="45:13" pos:end="45:13">l</name></decl>, <decl pos:start="45:16" pos:end="45:17"><type ref="prev" pos:start="45:9" pos:end="45:11"/><name pos:start="45:16" pos:end="45:17">l1</name></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:26"><decl pos:start="47:9" pos:end="47:25"><type pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:21">GetBitContext</name></type> <name pos:start="47:23" pos:end="47:25">gb1</name></decl>;</decl_stmt>



        <comment type="block" pos:start="51:9" pos:end="51:40">/* build the dummy bit buffer */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:9">l</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <literal type="number" pos:start="53:13" pos:end="53:16">16</literal> <operator pos:start="53:16" pos:end="53:16">-</operator> <name pos:start="53:18" pos:end="53:34">partial_bit_count</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="58:0"><expr pos:start="55:9" pos:end="55:32"><call pos:start="55:9" pos:end="55:32"><name pos:start="55:9" pos:end="55:20">UPDATE_CACHE</name><argument_list pos:start="55:21" pos:end="55:32">(<argument pos:start="55:22" pos:end="55:23"><expr pos:start="55:22" pos:end="55:23"><name pos:start="55:22" pos:end="55:23">re</name></expr></argument>, <argument pos:start="55:26" pos:end="55:31"><expr pos:start="55:26" pos:end="55:31"><operator pos:start="55:26" pos:end="55:26">&amp;</operator><name pos:start="55:27" pos:end="55:31"><name pos:start="55:27" pos:end="55:27">s</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="57:1" pos:end="57:16">#<cpp:directive pos:start="57:2" pos:end="57:6">ifdef</cpp:directive> <name pos:start="57:8" pos:end="57:16">VLC_DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="59:9" pos:end="62:0"><expr pos:start="59:9" pos:end="59:57"><call pos:start="59:9" pos:end="59:57"><name pos:start="59:9" pos:end="59:14">printf</name><argument_list pos:start="59:15" pos:end="59:57">(<argument pos:start="59:16" pos:end="59:28"><expr pos:start="59:16" pos:end="59:28"><literal type="string" pos:start="59:16" pos:end="59:28">"show=%04x\n"</literal></expr></argument>, <argument pos:start="59:31" pos:end="59:56"><expr pos:start="59:31" pos:end="59:56"><call pos:start="59:31" pos:end="59:56"><name pos:start="59:31" pos:end="59:40">SHOW_UBITS</name><argument_list pos:start="59:41" pos:end="59:56">(<argument pos:start="59:42" pos:end="59:43"><expr pos:start="59:42" pos:end="59:43"><name pos:start="59:42" pos:end="59:43">re</name></expr></argument>, <argument pos:start="59:46" pos:end="59:51"><expr pos:start="59:46" pos:end="59:51"><operator pos:start="59:46" pos:end="59:46">&amp;</operator><name pos:start="59:47" pos:end="59:51"><name pos:start="59:47" pos:end="59:47">s</name><operator pos:start="59:48" pos:end="59:49">-&gt;</operator><name pos:start="59:50" pos:end="59:51">gb</name></name></expr></argument>, <argument pos:start="59:54" pos:end="59:55"><expr pos:start="59:54" pos:end="59:55"><literal type="number" pos:start="59:54" pos:end="59:55">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="61:1" pos:end="61:6">#<cpp:directive pos:start="61:2" pos:end="61:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="63:9" pos:end="63:70"><expr pos:start="63:9" pos:end="63:69"><name pos:start="63:9" pos:end="63:9">v</name> <operator pos:start="63:11" pos:end="63:11">=</operator> <operator pos:start="63:13" pos:end="63:13">(</operator><name pos:start="63:14" pos:end="63:35"><name pos:start="63:14" pos:end="63:15">mb</name><operator pos:start="63:16" pos:end="63:17">-&gt;</operator><name pos:start="63:18" pos:end="63:35">partial_bit_buffer</name></name> <operator pos:start="63:37" pos:end="63:38">&lt;&lt;</operator> <name pos:start="63:40" pos:end="63:40">l</name><operator pos:start="63:41" pos:end="63:41">)</operator> <operator pos:start="63:43" pos:end="63:43">|</operator> <call pos:start="63:45" pos:end="63:69"><name pos:start="63:45" pos:end="63:54">SHOW_UBITS</name><argument_list pos:start="63:55" pos:end="63:69">(<argument pos:start="63:56" pos:end="63:57"><expr pos:start="63:56" pos:end="63:57"><name pos:start="63:56" pos:end="63:57">re</name></expr></argument>, <argument pos:start="63:60" pos:end="63:65"><expr pos:start="63:60" pos:end="63:65"><operator pos:start="63:60" pos:end="63:60">&amp;</operator><name pos:start="63:61" pos:end="63:65"><name pos:start="63:61" pos:end="63:61">s</name><operator pos:start="63:62" pos:end="63:63">-&gt;</operator><name pos:start="63:64" pos:end="63:65">gb</name></name></expr></argument>, <argument pos:start="63:68" pos:end="63:68"><expr pos:start="63:68" pos:end="63:68"><name pos:start="63:68" pos:end="63:68">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:24"><expr pos:start="65:9" pos:end="65:23"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:11">buf</name><index pos:start="65:12" pos:end="65:14">[<expr pos:start="65:13" pos:end="65:13"><literal type="number" pos:start="65:13" pos:end="65:13">0</literal></expr>]</index></name> <operator pos:start="65:16" pos:end="65:16">=</operator> <name pos:start="65:18" pos:end="65:18">v</name> <operator pos:start="65:20" pos:end="65:21">&gt;&gt;</operator> <literal type="number" pos:start="65:23" pos:end="65:23">8</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="70:0"><expr pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:14"><name pos:start="67:9" pos:end="67:11">buf</name><index pos:start="67:12" pos:end="67:14">[<expr pos:start="67:13" pos:end="67:13"><literal type="number" pos:start="67:13" pos:end="67:13">1</literal></expr>]</index></name> <operator pos:start="67:16" pos:end="67:16">=</operator> <name pos:start="67:18" pos:end="67:18">v</name></expr>;</expr_stmt>

<cpp:ifdef pos:start="69:1" pos:end="69:16">#<cpp:directive pos:start="69:2" pos:end="69:6">ifdef</cpp:directive> <name pos:start="69:8" pos:end="69:16">VLC_DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="71:9" pos:end="76:0"><expr pos:start="71:9" pos:end="73:67"><call pos:start="71:9" pos:end="73:67"><name pos:start="71:9" pos:end="71:14">printf</name><argument_list pos:start="71:15" pos:end="73:67">(<argument pos:start="71:16" pos:end="71:37"><expr pos:start="71:16" pos:end="71:37"><literal type="string" pos:start="71:16" pos:end="71:37">"v=%04x cnt=%d %04x\n"</literal></expr></argument>, 

               <argument pos:start="73:16" pos:end="73:16"><expr pos:start="73:16" pos:end="73:16"><name pos:start="73:16" pos:end="73:16">v</name></expr></argument>, <argument pos:start="73:19" pos:end="73:35"><expr pos:start="73:19" pos:end="73:35"><name pos:start="73:19" pos:end="73:35">partial_bit_count</name></expr></argument>, <argument pos:start="73:38" pos:end="73:66"><expr pos:start="73:38" pos:end="73:66"><operator pos:start="73:38" pos:end="73:38">(</operator><name pos:start="73:39" pos:end="73:60"><name pos:start="73:39" pos:end="73:40">mb</name><operator pos:start="73:41" pos:end="73:42">-&gt;</operator><name pos:start="73:43" pos:end="73:60">partial_bit_buffer</name></name> <operator pos:start="73:62" pos:end="73:63">&lt;&lt;</operator> <name pos:start="73:65" pos:end="73:65">l</name><operator pos:start="73:66" pos:end="73:66">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="77:9" pos:end="77:38">/* try to read the codeword */</comment>

        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><call pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:21">init_get_bits</name><argument_list pos:start="79:22" pos:end="79:35">(<argument pos:start="79:23" pos:end="79:26"><expr pos:start="79:23" pos:end="79:26"><operator pos:start="79:23" pos:end="79:23">&amp;</operator><name pos:start="79:24" pos:end="79:26">gb1</name></expr></argument>, <argument pos:start="79:29" pos:end="79:31"><expr pos:start="79:29" pos:end="79:31"><name pos:start="79:29" pos:end="79:31">buf</name></expr></argument>, <argument pos:start="79:34" pos:end="79:34"><expr pos:start="79:34" pos:end="79:34"><literal type="number" pos:start="79:34" pos:end="79:34">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="81:9" pos:end="98:0">{<block_content pos:start="83:13" pos:end="93:36">

            <expr_stmt pos:start="83:13" pos:end="83:35"><expr pos:start="83:13" pos:end="83:34"><call pos:start="83:13" pos:end="83:34"><name pos:start="83:13" pos:end="83:23">OPEN_READER</name><argument_list pos:start="83:24" pos:end="83:34">(<argument pos:start="83:25" pos:end="83:27"><expr pos:start="83:25" pos:end="83:27"><name pos:start="83:25" pos:end="83:27">re1</name></expr></argument>, <argument pos:start="83:30" pos:end="83:33"><expr pos:start="83:30" pos:end="83:33"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:33">gb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:36"><expr pos:start="85:13" pos:end="85:35"><call pos:start="85:13" pos:end="85:35"><name pos:start="85:13" pos:end="85:24">UPDATE_CACHE</name><argument_list pos:start="85:25" pos:end="85:35">(<argument pos:start="85:26" pos:end="85:28"><expr pos:start="85:26" pos:end="85:28"><name pos:start="85:26" pos:end="85:28">re1</name></expr></argument>, <argument pos:start="85:31" pos:end="85:34"><expr pos:start="85:31" pos:end="85:34"><operator pos:start="85:31" pos:end="85:31">&amp;</operator><name pos:start="85:32" pos:end="85:34">gb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="89:40"><expr pos:start="87:13" pos:end="89:39"><call pos:start="87:13" pos:end="89:39"><name pos:start="87:13" pos:end="87:22">GET_RL_VLC</name><argument_list pos:start="87:23" pos:end="89:39">(<argument pos:start="87:24" pos:end="87:28"><expr pos:start="87:24" pos:end="87:28"><name pos:start="87:24" pos:end="87:28">level</name></expr></argument>, <argument pos:start="87:31" pos:end="87:33"><expr pos:start="87:31" pos:end="87:33"><name pos:start="87:31" pos:end="87:33">run</name></expr></argument>, <argument pos:start="87:36" pos:end="87:38"><expr pos:start="87:36" pos:end="87:38"><name pos:start="87:36" pos:end="87:38">re1</name></expr></argument>, <argument pos:start="87:41" pos:end="87:44"><expr pos:start="87:41" pos:end="87:44"><operator pos:start="87:41" pos:end="87:41">&amp;</operator><name pos:start="87:42" pos:end="87:44">gb1</name></expr></argument>, <argument pos:start="87:47" pos:end="87:58"><expr pos:start="87:47" pos:end="87:58"><name pos:start="87:47" pos:end="87:58"><name pos:start="87:47" pos:end="87:55">dv_rl_vlc</name><index pos:start="87:56" pos:end="87:58">[<expr pos:start="87:57" pos:end="87:57"><literal type="number" pos:start="87:57" pos:end="87:57">0</literal></expr>]</index></name></expr></argument>, 

                       <argument pos:start="89:24" pos:end="89:35"><expr pos:start="89:24" pos:end="89:35"><name pos:start="89:24" pos:end="89:35">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="89:38" pos:end="89:38"><expr pos:start="89:38" pos:end="89:38"><literal type="number" pos:start="89:38" pos:end="89:38">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="91:13" pos:end="91:26"><expr pos:start="91:13" pos:end="91:25"><name pos:start="91:13" pos:end="91:13">l</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <name pos:start="91:17" pos:end="91:25">re1_index</name></expr>;</expr_stmt>

            <expr_stmt pos:start="93:13" pos:end="93:36"><expr pos:start="93:13" pos:end="93:35"><call pos:start="93:13" pos:end="93:35"><name pos:start="93:13" pos:end="93:24">CLOSE_READER</name><argument_list pos:start="93:25" pos:end="93:35">(<argument pos:start="93:26" pos:end="93:28"><expr pos:start="93:26" pos:end="93:28"><name pos:start="93:26" pos:end="93:28">re1</name></expr></argument>, <argument pos:start="93:31" pos:end="93:34"><expr pos:start="93:31" pos:end="93:34"><operator pos:start="93:31" pos:end="93:31">&amp;</operator><name pos:start="93:32" pos:end="93:34">gb1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

<cpp:ifdef pos:start="97:1" pos:end="97:16">#<cpp:directive pos:start="97:2" pos:end="97:6">ifdef</cpp:directive> <name pos:start="97:8" pos:end="97:16">VLC_DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="99:9" pos:end="102:0"><expr pos:start="99:9" pos:end="99:62"><call pos:start="99:9" pos:end="99:62"><name pos:start="99:9" pos:end="99:14">printf</name><argument_list pos:start="99:15" pos:end="99:62">(<argument pos:start="99:16" pos:end="99:46"><expr pos:start="99:16" pos:end="99:46"><literal type="string" pos:start="99:16" pos:end="99:46">"****run=%d level=%d size=%d\n"</literal></expr></argument>, <argument pos:start="99:49" pos:end="99:51"><expr pos:start="99:49" pos:end="99:51"><name pos:start="99:49" pos:end="99:51">run</name></expr></argument>, <argument pos:start="99:54" pos:end="99:58"><expr pos:start="99:54" pos:end="99:58"><name pos:start="99:54" pos:end="99:58">level</name></expr></argument>, <argument pos:start="99:61" pos:end="99:61"><expr pos:start="99:61" pos:end="99:61"><name pos:start="99:61" pos:end="99:61">l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

        <comment type="block" pos:start="103:9" pos:end="103:37">/* compute codeword length */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:42"><expr pos:start="105:9" pos:end="105:41"><name pos:start="105:9" pos:end="105:10">l1</name> <operator pos:start="105:12" pos:end="105:12">=</operator> <operator pos:start="105:14" pos:end="105:14">(</operator><name pos:start="105:15" pos:end="105:19">level</name> <operator pos:start="105:21" pos:end="105:22">!=</operator> <literal type="number" pos:start="105:24" pos:end="105:26">256</literal> <operator pos:start="105:28" pos:end="105:29">&amp;&amp;</operator> <name pos:start="105:31" pos:end="105:35">level</name> <operator pos:start="105:37" pos:end="105:38">!=</operator> <literal type="number" pos:start="105:40" pos:end="105:40">0</literal><operator pos:start="105:41" pos:end="105:41">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="107:9" pos:end="107:42">/* if too long, we cannot parse */</comment>

        <expr_stmt pos:start="109:9" pos:end="109:31"><expr pos:start="109:9" pos:end="109:30"><name pos:start="109:9" pos:end="109:9">l</name> <operator pos:start="109:11" pos:end="109:12">-=</operator> <name pos:start="109:14" pos:end="109:30">partial_bit_count</name></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:19"><if pos:start="111:9" pos:end="113:19">if <condition pos:start="111:12" pos:end="111:45">(<expr pos:start="111:13" pos:end="111:44"><operator pos:start="111:13" pos:end="111:13">(</operator><name pos:start="111:14" pos:end="111:21">re_index</name> <operator pos:start="111:23" pos:end="111:23">+</operator> <name pos:start="111:25" pos:end="111:25">l</name> <operator pos:start="111:27" pos:end="111:27">+</operator> <name pos:start="111:29" pos:end="111:30">l1</name><operator pos:start="111:31" pos:end="111:31">)</operator> <operator pos:start="111:33" pos:end="111:33">&gt;</operator> <name pos:start="111:35" pos:end="111:44">last_index</name></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:19"><block_content pos:start="113:13" pos:end="113:19">

            <return pos:start="113:13" pos:end="113:19">return;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="115:9" pos:end="115:28">/* skip read bits */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:21">last_re_index</name> <operator pos:start="117:23" pos:end="117:23">=</operator> <literal type="number" pos:start="117:25" pos:end="117:25">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="117:28" pos:end="117:46">/* avoid warning */</comment>

        <expr_stmt pos:start="119:9" pos:end="119:22"><expr pos:start="119:9" pos:end="119:21"><name pos:start="119:9" pos:end="119:16">re_index</name> <operator pos:start="119:18" pos:end="119:19">+=</operator> <name pos:start="119:21" pos:end="119:21">l</name></expr>;</expr_stmt>

        <comment type="block" pos:start="121:9" pos:end="123:72">/* by definition, if we can read the vlc, all partial bits

           will be read (otherwise we could have read the vlc before) */</comment>

        <expr_stmt pos:start="125:9" pos:end="125:34"><expr pos:start="125:9" pos:end="125:33"><name pos:start="125:9" pos:end="125:29"><name pos:start="125:9" pos:end="125:10">mb</name><operator pos:start="125:11" pos:end="125:12">-&gt;</operator><name pos:start="125:13" pos:end="125:29">partial_bit_count</name></name> <operator pos:start="125:31" pos:end="125:31">=</operator> <literal type="number" pos:start="125:33" pos:end="125:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:33"><expr pos:start="127:9" pos:end="127:32"><call pos:start="127:9" pos:end="127:32"><name pos:start="127:9" pos:end="127:20">UPDATE_CACHE</name><argument_list pos:start="127:21" pos:end="127:32">(<argument pos:start="127:22" pos:end="127:23"><expr pos:start="127:22" pos:end="127:23"><name pos:start="127:22" pos:end="127:23">re</name></expr></argument>, <argument pos:start="127:26" pos:end="127:31"><expr pos:start="127:26" pos:end="127:31"><operator pos:start="127:26" pos:end="127:26">&amp;</operator><name pos:start="127:27" pos:end="127:31"><name pos:start="127:27" pos:end="127:27">s</name><operator pos:start="127:28" pos:end="127:29">-&gt;</operator><name pos:start="127:30" pos:end="127:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:24">goto <name pos:start="129:14" pos:end="129:23">handle_vlc</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="135:5" pos:end="135:61">/* get the AC coefficients until last_index is reached */</comment>

    <for pos:start="137:5" pos:end="249:5">for<control pos:start="137:8" pos:end="137:11">(<init pos:start="137:9" pos:end="137:9">;</init><condition pos:start="137:10" pos:end="137:10">;</condition><incr/>)</control> <block pos:start="137:13" pos:end="249:5">{<block_content pos:start="139:9" pos:end="247:9">

        <expr_stmt pos:start="139:9" pos:end="142:0"><expr pos:start="139:9" pos:end="139:32"><call pos:start="139:9" pos:end="139:32"><name pos:start="139:9" pos:end="139:20">UPDATE_CACHE</name><argument_list pos:start="139:21" pos:end="139:32">(<argument pos:start="139:22" pos:end="139:23"><expr pos:start="139:22" pos:end="139:23"><name pos:start="139:22" pos:end="139:23">re</name></expr></argument>, <argument pos:start="139:26" pos:end="139:31"><expr pos:start="139:26" pos:end="139:31"><operator pos:start="139:26" pos:end="139:26">&amp;</operator><name pos:start="139:27" pos:end="139:31"><name pos:start="139:27" pos:end="139:27">s</name><operator pos:start="139:28" pos:end="139:29">-&gt;</operator><name pos:start="139:30" pos:end="139:31">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="141:1" pos:end="141:16">#<cpp:directive pos:start="141:2" pos:end="141:6">ifdef</cpp:directive> <name pos:start="141:8" pos:end="141:16">VLC_DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="143:9" pos:end="148:0"><expr pos:start="143:9" pos:end="145:57"><call pos:start="143:9" pos:end="145:57"><name pos:start="143:9" pos:end="143:14">printf</name><argument_list pos:start="143:15" pos:end="145:57">(<argument pos:start="143:16" pos:end="143:42"><expr pos:start="143:16" pos:end="143:42"><literal type="string" pos:start="143:16" pos:end="143:42">"%2d: bits=%04x index=%d\n"</literal></expr></argument>, 

               <argument pos:start="145:16" pos:end="145:18"><expr pos:start="145:16" pos:end="145:18"><name pos:start="145:16" pos:end="145:18">pos</name></expr></argument>, <argument pos:start="145:21" pos:end="145:46"><expr pos:start="145:21" pos:end="145:46"><call pos:start="145:21" pos:end="145:46"><name pos:start="145:21" pos:end="145:30">SHOW_UBITS</name><argument_list pos:start="145:31" pos:end="145:46">(<argument pos:start="145:32" pos:end="145:33"><expr pos:start="145:32" pos:end="145:33"><name pos:start="145:32" pos:end="145:33">re</name></expr></argument>, <argument pos:start="145:36" pos:end="145:41"><expr pos:start="145:36" pos:end="145:41"><operator pos:start="145:36" pos:end="145:36">&amp;</operator><name pos:start="145:37" pos:end="145:41"><name pos:start="145:37" pos:end="145:37">s</name><operator pos:start="145:38" pos:end="145:39">-&gt;</operator><name pos:start="145:40" pos:end="145:41">gb</name></name></expr></argument>, <argument pos:start="145:44" pos:end="145:45"><expr pos:start="145:44" pos:end="145:45"><literal type="number" pos:start="145:44" pos:end="145:45">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="145:49" pos:end="145:56"><expr pos:start="145:49" pos:end="145:56"><name pos:start="145:49" pos:end="145:56">re_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="147:1" pos:end="147:6">#<cpp:directive pos:start="147:2" pos:end="147:6">endif</cpp:directive></cpp:endif>

        <expr_stmt pos:start="149:9" pos:end="149:33"><expr pos:start="149:9" pos:end="149:32"><name pos:start="149:9" pos:end="149:21">last_re_index</name> <operator pos:start="149:23" pos:end="149:23">=</operator> <name pos:start="149:25" pos:end="149:32">re_index</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="153:36"><expr pos:start="151:9" pos:end="153:35"><call pos:start="151:9" pos:end="153:35"><name pos:start="151:9" pos:end="151:18">GET_RL_VLC</name><argument_list pos:start="151:19" pos:end="153:35">(<argument pos:start="151:20" pos:end="151:24"><expr pos:start="151:20" pos:end="151:24"><name pos:start="151:20" pos:end="151:24">level</name></expr></argument>, <argument pos:start="151:27" pos:end="151:29"><expr pos:start="151:27" pos:end="151:29"><name pos:start="151:27" pos:end="151:29">run</name></expr></argument>, <argument pos:start="151:32" pos:end="151:33"><expr pos:start="151:32" pos:end="151:33"><name pos:start="151:32" pos:end="151:33">re</name></expr></argument>, <argument pos:start="151:36" pos:end="151:41"><expr pos:start="151:36" pos:end="151:41"><operator pos:start="151:36" pos:end="151:36">&amp;</operator><name pos:start="151:37" pos:end="151:41"><name pos:start="151:37" pos:end="151:37">s</name><operator pos:start="151:38" pos:end="151:39">-&gt;</operator><name pos:start="151:40" pos:end="151:41">gb</name></name></expr></argument>, <argument pos:start="151:44" pos:end="151:55"><expr pos:start="151:44" pos:end="151:55"><name pos:start="151:44" pos:end="151:55"><name pos:start="151:44" pos:end="151:52">dv_rl_vlc</name><index pos:start="151:53" pos:end="151:55">[<expr pos:start="151:54" pos:end="151:54"><literal type="number" pos:start="151:54" pos:end="151:54">0</literal></expr>]</index></name></expr></argument>, 

                   <argument pos:start="153:20" pos:end="153:31"><expr pos:start="153:20" pos:end="153:31"><name pos:start="153:20" pos:end="153:31">TEX_VLC_BITS</name></expr></argument>, <argument pos:start="153:34" pos:end="153:34"><expr pos:start="153:34" pos:end="153:34"><literal type="number" pos:start="153:34" pos:end="153:34">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <label pos:start="155:5" pos:end="158:0"><name pos:start="155:5" pos:end="155:14">handle_vlc</name>:</label>

<cpp:ifdef pos:start="157:1" pos:end="157:16">#<cpp:directive pos:start="157:2" pos:end="157:6">ifdef</cpp:directive> <name pos:start="157:8" pos:end="157:16">VLC_DEBUG</name></cpp:ifdef>

        <expr_stmt pos:start="159:9" pos:end="162:0"><expr pos:start="159:9" pos:end="159:47"><call pos:start="159:9" pos:end="159:47"><name pos:start="159:9" pos:end="159:14">printf</name><argument_list pos:start="159:15" pos:end="159:47">(<argument pos:start="159:16" pos:end="159:34"><expr pos:start="159:16" pos:end="159:34"><literal type="string" pos:start="159:16" pos:end="159:34">"run=%d level=%d\n"</literal></expr></argument>, <argument pos:start="159:37" pos:end="159:39"><expr pos:start="159:37" pos:end="159:39"><name pos:start="159:37" pos:end="159:39">run</name></expr></argument>, <argument pos:start="159:42" pos:end="159:46"><expr pos:start="159:42" pos:end="159:46"><name pos:start="159:42" pos:end="159:46">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="161:1" pos:end="161:6">#<cpp:directive pos:start="161:2" pos:end="161:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="163:9" pos:end="247:9"><if pos:start="163:9" pos:end="185:9">if <condition pos:start="163:12" pos:end="163:25">(<expr pos:start="163:13" pos:end="163:24"><name pos:start="163:13" pos:end="163:17">level</name> <operator pos:start="163:19" pos:end="163:20">==</operator> <literal type="number" pos:start="163:22" pos:end="163:24">256</literal></expr>)</condition> <block pos:start="163:27" pos:end="185:9">{<block_content pos:start="165:13" pos:end="183:18">

            <if_stmt pos:start="165:13" pos:end="177:13"><if pos:start="165:13" pos:end="177:13">if <condition pos:start="165:16" pos:end="165:38">(<expr pos:start="165:17" pos:end="165:37"><name pos:start="165:17" pos:end="165:24">re_index</name> <operator pos:start="165:26" pos:end="165:26">&gt;</operator> <name pos:start="165:28" pos:end="165:37">last_index</name></expr>)</condition> <block pos:start="165:40" pos:end="177:13">{<block_content pos:start="167:13" pos:end="175:22">

            <label pos:start="167:13" pos:end="167:24"><name pos:start="167:13" pos:end="167:23">cannot_read</name>:</label>

                <comment type="block" pos:start="169:17" pos:end="169:51">/* put position before read code */</comment>

                <expr_stmt pos:start="171:17" pos:end="171:41"><expr pos:start="171:17" pos:end="171:40"><name pos:start="171:17" pos:end="171:24">re_index</name> <operator pos:start="171:26" pos:end="171:26">=</operator> <name pos:start="171:28" pos:end="171:40">last_re_index</name></expr>;</expr_stmt>

                <expr_stmt pos:start="173:17" pos:end="173:36"><expr pos:start="173:17" pos:end="173:35"><name pos:start="173:17" pos:end="173:31"><name pos:start="173:17" pos:end="173:18">mb</name><operator pos:start="173:19" pos:end="173:20">-&gt;</operator><name pos:start="173:21" pos:end="173:31">eob_reached</name></name> <operator pos:start="173:33" pos:end="173:33">=</operator> <literal type="number" pos:start="173:35" pos:end="173:35">0</literal></expr>;</expr_stmt>

                <break pos:start="175:17" pos:end="175:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="179:13" pos:end="179:21">/* EOB */</comment>

            <expr_stmt pos:start="181:13" pos:end="181:32"><expr pos:start="181:13" pos:end="181:31"><name pos:start="181:13" pos:end="181:27"><name pos:start="181:13" pos:end="181:14">mb</name><operator pos:start="181:15" pos:end="181:16">-&gt;</operator><name pos:start="181:17" pos:end="181:27">eob_reached</name></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <literal type="number" pos:start="181:31" pos:end="181:31">1</literal></expr>;</expr_stmt>

            <break pos:start="183:13" pos:end="183:18">break;</break>

        </block_content>}</block></if> <if type="elseif" pos:start="185:11" pos:end="215:9">else if <condition pos:start="185:19" pos:end="185:30">(<expr pos:start="185:20" pos:end="185:29"><name pos:start="185:20" pos:end="185:24">level</name> <operator pos:start="185:26" pos:end="185:27">!=</operator> <literal type="number" pos:start="185:29" pos:end="185:29">0</literal></expr>)</condition> <block pos:start="185:32" pos:end="215:9">{<block_content pos:start="187:13" pos:end="211:32">

            <if_stmt pos:start="187:13" pos:end="189:33"><if pos:start="187:13" pos:end="189:33">if <condition pos:start="187:16" pos:end="187:44">(<expr pos:start="187:17" pos:end="187:43"><operator pos:start="187:17" pos:end="187:17">(</operator><name pos:start="187:18" pos:end="187:25">re_index</name> <operator pos:start="187:27" pos:end="187:27">+</operator> <literal type="number" pos:start="187:29" pos:end="187:29">1</literal><operator pos:start="187:30" pos:end="187:30">)</operator> <operator pos:start="187:32" pos:end="187:32">&gt;</operator> <name pos:start="187:34" pos:end="187:43">last_index</name></expr>)</condition><block type="pseudo" pos:start="189:17" pos:end="189:33"><block_content pos:start="189:17" pos:end="189:33">

                <goto pos:start="189:17" pos:end="189:33">goto <name pos:start="189:22" pos:end="189:32">cannot_read</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:45"><expr pos:start="191:13" pos:end="191:44"><name pos:start="191:13" pos:end="191:16">sign</name> <operator pos:start="191:18" pos:end="191:18">=</operator> <call pos:start="191:20" pos:end="191:44"><name pos:start="191:20" pos:end="191:29">SHOW_SBITS</name><argument_list pos:start="191:30" pos:end="191:44">(<argument pos:start="191:31" pos:end="191:32"><expr pos:start="191:31" pos:end="191:32"><name pos:start="191:31" pos:end="191:32">re</name></expr></argument>, <argument pos:start="191:35" pos:end="191:40"><expr pos:start="191:35" pos:end="191:40"><operator pos:start="191:35" pos:end="191:35">&amp;</operator><name pos:start="191:36" pos:end="191:40"><name pos:start="191:36" pos:end="191:36">s</name><operator pos:start="191:37" pos:end="191:38">-&gt;</operator><name pos:start="191:39" pos:end="191:40">gb</name></name></expr></argument>, <argument pos:start="191:43" pos:end="191:43"><expr pos:start="191:43" pos:end="191:43"><literal type="number" pos:start="191:43" pos:end="191:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:42"><expr pos:start="193:13" pos:end="193:41"><name pos:start="193:13" pos:end="193:17">level</name> <operator pos:start="193:19" pos:end="193:19">=</operator> <operator pos:start="193:21" pos:end="193:21">(</operator><name pos:start="193:22" pos:end="193:26">level</name> <operator pos:start="193:28" pos:end="193:28">^</operator> <name pos:start="193:30" pos:end="193:33">sign</name><operator pos:start="193:34" pos:end="193:34">)</operator> <operator pos:start="193:36" pos:end="193:36">-</operator> <name pos:start="193:38" pos:end="193:41">sign</name></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:42"><expr pos:start="195:13" pos:end="195:41"><call pos:start="195:13" pos:end="195:41"><name pos:start="195:13" pos:end="195:26">LAST_SKIP_BITS</name><argument_list pos:start="195:27" pos:end="195:41">(<argument pos:start="195:28" pos:end="195:29"><expr pos:start="195:28" pos:end="195:29"><name pos:start="195:28" pos:end="195:29">re</name></expr></argument>, <argument pos:start="195:32" pos:end="195:37"><expr pos:start="195:32" pos:end="195:37"><operator pos:start="195:32" pos:end="195:32">&amp;</operator><name pos:start="195:33" pos:end="195:37"><name pos:start="195:33" pos:end="195:33">s</name><operator pos:start="195:34" pos:end="195:35">-&gt;</operator><name pos:start="195:36" pos:end="195:37">gb</name></name></expr></argument>, <argument pos:start="195:40" pos:end="195:40"><expr pos:start="195:40" pos:end="195:40"><literal type="number" pos:start="195:40" pos:end="195:40">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:23"><expr pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:15">pos</name> <operator pos:start="197:17" pos:end="197:18">+=</operator> <name pos:start="197:20" pos:end="197:22">run</name></expr>;</expr_stmt>

            <comment type="block" pos:start="199:13" pos:end="199:23">/* error */</comment>

            <if_stmt pos:start="201:13" pos:end="205:13"><if pos:start="201:13" pos:end="205:13">if <condition pos:start="201:16" pos:end="201:26">(<expr pos:start="201:17" pos:end="201:25"><name pos:start="201:17" pos:end="201:19">pos</name> <operator pos:start="201:21" pos:end="201:22">&gt;=</operator> <literal type="number" pos:start="201:24" pos:end="201:25">64</literal></expr>)</condition> <block pos:start="201:28" pos:end="205:13">{<block_content pos:start="203:17" pos:end="203:32">

                <goto pos:start="203:17" pos:end="203:32">goto <name pos:start="203:22" pos:end="203:31">read_error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:35"><expr pos:start="207:13" pos:end="207:34"><name pos:start="207:13" pos:end="207:16">pos1</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:34"><name pos:start="207:20" pos:end="207:29">scan_table</name><index pos:start="207:30" pos:end="207:34">[<expr pos:start="207:31" pos:end="207:33"><name pos:start="207:31" pos:end="207:33">pos</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:64"><expr pos:start="209:13" pos:end="209:63"><name pos:start="209:13" pos:end="209:17">level</name> <operator pos:start="209:19" pos:end="209:19">=</operator> <name pos:start="209:21" pos:end="209:25">level</name> <operator pos:start="209:27" pos:end="209:28">&lt;&lt;</operator> <operator pos:start="209:30" pos:end="209:30">(</operator><name pos:start="209:31" pos:end="209:47"><name pos:start="209:31" pos:end="209:41">shift_table</name><index pos:start="209:42" pos:end="209:47">[<expr pos:start="209:43" pos:end="209:46"><name pos:start="209:43" pos:end="209:46">pos1</name></expr>]</index></name> <operator pos:start="209:49" pos:end="209:49">+</operator> <name pos:start="209:51" pos:end="209:62">shift_offset</name><operator pos:start="209:63" pos:end="209:63">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:32"><expr pos:start="211:13" pos:end="211:31"><name pos:start="211:13" pos:end="211:23"><name pos:start="211:13" pos:end="211:17">block</name><index pos:start="211:18" pos:end="211:23">[<expr pos:start="211:19" pos:end="211:22"><name pos:start="211:19" pos:end="211:22">pos1</name></expr>]</index></name> <operator pos:start="211:25" pos:end="211:25">=</operator> <name pos:start="211:27" pos:end="211:31">level</name></expr>;</expr_stmt>

            <comment type="line" pos:start="213:13" pos:end="213:94">//            printf("run=%d level=%d shift=%d\n", run, level, shift_table[pos1]);</comment>

        </block_content>}</block></if> <else pos:start="215:11" pos:end="247:9">else <block pos:start="215:16" pos:end="247:9">{<block_content pos:start="217:13" pos:end="245:13">

            <if_stmt pos:start="217:13" pos:end="219:33"><if pos:start="217:13" pos:end="219:33">if <condition pos:start="217:16" pos:end="217:38">(<expr pos:start="217:17" pos:end="217:37"><name pos:start="217:17" pos:end="217:24">re_index</name> <operator pos:start="217:26" pos:end="217:26">&gt;</operator> <name pos:start="217:28" pos:end="217:37">last_index</name></expr>)</condition><block type="pseudo" pos:start="219:17" pos:end="219:33"><block_content pos:start="219:17" pos:end="219:33">

                <goto pos:start="219:17" pos:end="219:33">goto <name pos:start="219:22" pos:end="219:32">cannot_read</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block" pos:start="221:13" pos:end="223:31">/* level is zero: means run without coding. No

               sign is coded */</comment>

            <expr_stmt pos:start="225:13" pos:end="225:23"><expr pos:start="225:13" pos:end="225:22"><name pos:start="225:13" pos:end="225:15">pos</name> <operator pos:start="225:17" pos:end="225:18">+=</operator> <name pos:start="225:20" pos:end="225:22">run</name></expr>;</expr_stmt>

            <comment type="block" pos:start="227:13" pos:end="227:23">/* error */</comment>

            <if_stmt pos:start="229:13" pos:end="245:13"><if pos:start="229:13" pos:end="245:13">if <condition pos:start="229:16" pos:end="229:26">(<expr pos:start="229:17" pos:end="229:25"><name pos:start="229:17" pos:end="229:19">pos</name> <operator pos:start="229:21" pos:end="229:22">&gt;=</operator> <literal type="number" pos:start="229:24" pos:end="229:25">64</literal></expr>)</condition> <block pos:start="229:28" pos:end="245:13">{<block_content pos:start="231:13" pos:end="243:22">

            <label pos:start="231:13" pos:end="234:0"><name pos:start="231:13" pos:end="231:22">read_error</name>:</label>

<cpp:if pos:start="233:1" pos:end="233:27">#<cpp:directive pos:start="233:2" pos:end="233:3">if</cpp:directive> <expr pos:start="233:5" pos:end="233:27"><call pos:start="233:5" pos:end="233:22"><name pos:start="233:5" pos:end="233:11">defined</name><argument_list pos:start="233:12" pos:end="233:22">(<argument pos:start="233:13" pos:end="233:21"><expr pos:start="233:13" pos:end="233:21"><name pos:start="233:13" pos:end="233:21">VLC_DEBUG</name></expr></argument>)</argument_list></call> <operator pos:start="233:24" pos:end="233:25">||</operator> <literal type="number" pos:start="233:27" pos:end="233:27">1</literal></expr></cpp:if>

                <expr_stmt pos:start="235:17" pos:end="238:0"><expr pos:start="235:17" pos:end="235:45"><call pos:start="235:17" pos:end="235:45"><name pos:start="235:17" pos:end="235:22">printf</name><argument_list pos:start="235:23" pos:end="235:45">(<argument pos:start="235:24" pos:end="235:39"><expr pos:start="235:24" pos:end="235:39"><literal type="string" pos:start="235:24" pos:end="235:39">"error pos=%d\n"</literal></expr></argument>, <argument pos:start="235:42" pos:end="235:44"><expr pos:start="235:42" pos:end="235:44"><name pos:start="235:42" pos:end="235:44">pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="237:1" pos:end="237:6">#<cpp:directive pos:start="237:2" pos:end="237:6">endif</cpp:directive></cpp:endif>

                <comment type="block" pos:start="239:17" pos:end="239:64">/* for errors, we consider the eob is reached */</comment>

                <expr_stmt pos:start="241:17" pos:end="241:36"><expr pos:start="241:17" pos:end="241:35"><name pos:start="241:17" pos:end="241:31"><name pos:start="241:17" pos:end="241:18">mb</name><operator pos:start="241:19" pos:end="241:20">-&gt;</operator><name pos:start="241:21" pos:end="241:31">eob_reached</name></name> <operator pos:start="241:33" pos:end="241:33">=</operator> <literal type="number" pos:start="241:35" pos:end="241:35">1</literal></expr>;</expr_stmt>

                <break pos:start="243:17" pos:end="243:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="251:5" pos:end="251:29"><expr pos:start="251:5" pos:end="251:28"><call pos:start="251:5" pos:end="251:28"><name pos:start="251:5" pos:end="251:16">CLOSE_READER</name><argument_list pos:start="251:17" pos:end="251:28">(<argument pos:start="251:18" pos:end="251:19"><expr pos:start="251:18" pos:end="251:19"><name pos:start="251:18" pos:end="251:19">re</name></expr></argument>, <argument pos:start="251:22" pos:end="251:27"><expr pos:start="251:22" pos:end="251:27"><operator pos:start="251:22" pos:end="251:22">&amp;</operator><name pos:start="251:23" pos:end="251:27"><name pos:start="251:23" pos:end="251:23">s</name><operator pos:start="251:24" pos:end="251:25">-&gt;</operator><name pos:start="251:26" pos:end="251:27">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="253:5" pos:end="253:18"><expr pos:start="253:5" pos:end="253:17"><name pos:start="253:5" pos:end="253:11"><name pos:start="253:5" pos:end="253:6">mb</name><operator pos:start="253:7" pos:end="253:8">-&gt;</operator><name pos:start="253:9" pos:end="253:11">pos</name></name> <operator pos:start="253:13" pos:end="253:13">=</operator> <name pos:start="253:15" pos:end="253:17">pos</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
