<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2555.c" pos:tabs="8"><function pos:start="1:1" pos:end="209:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">qmp_block_commit</name><parameter_list pos:start="1:22" pos:end="11:35">(<parameter pos:start="1:23" pos:end="1:37"><decl pos:start="1:23" pos:end="1:37"><type pos:start="1:23" pos:end="1:37"><name pos:start="1:23" pos:end="1:26">bool</name></type> <name pos:start="1:28" pos:end="1:37">has_job_id</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:57"><decl pos:start="1:40" pos:end="1:57"><type pos:start="1:40" pos:end="1:57"><specifier pos:start="1:40" pos:end="1:44">const</specifier> <name pos:start="1:46" pos:end="1:49">char</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:57">job_id</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:77"><decl pos:start="1:60" pos:end="1:77"><type pos:start="1:60" pos:end="1:77"><specifier pos:start="1:60" pos:end="1:64">const</specifier> <name pos:start="1:66" pos:end="1:69">char</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:77">device</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:35"><decl pos:start="3:23" pos:end="3:35"><type pos:start="3:23" pos:end="3:35"><name pos:start="3:23" pos:end="3:26">bool</name></type> <name pos:start="3:28" pos:end="3:35">has_base</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:53"><decl pos:start="3:38" pos:end="3:53"><type pos:start="3:38" pos:end="3:53"><specifier pos:start="3:38" pos:end="3:42">const</specifier> <name pos:start="3:44" pos:end="3:47">char</name> <modifier pos:start="3:49" pos:end="3:49">*</modifier></type><name pos:start="3:50" pos:end="3:53">base</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:34"><decl pos:start="5:23" pos:end="5:34"><type pos:start="5:23" pos:end="5:34"><name pos:start="5:23" pos:end="5:26">bool</name></type> <name pos:start="5:28" pos:end="5:34">has_top</name></decl></parameter>, <parameter pos:start="5:37" pos:end="5:51"><decl pos:start="5:37" pos:end="5:51"><type pos:start="5:37" pos:end="5:51"><specifier pos:start="5:37" pos:end="5:41">const</specifier> <name pos:start="5:43" pos:end="5:46">char</name> <modifier pos:start="5:48" pos:end="5:48">*</modifier></type><name pos:start="5:49" pos:end="5:51">top</name></decl></parameter>,

                      <parameter pos:start="7:23" pos:end="7:43"><decl pos:start="7:23" pos:end="7:43"><type pos:start="7:23" pos:end="7:43"><name pos:start="7:23" pos:end="7:26">bool</name></type> <name pos:start="7:28" pos:end="7:43">has_backing_file</name></decl></parameter>, <parameter pos:start="7:46" pos:end="7:69"><decl pos:start="7:46" pos:end="7:69"><type pos:start="7:46" pos:end="7:69"><specifier pos:start="7:46" pos:end="7:50">const</specifier> <name pos:start="7:52" pos:end="7:55">char</name> <modifier pos:start="7:57" pos:end="7:57">*</modifier></type><name pos:start="7:58" pos:end="7:69">backing_file</name></decl></parameter>,

                      <parameter pos:start="9:23" pos:end="9:36"><decl pos:start="9:23" pos:end="9:36"><type pos:start="9:23" pos:end="9:36"><name pos:start="9:23" pos:end="9:26">bool</name></type> <name pos:start="9:28" pos:end="9:36">has_speed</name></decl></parameter>, <parameter pos:start="9:39" pos:end="9:51"><decl pos:start="9:39" pos:end="9:51"><type pos:start="9:39" pos:end="9:51"><name pos:start="9:39" pos:end="9:45">int64_t</name></type> <name pos:start="9:47" pos:end="9:51">speed</name></decl></parameter>,

                      <parameter pos:start="11:23" pos:end="11:34"><decl pos:start="11:23" pos:end="11:34"><type pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:27">Error</name> <modifier pos:start="11:29" pos:end="11:29">*</modifier><modifier pos:start="11:30" pos:end="11:30">*</modifier></type><name pos:start="11:31" pos:end="11:34">errp</name></decl></parameter>)</parameter_list>

<block pos:start="13:1" pos:end="209:1">{<block_content pos:start="15:5" pos:end="207:37">

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">BlockDriverState</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:24">bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:20">BlockDriverState</name> <modifier pos:start="17:22" pos:end="17:22">*</modifier></type><name pos:start="17:23" pos:end="17:29">base_bs</name></decl>, <decl pos:start="17:32" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:22"><modifier pos:start="17:32" pos:end="17:32">*</modifier></type><name pos:start="17:33" pos:end="17:38">top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:28"><decl pos:start="19:5" pos:end="19:27"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:14">AioContext</name> <modifier pos:start="19:16" pos:end="19:16">*</modifier></type><name pos:start="19:17" pos:end="19:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:28"><decl pos:start="21:5" pos:end="21:27"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:9">Error</name> <modifier pos:start="21:11" pos:end="21:11">*</modifier></type><name pos:start="21:12" pos:end="21:20">local_err</name> <init pos:start="21:22" pos:end="21:27">= <expr pos:start="21:24" pos:end="21:27"><name pos:start="21:24" pos:end="21:27">NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="23:5" pos:end="27:7">/* This will be part of the QMP command, if/when the

     * BlockdevOnError change for blkmirror makes it in

     */</comment>

    <decl_stmt pos:start="29:5" pos:end="29:56"><decl pos:start="29:5" pos:end="29:55"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:19">BlockdevOnError</name></type> <name pos:start="29:21" pos:end="29:28">on_error</name> <init pos:start="29:30" pos:end="29:55">= <expr pos:start="29:32" pos:end="29:55"><name pos:start="29:32" pos:end="29:55">BLOCKDEV_ON_ERROR_REPORT</name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:19">(<expr pos:start="33:9" pos:end="33:18"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:18">has_speed</name></expr>)</condition> <block pos:start="33:21" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <expr_stmt pos:start="35:9" pos:end="35:18"><expr pos:start="35:9" pos:end="35:17"><name pos:start="35:9" pos:end="35:13">speed</name> <operator pos:start="35:15" pos:end="35:15">=</operator> <literal type="number" pos:start="35:17" pos:end="35:17">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="49:64">/* Important Note:

     *  libvirt relies on the DeviceNotFound error class in order to probe for

     *  live commit feature versions; for this to work, we must make sure to

     *  perform the device lookup before any generic errors that may occur in a

     *  scenario in which all optional arguments are omitted. */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:45"><expr pos:start="51:5" pos:end="51:44"><name pos:start="51:5" pos:end="51:6">bs</name> <operator pos:start="51:8" pos:end="51:8">=</operator> <call pos:start="51:10" pos:end="51:44"><name pos:start="51:10" pos:end="51:24">qmp_get_root_bs</name><argument_list pos:start="51:25" pos:end="51:44">(<argument pos:start="51:26" pos:end="51:31"><expr pos:start="51:26" pos:end="51:31"><name pos:start="51:26" pos:end="51:31">device</name></expr></argument>, <argument pos:start="51:34" pos:end="51:43"><expr pos:start="51:34" pos:end="51:43"><operator pos:start="51:34" pos:end="51:34">&amp;</operator><name pos:start="51:35" pos:end="51:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="73:5"><if pos:start="53:5" pos:end="73:5">if <condition pos:start="53:8" pos:end="53:12">(<expr pos:start="53:9" pos:end="53:11"><operator pos:start="53:9" pos:end="53:9">!</operator><name pos:start="53:10" pos:end="53:11">bs</name></expr>)</condition> <block pos:start="53:14" pos:end="73:5">{<block_content pos:start="55:9" pos:end="71:15">

        <expr_stmt pos:start="55:9" pos:end="55:50"><expr pos:start="55:9" pos:end="55:49"><name pos:start="55:9" pos:end="55:10">bs</name> <operator pos:start="55:12" pos:end="55:12">=</operator> <call pos:start="55:14" pos:end="55:49"><name pos:start="55:14" pos:end="55:27">bdrv_lookup_bs</name><argument_list pos:start="55:28" pos:end="55:49">(<argument pos:start="55:29" pos:end="55:34"><expr pos:start="55:29" pos:end="55:34"><name pos:start="55:29" pos:end="55:34">device</name></expr></argument>, <argument pos:start="55:37" pos:end="55:42"><expr pos:start="55:37" pos:end="55:42"><name pos:start="55:37" pos:end="55:42">device</name></expr></argument>, <argument pos:start="55:45" pos:end="55:48"><expr pos:start="55:45" pos:end="55:48"><name pos:start="55:45" pos:end="55:48">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="57:9" pos:end="69:9"><if pos:start="57:9" pos:end="65:9">if <condition pos:start="57:12" pos:end="57:16">(<expr pos:start="57:13" pos:end="57:15"><operator pos:start="57:13" pos:end="57:13">!</operator><name pos:start="57:14" pos:end="57:15">bs</name></expr>)</condition> <block pos:start="57:18" pos:end="65:9">{<block_content pos:start="59:13" pos:end="63:55">

            <expr_stmt pos:start="59:13" pos:end="59:34"><expr pos:start="59:13" pos:end="59:33"><call pos:start="59:13" pos:end="59:33"><name pos:start="59:13" pos:end="59:22">error_free</name><argument_list pos:start="59:23" pos:end="59:33">(<argument pos:start="59:24" pos:end="59:32"><expr pos:start="59:24" pos:end="59:32"><name pos:start="59:24" pos:end="59:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="61:13" pos:end="63:55"><expr pos:start="61:13" pos:end="63:54"><call pos:start="61:13" pos:end="63:54"><name pos:start="61:13" pos:end="61:21">error_set</name><argument_list pos:start="61:22" pos:end="63:54">(<argument pos:start="61:23" pos:end="61:26"><expr pos:start="61:23" pos:end="61:26"><name pos:start="61:23" pos:end="61:26">errp</name></expr></argument>, <argument pos:start="61:29" pos:end="61:56"><expr pos:start="61:29" pos:end="61:56"><name pos:start="61:29" pos:end="61:56">ERROR_CLASS_DEVICE_NOT_FOUND</name></expr></argument>,

                      <argument pos:start="63:23" pos:end="63:45"><expr pos:start="63:23" pos:end="63:45"><literal type="string" pos:start="63:23" pos:end="63:45">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="63:48" pos:end="63:53"><expr pos:start="63:48" pos:end="63:53"><name pos:start="63:48" pos:end="63:53">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="65:11" pos:end="69:9">else <block pos:start="65:16" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:45">

            <expr_stmt pos:start="67:13" pos:end="67:45"><expr pos:start="67:13" pos:end="67:44"><call pos:start="67:13" pos:end="67:44"><name pos:start="67:13" pos:end="67:27">error_propagate</name><argument_list pos:start="67:28" pos:end="67:44">(<argument pos:start="67:29" pos:end="67:32"><expr pos:start="67:29" pos:end="67:32"><name pos:start="67:29" pos:end="67:32">errp</name></expr></argument>, <argument pos:start="67:35" pos:end="67:43"><expr pos:start="67:35" pos:end="67:43"><name pos:start="67:35" pos:end="67:43">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <return pos:start="71:9" pos:end="71:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:43"><expr pos:start="77:5" pos:end="77:42"><name pos:start="77:5" pos:end="77:15">aio_context</name> <operator pos:start="77:17" pos:end="77:17">=</operator> <call pos:start="77:19" pos:end="77:42"><name pos:start="77:19" pos:end="77:38">bdrv_get_aio_context</name><argument_list pos:start="77:39" pos:end="77:42">(<argument pos:start="77:40" pos:end="77:41"><expr pos:start="77:40" pos:end="77:41"><name pos:start="77:40" pos:end="77:41">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:37"><expr pos:start="79:5" pos:end="79:36"><call pos:start="79:5" pos:end="79:36"><name pos:start="79:5" pos:end="79:23">aio_context_acquire</name><argument_list pos:start="79:24" pos:end="79:36">(<argument pos:start="79:25" pos:end="79:35"><expr pos:start="79:25" pos:end="79:35"><name pos:start="79:25" pos:end="79:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="83:5" pos:end="87:5"><if pos:start="83:5" pos:end="87:5">if <condition pos:start="83:8" pos:end="83:66">(<expr pos:start="83:9" pos:end="83:65"><call pos:start="83:9" pos:end="83:65"><name pos:start="83:9" pos:end="83:26">bdrv_op_is_blocked</name><argument_list pos:start="83:27" pos:end="83:65">(<argument pos:start="83:28" pos:end="83:29"><expr pos:start="83:28" pos:end="83:29"><name pos:start="83:28" pos:end="83:29">bs</name></expr></argument>, <argument pos:start="83:32" pos:end="83:58"><expr pos:start="83:32" pos:end="83:58"><name pos:start="83:32" pos:end="83:58">BLOCK_OP_TYPE_COMMIT_SOURCE</name></expr></argument>, <argument pos:start="83:61" pos:end="83:64"><expr pos:start="83:61" pos:end="83:64"><name pos:start="83:61" pos:end="83:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="83:68" pos:end="87:5">{<block_content pos:start="85:9" pos:end="85:17">

        <goto pos:start="85:9" pos:end="85:17">goto <name pos:start="85:14" pos:end="85:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:44">/* default top_bs is the active layer */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:16"><expr pos:start="93:5" pos:end="93:15"><name pos:start="93:5" pos:end="93:10">top_bs</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <name pos:start="93:14" pos:end="93:15">bs</name></expr>;</expr_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:23">(<expr pos:start="97:9" pos:end="97:22"><name pos:start="97:9" pos:end="97:15">has_top</name> <operator pos:start="97:17" pos:end="97:18">&amp;&amp;</operator> <name pos:start="97:20" pos:end="97:22">top</name></expr>)</condition> <block pos:start="97:25" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:9">

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:43">(<expr pos:start="99:13" pos:end="99:42"><call pos:start="99:13" pos:end="99:37"><name pos:start="99:13" pos:end="99:18">strcmp</name><argument_list pos:start="99:19" pos:end="99:37">(<argument pos:start="99:20" pos:end="99:31"><expr pos:start="99:20" pos:end="99:31"><name pos:start="99:20" pos:end="99:31"><name pos:start="99:20" pos:end="99:21">bs</name><operator pos:start="99:22" pos:end="99:23">-&gt;</operator><name pos:start="99:24" pos:end="99:31">filename</name></name></expr></argument>, <argument pos:start="99:34" pos:end="99:36"><expr pos:start="99:34" pos:end="99:36"><name pos:start="99:34" pos:end="99:36">top</name></expr></argument>)</argument_list></call> <operator pos:start="99:39" pos:end="99:40">!=</operator> <literal type="number" pos:start="99:42" pos:end="99:42">0</literal></expr>)</condition> <block pos:start="99:45" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:54">

            <expr_stmt pos:start="101:13" pos:end="101:54"><expr pos:start="101:13" pos:end="101:53"><name pos:start="101:13" pos:end="101:18">top_bs</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <call pos:start="101:22" pos:end="101:53"><name pos:start="101:22" pos:end="101:44">bdrv_find_backing_image</name><argument_list pos:start="101:45" pos:end="101:53">(<argument pos:start="101:46" pos:end="101:47"><expr pos:start="101:46" pos:end="101:47"><name pos:start="101:46" pos:end="101:47">bs</name></expr></argument>, <argument pos:start="101:50" pos:end="101:52"><expr pos:start="101:50" pos:end="101:52"><name pos:start="101:50" pos:end="101:52">top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:23">(<expr pos:start="109:9" pos:end="109:22"><name pos:start="109:9" pos:end="109:14">top_bs</name> <operator pos:start="109:16" pos:end="109:17">==</operator> <name pos:start="109:19" pos:end="109:22">NULL</name></expr>)</condition> <block pos:start="109:25" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:17">

        <expr_stmt pos:start="111:9" pos:end="111:76"><expr pos:start="111:9" pos:end="111:75"><call pos:start="111:9" pos:end="111:75"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="111:75">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:54"><expr pos:start="111:26" pos:end="111:54"><literal type="string" pos:start="111:26" pos:end="111:54">"Top image file %s not found"</literal></expr></argument>, <argument pos:start="111:57" pos:end="111:74"><expr pos:start="111:57" pos:end="111:74"><ternary pos:start="111:57" pos:end="111:74"><condition pos:start="111:57" pos:end="111:61"><expr pos:start="111:57" pos:end="111:59"><name pos:start="111:57" pos:end="111:59">top</name></expr> ?</condition><then pos:start="111:63" pos:end="111:65"> <expr pos:start="111:63" pos:end="111:65"><name pos:start="111:63" pos:end="111:65">top</name></expr> </then><else pos:start="111:67" pos:end="111:74">: <expr pos:start="111:69" pos:end="111:74"><literal type="string" pos:start="111:69" pos:end="111:74">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="113:9" pos:end="113:17">goto <name pos:start="113:14" pos:end="113:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:56"><expr pos:start="119:5" pos:end="119:55"><call pos:start="119:5" pos:end="119:55"><name pos:start="119:5" pos:end="119:10">assert</name><argument_list pos:start="119:11" pos:end="119:55">(<argument pos:start="119:12" pos:end="119:54"><expr pos:start="119:12" pos:end="119:54"><call pos:start="119:12" pos:end="119:39"><name pos:start="119:12" pos:end="119:31">bdrv_get_aio_context</name><argument_list pos:start="119:32" pos:end="119:39">(<argument pos:start="119:33" pos:end="119:38"><expr pos:start="119:33" pos:end="119:38"><name pos:start="119:33" pos:end="119:38">top_bs</name></expr></argument>)</argument_list></call> <operator pos:start="119:41" pos:end="119:42">==</operator> <name pos:start="119:44" pos:end="119:54">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="127:5">if <condition pos:start="123:8" pos:end="123:25">(<expr pos:start="123:9" pos:end="123:24"><name pos:start="123:9" pos:end="123:16">has_base</name> <operator pos:start="123:18" pos:end="123:19">&amp;&amp;</operator> <name pos:start="123:21" pos:end="123:24">base</name></expr>)</condition> <block pos:start="123:27" pos:end="127:5">{<block_content pos:start="125:9" pos:end="125:56">

        <expr_stmt pos:start="125:9" pos:end="125:56"><expr pos:start="125:9" pos:end="125:55"><name pos:start="125:9" pos:end="125:15">base_bs</name> <operator pos:start="125:17" pos:end="125:17">=</operator> <call pos:start="125:19" pos:end="125:55"><name pos:start="125:19" pos:end="125:41">bdrv_find_backing_image</name><argument_list pos:start="125:42" pos:end="125:55">(<argument pos:start="125:43" pos:end="125:48"><expr pos:start="125:43" pos:end="125:48"><name pos:start="125:43" pos:end="125:48">top_bs</name></expr></argument>, <argument pos:start="125:51" pos:end="125:54"><expr pos:start="125:51" pos:end="125:54"><name pos:start="125:51" pos:end="125:54">base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="127:7" pos:end="131:5">else <block pos:start="127:12" pos:end="131:5">{<block_content pos:start="129:9" pos:end="129:41">

        <expr_stmt pos:start="129:9" pos:end="129:41"><expr pos:start="129:9" pos:end="129:40"><name pos:start="129:9" pos:end="129:15">base_bs</name> <operator pos:start="129:17" pos:end="129:17">=</operator> <call pos:start="129:19" pos:end="129:40"><name pos:start="129:19" pos:end="129:32">bdrv_find_base</name><argument_list pos:start="129:33" pos:end="129:40">(<argument pos:start="129:34" pos:end="129:39"><expr pos:start="129:34" pos:end="129:39"><name pos:start="129:34" pos:end="129:39">top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="135:5" pos:end="141:5"><if pos:start="135:5" pos:end="141:5">if <condition pos:start="135:8" pos:end="135:24">(<expr pos:start="135:9" pos:end="135:23"><name pos:start="135:9" pos:end="135:15">base_bs</name> <operator pos:start="135:17" pos:end="135:18">==</operator> <name pos:start="135:20" pos:end="135:23">NULL</name></expr>)</condition> <block pos:start="135:26" pos:end="141:5">{<block_content pos:start="137:9" pos:end="139:17">

        <expr_stmt pos:start="137:9" pos:end="137:68"><expr pos:start="137:9" pos:end="137:67"><call pos:start="137:9" pos:end="137:67"><name pos:start="137:9" pos:end="137:18">error_setg</name><argument_list pos:start="137:19" pos:end="137:67">(<argument pos:start="137:20" pos:end="137:23"><expr pos:start="137:20" pos:end="137:23"><name pos:start="137:20" pos:end="137:23">errp</name></expr></argument>, <argument pos:start="137:26" pos:end="137:44"><expr pos:start="137:26" pos:end="137:44"><name pos:start="137:26" pos:end="137:44">QERR_BASE_NOT_FOUND</name></expr></argument>, <argument pos:start="137:47" pos:end="137:66"><expr pos:start="137:47" pos:end="137:66"><ternary pos:start="137:47" pos:end="137:66"><condition pos:start="137:47" pos:end="137:52"><expr pos:start="137:47" pos:end="137:50"><name pos:start="137:47" pos:end="137:50">base</name></expr> ?</condition><then pos:start="137:54" pos:end="137:57"> <expr pos:start="137:54" pos:end="137:57"><name pos:start="137:54" pos:end="137:57">base</name></expr> </then><else pos:start="137:59" pos:end="137:66">: <expr pos:start="137:61" pos:end="137:66"><literal type="string" pos:start="137:61" pos:end="137:66">"NULL"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="139:9" pos:end="139:17">goto <name pos:start="139:14" pos:end="139:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:57"><expr pos:start="145:5" pos:end="145:56"><call pos:start="145:5" pos:end="145:56"><name pos:start="145:5" pos:end="145:10">assert</name><argument_list pos:start="145:11" pos:end="145:56">(<argument pos:start="145:12" pos:end="145:55"><expr pos:start="145:12" pos:end="145:55"><call pos:start="145:12" pos:end="145:40"><name pos:start="145:12" pos:end="145:31">bdrv_get_aio_context</name><argument_list pos:start="145:32" pos:end="145:40">(<argument pos:start="145:33" pos:end="145:39"><expr pos:start="145:33" pos:end="145:39"><name pos:start="145:33" pos:end="145:39">base_bs</name></expr></argument>)</argument_list></call> <operator pos:start="145:42" pos:end="145:43">==</operator> <name pos:start="145:45" pos:end="145:55">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:71">(<expr pos:start="149:9" pos:end="149:70"><call pos:start="149:9" pos:end="149:70"><name pos:start="149:9" pos:end="149:26">bdrv_op_is_blocked</name><argument_list pos:start="149:27" pos:end="149:70">(<argument pos:start="149:28" pos:end="149:34"><expr pos:start="149:28" pos:end="149:34"><name pos:start="149:28" pos:end="149:34">base_bs</name></expr></argument>, <argument pos:start="149:37" pos:end="149:63"><expr pos:start="149:37" pos:end="149:63"><name pos:start="149:37" pos:end="149:63">BLOCK_OP_TYPE_COMMIT_TARGET</name></expr></argument>, <argument pos:start="149:66" pos:end="149:69"><expr pos:start="149:66" pos:end="149:69"><name pos:start="149:66" pos:end="149:69">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:73" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:17">

        <goto pos:start="151:9" pos:end="151:17">goto <name pos:start="151:14" pos:end="151:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="157:5" pos:end="157:62">/* Do not allow attempts to commit an image into itself */</comment>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:26">(<expr pos:start="159:9" pos:end="159:25"><name pos:start="159:9" pos:end="159:14">top_bs</name> <operator pos:start="159:16" pos:end="159:17">==</operator> <name pos:start="159:19" pos:end="159:25">base_bs</name></expr>)</condition> <block pos:start="159:28" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:17">

        <expr_stmt pos:start="161:9" pos:end="161:63"><expr pos:start="161:9" pos:end="161:62"><call pos:start="161:9" pos:end="161:62"><name pos:start="161:9" pos:end="161:18">error_setg</name><argument_list pos:start="161:19" pos:end="161:62">(<argument pos:start="161:20" pos:end="161:23"><expr pos:start="161:20" pos:end="161:23"><name pos:start="161:20" pos:end="161:23">errp</name></expr></argument>, <argument pos:start="161:26" pos:end="161:61"><expr pos:start="161:26" pos:end="161:61"><literal type="string" pos:start="161:26" pos:end="161:61">"cannot commit an image into itself"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="163:9" pos:end="163:17">goto <name pos:start="163:14" pos:end="163:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="169:5" pos:end="193:5"><if pos:start="169:5" pos:end="185:5">if <condition pos:start="169:8" pos:end="169:21">(<expr pos:start="169:9" pos:end="169:20"><name pos:start="169:9" pos:end="169:14">top_bs</name> <operator pos:start="169:16" pos:end="169:17">==</operator> <name pos:start="169:19" pos:end="169:20">bs</name></expr>)</condition> <block pos:start="169:23" pos:end="185:5">{<block_content pos:start="171:9" pos:end="183:75">

        <if_stmt pos:start="171:9" pos:end="179:9"><if pos:start="171:9" pos:end="179:9">if <condition pos:start="171:12" pos:end="171:29">(<expr pos:start="171:13" pos:end="171:28"><name pos:start="171:13" pos:end="171:28">has_backing_file</name></expr>)</condition> <block pos:start="171:31" pos:end="179:9">{<block_content pos:start="173:13" pos:end="177:21">

            <expr_stmt pos:start="173:13" pos:end="175:63"><expr pos:start="173:13" pos:end="175:62"><call pos:start="173:13" pos:end="175:62"><name pos:start="173:13" pos:end="173:22">error_setg</name><argument_list pos:start="173:23" pos:end="175:62">(<argument pos:start="173:24" pos:end="173:27"><expr pos:start="173:24" pos:end="173:27"><name pos:start="173:24" pos:end="173:27">errp</name></expr></argument>, <argument pos:start="173:30" pos:end="175:61"><expr pos:start="173:30" pos:end="175:61"><literal type="string" pos:start="173:30" pos:end="173:56">"'backing-file' specified,"</literal>

                             <literal type="string" pos:start="175:30" pos:end="175:61">" but 'top' is the active layer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="177:13" pos:end="177:21">goto <name pos:start="177:18" pos:end="177:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="183:75"><expr pos:start="181:9" pos:end="183:74"><call pos:start="181:9" pos:end="183:74"><name pos:start="181:9" pos:end="181:27">commit_active_start</name><argument_list pos:start="181:28" pos:end="183:74">(<argument pos:start="181:29" pos:end="181:54"><expr pos:start="181:29" pos:end="181:54"><ternary pos:start="181:29" pos:end="181:54"><condition pos:start="181:29" pos:end="181:40"><expr pos:start="181:29" pos:end="181:38"><name pos:start="181:29" pos:end="181:38">has_job_id</name></expr> ?</condition><then pos:start="181:42" pos:end="181:47"> <expr pos:start="181:42" pos:end="181:47"><name pos:start="181:42" pos:end="181:47">job_id</name></expr> </then><else pos:start="181:49" pos:end="181:54">: <expr pos:start="181:51" pos:end="181:54"><name pos:start="181:51" pos:end="181:54">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="181:57" pos:end="181:58"><expr pos:start="181:57" pos:end="181:58"><name pos:start="181:57" pos:end="181:58">bs</name></expr></argument>, <argument pos:start="181:61" pos:end="181:67"><expr pos:start="181:61" pos:end="181:67"><name pos:start="181:61" pos:end="181:67">base_bs</name></expr></argument>, <argument pos:start="181:70" pos:end="181:74"><expr pos:start="181:70" pos:end="181:74"><name pos:start="181:70" pos:end="181:74">speed</name></expr></argument>,

                            <argument pos:start="183:29" pos:end="183:36"><expr pos:start="183:29" pos:end="183:36"><name pos:start="183:29" pos:end="183:36">on_error</name></expr></argument>, <argument pos:start="183:39" pos:end="183:50"><expr pos:start="183:39" pos:end="183:50"><name pos:start="183:39" pos:end="183:50">block_job_cb</name></expr></argument>, <argument pos:start="183:53" pos:end="183:54"><expr pos:start="183:53" pos:end="183:54"><name pos:start="183:53" pos:end="183:54">bs</name></expr></argument>, <argument pos:start="183:57" pos:end="183:66"><expr pos:start="183:57" pos:end="183:66"><operator pos:start="183:57" pos:end="183:57">&amp;</operator><name pos:start="183:58" pos:end="183:66">local_err</name></expr></argument>, <argument pos:start="183:69" pos:end="183:73"><expr pos:start="183:69" pos:end="183:73"><name pos:start="183:69" pos:end="183:73">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="185:7" pos:end="193:5">else <block pos:start="185:12" pos:end="193:5">{<block_content pos:start="187:9" pos:end="191:73">

        <expr_stmt pos:start="187:9" pos:end="191:73"><expr pos:start="187:9" pos:end="191:72"><call pos:start="187:9" pos:end="191:72"><name pos:start="187:9" pos:end="187:20">commit_start</name><argument_list pos:start="187:21" pos:end="191:72">(<argument pos:start="187:22" pos:end="187:47"><expr pos:start="187:22" pos:end="187:47"><ternary pos:start="187:22" pos:end="187:47"><condition pos:start="187:22" pos:end="187:33"><expr pos:start="187:22" pos:end="187:31"><name pos:start="187:22" pos:end="187:31">has_job_id</name></expr> ?</condition><then pos:start="187:35" pos:end="187:40"> <expr pos:start="187:35" pos:end="187:40"><name pos:start="187:35" pos:end="187:40">job_id</name></expr> </then><else pos:start="187:42" pos:end="187:47">: <expr pos:start="187:44" pos:end="187:47"><name pos:start="187:44" pos:end="187:47">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="187:50" pos:end="187:51"><expr pos:start="187:50" pos:end="187:51"><name pos:start="187:50" pos:end="187:51">bs</name></expr></argument>, <argument pos:start="187:54" pos:end="187:60"><expr pos:start="187:54" pos:end="187:60"><name pos:start="187:54" pos:end="187:60">base_bs</name></expr></argument>, <argument pos:start="187:63" pos:end="187:68"><expr pos:start="187:63" pos:end="187:68"><name pos:start="187:63" pos:end="187:68">top_bs</name></expr></argument>, <argument pos:start="187:71" pos:end="187:75"><expr pos:start="187:71" pos:end="187:75"><name pos:start="187:71" pos:end="187:75">speed</name></expr></argument>,

                     <argument pos:start="189:22" pos:end="189:29"><expr pos:start="189:22" pos:end="189:29"><name pos:start="189:22" pos:end="189:29">on_error</name></expr></argument>, <argument pos:start="189:32" pos:end="189:43"><expr pos:start="189:32" pos:end="189:43"><name pos:start="189:32" pos:end="189:43">block_job_cb</name></expr></argument>, <argument pos:start="189:46" pos:end="189:47"><expr pos:start="189:46" pos:end="189:47"><name pos:start="189:46" pos:end="189:47">bs</name></expr></argument>,

                     <argument pos:start="191:22" pos:end="191:59"><expr pos:start="191:22" pos:end="191:59"><ternary pos:start="191:22" pos:end="191:59"><condition pos:start="191:22" pos:end="191:39"><expr pos:start="191:22" pos:end="191:37"><name pos:start="191:22" pos:end="191:37">has_backing_file</name></expr> ?</condition><then pos:start="191:41" pos:end="191:52"> <expr pos:start="191:41" pos:end="191:52"><name pos:start="191:41" pos:end="191:52">backing_file</name></expr> </then><else pos:start="191:54" pos:end="191:59">: <expr pos:start="191:56" pos:end="191:59"><name pos:start="191:56" pos:end="191:59">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="191:62" pos:end="191:71"><expr pos:start="191:62" pos:end="191:71"><operator pos:start="191:62" pos:end="191:62">&amp;</operator><name pos:start="191:63" pos:end="191:71">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="195:5" pos:end="201:5"><if pos:start="195:5" pos:end="201:5">if <condition pos:start="195:8" pos:end="195:26">(<expr pos:start="195:9" pos:end="195:25"><name pos:start="195:9" pos:end="195:17">local_err</name> <operator pos:start="195:19" pos:end="195:20">!=</operator> <name pos:start="195:22" pos:end="195:25">NULL</name></expr>)</condition> <block pos:start="195:28" pos:end="201:5">{<block_content pos:start="197:9" pos:end="199:17">

        <expr_stmt pos:start="197:9" pos:end="197:41"><expr pos:start="197:9" pos:end="197:40"><call pos:start="197:9" pos:end="197:40"><name pos:start="197:9" pos:end="197:23">error_propagate</name><argument_list pos:start="197:24" pos:end="197:40">(<argument pos:start="197:25" pos:end="197:28"><expr pos:start="197:25" pos:end="197:28"><name pos:start="197:25" pos:end="197:28">errp</name></expr></argument>, <argument pos:start="197:31" pos:end="197:39"><expr pos:start="197:31" pos:end="197:39"><name pos:start="197:31" pos:end="197:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="199:9" pos:end="199:17">goto <name pos:start="199:14" pos:end="199:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



<label pos:start="205:1" pos:end="205:4"><name pos:start="205:1" pos:end="205:3">out</name>:</label>

    <expr_stmt pos:start="207:5" pos:end="207:37"><expr pos:start="207:5" pos:end="207:36"><call pos:start="207:5" pos:end="207:36"><name pos:start="207:5" pos:end="207:23">aio_context_release</name><argument_list pos:start="207:24" pos:end="207:36">(<argument pos:start="207:25" pos:end="207:35"><expr pos:start="207:25" pos:end="207:35"><name pos:start="207:25" pos:end="207:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
