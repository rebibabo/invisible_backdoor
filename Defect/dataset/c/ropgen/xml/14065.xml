<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14065.c" pos:tabs="8"><function pos:start="1:1" pos:end="177:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:14">do_savevm</name><parameter_list pos:start="1:15" pos:end="1:48">(<parameter pos:start="1:16" pos:end="1:27"><decl pos:start="1:16" pos:end="1:27"><type pos:start="1:16" pos:end="1:27"><name pos:start="1:16" pos:end="1:22">Monitor</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:27">mon</name></decl></parameter>, <parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:40">QDict</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:47">qdict</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="177:1">{<block_content pos:start="5:5" pos:end="175:19">

    <decl_stmt pos:start="5:5" pos:end="5:21"><decl pos:start="5:5" pos:end="5:20"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">DriveInfo</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">BlockDriverState</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">bs</name></decl>, <decl pos:start="7:27" pos:end="7:30"><type ref="prev" pos:start="7:5" pos:end="7:22"><modifier pos:start="7:27" pos:end="7:27">*</modifier></type><name pos:start="7:28" pos:end="7:30">bs1</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:66"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20">QEMUSnapshotInfo</name></type> <name pos:start="9:22" pos:end="9:24">sn1</name></decl>, <decl pos:start="9:27" pos:end="9:36"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:27" pos:end="9:27">*</modifier></type><name pos:start="9:28" pos:end="9:29">sn</name> <init pos:start="9:31" pos:end="9:36">= <expr pos:start="9:33" pos:end="9:36"><operator pos:start="9:33" pos:end="9:33">&amp;</operator><name pos:start="9:34" pos:end="9:36">sn1</name></expr></init></decl>, <decl pos:start="9:39" pos:end="9:45"><type ref="prev" pos:start="9:5" pos:end="9:20"/><name pos:start="9:39" pos:end="9:45">old_sn1</name></decl>, <decl pos:start="9:48" pos:end="9:65"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:48" pos:end="9:48">*</modifier></type><name pos:start="9:49" pos:end="9:54">old_sn</name> <init pos:start="9:56" pos:end="9:65">= <expr pos:start="9:58" pos:end="9:65"><operator pos:start="9:58" pos:end="9:58">&amp;</operator><name pos:start="9:59" pos:end="9:65">old_sn1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">QEMUFile</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:24">saved_vm_running</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="20:0"><decl pos:start="17:5" pos:end="17:26"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:26">vm_state_size</name></decl>;</decl_stmt>

<cpp:ifdef pos:start="19:1" pos:end="19:13">#<cpp:directive pos:start="19:2" pos:end="19:6">ifdef</cpp:directive> <name pos:start="19:8" pos:end="19:13">_WIN32</name></cpp:ifdef>

    <decl_stmt pos:start="21:5" pos:end="24:0"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:10">struct</name> <name pos:start="21:12" pos:end="21:17">_timeb</name></name></type> <name pos:start="21:19" pos:end="21:20">tb</name></decl>;</decl_stmt>

<cpp:else pos:start="23:1" pos:end="23:5">#<cpp:directive pos:start="23:2" pos:end="23:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="25:5" pos:end="28:0"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:10">struct</name> <name pos:start="25:12" pos:end="25:18">timeval</name></name></type> <name pos:start="25:20" pos:end="25:21">tv</name></decl>;</decl_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <decl_stmt pos:start="29:5" pos:end="29:56"><decl pos:start="29:5" pos:end="29:55"><type pos:start="29:5" pos:end="29:16"><specifier pos:start="29:5" pos:end="29:9">const</specifier> <name pos:start="29:11" pos:end="29:14">char</name> <modifier pos:start="29:16" pos:end="29:16">*</modifier></type><name pos:start="29:17" pos:end="29:20">name</name> <init pos:start="29:22" pos:end="29:55">= <expr pos:start="29:24" pos:end="29:55"><call pos:start="29:24" pos:end="29:55"><name pos:start="29:24" pos:end="29:40">qdict_get_try_str</name><argument_list pos:start="29:41" pos:end="29:55">(<argument pos:start="29:42" pos:end="29:46"><expr pos:start="29:42" pos:end="29:46"><name pos:start="29:42" pos:end="29:46">qdict</name></expr></argument>, <argument pos:start="29:49" pos:end="29:54"><expr pos:start="29:49" pos:end="29:54"><literal type="string" pos:start="29:49" pos:end="29:54">"name"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:6">bs</name> <operator pos:start="33:8" pos:end="33:8">=</operator> <call pos:start="33:10" pos:end="33:27"><name pos:start="33:10" pos:end="33:25">get_bs_snapshots</name><argument_list pos:start="33:26" pos:end="33:27">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:12">(<expr pos:start="35:9" pos:end="35:11"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:11">bs</name></expr>)</condition> <block pos:start="35:14" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:15">

        <expr_stmt pos:start="37:9" pos:end="37:70"><expr pos:start="37:9" pos:end="37:69"><call pos:start="37:9" pos:end="37:69"><name pos:start="37:9" pos:end="37:22">monitor_printf</name><argument_list pos:start="37:23" pos:end="37:69">(<argument pos:start="37:24" pos:end="37:26"><expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">mon</name></expr></argument>, <argument pos:start="37:29" pos:end="37:68"><expr pos:start="37:29" pos:end="37:68"><literal type="string" pos:start="37:29" pos:end="37:68">"No block device can accept snapshots\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:47">/* ??? Should this occur after vm_stop?  */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:21"><expr pos:start="47:5" pos:end="47:20"><call pos:start="47:5" pos:end="47:20"><name pos:start="47:5" pos:end="47:18">qemu_aio_flush</name><argument_list pos:start="47:19" pos:end="47:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:34"><expr pos:start="51:5" pos:end="51:33"><name pos:start="51:5" pos:end="51:20">saved_vm_running</name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:33">vm_running</name></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:15"><expr pos:start="53:5" pos:end="53:14"><call pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:11">vm_stop</name><argument_list pos:start="53:12" pos:end="53:14">(<argument pos:start="53:13" pos:end="53:13"><expr pos:start="53:13" pos:end="53:13"><literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:31"><expr pos:start="57:5" pos:end="57:30"><call pos:start="57:5" pos:end="57:30"><name pos:start="57:5" pos:end="57:10">memset</name><argument_list pos:start="57:11" pos:end="57:30">(<argument pos:start="57:12" pos:end="57:13"><expr pos:start="57:12" pos:end="57:13"><name pos:start="57:12" pos:end="57:13">sn</name></expr></argument>, <argument pos:start="57:16" pos:end="57:16"><expr pos:start="57:16" pos:end="57:16"><literal type="number" pos:start="57:16" pos:end="57:16">0</literal></expr></argument>, <argument pos:start="57:19" pos:end="57:29"><expr pos:start="57:19" pos:end="57:29"><sizeof pos:start="57:19" pos:end="57:29">sizeof<argument_list pos:start="57:25" pos:end="57:29">(<argument pos:start="57:26" pos:end="57:28"><expr pos:start="57:26" pos:end="57:28"><operator pos:start="57:26" pos:end="57:26">*</operator><name pos:start="57:27" pos:end="57:28">sn</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="59:5" pos:end="82:0"><if pos:start="59:5" pos:end="82:0">if <condition pos:start="59:8" pos:end="59:13">(<expr pos:start="59:9" pos:end="59:12"><name pos:start="59:9" pos:end="59:12">name</name></expr>)</condition> <block pos:start="59:15" pos:end="82:0">{<block_content pos:start="61:9" pos:end="73:9">

        <expr_stmt pos:start="61:9" pos:end="61:51"><expr pos:start="61:9" pos:end="61:50"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:50"><name pos:start="61:15" pos:end="61:32">bdrv_snapshot_find</name><argument_list pos:start="61:33" pos:end="61:50">(<argument pos:start="61:34" pos:end="61:35"><expr pos:start="61:34" pos:end="61:35"><name pos:start="61:34" pos:end="61:35">bs</name></expr></argument>, <argument pos:start="61:38" pos:end="61:43"><expr pos:start="61:38" pos:end="61:43"><name pos:start="61:38" pos:end="61:43">old_sn</name></expr></argument>, <argument pos:start="61:46" pos:end="61:49"><expr pos:start="61:46" pos:end="61:49"><name pos:start="61:46" pos:end="61:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="69:9">if <condition pos:start="63:12" pos:end="63:21">(<expr pos:start="63:13" pos:end="63:20"><name pos:start="63:13" pos:end="63:15">ret</name> <operator pos:start="63:17" pos:end="63:18">&gt;=</operator> <literal type="number" pos:start="63:20" pos:end="63:20">0</literal></expr>)</condition> <block pos:start="63:23" pos:end="69:9">{<block_content pos:start="65:13" pos:end="67:68">

            <expr_stmt pos:start="65:13" pos:end="65:62"><expr pos:start="65:13" pos:end="65:61"><call pos:start="65:13" pos:end="65:61"><name pos:start="65:13" pos:end="65:19">pstrcpy</name><argument_list pos:start="65:20" pos:end="65:61">(<argument pos:start="65:21" pos:end="65:28"><expr pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:28"><name pos:start="65:21" pos:end="65:22">sn</name><operator pos:start="65:23" pos:end="65:24">-&gt;</operator><name pos:start="65:25" pos:end="65:28">name</name></name></expr></argument>, <argument pos:start="65:31" pos:end="65:46"><expr pos:start="65:31" pos:end="65:46"><sizeof pos:start="65:31" pos:end="65:46">sizeof<argument_list pos:start="65:37" pos:end="65:46">(<argument pos:start="65:38" pos:end="65:45"><expr pos:start="65:38" pos:end="65:45"><name pos:start="65:38" pos:end="65:45"><name pos:start="65:38" pos:end="65:39">sn</name><operator pos:start="65:40" pos:end="65:41">-&gt;</operator><name pos:start="65:42" pos:end="65:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="65:49" pos:end="65:60"><expr pos:start="65:49" pos:end="65:60"><name pos:start="65:49" pos:end="65:60"><name pos:start="65:49" pos:end="65:54">old_sn</name><operator pos:start="65:55" pos:end="65:56">-&gt;</operator><name pos:start="65:57" pos:end="65:60">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:68"><expr pos:start="67:13" pos:end="67:67"><call pos:start="67:13" pos:end="67:67"><name pos:start="67:13" pos:end="67:19">pstrcpy</name><argument_list pos:start="67:20" pos:end="67:67">(<argument pos:start="67:21" pos:end="67:30"><expr pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:30"><name pos:start="67:21" pos:end="67:22">sn</name><operator pos:start="67:23" pos:end="67:24">-&gt;</operator><name pos:start="67:25" pos:end="67:30">id_str</name></name></expr></argument>, <argument pos:start="67:33" pos:end="67:50"><expr pos:start="67:33" pos:end="67:50"><sizeof pos:start="67:33" pos:end="67:50">sizeof<argument_list pos:start="67:39" pos:end="67:50">(<argument pos:start="67:40" pos:end="67:49"><expr pos:start="67:40" pos:end="67:49"><name pos:start="67:40" pos:end="67:49"><name pos:start="67:40" pos:end="67:41">sn</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:49">id_str</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="67:53" pos:end="67:66"><expr pos:start="67:53" pos:end="67:66"><name pos:start="67:53" pos:end="67:66"><name pos:start="67:53" pos:end="67:58">old_sn</name><operator pos:start="67:59" pos:end="67:60">-&gt;</operator><name pos:start="67:61" pos:end="67:66">id_str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="69:11" pos:end="73:9">else <block pos:start="69:16" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:54">

            <expr_stmt pos:start="71:13" pos:end="71:54"><expr pos:start="71:13" pos:end="71:53"><call pos:start="71:13" pos:end="71:53"><name pos:start="71:13" pos:end="71:19">pstrcpy</name><argument_list pos:start="71:20" pos:end="71:53">(<argument pos:start="71:21" pos:end="71:28"><expr pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:28"><name pos:start="71:21" pos:end="71:22">sn</name><operator pos:start="71:23" pos:end="71:24">-&gt;</operator><name pos:start="71:25" pos:end="71:28">name</name></name></expr></argument>, <argument pos:start="71:31" pos:end="71:46"><expr pos:start="71:31" pos:end="71:46"><sizeof pos:start="71:31" pos:end="71:46">sizeof<argument_list pos:start="71:37" pos:end="71:46">(<argument pos:start="71:38" pos:end="71:45"><expr pos:start="71:38" pos:end="71:45"><name pos:start="71:38" pos:end="71:45"><name pos:start="71:38" pos:end="71:39">sn</name><operator pos:start="71:40" pos:end="71:41">-&gt;</operator><name pos:start="71:42" pos:end="71:45">name</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="71:49" pos:end="71:52"><expr pos:start="71:49" pos:end="71:52"><name pos:start="71:49" pos:end="71:52">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:31">/* fill auxiliary fields */</comment>

<cpp:ifdef pos:start="81:1" pos:end="81:13">#<cpp:directive pos:start="81:2" pos:end="81:6">ifdef</cpp:directive> <name pos:start="81:8" pos:end="81:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="83:5" pos:end="83:16"><expr pos:start="83:5" pos:end="83:15"><call pos:start="83:5" pos:end="83:15"><name pos:start="83:5" pos:end="83:10">_ftime</name><argument_list pos:start="83:11" pos:end="83:15">(<argument pos:start="83:12" pos:end="83:14"><expr pos:start="83:12" pos:end="83:14"><operator pos:start="83:12" pos:end="83:12">&amp;</operator><name pos:start="83:13" pos:end="83:14">tb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:27"><expr pos:start="85:5" pos:end="85:26"><name pos:start="85:5" pos:end="85:16"><name pos:start="85:5" pos:end="85:6">sn</name><operator pos:start="85:7" pos:end="85:8">-&gt;</operator><name pos:start="85:9" pos:end="85:16">date_sec</name></name> <operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:26"><name pos:start="85:20" pos:end="85:21">tb</name><operator pos:start="85:22" pos:end="85:22">.</operator><name pos:start="85:23" pos:end="85:26">time</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="90:0"><expr pos:start="87:5" pos:end="87:40"><name pos:start="87:5" pos:end="87:17"><name pos:start="87:5" pos:end="87:6">sn</name><operator pos:start="87:7" pos:end="87:8">-&gt;</operator><name pos:start="87:9" pos:end="87:17">date_nsec</name></name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:30"><name pos:start="87:21" pos:end="87:22">tb</name><operator pos:start="87:23" pos:end="87:23">.</operator><name pos:start="87:24" pos:end="87:30">millitm</name></name> <operator pos:start="87:32" pos:end="87:32">*</operator> <literal type="number" pos:start="87:34" pos:end="87:40">1000000</literal></expr>;</expr_stmt>

<cpp:else pos:start="89:1" pos:end="89:5">#<cpp:directive pos:start="89:2" pos:end="89:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><call pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:16">gettimeofday</name><argument_list pos:start="91:17" pos:end="91:27">(<argument pos:start="91:18" pos:end="91:20"><expr pos:start="91:18" pos:end="91:20"><operator pos:start="91:18" pos:end="91:18">&amp;</operator><name pos:start="91:19" pos:end="91:20">tv</name></expr></argument>, <argument pos:start="91:23" pos:end="91:26"><expr pos:start="91:23" pos:end="91:26"><name pos:start="91:23" pos:end="91:26">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:29"><expr pos:start="93:5" pos:end="93:28"><name pos:start="93:5" pos:end="93:16"><name pos:start="93:5" pos:end="93:6">sn</name><operator pos:start="93:7" pos:end="93:8">-&gt;</operator><name pos:start="93:9" pos:end="93:16">date_sec</name></name> <operator pos:start="93:18" pos:end="93:18">=</operator> <name pos:start="93:20" pos:end="93:28"><name pos:start="93:20" pos:end="93:21">tv</name><operator pos:start="93:22" pos:end="93:22">.</operator><name pos:start="93:23" pos:end="93:28">tv_sec</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="98:0"><expr pos:start="95:5" pos:end="95:37"><name pos:start="95:5" pos:end="95:17"><name pos:start="95:5" pos:end="95:6">sn</name><operator pos:start="95:7" pos:end="95:8">-&gt;</operator><name pos:start="95:9" pos:end="95:17">date_nsec</name></name> <operator pos:start="95:19" pos:end="95:19">=</operator> <name pos:start="95:21" pos:end="95:30"><name pos:start="95:21" pos:end="95:22">tv</name><operator pos:start="95:23" pos:end="95:23">.</operator><name pos:start="95:24" pos:end="95:30">tv_usec</name></name> <operator pos:start="95:32" pos:end="95:32">*</operator> <literal type="number" pos:start="95:34" pos:end="95:37">1000</literal></expr>;</expr_stmt>

<cpp:endif pos:start="97:1" pos:end="97:6">#<cpp:directive pos:start="97:2" pos:end="97:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="99:5" pos:end="99:49"><expr pos:start="99:5" pos:end="99:48"><name pos:start="99:5" pos:end="99:21"><name pos:start="99:5" pos:end="99:6">sn</name><operator pos:start="99:7" pos:end="99:8">-&gt;</operator><name pos:start="99:9" pos:end="99:21">vm_clock_nsec</name></name> <operator pos:start="99:23" pos:end="99:23">=</operator> <call pos:start="99:25" pos:end="99:48"><name pos:start="99:25" pos:end="99:38">qemu_get_clock</name><argument_list pos:start="99:39" pos:end="99:48">(<argument pos:start="99:40" pos:end="99:47"><expr pos:start="99:40" pos:end="99:47"><name pos:start="99:40" pos:end="99:47">vm_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="103:5" pos:end="103:47">/* Delete old snapshots of the same name */</comment>

    <if_stmt pos:start="105:5" pos:end="109:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:54">(<expr pos:start="105:9" pos:end="105:53"><name pos:start="105:9" pos:end="105:12">name</name> <operator pos:start="105:14" pos:end="105:15">&amp;&amp;</operator> <call pos:start="105:17" pos:end="105:49"><name pos:start="105:17" pos:end="105:38">del_existing_snapshots</name><argument_list pos:start="105:39" pos:end="105:49">(<argument pos:start="105:40" pos:end="105:42"><expr pos:start="105:40" pos:end="105:42"><name pos:start="105:40" pos:end="105:42">mon</name></expr></argument>, <argument pos:start="105:45" pos:end="105:48"><expr pos:start="105:45" pos:end="105:48"><name pos:start="105:45" pos:end="105:48">name</name></expr></argument>)</argument_list></call> <operator pos:start="105:51" pos:end="105:51">&lt;</operator> <literal type="number" pos:start="105:53" pos:end="105:53">0</literal></expr>)</condition> <block pos:start="105:56" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:21">

        <goto pos:start="107:9" pos:end="107:21">goto <name pos:start="107:14" pos:end="107:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="113:5" pos:end="113:27">/* save the VM state */</comment>

    <expr_stmt pos:start="115:5" pos:end="115:31"><expr pos:start="115:5" pos:end="115:30"><name pos:start="115:5" pos:end="115:5">f</name> <operator pos:start="115:7" pos:end="115:7">=</operator> <call pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:23">qemu_fopen_bdrv</name><argument_list pos:start="115:24" pos:end="115:30">(<argument pos:start="115:25" pos:end="115:26"><expr pos:start="115:25" pos:end="115:26"><name pos:start="115:25" pos:end="115:26">bs</name></expr></argument>, <argument pos:start="115:29" pos:end="115:29"><expr pos:start="115:29" pos:end="115:29"><literal type="number" pos:start="115:29" pos:end="115:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="117:5" pos:end="123:5"><if pos:start="117:5" pos:end="123:5">if <condition pos:start="117:8" pos:end="117:11">(<expr pos:start="117:9" pos:end="117:10"><operator pos:start="117:9" pos:end="117:9">!</operator><name pos:start="117:10" pos:end="117:10">f</name></expr>)</condition> <block pos:start="117:13" pos:end="123:5">{<block_content pos:start="119:9" pos:end="121:21">

        <expr_stmt pos:start="119:9" pos:end="119:62"><expr pos:start="119:9" pos:end="119:61"><call pos:start="119:9" pos:end="119:61"><name pos:start="119:9" pos:end="119:22">monitor_printf</name><argument_list pos:start="119:23" pos:end="119:61">(<argument pos:start="119:24" pos:end="119:26"><expr pos:start="119:24" pos:end="119:26"><name pos:start="119:24" pos:end="119:26">mon</name></expr></argument>, <argument pos:start="119:29" pos:end="119:60"><expr pos:start="119:29" pos:end="119:60"><literal type="string" pos:start="119:29" pos:end="119:60">"Could not open VM state file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:21">goto <name pos:start="121:14" pos:end="121:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:36"><expr pos:start="125:5" pos:end="125:35"><name pos:start="125:5" pos:end="125:7">ret</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:35"><name pos:start="125:11" pos:end="125:27">qemu_savevm_state</name><argument_list pos:start="125:28" pos:end="125:35">(<argument pos:start="125:29" pos:end="125:31"><expr pos:start="125:29" pos:end="125:31"><name pos:start="125:29" pos:end="125:31">mon</name></expr></argument>, <argument pos:start="125:34" pos:end="125:34"><expr pos:start="125:34" pos:end="125:34"><name pos:start="125:34" pos:end="125:34">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:34"><expr pos:start="127:5" pos:end="127:33"><name pos:start="127:5" pos:end="127:17">vm_state_size</name> <operator pos:start="127:19" pos:end="127:19">=</operator> <call pos:start="127:21" pos:end="127:33"><name pos:start="127:21" pos:end="127:30">qemu_ftell</name><argument_list pos:start="127:31" pos:end="127:33">(<argument pos:start="127:32" pos:end="127:32"><expr pos:start="127:32" pos:end="127:32"><name pos:start="127:32" pos:end="127:32">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:19"><expr pos:start="129:5" pos:end="129:18"><call pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:15">qemu_fclose</name><argument_list pos:start="129:16" pos:end="129:18">(<argument pos:start="129:17" pos:end="129:17"><expr pos:start="129:17" pos:end="129:17"><name pos:start="129:17" pos:end="129:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="137:5"><if pos:start="131:5" pos:end="137:5">if <condition pos:start="131:8" pos:end="131:16">(<expr pos:start="131:9" pos:end="131:15"><name pos:start="131:9" pos:end="131:11">ret</name> <operator pos:start="131:13" pos:end="131:13">&lt;</operator> <literal type="number" pos:start="131:15" pos:end="131:15">0</literal></expr>)</condition> <block pos:start="131:18" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:21">

        <expr_stmt pos:start="133:9" pos:end="133:64"><expr pos:start="133:9" pos:end="133:63"><call pos:start="133:9" pos:end="133:63"><name pos:start="133:9" pos:end="133:22">monitor_printf</name><argument_list pos:start="133:23" pos:end="133:63">(<argument pos:start="133:24" pos:end="133:26"><expr pos:start="133:24" pos:end="133:26"><name pos:start="133:24" pos:end="133:26">mon</name></expr></argument>, <argument pos:start="133:29" pos:end="133:57"><expr pos:start="133:29" pos:end="133:57"><literal type="string" pos:start="133:29" pos:end="133:57">"Error %d while writing VM\n"</literal></expr></argument>, <argument pos:start="133:60" pos:end="133:62"><expr pos:start="133:60" pos:end="133:62"><name pos:start="133:60" pos:end="133:62">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:21">goto <name pos:start="135:14" pos:end="135:20">the_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="141:5" pos:end="141:30">/* create the snapshots */</comment>



    <macro pos:start="145:5" pos:end="145:40"><name pos:start="145:5" pos:end="145:18">QTAILQ_FOREACH</name><argument_list pos:start="145:19" pos:end="145:40">(<argument pos:start="145:20" pos:end="145:24">dinfo</argument>, <argument pos:start="145:27" pos:end="145:33">&amp;drives</argument>, <argument pos:start="145:36" pos:end="145:39">next</argument>)</argument_list></macro> <block pos:start="145:42" pos:end="167:5">{<block_content pos:start="147:9" pos:end="165:9">

        <expr_stmt pos:start="147:9" pos:end="147:26"><expr pos:start="147:9" pos:end="147:25"><name pos:start="147:9" pos:end="147:11">bs1</name> <operator pos:start="147:13" pos:end="147:13">=</operator> <name pos:start="147:15" pos:end="147:25"><name pos:start="147:15" pos:end="147:19">dinfo</name><operator pos:start="147:20" pos:end="147:21">-&gt;</operator><name pos:start="147:22" pos:end="147:25">bdrv</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="149:9" pos:end="165:9"><if pos:start="149:9" pos:end="165:9">if <condition pos:start="149:12" pos:end="149:35">(<expr pos:start="149:13" pos:end="149:34"><call pos:start="149:13" pos:end="149:34"><name pos:start="149:13" pos:end="149:29">bdrv_has_snapshot</name><argument_list pos:start="149:30" pos:end="149:34">(<argument pos:start="149:31" pos:end="149:33"><expr pos:start="149:31" pos:end="149:33"><name pos:start="149:31" pos:end="149:33">bs1</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:37" pos:end="165:9">{<block_content pos:start="153:13" pos:end="163:13">

            <comment type="block" pos:start="151:13" pos:end="151:79">/* Write VM state size only to the image that contains the state */</comment>

            <expr_stmt pos:start="153:13" pos:end="153:64"><expr pos:start="153:13" pos:end="153:63"><name pos:start="153:13" pos:end="153:29"><name pos:start="153:13" pos:end="153:14">sn</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:29">vm_state_size</name></name> <operator pos:start="153:31" pos:end="153:31">=</operator> <operator pos:start="153:33" pos:end="153:33">(</operator><ternary pos:start="153:34" pos:end="153:62"><condition pos:start="153:34" pos:end="153:44"><expr pos:start="153:34" pos:end="153:42"><name pos:start="153:34" pos:end="153:35">bs</name> <operator pos:start="153:37" pos:end="153:38">==</operator> <name pos:start="153:40" pos:end="153:42">bs1</name></expr> ?</condition><then pos:start="153:46" pos:end="153:58"> <expr pos:start="153:46" pos:end="153:58"><name pos:start="153:46" pos:end="153:58">vm_state_size</name></expr> </then><else pos:start="153:60" pos:end="153:62">: <expr pos:start="153:62" pos:end="153:62"><literal type="number" pos:start="153:62" pos:end="153:62">0</literal></expr></else></ternary><operator pos:start="153:63" pos:end="153:63">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:48"><expr pos:start="155:13" pos:end="155:47"><name pos:start="155:13" pos:end="155:15">ret</name> <operator pos:start="155:17" pos:end="155:17">=</operator> <call pos:start="155:19" pos:end="155:47"><name pos:start="155:19" pos:end="155:38">bdrv_snapshot_create</name><argument_list pos:start="155:39" pos:end="155:47">(<argument pos:start="155:40" pos:end="155:42"><expr pos:start="155:40" pos:end="155:42"><name pos:start="155:40" pos:end="155:42">bs1</name></expr></argument>, <argument pos:start="155:45" pos:end="155:46"><expr pos:start="155:45" pos:end="155:46"><name pos:start="155:45" pos:end="155:46">sn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="163:13"><if pos:start="157:13" pos:end="163:13">if <condition pos:start="157:16" pos:end="157:24">(<expr pos:start="157:17" pos:end="157:23"><name pos:start="157:17" pos:end="157:19">ret</name> <operator pos:start="157:21" pos:end="157:21">&lt;</operator> <literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>)</condition> <block pos:start="157:26" pos:end="163:13">{<block_content pos:start="159:17" pos:end="161:58">

                <expr_stmt pos:start="159:17" pos:end="161:58"><expr pos:start="159:17" pos:end="161:57"><call pos:start="159:17" pos:end="161:57"><name pos:start="159:17" pos:end="159:30">monitor_printf</name><argument_list pos:start="159:31" pos:end="161:57">(<argument pos:start="159:32" pos:end="159:34"><expr pos:start="159:32" pos:end="159:34"><name pos:start="159:32" pos:end="159:34">mon</name></expr></argument>, <argument pos:start="159:37" pos:end="159:77"><expr pos:start="159:37" pos:end="159:77"><literal type="string" pos:start="159:37" pos:end="159:77">"Error while creating snapshot on '%s'\n"</literal></expr></argument>,

                               <argument pos:start="161:32" pos:end="161:56"><expr pos:start="161:32" pos:end="161:56"><call pos:start="161:32" pos:end="161:56"><name pos:start="161:32" pos:end="161:51">bdrv_get_device_name</name><argument_list pos:start="161:52" pos:end="161:56">(<argument pos:start="161:53" pos:end="161:55"><expr pos:start="161:53" pos:end="161:55"><name pos:start="161:53" pos:end="161:55">bs1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block>



 <label pos:start="171:2" pos:end="171:9"><name pos:start="171:2" pos:end="171:8">the_end</name>:</label>

    <if_stmt pos:start="173:5" pos:end="175:19"><if pos:start="173:5" pos:end="175:19">if <condition pos:start="173:8" pos:end="173:25">(<expr pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:24">saved_vm_running</name></expr>)</condition><block type="pseudo" pos:start="175:9" pos:end="175:19"><block_content pos:start="175:9" pos:end="175:19">

        <expr_stmt pos:start="175:9" pos:end="175:19"><expr pos:start="175:9" pos:end="175:18"><call pos:start="175:9" pos:end="175:18"><name pos:start="175:9" pos:end="175:16">vm_start</name><argument_list pos:start="175:17" pos:end="175:18">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>
</unit>
