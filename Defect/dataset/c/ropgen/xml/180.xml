<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/180.c" pos:tabs="8"><function pos:start="1:1" pos:end="139:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">prop_get_fdt</name><parameter_list pos:start="1:25" pos:end="3:52">(<parameter pos:start="1:26" pos:end="1:36"><decl pos:start="1:26" pos:end="1:36"><type pos:start="1:26" pos:end="1:36"><name pos:start="1:26" pos:end="1:31">Object</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:36">obj</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:48"><decl pos:start="1:39" pos:end="1:48"><type pos:start="1:39" pos:end="1:48"><name pos:start="1:39" pos:end="1:45">Visitor</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">v</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:66"><decl pos:start="1:51" pos:end="1:66"><type pos:start="1:51" pos:end="1:66"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:60">char</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:66">name</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:29">void</name> <modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:37">opaque</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:51"><decl pos:start="3:40" pos:end="3:51"><type pos:start="3:40" pos:end="3:51"><name pos:start="3:40" pos:end="3:44">Error</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier><modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:51">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="139:1">{<block_content pos:start="7:5" pos:end="137:29">

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">sPAPRDRConnector</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:25">drc</name> <init pos:start="7:27" pos:end="7:51">= <expr pos:start="7:29" pos:end="7:51"><call pos:start="7:29" pos:end="7:51"><name pos:start="7:29" pos:end="7:46">SPAPR_DR_CONNECTOR</name><argument_list pos:start="7:47" pos:end="7:51">(<argument pos:start="7:48" pos:end="7:50"><expr pos:start="7:48" pos:end="7:50"><name pos:start="7:48" pos:end="7:50">obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:14">err</name> <init pos:start="9:16" pos:end="9:21">= <expr pos:start="9:18" pos:end="9:21"><name pos:start="9:18" pos:end="9:21">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:47"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23">fdt_offset_next</name></decl>, <decl pos:start="11:26" pos:end="11:35"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:26" pos:end="11:35">fdt_offset</name></decl>, <decl pos:start="11:38" pos:end="11:46"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:38" pos:end="11:46">fdt_depth</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">void</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:13">fdt</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:18">(<expr pos:start="17:9" pos:end="17:17"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:17"><name pos:start="17:10" pos:end="17:12">drc</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:17">fdt</name></name></expr>)</condition> <block pos:start="17:20" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:15">

        <expr_stmt pos:start="19:9" pos:end="19:39"><expr pos:start="19:9" pos:end="19:38"><call pos:start="19:9" pos:end="19:38"><name pos:start="19:9" pos:end="19:23">visit_type_null</name><argument_list pos:start="19:24" pos:end="19:38">(<argument pos:start="19:25" pos:end="19:25"><expr pos:start="19:25" pos:end="19:25"><name pos:start="19:25" pos:end="19:25">v</name></expr></argument>, <argument pos:start="19:28" pos:end="19:31"><expr pos:start="19:28" pos:end="19:31"><name pos:start="19:28" pos:end="19:31">NULL</name></expr></argument>, <argument pos:start="19:34" pos:end="19:37"><expr pos:start="19:34" pos:end="19:37"><name pos:start="19:34" pos:end="19:37">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:7">fdt</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <name pos:start="27:11" pos:end="27:18"><name pos:start="27:11" pos:end="27:13">drc</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:18">fdt</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:39"><expr pos:start="29:5" pos:end="29:38"><name pos:start="29:5" pos:end="29:14">fdt_offset</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:38"><name pos:start="29:18" pos:end="29:20">drc</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:38">fdt_start_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:18"><expr pos:start="31:5" pos:end="31:17"><name pos:start="31:5" pos:end="31:13">fdt_depth</name> <operator pos:start="31:15" pos:end="31:15">=</operator> <literal type="number" pos:start="31:17" pos:end="31:17">0</literal></expr>;</expr_stmt>



    <do pos:start="35:5" pos:end="137:29">do <block pos:start="35:8" pos:end="137:5">{<block_content pos:start="37:9" pos:end="135:37">

        <decl_stmt pos:start="37:9" pos:end="37:32"><decl pos:start="37:9" pos:end="37:31"><type pos:start="37:9" pos:end="37:20"><specifier pos:start="37:9" pos:end="37:13">const</specifier> <name pos:start="37:15" pos:end="37:18">char</name> <modifier pos:start="37:20" pos:end="37:20">*</modifier></type><name pos:start="37:21" pos:end="37:24">name</name> <init pos:start="37:26" pos:end="37:31">= <expr pos:start="37:28" pos:end="37:31"><name pos:start="37:28" pos:end="37:31">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:47"><decl pos:start="39:9" pos:end="39:46"><type pos:start="39:9" pos:end="39:35"><specifier pos:start="39:9" pos:end="39:13">const</specifier> <name pos:start="39:15" pos:end="39:33"><name pos:start="39:15" pos:end="39:20">struct</name> <name pos:start="39:22" pos:end="39:33">fdt_property</name></name> <modifier pos:start="39:35" pos:end="39:35">*</modifier></type><name pos:start="39:36" pos:end="39:39">prop</name> <init pos:start="39:41" pos:end="39:46">= <expr pos:start="39:43" pos:end="39:46"><name pos:start="39:43" pos:end="39:46">NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:39"><decl pos:start="41:9" pos:end="41:24"><type pos:start="41:9" pos:end="41:11"><name pos:start="41:9" pos:end="41:11">int</name></type> <name pos:start="41:13" pos:end="41:20">prop_len</name> <init pos:start="41:22" pos:end="41:24">= <expr pos:start="41:24" pos:end="41:24"><literal type="number" pos:start="41:24" pos:end="41:24">0</literal></expr></init></decl>, <decl pos:start="41:27" pos:end="41:38"><type ref="prev" pos:start="41:9" pos:end="41:11"/><name pos:start="41:27" pos:end="41:34">name_len</name> <init pos:start="41:36" pos:end="41:38">= <expr pos:start="41:38" pos:end="41:38"><literal type="number" pos:start="41:38" pos:end="41:38">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:21"><decl pos:start="43:9" pos:end="43:20"><type pos:start="43:9" pos:end="43:16"><name pos:start="43:9" pos:end="43:16">uint32_t</name></type> <name pos:start="43:18" pos:end="43:20">tag</name></decl>;</decl_stmt>



        <expr_stmt pos:start="47:9" pos:end="47:62"><expr pos:start="47:9" pos:end="47:61"><name pos:start="47:9" pos:end="47:11">tag</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="47:61"><name pos:start="47:15" pos:end="47:26">fdt_next_tag</name><argument_list pos:start="47:27" pos:end="47:61">(<argument pos:start="47:28" pos:end="47:30"><expr pos:start="47:28" pos:end="47:30"><name pos:start="47:28" pos:end="47:30">fdt</name></expr></argument>, <argument pos:start="47:33" pos:end="47:42"><expr pos:start="47:33" pos:end="47:42"><name pos:start="47:33" pos:end="47:42">fdt_offset</name></expr></argument>, <argument pos:start="47:45" pos:end="47:60"><expr pos:start="47:45" pos:end="47:60"><operator pos:start="47:45" pos:end="47:45">&amp;</operator><name pos:start="47:46" pos:end="47:60">fdt_offset_next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="49:9" pos:end="133:9">switch <condition pos:start="49:16" pos:end="49:20">(<expr pos:start="49:17" pos:end="49:19"><name pos:start="49:17" pos:end="49:19">tag</name></expr>)</condition> <block pos:start="49:22" pos:end="133:9">{<block_content pos:start="51:9" pos:end="131:80">

        <case pos:start="51:9" pos:end="51:28">case <expr pos:start="51:14" pos:end="51:27"><name pos:start="51:14" pos:end="51:27">FDT_BEGIN_NODE</name></expr>:</case>

            <expr_stmt pos:start="53:13" pos:end="53:24"><expr pos:start="53:13" pos:end="53:23"><name pos:start="53:13" pos:end="53:21">fdt_depth</name><operator pos:start="53:22" pos:end="53:23">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:60"><expr pos:start="55:13" pos:end="55:59"><name pos:start="55:13" pos:end="55:16">name</name> <operator pos:start="55:18" pos:end="55:18">=</operator> <call pos:start="55:20" pos:end="55:59"><name pos:start="55:20" pos:end="55:31">fdt_get_name</name><argument_list pos:start="55:32" pos:end="55:59">(<argument pos:start="55:33" pos:end="55:35"><expr pos:start="55:33" pos:end="55:35"><name pos:start="55:33" pos:end="55:35">fdt</name></expr></argument>, <argument pos:start="55:38" pos:end="55:47"><expr pos:start="55:38" pos:end="55:47"><name pos:start="55:38" pos:end="55:47">fdt_offset</name></expr></argument>, <argument pos:start="55:50" pos:end="55:58"><expr pos:start="55:50" pos:end="55:58"><operator pos:start="55:50" pos:end="55:50">&amp;</operator><name pos:start="55:51" pos:end="55:58">name_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><call pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:30">visit_start_struct</name><argument_list pos:start="57:31" pos:end="57:54">(<argument pos:start="57:32" pos:end="57:32"><expr pos:start="57:32" pos:end="57:32"><name pos:start="57:32" pos:end="57:32">v</name></expr></argument>, <argument pos:start="57:35" pos:end="57:38"><expr pos:start="57:35" pos:end="57:38"><name pos:start="57:35" pos:end="57:38">name</name></expr></argument>, <argument pos:start="57:41" pos:end="57:44"><expr pos:start="57:41" pos:end="57:44"><name pos:start="57:41" pos:end="57:44">NULL</name></expr></argument>, <argument pos:start="57:47" pos:end="57:47"><expr pos:start="57:47" pos:end="57:47"><literal type="number" pos:start="57:47" pos:end="57:47">0</literal></expr></argument>, <argument pos:start="57:50" pos:end="57:53"><expr pos:start="57:50" pos:end="57:53"><operator pos:start="57:50" pos:end="57:50">&amp;</operator><name pos:start="57:51" pos:end="57:53">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="59:13" pos:end="65:13"><if pos:start="59:13" pos:end="65:13">if <condition pos:start="59:16" pos:end="59:20">(<expr pos:start="59:17" pos:end="59:19"><name pos:start="59:17" pos:end="59:19">err</name></expr>)</condition> <block pos:start="59:22" pos:end="65:13">{<block_content pos:start="61:17" pos:end="63:23">

                <expr_stmt pos:start="61:17" pos:end="61:43"><expr pos:start="61:17" pos:end="61:42"><call pos:start="61:17" pos:end="61:42"><name pos:start="61:17" pos:end="61:31">error_propagate</name><argument_list pos:start="61:32" pos:end="61:42">(<argument pos:start="61:33" pos:end="61:36"><expr pos:start="61:33" pos:end="61:36"><name pos:start="61:33" pos:end="61:36">errp</name></expr></argument>, <argument pos:start="61:39" pos:end="61:41"><expr pos:start="61:39" pos:end="61:41"><name pos:start="61:39" pos:end="61:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="63:17" pos:end="63:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <break pos:start="67:13" pos:end="67:18">break;</break>

        <case pos:start="69:9" pos:end="69:26">case <expr pos:start="69:14" pos:end="69:25"><name pos:start="69:14" pos:end="69:25">FDT_END_NODE</name></expr>:</case>

            <comment type="block" pos:start="71:13" pos:end="71:74">/* shouldn't ever see an FDT_END_NODE before FDT_BEGIN_NODE */</comment>

            <expr_stmt pos:start="73:13" pos:end="73:36"><expr pos:start="73:13" pos:end="73:35"><call pos:start="73:13" pos:end="73:35"><name pos:start="73:13" pos:end="73:20">g_assert</name><argument_list pos:start="73:21" pos:end="73:35">(<argument pos:start="73:22" pos:end="73:34"><expr pos:start="73:22" pos:end="73:34"><name pos:start="73:22" pos:end="73:30">fdt_depth</name> <operator pos:start="73:32" pos:end="73:32">&gt;</operator> <literal type="number" pos:start="73:34" pos:end="73:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:40"><expr pos:start="75:13" pos:end="75:39"><call pos:start="75:13" pos:end="75:39"><name pos:start="75:13" pos:end="75:30">visit_check_struct</name><argument_list pos:start="75:31" pos:end="75:39">(<argument pos:start="75:32" pos:end="75:32"><expr pos:start="75:32" pos:end="75:32"><name pos:start="75:32" pos:end="75:32">v</name></expr></argument>, <argument pos:start="75:35" pos:end="75:38"><expr pos:start="75:35" pos:end="75:38"><operator pos:start="75:35" pos:end="75:35">&amp;</operator><name pos:start="75:36" pos:end="75:38">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:32"><expr pos:start="77:13" pos:end="77:31"><call pos:start="77:13" pos:end="77:31"><name pos:start="77:13" pos:end="77:28">visit_end_struct</name><argument_list pos:start="77:29" pos:end="77:31">(<argument pos:start="77:30" pos:end="77:30"><expr pos:start="77:30" pos:end="77:30"><name pos:start="77:30" pos:end="77:30">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="79:13" pos:end="85:13"><if pos:start="79:13" pos:end="85:13">if <condition pos:start="79:16" pos:end="79:20">(<expr pos:start="79:17" pos:end="79:19"><name pos:start="79:17" pos:end="79:19">err</name></expr>)</condition> <block pos:start="79:22" pos:end="85:13">{<block_content pos:start="81:17" pos:end="83:23">

                <expr_stmt pos:start="81:17" pos:end="81:43"><expr pos:start="81:17" pos:end="81:42"><call pos:start="81:17" pos:end="81:42"><name pos:start="81:17" pos:end="81:31">error_propagate</name><argument_list pos:start="81:32" pos:end="81:42">(<argument pos:start="81:33" pos:end="81:36"><expr pos:start="81:33" pos:end="81:36"><name pos:start="81:33" pos:end="81:36">errp</name></expr></argument>, <argument pos:start="81:39" pos:end="81:41"><expr pos:start="81:39" pos:end="81:41"><name pos:start="81:39" pos:end="81:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="83:17" pos:end="83:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="87:13" pos:end="87:24"><expr pos:start="87:13" pos:end="87:23"><name pos:start="87:13" pos:end="87:21">fdt_depth</name><operator pos:start="87:22" pos:end="87:23">--</operator></expr>;</expr_stmt>

            <break pos:start="89:13" pos:end="89:18">break;</break>

        <case pos:start="91:9" pos:end="91:22">case <expr pos:start="91:14" pos:end="91:21"><name pos:start="91:14" pos:end="91:21">FDT_PROP</name></expr>:</case> <block pos:start="91:24" pos:end="127:9">{<block_content pos:start="93:13" pos:end="125:18">

            <decl_stmt pos:start="93:13" pos:end="93:18"><decl pos:start="93:13" pos:end="93:17"><type pos:start="93:13" pos:end="93:15"><name pos:start="93:13" pos:end="93:15">int</name></type> <name pos:start="93:17" pos:end="93:17">i</name></decl>;</decl_stmt>

            <expr_stmt pos:start="95:13" pos:end="95:74"><expr pos:start="95:13" pos:end="95:73"><name pos:start="95:13" pos:end="95:16">prop</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <call pos:start="95:20" pos:end="95:73"><name pos:start="95:20" pos:end="95:45">fdt_get_property_by_offset</name><argument_list pos:start="95:46" pos:end="95:73">(<argument pos:start="95:47" pos:end="95:49"><expr pos:start="95:47" pos:end="95:49"><name pos:start="95:47" pos:end="95:49">fdt</name></expr></argument>, <argument pos:start="95:52" pos:end="95:61"><expr pos:start="95:52" pos:end="95:61"><name pos:start="95:52" pos:end="95:61">fdt_offset</name></expr></argument>, <argument pos:start="95:64" pos:end="95:72"><expr pos:start="95:64" pos:end="95:72"><operator pos:start="95:64" pos:end="95:64">&amp;</operator><name pos:start="95:65" pos:end="95:72">prop_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:64"><expr pos:start="97:13" pos:end="97:63"><name pos:start="97:13" pos:end="97:16">name</name> <operator pos:start="97:18" pos:end="97:18">=</operator> <call pos:start="97:20" pos:end="97:63"><name pos:start="97:20" pos:end="97:29">fdt_string</name><argument_list pos:start="97:30" pos:end="97:63">(<argument pos:start="97:31" pos:end="97:33"><expr pos:start="97:31" pos:end="97:33"><name pos:start="97:31" pos:end="97:33">fdt</name></expr></argument>, <argument pos:start="97:36" pos:end="97:62"><expr pos:start="97:36" pos:end="97:62"><call pos:start="97:36" pos:end="97:62"><name pos:start="97:36" pos:end="97:47">fdt32_to_cpu</name><argument_list pos:start="97:48" pos:end="97:62">(<argument pos:start="97:49" pos:end="97:61"><expr pos:start="97:49" pos:end="97:61"><name pos:start="97:49" pos:end="97:61"><name pos:start="97:49" pos:end="97:52">prop</name><operator pos:start="97:53" pos:end="97:54">-&gt;</operator><name pos:start="97:55" pos:end="97:61">nameoff</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:44"><expr pos:start="99:13" pos:end="99:43"><call pos:start="99:13" pos:end="99:43"><name pos:start="99:13" pos:end="99:28">visit_start_list</name><argument_list pos:start="99:29" pos:end="99:43">(<argument pos:start="99:30" pos:end="99:30"><expr pos:start="99:30" pos:end="99:30"><name pos:start="99:30" pos:end="99:30">v</name></expr></argument>, <argument pos:start="99:33" pos:end="99:36"><expr pos:start="99:33" pos:end="99:36"><name pos:start="99:33" pos:end="99:36">name</name></expr></argument>, <argument pos:start="99:39" pos:end="99:42"><expr pos:start="99:39" pos:end="99:42"><operator pos:start="99:39" pos:end="99:39">&amp;</operator><name pos:start="99:40" pos:end="99:42">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="101:13" pos:end="107:13"><if pos:start="101:13" pos:end="107:13">if <condition pos:start="101:16" pos:end="101:20">(<expr pos:start="101:17" pos:end="101:19"><name pos:start="101:17" pos:end="101:19">err</name></expr>)</condition> <block pos:start="101:22" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:23">

                <expr_stmt pos:start="103:17" pos:end="103:43"><expr pos:start="103:17" pos:end="103:42"><call pos:start="103:17" pos:end="103:42"><name pos:start="103:17" pos:end="103:31">error_propagate</name><argument_list pos:start="103:32" pos:end="103:42">(<argument pos:start="103:33" pos:end="103:36"><expr pos:start="103:33" pos:end="103:36"><name pos:start="103:33" pos:end="103:36">errp</name></expr></argument>, <argument pos:start="103:39" pos:end="103:41"><expr pos:start="103:39" pos:end="103:41"><name pos:start="103:39" pos:end="103:41">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="105:17" pos:end="105:23">return;</return>

            </block_content>}</block></if></if_stmt>

            <for pos:start="109:13" pos:end="121:13">for <control pos:start="109:17" pos:end="109:42">(<init pos:start="109:18" pos:end="109:23"><expr pos:start="109:18" pos:end="109:22"><name pos:start="109:18" pos:end="109:18">i</name> <operator pos:start="109:20" pos:end="109:20">=</operator> <literal type="number" pos:start="109:22" pos:end="109:22">0</literal></expr>;</init> <condition pos:start="109:25" pos:end="109:37"><expr pos:start="109:25" pos:end="109:36"><name pos:start="109:25" pos:end="109:25">i</name> <operator pos:start="109:27" pos:end="109:27">&lt;</operator> <name pos:start="109:29" pos:end="109:36">prop_len</name></expr>;</condition> <incr pos:start="109:39" pos:end="109:41"><expr pos:start="109:39" pos:end="109:41"><name pos:start="109:39" pos:end="109:39">i</name><operator pos:start="109:40" pos:end="109:41">++</operator></expr></incr>)</control> <block pos:start="109:44" pos:end="121:13">{<block_content pos:start="111:17" pos:end="119:17">

                <expr_stmt pos:start="111:17" pos:end="111:75"><expr pos:start="111:17" pos:end="111:74"><call pos:start="111:17" pos:end="111:74"><name pos:start="111:17" pos:end="111:32">visit_type_uint8</name><argument_list pos:start="111:33" pos:end="111:74">(<argument pos:start="111:34" pos:end="111:34"><expr pos:start="111:34" pos:end="111:34"><name pos:start="111:34" pos:end="111:34">v</name></expr></argument>, <argument pos:start="111:37" pos:end="111:40"><expr pos:start="111:37" pos:end="111:40"><name pos:start="111:37" pos:end="111:40">NULL</name></expr></argument>, <argument pos:start="111:43" pos:end="111:67"><expr pos:start="111:43" pos:end="111:67"><operator pos:start="111:43" pos:end="111:43">(</operator><name pos:start="111:44" pos:end="111:50">uint8_t</name> <operator pos:start="111:52" pos:end="111:52">*</operator><operator pos:start="111:53" pos:end="111:53">)</operator><operator pos:start="111:54" pos:end="111:54">&amp;</operator><name pos:start="111:55" pos:end="111:67"><name pos:start="111:55" pos:end="111:58">prop</name><operator pos:start="111:59" pos:end="111:60">-&gt;</operator><name pos:start="111:61" pos:end="111:64">data</name><index pos:start="111:65" pos:end="111:67">[<expr pos:start="111:66" pos:end="111:66"><name pos:start="111:66" pos:end="111:66">i</name></expr>]</index></name></expr></argument>, <argument pos:start="111:70" pos:end="111:73"><expr pos:start="111:70" pos:end="111:73"><operator pos:start="111:70" pos:end="111:70">&amp;</operator><name pos:start="111:71" pos:end="111:73">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="113:17" pos:end="119:17"><if pos:start="113:17" pos:end="119:17">if <condition pos:start="113:20" pos:end="113:24">(<expr pos:start="113:21" pos:end="113:23"><name pos:start="113:21" pos:end="113:23">err</name></expr>)</condition> <block pos:start="113:26" pos:end="119:17">{<block_content pos:start="115:21" pos:end="117:27">

                    <expr_stmt pos:start="115:21" pos:end="115:47"><expr pos:start="115:21" pos:end="115:46"><call pos:start="115:21" pos:end="115:46"><name pos:start="115:21" pos:end="115:35">error_propagate</name><argument_list pos:start="115:36" pos:end="115:46">(<argument pos:start="115:37" pos:end="115:40"><expr pos:start="115:37" pos:end="115:40"><name pos:start="115:37" pos:end="115:40">errp</name></expr></argument>, <argument pos:start="115:43" pos:end="115:45"><expr pos:start="115:43" pos:end="115:45"><name pos:start="115:43" pos:end="115:45">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="117:21" pos:end="117:27">return;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="123:13" pos:end="123:30"><expr pos:start="123:13" pos:end="123:29"><call pos:start="123:13" pos:end="123:29"><name pos:start="123:13" pos:end="123:26">visit_end_list</name><argument_list pos:start="123:27" pos:end="123:29">(<argument pos:start="123:28" pos:end="123:28"><expr pos:start="123:28" pos:end="123:28"><name pos:start="123:28" pos:end="123:28">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="125:13" pos:end="125:18">break;</break>

        </block_content>}</block>

        <default pos:start="129:9" pos:end="129:16">default:</default>

            <expr_stmt pos:start="131:13" pos:end="131:80"><expr pos:start="131:13" pos:end="131:79"><call pos:start="131:13" pos:end="131:79"><name pos:start="131:13" pos:end="131:22">error_setg</name><argument_list pos:start="131:23" pos:end="131:79">(<argument pos:start="131:24" pos:end="131:35"><expr pos:start="131:24" pos:end="131:35"><operator pos:start="131:24" pos:end="131:24">&amp;</operator><name pos:start="131:25" pos:end="131:35">error_abort</name></expr></argument>, <argument pos:start="131:38" pos:end="131:73"><expr pos:start="131:38" pos:end="131:73"><literal type="string" pos:start="131:38" pos:end="131:73">"device FDT in unexpected state: %d"</literal></expr></argument>, <argument pos:start="131:76" pos:end="131:78"><expr pos:start="131:76" pos:end="131:78"><name pos:start="131:76" pos:end="131:78">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

        <expr_stmt pos:start="135:9" pos:end="135:37"><expr pos:start="135:9" pos:end="135:36"><name pos:start="135:9" pos:end="135:18">fdt_offset</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <name pos:start="135:22" pos:end="135:36">fdt_offset_next</name></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="137:13" pos:end="137:28">(<expr pos:start="137:14" pos:end="137:27"><name pos:start="137:14" pos:end="137:22">fdt_depth</name> <operator pos:start="137:24" pos:end="137:25">!=</operator> <literal type="number" pos:start="137:27" pos:end="137:27">0</literal></expr>)</condition>;</do>

</block_content>}</block></function>
</unit>
