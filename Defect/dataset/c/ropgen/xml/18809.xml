<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18809.c" pos:tabs="8"><function pos:start="1:1" pos:end="167:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">flush_encoders</name><parameter_list pos:start="1:27" pos:end="1:68">(<parameter pos:start="1:28" pos:end="1:50"><decl pos:start="1:28" pos:end="1:50"><type pos:start="1:28" pos:end="1:50"><name pos:start="1:28" pos:end="1:39">OutputStream</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:50">ost_table</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:67"><decl pos:start="1:53" pos:end="1:67"><type pos:start="1:53" pos:end="1:67"><name pos:start="1:53" pos:end="1:55">int</name></type> <name pos:start="1:57" pos:end="1:67">nb_ostreams</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="167:1">{<block_content pos:start="5:5" pos:end="165:5">

    <decl_stmt pos:start="5:5" pos:end="5:15"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>, <decl pos:start="5:12" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:14">ret</name></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="165:5">for <control pos:start="9:9" pos:end="9:37">(<init pos:start="9:10" pos:end="9:15"><expr pos:start="9:10" pos:end="9:14"><name pos:start="9:10" pos:end="9:10">i</name> <operator pos:start="9:12" pos:end="9:12">=</operator> <literal type="number" pos:start="9:14" pos:end="9:14">0</literal></expr>;</init> <condition pos:start="9:17" pos:end="9:32"><expr pos:start="9:17" pos:end="9:31"><name pos:start="9:17" pos:end="9:17">i</name> <operator pos:start="9:19" pos:end="9:19">&lt;</operator> <name pos:start="9:21" pos:end="9:31">nb_ostreams</name></expr>;</condition> <incr pos:start="9:34" pos:end="9:36"><expr pos:start="9:34" pos:end="9:36"><name pos:start="9:34" pos:end="9:34">i</name><operator pos:start="9:35" pos:end="9:36">++</operator></expr></incr>)</control> <block pos:start="9:39" pos:end="165:5">{<block_content pos:start="11:9" pos:end="163:9">

        <decl_stmt pos:start="11:9" pos:end="11:44"><decl pos:start="11:9" pos:end="11:43"><type pos:start="11:9" pos:end="11:24"><name pos:start="11:9" pos:end="11:20">OutputStream</name>   <modifier pos:start="11:24" pos:end="11:24">*</modifier></type><name pos:start="11:25" pos:end="11:27">ost</name> <init pos:start="11:29" pos:end="11:43">= <expr pos:start="11:31" pos:end="11:43"><operator pos:start="11:31" pos:end="11:31">&amp;</operator><name pos:start="11:32" pos:end="11:43"><name pos:start="11:32" pos:end="11:40">ost_table</name><index pos:start="11:41" pos:end="11:43">[<expr pos:start="11:42" pos:end="11:42"><name pos:start="11:42" pos:end="11:42">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:45"><decl pos:start="13:9" pos:end="13:44"><type pos:start="13:9" pos:end="13:24"><name pos:start="13:9" pos:end="13:22">AVCodecContext</name> <modifier pos:start="13:24" pos:end="13:24">*</modifier></type><name pos:start="13:25" pos:end="13:27">enc</name> <init pos:start="13:29" pos:end="13:44">= <expr pos:start="13:31" pos:end="13:44"><name pos:start="13:31" pos:end="13:44"><name pos:start="13:31" pos:end="13:33">ost</name><operator pos:start="13:34" pos:end="13:35">-&gt;</operator><name pos:start="13:36" pos:end="13:37">st</name><operator pos:start="13:38" pos:end="13:39">-&gt;</operator><name pos:start="13:40" pos:end="13:44">codec</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:64"><decl pos:start="15:9" pos:end="15:63"><type pos:start="15:9" pos:end="15:25"><name pos:start="15:9" pos:end="15:23">AVFormatContext</name> <modifier pos:start="15:25" pos:end="15:25">*</modifier></type><name pos:start="15:26" pos:end="15:27">os</name> <init pos:start="15:29" pos:end="15:63">= <expr pos:start="15:31" pos:end="15:63"><name pos:start="15:31" pos:end="15:59"><name pos:start="15:31" pos:end="15:42">output_files</name><index pos:start="15:43" pos:end="15:59">[<expr pos:start="15:44" pos:end="15:58"><name pos:start="15:44" pos:end="15:58"><name pos:start="15:44" pos:end="15:46">ost</name><operator pos:start="15:47" pos:end="15:48">-&gt;</operator><name pos:start="15:49" pos:end="15:58">file_index</name></name></expr>]</index></name><operator pos:start="15:60" pos:end="15:60">.</operator><name pos:start="15:61" pos:end="15:63">ctx</name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="21:21"><if pos:start="19:9" pos:end="21:21">if <condition pos:start="19:12" pos:end="19:34">(<expr pos:start="19:13" pos:end="19:33"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:33"><name pos:start="19:14" pos:end="19:16">ost</name><operator pos:start="19:17" pos:end="19:18">-&gt;</operator><name pos:start="19:19" pos:end="19:33">encoding_needed</name></name></expr>)</condition><block type="pseudo" pos:start="21:13" pos:end="21:21"><block_content pos:start="21:13" pos:end="21:21">

            <continue pos:start="21:13" pos:end="21:21">continue;</continue></block_content></block></if></if_stmt>



        <if_stmt pos:start="25:9" pos:end="27:21"><if pos:start="25:9" pos:end="27:21">if <condition pos:start="25:12" pos:end="25:84">(<expr pos:start="25:13" pos:end="25:83"><name pos:start="25:13" pos:end="25:38"><name pos:start="25:13" pos:end="25:15">ost</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:19">st</name><operator pos:start="25:20" pos:end="25:21">-&gt;</operator><name pos:start="25:22" pos:end="25:26">codec</name><operator pos:start="25:27" pos:end="25:28">-&gt;</operator><name pos:start="25:29" pos:end="25:38">codec_type</name></name> <operator pos:start="25:40" pos:end="25:41">==</operator> <name pos:start="25:43" pos:end="25:60">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="25:62" pos:end="25:63">&amp;&amp;</operator> <name pos:start="25:65" pos:end="25:79"><name pos:start="25:65" pos:end="25:67">enc</name><operator pos:start="25:68" pos:end="25:69">-&gt;</operator><name pos:start="25:70" pos:end="25:79">frame_size</name></name> <operator pos:start="25:81" pos:end="25:82">&lt;=</operator><literal type="number" pos:start="25:83" pos:end="25:83">1</literal></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:21"><block_content pos:start="27:13" pos:end="27:21">

            <continue pos:start="27:13" pos:end="27:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="29:9" pos:end="31:21"><if pos:start="29:9" pos:end="31:21">if <condition pos:start="29:12" pos:end="29:104">(<expr pos:start="29:13" pos:end="29:103"><name pos:start="29:13" pos:end="29:38"><name pos:start="29:13" pos:end="29:15">ost</name><operator pos:start="29:16" pos:end="29:17">-&gt;</operator><name pos:start="29:18" pos:end="29:19">st</name><operator pos:start="29:20" pos:end="29:21">-&gt;</operator><name pos:start="29:22" pos:end="29:26">codec</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:38">codec_type</name></name> <operator pos:start="29:40" pos:end="29:41">==</operator> <name pos:start="29:43" pos:end="29:60">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="29:62" pos:end="29:63">&amp;&amp;</operator> <operator pos:start="29:65" pos:end="29:65">(</operator><name pos:start="29:66" pos:end="29:83"><name pos:start="29:66" pos:end="29:67">os</name><operator pos:start="29:68" pos:end="29:69">-&gt;</operator><name pos:start="29:70" pos:end="29:76">oformat</name><operator pos:start="29:77" pos:end="29:78">-&gt;</operator><name pos:start="29:79" pos:end="29:83">flags</name></name> <operator pos:start="29:85" pos:end="29:85">&amp;</operator> <name pos:start="29:87" pos:end="29:102">AVFMT_RAWPICTURE</name><operator pos:start="29:103" pos:end="29:103">)</operator></expr>)</condition><block type="pseudo" pos:start="31:13" pos:end="31:21"><block_content pos:start="31:13" pos:end="31:21">

            <continue pos:start="31:13" pos:end="31:21">continue;</continue></block_content></block></if></if_stmt>



        <for pos:start="35:9" pos:end="163:9">for<control pos:start="35:12" pos:end="35:15">(<init pos:start="35:13" pos:end="35:13">;</init><condition pos:start="35:14" pos:end="35:14">;</condition><incr/>)</control> <block pos:start="35:17" pos:end="163:9">{<block_content pos:start="37:13" pos:end="161:74">

            <decl_stmt pos:start="37:13" pos:end="37:25"><decl pos:start="37:13" pos:end="37:24"><type pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">AVPacket</name></type> <name pos:start="37:22" pos:end="37:24">pkt</name></decl>;</decl_stmt>

            <decl_stmt pos:start="39:13" pos:end="39:27"><decl pos:start="39:13" pos:end="39:26"><type pos:start="39:13" pos:end="39:15"><name pos:start="39:13" pos:end="39:15">int</name></type> <name pos:start="39:17" pos:end="39:26">fifo_bytes</name></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:33"><expr pos:start="41:13" pos:end="41:32"><call pos:start="41:13" pos:end="41:32"><name pos:start="41:13" pos:end="41:26">av_init_packet</name><argument_list pos:start="41:27" pos:end="41:32">(<argument pos:start="41:28" pos:end="41:31"><expr pos:start="41:28" pos:end="41:31"><operator pos:start="41:28" pos:end="41:28">&amp;</operator><name pos:start="41:29" pos:end="41:31">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:41"><expr pos:start="43:13" pos:end="43:40"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:15">pkt</name><operator pos:start="43:16" pos:end="43:16">.</operator><name pos:start="43:17" pos:end="43:28">stream_index</name></name><operator pos:start="43:29" pos:end="43:29">=</operator> <name pos:start="43:31" pos:end="43:40"><name pos:start="43:31" pos:end="43:33">ost</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:40">index</name></name></expr>;</expr_stmt>



            <switch pos:start="47:13" pos:end="145:13">switch <condition pos:start="47:20" pos:end="47:47">(<expr pos:start="47:21" pos:end="47:46"><name pos:start="47:21" pos:end="47:46"><name pos:start="47:21" pos:end="47:23">ost</name><operator pos:start="47:24" pos:end="47:25">-&gt;</operator><name pos:start="47:26" pos:end="47:27">st</name><operator pos:start="47:28" pos:end="47:29">-&gt;</operator><name pos:start="47:30" pos:end="47:34">codec</name><operator pos:start="47:35" pos:end="47:36">-&gt;</operator><name pos:start="47:37" pos:end="47:46">codec_type</name></name></expr>)</condition> <block pos:start="47:49" pos:end="145:13">{<block_content pos:start="49:13" pos:end="143:23">

            <case pos:start="49:13" pos:end="49:36">case <expr pos:start="49:18" pos:end="49:35"><name pos:start="49:18" pos:end="49:35">AVMEDIA_TYPE_AUDIO</name></expr>:</case>

                <expr_stmt pos:start="51:17" pos:end="51:53"><expr pos:start="51:17" pos:end="51:52"><name pos:start="51:17" pos:end="51:26">fifo_bytes</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <call pos:start="51:30" pos:end="51:52"><name pos:start="51:30" pos:end="51:41">av_fifo_size</name><argument_list pos:start="51:42" pos:end="51:52">(<argument pos:start="51:43" pos:end="51:51"><expr pos:start="51:43" pos:end="51:51"><name pos:start="51:43" pos:end="51:51"><name pos:start="51:43" pos:end="51:45">ost</name><operator pos:start="51:46" pos:end="51:47">-&gt;</operator><name pos:start="51:48" pos:end="51:51">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="53:17" pos:end="53:24"><expr pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:19">ret</name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">0</literal></expr>;</expr_stmt>

                <comment type="block" pos:start="55:17" pos:end="55:58">/* encode any samples remaining in fifo */</comment>

                <if_stmt pos:start="57:17" pos:end="93:17"><if pos:start="57:17" pos:end="93:17">if <condition pos:start="57:20" pos:end="57:35">(<expr pos:start="57:21" pos:end="57:34"><name pos:start="57:21" pos:end="57:30">fifo_bytes</name> <operator pos:start="57:32" pos:end="57:32">&gt;</operator> <literal type="number" pos:start="57:34" pos:end="57:34">0</literal></expr>)</condition> <block pos:start="57:37" pos:end="93:17">{<block_content pos:start="59:21" pos:end="91:45">

                    <decl_stmt pos:start="59:21" pos:end="59:73"><decl pos:start="59:21" pos:end="59:72"><type pos:start="59:21" pos:end="59:23"><name pos:start="59:21" pos:end="59:23">int</name></type> <name pos:start="59:25" pos:end="59:29">osize</name> <init pos:start="59:31" pos:end="59:72">= <expr pos:start="59:33" pos:end="59:72"><call pos:start="59:33" pos:end="59:72"><name pos:start="59:33" pos:end="59:55">av_get_bytes_per_sample</name><argument_list pos:start="59:56" pos:end="59:72">(<argument pos:start="59:57" pos:end="59:71"><expr pos:start="59:57" pos:end="59:71"><name pos:start="59:57" pos:end="59:71"><name pos:start="59:57" pos:end="59:59">enc</name><operator pos:start="59:60" pos:end="59:61">-&gt;</operator><name pos:start="59:62" pos:end="59:71">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="61:21" pos:end="61:49"><decl pos:start="61:21" pos:end="61:48"><type pos:start="61:21" pos:end="61:23"><name pos:start="61:21" pos:end="61:23">int</name></type> <name pos:start="61:25" pos:end="61:30">fs_tmp</name> <init pos:start="61:32" pos:end="61:48">= <expr pos:start="61:34" pos:end="61:48"><name pos:start="61:34" pos:end="61:48"><name pos:start="61:34" pos:end="61:36">enc</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:48">frame_size</name></name></expr></init></decl>;</decl_stmt>



                    <expr_stmt pos:start="65:21" pos:end="65:81"><expr pos:start="65:21" pos:end="65:80"><call pos:start="65:21" pos:end="65:80"><name pos:start="65:21" pos:end="65:40">av_fifo_generic_read</name><argument_list pos:start="65:41" pos:end="65:80">(<argument pos:start="65:42" pos:end="65:50"><expr pos:start="65:42" pos:end="65:50"><name pos:start="65:42" pos:end="65:50"><name pos:start="65:42" pos:end="65:44">ost</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:50">fifo</name></name></expr></argument>, <argument pos:start="65:53" pos:end="65:61"><expr pos:start="65:53" pos:end="65:61"><name pos:start="65:53" pos:end="65:61">audio_buf</name></expr></argument>, <argument pos:start="65:64" pos:end="65:73"><expr pos:start="65:64" pos:end="65:73"><name pos:start="65:64" pos:end="65:73">fifo_bytes</name></expr></argument>, <argument pos:start="65:76" pos:end="65:79"><expr pos:start="65:76" pos:end="65:79"><name pos:start="65:76" pos:end="65:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="67:21" pos:end="81:21"><if pos:start="67:21" pos:end="71:21">if <condition pos:start="67:24" pos:end="67:78">(<expr pos:start="67:25" pos:end="67:77"><name pos:start="67:25" pos:end="67:48"><name pos:start="67:25" pos:end="67:27">enc</name><operator pos:start="67:28" pos:end="67:29">-&gt;</operator><name pos:start="67:30" pos:end="67:34">codec</name><operator pos:start="67:35" pos:end="67:36">-&gt;</operator><name pos:start="67:37" pos:end="67:48">capabilities</name></name> <operator pos:start="67:50" pos:end="67:50">&amp;</operator> <name pos:start="67:52" pos:end="67:77">CODEC_CAP_SMALL_LAST_FRAME</name></expr>)</condition> <block pos:start="67:80" pos:end="71:21">{<block_content pos:start="69:25" pos:end="69:79">

                        <expr_stmt pos:start="69:25" pos:end="69:79"><expr pos:start="69:25" pos:end="69:78"><name pos:start="69:25" pos:end="69:39"><name pos:start="69:25" pos:end="69:27">enc</name><operator pos:start="69:28" pos:end="69:29">-&gt;</operator><name pos:start="69:30" pos:end="69:39">frame_size</name></name> <operator pos:start="69:41" pos:end="69:41">=</operator> <name pos:start="69:43" pos:end="69:52">fifo_bytes</name> <operator pos:start="69:54" pos:end="69:54">/</operator> <operator pos:start="69:56" pos:end="69:56">(</operator><name pos:start="69:57" pos:end="69:61">osize</name> <operator pos:start="69:63" pos:end="69:63">*</operator> <name pos:start="69:65" pos:end="69:77"><name pos:start="69:65" pos:end="69:67">enc</name><operator pos:start="69:68" pos:end="69:69">-&gt;</operator><name pos:start="69:70" pos:end="69:77">channels</name></name><operator pos:start="69:78" pos:end="69:78">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="71:23" pos:end="81:21">else <block pos:start="71:28" pos:end="81:21">{<block_content pos:start="73:25" pos:end="79:106"> <comment type="block" pos:start="71:30" pos:end="71:38">/* pad */</comment>

                        <decl_stmt pos:start="73:25" pos:end="73:78"><decl pos:start="73:25" pos:end="73:77"><type pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">int</name></type> <name pos:start="73:29" pos:end="73:39">frame_bytes</name> <init pos:start="73:41" pos:end="73:77">= <expr pos:start="73:43" pos:end="73:77"><name pos:start="73:43" pos:end="73:57"><name pos:start="73:43" pos:end="73:45">enc</name><operator pos:start="73:46" pos:end="73:47">-&gt;</operator><name pos:start="73:48" pos:end="73:57">frame_size</name></name><operator pos:start="73:58" pos:end="73:58">*</operator><name pos:start="73:59" pos:end="73:63">osize</name><operator pos:start="73:64" pos:end="73:64">*</operator><name pos:start="73:65" pos:end="73:77"><name pos:start="73:65" pos:end="73:67">enc</name><operator pos:start="73:68" pos:end="73:69">-&gt;</operator><name pos:start="73:70" pos:end="73:77">channels</name></name></expr></init></decl>;</decl_stmt>

                        <if_stmt pos:start="75:25" pos:end="77:44"><if pos:start="75:25" pos:end="77:44">if <condition pos:start="75:28" pos:end="75:67">(<expr pos:start="75:29" pos:end="75:66"><name pos:start="75:29" pos:end="75:52">allocated_audio_buf_size</name> <operator pos:start="75:54" pos:end="75:54">&lt;</operator> <name pos:start="75:56" pos:end="75:66">frame_bytes</name></expr>)</condition><block type="pseudo" pos:start="77:29" pos:end="77:44"><block_content pos:start="77:29" pos:end="77:44">

                            <expr_stmt pos:start="77:29" pos:end="77:44"><expr pos:start="77:29" pos:end="77:43"><call pos:start="77:29" pos:end="77:43"><name pos:start="77:29" pos:end="77:40">exit_program</name><argument_list pos:start="77:41" pos:end="77:43">(<argument pos:start="77:42" pos:end="77:42"><expr pos:start="77:42" pos:end="77:42"><literal type="number" pos:start="77:42" pos:end="77:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="79:25" pos:end="79:106"><expr pos:start="79:25" pos:end="79:105"><call pos:start="79:25" pos:end="79:105"><name pos:start="79:25" pos:end="79:40">generate_silence</name><argument_list pos:start="79:41" pos:end="79:105">(<argument pos:start="79:42" pos:end="79:61"><expr pos:start="79:42" pos:end="79:61"><name pos:start="79:42" pos:end="79:50">audio_buf</name><operator pos:start="79:51" pos:end="79:51">+</operator><name pos:start="79:52" pos:end="79:61">fifo_bytes</name></expr></argument>, <argument pos:start="79:64" pos:end="79:78"><expr pos:start="79:64" pos:end="79:78"><name pos:start="79:64" pos:end="79:78"><name pos:start="79:64" pos:end="79:66">enc</name><operator pos:start="79:67" pos:end="79:68">-&gt;</operator><name pos:start="79:69" pos:end="79:78">sample_fmt</name></name></expr></argument>, <argument pos:start="79:81" pos:end="79:104"><expr pos:start="79:81" pos:end="79:104"><name pos:start="79:81" pos:end="79:91">frame_bytes</name> <operator pos:start="79:93" pos:end="79:93">-</operator> <name pos:start="79:95" pos:end="79:104">fifo_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>



                    <expr_stmt pos:start="85:21" pos:end="85:101"><expr pos:start="85:21" pos:end="85:100"><name pos:start="85:21" pos:end="85:23">ret</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <call pos:start="85:27" pos:end="85:100"><name pos:start="85:27" pos:end="85:46">avcodec_encode_audio</name><argument_list pos:start="85:47" pos:end="85:100">(<argument pos:start="85:48" pos:end="85:50"><expr pos:start="85:48" pos:end="85:50"><name pos:start="85:48" pos:end="85:50">enc</name></expr></argument>, <argument pos:start="85:53" pos:end="85:62"><expr pos:start="85:53" pos:end="85:62"><name pos:start="85:53" pos:end="85:62">bit_buffer</name></expr></argument>, <argument pos:start="85:65" pos:end="85:79"><expr pos:start="85:65" pos:end="85:79"><name pos:start="85:65" pos:end="85:79">bit_buffer_size</name></expr></argument>, <argument pos:start="85:82" pos:end="85:99"><expr pos:start="85:82" pos:end="85:99"><operator pos:start="85:82" pos:end="85:82">(</operator><name pos:start="85:83" pos:end="85:87">short</name> <operator pos:start="85:89" pos:end="85:89">*</operator><operator pos:start="85:90" pos:end="85:90">)</operator><name pos:start="85:91" pos:end="85:99">audio_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="87:21" pos:end="89:88"><expr pos:start="87:21" pos:end="89:87"><name pos:start="87:21" pos:end="87:32"><name pos:start="87:21" pos:end="87:23">pkt</name><operator pos:start="87:24" pos:end="87:24">.</operator><name pos:start="87:25" pos:end="87:32">duration</name></name> <operator pos:start="87:34" pos:end="87:34">=</operator> <call pos:start="87:36" pos:end="89:87"><name pos:start="87:36" pos:end="87:45">av_rescale</name><argument_list pos:start="87:46" pos:end="89:87">(<argument pos:start="87:47" pos:end="87:93"><expr pos:start="87:47" pos:end="87:93"><operator pos:start="87:47" pos:end="87:47">(</operator><name pos:start="87:48" pos:end="87:54">int64_t</name><operator pos:start="87:55" pos:end="87:55">)</operator><name pos:start="87:56" pos:end="87:70"><name pos:start="87:56" pos:end="87:58">enc</name><operator pos:start="87:59" pos:end="87:60">-&gt;</operator><name pos:start="87:61" pos:end="87:70">frame_size</name></name><operator pos:start="87:71" pos:end="87:71">*</operator><name pos:start="87:72" pos:end="87:93"><name pos:start="87:72" pos:end="87:74">ost</name><operator pos:start="87:75" pos:end="87:76">-&gt;</operator><name pos:start="87:77" pos:end="87:78">st</name><operator pos:start="87:79" pos:end="87:80">-&gt;</operator><name pos:start="87:81" pos:end="87:89">time_base</name><operator pos:start="87:90" pos:end="87:90">.</operator><name pos:start="87:91" pos:end="87:93">den</name></name></expr></argument>,

                                              <argument pos:start="89:47" pos:end="89:68"><expr pos:start="89:47" pos:end="89:68"><name pos:start="89:47" pos:end="89:68"><name pos:start="89:47" pos:end="89:49">ost</name><operator pos:start="89:50" pos:end="89:51">-&gt;</operator><name pos:start="89:52" pos:end="89:53">st</name><operator pos:start="89:54" pos:end="89:55">-&gt;</operator><name pos:start="89:56" pos:end="89:64">time_base</name><operator pos:start="89:65" pos:end="89:65">.</operator><name pos:start="89:66" pos:end="89:68">num</name></name></expr></argument>, <argument pos:start="89:71" pos:end="89:86"><expr pos:start="89:71" pos:end="89:86"><name pos:start="89:71" pos:end="89:86"><name pos:start="89:71" pos:end="89:73">enc</name><operator pos:start="89:74" pos:end="89:75">-&gt;</operator><name pos:start="89:76" pos:end="89:86">sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="91:21" pos:end="91:45"><expr pos:start="91:21" pos:end="91:44"><name pos:start="91:21" pos:end="91:35"><name pos:start="91:21" pos:end="91:23">enc</name><operator pos:start="91:24" pos:end="91:25">-&gt;</operator><name pos:start="91:26" pos:end="91:35">frame_size</name></name> <operator pos:start="91:37" pos:end="91:37">=</operator> <name pos:start="91:39" pos:end="91:44">fs_tmp</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="95:17" pos:end="99:17"><if pos:start="95:17" pos:end="99:17">if <condition pos:start="95:20" pos:end="95:29">(<expr pos:start="95:21" pos:end="95:28"><name pos:start="95:21" pos:end="95:23">ret</name> <operator pos:start="95:25" pos:end="95:26">&lt;=</operator> <literal type="number" pos:start="95:28" pos:end="95:28">0</literal></expr>)</condition> <block pos:start="95:31" pos:end="99:17">{<block_content pos:start="97:21" pos:end="97:87">

                    <expr_stmt pos:start="97:21" pos:end="97:87"><expr pos:start="97:21" pos:end="97:86"><name pos:start="97:21" pos:end="97:23">ret</name> <operator pos:start="97:25" pos:end="97:25">=</operator> <call pos:start="97:27" pos:end="97:86"><name pos:start="97:27" pos:end="97:46">avcodec_encode_audio</name><argument_list pos:start="97:47" pos:end="97:86">(<argument pos:start="97:48" pos:end="97:50"><expr pos:start="97:48" pos:end="97:50"><name pos:start="97:48" pos:end="97:50">enc</name></expr></argument>, <argument pos:start="97:53" pos:end="97:62"><expr pos:start="97:53" pos:end="97:62"><name pos:start="97:53" pos:end="97:62">bit_buffer</name></expr></argument>, <argument pos:start="97:65" pos:end="97:79"><expr pos:start="97:65" pos:end="97:79"><name pos:start="97:65" pos:end="97:79">bit_buffer_size</name></expr></argument>, <argument pos:start="97:82" pos:end="97:85"><expr pos:start="97:82" pos:end="97:85"><name pos:start="97:82" pos:end="97:85">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="101:17" pos:end="107:17"><if pos:start="101:17" pos:end="107:17">if <condition pos:start="101:20" pos:end="101:28">(<expr pos:start="101:21" pos:end="101:27"><name pos:start="101:21" pos:end="101:23">ret</name> <operator pos:start="101:25" pos:end="101:25">&lt;</operator> <literal type="number" pos:start="101:27" pos:end="101:27">0</literal></expr>)</condition> <block pos:start="101:30" pos:end="107:17">{<block_content pos:start="103:21" pos:end="105:36">

                    <expr_stmt pos:start="103:21" pos:end="103:74"><expr pos:start="103:21" pos:end="103:73"><call pos:start="103:21" pos:end="103:73"><name pos:start="103:21" pos:end="103:26">av_log</name><argument_list pos:start="103:27" pos:end="103:73">(<argument pos:start="103:28" pos:end="103:31"><expr pos:start="103:28" pos:end="103:31"><name pos:start="103:28" pos:end="103:31">NULL</name></expr></argument>, <argument pos:start="103:34" pos:end="103:45"><expr pos:start="103:34" pos:end="103:45"><name pos:start="103:34" pos:end="103:45">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="103:48" pos:end="103:72"><expr pos:start="103:48" pos:end="103:72"><literal type="string" pos:start="103:48" pos:end="103:72">"Audio encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:36"><expr pos:start="105:21" pos:end="105:35"><call pos:start="105:21" pos:end="105:35"><name pos:start="105:21" pos:end="105:32">exit_program</name><argument_list pos:start="105:33" pos:end="105:35">(<argument pos:start="105:34" pos:end="105:34"><expr pos:start="105:34" pos:end="105:34"><literal type="number" pos:start="105:34" pos:end="105:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="109:17" pos:end="109:34"><expr pos:start="109:17" pos:end="109:33"><name pos:start="109:17" pos:end="109:26">audio_size</name> <operator pos:start="109:28" pos:end="109:29">+=</operator> <name pos:start="109:31" pos:end="109:33">ret</name></expr>;</expr_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:45"><expr pos:start="111:17" pos:end="111:44"><name pos:start="111:17" pos:end="111:25"><name pos:start="111:17" pos:end="111:19">pkt</name><operator pos:start="111:20" pos:end="111:20">.</operator><name pos:start="111:21" pos:end="111:25">flags</name></name> <operator pos:start="111:27" pos:end="111:28">|=</operator> <name pos:start="111:30" pos:end="111:44">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

                <break pos:start="113:17" pos:end="113:22">break;</break>

            <case pos:start="115:13" pos:end="115:36">case <expr pos:start="115:18" pos:end="115:35"><name pos:start="115:18" pos:end="115:35">AVMEDIA_TYPE_VIDEO</name></expr>:</case>

                <expr_stmt pos:start="117:17" pos:end="117:83"><expr pos:start="117:17" pos:end="117:82"><name pos:start="117:17" pos:end="117:19">ret</name> <operator pos:start="117:21" pos:end="117:21">=</operator> <call pos:start="117:23" pos:end="117:82"><name pos:start="117:23" pos:end="117:42">avcodec_encode_video</name><argument_list pos:start="117:43" pos:end="117:82">(<argument pos:start="117:44" pos:end="117:46"><expr pos:start="117:44" pos:end="117:46"><name pos:start="117:44" pos:end="117:46">enc</name></expr></argument>, <argument pos:start="117:49" pos:end="117:58"><expr pos:start="117:49" pos:end="117:58"><name pos:start="117:49" pos:end="117:58">bit_buffer</name></expr></argument>, <argument pos:start="117:61" pos:end="117:75"><expr pos:start="117:61" pos:end="117:75"><name pos:start="117:61" pos:end="117:75">bit_buffer_size</name></expr></argument>, <argument pos:start="117:78" pos:end="117:81"><expr pos:start="117:78" pos:end="117:81"><name pos:start="117:78" pos:end="117:81">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="119:17" pos:end="125:17"><if pos:start="119:17" pos:end="125:17">if <condition pos:start="119:20" pos:end="119:28">(<expr pos:start="119:21" pos:end="119:27"><name pos:start="119:21" pos:end="119:23">ret</name> <operator pos:start="119:25" pos:end="119:25">&lt;</operator> <literal type="number" pos:start="119:27" pos:end="119:27">0</literal></expr>)</condition> <block pos:start="119:30" pos:end="125:17">{<block_content pos:start="121:21" pos:end="123:36">

                    <expr_stmt pos:start="121:21" pos:end="121:74"><expr pos:start="121:21" pos:end="121:73"><call pos:start="121:21" pos:end="121:73"><name pos:start="121:21" pos:end="121:26">av_log</name><argument_list pos:start="121:27" pos:end="121:73">(<argument pos:start="121:28" pos:end="121:31"><expr pos:start="121:28" pos:end="121:31"><name pos:start="121:28" pos:end="121:31">NULL</name></expr></argument>, <argument pos:start="121:34" pos:end="121:45"><expr pos:start="121:34" pos:end="121:45"><name pos:start="121:34" pos:end="121:45">AV_LOG_FATAL</name></expr></argument>, <argument pos:start="121:48" pos:end="121:72"><expr pos:start="121:48" pos:end="121:72"><literal type="string" pos:start="121:48" pos:end="121:72">"Video encoding failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="123:21" pos:end="123:36"><expr pos:start="123:21" pos:end="123:35"><call pos:start="123:21" pos:end="123:35"><name pos:start="123:21" pos:end="123:32">exit_program</name><argument_list pos:start="123:33" pos:end="123:35">(<argument pos:start="123:34" pos:end="123:34"><expr pos:start="123:34" pos:end="123:34"><literal type="number" pos:start="123:34" pos:end="123:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="127:17" pos:end="127:34"><expr pos:start="127:17" pos:end="127:33"><name pos:start="127:17" pos:end="127:26">video_size</name> <operator pos:start="127:28" pos:end="127:29">+=</operator> <name pos:start="127:31" pos:end="127:33">ret</name></expr>;</expr_stmt>

                <if_stmt pos:start="129:17" pos:end="131:49"><if pos:start="129:17" pos:end="131:49">if<condition pos:start="129:19" pos:end="129:67">(<expr pos:start="129:20" pos:end="129:66"><name pos:start="129:20" pos:end="129:35"><name pos:start="129:20" pos:end="129:22">enc</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:35">coded_frame</name></name> <operator pos:start="129:37" pos:end="129:38">&amp;&amp;</operator> <name pos:start="129:40" pos:end="129:66"><name pos:start="129:40" pos:end="129:42">enc</name><operator pos:start="129:43" pos:end="129:44">-&gt;</operator><name pos:start="129:45" pos:end="129:55">coded_frame</name><operator pos:start="129:56" pos:end="129:57">-&gt;</operator><name pos:start="129:58" pos:end="129:66">key_frame</name></name></expr>)</condition><block type="pseudo" pos:start="131:21" pos:end="131:49"><block_content pos:start="131:21" pos:end="131:49">

                    <expr_stmt pos:start="131:21" pos:end="131:49"><expr pos:start="131:21" pos:end="131:48"><name pos:start="131:21" pos:end="131:29"><name pos:start="131:21" pos:end="131:23">pkt</name><operator pos:start="131:24" pos:end="131:24">.</operator><name pos:start="131:25" pos:end="131:29">flags</name></name> <operator pos:start="131:31" pos:end="131:32">|=</operator> <name pos:start="131:34" pos:end="131:48">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="133:17" pos:end="137:17"><if pos:start="133:17" pos:end="137:17">if <condition pos:start="133:20" pos:end="133:51">(<expr pos:start="133:21" pos:end="133:50"><name pos:start="133:21" pos:end="133:32"><name pos:start="133:21" pos:end="133:23">ost</name><operator pos:start="133:24" pos:end="133:25">-&gt;</operator><name pos:start="133:26" pos:end="133:32">logfile</name></name> <operator pos:start="133:34" pos:end="133:35">&amp;&amp;</operator> <name pos:start="133:37" pos:end="133:50"><name pos:start="133:37" pos:end="133:39">enc</name><operator pos:start="133:40" pos:end="133:41">-&gt;</operator><name pos:start="133:42" pos:end="133:50">stats_out</name></name></expr>)</condition> <block pos:start="133:53" pos:end="137:17">{<block_content pos:start="135:21" pos:end="135:64">

                    <expr_stmt pos:start="135:21" pos:end="135:64"><expr pos:start="135:21" pos:end="135:63"><call pos:start="135:21" pos:end="135:63"><name pos:start="135:21" pos:end="135:27">fprintf</name><argument_list pos:start="135:28" pos:end="135:63">(<argument pos:start="135:29" pos:end="135:40"><expr pos:start="135:29" pos:end="135:40"><name pos:start="135:29" pos:end="135:40"><name pos:start="135:29" pos:end="135:31">ost</name><operator pos:start="135:32" pos:end="135:33">-&gt;</operator><name pos:start="135:34" pos:end="135:40">logfile</name></name></expr></argument>, <argument pos:start="135:43" pos:end="135:46"><expr pos:start="135:43" pos:end="135:46"><literal type="string" pos:start="135:43" pos:end="135:46">"%s"</literal></expr></argument>, <argument pos:start="135:49" pos:end="135:62"><expr pos:start="135:49" pos:end="135:62"><name pos:start="135:49" pos:end="135:62"><name pos:start="135:49" pos:end="135:51">enc</name><operator pos:start="135:52" pos:end="135:53">-&gt;</operator><name pos:start="135:54" pos:end="135:62">stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="139:17" pos:end="139:22">break;</break>

            <default pos:start="141:13" pos:end="141:20">default:</default>

                <expr_stmt pos:start="143:17" pos:end="143:23"><expr pos:start="143:17" pos:end="143:22"><name pos:start="143:17" pos:end="143:19">ret</name><operator pos:start="143:20" pos:end="143:20">=</operator><operator pos:start="143:21" pos:end="143:21">-</operator><literal type="number" pos:start="143:22" pos:end="143:22">1</literal></expr>;</expr_stmt>

            </block_content>}</block></switch>



            <if_stmt pos:start="149:13" pos:end="151:22"><if pos:start="149:13" pos:end="151:22">if <condition pos:start="149:16" pos:end="149:25">(<expr pos:start="149:17" pos:end="149:24"><name pos:start="149:17" pos:end="149:19">ret</name> <operator pos:start="149:21" pos:end="149:22">&lt;=</operator> <literal type="number" pos:start="149:24" pos:end="149:24">0</literal></expr>)</condition><block type="pseudo" pos:start="151:17" pos:end="151:22"><block_content pos:start="151:17" pos:end="151:22">

                <break pos:start="151:17" pos:end="151:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="153:13" pos:end="153:34"><expr pos:start="153:13" pos:end="153:33"><name pos:start="153:13" pos:end="153:20"><name pos:start="153:13" pos:end="153:15">pkt</name><operator pos:start="153:16" pos:end="153:16">.</operator><name pos:start="153:17" pos:end="153:20">data</name></name> <operator pos:start="153:22" pos:end="153:22">=</operator> <name pos:start="153:24" pos:end="153:33">bit_buffer</name></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:27"><expr pos:start="155:13" pos:end="155:26"><name pos:start="155:13" pos:end="155:20"><name pos:start="155:13" pos:end="155:15">pkt</name><operator pos:start="155:16" pos:end="155:16">.</operator><name pos:start="155:17" pos:end="155:20">size</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <name pos:start="155:24" pos:end="155:26">ret</name></expr>;</expr_stmt>

            <if_stmt pos:start="157:13" pos:end="159:97"><if pos:start="157:13" pos:end="159:97">if <condition pos:start="157:16" pos:end="157:76">(<expr pos:start="157:17" pos:end="157:75"><name pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:19">enc</name><operator pos:start="157:20" pos:end="157:21">-&gt;</operator><name pos:start="157:22" pos:end="157:32">coded_frame</name></name> <operator pos:start="157:34" pos:end="157:35">&amp;&amp;</operator> <name pos:start="157:37" pos:end="157:57"><name pos:start="157:37" pos:end="157:39">enc</name><operator pos:start="157:40" pos:end="157:41">-&gt;</operator><name pos:start="157:42" pos:end="157:52">coded_frame</name><operator pos:start="157:53" pos:end="157:54">-&gt;</operator><name pos:start="157:55" pos:end="157:57">pts</name></name> <operator pos:start="157:59" pos:end="157:60">!=</operator> <name pos:start="157:62" pos:end="157:75">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="159:17" pos:end="159:97"><block_content pos:start="159:17" pos:end="159:97">

                <expr_stmt pos:start="159:17" pos:end="159:97"><expr pos:start="159:17" pos:end="159:96"><name pos:start="159:17" pos:end="159:23"><name pos:start="159:17" pos:end="159:19">pkt</name><operator pos:start="159:20" pos:end="159:20">.</operator><name pos:start="159:21" pos:end="159:23">pts</name></name><operator pos:start="159:24" pos:end="159:24">=</operator> <call pos:start="159:26" pos:end="159:96"><name pos:start="159:26" pos:end="159:37">av_rescale_q</name><argument_list pos:start="159:38" pos:end="159:96">(<argument pos:start="159:39" pos:end="159:59"><expr pos:start="159:39" pos:end="159:59"><name pos:start="159:39" pos:end="159:59"><name pos:start="159:39" pos:end="159:41">enc</name><operator pos:start="159:42" pos:end="159:43">-&gt;</operator><name pos:start="159:44" pos:end="159:54">coded_frame</name><operator pos:start="159:55" pos:end="159:56">-&gt;</operator><name pos:start="159:57" pos:end="159:59">pts</name></name></expr></argument>, <argument pos:start="159:62" pos:end="159:75"><expr pos:start="159:62" pos:end="159:75"><name pos:start="159:62" pos:end="159:75"><name pos:start="159:62" pos:end="159:64">enc</name><operator pos:start="159:65" pos:end="159:66">-&gt;</operator><name pos:start="159:67" pos:end="159:75">time_base</name></name></expr></argument>, <argument pos:start="159:78" pos:end="159:95"><expr pos:start="159:78" pos:end="159:95"><name pos:start="159:78" pos:end="159:95"><name pos:start="159:78" pos:end="159:80">ost</name><operator pos:start="159:81" pos:end="159:82">-&gt;</operator><name pos:start="159:83" pos:end="159:84">st</name><operator pos:start="159:85" pos:end="159:86">-&gt;</operator><name pos:start="159:87" pos:end="159:95">time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:74"><expr pos:start="161:13" pos:end="161:73"><call pos:start="161:13" pos:end="161:73"><name pos:start="161:13" pos:end="161:23">write_frame</name><argument_list pos:start="161:24" pos:end="161:73">(<argument pos:start="161:25" pos:end="161:26"><expr pos:start="161:25" pos:end="161:26"><name pos:start="161:25" pos:end="161:26">os</name></expr></argument>, <argument pos:start="161:29" pos:end="161:32"><expr pos:start="161:29" pos:end="161:32"><operator pos:start="161:29" pos:end="161:29">&amp;</operator><name pos:start="161:30" pos:end="161:32">pkt</name></expr></argument>, <argument pos:start="161:35" pos:end="161:48"><expr pos:start="161:35" pos:end="161:48"><name pos:start="161:35" pos:end="161:48"><name pos:start="161:35" pos:end="161:37">ost</name><operator pos:start="161:38" pos:end="161:39">-&gt;</operator><name pos:start="161:40" pos:end="161:41">st</name><operator pos:start="161:42" pos:end="161:43">-&gt;</operator><name pos:start="161:44" pos:end="161:48">codec</name></name></expr></argument>, <argument pos:start="161:51" pos:end="161:72"><expr pos:start="161:51" pos:end="161:72"><name pos:start="161:51" pos:end="161:72"><name pos:start="161:51" pos:end="161:53">ost</name><operator pos:start="161:54" pos:end="161:55">-&gt;</operator><name pos:start="161:56" pos:end="161:72">bitstream_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
