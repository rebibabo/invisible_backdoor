<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16081.c" pos:tabs="8"><function pos:start="1:1" pos:end="59:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:27">pxa2xx_pm_write</name><parameter_list pos:start="1:28" pos:end="3:58">(<parameter pos:start="1:29" pos:end="1:40"><decl pos:start="1:29" pos:end="1:40"><type pos:start="1:29" pos:end="1:40"><name pos:start="1:29" pos:end="1:32">void</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:40">opaque</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:53"><decl pos:start="1:43" pos:end="1:53"><type pos:start="1:43" pos:end="1:53"><name pos:start="1:43" pos:end="1:48">hwaddr</name></type> <name pos:start="1:50" pos:end="1:53">addr</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint64_t</name></type> <name pos:start="3:38" pos:end="3:42">value</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">unsigned</name></type> <name pos:start="3:54" pos:end="3:57">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="59:1">{<block_content pos:start="7:5" pos:end="57:5">

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">PXA2xxState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:43">= <expr pos:start="7:22" pos:end="7:43"><operator pos:start="7:22" pos:end="7:22">(</operator><name pos:start="7:23" pos:end="7:33">PXA2xxState</name> <operator pos:start="7:35" pos:end="7:35">*</operator><operator pos:start="7:36" pos:end="7:36">)</operator> <name pos:start="7:38" pos:end="7:43">opaque</name></expr></init></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="57:5">switch <condition pos:start="11:12" pos:end="11:17">(<expr pos:start="11:13" pos:end="11:16"><name pos:start="11:13" pos:end="11:16">addr</name></expr>)</condition> <block pos:start="11:19" pos:end="57:5">{<block_content pos:start="13:5" pos:end="55:14">

    <case pos:start="13:5" pos:end="13:14">case <expr pos:start="13:10" pos:end="13:13"><name pos:start="13:10" pos:end="13:13">PMCR</name></expr>:</case>

        <comment type="block" pos:start="15:9" pos:end="15:50">/* Clear the write-one-to-clear bits... */</comment>

        <expr_stmt pos:start="17:9" pos:end="17:49"><expr pos:start="17:9" pos:end="17:48"><name pos:start="17:9" pos:end="17:29"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:18">pm_regs</name><index pos:start="17:19" pos:end="17:29">[<expr pos:start="17:20" pos:end="17:28"><name pos:start="17:20" pos:end="17:23">addr</name> <operator pos:start="17:25" pos:end="17:26">&gt;&gt;</operator> <literal type="number" pos:start="17:28" pos:end="17:28">2</literal></expr>]</index></name> <operator pos:start="17:31" pos:end="17:32">&amp;=</operator> <operator pos:start="17:34" pos:end="17:34">~</operator><operator pos:start="17:35" pos:end="17:35">(</operator><name pos:start="17:36" pos:end="17:40">value</name> <operator pos:start="17:42" pos:end="17:42">&amp;</operator> <literal type="number" pos:start="17:44" pos:end="17:47">0x2a</literal><operator pos:start="17:48" pos:end="17:48">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="19:9" pos:end="19:43">/* ...and set the plain r/w bits */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:39"><expr pos:start="21:9" pos:end="21:38"><name pos:start="21:9" pos:end="21:29"><name pos:start="21:9" pos:end="21:9">s</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:18">pm_regs</name><index pos:start="21:19" pos:end="21:29">[<expr pos:start="21:20" pos:end="21:28"><name pos:start="21:20" pos:end="21:23">addr</name> <operator pos:start="21:25" pos:end="21:26">&gt;&gt;</operator> <literal type="number" pos:start="21:28" pos:end="21:28">2</literal></expr>]</index></name> <operator pos:start="21:31" pos:end="21:32">&amp;=</operator> <operator pos:start="21:34" pos:end="21:34">~</operator><literal type="number" pos:start="21:35" pos:end="21:38">0x15</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:46"><expr pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:9">s</name><operator pos:start="23:10" pos:end="23:11">-&gt;</operator><name pos:start="23:12" pos:end="23:18">pm_regs</name><index pos:start="23:19" pos:end="23:29">[<expr pos:start="23:20" pos:end="23:28"><name pos:start="23:20" pos:end="23:23">addr</name> <operator pos:start="23:25" pos:end="23:26">&gt;&gt;</operator> <literal type="number" pos:start="23:28" pos:end="23:28">2</literal></expr>]</index></name> <operator pos:start="23:31" pos:end="23:32">|=</operator> <name pos:start="23:34" pos:end="23:38">value</name> <operator pos:start="23:40" pos:end="23:40">&amp;</operator> <literal type="number" pos:start="23:42" pos:end="23:45">0x15</literal></expr>;</expr_stmt>

        <break pos:start="25:9" pos:end="25:14">break;</break>



    <case pos:start="29:5" pos:end="29:14">case <expr pos:start="29:10" pos:end="29:13"><name pos:start="29:10" pos:end="29:13">PSSR</name></expr>:</case>	<comment type="block" pos:start="29:17" pos:end="29:42">/* Read-clean registers */</comment>

    <case pos:start="31:5" pos:end="31:14">case <expr pos:start="31:10" pos:end="31:13"><name pos:start="31:10" pos:end="31:13">RCSR</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:14">case <expr pos:start="33:10" pos:end="33:13"><name pos:start="33:10" pos:end="33:13">PKSR</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:40"><expr pos:start="35:9" pos:end="35:39"><name pos:start="35:9" pos:end="35:29"><name pos:start="35:9" pos:end="35:9">s</name><operator pos:start="35:10" pos:end="35:11">-&gt;</operator><name pos:start="35:12" pos:end="35:18">pm_regs</name><index pos:start="35:19" pos:end="35:29">[<expr pos:start="35:20" pos:end="35:28"><name pos:start="35:20" pos:end="35:23">addr</name> <operator pos:start="35:25" pos:end="35:26">&gt;&gt;</operator> <literal type="number" pos:start="35:28" pos:end="35:28">2</literal></expr>]</index></name> <operator pos:start="35:31" pos:end="35:32">&amp;=</operator> <operator pos:start="35:34" pos:end="35:34">~</operator><name pos:start="35:35" pos:end="35:39">value</name></expr>;</expr_stmt>

        <break pos:start="37:9" pos:end="37:14">break;</break>



    <default pos:start="41:5" pos:end="41:12">default:</default>	<comment type="block" pos:start="41:17" pos:end="41:42">/* Read-write registers */</comment>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:24">(<expr pos:start="43:13" pos:end="43:23"><operator pos:start="43:13" pos:end="43:13">!</operator><operator pos:start="43:14" pos:end="43:14">(</operator><name pos:start="43:15" pos:end="43:18">addr</name> <operator pos:start="43:20" pos:end="43:20">&amp;</operator> <literal type="number" pos:start="43:22" pos:end="43:22">3</literal><operator pos:start="43:23" pos:end="43:23">)</operator></expr>)</condition> <block pos:start="43:26" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:18">

            <expr_stmt pos:start="45:13" pos:end="45:42"><expr pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:33"><name pos:start="45:13" pos:end="45:13">s</name><operator pos:start="45:14" pos:end="45:15">-&gt;</operator><name pos:start="45:16" pos:end="45:22">pm_regs</name><index pos:start="45:23" pos:end="45:33">[<expr pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:27">addr</name> <operator pos:start="45:29" pos:end="45:30">&gt;&gt;</operator> <literal type="number" pos:start="45:32" pos:end="45:32">2</literal></expr>]</index></name> <operator pos:start="45:35" pos:end="45:35">=</operator> <name pos:start="45:37" pos:end="45:41">value</name></expr>;</expr_stmt>

            <break pos:start="47:13" pos:end="47:18">break;</break>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:69"><expr pos:start="53:9" pos:end="53:68"><call pos:start="53:9" pos:end="53:68"><name pos:start="53:9" pos:end="53:14">printf</name><argument_list pos:start="53:15" pos:end="53:68">(<argument pos:start="53:16" pos:end="53:47"><expr pos:start="53:16" pos:end="53:47"><literal type="string" pos:start="53:16" pos:end="53:34">"%s: Bad register "</literal> <name pos:start="53:36" pos:end="53:42">REG_FMT</name> <literal type="string" pos:start="53:44" pos:end="53:47">"\n"</literal></expr></argument>, <argument pos:start="53:50" pos:end="53:61"><expr pos:start="53:50" pos:end="53:61"><name pos:start="53:50" pos:end="53:61">__FUNCTION__</name></expr></argument>, <argument pos:start="53:64" pos:end="53:67"><expr pos:start="53:64" pos:end="53:67"><name pos:start="53:64" pos:end="53:67">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
