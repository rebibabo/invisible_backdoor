<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/22731.c" pos:tabs="8"><function pos:start="1:1" pos:end="587:1"><type pos:start="1:1" pos:end="1:11"><name pos:start="1:1" pos:end="1:9">DriveInfo</name> <modifier pos:start="1:11" pos:end="1:11">*</modifier></type><name pos:start="1:12" pos:end="1:21">drive_init</name><parameter_list pos:start="1:22" pos:end="1:80">(<parameter pos:start="1:23" pos:end="1:40"><decl pos:start="1:23" pos:end="1:40"><type pos:start="1:23" pos:end="1:40"><name pos:start="1:23" pos:end="1:30">QemuOpts</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:40">all_opts</name></decl></parameter>, <parameter pos:start="1:43" pos:end="1:79"><decl pos:start="1:43" pos:end="1:79"><type pos:start="1:43" pos:end="1:79"><name pos:start="1:43" pos:end="1:60">BlockInterfaceType</name></type> <name pos:start="1:62" pos:end="1:79">block_default_type</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="587:1">{<block_content pos:start="5:5" pos:end="585:17">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:21"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:21">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:28"><decl pos:start="7:5" pos:end="7:27"><type pos:start="7:5" pos:end="7:15"><name pos:start="7:5" pos:end="7:13">DriveInfo</name> <modifier pos:start="7:15" pos:end="7:15">*</modifier></type><name pos:start="7:16" pos:end="7:20">dinfo</name> <init pos:start="7:22" pos:end="7:27">= <expr pos:start="7:24" pos:end="7:27"><name pos:start="7:24" pos:end="7:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">QDict</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:18">bs_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:14"><name pos:start="11:5" pos:end="11:12">QemuOpts</name> <modifier pos:start="11:14" pos:end="11:14">*</modifier></type><name pos:start="11:15" pos:end="11:25">legacy_opts</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:38"><decl pos:start="13:5" pos:end="13:37"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:18">DriveMediaType</name></type> <name pos:start="13:20" pos:end="13:24">media</name> <init pos:start="13:26" pos:end="13:37">= <expr pos:start="13:28" pos:end="13:37"><name pos:start="13:28" pos:end="13:37">MEDIA_DISK</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:22">BlockInterfaceType</name></type> <name pos:start="15:24" pos:end="15:27">type</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:39"><decl pos:start="17:5" pos:end="17:12"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:12">cyls</name></decl>, <decl pos:start="17:15" pos:end="17:19"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:15" pos:end="17:19">heads</name></decl>, <decl pos:start="17:22" pos:end="17:25"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:22" pos:end="17:25">secs</name></decl>, <decl pos:start="17:28" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:28" pos:end="17:38">translation</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:41"><decl pos:start="19:5" pos:end="19:16"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:16">max_devs</name></decl>, <decl pos:start="19:19" pos:end="19:24"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:19" pos:end="19:24">bus_id</name></decl>, <decl pos:start="19:27" pos:end="19:33"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:27" pos:end="19:33">unit_id</name></decl>, <decl pos:start="19:36" pos:end="19:40"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:36" pos:end="19:40">index</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:16"><specifier pos:start="21:5" pos:end="21:9">const</specifier> <name pos:start="21:11" pos:end="21:14">char</name> <modifier pos:start="21:16" pos:end="21:16">*</modifier></type><name pos:start="21:17" pos:end="21:23">devaddr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:27"><decl pos:start="23:5" pos:end="23:26"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">bool</name></type> <name pos:start="23:10" pos:end="23:18">read_only</name> <init pos:start="23:20" pos:end="23:26">= <expr pos:start="23:22" pos:end="23:26"><name pos:start="23:22" pos:end="23:26">false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:22"><decl pos:start="25:5" pos:end="25:21"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">bool</name></type> <name pos:start="25:10" pos:end="25:21">copy_on_read</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:25"><decl pos:start="27:5" pos:end="27:24"><type pos:start="27:5" pos:end="27:16"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:14">char</name> <modifier pos:start="27:16" pos:end="27:16">*</modifier></type><name pos:start="27:17" pos:end="27:24">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:28"><decl pos:start="29:5" pos:end="29:27"><type pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9">Error</name> <modifier pos:start="29:11" pos:end="29:11">*</modifier></type><name pos:start="29:12" pos:end="29:20">local_err</name> <init pos:start="29:22" pos:end="29:27">= <expr pos:start="29:24" pos:end="29:27"><name pos:start="29:24" pos:end="29:27">NULL</name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="33:5" pos:end="33:58">/* Change legacy command line options into QMP ones */</comment>

    <expr_stmt pos:start="35:5" pos:end="35:63"><expr pos:start="35:5" pos:end="35:62"><call pos:start="35:5" pos:end="35:62"><name pos:start="35:5" pos:end="35:19">qemu_opt_rename</name><argument_list pos:start="35:20" pos:end="35:62">(<argument pos:start="35:21" pos:end="35:28"><expr pos:start="35:21" pos:end="35:28"><name pos:start="35:21" pos:end="35:28">all_opts</name></expr></argument>, <argument pos:start="35:31" pos:end="35:36"><expr pos:start="35:31" pos:end="35:36"><literal type="string" pos:start="35:31" pos:end="35:36">"iops"</literal></expr></argument>, <argument pos:start="35:39" pos:end="35:61"><expr pos:start="35:39" pos:end="35:61"><literal type="string" pos:start="35:39" pos:end="35:61">"throttling.iops-total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:65"><expr pos:start="37:5" pos:end="37:64"><call pos:start="37:5" pos:end="37:64"><name pos:start="37:5" pos:end="37:19">qemu_opt_rename</name><argument_list pos:start="37:20" pos:end="37:64">(<argument pos:start="37:21" pos:end="37:28"><expr pos:start="37:21" pos:end="37:28"><name pos:start="37:21" pos:end="37:28">all_opts</name></expr></argument>, <argument pos:start="37:31" pos:end="37:39"><expr pos:start="37:31" pos:end="37:39"><literal type="string" pos:start="37:31" pos:end="37:39">"iops_rd"</literal></expr></argument>, <argument pos:start="37:42" pos:end="37:63"><expr pos:start="37:42" pos:end="37:63"><literal type="string" pos:start="37:42" pos:end="37:63">"throttling.iops-read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:66"><expr pos:start="39:5" pos:end="39:65"><call pos:start="39:5" pos:end="39:65"><name pos:start="39:5" pos:end="39:19">qemu_opt_rename</name><argument_list pos:start="39:20" pos:end="39:65">(<argument pos:start="39:21" pos:end="39:28"><expr pos:start="39:21" pos:end="39:28"><name pos:start="39:21" pos:end="39:28">all_opts</name></expr></argument>, <argument pos:start="39:31" pos:end="39:39"><expr pos:start="39:31" pos:end="39:39"><literal type="string" pos:start="39:31" pos:end="39:39">"iops_wr"</literal></expr></argument>, <argument pos:start="39:42" pos:end="39:64"><expr pos:start="39:42" pos:end="39:64"><literal type="string" pos:start="39:42" pos:end="39:64">"throttling.iops-write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:61"><expr pos:start="43:5" pos:end="43:60"><call pos:start="43:5" pos:end="43:60"><name pos:start="43:5" pos:end="43:19">qemu_opt_rename</name><argument_list pos:start="43:20" pos:end="43:60">(<argument pos:start="43:21" pos:end="43:28"><expr pos:start="43:21" pos:end="43:28"><name pos:start="43:21" pos:end="43:28">all_opts</name></expr></argument>, <argument pos:start="43:31" pos:end="43:35"><expr pos:start="43:31" pos:end="43:35"><literal type="string" pos:start="43:31" pos:end="43:35">"bps"</literal></expr></argument>, <argument pos:start="43:38" pos:end="43:59"><expr pos:start="43:38" pos:end="43:59"><literal type="string" pos:start="43:38" pos:end="43:59">"throttling.bps-total"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:63"><expr pos:start="45:5" pos:end="45:62"><call pos:start="45:5" pos:end="45:62"><name pos:start="45:5" pos:end="45:19">qemu_opt_rename</name><argument_list pos:start="45:20" pos:end="45:62">(<argument pos:start="45:21" pos:end="45:28"><expr pos:start="45:21" pos:end="45:28"><name pos:start="45:21" pos:end="45:28">all_opts</name></expr></argument>, <argument pos:start="45:31" pos:end="45:38"><expr pos:start="45:31" pos:end="45:38"><literal type="string" pos:start="45:31" pos:end="45:38">"bps_rd"</literal></expr></argument>, <argument pos:start="45:41" pos:end="45:61"><expr pos:start="45:41" pos:end="45:61"><literal type="string" pos:start="45:41" pos:end="45:61">"throttling.bps-read"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:64"><expr pos:start="47:5" pos:end="47:63"><call pos:start="47:5" pos:end="47:63"><name pos:start="47:5" pos:end="47:19">qemu_opt_rename</name><argument_list pos:start="47:20" pos:end="47:63">(<argument pos:start="47:21" pos:end="47:28"><expr pos:start="47:21" pos:end="47:28"><name pos:start="47:21" pos:end="47:28">all_opts</name></expr></argument>, <argument pos:start="47:31" pos:end="47:38"><expr pos:start="47:31" pos:end="47:38"><literal type="string" pos:start="47:31" pos:end="47:38">"bps_wr"</literal></expr></argument>, <argument pos:start="47:41" pos:end="47:62"><expr pos:start="47:41" pos:end="47:62"><literal type="string" pos:start="47:41" pos:end="47:62">"throttling.bps-write"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><call pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:19">qemu_opt_rename</name><argument_list pos:start="51:20" pos:end="51:70">(<argument pos:start="51:21" pos:end="51:28"><expr pos:start="51:21" pos:end="51:28"><name pos:start="51:21" pos:end="51:28">all_opts</name></expr></argument>, <argument pos:start="51:31" pos:end="51:40"><expr pos:start="51:31" pos:end="51:40"><literal type="string" pos:start="51:31" pos:end="51:40">"iops_max"</literal></expr></argument>, <argument pos:start="51:43" pos:end="51:69"><expr pos:start="51:43" pos:end="51:69"><literal type="string" pos:start="51:43" pos:end="51:69">"throttling.iops-total-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:73"><expr pos:start="53:5" pos:end="53:72"><call pos:start="53:5" pos:end="53:72"><name pos:start="53:5" pos:end="53:19">qemu_opt_rename</name><argument_list pos:start="53:20" pos:end="53:72">(<argument pos:start="53:21" pos:end="53:28"><expr pos:start="53:21" pos:end="53:28"><name pos:start="53:21" pos:end="53:28">all_opts</name></expr></argument>, <argument pos:start="53:31" pos:end="53:43"><expr pos:start="53:31" pos:end="53:43"><literal type="string" pos:start="53:31" pos:end="53:43">"iops_rd_max"</literal></expr></argument>, <argument pos:start="53:46" pos:end="53:71"><expr pos:start="53:46" pos:end="53:71"><literal type="string" pos:start="53:46" pos:end="53:71">"throttling.iops-read-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:74"><expr pos:start="55:5" pos:end="55:73"><call pos:start="55:5" pos:end="55:73"><name pos:start="55:5" pos:end="55:19">qemu_opt_rename</name><argument_list pos:start="55:20" pos:end="55:73">(<argument pos:start="55:21" pos:end="55:28"><expr pos:start="55:21" pos:end="55:28"><name pos:start="55:21" pos:end="55:28">all_opts</name></expr></argument>, <argument pos:start="55:31" pos:end="55:43"><expr pos:start="55:31" pos:end="55:43"><literal type="string" pos:start="55:31" pos:end="55:43">"iops_wr_max"</literal></expr></argument>, <argument pos:start="55:46" pos:end="55:72"><expr pos:start="55:46" pos:end="55:72"><literal type="string" pos:start="55:46" pos:end="55:72">"throttling.iops-write-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="59:5" pos:end="59:69"><expr pos:start="59:5" pos:end="59:68"><call pos:start="59:5" pos:end="59:68"><name pos:start="59:5" pos:end="59:19">qemu_opt_rename</name><argument_list pos:start="59:20" pos:end="59:68">(<argument pos:start="59:21" pos:end="59:28"><expr pos:start="59:21" pos:end="59:28"><name pos:start="59:21" pos:end="59:28">all_opts</name></expr></argument>, <argument pos:start="59:31" pos:end="59:39"><expr pos:start="59:31" pos:end="59:39"><literal type="string" pos:start="59:31" pos:end="59:39">"bps_max"</literal></expr></argument>, <argument pos:start="59:42" pos:end="59:67"><expr pos:start="59:42" pos:end="59:67"><literal type="string" pos:start="59:42" pos:end="59:67">"throttling.bps-total-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:71"><expr pos:start="61:5" pos:end="61:70"><call pos:start="61:5" pos:end="61:70"><name pos:start="61:5" pos:end="61:19">qemu_opt_rename</name><argument_list pos:start="61:20" pos:end="61:70">(<argument pos:start="61:21" pos:end="61:28"><expr pos:start="61:21" pos:end="61:28"><name pos:start="61:21" pos:end="61:28">all_opts</name></expr></argument>, <argument pos:start="61:31" pos:end="61:42"><expr pos:start="61:31" pos:end="61:42"><literal type="string" pos:start="61:31" pos:end="61:42">"bps_rd_max"</literal></expr></argument>, <argument pos:start="61:45" pos:end="61:69"><expr pos:start="61:45" pos:end="61:69"><literal type="string" pos:start="61:45" pos:end="61:69">"throttling.bps-read-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:72"><expr pos:start="63:5" pos:end="63:71"><call pos:start="63:5" pos:end="63:71"><name pos:start="63:5" pos:end="63:19">qemu_opt_rename</name><argument_list pos:start="63:20" pos:end="63:71">(<argument pos:start="63:21" pos:end="63:28"><expr pos:start="63:21" pos:end="63:28"><name pos:start="63:21" pos:end="63:28">all_opts</name></expr></argument>, <argument pos:start="63:31" pos:end="63:42"><expr pos:start="63:31" pos:end="63:42"><literal type="string" pos:start="63:31" pos:end="63:42">"bps_wr_max"</literal></expr></argument>, <argument pos:start="63:45" pos:end="63:70"><expr pos:start="63:45" pos:end="63:70"><literal type="string" pos:start="63:45" pos:end="63:70">"throttling.bps-write-max"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="67:5" pos:end="69:57"><expr pos:start="67:5" pos:end="69:56"><call pos:start="67:5" pos:end="69:56"><name pos:start="67:5" pos:end="67:19">qemu_opt_rename</name><argument_list pos:start="67:20" pos:end="69:56">(<argument pos:start="67:21" pos:end="67:28"><expr pos:start="67:21" pos:end="67:28"><name pos:start="67:21" pos:end="67:28">all_opts</name></expr></argument>,

                    <argument pos:start="69:21" pos:end="69:31"><expr pos:start="69:21" pos:end="69:31"><literal type="string" pos:start="69:21" pos:end="69:31">"iops_size"</literal></expr></argument>, <argument pos:start="69:34" pos:end="69:55"><expr pos:start="69:34" pos:end="69:55"><literal type="string" pos:start="69:34" pos:end="69:55">"throttling.iops-size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:55"><expr pos:start="73:5" pos:end="73:54"><call pos:start="73:5" pos:end="73:54"><name pos:start="73:5" pos:end="73:19">qemu_opt_rename</name><argument_list pos:start="73:20" pos:end="73:54">(<argument pos:start="73:21" pos:end="73:28"><expr pos:start="73:21" pos:end="73:28"><name pos:start="73:21" pos:end="73:28">all_opts</name></expr></argument>, <argument pos:start="73:31" pos:end="73:40"><expr pos:start="73:31" pos:end="73:40"><literal type="string" pos:start="73:31" pos:end="73:40">"readonly"</literal></expr></argument>, <argument pos:start="73:43" pos:end="73:53"><expr pos:start="73:43" pos:end="73:53"><literal type="string" pos:start="73:43" pos:end="73:53">"read-only"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:44"><expr pos:start="77:5" pos:end="77:43"><name pos:start="77:5" pos:end="77:9">value</name> <operator pos:start="77:11" pos:end="77:11">=</operator> <call pos:start="77:13" pos:end="77:43"><name pos:start="77:13" pos:end="77:24">qemu_opt_get</name><argument_list pos:start="77:25" pos:end="77:43">(<argument pos:start="77:26" pos:end="77:33"><expr pos:start="77:26" pos:end="77:33"><name pos:start="77:26" pos:end="77:33">all_opts</name></expr></argument>, <argument pos:start="77:36" pos:end="77:42"><expr pos:start="77:36" pos:end="77:42"><literal type="string" pos:start="77:36" pos:end="77:42">"cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="123:5"><if pos:start="79:5" pos:end="123:5">if <condition pos:start="79:8" pos:end="79:14">(<expr pos:start="79:9" pos:end="79:13"><name pos:start="79:9" pos:end="79:13">value</name></expr>)</condition> <block pos:start="79:16" pos:end="123:5">{<block_content pos:start="81:9" pos:end="121:42">

        <decl_stmt pos:start="81:9" pos:end="81:22"><decl pos:start="81:9" pos:end="81:21"><type pos:start="81:9" pos:end="81:11"><name pos:start="81:9" pos:end="81:11">int</name></type> <name pos:start="81:13" pos:end="81:17">flags</name> <init pos:start="81:19" pos:end="81:21">= <expr pos:start="81:21" pos:end="81:21"><literal type="number" pos:start="81:21" pos:end="81:21">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="85:9" pos:end="91:9"><if pos:start="85:9" pos:end="91:9">if <condition pos:start="85:12" pos:end="85:55">(<expr pos:start="85:13" pos:end="85:54"><call pos:start="85:13" pos:end="85:49"><name pos:start="85:13" pos:end="85:34">bdrv_parse_cache_flags</name><argument_list pos:start="85:35" pos:end="85:49">(<argument pos:start="85:36" pos:end="85:40"><expr pos:start="85:36" pos:end="85:40"><name pos:start="85:36" pos:end="85:40">value</name></expr></argument>, <argument pos:start="85:43" pos:end="85:48"><expr pos:start="85:43" pos:end="85:48"><operator pos:start="85:43" pos:end="85:43">&amp;</operator><name pos:start="85:44" pos:end="85:48">flags</name></expr></argument>)</argument_list></call> <operator pos:start="85:51" pos:end="85:52">!=</operator> <literal type="number" pos:start="85:54" pos:end="85:54">0</literal></expr>)</condition> <block pos:start="85:57" pos:end="91:9">{<block_content pos:start="87:13" pos:end="89:24">

            <expr_stmt pos:start="87:13" pos:end="87:49"><expr pos:start="87:13" pos:end="87:48"><call pos:start="87:13" pos:end="87:48"><name pos:start="87:13" pos:end="87:24">error_report</name><argument_list pos:start="87:25" pos:end="87:48">(<argument pos:start="87:26" pos:end="87:47"><expr pos:start="87:26" pos:end="87:47"><literal type="string" pos:start="87:26" pos:end="87:47">"invalid cache option"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="89:13" pos:end="89:24">return <expr pos:start="89:20" pos:end="89:23"><name pos:start="89:20" pos:end="89:23">NULL</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="95:9" pos:end="95:46">/* Specific options take precedence */</comment>

        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:55">(<expr pos:start="97:13" pos:end="97:54"><operator pos:start="97:13" pos:end="97:13">!</operator><call pos:start="97:14" pos:end="97:54"><name pos:start="97:14" pos:end="97:25">qemu_opt_get</name><argument_list pos:start="97:26" pos:end="97:54">(<argument pos:start="97:27" pos:end="97:34"><expr pos:start="97:27" pos:end="97:34"><name pos:start="97:27" pos:end="97:34">all_opts</name></expr></argument>, <argument pos:start="97:37" pos:end="97:53"><expr pos:start="97:37" pos:end="97:53"><literal type="string" pos:start="97:37" pos:end="97:53">"cache.writeback"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="97:57" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:59">

            <expr_stmt pos:start="99:13" pos:end="101:59"><expr pos:start="99:13" pos:end="101:58"><call pos:start="99:13" pos:end="101:58"><name pos:start="99:13" pos:end="99:29">qemu_opt_set_bool</name><argument_list pos:start="99:30" pos:end="101:58">(<argument pos:start="99:31" pos:end="99:38"><expr pos:start="99:31" pos:end="99:38"><name pos:start="99:31" pos:end="99:38">all_opts</name></expr></argument>, <argument pos:start="99:41" pos:end="99:57"><expr pos:start="99:41" pos:end="99:57"><literal type="string" pos:start="99:41" pos:end="99:57">"cache.writeback"</literal></expr></argument>,

                              <argument pos:start="101:31" pos:end="101:57"><expr pos:start="101:31" pos:end="101:57"><operator pos:start="101:31" pos:end="101:31">!</operator><operator pos:start="101:32" pos:end="101:32">!</operator><operator pos:start="101:33" pos:end="101:33">(</operator><name pos:start="101:34" pos:end="101:38">flags</name> <operator pos:start="101:40" pos:end="101:40">&amp;</operator> <name pos:start="101:42" pos:end="101:56">BDRV_O_CACHE_WB</name><operator pos:start="101:57" pos:end="101:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="111:9"><if pos:start="105:9" pos:end="111:9">if <condition pos:start="105:12" pos:end="105:52">(<expr pos:start="105:13" pos:end="105:51"><operator pos:start="105:13" pos:end="105:13">!</operator><call pos:start="105:14" pos:end="105:51"><name pos:start="105:14" pos:end="105:25">qemu_opt_get</name><argument_list pos:start="105:26" pos:end="105:51">(<argument pos:start="105:27" pos:end="105:34"><expr pos:start="105:27" pos:end="105:34"><name pos:start="105:27" pos:end="105:34">all_opts</name></expr></argument>, <argument pos:start="105:37" pos:end="105:50"><expr pos:start="105:37" pos:end="105:50"><literal type="string" pos:start="105:37" pos:end="105:50">"cache.direct"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:54" pos:end="111:9">{<block_content pos:start="107:13" pos:end="109:58">

            <expr_stmt pos:start="107:13" pos:end="109:58"><expr pos:start="107:13" pos:end="109:57"><call pos:start="107:13" pos:end="109:57"><name pos:start="107:13" pos:end="107:29">qemu_opt_set_bool</name><argument_list pos:start="107:30" pos:end="109:57">(<argument pos:start="107:31" pos:end="107:38"><expr pos:start="107:31" pos:end="107:38"><name pos:start="107:31" pos:end="107:38">all_opts</name></expr></argument>, <argument pos:start="107:41" pos:end="107:54"><expr pos:start="107:41" pos:end="107:54"><literal type="string" pos:start="107:41" pos:end="107:54">"cache.direct"</literal></expr></argument>,

                              <argument pos:start="109:31" pos:end="109:56"><expr pos:start="109:31" pos:end="109:56"><operator pos:start="109:31" pos:end="109:31">!</operator><operator pos:start="109:32" pos:end="109:32">!</operator><operator pos:start="109:33" pos:end="109:33">(</operator><name pos:start="109:34" pos:end="109:38">flags</name> <operator pos:start="109:40" pos:end="109:40">&amp;</operator> <name pos:start="109:42" pos:end="109:55">BDRV_O_NOCACHE</name><operator pos:start="109:56" pos:end="109:56">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="113:9" pos:end="119:9"><if pos:start="113:9" pos:end="119:9">if <condition pos:start="113:12" pos:end="113:54">(<expr pos:start="113:13" pos:end="113:53"><operator pos:start="113:13" pos:end="113:13">!</operator><call pos:start="113:14" pos:end="113:53"><name pos:start="113:14" pos:end="113:25">qemu_opt_get</name><argument_list pos:start="113:26" pos:end="113:53">(<argument pos:start="113:27" pos:end="113:34"><expr pos:start="113:27" pos:end="113:34"><name pos:start="113:27" pos:end="113:34">all_opts</name></expr></argument>, <argument pos:start="113:37" pos:end="113:52"><expr pos:start="113:37" pos:end="113:52"><literal type="string" pos:start="113:37" pos:end="113:52">"cache.no-flush"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="113:56" pos:end="119:9">{<block_content pos:start="115:13" pos:end="117:59">

            <expr_stmt pos:start="115:13" pos:end="117:59"><expr pos:start="115:13" pos:end="117:58"><call pos:start="115:13" pos:end="117:58"><name pos:start="115:13" pos:end="115:29">qemu_opt_set_bool</name><argument_list pos:start="115:30" pos:end="117:58">(<argument pos:start="115:31" pos:end="115:38"><expr pos:start="115:31" pos:end="115:38"><name pos:start="115:31" pos:end="115:38">all_opts</name></expr></argument>, <argument pos:start="115:41" pos:end="115:56"><expr pos:start="115:41" pos:end="115:56"><literal type="string" pos:start="115:41" pos:end="115:56">"cache.no-flush"</literal></expr></argument>,

                              <argument pos:start="117:31" pos:end="117:57"><expr pos:start="117:31" pos:end="117:57"><operator pos:start="117:31" pos:end="117:31">!</operator><operator pos:start="117:32" pos:end="117:32">!</operator><operator pos:start="117:33" pos:end="117:33">(</operator><name pos:start="117:34" pos:end="117:38">flags</name> <operator pos:start="117:40" pos:end="117:40">&amp;</operator> <name pos:start="117:42" pos:end="117:56">BDRV_O_NO_FLUSH</name><operator pos:start="117:57" pos:end="117:57">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:42"><expr pos:start="121:9" pos:end="121:41"><call pos:start="121:9" pos:end="121:41"><name pos:start="121:9" pos:end="121:22">qemu_opt_unset</name><argument_list pos:start="121:23" pos:end="121:41">(<argument pos:start="121:24" pos:end="121:31"><expr pos:start="121:24" pos:end="121:31"><name pos:start="121:24" pos:end="121:31">all_opts</name></expr></argument>, <argument pos:start="121:34" pos:end="121:40"><expr pos:start="121:34" pos:end="121:40"><literal type="string" pos:start="121:34" pos:end="121:40">"cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="127:5" pos:end="127:48">/* Get a QDict for processing the options */</comment>

    <expr_stmt pos:start="129:5" pos:end="129:26"><expr pos:start="129:5" pos:end="129:25"><name pos:start="129:5" pos:end="129:11">bs_opts</name> <operator pos:start="129:13" pos:end="129:13">=</operator> <call pos:start="129:15" pos:end="129:25"><name pos:start="129:15" pos:end="129:23">qdict_new</name><argument_list pos:start="129:24" pos:end="129:25">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:42"><expr pos:start="131:5" pos:end="131:41"><call pos:start="131:5" pos:end="131:41"><name pos:start="131:5" pos:end="131:22">qemu_opts_to_qdict</name><argument_list pos:start="131:23" pos:end="131:41">(<argument pos:start="131:24" pos:end="131:31"><expr pos:start="131:24" pos:end="131:31"><name pos:start="131:24" pos:end="131:31">all_opts</name></expr></argument>, <argument pos:start="131:34" pos:end="131:40"><expr pos:start="131:34" pos:end="131:40"><name pos:start="131:34" pos:end="131:40">bs_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="137:49"><expr pos:start="135:5" pos:end="137:48"><name pos:start="135:5" pos:end="135:15">legacy_opts</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <call pos:start="135:19" pos:end="137:48"><name pos:start="135:19" pos:end="135:34">qemu_opts_create</name><argument_list pos:start="135:35" pos:end="137:48">(<argument pos:start="135:36" pos:end="135:58"><expr pos:start="135:36" pos:end="135:58"><operator pos:start="135:36" pos:end="135:36">&amp;</operator><name pos:start="135:37" pos:end="135:58">qemu_legacy_drive_opts</name></expr></argument>, <argument pos:start="135:61" pos:end="135:64"><expr pos:start="135:61" pos:end="135:64"><name pos:start="135:61" pos:end="135:64">NULL</name></expr></argument>, <argument pos:start="135:67" pos:end="135:67"><expr pos:start="135:67" pos:end="135:67"><literal type="number" pos:start="135:67" pos:end="135:67">0</literal></expr></argument>,

                                   <argument pos:start="137:36" pos:end="137:47"><expr pos:start="137:36" pos:end="137:47"><operator pos:start="137:36" pos:end="137:36">&amp;</operator><name pos:start="137:37" pos:end="137:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:61"><expr pos:start="139:5" pos:end="139:60"><call pos:start="139:5" pos:end="139:60"><name pos:start="139:5" pos:end="139:26">qemu_opts_absorb_qdict</name><argument_list pos:start="139:27" pos:end="139:60">(<argument pos:start="139:28" pos:end="139:38"><expr pos:start="139:28" pos:end="139:38"><name pos:start="139:28" pos:end="139:38">legacy_opts</name></expr></argument>, <argument pos:start="139:41" pos:end="139:47"><expr pos:start="139:41" pos:end="139:47"><name pos:start="139:41" pos:end="139:47">bs_opts</name></expr></argument>, <argument pos:start="139:50" pos:end="139:59"><expr pos:start="139:50" pos:end="139:59"><operator pos:start="139:50" pos:end="139:50">&amp;</operator><name pos:start="139:51" pos:end="139:59">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="149:5"><if pos:start="141:5" pos:end="149:5">if <condition pos:start="141:8" pos:end="141:33">(<expr pos:start="141:9" pos:end="141:32"><call pos:start="141:9" pos:end="141:32"><name pos:start="141:9" pos:end="141:20">error_is_set</name><argument_list pos:start="141:21" pos:end="141:32">(<argument pos:start="141:22" pos:end="141:31"><expr pos:start="141:22" pos:end="141:31"><operator pos:start="141:22" pos:end="141:22">&amp;</operator><name pos:start="141:23" pos:end="141:31">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="141:35" pos:end="149:5">{<block_content pos:start="143:9" pos:end="147:18">

        <expr_stmt pos:start="143:9" pos:end="143:37"><expr pos:start="143:9" pos:end="143:36"><call pos:start="143:9" pos:end="143:36"><name pos:start="143:9" pos:end="143:25">qerror_report_err</name><argument_list pos:start="143:26" pos:end="143:36">(<argument pos:start="143:27" pos:end="143:35"><expr pos:start="143:27" pos:end="143:35"><name pos:start="143:27" pos:end="143:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:30"><expr pos:start="145:9" pos:end="145:29"><call pos:start="145:9" pos:end="145:29"><name pos:start="145:9" pos:end="145:18">error_free</name><argument_list pos:start="145:19" pos:end="145:29">(<argument pos:start="145:20" pos:end="145:28"><expr pos:start="145:20" pos:end="145:28"><name pos:start="145:20" pos:end="145:28">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="147:9" pos:end="147:18">goto <name pos:start="147:14" pos:end="147:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="153:5" pos:end="153:41">/* Deprecated option boot=[on|off] */</comment>

    <if_stmt pos:start="155:5" pos:end="163:5"><if pos:start="155:5" pos:end="163:5">if <condition pos:start="155:8" pos:end="155:50">(<expr pos:start="155:9" pos:end="155:49"><call pos:start="155:9" pos:end="155:41"><name pos:start="155:9" pos:end="155:20">qemu_opt_get</name><argument_list pos:start="155:21" pos:end="155:41">(<argument pos:start="155:22" pos:end="155:32"><expr pos:start="155:22" pos:end="155:32"><name pos:start="155:22" pos:end="155:32">legacy_opts</name></expr></argument>, <argument pos:start="155:35" pos:end="155:40"><expr pos:start="155:35" pos:end="155:40"><literal type="string" pos:start="155:35" pos:end="155:40">"boot"</literal></expr></argument>)</argument_list></call> <operator pos:start="155:43" pos:end="155:44">!=</operator> <name pos:start="155:46" pos:end="155:49">NULL</name></expr>)</condition> <block pos:start="155:52" pos:end="163:5">{<block_content pos:start="157:9" pos:end="161:42">

        <expr_stmt pos:start="157:9" pos:end="161:42"><expr pos:start="157:9" pos:end="161:41"><call pos:start="157:9" pos:end="161:41"><name pos:start="157:9" pos:end="157:15">fprintf</name><argument_list pos:start="157:16" pos:end="161:41">(<argument pos:start="157:17" pos:end="157:22"><expr pos:start="157:17" pos:end="157:22"><name pos:start="157:17" pos:end="157:22">stderr</name></expr></argument>, <argument pos:start="157:25" pos:end="161:40"><expr pos:start="157:25" pos:end="161:40"><literal type="string" pos:start="157:25" pos:end="157:74">"qemu-kvm: boot=on|off is deprecated and will be "</literal>

                <literal type="string" pos:start="159:17" pos:end="159:78">"ignored. Future versions will reject this parameter. Please "</literal>

                <literal type="string" pos:start="161:17" pos:end="161:40">"update your scripts.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:20">/* Media type */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:47"><expr pos:start="169:5" pos:end="169:46"><name pos:start="169:5" pos:end="169:9">value</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <call pos:start="169:13" pos:end="169:46"><name pos:start="169:13" pos:end="169:24">qemu_opt_get</name><argument_list pos:start="169:25" pos:end="169:46">(<argument pos:start="169:26" pos:end="169:36"><expr pos:start="169:26" pos:end="169:36"><name pos:start="169:26" pos:end="169:36">legacy_opts</name></expr></argument>, <argument pos:start="169:39" pos:end="169:45"><expr pos:start="169:39" pos:end="169:45"><literal type="string" pos:start="169:39" pos:end="169:45">"media"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="171:5" pos:end="191:5"><if pos:start="171:5" pos:end="191:5">if <condition pos:start="171:8" pos:end="171:14">(<expr pos:start="171:9" pos:end="171:13"><name pos:start="171:9" pos:end="171:13">value</name></expr>)</condition> <block pos:start="171:16" pos:end="191:5">{<block_content pos:start="173:9" pos:end="189:9">

        <if_stmt pos:start="173:9" pos:end="189:9"><if pos:start="173:9" pos:end="177:9">if <condition pos:start="173:12" pos:end="173:35">(<expr pos:start="173:13" pos:end="173:34"><operator pos:start="173:13" pos:end="173:13">!</operator><call pos:start="173:14" pos:end="173:34"><name pos:start="173:14" pos:end="173:19">strcmp</name><argument_list pos:start="173:20" pos:end="173:34">(<argument pos:start="173:21" pos:end="173:25"><expr pos:start="173:21" pos:end="173:25"><name pos:start="173:21" pos:end="173:25">value</name></expr></argument>, <argument pos:start="173:28" pos:end="173:33"><expr pos:start="173:28" pos:end="173:33"><literal type="string" pos:start="173:28" pos:end="173:33">"disk"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="173:37" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:31">

            <expr_stmt pos:start="175:13" pos:end="175:31"><expr pos:start="175:13" pos:end="175:30"><name pos:start="175:13" pos:end="175:17">media</name> <operator pos:start="175:19" pos:end="175:19">=</operator> <name pos:start="175:21" pos:end="175:30">MEDIA_DISK</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="177:11" pos:end="183:9">else if <condition pos:start="177:19" pos:end="177:43">(<expr pos:start="177:20" pos:end="177:42"><operator pos:start="177:20" pos:end="177:20">!</operator><call pos:start="177:21" pos:end="177:42"><name pos:start="177:21" pos:end="177:26">strcmp</name><argument_list pos:start="177:27" pos:end="177:42">(<argument pos:start="177:28" pos:end="177:32"><expr pos:start="177:28" pos:end="177:32"><name pos:start="177:28" pos:end="177:32">value</name></expr></argument>, <argument pos:start="177:35" pos:end="177:41"><expr pos:start="177:35" pos:end="177:41"><literal type="string" pos:start="177:35" pos:end="177:41">"cdrom"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:45" pos:end="183:9">{<block_content pos:start="179:13" pos:end="181:29">

            <expr_stmt pos:start="179:13" pos:end="179:32"><expr pos:start="179:13" pos:end="179:31"><name pos:start="179:13" pos:end="179:17">media</name> <operator pos:start="179:19" pos:end="179:19">=</operator> <name pos:start="179:21" pos:end="179:31">MEDIA_CDROM</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:29"><expr pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:21">read_only</name> <operator pos:start="181:23" pos:end="181:23">=</operator> <name pos:start="181:25" pos:end="181:28">true</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="183:11" pos:end="189:9">else <block pos:start="183:16" pos:end="189:9">{<block_content pos:start="185:13" pos:end="187:22">

            <expr_stmt pos:start="185:13" pos:end="185:54"><expr pos:start="185:13" pos:end="185:53"><call pos:start="185:13" pos:end="185:53"><name pos:start="185:13" pos:end="185:24">error_report</name><argument_list pos:start="185:25" pos:end="185:53">(<argument pos:start="185:26" pos:end="185:45"><expr pos:start="185:26" pos:end="185:45"><literal type="string" pos:start="185:26" pos:end="185:45">"'%s' invalid media"</literal></expr></argument>, <argument pos:start="185:48" pos:end="185:52"><expr pos:start="185:48" pos:end="185:52"><name pos:start="185:48" pos:end="185:52">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="187:13" pos:end="187:22">goto <name pos:start="187:18" pos:end="187:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="195:5" pos:end="195:71">/* copy-on-read is disabled with a warning for read-only devices */</comment>

    <expr_stmt pos:start="197:5" pos:end="197:68"><expr pos:start="197:5" pos:end="197:67"><name pos:start="197:5" pos:end="197:13">read_only</name> <operator pos:start="197:15" pos:end="197:16">|=</operator> <call pos:start="197:18" pos:end="197:67"><name pos:start="197:18" pos:end="197:34">qemu_opt_get_bool</name><argument_list pos:start="197:35" pos:end="197:67">(<argument pos:start="197:36" pos:end="197:46"><expr pos:start="197:36" pos:end="197:46"><name pos:start="197:36" pos:end="197:46">legacy_opts</name></expr></argument>, <argument pos:start="197:49" pos:end="197:59"><expr pos:start="197:49" pos:end="197:59"><literal type="string" pos:start="197:49" pos:end="197:59">"read-only"</literal></expr></argument>, <argument pos:start="197:62" pos:end="197:66"><expr pos:start="197:62" pos:end="197:66"><name pos:start="197:62" pos:end="197:66">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:73"><expr pos:start="199:5" pos:end="199:72"><name pos:start="199:5" pos:end="199:16">copy_on_read</name> <operator pos:start="199:18" pos:end="199:18">=</operator> <call pos:start="199:20" pos:end="199:72"><name pos:start="199:20" pos:end="199:36">qemu_opt_get_bool</name><argument_list pos:start="199:37" pos:end="199:72">(<argument pos:start="199:38" pos:end="199:48"><expr pos:start="199:38" pos:end="199:48"><name pos:start="199:38" pos:end="199:48">legacy_opts</name></expr></argument>, <argument pos:start="199:51" pos:end="199:64"><expr pos:start="199:51" pos:end="199:64"><literal type="string" pos:start="199:51" pos:end="199:64">"copy-on-read"</literal></expr></argument>, <argument pos:start="199:67" pos:end="199:71"><expr pos:start="199:67" pos:end="199:71"><name pos:start="199:67" pos:end="199:71">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="203:5" pos:end="209:5"><if pos:start="203:5" pos:end="209:5">if <condition pos:start="203:8" pos:end="203:34">(<expr pos:start="203:9" pos:end="203:33"><name pos:start="203:9" pos:end="203:17">read_only</name> <operator pos:start="203:19" pos:end="203:20">&amp;&amp;</operator> <name pos:start="203:22" pos:end="203:33">copy_on_read</name></expr>)</condition> <block pos:start="203:36" pos:end="209:5">{<block_content pos:start="205:9" pos:end="207:29">

        <expr_stmt pos:start="205:9" pos:end="205:75"><expr pos:start="205:9" pos:end="205:74"><call pos:start="205:9" pos:end="205:74"><name pos:start="205:9" pos:end="205:20">error_report</name><argument_list pos:start="205:21" pos:end="205:74">(<argument pos:start="205:22" pos:end="205:73"><expr pos:start="205:22" pos:end="205:73"><literal type="string" pos:start="205:22" pos:end="205:73">"warning: disabling copy-on-read on read-only drive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:29"><expr pos:start="207:9" pos:end="207:28"><name pos:start="207:9" pos:end="207:20">copy_on_read</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <name pos:start="207:24" pos:end="207:28">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="213:5" pos:end="215:58"><expr pos:start="213:5" pos:end="215:57"><call pos:start="213:5" pos:end="215:57"><name pos:start="213:5" pos:end="213:13">qdict_put</name><argument_list pos:start="213:14" pos:end="215:57">(<argument pos:start="213:15" pos:end="213:21"><expr pos:start="213:15" pos:end="213:21"><name pos:start="213:15" pos:end="213:21">bs_opts</name></expr></argument>, <argument pos:start="213:24" pos:end="213:34"><expr pos:start="213:24" pos:end="213:34"><literal type="string" pos:start="213:24" pos:end="213:34">"read-only"</literal></expr></argument>,

              <argument pos:start="215:15" pos:end="215:56"><expr pos:start="215:15" pos:end="215:56"><call pos:start="215:15" pos:end="215:56"><name pos:start="215:15" pos:end="215:30">qstring_from_str</name><argument_list pos:start="215:31" pos:end="215:56">(<argument pos:start="215:32" pos:end="215:55"><expr pos:start="215:32" pos:end="215:55"><ternary pos:start="215:32" pos:end="215:55"><condition pos:start="215:32" pos:end="215:42"><expr pos:start="215:32" pos:end="215:40"><name pos:start="215:32" pos:end="215:40">read_only</name></expr> ?</condition><then pos:start="215:44" pos:end="215:47"> <expr pos:start="215:44" pos:end="215:47"><literal type="string" pos:start="215:44" pos:end="215:47">"on"</literal></expr> </then><else pos:start="215:49" pos:end="215:55">: <expr pos:start="215:51" pos:end="215:55"><literal type="string" pos:start="215:51" pos:end="215:55">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="217:5" pos:end="219:60"><expr pos:start="217:5" pos:end="219:59"><call pos:start="217:5" pos:end="219:59"><name pos:start="217:5" pos:end="217:13">qdict_put</name><argument_list pos:start="217:14" pos:end="219:59">(<argument pos:start="217:15" pos:end="217:21"><expr pos:start="217:15" pos:end="217:21"><name pos:start="217:15" pos:end="217:21">bs_opts</name></expr></argument>, <argument pos:start="217:24" pos:end="217:37"><expr pos:start="217:24" pos:end="217:37"><literal type="string" pos:start="217:24" pos:end="217:37">"copy-on-read"</literal></expr></argument>,

              <argument pos:start="219:15" pos:end="219:58"><expr pos:start="219:15" pos:end="219:58"><call pos:start="219:15" pos:end="219:58"><name pos:start="219:15" pos:end="219:30">qstring_from_str</name><argument_list pos:start="219:31" pos:end="219:58">(<argument pos:start="219:32" pos:end="219:57"><expr pos:start="219:32" pos:end="219:57"><ternary pos:start="219:32" pos:end="219:57"><condition pos:start="219:32" pos:end="219:45"><expr pos:start="219:32" pos:end="219:43"><name pos:start="219:32" pos:end="219:43">copy_on_read</name></expr> ?</condition><then pos:start="219:47" pos:end="219:50"> <expr pos:start="219:47" pos:end="219:50"><literal type="string" pos:start="219:47" pos:end="219:50">"on"</literal></expr> </then><else pos:start="219:52" pos:end="219:57">:<expr pos:start="219:53" pos:end="219:57"><literal type="string" pos:start="219:53" pos:end="219:57">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:25">/* Controller type */</comment>

    <expr_stmt pos:start="225:5" pos:end="225:44"><expr pos:start="225:5" pos:end="225:43"><name pos:start="225:5" pos:end="225:9">value</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <call pos:start="225:13" pos:end="225:43"><name pos:start="225:13" pos:end="225:24">qemu_opt_get</name><argument_list pos:start="225:25" pos:end="225:43">(<argument pos:start="225:26" pos:end="225:36"><expr pos:start="225:26" pos:end="225:36"><name pos:start="225:26" pos:end="225:36">legacy_opts</name></expr></argument>, <argument pos:start="225:39" pos:end="225:42"><expr pos:start="225:39" pos:end="225:42"><literal type="string" pos:start="225:39" pos:end="225:42">"if"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="227:5" pos:end="249:5"><if pos:start="227:5" pos:end="245:5">if <condition pos:start="227:8" pos:end="227:14">(<expr pos:start="227:9" pos:end="227:13"><name pos:start="227:9" pos:end="227:13">value</name></expr>)</condition> <block pos:start="227:16" pos:end="245:5">{<block_content pos:start="229:9" pos:end="243:9">

        <for pos:start="229:9" pos:end="235:9">for <control pos:start="229:13" pos:end="233:20">(<init pos:start="229:14" pos:end="229:22"><expr pos:start="229:14" pos:end="229:21"><name pos:start="229:14" pos:end="229:17">type</name> <operator pos:start="229:19" pos:end="229:19">=</operator> <literal type="number" pos:start="229:21" pos:end="229:21">0</literal></expr>;</init>

             <condition pos:start="231:14" pos:end="231:61"><expr pos:start="231:14" pos:end="231:60"><name pos:start="231:14" pos:end="231:17">type</name> <operator pos:start="231:19" pos:end="231:19">&lt;</operator> <name pos:start="231:21" pos:end="231:28">IF_COUNT</name> <operator pos:start="231:30" pos:end="231:31">&amp;&amp;</operator> <call pos:start="231:33" pos:end="231:60"><name pos:start="231:33" pos:end="231:38">strcmp</name><argument_list pos:start="231:39" pos:end="231:60">(<argument pos:start="231:40" pos:end="231:44"><expr pos:start="231:40" pos:end="231:44"><name pos:start="231:40" pos:end="231:44">value</name></expr></argument>, <argument pos:start="231:47" pos:end="231:59"><expr pos:start="231:47" pos:end="231:59"><name pos:start="231:47" pos:end="231:59"><name pos:start="231:47" pos:end="231:53">if_name</name><index pos:start="231:54" pos:end="231:59">[<expr pos:start="231:55" pos:end="231:58"><name pos:start="231:55" pos:end="231:58">type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition>

             <incr pos:start="233:14" pos:end="233:19"><expr pos:start="233:14" pos:end="233:19"><name pos:start="233:14" pos:end="233:17">type</name><operator pos:start="233:18" pos:end="233:19">++</operator></expr></incr>)</control> <block pos:start="233:22" pos:end="235:9">{<block_content>

        </block_content>}</block></for>

        <if_stmt pos:start="237:9" pos:end="243:9"><if pos:start="237:9" pos:end="243:9">if <condition pos:start="237:12" pos:end="237:29">(<expr pos:start="237:13" pos:end="237:28"><name pos:start="237:13" pos:end="237:16">type</name> <operator pos:start="237:18" pos:end="237:19">==</operator> <name pos:start="237:21" pos:end="237:28">IF_COUNT</name></expr>)</condition> <block pos:start="237:31" pos:end="243:9">{<block_content pos:start="239:13" pos:end="241:22">

            <expr_stmt pos:start="239:13" pos:end="239:61"><expr pos:start="239:13" pos:end="239:60"><call pos:start="239:13" pos:end="239:60"><name pos:start="239:13" pos:end="239:24">error_report</name><argument_list pos:start="239:25" pos:end="239:60">(<argument pos:start="239:26" pos:end="239:52"><expr pos:start="239:26" pos:end="239:52"><literal type="string" pos:start="239:26" pos:end="239:52">"unsupported bus type '%s'"</literal></expr></argument>, <argument pos:start="239:55" pos:end="239:59"><expr pos:start="239:55" pos:end="239:59"><name pos:start="239:55" pos:end="239:59">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="241:13" pos:end="241:22">goto <name pos:start="241:18" pos:end="241:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="245:7" pos:end="249:5">else <block pos:start="245:12" pos:end="249:5">{<block_content pos:start="247:9" pos:end="247:34">

        <expr_stmt pos:start="247:9" pos:end="247:34"><expr pos:start="247:9" pos:end="247:33"><name pos:start="247:9" pos:end="247:12">type</name> <operator pos:start="247:14" pos:end="247:14">=</operator> <name pos:start="247:16" pos:end="247:33">block_default_type</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="253:5" pos:end="253:18">/* Geometry */</comment>

    <expr_stmt pos:start="255:5" pos:end="255:56"><expr pos:start="255:5" pos:end="255:55"><name pos:start="255:5" pos:end="255:8">cyls</name>  <operator pos:start="255:11" pos:end="255:11">=</operator> <call pos:start="255:13" pos:end="255:55"><name pos:start="255:13" pos:end="255:31">qemu_opt_get_number</name><argument_list pos:start="255:32" pos:end="255:55">(<argument pos:start="255:33" pos:end="255:43"><expr pos:start="255:33" pos:end="255:43"><name pos:start="255:33" pos:end="255:43">legacy_opts</name></expr></argument>, <argument pos:start="255:46" pos:end="255:51"><expr pos:start="255:46" pos:end="255:51"><literal type="string" pos:start="255:46" pos:end="255:51">"cyls"</literal></expr></argument>, <argument pos:start="255:54" pos:end="255:54"><expr pos:start="255:54" pos:end="255:54"><literal type="number" pos:start="255:54" pos:end="255:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="257:5" pos:end="257:57"><expr pos:start="257:5" pos:end="257:56"><name pos:start="257:5" pos:end="257:9">heads</name> <operator pos:start="257:11" pos:end="257:11">=</operator> <call pos:start="257:13" pos:end="257:56"><name pos:start="257:13" pos:end="257:31">qemu_opt_get_number</name><argument_list pos:start="257:32" pos:end="257:56">(<argument pos:start="257:33" pos:end="257:43"><expr pos:start="257:33" pos:end="257:43"><name pos:start="257:33" pos:end="257:43">legacy_opts</name></expr></argument>, <argument pos:start="257:46" pos:end="257:52"><expr pos:start="257:46" pos:end="257:52"><literal type="string" pos:start="257:46" pos:end="257:52">"heads"</literal></expr></argument>, <argument pos:start="257:55" pos:end="257:55"><expr pos:start="257:55" pos:end="257:55"><literal type="number" pos:start="257:55" pos:end="257:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="259:5" pos:end="259:56"><expr pos:start="259:5" pos:end="259:55"><name pos:start="259:5" pos:end="259:8">secs</name>  <operator pos:start="259:11" pos:end="259:11">=</operator> <call pos:start="259:13" pos:end="259:55"><name pos:start="259:13" pos:end="259:31">qemu_opt_get_number</name><argument_list pos:start="259:32" pos:end="259:55">(<argument pos:start="259:33" pos:end="259:43"><expr pos:start="259:33" pos:end="259:43"><name pos:start="259:33" pos:end="259:43">legacy_opts</name></expr></argument>, <argument pos:start="259:46" pos:end="259:51"><expr pos:start="259:46" pos:end="259:51"><literal type="string" pos:start="259:46" pos:end="259:51">"secs"</literal></expr></argument>, <argument pos:start="259:54" pos:end="259:54"><expr pos:start="259:54" pos:end="259:54"><literal type="number" pos:start="259:54" pos:end="259:54">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="263:5" pos:end="289:5"><if pos:start="263:5" pos:end="289:5">if <condition pos:start="263:8" pos:end="263:30">(<expr pos:start="263:9" pos:end="263:29"><name pos:start="263:9" pos:end="263:12">cyls</name> <operator pos:start="263:14" pos:end="263:15">||</operator> <name pos:start="263:17" pos:end="263:21">heads</name> <operator pos:start="263:23" pos:end="263:24">||</operator> <name pos:start="263:26" pos:end="263:29">secs</name></expr>)</condition> <block pos:start="263:32" pos:end="289:5">{<block_content pos:start="265:9" pos:end="287:9">

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:21">(<expr pos:start="265:13" pos:end="265:20"><name pos:start="265:13" pos:end="265:16">cyls</name> <operator pos:start="265:18" pos:end="265:18">&lt;</operator> <literal type="number" pos:start="265:20" pos:end="265:20">1</literal></expr>)</condition> <block pos:start="265:23" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:22">

            <expr_stmt pos:start="267:13" pos:end="267:57"><expr pos:start="267:13" pos:end="267:56"><call pos:start="267:13" pos:end="267:56"><name pos:start="267:13" pos:end="267:24">error_report</name><argument_list pos:start="267:25" pos:end="267:56">(<argument pos:start="267:26" pos:end="267:55"><expr pos:start="267:26" pos:end="267:55"><literal type="string" pos:start="267:26" pos:end="267:55">"invalid physical cyls number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="269:13" pos:end="269:22">goto <name pos:start="269:18" pos:end="269:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="273:9" pos:end="279:9"><if pos:start="273:9" pos:end="279:9">if <condition pos:start="273:12" pos:end="273:22">(<expr pos:start="273:13" pos:end="273:21"><name pos:start="273:13" pos:end="273:17">heads</name> <operator pos:start="273:19" pos:end="273:19">&lt;</operator> <literal type="number" pos:start="273:21" pos:end="273:21">1</literal></expr>)</condition> <block pos:start="273:24" pos:end="279:9">{<block_content pos:start="275:13" pos:end="277:22">

            <expr_stmt pos:start="275:13" pos:end="275:58"><expr pos:start="275:13" pos:end="275:57"><call pos:start="275:13" pos:end="275:57"><name pos:start="275:13" pos:end="275:24">error_report</name><argument_list pos:start="275:25" pos:end="275:57">(<argument pos:start="275:26" pos:end="275:56"><expr pos:start="275:26" pos:end="275:56"><literal type="string" pos:start="275:26" pos:end="275:56">"invalid physical heads number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="277:13" pos:end="277:22">goto <name pos:start="277:18" pos:end="277:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="281:9" pos:end="287:9"><if pos:start="281:9" pos:end="287:9">if <condition pos:start="281:12" pos:end="281:21">(<expr pos:start="281:13" pos:end="281:20"><name pos:start="281:13" pos:end="281:16">secs</name> <operator pos:start="281:18" pos:end="281:18">&lt;</operator> <literal type="number" pos:start="281:20" pos:end="281:20">1</literal></expr>)</condition> <block pos:start="281:23" pos:end="287:9">{<block_content pos:start="283:13" pos:end="285:22">

            <expr_stmt pos:start="283:13" pos:end="283:57"><expr pos:start="283:13" pos:end="283:56"><call pos:start="283:13" pos:end="283:56"><name pos:start="283:13" pos:end="283:24">error_report</name><argument_list pos:start="283:25" pos:end="283:56">(<argument pos:start="283:26" pos:end="283:55"><expr pos:start="283:26" pos:end="283:55"><literal type="string" pos:start="283:26" pos:end="283:55">"invalid physical secs number"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="285:13" pos:end="285:22">goto <name pos:start="285:18" pos:end="285:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="293:5" pos:end="293:44"><expr pos:start="293:5" pos:end="293:43"><name pos:start="293:5" pos:end="293:15">translation</name> <operator pos:start="293:17" pos:end="293:17">=</operator> <name pos:start="293:19" pos:end="293:43">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

    <expr_stmt pos:start="295:5" pos:end="295:47"><expr pos:start="295:5" pos:end="295:46"><name pos:start="295:5" pos:end="295:9">value</name> <operator pos:start="295:11" pos:end="295:11">=</operator> <call pos:start="295:13" pos:end="295:46"><name pos:start="295:13" pos:end="295:24">qemu_opt_get</name><argument_list pos:start="295:25" pos:end="295:46">(<argument pos:start="295:26" pos:end="295:36"><expr pos:start="295:26" pos:end="295:36"><name pos:start="295:26" pos:end="295:36">legacy_opts</name></expr></argument>, <argument pos:start="295:39" pos:end="295:45"><expr pos:start="295:39" pos:end="295:45"><literal type="string" pos:start="295:39" pos:end="295:45">"trans"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="297:5" pos:end="329:5"><if pos:start="297:5" pos:end="329:5">if <condition pos:start="297:8" pos:end="297:22">(<expr pos:start="297:9" pos:end="297:21"><name pos:start="297:9" pos:end="297:13">value</name> <operator pos:start="297:15" pos:end="297:16">!=</operator> <name pos:start="297:18" pos:end="297:21">NULL</name></expr>)</condition> <block pos:start="297:24" pos:end="329:5">{<block_content pos:start="299:9" pos:end="327:9">

        <if_stmt pos:start="299:9" pos:end="307:9"><if pos:start="299:9" pos:end="307:9">if <condition pos:start="299:12" pos:end="299:18">(<expr pos:start="299:13" pos:end="299:17"><operator pos:start="299:13" pos:end="299:13">!</operator><name pos:start="299:14" pos:end="299:17">cyls</name></expr>)</condition> <block pos:start="299:20" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:22">

            <expr_stmt pos:start="301:13" pos:end="303:32"><expr pos:start="301:13" pos:end="303:31"><call pos:start="301:13" pos:end="303:31"><name pos:start="301:13" pos:end="301:24">error_report</name><argument_list pos:start="301:25" pos:end="303:31">(<argument pos:start="301:26" pos:end="301:76"><expr pos:start="301:26" pos:end="301:76"><literal type="string" pos:start="301:26" pos:end="301:76">"'%s' trans must be used with cyls, heads and secs"</literal></expr></argument>,

                         <argument pos:start="303:26" pos:end="303:30"><expr pos:start="303:26" pos:end="303:30"><name pos:start="303:26" pos:end="303:30">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="305:13" pos:end="305:22">goto <name pos:start="305:18" pos:end="305:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="309:9" pos:end="327:9"><if pos:start="309:9" pos:end="313:9">if <condition pos:start="309:12" pos:end="309:35">(<expr pos:start="309:13" pos:end="309:34"><operator pos:start="309:13" pos:end="309:13">!</operator><call pos:start="309:14" pos:end="309:34"><name pos:start="309:14" pos:end="309:19">strcmp</name><argument_list pos:start="309:20" pos:end="309:34">(<argument pos:start="309:21" pos:end="309:25"><expr pos:start="309:21" pos:end="309:25"><name pos:start="309:21" pos:end="309:25">value</name></expr></argument>, <argument pos:start="309:28" pos:end="309:33"><expr pos:start="309:28" pos:end="309:33"><literal type="string" pos:start="309:28" pos:end="309:33">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="309:37" pos:end="313:9">{<block_content pos:start="311:13" pos:end="311:52">

            <expr_stmt pos:start="311:13" pos:end="311:52"><expr pos:start="311:13" pos:end="311:51"><name pos:start="311:13" pos:end="311:23">translation</name> <operator pos:start="311:25" pos:end="311:25">=</operator> <name pos:start="311:27" pos:end="311:51">BIOS_ATA_TRANSLATION_NONE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="313:11" pos:end="317:9">else if <condition pos:start="313:19" pos:end="313:41">(<expr pos:start="313:20" pos:end="313:40"><operator pos:start="313:20" pos:end="313:20">!</operator><call pos:start="313:21" pos:end="313:40"><name pos:start="313:21" pos:end="313:26">strcmp</name><argument_list pos:start="313:27" pos:end="313:40">(<argument pos:start="313:28" pos:end="313:32"><expr pos:start="313:28" pos:end="313:32"><name pos:start="313:28" pos:end="313:32">value</name></expr></argument>, <argument pos:start="313:35" pos:end="313:39"><expr pos:start="313:35" pos:end="313:39"><literal type="string" pos:start="313:35" pos:end="313:39">"lba"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:43" pos:end="317:9">{<block_content pos:start="315:13" pos:end="315:51">

            <expr_stmt pos:start="315:13" pos:end="315:51"><expr pos:start="315:13" pos:end="315:50"><name pos:start="315:13" pos:end="315:23">translation</name> <operator pos:start="315:25" pos:end="315:25">=</operator> <name pos:start="315:27" pos:end="315:50">BIOS_ATA_TRANSLATION_LBA</name></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="317:11" pos:end="321:9">else if <condition pos:start="317:19" pos:end="317:42">(<expr pos:start="317:20" pos:end="317:41"><operator pos:start="317:20" pos:end="317:20">!</operator><call pos:start="317:21" pos:end="317:41"><name pos:start="317:21" pos:end="317:26">strcmp</name><argument_list pos:start="317:27" pos:end="317:41">(<argument pos:start="317:28" pos:end="317:32"><expr pos:start="317:28" pos:end="317:32"><name pos:start="317:28" pos:end="317:32">value</name></expr></argument>, <argument pos:start="317:35" pos:end="317:40"><expr pos:start="317:35" pos:end="317:40"><literal type="string" pos:start="317:35" pos:end="317:40">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="317:44" pos:end="321:9">{<block_content pos:start="319:13" pos:end="319:52">

            <expr_stmt pos:start="319:13" pos:end="319:52"><expr pos:start="319:13" pos:end="319:51"><name pos:start="319:13" pos:end="319:23">translation</name> <operator pos:start="319:25" pos:end="319:25">=</operator> <name pos:start="319:27" pos:end="319:51">BIOS_ATA_TRANSLATION_AUTO</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="321:11" pos:end="327:9">else <block pos:start="321:16" pos:end="327:9">{<block_content pos:start="323:13" pos:end="325:22">

            <expr_stmt pos:start="323:13" pos:end="323:65"><expr pos:start="323:13" pos:end="323:64"><call pos:start="323:13" pos:end="323:64"><name pos:start="323:13" pos:end="323:24">error_report</name><argument_list pos:start="323:25" pos:end="323:64">(<argument pos:start="323:26" pos:end="323:56"><expr pos:start="323:26" pos:end="323:56"><literal type="string" pos:start="323:26" pos:end="323:56">"'%s' invalid translation type"</literal></expr></argument>, <argument pos:start="323:59" pos:end="323:63"><expr pos:start="323:59" pos:end="323:63"><name pos:start="323:59" pos:end="323:63">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="325:13" pos:end="325:22">goto <name pos:start="325:18" pos:end="325:21">fail</name>;</goto>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="333:5" pos:end="343:5"><if pos:start="333:5" pos:end="343:5">if <condition pos:start="333:8" pos:end="333:29">(<expr pos:start="333:9" pos:end="333:28"><name pos:start="333:9" pos:end="333:13">media</name> <operator pos:start="333:15" pos:end="333:16">==</operator> <name pos:start="333:18" pos:end="333:28">MEDIA_CDROM</name></expr>)</condition> <block pos:start="333:31" pos:end="343:5">{<block_content pos:start="335:9" pos:end="341:9">

        <if_stmt pos:start="335:9" pos:end="341:9"><if pos:start="335:9" pos:end="341:9">if <condition pos:start="335:12" pos:end="335:34">(<expr pos:start="335:13" pos:end="335:33"><name pos:start="335:13" pos:end="335:16">cyls</name> <operator pos:start="335:18" pos:end="335:19">||</operator> <name pos:start="335:21" pos:end="335:24">secs</name> <operator pos:start="335:26" pos:end="335:27">||</operator> <name pos:start="335:29" pos:end="335:33">heads</name></expr>)</condition> <block pos:start="335:36" pos:end="341:9">{<block_content pos:start="337:13" pos:end="339:22">

            <expr_stmt pos:start="337:13" pos:end="337:62"><expr pos:start="337:13" pos:end="337:61"><call pos:start="337:13" pos:end="337:61"><name pos:start="337:13" pos:end="337:24">error_report</name><argument_list pos:start="337:25" pos:end="337:61">(<argument pos:start="337:26" pos:end="337:60"><expr pos:start="337:26" pos:end="337:60"><literal type="string" pos:start="337:26" pos:end="337:60">"CHS can't be set with media=cdrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="339:13" pos:end="339:22">goto <name pos:start="339:18" pos:end="339:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="347:5" pos:end="349:64">/* Device address specified by bus/unit or index.

     * If none was specified, try to find the first free one. */</comment>

    <expr_stmt pos:start="351:5" pos:end="351:57"><expr pos:start="351:5" pos:end="351:56"><name pos:start="351:5" pos:end="351:10">bus_id</name>  <operator pos:start="351:13" pos:end="351:13">=</operator> <call pos:start="351:15" pos:end="351:56"><name pos:start="351:15" pos:end="351:33">qemu_opt_get_number</name><argument_list pos:start="351:34" pos:end="351:56">(<argument pos:start="351:35" pos:end="351:45"><expr pos:start="351:35" pos:end="351:45"><name pos:start="351:35" pos:end="351:45">legacy_opts</name></expr></argument>, <argument pos:start="351:48" pos:end="351:52"><expr pos:start="351:48" pos:end="351:52"><literal type="string" pos:start="351:48" pos:end="351:52">"bus"</literal></expr></argument>, <argument pos:start="351:55" pos:end="351:55"><expr pos:start="351:55" pos:end="351:55"><literal type="number" pos:start="351:55" pos:end="351:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:59"><expr pos:start="353:5" pos:end="353:58"><name pos:start="353:5" pos:end="353:11">unit_id</name> <operator pos:start="353:13" pos:end="353:13">=</operator> <call pos:start="353:15" pos:end="353:58"><name pos:start="353:15" pos:end="353:33">qemu_opt_get_number</name><argument_list pos:start="353:34" pos:end="353:58">(<argument pos:start="353:35" pos:end="353:45"><expr pos:start="353:35" pos:end="353:45"><name pos:start="353:35" pos:end="353:45">legacy_opts</name></expr></argument>, <argument pos:start="353:48" pos:end="353:53"><expr pos:start="353:48" pos:end="353:53"><literal type="string" pos:start="353:48" pos:end="353:53">"unit"</literal></expr></argument>, <argument pos:start="353:56" pos:end="353:57"><expr pos:start="353:56" pos:end="353:57"><operator pos:start="353:56" pos:end="353:56">-</operator><literal type="number" pos:start="353:57" pos:end="353:57">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="355:5" pos:end="355:60"><expr pos:start="355:5" pos:end="355:59"><name pos:start="355:5" pos:end="355:9">index</name>   <operator pos:start="355:13" pos:end="355:13">=</operator> <call pos:start="355:15" pos:end="355:59"><name pos:start="355:15" pos:end="355:33">qemu_opt_get_number</name><argument_list pos:start="355:34" pos:end="355:59">(<argument pos:start="355:35" pos:end="355:45"><expr pos:start="355:35" pos:end="355:45"><name pos:start="355:35" pos:end="355:45">legacy_opts</name></expr></argument>, <argument pos:start="355:48" pos:end="355:54"><expr pos:start="355:48" pos:end="355:54"><literal type="string" pos:start="355:48" pos:end="355:54">"index"</literal></expr></argument>, <argument pos:start="355:57" pos:end="355:58"><expr pos:start="355:57" pos:end="355:58"><operator pos:start="355:57" pos:end="355:57">-</operator><literal type="number" pos:start="355:58" pos:end="355:58">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="359:5" pos:end="359:33"><expr pos:start="359:5" pos:end="359:32"><name pos:start="359:5" pos:end="359:12">max_devs</name> <operator pos:start="359:14" pos:end="359:14">=</operator> <name pos:start="359:16" pos:end="359:32"><name pos:start="359:16" pos:end="359:26">if_max_devs</name><index pos:start="359:27" pos:end="359:32">[<expr pos:start="359:28" pos:end="359:31"><name pos:start="359:28" pos:end="359:31">type</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="363:5" pos:end="377:5"><if pos:start="363:5" pos:end="377:5">if <condition pos:start="363:8" pos:end="363:20">(<expr pos:start="363:9" pos:end="363:19"><name pos:start="363:9" pos:end="363:13">index</name> <operator pos:start="363:15" pos:end="363:16">!=</operator> <operator pos:start="363:18" pos:end="363:18">-</operator><literal type="number" pos:start="363:19" pos:end="363:19">1</literal></expr>)</condition> <block pos:start="363:22" pos:end="377:5">{<block_content pos:start="365:9" pos:end="375:54">

        <if_stmt pos:start="365:9" pos:end="371:9"><if pos:start="365:9" pos:end="371:9">if <condition pos:start="365:12" pos:end="365:41">(<expr pos:start="365:13" pos:end="365:40"><name pos:start="365:13" pos:end="365:18">bus_id</name> <operator pos:start="365:20" pos:end="365:21">!=</operator> <literal type="number" pos:start="365:23" pos:end="365:23">0</literal> <operator pos:start="365:25" pos:end="365:26">||</operator> <name pos:start="365:28" pos:end="365:34">unit_id</name> <operator pos:start="365:36" pos:end="365:37">!=</operator> <operator pos:start="365:39" pos:end="365:39">-</operator><literal type="number" pos:start="365:40" pos:end="365:40">1</literal></expr>)</condition> <block pos:start="365:43" pos:end="371:9">{<block_content pos:start="367:13" pos:end="369:22">

            <expr_stmt pos:start="367:13" pos:end="367:67"><expr pos:start="367:13" pos:end="367:66"><call pos:start="367:13" pos:end="367:66"><name pos:start="367:13" pos:end="367:24">error_report</name><argument_list pos:start="367:25" pos:end="367:66">(<argument pos:start="367:26" pos:end="367:65"><expr pos:start="367:26" pos:end="367:65"><literal type="string" pos:start="367:26" pos:end="367:65">"index cannot be used with bus and unit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="369:13" pos:end="369:22">goto <name pos:start="369:18" pos:end="369:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="373:9" pos:end="373:52"><expr pos:start="373:9" pos:end="373:51"><name pos:start="373:9" pos:end="373:14">bus_id</name> <operator pos:start="373:16" pos:end="373:16">=</operator> <call pos:start="373:18" pos:end="373:51"><name pos:start="373:18" pos:end="373:38">drive_index_to_bus_id</name><argument_list pos:start="373:39" pos:end="373:51">(<argument pos:start="373:40" pos:end="373:43"><expr pos:start="373:40" pos:end="373:43"><name pos:start="373:40" pos:end="373:43">type</name></expr></argument>, <argument pos:start="373:46" pos:end="373:50"><expr pos:start="373:46" pos:end="373:50"><name pos:start="373:46" pos:end="373:50">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:54"><expr pos:start="375:9" pos:end="375:53"><name pos:start="375:9" pos:end="375:15">unit_id</name> <operator pos:start="375:17" pos:end="375:17">=</operator> <call pos:start="375:19" pos:end="375:53"><name pos:start="375:19" pos:end="375:40">drive_index_to_unit_id</name><argument_list pos:start="375:41" pos:end="375:53">(<argument pos:start="375:42" pos:end="375:45"><expr pos:start="375:42" pos:end="375:45"><name pos:start="375:42" pos:end="375:45">type</name></expr></argument>, <argument pos:start="375:48" pos:end="375:52"><expr pos:start="375:48" pos:end="375:52"><name pos:start="375:48" pos:end="375:52">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="381:5" pos:end="399:5"><if pos:start="381:5" pos:end="399:5">if <condition pos:start="381:8" pos:end="381:22">(<expr pos:start="381:9" pos:end="381:21"><name pos:start="381:9" pos:end="381:15">unit_id</name> <operator pos:start="381:17" pos:end="381:18">==</operator> <operator pos:start="381:20" pos:end="381:20">-</operator><literal type="number" pos:start="381:21" pos:end="381:21">1</literal></expr>)</condition> <block pos:start="381:24" pos:end="399:5">{<block_content pos:start="383:8" pos:end="397:8">

       <expr_stmt pos:start="383:8" pos:end="383:19"><expr pos:start="383:8" pos:end="383:18"><name pos:start="383:8" pos:end="383:14">unit_id</name> <operator pos:start="383:16" pos:end="383:16">=</operator> <literal type="number" pos:start="383:18" pos:end="383:18">0</literal></expr>;</expr_stmt>

       <while pos:start="385:8" pos:end="397:8">while <condition pos:start="385:14" pos:end="385:55">(<expr pos:start="385:15" pos:end="385:54"><call pos:start="385:15" pos:end="385:46"><name pos:start="385:15" pos:end="385:23">drive_get</name><argument_list pos:start="385:24" pos:end="385:46">(<argument pos:start="385:25" pos:end="385:28"><expr pos:start="385:25" pos:end="385:28"><name pos:start="385:25" pos:end="385:28">type</name></expr></argument>, <argument pos:start="385:31" pos:end="385:36"><expr pos:start="385:31" pos:end="385:36"><name pos:start="385:31" pos:end="385:36">bus_id</name></expr></argument>, <argument pos:start="385:39" pos:end="385:45"><expr pos:start="385:39" pos:end="385:45"><name pos:start="385:39" pos:end="385:45">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="385:48" pos:end="385:49">!=</operator> <name pos:start="385:51" pos:end="385:54">NULL</name></expr>)</condition> <block pos:start="385:57" pos:end="397:8">{<block_content pos:start="387:12" pos:end="395:12">

           <expr_stmt pos:start="387:12" pos:end="387:21"><expr pos:start="387:12" pos:end="387:20"><name pos:start="387:12" pos:end="387:18">unit_id</name><operator pos:start="387:19" pos:end="387:20">++</operator></expr>;</expr_stmt>

           <if_stmt pos:start="389:12" pos:end="395:12"><if pos:start="389:12" pos:end="395:12">if <condition pos:start="389:15" pos:end="389:47">(<expr pos:start="389:16" pos:end="389:46"><name pos:start="389:16" pos:end="389:23">max_devs</name> <operator pos:start="389:25" pos:end="389:26">&amp;&amp;</operator> <name pos:start="389:28" pos:end="389:34">unit_id</name> <operator pos:start="389:36" pos:end="389:37">&gt;=</operator> <name pos:start="389:39" pos:end="389:46">max_devs</name></expr>)</condition> <block pos:start="389:49" pos:end="395:12">{<block_content pos:start="391:16" pos:end="393:24">

               <expr_stmt pos:start="391:16" pos:end="391:35"><expr pos:start="391:16" pos:end="391:34"><name pos:start="391:16" pos:end="391:22">unit_id</name> <operator pos:start="391:24" pos:end="391:25">-=</operator> <name pos:start="391:27" pos:end="391:34">max_devs</name></expr>;</expr_stmt>

               <expr_stmt pos:start="393:16" pos:end="393:24"><expr pos:start="393:16" pos:end="393:23"><name pos:start="393:16" pos:end="393:21">bus_id</name><operator pos:start="393:22" pos:end="393:23">++</operator></expr>;</expr_stmt>

           </block_content>}</block></if></if_stmt>

       </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="403:5" pos:end="409:5"><if pos:start="403:5" pos:end="409:5">if <condition pos:start="403:8" pos:end="403:40">(<expr pos:start="403:9" pos:end="403:39"><name pos:start="403:9" pos:end="403:16">max_devs</name> <operator pos:start="403:18" pos:end="403:19">&amp;&amp;</operator> <name pos:start="403:21" pos:end="403:27">unit_id</name> <operator pos:start="403:29" pos:end="403:30">&gt;=</operator> <name pos:start="403:32" pos:end="403:39">max_devs</name></expr>)</condition> <block pos:start="403:42" pos:end="409:5">{<block_content pos:start="405:9" pos:end="407:18">

        <expr_stmt pos:start="405:9" pos:end="405:75"><expr pos:start="405:9" pos:end="405:74"><call pos:start="405:9" pos:end="405:74"><name pos:start="405:9" pos:end="405:20">error_report</name><argument_list pos:start="405:21" pos:end="405:74">(<argument pos:start="405:22" pos:end="405:50"><expr pos:start="405:22" pos:end="405:50"><literal type="string" pos:start="405:22" pos:end="405:50">"unit %d too big (max is %d)"</literal></expr></argument>, <argument pos:start="405:53" pos:end="405:59"><expr pos:start="405:53" pos:end="405:59"><name pos:start="405:53" pos:end="405:59">unit_id</name></expr></argument>, <argument pos:start="405:62" pos:end="405:73"><expr pos:start="405:62" pos:end="405:73"><name pos:start="405:62" pos:end="405:69">max_devs</name> <operator pos:start="405:71" pos:end="405:71">-</operator> <literal type="number" pos:start="405:73" pos:end="405:73">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="407:9" pos:end="407:18">goto <name pos:start="407:14" pos:end="407:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="413:5" pos:end="421:5"><if pos:start="413:5" pos:end="421:5">if <condition pos:start="413:8" pos:end="413:49">(<expr pos:start="413:9" pos:end="413:48"><call pos:start="413:9" pos:end="413:40"><name pos:start="413:9" pos:end="413:17">drive_get</name><argument_list pos:start="413:18" pos:end="413:40">(<argument pos:start="413:19" pos:end="413:22"><expr pos:start="413:19" pos:end="413:22"><name pos:start="413:19" pos:end="413:22">type</name></expr></argument>, <argument pos:start="413:25" pos:end="413:30"><expr pos:start="413:25" pos:end="413:30"><name pos:start="413:25" pos:end="413:30">bus_id</name></expr></argument>, <argument pos:start="413:33" pos:end="413:39"><expr pos:start="413:33" pos:end="413:39"><name pos:start="413:33" pos:end="413:39">unit_id</name></expr></argument>)</argument_list></call> <operator pos:start="413:42" pos:end="413:43">!=</operator> <name pos:start="413:45" pos:end="413:48">NULL</name></expr>)</condition> <block pos:start="413:51" pos:end="421:5">{<block_content pos:start="415:9" pos:end="419:18">

        <expr_stmt pos:start="415:9" pos:end="417:45"><expr pos:start="415:9" pos:end="417:44"><call pos:start="415:9" pos:end="417:44"><name pos:start="415:9" pos:end="415:20">error_report</name><argument_list pos:start="415:21" pos:end="417:44">(<argument pos:start="415:22" pos:end="415:67"><expr pos:start="415:22" pos:end="415:67"><literal type="string" pos:start="415:22" pos:end="415:67">"drive with bus=%d, unit=%d (index=%d) exists"</literal></expr></argument>,

                     <argument pos:start="417:22" pos:end="417:27"><expr pos:start="417:22" pos:end="417:27"><name pos:start="417:22" pos:end="417:27">bus_id</name></expr></argument>, <argument pos:start="417:30" pos:end="417:36"><expr pos:start="417:30" pos:end="417:36"><name pos:start="417:30" pos:end="417:36">unit_id</name></expr></argument>, <argument pos:start="417:39" pos:end="417:43"><expr pos:start="417:39" pos:end="417:43"><name pos:start="417:39" pos:end="417:43">index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="419:9" pos:end="419:18">goto <name pos:start="419:14" pos:end="419:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="425:5" pos:end="425:38">/* no id supplied -&gt; create one */</comment>

    <if_stmt pos:start="427:5" pos:end="457:5"><if pos:start="427:5" pos:end="457:5">if <condition pos:start="427:8" pos:end="427:39">(<expr pos:start="427:9" pos:end="427:38"><call pos:start="427:9" pos:end="427:30"><name pos:start="427:9" pos:end="427:20">qemu_opts_id</name><argument_list pos:start="427:21" pos:end="427:30">(<argument pos:start="427:22" pos:end="427:29"><expr pos:start="427:22" pos:end="427:29"><name pos:start="427:22" pos:end="427:29">all_opts</name></expr></argument>)</argument_list></call> <operator pos:start="427:32" pos:end="427:33">==</operator> <name pos:start="427:35" pos:end="427:38">NULL</name></expr>)</condition> <block pos:start="427:41" pos:end="457:5">{<block_content pos:start="429:9" pos:end="455:23">

        <decl_stmt pos:start="429:9" pos:end="429:21"><decl pos:start="429:9" pos:end="429:20"><type pos:start="429:9" pos:end="429:14"><name pos:start="429:9" pos:end="429:12">char</name> <modifier pos:start="429:14" pos:end="429:14">*</modifier></type><name pos:start="429:15" pos:end="429:20">new_id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="431:9" pos:end="431:34"><decl pos:start="431:9" pos:end="431:33"><type pos:start="431:9" pos:end="431:20"><specifier pos:start="431:9" pos:end="431:13">const</specifier> <name pos:start="431:15" pos:end="431:18">char</name> <modifier pos:start="431:20" pos:end="431:20">*</modifier></type><name pos:start="431:21" pos:end="431:28">mediastr</name> <init pos:start="431:30" pos:end="431:33">= <expr pos:start="431:32" pos:end="431:33"><literal type="string" pos:start="431:32" pos:end="431:33">""</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="433:9" pos:end="437:9"><if pos:start="433:9" pos:end="437:9">if <condition pos:start="433:12" pos:end="433:46">(<expr pos:start="433:13" pos:end="433:45"><name pos:start="433:13" pos:end="433:16">type</name> <operator pos:start="433:18" pos:end="433:19">==</operator> <name pos:start="433:21" pos:end="433:26">IF_IDE</name> <operator pos:start="433:28" pos:end="433:29">||</operator> <name pos:start="433:31" pos:end="433:34">type</name> <operator pos:start="433:36" pos:end="433:37">==</operator> <name pos:start="433:39" pos:end="433:45">IF_SCSI</name></expr>)</condition> <block pos:start="433:48" pos:end="437:9">{<block_content pos:start="435:13" pos:end="435:62">

            <expr_stmt pos:start="435:13" pos:end="435:62"><expr pos:start="435:13" pos:end="435:61"><name pos:start="435:13" pos:end="435:20">mediastr</name> <operator pos:start="435:22" pos:end="435:22">=</operator> <ternary pos:start="435:24" pos:end="435:61"><condition pos:start="435:24" pos:end="435:47"><expr pos:start="435:24" pos:end="435:45"><operator pos:start="435:24" pos:end="435:24">(</operator><name pos:start="435:25" pos:end="435:29">media</name> <operator pos:start="435:31" pos:end="435:32">==</operator> <name pos:start="435:34" pos:end="435:44">MEDIA_CDROM</name><operator pos:start="435:45" pos:end="435:45">)</operator></expr> ?</condition><then pos:start="435:49" pos:end="435:53"> <expr pos:start="435:49" pos:end="435:53"><literal type="string" pos:start="435:49" pos:end="435:53">"-cd"</literal></expr> </then><else pos:start="435:55" pos:end="435:61">: <expr pos:start="435:57" pos:end="435:61"><literal type="string" pos:start="435:57" pos:end="435:61">"-hd"</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="439:9" pos:end="451:9"><if pos:start="439:9" pos:end="445:9">if <condition pos:start="439:12" pos:end="439:21">(<expr pos:start="439:13" pos:end="439:20"><name pos:start="439:13" pos:end="439:20">max_devs</name></expr>)</condition> <block pos:start="439:23" pos:end="445:9">{<block_content pos:start="441:13" pos:end="443:56">

            <expr_stmt pos:start="441:13" pos:end="443:56"><expr pos:start="441:13" pos:end="443:55"><name pos:start="441:13" pos:end="441:18">new_id</name> <operator pos:start="441:20" pos:end="441:20">=</operator> <call pos:start="441:22" pos:end="443:55"><name pos:start="441:22" pos:end="441:36">g_strdup_printf</name><argument_list pos:start="441:37" pos:end="443:55">(<argument pos:start="441:38" pos:end="441:47"><expr pos:start="441:38" pos:end="441:47"><literal type="string" pos:start="441:38" pos:end="441:47">"%s%i%s%i"</literal></expr></argument>, <argument pos:start="441:50" pos:end="441:62"><expr pos:start="441:50" pos:end="441:62"><name pos:start="441:50" pos:end="441:62"><name pos:start="441:50" pos:end="441:56">if_name</name><index pos:start="441:57" pos:end="441:62">[<expr pos:start="441:58" pos:end="441:61"><name pos:start="441:58" pos:end="441:61">type</name></expr>]</index></name></expr></argument>, <argument pos:start="441:65" pos:end="441:70"><expr pos:start="441:65" pos:end="441:70"><name pos:start="441:65" pos:end="441:70">bus_id</name></expr></argument>,

                                     <argument pos:start="443:38" pos:end="443:45"><expr pos:start="443:38" pos:end="443:45"><name pos:start="443:38" pos:end="443:45">mediastr</name></expr></argument>, <argument pos:start="443:48" pos:end="443:54"><expr pos:start="443:48" pos:end="443:54"><name pos:start="443:48" pos:end="443:54">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="445:11" pos:end="451:9">else <block pos:start="445:16" pos:end="451:9">{<block_content pos:start="447:13" pos:end="449:56">

            <expr_stmt pos:start="447:13" pos:end="449:56"><expr pos:start="447:13" pos:end="449:55"><name pos:start="447:13" pos:end="447:18">new_id</name> <operator pos:start="447:20" pos:end="447:20">=</operator> <call pos:start="447:22" pos:end="449:55"><name pos:start="447:22" pos:end="447:36">g_strdup_printf</name><argument_list pos:start="447:37" pos:end="449:55">(<argument pos:start="447:38" pos:end="447:45"><expr pos:start="447:38" pos:end="447:45"><literal type="string" pos:start="447:38" pos:end="447:45">"%s%s%i"</literal></expr></argument>, <argument pos:start="447:48" pos:end="447:60"><expr pos:start="447:48" pos:end="447:60"><name pos:start="447:48" pos:end="447:60"><name pos:start="447:48" pos:end="447:54">if_name</name><index pos:start="447:55" pos:end="447:60">[<expr pos:start="447:56" pos:end="447:59"><name pos:start="447:56" pos:end="447:59">type</name></expr>]</index></name></expr></argument>,

                                     <argument pos:start="449:38" pos:end="449:45"><expr pos:start="449:38" pos:end="449:45"><name pos:start="449:38" pos:end="449:45">mediastr</name></expr></argument>, <argument pos:start="449:48" pos:end="449:54"><expr pos:start="449:48" pos:end="449:54"><name pos:start="449:48" pos:end="449:54">unit_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="453:9" pos:end="453:59"><expr pos:start="453:9" pos:end="453:58"><call pos:start="453:9" pos:end="453:58"><name pos:start="453:9" pos:end="453:17">qdict_put</name><argument_list pos:start="453:18" pos:end="453:58">(<argument pos:start="453:19" pos:end="453:25"><expr pos:start="453:19" pos:end="453:25"><name pos:start="453:19" pos:end="453:25">bs_opts</name></expr></argument>, <argument pos:start="453:28" pos:end="453:31"><expr pos:start="453:28" pos:end="453:31"><literal type="string" pos:start="453:28" pos:end="453:31">"id"</literal></expr></argument>, <argument pos:start="453:34" pos:end="453:57"><expr pos:start="453:34" pos:end="453:57"><call pos:start="453:34" pos:end="453:57"><name pos:start="453:34" pos:end="453:49">qstring_from_str</name><argument_list pos:start="453:50" pos:end="453:57">(<argument pos:start="453:51" pos:end="453:56"><expr pos:start="453:51" pos:end="453:56"><name pos:start="453:51" pos:end="453:56">new_id</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="455:9" pos:end="455:23"><expr pos:start="455:9" pos:end="455:22"><call pos:start="455:9" pos:end="455:22"><name pos:start="455:9" pos:end="455:14">g_free</name><argument_list pos:start="455:15" pos:end="455:22">(<argument pos:start="455:16" pos:end="455:21"><expr pos:start="455:16" pos:end="455:21"><name pos:start="455:16" pos:end="455:21">new_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="461:5" pos:end="461:33">/* Add virtio block device */</comment>

    <expr_stmt pos:start="463:5" pos:end="463:48"><expr pos:start="463:5" pos:end="463:47"><name pos:start="463:5" pos:end="463:11">devaddr</name> <operator pos:start="463:13" pos:end="463:13">=</operator> <call pos:start="463:15" pos:end="463:47"><name pos:start="463:15" pos:end="463:26">qemu_opt_get</name><argument_list pos:start="463:27" pos:end="463:47">(<argument pos:start="463:28" pos:end="463:38"><expr pos:start="463:28" pos:end="463:38"><name pos:start="463:28" pos:end="463:38">legacy_opts</name></expr></argument>, <argument pos:start="463:41" pos:end="463:46"><expr pos:start="463:41" pos:end="463:46"><literal type="string" pos:start="463:41" pos:end="463:46">"addr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="465:5" pos:end="471:5"><if pos:start="465:5" pos:end="471:5">if <condition pos:start="465:8" pos:end="465:37">(<expr pos:start="465:9" pos:end="465:36"><name pos:start="465:9" pos:end="465:15">devaddr</name> <operator pos:start="465:17" pos:end="465:18">&amp;&amp;</operator> <name pos:start="465:20" pos:end="465:23">type</name> <operator pos:start="465:25" pos:end="465:26">!=</operator> <name pos:start="465:28" pos:end="465:36">IF_VIRTIO</name></expr>)</condition> <block pos:start="465:39" pos:end="471:5">{<block_content pos:start="467:9" pos:end="469:18">

        <expr_stmt pos:start="467:9" pos:end="467:63"><expr pos:start="467:9" pos:end="467:62"><call pos:start="467:9" pos:end="467:62"><name pos:start="467:9" pos:end="467:20">error_report</name><argument_list pos:start="467:21" pos:end="467:62">(<argument pos:start="467:22" pos:end="467:61"><expr pos:start="467:22" pos:end="467:61"><literal type="string" pos:start="467:22" pos:end="467:61">"addr is not supported by this bus type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="469:9" pos:end="469:18">goto <name pos:start="469:14" pos:end="469:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="475:5" pos:end="501:5"><if pos:start="475:5" pos:end="501:5">if <condition pos:start="475:8" pos:end="475:26">(<expr pos:start="475:9" pos:end="475:25"><name pos:start="475:9" pos:end="475:12">type</name> <operator pos:start="475:14" pos:end="475:15">==</operator> <name pos:start="475:17" pos:end="475:25">IF_VIRTIO</name></expr>)</condition> <block pos:start="475:28" pos:end="501:5">{<block_content pos:start="477:9" pos:end="499:9">

        <decl_stmt pos:start="477:9" pos:end="477:26"><decl pos:start="477:9" pos:end="477:25"><type pos:start="477:9" pos:end="477:18"><name pos:start="477:9" pos:end="477:16">QemuOpts</name> <modifier pos:start="477:18" pos:end="477:18">*</modifier></type><name pos:start="477:19" pos:end="477:25">devopts</name></decl>;</decl_stmt>

        <expr_stmt pos:start="479:9" pos:end="481:49"><expr pos:start="479:9" pos:end="481:48"><name pos:start="479:9" pos:end="479:15">devopts</name> <operator pos:start="479:17" pos:end="479:17">=</operator> <call pos:start="479:19" pos:end="481:48"><name pos:start="479:19" pos:end="479:34">qemu_opts_create</name><argument_list pos:start="479:35" pos:end="481:48">(<argument pos:start="479:36" pos:end="479:59"><expr pos:start="479:36" pos:end="479:59"><call pos:start="479:36" pos:end="479:59"><name pos:start="479:36" pos:end="479:49">qemu_find_opts</name><argument_list pos:start="479:50" pos:end="479:59">(<argument pos:start="479:51" pos:end="479:58"><expr pos:start="479:51" pos:end="479:58"><literal type="string" pos:start="479:51" pos:end="479:58">"device"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="479:62" pos:end="479:65"><expr pos:start="479:62" pos:end="479:65"><name pos:start="479:62" pos:end="479:65">NULL</name></expr></argument>, <argument pos:start="479:68" pos:end="479:68"><expr pos:start="479:68" pos:end="479:68"><literal type="number" pos:start="479:68" pos:end="479:68">0</literal></expr></argument>,

                                   <argument pos:start="481:36" pos:end="481:47"><expr pos:start="481:36" pos:end="481:47"><operator pos:start="481:36" pos:end="481:36">&amp;</operator><name pos:start="481:37" pos:end="481:47">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="483:9" pos:end="491:9"><if pos:start="483:9" pos:end="487:9">if <condition pos:start="483:12" pos:end="483:41">(<expr pos:start="483:13" pos:end="483:40"><name pos:start="483:13" pos:end="483:21">arch_type</name> <operator pos:start="483:23" pos:end="483:24">==</operator> <name pos:start="483:26" pos:end="483:40">QEMU_ARCH_S390X</name></expr>)</condition> <block pos:start="483:43" pos:end="487:9">{<block_content pos:start="485:13" pos:end="485:63">

            <expr_stmt pos:start="485:13" pos:end="485:63"><expr pos:start="485:13" pos:end="485:62"><call pos:start="485:13" pos:end="485:62"><name pos:start="485:13" pos:end="485:24">qemu_opt_set</name><argument_list pos:start="485:25" pos:end="485:62">(<argument pos:start="485:26" pos:end="485:32"><expr pos:start="485:26" pos:end="485:32"><name pos:start="485:26" pos:end="485:32">devopts</name></expr></argument>, <argument pos:start="485:35" pos:end="485:42"><expr pos:start="485:35" pos:end="485:42"><literal type="string" pos:start="485:35" pos:end="485:42">"driver"</literal></expr></argument>, <argument pos:start="485:45" pos:end="485:61"><expr pos:start="485:45" pos:end="485:61"><literal type="string" pos:start="485:45" pos:end="485:61">"virtio-blk-s390"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="487:11" pos:end="491:9">else <block pos:start="487:16" pos:end="491:9">{<block_content pos:start="489:13" pos:end="489:62">

            <expr_stmt pos:start="489:13" pos:end="489:62"><expr pos:start="489:13" pos:end="489:61"><call pos:start="489:13" pos:end="489:61"><name pos:start="489:13" pos:end="489:24">qemu_opt_set</name><argument_list pos:start="489:25" pos:end="489:61">(<argument pos:start="489:26" pos:end="489:32"><expr pos:start="489:26" pos:end="489:32"><name pos:start="489:26" pos:end="489:32">devopts</name></expr></argument>, <argument pos:start="489:35" pos:end="489:42"><expr pos:start="489:35" pos:end="489:42"><literal type="string" pos:start="489:35" pos:end="489:42">"driver"</literal></expr></argument>, <argument pos:start="489:45" pos:end="489:60"><expr pos:start="489:45" pos:end="489:60"><literal type="string" pos:start="489:45" pos:end="489:60">"virtio-blk-pci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="493:9" pos:end="493:69"><expr pos:start="493:9" pos:end="493:68"><call pos:start="493:9" pos:end="493:68"><name pos:start="493:9" pos:end="493:20">qemu_opt_set</name><argument_list pos:start="493:21" pos:end="493:68">(<argument pos:start="493:22" pos:end="493:28"><expr pos:start="493:22" pos:end="493:28"><name pos:start="493:22" pos:end="493:28">devopts</name></expr></argument>, <argument pos:start="493:31" pos:end="493:37"><expr pos:start="493:31" pos:end="493:37"><literal type="string" pos:start="493:31" pos:end="493:37">"drive"</literal></expr></argument>, <argument pos:start="493:40" pos:end="493:67"><expr pos:start="493:40" pos:end="493:67"><call pos:start="493:40" pos:end="493:67"><name pos:start="493:40" pos:end="493:52">qdict_get_str</name><argument_list pos:start="493:53" pos:end="493:67">(<argument pos:start="493:54" pos:end="493:60"><expr pos:start="493:54" pos:end="493:60"><name pos:start="493:54" pos:end="493:60">bs_opts</name></expr></argument>, <argument pos:start="493:63" pos:end="493:66"><expr pos:start="493:63" pos:end="493:66"><literal type="string" pos:start="493:63" pos:end="493:66">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="495:9" pos:end="499:9"><if pos:start="495:9" pos:end="499:9">if <condition pos:start="495:12" pos:end="495:20">(<expr pos:start="495:13" pos:end="495:19"><name pos:start="495:13" pos:end="495:19">devaddr</name></expr>)</condition> <block pos:start="495:22" pos:end="499:9">{<block_content pos:start="497:13" pos:end="497:51">

            <expr_stmt pos:start="497:13" pos:end="497:51"><expr pos:start="497:13" pos:end="497:50"><call pos:start="497:13" pos:end="497:50"><name pos:start="497:13" pos:end="497:24">qemu_opt_set</name><argument_list pos:start="497:25" pos:end="497:50">(<argument pos:start="497:26" pos:end="497:32"><expr pos:start="497:26" pos:end="497:32"><name pos:start="497:26" pos:end="497:32">devopts</name></expr></argument>, <argument pos:start="497:35" pos:end="497:40"><expr pos:start="497:35" pos:end="497:40"><literal type="string" pos:start="497:35" pos:end="497:40">"addr"</literal></expr></argument>, <argument pos:start="497:43" pos:end="497:49"><expr pos:start="497:43" pos:end="497:49"><name pos:start="497:43" pos:end="497:49">devaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="505:5" pos:end="505:49"><expr pos:start="505:5" pos:end="505:48"><name pos:start="505:5" pos:end="505:12">filename</name> <operator pos:start="505:14" pos:end="505:14">=</operator> <call pos:start="505:16" pos:end="505:48"><name pos:start="505:16" pos:end="505:27">qemu_opt_get</name><argument_list pos:start="505:28" pos:end="505:48">(<argument pos:start="505:29" pos:end="505:39"><expr pos:start="505:29" pos:end="505:39"><name pos:start="505:29" pos:end="505:39">legacy_opts</name></expr></argument>, <argument pos:start="505:42" pos:end="505:47"><expr pos:start="505:42" pos:end="505:47"><literal type="string" pos:start="505:42" pos:end="505:47">"file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="509:5" pos:end="509:74">/* Actual block device init: Functionality shared with blockdev-add */</comment>

    <expr_stmt pos:start="511:5" pos:end="511:63"><expr pos:start="511:5" pos:end="511:62"><name pos:start="511:5" pos:end="511:9">dinfo</name> <operator pos:start="511:11" pos:end="511:11">=</operator> <call pos:start="511:13" pos:end="511:62"><name pos:start="511:13" pos:end="511:25">blockdev_init</name><argument_list pos:start="511:26" pos:end="511:62">(<argument pos:start="511:27" pos:end="511:34"><expr pos:start="511:27" pos:end="511:34"><name pos:start="511:27" pos:end="511:34">filename</name></expr></argument>, <argument pos:start="511:37" pos:end="511:43"><expr pos:start="511:37" pos:end="511:43"><name pos:start="511:37" pos:end="511:43">bs_opts</name></expr></argument>, <argument pos:start="511:46" pos:end="511:49"><expr pos:start="511:46" pos:end="511:49"><name pos:start="511:46" pos:end="511:49">type</name></expr></argument>, <argument pos:start="511:52" pos:end="511:61"><expr pos:start="511:52" pos:end="511:61"><operator pos:start="511:52" pos:end="511:52">&amp;</operator><name pos:start="511:53" pos:end="511:61">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="513:5" pos:end="529:5"><if pos:start="513:5" pos:end="525:5">if <condition pos:start="513:8" pos:end="513:22">(<expr pos:start="513:9" pos:end="513:21"><name pos:start="513:9" pos:end="513:13">dinfo</name> <operator pos:start="513:15" pos:end="513:16">==</operator> <name pos:start="513:18" pos:end="513:21">NULL</name></expr>)</condition> <block pos:start="513:24" pos:end="525:5">{<block_content pos:start="515:9" pos:end="523:18">

        <if_stmt pos:start="515:9" pos:end="521:9"><if pos:start="515:9" pos:end="521:9">if <condition pos:start="515:12" pos:end="515:37">(<expr pos:start="515:13" pos:end="515:36"><call pos:start="515:13" pos:end="515:36"><name pos:start="515:13" pos:end="515:24">error_is_set</name><argument_list pos:start="515:25" pos:end="515:36">(<argument pos:start="515:26" pos:end="515:35"><expr pos:start="515:26" pos:end="515:35"><operator pos:start="515:26" pos:end="515:26">&amp;</operator><name pos:start="515:27" pos:end="515:35">local_err</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="515:39" pos:end="521:9">{<block_content pos:start="517:13" pos:end="519:34">

            <expr_stmt pos:start="517:13" pos:end="517:41"><expr pos:start="517:13" pos:end="517:40"><call pos:start="517:13" pos:end="517:40"><name pos:start="517:13" pos:end="517:29">qerror_report_err</name><argument_list pos:start="517:30" pos:end="517:40">(<argument pos:start="517:31" pos:end="517:39"><expr pos:start="517:31" pos:end="517:39"><name pos:start="517:31" pos:end="517:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:34"><expr pos:start="519:13" pos:end="519:33"><call pos:start="519:13" pos:end="519:33"><name pos:start="519:13" pos:end="519:22">error_free</name><argument_list pos:start="519:23" pos:end="519:33">(<argument pos:start="519:24" pos:end="519:32"><expr pos:start="519:24" pos:end="519:32"><name pos:start="519:24" pos:end="519:32">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <goto pos:start="523:9" pos:end="523:18">goto <name pos:start="523:14" pos:end="523:17">fail</name>;</goto>

    </block_content>}</block></if> <else pos:start="525:7" pos:end="529:5">else <block pos:start="525:12" pos:end="529:5">{<block_content pos:start="527:9" pos:end="527:42">

        <expr_stmt pos:start="527:9" pos:end="527:42"><expr pos:start="527:9" pos:end="527:41"><call pos:start="527:9" pos:end="527:41"><name pos:start="527:9" pos:end="527:14">assert</name><argument_list pos:start="527:15" pos:end="527:41">(<argument pos:start="527:16" pos:end="527:40"><expr pos:start="527:16" pos:end="527:40"><operator pos:start="527:16" pos:end="527:16">!</operator><call pos:start="527:17" pos:end="527:40"><name pos:start="527:17" pos:end="527:28">error_is_set</name><argument_list pos:start="527:29" pos:end="527:40">(<argument pos:start="527:30" pos:end="527:39"><expr pos:start="527:30" pos:end="527:39"><operator pos:start="527:30" pos:end="527:30">&amp;</operator><name pos:start="527:31" pos:end="527:39">local_err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="533:5" pos:end="533:37">/* Set legacy DriveInfo fields */</comment>

    <expr_stmt pos:start="535:5" pos:end="535:34"><expr pos:start="535:5" pos:end="535:33"><name pos:start="535:5" pos:end="535:26"><name pos:start="535:5" pos:end="535:9">dinfo</name><operator pos:start="535:10" pos:end="535:11">-&gt;</operator><name pos:start="535:12" pos:end="535:26">enable_auto_del</name></name> <operator pos:start="535:28" pos:end="535:28">=</operator> <name pos:start="535:30" pos:end="535:33">true</name></expr>;</expr_stmt>

    <expr_stmt pos:start="537:5" pos:end="537:27"><expr pos:start="537:5" pos:end="537:26"><name pos:start="537:5" pos:end="537:15"><name pos:start="537:5" pos:end="537:9">dinfo</name><operator pos:start="537:10" pos:end="537:11">-&gt;</operator><name pos:start="537:12" pos:end="537:15">opts</name></name> <operator pos:start="537:17" pos:end="537:17">=</operator> <name pos:start="537:19" pos:end="537:26">all_opts</name></expr>;</expr_stmt>



    <expr_stmt pos:start="541:5" pos:end="541:23"><expr pos:start="541:5" pos:end="541:22"><name pos:start="541:5" pos:end="541:15"><name pos:start="541:5" pos:end="541:9">dinfo</name><operator pos:start="541:10" pos:end="541:11">-&gt;</operator><name pos:start="541:12" pos:end="541:15">cyls</name></name> <operator pos:start="541:17" pos:end="541:17">=</operator> <name pos:start="541:19" pos:end="541:22">cyls</name></expr>;</expr_stmt>

    <expr_stmt pos:start="543:5" pos:end="543:25"><expr pos:start="543:5" pos:end="543:24"><name pos:start="543:5" pos:end="543:16"><name pos:start="543:5" pos:end="543:9">dinfo</name><operator pos:start="543:10" pos:end="543:11">-&gt;</operator><name pos:start="543:12" pos:end="543:16">heads</name></name> <operator pos:start="543:18" pos:end="543:18">=</operator> <name pos:start="543:20" pos:end="543:24">heads</name></expr>;</expr_stmt>

    <expr_stmt pos:start="545:5" pos:end="545:23"><expr pos:start="545:5" pos:end="545:22"><name pos:start="545:5" pos:end="545:15"><name pos:start="545:5" pos:end="545:9">dinfo</name><operator pos:start="545:10" pos:end="545:11">-&gt;</operator><name pos:start="545:12" pos:end="545:15">secs</name></name> <operator pos:start="545:17" pos:end="545:17">=</operator> <name pos:start="545:19" pos:end="545:22">secs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="547:5" pos:end="547:31"><expr pos:start="547:5" pos:end="547:30"><name pos:start="547:5" pos:end="547:16"><name pos:start="547:5" pos:end="547:9">dinfo</name><operator pos:start="547:10" pos:end="547:11">-&gt;</operator><name pos:start="547:12" pos:end="547:16">trans</name></name> <operator pos:start="547:18" pos:end="547:18">=</operator> <name pos:start="547:20" pos:end="547:30">translation</name></expr>;</expr_stmt>



    <expr_stmt pos:start="551:5" pos:end="551:24"><expr pos:start="551:5" pos:end="551:23"><name pos:start="551:5" pos:end="551:14"><name pos:start="551:5" pos:end="551:9">dinfo</name><operator pos:start="551:10" pos:end="551:11">-&gt;</operator><name pos:start="551:12" pos:end="551:14">bus</name></name> <operator pos:start="551:16" pos:end="551:16">=</operator> <name pos:start="551:18" pos:end="551:23">bus_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="553:5" pos:end="553:26"><expr pos:start="553:5" pos:end="553:25"><name pos:start="553:5" pos:end="553:15"><name pos:start="553:5" pos:end="553:9">dinfo</name><operator pos:start="553:10" pos:end="553:11">-&gt;</operator><name pos:start="553:12" pos:end="553:15">unit</name></name> <operator pos:start="553:17" pos:end="553:17">=</operator> <name pos:start="553:19" pos:end="553:25">unit_id</name></expr>;</expr_stmt>

    <expr_stmt pos:start="555:5" pos:end="555:29"><expr pos:start="555:5" pos:end="555:28"><name pos:start="555:5" pos:end="555:18"><name pos:start="555:5" pos:end="555:9">dinfo</name><operator pos:start="555:10" pos:end="555:11">-&gt;</operator><name pos:start="555:12" pos:end="555:18">devaddr</name></name> <operator pos:start="555:20" pos:end="555:20">=</operator> <name pos:start="555:22" pos:end="555:28">devaddr</name></expr>;</expr_stmt>



    <switch pos:start="559:5" pos:end="577:5">switch<condition pos:start="559:11" pos:end="559:16">(<expr pos:start="559:12" pos:end="559:15"><name pos:start="559:12" pos:end="559:15">type</name></expr>)</condition> <block pos:start="559:18" pos:end="577:5">{<block_content pos:start="561:5" pos:end="575:14">

    <case pos:start="561:5" pos:end="561:16">case <expr pos:start="561:10" pos:end="561:15"><name pos:start="561:10" pos:end="561:15">IF_IDE</name></expr>:</case>

    <case pos:start="563:5" pos:end="563:17">case <expr pos:start="563:10" pos:end="563:16"><name pos:start="563:10" pos:end="563:16">IF_SCSI</name></expr>:</case>

    <case pos:start="565:5" pos:end="565:16">case <expr pos:start="565:10" pos:end="565:15"><name pos:start="565:10" pos:end="565:15">IF_XEN</name></expr>:</case>

    <case pos:start="567:5" pos:end="567:17">case <expr pos:start="567:10" pos:end="567:16"><name pos:start="567:10" pos:end="567:16">IF_NONE</name></expr>:</case>

        <expr_stmt pos:start="569:9" pos:end="569:47"><expr pos:start="569:9" pos:end="569:46"><name pos:start="569:9" pos:end="569:23"><name pos:start="569:9" pos:end="569:13">dinfo</name><operator pos:start="569:14" pos:end="569:15">-&gt;</operator><name pos:start="569:16" pos:end="569:23">media_cd</name></name> <operator pos:start="569:25" pos:end="569:25">=</operator> <name pos:start="569:27" pos:end="569:31">media</name> <operator pos:start="569:33" pos:end="569:34">==</operator> <name pos:start="569:36" pos:end="569:46">MEDIA_CDROM</name></expr>;</expr_stmt>

        <break pos:start="571:9" pos:end="571:14">break;</break>

    <default pos:start="573:5" pos:end="573:12">default:</default>

        <break pos:start="575:9" pos:end="575:14">break;</break>

    </block_content>}</block></switch>



<label pos:start="581:1" pos:end="581:5"><name pos:start="581:1" pos:end="581:4">fail</name>:</label>

    <expr_stmt pos:start="583:5" pos:end="583:31"><expr pos:start="583:5" pos:end="583:30"><call pos:start="583:5" pos:end="583:30"><name pos:start="583:5" pos:end="583:17">qemu_opts_del</name><argument_list pos:start="583:18" pos:end="583:30">(<argument pos:start="583:19" pos:end="583:29"><expr pos:start="583:19" pos:end="583:29"><name pos:start="583:19" pos:end="583:29">legacy_opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="585:5" pos:end="585:17">return <expr pos:start="585:12" pos:end="585:16"><name pos:start="585:12" pos:end="585:16">dinfo</name></expr>;</return>

</block_content>}</block></function>
</unit>
