<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22498.c" pos:tabs="8"><function pos:start="1:1" pos:end="307:30"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mirror_start_job</name><parameter_list pos:start="1:29" pos:end="27:42">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><specifier pos:start="1:30" pos:end="1:34">const</specifier> <name pos:start="1:36" pos:end="1:39">char</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:47">job_id</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:65">BlockDriverState</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:69">bs</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:47"><decl pos:start="3:30" pos:end="3:47"><type pos:start="3:30" pos:end="3:47"><name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:47">creation_flags</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:73"><decl pos:start="3:50" pos:end="3:73"><type pos:start="3:50" pos:end="3:73"><name pos:start="3:50" pos:end="3:65">BlockDriverState</name> <modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:73">target</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:49"><decl pos:start="5:30" pos:end="5:49"><type pos:start="5:30" pos:end="5:49"><specifier pos:start="5:30" pos:end="5:34">const</specifier> <name pos:start="5:36" pos:end="5:39">char</name> <modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:49">replaces</name></decl></parameter>, <parameter pos:start="5:52" pos:end="5:64"><decl pos:start="5:52" pos:end="5:64"><type pos:start="5:52" pos:end="5:64"><name pos:start="5:52" pos:end="5:58">int64_t</name></type> <name pos:start="5:60" pos:end="5:64">speed</name></decl></parameter>,

                             <parameter pos:start="7:30" pos:end="7:49"><decl pos:start="7:30" pos:end="7:49"><type pos:start="7:30" pos:end="7:49"><name pos:start="7:30" pos:end="7:37">uint32_t</name></type> <name pos:start="7:39" pos:end="7:49">granularity</name></decl></parameter>, <parameter pos:start="7:52" pos:end="7:67"><decl pos:start="7:52" pos:end="7:67"><type pos:start="7:52" pos:end="7:67"><name pos:start="7:52" pos:end="7:58">int64_t</name></type> <name pos:start="7:60" pos:end="7:67">buf_size</name></decl></parameter>,

                             <parameter pos:start="9:30" pos:end="9:64"><decl pos:start="9:30" pos:end="9:64"><type pos:start="9:30" pos:end="9:64"><name pos:start="9:30" pos:end="9:51">BlockMirrorBackingMode</name></type> <name pos:start="9:53" pos:end="9:64">backing_mode</name></decl></parameter>,

                             <parameter pos:start="11:30" pos:end="11:60"><decl pos:start="11:30" pos:end="11:60"><type pos:start="11:30" pos:end="11:60"><name pos:start="11:30" pos:end="11:44">BlockdevOnError</name></type> <name pos:start="11:46" pos:end="11:60">on_source_error</name></decl></parameter>,

                             <parameter pos:start="13:30" pos:end="13:60"><decl pos:start="13:30" pos:end="13:60"><type pos:start="13:30" pos:end="13:60"><name pos:start="13:30" pos:end="13:44">BlockdevOnError</name></type> <name pos:start="13:46" pos:end="13:60">on_target_error</name></decl></parameter>,

                             <parameter pos:start="15:30" pos:end="15:39"><decl pos:start="15:30" pos:end="15:39"><type pos:start="15:30" pos:end="15:39"><name pos:start="15:30" pos:end="15:33">bool</name></type> <name pos:start="15:35" pos:end="15:39">unmap</name></decl></parameter>,

                             <parameter pos:start="17:30" pos:end="17:52"><decl pos:start="17:30" pos:end="17:52"><type pos:start="17:30" pos:end="17:52"><name pos:start="17:30" pos:end="17:48">BlockCompletionFunc</name> <modifier pos:start="17:50" pos:end="17:50">*</modifier></type><name pos:start="17:51" pos:end="17:52">cb</name></decl></parameter>,

                             <parameter pos:start="19:30" pos:end="19:41"><decl pos:start="19:30" pos:end="19:41"><type pos:start="19:30" pos:end="19:41"><name pos:start="19:30" pos:end="19:33">void</name> <modifier pos:start="19:35" pos:end="19:35">*</modifier></type><name pos:start="19:36" pos:end="19:41">opaque</name></decl></parameter>,

                             <parameter pos:start="21:30" pos:end="21:57"><decl pos:start="21:30" pos:end="21:57"><type pos:start="21:30" pos:end="21:57"><specifier pos:start="21:30" pos:end="21:34">const</specifier> <name pos:start="21:36" pos:end="21:49">BlockJobDriver</name> <modifier pos:start="21:51" pos:end="21:51">*</modifier></type><name pos:start="21:52" pos:end="21:57">driver</name></decl></parameter>,

                             <parameter pos:start="23:30" pos:end="23:46"><decl pos:start="23:30" pos:end="23:46"><type pos:start="23:30" pos:end="23:46"><name pos:start="23:30" pos:end="23:33">bool</name></type> <name pos:start="23:35" pos:end="23:46">is_none_mode</name></decl></parameter>, <parameter pos:start="23:49" pos:end="23:70"><decl pos:start="23:49" pos:end="23:70"><type pos:start="23:49" pos:end="23:70"><name pos:start="23:49" pos:end="23:64">BlockDriverState</name> <modifier pos:start="23:66" pos:end="23:66">*</modifier></type><name pos:start="23:67" pos:end="23:70">base</name></decl></parameter>,

                             <parameter pos:start="25:30" pos:end="25:47"><decl pos:start="25:30" pos:end="25:47"><type pos:start="25:30" pos:end="25:47"><name pos:start="25:30" pos:end="25:33">bool</name></type> <name pos:start="25:35" pos:end="25:47">auto_complete</name></decl></parameter>, <parameter pos:start="25:50" pos:end="25:77"><decl pos:start="25:50" pos:end="25:77"><type pos:start="25:50" pos:end="25:77"><specifier pos:start="25:50" pos:end="25:54">const</specifier> <name pos:start="25:56" pos:end="25:59">char</name> <modifier pos:start="25:61" pos:end="25:61">*</modifier></type><name pos:start="25:62" pos:end="25:77">filter_node_name</name></decl></parameter>,

                             <parameter pos:start="27:30" pos:end="27:41"><decl pos:start="27:30" pos:end="27:41"><type pos:start="27:30" pos:end="27:41"><name pos:start="27:30" pos:end="27:34">Error</name> <modifier pos:start="27:36" pos:end="27:36">*</modifier><modifier pos:start="27:37" pos:end="27:37">*</modifier></type><name pos:start="27:38" pos:end="27:41">errp</name></decl></parameter>)</parameter_list>

<block pos:start="29:1" pos:end="307:30">{<block_content pos:start="31:5" pos:end="307:30">

    <decl_stmt pos:start="31:5" pos:end="31:22"><decl pos:start="31:5" pos:end="31:21"><type pos:start="31:5" pos:end="31:20"><name pos:start="31:5" pos:end="31:18">MirrorBlockJob</name> <modifier pos:start="31:20" pos:end="31:20">*</modifier></type><name pos:start="31:21" pos:end="31:21">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:36"><decl pos:start="33:5" pos:end="33:35"><type pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:20">BlockDriverState</name> <modifier pos:start="33:22" pos:end="33:22">*</modifier></type><name pos:start="33:23" pos:end="33:35">mirror_top_bs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:26"><decl pos:start="35:5" pos:end="35:25"><type pos:start="35:5" pos:end="35:8"><name pos:start="35:5" pos:end="35:8">bool</name></type> <name pos:start="35:10" pos:end="35:25">target_graph_mod</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:27"><decl pos:start="37:5" pos:end="37:26"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">bool</name></type> <name pos:start="37:10" pos:end="37:26">target_is_backing</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:28"><decl pos:start="39:5" pos:end="39:27"><type pos:start="39:5" pos:end="39:11"><name pos:start="39:5" pos:end="39:9">Error</name> <modifier pos:start="39:11" pos:end="39:11">*</modifier></type><name pos:start="39:12" pos:end="39:20">local_err</name> <init pos:start="39:22" pos:end="39:27">= <expr pos:start="39:24" pos:end="39:27"><name pos:start="39:24" pos:end="39:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:12"><decl pos:start="41:5" pos:end="41:11"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="45:5" pos:end="307:30"><if pos:start="45:5" pos:end="307:30">if <condition pos:start="45:8" pos:end="45:25">(<expr pos:start="45:9" pos:end="45:24"><name pos:start="45:9" pos:end="45:19">granularity</name> <operator pos:start="45:21" pos:end="45:22">==</operator> <literal type="number" pos:start="45:24" pos:end="45:24">0</literal></expr>)</condition> <block pos:start="45:27" pos:end="307:30">{<block_content pos:start="47:9" pos:end="307:30">

        <expr_stmt pos:start="47:9" pos:end="47:66"><expr pos:start="47:9" pos:end="47:65"><name pos:start="47:9" pos:end="47:19">granularity</name> <operator pos:start="47:21" pos:end="47:21">=</operator> <call pos:start="47:23" pos:end="47:65"><name pos:start="47:23" pos:end="47:57">bdrv_get_default_bitmap_granularity</name><argument_list pos:start="47:58" pos:end="47:65">(<argument pos:start="47:59" pos:end="47:64"><expr pos:start="47:59" pos:end="47:64"><name pos:start="47:59" pos:end="47:64">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="52:5" pos:end="52:52"><expr pos:start="52:5" pos:end="52:51"><call pos:start="52:5" pos:end="52:51"><name pos:start="52:5" pos:end="52:10">assert</name> <argument_list pos:start="52:12" pos:end="52:51">(<argument pos:start="52:13" pos:end="52:50"><expr pos:start="52:13" pos:end="52:50"><operator pos:start="52:13" pos:end="52:13">(</operator><name pos:start="52:14" pos:end="52:24">granularity</name> <operator pos:start="52:26" pos:end="52:26">&amp;</operator> <operator pos:start="52:28" pos:end="52:28">(</operator><name pos:start="52:29" pos:end="52:39">granularity</name> <operator pos:start="52:41" pos:end="52:41">-</operator> <literal type="number" pos:start="52:43" pos:end="52:43">1</literal><operator pos:start="52:44" pos:end="52:44">)</operator><operator pos:start="52:45" pos:end="52:45">)</operator> <operator pos:start="52:47" pos:end="52:48">==</operator> <literal type="number" pos:start="52:50" pos:end="52:50">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="54:5" pos:end="54:72">/* Granularity must be large enough for sector-based dirty bitmap */</comment>

    <expr_stmt pos:start="56:5" pos:end="56:44"><expr pos:start="56:5" pos:end="56:43"><call pos:start="56:5" pos:end="56:43"><name pos:start="56:5" pos:end="56:10">assert</name><argument_list pos:start="56:11" pos:end="56:43">(<argument pos:start="56:12" pos:end="56:42"><expr pos:start="56:12" pos:end="56:42"><name pos:start="56:12" pos:end="56:22">granularity</name> <operator pos:start="56:24" pos:end="56:25">&gt;=</operator> <name pos:start="56:27" pos:end="56:42">BDRV_SECTOR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="60:5" pos:end="307:30"><if pos:start="60:5" pos:end="307:30">if <condition pos:start="60:8" pos:end="60:21">(<expr pos:start="60:9" pos:end="60:20"><name pos:start="60:9" pos:end="60:16">buf_size</name> <operator pos:start="60:18" pos:end="60:18">&lt;</operator> <literal type="number" pos:start="60:20" pos:end="60:20">0</literal></expr>)</condition> <block pos:start="60:23" pos:end="307:30">{<block_content pos:start="62:9" pos:end="307:30">

        <expr_stmt pos:start="62:9" pos:end="62:57"><expr pos:start="62:9" pos:end="62:56"><call pos:start="62:9" pos:end="62:56"><name pos:start="62:9" pos:end="62:18">error_setg</name><argument_list pos:start="62:19" pos:end="62:56">(<argument pos:start="62:20" pos:end="62:23"><expr pos:start="62:20" pos:end="62:23"><name pos:start="62:20" pos:end="62:23">errp</name></expr></argument>, <argument pos:start="62:26" pos:end="62:55"><expr pos:start="62:26" pos:end="62:55"><literal type="string" pos:start="62:26" pos:end="62:55">"Invalid parameter 'buf-size'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="64:9" pos:end="64:15">return;</return>




    <if_stmt pos:start="69:5" pos:end="307:30"><if pos:start="69:5" pos:end="307:30">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:16">buf_size</name> <operator pos:start="69:18" pos:end="69:19">==</operator> <literal type="number" pos:start="69:21" pos:end="69:21">0</literal></expr>)</condition> <block pos:start="69:24" pos:end="307:30">{<block_content pos:start="71:9" pos:end="307:30">

        <expr_stmt pos:start="71:9" pos:end="71:43"><expr pos:start="71:9" pos:end="71:42"><name pos:start="71:9" pos:end="71:16">buf_size</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <name pos:start="71:20" pos:end="71:42">DEFAULT_MIRROR_BUF_SIZE</name></expr>;</expr_stmt>




    <comment type="block" pos:start="76:5" pos:end="80:37">/* In the case of active commit, add dummy driver to provide consistent

     * reads on the top, while disabling it in the intermediate nodes, and make

     * the backing chain writable. */</comment>

    <expr_stmt pos:start="82:5" pos:end="84:60"><expr pos:start="82:5" pos:end="84:59"><name pos:start="82:5" pos:end="82:17">mirror_top_bs</name> <operator pos:start="82:19" pos:end="82:19">=</operator> <call pos:start="82:21" pos:end="84:59"><name pos:start="82:21" pos:end="82:40">bdrv_new_open_driver</name><argument_list pos:start="82:41" pos:end="84:59">(<argument pos:start="82:42" pos:end="82:57"><expr pos:start="82:42" pos:end="82:57"><operator pos:start="82:42" pos:end="82:42">&amp;</operator><name pos:start="82:43" pos:end="82:57">bdrv_mirror_top</name></expr></argument>, <argument pos:start="82:60" pos:end="82:75"><expr pos:start="82:60" pos:end="82:75"><name pos:start="82:60" pos:end="82:75">filter_node_name</name></expr></argument>,

                                         <argument pos:start="84:42" pos:end="84:52"><expr pos:start="84:42" pos:end="84:52"><name pos:start="84:42" pos:end="84:52">BDRV_O_RDWR</name></expr></argument>, <argument pos:start="84:55" pos:end="84:58"><expr pos:start="84:55" pos:end="84:58"><name pos:start="84:55" pos:end="84:58">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="86:5" pos:end="307:30"><if pos:start="86:5" pos:end="307:30">if <condition pos:start="86:8" pos:end="86:30">(<expr pos:start="86:9" pos:end="86:29"><name pos:start="86:9" pos:end="86:21">mirror_top_bs</name> <operator pos:start="86:23" pos:end="86:24">==</operator> <name pos:start="86:26" pos:end="86:29">NULL</name></expr>)</condition> <block pos:start="86:32" pos:end="307:30">{<block_content pos:start="88:9" pos:end="307:30">

        <return pos:start="88:9" pos:end="88:15">return;</return>





    <expr_stmt pos:start="94:5" pos:end="94:53"><expr pos:start="94:5" pos:end="94:52"><name pos:start="94:5" pos:end="94:32"><name pos:start="94:5" pos:end="94:17">mirror_top_bs</name><operator pos:start="94:18" pos:end="94:19">-&gt;</operator><name pos:start="94:20" pos:end="94:32">total_sectors</name></name> <operator pos:start="94:34" pos:end="94:34">=</operator> <name pos:start="94:36" pos:end="94:52"><name pos:start="94:36" pos:end="94:37">bs</name><operator pos:start="94:38" pos:end="94:39">-&gt;</operator><name pos:start="94:40" pos:end="94:52">total_sectors</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="96:5" pos:end="96:66"><expr pos:start="96:5" pos:end="96:65"><call pos:start="96:5" pos:end="96:65"><name pos:start="96:5" pos:end="96:24">bdrv_set_aio_context</name><argument_list pos:start="96:25" pos:end="96:65">(<argument pos:start="96:26" pos:end="96:38"><expr pos:start="96:26" pos:end="96:38"><name pos:start="96:26" pos:end="96:38">mirror_top_bs</name></expr></argument>, <argument pos:start="96:41" pos:end="96:64"><expr pos:start="96:41" pos:end="96:64"><call pos:start="96:41" pos:end="96:64"><name pos:start="96:41" pos:end="96:60">bdrv_get_aio_context</name><argument_list pos:start="96:61" pos:end="96:64">(<argument pos:start="96:62" pos:end="96:63"><expr pos:start="96:62" pos:end="96:63"><name pos:start="96:62" pos:end="96:63">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="100:5" pos:end="102:78">/* bdrv_append takes ownership of the mirror_top_bs reference, need to keep

     * it alive until block_job_create() succeeds even if bs has no parent. */</comment>

    <expr_stmt pos:start="104:5" pos:end="104:28"><expr pos:start="104:5" pos:end="104:27"><call pos:start="104:5" pos:end="104:27"><name pos:start="104:5" pos:end="104:12">bdrv_ref</name><argument_list pos:start="104:13" pos:end="104:27">(<argument pos:start="104:14" pos:end="104:26"><expr pos:start="104:14" pos:end="104:26"><name pos:start="104:14" pos:end="104:26">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="106:5" pos:end="106:27"><expr pos:start="106:5" pos:end="106:26"><call pos:start="106:5" pos:end="106:26"><name pos:start="106:5" pos:end="106:22">bdrv_drained_begin</name><argument_list pos:start="106:23" pos:end="106:26">(<argument pos:start="106:24" pos:end="106:25"><expr pos:start="106:24" pos:end="106:25"><name pos:start="106:24" pos:end="106:25">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="108:5" pos:end="108:47"><expr pos:start="108:5" pos:end="108:46"><call pos:start="108:5" pos:end="108:46"><name pos:start="108:5" pos:end="108:15">bdrv_append</name><argument_list pos:start="108:16" pos:end="108:46">(<argument pos:start="108:17" pos:end="108:29"><expr pos:start="108:17" pos:end="108:29"><name pos:start="108:17" pos:end="108:29">mirror_top_bs</name></expr></argument>, <argument pos:start="108:32" pos:end="108:33"><expr pos:start="108:32" pos:end="108:33"><name pos:start="108:32" pos:end="108:33">bs</name></expr></argument>, <argument pos:start="108:36" pos:end="108:45"><expr pos:start="108:36" pos:end="108:45"><operator pos:start="108:36" pos:end="108:36">&amp;</operator><name pos:start="108:37" pos:end="108:45">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="110:5" pos:end="110:25"><expr pos:start="110:5" pos:end="110:24"><call pos:start="110:5" pos:end="110:24"><name pos:start="110:5" pos:end="110:20">bdrv_drained_end</name><argument_list pos:start="110:21" pos:end="110:24">(<argument pos:start="110:22" pos:end="110:23"><expr pos:start="110:22" pos:end="110:23"><name pos:start="110:22" pos:end="110:23">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="114:5" pos:end="307:30"><if pos:start="114:5" pos:end="307:30">if <condition pos:start="114:8" pos:end="114:18">(<expr pos:start="114:9" pos:end="114:17"><name pos:start="114:9" pos:end="114:17">local_err</name></expr>)</condition> <block pos:start="114:20" pos:end="307:30">{<block_content pos:start="116:9" pos:end="307:30">

        <expr_stmt pos:start="116:9" pos:end="116:34"><expr pos:start="116:9" pos:end="116:33"><call pos:start="116:9" pos:end="116:33"><name pos:start="116:9" pos:end="116:18">bdrv_unref</name><argument_list pos:start="116:19" pos:end="116:33">(<argument pos:start="116:20" pos:end="116:32"><expr pos:start="116:20" pos:end="116:32"><name pos:start="116:20" pos:end="116:32">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="118:9" pos:end="118:41"><expr pos:start="118:9" pos:end="118:40"><call pos:start="118:9" pos:end="118:40"><name pos:start="118:9" pos:end="118:23">error_propagate</name><argument_list pos:start="118:24" pos:end="118:40">(<argument pos:start="118:25" pos:end="118:28"><expr pos:start="118:25" pos:end="118:28"><name pos:start="118:25" pos:end="118:28">errp</name></expr></argument>, <argument pos:start="118:31" pos:end="118:39"><expr pos:start="118:31" pos:end="118:39"><name pos:start="118:31" pos:end="118:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="120:9" pos:end="120:15">return;</return>




    <comment type="block" pos:start="125:5" pos:end="125:75">/* Make sure that the source is not resized while the job is running */</comment>

    <expr_stmt pos:start="127:5" pos:end="135:59"><expr pos:start="127:5" pos:end="135:58"><name pos:start="127:5" pos:end="127:5">s</name> <operator pos:start="127:7" pos:end="127:7">=</operator> <call pos:start="127:9" pos:end="135:58"><name pos:start="127:9" pos:end="127:24">block_job_create</name><argument_list pos:start="127:25" pos:end="135:58">(<argument pos:start="127:26" pos:end="127:31"><expr pos:start="127:26" pos:end="127:31"><name pos:start="127:26" pos:end="127:31">job_id</name></expr></argument>, <argument pos:start="127:34" pos:end="127:39"><expr pos:start="127:34" pos:end="127:39"><name pos:start="127:34" pos:end="127:39">driver</name></expr></argument>, <argument pos:start="127:42" pos:end="127:54"><expr pos:start="127:42" pos:end="127:54"><name pos:start="127:42" pos:end="127:54">mirror_top_bs</name></expr></argument>,

                         <argument pos:start="129:26" pos:end="129:49"><expr pos:start="129:26" pos:end="129:49"><name pos:start="129:26" pos:end="129:49">BLK_PERM_CONSISTENT_READ</name></expr></argument>,

                         <argument pos:start="131:26" pos:end="133:60"><expr pos:start="131:26" pos:end="133:60"><name pos:start="131:26" pos:end="131:49">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="131:51" pos:end="131:51">|</operator> <name pos:start="131:53" pos:end="131:76">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="131:78" pos:end="131:78">|</operator>

                         <name pos:start="133:26" pos:end="133:39">BLK_PERM_WRITE</name> <operator pos:start="133:41" pos:end="133:41">|</operator> <name pos:start="133:43" pos:end="133:60">BLK_PERM_GRAPH_MOD</name></expr></argument>, <argument pos:start="133:63" pos:end="133:67"><expr pos:start="133:63" pos:end="133:67"><name pos:start="133:63" pos:end="133:67">speed</name></expr></argument>,

                         <argument pos:start="135:26" pos:end="135:39"><expr pos:start="135:26" pos:end="135:39"><name pos:start="135:26" pos:end="135:39">creation_flags</name></expr></argument>, <argument pos:start="135:42" pos:end="135:43"><expr pos:start="135:42" pos:end="135:43"><name pos:start="135:42" pos:end="135:43">cb</name></expr></argument>, <argument pos:start="135:46" pos:end="135:51"><expr pos:start="135:46" pos:end="135:51"><name pos:start="135:46" pos:end="135:51">opaque</name></expr></argument>, <argument pos:start="135:54" pos:end="135:57"><expr pos:start="135:54" pos:end="135:57"><name pos:start="135:54" pos:end="135:57">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="307:30"><if pos:start="137:5" pos:end="307:30">if <condition pos:start="137:8" pos:end="137:11">(<expr pos:start="137:9" pos:end="137:10"><operator pos:start="137:9" pos:end="137:9">!</operator><name pos:start="137:10" pos:end="137:10">s</name></expr>)</condition> <block pos:start="137:13" pos:end="307:30">{<block_content pos:start="139:9" pos:end="307:30">

        <goto pos:start="139:9" pos:end="139:18">goto <name pos:start="139:14" pos:end="139:17">fail</name>;</goto>


    <comment type="block" pos:start="142:5" pos:end="142:56">/* The block job now has a reference to this node */</comment>

    <expr_stmt pos:start="144:5" pos:end="144:30"><expr pos:start="144:5" pos:end="144:29"><call pos:start="144:5" pos:end="144:29"><name pos:start="144:5" pos:end="144:14">bdrv_unref</name><argument_list pos:start="144:15" pos:end="144:29">(<argument pos:start="144:16" pos:end="144:28"><expr pos:start="144:16" pos:end="144:28"><name pos:start="144:16" pos:end="144:28">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="148:5" pos:end="148:19"><expr pos:start="148:5" pos:end="148:18"><name pos:start="148:5" pos:end="148:13"><name pos:start="148:5" pos:end="148:5">s</name><operator pos:start="148:6" pos:end="148:7">-&gt;</operator><name pos:start="148:8" pos:end="148:13">source</name></name> <operator pos:start="148:15" pos:end="148:15">=</operator> <name pos:start="148:17" pos:end="148:18">bs</name></expr>;</expr_stmt>

    <expr_stmt pos:start="150:5" pos:end="150:37"><expr pos:start="150:5" pos:end="150:36"><name pos:start="150:5" pos:end="150:20"><name pos:start="150:5" pos:end="150:5">s</name><operator pos:start="150:6" pos:end="150:7">-&gt;</operator><name pos:start="150:8" pos:end="150:20">mirror_top_bs</name></name> <operator pos:start="150:22" pos:end="150:22">=</operator> <name pos:start="150:24" pos:end="150:36">mirror_top_bs</name></expr>;</expr_stmt>



    <comment type="block" pos:start="154:5" pos:end="168:51">/* No resize for the target either; while the mirror is still running, a

     * consistent read isn't necessarily possible. We could possibly allow

     * writes and graph modifications, though it would likely defeat the

     * purpose of a mirror, so leave them blocked for now.

     *

     * In the case of active commit, things look a bit different, though,

     * because the target is an already populated backing file in active use.

     * We can allow anything except resize there.*/</comment>

    <expr_stmt pos:start="170:5" pos:end="170:56"><expr pos:start="170:5" pos:end="170:55"><name pos:start="170:5" pos:end="170:21">target_is_backing</name> <operator pos:start="170:23" pos:end="170:23">=</operator> <call pos:start="170:25" pos:end="170:55"><name pos:start="170:25" pos:end="170:43">bdrv_chain_contains</name><argument_list pos:start="170:44" pos:end="170:55">(<argument pos:start="170:45" pos:end="170:46"><expr pos:start="170:45" pos:end="170:46"><name pos:start="170:45" pos:end="170:46">bs</name></expr></argument>, <argument pos:start="170:49" pos:end="170:54"><expr pos:start="170:49" pos:end="170:54"><name pos:start="170:49" pos:end="170:54">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="172:5" pos:end="172:68"><expr pos:start="172:5" pos:end="172:67"><name pos:start="172:5" pos:end="172:20">target_graph_mod</name> <operator pos:start="172:22" pos:end="172:22">=</operator> <operator pos:start="172:24" pos:end="172:24">(</operator><name pos:start="172:25" pos:end="172:36">backing_mode</name> <operator pos:start="172:38" pos:end="172:39">!=</operator> <name pos:start="172:41" pos:end="172:66">MIRROR_LEAVE_BACKING_CHAIN</name><operator pos:start="172:67" pos:end="172:67">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="174:5" pos:end="184:70"><expr pos:start="174:5" pos:end="184:69"><name pos:start="174:5" pos:end="174:13"><name pos:start="174:5" pos:end="174:5">s</name><operator pos:start="174:6" pos:end="174:7">-&gt;</operator><name pos:start="174:8" pos:end="174:13">target</name></name> <operator pos:start="174:15" pos:end="174:15">=</operator> <call pos:start="174:17" pos:end="184:69"><name pos:start="174:17" pos:end="174:23">blk_new</name><argument_list pos:start="174:24" pos:end="184:69">(<argument pos:start="174:25" pos:end="176:67"><expr pos:start="174:25" pos:end="176:67"><name pos:start="174:25" pos:end="174:38">BLK_PERM_WRITE</name> <operator pos:start="174:40" pos:end="174:40">|</operator> <name pos:start="174:42" pos:end="174:56">BLK_PERM_RESIZE</name> <operator pos:start="174:58" pos:end="174:58">|</operator>

                        <operator pos:start="176:25" pos:end="176:25">(</operator><ternary pos:start="176:26" pos:end="176:66"><condition pos:start="176:26" pos:end="176:43"><expr pos:start="176:26" pos:end="176:41"><name pos:start="176:26" pos:end="176:41">target_graph_mod</name></expr> ?</condition><then pos:start="176:45" pos:end="176:62"> <expr pos:start="176:45" pos:end="176:62"><name pos:start="176:45" pos:end="176:62">BLK_PERM_GRAPH_MOD</name></expr> </then><else pos:start="176:64" pos:end="176:66">: <expr pos:start="176:66" pos:end="176:66"><literal type="number" pos:start="176:66" pos:end="176:66">0</literal></expr></else></ternary><operator pos:start="176:67" pos:end="176:67">)</operator></expr></argument>,

                        <argument pos:start="178:25" pos:end="184:68"><expr pos:start="178:25" pos:end="184:68"><name pos:start="178:25" pos:end="178:48">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="178:50" pos:end="178:50">|</operator>

                        <operator pos:start="180:25" pos:end="180:25">(</operator><ternary pos:start="180:26" pos:end="184:67"><condition pos:start="180:26" pos:end="180:44"><expr pos:start="180:26" pos:end="180:42"><name pos:start="180:26" pos:end="180:42">target_is_backing</name></expr> ?</condition><then pos:start="180:46" pos:end="184:63"> <expr pos:start="180:46" pos:end="184:63"><name pos:start="180:46" pos:end="180:69">BLK_PERM_CONSISTENT_READ</name> <operator pos:start="180:71" pos:end="180:71">|</operator>

                                             <name pos:start="182:46" pos:end="182:59">BLK_PERM_WRITE</name> <operator pos:start="182:61" pos:end="182:61">|</operator>

                                             <name pos:start="184:46" pos:end="184:63">BLK_PERM_GRAPH_MOD</name></expr> </then><else pos:start="184:65" pos:end="184:67">: <expr pos:start="184:67" pos:end="184:67"><literal type="number" pos:start="184:67" pos:end="184:67">0</literal></expr></else></ternary><operator pos:start="184:68" pos:end="184:68">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="186:5" pos:end="186:49"><expr pos:start="186:5" pos:end="186:48"><name pos:start="186:5" pos:end="186:7">ret</name> <operator pos:start="186:9" pos:end="186:9">=</operator> <call pos:start="186:11" pos:end="186:48"><name pos:start="186:11" pos:end="186:23">blk_insert_bs</name><argument_list pos:start="186:24" pos:end="186:48">(<argument pos:start="186:25" pos:end="186:33"><expr pos:start="186:25" pos:end="186:33"><name pos:start="186:25" pos:end="186:33"><name pos:start="186:25" pos:end="186:25">s</name><operator pos:start="186:26" pos:end="186:27">-&gt;</operator><name pos:start="186:28" pos:end="186:33">target</name></name></expr></argument>, <argument pos:start="186:36" pos:end="186:41"><expr pos:start="186:36" pos:end="186:41"><name pos:start="186:36" pos:end="186:41">target</name></expr></argument>, <argument pos:start="186:44" pos:end="186:47"><expr pos:start="186:44" pos:end="186:47"><name pos:start="186:44" pos:end="186:47">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="188:5" pos:end="307:30"><if pos:start="188:5" pos:end="307:30">if <condition pos:start="188:8" pos:end="188:16">(<expr pos:start="188:9" pos:end="188:15"><name pos:start="188:9" pos:end="188:11">ret</name> <operator pos:start="188:13" pos:end="188:13">&lt;</operator> <literal type="number" pos:start="188:15" pos:end="188:15">0</literal></expr>)</condition> <block pos:start="188:18" pos:end="307:30">{<block_content pos:start="190:9" pos:end="307:30">

        <goto pos:start="190:9" pos:end="190:18">goto <name pos:start="190:14" pos:end="190:17">fail</name>;</goto>




    <expr_stmt pos:start="195:5" pos:end="195:37"><expr pos:start="195:5" pos:end="195:36"><name pos:start="195:5" pos:end="195:15"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:15">replaces</name></name> <operator pos:start="195:17" pos:end="195:17">=</operator> <call pos:start="195:19" pos:end="195:36"><name pos:start="195:19" pos:end="195:26">g_strdup</name><argument_list pos:start="195:27" pos:end="195:36">(<argument pos:start="195:28" pos:end="195:35"><expr pos:start="195:28" pos:end="195:35"><name pos:start="195:28" pos:end="195:35">replaces</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="197:5" pos:end="197:41"><expr pos:start="197:5" pos:end="197:40"><name pos:start="197:5" pos:end="197:22"><name pos:start="197:5" pos:end="197:5">s</name><operator pos:start="197:6" pos:end="197:7">-&gt;</operator><name pos:start="197:8" pos:end="197:22">on_source_error</name></name> <operator pos:start="197:24" pos:end="197:24">=</operator> <name pos:start="197:26" pos:end="197:40">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:41"><expr pos:start="199:5" pos:end="199:40"><name pos:start="199:5" pos:end="199:22"><name pos:start="199:5" pos:end="199:5">s</name><operator pos:start="199:6" pos:end="199:7">-&gt;</operator><name pos:start="199:8" pos:end="199:22">on_target_error</name></name> <operator pos:start="199:24" pos:end="199:24">=</operator> <name pos:start="199:26" pos:end="199:40">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:35"><expr pos:start="201:5" pos:end="201:34"><name pos:start="201:5" pos:end="201:19"><name pos:start="201:5" pos:end="201:5">s</name><operator pos:start="201:6" pos:end="201:7">-&gt;</operator><name pos:start="201:8" pos:end="201:19">is_none_mode</name></name> <operator pos:start="201:21" pos:end="201:21">=</operator> <name pos:start="201:23" pos:end="201:34">is_none_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:35"><expr pos:start="203:5" pos:end="203:34"><name pos:start="203:5" pos:end="203:19"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:19">backing_mode</name></name> <operator pos:start="203:21" pos:end="203:21">=</operator> <name pos:start="203:23" pos:end="203:34">backing_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:19"><expr pos:start="205:5" pos:end="205:18"><name pos:start="205:5" pos:end="205:11"><name pos:start="205:5" pos:end="205:5">s</name><operator pos:start="205:6" pos:end="205:7">-&gt;</operator><name pos:start="205:8" pos:end="205:11">base</name></name> <operator pos:start="205:13" pos:end="205:13">=</operator> <name pos:start="205:15" pos:end="205:18">base</name></expr>;</expr_stmt>

    <expr_stmt pos:start="207:5" pos:end="207:33"><expr pos:start="207:5" pos:end="207:32"><name pos:start="207:5" pos:end="207:18"><name pos:start="207:5" pos:end="207:5">s</name><operator pos:start="207:6" pos:end="207:7">-&gt;</operator><name pos:start="207:8" pos:end="207:18">granularity</name></name> <operator pos:start="207:20" pos:end="207:20">=</operator> <name pos:start="207:22" pos:end="207:32">granularity</name></expr>;</expr_stmt>

    <expr_stmt pos:start="209:5" pos:end="209:50"><expr pos:start="209:5" pos:end="209:49"><name pos:start="209:5" pos:end="209:15"><name pos:start="209:5" pos:end="209:5">s</name><operator pos:start="209:6" pos:end="209:7">-&gt;</operator><name pos:start="209:8" pos:end="209:15">buf_size</name></name> <operator pos:start="209:17" pos:end="209:17">=</operator> <call pos:start="209:19" pos:end="209:49"><name pos:start="209:19" pos:end="209:26">ROUND_UP</name><argument_list pos:start="209:27" pos:end="209:49">(<argument pos:start="209:28" pos:end="209:35"><expr pos:start="209:28" pos:end="209:35"><name pos:start="209:28" pos:end="209:35">buf_size</name></expr></argument>, <argument pos:start="209:38" pos:end="209:48"><expr pos:start="209:38" pos:end="209:48"><name pos:start="209:38" pos:end="209:48">granularity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="211:5" pos:end="211:21"><expr pos:start="211:5" pos:end="211:20"><name pos:start="211:5" pos:end="211:12"><name pos:start="211:5" pos:end="211:5">s</name><operator pos:start="211:6" pos:end="211:7">-&gt;</operator><name pos:start="211:8" pos:end="211:12">unmap</name></name> <operator pos:start="211:14" pos:end="211:14">=</operator> <name pos:start="211:16" pos:end="211:20">unmap</name></expr>;</expr_stmt>

    <if_stmt pos:start="213:5" pos:end="307:30"><if pos:start="213:5" pos:end="307:30">if <condition pos:start="213:8" pos:end="213:22">(<expr pos:start="213:9" pos:end="213:21"><name pos:start="213:9" pos:end="213:21">auto_complete</name></expr>)</condition> <block pos:start="213:24" pos:end="307:30">{<block_content pos:start="215:9" pos:end="307:30">

        <expr_stmt pos:start="215:9" pos:end="215:34"><expr pos:start="215:9" pos:end="215:33"><name pos:start="215:9" pos:end="215:26"><name pos:start="215:9" pos:end="215:9">s</name><operator pos:start="215:10" pos:end="215:11">-&gt;</operator><name pos:start="215:12" pos:end="215:26">should_complete</name></name> <operator pos:start="215:28" pos:end="215:28">=</operator> <name pos:start="215:30" pos:end="215:33">true</name></expr>;</expr_stmt>




    <expr_stmt pos:start="220:5" pos:end="220:76"><expr pos:start="220:5" pos:end="220:75"><name pos:start="220:5" pos:end="220:19"><name pos:start="220:5" pos:end="220:5">s</name><operator pos:start="220:6" pos:end="220:7">-&gt;</operator><name pos:start="220:8" pos:end="220:19">dirty_bitmap</name></name> <operator pos:start="220:21" pos:end="220:21">=</operator> <call pos:start="220:23" pos:end="220:75"><name pos:start="220:23" pos:end="220:46">bdrv_create_dirty_bitmap</name><argument_list pos:start="220:47" pos:end="220:75">(<argument pos:start="220:48" pos:end="220:49"><expr pos:start="220:48" pos:end="220:49"><name pos:start="220:48" pos:end="220:49">bs</name></expr></argument>, <argument pos:start="220:52" pos:end="220:62"><expr pos:start="220:52" pos:end="220:62"><name pos:start="220:52" pos:end="220:62">granularity</name></expr></argument>, <argument pos:start="220:65" pos:end="220:68"><expr pos:start="220:65" pos:end="220:68"><name pos:start="220:65" pos:end="220:68">NULL</name></expr></argument>, <argument pos:start="220:71" pos:end="220:74"><expr pos:start="220:71" pos:end="220:74"><name pos:start="220:71" pos:end="220:74">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="222:5" pos:end="307:30"><if pos:start="222:5" pos:end="307:30">if <condition pos:start="222:8" pos:end="222:25">(<expr pos:start="222:9" pos:end="222:24"><operator pos:start="222:9" pos:end="222:9">!</operator><name pos:start="222:10" pos:end="222:24"><name pos:start="222:10" pos:end="222:10">s</name><operator pos:start="222:11" pos:end="222:12">-&gt;</operator><name pos:start="222:13" pos:end="222:24">dirty_bitmap</name></name></expr>)</condition> <block pos:start="222:27" pos:end="307:30">{<block_content pos:start="224:9" pos:end="307:30">

        <goto pos:start="224:9" pos:end="224:18">goto <name pos:start="224:14" pos:end="224:17">fail</name>;</goto>




    <comment type="block" pos:start="229:5" pos:end="229:63">/* Required permissions are already taken with blk_new() */</comment>

    <expr_stmt pos:start="231:5" pos:end="233:37"><expr pos:start="231:5" pos:end="233:36"><call pos:start="231:5" pos:end="233:36"><name pos:start="231:5" pos:end="231:22">block_job_add_bdrv</name><argument_list pos:start="231:23" pos:end="233:36">(<argument pos:start="231:24" pos:end="231:33"><expr pos:start="231:24" pos:end="231:33"><operator pos:start="231:24" pos:end="231:24">&amp;</operator><name pos:start="231:25" pos:end="231:33"><name pos:start="231:25" pos:end="231:25">s</name><operator pos:start="231:26" pos:end="231:27">-&gt;</operator><name pos:start="231:28" pos:end="231:33">common</name></name></expr></argument>, <argument pos:start="231:36" pos:end="231:43"><expr pos:start="231:36" pos:end="231:43"><literal type="string" pos:start="231:36" pos:end="231:43">"target"</literal></expr></argument>, <argument pos:start="231:46" pos:end="231:51"><expr pos:start="231:46" pos:end="231:51"><name pos:start="231:46" pos:end="231:51">target</name></expr></argument>, <argument pos:start="231:54" pos:end="231:54"><expr pos:start="231:54" pos:end="231:54"><literal type="number" pos:start="231:54" pos:end="231:54">0</literal></expr></argument>, <argument pos:start="231:57" pos:end="231:68"><expr pos:start="231:57" pos:end="231:68"><name pos:start="231:57" pos:end="231:68">BLK_PERM_ALL</name></expr></argument>,

                       <argument pos:start="233:24" pos:end="233:35"><expr pos:start="233:24" pos:end="233:35"><operator pos:start="233:24" pos:end="233:24">&amp;</operator><name pos:start="233:25" pos:end="233:35">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="237:5" pos:end="239:42">/* In commit_active_start() all intermediate nodes disappear, so

     * any jobs in them must be blocked */</comment>

    <if_stmt pos:start="241:5" pos:end="307:30"><if pos:start="241:5" pos:end="307:30">if <condition pos:start="241:8" pos:end="241:26">(<expr pos:start="241:9" pos:end="241:25"><name pos:start="241:9" pos:end="241:25">target_is_backing</name></expr>)</condition> <block pos:start="241:28" pos:end="307:30">{<block_content pos:start="243:9" pos:end="307:30">

        <decl_stmt pos:start="243:9" pos:end="243:31"><decl pos:start="243:9" pos:end="243:30"><type pos:start="243:9" pos:end="243:26"><name pos:start="243:9" pos:end="243:24">BlockDriverState</name> <modifier pos:start="243:26" pos:end="243:26">*</modifier></type><name pos:start="243:27" pos:end="243:30">iter</name></decl>;</decl_stmt>

        <for pos:start="245:9" pos:end="307:30">for <control pos:start="245:13" pos:end="245:76">(<init pos:start="245:14" pos:end="245:35"><expr pos:start="245:14" pos:end="245:34"><name pos:start="245:14" pos:end="245:17">iter</name> <operator pos:start="245:19" pos:end="245:19">=</operator> <call pos:start="245:21" pos:end="245:34"><name pos:start="245:21" pos:end="245:30">backing_bs</name><argument_list pos:start="245:31" pos:end="245:34">(<argument pos:start="245:32" pos:end="245:33"><expr pos:start="245:32" pos:end="245:33"><name pos:start="245:32" pos:end="245:33">bs</name></expr></argument>)</argument_list></call></expr>;</init> <condition pos:start="245:37" pos:end="245:51"><expr pos:start="245:37" pos:end="245:50"><name pos:start="245:37" pos:end="245:40">iter</name> <operator pos:start="245:42" pos:end="245:43">!=</operator> <name pos:start="245:45" pos:end="245:50">target</name></expr>;</condition> <incr pos:start="245:53" pos:end="245:75"><expr pos:start="245:53" pos:end="245:75"><name pos:start="245:53" pos:end="245:56">iter</name> <operator pos:start="245:58" pos:end="245:58">=</operator> <call pos:start="245:60" pos:end="245:75"><name pos:start="245:60" pos:end="245:69">backing_bs</name><argument_list pos:start="245:70" pos:end="245:75">(<argument pos:start="245:71" pos:end="245:74"><expr pos:start="245:71" pos:end="245:74"><name pos:start="245:71" pos:end="245:74">iter</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block pos:start="245:78" pos:end="307:30">{<block_content pos:start="255:13" pos:end="307:30">

            <comment type="block" pos:start="247:13" pos:end="253:65">/* XXX BLK_PERM_WRITE needs to be allowed so we don't block

             * ourselves at s-&gt;base (if writes are blocked for a node, they are

             * also blocked for its backing file). The other options would be a

             * second filter driver above s-&gt;base (== target). */</comment>

            <expr_stmt pos:start="255:13" pos:end="259:43"><expr pos:start="255:13" pos:end="259:42"><name pos:start="255:13" pos:end="255:15">ret</name> <operator pos:start="255:17" pos:end="255:17">=</operator> <call pos:start="255:19" pos:end="259:42"><name pos:start="255:19" pos:end="255:36">block_job_add_bdrv</name><argument_list pos:start="255:37" pos:end="259:42">(<argument pos:start="255:38" pos:end="255:47"><expr pos:start="255:38" pos:end="255:47"><operator pos:start="255:38" pos:end="255:38">&amp;</operator><name pos:start="255:39" pos:end="255:47"><name pos:start="255:39" pos:end="255:39">s</name><operator pos:start="255:40" pos:end="255:41">-&gt;</operator><name pos:start="255:42" pos:end="255:47">common</name></name></expr></argument>, <argument pos:start="255:50" pos:end="255:68"><expr pos:start="255:50" pos:end="255:68"><literal type="string" pos:start="255:50" pos:end="255:68">"intermediate node"</literal></expr></argument>, <argument pos:start="255:71" pos:end="255:74"><expr pos:start="255:71" pos:end="255:74"><name pos:start="255:71" pos:end="255:74">iter</name></expr></argument>, <argument pos:start="255:77" pos:end="255:77"><expr pos:start="255:77" pos:end="255:77"><literal type="number" pos:start="255:77" pos:end="255:77">0</literal></expr></argument>,

                                     <argument pos:start="257:38" pos:end="257:78"><expr pos:start="257:38" pos:end="257:78"><name pos:start="257:38" pos:end="257:61">BLK_PERM_WRITE_UNCHANGED</name> <operator pos:start="257:63" pos:end="257:63">|</operator> <name pos:start="257:65" pos:end="257:78">BLK_PERM_WRITE</name></expr></argument>,

                                     <argument pos:start="259:38" pos:end="259:41"><expr pos:start="259:38" pos:end="259:41"><name pos:start="259:38" pos:end="259:41">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="261:13" pos:end="307:30"><if pos:start="261:13" pos:end="307:30">if <condition pos:start="261:16" pos:end="261:24">(<expr pos:start="261:17" pos:end="261:23"><name pos:start="261:17" pos:end="261:19">ret</name> <operator pos:start="261:21" pos:end="261:21">&lt;</operator> <literal type="number" pos:start="261:23" pos:end="261:23">0</literal></expr>)</condition> <block pos:start="261:26" pos:end="307:30">{<block_content pos:start="263:17" pos:end="307:30">

                <goto pos:start="263:17" pos:end="263:26">goto <name pos:start="263:22" pos:end="263:25">fail</name>;</goto>






    <expr_stmt pos:start="270:5" pos:end="270:38"><expr pos:start="270:5" pos:end="270:37"><call pos:start="270:5" pos:end="270:37"><name pos:start="270:5" pos:end="270:22">trace_mirror_start</name><argument_list pos:start="270:23" pos:end="270:37">(<argument pos:start="270:24" pos:end="270:25"><expr pos:start="270:24" pos:end="270:25"><name pos:start="270:24" pos:end="270:25">bs</name></expr></argument>, <argument pos:start="270:28" pos:end="270:28"><expr pos:start="270:28" pos:end="270:28"><name pos:start="270:28" pos:end="270:28">s</name></expr></argument>, <argument pos:start="270:31" pos:end="270:36"><expr pos:start="270:31" pos:end="270:36"><name pos:start="270:31" pos:end="270:36">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="272:5" pos:end="272:32"><expr pos:start="272:5" pos:end="272:31"><call pos:start="272:5" pos:end="272:31"><name pos:start="272:5" pos:end="272:19">block_job_start</name><argument_list pos:start="272:20" pos:end="272:31">(<argument pos:start="272:21" pos:end="272:30"><expr pos:start="272:21" pos:end="272:30"><operator pos:start="272:21" pos:end="272:21">&amp;</operator><name pos:start="272:22" pos:end="272:30"><name pos:start="272:22" pos:end="272:22">s</name><operator pos:start="272:23" pos:end="272:24">-&gt;</operator><name pos:start="272:25" pos:end="272:30">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="274:5" pos:end="274:11">return;</return>



<label pos:start="278:1" pos:end="278:5"><name pos:start="278:1" pos:end="278:4">fail</name>:</label>

    <if_stmt pos:start="280:5" pos:end="307:30"><if pos:start="280:5" pos:end="307:30">if <condition pos:start="280:8" pos:end="280:10">(<expr pos:start="280:9" pos:end="280:9"><name pos:start="280:9" pos:end="280:9">s</name></expr>)</condition> <block pos:start="280:12" pos:end="307:30">{<block_content pos:start="286:9" pos:end="307:30">

        <comment type="block" pos:start="282:9" pos:end="284:27">/* Make sure this BDS does not go away until we have completed the graph

         * changes below */</comment>

        <expr_stmt pos:start="286:9" pos:end="286:32"><expr pos:start="286:9" pos:end="286:31"><call pos:start="286:9" pos:end="286:31"><name pos:start="286:9" pos:end="286:16">bdrv_ref</name><argument_list pos:start="286:17" pos:end="286:31">(<argument pos:start="286:18" pos:end="286:30"><expr pos:start="286:18" pos:end="286:30"><name pos:start="286:18" pos:end="286:30">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="290:9" pos:end="290:28"><expr pos:start="290:9" pos:end="290:27"><call pos:start="290:9" pos:end="290:27"><name pos:start="290:9" pos:end="290:14">g_free</name><argument_list pos:start="290:15" pos:end="290:27">(<argument pos:start="290:16" pos:end="290:26"><expr pos:start="290:16" pos:end="290:26"><name pos:start="290:16" pos:end="290:26"><name pos:start="290:16" pos:end="290:16">s</name><operator pos:start="290:17" pos:end="290:18">-&gt;</operator><name pos:start="290:19" pos:end="290:26">replaces</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="292:9" pos:end="292:29"><expr pos:start="292:9" pos:end="292:28"><call pos:start="292:9" pos:end="292:28"><name pos:start="292:9" pos:end="292:17">blk_unref</name><argument_list pos:start="292:18" pos:end="292:28">(<argument pos:start="292:19" pos:end="292:27"><expr pos:start="292:19" pos:end="292:27"><name pos:start="292:19" pos:end="292:27"><name pos:start="292:19" pos:end="292:19">s</name><operator pos:start="292:20" pos:end="292:21">-&gt;</operator><name pos:start="292:22" pos:end="292:27">target</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="294:9" pos:end="294:41"><expr pos:start="294:9" pos:end="294:40"><call pos:start="294:9" pos:end="294:40"><name pos:start="294:9" pos:end="294:28">block_job_early_fail</name><argument_list pos:start="294:29" pos:end="294:40">(<argument pos:start="294:30" pos:end="294:39"><expr pos:start="294:30" pos:end="294:39"><operator pos:start="294:30" pos:end="294:30">&amp;</operator><name pos:start="294:31" pos:end="294:39"><name pos:start="294:31" pos:end="294:31">s</name><operator pos:start="294:32" pos:end="294:33">-&gt;</operator><name pos:start="294:34" pos:end="294:39">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




    <expr_stmt pos:start="299:5" pos:end="301:42"><expr pos:start="299:5" pos:end="301:41"><call pos:start="299:5" pos:end="301:41"><name pos:start="299:5" pos:end="299:27">bdrv_child_try_set_perm</name><argument_list pos:start="299:28" pos:end="301:41">(<argument pos:start="299:29" pos:end="299:50"><expr pos:start="299:29" pos:end="299:50"><name pos:start="299:29" pos:end="299:50"><name pos:start="299:29" pos:end="299:41">mirror_top_bs</name><operator pos:start="299:42" pos:end="299:43">-&gt;</operator><name pos:start="299:44" pos:end="299:50">backing</name></name></expr></argument>, <argument pos:start="299:53" pos:end="299:53"><expr pos:start="299:53" pos:end="299:53"><literal type="number" pos:start="299:53" pos:end="299:53">0</literal></expr></argument>, <argument pos:start="299:56" pos:end="299:67"><expr pos:start="299:56" pos:end="299:67"><name pos:start="299:56" pos:end="299:67">BLK_PERM_ALL</name></expr></argument>,

                            <argument pos:start="301:29" pos:end="301:40"><expr pos:start="301:29" pos:end="301:40"><operator pos:start="301:29" pos:end="301:29">&amp;</operator><name pos:start="301:30" pos:end="301:40">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="303:5" pos:end="303:78"><expr pos:start="303:5" pos:end="303:77"><call pos:start="303:5" pos:end="303:77"><name pos:start="303:5" pos:end="303:21">bdrv_replace_node</name><argument_list pos:start="303:22" pos:end="303:77">(<argument pos:start="303:23" pos:end="303:35"><expr pos:start="303:23" pos:end="303:35"><name pos:start="303:23" pos:end="303:35">mirror_top_bs</name></expr></argument>, <argument pos:start="303:38" pos:end="303:62"><expr pos:start="303:38" pos:end="303:62"><call pos:start="303:38" pos:end="303:62"><name pos:start="303:38" pos:end="303:47">backing_bs</name><argument_list pos:start="303:48" pos:end="303:62">(<argument pos:start="303:49" pos:end="303:61"><expr pos:start="303:49" pos:end="303:61"><name pos:start="303:49" pos:end="303:61">mirror_top_bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="303:65" pos:end="303:76"><expr pos:start="303:65" pos:end="303:76"><operator pos:start="303:65" pos:end="303:65">&amp;</operator><name pos:start="303:66" pos:end="303:76">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="307:5" pos:end="307:30"><expr pos:start="307:5" pos:end="307:29"><call pos:start="307:5" pos:end="307:29"><name pos:start="307:5" pos:end="307:14">bdrv_unref</name><argument_list pos:start="307:15" pos:end="307:29">(<argument pos:start="307:16" pos:end="307:28"><expr pos:start="307:16" pos:end="307:28"><name pos:start="307:16" pos:end="307:28">mirror_top_bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function>
</unit>
