<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/22713.c" pos:tabs="8"><function pos:start="1:1" pos:end="189:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:31">imx_enet_receive</name><parameter_list pos:start="1:32" pos:end="3:43">(<parameter pos:start="1:33" pos:end="1:50"><decl pos:start="1:33" pos:end="1:50"><type pos:start="1:33" pos:end="1:50"><name pos:start="1:33" pos:end="1:46">NetClientState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">nc</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:70"><decl pos:start="1:53" pos:end="1:70"><type pos:start="1:53" pos:end="1:70"><specifier pos:start="1:53" pos:end="1:57">const</specifier> <name pos:start="1:59" pos:end="1:65">uint8_t</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">buf</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:42"><decl pos:start="3:33" pos:end="3:42"><type pos:start="3:33" pos:end="3:42"><name pos:start="3:33" pos:end="3:38">size_t</name></type> <name pos:start="3:40" pos:end="3:42">len</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="189:1">{<block_content pos:start="7:5" pos:end="187:15">

    <decl_stmt pos:start="7:5" pos:end="7:54"><decl pos:start="7:5" pos:end="7:53"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">IMXFECState</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:18">s</name> <init pos:start="7:20" pos:end="7:53">= <expr pos:start="7:22" pos:end="7:53"><call pos:start="7:22" pos:end="7:53"><name pos:start="7:22" pos:end="7:28">IMX_FEC</name><argument_list pos:start="7:29" pos:end="7:53">(<argument pos:start="7:30" pos:end="7:52"><expr pos:start="7:30" pos:end="7:52"><call pos:start="7:30" pos:end="7:52"><name pos:start="7:30" pos:end="7:48">qemu_get_nic_opaque</name><argument_list pos:start="7:49" pos:end="7:52">(<argument pos:start="7:50" pos:end="7:51"><expr pos:start="7:50" pos:end="7:51"><name pos:start="7:50" pos:end="7:51">nc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:22"><decl pos:start="9:5" pos:end="9:21"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:18">IMXENETBufDesc</name></type> <name pos:start="9:20" pos:end="9:21">bd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">flags</name> <init pos:start="11:20" pos:end="11:22">= <expr pos:start="11:22" pos:end="11:22"><literal type="number" pos:start="11:22" pos:end="11:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:18"><decl pos:start="13:5" pos:end="13:17"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">uint32_t</name></type> <name pos:start="13:14" pos:end="13:17">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:17"><decl pos:start="15:5" pos:end="15:16"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:16">crc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:21">buf_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:21"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:13"><name pos:start="19:5" pos:end="19:11">uint8_t</name> <modifier pos:start="19:13" pos:end="19:13">*</modifier></type><name pos:start="19:14" pos:end="19:20">crc_ptr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:25"><decl pos:start="21:5" pos:end="21:24"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:24">buf_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:22"><decl pos:start="23:5" pos:end="23:21"><type pos:start="23:5" pos:end="23:10"><name pos:start="23:5" pos:end="23:10">size_t</name></type> <name pos:start="23:12" pos:end="23:15">size</name> <init pos:start="23:17" pos:end="23:21">= <expr pos:start="23:19" pos:end="23:21"><name pos:start="23:19" pos:end="23:21">len</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:38"><expr pos:start="27:5" pos:end="27:37"><call pos:start="27:5" pos:end="27:37"><name pos:start="27:5" pos:end="27:14">FEC_PRINTF</name><argument_list pos:start="27:15" pos:end="27:37">(<argument pos:start="27:16" pos:end="27:25"><expr pos:start="27:16" pos:end="27:25"><literal type="string" pos:start="27:16" pos:end="27:25">"len %d\n"</literal></expr></argument>, <argument pos:start="27:28" pos:end="27:36"><expr pos:start="27:28" pos:end="27:36"><operator pos:start="27:28" pos:end="27:28">(</operator><name pos:start="27:29" pos:end="27:31">int</name><operator pos:start="27:32" pos:end="27:32">)</operator><name pos:start="27:33" pos:end="27:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="31:5" pos:end="39:5"><if pos:start="31:5" pos:end="39:5">if <condition pos:start="31:8" pos:end="31:28">(<expr pos:start="31:9" pos:end="31:27"><operator pos:start="31:9" pos:end="31:9">!</operator><name pos:start="31:10" pos:end="31:27"><name pos:start="31:10" pos:end="31:10">s</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:16">regs</name><index pos:start="31:17" pos:end="31:27">[<expr pos:start="31:18" pos:end="31:26"><name pos:start="31:18" pos:end="31:26">ENET_RDAR</name></expr>]</index></name></expr>)</condition> <block pos:start="31:30" pos:end="39:5">{<block_content pos:start="33:9" pos:end="37:17">

        <expr_stmt pos:start="33:9" pos:end="35:46"><expr pos:start="33:9" pos:end="35:45"><call pos:start="33:9" pos:end="35:45"><name pos:start="33:9" pos:end="33:21">qemu_log_mask</name><argument_list pos:start="33:22" pos:end="35:45">(<argument pos:start="33:23" pos:end="33:37"><expr pos:start="33:23" pos:end="33:37"><name pos:start="33:23" pos:end="33:37">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="33:40" pos:end="33:68"><expr pos:start="33:40" pos:end="33:68"><literal type="string" pos:start="33:40" pos:end="33:68">"[%s]%s: Unexpected packet\n"</literal></expr></argument>,

                      <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">TYPE_IMX_FEC</name></expr></argument>, <argument pos:start="35:37" pos:end="35:44"><expr pos:start="35:37" pos:end="35:44"><name pos:start="35:37" pos:end="35:44">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="43:5" pos:end="43:31">/* 4 bytes for the CRC.  */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:14"><expr pos:start="45:5" pos:end="45:13"><name pos:start="45:5" pos:end="45:8">size</name> <operator pos:start="45:10" pos:end="45:11">+=</operator> <literal type="number" pos:start="45:13" pos:end="45:13">4</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:44"><expr pos:start="47:5" pos:end="47:43"><name pos:start="47:5" pos:end="47:7">crc</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:43"><name pos:start="47:11" pos:end="47:21">cpu_to_be32</name><argument_list pos:start="47:22" pos:end="47:43">(<argument pos:start="47:23" pos:end="47:42"><expr pos:start="47:23" pos:end="47:42"><call pos:start="47:23" pos:end="47:42"><name pos:start="47:23" pos:end="47:27">crc32</name><argument_list pos:start="47:28" pos:end="47:42">(<argument pos:start="47:29" pos:end="47:30"><expr pos:start="47:29" pos:end="47:30"><operator pos:start="47:29" pos:end="47:29">~</operator><literal type="number" pos:start="47:30" pos:end="47:30">0</literal></expr></argument>, <argument pos:start="47:33" pos:end="47:35"><expr pos:start="47:33" pos:end="47:35"><name pos:start="47:33" pos:end="47:35">buf</name></expr></argument>, <argument pos:start="47:38" pos:end="47:41"><expr pos:start="47:38" pos:end="47:41"><name pos:start="47:38" pos:end="47:41">size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:11">crc_ptr</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <operator pos:start="49:15" pos:end="49:15">(</operator><name pos:start="49:16" pos:end="49:22">uint8_t</name> <operator pos:start="49:24" pos:end="49:24">*</operator><operator pos:start="49:25" pos:end="49:25">)</operator> <operator pos:start="49:27" pos:end="49:27">&amp;</operator><name pos:start="49:28" pos:end="49:30">crc</name></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:36">/* Huge frames are truncted.  */</comment>

    <if_stmt pos:start="55:5" pos:end="61:5"><if pos:start="55:5" pos:end="61:5">if <condition pos:start="55:8" pos:end="55:35">(<expr pos:start="55:9" pos:end="55:34"><name pos:start="55:9" pos:end="55:12">size</name> <operator pos:start="55:14" pos:end="55:14">&gt;</operator> <name pos:start="55:16" pos:end="55:34">ENET_MAX_FRAME_SIZE</name></expr>)</condition> <block pos:start="55:37" pos:end="61:5">{<block_content pos:start="57:9" pos:end="59:41">

        <expr_stmt pos:start="57:9" pos:end="57:35"><expr pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:12">size</name> <operator pos:start="57:14" pos:end="57:14">=</operator> <name pos:start="57:16" pos:end="57:34">ENET_MAX_FRAME_SIZE</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:41"><expr pos:start="59:9" pos:end="59:40"><name pos:start="59:9" pos:end="59:13">flags</name> <operator pos:start="59:15" pos:end="59:16">|=</operator> <name pos:start="59:18" pos:end="59:27">ENET_BD_TR</name> <operator pos:start="59:29" pos:end="59:29">|</operator> <name pos:start="59:31" pos:end="59:40">ENET_BD_LG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="65:5" pos:end="65:66">/* Frames larger than the user limit just set error flags.  */</comment>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:41">(<expr pos:start="67:9" pos:end="67:40"><name pos:start="67:9" pos:end="67:12">size</name> <operator pos:start="67:14" pos:end="67:14">&gt;</operator> <operator pos:start="67:16" pos:end="67:16">(</operator><name pos:start="67:17" pos:end="67:33"><name pos:start="67:17" pos:end="67:17">s</name><operator pos:start="67:18" pos:end="67:19">-&gt;</operator><name pos:start="67:20" pos:end="67:23">regs</name><index pos:start="67:24" pos:end="67:33">[<expr pos:start="67:25" pos:end="67:32"><name pos:start="67:25" pos:end="67:32">ENET_RCR</name></expr>]</index></name> <operator pos:start="67:35" pos:end="67:36">&gt;&gt;</operator> <literal type="number" pos:start="67:38" pos:end="67:39">16</literal><operator pos:start="67:40" pos:end="67:40">)</operator></expr>)</condition> <block pos:start="67:43" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:28">

        <expr_stmt pos:start="69:9" pos:end="69:28"><expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:13">flags</name> <operator pos:start="69:15" pos:end="69:16">|=</operator> <name pos:start="69:18" pos:end="69:27">ENET_BD_LG</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="75:5" pos:end="75:28"><expr pos:start="75:5" pos:end="75:27"><name pos:start="75:5" pos:end="75:8">addr</name> <operator pos:start="75:10" pos:end="75:10">=</operator> <name pos:start="75:12" pos:end="75:27"><name pos:start="75:12" pos:end="75:12">s</name><operator pos:start="75:13" pos:end="75:14">-&gt;</operator><name pos:start="75:15" pos:end="75:27">rx_descriptor</name></name></expr>;</expr_stmt>

    <while pos:start="77:5" pos:end="179:5">while <condition pos:start="77:11" pos:end="77:20">(<expr pos:start="77:12" pos:end="77:19"><name pos:start="77:12" pos:end="77:15">size</name> <operator pos:start="77:17" pos:end="77:17">&gt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>)</condition> <block pos:start="77:22" pos:end="179:5">{<block_content pos:start="79:9" pos:end="177:9">

        <expr_stmt pos:start="79:9" pos:end="79:36"><expr pos:start="79:9" pos:end="79:35"><call pos:start="79:9" pos:end="79:35"><name pos:start="79:9" pos:end="79:24">imx_enet_read_bd</name><argument_list pos:start="79:25" pos:end="79:35">(<argument pos:start="79:26" pos:end="79:28"><expr pos:start="79:26" pos:end="79:28"><operator pos:start="79:26" pos:end="79:26">&amp;</operator><name pos:start="79:27" pos:end="79:28">bd</name></expr></argument>, <argument pos:start="79:31" pos:end="79:34"><expr pos:start="79:31" pos:end="79:34"><name pos:start="79:31" pos:end="79:34">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="81:9" pos:end="101:9"><if pos:start="81:9" pos:end="101:9">if <condition pos:start="81:12" pos:end="81:40">(<expr pos:start="81:13" pos:end="81:39"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:21"><name pos:start="81:14" pos:end="81:15">bd</name><operator pos:start="81:16" pos:end="81:16">.</operator><name pos:start="81:17" pos:end="81:21">flags</name></name> <operator pos:start="81:23" pos:end="81:23">&amp;</operator> <name pos:start="81:25" pos:end="81:33">ENET_BD_E</name><operator pos:start="81:34" pos:end="81:34">)</operator> <operator pos:start="81:36" pos:end="81:37">==</operator> <literal type="number" pos:start="81:39" pos:end="81:39">0</literal></expr>)</condition> <block pos:start="81:42" pos:end="101:9">{<block_content pos:start="95:13" pos:end="99:18">

            <comment type="block" pos:start="83:13" pos:end="83:55">/* No descriptors available.  Bail out.  */</comment>

            <comment type="block" pos:start="85:13" pos:end="93:15">/*

             * FIXME: This is wrong. We should probably either

             * save the remainder for when more RX buffers are

             * available, or flag an error.

             */</comment>

            <expr_stmt pos:start="95:13" pos:end="97:50"><expr pos:start="95:13" pos:end="97:49"><call pos:start="95:13" pos:end="97:49"><name pos:start="95:13" pos:end="95:25">qemu_log_mask</name><argument_list pos:start="95:26" pos:end="97:49">(<argument pos:start="95:27" pos:end="95:41"><expr pos:start="95:27" pos:end="95:41"><name pos:start="95:27" pos:end="95:41">LOG_GUEST_ERROR</name></expr></argument>, <argument pos:start="95:44" pos:end="95:72"><expr pos:start="95:44" pos:end="95:72"><literal type="string" pos:start="95:44" pos:end="95:72">"[%s]%s: Lost end of frame\n"</literal></expr></argument>,

                          <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">TYPE_IMX_FEC</name></expr></argument>, <argument pos:start="97:41" pos:end="97:48"><expr pos:start="97:41" pos:end="97:48"><name pos:start="97:41" pos:end="97:48">__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="99:13" pos:end="99:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:75"><expr pos:start="103:9" pos:end="103:74"><name pos:start="103:9" pos:end="103:15">buf_len</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <ternary pos:start="103:19" pos:end="103:74"><condition pos:start="103:19" pos:end="103:48"><expr pos:start="103:19" pos:end="103:46"><operator pos:start="103:19" pos:end="103:19">(</operator><name pos:start="103:20" pos:end="103:23">size</name> <operator pos:start="103:25" pos:end="103:26">&lt;=</operator> <name pos:start="103:28" pos:end="103:45"><name pos:start="103:28" pos:end="103:28">s</name><operator pos:start="103:29" pos:end="103:30">-&gt;</operator><name pos:start="103:31" pos:end="103:34">regs</name><index pos:start="103:35" pos:end="103:45">[<expr pos:start="103:36" pos:end="103:44"><name pos:start="103:36" pos:end="103:44">ENET_MRBR</name></expr>]</index></name><operator pos:start="103:46" pos:end="103:46">)</operator></expr> ?</condition><then pos:start="103:50" pos:end="103:53"> <expr pos:start="103:50" pos:end="103:53"><name pos:start="103:50" pos:end="103:53">size</name></expr> </then><else pos:start="103:55" pos:end="103:74">: <expr pos:start="103:57" pos:end="103:74"><name pos:start="103:57" pos:end="103:74"><name pos:start="103:57" pos:end="103:57">s</name><operator pos:start="103:58" pos:end="103:59">-&gt;</operator><name pos:start="103:60" pos:end="103:63">regs</name><index pos:start="103:64" pos:end="103:74">[<expr pos:start="103:65" pos:end="103:73"><name pos:start="103:65" pos:end="103:73">ENET_MRBR</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:28"><expr pos:start="105:9" pos:end="105:27"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:10">bd</name><operator pos:start="105:11" pos:end="105:11">.</operator><name pos:start="105:12" pos:end="105:17">length</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:27">buf_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:24"><expr pos:start="107:9" pos:end="107:23"><name pos:start="107:9" pos:end="107:12">size</name> <operator pos:start="107:14" pos:end="107:15">-=</operator> <name pos:start="107:17" pos:end="107:23">buf_len</name></expr>;</expr_stmt>



        <expr_stmt pos:start="111:9" pos:end="111:62"><expr pos:start="111:9" pos:end="111:61"><call pos:start="111:9" pos:end="111:61"><name pos:start="111:9" pos:end="111:18">FEC_PRINTF</name><argument_list pos:start="111:19" pos:end="111:61">(<argument pos:start="111:20" pos:end="111:43"><expr pos:start="111:20" pos:end="111:43"><literal type="string" pos:start="111:20" pos:end="111:43">"rx_bd 0x%x length %d\n"</literal></expr></argument>, <argument pos:start="111:46" pos:end="111:49"><expr pos:start="111:46" pos:end="111:49"><name pos:start="111:46" pos:end="111:49">addr</name></expr></argument>, <argument pos:start="111:52" pos:end="111:60"><expr pos:start="111:52" pos:end="111:60"><name pos:start="111:52" pos:end="111:60"><name pos:start="111:52" pos:end="111:53">bd</name><operator pos:start="111:54" pos:end="111:54">.</operator><name pos:start="111:55" pos:end="111:60">length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="115:9" pos:end="115:44">/* The last 4 bytes are the CRC.  */</comment>

        <if_stmt pos:start="117:9" pos:end="121:9"><if pos:start="117:9" pos:end="121:9">if <condition pos:start="117:12" pos:end="117:21">(<expr pos:start="117:13" pos:end="117:20"><name pos:start="117:13" pos:end="117:16">size</name> <operator pos:start="117:18" pos:end="117:18">&lt;</operator> <literal type="number" pos:start="117:20" pos:end="117:20">4</literal></expr>)</condition> <block pos:start="117:23" pos:end="121:9">{<block_content pos:start="119:13" pos:end="119:32">

            <expr_stmt pos:start="119:13" pos:end="119:32"><expr pos:start="119:13" pos:end="119:31"><name pos:start="119:13" pos:end="119:19">buf_len</name> <operator pos:start="119:21" pos:end="119:22">+=</operator> <name pos:start="119:24" pos:end="119:27">size</name> <operator pos:start="119:29" pos:end="119:29">-</operator> <literal type="number" pos:start="119:31" pos:end="119:31">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:27"><expr pos:start="123:9" pos:end="123:26"><name pos:start="123:9" pos:end="123:16">buf_addr</name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:26"><name pos:start="123:20" pos:end="123:21">bd</name><operator pos:start="123:22" pos:end="123:22">.</operator><name pos:start="123:23" pos:end="123:26">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:72"><expr pos:start="125:9" pos:end="125:71"><call pos:start="125:9" pos:end="125:71"><name pos:start="125:9" pos:end="125:24">dma_memory_write</name><argument_list pos:start="125:25" pos:end="125:71">(<argument pos:start="125:26" pos:end="125:46"><expr pos:start="125:26" pos:end="125:46"><operator pos:start="125:26" pos:end="125:26">&amp;</operator><name pos:start="125:27" pos:end="125:46">address_space_memory</name></expr></argument>, <argument pos:start="125:49" pos:end="125:56"><expr pos:start="125:49" pos:end="125:56"><name pos:start="125:49" pos:end="125:56">buf_addr</name></expr></argument>, <argument pos:start="125:59" pos:end="125:61"><expr pos:start="125:59" pos:end="125:61"><name pos:start="125:59" pos:end="125:61">buf</name></expr></argument>, <argument pos:start="125:64" pos:end="125:70"><expr pos:start="125:64" pos:end="125:70"><name pos:start="125:64" pos:end="125:70">buf_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:23"><expr pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:11">buf</name> <operator pos:start="127:13" pos:end="127:14">+=</operator> <name pos:start="127:16" pos:end="127:22">buf_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="137:9"><if pos:start="129:9" pos:end="137:9">if <condition pos:start="129:12" pos:end="129:21">(<expr pos:start="129:13" pos:end="129:20"><name pos:start="129:13" pos:end="129:16">size</name> <operator pos:start="129:18" pos:end="129:18">&lt;</operator> <literal type="number" pos:start="129:20" pos:end="129:20">4</literal></expr>)</condition> <block pos:start="129:23" pos:end="137:9">{<block_content pos:start="131:13" pos:end="135:32">

            <expr_stmt pos:start="131:13" pos:end="133:48"><expr pos:start="131:13" pos:end="133:47"><call pos:start="131:13" pos:end="133:47"><name pos:start="131:13" pos:end="131:28">dma_memory_write</name><argument_list pos:start="131:29" pos:end="133:47">(<argument pos:start="131:30" pos:end="131:50"><expr pos:start="131:30" pos:end="131:50"><operator pos:start="131:30" pos:end="131:30">&amp;</operator><name pos:start="131:31" pos:end="131:50">address_space_memory</name></expr></argument>, <argument pos:start="131:53" pos:end="131:70"><expr pos:start="131:53" pos:end="131:70"><name pos:start="131:53" pos:end="131:60">buf_addr</name> <operator pos:start="131:62" pos:end="131:62">+</operator> <name pos:start="131:64" pos:end="131:70">buf_len</name></expr></argument>,

                             <argument pos:start="133:30" pos:end="133:36"><expr pos:start="133:30" pos:end="133:36"><name pos:start="133:30" pos:end="133:36">crc_ptr</name></expr></argument>, <argument pos:start="133:39" pos:end="133:46"><expr pos:start="133:39" pos:end="133:46"><literal type="number" pos:start="133:39" pos:end="133:41">4</literal> <operator pos:start="133:41" pos:end="133:41">-</operator> <name pos:start="133:43" pos:end="133:46">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:32"><expr pos:start="135:13" pos:end="135:31"><name pos:start="135:13" pos:end="135:19">crc_ptr</name> <operator pos:start="135:21" pos:end="135:22">+=</operator> <literal type="number" pos:start="135:24" pos:end="135:26">4</literal> <operator pos:start="135:26" pos:end="135:26">-</operator> <name pos:start="135:28" pos:end="135:31">size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:31"><expr pos:start="139:9" pos:end="139:30"><name pos:start="139:9" pos:end="139:16"><name pos:start="139:9" pos:end="139:10">bd</name><operator pos:start="139:11" pos:end="139:11">.</operator><name pos:start="139:12" pos:end="139:16">flags</name></name> <operator pos:start="139:18" pos:end="139:19">&amp;=</operator> <operator pos:start="139:21" pos:end="139:21">~</operator><name pos:start="139:22" pos:end="139:30">ENET_BD_E</name></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="163:9"><if pos:start="141:9" pos:end="155:9">if <condition pos:start="141:12" pos:end="141:22">(<expr pos:start="141:13" pos:end="141:21"><name pos:start="141:13" pos:end="141:16">size</name> <operator pos:start="141:18" pos:end="141:19">==</operator> <literal type="number" pos:start="141:21" pos:end="141:21">0</literal></expr>)</condition> <block pos:start="141:24" pos:end="155:9">{<block_content pos:start="145:13" pos:end="153:13">

            <comment type="block" pos:start="143:13" pos:end="143:40">/* Last buffer in frame.  */</comment>

            <expr_stmt pos:start="145:13" pos:end="145:42"><expr pos:start="145:13" pos:end="145:41"><name pos:start="145:13" pos:end="145:20"><name pos:start="145:13" pos:end="145:14">bd</name><operator pos:start="145:15" pos:end="145:15">.</operator><name pos:start="145:16" pos:end="145:20">flags</name></name> <operator pos:start="145:22" pos:end="145:23">|=</operator> <name pos:start="145:25" pos:end="145:29">flags</name> <operator pos:start="145:31" pos:end="145:31">|</operator> <name pos:start="145:33" pos:end="145:41">ENET_BD_L</name></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:58"><expr pos:start="147:13" pos:end="147:57"><call pos:start="147:13" pos:end="147:57"><name pos:start="147:13" pos:end="147:22">FEC_PRINTF</name><argument_list pos:start="147:23" pos:end="147:57">(<argument pos:start="147:24" pos:end="147:46"><expr pos:start="147:24" pos:end="147:46"><literal type="string" pos:start="147:24" pos:end="147:46">"rx frame flags %04x\n"</literal></expr></argument>, <argument pos:start="147:49" pos:end="147:56"><expr pos:start="147:49" pos:end="147:56"><name pos:start="147:49" pos:end="147:56"><name pos:start="147:49" pos:end="147:50">bd</name><operator pos:start="147:51" pos:end="147:51">.</operator><name pos:start="147:52" pos:end="147:56">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="149:13" pos:end="153:13"><if pos:start="149:13" pos:end="153:13">if <condition pos:start="149:16" pos:end="149:43">(<expr pos:start="149:17" pos:end="149:42"><name pos:start="149:17" pos:end="149:25"><name pos:start="149:17" pos:end="149:18">bd</name><operator pos:start="149:19" pos:end="149:19">.</operator><name pos:start="149:20" pos:end="149:25">option</name></name> <operator pos:start="149:27" pos:end="149:27">&amp;</operator> <name pos:start="149:29" pos:end="149:42">ENET_BD_RX_INT</name></expr>)</condition> <block pos:start="149:45" pos:end="153:13">{<block_content pos:start="151:17" pos:end="151:50">

                <expr_stmt pos:start="151:17" pos:end="151:50"><expr pos:start="151:17" pos:end="151:49"><name pos:start="151:17" pos:end="151:33"><name pos:start="151:17" pos:end="151:17">s</name><operator pos:start="151:18" pos:end="151:19">-&gt;</operator><name pos:start="151:20" pos:end="151:23">regs</name><index pos:start="151:24" pos:end="151:33">[<expr pos:start="151:25" pos:end="151:32"><name pos:start="151:25" pos:end="151:32">ENET_EIR</name></expr>]</index></name> <operator pos:start="151:35" pos:end="151:36">|=</operator> <name pos:start="151:38" pos:end="151:49">ENET_INT_RXF</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="155:11" pos:end="163:9">else <block pos:start="155:16" pos:end="163:9">{<block_content pos:start="157:13" pos:end="161:13">

            <if_stmt pos:start="157:13" pos:end="161:13"><if pos:start="157:13" pos:end="161:13">if <condition pos:start="157:16" pos:end="157:43">(<expr pos:start="157:17" pos:end="157:42"><name pos:start="157:17" pos:end="157:25"><name pos:start="157:17" pos:end="157:18">bd</name><operator pos:start="157:19" pos:end="157:19">.</operator><name pos:start="157:20" pos:end="157:25">option</name></name> <operator pos:start="157:27" pos:end="157:27">&amp;</operator> <name pos:start="157:29" pos:end="157:42">ENET_BD_RX_INT</name></expr>)</condition> <block pos:start="157:45" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:50">

                <expr_stmt pos:start="159:17" pos:end="159:50"><expr pos:start="159:17" pos:end="159:49"><name pos:start="159:17" pos:end="159:33"><name pos:start="159:17" pos:end="159:17">s</name><operator pos:start="159:18" pos:end="159:19">-&gt;</operator><name pos:start="159:20" pos:end="159:23">regs</name><index pos:start="159:24" pos:end="159:33">[<expr pos:start="159:25" pos:end="159:32"><name pos:start="159:25" pos:end="159:32">ENET_EIR</name></expr>]</index></name> <operator pos:start="159:35" pos:end="159:36">|=</operator> <name pos:start="159:38" pos:end="159:49">ENET_INT_RXB</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="165:9" pos:end="165:37"><expr pos:start="165:9" pos:end="165:36"><call pos:start="165:9" pos:end="165:36"><name pos:start="165:9" pos:end="165:25">imx_enet_write_bd</name><argument_list pos:start="165:26" pos:end="165:36">(<argument pos:start="165:27" pos:end="165:29"><expr pos:start="165:27" pos:end="165:29"><operator pos:start="165:27" pos:end="165:27">&amp;</operator><name pos:start="165:28" pos:end="165:29">bd</name></expr></argument>, <argument pos:start="165:32" pos:end="165:35"><expr pos:start="165:32" pos:end="165:35"><name pos:start="165:32" pos:end="165:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="167:9" pos:end="167:46">/* Advance to the next descriptor.  */</comment>

        <if_stmt pos:start="169:9" pos:end="177:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:40">(<expr pos:start="169:13" pos:end="169:39"><operator pos:start="169:13" pos:end="169:13">(</operator><name pos:start="169:14" pos:end="169:21"><name pos:start="169:14" pos:end="169:15">bd</name><operator pos:start="169:16" pos:end="169:16">.</operator><name pos:start="169:17" pos:end="169:21">flags</name></name> <operator pos:start="169:23" pos:end="169:23">&amp;</operator> <name pos:start="169:25" pos:end="169:33">ENET_BD_W</name><operator pos:start="169:34" pos:end="169:34">)</operator> <operator pos:start="169:36" pos:end="169:37">!=</operator> <literal type="number" pos:start="169:39" pos:end="169:39">0</literal></expr>)</condition> <block pos:start="169:42" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:38">

            <expr_stmt pos:start="171:13" pos:end="171:38"><expr pos:start="171:13" pos:end="171:37"><name pos:start="171:13" pos:end="171:16">addr</name> <operator pos:start="171:18" pos:end="171:18">=</operator> <name pos:start="171:20" pos:end="171:37"><name pos:start="171:20" pos:end="171:20">s</name><operator pos:start="171:21" pos:end="171:22">-&gt;</operator><name pos:start="171:23" pos:end="171:26">regs</name><index pos:start="171:27" pos:end="171:37">[<expr pos:start="171:28" pos:end="171:36"><name pos:start="171:28" pos:end="171:36">ENET_RDSR</name></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="173:11" pos:end="177:9">else <block pos:start="173:16" pos:end="177:9">{<block_content pos:start="175:13" pos:end="175:31">

            <expr_stmt pos:start="175:13" pos:end="175:31"><expr pos:start="175:13" pos:end="175:30"><name pos:start="175:13" pos:end="175:16">addr</name> <operator pos:start="175:18" pos:end="175:19">+=</operator> <sizeof pos:start="175:21" pos:end="175:30">sizeof<argument_list pos:start="175:27" pos:end="175:30">(<argument pos:start="175:28" pos:end="175:29"><expr pos:start="175:28" pos:end="175:29"><name pos:start="175:28" pos:end="175:29">bd</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="181:5" pos:end="181:28"><expr pos:start="181:5" pos:end="181:27"><name pos:start="181:5" pos:end="181:20"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:20">rx_descriptor</name></name> <operator pos:start="181:22" pos:end="181:22">=</operator> <name pos:start="181:24" pos:end="181:27">addr</name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:25"><expr pos:start="183:5" pos:end="183:24"><call pos:start="183:5" pos:end="183:24"><name pos:start="183:5" pos:end="183:21">imx_eth_enable_rx</name><argument_list pos:start="183:22" pos:end="183:24">(<argument pos:start="183:23" pos:end="183:23"><expr pos:start="183:23" pos:end="183:23"><name pos:start="183:23" pos:end="183:23">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:22"><expr pos:start="185:5" pos:end="185:21"><call pos:start="185:5" pos:end="185:21"><name pos:start="185:5" pos:end="185:18">imx_eth_update</name><argument_list pos:start="185:19" pos:end="185:21">(<argument pos:start="185:20" pos:end="185:20"><expr pos:start="185:20" pos:end="185:20"><name pos:start="185:20" pos:end="185:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="187:5" pos:end="187:15">return <expr pos:start="187:12" pos:end="187:14"><name pos:start="187:12" pos:end="187:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
