<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17034.c" pos:tabs="8"><function pos:start="1:1" pos:end="3743:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">long</name></type> <name pos:start="1:6" pos:end="1:15">disas_insn</name><parameter_list pos:start="1:16" pos:end="1:51">(<parameter pos:start="1:17" pos:end="1:31"><decl pos:start="1:17" pos:end="1:31"><type pos:start="1:17" pos:end="1:31"><name pos:start="1:17" pos:end="1:28">DisasContext</name> <modifier pos:start="1:30" pos:end="1:30">*</modifier></type><name pos:start="1:31" pos:end="1:31">s</name></decl></parameter>, <parameter pos:start="1:34" pos:end="1:50"><decl pos:start="1:34" pos:end="1:50"><type pos:start="1:34" pos:end="1:50"><name pos:start="1:34" pos:end="1:40">uint8_t</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:50">pc_start</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="3743:1">{<block_content pos:start="5:5" pos:end="3741:14">

    <decl_stmt pos:start="5:5" pos:end="5:34"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">b</name></decl>, <decl pos:start="5:12" pos:end="5:19"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:12" pos:end="5:19">prefixes</name></decl>, <decl pos:start="5:22" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:22" pos:end="5:26">aflag</name></decl>, <decl pos:start="5:29" pos:end="5:33"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:29" pos:end="5:33">dflag</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">shift</name></decl>, <decl pos:start="7:16" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:17">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:67"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">modrm</name></decl>, <decl pos:start="9:16" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:18">reg</name></decl>, <decl pos:start="9:21" pos:end="9:22"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:22">rm</name></decl>, <decl pos:start="9:25" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:25" pos:end="9:27">mod</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:30" pos:end="9:37">reg_addr</name></decl>, <decl pos:start="9:40" pos:end="9:41"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:40" pos:end="9:41">op</name></decl>, <decl pos:start="9:44" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:44" pos:end="9:48">opreg</name></decl>, <decl pos:start="9:51" pos:end="9:61"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:51" pos:end="9:61">offset_addr</name></decl>, <decl pos:start="9:64" pos:end="9:66"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:64" pos:end="9:66">val</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:26"><decl pos:start="11:5" pos:end="11:25"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:12">unsigned</name> <name pos:start="11:14" pos:end="11:16">int</name></type> <name pos:start="11:18" pos:end="11:25">next_eip</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:21"><expr pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:9"><name pos:start="15:5" pos:end="15:5">s</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:9">pc</name></name> <operator pos:start="15:11" pos:end="15:11">=</operator> <name pos:start="15:13" pos:end="15:20">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:17"><expr pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">prefixes</name> <operator pos:start="17:14" pos:end="17:14">=</operator> <literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:9">aflag</name> <operator pos:start="19:11" pos:end="19:11">=</operator> <name pos:start="19:13" pos:end="19:21"><name pos:start="19:13" pos:end="19:13">s</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:21">code32</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:9">dflag</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <name pos:start="21:13" pos:end="21:21"><name pos:start="21:13" pos:end="21:13">s</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:21">code32</name></name></expr>;</expr_stmt>

    <comment type="line" pos:start="23:5" pos:end="23:51">//    cur_pc = s-&gt;pc; /* for insn generation */</comment>

 <label pos:start="25:2" pos:end="25:11"><name pos:start="25:2" pos:end="25:10">next_byte</name>:</label>

    <expr_stmt pos:start="27:5" pos:end="27:20"><expr pos:start="27:5" pos:end="27:19"><name pos:start="27:5" pos:end="27:5">b</name> <operator pos:start="27:7" pos:end="27:7">=</operator> <call pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:12">ldub</name><argument_list pos:start="27:13" pos:end="27:19">(<argument pos:start="27:14" pos:end="27:18"><expr pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:18"><name pos:start="27:14" pos:end="27:14">s</name><operator pos:start="27:15" pos:end="27:16">-&gt;</operator><name pos:start="27:17" pos:end="27:18">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:12"><expr pos:start="29:5" pos:end="29:11"><name pos:start="29:5" pos:end="29:9"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:9">pc</name></name><operator pos:start="29:10" pos:end="29:11">++</operator></expr>;</expr_stmt>

    <comment type="block" pos:start="31:5" pos:end="31:24">/* check prefixes */</comment>

    <switch pos:start="33:5" pos:end="107:5">switch <condition pos:start="33:12" pos:end="33:14">(<expr pos:start="33:13" pos:end="33:13"><name pos:start="33:13" pos:end="33:13">b</name></expr>)</condition> <block pos:start="33:16" pos:end="107:5">{<block_content pos:start="35:5" pos:end="105:23">

    <case pos:start="35:5" pos:end="35:14">case <expr pos:start="35:10" pos:end="35:13"><literal type="number" pos:start="35:10" pos:end="35:13">0xf3</literal></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:32"><expr pos:start="37:9" pos:end="37:31"><name pos:start="37:9" pos:end="37:16">prefixes</name> <operator pos:start="37:18" pos:end="37:19">|=</operator> <name pos:start="37:21" pos:end="37:31">PREFIX_REPZ</name></expr>;</expr_stmt>

        <goto pos:start="39:9" pos:end="39:23">goto <name pos:start="39:14" pos:end="39:22">next_byte</name>;</goto>

    <case pos:start="41:5" pos:end="41:14">case <expr pos:start="41:10" pos:end="41:13"><literal type="number" pos:start="41:10" pos:end="41:13">0xf2</literal></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:33"><expr pos:start="43:9" pos:end="43:32"><name pos:start="43:9" pos:end="43:16">prefixes</name> <operator pos:start="43:18" pos:end="43:19">|=</operator> <name pos:start="43:21" pos:end="43:32">PREFIX_REPNZ</name></expr>;</expr_stmt>

        <goto pos:start="45:9" pos:end="45:23">goto <name pos:start="45:14" pos:end="45:22">next_byte</name>;</goto>

    <case pos:start="47:5" pos:end="47:14">case <expr pos:start="47:10" pos:end="47:13"><literal type="number" pos:start="47:10" pos:end="47:13">0xf0</literal></expr>:</case>

        <expr_stmt pos:start="49:9" pos:end="49:32"><expr pos:start="49:9" pos:end="49:31"><name pos:start="49:9" pos:end="49:16">prefixes</name> <operator pos:start="49:18" pos:end="49:19">|=</operator> <name pos:start="49:21" pos:end="49:31">PREFIX_LOCK</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:23">goto <name pos:start="51:14" pos:end="51:22">next_byte</name>;</goto>

    <case pos:start="53:5" pos:end="53:14">case <expr pos:start="53:10" pos:end="53:13"><literal type="number" pos:start="53:10" pos:end="53:13">0x2e</literal></expr>:</case>

        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:16">prefixes</name> <operator pos:start="55:18" pos:end="55:19">|=</operator> <name pos:start="55:21" pos:end="55:29">PREFIX_CS</name></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:23">goto <name pos:start="57:14" pos:end="57:22">next_byte</name>;</goto>

    <case pos:start="59:5" pos:end="59:14">case <expr pos:start="59:10" pos:end="59:13"><literal type="number" pos:start="59:10" pos:end="59:13">0x36</literal></expr>:</case>

        <expr_stmt pos:start="61:9" pos:end="61:30"><expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:16">prefixes</name> <operator pos:start="61:18" pos:end="61:19">|=</operator> <name pos:start="61:21" pos:end="61:29">PREFIX_SS</name></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:23">goto <name pos:start="63:14" pos:end="63:22">next_byte</name>;</goto>

    <case pos:start="65:5" pos:end="65:14">case <expr pos:start="65:10" pos:end="65:13"><literal type="number" pos:start="65:10" pos:end="65:13">0x3e</literal></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:30"><expr pos:start="67:9" pos:end="67:29"><name pos:start="67:9" pos:end="67:16">prefixes</name> <operator pos:start="67:18" pos:end="67:19">|=</operator> <name pos:start="67:21" pos:end="67:29">PREFIX_DS</name></expr>;</expr_stmt>

        <goto pos:start="69:9" pos:end="69:23">goto <name pos:start="69:14" pos:end="69:22">next_byte</name>;</goto>

    <case pos:start="71:5" pos:end="71:14">case <expr pos:start="71:10" pos:end="71:13"><literal type="number" pos:start="71:10" pos:end="71:13">0x26</literal></expr>:</case>

        <expr_stmt pos:start="73:9" pos:end="73:30"><expr pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:16">prefixes</name> <operator pos:start="73:18" pos:end="73:19">|=</operator> <name pos:start="73:21" pos:end="73:29">PREFIX_ES</name></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:23">goto <name pos:start="75:14" pos:end="75:22">next_byte</name>;</goto>

    <case pos:start="77:5" pos:end="77:14">case <expr pos:start="77:10" pos:end="77:13"><literal type="number" pos:start="77:10" pos:end="77:13">0x64</literal></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:30"><expr pos:start="79:9" pos:end="79:29"><name pos:start="79:9" pos:end="79:16">prefixes</name> <operator pos:start="79:18" pos:end="79:19">|=</operator> <name pos:start="79:21" pos:end="79:29">PREFIX_FS</name></expr>;</expr_stmt>

        <goto pos:start="81:9" pos:end="81:23">goto <name pos:start="81:14" pos:end="81:22">next_byte</name>;</goto>

    <case pos:start="83:5" pos:end="83:14">case <expr pos:start="83:10" pos:end="83:13"><literal type="number" pos:start="83:10" pos:end="83:13">0x65</literal></expr>:</case>

        <expr_stmt pos:start="85:9" pos:end="85:30"><expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:16">prefixes</name> <operator pos:start="85:18" pos:end="85:19">|=</operator> <name pos:start="85:21" pos:end="85:29">PREFIX_GS</name></expr>;</expr_stmt>

        <goto pos:start="87:9" pos:end="87:23">goto <name pos:start="87:14" pos:end="87:22">next_byte</name>;</goto>

    <case pos:start="89:5" pos:end="89:14">case <expr pos:start="89:10" pos:end="89:13"><literal type="number" pos:start="89:10" pos:end="89:13">0x66</literal></expr>:</case>

        <expr_stmt pos:start="91:9" pos:end="91:32"><expr pos:start="91:9" pos:end="91:31"><name pos:start="91:9" pos:end="91:16">prefixes</name> <operator pos:start="91:18" pos:end="91:19">|=</operator> <name pos:start="91:21" pos:end="91:31">PREFIX_DATA</name></expr>;</expr_stmt>

        <goto pos:start="93:9" pos:end="93:23">goto <name pos:start="93:14" pos:end="93:22">next_byte</name>;</goto>

    <case pos:start="95:5" pos:end="95:14">case <expr pos:start="95:10" pos:end="95:13"><literal type="number" pos:start="95:10" pos:end="95:13">0x67</literal></expr>:</case>

        <expr_stmt pos:start="97:9" pos:end="97:31"><expr pos:start="97:9" pos:end="97:30"><name pos:start="97:9" pos:end="97:16">prefixes</name> <operator pos:start="97:18" pos:end="97:19">|=</operator> <name pos:start="97:21" pos:end="97:30">PREFIX_ADR</name></expr>;</expr_stmt>

        <goto pos:start="99:9" pos:end="99:23">goto <name pos:start="99:14" pos:end="99:22">next_byte</name>;</goto>

    <case pos:start="101:5" pos:end="101:14">case <expr pos:start="101:10" pos:end="101:13"><literal type="number" pos:start="101:10" pos:end="101:13">0x9b</literal></expr>:</case>

        <expr_stmt pos:start="103:9" pos:end="103:33"><expr pos:start="103:9" pos:end="103:32"><name pos:start="103:9" pos:end="103:16">prefixes</name> <operator pos:start="103:18" pos:end="103:19">|=</operator> <name pos:start="103:21" pos:end="103:32">PREFIX_FWAIT</name></expr>;</expr_stmt>

        <goto pos:start="105:9" pos:end="105:23">goto <name pos:start="105:14" pos:end="105:22">next_byte</name>;</goto>

    </block_content>}</block></switch>



    <if_stmt pos:start="111:5" pos:end="113:19"><if pos:start="111:5" pos:end="113:19">if <condition pos:start="111:8" pos:end="111:31">(<expr pos:start="111:9" pos:end="111:30"><name pos:start="111:9" pos:end="111:16">prefixes</name> <operator pos:start="111:18" pos:end="111:18">&amp;</operator> <name pos:start="111:20" pos:end="111:30">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="113:9" pos:end="113:19"><block_content pos:start="113:9" pos:end="113:19">

        <expr_stmt pos:start="113:9" pos:end="113:19"><expr pos:start="113:9" pos:end="113:18"><name pos:start="113:9" pos:end="113:13">dflag</name> <operator pos:start="113:15" pos:end="113:16">^=</operator> <literal type="number" pos:start="113:18" pos:end="113:18">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="115:5" pos:end="117:19"><if pos:start="115:5" pos:end="117:19">if <condition pos:start="115:8" pos:end="115:30">(<expr pos:start="115:9" pos:end="115:29"><name pos:start="115:9" pos:end="115:16">prefixes</name> <operator pos:start="115:18" pos:end="115:18">&amp;</operator> <name pos:start="115:20" pos:end="115:29">PREFIX_ADR</name></expr>)</condition><block type="pseudo" pos:start="117:9" pos:end="117:19"><block_content pos:start="117:9" pos:end="117:19">

        <expr_stmt pos:start="117:9" pos:end="117:19"><expr pos:start="117:9" pos:end="117:18"><name pos:start="117:9" pos:end="117:13">aflag</name> <operator pos:start="117:15" pos:end="117:16">^=</operator> <literal type="number" pos:start="117:18" pos:end="117:18">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:25"><expr pos:start="121:5" pos:end="121:24"><name pos:start="121:5" pos:end="121:13"><name pos:start="121:5" pos:end="121:5">s</name><operator pos:start="121:6" pos:end="121:7">-&gt;</operator><name pos:start="121:8" pos:end="121:13">prefix</name></name> <operator pos:start="121:15" pos:end="121:15">=</operator> <name pos:start="121:17" pos:end="121:24">prefixes</name></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:21"><expr pos:start="123:5" pos:end="123:20"><name pos:start="123:5" pos:end="123:12"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:12">aflag</name></name> <operator pos:start="123:14" pos:end="123:14">=</operator> <name pos:start="123:16" pos:end="123:20">aflag</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:21"><expr pos:start="125:5" pos:end="125:20"><name pos:start="125:5" pos:end="125:12"><name pos:start="125:5" pos:end="125:5">s</name><operator pos:start="125:6" pos:end="125:7">-&gt;</operator><name pos:start="125:8" pos:end="125:12">dflag</name></name> <operator pos:start="125:14" pos:end="125:14">=</operator> <name pos:start="125:16" pos:end="125:20">dflag</name></expr>;</expr_stmt>



    <comment type="block" pos:start="129:5" pos:end="129:25">/* lock generation */</comment>

    <if_stmt pos:start="131:5" pos:end="133:22"><if pos:start="131:5" pos:end="133:22">if <condition pos:start="131:8" pos:end="131:31">(<expr pos:start="131:9" pos:end="131:30"><name pos:start="131:9" pos:end="131:16">prefixes</name> <operator pos:start="131:18" pos:end="131:18">&amp;</operator> <name pos:start="131:20" pos:end="131:30">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="133:9" pos:end="133:22"><block_content pos:start="133:9" pos:end="133:22">

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><call pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:19">gen_op_lock</name><argument_list pos:start="133:20" pos:end="133:21">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:27">/* now check op code */</comment>

 <label pos:start="139:2" pos:end="139:10"><name pos:start="139:2" pos:end="139:9">reswitch</name>:</label>

    <switch pos:start="141:5" pos:end="3727:5">switch<condition pos:start="141:11" pos:end="141:13">(<expr pos:start="141:12" pos:end="141:12"><name pos:start="141:12" pos:end="141:12">b</name></expr>)</condition> <block pos:start="141:15" pos:end="3727:5">{<block_content pos:start="143:5" pos:end="3725:24">

    <case pos:start="143:5" pos:end="143:14">case <expr pos:start="143:10" pos:end="143:13"><literal type="number" pos:start="143:10" pos:end="143:13">0x0f</literal></expr>:</case>

        <comment type="block" format="doxygen" pos:start="145:9" pos:end="145:36">/**************************/</comment>

        <comment type="block" pos:start="147:9" pos:end="147:30">/* extended op code */</comment>

        <expr_stmt pos:start="149:9" pos:end="149:34"><expr pos:start="149:9" pos:end="149:33"><name pos:start="149:9" pos:end="149:9">b</name> <operator pos:start="149:11" pos:end="149:11">=</operator> <call pos:start="149:13" pos:end="149:25"><name pos:start="149:13" pos:end="149:16">ldub</name><argument_list pos:start="149:17" pos:end="149:25">(<argument pos:start="149:18" pos:end="149:24"><expr pos:start="149:18" pos:end="149:24"><name pos:start="149:18" pos:end="149:22"><name pos:start="149:18" pos:end="149:18">s</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:22">pc</name></name><operator pos:start="149:23" pos:end="149:24">++</operator></expr></argument>)</argument_list></call> <operator pos:start="149:27" pos:end="149:27">|</operator> <literal type="number" pos:start="149:29" pos:end="149:33">0x100</literal></expr>;</expr_stmt>

        <goto pos:start="151:9" pos:end="151:22">goto <name pos:start="151:14" pos:end="151:21">reswitch</name>;</goto>

        

        <comment type="block" format="doxygen" pos:start="155:9" pos:end="155:36">/**************************/</comment>

        <comment type="block" pos:start="157:9" pos:end="157:27">/* arith &amp; logic */</comment>

    <case pos:start="159:5" pos:end="159:23">case <expr pos:start="159:10" pos:end="159:22"><literal type="number" pos:start="159:10" pos:end="159:13">0x00</literal> <operator pos:start="159:15" pos:end="159:17">...</operator> <literal type="number" pos:start="159:19" pos:end="159:22">0x05</literal></expr>:</case>

    <case pos:start="161:5" pos:end="161:23">case <expr pos:start="161:10" pos:end="161:22"><literal type="number" pos:start="161:10" pos:end="161:13">0x08</literal> <operator pos:start="161:15" pos:end="161:17">...</operator> <literal type="number" pos:start="161:19" pos:end="161:22">0x0d</literal></expr>:</case>

    <case pos:start="163:5" pos:end="163:23">case <expr pos:start="163:10" pos:end="163:22"><literal type="number" pos:start="163:10" pos:end="163:13">0x10</literal> <operator pos:start="163:15" pos:end="163:17">...</operator> <literal type="number" pos:start="163:19" pos:end="163:22">0x15</literal></expr>:</case>

    <case pos:start="165:5" pos:end="165:23">case <expr pos:start="165:10" pos:end="165:22"><literal type="number" pos:start="165:10" pos:end="165:13">0x18</literal> <operator pos:start="165:15" pos:end="165:17">...</operator> <literal type="number" pos:start="165:19" pos:end="165:22">0x1d</literal></expr>:</case>

    <case pos:start="167:5" pos:end="167:23">case <expr pos:start="167:10" pos:end="167:22"><literal type="number" pos:start="167:10" pos:end="167:13">0x20</literal> <operator pos:start="167:15" pos:end="167:17">...</operator> <literal type="number" pos:start="167:19" pos:end="167:22">0x25</literal></expr>:</case>

    <case pos:start="169:5" pos:end="169:23">case <expr pos:start="169:10" pos:end="169:22"><literal type="number" pos:start="169:10" pos:end="169:13">0x28</literal> <operator pos:start="169:15" pos:end="169:17">...</operator> <literal type="number" pos:start="169:19" pos:end="169:22">0x2d</literal></expr>:</case>

    <case pos:start="171:5" pos:end="171:23">case <expr pos:start="171:10" pos:end="171:22"><literal type="number" pos:start="171:10" pos:end="171:13">0x30</literal> <operator pos:start="171:15" pos:end="171:17">...</operator> <literal type="number" pos:start="171:19" pos:end="171:22">0x35</literal></expr>:</case>

    <case pos:start="173:5" pos:end="173:23">case <expr pos:start="173:10" pos:end="173:22"><literal type="number" pos:start="173:10" pos:end="173:13">0x38</literal> <operator pos:start="173:15" pos:end="173:17">...</operator> <literal type="number" pos:start="173:19" pos:end="173:22">0x3d</literal></expr>:</case>

        <block pos:start="175:9" pos:end="269:9">{<block_content pos:start="177:13" pos:end="267:13">

            <decl_stmt pos:start="177:13" pos:end="177:27"><decl pos:start="177:13" pos:end="177:18"><type pos:start="177:13" pos:end="177:15"><name pos:start="177:13" pos:end="177:15">int</name></type> <name pos:start="177:17" pos:end="177:18">op</name></decl>, <decl pos:start="177:21" pos:end="177:21"><type ref="prev" pos:start="177:13" pos:end="177:15"/><name pos:start="177:21" pos:end="177:21">f</name></decl>, <decl pos:start="177:24" pos:end="177:26"><type ref="prev" pos:start="177:13" pos:end="177:15"/><name pos:start="177:24" pos:end="177:26">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:30"><expr pos:start="179:13" pos:end="179:29"><name pos:start="179:13" pos:end="179:14">op</name> <operator pos:start="179:16" pos:end="179:16">=</operator> <operator pos:start="179:18" pos:end="179:18">(</operator><name pos:start="179:19" pos:end="179:19">b</name> <operator pos:start="179:21" pos:end="179:22">&gt;&gt;</operator> <literal type="number" pos:start="179:24" pos:end="179:24">3</literal><operator pos:start="179:25" pos:end="179:25">)</operator> <operator pos:start="179:27" pos:end="179:27">&amp;</operator> <literal type="number" pos:start="179:29" pos:end="179:29">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:29"><expr pos:start="181:13" pos:end="181:28"><name pos:start="181:13" pos:end="181:13">f</name> <operator pos:start="181:15" pos:end="181:15">=</operator> <operator pos:start="181:17" pos:end="181:17">(</operator><name pos:start="181:18" pos:end="181:18">b</name> <operator pos:start="181:20" pos:end="181:21">&gt;&gt;</operator> <literal type="number" pos:start="181:23" pos:end="181:23">1</literal><operator pos:start="181:24" pos:end="181:24">)</operator> <operator pos:start="181:26" pos:end="181:26">&amp;</operator> <literal type="number" pos:start="181:28" pos:end="181:28">3</literal></expr>;</expr_stmt>



            <if_stmt pos:start="185:13" pos:end="191:47"><if pos:start="185:13" pos:end="187:29">if <condition pos:start="185:16" pos:end="185:29">(<expr pos:start="185:17" pos:end="185:28"><operator pos:start="185:17" pos:end="185:17">(</operator><name pos:start="185:18" pos:end="185:18">b</name> <operator pos:start="185:20" pos:end="185:20">&amp;</operator> <literal type="number" pos:start="185:22" pos:end="185:22">1</literal><operator pos:start="185:23" pos:end="185:23">)</operator> <operator pos:start="185:25" pos:end="185:26">==</operator> <literal type="number" pos:start="185:28" pos:end="185:28">0</literal></expr>)</condition><block type="pseudo" pos:start="187:17" pos:end="187:29"><block_content pos:start="187:17" pos:end="187:29">

                <expr_stmt pos:start="187:17" pos:end="187:29"><expr pos:start="187:17" pos:end="187:28"><name pos:start="187:17" pos:end="187:18">ot</name> <operator pos:start="187:20" pos:end="187:20">=</operator> <name pos:start="187:22" pos:end="187:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="189:13" pos:end="191:47">else<block type="pseudo" pos:start="191:17" pos:end="191:47"><block_content pos:start="191:17" pos:end="191:47">

                <expr_stmt pos:start="191:17" pos:end="191:47"><expr pos:start="191:17" pos:end="191:46"><name pos:start="191:17" pos:end="191:18">ot</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <ternary pos:start="191:22" pos:end="191:46"><condition pos:start="191:22" pos:end="191:28"><expr pos:start="191:22" pos:end="191:26"><name pos:start="191:22" pos:end="191:26">dflag</name></expr> ?</condition><then pos:start="191:30" pos:end="191:36"> <expr pos:start="191:30" pos:end="191:36"><name pos:start="191:30" pos:end="191:36">OT_LONG</name></expr> </then><else pos:start="191:38" pos:end="191:46">: <expr pos:start="191:40" pos:end="191:46"><name pos:start="191:40" pos:end="191:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <switch pos:start="195:13" pos:end="267:13">switch<condition pos:start="195:19" pos:end="195:21">(<expr pos:start="195:20" pos:end="195:20"><name pos:start="195:20" pos:end="195:20">f</name></expr>)</condition> <block pos:start="195:23" pos:end="267:13">{<block_content pos:start="197:13" pos:end="265:22">

            <case pos:start="197:13" pos:end="197:19">case <expr pos:start="197:18" pos:end="197:18"><literal type="number" pos:start="197:18" pos:end="197:18">0</literal></expr>:</case> <comment type="block" pos:start="197:21" pos:end="197:35">/* OP Ev, Gv */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:38"><expr pos:start="199:17" pos:end="199:37"><name pos:start="199:17" pos:end="199:21">modrm</name> <operator pos:start="199:23" pos:end="199:23">=</operator> <call pos:start="199:25" pos:end="199:37"><name pos:start="199:25" pos:end="199:28">ldub</name><argument_list pos:start="199:29" pos:end="199:37">(<argument pos:start="199:30" pos:end="199:36"><expr pos:start="199:30" pos:end="199:36"><name pos:start="199:30" pos:end="199:34"><name pos:start="199:30" pos:end="199:30">s</name><operator pos:start="199:31" pos:end="199:32">-&gt;</operator><name pos:start="199:33" pos:end="199:34">pc</name></name><operator pos:start="199:35" pos:end="199:36">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:50"><expr pos:start="201:17" pos:end="201:49"><name pos:start="201:17" pos:end="201:19">reg</name> <operator pos:start="201:21" pos:end="201:21">=</operator> <operator pos:start="201:23" pos:end="201:23">(</operator><operator pos:start="201:24" pos:end="201:24">(</operator><name pos:start="201:25" pos:end="201:29">modrm</name> <operator pos:start="201:31" pos:end="201:32">&gt;&gt;</operator> <literal type="number" pos:start="201:34" pos:end="201:34">3</literal><operator pos:start="201:35" pos:end="201:35">)</operator> <operator pos:start="201:37" pos:end="201:37">&amp;</operator> <literal type="number" pos:start="201:39" pos:end="201:39">7</literal><operator pos:start="201:40" pos:end="201:40">)</operator> <operator pos:start="201:42" pos:end="201:42">+</operator> <name pos:start="201:44" pos:end="201:49">OR_EAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="203:17" pos:end="203:39"><expr pos:start="203:17" pos:end="203:38"><name pos:start="203:17" pos:end="203:19">mod</name> <operator pos:start="203:21" pos:end="203:21">=</operator> <operator pos:start="203:23" pos:end="203:23">(</operator><name pos:start="203:24" pos:end="203:28">modrm</name> <operator pos:start="203:30" pos:end="203:31">&gt;&gt;</operator> <literal type="number" pos:start="203:33" pos:end="203:33">6</literal><operator pos:start="203:34" pos:end="203:34">)</operator> <operator pos:start="203:36" pos:end="203:36">&amp;</operator> <literal type="number" pos:start="203:38" pos:end="203:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:31"><expr pos:start="205:17" pos:end="205:30"><name pos:start="205:17" pos:end="205:18">rm</name> <operator pos:start="205:20" pos:end="205:20">=</operator> <name pos:start="205:22" pos:end="205:26">modrm</name> <operator pos:start="205:28" pos:end="205:28">&amp;</operator> <literal type="number" pos:start="205:30" pos:end="205:30">7</literal></expr>;</expr_stmt>

                <if_stmt pos:start="207:17" pos:end="219:17"><if pos:start="207:17" pos:end="215:17">if <condition pos:start="207:20" pos:end="207:29">(<expr pos:start="207:21" pos:end="207:28"><name pos:start="207:21" pos:end="207:23">mod</name> <operator pos:start="207:25" pos:end="207:26">!=</operator> <literal type="number" pos:start="207:28" pos:end="207:28">3</literal></expr>)</condition> <block pos:start="207:31" pos:end="215:17">{<block_content pos:start="209:21" pos:end="213:36">

                    <expr_stmt pos:start="209:21" pos:end="209:69"><expr pos:start="209:21" pos:end="209:68"><call pos:start="209:21" pos:end="209:68"><name pos:start="209:21" pos:end="209:33">gen_lea_modrm</name><argument_list pos:start="209:34" pos:end="209:68">(<argument pos:start="209:35" pos:end="209:35"><expr pos:start="209:35" pos:end="209:35"><name pos:start="209:35" pos:end="209:35">s</name></expr></argument>, <argument pos:start="209:38" pos:end="209:42"><expr pos:start="209:38" pos:end="209:42"><name pos:start="209:38" pos:end="209:42">modrm</name></expr></argument>, <argument pos:start="209:45" pos:end="209:53"><expr pos:start="209:45" pos:end="209:53"><operator pos:start="209:45" pos:end="209:45">&amp;</operator><name pos:start="209:46" pos:end="209:53">reg_addr</name></expr></argument>, <argument pos:start="209:56" pos:end="209:67"><expr pos:start="209:56" pos:end="209:67"><operator pos:start="209:56" pos:end="209:56">&amp;</operator><name pos:start="209:57" pos:end="209:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="211:21" pos:end="211:42"><expr pos:start="211:21" pos:end="211:41"><name pos:start="211:21" pos:end="211:39"><name pos:start="211:21" pos:end="211:35">gen_op_ld_T0_A0</name><index pos:start="211:36" pos:end="211:39">[<expr pos:start="211:37" pos:end="211:38"><name pos:start="211:37" pos:end="211:38">ot</name></expr>]</index></name><operator pos:start="211:40" pos:end="211:40">(</operator><operator pos:start="211:41" pos:end="211:41">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="213:21" pos:end="213:36"><expr pos:start="213:21" pos:end="213:35"><name pos:start="213:21" pos:end="213:25">opreg</name> <operator pos:start="213:27" pos:end="213:27">=</operator> <name pos:start="213:29" pos:end="213:35">OR_TMP0</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="215:19" pos:end="219:17">else <block pos:start="215:24" pos:end="219:17">{<block_content pos:start="217:21" pos:end="217:40">

                    <expr_stmt pos:start="217:21" pos:end="217:40"><expr pos:start="217:21" pos:end="217:39"><name pos:start="217:21" pos:end="217:25">opreg</name> <operator pos:start="217:27" pos:end="217:27">=</operator> <name pos:start="217:29" pos:end="217:34">OR_EAX</name> <operator pos:start="217:36" pos:end="217:36">+</operator> <name pos:start="217:38" pos:end="217:39">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="221:17" pos:end="221:46"><expr pos:start="221:17" pos:end="221:45"><call pos:start="221:17" pos:end="221:45"><name pos:start="221:17" pos:end="221:22">gen_op</name><argument_list pos:start="221:23" pos:end="221:45">(<argument pos:start="221:24" pos:end="221:24"><expr pos:start="221:24" pos:end="221:24"><name pos:start="221:24" pos:end="221:24">s</name></expr></argument>, <argument pos:start="221:27" pos:end="221:28"><expr pos:start="221:27" pos:end="221:28"><name pos:start="221:27" pos:end="221:28">op</name></expr></argument>, <argument pos:start="221:31" pos:end="221:32"><expr pos:start="221:31" pos:end="221:32"><name pos:start="221:31" pos:end="221:32">ot</name></expr></argument>, <argument pos:start="221:35" pos:end="221:39"><expr pos:start="221:35" pos:end="221:39"><name pos:start="221:35" pos:end="221:39">opreg</name></expr></argument>, <argument pos:start="221:42" pos:end="221:44"><expr pos:start="221:42" pos:end="221:44"><name pos:start="221:42" pos:end="221:44">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="223:17" pos:end="227:17"><if pos:start="223:17" pos:end="227:17">if <condition pos:start="223:20" pos:end="223:40">(<expr pos:start="223:21" pos:end="223:39"><name pos:start="223:21" pos:end="223:23">mod</name> <operator pos:start="223:25" pos:end="223:26">!=</operator> <literal type="number" pos:start="223:28" pos:end="223:28">3</literal> <operator pos:start="223:30" pos:end="223:31">&amp;&amp;</operator> <name pos:start="223:33" pos:end="223:34">op</name> <operator pos:start="223:36" pos:end="223:37">!=</operator> <literal type="number" pos:start="223:39" pos:end="223:39">7</literal></expr>)</condition> <block pos:start="223:42" pos:end="227:17">{<block_content pos:start="225:21" pos:end="225:42">

                    <expr_stmt pos:start="225:21" pos:end="225:42"><expr pos:start="225:21" pos:end="225:41"><name pos:start="225:21" pos:end="225:39"><name pos:start="225:21" pos:end="225:35">gen_op_st_T0_A0</name><index pos:start="225:36" pos:end="225:39">[<expr pos:start="225:37" pos:end="225:38"><name pos:start="225:37" pos:end="225:38">ot</name></expr>]</index></name><operator pos:start="225:40" pos:end="225:40">(</operator><operator pos:start="225:41" pos:end="225:41">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="229:17" pos:end="229:22">break;</break>

            <case pos:start="231:13" pos:end="231:19">case <expr pos:start="231:18" pos:end="231:18"><literal type="number" pos:start="231:18" pos:end="231:18">1</literal></expr>:</case> <comment type="block" pos:start="231:21" pos:end="231:35">/* OP Gv, Ev */</comment>

                <expr_stmt pos:start="233:17" pos:end="233:38"><expr pos:start="233:17" pos:end="233:37"><name pos:start="233:17" pos:end="233:21">modrm</name> <operator pos:start="233:23" pos:end="233:23">=</operator> <call pos:start="233:25" pos:end="233:37"><name pos:start="233:25" pos:end="233:28">ldub</name><argument_list pos:start="233:29" pos:end="233:37">(<argument pos:start="233:30" pos:end="233:36"><expr pos:start="233:30" pos:end="233:36"><name pos:start="233:30" pos:end="233:34"><name pos:start="233:30" pos:end="233:30">s</name><operator pos:start="233:31" pos:end="233:32">-&gt;</operator><name pos:start="233:33" pos:end="233:34">pc</name></name><operator pos:start="233:35" pos:end="233:36">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:39"><expr pos:start="235:17" pos:end="235:38"><name pos:start="235:17" pos:end="235:19">mod</name> <operator pos:start="235:21" pos:end="235:21">=</operator> <operator pos:start="235:23" pos:end="235:23">(</operator><name pos:start="235:24" pos:end="235:28">modrm</name> <operator pos:start="235:30" pos:end="235:31">&gt;&gt;</operator> <literal type="number" pos:start="235:33" pos:end="235:33">6</literal><operator pos:start="235:34" pos:end="235:34">)</operator> <operator pos:start="235:36" pos:end="235:36">&amp;</operator> <literal type="number" pos:start="235:38" pos:end="235:38">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="237:17" pos:end="237:50"><expr pos:start="237:17" pos:end="237:49"><name pos:start="237:17" pos:end="237:19">reg</name> <operator pos:start="237:21" pos:end="237:21">=</operator> <operator pos:start="237:23" pos:end="237:23">(</operator><operator pos:start="237:24" pos:end="237:24">(</operator><name pos:start="237:25" pos:end="237:29">modrm</name> <operator pos:start="237:31" pos:end="237:32">&gt;&gt;</operator> <literal type="number" pos:start="237:34" pos:end="237:34">3</literal><operator pos:start="237:35" pos:end="237:35">)</operator> <operator pos:start="237:37" pos:end="237:37">&amp;</operator> <literal type="number" pos:start="237:39" pos:end="237:39">7</literal><operator pos:start="237:40" pos:end="237:40">)</operator> <operator pos:start="237:42" pos:end="237:42">+</operator> <name pos:start="237:44" pos:end="237:49">OR_EAX</name></expr>;</expr_stmt>

                <expr_stmt pos:start="239:17" pos:end="239:31"><expr pos:start="239:17" pos:end="239:30"><name pos:start="239:17" pos:end="239:18">rm</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <name pos:start="239:22" pos:end="239:26">modrm</name> <operator pos:start="239:28" pos:end="239:28">&amp;</operator> <literal type="number" pos:start="239:30" pos:end="239:30">7</literal></expr>;</expr_stmt>

                <if_stmt pos:start="241:17" pos:end="253:17"><if pos:start="241:17" pos:end="249:17">if <condition pos:start="241:20" pos:end="241:29">(<expr pos:start="241:21" pos:end="241:28"><name pos:start="241:21" pos:end="241:23">mod</name> <operator pos:start="241:25" pos:end="241:26">!=</operator> <literal type="number" pos:start="241:28" pos:end="241:28">3</literal></expr>)</condition> <block pos:start="241:31" pos:end="249:17">{<block_content pos:start="243:21" pos:end="247:36">

                    <expr_stmt pos:start="243:21" pos:end="243:69"><expr pos:start="243:21" pos:end="243:68"><call pos:start="243:21" pos:end="243:68"><name pos:start="243:21" pos:end="243:33">gen_lea_modrm</name><argument_list pos:start="243:34" pos:end="243:68">(<argument pos:start="243:35" pos:end="243:35"><expr pos:start="243:35" pos:end="243:35"><name pos:start="243:35" pos:end="243:35">s</name></expr></argument>, <argument pos:start="243:38" pos:end="243:42"><expr pos:start="243:38" pos:end="243:42"><name pos:start="243:38" pos:end="243:42">modrm</name></expr></argument>, <argument pos:start="243:45" pos:end="243:53"><expr pos:start="243:45" pos:end="243:53"><operator pos:start="243:45" pos:end="243:45">&amp;</operator><name pos:start="243:46" pos:end="243:53">reg_addr</name></expr></argument>, <argument pos:start="243:56" pos:end="243:67"><expr pos:start="243:56" pos:end="243:67"><operator pos:start="243:56" pos:end="243:56">&amp;</operator><name pos:start="243:57" pos:end="243:67">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="245:21" pos:end="245:42"><expr pos:start="245:21" pos:end="245:41"><name pos:start="245:21" pos:end="245:39"><name pos:start="245:21" pos:end="245:35">gen_op_ld_T1_A0</name><index pos:start="245:36" pos:end="245:39">[<expr pos:start="245:37" pos:end="245:38"><name pos:start="245:37" pos:end="245:38">ot</name></expr>]</index></name><operator pos:start="245:40" pos:end="245:40">(</operator><operator pos:start="245:41" pos:end="245:41">)</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="247:21" pos:end="247:36"><expr pos:start="247:21" pos:end="247:35"><name pos:start="247:21" pos:end="247:25">opreg</name> <operator pos:start="247:27" pos:end="247:27">=</operator> <name pos:start="247:29" pos:end="247:35">OR_TMP1</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="249:19" pos:end="253:17">else <block pos:start="249:24" pos:end="253:17">{<block_content pos:start="251:21" pos:end="251:40">

                    <expr_stmt pos:start="251:21" pos:end="251:40"><expr pos:start="251:21" pos:end="251:39"><name pos:start="251:21" pos:end="251:25">opreg</name> <operator pos:start="251:27" pos:end="251:27">=</operator> <name pos:start="251:29" pos:end="251:34">OR_EAX</name> <operator pos:start="251:36" pos:end="251:36">+</operator> <name pos:start="251:38" pos:end="251:39">rm</name></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:46"><expr pos:start="255:17" pos:end="255:45"><call pos:start="255:17" pos:end="255:45"><name pos:start="255:17" pos:end="255:22">gen_op</name><argument_list pos:start="255:23" pos:end="255:45">(<argument pos:start="255:24" pos:end="255:24"><expr pos:start="255:24" pos:end="255:24"><name pos:start="255:24" pos:end="255:24">s</name></expr></argument>, <argument pos:start="255:27" pos:end="255:28"><expr pos:start="255:27" pos:end="255:28"><name pos:start="255:27" pos:end="255:28">op</name></expr></argument>, <argument pos:start="255:31" pos:end="255:32"><expr pos:start="255:31" pos:end="255:32"><name pos:start="255:31" pos:end="255:32">ot</name></expr></argument>, <argument pos:start="255:35" pos:end="255:37"><expr pos:start="255:35" pos:end="255:37"><name pos:start="255:35" pos:end="255:37">reg</name></expr></argument>, <argument pos:start="255:40" pos:end="255:44"><expr pos:start="255:40" pos:end="255:44"><name pos:start="255:40" pos:end="255:44">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="257:17" pos:end="257:22">break;</break>

            <case pos:start="259:13" pos:end="259:19">case <expr pos:start="259:18" pos:end="259:18"><literal type="number" pos:start="259:18" pos:end="259:18">2</literal></expr>:</case> <comment type="block" pos:start="259:21" pos:end="259:34">/* OP A, Iv */</comment>

                <expr_stmt pos:start="261:17" pos:end="261:38"><expr pos:start="261:17" pos:end="261:37"><name pos:start="261:17" pos:end="261:19">val</name> <operator pos:start="261:21" pos:end="261:21">=</operator> <call pos:start="261:23" pos:end="261:37"><name pos:start="261:23" pos:end="261:30">insn_get</name><argument_list pos:start="261:31" pos:end="261:37">(<argument pos:start="261:32" pos:end="261:32"><expr pos:start="261:32" pos:end="261:32"><name pos:start="261:32" pos:end="261:32">s</name></expr></argument>, <argument pos:start="261:35" pos:end="261:36"><expr pos:start="261:35" pos:end="261:36"><name pos:start="261:35" pos:end="261:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:48"><expr pos:start="263:17" pos:end="263:47"><call pos:start="263:17" pos:end="263:47"><name pos:start="263:17" pos:end="263:23">gen_opi</name><argument_list pos:start="263:24" pos:end="263:47">(<argument pos:start="263:25" pos:end="263:25"><expr pos:start="263:25" pos:end="263:25"><name pos:start="263:25" pos:end="263:25">s</name></expr></argument>, <argument pos:start="263:28" pos:end="263:29"><expr pos:start="263:28" pos:end="263:29"><name pos:start="263:28" pos:end="263:29">op</name></expr></argument>, <argument pos:start="263:32" pos:end="263:33"><expr pos:start="263:32" pos:end="263:33"><name pos:start="263:32" pos:end="263:33">ot</name></expr></argument>, <argument pos:start="263:36" pos:end="263:41"><expr pos:start="263:36" pos:end="263:41"><name pos:start="263:36" pos:end="263:41">OR_EAX</name></expr></argument>, <argument pos:start="263:44" pos:end="263:46"><expr pos:start="263:44" pos:end="263:46"><name pos:start="263:44" pos:end="263:46">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="265:17" pos:end="265:22">break;</break>

            </block_content>}</block></switch>

        </block_content>}</block>

        <break pos:start="271:9" pos:end="271:14">break;</break>



    <case pos:start="275:5" pos:end="275:14">case <expr pos:start="275:10" pos:end="275:13"><literal type="number" pos:start="275:10" pos:end="275:13">0x80</literal></expr>:</case> <comment type="block" pos:start="275:16" pos:end="275:25">/* GRP1 */</comment>

    <case pos:start="277:5" pos:end="277:14">case <expr pos:start="277:10" pos:end="277:13"><literal type="number" pos:start="277:10" pos:end="277:13">0x81</literal></expr>:</case>

    <case pos:start="279:5" pos:end="279:14">case <expr pos:start="279:10" pos:end="279:13"><literal type="number" pos:start="279:10" pos:end="279:13">0x83</literal></expr>:</case>

        <block pos:start="281:9" pos:end="353:9">{<block_content pos:start="283:13" pos:end="351:13">

            <decl_stmt pos:start="283:13" pos:end="283:20"><decl pos:start="283:13" pos:end="283:19"><type pos:start="283:13" pos:end="283:15"><name pos:start="283:13" pos:end="283:15">int</name></type> <name pos:start="283:17" pos:end="283:19">val</name></decl>;</decl_stmt>



            <if_stmt pos:start="287:13" pos:end="293:47"><if pos:start="287:13" pos:end="289:29">if <condition pos:start="287:16" pos:end="287:29">(<expr pos:start="287:17" pos:end="287:28"><operator pos:start="287:17" pos:end="287:17">(</operator><name pos:start="287:18" pos:end="287:18">b</name> <operator pos:start="287:20" pos:end="287:20">&amp;</operator> <literal type="number" pos:start="287:22" pos:end="287:22">1</literal><operator pos:start="287:23" pos:end="287:23">)</operator> <operator pos:start="287:25" pos:end="287:26">==</operator> <literal type="number" pos:start="287:28" pos:end="287:28">0</literal></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:29"><block_content pos:start="289:17" pos:end="289:29">

                <expr_stmt pos:start="289:17" pos:end="289:29"><expr pos:start="289:17" pos:end="289:28"><name pos:start="289:17" pos:end="289:18">ot</name> <operator pos:start="289:20" pos:end="289:20">=</operator> <name pos:start="289:22" pos:end="289:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="291:13" pos:end="293:47">else<block type="pseudo" pos:start="293:17" pos:end="293:47"><block_content pos:start="293:17" pos:end="293:47">

                <expr_stmt pos:start="293:17" pos:end="293:47"><expr pos:start="293:17" pos:end="293:46"><name pos:start="293:17" pos:end="293:18">ot</name> <operator pos:start="293:20" pos:end="293:20">=</operator> <ternary pos:start="293:22" pos:end="293:46"><condition pos:start="293:22" pos:end="293:28"><expr pos:start="293:22" pos:end="293:26"><name pos:start="293:22" pos:end="293:26">dflag</name></expr> ?</condition><then pos:start="293:30" pos:end="293:36"> <expr pos:start="293:30" pos:end="293:36"><name pos:start="293:30" pos:end="293:36">OT_LONG</name></expr> </then><else pos:start="293:38" pos:end="293:46">: <expr pos:start="293:40" pos:end="293:46"><name pos:start="293:40" pos:end="293:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <expr_stmt pos:start="297:13" pos:end="297:34"><expr pos:start="297:13" pos:end="297:33"><name pos:start="297:13" pos:end="297:17">modrm</name> <operator pos:start="297:19" pos:end="297:19">=</operator> <call pos:start="297:21" pos:end="297:33"><name pos:start="297:21" pos:end="297:24">ldub</name><argument_list pos:start="297:25" pos:end="297:33">(<argument pos:start="297:26" pos:end="297:32"><expr pos:start="297:26" pos:end="297:32"><name pos:start="297:26" pos:end="297:30"><name pos:start="297:26" pos:end="297:26">s</name><operator pos:start="297:27" pos:end="297:28">-&gt;</operator><name pos:start="297:29" pos:end="297:30">pc</name></name><operator pos:start="297:31" pos:end="297:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:35"><expr pos:start="299:13" pos:end="299:34"><name pos:start="299:13" pos:end="299:15">mod</name> <operator pos:start="299:17" pos:end="299:17">=</operator> <operator pos:start="299:19" pos:end="299:19">(</operator><name pos:start="299:20" pos:end="299:24">modrm</name> <operator pos:start="299:26" pos:end="299:27">&gt;&gt;</operator> <literal type="number" pos:start="299:29" pos:end="299:29">6</literal><operator pos:start="299:30" pos:end="299:30">)</operator> <operator pos:start="299:32" pos:end="299:32">&amp;</operator> <literal type="number" pos:start="299:34" pos:end="299:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="301:13" pos:end="301:27"><expr pos:start="301:13" pos:end="301:26"><name pos:start="301:13" pos:end="301:14">rm</name> <operator pos:start="301:16" pos:end="301:16">=</operator> <name pos:start="301:18" pos:end="301:22">modrm</name> <operator pos:start="301:24" pos:end="301:24">&amp;</operator> <literal type="number" pos:start="301:26" pos:end="301:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:34"><expr pos:start="303:13" pos:end="303:33"><name pos:start="303:13" pos:end="303:14">op</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <operator pos:start="303:18" pos:end="303:18">(</operator><name pos:start="303:19" pos:end="303:23">modrm</name> <operator pos:start="303:25" pos:end="303:26">&gt;&gt;</operator> <literal type="number" pos:start="303:28" pos:end="303:28">3</literal><operator pos:start="303:29" pos:end="303:29">)</operator> <operator pos:start="303:31" pos:end="303:31">&amp;</operator> <literal type="number" pos:start="303:33" pos:end="303:33">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="307:13" pos:end="319:13"><if pos:start="307:13" pos:end="315:13">if <condition pos:start="307:16" pos:end="307:25">(<expr pos:start="307:17" pos:end="307:24"><name pos:start="307:17" pos:end="307:19">mod</name> <operator pos:start="307:21" pos:end="307:22">!=</operator> <literal type="number" pos:start="307:24" pos:end="307:24">3</literal></expr>)</condition> <block pos:start="307:27" pos:end="315:13">{<block_content pos:start="309:17" pos:end="313:32">

                <expr_stmt pos:start="309:17" pos:end="309:65"><expr pos:start="309:17" pos:end="309:64"><call pos:start="309:17" pos:end="309:64"><name pos:start="309:17" pos:end="309:29">gen_lea_modrm</name><argument_list pos:start="309:30" pos:end="309:64">(<argument pos:start="309:31" pos:end="309:31"><expr pos:start="309:31" pos:end="309:31"><name pos:start="309:31" pos:end="309:31">s</name></expr></argument>, <argument pos:start="309:34" pos:end="309:38"><expr pos:start="309:34" pos:end="309:38"><name pos:start="309:34" pos:end="309:38">modrm</name></expr></argument>, <argument pos:start="309:41" pos:end="309:49"><expr pos:start="309:41" pos:end="309:49"><operator pos:start="309:41" pos:end="309:41">&amp;</operator><name pos:start="309:42" pos:end="309:49">reg_addr</name></expr></argument>, <argument pos:start="309:52" pos:end="309:63"><expr pos:start="309:52" pos:end="309:63"><operator pos:start="309:52" pos:end="309:52">&amp;</operator><name pos:start="309:53" pos:end="309:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="311:17" pos:end="311:38"><expr pos:start="311:17" pos:end="311:37"><name pos:start="311:17" pos:end="311:35"><name pos:start="311:17" pos:end="311:31">gen_op_ld_T0_A0</name><index pos:start="311:32" pos:end="311:35">[<expr pos:start="311:33" pos:end="311:34"><name pos:start="311:33" pos:end="311:34">ot</name></expr>]</index></name><operator pos:start="311:36" pos:end="311:36">(</operator><operator pos:start="311:37" pos:end="311:37">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:32"><expr pos:start="313:17" pos:end="313:31"><name pos:start="313:17" pos:end="313:21">opreg</name> <operator pos:start="313:23" pos:end="313:23">=</operator> <name pos:start="313:25" pos:end="313:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="315:15" pos:end="319:13">else <block pos:start="315:20" pos:end="319:13">{<block_content pos:start="317:17" pos:end="317:36">

                <expr_stmt pos:start="317:17" pos:end="317:36"><expr pos:start="317:17" pos:end="317:35"><name pos:start="317:17" pos:end="317:21">opreg</name> <operator pos:start="317:23" pos:end="317:23">=</operator> <name pos:start="317:25" pos:end="317:26">rm</name> <operator pos:start="317:28" pos:end="317:28">+</operator> <name pos:start="317:30" pos:end="317:35">OR_EAX</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <switch pos:start="323:13" pos:end="341:13">switch<condition pos:start="323:19" pos:end="323:21">(<expr pos:start="323:20" pos:end="323:20"><name pos:start="323:20" pos:end="323:20">b</name></expr>)</condition> <block pos:start="323:23" pos:end="341:13">{<block_content pos:start="325:13" pos:end="339:22">

            <default pos:start="325:13" pos:end="325:20">default:</default>

            <case pos:start="327:13" pos:end="327:22">case <expr pos:start="327:18" pos:end="327:21"><literal type="number" pos:start="327:18" pos:end="327:21">0x80</literal></expr>:</case>

            <case pos:start="329:13" pos:end="329:22">case <expr pos:start="329:18" pos:end="329:21"><literal type="number" pos:start="329:18" pos:end="329:21">0x81</literal></expr>:</case>

                <expr_stmt pos:start="331:17" pos:end="331:38"><expr pos:start="331:17" pos:end="331:37"><name pos:start="331:17" pos:end="331:19">val</name> <operator pos:start="331:21" pos:end="331:21">=</operator> <call pos:start="331:23" pos:end="331:37"><name pos:start="331:23" pos:end="331:30">insn_get</name><argument_list pos:start="331:31" pos:end="331:37">(<argument pos:start="331:32" pos:end="331:32"><expr pos:start="331:32" pos:end="331:32"><name pos:start="331:32" pos:end="331:32">s</name></expr></argument>, <argument pos:start="331:35" pos:end="331:36"><expr pos:start="331:35" pos:end="331:36"><name pos:start="331:35" pos:end="331:36">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="333:17" pos:end="333:22">break;</break>

            <case pos:start="335:13" pos:end="335:22">case <expr pos:start="335:18" pos:end="335:21"><literal type="number" pos:start="335:18" pos:end="335:21">0x83</literal></expr>:</case>

                <expr_stmt pos:start="337:17" pos:end="337:51"><expr pos:start="337:17" pos:end="337:50"><name pos:start="337:17" pos:end="337:19">val</name> <operator pos:start="337:21" pos:end="337:21">=</operator> <operator pos:start="337:23" pos:end="337:23">(</operator><name pos:start="337:24" pos:end="337:29">int8_t</name><operator pos:start="337:30" pos:end="337:30">)</operator><call pos:start="337:31" pos:end="337:50"><name pos:start="337:31" pos:end="337:38">insn_get</name><argument_list pos:start="337:39" pos:end="337:50">(<argument pos:start="337:40" pos:end="337:40"><expr pos:start="337:40" pos:end="337:40"><name pos:start="337:40" pos:end="337:40">s</name></expr></argument>, <argument pos:start="337:43" pos:end="337:49"><expr pos:start="337:43" pos:end="337:49"><name pos:start="337:43" pos:end="337:49">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="339:17" pos:end="339:22">break;</break>

            </block_content>}</block></switch>



            <expr_stmt pos:start="345:13" pos:end="345:43"><expr pos:start="345:13" pos:end="345:42"><call pos:start="345:13" pos:end="345:42"><name pos:start="345:13" pos:end="345:19">gen_opi</name><argument_list pos:start="345:20" pos:end="345:42">(<argument pos:start="345:21" pos:end="345:21"><expr pos:start="345:21" pos:end="345:21"><name pos:start="345:21" pos:end="345:21">s</name></expr></argument>, <argument pos:start="345:24" pos:end="345:25"><expr pos:start="345:24" pos:end="345:25"><name pos:start="345:24" pos:end="345:25">op</name></expr></argument>, <argument pos:start="345:28" pos:end="345:29"><expr pos:start="345:28" pos:end="345:29"><name pos:start="345:28" pos:end="345:29">ot</name></expr></argument>, <argument pos:start="345:32" pos:end="345:36"><expr pos:start="345:32" pos:end="345:36"><name pos:start="345:32" pos:end="345:36">opreg</name></expr></argument>, <argument pos:start="345:39" pos:end="345:41"><expr pos:start="345:39" pos:end="345:41"><name pos:start="345:39" pos:end="345:41">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="347:13" pos:end="351:13"><if pos:start="347:13" pos:end="351:13">if <condition pos:start="347:16" pos:end="347:36">(<expr pos:start="347:17" pos:end="347:35"><name pos:start="347:17" pos:end="347:18">op</name> <operator pos:start="347:20" pos:end="347:21">!=</operator> <literal type="number" pos:start="347:23" pos:end="347:23">7</literal> <operator pos:start="347:25" pos:end="347:26">&amp;&amp;</operator> <name pos:start="347:28" pos:end="347:30">mod</name> <operator pos:start="347:32" pos:end="347:33">!=</operator> <literal type="number" pos:start="347:35" pos:end="347:35">3</literal></expr>)</condition> <block pos:start="347:38" pos:end="351:13">{<block_content pos:start="349:17" pos:end="349:38">

                <expr_stmt pos:start="349:17" pos:end="349:38"><expr pos:start="349:17" pos:end="349:37"><name pos:start="349:17" pos:end="349:35"><name pos:start="349:17" pos:end="349:31">gen_op_st_T0_A0</name><index pos:start="349:32" pos:end="349:35">[<expr pos:start="349:33" pos:end="349:34"><name pos:start="349:33" pos:end="349:34">ot</name></expr>]</index></name><operator pos:start="349:36" pos:end="349:36">(</operator><operator pos:start="349:37" pos:end="349:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="355:9" pos:end="355:14">break;</break>



        <comment type="block" format="doxygen" pos:start="359:9" pos:end="359:36">/**************************/</comment>

        <comment type="block" pos:start="361:9" pos:end="361:44">/* inc, dec, and other misc arith */</comment>

    <case pos:start="363:5" pos:end="363:23">case <expr pos:start="363:10" pos:end="363:22"><literal type="number" pos:start="363:10" pos:end="363:13">0x40</literal> <operator pos:start="363:15" pos:end="363:17">...</operator> <literal type="number" pos:start="363:19" pos:end="363:22">0x47</literal></expr>:</case> <comment type="block" pos:start="363:25" pos:end="363:36">/* inc Gv */</comment>

        <expr_stmt pos:start="365:9" pos:end="365:39"><expr pos:start="365:9" pos:end="365:38"><name pos:start="365:9" pos:end="365:10">ot</name> <operator pos:start="365:12" pos:end="365:12">=</operator> <ternary pos:start="365:14" pos:end="365:38"><condition pos:start="365:14" pos:end="365:20"><expr pos:start="365:14" pos:end="365:18"><name pos:start="365:14" pos:end="365:18">dflag</name></expr> ?</condition><then pos:start="365:22" pos:end="365:28"> <expr pos:start="365:22" pos:end="365:28"><name pos:start="365:22" pos:end="365:28">OT_LONG</name></expr> </then><else pos:start="365:30" pos:end="365:38">: <expr pos:start="365:32" pos:end="365:38"><name pos:start="365:32" pos:end="365:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="367:9" pos:end="367:44"><expr pos:start="367:9" pos:end="367:43"><call pos:start="367:9" pos:end="367:43"><name pos:start="367:9" pos:end="367:15">gen_inc</name><argument_list pos:start="367:16" pos:end="367:43">(<argument pos:start="367:17" pos:end="367:17"><expr pos:start="367:17" pos:end="367:17"><name pos:start="367:17" pos:end="367:17">s</name></expr></argument>, <argument pos:start="367:20" pos:end="367:21"><expr pos:start="367:20" pos:end="367:21"><name pos:start="367:20" pos:end="367:21">ot</name></expr></argument>, <argument pos:start="367:24" pos:end="367:39"><expr pos:start="367:24" pos:end="367:39"><name pos:start="367:24" pos:end="367:29">OR_EAX</name> <operator pos:start="367:31" pos:end="367:31">+</operator> <operator pos:start="367:33" pos:end="367:33">(</operator><name pos:start="367:34" pos:end="367:34">b</name> <operator pos:start="367:36" pos:end="367:36">&amp;</operator> <literal type="number" pos:start="367:38" pos:end="367:38">7</literal><operator pos:start="367:39" pos:end="367:39">)</operator></expr></argument>, <argument pos:start="367:42" pos:end="367:42"><expr pos:start="367:42" pos:end="367:42"><literal type="number" pos:start="367:42" pos:end="367:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="369:9" pos:end="369:14">break;</break>

    <case pos:start="371:5" pos:end="371:23">case <expr pos:start="371:10" pos:end="371:22"><literal type="number" pos:start="371:10" pos:end="371:13">0x48</literal> <operator pos:start="371:15" pos:end="371:17">...</operator> <literal type="number" pos:start="371:19" pos:end="371:22">0x4f</literal></expr>:</case> <comment type="block" pos:start="371:25" pos:end="371:36">/* dec Gv */</comment>

        <expr_stmt pos:start="373:9" pos:end="373:39"><expr pos:start="373:9" pos:end="373:38"><name pos:start="373:9" pos:end="373:10">ot</name> <operator pos:start="373:12" pos:end="373:12">=</operator> <ternary pos:start="373:14" pos:end="373:38"><condition pos:start="373:14" pos:end="373:20"><expr pos:start="373:14" pos:end="373:18"><name pos:start="373:14" pos:end="373:18">dflag</name></expr> ?</condition><then pos:start="373:22" pos:end="373:28"> <expr pos:start="373:22" pos:end="373:28"><name pos:start="373:22" pos:end="373:28">OT_LONG</name></expr> </then><else pos:start="373:30" pos:end="373:38">: <expr pos:start="373:32" pos:end="373:38"><name pos:start="373:32" pos:end="373:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="375:9" pos:end="375:45"><expr pos:start="375:9" pos:end="375:44"><call pos:start="375:9" pos:end="375:44"><name pos:start="375:9" pos:end="375:15">gen_inc</name><argument_list pos:start="375:16" pos:end="375:44">(<argument pos:start="375:17" pos:end="375:17"><expr pos:start="375:17" pos:end="375:17"><name pos:start="375:17" pos:end="375:17">s</name></expr></argument>, <argument pos:start="375:20" pos:end="375:21"><expr pos:start="375:20" pos:end="375:21"><name pos:start="375:20" pos:end="375:21">ot</name></expr></argument>, <argument pos:start="375:24" pos:end="375:39"><expr pos:start="375:24" pos:end="375:39"><name pos:start="375:24" pos:end="375:29">OR_EAX</name> <operator pos:start="375:31" pos:end="375:31">+</operator> <operator pos:start="375:33" pos:end="375:33">(</operator><name pos:start="375:34" pos:end="375:34">b</name> <operator pos:start="375:36" pos:end="375:36">&amp;</operator> <literal type="number" pos:start="375:38" pos:end="375:38">7</literal><operator pos:start="375:39" pos:end="375:39">)</operator></expr></argument>, <argument pos:start="375:42" pos:end="375:43"><expr pos:start="375:42" pos:end="375:43"><operator pos:start="375:42" pos:end="375:42">-</operator><literal type="number" pos:start="375:43" pos:end="375:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="377:9" pos:end="377:14">break;</break>

    <case pos:start="379:5" pos:end="379:14">case <expr pos:start="379:10" pos:end="379:13"><literal type="number" pos:start="379:10" pos:end="379:13">0xf6</literal></expr>:</case> <comment type="block" pos:start="379:16" pos:end="379:25">/* GRP3 */</comment>

    <case pos:start="381:5" pos:end="381:14">case <expr pos:start="381:10" pos:end="381:13"><literal type="number" pos:start="381:10" pos:end="381:13">0xf7</literal></expr>:</case>

        <if_stmt pos:start="383:9" pos:end="389:43"><if pos:start="383:9" pos:end="385:25">if <condition pos:start="383:12" pos:end="383:25">(<expr pos:start="383:13" pos:end="383:24"><operator pos:start="383:13" pos:end="383:13">(</operator><name pos:start="383:14" pos:end="383:14">b</name> <operator pos:start="383:16" pos:end="383:16">&amp;</operator> <literal type="number" pos:start="383:18" pos:end="383:18">1</literal><operator pos:start="383:19" pos:end="383:19">)</operator> <operator pos:start="383:21" pos:end="383:22">==</operator> <literal type="number" pos:start="383:24" pos:end="383:24">0</literal></expr>)</condition><block type="pseudo" pos:start="385:13" pos:end="385:25"><block_content pos:start="385:13" pos:end="385:25">

            <expr_stmt pos:start="385:13" pos:end="385:25"><expr pos:start="385:13" pos:end="385:24"><name pos:start="385:13" pos:end="385:14">ot</name> <operator pos:start="385:16" pos:end="385:16">=</operator> <name pos:start="385:18" pos:end="385:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="387:9" pos:end="389:43">else<block type="pseudo" pos:start="389:13" pos:end="389:43"><block_content pos:start="389:13" pos:end="389:43">

            <expr_stmt pos:start="389:13" pos:end="389:43"><expr pos:start="389:13" pos:end="389:42"><name pos:start="389:13" pos:end="389:14">ot</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <ternary pos:start="389:18" pos:end="389:42"><condition pos:start="389:18" pos:end="389:24"><expr pos:start="389:18" pos:end="389:22"><name pos:start="389:18" pos:end="389:22">dflag</name></expr> ?</condition><then pos:start="389:26" pos:end="389:32"> <expr pos:start="389:26" pos:end="389:32"><name pos:start="389:26" pos:end="389:32">OT_LONG</name></expr> </then><else pos:start="389:34" pos:end="389:42">: <expr pos:start="389:36" pos:end="389:42"><name pos:start="389:36" pos:end="389:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="393:9" pos:end="393:30"><expr pos:start="393:9" pos:end="393:29"><name pos:start="393:9" pos:end="393:13">modrm</name> <operator pos:start="393:15" pos:end="393:15">=</operator> <call pos:start="393:17" pos:end="393:29"><name pos:start="393:17" pos:end="393:20">ldub</name><argument_list pos:start="393:21" pos:end="393:29">(<argument pos:start="393:22" pos:end="393:28"><expr pos:start="393:22" pos:end="393:28"><name pos:start="393:22" pos:end="393:26"><name pos:start="393:22" pos:end="393:22">s</name><operator pos:start="393:23" pos:end="393:24">-&gt;</operator><name pos:start="393:25" pos:end="393:26">pc</name></name><operator pos:start="393:27" pos:end="393:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="395:9" pos:end="395:31"><expr pos:start="395:9" pos:end="395:30"><name pos:start="395:9" pos:end="395:11">mod</name> <operator pos:start="395:13" pos:end="395:13">=</operator> <operator pos:start="395:15" pos:end="395:15">(</operator><name pos:start="395:16" pos:end="395:20">modrm</name> <operator pos:start="395:22" pos:end="395:23">&gt;&gt;</operator> <literal type="number" pos:start="395:25" pos:end="395:25">6</literal><operator pos:start="395:26" pos:end="395:26">)</operator> <operator pos:start="395:28" pos:end="395:28">&amp;</operator> <literal type="number" pos:start="395:30" pos:end="395:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:23"><expr pos:start="397:9" pos:end="397:22"><name pos:start="397:9" pos:end="397:10">rm</name> <operator pos:start="397:12" pos:end="397:12">=</operator> <name pos:start="397:14" pos:end="397:18">modrm</name> <operator pos:start="397:20" pos:end="397:20">&amp;</operator> <literal type="number" pos:start="397:22" pos:end="397:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="399:9" pos:end="399:30"><expr pos:start="399:9" pos:end="399:29"><name pos:start="399:9" pos:end="399:10">op</name> <operator pos:start="399:12" pos:end="399:12">=</operator> <operator pos:start="399:14" pos:end="399:14">(</operator><name pos:start="399:15" pos:end="399:19">modrm</name> <operator pos:start="399:21" pos:end="399:22">&gt;&gt;</operator> <literal type="number" pos:start="399:24" pos:end="399:24">3</literal><operator pos:start="399:25" pos:end="399:25">)</operator> <operator pos:start="399:27" pos:end="399:27">&amp;</operator> <literal type="number" pos:start="399:29" pos:end="399:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="401:9" pos:end="411:9"><if pos:start="401:9" pos:end="407:9">if <condition pos:start="401:12" pos:end="401:21">(<expr pos:start="401:13" pos:end="401:20"><name pos:start="401:13" pos:end="401:15">mod</name> <operator pos:start="401:17" pos:end="401:18">!=</operator> <literal type="number" pos:start="401:20" pos:end="401:20">3</literal></expr>)</condition> <block pos:start="401:23" pos:end="407:9">{<block_content pos:start="403:13" pos:end="405:34">

            <expr_stmt pos:start="403:13" pos:end="403:61"><expr pos:start="403:13" pos:end="403:60"><call pos:start="403:13" pos:end="403:60"><name pos:start="403:13" pos:end="403:25">gen_lea_modrm</name><argument_list pos:start="403:26" pos:end="403:60">(<argument pos:start="403:27" pos:end="403:27"><expr pos:start="403:27" pos:end="403:27"><name pos:start="403:27" pos:end="403:27">s</name></expr></argument>, <argument pos:start="403:30" pos:end="403:34"><expr pos:start="403:30" pos:end="403:34"><name pos:start="403:30" pos:end="403:34">modrm</name></expr></argument>, <argument pos:start="403:37" pos:end="403:45"><expr pos:start="403:37" pos:end="403:45"><operator pos:start="403:37" pos:end="403:37">&amp;</operator><name pos:start="403:38" pos:end="403:45">reg_addr</name></expr></argument>, <argument pos:start="403:48" pos:end="403:59"><expr pos:start="403:48" pos:end="403:59"><operator pos:start="403:48" pos:end="403:48">&amp;</operator><name pos:start="403:49" pos:end="403:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:34"><expr pos:start="405:13" pos:end="405:33"><name pos:start="405:13" pos:end="405:31"><name pos:start="405:13" pos:end="405:27">gen_op_ld_T0_A0</name><index pos:start="405:28" pos:end="405:31">[<expr pos:start="405:29" pos:end="405:30"><name pos:start="405:29" pos:end="405:30">ot</name></expr>]</index></name><operator pos:start="405:32" pos:end="405:32">(</operator><operator pos:start="405:33" pos:end="405:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="407:11" pos:end="411:9">else <block pos:start="407:16" pos:end="411:9">{<block_content pos:start="409:13" pos:end="409:43">

            <expr_stmt pos:start="409:13" pos:end="409:43"><expr pos:start="409:13" pos:end="409:42"><name pos:start="409:13" pos:end="409:40"><name pos:start="409:13" pos:end="409:29">gen_op_mov_TN_reg</name><index pos:start="409:30" pos:end="409:33">[<expr pos:start="409:31" pos:end="409:32"><name pos:start="409:31" pos:end="409:32">ot</name></expr>]</index><index pos:start="409:34" pos:end="409:36">[<expr pos:start="409:35" pos:end="409:35"><literal type="number" pos:start="409:35" pos:end="409:35">0</literal></expr>]</index><index pos:start="409:37" pos:end="409:40">[<expr pos:start="409:38" pos:end="409:39"><name pos:start="409:38" pos:end="409:39">rm</name></expr>]</index></name><operator pos:start="409:41" pos:end="409:41">(</operator><operator pos:start="409:42" pos:end="409:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="415:9" pos:end="583:9">switch<condition pos:start="415:15" pos:end="415:18">(<expr pos:start="415:16" pos:end="415:17"><name pos:start="415:16" pos:end="415:17">op</name></expr>)</condition> <block pos:start="415:20" pos:end="583:9">{<block_content pos:start="417:9" pos:end="581:28">

        <case pos:start="417:9" pos:end="417:15">case <expr pos:start="417:14" pos:end="417:14"><literal type="number" pos:start="417:14" pos:end="417:14">0</literal></expr>:</case> <comment type="block" pos:start="417:17" pos:end="417:26">/* test */</comment>

            <expr_stmt pos:start="419:13" pos:end="419:34"><expr pos:start="419:13" pos:end="419:33"><name pos:start="419:13" pos:end="419:15">val</name> <operator pos:start="419:17" pos:end="419:17">=</operator> <call pos:start="419:19" pos:end="419:33"><name pos:start="419:19" pos:end="419:26">insn_get</name><argument_list pos:start="419:27" pos:end="419:33">(<argument pos:start="419:28" pos:end="419:28"><expr pos:start="419:28" pos:end="419:28"><name pos:start="419:28" pos:end="419:28">s</name></expr></argument>, <argument pos:start="419:31" pos:end="419:32"><expr pos:start="419:31" pos:end="419:32"><name pos:start="419:31" pos:end="419:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="421:13" pos:end="421:35"><expr pos:start="421:13" pos:end="421:34"><call pos:start="421:13" pos:end="421:34"><name pos:start="421:13" pos:end="421:29">gen_op_movl_T1_im</name><argument_list pos:start="421:30" pos:end="421:34">(<argument pos:start="421:31" pos:end="421:33"><expr pos:start="421:31" pos:end="421:33"><name pos:start="421:31" pos:end="421:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="423:13" pos:end="423:36"><expr pos:start="423:13" pos:end="423:35"><call pos:start="423:13" pos:end="423:35"><name pos:start="423:13" pos:end="423:33">gen_op_testl_T0_T1_cc</name><argument_list pos:start="423:34" pos:end="423:35">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:41"><expr pos:start="425:13" pos:end="425:40"><name pos:start="425:13" pos:end="425:20"><name pos:start="425:13" pos:end="425:13">s</name><operator pos:start="425:14" pos:end="425:15">-&gt;</operator><name pos:start="425:16" pos:end="425:20">cc_op</name></name> <operator pos:start="425:22" pos:end="425:22">=</operator> <name pos:start="425:24" pos:end="425:35">CC_OP_LOGICB</name> <operator pos:start="425:37" pos:end="425:37">+</operator> <name pos:start="425:39" pos:end="425:40">ot</name></expr>;</expr_stmt>

            <break pos:start="427:13" pos:end="427:18">break;</break>

        <case pos:start="429:9" pos:end="429:15">case <expr pos:start="429:14" pos:end="429:14"><literal type="number" pos:start="429:14" pos:end="429:14">2</literal></expr>:</case> <comment type="block" pos:start="429:17" pos:end="429:25">/* not */</comment>

            <expr_stmt pos:start="431:13" pos:end="431:29"><expr pos:start="431:13" pos:end="431:28"><call pos:start="431:13" pos:end="431:28"><name pos:start="431:13" pos:end="431:26">gen_op_notl_T0</name><argument_list pos:start="431:27" pos:end="431:28">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="433:13" pos:end="441:13"><if pos:start="433:13" pos:end="437:13">if <condition pos:start="433:16" pos:end="433:25">(<expr pos:start="433:17" pos:end="433:24"><name pos:start="433:17" pos:end="433:19">mod</name> <operator pos:start="433:21" pos:end="433:22">!=</operator> <literal type="number" pos:start="433:24" pos:end="433:24">3</literal></expr>)</condition> <block pos:start="433:27" pos:end="437:13">{<block_content pos:start="435:17" pos:end="435:38">

                <expr_stmt pos:start="435:17" pos:end="435:38"><expr pos:start="435:17" pos:end="435:37"><name pos:start="435:17" pos:end="435:35"><name pos:start="435:17" pos:end="435:31">gen_op_st_T0_A0</name><index pos:start="435:32" pos:end="435:35">[<expr pos:start="435:33" pos:end="435:34"><name pos:start="435:33" pos:end="435:34">ot</name></expr>]</index></name><operator pos:start="435:36" pos:end="435:36">(</operator><operator pos:start="435:37" pos:end="435:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="437:15" pos:end="441:13">else <block pos:start="437:20" pos:end="441:13">{<block_content pos:start="439:17" pos:end="439:44">

                <expr_stmt pos:start="439:17" pos:end="439:44"><expr pos:start="439:17" pos:end="439:43"><name pos:start="439:17" pos:end="439:41"><name pos:start="439:17" pos:end="439:33">gen_op_mov_reg_T0</name><index pos:start="439:34" pos:end="439:37">[<expr pos:start="439:35" pos:end="439:36"><name pos:start="439:35" pos:end="439:36">ot</name></expr>]</index><index pos:start="439:38" pos:end="439:41">[<expr pos:start="439:39" pos:end="439:40"><name pos:start="439:39" pos:end="439:40">rm</name></expr>]</index></name><operator pos:start="439:42" pos:end="439:42">(</operator><operator pos:start="439:43" pos:end="439:43">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="443:13" pos:end="443:18">break;</break>

        <case pos:start="445:9" pos:end="445:15">case <expr pos:start="445:14" pos:end="445:14"><literal type="number" pos:start="445:14" pos:end="445:14">3</literal></expr>:</case> <comment type="block" pos:start="445:17" pos:end="445:25">/* neg */</comment>

            <expr_stmt pos:start="447:13" pos:end="447:32"><expr pos:start="447:13" pos:end="447:31"><call pos:start="447:13" pos:end="447:31"><name pos:start="447:13" pos:end="447:29">gen_op_negl_T0_cc</name><argument_list pos:start="447:30" pos:end="447:31">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="449:13" pos:end="457:13"><if pos:start="449:13" pos:end="453:13">if <condition pos:start="449:16" pos:end="449:25">(<expr pos:start="449:17" pos:end="449:24"><name pos:start="449:17" pos:end="449:19">mod</name> <operator pos:start="449:21" pos:end="449:22">!=</operator> <literal type="number" pos:start="449:24" pos:end="449:24">3</literal></expr>)</condition> <block pos:start="449:27" pos:end="453:13">{<block_content pos:start="451:17" pos:end="451:38">

                <expr_stmt pos:start="451:17" pos:end="451:38"><expr pos:start="451:17" pos:end="451:37"><name pos:start="451:17" pos:end="451:35"><name pos:start="451:17" pos:end="451:31">gen_op_st_T0_A0</name><index pos:start="451:32" pos:end="451:35">[<expr pos:start="451:33" pos:end="451:34"><name pos:start="451:33" pos:end="451:34">ot</name></expr>]</index></name><operator pos:start="451:36" pos:end="451:36">(</operator><operator pos:start="451:37" pos:end="451:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="453:15" pos:end="457:13">else <block pos:start="453:20" pos:end="457:13">{<block_content pos:start="455:17" pos:end="455:44">

                <expr_stmt pos:start="455:17" pos:end="455:44"><expr pos:start="455:17" pos:end="455:43"><name pos:start="455:17" pos:end="455:41"><name pos:start="455:17" pos:end="455:33">gen_op_mov_reg_T0</name><index pos:start="455:34" pos:end="455:37">[<expr pos:start="455:35" pos:end="455:36"><name pos:start="455:35" pos:end="455:36">ot</name></expr>]</index><index pos:start="455:38" pos:end="455:41">[<expr pos:start="455:39" pos:end="455:40"><name pos:start="455:39" pos:end="455:40">rm</name></expr>]</index></name><operator pos:start="455:42" pos:end="455:42">(</operator><operator pos:start="455:43" pos:end="455:43">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="459:13" pos:end="459:39"><expr pos:start="459:13" pos:end="459:38"><name pos:start="459:13" pos:end="459:20"><name pos:start="459:13" pos:end="459:13">s</name><operator pos:start="459:14" pos:end="459:15">-&gt;</operator><name pos:start="459:16" pos:end="459:20">cc_op</name></name> <operator pos:start="459:22" pos:end="459:22">=</operator> <name pos:start="459:24" pos:end="459:33">CC_OP_SUBB</name> <operator pos:start="459:35" pos:end="459:35">+</operator> <name pos:start="459:37" pos:end="459:38">ot</name></expr>;</expr_stmt>

            <break pos:start="461:13" pos:end="461:18">break;</break>

        <case pos:start="463:9" pos:end="463:15">case <expr pos:start="463:14" pos:end="463:14"><literal type="number" pos:start="463:14" pos:end="463:14">4</literal></expr>:</case> <comment type="block" pos:start="463:17" pos:end="463:25">/* mul */</comment>

            <switch pos:start="465:13" pos:end="487:13">switch<condition pos:start="465:19" pos:end="465:22">(<expr pos:start="465:20" pos:end="465:21"><name pos:start="465:20" pos:end="465:21">ot</name></expr>)</condition> <block pos:start="465:24" pos:end="487:13">{<block_content pos:start="467:13" pos:end="485:22">

            <case pos:start="467:13" pos:end="467:25">case <expr pos:start="467:18" pos:end="467:24"><name pos:start="467:18" pos:end="467:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="469:17" pos:end="469:36"><expr pos:start="469:17" pos:end="469:35"><call pos:start="469:17" pos:end="469:35"><name pos:start="469:17" pos:end="469:33">gen_op_mulb_AL_T0</name><argument_list pos:start="469:34" pos:end="469:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="471:17" pos:end="471:22">break;</break>

            <case pos:start="473:13" pos:end="473:25">case <expr pos:start="473:18" pos:end="473:24"><name pos:start="473:18" pos:end="473:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="475:17" pos:end="475:36"><expr pos:start="475:17" pos:end="475:35"><call pos:start="475:17" pos:end="475:35"><name pos:start="475:17" pos:end="475:33">gen_op_mulw_AX_T0</name><argument_list pos:start="475:34" pos:end="475:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="477:17" pos:end="477:22">break;</break>

            <default pos:start="479:13" pos:end="479:20">default:</default>

            <case pos:start="481:13" pos:end="481:25">case <expr pos:start="481:18" pos:end="481:24"><name pos:start="481:18" pos:end="481:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="483:17" pos:end="483:37"><expr pos:start="483:17" pos:end="483:36"><call pos:start="483:17" pos:end="483:36"><name pos:start="483:17" pos:end="483:34">gen_op_mull_EAX_T0</name><argument_list pos:start="483:35" pos:end="483:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="485:17" pos:end="485:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="489:13" pos:end="489:33"><expr pos:start="489:13" pos:end="489:32"><name pos:start="489:13" pos:end="489:20"><name pos:start="489:13" pos:end="489:13">s</name><operator pos:start="489:14" pos:end="489:15">-&gt;</operator><name pos:start="489:16" pos:end="489:20">cc_op</name></name> <operator pos:start="489:22" pos:end="489:22">=</operator> <name pos:start="489:24" pos:end="489:32">CC_OP_MUL</name></expr>;</expr_stmt>

            <break pos:start="491:13" pos:end="491:18">break;</break>

        <case pos:start="493:9" pos:end="493:15">case <expr pos:start="493:14" pos:end="493:14"><literal type="number" pos:start="493:14" pos:end="493:14">5</literal></expr>:</case> <comment type="block" pos:start="493:17" pos:end="493:26">/* imul */</comment>

            <switch pos:start="495:13" pos:end="517:13">switch<condition pos:start="495:19" pos:end="495:22">(<expr pos:start="495:20" pos:end="495:21"><name pos:start="495:20" pos:end="495:21">ot</name></expr>)</condition> <block pos:start="495:24" pos:end="517:13">{<block_content pos:start="497:13" pos:end="515:22">

            <case pos:start="497:13" pos:end="497:25">case <expr pos:start="497:18" pos:end="497:24"><name pos:start="497:18" pos:end="497:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="499:17" pos:end="499:37"><expr pos:start="499:17" pos:end="499:36"><call pos:start="499:17" pos:end="499:36"><name pos:start="499:17" pos:end="499:34">gen_op_imulb_AL_T0</name><argument_list pos:start="499:35" pos:end="499:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="501:17" pos:end="501:22">break;</break>

            <case pos:start="503:13" pos:end="503:25">case <expr pos:start="503:18" pos:end="503:24"><name pos:start="503:18" pos:end="503:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="505:17" pos:end="505:37"><expr pos:start="505:17" pos:end="505:36"><call pos:start="505:17" pos:end="505:36"><name pos:start="505:17" pos:end="505:34">gen_op_imulw_AX_T0</name><argument_list pos:start="505:35" pos:end="505:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="507:17" pos:end="507:22">break;</break>

            <default pos:start="509:13" pos:end="509:20">default:</default>

            <case pos:start="511:13" pos:end="511:25">case <expr pos:start="511:18" pos:end="511:24"><name pos:start="511:18" pos:end="511:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="513:17" pos:end="513:38"><expr pos:start="513:17" pos:end="513:37"><call pos:start="513:17" pos:end="513:37"><name pos:start="513:17" pos:end="513:35">gen_op_imull_EAX_T0</name><argument_list pos:start="513:36" pos:end="513:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="515:17" pos:end="515:22">break;</break>

            </block_content>}</block></switch>

            <expr_stmt pos:start="519:13" pos:end="519:33"><expr pos:start="519:13" pos:end="519:32"><name pos:start="519:13" pos:end="519:20"><name pos:start="519:13" pos:end="519:13">s</name><operator pos:start="519:14" pos:end="519:15">-&gt;</operator><name pos:start="519:16" pos:end="519:20">cc_op</name></name> <operator pos:start="519:22" pos:end="519:22">=</operator> <name pos:start="519:24" pos:end="519:32">CC_OP_MUL</name></expr>;</expr_stmt>

            <break pos:start="521:13" pos:end="521:18">break;</break>

        <case pos:start="523:9" pos:end="523:15">case <expr pos:start="523:14" pos:end="523:14"><literal type="number" pos:start="523:14" pos:end="523:14">6</literal></expr>:</case> <comment type="block" pos:start="523:17" pos:end="523:25">/* div */</comment>

            <switch pos:start="525:13" pos:end="547:13">switch<condition pos:start="525:19" pos:end="525:22">(<expr pos:start="525:20" pos:end="525:21"><name pos:start="525:20" pos:end="525:21">ot</name></expr>)</condition> <block pos:start="525:24" pos:end="547:13">{<block_content pos:start="527:13" pos:end="545:22">

            <case pos:start="527:13" pos:end="527:25">case <expr pos:start="527:18" pos:end="527:24"><name pos:start="527:18" pos:end="527:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="529:17" pos:end="529:36"><expr pos:start="529:17" pos:end="529:35"><call pos:start="529:17" pos:end="529:35"><name pos:start="529:17" pos:end="529:33">gen_op_divb_AL_T0</name><argument_list pos:start="529:34" pos:end="529:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="531:17" pos:end="531:22">break;</break>

            <case pos:start="533:13" pos:end="533:25">case <expr pos:start="533:18" pos:end="533:24"><name pos:start="533:18" pos:end="533:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="535:17" pos:end="535:36"><expr pos:start="535:17" pos:end="535:35"><call pos:start="535:17" pos:end="535:35"><name pos:start="535:17" pos:end="535:33">gen_op_divw_AX_T0</name><argument_list pos:start="535:34" pos:end="535:35">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="537:17" pos:end="537:22">break;</break>

            <default pos:start="539:13" pos:end="539:20">default:</default>

            <case pos:start="541:13" pos:end="541:25">case <expr pos:start="541:18" pos:end="541:24"><name pos:start="541:18" pos:end="541:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="543:17" pos:end="543:37"><expr pos:start="543:17" pos:end="543:36"><call pos:start="543:17" pos:end="543:36"><name pos:start="543:17" pos:end="543:34">gen_op_divl_EAX_T0</name><argument_list pos:start="543:35" pos:end="543:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="545:17" pos:end="545:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="549:13" pos:end="549:18">break;</break>

        <case pos:start="551:9" pos:end="551:15">case <expr pos:start="551:14" pos:end="551:14"><literal type="number" pos:start="551:14" pos:end="551:14">7</literal></expr>:</case> <comment type="block" pos:start="551:17" pos:end="551:26">/* idiv */</comment>

            <switch pos:start="553:13" pos:end="575:13">switch<condition pos:start="553:19" pos:end="553:22">(<expr pos:start="553:20" pos:end="553:21"><name pos:start="553:20" pos:end="553:21">ot</name></expr>)</condition> <block pos:start="553:24" pos:end="575:13">{<block_content pos:start="555:13" pos:end="573:22">

            <case pos:start="555:13" pos:end="555:25">case <expr pos:start="555:18" pos:end="555:24"><name pos:start="555:18" pos:end="555:24">OT_BYTE</name></expr>:</case>

                <expr_stmt pos:start="557:17" pos:end="557:37"><expr pos:start="557:17" pos:end="557:36"><call pos:start="557:17" pos:end="557:36"><name pos:start="557:17" pos:end="557:34">gen_op_idivb_AL_T0</name><argument_list pos:start="557:35" pos:end="557:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="559:17" pos:end="559:22">break;</break>

            <case pos:start="561:13" pos:end="561:25">case <expr pos:start="561:18" pos:end="561:24"><name pos:start="561:18" pos:end="561:24">OT_WORD</name></expr>:</case>

                <expr_stmt pos:start="563:17" pos:end="563:37"><expr pos:start="563:17" pos:end="563:36"><call pos:start="563:17" pos:end="563:36"><name pos:start="563:17" pos:end="563:34">gen_op_idivw_AX_T0</name><argument_list pos:start="563:35" pos:end="563:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="565:17" pos:end="565:22">break;</break>

            <default pos:start="567:13" pos:end="567:20">default:</default>

            <case pos:start="569:13" pos:end="569:25">case <expr pos:start="569:18" pos:end="569:24"><name pos:start="569:18" pos:end="569:24">OT_LONG</name></expr>:</case>

                <expr_stmt pos:start="571:17" pos:end="571:38"><expr pos:start="571:17" pos:end="571:37"><call pos:start="571:17" pos:end="571:37"><name pos:start="571:17" pos:end="571:35">gen_op_idivl_EAX_T0</name><argument_list pos:start="571:36" pos:end="571:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="573:17" pos:end="573:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="577:13" pos:end="577:18">break;</break>

        <default pos:start="579:9" pos:end="579:16">default:</default>

            <goto pos:start="581:13" pos:end="581:28">goto <name pos:start="581:18" pos:end="581:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="585:9" pos:end="585:14">break;</break>



    <case pos:start="589:5" pos:end="589:14">case <expr pos:start="589:10" pos:end="589:13"><literal type="number" pos:start="589:10" pos:end="589:13">0xfe</literal></expr>:</case> <comment type="block" pos:start="589:16" pos:end="589:25">/* GRP4 */</comment>

    <case pos:start="591:5" pos:end="591:14">case <expr pos:start="591:10" pos:end="591:13"><literal type="number" pos:start="591:10" pos:end="591:13">0xff</literal></expr>:</case> <comment type="block" pos:start="591:16" pos:end="591:25">/* GRP5 */</comment>

        <if_stmt pos:start="593:9" pos:end="599:43"><if pos:start="593:9" pos:end="595:25">if <condition pos:start="593:12" pos:end="593:25">(<expr pos:start="593:13" pos:end="593:24"><operator pos:start="593:13" pos:end="593:13">(</operator><name pos:start="593:14" pos:end="593:14">b</name> <operator pos:start="593:16" pos:end="593:16">&amp;</operator> <literal type="number" pos:start="593:18" pos:end="593:18">1</literal><operator pos:start="593:19" pos:end="593:19">)</operator> <operator pos:start="593:21" pos:end="593:22">==</operator> <literal type="number" pos:start="593:24" pos:end="593:24">0</literal></expr>)</condition><block type="pseudo" pos:start="595:13" pos:end="595:25"><block_content pos:start="595:13" pos:end="595:25">

            <expr_stmt pos:start="595:13" pos:end="595:25"><expr pos:start="595:13" pos:end="595:24"><name pos:start="595:13" pos:end="595:14">ot</name> <operator pos:start="595:16" pos:end="595:16">=</operator> <name pos:start="595:18" pos:end="595:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="597:9" pos:end="599:43">else<block type="pseudo" pos:start="599:13" pos:end="599:43"><block_content pos:start="599:13" pos:end="599:43">

            <expr_stmt pos:start="599:13" pos:end="599:43"><expr pos:start="599:13" pos:end="599:42"><name pos:start="599:13" pos:end="599:14">ot</name> <operator pos:start="599:16" pos:end="599:16">=</operator> <ternary pos:start="599:18" pos:end="599:42"><condition pos:start="599:18" pos:end="599:24"><expr pos:start="599:18" pos:end="599:22"><name pos:start="599:18" pos:end="599:22">dflag</name></expr> ?</condition><then pos:start="599:26" pos:end="599:32"> <expr pos:start="599:26" pos:end="599:32"><name pos:start="599:26" pos:end="599:32">OT_LONG</name></expr> </then><else pos:start="599:34" pos:end="599:42">: <expr pos:start="599:36" pos:end="599:42"><name pos:start="599:36" pos:end="599:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="603:9" pos:end="603:30"><expr pos:start="603:9" pos:end="603:29"><name pos:start="603:9" pos:end="603:13">modrm</name> <operator pos:start="603:15" pos:end="603:15">=</operator> <call pos:start="603:17" pos:end="603:29"><name pos:start="603:17" pos:end="603:20">ldub</name><argument_list pos:start="603:21" pos:end="603:29">(<argument pos:start="603:22" pos:end="603:28"><expr pos:start="603:22" pos:end="603:28"><name pos:start="603:22" pos:end="603:26"><name pos:start="603:22" pos:end="603:22">s</name><operator pos:start="603:23" pos:end="603:24">-&gt;</operator><name pos:start="603:25" pos:end="603:26">pc</name></name><operator pos:start="603:27" pos:end="603:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="605:9" pos:end="605:31"><expr pos:start="605:9" pos:end="605:30"><name pos:start="605:9" pos:end="605:11">mod</name> <operator pos:start="605:13" pos:end="605:13">=</operator> <operator pos:start="605:15" pos:end="605:15">(</operator><name pos:start="605:16" pos:end="605:20">modrm</name> <operator pos:start="605:22" pos:end="605:23">&gt;&gt;</operator> <literal type="number" pos:start="605:25" pos:end="605:25">6</literal><operator pos:start="605:26" pos:end="605:26">)</operator> <operator pos:start="605:28" pos:end="605:28">&amp;</operator> <literal type="number" pos:start="605:30" pos:end="605:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="607:9" pos:end="607:23"><expr pos:start="607:9" pos:end="607:22"><name pos:start="607:9" pos:end="607:10">rm</name> <operator pos:start="607:12" pos:end="607:12">=</operator> <name pos:start="607:14" pos:end="607:18">modrm</name> <operator pos:start="607:20" pos:end="607:20">&amp;</operator> <literal type="number" pos:start="607:22" pos:end="607:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:30"><expr pos:start="609:9" pos:end="609:29"><name pos:start="609:9" pos:end="609:10">op</name> <operator pos:start="609:12" pos:end="609:12">=</operator> <operator pos:start="609:14" pos:end="609:14">(</operator><name pos:start="609:15" pos:end="609:19">modrm</name> <operator pos:start="609:21" pos:end="609:22">&gt;&gt;</operator> <literal type="number" pos:start="609:24" pos:end="609:24">3</literal><operator pos:start="609:25" pos:end="609:25">)</operator> <operator pos:start="609:27" pos:end="609:27">&amp;</operator> <literal type="number" pos:start="609:29" pos:end="609:29">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="611:9" pos:end="615:9"><if pos:start="611:9" pos:end="615:9">if <condition pos:start="611:12" pos:end="611:33">(<expr pos:start="611:13" pos:end="611:32"><name pos:start="611:13" pos:end="611:14">op</name> <operator pos:start="611:16" pos:end="611:17">&gt;=</operator> <literal type="number" pos:start="611:19" pos:end="611:19">2</literal> <operator pos:start="611:21" pos:end="611:22">&amp;&amp;</operator> <name pos:start="611:24" pos:end="611:24">b</name> <operator pos:start="611:26" pos:end="611:27">==</operator> <literal type="number" pos:start="611:29" pos:end="611:32">0xfe</literal></expr>)</condition> <block pos:start="611:35" pos:end="615:9">{<block_content pos:start="613:13" pos:end="613:28">

            <goto pos:start="613:13" pos:end="613:28">goto <name pos:start="613:18" pos:end="613:27">illegal_op</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="617:9" pos:end="629:9"><if pos:start="617:9" pos:end="625:9">if <condition pos:start="617:12" pos:end="617:21">(<expr pos:start="617:13" pos:end="617:20"><name pos:start="617:13" pos:end="617:15">mod</name> <operator pos:start="617:17" pos:end="617:18">!=</operator> <literal type="number" pos:start="617:20" pos:end="617:20">3</literal></expr>)</condition> <block pos:start="617:23" pos:end="625:9">{<block_content pos:start="619:13" pos:end="623:38">

            <expr_stmt pos:start="619:13" pos:end="619:61"><expr pos:start="619:13" pos:end="619:60"><call pos:start="619:13" pos:end="619:60"><name pos:start="619:13" pos:end="619:25">gen_lea_modrm</name><argument_list pos:start="619:26" pos:end="619:60">(<argument pos:start="619:27" pos:end="619:27"><expr pos:start="619:27" pos:end="619:27"><name pos:start="619:27" pos:end="619:27">s</name></expr></argument>, <argument pos:start="619:30" pos:end="619:34"><expr pos:start="619:30" pos:end="619:34"><name pos:start="619:30" pos:end="619:34">modrm</name></expr></argument>, <argument pos:start="619:37" pos:end="619:45"><expr pos:start="619:37" pos:end="619:45"><operator pos:start="619:37" pos:end="619:37">&amp;</operator><name pos:start="619:38" pos:end="619:45">reg_addr</name></expr></argument>, <argument pos:start="619:48" pos:end="619:59"><expr pos:start="619:48" pos:end="619:59"><operator pos:start="619:48" pos:end="619:48">&amp;</operator><name pos:start="619:49" pos:end="619:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="621:13" pos:end="623:38"><if pos:start="621:13" pos:end="623:38">if <condition pos:start="621:16" pos:end="621:35">(<expr pos:start="621:17" pos:end="621:34"><name pos:start="621:17" pos:end="621:18">op</name> <operator pos:start="621:20" pos:end="621:21">!=</operator> <literal type="number" pos:start="621:23" pos:end="621:23">3</literal> <operator pos:start="621:25" pos:end="621:26">&amp;&amp;</operator> <name pos:start="621:28" pos:end="621:29">op</name> <operator pos:start="621:31" pos:end="621:32">!=</operator> <literal type="number" pos:start="621:34" pos:end="621:34">5</literal></expr>)</condition><block type="pseudo" pos:start="623:17" pos:end="623:38"><block_content pos:start="623:17" pos:end="623:38">

                <expr_stmt pos:start="623:17" pos:end="623:38"><expr pos:start="623:17" pos:end="623:37"><name pos:start="623:17" pos:end="623:35"><name pos:start="623:17" pos:end="623:31">gen_op_ld_T0_A0</name><index pos:start="623:32" pos:end="623:35">[<expr pos:start="623:33" pos:end="623:34"><name pos:start="623:33" pos:end="623:34">ot</name></expr>]</index></name><operator pos:start="623:36" pos:end="623:36">(</operator><operator pos:start="623:37" pos:end="623:37">)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="625:11" pos:end="629:9">else <block pos:start="625:16" pos:end="629:9">{<block_content pos:start="627:13" pos:end="627:43">

            <expr_stmt pos:start="627:13" pos:end="627:43"><expr pos:start="627:13" pos:end="627:42"><name pos:start="627:13" pos:end="627:40"><name pos:start="627:13" pos:end="627:29">gen_op_mov_TN_reg</name><index pos:start="627:30" pos:end="627:33">[<expr pos:start="627:31" pos:end="627:32"><name pos:start="627:31" pos:end="627:32">ot</name></expr>]</index><index pos:start="627:34" pos:end="627:36">[<expr pos:start="627:35" pos:end="627:35"><literal type="number" pos:start="627:35" pos:end="627:35">0</literal></expr>]</index><index pos:start="627:37" pos:end="627:40">[<expr pos:start="627:38" pos:end="627:39"><name pos:start="627:38" pos:end="627:39">rm</name></expr>]</index></name><operator pos:start="627:41" pos:end="627:41">(</operator><operator pos:start="627:42" pos:end="627:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <switch pos:start="633:9" pos:end="755:9">switch<condition pos:start="633:15" pos:end="633:18">(<expr pos:start="633:16" pos:end="633:17"><name pos:start="633:16" pos:end="633:17">op</name></expr>)</condition> <block pos:start="633:20" pos:end="755:9">{<block_content pos:start="635:9" pos:end="753:28">

        <case pos:start="635:9" pos:end="635:15">case <expr pos:start="635:14" pos:end="635:14"><literal type="number" pos:start="635:14" pos:end="635:14">0</literal></expr>:</case> <comment type="block" pos:start="635:17" pos:end="635:28">/* inc Ev */</comment>

            <expr_stmt pos:start="637:13" pos:end="637:39"><expr pos:start="637:13" pos:end="637:38"><call pos:start="637:13" pos:end="637:38"><name pos:start="637:13" pos:end="637:19">gen_inc</name><argument_list pos:start="637:20" pos:end="637:38">(<argument pos:start="637:21" pos:end="637:21"><expr pos:start="637:21" pos:end="637:21"><name pos:start="637:21" pos:end="637:21">s</name></expr></argument>, <argument pos:start="637:24" pos:end="637:25"><expr pos:start="637:24" pos:end="637:25"><name pos:start="637:24" pos:end="637:25">ot</name></expr></argument>, <argument pos:start="637:28" pos:end="637:34"><expr pos:start="637:28" pos:end="637:34"><name pos:start="637:28" pos:end="637:34">OR_TMP0</name></expr></argument>, <argument pos:start="637:37" pos:end="637:37"><expr pos:start="637:37" pos:end="637:37"><literal type="number" pos:start="637:37" pos:end="637:37">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="639:13" pos:end="645:44"><if pos:start="639:13" pos:end="641:38">if <condition pos:start="639:16" pos:end="639:25">(<expr pos:start="639:17" pos:end="639:24"><name pos:start="639:17" pos:end="639:19">mod</name> <operator pos:start="639:21" pos:end="639:22">!=</operator> <literal type="number" pos:start="639:24" pos:end="639:24">3</literal></expr>)</condition><block type="pseudo" pos:start="641:17" pos:end="641:38"><block_content pos:start="641:17" pos:end="641:38">

                <expr_stmt pos:start="641:17" pos:end="641:38"><expr pos:start="641:17" pos:end="641:37"><name pos:start="641:17" pos:end="641:35"><name pos:start="641:17" pos:end="641:31">gen_op_st_T0_A0</name><index pos:start="641:32" pos:end="641:35">[<expr pos:start="641:33" pos:end="641:34"><name pos:start="641:33" pos:end="641:34">ot</name></expr>]</index></name><operator pos:start="641:36" pos:end="641:36">(</operator><operator pos:start="641:37" pos:end="641:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="643:13" pos:end="645:44">else<block type="pseudo" pos:start="645:17" pos:end="645:44"><block_content pos:start="645:17" pos:end="645:44">

                <expr_stmt pos:start="645:17" pos:end="645:44"><expr pos:start="645:17" pos:end="645:43"><name pos:start="645:17" pos:end="645:41"><name pos:start="645:17" pos:end="645:33">gen_op_mov_reg_T0</name><index pos:start="645:34" pos:end="645:37">[<expr pos:start="645:35" pos:end="645:36"><name pos:start="645:35" pos:end="645:36">ot</name></expr>]</index><index pos:start="645:38" pos:end="645:41">[<expr pos:start="645:39" pos:end="645:40"><name pos:start="645:39" pos:end="645:40">rm</name></expr>]</index></name><operator pos:start="645:42" pos:end="645:42">(</operator><operator pos:start="645:43" pos:end="645:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="647:13" pos:end="647:18">break;</break>

        <case pos:start="649:9" pos:end="649:15">case <expr pos:start="649:14" pos:end="649:14"><literal type="number" pos:start="649:14" pos:end="649:14">1</literal></expr>:</case> <comment type="block" pos:start="649:17" pos:end="649:28">/* dec Ev */</comment>

            <expr_stmt pos:start="651:13" pos:end="651:40"><expr pos:start="651:13" pos:end="651:39"><call pos:start="651:13" pos:end="651:39"><name pos:start="651:13" pos:end="651:19">gen_inc</name><argument_list pos:start="651:20" pos:end="651:39">(<argument pos:start="651:21" pos:end="651:21"><expr pos:start="651:21" pos:end="651:21"><name pos:start="651:21" pos:end="651:21">s</name></expr></argument>, <argument pos:start="651:24" pos:end="651:25"><expr pos:start="651:24" pos:end="651:25"><name pos:start="651:24" pos:end="651:25">ot</name></expr></argument>, <argument pos:start="651:28" pos:end="651:34"><expr pos:start="651:28" pos:end="651:34"><name pos:start="651:28" pos:end="651:34">OR_TMP0</name></expr></argument>, <argument pos:start="651:37" pos:end="651:38"><expr pos:start="651:37" pos:end="651:38"><operator pos:start="651:37" pos:end="651:37">-</operator><literal type="number" pos:start="651:38" pos:end="651:38">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="653:13" pos:end="659:44"><if pos:start="653:13" pos:end="655:38">if <condition pos:start="653:16" pos:end="653:25">(<expr pos:start="653:17" pos:end="653:24"><name pos:start="653:17" pos:end="653:19">mod</name> <operator pos:start="653:21" pos:end="653:22">!=</operator> <literal type="number" pos:start="653:24" pos:end="653:24">3</literal></expr>)</condition><block type="pseudo" pos:start="655:17" pos:end="655:38"><block_content pos:start="655:17" pos:end="655:38">

                <expr_stmt pos:start="655:17" pos:end="655:38"><expr pos:start="655:17" pos:end="655:37"><name pos:start="655:17" pos:end="655:35"><name pos:start="655:17" pos:end="655:31">gen_op_st_T0_A0</name><index pos:start="655:32" pos:end="655:35">[<expr pos:start="655:33" pos:end="655:34"><name pos:start="655:33" pos:end="655:34">ot</name></expr>]</index></name><operator pos:start="655:36" pos:end="655:36">(</operator><operator pos:start="655:37" pos:end="655:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="657:13" pos:end="659:44">else<block type="pseudo" pos:start="659:17" pos:end="659:44"><block_content pos:start="659:17" pos:end="659:44">

                <expr_stmt pos:start="659:17" pos:end="659:44"><expr pos:start="659:17" pos:end="659:43"><name pos:start="659:17" pos:end="659:41"><name pos:start="659:17" pos:end="659:33">gen_op_mov_reg_T0</name><index pos:start="659:34" pos:end="659:37">[<expr pos:start="659:35" pos:end="659:36"><name pos:start="659:35" pos:end="659:36">ot</name></expr>]</index><index pos:start="659:38" pos:end="659:41">[<expr pos:start="659:39" pos:end="659:40"><name pos:start="659:39" pos:end="659:40">rm</name></expr>]</index></name><operator pos:start="659:42" pos:end="659:42">(</operator><operator pos:start="659:43" pos:end="659:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <break pos:start="661:13" pos:end="661:18">break;</break>

        <case pos:start="663:9" pos:end="663:15">case <expr pos:start="663:14" pos:end="663:14"><literal type="number" pos:start="663:14" pos:end="663:14">2</literal></expr>:</case> <comment type="block" pos:start="663:17" pos:end="663:29">/* call Ev */</comment>

            <comment type="block" pos:start="665:13" pos:end="665:63">/* XXX: optimize if memory (no and is necessary) */</comment>

            <if_stmt pos:start="667:13" pos:end="669:38"><if pos:start="667:13" pos:end="669:38">if <condition pos:start="667:16" pos:end="667:30">(<expr pos:start="667:17" pos:end="667:29"><name pos:start="667:17" pos:end="667:24"><name pos:start="667:17" pos:end="667:17">s</name><operator pos:start="667:18" pos:end="667:19">-&gt;</operator><name pos:start="667:20" pos:end="667:24">dflag</name></name> <operator pos:start="667:26" pos:end="667:27">==</operator> <literal type="number" pos:start="667:29" pos:end="667:29">0</literal></expr>)</condition><block type="pseudo" pos:start="669:17" pos:end="669:38"><block_content pos:start="669:17" pos:end="669:38">

                <expr_stmt pos:start="669:17" pos:end="669:38"><expr pos:start="669:17" pos:end="669:37"><call pos:start="669:17" pos:end="669:37"><name pos:start="669:17" pos:end="669:35">gen_op_andl_T0_ffff</name><argument_list pos:start="669:36" pos:end="669:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="671:13" pos:end="671:28"><expr pos:start="671:13" pos:end="671:27"><call pos:start="671:13" pos:end="671:27"><name pos:start="671:13" pos:end="671:25">gen_op_jmp_T0</name><argument_list pos:start="671:26" pos:end="671:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="673:13" pos:end="673:42"><expr pos:start="673:13" pos:end="673:41"><name pos:start="673:13" pos:end="673:20">next_eip</name> <operator pos:start="673:22" pos:end="673:22">=</operator> <name pos:start="673:24" pos:end="673:28"><name pos:start="673:24" pos:end="673:24">s</name><operator pos:start="673:25" pos:end="673:26">-&gt;</operator><name pos:start="673:27" pos:end="673:28">pc</name></name> <operator pos:start="673:30" pos:end="673:30">-</operator> <name pos:start="673:32" pos:end="673:41"><name pos:start="673:32" pos:end="673:32">s</name><operator pos:start="673:33" pos:end="673:34">-&gt;</operator><name pos:start="673:35" pos:end="673:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="675:13" pos:end="675:40"><expr pos:start="675:13" pos:end="675:39"><call pos:start="675:13" pos:end="675:39"><name pos:start="675:13" pos:end="675:29">gen_op_movl_T0_im</name><argument_list pos:start="675:30" pos:end="675:39">(<argument pos:start="675:31" pos:end="675:38"><expr pos:start="675:31" pos:end="675:38"><name pos:start="675:31" pos:end="675:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="677:13" pos:end="677:27"><expr pos:start="677:13" pos:end="677:26"><call pos:start="677:13" pos:end="677:26"><name pos:start="677:13" pos:end="677:23">gen_push_T0</name><argument_list pos:start="677:24" pos:end="677:26">(<argument pos:start="677:25" pos:end="677:25"><expr pos:start="677:25" pos:end="677:25"><name pos:start="677:25" pos:end="677:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:26"><expr pos:start="679:13" pos:end="679:25"><name pos:start="679:13" pos:end="679:21"><name pos:start="679:13" pos:end="679:13">s</name><operator pos:start="679:14" pos:end="679:15">-&gt;</operator><name pos:start="679:16" pos:end="679:21">is_jmp</name></name> <operator pos:start="679:23" pos:end="679:23">=</operator> <literal type="number" pos:start="679:25" pos:end="679:25">1</literal></expr>;</expr_stmt>

            <break pos:start="681:13" pos:end="681:18">break;</break>

        <case pos:start="683:9" pos:end="683:15">case <expr pos:start="683:14" pos:end="683:14"><literal type="number" pos:start="683:14" pos:end="683:14">3</literal></expr>:</case> <comment type="block" pos:start="683:17" pos:end="683:30">/* lcall Ev */</comment>

            <comment type="block" pos:start="685:13" pos:end="685:46">/* push return segment + offset */</comment>

            <expr_stmt pos:start="687:13" pos:end="687:37"><expr pos:start="687:13" pos:end="687:36"><call pos:start="687:13" pos:end="687:36"><name pos:start="687:13" pos:end="687:30">gen_op_movl_T0_seg</name><argument_list pos:start="687:31" pos:end="687:36">(<argument pos:start="687:32" pos:end="687:35"><expr pos:start="687:32" pos:end="687:35"><name pos:start="687:32" pos:end="687:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="689:13" pos:end="689:27"><expr pos:start="689:13" pos:end="689:26"><call pos:start="689:13" pos:end="689:26"><name pos:start="689:13" pos:end="689:23">gen_push_T0</name><argument_list pos:start="689:24" pos:end="689:26">(<argument pos:start="689:25" pos:end="689:25"><expr pos:start="689:25" pos:end="689:25"><name pos:start="689:25" pos:end="689:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="691:13" pos:end="691:42"><expr pos:start="691:13" pos:end="691:41"><name pos:start="691:13" pos:end="691:20">next_eip</name> <operator pos:start="691:22" pos:end="691:22">=</operator> <name pos:start="691:24" pos:end="691:28"><name pos:start="691:24" pos:end="691:24">s</name><operator pos:start="691:25" pos:end="691:26">-&gt;</operator><name pos:start="691:27" pos:end="691:28">pc</name></name> <operator pos:start="691:30" pos:end="691:30">-</operator> <name pos:start="691:32" pos:end="691:41"><name pos:start="691:32" pos:end="691:32">s</name><operator pos:start="691:33" pos:end="691:34">-&gt;</operator><name pos:start="691:35" pos:end="691:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="693:13" pos:end="693:40"><expr pos:start="693:13" pos:end="693:39"><call pos:start="693:13" pos:end="693:39"><name pos:start="693:13" pos:end="693:29">gen_op_movl_T0_im</name><argument_list pos:start="693:30" pos:end="693:39">(<argument pos:start="693:31" pos:end="693:38"><expr pos:start="693:31" pos:end="693:38"><name pos:start="693:31" pos:end="693:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="695:13" pos:end="695:27"><expr pos:start="695:13" pos:end="695:26"><call pos:start="695:13" pos:end="695:26"><name pos:start="695:13" pos:end="695:23">gen_push_T0</name><argument_list pos:start="695:24" pos:end="695:26">(<argument pos:start="695:25" pos:end="695:25"><expr pos:start="695:25" pos:end="695:25"><name pos:start="695:25" pos:end="695:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <expr_stmt pos:start="699:13" pos:end="699:34"><expr pos:start="699:13" pos:end="699:33"><name pos:start="699:13" pos:end="699:31"><name pos:start="699:13" pos:end="699:27">gen_op_ld_T1_A0</name><index pos:start="699:28" pos:end="699:31">[<expr pos:start="699:29" pos:end="699:30"><name pos:start="699:29" pos:end="699:30">ot</name></expr>]</index></name><operator pos:start="699:32" pos:end="699:32">(</operator><operator pos:start="699:33" pos:end="699:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:55"><expr pos:start="701:13" pos:end="701:54"><call pos:start="701:13" pos:end="701:54"><name pos:start="701:13" pos:end="701:29">gen_op_addl_A0_im</name><argument_list pos:start="701:30" pos:end="701:54">(<argument pos:start="701:31" pos:end="701:53"><expr pos:start="701:31" pos:end="701:53"><literal type="number" pos:start="701:31" pos:end="701:31">1</literal> <operator pos:start="701:33" pos:end="701:34">&lt;&lt;</operator> <operator pos:start="701:36" pos:end="701:36">(</operator><name pos:start="701:37" pos:end="701:38">ot</name> <operator pos:start="701:40" pos:end="701:40">-</operator> <name pos:start="701:42" pos:end="701:48">OT_WORD</name> <operator pos:start="701:50" pos:end="701:50">+</operator> <literal type="number" pos:start="701:52" pos:end="701:52">1</literal><operator pos:start="701:53" pos:end="701:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:32"><expr pos:start="703:13" pos:end="703:31"><call pos:start="703:13" pos:end="703:31"><name pos:start="703:13" pos:end="703:29">gen_op_lduw_T0_A0</name><argument_list pos:start="703:30" pos:end="703:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="705:13" pos:end="705:37"><expr pos:start="705:13" pos:end="705:36"><call pos:start="705:13" pos:end="705:36"><name pos:start="705:13" pos:end="705:27">gen_movl_seg_T0</name><argument_list pos:start="705:28" pos:end="705:36">(<argument pos:start="705:29" pos:end="705:29"><expr pos:start="705:29" pos:end="705:29"><name pos:start="705:29" pos:end="705:29">s</name></expr></argument>, <argument pos:start="705:32" pos:end="705:35"><expr pos:start="705:32" pos:end="705:35"><name pos:start="705:32" pos:end="705:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:32"><expr pos:start="707:13" pos:end="707:31"><call pos:start="707:13" pos:end="707:31"><name pos:start="707:13" pos:end="707:29">gen_op_movl_T0_T1</name><argument_list pos:start="707:30" pos:end="707:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:28"><expr pos:start="709:13" pos:end="709:27"><call pos:start="709:13" pos:end="709:27"><name pos:start="709:13" pos:end="709:25">gen_op_jmp_T0</name><argument_list pos:start="709:26" pos:end="709:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="711:13" pos:end="711:26"><expr pos:start="711:13" pos:end="711:25"><name pos:start="711:13" pos:end="711:21"><name pos:start="711:13" pos:end="711:13">s</name><operator pos:start="711:14" pos:end="711:15">-&gt;</operator><name pos:start="711:16" pos:end="711:21">is_jmp</name></name> <operator pos:start="711:23" pos:end="711:23">=</operator> <literal type="number" pos:start="711:25" pos:end="711:25">1</literal></expr>;</expr_stmt>

            <break pos:start="713:13" pos:end="713:18">break;</break>

        <case pos:start="715:9" pos:end="715:15">case <expr pos:start="715:14" pos:end="715:14"><literal type="number" pos:start="715:14" pos:end="715:14">4</literal></expr>:</case> <comment type="block" pos:start="715:17" pos:end="715:28">/* jmp Ev */</comment>

            <if_stmt pos:start="717:13" pos:end="719:38"><if pos:start="717:13" pos:end="719:38">if <condition pos:start="717:16" pos:end="717:30">(<expr pos:start="717:17" pos:end="717:29"><name pos:start="717:17" pos:end="717:24"><name pos:start="717:17" pos:end="717:17">s</name><operator pos:start="717:18" pos:end="717:19">-&gt;</operator><name pos:start="717:20" pos:end="717:24">dflag</name></name> <operator pos:start="717:26" pos:end="717:27">==</operator> <literal type="number" pos:start="717:29" pos:end="717:29">0</literal></expr>)</condition><block type="pseudo" pos:start="719:17" pos:end="719:38"><block_content pos:start="719:17" pos:end="719:38">

                <expr_stmt pos:start="719:17" pos:end="719:38"><expr pos:start="719:17" pos:end="719:37"><call pos:start="719:17" pos:end="719:37"><name pos:start="719:17" pos:end="719:35">gen_op_andl_T0_ffff</name><argument_list pos:start="719:36" pos:end="719:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="721:13" pos:end="721:28"><expr pos:start="721:13" pos:end="721:27"><call pos:start="721:13" pos:end="721:27"><name pos:start="721:13" pos:end="721:25">gen_op_jmp_T0</name><argument_list pos:start="721:26" pos:end="721:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="723:13" pos:end="723:26"><expr pos:start="723:13" pos:end="723:25"><name pos:start="723:13" pos:end="723:21"><name pos:start="723:13" pos:end="723:13">s</name><operator pos:start="723:14" pos:end="723:15">-&gt;</operator><name pos:start="723:16" pos:end="723:21">is_jmp</name></name> <operator pos:start="723:23" pos:end="723:23">=</operator> <literal type="number" pos:start="723:25" pos:end="723:25">1</literal></expr>;</expr_stmt>

            <break pos:start="725:13" pos:end="725:18">break;</break>

        <case pos:start="727:9" pos:end="727:15">case <expr pos:start="727:14" pos:end="727:14"><literal type="number" pos:start="727:14" pos:end="727:14">5</literal></expr>:</case> <comment type="block" pos:start="727:17" pos:end="727:29">/* ljmp Ev */</comment>

            <expr_stmt pos:start="729:13" pos:end="729:34"><expr pos:start="729:13" pos:end="729:33"><name pos:start="729:13" pos:end="729:31"><name pos:start="729:13" pos:end="729:27">gen_op_ld_T1_A0</name><index pos:start="729:28" pos:end="729:31">[<expr pos:start="729:29" pos:end="729:30"><name pos:start="729:29" pos:end="729:30">ot</name></expr>]</index></name><operator pos:start="729:32" pos:end="729:32">(</operator><operator pos:start="729:33" pos:end="729:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:55"><expr pos:start="731:13" pos:end="731:54"><call pos:start="731:13" pos:end="731:54"><name pos:start="731:13" pos:end="731:29">gen_op_addl_A0_im</name><argument_list pos:start="731:30" pos:end="731:54">(<argument pos:start="731:31" pos:end="731:53"><expr pos:start="731:31" pos:end="731:53"><literal type="number" pos:start="731:31" pos:end="731:31">1</literal> <operator pos:start="731:33" pos:end="731:34">&lt;&lt;</operator> <operator pos:start="731:36" pos:end="731:36">(</operator><name pos:start="731:37" pos:end="731:38">ot</name> <operator pos:start="731:40" pos:end="731:40">-</operator> <name pos:start="731:42" pos:end="731:48">OT_WORD</name> <operator pos:start="731:50" pos:end="731:50">+</operator> <literal type="number" pos:start="731:52" pos:end="731:52">1</literal><operator pos:start="731:53" pos:end="731:53">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="733:13" pos:end="733:32"><expr pos:start="733:13" pos:end="733:31"><call pos:start="733:13" pos:end="733:31"><name pos:start="733:13" pos:end="733:29">gen_op_lduw_T0_A0</name><argument_list pos:start="733:30" pos:end="733:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="735:13" pos:end="735:37"><expr pos:start="735:13" pos:end="735:36"><call pos:start="735:13" pos:end="735:36"><name pos:start="735:13" pos:end="735:27">gen_movl_seg_T0</name><argument_list pos:start="735:28" pos:end="735:36">(<argument pos:start="735:29" pos:end="735:29"><expr pos:start="735:29" pos:end="735:29"><name pos:start="735:29" pos:end="735:29">s</name></expr></argument>, <argument pos:start="735:32" pos:end="735:35"><expr pos:start="735:32" pos:end="735:35"><name pos:start="735:32" pos:end="735:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="737:13" pos:end="737:32"><expr pos:start="737:13" pos:end="737:31"><call pos:start="737:13" pos:end="737:31"><name pos:start="737:13" pos:end="737:29">gen_op_movl_T0_T1</name><argument_list pos:start="737:30" pos:end="737:31">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="739:13" pos:end="739:28"><expr pos:start="739:13" pos:end="739:27"><call pos:start="739:13" pos:end="739:27"><name pos:start="739:13" pos:end="739:25">gen_op_jmp_T0</name><argument_list pos:start="739:26" pos:end="739:27">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="741:13" pos:end="741:26"><expr pos:start="741:13" pos:end="741:25"><name pos:start="741:13" pos:end="741:21"><name pos:start="741:13" pos:end="741:13">s</name><operator pos:start="741:14" pos:end="741:15">-&gt;</operator><name pos:start="741:16" pos:end="741:21">is_jmp</name></name> <operator pos:start="741:23" pos:end="741:23">=</operator> <literal type="number" pos:start="741:25" pos:end="741:25">1</literal></expr>;</expr_stmt>

            <break pos:start="743:13" pos:end="743:18">break;</break>

        <case pos:start="745:9" pos:end="745:15">case <expr pos:start="745:14" pos:end="745:14"><literal type="number" pos:start="745:14" pos:end="745:14">6</literal></expr>:</case> <comment type="block" pos:start="745:17" pos:end="745:29">/* push Ev */</comment>

            <expr_stmt pos:start="747:13" pos:end="747:27"><expr pos:start="747:13" pos:end="747:26"><call pos:start="747:13" pos:end="747:26"><name pos:start="747:13" pos:end="747:23">gen_push_T0</name><argument_list pos:start="747:24" pos:end="747:26">(<argument pos:start="747:25" pos:end="747:25"><expr pos:start="747:25" pos:end="747:25"><name pos:start="747:25" pos:end="747:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="749:13" pos:end="749:18">break;</break>

        <default pos:start="751:9" pos:end="751:16">default:</default>

            <goto pos:start="753:13" pos:end="753:28">goto <name pos:start="753:18" pos:end="753:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

        <break pos:start="757:9" pos:end="757:14">break;</break>



    <case pos:start="761:5" pos:end="761:14">case <expr pos:start="761:10" pos:end="761:13"><literal type="number" pos:start="761:10" pos:end="761:13">0x84</literal></expr>:</case> <comment type="block" pos:start="761:16" pos:end="761:32">/* test Ev, Gv */</comment>

    <case pos:start="763:5" pos:end="763:14">case <expr pos:start="763:10" pos:end="763:13"><literal type="number" pos:start="763:10" pos:end="763:13">0x85</literal></expr>:</case> 

        <if_stmt pos:start="765:9" pos:end="771:43"><if pos:start="765:9" pos:end="767:25">if <condition pos:start="765:12" pos:end="765:25">(<expr pos:start="765:13" pos:end="765:24"><operator pos:start="765:13" pos:end="765:13">(</operator><name pos:start="765:14" pos:end="765:14">b</name> <operator pos:start="765:16" pos:end="765:16">&amp;</operator> <literal type="number" pos:start="765:18" pos:end="765:18">1</literal><operator pos:start="765:19" pos:end="765:19">)</operator> <operator pos:start="765:21" pos:end="765:22">==</operator> <literal type="number" pos:start="765:24" pos:end="765:24">0</literal></expr>)</condition><block type="pseudo" pos:start="767:13" pos:end="767:25"><block_content pos:start="767:13" pos:end="767:25">

            <expr_stmt pos:start="767:13" pos:end="767:25"><expr pos:start="767:13" pos:end="767:24"><name pos:start="767:13" pos:end="767:14">ot</name> <operator pos:start="767:16" pos:end="767:16">=</operator> <name pos:start="767:18" pos:end="767:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="769:9" pos:end="771:43">else<block type="pseudo" pos:start="771:13" pos:end="771:43"><block_content pos:start="771:13" pos:end="771:43">

            <expr_stmt pos:start="771:13" pos:end="771:43"><expr pos:start="771:13" pos:end="771:42"><name pos:start="771:13" pos:end="771:14">ot</name> <operator pos:start="771:16" pos:end="771:16">=</operator> <ternary pos:start="771:18" pos:end="771:42"><condition pos:start="771:18" pos:end="771:24"><expr pos:start="771:18" pos:end="771:22"><name pos:start="771:18" pos:end="771:22">dflag</name></expr> ?</condition><then pos:start="771:26" pos:end="771:32"> <expr pos:start="771:26" pos:end="771:32"><name pos:start="771:26" pos:end="771:32">OT_LONG</name></expr> </then><else pos:start="771:34" pos:end="771:42">: <expr pos:start="771:36" pos:end="771:42"><name pos:start="771:36" pos:end="771:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="775:9" pos:end="775:30"><expr pos:start="775:9" pos:end="775:29"><name pos:start="775:9" pos:end="775:13">modrm</name> <operator pos:start="775:15" pos:end="775:15">=</operator> <call pos:start="775:17" pos:end="775:29"><name pos:start="775:17" pos:end="775:20">ldub</name><argument_list pos:start="775:21" pos:end="775:29">(<argument pos:start="775:22" pos:end="775:28"><expr pos:start="775:22" pos:end="775:28"><name pos:start="775:22" pos:end="775:26"><name pos:start="775:22" pos:end="775:22">s</name><operator pos:start="775:23" pos:end="775:24">-&gt;</operator><name pos:start="775:25" pos:end="775:26">pc</name></name><operator pos:start="775:27" pos:end="775:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="777:9" pos:end="777:31"><expr pos:start="777:9" pos:end="777:30"><name pos:start="777:9" pos:end="777:11">mod</name> <operator pos:start="777:13" pos:end="777:13">=</operator> <operator pos:start="777:15" pos:end="777:15">(</operator><name pos:start="777:16" pos:end="777:20">modrm</name> <operator pos:start="777:22" pos:end="777:23">&gt;&gt;</operator> <literal type="number" pos:start="777:25" pos:end="777:25">6</literal><operator pos:start="777:26" pos:end="777:26">)</operator> <operator pos:start="777:28" pos:end="777:28">&amp;</operator> <literal type="number" pos:start="777:30" pos:end="777:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="779:9" pos:end="779:23"><expr pos:start="779:9" pos:end="779:22"><name pos:start="779:9" pos:end="779:10">rm</name> <operator pos:start="779:12" pos:end="779:12">=</operator> <name pos:start="779:14" pos:end="779:18">modrm</name> <operator pos:start="779:20" pos:end="779:20">&amp;</operator> <literal type="number" pos:start="779:22" pos:end="779:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="781:9" pos:end="781:31"><expr pos:start="781:9" pos:end="781:30"><name pos:start="781:9" pos:end="781:11">reg</name> <operator pos:start="781:13" pos:end="781:13">=</operator> <operator pos:start="781:15" pos:end="781:15">(</operator><name pos:start="781:16" pos:end="781:20">modrm</name> <operator pos:start="781:22" pos:end="781:23">&gt;&gt;</operator> <literal type="number" pos:start="781:25" pos:end="781:25">3</literal><operator pos:start="781:26" pos:end="781:26">)</operator> <operator pos:start="781:28" pos:end="781:28">&amp;</operator> <literal type="number" pos:start="781:30" pos:end="781:30">7</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="785:9" pos:end="785:49"><expr pos:start="785:9" pos:end="785:48"><call pos:start="785:9" pos:end="785:48"><name pos:start="785:9" pos:end="785:22">gen_ldst_modrm</name><argument_list pos:start="785:23" pos:end="785:48">(<argument pos:start="785:24" pos:end="785:24"><expr pos:start="785:24" pos:end="785:24"><name pos:start="785:24" pos:end="785:24">s</name></expr></argument>, <argument pos:start="785:27" pos:end="785:31"><expr pos:start="785:27" pos:end="785:31"><name pos:start="785:27" pos:end="785:31">modrm</name></expr></argument>, <argument pos:start="785:34" pos:end="785:35"><expr pos:start="785:34" pos:end="785:35"><name pos:start="785:34" pos:end="785:35">ot</name></expr></argument>, <argument pos:start="785:38" pos:end="785:44"><expr pos:start="785:38" pos:end="785:44"><name pos:start="785:38" pos:end="785:44">OR_TMP0</name></expr></argument>, <argument pos:start="785:47" pos:end="785:47"><expr pos:start="785:47" pos:end="785:47"><literal type="number" pos:start="785:47" pos:end="785:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="787:9" pos:end="787:49"><expr pos:start="787:9" pos:end="787:48"><name pos:start="787:9" pos:end="787:46"><name pos:start="787:9" pos:end="787:25">gen_op_mov_TN_reg</name><index pos:start="787:26" pos:end="787:29">[<expr pos:start="787:27" pos:end="787:28"><name pos:start="787:27" pos:end="787:28">ot</name></expr>]</index><index pos:start="787:30" pos:end="787:32">[<expr pos:start="787:31" pos:end="787:31"><literal type="number" pos:start="787:31" pos:end="787:31">1</literal></expr>]</index><index pos:start="787:33" pos:end="787:46">[<expr pos:start="787:34" pos:end="787:45"><name pos:start="787:34" pos:end="787:36">reg</name> <operator pos:start="787:38" pos:end="787:38">+</operator> <name pos:start="787:40" pos:end="787:45">OR_EAX</name></expr>]</index></name><operator pos:start="787:47" pos:end="787:47">(</operator><operator pos:start="787:48" pos:end="787:48">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="789:9" pos:end="789:32"><expr pos:start="789:9" pos:end="789:31"><call pos:start="789:9" pos:end="789:31"><name pos:start="789:9" pos:end="789:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="789:30" pos:end="789:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="791:9" pos:end="791:37"><expr pos:start="791:9" pos:end="791:36"><name pos:start="791:9" pos:end="791:16"><name pos:start="791:9" pos:end="791:9">s</name><operator pos:start="791:10" pos:end="791:11">-&gt;</operator><name pos:start="791:12" pos:end="791:16">cc_op</name></name> <operator pos:start="791:18" pos:end="791:18">=</operator> <name pos:start="791:20" pos:end="791:31">CC_OP_LOGICB</name> <operator pos:start="791:33" pos:end="791:33">+</operator> <name pos:start="791:35" pos:end="791:36">ot</name></expr>;</expr_stmt>

        <break pos:start="793:9" pos:end="793:14">break;</break>

        

    <case pos:start="797:5" pos:end="797:14">case <expr pos:start="797:10" pos:end="797:13"><literal type="number" pos:start="797:10" pos:end="797:13">0xa8</literal></expr>:</case> <comment type="block" pos:start="797:16" pos:end="797:33">/* test eAX, Iv */</comment>

    <case pos:start="799:5" pos:end="799:14">case <expr pos:start="799:10" pos:end="799:13"><literal type="number" pos:start="799:10" pos:end="799:13">0xa9</literal></expr>:</case>

        <if_stmt pos:start="801:9" pos:end="807:43"><if pos:start="801:9" pos:end="803:25">if <condition pos:start="801:12" pos:end="801:25">(<expr pos:start="801:13" pos:end="801:24"><operator pos:start="801:13" pos:end="801:13">(</operator><name pos:start="801:14" pos:end="801:14">b</name> <operator pos:start="801:16" pos:end="801:16">&amp;</operator> <literal type="number" pos:start="801:18" pos:end="801:18">1</literal><operator pos:start="801:19" pos:end="801:19">)</operator> <operator pos:start="801:21" pos:end="801:22">==</operator> <literal type="number" pos:start="801:24" pos:end="801:24">0</literal></expr>)</condition><block type="pseudo" pos:start="803:13" pos:end="803:25"><block_content pos:start="803:13" pos:end="803:25">

            <expr_stmt pos:start="803:13" pos:end="803:25"><expr pos:start="803:13" pos:end="803:24"><name pos:start="803:13" pos:end="803:14">ot</name> <operator pos:start="803:16" pos:end="803:16">=</operator> <name pos:start="803:18" pos:end="803:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="805:9" pos:end="807:43">else<block type="pseudo" pos:start="807:13" pos:end="807:43"><block_content pos:start="807:13" pos:end="807:43">

            <expr_stmt pos:start="807:13" pos:end="807:43"><expr pos:start="807:13" pos:end="807:42"><name pos:start="807:13" pos:end="807:14">ot</name> <operator pos:start="807:16" pos:end="807:16">=</operator> <ternary pos:start="807:18" pos:end="807:42"><condition pos:start="807:18" pos:end="807:24"><expr pos:start="807:18" pos:end="807:22"><name pos:start="807:18" pos:end="807:22">dflag</name></expr> ?</condition><then pos:start="807:26" pos:end="807:32"> <expr pos:start="807:26" pos:end="807:32"><name pos:start="807:26" pos:end="807:32">OT_LONG</name></expr> </then><else pos:start="807:34" pos:end="807:42">: <expr pos:start="807:36" pos:end="807:42"><name pos:start="807:36" pos:end="807:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="809:9" pos:end="809:30"><expr pos:start="809:9" pos:end="809:29"><name pos:start="809:9" pos:end="809:11">val</name> <operator pos:start="809:13" pos:end="809:13">=</operator> <call pos:start="809:15" pos:end="809:29"><name pos:start="809:15" pos:end="809:22">insn_get</name><argument_list pos:start="809:23" pos:end="809:29">(<argument pos:start="809:24" pos:end="809:24"><expr pos:start="809:24" pos:end="809:24"><name pos:start="809:24" pos:end="809:24">s</name></expr></argument>, <argument pos:start="809:27" pos:end="809:28"><expr pos:start="809:27" pos:end="809:28"><name pos:start="809:27" pos:end="809:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="813:9" pos:end="813:43"><expr pos:start="813:9" pos:end="813:42"><name pos:start="813:9" pos:end="813:40"><name pos:start="813:9" pos:end="813:25">gen_op_mov_TN_reg</name><index pos:start="813:26" pos:end="813:29">[<expr pos:start="813:27" pos:end="813:28"><name pos:start="813:27" pos:end="813:28">ot</name></expr>]</index><index pos:start="813:30" pos:end="813:32">[<expr pos:start="813:31" pos:end="813:31"><literal type="number" pos:start="813:31" pos:end="813:31">0</literal></expr>]</index><index pos:start="813:33" pos:end="813:40">[<expr pos:start="813:34" pos:end="813:39"><name pos:start="813:34" pos:end="813:39">OR_EAX</name></expr>]</index></name><operator pos:start="813:41" pos:end="813:41">(</operator><operator pos:start="813:42" pos:end="813:42">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="815:9" pos:end="815:31"><expr pos:start="815:9" pos:end="815:30"><call pos:start="815:9" pos:end="815:30"><name pos:start="815:9" pos:end="815:25">gen_op_movl_T1_im</name><argument_list pos:start="815:26" pos:end="815:30">(<argument pos:start="815:27" pos:end="815:29"><expr pos:start="815:27" pos:end="815:29"><name pos:start="815:27" pos:end="815:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="817:9" pos:end="817:32"><expr pos:start="817:9" pos:end="817:31"><call pos:start="817:9" pos:end="817:31"><name pos:start="817:9" pos:end="817:29">gen_op_testl_T0_T1_cc</name><argument_list pos:start="817:30" pos:end="817:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="819:9" pos:end="819:37"><expr pos:start="819:9" pos:end="819:36"><name pos:start="819:9" pos:end="819:16"><name pos:start="819:9" pos:end="819:9">s</name><operator pos:start="819:10" pos:end="819:11">-&gt;</operator><name pos:start="819:12" pos:end="819:16">cc_op</name></name> <operator pos:start="819:18" pos:end="819:18">=</operator> <name pos:start="819:20" pos:end="819:31">CC_OP_LOGICB</name> <operator pos:start="819:33" pos:end="819:33">+</operator> <name pos:start="819:35" pos:end="819:36">ot</name></expr>;</expr_stmt>

        <break pos:start="821:9" pos:end="821:14">break;</break>

        

    <case pos:start="825:5" pos:end="825:14">case <expr pos:start="825:10" pos:end="825:13"><literal type="number" pos:start="825:10" pos:end="825:13">0x98</literal></expr>:</case> <comment type="block" pos:start="825:16" pos:end="825:29">/* CWDE/CBW */</comment>

        <if_stmt pos:start="827:9" pos:end="833:34"><if pos:start="827:9" pos:end="829:35">if <condition pos:start="827:12" pos:end="827:18">(<expr pos:start="827:13" pos:end="827:17"><name pos:start="827:13" pos:end="827:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="829:13" pos:end="829:35"><block_content pos:start="829:13" pos:end="829:35">

            <expr_stmt pos:start="829:13" pos:end="829:35"><expr pos:start="829:13" pos:end="829:34"><call pos:start="829:13" pos:end="829:34"><name pos:start="829:13" pos:end="829:32">gen_op_movswl_EAX_AX</name><argument_list pos:start="829:33" pos:end="829:34">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="831:9" pos:end="833:34">else<block type="pseudo" pos:start="833:13" pos:end="833:34"><block_content pos:start="833:13" pos:end="833:34">

            <expr_stmt pos:start="833:13" pos:end="833:34"><expr pos:start="833:13" pos:end="833:33"><call pos:start="833:13" pos:end="833:33"><name pos:start="833:13" pos:end="833:31">gen_op_movsbw_AX_AL</name><argument_list pos:start="833:32" pos:end="833:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="835:9" pos:end="835:14">break;</break>

    <case pos:start="837:5" pos:end="837:14">case <expr pos:start="837:10" pos:end="837:13"><literal type="number" pos:start="837:10" pos:end="837:13">0x99</literal></expr>:</case> <comment type="block" pos:start="837:16" pos:end="837:28">/* CDQ/CWD */</comment>

        <if_stmt pos:start="839:9" pos:end="845:34"><if pos:start="839:9" pos:end="841:36">if <condition pos:start="839:12" pos:end="839:18">(<expr pos:start="839:13" pos:end="839:17"><name pos:start="839:13" pos:end="839:17">dflag</name></expr>)</condition><block type="pseudo" pos:start="841:13" pos:end="841:36"><block_content pos:start="841:13" pos:end="841:36">

            <expr_stmt pos:start="841:13" pos:end="841:36"><expr pos:start="841:13" pos:end="841:35"><call pos:start="841:13" pos:end="841:35"><name pos:start="841:13" pos:end="841:33">gen_op_movslq_EDX_EAX</name><argument_list pos:start="841:34" pos:end="841:35">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="843:9" pos:end="845:34">else<block type="pseudo" pos:start="845:13" pos:end="845:34"><block_content pos:start="845:13" pos:end="845:34">

            <expr_stmt pos:start="845:13" pos:end="845:34"><expr pos:start="845:13" pos:end="845:33"><call pos:start="845:13" pos:end="845:33"><name pos:start="845:13" pos:end="845:31">gen_op_movswl_DX_AX</name><argument_list pos:start="845:32" pos:end="845:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="847:9" pos:end="847:14">break;</break>

    <case pos:start="849:5" pos:end="849:15">case <expr pos:start="849:10" pos:end="849:14"><literal type="number" pos:start="849:10" pos:end="849:14">0x1af</literal></expr>:</case> <comment type="block" pos:start="849:17" pos:end="849:33">/* imul Gv, Ev */</comment>

    <case pos:start="851:5" pos:end="851:14">case <expr pos:start="851:10" pos:end="851:13"><literal type="number" pos:start="851:10" pos:end="851:13">0x69</literal></expr>:</case> <comment type="block" pos:start="851:16" pos:end="851:35">/* imul Gv, Ev, I */</comment>

    <case pos:start="853:5" pos:end="853:14">case <expr pos:start="853:10" pos:end="853:13"><literal type="number" pos:start="853:10" pos:end="853:13">0x6b</literal></expr>:</case>

        <expr_stmt pos:start="855:9" pos:end="855:39"><expr pos:start="855:9" pos:end="855:38"><name pos:start="855:9" pos:end="855:10">ot</name> <operator pos:start="855:12" pos:end="855:12">=</operator> <ternary pos:start="855:14" pos:end="855:38"><condition pos:start="855:14" pos:end="855:20"><expr pos:start="855:14" pos:end="855:18"><name pos:start="855:14" pos:end="855:18">dflag</name></expr> ?</condition><then pos:start="855:22" pos:end="855:28"> <expr pos:start="855:22" pos:end="855:28"><name pos:start="855:22" pos:end="855:28">OT_LONG</name></expr> </then><else pos:start="855:30" pos:end="855:38">: <expr pos:start="855:32" pos:end="855:38"><name pos:start="855:32" pos:end="855:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="857:9" pos:end="857:30"><expr pos:start="857:9" pos:end="857:29"><name pos:start="857:9" pos:end="857:13">modrm</name> <operator pos:start="857:15" pos:end="857:15">=</operator> <call pos:start="857:17" pos:end="857:29"><name pos:start="857:17" pos:end="857:20">ldub</name><argument_list pos:start="857:21" pos:end="857:29">(<argument pos:start="857:22" pos:end="857:28"><expr pos:start="857:22" pos:end="857:28"><name pos:start="857:22" pos:end="857:26"><name pos:start="857:22" pos:end="857:22">s</name><operator pos:start="857:23" pos:end="857:24">-&gt;</operator><name pos:start="857:25" pos:end="857:26">pc</name></name><operator pos:start="857:27" pos:end="857:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="859:9" pos:end="859:42"><expr pos:start="859:9" pos:end="859:41"><name pos:start="859:9" pos:end="859:11">reg</name> <operator pos:start="859:13" pos:end="859:13">=</operator> <operator pos:start="859:15" pos:end="859:15">(</operator><operator pos:start="859:16" pos:end="859:16">(</operator><name pos:start="859:17" pos:end="859:21">modrm</name> <operator pos:start="859:23" pos:end="859:24">&gt;&gt;</operator> <literal type="number" pos:start="859:26" pos:end="859:26">3</literal><operator pos:start="859:27" pos:end="859:27">)</operator> <operator pos:start="859:29" pos:end="859:29">&amp;</operator> <literal type="number" pos:start="859:31" pos:end="859:31">7</literal><operator pos:start="859:32" pos:end="859:32">)</operator> <operator pos:start="859:34" pos:end="859:34">+</operator> <name pos:start="859:36" pos:end="859:41">OR_EAX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="861:9" pos:end="861:49"><expr pos:start="861:9" pos:end="861:48"><call pos:start="861:9" pos:end="861:48"><name pos:start="861:9" pos:end="861:22">gen_ldst_modrm</name><argument_list pos:start="861:23" pos:end="861:48">(<argument pos:start="861:24" pos:end="861:24"><expr pos:start="861:24" pos:end="861:24"><name pos:start="861:24" pos:end="861:24">s</name></expr></argument>, <argument pos:start="861:27" pos:end="861:31"><expr pos:start="861:27" pos:end="861:31"><name pos:start="861:27" pos:end="861:31">modrm</name></expr></argument>, <argument pos:start="861:34" pos:end="861:35"><expr pos:start="861:34" pos:end="861:35"><name pos:start="861:34" pos:end="861:35">ot</name></expr></argument>, <argument pos:start="861:38" pos:end="861:44"><expr pos:start="861:38" pos:end="861:44"><name pos:start="861:38" pos:end="861:44">OR_TMP0</name></expr></argument>, <argument pos:start="861:47" pos:end="861:47"><expr pos:start="861:47" pos:end="861:47"><literal type="number" pos:start="861:47" pos:end="861:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="863:9" pos:end="879:9"><if pos:start="863:9" pos:end="869:9">if <condition pos:start="863:12" pos:end="863:22">(<expr pos:start="863:13" pos:end="863:21"><name pos:start="863:13" pos:end="863:13">b</name> <operator pos:start="863:15" pos:end="863:16">==</operator> <literal type="number" pos:start="863:18" pos:end="863:21">0x69</literal></expr>)</condition> <block pos:start="863:24" pos:end="869:9">{<block_content pos:start="865:13" pos:end="867:35">

            <expr_stmt pos:start="865:13" pos:end="865:34"><expr pos:start="865:13" pos:end="865:33"><name pos:start="865:13" pos:end="865:15">val</name> <operator pos:start="865:17" pos:end="865:17">=</operator> <call pos:start="865:19" pos:end="865:33"><name pos:start="865:19" pos:end="865:26">insn_get</name><argument_list pos:start="865:27" pos:end="865:33">(<argument pos:start="865:28" pos:end="865:28"><expr pos:start="865:28" pos:end="865:28"><name pos:start="865:28" pos:end="865:28">s</name></expr></argument>, <argument pos:start="865:31" pos:end="865:32"><expr pos:start="865:31" pos:end="865:32"><name pos:start="865:31" pos:end="865:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="867:13" pos:end="867:35"><expr pos:start="867:13" pos:end="867:34"><call pos:start="867:13" pos:end="867:34"><name pos:start="867:13" pos:end="867:29">gen_op_movl_T1_im</name><argument_list pos:start="867:30" pos:end="867:34">(<argument pos:start="867:31" pos:end="867:33"><expr pos:start="867:31" pos:end="867:33"><name pos:start="867:31" pos:end="867:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="869:11" pos:end="875:9">else if <condition pos:start="869:19" pos:end="869:29">(<expr pos:start="869:20" pos:end="869:28"><name pos:start="869:20" pos:end="869:20">b</name> <operator pos:start="869:22" pos:end="869:23">==</operator> <literal type="number" pos:start="869:25" pos:end="869:28">0x6b</literal></expr>)</condition> <block pos:start="869:31" pos:end="875:9">{<block_content pos:start="871:13" pos:end="873:35">

            <expr_stmt pos:start="871:13" pos:end="871:39"><expr pos:start="871:13" pos:end="871:38"><name pos:start="871:13" pos:end="871:15">val</name> <operator pos:start="871:17" pos:end="871:17">=</operator> <call pos:start="871:19" pos:end="871:38"><name pos:start="871:19" pos:end="871:26">insn_get</name><argument_list pos:start="871:27" pos:end="871:38">(<argument pos:start="871:28" pos:end="871:28"><expr pos:start="871:28" pos:end="871:28"><name pos:start="871:28" pos:end="871:28">s</name></expr></argument>, <argument pos:start="871:31" pos:end="871:37"><expr pos:start="871:31" pos:end="871:37"><name pos:start="871:31" pos:end="871:37">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="873:13" pos:end="873:35"><expr pos:start="873:13" pos:end="873:34"><call pos:start="873:13" pos:end="873:34"><name pos:start="873:13" pos:end="873:29">gen_op_movl_T1_im</name><argument_list pos:start="873:30" pos:end="873:34">(<argument pos:start="873:31" pos:end="873:33"><expr pos:start="873:31" pos:end="873:33"><name pos:start="873:31" pos:end="873:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="875:11" pos:end="879:9">else <block pos:start="875:16" pos:end="879:9">{<block_content pos:start="877:13" pos:end="877:44">

            <expr_stmt pos:start="877:13" pos:end="877:44"><expr pos:start="877:13" pos:end="877:43"><name pos:start="877:13" pos:end="877:41"><name pos:start="877:13" pos:end="877:29">gen_op_mov_TN_reg</name><index pos:start="877:30" pos:end="877:33">[<expr pos:start="877:31" pos:end="877:32"><name pos:start="877:31" pos:end="877:32">ot</name></expr>]</index><index pos:start="877:34" pos:end="877:36">[<expr pos:start="877:35" pos:end="877:35"><literal type="number" pos:start="877:35" pos:end="877:35">1</literal></expr>]</index><index pos:start="877:37" pos:end="877:41">[<expr pos:start="877:38" pos:end="877:40"><name pos:start="877:38" pos:end="877:40">reg</name></expr>]</index></name><operator pos:start="877:42" pos:end="877:42">(</operator><operator pos:start="877:43" pos:end="877:43">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="883:9" pos:end="891:9"><if pos:start="883:9" pos:end="887:9">if <condition pos:start="883:12" pos:end="883:26">(<expr pos:start="883:13" pos:end="883:25"><name pos:start="883:13" pos:end="883:14">ot</name> <operator pos:start="883:16" pos:end="883:17">==</operator> <name pos:start="883:19" pos:end="883:25">OT_LONG</name></expr>)</condition> <block pos:start="883:28" pos:end="887:9">{<block_content pos:start="885:13" pos:end="885:33">

            <expr_stmt pos:start="885:13" pos:end="885:33"><expr pos:start="885:13" pos:end="885:32"><call pos:start="885:13" pos:end="885:32"><name pos:start="885:13" pos:end="885:30">gen_op_imull_T0_T1</name><argument_list pos:start="885:31" pos:end="885:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="887:11" pos:end="891:9">else <block pos:start="887:16" pos:end="891:9">{<block_content pos:start="889:13" pos:end="889:33">

            <expr_stmt pos:start="889:13" pos:end="889:33"><expr pos:start="889:13" pos:end="889:32"><call pos:start="889:13" pos:end="889:32"><name pos:start="889:13" pos:end="889:30">gen_op_imulw_T0_T1</name><argument_list pos:start="889:31" pos:end="889:32">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="893:9" pos:end="893:37"><expr pos:start="893:9" pos:end="893:36"><name pos:start="893:9" pos:end="893:34"><name pos:start="893:9" pos:end="893:25">gen_op_mov_reg_T0</name><index pos:start="893:26" pos:end="893:29">[<expr pos:start="893:27" pos:end="893:28"><name pos:start="893:27" pos:end="893:28">ot</name></expr>]</index><index pos:start="893:30" pos:end="893:34">[<expr pos:start="893:31" pos:end="893:33"><name pos:start="893:31" pos:end="893:33">reg</name></expr>]</index></name><operator pos:start="893:35" pos:end="893:35">(</operator><operator pos:start="893:36" pos:end="893:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="895:9" pos:end="895:29"><expr pos:start="895:9" pos:end="895:28"><name pos:start="895:9" pos:end="895:16"><name pos:start="895:9" pos:end="895:9">s</name><operator pos:start="895:10" pos:end="895:11">-&gt;</operator><name pos:start="895:12" pos:end="895:16">cc_op</name></name> <operator pos:start="895:18" pos:end="895:18">=</operator> <name pos:start="895:20" pos:end="895:28">CC_OP_MUL</name></expr>;</expr_stmt>

        <break pos:start="897:9" pos:end="897:14">break;</break>

    <case pos:start="899:5" pos:end="899:15">case <expr pos:start="899:10" pos:end="899:14"><literal type="number" pos:start="899:10" pos:end="899:14">0x1c0</literal></expr>:</case>

    <case pos:start="901:5" pos:end="901:15">case <expr pos:start="901:10" pos:end="901:14"><literal type="number" pos:start="901:10" pos:end="901:14">0x1c1</literal></expr>:</case> <comment type="block" pos:start="901:17" pos:end="901:33">/* xadd Ev, Gv */</comment>

        <if_stmt pos:start="903:9" pos:end="909:43"><if pos:start="903:9" pos:end="905:25">if <condition pos:start="903:12" pos:end="903:25">(<expr pos:start="903:13" pos:end="903:24"><operator pos:start="903:13" pos:end="903:13">(</operator><name pos:start="903:14" pos:end="903:14">b</name> <operator pos:start="903:16" pos:end="903:16">&amp;</operator> <literal type="number" pos:start="903:18" pos:end="903:18">1</literal><operator pos:start="903:19" pos:end="903:19">)</operator> <operator pos:start="903:21" pos:end="903:22">==</operator> <literal type="number" pos:start="903:24" pos:end="903:24">0</literal></expr>)</condition><block type="pseudo" pos:start="905:13" pos:end="905:25"><block_content pos:start="905:13" pos:end="905:25">

            <expr_stmt pos:start="905:13" pos:end="905:25"><expr pos:start="905:13" pos:end="905:24"><name pos:start="905:13" pos:end="905:14">ot</name> <operator pos:start="905:16" pos:end="905:16">=</operator> <name pos:start="905:18" pos:end="905:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="907:9" pos:end="909:43">else<block type="pseudo" pos:start="909:13" pos:end="909:43"><block_content pos:start="909:13" pos:end="909:43">

            <expr_stmt pos:start="909:13" pos:end="909:43"><expr pos:start="909:13" pos:end="909:42"><name pos:start="909:13" pos:end="909:14">ot</name> <operator pos:start="909:16" pos:end="909:16">=</operator> <ternary pos:start="909:18" pos:end="909:42"><condition pos:start="909:18" pos:end="909:24"><expr pos:start="909:18" pos:end="909:22"><name pos:start="909:18" pos:end="909:22">dflag</name></expr> ?</condition><then pos:start="909:26" pos:end="909:32"> <expr pos:start="909:26" pos:end="909:32"><name pos:start="909:26" pos:end="909:32">OT_LONG</name></expr> </then><else pos:start="909:34" pos:end="909:42">: <expr pos:start="909:36" pos:end="909:42"><name pos:start="909:36" pos:end="909:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="911:9" pos:end="911:30"><expr pos:start="911:9" pos:end="911:29"><name pos:start="911:9" pos:end="911:13">modrm</name> <operator pos:start="911:15" pos:end="911:15">=</operator> <call pos:start="911:17" pos:end="911:29"><name pos:start="911:17" pos:end="911:20">ldub</name><argument_list pos:start="911:21" pos:end="911:29">(<argument pos:start="911:22" pos:end="911:28"><expr pos:start="911:22" pos:end="911:28"><name pos:start="911:22" pos:end="911:26"><name pos:start="911:22" pos:end="911:22">s</name><operator pos:start="911:23" pos:end="911:24">-&gt;</operator><name pos:start="911:25" pos:end="911:26">pc</name></name><operator pos:start="911:27" pos:end="911:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="913:9" pos:end="913:31"><expr pos:start="913:9" pos:end="913:30"><name pos:start="913:9" pos:end="913:11">reg</name> <operator pos:start="913:13" pos:end="913:13">=</operator> <operator pos:start="913:15" pos:end="913:15">(</operator><name pos:start="913:16" pos:end="913:20">modrm</name> <operator pos:start="913:22" pos:end="913:23">&gt;&gt;</operator> <literal type="number" pos:start="913:25" pos:end="913:25">3</literal><operator pos:start="913:26" pos:end="913:26">)</operator> <operator pos:start="913:28" pos:end="913:28">&amp;</operator> <literal type="number" pos:start="913:30" pos:end="913:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="915:9" pos:end="915:31"><expr pos:start="915:9" pos:end="915:30"><name pos:start="915:9" pos:end="915:11">mod</name> <operator pos:start="915:13" pos:end="915:13">=</operator> <operator pos:start="915:15" pos:end="915:15">(</operator><name pos:start="915:16" pos:end="915:20">modrm</name> <operator pos:start="915:22" pos:end="915:23">&gt;&gt;</operator> <literal type="number" pos:start="915:25" pos:end="915:25">6</literal><operator pos:start="915:26" pos:end="915:26">)</operator> <operator pos:start="915:28" pos:end="915:28">&amp;</operator> <literal type="number" pos:start="915:30" pos:end="915:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="917:9" pos:end="945:9"><if pos:start="917:9" pos:end="931:9">if <condition pos:start="917:12" pos:end="917:21">(<expr pos:start="917:13" pos:end="917:20"><name pos:start="917:13" pos:end="917:15">mod</name> <operator pos:start="917:17" pos:end="917:18">==</operator> <literal type="number" pos:start="917:20" pos:end="917:20">3</literal></expr>)</condition> <block pos:start="917:23" pos:end="931:9">{<block_content pos:start="919:13" pos:end="929:41">

            <expr_stmt pos:start="919:13" pos:end="919:27"><expr pos:start="919:13" pos:end="919:26"><name pos:start="919:13" pos:end="919:14">rm</name> <operator pos:start="919:16" pos:end="919:16">=</operator> <name pos:start="919:18" pos:end="919:22">modrm</name> <operator pos:start="919:24" pos:end="919:24">&amp;</operator> <literal type="number" pos:start="919:26" pos:end="919:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="921:13" pos:end="921:44"><expr pos:start="921:13" pos:end="921:43"><name pos:start="921:13" pos:end="921:41"><name pos:start="921:13" pos:end="921:29">gen_op_mov_TN_reg</name><index pos:start="921:30" pos:end="921:33">[<expr pos:start="921:31" pos:end="921:32"><name pos:start="921:31" pos:end="921:32">ot</name></expr>]</index><index pos:start="921:34" pos:end="921:36">[<expr pos:start="921:35" pos:end="921:35"><literal type="number" pos:start="921:35" pos:end="921:35">0</literal></expr>]</index><index pos:start="921:37" pos:end="921:41">[<expr pos:start="921:38" pos:end="921:40"><name pos:start="921:38" pos:end="921:40">reg</name></expr>]</index></name><operator pos:start="921:42" pos:end="921:42">(</operator><operator pos:start="921:43" pos:end="921:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="923:13" pos:end="923:43"><expr pos:start="923:13" pos:end="923:42"><name pos:start="923:13" pos:end="923:40"><name pos:start="923:13" pos:end="923:29">gen_op_mov_TN_reg</name><index pos:start="923:30" pos:end="923:33">[<expr pos:start="923:31" pos:end="923:32"><name pos:start="923:31" pos:end="923:32">ot</name></expr>]</index><index pos:start="923:34" pos:end="923:36">[<expr pos:start="923:35" pos:end="923:35"><literal type="number" pos:start="923:35" pos:end="923:35">1</literal></expr>]</index><index pos:start="923:37" pos:end="923:40">[<expr pos:start="923:38" pos:end="923:39"><name pos:start="923:38" pos:end="923:39">rm</name></expr>]</index></name><operator pos:start="923:41" pos:end="923:41">(</operator><operator pos:start="923:42" pos:end="923:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="925:13" pos:end="925:35"><expr pos:start="925:13" pos:end="925:34"><call pos:start="925:13" pos:end="925:34"><name pos:start="925:13" pos:end="925:32">gen_op_addl_T0_T1_cc</name><argument_list pos:start="925:33" pos:end="925:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="927:13" pos:end="927:40"><expr pos:start="927:13" pos:end="927:39"><name pos:start="927:13" pos:end="927:37"><name pos:start="927:13" pos:end="927:29">gen_op_mov_reg_T0</name><index pos:start="927:30" pos:end="927:33">[<expr pos:start="927:31" pos:end="927:32"><name pos:start="927:31" pos:end="927:32">ot</name></expr>]</index><index pos:start="927:34" pos:end="927:37">[<expr pos:start="927:35" pos:end="927:36"><name pos:start="927:35" pos:end="927:36">rm</name></expr>]</index></name><operator pos:start="927:38" pos:end="927:38">(</operator><operator pos:start="927:39" pos:end="927:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="929:13" pos:end="929:41"><expr pos:start="929:13" pos:end="929:40"><name pos:start="929:13" pos:end="929:38"><name pos:start="929:13" pos:end="929:29">gen_op_mov_reg_T1</name><index pos:start="929:30" pos:end="929:33">[<expr pos:start="929:31" pos:end="929:32"><name pos:start="929:31" pos:end="929:32">ot</name></expr>]</index><index pos:start="929:34" pos:end="929:38">[<expr pos:start="929:35" pos:end="929:37"><name pos:start="929:35" pos:end="929:37">reg</name></expr>]</index></name><operator pos:start="929:39" pos:end="929:39">(</operator><operator pos:start="929:40" pos:end="929:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="931:11" pos:end="945:9">else <block pos:start="931:16" pos:end="945:9">{<block_content pos:start="933:13" pos:end="943:41">

            <expr_stmt pos:start="933:13" pos:end="933:61"><expr pos:start="933:13" pos:end="933:60"><call pos:start="933:13" pos:end="933:60"><name pos:start="933:13" pos:end="933:25">gen_lea_modrm</name><argument_list pos:start="933:26" pos:end="933:60">(<argument pos:start="933:27" pos:end="933:27"><expr pos:start="933:27" pos:end="933:27"><name pos:start="933:27" pos:end="933:27">s</name></expr></argument>, <argument pos:start="933:30" pos:end="933:34"><expr pos:start="933:30" pos:end="933:34"><name pos:start="933:30" pos:end="933:34">modrm</name></expr></argument>, <argument pos:start="933:37" pos:end="933:45"><expr pos:start="933:37" pos:end="933:45"><operator pos:start="933:37" pos:end="933:37">&amp;</operator><name pos:start="933:38" pos:end="933:45">reg_addr</name></expr></argument>, <argument pos:start="933:48" pos:end="933:59"><expr pos:start="933:48" pos:end="933:59"><operator pos:start="933:48" pos:end="933:48">&amp;</operator><name pos:start="933:49" pos:end="933:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="935:13" pos:end="935:44"><expr pos:start="935:13" pos:end="935:43"><name pos:start="935:13" pos:end="935:41"><name pos:start="935:13" pos:end="935:29">gen_op_mov_TN_reg</name><index pos:start="935:30" pos:end="935:33">[<expr pos:start="935:31" pos:end="935:32"><name pos:start="935:31" pos:end="935:32">ot</name></expr>]</index><index pos:start="935:34" pos:end="935:36">[<expr pos:start="935:35" pos:end="935:35"><literal type="number" pos:start="935:35" pos:end="935:35">0</literal></expr>]</index><index pos:start="935:37" pos:end="935:41">[<expr pos:start="935:38" pos:end="935:40"><name pos:start="935:38" pos:end="935:40">reg</name></expr>]</index></name><operator pos:start="935:42" pos:end="935:42">(</operator><operator pos:start="935:43" pos:end="935:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="937:13" pos:end="937:34"><expr pos:start="937:13" pos:end="937:33"><name pos:start="937:13" pos:end="937:31"><name pos:start="937:13" pos:end="937:27">gen_op_ld_T1_A0</name><index pos:start="937:28" pos:end="937:31">[<expr pos:start="937:29" pos:end="937:30"><name pos:start="937:29" pos:end="937:30">ot</name></expr>]</index></name><operator pos:start="937:32" pos:end="937:32">(</operator><operator pos:start="937:33" pos:end="937:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="939:13" pos:end="939:35"><expr pos:start="939:13" pos:end="939:34"><call pos:start="939:13" pos:end="939:34"><name pos:start="939:13" pos:end="939:32">gen_op_addl_T0_T1_cc</name><argument_list pos:start="939:33" pos:end="939:34">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="941:13" pos:end="941:34"><expr pos:start="941:13" pos:end="941:33"><name pos:start="941:13" pos:end="941:31"><name pos:start="941:13" pos:end="941:27">gen_op_st_T0_A0</name><index pos:start="941:28" pos:end="941:31">[<expr pos:start="941:29" pos:end="941:30"><name pos:start="941:29" pos:end="941:30">ot</name></expr>]</index></name><operator pos:start="941:32" pos:end="941:32">(</operator><operator pos:start="941:33" pos:end="941:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="943:13" pos:end="943:41"><expr pos:start="943:13" pos:end="943:40"><name pos:start="943:13" pos:end="943:38"><name pos:start="943:13" pos:end="943:29">gen_op_mov_reg_T1</name><index pos:start="943:30" pos:end="943:33">[<expr pos:start="943:31" pos:end="943:32"><name pos:start="943:31" pos:end="943:32">ot</name></expr>]</index><index pos:start="943:34" pos:end="943:38">[<expr pos:start="943:35" pos:end="943:37"><name pos:start="943:35" pos:end="943:37">reg</name></expr>]</index></name><operator pos:start="943:39" pos:end="943:39">(</operator><operator pos:start="943:40" pos:end="943:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="947:9" pos:end="947:35"><expr pos:start="947:9" pos:end="947:34"><name pos:start="947:9" pos:end="947:16"><name pos:start="947:9" pos:end="947:9">s</name><operator pos:start="947:10" pos:end="947:11">-&gt;</operator><name pos:start="947:12" pos:end="947:16">cc_op</name></name> <operator pos:start="947:18" pos:end="947:18">=</operator> <name pos:start="947:20" pos:end="947:29">CC_OP_ADDB</name> <operator pos:start="947:31" pos:end="947:31">+</operator> <name pos:start="947:33" pos:end="947:34">ot</name></expr>;</expr_stmt>

        <break pos:start="949:9" pos:end="949:14">break;</break>

    <case pos:start="951:5" pos:end="951:15">case <expr pos:start="951:10" pos:end="951:14"><literal type="number" pos:start="951:10" pos:end="951:14">0x1b0</literal></expr>:</case>

    <case pos:start="953:5" pos:end="953:15">case <expr pos:start="953:10" pos:end="953:14"><literal type="number" pos:start="953:10" pos:end="953:14">0x1b1</literal></expr>:</case> <comment type="block" pos:start="953:17" pos:end="953:36">/* cmpxchg Ev, Gv */</comment>

        <if_stmt pos:start="955:9" pos:end="961:43"><if pos:start="955:9" pos:end="957:25">if <condition pos:start="955:12" pos:end="955:25">(<expr pos:start="955:13" pos:end="955:24"><operator pos:start="955:13" pos:end="955:13">(</operator><name pos:start="955:14" pos:end="955:14">b</name> <operator pos:start="955:16" pos:end="955:16">&amp;</operator> <literal type="number" pos:start="955:18" pos:end="955:18">1</literal><operator pos:start="955:19" pos:end="955:19">)</operator> <operator pos:start="955:21" pos:end="955:22">==</operator> <literal type="number" pos:start="955:24" pos:end="955:24">0</literal></expr>)</condition><block type="pseudo" pos:start="957:13" pos:end="957:25"><block_content pos:start="957:13" pos:end="957:25">

            <expr_stmt pos:start="957:13" pos:end="957:25"><expr pos:start="957:13" pos:end="957:24"><name pos:start="957:13" pos:end="957:14">ot</name> <operator pos:start="957:16" pos:end="957:16">=</operator> <name pos:start="957:18" pos:end="957:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="959:9" pos:end="961:43">else<block type="pseudo" pos:start="961:13" pos:end="961:43"><block_content pos:start="961:13" pos:end="961:43">

            <expr_stmt pos:start="961:13" pos:end="961:43"><expr pos:start="961:13" pos:end="961:42"><name pos:start="961:13" pos:end="961:14">ot</name> <operator pos:start="961:16" pos:end="961:16">=</operator> <ternary pos:start="961:18" pos:end="961:42"><condition pos:start="961:18" pos:end="961:24"><expr pos:start="961:18" pos:end="961:22"><name pos:start="961:18" pos:end="961:22">dflag</name></expr> ?</condition><then pos:start="961:26" pos:end="961:32"> <expr pos:start="961:26" pos:end="961:32"><name pos:start="961:26" pos:end="961:32">OT_LONG</name></expr> </then><else pos:start="961:34" pos:end="961:42">: <expr pos:start="961:36" pos:end="961:42"><name pos:start="961:36" pos:end="961:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="963:9" pos:end="963:30"><expr pos:start="963:9" pos:end="963:29"><name pos:start="963:9" pos:end="963:13">modrm</name> <operator pos:start="963:15" pos:end="963:15">=</operator> <call pos:start="963:17" pos:end="963:29"><name pos:start="963:17" pos:end="963:20">ldub</name><argument_list pos:start="963:21" pos:end="963:29">(<argument pos:start="963:22" pos:end="963:28"><expr pos:start="963:22" pos:end="963:28"><name pos:start="963:22" pos:end="963:26"><name pos:start="963:22" pos:end="963:22">s</name><operator pos:start="963:23" pos:end="963:24">-&gt;</operator><name pos:start="963:25" pos:end="963:26">pc</name></name><operator pos:start="963:27" pos:end="963:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="965:9" pos:end="965:31"><expr pos:start="965:9" pos:end="965:30"><name pos:start="965:9" pos:end="965:11">reg</name> <operator pos:start="965:13" pos:end="965:13">=</operator> <operator pos:start="965:15" pos:end="965:15">(</operator><name pos:start="965:16" pos:end="965:20">modrm</name> <operator pos:start="965:22" pos:end="965:23">&gt;&gt;</operator> <literal type="number" pos:start="965:25" pos:end="965:25">3</literal><operator pos:start="965:26" pos:end="965:26">)</operator> <operator pos:start="965:28" pos:end="965:28">&amp;</operator> <literal type="number" pos:start="965:30" pos:end="965:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="967:9" pos:end="967:31"><expr pos:start="967:9" pos:end="967:30"><name pos:start="967:9" pos:end="967:11">mod</name> <operator pos:start="967:13" pos:end="967:13">=</operator> <operator pos:start="967:15" pos:end="967:15">(</operator><name pos:start="967:16" pos:end="967:20">modrm</name> <operator pos:start="967:22" pos:end="967:23">&gt;&gt;</operator> <literal type="number" pos:start="967:25" pos:end="967:25">6</literal><operator pos:start="967:26" pos:end="967:26">)</operator> <operator pos:start="967:28" pos:end="967:28">&amp;</operator> <literal type="number" pos:start="967:30" pos:end="967:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="969:9" pos:end="969:40"><expr pos:start="969:9" pos:end="969:39"><name pos:start="969:9" pos:end="969:37"><name pos:start="969:9" pos:end="969:25">gen_op_mov_TN_reg</name><index pos:start="969:26" pos:end="969:29">[<expr pos:start="969:27" pos:end="969:28"><name pos:start="969:27" pos:end="969:28">ot</name></expr>]</index><index pos:start="969:30" pos:end="969:32">[<expr pos:start="969:31" pos:end="969:31"><literal type="number" pos:start="969:31" pos:end="969:31">1</literal></expr>]</index><index pos:start="969:33" pos:end="969:37">[<expr pos:start="969:34" pos:end="969:36"><name pos:start="969:34" pos:end="969:36">reg</name></expr>]</index></name><operator pos:start="969:38" pos:end="969:38">(</operator><operator pos:start="969:39" pos:end="969:39">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="971:9" pos:end="991:9"><if pos:start="971:9" pos:end="981:9">if <condition pos:start="971:12" pos:end="971:21">(<expr pos:start="971:13" pos:end="971:20"><name pos:start="971:13" pos:end="971:15">mod</name> <operator pos:start="971:17" pos:end="971:18">==</operator> <literal type="number" pos:start="971:20" pos:end="971:20">3</literal></expr>)</condition> <block pos:start="971:23" pos:end="981:9">{<block_content pos:start="973:13" pos:end="979:40">

            <expr_stmt pos:start="973:13" pos:end="973:27"><expr pos:start="973:13" pos:end="973:26"><name pos:start="973:13" pos:end="973:14">rm</name> <operator pos:start="973:16" pos:end="973:16">=</operator> <name pos:start="973:18" pos:end="973:22">modrm</name> <operator pos:start="973:24" pos:end="973:24">&amp;</operator> <literal type="number" pos:start="973:26" pos:end="973:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:43"><expr pos:start="975:13" pos:end="975:42"><name pos:start="975:13" pos:end="975:40"><name pos:start="975:13" pos:end="975:29">gen_op_mov_TN_reg</name><index pos:start="975:30" pos:end="975:33">[<expr pos:start="975:31" pos:end="975:32"><name pos:start="975:31" pos:end="975:32">ot</name></expr>]</index><index pos:start="975:34" pos:end="975:36">[<expr pos:start="975:35" pos:end="975:35"><literal type="number" pos:start="975:35" pos:end="975:35">0</literal></expr>]</index><index pos:start="975:37" pos:end="975:40">[<expr pos:start="975:38" pos:end="975:39"><name pos:start="975:38" pos:end="975:39">rm</name></expr>]</index></name><operator pos:start="975:41" pos:end="975:41">(</operator><operator pos:start="975:42" pos:end="975:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="977:13" pos:end="977:46"><expr pos:start="977:13" pos:end="977:45"><name pos:start="977:13" pos:end="977:43"><name pos:start="977:13" pos:end="977:39">gen_op_cmpxchg_T0_T1_EAX_cc</name><index pos:start="977:40" pos:end="977:43">[<expr pos:start="977:41" pos:end="977:42"><name pos:start="977:41" pos:end="977:42">ot</name></expr>]</index></name><operator pos:start="977:44" pos:end="977:44">(</operator><operator pos:start="977:45" pos:end="977:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="979:13" pos:end="979:40"><expr pos:start="979:13" pos:end="979:39"><name pos:start="979:13" pos:end="979:37"><name pos:start="979:13" pos:end="979:29">gen_op_mov_reg_T0</name><index pos:start="979:30" pos:end="979:33">[<expr pos:start="979:31" pos:end="979:32"><name pos:start="979:31" pos:end="979:32">ot</name></expr>]</index><index pos:start="979:34" pos:end="979:37">[<expr pos:start="979:35" pos:end="979:36"><name pos:start="979:35" pos:end="979:36">rm</name></expr>]</index></name><operator pos:start="979:38" pos:end="979:38">(</operator><operator pos:start="979:39" pos:end="979:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="981:11" pos:end="991:9">else <block pos:start="981:16" pos:end="991:9">{<block_content pos:start="983:13" pos:end="989:34">

            <expr_stmt pos:start="983:13" pos:end="983:61"><expr pos:start="983:13" pos:end="983:60"><call pos:start="983:13" pos:end="983:60"><name pos:start="983:13" pos:end="983:25">gen_lea_modrm</name><argument_list pos:start="983:26" pos:end="983:60">(<argument pos:start="983:27" pos:end="983:27"><expr pos:start="983:27" pos:end="983:27"><name pos:start="983:27" pos:end="983:27">s</name></expr></argument>, <argument pos:start="983:30" pos:end="983:34"><expr pos:start="983:30" pos:end="983:34"><name pos:start="983:30" pos:end="983:34">modrm</name></expr></argument>, <argument pos:start="983:37" pos:end="983:45"><expr pos:start="983:37" pos:end="983:45"><operator pos:start="983:37" pos:end="983:37">&amp;</operator><name pos:start="983:38" pos:end="983:45">reg_addr</name></expr></argument>, <argument pos:start="983:48" pos:end="983:59"><expr pos:start="983:48" pos:end="983:59"><operator pos:start="983:48" pos:end="983:48">&amp;</operator><name pos:start="983:49" pos:end="983:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="985:13" pos:end="985:34"><expr pos:start="985:13" pos:end="985:33"><name pos:start="985:13" pos:end="985:31"><name pos:start="985:13" pos:end="985:27">gen_op_ld_T0_A0</name><index pos:start="985:28" pos:end="985:31">[<expr pos:start="985:29" pos:end="985:30"><name pos:start="985:29" pos:end="985:30">ot</name></expr>]</index></name><operator pos:start="985:32" pos:end="985:32">(</operator><operator pos:start="985:33" pos:end="985:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="987:13" pos:end="987:46"><expr pos:start="987:13" pos:end="987:45"><name pos:start="987:13" pos:end="987:43"><name pos:start="987:13" pos:end="987:39">gen_op_cmpxchg_T0_T1_EAX_cc</name><index pos:start="987:40" pos:end="987:43">[<expr pos:start="987:41" pos:end="987:42"><name pos:start="987:41" pos:end="987:42">ot</name></expr>]</index></name><operator pos:start="987:44" pos:end="987:44">(</operator><operator pos:start="987:45" pos:end="987:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="989:13" pos:end="989:34"><expr pos:start="989:13" pos:end="989:33"><name pos:start="989:13" pos:end="989:31"><name pos:start="989:13" pos:end="989:27">gen_op_st_T0_A0</name><index pos:start="989:28" pos:end="989:31">[<expr pos:start="989:29" pos:end="989:30"><name pos:start="989:29" pos:end="989:30">ot</name></expr>]</index></name><operator pos:start="989:32" pos:end="989:32">(</operator><operator pos:start="989:33" pos:end="989:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="993:9" pos:end="993:35"><expr pos:start="993:9" pos:end="993:34"><name pos:start="993:9" pos:end="993:16"><name pos:start="993:9" pos:end="993:9">s</name><operator pos:start="993:10" pos:end="993:11">-&gt;</operator><name pos:start="993:12" pos:end="993:16">cc_op</name></name> <operator pos:start="993:18" pos:end="993:18">=</operator> <name pos:start="993:20" pos:end="993:29">CC_OP_SUBB</name> <operator pos:start="993:31" pos:end="993:31">+</operator> <name pos:start="993:33" pos:end="993:34">ot</name></expr>;</expr_stmt>

        <break pos:start="995:9" pos:end="995:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="999:9" pos:end="999:36">/**************************/</comment>

        <comment type="block" pos:start="1001:9" pos:end="1001:22">/* push/pop */</comment>

    <case pos:start="1003:5" pos:end="1003:23">case <expr pos:start="1003:10" pos:end="1003:22"><literal type="number" pos:start="1003:10" pos:end="1003:13">0x50</literal> <operator pos:start="1003:15" pos:end="1003:17">...</operator> <literal type="number" pos:start="1003:19" pos:end="1003:22">0x57</literal></expr>:</case> <comment type="block" pos:start="1003:25" pos:end="1003:34">/* push */</comment>

        <expr_stmt pos:start="1005:9" pos:end="1005:47"><expr pos:start="1005:9" pos:end="1005:46"><name pos:start="1005:9" pos:end="1005:44"><name pos:start="1005:9" pos:end="1005:25">gen_op_mov_TN_reg</name><index pos:start="1005:26" pos:end="1005:34">[<expr pos:start="1005:27" pos:end="1005:33"><name pos:start="1005:27" pos:end="1005:33">OT_LONG</name></expr>]</index><index pos:start="1005:35" pos:end="1005:37">[<expr pos:start="1005:36" pos:end="1005:36"><literal type="number" pos:start="1005:36" pos:end="1005:36">0</literal></expr>]</index><index pos:start="1005:38" pos:end="1005:44">[<expr pos:start="1005:39" pos:end="1005:43"><name pos:start="1005:39" pos:end="1005:39">b</name> <operator pos:start="1005:41" pos:end="1005:41">&amp;</operator> <literal type="number" pos:start="1005:43" pos:end="1005:43">7</literal></expr>]</index></name><operator pos:start="1005:45" pos:end="1005:45">(</operator><operator pos:start="1005:46" pos:end="1005:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1007:9" pos:end="1007:23"><expr pos:start="1007:9" pos:end="1007:22"><call pos:start="1007:9" pos:end="1007:22"><name pos:start="1007:9" pos:end="1007:19">gen_push_T0</name><argument_list pos:start="1007:20" pos:end="1007:22">(<argument pos:start="1007:21" pos:end="1007:21"><expr pos:start="1007:21" pos:end="1007:21"><name pos:start="1007:21" pos:end="1007:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1009:9" pos:end="1009:14">break;</break>

    <case pos:start="1011:5" pos:end="1011:23">case <expr pos:start="1011:10" pos:end="1011:22"><literal type="number" pos:start="1011:10" pos:end="1011:13">0x58</literal> <operator pos:start="1011:15" pos:end="1011:17">...</operator> <literal type="number" pos:start="1011:19" pos:end="1011:22">0x5f</literal></expr>:</case> <comment type="block" pos:start="1011:25" pos:end="1011:33">/* pop */</comment>

        <expr_stmt pos:start="1013:9" pos:end="1013:39"><expr pos:start="1013:9" pos:end="1013:38"><name pos:start="1013:9" pos:end="1013:10">ot</name> <operator pos:start="1013:12" pos:end="1013:12">=</operator> <ternary pos:start="1013:14" pos:end="1013:38"><condition pos:start="1013:14" pos:end="1013:20"><expr pos:start="1013:14" pos:end="1013:18"><name pos:start="1013:14" pos:end="1013:18">dflag</name></expr> ?</condition><then pos:start="1013:22" pos:end="1013:28"> <expr pos:start="1013:22" pos:end="1013:28"><name pos:start="1013:22" pos:end="1013:28">OT_LONG</name></expr> </then><else pos:start="1013:30" pos:end="1013:38">: <expr pos:start="1013:32" pos:end="1013:38"><name pos:start="1013:32" pos:end="1013:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1015:9" pos:end="1015:22"><expr pos:start="1015:9" pos:end="1015:21"><call pos:start="1015:9" pos:end="1015:21"><name pos:start="1015:9" pos:end="1015:18">gen_pop_T0</name><argument_list pos:start="1015:19" pos:end="1015:21">(<argument pos:start="1015:20" pos:end="1015:20"><expr pos:start="1015:20" pos:end="1015:20"><name pos:start="1015:20" pos:end="1015:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1017:9" pos:end="1017:39"><expr pos:start="1017:9" pos:end="1017:38"><name pos:start="1017:9" pos:end="1017:36"><name pos:start="1017:9" pos:end="1017:25">gen_op_mov_reg_T0</name><index pos:start="1017:26" pos:end="1017:29">[<expr pos:start="1017:27" pos:end="1017:28"><name pos:start="1017:27" pos:end="1017:28">ot</name></expr>]</index><index pos:start="1017:30" pos:end="1017:36">[<expr pos:start="1017:31" pos:end="1017:35"><name pos:start="1017:31" pos:end="1017:31">b</name> <operator pos:start="1017:33" pos:end="1017:33">&amp;</operator> <literal type="number" pos:start="1017:35" pos:end="1017:35">7</literal></expr>]</index></name><operator pos:start="1017:37" pos:end="1017:37">(</operator><operator pos:start="1017:38" pos:end="1017:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1019:9" pos:end="1019:26"><expr pos:start="1019:9" pos:end="1019:25"><call pos:start="1019:9" pos:end="1019:25"><name pos:start="1019:9" pos:end="1019:22">gen_pop_update</name><argument_list pos:start="1019:23" pos:end="1019:25">(<argument pos:start="1019:24" pos:end="1019:24"><expr pos:start="1019:24" pos:end="1019:24"><name pos:start="1019:24" pos:end="1019:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1021:9" pos:end="1021:14">break;</break>

    <case pos:start="1023:5" pos:end="1023:14">case <expr pos:start="1023:10" pos:end="1023:13"><literal type="number" pos:start="1023:10" pos:end="1023:13">0x60</literal></expr>:</case> <comment type="block" pos:start="1023:16" pos:end="1023:26">/* pusha */</comment>

        <expr_stmt pos:start="1025:9" pos:end="1025:21"><expr pos:start="1025:9" pos:end="1025:20"><call pos:start="1025:9" pos:end="1025:20"><name pos:start="1025:9" pos:end="1025:17">gen_pusha</name><argument_list pos:start="1025:18" pos:end="1025:20">(<argument pos:start="1025:19" pos:end="1025:19"><expr pos:start="1025:19" pos:end="1025:19"><name pos:start="1025:19" pos:end="1025:19">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1027:9" pos:end="1027:14">break;</break>

    <case pos:start="1029:5" pos:end="1029:14">case <expr pos:start="1029:10" pos:end="1029:13"><literal type="number" pos:start="1029:10" pos:end="1029:13">0x61</literal></expr>:</case> <comment type="block" pos:start="1029:16" pos:end="1029:25">/* popa */</comment>

        <expr_stmt pos:start="1031:9" pos:end="1031:20"><expr pos:start="1031:9" pos:end="1031:19"><call pos:start="1031:9" pos:end="1031:19"><name pos:start="1031:9" pos:end="1031:16">gen_popa</name><argument_list pos:start="1031:17" pos:end="1031:19">(<argument pos:start="1031:18" pos:end="1031:18"><expr pos:start="1031:18" pos:end="1031:18"><name pos:start="1031:18" pos:end="1031:18">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1033:9" pos:end="1033:14">break;</break>

    <case pos:start="1035:5" pos:end="1035:14">case <expr pos:start="1035:10" pos:end="1035:13"><literal type="number" pos:start="1035:10" pos:end="1035:13">0x68</literal></expr>:</case> <comment type="block" pos:start="1035:16" pos:end="1035:28">/* push Iv */</comment>

    <case pos:start="1037:5" pos:end="1037:14">case <expr pos:start="1037:10" pos:end="1037:13"><literal type="number" pos:start="1037:10" pos:end="1037:13">0x6a</literal></expr>:</case>

        <expr_stmt pos:start="1039:9" pos:end="1039:39"><expr pos:start="1039:9" pos:end="1039:38"><name pos:start="1039:9" pos:end="1039:10">ot</name> <operator pos:start="1039:12" pos:end="1039:12">=</operator> <ternary pos:start="1039:14" pos:end="1039:38"><condition pos:start="1039:14" pos:end="1039:20"><expr pos:start="1039:14" pos:end="1039:18"><name pos:start="1039:14" pos:end="1039:18">dflag</name></expr> ?</condition><then pos:start="1039:22" pos:end="1039:28"> <expr pos:start="1039:22" pos:end="1039:28"><name pos:start="1039:22" pos:end="1039:28">OT_LONG</name></expr> </then><else pos:start="1039:30" pos:end="1039:38">: <expr pos:start="1039:32" pos:end="1039:38"><name pos:start="1039:32" pos:end="1039:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <if_stmt pos:start="1041:9" pos:end="1047:47"><if pos:start="1041:9" pos:end="1043:34">if <condition pos:start="1041:12" pos:end="1041:22">(<expr pos:start="1041:13" pos:end="1041:21"><name pos:start="1041:13" pos:end="1041:13">b</name> <operator pos:start="1041:15" pos:end="1041:16">==</operator> <literal type="number" pos:start="1041:18" pos:end="1041:21">0x68</literal></expr>)</condition><block type="pseudo" pos:start="1043:13" pos:end="1043:34"><block_content pos:start="1043:13" pos:end="1043:34">

            <expr_stmt pos:start="1043:13" pos:end="1043:34"><expr pos:start="1043:13" pos:end="1043:33"><name pos:start="1043:13" pos:end="1043:15">val</name> <operator pos:start="1043:17" pos:end="1043:17">=</operator> <call pos:start="1043:19" pos:end="1043:33"><name pos:start="1043:19" pos:end="1043:26">insn_get</name><argument_list pos:start="1043:27" pos:end="1043:33">(<argument pos:start="1043:28" pos:end="1043:28"><expr pos:start="1043:28" pos:end="1043:28"><name pos:start="1043:28" pos:end="1043:28">s</name></expr></argument>, <argument pos:start="1043:31" pos:end="1043:32"><expr pos:start="1043:31" pos:end="1043:32"><name pos:start="1043:31" pos:end="1043:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1045:9" pos:end="1047:47">else<block type="pseudo" pos:start="1047:13" pos:end="1047:47"><block_content pos:start="1047:13" pos:end="1047:47">

            <expr_stmt pos:start="1047:13" pos:end="1047:47"><expr pos:start="1047:13" pos:end="1047:46"><name pos:start="1047:13" pos:end="1047:15">val</name> <operator pos:start="1047:17" pos:end="1047:17">=</operator> <operator pos:start="1047:19" pos:end="1047:19">(</operator><name pos:start="1047:20" pos:end="1047:25">int8_t</name><operator pos:start="1047:26" pos:end="1047:26">)</operator><call pos:start="1047:27" pos:end="1047:46"><name pos:start="1047:27" pos:end="1047:34">insn_get</name><argument_list pos:start="1047:35" pos:end="1047:46">(<argument pos:start="1047:36" pos:end="1047:36"><expr pos:start="1047:36" pos:end="1047:36"><name pos:start="1047:36" pos:end="1047:36">s</name></expr></argument>, <argument pos:start="1047:39" pos:end="1047:45"><expr pos:start="1047:39" pos:end="1047:45"><name pos:start="1047:39" pos:end="1047:45">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1049:9" pos:end="1049:31"><expr pos:start="1049:9" pos:end="1049:30"><call pos:start="1049:9" pos:end="1049:30"><name pos:start="1049:9" pos:end="1049:25">gen_op_movl_T0_im</name><argument_list pos:start="1049:26" pos:end="1049:30">(<argument pos:start="1049:27" pos:end="1049:29"><expr pos:start="1049:27" pos:end="1049:29"><name pos:start="1049:27" pos:end="1049:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1051:9" pos:end="1051:23"><expr pos:start="1051:9" pos:end="1051:22"><call pos:start="1051:9" pos:end="1051:22"><name pos:start="1051:9" pos:end="1051:19">gen_push_T0</name><argument_list pos:start="1051:20" pos:end="1051:22">(<argument pos:start="1051:21" pos:end="1051:21"><expr pos:start="1051:21" pos:end="1051:21"><name pos:start="1051:21" pos:end="1051:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1053:9" pos:end="1053:14">break;</break>

    <case pos:start="1055:5" pos:end="1055:14">case <expr pos:start="1055:10" pos:end="1055:13"><literal type="number" pos:start="1055:10" pos:end="1055:13">0x8f</literal></expr>:</case> <comment type="block" pos:start="1055:16" pos:end="1055:27">/* pop Ev */</comment>

        <expr_stmt pos:start="1057:9" pos:end="1057:39"><expr pos:start="1057:9" pos:end="1057:38"><name pos:start="1057:9" pos:end="1057:10">ot</name> <operator pos:start="1057:12" pos:end="1057:12">=</operator> <ternary pos:start="1057:14" pos:end="1057:38"><condition pos:start="1057:14" pos:end="1057:20"><expr pos:start="1057:14" pos:end="1057:18"><name pos:start="1057:14" pos:end="1057:18">dflag</name></expr> ?</condition><then pos:start="1057:22" pos:end="1057:28"> <expr pos:start="1057:22" pos:end="1057:28"><name pos:start="1057:22" pos:end="1057:28">OT_LONG</name></expr> </then><else pos:start="1057:30" pos:end="1057:38">: <expr pos:start="1057:32" pos:end="1057:38"><name pos:start="1057:32" pos:end="1057:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1059:9" pos:end="1059:30"><expr pos:start="1059:9" pos:end="1059:29"><name pos:start="1059:9" pos:end="1059:13">modrm</name> <operator pos:start="1059:15" pos:end="1059:15">=</operator> <call pos:start="1059:17" pos:end="1059:29"><name pos:start="1059:17" pos:end="1059:20">ldub</name><argument_list pos:start="1059:21" pos:end="1059:29">(<argument pos:start="1059:22" pos:end="1059:28"><expr pos:start="1059:22" pos:end="1059:28"><name pos:start="1059:22" pos:end="1059:26"><name pos:start="1059:22" pos:end="1059:22">s</name><operator pos:start="1059:23" pos:end="1059:24">-&gt;</operator><name pos:start="1059:25" pos:end="1059:26">pc</name></name><operator pos:start="1059:27" pos:end="1059:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1061:9" pos:end="1061:22"><expr pos:start="1061:9" pos:end="1061:21"><call pos:start="1061:9" pos:end="1061:21"><name pos:start="1061:9" pos:end="1061:18">gen_pop_T0</name><argument_list pos:start="1061:19" pos:end="1061:21">(<argument pos:start="1061:20" pos:end="1061:20"><expr pos:start="1061:20" pos:end="1061:20"><name pos:start="1061:20" pos:end="1061:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1063:9" pos:end="1063:49"><expr pos:start="1063:9" pos:end="1063:48"><call pos:start="1063:9" pos:end="1063:48"><name pos:start="1063:9" pos:end="1063:22">gen_ldst_modrm</name><argument_list pos:start="1063:23" pos:end="1063:48">(<argument pos:start="1063:24" pos:end="1063:24"><expr pos:start="1063:24" pos:end="1063:24"><name pos:start="1063:24" pos:end="1063:24">s</name></expr></argument>, <argument pos:start="1063:27" pos:end="1063:31"><expr pos:start="1063:27" pos:end="1063:31"><name pos:start="1063:27" pos:end="1063:31">modrm</name></expr></argument>, <argument pos:start="1063:34" pos:end="1063:35"><expr pos:start="1063:34" pos:end="1063:35"><name pos:start="1063:34" pos:end="1063:35">ot</name></expr></argument>, <argument pos:start="1063:38" pos:end="1063:44"><expr pos:start="1063:38" pos:end="1063:44"><name pos:start="1063:38" pos:end="1063:44">OR_TMP0</name></expr></argument>, <argument pos:start="1063:47" pos:end="1063:47"><expr pos:start="1063:47" pos:end="1063:47"><literal type="number" pos:start="1063:47" pos:end="1063:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1065:9" pos:end="1065:26"><expr pos:start="1065:9" pos:end="1065:25"><call pos:start="1065:9" pos:end="1065:25"><name pos:start="1065:9" pos:end="1065:22">gen_pop_update</name><argument_list pos:start="1065:23" pos:end="1065:25">(<argument pos:start="1065:24" pos:end="1065:24"><expr pos:start="1065:24" pos:end="1065:24"><name pos:start="1065:24" pos:end="1065:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1067:9" pos:end="1067:14">break;</break>

    <case pos:start="1069:5" pos:end="1069:14">case <expr pos:start="1069:10" pos:end="1069:13"><literal type="number" pos:start="1069:10" pos:end="1069:13">0xc8</literal></expr>:</case> <comment type="block" pos:start="1069:16" pos:end="1069:26">/* enter */</comment>

        <block pos:start="1071:9" pos:end="1083:9">{<block_content pos:start="1073:13" pos:end="1081:37">

            <decl_stmt pos:start="1073:13" pos:end="1073:22"><decl pos:start="1073:13" pos:end="1073:21"><type pos:start="1073:13" pos:end="1073:15"><name pos:start="1073:13" pos:end="1073:15">int</name></type> <name pos:start="1073:17" pos:end="1073:21">level</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1075:13" pos:end="1075:30"><expr pos:start="1075:13" pos:end="1075:29"><name pos:start="1075:13" pos:end="1075:15">val</name> <operator pos:start="1075:17" pos:end="1075:17">=</operator> <call pos:start="1075:19" pos:end="1075:29"><name pos:start="1075:19" pos:end="1075:22">lduw</name><argument_list pos:start="1075:23" pos:end="1075:29">(<argument pos:start="1075:24" pos:end="1075:28"><expr pos:start="1075:24" pos:end="1075:28"><name pos:start="1075:24" pos:end="1075:28"><name pos:start="1075:24" pos:end="1075:24">s</name><operator pos:start="1075:25" pos:end="1075:26">-&gt;</operator><name pos:start="1075:27" pos:end="1075:28">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1077:23"><expr pos:start="1077:13" pos:end="1077:22"><name pos:start="1077:13" pos:end="1077:17"><name pos:start="1077:13" pos:end="1077:13">s</name><operator pos:start="1077:14" pos:end="1077:15">-&gt;</operator><name pos:start="1077:16" pos:end="1077:17">pc</name></name> <operator pos:start="1077:19" pos:end="1077:20">+=</operator> <literal type="number" pos:start="1077:22" pos:end="1077:22">2</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1079:13" pos:end="1079:34"><expr pos:start="1079:13" pos:end="1079:33"><name pos:start="1079:13" pos:end="1079:17">level</name> <operator pos:start="1079:19" pos:end="1079:19">=</operator> <call pos:start="1079:21" pos:end="1079:33"><name pos:start="1079:21" pos:end="1079:24">ldub</name><argument_list pos:start="1079:25" pos:end="1079:33">(<argument pos:start="1079:26" pos:end="1079:32"><expr pos:start="1079:26" pos:end="1079:32"><name pos:start="1079:26" pos:end="1079:30"><name pos:start="1079:26" pos:end="1079:26">s</name><operator pos:start="1079:27" pos:end="1079:28">-&gt;</operator><name pos:start="1079:29" pos:end="1079:30">pc</name></name><operator pos:start="1079:31" pos:end="1079:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1081:13" pos:end="1081:37"><expr pos:start="1081:13" pos:end="1081:36"><call pos:start="1081:13" pos:end="1081:36"><name pos:start="1081:13" pos:end="1081:21">gen_enter</name><argument_list pos:start="1081:22" pos:end="1081:36">(<argument pos:start="1081:23" pos:end="1081:23"><expr pos:start="1081:23" pos:end="1081:23"><name pos:start="1081:23" pos:end="1081:23">s</name></expr></argument>, <argument pos:start="1081:26" pos:end="1081:28"><expr pos:start="1081:26" pos:end="1081:28"><name pos:start="1081:26" pos:end="1081:28">val</name></expr></argument>, <argument pos:start="1081:31" pos:end="1081:35"><expr pos:start="1081:31" pos:end="1081:35"><name pos:start="1081:31" pos:end="1081:35">level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="1085:9" pos:end="1085:14">break;</break>

    <case pos:start="1087:5" pos:end="1087:14">case <expr pos:start="1087:10" pos:end="1087:13"><literal type="number" pos:start="1087:10" pos:end="1087:13">0xc9</literal></expr>:</case> <comment type="block" pos:start="1087:16" pos:end="1087:26">/* leave */</comment>

        <comment type="block" pos:start="1089:9" pos:end="1089:83">/* XXX: exception not precise (ESP is update before potential exception) */</comment>

        <if_stmt pos:start="1091:9" pos:end="1103:9"><if pos:start="1091:9" pos:end="1097:9">if <condition pos:start="1091:12" pos:end="1091:20">(<expr pos:start="1091:13" pos:end="1091:19"><name pos:start="1091:13" pos:end="1091:19"><name pos:start="1091:13" pos:end="1091:13">s</name><operator pos:start="1091:14" pos:end="1091:15">-&gt;</operator><name pos:start="1091:16" pos:end="1091:19">ss32</name></name></expr>)</condition> <block pos:start="1091:22" pos:end="1097:9">{<block_content pos:start="1093:13" pos:end="1095:48">

            <expr_stmt pos:start="1093:13" pos:end="1093:51"><expr pos:start="1093:13" pos:end="1093:50"><name pos:start="1093:13" pos:end="1093:48"><name pos:start="1093:13" pos:end="1093:29">gen_op_mov_TN_reg</name><index pos:start="1093:30" pos:end="1093:38">[<expr pos:start="1093:31" pos:end="1093:37"><name pos:start="1093:31" pos:end="1093:37">OT_LONG</name></expr>]</index><index pos:start="1093:39" pos:end="1093:41">[<expr pos:start="1093:40" pos:end="1093:40"><literal type="number" pos:start="1093:40" pos:end="1093:40">0</literal></expr>]</index><index pos:start="1093:42" pos:end="1093:48">[<expr pos:start="1093:43" pos:end="1093:47"><name pos:start="1093:43" pos:end="1093:47">R_EBP</name></expr>]</index></name><operator pos:start="1093:49" pos:end="1093:49">(</operator><operator pos:start="1093:50" pos:end="1093:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1095:13" pos:end="1095:48"><expr pos:start="1095:13" pos:end="1095:47"><name pos:start="1095:13" pos:end="1095:45"><name pos:start="1095:13" pos:end="1095:29">gen_op_mov_reg_T0</name><index pos:start="1095:30" pos:end="1095:38">[<expr pos:start="1095:31" pos:end="1095:37"><name pos:start="1095:31" pos:end="1095:37">OT_LONG</name></expr>]</index><index pos:start="1095:39" pos:end="1095:45">[<expr pos:start="1095:40" pos:end="1095:44"><name pos:start="1095:40" pos:end="1095:44">R_ESP</name></expr>]</index></name><operator pos:start="1095:46" pos:end="1095:46">(</operator><operator pos:start="1095:47" pos:end="1095:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1097:11" pos:end="1103:9">else <block pos:start="1097:16" pos:end="1103:9">{<block_content pos:start="1099:13" pos:end="1101:48">

            <expr_stmt pos:start="1099:13" pos:end="1099:51"><expr pos:start="1099:13" pos:end="1099:50"><name pos:start="1099:13" pos:end="1099:48"><name pos:start="1099:13" pos:end="1099:29">gen_op_mov_TN_reg</name><index pos:start="1099:30" pos:end="1099:38">[<expr pos:start="1099:31" pos:end="1099:37"><name pos:start="1099:31" pos:end="1099:37">OT_WORD</name></expr>]</index><index pos:start="1099:39" pos:end="1099:41">[<expr pos:start="1099:40" pos:end="1099:40"><literal type="number" pos:start="1099:40" pos:end="1099:40">0</literal></expr>]</index><index pos:start="1099:42" pos:end="1099:48">[<expr pos:start="1099:43" pos:end="1099:47"><name pos:start="1099:43" pos:end="1099:47">R_EBP</name></expr>]</index></name><operator pos:start="1099:49" pos:end="1099:49">(</operator><operator pos:start="1099:50" pos:end="1099:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1101:13" pos:end="1101:48"><expr pos:start="1101:13" pos:end="1101:47"><name pos:start="1101:13" pos:end="1101:45"><name pos:start="1101:13" pos:end="1101:29">gen_op_mov_reg_T0</name><index pos:start="1101:30" pos:end="1101:38">[<expr pos:start="1101:31" pos:end="1101:37"><name pos:start="1101:31" pos:end="1101:37">OT_WORD</name></expr>]</index><index pos:start="1101:39" pos:end="1101:45">[<expr pos:start="1101:40" pos:end="1101:44"><name pos:start="1101:40" pos:end="1101:44">R_ESP</name></expr>]</index></name><operator pos:start="1101:46" pos:end="1101:46">(</operator><operator pos:start="1101:47" pos:end="1101:47">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1105:9" pos:end="1105:22"><expr pos:start="1105:9" pos:end="1105:21"><call pos:start="1105:9" pos:end="1105:21"><name pos:start="1105:9" pos:end="1105:18">gen_pop_T0</name><argument_list pos:start="1105:19" pos:end="1105:21">(<argument pos:start="1105:20" pos:end="1105:20"><expr pos:start="1105:20" pos:end="1105:20"><name pos:start="1105:20" pos:end="1105:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1107:9" pos:end="1107:39"><expr pos:start="1107:9" pos:end="1107:38"><name pos:start="1107:9" pos:end="1107:10">ot</name> <operator pos:start="1107:12" pos:end="1107:12">=</operator> <ternary pos:start="1107:14" pos:end="1107:38"><condition pos:start="1107:14" pos:end="1107:20"><expr pos:start="1107:14" pos:end="1107:18"><name pos:start="1107:14" pos:end="1107:18">dflag</name></expr> ?</condition><then pos:start="1107:22" pos:end="1107:28"> <expr pos:start="1107:22" pos:end="1107:28"><name pos:start="1107:22" pos:end="1107:28">OT_LONG</name></expr> </then><else pos:start="1107:30" pos:end="1107:38">: <expr pos:start="1107:32" pos:end="1107:38"><name pos:start="1107:32" pos:end="1107:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1109:9" pos:end="1109:39"><expr pos:start="1109:9" pos:end="1109:38"><name pos:start="1109:9" pos:end="1109:36"><name pos:start="1109:9" pos:end="1109:25">gen_op_mov_reg_T0</name><index pos:start="1109:26" pos:end="1109:29">[<expr pos:start="1109:27" pos:end="1109:28"><name pos:start="1109:27" pos:end="1109:28">ot</name></expr>]</index><index pos:start="1109:30" pos:end="1109:36">[<expr pos:start="1109:31" pos:end="1109:35"><name pos:start="1109:31" pos:end="1109:35">R_EBP</name></expr>]</index></name><operator pos:start="1109:37" pos:end="1109:37">(</operator><operator pos:start="1109:38" pos:end="1109:38">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1111:9" pos:end="1111:26"><expr pos:start="1111:9" pos:end="1111:25"><call pos:start="1111:9" pos:end="1111:25"><name pos:start="1111:9" pos:end="1111:22">gen_pop_update</name><argument_list pos:start="1111:23" pos:end="1111:25">(<argument pos:start="1111:24" pos:end="1111:24"><expr pos:start="1111:24" pos:end="1111:24"><name pos:start="1111:24" pos:end="1111:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1113:9" pos:end="1113:14">break;</break>

    <case pos:start="1115:5" pos:end="1115:14">case <expr pos:start="1115:10" pos:end="1115:13"><literal type="number" pos:start="1115:10" pos:end="1115:13">0x06</literal></expr>:</case> <comment type="block" pos:start="1115:16" pos:end="1115:28">/* push es */</comment>

    <case pos:start="1117:5" pos:end="1117:14">case <expr pos:start="1117:10" pos:end="1117:13"><literal type="number" pos:start="1117:10" pos:end="1117:13">0x0e</literal></expr>:</case> <comment type="block" pos:start="1117:16" pos:end="1117:28">/* push cs */</comment>

    <case pos:start="1119:5" pos:end="1119:14">case <expr pos:start="1119:10" pos:end="1119:13"><literal type="number" pos:start="1119:10" pos:end="1119:13">0x16</literal></expr>:</case> <comment type="block" pos:start="1119:16" pos:end="1119:28">/* push ss */</comment>

    <case pos:start="1121:5" pos:end="1121:14">case <expr pos:start="1121:10" pos:end="1121:13"><literal type="number" pos:start="1121:10" pos:end="1121:13">0x1e</literal></expr>:</case> <comment type="block" pos:start="1121:16" pos:end="1121:28">/* push ds */</comment>

        <expr_stmt pos:start="1123:9" pos:end="1123:35"><expr pos:start="1123:9" pos:end="1123:34"><call pos:start="1123:9" pos:end="1123:34"><name pos:start="1123:9" pos:end="1123:26">gen_op_movl_T0_seg</name><argument_list pos:start="1123:27" pos:end="1123:34">(<argument pos:start="1123:28" pos:end="1123:33"><expr pos:start="1123:28" pos:end="1123:33"><name pos:start="1123:28" pos:end="1123:28">b</name> <operator pos:start="1123:30" pos:end="1123:31">&gt;&gt;</operator> <literal type="number" pos:start="1123:33" pos:end="1123:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1125:9" pos:end="1125:23"><expr pos:start="1125:9" pos:end="1125:22"><call pos:start="1125:9" pos:end="1125:22"><name pos:start="1125:9" pos:end="1125:19">gen_push_T0</name><argument_list pos:start="1125:20" pos:end="1125:22">(<argument pos:start="1125:21" pos:end="1125:21"><expr pos:start="1125:21" pos:end="1125:21"><name pos:start="1125:21" pos:end="1125:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1127:9" pos:end="1127:14">break;</break>

    <case pos:start="1129:5" pos:end="1129:15">case <expr pos:start="1129:10" pos:end="1129:14"><literal type="number" pos:start="1129:10" pos:end="1129:14">0x1a0</literal></expr>:</case> <comment type="block" pos:start="1129:17" pos:end="1129:29">/* push fs */</comment>

    <case pos:start="1131:5" pos:end="1131:15">case <expr pos:start="1131:10" pos:end="1131:14"><literal type="number" pos:start="1131:10" pos:end="1131:14">0x1a8</literal></expr>:</case> <comment type="block" pos:start="1131:17" pos:end="1131:29">/* push gs */</comment>

        <expr_stmt pos:start="1133:9" pos:end="1133:50"><expr pos:start="1133:9" pos:end="1133:49"><call pos:start="1133:9" pos:end="1133:49"><name pos:start="1133:9" pos:end="1133:26">gen_op_movl_T0_seg</name><argument_list pos:start="1133:27" pos:end="1133:49">(<argument pos:start="1133:28" pos:end="1133:48"><expr pos:start="1133:28" pos:end="1133:48"><operator pos:start="1133:28" pos:end="1133:28">(</operator><operator pos:start="1133:29" pos:end="1133:29">(</operator><name pos:start="1133:30" pos:end="1133:30">b</name> <operator pos:start="1133:32" pos:end="1133:33">&gt;&gt;</operator> <literal type="number" pos:start="1133:35" pos:end="1133:35">3</literal><operator pos:start="1133:36" pos:end="1133:36">)</operator> <operator pos:start="1133:38" pos:end="1133:38">&amp;</operator> <literal type="number" pos:start="1133:40" pos:end="1133:40">7</literal><operator pos:start="1133:41" pos:end="1133:41">)</operator> <operator pos:start="1133:43" pos:end="1133:43">+</operator> <name pos:start="1133:45" pos:end="1133:48">R_FS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1135:9" pos:end="1135:23"><expr pos:start="1135:9" pos:end="1135:22"><call pos:start="1135:9" pos:end="1135:22"><name pos:start="1135:9" pos:end="1135:19">gen_push_T0</name><argument_list pos:start="1135:20" pos:end="1135:22">(<argument pos:start="1135:21" pos:end="1135:21"><expr pos:start="1135:21" pos:end="1135:21"><name pos:start="1135:21" pos:end="1135:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1137:9" pos:end="1137:14">break;</break>

    <case pos:start="1139:5" pos:end="1139:14">case <expr pos:start="1139:10" pos:end="1139:13"><literal type="number" pos:start="1139:10" pos:end="1139:13">0x07</literal></expr>:</case> <comment type="block" pos:start="1139:16" pos:end="1139:27">/* pop es */</comment>

    <case pos:start="1141:5" pos:end="1141:14">case <expr pos:start="1141:10" pos:end="1141:13"><literal type="number" pos:start="1141:10" pos:end="1141:13">0x17</literal></expr>:</case> <comment type="block" pos:start="1141:16" pos:end="1141:27">/* pop ss */</comment>

    <case pos:start="1143:5" pos:end="1143:14">case <expr pos:start="1143:10" pos:end="1143:13"><literal type="number" pos:start="1143:10" pos:end="1143:13">0x1f</literal></expr>:</case> <comment type="block" pos:start="1143:16" pos:end="1143:27">/* pop ds */</comment>

        <expr_stmt pos:start="1145:9" pos:end="1145:22"><expr pos:start="1145:9" pos:end="1145:21"><call pos:start="1145:9" pos:end="1145:21"><name pos:start="1145:9" pos:end="1145:18">gen_pop_T0</name><argument_list pos:start="1145:19" pos:end="1145:21">(<argument pos:start="1145:20" pos:end="1145:20"><expr pos:start="1145:20" pos:end="1145:20"><name pos:start="1145:20" pos:end="1145:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1147:9" pos:end="1147:35"><expr pos:start="1147:9" pos:end="1147:34"><call pos:start="1147:9" pos:end="1147:34"><name pos:start="1147:9" pos:end="1147:23">gen_movl_seg_T0</name><argument_list pos:start="1147:24" pos:end="1147:34">(<argument pos:start="1147:25" pos:end="1147:25"><expr pos:start="1147:25" pos:end="1147:25"><name pos:start="1147:25" pos:end="1147:25">s</name></expr></argument>, <argument pos:start="1147:28" pos:end="1147:33"><expr pos:start="1147:28" pos:end="1147:33"><name pos:start="1147:28" pos:end="1147:28">b</name> <operator pos:start="1147:30" pos:end="1147:31">&gt;&gt;</operator> <literal type="number" pos:start="1147:33" pos:end="1147:33">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1149:9" pos:end="1149:26"><expr pos:start="1149:9" pos:end="1149:25"><call pos:start="1149:9" pos:end="1149:25"><name pos:start="1149:9" pos:end="1149:22">gen_pop_update</name><argument_list pos:start="1149:23" pos:end="1149:25">(<argument pos:start="1149:24" pos:end="1149:24"><expr pos:start="1149:24" pos:end="1149:24"><name pos:start="1149:24" pos:end="1149:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1151:9" pos:end="1151:14">break;</break>

    <case pos:start="1153:5" pos:end="1153:15">case <expr pos:start="1153:10" pos:end="1153:14"><literal type="number" pos:start="1153:10" pos:end="1153:14">0x1a1</literal></expr>:</case> <comment type="block" pos:start="1153:17" pos:end="1153:28">/* pop fs */</comment>

    <case pos:start="1155:5" pos:end="1155:15">case <expr pos:start="1155:10" pos:end="1155:14"><literal type="number" pos:start="1155:10" pos:end="1155:14">0x1a9</literal></expr>:</case> <comment type="block" pos:start="1155:17" pos:end="1155:28">/* pop gs */</comment>

        <expr_stmt pos:start="1157:9" pos:end="1157:22"><expr pos:start="1157:9" pos:end="1157:21"><call pos:start="1157:9" pos:end="1157:21"><name pos:start="1157:9" pos:end="1157:18">gen_pop_T0</name><argument_list pos:start="1157:19" pos:end="1157:21">(<argument pos:start="1157:20" pos:end="1157:20"><expr pos:start="1157:20" pos:end="1157:20"><name pos:start="1157:20" pos:end="1157:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1159:9" pos:end="1159:50"><expr pos:start="1159:9" pos:end="1159:49"><call pos:start="1159:9" pos:end="1159:49"><name pos:start="1159:9" pos:end="1159:23">gen_movl_seg_T0</name><argument_list pos:start="1159:24" pos:end="1159:49">(<argument pos:start="1159:25" pos:end="1159:25"><expr pos:start="1159:25" pos:end="1159:25"><name pos:start="1159:25" pos:end="1159:25">s</name></expr></argument>, <argument pos:start="1159:28" pos:end="1159:48"><expr pos:start="1159:28" pos:end="1159:48"><operator pos:start="1159:28" pos:end="1159:28">(</operator><operator pos:start="1159:29" pos:end="1159:29">(</operator><name pos:start="1159:30" pos:end="1159:30">b</name> <operator pos:start="1159:32" pos:end="1159:33">&gt;&gt;</operator> <literal type="number" pos:start="1159:35" pos:end="1159:35">3</literal><operator pos:start="1159:36" pos:end="1159:36">)</operator> <operator pos:start="1159:38" pos:end="1159:38">&amp;</operator> <literal type="number" pos:start="1159:40" pos:end="1159:40">7</literal><operator pos:start="1159:41" pos:end="1159:41">)</operator> <operator pos:start="1159:43" pos:end="1159:43">+</operator> <name pos:start="1159:45" pos:end="1159:48">R_FS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1161:9" pos:end="1161:26"><expr pos:start="1161:9" pos:end="1161:25"><call pos:start="1161:9" pos:end="1161:25"><name pos:start="1161:9" pos:end="1161:22">gen_pop_update</name><argument_list pos:start="1161:23" pos:end="1161:25">(<argument pos:start="1161:24" pos:end="1161:24"><expr pos:start="1161:24" pos:end="1161:24"><name pos:start="1161:24" pos:end="1161:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1163:9" pos:end="1163:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1167:9" pos:end="1167:36">/**************************/</comment>

        <comment type="block" pos:start="1169:9" pos:end="1169:17">/* mov */</comment>

    <case pos:start="1171:5" pos:end="1171:14">case <expr pos:start="1171:10" pos:end="1171:13"><literal type="number" pos:start="1171:10" pos:end="1171:13">0x88</literal></expr>:</case>

    <case pos:start="1173:5" pos:end="1173:14">case <expr pos:start="1173:10" pos:end="1173:13"><literal type="number" pos:start="1173:10" pos:end="1173:13">0x89</literal></expr>:</case> <comment type="block" pos:start="1173:16" pos:end="1173:31">/* mov Gv, Ev */</comment>

        <if_stmt pos:start="1175:9" pos:end="1181:43"><if pos:start="1175:9" pos:end="1177:25">if <condition pos:start="1175:12" pos:end="1175:25">(<expr pos:start="1175:13" pos:end="1175:24"><operator pos:start="1175:13" pos:end="1175:13">(</operator><name pos:start="1175:14" pos:end="1175:14">b</name> <operator pos:start="1175:16" pos:end="1175:16">&amp;</operator> <literal type="number" pos:start="1175:18" pos:end="1175:18">1</literal><operator pos:start="1175:19" pos:end="1175:19">)</operator> <operator pos:start="1175:21" pos:end="1175:22">==</operator> <literal type="number" pos:start="1175:24" pos:end="1175:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1177:13" pos:end="1177:25"><block_content pos:start="1177:13" pos:end="1177:25">

            <expr_stmt pos:start="1177:13" pos:end="1177:25"><expr pos:start="1177:13" pos:end="1177:24"><name pos:start="1177:13" pos:end="1177:14">ot</name> <operator pos:start="1177:16" pos:end="1177:16">=</operator> <name pos:start="1177:18" pos:end="1177:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1179:9" pos:end="1181:43">else<block type="pseudo" pos:start="1181:13" pos:end="1181:43"><block_content pos:start="1181:13" pos:end="1181:43">

            <expr_stmt pos:start="1181:13" pos:end="1181:43"><expr pos:start="1181:13" pos:end="1181:42"><name pos:start="1181:13" pos:end="1181:14">ot</name> <operator pos:start="1181:16" pos:end="1181:16">=</operator> <ternary pos:start="1181:18" pos:end="1181:42"><condition pos:start="1181:18" pos:end="1181:24"><expr pos:start="1181:18" pos:end="1181:22"><name pos:start="1181:18" pos:end="1181:22">dflag</name></expr> ?</condition><then pos:start="1181:26" pos:end="1181:32"> <expr pos:start="1181:26" pos:end="1181:32"><name pos:start="1181:26" pos:end="1181:32">OT_LONG</name></expr> </then><else pos:start="1181:34" pos:end="1181:42">: <expr pos:start="1181:36" pos:end="1181:42"><name pos:start="1181:36" pos:end="1181:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1183:9" pos:end="1183:30"><expr pos:start="1183:9" pos:end="1183:29"><name pos:start="1183:9" pos:end="1183:13">modrm</name> <operator pos:start="1183:15" pos:end="1183:15">=</operator> <call pos:start="1183:17" pos:end="1183:29"><name pos:start="1183:17" pos:end="1183:20">ldub</name><argument_list pos:start="1183:21" pos:end="1183:29">(<argument pos:start="1183:22" pos:end="1183:28"><expr pos:start="1183:22" pos:end="1183:28"><name pos:start="1183:22" pos:end="1183:26"><name pos:start="1183:22" pos:end="1183:22">s</name><operator pos:start="1183:23" pos:end="1183:24">-&gt;</operator><name pos:start="1183:25" pos:end="1183:26">pc</name></name><operator pos:start="1183:27" pos:end="1183:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1185:9" pos:end="1185:31"><expr pos:start="1185:9" pos:end="1185:30"><name pos:start="1185:9" pos:end="1185:11">reg</name> <operator pos:start="1185:13" pos:end="1185:13">=</operator> <operator pos:start="1185:15" pos:end="1185:15">(</operator><name pos:start="1185:16" pos:end="1185:20">modrm</name> <operator pos:start="1185:22" pos:end="1185:23">&gt;&gt;</operator> <literal type="number" pos:start="1185:25" pos:end="1185:25">3</literal><operator pos:start="1185:26" pos:end="1185:26">)</operator> <operator pos:start="1185:28" pos:end="1185:28">&amp;</operator> <literal type="number" pos:start="1185:30" pos:end="1185:30">7</literal></expr>;</expr_stmt>

        

        <comment type="block" pos:start="1189:9" pos:end="1189:38">/* generate a generic store */</comment>

        <expr_stmt pos:start="1191:9" pos:end="1191:54"><expr pos:start="1191:9" pos:end="1191:53"><call pos:start="1191:9" pos:end="1191:53"><name pos:start="1191:9" pos:end="1191:22">gen_ldst_modrm</name><argument_list pos:start="1191:23" pos:end="1191:53">(<argument pos:start="1191:24" pos:end="1191:24"><expr pos:start="1191:24" pos:end="1191:24"><name pos:start="1191:24" pos:end="1191:24">s</name></expr></argument>, <argument pos:start="1191:27" pos:end="1191:31"><expr pos:start="1191:27" pos:end="1191:31"><name pos:start="1191:27" pos:end="1191:31">modrm</name></expr></argument>, <argument pos:start="1191:34" pos:end="1191:35"><expr pos:start="1191:34" pos:end="1191:35"><name pos:start="1191:34" pos:end="1191:35">ot</name></expr></argument>, <argument pos:start="1191:38" pos:end="1191:49"><expr pos:start="1191:38" pos:end="1191:49"><name pos:start="1191:38" pos:end="1191:43">OR_EAX</name> <operator pos:start="1191:45" pos:end="1191:45">+</operator> <name pos:start="1191:47" pos:end="1191:49">reg</name></expr></argument>, <argument pos:start="1191:52" pos:end="1191:52"><expr pos:start="1191:52" pos:end="1191:52"><literal type="number" pos:start="1191:52" pos:end="1191:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1193:9" pos:end="1193:14">break;</break>

    <case pos:start="1195:5" pos:end="1195:14">case <expr pos:start="1195:10" pos:end="1195:13"><literal type="number" pos:start="1195:10" pos:end="1195:13">0xc6</literal></expr>:</case>

    <case pos:start="1197:5" pos:end="1197:14">case <expr pos:start="1197:10" pos:end="1197:13"><literal type="number" pos:start="1197:10" pos:end="1197:13">0xc7</literal></expr>:</case> <comment type="block" pos:start="1197:16" pos:end="1197:31">/* mov Ev, Iv */</comment>

        <if_stmt pos:start="1199:9" pos:end="1205:43"><if pos:start="1199:9" pos:end="1201:25">if <condition pos:start="1199:12" pos:end="1199:25">(<expr pos:start="1199:13" pos:end="1199:24"><operator pos:start="1199:13" pos:end="1199:13">(</operator><name pos:start="1199:14" pos:end="1199:14">b</name> <operator pos:start="1199:16" pos:end="1199:16">&amp;</operator> <literal type="number" pos:start="1199:18" pos:end="1199:18">1</literal><operator pos:start="1199:19" pos:end="1199:19">)</operator> <operator pos:start="1199:21" pos:end="1199:22">==</operator> <literal type="number" pos:start="1199:24" pos:end="1199:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1201:13" pos:end="1201:25"><block_content pos:start="1201:13" pos:end="1201:25">

            <expr_stmt pos:start="1201:13" pos:end="1201:25"><expr pos:start="1201:13" pos:end="1201:24"><name pos:start="1201:13" pos:end="1201:14">ot</name> <operator pos:start="1201:16" pos:end="1201:16">=</operator> <name pos:start="1201:18" pos:end="1201:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1203:9" pos:end="1205:43">else<block type="pseudo" pos:start="1205:13" pos:end="1205:43"><block_content pos:start="1205:13" pos:end="1205:43">

            <expr_stmt pos:start="1205:13" pos:end="1205:43"><expr pos:start="1205:13" pos:end="1205:42"><name pos:start="1205:13" pos:end="1205:14">ot</name> <operator pos:start="1205:16" pos:end="1205:16">=</operator> <ternary pos:start="1205:18" pos:end="1205:42"><condition pos:start="1205:18" pos:end="1205:24"><expr pos:start="1205:18" pos:end="1205:22"><name pos:start="1205:18" pos:end="1205:22">dflag</name></expr> ?</condition><then pos:start="1205:26" pos:end="1205:32"> <expr pos:start="1205:26" pos:end="1205:32"><name pos:start="1205:26" pos:end="1205:32">OT_LONG</name></expr> </then><else pos:start="1205:34" pos:end="1205:42">: <expr pos:start="1205:36" pos:end="1205:42"><name pos:start="1205:36" pos:end="1205:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1207:9" pos:end="1207:30"><expr pos:start="1207:9" pos:end="1207:29"><name pos:start="1207:9" pos:end="1207:13">modrm</name> <operator pos:start="1207:15" pos:end="1207:15">=</operator> <call pos:start="1207:17" pos:end="1207:29"><name pos:start="1207:17" pos:end="1207:20">ldub</name><argument_list pos:start="1207:21" pos:end="1207:29">(<argument pos:start="1207:22" pos:end="1207:28"><expr pos:start="1207:22" pos:end="1207:28"><name pos:start="1207:22" pos:end="1207:26"><name pos:start="1207:22" pos:end="1207:22">s</name><operator pos:start="1207:23" pos:end="1207:24">-&gt;</operator><name pos:start="1207:25" pos:end="1207:26">pc</name></name><operator pos:start="1207:27" pos:end="1207:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1209:9" pos:end="1209:31"><expr pos:start="1209:9" pos:end="1209:30"><name pos:start="1209:9" pos:end="1209:11">mod</name> <operator pos:start="1209:13" pos:end="1209:13">=</operator> <operator pos:start="1209:15" pos:end="1209:15">(</operator><name pos:start="1209:16" pos:end="1209:20">modrm</name> <operator pos:start="1209:22" pos:end="1209:23">&gt;&gt;</operator> <literal type="number" pos:start="1209:25" pos:end="1209:25">6</literal><operator pos:start="1209:26" pos:end="1209:26">)</operator> <operator pos:start="1209:28" pos:end="1209:28">&amp;</operator> <literal type="number" pos:start="1209:30" pos:end="1209:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1211:9" pos:end="1213:61"><if pos:start="1211:9" pos:end="1213:61">if <condition pos:start="1211:12" pos:end="1211:21">(<expr pos:start="1211:13" pos:end="1211:20"><name pos:start="1211:13" pos:end="1211:15">mod</name> <operator pos:start="1211:17" pos:end="1211:18">!=</operator> <literal type="number" pos:start="1211:20" pos:end="1211:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1213:13" pos:end="1213:61"><block_content pos:start="1213:13" pos:end="1213:61">

            <expr_stmt pos:start="1213:13" pos:end="1213:61"><expr pos:start="1213:13" pos:end="1213:60"><call pos:start="1213:13" pos:end="1213:60"><name pos:start="1213:13" pos:end="1213:25">gen_lea_modrm</name><argument_list pos:start="1213:26" pos:end="1213:60">(<argument pos:start="1213:27" pos:end="1213:27"><expr pos:start="1213:27" pos:end="1213:27"><name pos:start="1213:27" pos:end="1213:27">s</name></expr></argument>, <argument pos:start="1213:30" pos:end="1213:34"><expr pos:start="1213:30" pos:end="1213:34"><name pos:start="1213:30" pos:end="1213:34">modrm</name></expr></argument>, <argument pos:start="1213:37" pos:end="1213:45"><expr pos:start="1213:37" pos:end="1213:45"><operator pos:start="1213:37" pos:end="1213:37">&amp;</operator><name pos:start="1213:38" pos:end="1213:45">reg_addr</name></expr></argument>, <argument pos:start="1213:48" pos:end="1213:59"><expr pos:start="1213:48" pos:end="1213:59"><operator pos:start="1213:48" pos:end="1213:48">&amp;</operator><name pos:start="1213:49" pos:end="1213:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1215:9" pos:end="1215:30"><expr pos:start="1215:9" pos:end="1215:29"><name pos:start="1215:9" pos:end="1215:11">val</name> <operator pos:start="1215:13" pos:end="1215:13">=</operator> <call pos:start="1215:15" pos:end="1215:29"><name pos:start="1215:15" pos:end="1215:22">insn_get</name><argument_list pos:start="1215:23" pos:end="1215:29">(<argument pos:start="1215:24" pos:end="1215:24"><expr pos:start="1215:24" pos:end="1215:24"><name pos:start="1215:24" pos:end="1215:24">s</name></expr></argument>, <argument pos:start="1215:27" pos:end="1215:28"><expr pos:start="1215:27" pos:end="1215:28"><name pos:start="1215:27" pos:end="1215:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1217:9" pos:end="1217:31"><expr pos:start="1217:9" pos:end="1217:30"><call pos:start="1217:9" pos:end="1217:30"><name pos:start="1217:9" pos:end="1217:25">gen_op_movl_T0_im</name><argument_list pos:start="1217:26" pos:end="1217:30">(<argument pos:start="1217:27" pos:end="1217:29"><expr pos:start="1217:27" pos:end="1217:29"><name pos:start="1217:27" pos:end="1217:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1219:9" pos:end="1225:47"><if pos:start="1219:9" pos:end="1221:34">if <condition pos:start="1219:12" pos:end="1219:21">(<expr pos:start="1219:13" pos:end="1219:20"><name pos:start="1219:13" pos:end="1219:15">mod</name> <operator pos:start="1219:17" pos:end="1219:18">!=</operator> <literal type="number" pos:start="1219:20" pos:end="1219:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1221:13" pos:end="1221:34"><block_content pos:start="1221:13" pos:end="1221:34">

            <expr_stmt pos:start="1221:13" pos:end="1221:34"><expr pos:start="1221:13" pos:end="1221:33"><name pos:start="1221:13" pos:end="1221:31"><name pos:start="1221:13" pos:end="1221:27">gen_op_st_T0_A0</name><index pos:start="1221:28" pos:end="1221:31">[<expr pos:start="1221:29" pos:end="1221:30"><name pos:start="1221:29" pos:end="1221:30">ot</name></expr>]</index></name><operator pos:start="1221:32" pos:end="1221:32">(</operator><operator pos:start="1221:33" pos:end="1221:33">)</operator></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1223:9" pos:end="1225:47">else<block type="pseudo" pos:start="1225:13" pos:end="1225:47"><block_content pos:start="1225:13" pos:end="1225:47">

            <expr_stmt pos:start="1225:13" pos:end="1225:47"><expr pos:start="1225:13" pos:end="1225:46"><name pos:start="1225:13" pos:end="1225:44"><name pos:start="1225:13" pos:end="1225:29">gen_op_mov_reg_T0</name><index pos:start="1225:30" pos:end="1225:33">[<expr pos:start="1225:31" pos:end="1225:32"><name pos:start="1225:31" pos:end="1225:32">ot</name></expr>]</index><index pos:start="1225:34" pos:end="1225:44">[<expr pos:start="1225:35" pos:end="1225:43"><name pos:start="1225:35" pos:end="1225:39">modrm</name> <operator pos:start="1225:41" pos:end="1225:41">&amp;</operator> <literal type="number" pos:start="1225:43" pos:end="1225:43">7</literal></expr>]</index></name><operator pos:start="1225:45" pos:end="1225:45">(</operator><operator pos:start="1225:46" pos:end="1225:46">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <break pos:start="1227:9" pos:end="1227:14">break;</break>

    <case pos:start="1229:5" pos:end="1229:14">case <expr pos:start="1229:10" pos:end="1229:13"><literal type="number" pos:start="1229:10" pos:end="1229:13">0x8a</literal></expr>:</case>

    <case pos:start="1231:5" pos:end="1231:14">case <expr pos:start="1231:10" pos:end="1231:13"><literal type="number" pos:start="1231:10" pos:end="1231:13">0x8b</literal></expr>:</case> <comment type="block" pos:start="1231:16" pos:end="1231:31">/* mov Ev, Gv */</comment>

        <if_stmt pos:start="1233:9" pos:end="1239:43"><if pos:start="1233:9" pos:end="1235:25">if <condition pos:start="1233:12" pos:end="1233:25">(<expr pos:start="1233:13" pos:end="1233:24"><operator pos:start="1233:13" pos:end="1233:13">(</operator><name pos:start="1233:14" pos:end="1233:14">b</name> <operator pos:start="1233:16" pos:end="1233:16">&amp;</operator> <literal type="number" pos:start="1233:18" pos:end="1233:18">1</literal><operator pos:start="1233:19" pos:end="1233:19">)</operator> <operator pos:start="1233:21" pos:end="1233:22">==</operator> <literal type="number" pos:start="1233:24" pos:end="1233:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1235:13" pos:end="1235:25"><block_content pos:start="1235:13" pos:end="1235:25">

            <expr_stmt pos:start="1235:13" pos:end="1235:25"><expr pos:start="1235:13" pos:end="1235:24"><name pos:start="1235:13" pos:end="1235:14">ot</name> <operator pos:start="1235:16" pos:end="1235:16">=</operator> <name pos:start="1235:18" pos:end="1235:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1237:9" pos:end="1239:43">else<block type="pseudo" pos:start="1239:13" pos:end="1239:43"><block_content pos:start="1239:13" pos:end="1239:43">

            <expr_stmt pos:start="1239:13" pos:end="1239:43"><expr pos:start="1239:13" pos:end="1239:42"><name pos:start="1239:13" pos:end="1239:14">ot</name> <operator pos:start="1239:16" pos:end="1239:16">=</operator> <ternary pos:start="1239:18" pos:end="1239:42"><condition pos:start="1239:18" pos:end="1239:24"><expr pos:start="1239:18" pos:end="1239:22"><name pos:start="1239:18" pos:end="1239:22">dflag</name></expr> ?</condition><then pos:start="1239:26" pos:end="1239:32"> <expr pos:start="1239:26" pos:end="1239:32"><name pos:start="1239:26" pos:end="1239:32">OT_LONG</name></expr> </then><else pos:start="1239:34" pos:end="1239:42">: <expr pos:start="1239:36" pos:end="1239:42"><name pos:start="1239:36" pos:end="1239:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1241:9" pos:end="1241:30"><expr pos:start="1241:9" pos:end="1241:29"><name pos:start="1241:9" pos:end="1241:13">modrm</name> <operator pos:start="1241:15" pos:end="1241:15">=</operator> <call pos:start="1241:17" pos:end="1241:29"><name pos:start="1241:17" pos:end="1241:20">ldub</name><argument_list pos:start="1241:21" pos:end="1241:29">(<argument pos:start="1241:22" pos:end="1241:28"><expr pos:start="1241:22" pos:end="1241:28"><name pos:start="1241:22" pos:end="1241:26"><name pos:start="1241:22" pos:end="1241:22">s</name><operator pos:start="1241:23" pos:end="1241:24">-&gt;</operator><name pos:start="1241:25" pos:end="1241:26">pc</name></name><operator pos:start="1241:27" pos:end="1241:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1243:9" pos:end="1243:31"><expr pos:start="1243:9" pos:end="1243:30"><name pos:start="1243:9" pos:end="1243:11">reg</name> <operator pos:start="1243:13" pos:end="1243:13">=</operator> <operator pos:start="1243:15" pos:end="1243:15">(</operator><name pos:start="1243:16" pos:end="1243:20">modrm</name> <operator pos:start="1243:22" pos:end="1243:23">&gt;&gt;</operator> <literal type="number" pos:start="1243:25" pos:end="1243:25">3</literal><operator pos:start="1243:26" pos:end="1243:26">)</operator> <operator pos:start="1243:28" pos:end="1243:28">&amp;</operator> <literal type="number" pos:start="1243:30" pos:end="1243:30">7</literal></expr>;</expr_stmt>

        

        <expr_stmt pos:start="1247:9" pos:end="1247:49"><expr pos:start="1247:9" pos:end="1247:48"><call pos:start="1247:9" pos:end="1247:48"><name pos:start="1247:9" pos:end="1247:22">gen_ldst_modrm</name><argument_list pos:start="1247:23" pos:end="1247:48">(<argument pos:start="1247:24" pos:end="1247:24"><expr pos:start="1247:24" pos:end="1247:24"><name pos:start="1247:24" pos:end="1247:24">s</name></expr></argument>, <argument pos:start="1247:27" pos:end="1247:31"><expr pos:start="1247:27" pos:end="1247:31"><name pos:start="1247:27" pos:end="1247:31">modrm</name></expr></argument>, <argument pos:start="1247:34" pos:end="1247:35"><expr pos:start="1247:34" pos:end="1247:35"><name pos:start="1247:34" pos:end="1247:35">ot</name></expr></argument>, <argument pos:start="1247:38" pos:end="1247:44"><expr pos:start="1247:38" pos:end="1247:44"><name pos:start="1247:38" pos:end="1247:44">OR_TMP0</name></expr></argument>, <argument pos:start="1247:47" pos:end="1247:47"><expr pos:start="1247:47" pos:end="1247:47"><literal type="number" pos:start="1247:47" pos:end="1247:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1249:9" pos:end="1249:37"><expr pos:start="1249:9" pos:end="1249:36"><name pos:start="1249:9" pos:end="1249:34"><name pos:start="1249:9" pos:end="1249:25">gen_op_mov_reg_T0</name><index pos:start="1249:26" pos:end="1249:29">[<expr pos:start="1249:27" pos:end="1249:28"><name pos:start="1249:27" pos:end="1249:28">ot</name></expr>]</index><index pos:start="1249:30" pos:end="1249:34">[<expr pos:start="1249:31" pos:end="1249:33"><name pos:start="1249:31" pos:end="1249:33">reg</name></expr>]</index></name><operator pos:start="1249:35" pos:end="1249:35">(</operator><operator pos:start="1249:36" pos:end="1249:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1251:9" pos:end="1251:14">break;</break>

    <case pos:start="1253:5" pos:end="1253:14">case <expr pos:start="1253:10" pos:end="1253:13"><literal type="number" pos:start="1253:10" pos:end="1253:13">0x8e</literal></expr>:</case> <comment type="block" pos:start="1253:16" pos:end="1253:32">/* mov seg, Gv */</comment>

        <expr_stmt pos:start="1255:9" pos:end="1255:39"><expr pos:start="1255:9" pos:end="1255:38"><name pos:start="1255:9" pos:end="1255:10">ot</name> <operator pos:start="1255:12" pos:end="1255:12">=</operator> <ternary pos:start="1255:14" pos:end="1255:38"><condition pos:start="1255:14" pos:end="1255:20"><expr pos:start="1255:14" pos:end="1255:18"><name pos:start="1255:14" pos:end="1255:18">dflag</name></expr> ?</condition><then pos:start="1255:22" pos:end="1255:28"> <expr pos:start="1255:22" pos:end="1255:28"><name pos:start="1255:22" pos:end="1255:28">OT_LONG</name></expr> </then><else pos:start="1255:30" pos:end="1255:38">: <expr pos:start="1255:32" pos:end="1255:38"><name pos:start="1255:32" pos:end="1255:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1257:9" pos:end="1257:30"><expr pos:start="1257:9" pos:end="1257:29"><name pos:start="1257:9" pos:end="1257:13">modrm</name> <operator pos:start="1257:15" pos:end="1257:15">=</operator> <call pos:start="1257:17" pos:end="1257:29"><name pos:start="1257:17" pos:end="1257:20">ldub</name><argument_list pos:start="1257:21" pos:end="1257:29">(<argument pos:start="1257:22" pos:end="1257:28"><expr pos:start="1257:22" pos:end="1257:28"><name pos:start="1257:22" pos:end="1257:26"><name pos:start="1257:22" pos:end="1257:22">s</name><operator pos:start="1257:23" pos:end="1257:24">-&gt;</operator><name pos:start="1257:25" pos:end="1257:26">pc</name></name><operator pos:start="1257:27" pos:end="1257:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1259:9" pos:end="1259:31"><expr pos:start="1259:9" pos:end="1259:30"><name pos:start="1259:9" pos:end="1259:11">reg</name> <operator pos:start="1259:13" pos:end="1259:13">=</operator> <operator pos:start="1259:15" pos:end="1259:15">(</operator><name pos:start="1259:16" pos:end="1259:20">modrm</name> <operator pos:start="1259:22" pos:end="1259:23">&gt;&gt;</operator> <literal type="number" pos:start="1259:25" pos:end="1259:25">3</literal><operator pos:start="1259:26" pos:end="1259:26">)</operator> <operator pos:start="1259:28" pos:end="1259:28">&amp;</operator> <literal type="number" pos:start="1259:30" pos:end="1259:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1261:9" pos:end="1261:49"><expr pos:start="1261:9" pos:end="1261:48"><call pos:start="1261:9" pos:end="1261:48"><name pos:start="1261:9" pos:end="1261:22">gen_ldst_modrm</name><argument_list pos:start="1261:23" pos:end="1261:48">(<argument pos:start="1261:24" pos:end="1261:24"><expr pos:start="1261:24" pos:end="1261:24"><name pos:start="1261:24" pos:end="1261:24">s</name></expr></argument>, <argument pos:start="1261:27" pos:end="1261:31"><expr pos:start="1261:27" pos:end="1261:31"><name pos:start="1261:27" pos:end="1261:31">modrm</name></expr></argument>, <argument pos:start="1261:34" pos:end="1261:35"><expr pos:start="1261:34" pos:end="1261:35"><name pos:start="1261:34" pos:end="1261:35">ot</name></expr></argument>, <argument pos:start="1261:38" pos:end="1261:44"><expr pos:start="1261:38" pos:end="1261:44"><name pos:start="1261:38" pos:end="1261:44">OR_TMP0</name></expr></argument>, <argument pos:start="1261:47" pos:end="1261:47"><expr pos:start="1261:47" pos:end="1261:47"><literal type="number" pos:start="1261:47" pos:end="1261:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1263:9" pos:end="1265:28"><if pos:start="1263:9" pos:end="1265:28">if <condition pos:start="1263:12" pos:end="1263:36">(<expr pos:start="1263:13" pos:end="1263:35"><name pos:start="1263:13" pos:end="1263:15">reg</name> <operator pos:start="1263:17" pos:end="1263:18">&gt;=</operator> <literal type="number" pos:start="1263:20" pos:end="1263:20">6</literal> <operator pos:start="1263:22" pos:end="1263:23">||</operator> <name pos:start="1263:25" pos:end="1263:27">reg</name> <operator pos:start="1263:29" pos:end="1263:30">==</operator> <name pos:start="1263:32" pos:end="1263:35">R_CS</name></expr>)</condition><block type="pseudo" pos:start="1265:13" pos:end="1265:28"><block_content pos:start="1265:13" pos:end="1265:28">

            <goto pos:start="1265:13" pos:end="1265:28">goto <name pos:start="1265:18" pos:end="1265:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1267:9" pos:end="1267:32"><expr pos:start="1267:9" pos:end="1267:31"><call pos:start="1267:9" pos:end="1267:31"><name pos:start="1267:9" pos:end="1267:23">gen_movl_seg_T0</name><argument_list pos:start="1267:24" pos:end="1267:31">(<argument pos:start="1267:25" pos:end="1267:25"><expr pos:start="1267:25" pos:end="1267:25"><name pos:start="1267:25" pos:end="1267:25">s</name></expr></argument>, <argument pos:start="1267:28" pos:end="1267:30"><expr pos:start="1267:28" pos:end="1267:30"><name pos:start="1267:28" pos:end="1267:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1269:9" pos:end="1269:14">break;</break>

    <case pos:start="1271:5" pos:end="1271:14">case <expr pos:start="1271:10" pos:end="1271:13"><literal type="number" pos:start="1271:10" pos:end="1271:13">0x8c</literal></expr>:</case> <comment type="block" pos:start="1271:16" pos:end="1271:32">/* mov Gv, seg */</comment>

        <expr_stmt pos:start="1273:9" pos:end="1273:39"><expr pos:start="1273:9" pos:end="1273:38"><name pos:start="1273:9" pos:end="1273:10">ot</name> <operator pos:start="1273:12" pos:end="1273:12">=</operator> <ternary pos:start="1273:14" pos:end="1273:38"><condition pos:start="1273:14" pos:end="1273:20"><expr pos:start="1273:14" pos:end="1273:18"><name pos:start="1273:14" pos:end="1273:18">dflag</name></expr> ?</condition><then pos:start="1273:22" pos:end="1273:28"> <expr pos:start="1273:22" pos:end="1273:28"><name pos:start="1273:22" pos:end="1273:28">OT_LONG</name></expr> </then><else pos:start="1273:30" pos:end="1273:38">: <expr pos:start="1273:32" pos:end="1273:38"><name pos:start="1273:32" pos:end="1273:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1275:9" pos:end="1275:30"><expr pos:start="1275:9" pos:end="1275:29"><name pos:start="1275:9" pos:end="1275:13">modrm</name> <operator pos:start="1275:15" pos:end="1275:15">=</operator> <call pos:start="1275:17" pos:end="1275:29"><name pos:start="1275:17" pos:end="1275:20">ldub</name><argument_list pos:start="1275:21" pos:end="1275:29">(<argument pos:start="1275:22" pos:end="1275:28"><expr pos:start="1275:22" pos:end="1275:28"><name pos:start="1275:22" pos:end="1275:26"><name pos:start="1275:22" pos:end="1275:22">s</name><operator pos:start="1275:23" pos:end="1275:24">-&gt;</operator><name pos:start="1275:25" pos:end="1275:26">pc</name></name><operator pos:start="1275:27" pos:end="1275:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1277:9" pos:end="1277:31"><expr pos:start="1277:9" pos:end="1277:30"><name pos:start="1277:9" pos:end="1277:11">reg</name> <operator pos:start="1277:13" pos:end="1277:13">=</operator> <operator pos:start="1277:15" pos:end="1277:15">(</operator><name pos:start="1277:16" pos:end="1277:20">modrm</name> <operator pos:start="1277:22" pos:end="1277:23">&gt;&gt;</operator> <literal type="number" pos:start="1277:25" pos:end="1277:25">3</literal><operator pos:start="1277:26" pos:end="1277:26">)</operator> <operator pos:start="1277:28" pos:end="1277:28">&amp;</operator> <literal type="number" pos:start="1277:30" pos:end="1277:30">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1279:9" pos:end="1281:28"><if pos:start="1279:9" pos:end="1281:28">if <condition pos:start="1279:12" pos:end="1279:21">(<expr pos:start="1279:13" pos:end="1279:20"><name pos:start="1279:13" pos:end="1279:15">reg</name> <operator pos:start="1279:17" pos:end="1279:18">&gt;=</operator> <literal type="number" pos:start="1279:20" pos:end="1279:20">6</literal></expr>)</condition><block type="pseudo" pos:start="1281:13" pos:end="1281:28"><block_content pos:start="1281:13" pos:end="1281:28">

            <goto pos:start="1281:13" pos:end="1281:28">goto <name pos:start="1281:18" pos:end="1281:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1283:9" pos:end="1283:32"><expr pos:start="1283:9" pos:end="1283:31"><call pos:start="1283:9" pos:end="1283:31"><name pos:start="1283:9" pos:end="1283:26">gen_op_movl_T0_seg</name><argument_list pos:start="1283:27" pos:end="1283:31">(<argument pos:start="1283:28" pos:end="1283:30"><expr pos:start="1283:28" pos:end="1283:30"><name pos:start="1283:28" pos:end="1283:30">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1285:9" pos:end="1285:49"><expr pos:start="1285:9" pos:end="1285:48"><call pos:start="1285:9" pos:end="1285:48"><name pos:start="1285:9" pos:end="1285:22">gen_ldst_modrm</name><argument_list pos:start="1285:23" pos:end="1285:48">(<argument pos:start="1285:24" pos:end="1285:24"><expr pos:start="1285:24" pos:end="1285:24"><name pos:start="1285:24" pos:end="1285:24">s</name></expr></argument>, <argument pos:start="1285:27" pos:end="1285:31"><expr pos:start="1285:27" pos:end="1285:31"><name pos:start="1285:27" pos:end="1285:31">modrm</name></expr></argument>, <argument pos:start="1285:34" pos:end="1285:35"><expr pos:start="1285:34" pos:end="1285:35"><name pos:start="1285:34" pos:end="1285:35">ot</name></expr></argument>, <argument pos:start="1285:38" pos:end="1285:44"><expr pos:start="1285:38" pos:end="1285:44"><name pos:start="1285:38" pos:end="1285:44">OR_TMP0</name></expr></argument>, <argument pos:start="1285:47" pos:end="1285:47"><expr pos:start="1285:47" pos:end="1285:47"><literal type="number" pos:start="1285:47" pos:end="1285:47">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="1287:9" pos:end="1287:14">break;</break>



    <case pos:start="1291:5" pos:end="1291:15">case <expr pos:start="1291:10" pos:end="1291:14"><literal type="number" pos:start="1291:10" pos:end="1291:14">0x1b6</literal></expr>:</case> <comment type="block" pos:start="1291:17" pos:end="1291:35">/* movzbS Gv, Eb */</comment>

    <case pos:start="1293:5" pos:end="1293:15">case <expr pos:start="1293:10" pos:end="1293:14"><literal type="number" pos:start="1293:10" pos:end="1293:14">0x1b7</literal></expr>:</case> <comment type="block" pos:start="1293:17" pos:end="1293:35">/* movzwS Gv, Eb */</comment>

    <case pos:start="1295:5" pos:end="1295:15">case <expr pos:start="1295:10" pos:end="1295:14"><literal type="number" pos:start="1295:10" pos:end="1295:14">0x1be</literal></expr>:</case> <comment type="block" pos:start="1295:17" pos:end="1295:35">/* movsbS Gv, Eb */</comment>

    <case pos:start="1297:5" pos:end="1297:15">case <expr pos:start="1297:10" pos:end="1297:14"><literal type="number" pos:start="1297:10" pos:end="1297:14">0x1bf</literal></expr>:</case> <comment type="block" pos:start="1297:17" pos:end="1297:35">/* movswS Gv, Eb */</comment>

        <block pos:start="1299:9" pos:end="1375:9">{<block_content pos:start="1301:13" pos:end="1373:13">

            <decl_stmt pos:start="1301:13" pos:end="1301:21"><decl pos:start="1301:13" pos:end="1301:20"><type pos:start="1301:13" pos:end="1301:15"><name pos:start="1301:13" pos:end="1301:15">int</name></type> <name pos:start="1301:17" pos:end="1301:20">d_ot</name></decl>;</decl_stmt>

            <comment type="block" pos:start="1303:13" pos:end="1303:49">/* d_ot is the size of destination */</comment>

            <expr_stmt pos:start="1305:13" pos:end="1305:35"><expr pos:start="1305:13" pos:end="1305:34"><name pos:start="1305:13" pos:end="1305:16">d_ot</name> <operator pos:start="1305:18" pos:end="1305:18">=</operator> <name pos:start="1305:20" pos:end="1305:24">dflag</name> <operator pos:start="1305:26" pos:end="1305:26">+</operator> <name pos:start="1305:28" pos:end="1305:34">OT_WORD</name></expr>;</expr_stmt>

            <comment type="block" pos:start="1307:13" pos:end="1307:42">/* ot is the size of source */</comment>

            <expr_stmt pos:start="1309:13" pos:end="1309:35"><expr pos:start="1309:13" pos:end="1309:34"><name pos:start="1309:13" pos:end="1309:14">ot</name> <operator pos:start="1309:16" pos:end="1309:16">=</operator> <operator pos:start="1309:18" pos:end="1309:18">(</operator><name pos:start="1309:19" pos:end="1309:19">b</name> <operator pos:start="1309:21" pos:end="1309:21">&amp;</operator> <literal type="number" pos:start="1309:23" pos:end="1309:23">1</literal><operator pos:start="1309:24" pos:end="1309:24">)</operator> <operator pos:start="1309:26" pos:end="1309:26">+</operator> <name pos:start="1309:28" pos:end="1309:34">OT_BYTE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1311:13" pos:end="1311:34"><expr pos:start="1311:13" pos:end="1311:33"><name pos:start="1311:13" pos:end="1311:17">modrm</name> <operator pos:start="1311:19" pos:end="1311:19">=</operator> <call pos:start="1311:21" pos:end="1311:33"><name pos:start="1311:21" pos:end="1311:24">ldub</name><argument_list pos:start="1311:25" pos:end="1311:33">(<argument pos:start="1311:26" pos:end="1311:32"><expr pos:start="1311:26" pos:end="1311:32"><name pos:start="1311:26" pos:end="1311:30"><name pos:start="1311:26" pos:end="1311:26">s</name><operator pos:start="1311:27" pos:end="1311:28">-&gt;</operator><name pos:start="1311:29" pos:end="1311:30">pc</name></name><operator pos:start="1311:31" pos:end="1311:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1313:13" pos:end="1313:46"><expr pos:start="1313:13" pos:end="1313:45"><name pos:start="1313:13" pos:end="1313:15">reg</name> <operator pos:start="1313:17" pos:end="1313:17">=</operator> <operator pos:start="1313:19" pos:end="1313:19">(</operator><operator pos:start="1313:20" pos:end="1313:20">(</operator><name pos:start="1313:21" pos:end="1313:25">modrm</name> <operator pos:start="1313:27" pos:end="1313:28">&gt;&gt;</operator> <literal type="number" pos:start="1313:30" pos:end="1313:30">3</literal><operator pos:start="1313:31" pos:end="1313:31">)</operator> <operator pos:start="1313:33" pos:end="1313:33">&amp;</operator> <literal type="number" pos:start="1313:35" pos:end="1313:35">7</literal><operator pos:start="1313:36" pos:end="1313:36">)</operator> <operator pos:start="1313:38" pos:end="1313:38">+</operator> <name pos:start="1313:40" pos:end="1313:45">OR_EAX</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1315:13" pos:end="1315:35"><expr pos:start="1315:13" pos:end="1315:34"><name pos:start="1315:13" pos:end="1315:15">mod</name> <operator pos:start="1315:17" pos:end="1315:17">=</operator> <operator pos:start="1315:19" pos:end="1315:19">(</operator><name pos:start="1315:20" pos:end="1315:24">modrm</name> <operator pos:start="1315:26" pos:end="1315:27">&gt;&gt;</operator> <literal type="number" pos:start="1315:29" pos:end="1315:29">6</literal><operator pos:start="1315:30" pos:end="1315:30">)</operator> <operator pos:start="1315:32" pos:end="1315:32">&amp;</operator> <literal type="number" pos:start="1315:34" pos:end="1315:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1317:13" pos:end="1317:27"><expr pos:start="1317:13" pos:end="1317:26"><name pos:start="1317:13" pos:end="1317:14">rm</name> <operator pos:start="1317:16" pos:end="1317:16">=</operator> <name pos:start="1317:18" pos:end="1317:22">modrm</name> <operator pos:start="1317:24" pos:end="1317:24">&amp;</operator> <literal type="number" pos:start="1317:26" pos:end="1317:26">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="1321:13" pos:end="1373:13"><if pos:start="1321:13" pos:end="1357:13">if <condition pos:start="1321:16" pos:end="1321:25">(<expr pos:start="1321:17" pos:end="1321:24"><name pos:start="1321:17" pos:end="1321:19">mod</name> <operator pos:start="1321:21" pos:end="1321:22">==</operator> <literal type="number" pos:start="1321:24" pos:end="1321:24">3</literal></expr>)</condition> <block pos:start="1321:27" pos:end="1357:13">{<block_content pos:start="1323:17" pos:end="1355:47">

                <expr_stmt pos:start="1323:17" pos:end="1323:47"><expr pos:start="1323:17" pos:end="1323:46"><name pos:start="1323:17" pos:end="1323:44"><name pos:start="1323:17" pos:end="1323:33">gen_op_mov_TN_reg</name><index pos:start="1323:34" pos:end="1323:37">[<expr pos:start="1323:35" pos:end="1323:36"><name pos:start="1323:35" pos:end="1323:36">ot</name></expr>]</index><index pos:start="1323:38" pos:end="1323:40">[<expr pos:start="1323:39" pos:end="1323:39"><literal type="number" pos:start="1323:39" pos:end="1323:39">0</literal></expr>]</index><index pos:start="1323:41" pos:end="1323:44">[<expr pos:start="1323:42" pos:end="1323:43"><name pos:start="1323:42" pos:end="1323:43">rm</name></expr>]</index></name><operator pos:start="1323:45" pos:end="1323:45">(</operator><operator pos:start="1323:46" pos:end="1323:46">)</operator></expr>;</expr_stmt>

                <switch pos:start="1325:17" pos:end="1353:17">switch<condition pos:start="1325:23" pos:end="1325:36">(<expr pos:start="1325:24" pos:end="1325:35"><name pos:start="1325:24" pos:end="1325:25">ot</name> <operator pos:start="1325:27" pos:end="1325:27">|</operator> <operator pos:start="1325:29" pos:end="1325:29">(</operator><name pos:start="1325:30" pos:end="1325:30">b</name> <operator pos:start="1325:32" pos:end="1325:32">&amp;</operator> <literal type="number" pos:start="1325:34" pos:end="1325:34">8</literal><operator pos:start="1325:35" pos:end="1325:35">)</operator></expr>)</condition> <block pos:start="1325:38" pos:end="1353:17">{<block_content pos:start="1327:17" pos:end="1351:26">

                <case pos:start="1327:17" pos:end="1327:29">case <expr pos:start="1327:22" pos:end="1327:28"><name pos:start="1327:22" pos:end="1327:28">OT_BYTE</name></expr>:</case>

                    <expr_stmt pos:start="1329:21" pos:end="1329:42"><expr pos:start="1329:21" pos:end="1329:41"><call pos:start="1329:21" pos:end="1329:41"><name pos:start="1329:21" pos:end="1329:39">gen_op_movzbl_T0_T0</name><argument_list pos:start="1329:40" pos:end="1329:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1331:21" pos:end="1331:26">break;</break>

                <case pos:start="1333:17" pos:end="1333:33">case <expr pos:start="1333:22" pos:end="1333:32"><name pos:start="1333:22" pos:end="1333:28">OT_BYTE</name> <operator pos:start="1333:30" pos:end="1333:30">|</operator> <literal type="number" pos:start="1333:32" pos:end="1333:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="1335:21" pos:end="1335:42"><expr pos:start="1335:21" pos:end="1335:41"><call pos:start="1335:21" pos:end="1335:41"><name pos:start="1335:21" pos:end="1335:39">gen_op_movsbl_T0_T0</name><argument_list pos:start="1335:40" pos:end="1335:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1337:21" pos:end="1337:26">break;</break>

                <case pos:start="1339:17" pos:end="1339:29">case <expr pos:start="1339:22" pos:end="1339:28"><name pos:start="1339:22" pos:end="1339:28">OT_WORD</name></expr>:</case>

                    <expr_stmt pos:start="1341:21" pos:end="1341:42"><expr pos:start="1341:21" pos:end="1341:41"><call pos:start="1341:21" pos:end="1341:41"><name pos:start="1341:21" pos:end="1341:39">gen_op_movzwl_T0_T0</name><argument_list pos:start="1341:40" pos:end="1341:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1343:21" pos:end="1343:26">break;</break>

                <default pos:start="1345:17" pos:end="1345:24">default:</default>

                <case pos:start="1347:17" pos:end="1347:33">case <expr pos:start="1347:22" pos:end="1347:32"><name pos:start="1347:22" pos:end="1347:28">OT_WORD</name> <operator pos:start="1347:30" pos:end="1347:30">|</operator> <literal type="number" pos:start="1347:32" pos:end="1347:32">8</literal></expr>:</case>

                    <expr_stmt pos:start="1349:21" pos:end="1349:42"><expr pos:start="1349:21" pos:end="1349:41"><call pos:start="1349:21" pos:end="1349:41"><name pos:start="1349:21" pos:end="1349:39">gen_op_movswl_T0_T0</name><argument_list pos:start="1349:40" pos:end="1349:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="1351:21" pos:end="1351:26">break;</break>

                </block_content>}</block></switch>

                <expr_stmt pos:start="1355:17" pos:end="1355:47"><expr pos:start="1355:17" pos:end="1355:46"><name pos:start="1355:17" pos:end="1355:44"><name pos:start="1355:17" pos:end="1355:33">gen_op_mov_reg_T0</name><index pos:start="1355:34" pos:end="1355:39">[<expr pos:start="1355:35" pos:end="1355:38"><name pos:start="1355:35" pos:end="1355:38">d_ot</name></expr>]</index><index pos:start="1355:40" pos:end="1355:44">[<expr pos:start="1355:41" pos:end="1355:43"><name pos:start="1355:41" pos:end="1355:43">reg</name></expr>]</index></name><operator pos:start="1355:45" pos:end="1355:45">(</operator><operator pos:start="1355:46" pos:end="1355:46">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1357:15" pos:end="1373:13">else <block pos:start="1357:20" pos:end="1373:13">{<block_content pos:start="1359:17" pos:end="1371:47">

                <expr_stmt pos:start="1359:17" pos:end="1359:65"><expr pos:start="1359:17" pos:end="1359:64"><call pos:start="1359:17" pos:end="1359:64"><name pos:start="1359:17" pos:end="1359:29">gen_lea_modrm</name><argument_list pos:start="1359:30" pos:end="1359:64">(<argument pos:start="1359:31" pos:end="1359:31"><expr pos:start="1359:31" pos:end="1359:31"><name pos:start="1359:31" pos:end="1359:31">s</name></expr></argument>, <argument pos:start="1359:34" pos:end="1359:38"><expr pos:start="1359:34" pos:end="1359:38"><name pos:start="1359:34" pos:end="1359:38">modrm</name></expr></argument>, <argument pos:start="1359:41" pos:end="1359:49"><expr pos:start="1359:41" pos:end="1359:49"><operator pos:start="1359:41" pos:end="1359:41">&amp;</operator><name pos:start="1359:42" pos:end="1359:49">reg_addr</name></expr></argument>, <argument pos:start="1359:52" pos:end="1359:63"><expr pos:start="1359:52" pos:end="1359:63"><operator pos:start="1359:52" pos:end="1359:52">&amp;</operator><name pos:start="1359:53" pos:end="1359:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1361:17" pos:end="1369:17"><if pos:start="1361:17" pos:end="1365:17">if <condition pos:start="1361:20" pos:end="1361:26">(<expr pos:start="1361:21" pos:end="1361:25"><name pos:start="1361:21" pos:end="1361:21">b</name> <operator pos:start="1361:23" pos:end="1361:23">&amp;</operator> <literal type="number" pos:start="1361:25" pos:end="1361:25">8</literal></expr>)</condition> <block pos:start="1361:28" pos:end="1365:17">{<block_content pos:start="1363:21" pos:end="1363:43">

                    <expr_stmt pos:start="1363:21" pos:end="1363:43"><expr pos:start="1363:21" pos:end="1363:42"><name pos:start="1363:21" pos:end="1363:40"><name pos:start="1363:21" pos:end="1363:36">gen_op_lds_T0_A0</name><index pos:start="1363:37" pos:end="1363:40">[<expr pos:start="1363:38" pos:end="1363:39"><name pos:start="1363:38" pos:end="1363:39">ot</name></expr>]</index></name><operator pos:start="1363:41" pos:end="1363:41">(</operator><operator pos:start="1363:42" pos:end="1363:42">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="1365:19" pos:end="1369:17">else <block pos:start="1365:24" pos:end="1369:17">{<block_content pos:start="1367:21" pos:end="1367:43">

                    <expr_stmt pos:start="1367:21" pos:end="1367:43"><expr pos:start="1367:21" pos:end="1367:42"><name pos:start="1367:21" pos:end="1367:40"><name pos:start="1367:21" pos:end="1367:36">gen_op_ldu_T0_A0</name><index pos:start="1367:37" pos:end="1367:40">[<expr pos:start="1367:38" pos:end="1367:39"><name pos:start="1367:38" pos:end="1367:39">ot</name></expr>]</index></name><operator pos:start="1367:41" pos:end="1367:41">(</operator><operator pos:start="1367:42" pos:end="1367:42">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="1371:17" pos:end="1371:47"><expr pos:start="1371:17" pos:end="1371:46"><name pos:start="1371:17" pos:end="1371:44"><name pos:start="1371:17" pos:end="1371:33">gen_op_mov_reg_T0</name><index pos:start="1371:34" pos:end="1371:39">[<expr pos:start="1371:35" pos:end="1371:38"><name pos:start="1371:35" pos:end="1371:38">d_ot</name></expr>]</index><index pos:start="1371:40" pos:end="1371:44">[<expr pos:start="1371:41" pos:end="1371:43"><name pos:start="1371:41" pos:end="1371:43">reg</name></expr>]</index></name><operator pos:start="1371:45" pos:end="1371:45">(</operator><operator pos:start="1371:46" pos:end="1371:46">)</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block>

        <break pos:start="1377:9" pos:end="1377:14">break;</break>



    <case pos:start="1381:5" pos:end="1381:14">case <expr pos:start="1381:10" pos:end="1381:13"><literal type="number" pos:start="1381:10" pos:end="1381:13">0x8d</literal></expr>:</case> <comment type="block" pos:start="1381:16" pos:end="1381:24">/* lea */</comment>

        <expr_stmt pos:start="1383:9" pos:end="1383:39"><expr pos:start="1383:9" pos:end="1383:38"><name pos:start="1383:9" pos:end="1383:10">ot</name> <operator pos:start="1383:12" pos:end="1383:12">=</operator> <ternary pos:start="1383:14" pos:end="1383:38"><condition pos:start="1383:14" pos:end="1383:20"><expr pos:start="1383:14" pos:end="1383:18"><name pos:start="1383:14" pos:end="1383:18">dflag</name></expr> ?</condition><then pos:start="1383:22" pos:end="1383:28"> <expr pos:start="1383:22" pos:end="1383:28"><name pos:start="1383:22" pos:end="1383:28">OT_LONG</name></expr> </then><else pos:start="1383:30" pos:end="1383:38">: <expr pos:start="1383:32" pos:end="1383:38"><name pos:start="1383:32" pos:end="1383:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1385:9" pos:end="1385:30"><expr pos:start="1385:9" pos:end="1385:29"><name pos:start="1385:9" pos:end="1385:13">modrm</name> <operator pos:start="1385:15" pos:end="1385:15">=</operator> <call pos:start="1385:17" pos:end="1385:29"><name pos:start="1385:17" pos:end="1385:20">ldub</name><argument_list pos:start="1385:21" pos:end="1385:29">(<argument pos:start="1385:22" pos:end="1385:28"><expr pos:start="1385:22" pos:end="1385:28"><name pos:start="1385:22" pos:end="1385:26"><name pos:start="1385:22" pos:end="1385:22">s</name><operator pos:start="1385:23" pos:end="1385:24">-&gt;</operator><name pos:start="1385:25" pos:end="1385:26">pc</name></name><operator pos:start="1385:27" pos:end="1385:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1387:9" pos:end="1387:31"><expr pos:start="1387:9" pos:end="1387:30"><name pos:start="1387:9" pos:end="1387:11">reg</name> <operator pos:start="1387:13" pos:end="1387:13">=</operator> <operator pos:start="1387:15" pos:end="1387:15">(</operator><name pos:start="1387:16" pos:end="1387:20">modrm</name> <operator pos:start="1387:22" pos:end="1387:23">&gt;&gt;</operator> <literal type="number" pos:start="1387:25" pos:end="1387:25">3</literal><operator pos:start="1387:26" pos:end="1387:26">)</operator> <operator pos:start="1387:28" pos:end="1387:28">&amp;</operator> <literal type="number" pos:start="1387:30" pos:end="1387:30">7</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="1389:9" pos:end="1389:53">/* we must ensure that no segment is added */</comment>

        <expr_stmt pos:start="1391:9" pos:end="1393:58"><expr pos:start="1391:9" pos:end="1393:57"><name pos:start="1391:9" pos:end="1391:17"><name pos:start="1391:9" pos:end="1391:9">s</name><operator pos:start="1391:10" pos:end="1391:11">-&gt;</operator><name pos:start="1391:12" pos:end="1391:17">prefix</name></name> <operator pos:start="1391:19" pos:end="1391:20">&amp;=</operator> <operator pos:start="1391:22" pos:end="1391:22">~</operator><operator pos:start="1391:23" pos:end="1391:23">(</operator><name pos:start="1391:24" pos:end="1391:32">PREFIX_CS</name> <operator pos:start="1391:34" pos:end="1391:34">|</operator> <name pos:start="1391:36" pos:end="1391:44">PREFIX_SS</name> <operator pos:start="1391:46" pos:end="1391:46">|</operator> <name pos:start="1391:48" pos:end="1391:56">PREFIX_DS</name> <operator pos:start="1391:58" pos:end="1391:58">|</operator> 

                       <name pos:start="1393:24" pos:end="1393:32">PREFIX_ES</name> <operator pos:start="1393:34" pos:end="1393:34">|</operator> <name pos:start="1393:36" pos:end="1393:44">PREFIX_FS</name> <operator pos:start="1393:46" pos:end="1393:46">|</operator> <name pos:start="1393:48" pos:end="1393:56">PREFIX_GS</name><operator pos:start="1393:57" pos:end="1393:57">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1395:9" pos:end="1395:24"><expr pos:start="1395:9" pos:end="1395:23"><name pos:start="1395:9" pos:end="1395:11">val</name> <operator pos:start="1395:13" pos:end="1395:13">=</operator> <name pos:start="1395:15" pos:end="1395:23"><name pos:start="1395:15" pos:end="1395:15">s</name><operator pos:start="1395:16" pos:end="1395:17">-&gt;</operator><name pos:start="1395:18" pos:end="1395:23">addseg</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="1397:9" pos:end="1397:22"><expr pos:start="1397:9" pos:end="1397:21"><name pos:start="1397:9" pos:end="1397:17"><name pos:start="1397:9" pos:end="1397:9">s</name><operator pos:start="1397:10" pos:end="1397:11">-&gt;</operator><name pos:start="1397:12" pos:end="1397:17">addseg</name></name> <operator pos:start="1397:19" pos:end="1397:19">=</operator> <literal type="number" pos:start="1397:21" pos:end="1397:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1399:9" pos:end="1399:57"><expr pos:start="1399:9" pos:end="1399:56"><call pos:start="1399:9" pos:end="1399:56"><name pos:start="1399:9" pos:end="1399:21">gen_lea_modrm</name><argument_list pos:start="1399:22" pos:end="1399:56">(<argument pos:start="1399:23" pos:end="1399:23"><expr pos:start="1399:23" pos:end="1399:23"><name pos:start="1399:23" pos:end="1399:23">s</name></expr></argument>, <argument pos:start="1399:26" pos:end="1399:30"><expr pos:start="1399:26" pos:end="1399:30"><name pos:start="1399:26" pos:end="1399:30">modrm</name></expr></argument>, <argument pos:start="1399:33" pos:end="1399:41"><expr pos:start="1399:33" pos:end="1399:41"><operator pos:start="1399:33" pos:end="1399:33">&amp;</operator><name pos:start="1399:34" pos:end="1399:41">reg_addr</name></expr></argument>, <argument pos:start="1399:44" pos:end="1399:55"><expr pos:start="1399:44" pos:end="1399:55"><operator pos:start="1399:44" pos:end="1399:44">&amp;</operator><name pos:start="1399:45" pos:end="1399:55">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1401:9" pos:end="1401:24"><expr pos:start="1401:9" pos:end="1401:23"><name pos:start="1401:9" pos:end="1401:17"><name pos:start="1401:9" pos:end="1401:9">s</name><operator pos:start="1401:10" pos:end="1401:11">-&gt;</operator><name pos:start="1401:12" pos:end="1401:17">addseg</name></name> <operator pos:start="1401:19" pos:end="1401:19">=</operator> <name pos:start="1401:21" pos:end="1401:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="1403:9" pos:end="1403:47"><expr pos:start="1403:9" pos:end="1403:46"><name pos:start="1403:9" pos:end="1403:44"><name pos:start="1403:9" pos:end="1403:25">gen_op_mov_reg_A0</name><index pos:start="1403:26" pos:end="1403:39">[<expr pos:start="1403:27" pos:end="1403:38"><name pos:start="1403:27" pos:end="1403:28">ot</name> <operator pos:start="1403:30" pos:end="1403:30">-</operator> <name pos:start="1403:32" pos:end="1403:38">OT_WORD</name></expr>]</index><index pos:start="1403:40" pos:end="1403:44">[<expr pos:start="1403:41" pos:end="1403:43"><name pos:start="1403:41" pos:end="1403:43">reg</name></expr>]</index></name><operator pos:start="1403:45" pos:end="1403:45">(</operator><operator pos:start="1403:46" pos:end="1403:46">)</operator></expr>;</expr_stmt>

        <break pos:start="1405:9" pos:end="1405:14">break;</break>

        

    <case pos:start="1409:5" pos:end="1409:14">case <expr pos:start="1409:10" pos:end="1409:13"><literal type="number" pos:start="1409:10" pos:end="1409:13">0xa0</literal></expr>:</case> <comment type="block" pos:start="1409:16" pos:end="1409:32">/* mov EAX, Ov */</comment>

    <case pos:start="1411:5" pos:end="1411:14">case <expr pos:start="1411:10" pos:end="1411:13"><literal type="number" pos:start="1411:10" pos:end="1411:13">0xa1</literal></expr>:</case>

    <case pos:start="1413:5" pos:end="1413:14">case <expr pos:start="1413:10" pos:end="1413:13"><literal type="number" pos:start="1413:10" pos:end="1413:13">0xa2</literal></expr>:</case> <comment type="block" pos:start="1413:16" pos:end="1413:32">/* mov Ov, EAX */</comment>

    <case pos:start="1415:5" pos:end="1415:14">case <expr pos:start="1415:10" pos:end="1415:13"><literal type="number" pos:start="1415:10" pos:end="1415:13">0xa3</literal></expr>:</case>

        <if_stmt pos:start="1417:9" pos:end="1423:43"><if pos:start="1417:9" pos:end="1419:25">if <condition pos:start="1417:12" pos:end="1417:25">(<expr pos:start="1417:13" pos:end="1417:24"><operator pos:start="1417:13" pos:end="1417:13">(</operator><name pos:start="1417:14" pos:end="1417:14">b</name> <operator pos:start="1417:16" pos:end="1417:16">&amp;</operator> <literal type="number" pos:start="1417:18" pos:end="1417:18">1</literal><operator pos:start="1417:19" pos:end="1417:19">)</operator> <operator pos:start="1417:21" pos:end="1417:22">==</operator> <literal type="number" pos:start="1417:24" pos:end="1417:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1419:13" pos:end="1419:25"><block_content pos:start="1419:13" pos:end="1419:25">

            <expr_stmt pos:start="1419:13" pos:end="1419:25"><expr pos:start="1419:13" pos:end="1419:24"><name pos:start="1419:13" pos:end="1419:14">ot</name> <operator pos:start="1419:16" pos:end="1419:16">=</operator> <name pos:start="1419:18" pos:end="1419:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1421:9" pos:end="1423:43">else<block type="pseudo" pos:start="1423:13" pos:end="1423:43"><block_content pos:start="1423:13" pos:end="1423:43">

            <expr_stmt pos:start="1423:13" pos:end="1423:43"><expr pos:start="1423:13" pos:end="1423:42"><name pos:start="1423:13" pos:end="1423:14">ot</name> <operator pos:start="1423:16" pos:end="1423:16">=</operator> <ternary pos:start="1423:18" pos:end="1423:42"><condition pos:start="1423:18" pos:end="1423:24"><expr pos:start="1423:18" pos:end="1423:22"><name pos:start="1423:18" pos:end="1423:22">dflag</name></expr> ?</condition><then pos:start="1423:26" pos:end="1423:32"> <expr pos:start="1423:26" pos:end="1423:32"><name pos:start="1423:26" pos:end="1423:32">OT_LONG</name></expr> </then><else pos:start="1423:34" pos:end="1423:42">: <expr pos:start="1423:36" pos:end="1423:42"><name pos:start="1423:36" pos:end="1423:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="1425:9" pos:end="1431:47"><if pos:start="1425:9" pos:end="1427:47">if <condition pos:start="1425:12" pos:end="1425:21">(<expr pos:start="1425:13" pos:end="1425:20"><name pos:start="1425:13" pos:end="1425:20"><name pos:start="1425:13" pos:end="1425:13">s</name><operator pos:start="1425:14" pos:end="1425:15">-&gt;</operator><name pos:start="1425:16" pos:end="1425:20">aflag</name></name></expr>)</condition><block type="pseudo" pos:start="1427:13" pos:end="1427:47"><block_content pos:start="1427:13" pos:end="1427:47">

            <expr_stmt pos:start="1427:13" pos:end="1427:47"><expr pos:start="1427:13" pos:end="1427:46"><name pos:start="1427:13" pos:end="1427:23">offset_addr</name> <operator pos:start="1427:25" pos:end="1427:25">=</operator> <call pos:start="1427:27" pos:end="1427:46"><name pos:start="1427:27" pos:end="1427:34">insn_get</name><argument_list pos:start="1427:35" pos:end="1427:46">(<argument pos:start="1427:36" pos:end="1427:36"><expr pos:start="1427:36" pos:end="1427:36"><name pos:start="1427:36" pos:end="1427:36">s</name></expr></argument>, <argument pos:start="1427:39" pos:end="1427:45"><expr pos:start="1427:39" pos:end="1427:45"><name pos:start="1427:39" pos:end="1427:45">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1429:9" pos:end="1431:47">else<block type="pseudo" pos:start="1431:13" pos:end="1431:47"><block_content pos:start="1431:13" pos:end="1431:47">

            <expr_stmt pos:start="1431:13" pos:end="1431:47"><expr pos:start="1431:13" pos:end="1431:46"><name pos:start="1431:13" pos:end="1431:23">offset_addr</name> <operator pos:start="1431:25" pos:end="1431:25">=</operator> <call pos:start="1431:27" pos:end="1431:46"><name pos:start="1431:27" pos:end="1431:34">insn_get</name><argument_list pos:start="1431:35" pos:end="1431:46">(<argument pos:start="1431:36" pos:end="1431:36"><expr pos:start="1431:36" pos:end="1431:36"><name pos:start="1431:36" pos:end="1431:36">s</name></expr></argument>, <argument pos:start="1431:39" pos:end="1431:45"><expr pos:start="1431:39" pos:end="1431:45"><name pos:start="1431:39" pos:end="1431:45">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1433:9" pos:end="1433:39"><expr pos:start="1433:9" pos:end="1433:38"><call pos:start="1433:9" pos:end="1433:38"><name pos:start="1433:9" pos:end="1433:25">gen_op_movl_A0_im</name><argument_list pos:start="1433:26" pos:end="1433:38">(<argument pos:start="1433:27" pos:end="1433:37"><expr pos:start="1433:27" pos:end="1433:37"><name pos:start="1433:27" pos:end="1433:37">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1435:9" pos:end="1435:29">/* handle override */</comment>

        <comment type="block" pos:start="1437:9" pos:end="1437:33">/* XXX: factorize that */</comment>

        <block pos:start="1439:9" pos:end="1485:9">{<block_content pos:start="1441:13" pos:end="1483:13">

            <decl_stmt pos:start="1441:13" pos:end="1441:39"><decl pos:start="1441:13" pos:end="1441:24"><type pos:start="1441:13" pos:end="1441:15"><name pos:start="1441:13" pos:end="1441:15">int</name></type> <name pos:start="1441:17" pos:end="1441:24">override</name></decl>, <decl pos:start="1441:27" pos:end="1441:38"><type ref="prev" pos:start="1441:13" pos:end="1441:15"/><name pos:start="1441:27" pos:end="1441:38">must_add_seg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1443:13" pos:end="1443:28"><expr pos:start="1443:13" pos:end="1443:27"><name pos:start="1443:13" pos:end="1443:20">override</name> <operator pos:start="1443:22" pos:end="1443:22">=</operator> <name pos:start="1443:24" pos:end="1443:27">R_DS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1445:13" pos:end="1445:37"><expr pos:start="1445:13" pos:end="1445:36"><name pos:start="1445:13" pos:end="1445:24">must_add_seg</name> <operator pos:start="1445:26" pos:end="1445:26">=</operator> <name pos:start="1445:28" pos:end="1445:36"><name pos:start="1445:28" pos:end="1445:28">s</name><operator pos:start="1445:29" pos:end="1445:30">-&gt;</operator><name pos:start="1445:31" pos:end="1445:36">addseg</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="1447:13" pos:end="1477:13"><if pos:start="1447:13" pos:end="1477:13">if <condition pos:start="1447:16" pos:end="1449:64">(<expr pos:start="1447:17" pos:end="1449:63"><name pos:start="1447:17" pos:end="1447:25"><name pos:start="1447:17" pos:end="1447:17">s</name><operator pos:start="1447:18" pos:end="1447:19">-&gt;</operator><name pos:start="1447:20" pos:end="1447:25">prefix</name></name> <operator pos:start="1447:27" pos:end="1447:27">&amp;</operator> <operator pos:start="1447:29" pos:end="1447:29">(</operator><name pos:start="1447:30" pos:end="1447:38">PREFIX_CS</name> <operator pos:start="1447:40" pos:end="1447:40">|</operator> <name pos:start="1447:42" pos:end="1447:50">PREFIX_SS</name> <operator pos:start="1447:52" pos:end="1447:52">|</operator> <name pos:start="1447:54" pos:end="1447:62">PREFIX_DS</name> <operator pos:start="1447:64" pos:end="1447:64">|</operator> 

                             <name pos:start="1449:30" pos:end="1449:38">PREFIX_ES</name> <operator pos:start="1449:40" pos:end="1449:40">|</operator> <name pos:start="1449:42" pos:end="1449:50">PREFIX_FS</name> <operator pos:start="1449:52" pos:end="1449:52">|</operator> <name pos:start="1449:54" pos:end="1449:62">PREFIX_GS</name><operator pos:start="1449:63" pos:end="1449:63">)</operator></expr>)</condition> <block pos:start="1449:66" pos:end="1477:13">{<block_content pos:start="1451:17" pos:end="1475:33">

                <if_stmt pos:start="1451:17" pos:end="1473:36"><if pos:start="1451:17" pos:end="1453:36">if <condition pos:start="1451:20" pos:end="1451:42">(<expr pos:start="1451:21" pos:end="1451:41"><name pos:start="1451:21" pos:end="1451:29"><name pos:start="1451:21" pos:end="1451:21">s</name><operator pos:start="1451:22" pos:end="1451:23">-&gt;</operator><name pos:start="1451:24" pos:end="1451:29">prefix</name></name> <operator pos:start="1451:31" pos:end="1451:31">&amp;</operator> <name pos:start="1451:33" pos:end="1451:41">PREFIX_ES</name></expr>)</condition><block type="pseudo" pos:start="1453:21" pos:end="1453:36"><block_content pos:start="1453:21" pos:end="1453:36">

                    <expr_stmt pos:start="1453:21" pos:end="1453:36"><expr pos:start="1453:21" pos:end="1453:35"><name pos:start="1453:21" pos:end="1453:28">override</name> <operator pos:start="1453:30" pos:end="1453:30">=</operator> <name pos:start="1453:32" pos:end="1453:35">R_ES</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1455:17" pos:end="1457:36">else if <condition pos:start="1455:25" pos:end="1455:47">(<expr pos:start="1455:26" pos:end="1455:46"><name pos:start="1455:26" pos:end="1455:34"><name pos:start="1455:26" pos:end="1455:26">s</name><operator pos:start="1455:27" pos:end="1455:28">-&gt;</operator><name pos:start="1455:29" pos:end="1455:34">prefix</name></name> <operator pos:start="1455:36" pos:end="1455:36">&amp;</operator> <name pos:start="1455:38" pos:end="1455:46">PREFIX_CS</name></expr>)</condition><block type="pseudo" pos:start="1457:21" pos:end="1457:36"><block_content pos:start="1457:21" pos:end="1457:36">

                    <expr_stmt pos:start="1457:21" pos:end="1457:36"><expr pos:start="1457:21" pos:end="1457:35"><name pos:start="1457:21" pos:end="1457:28">override</name> <operator pos:start="1457:30" pos:end="1457:30">=</operator> <name pos:start="1457:32" pos:end="1457:35">R_CS</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1459:17" pos:end="1461:36">else if <condition pos:start="1459:25" pos:end="1459:47">(<expr pos:start="1459:26" pos:end="1459:46"><name pos:start="1459:26" pos:end="1459:34"><name pos:start="1459:26" pos:end="1459:26">s</name><operator pos:start="1459:27" pos:end="1459:28">-&gt;</operator><name pos:start="1459:29" pos:end="1459:34">prefix</name></name> <operator pos:start="1459:36" pos:end="1459:36">&amp;</operator> <name pos:start="1459:38" pos:end="1459:46">PREFIX_SS</name></expr>)</condition><block type="pseudo" pos:start="1461:21" pos:end="1461:36"><block_content pos:start="1461:21" pos:end="1461:36">

                    <expr_stmt pos:start="1461:21" pos:end="1461:36"><expr pos:start="1461:21" pos:end="1461:35"><name pos:start="1461:21" pos:end="1461:28">override</name> <operator pos:start="1461:30" pos:end="1461:30">=</operator> <name pos:start="1461:32" pos:end="1461:35">R_SS</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1463:17" pos:end="1465:36">else if <condition pos:start="1463:25" pos:end="1463:47">(<expr pos:start="1463:26" pos:end="1463:46"><name pos:start="1463:26" pos:end="1463:34"><name pos:start="1463:26" pos:end="1463:26">s</name><operator pos:start="1463:27" pos:end="1463:28">-&gt;</operator><name pos:start="1463:29" pos:end="1463:34">prefix</name></name> <operator pos:start="1463:36" pos:end="1463:36">&amp;</operator> <name pos:start="1463:38" pos:end="1463:46">PREFIX_DS</name></expr>)</condition><block type="pseudo" pos:start="1465:21" pos:end="1465:36"><block_content pos:start="1465:21" pos:end="1465:36">

                    <expr_stmt pos:start="1465:21" pos:end="1465:36"><expr pos:start="1465:21" pos:end="1465:35"><name pos:start="1465:21" pos:end="1465:28">override</name> <operator pos:start="1465:30" pos:end="1465:30">=</operator> <name pos:start="1465:32" pos:end="1465:35">R_DS</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1467:17" pos:end="1469:36">else if <condition pos:start="1467:25" pos:end="1467:47">(<expr pos:start="1467:26" pos:end="1467:46"><name pos:start="1467:26" pos:end="1467:34"><name pos:start="1467:26" pos:end="1467:26">s</name><operator pos:start="1467:27" pos:end="1467:28">-&gt;</operator><name pos:start="1467:29" pos:end="1467:34">prefix</name></name> <operator pos:start="1467:36" pos:end="1467:36">&amp;</operator> <name pos:start="1467:38" pos:end="1467:46">PREFIX_FS</name></expr>)</condition><block type="pseudo" pos:start="1469:21" pos:end="1469:36"><block_content pos:start="1469:21" pos:end="1469:36">

                    <expr_stmt pos:start="1469:21" pos:end="1469:36"><expr pos:start="1469:21" pos:end="1469:35"><name pos:start="1469:21" pos:end="1469:28">override</name> <operator pos:start="1469:30" pos:end="1469:30">=</operator> <name pos:start="1469:32" pos:end="1469:35">R_FS</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1471:17" pos:end="1473:36">else<block type="pseudo" pos:start="1473:21" pos:end="1473:36"><block_content pos:start="1473:21" pos:end="1473:36">

                    <expr_stmt pos:start="1473:21" pos:end="1473:36"><expr pos:start="1473:21" pos:end="1473:35"><name pos:start="1473:21" pos:end="1473:28">override</name> <operator pos:start="1473:30" pos:end="1473:30">=</operator> <name pos:start="1473:32" pos:end="1473:35">R_GS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1475:17" pos:end="1475:33"><expr pos:start="1475:17" pos:end="1475:32"><name pos:start="1475:17" pos:end="1475:28">must_add_seg</name> <operator pos:start="1475:30" pos:end="1475:30">=</operator> <literal type="number" pos:start="1475:32" pos:end="1475:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1479:13" pos:end="1483:13"><if pos:start="1479:13" pos:end="1483:13">if <condition pos:start="1479:16" pos:end="1479:29">(<expr pos:start="1479:17" pos:end="1479:28"><name pos:start="1479:17" pos:end="1479:28">must_add_seg</name></expr>)</condition> <block pos:start="1479:31" pos:end="1483:13">{<block_content pos:start="1481:17" pos:end="1481:83">

                <expr_stmt pos:start="1481:17" pos:end="1481:83"><expr pos:start="1481:17" pos:end="1481:82"><call pos:start="1481:17" pos:end="1481:82"><name pos:start="1481:17" pos:end="1481:34">gen_op_addl_A0_seg</name><argument_list pos:start="1481:35" pos:end="1481:82">(<argument pos:start="1481:36" pos:end="1481:81"><expr pos:start="1481:36" pos:end="1481:81"><call pos:start="1481:36" pos:end="1481:81"><name pos:start="1481:36" pos:end="1481:43">offsetof</name><argument_list pos:start="1481:44" pos:end="1481:81">(<argument pos:start="1481:45" pos:end="1481:55"><expr pos:start="1481:45" pos:end="1481:55"><name pos:start="1481:45" pos:end="1481:55">CPUX86State</name></expr></argument>,<argument pos:start="1481:57" pos:end="1481:80"><expr pos:start="1481:57" pos:end="1481:80"><name pos:start="1481:57" pos:end="1481:75"><name pos:start="1481:57" pos:end="1481:65">seg_cache</name><index pos:start="1481:66" pos:end="1481:75">[<expr pos:start="1481:67" pos:end="1481:74"><name pos:start="1481:67" pos:end="1481:74">override</name></expr>]</index></name><operator pos:start="1481:76" pos:end="1481:76">.</operator><name pos:start="1481:77" pos:end="1481:80">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <if_stmt pos:start="1487:9" pos:end="1499:9"><if pos:start="1487:9" pos:end="1493:9">if <condition pos:start="1487:12" pos:end="1487:25">(<expr pos:start="1487:13" pos:end="1487:24"><operator pos:start="1487:13" pos:end="1487:13">(</operator><name pos:start="1487:14" pos:end="1487:14">b</name> <operator pos:start="1487:16" pos:end="1487:16">&amp;</operator> <literal type="number" pos:start="1487:18" pos:end="1487:18">2</literal><operator pos:start="1487:19" pos:end="1487:19">)</operator> <operator pos:start="1487:21" pos:end="1487:22">==</operator> <literal type="number" pos:start="1487:24" pos:end="1487:24">0</literal></expr>)</condition> <block pos:start="1487:27" pos:end="1493:9">{<block_content pos:start="1489:13" pos:end="1491:43">

            <expr_stmt pos:start="1489:13" pos:end="1489:34"><expr pos:start="1489:13" pos:end="1489:33"><name pos:start="1489:13" pos:end="1489:31"><name pos:start="1489:13" pos:end="1489:27">gen_op_ld_T0_A0</name><index pos:start="1489:28" pos:end="1489:31">[<expr pos:start="1489:29" pos:end="1489:30"><name pos:start="1489:29" pos:end="1489:30">ot</name></expr>]</index></name><operator pos:start="1489:32" pos:end="1489:32">(</operator><operator pos:start="1489:33" pos:end="1489:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1491:13" pos:end="1491:43"><expr pos:start="1491:13" pos:end="1491:42"><name pos:start="1491:13" pos:end="1491:40"><name pos:start="1491:13" pos:end="1491:29">gen_op_mov_reg_T0</name><index pos:start="1491:30" pos:end="1491:33">[<expr pos:start="1491:31" pos:end="1491:32"><name pos:start="1491:31" pos:end="1491:32">ot</name></expr>]</index><index pos:start="1491:34" pos:end="1491:40">[<expr pos:start="1491:35" pos:end="1491:39"><name pos:start="1491:35" pos:end="1491:39">R_EAX</name></expr>]</index></name><operator pos:start="1491:41" pos:end="1491:41">(</operator><operator pos:start="1491:42" pos:end="1491:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1493:11" pos:end="1499:9">else <block pos:start="1493:16" pos:end="1499:9">{<block_content pos:start="1495:13" pos:end="1497:34">

            <expr_stmt pos:start="1495:13" pos:end="1495:46"><expr pos:start="1495:13" pos:end="1495:45"><name pos:start="1495:13" pos:end="1495:43"><name pos:start="1495:13" pos:end="1495:29">gen_op_mov_TN_reg</name><index pos:start="1495:30" pos:end="1495:33">[<expr pos:start="1495:31" pos:end="1495:32"><name pos:start="1495:31" pos:end="1495:32">ot</name></expr>]</index><index pos:start="1495:34" pos:end="1495:36">[<expr pos:start="1495:35" pos:end="1495:35"><literal type="number" pos:start="1495:35" pos:end="1495:35">0</literal></expr>]</index><index pos:start="1495:37" pos:end="1495:43">[<expr pos:start="1495:38" pos:end="1495:42"><name pos:start="1495:38" pos:end="1495:42">R_EAX</name></expr>]</index></name><operator pos:start="1495:44" pos:end="1495:44">(</operator><operator pos:start="1495:45" pos:end="1495:45">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1497:13" pos:end="1497:34"><expr pos:start="1497:13" pos:end="1497:33"><name pos:start="1497:13" pos:end="1497:31"><name pos:start="1497:13" pos:end="1497:27">gen_op_st_T0_A0</name><index pos:start="1497:28" pos:end="1497:31">[<expr pos:start="1497:29" pos:end="1497:30"><name pos:start="1497:29" pos:end="1497:30">ot</name></expr>]</index></name><operator pos:start="1497:32" pos:end="1497:32">(</operator><operator pos:start="1497:33" pos:end="1497:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1501:9" pos:end="1501:14">break;</break>

    <case pos:start="1503:5" pos:end="1503:14">case <expr pos:start="1503:10" pos:end="1503:13"><literal type="number" pos:start="1503:10" pos:end="1503:13">0xd7</literal></expr>:</case> <comment type="block" pos:start="1503:16" pos:end="1503:25">/* xlat */</comment>

        <comment type="block" pos:start="1505:9" pos:end="1505:29">/* handle override */</comment>

        <expr_stmt pos:start="1507:9" pos:end="1507:36"><expr pos:start="1507:9" pos:end="1507:35"><name pos:start="1507:9" pos:end="1507:33"><name pos:start="1507:9" pos:end="1507:26">gen_op_movl_A0_reg</name><index pos:start="1507:27" pos:end="1507:33">[<expr pos:start="1507:28" pos:end="1507:32"><name pos:start="1507:28" pos:end="1507:32">R_EBX</name></expr>]</index></name><operator pos:start="1507:34" pos:end="1507:34">(</operator><operator pos:start="1507:35" pos:end="1507:35">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1509:9" pos:end="1509:28"><expr pos:start="1509:9" pos:end="1509:27"><call pos:start="1509:9" pos:end="1509:27"><name pos:start="1509:9" pos:end="1509:25">gen_op_addl_A0_AL</name><argument_list pos:start="1509:26" pos:end="1509:27">()</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="1511:9" pos:end="1513:34"><if pos:start="1511:9" pos:end="1513:34">if <condition pos:start="1511:12" pos:end="1511:26">(<expr pos:start="1511:13" pos:end="1511:25"><name pos:start="1511:13" pos:end="1511:20"><name pos:start="1511:13" pos:end="1511:13">s</name><operator pos:start="1511:14" pos:end="1511:15">-&gt;</operator><name pos:start="1511:16" pos:end="1511:20">aflag</name></name> <operator pos:start="1511:22" pos:end="1511:23">==</operator> <literal type="number" pos:start="1511:25" pos:end="1511:25">0</literal></expr>)</condition><block type="pseudo" pos:start="1513:13" pos:end="1513:34"><block_content pos:start="1513:13" pos:end="1513:34">

            <expr_stmt pos:start="1513:13" pos:end="1513:34"><expr pos:start="1513:13" pos:end="1513:33"><call pos:start="1513:13" pos:end="1513:33"><name pos:start="1513:13" pos:end="1513:31">gen_op_andl_A0_ffff</name><argument_list pos:start="1513:32" pos:end="1513:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="1515:9" pos:end="1515:33">/* XXX: factorize that */</comment>

        <block pos:start="1517:9" pos:end="1563:9">{<block_content pos:start="1519:13" pos:end="1561:13">

            <decl_stmt pos:start="1519:13" pos:end="1519:39"><decl pos:start="1519:13" pos:end="1519:24"><type pos:start="1519:13" pos:end="1519:15"><name pos:start="1519:13" pos:end="1519:15">int</name></type> <name pos:start="1519:17" pos:end="1519:24">override</name></decl>, <decl pos:start="1519:27" pos:end="1519:38"><type ref="prev" pos:start="1519:13" pos:end="1519:15"/><name pos:start="1519:27" pos:end="1519:38">must_add_seg</name></decl>;</decl_stmt>

            <expr_stmt pos:start="1521:13" pos:end="1521:28"><expr pos:start="1521:13" pos:end="1521:27"><name pos:start="1521:13" pos:end="1521:20">override</name> <operator pos:start="1521:22" pos:end="1521:22">=</operator> <name pos:start="1521:24" pos:end="1521:27">R_DS</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1523:13" pos:end="1523:37"><expr pos:start="1523:13" pos:end="1523:36"><name pos:start="1523:13" pos:end="1523:24">must_add_seg</name> <operator pos:start="1523:26" pos:end="1523:26">=</operator> <name pos:start="1523:28" pos:end="1523:36"><name pos:start="1523:28" pos:end="1523:28">s</name><operator pos:start="1523:29" pos:end="1523:30">-&gt;</operator><name pos:start="1523:31" pos:end="1523:36">addseg</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="1525:13" pos:end="1555:13"><if pos:start="1525:13" pos:end="1555:13">if <condition pos:start="1525:16" pos:end="1527:64">(<expr pos:start="1525:17" pos:end="1527:63"><name pos:start="1525:17" pos:end="1525:25"><name pos:start="1525:17" pos:end="1525:17">s</name><operator pos:start="1525:18" pos:end="1525:19">-&gt;</operator><name pos:start="1525:20" pos:end="1525:25">prefix</name></name> <operator pos:start="1525:27" pos:end="1525:27">&amp;</operator> <operator pos:start="1525:29" pos:end="1525:29">(</operator><name pos:start="1525:30" pos:end="1525:38">PREFIX_CS</name> <operator pos:start="1525:40" pos:end="1525:40">|</operator> <name pos:start="1525:42" pos:end="1525:50">PREFIX_SS</name> <operator pos:start="1525:52" pos:end="1525:52">|</operator> <name pos:start="1525:54" pos:end="1525:62">PREFIX_DS</name> <operator pos:start="1525:64" pos:end="1525:64">|</operator> 

                             <name pos:start="1527:30" pos:end="1527:38">PREFIX_ES</name> <operator pos:start="1527:40" pos:end="1527:40">|</operator> <name pos:start="1527:42" pos:end="1527:50">PREFIX_FS</name> <operator pos:start="1527:52" pos:end="1527:52">|</operator> <name pos:start="1527:54" pos:end="1527:62">PREFIX_GS</name><operator pos:start="1527:63" pos:end="1527:63">)</operator></expr>)</condition> <block pos:start="1527:66" pos:end="1555:13">{<block_content pos:start="1529:17" pos:end="1553:33">

                <if_stmt pos:start="1529:17" pos:end="1551:36"><if pos:start="1529:17" pos:end="1531:36">if <condition pos:start="1529:20" pos:end="1529:42">(<expr pos:start="1529:21" pos:end="1529:41"><name pos:start="1529:21" pos:end="1529:29"><name pos:start="1529:21" pos:end="1529:21">s</name><operator pos:start="1529:22" pos:end="1529:23">-&gt;</operator><name pos:start="1529:24" pos:end="1529:29">prefix</name></name> <operator pos:start="1529:31" pos:end="1529:31">&amp;</operator> <name pos:start="1529:33" pos:end="1529:41">PREFIX_ES</name></expr>)</condition><block type="pseudo" pos:start="1531:21" pos:end="1531:36"><block_content pos:start="1531:21" pos:end="1531:36">

                    <expr_stmt pos:start="1531:21" pos:end="1531:36"><expr pos:start="1531:21" pos:end="1531:35"><name pos:start="1531:21" pos:end="1531:28">override</name> <operator pos:start="1531:30" pos:end="1531:30">=</operator> <name pos:start="1531:32" pos:end="1531:35">R_ES</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1533:17" pos:end="1535:36">else if <condition pos:start="1533:25" pos:end="1533:47">(<expr pos:start="1533:26" pos:end="1533:46"><name pos:start="1533:26" pos:end="1533:34"><name pos:start="1533:26" pos:end="1533:26">s</name><operator pos:start="1533:27" pos:end="1533:28">-&gt;</operator><name pos:start="1533:29" pos:end="1533:34">prefix</name></name> <operator pos:start="1533:36" pos:end="1533:36">&amp;</operator> <name pos:start="1533:38" pos:end="1533:46">PREFIX_CS</name></expr>)</condition><block type="pseudo" pos:start="1535:21" pos:end="1535:36"><block_content pos:start="1535:21" pos:end="1535:36">

                    <expr_stmt pos:start="1535:21" pos:end="1535:36"><expr pos:start="1535:21" pos:end="1535:35"><name pos:start="1535:21" pos:end="1535:28">override</name> <operator pos:start="1535:30" pos:end="1535:30">=</operator> <name pos:start="1535:32" pos:end="1535:35">R_CS</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1537:17" pos:end="1539:36">else if <condition pos:start="1537:25" pos:end="1537:47">(<expr pos:start="1537:26" pos:end="1537:46"><name pos:start="1537:26" pos:end="1537:34"><name pos:start="1537:26" pos:end="1537:26">s</name><operator pos:start="1537:27" pos:end="1537:28">-&gt;</operator><name pos:start="1537:29" pos:end="1537:34">prefix</name></name> <operator pos:start="1537:36" pos:end="1537:36">&amp;</operator> <name pos:start="1537:38" pos:end="1537:46">PREFIX_SS</name></expr>)</condition><block type="pseudo" pos:start="1539:21" pos:end="1539:36"><block_content pos:start="1539:21" pos:end="1539:36">

                    <expr_stmt pos:start="1539:21" pos:end="1539:36"><expr pos:start="1539:21" pos:end="1539:35"><name pos:start="1539:21" pos:end="1539:28">override</name> <operator pos:start="1539:30" pos:end="1539:30">=</operator> <name pos:start="1539:32" pos:end="1539:35">R_SS</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1541:17" pos:end="1543:36">else if <condition pos:start="1541:25" pos:end="1541:47">(<expr pos:start="1541:26" pos:end="1541:46"><name pos:start="1541:26" pos:end="1541:34"><name pos:start="1541:26" pos:end="1541:26">s</name><operator pos:start="1541:27" pos:end="1541:28">-&gt;</operator><name pos:start="1541:29" pos:end="1541:34">prefix</name></name> <operator pos:start="1541:36" pos:end="1541:36">&amp;</operator> <name pos:start="1541:38" pos:end="1541:46">PREFIX_DS</name></expr>)</condition><block type="pseudo" pos:start="1543:21" pos:end="1543:36"><block_content pos:start="1543:21" pos:end="1543:36">

                    <expr_stmt pos:start="1543:21" pos:end="1543:36"><expr pos:start="1543:21" pos:end="1543:35"><name pos:start="1543:21" pos:end="1543:28">override</name> <operator pos:start="1543:30" pos:end="1543:30">=</operator> <name pos:start="1543:32" pos:end="1543:35">R_DS</name></expr>;</expr_stmt></block_content></block></if>

                <if type="elseif" pos:start="1545:17" pos:end="1547:36">else if <condition pos:start="1545:25" pos:end="1545:47">(<expr pos:start="1545:26" pos:end="1545:46"><name pos:start="1545:26" pos:end="1545:34"><name pos:start="1545:26" pos:end="1545:26">s</name><operator pos:start="1545:27" pos:end="1545:28">-&gt;</operator><name pos:start="1545:29" pos:end="1545:34">prefix</name></name> <operator pos:start="1545:36" pos:end="1545:36">&amp;</operator> <name pos:start="1545:38" pos:end="1545:46">PREFIX_FS</name></expr>)</condition><block type="pseudo" pos:start="1547:21" pos:end="1547:36"><block_content pos:start="1547:21" pos:end="1547:36">

                    <expr_stmt pos:start="1547:21" pos:end="1547:36"><expr pos:start="1547:21" pos:end="1547:35"><name pos:start="1547:21" pos:end="1547:28">override</name> <operator pos:start="1547:30" pos:end="1547:30">=</operator> <name pos:start="1547:32" pos:end="1547:35">R_FS</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1549:17" pos:end="1551:36">else<block type="pseudo" pos:start="1551:21" pos:end="1551:36"><block_content pos:start="1551:21" pos:end="1551:36">

                    <expr_stmt pos:start="1551:21" pos:end="1551:36"><expr pos:start="1551:21" pos:end="1551:35"><name pos:start="1551:21" pos:end="1551:28">override</name> <operator pos:start="1551:30" pos:end="1551:30">=</operator> <name pos:start="1551:32" pos:end="1551:35">R_GS</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <expr_stmt pos:start="1553:17" pos:end="1553:33"><expr pos:start="1553:17" pos:end="1553:32"><name pos:start="1553:17" pos:end="1553:28">must_add_seg</name> <operator pos:start="1553:30" pos:end="1553:30">=</operator> <literal type="number" pos:start="1553:32" pos:end="1553:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="1557:13" pos:end="1561:13"><if pos:start="1557:13" pos:end="1561:13">if <condition pos:start="1557:16" pos:end="1557:29">(<expr pos:start="1557:17" pos:end="1557:28"><name pos:start="1557:17" pos:end="1557:28">must_add_seg</name></expr>)</condition> <block pos:start="1557:31" pos:end="1561:13">{<block_content pos:start="1559:17" pos:end="1559:83">

                <expr_stmt pos:start="1559:17" pos:end="1559:83"><expr pos:start="1559:17" pos:end="1559:82"><call pos:start="1559:17" pos:end="1559:82"><name pos:start="1559:17" pos:end="1559:34">gen_op_addl_A0_seg</name><argument_list pos:start="1559:35" pos:end="1559:82">(<argument pos:start="1559:36" pos:end="1559:81"><expr pos:start="1559:36" pos:end="1559:81"><call pos:start="1559:36" pos:end="1559:81"><name pos:start="1559:36" pos:end="1559:43">offsetof</name><argument_list pos:start="1559:44" pos:end="1559:81">(<argument pos:start="1559:45" pos:end="1559:55"><expr pos:start="1559:45" pos:end="1559:55"><name pos:start="1559:45" pos:end="1559:55">CPUX86State</name></expr></argument>,<argument pos:start="1559:57" pos:end="1559:80"><expr pos:start="1559:57" pos:end="1559:80"><name pos:start="1559:57" pos:end="1559:75"><name pos:start="1559:57" pos:end="1559:65">seg_cache</name><index pos:start="1559:66" pos:end="1559:75">[<expr pos:start="1559:67" pos:end="1559:74"><name pos:start="1559:67" pos:end="1559:74">override</name></expr>]</index></name><operator pos:start="1559:76" pos:end="1559:76">.</operator><name pos:start="1559:77" pos:end="1559:80">base</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <expr_stmt pos:start="1565:9" pos:end="1565:28"><expr pos:start="1565:9" pos:end="1565:27"><call pos:start="1565:9" pos:end="1565:27"><name pos:start="1565:9" pos:end="1565:25">gen_op_ldub_T0_A0</name><argument_list pos:start="1565:26" pos:end="1565:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1567:9" pos:end="1567:44"><expr pos:start="1567:9" pos:end="1567:43"><name pos:start="1567:9" pos:end="1567:41"><name pos:start="1567:9" pos:end="1567:25">gen_op_mov_reg_T0</name><index pos:start="1567:26" pos:end="1567:34">[<expr pos:start="1567:27" pos:end="1567:33"><name pos:start="1567:27" pos:end="1567:33">OT_BYTE</name></expr>]</index><index pos:start="1567:35" pos:end="1567:41">[<expr pos:start="1567:36" pos:end="1567:40"><name pos:start="1567:36" pos:end="1567:40">R_EAX</name></expr>]</index></name><operator pos:start="1567:42" pos:end="1567:42">(</operator><operator pos:start="1567:43" pos:end="1567:43">)</operator></expr>;</expr_stmt>

        <break pos:start="1569:9" pos:end="1569:14">break;</break>

    <case pos:start="1571:5" pos:end="1571:23">case <expr pos:start="1571:10" pos:end="1571:22"><literal type="number" pos:start="1571:10" pos:end="1571:13">0xb0</literal> <operator pos:start="1571:15" pos:end="1571:17">...</operator> <literal type="number" pos:start="1571:19" pos:end="1571:22">0xb7</literal></expr>:</case> <comment type="block" pos:start="1571:25" pos:end="1571:39">/* mov R, Ib */</comment>

        <expr_stmt pos:start="1573:9" pos:end="1573:35"><expr pos:start="1573:9" pos:end="1573:34"><name pos:start="1573:9" pos:end="1573:11">val</name> <operator pos:start="1573:13" pos:end="1573:13">=</operator> <call pos:start="1573:15" pos:end="1573:34"><name pos:start="1573:15" pos:end="1573:22">insn_get</name><argument_list pos:start="1573:23" pos:end="1573:34">(<argument pos:start="1573:24" pos:end="1573:24"><expr pos:start="1573:24" pos:end="1573:24"><name pos:start="1573:24" pos:end="1573:24">s</name></expr></argument>, <argument pos:start="1573:27" pos:end="1573:33"><expr pos:start="1573:27" pos:end="1573:33"><name pos:start="1573:27" pos:end="1573:33">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1575:9" pos:end="1575:31"><expr pos:start="1575:9" pos:end="1575:30"><call pos:start="1575:9" pos:end="1575:30"><name pos:start="1575:9" pos:end="1575:25">gen_op_movl_T0_im</name><argument_list pos:start="1575:26" pos:end="1575:30">(<argument pos:start="1575:27" pos:end="1575:29"><expr pos:start="1575:27" pos:end="1575:29"><name pos:start="1575:27" pos:end="1575:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1577:9" pos:end="1577:44"><expr pos:start="1577:9" pos:end="1577:43"><name pos:start="1577:9" pos:end="1577:41"><name pos:start="1577:9" pos:end="1577:25">gen_op_mov_reg_T0</name><index pos:start="1577:26" pos:end="1577:34">[<expr pos:start="1577:27" pos:end="1577:33"><name pos:start="1577:27" pos:end="1577:33">OT_BYTE</name></expr>]</index><index pos:start="1577:35" pos:end="1577:41">[<expr pos:start="1577:36" pos:end="1577:40"><name pos:start="1577:36" pos:end="1577:36">b</name> <operator pos:start="1577:38" pos:end="1577:38">&amp;</operator> <literal type="number" pos:start="1577:40" pos:end="1577:40">7</literal></expr>]</index></name><operator pos:start="1577:42" pos:end="1577:42">(</operator><operator pos:start="1577:43" pos:end="1577:43">)</operator></expr>;</expr_stmt>

        <break pos:start="1579:9" pos:end="1579:14">break;</break>

    <case pos:start="1581:5" pos:end="1581:23">case <expr pos:start="1581:10" pos:end="1581:22"><literal type="number" pos:start="1581:10" pos:end="1581:13">0xb8</literal> <operator pos:start="1581:15" pos:end="1581:17">...</operator> <literal type="number" pos:start="1581:19" pos:end="1581:22">0xbf</literal></expr>:</case> <comment type="block" pos:start="1581:25" pos:end="1581:39">/* mov R, Iv */</comment>

        <expr_stmt pos:start="1583:9" pos:end="1583:39"><expr pos:start="1583:9" pos:end="1583:38"><name pos:start="1583:9" pos:end="1583:10">ot</name> <operator pos:start="1583:12" pos:end="1583:12">=</operator> <ternary pos:start="1583:14" pos:end="1583:38"><condition pos:start="1583:14" pos:end="1583:20"><expr pos:start="1583:14" pos:end="1583:18"><name pos:start="1583:14" pos:end="1583:18">dflag</name></expr> ?</condition><then pos:start="1583:22" pos:end="1583:28"> <expr pos:start="1583:22" pos:end="1583:28"><name pos:start="1583:22" pos:end="1583:28">OT_LONG</name></expr> </then><else pos:start="1583:30" pos:end="1583:38">: <expr pos:start="1583:32" pos:end="1583:38"><name pos:start="1583:32" pos:end="1583:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1585:9" pos:end="1585:30"><expr pos:start="1585:9" pos:end="1585:29"><name pos:start="1585:9" pos:end="1585:11">val</name> <operator pos:start="1585:13" pos:end="1585:13">=</operator> <call pos:start="1585:15" pos:end="1585:29"><name pos:start="1585:15" pos:end="1585:22">insn_get</name><argument_list pos:start="1585:23" pos:end="1585:29">(<argument pos:start="1585:24" pos:end="1585:24"><expr pos:start="1585:24" pos:end="1585:24"><name pos:start="1585:24" pos:end="1585:24">s</name></expr></argument>, <argument pos:start="1585:27" pos:end="1585:28"><expr pos:start="1585:27" pos:end="1585:28"><name pos:start="1585:27" pos:end="1585:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1587:9" pos:end="1587:31"><expr pos:start="1587:9" pos:end="1587:30"><name pos:start="1587:9" pos:end="1587:11">reg</name> <operator pos:start="1587:13" pos:end="1587:13">=</operator> <name pos:start="1587:15" pos:end="1587:20">OR_EAX</name> <operator pos:start="1587:22" pos:end="1587:22">+</operator> <operator pos:start="1587:24" pos:end="1587:24">(</operator><name pos:start="1587:25" pos:end="1587:25">b</name> <operator pos:start="1587:27" pos:end="1587:27">&amp;</operator> <literal type="number" pos:start="1587:29" pos:end="1587:29">7</literal><operator pos:start="1587:30" pos:end="1587:30">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1589:9" pos:end="1589:31"><expr pos:start="1589:9" pos:end="1589:30"><call pos:start="1589:9" pos:end="1589:30"><name pos:start="1589:9" pos:end="1589:25">gen_op_movl_T0_im</name><argument_list pos:start="1589:26" pos:end="1589:30">(<argument pos:start="1589:27" pos:end="1589:29"><expr pos:start="1589:27" pos:end="1589:29"><name pos:start="1589:27" pos:end="1589:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1591:9" pos:end="1591:37"><expr pos:start="1591:9" pos:end="1591:36"><name pos:start="1591:9" pos:end="1591:34"><name pos:start="1591:9" pos:end="1591:25">gen_op_mov_reg_T0</name><index pos:start="1591:26" pos:end="1591:29">[<expr pos:start="1591:27" pos:end="1591:28"><name pos:start="1591:27" pos:end="1591:28">ot</name></expr>]</index><index pos:start="1591:30" pos:end="1591:34">[<expr pos:start="1591:31" pos:end="1591:33"><name pos:start="1591:31" pos:end="1591:33">reg</name></expr>]</index></name><operator pos:start="1591:35" pos:end="1591:35">(</operator><operator pos:start="1591:36" pos:end="1591:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1593:9" pos:end="1593:14">break;</break>



    <case pos:start="1597:5" pos:end="1597:23">case <expr pos:start="1597:10" pos:end="1597:22"><literal type="number" pos:start="1597:10" pos:end="1597:13">0x91</literal> <operator pos:start="1597:15" pos:end="1597:17">...</operator> <literal type="number" pos:start="1597:19" pos:end="1597:22">0x97</literal></expr>:</case> <comment type="block" pos:start="1597:25" pos:end="1597:41">/* xchg R, EAX */</comment>

        <expr_stmt pos:start="1599:9" pos:end="1599:39"><expr pos:start="1599:9" pos:end="1599:38"><name pos:start="1599:9" pos:end="1599:10">ot</name> <operator pos:start="1599:12" pos:end="1599:12">=</operator> <ternary pos:start="1599:14" pos:end="1599:38"><condition pos:start="1599:14" pos:end="1599:20"><expr pos:start="1599:14" pos:end="1599:18"><name pos:start="1599:14" pos:end="1599:18">dflag</name></expr> ?</condition><then pos:start="1599:22" pos:end="1599:28"> <expr pos:start="1599:22" pos:end="1599:28"><name pos:start="1599:22" pos:end="1599:28">OT_LONG</name></expr> </then><else pos:start="1599:30" pos:end="1599:38">: <expr pos:start="1599:32" pos:end="1599:38"><name pos:start="1599:32" pos:end="1599:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1601:9" pos:end="1601:20"><expr pos:start="1601:9" pos:end="1601:19"><name pos:start="1601:9" pos:end="1601:11">reg</name> <operator pos:start="1601:13" pos:end="1601:13">=</operator> <name pos:start="1601:15" pos:end="1601:15">b</name> <operator pos:start="1601:17" pos:end="1601:17">&amp;</operator> <literal type="number" pos:start="1601:19" pos:end="1601:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1603:9" pos:end="1603:19"><expr pos:start="1603:9" pos:end="1603:18"><name pos:start="1603:9" pos:end="1603:10">rm</name> <operator pos:start="1603:12" pos:end="1603:12">=</operator> <name pos:start="1603:14" pos:end="1603:18">R_EAX</name></expr>;</expr_stmt>

        <goto pos:start="1605:9" pos:end="1605:25">goto <name pos:start="1605:14" pos:end="1605:24">do_xchg_reg</name>;</goto>

    <case pos:start="1607:5" pos:end="1607:14">case <expr pos:start="1607:10" pos:end="1607:13"><literal type="number" pos:start="1607:10" pos:end="1607:13">0x86</literal></expr>:</case>

    <case pos:start="1609:5" pos:end="1609:14">case <expr pos:start="1609:10" pos:end="1609:13"><literal type="number" pos:start="1609:10" pos:end="1609:13">0x87</literal></expr>:</case> <comment type="block" pos:start="1609:16" pos:end="1609:32">/* xchg Ev, Gv */</comment>

        <if_stmt pos:start="1611:9" pos:end="1617:43"><if pos:start="1611:9" pos:end="1613:25">if <condition pos:start="1611:12" pos:end="1611:25">(<expr pos:start="1611:13" pos:end="1611:24"><operator pos:start="1611:13" pos:end="1611:13">(</operator><name pos:start="1611:14" pos:end="1611:14">b</name> <operator pos:start="1611:16" pos:end="1611:16">&amp;</operator> <literal type="number" pos:start="1611:18" pos:end="1611:18">1</literal><operator pos:start="1611:19" pos:end="1611:19">)</operator> <operator pos:start="1611:21" pos:end="1611:22">==</operator> <literal type="number" pos:start="1611:24" pos:end="1611:24">0</literal></expr>)</condition><block type="pseudo" pos:start="1613:13" pos:end="1613:25"><block_content pos:start="1613:13" pos:end="1613:25">

            <expr_stmt pos:start="1613:13" pos:end="1613:25"><expr pos:start="1613:13" pos:end="1613:24"><name pos:start="1613:13" pos:end="1613:14">ot</name> <operator pos:start="1613:16" pos:end="1613:16">=</operator> <name pos:start="1613:18" pos:end="1613:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="1615:9" pos:end="1617:43">else<block type="pseudo" pos:start="1617:13" pos:end="1617:43"><block_content pos:start="1617:13" pos:end="1617:43">

            <expr_stmt pos:start="1617:13" pos:end="1617:43"><expr pos:start="1617:13" pos:end="1617:42"><name pos:start="1617:13" pos:end="1617:14">ot</name> <operator pos:start="1617:16" pos:end="1617:16">=</operator> <ternary pos:start="1617:18" pos:end="1617:42"><condition pos:start="1617:18" pos:end="1617:24"><expr pos:start="1617:18" pos:end="1617:22"><name pos:start="1617:18" pos:end="1617:22">dflag</name></expr> ?</condition><then pos:start="1617:26" pos:end="1617:32"> <expr pos:start="1617:26" pos:end="1617:32"><name pos:start="1617:26" pos:end="1617:32">OT_LONG</name></expr> </then><else pos:start="1617:34" pos:end="1617:42">: <expr pos:start="1617:36" pos:end="1617:42"><name pos:start="1617:36" pos:end="1617:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="1619:9" pos:end="1619:30"><expr pos:start="1619:9" pos:end="1619:29"><name pos:start="1619:9" pos:end="1619:13">modrm</name> <operator pos:start="1619:15" pos:end="1619:15">=</operator> <call pos:start="1619:17" pos:end="1619:29"><name pos:start="1619:17" pos:end="1619:20">ldub</name><argument_list pos:start="1619:21" pos:end="1619:29">(<argument pos:start="1619:22" pos:end="1619:28"><expr pos:start="1619:22" pos:end="1619:28"><name pos:start="1619:22" pos:end="1619:26"><name pos:start="1619:22" pos:end="1619:22">s</name><operator pos:start="1619:23" pos:end="1619:24">-&gt;</operator><name pos:start="1619:25" pos:end="1619:26">pc</name></name><operator pos:start="1619:27" pos:end="1619:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1621:9" pos:end="1621:31"><expr pos:start="1621:9" pos:end="1621:30"><name pos:start="1621:9" pos:end="1621:11">reg</name> <operator pos:start="1621:13" pos:end="1621:13">=</operator> <operator pos:start="1621:15" pos:end="1621:15">(</operator><name pos:start="1621:16" pos:end="1621:20">modrm</name> <operator pos:start="1621:22" pos:end="1621:23">&gt;&gt;</operator> <literal type="number" pos:start="1621:25" pos:end="1621:25">3</literal><operator pos:start="1621:26" pos:end="1621:26">)</operator> <operator pos:start="1621:28" pos:end="1621:28">&amp;</operator> <literal type="number" pos:start="1621:30" pos:end="1621:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1623:9" pos:end="1623:31"><expr pos:start="1623:9" pos:end="1623:30"><name pos:start="1623:9" pos:end="1623:11">mod</name> <operator pos:start="1623:13" pos:end="1623:13">=</operator> <operator pos:start="1623:15" pos:end="1623:15">(</operator><name pos:start="1623:16" pos:end="1623:20">modrm</name> <operator pos:start="1623:22" pos:end="1623:23">&gt;&gt;</operator> <literal type="number" pos:start="1623:25" pos:end="1623:25">6</literal><operator pos:start="1623:26" pos:end="1623:26">)</operator> <operator pos:start="1623:28" pos:end="1623:28">&amp;</operator> <literal type="number" pos:start="1623:30" pos:end="1623:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1625:9" pos:end="1661:9"><if pos:start="1625:9" pos:end="1639:9">if <condition pos:start="1625:12" pos:end="1625:21">(<expr pos:start="1625:13" pos:end="1625:20"><name pos:start="1625:13" pos:end="1625:15">mod</name> <operator pos:start="1625:17" pos:end="1625:18">==</operator> <literal type="number" pos:start="1625:20" pos:end="1625:20">3</literal></expr>)</condition> <block pos:start="1625:23" pos:end="1639:9">{<block_content pos:start="1627:13" pos:end="1637:41">

            <expr_stmt pos:start="1627:13" pos:end="1627:27"><expr pos:start="1627:13" pos:end="1627:26"><name pos:start="1627:13" pos:end="1627:14">rm</name> <operator pos:start="1627:16" pos:end="1627:16">=</operator> <name pos:start="1627:18" pos:end="1627:22">modrm</name> <operator pos:start="1627:24" pos:end="1627:24">&amp;</operator> <literal type="number" pos:start="1627:26" pos:end="1627:26">7</literal></expr>;</expr_stmt>

        <label pos:start="1629:9" pos:end="1629:20"><name pos:start="1629:9" pos:end="1629:19">do_xchg_reg</name>:</label>

            <expr_stmt pos:start="1631:13" pos:end="1631:44"><expr pos:start="1631:13" pos:end="1631:43"><name pos:start="1631:13" pos:end="1631:41"><name pos:start="1631:13" pos:end="1631:29">gen_op_mov_TN_reg</name><index pos:start="1631:30" pos:end="1631:33">[<expr pos:start="1631:31" pos:end="1631:32"><name pos:start="1631:31" pos:end="1631:32">ot</name></expr>]</index><index pos:start="1631:34" pos:end="1631:36">[<expr pos:start="1631:35" pos:end="1631:35"><literal type="number" pos:start="1631:35" pos:end="1631:35">0</literal></expr>]</index><index pos:start="1631:37" pos:end="1631:41">[<expr pos:start="1631:38" pos:end="1631:40"><name pos:start="1631:38" pos:end="1631:40">reg</name></expr>]</index></name><operator pos:start="1631:42" pos:end="1631:42">(</operator><operator pos:start="1631:43" pos:end="1631:43">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1633:13" pos:end="1633:43"><expr pos:start="1633:13" pos:end="1633:42"><name pos:start="1633:13" pos:end="1633:40"><name pos:start="1633:13" pos:end="1633:29">gen_op_mov_TN_reg</name><index pos:start="1633:30" pos:end="1633:33">[<expr pos:start="1633:31" pos:end="1633:32"><name pos:start="1633:31" pos:end="1633:32">ot</name></expr>]</index><index pos:start="1633:34" pos:end="1633:36">[<expr pos:start="1633:35" pos:end="1633:35"><literal type="number" pos:start="1633:35" pos:end="1633:35">1</literal></expr>]</index><index pos:start="1633:37" pos:end="1633:40">[<expr pos:start="1633:38" pos:end="1633:39"><name pos:start="1633:38" pos:end="1633:39">rm</name></expr>]</index></name><operator pos:start="1633:41" pos:end="1633:41">(</operator><operator pos:start="1633:42" pos:end="1633:42">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1635:13" pos:end="1635:40"><expr pos:start="1635:13" pos:end="1635:39"><name pos:start="1635:13" pos:end="1635:37"><name pos:start="1635:13" pos:end="1635:29">gen_op_mov_reg_T0</name><index pos:start="1635:30" pos:end="1635:33">[<expr pos:start="1635:31" pos:end="1635:32"><name pos:start="1635:31" pos:end="1635:32">ot</name></expr>]</index><index pos:start="1635:34" pos:end="1635:37">[<expr pos:start="1635:35" pos:end="1635:36"><name pos:start="1635:35" pos:end="1635:36">rm</name></expr>]</index></name><operator pos:start="1635:38" pos:end="1635:38">(</operator><operator pos:start="1635:39" pos:end="1635:39">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1637:13" pos:end="1637:41"><expr pos:start="1637:13" pos:end="1637:40"><name pos:start="1637:13" pos:end="1637:38"><name pos:start="1637:13" pos:end="1637:29">gen_op_mov_reg_T1</name><index pos:start="1637:30" pos:end="1637:33">[<expr pos:start="1637:31" pos:end="1637:32"><name pos:start="1637:31" pos:end="1637:32">ot</name></expr>]</index><index pos:start="1637:34" pos:end="1637:38">[<expr pos:start="1637:35" pos:end="1637:37"><name pos:start="1637:35" pos:end="1637:37">reg</name></expr>]</index></name><operator pos:start="1637:39" pos:end="1637:39">(</operator><operator pos:start="1637:40" pos:end="1637:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1639:11" pos:end="1661:9">else <block pos:start="1639:16" pos:end="1661:9">{<block_content pos:start="1641:13" pos:end="1659:41">

            <expr_stmt pos:start="1641:13" pos:end="1641:61"><expr pos:start="1641:13" pos:end="1641:60"><call pos:start="1641:13" pos:end="1641:60"><name pos:start="1641:13" pos:end="1641:25">gen_lea_modrm</name><argument_list pos:start="1641:26" pos:end="1641:60">(<argument pos:start="1641:27" pos:end="1641:27"><expr pos:start="1641:27" pos:end="1641:27"><name pos:start="1641:27" pos:end="1641:27">s</name></expr></argument>, <argument pos:start="1641:30" pos:end="1641:34"><expr pos:start="1641:30" pos:end="1641:34"><name pos:start="1641:30" pos:end="1641:34">modrm</name></expr></argument>, <argument pos:start="1641:37" pos:end="1641:45"><expr pos:start="1641:37" pos:end="1641:45"><operator pos:start="1641:37" pos:end="1641:37">&amp;</operator><name pos:start="1641:38" pos:end="1641:45">reg_addr</name></expr></argument>, <argument pos:start="1641:48" pos:end="1641:59"><expr pos:start="1641:48" pos:end="1641:59"><operator pos:start="1641:48" pos:end="1641:48">&amp;</operator><name pos:start="1641:49" pos:end="1641:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1643:13" pos:end="1643:44"><expr pos:start="1643:13" pos:end="1643:43"><name pos:start="1643:13" pos:end="1643:41"><name pos:start="1643:13" pos:end="1643:29">gen_op_mov_TN_reg</name><index pos:start="1643:30" pos:end="1643:33">[<expr pos:start="1643:31" pos:end="1643:32"><name pos:start="1643:31" pos:end="1643:32">ot</name></expr>]</index><index pos:start="1643:34" pos:end="1643:36">[<expr pos:start="1643:35" pos:end="1643:35"><literal type="number" pos:start="1643:35" pos:end="1643:35">0</literal></expr>]</index><index pos:start="1643:37" pos:end="1643:41">[<expr pos:start="1643:38" pos:end="1643:40"><name pos:start="1643:38" pos:end="1643:40">reg</name></expr>]</index></name><operator pos:start="1643:42" pos:end="1643:42">(</operator><operator pos:start="1643:43" pos:end="1643:43">)</operator></expr>;</expr_stmt>

            <comment type="block" pos:start="1645:13" pos:end="1645:44">/* for xchg, lock is implicit */</comment>

            <if_stmt pos:start="1647:13" pos:end="1649:30"><if pos:start="1647:13" pos:end="1649:30">if <condition pos:start="1647:16" pos:end="1647:42">(<expr pos:start="1647:17" pos:end="1647:41"><operator pos:start="1647:17" pos:end="1647:17">!</operator><operator pos:start="1647:18" pos:end="1647:18">(</operator><name pos:start="1647:19" pos:end="1647:26">prefixes</name> <operator pos:start="1647:28" pos:end="1647:28">&amp;</operator> <name pos:start="1647:30" pos:end="1647:40">PREFIX_LOCK</name><operator pos:start="1647:41" pos:end="1647:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1649:17" pos:end="1649:30"><block_content pos:start="1649:17" pos:end="1649:30">

                <expr_stmt pos:start="1649:17" pos:end="1649:30"><expr pos:start="1649:17" pos:end="1649:29"><call pos:start="1649:17" pos:end="1649:29"><name pos:start="1649:17" pos:end="1649:27">gen_op_lock</name><argument_list pos:start="1649:28" pos:end="1649:29">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1651:13" pos:end="1651:34"><expr pos:start="1651:13" pos:end="1651:33"><name pos:start="1651:13" pos:end="1651:31"><name pos:start="1651:13" pos:end="1651:27">gen_op_ld_T1_A0</name><index pos:start="1651:28" pos:end="1651:31">[<expr pos:start="1651:29" pos:end="1651:30"><name pos:start="1651:29" pos:end="1651:30">ot</name></expr>]</index></name><operator pos:start="1651:32" pos:end="1651:32">(</operator><operator pos:start="1651:33" pos:end="1651:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1653:13" pos:end="1653:34"><expr pos:start="1653:13" pos:end="1653:33"><name pos:start="1653:13" pos:end="1653:31"><name pos:start="1653:13" pos:end="1653:27">gen_op_st_T0_A0</name><index pos:start="1653:28" pos:end="1653:31">[<expr pos:start="1653:29" pos:end="1653:30"><name pos:start="1653:29" pos:end="1653:30">ot</name></expr>]</index></name><operator pos:start="1653:32" pos:end="1653:32">(</operator><operator pos:start="1653:33" pos:end="1653:33">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="1655:13" pos:end="1657:32"><if pos:start="1655:13" pos:end="1657:32">if <condition pos:start="1655:16" pos:end="1655:42">(<expr pos:start="1655:17" pos:end="1655:41"><operator pos:start="1655:17" pos:end="1655:17">!</operator><operator pos:start="1655:18" pos:end="1655:18">(</operator><name pos:start="1655:19" pos:end="1655:26">prefixes</name> <operator pos:start="1655:28" pos:end="1655:28">&amp;</operator> <name pos:start="1655:30" pos:end="1655:40">PREFIX_LOCK</name><operator pos:start="1655:41" pos:end="1655:41">)</operator></expr>)</condition><block type="pseudo" pos:start="1657:17" pos:end="1657:32"><block_content pos:start="1657:17" pos:end="1657:32">

                <expr_stmt pos:start="1657:17" pos:end="1657:32"><expr pos:start="1657:17" pos:end="1657:31"><call pos:start="1657:17" pos:end="1657:31"><name pos:start="1657:17" pos:end="1657:29">gen_op_unlock</name><argument_list pos:start="1657:30" pos:end="1657:31">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1659:13" pos:end="1659:41"><expr pos:start="1659:13" pos:end="1659:40"><name pos:start="1659:13" pos:end="1659:38"><name pos:start="1659:13" pos:end="1659:29">gen_op_mov_reg_T1</name><index pos:start="1659:30" pos:end="1659:33">[<expr pos:start="1659:31" pos:end="1659:32"><name pos:start="1659:31" pos:end="1659:32">ot</name></expr>]</index><index pos:start="1659:34" pos:end="1659:38">[<expr pos:start="1659:35" pos:end="1659:37"><name pos:start="1659:35" pos:end="1659:37">reg</name></expr>]</index></name><operator pos:start="1659:39" pos:end="1659:39">(</operator><operator pos:start="1659:40" pos:end="1659:40">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1663:9" pos:end="1663:14">break;</break>

    <case pos:start="1665:5" pos:end="1665:14">case <expr pos:start="1665:10" pos:end="1665:13"><literal type="number" pos:start="1665:10" pos:end="1665:13">0xc4</literal></expr>:</case> <comment type="block" pos:start="1665:16" pos:end="1665:27">/* les Gv */</comment>

        <expr_stmt pos:start="1667:9" pos:end="1667:18"><expr pos:start="1667:9" pos:end="1667:17"><name pos:start="1667:9" pos:end="1667:10">op</name> <operator pos:start="1667:12" pos:end="1667:12">=</operator> <name pos:start="1667:14" pos:end="1667:17">R_ES</name></expr>;</expr_stmt>

        <goto pos:start="1669:9" pos:end="1669:20">goto <name pos:start="1669:14" pos:end="1669:19">do_lxx</name>;</goto>

    <case pos:start="1671:5" pos:end="1671:14">case <expr pos:start="1671:10" pos:end="1671:13"><literal type="number" pos:start="1671:10" pos:end="1671:13">0xc5</literal></expr>:</case> <comment type="block" pos:start="1671:16" pos:end="1671:27">/* lds Gv */</comment>

        <expr_stmt pos:start="1673:9" pos:end="1673:18"><expr pos:start="1673:9" pos:end="1673:17"><name pos:start="1673:9" pos:end="1673:10">op</name> <operator pos:start="1673:12" pos:end="1673:12">=</operator> <name pos:start="1673:14" pos:end="1673:17">R_DS</name></expr>;</expr_stmt>

        <goto pos:start="1675:9" pos:end="1675:20">goto <name pos:start="1675:14" pos:end="1675:19">do_lxx</name>;</goto>

    <case pos:start="1677:5" pos:end="1677:15">case <expr pos:start="1677:10" pos:end="1677:14"><literal type="number" pos:start="1677:10" pos:end="1677:14">0x1b2</literal></expr>:</case> <comment type="block" pos:start="1677:17" pos:end="1677:28">/* lss Gv */</comment>

        <expr_stmt pos:start="1679:9" pos:end="1679:18"><expr pos:start="1679:9" pos:end="1679:17"><name pos:start="1679:9" pos:end="1679:10">op</name> <operator pos:start="1679:12" pos:end="1679:12">=</operator> <name pos:start="1679:14" pos:end="1679:17">R_SS</name></expr>;</expr_stmt>

        <goto pos:start="1681:9" pos:end="1681:20">goto <name pos:start="1681:14" pos:end="1681:19">do_lxx</name>;</goto>

    <case pos:start="1683:5" pos:end="1683:15">case <expr pos:start="1683:10" pos:end="1683:14"><literal type="number" pos:start="1683:10" pos:end="1683:14">0x1b4</literal></expr>:</case> <comment type="block" pos:start="1683:17" pos:end="1683:28">/* lfs Gv */</comment>

        <expr_stmt pos:start="1685:9" pos:end="1685:18"><expr pos:start="1685:9" pos:end="1685:17"><name pos:start="1685:9" pos:end="1685:10">op</name> <operator pos:start="1685:12" pos:end="1685:12">=</operator> <name pos:start="1685:14" pos:end="1685:17">R_FS</name></expr>;</expr_stmt>

        <goto pos:start="1687:9" pos:end="1687:20">goto <name pos:start="1687:14" pos:end="1687:19">do_lxx</name>;</goto>

    <case pos:start="1689:5" pos:end="1689:15">case <expr pos:start="1689:10" pos:end="1689:14"><literal type="number" pos:start="1689:10" pos:end="1689:14">0x1b5</literal></expr>:</case> <comment type="block" pos:start="1689:17" pos:end="1689:28">/* lgs Gv */</comment>

        <expr_stmt pos:start="1691:9" pos:end="1691:18"><expr pos:start="1691:9" pos:end="1691:17"><name pos:start="1691:9" pos:end="1691:10">op</name> <operator pos:start="1691:12" pos:end="1691:12">=</operator> <name pos:start="1691:14" pos:end="1691:17">R_GS</name></expr>;</expr_stmt>

    <label pos:start="1693:5" pos:end="1693:11"><name pos:start="1693:5" pos:end="1693:10">do_lxx</name>:</label>

        <expr_stmt pos:start="1695:9" pos:end="1695:39"><expr pos:start="1695:9" pos:end="1695:38"><name pos:start="1695:9" pos:end="1695:10">ot</name> <operator pos:start="1695:12" pos:end="1695:12">=</operator> <ternary pos:start="1695:14" pos:end="1695:38"><condition pos:start="1695:14" pos:end="1695:20"><expr pos:start="1695:14" pos:end="1695:18"><name pos:start="1695:14" pos:end="1695:18">dflag</name></expr> ?</condition><then pos:start="1695:22" pos:end="1695:28"> <expr pos:start="1695:22" pos:end="1695:28"><name pos:start="1695:22" pos:end="1695:28">OT_LONG</name></expr> </then><else pos:start="1695:30" pos:end="1695:38">: <expr pos:start="1695:32" pos:end="1695:38"><name pos:start="1695:32" pos:end="1695:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1697:9" pos:end="1697:30"><expr pos:start="1697:9" pos:end="1697:29"><name pos:start="1697:9" pos:end="1697:13">modrm</name> <operator pos:start="1697:15" pos:end="1697:15">=</operator> <call pos:start="1697:17" pos:end="1697:29"><name pos:start="1697:17" pos:end="1697:20">ldub</name><argument_list pos:start="1697:21" pos:end="1697:29">(<argument pos:start="1697:22" pos:end="1697:28"><expr pos:start="1697:22" pos:end="1697:28"><name pos:start="1697:22" pos:end="1697:26"><name pos:start="1697:22" pos:end="1697:22">s</name><operator pos:start="1697:23" pos:end="1697:24">-&gt;</operator><name pos:start="1697:25" pos:end="1697:26">pc</name></name><operator pos:start="1697:27" pos:end="1697:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1699:9" pos:end="1699:31"><expr pos:start="1699:9" pos:end="1699:30"><name pos:start="1699:9" pos:end="1699:11">reg</name> <operator pos:start="1699:13" pos:end="1699:13">=</operator> <operator pos:start="1699:15" pos:end="1699:15">(</operator><name pos:start="1699:16" pos:end="1699:20">modrm</name> <operator pos:start="1699:22" pos:end="1699:23">&gt;&gt;</operator> <literal type="number" pos:start="1699:25" pos:end="1699:25">3</literal><operator pos:start="1699:26" pos:end="1699:26">)</operator> <operator pos:start="1699:28" pos:end="1699:28">&amp;</operator> <literal type="number" pos:start="1699:30" pos:end="1699:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1701:9" pos:end="1701:31"><expr pos:start="1701:9" pos:end="1701:30"><name pos:start="1701:9" pos:end="1701:11">mod</name> <operator pos:start="1701:13" pos:end="1701:13">=</operator> <operator pos:start="1701:15" pos:end="1701:15">(</operator><name pos:start="1701:16" pos:end="1701:20">modrm</name> <operator pos:start="1701:22" pos:end="1701:23">&gt;&gt;</operator> <literal type="number" pos:start="1701:25" pos:end="1701:25">6</literal><operator pos:start="1701:26" pos:end="1701:26">)</operator> <operator pos:start="1701:28" pos:end="1701:28">&amp;</operator> <literal type="number" pos:start="1701:30" pos:end="1701:30">3</literal></expr>;</expr_stmt>

        <if_stmt pos:start="1703:9" pos:end="1705:28"><if pos:start="1703:9" pos:end="1705:28">if <condition pos:start="1703:12" pos:end="1703:21">(<expr pos:start="1703:13" pos:end="1703:20"><name pos:start="1703:13" pos:end="1703:15">mod</name> <operator pos:start="1703:17" pos:end="1703:18">==</operator> <literal type="number" pos:start="1703:20" pos:end="1703:20">3</literal></expr>)</condition><block type="pseudo" pos:start="1705:13" pos:end="1705:28"><block_content pos:start="1705:13" pos:end="1705:28">

            <goto pos:start="1705:13" pos:end="1705:28">goto <name pos:start="1705:18" pos:end="1705:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="1707:9" pos:end="1707:30"><expr pos:start="1707:9" pos:end="1707:29"><name pos:start="1707:9" pos:end="1707:27"><name pos:start="1707:9" pos:end="1707:23">gen_op_ld_T1_A0</name><index pos:start="1707:24" pos:end="1707:27">[<expr pos:start="1707:25" pos:end="1707:26"><name pos:start="1707:25" pos:end="1707:26">ot</name></expr>]</index></name><operator pos:start="1707:28" pos:end="1707:28">(</operator><operator pos:start="1707:29" pos:end="1707:29">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="1709:9" pos:end="1709:51"><expr pos:start="1709:9" pos:end="1709:50"><call pos:start="1709:9" pos:end="1709:50"><name pos:start="1709:9" pos:end="1709:25">gen_op_addl_A0_im</name><argument_list pos:start="1709:26" pos:end="1709:50">(<argument pos:start="1709:27" pos:end="1709:49"><expr pos:start="1709:27" pos:end="1709:49"><literal type="number" pos:start="1709:27" pos:end="1709:27">1</literal> <operator pos:start="1709:29" pos:end="1709:30">&lt;&lt;</operator> <operator pos:start="1709:32" pos:end="1709:32">(</operator><name pos:start="1709:33" pos:end="1709:34">ot</name> <operator pos:start="1709:36" pos:end="1709:36">-</operator> <name pos:start="1709:38" pos:end="1709:44">OT_WORD</name> <operator pos:start="1709:46" pos:end="1709:46">+</operator> <literal type="number" pos:start="1709:48" pos:end="1709:48">1</literal><operator pos:start="1709:49" pos:end="1709:49">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1711:9" pos:end="1711:66">/* load the segment first to handle exceptions properly */</comment>

        <expr_stmt pos:start="1713:9" pos:end="1713:28"><expr pos:start="1713:9" pos:end="1713:27"><call pos:start="1713:9" pos:end="1713:27"><name pos:start="1713:9" pos:end="1713:25">gen_op_lduw_T0_A0</name><argument_list pos:start="1713:26" pos:end="1713:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1715:9" pos:end="1715:31"><expr pos:start="1715:9" pos:end="1715:30"><call pos:start="1715:9" pos:end="1715:30"><name pos:start="1715:9" pos:end="1715:23">gen_movl_seg_T0</name><argument_list pos:start="1715:24" pos:end="1715:30">(<argument pos:start="1715:25" pos:end="1715:25"><expr pos:start="1715:25" pos:end="1715:25"><name pos:start="1715:25" pos:end="1715:25">s</name></expr></argument>, <argument pos:start="1715:28" pos:end="1715:29"><expr pos:start="1715:28" pos:end="1715:29"><name pos:start="1715:28" pos:end="1715:29">op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="1717:9" pos:end="1717:31">/* then put the data */</comment>

        <expr_stmt pos:start="1719:9" pos:end="1719:37"><expr pos:start="1719:9" pos:end="1719:36"><name pos:start="1719:9" pos:end="1719:34"><name pos:start="1719:9" pos:end="1719:25">gen_op_mov_reg_T1</name><index pos:start="1719:26" pos:end="1719:29">[<expr pos:start="1719:27" pos:end="1719:28"><name pos:start="1719:27" pos:end="1719:28">ot</name></expr>]</index><index pos:start="1719:30" pos:end="1719:34">[<expr pos:start="1719:31" pos:end="1719:33"><name pos:start="1719:31" pos:end="1719:33">reg</name></expr>]</index></name><operator pos:start="1719:35" pos:end="1719:35">(</operator><operator pos:start="1719:36" pos:end="1719:36">)</operator></expr>;</expr_stmt>

        <break pos:start="1721:9" pos:end="1721:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="1725:9" pos:end="1725:34">/************************/</comment>

        <comment type="block" pos:start="1727:9" pos:end="1727:20">/* shifts */</comment>

    <case pos:start="1729:5" pos:end="1729:14">case <expr pos:start="1729:10" pos:end="1729:13"><literal type="number" pos:start="1729:10" pos:end="1729:13">0xc0</literal></expr>:</case>

    <case pos:start="1731:5" pos:end="1731:14">case <expr pos:start="1731:10" pos:end="1731:13"><literal type="number" pos:start="1731:10" pos:end="1731:13">0xc1</literal></expr>:</case>

        <comment type="block" pos:start="1733:9" pos:end="1733:25">/* shift Ev,Ib */</comment>

        <expr_stmt pos:start="1735:9" pos:end="1735:18"><expr pos:start="1735:9" pos:end="1735:17"><name pos:start="1735:9" pos:end="1735:13">shift</name> <operator pos:start="1735:15" pos:end="1735:15">=</operator> <literal type="number" pos:start="1735:17" pos:end="1735:17">2</literal></expr>;</expr_stmt>

    <label pos:start="1737:5" pos:end="1737:9"><name pos:start="1737:5" pos:end="1737:8">grp2</name>:</label>

        <block pos:start="1739:9" pos:end="1803:9">{<block_content pos:start="1741:13" pos:end="1801:13">

            <if_stmt pos:start="1741:13" pos:end="1747:47"><if pos:start="1741:13" pos:end="1743:29">if <condition pos:start="1741:16" pos:end="1741:29">(<expr pos:start="1741:17" pos:end="1741:28"><operator pos:start="1741:17" pos:end="1741:17">(</operator><name pos:start="1741:18" pos:end="1741:18">b</name> <operator pos:start="1741:20" pos:end="1741:20">&amp;</operator> <literal type="number" pos:start="1741:22" pos:end="1741:22">1</literal><operator pos:start="1741:23" pos:end="1741:23">)</operator> <operator pos:start="1741:25" pos:end="1741:26">==</operator> <literal type="number" pos:start="1741:28" pos:end="1741:28">0</literal></expr>)</condition><block type="pseudo" pos:start="1743:17" pos:end="1743:29"><block_content pos:start="1743:17" pos:end="1743:29">

                <expr_stmt pos:start="1743:17" pos:end="1743:29"><expr pos:start="1743:17" pos:end="1743:28"><name pos:start="1743:17" pos:end="1743:18">ot</name> <operator pos:start="1743:20" pos:end="1743:20">=</operator> <name pos:start="1743:22" pos:end="1743:28">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="1745:13" pos:end="1747:47">else<block type="pseudo" pos:start="1747:17" pos:end="1747:47"><block_content pos:start="1747:17" pos:end="1747:47">

                <expr_stmt pos:start="1747:17" pos:end="1747:47"><expr pos:start="1747:17" pos:end="1747:46"><name pos:start="1747:17" pos:end="1747:18">ot</name> <operator pos:start="1747:20" pos:end="1747:20">=</operator> <ternary pos:start="1747:22" pos:end="1747:46"><condition pos:start="1747:22" pos:end="1747:28"><expr pos:start="1747:22" pos:end="1747:26"><name pos:start="1747:22" pos:end="1747:26">dflag</name></expr> ?</condition><then pos:start="1747:30" pos:end="1747:36"> <expr pos:start="1747:30" pos:end="1747:36"><name pos:start="1747:30" pos:end="1747:36">OT_LONG</name></expr> </then><else pos:start="1747:38" pos:end="1747:46">: <expr pos:start="1747:40" pos:end="1747:46"><name pos:start="1747:40" pos:end="1747:46">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

            

            <expr_stmt pos:start="1751:13" pos:end="1751:34"><expr pos:start="1751:13" pos:end="1751:33"><name pos:start="1751:13" pos:end="1751:17">modrm</name> <operator pos:start="1751:19" pos:end="1751:19">=</operator> <call pos:start="1751:21" pos:end="1751:33"><name pos:start="1751:21" pos:end="1751:24">ldub</name><argument_list pos:start="1751:25" pos:end="1751:33">(<argument pos:start="1751:26" pos:end="1751:32"><expr pos:start="1751:26" pos:end="1751:32"><name pos:start="1751:26" pos:end="1751:30"><name pos:start="1751:26" pos:end="1751:26">s</name><operator pos:start="1751:27" pos:end="1751:28">-&gt;</operator><name pos:start="1751:29" pos:end="1751:30">pc</name></name><operator pos:start="1751:31" pos:end="1751:32">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1753:13" pos:end="1753:35"><expr pos:start="1753:13" pos:end="1753:34"><name pos:start="1753:13" pos:end="1753:15">mod</name> <operator pos:start="1753:17" pos:end="1753:17">=</operator> <operator pos:start="1753:19" pos:end="1753:19">(</operator><name pos:start="1753:20" pos:end="1753:24">modrm</name> <operator pos:start="1753:26" pos:end="1753:27">&gt;&gt;</operator> <literal type="number" pos:start="1753:29" pos:end="1753:29">6</literal><operator pos:start="1753:30" pos:end="1753:30">)</operator> <operator pos:start="1753:32" pos:end="1753:32">&amp;</operator> <literal type="number" pos:start="1753:34" pos:end="1753:34">3</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1755:13" pos:end="1755:27"><expr pos:start="1755:13" pos:end="1755:26"><name pos:start="1755:13" pos:end="1755:14">rm</name> <operator pos:start="1755:16" pos:end="1755:16">=</operator> <name pos:start="1755:18" pos:end="1755:22">modrm</name> <operator pos:start="1755:24" pos:end="1755:24">&amp;</operator> <literal type="number" pos:start="1755:26" pos:end="1755:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="1757:13" pos:end="1757:34"><expr pos:start="1757:13" pos:end="1757:33"><name pos:start="1757:13" pos:end="1757:14">op</name> <operator pos:start="1757:16" pos:end="1757:16">=</operator> <operator pos:start="1757:18" pos:end="1757:18">(</operator><name pos:start="1757:19" pos:end="1757:23">modrm</name> <operator pos:start="1757:25" pos:end="1757:26">&gt;&gt;</operator> <literal type="number" pos:start="1757:28" pos:end="1757:28">3</literal><operator pos:start="1757:29" pos:end="1757:29">)</operator> <operator pos:start="1757:31" pos:end="1757:31">&amp;</operator> <literal type="number" pos:start="1757:33" pos:end="1757:33">7</literal></expr>;</expr_stmt>

            

            <if_stmt pos:start="1761:13" pos:end="1773:13"><if pos:start="1761:13" pos:end="1769:13">if <condition pos:start="1761:16" pos:end="1761:25">(<expr pos:start="1761:17" pos:end="1761:24"><name pos:start="1761:17" pos:end="1761:19">mod</name> <operator pos:start="1761:21" pos:end="1761:22">!=</operator> <literal type="number" pos:start="1761:24" pos:end="1761:24">3</literal></expr>)</condition> <block pos:start="1761:27" pos:end="1769:13">{<block_content pos:start="1763:17" pos:end="1767:32">

                <expr_stmt pos:start="1763:17" pos:end="1763:65"><expr pos:start="1763:17" pos:end="1763:64"><call pos:start="1763:17" pos:end="1763:64"><name pos:start="1763:17" pos:end="1763:29">gen_lea_modrm</name><argument_list pos:start="1763:30" pos:end="1763:64">(<argument pos:start="1763:31" pos:end="1763:31"><expr pos:start="1763:31" pos:end="1763:31"><name pos:start="1763:31" pos:end="1763:31">s</name></expr></argument>, <argument pos:start="1763:34" pos:end="1763:38"><expr pos:start="1763:34" pos:end="1763:38"><name pos:start="1763:34" pos:end="1763:38">modrm</name></expr></argument>, <argument pos:start="1763:41" pos:end="1763:49"><expr pos:start="1763:41" pos:end="1763:49"><operator pos:start="1763:41" pos:end="1763:41">&amp;</operator><name pos:start="1763:42" pos:end="1763:49">reg_addr</name></expr></argument>, <argument pos:start="1763:52" pos:end="1763:63"><expr pos:start="1763:52" pos:end="1763:63"><operator pos:start="1763:52" pos:end="1763:52">&amp;</operator><name pos:start="1763:53" pos:end="1763:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1765:17" pos:end="1765:38"><expr pos:start="1765:17" pos:end="1765:37"><name pos:start="1765:17" pos:end="1765:35"><name pos:start="1765:17" pos:end="1765:31">gen_op_ld_T0_A0</name><index pos:start="1765:32" pos:end="1765:35">[<expr pos:start="1765:33" pos:end="1765:34"><name pos:start="1765:33" pos:end="1765:34">ot</name></expr>]</index></name><operator pos:start="1765:36" pos:end="1765:36">(</operator><operator pos:start="1765:37" pos:end="1765:37">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1767:17" pos:end="1767:32"><expr pos:start="1767:17" pos:end="1767:31"><name pos:start="1767:17" pos:end="1767:21">opreg</name> <operator pos:start="1767:23" pos:end="1767:23">=</operator> <name pos:start="1767:25" pos:end="1767:31">OR_TMP0</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1769:15" pos:end="1773:13">else <block pos:start="1769:20" pos:end="1773:13">{<block_content pos:start="1771:17" pos:end="1771:36">

                <expr_stmt pos:start="1771:17" pos:end="1771:36"><expr pos:start="1771:17" pos:end="1771:35"><name pos:start="1771:17" pos:end="1771:21">opreg</name> <operator pos:start="1771:23" pos:end="1771:23">=</operator> <name pos:start="1771:25" pos:end="1771:26">rm</name> <operator pos:start="1771:28" pos:end="1771:28">+</operator> <name pos:start="1771:30" pos:end="1771:35">OR_EAX</name></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <comment type="block" pos:start="1777:13" pos:end="1777:28">/* simpler op */</comment>

            <if_stmt pos:start="1779:13" pos:end="1793:13"><if pos:start="1779:13" pos:end="1783:13">if <condition pos:start="1779:16" pos:end="1779:27">(<expr pos:start="1779:17" pos:end="1779:26"><name pos:start="1779:17" pos:end="1779:21">shift</name> <operator pos:start="1779:23" pos:end="1779:24">==</operator> <literal type="number" pos:start="1779:26" pos:end="1779:26">0</literal></expr>)</condition> <block pos:start="1779:29" pos:end="1783:13">{<block_content pos:start="1781:17" pos:end="1781:52">

                <expr_stmt pos:start="1781:17" pos:end="1781:52"><expr pos:start="1781:17" pos:end="1781:51"><call pos:start="1781:17" pos:end="1781:51"><name pos:start="1781:17" pos:end="1781:25">gen_shift</name><argument_list pos:start="1781:26" pos:end="1781:51">(<argument pos:start="1781:27" pos:end="1781:27"><expr pos:start="1781:27" pos:end="1781:27"><name pos:start="1781:27" pos:end="1781:27">s</name></expr></argument>, <argument pos:start="1781:30" pos:end="1781:31"><expr pos:start="1781:30" pos:end="1781:31"><name pos:start="1781:30" pos:end="1781:31">op</name></expr></argument>, <argument pos:start="1781:34" pos:end="1781:35"><expr pos:start="1781:34" pos:end="1781:35"><name pos:start="1781:34" pos:end="1781:35">ot</name></expr></argument>, <argument pos:start="1781:38" pos:end="1781:42"><expr pos:start="1781:38" pos:end="1781:42"><name pos:start="1781:38" pos:end="1781:42">opreg</name></expr></argument>, <argument pos:start="1781:45" pos:end="1781:50"><expr pos:start="1781:45" pos:end="1781:50"><name pos:start="1781:45" pos:end="1781:50">OR_ECX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1783:15" pos:end="1793:13">else <block pos:start="1783:20" pos:end="1793:13">{<block_content pos:start="1785:17" pos:end="1791:52">

                <if_stmt pos:start="1785:17" pos:end="1789:17"><if pos:start="1785:17" pos:end="1789:17">if <condition pos:start="1785:20" pos:end="1785:31">(<expr pos:start="1785:21" pos:end="1785:30"><name pos:start="1785:21" pos:end="1785:25">shift</name> <operator pos:start="1785:27" pos:end="1785:28">==</operator> <literal type="number" pos:start="1785:30" pos:end="1785:30">2</literal></expr>)</condition> <block pos:start="1785:33" pos:end="1789:17">{<block_content pos:start="1787:21" pos:end="1787:42">

                    <expr_stmt pos:start="1787:21" pos:end="1787:42"><expr pos:start="1787:21" pos:end="1787:41"><name pos:start="1787:21" pos:end="1787:25">shift</name> <operator pos:start="1787:27" pos:end="1787:27">=</operator> <call pos:start="1787:29" pos:end="1787:41"><name pos:start="1787:29" pos:end="1787:32">ldub</name><argument_list pos:start="1787:33" pos:end="1787:41">(<argument pos:start="1787:34" pos:end="1787:40"><expr pos:start="1787:34" pos:end="1787:40"><name pos:start="1787:34" pos:end="1787:38"><name pos:start="1787:34" pos:end="1787:34">s</name><operator pos:start="1787:35" pos:end="1787:36">-&gt;</operator><name pos:start="1787:37" pos:end="1787:38">pc</name></name><operator pos:start="1787:39" pos:end="1787:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="1791:17" pos:end="1791:52"><expr pos:start="1791:17" pos:end="1791:51"><call pos:start="1791:17" pos:end="1791:51"><name pos:start="1791:17" pos:end="1791:26">gen_shifti</name><argument_list pos:start="1791:27" pos:end="1791:51">(<argument pos:start="1791:28" pos:end="1791:28"><expr pos:start="1791:28" pos:end="1791:28"><name pos:start="1791:28" pos:end="1791:28">s</name></expr></argument>, <argument pos:start="1791:31" pos:end="1791:32"><expr pos:start="1791:31" pos:end="1791:32"><name pos:start="1791:31" pos:end="1791:32">op</name></expr></argument>, <argument pos:start="1791:35" pos:end="1791:36"><expr pos:start="1791:35" pos:end="1791:36"><name pos:start="1791:35" pos:end="1791:36">ot</name></expr></argument>, <argument pos:start="1791:39" pos:end="1791:43"><expr pos:start="1791:39" pos:end="1791:43"><name pos:start="1791:39" pos:end="1791:43">opreg</name></expr></argument>, <argument pos:start="1791:46" pos:end="1791:50"><expr pos:start="1791:46" pos:end="1791:50"><name pos:start="1791:46" pos:end="1791:50">shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>



            <if_stmt pos:start="1797:13" pos:end="1801:13"><if pos:start="1797:13" pos:end="1801:13">if <condition pos:start="1797:16" pos:end="1797:25">(<expr pos:start="1797:17" pos:end="1797:24"><name pos:start="1797:17" pos:end="1797:19">mod</name> <operator pos:start="1797:21" pos:end="1797:22">!=</operator> <literal type="number" pos:start="1797:24" pos:end="1797:24">3</literal></expr>)</condition> <block pos:start="1797:27" pos:end="1801:13">{<block_content pos:start="1799:17" pos:end="1799:38">

                <expr_stmt pos:start="1799:17" pos:end="1799:38"><expr pos:start="1799:17" pos:end="1799:37"><name pos:start="1799:17" pos:end="1799:35"><name pos:start="1799:17" pos:end="1799:31">gen_op_st_T0_A0</name><index pos:start="1799:32" pos:end="1799:35">[<expr pos:start="1799:33" pos:end="1799:34"><name pos:start="1799:33" pos:end="1799:34">ot</name></expr>]</index></name><operator pos:start="1799:36" pos:end="1799:36">(</operator><operator pos:start="1799:37" pos:end="1799:37">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block>

        <break pos:start="1805:9" pos:end="1805:14">break;</break>

    <case pos:start="1807:5" pos:end="1807:14">case <expr pos:start="1807:10" pos:end="1807:13"><literal type="number" pos:start="1807:10" pos:end="1807:13">0xd0</literal></expr>:</case>

    <case pos:start="1809:5" pos:end="1809:14">case <expr pos:start="1809:10" pos:end="1809:13"><literal type="number" pos:start="1809:10" pos:end="1809:13">0xd1</literal></expr>:</case>

        <comment type="block" pos:start="1811:9" pos:end="1811:24">/* shift Ev,1 */</comment>

        <expr_stmt pos:start="1813:9" pos:end="1813:18"><expr pos:start="1813:9" pos:end="1813:17"><name pos:start="1813:9" pos:end="1813:13">shift</name> <operator pos:start="1813:15" pos:end="1813:15">=</operator> <literal type="number" pos:start="1813:17" pos:end="1813:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1815:9" pos:end="1815:18">goto <name pos:start="1815:14" pos:end="1815:17">grp2</name>;</goto>

    <case pos:start="1817:5" pos:end="1817:14">case <expr pos:start="1817:10" pos:end="1817:13"><literal type="number" pos:start="1817:10" pos:end="1817:13">0xd2</literal></expr>:</case>

    <case pos:start="1819:5" pos:end="1819:14">case <expr pos:start="1819:10" pos:end="1819:13"><literal type="number" pos:start="1819:10" pos:end="1819:13">0xd3</literal></expr>:</case>

        <comment type="block" pos:start="1821:9" pos:end="1821:25">/* shift Ev,cl */</comment>

        <expr_stmt pos:start="1823:9" pos:end="1823:18"><expr pos:start="1823:9" pos:end="1823:17"><name pos:start="1823:9" pos:end="1823:13">shift</name> <operator pos:start="1823:15" pos:end="1823:15">=</operator> <literal type="number" pos:start="1823:17" pos:end="1823:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="1825:9" pos:end="1825:18">goto <name pos:start="1825:14" pos:end="1825:17">grp2</name>;</goto>



    <case pos:start="1829:5" pos:end="1829:15">case <expr pos:start="1829:10" pos:end="1829:14"><literal type="number" pos:start="1829:10" pos:end="1829:14">0x1a4</literal></expr>:</case> <comment type="block" pos:start="1829:17" pos:end="1829:30">/* shld imm */</comment>

        <expr_stmt pos:start="1831:9" pos:end="1831:15"><expr pos:start="1831:9" pos:end="1831:14"><name pos:start="1831:9" pos:end="1831:10">op</name> <operator pos:start="1831:12" pos:end="1831:12">=</operator> <literal type="number" pos:start="1831:14" pos:end="1831:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1833:9" pos:end="1833:18"><expr pos:start="1833:9" pos:end="1833:17"><name pos:start="1833:9" pos:end="1833:13">shift</name> <operator pos:start="1833:15" pos:end="1833:15">=</operator> <literal type="number" pos:start="1833:17" pos:end="1833:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1835:9" pos:end="1835:23">goto <name pos:start="1835:14" pos:end="1835:22">do_shiftd</name>;</goto>

    <case pos:start="1837:5" pos:end="1837:15">case <expr pos:start="1837:10" pos:end="1837:14"><literal type="number" pos:start="1837:10" pos:end="1837:14">0x1a5</literal></expr>:</case> <comment type="block" pos:start="1837:17" pos:end="1837:29">/* shld cl */</comment>

        <expr_stmt pos:start="1839:9" pos:end="1839:15"><expr pos:start="1839:9" pos:end="1839:14"><name pos:start="1839:9" pos:end="1839:10">op</name> <operator pos:start="1839:12" pos:end="1839:12">=</operator> <literal type="number" pos:start="1839:14" pos:end="1839:14">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1841:9" pos:end="1841:18"><expr pos:start="1841:9" pos:end="1841:17"><name pos:start="1841:9" pos:end="1841:13">shift</name> <operator pos:start="1841:15" pos:end="1841:15">=</operator> <literal type="number" pos:start="1841:17" pos:end="1841:17">0</literal></expr>;</expr_stmt>

        <goto pos:start="1843:9" pos:end="1843:23">goto <name pos:start="1843:14" pos:end="1843:22">do_shiftd</name>;</goto>

    <case pos:start="1845:5" pos:end="1845:15">case <expr pos:start="1845:10" pos:end="1845:14"><literal type="number" pos:start="1845:10" pos:end="1845:14">0x1ac</literal></expr>:</case> <comment type="block" pos:start="1845:17" pos:end="1845:30">/* shrd imm */</comment>

        <expr_stmt pos:start="1847:9" pos:end="1847:15"><expr pos:start="1847:9" pos:end="1847:14"><name pos:start="1847:9" pos:end="1847:10">op</name> <operator pos:start="1847:12" pos:end="1847:12">=</operator> <literal type="number" pos:start="1847:14" pos:end="1847:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1849:9" pos:end="1849:18"><expr pos:start="1849:9" pos:end="1849:17"><name pos:start="1849:9" pos:end="1849:13">shift</name> <operator pos:start="1849:15" pos:end="1849:15">=</operator> <literal type="number" pos:start="1849:17" pos:end="1849:17">1</literal></expr>;</expr_stmt>

        <goto pos:start="1851:9" pos:end="1851:23">goto <name pos:start="1851:14" pos:end="1851:22">do_shiftd</name>;</goto>

    <case pos:start="1853:5" pos:end="1853:15">case <expr pos:start="1853:10" pos:end="1853:14"><literal type="number" pos:start="1853:10" pos:end="1853:14">0x1ad</literal></expr>:</case> <comment type="block" pos:start="1853:17" pos:end="1853:29">/* shrd cl */</comment>

        <expr_stmt pos:start="1855:9" pos:end="1855:15"><expr pos:start="1855:9" pos:end="1855:14"><name pos:start="1855:9" pos:end="1855:10">op</name> <operator pos:start="1855:12" pos:end="1855:12">=</operator> <literal type="number" pos:start="1855:14" pos:end="1855:14">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1857:9" pos:end="1857:18"><expr pos:start="1857:9" pos:end="1857:17"><name pos:start="1857:9" pos:end="1857:13">shift</name> <operator pos:start="1857:15" pos:end="1857:15">=</operator> <literal type="number" pos:start="1857:17" pos:end="1857:17">0</literal></expr>;</expr_stmt>

    <label pos:start="1859:5" pos:end="1859:14"><name pos:start="1859:5" pos:end="1859:13">do_shiftd</name>:</label>

        <expr_stmt pos:start="1861:9" pos:end="1861:39"><expr pos:start="1861:9" pos:end="1861:38"><name pos:start="1861:9" pos:end="1861:10">ot</name> <operator pos:start="1861:12" pos:end="1861:12">=</operator> <ternary pos:start="1861:14" pos:end="1861:38"><condition pos:start="1861:14" pos:end="1861:20"><expr pos:start="1861:14" pos:end="1861:18"><name pos:start="1861:14" pos:end="1861:18">dflag</name></expr> ?</condition><then pos:start="1861:22" pos:end="1861:28"> <expr pos:start="1861:22" pos:end="1861:28"><name pos:start="1861:22" pos:end="1861:28">OT_LONG</name></expr> </then><else pos:start="1861:30" pos:end="1861:38">: <expr pos:start="1861:32" pos:end="1861:38"><name pos:start="1861:32" pos:end="1861:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="1863:9" pos:end="1863:30"><expr pos:start="1863:9" pos:end="1863:29"><name pos:start="1863:9" pos:end="1863:13">modrm</name> <operator pos:start="1863:15" pos:end="1863:15">=</operator> <call pos:start="1863:17" pos:end="1863:29"><name pos:start="1863:17" pos:end="1863:20">ldub</name><argument_list pos:start="1863:21" pos:end="1863:29">(<argument pos:start="1863:22" pos:end="1863:28"><expr pos:start="1863:22" pos:end="1863:28"><name pos:start="1863:22" pos:end="1863:26"><name pos:start="1863:22" pos:end="1863:22">s</name><operator pos:start="1863:23" pos:end="1863:24">-&gt;</operator><name pos:start="1863:25" pos:end="1863:26">pc</name></name><operator pos:start="1863:27" pos:end="1863:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1865:9" pos:end="1865:31"><expr pos:start="1865:9" pos:end="1865:30"><name pos:start="1865:9" pos:end="1865:11">mod</name> <operator pos:start="1865:13" pos:end="1865:13">=</operator> <operator pos:start="1865:15" pos:end="1865:15">(</operator><name pos:start="1865:16" pos:end="1865:20">modrm</name> <operator pos:start="1865:22" pos:end="1865:23">&gt;&gt;</operator> <literal type="number" pos:start="1865:25" pos:end="1865:25">6</literal><operator pos:start="1865:26" pos:end="1865:26">)</operator> <operator pos:start="1865:28" pos:end="1865:28">&amp;</operator> <literal type="number" pos:start="1865:30" pos:end="1865:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1867:9" pos:end="1867:23"><expr pos:start="1867:9" pos:end="1867:22"><name pos:start="1867:9" pos:end="1867:10">rm</name> <operator pos:start="1867:12" pos:end="1867:12">=</operator> <name pos:start="1867:14" pos:end="1867:18">modrm</name> <operator pos:start="1867:20" pos:end="1867:20">&amp;</operator> <literal type="number" pos:start="1867:22" pos:end="1867:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1869:9" pos:end="1869:31"><expr pos:start="1869:9" pos:end="1869:30"><name pos:start="1869:9" pos:end="1869:11">reg</name> <operator pos:start="1869:13" pos:end="1869:13">=</operator> <operator pos:start="1869:15" pos:end="1869:15">(</operator><name pos:start="1869:16" pos:end="1869:20">modrm</name> <operator pos:start="1869:22" pos:end="1869:23">&gt;&gt;</operator> <literal type="number" pos:start="1869:25" pos:end="1869:25">3</literal><operator pos:start="1869:26" pos:end="1869:26">)</operator> <operator pos:start="1869:28" pos:end="1869:28">&amp;</operator> <literal type="number" pos:start="1869:30" pos:end="1869:30">7</literal></expr>;</expr_stmt>

        

        <if_stmt pos:start="1873:9" pos:end="1883:9"><if pos:start="1873:9" pos:end="1879:9">if <condition pos:start="1873:12" pos:end="1873:21">(<expr pos:start="1873:13" pos:end="1873:20"><name pos:start="1873:13" pos:end="1873:15">mod</name> <operator pos:start="1873:17" pos:end="1873:18">!=</operator> <literal type="number" pos:start="1873:20" pos:end="1873:20">3</literal></expr>)</condition> <block pos:start="1873:23" pos:end="1879:9">{<block_content pos:start="1875:13" pos:end="1877:34">

            <expr_stmt pos:start="1875:13" pos:end="1875:61"><expr pos:start="1875:13" pos:end="1875:60"><call pos:start="1875:13" pos:end="1875:60"><name pos:start="1875:13" pos:end="1875:25">gen_lea_modrm</name><argument_list pos:start="1875:26" pos:end="1875:60">(<argument pos:start="1875:27" pos:end="1875:27"><expr pos:start="1875:27" pos:end="1875:27"><name pos:start="1875:27" pos:end="1875:27">s</name></expr></argument>, <argument pos:start="1875:30" pos:end="1875:34"><expr pos:start="1875:30" pos:end="1875:34"><name pos:start="1875:30" pos:end="1875:34">modrm</name></expr></argument>, <argument pos:start="1875:37" pos:end="1875:45"><expr pos:start="1875:37" pos:end="1875:45"><operator pos:start="1875:37" pos:end="1875:37">&amp;</operator><name pos:start="1875:38" pos:end="1875:45">reg_addr</name></expr></argument>, <argument pos:start="1875:48" pos:end="1875:59"><expr pos:start="1875:48" pos:end="1875:59"><operator pos:start="1875:48" pos:end="1875:48">&amp;</operator><name pos:start="1875:49" pos:end="1875:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1877:13" pos:end="1877:34"><expr pos:start="1877:13" pos:end="1877:33"><name pos:start="1877:13" pos:end="1877:31"><name pos:start="1877:13" pos:end="1877:27">gen_op_ld_T0_A0</name><index pos:start="1877:28" pos:end="1877:31">[<expr pos:start="1877:29" pos:end="1877:30"><name pos:start="1877:29" pos:end="1877:30">ot</name></expr>]</index></name><operator pos:start="1877:32" pos:end="1877:32">(</operator><operator pos:start="1877:33" pos:end="1877:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1879:11" pos:end="1883:9">else <block pos:start="1879:16" pos:end="1883:9">{<block_content pos:start="1881:13" pos:end="1881:43">

            <expr_stmt pos:start="1881:13" pos:end="1881:43"><expr pos:start="1881:13" pos:end="1881:42"><name pos:start="1881:13" pos:end="1881:40"><name pos:start="1881:13" pos:end="1881:29">gen_op_mov_TN_reg</name><index pos:start="1881:30" pos:end="1881:33">[<expr pos:start="1881:31" pos:end="1881:32"><name pos:start="1881:31" pos:end="1881:32">ot</name></expr>]</index><index pos:start="1881:34" pos:end="1881:36">[<expr pos:start="1881:35" pos:end="1881:35"><literal type="number" pos:start="1881:35" pos:end="1881:35">0</literal></expr>]</index><index pos:start="1881:37" pos:end="1881:40">[<expr pos:start="1881:38" pos:end="1881:39"><name pos:start="1881:38" pos:end="1881:39">rm</name></expr>]</index></name><operator pos:start="1881:41" pos:end="1881:41">(</operator><operator pos:start="1881:42" pos:end="1881:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="1885:9" pos:end="1885:40"><expr pos:start="1885:9" pos:end="1885:39"><name pos:start="1885:9" pos:end="1885:37"><name pos:start="1885:9" pos:end="1885:25">gen_op_mov_TN_reg</name><index pos:start="1885:26" pos:end="1885:29">[<expr pos:start="1885:27" pos:end="1885:28"><name pos:start="1885:27" pos:end="1885:28">ot</name></expr>]</index><index pos:start="1885:30" pos:end="1885:32">[<expr pos:start="1885:31" pos:end="1885:31"><literal type="number" pos:start="1885:31" pos:end="1885:31">1</literal></expr>]</index><index pos:start="1885:33" pos:end="1885:37">[<expr pos:start="1885:34" pos:end="1885:36"><name pos:start="1885:34" pos:end="1885:36">reg</name></expr>]</index></name><operator pos:start="1885:38" pos:end="1885:38">(</operator><operator pos:start="1885:39" pos:end="1885:39">)</operator></expr>;</expr_stmt>

        

        <if_stmt pos:start="1889:9" pos:end="1919:9"><if pos:start="1889:9" pos:end="1909:9">if <condition pos:start="1889:12" pos:end="1889:18">(<expr pos:start="1889:13" pos:end="1889:17"><name pos:start="1889:13" pos:end="1889:17">shift</name></expr>)</condition> <block pos:start="1889:20" pos:end="1909:9">{<block_content pos:start="1891:13" pos:end="1907:13">

            <expr_stmt pos:start="1891:13" pos:end="1891:32"><expr pos:start="1891:13" pos:end="1891:31"><name pos:start="1891:13" pos:end="1891:15">val</name> <operator pos:start="1891:17" pos:end="1891:17">=</operator> <call pos:start="1891:19" pos:end="1891:31"><name pos:start="1891:19" pos:end="1891:22">ldub</name><argument_list pos:start="1891:23" pos:end="1891:31">(<argument pos:start="1891:24" pos:end="1891:30"><expr pos:start="1891:24" pos:end="1891:30"><name pos:start="1891:24" pos:end="1891:28"><name pos:start="1891:24" pos:end="1891:24">s</name><operator pos:start="1891:25" pos:end="1891:26">-&gt;</operator><name pos:start="1891:27" pos:end="1891:28">pc</name></name><operator pos:start="1891:29" pos:end="1891:30">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1893:13" pos:end="1893:24"><expr pos:start="1893:13" pos:end="1893:23"><name pos:start="1893:13" pos:end="1893:15">val</name> <operator pos:start="1893:17" pos:end="1893:18">&amp;=</operator> <literal type="number" pos:start="1893:20" pos:end="1893:23">0x1f</literal></expr>;</expr_stmt>

            <if_stmt pos:start="1895:13" pos:end="1907:13"><if pos:start="1895:13" pos:end="1907:13">if <condition pos:start="1895:16" pos:end="1895:20">(<expr pos:start="1895:17" pos:end="1895:19"><name pos:start="1895:17" pos:end="1895:19">val</name></expr>)</condition> <block pos:start="1895:22" pos:end="1907:13">{<block_content pos:start="1897:17" pos:end="1905:47">

                <expr_stmt pos:start="1897:17" pos:end="1897:65"><expr pos:start="1897:17" pos:end="1897:64"><name pos:start="1897:17" pos:end="1897:59"><name pos:start="1897:17" pos:end="1897:41">gen_op_shiftd_T0_T1_im_cc</name><index pos:start="1897:42" pos:end="1897:55">[<expr pos:start="1897:43" pos:end="1897:54"><name pos:start="1897:43" pos:end="1897:44">ot</name> <operator pos:start="1897:46" pos:end="1897:46">-</operator> <name pos:start="1897:48" pos:end="1897:54">OT_WORD</name></expr>]</index><index pos:start="1897:56" pos:end="1897:59">[<expr pos:start="1897:57" pos:end="1897:58"><name pos:start="1897:57" pos:end="1897:58">op</name></expr>]</index></name><operator pos:start="1897:60" pos:end="1897:60">(</operator><name pos:start="1897:61" pos:end="1897:63">val</name><operator pos:start="1897:64" pos:end="1897:64">)</operator></expr>;</expr_stmt>

                <if_stmt pos:start="1899:17" pos:end="1905:47"><if pos:start="1899:17" pos:end="1901:47">if <condition pos:start="1899:20" pos:end="1899:45">(<expr pos:start="1899:21" pos:end="1899:44"><name pos:start="1899:21" pos:end="1899:22">op</name> <operator pos:start="1899:24" pos:end="1899:25">==</operator> <literal type="number" pos:start="1899:27" pos:end="1899:27">0</literal> <operator pos:start="1899:29" pos:end="1899:30">&amp;&amp;</operator> <name pos:start="1899:32" pos:end="1899:33">ot</name> <operator pos:start="1899:35" pos:end="1899:36">!=</operator> <name pos:start="1899:38" pos:end="1899:44">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="1901:21" pos:end="1901:47"><block_content pos:start="1901:21" pos:end="1901:47">

                    <expr_stmt pos:start="1901:21" pos:end="1901:47"><expr pos:start="1901:21" pos:end="1901:46"><name pos:start="1901:21" pos:end="1901:28"><name pos:start="1901:21" pos:end="1901:21">s</name><operator pos:start="1901:22" pos:end="1901:23">-&gt;</operator><name pos:start="1901:24" pos:end="1901:28">cc_op</name></name> <operator pos:start="1901:30" pos:end="1901:30">=</operator> <name pos:start="1901:32" pos:end="1901:41">CC_OP_SHLB</name> <operator pos:start="1901:43" pos:end="1901:43">+</operator> <name pos:start="1901:45" pos:end="1901:46">ot</name></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="1903:17" pos:end="1905:47">else<block type="pseudo" pos:start="1905:21" pos:end="1905:47"><block_content pos:start="1905:21" pos:end="1905:47">

                    <expr_stmt pos:start="1905:21" pos:end="1905:47"><expr pos:start="1905:21" pos:end="1905:46"><name pos:start="1905:21" pos:end="1905:28"><name pos:start="1905:21" pos:end="1905:21">s</name><operator pos:start="1905:22" pos:end="1905:23">-&gt;</operator><name pos:start="1905:24" pos:end="1905:28">cc_op</name></name> <operator pos:start="1905:30" pos:end="1905:30">=</operator> <name pos:start="1905:32" pos:end="1905:41">CC_OP_SARB</name> <operator pos:start="1905:43" pos:end="1905:43">+</operator> <name pos:start="1905:45" pos:end="1905:46">ot</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="1909:11" pos:end="1919:9">else <block pos:start="1909:16" pos:end="1919:9">{<block_content pos:start="1911:13" pos:end="1917:37">

            <if_stmt pos:start="1911:13" pos:end="1913:43"><if pos:start="1911:13" pos:end="1913:43">if <condition pos:start="1911:16" pos:end="1911:42">(<expr pos:start="1911:17" pos:end="1911:41"><name pos:start="1911:17" pos:end="1911:24"><name pos:start="1911:17" pos:end="1911:17">s</name><operator pos:start="1911:18" pos:end="1911:19">-&gt;</operator><name pos:start="1911:20" pos:end="1911:24">cc_op</name></name> <operator pos:start="1911:26" pos:end="1911:27">!=</operator> <name pos:start="1911:29" pos:end="1911:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="1913:17" pos:end="1913:43"><block_content pos:start="1913:17" pos:end="1913:43">

                <expr_stmt pos:start="1913:17" pos:end="1913:43"><expr pos:start="1913:17" pos:end="1913:42"><call pos:start="1913:17" pos:end="1913:42"><name pos:start="1913:17" pos:end="1913:32">gen_op_set_cc_op</name><argument_list pos:start="1913:33" pos:end="1913:42">(<argument pos:start="1913:34" pos:end="1913:41"><expr pos:start="1913:34" pos:end="1913:41"><name pos:start="1913:34" pos:end="1913:41"><name pos:start="1913:34" pos:end="1913:34">s</name><operator pos:start="1913:35" pos:end="1913:36">-&gt;</operator><name pos:start="1913:37" pos:end="1913:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1915:13" pos:end="1915:59"><expr pos:start="1915:13" pos:end="1915:58"><name pos:start="1915:13" pos:end="1915:56"><name pos:start="1915:13" pos:end="1915:38">gen_op_shiftd_T0_T1_ECX_cc</name><index pos:start="1915:39" pos:end="1915:52">[<expr pos:start="1915:40" pos:end="1915:51"><name pos:start="1915:40" pos:end="1915:41">ot</name> <operator pos:start="1915:43" pos:end="1915:43">-</operator> <name pos:start="1915:45" pos:end="1915:51">OT_WORD</name></expr>]</index><index pos:start="1915:53" pos:end="1915:56">[<expr pos:start="1915:54" pos:end="1915:55"><name pos:start="1915:54" pos:end="1915:55">op</name></expr>]</index></name><operator pos:start="1915:57" pos:end="1915:57">(</operator><operator pos:start="1915:58" pos:end="1915:58">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1917:13" pos:end="1917:37"><expr pos:start="1917:13" pos:end="1917:36"><name pos:start="1917:13" pos:end="1917:20"><name pos:start="1917:13" pos:end="1917:13">s</name><operator pos:start="1917:14" pos:end="1917:15">-&gt;</operator><name pos:start="1917:16" pos:end="1917:20">cc_op</name></name> <operator pos:start="1917:22" pos:end="1917:22">=</operator> <name pos:start="1917:24" pos:end="1917:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="1917:39" pos:end="1917:70">/* cannot predict flags after */</comment>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="1921:9" pos:end="1929:9"><if pos:start="1921:9" pos:end="1925:9">if <condition pos:start="1921:12" pos:end="1921:21">(<expr pos:start="1921:13" pos:end="1921:20"><name pos:start="1921:13" pos:end="1921:15">mod</name> <operator pos:start="1921:17" pos:end="1921:18">!=</operator> <literal type="number" pos:start="1921:20" pos:end="1921:20">3</literal></expr>)</condition> <block pos:start="1921:23" pos:end="1925:9">{<block_content pos:start="1923:13" pos:end="1923:34">

            <expr_stmt pos:start="1923:13" pos:end="1923:34"><expr pos:start="1923:13" pos:end="1923:33"><name pos:start="1923:13" pos:end="1923:31"><name pos:start="1923:13" pos:end="1923:27">gen_op_st_T0_A0</name><index pos:start="1923:28" pos:end="1923:31">[<expr pos:start="1923:29" pos:end="1923:30"><name pos:start="1923:29" pos:end="1923:30">ot</name></expr>]</index></name><operator pos:start="1923:32" pos:end="1923:32">(</operator><operator pos:start="1923:33" pos:end="1923:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="1925:11" pos:end="1929:9">else <block pos:start="1925:16" pos:end="1929:9">{<block_content pos:start="1927:13" pos:end="1927:40">

            <expr_stmt pos:start="1927:13" pos:end="1927:40"><expr pos:start="1927:13" pos:end="1927:39"><name pos:start="1927:13" pos:end="1927:37"><name pos:start="1927:13" pos:end="1927:29">gen_op_mov_reg_T0</name><index pos:start="1927:30" pos:end="1927:33">[<expr pos:start="1927:31" pos:end="1927:32"><name pos:start="1927:31" pos:end="1927:32">ot</name></expr>]</index><index pos:start="1927:34" pos:end="1927:37">[<expr pos:start="1927:35" pos:end="1927:36"><name pos:start="1927:35" pos:end="1927:36">rm</name></expr>]</index></name><operator pos:start="1927:38" pos:end="1927:38">(</operator><operator pos:start="1927:39" pos:end="1927:39">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="1931:9" pos:end="1931:14">break;</break>



        <comment type="block" format="doxygen" pos:start="1935:9" pos:end="1935:34">/************************/</comment>

        <comment type="block" pos:start="1937:9" pos:end="1937:20">/* floats */</comment>

    <case pos:start="1939:5" pos:end="1939:23">case <expr pos:start="1939:10" pos:end="1939:22"><literal type="number" pos:start="1939:10" pos:end="1939:13">0xd8</literal> <operator pos:start="1939:15" pos:end="1939:17">...</operator> <literal type="number" pos:start="1939:19" pos:end="1939:22">0xdf</literal></expr>:</case> 

        <expr_stmt pos:start="1941:9" pos:end="1941:30"><expr pos:start="1941:9" pos:end="1941:29"><name pos:start="1941:9" pos:end="1941:13">modrm</name> <operator pos:start="1941:15" pos:end="1941:15">=</operator> <call pos:start="1941:17" pos:end="1941:29"><name pos:start="1941:17" pos:end="1941:20">ldub</name><argument_list pos:start="1941:21" pos:end="1941:29">(<argument pos:start="1941:22" pos:end="1941:28"><expr pos:start="1941:22" pos:end="1941:28"><name pos:start="1941:22" pos:end="1941:26"><name pos:start="1941:22" pos:end="1941:22">s</name><operator pos:start="1941:23" pos:end="1941:24">-&gt;</operator><name pos:start="1941:25" pos:end="1941:26">pc</name></name><operator pos:start="1941:27" pos:end="1941:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="1943:9" pos:end="1943:31"><expr pos:start="1943:9" pos:end="1943:30"><name pos:start="1943:9" pos:end="1943:11">mod</name> <operator pos:start="1943:13" pos:end="1943:13">=</operator> <operator pos:start="1943:15" pos:end="1943:15">(</operator><name pos:start="1943:16" pos:end="1943:20">modrm</name> <operator pos:start="1943:22" pos:end="1943:23">&gt;&gt;</operator> <literal type="number" pos:start="1943:25" pos:end="1943:25">6</literal><operator pos:start="1943:26" pos:end="1943:26">)</operator> <operator pos:start="1943:28" pos:end="1943:28">&amp;</operator> <literal type="number" pos:start="1943:30" pos:end="1943:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1945:9" pos:end="1945:23"><expr pos:start="1945:9" pos:end="1945:22"><name pos:start="1945:9" pos:end="1945:10">rm</name> <operator pos:start="1945:12" pos:end="1945:12">=</operator> <name pos:start="1945:14" pos:end="1945:18">modrm</name> <operator pos:start="1945:20" pos:end="1945:20">&amp;</operator> <literal type="number" pos:start="1945:22" pos:end="1945:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="1947:9" pos:end="1947:49"><expr pos:start="1947:9" pos:end="1947:48"><name pos:start="1947:9" pos:end="1947:10">op</name> <operator pos:start="1947:12" pos:end="1947:12">=</operator> <operator pos:start="1947:14" pos:end="1947:14">(</operator><operator pos:start="1947:15" pos:end="1947:15">(</operator><name pos:start="1947:16" pos:end="1947:16">b</name> <operator pos:start="1947:18" pos:end="1947:18">&amp;</operator> <literal type="number" pos:start="1947:20" pos:end="1947:20">7</literal><operator pos:start="1947:21" pos:end="1947:21">)</operator> <operator pos:start="1947:23" pos:end="1947:24">&lt;&lt;</operator> <literal type="number" pos:start="1947:26" pos:end="1947:26">3</literal><operator pos:start="1947:27" pos:end="1947:27">)</operator> <operator pos:start="1947:29" pos:end="1947:29">|</operator> <operator pos:start="1947:31" pos:end="1947:31">(</operator><operator pos:start="1947:32" pos:end="1947:32">(</operator><name pos:start="1947:33" pos:end="1947:37">modrm</name> <operator pos:start="1947:39" pos:end="1947:40">&gt;&gt;</operator> <literal type="number" pos:start="1947:42" pos:end="1947:42">3</literal><operator pos:start="1947:43" pos:end="1947:43">)</operator> <operator pos:start="1947:45" pos:end="1947:45">&amp;</operator> <literal type="number" pos:start="1947:47" pos:end="1947:47">7</literal><operator pos:start="1947:48" pos:end="1947:48">)</operator></expr>;</expr_stmt>

        

        <if_stmt pos:start="1951:9" pos:end="2645:9"><if pos:start="1951:9" pos:end="2199:9">if <condition pos:start="1951:12" pos:end="1951:21">(<expr pos:start="1951:13" pos:end="1951:20"><name pos:start="1951:13" pos:end="1951:15">mod</name> <operator pos:start="1951:17" pos:end="1951:18">!=</operator> <literal type="number" pos:start="1951:20" pos:end="1951:20">3</literal></expr>)</condition> <block pos:start="1951:23" pos:end="2199:9">{<block_content pos:start="1955:13" pos:end="2197:13">

            <comment type="block" pos:start="1953:13" pos:end="1953:27">/* memory op */</comment>

            <expr_stmt pos:start="1955:13" pos:end="1955:61"><expr pos:start="1955:13" pos:end="1955:60"><call pos:start="1955:13" pos:end="1955:60"><name pos:start="1955:13" pos:end="1955:25">gen_lea_modrm</name><argument_list pos:start="1955:26" pos:end="1955:60">(<argument pos:start="1955:27" pos:end="1955:27"><expr pos:start="1955:27" pos:end="1955:27"><name pos:start="1955:27" pos:end="1955:27">s</name></expr></argument>, <argument pos:start="1955:30" pos:end="1955:34"><expr pos:start="1955:30" pos:end="1955:34"><name pos:start="1955:30" pos:end="1955:34">modrm</name></expr></argument>, <argument pos:start="1955:37" pos:end="1955:45"><expr pos:start="1955:37" pos:end="1955:45"><operator pos:start="1955:37" pos:end="1955:37">&amp;</operator><name pos:start="1955:38" pos:end="1955:45">reg_addr</name></expr></argument>, <argument pos:start="1955:48" pos:end="1955:59"><expr pos:start="1955:48" pos:end="1955:59"><operator pos:start="1955:48" pos:end="1955:48">&amp;</operator><name pos:start="1955:49" pos:end="1955:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="1957:13" pos:end="2197:13">switch<condition pos:start="1957:19" pos:end="1957:22">(<expr pos:start="1957:20" pos:end="1957:21"><name pos:start="1957:20" pos:end="1957:21">op</name></expr>)</condition> <block pos:start="1957:24" pos:end="2197:13">{<block_content pos:start="1959:13" pos:end="2195:32">

            <case pos:start="1959:13" pos:end="1959:31">case <expr pos:start="1959:18" pos:end="1959:30"><literal type="number" pos:start="1959:18" pos:end="1959:21">0x00</literal> <operator pos:start="1959:23" pos:end="1959:25">...</operator> <literal type="number" pos:start="1959:27" pos:end="1959:30">0x07</literal></expr>:</case> <comment type="block" pos:start="1959:33" pos:end="1959:43">/* fxxxs */</comment>

            <case pos:start="1961:13" pos:end="1961:31">case <expr pos:start="1961:18" pos:end="1961:30"><literal type="number" pos:start="1961:18" pos:end="1961:21">0x10</literal> <operator pos:start="1961:23" pos:end="1961:25">...</operator> <literal type="number" pos:start="1961:27" pos:end="1961:30">0x17</literal></expr>:</case> <comment type="block" pos:start="1961:33" pos:end="1961:44">/* fixxxl */</comment>

            <case pos:start="1963:13" pos:end="1963:31">case <expr pos:start="1963:18" pos:end="1963:30"><literal type="number" pos:start="1963:18" pos:end="1963:21">0x20</literal> <operator pos:start="1963:23" pos:end="1963:25">...</operator> <literal type="number" pos:start="1963:27" pos:end="1963:30">0x27</literal></expr>:</case> <comment type="block" pos:start="1963:33" pos:end="1963:43">/* fxxxl */</comment>

            <case pos:start="1965:13" pos:end="1965:31">case <expr pos:start="1965:18" pos:end="1965:30"><literal type="number" pos:start="1965:18" pos:end="1965:21">0x30</literal> <operator pos:start="1965:23" pos:end="1965:25">...</operator> <literal type="number" pos:start="1965:27" pos:end="1965:30">0x37</literal></expr>:</case> <comment type="block" pos:start="1965:33" pos:end="1965:43">/* fixxx */</comment>

                <block pos:start="1967:17" pos:end="2017:17">{<block_content pos:start="1969:21" pos:end="2015:21">

                    <decl_stmt pos:start="1969:21" pos:end="1969:28"><decl pos:start="1969:21" pos:end="1969:27"><type pos:start="1969:21" pos:end="1969:23"><name pos:start="1969:21" pos:end="1969:23">int</name></type> <name pos:start="1969:25" pos:end="1969:27">op1</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="1971:21" pos:end="1971:33"><expr pos:start="1971:21" pos:end="1971:32"><name pos:start="1971:21" pos:end="1971:23">op1</name> <operator pos:start="1971:25" pos:end="1971:25">=</operator> <name pos:start="1971:27" pos:end="1971:28">op</name> <operator pos:start="1971:30" pos:end="1971:30">&amp;</operator> <literal type="number" pos:start="1971:32" pos:end="1971:32">7</literal></expr>;</expr_stmt>



                    <switch pos:start="1975:21" pos:end="2003:21">switch<condition pos:start="1975:27" pos:end="1975:35">(<expr pos:start="1975:28" pos:end="1975:34"><name pos:start="1975:28" pos:end="1975:29">op</name> <operator pos:start="1975:31" pos:end="1975:32">&gt;&gt;</operator> <literal type="number" pos:start="1975:34" pos:end="1975:34">4</literal></expr>)</condition> <block pos:start="1975:37" pos:end="2003:21">{<block_content pos:start="1977:21" pos:end="2001:30">

                    <case pos:start="1977:21" pos:end="1977:27">case <expr pos:start="1977:26" pos:end="1977:26"><literal type="number" pos:start="1977:26" pos:end="1977:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="1979:25" pos:end="1979:45"><expr pos:start="1979:25" pos:end="1979:44"><call pos:start="1979:25" pos:end="1979:44"><name pos:start="1979:25" pos:end="1979:42">gen_op_flds_FT0_A0</name><argument_list pos:start="1979:43" pos:end="1979:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1981:25" pos:end="1981:30">break;</break>

                    <case pos:start="1983:21" pos:end="1983:27">case <expr pos:start="1983:26" pos:end="1983:26"><literal type="number" pos:start="1983:26" pos:end="1983:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="1985:25" pos:end="1985:46"><expr pos:start="1985:25" pos:end="1985:45"><call pos:start="1985:25" pos:end="1985:45"><name pos:start="1985:25" pos:end="1985:43">gen_op_fildl_FT0_A0</name><argument_list pos:start="1985:44" pos:end="1985:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1987:25" pos:end="1987:30">break;</break>

                    <case pos:start="1989:21" pos:end="1989:27">case <expr pos:start="1989:26" pos:end="1989:26"><literal type="number" pos:start="1989:26" pos:end="1989:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="1991:25" pos:end="1991:45"><expr pos:start="1991:25" pos:end="1991:44"><call pos:start="1991:25" pos:end="1991:44"><name pos:start="1991:25" pos:end="1991:42">gen_op_fldl_FT0_A0</name><argument_list pos:start="1991:43" pos:end="1991:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="1993:25" pos:end="1993:30">break;</break>

                    <case pos:start="1995:21" pos:end="1995:27">case <expr pos:start="1995:26" pos:end="1995:26"><literal type="number" pos:start="1995:26" pos:end="1995:26">3</literal></expr>:</case>

                    <default pos:start="1997:21" pos:end="1997:28">default:</default>

                        <expr_stmt pos:start="1999:25" pos:end="1999:45"><expr pos:start="1999:25" pos:end="1999:44"><call pos:start="1999:25" pos:end="1999:44"><name pos:start="1999:25" pos:end="1999:42">gen_op_fild_FT0_A0</name><argument_list pos:start="1999:43" pos:end="1999:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2001:25" pos:end="2001:30">break;</break>

                    </block_content>}</block></switch>

                    

                    <expr_stmt pos:start="2007:21" pos:end="2007:51"><expr pos:start="2007:21" pos:end="2007:50"><name pos:start="2007:21" pos:end="2007:48"><name pos:start="2007:21" pos:end="2007:43">gen_op_fp_arith_ST0_FT0</name><index pos:start="2007:44" pos:end="2007:48">[<expr pos:start="2007:45" pos:end="2007:47"><name pos:start="2007:45" pos:end="2007:47">op1</name></expr>]</index></name><operator pos:start="2007:49" pos:end="2007:49">(</operator><operator pos:start="2007:50" pos:end="2007:50">)</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="2009:21" pos:end="2015:21"><if pos:start="2009:21" pos:end="2015:21">if <condition pos:start="2009:24" pos:end="2009:33">(<expr pos:start="2009:25" pos:end="2009:32"><name pos:start="2009:25" pos:end="2009:27">op1</name> <operator pos:start="2009:29" pos:end="2009:30">==</operator> <literal type="number" pos:start="2009:32" pos:end="2009:32">3</literal></expr>)</condition> <block pos:start="2009:35" pos:end="2015:21">{<block_content pos:start="2013:25" pos:end="2013:38">

                        <comment type="block" pos:start="2011:25" pos:end="2011:45">/* fcomp needs pop */</comment>

                        <expr_stmt pos:start="2013:25" pos:end="2013:38"><expr pos:start="2013:25" pos:end="2013:37"><call pos:start="2013:25" pos:end="2013:37"><name pos:start="2013:25" pos:end="2013:35">gen_op_fpop</name><argument_list pos:start="2013:36" pos:end="2013:37">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block>

                <break pos:start="2019:17" pos:end="2019:22">break;</break>

            <case pos:start="2021:13" pos:end="2021:22">case <expr pos:start="2021:18" pos:end="2021:21"><literal type="number" pos:start="2021:18" pos:end="2021:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2021:24" pos:end="2021:33">/* flds */</comment>

            <case pos:start="2023:13" pos:end="2023:22">case <expr pos:start="2023:18" pos:end="2023:21"><literal type="number" pos:start="2023:18" pos:end="2023:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2023:24" pos:end="2023:33">/* fsts */</comment>

            <case pos:start="2025:13" pos:end="2025:22">case <expr pos:start="2025:18" pos:end="2025:21"><literal type="number" pos:start="2025:18" pos:end="2025:21">0x0b</literal></expr>:</case> <comment type="block" pos:start="2025:24" pos:end="2025:34">/* fstps */</comment>

            <case pos:start="2027:13" pos:end="2027:22">case <expr pos:start="2027:18" pos:end="2027:21"><literal type="number" pos:start="2027:18" pos:end="2027:21">0x18</literal></expr>:</case> <comment type="block" pos:start="2027:24" pos:end="2027:34">/* fildl */</comment>

            <case pos:start="2029:13" pos:end="2029:22">case <expr pos:start="2029:18" pos:end="2029:21"><literal type="number" pos:start="2029:18" pos:end="2029:21">0x1a</literal></expr>:</case> <comment type="block" pos:start="2029:24" pos:end="2029:34">/* fistl */</comment>

            <case pos:start="2031:13" pos:end="2031:22">case <expr pos:start="2031:18" pos:end="2031:21"><literal type="number" pos:start="2031:18" pos:end="2031:21">0x1b</literal></expr>:</case> <comment type="block" pos:start="2031:24" pos:end="2031:35">/* fistpl */</comment>

            <case pos:start="2033:13" pos:end="2033:22">case <expr pos:start="2033:18" pos:end="2033:21"><literal type="number" pos:start="2033:18" pos:end="2033:21">0x28</literal></expr>:</case> <comment type="block" pos:start="2033:24" pos:end="2033:33">/* fldl */</comment>

            <case pos:start="2035:13" pos:end="2035:22">case <expr pos:start="2035:18" pos:end="2035:21"><literal type="number" pos:start="2035:18" pos:end="2035:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="2035:24" pos:end="2035:33">/* fstl */</comment>

            <case pos:start="2037:13" pos:end="2037:22">case <expr pos:start="2037:18" pos:end="2037:21"><literal type="number" pos:start="2037:18" pos:end="2037:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="2037:24" pos:end="2037:34">/* fstpl */</comment>

            <case pos:start="2039:13" pos:end="2039:22">case <expr pos:start="2039:18" pos:end="2039:21"><literal type="number" pos:start="2039:18" pos:end="2039:21">0x38</literal></expr>:</case> <comment type="block" pos:start="2039:24" pos:end="2039:34">/* filds */</comment>

            <case pos:start="2041:13" pos:end="2041:22">case <expr pos:start="2041:18" pos:end="2041:21"><literal type="number" pos:start="2041:18" pos:end="2041:21">0x3a</literal></expr>:</case> <comment type="block" pos:start="2041:24" pos:end="2041:34">/* fists */</comment>

            <case pos:start="2043:13" pos:end="2043:22">case <expr pos:start="2043:18" pos:end="2043:21"><literal type="number" pos:start="2043:18" pos:end="2043:21">0x3b</literal></expr>:</case> <comment type="block" pos:start="2043:24" pos:end="2043:35">/* fistps */</comment>

                

                <switch pos:start="2047:17" pos:end="2123:17">switch<condition pos:start="2047:23" pos:end="2047:30">(<expr pos:start="2047:24" pos:end="2047:29"><name pos:start="2047:24" pos:end="2047:25">op</name> <operator pos:start="2047:27" pos:end="2047:27">&amp;</operator> <literal type="number" pos:start="2047:29" pos:end="2047:29">7</literal></expr>)</condition> <block pos:start="2047:32" pos:end="2123:17">{<block_content pos:start="2049:17" pos:end="2121:26">

                <case pos:start="2049:17" pos:end="2049:23">case <expr pos:start="2049:22" pos:end="2049:22"><literal type="number" pos:start="2049:22" pos:end="2049:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="2051:21" pos:end="2051:35"><expr pos:start="2051:21" pos:end="2051:34"><call pos:start="2051:21" pos:end="2051:34"><name pos:start="2051:21" pos:end="2051:32">gen_op_fpush</name><argument_list pos:start="2051:33" pos:end="2051:34">()</argument_list></call></expr>;</expr_stmt>

                    <switch pos:start="2053:21" pos:end="2081:21">switch<condition pos:start="2053:27" pos:end="2053:35">(<expr pos:start="2053:28" pos:end="2053:34"><name pos:start="2053:28" pos:end="2053:29">op</name> <operator pos:start="2053:31" pos:end="2053:32">&gt;&gt;</operator> <literal type="number" pos:start="2053:34" pos:end="2053:34">4</literal></expr>)</condition> <block pos:start="2053:37" pos:end="2081:21">{<block_content pos:start="2055:21" pos:end="2079:30">

                    <case pos:start="2055:21" pos:end="2055:27">case <expr pos:start="2055:26" pos:end="2055:26"><literal type="number" pos:start="2055:26" pos:end="2055:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2057:25" pos:end="2057:45"><expr pos:start="2057:25" pos:end="2057:44"><call pos:start="2057:25" pos:end="2057:44"><name pos:start="2057:25" pos:end="2057:42">gen_op_flds_ST0_A0</name><argument_list pos:start="2057:43" pos:end="2057:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2059:25" pos:end="2059:30">break;</break>

                    <case pos:start="2061:21" pos:end="2061:27">case <expr pos:start="2061:26" pos:end="2061:26"><literal type="number" pos:start="2061:26" pos:end="2061:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2063:25" pos:end="2063:46"><expr pos:start="2063:25" pos:end="2063:45"><call pos:start="2063:25" pos:end="2063:45"><name pos:start="2063:25" pos:end="2063:43">gen_op_fildl_ST0_A0</name><argument_list pos:start="2063:44" pos:end="2063:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2065:25" pos:end="2065:30">break;</break>

                    <case pos:start="2067:21" pos:end="2067:27">case <expr pos:start="2067:26" pos:end="2067:26"><literal type="number" pos:start="2067:26" pos:end="2067:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2069:25" pos:end="2069:45"><expr pos:start="2069:25" pos:end="2069:44"><call pos:start="2069:25" pos:end="2069:44"><name pos:start="2069:25" pos:end="2069:42">gen_op_fldl_ST0_A0</name><argument_list pos:start="2069:43" pos:end="2069:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2071:25" pos:end="2071:30">break;</break>

                    <case pos:start="2073:21" pos:end="2073:27">case <expr pos:start="2073:26" pos:end="2073:26"><literal type="number" pos:start="2073:26" pos:end="2073:26">3</literal></expr>:</case>

                    <default pos:start="2075:21" pos:end="2075:28">default:</default>

                        <expr_stmt pos:start="2077:25" pos:end="2077:45"><expr pos:start="2077:25" pos:end="2077:44"><call pos:start="2077:25" pos:end="2077:44"><name pos:start="2077:25" pos:end="2077:42">gen_op_fild_ST0_A0</name><argument_list pos:start="2077:43" pos:end="2077:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2079:25" pos:end="2079:30">break;</break>

                    </block_content>}</block></switch>

                    <break pos:start="2083:21" pos:end="2083:26">break;</break>

                <default pos:start="2085:17" pos:end="2085:24">default:</default>

                    <switch pos:start="2087:21" pos:end="2115:21">switch<condition pos:start="2087:27" pos:end="2087:35">(<expr pos:start="2087:28" pos:end="2087:34"><name pos:start="2087:28" pos:end="2087:29">op</name> <operator pos:start="2087:31" pos:end="2087:32">&gt;&gt;</operator> <literal type="number" pos:start="2087:34" pos:end="2087:34">4</literal></expr>)</condition> <block pos:start="2087:37" pos:end="2115:21">{<block_content pos:start="2089:21" pos:end="2113:30">

                    <case pos:start="2089:21" pos:end="2089:27">case <expr pos:start="2089:26" pos:end="2089:26"><literal type="number" pos:start="2089:26" pos:end="2089:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2091:25" pos:end="2091:45"><expr pos:start="2091:25" pos:end="2091:44"><call pos:start="2091:25" pos:end="2091:44"><name pos:start="2091:25" pos:end="2091:42">gen_op_fsts_ST0_A0</name><argument_list pos:start="2091:43" pos:end="2091:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2093:25" pos:end="2093:30">break;</break>

                    <case pos:start="2095:21" pos:end="2095:27">case <expr pos:start="2095:26" pos:end="2095:26"><literal type="number" pos:start="2095:26" pos:end="2095:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2097:25" pos:end="2097:46"><expr pos:start="2097:25" pos:end="2097:45"><call pos:start="2097:25" pos:end="2097:45"><name pos:start="2097:25" pos:end="2097:43">gen_op_fistl_ST0_A0</name><argument_list pos:start="2097:44" pos:end="2097:45">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2099:25" pos:end="2099:30">break;</break>

                    <case pos:start="2101:21" pos:end="2101:27">case <expr pos:start="2101:26" pos:end="2101:26"><literal type="number" pos:start="2101:26" pos:end="2101:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2103:25" pos:end="2103:45"><expr pos:start="2103:25" pos:end="2103:44"><call pos:start="2103:25" pos:end="2103:44"><name pos:start="2103:25" pos:end="2103:42">gen_op_fstl_ST0_A0</name><argument_list pos:start="2103:43" pos:end="2103:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2105:25" pos:end="2105:30">break;</break>

                    <case pos:start="2107:21" pos:end="2107:27">case <expr pos:start="2107:26" pos:end="2107:26"><literal type="number" pos:start="2107:26" pos:end="2107:26">3</literal></expr>:</case>

                    <default pos:start="2109:21" pos:end="2109:28">default:</default>

                        <expr_stmt pos:start="2111:25" pos:end="2111:45"><expr pos:start="2111:25" pos:end="2111:44"><call pos:start="2111:25" pos:end="2111:44"><name pos:start="2111:25" pos:end="2111:42">gen_op_fist_ST0_A0</name><argument_list pos:start="2111:43" pos:end="2111:44">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2113:25" pos:end="2113:30">break;</break>

                    </block_content>}</block></switch>

                    <if_stmt pos:start="2117:21" pos:end="2119:38"><if pos:start="2117:21" pos:end="2119:38">if <condition pos:start="2117:24" pos:end="2117:38">(<expr pos:start="2117:25" pos:end="2117:37"><operator pos:start="2117:25" pos:end="2117:25">(</operator><name pos:start="2117:26" pos:end="2117:27">op</name> <operator pos:start="2117:29" pos:end="2117:29">&amp;</operator> <literal type="number" pos:start="2117:31" pos:end="2117:31">7</literal><operator pos:start="2117:32" pos:end="2117:32">)</operator> <operator pos:start="2117:34" pos:end="2117:35">==</operator> <literal type="number" pos:start="2117:37" pos:end="2117:37">3</literal></expr>)</condition><block type="pseudo" pos:start="2119:25" pos:end="2119:38"><block_content pos:start="2119:25" pos:end="2119:38">

                        <expr_stmt pos:start="2119:25" pos:end="2119:38"><expr pos:start="2119:25" pos:end="2119:37"><call pos:start="2119:25" pos:end="2119:37"><name pos:start="2119:25" pos:end="2119:35">gen_op_fpop</name><argument_list pos:start="2119:36" pos:end="2119:37">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <break pos:start="2121:21" pos:end="2121:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2125:17" pos:end="2125:22">break;</break>

            <case pos:start="2127:13" pos:end="2127:22">case <expr pos:start="2127:18" pos:end="2127:21"><literal type="number" pos:start="2127:18" pos:end="2127:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2127:24" pos:end="2127:38">/* fldcw mem */</comment>

                <expr_stmt pos:start="2129:17" pos:end="2129:34"><expr pos:start="2129:17" pos:end="2129:33"><call pos:start="2129:17" pos:end="2129:33"><name pos:start="2129:17" pos:end="2129:31">gen_op_fldcw_A0</name><argument_list pos:start="2129:32" pos:end="2129:33">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2131:17" pos:end="2131:22">break;</break>

            <case pos:start="2133:13" pos:end="2133:22">case <expr pos:start="2133:18" pos:end="2133:21"><literal type="number" pos:start="2133:18" pos:end="2133:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2133:24" pos:end="2133:39">/* fnstcw mem */</comment>

                <expr_stmt pos:start="2135:17" pos:end="2135:35"><expr pos:start="2135:17" pos:end="2135:34"><call pos:start="2135:17" pos:end="2135:34"><name pos:start="2135:17" pos:end="2135:32">gen_op_fnstcw_A0</name><argument_list pos:start="2135:33" pos:end="2135:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2137:17" pos:end="2137:22">break;</break>

            <case pos:start="2139:13" pos:end="2139:22">case <expr pos:start="2139:18" pos:end="2139:21"><literal type="number" pos:start="2139:18" pos:end="2139:21">0x1d</literal></expr>:</case> <comment type="block" pos:start="2139:24" pos:end="2139:37">/* fldt mem */</comment>

                <expr_stmt pos:start="2141:17" pos:end="2141:31"><expr pos:start="2141:17" pos:end="2141:30"><call pos:start="2141:17" pos:end="2141:30"><name pos:start="2141:17" pos:end="2141:28">gen_op_fpush</name><argument_list pos:start="2141:29" pos:end="2141:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2143:17" pos:end="2143:37"><expr pos:start="2143:17" pos:end="2143:36"><call pos:start="2143:17" pos:end="2143:36"><name pos:start="2143:17" pos:end="2143:34">gen_op_fldt_ST0_A0</name><argument_list pos:start="2143:35" pos:end="2143:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2145:17" pos:end="2145:22">break;</break>

            <case pos:start="2147:13" pos:end="2147:22">case <expr pos:start="2147:18" pos:end="2147:21"><literal type="number" pos:start="2147:18" pos:end="2147:21">0x1f</literal></expr>:</case> <comment type="block" pos:start="2147:24" pos:end="2147:38">/* fstpt mem */</comment>

                <expr_stmt pos:start="2149:17" pos:end="2149:37"><expr pos:start="2149:17" pos:end="2149:36"><call pos:start="2149:17" pos:end="2149:36"><name pos:start="2149:17" pos:end="2149:34">gen_op_fstt_ST0_A0</name><argument_list pos:start="2149:35" pos:end="2149:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2151:17" pos:end="2151:30"><expr pos:start="2151:17" pos:end="2151:29"><call pos:start="2151:17" pos:end="2151:29"><name pos:start="2151:17" pos:end="2151:27">gen_op_fpop</name><argument_list pos:start="2151:28" pos:end="2151:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2153:17" pos:end="2153:22">break;</break>

            <case pos:start="2155:13" pos:end="2155:22">case <expr pos:start="2155:18" pos:end="2155:21"><literal type="number" pos:start="2155:18" pos:end="2155:21">0x2f</literal></expr>:</case> <comment type="block" pos:start="2155:24" pos:end="2155:39">/* fnstsw mem */</comment>

                <expr_stmt pos:start="2157:17" pos:end="2157:35"><expr pos:start="2157:17" pos:end="2157:34"><call pos:start="2157:17" pos:end="2157:34"><name pos:start="2157:17" pos:end="2157:32">gen_op_fnstsw_A0</name><argument_list pos:start="2157:33" pos:end="2157:34">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2159:17" pos:end="2159:22">break;</break>

            <case pos:start="2161:13" pos:end="2161:22">case <expr pos:start="2161:18" pos:end="2161:21"><literal type="number" pos:start="2161:18" pos:end="2161:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2161:24" pos:end="2161:33">/* fbld */</comment>

                <expr_stmt pos:start="2163:17" pos:end="2163:31"><expr pos:start="2163:17" pos:end="2163:30"><call pos:start="2163:17" pos:end="2163:30"><name pos:start="2163:17" pos:end="2163:28">gen_op_fpush</name><argument_list pos:start="2163:29" pos:end="2163:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2165:17" pos:end="2165:37"><expr pos:start="2165:17" pos:end="2165:36"><call pos:start="2165:17" pos:end="2165:36"><name pos:start="2165:17" pos:end="2165:34">gen_op_fbld_ST0_A0</name><argument_list pos:start="2165:35" pos:end="2165:36">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2167:17" pos:end="2167:22">break;</break>

            <case pos:start="2169:13" pos:end="2169:22">case <expr pos:start="2169:18" pos:end="2169:21"><literal type="number" pos:start="2169:18" pos:end="2169:21">0x3e</literal></expr>:</case> <comment type="block" pos:start="2169:24" pos:end="2169:34">/* fbstp */</comment>

                <expr_stmt pos:start="2171:17" pos:end="2171:37"><expr pos:start="2171:17" pos:end="2171:36"><call pos:start="2171:17" pos:end="2171:36"><name pos:start="2171:17" pos:end="2171:34">gen_op_fbst_ST0_A0</name><argument_list pos:start="2171:35" pos:end="2171:36">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2173:17" pos:end="2173:30"><expr pos:start="2173:17" pos:end="2173:29"><call pos:start="2173:17" pos:end="2173:29"><name pos:start="2173:17" pos:end="2173:27">gen_op_fpop</name><argument_list pos:start="2173:28" pos:end="2173:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2175:17" pos:end="2175:22">break;</break>

            <case pos:start="2177:13" pos:end="2177:22">case <expr pos:start="2177:18" pos:end="2177:21"><literal type="number" pos:start="2177:18" pos:end="2177:21">0x3d</literal></expr>:</case> <comment type="block" pos:start="2177:24" pos:end="2177:35">/* fildll */</comment>

                <expr_stmt pos:start="2179:17" pos:end="2179:31"><expr pos:start="2179:17" pos:end="2179:30"><call pos:start="2179:17" pos:end="2179:30"><name pos:start="2179:17" pos:end="2179:28">gen_op_fpush</name><argument_list pos:start="2179:29" pos:end="2179:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2181:17" pos:end="2181:39"><expr pos:start="2181:17" pos:end="2181:38"><call pos:start="2181:17" pos:end="2181:38"><name pos:start="2181:17" pos:end="2181:36">gen_op_fildll_ST0_A0</name><argument_list pos:start="2181:37" pos:end="2181:38">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2183:17" pos:end="2183:22">break;</break>

            <case pos:start="2185:13" pos:end="2185:22">case <expr pos:start="2185:18" pos:end="2185:21"><literal type="number" pos:start="2185:18" pos:end="2185:21">0x3f</literal></expr>:</case> <comment type="block" pos:start="2185:24" pos:end="2185:36">/* fistpll */</comment>

                <expr_stmt pos:start="2187:17" pos:end="2187:39"><expr pos:start="2187:17" pos:end="2187:38"><call pos:start="2187:17" pos:end="2187:38"><name pos:start="2187:17" pos:end="2187:36">gen_op_fistll_ST0_A0</name><argument_list pos:start="2187:37" pos:end="2187:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2189:17" pos:end="2189:30"><expr pos:start="2189:17" pos:end="2189:29"><call pos:start="2189:17" pos:end="2189:29"><name pos:start="2189:17" pos:end="2189:27">gen_op_fpop</name><argument_list pos:start="2189:28" pos:end="2189:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2191:17" pos:end="2191:22">break;</break>

            <default pos:start="2193:13" pos:end="2193:20">default:</default>

                <goto pos:start="2195:17" pos:end="2195:32">goto <name pos:start="2195:22" pos:end="2195:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></if> <else pos:start="2199:11" pos:end="2645:9">else <block pos:start="2199:16" pos:end="2645:9">{<block_content pos:start="2203:13" pos:end="2643:13">

            <comment type="block" pos:start="2201:13" pos:end="2201:36">/* register float ops */</comment>

            <expr_stmt pos:start="2203:13" pos:end="2203:23"><expr pos:start="2203:13" pos:end="2203:22"><name pos:start="2203:13" pos:end="2203:17">opreg</name> <operator pos:start="2203:19" pos:end="2203:19">=</operator> <name pos:start="2203:21" pos:end="2203:22">rm</name></expr>;</expr_stmt>



            <switch pos:start="2207:13" pos:end="2643:13">switch<condition pos:start="2207:19" pos:end="2207:22">(<expr pos:start="2207:20" pos:end="2207:21"><name pos:start="2207:20" pos:end="2207:21">op</name></expr>)</condition> <block pos:start="2207:24" pos:end="2643:13">{<block_content pos:start="2209:13" pos:end="2641:32">

            <case pos:start="2209:13" pos:end="2209:22">case <expr pos:start="2209:18" pos:end="2209:21"><literal type="number" pos:start="2209:18" pos:end="2209:21">0x08</literal></expr>:</case> <comment type="block" pos:start="2209:24" pos:end="2209:36">/* fld sti */</comment>

                <expr_stmt pos:start="2211:17" pos:end="2211:31"><expr pos:start="2211:17" pos:end="2211:30"><call pos:start="2211:17" pos:end="2211:30"><name pos:start="2211:17" pos:end="2211:28">gen_op_fpush</name><argument_list pos:start="2211:29" pos:end="2211:30">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2213:17" pos:end="2213:53"><expr pos:start="2213:17" pos:end="2213:52"><call pos:start="2213:17" pos:end="2213:52"><name pos:start="2213:17" pos:end="2213:35">gen_op_fmov_ST0_STN</name><argument_list pos:start="2213:36" pos:end="2213:52">(<argument pos:start="2213:37" pos:end="2213:51"><expr pos:start="2213:37" pos:end="2213:51"><operator pos:start="2213:37" pos:end="2213:37">(</operator><name pos:start="2213:38" pos:end="2213:42">opreg</name> <operator pos:start="2213:44" pos:end="2213:44">+</operator> <literal type="number" pos:start="2213:46" pos:end="2213:46">1</literal><operator pos:start="2213:47" pos:end="2213:47">)</operator> <operator pos:start="2213:49" pos:end="2213:49">&amp;</operator> <literal type="number" pos:start="2213:51" pos:end="2213:51">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2215:17" pos:end="2215:22">break;</break>

            <case pos:start="2217:13" pos:end="2217:22">case <expr pos:start="2217:18" pos:end="2217:21"><literal type="number" pos:start="2217:18" pos:end="2217:21">0x09</literal></expr>:</case> <comment type="block" pos:start="2217:24" pos:end="2217:38">/* fxchg sti */</comment>

                <expr_stmt pos:start="2219:17" pos:end="2219:44"><expr pos:start="2219:17" pos:end="2219:43"><call pos:start="2219:17" pos:end="2219:43"><name pos:start="2219:17" pos:end="2219:36">gen_op_fxchg_ST0_STN</name><argument_list pos:start="2219:37" pos:end="2219:43">(<argument pos:start="2219:38" pos:end="2219:42"><expr pos:start="2219:38" pos:end="2219:42"><name pos:start="2219:38" pos:end="2219:42">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2221:17" pos:end="2221:22">break;</break>

            <case pos:start="2223:13" pos:end="2223:22">case <expr pos:start="2223:18" pos:end="2223:21"><literal type="number" pos:start="2223:18" pos:end="2223:21">0x0a</literal></expr>:</case> <comment type="block" pos:start="2223:24" pos:end="2223:37">/* grp d9/2 */</comment>

                <switch pos:start="2225:17" pos:end="2235:17">switch<condition pos:start="2225:23" pos:end="2225:26">(<expr pos:start="2225:24" pos:end="2225:25"><name pos:start="2225:24" pos:end="2225:25">rm</name></expr>)</condition> <block pos:start="2225:28" pos:end="2235:17">{<block_content pos:start="2227:17" pos:end="2233:36">

                <case pos:start="2227:17" pos:end="2227:23">case <expr pos:start="2227:22" pos:end="2227:22"><literal type="number" pos:start="2227:22" pos:end="2227:22">0</literal></expr>:</case> <comment type="block" pos:start="2227:25" pos:end="2227:34">/* fnop */</comment>

                    <break pos:start="2229:21" pos:end="2229:26">break;</break>

                <default pos:start="2231:17" pos:end="2231:24">default:</default>

                    <goto pos:start="2233:21" pos:end="2233:36">goto <name pos:start="2233:26" pos:end="2233:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2237:17" pos:end="2237:22">break;</break>

            <case pos:start="2239:13" pos:end="2239:22">case <expr pos:start="2239:18" pos:end="2239:21"><literal type="number" pos:start="2239:18" pos:end="2239:21">0x0c</literal></expr>:</case> <comment type="block" pos:start="2239:24" pos:end="2239:37">/* grp d9/4 */</comment>

                <switch pos:start="2241:17" pos:end="2273:17">switch<condition pos:start="2241:23" pos:end="2241:26">(<expr pos:start="2241:24" pos:end="2241:25"><name pos:start="2241:24" pos:end="2241:25">rm</name></expr>)</condition> <block pos:start="2241:28" pos:end="2273:17">{<block_content pos:start="2243:17" pos:end="2271:36">

                <case pos:start="2243:17" pos:end="2243:23">case <expr pos:start="2243:22" pos:end="2243:22"><literal type="number" pos:start="2243:22" pos:end="2243:22">0</literal></expr>:</case> <comment type="block" pos:start="2243:25" pos:end="2243:34">/* fchs */</comment>

                    <expr_stmt pos:start="2245:21" pos:end="2245:38"><expr pos:start="2245:21" pos:end="2245:37"><call pos:start="2245:21" pos:end="2245:37"><name pos:start="2245:21" pos:end="2245:35">gen_op_fchs_ST0</name><argument_list pos:start="2245:36" pos:end="2245:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2247:21" pos:end="2247:26">break;</break>

                <case pos:start="2249:17" pos:end="2249:23">case <expr pos:start="2249:22" pos:end="2249:22"><literal type="number" pos:start="2249:22" pos:end="2249:22">1</literal></expr>:</case> <comment type="block" pos:start="2249:25" pos:end="2249:34">/* fabs */</comment>

                    <expr_stmt pos:start="2251:21" pos:end="2251:38"><expr pos:start="2251:21" pos:end="2251:37"><call pos:start="2251:21" pos:end="2251:37"><name pos:start="2251:21" pos:end="2251:35">gen_op_fabs_ST0</name><argument_list pos:start="2251:36" pos:end="2251:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2253:21" pos:end="2253:26">break;</break>

                <case pos:start="2255:17" pos:end="2255:23">case <expr pos:start="2255:22" pos:end="2255:22"><literal type="number" pos:start="2255:22" pos:end="2255:22">4</literal></expr>:</case> <comment type="block" pos:start="2255:25" pos:end="2255:34">/* ftst */</comment>

                    <expr_stmt pos:start="2257:21" pos:end="2257:38"><expr pos:start="2257:21" pos:end="2257:37"><call pos:start="2257:21" pos:end="2257:37"><name pos:start="2257:21" pos:end="2257:35">gen_op_fldz_FT0</name><argument_list pos:start="2257:36" pos:end="2257:37">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2259:21" pos:end="2259:42"><expr pos:start="2259:21" pos:end="2259:41"><call pos:start="2259:21" pos:end="2259:41"><name pos:start="2259:21" pos:end="2259:39">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2259:40" pos:end="2259:41">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2261:21" pos:end="2261:26">break;</break>

                <case pos:start="2263:17" pos:end="2263:23">case <expr pos:start="2263:22" pos:end="2263:22"><literal type="number" pos:start="2263:22" pos:end="2263:22">5</literal></expr>:</case> <comment type="block" pos:start="2263:25" pos:end="2263:34">/* fxam */</comment>

                    <expr_stmt pos:start="2265:21" pos:end="2265:38"><expr pos:start="2265:21" pos:end="2265:37"><call pos:start="2265:21" pos:end="2265:37"><name pos:start="2265:21" pos:end="2265:35">gen_op_fxam_ST0</name><argument_list pos:start="2265:36" pos:end="2265:37">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2267:21" pos:end="2267:26">break;</break>

                <default pos:start="2269:17" pos:end="2269:24">default:</default>

                    <goto pos:start="2271:21" pos:end="2271:36">goto <name pos:start="2271:26" pos:end="2271:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2275:17" pos:end="2275:22">break;</break>

            <case pos:start="2277:13" pos:end="2277:22">case <expr pos:start="2277:18" pos:end="2277:21"><literal type="number" pos:start="2277:18" pos:end="2277:21">0x0d</literal></expr>:</case> <comment type="block" pos:start="2277:24" pos:end="2277:37">/* grp d9/5 */</comment>

                <block pos:start="2279:17" pos:end="2345:17">{<block_content pos:start="2281:21" pos:end="2343:21">

                    <switch pos:start="2281:21" pos:end="2343:21">switch<condition pos:start="2281:27" pos:end="2281:30">(<expr pos:start="2281:28" pos:end="2281:29"><name pos:start="2281:28" pos:end="2281:29">rm</name></expr>)</condition> <block pos:start="2281:32" pos:end="2343:21">{<block_content pos:start="2283:21" pos:end="2341:40">

                    <case pos:start="2283:21" pos:end="2283:27">case <expr pos:start="2283:26" pos:end="2283:26"><literal type="number" pos:start="2283:26" pos:end="2283:26">0</literal></expr>:</case>

                        <expr_stmt pos:start="2285:25" pos:end="2285:39"><expr pos:start="2285:25" pos:end="2285:38"><call pos:start="2285:25" pos:end="2285:38"><name pos:start="2285:25" pos:end="2285:36">gen_op_fpush</name><argument_list pos:start="2285:37" pos:end="2285:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2287:25" pos:end="2287:42"><expr pos:start="2287:25" pos:end="2287:41"><call pos:start="2287:25" pos:end="2287:41"><name pos:start="2287:25" pos:end="2287:39">gen_op_fld1_ST0</name><argument_list pos:start="2287:40" pos:end="2287:41">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2289:25" pos:end="2289:30">break;</break>

                    <case pos:start="2291:21" pos:end="2291:27">case <expr pos:start="2291:26" pos:end="2291:26"><literal type="number" pos:start="2291:26" pos:end="2291:26">1</literal></expr>:</case>

                        <expr_stmt pos:start="2293:25" pos:end="2293:39"><expr pos:start="2293:25" pos:end="2293:38"><call pos:start="2293:25" pos:end="2293:38"><name pos:start="2293:25" pos:end="2293:36">gen_op_fpush</name><argument_list pos:start="2293:37" pos:end="2293:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2295:25" pos:end="2295:44"><expr pos:start="2295:25" pos:end="2295:43"><call pos:start="2295:25" pos:end="2295:43"><name pos:start="2295:25" pos:end="2295:41">gen_op_fldl2t_ST0</name><argument_list pos:start="2295:42" pos:end="2295:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2297:25" pos:end="2297:30">break;</break>

                    <case pos:start="2299:21" pos:end="2299:27">case <expr pos:start="2299:26" pos:end="2299:26"><literal type="number" pos:start="2299:26" pos:end="2299:26">2</literal></expr>:</case>

                        <expr_stmt pos:start="2301:25" pos:end="2301:39"><expr pos:start="2301:25" pos:end="2301:38"><call pos:start="2301:25" pos:end="2301:38"><name pos:start="2301:25" pos:end="2301:36">gen_op_fpush</name><argument_list pos:start="2301:37" pos:end="2301:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2303:25" pos:end="2303:44"><expr pos:start="2303:25" pos:end="2303:43"><call pos:start="2303:25" pos:end="2303:43"><name pos:start="2303:25" pos:end="2303:41">gen_op_fldl2e_ST0</name><argument_list pos:start="2303:42" pos:end="2303:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2305:25" pos:end="2305:30">break;</break>

                    <case pos:start="2307:21" pos:end="2307:27">case <expr pos:start="2307:26" pos:end="2307:26"><literal type="number" pos:start="2307:26" pos:end="2307:26">3</literal></expr>:</case>

                        <expr_stmt pos:start="2309:25" pos:end="2309:39"><expr pos:start="2309:25" pos:end="2309:38"><call pos:start="2309:25" pos:end="2309:38"><name pos:start="2309:25" pos:end="2309:36">gen_op_fpush</name><argument_list pos:start="2309:37" pos:end="2309:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2311:25" pos:end="2311:43"><expr pos:start="2311:25" pos:end="2311:42"><call pos:start="2311:25" pos:end="2311:42"><name pos:start="2311:25" pos:end="2311:40">gen_op_fldpi_ST0</name><argument_list pos:start="2311:41" pos:end="2311:42">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2313:25" pos:end="2313:30">break;</break>

                    <case pos:start="2315:21" pos:end="2315:27">case <expr pos:start="2315:26" pos:end="2315:26"><literal type="number" pos:start="2315:26" pos:end="2315:26">4</literal></expr>:</case>

                        <expr_stmt pos:start="2317:25" pos:end="2317:39"><expr pos:start="2317:25" pos:end="2317:38"><call pos:start="2317:25" pos:end="2317:38"><name pos:start="2317:25" pos:end="2317:36">gen_op_fpush</name><argument_list pos:start="2317:37" pos:end="2317:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2319:25" pos:end="2319:44"><expr pos:start="2319:25" pos:end="2319:43"><call pos:start="2319:25" pos:end="2319:43"><name pos:start="2319:25" pos:end="2319:41">gen_op_fldlg2_ST0</name><argument_list pos:start="2319:42" pos:end="2319:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2321:25" pos:end="2321:30">break;</break>

                    <case pos:start="2323:21" pos:end="2323:27">case <expr pos:start="2323:26" pos:end="2323:26"><literal type="number" pos:start="2323:26" pos:end="2323:26">5</literal></expr>:</case>

                        <expr_stmt pos:start="2325:25" pos:end="2325:39"><expr pos:start="2325:25" pos:end="2325:38"><call pos:start="2325:25" pos:end="2325:38"><name pos:start="2325:25" pos:end="2325:36">gen_op_fpush</name><argument_list pos:start="2325:37" pos:end="2325:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2327:25" pos:end="2327:44"><expr pos:start="2327:25" pos:end="2327:43"><call pos:start="2327:25" pos:end="2327:43"><name pos:start="2327:25" pos:end="2327:41">gen_op_fldln2_ST0</name><argument_list pos:start="2327:42" pos:end="2327:43">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2329:25" pos:end="2329:30">break;</break>

                    <case pos:start="2331:21" pos:end="2331:27">case <expr pos:start="2331:26" pos:end="2331:26"><literal type="number" pos:start="2331:26" pos:end="2331:26">6</literal></expr>:</case>

                        <expr_stmt pos:start="2333:25" pos:end="2333:39"><expr pos:start="2333:25" pos:end="2333:38"><call pos:start="2333:25" pos:end="2333:38"><name pos:start="2333:25" pos:end="2333:36">gen_op_fpush</name><argument_list pos:start="2333:37" pos:end="2333:38">()</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2335:25" pos:end="2335:42"><expr pos:start="2335:25" pos:end="2335:41"><call pos:start="2335:25" pos:end="2335:41"><name pos:start="2335:25" pos:end="2335:39">gen_op_fldz_ST0</name><argument_list pos:start="2335:40" pos:end="2335:41">()</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="2337:25" pos:end="2337:30">break;</break>

                    <default pos:start="2339:21" pos:end="2339:28">default:</default>

                        <goto pos:start="2341:25" pos:end="2341:40">goto <name pos:start="2341:30" pos:end="2341:39">illegal_op</name>;</goto>

                    </block_content>}</block></switch>

                </block_content>}</block>

                <break pos:start="2347:17" pos:end="2347:22">break;</break>

            <case pos:start="2349:13" pos:end="2349:22">case <expr pos:start="2349:18" pos:end="2349:21"><literal type="number" pos:start="2349:18" pos:end="2349:21">0x0e</literal></expr>:</case> <comment type="block" pos:start="2349:24" pos:end="2349:37">/* grp d9/6 */</comment>

                <switch pos:start="2351:17" pos:end="2403:17">switch<condition pos:start="2351:23" pos:end="2351:26">(<expr pos:start="2351:24" pos:end="2351:25"><name pos:start="2351:24" pos:end="2351:25">rm</name></expr>)</condition> <block pos:start="2351:28" pos:end="2403:17">{<block_content pos:start="2353:17" pos:end="2401:26">

                <case pos:start="2353:17" pos:end="2353:23">case <expr pos:start="2353:22" pos:end="2353:22"><literal type="number" pos:start="2353:22" pos:end="2353:22">0</literal></expr>:</case> <comment type="block" pos:start="2353:25" pos:end="2353:35">/* f2xm1 */</comment>

                    <expr_stmt pos:start="2355:21" pos:end="2355:35"><expr pos:start="2355:21" pos:end="2355:34"><call pos:start="2355:21" pos:end="2355:34"><name pos:start="2355:21" pos:end="2355:32">gen_op_f2xm1</name><argument_list pos:start="2355:33" pos:end="2355:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2357:21" pos:end="2357:26">break;</break>

                <case pos:start="2359:17" pos:end="2359:23">case <expr pos:start="2359:22" pos:end="2359:22"><literal type="number" pos:start="2359:22" pos:end="2359:22">1</literal></expr>:</case> <comment type="block" pos:start="2359:25" pos:end="2359:35">/* fyl2x */</comment>

                    <expr_stmt pos:start="2361:21" pos:end="2361:35"><expr pos:start="2361:21" pos:end="2361:34"><call pos:start="2361:21" pos:end="2361:34"><name pos:start="2361:21" pos:end="2361:32">gen_op_fyl2x</name><argument_list pos:start="2361:33" pos:end="2361:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2363:21" pos:end="2363:26">break;</break>

                <case pos:start="2365:17" pos:end="2365:23">case <expr pos:start="2365:22" pos:end="2365:22"><literal type="number" pos:start="2365:22" pos:end="2365:22">2</literal></expr>:</case> <comment type="block" pos:start="2365:25" pos:end="2365:35">/* fptan */</comment>

                    <expr_stmt pos:start="2367:21" pos:end="2367:35"><expr pos:start="2367:21" pos:end="2367:34"><call pos:start="2367:21" pos:end="2367:34"><name pos:start="2367:21" pos:end="2367:32">gen_op_fptan</name><argument_list pos:start="2367:33" pos:end="2367:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2369:21" pos:end="2369:26">break;</break>

                <case pos:start="2371:17" pos:end="2371:23">case <expr pos:start="2371:22" pos:end="2371:22"><literal type="number" pos:start="2371:22" pos:end="2371:22">3</literal></expr>:</case> <comment type="block" pos:start="2371:25" pos:end="2371:36">/* fpatan */</comment>

                    <expr_stmt pos:start="2373:21" pos:end="2373:36"><expr pos:start="2373:21" pos:end="2373:35"><call pos:start="2373:21" pos:end="2373:35"><name pos:start="2373:21" pos:end="2373:33">gen_op_fpatan</name><argument_list pos:start="2373:34" pos:end="2373:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2375:21" pos:end="2375:26">break;</break>

                <case pos:start="2377:17" pos:end="2377:23">case <expr pos:start="2377:22" pos:end="2377:22"><literal type="number" pos:start="2377:22" pos:end="2377:22">4</literal></expr>:</case> <comment type="block" pos:start="2377:25" pos:end="2377:37">/* fxtract */</comment>

                    <expr_stmt pos:start="2379:21" pos:end="2379:37"><expr pos:start="2379:21" pos:end="2379:36"><call pos:start="2379:21" pos:end="2379:36"><name pos:start="2379:21" pos:end="2379:34">gen_op_fxtract</name><argument_list pos:start="2379:35" pos:end="2379:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2381:21" pos:end="2381:26">break;</break>

                <case pos:start="2383:17" pos:end="2383:23">case <expr pos:start="2383:22" pos:end="2383:22"><literal type="number" pos:start="2383:22" pos:end="2383:22">5</literal></expr>:</case> <comment type="block" pos:start="2383:25" pos:end="2383:36">/* fprem1 */</comment>

                    <expr_stmt pos:start="2385:21" pos:end="2385:36"><expr pos:start="2385:21" pos:end="2385:35"><call pos:start="2385:21" pos:end="2385:35"><name pos:start="2385:21" pos:end="2385:33">gen_op_fprem1</name><argument_list pos:start="2385:34" pos:end="2385:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2387:21" pos:end="2387:26">break;</break>

                <case pos:start="2389:17" pos:end="2389:23">case <expr pos:start="2389:22" pos:end="2389:22"><literal type="number" pos:start="2389:22" pos:end="2389:22">6</literal></expr>:</case> <comment type="block" pos:start="2389:25" pos:end="2389:37">/* fdecstp */</comment>

                    <expr_stmt pos:start="2391:21" pos:end="2391:37"><expr pos:start="2391:21" pos:end="2391:36"><call pos:start="2391:21" pos:end="2391:36"><name pos:start="2391:21" pos:end="2391:34">gen_op_fdecstp</name><argument_list pos:start="2391:35" pos:end="2391:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2393:21" pos:end="2393:26">break;</break>

                <default pos:start="2395:17" pos:end="2395:24">default:</default>

                <case pos:start="2397:17" pos:end="2397:23">case <expr pos:start="2397:22" pos:end="2397:22"><literal type="number" pos:start="2397:22" pos:end="2397:22">7</literal></expr>:</case> <comment type="block" pos:start="2397:25" pos:end="2397:37">/* fincstp */</comment>

                    <expr_stmt pos:start="2399:21" pos:end="2399:37"><expr pos:start="2399:21" pos:end="2399:36"><call pos:start="2399:21" pos:end="2399:36"><name pos:start="2399:21" pos:end="2399:34">gen_op_fincstp</name><argument_list pos:start="2399:35" pos:end="2399:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2401:21" pos:end="2401:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2405:17" pos:end="2405:22">break;</break>

            <case pos:start="2407:13" pos:end="2407:22">case <expr pos:start="2407:18" pos:end="2407:21"><literal type="number" pos:start="2407:18" pos:end="2407:21">0x0f</literal></expr>:</case> <comment type="block" pos:start="2407:24" pos:end="2407:37">/* grp d9/7 */</comment>

                <switch pos:start="2409:17" pos:end="2461:17">switch<condition pos:start="2409:23" pos:end="2409:26">(<expr pos:start="2409:24" pos:end="2409:25"><name pos:start="2409:24" pos:end="2409:25">rm</name></expr>)</condition> <block pos:start="2409:28" pos:end="2461:17">{<block_content pos:start="2411:17" pos:end="2459:26">

                <case pos:start="2411:17" pos:end="2411:23">case <expr pos:start="2411:22" pos:end="2411:22"><literal type="number" pos:start="2411:22" pos:end="2411:22">0</literal></expr>:</case> <comment type="block" pos:start="2411:25" pos:end="2411:35">/* fprem */</comment>

                    <expr_stmt pos:start="2413:21" pos:end="2413:35"><expr pos:start="2413:21" pos:end="2413:34"><call pos:start="2413:21" pos:end="2413:34"><name pos:start="2413:21" pos:end="2413:32">gen_op_fprem</name><argument_list pos:start="2413:33" pos:end="2413:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2415:21" pos:end="2415:26">break;</break>

                <case pos:start="2417:17" pos:end="2417:23">case <expr pos:start="2417:22" pos:end="2417:22"><literal type="number" pos:start="2417:22" pos:end="2417:22">1</literal></expr>:</case> <comment type="block" pos:start="2417:25" pos:end="2417:37">/* fyl2xp1 */</comment>

                    <expr_stmt pos:start="2419:21" pos:end="2419:37"><expr pos:start="2419:21" pos:end="2419:36"><call pos:start="2419:21" pos:end="2419:36"><name pos:start="2419:21" pos:end="2419:34">gen_op_fyl2xp1</name><argument_list pos:start="2419:35" pos:end="2419:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2421:21" pos:end="2421:26">break;</break>

                <case pos:start="2423:17" pos:end="2423:23">case <expr pos:start="2423:22" pos:end="2423:22"><literal type="number" pos:start="2423:22" pos:end="2423:22">2</literal></expr>:</case> <comment type="block" pos:start="2423:25" pos:end="2423:35">/* fsqrt */</comment>

                    <expr_stmt pos:start="2425:21" pos:end="2425:35"><expr pos:start="2425:21" pos:end="2425:34"><call pos:start="2425:21" pos:end="2425:34"><name pos:start="2425:21" pos:end="2425:32">gen_op_fsqrt</name><argument_list pos:start="2425:33" pos:end="2425:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2427:21" pos:end="2427:26">break;</break>

                <case pos:start="2429:17" pos:end="2429:23">case <expr pos:start="2429:22" pos:end="2429:22"><literal type="number" pos:start="2429:22" pos:end="2429:22">3</literal></expr>:</case> <comment type="block" pos:start="2429:25" pos:end="2429:37">/* fsincos */</comment>

                    <expr_stmt pos:start="2431:21" pos:end="2431:37"><expr pos:start="2431:21" pos:end="2431:36"><call pos:start="2431:21" pos:end="2431:36"><name pos:start="2431:21" pos:end="2431:34">gen_op_fsincos</name><argument_list pos:start="2431:35" pos:end="2431:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2433:21" pos:end="2433:26">break;</break>

                <case pos:start="2435:17" pos:end="2435:23">case <expr pos:start="2435:22" pos:end="2435:22"><literal type="number" pos:start="2435:22" pos:end="2435:22">5</literal></expr>:</case> <comment type="block" pos:start="2435:25" pos:end="2435:36">/* fscale */</comment>

                    <expr_stmt pos:start="2437:21" pos:end="2437:36"><expr pos:start="2437:21" pos:end="2437:35"><call pos:start="2437:21" pos:end="2437:35"><name pos:start="2437:21" pos:end="2437:33">gen_op_fscale</name><argument_list pos:start="2437:34" pos:end="2437:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2439:21" pos:end="2439:26">break;</break>

                <case pos:start="2441:17" pos:end="2441:23">case <expr pos:start="2441:22" pos:end="2441:22"><literal type="number" pos:start="2441:22" pos:end="2441:22">4</literal></expr>:</case> <comment type="block" pos:start="2441:25" pos:end="2441:37">/* frndint */</comment>

                    <expr_stmt pos:start="2443:21" pos:end="2443:37"><expr pos:start="2443:21" pos:end="2443:36"><call pos:start="2443:21" pos:end="2443:36"><name pos:start="2443:21" pos:end="2443:34">gen_op_frndint</name><argument_list pos:start="2443:35" pos:end="2443:36">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2445:21" pos:end="2445:26">break;</break>

                <case pos:start="2447:17" pos:end="2447:23">case <expr pos:start="2447:22" pos:end="2447:22"><literal type="number" pos:start="2447:22" pos:end="2447:22">6</literal></expr>:</case> <comment type="block" pos:start="2447:25" pos:end="2447:34">/* fsin */</comment>

                    <expr_stmt pos:start="2449:21" pos:end="2449:34"><expr pos:start="2449:21" pos:end="2449:33"><call pos:start="2449:21" pos:end="2449:33"><name pos:start="2449:21" pos:end="2449:31">gen_op_fsin</name><argument_list pos:start="2449:32" pos:end="2449:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2451:21" pos:end="2451:26">break;</break>

                <default pos:start="2453:17" pos:end="2453:24">default:</default>

                <case pos:start="2455:17" pos:end="2455:23">case <expr pos:start="2455:22" pos:end="2455:22"><literal type="number" pos:start="2455:22" pos:end="2455:22">7</literal></expr>:</case> <comment type="block" pos:start="2455:25" pos:end="2455:34">/* fcos */</comment>

                    <expr_stmt pos:start="2457:21" pos:end="2457:34"><expr pos:start="2457:21" pos:end="2457:33"><call pos:start="2457:21" pos:end="2457:33"><name pos:start="2457:21" pos:end="2457:31">gen_op_fcos</name><argument_list pos:start="2457:32" pos:end="2457:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2459:21" pos:end="2459:26">break;</break>

                </block_content>}</block></switch>

                <break pos:start="2463:17" pos:end="2463:22">break;</break>

            <case pos:start="2465:13" pos:end="2465:22">case <expr pos:start="2465:18" pos:end="2465:21"><literal type="number" pos:start="2465:18" pos:end="2465:21">0x00</literal></expr>:</case> <case pos:start="2465:24" pos:end="2465:33">case <expr pos:start="2465:29" pos:end="2465:32"><literal type="number" pos:start="2465:29" pos:end="2465:32">0x01</literal></expr>:</case> <case pos:start="2465:35" pos:end="2465:53">case <expr pos:start="2465:40" pos:end="2465:52"><literal type="number" pos:start="2465:40" pos:end="2465:43">0x04</literal> <operator pos:start="2465:45" pos:end="2465:47">...</operator> <literal type="number" pos:start="2465:49" pos:end="2465:52">0x07</literal></expr>:</case> <comment type="block" pos:start="2465:55" pos:end="2465:72">/* fxxx st, sti */</comment>

            <case pos:start="2467:13" pos:end="2467:22">case <expr pos:start="2467:18" pos:end="2467:21"><literal type="number" pos:start="2467:18" pos:end="2467:21">0x20</literal></expr>:</case> <case pos:start="2467:24" pos:end="2467:33">case <expr pos:start="2467:29" pos:end="2467:32"><literal type="number" pos:start="2467:29" pos:end="2467:32">0x21</literal></expr>:</case> <case pos:start="2467:35" pos:end="2467:53">case <expr pos:start="2467:40" pos:end="2467:52"><literal type="number" pos:start="2467:40" pos:end="2467:43">0x24</literal> <operator pos:start="2467:45" pos:end="2467:47">...</operator> <literal type="number" pos:start="2467:49" pos:end="2467:52">0x27</literal></expr>:</case> <comment type="block" pos:start="2467:55" pos:end="2467:72">/* fxxx sti, st */</comment>

            <case pos:start="2469:13" pos:end="2469:22">case <expr pos:start="2469:18" pos:end="2469:21"><literal type="number" pos:start="2469:18" pos:end="2469:21">0x30</literal></expr>:</case> <case pos:start="2469:24" pos:end="2469:33">case <expr pos:start="2469:29" pos:end="2469:32"><literal type="number" pos:start="2469:29" pos:end="2469:32">0x31</literal></expr>:</case> <case pos:start="2469:35" pos:end="2469:53">case <expr pos:start="2469:40" pos:end="2469:52"><literal type="number" pos:start="2469:40" pos:end="2469:43">0x34</literal> <operator pos:start="2469:45" pos:end="2469:47">...</operator> <literal type="number" pos:start="2469:49" pos:end="2469:52">0x37</literal></expr>:</case> <comment type="block" pos:start="2469:55" pos:end="2469:73">/* fxxxp sti, st */</comment>

                <block pos:start="2471:17" pos:end="2495:17">{<block_content pos:start="2473:21" pos:end="2493:21">

                    <decl_stmt pos:start="2473:21" pos:end="2473:28"><decl pos:start="2473:21" pos:end="2473:27"><type pos:start="2473:21" pos:end="2473:23"><name pos:start="2473:21" pos:end="2473:23">int</name></type> <name pos:start="2473:25" pos:end="2473:27">op1</name></decl>;</decl_stmt>

                    

                    <expr_stmt pos:start="2477:21" pos:end="2477:33"><expr pos:start="2477:21" pos:end="2477:32"><name pos:start="2477:21" pos:end="2477:23">op1</name> <operator pos:start="2477:25" pos:end="2477:25">=</operator> <name pos:start="2477:27" pos:end="2477:28">op</name> <operator pos:start="2477:30" pos:end="2477:30">&amp;</operator> <literal type="number" pos:start="2477:32" pos:end="2477:32">7</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="2479:21" pos:end="2493:21"><if pos:start="2479:21" pos:end="2487:21">if <condition pos:start="2479:24" pos:end="2479:35">(<expr pos:start="2479:25" pos:end="2479:34"><name pos:start="2479:25" pos:end="2479:26">op</name> <operator pos:start="2479:28" pos:end="2479:29">&gt;=</operator> <literal type="number" pos:start="2479:31" pos:end="2479:34">0x20</literal></expr>)</condition> <block pos:start="2479:37" pos:end="2487:21">{<block_content pos:start="2481:25" pos:end="2485:42">

                        <expr_stmt pos:start="2481:25" pos:end="2481:60"><expr pos:start="2481:25" pos:end="2481:59"><name pos:start="2481:25" pos:end="2481:52"><name pos:start="2481:25" pos:end="2481:47">gen_op_fp_arith_STN_ST0</name><index pos:start="2481:48" pos:end="2481:52">[<expr pos:start="2481:49" pos:end="2481:51"><name pos:start="2481:49" pos:end="2481:51">op1</name></expr>]</index></name><operator pos:start="2481:53" pos:end="2481:53">(</operator><name pos:start="2481:54" pos:end="2481:58">opreg</name><operator pos:start="2481:59" pos:end="2481:59">)</operator></expr>;</expr_stmt>

                        <if_stmt pos:start="2483:25" pos:end="2485:42"><if pos:start="2483:25" pos:end="2485:42">if <condition pos:start="2483:28" pos:end="2483:39">(<expr pos:start="2483:29" pos:end="2483:38"><name pos:start="2483:29" pos:end="2483:30">op</name> <operator pos:start="2483:32" pos:end="2483:33">&gt;=</operator> <literal type="number" pos:start="2483:35" pos:end="2483:38">0x30</literal></expr>)</condition><block type="pseudo" pos:start="2485:29" pos:end="2485:42"><block_content pos:start="2485:29" pos:end="2485:42">

                            <expr_stmt pos:start="2485:29" pos:end="2485:42"><expr pos:start="2485:29" pos:end="2485:41"><call pos:start="2485:29" pos:end="2485:41"><name pos:start="2485:29" pos:end="2485:39">gen_op_fpop</name><argument_list pos:start="2485:40" pos:end="2485:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="2487:23" pos:end="2493:21">else <block pos:start="2487:28" pos:end="2493:21">{<block_content pos:start="2489:25" pos:end="2491:55">

                        <expr_stmt pos:start="2489:25" pos:end="2489:51"><expr pos:start="2489:25" pos:end="2489:50"><call pos:start="2489:25" pos:end="2489:50"><name pos:start="2489:25" pos:end="2489:43">gen_op_fmov_FT0_STN</name><argument_list pos:start="2489:44" pos:end="2489:50">(<argument pos:start="2489:45" pos:end="2489:49"><expr pos:start="2489:45" pos:end="2489:49"><name pos:start="2489:45" pos:end="2489:49">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="2491:25" pos:end="2491:55"><expr pos:start="2491:25" pos:end="2491:54"><name pos:start="2491:25" pos:end="2491:52"><name pos:start="2491:25" pos:end="2491:47">gen_op_fp_arith_ST0_FT0</name><index pos:start="2491:48" pos:end="2491:52">[<expr pos:start="2491:49" pos:end="2491:51"><name pos:start="2491:49" pos:end="2491:51">op1</name></expr>]</index></name><operator pos:start="2491:53" pos:end="2491:53">(</operator><operator pos:start="2491:54" pos:end="2491:54">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block>

                <break pos:start="2497:17" pos:end="2497:22">break;</break>

            <case pos:start="2499:13" pos:end="2499:22">case <expr pos:start="2499:18" pos:end="2499:21"><literal type="number" pos:start="2499:18" pos:end="2499:21">0x02</literal></expr>:</case> <comment type="block" pos:start="2499:24" pos:end="2499:33">/* fcom */</comment>

                <expr_stmt pos:start="2501:17" pos:end="2501:43"><expr pos:start="2501:17" pos:end="2501:42"><call pos:start="2501:17" pos:end="2501:42"><name pos:start="2501:17" pos:end="2501:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2501:36" pos:end="2501:42">(<argument pos:start="2501:37" pos:end="2501:41"><expr pos:start="2501:37" pos:end="2501:41"><name pos:start="2501:37" pos:end="2501:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2503:17" pos:end="2503:38"><expr pos:start="2503:17" pos:end="2503:37"><call pos:start="2503:17" pos:end="2503:37"><name pos:start="2503:17" pos:end="2503:35">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2503:36" pos:end="2503:37">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2505:17" pos:end="2505:22">break;</break>

            <case pos:start="2507:13" pos:end="2507:22">case <expr pos:start="2507:18" pos:end="2507:21"><literal type="number" pos:start="2507:18" pos:end="2507:21">0x03</literal></expr>:</case> <comment type="block" pos:start="2507:24" pos:end="2507:34">/* fcomp */</comment>

                <expr_stmt pos:start="2509:17" pos:end="2509:43"><expr pos:start="2509:17" pos:end="2509:42"><call pos:start="2509:17" pos:end="2509:42"><name pos:start="2509:17" pos:end="2509:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2509:36" pos:end="2509:42">(<argument pos:start="2509:37" pos:end="2509:41"><expr pos:start="2509:37" pos:end="2509:41"><name pos:start="2509:37" pos:end="2509:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2511:17" pos:end="2511:38"><expr pos:start="2511:17" pos:end="2511:37"><call pos:start="2511:17" pos:end="2511:37"><name pos:start="2511:17" pos:end="2511:35">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2511:36" pos:end="2511:37">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2513:17" pos:end="2513:30"><expr pos:start="2513:17" pos:end="2513:29"><call pos:start="2513:17" pos:end="2513:29"><name pos:start="2513:17" pos:end="2513:27">gen_op_fpop</name><argument_list pos:start="2513:28" pos:end="2513:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2515:17" pos:end="2515:22">break;</break>

            <case pos:start="2517:13" pos:end="2517:22">case <expr pos:start="2517:18" pos:end="2517:21"><literal type="number" pos:start="2517:18" pos:end="2517:21">0x15</literal></expr>:</case> <comment type="block" pos:start="2517:24" pos:end="2517:33">/* da/5 */</comment>

                <switch pos:start="2519:17" pos:end="2537:17">switch<condition pos:start="2519:23" pos:end="2519:26">(<expr pos:start="2519:24" pos:end="2519:25"><name pos:start="2519:24" pos:end="2519:25">rm</name></expr>)</condition> <block pos:start="2519:28" pos:end="2537:17">{<block_content pos:start="2521:17" pos:end="2535:36">

                <case pos:start="2521:17" pos:end="2521:23">case <expr pos:start="2521:22" pos:end="2521:22"><literal type="number" pos:start="2521:22" pos:end="2521:22">1</literal></expr>:</case> <comment type="block" pos:start="2521:25" pos:end="2521:37">/* fucompp */</comment>

                    <expr_stmt pos:start="2523:21" pos:end="2523:43"><expr pos:start="2523:21" pos:end="2523:42"><call pos:start="2523:21" pos:end="2523:42"><name pos:start="2523:21" pos:end="2523:39">gen_op_fmov_FT0_STN</name><argument_list pos:start="2523:40" pos:end="2523:42">(<argument pos:start="2523:41" pos:end="2523:41"><expr pos:start="2523:41" pos:end="2523:41"><literal type="number" pos:start="2523:41" pos:end="2523:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2525:21" pos:end="2525:43"><expr pos:start="2525:21" pos:end="2525:42"><call pos:start="2525:21" pos:end="2525:42"><name pos:start="2525:21" pos:end="2525:40">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2525:41" pos:end="2525:42">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2527:21" pos:end="2527:34"><expr pos:start="2527:21" pos:end="2527:33"><call pos:start="2527:21" pos:end="2527:33"><name pos:start="2527:21" pos:end="2527:31">gen_op_fpop</name><argument_list pos:start="2527:32" pos:end="2527:33">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2529:21" pos:end="2529:34"><expr pos:start="2529:21" pos:end="2529:33"><call pos:start="2529:21" pos:end="2529:33"><name pos:start="2529:21" pos:end="2529:31">gen_op_fpop</name><argument_list pos:start="2529:32" pos:end="2529:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2531:21" pos:end="2531:26">break;</break>

                <default pos:start="2533:17" pos:end="2533:24">default:</default>

                    <goto pos:start="2535:21" pos:end="2535:36">goto <name pos:start="2535:26" pos:end="2535:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2539:17" pos:end="2539:22">break;</break>

            <case pos:start="2541:13" pos:end="2541:22">case <expr pos:start="2541:18" pos:end="2541:21"><literal type="number" pos:start="2541:18" pos:end="2541:21">0x1c</literal></expr>:</case>

                <switch pos:start="2543:17" pos:end="2561:17">switch<condition pos:start="2543:23" pos:end="2543:26">(<expr pos:start="2543:24" pos:end="2543:25"><name pos:start="2543:24" pos:end="2543:25">rm</name></expr>)</condition> <block pos:start="2543:28" pos:end="2561:17">{<block_content pos:start="2545:17" pos:end="2559:36">

                <case pos:start="2545:17" pos:end="2545:23">case <expr pos:start="2545:22" pos:end="2545:22"><literal type="number" pos:start="2545:22" pos:end="2545:22">2</literal></expr>:</case> <comment type="block" pos:start="2545:25" pos:end="2545:35">/* fclex */</comment>

                    <expr_stmt pos:start="2547:21" pos:end="2547:35"><expr pos:start="2547:21" pos:end="2547:34"><call pos:start="2547:21" pos:end="2547:34"><name pos:start="2547:21" pos:end="2547:32">gen_op_fclex</name><argument_list pos:start="2547:33" pos:end="2547:34">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2549:21" pos:end="2549:26">break;</break>

                <case pos:start="2551:17" pos:end="2551:23">case <expr pos:start="2551:22" pos:end="2551:22"><literal type="number" pos:start="2551:22" pos:end="2551:22">3</literal></expr>:</case> <comment type="block" pos:start="2551:25" pos:end="2551:36">/* fninit */</comment>

                    <expr_stmt pos:start="2553:21" pos:end="2553:36"><expr pos:start="2553:21" pos:end="2553:35"><call pos:start="2553:21" pos:end="2553:35"><name pos:start="2553:21" pos:end="2553:33">gen_op_fninit</name><argument_list pos:start="2553:34" pos:end="2553:35">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2555:21" pos:end="2555:26">break;</break>

                <default pos:start="2557:17" pos:end="2557:24">default:</default>

                    <goto pos:start="2559:21" pos:end="2559:36">goto <name pos:start="2559:26" pos:end="2559:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2563:17" pos:end="2563:22">break;</break>

            <case pos:start="2565:13" pos:end="2565:22">case <expr pos:start="2565:18" pos:end="2565:21"><literal type="number" pos:start="2565:18" pos:end="2565:21">0x2a</literal></expr>:</case> <comment type="block" pos:start="2565:24" pos:end="2565:36">/* fst sti */</comment>

                <expr_stmt pos:start="2567:17" pos:end="2567:43"><expr pos:start="2567:17" pos:end="2567:42"><call pos:start="2567:17" pos:end="2567:42"><name pos:start="2567:17" pos:end="2567:35">gen_op_fmov_STN_ST0</name><argument_list pos:start="2567:36" pos:end="2567:42">(<argument pos:start="2567:37" pos:end="2567:41"><expr pos:start="2567:37" pos:end="2567:41"><name pos:start="2567:37" pos:end="2567:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2569:17" pos:end="2569:22">break;</break>

            <case pos:start="2571:13" pos:end="2571:22">case <expr pos:start="2571:18" pos:end="2571:21"><literal type="number" pos:start="2571:18" pos:end="2571:21">0x2b</literal></expr>:</case> <comment type="block" pos:start="2571:24" pos:end="2571:37">/* fstp sti */</comment>

                <expr_stmt pos:start="2573:17" pos:end="2573:43"><expr pos:start="2573:17" pos:end="2573:42"><call pos:start="2573:17" pos:end="2573:42"><name pos:start="2573:17" pos:end="2573:35">gen_op_fmov_STN_ST0</name><argument_list pos:start="2573:36" pos:end="2573:42">(<argument pos:start="2573:37" pos:end="2573:41"><expr pos:start="2573:37" pos:end="2573:41"><name pos:start="2573:37" pos:end="2573:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2575:17" pos:end="2575:30"><expr pos:start="2575:17" pos:end="2575:29"><call pos:start="2575:17" pos:end="2575:29"><name pos:start="2575:17" pos:end="2575:27">gen_op_fpop</name><argument_list pos:start="2575:28" pos:end="2575:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2577:17" pos:end="2577:22">break;</break>

            <case pos:start="2579:13" pos:end="2579:22">case <expr pos:start="2579:18" pos:end="2579:21"><literal type="number" pos:start="2579:18" pos:end="2579:21">0x2c</literal></expr>:</case> <comment type="block" pos:start="2579:24" pos:end="2579:40">/* fucom st(i) */</comment>

                <expr_stmt pos:start="2581:17" pos:end="2581:43"><expr pos:start="2581:17" pos:end="2581:42"><call pos:start="2581:17" pos:end="2581:42"><name pos:start="2581:17" pos:end="2581:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2581:36" pos:end="2581:42">(<argument pos:start="2581:37" pos:end="2581:41"><expr pos:start="2581:37" pos:end="2581:41"><name pos:start="2581:37" pos:end="2581:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2583:17" pos:end="2583:39"><expr pos:start="2583:17" pos:end="2583:38"><call pos:start="2583:17" pos:end="2583:38"><name pos:start="2583:17" pos:end="2583:36">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2583:37" pos:end="2583:38">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2585:17" pos:end="2585:22">break;</break>

            <case pos:start="2587:13" pos:end="2587:22">case <expr pos:start="2587:18" pos:end="2587:21"><literal type="number" pos:start="2587:18" pos:end="2587:21">0x2d</literal></expr>:</case> <comment type="block" pos:start="2587:24" pos:end="2587:41">/* fucomp st(i) */</comment>

                <expr_stmt pos:start="2589:17" pos:end="2589:43"><expr pos:start="2589:17" pos:end="2589:42"><call pos:start="2589:17" pos:end="2589:42"><name pos:start="2589:17" pos:end="2589:35">gen_op_fmov_FT0_STN</name><argument_list pos:start="2589:36" pos:end="2589:42">(<argument pos:start="2589:37" pos:end="2589:41"><expr pos:start="2589:37" pos:end="2589:41"><name pos:start="2589:37" pos:end="2589:41">opreg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2591:17" pos:end="2591:39"><expr pos:start="2591:17" pos:end="2591:38"><call pos:start="2591:17" pos:end="2591:38"><name pos:start="2591:17" pos:end="2591:36">gen_op_fucom_ST0_FT0</name><argument_list pos:start="2591:37" pos:end="2591:38">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="2593:17" pos:end="2593:30"><expr pos:start="2593:17" pos:end="2593:29"><call pos:start="2593:17" pos:end="2593:29"><name pos:start="2593:17" pos:end="2593:27">gen_op_fpop</name><argument_list pos:start="2593:28" pos:end="2593:29">()</argument_list></call></expr>;</expr_stmt>

                <break pos:start="2595:17" pos:end="2595:22">break;</break>

            <case pos:start="2597:13" pos:end="2597:22">case <expr pos:start="2597:18" pos:end="2597:21"><literal type="number" pos:start="2597:18" pos:end="2597:21">0x33</literal></expr>:</case> <comment type="block" pos:start="2597:24" pos:end="2597:33">/* de/3 */</comment>

                <switch pos:start="2599:17" pos:end="2617:17">switch<condition pos:start="2599:23" pos:end="2599:26">(<expr pos:start="2599:24" pos:end="2599:25"><name pos:start="2599:24" pos:end="2599:25">rm</name></expr>)</condition> <block pos:start="2599:28" pos:end="2617:17">{<block_content pos:start="2601:17" pos:end="2615:36">

                <case pos:start="2601:17" pos:end="2601:23">case <expr pos:start="2601:22" pos:end="2601:22"><literal type="number" pos:start="2601:22" pos:end="2601:22">1</literal></expr>:</case> <comment type="block" pos:start="2601:25" pos:end="2601:36">/* fcompp */</comment>

                    <expr_stmt pos:start="2603:21" pos:end="2603:43"><expr pos:start="2603:21" pos:end="2603:42"><call pos:start="2603:21" pos:end="2603:42"><name pos:start="2603:21" pos:end="2603:39">gen_op_fmov_FT0_STN</name><argument_list pos:start="2603:40" pos:end="2603:42">(<argument pos:start="2603:41" pos:end="2603:41"><expr pos:start="2603:41" pos:end="2603:41"><literal type="number" pos:start="2603:41" pos:end="2603:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2605:21" pos:end="2605:42"><expr pos:start="2605:21" pos:end="2605:41"><call pos:start="2605:21" pos:end="2605:41"><name pos:start="2605:21" pos:end="2605:39">gen_op_fcom_ST0_FT0</name><argument_list pos:start="2605:40" pos:end="2605:41">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2607:21" pos:end="2607:34"><expr pos:start="2607:21" pos:end="2607:33"><call pos:start="2607:21" pos:end="2607:33"><name pos:start="2607:21" pos:end="2607:31">gen_op_fpop</name><argument_list pos:start="2607:32" pos:end="2607:33">()</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="2609:21" pos:end="2609:34"><expr pos:start="2609:21" pos:end="2609:33"><call pos:start="2609:21" pos:end="2609:33"><name pos:start="2609:21" pos:end="2609:31">gen_op_fpop</name><argument_list pos:start="2609:32" pos:end="2609:33">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2611:21" pos:end="2611:26">break;</break>

                <default pos:start="2613:17" pos:end="2613:24">default:</default>

                    <goto pos:start="2615:21" pos:end="2615:36">goto <name pos:start="2615:26" pos:end="2615:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2619:17" pos:end="2619:22">break;</break>

            <case pos:start="2621:13" pos:end="2621:22">case <expr pos:start="2621:18" pos:end="2621:21"><literal type="number" pos:start="2621:18" pos:end="2621:21">0x3c</literal></expr>:</case> <comment type="block" pos:start="2621:24" pos:end="2621:33">/* df/4 */</comment>

                <switch pos:start="2623:17" pos:end="2635:17">switch<condition pos:start="2623:23" pos:end="2623:26">(<expr pos:start="2623:24" pos:end="2623:25"><name pos:start="2623:24" pos:end="2623:25">rm</name></expr>)</condition> <block pos:start="2623:28" pos:end="2635:17">{<block_content pos:start="2625:17" pos:end="2633:36">

                <case pos:start="2625:17" pos:end="2625:23">case <expr pos:start="2625:22" pos:end="2625:22"><literal type="number" pos:start="2625:22" pos:end="2625:22">0</literal></expr>:</case>

                    <expr_stmt pos:start="2627:21" pos:end="2627:40"><expr pos:start="2627:21" pos:end="2627:39"><call pos:start="2627:21" pos:end="2627:39"><name pos:start="2627:21" pos:end="2627:37">gen_op_fnstsw_EAX</name><argument_list pos:start="2627:38" pos:end="2627:39">()</argument_list></call></expr>;</expr_stmt>

                    <break pos:start="2629:21" pos:end="2629:26">break;</break>

                <default pos:start="2631:17" pos:end="2631:24">default:</default>

                    <goto pos:start="2633:21" pos:end="2633:36">goto <name pos:start="2633:26" pos:end="2633:35">illegal_op</name>;</goto>

                </block_content>}</block></switch>

                <break pos:start="2637:17" pos:end="2637:22">break;</break>

            <default pos:start="2639:13" pos:end="2639:20">default:</default>

                <goto pos:start="2641:17" pos:end="2641:32">goto <name pos:start="2641:22" pos:end="2641:31">illegal_op</name>;</goto>

            </block_content>}</block></switch>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2647:9" pos:end="2647:14">break;</break>

        <comment type="block" format="doxygen" pos:start="2649:9" pos:end="2649:34">/************************/</comment>

        <comment type="block" pos:start="2651:9" pos:end="2651:24">/* string ops */</comment>

    <case pos:start="2653:5" pos:end="2653:14">case <expr pos:start="2653:10" pos:end="2653:13"><literal type="number" pos:start="2653:10" pos:end="2653:13">0xa4</literal></expr>:</case> <comment type="block" pos:start="2653:16" pos:end="2653:26">/* movsS */</comment>

    <case pos:start="2655:5" pos:end="2655:14">case <expr pos:start="2655:10" pos:end="2655:13"><literal type="number" pos:start="2655:10" pos:end="2655:13">0xa5</literal></expr>:</case>

        <if_stmt pos:start="2657:9" pos:end="2663:43"><if pos:start="2657:9" pos:end="2659:25">if <condition pos:start="2657:12" pos:end="2657:25">(<expr pos:start="2657:13" pos:end="2657:24"><operator pos:start="2657:13" pos:end="2657:13">(</operator><name pos:start="2657:14" pos:end="2657:14">b</name> <operator pos:start="2657:16" pos:end="2657:16">&amp;</operator> <literal type="number" pos:start="2657:18" pos:end="2657:18">1</literal><operator pos:start="2657:19" pos:end="2657:19">)</operator> <operator pos:start="2657:21" pos:end="2657:22">==</operator> <literal type="number" pos:start="2657:24" pos:end="2657:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2659:13" pos:end="2659:25"><block_content pos:start="2659:13" pos:end="2659:25">

            <expr_stmt pos:start="2659:13" pos:end="2659:25"><expr pos:start="2659:13" pos:end="2659:24"><name pos:start="2659:13" pos:end="2659:14">ot</name> <operator pos:start="2659:16" pos:end="2659:16">=</operator> <name pos:start="2659:18" pos:end="2659:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2661:9" pos:end="2663:43">else<block type="pseudo" pos:start="2663:13" pos:end="2663:43"><block_content pos:start="2663:13" pos:end="2663:43">

            <expr_stmt pos:start="2663:13" pos:end="2663:43"><expr pos:start="2663:13" pos:end="2663:42"><name pos:start="2663:13" pos:end="2663:14">ot</name> <operator pos:start="2663:16" pos:end="2663:16">=</operator> <ternary pos:start="2663:18" pos:end="2663:42"><condition pos:start="2663:18" pos:end="2663:24"><expr pos:start="2663:18" pos:end="2663:22"><name pos:start="2663:18" pos:end="2663:22">dflag</name></expr> ?</condition><then pos:start="2663:26" pos:end="2663:32"> <expr pos:start="2663:26" pos:end="2663:32"><name pos:start="2663:26" pos:end="2663:32">OT_LONG</name></expr> </then><else pos:start="2663:34" pos:end="2663:42">: <expr pos:start="2663:36" pos:end="2663:42"><name pos:start="2663:36" pos:end="2663:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2665:9" pos:end="2673:9"><if pos:start="2665:9" pos:end="2669:9">if <condition pos:start="2665:12" pos:end="2665:35">(<expr pos:start="2665:13" pos:end="2665:34"><name pos:start="2665:13" pos:end="2665:20">prefixes</name> <operator pos:start="2665:22" pos:end="2665:22">&amp;</operator> <name pos:start="2665:24" pos:end="2665:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2665:37" pos:end="2669:9">{<block_content pos:start="2667:13" pos:end="2667:34">

            <expr_stmt pos:start="2667:13" pos:end="2667:34"><expr pos:start="2667:13" pos:end="2667:33"><name pos:start="2667:13" pos:end="2667:31"><name pos:start="2667:13" pos:end="2667:23">gen_op_movs</name><index pos:start="2667:24" pos:end="2667:31">[<expr pos:start="2667:25" pos:end="2667:30"><literal type="number" pos:start="2667:25" pos:end="2667:25">3</literal> <operator pos:start="2667:27" pos:end="2667:27">+</operator> <name pos:start="2667:29" pos:end="2667:30">ot</name></expr>]</index></name><operator pos:start="2667:32" pos:end="2667:32">(</operator><operator pos:start="2667:33" pos:end="2667:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2669:11" pos:end="2673:9">else <block pos:start="2669:16" pos:end="2673:9">{<block_content pos:start="2671:13" pos:end="2671:30">

            <expr_stmt pos:start="2671:13" pos:end="2671:30"><expr pos:start="2671:13" pos:end="2671:29"><name pos:start="2671:13" pos:end="2671:27"><name pos:start="2671:13" pos:end="2671:23">gen_op_movs</name><index pos:start="2671:24" pos:end="2671:27">[<expr pos:start="2671:25" pos:end="2671:26"><name pos:start="2671:25" pos:end="2671:26">ot</name></expr>]</index></name><operator pos:start="2671:28" pos:end="2671:28">(</operator><operator pos:start="2671:29" pos:end="2671:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2675:9" pos:end="2675:14">break;</break>

        

    <case pos:start="2679:5" pos:end="2679:14">case <expr pos:start="2679:10" pos:end="2679:13"><literal type="number" pos:start="2679:10" pos:end="2679:13">0xaa</literal></expr>:</case> <comment type="block" pos:start="2679:16" pos:end="2679:26">/* stosS */</comment>

    <case pos:start="2681:5" pos:end="2681:14">case <expr pos:start="2681:10" pos:end="2681:13"><literal type="number" pos:start="2681:10" pos:end="2681:13">0xab</literal></expr>:</case>

        <if_stmt pos:start="2683:9" pos:end="2689:43"><if pos:start="2683:9" pos:end="2685:25">if <condition pos:start="2683:12" pos:end="2683:25">(<expr pos:start="2683:13" pos:end="2683:24"><operator pos:start="2683:13" pos:end="2683:13">(</operator><name pos:start="2683:14" pos:end="2683:14">b</name> <operator pos:start="2683:16" pos:end="2683:16">&amp;</operator> <literal type="number" pos:start="2683:18" pos:end="2683:18">1</literal><operator pos:start="2683:19" pos:end="2683:19">)</operator> <operator pos:start="2683:21" pos:end="2683:22">==</operator> <literal type="number" pos:start="2683:24" pos:end="2683:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2685:13" pos:end="2685:25"><block_content pos:start="2685:13" pos:end="2685:25">

            <expr_stmt pos:start="2685:13" pos:end="2685:25"><expr pos:start="2685:13" pos:end="2685:24"><name pos:start="2685:13" pos:end="2685:14">ot</name> <operator pos:start="2685:16" pos:end="2685:16">=</operator> <name pos:start="2685:18" pos:end="2685:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2687:9" pos:end="2689:43">else<block type="pseudo" pos:start="2689:13" pos:end="2689:43"><block_content pos:start="2689:13" pos:end="2689:43">

            <expr_stmt pos:start="2689:13" pos:end="2689:43"><expr pos:start="2689:13" pos:end="2689:42"><name pos:start="2689:13" pos:end="2689:14">ot</name> <operator pos:start="2689:16" pos:end="2689:16">=</operator> <ternary pos:start="2689:18" pos:end="2689:42"><condition pos:start="2689:18" pos:end="2689:24"><expr pos:start="2689:18" pos:end="2689:22"><name pos:start="2689:18" pos:end="2689:22">dflag</name></expr> ?</condition><then pos:start="2689:26" pos:end="2689:32"> <expr pos:start="2689:26" pos:end="2689:32"><name pos:start="2689:26" pos:end="2689:32">OT_LONG</name></expr> </then><else pos:start="2689:34" pos:end="2689:42">: <expr pos:start="2689:36" pos:end="2689:42"><name pos:start="2689:36" pos:end="2689:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2691:9" pos:end="2699:9"><if pos:start="2691:9" pos:end="2695:9">if <condition pos:start="2691:12" pos:end="2691:35">(<expr pos:start="2691:13" pos:end="2691:34"><name pos:start="2691:13" pos:end="2691:20">prefixes</name> <operator pos:start="2691:22" pos:end="2691:22">&amp;</operator> <name pos:start="2691:24" pos:end="2691:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2691:37" pos:end="2695:9">{<block_content pos:start="2693:13" pos:end="2693:34">

            <expr_stmt pos:start="2693:13" pos:end="2693:34"><expr pos:start="2693:13" pos:end="2693:33"><name pos:start="2693:13" pos:end="2693:31"><name pos:start="2693:13" pos:end="2693:23">gen_op_stos</name><index pos:start="2693:24" pos:end="2693:31">[<expr pos:start="2693:25" pos:end="2693:30"><literal type="number" pos:start="2693:25" pos:end="2693:25">3</literal> <operator pos:start="2693:27" pos:end="2693:27">+</operator> <name pos:start="2693:29" pos:end="2693:30">ot</name></expr>]</index></name><operator pos:start="2693:32" pos:end="2693:32">(</operator><operator pos:start="2693:33" pos:end="2693:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2695:11" pos:end="2699:9">else <block pos:start="2695:16" pos:end="2699:9">{<block_content pos:start="2697:13" pos:end="2697:30">

            <expr_stmt pos:start="2697:13" pos:end="2697:30"><expr pos:start="2697:13" pos:end="2697:29"><name pos:start="2697:13" pos:end="2697:27"><name pos:start="2697:13" pos:end="2697:23">gen_op_stos</name><index pos:start="2697:24" pos:end="2697:27">[<expr pos:start="2697:25" pos:end="2697:26"><name pos:start="2697:25" pos:end="2697:26">ot</name></expr>]</index></name><operator pos:start="2697:28" pos:end="2697:28">(</operator><operator pos:start="2697:29" pos:end="2697:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2701:9" pos:end="2701:14">break;</break>

    <case pos:start="2703:5" pos:end="2703:14">case <expr pos:start="2703:10" pos:end="2703:13"><literal type="number" pos:start="2703:10" pos:end="2703:13">0xac</literal></expr>:</case> <comment type="block" pos:start="2703:16" pos:end="2703:26">/* lodsS */</comment>

    <case pos:start="2705:5" pos:end="2705:14">case <expr pos:start="2705:10" pos:end="2705:13"><literal type="number" pos:start="2705:10" pos:end="2705:13">0xad</literal></expr>:</case>

        <if_stmt pos:start="2707:9" pos:end="2713:43"><if pos:start="2707:9" pos:end="2709:25">if <condition pos:start="2707:12" pos:end="2707:25">(<expr pos:start="2707:13" pos:end="2707:24"><operator pos:start="2707:13" pos:end="2707:13">(</operator><name pos:start="2707:14" pos:end="2707:14">b</name> <operator pos:start="2707:16" pos:end="2707:16">&amp;</operator> <literal type="number" pos:start="2707:18" pos:end="2707:18">1</literal><operator pos:start="2707:19" pos:end="2707:19">)</operator> <operator pos:start="2707:21" pos:end="2707:22">==</operator> <literal type="number" pos:start="2707:24" pos:end="2707:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2709:13" pos:end="2709:25"><block_content pos:start="2709:13" pos:end="2709:25">

            <expr_stmt pos:start="2709:13" pos:end="2709:25"><expr pos:start="2709:13" pos:end="2709:24"><name pos:start="2709:13" pos:end="2709:14">ot</name> <operator pos:start="2709:16" pos:end="2709:16">=</operator> <name pos:start="2709:18" pos:end="2709:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2711:9" pos:end="2713:43">else<block type="pseudo" pos:start="2713:13" pos:end="2713:43"><block_content pos:start="2713:13" pos:end="2713:43">

            <expr_stmt pos:start="2713:13" pos:end="2713:43"><expr pos:start="2713:13" pos:end="2713:42"><name pos:start="2713:13" pos:end="2713:14">ot</name> <operator pos:start="2713:16" pos:end="2713:16">=</operator> <ternary pos:start="2713:18" pos:end="2713:42"><condition pos:start="2713:18" pos:end="2713:24"><expr pos:start="2713:18" pos:end="2713:22"><name pos:start="2713:18" pos:end="2713:22">dflag</name></expr> ?</condition><then pos:start="2713:26" pos:end="2713:32"> <expr pos:start="2713:26" pos:end="2713:32"><name pos:start="2713:26" pos:end="2713:32">OT_LONG</name></expr> </then><else pos:start="2713:34" pos:end="2713:42">: <expr pos:start="2713:36" pos:end="2713:42"><name pos:start="2713:36" pos:end="2713:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2715:9" pos:end="2723:9"><if pos:start="2715:9" pos:end="2719:9">if <condition pos:start="2715:12" pos:end="2715:35">(<expr pos:start="2715:13" pos:end="2715:34"><name pos:start="2715:13" pos:end="2715:20">prefixes</name> <operator pos:start="2715:22" pos:end="2715:22">&amp;</operator> <name pos:start="2715:24" pos:end="2715:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2715:37" pos:end="2719:9">{<block_content pos:start="2717:13" pos:end="2717:34">

            <expr_stmt pos:start="2717:13" pos:end="2717:34"><expr pos:start="2717:13" pos:end="2717:33"><name pos:start="2717:13" pos:end="2717:31"><name pos:start="2717:13" pos:end="2717:23">gen_op_lods</name><index pos:start="2717:24" pos:end="2717:31">[<expr pos:start="2717:25" pos:end="2717:30"><literal type="number" pos:start="2717:25" pos:end="2717:25">3</literal> <operator pos:start="2717:27" pos:end="2717:27">+</operator> <name pos:start="2717:29" pos:end="2717:30">ot</name></expr>]</index></name><operator pos:start="2717:32" pos:end="2717:32">(</operator><operator pos:start="2717:33" pos:end="2717:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2719:11" pos:end="2723:9">else <block pos:start="2719:16" pos:end="2723:9">{<block_content pos:start="2721:13" pos:end="2721:30">

            <expr_stmt pos:start="2721:13" pos:end="2721:30"><expr pos:start="2721:13" pos:end="2721:29"><name pos:start="2721:13" pos:end="2721:27"><name pos:start="2721:13" pos:end="2721:23">gen_op_lods</name><index pos:start="2721:24" pos:end="2721:27">[<expr pos:start="2721:25" pos:end="2721:26"><name pos:start="2721:25" pos:end="2721:26">ot</name></expr>]</index></name><operator pos:start="2721:28" pos:end="2721:28">(</operator><operator pos:start="2721:29" pos:end="2721:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2725:9" pos:end="2725:14">break;</break>

    <case pos:start="2727:5" pos:end="2727:14">case <expr pos:start="2727:10" pos:end="2727:13"><literal type="number" pos:start="2727:10" pos:end="2727:13">0xae</literal></expr>:</case> <comment type="block" pos:start="2727:16" pos:end="2727:26">/* scasS */</comment>

    <case pos:start="2729:5" pos:end="2729:14">case <expr pos:start="2729:10" pos:end="2729:13"><literal type="number" pos:start="2729:10" pos:end="2729:13">0xaf</literal></expr>:</case>

        <if_stmt pos:start="2731:9" pos:end="2737:43"><if pos:start="2731:9" pos:end="2733:25">if <condition pos:start="2731:12" pos:end="2731:25">(<expr pos:start="2731:13" pos:end="2731:24"><operator pos:start="2731:13" pos:end="2731:13">(</operator><name pos:start="2731:14" pos:end="2731:14">b</name> <operator pos:start="2731:16" pos:end="2731:16">&amp;</operator> <literal type="number" pos:start="2731:18" pos:end="2731:18">1</literal><operator pos:start="2731:19" pos:end="2731:19">)</operator> <operator pos:start="2731:21" pos:end="2731:22">==</operator> <literal type="number" pos:start="2731:24" pos:end="2731:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2733:13" pos:end="2733:25"><block_content pos:start="2733:13" pos:end="2733:25">

            <expr_stmt pos:start="2733:13" pos:end="2733:25"><expr pos:start="2733:13" pos:end="2733:24"><name pos:start="2733:13" pos:end="2733:14">ot</name> <operator pos:start="2733:16" pos:end="2733:16">=</operator> <name pos:start="2733:18" pos:end="2733:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2735:9" pos:end="2737:43">else<block type="pseudo" pos:start="2737:13" pos:end="2737:43"><block_content pos:start="2737:13" pos:end="2737:43">

            <expr_stmt pos:start="2737:13" pos:end="2737:43"><expr pos:start="2737:13" pos:end="2737:42"><name pos:start="2737:13" pos:end="2737:14">ot</name> <operator pos:start="2737:16" pos:end="2737:16">=</operator> <ternary pos:start="2737:18" pos:end="2737:42"><condition pos:start="2737:18" pos:end="2737:24"><expr pos:start="2737:18" pos:end="2737:22"><name pos:start="2737:18" pos:end="2737:22">dflag</name></expr> ?</condition><then pos:start="2737:26" pos:end="2737:32"> <expr pos:start="2737:26" pos:end="2737:32"><name pos:start="2737:26" pos:end="2737:32">OT_LONG</name></expr> </then><else pos:start="2737:34" pos:end="2737:42">: <expr pos:start="2737:36" pos:end="2737:42"><name pos:start="2737:36" pos:end="2737:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2739:9" pos:end="2765:9"><if pos:start="2739:9" pos:end="2749:9">if <condition pos:start="2739:12" pos:end="2739:36">(<expr pos:start="2739:13" pos:end="2739:35"><name pos:start="2739:13" pos:end="2739:20">prefixes</name> <operator pos:start="2739:22" pos:end="2739:22">&amp;</operator> <name pos:start="2739:24" pos:end="2739:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="2739:38" pos:end="2749:9">{<block_content pos:start="2741:13" pos:end="2747:37">

            <if_stmt pos:start="2741:13" pos:end="2743:43"><if pos:start="2741:13" pos:end="2743:43">if <condition pos:start="2741:16" pos:end="2741:42">(<expr pos:start="2741:17" pos:end="2741:41"><name pos:start="2741:17" pos:end="2741:24"><name pos:start="2741:17" pos:end="2741:17">s</name><operator pos:start="2741:18" pos:end="2741:19">-&gt;</operator><name pos:start="2741:20" pos:end="2741:24">cc_op</name></name> <operator pos:start="2741:26" pos:end="2741:27">!=</operator> <name pos:start="2741:29" pos:end="2741:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2743:17" pos:end="2743:43"><block_content pos:start="2743:17" pos:end="2743:43">

                <expr_stmt pos:start="2743:17" pos:end="2743:43"><expr pos:start="2743:17" pos:end="2743:42"><call pos:start="2743:17" pos:end="2743:42"><name pos:start="2743:17" pos:end="2743:32">gen_op_set_cc_op</name><argument_list pos:start="2743:33" pos:end="2743:42">(<argument pos:start="2743:34" pos:end="2743:41"><expr pos:start="2743:34" pos:end="2743:41"><name pos:start="2743:34" pos:end="2743:41"><name pos:start="2743:34" pos:end="2743:34">s</name><operator pos:start="2743:35" pos:end="2743:36">-&gt;</operator><name pos:start="2743:37" pos:end="2743:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2745:13" pos:end="2745:34"><expr pos:start="2745:13" pos:end="2745:33"><name pos:start="2745:13" pos:end="2745:31"><name pos:start="2745:13" pos:end="2745:23">gen_op_scas</name><index pos:start="2745:24" pos:end="2745:31">[<expr pos:start="2745:25" pos:end="2745:30"><literal type="number" pos:start="2745:25" pos:end="2745:25">6</literal> <operator pos:start="2745:27" pos:end="2745:27">+</operator> <name pos:start="2745:29" pos:end="2745:30">ot</name></expr>]</index></name><operator pos:start="2745:32" pos:end="2745:32">(</operator><operator pos:start="2745:33" pos:end="2745:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2747:13" pos:end="2747:37"><expr pos:start="2747:13" pos:end="2747:36"><name pos:start="2747:13" pos:end="2747:20"><name pos:start="2747:13" pos:end="2747:13">s</name><operator pos:start="2747:14" pos:end="2747:15">-&gt;</operator><name pos:start="2747:16" pos:end="2747:20">cc_op</name></name> <operator pos:start="2747:22" pos:end="2747:22">=</operator> <name pos:start="2747:24" pos:end="2747:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2747:39" pos:end="2747:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="2749:11" pos:end="2759:9">else if <condition pos:start="2749:19" pos:end="2749:42">(<expr pos:start="2749:20" pos:end="2749:41"><name pos:start="2749:20" pos:end="2749:27">prefixes</name> <operator pos:start="2749:29" pos:end="2749:29">&amp;</operator> <name pos:start="2749:31" pos:end="2749:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2749:44" pos:end="2759:9">{<block_content pos:start="2751:13" pos:end="2757:37">

            <if_stmt pos:start="2751:13" pos:end="2753:43"><if pos:start="2751:13" pos:end="2753:43">if <condition pos:start="2751:16" pos:end="2751:42">(<expr pos:start="2751:17" pos:end="2751:41"><name pos:start="2751:17" pos:end="2751:24"><name pos:start="2751:17" pos:end="2751:17">s</name><operator pos:start="2751:18" pos:end="2751:19">-&gt;</operator><name pos:start="2751:20" pos:end="2751:24">cc_op</name></name> <operator pos:start="2751:26" pos:end="2751:27">!=</operator> <name pos:start="2751:29" pos:end="2751:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2753:17" pos:end="2753:43"><block_content pos:start="2753:17" pos:end="2753:43">

                <expr_stmt pos:start="2753:17" pos:end="2753:43"><expr pos:start="2753:17" pos:end="2753:42"><call pos:start="2753:17" pos:end="2753:42"><name pos:start="2753:17" pos:end="2753:32">gen_op_set_cc_op</name><argument_list pos:start="2753:33" pos:end="2753:42">(<argument pos:start="2753:34" pos:end="2753:41"><expr pos:start="2753:34" pos:end="2753:41"><name pos:start="2753:34" pos:end="2753:41"><name pos:start="2753:34" pos:end="2753:34">s</name><operator pos:start="2753:35" pos:end="2753:36">-&gt;</operator><name pos:start="2753:37" pos:end="2753:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2755:13" pos:end="2755:34"><expr pos:start="2755:13" pos:end="2755:33"><name pos:start="2755:13" pos:end="2755:31"><name pos:start="2755:13" pos:end="2755:23">gen_op_scas</name><index pos:start="2755:24" pos:end="2755:31">[<expr pos:start="2755:25" pos:end="2755:30"><literal type="number" pos:start="2755:25" pos:end="2755:25">3</literal> <operator pos:start="2755:27" pos:end="2755:27">+</operator> <name pos:start="2755:29" pos:end="2755:30">ot</name></expr>]</index></name><operator pos:start="2755:32" pos:end="2755:32">(</operator><operator pos:start="2755:33" pos:end="2755:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2757:13" pos:end="2757:37"><expr pos:start="2757:13" pos:end="2757:36"><name pos:start="2757:13" pos:end="2757:20"><name pos:start="2757:13" pos:end="2757:13">s</name><operator pos:start="2757:14" pos:end="2757:15">-&gt;</operator><name pos:start="2757:16" pos:end="2757:20">cc_op</name></name> <operator pos:start="2757:22" pos:end="2757:22">=</operator> <name pos:start="2757:24" pos:end="2757:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2757:39" pos:end="2757:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <else pos:start="2759:11" pos:end="2765:9">else <block pos:start="2759:16" pos:end="2765:9">{<block_content pos:start="2761:13" pos:end="2763:39">

            <expr_stmt pos:start="2761:13" pos:end="2761:30"><expr pos:start="2761:13" pos:end="2761:29"><name pos:start="2761:13" pos:end="2761:27"><name pos:start="2761:13" pos:end="2761:23">gen_op_scas</name><index pos:start="2761:24" pos:end="2761:27">[<expr pos:start="2761:25" pos:end="2761:26"><name pos:start="2761:25" pos:end="2761:26">ot</name></expr>]</index></name><operator pos:start="2761:28" pos:end="2761:28">(</operator><operator pos:start="2761:29" pos:end="2761:29">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2763:13" pos:end="2763:39"><expr pos:start="2763:13" pos:end="2763:38"><name pos:start="2763:13" pos:end="2763:20"><name pos:start="2763:13" pos:end="2763:13">s</name><operator pos:start="2763:14" pos:end="2763:15">-&gt;</operator><name pos:start="2763:16" pos:end="2763:20">cc_op</name></name> <operator pos:start="2763:22" pos:end="2763:22">=</operator> <name pos:start="2763:24" pos:end="2763:33">CC_OP_SUBB</name> <operator pos:start="2763:35" pos:end="2763:35">+</operator> <name pos:start="2763:37" pos:end="2763:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2767:9" pos:end="2767:14">break;</break>



    <case pos:start="2771:5" pos:end="2771:14">case <expr pos:start="2771:10" pos:end="2771:13"><literal type="number" pos:start="2771:10" pos:end="2771:13">0xa6</literal></expr>:</case> <comment type="block" pos:start="2771:16" pos:end="2771:26">/* cmpsS */</comment>

    <case pos:start="2773:5" pos:end="2773:14">case <expr pos:start="2773:10" pos:end="2773:13"><literal type="number" pos:start="2773:10" pos:end="2773:13">0xa7</literal></expr>:</case>

        <if_stmt pos:start="2775:9" pos:end="2781:43"><if pos:start="2775:9" pos:end="2777:25">if <condition pos:start="2775:12" pos:end="2775:25">(<expr pos:start="2775:13" pos:end="2775:24"><operator pos:start="2775:13" pos:end="2775:13">(</operator><name pos:start="2775:14" pos:end="2775:14">b</name> <operator pos:start="2775:16" pos:end="2775:16">&amp;</operator> <literal type="number" pos:start="2775:18" pos:end="2775:18">1</literal><operator pos:start="2775:19" pos:end="2775:19">)</operator> <operator pos:start="2775:21" pos:end="2775:22">==</operator> <literal type="number" pos:start="2775:24" pos:end="2775:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2777:13" pos:end="2777:25"><block_content pos:start="2777:13" pos:end="2777:25">

            <expr_stmt pos:start="2777:13" pos:end="2777:25"><expr pos:start="2777:13" pos:end="2777:24"><name pos:start="2777:13" pos:end="2777:14">ot</name> <operator pos:start="2777:16" pos:end="2777:16">=</operator> <name pos:start="2777:18" pos:end="2777:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2779:9" pos:end="2781:43">else<block type="pseudo" pos:start="2781:13" pos:end="2781:43"><block_content pos:start="2781:13" pos:end="2781:43">

            <expr_stmt pos:start="2781:13" pos:end="2781:43"><expr pos:start="2781:13" pos:end="2781:42"><name pos:start="2781:13" pos:end="2781:14">ot</name> <operator pos:start="2781:16" pos:end="2781:16">=</operator> <ternary pos:start="2781:18" pos:end="2781:42"><condition pos:start="2781:18" pos:end="2781:24"><expr pos:start="2781:18" pos:end="2781:22"><name pos:start="2781:18" pos:end="2781:22">dflag</name></expr> ?</condition><then pos:start="2781:26" pos:end="2781:32"> <expr pos:start="2781:26" pos:end="2781:32"><name pos:start="2781:26" pos:end="2781:32">OT_LONG</name></expr> </then><else pos:start="2781:34" pos:end="2781:42">: <expr pos:start="2781:36" pos:end="2781:42"><name pos:start="2781:36" pos:end="2781:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2783:9" pos:end="2809:9"><if pos:start="2783:9" pos:end="2793:9">if <condition pos:start="2783:12" pos:end="2783:36">(<expr pos:start="2783:13" pos:end="2783:35"><name pos:start="2783:13" pos:end="2783:20">prefixes</name> <operator pos:start="2783:22" pos:end="2783:22">&amp;</operator> <name pos:start="2783:24" pos:end="2783:35">PREFIX_REPNZ</name></expr>)</condition> <block pos:start="2783:38" pos:end="2793:9">{<block_content pos:start="2785:13" pos:end="2791:37">

            <if_stmt pos:start="2785:13" pos:end="2787:43"><if pos:start="2785:13" pos:end="2787:43">if <condition pos:start="2785:16" pos:end="2785:42">(<expr pos:start="2785:17" pos:end="2785:41"><name pos:start="2785:17" pos:end="2785:24"><name pos:start="2785:17" pos:end="2785:17">s</name><operator pos:start="2785:18" pos:end="2785:19">-&gt;</operator><name pos:start="2785:20" pos:end="2785:24">cc_op</name></name> <operator pos:start="2785:26" pos:end="2785:27">!=</operator> <name pos:start="2785:29" pos:end="2785:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2787:17" pos:end="2787:43"><block_content pos:start="2787:17" pos:end="2787:43">

                <expr_stmt pos:start="2787:17" pos:end="2787:43"><expr pos:start="2787:17" pos:end="2787:42"><call pos:start="2787:17" pos:end="2787:42"><name pos:start="2787:17" pos:end="2787:32">gen_op_set_cc_op</name><argument_list pos:start="2787:33" pos:end="2787:42">(<argument pos:start="2787:34" pos:end="2787:41"><expr pos:start="2787:34" pos:end="2787:41"><name pos:start="2787:34" pos:end="2787:41"><name pos:start="2787:34" pos:end="2787:34">s</name><operator pos:start="2787:35" pos:end="2787:36">-&gt;</operator><name pos:start="2787:37" pos:end="2787:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2789:13" pos:end="2789:34"><expr pos:start="2789:13" pos:end="2789:33"><name pos:start="2789:13" pos:end="2789:31"><name pos:start="2789:13" pos:end="2789:23">gen_op_cmps</name><index pos:start="2789:24" pos:end="2789:31">[<expr pos:start="2789:25" pos:end="2789:30"><literal type="number" pos:start="2789:25" pos:end="2789:25">6</literal> <operator pos:start="2789:27" pos:end="2789:27">+</operator> <name pos:start="2789:29" pos:end="2789:30">ot</name></expr>]</index></name><operator pos:start="2789:32" pos:end="2789:32">(</operator><operator pos:start="2789:33" pos:end="2789:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2791:13" pos:end="2791:37"><expr pos:start="2791:13" pos:end="2791:36"><name pos:start="2791:13" pos:end="2791:20"><name pos:start="2791:13" pos:end="2791:13">s</name><operator pos:start="2791:14" pos:end="2791:15">-&gt;</operator><name pos:start="2791:16" pos:end="2791:20">cc_op</name></name> <operator pos:start="2791:22" pos:end="2791:22">=</operator> <name pos:start="2791:24" pos:end="2791:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2791:39" pos:end="2791:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="2793:11" pos:end="2803:9">else if <condition pos:start="2793:19" pos:end="2793:42">(<expr pos:start="2793:20" pos:end="2793:41"><name pos:start="2793:20" pos:end="2793:27">prefixes</name> <operator pos:start="2793:29" pos:end="2793:29">&amp;</operator> <name pos:start="2793:31" pos:end="2793:41">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2793:44" pos:end="2803:9">{<block_content pos:start="2795:13" pos:end="2801:37">

            <if_stmt pos:start="2795:13" pos:end="2797:43"><if pos:start="2795:13" pos:end="2797:43">if <condition pos:start="2795:16" pos:end="2795:42">(<expr pos:start="2795:17" pos:end="2795:41"><name pos:start="2795:17" pos:end="2795:24"><name pos:start="2795:17" pos:end="2795:17">s</name><operator pos:start="2795:18" pos:end="2795:19">-&gt;</operator><name pos:start="2795:20" pos:end="2795:24">cc_op</name></name> <operator pos:start="2795:26" pos:end="2795:27">!=</operator> <name pos:start="2795:29" pos:end="2795:41">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="2797:17" pos:end="2797:43"><block_content pos:start="2797:17" pos:end="2797:43">

                <expr_stmt pos:start="2797:17" pos:end="2797:43"><expr pos:start="2797:17" pos:end="2797:42"><call pos:start="2797:17" pos:end="2797:42"><name pos:start="2797:17" pos:end="2797:32">gen_op_set_cc_op</name><argument_list pos:start="2797:33" pos:end="2797:42">(<argument pos:start="2797:34" pos:end="2797:41"><expr pos:start="2797:34" pos:end="2797:41"><name pos:start="2797:34" pos:end="2797:41"><name pos:start="2797:34" pos:end="2797:34">s</name><operator pos:start="2797:35" pos:end="2797:36">-&gt;</operator><name pos:start="2797:37" pos:end="2797:41">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="2799:13" pos:end="2799:34"><expr pos:start="2799:13" pos:end="2799:33"><name pos:start="2799:13" pos:end="2799:31"><name pos:start="2799:13" pos:end="2799:23">gen_op_cmps</name><index pos:start="2799:24" pos:end="2799:31">[<expr pos:start="2799:25" pos:end="2799:30"><literal type="number" pos:start="2799:25" pos:end="2799:25">3</literal> <operator pos:start="2799:27" pos:end="2799:27">+</operator> <name pos:start="2799:29" pos:end="2799:30">ot</name></expr>]</index></name><operator pos:start="2799:32" pos:end="2799:32">(</operator><operator pos:start="2799:33" pos:end="2799:33">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2801:13" pos:end="2801:37"><expr pos:start="2801:13" pos:end="2801:36"><name pos:start="2801:13" pos:end="2801:20"><name pos:start="2801:13" pos:end="2801:13">s</name><operator pos:start="2801:14" pos:end="2801:15">-&gt;</operator><name pos:start="2801:16" pos:end="2801:20">cc_op</name></name> <operator pos:start="2801:22" pos:end="2801:22">=</operator> <name pos:start="2801:24" pos:end="2801:36">CC_OP_DYNAMIC</name></expr>;</expr_stmt> <comment type="block" pos:start="2801:39" pos:end="2801:70">/* cannot predict flags after */</comment>

        </block_content>}</block></if> <else pos:start="2803:11" pos:end="2809:9">else <block pos:start="2803:16" pos:end="2809:9">{<block_content pos:start="2805:13" pos:end="2807:39">

            <expr_stmt pos:start="2805:13" pos:end="2805:30"><expr pos:start="2805:13" pos:end="2805:29"><name pos:start="2805:13" pos:end="2805:27"><name pos:start="2805:13" pos:end="2805:23">gen_op_cmps</name><index pos:start="2805:24" pos:end="2805:27">[<expr pos:start="2805:25" pos:end="2805:26"><name pos:start="2805:25" pos:end="2805:26">ot</name></expr>]</index></name><operator pos:start="2805:28" pos:end="2805:28">(</operator><operator pos:start="2805:29" pos:end="2805:29">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="2807:13" pos:end="2807:39"><expr pos:start="2807:13" pos:end="2807:38"><name pos:start="2807:13" pos:end="2807:20"><name pos:start="2807:13" pos:end="2807:13">s</name><operator pos:start="2807:14" pos:end="2807:15">-&gt;</operator><name pos:start="2807:16" pos:end="2807:20">cc_op</name></name> <operator pos:start="2807:22" pos:end="2807:22">=</operator> <name pos:start="2807:24" pos:end="2807:33">CC_OP_SUBB</name> <operator pos:start="2807:35" pos:end="2807:35">+</operator> <name pos:start="2807:37" pos:end="2807:38">ot</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2811:9" pos:end="2811:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="2815:9" pos:end="2815:34">/************************/</comment>

        <comment type="block" pos:start="2817:9" pos:end="2817:22">/* port I/O */</comment>

    <case pos:start="2819:5" pos:end="2819:14">case <expr pos:start="2819:10" pos:end="2819:13"><literal type="number" pos:start="2819:10" pos:end="2819:13">0x6c</literal></expr>:</case> <comment type="block" pos:start="2819:16" pos:end="2819:25">/* insS */</comment>

    <case pos:start="2821:5" pos:end="2821:14">case <expr pos:start="2821:10" pos:end="2821:13"><literal type="number" pos:start="2821:10" pos:end="2821:13">0x6d</literal></expr>:</case>

        <if_stmt pos:start="2823:9" pos:end="2829:43"><if pos:start="2823:9" pos:end="2825:25">if <condition pos:start="2823:12" pos:end="2823:25">(<expr pos:start="2823:13" pos:end="2823:24"><operator pos:start="2823:13" pos:end="2823:13">(</operator><name pos:start="2823:14" pos:end="2823:14">b</name> <operator pos:start="2823:16" pos:end="2823:16">&amp;</operator> <literal type="number" pos:start="2823:18" pos:end="2823:18">1</literal><operator pos:start="2823:19" pos:end="2823:19">)</operator> <operator pos:start="2823:21" pos:end="2823:22">==</operator> <literal type="number" pos:start="2823:24" pos:end="2823:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2825:13" pos:end="2825:25"><block_content pos:start="2825:13" pos:end="2825:25">

            <expr_stmt pos:start="2825:13" pos:end="2825:25"><expr pos:start="2825:13" pos:end="2825:24"><name pos:start="2825:13" pos:end="2825:14">ot</name> <operator pos:start="2825:16" pos:end="2825:16">=</operator> <name pos:start="2825:18" pos:end="2825:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2827:9" pos:end="2829:43">else<block type="pseudo" pos:start="2829:13" pos:end="2829:43"><block_content pos:start="2829:13" pos:end="2829:43">

            <expr_stmt pos:start="2829:13" pos:end="2829:43"><expr pos:start="2829:13" pos:end="2829:42"><name pos:start="2829:13" pos:end="2829:14">ot</name> <operator pos:start="2829:16" pos:end="2829:16">=</operator> <ternary pos:start="2829:18" pos:end="2829:42"><condition pos:start="2829:18" pos:end="2829:24"><expr pos:start="2829:18" pos:end="2829:22"><name pos:start="2829:18" pos:end="2829:22">dflag</name></expr> ?</condition><then pos:start="2829:26" pos:end="2829:32"> <expr pos:start="2829:26" pos:end="2829:32"><name pos:start="2829:26" pos:end="2829:32">OT_LONG</name></expr> </then><else pos:start="2829:34" pos:end="2829:42">: <expr pos:start="2829:36" pos:end="2829:42"><name pos:start="2829:36" pos:end="2829:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2831:9" pos:end="2839:9"><if pos:start="2831:9" pos:end="2835:9">if <condition pos:start="2831:12" pos:end="2831:35">(<expr pos:start="2831:13" pos:end="2831:34"><name pos:start="2831:13" pos:end="2831:20">prefixes</name> <operator pos:start="2831:22" pos:end="2831:22">&amp;</operator> <name pos:start="2831:24" pos:end="2831:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2831:37" pos:end="2835:9">{<block_content pos:start="2833:13" pos:end="2833:33">

            <expr_stmt pos:start="2833:13" pos:end="2833:33"><expr pos:start="2833:13" pos:end="2833:32"><name pos:start="2833:13" pos:end="2833:30"><name pos:start="2833:13" pos:end="2833:22">gen_op_ins</name><index pos:start="2833:23" pos:end="2833:30">[<expr pos:start="2833:24" pos:end="2833:29"><literal type="number" pos:start="2833:24" pos:end="2833:24">3</literal> <operator pos:start="2833:26" pos:end="2833:26">+</operator> <name pos:start="2833:28" pos:end="2833:29">ot</name></expr>]</index></name><operator pos:start="2833:31" pos:end="2833:31">(</operator><operator pos:start="2833:32" pos:end="2833:32">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2835:11" pos:end="2839:9">else <block pos:start="2835:16" pos:end="2839:9">{<block_content pos:start="2837:13" pos:end="2837:29">

            <expr_stmt pos:start="2837:13" pos:end="2837:29"><expr pos:start="2837:13" pos:end="2837:28"><name pos:start="2837:13" pos:end="2837:26"><name pos:start="2837:13" pos:end="2837:22">gen_op_ins</name><index pos:start="2837:23" pos:end="2837:26">[<expr pos:start="2837:24" pos:end="2837:25"><name pos:start="2837:24" pos:end="2837:25">ot</name></expr>]</index></name><operator pos:start="2837:27" pos:end="2837:27">(</operator><operator pos:start="2837:28" pos:end="2837:28">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2841:9" pos:end="2841:14">break;</break>

    <case pos:start="2843:5" pos:end="2843:14">case <expr pos:start="2843:10" pos:end="2843:13"><literal type="number" pos:start="2843:10" pos:end="2843:13">0x6e</literal></expr>:</case> <comment type="block" pos:start="2843:16" pos:end="2843:26">/* outsS */</comment>

    <case pos:start="2845:5" pos:end="2845:14">case <expr pos:start="2845:10" pos:end="2845:13"><literal type="number" pos:start="2845:10" pos:end="2845:13">0x6f</literal></expr>:</case>

        <if_stmt pos:start="2847:9" pos:end="2853:43"><if pos:start="2847:9" pos:end="2849:25">if <condition pos:start="2847:12" pos:end="2847:25">(<expr pos:start="2847:13" pos:end="2847:24"><operator pos:start="2847:13" pos:end="2847:13">(</operator><name pos:start="2847:14" pos:end="2847:14">b</name> <operator pos:start="2847:16" pos:end="2847:16">&amp;</operator> <literal type="number" pos:start="2847:18" pos:end="2847:18">1</literal><operator pos:start="2847:19" pos:end="2847:19">)</operator> <operator pos:start="2847:21" pos:end="2847:22">==</operator> <literal type="number" pos:start="2847:24" pos:end="2847:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2849:13" pos:end="2849:25"><block_content pos:start="2849:13" pos:end="2849:25">

            <expr_stmt pos:start="2849:13" pos:end="2849:25"><expr pos:start="2849:13" pos:end="2849:24"><name pos:start="2849:13" pos:end="2849:14">ot</name> <operator pos:start="2849:16" pos:end="2849:16">=</operator> <name pos:start="2849:18" pos:end="2849:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2851:9" pos:end="2853:43">else<block type="pseudo" pos:start="2853:13" pos:end="2853:43"><block_content pos:start="2853:13" pos:end="2853:43">

            <expr_stmt pos:start="2853:13" pos:end="2853:43"><expr pos:start="2853:13" pos:end="2853:42"><name pos:start="2853:13" pos:end="2853:14">ot</name> <operator pos:start="2853:16" pos:end="2853:16">=</operator> <ternary pos:start="2853:18" pos:end="2853:42"><condition pos:start="2853:18" pos:end="2853:24"><expr pos:start="2853:18" pos:end="2853:22"><name pos:start="2853:18" pos:end="2853:22">dflag</name></expr> ?</condition><then pos:start="2853:26" pos:end="2853:32"> <expr pos:start="2853:26" pos:end="2853:32"><name pos:start="2853:26" pos:end="2853:32">OT_LONG</name></expr> </then><else pos:start="2853:34" pos:end="2853:42">: <expr pos:start="2853:36" pos:end="2853:42"><name pos:start="2853:36" pos:end="2853:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2855:9" pos:end="2863:9"><if pos:start="2855:9" pos:end="2859:9">if <condition pos:start="2855:12" pos:end="2855:35">(<expr pos:start="2855:13" pos:end="2855:34"><name pos:start="2855:13" pos:end="2855:20">prefixes</name> <operator pos:start="2855:22" pos:end="2855:22">&amp;</operator> <name pos:start="2855:24" pos:end="2855:34">PREFIX_REPZ</name></expr>)</condition> <block pos:start="2855:37" pos:end="2859:9">{<block_content pos:start="2857:13" pos:end="2857:34">

            <expr_stmt pos:start="2857:13" pos:end="2857:34"><expr pos:start="2857:13" pos:end="2857:33"><name pos:start="2857:13" pos:end="2857:31"><name pos:start="2857:13" pos:end="2857:23">gen_op_outs</name><index pos:start="2857:24" pos:end="2857:31">[<expr pos:start="2857:25" pos:end="2857:30"><literal type="number" pos:start="2857:25" pos:end="2857:25">3</literal> <operator pos:start="2857:27" pos:end="2857:27">+</operator> <name pos:start="2857:29" pos:end="2857:30">ot</name></expr>]</index></name><operator pos:start="2857:32" pos:end="2857:32">(</operator><operator pos:start="2857:33" pos:end="2857:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="2859:11" pos:end="2863:9">else <block pos:start="2859:16" pos:end="2863:9">{<block_content pos:start="2861:13" pos:end="2861:30">

            <expr_stmt pos:start="2861:13" pos:end="2861:30"><expr pos:start="2861:13" pos:end="2861:29"><name pos:start="2861:13" pos:end="2861:27"><name pos:start="2861:13" pos:end="2861:23">gen_op_outs</name><index pos:start="2861:24" pos:end="2861:27">[<expr pos:start="2861:25" pos:end="2861:26"><name pos:start="2861:25" pos:end="2861:26">ot</name></expr>]</index></name><operator pos:start="2861:28" pos:end="2861:28">(</operator><operator pos:start="2861:29" pos:end="2861:29">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="2865:9" pos:end="2865:14">break;</break>

    <case pos:start="2867:5" pos:end="2867:14">case <expr pos:start="2867:10" pos:end="2867:13"><literal type="number" pos:start="2867:10" pos:end="2867:13">0xe4</literal></expr>:</case>

    <case pos:start="2869:5" pos:end="2869:14">case <expr pos:start="2869:10" pos:end="2869:13"><literal type="number" pos:start="2869:10" pos:end="2869:13">0xe5</literal></expr>:</case>

        <if_stmt pos:start="2871:9" pos:end="2877:43"><if pos:start="2871:9" pos:end="2873:25">if <condition pos:start="2871:12" pos:end="2871:25">(<expr pos:start="2871:13" pos:end="2871:24"><operator pos:start="2871:13" pos:end="2871:13">(</operator><name pos:start="2871:14" pos:end="2871:14">b</name> <operator pos:start="2871:16" pos:end="2871:16">&amp;</operator> <literal type="number" pos:start="2871:18" pos:end="2871:18">1</literal><operator pos:start="2871:19" pos:end="2871:19">)</operator> <operator pos:start="2871:21" pos:end="2871:22">==</operator> <literal type="number" pos:start="2871:24" pos:end="2871:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2873:13" pos:end="2873:25"><block_content pos:start="2873:13" pos:end="2873:25">

            <expr_stmt pos:start="2873:13" pos:end="2873:25"><expr pos:start="2873:13" pos:end="2873:24"><name pos:start="2873:13" pos:end="2873:14">ot</name> <operator pos:start="2873:16" pos:end="2873:16">=</operator> <name pos:start="2873:18" pos:end="2873:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2875:9" pos:end="2877:43">else<block type="pseudo" pos:start="2877:13" pos:end="2877:43"><block_content pos:start="2877:13" pos:end="2877:43">

            <expr_stmt pos:start="2877:13" pos:end="2877:43"><expr pos:start="2877:13" pos:end="2877:42"><name pos:start="2877:13" pos:end="2877:14">ot</name> <operator pos:start="2877:16" pos:end="2877:16">=</operator> <ternary pos:start="2877:18" pos:end="2877:42"><condition pos:start="2877:18" pos:end="2877:24"><expr pos:start="2877:18" pos:end="2877:22"><name pos:start="2877:18" pos:end="2877:22">dflag</name></expr> ?</condition><then pos:start="2877:26" pos:end="2877:32"> <expr pos:start="2877:26" pos:end="2877:32"><name pos:start="2877:26" pos:end="2877:32">OT_LONG</name></expr> </then><else pos:start="2877:34" pos:end="2877:42">: <expr pos:start="2877:36" pos:end="2877:42"><name pos:start="2877:36" pos:end="2877:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2879:9" pos:end="2879:28"><expr pos:start="2879:9" pos:end="2879:27"><name pos:start="2879:9" pos:end="2879:11">val</name> <operator pos:start="2879:13" pos:end="2879:13">=</operator> <call pos:start="2879:15" pos:end="2879:27"><name pos:start="2879:15" pos:end="2879:18">ldub</name><argument_list pos:start="2879:19" pos:end="2879:27">(<argument pos:start="2879:20" pos:end="2879:26"><expr pos:start="2879:20" pos:end="2879:26"><name pos:start="2879:20" pos:end="2879:24"><name pos:start="2879:20" pos:end="2879:20">s</name><operator pos:start="2879:21" pos:end="2879:22">-&gt;</operator><name pos:start="2879:23" pos:end="2879:24">pc</name></name><operator pos:start="2879:25" pos:end="2879:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2881:9" pos:end="2881:31"><expr pos:start="2881:9" pos:end="2881:30"><call pos:start="2881:9" pos:end="2881:30"><name pos:start="2881:9" pos:end="2881:25">gen_op_movl_T0_im</name><argument_list pos:start="2881:26" pos:end="2881:30">(<argument pos:start="2881:27" pos:end="2881:29"><expr pos:start="2881:27" pos:end="2881:29"><name pos:start="2881:27" pos:end="2881:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2883:9" pos:end="2883:24"><expr pos:start="2883:9" pos:end="2883:23"><name pos:start="2883:9" pos:end="2883:21"><name pos:start="2883:9" pos:end="2883:17">gen_op_in</name><index pos:start="2883:18" pos:end="2883:21">[<expr pos:start="2883:19" pos:end="2883:20"><name pos:start="2883:19" pos:end="2883:20">ot</name></expr>]</index></name><operator pos:start="2883:22" pos:end="2883:22">(</operator><operator pos:start="2883:23" pos:end="2883:23">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="2885:9" pos:end="2885:39"><expr pos:start="2885:9" pos:end="2885:38"><name pos:start="2885:9" pos:end="2885:36"><name pos:start="2885:9" pos:end="2885:25">gen_op_mov_reg_T1</name><index pos:start="2885:26" pos:end="2885:29">[<expr pos:start="2885:27" pos:end="2885:28"><name pos:start="2885:27" pos:end="2885:28">ot</name></expr>]</index><index pos:start="2885:30" pos:end="2885:36">[<expr pos:start="2885:31" pos:end="2885:35"><name pos:start="2885:31" pos:end="2885:35">R_EAX</name></expr>]</index></name><operator pos:start="2885:37" pos:end="2885:37">(</operator><operator pos:start="2885:38" pos:end="2885:38">)</operator></expr>;</expr_stmt>

        <break pos:start="2887:9" pos:end="2887:14">break;</break>

    <case pos:start="2889:5" pos:end="2889:14">case <expr pos:start="2889:10" pos:end="2889:13"><literal type="number" pos:start="2889:10" pos:end="2889:13">0xe6</literal></expr>:</case>

    <case pos:start="2891:5" pos:end="2891:14">case <expr pos:start="2891:10" pos:end="2891:13"><literal type="number" pos:start="2891:10" pos:end="2891:13">0xe7</literal></expr>:</case>

        <if_stmt pos:start="2893:9" pos:end="2899:43"><if pos:start="2893:9" pos:end="2895:25">if <condition pos:start="2893:12" pos:end="2893:25">(<expr pos:start="2893:13" pos:end="2893:24"><operator pos:start="2893:13" pos:end="2893:13">(</operator><name pos:start="2893:14" pos:end="2893:14">b</name> <operator pos:start="2893:16" pos:end="2893:16">&amp;</operator> <literal type="number" pos:start="2893:18" pos:end="2893:18">1</literal><operator pos:start="2893:19" pos:end="2893:19">)</operator> <operator pos:start="2893:21" pos:end="2893:22">==</operator> <literal type="number" pos:start="2893:24" pos:end="2893:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2895:13" pos:end="2895:25"><block_content pos:start="2895:13" pos:end="2895:25">

            <expr_stmt pos:start="2895:13" pos:end="2895:25"><expr pos:start="2895:13" pos:end="2895:24"><name pos:start="2895:13" pos:end="2895:14">ot</name> <operator pos:start="2895:16" pos:end="2895:16">=</operator> <name pos:start="2895:18" pos:end="2895:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2897:9" pos:end="2899:43">else<block type="pseudo" pos:start="2899:13" pos:end="2899:43"><block_content pos:start="2899:13" pos:end="2899:43">

            <expr_stmt pos:start="2899:13" pos:end="2899:43"><expr pos:start="2899:13" pos:end="2899:42"><name pos:start="2899:13" pos:end="2899:14">ot</name> <operator pos:start="2899:16" pos:end="2899:16">=</operator> <ternary pos:start="2899:18" pos:end="2899:42"><condition pos:start="2899:18" pos:end="2899:24"><expr pos:start="2899:18" pos:end="2899:22"><name pos:start="2899:18" pos:end="2899:22">dflag</name></expr> ?</condition><then pos:start="2899:26" pos:end="2899:32"> <expr pos:start="2899:26" pos:end="2899:32"><name pos:start="2899:26" pos:end="2899:32">OT_LONG</name></expr> </then><else pos:start="2899:34" pos:end="2899:42">: <expr pos:start="2899:36" pos:end="2899:42"><name pos:start="2899:36" pos:end="2899:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2901:9" pos:end="2901:28"><expr pos:start="2901:9" pos:end="2901:27"><name pos:start="2901:9" pos:end="2901:11">val</name> <operator pos:start="2901:13" pos:end="2901:13">=</operator> <call pos:start="2901:15" pos:end="2901:27"><name pos:start="2901:15" pos:end="2901:18">ldub</name><argument_list pos:start="2901:19" pos:end="2901:27">(<argument pos:start="2901:20" pos:end="2901:26"><expr pos:start="2901:20" pos:end="2901:26"><name pos:start="2901:20" pos:end="2901:24"><name pos:start="2901:20" pos:end="2901:20">s</name><operator pos:start="2901:21" pos:end="2901:22">-&gt;</operator><name pos:start="2901:23" pos:end="2901:24">pc</name></name><operator pos:start="2901:25" pos:end="2901:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2903:9" pos:end="2903:31"><expr pos:start="2903:9" pos:end="2903:30"><call pos:start="2903:9" pos:end="2903:30"><name pos:start="2903:9" pos:end="2903:25">gen_op_movl_T0_im</name><argument_list pos:start="2903:26" pos:end="2903:30">(<argument pos:start="2903:27" pos:end="2903:29"><expr pos:start="2903:27" pos:end="2903:29"><name pos:start="2903:27" pos:end="2903:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2905:9" pos:end="2905:42"><expr pos:start="2905:9" pos:end="2905:41"><name pos:start="2905:9" pos:end="2905:39"><name pos:start="2905:9" pos:end="2905:25">gen_op_mov_TN_reg</name><index pos:start="2905:26" pos:end="2905:29">[<expr pos:start="2905:27" pos:end="2905:28"><name pos:start="2905:27" pos:end="2905:28">ot</name></expr>]</index><index pos:start="2905:30" pos:end="2905:32">[<expr pos:start="2905:31" pos:end="2905:31"><literal type="number" pos:start="2905:31" pos:end="2905:31">1</literal></expr>]</index><index pos:start="2905:33" pos:end="2905:39">[<expr pos:start="2905:34" pos:end="2905:38"><name pos:start="2905:34" pos:end="2905:38">R_EAX</name></expr>]</index></name><operator pos:start="2905:40" pos:end="2905:40">(</operator><operator pos:start="2905:41" pos:end="2905:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="2907:9" pos:end="2907:25"><expr pos:start="2907:9" pos:end="2907:24"><name pos:start="2907:9" pos:end="2907:22"><name pos:start="2907:9" pos:end="2907:18">gen_op_out</name><index pos:start="2907:19" pos:end="2907:22">[<expr pos:start="2907:20" pos:end="2907:21"><name pos:start="2907:20" pos:end="2907:21">ot</name></expr>]</index></name><operator pos:start="2907:23" pos:end="2907:23">(</operator><operator pos:start="2907:24" pos:end="2907:24">)</operator></expr>;</expr_stmt>

        <break pos:start="2909:9" pos:end="2909:14">break;</break>

    <case pos:start="2911:5" pos:end="2911:14">case <expr pos:start="2911:10" pos:end="2911:13"><literal type="number" pos:start="2911:10" pos:end="2911:13">0xec</literal></expr>:</case>

    <case pos:start="2913:5" pos:end="2913:14">case <expr pos:start="2913:10" pos:end="2913:13"><literal type="number" pos:start="2913:10" pos:end="2913:13">0xed</literal></expr>:</case>

        <if_stmt pos:start="2915:9" pos:end="2921:43"><if pos:start="2915:9" pos:end="2917:25">if <condition pos:start="2915:12" pos:end="2915:25">(<expr pos:start="2915:13" pos:end="2915:24"><operator pos:start="2915:13" pos:end="2915:13">(</operator><name pos:start="2915:14" pos:end="2915:14">b</name> <operator pos:start="2915:16" pos:end="2915:16">&amp;</operator> <literal type="number" pos:start="2915:18" pos:end="2915:18">1</literal><operator pos:start="2915:19" pos:end="2915:19">)</operator> <operator pos:start="2915:21" pos:end="2915:22">==</operator> <literal type="number" pos:start="2915:24" pos:end="2915:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2917:13" pos:end="2917:25"><block_content pos:start="2917:13" pos:end="2917:25">

            <expr_stmt pos:start="2917:13" pos:end="2917:25"><expr pos:start="2917:13" pos:end="2917:24"><name pos:start="2917:13" pos:end="2917:14">ot</name> <operator pos:start="2917:16" pos:end="2917:16">=</operator> <name pos:start="2917:18" pos:end="2917:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2919:9" pos:end="2921:43">else<block type="pseudo" pos:start="2921:13" pos:end="2921:43"><block_content pos:start="2921:13" pos:end="2921:43">

            <expr_stmt pos:start="2921:13" pos:end="2921:43"><expr pos:start="2921:13" pos:end="2921:42"><name pos:start="2921:13" pos:end="2921:14">ot</name> <operator pos:start="2921:16" pos:end="2921:16">=</operator> <ternary pos:start="2921:18" pos:end="2921:42"><condition pos:start="2921:18" pos:end="2921:24"><expr pos:start="2921:18" pos:end="2921:22"><name pos:start="2921:18" pos:end="2921:22">dflag</name></expr> ?</condition><then pos:start="2921:26" pos:end="2921:32"> <expr pos:start="2921:26" pos:end="2921:32"><name pos:start="2921:26" pos:end="2921:32">OT_LONG</name></expr> </then><else pos:start="2921:34" pos:end="2921:42">: <expr pos:start="2921:36" pos:end="2921:42"><name pos:start="2921:36" pos:end="2921:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2923:9" pos:end="2923:47"><expr pos:start="2923:9" pos:end="2923:46"><name pos:start="2923:9" pos:end="2923:44"><name pos:start="2923:9" pos:end="2923:25">gen_op_mov_TN_reg</name><index pos:start="2923:26" pos:end="2923:34">[<expr pos:start="2923:27" pos:end="2923:33"><name pos:start="2923:27" pos:end="2923:33">OT_WORD</name></expr>]</index><index pos:start="2923:35" pos:end="2923:37">[<expr pos:start="2923:36" pos:end="2923:36"><literal type="number" pos:start="2923:36" pos:end="2923:36">0</literal></expr>]</index><index pos:start="2923:38" pos:end="2923:44">[<expr pos:start="2923:39" pos:end="2923:43"><name pos:start="2923:39" pos:end="2923:43">R_EDX</name></expr>]</index></name><operator pos:start="2923:45" pos:end="2923:45">(</operator><operator pos:start="2923:46" pos:end="2923:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="2925:9" pos:end="2925:24"><expr pos:start="2925:9" pos:end="2925:23"><name pos:start="2925:9" pos:end="2925:21"><name pos:start="2925:9" pos:end="2925:17">gen_op_in</name><index pos:start="2925:18" pos:end="2925:21">[<expr pos:start="2925:19" pos:end="2925:20"><name pos:start="2925:19" pos:end="2925:20">ot</name></expr>]</index></name><operator pos:start="2925:22" pos:end="2925:22">(</operator><operator pos:start="2925:23" pos:end="2925:23">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="2927:9" pos:end="2927:39"><expr pos:start="2927:9" pos:end="2927:38"><name pos:start="2927:9" pos:end="2927:36"><name pos:start="2927:9" pos:end="2927:25">gen_op_mov_reg_T1</name><index pos:start="2927:26" pos:end="2927:29">[<expr pos:start="2927:27" pos:end="2927:28"><name pos:start="2927:27" pos:end="2927:28">ot</name></expr>]</index><index pos:start="2927:30" pos:end="2927:36">[<expr pos:start="2927:31" pos:end="2927:35"><name pos:start="2927:31" pos:end="2927:35">R_EAX</name></expr>]</index></name><operator pos:start="2927:37" pos:end="2927:37">(</operator><operator pos:start="2927:38" pos:end="2927:38">)</operator></expr>;</expr_stmt>

        <break pos:start="2929:9" pos:end="2929:14">break;</break>

    <case pos:start="2931:5" pos:end="2931:14">case <expr pos:start="2931:10" pos:end="2931:13"><literal type="number" pos:start="2931:10" pos:end="2931:13">0xee</literal></expr>:</case>

    <case pos:start="2933:5" pos:end="2933:14">case <expr pos:start="2933:10" pos:end="2933:13"><literal type="number" pos:start="2933:10" pos:end="2933:13">0xef</literal></expr>:</case>

        <if_stmt pos:start="2935:9" pos:end="2941:43"><if pos:start="2935:9" pos:end="2937:25">if <condition pos:start="2935:12" pos:end="2935:25">(<expr pos:start="2935:13" pos:end="2935:24"><operator pos:start="2935:13" pos:end="2935:13">(</operator><name pos:start="2935:14" pos:end="2935:14">b</name> <operator pos:start="2935:16" pos:end="2935:16">&amp;</operator> <literal type="number" pos:start="2935:18" pos:end="2935:18">1</literal><operator pos:start="2935:19" pos:end="2935:19">)</operator> <operator pos:start="2935:21" pos:end="2935:22">==</operator> <literal type="number" pos:start="2935:24" pos:end="2935:24">0</literal></expr>)</condition><block type="pseudo" pos:start="2937:13" pos:end="2937:25"><block_content pos:start="2937:13" pos:end="2937:25">

            <expr_stmt pos:start="2937:13" pos:end="2937:25"><expr pos:start="2937:13" pos:end="2937:24"><name pos:start="2937:13" pos:end="2937:14">ot</name> <operator pos:start="2937:16" pos:end="2937:16">=</operator> <name pos:start="2937:18" pos:end="2937:24">OT_BYTE</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2939:9" pos:end="2941:43">else<block type="pseudo" pos:start="2941:13" pos:end="2941:43"><block_content pos:start="2941:13" pos:end="2941:43">

            <expr_stmt pos:start="2941:13" pos:end="2941:43"><expr pos:start="2941:13" pos:end="2941:42"><name pos:start="2941:13" pos:end="2941:14">ot</name> <operator pos:start="2941:16" pos:end="2941:16">=</operator> <ternary pos:start="2941:18" pos:end="2941:42"><condition pos:start="2941:18" pos:end="2941:24"><expr pos:start="2941:18" pos:end="2941:22"><name pos:start="2941:18" pos:end="2941:22">dflag</name></expr> ?</condition><then pos:start="2941:26" pos:end="2941:32"> <expr pos:start="2941:26" pos:end="2941:32"><name pos:start="2941:26" pos:end="2941:32">OT_LONG</name></expr> </then><else pos:start="2941:34" pos:end="2941:42">: <expr pos:start="2941:36" pos:end="2941:42"><name pos:start="2941:36" pos:end="2941:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="2943:9" pos:end="2943:47"><expr pos:start="2943:9" pos:end="2943:46"><name pos:start="2943:9" pos:end="2943:44"><name pos:start="2943:9" pos:end="2943:25">gen_op_mov_TN_reg</name><index pos:start="2943:26" pos:end="2943:34">[<expr pos:start="2943:27" pos:end="2943:33"><name pos:start="2943:27" pos:end="2943:33">OT_WORD</name></expr>]</index><index pos:start="2943:35" pos:end="2943:37">[<expr pos:start="2943:36" pos:end="2943:36"><literal type="number" pos:start="2943:36" pos:end="2943:36">0</literal></expr>]</index><index pos:start="2943:38" pos:end="2943:44">[<expr pos:start="2943:39" pos:end="2943:43"><name pos:start="2943:39" pos:end="2943:43">R_EDX</name></expr>]</index></name><operator pos:start="2943:45" pos:end="2943:45">(</operator><operator pos:start="2943:46" pos:end="2943:46">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="2945:9" pos:end="2945:42"><expr pos:start="2945:9" pos:end="2945:41"><name pos:start="2945:9" pos:end="2945:39"><name pos:start="2945:9" pos:end="2945:25">gen_op_mov_TN_reg</name><index pos:start="2945:26" pos:end="2945:29">[<expr pos:start="2945:27" pos:end="2945:28"><name pos:start="2945:27" pos:end="2945:28">ot</name></expr>]</index><index pos:start="2945:30" pos:end="2945:32">[<expr pos:start="2945:31" pos:end="2945:31"><literal type="number" pos:start="2945:31" pos:end="2945:31">1</literal></expr>]</index><index pos:start="2945:33" pos:end="2945:39">[<expr pos:start="2945:34" pos:end="2945:38"><name pos:start="2945:34" pos:end="2945:38">R_EAX</name></expr>]</index></name><operator pos:start="2945:40" pos:end="2945:40">(</operator><operator pos:start="2945:41" pos:end="2945:41">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="2947:9" pos:end="2947:25"><expr pos:start="2947:9" pos:end="2947:24"><name pos:start="2947:9" pos:end="2947:22"><name pos:start="2947:9" pos:end="2947:18">gen_op_out</name><index pos:start="2947:19" pos:end="2947:22">[<expr pos:start="2947:20" pos:end="2947:21"><name pos:start="2947:20" pos:end="2947:21">ot</name></expr>]</index></name><operator pos:start="2947:23" pos:end="2947:23">(</operator><operator pos:start="2947:24" pos:end="2947:24">)</operator></expr>;</expr_stmt>

        <break pos:start="2949:9" pos:end="2949:14">break;</break>



        <comment type="block" format="doxygen" pos:start="2953:9" pos:end="2953:34">/************************/</comment>

        <comment type="block" pos:start="2955:9" pos:end="2955:21">/* control */</comment>

    <case pos:start="2957:5" pos:end="2957:14">case <expr pos:start="2957:10" pos:end="2957:13"><literal type="number" pos:start="2957:10" pos:end="2957:13">0xc2</literal></expr>:</case> <comment type="block" pos:start="2957:16" pos:end="2957:27">/* ret im */</comment>

        <expr_stmt pos:start="2959:9" pos:end="2959:26"><expr pos:start="2959:9" pos:end="2959:25"><name pos:start="2959:9" pos:end="2959:11">val</name> <operator pos:start="2959:13" pos:end="2959:13">=</operator> <call pos:start="2959:15" pos:end="2959:25"><name pos:start="2959:15" pos:end="2959:18">ldsw</name><argument_list pos:start="2959:19" pos:end="2959:25">(<argument pos:start="2959:20" pos:end="2959:24"><expr pos:start="2959:20" pos:end="2959:24"><name pos:start="2959:20" pos:end="2959:24"><name pos:start="2959:20" pos:end="2959:20">s</name><operator pos:start="2959:21" pos:end="2959:22">-&gt;</operator><name pos:start="2959:23" pos:end="2959:24">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2961:9" pos:end="2961:19"><expr pos:start="2961:9" pos:end="2961:18"><name pos:start="2961:9" pos:end="2961:13"><name pos:start="2961:9" pos:end="2961:9">s</name><operator pos:start="2961:10" pos:end="2961:11">-&gt;</operator><name pos:start="2961:12" pos:end="2961:13">pc</name></name> <operator pos:start="2961:15" pos:end="2961:16">+=</operator> <literal type="number" pos:start="2961:18" pos:end="2961:18">2</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="2963:9" pos:end="2963:22"><expr pos:start="2963:9" pos:end="2963:21"><call pos:start="2963:9" pos:end="2963:21"><name pos:start="2963:9" pos:end="2963:18">gen_pop_T0</name><argument_list pos:start="2963:19" pos:end="2963:21">(<argument pos:start="2963:20" pos:end="2963:20"><expr pos:start="2963:20" pos:end="2963:20"><name pos:start="2963:20" pos:end="2963:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2965:9" pos:end="2971:54"><if pos:start="2965:9" pos:end="2967:54">if <condition pos:start="2965:12" pos:end="2965:20">(<expr pos:start="2965:13" pos:end="2965:19"><name pos:start="2965:13" pos:end="2965:19"><name pos:start="2965:13" pos:end="2965:13">s</name><operator pos:start="2965:14" pos:end="2965:15">-&gt;</operator><name pos:start="2965:16" pos:end="2965:19">ss32</name></name></expr>)</condition><block type="pseudo" pos:start="2967:13" pos:end="2967:54"><block_content pos:start="2967:13" pos:end="2967:54">

            <expr_stmt pos:start="2967:13" pos:end="2967:54"><expr pos:start="2967:13" pos:end="2967:53"><call pos:start="2967:13" pos:end="2967:53"><name pos:start="2967:13" pos:end="2967:30">gen_op_addl_ESP_im</name><argument_list pos:start="2967:31" pos:end="2967:53">(<argument pos:start="2967:32" pos:end="2967:52"><expr pos:start="2967:32" pos:end="2967:52"><name pos:start="2967:32" pos:end="2967:34">val</name> <operator pos:start="2967:36" pos:end="2967:36">+</operator> <operator pos:start="2967:38" pos:end="2967:38">(</operator><literal type="number" pos:start="2967:39" pos:end="2967:39">2</literal> <operator pos:start="2967:41" pos:end="2967:42">&lt;&lt;</operator> <name pos:start="2967:44" pos:end="2967:51"><name pos:start="2967:44" pos:end="2967:44">s</name><operator pos:start="2967:45" pos:end="2967:46">-&gt;</operator><name pos:start="2967:47" pos:end="2967:51">dflag</name></name><operator pos:start="2967:52" pos:end="2967:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="2969:9" pos:end="2971:54">else<block type="pseudo" pos:start="2971:13" pos:end="2971:54"><block_content pos:start="2971:13" pos:end="2971:54">

            <expr_stmt pos:start="2971:13" pos:end="2971:54"><expr pos:start="2971:13" pos:end="2971:53"><call pos:start="2971:13" pos:end="2971:53"><name pos:start="2971:13" pos:end="2971:30">gen_op_addw_ESP_im</name><argument_list pos:start="2971:31" pos:end="2971:53">(<argument pos:start="2971:32" pos:end="2971:52"><expr pos:start="2971:32" pos:end="2971:52"><name pos:start="2971:32" pos:end="2971:34">val</name> <operator pos:start="2971:36" pos:end="2971:36">+</operator> <operator pos:start="2971:38" pos:end="2971:38">(</operator><literal type="number" pos:start="2971:39" pos:end="2971:39">2</literal> <operator pos:start="2971:41" pos:end="2971:42">&lt;&lt;</operator> <name pos:start="2971:44" pos:end="2971:51"><name pos:start="2971:44" pos:end="2971:44">s</name><operator pos:start="2971:45" pos:end="2971:46">-&gt;</operator><name pos:start="2971:47" pos:end="2971:51">dflag</name></name><operator pos:start="2971:52" pos:end="2971:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <if_stmt pos:start="2973:9" pos:end="2975:34"><if pos:start="2973:9" pos:end="2975:34">if <condition pos:start="2973:12" pos:end="2973:26">(<expr pos:start="2973:13" pos:end="2973:25"><name pos:start="2973:13" pos:end="2973:20"><name pos:start="2973:13" pos:end="2973:13">s</name><operator pos:start="2973:14" pos:end="2973:15">-&gt;</operator><name pos:start="2973:16" pos:end="2973:20">dflag</name></name> <operator pos:start="2973:22" pos:end="2973:23">==</operator> <literal type="number" pos:start="2973:25" pos:end="2973:25">0</literal></expr>)</condition><block type="pseudo" pos:start="2975:13" pos:end="2975:34"><block_content pos:start="2975:13" pos:end="2975:34">

            <expr_stmt pos:start="2975:13" pos:end="2975:34"><expr pos:start="2975:13" pos:end="2975:33"><call pos:start="2975:13" pos:end="2975:33"><name pos:start="2975:13" pos:end="2975:31">gen_op_andl_T0_ffff</name><argument_list pos:start="2975:32" pos:end="2975:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2977:9" pos:end="2977:24"><expr pos:start="2977:9" pos:end="2977:23"><call pos:start="2977:9" pos:end="2977:23"><name pos:start="2977:9" pos:end="2977:21">gen_op_jmp_T0</name><argument_list pos:start="2977:22" pos:end="2977:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2979:9" pos:end="2979:22"><expr pos:start="2979:9" pos:end="2979:21"><name pos:start="2979:9" pos:end="2979:17"><name pos:start="2979:9" pos:end="2979:9">s</name><operator pos:start="2979:10" pos:end="2979:11">-&gt;</operator><name pos:start="2979:12" pos:end="2979:17">is_jmp</name></name> <operator pos:start="2979:19" pos:end="2979:19">=</operator> <literal type="number" pos:start="2979:21" pos:end="2979:21">1</literal></expr>;</expr_stmt>

        <break pos:start="2981:9" pos:end="2981:14">break;</break>

    <case pos:start="2983:5" pos:end="2983:14">case <expr pos:start="2983:10" pos:end="2983:13"><literal type="number" pos:start="2983:10" pos:end="2983:13">0xc3</literal></expr>:</case> <comment type="block" pos:start="2983:16" pos:end="2983:24">/* ret */</comment>

        <expr_stmt pos:start="2985:9" pos:end="2985:22"><expr pos:start="2985:9" pos:end="2985:21"><call pos:start="2985:9" pos:end="2985:21"><name pos:start="2985:9" pos:end="2985:18">gen_pop_T0</name><argument_list pos:start="2985:19" pos:end="2985:21">(<argument pos:start="2985:20" pos:end="2985:20"><expr pos:start="2985:20" pos:end="2985:20"><name pos:start="2985:20" pos:end="2985:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2987:9" pos:end="2987:26"><expr pos:start="2987:9" pos:end="2987:25"><call pos:start="2987:9" pos:end="2987:25"><name pos:start="2987:9" pos:end="2987:22">gen_pop_update</name><argument_list pos:start="2987:23" pos:end="2987:25">(<argument pos:start="2987:24" pos:end="2987:24"><expr pos:start="2987:24" pos:end="2987:24"><name pos:start="2987:24" pos:end="2987:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="2989:9" pos:end="2991:34"><if pos:start="2989:9" pos:end="2991:34">if <condition pos:start="2989:12" pos:end="2989:26">(<expr pos:start="2989:13" pos:end="2989:25"><name pos:start="2989:13" pos:end="2989:20"><name pos:start="2989:13" pos:end="2989:13">s</name><operator pos:start="2989:14" pos:end="2989:15">-&gt;</operator><name pos:start="2989:16" pos:end="2989:20">dflag</name></name> <operator pos:start="2989:22" pos:end="2989:23">==</operator> <literal type="number" pos:start="2989:25" pos:end="2989:25">0</literal></expr>)</condition><block type="pseudo" pos:start="2991:13" pos:end="2991:34"><block_content pos:start="2991:13" pos:end="2991:34">

            <expr_stmt pos:start="2991:13" pos:end="2991:34"><expr pos:start="2991:13" pos:end="2991:33"><call pos:start="2991:13" pos:end="2991:33"><name pos:start="2991:13" pos:end="2991:31">gen_op_andl_T0_ffff</name><argument_list pos:start="2991:32" pos:end="2991:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="2993:9" pos:end="2993:24"><expr pos:start="2993:9" pos:end="2993:23"><call pos:start="2993:9" pos:end="2993:23"><name pos:start="2993:9" pos:end="2993:21">gen_op_jmp_T0</name><argument_list pos:start="2993:22" pos:end="2993:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="2995:9" pos:end="2995:22"><expr pos:start="2995:9" pos:end="2995:21"><name pos:start="2995:9" pos:end="2995:17"><name pos:start="2995:9" pos:end="2995:9">s</name><operator pos:start="2995:10" pos:end="2995:11">-&gt;</operator><name pos:start="2995:12" pos:end="2995:17">is_jmp</name></name> <operator pos:start="2995:19" pos:end="2995:19">=</operator> <literal type="number" pos:start="2995:21" pos:end="2995:21">1</literal></expr>;</expr_stmt>

        <break pos:start="2997:9" pos:end="2997:14">break;</break>

    <case pos:start="2999:5" pos:end="2999:14">case <expr pos:start="2999:10" pos:end="2999:13"><literal type="number" pos:start="2999:10" pos:end="2999:13">0xca</literal></expr>:</case> <comment type="block" pos:start="2999:16" pos:end="2999:28">/* lret im */</comment>

        <expr_stmt pos:start="3001:9" pos:end="3001:26"><expr pos:start="3001:9" pos:end="3001:25"><name pos:start="3001:9" pos:end="3001:11">val</name> <operator pos:start="3001:13" pos:end="3001:13">=</operator> <call pos:start="3001:15" pos:end="3001:25"><name pos:start="3001:15" pos:end="3001:18">ldsw</name><argument_list pos:start="3001:19" pos:end="3001:25">(<argument pos:start="3001:20" pos:end="3001:24"><expr pos:start="3001:20" pos:end="3001:24"><name pos:start="3001:20" pos:end="3001:24"><name pos:start="3001:20" pos:end="3001:20">s</name><operator pos:start="3001:21" pos:end="3001:22">-&gt;</operator><name pos:start="3001:23" pos:end="3001:24">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3003:9" pos:end="3003:19"><expr pos:start="3003:9" pos:end="3003:18"><name pos:start="3003:9" pos:end="3003:13"><name pos:start="3003:9" pos:end="3003:9">s</name><operator pos:start="3003:10" pos:end="3003:11">-&gt;</operator><name pos:start="3003:12" pos:end="3003:13">pc</name></name> <operator pos:start="3003:15" pos:end="3003:16">+=</operator> <literal type="number" pos:start="3003:18" pos:end="3003:18">2</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="3005:9" pos:end="3005:24">/* pop offset */</comment>

        <expr_stmt pos:start="3007:9" pos:end="3007:22"><expr pos:start="3007:9" pos:end="3007:21"><call pos:start="3007:9" pos:end="3007:21"><name pos:start="3007:9" pos:end="3007:18">gen_pop_T0</name><argument_list pos:start="3007:19" pos:end="3007:21">(<argument pos:start="3007:20" pos:end="3007:20"><expr pos:start="3007:20" pos:end="3007:20"><name pos:start="3007:20" pos:end="3007:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3009:9" pos:end="3011:34"><if pos:start="3009:9" pos:end="3011:34">if <condition pos:start="3009:12" pos:end="3009:26">(<expr pos:start="3009:13" pos:end="3009:25"><name pos:start="3009:13" pos:end="3009:20"><name pos:start="3009:13" pos:end="3009:13">s</name><operator pos:start="3009:14" pos:end="3009:15">-&gt;</operator><name pos:start="3009:16" pos:end="3009:20">dflag</name></name> <operator pos:start="3009:22" pos:end="3009:23">==</operator> <literal type="number" pos:start="3009:25" pos:end="3009:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3011:13" pos:end="3011:34"><block_content pos:start="3011:13" pos:end="3011:34">

            <expr_stmt pos:start="3011:13" pos:end="3011:34"><expr pos:start="3011:13" pos:end="3011:33"><call pos:start="3011:13" pos:end="3011:33"><name pos:start="3011:13" pos:end="3011:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3011:32" pos:end="3011:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3013:9" pos:end="3013:24"><expr pos:start="3013:9" pos:end="3013:23"><call pos:start="3013:9" pos:end="3013:23"><name pos:start="3013:9" pos:end="3013:21">gen_op_jmp_T0</name><argument_list pos:start="3013:22" pos:end="3013:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3015:9" pos:end="3015:26"><expr pos:start="3015:9" pos:end="3015:25"><call pos:start="3015:9" pos:end="3015:25"><name pos:start="3015:9" pos:end="3015:22">gen_pop_update</name><argument_list pos:start="3015:23" pos:end="3015:25">(<argument pos:start="3015:24" pos:end="3015:24"><expr pos:start="3015:24" pos:end="3015:24"><name pos:start="3015:24" pos:end="3015:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3017:9" pos:end="3017:26">/* pop selector */</comment>

        <expr_stmt pos:start="3019:9" pos:end="3019:22"><expr pos:start="3019:9" pos:end="3019:21"><call pos:start="3019:9" pos:end="3019:21"><name pos:start="3019:9" pos:end="3019:18">gen_pop_T0</name><argument_list pos:start="3019:19" pos:end="3019:21">(<argument pos:start="3019:20" pos:end="3019:20"><expr pos:start="3019:20" pos:end="3019:20"><name pos:start="3019:20" pos:end="3019:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3021:9" pos:end="3021:33"><expr pos:start="3021:9" pos:end="3021:32"><call pos:start="3021:9" pos:end="3021:32"><name pos:start="3021:9" pos:end="3021:23">gen_movl_seg_T0</name><argument_list pos:start="3021:24" pos:end="3021:32">(<argument pos:start="3021:25" pos:end="3021:25"><expr pos:start="3021:25" pos:end="3021:25"><name pos:start="3021:25" pos:end="3021:25">s</name></expr></argument>, <argument pos:start="3021:28" pos:end="3021:31"><expr pos:start="3021:28" pos:end="3021:31"><name pos:start="3021:28" pos:end="3021:31">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3023:9" pos:end="3023:26"><expr pos:start="3023:9" pos:end="3023:25"><call pos:start="3023:9" pos:end="3023:25"><name pos:start="3023:9" pos:end="3023:22">gen_pop_update</name><argument_list pos:start="3023:23" pos:end="3023:25">(<argument pos:start="3023:24" pos:end="3023:24"><expr pos:start="3023:24" pos:end="3023:24"><name pos:start="3023:24" pos:end="3023:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3025:9" pos:end="3025:30">/* add stack offset */</comment>

        <if_stmt pos:start="3027:9" pos:end="3033:54"><if pos:start="3027:9" pos:end="3029:54">if <condition pos:start="3027:12" pos:end="3027:20">(<expr pos:start="3027:13" pos:end="3027:19"><name pos:start="3027:13" pos:end="3027:19"><name pos:start="3027:13" pos:end="3027:13">s</name><operator pos:start="3027:14" pos:end="3027:15">-&gt;</operator><name pos:start="3027:16" pos:end="3027:19">ss32</name></name></expr>)</condition><block type="pseudo" pos:start="3029:13" pos:end="3029:54"><block_content pos:start="3029:13" pos:end="3029:54">

            <expr_stmt pos:start="3029:13" pos:end="3029:54"><expr pos:start="3029:13" pos:end="3029:53"><call pos:start="3029:13" pos:end="3029:53"><name pos:start="3029:13" pos:end="3029:30">gen_op_addl_ESP_im</name><argument_list pos:start="3029:31" pos:end="3029:53">(<argument pos:start="3029:32" pos:end="3029:52"><expr pos:start="3029:32" pos:end="3029:52"><name pos:start="3029:32" pos:end="3029:34">val</name> <operator pos:start="3029:36" pos:end="3029:36">+</operator> <operator pos:start="3029:38" pos:end="3029:38">(</operator><literal type="number" pos:start="3029:39" pos:end="3029:39">2</literal> <operator pos:start="3029:41" pos:end="3029:42">&lt;&lt;</operator> <name pos:start="3029:44" pos:end="3029:51"><name pos:start="3029:44" pos:end="3029:44">s</name><operator pos:start="3029:45" pos:end="3029:46">-&gt;</operator><name pos:start="3029:47" pos:end="3029:51">dflag</name></name><operator pos:start="3029:52" pos:end="3029:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="3031:9" pos:end="3033:54">else<block type="pseudo" pos:start="3033:13" pos:end="3033:54"><block_content pos:start="3033:13" pos:end="3033:54">

            <expr_stmt pos:start="3033:13" pos:end="3033:54"><expr pos:start="3033:13" pos:end="3033:53"><call pos:start="3033:13" pos:end="3033:53"><name pos:start="3033:13" pos:end="3033:30">gen_op_addw_ESP_im</name><argument_list pos:start="3033:31" pos:end="3033:53">(<argument pos:start="3033:32" pos:end="3033:52"><expr pos:start="3033:32" pos:end="3033:52"><name pos:start="3033:32" pos:end="3033:34">val</name> <operator pos:start="3033:36" pos:end="3033:36">+</operator> <operator pos:start="3033:38" pos:end="3033:38">(</operator><literal type="number" pos:start="3033:39" pos:end="3033:39">2</literal> <operator pos:start="3033:41" pos:end="3033:42">&lt;&lt;</operator> <name pos:start="3033:44" pos:end="3033:51"><name pos:start="3033:44" pos:end="3033:44">s</name><operator pos:start="3033:45" pos:end="3033:46">-&gt;</operator><name pos:start="3033:47" pos:end="3033:51">dflag</name></name><operator pos:start="3033:52" pos:end="3033:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt pos:start="3035:9" pos:end="3035:22"><expr pos:start="3035:9" pos:end="3035:21"><name pos:start="3035:9" pos:end="3035:17"><name pos:start="3035:9" pos:end="3035:9">s</name><operator pos:start="3035:10" pos:end="3035:11">-&gt;</operator><name pos:start="3035:12" pos:end="3035:17">is_jmp</name></name> <operator pos:start="3035:19" pos:end="3035:19">=</operator> <literal type="number" pos:start="3035:21" pos:end="3035:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3037:9" pos:end="3037:14">break;</break>

    <case pos:start="3039:5" pos:end="3039:14">case <expr pos:start="3039:10" pos:end="3039:13"><literal type="number" pos:start="3039:10" pos:end="3039:13">0xcb</literal></expr>:</case> <comment type="block" pos:start="3039:16" pos:end="3039:25">/* lret */</comment>

        <comment type="block" pos:start="3041:9" pos:end="3041:24">/* pop offset */</comment>

        <expr_stmt pos:start="3043:9" pos:end="3043:22"><expr pos:start="3043:9" pos:end="3043:21"><call pos:start="3043:9" pos:end="3043:21"><name pos:start="3043:9" pos:end="3043:18">gen_pop_T0</name><argument_list pos:start="3043:19" pos:end="3043:21">(<argument pos:start="3043:20" pos:end="3043:20"><expr pos:start="3043:20" pos:end="3043:20"><name pos:start="3043:20" pos:end="3043:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3045:9" pos:end="3047:34"><if pos:start="3045:9" pos:end="3047:34">if <condition pos:start="3045:12" pos:end="3045:26">(<expr pos:start="3045:13" pos:end="3045:25"><name pos:start="3045:13" pos:end="3045:20"><name pos:start="3045:13" pos:end="3045:13">s</name><operator pos:start="3045:14" pos:end="3045:15">-&gt;</operator><name pos:start="3045:16" pos:end="3045:20">dflag</name></name> <operator pos:start="3045:22" pos:end="3045:23">==</operator> <literal type="number" pos:start="3045:25" pos:end="3045:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3047:13" pos:end="3047:34"><block_content pos:start="3047:13" pos:end="3047:34">

            <expr_stmt pos:start="3047:13" pos:end="3047:34"><expr pos:start="3047:13" pos:end="3047:33"><call pos:start="3047:13" pos:end="3047:33"><name pos:start="3047:13" pos:end="3047:31">gen_op_andl_T0_ffff</name><argument_list pos:start="3047:32" pos:end="3047:33">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3049:9" pos:end="3049:24"><expr pos:start="3049:9" pos:end="3049:23"><call pos:start="3049:9" pos:end="3049:23"><name pos:start="3049:9" pos:end="3049:21">gen_op_jmp_T0</name><argument_list pos:start="3049:22" pos:end="3049:23">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3051:9" pos:end="3051:26"><expr pos:start="3051:9" pos:end="3051:25"><call pos:start="3051:9" pos:end="3051:25"><name pos:start="3051:9" pos:end="3051:22">gen_pop_update</name><argument_list pos:start="3051:23" pos:end="3051:25">(<argument pos:start="3051:24" pos:end="3051:24"><expr pos:start="3051:24" pos:end="3051:24"><name pos:start="3051:24" pos:end="3051:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3053:9" pos:end="3053:26">/* pop selector */</comment>

        <expr_stmt pos:start="3055:9" pos:end="3055:22"><expr pos:start="3055:9" pos:end="3055:21"><call pos:start="3055:9" pos:end="3055:21"><name pos:start="3055:9" pos:end="3055:18">gen_pop_T0</name><argument_list pos:start="3055:19" pos:end="3055:21">(<argument pos:start="3055:20" pos:end="3055:20"><expr pos:start="3055:20" pos:end="3055:20"><name pos:start="3055:20" pos:end="3055:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3057:9" pos:end="3057:33"><expr pos:start="3057:9" pos:end="3057:32"><call pos:start="3057:9" pos:end="3057:32"><name pos:start="3057:9" pos:end="3057:23">gen_movl_seg_T0</name><argument_list pos:start="3057:24" pos:end="3057:32">(<argument pos:start="3057:25" pos:end="3057:25"><expr pos:start="3057:25" pos:end="3057:25"><name pos:start="3057:25" pos:end="3057:25">s</name></expr></argument>, <argument pos:start="3057:28" pos:end="3057:31"><expr pos:start="3057:28" pos:end="3057:31"><name pos:start="3057:28" pos:end="3057:31">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3059:9" pos:end="3059:26"><expr pos:start="3059:9" pos:end="3059:25"><call pos:start="3059:9" pos:end="3059:25"><name pos:start="3059:9" pos:end="3059:22">gen_pop_update</name><argument_list pos:start="3059:23" pos:end="3059:25">(<argument pos:start="3059:24" pos:end="3059:24"><expr pos:start="3059:24" pos:end="3059:24"><name pos:start="3059:24" pos:end="3059:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3061:9" pos:end="3061:22"><expr pos:start="3061:9" pos:end="3061:21"><name pos:start="3061:9" pos:end="3061:17"><name pos:start="3061:9" pos:end="3061:9">s</name><operator pos:start="3061:10" pos:end="3061:11">-&gt;</operator><name pos:start="3061:12" pos:end="3061:17">is_jmp</name></name> <operator pos:start="3061:19" pos:end="3061:19">=</operator> <literal type="number" pos:start="3061:21" pos:end="3061:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3063:9" pos:end="3063:14">break;</break>

    <case pos:start="3065:5" pos:end="3065:14">case <expr pos:start="3065:10" pos:end="3065:13"><literal type="number" pos:start="3065:10" pos:end="3065:13">0xe8</literal></expr>:</case> <comment type="block" pos:start="3065:16" pos:end="3065:28">/* call im */</comment>

        <block pos:start="3067:9" pos:end="3091:9">{<block_content pos:start="3069:13" pos:end="3089:26">

            <decl_stmt pos:start="3069:13" pos:end="3069:34"><decl pos:start="3069:13" pos:end="3069:33"><type pos:start="3069:13" pos:end="3069:24"><name pos:start="3069:13" pos:end="3069:20">unsigned</name> <name pos:start="3069:22" pos:end="3069:24">int</name></type> <name pos:start="3069:26" pos:end="3069:33">next_eip</name></decl>;</decl_stmt>

            <expr_stmt pos:start="3071:13" pos:end="3071:43"><expr pos:start="3071:13" pos:end="3071:42"><name pos:start="3071:13" pos:end="3071:14">ot</name> <operator pos:start="3071:16" pos:end="3071:16">=</operator> <ternary pos:start="3071:18" pos:end="3071:42"><condition pos:start="3071:18" pos:end="3071:24"><expr pos:start="3071:18" pos:end="3071:22"><name pos:start="3071:18" pos:end="3071:22">dflag</name></expr> ?</condition><then pos:start="3071:26" pos:end="3071:32"> <expr pos:start="3071:26" pos:end="3071:32"><name pos:start="3071:26" pos:end="3071:32">OT_LONG</name></expr> </then><else pos:start="3071:34" pos:end="3071:42">: <expr pos:start="3071:36" pos:end="3071:42"><name pos:start="3071:36" pos:end="3071:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3073:13" pos:end="3073:34"><expr pos:start="3073:13" pos:end="3073:33"><name pos:start="3073:13" pos:end="3073:15">val</name> <operator pos:start="3073:17" pos:end="3073:17">=</operator> <call pos:start="3073:19" pos:end="3073:33"><name pos:start="3073:19" pos:end="3073:26">insn_get</name><argument_list pos:start="3073:27" pos:end="3073:33">(<argument pos:start="3073:28" pos:end="3073:28"><expr pos:start="3073:28" pos:end="3073:28"><name pos:start="3073:28" pos:end="3073:28">s</name></expr></argument>, <argument pos:start="3073:31" pos:end="3073:32"><expr pos:start="3073:31" pos:end="3073:32"><name pos:start="3073:31" pos:end="3073:32">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3075:13" pos:end="3075:42"><expr pos:start="3075:13" pos:end="3075:41"><name pos:start="3075:13" pos:end="3075:20">next_eip</name> <operator pos:start="3075:22" pos:end="3075:22">=</operator> <name pos:start="3075:24" pos:end="3075:28"><name pos:start="3075:24" pos:end="3075:24">s</name><operator pos:start="3075:25" pos:end="3075:26">-&gt;</operator><name pos:start="3075:27" pos:end="3075:28">pc</name></name> <operator pos:start="3075:30" pos:end="3075:30">-</operator> <name pos:start="3075:32" pos:end="3075:41"><name pos:start="3075:32" pos:end="3075:32">s</name><operator pos:start="3075:33" pos:end="3075:34">-&gt;</operator><name pos:start="3075:35" pos:end="3075:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="3077:13" pos:end="3077:28"><expr pos:start="3077:13" pos:end="3077:27"><name pos:start="3077:13" pos:end="3077:15">val</name> <operator pos:start="3077:17" pos:end="3077:18">+=</operator> <name pos:start="3077:20" pos:end="3077:27">next_eip</name></expr>;</expr_stmt>

            <if_stmt pos:start="3079:13" pos:end="3081:30"><if pos:start="3079:13" pos:end="3081:30">if <condition pos:start="3079:16" pos:end="3079:30">(<expr pos:start="3079:17" pos:end="3079:29"><name pos:start="3079:17" pos:end="3079:24"><name pos:start="3079:17" pos:end="3079:17">s</name><operator pos:start="3079:18" pos:end="3079:19">-&gt;</operator><name pos:start="3079:20" pos:end="3079:24">dflag</name></name> <operator pos:start="3079:26" pos:end="3079:27">==</operator> <literal type="number" pos:start="3079:29" pos:end="3079:29">0</literal></expr>)</condition><block type="pseudo" pos:start="3081:17" pos:end="3081:30"><block_content pos:start="3081:17" pos:end="3081:30">

                <expr_stmt pos:start="3081:17" pos:end="3081:30"><expr pos:start="3081:17" pos:end="3081:29"><name pos:start="3081:17" pos:end="3081:19">val</name> <operator pos:start="3081:21" pos:end="3081:22">&amp;=</operator> <literal type="number" pos:start="3081:24" pos:end="3081:29">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="3083:13" pos:end="3083:40"><expr pos:start="3083:13" pos:end="3083:39"><call pos:start="3083:13" pos:end="3083:39"><name pos:start="3083:13" pos:end="3083:29">gen_op_movl_T0_im</name><argument_list pos:start="3083:30" pos:end="3083:39">(<argument pos:start="3083:31" pos:end="3083:38"><expr pos:start="3083:31" pos:end="3083:38"><name pos:start="3083:31" pos:end="3083:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3085:13" pos:end="3085:27"><expr pos:start="3085:13" pos:end="3085:26"><call pos:start="3085:13" pos:end="3085:26"><name pos:start="3085:13" pos:end="3085:23">gen_push_T0</name><argument_list pos:start="3085:24" pos:end="3085:26">(<argument pos:start="3085:25" pos:end="3085:25"><expr pos:start="3085:25" pos:end="3085:25"><name pos:start="3085:25" pos:end="3085:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3087:13" pos:end="3087:31"><expr pos:start="3087:13" pos:end="3087:30"><call pos:start="3087:13" pos:end="3087:30"><name pos:start="3087:13" pos:end="3087:25">gen_op_jmp_im</name><argument_list pos:start="3087:26" pos:end="3087:30">(<argument pos:start="3087:27" pos:end="3087:29"><expr pos:start="3087:27" pos:end="3087:29"><name pos:start="3087:27" pos:end="3087:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3089:13" pos:end="3089:26"><expr pos:start="3089:13" pos:end="3089:25"><name pos:start="3089:13" pos:end="3089:21"><name pos:start="3089:13" pos:end="3089:13">s</name><operator pos:start="3089:14" pos:end="3089:15">-&gt;</operator><name pos:start="3089:16" pos:end="3089:21">is_jmp</name></name> <operator pos:start="3089:23" pos:end="3089:23">=</operator> <literal type="number" pos:start="3089:25" pos:end="3089:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3093:9" pos:end="3093:14">break;</break>

    <case pos:start="3095:5" pos:end="3095:14">case <expr pos:start="3095:10" pos:end="3095:13"><literal type="number" pos:start="3095:10" pos:end="3095:13">0x9a</literal></expr>:</case> <comment type="block" pos:start="3095:16" pos:end="3095:29">/* lcall im */</comment>

        <block pos:start="3097:9" pos:end="3135:9">{<block_content pos:start="3099:13" pos:end="3133:26">

            <decl_stmt pos:start="3099:13" pos:end="3099:42"><decl pos:start="3099:13" pos:end="3099:33"><type pos:start="3099:13" pos:end="3099:24"><name pos:start="3099:13" pos:end="3099:20">unsigned</name> <name pos:start="3099:22" pos:end="3099:24">int</name></type> <name pos:start="3099:26" pos:end="3099:33">selector</name></decl>, <decl pos:start="3099:36" pos:end="3099:41"><type ref="prev" pos:start="3099:13" pos:end="3099:24"/><name pos:start="3099:36" pos:end="3099:41">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3103:13" pos:end="3103:43"><expr pos:start="3103:13" pos:end="3103:42"><name pos:start="3103:13" pos:end="3103:14">ot</name> <operator pos:start="3103:16" pos:end="3103:16">=</operator> <ternary pos:start="3103:18" pos:end="3103:42"><condition pos:start="3103:18" pos:end="3103:24"><expr pos:start="3103:18" pos:end="3103:22"><name pos:start="3103:18" pos:end="3103:22">dflag</name></expr> ?</condition><then pos:start="3103:26" pos:end="3103:32"> <expr pos:start="3103:26" pos:end="3103:32"><name pos:start="3103:26" pos:end="3103:32">OT_LONG</name></expr> </then><else pos:start="3103:34" pos:end="3103:42">: <expr pos:start="3103:36" pos:end="3103:42"><name pos:start="3103:36" pos:end="3103:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3105:13" pos:end="3105:37"><expr pos:start="3105:13" pos:end="3105:36"><name pos:start="3105:13" pos:end="3105:18">offset</name> <operator pos:start="3105:20" pos:end="3105:20">=</operator> <call pos:start="3105:22" pos:end="3105:36"><name pos:start="3105:22" pos:end="3105:29">insn_get</name><argument_list pos:start="3105:30" pos:end="3105:36">(<argument pos:start="3105:31" pos:end="3105:31"><expr pos:start="3105:31" pos:end="3105:31"><name pos:start="3105:31" pos:end="3105:31">s</name></expr></argument>, <argument pos:start="3105:34" pos:end="3105:35"><expr pos:start="3105:34" pos:end="3105:35"><name pos:start="3105:34" pos:end="3105:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3107:13" pos:end="3107:44"><expr pos:start="3107:13" pos:end="3107:43"><name pos:start="3107:13" pos:end="3107:20">selector</name> <operator pos:start="3107:22" pos:end="3107:22">=</operator> <call pos:start="3107:24" pos:end="3107:43"><name pos:start="3107:24" pos:end="3107:31">insn_get</name><argument_list pos:start="3107:32" pos:end="3107:43">(<argument pos:start="3107:33" pos:end="3107:33"><expr pos:start="3107:33" pos:end="3107:33"><name pos:start="3107:33" pos:end="3107:33">s</name></expr></argument>, <argument pos:start="3107:36" pos:end="3107:42"><expr pos:start="3107:36" pos:end="3107:42"><name pos:start="3107:36" pos:end="3107:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <comment type="block" pos:start="3111:13" pos:end="3111:46">/* push return segment + offset */</comment>

            <expr_stmt pos:start="3113:13" pos:end="3113:37"><expr pos:start="3113:13" pos:end="3113:36"><call pos:start="3113:13" pos:end="3113:36"><name pos:start="3113:13" pos:end="3113:30">gen_op_movl_T0_seg</name><argument_list pos:start="3113:31" pos:end="3113:36">(<argument pos:start="3113:32" pos:end="3113:35"><expr pos:start="3113:32" pos:end="3113:35"><name pos:start="3113:32" pos:end="3113:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3115:13" pos:end="3115:27"><expr pos:start="3115:13" pos:end="3115:26"><call pos:start="3115:13" pos:end="3115:26"><name pos:start="3115:13" pos:end="3115:23">gen_push_T0</name><argument_list pos:start="3115:24" pos:end="3115:26">(<argument pos:start="3115:25" pos:end="3115:25"><expr pos:start="3115:25" pos:end="3115:25"><name pos:start="3115:25" pos:end="3115:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3117:13" pos:end="3117:42"><expr pos:start="3117:13" pos:end="3117:41"><name pos:start="3117:13" pos:end="3117:20">next_eip</name> <operator pos:start="3117:22" pos:end="3117:22">=</operator> <name pos:start="3117:24" pos:end="3117:28"><name pos:start="3117:24" pos:end="3117:24">s</name><operator pos:start="3117:25" pos:end="3117:26">-&gt;</operator><name pos:start="3117:27" pos:end="3117:28">pc</name></name> <operator pos:start="3117:30" pos:end="3117:30">-</operator> <name pos:start="3117:32" pos:end="3117:41"><name pos:start="3117:32" pos:end="3117:32">s</name><operator pos:start="3117:33" pos:end="3117:34">-&gt;</operator><name pos:start="3117:35" pos:end="3117:41">cs_base</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="3119:13" pos:end="3119:40"><expr pos:start="3119:13" pos:end="3119:39"><call pos:start="3119:13" pos:end="3119:39"><name pos:start="3119:13" pos:end="3119:29">gen_op_movl_T0_im</name><argument_list pos:start="3119:30" pos:end="3119:39">(<argument pos:start="3119:31" pos:end="3119:38"><expr pos:start="3119:31" pos:end="3119:38"><name pos:start="3119:31" pos:end="3119:38">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3121:13" pos:end="3121:27"><expr pos:start="3121:13" pos:end="3121:26"><call pos:start="3121:13" pos:end="3121:26"><name pos:start="3121:13" pos:end="3121:23">gen_push_T0</name><argument_list pos:start="3121:24" pos:end="3121:26">(<argument pos:start="3121:25" pos:end="3121:25"><expr pos:start="3121:25" pos:end="3121:25"><name pos:start="3121:25" pos:end="3121:25">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="3125:13" pos:end="3125:34">/* change cs and pc */</comment>

            <expr_stmt pos:start="3127:13" pos:end="3127:40"><expr pos:start="3127:13" pos:end="3127:39"><call pos:start="3127:13" pos:end="3127:39"><name pos:start="3127:13" pos:end="3127:29">gen_op_movl_T0_im</name><argument_list pos:start="3127:30" pos:end="3127:39">(<argument pos:start="3127:31" pos:end="3127:38"><expr pos:start="3127:31" pos:end="3127:38"><name pos:start="3127:31" pos:end="3127:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3129:13" pos:end="3129:37"><expr pos:start="3129:13" pos:end="3129:36"><call pos:start="3129:13" pos:end="3129:36"><name pos:start="3129:13" pos:end="3129:27">gen_movl_seg_T0</name><argument_list pos:start="3129:28" pos:end="3129:36">(<argument pos:start="3129:29" pos:end="3129:29"><expr pos:start="3129:29" pos:end="3129:29"><name pos:start="3129:29" pos:end="3129:29">s</name></expr></argument>, <argument pos:start="3129:32" pos:end="3129:35"><expr pos:start="3129:32" pos:end="3129:35"><name pos:start="3129:32" pos:end="3129:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3131:13" pos:end="3131:49"><expr pos:start="3131:13" pos:end="3131:48"><call pos:start="3131:13" pos:end="3131:48"><name pos:start="3131:13" pos:end="3131:25">gen_op_jmp_im</name><argument_list pos:start="3131:26" pos:end="3131:48">(<argument pos:start="3131:27" pos:end="3131:47"><expr pos:start="3131:27" pos:end="3131:47"><operator pos:start="3131:27" pos:end="3131:27">(</operator><name pos:start="3131:28" pos:end="3131:35">unsigned</name> <name pos:start="3131:37" pos:end="3131:40">long</name><operator pos:start="3131:41" pos:end="3131:41">)</operator><name pos:start="3131:42" pos:end="3131:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3133:13" pos:end="3133:26"><expr pos:start="3133:13" pos:end="3133:25"><name pos:start="3133:13" pos:end="3133:21"><name pos:start="3133:13" pos:end="3133:13">s</name><operator pos:start="3133:14" pos:end="3133:15">-&gt;</operator><name pos:start="3133:16" pos:end="3133:21">is_jmp</name></name> <operator pos:start="3133:23" pos:end="3133:23">=</operator> <literal type="number" pos:start="3133:25" pos:end="3133:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3137:9" pos:end="3137:14">break;</break>

    <case pos:start="3139:5" pos:end="3139:14">case <expr pos:start="3139:10" pos:end="3139:13"><literal type="number" pos:start="3139:10" pos:end="3139:13">0xe9</literal></expr>:</case> <comment type="block" pos:start="3139:16" pos:end="3139:24">/* jmp */</comment>

        <expr_stmt pos:start="3141:9" pos:end="3141:39"><expr pos:start="3141:9" pos:end="3141:38"><name pos:start="3141:9" pos:end="3141:10">ot</name> <operator pos:start="3141:12" pos:end="3141:12">=</operator> <ternary pos:start="3141:14" pos:end="3141:38"><condition pos:start="3141:14" pos:end="3141:20"><expr pos:start="3141:14" pos:end="3141:18"><name pos:start="3141:14" pos:end="3141:18">dflag</name></expr> ?</condition><then pos:start="3141:22" pos:end="3141:28"> <expr pos:start="3141:22" pos:end="3141:28"><name pos:start="3141:22" pos:end="3141:28">OT_LONG</name></expr> </then><else pos:start="3141:30" pos:end="3141:38">: <expr pos:start="3141:32" pos:end="3141:38"><name pos:start="3141:32" pos:end="3141:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3143:9" pos:end="3143:30"><expr pos:start="3143:9" pos:end="3143:29"><name pos:start="3143:9" pos:end="3143:11">val</name> <operator pos:start="3143:13" pos:end="3143:13">=</operator> <call pos:start="3143:15" pos:end="3143:29"><name pos:start="3143:15" pos:end="3143:22">insn_get</name><argument_list pos:start="3143:23" pos:end="3143:29">(<argument pos:start="3143:24" pos:end="3143:24"><expr pos:start="3143:24" pos:end="3143:24"><name pos:start="3143:24" pos:end="3143:24">s</name></expr></argument>, <argument pos:start="3143:27" pos:end="3143:28"><expr pos:start="3143:27" pos:end="3143:28"><name pos:start="3143:27" pos:end="3143:28">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3145:9" pos:end="3145:34"><expr pos:start="3145:9" pos:end="3145:33"><name pos:start="3145:9" pos:end="3145:11">val</name> <operator pos:start="3145:13" pos:end="3145:14">+=</operator> <name pos:start="3145:16" pos:end="3145:20"><name pos:start="3145:16" pos:end="3145:16">s</name><operator pos:start="3145:17" pos:end="3145:18">-&gt;</operator><name pos:start="3145:19" pos:end="3145:20">pc</name></name> <operator pos:start="3145:22" pos:end="3145:22">-</operator> <name pos:start="3145:24" pos:end="3145:33"><name pos:start="3145:24" pos:end="3145:24">s</name><operator pos:start="3145:25" pos:end="3145:26">-&gt;</operator><name pos:start="3145:27" pos:end="3145:33">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="3147:9" pos:end="3149:31"><if pos:start="3147:9" pos:end="3149:31">if <condition pos:start="3147:12" pos:end="3147:26">(<expr pos:start="3147:13" pos:end="3147:25"><name pos:start="3147:13" pos:end="3147:20"><name pos:start="3147:13" pos:end="3147:13">s</name><operator pos:start="3147:14" pos:end="3147:15">-&gt;</operator><name pos:start="3147:16" pos:end="3147:20">dflag</name></name> <operator pos:start="3147:22" pos:end="3147:23">==</operator> <literal type="number" pos:start="3147:25" pos:end="3147:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3149:13" pos:end="3149:31"><block_content pos:start="3149:13" pos:end="3149:31">

            <expr_stmt pos:start="3149:13" pos:end="3149:31"><expr pos:start="3149:13" pos:end="3149:30"><name pos:start="3149:13" pos:end="3149:15">val</name> <operator pos:start="3149:17" pos:end="3149:17">=</operator> <name pos:start="3149:19" pos:end="3149:21">val</name> <operator pos:start="3149:23" pos:end="3149:23">&amp;</operator> <literal type="number" pos:start="3149:25" pos:end="3149:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3151:9" pos:end="3151:27"><expr pos:start="3151:9" pos:end="3151:26"><call pos:start="3151:9" pos:end="3151:26"><name pos:start="3151:9" pos:end="3151:21">gen_op_jmp_im</name><argument_list pos:start="3151:22" pos:end="3151:26">(<argument pos:start="3151:23" pos:end="3151:25"><expr pos:start="3151:23" pos:end="3151:25"><name pos:start="3151:23" pos:end="3151:25">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3153:9" pos:end="3153:22"><expr pos:start="3153:9" pos:end="3153:21"><name pos:start="3153:9" pos:end="3153:17"><name pos:start="3153:9" pos:end="3153:9">s</name><operator pos:start="3153:10" pos:end="3153:11">-&gt;</operator><name pos:start="3153:12" pos:end="3153:17">is_jmp</name></name> <operator pos:start="3153:19" pos:end="3153:19">=</operator> <literal type="number" pos:start="3153:21" pos:end="3153:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3155:9" pos:end="3155:14">break;</break>

    <case pos:start="3157:5" pos:end="3157:14">case <expr pos:start="3157:10" pos:end="3157:13"><literal type="number" pos:start="3157:10" pos:end="3157:13">0xea</literal></expr>:</case> <comment type="block" pos:start="3157:16" pos:end="3157:28">/* ljmp im */</comment>

        <block pos:start="3159:9" pos:end="3183:9">{<block_content pos:start="3161:13" pos:end="3181:26">

            <decl_stmt pos:start="3161:13" pos:end="3161:42"><decl pos:start="3161:13" pos:end="3161:33"><type pos:start="3161:13" pos:end="3161:24"><name pos:start="3161:13" pos:end="3161:20">unsigned</name> <name pos:start="3161:22" pos:end="3161:24">int</name></type> <name pos:start="3161:26" pos:end="3161:33">selector</name></decl>, <decl pos:start="3161:36" pos:end="3161:41"><type ref="prev" pos:start="3161:13" pos:end="3161:24"/><name pos:start="3161:36" pos:end="3161:41">offset</name></decl>;</decl_stmt>



            <expr_stmt pos:start="3165:13" pos:end="3165:43"><expr pos:start="3165:13" pos:end="3165:42"><name pos:start="3165:13" pos:end="3165:14">ot</name> <operator pos:start="3165:16" pos:end="3165:16">=</operator> <ternary pos:start="3165:18" pos:end="3165:42"><condition pos:start="3165:18" pos:end="3165:24"><expr pos:start="3165:18" pos:end="3165:22"><name pos:start="3165:18" pos:end="3165:22">dflag</name></expr> ?</condition><then pos:start="3165:26" pos:end="3165:32"> <expr pos:start="3165:26" pos:end="3165:32"><name pos:start="3165:26" pos:end="3165:32">OT_LONG</name></expr> </then><else pos:start="3165:34" pos:end="3165:42">: <expr pos:start="3165:36" pos:end="3165:42"><name pos:start="3165:36" pos:end="3165:42">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="3167:13" pos:end="3167:37"><expr pos:start="3167:13" pos:end="3167:36"><name pos:start="3167:13" pos:end="3167:18">offset</name> <operator pos:start="3167:20" pos:end="3167:20">=</operator> <call pos:start="3167:22" pos:end="3167:36"><name pos:start="3167:22" pos:end="3167:29">insn_get</name><argument_list pos:start="3167:30" pos:end="3167:36">(<argument pos:start="3167:31" pos:end="3167:31"><expr pos:start="3167:31" pos:end="3167:31"><name pos:start="3167:31" pos:end="3167:31">s</name></expr></argument>, <argument pos:start="3167:34" pos:end="3167:35"><expr pos:start="3167:34" pos:end="3167:35"><name pos:start="3167:34" pos:end="3167:35">ot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3169:13" pos:end="3169:44"><expr pos:start="3169:13" pos:end="3169:43"><name pos:start="3169:13" pos:end="3169:20">selector</name> <operator pos:start="3169:22" pos:end="3169:22">=</operator> <call pos:start="3169:24" pos:end="3169:43"><name pos:start="3169:24" pos:end="3169:31">insn_get</name><argument_list pos:start="3169:32" pos:end="3169:43">(<argument pos:start="3169:33" pos:end="3169:33"><expr pos:start="3169:33" pos:end="3169:33"><name pos:start="3169:33" pos:end="3169:33">s</name></expr></argument>, <argument pos:start="3169:36" pos:end="3169:42"><expr pos:start="3169:36" pos:end="3169:42"><name pos:start="3169:36" pos:end="3169:42">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            

            <comment type="block" pos:start="3173:13" pos:end="3173:34">/* change cs and pc */</comment>

            <expr_stmt pos:start="3175:13" pos:end="3175:40"><expr pos:start="3175:13" pos:end="3175:39"><call pos:start="3175:13" pos:end="3175:39"><name pos:start="3175:13" pos:end="3175:29">gen_op_movl_T0_im</name><argument_list pos:start="3175:30" pos:end="3175:39">(<argument pos:start="3175:31" pos:end="3175:38"><expr pos:start="3175:31" pos:end="3175:38"><name pos:start="3175:31" pos:end="3175:38">selector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3177:13" pos:end="3177:37"><expr pos:start="3177:13" pos:end="3177:36"><call pos:start="3177:13" pos:end="3177:36"><name pos:start="3177:13" pos:end="3177:27">gen_movl_seg_T0</name><argument_list pos:start="3177:28" pos:end="3177:36">(<argument pos:start="3177:29" pos:end="3177:29"><expr pos:start="3177:29" pos:end="3177:29"><name pos:start="3177:29" pos:end="3177:29">s</name></expr></argument>, <argument pos:start="3177:32" pos:end="3177:35"><expr pos:start="3177:32" pos:end="3177:35"><name pos:start="3177:32" pos:end="3177:35">R_CS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3179:13" pos:end="3179:49"><expr pos:start="3179:13" pos:end="3179:48"><call pos:start="3179:13" pos:end="3179:48"><name pos:start="3179:13" pos:end="3179:25">gen_op_jmp_im</name><argument_list pos:start="3179:26" pos:end="3179:48">(<argument pos:start="3179:27" pos:end="3179:47"><expr pos:start="3179:27" pos:end="3179:47"><operator pos:start="3179:27" pos:end="3179:27">(</operator><name pos:start="3179:28" pos:end="3179:35">unsigned</name> <name pos:start="3179:37" pos:end="3179:40">long</name><operator pos:start="3179:41" pos:end="3179:41">)</operator><name pos:start="3179:42" pos:end="3179:47">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3181:13" pos:end="3181:26"><expr pos:start="3181:13" pos:end="3181:25"><name pos:start="3181:13" pos:end="3181:21"><name pos:start="3181:13" pos:end="3181:13">s</name><operator pos:start="3181:14" pos:end="3181:15">-&gt;</operator><name pos:start="3181:16" pos:end="3181:21">is_jmp</name></name> <operator pos:start="3181:23" pos:end="3181:23">=</operator> <literal type="number" pos:start="3181:25" pos:end="3181:25">1</literal></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="3185:9" pos:end="3185:14">break;</break>

    <case pos:start="3187:5" pos:end="3187:14">case <expr pos:start="3187:10" pos:end="3187:13"><literal type="number" pos:start="3187:10" pos:end="3187:13">0xeb</literal></expr>:</case> <comment type="block" pos:start="3187:16" pos:end="3187:27">/* jmp Jb */</comment>

        <expr_stmt pos:start="3189:9" pos:end="3189:43"><expr pos:start="3189:9" pos:end="3189:42"><name pos:start="3189:9" pos:end="3189:11">val</name> <operator pos:start="3189:13" pos:end="3189:13">=</operator> <operator pos:start="3189:15" pos:end="3189:15">(</operator><name pos:start="3189:16" pos:end="3189:21">int8_t</name><operator pos:start="3189:22" pos:end="3189:22">)</operator><call pos:start="3189:23" pos:end="3189:42"><name pos:start="3189:23" pos:end="3189:30">insn_get</name><argument_list pos:start="3189:31" pos:end="3189:42">(<argument pos:start="3189:32" pos:end="3189:32"><expr pos:start="3189:32" pos:end="3189:32"><name pos:start="3189:32" pos:end="3189:32">s</name></expr></argument>, <argument pos:start="3189:35" pos:end="3189:41"><expr pos:start="3189:35" pos:end="3189:41"><name pos:start="3189:35" pos:end="3189:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3191:9" pos:end="3191:34"><expr pos:start="3191:9" pos:end="3191:33"><name pos:start="3191:9" pos:end="3191:11">val</name> <operator pos:start="3191:13" pos:end="3191:14">+=</operator> <name pos:start="3191:16" pos:end="3191:20"><name pos:start="3191:16" pos:end="3191:16">s</name><operator pos:start="3191:17" pos:end="3191:18">-&gt;</operator><name pos:start="3191:19" pos:end="3191:20">pc</name></name> <operator pos:start="3191:22" pos:end="3191:22">-</operator> <name pos:start="3191:24" pos:end="3191:33"><name pos:start="3191:24" pos:end="3191:24">s</name><operator pos:start="3191:25" pos:end="3191:26">-&gt;</operator><name pos:start="3191:27" pos:end="3191:33">cs_base</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="3193:9" pos:end="3195:31"><if pos:start="3193:9" pos:end="3195:31">if <condition pos:start="3193:12" pos:end="3193:26">(<expr pos:start="3193:13" pos:end="3193:25"><name pos:start="3193:13" pos:end="3193:20"><name pos:start="3193:13" pos:end="3193:13">s</name><operator pos:start="3193:14" pos:end="3193:15">-&gt;</operator><name pos:start="3193:16" pos:end="3193:20">dflag</name></name> <operator pos:start="3193:22" pos:end="3193:23">==</operator> <literal type="number" pos:start="3193:25" pos:end="3193:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3195:13" pos:end="3195:31"><block_content pos:start="3195:13" pos:end="3195:31">

            <expr_stmt pos:start="3195:13" pos:end="3195:31"><expr pos:start="3195:13" pos:end="3195:30"><name pos:start="3195:13" pos:end="3195:15">val</name> <operator pos:start="3195:17" pos:end="3195:17">=</operator> <name pos:start="3195:19" pos:end="3195:21">val</name> <operator pos:start="3195:23" pos:end="3195:23">&amp;</operator> <literal type="number" pos:start="3195:25" pos:end="3195:30">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3197:9" pos:end="3197:27"><expr pos:start="3197:9" pos:end="3197:26"><call pos:start="3197:9" pos:end="3197:26"><name pos:start="3197:9" pos:end="3197:21">gen_op_jmp_im</name><argument_list pos:start="3197:22" pos:end="3197:26">(<argument pos:start="3197:23" pos:end="3197:25"><expr pos:start="3197:23" pos:end="3197:25"><name pos:start="3197:23" pos:end="3197:25">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3199:9" pos:end="3199:22"><expr pos:start="3199:9" pos:end="3199:21"><name pos:start="3199:9" pos:end="3199:17"><name pos:start="3199:9" pos:end="3199:9">s</name><operator pos:start="3199:10" pos:end="3199:11">-&gt;</operator><name pos:start="3199:12" pos:end="3199:17">is_jmp</name></name> <operator pos:start="3199:19" pos:end="3199:19">=</operator> <literal type="number" pos:start="3199:21" pos:end="3199:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3201:9" pos:end="3201:14">break;</break>

    <case pos:start="3203:5" pos:end="3203:23">case <expr pos:start="3203:10" pos:end="3203:22"><literal type="number" pos:start="3203:10" pos:end="3203:13">0x70</literal> <operator pos:start="3203:15" pos:end="3203:17">...</operator> <literal type="number" pos:start="3203:19" pos:end="3203:22">0x7f</literal></expr>:</case> <comment type="block" pos:start="3203:25" pos:end="3203:36">/* jcc Jb */</comment>

        <expr_stmt pos:start="3205:9" pos:end="3205:43"><expr pos:start="3205:9" pos:end="3205:42"><name pos:start="3205:9" pos:end="3205:11">val</name> <operator pos:start="3205:13" pos:end="3205:13">=</operator> <operator pos:start="3205:15" pos:end="3205:15">(</operator><name pos:start="3205:16" pos:end="3205:21">int8_t</name><operator pos:start="3205:22" pos:end="3205:22">)</operator><call pos:start="3205:23" pos:end="3205:42"><name pos:start="3205:23" pos:end="3205:30">insn_get</name><argument_list pos:start="3205:31" pos:end="3205:42">(<argument pos:start="3205:32" pos:end="3205:32"><expr pos:start="3205:32" pos:end="3205:32"><name pos:start="3205:32" pos:end="3205:32">s</name></expr></argument>, <argument pos:start="3205:35" pos:end="3205:41"><expr pos:start="3205:35" pos:end="3205:41"><name pos:start="3205:35" pos:end="3205:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="3207:9" pos:end="3207:20">goto <name pos:start="3207:14" pos:end="3207:19">do_jcc</name>;</goto>

    <case pos:start="3209:5" pos:end="3209:25">case <expr pos:start="3209:10" pos:end="3209:24"><literal type="number" pos:start="3209:10" pos:end="3209:14">0x180</literal> <operator pos:start="3209:16" pos:end="3209:18">...</operator> <literal type="number" pos:start="3209:20" pos:end="3209:24">0x18f</literal></expr>:</case> <comment type="block" pos:start="3209:27" pos:end="3209:38">/* jcc Jv */</comment>

        <if_stmt pos:start="3211:9" pos:end="3219:9"><if pos:start="3211:9" pos:end="3215:9">if <condition pos:start="3211:12" pos:end="3211:18">(<expr pos:start="3211:13" pos:end="3211:17"><name pos:start="3211:13" pos:end="3211:17">dflag</name></expr>)</condition> <block pos:start="3211:20" pos:end="3215:9">{<block_content pos:start="3213:13" pos:end="3213:39">

            <expr_stmt pos:start="3213:13" pos:end="3213:39"><expr pos:start="3213:13" pos:end="3213:38"><name pos:start="3213:13" pos:end="3213:15">val</name> <operator pos:start="3213:17" pos:end="3213:17">=</operator> <call pos:start="3213:19" pos:end="3213:38"><name pos:start="3213:19" pos:end="3213:26">insn_get</name><argument_list pos:start="3213:27" pos:end="3213:38">(<argument pos:start="3213:28" pos:end="3213:28"><expr pos:start="3213:28" pos:end="3213:28"><name pos:start="3213:28" pos:end="3213:28">s</name></expr></argument>, <argument pos:start="3213:31" pos:end="3213:37"><expr pos:start="3213:31" pos:end="3213:37"><name pos:start="3213:31" pos:end="3213:37">OT_LONG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3215:11" pos:end="3219:9">else <block pos:start="3215:16" pos:end="3219:9">{<block_content pos:start="3217:13" pos:end="3217:48">

            <expr_stmt pos:start="3217:13" pos:end="3217:48"><expr pos:start="3217:13" pos:end="3217:47"><name pos:start="3217:13" pos:end="3217:15">val</name> <operator pos:start="3217:17" pos:end="3217:17">=</operator> <operator pos:start="3217:19" pos:end="3217:19">(</operator><name pos:start="3217:20" pos:end="3217:26">int16_t</name><operator pos:start="3217:27" pos:end="3217:27">)</operator><call pos:start="3217:28" pos:end="3217:47"><name pos:start="3217:28" pos:end="3217:35">insn_get</name><argument_list pos:start="3217:36" pos:end="3217:47">(<argument pos:start="3217:37" pos:end="3217:37"><expr pos:start="3217:37" pos:end="3217:37"><name pos:start="3217:37" pos:end="3217:37">s</name></expr></argument>, <argument pos:start="3217:40" pos:end="3217:46"><expr pos:start="3217:40" pos:end="3217:46"><name pos:start="3217:40" pos:end="3217:46">OT_WORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

        </block_content>}</block></else></if_stmt>

    <label pos:start="3221:5" pos:end="3221:11"><name pos:start="3221:5" pos:end="3221:10">do_jcc</name>:</label>

        <expr_stmt pos:start="3223:9" pos:end="3223:38"><expr pos:start="3223:9" pos:end="3223:37"><name pos:start="3223:9" pos:end="3223:16">next_eip</name> <operator pos:start="3223:18" pos:end="3223:18">=</operator> <name pos:start="3223:20" pos:end="3223:24"><name pos:start="3223:20" pos:end="3223:20">s</name><operator pos:start="3223:21" pos:end="3223:22">-&gt;</operator><name pos:start="3223:23" pos:end="3223:24">pc</name></name> <operator pos:start="3223:26" pos:end="3223:26">-</operator> <name pos:start="3223:28" pos:end="3223:37"><name pos:start="3223:28" pos:end="3223:28">s</name><operator pos:start="3223:29" pos:end="3223:30">-&gt;</operator><name pos:start="3223:31" pos:end="3223:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="3225:9" pos:end="3225:24"><expr pos:start="3225:9" pos:end="3225:23"><name pos:start="3225:9" pos:end="3225:11">val</name> <operator pos:start="3225:13" pos:end="3225:14">+=</operator> <name pos:start="3225:16" pos:end="3225:23">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="3227:9" pos:end="3229:26"><if pos:start="3227:9" pos:end="3229:26">if <condition pos:start="3227:12" pos:end="3227:26">(<expr pos:start="3227:13" pos:end="3227:25"><name pos:start="3227:13" pos:end="3227:20"><name pos:start="3227:13" pos:end="3227:13">s</name><operator pos:start="3227:14" pos:end="3227:15">-&gt;</operator><name pos:start="3227:16" pos:end="3227:20">dflag</name></name> <operator pos:start="3227:22" pos:end="3227:23">==</operator> <literal type="number" pos:start="3227:25" pos:end="3227:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3229:13" pos:end="3229:26"><block_content pos:start="3229:13" pos:end="3229:26">

            <expr_stmt pos:start="3229:13" pos:end="3229:26"><expr pos:start="3229:13" pos:end="3229:25"><name pos:start="3229:13" pos:end="3229:15">val</name> <operator pos:start="3229:17" pos:end="3229:18">&amp;=</operator> <literal type="number" pos:start="3229:20" pos:end="3229:25">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3231:9" pos:end="3231:37"><expr pos:start="3231:9" pos:end="3231:36"><call pos:start="3231:9" pos:end="3231:36"><name pos:start="3231:9" pos:end="3231:15">gen_jcc</name><argument_list pos:start="3231:16" pos:end="3231:36">(<argument pos:start="3231:17" pos:end="3231:17"><expr pos:start="3231:17" pos:end="3231:17"><name pos:start="3231:17" pos:end="3231:17">s</name></expr></argument>, <argument pos:start="3231:20" pos:end="3231:20"><expr pos:start="3231:20" pos:end="3231:20"><name pos:start="3231:20" pos:end="3231:20">b</name></expr></argument>, <argument pos:start="3231:23" pos:end="3231:25"><expr pos:start="3231:23" pos:end="3231:25"><name pos:start="3231:23" pos:end="3231:25">val</name></expr></argument>, <argument pos:start="3231:28" pos:end="3231:35"><expr pos:start="3231:28" pos:end="3231:35"><name pos:start="3231:28" pos:end="3231:35">next_eip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3233:9" pos:end="3233:22"><expr pos:start="3233:9" pos:end="3233:21"><name pos:start="3233:9" pos:end="3233:17"><name pos:start="3233:9" pos:end="3233:9">s</name><operator pos:start="3233:10" pos:end="3233:11">-&gt;</operator><name pos:start="3233:12" pos:end="3233:17">is_jmp</name></name> <operator pos:start="3233:19" pos:end="3233:19">=</operator> <literal type="number" pos:start="3233:21" pos:end="3233:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3235:9" pos:end="3235:14">break;</break>



    <case pos:start="3239:5" pos:end="3239:25">case <expr pos:start="3239:10" pos:end="3239:24"><literal type="number" pos:start="3239:10" pos:end="3239:14">0x190</literal> <operator pos:start="3239:16" pos:end="3239:18">...</operator> <literal type="number" pos:start="3239:20" pos:end="3239:24">0x19f</literal></expr>:</case> <comment type="block" pos:start="3239:27" pos:end="3239:40">/* setcc Gv */</comment>

        <expr_stmt pos:start="3241:9" pos:end="3241:30"><expr pos:start="3241:9" pos:end="3241:29"><name pos:start="3241:9" pos:end="3241:13">modrm</name> <operator pos:start="3241:15" pos:end="3241:15">=</operator> <call pos:start="3241:17" pos:end="3241:29"><name pos:start="3241:17" pos:end="3241:20">ldub</name><argument_list pos:start="3241:21" pos:end="3241:29">(<argument pos:start="3241:22" pos:end="3241:28"><expr pos:start="3241:22" pos:end="3241:28"><name pos:start="3241:22" pos:end="3241:26"><name pos:start="3241:22" pos:end="3241:22">s</name><operator pos:start="3241:23" pos:end="3241:24">-&gt;</operator><name pos:start="3241:25" pos:end="3241:26">pc</name></name><operator pos:start="3241:27" pos:end="3241:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3243:9" pos:end="3243:24"><expr pos:start="3243:9" pos:end="3243:23"><call pos:start="3243:9" pos:end="3243:23"><name pos:start="3243:9" pos:end="3243:17">gen_setcc</name><argument_list pos:start="3243:18" pos:end="3243:23">(<argument pos:start="3243:19" pos:end="3243:19"><expr pos:start="3243:19" pos:end="3243:19"><name pos:start="3243:19" pos:end="3243:19">s</name></expr></argument>, <argument pos:start="3243:22" pos:end="3243:22"><expr pos:start="3243:22" pos:end="3243:22"><name pos:start="3243:22" pos:end="3243:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3245:9" pos:end="3245:54"><expr pos:start="3245:9" pos:end="3245:53"><call pos:start="3245:9" pos:end="3245:53"><name pos:start="3245:9" pos:end="3245:22">gen_ldst_modrm</name><argument_list pos:start="3245:23" pos:end="3245:53">(<argument pos:start="3245:24" pos:end="3245:24"><expr pos:start="3245:24" pos:end="3245:24"><name pos:start="3245:24" pos:end="3245:24">s</name></expr></argument>, <argument pos:start="3245:27" pos:end="3245:31"><expr pos:start="3245:27" pos:end="3245:31"><name pos:start="3245:27" pos:end="3245:31">modrm</name></expr></argument>, <argument pos:start="3245:34" pos:end="3245:40"><expr pos:start="3245:34" pos:end="3245:40"><name pos:start="3245:34" pos:end="3245:40">OT_BYTE</name></expr></argument>, <argument pos:start="3245:43" pos:end="3245:49"><expr pos:start="3245:43" pos:end="3245:49"><name pos:start="3245:43" pos:end="3245:49">OR_TMP0</name></expr></argument>, <argument pos:start="3245:52" pos:end="3245:52"><expr pos:start="3245:52" pos:end="3245:52"><literal type="number" pos:start="3245:52" pos:end="3245:52">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3247:9" pos:end="3247:14">break;</break>

    <case pos:start="3249:5" pos:end="3249:25">case <expr pos:start="3249:10" pos:end="3249:24"><literal type="number" pos:start="3249:10" pos:end="3249:14">0x140</literal> <operator pos:start="3249:16" pos:end="3249:18">...</operator> <literal type="number" pos:start="3249:20" pos:end="3249:24">0x14f</literal></expr>:</case> <comment type="block" pos:start="3249:27" pos:end="3249:43">/* cmov Gv, Ev */</comment>

        <expr_stmt pos:start="3251:9" pos:end="3251:39"><expr pos:start="3251:9" pos:end="3251:38"><name pos:start="3251:9" pos:end="3251:10">ot</name> <operator pos:start="3251:12" pos:end="3251:12">=</operator> <ternary pos:start="3251:14" pos:end="3251:38"><condition pos:start="3251:14" pos:end="3251:20"><expr pos:start="3251:14" pos:end="3251:18"><name pos:start="3251:14" pos:end="3251:18">dflag</name></expr> ?</condition><then pos:start="3251:22" pos:end="3251:28"> <expr pos:start="3251:22" pos:end="3251:28"><name pos:start="3251:22" pos:end="3251:28">OT_LONG</name></expr> </then><else pos:start="3251:30" pos:end="3251:38">: <expr pos:start="3251:32" pos:end="3251:38"><name pos:start="3251:32" pos:end="3251:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3253:9" pos:end="3253:30"><expr pos:start="3253:9" pos:end="3253:29"><name pos:start="3253:9" pos:end="3253:13">modrm</name> <operator pos:start="3253:15" pos:end="3253:15">=</operator> <call pos:start="3253:17" pos:end="3253:29"><name pos:start="3253:17" pos:end="3253:20">ldub</name><argument_list pos:start="3253:21" pos:end="3253:29">(<argument pos:start="3253:22" pos:end="3253:28"><expr pos:start="3253:22" pos:end="3253:28"><name pos:start="3253:22" pos:end="3253:26"><name pos:start="3253:22" pos:end="3253:22">s</name><operator pos:start="3253:23" pos:end="3253:24">-&gt;</operator><name pos:start="3253:25" pos:end="3253:26">pc</name></name><operator pos:start="3253:27" pos:end="3253:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3255:9" pos:end="3255:31"><expr pos:start="3255:9" pos:end="3255:30"><name pos:start="3255:9" pos:end="3255:11">reg</name> <operator pos:start="3255:13" pos:end="3255:13">=</operator> <operator pos:start="3255:15" pos:end="3255:15">(</operator><name pos:start="3255:16" pos:end="3255:20">modrm</name> <operator pos:start="3255:22" pos:end="3255:23">&gt;&gt;</operator> <literal type="number" pos:start="3255:25" pos:end="3255:25">3</literal><operator pos:start="3255:26" pos:end="3255:26">)</operator> <operator pos:start="3255:28" pos:end="3255:28">&amp;</operator> <literal type="number" pos:start="3255:30" pos:end="3255:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3257:9" pos:end="3257:31"><expr pos:start="3257:9" pos:end="3257:30"><name pos:start="3257:9" pos:end="3257:11">mod</name> <operator pos:start="3257:13" pos:end="3257:13">=</operator> <operator pos:start="3257:15" pos:end="3257:15">(</operator><name pos:start="3257:16" pos:end="3257:20">modrm</name> <operator pos:start="3257:22" pos:end="3257:23">&gt;&gt;</operator> <literal type="number" pos:start="3257:25" pos:end="3257:25">6</literal><operator pos:start="3257:26" pos:end="3257:26">)</operator> <operator pos:start="3257:28" pos:end="3257:28">&amp;</operator> <literal type="number" pos:start="3257:30" pos:end="3257:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3259:9" pos:end="3259:24"><expr pos:start="3259:9" pos:end="3259:23"><call pos:start="3259:9" pos:end="3259:23"><name pos:start="3259:9" pos:end="3259:17">gen_setcc</name><argument_list pos:start="3259:18" pos:end="3259:23">(<argument pos:start="3259:19" pos:end="3259:19"><expr pos:start="3259:19" pos:end="3259:19"><name pos:start="3259:19" pos:end="3259:19">s</name></expr></argument>, <argument pos:start="3259:22" pos:end="3259:22"><expr pos:start="3259:22" pos:end="3259:22"><name pos:start="3259:22" pos:end="3259:22">b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3261:9" pos:end="3273:9"><if pos:start="3261:9" pos:end="3267:9">if <condition pos:start="3261:12" pos:end="3261:21">(<expr pos:start="3261:13" pos:end="3261:20"><name pos:start="3261:13" pos:end="3261:15">mod</name> <operator pos:start="3261:17" pos:end="3261:18">!=</operator> <literal type="number" pos:start="3261:20" pos:end="3261:20">3</literal></expr>)</condition> <block pos:start="3261:23" pos:end="3267:9">{<block_content pos:start="3263:13" pos:end="3265:34">

            <expr_stmt pos:start="3263:13" pos:end="3263:61"><expr pos:start="3263:13" pos:end="3263:60"><call pos:start="3263:13" pos:end="3263:60"><name pos:start="3263:13" pos:end="3263:25">gen_lea_modrm</name><argument_list pos:start="3263:26" pos:end="3263:60">(<argument pos:start="3263:27" pos:end="3263:27"><expr pos:start="3263:27" pos:end="3263:27"><name pos:start="3263:27" pos:end="3263:27">s</name></expr></argument>, <argument pos:start="3263:30" pos:end="3263:34"><expr pos:start="3263:30" pos:end="3263:34"><name pos:start="3263:30" pos:end="3263:34">modrm</name></expr></argument>, <argument pos:start="3263:37" pos:end="3263:45"><expr pos:start="3263:37" pos:end="3263:45"><operator pos:start="3263:37" pos:end="3263:37">&amp;</operator><name pos:start="3263:38" pos:end="3263:45">reg_addr</name></expr></argument>, <argument pos:start="3263:48" pos:end="3263:59"><expr pos:start="3263:48" pos:end="3263:59"><operator pos:start="3263:48" pos:end="3263:48">&amp;</operator><name pos:start="3263:49" pos:end="3263:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3265:13" pos:end="3265:34"><expr pos:start="3265:13" pos:end="3265:33"><name pos:start="3265:13" pos:end="3265:31"><name pos:start="3265:13" pos:end="3265:27">gen_op_ld_T1_A0</name><index pos:start="3265:28" pos:end="3265:31">[<expr pos:start="3265:29" pos:end="3265:30"><name pos:start="3265:29" pos:end="3265:30">ot</name></expr>]</index></name><operator pos:start="3265:32" pos:end="3265:32">(</operator><operator pos:start="3265:33" pos:end="3265:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3267:11" pos:end="3273:9">else <block pos:start="3267:16" pos:end="3273:9">{<block_content pos:start="3269:13" pos:end="3271:43">

            <expr_stmt pos:start="3269:13" pos:end="3269:27"><expr pos:start="3269:13" pos:end="3269:26"><name pos:start="3269:13" pos:end="3269:14">rm</name> <operator pos:start="3269:16" pos:end="3269:16">=</operator> <name pos:start="3269:18" pos:end="3269:22">modrm</name> <operator pos:start="3269:24" pos:end="3269:24">&amp;</operator> <literal type="number" pos:start="3269:26" pos:end="3269:26">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="3271:13" pos:end="3271:43"><expr pos:start="3271:13" pos:end="3271:42"><name pos:start="3271:13" pos:end="3271:40"><name pos:start="3271:13" pos:end="3271:29">gen_op_mov_TN_reg</name><index pos:start="3271:30" pos:end="3271:33">[<expr pos:start="3271:31" pos:end="3271:32"><name pos:start="3271:31" pos:end="3271:32">ot</name></expr>]</index><index pos:start="3271:34" pos:end="3271:36">[<expr pos:start="3271:35" pos:end="3271:35"><literal type="number" pos:start="3271:35" pos:end="3271:35">1</literal></expr>]</index><index pos:start="3271:37" pos:end="3271:40">[<expr pos:start="3271:38" pos:end="3271:39"><name pos:start="3271:38" pos:end="3271:39">rm</name></expr>]</index></name><operator pos:start="3271:41" pos:end="3271:41">(</operator><operator pos:start="3271:42" pos:end="3271:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3275:9" pos:end="3275:51"><expr pos:start="3275:9" pos:end="3275:50"><name pos:start="3275:9" pos:end="3275:48"><name pos:start="3275:9" pos:end="3275:29">gen_op_cmov_reg_T1_T0</name><index pos:start="3275:30" pos:end="3275:43">[<expr pos:start="3275:31" pos:end="3275:42"><name pos:start="3275:31" pos:end="3275:32">ot</name> <operator pos:start="3275:34" pos:end="3275:34">-</operator> <name pos:start="3275:36" pos:end="3275:42">OT_WORD</name></expr>]</index><index pos:start="3275:44" pos:end="3275:48">[<expr pos:start="3275:45" pos:end="3275:47"><name pos:start="3275:45" pos:end="3275:47">reg</name></expr>]</index></name><operator pos:start="3275:49" pos:end="3275:49">(</operator><operator pos:start="3275:50" pos:end="3275:50">)</operator></expr>;</expr_stmt>

        <break pos:start="3277:9" pos:end="3277:14">break;</break>

        

        <comment type="block" format="doxygen" pos:start="3281:9" pos:end="3281:34">/************************/</comment>

        <comment type="block" pos:start="3283:9" pos:end="3283:19">/* flags */</comment>

    <case pos:start="3285:5" pos:end="3285:14">case <expr pos:start="3285:10" pos:end="3285:13"><literal type="number" pos:start="3285:10" pos:end="3285:13">0x9c</literal></expr>:</case> <comment type="block" pos:start="3285:16" pos:end="3285:26">/* pushf */</comment>

        <if_stmt pos:start="3287:9" pos:end="3289:39"><if pos:start="3287:9" pos:end="3289:39">if <condition pos:start="3287:12" pos:end="3287:38">(<expr pos:start="3287:13" pos:end="3287:37"><name pos:start="3287:13" pos:end="3287:20"><name pos:start="3287:13" pos:end="3287:13">s</name><operator pos:start="3287:14" pos:end="3287:15">-&gt;</operator><name pos:start="3287:16" pos:end="3287:20">cc_op</name></name> <operator pos:start="3287:22" pos:end="3287:23">!=</operator> <name pos:start="3287:25" pos:end="3287:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3289:13" pos:end="3289:39"><block_content pos:start="3289:13" pos:end="3289:39">

            <expr_stmt pos:start="3289:13" pos:end="3289:39"><expr pos:start="3289:13" pos:end="3289:38"><call pos:start="3289:13" pos:end="3289:38"><name pos:start="3289:13" pos:end="3289:28">gen_op_set_cc_op</name><argument_list pos:start="3289:29" pos:end="3289:38">(<argument pos:start="3289:30" pos:end="3289:37"><expr pos:start="3289:30" pos:end="3289:37"><name pos:start="3289:30" pos:end="3289:37"><name pos:start="3289:30" pos:end="3289:30">s</name><operator pos:start="3289:31" pos:end="3289:32">-&gt;</operator><name pos:start="3289:33" pos:end="3289:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3291:9" pos:end="3291:32"><expr pos:start="3291:9" pos:end="3291:31"><call pos:start="3291:9" pos:end="3291:31"><name pos:start="3291:9" pos:end="3291:29">gen_op_movl_T0_eflags</name><argument_list pos:start="3291:30" pos:end="3291:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3293:9" pos:end="3293:23"><expr pos:start="3293:9" pos:end="3293:22"><call pos:start="3293:9" pos:end="3293:22"><name pos:start="3293:9" pos:end="3293:19">gen_push_T0</name><argument_list pos:start="3293:20" pos:end="3293:22">(<argument pos:start="3293:21" pos:end="3293:21"><expr pos:start="3293:21" pos:end="3293:21"><name pos:start="3293:21" pos:end="3293:21">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3295:9" pos:end="3295:14">break;</break>

    <case pos:start="3297:5" pos:end="3297:14">case <expr pos:start="3297:10" pos:end="3297:13"><literal type="number" pos:start="3297:10" pos:end="3297:13">0x9d</literal></expr>:</case> <comment type="block" pos:start="3297:16" pos:end="3297:25">/* popf */</comment>

        <expr_stmt pos:start="3299:9" pos:end="3299:22"><expr pos:start="3299:9" pos:end="3299:21"><call pos:start="3299:9" pos:end="3299:21"><name pos:start="3299:9" pos:end="3299:18">gen_pop_T0</name><argument_list pos:start="3299:19" pos:end="3299:21">(<argument pos:start="3299:20" pos:end="3299:20"><expr pos:start="3299:20" pos:end="3299:20"><name pos:start="3299:20" pos:end="3299:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3301:9" pos:end="3301:32"><expr pos:start="3301:9" pos:end="3301:31"><call pos:start="3301:9" pos:end="3301:31"><name pos:start="3301:9" pos:end="3301:29">gen_op_movl_eflags_T0</name><argument_list pos:start="3301:30" pos:end="3301:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3303:9" pos:end="3303:26"><expr pos:start="3303:9" pos:end="3303:25"><call pos:start="3303:9" pos:end="3303:25"><name pos:start="3303:9" pos:end="3303:22">gen_pop_update</name><argument_list pos:start="3303:23" pos:end="3303:25">(<argument pos:start="3303:24" pos:end="3303:24"><expr pos:start="3303:24" pos:end="3303:24"><name pos:start="3303:24" pos:end="3303:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3305:9" pos:end="3305:32"><expr pos:start="3305:9" pos:end="3305:31"><name pos:start="3305:9" pos:end="3305:16"><name pos:start="3305:9" pos:end="3305:9">s</name><operator pos:start="3305:10" pos:end="3305:11">-&gt;</operator><name pos:start="3305:12" pos:end="3305:16">cc_op</name></name> <operator pos:start="3305:18" pos:end="3305:18">=</operator> <name pos:start="3305:20" pos:end="3305:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3307:9" pos:end="3307:14">break;</break>

    <case pos:start="3309:5" pos:end="3309:14">case <expr pos:start="3309:10" pos:end="3309:13"><literal type="number" pos:start="3309:10" pos:end="3309:13">0x9e</literal></expr>:</case> <comment type="block" pos:start="3309:16" pos:end="3309:25">/* sahf */</comment>

        <expr_stmt pos:start="3311:9" pos:end="3311:46"><expr pos:start="3311:9" pos:end="3311:45"><name pos:start="3311:9" pos:end="3311:43"><name pos:start="3311:9" pos:end="3311:25">gen_op_mov_TN_reg</name><index pos:start="3311:26" pos:end="3311:34">[<expr pos:start="3311:27" pos:end="3311:33"><name pos:start="3311:27" pos:end="3311:33">OT_BYTE</name></expr>]</index><index pos:start="3311:35" pos:end="3311:37">[<expr pos:start="3311:36" pos:end="3311:36"><literal type="number" pos:start="3311:36" pos:end="3311:36">0</literal></expr>]</index><index pos:start="3311:38" pos:end="3311:43">[<expr pos:start="3311:39" pos:end="3311:42"><name pos:start="3311:39" pos:end="3311:42">R_AH</name></expr>]</index></name><operator pos:start="3311:44" pos:end="3311:44">(</operator><operator pos:start="3311:45" pos:end="3311:45">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="3313:9" pos:end="3315:39"><if pos:start="3313:9" pos:end="3315:39">if <condition pos:start="3313:12" pos:end="3313:38">(<expr pos:start="3313:13" pos:end="3313:37"><name pos:start="3313:13" pos:end="3313:20"><name pos:start="3313:13" pos:end="3313:13">s</name><operator pos:start="3313:14" pos:end="3313:15">-&gt;</operator><name pos:start="3313:16" pos:end="3313:20">cc_op</name></name> <operator pos:start="3313:22" pos:end="3313:23">!=</operator> <name pos:start="3313:25" pos:end="3313:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3315:13" pos:end="3315:39"><block_content pos:start="3315:13" pos:end="3315:39">

            <expr_stmt pos:start="3315:13" pos:end="3315:39"><expr pos:start="3315:13" pos:end="3315:38"><call pos:start="3315:13" pos:end="3315:38"><name pos:start="3315:13" pos:end="3315:28">gen_op_set_cc_op</name><argument_list pos:start="3315:29" pos:end="3315:38">(<argument pos:start="3315:30" pos:end="3315:37"><expr pos:start="3315:30" pos:end="3315:37"><name pos:start="3315:30" pos:end="3315:37"><name pos:start="3315:30" pos:end="3315:30">s</name><operator pos:start="3315:31" pos:end="3315:32">-&gt;</operator><name pos:start="3315:33" pos:end="3315:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3317:9" pos:end="3317:32"><expr pos:start="3317:9" pos:end="3317:31"><call pos:start="3317:9" pos:end="3317:31"><name pos:start="3317:9" pos:end="3317:29">gen_op_movb_eflags_T0</name><argument_list pos:start="3317:30" pos:end="3317:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3319:9" pos:end="3319:32"><expr pos:start="3319:9" pos:end="3319:31"><name pos:start="3319:9" pos:end="3319:16"><name pos:start="3319:9" pos:end="3319:9">s</name><operator pos:start="3319:10" pos:end="3319:11">-&gt;</operator><name pos:start="3319:12" pos:end="3319:16">cc_op</name></name> <operator pos:start="3319:18" pos:end="3319:18">=</operator> <name pos:start="3319:20" pos:end="3319:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3321:9" pos:end="3321:14">break;</break>

    <case pos:start="3323:5" pos:end="3323:14">case <expr pos:start="3323:10" pos:end="3323:13"><literal type="number" pos:start="3323:10" pos:end="3323:13">0x9f</literal></expr>:</case> <comment type="block" pos:start="3323:16" pos:end="3323:25">/* lahf */</comment>

        <if_stmt pos:start="3325:9" pos:end="3327:39"><if pos:start="3325:9" pos:end="3327:39">if <condition pos:start="3325:12" pos:end="3325:38">(<expr pos:start="3325:13" pos:end="3325:37"><name pos:start="3325:13" pos:end="3325:20"><name pos:start="3325:13" pos:end="3325:13">s</name><operator pos:start="3325:14" pos:end="3325:15">-&gt;</operator><name pos:start="3325:16" pos:end="3325:20">cc_op</name></name> <operator pos:start="3325:22" pos:end="3325:23">!=</operator> <name pos:start="3325:25" pos:end="3325:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3327:13" pos:end="3327:39"><block_content pos:start="3327:13" pos:end="3327:39">

            <expr_stmt pos:start="3327:13" pos:end="3327:39"><expr pos:start="3327:13" pos:end="3327:38"><call pos:start="3327:13" pos:end="3327:38"><name pos:start="3327:13" pos:end="3327:28">gen_op_set_cc_op</name><argument_list pos:start="3327:29" pos:end="3327:38">(<argument pos:start="3327:30" pos:end="3327:37"><expr pos:start="3327:30" pos:end="3327:37"><name pos:start="3327:30" pos:end="3327:37"><name pos:start="3327:30" pos:end="3327:30">s</name><operator pos:start="3327:31" pos:end="3327:32">-&gt;</operator><name pos:start="3327:33" pos:end="3327:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3329:9" pos:end="3329:32"><expr pos:start="3329:9" pos:end="3329:31"><call pos:start="3329:9" pos:end="3329:31"><name pos:start="3329:9" pos:end="3329:29">gen_op_movl_T0_eflags</name><argument_list pos:start="3329:30" pos:end="3329:31">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3331:9" pos:end="3331:43"><expr pos:start="3331:9" pos:end="3331:42"><name pos:start="3331:9" pos:end="3331:40"><name pos:start="3331:9" pos:end="3331:25">gen_op_mov_reg_T0</name><index pos:start="3331:26" pos:end="3331:34">[<expr pos:start="3331:27" pos:end="3331:33"><name pos:start="3331:27" pos:end="3331:33">OT_BYTE</name></expr>]</index><index pos:start="3331:35" pos:end="3331:40">[<expr pos:start="3331:36" pos:end="3331:39"><name pos:start="3331:36" pos:end="3331:39">R_AH</name></expr>]</index></name><operator pos:start="3331:41" pos:end="3331:41">(</operator><operator pos:start="3331:42" pos:end="3331:42">)</operator></expr>;</expr_stmt>

        <break pos:start="3333:9" pos:end="3333:14">break;</break>

    <case pos:start="3335:5" pos:end="3335:14">case <expr pos:start="3335:10" pos:end="3335:13"><literal type="number" pos:start="3335:10" pos:end="3335:13">0xf5</literal></expr>:</case> <comment type="block" pos:start="3335:16" pos:end="3335:24">/* cmc */</comment>

        <if_stmt pos:start="3337:9" pos:end="3339:39"><if pos:start="3337:9" pos:end="3339:39">if <condition pos:start="3337:12" pos:end="3337:38">(<expr pos:start="3337:13" pos:end="3337:37"><name pos:start="3337:13" pos:end="3337:20"><name pos:start="3337:13" pos:end="3337:13">s</name><operator pos:start="3337:14" pos:end="3337:15">-&gt;</operator><name pos:start="3337:16" pos:end="3337:20">cc_op</name></name> <operator pos:start="3337:22" pos:end="3337:23">!=</operator> <name pos:start="3337:25" pos:end="3337:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3339:13" pos:end="3339:39"><block_content pos:start="3339:13" pos:end="3339:39">

            <expr_stmt pos:start="3339:13" pos:end="3339:39"><expr pos:start="3339:13" pos:end="3339:38"><call pos:start="3339:13" pos:end="3339:38"><name pos:start="3339:13" pos:end="3339:28">gen_op_set_cc_op</name><argument_list pos:start="3339:29" pos:end="3339:38">(<argument pos:start="3339:30" pos:end="3339:37"><expr pos:start="3339:30" pos:end="3339:37"><name pos:start="3339:30" pos:end="3339:37"><name pos:start="3339:30" pos:end="3339:30">s</name><operator pos:start="3339:31" pos:end="3339:32">-&gt;</operator><name pos:start="3339:33" pos:end="3339:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3341:9" pos:end="3341:21"><expr pos:start="3341:9" pos:end="3341:20"><call pos:start="3341:9" pos:end="3341:20"><name pos:start="3341:9" pos:end="3341:18">gen_op_cmc</name><argument_list pos:start="3341:19" pos:end="3341:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3343:9" pos:end="3343:32"><expr pos:start="3343:9" pos:end="3343:31"><name pos:start="3343:9" pos:end="3343:16"><name pos:start="3343:9" pos:end="3343:9">s</name><operator pos:start="3343:10" pos:end="3343:11">-&gt;</operator><name pos:start="3343:12" pos:end="3343:16">cc_op</name></name> <operator pos:start="3343:18" pos:end="3343:18">=</operator> <name pos:start="3343:20" pos:end="3343:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3345:9" pos:end="3345:14">break;</break>

    <case pos:start="3347:5" pos:end="3347:14">case <expr pos:start="3347:10" pos:end="3347:13"><literal type="number" pos:start="3347:10" pos:end="3347:13">0xf8</literal></expr>:</case> <comment type="block" pos:start="3347:16" pos:end="3347:24">/* clc */</comment>

        <if_stmt pos:start="3349:9" pos:end="3351:39"><if pos:start="3349:9" pos:end="3351:39">if <condition pos:start="3349:12" pos:end="3349:38">(<expr pos:start="3349:13" pos:end="3349:37"><name pos:start="3349:13" pos:end="3349:20"><name pos:start="3349:13" pos:end="3349:13">s</name><operator pos:start="3349:14" pos:end="3349:15">-&gt;</operator><name pos:start="3349:16" pos:end="3349:20">cc_op</name></name> <operator pos:start="3349:22" pos:end="3349:23">!=</operator> <name pos:start="3349:25" pos:end="3349:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3351:13" pos:end="3351:39"><block_content pos:start="3351:13" pos:end="3351:39">

            <expr_stmt pos:start="3351:13" pos:end="3351:39"><expr pos:start="3351:13" pos:end="3351:38"><call pos:start="3351:13" pos:end="3351:38"><name pos:start="3351:13" pos:end="3351:28">gen_op_set_cc_op</name><argument_list pos:start="3351:29" pos:end="3351:38">(<argument pos:start="3351:30" pos:end="3351:37"><expr pos:start="3351:30" pos:end="3351:37"><name pos:start="3351:30" pos:end="3351:37"><name pos:start="3351:30" pos:end="3351:30">s</name><operator pos:start="3351:31" pos:end="3351:32">-&gt;</operator><name pos:start="3351:33" pos:end="3351:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3353:9" pos:end="3353:21"><expr pos:start="3353:9" pos:end="3353:20"><call pos:start="3353:9" pos:end="3353:20"><name pos:start="3353:9" pos:end="3353:18">gen_op_clc</name><argument_list pos:start="3353:19" pos:end="3353:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3355:9" pos:end="3355:32"><expr pos:start="3355:9" pos:end="3355:31"><name pos:start="3355:9" pos:end="3355:16"><name pos:start="3355:9" pos:end="3355:9">s</name><operator pos:start="3355:10" pos:end="3355:11">-&gt;</operator><name pos:start="3355:12" pos:end="3355:16">cc_op</name></name> <operator pos:start="3355:18" pos:end="3355:18">=</operator> <name pos:start="3355:20" pos:end="3355:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3357:9" pos:end="3357:14">break;</break>

    <case pos:start="3359:5" pos:end="3359:14">case <expr pos:start="3359:10" pos:end="3359:13"><literal type="number" pos:start="3359:10" pos:end="3359:13">0xf9</literal></expr>:</case> <comment type="block" pos:start="3359:16" pos:end="3359:24">/* stc */</comment>

        <if_stmt pos:start="3361:9" pos:end="3363:39"><if pos:start="3361:9" pos:end="3363:39">if <condition pos:start="3361:12" pos:end="3361:38">(<expr pos:start="3361:13" pos:end="3361:37"><name pos:start="3361:13" pos:end="3361:20"><name pos:start="3361:13" pos:end="3361:13">s</name><operator pos:start="3361:14" pos:end="3361:15">-&gt;</operator><name pos:start="3361:16" pos:end="3361:20">cc_op</name></name> <operator pos:start="3361:22" pos:end="3361:23">!=</operator> <name pos:start="3361:25" pos:end="3361:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3363:13" pos:end="3363:39"><block_content pos:start="3363:13" pos:end="3363:39">

            <expr_stmt pos:start="3363:13" pos:end="3363:39"><expr pos:start="3363:13" pos:end="3363:38"><call pos:start="3363:13" pos:end="3363:38"><name pos:start="3363:13" pos:end="3363:28">gen_op_set_cc_op</name><argument_list pos:start="3363:29" pos:end="3363:38">(<argument pos:start="3363:30" pos:end="3363:37"><expr pos:start="3363:30" pos:end="3363:37"><name pos:start="3363:30" pos:end="3363:37"><name pos:start="3363:30" pos:end="3363:30">s</name><operator pos:start="3363:31" pos:end="3363:32">-&gt;</operator><name pos:start="3363:33" pos:end="3363:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3365:9" pos:end="3365:21"><expr pos:start="3365:9" pos:end="3365:20"><call pos:start="3365:9" pos:end="3365:20"><name pos:start="3365:9" pos:end="3365:18">gen_op_stc</name><argument_list pos:start="3365:19" pos:end="3365:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3367:9" pos:end="3367:32"><expr pos:start="3367:9" pos:end="3367:31"><name pos:start="3367:9" pos:end="3367:16"><name pos:start="3367:9" pos:end="3367:9">s</name><operator pos:start="3367:10" pos:end="3367:11">-&gt;</operator><name pos:start="3367:12" pos:end="3367:16">cc_op</name></name> <operator pos:start="3367:18" pos:end="3367:18">=</operator> <name pos:start="3367:20" pos:end="3367:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3369:9" pos:end="3369:14">break;</break>

    <case pos:start="3371:5" pos:end="3371:14">case <expr pos:start="3371:10" pos:end="3371:13"><literal type="number" pos:start="3371:10" pos:end="3371:13">0xfc</literal></expr>:</case> <comment type="block" pos:start="3371:16" pos:end="3371:24">/* cld */</comment>

        <expr_stmt pos:start="3373:9" pos:end="3373:21"><expr pos:start="3373:9" pos:end="3373:20"><call pos:start="3373:9" pos:end="3373:20"><name pos:start="3373:9" pos:end="3373:18">gen_op_cld</name><argument_list pos:start="3373:19" pos:end="3373:20">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3375:9" pos:end="3375:14">break;</break>

    <case pos:start="3377:5" pos:end="3377:14">case <expr pos:start="3377:10" pos:end="3377:13"><literal type="number" pos:start="3377:10" pos:end="3377:13">0xfd</literal></expr>:</case> <comment type="block" pos:start="3377:16" pos:end="3377:24">/* std */</comment>

        <expr_stmt pos:start="3379:9" pos:end="3379:21"><expr pos:start="3379:9" pos:end="3379:20"><call pos:start="3379:9" pos:end="3379:20"><name pos:start="3379:9" pos:end="3379:18">gen_op_std</name><argument_list pos:start="3379:19" pos:end="3379:20">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3381:9" pos:end="3381:14">break;</break>



        <comment type="block" format="doxygen" pos:start="3385:9" pos:end="3385:34">/************************/</comment>

        <comment type="block" pos:start="3387:9" pos:end="3387:28">/* bit operations */</comment>

    <case pos:start="3389:5" pos:end="3389:15">case <expr pos:start="3389:10" pos:end="3389:14"><literal type="number" pos:start="3389:10" pos:end="3389:14">0x1ba</literal></expr>:</case> <comment type="block" pos:start="3389:17" pos:end="3389:43">/* bt/bts/btr/btc Gv, im */</comment>

        <expr_stmt pos:start="3391:9" pos:end="3391:39"><expr pos:start="3391:9" pos:end="3391:38"><name pos:start="3391:9" pos:end="3391:10">ot</name> <operator pos:start="3391:12" pos:end="3391:12">=</operator> <ternary pos:start="3391:14" pos:end="3391:38"><condition pos:start="3391:14" pos:end="3391:20"><expr pos:start="3391:14" pos:end="3391:18"><name pos:start="3391:14" pos:end="3391:18">dflag</name></expr> ?</condition><then pos:start="3391:22" pos:end="3391:28"> <expr pos:start="3391:22" pos:end="3391:28"><name pos:start="3391:22" pos:end="3391:28">OT_LONG</name></expr> </then><else pos:start="3391:30" pos:end="3391:38">: <expr pos:start="3391:32" pos:end="3391:38"><name pos:start="3391:32" pos:end="3391:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3393:9" pos:end="3393:30"><expr pos:start="3393:9" pos:end="3393:29"><name pos:start="3393:9" pos:end="3393:13">modrm</name> <operator pos:start="3393:15" pos:end="3393:15">=</operator> <call pos:start="3393:17" pos:end="3393:29"><name pos:start="3393:17" pos:end="3393:20">ldub</name><argument_list pos:start="3393:21" pos:end="3393:29">(<argument pos:start="3393:22" pos:end="3393:28"><expr pos:start="3393:22" pos:end="3393:28"><name pos:start="3393:22" pos:end="3393:26"><name pos:start="3393:22" pos:end="3393:22">s</name><operator pos:start="3393:23" pos:end="3393:24">-&gt;</operator><name pos:start="3393:25" pos:end="3393:26">pc</name></name><operator pos:start="3393:27" pos:end="3393:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3395:9" pos:end="3395:30"><expr pos:start="3395:9" pos:end="3395:29"><name pos:start="3395:9" pos:end="3395:10">op</name> <operator pos:start="3395:12" pos:end="3395:12">=</operator> <operator pos:start="3395:14" pos:end="3395:14">(</operator><name pos:start="3395:15" pos:end="3395:19">modrm</name> <operator pos:start="3395:21" pos:end="3395:22">&gt;&gt;</operator> <literal type="number" pos:start="3395:24" pos:end="3395:24">3</literal><operator pos:start="3395:25" pos:end="3395:25">)</operator> <operator pos:start="3395:27" pos:end="3395:27">&amp;</operator> <literal type="number" pos:start="3395:29" pos:end="3395:29">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3397:9" pos:end="3397:31"><expr pos:start="3397:9" pos:end="3397:30"><name pos:start="3397:9" pos:end="3397:11">mod</name> <operator pos:start="3397:13" pos:end="3397:13">=</operator> <operator pos:start="3397:15" pos:end="3397:15">(</operator><name pos:start="3397:16" pos:end="3397:20">modrm</name> <operator pos:start="3397:22" pos:end="3397:23">&gt;&gt;</operator> <literal type="number" pos:start="3397:25" pos:end="3397:25">6</literal><operator pos:start="3397:26" pos:end="3397:26">)</operator> <operator pos:start="3397:28" pos:end="3397:28">&amp;</operator> <literal type="number" pos:start="3397:30" pos:end="3397:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3399:9" pos:end="3399:23"><expr pos:start="3399:9" pos:end="3399:22"><name pos:start="3399:9" pos:end="3399:10">rm</name> <operator pos:start="3399:12" pos:end="3399:12">=</operator> <name pos:start="3399:14" pos:end="3399:18">modrm</name> <operator pos:start="3399:20" pos:end="3399:20">&amp;</operator> <literal type="number" pos:start="3399:22" pos:end="3399:22">7</literal></expr>;</expr_stmt>

        <if_stmt pos:start="3401:9" pos:end="3411:9"><if pos:start="3401:9" pos:end="3407:9">if <condition pos:start="3401:12" pos:end="3401:21">(<expr pos:start="3401:13" pos:end="3401:20"><name pos:start="3401:13" pos:end="3401:15">mod</name> <operator pos:start="3401:17" pos:end="3401:18">!=</operator> <literal type="number" pos:start="3401:20" pos:end="3401:20">3</literal></expr>)</condition> <block pos:start="3401:23" pos:end="3407:9">{<block_content pos:start="3403:13" pos:end="3405:34">

            <expr_stmt pos:start="3403:13" pos:end="3403:61"><expr pos:start="3403:13" pos:end="3403:60"><call pos:start="3403:13" pos:end="3403:60"><name pos:start="3403:13" pos:end="3403:25">gen_lea_modrm</name><argument_list pos:start="3403:26" pos:end="3403:60">(<argument pos:start="3403:27" pos:end="3403:27"><expr pos:start="3403:27" pos:end="3403:27"><name pos:start="3403:27" pos:end="3403:27">s</name></expr></argument>, <argument pos:start="3403:30" pos:end="3403:34"><expr pos:start="3403:30" pos:end="3403:34"><name pos:start="3403:30" pos:end="3403:34">modrm</name></expr></argument>, <argument pos:start="3403:37" pos:end="3403:45"><expr pos:start="3403:37" pos:end="3403:45"><operator pos:start="3403:37" pos:end="3403:37">&amp;</operator><name pos:start="3403:38" pos:end="3403:45">reg_addr</name></expr></argument>, <argument pos:start="3403:48" pos:end="3403:59"><expr pos:start="3403:48" pos:end="3403:59"><operator pos:start="3403:48" pos:end="3403:48">&amp;</operator><name pos:start="3403:49" pos:end="3403:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="3405:13" pos:end="3405:34"><expr pos:start="3405:13" pos:end="3405:33"><name pos:start="3405:13" pos:end="3405:31"><name pos:start="3405:13" pos:end="3405:27">gen_op_ld_T0_A0</name><index pos:start="3405:28" pos:end="3405:31">[<expr pos:start="3405:29" pos:end="3405:30"><name pos:start="3405:29" pos:end="3405:30">ot</name></expr>]</index></name><operator pos:start="3405:32" pos:end="3405:32">(</operator><operator pos:start="3405:33" pos:end="3405:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3407:11" pos:end="3411:9">else <block pos:start="3407:16" pos:end="3411:9">{<block_content pos:start="3409:13" pos:end="3409:43">

            <expr_stmt pos:start="3409:13" pos:end="3409:43"><expr pos:start="3409:13" pos:end="3409:42"><name pos:start="3409:13" pos:end="3409:40"><name pos:start="3409:13" pos:end="3409:29">gen_op_mov_TN_reg</name><index pos:start="3409:30" pos:end="3409:33">[<expr pos:start="3409:31" pos:end="3409:32"><name pos:start="3409:31" pos:end="3409:32">ot</name></expr>]</index><index pos:start="3409:34" pos:end="3409:36">[<expr pos:start="3409:35" pos:end="3409:35"><literal type="number" pos:start="3409:35" pos:end="3409:35">0</literal></expr>]</index><index pos:start="3409:37" pos:end="3409:40">[<expr pos:start="3409:38" pos:end="3409:39"><name pos:start="3409:38" pos:end="3409:39">rm</name></expr>]</index></name><operator pos:start="3409:41" pos:end="3409:41">(</operator><operator pos:start="3409:42" pos:end="3409:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <comment type="block" pos:start="3413:9" pos:end="3413:24">/* load shift */</comment>

        <expr_stmt pos:start="3415:9" pos:end="3415:28"><expr pos:start="3415:9" pos:end="3415:27"><name pos:start="3415:9" pos:end="3415:11">val</name> <operator pos:start="3415:13" pos:end="3415:13">=</operator> <call pos:start="3415:15" pos:end="3415:27"><name pos:start="3415:15" pos:end="3415:18">ldub</name><argument_list pos:start="3415:19" pos:end="3415:27">(<argument pos:start="3415:20" pos:end="3415:26"><expr pos:start="3415:20" pos:end="3415:26"><name pos:start="3415:20" pos:end="3415:24"><name pos:start="3415:20" pos:end="3415:20">s</name><operator pos:start="3415:21" pos:end="3415:22">-&gt;</operator><name pos:start="3415:23" pos:end="3415:24">pc</name></name><operator pos:start="3415:25" pos:end="3415:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3417:9" pos:end="3417:31"><expr pos:start="3417:9" pos:end="3417:30"><call pos:start="3417:9" pos:end="3417:30"><name pos:start="3417:9" pos:end="3417:25">gen_op_movl_T1_im</name><argument_list pos:start="3417:26" pos:end="3417:30">(<argument pos:start="3417:27" pos:end="3417:29"><expr pos:start="3417:27" pos:end="3417:29"><name pos:start="3417:27" pos:end="3417:29">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="3419:9" pos:end="3421:28"><if pos:start="3419:9" pos:end="3421:28">if <condition pos:start="3419:12" pos:end="3419:19">(<expr pos:start="3419:13" pos:end="3419:18"><name pos:start="3419:13" pos:end="3419:14">op</name> <operator pos:start="3419:16" pos:end="3419:16">&lt;</operator> <literal type="number" pos:start="3419:18" pos:end="3419:18">4</literal></expr>)</condition><block type="pseudo" pos:start="3421:13" pos:end="3421:28"><block_content pos:start="3421:13" pos:end="3421:28">

            <goto pos:start="3421:13" pos:end="3421:28">goto <name pos:start="3421:18" pos:end="3421:27">illegal_op</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3423:9" pos:end="3423:16"><expr pos:start="3423:9" pos:end="3423:15"><name pos:start="3423:9" pos:end="3423:10">op</name> <operator pos:start="3423:12" pos:end="3423:13">-=</operator> <literal type="number" pos:start="3423:15" pos:end="3423:15">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3425:9" pos:end="3425:48"><expr pos:start="3425:9" pos:end="3425:47"><name pos:start="3425:9" pos:end="3425:45"><name pos:start="3425:9" pos:end="3425:27">gen_op_btx_T0_T1_cc</name><index pos:start="3425:28" pos:end="3425:41">[<expr pos:start="3425:29" pos:end="3425:40"><name pos:start="3425:29" pos:end="3425:30">ot</name> <operator pos:start="3425:32" pos:end="3425:32">-</operator> <name pos:start="3425:34" pos:end="3425:40">OT_WORD</name></expr>]</index><index pos:start="3425:42" pos:end="3425:45">[<expr pos:start="3425:43" pos:end="3425:44"><name pos:start="3425:43" pos:end="3425:44">op</name></expr>]</index></name><operator pos:start="3425:46" pos:end="3425:46">(</operator><operator pos:start="3425:47" pos:end="3425:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3427:9" pos:end="3427:35"><expr pos:start="3427:9" pos:end="3427:34"><name pos:start="3427:9" pos:end="3427:16"><name pos:start="3427:9" pos:end="3427:9">s</name><operator pos:start="3427:10" pos:end="3427:11">-&gt;</operator><name pos:start="3427:12" pos:end="3427:16">cc_op</name></name> <operator pos:start="3427:18" pos:end="3427:18">=</operator> <name pos:start="3427:20" pos:end="3427:29">CC_OP_SARB</name> <operator pos:start="3427:31" pos:end="3427:31">+</operator> <name pos:start="3427:33" pos:end="3427:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="3429:9" pos:end="3439:9"><if pos:start="3429:9" pos:end="3439:9">if <condition pos:start="3429:12" pos:end="3429:20">(<expr pos:start="3429:13" pos:end="3429:19"><name pos:start="3429:13" pos:end="3429:14">op</name> <operator pos:start="3429:16" pos:end="3429:17">!=</operator> <literal type="number" pos:start="3429:19" pos:end="3429:19">0</literal></expr>)</condition> <block pos:start="3429:22" pos:end="3439:9">{<block_content pos:start="3431:13" pos:end="3437:44">

            <if_stmt pos:start="3431:13" pos:end="3437:44"><if pos:start="3431:13" pos:end="3433:38">if <condition pos:start="3431:16" pos:end="3431:25">(<expr pos:start="3431:17" pos:end="3431:24"><name pos:start="3431:17" pos:end="3431:19">mod</name> <operator pos:start="3431:21" pos:end="3431:22">!=</operator> <literal type="number" pos:start="3431:24" pos:end="3431:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3433:17" pos:end="3433:38"><block_content pos:start="3433:17" pos:end="3433:38">

                <expr_stmt pos:start="3433:17" pos:end="3433:38"><expr pos:start="3433:17" pos:end="3433:37"><name pos:start="3433:17" pos:end="3433:35"><name pos:start="3433:17" pos:end="3433:31">gen_op_st_T0_A0</name><index pos:start="3433:32" pos:end="3433:35">[<expr pos:start="3433:33" pos:end="3433:34"><name pos:start="3433:33" pos:end="3433:34">ot</name></expr>]</index></name><operator pos:start="3433:36" pos:end="3433:36">(</operator><operator pos:start="3433:37" pos:end="3433:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3435:13" pos:end="3437:44">else<block type="pseudo" pos:start="3437:17" pos:end="3437:44"><block_content pos:start="3437:17" pos:end="3437:44">

                <expr_stmt pos:start="3437:17" pos:end="3437:44"><expr pos:start="3437:17" pos:end="3437:43"><name pos:start="3437:17" pos:end="3437:41"><name pos:start="3437:17" pos:end="3437:33">gen_op_mov_reg_T0</name><index pos:start="3437:34" pos:end="3437:37">[<expr pos:start="3437:35" pos:end="3437:36"><name pos:start="3437:35" pos:end="3437:36">ot</name></expr>]</index><index pos:start="3437:38" pos:end="3437:41">[<expr pos:start="3437:39" pos:end="3437:40"><name pos:start="3437:39" pos:end="3437:40">rm</name></expr>]</index></name><operator pos:start="3437:42" pos:end="3437:42">(</operator><operator pos:start="3437:43" pos:end="3437:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3441:9" pos:end="3441:14">break;</break>

    <case pos:start="3443:5" pos:end="3443:15">case <expr pos:start="3443:10" pos:end="3443:14"><literal type="number" pos:start="3443:10" pos:end="3443:14">0x1a3</literal></expr>:</case> <comment type="block" pos:start="3443:17" pos:end="3443:31">/* bt Gv, Ev */</comment>

        <expr_stmt pos:start="3445:9" pos:end="3445:15"><expr pos:start="3445:9" pos:end="3445:14"><name pos:start="3445:9" pos:end="3445:10">op</name> <operator pos:start="3445:12" pos:end="3445:12">=</operator> <literal type="number" pos:start="3445:14" pos:end="3445:14">0</literal></expr>;</expr_stmt>

        <goto pos:start="3447:9" pos:end="3447:20">goto <name pos:start="3447:14" pos:end="3447:19">do_btx</name>;</goto>

    <case pos:start="3449:5" pos:end="3449:15">case <expr pos:start="3449:10" pos:end="3449:14"><literal type="number" pos:start="3449:10" pos:end="3449:14">0x1ab</literal></expr>:</case> <comment type="block" pos:start="3449:17" pos:end="3449:25">/* bts */</comment>

        <expr_stmt pos:start="3451:9" pos:end="3451:15"><expr pos:start="3451:9" pos:end="3451:14"><name pos:start="3451:9" pos:end="3451:10">op</name> <operator pos:start="3451:12" pos:end="3451:12">=</operator> <literal type="number" pos:start="3451:14" pos:end="3451:14">1</literal></expr>;</expr_stmt>

        <goto pos:start="3453:9" pos:end="3453:20">goto <name pos:start="3453:14" pos:end="3453:19">do_btx</name>;</goto>

    <case pos:start="3455:5" pos:end="3455:15">case <expr pos:start="3455:10" pos:end="3455:14"><literal type="number" pos:start="3455:10" pos:end="3455:14">0x1b3</literal></expr>:</case> <comment type="block" pos:start="3455:17" pos:end="3455:25">/* btr */</comment>

        <expr_stmt pos:start="3457:9" pos:end="3457:15"><expr pos:start="3457:9" pos:end="3457:14"><name pos:start="3457:9" pos:end="3457:10">op</name> <operator pos:start="3457:12" pos:end="3457:12">=</operator> <literal type="number" pos:start="3457:14" pos:end="3457:14">2</literal></expr>;</expr_stmt>

        <goto pos:start="3459:9" pos:end="3459:20">goto <name pos:start="3459:14" pos:end="3459:19">do_btx</name>;</goto>

    <case pos:start="3461:5" pos:end="3461:15">case <expr pos:start="3461:10" pos:end="3461:14"><literal type="number" pos:start="3461:10" pos:end="3461:14">0x1bb</literal></expr>:</case> <comment type="block" pos:start="3461:17" pos:end="3461:25">/* btc */</comment>

        <expr_stmt pos:start="3463:9" pos:end="3463:15"><expr pos:start="3463:9" pos:end="3463:14"><name pos:start="3463:9" pos:end="3463:10">op</name> <operator pos:start="3463:12" pos:end="3463:12">=</operator> <literal type="number" pos:start="3463:14" pos:end="3463:14">3</literal></expr>;</expr_stmt>

    <label pos:start="3465:5" pos:end="3465:11"><name pos:start="3465:5" pos:end="3465:10">do_btx</name>:</label>

        <expr_stmt pos:start="3467:9" pos:end="3467:39"><expr pos:start="3467:9" pos:end="3467:38"><name pos:start="3467:9" pos:end="3467:10">ot</name> <operator pos:start="3467:12" pos:end="3467:12">=</operator> <ternary pos:start="3467:14" pos:end="3467:38"><condition pos:start="3467:14" pos:end="3467:20"><expr pos:start="3467:14" pos:end="3467:18"><name pos:start="3467:14" pos:end="3467:18">dflag</name></expr> ?</condition><then pos:start="3467:22" pos:end="3467:28"> <expr pos:start="3467:22" pos:end="3467:28"><name pos:start="3467:22" pos:end="3467:28">OT_LONG</name></expr> </then><else pos:start="3467:30" pos:end="3467:38">: <expr pos:start="3467:32" pos:end="3467:38"><name pos:start="3467:32" pos:end="3467:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3469:9" pos:end="3469:30"><expr pos:start="3469:9" pos:end="3469:29"><name pos:start="3469:9" pos:end="3469:13">modrm</name> <operator pos:start="3469:15" pos:end="3469:15">=</operator> <call pos:start="3469:17" pos:end="3469:29"><name pos:start="3469:17" pos:end="3469:20">ldub</name><argument_list pos:start="3469:21" pos:end="3469:29">(<argument pos:start="3469:22" pos:end="3469:28"><expr pos:start="3469:22" pos:end="3469:28"><name pos:start="3469:22" pos:end="3469:26"><name pos:start="3469:22" pos:end="3469:22">s</name><operator pos:start="3469:23" pos:end="3469:24">-&gt;</operator><name pos:start="3469:25" pos:end="3469:26">pc</name></name><operator pos:start="3469:27" pos:end="3469:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3471:9" pos:end="3471:31"><expr pos:start="3471:9" pos:end="3471:30"><name pos:start="3471:9" pos:end="3471:11">reg</name> <operator pos:start="3471:13" pos:end="3471:13">=</operator> <operator pos:start="3471:15" pos:end="3471:15">(</operator><name pos:start="3471:16" pos:end="3471:20">modrm</name> <operator pos:start="3471:22" pos:end="3471:23">&gt;&gt;</operator> <literal type="number" pos:start="3471:25" pos:end="3471:25">3</literal><operator pos:start="3471:26" pos:end="3471:26">)</operator> <operator pos:start="3471:28" pos:end="3471:28">&amp;</operator> <literal type="number" pos:start="3471:30" pos:end="3471:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3473:9" pos:end="3473:31"><expr pos:start="3473:9" pos:end="3473:30"><name pos:start="3473:9" pos:end="3473:11">mod</name> <operator pos:start="3473:13" pos:end="3473:13">=</operator> <operator pos:start="3473:15" pos:end="3473:15">(</operator><name pos:start="3473:16" pos:end="3473:20">modrm</name> <operator pos:start="3473:22" pos:end="3473:23">&gt;&gt;</operator> <literal type="number" pos:start="3473:25" pos:end="3473:25">6</literal><operator pos:start="3473:26" pos:end="3473:26">)</operator> <operator pos:start="3473:28" pos:end="3473:28">&amp;</operator> <literal type="number" pos:start="3473:30" pos:end="3473:30">3</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3475:9" pos:end="3475:23"><expr pos:start="3475:9" pos:end="3475:22"><name pos:start="3475:9" pos:end="3475:10">rm</name> <operator pos:start="3475:12" pos:end="3475:12">=</operator> <name pos:start="3475:14" pos:end="3475:18">modrm</name> <operator pos:start="3475:20" pos:end="3475:20">&amp;</operator> <literal type="number" pos:start="3475:22" pos:end="3475:22">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3477:9" pos:end="3477:45"><expr pos:start="3477:9" pos:end="3477:44"><name pos:start="3477:9" pos:end="3477:42"><name pos:start="3477:9" pos:end="3477:25">gen_op_mov_TN_reg</name><index pos:start="3477:26" pos:end="3477:34">[<expr pos:start="3477:27" pos:end="3477:33"><name pos:start="3477:27" pos:end="3477:33">OT_LONG</name></expr>]</index><index pos:start="3477:35" pos:end="3477:37">[<expr pos:start="3477:36" pos:end="3477:36"><literal type="number" pos:start="3477:36" pos:end="3477:36">1</literal></expr>]</index><index pos:start="3477:38" pos:end="3477:42">[<expr pos:start="3477:39" pos:end="3477:41"><name pos:start="3477:39" pos:end="3477:41">reg</name></expr>]</index></name><operator pos:start="3477:43" pos:end="3477:43">(</operator><operator pos:start="3477:44" pos:end="3477:44">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="3479:9" pos:end="3499:9"><if pos:start="3479:9" pos:end="3495:9">if <condition pos:start="3479:12" pos:end="3479:21">(<expr pos:start="3479:13" pos:end="3479:20"><name pos:start="3479:13" pos:end="3479:15">mod</name> <operator pos:start="3479:17" pos:end="3479:18">!=</operator> <literal type="number" pos:start="3479:20" pos:end="3479:20">3</literal></expr>)</condition> <block pos:start="3479:23" pos:end="3495:9">{<block_content pos:start="3481:13" pos:end="3493:34">

            <expr_stmt pos:start="3481:13" pos:end="3481:61"><expr pos:start="3481:13" pos:end="3481:60"><call pos:start="3481:13" pos:end="3481:60"><name pos:start="3481:13" pos:end="3481:25">gen_lea_modrm</name><argument_list pos:start="3481:26" pos:end="3481:60">(<argument pos:start="3481:27" pos:end="3481:27"><expr pos:start="3481:27" pos:end="3481:27"><name pos:start="3481:27" pos:end="3481:27">s</name></expr></argument>, <argument pos:start="3481:30" pos:end="3481:34"><expr pos:start="3481:30" pos:end="3481:34"><name pos:start="3481:30" pos:end="3481:34">modrm</name></expr></argument>, <argument pos:start="3481:37" pos:end="3481:45"><expr pos:start="3481:37" pos:end="3481:45"><operator pos:start="3481:37" pos:end="3481:37">&amp;</operator><name pos:start="3481:38" pos:end="3481:45">reg_addr</name></expr></argument>, <argument pos:start="3481:48" pos:end="3481:59"><expr pos:start="3481:48" pos:end="3481:59"><operator pos:start="3481:48" pos:end="3481:48">&amp;</operator><name pos:start="3481:49" pos:end="3481:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="3483:13" pos:end="3483:62">/* specific case: we need to add a displacement */</comment>

            <if_stmt pos:start="3485:13" pos:end="3491:40"><if pos:start="3485:13" pos:end="3487:40">if <condition pos:start="3485:16" pos:end="3485:30">(<expr pos:start="3485:17" pos:end="3485:29"><name pos:start="3485:17" pos:end="3485:18">ot</name> <operator pos:start="3485:20" pos:end="3485:21">==</operator> <name pos:start="3485:23" pos:end="3485:29">OT_WORD</name></expr>)</condition><block type="pseudo" pos:start="3487:17" pos:end="3487:40"><block_content pos:start="3487:17" pos:end="3487:40">

                <expr_stmt pos:start="3487:17" pos:end="3487:40"><expr pos:start="3487:17" pos:end="3487:39"><call pos:start="3487:17" pos:end="3487:39"><name pos:start="3487:17" pos:end="3487:37">gen_op_add_bitw_A0_T1</name><argument_list pos:start="3487:38" pos:end="3487:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3489:13" pos:end="3491:40">else<block type="pseudo" pos:start="3491:17" pos:end="3491:40"><block_content pos:start="3491:17" pos:end="3491:40">

                <expr_stmt pos:start="3491:17" pos:end="3491:40"><expr pos:start="3491:17" pos:end="3491:39"><call pos:start="3491:17" pos:end="3491:39"><name pos:start="3491:17" pos:end="3491:37">gen_op_add_bitl_A0_T1</name><argument_list pos:start="3491:38" pos:end="3491:39">()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="3493:13" pos:end="3493:34"><expr pos:start="3493:13" pos:end="3493:33"><name pos:start="3493:13" pos:end="3493:31"><name pos:start="3493:13" pos:end="3493:27">gen_op_ld_T0_A0</name><index pos:start="3493:28" pos:end="3493:31">[<expr pos:start="3493:29" pos:end="3493:30"><name pos:start="3493:29" pos:end="3493:30">ot</name></expr>]</index></name><operator pos:start="3493:32" pos:end="3493:32">(</operator><operator pos:start="3493:33" pos:end="3493:33">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="3495:11" pos:end="3499:9">else <block pos:start="3495:16" pos:end="3499:9">{<block_content pos:start="3497:13" pos:end="3497:43">

            <expr_stmt pos:start="3497:13" pos:end="3497:43"><expr pos:start="3497:13" pos:end="3497:42"><name pos:start="3497:13" pos:end="3497:40"><name pos:start="3497:13" pos:end="3497:29">gen_op_mov_TN_reg</name><index pos:start="3497:30" pos:end="3497:33">[<expr pos:start="3497:31" pos:end="3497:32"><name pos:start="3497:31" pos:end="3497:32">ot</name></expr>]</index><index pos:start="3497:34" pos:end="3497:36">[<expr pos:start="3497:35" pos:end="3497:35"><literal type="number" pos:start="3497:35" pos:end="3497:35">0</literal></expr>]</index><index pos:start="3497:37" pos:end="3497:40">[<expr pos:start="3497:38" pos:end="3497:39"><name pos:start="3497:38" pos:end="3497:39">rm</name></expr>]</index></name><operator pos:start="3497:41" pos:end="3497:41">(</operator><operator pos:start="3497:42" pos:end="3497:42">)</operator></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="3501:9" pos:end="3501:48"><expr pos:start="3501:9" pos:end="3501:47"><name pos:start="3501:9" pos:end="3501:45"><name pos:start="3501:9" pos:end="3501:27">gen_op_btx_T0_T1_cc</name><index pos:start="3501:28" pos:end="3501:41">[<expr pos:start="3501:29" pos:end="3501:40"><name pos:start="3501:29" pos:end="3501:30">ot</name> <operator pos:start="3501:32" pos:end="3501:32">-</operator> <name pos:start="3501:34" pos:end="3501:40">OT_WORD</name></expr>]</index><index pos:start="3501:42" pos:end="3501:45">[<expr pos:start="3501:43" pos:end="3501:44"><name pos:start="3501:43" pos:end="3501:44">op</name></expr>]</index></name><operator pos:start="3501:46" pos:end="3501:46">(</operator><operator pos:start="3501:47" pos:end="3501:47">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3503:9" pos:end="3503:35"><expr pos:start="3503:9" pos:end="3503:34"><name pos:start="3503:9" pos:end="3503:16"><name pos:start="3503:9" pos:end="3503:9">s</name><operator pos:start="3503:10" pos:end="3503:11">-&gt;</operator><name pos:start="3503:12" pos:end="3503:16">cc_op</name></name> <operator pos:start="3503:18" pos:end="3503:18">=</operator> <name pos:start="3503:20" pos:end="3503:29">CC_OP_SARB</name> <operator pos:start="3503:31" pos:end="3503:31">+</operator> <name pos:start="3503:33" pos:end="3503:34">ot</name></expr>;</expr_stmt>

        <if_stmt pos:start="3505:9" pos:end="3515:9"><if pos:start="3505:9" pos:end="3515:9">if <condition pos:start="3505:12" pos:end="3505:20">(<expr pos:start="3505:13" pos:end="3505:19"><name pos:start="3505:13" pos:end="3505:14">op</name> <operator pos:start="3505:16" pos:end="3505:17">!=</operator> <literal type="number" pos:start="3505:19" pos:end="3505:19">0</literal></expr>)</condition> <block pos:start="3505:22" pos:end="3515:9">{<block_content pos:start="3507:13" pos:end="3513:44">

            <if_stmt pos:start="3507:13" pos:end="3513:44"><if pos:start="3507:13" pos:end="3509:38">if <condition pos:start="3507:16" pos:end="3507:25">(<expr pos:start="3507:17" pos:end="3507:24"><name pos:start="3507:17" pos:end="3507:19">mod</name> <operator pos:start="3507:21" pos:end="3507:22">!=</operator> <literal type="number" pos:start="3507:24" pos:end="3507:24">3</literal></expr>)</condition><block type="pseudo" pos:start="3509:17" pos:end="3509:38"><block_content pos:start="3509:17" pos:end="3509:38">

                <expr_stmt pos:start="3509:17" pos:end="3509:38"><expr pos:start="3509:17" pos:end="3509:37"><name pos:start="3509:17" pos:end="3509:35"><name pos:start="3509:17" pos:end="3509:31">gen_op_st_T0_A0</name><index pos:start="3509:32" pos:end="3509:35">[<expr pos:start="3509:33" pos:end="3509:34"><name pos:start="3509:33" pos:end="3509:34">ot</name></expr>]</index></name><operator pos:start="3509:36" pos:end="3509:36">(</operator><operator pos:start="3509:37" pos:end="3509:37">)</operator></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="3511:13" pos:end="3513:44">else<block type="pseudo" pos:start="3513:17" pos:end="3513:44"><block_content pos:start="3513:17" pos:end="3513:44">

                <expr_stmt pos:start="3513:17" pos:end="3513:44"><expr pos:start="3513:17" pos:end="3513:43"><name pos:start="3513:17" pos:end="3513:41"><name pos:start="3513:17" pos:end="3513:33">gen_op_mov_reg_T0</name><index pos:start="3513:34" pos:end="3513:37">[<expr pos:start="3513:35" pos:end="3513:36"><name pos:start="3513:35" pos:end="3513:36">ot</name></expr>]</index><index pos:start="3513:38" pos:end="3513:41">[<expr pos:start="3513:39" pos:end="3513:40"><name pos:start="3513:39" pos:end="3513:40">rm</name></expr>]</index></name><operator pos:start="3513:42" pos:end="3513:42">(</operator><operator pos:start="3513:43" pos:end="3513:43">)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="3517:9" pos:end="3517:14">break;</break>

    <case pos:start="3519:5" pos:end="3519:15">case <expr pos:start="3519:10" pos:end="3519:14"><literal type="number" pos:start="3519:10" pos:end="3519:14">0x1bc</literal></expr>:</case> <comment type="block" pos:start="3519:17" pos:end="3519:25">/* bsf */</comment>

    <case pos:start="3521:5" pos:end="3521:15">case <expr pos:start="3521:10" pos:end="3521:14"><literal type="number" pos:start="3521:10" pos:end="3521:14">0x1bd</literal></expr>:</case> <comment type="block" pos:start="3521:17" pos:end="3521:25">/* bsr */</comment>

        <expr_stmt pos:start="3523:9" pos:end="3523:39"><expr pos:start="3523:9" pos:end="3523:38"><name pos:start="3523:9" pos:end="3523:10">ot</name> <operator pos:start="3523:12" pos:end="3523:12">=</operator> <ternary pos:start="3523:14" pos:end="3523:38"><condition pos:start="3523:14" pos:end="3523:20"><expr pos:start="3523:14" pos:end="3523:18"><name pos:start="3523:14" pos:end="3523:18">dflag</name></expr> ?</condition><then pos:start="3523:22" pos:end="3523:28"> <expr pos:start="3523:22" pos:end="3523:28"><name pos:start="3523:22" pos:end="3523:28">OT_LONG</name></expr> </then><else pos:start="3523:30" pos:end="3523:38">: <expr pos:start="3523:32" pos:end="3523:38"><name pos:start="3523:32" pos:end="3523:38">OT_WORD</name></expr></else></ternary></expr>;</expr_stmt>

        <expr_stmt pos:start="3525:9" pos:end="3525:30"><expr pos:start="3525:9" pos:end="3525:29"><name pos:start="3525:9" pos:end="3525:13">modrm</name> <operator pos:start="3525:15" pos:end="3525:15">=</operator> <call pos:start="3525:17" pos:end="3525:29"><name pos:start="3525:17" pos:end="3525:20">ldub</name><argument_list pos:start="3525:21" pos:end="3525:29">(<argument pos:start="3525:22" pos:end="3525:28"><expr pos:start="3525:22" pos:end="3525:28"><name pos:start="3525:22" pos:end="3525:26"><name pos:start="3525:22" pos:end="3525:22">s</name><operator pos:start="3525:23" pos:end="3525:24">-&gt;</operator><name pos:start="3525:25" pos:end="3525:26">pc</name></name><operator pos:start="3525:27" pos:end="3525:28">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3527:9" pos:end="3527:31"><expr pos:start="3527:9" pos:end="3527:30"><name pos:start="3527:9" pos:end="3527:11">reg</name> <operator pos:start="3527:13" pos:end="3527:13">=</operator> <operator pos:start="3527:15" pos:end="3527:15">(</operator><name pos:start="3527:16" pos:end="3527:20">modrm</name> <operator pos:start="3527:22" pos:end="3527:23">&gt;&gt;</operator> <literal type="number" pos:start="3527:25" pos:end="3527:25">3</literal><operator pos:start="3527:26" pos:end="3527:26">)</operator> <operator pos:start="3527:28" pos:end="3527:28">&amp;</operator> <literal type="number" pos:start="3527:30" pos:end="3527:30">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3529:9" pos:end="3529:49"><expr pos:start="3529:9" pos:end="3529:48"><call pos:start="3529:9" pos:end="3529:48"><name pos:start="3529:9" pos:end="3529:22">gen_ldst_modrm</name><argument_list pos:start="3529:23" pos:end="3529:48">(<argument pos:start="3529:24" pos:end="3529:24"><expr pos:start="3529:24" pos:end="3529:24"><name pos:start="3529:24" pos:end="3529:24">s</name></expr></argument>, <argument pos:start="3529:27" pos:end="3529:31"><expr pos:start="3529:27" pos:end="3529:31"><name pos:start="3529:27" pos:end="3529:31">modrm</name></expr></argument>, <argument pos:start="3529:34" pos:end="3529:35"><expr pos:start="3529:34" pos:end="3529:35"><name pos:start="3529:34" pos:end="3529:35">ot</name></expr></argument>, <argument pos:start="3529:38" pos:end="3529:44"><expr pos:start="3529:38" pos:end="3529:44"><name pos:start="3529:38" pos:end="3529:44">OR_TMP0</name></expr></argument>, <argument pos:start="3529:47" pos:end="3529:47"><expr pos:start="3529:47" pos:end="3529:47"><literal type="number" pos:start="3529:47" pos:end="3529:47">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3531:9" pos:end="3531:48"><expr pos:start="3531:9" pos:end="3531:47"><name pos:start="3531:9" pos:end="3531:45"><name pos:start="3531:9" pos:end="3531:24">gen_op_bsx_T0_cc</name><index pos:start="3531:25" pos:end="3531:38">[<expr pos:start="3531:26" pos:end="3531:37"><name pos:start="3531:26" pos:end="3531:27">ot</name> <operator pos:start="3531:29" pos:end="3531:29">-</operator> <name pos:start="3531:31" pos:end="3531:37">OT_WORD</name></expr>]</index><index pos:start="3531:39" pos:end="3531:45">[<expr pos:start="3531:40" pos:end="3531:44"><name pos:start="3531:40" pos:end="3531:40">b</name> <operator pos:start="3531:42" pos:end="3531:42">&amp;</operator> <literal type="number" pos:start="3531:44" pos:end="3531:44">1</literal></expr>]</index></name><operator pos:start="3531:46" pos:end="3531:46">(</operator><operator pos:start="3531:47" pos:end="3531:47">)</operator></expr>;</expr_stmt>

        <comment type="block" pos:start="3533:9" pos:end="3535:34">/* NOTE: we always write back the result. Intel doc says it is

           undefined if T0 == 0 */</comment>

        <expr_stmt pos:start="3537:9" pos:end="3537:37"><expr pos:start="3537:9" pos:end="3537:36"><name pos:start="3537:9" pos:end="3537:34"><name pos:start="3537:9" pos:end="3537:25">gen_op_mov_reg_T0</name><index pos:start="3537:26" pos:end="3537:29">[<expr pos:start="3537:27" pos:end="3537:28"><name pos:start="3537:27" pos:end="3537:28">ot</name></expr>]</index><index pos:start="3537:30" pos:end="3537:34">[<expr pos:start="3537:31" pos:end="3537:33"><name pos:start="3537:31" pos:end="3537:33">reg</name></expr>]</index></name><operator pos:start="3537:35" pos:end="3537:35">(</operator><operator pos:start="3537:36" pos:end="3537:36">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3539:9" pos:end="3539:37"><expr pos:start="3539:9" pos:end="3539:36"><name pos:start="3539:9" pos:end="3539:16"><name pos:start="3539:9" pos:end="3539:9">s</name><operator pos:start="3539:10" pos:end="3539:11">-&gt;</operator><name pos:start="3539:12" pos:end="3539:16">cc_op</name></name> <operator pos:start="3539:18" pos:end="3539:18">=</operator> <name pos:start="3539:20" pos:end="3539:31">CC_OP_LOGICB</name> <operator pos:start="3539:33" pos:end="3539:33">+</operator> <name pos:start="3539:35" pos:end="3539:36">ot</name></expr>;</expr_stmt>

        <break pos:start="3541:9" pos:end="3541:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3543:9" pos:end="3543:34">/************************/</comment>

        <comment type="block" pos:start="3545:9" pos:end="3545:17">/* bcd */</comment>

    <case pos:start="3547:5" pos:end="3547:14">case <expr pos:start="3547:10" pos:end="3547:13"><literal type="number" pos:start="3547:10" pos:end="3547:13">0x27</literal></expr>:</case> <comment type="block" pos:start="3547:16" pos:end="3547:24">/* daa */</comment>

        <if_stmt pos:start="3549:9" pos:end="3551:39"><if pos:start="3549:9" pos:end="3551:39">if <condition pos:start="3549:12" pos:end="3549:38">(<expr pos:start="3549:13" pos:end="3549:37"><name pos:start="3549:13" pos:end="3549:20"><name pos:start="3549:13" pos:end="3549:13">s</name><operator pos:start="3549:14" pos:end="3549:15">-&gt;</operator><name pos:start="3549:16" pos:end="3549:20">cc_op</name></name> <operator pos:start="3549:22" pos:end="3549:23">!=</operator> <name pos:start="3549:25" pos:end="3549:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3551:13" pos:end="3551:39"><block_content pos:start="3551:13" pos:end="3551:39">

            <expr_stmt pos:start="3551:13" pos:end="3551:39"><expr pos:start="3551:13" pos:end="3551:38"><call pos:start="3551:13" pos:end="3551:38"><name pos:start="3551:13" pos:end="3551:28">gen_op_set_cc_op</name><argument_list pos:start="3551:29" pos:end="3551:38">(<argument pos:start="3551:30" pos:end="3551:37"><expr pos:start="3551:30" pos:end="3551:37"><name pos:start="3551:30" pos:end="3551:37"><name pos:start="3551:30" pos:end="3551:30">s</name><operator pos:start="3551:31" pos:end="3551:32">-&gt;</operator><name pos:start="3551:33" pos:end="3551:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3553:9" pos:end="3553:21"><expr pos:start="3553:9" pos:end="3553:20"><call pos:start="3553:9" pos:end="3553:20"><name pos:start="3553:9" pos:end="3553:18">gen_op_daa</name><argument_list pos:start="3553:19" pos:end="3553:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3555:9" pos:end="3555:32"><expr pos:start="3555:9" pos:end="3555:31"><name pos:start="3555:9" pos:end="3555:16"><name pos:start="3555:9" pos:end="3555:9">s</name><operator pos:start="3555:10" pos:end="3555:11">-&gt;</operator><name pos:start="3555:12" pos:end="3555:16">cc_op</name></name> <operator pos:start="3555:18" pos:end="3555:18">=</operator> <name pos:start="3555:20" pos:end="3555:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3557:9" pos:end="3557:14">break;</break>

    <case pos:start="3559:5" pos:end="3559:14">case <expr pos:start="3559:10" pos:end="3559:13"><literal type="number" pos:start="3559:10" pos:end="3559:13">0x2f</literal></expr>:</case> <comment type="block" pos:start="3559:16" pos:end="3559:24">/* das */</comment>

        <if_stmt pos:start="3561:9" pos:end="3563:39"><if pos:start="3561:9" pos:end="3563:39">if <condition pos:start="3561:12" pos:end="3561:38">(<expr pos:start="3561:13" pos:end="3561:37"><name pos:start="3561:13" pos:end="3561:20"><name pos:start="3561:13" pos:end="3561:13">s</name><operator pos:start="3561:14" pos:end="3561:15">-&gt;</operator><name pos:start="3561:16" pos:end="3561:20">cc_op</name></name> <operator pos:start="3561:22" pos:end="3561:23">!=</operator> <name pos:start="3561:25" pos:end="3561:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3563:13" pos:end="3563:39"><block_content pos:start="3563:13" pos:end="3563:39">

            <expr_stmt pos:start="3563:13" pos:end="3563:39"><expr pos:start="3563:13" pos:end="3563:38"><call pos:start="3563:13" pos:end="3563:38"><name pos:start="3563:13" pos:end="3563:28">gen_op_set_cc_op</name><argument_list pos:start="3563:29" pos:end="3563:38">(<argument pos:start="3563:30" pos:end="3563:37"><expr pos:start="3563:30" pos:end="3563:37"><name pos:start="3563:30" pos:end="3563:37"><name pos:start="3563:30" pos:end="3563:30">s</name><operator pos:start="3563:31" pos:end="3563:32">-&gt;</operator><name pos:start="3563:33" pos:end="3563:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3565:9" pos:end="3565:21"><expr pos:start="3565:9" pos:end="3565:20"><call pos:start="3565:9" pos:end="3565:20"><name pos:start="3565:9" pos:end="3565:18">gen_op_das</name><argument_list pos:start="3565:19" pos:end="3565:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3567:9" pos:end="3567:32"><expr pos:start="3567:9" pos:end="3567:31"><name pos:start="3567:9" pos:end="3567:16"><name pos:start="3567:9" pos:end="3567:9">s</name><operator pos:start="3567:10" pos:end="3567:11">-&gt;</operator><name pos:start="3567:12" pos:end="3567:16">cc_op</name></name> <operator pos:start="3567:18" pos:end="3567:18">=</operator> <name pos:start="3567:20" pos:end="3567:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3569:9" pos:end="3569:14">break;</break>

    <case pos:start="3571:5" pos:end="3571:14">case <expr pos:start="3571:10" pos:end="3571:13"><literal type="number" pos:start="3571:10" pos:end="3571:13">0x37</literal></expr>:</case> <comment type="block" pos:start="3571:16" pos:end="3571:24">/* aaa */</comment>

        <if_stmt pos:start="3573:9" pos:end="3575:39"><if pos:start="3573:9" pos:end="3575:39">if <condition pos:start="3573:12" pos:end="3573:38">(<expr pos:start="3573:13" pos:end="3573:37"><name pos:start="3573:13" pos:end="3573:20"><name pos:start="3573:13" pos:end="3573:13">s</name><operator pos:start="3573:14" pos:end="3573:15">-&gt;</operator><name pos:start="3573:16" pos:end="3573:20">cc_op</name></name> <operator pos:start="3573:22" pos:end="3573:23">!=</operator> <name pos:start="3573:25" pos:end="3573:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3575:13" pos:end="3575:39"><block_content pos:start="3575:13" pos:end="3575:39">

            <expr_stmt pos:start="3575:13" pos:end="3575:39"><expr pos:start="3575:13" pos:end="3575:38"><call pos:start="3575:13" pos:end="3575:38"><name pos:start="3575:13" pos:end="3575:28">gen_op_set_cc_op</name><argument_list pos:start="3575:29" pos:end="3575:38">(<argument pos:start="3575:30" pos:end="3575:37"><expr pos:start="3575:30" pos:end="3575:37"><name pos:start="3575:30" pos:end="3575:37"><name pos:start="3575:30" pos:end="3575:30">s</name><operator pos:start="3575:31" pos:end="3575:32">-&gt;</operator><name pos:start="3575:33" pos:end="3575:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3577:9" pos:end="3577:21"><expr pos:start="3577:9" pos:end="3577:20"><call pos:start="3577:9" pos:end="3577:20"><name pos:start="3577:9" pos:end="3577:18">gen_op_aaa</name><argument_list pos:start="3577:19" pos:end="3577:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3579:9" pos:end="3579:32"><expr pos:start="3579:9" pos:end="3579:31"><name pos:start="3579:9" pos:end="3579:16"><name pos:start="3579:9" pos:end="3579:9">s</name><operator pos:start="3579:10" pos:end="3579:11">-&gt;</operator><name pos:start="3579:12" pos:end="3579:16">cc_op</name></name> <operator pos:start="3579:18" pos:end="3579:18">=</operator> <name pos:start="3579:20" pos:end="3579:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3581:9" pos:end="3581:14">break;</break>

    <case pos:start="3583:5" pos:end="3583:14">case <expr pos:start="3583:10" pos:end="3583:13"><literal type="number" pos:start="3583:10" pos:end="3583:13">0x3f</literal></expr>:</case> <comment type="block" pos:start="3583:16" pos:end="3583:24">/* aas */</comment>

        <if_stmt pos:start="3585:9" pos:end="3587:39"><if pos:start="3585:9" pos:end="3587:39">if <condition pos:start="3585:12" pos:end="3585:38">(<expr pos:start="3585:13" pos:end="3585:37"><name pos:start="3585:13" pos:end="3585:20"><name pos:start="3585:13" pos:end="3585:13">s</name><operator pos:start="3585:14" pos:end="3585:15">-&gt;</operator><name pos:start="3585:16" pos:end="3585:20">cc_op</name></name> <operator pos:start="3585:22" pos:end="3585:23">!=</operator> <name pos:start="3585:25" pos:end="3585:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3587:13" pos:end="3587:39"><block_content pos:start="3587:13" pos:end="3587:39">

            <expr_stmt pos:start="3587:13" pos:end="3587:39"><expr pos:start="3587:13" pos:end="3587:38"><call pos:start="3587:13" pos:end="3587:38"><name pos:start="3587:13" pos:end="3587:28">gen_op_set_cc_op</name><argument_list pos:start="3587:29" pos:end="3587:38">(<argument pos:start="3587:30" pos:end="3587:37"><expr pos:start="3587:30" pos:end="3587:37"><name pos:start="3587:30" pos:end="3587:37"><name pos:start="3587:30" pos:end="3587:30">s</name><operator pos:start="3587:31" pos:end="3587:32">-&gt;</operator><name pos:start="3587:33" pos:end="3587:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3589:9" pos:end="3589:21"><expr pos:start="3589:9" pos:end="3589:20"><call pos:start="3589:9" pos:end="3589:20"><name pos:start="3589:9" pos:end="3589:18">gen_op_aas</name><argument_list pos:start="3589:19" pos:end="3589:20">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3591:9" pos:end="3591:32"><expr pos:start="3591:9" pos:end="3591:31"><name pos:start="3591:9" pos:end="3591:16"><name pos:start="3591:9" pos:end="3591:9">s</name><operator pos:start="3591:10" pos:end="3591:11">-&gt;</operator><name pos:start="3591:12" pos:end="3591:16">cc_op</name></name> <operator pos:start="3591:18" pos:end="3591:18">=</operator> <name pos:start="3591:20" pos:end="3591:31">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        <break pos:start="3593:9" pos:end="3593:14">break;</break>

    <case pos:start="3595:5" pos:end="3595:14">case <expr pos:start="3595:10" pos:end="3595:13"><literal type="number" pos:start="3595:10" pos:end="3595:13">0xd4</literal></expr>:</case> <comment type="block" pos:start="3595:16" pos:end="3595:24">/* aam */</comment>

        <expr_stmt pos:start="3597:9" pos:end="3597:28"><expr pos:start="3597:9" pos:end="3597:27"><name pos:start="3597:9" pos:end="3597:11">val</name> <operator pos:start="3597:13" pos:end="3597:13">=</operator> <call pos:start="3597:15" pos:end="3597:27"><name pos:start="3597:15" pos:end="3597:18">ldub</name><argument_list pos:start="3597:19" pos:end="3597:27">(<argument pos:start="3597:20" pos:end="3597:26"><expr pos:start="3597:20" pos:end="3597:26"><name pos:start="3597:20" pos:end="3597:24"><name pos:start="3597:20" pos:end="3597:20">s</name><operator pos:start="3597:21" pos:end="3597:22">-&gt;</operator><name pos:start="3597:23" pos:end="3597:24">pc</name></name><operator pos:start="3597:25" pos:end="3597:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3599:9" pos:end="3599:24"><expr pos:start="3599:9" pos:end="3599:23"><call pos:start="3599:9" pos:end="3599:23"><name pos:start="3599:9" pos:end="3599:18">gen_op_aam</name><argument_list pos:start="3599:19" pos:end="3599:23">(<argument pos:start="3599:20" pos:end="3599:22"><expr pos:start="3599:20" pos:end="3599:22"><name pos:start="3599:20" pos:end="3599:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3601:9" pos:end="3601:32"><expr pos:start="3601:9" pos:end="3601:31"><name pos:start="3601:9" pos:end="3601:16"><name pos:start="3601:9" pos:end="3601:9">s</name><operator pos:start="3601:10" pos:end="3601:11">-&gt;</operator><name pos:start="3601:12" pos:end="3601:16">cc_op</name></name> <operator pos:start="3601:18" pos:end="3601:18">=</operator> <name pos:start="3601:20" pos:end="3601:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="3603:9" pos:end="3603:14">break;</break>

    <case pos:start="3605:5" pos:end="3605:14">case <expr pos:start="3605:10" pos:end="3605:13"><literal type="number" pos:start="3605:10" pos:end="3605:13">0xd5</literal></expr>:</case> <comment type="block" pos:start="3605:16" pos:end="3605:24">/* aad */</comment>

        <expr_stmt pos:start="3607:9" pos:end="3607:28"><expr pos:start="3607:9" pos:end="3607:27"><name pos:start="3607:9" pos:end="3607:11">val</name> <operator pos:start="3607:13" pos:end="3607:13">=</operator> <call pos:start="3607:15" pos:end="3607:27"><name pos:start="3607:15" pos:end="3607:18">ldub</name><argument_list pos:start="3607:19" pos:end="3607:27">(<argument pos:start="3607:20" pos:end="3607:26"><expr pos:start="3607:20" pos:end="3607:26"><name pos:start="3607:20" pos:end="3607:24"><name pos:start="3607:20" pos:end="3607:20">s</name><operator pos:start="3607:21" pos:end="3607:22">-&gt;</operator><name pos:start="3607:23" pos:end="3607:24">pc</name></name><operator pos:start="3607:25" pos:end="3607:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3609:9" pos:end="3609:24"><expr pos:start="3609:9" pos:end="3609:23"><call pos:start="3609:9" pos:end="3609:23"><name pos:start="3609:9" pos:end="3609:18">gen_op_aad</name><argument_list pos:start="3609:19" pos:end="3609:23">(<argument pos:start="3609:20" pos:end="3609:22"><expr pos:start="3609:20" pos:end="3609:22"><name pos:start="3609:20" pos:end="3609:22">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3611:9" pos:end="3611:32"><expr pos:start="3611:9" pos:end="3611:31"><name pos:start="3611:9" pos:end="3611:16"><name pos:start="3611:9" pos:end="3611:9">s</name><operator pos:start="3611:10" pos:end="3611:11">-&gt;</operator><name pos:start="3611:12" pos:end="3611:16">cc_op</name></name> <operator pos:start="3611:18" pos:end="3611:18">=</operator> <name pos:start="3611:20" pos:end="3611:31">CC_OP_LOGICB</name></expr>;</expr_stmt>

        <break pos:start="3613:9" pos:end="3613:14">break;</break>

        <comment type="block" format="doxygen" pos:start="3615:9" pos:end="3615:34">/************************/</comment>

        <comment type="block" pos:start="3617:9" pos:end="3617:18">/* misc */</comment>

    <case pos:start="3619:5" pos:end="3619:14">case <expr pos:start="3619:10" pos:end="3619:13"><literal type="number" pos:start="3619:10" pos:end="3619:13">0x90</literal></expr>:</case> <comment type="block" pos:start="3619:16" pos:end="3619:24">/* nop */</comment>

        <break pos:start="3621:9" pos:end="3621:14">break;</break>

    <case pos:start="3623:5" pos:end="3623:14">case <expr pos:start="3623:10" pos:end="3623:13"><literal type="number" pos:start="3623:10" pos:end="3623:13">0xcc</literal></expr>:</case> <comment type="block" pos:start="3623:16" pos:end="3623:25">/* int3 */</comment>

        <expr_stmt pos:start="3625:9" pos:end="3625:36"><expr pos:start="3625:9" pos:end="3625:35"><call pos:start="3625:9" pos:end="3625:35"><name pos:start="3625:9" pos:end="3625:19">gen_op_int3</name><argument_list pos:start="3625:20" pos:end="3625:35">(<argument pos:start="3625:21" pos:end="3625:34"><expr pos:start="3625:21" pos:end="3625:34"><operator pos:start="3625:21" pos:end="3625:21">(</operator><name pos:start="3625:22" pos:end="3625:25">long</name><operator pos:start="3625:26" pos:end="3625:26">)</operator><name pos:start="3625:27" pos:end="3625:34">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3627:9" pos:end="3627:22"><expr pos:start="3627:9" pos:end="3627:21"><name pos:start="3627:9" pos:end="3627:17"><name pos:start="3627:9" pos:end="3627:9">s</name><operator pos:start="3627:10" pos:end="3627:11">-&gt;</operator><name pos:start="3627:12" pos:end="3627:17">is_jmp</name></name> <operator pos:start="3627:19" pos:end="3627:19">=</operator> <literal type="number" pos:start="3627:21" pos:end="3627:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3629:9" pos:end="3629:14">break;</break>

    <case pos:start="3631:5" pos:end="3631:14">case <expr pos:start="3631:10" pos:end="3631:13"><literal type="number" pos:start="3631:10" pos:end="3631:13">0xcd</literal></expr>:</case> <comment type="block" pos:start="3631:16" pos:end="3631:26">/* int N */</comment>

        <expr_stmt pos:start="3633:9" pos:end="3633:28"><expr pos:start="3633:9" pos:end="3633:27"><name pos:start="3633:9" pos:end="3633:11">val</name> <operator pos:start="3633:13" pos:end="3633:13">=</operator> <call pos:start="3633:15" pos:end="3633:27"><name pos:start="3633:15" pos:end="3633:18">ldub</name><argument_list pos:start="3633:19" pos:end="3633:27">(<argument pos:start="3633:20" pos:end="3633:26"><expr pos:start="3633:20" pos:end="3633:26"><name pos:start="3633:20" pos:end="3633:24"><name pos:start="3633:20" pos:end="3633:20">s</name><operator pos:start="3633:21" pos:end="3633:22">-&gt;</operator><name pos:start="3633:23" pos:end="3633:24">pc</name></name><operator pos:start="3633:25" pos:end="3633:26">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="3635:9" pos:end="3635:59">/* XXX: currently we ignore the interrupt number */</comment>

        <expr_stmt pos:start="3637:9" pos:end="3637:38"><expr pos:start="3637:9" pos:end="3637:37"><call pos:start="3637:9" pos:end="3637:37"><name pos:start="3637:9" pos:end="3637:21">gen_op_int_im</name><argument_list pos:start="3637:22" pos:end="3637:37">(<argument pos:start="3637:23" pos:end="3637:36"><expr pos:start="3637:23" pos:end="3637:36"><operator pos:start="3637:23" pos:end="3637:23">(</operator><name pos:start="3637:24" pos:end="3637:27">long</name><operator pos:start="3637:28" pos:end="3637:28">)</operator><name pos:start="3637:29" pos:end="3637:36">pc_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3639:9" pos:end="3639:22"><expr pos:start="3639:9" pos:end="3639:21"><name pos:start="3639:9" pos:end="3639:17"><name pos:start="3639:9" pos:end="3639:9">s</name><operator pos:start="3639:10" pos:end="3639:11">-&gt;</operator><name pos:start="3639:12" pos:end="3639:17">is_jmp</name></name> <operator pos:start="3639:19" pos:end="3639:19">=</operator> <literal type="number" pos:start="3639:21" pos:end="3639:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3641:9" pos:end="3641:14">break;</break>

    <case pos:start="3643:5" pos:end="3643:14">case <expr pos:start="3643:10" pos:end="3643:13"><literal type="number" pos:start="3643:10" pos:end="3643:13">0xce</literal></expr>:</case> <comment type="block" pos:start="3643:16" pos:end="3643:25">/* into */</comment>

        <if_stmt pos:start="3645:9" pos:end="3647:39"><if pos:start="3645:9" pos:end="3647:39">if <condition pos:start="3645:12" pos:end="3645:38">(<expr pos:start="3645:13" pos:end="3645:37"><name pos:start="3645:13" pos:end="3645:20"><name pos:start="3645:13" pos:end="3645:13">s</name><operator pos:start="3645:14" pos:end="3645:15">-&gt;</operator><name pos:start="3645:16" pos:end="3645:20">cc_op</name></name> <operator pos:start="3645:22" pos:end="3645:23">!=</operator> <name pos:start="3645:25" pos:end="3645:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3647:13" pos:end="3647:39"><block_content pos:start="3647:13" pos:end="3647:39">

            <expr_stmt pos:start="3647:13" pos:end="3647:39"><expr pos:start="3647:13" pos:end="3647:38"><call pos:start="3647:13" pos:end="3647:38"><name pos:start="3647:13" pos:end="3647:28">gen_op_set_cc_op</name><argument_list pos:start="3647:29" pos:end="3647:38">(<argument pos:start="3647:30" pos:end="3647:37"><expr pos:start="3647:30" pos:end="3647:37"><name pos:start="3647:30" pos:end="3647:37"><name pos:start="3647:30" pos:end="3647:30">s</name><operator pos:start="3647:31" pos:end="3647:32">-&gt;</operator><name pos:start="3647:33" pos:end="3647:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3649:9" pos:end="3649:49"><expr pos:start="3649:9" pos:end="3649:48"><call pos:start="3649:9" pos:end="3649:48"><name pos:start="3649:9" pos:end="3649:19">gen_op_into</name><argument_list pos:start="3649:20" pos:end="3649:48">(<argument pos:start="3649:21" pos:end="3649:34"><expr pos:start="3649:21" pos:end="3649:34"><operator pos:start="3649:21" pos:end="3649:21">(</operator><name pos:start="3649:22" pos:end="3649:25">long</name><operator pos:start="3649:26" pos:end="3649:26">)</operator><name pos:start="3649:27" pos:end="3649:34">pc_start</name></expr></argument>, <argument pos:start="3649:37" pos:end="3649:47"><expr pos:start="3649:37" pos:end="3649:47"><operator pos:start="3649:37" pos:end="3649:37">(</operator><name pos:start="3649:38" pos:end="3649:41">long</name><operator pos:start="3649:42" pos:end="3649:42">)</operator><name pos:start="3649:43" pos:end="3649:47"><name pos:start="3649:43" pos:end="3649:43">s</name><operator pos:start="3649:44" pos:end="3649:45">-&gt;</operator><name pos:start="3649:46" pos:end="3649:47">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3651:9" pos:end="3651:22"><expr pos:start="3651:9" pos:end="3651:21"><name pos:start="3651:9" pos:end="3651:17"><name pos:start="3651:9" pos:end="3651:9">s</name><operator pos:start="3651:10" pos:end="3651:11">-&gt;</operator><name pos:start="3651:12" pos:end="3651:17">is_jmp</name></name> <operator pos:start="3651:19" pos:end="3651:19">=</operator> <literal type="number" pos:start="3651:21" pos:end="3651:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3653:9" pos:end="3653:14">break;</break>

    <case pos:start="3655:5" pos:end="3655:25">case <expr pos:start="3655:10" pos:end="3655:24"><literal type="number" pos:start="3655:10" pos:end="3655:14">0x1c8</literal> <operator pos:start="3655:16" pos:end="3655:18">...</operator> <literal type="number" pos:start="3655:20" pos:end="3655:24">0x1cf</literal></expr>:</case> <comment type="block" pos:start="3655:27" pos:end="3655:41">/* bswap reg */</comment>

        <expr_stmt pos:start="3657:9" pos:end="3657:20"><expr pos:start="3657:9" pos:end="3657:19"><name pos:start="3657:9" pos:end="3657:11">reg</name> <operator pos:start="3657:13" pos:end="3657:13">=</operator> <name pos:start="3657:15" pos:end="3657:15">b</name> <operator pos:start="3657:17" pos:end="3657:17">&amp;</operator> <literal type="number" pos:start="3657:19" pos:end="3657:19">7</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="3659:9" pos:end="3659:45"><expr pos:start="3659:9" pos:end="3659:44"><name pos:start="3659:9" pos:end="3659:42"><name pos:start="3659:9" pos:end="3659:25">gen_op_mov_TN_reg</name><index pos:start="3659:26" pos:end="3659:34">[<expr pos:start="3659:27" pos:end="3659:33"><name pos:start="3659:27" pos:end="3659:33">OT_LONG</name></expr>]</index><index pos:start="3659:35" pos:end="3659:37">[<expr pos:start="3659:36" pos:end="3659:36"><literal type="number" pos:start="3659:36" pos:end="3659:36">0</literal></expr>]</index><index pos:start="3659:38" pos:end="3659:42">[<expr pos:start="3659:39" pos:end="3659:41"><name pos:start="3659:39" pos:end="3659:41">reg</name></expr>]</index></name><operator pos:start="3659:43" pos:end="3659:43">(</operator><operator pos:start="3659:44" pos:end="3659:44">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3661:9" pos:end="3661:27"><expr pos:start="3661:9" pos:end="3661:26"><call pos:start="3661:9" pos:end="3661:26"><name pos:start="3661:9" pos:end="3661:24">gen_op_bswapl_T0</name><argument_list pos:start="3661:25" pos:end="3661:26">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3663:9" pos:end="3663:42"><expr pos:start="3663:9" pos:end="3663:41"><name pos:start="3663:9" pos:end="3663:39"><name pos:start="3663:9" pos:end="3663:25">gen_op_mov_reg_T0</name><index pos:start="3663:26" pos:end="3663:34">[<expr pos:start="3663:27" pos:end="3663:33"><name pos:start="3663:27" pos:end="3663:33">OT_LONG</name></expr>]</index><index pos:start="3663:35" pos:end="3663:39">[<expr pos:start="3663:36" pos:end="3663:38"><name pos:start="3663:36" pos:end="3663:38">reg</name></expr>]</index></name><operator pos:start="3663:40" pos:end="3663:40">(</operator><operator pos:start="3663:41" pos:end="3663:41">)</operator></expr>;</expr_stmt>

        <break pos:start="3665:9" pos:end="3665:14">break;</break>

    <case pos:start="3667:5" pos:end="3667:14">case <expr pos:start="3667:10" pos:end="3667:13"><literal type="number" pos:start="3667:10" pos:end="3667:13">0xd6</literal></expr>:</case> <comment type="block" pos:start="3667:16" pos:end="3667:25">/* salc */</comment>

        <if_stmt pos:start="3669:9" pos:end="3671:39"><if pos:start="3669:9" pos:end="3671:39">if <condition pos:start="3669:12" pos:end="3669:38">(<expr pos:start="3669:13" pos:end="3669:37"><name pos:start="3669:13" pos:end="3669:20"><name pos:start="3669:13" pos:end="3669:13">s</name><operator pos:start="3669:14" pos:end="3669:15">-&gt;</operator><name pos:start="3669:16" pos:end="3669:20">cc_op</name></name> <operator pos:start="3669:22" pos:end="3669:23">!=</operator> <name pos:start="3669:25" pos:end="3669:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3671:13" pos:end="3671:39"><block_content pos:start="3671:13" pos:end="3671:39">

            <expr_stmt pos:start="3671:13" pos:end="3671:39"><expr pos:start="3671:13" pos:end="3671:38"><call pos:start="3671:13" pos:end="3671:38"><name pos:start="3671:13" pos:end="3671:28">gen_op_set_cc_op</name><argument_list pos:start="3671:29" pos:end="3671:38">(<argument pos:start="3671:30" pos:end="3671:37"><expr pos:start="3671:30" pos:end="3671:37"><name pos:start="3671:30" pos:end="3671:37"><name pos:start="3671:30" pos:end="3671:30">s</name><operator pos:start="3671:31" pos:end="3671:32">-&gt;</operator><name pos:start="3671:33" pos:end="3671:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3673:9" pos:end="3673:22"><expr pos:start="3673:9" pos:end="3673:21"><call pos:start="3673:9" pos:end="3673:21"><name pos:start="3673:9" pos:end="3673:19">gen_op_salc</name><argument_list pos:start="3673:20" pos:end="3673:21">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3675:9" pos:end="3675:14">break;</break>

    <case pos:start="3677:5" pos:end="3677:14">case <expr pos:start="3677:10" pos:end="3677:13"><literal type="number" pos:start="3677:10" pos:end="3677:13">0xe0</literal></expr>:</case> <comment type="block" pos:start="3677:16" pos:end="3677:27">/* loopnz */</comment>

    <case pos:start="3679:5" pos:end="3679:14">case <expr pos:start="3679:10" pos:end="3679:13"><literal type="number" pos:start="3679:10" pos:end="3679:13">0xe1</literal></expr>:</case> <comment type="block" pos:start="3679:16" pos:end="3679:26">/* loopz */</comment>

        <if_stmt pos:start="3681:9" pos:end="3683:39"><if pos:start="3681:9" pos:end="3683:39">if <condition pos:start="3681:12" pos:end="3681:38">(<expr pos:start="3681:13" pos:end="3681:37"><name pos:start="3681:13" pos:end="3681:20"><name pos:start="3681:13" pos:end="3681:13">s</name><operator pos:start="3681:14" pos:end="3681:15">-&gt;</operator><name pos:start="3681:16" pos:end="3681:20">cc_op</name></name> <operator pos:start="3681:22" pos:end="3681:23">!=</operator> <name pos:start="3681:25" pos:end="3681:37">CC_OP_DYNAMIC</name></expr>)</condition><block type="pseudo" pos:start="3683:13" pos:end="3683:39"><block_content pos:start="3683:13" pos:end="3683:39">

            <expr_stmt pos:start="3683:13" pos:end="3683:39"><expr pos:start="3683:13" pos:end="3683:38"><call pos:start="3683:13" pos:end="3683:38"><name pos:start="3683:13" pos:end="3683:28">gen_op_set_cc_op</name><argument_list pos:start="3683:29" pos:end="3683:38">(<argument pos:start="3683:30" pos:end="3683:37"><expr pos:start="3683:30" pos:end="3683:37"><name pos:start="3683:30" pos:end="3683:37"><name pos:start="3683:30" pos:end="3683:30">s</name><operator pos:start="3683:31" pos:end="3683:32">-&gt;</operator><name pos:start="3683:33" pos:end="3683:37">cc_op</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="block" pos:start="3685:9" pos:end="3685:23">/* FALL THRU */</comment>

    <case pos:start="3687:5" pos:end="3687:14">case <expr pos:start="3687:10" pos:end="3687:13"><literal type="number" pos:start="3687:10" pos:end="3687:13">0xe2</literal></expr>:</case> <comment type="block" pos:start="3687:16" pos:end="3687:25">/* loop */</comment>

    <case pos:start="3689:5" pos:end="3689:14">case <expr pos:start="3689:10" pos:end="3689:13"><literal type="number" pos:start="3689:10" pos:end="3689:13">0xe3</literal></expr>:</case> <comment type="block" pos:start="3689:16" pos:end="3689:26">/* jecxz */</comment>

        <expr_stmt pos:start="3691:9" pos:end="3691:43"><expr pos:start="3691:9" pos:end="3691:42"><name pos:start="3691:9" pos:end="3691:11">val</name> <operator pos:start="3691:13" pos:end="3691:13">=</operator> <operator pos:start="3691:15" pos:end="3691:15">(</operator><name pos:start="3691:16" pos:end="3691:21">int8_t</name><operator pos:start="3691:22" pos:end="3691:22">)</operator><call pos:start="3691:23" pos:end="3691:42"><name pos:start="3691:23" pos:end="3691:30">insn_get</name><argument_list pos:start="3691:31" pos:end="3691:42">(<argument pos:start="3691:32" pos:end="3691:32"><expr pos:start="3691:32" pos:end="3691:32"><name pos:start="3691:32" pos:end="3691:32">s</name></expr></argument>, <argument pos:start="3691:35" pos:end="3691:41"><expr pos:start="3691:35" pos:end="3691:41"><name pos:start="3691:35" pos:end="3691:41">OT_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="3693:9" pos:end="3693:38"><expr pos:start="3693:9" pos:end="3693:37"><name pos:start="3693:9" pos:end="3693:16">next_eip</name> <operator pos:start="3693:18" pos:end="3693:18">=</operator> <name pos:start="3693:20" pos:end="3693:24"><name pos:start="3693:20" pos:end="3693:20">s</name><operator pos:start="3693:21" pos:end="3693:22">-&gt;</operator><name pos:start="3693:23" pos:end="3693:24">pc</name></name> <operator pos:start="3693:26" pos:end="3693:26">-</operator> <name pos:start="3693:28" pos:end="3693:37"><name pos:start="3693:28" pos:end="3693:28">s</name><operator pos:start="3693:29" pos:end="3693:30">-&gt;</operator><name pos:start="3693:31" pos:end="3693:37">cs_base</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="3695:9" pos:end="3695:24"><expr pos:start="3695:9" pos:end="3695:23"><name pos:start="3695:9" pos:end="3695:11">val</name> <operator pos:start="3695:13" pos:end="3695:14">+=</operator> <name pos:start="3695:16" pos:end="3695:23">next_eip</name></expr>;</expr_stmt>

        <if_stmt pos:start="3697:9" pos:end="3699:26"><if pos:start="3697:9" pos:end="3699:26">if <condition pos:start="3697:12" pos:end="3697:26">(<expr pos:start="3697:13" pos:end="3697:25"><name pos:start="3697:13" pos:end="3697:20"><name pos:start="3697:13" pos:end="3697:13">s</name><operator pos:start="3697:14" pos:end="3697:15">-&gt;</operator><name pos:start="3697:16" pos:end="3697:20">dflag</name></name> <operator pos:start="3697:22" pos:end="3697:23">==</operator> <literal type="number" pos:start="3697:25" pos:end="3697:25">0</literal></expr>)</condition><block type="pseudo" pos:start="3699:13" pos:end="3699:26"><block_content pos:start="3699:13" pos:end="3699:26">

            <expr_stmt pos:start="3699:13" pos:end="3699:26"><expr pos:start="3699:13" pos:end="3699:25"><name pos:start="3699:13" pos:end="3699:15">val</name> <operator pos:start="3699:17" pos:end="3699:18">&amp;=</operator> <literal type="number" pos:start="3699:20" pos:end="3699:25">0xffff</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="3701:9" pos:end="3701:52"><expr pos:start="3701:9" pos:end="3701:51"><name pos:start="3701:9" pos:end="3701:36"><name pos:start="3701:9" pos:end="3701:19">gen_op_loop</name><index pos:start="3701:20" pos:end="3701:29">[<expr pos:start="3701:21" pos:end="3701:28"><name pos:start="3701:21" pos:end="3701:28"><name pos:start="3701:21" pos:end="3701:21">s</name><operator pos:start="3701:22" pos:end="3701:23">-&gt;</operator><name pos:start="3701:24" pos:end="3701:28">aflag</name></name></expr>]</index><index pos:start="3701:30" pos:end="3701:36">[<expr pos:start="3701:31" pos:end="3701:35"><name pos:start="3701:31" pos:end="3701:31">b</name> <operator pos:start="3701:33" pos:end="3701:33">&amp;</operator> <literal type="number" pos:start="3701:35" pos:end="3701:35">3</literal></expr>]</index></name><operator pos:start="3701:37" pos:end="3701:37">(</operator><name pos:start="3701:38" pos:end="3701:40">val</name><operator pos:start="3701:41" pos:end="3701:41">,</operator> <name pos:start="3701:43" pos:end="3701:50">next_eip</name><operator pos:start="3701:51" pos:end="3701:51">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="3703:9" pos:end="3703:22"><expr pos:start="3703:9" pos:end="3703:21"><name pos:start="3703:9" pos:end="3703:17"><name pos:start="3703:9" pos:end="3703:9">s</name><operator pos:start="3703:10" pos:end="3703:11">-&gt;</operator><name pos:start="3703:12" pos:end="3703:17">is_jmp</name></name> <operator pos:start="3703:19" pos:end="3703:19">=</operator> <literal type="number" pos:start="3703:21" pos:end="3703:21">1</literal></expr>;</expr_stmt>

        <break pos:start="3705:9" pos:end="3705:14">break;</break>

    <case pos:start="3707:5" pos:end="3707:15">case <expr pos:start="3707:10" pos:end="3707:14"><literal type="number" pos:start="3707:10" pos:end="3707:14">0x131</literal></expr>:</case> <comment type="block" pos:start="3707:17" pos:end="3707:27">/* rdtsc */</comment>

        <expr_stmt pos:start="3709:9" pos:end="3709:23"><expr pos:start="3709:9" pos:end="3709:22"><call pos:start="3709:9" pos:end="3709:22"><name pos:start="3709:9" pos:end="3709:20">gen_op_rdtsc</name><argument_list pos:start="3709:21" pos:end="3709:22">()</argument_list></call></expr>;</expr_stmt>

        <break pos:start="3711:9" pos:end="3722:0">break;</break>

<cpp:if pos:start="3713:1" pos:end="3713:5">#<cpp:directive pos:start="3713:2" pos:end="3713:3">if</cpp:directive> <expr pos:start="3713:5" pos:end="3713:5"><literal type="number" pos:start="3713:5" pos:end="3713:5">0</literal></expr></cpp:if>

    case 0x1a2: <comment type="block" pos:start="3715:17" pos:end="3715:27">/* cpuid */</comment>

        gen_insn0(OP_ASM);

        break;

<cpp:endif pos:start="3721:1" pos:end="3721:6">#<cpp:directive pos:start="3721:2" pos:end="3721:6">endif</cpp:directive></cpp:endif>

    <default pos:start="3723:5" pos:end="3723:12">default:</default>

        <goto pos:start="3725:9" pos:end="3725:24">goto <name pos:start="3725:14" pos:end="3725:23">illegal_op</name>;</goto>

    </block_content>}</block></switch>

    <comment type="block" pos:start="3729:5" pos:end="3729:25">/* lock generation */</comment>

    <if_stmt pos:start="3731:5" pos:end="3733:24"><if pos:start="3731:5" pos:end="3733:24">if <condition pos:start="3731:8" pos:end="3731:32">(<expr pos:start="3731:9" pos:end="3731:31"><name pos:start="3731:9" pos:end="3731:17"><name pos:start="3731:9" pos:end="3731:9">s</name><operator pos:start="3731:10" pos:end="3731:11">-&gt;</operator><name pos:start="3731:12" pos:end="3731:17">prefix</name></name> <operator pos:start="3731:19" pos:end="3731:19">&amp;</operator> <name pos:start="3731:21" pos:end="3731:31">PREFIX_LOCK</name></expr>)</condition><block type="pseudo" pos:start="3733:9" pos:end="3733:24"><block_content pos:start="3733:9" pos:end="3733:24">

        <expr_stmt pos:start="3733:9" pos:end="3733:24"><expr pos:start="3733:9" pos:end="3733:23"><call pos:start="3733:9" pos:end="3733:23"><name pos:start="3733:9" pos:end="3733:21">gen_op_unlock</name><argument_list pos:start="3733:22" pos:end="3733:23">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="3735:5" pos:end="3735:23">return <expr pos:start="3735:12" pos:end="3735:22"><operator pos:start="3735:12" pos:end="3735:12">(</operator><name pos:start="3735:13" pos:end="3735:16">long</name><operator pos:start="3735:17" pos:end="3735:17">)</operator><name pos:start="3735:18" pos:end="3735:22"><name pos:start="3735:18" pos:end="3735:18">s</name><operator pos:start="3735:19" pos:end="3735:20">-&gt;</operator><name pos:start="3735:21" pos:end="3735:22">pc</name></name></expr>;</return>

 <label pos:start="3737:2" pos:end="3737:12"><name pos:start="3737:2" pos:end="3737:11">illegal_op</name>:</label>

    <comment type="block" pos:start="3739:5" pos:end="3739:48">/* XXX: ensure that no lock was generated */</comment>

    <return pos:start="3741:5" pos:end="3741:14">return <expr pos:start="3741:12" pos:end="3741:13"><operator pos:start="3741:12" pos:end="3741:12">-</operator><literal type="number" pos:start="3741:13" pos:end="3741:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
