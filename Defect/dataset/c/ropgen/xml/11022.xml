<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11022.c" pos:tabs="8"><function pos:start="1:1" pos:end="111:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">decode_frame</name><parameter_list pos:start="1:24" pos:end="1:89">(<parameter pos:start="1:25" pos:end="1:45"><decl pos:start="1:25" pos:end="1:45"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:38">AVCodecContext</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:45">avctx</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:57"><decl pos:start="1:48" pos:end="1:57"><type pos:start="1:48" pos:end="1:57"><name pos:start="1:48" pos:end="1:51">void</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:57">data</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:73"><decl pos:start="1:60" pos:end="1:73"><type pos:start="1:60" pos:end="1:73"><name pos:start="1:60" pos:end="1:62">int</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:73">got_frame</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:88"><decl pos:start="1:76" pos:end="1:88"><type pos:start="1:76" pos:end="1:88"><name pos:start="1:76" pos:end="1:83">AVPacket</name> <modifier pos:start="1:85" pos:end="1:85">*</modifier></type><name pos:start="1:86" pos:end="1:88">pkt</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="111:1">{<block_content pos:start="5:5" pos:end="109:21">

    <decl_stmt pos:start="5:5" pos:end="5:45"><decl pos:start="5:5" pos:end="5:44"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:15">BinkContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier> <specifier pos:start="5:19" pos:end="5:23">const</specifier></type> <name pos:start="5:25" pos:end="5:25">c</name> <init pos:start="5:27" pos:end="5:44">= <expr pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:44"><name pos:start="5:29" pos:end="5:33">avctx</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">GetBitContext</name></type> <name pos:start="7:19" pos:end="7:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:13"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:13">plane</name></decl>, <decl pos:start="9:16" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:16" pos:end="9:24">plane_idx</name></decl>, <decl pos:start="9:27" pos:end="9:29"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:27" pos:end="9:29">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:18">bits_count</name> <init pos:start="11:20" pos:end="11:35">= <expr pos:start="11:22" pos:end="11:35"><name pos:start="11:22" pos:end="11:30"><name pos:start="11:22" pos:end="11:24">pkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name> <operator pos:start="11:32" pos:end="11:33">&lt;&lt;</operator> <literal type="number" pos:start="11:35" pos:end="11:35">3</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="41:5"><if pos:start="15:5" pos:end="31:5">if <condition pos:start="15:8" pos:end="15:25">(<expr pos:start="15:9" pos:end="15:24"><name pos:start="15:9" pos:end="15:18"><name pos:start="15:9" pos:end="15:9">c</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:18">version</name></name> <operator pos:start="15:20" pos:end="15:20">&gt;</operator> <literal type="char" pos:start="15:22" pos:end="15:24">'b'</literal></expr>)</condition> <block pos:start="15:27" pos:end="31:5">{<block_content pos:start="17:9" pos:end="29:9">

        <if_stmt pos:start="17:9" pos:end="19:49"><if pos:start="17:9" pos:end="19:49">if<condition pos:start="17:11" pos:end="17:27">(<expr pos:start="17:12" pos:end="17:26"><name pos:start="17:12" pos:end="17:26"><name pos:start="17:12" pos:end="17:12">c</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:17">pic</name><operator pos:start="17:18" pos:end="17:19">-&gt;</operator><name pos:start="17:20" pos:end="17:23">data</name><index pos:start="17:24" pos:end="17:26">[<expr pos:start="17:25" pos:end="17:25"><literal type="number" pos:start="17:25" pos:end="17:25">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:49"><block_content pos:start="19:13" pos:end="19:49">

            <expr_stmt pos:start="19:13" pos:end="19:49"><expr pos:start="19:13" pos:end="19:48"><call pos:start="19:13" pos:end="19:48"><name pos:start="19:13" pos:end="19:33"><name pos:start="19:13" pos:end="19:17">avctx</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:33">release_buffer</name></name><argument_list pos:start="19:34" pos:end="19:48">(<argument pos:start="19:35" pos:end="19:39"><expr pos:start="19:35" pos:end="19:39"><name pos:start="19:35" pos:end="19:39">avctx</name></expr></argument>, <argument pos:start="19:42" pos:end="19:47"><expr pos:start="19:42" pos:end="19:47"><name pos:start="19:42" pos:end="19:47"><name pos:start="19:42" pos:end="19:42">c</name><operator pos:start="19:43" pos:end="19:44">-&gt;</operator><name pos:start="19:45" pos:end="19:47">pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:53">(<expr pos:start="23:13" pos:end="23:52"><operator pos:start="23:13" pos:end="23:13">(</operator><name pos:start="23:14" pos:end="23:16">ret</name> <operator pos:start="23:18" pos:end="23:18">=</operator> <call pos:start="23:20" pos:end="23:47"><name pos:start="23:20" pos:end="23:32">ff_get_buffer</name><argument_list pos:start="23:33" pos:end="23:47">(<argument pos:start="23:34" pos:end="23:38"><expr pos:start="23:34" pos:end="23:38"><name pos:start="23:34" pos:end="23:38">avctx</name></expr></argument>, <argument pos:start="23:41" pos:end="23:46"><expr pos:start="23:41" pos:end="23:46"><name pos:start="23:41" pos:end="23:46"><name pos:start="23:41" pos:end="23:41">c</name><operator pos:start="23:42" pos:end="23:43">-&gt;</operator><name pos:start="23:44" pos:end="23:46">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="23:48" pos:end="23:48">)</operator> <operator pos:start="23:50" pos:end="23:50">&lt;</operator> <literal type="number" pos:start="23:52" pos:end="23:52">0</literal></expr>)</condition> <block pos:start="23:55" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:23">

            <expr_stmt pos:start="25:13" pos:end="25:65"><expr pos:start="25:13" pos:end="25:64"><call pos:start="25:13" pos:end="25:64"><name pos:start="25:13" pos:end="25:18">av_log</name><argument_list pos:start="25:19" pos:end="25:64">(<argument pos:start="25:20" pos:end="25:24"><expr pos:start="25:20" pos:end="25:24"><name pos:start="25:20" pos:end="25:24">avctx</name></expr></argument>, <argument pos:start="25:27" pos:end="25:38"><expr pos:start="25:27" pos:end="25:38"><name pos:start="25:27" pos:end="25:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="25:41" pos:end="25:63"><expr pos:start="25:41" pos:end="25:63"><literal type="string" pos:start="25:41" pos:end="25:63">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:23">return <expr pos:start="27:20" pos:end="27:22"><name pos:start="27:20" pos:end="27:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="31:7" pos:end="41:5">else <block pos:start="31:12" pos:end="41:5">{<block_content pos:start="33:9" pos:end="39:9">

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:59">(<expr pos:start="33:13" pos:end="33:58"><operator pos:start="33:13" pos:end="33:13">(</operator><name pos:start="33:14" pos:end="33:16">ret</name> <operator pos:start="33:18" pos:end="33:18">=</operator> <call pos:start="33:20" pos:end="33:53"><name pos:start="33:20" pos:end="33:38"><name pos:start="33:20" pos:end="33:24">avctx</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:38">reget_buffer</name></name><argument_list pos:start="33:39" pos:end="33:53">(<argument pos:start="33:40" pos:end="33:44"><expr pos:start="33:40" pos:end="33:44"><name pos:start="33:40" pos:end="33:44">avctx</name></expr></argument>, <argument pos:start="33:47" pos:end="33:52"><expr pos:start="33:47" pos:end="33:52"><name pos:start="33:47" pos:end="33:52"><name pos:start="33:47" pos:end="33:47">c</name><operator pos:start="33:48" pos:end="33:49">-&gt;</operator><name pos:start="33:50" pos:end="33:52">pic</name></name></expr></argument>)</argument_list></call><operator pos:start="33:54" pos:end="33:54">)</operator> <operator pos:start="33:56" pos:end="33:56">&lt;</operator> <literal type="number" pos:start="33:58" pos:end="33:58">0</literal></expr>)</condition> <block pos:start="33:61" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:23">

            <expr_stmt pos:start="35:13" pos:end="35:67"><expr pos:start="35:13" pos:end="35:66"><call pos:start="35:13" pos:end="35:66"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:66">(<argument pos:start="35:20" pos:end="35:24"><expr pos:start="35:20" pos:end="35:24"><name pos:start="35:20" pos:end="35:24">avctx</name></expr></argument>, <argument pos:start="35:27" pos:end="35:38"><expr pos:start="35:27" pos:end="35:38"><name pos:start="35:27" pos:end="35:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:41" pos:end="35:65"><expr pos:start="35:41" pos:end="35:65"><literal type="string" pos:start="35:41" pos:end="35:65">"reget_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:23">return <expr pos:start="37:20" pos:end="37:22"><name pos:start="37:20" pos:end="37:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:46"><expr pos:start="45:5" pos:end="45:45"><call pos:start="45:5" pos:end="45:45"><name pos:start="45:5" pos:end="45:17">init_get_bits</name><argument_list pos:start="45:18" pos:end="45:45">(<argument pos:start="45:19" pos:end="45:21"><expr pos:start="45:19" pos:end="45:21"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:21">gb</name></expr></argument>, <argument pos:start="45:24" pos:end="45:32"><expr pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:32"><name pos:start="45:24" pos:end="45:26">pkt</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:32">data</name></name></expr></argument>, <argument pos:start="45:35" pos:end="45:44"><expr pos:start="45:35" pos:end="45:44"><name pos:start="45:35" pos:end="45:44">bits_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="57:5"><if pos:start="47:5" pos:end="57:5">if <condition pos:start="47:8" pos:end="47:21">(<expr pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:9">c</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:20">has_alpha</name></name></expr>)</condition> <block pos:start="47:23" pos:end="57:5">{<block_content pos:start="49:9" pos:end="55:23">

        <if_stmt pos:start="49:9" pos:end="51:36"><if pos:start="49:9" pos:end="51:36">if <condition pos:start="49:12" pos:end="49:30">(<expr pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:13">c</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:22">version</name></name> <operator pos:start="49:24" pos:end="49:25">&gt;=</operator> <literal type="char" pos:start="49:27" pos:end="49:29">'i'</literal></expr>)</condition><block type="pseudo" pos:start="51:13" pos:end="51:36"><block_content pos:start="51:13" pos:end="51:36">

            <expr_stmt pos:start="51:13" pos:end="51:36"><expr pos:start="51:13" pos:end="51:35"><call pos:start="51:13" pos:end="51:35"><name pos:start="51:13" pos:end="51:26">skip_bits_long</name><argument_list pos:start="51:27" pos:end="51:35">(<argument pos:start="51:28" pos:end="51:30"><expr pos:start="51:28" pos:end="51:30"><operator pos:start="51:28" pos:end="51:28">&amp;</operator><name pos:start="51:29" pos:end="51:30">gb</name></expr></argument>, <argument pos:start="51:33" pos:end="51:34"><expr pos:start="51:33" pos:end="51:34"><literal type="number" pos:start="51:33" pos:end="51:34">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="53:9" pos:end="55:23"><if pos:start="53:9" pos:end="55:23">if <condition pos:start="53:12" pos:end="53:56">(<expr pos:start="53:13" pos:end="53:55"><operator pos:start="53:13" pos:end="53:13">(</operator><name pos:start="53:14" pos:end="53:16">ret</name> <operator pos:start="53:18" pos:end="53:18">=</operator> <call pos:start="53:20" pos:end="53:50"><name pos:start="53:20" pos:end="53:36">bink_decode_plane</name><argument_list pos:start="53:37" pos:end="53:50">(<argument pos:start="53:38" pos:end="53:38"><expr pos:start="53:38" pos:end="53:38"><name pos:start="53:38" pos:end="53:38">c</name></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><operator pos:start="53:41" pos:end="53:41">&amp;</operator><name pos:start="53:42" pos:end="53:43">gb</name></expr></argument>, <argument pos:start="53:46" pos:end="53:46"><expr pos:start="53:46" pos:end="53:46"><literal type="number" pos:start="53:46" pos:end="53:46">3</literal></expr></argument>, <argument pos:start="53:49" pos:end="53:49"><expr pos:start="53:49" pos:end="53:49"><literal type="number" pos:start="53:49" pos:end="53:49">0</literal></expr></argument>)</argument_list></call><operator pos:start="53:51" pos:end="53:51">)</operator> <operator pos:start="53:53" pos:end="53:53">&lt;</operator> <literal type="number" pos:start="53:55" pos:end="53:55">0</literal></expr>)</condition><block type="pseudo" pos:start="55:13" pos:end="55:23"><block_content pos:start="55:13" pos:end="55:23">

            <return pos:start="55:13" pos:end="55:23">return <expr pos:start="55:20" pos:end="55:22"><name pos:start="55:20" pos:end="55:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="59:5" pos:end="61:32"><if pos:start="59:5" pos:end="61:32">if <condition pos:start="59:8" pos:end="59:26">(<expr pos:start="59:9" pos:end="59:25"><name pos:start="59:9" pos:end="59:18"><name pos:start="59:9" pos:end="59:9">c</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:18">version</name></name> <operator pos:start="59:20" pos:end="59:21">&gt;=</operator> <literal type="char" pos:start="59:23" pos:end="59:25">'i'</literal></expr>)</condition><block type="pseudo" pos:start="61:9" pos:end="61:32"><block_content pos:start="61:9" pos:end="61:32">

        <expr_stmt pos:start="61:9" pos:end="61:32"><expr pos:start="61:9" pos:end="61:31"><call pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:22">skip_bits_long</name><argument_list pos:start="61:23" pos:end="61:31">(<argument pos:start="61:24" pos:end="61:26"><expr pos:start="61:24" pos:end="61:26"><operator pos:start="61:24" pos:end="61:24">&amp;</operator><name pos:start="61:25" pos:end="61:26">gb</name></expr></argument>, <argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><literal type="number" pos:start="61:29" pos:end="61:30">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <for pos:start="65:5" pos:end="89:5">for <control pos:start="65:9" pos:end="65:39">(<init pos:start="65:10" pos:end="65:19"><expr pos:start="65:10" pos:end="65:18"><name pos:start="65:10" pos:end="65:14">plane</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <literal type="number" pos:start="65:18" pos:end="65:18">0</literal></expr>;</init> <condition pos:start="65:21" pos:end="65:30"><expr pos:start="65:21" pos:end="65:29"><name pos:start="65:21" pos:end="65:25">plane</name> <operator pos:start="65:27" pos:end="65:27">&lt;</operator> <literal type="number" pos:start="65:29" pos:end="65:29">3</literal></expr>;</condition> <incr pos:start="65:32" pos:end="65:38"><expr pos:start="65:32" pos:end="65:38"><name pos:start="65:32" pos:end="65:36">plane</name><operator pos:start="65:37" pos:end="65:38">++</operator></expr></incr>)</control> <block pos:start="65:41" pos:end="89:5">{<block_content pos:start="67:9" pos:end="87:18">

        <expr_stmt pos:start="67:9" pos:end="67:70"><expr pos:start="67:9" pos:end="67:69"><name pos:start="67:9" pos:end="67:17">plane_idx</name> <operator pos:start="67:19" pos:end="67:19">=</operator> <ternary pos:start="67:21" pos:end="67:69"><condition pos:start="67:21" pos:end="67:49"><expr pos:start="67:21" pos:end="67:47"><operator pos:start="67:21" pos:end="67:21">(</operator><operator pos:start="67:22" pos:end="67:22">!</operator><name pos:start="67:23" pos:end="67:27">plane</name> <operator pos:start="67:29" pos:end="67:30">||</operator> <operator pos:start="67:32" pos:end="67:32">!</operator><name pos:start="67:33" pos:end="67:46"><name pos:start="67:33" pos:end="67:33">c</name><operator pos:start="67:34" pos:end="67:35">-&gt;</operator><name pos:start="67:36" pos:end="67:46">swap_planes</name></name><operator pos:start="67:47" pos:end="67:47">)</operator></expr> ?</condition><then pos:start="67:51" pos:end="67:55"> <expr pos:start="67:51" pos:end="67:55"><name pos:start="67:51" pos:end="67:55">plane</name></expr> </then><else pos:start="67:57" pos:end="67:69">: <expr pos:start="67:59" pos:end="67:69"><operator pos:start="67:59" pos:end="67:59">(</operator><name pos:start="67:60" pos:end="67:64">plane</name> <operator pos:start="67:66" pos:end="67:66">^</operator> <literal type="number" pos:start="67:68" pos:end="67:68">3</literal><operator pos:start="67:69" pos:end="67:69">)</operator></expr></else></ternary></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="83:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:29">(<expr pos:start="71:13" pos:end="71:28"><name pos:start="71:13" pos:end="71:22"><name pos:start="71:13" pos:end="71:13">c</name><operator pos:start="71:14" pos:end="71:15">-&gt;</operator><name pos:start="71:16" pos:end="71:22">version</name></name> <operator pos:start="71:24" pos:end="71:24">&gt;</operator> <literal type="char" pos:start="71:26" pos:end="71:28">'b'</literal></expr>)</condition> <block pos:start="71:31" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:27">

            <if_stmt pos:start="73:13" pos:end="75:27"><if pos:start="73:13" pos:end="75:27">if <condition pos:start="73:16" pos:end="73:74">(<expr pos:start="73:17" pos:end="73:73"><operator pos:start="73:17" pos:end="73:17">(</operator><name pos:start="73:18" pos:end="73:20">ret</name> <operator pos:start="73:22" pos:end="73:22">=</operator> <call pos:start="73:24" pos:end="73:68"><name pos:start="73:24" pos:end="73:40">bink_decode_plane</name><argument_list pos:start="73:41" pos:end="73:68">(<argument pos:start="73:42" pos:end="73:42"><expr pos:start="73:42" pos:end="73:42"><name pos:start="73:42" pos:end="73:42">c</name></expr></argument>, <argument pos:start="73:45" pos:end="73:47"><expr pos:start="73:45" pos:end="73:47"><operator pos:start="73:45" pos:end="73:45">&amp;</operator><name pos:start="73:46" pos:end="73:47">gb</name></expr></argument>, <argument pos:start="73:50" pos:end="73:58"><expr pos:start="73:50" pos:end="73:58"><name pos:start="73:50" pos:end="73:58">plane_idx</name></expr></argument>, <argument pos:start="73:61" pos:end="73:67"><expr pos:start="73:61" pos:end="73:67"><operator pos:start="73:61" pos:end="73:61">!</operator><operator pos:start="73:62" pos:end="73:62">!</operator><name pos:start="73:63" pos:end="73:67">plane</name></expr></argument>)</argument_list></call><operator pos:start="73:69" pos:end="73:69">)</operator> <operator pos:start="73:71" pos:end="73:71">&lt;</operator> <literal type="number" pos:start="73:73" pos:end="73:73">0</literal></expr>)</condition><block type="pseudo" pos:start="75:17" pos:end="75:27"><block_content pos:start="75:17" pos:end="75:27">

                <return pos:start="75:17" pos:end="75:27">return <expr pos:start="75:24" pos:end="75:26"><name pos:start="75:24" pos:end="75:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="77:11" pos:end="83:9">else <block pos:start="77:16" pos:end="83:9">{<block_content pos:start="79:13" pos:end="81:27">

            <if_stmt pos:start="79:13" pos:end="81:27"><if pos:start="79:13" pos:end="81:27">if <condition pos:start="79:16" pos:end="79:86">(<expr pos:start="79:17" pos:end="79:85"><operator pos:start="79:17" pos:end="79:17">(</operator><name pos:start="79:18" pos:end="79:20">ret</name> <operator pos:start="79:22" pos:end="79:22">=</operator> <call pos:start="79:24" pos:end="79:80"><name pos:start="79:24" pos:end="79:41">binkb_decode_plane</name><argument_list pos:start="79:42" pos:end="79:80">(<argument pos:start="79:43" pos:end="79:43"><expr pos:start="79:43" pos:end="79:43"><name pos:start="79:43" pos:end="79:43">c</name></expr></argument>, <argument pos:start="79:46" pos:end="79:48"><expr pos:start="79:46" pos:end="79:48"><operator pos:start="79:46" pos:end="79:46">&amp;</operator><name pos:start="79:47" pos:end="79:48">gb</name></expr></argument>, <argument pos:start="79:51" pos:end="79:59"><expr pos:start="79:51" pos:end="79:59"><name pos:start="79:51" pos:end="79:59">plane_idx</name></expr></argument>, <argument pos:start="79:62" pos:end="79:70"><expr pos:start="79:62" pos:end="79:70"><operator pos:start="79:62" pos:end="79:62">!</operator><name pos:start="79:63" pos:end="79:70"><name pos:start="79:63" pos:end="79:65">pkt</name><operator pos:start="79:66" pos:end="79:67">-&gt;</operator><name pos:start="79:68" pos:end="79:70">pts</name></name></expr></argument>, <argument pos:start="79:73" pos:end="79:79"><expr pos:start="79:73" pos:end="79:79"><operator pos:start="79:73" pos:end="79:73">!</operator><operator pos:start="79:74" pos:end="79:74">!</operator><name pos:start="79:75" pos:end="79:79">plane</name></expr></argument>)</argument_list></call><operator pos:start="79:81" pos:end="79:81">)</operator> <operator pos:start="79:83" pos:end="79:83">&lt;</operator> <literal type="number" pos:start="79:85" pos:end="79:85">0</literal></expr>)</condition><block type="pseudo" pos:start="81:17" pos:end="81:27"><block_content pos:start="81:17" pos:end="81:27">

                <return pos:start="81:17" pos:end="81:27">return <expr pos:start="81:24" pos:end="81:26"><name pos:start="81:24" pos:end="81:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="85:9" pos:end="87:18"><if pos:start="85:9" pos:end="87:18">if <condition pos:start="85:12" pos:end="85:46">(<expr pos:start="85:13" pos:end="85:45"><call pos:start="85:13" pos:end="85:31"><name pos:start="85:13" pos:end="85:26">get_bits_count</name><argument_list pos:start="85:27" pos:end="85:31">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><operator pos:start="85:28" pos:end="85:28">&amp;</operator><name pos:start="85:29" pos:end="85:30">gb</name></expr></argument>)</argument_list></call> <operator pos:start="85:33" pos:end="85:34">&gt;=</operator> <name pos:start="85:36" pos:end="85:45">bits_count</name></expr>)</condition><block type="pseudo" pos:start="87:13" pos:end="87:18"><block_content pos:start="87:13" pos:end="87:18">

            <break pos:start="87:13" pos:end="87:18">break;</break></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="91:5" pos:end="91:13"><expr pos:start="91:5" pos:end="91:12"><call pos:start="91:5" pos:end="91:12"><name pos:start="91:5" pos:end="91:10">emms_c</name><argument_list pos:start="91:11" pos:end="91:12">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:19"><expr pos:start="95:5" pos:end="95:18"><operator pos:start="95:5" pos:end="95:5">*</operator><name pos:start="95:6" pos:end="95:14">got_frame</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <literal type="number" pos:start="95:18" pos:end="95:18">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:30"><expr pos:start="97:5" pos:end="97:29"><operator pos:start="97:5" pos:end="97:5">*</operator><operator pos:start="97:6" pos:end="97:6">(</operator><name pos:start="97:7" pos:end="97:13">AVFrame</name><operator pos:start="97:14" pos:end="97:14">*</operator><operator pos:start="97:15" pos:end="97:15">)</operator><name pos:start="97:16" pos:end="97:19">data</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <operator pos:start="97:23" pos:end="97:23">*</operator><name pos:start="97:24" pos:end="97:29"><name pos:start="97:24" pos:end="97:24">c</name><operator pos:start="97:25" pos:end="97:26">-&gt;</operator><name pos:start="97:27" pos:end="97:29">pic</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="103:42"><if pos:start="101:5" pos:end="103:42">if <condition pos:start="101:8" pos:end="101:25">(<expr pos:start="101:9" pos:end="101:24"><name pos:start="101:9" pos:end="101:18"><name pos:start="101:9" pos:end="101:9">c</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:18">version</name></name> <operator pos:start="101:20" pos:end="101:20">&gt;</operator> <literal type="char" pos:start="101:22" pos:end="101:24">'b'</literal></expr>)</condition><block type="pseudo" pos:start="103:9" pos:end="103:42"><block_content pos:start="103:9" pos:end="103:42">

        <expr_stmt pos:start="103:9" pos:end="103:42"><expr pos:start="103:9" pos:end="103:41"><call pos:start="103:9" pos:end="103:41"><name pos:start="103:9" pos:end="103:14">FFSWAP</name><argument_list pos:start="103:15" pos:end="103:41">(<argument pos:start="103:16" pos:end="103:23"><expr pos:start="103:16" pos:end="103:23"><name pos:start="103:16" pos:end="103:22">AVFrame</name><operator pos:start="103:23" pos:end="103:23">*</operator></expr></argument>, <argument pos:start="103:26" pos:end="103:31"><expr pos:start="103:26" pos:end="103:31"><name pos:start="103:26" pos:end="103:31"><name pos:start="103:26" pos:end="103:26">c</name><operator pos:start="103:27" pos:end="103:28">-&gt;</operator><name pos:start="103:29" pos:end="103:31">pic</name></name></expr></argument>, <argument pos:start="103:34" pos:end="103:40"><expr pos:start="103:34" pos:end="103:40"><name pos:start="103:34" pos:end="103:40"><name pos:start="103:34" pos:end="103:34">c</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:40">last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="107:5" pos:end="107:63">/* always report that the buffer was completely consumed */</comment>

    <return pos:start="109:5" pos:end="109:21">return <expr pos:start="109:12" pos:end="109:20"><name pos:start="109:12" pos:end="109:20"><name pos:start="109:12" pos:end="109:14">pkt</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:20">size</name></name></expr>;</return>

</block_content>}</block></function>
</unit>
