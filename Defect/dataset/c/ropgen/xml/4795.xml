<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4795.c" pos:tabs="8"><function pos:start="1:1" pos:end="459:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">decode_chunks</name><parameter_list pos:start="1:25" pos:end="5:58">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:41"><decl pos:start="3:26" pos:end="3:41"><type pos:start="3:26" pos:end="3:41"><name pos:start="3:26" pos:end="3:32">AVFrame</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:41">picture</name></decl></parameter>, <parameter pos:start="3:44" pos:end="3:58"><decl pos:start="3:44" pos:end="3:58"><type pos:start="3:44" pos:end="3:58"><name pos:start="3:44" pos:end="3:46">int</name> <modifier pos:start="3:48" pos:end="3:48">*</modifier></type><name pos:start="3:49" pos:end="3:58">got_output</name></decl></parameter>,

                         <parameter pos:start="5:26" pos:end="5:43"><decl pos:start="5:26" pos:end="5:43"><type pos:start="5:26" pos:end="5:43"><specifier pos:start="5:26" pos:end="5:30">const</specifier> <name pos:start="5:32" pos:end="5:38">uint8_t</name> <modifier pos:start="5:40" pos:end="5:40">*</modifier></type><name pos:start="5:41" pos:end="5:43">buf</name></decl></parameter>, <parameter pos:start="5:46" pos:end="5:57"><decl pos:start="5:46" pos:end="5:57"><type pos:start="5:46" pos:end="5:57"><name pos:start="5:46" pos:end="5:48">int</name></type> <name pos:start="5:50" pos:end="5:57">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="459:1">{<block_content pos:start="9:5" pos:end="457:5">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:18"><name pos:start="9:5" pos:end="9:16">Mpeg1Context</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:19">s</name> <init pos:start="9:21" pos:end="9:38">= <expr pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:38"><name pos:start="9:23" pos:end="9:27">avctx</name><operator pos:start="9:28" pos:end="9:29">-&gt;</operator><name pos:start="9:30" pos:end="9:38">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:42"><decl pos:start="11:5" pos:end="11:41"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">MpegEncContext</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:22">s2</name> <init pos:start="11:24" pos:end="11:41">= <expr pos:start="11:26" pos:end="11:41"><operator pos:start="11:26" pos:end="11:26">&amp;</operator><name pos:start="11:27" pos:end="11:41"><name pos:start="11:27" pos:end="11:27">s</name><operator pos:start="11:28" pos:end="11:29">-&gt;</operator><name pos:start="11:30" pos:end="11:41">mpeg_enc_ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:19"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:17">uint8_t</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:26">buf_ptr</name> <init pos:start="13:28" pos:end="13:32">= <expr pos:start="13:30" pos:end="13:32"><name pos:start="13:30" pos:end="13:32">buf</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:44"><decl pos:start="15:5" pos:end="15:43"><type pos:start="15:5" pos:end="15:19"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:17">uint8_t</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:26">buf_end</name> <init pos:start="15:28" pos:end="15:43">= <expr pos:start="15:30" pos:end="15:43"><name pos:start="15:30" pos:end="15:32">buf</name> <operator pos:start="15:34" pos:end="15:34">+</operator> <name pos:start="15:36" pos:end="15:43">buf_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>, <decl pos:start="17:14" pos:end="17:23"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:23">input_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:22"><decl pos:start="19:5" pos:end="19:21"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:17">last_code</name> <init pos:start="19:19" pos:end="19:21">= <expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="23:5" pos:end="457:5">for <control pos:start="23:9" pos:end="23:12">(<init pos:start="23:10" pos:end="23:10">;</init><condition pos:start="23:11" pos:end="23:11">;</condition><incr/>)</control> <block pos:start="23:14" pos:end="457:5">{<block_content pos:start="27:9" pos:end="455:9">

        <comment type="block" pos:start="25:9" pos:end="25:34">/* find next start code */</comment>

        <decl_stmt pos:start="27:9" pos:end="27:33"><decl pos:start="27:9" pos:end="27:32"><type pos:start="27:9" pos:end="27:16"><name pos:start="27:9" pos:end="27:16">uint32_t</name></type> <name pos:start="27:18" pos:end="27:27">start_code</name> <init pos:start="27:29" pos:end="27:32">= <expr pos:start="27:31" pos:end="27:32"><operator pos:start="27:31" pos:end="27:31">-</operator><literal type="number" pos:start="27:32" pos:end="27:32">1</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:76"><expr pos:start="29:9" pos:end="29:75"><name pos:start="29:9" pos:end="29:15">buf_ptr</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:75"><name pos:start="29:19" pos:end="29:44">avpriv_mpv_find_start_code</name><argument_list pos:start="29:45" pos:end="29:75">(<argument pos:start="29:46" pos:end="29:52"><expr pos:start="29:46" pos:end="29:52"><name pos:start="29:46" pos:end="29:52">buf_ptr</name></expr></argument>, <argument pos:start="29:55" pos:end="29:61"><expr pos:start="29:55" pos:end="29:61"><name pos:start="29:55" pos:end="29:61">buf_end</name></expr></argument>, <argument pos:start="29:64" pos:end="29:74"><expr pos:start="29:64" pos:end="29:74"><operator pos:start="29:64" pos:end="29:64">&amp;</operator><name pos:start="29:65" pos:end="29:74">start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="71:9"><if pos:start="31:9" pos:end="71:9">if <condition pos:start="31:12" pos:end="31:31">(<expr pos:start="31:13" pos:end="31:30"><name pos:start="31:13" pos:end="31:22">start_code</name> <operator pos:start="31:24" pos:end="31:24">&gt;</operator> <literal type="number" pos:start="31:26" pos:end="31:30">0x1ff</literal></expr>)</condition> <block pos:start="31:33" pos:end="71:9">{<block_content pos:start="33:13" pos:end="69:74">

            <if_stmt pos:start="33:13" pos:end="65:13"><if pos:start="33:13" pos:end="65:13">if <condition pos:start="33:16" pos:end="33:93">(<expr pos:start="33:17" pos:end="33:92"><name pos:start="33:17" pos:end="33:29"><name pos:start="33:17" pos:end="33:18">s2</name><operator pos:start="33:19" pos:end="33:20">-&gt;</operator><name pos:start="33:21" pos:end="33:29">pict_type</name></name> <operator pos:start="33:31" pos:end="33:32">!=</operator> <name pos:start="33:34" pos:end="33:50">AV_PICTURE_TYPE_B</name> <operator pos:start="33:52" pos:end="33:53">||</operator> <name pos:start="33:55" pos:end="33:71"><name pos:start="33:55" pos:end="33:59">avctx</name><operator pos:start="33:60" pos:end="33:61">-&gt;</operator><name pos:start="33:62" pos:end="33:71">skip_frame</name></name> <operator pos:start="33:73" pos:end="33:74">&lt;=</operator> <name pos:start="33:76" pos:end="33:92">AVDISCARD_DEFAULT</name></expr>)</condition> <block pos:start="33:95" pos:end="65:13">{<block_content pos:start="35:17" pos:end="63:17">

                <if_stmt pos:start="35:17" pos:end="47:17"><if pos:start="35:17" pos:end="47:17">if <condition pos:start="35:20" pos:end="35:82">(<expr pos:start="35:21" pos:end="35:81"><name pos:start="35:21" pos:end="35:32">HAVE_THREADS</name> <operator pos:start="35:34" pos:end="35:35">&amp;&amp;</operator> <operator pos:start="35:37" pos:end="35:37">(</operator><name pos:start="35:38" pos:end="35:62"><name pos:start="35:38" pos:end="35:42">avctx</name><operator pos:start="35:43" pos:end="35:44">-&gt;</operator><name pos:start="35:45" pos:end="35:62">active_thread_type</name></name> <operator pos:start="35:64" pos:end="35:64">&amp;</operator> <name pos:start="35:66" pos:end="35:80">FF_THREAD_SLICE</name><operator pos:start="35:81" pos:end="35:81">)</operator></expr>)</condition> <block pos:start="35:84" pos:end="47:17">{<block_content pos:start="37:21" pos:end="45:78">

                    <decl_stmt pos:start="37:21" pos:end="37:26"><decl pos:start="37:21" pos:end="37:25"><type pos:start="37:21" pos:end="37:23"><name pos:start="37:21" pos:end="37:23">int</name></type> <name pos:start="37:25" pos:end="37:25">i</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="41:21" pos:end="41:125"><expr pos:start="41:21" pos:end="41:124"><call pos:start="41:21" pos:end="41:124"><name pos:start="41:21" pos:end="41:34"><name pos:start="41:21" pos:end="41:25">avctx</name><operator pos:start="41:26" pos:end="41:27">-&gt;</operator><name pos:start="41:28" pos:end="41:34">execute</name></name><argument_list pos:start="41:35" pos:end="41:124">(<argument pos:start="41:36" pos:end="41:40"><expr pos:start="41:36" pos:end="41:40"><name pos:start="41:36" pos:end="41:40">avctx</name></expr></argument>, <argument pos:start="41:43" pos:end="41:61"><expr pos:start="41:43" pos:end="41:61"><name pos:start="41:43" pos:end="41:61">slice_decode_thread</name></expr></argument>,  <argument pos:start="41:65" pos:end="41:86"><expr pos:start="41:65" pos:end="41:86"><operator pos:start="41:65" pos:end="41:65">&amp;</operator><name pos:start="41:66" pos:end="41:86"><name pos:start="41:66" pos:end="41:67">s2</name><operator pos:start="41:68" pos:end="41:69">-&gt;</operator><name pos:start="41:70" pos:end="41:83">thread_context</name><index pos:start="41:84" pos:end="41:86">[<expr pos:start="41:85" pos:end="41:85"><literal type="number" pos:start="41:85" pos:end="41:85">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="41:89" pos:end="41:92"><expr pos:start="41:89" pos:end="41:92"><name pos:start="41:89" pos:end="41:92">NULL</name></expr></argument>, <argument pos:start="41:95" pos:end="41:108"><expr pos:start="41:95" pos:end="41:108"><name pos:start="41:95" pos:end="41:108"><name pos:start="41:95" pos:end="41:95">s</name><operator pos:start="41:96" pos:end="41:97">-&gt;</operator><name pos:start="41:98" pos:end="41:108">slice_count</name></name></expr></argument>, <argument pos:start="41:111" pos:end="41:123"><expr pos:start="41:111" pos:end="41:123"><sizeof pos:start="41:111" pos:end="41:123">sizeof<argument_list pos:start="41:117" pos:end="41:123">(<argument pos:start="41:118" pos:end="41:122"><expr pos:start="41:118" pos:end="41:122"><name pos:start="41:118" pos:end="41:121">void</name><operator pos:start="41:122" pos:end="41:122">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for pos:start="43:21" pos:end="45:78">for <control pos:start="43:25" pos:end="43:56">(<init pos:start="43:26" pos:end="43:31"><expr pos:start="43:26" pos:end="43:30"><name pos:start="43:26" pos:end="43:26">i</name> <operator pos:start="43:28" pos:end="43:28">=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr>;</init> <condition pos:start="43:33" pos:end="43:51"><expr pos:start="43:33" pos:end="43:50"><name pos:start="43:33" pos:end="43:33">i</name> <operator pos:start="43:35" pos:end="43:35">&lt;</operator> <name pos:start="43:37" pos:end="43:50"><name pos:start="43:37" pos:end="43:37">s</name><operator pos:start="43:38" pos:end="43:39">-&gt;</operator><name pos:start="43:40" pos:end="43:50">slice_count</name></name></expr>;</condition> <incr pos:start="43:53" pos:end="43:55"><expr pos:start="43:53" pos:end="43:55"><name pos:start="43:53" pos:end="43:53">i</name><operator pos:start="43:54" pos:end="43:55">++</operator></expr></incr>)</control><block type="pseudo" pos:start="45:25" pos:end="45:78"><block_content pos:start="45:25" pos:end="45:78">

                        <expr_stmt pos:start="45:25" pos:end="45:78"><expr pos:start="45:25" pos:end="45:77"><name pos:start="45:25" pos:end="45:39"><name pos:start="45:25" pos:end="45:26">s2</name><operator pos:start="45:27" pos:end="45:28">-&gt;</operator><name pos:start="45:29" pos:end="45:39">error_count</name></name> <operator pos:start="45:41" pos:end="45:42">+=</operator> <name pos:start="45:44" pos:end="45:64"><name pos:start="45:44" pos:end="45:45">s2</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:61">thread_context</name><index pos:start="45:62" pos:end="45:64">[<expr pos:start="45:63" pos:end="45:63"><name pos:start="45:63" pos:end="45:63">i</name></expr>]</index></name><operator pos:start="45:65" pos:end="45:66">-&gt;</operator><name pos:start="45:67" pos:end="45:77">error_count</name></expr>;</expr_stmt></block_content></block></for>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="51:17" pos:end="53:86"><if pos:start="51:17" pos:end="53:86">if <condition pos:start="51:20" pos:end="51:102">(<expr pos:start="51:21" pos:end="51:101"><name pos:start="51:21" pos:end="51:45">CONFIG_MPEG_VDPAU_DECODER</name> <operator pos:start="51:47" pos:end="51:48">&amp;&amp;</operator> <name pos:start="51:50" pos:end="51:75"><name pos:start="51:50" pos:end="51:54">avctx</name><operator pos:start="51:55" pos:end="51:56">-&gt;</operator><name pos:start="51:57" pos:end="51:61">codec</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:75">capabilities</name></name> <operator pos:start="51:77" pos:end="51:77">&amp;</operator> <name pos:start="51:79" pos:end="51:101">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:86"><block_content pos:start="53:21" pos:end="53:86">

                    <expr_stmt pos:start="53:21" pos:end="53:86"><expr pos:start="53:21" pos:end="53:85"><call pos:start="53:21" pos:end="53:85"><name pos:start="53:21" pos:end="53:50">ff_vdpau_mpeg_picture_complete</name><argument_list pos:start="53:51" pos:end="53:85">(<argument pos:start="53:52" pos:end="53:53"><expr pos:start="53:52" pos:end="53:53"><name pos:start="53:52" pos:end="53:53">s2</name></expr></argument>, <argument pos:start="53:56" pos:end="53:58"><expr pos:start="53:56" pos:end="53:58"><name pos:start="53:56" pos:end="53:58">buf</name></expr></argument>, <argument pos:start="53:61" pos:end="53:68"><expr pos:start="53:61" pos:end="53:68"><name pos:start="53:61" pos:end="53:68">buf_size</name></expr></argument>, <argument pos:start="53:71" pos:end="53:84"><expr pos:start="53:71" pos:end="53:84"><name pos:start="53:71" pos:end="53:84"><name pos:start="53:71" pos:end="53:71">s</name><operator pos:start="53:72" pos:end="53:73">-&gt;</operator><name pos:start="53:74" pos:end="53:84">slice_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="57:17" pos:end="63:17"><if pos:start="57:17" pos:end="63:17">if <condition pos:start="57:20" pos:end="57:46">(<expr pos:start="57:21" pos:end="57:45"><call pos:start="57:21" pos:end="57:45"><name pos:start="57:21" pos:end="57:29">slice_end</name><argument_list pos:start="57:30" pos:end="57:45">(<argument pos:start="57:31" pos:end="57:35"><expr pos:start="57:31" pos:end="57:35"><name pos:start="57:31" pos:end="57:35">avctx</name></expr></argument>, <argument pos:start="57:38" pos:end="57:44"><expr pos:start="57:38" pos:end="57:44"><name pos:start="57:38" pos:end="57:44">picture</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:48" pos:end="63:17">{<block_content pos:start="59:21" pos:end="61:40">

                    <if_stmt pos:start="59:21" pos:end="61:40"><if pos:start="59:21" pos:end="61:40">if <condition pos:start="59:24" pos:end="59:62">(<expr pos:start="59:25" pos:end="59:61"><name pos:start="59:25" pos:end="59:44"><name pos:start="59:25" pos:end="59:26">s2</name><operator pos:start="59:27" pos:end="59:28">-&gt;</operator><name pos:start="59:29" pos:end="59:44">last_picture_ptr</name></name> <operator pos:start="59:46" pos:end="59:47">||</operator> <name pos:start="59:49" pos:end="59:61"><name pos:start="59:49" pos:end="59:50">s2</name><operator pos:start="59:51" pos:end="59:52">-&gt;</operator><name pos:start="59:53" pos:end="59:61">low_delay</name></name></expr>)</condition><block type="pseudo" pos:start="61:25" pos:end="61:40"><block_content pos:start="61:25" pos:end="61:40"> <comment type="line" pos:start="59:64" pos:end="59:112">//FIXME merge with the stuff in mpeg_decode_slice</comment>

                        <expr_stmt pos:start="61:25" pos:end="61:40"><expr pos:start="61:25" pos:end="61:39"><operator pos:start="61:25" pos:end="61:25">*</operator><name pos:start="61:26" pos:end="61:35">got_output</name> <operator pos:start="61:37" pos:end="61:37">=</operator> <literal type="number" pos:start="61:39" pos:end="61:39">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:30"><expr pos:start="67:13" pos:end="67:29"><name pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:14">s2</name><operator pos:start="67:15" pos:end="67:16">-&gt;</operator><name pos:start="67:17" pos:end="67:25">pict_type</name></name> <operator pos:start="67:27" pos:end="67:27">=</operator> <literal type="number" pos:start="67:29" pos:end="67:29">0</literal></expr>;</expr_stmt>

            <return pos:start="69:13" pos:end="69:74">return <expr pos:start="69:20" pos:end="69:73"><call pos:start="69:20" pos:end="69:73"><name pos:start="69:20" pos:end="69:24">FFMAX</name><argument_list pos:start="69:25" pos:end="69:73">(<argument pos:start="69:26" pos:end="69:26"><expr pos:start="69:26" pos:end="69:26"><literal type="number" pos:start="69:26" pos:end="69:26">0</literal></expr></argument>, <argument pos:start="69:29" pos:end="69:72"><expr pos:start="69:29" pos:end="69:72"><name pos:start="69:29" pos:end="69:35">buf_ptr</name> <operator pos:start="69:37" pos:end="69:37">-</operator> <name pos:start="69:39" pos:end="69:41">buf</name> <operator pos:start="69:43" pos:end="69:43">-</operator> <name pos:start="69:45" pos:end="69:72"><name pos:start="69:45" pos:end="69:46">s2</name><operator pos:start="69:47" pos:end="69:48">-&gt;</operator><name pos:start="69:49" pos:end="69:61">parse_context</name><operator pos:start="69:62" pos:end="69:62">.</operator><name pos:start="69:63" pos:end="69:72">last_index</name></name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:18">input_size</name> <operator pos:start="75:20" pos:end="75:20">=</operator> <name pos:start="75:22" pos:end="75:28">buf_end</name> <operator pos:start="75:30" pos:end="75:30">-</operator> <name pos:start="75:32" pos:end="75:38">buf_ptr</name></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="83:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:46">(<expr pos:start="79:13" pos:end="79:45"><name pos:start="79:13" pos:end="79:24"><name pos:start="79:13" pos:end="79:17">avctx</name><operator pos:start="79:18" pos:end="79:19">-&gt;</operator><name pos:start="79:20" pos:end="79:24">debug</name></name> <operator pos:start="79:26" pos:end="79:26">&amp;</operator> <name pos:start="79:28" pos:end="79:45">FF_DEBUG_STARTCODE</name></expr>)</condition> <block pos:start="79:48" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:101">

            <expr_stmt pos:start="81:13" pos:end="81:101"><expr pos:start="81:13" pos:end="81:100"><call pos:start="81:13" pos:end="81:100"><name pos:start="81:13" pos:end="81:18">av_log</name><argument_list pos:start="81:19" pos:end="81:100">(<argument pos:start="81:20" pos:end="81:24"><expr pos:start="81:20" pos:end="81:24"><name pos:start="81:20" pos:end="81:24">avctx</name></expr></argument>, <argument pos:start="81:27" pos:end="81:38"><expr pos:start="81:27" pos:end="81:38"><name pos:start="81:27" pos:end="81:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="81:41" pos:end="81:62"><expr pos:start="81:41" pos:end="81:62"><literal type="string" pos:start="81:41" pos:end="81:62">"%3X at %td left %d\n"</literal></expr></argument>, <argument pos:start="81:65" pos:end="81:74"><expr pos:start="81:65" pos:end="81:74"><name pos:start="81:65" pos:end="81:74">start_code</name></expr></argument>, <argument pos:start="81:77" pos:end="81:87"><expr pos:start="81:77" pos:end="81:87"><name pos:start="81:77" pos:end="81:83">buf_ptr</name><operator pos:start="81:84" pos:end="81:84">-</operator><name pos:start="81:85" pos:end="81:87">buf</name></expr></argument>, <argument pos:start="81:90" pos:end="81:99"><expr pos:start="81:90" pos:end="81:99"><name pos:start="81:90" pos:end="81:99">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:46">/* prepare data for next start code */</comment>

        <switch pos:start="89:9" pos:end="455:9">switch <condition pos:start="89:16" pos:end="89:27">(<expr pos:start="89:17" pos:end="89:26"><name pos:start="89:17" pos:end="89:26">start_code</name></expr>)</condition> <block pos:start="89:29" pos:end="455:9">{<block_content pos:start="91:9" pos:end="453:18">

        <case pos:start="91:9" pos:end="91:28">case <expr pos:start="91:14" pos:end="91:27"><name pos:start="91:14" pos:end="91:27">SEQ_START_CODE</name></expr>:</case>

            <if_stmt pos:start="93:13" pos:end="107:13"><if pos:start="93:13" pos:end="99:13">if <condition pos:start="93:16" pos:end="93:31">(<expr pos:start="93:17" pos:end="93:30"><name pos:start="93:17" pos:end="93:25">last_code</name> <operator pos:start="93:27" pos:end="93:28">==</operator> <literal type="number" pos:start="93:30" pos:end="93:30">0</literal></expr>)</condition> <block pos:start="93:33" pos:end="99:13">{<block_content pos:start="95:17" pos:end="97:26">

                <expr_stmt pos:start="95:17" pos:end="95:66"><expr pos:start="95:17" pos:end="95:65"><call pos:start="95:17" pos:end="95:65"><name pos:start="95:17" pos:end="95:37">mpeg1_decode_sequence</name><argument_list pos:start="95:38" pos:end="95:65">(<argument pos:start="95:39" pos:end="95:43"><expr pos:start="95:39" pos:end="95:43"><name pos:start="95:39" pos:end="95:43">avctx</name></expr></argument>, <argument pos:start="95:46" pos:end="95:52"><expr pos:start="95:46" pos:end="95:52"><name pos:start="95:46" pos:end="95:52">buf_ptr</name></expr></argument>, <argument pos:start="95:55" pos:end="95:64"><expr pos:start="95:55" pos:end="95:64"><name pos:start="95:55" pos:end="95:64">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:26"><expr pos:start="97:17" pos:end="97:25"><name pos:start="97:17" pos:end="97:23"><name pos:start="97:17" pos:end="97:17">s</name><operator pos:start="97:18" pos:end="97:19">-&gt;</operator><name pos:start="97:20" pos:end="97:23">sync</name></name><operator pos:start="97:24" pos:end="97:24">=</operator><literal type="number" pos:start="97:25" pos:end="97:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="99:15" pos:end="107:13">else <block pos:start="99:20" pos:end="107:13">{<block_content pos:start="101:17" pos:end="105:47">

                <expr_stmt pos:start="101:17" pos:end="101:93"><expr pos:start="101:17" pos:end="101:92"><call pos:start="101:17" pos:end="101:92"><name pos:start="101:17" pos:end="101:22">av_log</name><argument_list pos:start="101:23" pos:end="101:92">(<argument pos:start="101:24" pos:end="101:28"><expr pos:start="101:24" pos:end="101:28"><name pos:start="101:24" pos:end="101:28">avctx</name></expr></argument>, <argument pos:start="101:31" pos:end="101:42"><expr pos:start="101:31" pos:end="101:42"><name pos:start="101:31" pos:end="101:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="101:45" pos:end="101:80"><expr pos:start="101:45" pos:end="101:80"><literal type="string" pos:start="101:45" pos:end="101:80">"ignoring SEQ_START_CODE after %X\n"</literal></expr></argument>, <argument pos:start="101:83" pos:end="101:91"><expr pos:start="101:83" pos:end="101:91"><name pos:start="101:83" pos:end="101:91">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="103:17" pos:end="105:47"><if pos:start="103:17" pos:end="105:47">if <condition pos:start="103:20" pos:end="103:59">(<expr pos:start="103:21" pos:end="103:58"><name pos:start="103:21" pos:end="103:42"><name pos:start="103:21" pos:end="103:25">avctx</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:42">err_recognition</name></name> <operator pos:start="103:44" pos:end="103:44">&amp;</operator> <name pos:start="103:46" pos:end="103:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="105:21" pos:end="105:47"><block_content pos:start="105:21" pos:end="105:47">

                    <return pos:start="105:21" pos:end="105:47">return <expr pos:start="105:28" pos:end="105:46"><name pos:start="105:28" pos:end="105:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="109:13" pos:end="109:18">break;</break>



        <case pos:start="113:9" pos:end="113:32">case <expr pos:start="113:14" pos:end="113:31"><name pos:start="113:14" pos:end="113:31">PICTURE_START_CODE</name></expr>:</case>

            <if_stmt pos:start="115:13" pos:end="133:13"><if pos:start="115:13" pos:end="133:13">if <condition pos:start="115:16" pos:end="115:96">(<expr pos:start="115:17" pos:end="115:95"><name pos:start="115:17" pos:end="115:28">HAVE_THREADS</name> <operator pos:start="115:30" pos:end="115:31">&amp;&amp;</operator> <operator pos:start="115:33" pos:end="115:33">(</operator><name pos:start="115:34" pos:end="115:58"><name pos:start="115:34" pos:end="115:38">avctx</name><operator pos:start="115:39" pos:end="115:40">-&gt;</operator><name pos:start="115:41" pos:end="115:58">active_thread_type</name></name> <operator pos:start="115:60" pos:end="115:60">&amp;</operator> <name pos:start="115:62" pos:end="115:76">FF_THREAD_SLICE</name><operator pos:start="115:77" pos:end="115:77">)</operator> <operator pos:start="115:79" pos:end="115:80">&amp;&amp;</operator> <name pos:start="115:82" pos:end="115:95"><name pos:start="115:82" pos:end="115:82">s</name><operator pos:start="115:83" pos:end="115:84">-&gt;</operator><name pos:start="115:85" pos:end="115:95">slice_count</name></name></expr>)</condition> <block pos:start="115:98" pos:end="133:13">{<block_content pos:start="117:17" pos:end="131:35">

                <decl_stmt pos:start="117:17" pos:end="117:22"><decl pos:start="117:17" pos:end="117:21"><type pos:start="117:17" pos:end="117:19"><name pos:start="117:17" pos:end="117:19">int</name></type> <name pos:start="117:21" pos:end="117:21">i</name></decl>;</decl_stmt>



                <expr_stmt pos:start="121:17" pos:end="125:62"><expr pos:start="121:17" pos:end="125:61"><call pos:start="121:17" pos:end="125:61"><name pos:start="121:17" pos:end="121:30"><name pos:start="121:17" pos:end="121:21">avctx</name><operator pos:start="121:22" pos:end="121:23">-&gt;</operator><name pos:start="121:24" pos:end="121:30">execute</name></name><argument_list pos:start="121:31" pos:end="125:61">(<argument pos:start="121:32" pos:end="121:36"><expr pos:start="121:32" pos:end="121:36"><name pos:start="121:32" pos:end="121:36">avctx</name></expr></argument>, <argument pos:start="121:39" pos:end="121:57"><expr pos:start="121:39" pos:end="121:57"><name pos:start="121:39" pos:end="121:57">slice_decode_thread</name></expr></argument>,

                               <argument pos:start="123:32" pos:end="123:49"><expr pos:start="123:32" pos:end="123:49"><name pos:start="123:32" pos:end="123:49"><name pos:start="123:32" pos:end="123:33">s2</name><operator pos:start="123:34" pos:end="123:35">-&gt;</operator><name pos:start="123:36" pos:end="123:49">thread_context</name></name></expr></argument>, <argument pos:start="123:52" pos:end="123:55"><expr pos:start="123:52" pos:end="123:55"><name pos:start="123:52" pos:end="123:55">NULL</name></expr></argument>,

                               <argument pos:start="125:32" pos:end="125:45"><expr pos:start="125:32" pos:end="125:45"><name pos:start="125:32" pos:end="125:45"><name pos:start="125:32" pos:end="125:32">s</name><operator pos:start="125:33" pos:end="125:34">-&gt;</operator><name pos:start="125:35" pos:end="125:45">slice_count</name></name></expr></argument>, <argument pos:start="125:48" pos:end="125:60"><expr pos:start="125:48" pos:end="125:60"><sizeof pos:start="125:48" pos:end="125:60">sizeof<argument_list pos:start="125:54" pos:end="125:60">(<argument pos:start="125:55" pos:end="125:59"><expr pos:start="125:55" pos:end="125:59"><name pos:start="125:55" pos:end="125:58">void</name><operator pos:start="125:59" pos:end="125:59">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for pos:start="127:17" pos:end="129:74">for <control pos:start="127:21" pos:end="127:52">(<init pos:start="127:22" pos:end="127:27"><expr pos:start="127:22" pos:end="127:26"><name pos:start="127:22" pos:end="127:22">i</name> <operator pos:start="127:24" pos:end="127:24">=</operator> <literal type="number" pos:start="127:26" pos:end="127:26">0</literal></expr>;</init> <condition pos:start="127:29" pos:end="127:47"><expr pos:start="127:29" pos:end="127:46"><name pos:start="127:29" pos:end="127:29">i</name> <operator pos:start="127:31" pos:end="127:31">&lt;</operator> <name pos:start="127:33" pos:end="127:46"><name pos:start="127:33" pos:end="127:33">s</name><operator pos:start="127:34" pos:end="127:35">-&gt;</operator><name pos:start="127:36" pos:end="127:46">slice_count</name></name></expr>;</condition> <incr pos:start="127:49" pos:end="127:51"><expr pos:start="127:49" pos:end="127:51"><name pos:start="127:49" pos:end="127:49">i</name><operator pos:start="127:50" pos:end="127:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="129:21" pos:end="129:74"><block_content pos:start="129:21" pos:end="129:74">

                    <expr_stmt pos:start="129:21" pos:end="129:74"><expr pos:start="129:21" pos:end="129:73"><name pos:start="129:21" pos:end="129:35"><name pos:start="129:21" pos:end="129:22">s2</name><operator pos:start="129:23" pos:end="129:24">-&gt;</operator><name pos:start="129:25" pos:end="129:35">error_count</name></name> <operator pos:start="129:37" pos:end="129:38">+=</operator> <name pos:start="129:40" pos:end="129:60"><name pos:start="129:40" pos:end="129:41">s2</name><operator pos:start="129:42" pos:end="129:43">-&gt;</operator><name pos:start="129:44" pos:end="129:57">thread_context</name><index pos:start="129:58" pos:end="129:60">[<expr pos:start="129:59" pos:end="129:59"><name pos:start="129:59" pos:end="129:59">i</name></expr>]</index></name><operator pos:start="129:61" pos:end="129:62">-&gt;</operator><name pos:start="129:63" pos:end="129:73">error_count</name></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt pos:start="131:17" pos:end="131:35"><expr pos:start="131:17" pos:end="131:34"><name pos:start="131:17" pos:end="131:30"><name pos:start="131:17" pos:end="131:17">s</name><operator pos:start="131:18" pos:end="131:19">-&gt;</operator><name pos:start="131:20" pos:end="131:30">slice_count</name></name> <operator pos:start="131:32" pos:end="131:32">=</operator> <literal type="number" pos:start="131:34" pos:end="131:34">0</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="135:13" pos:end="167:13"><if pos:start="135:13" pos:end="159:13">if <condition pos:start="135:16" pos:end="135:68">(<expr pos:start="135:17" pos:end="135:67"><name pos:start="135:17" pos:end="135:25">last_code</name> <operator pos:start="135:27" pos:end="135:28">==</operator> <literal type="number" pos:start="135:30" pos:end="135:30">0</literal> <operator pos:start="135:32" pos:end="135:33">||</operator> <name pos:start="135:35" pos:end="135:43">last_code</name> <operator pos:start="135:45" pos:end="135:46">==</operator> <name pos:start="135:48" pos:end="135:67">SLICE_MIN_START_CODE</name></expr>)</condition> <block pos:start="135:70" pos:end="159:13">{<block_content pos:start="137:17" pos:end="157:47">

                <expr_stmt pos:start="137:17" pos:end="137:50"><expr pos:start="137:17" pos:end="137:49"><name pos:start="137:17" pos:end="137:19">ret</name> <operator pos:start="137:21" pos:end="137:21">=</operator> <call pos:start="137:23" pos:end="137:49"><name pos:start="137:23" pos:end="137:42">mpeg_decode_postinit</name><argument_list pos:start="137:43" pos:end="137:49">(<argument pos:start="137:44" pos:end="137:48"><expr pos:start="137:44" pos:end="137:48"><name pos:start="137:44" pos:end="137:48">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="139:17" pos:end="145:17"><if pos:start="139:17" pos:end="145:17">if <condition pos:start="139:20" pos:end="139:28">(<expr pos:start="139:21" pos:end="139:27"><name pos:start="139:21" pos:end="139:23">ret</name> <operator pos:start="139:25" pos:end="139:25">&lt;</operator> <literal type="number" pos:start="139:27" pos:end="139:27">0</literal></expr>)</condition> <block pos:start="139:30" pos:end="145:17">{<block_content pos:start="141:21" pos:end="143:31">

                    <expr_stmt pos:start="141:21" pos:end="141:84"><expr pos:start="141:21" pos:end="141:83"><call pos:start="141:21" pos:end="141:83"><name pos:start="141:21" pos:end="141:26">av_log</name><argument_list pos:start="141:27" pos:end="141:83">(<argument pos:start="141:28" pos:end="141:32"><expr pos:start="141:28" pos:end="141:32"><name pos:start="141:28" pos:end="141:32">avctx</name></expr></argument>, <argument pos:start="141:35" pos:end="141:46"><expr pos:start="141:35" pos:end="141:46"><name pos:start="141:35" pos:end="141:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="141:49" pos:end="141:82"><expr pos:start="141:49" pos:end="141:82"><literal type="string" pos:start="141:49" pos:end="141:82">"mpeg_decode_postinit() failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="143:21" pos:end="143:31">return <expr pos:start="143:28" pos:end="143:30"><name pos:start="143:28" pos:end="143:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="149:17" pos:end="149:71">/* we have a complete image: we try to decompress it */</comment>

                <if_stmt pos:start="151:17" pos:end="153:38"><if pos:start="151:17" pos:end="153:38">if <condition pos:start="151:20" pos:end="151:73">(<expr pos:start="151:21" pos:end="151:72"><call pos:start="151:21" pos:end="151:68"><name pos:start="151:21" pos:end="151:40">mpeg1_decode_picture</name><argument_list pos:start="151:41" pos:end="151:68">(<argument pos:start="151:42" pos:end="151:46"><expr pos:start="151:42" pos:end="151:46"><name pos:start="151:42" pos:end="151:46">avctx</name></expr></argument>, <argument pos:start="151:49" pos:end="151:55"><expr pos:start="151:49" pos:end="151:55"><name pos:start="151:49" pos:end="151:55">buf_ptr</name></expr></argument>, <argument pos:start="151:58" pos:end="151:67"><expr pos:start="151:58" pos:end="151:67"><name pos:start="151:58" pos:end="151:67">input_size</name></expr></argument>)</argument_list></call> <operator pos:start="151:70" pos:end="151:70">&lt;</operator> <literal type="number" pos:start="151:72" pos:end="151:72">0</literal></expr>)</condition><block type="pseudo" pos:start="153:21" pos:end="153:38"><block_content pos:start="153:21" pos:end="153:38">

                    <expr_stmt pos:start="153:21" pos:end="153:38"><expr pos:start="153:21" pos:end="153:37"><name pos:start="153:21" pos:end="153:33"><name pos:start="153:21" pos:end="153:22">s2</name><operator pos:start="153:23" pos:end="153:24">-&gt;</operator><name pos:start="153:25" pos:end="153:33">pict_type</name></name> <operator pos:start="153:35" pos:end="153:35">=</operator> <literal type="number" pos:start="153:37" pos:end="153:37">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt pos:start="155:17" pos:end="155:36"><expr pos:start="155:17" pos:end="155:35"><name pos:start="155:17" pos:end="155:31"><name pos:start="155:17" pos:end="155:18">s2</name><operator pos:start="155:19" pos:end="155:20">-&gt;</operator><name pos:start="155:21" pos:end="155:31">first_slice</name></name> <operator pos:start="155:33" pos:end="155:33">=</operator> <literal type="number" pos:start="155:35" pos:end="155:35">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="157:17" pos:end="157:47"><expr pos:start="157:17" pos:end="157:46"><name pos:start="157:17" pos:end="157:25">last_code</name> <operator pos:start="157:27" pos:end="157:27">=</operator> <name pos:start="157:29" pos:end="157:46">PICTURE_START_CODE</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="159:15" pos:end="167:13">else <block pos:start="159:20" pos:end="167:13">{<block_content pos:start="161:17" pos:end="165:47">

                <expr_stmt pos:start="161:17" pos:end="161:82"><expr pos:start="161:17" pos:end="161:81"><call pos:start="161:17" pos:end="161:81"><name pos:start="161:17" pos:end="161:22">av_log</name><argument_list pos:start="161:23" pos:end="161:81">(<argument pos:start="161:24" pos:end="161:28"><expr pos:start="161:24" pos:end="161:28"><name pos:start="161:24" pos:end="161:28">avctx</name></expr></argument>, <argument pos:start="161:31" pos:end="161:42"><expr pos:start="161:31" pos:end="161:42"><name pos:start="161:31" pos:end="161:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="161:45" pos:end="161:69"><expr pos:start="161:45" pos:end="161:69"><literal type="string" pos:start="161:45" pos:end="161:69">"ignoring pic after %X\n"</literal></expr></argument>, <argument pos:start="161:72" pos:end="161:80"><expr pos:start="161:72" pos:end="161:80"><name pos:start="161:72" pos:end="161:80">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="163:17" pos:end="165:47"><if pos:start="163:17" pos:end="165:47">if <condition pos:start="163:20" pos:end="163:59">(<expr pos:start="163:21" pos:end="163:58"><name pos:start="163:21" pos:end="163:42"><name pos:start="163:21" pos:end="163:25">avctx</name><operator pos:start="163:26" pos:end="163:27">-&gt;</operator><name pos:start="163:28" pos:end="163:42">err_recognition</name></name> <operator pos:start="163:44" pos:end="163:44">&amp;</operator> <name pos:start="163:46" pos:end="163:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="165:21" pos:end="165:47"><block_content pos:start="165:21" pos:end="165:47">

                    <return pos:start="165:21" pos:end="165:47">return <expr pos:start="165:28" pos:end="165:46"><name pos:start="165:28" pos:end="165:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="169:13" pos:end="169:18">break;</break>

        <case pos:start="171:9" pos:end="171:28">case <expr pos:start="171:14" pos:end="171:27"><name pos:start="171:14" pos:end="171:27">EXT_START_CODE</name></expr>:</case>

            <expr_stmt pos:start="173:13" pos:end="173:58"><expr pos:start="173:13" pos:end="173:57"><call pos:start="173:13" pos:end="173:57"><name pos:start="173:13" pos:end="173:25">init_get_bits</name><argument_list pos:start="173:26" pos:end="173:57">(<argument pos:start="173:27" pos:end="173:33"><expr pos:start="173:27" pos:end="173:33"><operator pos:start="173:27" pos:end="173:27">&amp;</operator><name pos:start="173:28" pos:end="173:33"><name pos:start="173:28" pos:end="173:29">s2</name><operator pos:start="173:30" pos:end="173:31">-&gt;</operator><name pos:start="173:32" pos:end="173:33">gb</name></name></expr></argument>, <argument pos:start="173:36" pos:end="173:42"><expr pos:start="173:36" pos:end="173:42"><name pos:start="173:36" pos:end="173:42">buf_ptr</name></expr></argument>, <argument pos:start="173:45" pos:end="173:56"><expr pos:start="173:45" pos:end="173:56"><name pos:start="173:45" pos:end="173:54">input_size</name><operator pos:start="173:55" pos:end="173:55">*</operator><literal type="number" pos:start="173:56" pos:end="173:56">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <switch pos:start="177:13" pos:end="233:13">switch <condition pos:start="177:20" pos:end="177:41">(<expr pos:start="177:21" pos:end="177:40"><call pos:start="177:21" pos:end="177:40"><name pos:start="177:21" pos:end="177:28">get_bits</name><argument_list pos:start="177:29" pos:end="177:40">(<argument pos:start="177:30" pos:end="177:36"><expr pos:start="177:30" pos:end="177:36"><operator pos:start="177:30" pos:end="177:30">&amp;</operator><name pos:start="177:31" pos:end="177:36"><name pos:start="177:31" pos:end="177:32">s2</name><operator pos:start="177:33" pos:end="177:34">-&gt;</operator><name pos:start="177:35" pos:end="177:36">gb</name></name></expr></argument>, <argument pos:start="177:39" pos:end="177:39"><expr pos:start="177:39" pos:end="177:39"><literal type="number" pos:start="177:39" pos:end="177:39">4</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="177:43" pos:end="233:13">{<block_content pos:start="179:13" pos:end="231:22">

            <case pos:start="179:13" pos:end="179:21">case <expr pos:start="179:18" pos:end="179:20"><literal type="number" pos:start="179:18" pos:end="179:20">0x1</literal></expr>:</case>

                <if_stmt pos:start="181:17" pos:end="193:17"><if pos:start="181:17" pos:end="185:17">if <condition pos:start="181:20" pos:end="181:35">(<expr pos:start="181:21" pos:end="181:34"><name pos:start="181:21" pos:end="181:29">last_code</name> <operator pos:start="181:31" pos:end="181:32">==</operator> <literal type="number" pos:start="181:34" pos:end="181:34">0</literal></expr>)</condition> <block pos:start="181:37" pos:end="185:17">{<block_content pos:start="183:17" pos:end="183:50">

                <expr_stmt pos:start="183:17" pos:end="183:50"><expr pos:start="183:17" pos:end="183:49"><call pos:start="183:17" pos:end="183:49"><name pos:start="183:17" pos:end="183:46">mpeg_decode_sequence_extension</name><argument_list pos:start="183:47" pos:end="183:49">(<argument pos:start="183:48" pos:end="183:48"><expr pos:start="183:48" pos:end="183:48"><name pos:start="183:48" pos:end="183:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="185:19" pos:end="193:17">else <block pos:start="185:24" pos:end="193:17">{<block_content pos:start="187:21" pos:end="191:51">

                    <expr_stmt pos:start="187:21" pos:end="187:90"><expr pos:start="187:21" pos:end="187:89"><call pos:start="187:21" pos:end="187:89"><name pos:start="187:21" pos:end="187:26">av_log</name><argument_list pos:start="187:27" pos:end="187:89">(<argument pos:start="187:28" pos:end="187:32"><expr pos:start="187:28" pos:end="187:32"><name pos:start="187:28" pos:end="187:32">avctx</name></expr></argument>, <argument pos:start="187:35" pos:end="187:46"><expr pos:start="187:35" pos:end="187:46"><name pos:start="187:35" pos:end="187:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="187:49" pos:end="187:77"><expr pos:start="187:49" pos:end="187:77"><literal type="string" pos:start="187:49" pos:end="187:77">"ignoring seq ext after %X\n"</literal></expr></argument>, <argument pos:start="187:80" pos:end="187:88"><expr pos:start="187:80" pos:end="187:88"><name pos:start="187:80" pos:end="187:88">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="189:21" pos:end="191:51"><if pos:start="189:21" pos:end="191:51">if <condition pos:start="189:24" pos:end="189:63">(<expr pos:start="189:25" pos:end="189:62"><name pos:start="189:25" pos:end="189:46"><name pos:start="189:25" pos:end="189:29">avctx</name><operator pos:start="189:30" pos:end="189:31">-&gt;</operator><name pos:start="189:32" pos:end="189:46">err_recognition</name></name> <operator pos:start="189:48" pos:end="189:48">&amp;</operator> <name pos:start="189:50" pos:end="189:62">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="191:25" pos:end="191:51"><block_content pos:start="191:25" pos:end="191:51">

                        <return pos:start="191:25" pos:end="191:51">return <expr pos:start="191:32" pos:end="191:50"><name pos:start="191:32" pos:end="191:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="195:17" pos:end="195:22">break;</break>

            <case pos:start="197:13" pos:end="197:21">case <expr pos:start="197:18" pos:end="197:20"><literal type="number" pos:start="197:18" pos:end="197:20">0x2</literal></expr>:</case>

                <expr_stmt pos:start="199:17" pos:end="199:58"><expr pos:start="199:17" pos:end="199:57"><call pos:start="199:17" pos:end="199:57"><name pos:start="199:17" pos:end="199:54">mpeg_decode_sequence_display_extension</name><argument_list pos:start="199:55" pos:end="199:57">(<argument pos:start="199:56" pos:end="199:56"><expr pos:start="199:56" pos:end="199:56"><name pos:start="199:56" pos:end="199:56">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="201:17" pos:end="201:22">break;</break>

            <case pos:start="203:13" pos:end="203:21">case <expr pos:start="203:18" pos:end="203:20"><literal type="number" pos:start="203:18" pos:end="203:20">0x3</literal></expr>:</case>

                <expr_stmt pos:start="205:17" pos:end="205:55"><expr pos:start="205:17" pos:end="205:54"><call pos:start="205:17" pos:end="205:54"><name pos:start="205:17" pos:end="205:50">mpeg_decode_quant_matrix_extension</name><argument_list pos:start="205:51" pos:end="205:54">(<argument pos:start="205:52" pos:end="205:53"><expr pos:start="205:52" pos:end="205:53"><name pos:start="205:52" pos:end="205:53">s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="207:17" pos:end="207:22">break;</break>

            <case pos:start="209:13" pos:end="209:21">case <expr pos:start="209:18" pos:end="209:20"><literal type="number" pos:start="209:18" pos:end="209:20">0x7</literal></expr>:</case>

                <expr_stmt pos:start="211:17" pos:end="211:57"><expr pos:start="211:17" pos:end="211:56"><call pos:start="211:17" pos:end="211:56"><name pos:start="211:17" pos:end="211:53">mpeg_decode_picture_display_extension</name><argument_list pos:start="211:54" pos:end="211:56">(<argument pos:start="211:55" pos:end="211:55"><expr pos:start="211:55" pos:end="211:55"><name pos:start="211:55" pos:end="211:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="213:17" pos:end="213:22">break;</break>

            <case pos:start="215:13" pos:end="215:21">case <expr pos:start="215:18" pos:end="215:20"><literal type="number" pos:start="215:18" pos:end="215:20">0x8</literal></expr>:</case>

                <if_stmt pos:start="217:17" pos:end="229:17"><if pos:start="217:17" pos:end="221:17">if <condition pos:start="217:20" pos:end="217:52">(<expr pos:start="217:21" pos:end="217:51"><name pos:start="217:21" pos:end="217:29">last_code</name> <operator pos:start="217:31" pos:end="217:32">==</operator> <name pos:start="217:34" pos:end="217:51">PICTURE_START_CODE</name></expr>)</condition> <block pos:start="217:54" pos:end="221:17">{<block_content pos:start="219:21" pos:end="219:60">

                    <expr_stmt pos:start="219:21" pos:end="219:60"><expr pos:start="219:21" pos:end="219:59"><call pos:start="219:21" pos:end="219:59"><name pos:start="219:21" pos:end="219:56">mpeg_decode_picture_coding_extension</name><argument_list pos:start="219:57" pos:end="219:59">(<argument pos:start="219:58" pos:end="219:58"><expr pos:start="219:58" pos:end="219:58"><name pos:start="219:58" pos:end="219:58">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="221:19" pos:end="229:17">else <block pos:start="221:24" pos:end="229:17">{<block_content pos:start="223:21" pos:end="227:51">

                    <expr_stmt pos:start="223:21" pos:end="223:94"><expr pos:start="223:21" pos:end="223:93"><call pos:start="223:21" pos:end="223:93"><name pos:start="223:21" pos:end="223:26">av_log</name><argument_list pos:start="223:27" pos:end="223:93">(<argument pos:start="223:28" pos:end="223:32"><expr pos:start="223:28" pos:end="223:32"><name pos:start="223:28" pos:end="223:32">avctx</name></expr></argument>, <argument pos:start="223:35" pos:end="223:46"><expr pos:start="223:35" pos:end="223:46"><name pos:start="223:35" pos:end="223:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="223:49" pos:end="223:81"><expr pos:start="223:49" pos:end="223:81"><literal type="string" pos:start="223:49" pos:end="223:81">"ignoring pic cod ext after %X\n"</literal></expr></argument>, <argument pos:start="223:84" pos:end="223:92"><expr pos:start="223:84" pos:end="223:92"><name pos:start="223:84" pos:end="223:92">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="225:21" pos:end="227:51"><if pos:start="225:21" pos:end="227:51">if <condition pos:start="225:24" pos:end="225:63">(<expr pos:start="225:25" pos:end="225:62"><name pos:start="225:25" pos:end="225:46"><name pos:start="225:25" pos:end="225:29">avctx</name><operator pos:start="225:30" pos:end="225:31">-&gt;</operator><name pos:start="225:32" pos:end="225:46">err_recognition</name></name> <operator pos:start="225:48" pos:end="225:48">&amp;</operator> <name pos:start="225:50" pos:end="225:62">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="227:25" pos:end="227:51"><block_content pos:start="227:25" pos:end="227:51">

                        <return pos:start="227:25" pos:end="227:51">return <expr pos:start="227:32" pos:end="227:50"><name pos:start="227:32" pos:end="227:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></else></if_stmt>

                <break pos:start="231:17" pos:end="231:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="235:13" pos:end="235:18">break;</break>

        <case pos:start="237:9" pos:end="237:29">case <expr pos:start="237:14" pos:end="237:28"><name pos:start="237:14" pos:end="237:28">USER_START_CODE</name></expr>:</case>

            <expr_stmt pos:start="239:13" pos:end="239:62"><expr pos:start="239:13" pos:end="239:61"><call pos:start="239:13" pos:end="239:61"><name pos:start="239:13" pos:end="239:33">mpeg_decode_user_data</name><argument_list pos:start="239:34" pos:end="239:61">(<argument pos:start="239:35" pos:end="239:39"><expr pos:start="239:35" pos:end="239:39"><name pos:start="239:35" pos:end="239:39">avctx</name></expr></argument>, <argument pos:start="239:42" pos:end="239:48"><expr pos:start="239:42" pos:end="239:48"><name pos:start="239:42" pos:end="239:48">buf_ptr</name></expr></argument>, <argument pos:start="239:51" pos:end="239:60"><expr pos:start="239:51" pos:end="239:60"><name pos:start="239:51" pos:end="239:60">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="241:13" pos:end="241:18">break;</break>

        <case pos:start="243:9" pos:end="243:28">case <expr pos:start="243:14" pos:end="243:27"><name pos:start="243:14" pos:end="243:27">GOP_START_CODE</name></expr>:</case>

            <if_stmt pos:start="245:13" pos:end="261:13"><if pos:start="245:13" pos:end="253:13">if <condition pos:start="245:16" pos:end="245:31">(<expr pos:start="245:17" pos:end="245:30"><name pos:start="245:17" pos:end="245:25">last_code</name> <operator pos:start="245:27" pos:end="245:28">==</operator> <literal type="number" pos:start="245:30" pos:end="245:30">0</literal></expr>)</condition> <block pos:start="245:33" pos:end="253:13">{<block_content pos:start="247:17" pos:end="251:26">

                <expr_stmt pos:start="247:17" pos:end="247:34"><expr pos:start="247:17" pos:end="247:33"><name pos:start="247:17" pos:end="247:31"><name pos:start="247:17" pos:end="247:18">s2</name><operator pos:start="247:19" pos:end="247:20">-&gt;</operator><name pos:start="247:21" pos:end="247:31">first_field</name></name><operator pos:start="247:32" pos:end="247:32">=</operator><literal type="number" pos:start="247:33" pos:end="247:33">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="249:17" pos:end="249:60"><expr pos:start="249:17" pos:end="249:59"><call pos:start="249:17" pos:end="249:59"><name pos:start="249:17" pos:end="249:31">mpeg_decode_gop</name><argument_list pos:start="249:32" pos:end="249:59">(<argument pos:start="249:33" pos:end="249:37"><expr pos:start="249:33" pos:end="249:37"><name pos:start="249:33" pos:end="249:37">avctx</name></expr></argument>, <argument pos:start="249:40" pos:end="249:46"><expr pos:start="249:40" pos:end="249:46"><name pos:start="249:40" pos:end="249:46">buf_ptr</name></expr></argument>, <argument pos:start="249:49" pos:end="249:58"><expr pos:start="249:49" pos:end="249:58"><name pos:start="249:49" pos:end="249:58">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="251:17" pos:end="251:26"><expr pos:start="251:17" pos:end="251:25"><name pos:start="251:17" pos:end="251:23"><name pos:start="251:17" pos:end="251:17">s</name><operator pos:start="251:18" pos:end="251:19">-&gt;</operator><name pos:start="251:20" pos:end="251:23">sync</name></name><operator pos:start="251:24" pos:end="251:24">=</operator><literal type="number" pos:start="251:25" pos:end="251:25">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="253:15" pos:end="261:13">else <block pos:start="253:20" pos:end="261:13">{<block_content pos:start="255:17" pos:end="259:47">

                <expr_stmt pos:start="255:17" pos:end="255:93"><expr pos:start="255:17" pos:end="255:92"><call pos:start="255:17" pos:end="255:92"><name pos:start="255:17" pos:end="255:22">av_log</name><argument_list pos:start="255:23" pos:end="255:92">(<argument pos:start="255:24" pos:end="255:28"><expr pos:start="255:24" pos:end="255:28"><name pos:start="255:24" pos:end="255:28">avctx</name></expr></argument>, <argument pos:start="255:31" pos:end="255:42"><expr pos:start="255:31" pos:end="255:42"><name pos:start="255:31" pos:end="255:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="255:45" pos:end="255:80"><expr pos:start="255:45" pos:end="255:80"><literal type="string" pos:start="255:45" pos:end="255:80">"ignoring GOP_START_CODE after %X\n"</literal></expr></argument>, <argument pos:start="255:83" pos:end="255:91"><expr pos:start="255:83" pos:end="255:91"><name pos:start="255:83" pos:end="255:91">last_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="257:17" pos:end="259:47"><if pos:start="257:17" pos:end="259:47">if <condition pos:start="257:20" pos:end="257:59">(<expr pos:start="257:21" pos:end="257:58"><name pos:start="257:21" pos:end="257:42"><name pos:start="257:21" pos:end="257:25">avctx</name><operator pos:start="257:26" pos:end="257:27">-&gt;</operator><name pos:start="257:28" pos:end="257:42">err_recognition</name></name> <operator pos:start="257:44" pos:end="257:44">&amp;</operator> <name pos:start="257:46" pos:end="257:58">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="259:21" pos:end="259:47"><block_content pos:start="259:21" pos:end="259:47">

                    <return pos:start="259:21" pos:end="259:47">return <expr pos:start="259:28" pos:end="259:46"><name pos:start="259:28" pos:end="259:46">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="263:13" pos:end="263:18">break;</break>

        <default pos:start="265:9" pos:end="265:16">default:</default>

            <if_stmt pos:start="267:13" pos:end="451:13"><if pos:start="267:13" pos:end="451:13">if <condition pos:start="267:16" pos:end="269:69">(<expr pos:start="267:17" pos:end="269:68"><name pos:start="267:17" pos:end="267:26">start_code</name> <operator pos:start="267:28" pos:end="267:29">&gt;=</operator> <name pos:start="267:31" pos:end="267:50">SLICE_MIN_START_CODE</name> <operator pos:start="267:52" pos:end="267:53">&amp;&amp;</operator>

                <name pos:start="269:17" pos:end="269:26">start_code</name> <operator pos:start="269:28" pos:end="269:29">&lt;=</operator> <name pos:start="269:31" pos:end="269:50">SLICE_MAX_START_CODE</name> <operator pos:start="269:52" pos:end="269:53">&amp;&amp;</operator> <name pos:start="269:55" pos:end="269:63">last_code</name> <operator pos:start="269:65" pos:end="269:66">!=</operator> <literal type="number" pos:start="269:68" pos:end="269:68">0</literal></expr>)</condition> <block pos:start="269:71" pos:end="451:13">{<block_content pos:start="271:17" pos:end="449:17">

                <decl_stmt pos:start="271:17" pos:end="271:74"><decl pos:start="271:17" pos:end="271:73"><type pos:start="271:17" pos:end="271:25"><specifier pos:start="271:17" pos:end="271:21">const</specifier> <name pos:start="271:23" pos:end="271:25">int</name></type> <name pos:start="271:27" pos:end="271:35">field_pic</name> <init pos:start="271:37" pos:end="271:73">= <expr pos:start="271:39" pos:end="271:73"><name pos:start="271:39" pos:end="271:59"><name pos:start="271:39" pos:end="271:40">s2</name><operator pos:start="271:41" pos:end="271:42">-&gt;</operator><name pos:start="271:43" pos:end="271:59">picture_structure</name></name> <operator pos:start="271:61" pos:end="271:62">!=</operator> <name pos:start="271:64" pos:end="271:73">PICT_FRAME</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="273:17" pos:end="273:76"><decl pos:start="273:17" pos:end="273:75"><type pos:start="273:17" pos:end="273:19"><name pos:start="273:17" pos:end="273:19">int</name></type> <name pos:start="273:21" pos:end="273:24">mb_y</name> <init pos:start="273:26" pos:end="273:75">= <expr pos:start="273:28" pos:end="273:75"><operator pos:start="273:28" pos:end="273:28">(</operator><name pos:start="273:29" pos:end="273:38">start_code</name> <operator pos:start="273:40" pos:end="273:40">-</operator> <name pos:start="273:42" pos:end="273:61">SLICE_MIN_START_CODE</name><operator pos:start="273:62" pos:end="273:62">)</operator> <operator pos:start="273:64" pos:end="273:65">&lt;&lt;</operator> <name pos:start="273:67" pos:end="273:75">field_pic</name></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="275:17" pos:end="275:49"><expr pos:start="275:17" pos:end="275:48"><name pos:start="275:17" pos:end="275:25">last_code</name> <operator pos:start="275:27" pos:end="275:27">=</operator> <name pos:start="275:29" pos:end="275:48">SLICE_MIN_START_CODE</name></expr>;</expr_stmt>



                <if_stmt pos:start="279:17" pos:end="281:27"><if pos:start="279:17" pos:end="281:27">if <condition pos:start="279:20" pos:end="279:63">(<expr pos:start="279:21" pos:end="279:62"><name pos:start="279:21" pos:end="279:41"><name pos:start="279:21" pos:end="279:22">s2</name><operator pos:start="279:23" pos:end="279:24">-&gt;</operator><name pos:start="279:25" pos:end="279:41">picture_structure</name></name> <operator pos:start="279:43" pos:end="279:44">==</operator> <name pos:start="279:46" pos:end="279:62">PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo" pos:start="281:21" pos:end="281:27"><block_content pos:start="281:21" pos:end="281:27">

                    <expr_stmt pos:start="281:21" pos:end="281:27"><expr pos:start="281:21" pos:end="281:26"><name pos:start="281:21" pos:end="281:24">mb_y</name><operator pos:start="281:25" pos:end="281:26">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>



                <if_stmt pos:start="285:17" pos:end="291:17"><if pos:start="285:17" pos:end="291:17">if <condition pos:start="285:20" pos:end="285:42">(<expr pos:start="285:21" pos:end="285:41"><name pos:start="285:21" pos:end="285:24">mb_y</name> <operator pos:start="285:26" pos:end="285:27">&gt;=</operator> <name pos:start="285:29" pos:end="285:41"><name pos:start="285:29" pos:end="285:30">s2</name><operator pos:start="285:31" pos:end="285:32">-&gt;</operator><name pos:start="285:33" pos:end="285:41">mb_height</name></name></expr>)</condition> <block pos:start="285:44" pos:end="291:17">{<block_content pos:start="287:21" pos:end="289:30">

                    <expr_stmt pos:start="287:21" pos:end="287:107"><expr pos:start="287:21" pos:end="287:106"><call pos:start="287:21" pos:end="287:106"><name pos:start="287:21" pos:end="287:26">av_log</name><argument_list pos:start="287:27" pos:end="287:106">(<argument pos:start="287:28" pos:end="287:36"><expr pos:start="287:28" pos:end="287:36"><name pos:start="287:28" pos:end="287:36"><name pos:start="287:28" pos:end="287:29">s2</name><operator pos:start="287:30" pos:end="287:31">-&gt;</operator><name pos:start="287:32" pos:end="287:36">avctx</name></name></expr></argument>, <argument pos:start="287:39" pos:end="287:50"><expr pos:start="287:39" pos:end="287:50"><name pos:start="287:39" pos:end="287:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="287:53" pos:end="287:84"><expr pos:start="287:53" pos:end="287:84"><literal type="string" pos:start="287:53" pos:end="287:84">"slice below image (%d &gt;= %d)\n"</literal></expr></argument>, <argument pos:start="287:87" pos:end="287:90"><expr pos:start="287:87" pos:end="287:90"><name pos:start="287:87" pos:end="287:90">mb_y</name></expr></argument>, <argument pos:start="287:93" pos:end="287:105"><expr pos:start="287:93" pos:end="287:105"><name pos:start="287:93" pos:end="287:105"><name pos:start="287:93" pos:end="287:94">s2</name><operator pos:start="287:95" pos:end="287:96">-&gt;</operator><name pos:start="287:97" pos:end="287:105">mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="289:21" pos:end="289:30">return <expr pos:start="289:28" pos:end="289:29"><operator pos:start="289:28" pos:end="289:28">-</operator><literal type="number" pos:start="289:29" pos:end="289:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="295:17" pos:end="307:17"><if pos:start="295:17" pos:end="307:17">if <condition pos:start="295:20" pos:end="295:49">(<expr pos:start="295:21" pos:end="295:48"><name pos:start="295:21" pos:end="295:40"><name pos:start="295:21" pos:end="295:22">s2</name><operator pos:start="295:23" pos:end="295:24">-&gt;</operator><name pos:start="295:25" pos:end="295:40">last_picture_ptr</name></name> <operator pos:start="295:42" pos:end="295:43">==</operator> <name pos:start="295:45" pos:end="295:48">NULL</name></expr>)</condition> <block pos:start="295:51" pos:end="307:17">{<block_content pos:start="299:21" pos:end="305:21">

                <comment type="block" pos:start="297:17" pos:end="297:92">/* Skip B-frames if we do not have reference frames and gop is not closed */</comment>

                    <if_stmt pos:start="299:21" pos:end="305:21"><if pos:start="299:21" pos:end="305:21">if <condition pos:start="299:24" pos:end="299:59">(<expr pos:start="299:25" pos:end="299:58"><name pos:start="299:25" pos:end="299:37"><name pos:start="299:25" pos:end="299:26">s2</name><operator pos:start="299:27" pos:end="299:28">-&gt;</operator><name pos:start="299:29" pos:end="299:37">pict_type</name></name> <operator pos:start="299:39" pos:end="299:40">==</operator> <name pos:start="299:42" pos:end="299:58">AV_PICTURE_TYPE_B</name></expr>)</condition> <block pos:start="299:61" pos:end="305:21">{<block_content pos:start="301:25" pos:end="303:34">

                        <if_stmt pos:start="301:25" pos:end="303:34"><if pos:start="301:25" pos:end="303:34">if <condition pos:start="301:28" pos:end="301:43">(<expr pos:start="301:29" pos:end="301:42"><operator pos:start="301:29" pos:end="301:29">!</operator><name pos:start="301:30" pos:end="301:42"><name pos:start="301:30" pos:end="301:30">s</name><operator pos:start="301:31" pos:end="301:32">-&gt;</operator><name pos:start="301:33" pos:end="301:42">closed_gop</name></name></expr>)</condition><block type="pseudo" pos:start="303:29" pos:end="303:34"><block_content pos:start="303:29" pos:end="303:34">

                            <break pos:start="303:29" pos:end="303:34">break;</break></block_content></block></if></if_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="309:17" pos:end="311:30"><if pos:start="309:17" pos:end="311:30">if <condition pos:start="309:20" pos:end="309:55">(<expr pos:start="309:21" pos:end="309:54"><name pos:start="309:21" pos:end="309:33"><name pos:start="309:21" pos:end="309:22">s2</name><operator pos:start="309:23" pos:end="309:24">-&gt;</operator><name pos:start="309:25" pos:end="309:33">pict_type</name></name> <operator pos:start="309:35" pos:end="309:36">==</operator> <name pos:start="309:38" pos:end="309:54">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="311:21" pos:end="311:30"><block_content pos:start="311:21" pos:end="311:30">

                    <expr_stmt pos:start="311:21" pos:end="311:30"><expr pos:start="311:21" pos:end="311:29"><name pos:start="311:21" pos:end="311:27"><name pos:start="311:21" pos:end="311:21">s</name><operator pos:start="311:22" pos:end="311:23">-&gt;</operator><name pos:start="311:24" pos:end="311:27">sync</name></name><operator pos:start="311:28" pos:end="311:28">=</operator><literal type="number" pos:start="311:29" pos:end="311:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt pos:start="313:17" pos:end="319:17"><if pos:start="313:17" pos:end="319:17">if <condition pos:start="313:20" pos:end="313:49">(<expr pos:start="313:21" pos:end="313:48"><name pos:start="313:21" pos:end="313:40"><name pos:start="313:21" pos:end="313:22">s2</name><operator pos:start="313:23" pos:end="313:24">-&gt;</operator><name pos:start="313:25" pos:end="313:40">next_picture_ptr</name></name> <operator pos:start="313:42" pos:end="313:43">==</operator> <name pos:start="313:45" pos:end="313:48">NULL</name></expr>)</condition> <block pos:start="313:51" pos:end="319:17">{<block_content pos:start="317:21" pos:end="317:78">

                <comment type="block" pos:start="315:17" pos:end="315:101">/* Skip P-frames if we do not have a reference frame or we have an invalid header. */</comment>

                    <if_stmt pos:start="317:21" pos:end="317:78"><if pos:start="317:21" pos:end="317:78">if <condition pos:start="317:24" pos:end="317:71">(<expr pos:start="317:25" pos:end="317:70"><name pos:start="317:25" pos:end="317:37"><name pos:start="317:25" pos:end="317:26">s2</name><operator pos:start="317:27" pos:end="317:28">-&gt;</operator><name pos:start="317:29" pos:end="317:37">pict_type</name></name> <operator pos:start="317:39" pos:end="317:40">==</operator> <name pos:start="317:42" pos:end="317:58">AV_PICTURE_TYPE_P</name> <operator pos:start="317:60" pos:end="317:61">&amp;&amp;</operator> <operator pos:start="317:63" pos:end="317:63">!</operator><name pos:start="317:64" pos:end="317:70"><name pos:start="317:64" pos:end="317:64">s</name><operator pos:start="317:65" pos:end="317:66">-&gt;</operator><name pos:start="317:67" pos:end="317:70">sync</name></name></expr>)</condition><block type="pseudo" pos:start="317:73" pos:end="317:78"><block_content pos:start="317:73" pos:end="317:78"> <break pos:start="317:73" pos:end="317:78">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="321:17" pos:end="327:26"><if pos:start="321:17" pos:end="327:26">if <condition pos:start="321:20" pos:end="325:56">(<expr pos:start="321:21" pos:end="325:55"><operator pos:start="321:21" pos:end="321:21">(</operator><name pos:start="321:22" pos:end="321:38"><name pos:start="321:22" pos:end="321:26">avctx</name><operator pos:start="321:27" pos:end="321:28">-&gt;</operator><name pos:start="321:29" pos:end="321:38">skip_frame</name></name> <operator pos:start="321:40" pos:end="321:41">&gt;=</operator> <name pos:start="321:43" pos:end="321:58">AVDISCARD_NONREF</name> <operator pos:start="321:60" pos:end="321:61">&amp;&amp;</operator> <name pos:start="321:63" pos:end="321:75"><name pos:start="321:63" pos:end="321:64">s2</name><operator pos:start="321:65" pos:end="321:66">-&gt;</operator><name pos:start="321:67" pos:end="321:75">pict_type</name></name> <operator pos:start="321:77" pos:end="321:78">==</operator> <name pos:start="321:80" pos:end="321:96">AV_PICTURE_TYPE_B</name><operator pos:start="321:97" pos:end="321:97">)</operator> <operator pos:start="321:99" pos:end="321:100">||</operator>

                    <operator pos:start="323:21" pos:end="323:21">(</operator><name pos:start="323:22" pos:end="323:38"><name pos:start="323:22" pos:end="323:26">avctx</name><operator pos:start="323:27" pos:end="323:28">-&gt;</operator><name pos:start="323:29" pos:end="323:38">skip_frame</name></name> <operator pos:start="323:40" pos:end="323:41">&gt;=</operator> <name pos:start="323:43" pos:end="323:58">AVDISCARD_NONKEY</name> <operator pos:start="323:60" pos:end="323:61">&amp;&amp;</operator> <name pos:start="323:63" pos:end="323:75"><name pos:start="323:63" pos:end="323:64">s2</name><operator pos:start="323:65" pos:end="323:66">-&gt;</operator><name pos:start="323:67" pos:end="323:75">pict_type</name></name> <operator pos:start="323:77" pos:end="323:78">!=</operator> <name pos:start="323:80" pos:end="323:96">AV_PICTURE_TYPE_I</name><operator pos:start="323:97" pos:end="323:97">)</operator> <operator pos:start="323:99" pos:end="323:100">||</operator>

                     <name pos:start="325:22" pos:end="325:38"><name pos:start="325:22" pos:end="325:26">avctx</name><operator pos:start="325:27" pos:end="325:28">-&gt;</operator><name pos:start="325:29" pos:end="325:38">skip_frame</name></name> <operator pos:start="325:40" pos:end="325:41">&gt;=</operator> <name pos:start="325:43" pos:end="325:55">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="327:21" pos:end="327:26"><block_content pos:start="327:21" pos:end="327:26">

                    <break pos:start="327:21" pos:end="327:26">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="331:17" pos:end="333:26"><if pos:start="331:17" pos:end="333:26">if <condition pos:start="331:20" pos:end="331:47">(<expr pos:start="331:21" pos:end="331:46"><operator pos:start="331:21" pos:end="331:21">!</operator><name pos:start="331:22" pos:end="331:46"><name pos:start="331:22" pos:end="331:22">s</name><operator pos:start="331:23" pos:end="331:24">-&gt;</operator><name pos:start="331:25" pos:end="331:46">mpeg_enc_ctx_allocated</name></name></expr>)</condition><block type="pseudo" pos:start="333:21" pos:end="333:26"><block_content pos:start="333:21" pos:end="333:26">

                    <break pos:start="333:21" pos:end="333:26">break;</break></block_content></block></if></if_stmt>



                <if_stmt pos:start="337:17" pos:end="343:17"><if pos:start="337:17" pos:end="343:17">if <condition pos:start="337:20" pos:end="337:59">(<expr pos:start="337:21" pos:end="337:58"><name pos:start="337:21" pos:end="337:32"><name pos:start="337:21" pos:end="337:22">s2</name><operator pos:start="337:23" pos:end="337:24">-&gt;</operator><name pos:start="337:25" pos:end="337:32">codec_id</name></name> <operator pos:start="337:34" pos:end="337:35">==</operator> <name pos:start="337:37" pos:end="337:58">AV_CODEC_ID_MPEG2VIDEO</name></expr>)</condition> <block pos:start="337:61" pos:end="343:17">{<block_content pos:start="339:21" pos:end="341:30">

                    <if_stmt pos:start="339:21" pos:end="341:30"><if pos:start="339:21" pos:end="341:30">if <condition pos:start="339:24" pos:end="339:93">(<expr pos:start="339:25" pos:end="339:92"><name pos:start="339:25" pos:end="339:28">mb_y</name> <operator pos:start="339:30" pos:end="339:30">&lt;</operator> <name pos:start="339:32" pos:end="339:46"><name pos:start="339:32" pos:end="339:36">avctx</name><operator pos:start="339:37" pos:end="339:38">-&gt;</operator><name pos:start="339:39" pos:end="339:46">skip_top</name></name> <operator pos:start="339:48" pos:end="339:49">||</operator> <name pos:start="339:51" pos:end="339:54">mb_y</name> <operator pos:start="339:56" pos:end="339:57">&gt;=</operator> <name pos:start="339:59" pos:end="339:71"><name pos:start="339:59" pos:end="339:60">s2</name><operator pos:start="339:61" pos:end="339:62">-&gt;</operator><name pos:start="339:63" pos:end="339:71">mb_height</name></name> <operator pos:start="339:73" pos:end="339:73">-</operator> <name pos:start="339:75" pos:end="339:92"><name pos:start="339:75" pos:end="339:79">avctx</name><operator pos:start="339:80" pos:end="339:81">-&gt;</operator><name pos:start="339:82" pos:end="339:92">skip_bottom</name></name></expr>)</condition><block type="pseudo" pos:start="341:25" pos:end="341:30"><block_content pos:start="341:25" pos:end="341:30">

                        <break pos:start="341:25" pos:end="341:30">break;</break></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="347:17" pos:end="357:17"><if pos:start="347:17" pos:end="357:17">if <condition pos:start="347:20" pos:end="347:35">(<expr pos:start="347:21" pos:end="347:34"><operator pos:start="347:21" pos:end="347:21">!</operator><name pos:start="347:22" pos:end="347:34"><name pos:start="347:22" pos:end="347:23">s2</name><operator pos:start="347:24" pos:end="347:25">-&gt;</operator><name pos:start="347:26" pos:end="347:34">pict_type</name></name></expr>)</condition> <block pos:start="347:37" pos:end="357:17">{<block_content pos:start="349:21" pos:end="355:26">

                    <expr_stmt pos:start="349:21" pos:end="349:80"><expr pos:start="349:21" pos:end="349:79"><call pos:start="349:21" pos:end="349:79"><name pos:start="349:21" pos:end="349:26">av_log</name><argument_list pos:start="349:27" pos:end="349:79">(<argument pos:start="349:28" pos:end="349:32"><expr pos:start="349:28" pos:end="349:32"><name pos:start="349:28" pos:end="349:32">avctx</name></expr></argument>, <argument pos:start="349:35" pos:end="349:46"><expr pos:start="349:35" pos:end="349:46"><name pos:start="349:35" pos:end="349:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="349:49" pos:end="349:78"><expr pos:start="349:49" pos:end="349:78"><literal type="string" pos:start="349:49" pos:end="349:78">"Missing picture start code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="351:21" pos:end="353:51"><if pos:start="351:21" pos:end="353:51">if <condition pos:start="351:24" pos:end="351:63">(<expr pos:start="351:25" pos:end="351:62"><name pos:start="351:25" pos:end="351:46"><name pos:start="351:25" pos:end="351:29">avctx</name><operator pos:start="351:30" pos:end="351:31">-&gt;</operator><name pos:start="351:32" pos:end="351:46">err_recognition</name></name> <operator pos:start="351:48" pos:end="351:48">&amp;</operator> <name pos:start="351:50" pos:end="351:62">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="353:25" pos:end="353:51"><block_content pos:start="353:25" pos:end="353:51">

                        <return pos:start="353:25" pos:end="353:51">return <expr pos:start="353:32" pos:end="353:50"><name pos:start="353:32" pos:end="353:50">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                    <break pos:start="355:21" pos:end="355:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="361:17" pos:end="369:17"><if pos:start="361:17" pos:end="369:17">if <condition pos:start="361:20" pos:end="361:36">(<expr pos:start="361:21" pos:end="361:35"><name pos:start="361:21" pos:end="361:35"><name pos:start="361:21" pos:end="361:22">s2</name><operator pos:start="361:23" pos:end="361:24">-&gt;</operator><name pos:start="361:25" pos:end="361:35">first_slice</name></name></expr>)</condition> <block pos:start="361:38" pos:end="369:17">{<block_content pos:start="363:21" pos:end="367:34">

                    <expr_stmt pos:start="363:21" pos:end="363:40"><expr pos:start="363:21" pos:end="363:39"><name pos:start="363:21" pos:end="363:35"><name pos:start="363:21" pos:end="363:22">s2</name><operator pos:start="363:23" pos:end="363:24">-&gt;</operator><name pos:start="363:25" pos:end="363:35">first_slice</name></name> <operator pos:start="363:37" pos:end="363:37">=</operator> <literal type="number" pos:start="363:39" pos:end="363:39">0</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="365:21" pos:end="367:34"><if pos:start="365:21" pos:end="367:34">if <condition pos:start="365:24" pos:end="365:64">(<expr pos:start="365:25" pos:end="365:63"><call pos:start="365:25" pos:end="365:59"><name pos:start="365:25" pos:end="365:40">mpeg_field_start</name><argument_list pos:start="365:41" pos:end="365:59">(<argument pos:start="365:42" pos:end="365:43"><expr pos:start="365:42" pos:end="365:43"><name pos:start="365:42" pos:end="365:43">s2</name></expr></argument>, <argument pos:start="365:46" pos:end="365:48"><expr pos:start="365:46" pos:end="365:48"><name pos:start="365:46" pos:end="365:48">buf</name></expr></argument>, <argument pos:start="365:51" pos:end="365:58"><expr pos:start="365:51" pos:end="365:58"><name pos:start="365:51" pos:end="365:58">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="365:61" pos:end="365:61">&lt;</operator> <literal type="number" pos:start="365:63" pos:end="365:63">0</literal></expr>)</condition><block type="pseudo" pos:start="367:25" pos:end="367:34"><block_content pos:start="367:25" pos:end="367:34">

                        <return pos:start="367:25" pos:end="367:34">return <expr pos:start="367:32" pos:end="367:33"><operator pos:start="367:32" pos:end="367:32">-</operator><literal type="number" pos:start="367:33" pos:end="367:33">1</literal></expr>;</return></block_content></block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="371:17" pos:end="377:17"><if pos:start="371:17" pos:end="377:17">if <condition pos:start="371:20" pos:end="371:45">(<expr pos:start="371:21" pos:end="371:44"><operator pos:start="371:21" pos:end="371:21">!</operator><name pos:start="371:22" pos:end="371:44"><name pos:start="371:22" pos:end="371:23">s2</name><operator pos:start="371:24" pos:end="371:25">-&gt;</operator><name pos:start="371:26" pos:end="371:44">current_picture_ptr</name></name></expr>)</condition> <block pos:start="371:47" pos:end="377:17">{<block_content pos:start="373:21" pos:end="375:47">

                    <expr_stmt pos:start="373:21" pos:end="373:85"><expr pos:start="373:21" pos:end="373:84"><call pos:start="373:21" pos:end="373:84"><name pos:start="373:21" pos:end="373:26">av_log</name><argument_list pos:start="373:27" pos:end="373:84">(<argument pos:start="373:28" pos:end="373:32"><expr pos:start="373:28" pos:end="373:32"><name pos:start="373:28" pos:end="373:32">avctx</name></expr></argument>, <argument pos:start="373:35" pos:end="373:46"><expr pos:start="373:35" pos:end="373:46"><name pos:start="373:35" pos:end="373:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="373:49" pos:end="373:83"><expr pos:start="373:49" pos:end="373:83"><literal type="string" pos:start="373:49" pos:end="373:83">"current_picture not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="375:21" pos:end="375:47">return <expr pos:start="375:28" pos:end="375:46"><name pos:start="375:28" pos:end="375:46">AVERROR_INVALIDDATA</name></expr>;</return>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="381:17" pos:end="387:17"><if pos:start="381:17" pos:end="387:17">if <condition pos:start="381:20" pos:end="381:73">(<expr pos:start="381:21" pos:end="381:72"><name pos:start="381:21" pos:end="381:46"><name pos:start="381:21" pos:end="381:25">avctx</name><operator pos:start="381:26" pos:end="381:27">-&gt;</operator><name pos:start="381:28" pos:end="381:32">codec</name><operator pos:start="381:33" pos:end="381:34">-&gt;</operator><name pos:start="381:35" pos:end="381:46">capabilities</name></name> <operator pos:start="381:48" pos:end="381:48">&amp;</operator> <name pos:start="381:50" pos:end="381:72">CODEC_CAP_HWACCEL_VDPAU</name></expr>)</condition> <block pos:start="381:75" pos:end="387:17">{<block_content pos:start="383:21" pos:end="385:26">

                    <expr_stmt pos:start="383:21" pos:end="383:37"><expr pos:start="383:21" pos:end="383:36"><name pos:start="383:21" pos:end="383:34"><name pos:start="383:21" pos:end="383:21">s</name><operator pos:start="383:22" pos:end="383:23">-&gt;</operator><name pos:start="383:24" pos:end="383:34">slice_count</name></name><operator pos:start="383:35" pos:end="383:36">++</operator></expr>;</expr_stmt>

                    <break pos:start="385:21" pos:end="385:26">break;</break>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="391:17" pos:end="449:17"><if pos:start="391:17" pos:end="425:17">if <condition pos:start="391:20" pos:end="391:82">(<expr pos:start="391:21" pos:end="391:81"><name pos:start="391:21" pos:end="391:32">HAVE_THREADS</name> <operator pos:start="391:34" pos:end="391:35">&amp;&amp;</operator> <operator pos:start="391:37" pos:end="391:37">(</operator><name pos:start="391:38" pos:end="391:62"><name pos:start="391:38" pos:end="391:42">avctx</name><operator pos:start="391:43" pos:end="391:44">-&gt;</operator><name pos:start="391:45" pos:end="391:62">active_thread_type</name></name> <operator pos:start="391:64" pos:end="391:64">&amp;</operator> <name pos:start="391:66" pos:end="391:80">FF_THREAD_SLICE</name><operator pos:start="391:81" pos:end="391:81">)</operator></expr>)</condition> <block pos:start="391:84" pos:end="425:17">{<block_content pos:start="393:21" pos:end="423:33">

                    <decl_stmt pos:start="393:21" pos:end="397:60"><decl pos:start="393:21" pos:end="397:59"><type pos:start="393:21" pos:end="393:23"><name pos:start="393:21" pos:end="393:23">int</name></type> <name pos:start="393:25" pos:end="393:33">threshold</name> <init pos:start="393:35" pos:end="397:59">= <expr pos:start="393:37" pos:end="397:59"><operator pos:start="393:37" pos:end="393:37">(</operator><name pos:start="393:38" pos:end="393:50"><name pos:start="393:38" pos:end="393:39">s2</name><operator pos:start="393:40" pos:end="393:41">-&gt;</operator><name pos:start="393:42" pos:end="393:50">mb_height</name></name> <operator pos:start="393:52" pos:end="393:52">*</operator> <name pos:start="393:54" pos:end="393:67"><name pos:start="393:54" pos:end="393:54">s</name><operator pos:start="393:55" pos:end="393:56">-&gt;</operator><name pos:start="393:57" pos:end="393:67">slice_count</name></name> <operator pos:start="393:69" pos:end="393:69">+</operator>

                                     <name pos:start="395:38" pos:end="395:60"><name pos:start="395:38" pos:end="395:39">s2</name><operator pos:start="395:40" pos:end="395:41">-&gt;</operator><name pos:start="395:42" pos:end="395:60">slice_context_count</name></name> <operator pos:start="395:62" pos:end="395:62">/</operator> <literal type="number" pos:start="395:64" pos:end="395:64">2</literal><operator pos:start="395:65" pos:end="395:65">)</operator> <operator pos:start="395:67" pos:end="395:67">/</operator>

                                    <name pos:start="397:37" pos:end="397:59"><name pos:start="397:37" pos:end="397:38">s2</name><operator pos:start="397:39" pos:end="397:40">-&gt;</operator><name pos:start="397:41" pos:end="397:59">slice_context_count</name></name></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="399:21" pos:end="421:21"><if pos:start="399:21" pos:end="421:21">if <condition pos:start="399:24" pos:end="399:42">(<expr pos:start="399:25" pos:end="399:41"><name pos:start="399:25" pos:end="399:33">threshold</name> <operator pos:start="399:35" pos:end="399:36">&lt;=</operator> <name pos:start="399:38" pos:end="399:41">mb_y</name></expr>)</condition> <block pos:start="399:44" pos:end="421:21">{<block_content pos:start="401:25" pos:end="419:41">

                        <decl_stmt pos:start="401:25" pos:end="401:92"><decl pos:start="401:25" pos:end="401:91"><type pos:start="401:25" pos:end="401:40"><name pos:start="401:25" pos:end="401:38">MpegEncContext</name> <modifier pos:start="401:40" pos:end="401:40">*</modifier></type><name pos:start="401:41" pos:end="401:54">thread_context</name> <init pos:start="401:56" pos:end="401:91">= <expr pos:start="401:58" pos:end="401:91"><name pos:start="401:58" pos:end="401:91"><name pos:start="401:58" pos:end="401:59">s2</name><operator pos:start="401:60" pos:end="401:61">-&gt;</operator><name pos:start="401:62" pos:end="401:75">thread_context</name><index pos:start="401:76" pos:end="401:91">[<expr pos:start="401:77" pos:end="401:90"><name pos:start="401:77" pos:end="401:90"><name pos:start="401:77" pos:end="401:77">s</name><operator pos:start="401:78" pos:end="401:79">-&gt;</operator><name pos:start="401:80" pos:end="401:90">slice_count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>



                        <expr_stmt pos:start="405:25" pos:end="405:58"><expr pos:start="405:25" pos:end="405:57"><name pos:start="405:25" pos:end="405:50"><name pos:start="405:25" pos:end="405:38">thread_context</name><operator pos:start="405:39" pos:end="405:40">-&gt;</operator><name pos:start="405:41" pos:end="405:50">start_mb_y</name></name> <operator pos:start="405:52" pos:end="405:52">=</operator> <name pos:start="405:54" pos:end="405:57">mb_y</name></expr>;</expr_stmt>

                        <expr_stmt pos:start="407:25" pos:end="407:67"><expr pos:start="407:25" pos:end="407:66"><name pos:start="407:25" pos:end="407:48"><name pos:start="407:25" pos:end="407:38">thread_context</name><operator pos:start="407:39" pos:end="407:40">-&gt;</operator><name pos:start="407:41" pos:end="407:48">end_mb_y</name></name>   <operator pos:start="407:52" pos:end="407:52">=</operator> <name pos:start="407:54" pos:end="407:66"><name pos:start="407:54" pos:end="407:55">s2</name><operator pos:start="407:56" pos:end="407:57">-&gt;</operator><name pos:start="407:58" pos:end="407:66">mb_height</name></name></expr>;</expr_stmt>

                        <if_stmt pos:start="409:25" pos:end="415:25"><if pos:start="409:25" pos:end="415:25">if <condition pos:start="409:28" pos:end="409:43">(<expr pos:start="409:29" pos:end="409:42"><name pos:start="409:29" pos:end="409:42"><name pos:start="409:29" pos:end="409:29">s</name><operator pos:start="409:30" pos:end="409:31">-&gt;</operator><name pos:start="409:32" pos:end="409:42">slice_count</name></name></expr>)</condition> <block pos:start="409:45" pos:end="415:25">{<block_content pos:start="411:29" pos:end="413:76">

                            <expr_stmt pos:start="411:29" pos:end="411:82"><expr pos:start="411:29" pos:end="411:81"><name pos:start="411:29" pos:end="411:64"><name pos:start="411:29" pos:end="411:30">s2</name><operator pos:start="411:31" pos:end="411:32">-&gt;</operator><name pos:start="411:33" pos:end="411:46">thread_context</name><index pos:start="411:47" pos:end="411:64">[<expr pos:start="411:48" pos:end="411:63"><name pos:start="411:48" pos:end="411:61"><name pos:start="411:48" pos:end="411:48">s</name><operator pos:start="411:49" pos:end="411:50">-&gt;</operator><name pos:start="411:51" pos:end="411:61">slice_count</name></name><operator pos:start="411:62" pos:end="411:62">-</operator><literal type="number" pos:start="411:63" pos:end="411:63">1</literal></expr>]</index></name><operator pos:start="411:65" pos:end="411:66">-&gt;</operator><name pos:start="411:67" pos:end="411:74">end_mb_y</name> <operator pos:start="411:76" pos:end="411:76">=</operator> <name pos:start="411:78" pos:end="411:81">mb_y</name></expr>;</expr_stmt>

                            <expr_stmt pos:start="413:29" pos:end="413:76"><expr pos:start="413:29" pos:end="413:75"><call pos:start="413:29" pos:end="413:75"><name pos:start="413:29" pos:end="413:55">ff_update_duplicate_context</name><argument_list pos:start="413:56" pos:end="413:75">(<argument pos:start="413:57" pos:end="413:70"><expr pos:start="413:57" pos:end="413:70"><name pos:start="413:57" pos:end="413:70">thread_context</name></expr></argument>, <argument pos:start="413:73" pos:end="413:74"><expr pos:start="413:73" pos:end="413:74"><name pos:start="413:73" pos:end="413:74">s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="417:25" pos:end="417:82"><expr pos:start="417:25" pos:end="417:81"><call pos:start="417:25" pos:end="417:81"><name pos:start="417:25" pos:end="417:37">init_get_bits</name><argument_list pos:start="417:38" pos:end="417:81">(<argument pos:start="417:39" pos:end="417:57"><expr pos:start="417:39" pos:end="417:57"><operator pos:start="417:39" pos:end="417:39">&amp;</operator><name pos:start="417:40" pos:end="417:57"><name pos:start="417:40" pos:end="417:53">thread_context</name><operator pos:start="417:54" pos:end="417:55">-&gt;</operator><name pos:start="417:56" pos:end="417:57">gb</name></name></expr></argument>, <argument pos:start="417:60" pos:end="417:66"><expr pos:start="417:60" pos:end="417:66"><name pos:start="417:60" pos:end="417:66">buf_ptr</name></expr></argument>, <argument pos:start="417:69" pos:end="417:80"><expr pos:start="417:69" pos:end="417:80"><name pos:start="417:69" pos:end="417:78">input_size</name><operator pos:start="417:79" pos:end="417:79">*</operator><literal type="number" pos:start="417:80" pos:end="417:80">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="419:25" pos:end="419:41"><expr pos:start="419:25" pos:end="419:40"><name pos:start="419:25" pos:end="419:38"><name pos:start="419:25" pos:end="419:25">s</name><operator pos:start="419:26" pos:end="419:27">-&gt;</operator><name pos:start="419:28" pos:end="419:38">slice_count</name></name><operator pos:start="419:39" pos:end="419:40">++</operator></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="423:21" pos:end="423:33"><expr pos:start="423:21" pos:end="423:32"><name pos:start="423:21" pos:end="423:27">buf_ptr</name> <operator pos:start="423:29" pos:end="423:30">+=</operator> <literal type="number" pos:start="423:32" pos:end="423:32">2</literal></expr>;</expr_stmt> <comment type="line" pos:start="423:35" pos:end="423:80">// FIXME add minimum number of bytes per slice</comment>

                </block_content>}</block></if> <else pos:start="425:19" pos:end="449:17">else <block pos:start="425:24" pos:end="449:17">{<block_content pos:start="427:21" pos:end="447:21">

                    <expr_stmt pos:start="427:21" pos:end="427:76"><expr pos:start="427:21" pos:end="427:75"><name pos:start="427:21" pos:end="427:23">ret</name> <operator pos:start="427:25" pos:end="427:25">=</operator> <call pos:start="427:27" pos:end="427:75"><name pos:start="427:27" pos:end="427:43">mpeg_decode_slice</name><argument_list pos:start="427:44" pos:end="427:75">(<argument pos:start="427:45" pos:end="427:46"><expr pos:start="427:45" pos:end="427:46"><name pos:start="427:45" pos:end="427:46">s2</name></expr></argument>, <argument pos:start="427:49" pos:end="427:52"><expr pos:start="427:49" pos:end="427:52"><name pos:start="427:49" pos:end="427:52">mb_y</name></expr></argument>, <argument pos:start="427:55" pos:end="427:62"><expr pos:start="427:55" pos:end="427:62"><operator pos:start="427:55" pos:end="427:55">&amp;</operator><name pos:start="427:56" pos:end="427:62">buf_ptr</name></expr></argument>, <argument pos:start="427:65" pos:end="427:74"><expr pos:start="427:65" pos:end="427:74"><name pos:start="427:65" pos:end="427:74">input_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="429:21" pos:end="429:29"><expr pos:start="429:21" pos:end="429:28"><call pos:start="429:21" pos:end="429:28"><name pos:start="429:21" pos:end="429:26">emms_c</name><argument_list pos:start="429:27" pos:end="429:28">()</argument_list></call></expr>;</expr_stmt>



                    <if_stmt pos:start="433:21" pos:end="447:21"><if pos:start="433:21" pos:end="443:21">if <condition pos:start="433:24" pos:end="433:32">(<expr pos:start="433:25" pos:end="433:31"><name pos:start="433:25" pos:end="433:27">ret</name> <operator pos:start="433:29" pos:end="433:29">&lt;</operator> <literal type="number" pos:start="433:31" pos:end="433:31">0</literal></expr>)</condition> <block pos:start="433:34" pos:end="443:21">{<block_content pos:start="435:25" pos:end="441:143">

                        <if_stmt pos:start="435:25" pos:end="437:39"><if pos:start="435:25" pos:end="437:39">if <condition pos:start="435:28" pos:end="435:67">(<expr pos:start="435:29" pos:end="435:66"><name pos:start="435:29" pos:end="435:50"><name pos:start="435:29" pos:end="435:33">avctx</name><operator pos:start="435:34" pos:end="435:35">-&gt;</operator><name pos:start="435:36" pos:end="435:50">err_recognition</name></name> <operator pos:start="435:52" pos:end="435:52">&amp;</operator> <name pos:start="435:54" pos:end="435:66">AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo" pos:start="437:29" pos:end="437:39"><block_content pos:start="437:29" pos:end="437:39">

                            <return pos:start="437:29" pos:end="437:39">return <expr pos:start="437:36" pos:end="437:38"><name pos:start="437:36" pos:end="437:38">ret</name></expr>;</return></block_content></block></if></if_stmt>

                        <if_stmt pos:start="439:25" pos:end="441:143"><if pos:start="439:25" pos:end="441:143">if <condition pos:start="439:28" pos:end="439:73">(<expr pos:start="439:29" pos:end="439:72"><name pos:start="439:29" pos:end="439:43"><name pos:start="439:29" pos:end="439:30">s2</name><operator pos:start="439:31" pos:end="439:32">-&gt;</operator><name pos:start="439:33" pos:end="439:43">resync_mb_x</name></name> <operator pos:start="439:45" pos:end="439:46">&gt;=</operator> <literal type="number" pos:start="439:48" pos:end="439:48">0</literal> <operator pos:start="439:50" pos:end="439:51">&amp;&amp;</operator> <name pos:start="439:53" pos:end="439:67"><name pos:start="439:53" pos:end="439:54">s2</name><operator pos:start="439:55" pos:end="439:56">-&gt;</operator><name pos:start="439:57" pos:end="439:67">resync_mb_y</name></name> <operator pos:start="439:69" pos:end="439:70">&gt;=</operator> <literal type="number" pos:start="439:72" pos:end="439:72">0</literal></expr>)</condition><block type="pseudo" pos:start="441:29" pos:end="441:143"><block_content pos:start="441:29" pos:end="441:143">

                            <expr_stmt pos:start="441:29" pos:end="441:143"><expr pos:start="441:29" pos:end="441:142"><call pos:start="441:29" pos:end="441:142"><name pos:start="441:29" pos:end="441:43">ff_er_add_slice</name><argument_list pos:start="441:44" pos:end="441:142">(<argument pos:start="441:45" pos:end="441:46"><expr pos:start="441:45" pos:end="441:46"><name pos:start="441:45" pos:end="441:46">s2</name></expr></argument>, <argument pos:start="441:49" pos:end="441:63"><expr pos:start="441:49" pos:end="441:63"><name pos:start="441:49" pos:end="441:63"><name pos:start="441:49" pos:end="441:50">s2</name><operator pos:start="441:51" pos:end="441:52">-&gt;</operator><name pos:start="441:53" pos:end="441:63">resync_mb_x</name></name></expr></argument>, <argument pos:start="441:66" pos:end="441:80"><expr pos:start="441:66" pos:end="441:80"><name pos:start="441:66" pos:end="441:80"><name pos:start="441:66" pos:end="441:67">s2</name><operator pos:start="441:68" pos:end="441:69">-&gt;</operator><name pos:start="441:70" pos:end="441:80">resync_mb_y</name></name></expr></argument>, <argument pos:start="441:83" pos:end="441:90"><expr pos:start="441:83" pos:end="441:90"><name pos:start="441:83" pos:end="441:90"><name pos:start="441:83" pos:end="441:84">s2</name><operator pos:start="441:85" pos:end="441:86">-&gt;</operator><name pos:start="441:87" pos:end="441:90">mb_x</name></name></expr></argument>, <argument pos:start="441:93" pos:end="441:100"><expr pos:start="441:93" pos:end="441:100"><name pos:start="441:93" pos:end="441:100"><name pos:start="441:93" pos:end="441:94">s2</name><operator pos:start="441:95" pos:end="441:96">-&gt;</operator><name pos:start="441:97" pos:end="441:100">mb_y</name></name></expr></argument>, <argument pos:start="441:103" pos:end="441:141"><expr pos:start="441:103" pos:end="441:141"><name pos:start="441:103" pos:end="441:113">ER_AC_ERROR</name> <operator pos:start="441:115" pos:end="441:115">|</operator> <name pos:start="441:117" pos:end="441:127">ER_DC_ERROR</name> <operator pos:start="441:129" pos:end="441:129">|</operator> <name pos:start="441:131" pos:end="441:141">ER_MV_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    </block_content>}</block></if> <else pos:start="443:23" pos:end="447:21">else <block pos:start="443:28" pos:end="447:21">{<block_content pos:start="445:25" pos:end="445:135">

                        <expr_stmt pos:start="445:25" pos:end="445:135"><expr pos:start="445:25" pos:end="445:134"><call pos:start="445:25" pos:end="445:134"><name pos:start="445:25" pos:end="445:39">ff_er_add_slice</name><argument_list pos:start="445:40" pos:end="445:134">(<argument pos:start="445:41" pos:end="445:42"><expr pos:start="445:41" pos:end="445:42"><name pos:start="445:41" pos:end="445:42">s2</name></expr></argument>, <argument pos:start="445:45" pos:end="445:59"><expr pos:start="445:45" pos:end="445:59"><name pos:start="445:45" pos:end="445:59"><name pos:start="445:45" pos:end="445:46">s2</name><operator pos:start="445:47" pos:end="445:48">-&gt;</operator><name pos:start="445:49" pos:end="445:59">resync_mb_x</name></name></expr></argument>, <argument pos:start="445:62" pos:end="445:76"><expr pos:start="445:62" pos:end="445:76"><name pos:start="445:62" pos:end="445:76"><name pos:start="445:62" pos:end="445:63">s2</name><operator pos:start="445:64" pos:end="445:65">-&gt;</operator><name pos:start="445:66" pos:end="445:76">resync_mb_y</name></name></expr></argument>, <argument pos:start="445:79" pos:end="445:88"><expr pos:start="445:79" pos:end="445:88"><name pos:start="445:79" pos:end="445:86"><name pos:start="445:79" pos:end="445:80">s2</name><operator pos:start="445:81" pos:end="445:82">-&gt;</operator><name pos:start="445:83" pos:end="445:86">mb_x</name></name><operator pos:start="445:87" pos:end="445:87">-</operator><literal type="number" pos:start="445:88" pos:end="445:88">1</literal></expr></argument>, <argument pos:start="445:91" pos:end="445:98"><expr pos:start="445:91" pos:end="445:98"><name pos:start="445:91" pos:end="445:98"><name pos:start="445:91" pos:end="445:92">s2</name><operator pos:start="445:93" pos:end="445:94">-&gt;</operator><name pos:start="445:95" pos:end="445:98">mb_y</name></name></expr></argument>, <argument pos:start="445:101" pos:end="445:133"><expr pos:start="445:101" pos:end="445:133"><name pos:start="445:101" pos:end="445:109">ER_AC_END</name> <operator pos:start="445:111" pos:end="445:111">|</operator> <name pos:start="445:113" pos:end="445:121">ER_DC_END</name> <operator pos:start="445:123" pos:end="445:123">|</operator> <name pos:start="445:125" pos:end="445:133">ER_MV_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="453:13" pos:end="453:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
