<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25339.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">load_vmstate</name><parameter_list pos:start="1:17" pos:end="1:48">(<parameter pos:start="1:18" pos:end="1:33"><decl pos:start="1:18" pos:end="1:33"><type pos:start="1:18" pos:end="1:33"><specifier pos:start="1:18" pos:end="1:22">const</specifier> <name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:33">name</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:40">Error</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier><modifier pos:start="1:43" pos:end="1:43">*</modifier></type><name pos:start="1:44" pos:end="1:47">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:38">bs_vm_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">QEMUSnapshotInfo</name></type> <name pos:start="7:22" pos:end="7:23">sn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QEMUFile</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">AioContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:27">aio_context</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:67"><decl pos:start="15:5" pos:end="15:66"><type pos:start="15:5" pos:end="15:28"><name pos:start="15:5" pos:end="15:26">MigrationIncomingState</name> <modifier pos:start="15:28" pos:end="15:28">*</modifier></type><name pos:start="15:29" pos:end="15:31">mis</name> <init pos:start="15:33" pos:end="15:66">= <expr pos:start="15:35" pos:end="15:66"><call pos:start="15:35" pos:end="15:66"><name pos:start="15:35" pos:end="15:64">migration_incoming_get_current</name><argument_list pos:start="15:65" pos:end="15:66">()</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="29:5"><if pos:start="19:5" pos:end="29:5">if <condition pos:start="19:8" pos:end="19:36">(<expr pos:start="19:9" pos:end="19:35"><operator pos:start="19:9" pos:end="19:9">!</operator><call pos:start="19:10" pos:end="19:35"><name pos:start="19:10" pos:end="19:30">bdrv_all_can_snapshot</name><argument_list pos:start="19:31" pos:end="19:35">(<argument pos:start="19:32" pos:end="19:34"><expr pos:start="19:32" pos:end="19:34"><operator pos:start="19:32" pos:end="19:32">&amp;</operator><name pos:start="19:33" pos:end="19:34">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:38" pos:end="29:5">{<block_content pos:start="21:9" pos:end="27:24">

        <expr_stmt pos:start="21:9" pos:end="25:45"><expr pos:start="21:9" pos:end="25:44"><call pos:start="21:9" pos:end="25:44"><name pos:start="21:9" pos:end="21:18">error_setg</name><argument_list pos:start="21:19" pos:end="25:44">(<argument pos:start="21:20" pos:end="21:23"><expr pos:start="21:20" pos:end="21:23"><name pos:start="21:20" pos:end="21:23">errp</name></expr></argument>,

                   <argument pos:start="23:20" pos:end="23:75"><expr pos:start="23:20" pos:end="23:75"><literal type="string" pos:start="23:20" pos:end="23:75">"Device '%s' is writable but does not support snapshots"</literal></expr></argument>,

                   <argument pos:start="25:20" pos:end="25:43"><expr pos:start="25:20" pos:end="25:43"><call pos:start="25:20" pos:end="25:43"><name pos:start="25:20" pos:end="25:39">bdrv_get_device_name</name><argument_list pos:start="25:40" pos:end="25:43">(<argument pos:start="25:41" pos:end="25:42"><expr pos:start="25:41" pos:end="25:42"><name pos:start="25:41" pos:end="25:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="27:9" pos:end="27:24">return <expr pos:start="27:16" pos:end="27:23"><operator pos:start="27:16" pos:end="27:16">-</operator><name pos:start="27:17" pos:end="27:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:44"><expr pos:start="31:5" pos:end="31:43"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:43"><name pos:start="31:11" pos:end="31:32">bdrv_all_find_snapshot</name><argument_list pos:start="31:33" pos:end="31:43">(<argument pos:start="31:34" pos:end="31:37"><expr pos:start="31:34" pos:end="31:37"><name pos:start="31:34" pos:end="31:37">name</name></expr></argument>, <argument pos:start="31:40" pos:end="31:42"><expr pos:start="31:40" pos:end="31:42"><operator pos:start="31:40" pos:end="31:40">&amp;</operator><name pos:start="31:41" pos:end="31:42">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="43:5"><if pos:start="33:5" pos:end="43:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="43:5">{<block_content pos:start="35:9" pos:end="41:19">

        <expr_stmt pos:start="35:9" pos:end="39:51"><expr pos:start="35:9" pos:end="39:50"><call pos:start="35:9" pos:end="39:50"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="39:50">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>,

                   <argument pos:start="37:20" pos:end="37:74"><expr pos:start="37:20" pos:end="37:74"><literal type="string" pos:start="37:20" pos:end="37:74">"Device '%s' does not have the requested snapshot '%s'"</literal></expr></argument>,

                   <argument pos:start="39:20" pos:end="39:43"><expr pos:start="39:20" pos:end="39:43"><call pos:start="39:20" pos:end="39:43"><name pos:start="39:20" pos:end="39:39">bdrv_get_device_name</name><argument_list pos:start="39:40" pos:end="39:43">(<argument pos:start="39:41" pos:end="39:42"><expr pos:start="39:41" pos:end="39:42"><name pos:start="39:41" pos:end="39:42">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:46" pos:end="39:49"><expr pos:start="39:46" pos:end="39:49"><name pos:start="39:46" pos:end="39:49">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:45"><expr pos:start="47:5" pos:end="47:44"><name pos:start="47:5" pos:end="47:15">bs_vm_state</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="47:44"><name pos:start="47:19" pos:end="47:42">bdrv_all_find_vmstate_bs</name><argument_list pos:start="47:43" pos:end="47:44">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="49:21">(<expr pos:start="49:9" pos:end="49:20"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:20">bs_vm_state</name></expr>)</condition> <block pos:start="49:23" pos:end="55:5">{<block_content pos:start="51:9" pos:end="53:24">

        <expr_stmt pos:start="51:9" pos:end="51:63"><expr pos:start="51:9" pos:end="51:62"><call pos:start="51:9" pos:end="51:62"><name pos:start="51:9" pos:end="51:18">error_setg</name><argument_list pos:start="51:19" pos:end="51:62">(<argument pos:start="51:20" pos:end="51:23"><expr pos:start="51:20" pos:end="51:23"><name pos:start="51:20" pos:end="51:23">errp</name></expr></argument>, <argument pos:start="51:26" pos:end="51:61"><expr pos:start="51:26" pos:end="51:61"><literal type="string" pos:start="51:26" pos:end="51:61">"No block device supports snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:24">return <expr pos:start="53:16" pos:end="53:23"><operator pos:start="53:16" pos:end="53:16">-</operator><name pos:start="53:17" pos:end="53:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:15">aio_context</name> <operator pos:start="57:17" pos:end="57:17">=</operator> <call pos:start="57:19" pos:end="57:51"><name pos:start="57:19" pos:end="57:38">bdrv_get_aio_context</name><argument_list pos:start="57:39" pos:end="57:51">(<argument pos:start="57:40" pos:end="57:50"><expr pos:start="57:40" pos:end="57:50"><name pos:start="57:40" pos:end="57:50">bs_vm_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:48">/* Don't even try to load empty VM states */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:37"><expr pos:start="63:5" pos:end="63:36"><call pos:start="63:5" pos:end="63:36"><name pos:start="63:5" pos:end="63:23">aio_context_acquire</name><argument_list pos:start="63:24" pos:end="63:36">(<argument pos:start="63:25" pos:end="63:35"><expr pos:start="63:25" pos:end="63:35"><name pos:start="63:25" pos:end="63:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:53"><expr pos:start="65:5" pos:end="65:52"><name pos:start="65:5" pos:end="65:7">ret</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <call pos:start="65:11" pos:end="65:52"><name pos:start="65:11" pos:end="65:28">bdrv_snapshot_find</name><argument_list pos:start="65:29" pos:end="65:52">(<argument pos:start="65:30" pos:end="65:40"><expr pos:start="65:30" pos:end="65:40"><name pos:start="65:30" pos:end="65:40">bs_vm_state</name></expr></argument>, <argument pos:start="65:43" pos:end="65:45"><expr pos:start="65:43" pos:end="65:45"><operator pos:start="65:43" pos:end="65:43">&amp;</operator><name pos:start="65:44" pos:end="65:45">sn</name></expr></argument>, <argument pos:start="65:48" pos:end="65:51"><expr pos:start="65:48" pos:end="65:51"><name pos:start="65:48" pos:end="65:51">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:37"><expr pos:start="67:5" pos:end="67:36"><call pos:start="67:5" pos:end="67:36"><name pos:start="67:5" pos:end="67:23">aio_context_release</name><argument_list pos:start="67:24" pos:end="67:36">(<argument pos:start="67:25" pos:end="67:35"><expr pos:start="67:25" pos:end="67:35"><name pos:start="67:25" pos:end="67:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="81:5"><if pos:start="69:5" pos:end="73:5">if <condition pos:start="69:8" pos:end="69:16">(<expr pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:11">ret</name> <operator pos:start="69:13" pos:end="69:13">&lt;</operator> <literal type="number" pos:start="69:15" pos:end="69:15">0</literal></expr>)</condition> <block pos:start="69:18" pos:end="73:5">{<block_content pos:start="71:9" pos:end="71:19">

        <return pos:start="71:9" pos:end="71:19">return <expr pos:start="71:16" pos:end="71:18"><name pos:start="71:16" pos:end="71:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="73:7" pos:end="81:5">else if <condition pos:start="73:15" pos:end="73:37">(<expr pos:start="73:16" pos:end="73:36"><name pos:start="73:16" pos:end="73:31"><name pos:start="73:16" pos:end="73:17">sn</name><operator pos:start="73:18" pos:end="73:18">.</operator><name pos:start="73:19" pos:end="73:31">vm_state_size</name></name> <operator pos:start="73:33" pos:end="73:34">==</operator> <literal type="number" pos:start="73:36" pos:end="73:36">0</literal></expr>)</condition> <block pos:start="73:39" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:23">

        <expr_stmt pos:start="75:9" pos:end="77:46"><expr pos:start="75:9" pos:end="77:45"><call pos:start="75:9" pos:end="77:45"><name pos:start="75:9" pos:end="75:18">error_setg</name><argument_list pos:start="75:19" pos:end="77:45">(<argument pos:start="75:20" pos:end="75:23"><expr pos:start="75:20" pos:end="75:23"><name pos:start="75:20" pos:end="75:23">errp</name></expr></argument>, <argument pos:start="75:26" pos:end="77:44"><expr pos:start="75:26" pos:end="77:44"><literal type="string" pos:start="75:26" pos:end="75:70">"This is a disk-only snapshot. Revert to it "</literal>

                   <literal type="string" pos:start="77:20" pos:end="77:44">" offline using qemu-img"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="79:9" pos:end="79:23">return <expr pos:start="79:16" pos:end="79:22"><operator pos:start="79:16" pos:end="79:16">-</operator><name pos:start="79:17" pos:end="79:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="85:5" pos:end="85:76">/* Flush all IO requests so they don't interfere with the new state.  */</comment>

    <expr_stmt pos:start="87:5" pos:end="87:21"><expr pos:start="87:5" pos:end="87:20"><call pos:start="87:5" pos:end="87:20"><name pos:start="87:5" pos:end="87:18">bdrv_drain_all</name><argument_list pos:start="87:19" pos:end="87:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="91:5" pos:end="91:44"><expr pos:start="91:5" pos:end="91:43"><name pos:start="91:5" pos:end="91:7">ret</name> <operator pos:start="91:9" pos:end="91:9">=</operator> <call pos:start="91:11" pos:end="91:43"><name pos:start="91:11" pos:end="91:32">bdrv_all_goto_snapshot</name><argument_list pos:start="91:33" pos:end="91:43">(<argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">name</name></expr></argument>, <argument pos:start="91:40" pos:end="91:42"><expr pos:start="91:40" pos:end="91:42"><operator pos:start="91:40" pos:end="91:40">&amp;</operator><name pos:start="91:41" pos:end="91:42">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="93:5" pos:end="101:5"><if pos:start="93:5" pos:end="101:5">if <condition pos:start="93:8" pos:end="93:16">(<expr pos:start="93:9" pos:end="93:15"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">&lt;</operator> <literal type="number" pos:start="93:15" pos:end="93:15">0</literal></expr>)</condition> <block pos:start="93:18" pos:end="101:5">{<block_content pos:start="95:9" pos:end="99:19">

        <expr_stmt pos:start="95:9" pos:end="97:58"><expr pos:start="95:9" pos:end="97:57"><call pos:start="95:9" pos:end="97:57"><name pos:start="95:9" pos:end="95:18">error_setg</name><argument_list pos:start="95:19" pos:end="97:57">(<argument pos:start="95:20" pos:end="95:23"><expr pos:start="95:20" pos:end="95:23"><name pos:start="95:20" pos:end="95:23">errp</name></expr></argument>, <argument pos:start="95:26" pos:end="95:74"><expr pos:start="95:26" pos:end="95:74"><literal type="string" pos:start="95:26" pos:end="95:74">"Error %d while activating snapshot '%s' on '%s'"</literal></expr></argument>,

                     <argument pos:start="97:22" pos:end="97:24"><expr pos:start="97:22" pos:end="97:24"><name pos:start="97:22" pos:end="97:24">ret</name></expr></argument>, <argument pos:start="97:27" pos:end="97:30"><expr pos:start="97:27" pos:end="97:30"><name pos:start="97:27" pos:end="97:30">name</name></expr></argument>, <argument pos:start="97:33" pos:end="97:56"><expr pos:start="97:33" pos:end="97:56"><call pos:start="97:33" pos:end="97:56"><name pos:start="97:33" pos:end="97:52">bdrv_get_device_name</name><argument_list pos:start="97:53" pos:end="97:56">(<argument pos:start="97:54" pos:end="97:55"><expr pos:start="97:54" pos:end="97:55"><name pos:start="97:54" pos:end="97:55">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:19">return <expr pos:start="99:16" pos:end="99:18"><name pos:start="99:16" pos:end="99:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="105:5" pos:end="105:30">/* restore the VM state */</comment>

    <expr_stmt pos:start="107:5" pos:end="107:40"><expr pos:start="107:5" pos:end="107:39"><name pos:start="107:5" pos:end="107:5">f</name> <operator pos:start="107:7" pos:end="107:7">=</operator> <call pos:start="107:9" pos:end="107:39"><name pos:start="107:9" pos:end="107:23">qemu_fopen_bdrv</name><argument_list pos:start="107:24" pos:end="107:39">(<argument pos:start="107:25" pos:end="107:35"><expr pos:start="107:25" pos:end="107:35"><name pos:start="107:25" pos:end="107:35">bs_vm_state</name></expr></argument>, <argument pos:start="107:38" pos:end="107:38"><expr pos:start="107:38" pos:end="107:38"><literal type="number" pos:start="107:38" pos:end="107:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="115:5"><if pos:start="109:5" pos:end="115:5">if <condition pos:start="109:8" pos:end="109:11">(<expr pos:start="109:9" pos:end="109:10"><operator pos:start="109:9" pos:end="109:9">!</operator><name pos:start="109:10" pos:end="109:10">f</name></expr>)</condition> <block pos:start="109:13" pos:end="115:5">{<block_content pos:start="111:9" pos:end="113:23">

        <expr_stmt pos:start="111:9" pos:end="111:57"><expr pos:start="111:9" pos:end="111:56"><call pos:start="111:9" pos:end="111:56"><name pos:start="111:9" pos:end="111:18">error_setg</name><argument_list pos:start="111:19" pos:end="111:56">(<argument pos:start="111:20" pos:end="111:23"><expr pos:start="111:20" pos:end="111:23"><name pos:start="111:20" pos:end="111:23">errp</name></expr></argument>, <argument pos:start="111:26" pos:end="111:55"><expr pos:start="111:26" pos:end="111:55"><literal type="string" pos:start="111:26" pos:end="111:55">"Could not open VM state file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="113:9" pos:end="113:23">return <expr pos:start="113:16" pos:end="113:22"><operator pos:start="113:16" pos:end="113:16">-</operator><name pos:start="113:17" pos:end="113:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="119:5" pos:end="119:38"><expr pos:start="119:5" pos:end="119:37"><call pos:start="119:5" pos:end="119:37"><name pos:start="119:5" pos:end="119:21">qemu_system_reset</name><argument_list pos:start="119:22" pos:end="119:37">(<argument pos:start="119:23" pos:end="119:36"><expr pos:start="119:23" pos:end="119:36"><name pos:start="119:23" pos:end="119:36">VMRESET_SILENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:27"><expr pos:start="121:5" pos:end="121:26"><name pos:start="121:5" pos:end="121:22"><name pos:start="121:5" pos:end="121:7">mis</name><operator pos:start="121:8" pos:end="121:9">-&gt;</operator><name pos:start="121:10" pos:end="121:22">from_src_file</name></name> <operator pos:start="121:24" pos:end="121:24">=</operator> <name pos:start="121:26" pos:end="121:26">f</name></expr>;</expr_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:37"><expr pos:start="125:5" pos:end="125:36"><call pos:start="125:5" pos:end="125:36"><name pos:start="125:5" pos:end="125:23">aio_context_acquire</name><argument_list pos:start="125:24" pos:end="125:36">(<argument pos:start="125:25" pos:end="125:35"><expr pos:start="125:25" pos:end="125:35"><name pos:start="125:25" pos:end="125:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:31"><expr pos:start="127:5" pos:end="127:30"><name pos:start="127:5" pos:end="127:7">ret</name> <operator pos:start="127:9" pos:end="127:9">=</operator> <call pos:start="127:11" pos:end="127:30"><name pos:start="127:11" pos:end="127:27">qemu_loadvm_state</name><argument_list pos:start="127:28" pos:end="127:30">(<argument pos:start="127:29" pos:end="127:29"><expr pos:start="127:29" pos:end="127:29"><name pos:start="127:29" pos:end="127:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:19"><expr pos:start="129:5" pos:end="129:18"><call pos:start="129:5" pos:end="129:18"><name pos:start="129:5" pos:end="129:15">qemu_fclose</name><argument_list pos:start="129:16" pos:end="129:18">(<argument pos:start="129:17" pos:end="129:17"><expr pos:start="129:17" pos:end="129:17"><name pos:start="129:17" pos:end="129:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:37"><expr pos:start="131:5" pos:end="131:36"><call pos:start="131:5" pos:end="131:36"><name pos:start="131:5" pos:end="131:23">aio_context_release</name><argument_list pos:start="131:24" pos:end="131:36">(<argument pos:start="131:25" pos:end="131:35"><expr pos:start="131:25" pos:end="131:35"><name pos:start="131:25" pos:end="131:35">aio_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:39"><expr pos:start="135:5" pos:end="135:38"><call pos:start="135:5" pos:end="135:38"><name pos:start="135:5" pos:end="135:36">migration_incoming_state_destroy</name><argument_list pos:start="135:37" pos:end="135:38">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:16">(<expr pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">&lt;</operator> <literal type="number" pos:start="137:15" pos:end="137:15">0</literal></expr>)</condition> <block pos:start="137:18" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:19">

        <expr_stmt pos:start="139:9" pos:end="139:65"><expr pos:start="139:9" pos:end="139:64"><call pos:start="139:9" pos:end="139:64"><name pos:start="139:9" pos:end="139:18">error_setg</name><argument_list pos:start="139:19" pos:end="139:64">(<argument pos:start="139:20" pos:end="139:23"><expr pos:start="139:20" pos:end="139:23"><name pos:start="139:20" pos:end="139:23">errp</name></expr></argument>, <argument pos:start="139:26" pos:end="139:58"><expr pos:start="139:26" pos:end="139:58"><literal type="string" pos:start="139:26" pos:end="139:58">"Error %d while loading VM state"</literal></expr></argument>, <argument pos:start="139:61" pos:end="139:63"><expr pos:start="139:61" pos:end="139:63"><name pos:start="139:61" pos:end="139:63">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:19">return <expr pos:start="141:16" pos:end="141:18"><name pos:start="141:16" pos:end="141:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
