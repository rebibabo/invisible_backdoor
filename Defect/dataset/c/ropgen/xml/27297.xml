<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27297.c" pos:tabs="8"><function pos:start="1:1" pos:end="285:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">xiph_handle_packet</name><parameter_list pos:start="1:30" pos:end="7:40">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">ctx</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:66">PayloadContext</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:72">data</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:42"><decl pos:start="3:31" pos:end="3:42"><type pos:start="3:31" pos:end="3:42"><name pos:start="3:31" pos:end="3:38">AVStream</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:42">st</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:52">AVPacket</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:57">pkt</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:78"><decl pos:start="3:60" pos:end="3:78"><type pos:start="3:60" pos:end="3:78"><name pos:start="3:60" pos:end="3:67">uint32_t</name> <modifier pos:start="3:69" pos:end="3:69">*</modifier></type><name pos:start="3:70" pos:end="3:78">timestamp</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:48"><decl pos:start="5:31" pos:end="5:48"><type pos:start="5:31" pos:end="5:48"><specifier pos:start="5:31" pos:end="5:35">const</specifier> <name pos:start="5:37" pos:end="5:43">uint8_t</name> <modifier pos:start="5:45" pos:end="5:45">*</modifier></type><name pos:start="5:46" pos:end="5:48">buf</name></decl></parameter>, <parameter pos:start="5:51" pos:end="5:57"><decl pos:start="5:51" pos:end="5:57"><type pos:start="5:51" pos:end="5:57"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:57">len</name></decl></parameter>, <parameter pos:start="5:60" pos:end="5:71"><decl pos:start="5:60" pos:end="5:71"><type pos:start="5:60" pos:end="5:71"><name pos:start="5:60" pos:end="5:67">uint16_t</name></type> <name pos:start="5:69" pos:end="5:71">seq</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:39"><decl pos:start="7:31" pos:end="7:39"><type pos:start="7:31" pos:end="7:39"><name pos:start="7:31" pos:end="7:33">int</name></type> <name pos:start="7:35" pos:end="7:39">flags</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="285:1">{<block_content pos:start="13:5" pos:end="283:26">



    <decl_stmt pos:start="13:5" pos:end="13:50"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">ident</name></decl>, <decl pos:start="13:16" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:16" pos:end="13:25">fragmented</name></decl>, <decl pos:start="13:28" pos:end="13:30"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:28" pos:end="13:30">tdt</name></decl>, <decl pos:start="13:33" pos:end="13:40"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:33" pos:end="13:40">num_pkts</name></decl>, <decl pos:start="13:43" pos:end="13:49"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:43" pos:end="13:49">pkt_len</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="59:5"><if pos:start="17:5" pos:end="59:5">if <condition pos:start="17:8" pos:end="17:13">(<expr pos:start="17:9" pos:end="17:12"><operator pos:start="17:9" pos:end="17:9">!</operator><name pos:start="17:10" pos:end="17:12">buf</name></expr>)</condition> <block pos:start="17:15" pos:end="59:5">{<block_content pos:start="19:9" pos:end="57:36">

        <if_stmt pos:start="19:9" pos:end="27:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="21:34">(<expr pos:start="19:13" pos:end="21:33"><operator pos:start="19:13" pos:end="19:13">!</operator><name pos:start="19:14" pos:end="19:28"><name pos:start="19:14" pos:end="19:17">data</name><operator pos:start="19:18" pos:end="19:19">-&gt;</operator><name pos:start="19:20" pos:end="19:28">split_buf</name></name> <operator pos:start="19:30" pos:end="19:31">||</operator> <name pos:start="19:33" pos:end="19:47"><name pos:start="19:33" pos:end="19:36">data</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:47">split_pos</name></name> <operator pos:start="19:49" pos:end="19:49">+</operator> <literal type="number" pos:start="19:51" pos:end="19:51">2</literal> <operator pos:start="19:53" pos:end="19:53">&gt;</operator> <name pos:start="19:55" pos:end="19:73"><name pos:start="19:55" pos:end="19:58">data</name><operator pos:start="19:59" pos:end="19:60">-&gt;</operator><name pos:start="19:61" pos:end="19:73">split_buf_len</name></name> <operator pos:start="19:75" pos:end="19:76">||</operator>

            <name pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:16">data</name><operator pos:start="21:17" pos:end="21:18">-&gt;</operator><name pos:start="21:19" pos:end="21:28">split_pkts</name></name> <operator pos:start="21:30" pos:end="21:31">&lt;=</operator> <literal type="number" pos:start="21:33" pos:end="21:33">0</literal></expr>)</condition> <block pos:start="21:36" pos:end="27:9">{<block_content pos:start="23:13" pos:end="25:39">

            <expr_stmt pos:start="23:13" pos:end="23:66"><expr pos:start="23:13" pos:end="23:65"><call pos:start="23:13" pos:end="23:65"><name pos:start="23:13" pos:end="23:18">av_log</name><argument_list pos:start="23:19" pos:end="23:65">(<argument pos:start="23:20" pos:end="23:22"><expr pos:start="23:20" pos:end="23:22"><name pos:start="23:20" pos:end="23:22">ctx</name></expr></argument>, <argument pos:start="23:25" pos:end="23:36"><expr pos:start="23:25" pos:end="23:36"><name pos:start="23:25" pos:end="23:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:39" pos:end="23:64"><expr pos:start="23:39" pos:end="23:64"><literal type="string" pos:start="23:39" pos:end="23:64">"No more data to return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="25:13" pos:end="25:39">return <expr pos:start="25:20" pos:end="25:38"><name pos:start="25:20" pos:end="25:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:61"><expr pos:start="29:9" pos:end="29:60"><name pos:start="29:9" pos:end="29:15">pkt_len</name> <operator pos:start="29:17" pos:end="29:17">=</operator> <call pos:start="29:19" pos:end="29:60"><name pos:start="29:19" pos:end="29:25">AV_RB16</name><argument_list pos:start="29:26" pos:end="29:60">(<argument pos:start="29:27" pos:end="29:59"><expr pos:start="29:27" pos:end="29:59"><name pos:start="29:27" pos:end="29:41"><name pos:start="29:27" pos:end="29:30">data</name><operator pos:start="29:31" pos:end="29:32">-&gt;</operator><name pos:start="29:33" pos:end="29:41">split_buf</name></name> <operator pos:start="29:43" pos:end="29:43">+</operator> <name pos:start="29:45" pos:end="29:59"><name pos:start="29:45" pos:end="29:48">data</name><operator pos:start="29:49" pos:end="29:50">-&gt;</operator><name pos:start="29:51" pos:end="29:59">split_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:29"><expr pos:start="31:9" pos:end="31:28"><name pos:start="31:9" pos:end="31:23"><name pos:start="31:9" pos:end="31:12">data</name><operator pos:start="31:13" pos:end="31:14">-&gt;</operator><name pos:start="31:15" pos:end="31:23">split_pos</name></name> <operator pos:start="31:25" pos:end="31:26">+=</operator> <literal type="number" pos:start="31:28" pos:end="31:28">2</literal></expr>;</expr_stmt>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:60">(<expr pos:start="33:13" pos:end="33:59"><name pos:start="33:13" pos:end="33:27"><name pos:start="33:13" pos:end="33:16">data</name><operator pos:start="33:17" pos:end="33:18">-&gt;</operator><name pos:start="33:19" pos:end="33:27">split_pos</name></name> <operator pos:start="33:29" pos:end="33:29">+</operator> <name pos:start="33:31" pos:end="33:37">pkt_len</name> <operator pos:start="33:39" pos:end="33:39">&gt;</operator> <name pos:start="33:41" pos:end="33:59"><name pos:start="33:41" pos:end="33:44">data</name><operator pos:start="33:45" pos:end="33:46">-&gt;</operator><name pos:start="33:47" pos:end="33:59">split_buf_len</name></name></expr>)</condition> <block pos:start="33:62" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:39">

            <expr_stmt pos:start="35:13" pos:end="35:69"><expr pos:start="35:13" pos:end="35:68"><call pos:start="35:13" pos:end="35:68"><name pos:start="35:13" pos:end="35:18">av_log</name><argument_list pos:start="35:19" pos:end="35:68">(<argument pos:start="35:20" pos:end="35:22"><expr pos:start="35:20" pos:end="35:22"><name pos:start="35:20" pos:end="35:22">ctx</name></expr></argument>, <argument pos:start="35:25" pos:end="35:36"><expr pos:start="35:25" pos:end="35:36"><name pos:start="35:25" pos:end="35:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:39" pos:end="35:67"><expr pos:start="35:39" pos:end="35:67"><literal type="string" pos:start="35:39" pos:end="35:67">"Not enough data to return\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="37:13" pos:end="37:39">return <expr pos:start="37:20" pos:end="37:38"><name pos:start="37:20" pos:end="37:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:40">(<expr pos:start="41:13" pos:end="41:39"><call pos:start="41:13" pos:end="41:39"><name pos:start="41:13" pos:end="41:25">av_new_packet</name><argument_list pos:start="41:26" pos:end="41:39">(<argument pos:start="41:27" pos:end="41:29"><expr pos:start="41:27" pos:end="41:29"><name pos:start="41:27" pos:end="41:29">pkt</name></expr></argument>, <argument pos:start="41:32" pos:end="41:38"><expr pos:start="41:32" pos:end="41:38"><name pos:start="41:32" pos:end="41:38">pkt_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:42" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:35">

            <expr_stmt pos:start="43:13" pos:end="43:58"><expr pos:start="43:13" pos:end="43:57"><call pos:start="43:13" pos:end="43:57"><name pos:start="43:13" pos:end="43:18">av_log</name><argument_list pos:start="43:19" pos:end="43:57">(<argument pos:start="43:20" pos:end="43:22"><expr pos:start="43:20" pos:end="43:22"><name pos:start="43:20" pos:end="43:22">ctx</name></expr></argument>, <argument pos:start="43:25" pos:end="43:36"><expr pos:start="43:25" pos:end="43:36"><name pos:start="43:25" pos:end="43:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="43:39" pos:end="43:56"><expr pos:start="43:39" pos:end="43:56"><literal type="string" pos:start="43:39" pos:end="43:56">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:35">return <expr pos:start="45:20" pos:end="45:34"><call pos:start="45:20" pos:end="45:34"><name pos:start="45:20" pos:end="45:26">AVERROR</name><argument_list pos:start="45:27" pos:end="45:34">(<argument pos:start="45:28" pos:end="45:33"><expr pos:start="45:28" pos:end="45:33"><name pos:start="45:28" pos:end="45:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:38"><expr pos:start="49:9" pos:end="49:37"><name pos:start="49:9" pos:end="49:25"><name pos:start="49:9" pos:end="49:11">pkt</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:25">stream_index</name></name> <operator pos:start="49:27" pos:end="49:27">=</operator> <name pos:start="49:29" pos:end="49:37"><name pos:start="49:29" pos:end="49:30">st</name><operator pos:start="49:31" pos:end="49:32">-&gt;</operator><name pos:start="49:33" pos:end="49:37">index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:70"><expr pos:start="51:9" pos:end="51:69"><call pos:start="51:9" pos:end="51:69"><name pos:start="51:9" pos:end="51:14">memcpy</name><argument_list pos:start="51:15" pos:end="51:69">(<argument pos:start="51:16" pos:end="51:24"><expr pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:24"><name pos:start="51:16" pos:end="51:18">pkt</name><operator pos:start="51:19" pos:end="51:20">-&gt;</operator><name pos:start="51:21" pos:end="51:24">data</name></name></expr></argument>, <argument pos:start="51:27" pos:end="51:59"><expr pos:start="51:27" pos:end="51:59"><name pos:start="51:27" pos:end="51:41"><name pos:start="51:27" pos:end="51:30">data</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:41">split_buf</name></name> <operator pos:start="51:43" pos:end="51:43">+</operator> <name pos:start="51:45" pos:end="51:59"><name pos:start="51:45" pos:end="51:48">data</name><operator pos:start="51:49" pos:end="51:50">-&gt;</operator><name pos:start="51:51" pos:end="51:59">split_pos</name></name></expr></argument>, <argument pos:start="51:62" pos:end="51:68"><expr pos:start="51:62" pos:end="51:68"><name pos:start="51:62" pos:end="51:68">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:35"><expr pos:start="53:9" pos:end="53:34"><name pos:start="53:9" pos:end="53:23"><name pos:start="53:9" pos:end="53:12">data</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:23">split_pos</name></name> <operator pos:start="53:25" pos:end="53:26">+=</operator> <name pos:start="53:28" pos:end="53:34">pkt_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:24"><name pos:start="55:9" pos:end="55:12">data</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:24">split_pkts</name></name><operator pos:start="55:25" pos:end="55:26">--</operator></expr>;</expr_stmt>

        <return pos:start="57:9" pos:end="57:36">return <expr pos:start="57:16" pos:end="57:35"><name pos:start="57:16" pos:end="57:31"><name pos:start="57:16" pos:end="57:19">data</name><operator pos:start="57:20" pos:end="57:21">-&gt;</operator><name pos:start="57:22" pos:end="57:31">split_pkts</name></name> <operator pos:start="57:33" pos:end="57:33">&gt;</operator> <literal type="number" pos:start="57:35" pos:end="57:35">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="63:5" pos:end="69:5"><if pos:start="63:5" pos:end="69:5">if <condition pos:start="63:8" pos:end="63:35">(<expr pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:24"><name pos:start="63:9" pos:end="63:11">len</name> <argument_list type="generic" pos:start="63:13" pos:end="63:24">&lt; <argument pos:start="63:15" pos:end="63:22"><expr pos:start="63:15" pos:end="63:22"><literal type="number" pos:start="63:15" pos:end="63:15">6</literal> <operator pos:start="63:17" pos:end="63:18">||</operator> <name pos:start="63:20" pos:end="63:22">len</name></expr></argument> &gt;</argument_list></name> <name pos:start="63:26" pos:end="63:32">INT_MAX</name><operator pos:start="63:33" pos:end="63:33">/</operator><literal type="number" pos:start="63:34" pos:end="63:34">2</literal></expr>)</condition> <block pos:start="63:37" pos:end="69:5">{<block_content pos:start="65:9" pos:end="67:35">

        <expr_stmt pos:start="65:9" pos:end="65:67"><expr pos:start="65:9" pos:end="65:66"><call pos:start="65:9" pos:end="65:66"><name pos:start="65:9" pos:end="65:14">av_log</name><argument_list pos:start="65:15" pos:end="65:66">(<argument pos:start="65:16" pos:end="65:18"><expr pos:start="65:16" pos:end="65:18"><name pos:start="65:16" pos:end="65:18">ctx</name></expr></argument>, <argument pos:start="65:21" pos:end="65:32"><expr pos:start="65:21" pos:end="65:32"><name pos:start="65:21" pos:end="65:32">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:35" pos:end="65:60"><expr pos:start="65:35" pos:end="65:60"><literal type="string" pos:start="65:35" pos:end="65:60">"Invalid %d byte packet\n"</literal></expr></argument>, <argument pos:start="65:63" pos:end="65:65"><expr pos:start="65:63" pos:end="65:65"><name pos:start="65:63" pos:end="65:65">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="67:9" pos:end="67:35">return <expr pos:start="67:16" pos:end="67:34"><name pos:start="67:16" pos:end="67:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="73:5" pos:end="73:28">// read xiph rtp headers</comment>

    <expr_stmt pos:start="75:5" pos:end="75:31"><expr pos:start="75:5" pos:end="75:30"><name pos:start="75:5" pos:end="75:9">ident</name>       <operator pos:start="75:17" pos:end="75:17">=</operator> <call pos:start="75:19" pos:end="75:30"><name pos:start="75:19" pos:end="75:25">AV_RB24</name><argument_list pos:start="75:26" pos:end="75:30">(<argument pos:start="75:27" pos:end="75:29"><expr pos:start="75:27" pos:end="75:29"><name pos:start="75:27" pos:end="75:29">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:30"><expr pos:start="77:5" pos:end="77:29"><name pos:start="77:5" pos:end="77:14">fragmented</name>  <operator pos:start="77:17" pos:end="77:17">=</operator> <name pos:start="77:19" pos:end="77:24"><name pos:start="77:19" pos:end="77:21">buf</name><index pos:start="77:22" pos:end="77:24">[<expr pos:start="77:23" pos:end="77:23"><literal type="number" pos:start="77:23" pos:end="77:23">3</literal></expr>]</index></name> <operator pos:start="77:26" pos:end="77:27">&gt;&gt;</operator> <literal type="number" pos:start="77:29" pos:end="77:29">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:36"><expr pos:start="79:5" pos:end="79:35"><name pos:start="79:5" pos:end="79:7">tdt</name>         <operator pos:start="79:17" pos:end="79:17">=</operator> <operator pos:start="79:19" pos:end="79:19">(</operator><name pos:start="79:20" pos:end="79:25"><name pos:start="79:20" pos:end="79:22">buf</name><index pos:start="79:23" pos:end="79:25">[<expr pos:start="79:24" pos:end="79:24"><literal type="number" pos:start="79:24" pos:end="79:24">3</literal></expr>]</index></name> <operator pos:start="79:27" pos:end="79:28">&gt;&gt;</operator> <literal type="number" pos:start="79:30" pos:end="79:30">4</literal><operator pos:start="79:31" pos:end="79:31">)</operator> <operator pos:start="79:33" pos:end="79:33">&amp;</operator> <literal type="number" pos:start="79:35" pos:end="79:35">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:31"><expr pos:start="81:5" pos:end="81:30"><name pos:start="81:5" pos:end="81:12">num_pkts</name>    <operator pos:start="81:17" pos:end="81:17">=</operator> <name pos:start="81:19" pos:end="81:24"><name pos:start="81:19" pos:end="81:21">buf</name><index pos:start="81:22" pos:end="81:24">[<expr pos:start="81:23" pos:end="81:23"><literal type="number" pos:start="81:23" pos:end="81:23">3</literal></expr>]</index></name> <operator pos:start="81:26" pos:end="81:26">&amp;</operator> <literal type="number" pos:start="81:28" pos:end="81:30">0xf</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:35"><expr pos:start="83:5" pos:end="83:34"><name pos:start="83:5" pos:end="83:11">pkt_len</name>     <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:34"><name pos:start="83:19" pos:end="83:25">AV_RB16</name><argument_list pos:start="83:26" pos:end="83:34">(<argument pos:start="83:27" pos:end="83:33"><expr pos:start="83:27" pos:end="83:33"><name pos:start="83:27" pos:end="83:29">buf</name> <operator pos:start="83:31" pos:end="83:31">+</operator> <literal type="number" pos:start="83:33" pos:end="83:33">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="87:5" pos:end="97:5"><if pos:start="87:5" pos:end="97:5">if <condition pos:start="87:8" pos:end="87:26">(<expr pos:start="87:9" pos:end="87:25"><name pos:start="87:9" pos:end="87:15">pkt_len</name> <operator pos:start="87:17" pos:end="87:17">&gt;</operator> <name pos:start="87:19" pos:end="87:21">len</name> <operator pos:start="87:23" pos:end="87:23">-</operator> <literal type="number" pos:start="87:25" pos:end="87:25">6</literal></expr>)</condition> <block pos:start="87:28" pos:end="97:5">{<block_content pos:start="89:9" pos:end="95:35">

        <expr_stmt pos:start="89:9" pos:end="93:20"><expr pos:start="89:9" pos:end="93:19"><call pos:start="89:9" pos:end="93:19"><name pos:start="89:9" pos:end="89:14">av_log</name><argument_list pos:start="89:15" pos:end="93:19">(<argument pos:start="89:16" pos:end="89:18"><expr pos:start="89:16" pos:end="89:18"><name pos:start="89:16" pos:end="89:18">ctx</name></expr></argument>, <argument pos:start="89:21" pos:end="89:32"><expr pos:start="89:21" pos:end="89:32"><name pos:start="89:21" pos:end="89:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="91:16" pos:end="91:61"><expr pos:start="91:16" pos:end="91:61"><literal type="string" pos:start="91:16" pos:end="91:61">"Invalid packet length %d in %d byte packet\n"</literal></expr></argument>, <argument pos:start="91:64" pos:end="91:70"><expr pos:start="91:64" pos:end="91:70"><name pos:start="91:64" pos:end="91:70">pkt_len</name></expr></argument>,

               <argument pos:start="93:16" pos:end="93:18"><expr pos:start="93:16" pos:end="93:18"><name pos:start="93:16" pos:end="93:18">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="95:9" pos:end="95:35">return <expr pos:start="95:16" pos:end="95:34"><name pos:start="95:16" pos:end="95:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:29">(<expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:13">ident</name> <operator pos:start="101:15" pos:end="101:16">!=</operator> <name pos:start="101:18" pos:end="101:28"><name pos:start="101:18" pos:end="101:21">data</name><operator pos:start="101:22" pos:end="101:23">-&gt;</operator><name pos:start="101:24" pos:end="101:28">ident</name></name></expr>)</condition> <block pos:start="101:31" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:36">

        <expr_stmt pos:start="103:9" pos:end="105:73"><expr pos:start="103:9" pos:end="105:72"><call pos:start="103:9" pos:end="105:72"><name pos:start="103:9" pos:end="103:14">av_log</name><argument_list pos:start="103:15" pos:end="105:72">(<argument pos:start="103:16" pos:end="103:18"><expr pos:start="103:16" pos:end="103:18"><name pos:start="103:16" pos:end="103:18">ctx</name></expr></argument>, <argument pos:start="103:21" pos:end="103:32"><expr pos:start="103:21" pos:end="103:32"><name pos:start="103:21" pos:end="103:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="105:16" pos:end="105:71"><expr pos:start="105:16" pos:end="105:71"><literal type="string" pos:start="105:16" pos:end="105:71">"Unimplemented Xiph SDP configuration change detected\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="107:9" pos:end="107:36">return <expr pos:start="107:16" pos:end="107:35"><name pos:start="107:16" pos:end="107:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="113:5" pos:end="123:5"><if pos:start="113:5" pos:end="123:5">if <condition pos:start="113:8" pos:end="113:12">(<expr pos:start="113:9" pos:end="113:11"><name pos:start="113:9" pos:end="113:11">tdt</name></expr>)</condition> <block pos:start="113:14" pos:end="123:5">{<block_content pos:start="115:9" pos:end="121:36">

        <expr_stmt pos:start="115:9" pos:end="119:42"><expr pos:start="115:9" pos:end="119:41"><call pos:start="115:9" pos:end="119:41"><name pos:start="115:9" pos:end="115:14">av_log</name><argument_list pos:start="115:15" pos:end="119:41">(<argument pos:start="115:16" pos:end="115:18"><expr pos:start="115:16" pos:end="115:18"><name pos:start="115:16" pos:end="115:18">ctx</name></expr></argument>, <argument pos:start="115:21" pos:end="115:32"><expr pos:start="115:21" pos:end="115:32"><name pos:start="115:21" pos:end="115:32">AV_LOG_ERROR</name></expr></argument>,

               <argument pos:start="117:16" pos:end="117:68"><expr pos:start="117:16" pos:end="117:68"><literal type="string" pos:start="117:16" pos:end="117:68">"Unimplemented RTP Xiph packet settings (%d,%d,%d)\n"</literal></expr></argument>,

               <argument pos:start="119:16" pos:end="119:25"><expr pos:start="119:16" pos:end="119:25"><name pos:start="119:16" pos:end="119:25">fragmented</name></expr></argument>, <argument pos:start="119:28" pos:end="119:30"><expr pos:start="119:28" pos:end="119:30"><name pos:start="119:28" pos:end="119:30">tdt</name></expr></argument>, <argument pos:start="119:33" pos:end="119:40"><expr pos:start="119:33" pos:end="119:40"><name pos:start="119:33" pos:end="119:40">num_pkts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="121:9" pos:end="121:36">return <expr pos:start="121:16" pos:end="121:35"><name pos:start="121:16" pos:end="121:35">AVERROR_PATCHWELCOME</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="127:5" pos:end="127:13"><expr pos:start="127:5" pos:end="127:12"><name pos:start="127:5" pos:end="127:7">buf</name> <operator pos:start="127:9" pos:end="127:10">+=</operator> <literal type="number" pos:start="127:12" pos:end="127:12">6</literal></expr>;</expr_stmt> <comment type="line" pos:start="127:15" pos:end="127:38">// move past header bits</comment>

    <expr_stmt pos:start="129:5" pos:end="129:13"><expr pos:start="129:5" pos:end="129:12"><name pos:start="129:5" pos:end="129:7">len</name> <operator pos:start="129:9" pos:end="129:10">-=</operator> <literal type="number" pos:start="129:12" pos:end="129:12">6</literal></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="279:5"><if pos:start="133:5" pos:end="195:5">if <condition pos:start="133:8" pos:end="133:24">(<expr pos:start="133:9" pos:end="133:23"><name pos:start="133:9" pos:end="133:18">fragmented</name> <operator pos:start="133:20" pos:end="133:21">==</operator> <literal type="number" pos:start="133:23" pos:end="133:23">0</literal></expr>)</condition> <block pos:start="133:26" pos:end="195:5">{<block_content pos:start="135:9" pos:end="191:17">

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:40">(<expr pos:start="135:13" pos:end="135:39"><call pos:start="135:13" pos:end="135:39"><name pos:start="135:13" pos:end="135:25">av_new_packet</name><argument_list pos:start="135:26" pos:end="135:39">(<argument pos:start="135:27" pos:end="135:29"><expr pos:start="135:27" pos:end="135:29"><name pos:start="135:27" pos:end="135:29">pkt</name></expr></argument>, <argument pos:start="135:32" pos:end="135:38"><expr pos:start="135:32" pos:end="135:38"><name pos:start="135:32" pos:end="135:38">pkt_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:42" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:35">

            <expr_stmt pos:start="137:13" pos:end="137:58"><expr pos:start="137:13" pos:end="137:57"><call pos:start="137:13" pos:end="137:57"><name pos:start="137:13" pos:end="137:18">av_log</name><argument_list pos:start="137:19" pos:end="137:57">(<argument pos:start="137:20" pos:end="137:22"><expr pos:start="137:20" pos:end="137:22"><name pos:start="137:20" pos:end="137:22">ctx</name></expr></argument>, <argument pos:start="137:25" pos:end="137:36"><expr pos:start="137:25" pos:end="137:36"><name pos:start="137:25" pos:end="137:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="137:39" pos:end="137:56"><expr pos:start="137:39" pos:end="137:56"><literal type="string" pos:start="137:39" pos:end="137:56">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:35">return <expr pos:start="139:20" pos:end="139:34"><call pos:start="139:20" pos:end="139:34"><name pos:start="139:20" pos:end="139:26">AVERROR</name><argument_list pos:start="139:27" pos:end="139:34">(<argument pos:start="139:28" pos:end="139:33"><expr pos:start="139:28" pos:end="139:33"><name pos:start="139:28" pos:end="139:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:38"><expr pos:start="143:9" pos:end="143:37"><name pos:start="143:9" pos:end="143:25"><name pos:start="143:9" pos:end="143:11">pkt</name><operator pos:start="143:12" pos:end="143:13">-&gt;</operator><name pos:start="143:14" pos:end="143:25">stream_index</name></name> <operator pos:start="143:27" pos:end="143:27">=</operator> <name pos:start="143:29" pos:end="143:37"><name pos:start="143:29" pos:end="143:30">st</name><operator pos:start="143:31" pos:end="143:32">-&gt;</operator><name pos:start="143:33" pos:end="143:37">index</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:40"><expr pos:start="145:9" pos:end="145:39"><call pos:start="145:9" pos:end="145:39"><name pos:start="145:9" pos:end="145:14">memcpy</name><argument_list pos:start="145:15" pos:end="145:39">(<argument pos:start="145:16" pos:end="145:24"><expr pos:start="145:16" pos:end="145:24"><name pos:start="145:16" pos:end="145:24"><name pos:start="145:16" pos:end="145:18">pkt</name><operator pos:start="145:19" pos:end="145:20">-&gt;</operator><name pos:start="145:21" pos:end="145:24">data</name></name></expr></argument>, <argument pos:start="145:27" pos:end="145:29"><expr pos:start="145:27" pos:end="145:29"><name pos:start="145:27" pos:end="145:29">buf</name></expr></argument>, <argument pos:start="145:32" pos:end="145:38"><expr pos:start="145:32" pos:end="145:38"><name pos:start="145:32" pos:end="145:38">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:23"><expr pos:start="147:9" pos:end="147:22"><name pos:start="147:9" pos:end="147:11">buf</name> <operator pos:start="147:13" pos:end="147:14">+=</operator> <name pos:start="147:16" pos:end="147:22">pkt_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:23"><expr pos:start="149:9" pos:end="149:22"><name pos:start="149:9" pos:end="149:11">len</name> <operator pos:start="149:13" pos:end="149:14">-=</operator> <name pos:start="149:16" pos:end="149:22">pkt_len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="151:9" pos:end="151:19"><expr pos:start="151:9" pos:end="151:18"><name pos:start="151:9" pos:end="151:16">num_pkts</name><operator pos:start="151:17" pos:end="151:18">--</operator></expr>;</expr_stmt>



        <if_stmt pos:start="155:9" pos:end="187:9"><if pos:start="155:9" pos:end="187:9">if <condition pos:start="155:12" pos:end="155:25">(<expr pos:start="155:13" pos:end="155:24"><name pos:start="155:13" pos:end="155:20">num_pkts</name> <operator pos:start="155:22" pos:end="155:22">&gt;</operator> <literal type="number" pos:start="155:24" pos:end="155:24">0</literal></expr>)</condition> <block pos:start="155:27" pos:end="187:9">{<block_content pos:start="157:13" pos:end="185:21">

            <if_stmt pos:start="157:13" pos:end="175:13"><if pos:start="157:13" pos:end="175:13">if <condition pos:start="157:16" pos:end="157:63">(<expr pos:start="157:17" pos:end="157:62"><name pos:start="157:17" pos:end="157:19">len</name> <operator pos:start="157:21" pos:end="157:21">&gt;</operator> <name pos:start="157:23" pos:end="157:42"><name pos:start="157:23" pos:end="157:26">data</name><operator pos:start="157:27" pos:end="157:28">-&gt;</operator><name pos:start="157:29" pos:end="157:42">split_buf_size</name></name> <operator pos:start="157:44" pos:end="157:45">||</operator> <operator pos:start="157:47" pos:end="157:47">!</operator><name pos:start="157:48" pos:end="157:62"><name pos:start="157:48" pos:end="157:51">data</name><operator pos:start="157:52" pos:end="157:53">-&gt;</operator><name pos:start="157:54" pos:end="157:62">split_buf</name></name></expr>)</condition> <block pos:start="157:65" pos:end="175:13">{<block_content pos:start="159:17" pos:end="173:17">

                <expr_stmt pos:start="159:17" pos:end="159:43"><expr pos:start="159:17" pos:end="159:42"><call pos:start="159:17" pos:end="159:42"><name pos:start="159:17" pos:end="159:24">av_freep</name><argument_list pos:start="159:25" pos:end="159:42">(<argument pos:start="159:26" pos:end="159:41"><expr pos:start="159:26" pos:end="159:41"><operator pos:start="159:26" pos:end="159:26">&amp;</operator><name pos:start="159:27" pos:end="159:41"><name pos:start="159:27" pos:end="159:30">data</name><operator pos:start="159:31" pos:end="159:32">-&gt;</operator><name pos:start="159:33" pos:end="159:41">split_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="161:17" pos:end="161:47"><expr pos:start="161:17" pos:end="161:46"><name pos:start="161:17" pos:end="161:36"><name pos:start="161:17" pos:end="161:20">data</name><operator pos:start="161:21" pos:end="161:22">-&gt;</operator><name pos:start="161:23" pos:end="161:36">split_buf_size</name></name> <operator pos:start="161:38" pos:end="161:38">=</operator> <literal type="number" pos:start="161:40" pos:end="161:40">2</literal> <operator pos:start="161:42" pos:end="161:42">*</operator> <name pos:start="161:44" pos:end="161:46">len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:66"><expr pos:start="163:17" pos:end="163:65"><name pos:start="163:17" pos:end="163:31"><name pos:start="163:17" pos:end="163:20">data</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:31">split_buf</name></name> <operator pos:start="163:33" pos:end="163:33">=</operator> <call pos:start="163:35" pos:end="163:65"><name pos:start="163:35" pos:end="163:43">av_malloc</name><argument_list pos:start="163:44" pos:end="163:65">(<argument pos:start="163:45" pos:end="163:64"><expr pos:start="163:45" pos:end="163:64"><name pos:start="163:45" pos:end="163:64"><name pos:start="163:45" pos:end="163:48">data</name><operator pos:start="163:49" pos:end="163:50">-&gt;</operator><name pos:start="163:51" pos:end="163:64">split_buf_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="165:17" pos:end="173:17"><if pos:start="165:17" pos:end="173:17">if <condition pos:start="165:20" pos:end="165:37">(<expr pos:start="165:21" pos:end="165:36"><operator pos:start="165:21" pos:end="165:21">!</operator><name pos:start="165:22" pos:end="165:36"><name pos:start="165:22" pos:end="165:25">data</name><operator pos:start="165:26" pos:end="165:27">-&gt;</operator><name pos:start="165:28" pos:end="165:36">split_buf</name></name></expr>)</condition> <block pos:start="165:39" pos:end="173:17">{<block_content pos:start="167:21" pos:end="171:43">

                    <expr_stmt pos:start="167:21" pos:end="167:66"><expr pos:start="167:21" pos:end="167:65"><call pos:start="167:21" pos:end="167:65"><name pos:start="167:21" pos:end="167:26">av_log</name><argument_list pos:start="167:27" pos:end="167:65">(<argument pos:start="167:28" pos:end="167:30"><expr pos:start="167:28" pos:end="167:30"><name pos:start="167:28" pos:end="167:30">ctx</name></expr></argument>, <argument pos:start="167:33" pos:end="167:44"><expr pos:start="167:33" pos:end="167:44"><name pos:start="167:33" pos:end="167:44">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="167:47" pos:end="167:64"><expr pos:start="167:47" pos:end="167:64"><literal type="string" pos:start="167:47" pos:end="167:64">"Out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="169:21" pos:end="169:40"><expr pos:start="169:21" pos:end="169:39"><call pos:start="169:21" pos:end="169:39"><name pos:start="169:21" pos:end="169:34">av_free_packet</name><argument_list pos:start="169:35" pos:end="169:39">(<argument pos:start="169:36" pos:end="169:38"><expr pos:start="169:36" pos:end="169:38"><name pos:start="169:36" pos:end="169:38">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="171:21" pos:end="171:43">return <expr pos:start="171:28" pos:end="171:42"><call pos:start="171:28" pos:end="171:42"><name pos:start="171:28" pos:end="171:34">AVERROR</name><argument_list pos:start="171:35" pos:end="171:42">(<argument pos:start="171:36" pos:end="171:41"><expr pos:start="171:36" pos:end="171:41"><name pos:start="171:36" pos:end="171:41">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:46"><expr pos:start="177:13" pos:end="177:45"><call pos:start="177:13" pos:end="177:45"><name pos:start="177:13" pos:end="177:18">memcpy</name><argument_list pos:start="177:19" pos:end="177:45">(<argument pos:start="177:20" pos:end="177:34"><expr pos:start="177:20" pos:end="177:34"><name pos:start="177:20" pos:end="177:34"><name pos:start="177:20" pos:end="177:23">data</name><operator pos:start="177:24" pos:end="177:25">-&gt;</operator><name pos:start="177:26" pos:end="177:34">split_buf</name></name></expr></argument>, <argument pos:start="177:37" pos:end="177:39"><expr pos:start="177:37" pos:end="177:39"><name pos:start="177:37" pos:end="177:39">buf</name></expr></argument>, <argument pos:start="177:42" pos:end="177:44"><expr pos:start="177:42" pos:end="177:44"><name pos:start="177:42" pos:end="177:44">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="179:13" pos:end="179:38"><expr pos:start="179:13" pos:end="179:37"><name pos:start="179:13" pos:end="179:31"><name pos:start="179:13" pos:end="179:16">data</name><operator pos:start="179:17" pos:end="179:18">-&gt;</operator><name pos:start="179:19" pos:end="179:31">split_buf_len</name></name> <operator pos:start="179:33" pos:end="179:33">=</operator> <name pos:start="179:35" pos:end="179:37">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:32"><expr pos:start="181:13" pos:end="181:31"><name pos:start="181:13" pos:end="181:27"><name pos:start="181:13" pos:end="181:16">data</name><operator pos:start="181:17" pos:end="181:18">-&gt;</operator><name pos:start="181:19" pos:end="181:27">split_pos</name></name> <operator pos:start="181:29" pos:end="181:29">=</operator> <literal type="number" pos:start="181:31" pos:end="181:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="183:13" pos:end="183:40"><expr pos:start="183:13" pos:end="183:39"><name pos:start="183:13" pos:end="183:28"><name pos:start="183:13" pos:end="183:16">data</name><operator pos:start="183:17" pos:end="183:18">-&gt;</operator><name pos:start="183:19" pos:end="183:28">split_pkts</name></name> <operator pos:start="183:30" pos:end="183:30">=</operator> <name pos:start="183:32" pos:end="183:39">num_pkts</name></expr>;</expr_stmt>

            <return pos:start="185:13" pos:end="185:21">return <expr pos:start="185:20" pos:end="185:20"><literal type="number" pos:start="185:20" pos:end="185:20">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <return pos:start="191:9" pos:end="191:17">return <expr pos:start="191:16" pos:end="191:16"><literal type="number" pos:start="191:16" pos:end="191:16">0</literal></expr>;</return>



    </block_content>}</block></if> <if type="elseif" pos:start="195:7" pos:end="221:5">else if <condition pos:start="195:15" pos:end="195:31">(<expr pos:start="195:16" pos:end="195:30"><name pos:start="195:16" pos:end="195:25">fragmented</name> <operator pos:start="195:27" pos:end="195:28">==</operator> <literal type="number" pos:start="195:30" pos:end="195:30">1</literal></expr>)</condition> <block pos:start="195:33" pos:end="221:5">{<block_content pos:start="199:9" pos:end="217:37">

        <comment type="line" pos:start="197:9" pos:end="197:38">// start of xiph data fragment</comment>

        <decl_stmt pos:start="199:9" pos:end="199:16"><decl pos:start="199:9" pos:end="199:15"><type pos:start="199:9" pos:end="199:11"><name pos:start="199:9" pos:end="199:11">int</name></type> <name pos:start="199:13" pos:end="199:15">res</name></decl>;</decl_stmt>



        <comment type="line" pos:start="203:9" pos:end="203:68">// end packet has been lost somewhere, so drop buffered data</comment>

        <expr_stmt pos:start="205:9" pos:end="205:43"><expr pos:start="205:9" pos:end="205:42"><call pos:start="205:9" pos:end="205:42"><name pos:start="205:9" pos:end="205:25">ffio_free_dyn_buf</name><argument_list pos:start="205:26" pos:end="205:42">(<argument pos:start="205:27" pos:end="205:41"><expr pos:start="205:27" pos:end="205:41"><operator pos:start="205:27" pos:end="205:27">&amp;</operator><name pos:start="205:28" pos:end="205:41"><name pos:start="205:28" pos:end="205:31">data</name><operator pos:start="205:32" pos:end="205:33">-&gt;</operator><name pos:start="205:34" pos:end="205:41">fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="209:9" pos:end="211:23"><if pos:start="209:9" pos:end="211:23">if<condition pos:start="209:11" pos:end="209:58">(<expr pos:start="209:12" pos:end="209:57"><operator pos:start="209:12" pos:end="209:12">(</operator><name pos:start="209:13" pos:end="209:15">res</name> <operator pos:start="209:17" pos:end="209:17">=</operator> <call pos:start="209:19" pos:end="209:52"><name pos:start="209:19" pos:end="209:35">avio_open_dyn_buf</name><argument_list pos:start="209:36" pos:end="209:52">(<argument pos:start="209:37" pos:end="209:51"><expr pos:start="209:37" pos:end="209:51"><operator pos:start="209:37" pos:end="209:37">&amp;</operator><name pos:start="209:38" pos:end="209:51"><name pos:start="209:38" pos:end="209:41">data</name><operator pos:start="209:42" pos:end="209:43">-&gt;</operator><name pos:start="209:44" pos:end="209:51">fragment</name></name></expr></argument>)</argument_list></call><operator pos:start="209:53" pos:end="209:53">)</operator> <operator pos:start="209:55" pos:end="209:55">&lt;</operator> <literal type="number" pos:start="209:57" pos:end="209:57">0</literal></expr>)</condition><block type="pseudo" pos:start="211:13" pos:end="211:23"><block_content pos:start="211:13" pos:end="211:23">

            <return pos:start="211:13" pos:end="211:23">return <expr pos:start="211:20" pos:end="211:22"><name pos:start="211:20" pos:end="211:22">res</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="215:9" pos:end="215:49"><expr pos:start="215:9" pos:end="215:48"><call pos:start="215:9" pos:end="215:48"><name pos:start="215:9" pos:end="215:18">avio_write</name><argument_list pos:start="215:19" pos:end="215:48">(<argument pos:start="215:20" pos:end="215:33"><expr pos:start="215:20" pos:end="215:33"><name pos:start="215:20" pos:end="215:33"><name pos:start="215:20" pos:end="215:23">data</name><operator pos:start="215:24" pos:end="215:25">-&gt;</operator><name pos:start="215:26" pos:end="215:33">fragment</name></name></expr></argument>, <argument pos:start="215:36" pos:end="215:38"><expr pos:start="215:36" pos:end="215:38"><name pos:start="215:36" pos:end="215:38">buf</name></expr></argument>, <argument pos:start="215:41" pos:end="215:47"><expr pos:start="215:41" pos:end="215:47"><name pos:start="215:41" pos:end="215:47">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:37"><expr pos:start="217:9" pos:end="217:36"><name pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:12">data</name><operator pos:start="217:13" pos:end="217:14">-&gt;</operator><name pos:start="217:15" pos:end="217:23">timestamp</name></name> <operator pos:start="217:25" pos:end="217:25">=</operator> <operator pos:start="217:27" pos:end="217:27">*</operator><name pos:start="217:28" pos:end="217:36">timestamp</name></expr>;</expr_stmt>



    </block_content>}</block></if> <else pos:start="221:7" pos:end="279:5">else <block pos:start="221:12" pos:end="279:5">{<block_content pos:start="223:9" pos:end="277:9">

        <expr_stmt pos:start="223:9" pos:end="223:35"><expr pos:start="223:9" pos:end="223:34"><call pos:start="223:9" pos:end="223:34"><name pos:start="223:9" pos:end="223:18">av_assert1</name><argument_list pos:start="223:19" pos:end="223:34">(<argument pos:start="223:20" pos:end="223:33"><expr pos:start="223:20" pos:end="223:33"><name pos:start="223:20" pos:end="223:29">fragmented</name> <operator pos:start="223:31" pos:end="223:31">&lt;</operator> <literal type="number" pos:start="223:33" pos:end="223:33">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="225:9" pos:end="237:9"><if pos:start="225:9" pos:end="237:9">if <condition pos:start="225:12" pos:end="225:42">(<expr pos:start="225:13" pos:end="225:41"><name pos:start="225:13" pos:end="225:27"><name pos:start="225:13" pos:end="225:16">data</name><operator pos:start="225:17" pos:end="225:18">-&gt;</operator><name pos:start="225:19" pos:end="225:27">timestamp</name></name> <operator pos:start="225:29" pos:end="225:30">!=</operator> <operator pos:start="225:32" pos:end="225:32">*</operator><name pos:start="225:33" pos:end="225:41">timestamp</name></expr>)</condition> <block pos:start="225:44" pos:end="237:9">{<block_content pos:start="231:13" pos:end="235:39">

            <comment type="line" pos:start="227:13" pos:end="227:57">// skip if fragmented timestamp is incorrect;</comment>

            <comment type="line" pos:start="229:13" pos:end="229:53">// a start packet has been lost somewhere</comment>

            <expr_stmt pos:start="231:13" pos:end="231:47"><expr pos:start="231:13" pos:end="231:46"><call pos:start="231:13" pos:end="231:46"><name pos:start="231:13" pos:end="231:29">ffio_free_dyn_buf</name><argument_list pos:start="231:30" pos:end="231:46">(<argument pos:start="231:31" pos:end="231:45"><expr pos:start="231:31" pos:end="231:45"><operator pos:start="231:31" pos:end="231:31">&amp;</operator><name pos:start="231:32" pos:end="231:45"><name pos:start="231:32" pos:end="231:35">data</name><operator pos:start="231:36" pos:end="231:37">-&gt;</operator><name pos:start="231:38" pos:end="231:45">fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="233:13" pos:end="233:71"><expr pos:start="233:13" pos:end="233:70"><call pos:start="233:13" pos:end="233:70"><name pos:start="233:13" pos:end="233:18">av_log</name><argument_list pos:start="233:19" pos:end="233:70">(<argument pos:start="233:20" pos:end="233:22"><expr pos:start="233:20" pos:end="233:22"><name pos:start="233:20" pos:end="233:22">ctx</name></expr></argument>, <argument pos:start="233:25" pos:end="233:36"><expr pos:start="233:25" pos:end="233:36"><name pos:start="233:25" pos:end="233:36">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="233:39" pos:end="233:69"><expr pos:start="233:39" pos:end="233:69"><literal type="string" pos:start="233:39" pos:end="233:69">"RTP timestamps don't match!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="235:13" pos:end="235:39">return <expr pos:start="235:20" pos:end="235:38"><name pos:start="235:20" pos:end="235:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="239:9" pos:end="247:9"><if pos:start="239:9" pos:end="247:9">if <condition pos:start="239:12" pos:end="239:28">(<expr pos:start="239:13" pos:end="239:27"><operator pos:start="239:13" pos:end="239:13">!</operator><name pos:start="239:14" pos:end="239:27"><name pos:start="239:14" pos:end="239:17">data</name><operator pos:start="239:18" pos:end="239:19">-&gt;</operator><name pos:start="239:20" pos:end="239:27">fragment</name></name></expr>)</condition> <block pos:start="239:30" pos:end="247:9">{<block_content pos:start="241:13" pos:end="245:35">

            <expr_stmt pos:start="241:13" pos:end="243:76"><expr pos:start="241:13" pos:end="243:75"><call pos:start="241:13" pos:end="243:75"><name pos:start="241:13" pos:end="241:18">av_log</name><argument_list pos:start="241:19" pos:end="243:75">(<argument pos:start="241:20" pos:end="241:22"><expr pos:start="241:20" pos:end="241:22"><name pos:start="241:20" pos:end="241:22">ctx</name></expr></argument>, <argument pos:start="241:25" pos:end="241:38"><expr pos:start="241:25" pos:end="241:38"><name pos:start="241:25" pos:end="241:38">AV_LOG_WARNING</name></expr></argument>,

                   <argument pos:start="243:20" pos:end="243:74"><expr pos:start="243:20" pos:end="243:74"><literal type="string" pos:start="243:20" pos:end="243:74">"Received packet without a start fragment; dropping.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="245:13" pos:end="245:35">return <expr pos:start="245:20" pos:end="245:34"><call pos:start="245:20" pos:end="245:34"><name pos:start="245:20" pos:end="245:26">AVERROR</name><argument_list pos:start="245:27" pos:end="245:34">(<argument pos:start="245:28" pos:end="245:33"><expr pos:start="245:28" pos:end="245:33"><name pos:start="245:28" pos:end="245:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="line" pos:start="251:9" pos:end="251:39">// copy data to fragment buffer</comment>

        <expr_stmt pos:start="253:9" pos:end="253:49"><expr pos:start="253:9" pos:end="253:48"><call pos:start="253:9" pos:end="253:48"><name pos:start="253:9" pos:end="253:18">avio_write</name><argument_list pos:start="253:19" pos:end="253:48">(<argument pos:start="253:20" pos:end="253:33"><expr pos:start="253:20" pos:end="253:33"><name pos:start="253:20" pos:end="253:33"><name pos:start="253:20" pos:end="253:23">data</name><operator pos:start="253:24" pos:end="253:25">-&gt;</operator><name pos:start="253:26" pos:end="253:33">fragment</name></name></expr></argument>, <argument pos:start="253:36" pos:end="253:38"><expr pos:start="253:36" pos:end="253:38"><name pos:start="253:36" pos:end="253:38">buf</name></expr></argument>, <argument pos:start="253:41" pos:end="253:47"><expr pos:start="253:41" pos:end="253:47"><name pos:start="253:41" pos:end="253:47">pkt_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="257:9" pos:end="277:9"><if pos:start="257:9" pos:end="277:9">if <condition pos:start="257:12" pos:end="257:28">(<expr pos:start="257:13" pos:end="257:27"><name pos:start="257:13" pos:end="257:22">fragmented</name> <operator pos:start="257:24" pos:end="257:25">==</operator> <literal type="number" pos:start="257:27" pos:end="257:27">3</literal></expr>)</condition> <block pos:start="257:30" pos:end="277:9">{<block_content pos:start="261:13" pos:end="275:21">

            <comment type="line" pos:start="259:13" pos:end="259:38">// end of xiph data packet</comment>

            <decl_stmt pos:start="261:13" pos:end="261:78"><decl pos:start="261:13" pos:end="261:77"><type pos:start="261:13" pos:end="261:15"><name pos:start="261:13" pos:end="261:15">int</name></type> <name pos:start="261:17" pos:end="261:19">ret</name> <init pos:start="261:21" pos:end="261:77">= <expr pos:start="261:23" pos:end="261:77"><call pos:start="261:23" pos:end="261:77"><name pos:start="261:23" pos:end="261:44">ff_rtp_finalize_packet</name><argument_list pos:start="261:45" pos:end="261:77">(<argument pos:start="261:46" pos:end="261:48"><expr pos:start="261:46" pos:end="261:48"><name pos:start="261:46" pos:end="261:48">pkt</name></expr></argument>, <argument pos:start="261:51" pos:end="261:65"><expr pos:start="261:51" pos:end="261:65"><operator pos:start="261:51" pos:end="261:51">&amp;</operator><name pos:start="261:52" pos:end="261:65"><name pos:start="261:52" pos:end="261:55">data</name><operator pos:start="261:56" pos:end="261:57">-&gt;</operator><name pos:start="261:58" pos:end="261:65">fragment</name></name></expr></argument>, <argument pos:start="261:68" pos:end="261:76"><expr pos:start="261:68" pos:end="261:76"><name pos:start="261:68" pos:end="261:76"><name pos:start="261:68" pos:end="261:69">st</name><operator pos:start="261:70" pos:end="261:71">-&gt;</operator><name pos:start="261:72" pos:end="261:76">index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="263:13" pos:end="271:13"><if pos:start="263:13" pos:end="271:13">if <condition pos:start="263:16" pos:end="263:24">(<expr pos:start="263:17" pos:end="263:23"><name pos:start="263:17" pos:end="263:19">ret</name> <operator pos:start="263:21" pos:end="263:21">&lt;</operator> <literal type="number" pos:start="263:23" pos:end="263:23">0</literal></expr>)</condition> <block pos:start="263:26" pos:end="271:13">{<block_content pos:start="265:17" pos:end="269:27">

                <expr_stmt pos:start="265:17" pos:end="267:71"><expr pos:start="265:17" pos:end="267:70"><call pos:start="265:17" pos:end="267:70"><name pos:start="265:17" pos:end="265:22">av_log</name><argument_list pos:start="265:23" pos:end="267:70">(<argument pos:start="265:24" pos:end="265:26"><expr pos:start="265:24" pos:end="265:26"><name pos:start="265:24" pos:end="265:26">ctx</name></expr></argument>, <argument pos:start="265:29" pos:end="265:40"><expr pos:start="265:29" pos:end="265:40"><name pos:start="265:29" pos:end="265:40">AV_LOG_ERROR</name></expr></argument>,

                       <argument pos:start="267:24" pos:end="267:69"><expr pos:start="267:24" pos:end="267:69"><literal type="string" pos:start="267:24" pos:end="267:69">"Error occurred when getting fragment buffer."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="269:17" pos:end="269:27">return <expr pos:start="269:24" pos:end="269:26"><name pos:start="269:24" pos:end="269:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <return pos:start="275:13" pos:end="275:21">return <expr pos:start="275:20" pos:end="275:20"><literal type="number" pos:start="275:20" pos:end="275:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



   <return pos:start="283:4" pos:end="283:26">return <expr pos:start="283:11" pos:end="283:25"><call pos:start="283:11" pos:end="283:25"><name pos:start="283:11" pos:end="283:17">AVERROR</name><argument_list pos:start="283:18" pos:end="283:25">(<argument pos:start="283:19" pos:end="283:24"><expr pos:start="283:19" pos:end="283:24"><name pos:start="283:19" pos:end="283:24">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>
</unit>
