<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/5155.c" pos:tabs="8"><function pos:start="1:1" pos:end="197:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:20">inet_listen_opts</name><parameter_list pos:start="1:21" pos:end="1:53">(<parameter pos:start="1:22" pos:end="1:35"><decl pos:start="1:22" pos:end="1:35"><type pos:start="1:22" pos:end="1:35"><name pos:start="1:22" pos:end="1:29">QemuOpts</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:35">opts</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:52"><decl pos:start="1:38" pos:end="1:52"><type pos:start="1:38" pos:end="1:52"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:52">port_offset</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="197:1">{<block_content pos:start="5:5" pos:end="195:19">

    <decl_stmt pos:start="5:5" pos:end="5:31"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:19">addrinfo</name></name></type> <name pos:start="5:21" pos:end="5:22">ai</name></decl>,<decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">res</name></decl>,<decl pos:start="5:29" pos:end="5:30"><type ref="prev" pos:start="5:5" pos:end="5:19"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">e</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:20">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:8"><name pos:start="9:5" pos:end="9:8">char</name></type> <name pos:start="9:10" pos:end="9:17"><name pos:start="9:10" pos:end="9:13">port</name><index pos:start="9:14" pos:end="9:17">[<expr pos:start="9:15" pos:end="9:16"><literal type="number" pos:start="9:15" pos:end="9:16">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:34"><name pos:start="11:10" pos:end="11:14">uaddr</name><index pos:start="11:15" pos:end="11:34">[<expr pos:start="11:16" pos:end="11:33"><name pos:start="11:16" pos:end="11:31">INET6_ADDRSTRLEN</name><operator pos:start="11:32" pos:end="11:32">+</operator><literal type="number" pos:start="11:33" pos:end="11:33">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:18"><name pos:start="13:10" pos:end="13:14">uport</name><index pos:start="13:15" pos:end="13:18">[<expr pos:start="13:16" pos:end="13:17"><literal type="number" pos:start="13:16" pos:end="13:17">33</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:15"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:15">slisten</name></decl>,<decl pos:start="15:17" pos:end="15:18"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:17" pos:end="15:18">rc</name></decl>,<decl pos:start="15:20" pos:end="15:21"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:20" pos:end="15:21">to</name></decl>,<decl pos:start="15:23" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:23" pos:end="15:30">try_next</name></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><call pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:10">memset</name><argument_list pos:start="19:11" pos:end="19:29">(<argument pos:start="19:12" pos:end="19:14"><expr pos:start="19:12" pos:end="19:14"><operator pos:start="19:12" pos:end="19:12">&amp;</operator><name pos:start="19:13" pos:end="19:14">ai</name></expr></argument>,<argument pos:start="19:16" pos:end="19:16"><expr pos:start="19:16" pos:end="19:16"><literal type="number" pos:start="19:16" pos:end="19:16">0</literal></expr></argument>, <argument pos:start="19:19" pos:end="19:28"><expr pos:start="19:19" pos:end="19:28"><sizeof pos:start="19:19" pos:end="19:28">sizeof<argument_list pos:start="19:25" pos:end="19:28">(<argument pos:start="19:26" pos:end="19:27"><expr pos:start="19:26" pos:end="19:27"><name pos:start="19:26" pos:end="19:27">ai</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:45"><expr pos:start="21:5" pos:end="21:44"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:6">ai</name><operator pos:start="21:7" pos:end="21:7">.</operator><name pos:start="21:8" pos:end="21:15">ai_flags</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:28">AI_PASSIVE</name> <operator pos:start="21:30" pos:end="21:30">|</operator> <name pos:start="21:32" pos:end="21:44">AI_ADDRCONFIG</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:16"><name pos:start="23:5" pos:end="23:6">ai</name><operator pos:start="23:7" pos:end="23:7">.</operator><name pos:start="23:8" pos:end="23:16">ai_family</name></name> <operator pos:start="23:18" pos:end="23:18">=</operator> <name pos:start="23:20" pos:end="23:28">PF_UNSPEC</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:33"><expr pos:start="25:5" pos:end="25:32"><name pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:6">ai</name><operator pos:start="25:7" pos:end="25:7">.</operator><name pos:start="25:8" pos:end="25:18">ai_socktype</name></name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:32">SOCK_STREAM</name></expr>;</expr_stmt>



    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:43">(<expr pos:start="29:9" pos:end="29:42"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:20">qemu_opt_get</name><argument_list pos:start="29:21" pos:end="29:34">(<argument pos:start="29:22" pos:end="29:25"><expr pos:start="29:22" pos:end="29:25"><name pos:start="29:22" pos:end="29:25">opts</name></expr></argument>, <argument pos:start="29:28" pos:end="29:33"><expr pos:start="29:28" pos:end="29:33"><literal type="string" pos:start="29:28" pos:end="29:33">"port"</literal></expr></argument>)</argument_list></call> <operator pos:start="29:36" pos:end="29:37">==</operator> <name pos:start="29:39" pos:end="29:42">NULL</name></expr>)</condition> <block pos:start="29:45" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:78"><expr pos:start="31:9" pos:end="31:77"><call pos:start="31:9" pos:end="31:77"><name pos:start="31:9" pos:end="31:15">fprintf</name><argument_list pos:start="31:16" pos:end="31:77">(<argument pos:start="31:17" pos:end="31:22"><expr pos:start="31:17" pos:end="31:22"><name pos:start="31:17" pos:end="31:22">stderr</name></expr></argument>, <argument pos:start="31:25" pos:end="31:62"><expr pos:start="31:25" pos:end="31:62"><literal type="string" pos:start="31:25" pos:end="31:62">"%s: host and/or port not specified\n"</literal></expr></argument>, <argument pos:start="31:65" pos:end="31:76"><expr pos:start="31:65" pos:end="31:76"><name pos:start="31:65" pos:end="31:76">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:60"><expr pos:start="37:5" pos:end="37:59"><call pos:start="37:5" pos:end="37:59"><name pos:start="37:5" pos:end="37:11">pstrcpy</name><argument_list pos:start="37:12" pos:end="37:59">(<argument pos:start="37:13" pos:end="37:16"><expr pos:start="37:13" pos:end="37:16"><name pos:start="37:13" pos:end="37:16">port</name></expr></argument>, <argument pos:start="37:19" pos:end="37:30"><expr pos:start="37:19" pos:end="37:30"><sizeof pos:start="37:19" pos:end="37:30">sizeof<argument_list pos:start="37:25" pos:end="37:30">(<argument pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:29">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="37:33" pos:end="37:58"><expr pos:start="37:33" pos:end="37:58"><call pos:start="37:33" pos:end="37:58"><name pos:start="37:33" pos:end="37:44">qemu_opt_get</name><argument_list pos:start="37:45" pos:end="37:58">(<argument pos:start="37:46" pos:end="37:49"><expr pos:start="37:46" pos:end="37:49"><name pos:start="37:46" pos:end="37:49">opts</name></expr></argument>, <argument pos:start="37:52" pos:end="37:57"><expr pos:start="37:52" pos:end="37:57"><literal type="string" pos:start="37:52" pos:end="37:57">"port"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:8">addr</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:37"><name pos:start="39:12" pos:end="39:23">qemu_opt_get</name><argument_list pos:start="39:24" pos:end="39:37">(<argument pos:start="39:25" pos:end="39:28"><expr pos:start="39:25" pos:end="39:28"><name pos:start="39:25" pos:end="39:28">opts</name></expr></argument>, <argument pos:start="39:31" pos:end="39:36"><expr pos:start="39:31" pos:end="39:36"><literal type="string" pos:start="39:31" pos:end="39:36">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:44"><expr pos:start="43:5" pos:end="43:43"><name pos:start="43:5" pos:end="43:6">to</name> <operator pos:start="43:8" pos:end="43:8">=</operator> <call pos:start="43:10" pos:end="43:43"><name pos:start="43:10" pos:end="43:28">qemu_opt_get_number</name><argument_list pos:start="43:29" pos:end="43:43">(<argument pos:start="43:30" pos:end="43:33"><expr pos:start="43:30" pos:end="43:33"><name pos:start="43:30" pos:end="43:33">opts</name></expr></argument>, <argument pos:start="43:36" pos:end="43:39"><expr pos:start="43:36" pos:end="43:39"><literal type="string" pos:start="43:36" pos:end="43:39">"to"</literal></expr></argument>, <argument pos:start="43:42" pos:end="43:42"><expr pos:start="43:42" pos:end="43:42"><literal type="number" pos:start="43:42" pos:end="43:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:31"><if pos:start="45:5" pos:end="47:31">if <condition pos:start="45:8" pos:end="45:43">(<expr pos:start="45:9" pos:end="45:42"><call pos:start="45:9" pos:end="45:42"><name pos:start="45:9" pos:end="45:25">qemu_opt_get_bool</name><argument_list pos:start="45:26" pos:end="45:42">(<argument pos:start="45:27" pos:end="45:30"><expr pos:start="45:27" pos:end="45:30"><name pos:start="45:27" pos:end="45:30">opts</name></expr></argument>, <argument pos:start="45:33" pos:end="45:38"><expr pos:start="45:33" pos:end="45:38"><literal type="string" pos:start="45:33" pos:end="45:38">"ipv4"</literal></expr></argument>, <argument pos:start="45:41" pos:end="45:41"><expr pos:start="45:41" pos:end="45:41"><literal type="number" pos:start="45:41" pos:end="45:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:31"><block_content pos:start="47:9" pos:end="47:31">

        <expr_stmt pos:start="47:9" pos:end="47:31"><expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:20"><name pos:start="47:9" pos:end="47:10">ai</name><operator pos:start="47:11" pos:end="47:11">.</operator><name pos:start="47:12" pos:end="47:20">ai_family</name></name> <operator pos:start="47:22" pos:end="47:22">=</operator> <name pos:start="47:24" pos:end="47:30">PF_INET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="49:5" pos:end="51:32"><if pos:start="49:5" pos:end="51:32">if <condition pos:start="49:8" pos:end="49:43">(<expr pos:start="49:9" pos:end="49:42"><call pos:start="49:9" pos:end="49:42"><name pos:start="49:9" pos:end="49:25">qemu_opt_get_bool</name><argument_list pos:start="49:26" pos:end="49:42">(<argument pos:start="49:27" pos:end="49:30"><expr pos:start="49:27" pos:end="49:30"><name pos:start="49:27" pos:end="49:30">opts</name></expr></argument>, <argument pos:start="49:33" pos:end="49:38"><expr pos:start="49:33" pos:end="49:38"><literal type="string" pos:start="49:33" pos:end="49:38">"ipv6"</literal></expr></argument>, <argument pos:start="49:41" pos:end="49:41"><expr pos:start="49:41" pos:end="49:41"><literal type="number" pos:start="49:41" pos:end="49:41">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="51:9" pos:end="51:32"><block_content pos:start="51:9" pos:end="51:32">

        <expr_stmt pos:start="51:9" pos:end="51:32"><expr pos:start="51:9" pos:end="51:31"><name pos:start="51:9" pos:end="51:20"><name pos:start="51:9" pos:end="51:10">ai</name><operator pos:start="51:11" pos:end="51:11">.</operator><name pos:start="51:12" pos:end="51:20">ai_family</name></name> <operator pos:start="51:22" pos:end="51:22">=</operator> <name pos:start="51:24" pos:end="51:31">PF_INET6</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="55:5" pos:end="55:16">/* lookup */</comment>

    <if_stmt pos:start="57:5" pos:end="59:69"><if pos:start="57:5" pos:end="59:69">if <condition pos:start="57:8" pos:end="57:20">(<expr pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:19">port_offset</name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:69"><block_content pos:start="59:9" pos:end="59:69">

        <expr_stmt pos:start="59:9" pos:end="59:69"><expr pos:start="59:9" pos:end="59:68"><call pos:start="59:9" pos:end="59:68"><name pos:start="59:9" pos:end="59:16">snprintf</name><argument_list pos:start="59:17" pos:end="59:68">(<argument pos:start="59:18" pos:end="59:21"><expr pos:start="59:18" pos:end="59:21"><name pos:start="59:18" pos:end="59:21">port</name></expr></argument>, <argument pos:start="59:24" pos:end="59:35"><expr pos:start="59:24" pos:end="59:35"><sizeof pos:start="59:24" pos:end="59:35">sizeof<argument_list pos:start="59:30" pos:end="59:35">(<argument pos:start="59:31" pos:end="59:34"><expr pos:start="59:31" pos:end="59:34"><name pos:start="59:31" pos:end="59:34">port</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="59:38" pos:end="59:41"><expr pos:start="59:38" pos:end="59:41"><literal type="string" pos:start="59:38" pos:end="59:41">"%d"</literal></expr></argument>, <argument pos:start="59:44" pos:end="59:67"><expr pos:start="59:44" pos:end="59:67"><call pos:start="59:44" pos:end="59:53"><name pos:start="59:44" pos:end="59:47">atoi</name><argument_list pos:start="59:48" pos:end="59:53">(<argument pos:start="59:49" pos:end="59:52"><expr pos:start="59:49" pos:end="59:52"><name pos:start="59:49" pos:end="59:52">port</name></expr></argument>)</argument_list></call> <operator pos:start="59:55" pos:end="59:55">+</operator> <name pos:start="59:57" pos:end="59:67">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:66"><expr pos:start="61:5" pos:end="61:65"><name pos:start="61:5" pos:end="61:6">rc</name> <operator pos:start="61:8" pos:end="61:8">=</operator> <call pos:start="61:10" pos:end="61:65"><name pos:start="61:10" pos:end="61:20">getaddrinfo</name><argument_list pos:start="61:21" pos:end="61:65">(<argument pos:start="61:22" pos:end="61:47"><expr pos:start="61:22" pos:end="61:47"><ternary pos:start="61:22" pos:end="61:47"><condition pos:start="61:22" pos:end="61:35"><expr pos:start="61:22" pos:end="61:33"><call pos:start="61:22" pos:end="61:33"><name pos:start="61:22" pos:end="61:27">strlen</name><argument_list pos:start="61:28" pos:end="61:33">(<argument pos:start="61:29" pos:end="61:32"><expr pos:start="61:29" pos:end="61:32"><name pos:start="61:29" pos:end="61:32">addr</name></expr></argument>)</argument_list></call></expr> ?</condition><then pos:start="61:37" pos:end="61:40"> <expr pos:start="61:37" pos:end="61:40"><name pos:start="61:37" pos:end="61:40">addr</name></expr> </then><else pos:start="61:42" pos:end="61:47">: <expr pos:start="61:44" pos:end="61:47"><name pos:start="61:44" pos:end="61:47">NULL</name></expr></else></ternary></expr></argument>, <argument pos:start="61:50" pos:end="61:53"><expr pos:start="61:50" pos:end="61:53"><name pos:start="61:50" pos:end="61:53">port</name></expr></argument>, <argument pos:start="61:56" pos:end="61:58"><expr pos:start="61:56" pos:end="61:58"><operator pos:start="61:56" pos:end="61:56">&amp;</operator><name pos:start="61:57" pos:end="61:58">ai</name></expr></argument>, <argument pos:start="61:61" pos:end="61:64"><expr pos:start="61:61" pos:end="61:64"><operator pos:start="61:61" pos:end="61:61">&amp;</operator><name pos:start="61:62" pos:end="61:64">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="71:5"><if pos:start="63:5" pos:end="71:5">if <condition pos:start="63:8" pos:end="63:16">(<expr pos:start="63:9" pos:end="63:15"><name pos:start="63:9" pos:end="63:10">rc</name> <operator pos:start="63:12" pos:end="63:13">!=</operator> <literal type="number" pos:start="63:15" pos:end="63:15">0</literal></expr>)</condition> <block pos:start="63:18" pos:end="71:5">{<block_content pos:start="65:9" pos:end="69:18">

        <expr_stmt pos:start="65:9" pos:end="67:34"><expr pos:start="65:9" pos:end="67:33"><call pos:start="65:9" pos:end="67:33"><name pos:start="65:9" pos:end="65:15">fprintf</name><argument_list pos:start="65:16" pos:end="67:33">(<argument pos:start="65:17" pos:end="65:22"><expr pos:start="65:17" pos:end="65:22"><name pos:start="65:17" pos:end="65:22">stderr</name></expr></argument>,<argument pos:start="65:24" pos:end="65:49"><expr pos:start="65:24" pos:end="65:49"><literal type="string" pos:start="65:24" pos:end="65:49">"getaddrinfo(%s,%s): %s\n"</literal></expr></argument>, <argument pos:start="65:52" pos:end="65:55"><expr pos:start="65:52" pos:end="65:55"><name pos:start="65:52" pos:end="65:55">addr</name></expr></argument>, <argument pos:start="65:58" pos:end="65:61"><expr pos:start="65:58" pos:end="65:61"><name pos:start="65:58" pos:end="65:61">port</name></expr></argument>,

                <argument pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:32"><call pos:start="67:17" pos:end="67:32"><name pos:start="67:17" pos:end="67:28">gai_strerror</name><argument_list pos:start="67:29" pos:end="67:32">(<argument pos:start="67:30" pos:end="67:31"><expr pos:start="67:30" pos:end="67:31"><name pos:start="67:30" pos:end="67:31">rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="69:9" pos:end="69:18">return <expr pos:start="69:16" pos:end="69:17"><operator pos:start="69:16" pos:end="69:16">-</operator><literal type="number" pos:start="69:17" pos:end="69:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="73:5" pos:end="75:47"><if pos:start="73:5" pos:end="75:47">if <condition pos:start="73:8" pos:end="73:22">(<expr pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:21">sockets_debug</name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:47"><block_content pos:start="75:9" pos:end="75:47">

        <expr_stmt pos:start="75:9" pos:end="75:47"><expr pos:start="75:9" pos:end="75:46"><call pos:start="75:9" pos:end="75:46"><name pos:start="75:9" pos:end="75:27">inet_print_addrinfo</name><argument_list pos:start="75:28" pos:end="75:46">(<argument pos:start="75:29" pos:end="75:40"><expr pos:start="75:29" pos:end="75:40"><name pos:start="75:29" pos:end="75:40">__FUNCTION__</name></expr></argument>, <argument pos:start="75:43" pos:end="75:45"><expr pos:start="75:43" pos:end="75:45"><name pos:start="75:43" pos:end="75:45">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:30">/* create socket + bind */</comment>

    <for pos:start="81:5" pos:end="159:5">for <control pos:start="81:9" pos:end="81:44">(<init pos:start="81:10" pos:end="81:17"><expr pos:start="81:10" pos:end="81:16"><name pos:start="81:10" pos:end="81:10">e</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:16">res</name></expr>;</init> <condition pos:start="81:19" pos:end="81:28"><expr pos:start="81:19" pos:end="81:27"><name pos:start="81:19" pos:end="81:19">e</name> <operator pos:start="81:21" pos:end="81:22">!=</operator> <name pos:start="81:24" pos:end="81:27">NULL</name></expr>;</condition> <incr pos:start="81:30" pos:end="81:43"><expr pos:start="81:30" pos:end="81:43"><name pos:start="81:30" pos:end="81:30">e</name> <operator pos:start="81:32" pos:end="81:32">=</operator> <name pos:start="81:34" pos:end="81:43"><name pos:start="81:34" pos:end="81:34">e</name><operator pos:start="81:35" pos:end="81:36">-&gt;</operator><name pos:start="81:37" pos:end="81:43">ai_next</name></name></expr></incr>)</control> <block pos:start="81:46" pos:end="159:5">{<block_content pos:start="83:9" pos:end="157:29">

        <expr_stmt pos:start="83:9" pos:end="87:57"><expr pos:start="83:9" pos:end="87:56"><call pos:start="83:9" pos:end="87:56"><name pos:start="83:9" pos:end="83:19">getnameinfo</name><argument_list pos:start="83:20" pos:end="87:56">(<argument pos:start="83:21" pos:end="83:48"><expr pos:start="83:21" pos:end="83:48"><operator pos:start="83:21" pos:end="83:21">(</operator>struct <name pos:start="83:29" pos:end="83:36">sockaddr</name><operator pos:start="83:37" pos:end="83:37">*</operator><operator pos:start="83:38" pos:end="83:38">)</operator><name pos:start="83:39" pos:end="83:48"><name pos:start="83:39" pos:end="83:39">e</name><operator pos:start="83:40" pos:end="83:41">-&gt;</operator><name pos:start="83:42" pos:end="83:48">ai_addr</name></name></expr></argument>,<argument pos:start="83:50" pos:end="83:62"><expr pos:start="83:50" pos:end="83:62"><name pos:start="83:50" pos:end="83:62"><name pos:start="83:50" pos:end="83:50">e</name><operator pos:start="83:51" pos:end="83:52">-&gt;</operator><name pos:start="83:53" pos:end="83:62">ai_addrlen</name></name></expr></argument>,

		        <argument pos:start="85:25" pos:end="85:29"><expr pos:start="85:25" pos:end="85:29"><name pos:start="85:25" pos:end="85:29">uaddr</name></expr></argument>,<argument pos:start="85:31" pos:end="85:46"><expr pos:start="85:31" pos:end="85:46"><name pos:start="85:31" pos:end="85:46">INET6_ADDRSTRLEN</name></expr></argument>,<argument pos:start="85:48" pos:end="85:52"><expr pos:start="85:48" pos:end="85:52"><name pos:start="85:48" pos:end="85:52">uport</name></expr></argument>,<argument pos:start="85:54" pos:end="85:55"><expr pos:start="85:54" pos:end="85:55"><literal type="number" pos:start="85:54" pos:end="85:55">32</literal></expr></argument>,

		        <argument pos:start="87:25" pos:end="87:55"><expr pos:start="87:25" pos:end="87:55"><name pos:start="87:25" pos:end="87:38">NI_NUMERICHOST</name> <operator pos:start="87:40" pos:end="87:40">|</operator> <name pos:start="87:42" pos:end="87:55">NI_NUMERICSERV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:71"><expr pos:start="89:9" pos:end="89:70"><name pos:start="89:9" pos:end="89:15">slisten</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:70"><name pos:start="89:19" pos:end="89:24">socket</name><argument_list pos:start="89:25" pos:end="89:70">(<argument pos:start="89:26" pos:end="89:37"><expr pos:start="89:26" pos:end="89:37"><name pos:start="89:26" pos:end="89:37"><name pos:start="89:26" pos:end="89:26">e</name><operator pos:start="89:27" pos:end="89:28">-&gt;</operator><name pos:start="89:29" pos:end="89:37">ai_family</name></name></expr></argument>, <argument pos:start="89:40" pos:end="89:53"><expr pos:start="89:40" pos:end="89:53"><name pos:start="89:40" pos:end="89:53"><name pos:start="89:40" pos:end="89:40">e</name><operator pos:start="89:41" pos:end="89:42">-&gt;</operator><name pos:start="89:43" pos:end="89:53">ai_socktype</name></name></expr></argument>, <argument pos:start="89:56" pos:end="89:69"><expr pos:start="89:56" pos:end="89:69"><name pos:start="89:56" pos:end="89:69"><name pos:start="89:56" pos:end="89:56">e</name><operator pos:start="89:57" pos:end="89:58">-&gt;</operator><name pos:start="89:59" pos:end="89:69">ai_protocol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="99:9"><if pos:start="91:9" pos:end="99:9">if <condition pos:start="91:12" pos:end="91:24">(<expr pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:19">slisten</name> <operator pos:start="91:21" pos:end="91:21">&lt;</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition> <block pos:start="91:26" pos:end="99:9">{<block_content pos:start="93:13" pos:end="97:21">

            <expr_stmt pos:start="93:13" pos:end="95:67"><expr pos:start="93:13" pos:end="95:66"><call pos:start="93:13" pos:end="95:66"><name pos:start="93:13" pos:end="93:19">fprintf</name><argument_list pos:start="93:20" pos:end="95:66">(<argument pos:start="93:21" pos:end="93:26"><expr pos:start="93:21" pos:end="93:26"><name pos:start="93:21" pos:end="93:26">stderr</name></expr></argument>,<argument pos:start="93:28" pos:end="93:49"><expr pos:start="93:28" pos:end="93:49"><literal type="string" pos:start="93:28" pos:end="93:49">"%s: socket(%s): %s\n"</literal></expr></argument>, <argument pos:start="93:52" pos:end="93:63"><expr pos:start="93:52" pos:end="93:63"><name pos:start="93:52" pos:end="93:63">__FUNCTION__</name></expr></argument>,

                    <argument pos:start="95:21" pos:end="95:48"><expr pos:start="95:21" pos:end="95:48"><call pos:start="95:21" pos:end="95:48"><name pos:start="95:21" pos:end="95:34">inet_strfamily</name><argument_list pos:start="95:35" pos:end="95:48">(<argument pos:start="95:36" pos:end="95:47"><expr pos:start="95:36" pos:end="95:47"><name pos:start="95:36" pos:end="95:47"><name pos:start="95:36" pos:end="95:36">e</name><operator pos:start="95:37" pos:end="95:38">-&gt;</operator><name pos:start="95:39" pos:end="95:47">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="95:51" pos:end="95:65"><expr pos:start="95:51" pos:end="95:65"><call pos:start="95:51" pos:end="95:65"><name pos:start="95:51" pos:end="95:58">strerror</name><argument_list pos:start="95:59" pos:end="95:65">(<argument pos:start="95:60" pos:end="95:64"><expr pos:start="95:60" pos:end="95:64"><name pos:start="95:60" pos:end="95:64">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <continue pos:start="97:13" pos:end="97:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="103:9" pos:end="106:0"><expr pos:start="103:9" pos:end="103:73"><call pos:start="103:9" pos:end="103:73"><name pos:start="103:9" pos:end="103:18">setsockopt</name><argument_list pos:start="103:19" pos:end="103:73">(<argument pos:start="103:20" pos:end="103:26"><expr pos:start="103:20" pos:end="103:26"><name pos:start="103:20" pos:end="103:26">slisten</name></expr></argument>,<argument pos:start="103:28" pos:end="103:37"><expr pos:start="103:28" pos:end="103:37"><name pos:start="103:28" pos:end="103:37">SOL_SOCKET</name></expr></argument>,<argument pos:start="103:39" pos:end="103:50"><expr pos:start="103:39" pos:end="103:50"><name pos:start="103:39" pos:end="103:50">SO_REUSEADDR</name></expr></argument>,<argument pos:start="103:52" pos:end="103:61"><expr pos:start="103:52" pos:end="103:61"><operator pos:start="103:52" pos:end="103:52">(</operator><name pos:start="103:53" pos:end="103:56">void</name><operator pos:start="103:57" pos:end="103:57">*</operator><operator pos:start="103:58" pos:end="103:58">)</operator><operator pos:start="103:59" pos:end="103:59">&amp;</operator><name pos:start="103:60" pos:end="103:61">on</name></expr></argument>,<argument pos:start="103:63" pos:end="103:72"><expr pos:start="103:63" pos:end="103:72"><sizeof pos:start="103:63" pos:end="103:72">sizeof<argument_list pos:start="103:69" pos:end="103:72">(<argument pos:start="103:70" pos:end="103:71"><expr pos:start="103:70" pos:end="103:71"><name pos:start="103:70" pos:end="103:71">on</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="105:1" pos:end="105:18">#<cpp:directive pos:start="105:2" pos:end="105:6">ifdef</cpp:directive> <name pos:start="105:8" pos:end="105:18">IPV6_V6ONLY</name></cpp:ifdef>

        <if_stmt pos:start="107:9" pos:end="118:0"><if pos:start="107:9" pos:end="118:0">if <condition pos:start="107:12" pos:end="107:37">(<expr pos:start="107:13" pos:end="107:36"><name pos:start="107:13" pos:end="107:24"><name pos:start="107:13" pos:end="107:13">e</name><operator pos:start="107:14" pos:end="107:15">-&gt;</operator><name pos:start="107:16" pos:end="107:24">ai_family</name></name> <operator pos:start="107:26" pos:end="107:27">==</operator> <name pos:start="107:29" pos:end="107:36">PF_INET6</name></expr>)</condition> <block pos:start="107:39" pos:end="118:0">{<block_content pos:start="111:13" pos:end="113:29">

            <comment type="block" pos:start="109:13" pos:end="109:46">/* listen on both ipv4 and ipv6 */</comment>

            <expr_stmt pos:start="111:13" pos:end="113:29"><expr pos:start="111:13" pos:end="113:28"><call pos:start="111:13" pos:end="113:28"><name pos:start="111:13" pos:end="111:22">setsockopt</name><argument_list pos:start="111:23" pos:end="113:28">(<argument pos:start="111:24" pos:end="111:30"><expr pos:start="111:24" pos:end="111:30"><name pos:start="111:24" pos:end="111:30">slisten</name></expr></argument>,<argument pos:start="111:32" pos:end="111:43"><expr pos:start="111:32" pos:end="111:43"><name pos:start="111:32" pos:end="111:43">IPPROTO_IPV6</name></expr></argument>,<argument pos:start="111:45" pos:end="111:55"><expr pos:start="111:45" pos:end="111:55"><name pos:start="111:45" pos:end="111:55">IPV6_V6ONLY</name></expr></argument>,<argument pos:start="111:57" pos:end="111:67"><expr pos:start="111:57" pos:end="111:67"><operator pos:start="111:57" pos:end="111:57">(</operator><name pos:start="111:58" pos:end="111:61">void</name><operator pos:start="111:62" pos:end="111:62">*</operator><operator pos:start="111:63" pos:end="111:63">)</operator><operator pos:start="111:64" pos:end="111:64">&amp;</operator><name pos:start="111:65" pos:end="111:67">off</name></expr></argument>,

                <argument pos:start="113:17" pos:end="113:27"><expr pos:start="113:17" pos:end="113:27"><sizeof pos:start="113:17" pos:end="113:27">sizeof<argument_list pos:start="113:23" pos:end="113:27">(<argument pos:start="113:24" pos:end="113:26"><expr pos:start="113:24" pos:end="113:26"><name pos:start="113:24" pos:end="113:26">off</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="117:1" pos:end="117:6">#<cpp:directive pos:start="117:2" pos:end="117:6">endif</cpp:directive></cpp:endif>



        <for pos:start="121:9" pos:end="155:9">for <control pos:start="121:13" pos:end="121:16">(<init pos:start="121:14" pos:end="121:14">;</init><condition pos:start="121:15" pos:end="121:15">;</condition><incr/>)</control> <block pos:start="121:18" pos:end="155:9">{<block_content pos:start="123:13" pos:end="153:18">

            <if_stmt pos:start="123:13" pos:end="133:13"><if pos:start="123:13" pos:end="133:13">if <condition pos:start="123:16" pos:end="123:62">(<expr pos:start="123:17" pos:end="123:61"><call pos:start="123:17" pos:end="123:56"><name pos:start="123:17" pos:end="123:20">bind</name><argument_list pos:start="123:21" pos:end="123:56">(<argument pos:start="123:22" pos:end="123:28"><expr pos:start="123:22" pos:end="123:28"><name pos:start="123:22" pos:end="123:28">slisten</name></expr></argument>, <argument pos:start="123:31" pos:end="123:40"><expr pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:40"><name pos:start="123:31" pos:end="123:31">e</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:40">ai_addr</name></name></expr></argument>, <argument pos:start="123:43" pos:end="123:55"><expr pos:start="123:43" pos:end="123:55"><name pos:start="123:43" pos:end="123:55"><name pos:start="123:43" pos:end="123:43">e</name><operator pos:start="123:44" pos:end="123:45">-&gt;</operator><name pos:start="123:46" pos:end="123:55">ai_addrlen</name></name></expr></argument>)</argument_list></call> <operator pos:start="123:58" pos:end="123:59">==</operator> <literal type="number" pos:start="123:61" pos:end="123:61">0</literal></expr>)</condition> <block pos:start="123:64" pos:end="133:13">{<block_content pos:start="125:17" pos:end="131:28">

                <if_stmt pos:start="125:17" pos:end="129:78"><if pos:start="125:17" pos:end="129:78">if <condition pos:start="125:20" pos:end="125:34">(<expr pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:33">sockets_debug</name></expr>)</condition><block type="pseudo" pos:start="127:21" pos:end="129:78"><block_content pos:start="127:21" pos:end="129:78">

                    <expr_stmt pos:start="127:21" pos:end="129:78"><expr pos:start="127:21" pos:end="129:77"><call pos:start="127:21" pos:end="129:77"><name pos:start="127:21" pos:end="127:27">fprintf</name><argument_list pos:start="127:28" pos:end="129:77">(<argument pos:start="127:29" pos:end="127:34"><expr pos:start="127:29" pos:end="127:34"><name pos:start="127:29" pos:end="127:34">stderr</name></expr></argument>,<argument pos:start="127:36" pos:end="127:61"><expr pos:start="127:36" pos:end="127:61"><literal type="string" pos:start="127:36" pos:end="127:61">"%s: bind(%s,%s,%d): OK\n"</literal></expr></argument>, <argument pos:start="127:64" pos:end="127:75"><expr pos:start="127:64" pos:end="127:75"><name pos:start="127:64" pos:end="127:75">__FUNCTION__</name></expr></argument>,

                        <argument pos:start="129:25" pos:end="129:52"><expr pos:start="129:25" pos:end="129:52"><call pos:start="129:25" pos:end="129:52"><name pos:start="129:25" pos:end="129:38">inet_strfamily</name><argument_list pos:start="129:39" pos:end="129:52">(<argument pos:start="129:40" pos:end="129:51"><expr pos:start="129:40" pos:end="129:51"><name pos:start="129:40" pos:end="129:51"><name pos:start="129:40" pos:end="129:40">e</name><operator pos:start="129:41" pos:end="129:42">-&gt;</operator><name pos:start="129:43" pos:end="129:51">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:55" pos:end="129:59"><expr pos:start="129:55" pos:end="129:59"><name pos:start="129:55" pos:end="129:59">uaddr</name></expr></argument>, <argument pos:start="129:62" pos:end="129:76"><expr pos:start="129:62" pos:end="129:76"><call pos:start="129:62" pos:end="129:76"><name pos:start="129:62" pos:end="129:73">inet_getport</name><argument_list pos:start="129:74" pos:end="129:76">(<argument pos:start="129:75" pos:end="129:75"><expr pos:start="129:75" pos:end="129:75"><name pos:start="129:75" pos:end="129:75">e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <goto pos:start="131:17" pos:end="131:28">goto <name pos:start="131:22" pos:end="131:27">listen</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:67"><expr pos:start="135:13" pos:end="135:66"><name pos:start="135:13" pos:end="135:20">try_next</name> <operator pos:start="135:22" pos:end="135:22">=</operator> <name pos:start="135:24" pos:end="135:25">to</name> <operator pos:start="135:27" pos:end="135:28">&amp;&amp;</operator> <operator pos:start="135:30" pos:end="135:30">(</operator><call pos:start="135:31" pos:end="135:45"><name pos:start="135:31" pos:end="135:42">inet_getport</name><argument_list pos:start="135:43" pos:end="135:45">(<argument pos:start="135:44" pos:end="135:44"><expr pos:start="135:44" pos:end="135:44"><name pos:start="135:44" pos:end="135:44">e</name></expr></argument>)</argument_list></call> <operator pos:start="135:47" pos:end="135:48">&lt;=</operator> <name pos:start="135:50" pos:end="135:51">to</name> <operator pos:start="135:53" pos:end="135:53">+</operator> <name pos:start="135:55" pos:end="135:65">port_offset</name><operator pos:start="135:66" pos:end="135:66">)</operator></expr>;</expr_stmt>

            <if_stmt pos:start="137:13" pos:end="143:41"><if pos:start="137:13" pos:end="143:41">if <condition pos:start="137:16" pos:end="137:43">(<expr pos:start="137:17" pos:end="137:42"><operator pos:start="137:17" pos:end="137:17">!</operator><name pos:start="137:18" pos:end="137:25">try_next</name> <operator pos:start="137:27" pos:end="137:28">||</operator> <name pos:start="137:30" pos:end="137:42">sockets_debug</name></expr>)</condition><block type="pseudo" pos:start="139:17" pos:end="143:41"><block_content pos:start="139:17" pos:end="143:41">

                <expr_stmt pos:start="139:17" pos:end="143:41"><expr pos:start="139:17" pos:end="143:40"><call pos:start="139:17" pos:end="143:40"><name pos:start="139:17" pos:end="139:23">fprintf</name><argument_list pos:start="139:24" pos:end="143:40">(<argument pos:start="139:25" pos:end="139:30"><expr pos:start="139:25" pos:end="139:30"><name pos:start="139:25" pos:end="139:30">stderr</name></expr></argument>,<argument pos:start="139:32" pos:end="139:57"><expr pos:start="139:32" pos:end="139:57"><literal type="string" pos:start="139:32" pos:end="139:57">"%s: bind(%s,%s,%d): %s\n"</literal></expr></argument>, <argument pos:start="139:60" pos:end="139:71"><expr pos:start="139:60" pos:end="139:71"><name pos:start="139:60" pos:end="139:71">__FUNCTION__</name></expr></argument>,

                        <argument pos:start="141:25" pos:end="141:52"><expr pos:start="141:25" pos:end="141:52"><call pos:start="141:25" pos:end="141:52"><name pos:start="141:25" pos:end="141:38">inet_strfamily</name><argument_list pos:start="141:39" pos:end="141:52">(<argument pos:start="141:40" pos:end="141:51"><expr pos:start="141:40" pos:end="141:51"><name pos:start="141:40" pos:end="141:51"><name pos:start="141:40" pos:end="141:40">e</name><operator pos:start="141:41" pos:end="141:42">-&gt;</operator><name pos:start="141:43" pos:end="141:51">ai_family</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="141:55" pos:end="141:59"><expr pos:start="141:55" pos:end="141:59"><name pos:start="141:55" pos:end="141:59">uaddr</name></expr></argument>, <argument pos:start="141:62" pos:end="141:76"><expr pos:start="141:62" pos:end="141:76"><call pos:start="141:62" pos:end="141:76"><name pos:start="141:62" pos:end="141:73">inet_getport</name><argument_list pos:start="141:74" pos:end="141:76">(<argument pos:start="141:75" pos:end="141:75"><expr pos:start="141:75" pos:end="141:75"><name pos:start="141:75" pos:end="141:75">e</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="143:25" pos:end="143:39"><expr pos:start="143:25" pos:end="143:39"><call pos:start="143:25" pos:end="143:39"><name pos:start="143:25" pos:end="143:32">strerror</name><argument_list pos:start="143:33" pos:end="143:39">(<argument pos:start="143:34" pos:end="143:38"><expr pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:38">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="145:13" pos:end="151:13"><if pos:start="145:13" pos:end="151:13">if <condition pos:start="145:16" pos:end="145:25">(<expr pos:start="145:17" pos:end="145:24"><name pos:start="145:17" pos:end="145:24">try_next</name></expr>)</condition> <block pos:start="145:27" pos:end="151:13">{<block_content pos:start="147:17" pos:end="149:25">

                <expr_stmt pos:start="147:17" pos:end="147:53"><expr pos:start="147:17" pos:end="147:52"><call pos:start="147:17" pos:end="147:52"><name pos:start="147:17" pos:end="147:28">inet_setport</name><argument_list pos:start="147:29" pos:end="147:52">(<argument pos:start="147:30" pos:end="147:30"><expr pos:start="147:30" pos:end="147:30"><name pos:start="147:30" pos:end="147:30">e</name></expr></argument>, <argument pos:start="147:33" pos:end="147:51"><expr pos:start="147:33" pos:end="147:51"><call pos:start="147:33" pos:end="147:47"><name pos:start="147:33" pos:end="147:44">inet_getport</name><argument_list pos:start="147:45" pos:end="147:47">(<argument pos:start="147:46" pos:end="147:46"><expr pos:start="147:46" pos:end="147:46"><name pos:start="147:46" pos:end="147:46">e</name></expr></argument>)</argument_list></call> <operator pos:start="147:49" pos:end="147:49">+</operator> <literal type="number" pos:start="147:51" pos:end="147:51">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <continue pos:start="149:17" pos:end="149:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="153:13" pos:end="153:18">break;</break>

        </block_content>}</block></for>

        <expr_stmt pos:start="157:9" pos:end="157:29"><expr pos:start="157:9" pos:end="157:28"><call pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:19">closesocket</name><argument_list pos:start="157:20" pos:end="157:28">(<argument pos:start="157:21" pos:end="157:27"><expr pos:start="157:21" pos:end="157:27"><name pos:start="157:21" pos:end="157:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="161:5" pos:end="161:50"><expr pos:start="161:5" pos:end="161:49"><call pos:start="161:5" pos:end="161:49"><name pos:start="161:5" pos:end="161:11">fprintf</name><argument_list pos:start="161:12" pos:end="161:49">(<argument pos:start="161:13" pos:end="161:18"><expr pos:start="161:13" pos:end="161:18"><name pos:start="161:13" pos:end="161:18">stderr</name></expr></argument>, <argument pos:start="161:21" pos:end="161:34"><expr pos:start="161:21" pos:end="161:34"><literal type="string" pos:start="161:21" pos:end="161:34">"%s: FAILED\n"</literal></expr></argument>, <argument pos:start="161:37" pos:end="161:48"><expr pos:start="161:37" pos:end="161:48"><name pos:start="161:37" pos:end="161:48">__FUNCTION__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:22"><expr pos:start="163:5" pos:end="163:21"><call pos:start="163:5" pos:end="163:21"><name pos:start="163:5" pos:end="163:16">freeaddrinfo</name><argument_list pos:start="163:17" pos:end="163:21">(<argument pos:start="163:18" pos:end="163:20"><expr pos:start="163:18" pos:end="163:20"><name pos:start="163:18" pos:end="163:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="165:5" pos:end="165:14">return <expr pos:start="165:12" pos:end="165:13"><operator pos:start="165:12" pos:end="165:12">-</operator><literal type="number" pos:start="165:13" pos:end="165:13">1</literal></expr>;</return>



<label pos:start="169:1" pos:end="169:7"><name pos:start="169:1" pos:end="169:6">listen</name>:</label>

    <if_stmt pos:start="171:5" pos:end="181:5"><if pos:start="171:5" pos:end="181:5">if <condition pos:start="171:8" pos:end="171:31">(<expr pos:start="171:9" pos:end="171:30"><call pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:14">listen</name><argument_list pos:start="171:15" pos:end="171:25">(<argument pos:start="171:16" pos:end="171:22"><expr pos:start="171:16" pos:end="171:22"><name pos:start="171:16" pos:end="171:22">slisten</name></expr></argument>,<argument pos:start="171:24" pos:end="171:24"><expr pos:start="171:24" pos:end="171:24"><literal type="number" pos:start="171:24" pos:end="171:24">1</literal></expr></argument>)</argument_list></call> <operator pos:start="171:27" pos:end="171:28">!=</operator> <literal type="number" pos:start="171:30" pos:end="171:30">0</literal></expr>)</condition> <block pos:start="171:33" pos:end="181:5">{<block_content pos:start="173:9" pos:end="179:18">

        <expr_stmt pos:start="173:9" pos:end="173:25"><expr pos:start="173:9" pos:end="173:24"><call pos:start="173:9" pos:end="173:24"><name pos:start="173:9" pos:end="173:14">perror</name><argument_list pos:start="173:15" pos:end="173:24">(<argument pos:start="173:16" pos:end="173:23"><expr pos:start="173:16" pos:end="173:23"><literal type="string" pos:start="173:16" pos:end="173:23">"listen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:29"><expr pos:start="175:9" pos:end="175:28"><call pos:start="175:9" pos:end="175:28"><name pos:start="175:9" pos:end="175:19">closesocket</name><argument_list pos:start="175:20" pos:end="175:28">(<argument pos:start="175:21" pos:end="175:27"><expr pos:start="175:21" pos:end="175:27"><name pos:start="175:21" pos:end="175:27">slisten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:26"><expr pos:start="177:9" pos:end="177:25"><call pos:start="177:9" pos:end="177:25"><name pos:start="177:9" pos:end="177:20">freeaddrinfo</name><argument_list pos:start="177:21" pos:end="177:25">(<argument pos:start="177:22" pos:end="177:24"><expr pos:start="177:22" pos:end="177:24"><name pos:start="177:22" pos:end="177:24">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="179:9" pos:end="179:18">return <expr pos:start="179:16" pos:end="179:17"><operator pos:start="179:16" pos:end="179:16">-</operator><literal type="number" pos:start="179:17" pos:end="179:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:72"><expr pos:start="183:5" pos:end="183:71"><call pos:start="183:5" pos:end="183:71"><name pos:start="183:5" pos:end="183:12">snprintf</name><argument_list pos:start="183:13" pos:end="183:71">(<argument pos:start="183:14" pos:end="183:18"><expr pos:start="183:14" pos:end="183:18"><name pos:start="183:14" pos:end="183:18">uport</name></expr></argument>, <argument pos:start="183:21" pos:end="183:33"><expr pos:start="183:21" pos:end="183:33"><sizeof pos:start="183:21" pos:end="183:33">sizeof<argument_list pos:start="183:27" pos:end="183:33">(<argument pos:start="183:28" pos:end="183:32"><expr pos:start="183:28" pos:end="183:32"><name pos:start="183:28" pos:end="183:32">uport</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="183:36" pos:end="183:39"><expr pos:start="183:36" pos:end="183:39"><literal type="string" pos:start="183:36" pos:end="183:39">"%d"</literal></expr></argument>, <argument pos:start="183:42" pos:end="183:70"><expr pos:start="183:42" pos:end="183:70"><call pos:start="183:42" pos:end="183:56"><name pos:start="183:42" pos:end="183:53">inet_getport</name><argument_list pos:start="183:54" pos:end="183:56">(<argument pos:start="183:55" pos:end="183:55"><expr pos:start="183:55" pos:end="183:55"><name pos:start="183:55" pos:end="183:55">e</name></expr></argument>)</argument_list></call> <operator pos:start="183:58" pos:end="183:58">-</operator> <name pos:start="183:60" pos:end="183:70">port_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:38"><expr pos:start="185:5" pos:end="185:37"><call pos:start="185:5" pos:end="185:37"><name pos:start="185:5" pos:end="185:16">qemu_opt_set</name><argument_list pos:start="185:17" pos:end="185:37">(<argument pos:start="185:18" pos:end="185:21"><expr pos:start="185:18" pos:end="185:21"><name pos:start="185:18" pos:end="185:21">opts</name></expr></argument>, <argument pos:start="185:24" pos:end="185:29"><expr pos:start="185:24" pos:end="185:29"><literal type="string" pos:start="185:24" pos:end="185:29">"host"</literal></expr></argument>, <argument pos:start="185:32" pos:end="185:36"><expr pos:start="185:32" pos:end="185:36"><name pos:start="185:32" pos:end="185:36">uaddr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:38"><expr pos:start="187:5" pos:end="187:37"><call pos:start="187:5" pos:end="187:37"><name pos:start="187:5" pos:end="187:16">qemu_opt_set</name><argument_list pos:start="187:17" pos:end="187:37">(<argument pos:start="187:18" pos:end="187:21"><expr pos:start="187:18" pos:end="187:21"><name pos:start="187:18" pos:end="187:21">opts</name></expr></argument>, <argument pos:start="187:24" pos:end="187:29"><expr pos:start="187:24" pos:end="187:29"><literal type="string" pos:start="187:24" pos:end="187:29">"port"</literal></expr></argument>, <argument pos:start="187:32" pos:end="187:36"><expr pos:start="187:32" pos:end="187:36"><name pos:start="187:32" pos:end="187:36">uport</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="189:74"><expr pos:start="189:5" pos:end="189:73"><call pos:start="189:5" pos:end="189:73"><name pos:start="189:5" pos:end="189:16">qemu_opt_set</name><argument_list pos:start="189:17" pos:end="189:73">(<argument pos:start="189:18" pos:end="189:21"><expr pos:start="189:18" pos:end="189:21"><name pos:start="189:18" pos:end="189:21">opts</name></expr></argument>, <argument pos:start="189:24" pos:end="189:29"><expr pos:start="189:24" pos:end="189:29"><literal type="string" pos:start="189:24" pos:end="189:29">"ipv6"</literal></expr></argument>, <argument pos:start="189:32" pos:end="189:72"><expr pos:start="189:32" pos:end="189:72"><ternary pos:start="189:32" pos:end="189:72"><condition pos:start="189:32" pos:end="189:59"><expr pos:start="189:32" pos:end="189:57"><operator pos:start="189:32" pos:end="189:32">(</operator><name pos:start="189:33" pos:end="189:44"><name pos:start="189:33" pos:end="189:33">e</name><operator pos:start="189:34" pos:end="189:35">-&gt;</operator><name pos:start="189:36" pos:end="189:44">ai_family</name></name> <operator pos:start="189:46" pos:end="189:47">==</operator> <name pos:start="189:49" pos:end="189:56">PF_INET6</name><operator pos:start="189:57" pos:end="189:57">)</operator></expr> ?</condition><then pos:start="189:61" pos:end="189:64"> <expr pos:start="189:61" pos:end="189:64"><literal type="string" pos:start="189:61" pos:end="189:64">"on"</literal></expr> </then><else pos:start="189:66" pos:end="189:72">: <expr pos:start="189:68" pos:end="189:72"><literal type="string" pos:start="189:68" pos:end="189:72">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="191:5" pos:end="191:74"><expr pos:start="191:5" pos:end="191:73"><call pos:start="191:5" pos:end="191:73"><name pos:start="191:5" pos:end="191:16">qemu_opt_set</name><argument_list pos:start="191:17" pos:end="191:73">(<argument pos:start="191:18" pos:end="191:21"><expr pos:start="191:18" pos:end="191:21"><name pos:start="191:18" pos:end="191:21">opts</name></expr></argument>, <argument pos:start="191:24" pos:end="191:29"><expr pos:start="191:24" pos:end="191:29"><literal type="string" pos:start="191:24" pos:end="191:29">"ipv4"</literal></expr></argument>, <argument pos:start="191:32" pos:end="191:72"><expr pos:start="191:32" pos:end="191:72"><ternary pos:start="191:32" pos:end="191:72"><condition pos:start="191:32" pos:end="191:59"><expr pos:start="191:32" pos:end="191:57"><operator pos:start="191:32" pos:end="191:32">(</operator><name pos:start="191:33" pos:end="191:44"><name pos:start="191:33" pos:end="191:33">e</name><operator pos:start="191:34" pos:end="191:35">-&gt;</operator><name pos:start="191:36" pos:end="191:44">ai_family</name></name> <operator pos:start="191:46" pos:end="191:47">!=</operator> <name pos:start="191:49" pos:end="191:56">PF_INET6</name><operator pos:start="191:57" pos:end="191:57">)</operator></expr> ?</condition><then pos:start="191:61" pos:end="191:64"> <expr pos:start="191:61" pos:end="191:64"><literal type="string" pos:start="191:61" pos:end="191:64">"on"</literal></expr> </then><else pos:start="191:66" pos:end="191:72">: <expr pos:start="191:68" pos:end="191:72"><literal type="string" pos:start="191:68" pos:end="191:72">"off"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:22"><expr pos:start="193:5" pos:end="193:21"><call pos:start="193:5" pos:end="193:21"><name pos:start="193:5" pos:end="193:16">freeaddrinfo</name><argument_list pos:start="193:17" pos:end="193:21">(<argument pos:start="193:18" pos:end="193:20"><expr pos:start="193:18" pos:end="193:20"><name pos:start="193:18" pos:end="193:20">res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="195:5" pos:end="195:19">return <expr pos:start="195:12" pos:end="195:18"><name pos:start="195:12" pos:end="195:18">slisten</name></expr>;</return>

</block_content>}</block></function>
</unit>
