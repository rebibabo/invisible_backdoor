<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3918.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:41">kvm_ppc_register_host_cpu_type</name><parameter_list pos:start="1:42" pos:end="1:47">(<parameter pos:start="1:43" pos:end="1:46"><decl pos:start="1:43" pos:end="1:46"><type pos:start="1:43" pos:end="1:46"><name pos:start="1:43" pos:end="1:46">void</name></type></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:13">

    <decl_stmt pos:start="5:5" pos:end="13:6"><decl pos:start="5:5" pos:end="13:5"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">TypeInfo</name></type> <name pos:start="5:14" pos:end="5:22">type_info</name> <init pos:start="5:24" pos:end="13:5">= <expr pos:start="5:26" pos:end="13:5"><block pos:start="5:26" pos:end="13:5">{

        <expr pos:start="7:9" pos:end="7:37"><operator pos:start="7:9" pos:end="7:9">.</operator><name pos:start="7:10" pos:end="7:13">name</name> <operator pos:start="7:15" pos:end="7:15">=</operator> <name pos:start="7:17" pos:end="7:37">TYPE_HOST_POWERPC_CPU</name></expr>,

        <expr pos:start="9:9" pos:end="9:47"><operator pos:start="9:9" pos:end="9:9">.</operator><name pos:start="9:10" pos:end="9:22">instance_init</name> <operator pos:start="9:24" pos:end="9:24">=</operator> <name pos:start="9:26" pos:end="9:47">kvmppc_host_cpu_initfn</name></expr>,

        <expr pos:start="11:9" pos:end="11:48"><operator pos:start="11:9" pos:end="11:9">.</operator><name pos:start="11:10" pos:end="11:19">class_init</name> <operator pos:start="11:21" pos:end="11:21">=</operator> <name pos:start="11:23" pos:end="11:48">kvmppc_host_cpu_class_init</name></expr>,

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:29"><decl pos:start="15:5" pos:end="15:28"><type pos:start="15:5" pos:end="15:21"><name pos:start="15:5" pos:end="15:19">PowerPCCPUClass</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:28">pvr_pcc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:15">DeviceClass</name> <modifier pos:start="17:17" pos:end="17:17">*</modifier></type><name pos:start="17:18" pos:end="17:19">dc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:43"><expr pos:start="21:5" pos:end="21:42"><name pos:start="21:5" pos:end="21:11">pvr_pcc</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:42"><name pos:start="21:15" pos:end="21:40">kvm_ppc_get_host_cpu_class</name><argument_list pos:start="21:41" pos:end="21:42">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:24">(<expr pos:start="23:9" pos:end="23:23"><name pos:start="23:9" pos:end="23:15">pvr_pcc</name> <operator pos:start="23:17" pos:end="23:18">==</operator> <name pos:start="23:20" pos:end="23:23">NULL</name></expr>)</condition> <block pos:start="23:26" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:68"><expr pos:start="29:5" pos:end="29:67"><name pos:start="29:5" pos:end="29:20"><name pos:start="29:5" pos:end="29:13">type_info</name><operator pos:start="29:14" pos:end="29:14">.</operator><name pos:start="29:15" pos:end="29:20">parent</name></name> <operator pos:start="29:22" pos:end="29:22">=</operator> <call pos:start="29:24" pos:end="29:67"><name pos:start="29:24" pos:end="29:44">object_class_get_name</name><argument_list pos:start="29:45" pos:end="29:67">(<argument pos:start="29:46" pos:end="29:66"><expr pos:start="29:46" pos:end="29:66"><call pos:start="29:46" pos:end="29:66"><name pos:start="29:46" pos:end="29:57">OBJECT_CLASS</name><argument_list pos:start="29:58" pos:end="29:66">(<argument pos:start="29:59" pos:end="29:65"><expr pos:start="29:59" pos:end="29:65"><name pos:start="29:59" pos:end="29:65">pvr_pcc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><call pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:17">type_register</name><argument_list pos:start="31:18" pos:end="31:29">(<argument pos:start="31:19" pos:end="31:28"><expr pos:start="31:19" pos:end="31:28"><operator pos:start="31:19" pos:end="31:19">&amp;</operator><name pos:start="31:20" pos:end="31:28">type_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:56">/* Register generic family CPU class for a family */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:48"><expr pos:start="37:5" pos:end="37:47"><name pos:start="37:5" pos:end="37:11">pvr_pcc</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:47"><name pos:start="37:15" pos:end="37:38">ppc_cpu_get_family_class</name><argument_list pos:start="37:39" pos:end="37:47">(<argument pos:start="37:40" pos:end="37:46"><expr pos:start="37:40" pos:end="37:46"><name pos:start="37:40" pos:end="37:46">pvr_pcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:6">dc</name> <operator pos:start="39:8" pos:end="39:8">=</operator> <call pos:start="39:10" pos:end="39:30"><name pos:start="39:10" pos:end="39:21">DEVICE_CLASS</name><argument_list pos:start="39:22" pos:end="39:30">(<argument pos:start="39:23" pos:end="39:29"><expr pos:start="39:23" pos:end="39:29"><name pos:start="39:23" pos:end="39:29">pvr_pcc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:68"><expr pos:start="41:5" pos:end="41:67"><name pos:start="41:5" pos:end="41:20"><name pos:start="41:5" pos:end="41:13">type_info</name><operator pos:start="41:14" pos:end="41:14">.</operator><name pos:start="41:15" pos:end="41:20">parent</name></name> <operator pos:start="41:22" pos:end="41:22">=</operator> <call pos:start="41:24" pos:end="41:67"><name pos:start="41:24" pos:end="41:44">object_class_get_name</name><argument_list pos:start="41:45" pos:end="41:67">(<argument pos:start="41:46" pos:end="41:66"><expr pos:start="41:46" pos:end="41:66"><call pos:start="41:46" pos:end="41:66"><name pos:start="41:46" pos:end="41:57">OBJECT_CLASS</name><argument_list pos:start="41:58" pos:end="41:66">(<argument pos:start="41:59" pos:end="41:65"><expr pos:start="41:59" pos:end="41:65"><name pos:start="41:59" pos:end="41:65">pvr_pcc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:70"><expr pos:start="43:5" pos:end="43:69"><name pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:13">type_info</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:18">name</name></name> <operator pos:start="43:20" pos:end="43:20">=</operator> <call pos:start="43:22" pos:end="43:69"><name pos:start="43:22" pos:end="43:36">g_strdup_printf</name><argument_list pos:start="43:37" pos:end="43:69">(<argument pos:start="43:38" pos:end="43:58"><expr pos:start="43:38" pos:end="43:58"><literal type="string" pos:start="43:38" pos:end="43:42">"%s-"</literal><name pos:start="43:43" pos:end="43:58">TYPE_POWERPC_CPU</name></expr></argument>, <argument pos:start="43:61" pos:end="43:68"><expr pos:start="43:61" pos:end="43:68"><name pos:start="43:61" pos:end="43:68"><name pos:start="43:61" pos:end="43:62">dc</name><operator pos:start="43:63" pos:end="43:64">-&gt;</operator><name pos:start="43:65" pos:end="43:68">desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="50:0"><expr pos:start="45:5" pos:end="45:29"><call pos:start="45:5" pos:end="45:29"><name pos:start="45:5" pos:end="45:17">type_register</name><argument_list pos:start="45:18" pos:end="45:29">(<argument pos:start="45:19" pos:end="45:28"><expr pos:start="45:19" pos:end="45:28"><operator pos:start="45:19" pos:end="45:19">&amp;</operator><name pos:start="45:20" pos:end="45:28">type_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:if pos:start="49:1" pos:end="49:25">#<cpp:directive pos:start="49:2" pos:end="49:3">if</cpp:directive> <expr pos:start="49:5" pos:end="49:25"><call pos:start="49:5" pos:end="49:25"><name pos:start="49:5" pos:end="49:11">defined</name><argument_list pos:start="49:12" pos:end="49:25">(<argument pos:start="49:13" pos:end="49:24"><expr pos:start="49:13" pos:end="49:24"><name pos:start="49:13" pos:end="49:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="51:5" pos:end="51:71"><expr pos:start="51:5" pos:end="51:70"><name pos:start="51:5" pos:end="51:18"><name pos:start="51:5" pos:end="51:13">type_info</name><operator pos:start="51:14" pos:end="51:14">.</operator><name pos:start="51:15" pos:end="51:18">name</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <call pos:start="51:22" pos:end="51:70"><name pos:start="51:22" pos:end="51:36">g_strdup_printf</name><argument_list pos:start="51:37" pos:end="51:70">(<argument pos:start="51:38" pos:end="51:61"><expr pos:start="51:38" pos:end="51:61"><literal type="string" pos:start="51:38" pos:end="51:42">"%s-"</literal><name pos:start="51:43" pos:end="51:61">TYPE_SPAPR_CPU_CORE</name></expr></argument>, <argument pos:start="51:64" pos:end="51:69"><expr pos:start="51:64" pos:end="51:69"><literal type="string" pos:start="51:64" pos:end="51:69">"host"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="59:32"><expr pos:start="53:5" pos:end="53:42"><name pos:start="53:5" pos:end="53:20"><name pos:start="53:5" pos:end="53:13">type_info</name><operator pos:start="53:14" pos:end="53:14">.</operator><name pos:start="53:15" pos:end="53:20">parent</name></name> <operator pos:start="53:22" pos:end="53:22">=</operator> <name pos:start="53:24" pos:end="53:42">TYPE_SPAPR_CPU_CORE</name></expr><operator pos:start="53:43" pos:end="53:43">,</operator>

    <expr pos:start="55:5" pos:end="55:50"><name pos:start="55:5" pos:end="55:27"><name pos:start="55:5" pos:end="55:13">type_info</name><operator pos:start="55:14" pos:end="55:14">.</operator><name pos:start="55:15" pos:end="55:27">instance_size</name></name> <operator pos:start="55:29" pos:end="55:29">=</operator> <sizeof pos:start="55:31" pos:end="55:50">sizeof<argument_list pos:start="55:37" pos:end="55:50">(<argument pos:start="55:38" pos:end="55:49"><expr pos:start="55:38" pos:end="55:49"><name pos:start="55:38" pos:end="55:49">sPAPRCPUCore</name></expr></argument>)</argument_list></sizeof></expr><operator pos:start="55:51" pos:end="55:51">,</operator>

    <expr pos:start="57:5" pos:end="57:56"><name pos:start="57:5" pos:end="57:27"><name pos:start="57:5" pos:end="57:13">type_info</name><operator pos:start="57:14" pos:end="57:14">.</operator><name pos:start="57:15" pos:end="57:27">instance_init</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:56">spapr_cpu_core_host_initfn</name></expr><operator pos:start="57:57" pos:end="57:57">,</operator>

    <expr pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:24"><name pos:start="59:5" pos:end="59:13">type_info</name><operator pos:start="59:14" pos:end="59:14">.</operator><name pos:start="59:15" pos:end="59:24">class_init</name></name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:31">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="61:5" pos:end="61:30"><expr pos:start="61:5" pos:end="61:29"><call pos:start="61:5" pos:end="61:29"><name pos:start="61:5" pos:end="61:17">type_register</name><argument_list pos:start="61:18" pos:end="61:29">(<argument pos:start="61:19" pos:end="61:28"><expr pos:start="61:19" pos:end="61:28"><operator pos:start="61:19" pos:end="61:19">&amp;</operator><name pos:start="61:20" pos:end="61:28">type_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:35"><expr pos:start="63:5" pos:end="63:34"><call pos:start="63:5" pos:end="63:34"><name pos:start="63:5" pos:end="63:10">g_free</name><argument_list pos:start="63:11" pos:end="63:34">(<argument pos:start="63:12" pos:end="63:33"><expr pos:start="63:12" pos:end="63:33"><operator pos:start="63:12" pos:end="63:12">(</operator><name pos:start="63:13" pos:end="63:16">void</name> <operator pos:start="63:18" pos:end="63:18">*</operator><operator pos:start="63:19" pos:end="63:19">)</operator><name pos:start="63:20" pos:end="63:33"><name pos:start="63:20" pos:end="63:28">type_info</name><operator pos:start="63:29" pos:end="63:29">.</operator><name pos:start="63:30" pos:end="63:33">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:75">/* Register generic spapr CPU family class for current host CPU type */</comment>

    <expr_stmt pos:start="69:5" pos:end="69:73"><expr pos:start="69:5" pos:end="69:72"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:13">type_info</name><operator pos:start="69:14" pos:end="69:14">.</operator><name pos:start="69:15" pos:end="69:18">name</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:72"><name pos:start="69:22" pos:end="69:36">g_strdup_printf</name><argument_list pos:start="69:37" pos:end="69:72">(<argument pos:start="69:38" pos:end="69:61"><expr pos:start="69:38" pos:end="69:61"><literal type="string" pos:start="69:38" pos:end="69:42">"%s-"</literal><name pos:start="69:43" pos:end="69:61">TYPE_SPAPR_CPU_CORE</name></expr></argument>, <argument pos:start="69:64" pos:end="69:71"><expr pos:start="69:64" pos:end="69:71"><name pos:start="69:64" pos:end="69:71"><name pos:start="69:64" pos:end="69:65">dc</name><operator pos:start="69:66" pos:end="69:67">-&gt;</operator><name pos:start="69:68" pos:end="69:71">desc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:30"><expr pos:start="71:5" pos:end="71:29"><call pos:start="71:5" pos:end="71:29"><name pos:start="71:5" pos:end="71:17">type_register</name><argument_list pos:start="71:18" pos:end="71:29">(<argument pos:start="71:19" pos:end="71:28"><expr pos:start="71:19" pos:end="71:28"><operator pos:start="71:19" pos:end="71:19">&amp;</operator><name pos:start="71:20" pos:end="71:28">type_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="76:0"><expr pos:start="73:5" pos:end="73:34"><call pos:start="73:5" pos:end="73:34"><name pos:start="73:5" pos:end="73:10">g_free</name><argument_list pos:start="73:11" pos:end="73:34">(<argument pos:start="73:12" pos:end="73:33"><expr pos:start="73:12" pos:end="73:33"><operator pos:start="73:12" pos:end="73:12">(</operator><name pos:start="73:13" pos:end="73:16">void</name> <operator pos:start="73:18" pos:end="73:18">*</operator><operator pos:start="73:19" pos:end="73:19">)</operator><name pos:start="73:20" pos:end="73:33"><name pos:start="73:20" pos:end="73:28">type_info</name><operator pos:start="73:29" pos:end="73:29">.</operator><name pos:start="73:30" pos:end="73:33">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="75:1" pos:end="75:6">#<cpp:directive pos:start="75:2" pos:end="75:6">endif</cpp:directive></cpp:endif>



    <return pos:start="79:5" pos:end="79:13">return <expr pos:start="79:12" pos:end="79:12"><literal type="number" pos:start="79:12" pos:end="79:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
