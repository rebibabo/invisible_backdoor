<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6324.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:30">decode_frame_mp3on4</name><parameter_list pos:start="1:31" pos:end="3:67">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:52"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>, <parameter pos:start="1:55" pos:end="1:64"><decl pos:start="1:55" pos:end="1:64"><type pos:start="1:55" pos:end="1:64"><name pos:start="1:55" pos:end="1:58">void</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">data</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:49"><decl pos:start="3:32" pos:end="3:49"><type pos:start="3:32" pos:end="3:49"><name pos:start="3:32" pos:end="3:34">int</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:49">got_frame_ptr</name></decl></parameter>, <parameter pos:start="3:52" pos:end="3:66"><decl pos:start="3:52" pos:end="3:66"><type pos:start="3:52" pos:end="3:66"><name pos:start="3:52" pos:end="3:59">AVPacket</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:66">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="151:1">{<block_content pos:start="7:5" pos:end="149:20">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:18">frame</name>         <init pos:start="7:28" pos:end="7:33">= <expr pos:start="7:30" pos:end="7:33"><name pos:start="7:30" pos:end="7:33">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name>     <init pos:start="9:28" pos:end="9:40">= <expr pos:start="9:30" pos:end="9:40"><name pos:start="9:30" pos:end="9:40"><name pos:start="9:30" pos:end="9:34">avpkt</name><operator pos:start="9:35" pos:end="9:36">-&gt;</operator><name pos:start="9:37" pos:end="9:40">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:41"><decl pos:start="11:5" pos:end="11:40"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name>           <init pos:start="11:28" pos:end="11:40">= <expr pos:start="11:30" pos:end="11:40"><name pos:start="11:30" pos:end="11:40"><name pos:start="11:30" pos:end="11:34">avpkt</name><operator pos:start="11:35" pos:end="11:36">-&gt;</operator><name pos:start="11:37" pos:end="11:40">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:25"><name pos:start="13:5" pos:end="13:23">MP3On4DecodeContext</name> <modifier pos:start="13:25" pos:end="13:25">*</modifier></type><name pos:start="13:26" pos:end="13:26">s</name> <init pos:start="13:28" pos:end="13:45">= <expr pos:start="13:30" pos:end="13:45"><name pos:start="13:30" pos:end="13:45"><name pos:start="13:30" pos:end="13:34">avctx</name><operator pos:start="13:35" pos:end="13:36">-&gt;</operator><name pos:start="13:37" pos:end="13:45">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:20">MPADecodeContext</name> <modifier pos:start="15:22" pos:end="15:22">*</modifier></type><name pos:start="15:23" pos:end="15:23">m</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:44"><decl pos:start="17:5" pos:end="17:13"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:13">fsize</name></decl>, <decl pos:start="17:16" pos:end="17:29"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:16" pos:end="17:18">len</name> <init pos:start="17:20" pos:end="17:29">= <expr pos:start="17:22" pos:end="17:29"><name pos:start="17:22" pos:end="17:29">buf_size</name></expr></init></decl>, <decl pos:start="17:32" pos:end="17:43"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:32" pos:end="17:39">out_size</name> <init pos:start="17:41" pos:end="17:43">= <expr pos:start="17:43" pos:end="17:43"><literal type="number" pos:start="17:43" pos:end="17:43">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:19">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:26"><decl pos:start="21:5" pos:end="21:25"><type pos:start="21:5" pos:end="21:14"><name pos:start="21:5" pos:end="21:11">OUT_INT</name> <modifier pos:start="21:13" pos:end="21:13">*</modifier><modifier pos:start="21:14" pos:end="21:14">*</modifier></type><name pos:start="21:15" pos:end="21:25">out_samples</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:23"><decl pos:start="23:5" pos:end="23:22"><type pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:11">OUT_INT</name> <modifier pos:start="23:13" pos:end="23:13">*</modifier></type><name pos:start="23:14" pos:end="23:22"><name pos:start="23:14" pos:end="23:19">outptr</name><index pos:start="23:20" pos:end="23:22">[<expr pos:start="23:21" pos:end="23:21"><literal type="number" pos:start="23:21" pos:end="23:21">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:20"><decl pos:start="25:5" pos:end="25:10"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:10">fr</name></decl>, <decl pos:start="25:13" pos:end="25:14"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:13" pos:end="25:14">ch</name></decl>, <decl pos:start="25:17" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:17" pos:end="25:19">ret</name></decl>;</decl_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:27">/* get output buffer */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:39"><expr pos:start="31:5" pos:end="31:38"><name pos:start="31:5" pos:end="31:21"><name pos:start="31:5" pos:end="31:9">frame</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:21">nb_samples</name></name> <operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:38">MPA_FRAME_SIZE</name></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:51">(<expr pos:start="33:9" pos:end="33:50"><operator pos:start="33:9" pos:end="33:9">(</operator><name pos:start="33:10" pos:end="33:12">ret</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <call pos:start="33:16" pos:end="33:45"><name pos:start="33:16" pos:end="33:28">ff_get_buffer</name><argument_list pos:start="33:29" pos:end="33:45">(<argument pos:start="33:30" pos:end="33:34"><expr pos:start="33:30" pos:end="33:34"><name pos:start="33:30" pos:end="33:34">avctx</name></expr></argument>, <argument pos:start="33:37" pos:end="33:41"><expr pos:start="33:37" pos:end="33:41"><name pos:start="33:37" pos:end="33:41">frame</name></expr></argument>, <argument pos:start="33:44" pos:end="33:44"><expr pos:start="33:44" pos:end="33:44"><literal type="number" pos:start="33:44" pos:end="33:44">0</literal></expr></argument>)</argument_list></call><operator pos:start="33:46" pos:end="33:46">)</operator> <operator pos:start="33:48" pos:end="33:48">&lt;</operator> <literal type="number" pos:start="33:50" pos:end="33:50">0</literal></expr>)</condition> <block pos:start="33:53" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:19">

        <expr_stmt pos:start="35:9" pos:end="35:61"><expr pos:start="35:9" pos:end="35:60"><call pos:start="35:9" pos:end="35:60"><name pos:start="35:9" pos:end="35:14">av_log</name><argument_list pos:start="35:15" pos:end="35:60">(<argument pos:start="35:16" pos:end="35:20"><expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">avctx</name></expr></argument>, <argument pos:start="35:23" pos:end="35:34"><expr pos:start="35:23" pos:end="35:34"><name pos:start="35:23" pos:end="35:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="35:37" pos:end="35:59"><expr pos:start="35:37" pos:end="35:59"><literal type="string" pos:start="35:37" pos:end="35:59">"get_buffer() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:19">return <expr pos:start="37:16" pos:end="37:18"><name pos:start="37:16" pos:end="37:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:51"><expr pos:start="41:5" pos:end="41:50"><name pos:start="41:5" pos:end="41:15">out_samples</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <operator pos:start="41:19" pos:end="41:19">(</operator><name pos:start="41:20" pos:end="41:26">OUT_INT</name> <operator pos:start="41:28" pos:end="41:28">*</operator><operator pos:start="41:29" pos:end="41:29">*</operator><operator pos:start="41:30" pos:end="41:30">)</operator><name pos:start="41:31" pos:end="41:50"><name pos:start="41:31" pos:end="41:35">frame</name><operator pos:start="41:36" pos:end="41:37">-&gt;</operator><name pos:start="41:38" pos:end="41:50">extended_data</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="45:5" pos:end="45:31">// Discard too short frames</comment>

    <if_stmt pos:start="47:5" pos:end="49:35"><if pos:start="47:5" pos:end="49:35">if <condition pos:start="47:8" pos:end="47:31">(<expr pos:start="47:9" pos:end="47:30"><name pos:start="47:9" pos:end="47:16">buf_size</name> <operator pos:start="47:18" pos:end="47:18">&lt;</operator> <name pos:start="47:20" pos:end="47:30">HEADER_SIZE</name></expr>)</condition><block type="pseudo" pos:start="49:9" pos:end="49:35"><block_content pos:start="49:9" pos:end="49:35">

        <return pos:start="49:9" pos:end="49:35">return <expr pos:start="49:16" pos:end="49:34"><name pos:start="49:16" pos:end="49:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:24"><expr pos:start="53:5" pos:end="53:23"><name pos:start="53:5" pos:end="53:19"><name pos:start="53:5" pos:end="53:9">avctx</name><operator pos:start="53:10" pos:end="53:11">-&gt;</operator><name pos:start="53:12" pos:end="53:19">bit_rate</name></name> <operator pos:start="53:21" pos:end="53:21">=</operator> <literal type="number" pos:start="53:23" pos:end="53:23">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:11"><expr pos:start="57:5" pos:end="57:10"><name pos:start="57:5" pos:end="57:6">ch</name> <operator pos:start="57:8" pos:end="57:8">=</operator> <literal type="number" pos:start="57:10" pos:end="57:10">0</literal></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="133:5">for <control pos:start="59:9" pos:end="59:38">(<init pos:start="59:10" pos:end="59:16"><expr pos:start="59:10" pos:end="59:15"><name pos:start="59:10" pos:end="59:11">fr</name> <operator pos:start="59:13" pos:end="59:13">=</operator> <literal type="number" pos:start="59:15" pos:end="59:15">0</literal></expr>;</init> <condition pos:start="59:18" pos:end="59:32"><expr pos:start="59:18" pos:end="59:31"><name pos:start="59:18" pos:end="59:19">fr</name> <operator pos:start="59:21" pos:end="59:21">&lt;</operator> <name pos:start="59:23" pos:end="59:31"><name pos:start="59:23" pos:end="59:23">s</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:31">frames</name></name></expr>;</condition> <incr pos:start="59:34" pos:end="59:37"><expr pos:start="59:34" pos:end="59:37"><name pos:start="59:34" pos:end="59:35">fr</name><operator pos:start="59:36" pos:end="59:37">++</operator></expr></incr>)</control> <block pos:start="59:40" pos:end="133:5">{<block_content pos:start="61:9" pos:end="131:39">

        <expr_stmt pos:start="61:9" pos:end="61:34"><expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:13">fsize</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:23">AV_RB16</name><argument_list pos:start="61:24" pos:end="61:28">(<argument pos:start="61:25" pos:end="61:27"><expr pos:start="61:25" pos:end="61:27"><name pos:start="61:25" pos:end="61:27">buf</name></expr></argument>)</argument_list></call> <operator pos:start="61:30" pos:end="61:31">&gt;&gt;</operator> <literal type="number" pos:start="61:33" pos:end="61:33">4</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:61"><expr pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:13">fsize</name> <operator pos:start="63:15" pos:end="63:15">=</operator> <call pos:start="63:17" pos:end="63:60"><name pos:start="63:17" pos:end="63:22">FFMIN3</name><argument_list pos:start="63:23" pos:end="63:60">(<argument pos:start="63:24" pos:end="63:28"><expr pos:start="63:24" pos:end="63:28"><name pos:start="63:24" pos:end="63:28">fsize</name></expr></argument>, <argument pos:start="63:31" pos:end="63:33"><expr pos:start="63:31" pos:end="63:33"><name pos:start="63:31" pos:end="63:33">len</name></expr></argument>, <argument pos:start="63:36" pos:end="63:59"><expr pos:start="63:36" pos:end="63:59"><name pos:start="63:36" pos:end="63:59">MPA_MAX_CODED_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:33"><expr pos:start="65:9" pos:end="65:32"><name pos:start="65:9" pos:end="65:9">m</name>     <operator pos:start="65:15" pos:end="65:15">=</operator> <name pos:start="65:17" pos:end="65:32"><name pos:start="65:17" pos:end="65:17">s</name><operator pos:start="65:18" pos:end="65:19">-&gt;</operator><name pos:start="65:20" pos:end="65:28">mp3decctx</name><index pos:start="65:29" pos:end="65:32">[<expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">fr</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:26"><expr pos:start="67:9" pos:end="67:25"><call pos:start="67:9" pos:end="67:25"><name pos:start="67:9" pos:end="67:14">assert</name><argument_list pos:start="67:15" pos:end="67:25">(<argument pos:start="67:16" pos:end="67:24"><expr pos:start="67:16" pos:end="67:24"><name pos:start="67:16" pos:end="67:16">m</name> <operator pos:start="67:18" pos:end="67:19">!=</operator> <name pos:start="67:21" pos:end="67:24">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="77:9"><if pos:start="71:9" pos:end="77:9">if <condition pos:start="71:12" pos:end="71:32">(<expr pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:17">fsize</name> <operator pos:start="71:19" pos:end="71:19">&lt;</operator> <name pos:start="71:21" pos:end="71:31">HEADER_SIZE</name></expr>)</condition> <block pos:start="71:34" pos:end="77:9">{<block_content pos:start="73:13" pos:end="75:39">

            <expr_stmt pos:start="73:13" pos:end="73:81"><expr pos:start="73:13" pos:end="73:80"><call pos:start="73:13" pos:end="73:80"><name pos:start="73:13" pos:end="73:18">av_log</name><argument_list pos:start="73:19" pos:end="73:80">(<argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><name pos:start="73:20" pos:end="73:24">avctx</name></expr></argument>, <argument pos:start="73:27" pos:end="73:38"><expr pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:41" pos:end="73:79"><expr pos:start="73:41" pos:end="73:79"><literal type="string" pos:start="73:41" pos:end="73:79">"Frame size smaller than header size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="75:13" pos:end="75:39">return <expr pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:59"><expr pos:start="79:9" pos:end="79:58"><name pos:start="79:9" pos:end="79:14">header</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <operator pos:start="79:18" pos:end="79:18">(</operator><call pos:start="79:19" pos:end="79:30"><name pos:start="79:19" pos:end="79:25">AV_RB32</name><argument_list pos:start="79:26" pos:end="79:30">(<argument pos:start="79:27" pos:end="79:29"><expr pos:start="79:27" pos:end="79:29"><name pos:start="79:27" pos:end="79:29">buf</name></expr></argument>)</argument_list></call> <operator pos:start="79:32" pos:end="79:32">&amp;</operator> <literal type="number" pos:start="79:34" pos:end="79:43">0x000fffff</literal><operator pos:start="79:44" pos:end="79:44">)</operator> <operator pos:start="79:46" pos:end="79:46">|</operator> <name pos:start="79:48" pos:end="79:58"><name pos:start="79:48" pos:end="79:48">s</name><operator pos:start="79:49" pos:end="79:50">-&gt;</operator><name pos:start="79:51" pos:end="79:58">syncword</name></name></expr>;</expr_stmt> <comment type="line" pos:start="79:61" pos:end="79:75">// patch header</comment>



        <if_stmt pos:start="83:9" pos:end="85:18"><if pos:start="83:9" pos:end="85:18">if <condition pos:start="83:12" pos:end="83:44">(<expr pos:start="83:13" pos:end="83:43"><call pos:start="83:13" pos:end="83:39"><name pos:start="83:13" pos:end="83:31">ff_mpa_check_header</name><argument_list pos:start="83:32" pos:end="83:39">(<argument pos:start="83:33" pos:end="83:38"><expr pos:start="83:33" pos:end="83:38"><name pos:start="83:33" pos:end="83:38">header</name></expr></argument>)</argument_list></call> <operator pos:start="83:41" pos:end="83:41">&lt;</operator> <literal type="number" pos:start="83:43" pos:end="83:43">0</literal></expr>)</condition><block type="pseudo" pos:start="85:13" pos:end="85:18"><block_content pos:start="85:13" pos:end="85:18"> <comment type="line" pos:start="83:46" pos:end="83:73">// Bad header, discard block</comment>

            <break pos:start="85:13" pos:end="85:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="89:9" pos:end="89:69"><expr pos:start="89:9" pos:end="89:68"><call pos:start="89:9" pos:end="89:68"><name pos:start="89:9" pos:end="89:38">avpriv_mpegaudio_decode_header</name><argument_list pos:start="89:39" pos:end="89:68">(<argument pos:start="89:40" pos:end="89:59"><expr pos:start="89:40" pos:end="89:59"><operator pos:start="89:40" pos:end="89:40">(</operator><name pos:start="89:41" pos:end="89:55">MPADecodeHeader</name> <operator pos:start="89:57" pos:end="89:57">*</operator><operator pos:start="89:58" pos:end="89:58">)</operator><name pos:start="89:59" pos:end="89:59">m</name></expr></argument>, <argument pos:start="89:62" pos:end="89:67"><expr pos:start="89:62" pos:end="89:67"><name pos:start="89:62" pos:end="89:67">header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="93:9" pos:end="103:9"><if pos:start="93:9" pos:end="103:9">if <condition pos:start="93:12" pos:end="95:59">(<expr pos:start="93:13" pos:end="95:58"><name pos:start="93:13" pos:end="93:14">ch</name> <operator pos:start="93:16" pos:end="93:16">+</operator> <name pos:start="93:18" pos:end="93:31"><name pos:start="93:18" pos:end="93:18">m</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:31">nb_channels</name></name> <operator pos:start="93:33" pos:end="93:33">&gt;</operator> <name pos:start="93:35" pos:end="93:49"><name pos:start="93:35" pos:end="93:39">avctx</name><operator pos:start="93:40" pos:end="93:41">-&gt;</operator><name pos:start="93:42" pos:end="93:49">channels</name></name> <operator pos:start="93:51" pos:end="93:52">||</operator>

            <name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:19">coff</name><index pos:start="95:20" pos:end="95:23">[<expr pos:start="95:21" pos:end="95:22"><name pos:start="95:21" pos:end="95:22">fr</name></expr>]</index></name> <operator pos:start="95:25" pos:end="95:25">+</operator> <name pos:start="95:27" pos:end="95:40"><name pos:start="95:27" pos:end="95:27">m</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:40">nb_channels</name></name> <operator pos:start="95:42" pos:end="95:42">&gt;</operator> <name pos:start="95:44" pos:end="95:58"><name pos:start="95:44" pos:end="95:48">avctx</name><operator pos:start="95:49" pos:end="95:50">-&gt;</operator><name pos:start="95:51" pos:end="95:58">channels</name></name></expr>)</condition> <block pos:start="95:61" pos:end="103:9">{<block_content pos:start="97:13" pos:end="101:39">

            <expr_stmt pos:start="97:13" pos:end="99:59"><expr pos:start="97:13" pos:end="99:58"><call pos:start="97:13" pos:end="99:58"><name pos:start="97:13" pos:end="97:18">av_log</name><argument_list pos:start="97:19" pos:end="99:58">(<argument pos:start="97:20" pos:end="97:24"><expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">avctx</name></expr></argument>, <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:41" pos:end="99:57"><expr pos:start="97:41" pos:end="99:57"><literal type="string" pos:start="97:41" pos:end="97:76">"frame channel count exceeds codec "</literal>

                                        <literal type="string" pos:start="99:41" pos:end="99:57">"channel count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="101:13" pos:end="101:39">return <expr pos:start="101:20" pos:end="101:38"><name pos:start="101:20" pos:end="101:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:29"><expr pos:start="105:9" pos:end="105:28"><name pos:start="105:9" pos:end="105:10">ch</name> <operator pos:start="105:12" pos:end="105:13">+=</operator> <name pos:start="105:15" pos:end="105:28"><name pos:start="105:15" pos:end="105:15">m</name><operator pos:start="105:16" pos:end="105:17">-&gt;</operator><name pos:start="105:18" pos:end="105:28">nb_channels</name></name></expr>;</expr_stmt>



        <expr_stmt pos:start="109:9" pos:end="109:45"><expr pos:start="109:9" pos:end="109:44"><name pos:start="109:9" pos:end="109:17"><name pos:start="109:9" pos:end="109:14">outptr</name><index pos:start="109:15" pos:end="109:17">[<expr pos:start="109:16" pos:end="109:16"><literal type="number" pos:start="109:16" pos:end="109:16">0</literal></expr>]</index></name> <operator pos:start="109:19" pos:end="109:19">=</operator> <name pos:start="109:21" pos:end="109:44"><name pos:start="109:21" pos:end="109:31">out_samples</name><index pos:start="109:32" pos:end="109:44">[<expr pos:start="109:33" pos:end="109:43"><name pos:start="109:33" pos:end="109:43"><name pos:start="109:33" pos:end="109:33">s</name><operator pos:start="109:34" pos:end="109:35">-&gt;</operator><name pos:start="109:36" pos:end="109:39">coff</name><index pos:start="109:40" pos:end="109:43">[<expr pos:start="109:41" pos:end="109:42"><name pos:start="109:41" pos:end="109:42">fr</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="111:9" pos:end="113:53"><if pos:start="111:9" pos:end="113:53">if <condition pos:start="111:12" pos:end="111:31">(<expr pos:start="111:13" pos:end="111:30"><name pos:start="111:13" pos:end="111:26"><name pos:start="111:13" pos:end="111:13">m</name><operator pos:start="111:14" pos:end="111:15">-&gt;</operator><name pos:start="111:16" pos:end="111:26">nb_channels</name></name> <operator pos:start="111:28" pos:end="111:28">&gt;</operator> <literal type="number" pos:start="111:30" pos:end="111:30">1</literal></expr>)</condition><block type="pseudo" pos:start="113:13" pos:end="113:53"><block_content pos:start="113:13" pos:end="113:53">

            <expr_stmt pos:start="113:13" pos:end="113:53"><expr pos:start="113:13" pos:end="113:52"><name pos:start="113:13" pos:end="113:21"><name pos:start="113:13" pos:end="113:18">outptr</name><index pos:start="113:19" pos:end="113:21">[<expr pos:start="113:20" pos:end="113:20"><literal type="number" pos:start="113:20" pos:end="113:20">1</literal></expr>]</index></name> <operator pos:start="113:23" pos:end="113:23">=</operator> <name pos:start="113:25" pos:end="113:52"><name pos:start="113:25" pos:end="113:35">out_samples</name><index pos:start="113:36" pos:end="113:52">[<expr pos:start="113:37" pos:end="113:51"><name pos:start="113:37" pos:end="113:47"><name pos:start="113:37" pos:end="113:37">s</name><operator pos:start="113:38" pos:end="113:39">-&gt;</operator><name pos:start="113:40" pos:end="113:43">coff</name><index pos:start="113:44" pos:end="113:47">[<expr pos:start="113:45" pos:end="113:46"><name pos:start="113:45" pos:end="113:46">fr</name></expr>]</index></name> <operator pos:start="113:49" pos:end="113:49">+</operator> <literal type="number" pos:start="113:51" pos:end="113:51">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="117:9" pos:end="119:23"><if pos:start="117:9" pos:end="119:23">if <condition pos:start="117:12" pos:end="117:63">(<expr pos:start="117:13" pos:end="117:62"><operator pos:start="117:13" pos:end="117:13">(</operator><name pos:start="117:14" pos:end="117:16">ret</name> <operator pos:start="117:18" pos:end="117:18">=</operator> <call pos:start="117:20" pos:end="117:57"><name pos:start="117:20" pos:end="117:34">mp_decode_frame</name><argument_list pos:start="117:35" pos:end="117:57">(<argument pos:start="117:36" pos:end="117:36"><expr pos:start="117:36" pos:end="117:36"><name pos:start="117:36" pos:end="117:36">m</name></expr></argument>, <argument pos:start="117:39" pos:end="117:44"><expr pos:start="117:39" pos:end="117:44"><name pos:start="117:39" pos:end="117:44">outptr</name></expr></argument>, <argument pos:start="117:47" pos:end="117:49"><expr pos:start="117:47" pos:end="117:49"><name pos:start="117:47" pos:end="117:49">buf</name></expr></argument>, <argument pos:start="117:52" pos:end="117:56"><expr pos:start="117:52" pos:end="117:56"><name pos:start="117:52" pos:end="117:56">fsize</name></expr></argument>)</argument_list></call><operator pos:start="117:58" pos:end="117:58">)</operator> <operator pos:start="117:60" pos:end="117:60">&lt;</operator> <literal type="number" pos:start="117:62" pos:end="117:62">0</literal></expr>)</condition><block type="pseudo" pos:start="119:13" pos:end="119:23"><block_content pos:start="119:13" pos:end="119:23">

            <return pos:start="119:13" pos:end="119:23">return <expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:22">ret</name></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="123:9" pos:end="123:24"><expr pos:start="123:9" pos:end="123:23"><name pos:start="123:9" pos:end="123:16">out_size</name> <operator pos:start="123:18" pos:end="123:19">+=</operator> <name pos:start="123:21" pos:end="123:23">ret</name></expr>;</expr_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:26"><expr pos:start="125:9" pos:end="125:25"><name pos:start="125:9" pos:end="125:11">buf</name>      <operator pos:start="125:18" pos:end="125:19">+=</operator> <name pos:start="125:21" pos:end="125:25">fsize</name></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:11">len</name>      <operator pos:start="127:18" pos:end="127:19">-=</operator> <name pos:start="127:21" pos:end="127:25">fsize</name></expr>;</expr_stmt>



        <expr_stmt pos:start="131:9" pos:end="131:39"><expr pos:start="131:9" pos:end="131:38"><name pos:start="131:9" pos:end="131:23"><name pos:start="131:9" pos:end="131:13">avctx</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:23">bit_rate</name></name> <operator pos:start="131:25" pos:end="131:26">+=</operator> <name pos:start="131:28" pos:end="131:38"><name pos:start="131:28" pos:end="131:28">m</name><operator pos:start="131:29" pos:end="131:30">-&gt;</operator><name pos:start="131:31" pos:end="131:38">bit_rate</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="137:5" pos:end="137:27">/* update codec info */</comment>

    <expr_stmt pos:start="139:5" pos:end="139:54"><expr pos:start="139:5" pos:end="139:53"><name pos:start="139:5" pos:end="139:22"><name pos:start="139:5" pos:end="139:9">avctx</name><operator pos:start="139:10" pos:end="139:11">-&gt;</operator><name pos:start="139:12" pos:end="139:22">sample_rate</name></name> <operator pos:start="139:24" pos:end="139:24">=</operator> <name pos:start="139:26" pos:end="139:40"><name pos:start="139:26" pos:end="139:26">s</name><operator pos:start="139:27" pos:end="139:28">-&gt;</operator><name pos:start="139:29" pos:end="139:37">mp3decctx</name><index pos:start="139:38" pos:end="139:40">[<expr pos:start="139:39" pos:end="139:39"><literal type="number" pos:start="139:39" pos:end="139:39">0</literal></expr>]</index></name><operator pos:start="139:41" pos:end="139:42">-&gt;</operator><name pos:start="139:43" pos:end="139:53">sample_rate</name></expr>;</expr_stmt>



    <expr_stmt pos:start="143:5" pos:end="143:71"><expr pos:start="143:5" pos:end="143:70"><name pos:start="143:5" pos:end="143:21"><name pos:start="143:5" pos:end="143:9">frame</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:21">nb_samples</name></name> <operator pos:start="143:23" pos:end="143:23">=</operator> <name pos:start="143:25" pos:end="143:32">out_size</name> <operator pos:start="143:34" pos:end="143:34">/</operator> <operator pos:start="143:36" pos:end="143:36">(</operator><name pos:start="143:37" pos:end="143:51"><name pos:start="143:37" pos:end="143:41">avctx</name><operator pos:start="143:42" pos:end="143:43">-&gt;</operator><name pos:start="143:44" pos:end="143:51">channels</name></name> <operator pos:start="143:53" pos:end="143:53">*</operator> <sizeof pos:start="143:55" pos:end="143:69">sizeof<argument_list pos:start="143:61" pos:end="143:69">(<argument pos:start="143:62" pos:end="143:68"><expr pos:start="143:62" pos:end="143:68"><name pos:start="143:62" pos:end="143:68">OUT_INT</name></expr></argument>)</argument_list></sizeof><operator pos:start="143:70" pos:end="143:70">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:26"><expr pos:start="145:5" pos:end="145:25"><operator pos:start="145:5" pos:end="145:5">*</operator><name pos:start="145:6" pos:end="145:18">got_frame_ptr</name>    <operator pos:start="145:23" pos:end="145:23">=</operator> <literal type="number" pos:start="145:25" pos:end="145:25">1</literal></expr>;</expr_stmt>



    <return pos:start="149:5" pos:end="149:20">return <expr pos:start="149:12" pos:end="149:19"><name pos:start="149:12" pos:end="149:19">buf_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
