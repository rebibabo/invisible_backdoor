<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/18674.c" pos:tabs="8"><function pos:start="1:1" pos:end="655:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:34">monitor_handle_command</name><parameter_list pos:start="1:35" pos:end="1:69">(<parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:42">Monitor</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">mon</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:68"><decl pos:start="1:50" pos:end="1:68"><type pos:start="1:50" pos:end="1:68"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:59">char</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:68">cmdline</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="655:1">{<block_content pos:start="5:5" pos:end="653:11">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:17"><type pos:start="5:5" pos:end="5:16"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:14">char</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">p</name></decl>, <decl pos:start="5:20" pos:end="5:26"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:20" pos:end="5:20">*</modifier></type><name pos:start="5:21" pos:end="5:26">pstart</name></decl>, <decl pos:start="5:29" pos:end="5:36"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:36">typestr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:8">char</name> <modifier pos:start="7:10" pos:end="7:10">*</modifier></type><name pos:start="7:11" pos:end="7:11">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">c</name></decl>, <decl pos:start="9:12" pos:end="9:18"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:12" pos:end="9:18">nb_args</name></decl>, <decl pos:start="9:21" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:21" pos:end="9:23">len</name></decl>, <decl pos:start="9:26" pos:end="9:26"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:26" pos:end="9:26">i</name></decl>, <decl pos:start="9:29" pos:end="9:35"><type ref="prev" pos:start="9:5" pos:end="9:7"/><name pos:start="9:29" pos:end="9:35">has_arg</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:21"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:19">mon_cmd_t</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">cmd</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:21"><name pos:start="13:10" pos:end="13:16">cmdname</name><index pos:start="13:17" pos:end="13:21">[<expr pos:start="13:18" pos:end="13:20"><literal type="number" pos:start="13:18" pos:end="13:20">256</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:8">char</name></type> <name pos:start="15:10" pos:end="15:18"><name pos:start="15:10" pos:end="15:12">buf</name><index pos:start="15:13" pos:end="15:18">[<expr pos:start="15:14" pos:end="15:17"><literal type="number" pos:start="15:14" pos:end="15:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:34"><decl pos:start="17:5" pos:end="17:33"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">void</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:33"><name pos:start="17:11" pos:end="17:23">str_allocated</name><index pos:start="17:24" pos:end="17:33">[<expr pos:start="17:25" pos:end="17:32"><name pos:start="17:25" pos:end="17:32">MAX_ARGS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:10"><name pos:start="19:5" pos:end="19:8">void</name> <modifier pos:start="19:10" pos:end="19:10">*</modifier></type><name pos:start="19:11" pos:end="19:24"><name pos:start="19:11" pos:end="19:14">args</name><index pos:start="19:15" pos:end="19:24">[<expr pos:start="19:16" pos:end="19:23"><name pos:start="19:16" pos:end="19:23">MAX_ARGS</name></expr>]</index></name></decl>;</decl_stmt>

    <function_decl pos:start="21:5" pos:end="21:36"><type pos:start="21:5" pos:end="21:8"><name pos:start="21:5" pos:end="21:8">void</name></type> (<modifier pos:start="21:11" pos:end="21:11">*</modifier><name pos:start="21:12" pos:end="21:20">handler_0</name>)<parameter_list pos:start="21:22" pos:end="21:35">(<parameter pos:start="21:23" pos:end="21:34"><decl pos:start="21:23" pos:end="21:34"><type pos:start="21:23" pos:end="21:31"><name pos:start="21:23" pos:end="21:29">Monitor</name> <modifier pos:start="21:31" pos:end="21:31">*</modifier></type><name pos:start="21:32" pos:end="21:34">mon</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="23:5" pos:end="23:48"><type pos:start="23:5" pos:end="23:8"><name pos:start="23:5" pos:end="23:8">void</name></type> (<modifier pos:start="23:11" pos:end="23:11">*</modifier><name pos:start="23:12" pos:end="23:20">handler_1</name>)<parameter_list pos:start="23:22" pos:end="23:47">(<parameter pos:start="23:23" pos:end="23:34"><decl pos:start="23:23" pos:end="23:34"><type pos:start="23:23" pos:end="23:34"><name pos:start="23:23" pos:end="23:29">Monitor</name> <modifier pos:start="23:31" pos:end="23:31">*</modifier></type><name pos:start="23:32" pos:end="23:34">mon</name></decl></parameter>, <parameter pos:start="23:37" pos:end="23:46"><decl pos:start="23:37" pos:end="23:46"><type pos:start="23:37" pos:end="23:46"><name pos:start="23:37" pos:end="23:40">void</name> <modifier pos:start="23:42" pos:end="23:42">*</modifier></type><name pos:start="23:43" pos:end="23:46">arg0</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="25:5" pos:end="25:60"><type pos:start="25:5" pos:end="25:8"><name pos:start="25:5" pos:end="25:8">void</name></type> (<modifier pos:start="25:11" pos:end="25:11">*</modifier><name pos:start="25:12" pos:end="25:20">handler_2</name>)<parameter_list pos:start="25:22" pos:end="25:59">(<parameter pos:start="25:23" pos:end="25:34"><decl pos:start="25:23" pos:end="25:34"><type pos:start="25:23" pos:end="25:34"><name pos:start="25:23" pos:end="25:29">Monitor</name> <modifier pos:start="25:31" pos:end="25:31">*</modifier></type><name pos:start="25:32" pos:end="25:34">mon</name></decl></parameter>, <parameter pos:start="25:37" pos:end="25:46"><decl pos:start="25:37" pos:end="25:46"><type pos:start="25:37" pos:end="25:46"><name pos:start="25:37" pos:end="25:40">void</name> <modifier pos:start="25:42" pos:end="25:42">*</modifier></type><name pos:start="25:43" pos:end="25:46">arg0</name></decl></parameter>, <parameter pos:start="25:49" pos:end="25:58"><decl pos:start="25:49" pos:end="25:58"><type pos:start="25:49" pos:end="25:58"><name pos:start="25:49" pos:end="25:52">void</name> <modifier pos:start="25:54" pos:end="25:54">*</modifier></type><name pos:start="25:55" pos:end="25:58">arg1</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="27:5" pos:end="27:72"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">void</name></type> (<modifier pos:start="27:11" pos:end="27:11">*</modifier><name pos:start="27:12" pos:end="27:20">handler_3</name>)<parameter_list pos:start="27:22" pos:end="27:71">(<parameter pos:start="27:23" pos:end="27:34"><decl pos:start="27:23" pos:end="27:34"><type pos:start="27:23" pos:end="27:34"><name pos:start="27:23" pos:end="27:29">Monitor</name> <modifier pos:start="27:31" pos:end="27:31">*</modifier></type><name pos:start="27:32" pos:end="27:34">mon</name></decl></parameter>, <parameter pos:start="27:37" pos:end="27:46"><decl pos:start="27:37" pos:end="27:46"><type pos:start="27:37" pos:end="27:46"><name pos:start="27:37" pos:end="27:40">void</name> <modifier pos:start="27:42" pos:end="27:42">*</modifier></type><name pos:start="27:43" pos:end="27:46">arg0</name></decl></parameter>, <parameter pos:start="27:49" pos:end="27:58"><decl pos:start="27:49" pos:end="27:58"><type pos:start="27:49" pos:end="27:58"><name pos:start="27:49" pos:end="27:52">void</name> <modifier pos:start="27:54" pos:end="27:54">*</modifier></type><name pos:start="27:55" pos:end="27:58">arg1</name></decl></parameter>, <parameter pos:start="27:61" pos:end="27:70"><decl pos:start="27:61" pos:end="27:70"><type pos:start="27:61" pos:end="27:70"><name pos:start="27:61" pos:end="27:64">void</name> <modifier pos:start="27:66" pos:end="27:66">*</modifier></type><name pos:start="27:67" pos:end="27:70">arg2</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="29:5" pos:end="31:34"><type pos:start="29:5" pos:end="29:8"><name pos:start="29:5" pos:end="29:8">void</name></type> (<modifier pos:start="29:11" pos:end="29:11">*</modifier><name pos:start="29:12" pos:end="29:20">handler_4</name>)<parameter_list pos:start="29:22" pos:end="31:33">(<parameter pos:start="29:23" pos:end="29:34"><decl pos:start="29:23" pos:end="29:34"><type pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:29">Monitor</name> <modifier pos:start="29:31" pos:end="29:31">*</modifier></type><name pos:start="29:32" pos:end="29:34">mon</name></decl></parameter>, <parameter pos:start="29:37" pos:end="29:46"><decl pos:start="29:37" pos:end="29:46"><type pos:start="29:37" pos:end="29:46"><name pos:start="29:37" pos:end="29:40">void</name> <modifier pos:start="29:42" pos:end="29:42">*</modifier></type><name pos:start="29:43" pos:end="29:46">arg0</name></decl></parameter>, <parameter pos:start="29:49" pos:end="29:58"><decl pos:start="29:49" pos:end="29:58"><type pos:start="29:49" pos:end="29:58"><name pos:start="29:49" pos:end="29:52">void</name> <modifier pos:start="29:54" pos:end="29:54">*</modifier></type><name pos:start="29:55" pos:end="29:58">arg1</name></decl></parameter>, <parameter pos:start="29:61" pos:end="29:70"><decl pos:start="29:61" pos:end="29:70"><type pos:start="29:61" pos:end="29:70"><name pos:start="29:61" pos:end="29:64">void</name> <modifier pos:start="29:66" pos:end="29:66">*</modifier></type><name pos:start="29:67" pos:end="29:70">arg2</name></decl></parameter>,

                      <parameter pos:start="31:23" pos:end="31:32"><decl pos:start="31:23" pos:end="31:32"><type pos:start="31:23" pos:end="31:32"><name pos:start="31:23" pos:end="31:26">void</name> <modifier pos:start="31:28" pos:end="31:28">*</modifier></type><name pos:start="31:29" pos:end="31:32">arg3</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="33:5" pos:end="35:46"><type pos:start="33:5" pos:end="33:8"><name pos:start="33:5" pos:end="33:8">void</name></type> (<modifier pos:start="33:11" pos:end="33:11">*</modifier><name pos:start="33:12" pos:end="33:20">handler_5</name>)<parameter_list pos:start="33:22" pos:end="35:45">(<parameter pos:start="33:23" pos:end="33:34"><decl pos:start="33:23" pos:end="33:34"><type pos:start="33:23" pos:end="33:34"><name pos:start="33:23" pos:end="33:29">Monitor</name> <modifier pos:start="33:31" pos:end="33:31">*</modifier></type><name pos:start="33:32" pos:end="33:34">mon</name></decl></parameter>, <parameter pos:start="33:37" pos:end="33:46"><decl pos:start="33:37" pos:end="33:46"><type pos:start="33:37" pos:end="33:46"><name pos:start="33:37" pos:end="33:40">void</name> <modifier pos:start="33:42" pos:end="33:42">*</modifier></type><name pos:start="33:43" pos:end="33:46">arg0</name></decl></parameter>, <parameter pos:start="33:49" pos:end="33:58"><decl pos:start="33:49" pos:end="33:58"><type pos:start="33:49" pos:end="33:58"><name pos:start="33:49" pos:end="33:52">void</name> <modifier pos:start="33:54" pos:end="33:54">*</modifier></type><name pos:start="33:55" pos:end="33:58">arg1</name></decl></parameter>, <parameter pos:start="33:61" pos:end="33:70"><decl pos:start="33:61" pos:end="33:70"><type pos:start="33:61" pos:end="33:70"><name pos:start="33:61" pos:end="33:64">void</name> <modifier pos:start="33:66" pos:end="33:66">*</modifier></type><name pos:start="33:67" pos:end="33:70">arg2</name></decl></parameter>,

                      <parameter pos:start="35:23" pos:end="35:32"><decl pos:start="35:23" pos:end="35:32"><type pos:start="35:23" pos:end="35:32"><name pos:start="35:23" pos:end="35:26">void</name> <modifier pos:start="35:28" pos:end="35:28">*</modifier></type><name pos:start="35:29" pos:end="35:32">arg3</name></decl></parameter>, <parameter pos:start="35:35" pos:end="35:44"><decl pos:start="35:35" pos:end="35:44"><type pos:start="35:35" pos:end="35:44"><name pos:start="35:35" pos:end="35:38">void</name> <modifier pos:start="35:40" pos:end="35:40">*</modifier></type><name pos:start="35:41" pos:end="35:44">arg4</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="37:5" pos:end="39:58"><type pos:start="37:5" pos:end="37:8"><name pos:start="37:5" pos:end="37:8">void</name></type> (<modifier pos:start="37:11" pos:end="37:11">*</modifier><name pos:start="37:12" pos:end="37:20">handler_6</name>)<parameter_list pos:start="37:22" pos:end="39:57">(<parameter pos:start="37:23" pos:end="37:34"><decl pos:start="37:23" pos:end="37:34"><type pos:start="37:23" pos:end="37:34"><name pos:start="37:23" pos:end="37:29">Monitor</name> <modifier pos:start="37:31" pos:end="37:31">*</modifier></type><name pos:start="37:32" pos:end="37:34">mon</name></decl></parameter>, <parameter pos:start="37:37" pos:end="37:46"><decl pos:start="37:37" pos:end="37:46"><type pos:start="37:37" pos:end="37:46"><name pos:start="37:37" pos:end="37:40">void</name> <modifier pos:start="37:42" pos:end="37:42">*</modifier></type><name pos:start="37:43" pos:end="37:46">arg0</name></decl></parameter>, <parameter pos:start="37:49" pos:end="37:58"><decl pos:start="37:49" pos:end="37:58"><type pos:start="37:49" pos:end="37:58"><name pos:start="37:49" pos:end="37:52">void</name> <modifier pos:start="37:54" pos:end="37:54">*</modifier></type><name pos:start="37:55" pos:end="37:58">arg1</name></decl></parameter>, <parameter pos:start="37:61" pos:end="37:70"><decl pos:start="37:61" pos:end="37:70"><type pos:start="37:61" pos:end="37:70"><name pos:start="37:61" pos:end="37:64">void</name> <modifier pos:start="37:66" pos:end="37:66">*</modifier></type><name pos:start="37:67" pos:end="37:70">arg2</name></decl></parameter>,

                      <parameter pos:start="39:23" pos:end="39:32"><decl pos:start="39:23" pos:end="39:32"><type pos:start="39:23" pos:end="39:32"><name pos:start="39:23" pos:end="39:26">void</name> <modifier pos:start="39:28" pos:end="39:28">*</modifier></type><name pos:start="39:29" pos:end="39:32">arg3</name></decl></parameter>, <parameter pos:start="39:35" pos:end="39:44"><decl pos:start="39:35" pos:end="39:44"><type pos:start="39:35" pos:end="39:44"><name pos:start="39:35" pos:end="39:38">void</name> <modifier pos:start="39:40" pos:end="39:40">*</modifier></type><name pos:start="39:41" pos:end="39:44">arg4</name></decl></parameter>, <parameter pos:start="39:47" pos:end="39:56"><decl pos:start="39:47" pos:end="39:56"><type pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:50">void</name> <modifier pos:start="39:52" pos:end="39:52">*</modifier></type><name pos:start="39:53" pos:end="39:56">arg5</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl pos:start="41:5" pos:end="48:0"><type pos:start="41:5" pos:end="41:8"><name pos:start="41:5" pos:end="41:8">void</name></type> (<modifier pos:start="41:11" pos:end="41:11">*</modifier><name pos:start="41:12" pos:end="41:20">handler_7</name>)<parameter_list pos:start="41:22" pos:end="43:69">(<parameter pos:start="41:23" pos:end="41:34"><decl pos:start="41:23" pos:end="41:34"><type pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:29">Monitor</name> <modifier pos:start="41:31" pos:end="41:31">*</modifier></type><name pos:start="41:32" pos:end="41:34">mon</name></decl></parameter>, <parameter pos:start="41:37" pos:end="41:46"><decl pos:start="41:37" pos:end="41:46"><type pos:start="41:37" pos:end="41:46"><name pos:start="41:37" pos:end="41:40">void</name> <modifier pos:start="41:42" pos:end="41:42">*</modifier></type><name pos:start="41:43" pos:end="41:46">arg0</name></decl></parameter>, <parameter pos:start="41:49" pos:end="41:58"><decl pos:start="41:49" pos:end="41:58"><type pos:start="41:49" pos:end="41:58"><name pos:start="41:49" pos:end="41:52">void</name> <modifier pos:start="41:54" pos:end="41:54">*</modifier></type><name pos:start="41:55" pos:end="41:58">arg1</name></decl></parameter>, <parameter pos:start="41:61" pos:end="41:70"><decl pos:start="41:61" pos:end="41:70"><type pos:start="41:61" pos:end="41:70"><name pos:start="41:61" pos:end="41:64">void</name> <modifier pos:start="41:66" pos:end="41:66">*</modifier></type><name pos:start="41:67" pos:end="41:70">arg2</name></decl></parameter>,

                      <parameter pos:start="43:23" pos:end="43:32"><decl pos:start="43:23" pos:end="43:32"><type pos:start="43:23" pos:end="43:32"><name pos:start="43:23" pos:end="43:26">void</name> <modifier pos:start="43:28" pos:end="43:28">*</modifier></type><name pos:start="43:29" pos:end="43:32">arg3</name></decl></parameter>, <parameter pos:start="43:35" pos:end="43:44"><decl pos:start="43:35" pos:end="43:44"><type pos:start="43:35" pos:end="43:44"><name pos:start="43:35" pos:end="43:38">void</name> <modifier pos:start="43:40" pos:end="43:40">*</modifier></type><name pos:start="43:41" pos:end="43:44">arg4</name></decl></parameter>, <parameter pos:start="43:47" pos:end="43:56"><decl pos:start="43:47" pos:end="43:56"><type pos:start="43:47" pos:end="43:56"><name pos:start="43:47" pos:end="43:50">void</name> <modifier pos:start="43:52" pos:end="43:52">*</modifier></type><name pos:start="43:53" pos:end="43:56">arg5</name></decl></parameter>, <parameter pos:start="43:59" pos:end="43:68"><decl pos:start="43:59" pos:end="43:68"><type pos:start="43:59" pos:end="43:68"><name pos:start="43:59" pos:end="43:62">void</name> <modifier pos:start="43:64" pos:end="43:64">*</modifier></type><name pos:start="43:65" pos:end="43:68">arg6</name></decl></parameter>)</parameter_list>;</function_decl>



<cpp:ifdef pos:start="47:1" pos:end="47:12">#<cpp:directive pos:start="47:2" pos:end="47:6">ifdef</cpp:directive> <name pos:start="47:8" pos:end="47:12">DEBUG</name></cpp:ifdef>

    <expr_stmt pos:start="49:5" pos:end="52:0"><expr pos:start="49:5" pos:end="49:50"><call pos:start="49:5" pos:end="49:50"><name pos:start="49:5" pos:end="49:18">monitor_printf</name><argument_list pos:start="49:19" pos:end="49:50">(<argument pos:start="49:20" pos:end="49:22"><expr pos:start="49:20" pos:end="49:22"><name pos:start="49:20" pos:end="49:22">mon</name></expr></argument>, <argument pos:start="49:25" pos:end="49:40"><expr pos:start="49:25" pos:end="49:40"><literal type="string" pos:start="49:25" pos:end="49:40">"command='%s'\n"</literal></expr></argument>, <argument pos:start="49:43" pos:end="49:49"><expr pos:start="49:43" pos:end="49:49"><name pos:start="49:43" pos:end="49:49">cmdline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="51:1" pos:end="51:6">#<cpp:directive pos:start="51:2" pos:end="51:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="55:5" pos:end="55:34">/* extract the command name */</comment>

    <expr_stmt pos:start="57:5" pos:end="57:16"><expr pos:start="57:5" pos:end="57:15"><name pos:start="57:5" pos:end="57:5">p</name> <operator pos:start="57:7" pos:end="57:7">=</operator> <name pos:start="57:9" pos:end="57:15">cmdline</name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:16"><expr pos:start="59:5" pos:end="59:15"><name pos:start="59:5" pos:end="59:5">q</name> <operator pos:start="59:7" pos:end="59:7">=</operator> <name pos:start="59:9" pos:end="59:15">cmdname</name></expr>;</expr_stmt>

    <while pos:start="61:5" pos:end="63:12">while <condition pos:start="61:11" pos:end="61:28">(<expr pos:start="61:12" pos:end="61:27"><call pos:start="61:12" pos:end="61:27"><name pos:start="61:12" pos:end="61:23">qemu_isspace</name><argument_list pos:start="61:24" pos:end="61:27">(<argument pos:start="61:25" pos:end="61:26"><expr pos:start="61:25" pos:end="61:26"><operator pos:start="61:25" pos:end="61:25">*</operator><name pos:start="61:26" pos:end="61:26">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:12"><block_content pos:start="63:9" pos:end="63:12">

        <expr_stmt pos:start="63:9" pos:end="63:12"><expr pos:start="63:9" pos:end="63:11"><name pos:start="63:9" pos:end="63:9">p</name><operator pos:start="63:10" pos:end="63:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="65:5" pos:end="67:15"><if pos:start="65:5" pos:end="67:15">if <condition pos:start="65:8" pos:end="65:19">(<expr pos:start="65:9" pos:end="65:18"><operator pos:start="65:9" pos:end="65:9">*</operator><name pos:start="65:10" pos:end="65:10">p</name> <operator pos:start="65:12" pos:end="65:13">==</operator> <literal type="char" pos:start="65:15" pos:end="65:18">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="67:9" pos:end="67:15"><block_content pos:start="67:9" pos:end="67:15">

        <return pos:start="67:9" pos:end="67:15">return;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:15"><expr pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:10">pstart</name> <operator pos:start="69:12" pos:end="69:12">=</operator> <name pos:start="69:14" pos:end="69:14">p</name></expr>;</expr_stmt>

    <while pos:start="71:5" pos:end="73:12">while <condition pos:start="71:11" pos:end="71:56">(<expr pos:start="71:12" pos:end="71:55"><operator pos:start="71:12" pos:end="71:12">*</operator><name pos:start="71:13" pos:end="71:13">p</name> <operator pos:start="71:15" pos:end="71:16">!=</operator> <literal type="char" pos:start="71:18" pos:end="71:21">'\0'</literal> <operator pos:start="71:23" pos:end="71:24">&amp;&amp;</operator> <operator pos:start="71:26" pos:end="71:26">*</operator><name pos:start="71:27" pos:end="71:27">p</name> <operator pos:start="71:29" pos:end="71:30">!=</operator> <literal type="char" pos:start="71:32" pos:end="71:34">'/'</literal> <operator pos:start="71:36" pos:end="71:37">&amp;&amp;</operator> <operator pos:start="71:39" pos:end="71:39">!</operator><call pos:start="71:40" pos:end="71:55"><name pos:start="71:40" pos:end="71:51">qemu_isspace</name><argument_list pos:start="71:52" pos:end="71:55">(<argument pos:start="71:53" pos:end="71:54"><expr pos:start="71:53" pos:end="71:54"><operator pos:start="71:53" pos:end="71:53">*</operator><name pos:start="71:54" pos:end="71:54">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="73:9" pos:end="73:12"><block_content pos:start="73:9" pos:end="73:12">

        <expr_stmt pos:start="73:9" pos:end="73:12"><expr pos:start="73:9" pos:end="73:11"><name pos:start="73:9" pos:end="73:9">p</name><operator pos:start="73:10" pos:end="73:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt pos:start="75:5" pos:end="75:21"><expr pos:start="75:5" pos:end="75:20"><name pos:start="75:5" pos:end="75:7">len</name> <operator pos:start="75:9" pos:end="75:9">=</operator> <name pos:start="75:11" pos:end="75:11">p</name> <operator pos:start="75:13" pos:end="75:13">-</operator> <name pos:start="75:15" pos:end="75:20">pstart</name></expr>;</expr_stmt>

    <if_stmt pos:start="77:5" pos:end="79:34"><if pos:start="77:5" pos:end="79:34">if <condition pos:start="77:8" pos:end="77:34">(<expr pos:start="77:9" pos:end="77:33"><name pos:start="77:9" pos:end="77:11">len</name> <operator pos:start="77:13" pos:end="77:13">&gt;</operator> <sizeof pos:start="77:15" pos:end="77:29">sizeof<argument_list pos:start="77:21" pos:end="77:29">(<argument pos:start="77:22" pos:end="77:28"><expr pos:start="77:22" pos:end="77:28"><name pos:start="77:22" pos:end="77:28">cmdname</name></expr></argument>)</argument_list></sizeof> <operator pos:start="77:31" pos:end="77:31">-</operator> <literal type="number" pos:start="77:33" pos:end="77:33">1</literal></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:34"><block_content pos:start="79:9" pos:end="79:34">

        <expr_stmt pos:start="79:9" pos:end="79:34"><expr pos:start="79:9" pos:end="79:33"><name pos:start="79:9" pos:end="79:11">len</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <sizeof pos:start="79:15" pos:end="79:29">sizeof<argument_list pos:start="79:21" pos:end="79:29">(<argument pos:start="79:22" pos:end="79:28"><expr pos:start="79:22" pos:end="79:28"><name pos:start="79:22" pos:end="79:28">cmdname</name></expr></argument>)</argument_list></sizeof> <operator pos:start="79:31" pos:end="79:31">-</operator> <literal type="number" pos:start="79:33" pos:end="79:33">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:33"><expr pos:start="81:5" pos:end="81:32"><call pos:start="81:5" pos:end="81:32"><name pos:start="81:5" pos:end="81:10">memcpy</name><argument_list pos:start="81:11" pos:end="81:32">(<argument pos:start="81:12" pos:end="81:18"><expr pos:start="81:12" pos:end="81:18"><name pos:start="81:12" pos:end="81:18">cmdname</name></expr></argument>, <argument pos:start="81:21" pos:end="81:26"><expr pos:start="81:21" pos:end="81:26"><name pos:start="81:21" pos:end="81:26">pstart</name></expr></argument>, <argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:24"><expr pos:start="83:5" pos:end="83:23"><name pos:start="83:5" pos:end="83:16"><name pos:start="83:5" pos:end="83:11">cmdname</name><index pos:start="83:12" pos:end="83:16">[<expr pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">len</name></expr>]</index></name> <operator pos:start="83:18" pos:end="83:18">=</operator> <literal type="char" pos:start="83:20" pos:end="83:23">'\0'</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="87:5" pos:end="87:26">/* find the command */</comment>

    <for pos:start="89:5" pos:end="95:5">for<control pos:start="89:8" pos:end="89:49">(<init pos:start="89:9" pos:end="89:23"><expr pos:start="89:9" pos:end="89:22"><name pos:start="89:9" pos:end="89:11">cmd</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:22">mon_cmds</name></expr>;</init> <condition pos:start="89:25" pos:end="89:42"><expr pos:start="89:25" pos:end="89:41"><name pos:start="89:25" pos:end="89:33"><name pos:start="89:25" pos:end="89:27">cmd</name><operator pos:start="89:28" pos:end="89:29">-&gt;</operator><name pos:start="89:30" pos:end="89:33">name</name></name> <operator pos:start="89:35" pos:end="89:36">!=</operator> <name pos:start="89:38" pos:end="89:41">NULL</name></expr>;</condition> <incr pos:start="89:44" pos:end="89:48"><expr pos:start="89:44" pos:end="89:48"><name pos:start="89:44" pos:end="89:46">cmd</name><operator pos:start="89:47" pos:end="89:48">++</operator></expr></incr>)</control> <block pos:start="89:51" pos:end="95:5">{<block_content pos:start="91:9" pos:end="93:23">

        <if_stmt pos:start="91:9" pos:end="93:23"><if pos:start="91:9" pos:end="93:23">if <condition pos:start="91:12" pos:end="91:44">(<expr pos:start="91:13" pos:end="91:43"><call pos:start="91:13" pos:end="91:43"><name pos:start="91:13" pos:end="91:23">compare_cmd</name><argument_list pos:start="91:24" pos:end="91:43">(<argument pos:start="91:25" pos:end="91:31"><expr pos:start="91:25" pos:end="91:31"><name pos:start="91:25" pos:end="91:31">cmdname</name></expr></argument>, <argument pos:start="91:34" pos:end="91:42"><expr pos:start="91:34" pos:end="91:42"><name pos:start="91:34" pos:end="91:42"><name pos:start="91:34" pos:end="91:36">cmd</name><operator pos:start="91:37" pos:end="91:38">-&gt;</operator><name pos:start="91:39" pos:end="91:42">name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:23"><block_content pos:start="93:13" pos:end="93:23">

            <goto pos:start="93:13" pos:end="93:23">goto <name pos:start="93:18" pos:end="93:22">found</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="97:5" pos:end="97:60"><expr pos:start="97:5" pos:end="97:59"><call pos:start="97:5" pos:end="97:59"><name pos:start="97:5" pos:end="97:18">monitor_printf</name><argument_list pos:start="97:19" pos:end="97:59">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><name pos:start="97:20" pos:end="97:22">mon</name></expr></argument>, <argument pos:start="97:25" pos:end="97:49"><expr pos:start="97:25" pos:end="97:49"><literal type="string" pos:start="97:25" pos:end="97:49">"unknown command: '%s'\n"</literal></expr></argument>, <argument pos:start="97:52" pos:end="97:58"><expr pos:start="97:52" pos:end="97:58"><name pos:start="97:52" pos:end="97:58">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="99:5" pos:end="99:11">return;</return>

 <label pos:start="101:2" pos:end="101:7"><name pos:start="101:2" pos:end="101:6">found</name>:</label>



    <for pos:start="105:5" pos:end="107:32">for<control pos:start="105:8" pos:end="105:33">(<init pos:start="105:9" pos:end="105:14"><expr pos:start="105:9" pos:end="105:13"><name pos:start="105:9" pos:end="105:9">i</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <literal type="number" pos:start="105:13" pos:end="105:13">0</literal></expr>;</init> <condition pos:start="105:16" pos:end="105:28"><expr pos:start="105:16" pos:end="105:27"><name pos:start="105:16" pos:end="105:16">i</name> <operator pos:start="105:18" pos:end="105:18">&lt;</operator> <name pos:start="105:20" pos:end="105:27">MAX_ARGS</name></expr>;</condition> <incr pos:start="105:30" pos:end="105:32"><expr pos:start="105:30" pos:end="105:32"><name pos:start="105:30" pos:end="105:30">i</name><operator pos:start="105:31" pos:end="105:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="107:9" pos:end="107:32"><block_content pos:start="107:9" pos:end="107:32">

        <expr_stmt pos:start="107:9" pos:end="107:32"><expr pos:start="107:9" pos:end="107:31"><name pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:21">str_allocated</name><index pos:start="107:22" pos:end="107:24">[<expr pos:start="107:23" pos:end="107:23"><name pos:start="107:23" pos:end="107:23">i</name></expr>]</index></name> <operator pos:start="107:26" pos:end="107:26">=</operator> <name pos:start="107:28" pos:end="107:31">NULL</name></expr>;</expr_stmt></block_content></block></for>



    <comment type="block" pos:start="111:5" pos:end="111:30">/* parse the parameters */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:29"><expr pos:start="113:5" pos:end="113:28"><name pos:start="113:5" pos:end="113:11">typestr</name> <operator pos:start="113:13" pos:end="113:13">=</operator> <name pos:start="113:15" pos:end="113:28"><name pos:start="113:15" pos:end="113:17">cmd</name><operator pos:start="113:18" pos:end="113:19">-&gt;</operator><name pos:start="113:20" pos:end="113:28">args_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:16"><expr pos:start="115:5" pos:end="115:15"><name pos:start="115:5" pos:end="115:11">nb_args</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <literal type="number" pos:start="115:15" pos:end="115:15">0</literal></expr>;</expr_stmt>

    <for pos:start="117:5" pos:end="551:5">for<control pos:start="117:8" pos:end="117:11">(<init pos:start="117:9" pos:end="117:9">;</init><condition pos:start="117:10" pos:end="117:10">;</condition><incr/>)</control> <block pos:start="117:13" pos:end="551:5">{<block_content pos:start="119:9" pos:end="549:9">

        <expr_stmt pos:start="119:9" pos:end="119:21"><expr pos:start="119:9" pos:end="119:20"><name pos:start="119:9" pos:end="119:9">c</name> <operator pos:start="119:11" pos:end="119:11">=</operator> <operator pos:start="119:13" pos:end="119:13">*</operator><name pos:start="119:14" pos:end="119:20">typestr</name></expr>;</expr_stmt>

        <if_stmt pos:start="121:9" pos:end="123:18"><if pos:start="121:9" pos:end="123:18">if <condition pos:start="121:12" pos:end="121:22">(<expr pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:13">c</name> <operator pos:start="121:15" pos:end="121:16">==</operator> <literal type="char" pos:start="121:18" pos:end="121:21">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="123:13" pos:end="123:18"><block_content pos:start="123:13" pos:end="123:18">

            <break pos:start="123:13" pos:end="123:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="125:9" pos:end="125:18"><expr pos:start="125:9" pos:end="125:17"><name pos:start="125:9" pos:end="125:15">typestr</name><operator pos:start="125:16" pos:end="125:17">++</operator></expr>;</expr_stmt>

        <switch pos:start="127:9" pos:end="549:9">switch<condition pos:start="127:15" pos:end="127:17">(<expr pos:start="127:16" pos:end="127:16"><name pos:start="127:16" pos:end="127:16">c</name></expr>)</condition> <block pos:start="127:19" pos:end="549:9">{<block_content pos:start="129:9" pos:end="547:22">

        <case pos:start="129:9" pos:end="129:17">case <expr pos:start="129:14" pos:end="129:16"><literal type="char" pos:start="129:14" pos:end="129:16">'F'</literal></expr>:</case>

        <case pos:start="131:9" pos:end="131:17">case <expr pos:start="131:14" pos:end="131:16"><literal type="char" pos:start="131:14" pos:end="131:16">'B'</literal></expr>:</case>

        <case pos:start="133:9" pos:end="133:17">case <expr pos:start="133:14" pos:end="133:16"><literal type="char" pos:start="133:14" pos:end="133:16">'s'</literal></expr>:</case>

            <block pos:start="135:13" pos:end="217:13">{<block_content pos:start="137:17" pos:end="215:38">

                <decl_stmt pos:start="137:17" pos:end="137:24"><decl pos:start="137:17" pos:end="137:23"><type pos:start="137:17" pos:end="137:19"><name pos:start="137:17" pos:end="137:19">int</name></type> <name pos:start="137:21" pos:end="137:23">ret</name></decl>;</decl_stmt>

                <decl_stmt pos:start="139:17" pos:end="139:26"><decl pos:start="139:17" pos:end="139:25"><type pos:start="139:17" pos:end="139:22"><name pos:start="139:17" pos:end="139:20">char</name> <modifier pos:start="139:22" pos:end="139:22">*</modifier></type><name pos:start="139:23" pos:end="139:25">str</name></decl>;</decl_stmt>



                <while pos:start="143:17" pos:end="145:24">while <condition pos:start="143:23" pos:end="143:40">(<expr pos:start="143:24" pos:end="143:39"><call pos:start="143:24" pos:end="143:39"><name pos:start="143:24" pos:end="143:35">qemu_isspace</name><argument_list pos:start="143:36" pos:end="143:39">(<argument pos:start="143:37" pos:end="143:38"><expr pos:start="143:37" pos:end="143:38"><operator pos:start="143:37" pos:end="143:37">*</operator><name pos:start="143:38" pos:end="143:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="145:21" pos:end="145:24"><block_content pos:start="145:21" pos:end="145:24">

                    <expr_stmt pos:start="145:21" pos:end="145:24"><expr pos:start="145:21" pos:end="145:23"><name pos:start="145:21" pos:end="145:21">p</name><operator pos:start="145:22" pos:end="145:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="147:17" pos:end="161:17"><if pos:start="147:17" pos:end="161:17">if <condition pos:start="147:20" pos:end="147:36">(<expr pos:start="147:21" pos:end="147:35"><operator pos:start="147:21" pos:end="147:21">*</operator><name pos:start="147:22" pos:end="147:28">typestr</name> <operator pos:start="147:30" pos:end="147:31">==</operator> <literal type="char" pos:start="147:33" pos:end="147:35">'?'</literal></expr>)</condition> <block pos:start="147:38" pos:end="161:17">{<block_content pos:start="149:21" pos:end="159:21">

                    <expr_stmt pos:start="149:21" pos:end="149:30"><expr pos:start="149:21" pos:end="149:29"><name pos:start="149:21" pos:end="149:27">typestr</name><operator pos:start="149:28" pos:end="149:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="151:21" pos:end="159:21"><if pos:start="151:21" pos:end="159:21">if <condition pos:start="151:24" pos:end="151:35">(<expr pos:start="151:25" pos:end="151:34"><operator pos:start="151:25" pos:end="151:25">*</operator><name pos:start="151:26" pos:end="151:26">p</name> <operator pos:start="151:28" pos:end="151:29">==</operator> <literal type="char" pos:start="151:31" pos:end="151:34">'\0'</literal></expr>)</condition> <block pos:start="151:37" pos:end="159:21">{<block_content pos:start="155:25" pos:end="157:37">

                        <comment type="block" pos:start="153:25" pos:end="153:63">/* no optional string: NULL argument */</comment>

                        <expr_stmt pos:start="155:25" pos:end="155:35"><expr pos:start="155:25" pos:end="155:34"><name pos:start="155:25" pos:end="155:27">str</name> <operator pos:start="155:29" pos:end="155:29">=</operator> <name pos:start="155:31" pos:end="155:34">NULL</name></expr>;</expr_stmt>

                        <goto pos:start="157:25" pos:end="157:37">goto <name pos:start="157:30" pos:end="157:36">add_str</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:52"><expr pos:start="163:17" pos:end="163:51"><name pos:start="163:17" pos:end="163:19">ret</name> <operator pos:start="163:21" pos:end="163:21">=</operator> <call pos:start="163:23" pos:end="163:51"><name pos:start="163:23" pos:end="163:29">get_str</name><argument_list pos:start="163:30" pos:end="163:51">(<argument pos:start="163:31" pos:end="163:33"><expr pos:start="163:31" pos:end="163:33"><name pos:start="163:31" pos:end="163:33">buf</name></expr></argument>, <argument pos:start="163:36" pos:end="163:46"><expr pos:start="163:36" pos:end="163:46"><sizeof pos:start="163:36" pos:end="163:46">sizeof<argument_list pos:start="163:42" pos:end="163:46">(<argument pos:start="163:43" pos:end="163:45"><expr pos:start="163:43" pos:end="163:45"><name pos:start="163:43" pos:end="163:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="163:49" pos:end="163:50"><expr pos:start="163:49" pos:end="163:50"><operator pos:start="163:49" pos:end="163:49">&amp;</operator><name pos:start="163:50" pos:end="163:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="165:17" pos:end="195:17"><if pos:start="165:17" pos:end="195:17">if <condition pos:start="165:20" pos:end="165:28">(<expr pos:start="165:21" pos:end="165:27"><name pos:start="165:21" pos:end="165:23">ret</name> <operator pos:start="165:25" pos:end="165:25">&lt;</operator> <literal type="number" pos:start="165:27" pos:end="165:27">0</literal></expr>)</condition> <block pos:start="165:30" pos:end="195:17">{<block_content pos:start="167:21" pos:end="193:30">

                    <switch pos:start="167:21" pos:end="191:21">switch<condition pos:start="167:27" pos:end="167:29">(<expr pos:start="167:28" pos:end="167:28"><name pos:start="167:28" pos:end="167:28">c</name></expr>)</condition> <block pos:start="167:31" pos:end="191:21">{<block_content pos:start="169:21" pos:end="189:30">

                    <case pos:start="169:21" pos:end="169:29">case <expr pos:start="169:26" pos:end="169:28"><literal type="char" pos:start="169:26" pos:end="169:28">'F'</literal></expr>:</case>

                        <expr_stmt pos:start="171:25" pos:end="173:48"><expr pos:start="171:25" pos:end="173:47"><call pos:start="171:25" pos:end="173:47"><name pos:start="171:25" pos:end="171:38">monitor_printf</name><argument_list pos:start="171:39" pos:end="173:47">(<argument pos:start="171:40" pos:end="171:42"><expr pos:start="171:40" pos:end="171:42"><name pos:start="171:40" pos:end="171:42">mon</name></expr></argument>, <argument pos:start="171:45" pos:end="171:69"><expr pos:start="171:45" pos:end="171:69"><literal type="string" pos:start="171:45" pos:end="171:69">"%s: filename expected\n"</literal></expr></argument>,

                                       <argument pos:start="173:40" pos:end="173:46"><expr pos:start="173:40" pos:end="173:46"><name pos:start="173:40" pos:end="173:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="175:25" pos:end="175:30">break;</break>

                    <case pos:start="177:21" pos:end="177:29">case <expr pos:start="177:26" pos:end="177:28"><literal type="char" pos:start="177:26" pos:end="177:28">'B'</literal></expr>:</case>

                        <expr_stmt pos:start="179:25" pos:end="181:48"><expr pos:start="179:25" pos:end="181:47"><call pos:start="179:25" pos:end="181:47"><name pos:start="179:25" pos:end="179:38">monitor_printf</name><argument_list pos:start="179:39" pos:end="181:47">(<argument pos:start="179:40" pos:end="179:42"><expr pos:start="179:40" pos:end="179:42"><name pos:start="179:40" pos:end="179:42">mon</name></expr></argument>, <argument pos:start="179:45" pos:end="179:78"><expr pos:start="179:45" pos:end="179:78"><literal type="string" pos:start="179:45" pos:end="179:78">"%s: block device name expected\n"</literal></expr></argument>,

                                       <argument pos:start="181:40" pos:end="181:46"><expr pos:start="181:40" pos:end="181:46"><name pos:start="181:40" pos:end="181:46">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="183:25" pos:end="183:30">break;</break>

                    <default pos:start="185:21" pos:end="185:28">default:</default>

                        <expr_stmt pos:start="187:25" pos:end="187:78"><expr pos:start="187:25" pos:end="187:77"><call pos:start="187:25" pos:end="187:77"><name pos:start="187:25" pos:end="187:38">monitor_printf</name><argument_list pos:start="187:39" pos:end="187:77">(<argument pos:start="187:40" pos:end="187:42"><expr pos:start="187:40" pos:end="187:42"><name pos:start="187:40" pos:end="187:42">mon</name></expr></argument>, <argument pos:start="187:45" pos:end="187:67"><expr pos:start="187:45" pos:end="187:67"><literal type="string" pos:start="187:45" pos:end="187:67">"%s: string expected\n"</literal></expr></argument>, <argument pos:start="187:70" pos:end="187:76"><expr pos:start="187:70" pos:end="187:76"><name pos:start="187:70" pos:end="187:76">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <break pos:start="189:25" pos:end="189:30">break;</break>

                    </block_content>}</block></switch>

                    <goto pos:start="193:21" pos:end="193:30">goto <name pos:start="193:26" pos:end="193:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="197:17" pos:end="197:51"><expr pos:start="197:17" pos:end="197:50"><name pos:start="197:17" pos:end="197:19">str</name> <operator pos:start="197:21" pos:end="197:21">=</operator> <call pos:start="197:23" pos:end="197:50"><name pos:start="197:23" pos:end="197:33">qemu_malloc</name><argument_list pos:start="197:34" pos:end="197:50">(<argument pos:start="197:35" pos:end="197:49"><expr pos:start="197:35" pos:end="197:49"><call pos:start="197:35" pos:end="197:45"><name pos:start="197:35" pos:end="197:40">strlen</name><argument_list pos:start="197:41" pos:end="197:45">(<argument pos:start="197:42" pos:end="197:44"><expr pos:start="197:42" pos:end="197:44"><name pos:start="197:42" pos:end="197:44">buf</name></expr></argument>)</argument_list></call> <operator pos:start="197:47" pos:end="197:47">+</operator> <literal type="number" pos:start="197:49" pos:end="197:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="199:17" pos:end="199:47"><expr pos:start="199:17" pos:end="199:46"><call pos:start="199:17" pos:end="199:46"><name pos:start="199:17" pos:end="199:23">pstrcpy</name><argument_list pos:start="199:24" pos:end="199:46">(<argument pos:start="199:25" pos:end="199:27"><expr pos:start="199:25" pos:end="199:27"><name pos:start="199:25" pos:end="199:27">str</name></expr></argument>, <argument pos:start="199:30" pos:end="199:40"><expr pos:start="199:30" pos:end="199:40"><sizeof pos:start="199:30" pos:end="199:40">sizeof<argument_list pos:start="199:36" pos:end="199:40">(<argument pos:start="199:37" pos:end="199:39"><expr pos:start="199:37" pos:end="199:39"><name pos:start="199:37" pos:end="199:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="199:43" pos:end="199:45"><expr pos:start="199:43" pos:end="199:45"><name pos:start="199:43" pos:end="199:45">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="201:17" pos:end="201:45"><expr pos:start="201:17" pos:end="201:44"><name pos:start="201:17" pos:end="201:38"><name pos:start="201:17" pos:end="201:29">str_allocated</name><index pos:start="201:30" pos:end="201:38">[<expr pos:start="201:31" pos:end="201:37"><name pos:start="201:31" pos:end="201:37">nb_args</name></expr>]</index></name> <operator pos:start="201:40" pos:end="201:40">=</operator> <name pos:start="201:42" pos:end="201:44">str</name></expr>;</expr_stmt>

            <label pos:start="203:13" pos:end="203:20"><name pos:start="203:13" pos:end="203:19">add_str</name>:</label>

                <if_stmt pos:start="205:17" pos:end="213:17"><if pos:start="205:17" pos:end="213:17">if <condition pos:start="205:20" pos:end="205:40">(<expr pos:start="205:21" pos:end="205:39"><name pos:start="205:21" pos:end="205:27">nb_args</name> <operator pos:start="205:29" pos:end="205:30">&gt;=</operator> <name pos:start="205:32" pos:end="205:39">MAX_ARGS</name></expr>)</condition> <block pos:start="205:42" pos:end="213:17">{<block_content pos:start="207:17" pos:end="211:30">

                <label pos:start="207:17" pos:end="207:27"><name pos:start="207:17" pos:end="207:26">error_args</name>:</label>

                    <expr_stmt pos:start="209:21" pos:end="209:77"><expr pos:start="209:21" pos:end="209:76"><call pos:start="209:21" pos:end="209:76"><name pos:start="209:21" pos:end="209:34">monitor_printf</name><argument_list pos:start="209:35" pos:end="209:76">(<argument pos:start="209:36" pos:end="209:38"><expr pos:start="209:36" pos:end="209:38"><name pos:start="209:36" pos:end="209:38">mon</name></expr></argument>, <argument pos:start="209:41" pos:end="209:66"><expr pos:start="209:41" pos:end="209:66"><literal type="string" pos:start="209:41" pos:end="209:66">"%s: too many arguments\n"</literal></expr></argument>, <argument pos:start="209:69" pos:end="209:75"><expr pos:start="209:69" pos:end="209:75"><name pos:start="209:69" pos:end="209:75">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="211:21" pos:end="211:30">goto <name pos:start="211:26" pos:end="211:29">fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="215:17" pos:end="215:38"><expr pos:start="215:17" pos:end="215:37"><name pos:start="215:17" pos:end="215:31"><name pos:start="215:17" pos:end="215:20">args</name><index pos:start="215:21" pos:end="215:31">[<expr pos:start="215:22" pos:end="215:30"><name pos:start="215:22" pos:end="215:28">nb_args</name><operator pos:start="215:29" pos:end="215:30">++</operator></expr>]</index></name> <operator pos:start="215:33" pos:end="215:33">=</operator> <name pos:start="215:35" pos:end="215:37">str</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="219:13" pos:end="219:18">break;</break>

        <case pos:start="221:9" pos:end="221:17">case <expr pos:start="221:14" pos:end="221:16"><literal type="char" pos:start="221:14" pos:end="221:16">'/'</literal></expr>:</case>

            <block pos:start="223:13" pos:end="379:13">{<block_content pos:start="225:17" pos:end="377:52">

                <decl_stmt pos:start="225:17" pos:end="225:40"><decl pos:start="225:17" pos:end="225:25"><type pos:start="225:17" pos:end="225:19"><name pos:start="225:17" pos:end="225:19">int</name></type> <name pos:start="225:21" pos:end="225:25">count</name></decl>, <decl pos:start="225:28" pos:end="225:33"><type ref="prev" pos:start="225:17" pos:end="225:19"/><name pos:start="225:28" pos:end="225:33">format</name></decl>, <decl pos:start="225:36" pos:end="225:39"><type ref="prev" pos:start="225:17" pos:end="225:19"/><name pos:start="225:36" pos:end="225:39">size</name></decl>;</decl_stmt>



                <while pos:start="229:17" pos:end="231:24">while <condition pos:start="229:23" pos:end="229:40">(<expr pos:start="229:24" pos:end="229:39"><call pos:start="229:24" pos:end="229:39"><name pos:start="229:24" pos:end="229:35">qemu_isspace</name><argument_list pos:start="229:36" pos:end="229:39">(<argument pos:start="229:37" pos:end="229:38"><expr pos:start="229:37" pos:end="229:38"><operator pos:start="229:37" pos:end="229:37">*</operator><name pos:start="229:38" pos:end="229:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="231:21" pos:end="231:24"><block_content pos:start="231:21" pos:end="231:24">

                    <expr_stmt pos:start="231:21" pos:end="231:24"><expr pos:start="231:21" pos:end="231:23"><name pos:start="231:21" pos:end="231:21">p</name><operator pos:start="231:22" pos:end="231:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="233:17" pos:end="367:17"><if pos:start="233:17" pos:end="351:17">if <condition pos:start="233:20" pos:end="233:30">(<expr pos:start="233:21" pos:end="233:29"><operator pos:start="233:21" pos:end="233:21">*</operator><name pos:start="233:22" pos:end="233:22">p</name> <operator pos:start="233:24" pos:end="233:25">==</operator> <literal type="char" pos:start="233:27" pos:end="233:29">'/'</literal></expr>)</condition> <block pos:start="233:32" pos:end="351:17">{<block_content pos:start="237:21" pos:end="349:48">

                    <comment type="block" pos:start="235:21" pos:end="235:38">/* format found */</comment>

                    <expr_stmt pos:start="237:21" pos:end="237:24"><expr pos:start="237:21" pos:end="237:23"><name pos:start="237:21" pos:end="237:21">p</name><operator pos:start="237:22" pos:end="237:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="239:21" pos:end="239:30"><expr pos:start="239:21" pos:end="239:29"><name pos:start="239:21" pos:end="239:25">count</name> <operator pos:start="239:27" pos:end="239:27">=</operator> <literal type="number" pos:start="239:29" pos:end="239:29">1</literal></expr>;</expr_stmt>

                    <if_stmt pos:start="241:21" pos:end="253:21"><if pos:start="241:21" pos:end="253:21">if <condition pos:start="241:24" pos:end="241:41">(<expr pos:start="241:25" pos:end="241:40"><call pos:start="241:25" pos:end="241:40"><name pos:start="241:25" pos:end="241:36">qemu_isdigit</name><argument_list pos:start="241:37" pos:end="241:40">(<argument pos:start="241:38" pos:end="241:39"><expr pos:start="241:38" pos:end="241:39"><operator pos:start="241:38" pos:end="241:38">*</operator><name pos:start="241:39" pos:end="241:39">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="241:43" pos:end="253:21">{<block_content pos:start="243:25" pos:end="251:25">

                        <expr_stmt pos:start="243:25" pos:end="243:34"><expr pos:start="243:25" pos:end="243:33"><name pos:start="243:25" pos:end="243:29">count</name> <operator pos:start="243:31" pos:end="243:31">=</operator> <literal type="number" pos:start="243:33" pos:end="243:33">0</literal></expr>;</expr_stmt>

                        <while pos:start="245:25" pos:end="251:25">while <condition pos:start="245:31" pos:end="245:48">(<expr pos:start="245:32" pos:end="245:47"><call pos:start="245:32" pos:end="245:47"><name pos:start="245:32" pos:end="245:43">qemu_isdigit</name><argument_list pos:start="245:44" pos:end="245:47">(<argument pos:start="245:45" pos:end="245:46"><expr pos:start="245:45" pos:end="245:46"><operator pos:start="245:45" pos:end="245:45">*</operator><name pos:start="245:46" pos:end="245:46">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="245:50" pos:end="251:25">{<block_content pos:start="247:29" pos:end="249:32">

                            <expr_stmt pos:start="247:29" pos:end="247:60"><expr pos:start="247:29" pos:end="247:59"><name pos:start="247:29" pos:end="247:33">count</name> <operator pos:start="247:35" pos:end="247:35">=</operator> <name pos:start="247:37" pos:end="247:41">count</name> <operator pos:start="247:43" pos:end="247:43">*</operator> <literal type="number" pos:start="247:45" pos:end="247:48">10</literal> <operator pos:start="247:48" pos:end="247:48">+</operator> <operator pos:start="247:50" pos:end="247:50">(</operator><operator pos:start="247:51" pos:end="247:51">*</operator><name pos:start="247:52" pos:end="247:52">p</name> <operator pos:start="247:54" pos:end="247:54">-</operator> <literal type="char" pos:start="247:56" pos:end="247:58">'0'</literal><operator pos:start="247:59" pos:end="247:59">)</operator></expr>;</expr_stmt>

                            <expr_stmt pos:start="249:29" pos:end="249:32"><expr pos:start="249:29" pos:end="249:31"><name pos:start="249:29" pos:end="249:29">p</name><operator pos:start="249:30" pos:end="249:31">++</operator></expr>;</expr_stmt>

                        </block_content>}</block></while>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="255:21" pos:end="255:30"><expr pos:start="255:21" pos:end="255:29"><name pos:start="255:21" pos:end="255:24">size</name> <operator pos:start="255:26" pos:end="255:26">=</operator> <operator pos:start="255:28" pos:end="255:28">-</operator><literal type="number" pos:start="255:29" pos:end="255:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="257:21" pos:end="257:32"><expr pos:start="257:21" pos:end="257:31"><name pos:start="257:21" pos:end="257:26">format</name> <operator pos:start="257:28" pos:end="257:28">=</operator> <operator pos:start="257:30" pos:end="257:30">-</operator><literal type="number" pos:start="257:31" pos:end="257:31">1</literal></expr>;</expr_stmt>

                    <for pos:start="259:21" pos:end="319:21">for<control pos:start="259:24" pos:end="259:27">(<init pos:start="259:25" pos:end="259:25">;</init><condition pos:start="259:26" pos:end="259:26">;</condition><incr/>)</control> <block pos:start="259:29" pos:end="319:21">{<block_content pos:start="261:25" pos:end="317:25">

                        <switch pos:start="261:25" pos:end="317:25">switch<condition pos:start="261:31" pos:end="261:34">(<expr pos:start="261:32" pos:end="261:33"><operator pos:start="261:32" pos:end="261:32">*</operator><name pos:start="261:33" pos:end="261:33">p</name></expr>)</condition> <block pos:start="261:36" pos:end="317:25">{<block_content pos:start="263:25" pos:end="315:38">

                        <case pos:start="263:25" pos:end="263:33">case <expr pos:start="263:30" pos:end="263:32"><literal type="char" pos:start="263:30" pos:end="263:32">'o'</literal></expr>:</case>

                        <case pos:start="265:25" pos:end="265:33">case <expr pos:start="265:30" pos:end="265:32"><literal type="char" pos:start="265:30" pos:end="265:32">'d'</literal></expr>:</case>

                        <case pos:start="267:25" pos:end="267:33">case <expr pos:start="267:30" pos:end="267:32"><literal type="char" pos:start="267:30" pos:end="267:32">'u'</literal></expr>:</case>

                        <case pos:start="269:25" pos:end="269:33">case <expr pos:start="269:30" pos:end="269:32"><literal type="char" pos:start="269:30" pos:end="269:32">'x'</literal></expr>:</case>

                        <case pos:start="271:25" pos:end="271:33">case <expr pos:start="271:30" pos:end="271:32"><literal type="char" pos:start="271:30" pos:end="271:32">'i'</literal></expr>:</case>

                        <case pos:start="273:25" pos:end="273:33">case <expr pos:start="273:30" pos:end="273:32"><literal type="char" pos:start="273:30" pos:end="273:32">'c'</literal></expr>:</case>

                            <expr_stmt pos:start="275:29" pos:end="275:42"><expr pos:start="275:29" pos:end="275:41"><name pos:start="275:29" pos:end="275:34">format</name> <operator pos:start="275:36" pos:end="275:36">=</operator> <operator pos:start="275:38" pos:end="275:38">*</operator><name pos:start="275:39" pos:end="275:39">p</name><operator pos:start="275:40" pos:end="275:41">++</operator></expr>;</expr_stmt>

                            <break pos:start="277:29" pos:end="277:34">break;</break>

                        <case pos:start="279:25" pos:end="279:33">case <expr pos:start="279:30" pos:end="279:32"><literal type="char" pos:start="279:30" pos:end="279:32">'b'</literal></expr>:</case>

                            <expr_stmt pos:start="281:29" pos:end="281:37"><expr pos:start="281:29" pos:end="281:36"><name pos:start="281:29" pos:end="281:32">size</name> <operator pos:start="281:34" pos:end="281:34">=</operator> <literal type="number" pos:start="281:36" pos:end="281:36">1</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="283:29" pos:end="283:32"><expr pos:start="283:29" pos:end="283:31"><name pos:start="283:29" pos:end="283:29">p</name><operator pos:start="283:30" pos:end="283:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="285:29" pos:end="285:34">break;</break>

                        <case pos:start="287:25" pos:end="287:33">case <expr pos:start="287:30" pos:end="287:32"><literal type="char" pos:start="287:30" pos:end="287:32">'h'</literal></expr>:</case>

                            <expr_stmt pos:start="289:29" pos:end="289:37"><expr pos:start="289:29" pos:end="289:36"><name pos:start="289:29" pos:end="289:32">size</name> <operator pos:start="289:34" pos:end="289:34">=</operator> <literal type="number" pos:start="289:36" pos:end="289:36">2</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="291:29" pos:end="291:32"><expr pos:start="291:29" pos:end="291:31"><name pos:start="291:29" pos:end="291:29">p</name><operator pos:start="291:30" pos:end="291:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="293:29" pos:end="293:34">break;</break>

                        <case pos:start="295:25" pos:end="295:33">case <expr pos:start="295:30" pos:end="295:32"><literal type="char" pos:start="295:30" pos:end="295:32">'w'</literal></expr>:</case>

                            <expr_stmt pos:start="297:29" pos:end="297:37"><expr pos:start="297:29" pos:end="297:36"><name pos:start="297:29" pos:end="297:32">size</name> <operator pos:start="297:34" pos:end="297:34">=</operator> <literal type="number" pos:start="297:36" pos:end="297:36">4</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="299:29" pos:end="299:32"><expr pos:start="299:29" pos:end="299:31"><name pos:start="299:29" pos:end="299:29">p</name><operator pos:start="299:30" pos:end="299:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="301:29" pos:end="301:34">break;</break>

                        <case pos:start="303:25" pos:end="303:33">case <expr pos:start="303:30" pos:end="303:32"><literal type="char" pos:start="303:30" pos:end="303:32">'g'</literal></expr>:</case>

                        <case pos:start="305:25" pos:end="305:33">case <expr pos:start="305:30" pos:end="305:32"><literal type="char" pos:start="305:30" pos:end="305:32">'L'</literal></expr>:</case>

                            <expr_stmt pos:start="307:29" pos:end="307:37"><expr pos:start="307:29" pos:end="307:36"><name pos:start="307:29" pos:end="307:32">size</name> <operator pos:start="307:34" pos:end="307:34">=</operator> <literal type="number" pos:start="307:36" pos:end="307:36">8</literal></expr>;</expr_stmt>

                            <expr_stmt pos:start="309:29" pos:end="309:32"><expr pos:start="309:29" pos:end="309:31"><name pos:start="309:29" pos:end="309:29">p</name><operator pos:start="309:30" pos:end="309:31">++</operator></expr>;</expr_stmt>

                            <break pos:start="311:29" pos:end="311:34">break;</break>

                        <default pos:start="313:25" pos:end="313:32">default:</default>

                            <goto pos:start="315:29" pos:end="315:38">goto <name pos:start="315:34" pos:end="315:37">next</name>;</goto>

                        </block_content>}</block></switch>

                    </block_content>}</block></for>

                <label pos:start="321:17" pos:end="321:21"><name pos:start="321:17" pos:end="321:20">next</name>:</label>

                    <if_stmt pos:start="323:21" pos:end="331:21"><if pos:start="323:21" pos:end="331:21">if <condition pos:start="323:24" pos:end="323:56">(<expr pos:start="323:25" pos:end="323:55"><operator pos:start="323:25" pos:end="323:25">*</operator><name pos:start="323:26" pos:end="323:26">p</name> <operator pos:start="323:28" pos:end="323:29">!=</operator> <literal type="char" pos:start="323:31" pos:end="323:34">'\0'</literal> <operator pos:start="323:36" pos:end="323:37">&amp;&amp;</operator> <operator pos:start="323:39" pos:end="323:39">!</operator><call pos:start="323:40" pos:end="323:55"><name pos:start="323:40" pos:end="323:51">qemu_isspace</name><argument_list pos:start="323:52" pos:end="323:55">(<argument pos:start="323:53" pos:end="323:54"><expr pos:start="323:53" pos:end="323:54"><operator pos:start="323:53" pos:end="323:53">*</operator><name pos:start="323:54" pos:end="323:54">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="323:58" pos:end="331:21">{<block_content pos:start="325:25" pos:end="329:34">

                        <expr_stmt pos:start="325:25" pos:end="327:43"><expr pos:start="325:25" pos:end="327:42"><call pos:start="325:25" pos:end="327:42"><name pos:start="325:25" pos:end="325:38">monitor_printf</name><argument_list pos:start="325:39" pos:end="327:42">(<argument pos:start="325:40" pos:end="325:42"><expr pos:start="325:40" pos:end="325:42"><name pos:start="325:40" pos:end="325:42">mon</name></expr></argument>, <argument pos:start="325:45" pos:end="325:76"><expr pos:start="325:45" pos:end="325:76"><literal type="string" pos:start="325:45" pos:end="325:76">"invalid char in format: '%c'\n"</literal></expr></argument>,

                                       <argument pos:start="327:40" pos:end="327:41"><expr pos:start="327:40" pos:end="327:41"><operator pos:start="327:40" pos:end="327:40">*</operator><name pos:start="327:41" pos:end="327:41">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="329:25" pos:end="329:34">goto <name pos:start="329:30" pos:end="329:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <if_stmt pos:start="333:21" pos:end="335:52"><if pos:start="333:21" pos:end="335:52">if <condition pos:start="333:24" pos:end="333:35">(<expr pos:start="333:25" pos:end="333:34"><name pos:start="333:25" pos:end="333:30">format</name> <operator pos:start="333:32" pos:end="333:32">&lt;</operator> <literal type="number" pos:start="333:34" pos:end="333:34">0</literal></expr>)</condition><block type="pseudo" pos:start="335:25" pos:end="335:52"><block_content pos:start="335:25" pos:end="335:52">

                        <expr_stmt pos:start="335:25" pos:end="335:52"><expr pos:start="335:25" pos:end="335:51"><name pos:start="335:25" pos:end="335:30">format</name> <operator pos:start="335:32" pos:end="335:32">=</operator> <name pos:start="335:34" pos:end="335:51">default_fmt_format</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <if_stmt pos:start="337:21" pos:end="347:21"><if pos:start="337:21" pos:end="347:21">if <condition pos:start="337:24" pos:end="337:38">(<expr pos:start="337:25" pos:end="337:37"><name pos:start="337:25" pos:end="337:30">format</name> <operator pos:start="337:32" pos:end="337:33">!=</operator> <literal type="char" pos:start="337:35" pos:end="337:37">'i'</literal></expr>)</condition> <block pos:start="337:40" pos:end="347:21">{<block_content pos:start="341:25" pos:end="345:48">

                        <comment type="block" pos:start="339:25" pos:end="339:77">/* for 'i', not specifying a size gives -1 as size */</comment>

                        <if_stmt pos:start="341:25" pos:end="343:52"><if pos:start="341:25" pos:end="343:52">if <condition pos:start="341:28" pos:end="341:37">(<expr pos:start="341:29" pos:end="341:36"><name pos:start="341:29" pos:end="341:32">size</name> <operator pos:start="341:34" pos:end="341:34">&lt;</operator> <literal type="number" pos:start="341:36" pos:end="341:36">0</literal></expr>)</condition><block type="pseudo" pos:start="343:29" pos:end="343:52"><block_content pos:start="343:29" pos:end="343:52">

                            <expr_stmt pos:start="343:29" pos:end="343:52"><expr pos:start="343:29" pos:end="343:51"><name pos:start="343:29" pos:end="343:32">size</name> <operator pos:start="343:34" pos:end="343:34">=</operator> <name pos:start="343:36" pos:end="343:51">default_fmt_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="345:25" pos:end="345:48"><expr pos:start="345:25" pos:end="345:47"><name pos:start="345:25" pos:end="345:40">default_fmt_size</name> <operator pos:start="345:42" pos:end="345:42">=</operator> <name pos:start="345:44" pos:end="345:47">size</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="349:21" pos:end="349:48"><expr pos:start="349:21" pos:end="349:47"><name pos:start="349:21" pos:end="349:38">default_fmt_format</name> <operator pos:start="349:40" pos:end="349:40">=</operator> <name pos:start="349:42" pos:end="349:47">format</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="351:19" pos:end="367:17">else <block pos:start="351:24" pos:end="367:17">{<block_content pos:start="353:21" pos:end="365:21">

                    <expr_stmt pos:start="353:21" pos:end="353:30"><expr pos:start="353:21" pos:end="353:29"><name pos:start="353:21" pos:end="353:25">count</name> <operator pos:start="353:27" pos:end="353:27">=</operator> <literal type="number" pos:start="353:29" pos:end="353:29">1</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="355:21" pos:end="355:48"><expr pos:start="355:21" pos:end="355:47"><name pos:start="355:21" pos:end="355:26">format</name> <operator pos:start="355:28" pos:end="355:28">=</operator> <name pos:start="355:30" pos:end="355:47">default_fmt_format</name></expr>;</expr_stmt>

                    <if_stmt pos:start="357:21" pos:end="365:21"><if pos:start="357:21" pos:end="361:21">if <condition pos:start="357:24" pos:end="357:38">(<expr pos:start="357:25" pos:end="357:37"><name pos:start="357:25" pos:end="357:30">format</name> <operator pos:start="357:32" pos:end="357:33">!=</operator> <literal type="char" pos:start="357:35" pos:end="357:37">'i'</literal></expr>)</condition> <block pos:start="357:40" pos:end="361:21">{<block_content pos:start="359:25" pos:end="359:48">

                        <expr_stmt pos:start="359:25" pos:end="359:48"><expr pos:start="359:25" pos:end="359:47"><name pos:start="359:25" pos:end="359:28">size</name> <operator pos:start="359:30" pos:end="359:30">=</operator> <name pos:start="359:32" pos:end="359:47">default_fmt_size</name></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="361:23" pos:end="365:21">else <block pos:start="361:28" pos:end="365:21">{<block_content pos:start="363:25" pos:end="363:34">

                        <expr_stmt pos:start="363:25" pos:end="363:34"><expr pos:start="363:25" pos:end="363:33"><name pos:start="363:25" pos:end="363:28">size</name> <operator pos:start="363:30" pos:end="363:30">=</operator> <operator pos:start="363:32" pos:end="363:32">-</operator><literal type="number" pos:start="363:33" pos:end="363:33">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></else></if_stmt>

                <if_stmt pos:start="369:17" pos:end="371:36"><if pos:start="369:17" pos:end="371:36">if <condition pos:start="369:20" pos:end="369:43">(<expr pos:start="369:21" pos:end="369:42"><name pos:start="369:21" pos:end="369:27">nb_args</name> <operator pos:start="369:29" pos:end="369:29">+</operator> <literal type="number" pos:start="369:31" pos:end="369:31">3</literal> <operator pos:start="369:33" pos:end="369:33">&gt;</operator> <name pos:start="369:35" pos:end="369:42">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="371:21" pos:end="371:36"><block_content pos:start="371:21" pos:end="371:36">

                    <goto pos:start="371:21" pos:end="371:36">goto <name pos:start="371:26" pos:end="371:35">error_args</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="373:17" pos:end="373:53"><expr pos:start="373:17" pos:end="373:52"><name pos:start="373:17" pos:end="373:31"><name pos:start="373:17" pos:end="373:20">args</name><index pos:start="373:21" pos:end="373:31">[<expr pos:start="373:22" pos:end="373:30"><name pos:start="373:22" pos:end="373:28">nb_args</name><operator pos:start="373:29" pos:end="373:30">++</operator></expr>]</index></name> <operator pos:start="373:33" pos:end="373:33">=</operator> <operator pos:start="373:35" pos:end="373:35">(</operator><name pos:start="373:36" pos:end="373:39">void</name><operator pos:start="373:40" pos:end="373:40">*</operator><operator pos:start="373:41" pos:end="373:41">)</operator><operator pos:start="373:42" pos:end="373:42">(</operator><name pos:start="373:43" pos:end="373:46">long</name><operator pos:start="373:47" pos:end="373:47">)</operator><name pos:start="373:48" pos:end="373:52">count</name></expr>;</expr_stmt>

                <expr_stmt pos:start="375:17" pos:end="375:54"><expr pos:start="375:17" pos:end="375:53"><name pos:start="375:17" pos:end="375:31"><name pos:start="375:17" pos:end="375:20">args</name><index pos:start="375:21" pos:end="375:31">[<expr pos:start="375:22" pos:end="375:30"><name pos:start="375:22" pos:end="375:28">nb_args</name><operator pos:start="375:29" pos:end="375:30">++</operator></expr>]</index></name> <operator pos:start="375:33" pos:end="375:33">=</operator> <operator pos:start="375:35" pos:end="375:35">(</operator><name pos:start="375:36" pos:end="375:39">void</name><operator pos:start="375:40" pos:end="375:40">*</operator><operator pos:start="375:41" pos:end="375:41">)</operator><operator pos:start="375:42" pos:end="375:42">(</operator><name pos:start="375:43" pos:end="375:46">long</name><operator pos:start="375:47" pos:end="375:47">)</operator><name pos:start="375:48" pos:end="375:53">format</name></expr>;</expr_stmt>

                <expr_stmt pos:start="377:17" pos:end="377:52"><expr pos:start="377:17" pos:end="377:51"><name pos:start="377:17" pos:end="377:31"><name pos:start="377:17" pos:end="377:20">args</name><index pos:start="377:21" pos:end="377:31">[<expr pos:start="377:22" pos:end="377:30"><name pos:start="377:22" pos:end="377:28">nb_args</name><operator pos:start="377:29" pos:end="377:30">++</operator></expr>]</index></name> <operator pos:start="377:33" pos:end="377:33">=</operator> <operator pos:start="377:35" pos:end="377:35">(</operator><name pos:start="377:36" pos:end="377:39">void</name><operator pos:start="377:40" pos:end="377:40">*</operator><operator pos:start="377:41" pos:end="377:41">)</operator><operator pos:start="377:42" pos:end="377:42">(</operator><name pos:start="377:43" pos:end="377:46">long</name><operator pos:start="377:47" pos:end="377:47">)</operator><name pos:start="377:48" pos:end="377:51">size</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="381:13" pos:end="381:18">break;</break>

        <case pos:start="383:9" pos:end="383:17">case <expr pos:start="383:14" pos:end="383:16"><literal type="char" pos:start="383:14" pos:end="383:16">'i'</literal></expr>:</case>

        <case pos:start="385:9" pos:end="385:17">case <expr pos:start="385:14" pos:end="385:16"><literal type="char" pos:start="385:14" pos:end="385:16">'l'</literal></expr>:</case>

            <block pos:start="387:13" pos:end="485:13">{<block_content pos:start="389:17" pos:end="483:17">

                <decl_stmt pos:start="389:17" pos:end="389:28"><decl pos:start="389:17" pos:end="389:27"><type pos:start="389:17" pos:end="389:23"><name pos:start="389:17" pos:end="389:23">int64_t</name></type> <name pos:start="389:25" pos:end="389:27">val</name></decl>;</decl_stmt>



                <while pos:start="393:17" pos:end="395:24">while <condition pos:start="393:23" pos:end="393:40">(<expr pos:start="393:24" pos:end="393:39"><call pos:start="393:24" pos:end="393:39"><name pos:start="393:24" pos:end="393:35">qemu_isspace</name><argument_list pos:start="393:36" pos:end="393:39">(<argument pos:start="393:37" pos:end="393:38"><expr pos:start="393:37" pos:end="393:38"><operator pos:start="393:37" pos:end="393:37">*</operator><name pos:start="393:38" pos:end="393:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="395:21" pos:end="395:24"><block_content pos:start="395:21" pos:end="395:24">

                    <expr_stmt pos:start="395:21" pos:end="395:24"><expr pos:start="395:21" pos:end="395:23"><name pos:start="395:21" pos:end="395:21">p</name><operator pos:start="395:22" pos:end="395:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <if_stmt pos:start="397:17" pos:end="449:17"><if pos:start="397:17" pos:end="449:17">if <condition pos:start="397:20" pos:end="397:55">(<expr pos:start="397:21" pos:end="397:54"><operator pos:start="397:21" pos:end="397:21">*</operator><name pos:start="397:22" pos:end="397:28">typestr</name> <operator pos:start="397:30" pos:end="397:31">==</operator> <literal type="char" pos:start="397:33" pos:end="397:35">'?'</literal> <operator pos:start="397:37" pos:end="397:38">||</operator> <operator pos:start="397:40" pos:end="397:40">*</operator><name pos:start="397:41" pos:end="397:47">typestr</name> <operator pos:start="397:49" pos:end="397:50">==</operator> <literal type="char" pos:start="397:52" pos:end="397:54">'.'</literal></expr>)</condition> <block pos:start="397:57" pos:end="449:17">{<block_content pos:start="399:21" pos:end="447:21">

                    <if_stmt pos:start="399:21" pos:end="427:21"><if pos:start="399:21" pos:end="409:21">if <condition pos:start="399:24" pos:end="399:40">(<expr pos:start="399:25" pos:end="399:39"><operator pos:start="399:25" pos:end="399:25">*</operator><name pos:start="399:26" pos:end="399:32">typestr</name> <operator pos:start="399:34" pos:end="399:35">==</operator> <literal type="char" pos:start="399:37" pos:end="399:39">'?'</literal></expr>)</condition> <block pos:start="399:42" pos:end="409:21">{<block_content pos:start="401:25" pos:end="407:40">

                        <if_stmt pos:start="401:25" pos:end="407:40"><if pos:start="401:25" pos:end="403:40">if <condition pos:start="401:28" pos:end="401:39">(<expr pos:start="401:29" pos:end="401:38"><operator pos:start="401:29" pos:end="401:29">*</operator><name pos:start="401:30" pos:end="401:30">p</name> <operator pos:start="401:32" pos:end="401:33">==</operator> <literal type="char" pos:start="401:35" pos:end="401:38">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="403:29" pos:end="403:40"><block_content pos:start="403:29" pos:end="403:40">

                            <expr_stmt pos:start="403:29" pos:end="403:40"><expr pos:start="403:29" pos:end="403:39"><name pos:start="403:29" pos:end="403:35">has_arg</name> <operator pos:start="403:37" pos:end="403:37">=</operator> <literal type="number" pos:start="403:39" pos:end="403:39">0</literal></expr>;</expr_stmt></block_content></block></if>

                        <else pos:start="405:25" pos:end="407:40">else<block type="pseudo" pos:start="407:29" pos:end="407:40"><block_content pos:start="407:29" pos:end="407:40">

                            <expr_stmt pos:start="407:29" pos:end="407:40"><expr pos:start="407:29" pos:end="407:39"><name pos:start="407:29" pos:end="407:35">has_arg</name> <operator pos:start="407:37" pos:end="407:37">=</operator> <literal type="number" pos:start="407:39" pos:end="407:39">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    </block_content>}</block></if> <else pos:start="409:23" pos:end="427:21">else <block pos:start="409:28" pos:end="427:21">{<block_content pos:start="411:25" pos:end="425:25">

                        <if_stmt pos:start="411:25" pos:end="425:25"><if pos:start="411:25" pos:end="421:25">if <condition pos:start="411:28" pos:end="411:38">(<expr pos:start="411:29" pos:end="411:37"><operator pos:start="411:29" pos:end="411:29">*</operator><name pos:start="411:30" pos:end="411:30">p</name> <operator pos:start="411:32" pos:end="411:33">==</operator> <literal type="char" pos:start="411:35" pos:end="411:37">'.'</literal></expr>)</condition> <block pos:start="411:40" pos:end="421:25">{<block_content pos:start="413:29" pos:end="419:40">

                            <expr_stmt pos:start="413:29" pos:end="413:32"><expr pos:start="413:29" pos:end="413:31"><name pos:start="413:29" pos:end="413:29">p</name><operator pos:start="413:30" pos:end="413:31">++</operator></expr>;</expr_stmt>

                            <while pos:start="415:29" pos:end="417:36">while <condition pos:start="415:35" pos:end="415:52">(<expr pos:start="415:36" pos:end="415:51"><call pos:start="415:36" pos:end="415:51"><name pos:start="415:36" pos:end="415:47">qemu_isspace</name><argument_list pos:start="415:48" pos:end="415:51">(<argument pos:start="415:49" pos:end="415:50"><expr pos:start="415:49" pos:end="415:50"><operator pos:start="415:49" pos:end="415:49">*</operator><name pos:start="415:50" pos:end="415:50">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="417:33" pos:end="417:36"><block_content pos:start="417:33" pos:end="417:36">

                                <expr_stmt pos:start="417:33" pos:end="417:36"><expr pos:start="417:33" pos:end="417:35"><name pos:start="417:33" pos:end="417:33">p</name><operator pos:start="417:34" pos:end="417:35">++</operator></expr>;</expr_stmt></block_content></block></while>

                            <expr_stmt pos:start="419:29" pos:end="419:40"><expr pos:start="419:29" pos:end="419:39"><name pos:start="419:29" pos:end="419:35">has_arg</name> <operator pos:start="419:37" pos:end="419:37">=</operator> <literal type="number" pos:start="419:39" pos:end="419:39">1</literal></expr>;</expr_stmt>

                        </block_content>}</block></if> <else pos:start="421:27" pos:end="425:25">else <block pos:start="421:32" pos:end="425:25">{<block_content pos:start="423:29" pos:end="423:40">

                            <expr_stmt pos:start="423:29" pos:end="423:40"><expr pos:start="423:29" pos:end="423:39"><name pos:start="423:29" pos:end="423:35">has_arg</name> <operator pos:start="423:37" pos:end="423:37">=</operator> <literal type="number" pos:start="423:39" pos:end="423:39">0</literal></expr>;</expr_stmt>

                        </block_content>}</block></else></if_stmt>

                    </block_content>}</block></else></if_stmt>

                    <expr_stmt pos:start="429:21" pos:end="429:30"><expr pos:start="429:21" pos:end="429:29"><name pos:start="429:21" pos:end="429:27">typestr</name><operator pos:start="429:28" pos:end="429:29">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="431:21" pos:end="433:40"><if pos:start="431:21" pos:end="433:40">if <condition pos:start="431:24" pos:end="431:44">(<expr pos:start="431:25" pos:end="431:43"><name pos:start="431:25" pos:end="431:31">nb_args</name> <operator pos:start="431:33" pos:end="431:34">&gt;=</operator> <name pos:start="431:36" pos:end="431:43">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="433:25" pos:end="433:40"><block_content pos:start="433:25" pos:end="433:40">

                        <goto pos:start="433:25" pos:end="433:40">goto <name pos:start="433:30" pos:end="433:39">error_args</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="435:21" pos:end="435:60"><expr pos:start="435:21" pos:end="435:59"><name pos:start="435:21" pos:end="435:35"><name pos:start="435:21" pos:end="435:24">args</name><index pos:start="435:25" pos:end="435:35">[<expr pos:start="435:26" pos:end="435:34"><name pos:start="435:26" pos:end="435:32">nb_args</name><operator pos:start="435:33" pos:end="435:34">++</operator></expr>]</index></name> <operator pos:start="435:37" pos:end="435:37">=</operator> <operator pos:start="435:39" pos:end="435:39">(</operator><name pos:start="435:40" pos:end="435:43">void</name> <operator pos:start="435:45" pos:end="435:45">*</operator><operator pos:start="435:46" pos:end="435:46">)</operator><operator pos:start="435:47" pos:end="435:47">(</operator><name pos:start="435:48" pos:end="435:51">long</name><operator pos:start="435:52" pos:end="435:52">)</operator><name pos:start="435:53" pos:end="435:59">has_arg</name></expr>;</expr_stmt>

                    <if_stmt pos:start="437:21" pos:end="447:21"><if pos:start="437:21" pos:end="447:21">if <condition pos:start="437:24" pos:end="437:33">(<expr pos:start="437:25" pos:end="437:32"><operator pos:start="437:25" pos:end="437:25">!</operator><name pos:start="437:26" pos:end="437:32">has_arg</name></expr>)</condition> <block pos:start="437:35" pos:end="447:21">{<block_content pos:start="439:25" pos:end="445:37">

                        <if_stmt pos:start="439:25" pos:end="441:44"><if pos:start="439:25" pos:end="441:44">if <condition pos:start="439:28" pos:end="439:48">(<expr pos:start="439:29" pos:end="439:47"><name pos:start="439:29" pos:end="439:35">nb_args</name> <operator pos:start="439:37" pos:end="439:38">&gt;=</operator> <name pos:start="439:40" pos:end="439:47">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="441:29" pos:end="441:44"><block_content pos:start="441:29" pos:end="441:44">

                            <goto pos:start="441:29" pos:end="441:44">goto <name pos:start="441:34" pos:end="441:43">error_args</name>;</goto></block_content></block></if></if_stmt>

                        <expr_stmt pos:start="443:25" pos:end="443:33"><expr pos:start="443:25" pos:end="443:32"><name pos:start="443:25" pos:end="443:27">val</name> <operator pos:start="443:29" pos:end="443:29">=</operator> <operator pos:start="443:31" pos:end="443:31">-</operator><literal type="number" pos:start="443:32" pos:end="443:32">1</literal></expr>;</expr_stmt>

                        <goto pos:start="445:25" pos:end="445:37">goto <name pos:start="445:30" pos:end="445:36">add_num</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="451:17" pos:end="453:30"><if pos:start="451:17" pos:end="453:30">if <condition pos:start="451:20" pos:end="451:44">(<expr pos:start="451:21" pos:end="451:43"><call pos:start="451:21" pos:end="451:43"><name pos:start="451:21" pos:end="451:28">get_expr</name><argument_list pos:start="451:29" pos:end="451:43">(<argument pos:start="451:30" pos:end="451:32"><expr pos:start="451:30" pos:end="451:32"><name pos:start="451:30" pos:end="451:32">mon</name></expr></argument>, <argument pos:start="451:35" pos:end="451:38"><expr pos:start="451:35" pos:end="451:38"><operator pos:start="451:35" pos:end="451:35">&amp;</operator><name pos:start="451:36" pos:end="451:38">val</name></expr></argument>, <argument pos:start="451:41" pos:end="451:42"><expr pos:start="451:41" pos:end="451:42"><operator pos:start="451:41" pos:end="451:41">&amp;</operator><name pos:start="451:42" pos:end="451:42">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="453:21" pos:end="453:30"><block_content pos:start="453:21" pos:end="453:30">

                    <goto pos:start="453:21" pos:end="453:30">goto <name pos:start="453:26" pos:end="453:29">fail</name>;</goto></block_content></block></if></if_stmt>

            <label pos:start="455:13" pos:end="455:20"><name pos:start="455:13" pos:end="455:19">add_num</name>:</label>

                <if_stmt pos:start="457:17" pos:end="483:17"><if pos:start="457:17" pos:end="465:17">if <condition pos:start="457:20" pos:end="457:29">(<expr pos:start="457:21" pos:end="457:28"><name pos:start="457:21" pos:end="457:21">c</name> <operator pos:start="457:23" pos:end="457:24">==</operator> <literal type="char" pos:start="457:26" pos:end="457:28">'i'</literal></expr>)</condition> <block pos:start="457:31" pos:end="465:17">{<block_content pos:start="459:21" pos:end="463:56">

                    <if_stmt pos:start="459:21" pos:end="461:40"><if pos:start="459:21" pos:end="461:40">if <condition pos:start="459:24" pos:end="459:44">(<expr pos:start="459:25" pos:end="459:43"><name pos:start="459:25" pos:end="459:31">nb_args</name> <operator pos:start="459:33" pos:end="459:34">&gt;=</operator> <name pos:start="459:36" pos:end="459:43">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="461:25" pos:end="461:40"><block_content pos:start="461:25" pos:end="461:40">

                        <goto pos:start="461:25" pos:end="461:40">goto <name pos:start="461:30" pos:end="461:39">error_args</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="463:21" pos:end="463:56"><expr pos:start="463:21" pos:end="463:55"><name pos:start="463:21" pos:end="463:35"><name pos:start="463:21" pos:end="463:24">args</name><index pos:start="463:25" pos:end="463:35">[<expr pos:start="463:26" pos:end="463:34"><name pos:start="463:26" pos:end="463:32">nb_args</name><operator pos:start="463:33" pos:end="463:34">++</operator></expr>]</index></name> <operator pos:start="463:37" pos:end="463:37">=</operator> <operator pos:start="463:39" pos:end="463:39">(</operator><name pos:start="463:40" pos:end="463:43">void</name> <operator pos:start="463:45" pos:end="463:45">*</operator><operator pos:start="463:46" pos:end="463:46">)</operator><operator pos:start="463:47" pos:end="463:47">(</operator><name pos:start="463:48" pos:end="463:51">long</name><operator pos:start="463:52" pos:end="463:52">)</operator><name pos:start="463:53" pos:end="463:55">val</name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="465:19" pos:end="483:17">else <block pos:start="465:24" pos:end="483:17">{<block_content pos:start="467:21" pos:end="481:71">

                    <if_stmt pos:start="467:21" pos:end="472:0"><if pos:start="467:21" pos:end="472:0">if <condition pos:start="467:24" pos:end="467:50">(<expr pos:start="467:25" pos:end="467:49"><operator pos:start="467:25" pos:end="467:25">(</operator><name pos:start="467:26" pos:end="467:32">nb_args</name> <operator pos:start="467:34" pos:end="467:34">+</operator> <literal type="number" pos:start="467:36" pos:end="467:36">1</literal><operator pos:start="467:37" pos:end="467:37">)</operator> <operator pos:start="467:39" pos:end="467:40">&gt;=</operator> <name pos:start="467:42" pos:end="467:49">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="469:25" pos:end="472:0"><block_content pos:start="469:25" pos:end="472:0">

                        <goto pos:start="469:25" pos:end="472:0">goto <name pos:start="469:30" pos:end="469:39">error_args</name>;</goto></block_content></block></if></if_stmt>

<cpp:if pos:start="471:1" pos:end="471:30">#<cpp:directive pos:start="471:2" pos:end="471:3">if</cpp:directive> <expr pos:start="471:5" pos:end="471:30"><name pos:start="471:5" pos:end="471:25">TARGET_PHYS_ADDR_BITS</name> <operator pos:start="471:27" pos:end="471:27">&gt;</operator> <literal type="number" pos:start="471:29" pos:end="471:30">32</literal></expr></cpp:if>

                    <expr_stmt pos:start="473:21" pos:end="476:0"><expr pos:start="473:21" pos:end="473:78"><name pos:start="473:21" pos:end="473:35"><name pos:start="473:21" pos:end="473:24">args</name><index pos:start="473:25" pos:end="473:35">[<expr pos:start="473:26" pos:end="473:34"><name pos:start="473:26" pos:end="473:32">nb_args</name><operator pos:start="473:33" pos:end="473:34">++</operator></expr>]</index></name> <operator pos:start="473:37" pos:end="473:37">=</operator> <operator pos:start="473:39" pos:end="473:39">(</operator><name pos:start="473:40" pos:end="473:43">void</name> <operator pos:start="473:45" pos:end="473:45">*</operator><operator pos:start="473:46" pos:end="473:46">)</operator><operator pos:start="473:47" pos:end="473:47">(</operator><name pos:start="473:48" pos:end="473:51">long</name><operator pos:start="473:52" pos:end="473:52">)</operator><operator pos:start="473:53" pos:end="473:53">(</operator><operator pos:start="473:54" pos:end="473:54">(</operator><name pos:start="473:55" pos:end="473:57">val</name> <operator pos:start="473:59" pos:end="473:60">&gt;&gt;</operator> <literal type="number" pos:start="473:62" pos:end="473:63">32</literal><operator pos:start="473:64" pos:end="473:64">)</operator> <operator pos:start="473:66" pos:end="473:66">&amp;</operator> <literal type="number" pos:start="473:68" pos:end="473:77">0xffffffff</literal><operator pos:start="473:78" pos:end="473:78">)</operator></expr>;</expr_stmt>

<cpp:else pos:start="475:1" pos:end="475:5">#<cpp:directive pos:start="475:2" pos:end="475:5">else</cpp:directive></cpp:else>

                    <expr_stmt pos:start="477:21" pos:end="480:0"><expr pos:start="477:21" pos:end="477:47"><name pos:start="477:21" pos:end="477:35"><name pos:start="477:21" pos:end="477:24">args</name><index pos:start="477:25" pos:end="477:35">[<expr pos:start="477:26" pos:end="477:34"><name pos:start="477:26" pos:end="477:32">nb_args</name><operator pos:start="477:33" pos:end="477:34">++</operator></expr>]</index></name> <operator pos:start="477:37" pos:end="477:37">=</operator> <operator pos:start="477:39" pos:end="477:39">(</operator><name pos:start="477:40" pos:end="477:43">void</name> <operator pos:start="477:45" pos:end="477:45">*</operator><operator pos:start="477:46" pos:end="477:46">)</operator><literal type="number" pos:start="477:47" pos:end="477:47">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="479:1" pos:end="479:6">#<cpp:directive pos:start="479:2" pos:end="479:6">endif</cpp:directive></cpp:endif>

                    <expr_stmt pos:start="481:21" pos:end="481:71"><expr pos:start="481:21" pos:end="481:70"><name pos:start="481:21" pos:end="481:35"><name pos:start="481:21" pos:end="481:24">args</name><index pos:start="481:25" pos:end="481:35">[<expr pos:start="481:26" pos:end="481:34"><name pos:start="481:26" pos:end="481:32">nb_args</name><operator pos:start="481:33" pos:end="481:34">++</operator></expr>]</index></name> <operator pos:start="481:37" pos:end="481:37">=</operator> <operator pos:start="481:39" pos:end="481:39">(</operator><name pos:start="481:40" pos:end="481:43">void</name> <operator pos:start="481:45" pos:end="481:45">*</operator><operator pos:start="481:46" pos:end="481:46">)</operator><operator pos:start="481:47" pos:end="481:47">(</operator><name pos:start="481:48" pos:end="481:51">long</name><operator pos:start="481:52" pos:end="481:52">)</operator><operator pos:start="481:53" pos:end="481:53">(</operator><name pos:start="481:54" pos:end="481:56">val</name> <operator pos:start="481:58" pos:end="481:58">&amp;</operator> <literal type="number" pos:start="481:60" pos:end="481:69">0xffffffff</literal><operator pos:start="481:70" pos:end="481:70">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block>

            <break pos:start="487:13" pos:end="487:18">break;</break>

        <case pos:start="489:9" pos:end="489:17">case <expr pos:start="489:14" pos:end="489:16"><literal type="char" pos:start="489:14" pos:end="489:16">'-'</literal></expr>:</case>

            <block pos:start="491:13" pos:end="537:13">{<block_content pos:start="493:17" pos:end="535:59">

                <decl_stmt pos:start="493:17" pos:end="493:31"><decl pos:start="493:17" pos:end="493:30"><type pos:start="493:17" pos:end="493:19"><name pos:start="493:17" pos:end="493:19">int</name></type> <name pos:start="493:21" pos:end="493:30">has_option</name></decl>;</decl_stmt>

                <comment type="block" pos:start="495:17" pos:end="495:28">/* option */</comment>



                <expr_stmt pos:start="499:17" pos:end="499:31"><expr pos:start="499:17" pos:end="499:30"><name pos:start="499:17" pos:end="499:17">c</name> <operator pos:start="499:19" pos:end="499:19">=</operator> <operator pos:start="499:21" pos:end="499:21">*</operator><name pos:start="499:22" pos:end="499:28">typestr</name><operator pos:start="499:29" pos:end="499:30">++</operator></expr>;</expr_stmt>

                <if_stmt pos:start="501:17" pos:end="503:34"><if pos:start="501:17" pos:end="503:34">if <condition pos:start="501:20" pos:end="501:30">(<expr pos:start="501:21" pos:end="501:29"><name pos:start="501:21" pos:end="501:21">c</name> <operator pos:start="501:23" pos:end="501:24">==</operator> <literal type="char" pos:start="501:26" pos:end="501:29">'\0'</literal></expr>)</condition><block type="pseudo" pos:start="503:21" pos:end="503:34"><block_content pos:start="503:21" pos:end="503:34">

                    <goto pos:start="503:21" pos:end="503:34">goto <name pos:start="503:26" pos:end="503:33">bad_type</name>;</goto></block_content></block></if></if_stmt>

                <while pos:start="505:17" pos:end="507:24">while <condition pos:start="505:23" pos:end="505:40">(<expr pos:start="505:24" pos:end="505:39"><call pos:start="505:24" pos:end="505:39"><name pos:start="505:24" pos:end="505:35">qemu_isspace</name><argument_list pos:start="505:36" pos:end="505:39">(<argument pos:start="505:37" pos:end="505:38"><expr pos:start="505:37" pos:end="505:38"><operator pos:start="505:37" pos:end="505:37">*</operator><name pos:start="505:38" pos:end="505:38">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="507:21" pos:end="507:24"><block_content pos:start="507:21" pos:end="507:24">

                    <expr_stmt pos:start="507:21" pos:end="507:24"><expr pos:start="507:21" pos:end="507:23"><name pos:start="507:21" pos:end="507:21">p</name><operator pos:start="507:22" pos:end="507:23">++</operator></expr>;</expr_stmt></block_content></block></while>

                <expr_stmt pos:start="509:17" pos:end="509:31"><expr pos:start="509:17" pos:end="509:30"><name pos:start="509:17" pos:end="509:26">has_option</name> <operator pos:start="509:28" pos:end="509:28">=</operator> <literal type="number" pos:start="509:30" pos:end="509:30">0</literal></expr>;</expr_stmt>

                <if_stmt pos:start="511:17" pos:end="529:17"><if pos:start="511:17" pos:end="529:17">if <condition pos:start="511:20" pos:end="511:30">(<expr pos:start="511:21" pos:end="511:29"><operator pos:start="511:21" pos:end="511:21">*</operator><name pos:start="511:22" pos:end="511:22">p</name> <operator pos:start="511:24" pos:end="511:25">==</operator> <literal type="char" pos:start="511:27" pos:end="511:29">'-'</literal></expr>)</condition> <block pos:start="511:32" pos:end="529:17">{<block_content pos:start="513:21" pos:end="527:35">

                    <expr_stmt pos:start="513:21" pos:end="513:24"><expr pos:start="513:21" pos:end="513:23"><name pos:start="513:21" pos:end="513:21">p</name><operator pos:start="513:22" pos:end="513:23">++</operator></expr>;</expr_stmt>

                    <if_stmt pos:start="515:21" pos:end="523:21"><if pos:start="515:21" pos:end="523:21">if <condition pos:start="515:24" pos:end="515:32">(<expr pos:start="515:25" pos:end="515:31"><operator pos:start="515:25" pos:end="515:25">*</operator><name pos:start="515:26" pos:end="515:26">p</name> <operator pos:start="515:28" pos:end="515:29">!=</operator> <name pos:start="515:31" pos:end="515:31">c</name></expr>)</condition> <block pos:start="515:34" pos:end="523:21">{<block_content pos:start="517:25" pos:end="521:34">

                        <expr_stmt pos:start="517:25" pos:end="519:52"><expr pos:start="517:25" pos:end="519:51"><call pos:start="517:25" pos:end="519:51"><name pos:start="517:25" pos:end="517:38">monitor_printf</name><argument_list pos:start="517:39" pos:end="519:51">(<argument pos:start="517:40" pos:end="517:42"><expr pos:start="517:40" pos:end="517:42"><name pos:start="517:40" pos:end="517:42">mon</name></expr></argument>, <argument pos:start="517:45" pos:end="517:74"><expr pos:start="517:45" pos:end="517:74"><literal type="string" pos:start="517:45" pos:end="517:74">"%s: unsupported option -%c\n"</literal></expr></argument>,

                                       <argument pos:start="519:40" pos:end="519:46"><expr pos:start="519:40" pos:end="519:46"><name pos:start="519:40" pos:end="519:46">cmdname</name></expr></argument>, <argument pos:start="519:49" pos:end="519:50"><expr pos:start="519:49" pos:end="519:50"><operator pos:start="519:49" pos:end="519:49">*</operator><name pos:start="519:50" pos:end="519:50">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="521:25" pos:end="521:34">goto <name pos:start="521:30" pos:end="521:33">fail</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="525:21" pos:end="525:24"><expr pos:start="525:21" pos:end="525:23"><name pos:start="525:21" pos:end="525:21">p</name><operator pos:start="525:22" pos:end="525:23">++</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="527:21" pos:end="527:35"><expr pos:start="527:21" pos:end="527:34"><name pos:start="527:21" pos:end="527:30">has_option</name> <operator pos:start="527:32" pos:end="527:32">=</operator> <literal type="number" pos:start="527:34" pos:end="527:34">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="531:17" pos:end="533:36"><if pos:start="531:17" pos:end="533:36">if <condition pos:start="531:20" pos:end="531:40">(<expr pos:start="531:21" pos:end="531:39"><name pos:start="531:21" pos:end="531:27">nb_args</name> <operator pos:start="531:29" pos:end="531:30">&gt;=</operator> <name pos:start="531:32" pos:end="531:39">MAX_ARGS</name></expr>)</condition><block type="pseudo" pos:start="533:21" pos:end="533:36"><block_content pos:start="533:21" pos:end="533:36">

                    <goto pos:start="533:21" pos:end="533:36">goto <name pos:start="533:26" pos:end="533:35">error_args</name>;</goto></block_content></block></if></if_stmt>

                <expr_stmt pos:start="535:17" pos:end="535:59"><expr pos:start="535:17" pos:end="535:58"><name pos:start="535:17" pos:end="535:31"><name pos:start="535:17" pos:end="535:20">args</name><index pos:start="535:21" pos:end="535:31">[<expr pos:start="535:22" pos:end="535:30"><name pos:start="535:22" pos:end="535:28">nb_args</name><operator pos:start="535:29" pos:end="535:30">++</operator></expr>]</index></name> <operator pos:start="535:33" pos:end="535:33">=</operator> <operator pos:start="535:35" pos:end="535:35">(</operator><name pos:start="535:36" pos:end="535:39">void</name> <operator pos:start="535:41" pos:end="535:41">*</operator><operator pos:start="535:42" pos:end="535:42">)</operator><operator pos:start="535:43" pos:end="535:43">(</operator><name pos:start="535:44" pos:end="535:47">long</name><operator pos:start="535:48" pos:end="535:48">)</operator><name pos:start="535:49" pos:end="535:58">has_option</name></expr>;</expr_stmt>

            </block_content>}</block>

            <break pos:start="539:13" pos:end="539:18">break;</break>

        <default pos:start="541:9" pos:end="541:16">default:</default>

        <label pos:start="543:9" pos:end="543:17"><name pos:start="543:9" pos:end="543:16">bad_type</name>:</label>

            <expr_stmt pos:start="545:13" pos:end="545:71"><expr pos:start="545:13" pos:end="545:70"><call pos:start="545:13" pos:end="545:70"><name pos:start="545:13" pos:end="545:26">monitor_printf</name><argument_list pos:start="545:27" pos:end="545:70">(<argument pos:start="545:28" pos:end="545:30"><expr pos:start="545:28" pos:end="545:30"><name pos:start="545:28" pos:end="545:30">mon</name></expr></argument>, <argument pos:start="545:33" pos:end="545:57"><expr pos:start="545:33" pos:end="545:57"><literal type="string" pos:start="545:33" pos:end="545:57">"%s: unknown type '%c'\n"</literal></expr></argument>, <argument pos:start="545:60" pos:end="545:66"><expr pos:start="545:60" pos:end="545:66"><name pos:start="545:60" pos:end="545:66">cmdname</name></expr></argument>, <argument pos:start="545:69" pos:end="545:69"><expr pos:start="545:69" pos:end="545:69"><name pos:start="545:69" pos:end="545:69">c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="547:13" pos:end="547:22">goto <name pos:start="547:18" pos:end="547:21">fail</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></for>

    <comment type="block" pos:start="553:5" pos:end="553:46">/* check that all arguments were parsed */</comment>

    <while pos:start="555:5" pos:end="557:12">while <condition pos:start="555:11" pos:end="555:28">(<expr pos:start="555:12" pos:end="555:27"><call pos:start="555:12" pos:end="555:27"><name pos:start="555:12" pos:end="555:23">qemu_isspace</name><argument_list pos:start="555:24" pos:end="555:27">(<argument pos:start="555:25" pos:end="555:26"><expr pos:start="555:25" pos:end="555:26"><operator pos:start="555:25" pos:end="555:25">*</operator><name pos:start="555:26" pos:end="555:26">p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="557:9" pos:end="557:12"><block_content pos:start="557:9" pos:end="557:12">

        <expr_stmt pos:start="557:9" pos:end="557:12"><expr pos:start="557:9" pos:end="557:11"><name pos:start="557:9" pos:end="557:9">p</name><operator pos:start="557:10" pos:end="557:11">++</operator></expr>;</expr_stmt></block_content></block></while>

    <if_stmt pos:start="559:5" pos:end="567:5"><if pos:start="559:5" pos:end="567:5">if <condition pos:start="559:8" pos:end="559:19">(<expr pos:start="559:9" pos:end="559:18"><operator pos:start="559:9" pos:end="559:9">*</operator><name pos:start="559:10" pos:end="559:10">p</name> <operator pos:start="559:12" pos:end="559:13">!=</operator> <literal type="char" pos:start="559:15" pos:end="559:18">'\0'</literal></expr>)</condition> <block pos:start="559:21" pos:end="567:5">{<block_content pos:start="561:9" pos:end="565:18">

        <expr_stmt pos:start="561:9" pos:end="563:32"><expr pos:start="561:9" pos:end="563:31"><call pos:start="561:9" pos:end="563:31"><name pos:start="561:9" pos:end="561:22">monitor_printf</name><argument_list pos:start="561:23" pos:end="563:31">(<argument pos:start="561:24" pos:end="561:26"><expr pos:start="561:24" pos:end="561:26"><name pos:start="561:24" pos:end="561:26">mon</name></expr></argument>, <argument pos:start="561:29" pos:end="561:76"><expr pos:start="561:29" pos:end="561:76"><literal type="string" pos:start="561:29" pos:end="561:76">"%s: extraneous characters at the end of line\n"</literal></expr></argument>,

                       <argument pos:start="563:24" pos:end="563:30"><expr pos:start="563:24" pos:end="563:30"><name pos:start="563:24" pos:end="563:30">cmdname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="565:9" pos:end="565:18">goto <name pos:start="565:14" pos:end="565:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="571:5" pos:end="645:5">switch<condition pos:start="571:11" pos:end="571:19">(<expr pos:start="571:12" pos:end="571:18"><name pos:start="571:12" pos:end="571:18">nb_args</name></expr>)</condition> <block pos:start="571:21" pos:end="645:5">{<block_content pos:start="573:5" pos:end="643:18">

    <case pos:start="573:5" pos:end="573:11">case <expr pos:start="573:10" pos:end="573:10"><literal type="number" pos:start="573:10" pos:end="573:10">0</literal></expr>:</case>

        <expr_stmt pos:start="575:9" pos:end="575:33"><expr pos:start="575:9" pos:end="575:32"><name pos:start="575:9" pos:end="575:17">handler_0</name> <operator pos:start="575:19" pos:end="575:19">=</operator> <name pos:start="575:21" pos:end="575:32"><name pos:start="575:21" pos:end="575:23">cmd</name><operator pos:start="575:24" pos:end="575:25">-&gt;</operator><name pos:start="575:26" pos:end="575:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="577:9" pos:end="577:23"><expr pos:start="577:9" pos:end="577:22"><call pos:start="577:9" pos:end="577:22"><name pos:start="577:9" pos:end="577:17">handler_0</name><argument_list pos:start="577:18" pos:end="577:22">(<argument pos:start="577:19" pos:end="577:21"><expr pos:start="577:19" pos:end="577:21"><name pos:start="577:19" pos:end="577:21">mon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="579:9" pos:end="579:14">break;</break>

    <case pos:start="581:5" pos:end="581:11">case <expr pos:start="581:10" pos:end="581:10"><literal type="number" pos:start="581:10" pos:end="581:10">1</literal></expr>:</case>

        <expr_stmt pos:start="583:9" pos:end="583:33"><expr pos:start="583:9" pos:end="583:32"><name pos:start="583:9" pos:end="583:17">handler_1</name> <operator pos:start="583:19" pos:end="583:19">=</operator> <name pos:start="583:21" pos:end="583:32"><name pos:start="583:21" pos:end="583:23">cmd</name><operator pos:start="583:24" pos:end="583:25">-&gt;</operator><name pos:start="583:26" pos:end="583:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="585:9" pos:end="585:32"><expr pos:start="585:9" pos:end="585:31"><call pos:start="585:9" pos:end="585:31"><name pos:start="585:9" pos:end="585:17">handler_1</name><argument_list pos:start="585:18" pos:end="585:31">(<argument pos:start="585:19" pos:end="585:21"><expr pos:start="585:19" pos:end="585:21"><name pos:start="585:19" pos:end="585:21">mon</name></expr></argument>, <argument pos:start="585:24" pos:end="585:30"><expr pos:start="585:24" pos:end="585:30"><name pos:start="585:24" pos:end="585:30"><name pos:start="585:24" pos:end="585:27">args</name><index pos:start="585:28" pos:end="585:30">[<expr pos:start="585:29" pos:end="585:29"><literal type="number" pos:start="585:29" pos:end="585:29">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="587:9" pos:end="587:14">break;</break>

    <case pos:start="589:5" pos:end="589:11">case <expr pos:start="589:10" pos:end="589:10"><literal type="number" pos:start="589:10" pos:end="589:10">2</literal></expr>:</case>

        <expr_stmt pos:start="591:9" pos:end="591:33"><expr pos:start="591:9" pos:end="591:32"><name pos:start="591:9" pos:end="591:17">handler_2</name> <operator pos:start="591:19" pos:end="591:19">=</operator> <name pos:start="591:21" pos:end="591:32"><name pos:start="591:21" pos:end="591:23">cmd</name><operator pos:start="591:24" pos:end="591:25">-&gt;</operator><name pos:start="591:26" pos:end="591:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="593:9" pos:end="593:41"><expr pos:start="593:9" pos:end="593:40"><call pos:start="593:9" pos:end="593:40"><name pos:start="593:9" pos:end="593:17">handler_2</name><argument_list pos:start="593:18" pos:end="593:40">(<argument pos:start="593:19" pos:end="593:21"><expr pos:start="593:19" pos:end="593:21"><name pos:start="593:19" pos:end="593:21">mon</name></expr></argument>, <argument pos:start="593:24" pos:end="593:30"><expr pos:start="593:24" pos:end="593:30"><name pos:start="593:24" pos:end="593:30"><name pos:start="593:24" pos:end="593:27">args</name><index pos:start="593:28" pos:end="593:30">[<expr pos:start="593:29" pos:end="593:29"><literal type="number" pos:start="593:29" pos:end="593:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="593:33" pos:end="593:39"><expr pos:start="593:33" pos:end="593:39"><name pos:start="593:33" pos:end="593:39"><name pos:start="593:33" pos:end="593:36">args</name><index pos:start="593:37" pos:end="593:39">[<expr pos:start="593:38" pos:end="593:38"><literal type="number" pos:start="593:38" pos:end="593:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="595:9" pos:end="595:14">break;</break>

    <case pos:start="597:5" pos:end="597:11">case <expr pos:start="597:10" pos:end="597:10"><literal type="number" pos:start="597:10" pos:end="597:10">3</literal></expr>:</case>

        <expr_stmt pos:start="599:9" pos:end="599:33"><expr pos:start="599:9" pos:end="599:32"><name pos:start="599:9" pos:end="599:17">handler_3</name> <operator pos:start="599:19" pos:end="599:19">=</operator> <name pos:start="599:21" pos:end="599:32"><name pos:start="599:21" pos:end="599:23">cmd</name><operator pos:start="599:24" pos:end="599:25">-&gt;</operator><name pos:start="599:26" pos:end="599:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="601:9" pos:end="601:50"><expr pos:start="601:9" pos:end="601:49"><call pos:start="601:9" pos:end="601:49"><name pos:start="601:9" pos:end="601:17">handler_3</name><argument_list pos:start="601:18" pos:end="601:49">(<argument pos:start="601:19" pos:end="601:21"><expr pos:start="601:19" pos:end="601:21"><name pos:start="601:19" pos:end="601:21">mon</name></expr></argument>, <argument pos:start="601:24" pos:end="601:30"><expr pos:start="601:24" pos:end="601:30"><name pos:start="601:24" pos:end="601:30"><name pos:start="601:24" pos:end="601:27">args</name><index pos:start="601:28" pos:end="601:30">[<expr pos:start="601:29" pos:end="601:29"><literal type="number" pos:start="601:29" pos:end="601:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="601:33" pos:end="601:39"><expr pos:start="601:33" pos:end="601:39"><name pos:start="601:33" pos:end="601:39"><name pos:start="601:33" pos:end="601:36">args</name><index pos:start="601:37" pos:end="601:39">[<expr pos:start="601:38" pos:end="601:38"><literal type="number" pos:start="601:38" pos:end="601:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="601:42" pos:end="601:48"><expr pos:start="601:42" pos:end="601:48"><name pos:start="601:42" pos:end="601:48"><name pos:start="601:42" pos:end="601:45">args</name><index pos:start="601:46" pos:end="601:48">[<expr pos:start="601:47" pos:end="601:47"><literal type="number" pos:start="601:47" pos:end="601:47">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="603:9" pos:end="603:14">break;</break>

    <case pos:start="605:5" pos:end="605:11">case <expr pos:start="605:10" pos:end="605:10"><literal type="number" pos:start="605:10" pos:end="605:10">4</literal></expr>:</case>

        <expr_stmt pos:start="607:9" pos:end="607:33"><expr pos:start="607:9" pos:end="607:32"><name pos:start="607:9" pos:end="607:17">handler_4</name> <operator pos:start="607:19" pos:end="607:19">=</operator> <name pos:start="607:21" pos:end="607:32"><name pos:start="607:21" pos:end="607:23">cmd</name><operator pos:start="607:24" pos:end="607:25">-&gt;</operator><name pos:start="607:26" pos:end="607:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="609:9" pos:end="609:59"><expr pos:start="609:9" pos:end="609:58"><call pos:start="609:9" pos:end="609:58"><name pos:start="609:9" pos:end="609:17">handler_4</name><argument_list pos:start="609:18" pos:end="609:58">(<argument pos:start="609:19" pos:end="609:21"><expr pos:start="609:19" pos:end="609:21"><name pos:start="609:19" pos:end="609:21">mon</name></expr></argument>, <argument pos:start="609:24" pos:end="609:30"><expr pos:start="609:24" pos:end="609:30"><name pos:start="609:24" pos:end="609:30"><name pos:start="609:24" pos:end="609:27">args</name><index pos:start="609:28" pos:end="609:30">[<expr pos:start="609:29" pos:end="609:29"><literal type="number" pos:start="609:29" pos:end="609:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="609:33" pos:end="609:39"><expr pos:start="609:33" pos:end="609:39"><name pos:start="609:33" pos:end="609:39"><name pos:start="609:33" pos:end="609:36">args</name><index pos:start="609:37" pos:end="609:39">[<expr pos:start="609:38" pos:end="609:38"><literal type="number" pos:start="609:38" pos:end="609:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="609:42" pos:end="609:48"><expr pos:start="609:42" pos:end="609:48"><name pos:start="609:42" pos:end="609:48"><name pos:start="609:42" pos:end="609:45">args</name><index pos:start="609:46" pos:end="609:48">[<expr pos:start="609:47" pos:end="609:47"><literal type="number" pos:start="609:47" pos:end="609:47">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="609:51" pos:end="609:57"><expr pos:start="609:51" pos:end="609:57"><name pos:start="609:51" pos:end="609:57"><name pos:start="609:51" pos:end="609:54">args</name><index pos:start="609:55" pos:end="609:57">[<expr pos:start="609:56" pos:end="609:56"><literal type="number" pos:start="609:56" pos:end="609:56">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="611:9" pos:end="611:14">break;</break>

    <case pos:start="613:5" pos:end="613:11">case <expr pos:start="613:10" pos:end="613:10"><literal type="number" pos:start="613:10" pos:end="613:10">5</literal></expr>:</case>

        <expr_stmt pos:start="615:9" pos:end="615:33"><expr pos:start="615:9" pos:end="615:32"><name pos:start="615:9" pos:end="615:17">handler_5</name> <operator pos:start="615:19" pos:end="615:19">=</operator> <name pos:start="615:21" pos:end="615:32"><name pos:start="615:21" pos:end="615:23">cmd</name><operator pos:start="615:24" pos:end="615:25">-&gt;</operator><name pos:start="615:26" pos:end="615:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="617:9" pos:end="617:68"><expr pos:start="617:9" pos:end="617:67"><call pos:start="617:9" pos:end="617:67"><name pos:start="617:9" pos:end="617:17">handler_5</name><argument_list pos:start="617:18" pos:end="617:67">(<argument pos:start="617:19" pos:end="617:21"><expr pos:start="617:19" pos:end="617:21"><name pos:start="617:19" pos:end="617:21">mon</name></expr></argument>, <argument pos:start="617:24" pos:end="617:30"><expr pos:start="617:24" pos:end="617:30"><name pos:start="617:24" pos:end="617:30"><name pos:start="617:24" pos:end="617:27">args</name><index pos:start="617:28" pos:end="617:30">[<expr pos:start="617:29" pos:end="617:29"><literal type="number" pos:start="617:29" pos:end="617:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="617:33" pos:end="617:39"><expr pos:start="617:33" pos:end="617:39"><name pos:start="617:33" pos:end="617:39"><name pos:start="617:33" pos:end="617:36">args</name><index pos:start="617:37" pos:end="617:39">[<expr pos:start="617:38" pos:end="617:38"><literal type="number" pos:start="617:38" pos:end="617:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="617:42" pos:end="617:48"><expr pos:start="617:42" pos:end="617:48"><name pos:start="617:42" pos:end="617:48"><name pos:start="617:42" pos:end="617:45">args</name><index pos:start="617:46" pos:end="617:48">[<expr pos:start="617:47" pos:end="617:47"><literal type="number" pos:start="617:47" pos:end="617:47">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="617:51" pos:end="617:57"><expr pos:start="617:51" pos:end="617:57"><name pos:start="617:51" pos:end="617:57"><name pos:start="617:51" pos:end="617:54">args</name><index pos:start="617:55" pos:end="617:57">[<expr pos:start="617:56" pos:end="617:56"><literal type="number" pos:start="617:56" pos:end="617:56">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="617:60" pos:end="617:66"><expr pos:start="617:60" pos:end="617:66"><name pos:start="617:60" pos:end="617:66"><name pos:start="617:60" pos:end="617:63">args</name><index pos:start="617:64" pos:end="617:66">[<expr pos:start="617:65" pos:end="617:65"><literal type="number" pos:start="617:65" pos:end="617:65">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="619:9" pos:end="619:14">break;</break>

    <case pos:start="621:5" pos:end="621:11">case <expr pos:start="621:10" pos:end="621:10"><literal type="number" pos:start="621:10" pos:end="621:10">6</literal></expr>:</case>

        <expr_stmt pos:start="623:9" pos:end="623:33"><expr pos:start="623:9" pos:end="623:32"><name pos:start="623:9" pos:end="623:17">handler_6</name> <operator pos:start="623:19" pos:end="623:19">=</operator> <name pos:start="623:21" pos:end="623:32"><name pos:start="623:21" pos:end="623:23">cmd</name><operator pos:start="623:24" pos:end="623:25">-&gt;</operator><name pos:start="623:26" pos:end="623:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="625:9" pos:end="625:77"><expr pos:start="625:9" pos:end="625:76"><call pos:start="625:9" pos:end="625:76"><name pos:start="625:9" pos:end="625:17">handler_6</name><argument_list pos:start="625:18" pos:end="625:76">(<argument pos:start="625:19" pos:end="625:21"><expr pos:start="625:19" pos:end="625:21"><name pos:start="625:19" pos:end="625:21">mon</name></expr></argument>, <argument pos:start="625:24" pos:end="625:30"><expr pos:start="625:24" pos:end="625:30"><name pos:start="625:24" pos:end="625:30"><name pos:start="625:24" pos:end="625:27">args</name><index pos:start="625:28" pos:end="625:30">[<expr pos:start="625:29" pos:end="625:29"><literal type="number" pos:start="625:29" pos:end="625:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:33" pos:end="625:39"><expr pos:start="625:33" pos:end="625:39"><name pos:start="625:33" pos:end="625:39"><name pos:start="625:33" pos:end="625:36">args</name><index pos:start="625:37" pos:end="625:39">[<expr pos:start="625:38" pos:end="625:38"><literal type="number" pos:start="625:38" pos:end="625:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:42" pos:end="625:48"><expr pos:start="625:42" pos:end="625:48"><name pos:start="625:42" pos:end="625:48"><name pos:start="625:42" pos:end="625:45">args</name><index pos:start="625:46" pos:end="625:48">[<expr pos:start="625:47" pos:end="625:47"><literal type="number" pos:start="625:47" pos:end="625:47">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:51" pos:end="625:57"><expr pos:start="625:51" pos:end="625:57"><name pos:start="625:51" pos:end="625:57"><name pos:start="625:51" pos:end="625:54">args</name><index pos:start="625:55" pos:end="625:57">[<expr pos:start="625:56" pos:end="625:56"><literal type="number" pos:start="625:56" pos:end="625:56">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:60" pos:end="625:66"><expr pos:start="625:60" pos:end="625:66"><name pos:start="625:60" pos:end="625:66"><name pos:start="625:60" pos:end="625:63">args</name><index pos:start="625:64" pos:end="625:66">[<expr pos:start="625:65" pos:end="625:65"><literal type="number" pos:start="625:65" pos:end="625:65">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="625:69" pos:end="625:75"><expr pos:start="625:69" pos:end="625:75"><name pos:start="625:69" pos:end="625:75"><name pos:start="625:69" pos:end="625:72">args</name><index pos:start="625:73" pos:end="625:75">[<expr pos:start="625:74" pos:end="625:74"><literal type="number" pos:start="625:74" pos:end="625:74">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="627:9" pos:end="627:14">break;</break>

    <case pos:start="629:5" pos:end="629:11">case <expr pos:start="629:10" pos:end="629:10"><literal type="number" pos:start="629:10" pos:end="629:10">7</literal></expr>:</case>

        <expr_stmt pos:start="631:9" pos:end="631:33"><expr pos:start="631:9" pos:end="631:32"><name pos:start="631:9" pos:end="631:17">handler_7</name> <operator pos:start="631:19" pos:end="631:19">=</operator> <name pos:start="631:21" pos:end="631:32"><name pos:start="631:21" pos:end="631:23">cmd</name><operator pos:start="631:24" pos:end="631:25">-&gt;</operator><name pos:start="631:26" pos:end="631:32">handler</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="633:9" pos:end="635:27"><expr pos:start="633:9" pos:end="635:26"><call pos:start="633:9" pos:end="635:26"><name pos:start="633:9" pos:end="633:17">handler_7</name><argument_list pos:start="633:18" pos:end="635:26">(<argument pos:start="633:19" pos:end="633:21"><expr pos:start="633:19" pos:end="633:21"><name pos:start="633:19" pos:end="633:21">mon</name></expr></argument>, <argument pos:start="633:24" pos:end="633:30"><expr pos:start="633:24" pos:end="633:30"><name pos:start="633:24" pos:end="633:30"><name pos:start="633:24" pos:end="633:27">args</name><index pos:start="633:28" pos:end="633:30">[<expr pos:start="633:29" pos:end="633:29"><literal type="number" pos:start="633:29" pos:end="633:29">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:33" pos:end="633:39"><expr pos:start="633:33" pos:end="633:39"><name pos:start="633:33" pos:end="633:39"><name pos:start="633:33" pos:end="633:36">args</name><index pos:start="633:37" pos:end="633:39">[<expr pos:start="633:38" pos:end="633:38"><literal type="number" pos:start="633:38" pos:end="633:38">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:42" pos:end="633:48"><expr pos:start="633:42" pos:end="633:48"><name pos:start="633:42" pos:end="633:48"><name pos:start="633:42" pos:end="633:45">args</name><index pos:start="633:46" pos:end="633:48">[<expr pos:start="633:47" pos:end="633:47"><literal type="number" pos:start="633:47" pos:end="633:47">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:51" pos:end="633:57"><expr pos:start="633:51" pos:end="633:57"><name pos:start="633:51" pos:end="633:57"><name pos:start="633:51" pos:end="633:54">args</name><index pos:start="633:55" pos:end="633:57">[<expr pos:start="633:56" pos:end="633:56"><literal type="number" pos:start="633:56" pos:end="633:56">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:60" pos:end="633:66"><expr pos:start="633:60" pos:end="633:66"><name pos:start="633:60" pos:end="633:66"><name pos:start="633:60" pos:end="633:63">args</name><index pos:start="633:64" pos:end="633:66">[<expr pos:start="633:65" pos:end="633:65"><literal type="number" pos:start="633:65" pos:end="633:65">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="633:69" pos:end="633:75"><expr pos:start="633:69" pos:end="633:75"><name pos:start="633:69" pos:end="633:75"><name pos:start="633:69" pos:end="633:72">args</name><index pos:start="633:73" pos:end="633:75">[<expr pos:start="633:74" pos:end="633:74"><literal type="number" pos:start="633:74" pos:end="633:74">5</literal></expr>]</index></name></expr></argument>,

                  <argument pos:start="635:19" pos:end="635:25"><expr pos:start="635:19" pos:end="635:25"><name pos:start="635:19" pos:end="635:25"><name pos:start="635:19" pos:end="635:22">args</name><index pos:start="635:23" pos:end="635:25">[<expr pos:start="635:24" pos:end="635:24"><literal type="number" pos:start="635:24" pos:end="635:24">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="637:9" pos:end="637:14">break;</break>

    <default pos:start="639:5" pos:end="639:12">default:</default>

        <expr_stmt pos:start="641:9" pos:end="641:78"><expr pos:start="641:9" pos:end="641:77"><call pos:start="641:9" pos:end="641:77"><name pos:start="641:9" pos:end="641:22">monitor_printf</name><argument_list pos:start="641:23" pos:end="641:77">(<argument pos:start="641:24" pos:end="641:26"><expr pos:start="641:24" pos:end="641:26"><name pos:start="641:24" pos:end="641:26">mon</name></expr></argument>, <argument pos:start="641:29" pos:end="641:67"><expr pos:start="641:29" pos:end="641:67"><literal type="string" pos:start="641:29" pos:end="641:67">"unsupported number of arguments: %d\n"</literal></expr></argument>, <argument pos:start="641:70" pos:end="641:76"><expr pos:start="641:70" pos:end="641:76"><name pos:start="641:70" pos:end="641:76">nb_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="643:9" pos:end="643:18">goto <name pos:start="643:14" pos:end="643:17">fail</name>;</goto>

    </block_content>}</block></switch>

 <label pos:start="647:2" pos:end="647:6"><name pos:start="647:2" pos:end="647:5">fail</name>:</label>

    <for pos:start="649:5" pos:end="651:36">for<control pos:start="649:8" pos:end="649:33">(<init pos:start="649:9" pos:end="649:14"><expr pos:start="649:9" pos:end="649:13"><name pos:start="649:9" pos:end="649:9">i</name> <operator pos:start="649:11" pos:end="649:11">=</operator> <literal type="number" pos:start="649:13" pos:end="649:13">0</literal></expr>;</init> <condition pos:start="649:16" pos:end="649:28"><expr pos:start="649:16" pos:end="649:27"><name pos:start="649:16" pos:end="649:16">i</name> <operator pos:start="649:18" pos:end="649:18">&lt;</operator> <name pos:start="649:20" pos:end="649:27">MAX_ARGS</name></expr>;</condition> <incr pos:start="649:30" pos:end="649:32"><expr pos:start="649:30" pos:end="649:32"><name pos:start="649:30" pos:end="649:30">i</name><operator pos:start="649:31" pos:end="649:32">++</operator></expr></incr>)</control><block type="pseudo" pos:start="651:9" pos:end="651:36"><block_content pos:start="651:9" pos:end="651:36">

        <expr_stmt pos:start="651:9" pos:end="651:36"><expr pos:start="651:9" pos:end="651:35"><call pos:start="651:9" pos:end="651:35"><name pos:start="651:9" pos:end="651:17">qemu_free</name><argument_list pos:start="651:18" pos:end="651:35">(<argument pos:start="651:19" pos:end="651:34"><expr pos:start="651:19" pos:end="651:34"><name pos:start="651:19" pos:end="651:34"><name pos:start="651:19" pos:end="651:31">str_allocated</name><index pos:start="651:32" pos:end="651:34">[<expr pos:start="651:33" pos:end="651:33"><name pos:start="651:33" pos:end="651:33">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return pos:start="653:5" pos:end="653:11">return;</return>

</block_content>}</block></function>
</unit>
