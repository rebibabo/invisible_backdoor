<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16568.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">laio_do_submit</name><parameter_list pos:start="1:26" pos:end="3:35">(<parameter pos:start="1:27" pos:end="1:32"><decl pos:start="1:27" pos:end="1:32"><type pos:start="1:27" pos:end="1:32"><name pos:start="1:27" pos:end="1:29">int</name></type> <name pos:start="1:31" pos:end="1:32">fd</name></decl></parameter>, <parameter pos:start="1:35" pos:end="1:60"><decl pos:start="1:35" pos:end="1:60"><type pos:start="1:35" pos:end="1:60"><name pos:start="1:35" pos:end="1:52"><name pos:start="1:35" pos:end="1:40">struct</name> <name pos:start="1:42" pos:end="1:52">qemu_laiocb</name></name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:60">laiocb</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:74"><decl pos:start="1:63" pos:end="1:74"><type pos:start="1:63" pos:end="1:74"><name pos:start="1:63" pos:end="1:67">off_t</name></type> <name pos:start="1:69" pos:end="1:74">offset</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:34"><decl pos:start="3:27" pos:end="3:34"><type pos:start="3:27" pos:end="3:34"><name pos:start="3:27" pos:end="3:29">int</name></type> <name pos:start="3:31" pos:end="3:34">type</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="61:1">{<block_content pos:start="7:5" pos:end="59:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:34"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">LinuxAioState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:34">= <expr pos:start="7:24" pos:end="7:34"><name pos:start="7:24" pos:end="7:34"><name pos:start="7:24" pos:end="7:29">laiocb</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:34">ctx</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:15">iocb</name></name> <modifier pos:start="9:17" pos:end="9:17">*</modifier></type><name pos:start="9:18" pos:end="9:22">iocbs</name> <init pos:start="9:24" pos:end="9:38">= <expr pos:start="9:26" pos:end="9:38"><operator pos:start="9:26" pos:end="9:26">&amp;</operator><name pos:start="9:27" pos:end="9:38"><name pos:start="9:27" pos:end="9:32">laiocb</name><operator pos:start="9:33" pos:end="9:34">-&gt;</operator><name pos:start="9:35" pos:end="9:38">iocb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">QEMUIOVector</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">qiov</name> <init pos:start="11:24" pos:end="11:37">= <expr pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:31">laiocb</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:37">qiov</name></name></expr></init></decl>;</decl_stmt>



    <switch pos:start="15:5" pos:end="39:5">switch <condition pos:start="15:12" pos:end="15:17">(<expr pos:start="15:13" pos:end="15:16"><name pos:start="15:13" pos:end="15:16">type</name></expr>)</condition> <block pos:start="15:19" pos:end="39:5">{<block_content pos:start="17:5" pos:end="37:20">

    <case pos:start="17:5" pos:end="17:24">case <expr pos:start="17:10" pos:end="17:23"><name pos:start="17:10" pos:end="17:23">QEMU_AIO_WRITE</name></expr>:</case>

        <expr_stmt pos:start="19:9" pos:end="19:66"><expr pos:start="19:9" pos:end="19:65"><call pos:start="19:9" pos:end="19:65"><name pos:start="19:9" pos:end="19:23">io_prep_pwritev</name><argument_list pos:start="19:24" pos:end="19:65">(<argument pos:start="19:25" pos:end="19:29"><expr pos:start="19:25" pos:end="19:29"><name pos:start="19:25" pos:end="19:29">iocbs</name></expr></argument>, <argument pos:start="19:32" pos:end="19:33"><expr pos:start="19:32" pos:end="19:33"><name pos:start="19:32" pos:end="19:33">fd</name></expr></argument>, <argument pos:start="19:36" pos:end="19:44"><expr pos:start="19:36" pos:end="19:44"><name pos:start="19:36" pos:end="19:44"><name pos:start="19:36" pos:end="19:39">qiov</name><operator pos:start="19:40" pos:end="19:41">-&gt;</operator><name pos:start="19:42" pos:end="19:44">iov</name></name></expr></argument>, <argument pos:start="19:47" pos:end="19:56"><expr pos:start="19:47" pos:end="19:56"><name pos:start="19:47" pos:end="19:56"><name pos:start="19:47" pos:end="19:50">qiov</name><operator pos:start="19:51" pos:end="19:52">-&gt;</operator><name pos:start="19:53" pos:end="19:56">niov</name></name></expr></argument>, <argument pos:start="19:59" pos:end="19:64"><expr pos:start="19:59" pos:end="19:64"><name pos:start="19:59" pos:end="19:64">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:23">case <expr pos:start="23:10" pos:end="23:22"><name pos:start="23:10" pos:end="23:22">QEMU_AIO_READ</name></expr>:</case>

        <expr_stmt pos:start="25:9" pos:end="25:65"><expr pos:start="25:9" pos:end="25:64"><call pos:start="25:9" pos:end="25:64"><name pos:start="25:9" pos:end="25:22">io_prep_preadv</name><argument_list pos:start="25:23" pos:end="25:64">(<argument pos:start="25:24" pos:end="25:28"><expr pos:start="25:24" pos:end="25:28"><name pos:start="25:24" pos:end="25:28">iocbs</name></expr></argument>, <argument pos:start="25:31" pos:end="25:32"><expr pos:start="25:31" pos:end="25:32"><name pos:start="25:31" pos:end="25:32">fd</name></expr></argument>, <argument pos:start="25:35" pos:end="25:43"><expr pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:43"><name pos:start="25:35" pos:end="25:38">qiov</name><operator pos:start="25:39" pos:end="25:40">-&gt;</operator><name pos:start="25:41" pos:end="25:43">iov</name></name></expr></argument>, <argument pos:start="25:46" pos:end="25:55"><expr pos:start="25:46" pos:end="25:55"><name pos:start="25:46" pos:end="25:55"><name pos:start="25:46" pos:end="25:49">qiov</name><operator pos:start="25:50" pos:end="25:51">-&gt;</operator><name pos:start="25:52" pos:end="25:55">niov</name></name></expr></argument>, <argument pos:start="25:58" pos:end="25:63"><expr pos:start="25:58" pos:end="25:63"><name pos:start="25:58" pos:end="25:63">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="27:9" pos:end="27:14">break;</break>

    <comment type="block" pos:start="29:5" pos:end="29:66">/* Currently Linux kernel does not support other operations */</comment>

    <default pos:start="31:5" pos:end="31:12">default:</default>

        <expr_stmt pos:start="33:9" pos:end="35:40"><expr pos:start="33:9" pos:end="35:39"><call pos:start="33:9" pos:end="35:39"><name pos:start="33:9" pos:end="33:15">fprintf</name><argument_list pos:start="33:16" pos:end="35:39">(<argument pos:start="33:17" pos:end="33:22"><expr pos:start="33:17" pos:end="33:22"><name pos:start="33:17" pos:end="33:22">stderr</name></expr></argument>, <argument pos:start="33:25" pos:end="33:62"><expr pos:start="33:25" pos:end="33:62"><literal type="string" pos:start="33:25" pos:end="33:62">"%s: invalid AIO request type 0x%x.\n"</literal></expr></argument>,

                        <argument pos:start="35:25" pos:end="35:32"><expr pos:start="35:25" pos:end="35:32"><name pos:start="35:25" pos:end="35:32">__func__</name></expr></argument>, <argument pos:start="35:35" pos:end="35:38"><expr pos:start="35:35" pos:end="35:38"><name pos:start="35:35" pos:end="35:38">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:20">return <expr pos:start="37:16" pos:end="37:19"><operator pos:start="37:16" pos:end="37:16">-</operator><name pos:start="37:17" pos:end="37:19">EIO</name></expr>;</return>

    </block_content>}</block></switch>

    <expr_stmt pos:start="41:5" pos:end="41:64"><expr pos:start="41:5" pos:end="41:63"><call pos:start="41:5" pos:end="41:63"><name pos:start="41:5" pos:end="41:18">io_set_eventfd</name><argument_list pos:start="41:19" pos:end="41:63">(<argument pos:start="41:20" pos:end="41:32"><expr pos:start="41:20" pos:end="41:32"><operator pos:start="41:20" pos:end="41:20">&amp;</operator><name pos:start="41:21" pos:end="41:32"><name pos:start="41:21" pos:end="41:26">laiocb</name><operator pos:start="41:27" pos:end="41:28">-&gt;</operator><name pos:start="41:29" pos:end="41:32">iocb</name></name></expr></argument>, <argument pos:start="41:35" pos:end="41:62"><expr pos:start="41:35" pos:end="41:62"><call pos:start="41:35" pos:end="41:62"><name pos:start="41:35" pos:end="41:55">event_notifier_get_fd</name><argument_list pos:start="41:56" pos:end="41:62">(<argument pos:start="41:57" pos:end="41:61"><expr pos:start="41:57" pos:end="41:61"><operator pos:start="41:57" pos:end="41:57">&amp;</operator><name pos:start="41:58" pos:end="41:61"><name pos:start="41:58" pos:end="41:58">s</name><operator pos:start="41:59" pos:end="41:60">-&gt;</operator><name pos:start="41:61" pos:end="41:61">e</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:57"><expr pos:start="45:5" pos:end="45:56"><call pos:start="45:5" pos:end="45:56"><name pos:start="45:5" pos:end="45:24">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="45:25" pos:end="45:56">(<argument pos:start="45:26" pos:end="45:41"><expr pos:start="45:26" pos:end="45:41"><operator pos:start="45:26" pos:end="45:26">&amp;</operator><name pos:start="45:27" pos:end="45:41"><name pos:start="45:27" pos:end="45:27">s</name><operator pos:start="45:28" pos:end="45:29">-&gt;</operator><name pos:start="45:30" pos:end="45:33">io_q</name><operator pos:start="45:34" pos:end="45:34">.</operator><name pos:start="45:35" pos:end="45:41">pending</name></name></expr></argument>, <argument pos:start="45:44" pos:end="45:49"><expr pos:start="45:44" pos:end="45:49"><name pos:start="45:44" pos:end="45:49">laiocb</name></expr></argument>, <argument pos:start="45:52" pos:end="45:55"><expr pos:start="45:52" pos:end="45:55"><name pos:start="45:52" pos:end="45:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:16"><expr pos:start="47:5" pos:end="47:15"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:5">s</name><operator pos:start="47:6" pos:end="47:7">-&gt;</operator><name pos:start="47:8" pos:end="47:11">io_q</name><operator pos:start="47:12" pos:end="47:12">.</operator><name pos:start="47:13" pos:end="47:13">n</name></name><operator pos:start="47:14" pos:end="47:15">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="55:5"><if pos:start="49:5" pos:end="55:5">if <condition pos:start="49:8" pos:end="51:57">(<expr pos:start="49:9" pos:end="51:56"><operator pos:start="49:9" pos:end="49:9">!</operator><name pos:start="49:10" pos:end="49:24"><name pos:start="49:10" pos:end="49:10">s</name><operator pos:start="49:11" pos:end="49:12">-&gt;</operator><name pos:start="49:13" pos:end="49:16">io_q</name><operator pos:start="49:17" pos:end="49:17">.</operator><name pos:start="49:18" pos:end="49:24">blocked</name></name> <operator pos:start="49:26" pos:end="49:27">&amp;&amp;</operator>

        <operator pos:start="51:9" pos:end="51:9">(</operator><operator pos:start="51:10" pos:end="51:10">!</operator><name pos:start="51:11" pos:end="51:25"><name pos:start="51:11" pos:end="51:11">s</name><operator pos:start="51:12" pos:end="51:13">-&gt;</operator><name pos:start="51:14" pos:end="51:17">io_q</name><operator pos:start="51:18" pos:end="51:18">.</operator><name pos:start="51:19" pos:end="51:25">plugged</name></name> <operator pos:start="51:27" pos:end="51:28">||</operator> <name pos:start="51:30" pos:end="51:38"><name pos:start="51:30" pos:end="51:30">s</name><operator pos:start="51:31" pos:end="51:32">-&gt;</operator><name pos:start="51:33" pos:end="51:36">io_q</name><operator pos:start="51:37" pos:end="51:37">.</operator><name pos:start="51:38" pos:end="51:38">n</name></name> <operator pos:start="51:40" pos:end="51:41">&gt;=</operator> <name pos:start="51:43" pos:end="51:55">MAX_QUEUED_IO</name><operator pos:start="51:56" pos:end="51:56">)</operator></expr>)</condition> <block pos:start="51:59" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:22">

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><call pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:18">ioq_submit</name><argument_list pos:start="53:19" pos:end="53:21">(<argument pos:start="53:20" pos:end="53:20"><expr pos:start="53:20" pos:end="53:20"><name pos:start="53:20" pos:end="53:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="59:5" pos:end="59:13">return <expr pos:start="59:12" pos:end="59:12"><literal type="number" pos:start="59:12" pos:end="59:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
