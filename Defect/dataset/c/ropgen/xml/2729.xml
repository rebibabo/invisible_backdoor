<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2729.c" pos:tabs="8"><function pos:start="1:1" pos:end="61:1"><type pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:12">CPUArchState</name> <modifier pos:start="1:14" pos:end="1:14">*</modifier></type><name pos:start="1:15" pos:end="1:22">cpu_copy</name><parameter_list pos:start="1:23" pos:end="1:41">(<parameter pos:start="1:24" pos:end="1:40"><decl pos:start="1:24" pos:end="1:40"><type pos:start="1:24" pos:end="1:37"><name pos:start="1:24" pos:end="1:35">CPUArchState</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:40">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="61:1">{<block_content pos:start="5:5" pos:end="59:19">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:17">cpu</name> <init pos:start="5:19" pos:end="5:36">= <expr pos:start="5:21" pos:end="5:36"><call pos:start="5:21" pos:end="5:36"><name pos:start="5:21" pos:end="5:31">ENV_GET_CPU</name><argument_list pos:start="5:32" pos:end="5:36">(<argument pos:start="5:33" pos:end="5:35"><expr pos:start="5:33" pos:end="5:35"><name pos:start="5:33" pos:end="5:35">env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:48"><decl pos:start="7:5" pos:end="7:47"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">CPUArchState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:25">new_env</name> <init pos:start="7:27" pos:end="7:47">= <expr pos:start="7:29" pos:end="7:47"><call pos:start="7:29" pos:end="7:47"><name pos:start="7:29" pos:end="7:36">cpu_init</name><argument_list pos:start="7:37" pos:end="7:47">(<argument pos:start="7:38" pos:end="7:46"><expr pos:start="7:38" pos:end="7:46"><name pos:start="7:38" pos:end="7:46">cpu_model</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="12:0"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">CPUState</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:21">new_cpu</name> <init pos:start="9:23" pos:end="9:44">= <expr pos:start="9:25" pos:end="9:44"><call pos:start="9:25" pos:end="9:44"><name pos:start="9:25" pos:end="9:35">ENV_GET_CPU</name><argument_list pos:start="9:36" pos:end="9:44">(<argument pos:start="9:37" pos:end="9:43"><expr pos:start="9:37" pos:end="9:43"><name pos:start="9:37" pos:end="9:43">new_env</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="11:1" pos:end="11:27">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:27"><call pos:start="11:5" pos:end="11:27"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:27">(<argument pos:start="11:13" pos:end="11:26"><expr pos:start="11:13" pos:end="11:26"><name pos:start="11:13" pos:end="11:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">CPUBreakpoint</name> <modifier pos:start="13:19" pos:end="13:19">*</modifier></type><name pos:start="13:20" pos:end="13:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:17">CPUWatchpoint</name> <modifier pos:start="15:19" pos:end="15:19">*</modifier></type><name pos:start="15:20" pos:end="15:21">wp</name></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <comment type="block" pos:start="21:5" pos:end="21:39">/* Reset non arch specific state */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:23"><expr pos:start="23:5" pos:end="23:22"><call pos:start="23:5" pos:end="23:22"><name pos:start="23:5" pos:end="23:13">cpu_reset</name><argument_list pos:start="23:14" pos:end="23:22">(<argument pos:start="23:15" pos:end="23:21"><expr pos:start="23:15" pos:end="23:21"><name pos:start="23:15" pos:end="23:21">new_cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:10">memcpy</name><argument_list pos:start="27:11" pos:end="27:46">(<argument pos:start="27:12" pos:end="27:18"><expr pos:start="27:12" pos:end="27:18"><name pos:start="27:12" pos:end="27:18">new_env</name></expr></argument>, <argument pos:start="27:21" pos:end="27:23"><expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">env</name></expr></argument>, <argument pos:start="27:26" pos:end="27:45"><expr pos:start="27:26" pos:end="27:45"><sizeof pos:start="27:26" pos:end="27:45">sizeof<argument_list pos:start="27:32" pos:end="27:45">(<argument pos:start="27:33" pos:end="27:44"><expr pos:start="27:33" pos:end="27:44"><name pos:start="27:33" pos:end="27:44">CPUArchState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="31:5" pos:end="35:66">/* Clone all break/watchpoints.

       Note: Once we support ptrace with hw-debug register access, make sure

       BP_CPU break/watchpoints are handled correctly on clone. */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:35"><expr pos:start="37:5" pos:end="37:34"><call pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:15">QTAILQ_INIT</name><argument_list pos:start="37:16" pos:end="37:34">(<argument pos:start="37:17" pos:end="37:33"><expr pos:start="37:17" pos:end="37:33"><operator pos:start="37:17" pos:end="37:17">&amp;</operator><name pos:start="37:18" pos:end="37:33"><name pos:start="37:18" pos:end="37:20">cpu</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:33">breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:34"><call pos:start="39:5" pos:end="39:34"><name pos:start="39:5" pos:end="39:15">QTAILQ_INIT</name><argument_list pos:start="39:16" pos:end="39:34">(<argument pos:start="39:17" pos:end="39:33"><expr pos:start="39:17" pos:end="39:33"><operator pos:start="39:17" pos:end="39:17">&amp;</operator><name pos:start="39:18" pos:end="39:33"><name pos:start="39:18" pos:end="39:20">cpu</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:33">watchpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="41:1" pos:end="41:27">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:27"><call pos:start="41:5" pos:end="41:27"><name pos:start="41:5" pos:end="41:11">defined</name><argument_list pos:start="41:12" pos:end="41:27">(<argument pos:start="41:13" pos:end="41:26"><expr pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:26">TARGET_HAS_ICE</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <macro pos:start="43:5" pos:end="43:48"><name pos:start="43:5" pos:end="43:18">QTAILQ_FOREACH</name><argument_list pos:start="43:19" pos:end="43:48">(<argument pos:start="43:20" pos:end="43:21">bp</argument>, <argument pos:start="43:24" pos:end="43:40">&amp;cpu-&gt;breakpoints</argument>, <argument pos:start="43:43" pos:end="43:47">entry</argument>)</argument_list></macro> <block pos:start="43:50" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:64">

        <expr_stmt pos:start="45:9" pos:end="45:64"><expr pos:start="45:9" pos:end="45:63"><call pos:start="45:9" pos:end="45:63"><name pos:start="45:9" pos:end="45:29">cpu_breakpoint_insert</name><argument_list pos:start="45:30" pos:end="45:63">(<argument pos:start="45:31" pos:end="45:37"><expr pos:start="45:31" pos:end="45:37"><name pos:start="45:31" pos:end="45:37">new_cpu</name></expr></argument>, <argument pos:start="45:40" pos:end="45:45"><expr pos:start="45:40" pos:end="45:45"><name pos:start="45:40" pos:end="45:45"><name pos:start="45:40" pos:end="45:41">bp</name><operator pos:start="45:42" pos:end="45:43">-&gt;</operator><name pos:start="45:44" pos:end="45:45">pc</name></name></expr></argument>, <argument pos:start="45:48" pos:end="45:56"><expr pos:start="45:48" pos:end="45:56"><name pos:start="45:48" pos:end="45:56"><name pos:start="45:48" pos:end="45:49">bp</name><operator pos:start="45:50" pos:end="45:51">-&gt;</operator><name pos:start="45:52" pos:end="45:56">flags</name></name></expr></argument>, <argument pos:start="45:59" pos:end="45:62"><expr pos:start="45:59" pos:end="45:62"><name pos:start="45:59" pos:end="45:62">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

    <macro pos:start="49:5" pos:end="49:48"><name pos:start="49:5" pos:end="49:18">QTAILQ_FOREACH</name><argument_list pos:start="49:19" pos:end="49:48">(<argument pos:start="49:20" pos:end="49:21">wp</argument>, <argument pos:start="49:24" pos:end="49:40">&amp;cpu-&gt;watchpoints</argument>, <argument pos:start="49:43" pos:end="49:47">entry</argument>)</argument_list></macro> <block pos:start="49:50" pos:end="56:0">{<block_content pos:start="51:9" pos:end="51:76">

        <expr_stmt pos:start="51:9" pos:end="51:76"><expr pos:start="51:9" pos:end="51:75"><call pos:start="51:9" pos:end="51:75"><name pos:start="51:9" pos:end="51:29">cpu_watchpoint_insert</name><argument_list pos:start="51:30" pos:end="51:75">(<argument pos:start="51:31" pos:end="51:37"><expr pos:start="51:31" pos:end="51:37"><name pos:start="51:31" pos:end="51:37">new_cpu</name></expr></argument>, <argument pos:start="51:40" pos:end="51:48"><expr pos:start="51:40" pos:end="51:48"><name pos:start="51:40" pos:end="51:48"><name pos:start="51:40" pos:end="51:41">wp</name><operator pos:start="51:42" pos:end="51:43">-&gt;</operator><name pos:start="51:44" pos:end="51:48">vaddr</name></name></expr></argument>, <argument pos:start="51:51" pos:end="51:57"><expr pos:start="51:51" pos:end="51:57"><name pos:start="51:51" pos:end="51:57"><name pos:start="51:51" pos:end="51:52">wp</name><operator pos:start="51:53" pos:end="51:54">-&gt;</operator><name pos:start="51:55" pos:end="51:57">len</name></name></expr></argument>, <argument pos:start="51:60" pos:end="51:68"><expr pos:start="51:60" pos:end="51:68"><name pos:start="51:60" pos:end="51:68"><name pos:start="51:60" pos:end="51:61">wp</name><operator pos:start="51:62" pos:end="51:63">-&gt;</operator><name pos:start="51:64" pos:end="51:68">flags</name></name></expr></argument>, <argument pos:start="51:71" pos:end="51:74"><expr pos:start="51:71" pos:end="51:74"><name pos:start="51:71" pos:end="51:74">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>



    <return pos:start="59:5" pos:end="59:19">return <expr pos:start="59:12" pos:end="59:18"><name pos:start="59:12" pos:end="59:18">new_env</name></expr>;</return>

</block_content>}</block></function>
</unit>
