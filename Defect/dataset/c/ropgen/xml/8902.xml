<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8902.c" pos:tabs="8"><function pos:start="1:1" pos:end="273:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">check_refblocks</name><parameter_list pos:start="1:27" pos:end="5:48">(<parameter pos:start="1:28" pos:end="1:47"><decl pos:start="1:28" pos:end="1:47"><type pos:start="1:28" pos:end="1:47"><name pos:start="1:28" pos:end="1:43">BlockDriverState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">bs</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:69"><decl pos:start="1:50" pos:end="1:69"><type pos:start="1:50" pos:end="1:69"><name pos:start="1:50" pos:end="1:64">BdrvCheckResult</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:69">res</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:40">BdrvCheckMode</name></type> <name pos:start="3:42" pos:end="3:44">fix</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:71"><decl pos:start="3:47" pos:end="3:71"><type pos:start="3:47" pos:end="3:71"><name pos:start="3:47" pos:end="3:54">uint16_t</name> <modifier pos:start="3:56" pos:end="3:56">*</modifier><modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:71">refcount_table</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:47"><decl pos:start="5:28" pos:end="5:47"><type pos:start="5:28" pos:end="5:47"><name pos:start="5:28" pos:end="5:34">int64_t</name> <modifier pos:start="5:36" pos:end="5:36">*</modifier></type><name pos:start="5:37" pos:end="5:47">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="273:1">{<block_content pos:start="9:5" pos:end="271:13">

    <decl_stmt pos:start="9:5" pos:end="9:34"><decl pos:start="9:5" pos:end="9:33"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">BDRVQcowState</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:20">s</name> <init pos:start="9:22" pos:end="9:33">= <expr pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:33"><name pos:start="9:24" pos:end="9:25">bs</name><operator pos:start="9:26" pos:end="9:27">-&gt;</operator><name pos:start="9:28" pos:end="9:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:20"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:11">int64_t</name></type> <name pos:start="11:13" pos:end="11:13">i</name></decl>, <decl pos:start="11:16" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:11"/><name pos:start="11:16" pos:end="11:19">size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:12"><decl pos:start="13:5" pos:end="13:11"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:11">ret</name></decl>;</decl_stmt>



    <for pos:start="17:5" pos:end="267:5">for<control pos:start="17:8" pos:end="17:47">(<init pos:start="17:9" pos:end="17:14"><expr pos:start="17:9" pos:end="17:13"><name pos:start="17:9" pos:end="17:9">i</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <literal type="number" pos:start="17:13" pos:end="17:13">0</literal></expr>;</init> <condition pos:start="17:16" pos:end="17:42"><expr pos:start="17:16" pos:end="17:41"><name pos:start="17:16" pos:end="17:16">i</name> <operator pos:start="17:18" pos:end="17:18">&lt;</operator> <name pos:start="17:20" pos:end="17:41"><name pos:start="17:20" pos:end="17:20">s</name><operator pos:start="17:21" pos:end="17:22">-&gt;</operator><name pos:start="17:23" pos:end="17:41">refcount_table_size</name></name></expr>;</condition> <incr pos:start="17:44" pos:end="17:46"><expr pos:start="17:44" pos:end="17:46"><name pos:start="17:44" pos:end="17:44">i</name><operator pos:start="17:45" pos:end="17:46">++</operator></expr></incr>)</control> <block pos:start="17:49" pos:end="267:5">{<block_content pos:start="19:9" pos:end="265:9">

        <decl_stmt pos:start="19:9" pos:end="19:33"><decl pos:start="19:9" pos:end="19:23"><type pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:16">uint64_t</name></type> <name pos:start="19:18" pos:end="19:23">offset</name></decl>, <decl pos:start="19:26" pos:end="19:32"><type ref="prev" pos:start="19:9" pos:end="19:16"/><name pos:start="19:26" pos:end="19:32">cluster</name></decl>;</decl_stmt>

        <expr_stmt pos:start="21:9" pos:end="21:38"><expr pos:start="21:9" pos:end="21:37"><name pos:start="21:9" pos:end="21:14">offset</name> <operator pos:start="21:16" pos:end="21:16">=</operator> <name pos:start="21:18" pos:end="21:37"><name pos:start="21:18" pos:end="21:18">s</name><operator pos:start="21:19" pos:end="21:20">-&gt;</operator><name pos:start="21:21" pos:end="21:34">refcount_table</name><index pos:start="21:35" pos:end="21:37">[<expr pos:start="21:36" pos:end="21:36"><name pos:start="21:36" pos:end="21:36">i</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:44"><expr pos:start="23:9" pos:end="23:43"><name pos:start="23:9" pos:end="23:15">cluster</name> <operator pos:start="23:17" pos:end="23:17">=</operator> <name pos:start="23:19" pos:end="23:24">offset</name> <operator pos:start="23:26" pos:end="23:27">&gt;&gt;</operator> <name pos:start="23:29" pos:end="23:43"><name pos:start="23:29" pos:end="23:29">s</name><operator pos:start="23:30" pos:end="23:31">-&gt;</operator><name pos:start="23:32" pos:end="23:43">cluster_bits</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="27:9" pos:end="27:49">/* Refcount blocks are cluster aligned */</comment>

        <if_stmt pos:start="29:9" pos:end="39:9"><if pos:start="29:9" pos:end="39:9">if <condition pos:start="29:12" pos:end="29:43">(<expr pos:start="29:13" pos:end="29:42"><call pos:start="29:13" pos:end="29:42"><name pos:start="29:13" pos:end="29:31">offset_into_cluster</name><argument_list pos:start="29:32" pos:end="29:42">(<argument pos:start="29:33" pos:end="29:33"><expr pos:start="29:33" pos:end="29:33"><name pos:start="29:33" pos:end="29:33">s</name></expr></argument>, <argument pos:start="29:36" pos:end="29:41"><expr pos:start="29:36" pos:end="29:41"><name pos:start="29:36" pos:end="29:41">offset</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="29:45" pos:end="39:9">{<block_content pos:start="31:13" pos:end="37:21">

            <expr_stmt pos:start="31:13" pos:end="33:72"><expr pos:start="31:13" pos:end="33:71"><call pos:start="31:13" pos:end="33:71"><name pos:start="31:13" pos:end="31:19">fprintf</name><argument_list pos:start="31:20" pos:end="33:71">(<argument pos:start="31:21" pos:end="31:26"><expr pos:start="31:21" pos:end="31:26"><name pos:start="31:21" pos:end="31:26">stderr</name></expr></argument>, <argument pos:start="31:29" pos:end="33:67"><expr pos:start="31:29" pos:end="33:67"><literal type="string" pos:start="31:29" pos:end="31:52">"ERROR refcount block %"</literal> <name pos:start="31:54" pos:end="31:59">PRId64</name> <literal type="string" pos:start="31:61" pos:end="31:70">" is not "</literal>

                <literal type="string" pos:start="33:17" pos:end="33:67">"cluster aligned; refcount table entry corrupted\n"</literal></expr></argument>, <argument pos:start="33:70" pos:end="33:70"><expr pos:start="33:70" pos:end="33:70"><name pos:start="33:70" pos:end="33:70">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:31"><expr pos:start="35:13" pos:end="35:30"><name pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:15">res</name><operator pos:start="35:16" pos:end="35:17">-&gt;</operator><name pos:start="35:18" pos:end="35:28">corruptions</name></name><operator pos:start="35:29" pos:end="35:30">++</operator></expr>;</expr_stmt>

            <continue pos:start="37:13" pos:end="37:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="43:9" pos:end="171:9"><if pos:start="43:9" pos:end="171:9">if <condition pos:start="43:12" pos:end="43:36">(<expr pos:start="43:13" pos:end="43:35"><name pos:start="43:13" pos:end="43:19">cluster</name> <operator pos:start="43:21" pos:end="43:22">&gt;=</operator> <operator pos:start="43:24" pos:end="43:24">*</operator><name pos:start="43:25" pos:end="43:35">nb_clusters</name></expr>)</condition> <block pos:start="43:38" pos:end="171:9">{<block_content pos:start="45:13" pos:end="169:21">

            <expr_stmt pos:start="45:13" pos:end="47:70"><expr pos:start="45:13" pos:end="47:69"><call pos:start="45:13" pos:end="47:69"><name pos:start="45:13" pos:end="45:19">fprintf</name><argument_list pos:start="45:20" pos:end="47:69">(<argument pos:start="45:21" pos:end="45:26"><expr pos:start="45:21" pos:end="45:26"><name pos:start="45:21" pos:end="45:26">stderr</name></expr></argument>, <argument pos:start="45:29" pos:end="45:78"><expr pos:start="45:29" pos:end="45:78"><literal type="string" pos:start="45:29" pos:end="45:49">"%s refcount block %"</literal> <name pos:start="45:51" pos:end="45:56">PRId64</name> <literal type="string" pos:start="45:58" pos:end="45:78">" is outside image\n"</literal></expr></argument>,

                    <argument pos:start="47:21" pos:end="47:65"><expr pos:start="47:21" pos:end="47:65"><ternary pos:start="47:21" pos:end="47:65"><condition pos:start="47:21" pos:end="47:43"><expr pos:start="47:21" pos:end="47:41"><name pos:start="47:21" pos:end="47:23">fix</name> <operator pos:start="47:25" pos:end="47:25">&amp;</operator> <name pos:start="47:27" pos:end="47:41">BDRV_FIX_ERRORS</name></expr> ?</condition><then pos:start="47:45" pos:end="47:55"> <expr pos:start="47:45" pos:end="47:55"><literal type="string" pos:start="47:45" pos:end="47:55">"Repairing"</literal></expr> </then><else pos:start="47:57" pos:end="47:65">: <expr pos:start="47:59" pos:end="47:65"><literal type="string" pos:start="47:59" pos:end="47:65">"ERROR"</literal></expr></else></ternary></expr></argument>, <argument pos:start="47:68" pos:end="47:68"><expr pos:start="47:68" pos:end="47:68"><name pos:start="47:68" pos:end="47:68">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="51:13" pos:end="167:13"><if pos:start="51:13" pos:end="163:13">if <condition pos:start="51:16" pos:end="51:38">(<expr pos:start="51:17" pos:end="51:37"><name pos:start="51:17" pos:end="51:19">fix</name> <operator pos:start="51:21" pos:end="51:21">&amp;</operator> <name pos:start="51:23" pos:end="51:37">BDRV_FIX_ERRORS</name></expr>)</condition> <block pos:start="51:40" pos:end="163:13">{<block_content pos:start="53:17" pos:end="161:40">

                <decl_stmt pos:start="53:17" pos:end="53:55"><decl pos:start="53:17" pos:end="53:54"><type pos:start="53:17" pos:end="53:23"><name pos:start="53:17" pos:end="53:23">int64_t</name></type> <name pos:start="53:25" pos:end="53:39">old_nb_clusters</name> <init pos:start="53:41" pos:end="53:54">= <expr pos:start="53:43" pos:end="53:54"><operator pos:start="53:43" pos:end="53:43">*</operator><name pos:start="53:44" pos:end="53:54">nb_clusters</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="55:17" pos:end="55:45"><decl pos:start="55:17" pos:end="55:44"><type pos:start="55:17" pos:end="55:26"><name pos:start="55:17" pos:end="55:24">uint16_t</name> <modifier pos:start="55:26" pos:end="55:26">*</modifier></type><name pos:start="55:27" pos:end="55:44">new_refcount_table</name></decl>;</decl_stmt>



                <if_stmt pos:start="59:17" pos:end="65:17"><if pos:start="59:17" pos:end="65:17">if <condition pos:start="59:20" pos:end="59:57">(<expr pos:start="59:21" pos:end="59:56"><name pos:start="59:21" pos:end="59:26">offset</name> <operator pos:start="59:28" pos:end="59:28">&gt;</operator> <name pos:start="59:30" pos:end="59:38">INT64_MAX</name> <operator pos:start="59:40" pos:end="59:40">-</operator> <name pos:start="59:42" pos:end="59:56"><name pos:start="59:42" pos:end="59:42">s</name><operator pos:start="59:43" pos:end="59:44">-&gt;</operator><name pos:start="59:45" pos:end="59:56">cluster_size</name></name></expr>)</condition> <block pos:start="59:59" pos:end="65:17">{<block_content pos:start="61:21" pos:end="63:37">

                    <expr_stmt pos:start="61:21" pos:end="61:34"><expr pos:start="61:21" pos:end="61:33"><name pos:start="61:21" pos:end="61:23">ret</name> <operator pos:start="61:25" pos:end="61:25">=</operator> <operator pos:start="61:27" pos:end="61:27">-</operator><name pos:start="61:28" pos:end="61:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="63:21" pos:end="63:37">goto <name pos:start="63:26" pos:end="63:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="69:17" pos:end="69:72"><expr pos:start="69:17" pos:end="69:71"><name pos:start="69:17" pos:end="69:19">ret</name> <operator pos:start="69:21" pos:end="69:21">=</operator> <call pos:start="69:23" pos:end="69:71"><name pos:start="69:23" pos:end="69:35">bdrv_truncate</name><argument_list pos:start="69:36" pos:end="69:71">(<argument pos:start="69:37" pos:end="69:44"><expr pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:44"><name pos:start="69:37" pos:end="69:38">bs</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:44">file</name></name></expr></argument>, <argument pos:start="69:47" pos:end="69:70"><expr pos:start="69:47" pos:end="69:70"><name pos:start="69:47" pos:end="69:52">offset</name> <operator pos:start="69:54" pos:end="69:54">+</operator> <name pos:start="69:56" pos:end="69:70"><name pos:start="69:56" pos:end="69:56">s</name><operator pos:start="69:57" pos:end="69:58">-&gt;</operator><name pos:start="69:59" pos:end="69:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="71:17" pos:end="75:17"><if pos:start="71:17" pos:end="75:17">if <condition pos:start="71:20" pos:end="71:28">(<expr pos:start="71:21" pos:end="71:27"><name pos:start="71:21" pos:end="71:23">ret</name> <operator pos:start="71:25" pos:end="71:25">&lt;</operator> <literal type="number" pos:start="71:27" pos:end="71:27">0</literal></expr>)</condition> <block pos:start="71:30" pos:end="75:17">{<block_content pos:start="73:21" pos:end="73:37">

                    <goto pos:start="73:21" pos:end="73:37">goto <name pos:start="73:26" pos:end="73:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="77:17" pos:end="77:48"><expr pos:start="77:17" pos:end="77:47"><name pos:start="77:17" pos:end="77:20">size</name> <operator pos:start="77:22" pos:end="77:22">=</operator> <call pos:start="77:24" pos:end="77:47"><name pos:start="77:24" pos:end="77:37">bdrv_getlength</name><argument_list pos:start="77:38" pos:end="77:47">(<argument pos:start="77:39" pos:end="77:46"><expr pos:start="77:39" pos:end="77:46"><name pos:start="77:39" pos:end="77:46"><name pos:start="77:39" pos:end="77:40">bs</name><operator pos:start="77:41" pos:end="77:42">-&gt;</operator><name pos:start="77:43" pos:end="77:46">file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="79:17" pos:end="85:17"><if pos:start="79:17" pos:end="85:17">if <condition pos:start="79:20" pos:end="79:29">(<expr pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:24">size</name> <operator pos:start="79:26" pos:end="79:26">&lt;</operator> <literal type="number" pos:start="79:28" pos:end="79:28">0</literal></expr>)</condition> <block pos:start="79:31" pos:end="85:17">{<block_content pos:start="81:21" pos:end="83:37">

                    <expr_stmt pos:start="81:21" pos:end="81:31"><expr pos:start="81:21" pos:end="81:30"><name pos:start="81:21" pos:end="81:23">ret</name> <operator pos:start="81:25" pos:end="81:25">=</operator> <name pos:start="81:27" pos:end="81:30">size</name></expr>;</expr_stmt>

                    <goto pos:start="83:21" pos:end="83:37">goto <name pos:start="83:26" pos:end="83:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="89:17" pos:end="89:57"><expr pos:start="89:17" pos:end="89:56"><operator pos:start="89:17" pos:end="89:17">*</operator><name pos:start="89:18" pos:end="89:28">nb_clusters</name> <operator pos:start="89:30" pos:end="89:30">=</operator> <call pos:start="89:32" pos:end="89:56"><name pos:start="89:32" pos:end="89:47">size_to_clusters</name><argument_list pos:start="89:48" pos:end="89:56">(<argument pos:start="89:49" pos:end="89:49"><expr pos:start="89:49" pos:end="89:49"><name pos:start="89:49" pos:end="89:49">s</name></expr></argument>, <argument pos:start="89:52" pos:end="89:55"><expr pos:start="89:52" pos:end="89:55"><name pos:start="89:52" pos:end="89:55">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="91:17" pos:end="91:56"><expr pos:start="91:17" pos:end="91:55"><call pos:start="91:17" pos:end="91:55"><name pos:start="91:17" pos:end="91:22">assert</name><argument_list pos:start="91:23" pos:end="91:55">(<argument pos:start="91:24" pos:end="91:54"><expr pos:start="91:24" pos:end="91:54"><operator pos:start="91:24" pos:end="91:24">*</operator><name pos:start="91:25" pos:end="91:35">nb_clusters</name> <operator pos:start="91:37" pos:end="91:38">&gt;=</operator> <name pos:start="91:40" pos:end="91:54">old_nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <expr_stmt pos:start="95:17" pos:end="99:77"><expr pos:start="95:17" pos:end="99:76"><name pos:start="95:17" pos:end="95:34">new_refcount_table</name> <operator pos:start="95:36" pos:end="95:36">=</operator> <call pos:start="95:38" pos:end="99:76"><name pos:start="95:38" pos:end="95:50">g_try_realloc</name><argument_list pos:start="95:51" pos:end="99:76">(<argument pos:start="95:52" pos:end="95:66"><expr pos:start="95:52" pos:end="95:66"><operator pos:start="95:52" pos:end="95:52">*</operator><name pos:start="95:53" pos:end="95:66">refcount_table</name></expr></argument>,

                                                   <argument pos:start="97:52" pos:end="99:75"><expr pos:start="97:52" pos:end="99:75"><operator pos:start="97:52" pos:end="97:52">*</operator><name pos:start="97:53" pos:end="97:63">nb_clusters</name> <operator pos:start="97:65" pos:end="97:65">*</operator>

                                                   <sizeof pos:start="99:52" pos:end="99:75">sizeof<argument_list pos:start="99:58" pos:end="99:75">(<argument pos:start="99:59" pos:end="99:74"><expr pos:start="99:59" pos:end="99:74"><operator pos:start="99:59" pos:end="99:59">*</operator><operator pos:start="99:60" pos:end="99:60">*</operator><name pos:start="99:61" pos:end="99:74">refcount_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="101:17" pos:end="109:17"><if pos:start="101:17" pos:end="109:17">if <condition pos:start="101:20" pos:end="101:40">(<expr pos:start="101:21" pos:end="101:39"><operator pos:start="101:21" pos:end="101:21">!</operator><name pos:start="101:22" pos:end="101:39">new_refcount_table</name></expr>)</condition> <block pos:start="101:42" pos:end="109:17">{<block_content pos:start="103:21" pos:end="107:35">

                    <expr_stmt pos:start="103:21" pos:end="103:51"><expr pos:start="103:21" pos:end="103:50"><operator pos:start="103:21" pos:end="103:21">*</operator><name pos:start="103:22" pos:end="103:32">nb_clusters</name> <operator pos:start="103:34" pos:end="103:34">=</operator> <name pos:start="103:36" pos:end="103:50">old_nb_clusters</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="105:21" pos:end="105:40"><expr pos:start="105:21" pos:end="105:39"><name pos:start="105:21" pos:end="105:37"><name pos:start="105:21" pos:end="105:23">res</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:37">check_errors</name></name><operator pos:start="105:38" pos:end="105:39">++</operator></expr>;</expr_stmt>

                    <return pos:start="107:21" pos:end="107:35">return <expr pos:start="107:28" pos:end="107:34"><operator pos:start="107:28" pos:end="107:28">-</operator><name pos:start="107:29" pos:end="107:34">ENOMEM</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="111:17" pos:end="111:53"><expr pos:start="111:17" pos:end="111:52"><operator pos:start="111:17" pos:end="111:17">*</operator><name pos:start="111:18" pos:end="111:31">refcount_table</name> <operator pos:start="111:33" pos:end="111:33">=</operator> <name pos:start="111:35" pos:end="111:52">new_refcount_table</name></expr>;</expr_stmt>



                <expr_stmt pos:start="115:17" pos:end="119:49"><expr pos:start="115:17" pos:end="119:48"><call pos:start="115:17" pos:end="119:48"><name pos:start="115:17" pos:end="115:22">memset</name><argument_list pos:start="115:23" pos:end="119:48">(<argument pos:start="115:24" pos:end="115:56"><expr pos:start="115:24" pos:end="115:56"><operator pos:start="115:24" pos:end="115:24">*</operator><name pos:start="115:25" pos:end="115:38">refcount_table</name> <operator pos:start="115:40" pos:end="115:40">+</operator> <name pos:start="115:42" pos:end="115:56">old_nb_clusters</name></expr></argument>, <argument pos:start="115:59" pos:end="115:59"><expr pos:start="115:59" pos:end="115:59"><literal type="number" pos:start="115:59" pos:end="115:59">0</literal></expr></argument>,

                       <argument pos:start="117:24" pos:end="119:47"><expr pos:start="117:24" pos:end="119:47"><operator pos:start="117:24" pos:end="117:24">(</operator><operator pos:start="117:25" pos:end="117:25">*</operator><name pos:start="117:26" pos:end="117:36">nb_clusters</name> <operator pos:start="117:38" pos:end="117:38">-</operator> <name pos:start="117:40" pos:end="117:54">old_nb_clusters</name><operator pos:start="117:55" pos:end="117:55">)</operator> <operator pos:start="117:57" pos:end="117:57">*</operator>

                       <sizeof pos:start="119:24" pos:end="119:47">sizeof<argument_list pos:start="119:30" pos:end="119:47">(<argument pos:start="119:31" pos:end="119:46"><expr pos:start="119:31" pos:end="119:46"><operator pos:start="119:31" pos:end="119:31">*</operator><operator pos:start="119:32" pos:end="119:32">*</operator><name pos:start="119:33" pos:end="119:46">refcount_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="123:17" pos:end="129:17"><if pos:start="123:17" pos:end="129:17">if <condition pos:start="123:20" pos:end="123:44">(<expr pos:start="123:21" pos:end="123:43"><name pos:start="123:21" pos:end="123:27">cluster</name> <operator pos:start="123:29" pos:end="123:30">&gt;=</operator> <operator pos:start="123:32" pos:end="123:32">*</operator><name pos:start="123:33" pos:end="123:43">nb_clusters</name></expr>)</condition> <block pos:start="123:46" pos:end="129:17">{<block_content pos:start="125:21" pos:end="127:37">

                    <expr_stmt pos:start="125:21" pos:end="125:34"><expr pos:start="125:21" pos:end="125:33"><name pos:start="125:21" pos:end="125:23">ret</name> <operator pos:start="125:25" pos:end="125:25">=</operator> <operator pos:start="125:27" pos:end="125:27">-</operator><name pos:start="125:28" pos:end="125:33">EINVAL</name></expr>;</expr_stmt>

                    <goto pos:start="127:21" pos:end="127:37">goto <name pos:start="127:26" pos:end="127:36">resize_fail</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <expr_stmt pos:start="133:17" pos:end="133:41"><expr pos:start="133:17" pos:end="133:40"><name pos:start="133:17" pos:end="133:38"><name pos:start="133:17" pos:end="133:19">res</name><operator pos:start="133:20" pos:end="133:21">-&gt;</operator><name pos:start="133:22" pos:end="133:38">corruptions_fixed</name></name><operator pos:start="133:39" pos:end="133:40">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="135:17" pos:end="137:61"><expr pos:start="135:17" pos:end="137:60"><name pos:start="135:17" pos:end="135:19">ret</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="137:60"><name pos:start="135:23" pos:end="135:35">inc_refcounts</name><argument_list pos:start="135:36" pos:end="137:60">(<argument pos:start="135:37" pos:end="135:38"><expr pos:start="135:37" pos:end="135:38"><name pos:start="135:37" pos:end="135:38">bs</name></expr></argument>, <argument pos:start="135:41" pos:end="135:43"><expr pos:start="135:41" pos:end="135:43"><name pos:start="135:41" pos:end="135:43">res</name></expr></argument>, <argument pos:start="135:46" pos:end="135:59"><expr pos:start="135:46" pos:end="135:59"><name pos:start="135:46" pos:end="135:59">refcount_table</name></expr></argument>, <argument pos:start="135:62" pos:end="135:72"><expr pos:start="135:62" pos:end="135:72"><name pos:start="135:62" pos:end="135:72">nb_clusters</name></expr></argument>,

                                    <argument pos:start="137:37" pos:end="137:42"><expr pos:start="137:37" pos:end="137:42"><name pos:start="137:37" pos:end="137:42">offset</name></expr></argument>, <argument pos:start="137:45" pos:end="137:59"><expr pos:start="137:45" pos:end="137:59"><name pos:start="137:45" pos:end="137:59"><name pos:start="137:45" pos:end="137:45">s</name><operator pos:start="137:46" pos:end="137:47">-&gt;</operator><name pos:start="137:48" pos:end="137:59">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="139:17" pos:end="143:17"><if pos:start="139:17" pos:end="143:17">if <condition pos:start="139:20" pos:end="139:28">(<expr pos:start="139:21" pos:end="139:27"><name pos:start="139:21" pos:end="139:23">ret</name> <operator pos:start="139:25" pos:end="139:25">&lt;</operator> <literal type="number" pos:start="139:27" pos:end="139:27">0</literal></expr>)</condition> <block pos:start="139:30" pos:end="143:17">{<block_content pos:start="141:21" pos:end="141:31">

                    <return pos:start="141:21" pos:end="141:31">return <expr pos:start="141:28" pos:end="141:30"><name pos:start="141:28" pos:end="141:30">ret</name></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="145:17" pos:end="149:53">/* No need to check whether the refcount is now greater than 1:

                 * This area was just allocated and zeroed, so it can only be

                 * exactly 1 after inc_refcounts() */</comment>

                <continue pos:start="151:17" pos:end="151:25">continue;</continue>



<label pos:start="155:1" pos:end="155:12"><name pos:start="155:1" pos:end="155:11">resize_fail</name>:</label>

                <expr_stmt pos:start="157:17" pos:end="157:35"><expr pos:start="157:17" pos:end="157:34"><name pos:start="157:17" pos:end="157:32"><name pos:start="157:17" pos:end="157:19">res</name><operator pos:start="157:20" pos:end="157:21">-&gt;</operator><name pos:start="157:22" pos:end="157:32">corruptions</name></name><operator pos:start="157:33" pos:end="157:34">++</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="161:40"><expr pos:start="159:17" pos:end="161:39"><call pos:start="159:17" pos:end="161:39"><name pos:start="159:17" pos:end="159:23">fprintf</name><argument_list pos:start="159:24" pos:end="161:39">(<argument pos:start="159:25" pos:end="159:30"><expr pos:start="159:25" pos:end="159:30"><name pos:start="159:25" pos:end="159:30">stderr</name></expr></argument>, <argument pos:start="159:33" pos:end="159:68"><expr pos:start="159:33" pos:end="159:68"><literal type="string" pos:start="159:33" pos:end="159:68">"ERROR could not resize image: %s\n"</literal></expr></argument>,

                        <argument pos:start="161:25" pos:end="161:38"><expr pos:start="161:25" pos:end="161:38"><call pos:start="161:25" pos:end="161:38"><name pos:start="161:25" pos:end="161:32">strerror</name><argument_list pos:start="161:33" pos:end="161:38">(<argument pos:start="161:34" pos:end="161:37"><expr pos:start="161:34" pos:end="161:37"><operator pos:start="161:34" pos:end="161:34">-</operator><name pos:start="161:35" pos:end="161:37">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="163:15" pos:end="167:13">else <block pos:start="163:20" pos:end="167:13">{<block_content pos:start="165:17" pos:end="165:35">

                <expr_stmt pos:start="165:17" pos:end="165:35"><expr pos:start="165:17" pos:end="165:34"><name pos:start="165:17" pos:end="165:32"><name pos:start="165:17" pos:end="165:19">res</name><operator pos:start="165:20" pos:end="165:21">-&gt;</operator><name pos:start="165:22" pos:end="165:32">corruptions</name></name><operator pos:start="165:33" pos:end="165:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <continue pos:start="169:13" pos:end="169:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="175:9" pos:end="265:9"><if pos:start="175:9" pos:end="265:9">if <condition pos:start="175:12" pos:end="175:24">(<expr pos:start="175:13" pos:end="175:23"><name pos:start="175:13" pos:end="175:18">offset</name> <operator pos:start="175:20" pos:end="175:21">!=</operator> <literal type="number" pos:start="175:23" pos:end="175:23">0</literal></expr>)</condition> <block pos:start="175:26" pos:end="265:9">{<block_content pos:start="177:13" pos:end="263:13">

            <expr_stmt pos:start="177:13" pos:end="179:57"><expr pos:start="177:13" pos:end="179:56"><name pos:start="177:13" pos:end="177:15">ret</name> <operator pos:start="177:17" pos:end="177:17">=</operator> <call pos:start="177:19" pos:end="179:56"><name pos:start="177:19" pos:end="177:31">inc_refcounts</name><argument_list pos:start="177:32" pos:end="179:56">(<argument pos:start="177:33" pos:end="177:34"><expr pos:start="177:33" pos:end="177:34"><name pos:start="177:33" pos:end="177:34">bs</name></expr></argument>, <argument pos:start="177:37" pos:end="177:39"><expr pos:start="177:37" pos:end="177:39"><name pos:start="177:37" pos:end="177:39">res</name></expr></argument>, <argument pos:start="177:42" pos:end="177:55"><expr pos:start="177:42" pos:end="177:55"><name pos:start="177:42" pos:end="177:55">refcount_table</name></expr></argument>, <argument pos:start="177:58" pos:end="177:68"><expr pos:start="177:58" pos:end="177:68"><name pos:start="177:58" pos:end="177:68">nb_clusters</name></expr></argument>,

                                <argument pos:start="179:33" pos:end="179:38"><expr pos:start="179:33" pos:end="179:38"><name pos:start="179:33" pos:end="179:38">offset</name></expr></argument>, <argument pos:start="179:41" pos:end="179:55"><expr pos:start="179:41" pos:end="179:55"><name pos:start="179:41" pos:end="179:55"><name pos:start="179:41" pos:end="179:41">s</name><operator pos:start="179:42" pos:end="179:43">-&gt;</operator><name pos:start="179:44" pos:end="179:55">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="181:13" pos:end="185:13"><if pos:start="181:13" pos:end="185:13">if <condition pos:start="181:16" pos:end="181:24">(<expr pos:start="181:17" pos:end="181:23"><name pos:start="181:17" pos:end="181:19">ret</name> <operator pos:start="181:21" pos:end="181:21">&lt;</operator> <literal type="number" pos:start="181:23" pos:end="181:23">0</literal></expr>)</condition> <block pos:start="181:26" pos:end="185:13">{<block_content pos:start="183:17" pos:end="183:27">

                <return pos:start="183:17" pos:end="183:27">return <expr pos:start="183:24" pos:end="183:26"><name pos:start="183:24" pos:end="183:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="187:13" pos:end="263:13"><if pos:start="187:13" pos:end="263:13">if <condition pos:start="187:16" pos:end="187:48">(<expr pos:start="187:17" pos:end="187:47"><operator pos:start="187:17" pos:end="187:17">(</operator><operator pos:start="187:18" pos:end="187:18">*</operator><name pos:start="187:19" pos:end="187:32">refcount_table</name><operator pos:start="187:33" pos:end="187:33">)</operator><index pos:start="187:34" pos:end="187:42">[<expr pos:start="187:35" pos:end="187:41"><name pos:start="187:35" pos:end="187:41">cluster</name></expr>]</index> <operator pos:start="187:44" pos:end="187:45">!=</operator> <literal type="number" pos:start="187:47" pos:end="187:47">1</literal></expr>)</condition> <block pos:start="187:50" pos:end="263:13">{<block_content pos:start="189:17" pos:end="261:17">

                <expr_stmt pos:start="189:17" pos:end="197:51"><expr pos:start="189:17" pos:end="197:50"><call pos:start="189:17" pos:end="197:50"><name pos:start="189:17" pos:end="189:23">fprintf</name><argument_list pos:start="189:24" pos:end="197:50">(<argument pos:start="189:25" pos:end="189:30"><expr pos:start="189:25" pos:end="189:30"><name pos:start="189:25" pos:end="189:30">stderr</name></expr></argument>, <argument pos:start="189:33" pos:end="191:36"><expr pos:start="189:33" pos:end="191:36"><literal type="string" pos:start="189:33" pos:end="189:53">"%s refcount block %"</literal> <name pos:start="189:55" pos:end="189:60">PRId64</name>

                    <literal type="string" pos:start="191:21" pos:end="191:36">" refcount=%d\n"</literal></expr></argument>,

                    <argument pos:start="193:21" pos:end="195:51"><expr pos:start="193:21" pos:end="195:51"><ternary pos:start="193:21" pos:end="195:51"><condition pos:start="193:21" pos:end="193:43"><expr pos:start="193:21" pos:end="193:41"><name pos:start="193:21" pos:end="193:23">fix</name> <operator pos:start="193:25" pos:end="193:25">&amp;</operator> <name pos:start="193:27" pos:end="193:41">BDRV_FIX_ERRORS</name></expr> ?</condition><then pos:start="193:45" pos:end="193:55"> <expr pos:start="193:45" pos:end="193:55"><literal type="string" pos:start="193:45" pos:end="193:55">"Repairing"</literal></expr> </then><else pos:start="193:57" pos:end="195:51">:

                                            <expr pos:start="195:45" pos:end="195:51"><literal type="string" pos:start="195:45" pos:end="195:51">"ERROR"</literal></expr></else></ternary></expr></argument>,

                    <argument pos:start="197:21" pos:end="197:21"><expr pos:start="197:21" pos:end="197:21"><name pos:start="197:21" pos:end="197:21">i</name></expr></argument>, <argument pos:start="197:24" pos:end="197:49"><expr pos:start="197:24" pos:end="197:49"><operator pos:start="197:24" pos:end="197:24">(</operator><operator pos:start="197:25" pos:end="197:25">*</operator><name pos:start="197:26" pos:end="197:39">refcount_table</name><operator pos:start="197:40" pos:end="197:40">)</operator><index pos:start="197:41" pos:end="197:49">[<expr pos:start="197:42" pos:end="197:48"><name pos:start="197:42" pos:end="197:48">cluster</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                <if_stmt pos:start="201:17" pos:end="261:17"><if pos:start="201:17" pos:end="257:17">if <condition pos:start="201:20" pos:end="201:42">(<expr pos:start="201:21" pos:end="201:41"><name pos:start="201:21" pos:end="201:23">fix</name> <operator pos:start="201:25" pos:end="201:25">&amp;</operator> <name pos:start="201:27" pos:end="201:41">BDRV_FIX_ERRORS</name></expr>)</condition> <block pos:start="201:44" pos:end="257:17">{<block_content pos:start="203:21" pos:end="255:45">

                    <decl_stmt pos:start="203:21" pos:end="203:39"><decl pos:start="203:21" pos:end="203:38"><type pos:start="203:21" pos:end="203:27"><name pos:start="203:21" pos:end="203:27">int64_t</name></type> <name pos:start="203:29" pos:end="203:38">new_offset</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="207:21" pos:end="207:71"><expr pos:start="207:21" pos:end="207:70"><name pos:start="207:21" pos:end="207:30">new_offset</name> <operator pos:start="207:32" pos:end="207:32">=</operator> <call pos:start="207:34" pos:end="207:70"><name pos:start="207:34" pos:end="207:55">realloc_refcount_block</name><argument_list pos:start="207:56" pos:end="207:70">(<argument pos:start="207:57" pos:end="207:58"><expr pos:start="207:57" pos:end="207:58"><name pos:start="207:57" pos:end="207:58">bs</name></expr></argument>, <argument pos:start="207:61" pos:end="207:61"><expr pos:start="207:61" pos:end="207:61"><name pos:start="207:61" pos:end="207:61">i</name></expr></argument>, <argument pos:start="207:64" pos:end="207:69"><expr pos:start="207:64" pos:end="207:69"><name pos:start="207:64" pos:end="207:69">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="209:21" pos:end="215:21"><if pos:start="209:21" pos:end="215:21">if <condition pos:start="209:24" pos:end="209:39">(<expr pos:start="209:25" pos:end="209:38"><name pos:start="209:25" pos:end="209:34">new_offset</name> <operator pos:start="209:36" pos:end="209:36">&lt;</operator> <literal type="number" pos:start="209:38" pos:end="209:38">0</literal></expr>)</condition> <block pos:start="209:41" pos:end="215:21">{<block_content pos:start="211:25" pos:end="213:33">

                        <expr_stmt pos:start="211:25" pos:end="211:43"><expr pos:start="211:25" pos:end="211:42"><name pos:start="211:25" pos:end="211:40"><name pos:start="211:25" pos:end="211:27">res</name><operator pos:start="211:28" pos:end="211:29">-&gt;</operator><name pos:start="211:30" pos:end="211:40">corruptions</name></name><operator pos:start="211:41" pos:end="211:42">++</operator></expr>;</expr_stmt>

                        <continue pos:start="213:25" pos:end="213:33">continue;</continue>

                    </block_content>}</block></if></if_stmt>



                    <comment type="block" pos:start="219:21" pos:end="219:42">/* update refcounts */</comment>

                    <if_stmt pos:start="221:21" pos:end="239:21"><if pos:start="221:21" pos:end="239:21">if <condition pos:start="221:24" pos:end="221:72">(<expr pos:start="221:25" pos:end="221:71"><operator pos:start="221:25" pos:end="221:25">(</operator><name pos:start="221:26" pos:end="221:35">new_offset</name> <operator pos:start="221:37" pos:end="221:38">&gt;&gt;</operator> <name pos:start="221:40" pos:end="221:54"><name pos:start="221:40" pos:end="221:40">s</name><operator pos:start="221:41" pos:end="221:42">-&gt;</operator><name pos:start="221:43" pos:end="221:54">cluster_bits</name></name><operator pos:start="221:55" pos:end="221:55">)</operator> <operator pos:start="221:57" pos:end="221:58">&gt;=</operator> <operator pos:start="221:60" pos:end="221:60">*</operator><name pos:start="221:61" pos:end="221:71">nb_clusters</name></expr>)</condition> <block pos:start="221:74" pos:end="239:21">{<block_content pos:start="225:25" pos:end="237:57">

                        <comment type="block" pos:start="223:25" pos:end="223:71">/* increase refcount_table size if necessary */</comment>

                        <decl_stmt pos:start="225:25" pos:end="225:59"><decl pos:start="225:25" pos:end="225:58"><type pos:start="225:25" pos:end="225:27"><name pos:start="225:25" pos:end="225:27">int</name></type> <name pos:start="225:29" pos:end="225:43">old_nb_clusters</name> <init pos:start="225:45" pos:end="225:58">= <expr pos:start="225:47" pos:end="225:58"><operator pos:start="225:47" pos:end="225:47">*</operator><name pos:start="225:48" pos:end="225:58">nb_clusters</name></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="227:25" pos:end="227:75"><expr pos:start="227:25" pos:end="227:74"><operator pos:start="227:25" pos:end="227:25">*</operator><name pos:start="227:26" pos:end="227:36">nb_clusters</name> <operator pos:start="227:38" pos:end="227:38">=</operator> <operator pos:start="227:40" pos:end="227:40">(</operator><name pos:start="227:41" pos:end="227:50">new_offset</name> <operator pos:start="227:52" pos:end="227:53">&gt;&gt;</operator> <name pos:start="227:55" pos:end="227:69"><name pos:start="227:55" pos:end="227:55">s</name><operator pos:start="227:56" pos:end="227:57">-&gt;</operator><name pos:start="227:58" pos:end="227:69">cluster_bits</name></name><operator pos:start="227:70" pos:end="227:70">)</operator> <operator pos:start="227:72" pos:end="227:72">+</operator> <literal type="number" pos:start="227:74" pos:end="227:74">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="229:25" pos:end="231:64"><expr pos:start="229:25" pos:end="231:63"><operator pos:start="229:25" pos:end="229:25">*</operator><name pos:start="229:26" pos:end="229:39">refcount_table</name> <operator pos:start="229:41" pos:end="229:41">=</operator> <call pos:start="229:43" pos:end="231:63"><name pos:start="229:43" pos:end="229:49">g_renew</name><argument_list pos:start="229:50" pos:end="231:63">(<argument pos:start="229:51" pos:end="229:58"><expr pos:start="229:51" pos:end="229:58"><name pos:start="229:51" pos:end="229:58">uint16_t</name></expr></argument>, <argument pos:start="229:61" pos:end="229:75"><expr pos:start="229:61" pos:end="229:75"><operator pos:start="229:61" pos:end="229:61">*</operator><name pos:start="229:62" pos:end="229:75">refcount_table</name></expr></argument>,

                                                  <argument pos:start="231:51" pos:end="231:62"><expr pos:start="231:51" pos:end="231:62"><operator pos:start="231:51" pos:end="231:51">*</operator><name pos:start="231:52" pos:end="231:62">nb_clusters</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="233:25" pos:end="237:57"><expr pos:start="233:25" pos:end="237:56"><call pos:start="233:25" pos:end="237:56"><name pos:start="233:25" pos:end="233:30">memset</name><argument_list pos:start="233:31" pos:end="237:56">(<argument pos:start="233:32" pos:end="233:66"><expr pos:start="233:32" pos:end="233:66"><operator pos:start="233:32" pos:end="233:32">&amp;</operator><operator pos:start="233:33" pos:end="233:33">(</operator><operator pos:start="233:34" pos:end="233:34">*</operator><name pos:start="233:35" pos:end="233:48">refcount_table</name><operator pos:start="233:49" pos:end="233:49">)</operator><index pos:start="233:50" pos:end="233:66">[<expr pos:start="233:51" pos:end="233:65"><name pos:start="233:51" pos:end="233:65">old_nb_clusters</name></expr>]</index></expr></argument>, <argument pos:start="233:69" pos:end="233:69"><expr pos:start="233:69" pos:end="233:69"><literal type="number" pos:start="233:69" pos:end="233:69">0</literal></expr></argument>,

                               <argument pos:start="235:32" pos:end="237:55"><expr pos:start="235:32" pos:end="237:55"><operator pos:start="235:32" pos:end="235:32">(</operator><operator pos:start="235:33" pos:end="235:33">*</operator><name pos:start="235:34" pos:end="235:44">nb_clusters</name> <operator pos:start="235:46" pos:end="235:46">-</operator> <name pos:start="235:48" pos:end="235:62">old_nb_clusters</name><operator pos:start="235:63" pos:end="235:63">)</operator> <operator pos:start="235:65" pos:end="235:65">*</operator>

                               <sizeof pos:start="237:32" pos:end="237:55">sizeof<argument_list pos:start="237:38" pos:end="237:55">(<argument pos:start="237:39" pos:end="237:54"><expr pos:start="237:39" pos:end="237:54"><operator pos:start="237:39" pos:end="237:39">*</operator><operator pos:start="237:40" pos:end="237:40">*</operator><name pos:start="237:41" pos:end="237:54">refcount_table</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="241:21" pos:end="241:49"><expr pos:start="241:21" pos:end="241:48"><operator pos:start="241:21" pos:end="241:21">(</operator><operator pos:start="241:22" pos:end="241:22">*</operator><name pos:start="241:23" pos:end="241:36">refcount_table</name><operator pos:start="241:37" pos:end="241:37">)</operator><index pos:start="241:38" pos:end="241:46">[<expr pos:start="241:39" pos:end="241:45"><name pos:start="241:39" pos:end="241:45">cluster</name></expr>]</index><operator pos:start="241:47" pos:end="241:48">--</operator></expr>;</expr_stmt>

                    <expr_stmt pos:start="243:21" pos:end="245:69"><expr pos:start="243:21" pos:end="245:68"><name pos:start="243:21" pos:end="243:23">ret</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <call pos:start="243:27" pos:end="245:68"><name pos:start="243:27" pos:end="243:39">inc_refcounts</name><argument_list pos:start="243:40" pos:end="245:68">(<argument pos:start="243:41" pos:end="243:42"><expr pos:start="243:41" pos:end="243:42"><name pos:start="243:41" pos:end="243:42">bs</name></expr></argument>, <argument pos:start="243:45" pos:end="243:47"><expr pos:start="243:45" pos:end="243:47"><name pos:start="243:45" pos:end="243:47">res</name></expr></argument>, <argument pos:start="243:50" pos:end="243:63"><expr pos:start="243:50" pos:end="243:63"><name pos:start="243:50" pos:end="243:63">refcount_table</name></expr></argument>, <argument pos:start="243:66" pos:end="243:76"><expr pos:start="243:66" pos:end="243:76"><name pos:start="243:66" pos:end="243:76">nb_clusters</name></expr></argument>,

                                        <argument pos:start="245:41" pos:end="245:50"><expr pos:start="245:41" pos:end="245:50"><name pos:start="245:41" pos:end="245:50">new_offset</name></expr></argument>, <argument pos:start="245:53" pos:end="245:67"><expr pos:start="245:53" pos:end="245:67"><name pos:start="245:53" pos:end="245:67"><name pos:start="245:53" pos:end="245:53">s</name><operator pos:start="245:54" pos:end="245:55">-&gt;</operator><name pos:start="245:56" pos:end="245:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="247:21" pos:end="251:21"><if pos:start="247:21" pos:end="251:21">if <condition pos:start="247:24" pos:end="247:32">(<expr pos:start="247:25" pos:end="247:31"><name pos:start="247:25" pos:end="247:27">ret</name> <operator pos:start="247:29" pos:end="247:29">&lt;</operator> <literal type="number" pos:start="247:31" pos:end="247:31">0</literal></expr>)</condition> <block pos:start="247:34" pos:end="251:21">{<block_content pos:start="249:25" pos:end="249:35">

                        <return pos:start="249:25" pos:end="249:35">return <expr pos:start="249:32" pos:end="249:34"><name pos:start="249:32" pos:end="249:34">ret</name></expr>;</return>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="255:21" pos:end="255:45"><expr pos:start="255:21" pos:end="255:44"><name pos:start="255:21" pos:end="255:42"><name pos:start="255:21" pos:end="255:23">res</name><operator pos:start="255:24" pos:end="255:25">-&gt;</operator><name pos:start="255:26" pos:end="255:42">corruptions_fixed</name></name><operator pos:start="255:43" pos:end="255:44">++</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="257:19" pos:end="261:17">else <block pos:start="257:24" pos:end="261:17">{<block_content pos:start="259:21" pos:end="259:39">

                    <expr_stmt pos:start="259:21" pos:end="259:39"><expr pos:start="259:21" pos:end="259:38"><name pos:start="259:21" pos:end="259:36"><name pos:start="259:21" pos:end="259:23">res</name><operator pos:start="259:24" pos:end="259:25">-&gt;</operator><name pos:start="259:26" pos:end="259:36">corruptions</name></name><operator pos:start="259:37" pos:end="259:38">++</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <return pos:start="271:5" pos:end="271:13">return <expr pos:start="271:12" pos:end="271:12"><literal type="number" pos:start="271:12" pos:end="271:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
