<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7824.c" pos:tabs="8"><function pos:start="1:1" pos:end="157:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">nbd_receive_list</name><parameter_list pos:start="1:28" pos:end="3:41">(<parameter pos:start="1:29" pos:end="1:43"><decl pos:start="1:29" pos:end="1:43"><type pos:start="1:29" pos:end="1:43"><name pos:start="1:29" pos:end="1:38">QIOChannel</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ioc</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:61"><decl pos:start="1:46" pos:end="1:61"><type pos:start="1:46" pos:end="1:61"><specifier pos:start="1:46" pos:end="1:50">const</specifier> <name pos:start="1:52" pos:end="1:55">char</name> <modifier pos:start="1:57" pos:end="1:57">*</modifier></type><name pos:start="1:58" pos:end="1:61">want</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:74"><decl pos:start="1:64" pos:end="1:74"><type pos:start="1:64" pos:end="1:74"><name pos:start="1:64" pos:end="1:67">bool</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:74">match</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:40"><decl pos:start="3:29" pos:end="3:40"><type pos:start="3:29" pos:end="3:40"><name pos:start="3:29" pos:end="3:33">Error</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier><modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:40">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="157:1">{<block_content pos:start="7:5" pos:end="155:13">

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:17">nbd_opt_reply</name></type> <name pos:start="7:19" pos:end="7:23">reply</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:16">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:20">namelen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:8"><name pos:start="13:5" pos:end="13:8">char</name></type> <name pos:start="13:10" pos:end="13:36"><name pos:start="13:10" pos:end="13:13">name</name><index pos:start="13:14" pos:end="13:36">[<expr pos:start="13:15" pos:end="13:35"><name pos:start="13:15" pos:end="13:31">NBD_MAX_NAME_SIZE</name> <operator pos:start="13:33" pos:end="13:33">+</operator> <literal type="number" pos:start="13:35" pos:end="13:35">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:13"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:13">error</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:70">(<expr pos:start="19:9" pos:end="19:69"><call pos:start="19:9" pos:end="19:65"><name pos:start="19:9" pos:end="19:32">nbd_receive_option_reply</name><argument_list pos:start="19:33" pos:end="19:65">(<argument pos:start="19:34" pos:end="19:36"><expr pos:start="19:34" pos:end="19:36"><name pos:start="19:34" pos:end="19:36">ioc</name></expr></argument>, <argument pos:start="19:39" pos:end="19:50"><expr pos:start="19:39" pos:end="19:50"><name pos:start="19:39" pos:end="19:50">NBD_OPT_LIST</name></expr></argument>, <argument pos:start="19:53" pos:end="19:58"><expr pos:start="19:53" pos:end="19:58"><operator pos:start="19:53" pos:end="19:53">&amp;</operator><name pos:start="19:54" pos:end="19:58">reply</name></expr></argument>, <argument pos:start="19:61" pos:end="19:64"><expr pos:start="19:61" pos:end="19:64"><name pos:start="19:61" pos:end="19:64">errp</name></expr></argument>)</argument_list></call> <operator pos:start="19:67" pos:end="19:67">&lt;</operator> <literal type="number" pos:start="19:69" pos:end="19:69">0</literal></expr>)</condition> <block pos:start="19:72" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:18">

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:52"><expr pos:start="25:5" pos:end="25:51"><name pos:start="25:5" pos:end="25:9">error</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <call pos:start="25:13" pos:end="25:51"><name pos:start="25:13" pos:end="25:32">nbd_handle_reply_err</name><argument_list pos:start="25:33" pos:end="25:51">(<argument pos:start="25:34" pos:end="25:36"><expr pos:start="25:34" pos:end="25:36"><name pos:start="25:34" pos:end="25:36">ioc</name></expr></argument>, <argument pos:start="25:39" pos:end="25:44"><expr pos:start="25:39" pos:end="25:44"><operator pos:start="25:39" pos:end="25:39">&amp;</operator><name pos:start="25:40" pos:end="25:44">reply</name></expr></argument>, <argument pos:start="25:47" pos:end="25:50"><expr pos:start="25:47" pos:end="25:50"><name pos:start="25:47" pos:end="25:50">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="27:5" pos:end="37:5"><if pos:start="27:5" pos:end="37:5">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><name pos:start="27:9" pos:end="27:13">error</name> <operator pos:start="27:15" pos:end="27:16">&lt;=</operator> <literal type="number" pos:start="27:18" pos:end="27:18">0</literal></expr>)</condition> <block pos:start="27:21" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:21">

        <comment type="block" pos:start="29:9" pos:end="31:61">/* The server did not support NBD_OPT_LIST, so set *match on

         * the assumption that any name will be accepted.  */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><operator pos:start="33:9" pos:end="33:9">*</operator><name pos:start="33:10" pos:end="33:14">match</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <name pos:start="33:18" pos:end="33:21">true</name></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:21">return <expr pos:start="35:16" pos:end="35:20"><name pos:start="35:16" pos:end="35:20">error</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:23"><expr pos:start="39:5" pos:end="39:22"><name pos:start="39:5" pos:end="39:7">len</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:22"><name pos:start="39:11" pos:end="39:15">reply</name><operator pos:start="39:16" pos:end="39:16">.</operator><name pos:start="39:17" pos:end="39:22">length</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="67:5"><if pos:start="43:5" pos:end="57:5">if <condition pos:start="43:8" pos:end="43:34">(<expr pos:start="43:9" pos:end="43:33"><name pos:start="43:9" pos:end="43:18"><name pos:start="43:9" pos:end="43:13">reply</name><operator pos:start="43:14" pos:end="43:14">.</operator><name pos:start="43:15" pos:end="43:18">type</name></name> <operator pos:start="43:20" pos:end="43:21">==</operator> <name pos:start="43:23" pos:end="43:33">NBD_REP_ACK</name></expr>)</condition> <block pos:start="43:36" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:17">

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:21">(<expr pos:start="45:13" pos:end="45:20"><name pos:start="45:13" pos:end="45:15">len</name> <operator pos:start="45:17" pos:end="45:18">!=</operator> <literal type="number" pos:start="45:20" pos:end="45:20">0</literal></expr>)</condition> <block pos:start="45:23" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:22">

            <expr_stmt pos:start="47:13" pos:end="47:63"><expr pos:start="47:13" pos:end="47:62"><call pos:start="47:13" pos:end="47:62"><name pos:start="47:13" pos:end="47:22">error_setg</name><argument_list pos:start="47:23" pos:end="47:62">(<argument pos:start="47:24" pos:end="47:27"><expr pos:start="47:24" pos:end="47:27"><name pos:start="47:24" pos:end="47:27">errp</name></expr></argument>, <argument pos:start="47:30" pos:end="47:61"><expr pos:start="47:30" pos:end="47:61"><literal type="string" pos:start="47:30" pos:end="47:61">"length too long for option end"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="49:13" pos:end="49:36"><expr pos:start="49:13" pos:end="49:35"><call pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:30">nbd_send_opt_abort</name><argument_list pos:start="49:31" pos:end="49:35">(<argument pos:start="49:32" pos:end="49:34"><expr pos:start="49:32" pos:end="49:34"><name pos:start="49:32" pos:end="49:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:22">return <expr pos:start="51:20" pos:end="51:21"><operator pos:start="51:20" pos:end="51:20">-</operator><literal type="number" pos:start="51:21" pos:end="51:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="55:9" pos:end="55:17">return <expr pos:start="55:16" pos:end="55:16"><literal type="number" pos:start="55:16" pos:end="55:16">0</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="57:7" pos:end="67:5">else if <condition pos:start="57:15" pos:end="57:44">(<expr pos:start="57:16" pos:end="57:43"><name pos:start="57:16" pos:end="57:25"><name pos:start="57:16" pos:end="57:20">reply</name><operator pos:start="57:21" pos:end="57:21">.</operator><name pos:start="57:22" pos:end="57:25">type</name></name> <operator pos:start="57:27" pos:end="57:28">!=</operator> <name pos:start="57:30" pos:end="57:43">NBD_REP_SERVER</name></expr>)</condition> <block pos:start="57:46" pos:end="67:5">{<block_content pos:start="59:9" pos:end="65:18">

        <expr_stmt pos:start="59:9" pos:end="61:47"><expr pos:start="59:9" pos:end="61:46"><call pos:start="59:9" pos:end="61:46"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="61:46">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:72"><expr pos:start="59:26" pos:end="59:72"><literal type="string" pos:start="59:26" pos:end="59:50">"Unexpected reply type %"</literal> <name pos:start="59:52" pos:end="59:57">PRIx32</name> <literal type="string" pos:start="59:59" pos:end="59:72">" expected %x"</literal></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:29"><expr pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:29"><name pos:start="61:20" pos:end="61:24">reply</name><operator pos:start="61:25" pos:end="61:25">.</operator><name pos:start="61:26" pos:end="61:29">type</name></name></expr></argument>, <argument pos:start="61:32" pos:end="61:45"><expr pos:start="61:32" pos:end="61:45"><name pos:start="61:32" pos:end="61:45">NBD_REP_SERVER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:32"><expr pos:start="63:9" pos:end="63:31"><call pos:start="63:9" pos:end="63:31"><name pos:start="63:9" pos:end="63:26">nbd_send_opt_abort</name><argument_list pos:start="63:27" pos:end="63:31">(<argument pos:start="63:28" pos:end="63:30"><expr pos:start="63:28" pos:end="63:30"><name pos:start="63:28" pos:end="63:30">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:18">return <expr pos:start="65:16" pos:end="65:17"><operator pos:start="65:16" pos:end="65:16">-</operator><literal type="number" pos:start="65:17" pos:end="65:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="71:5" pos:end="79:5"><if pos:start="71:5" pos:end="79:5">if <condition pos:start="71:8" pos:end="71:59">(<expr pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:11">len</name> <operator pos:start="71:13" pos:end="71:13">&lt;</operator> <sizeof pos:start="71:15" pos:end="71:29">sizeof<argument_list pos:start="71:21" pos:end="71:29">(<argument pos:start="71:22" pos:end="71:28"><expr pos:start="71:22" pos:end="71:28"><name pos:start="71:22" pos:end="71:28">namelen</name></expr></argument>)</argument_list></sizeof> <operator pos:start="71:31" pos:end="71:32">||</operator> <name pos:start="71:34" pos:end="71:36">len</name> <operator pos:start="71:38" pos:end="71:38">&gt;</operator> <name pos:start="71:40" pos:end="71:58">NBD_MAX_BUFFER_SIZE</name></expr>)</condition> <block pos:start="71:61" pos:end="79:5">{<block_content pos:start="73:9" pos:end="77:18">

        <expr_stmt pos:start="73:9" pos:end="73:66"><expr pos:start="73:9" pos:end="73:65"><call pos:start="73:9" pos:end="73:65"><name pos:start="73:9" pos:end="73:18">error_setg</name><argument_list pos:start="73:19" pos:end="73:65">(<argument pos:start="73:20" pos:end="73:23"><expr pos:start="73:20" pos:end="73:23"><name pos:start="73:20" pos:end="73:23">errp</name></expr></argument>, <argument pos:start="73:26" pos:end="73:59"><expr pos:start="73:26" pos:end="73:59"><literal type="string" pos:start="73:26" pos:end="73:52">"incorrect option length %"</literal> <name pos:start="73:54" pos:end="73:59">PRIu32</name></expr></argument>, <argument pos:start="73:62" pos:end="73:64"><expr pos:start="73:62" pos:end="73:64"><name pos:start="73:62" pos:end="73:64">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:32"><expr pos:start="75:9" pos:end="75:31"><call pos:start="75:9" pos:end="75:31"><name pos:start="75:9" pos:end="75:26">nbd_send_opt_abort</name><argument_list pos:start="75:27" pos:end="75:31">(<argument pos:start="75:28" pos:end="75:30"><expr pos:start="75:28" pos:end="75:30"><name pos:start="75:28" pos:end="75:30">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="77:9" pos:end="77:18">return <expr pos:start="77:16" pos:end="77:17"><operator pos:start="77:16" pos:end="77:16">-</operator><literal type="number" pos:start="77:17" pos:end="77:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if <condition pos:start="81:8" pos:end="81:60">(<expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:55"><name pos:start="81:9" pos:end="81:17">read_sync</name><argument_list pos:start="81:18" pos:end="81:55">(<argument pos:start="81:19" pos:end="81:21"><expr pos:start="81:19" pos:end="81:21"><name pos:start="81:19" pos:end="81:21">ioc</name></expr></argument>, <argument pos:start="81:24" pos:end="81:31"><expr pos:start="81:24" pos:end="81:31"><operator pos:start="81:24" pos:end="81:24">&amp;</operator><name pos:start="81:25" pos:end="81:31">namelen</name></expr></argument>, <argument pos:start="81:34" pos:end="81:48"><expr pos:start="81:34" pos:end="81:48"><sizeof pos:start="81:34" pos:end="81:48">sizeof<argument_list pos:start="81:40" pos:end="81:48">(<argument pos:start="81:41" pos:end="81:47"><expr pos:start="81:41" pos:end="81:47"><name pos:start="81:41" pos:end="81:47">namelen</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="81:51" pos:end="81:54"><expr pos:start="81:51" pos:end="81:54"><name pos:start="81:51" pos:end="81:54">errp</name></expr></argument>)</argument_list></call> <operator pos:start="81:57" pos:end="81:57">&lt;</operator> <literal type="number" pos:start="81:59" pos:end="81:59">0</literal></expr>)</condition> <block pos:start="81:62" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:18">

        <expr_stmt pos:start="83:9" pos:end="83:65"><expr pos:start="83:9" pos:end="83:64"><call pos:start="83:9" pos:end="83:64"><name pos:start="83:9" pos:end="83:21">error_prepend</name><argument_list pos:start="83:22" pos:end="83:64">(<argument pos:start="83:23" pos:end="83:26"><expr pos:start="83:23" pos:end="83:26"><name pos:start="83:23" pos:end="83:26">errp</name></expr></argument>, <argument pos:start="83:29" pos:end="83:63"><expr pos:start="83:29" pos:end="83:63"><literal type="string" pos:start="83:29" pos:end="83:63">"failed to read option name length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:32"><expr pos:start="85:9" pos:end="85:31"><call pos:start="85:9" pos:end="85:31"><name pos:start="85:9" pos:end="85:26">nbd_send_opt_abort</name><argument_list pos:start="85:27" pos:end="85:31">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="87:9" pos:end="87:18">return <expr pos:start="87:16" pos:end="87:17"><operator pos:start="87:16" pos:end="87:16">-</operator><literal type="number" pos:start="87:17" pos:end="87:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:35"><expr pos:start="91:5" pos:end="91:34"><name pos:start="91:5" pos:end="91:11">namelen</name> <operator pos:start="91:13" pos:end="91:13">=</operator> <call pos:start="91:15" pos:end="91:34"><name pos:start="91:15" pos:end="91:25">be32_to_cpu</name><argument_list pos:start="91:26" pos:end="91:34">(<argument pos:start="91:27" pos:end="91:33"><expr pos:start="91:27" pos:end="91:33"><name pos:start="91:27" pos:end="91:33">namelen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:27"><expr pos:start="93:5" pos:end="93:26"><name pos:start="93:5" pos:end="93:7">len</name> <operator pos:start="93:9" pos:end="93:10">-=</operator> <sizeof pos:start="93:12" pos:end="93:26">sizeof<argument_list pos:start="93:18" pos:end="93:26">(<argument pos:start="93:19" pos:end="93:25"><expr pos:start="93:19" pos:end="93:25"><name pos:start="93:19" pos:end="93:25">namelen</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="103:5"><if pos:start="95:5" pos:end="103:5">if <condition pos:start="95:8" pos:end="95:22">(<expr pos:start="95:9" pos:end="95:21"><name pos:start="95:9" pos:end="95:11">len</name> <operator pos:start="95:13" pos:end="95:13">&lt;</operator> <name pos:start="95:15" pos:end="95:21">namelen</name></expr>)</condition> <block pos:start="95:24" pos:end="103:5">{<block_content pos:start="97:9" pos:end="101:18">

        <expr_stmt pos:start="97:9" pos:end="97:57"><expr pos:start="97:9" pos:end="97:56"><call pos:start="97:9" pos:end="97:56"><name pos:start="97:9" pos:end="97:18">error_setg</name><argument_list pos:start="97:19" pos:end="97:56">(<argument pos:start="97:20" pos:end="97:23"><expr pos:start="97:20" pos:end="97:23"><name pos:start="97:20" pos:end="97:23">errp</name></expr></argument>, <argument pos:start="97:26" pos:end="97:55"><expr pos:start="97:26" pos:end="97:55"><literal type="string" pos:start="97:26" pos:end="97:55">"incorrect option name length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="99:9" pos:end="99:32"><expr pos:start="99:9" pos:end="99:31"><call pos:start="99:9" pos:end="99:31"><name pos:start="99:9" pos:end="99:26">nbd_send_opt_abort</name><argument_list pos:start="99:27" pos:end="99:31">(<argument pos:start="99:28" pos:end="99:30"><expr pos:start="99:28" pos:end="99:30"><name pos:start="99:28" pos:end="99:30">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="101:9" pos:end="101:18">return <expr pos:start="101:16" pos:end="101:17"><operator pos:start="101:16" pos:end="101:16">-</operator><literal type="number" pos:start="101:17" pos:end="101:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="105:5" pos:end="119:5"><if pos:start="105:5" pos:end="119:5">if <condition pos:start="105:8" pos:end="105:32">(<expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:15">namelen</name> <operator pos:start="105:17" pos:end="105:18">!=</operator> <call pos:start="105:20" pos:end="105:31"><name pos:start="105:20" pos:end="105:25">strlen</name><argument_list pos:start="105:26" pos:end="105:31">(<argument pos:start="105:27" pos:end="105:30"><expr pos:start="105:27" pos:end="105:30"><name pos:start="105:27" pos:end="105:30">want</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:34" pos:end="119:5">{<block_content pos:start="107:9" pos:end="117:17">

        <if_stmt pos:start="107:9" pos:end="115:9"><if pos:start="107:9" pos:end="115:9">if <condition pos:start="107:12" pos:end="107:42">(<expr pos:start="107:13" pos:end="107:41"><call pos:start="107:13" pos:end="107:37"><name pos:start="107:13" pos:end="107:21">drop_sync</name><argument_list pos:start="107:22" pos:end="107:37">(<argument pos:start="107:23" pos:end="107:25"><expr pos:start="107:23" pos:end="107:25"><name pos:start="107:23" pos:end="107:25">ioc</name></expr></argument>, <argument pos:start="107:28" pos:end="107:30"><expr pos:start="107:28" pos:end="107:30"><name pos:start="107:28" pos:end="107:30">len</name></expr></argument>, <argument pos:start="107:33" pos:end="107:36"><expr pos:start="107:33" pos:end="107:36"><name pos:start="107:33" pos:end="107:36">errp</name></expr></argument>)</argument_list></call> <operator pos:start="107:39" pos:end="107:39">&lt;</operator> <literal type="number" pos:start="107:41" pos:end="107:41">0</literal></expr>)</condition> <block pos:start="107:44" pos:end="115:9">{<block_content pos:start="109:13" pos:end="113:22">

            <expr_stmt pos:start="109:13" pos:end="109:80"><expr pos:start="109:13" pos:end="109:79"><call pos:start="109:13" pos:end="109:79"><name pos:start="109:13" pos:end="109:25">error_prepend</name><argument_list pos:start="109:26" pos:end="109:79">(<argument pos:start="109:27" pos:end="109:30"><expr pos:start="109:27" pos:end="109:30"><name pos:start="109:27" pos:end="109:30">errp</name></expr></argument>, <argument pos:start="109:33" pos:end="109:78"><expr pos:start="109:33" pos:end="109:78"><literal type="string" pos:start="109:33" pos:end="109:78">"failed to skip export name with wrong length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:36"><expr pos:start="111:13" pos:end="111:35"><call pos:start="111:13" pos:end="111:35"><name pos:start="111:13" pos:end="111:30">nbd_send_opt_abort</name><argument_list pos:start="111:31" pos:end="111:35">(<argument pos:start="111:32" pos:end="111:34"><expr pos:start="111:32" pos:end="111:34"><name pos:start="111:32" pos:end="111:34">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="113:13" pos:end="113:22">return <expr pos:start="113:20" pos:end="113:21"><operator pos:start="113:20" pos:end="113:20">-</operator><literal type="number" pos:start="113:21" pos:end="113:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="117:9" pos:end="117:17">return <expr pos:start="117:16" pos:end="117:16"><literal type="number" pos:start="117:16" pos:end="117:16">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="123:5" pos:end="123:35"><expr pos:start="123:5" pos:end="123:34"><call pos:start="123:5" pos:end="123:34"><name pos:start="123:5" pos:end="123:10">assert</name><argument_list pos:start="123:11" pos:end="123:34">(<argument pos:start="123:12" pos:end="123:33"><expr pos:start="123:12" pos:end="123:33"><name pos:start="123:12" pos:end="123:18">namelen</name> <operator pos:start="123:20" pos:end="123:20">&lt;</operator> <sizeof pos:start="123:22" pos:end="123:33">sizeof<argument_list pos:start="123:28" pos:end="123:33">(<argument pos:start="123:29" pos:end="123:32"><expr pos:start="123:29" pos:end="123:32"><name pos:start="123:29" pos:end="123:32">name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="125:5" pos:end="133:5"><if pos:start="125:5" pos:end="133:5">if <condition pos:start="125:8" pos:end="125:48">(<expr pos:start="125:9" pos:end="125:47"><call pos:start="125:9" pos:end="125:43"><name pos:start="125:9" pos:end="125:17">read_sync</name><argument_list pos:start="125:18" pos:end="125:43">(<argument pos:start="125:19" pos:end="125:21"><expr pos:start="125:19" pos:end="125:21"><name pos:start="125:19" pos:end="125:21">ioc</name></expr></argument>, <argument pos:start="125:24" pos:end="125:27"><expr pos:start="125:24" pos:end="125:27"><name pos:start="125:24" pos:end="125:27">name</name></expr></argument>, <argument pos:start="125:30" pos:end="125:36"><expr pos:start="125:30" pos:end="125:36"><name pos:start="125:30" pos:end="125:36">namelen</name></expr></argument>, <argument pos:start="125:39" pos:end="125:42"><expr pos:start="125:39" pos:end="125:42"><name pos:start="125:39" pos:end="125:42">errp</name></expr></argument>)</argument_list></call> <operator pos:start="125:45" pos:end="125:45">&lt;</operator> <literal type="number" pos:start="125:47" pos:end="125:47">0</literal></expr>)</condition> <block pos:start="125:50" pos:end="133:5">{<block_content pos:start="127:9" pos:end="131:18">

        <expr_stmt pos:start="127:9" pos:end="127:58"><expr pos:start="127:9" pos:end="127:57"><call pos:start="127:9" pos:end="127:57"><name pos:start="127:9" pos:end="127:21">error_prepend</name><argument_list pos:start="127:22" pos:end="127:57">(<argument pos:start="127:23" pos:end="127:26"><expr pos:start="127:23" pos:end="127:26"><name pos:start="127:23" pos:end="127:26">errp</name></expr></argument>, <argument pos:start="127:29" pos:end="127:56"><expr pos:start="127:29" pos:end="127:56"><literal type="string" pos:start="127:29" pos:end="127:56">"failed to read export name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:32"><expr pos:start="129:9" pos:end="129:31"><call pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:26">nbd_send_opt_abort</name><argument_list pos:start="129:27" pos:end="129:31">(<argument pos:start="129:28" pos:end="129:30"><expr pos:start="129:28" pos:end="129:30"><name pos:start="129:28" pos:end="129:30">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="131:9" pos:end="131:18">return <expr pos:start="131:16" pos:end="131:17"><operator pos:start="131:16" pos:end="131:16">-</operator><literal type="number" pos:start="131:17" pos:end="131:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:25"><expr pos:start="135:5" pos:end="135:24"><name pos:start="135:5" pos:end="135:17"><name pos:start="135:5" pos:end="135:8">name</name><index pos:start="135:9" pos:end="135:17">[<expr pos:start="135:10" pos:end="135:16"><name pos:start="135:10" pos:end="135:16">namelen</name></expr>]</index></name> <operator pos:start="135:19" pos:end="135:19">=</operator> <literal type="char" pos:start="135:21" pos:end="135:24">'\0'</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:19"><expr pos:start="137:5" pos:end="137:18"><name pos:start="137:5" pos:end="137:7">len</name> <operator pos:start="137:9" pos:end="137:10">-=</operator> <name pos:start="137:12" pos:end="137:18">namelen</name></expr>;</expr_stmt>

    <if_stmt pos:start="139:5" pos:end="147:5"><if pos:start="139:5" pos:end="147:5">if <condition pos:start="139:8" pos:end="139:38">(<expr pos:start="139:9" pos:end="139:37"><call pos:start="139:9" pos:end="139:33"><name pos:start="139:9" pos:end="139:17">drop_sync</name><argument_list pos:start="139:18" pos:end="139:33">(<argument pos:start="139:19" pos:end="139:21"><expr pos:start="139:19" pos:end="139:21"><name pos:start="139:19" pos:end="139:21">ioc</name></expr></argument>, <argument pos:start="139:24" pos:end="139:26"><expr pos:start="139:24" pos:end="139:26"><name pos:start="139:24" pos:end="139:26">len</name></expr></argument>, <argument pos:start="139:29" pos:end="139:32"><expr pos:start="139:29" pos:end="139:32"><name pos:start="139:29" pos:end="139:32">errp</name></expr></argument>)</argument_list></call> <operator pos:start="139:35" pos:end="139:35">&lt;</operator> <literal type="number" pos:start="139:37" pos:end="139:37">0</literal></expr>)</condition> <block pos:start="139:40" pos:end="147:5">{<block_content pos:start="141:9" pos:end="145:18">

        <expr_stmt pos:start="141:9" pos:end="141:65"><expr pos:start="141:9" pos:end="141:64"><call pos:start="141:9" pos:end="141:64"><name pos:start="141:9" pos:end="141:21">error_prepend</name><argument_list pos:start="141:22" pos:end="141:64">(<argument pos:start="141:23" pos:end="141:26"><expr pos:start="141:23" pos:end="141:26"><name pos:start="141:23" pos:end="141:26">errp</name></expr></argument>, <argument pos:start="141:29" pos:end="141:63"><expr pos:start="141:29" pos:end="141:63"><literal type="string" pos:start="141:29" pos:end="141:63">"failed to read export description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:32"><expr pos:start="143:9" pos:end="143:31"><call pos:start="143:9" pos:end="143:31"><name pos:start="143:9" pos:end="143:26">nbd_send_opt_abort</name><argument_list pos:start="143:27" pos:end="143:31">(<argument pos:start="143:28" pos:end="143:30"><expr pos:start="143:28" pos:end="143:30"><name pos:start="143:28" pos:end="143:30">ioc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="145:9" pos:end="145:18">return <expr pos:start="145:16" pos:end="145:17"><operator pos:start="145:16" pos:end="145:16">-</operator><literal type="number" pos:start="145:17" pos:end="145:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="149:5" pos:end="153:5"><if pos:start="149:5" pos:end="153:5">if <condition pos:start="149:8" pos:end="149:28">(<expr pos:start="149:9" pos:end="149:27"><operator pos:start="149:9" pos:end="149:9">!</operator><call pos:start="149:10" pos:end="149:27"><name pos:start="149:10" pos:end="149:15">strcmp</name><argument_list pos:start="149:16" pos:end="149:27">(<argument pos:start="149:17" pos:end="149:20"><expr pos:start="149:17" pos:end="149:20"><name pos:start="149:17" pos:end="149:20">name</name></expr></argument>, <argument pos:start="149:23" pos:end="149:26"><expr pos:start="149:23" pos:end="149:26"><name pos:start="149:23" pos:end="149:26">want</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="149:30" pos:end="153:5">{<block_content pos:start="151:9" pos:end="151:22">

        <expr_stmt pos:start="151:9" pos:end="151:22"><expr pos:start="151:9" pos:end="151:21"><operator pos:start="151:9" pos:end="151:9">*</operator><name pos:start="151:10" pos:end="151:14">match</name> <operator pos:start="151:16" pos:end="151:16">=</operator> <name pos:start="151:18" pos:end="151:21">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="155:5" pos:end="155:13">return <expr pos:start="155:12" pos:end="155:12"><literal type="number" pos:start="155:12" pos:end="155:12">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
