<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26088.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:25">decode_segment</name><parameter_list pos:start="1:26" pos:end="1:83">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:39">TAKDecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:55"><decl pos:start="1:45" pos:end="1:55"><type pos:start="1:45" pos:end="1:55"><name pos:start="1:45" pos:end="1:50">int8_t</name></type> <name pos:start="1:52" pos:end="1:55">mode</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:73"><decl pos:start="1:58" pos:end="1:73"><type pos:start="1:58" pos:end="1:73"><name pos:start="1:58" pos:end="1:64">int32_t</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:73">decoded</name></decl></parameter>, <parameter pos:start="1:76" pos:end="1:82"><decl pos:start="1:76" pos:end="1:82"><type pos:start="1:76" pos:end="1:82"><name pos:start="1:76" pos:end="1:78">int</name></type> <name pos:start="1:80" pos:end="1:82">len</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:13">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:22"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:17">CParam</name></name></type> <name pos:start="5:19" pos:end="5:22">code</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">GetBitContext</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:21">gb</name> <init pos:start="7:23" pos:end="7:30">= <expr pos:start="7:25" pos:end="7:30"><operator pos:start="7:25" pos:end="7:25">&amp;</operator><name pos:start="7:26" pos:end="7:30"><name pos:start="7:26" pos:end="7:26">s</name><operator pos:start="7:27" pos:end="7:28">-&gt;</operator><name pos:start="7:29" pos:end="7:30">gb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:14">(<expr pos:start="13:9" pos:end="13:13"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:13">mode</name></expr>)</condition> <block pos:start="13:16" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:17">

        <expr_stmt pos:start="15:9" pos:end="15:51"><expr pos:start="15:9" pos:end="15:50"><call pos:start="15:9" pos:end="15:50"><name pos:start="15:9" pos:end="15:14">memset</name><argument_list pos:start="15:15" pos:end="15:50">(<argument pos:start="15:16" pos:end="15:22"><expr pos:start="15:16" pos:end="15:22"><name pos:start="15:16" pos:end="15:22">decoded</name></expr></argument>, <argument pos:start="15:25" pos:end="15:25"><expr pos:start="15:25" pos:end="15:25"><literal type="number" pos:start="15:25" pos:end="15:25">0</literal></expr></argument>, <argument pos:start="15:28" pos:end="15:49"><expr pos:start="15:28" pos:end="15:49"><name pos:start="15:28" pos:end="15:30">len</name> <operator pos:start="15:32" pos:end="15:32">*</operator> <sizeof pos:start="15:34" pos:end="15:49">sizeof<argument_list pos:start="15:40" pos:end="15:49">(<argument pos:start="15:41" pos:end="15:48"><expr pos:start="15:41" pos:end="15:48"><operator pos:start="15:41" pos:end="15:41">*</operator><name pos:start="15:42" pos:end="15:48">decoded</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="17:9" pos:end="17:17">return <expr pos:start="17:16" pos:end="17:16"><literal type="number" pos:start="17:16" pos:end="17:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="23:5" pos:end="25:35"><if pos:start="23:5" pos:end="25:35">if <condition pos:start="23:8" pos:end="23:38">(<expr pos:start="23:9" pos:end="23:37"><name pos:start="23:9" pos:end="23:12">mode</name> <operator pos:start="23:14" pos:end="23:14">&gt;</operator> <call pos:start="23:16" pos:end="23:37"><name pos:start="23:16" pos:end="23:29">FF_ARRAY_ELEMS</name><argument_list pos:start="23:30" pos:end="23:37">(<argument pos:start="23:31" pos:end="23:36"><expr pos:start="23:31" pos:end="23:36"><name pos:start="23:31" pos:end="23:36">xcodes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:35"><block_content pos:start="25:9" pos:end="25:35">

        <return pos:start="25:9" pos:end="25:35">return <expr pos:start="25:16" pos:end="25:34"><name pos:start="25:16" pos:end="25:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:28"><expr pos:start="27:5" pos:end="27:27"><name pos:start="27:5" pos:end="27:8">code</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <name pos:start="27:12" pos:end="27:27"><name pos:start="27:12" pos:end="27:17">xcodes</name><index pos:start="27:18" pos:end="27:27">[<expr pos:start="27:19" pos:end="27:26"><name pos:start="27:19" pos:end="27:22">mode</name> <operator pos:start="27:24" pos:end="27:24">-</operator> <literal type="number" pos:start="27:26" pos:end="27:26">1</literal></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="31:5" pos:end="79:5">for <control pos:start="31:9" pos:end="31:29">(<init pos:start="31:10" pos:end="31:15"><expr pos:start="31:10" pos:end="31:14"><name pos:start="31:10" pos:end="31:10">i</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</init> <condition pos:start="31:17" pos:end="31:24"><expr pos:start="31:17" pos:end="31:23"><name pos:start="31:17" pos:end="31:17">i</name> <operator pos:start="31:19" pos:end="31:19">&lt;</operator> <name pos:start="31:21" pos:end="31:23">len</name></expr>;</condition> <incr pos:start="31:26" pos:end="31:28"><expr pos:start="31:26" pos:end="31:28"><name pos:start="31:26" pos:end="31:26">i</name><operator pos:start="31:27" pos:end="31:28">++</operator></expr></incr>)</control> <block pos:start="31:31" pos:end="79:5">{<block_content pos:start="33:9" pos:end="77:41">

        <decl_stmt pos:start="33:9" pos:end="33:45"><decl pos:start="33:9" pos:end="33:44"><type pos:start="33:9" pos:end="33:11"><name pos:start="33:9" pos:end="33:11">int</name></type> <name pos:start="33:13" pos:end="33:13">x</name> <init pos:start="33:15" pos:end="33:44">= <expr pos:start="33:17" pos:end="33:44"><call pos:start="33:17" pos:end="33:44"><name pos:start="33:17" pos:end="33:29">get_bits_long</name><argument_list pos:start="33:30" pos:end="33:44">(<argument pos:start="33:31" pos:end="33:32"><expr pos:start="33:31" pos:end="33:32"><name pos:start="33:31" pos:end="33:32">gb</name></expr></argument>, <argument pos:start="33:35" pos:end="33:43"><expr pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:43"><name pos:start="33:35" pos:end="33:38">code</name><operator pos:start="33:39" pos:end="33:39">.</operator><name pos:start="33:40" pos:end="33:43">init</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="35:9" pos:end="75:9"><if pos:start="35:9" pos:end="75:9">if <condition pos:start="35:12" pos:end="35:46">(<expr pos:start="35:13" pos:end="35:45"><name pos:start="35:13" pos:end="35:13">x</name> <operator pos:start="35:15" pos:end="35:16">&gt;=</operator> <name pos:start="35:18" pos:end="35:28"><name pos:start="35:18" pos:end="35:21">code</name><operator pos:start="35:22" pos:end="35:22">.</operator><name pos:start="35:23" pos:end="35:28">escape</name></name> <operator pos:start="35:30" pos:end="35:31">&amp;&amp;</operator> <call pos:start="35:33" pos:end="35:45"><name pos:start="35:33" pos:end="35:41">get_bits1</name><argument_list pos:start="35:42" pos:end="35:45">(<argument pos:start="35:43" pos:end="35:44"><expr pos:start="35:43" pos:end="35:44"><name pos:start="35:43" pos:end="35:44">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="35:48" pos:end="75:9">{<block_content pos:start="37:13" pos:end="73:33">

            <expr_stmt pos:start="37:13" pos:end="37:32"><expr pos:start="37:13" pos:end="37:31"><name pos:start="37:13" pos:end="37:13">x</name> <operator pos:start="37:15" pos:end="37:16">|=</operator> <literal type="number" pos:start="37:18" pos:end="37:18">1</literal> <operator pos:start="37:20" pos:end="37:21">&lt;&lt;</operator> <name pos:start="37:23" pos:end="37:31"><name pos:start="37:23" pos:end="37:26">code</name><operator pos:start="37:27" pos:end="37:27">.</operator><name pos:start="37:28" pos:end="37:31">init</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="39:13" pos:end="73:33"><if pos:start="39:13" pos:end="71:13">if <condition pos:start="39:16" pos:end="39:34">(<expr pos:start="39:17" pos:end="39:33"><name pos:start="39:17" pos:end="39:17">x</name> <operator pos:start="39:19" pos:end="39:20">&gt;=</operator> <name pos:start="39:22" pos:end="39:33"><name pos:start="39:22" pos:end="39:25">code</name><operator pos:start="39:26" pos:end="39:26">.</operator><name pos:start="39:27" pos:end="39:33">aescape</name></name></expr>)</condition> <block pos:start="39:36" pos:end="71:13">{<block_content pos:start="41:17" pos:end="69:58">

                <decl_stmt pos:start="41:17" pos:end="41:48"><decl pos:start="41:17" pos:end="41:47"><type pos:start="41:17" pos:end="41:19"><name pos:start="41:17" pos:end="41:19">int</name></type> <name pos:start="41:21" pos:end="41:25">scale</name> <init pos:start="41:27" pos:end="41:47">= <expr pos:start="41:29" pos:end="41:47"><call pos:start="41:29" pos:end="41:47"><name pos:start="41:29" pos:end="41:37">get_unary</name><argument_list pos:start="41:38" pos:end="41:47">(<argument pos:start="41:39" pos:end="41:40"><expr pos:start="41:39" pos:end="41:40"><name pos:start="41:39" pos:end="41:40">gb</name></expr></argument>, <argument pos:start="41:43" pos:end="41:43"><expr pos:start="41:43" pos:end="41:43"><literal type="number" pos:start="41:43" pos:end="41:43">1</literal></expr></argument>, <argument pos:start="41:46" pos:end="41:46"><expr pos:start="41:46" pos:end="41:46"><literal type="number" pos:start="41:46" pos:end="41:46">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="43:17" pos:end="69:58"><if pos:start="43:17" pos:end="67:17">if <condition pos:start="43:20" pos:end="43:31">(<expr pos:start="43:21" pos:end="43:30"><name pos:start="43:21" pos:end="43:25">scale</name> <operator pos:start="43:27" pos:end="43:28">==</operator> <literal type="number" pos:start="43:30" pos:end="43:30">9</literal></expr>)</condition> <block pos:start="43:33" pos:end="67:17">{<block_content pos:start="45:21" pos:end="65:35">

                    <decl_stmt pos:start="45:21" pos:end="45:53"><decl pos:start="45:21" pos:end="45:52"><type pos:start="45:21" pos:end="45:23"><name pos:start="45:21" pos:end="45:23">int</name></type> <name pos:start="45:25" pos:end="45:34">scale_bits</name> <init pos:start="45:36" pos:end="45:52">= <expr pos:start="45:38" pos:end="45:52"><call pos:start="45:38" pos:end="45:52"><name pos:start="45:38" pos:end="45:45">get_bits</name><argument_list pos:start="45:46" pos:end="45:52">(<argument pos:start="45:47" pos:end="45:48"><expr pos:start="45:47" pos:end="45:48"><name pos:start="45:47" pos:end="45:48">gb</name></expr></argument>, <argument pos:start="45:51" pos:end="45:51"><expr pos:start="45:51" pos:end="45:51"><literal type="number" pos:start="45:51" pos:end="45:51">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="47:21" pos:end="63:21"><if pos:start="47:21" pos:end="63:21">if <condition pos:start="47:24" pos:end="47:39">(<expr pos:start="47:25" pos:end="47:38"><name pos:start="47:25" pos:end="47:34">scale_bits</name> <operator pos:start="47:36" pos:end="47:36">&gt;</operator> <literal type="number" pos:start="47:38" pos:end="47:38">0</literal></expr>)</condition> <block pos:start="47:41" pos:end="63:21">{<block_content pos:start="49:25" pos:end="61:51">

                        <if_stmt pos:start="49:25" pos:end="57:25"><if pos:start="49:25" pos:end="57:25">if <condition pos:start="49:28" pos:end="49:44">(<expr pos:start="49:29" pos:end="49:43"><name pos:start="49:29" pos:end="49:38">scale_bits</name> <operator pos:start="49:40" pos:end="49:41">==</operator> <literal type="number" pos:start="49:43" pos:end="49:43">7</literal></expr>)</condition> <block pos:start="49:46" pos:end="57:25">{<block_content pos:start="51:29" pos:end="55:59">

                            <expr_stmt pos:start="51:29" pos:end="51:58"><expr pos:start="51:29" pos:end="51:57"><name pos:start="51:29" pos:end="51:38">scale_bits</name> <operator pos:start="51:40" pos:end="51:41">+=</operator> <call pos:start="51:43" pos:end="51:57"><name pos:start="51:43" pos:end="51:50">get_bits</name><argument_list pos:start="51:51" pos:end="51:57">(<argument pos:start="51:52" pos:end="51:53"><expr pos:start="51:52" pos:end="51:53"><name pos:start="51:52" pos:end="51:53">gb</name></expr></argument>, <argument pos:start="51:56" pos:end="51:56"><expr pos:start="51:56" pos:end="51:56"><literal type="number" pos:start="51:56" pos:end="51:56">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <if_stmt pos:start="53:29" pos:end="55:59"><if pos:start="53:29" pos:end="55:59">if <condition pos:start="53:32" pos:end="53:48">(<expr pos:start="53:33" pos:end="53:47"><name pos:start="53:33" pos:end="53:42">scale_bits</name> <operator pos:start="53:44" pos:end="53:44">&gt;</operator> <literal type="number" pos:start="53:46" pos:end="53:47">29</literal></expr>)</condition><block type="pseudo" pos:start="55:33" pos:end="55:59"><block_content pos:start="55:33" pos:end="55:59">

                                <return pos:start="55:33" pos:end="55:59">return <expr pos:start="55:40" pos:end="55:58"><name pos:start="55:40" pos:end="55:58">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="59:25" pos:end="59:66"><expr pos:start="59:25" pos:end="59:65"><name pos:start="59:25" pos:end="59:29">scale</name> <operator pos:start="59:31" pos:end="59:31">=</operator> <call pos:start="59:33" pos:end="59:61"><name pos:start="59:33" pos:end="59:45">get_bits_long</name><argument_list pos:start="59:46" pos:end="59:61">(<argument pos:start="59:47" pos:end="59:48"><expr pos:start="59:47" pos:end="59:48"><name pos:start="59:47" pos:end="59:48">gb</name></expr></argument>, <argument pos:start="59:51" pos:end="59:60"><expr pos:start="59:51" pos:end="59:60"><name pos:start="59:51" pos:end="59:60">scale_bits</name></expr></argument>)</argument_list></call> <operator pos:start="59:63" pos:end="59:63">+</operator> <literal type="number" pos:start="59:65" pos:end="59:65">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="61:25" pos:end="61:51"><expr pos:start="61:25" pos:end="61:50"><name pos:start="61:25" pos:end="61:25">x</name>    <operator pos:start="61:30" pos:end="61:31">+=</operator> <name pos:start="61:33" pos:end="61:42"><name pos:start="61:33" pos:end="61:36">code</name><operator pos:start="61:37" pos:end="61:37">.</operator><name pos:start="61:38" pos:end="61:42">scale</name></name> <operator pos:start="61:44" pos:end="61:44">*</operator> <name pos:start="61:46" pos:end="61:50">scale</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="65:21" pos:end="65:35"><expr pos:start="65:21" pos:end="65:34"><name pos:start="65:21" pos:end="65:21">x</name> <operator pos:start="65:23" pos:end="65:24">+=</operator> <name pos:start="65:26" pos:end="65:34"><name pos:start="65:26" pos:end="65:29">code</name><operator pos:start="65:30" pos:end="65:30">.</operator><name pos:start="65:31" pos:end="65:34">bias</name></name></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="67:19" pos:end="69:58">else<block type="pseudo" pos:start="69:21" pos:end="69:58"><block_content pos:start="69:21" pos:end="69:58">

                    <expr_stmt pos:start="69:21" pos:end="69:58"><expr pos:start="69:21" pos:end="69:57"><name pos:start="69:21" pos:end="69:21">x</name> <operator pos:start="69:23" pos:end="69:24">+=</operator> <name pos:start="69:26" pos:end="69:35"><name pos:start="69:26" pos:end="69:29">code</name><operator pos:start="69:30" pos:end="69:30">.</operator><name pos:start="69:31" pos:end="69:35">scale</name></name> <operator pos:start="69:37" pos:end="69:37">*</operator> <name pos:start="69:39" pos:end="69:43">scale</name> <operator pos:start="69:45" pos:end="69:45">-</operator> <name pos:start="69:47" pos:end="69:57"><name pos:start="69:47" pos:end="69:50">code</name><operator pos:start="69:51" pos:end="69:51">.</operator><name pos:start="69:52" pos:end="69:57">escape</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="71:15" pos:end="73:33">else<block type="pseudo" pos:start="73:17" pos:end="73:33"><block_content pos:start="73:17" pos:end="73:33">

                <expr_stmt pos:start="73:17" pos:end="73:33"><expr pos:start="73:17" pos:end="73:32"><name pos:start="73:17" pos:end="73:17">x</name> <operator pos:start="73:19" pos:end="73:20">-=</operator> <name pos:start="73:22" pos:end="73:32"><name pos:start="73:22" pos:end="73:25">code</name><operator pos:start="73:26" pos:end="73:26">.</operator><name pos:start="73:27" pos:end="73:32">escape</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:15">decoded</name><index pos:start="77:16" pos:end="77:18">[<expr pos:start="77:17" pos:end="77:17"><name pos:start="77:17" pos:end="77:17">i</name></expr>]</index></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <operator pos:start="77:22" pos:end="77:22">(</operator><name pos:start="77:23" pos:end="77:23">x</name> <operator pos:start="77:25" pos:end="77:26">&gt;&gt;</operator> <literal type="number" pos:start="77:28" pos:end="77:28">1</literal><operator pos:start="77:29" pos:end="77:29">)</operator> <operator pos:start="77:31" pos:end="77:31">^</operator> <operator pos:start="77:33" pos:end="77:33">-</operator><operator pos:start="77:34" pos:end="77:34">(</operator><name pos:start="77:35" pos:end="77:35">x</name> <operator pos:start="77:37" pos:end="77:37">&amp;</operator> <literal type="number" pos:start="77:39" pos:end="77:39">1</literal><operator pos:start="77:40" pos:end="77:40">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
