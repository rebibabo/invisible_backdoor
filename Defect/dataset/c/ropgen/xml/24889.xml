<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24889.c" pos:tabs="8"><function pos:start="1:1" pos:end="849:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:24">ff_h263_decode_frame</name><parameter_list pos:start="1:25" pos:end="5:45">(<parameter pos:start="1:26" pos:end="1:46"><decl pos:start="1:26" pos:end="1:46"><type pos:start="1:26" pos:end="1:46"><name pos:start="1:26" pos:end="1:39">AVCodecContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:46">avctx</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:39"><decl pos:start="3:30" pos:end="3:39"><type pos:start="3:30" pos:end="3:39"><name pos:start="3:30" pos:end="3:33">void</name> <modifier pos:start="3:35" pos:end="3:35">*</modifier></type><name pos:start="3:36" pos:end="3:39">data</name></decl></parameter>, <parameter pos:start="3:42" pos:end="3:55"><decl pos:start="3:42" pos:end="3:55"><type pos:start="3:42" pos:end="3:55"><name pos:start="3:42" pos:end="3:44">int</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:55">got_frame</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:44"><decl pos:start="5:30" pos:end="5:44"><type pos:start="5:30" pos:end="5:44"><name pos:start="5:30" pos:end="5:37">AVPacket</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:44">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="849:1">{<block_content pos:start="9:5" pos:end="847:97">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:41"><decl pos:start="13:5" pos:end="13:40"><type pos:start="13:5" pos:end="13:20"><name pos:start="13:5" pos:end="13:18">MpegEncContext</name> <modifier pos:start="13:20" pos:end="13:20">*</modifier></type><name pos:start="13:21" pos:end="13:21">s</name> <init pos:start="13:23" pos:end="13:40">= <expr pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:29">avctx</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:13"><name pos:start="17:5" pos:end="17:11">AVFrame</name> <modifier pos:start="17:13" pos:end="17:13">*</modifier></type><name pos:start="17:14" pos:end="17:17">pict</name> <init pos:start="17:19" pos:end="17:24">= <expr pos:start="17:21" pos:end="17:24"><name pos:start="17:21" pos:end="17:24">data</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:27"><expr pos:start="21:5" pos:end="21:26"><name pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:12">flags</name></name><operator pos:start="21:13" pos:end="21:13">=</operator> <name pos:start="21:15" pos:end="21:26"><name pos:start="21:15" pos:end="21:19">avctx</name><operator pos:start="21:20" pos:end="21:21">-&gt;</operator><name pos:start="21:22" pos:end="21:26">flags</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:29"><expr pos:start="23:5" pos:end="23:28"><name pos:start="23:5" pos:end="23:13"><name pos:start="23:5" pos:end="23:5">s</name><operator pos:start="23:6" pos:end="23:7">-&gt;</operator><name pos:start="23:8" pos:end="23:13">flags2</name></name><operator pos:start="23:14" pos:end="23:14">=</operator> <name pos:start="23:16" pos:end="23:28"><name pos:start="23:16" pos:end="23:20">avctx</name><operator pos:start="23:21" pos:end="23:22">-&gt;</operator><name pos:start="23:23" pos:end="23:28">flags2</name></name></expr>;</expr_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:34">/* no supplementary picture */</comment>

    <if_stmt pos:start="29:5" pos:end="51:5"><if pos:start="29:5" pos:end="51:5">if <condition pos:start="29:8" pos:end="29:22">(<expr pos:start="29:9" pos:end="29:21"><name pos:start="29:9" pos:end="29:16">buf_size</name> <operator pos:start="29:18" pos:end="29:19">==</operator> <literal type="number" pos:start="29:21" pos:end="29:21">0</literal></expr>)</condition> <block pos:start="29:24" pos:end="51:5">{<block_content pos:start="33:9" pos:end="49:17">

        <comment type="block" pos:start="31:9" pos:end="31:43">/* special case for last picture */</comment>

        <if_stmt pos:start="33:9" pos:end="45:9"><if pos:start="33:9" pos:end="45:9">if <condition pos:start="33:12" pos:end="33:51">(<expr pos:start="33:13" pos:end="33:50"><name pos:start="33:13" pos:end="33:24"><name pos:start="33:13" pos:end="33:13">s</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:24">low_delay</name></name><operator pos:start="33:25" pos:end="33:26">==</operator><literal type="number" pos:start="33:27" pos:end="33:27">0</literal> <operator pos:start="33:29" pos:end="33:30">&amp;&amp;</operator> <name pos:start="33:32" pos:end="33:50"><name pos:start="33:32" pos:end="33:32">s</name><operator pos:start="33:33" pos:end="33:34">-&gt;</operator><name pos:start="33:35" pos:end="33:50">next_picture_ptr</name></name></expr>)</condition> <block pos:start="33:53" pos:end="45:9">{<block_content pos:start="35:13" pos:end="43:27">

            <if_stmt pos:start="35:13" pos:end="37:27"><if pos:start="35:13" pos:end="37:27">if <condition pos:start="35:16" pos:end="35:72">(<expr pos:start="35:17" pos:end="35:71"><operator pos:start="35:17" pos:end="35:17">(</operator><name pos:start="35:18" pos:end="35:20">ret</name> <operator pos:start="35:22" pos:end="35:22">=</operator> <call pos:start="35:24" pos:end="35:66"><name pos:start="35:24" pos:end="35:35">av_frame_ref</name><argument_list pos:start="35:36" pos:end="35:66">(<argument pos:start="35:37" pos:end="35:40"><expr pos:start="35:37" pos:end="35:40"><name pos:start="35:37" pos:end="35:40">pict</name></expr></argument>, <argument pos:start="35:43" pos:end="35:65"><expr pos:start="35:43" pos:end="35:65"><operator pos:start="35:43" pos:end="35:43">&amp;</operator><name pos:start="35:44" pos:end="35:65"><name pos:start="35:44" pos:end="35:44">s</name><operator pos:start="35:45" pos:end="35:46">-&gt;</operator><name pos:start="35:47" pos:end="35:62">next_picture_ptr</name><operator pos:start="35:63" pos:end="35:64">-&gt;</operator><name pos:start="35:65" pos:end="35:65">f</name></name></expr></argument>)</argument_list></call><operator pos:start="35:67" pos:end="35:67">)</operator> <operator pos:start="35:69" pos:end="35:69">&lt;</operator> <literal type="number" pos:start="35:71" pos:end="35:71">0</literal></expr>)</condition><block type="pseudo" pos:start="37:17" pos:end="37:27"><block_content pos:start="37:17" pos:end="37:27">

                <return pos:start="37:17" pos:end="37:27">return <expr pos:start="37:24" pos:end="37:26"><name pos:start="37:24" pos:end="37:26">ret</name></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:38"><expr pos:start="39:13" pos:end="39:37"><name pos:start="39:13" pos:end="39:31"><name pos:start="39:13" pos:end="39:13">s</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:31">next_picture_ptr</name></name><operator pos:start="39:32" pos:end="39:32">=</operator> <name pos:start="39:34" pos:end="39:37">NULL</name></expr>;</expr_stmt>



            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><operator pos:start="43:13" pos:end="43:13">*</operator><name pos:start="43:14" pos:end="43:22">got_frame</name> <operator pos:start="43:24" pos:end="43:24">=</operator> <literal type="number" pos:start="43:26" pos:end="43:26">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <return pos:start="49:9" pos:end="49:17">return <expr pos:start="49:16" pos:end="49:16"><literal type="number" pos:start="49:16" pos:end="49:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="87:5"><if pos:start="55:5" pos:end="87:5">if<condition pos:start="55:7" pos:end="55:37">(<expr pos:start="55:8" pos:end="55:36"><name pos:start="55:8" pos:end="55:15"><name pos:start="55:8" pos:end="55:8">s</name><operator pos:start="55:9" pos:end="55:10">-&gt;</operator><name pos:start="55:11" pos:end="55:15">flags</name></name><operator pos:start="55:16" pos:end="55:16">&amp;</operator><name pos:start="55:17" pos:end="55:36">CODEC_FLAG_TRUNCATED</name></expr>)</condition><block pos:start="55:38" pos:end="87:5">{<block_content pos:start="57:9" pos:end="85:28">

        <decl_stmt pos:start="57:9" pos:end="57:17"><decl pos:start="57:9" pos:end="57:16"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:16">next</name></decl>;</decl_stmt>



        <if_stmt pos:start="61:9" pos:end="79:9"><if pos:start="61:9" pos:end="65:9">if<condition pos:start="61:11" pos:end="61:66">(<expr pos:start="61:12" pos:end="61:65"><name pos:start="61:12" pos:end="61:31">CONFIG_MPEG4_DECODER</name> <operator pos:start="61:33" pos:end="61:34">&amp;&amp;</operator> <name pos:start="61:36" pos:end="61:46"><name pos:start="61:36" pos:end="61:36">s</name><operator pos:start="61:37" pos:end="61:38">-&gt;</operator><name pos:start="61:39" pos:end="61:46">codec_id</name></name><operator pos:start="61:47" pos:end="61:48">==</operator><name pos:start="61:49" pos:end="61:65">AV_CODEC_ID_MPEG4</name></expr>)</condition><block pos:start="61:67" pos:end="65:9">{<block_content pos:start="63:13" pos:end="63:76">

            <expr_stmt pos:start="63:13" pos:end="63:76"><expr pos:start="63:13" pos:end="63:75"><name pos:start="63:13" pos:end="63:16">next</name><operator pos:start="63:17" pos:end="63:17">=</operator> <call pos:start="63:19" pos:end="63:75"><name pos:start="63:19" pos:end="63:41">ff_mpeg4_find_frame_end</name><argument_list pos:start="63:42" pos:end="63:75">(<argument pos:start="63:43" pos:end="63:59"><expr pos:start="63:43" pos:end="63:59"><operator pos:start="63:43" pos:end="63:43">&amp;</operator><name pos:start="63:44" pos:end="63:59"><name pos:start="63:44" pos:end="63:44">s</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:59">parse_context</name></name></expr></argument>, <argument pos:start="63:62" pos:end="63:64"><expr pos:start="63:62" pos:end="63:64"><name pos:start="63:62" pos:end="63:64">buf</name></expr></argument>, <argument pos:start="63:67" pos:end="63:74"><expr pos:start="63:67" pos:end="63:74"><name pos:start="63:67" pos:end="63:74">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="65:10" pos:end="69:9">else if<condition pos:start="65:17" pos:end="65:70">(<expr pos:start="65:18" pos:end="65:69"><name pos:start="65:18" pos:end="65:36">CONFIG_H263_DECODER</name> <operator pos:start="65:38" pos:end="65:39">&amp;&amp;</operator> <name pos:start="65:41" pos:end="65:51"><name pos:start="65:41" pos:end="65:41">s</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:51">codec_id</name></name><operator pos:start="65:52" pos:end="65:53">==</operator><name pos:start="65:54" pos:end="65:69">AV_CODEC_ID_H263</name></expr>)</condition><block pos:start="65:71" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:75">

            <expr_stmt pos:start="67:13" pos:end="67:75"><expr pos:start="67:13" pos:end="67:74"><name pos:start="67:13" pos:end="67:16">next</name><operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:74"><name pos:start="67:19" pos:end="67:40">ff_h263_find_frame_end</name><argument_list pos:start="67:41" pos:end="67:74">(<argument pos:start="67:42" pos:end="67:58"><expr pos:start="67:42" pos:end="67:58"><operator pos:start="67:42" pos:end="67:42">&amp;</operator><name pos:start="67:43" pos:end="67:58"><name pos:start="67:43" pos:end="67:43">s</name><operator pos:start="67:44" pos:end="67:45">-&gt;</operator><name pos:start="67:46" pos:end="67:58">parse_context</name></name></expr></argument>, <argument pos:start="67:61" pos:end="67:63"><expr pos:start="67:61" pos:end="67:63"><name pos:start="67:61" pos:end="67:63">buf</name></expr></argument>, <argument pos:start="67:66" pos:end="67:73"><expr pos:start="67:66" pos:end="67:73"><name pos:start="67:66" pos:end="67:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="69:10" pos:end="73:9">else if<condition pos:start="69:17" pos:end="69:72">(<expr pos:start="69:18" pos:end="69:71"><name pos:start="69:18" pos:end="69:37">CONFIG_H263P_DECODER</name> <operator pos:start="69:39" pos:end="69:40">&amp;&amp;</operator> <name pos:start="69:42" pos:end="69:52"><name pos:start="69:42" pos:end="69:42">s</name><operator pos:start="69:43" pos:end="69:44">-&gt;</operator><name pos:start="69:45" pos:end="69:52">codec_id</name></name><operator pos:start="69:53" pos:end="69:54">==</operator><name pos:start="69:55" pos:end="69:71">AV_CODEC_ID_H263P</name></expr>)</condition><block pos:start="69:73" pos:end="73:9">{<block_content pos:start="71:13" pos:end="71:75">

            <expr_stmt pos:start="71:13" pos:end="71:75"><expr pos:start="71:13" pos:end="71:74"><name pos:start="71:13" pos:end="71:16">next</name><operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:74"><name pos:start="71:19" pos:end="71:40">ff_h263_find_frame_end</name><argument_list pos:start="71:41" pos:end="71:74">(<argument pos:start="71:42" pos:end="71:58"><expr pos:start="71:42" pos:end="71:58"><operator pos:start="71:42" pos:end="71:42">&amp;</operator><name pos:start="71:43" pos:end="71:58"><name pos:start="71:43" pos:end="71:43">s</name><operator pos:start="71:44" pos:end="71:45">-&gt;</operator><name pos:start="71:46" pos:end="71:58">parse_context</name></name></expr></argument>, <argument pos:start="71:61" pos:end="71:63"><expr pos:start="71:61" pos:end="71:63"><name pos:start="71:61" pos:end="71:63">buf</name></expr></argument>, <argument pos:start="71:66" pos:end="71:73"><expr pos:start="71:66" pos:end="71:73"><name pos:start="71:66" pos:end="71:73">buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="73:10" pos:end="79:9">else<block pos:start="73:14" pos:end="79:9">{<block_content pos:start="75:13" pos:end="77:35">

            <expr_stmt pos:start="75:13" pos:end="75:97"><expr pos:start="75:13" pos:end="75:96"><call pos:start="75:13" pos:end="75:96"><name pos:start="75:13" pos:end="75:18">av_log</name><argument_list pos:start="75:19" pos:end="75:96">(<argument pos:start="75:20" pos:end="75:27"><expr pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:27"><name pos:start="75:20" pos:end="75:20">s</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:27">avctx</name></name></expr></argument>, <argument pos:start="75:30" pos:end="75:41"><expr pos:start="75:30" pos:end="75:41"><name pos:start="75:30" pos:end="75:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="75:44" pos:end="75:95"><expr pos:start="75:44" pos:end="75:95"><literal type="string" pos:start="75:44" pos:end="75:95">"this codec does not support truncated bitstreams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="77:13" pos:end="77:35">return <expr pos:start="77:20" pos:end="77:34"><call pos:start="77:20" pos:end="77:34"><name pos:start="77:20" pos:end="77:26">AVERROR</name><argument_list pos:start="77:27" pos:end="77:34">(<argument pos:start="77:28" pos:end="77:33"><expr pos:start="77:28" pos:end="77:33"><name pos:start="77:28" pos:end="77:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="83:9" pos:end="85:28"><if pos:start="83:9" pos:end="85:28">if<condition pos:start="83:11" pos:end="83:94">( <expr pos:start="83:13" pos:end="83:92"><call pos:start="83:13" pos:end="83:88"><name pos:start="83:13" pos:end="83:28">ff_combine_frame</name><argument_list pos:start="83:29" pos:end="83:88">(<argument pos:start="83:30" pos:end="83:46"><expr pos:start="83:30" pos:end="83:46"><operator pos:start="83:30" pos:end="83:30">&amp;</operator><name pos:start="83:31" pos:end="83:46"><name pos:start="83:31" pos:end="83:31">s</name><operator pos:start="83:32" pos:end="83:33">-&gt;</operator><name pos:start="83:34" pos:end="83:46">parse_context</name></name></expr></argument>, <argument pos:start="83:49" pos:end="83:52"><expr pos:start="83:49" pos:end="83:52"><name pos:start="83:49" pos:end="83:52">next</name></expr></argument>, <argument pos:start="83:55" pos:end="83:76"><expr pos:start="83:55" pos:end="83:76"><operator pos:start="83:55" pos:end="83:55">(</operator><specifier pos:start="83:56" pos:end="83:60">const</specifier> <name pos:start="83:62" pos:end="83:68">uint8_t</name> <operator pos:start="83:70" pos:end="83:70">*</operator><operator pos:start="83:71" pos:end="83:71">*</operator><operator pos:start="83:72" pos:end="83:72">)</operator><operator pos:start="83:73" pos:end="83:73">&amp;</operator><name pos:start="83:74" pos:end="83:76">buf</name></expr></argument>, <argument pos:start="83:79" pos:end="83:87"><expr pos:start="83:79" pos:end="83:87"><operator pos:start="83:79" pos:end="83:79">&amp;</operator><name pos:start="83:80" pos:end="83:87">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="83:90" pos:end="83:90">&lt;</operator> <literal type="number" pos:start="83:92" pos:end="83:92">0</literal></expr> )</condition><block type="pseudo" pos:start="85:13" pos:end="85:28"><block_content pos:start="85:13" pos:end="85:28">

            <return pos:start="85:13" pos:end="85:28">return <expr pos:start="85:20" pos:end="85:27"><name pos:start="85:20" pos:end="85:27">buf_size</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>





<label pos:start="93:1" pos:end="93:6"><name pos:start="93:1" pos:end="93:5">retry</name>:</label>

    <if_stmt pos:start="95:5" pos:end="117:5"><if pos:start="95:5" pos:end="117:5">if<condition pos:start="95:7" pos:end="95:50">(<expr pos:start="95:8" pos:end="95:49"><name pos:start="95:8" pos:end="95:21"><name pos:start="95:8" pos:end="95:8">s</name><operator pos:start="95:9" pos:end="95:10">-&gt;</operator><name pos:start="95:11" pos:end="95:21">divx_packed</name></name> <operator pos:start="95:23" pos:end="95:24">&amp;&amp;</operator> <name pos:start="95:26" pos:end="95:49"><name pos:start="95:26" pos:end="95:26">s</name><operator pos:start="95:27" pos:end="95:28">-&gt;</operator><name pos:start="95:29" pos:end="95:49">bitstream_buffer_size</name></name></expr>)</condition><block pos:start="95:51" pos:end="117:5">{<block_content pos:start="97:9" pos:end="115:9">

        <decl_stmt pos:start="97:9" pos:end="97:14"><decl pos:start="97:9" pos:end="97:13"><type pos:start="97:9" pos:end="97:11"><name pos:start="97:9" pos:end="97:11">int</name></type> <name pos:start="97:13" pos:end="97:13">i</name></decl>;</decl_stmt>

        <for pos:start="99:9" pos:end="115:9">for<control pos:start="99:12" pos:end="99:35">(<init pos:start="99:13" pos:end="99:16"><expr pos:start="99:13" pos:end="99:15"><name pos:start="99:13" pos:end="99:13">i</name><operator pos:start="99:14" pos:end="99:14">=</operator><literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>;</init> <condition pos:start="99:18" pos:end="99:30"><expr pos:start="99:18" pos:end="99:29"><name pos:start="99:18" pos:end="99:18">i</name><operator pos:start="99:19" pos:end="99:19">&lt;</operator><name pos:start="99:20" pos:end="99:27">buf_size</name><operator pos:start="99:28" pos:end="99:28">-</operator><literal type="number" pos:start="99:29" pos:end="99:29">3</literal></expr>;</condition> <incr pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><name pos:start="99:32" pos:end="99:32">i</name><operator pos:start="99:33" pos:end="99:34">++</operator></expr></incr>)</control><block pos:start="99:36" pos:end="115:9">{<block_content pos:start="101:13" pos:end="113:13">

            <if_stmt pos:start="101:13" pos:end="113:13"><if pos:start="101:13" pos:end="113:13">if<condition pos:start="101:15" pos:end="101:55">(<expr pos:start="101:16" pos:end="101:54"><name pos:start="101:16" pos:end="101:21"><name pos:start="101:16" pos:end="101:18">buf</name><index pos:start="101:19" pos:end="101:21">[<expr pos:start="101:20" pos:end="101:20"><name pos:start="101:20" pos:end="101:20">i</name></expr>]</index></name><operator pos:start="101:22" pos:end="101:23">==</operator><literal type="number" pos:start="101:24" pos:end="101:24">0</literal> <operator pos:start="101:26" pos:end="101:27">&amp;&amp;</operator> <name pos:start="101:29" pos:end="101:36"><name pos:start="101:29" pos:end="101:31">buf</name><index pos:start="101:32" pos:end="101:36">[<expr pos:start="101:33" pos:end="101:35"><name pos:start="101:33" pos:end="101:33">i</name><operator pos:start="101:34" pos:end="101:34">+</operator><literal type="number" pos:start="101:35" pos:end="101:35">1</literal></expr>]</index></name><operator pos:start="101:37" pos:end="101:38">==</operator><literal type="number" pos:start="101:39" pos:end="101:39">0</literal> <operator pos:start="101:41" pos:end="101:42">&amp;&amp;</operator> <name pos:start="101:44" pos:end="101:51"><name pos:start="101:44" pos:end="101:46">buf</name><index pos:start="101:47" pos:end="101:51">[<expr pos:start="101:48" pos:end="101:50"><name pos:start="101:48" pos:end="101:48">i</name><operator pos:start="101:49" pos:end="101:49">+</operator><literal type="number" pos:start="101:50" pos:end="101:50">2</literal></expr>]</index></name><operator pos:start="101:52" pos:end="101:53">==</operator><literal type="number" pos:start="101:54" pos:end="101:54">1</literal></expr>)</condition><block pos:start="101:56" pos:end="113:13">{<block_content pos:start="103:17" pos:end="111:22">

                <if_stmt pos:start="103:17" pos:end="109:17"><if pos:start="103:17" pos:end="109:17">if<condition pos:start="103:19" pos:end="103:34">(<expr pos:start="103:20" pos:end="103:33"><name pos:start="103:20" pos:end="103:27"><name pos:start="103:20" pos:end="103:22">buf</name><index pos:start="103:23" pos:end="103:27">[<expr pos:start="103:24" pos:end="103:26"><name pos:start="103:24" pos:end="103:24">i</name><operator pos:start="103:25" pos:end="103:25">+</operator><literal type="number" pos:start="103:26" pos:end="103:26">3</literal></expr>]</index></name><operator pos:start="103:28" pos:end="103:29">==</operator><literal type="number" pos:start="103:30" pos:end="103:33">0xB0</literal></expr>)</condition><block pos:start="103:35" pos:end="109:17">{<block_content pos:start="105:21" pos:end="107:47">

                    <expr_stmt pos:start="105:21" pos:end="105:104"><expr pos:start="105:21" pos:end="105:103"><call pos:start="105:21" pos:end="105:103"><name pos:start="105:21" pos:end="105:26">av_log</name><argument_list pos:start="105:27" pos:end="105:103">(<argument pos:start="105:28" pos:end="105:35"><expr pos:start="105:28" pos:end="105:35"><name pos:start="105:28" pos:end="105:35"><name pos:start="105:28" pos:end="105:28">s</name><operator pos:start="105:29" pos:end="105:30">-&gt;</operator><name pos:start="105:31" pos:end="105:35">avctx</name></name></expr></argument>, <argument pos:start="105:38" pos:end="105:51"><expr pos:start="105:38" pos:end="105:51"><name pos:start="105:38" pos:end="105:51">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="105:54" pos:end="105:102"><expr pos:start="105:54" pos:end="105:102"><literal type="string" pos:start="105:54" pos:end="105:102">"Discarding excessive bitstream in packed xvid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="107:21" pos:end="107:47"><expr pos:start="107:21" pos:end="107:46"><name pos:start="107:21" pos:end="107:44"><name pos:start="107:21" pos:end="107:21">s</name><operator pos:start="107:22" pos:end="107:23">-&gt;</operator><name pos:start="107:24" pos:end="107:44">bitstream_buffer_size</name></name><operator pos:start="107:45" pos:end="107:45">=</operator><literal type="number" pos:start="107:46" pos:end="107:46">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <break pos:start="111:17" pos:end="111:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="121:5" pos:end="127:47"><if pos:start="121:5" pos:end="125:5">if<condition pos:start="121:7" pos:end="121:67">(<expr pos:start="121:8" pos:end="121:66"><name pos:start="121:8" pos:end="121:31"><name pos:start="121:8" pos:end="121:8">s</name><operator pos:start="121:9" pos:end="121:10">-&gt;</operator><name pos:start="121:11" pos:end="121:31">bitstream_buffer_size</name></name> <operator pos:start="121:33" pos:end="121:34">&amp;&amp;</operator> <operator pos:start="121:36" pos:end="121:36">(</operator><name pos:start="121:37" pos:end="121:50"><name pos:start="121:37" pos:end="121:37">s</name><operator pos:start="121:38" pos:end="121:39">-&gt;</operator><name pos:start="121:40" pos:end="121:50">divx_packed</name></name> <operator pos:start="121:52" pos:end="121:53">||</operator> <name pos:start="121:55" pos:end="121:62">buf_size</name><operator pos:start="121:63" pos:end="121:63">&lt;</operator><literal type="number" pos:start="121:64" pos:end="121:65">20</literal><operator pos:start="121:66" pos:end="121:66">)</operator></expr>)</condition><block pos:start="121:68" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:79"> <comment type="line" pos:start="121:70" pos:end="121:100">//divx 5.01+/xvid frame reorder</comment>

        <expr_stmt pos:start="123:9" pos:end="123:79"><expr pos:start="123:9" pos:end="123:78"><call pos:start="123:9" pos:end="123:78"><name pos:start="123:9" pos:end="123:21">init_get_bits</name><argument_list pos:start="123:22" pos:end="123:78">(<argument pos:start="123:23" pos:end="123:28"><expr pos:start="123:23" pos:end="123:28"><operator pos:start="123:23" pos:end="123:23">&amp;</operator><name pos:start="123:24" pos:end="123:28"><name pos:start="123:24" pos:end="123:24">s</name><operator pos:start="123:25" pos:end="123:26">-&gt;</operator><name pos:start="123:27" pos:end="123:28">gb</name></name></expr></argument>, <argument pos:start="123:31" pos:end="123:49"><expr pos:start="123:31" pos:end="123:49"><name pos:start="123:31" pos:end="123:49"><name pos:start="123:31" pos:end="123:31">s</name><operator pos:start="123:32" pos:end="123:33">-&gt;</operator><name pos:start="123:34" pos:end="123:49">bitstream_buffer</name></name></expr></argument>, <argument pos:start="123:52" pos:end="123:77"><expr pos:start="123:52" pos:end="123:77"><name pos:start="123:52" pos:end="123:75"><name pos:start="123:52" pos:end="123:52">s</name><operator pos:start="123:53" pos:end="123:54">-&gt;</operator><name pos:start="123:55" pos:end="123:75">bitstream_buffer_size</name></name><operator pos:start="123:76" pos:end="123:76">*</operator><literal type="number" pos:start="123:77" pos:end="123:77">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="125:6" pos:end="127:47">else<block type="pseudo" pos:start="127:9" pos:end="127:47"><block_content pos:start="127:9" pos:end="127:47">

        <expr_stmt pos:start="127:9" pos:end="127:47"><expr pos:start="127:9" pos:end="127:46"><call pos:start="127:9" pos:end="127:46"><name pos:start="127:9" pos:end="127:21">init_get_bits</name><argument_list pos:start="127:22" pos:end="127:46">(<argument pos:start="127:23" pos:end="127:28"><expr pos:start="127:23" pos:end="127:28"><operator pos:start="127:23" pos:end="127:23">&amp;</operator><name pos:start="127:24" pos:end="127:28"><name pos:start="127:24" pos:end="127:24">s</name><operator pos:start="127:25" pos:end="127:26">-&gt;</operator><name pos:start="127:27" pos:end="127:28">gb</name></name></expr></argument>, <argument pos:start="127:31" pos:end="127:33"><expr pos:start="127:31" pos:end="127:33"><name pos:start="127:31" pos:end="127:33">buf</name></expr></argument>, <argument pos:start="127:36" pos:end="127:45"><expr pos:start="127:36" pos:end="127:45"><name pos:start="127:36" pos:end="127:43">buf_size</name><operator pos:start="127:44" pos:end="127:44">*</operator><literal type="number" pos:start="127:45" pos:end="127:45">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:31"><expr pos:start="129:5" pos:end="129:30"><name pos:start="129:5" pos:end="129:28"><name pos:start="129:5" pos:end="129:5">s</name><operator pos:start="129:6" pos:end="129:7">-&gt;</operator><name pos:start="129:8" pos:end="129:28">bitstream_buffer_size</name></name><operator pos:start="129:29" pos:end="129:29">=</operator><literal type="number" pos:start="129:30" pos:end="129:30">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="133:5" pos:end="139:5"><if pos:start="133:5" pos:end="139:5">if <condition pos:start="133:8" pos:end="133:32">(<expr pos:start="133:9" pos:end="133:31"><operator pos:start="133:9" pos:end="133:9">!</operator><name pos:start="133:10" pos:end="133:31"><name pos:start="133:10" pos:end="133:10">s</name><operator pos:start="133:11" pos:end="133:12">-&gt;</operator><name pos:start="133:13" pos:end="133:31">context_initialized</name></name></expr>)</condition> <block pos:start="133:34" pos:end="139:5">{<block_content pos:start="135:9" pos:end="137:23">

        <if_stmt pos:start="135:9" pos:end="137:23"><if pos:start="135:9" pos:end="137:23">if <condition pos:start="135:12" pos:end="135:46">(<expr pos:start="135:13" pos:end="135:45"><operator pos:start="135:13" pos:end="135:13">(</operator><name pos:start="135:14" pos:end="135:16">ret</name> <operator pos:start="135:18" pos:end="135:18">=</operator> <call pos:start="135:20" pos:end="135:40"><name pos:start="135:20" pos:end="135:37">ff_MPV_common_init</name><argument_list pos:start="135:38" pos:end="135:40">(<argument pos:start="135:39" pos:end="135:39"><expr pos:start="135:39" pos:end="135:39"><name pos:start="135:39" pos:end="135:39">s</name></expr></argument>)</argument_list></call><operator pos:start="135:41" pos:end="135:41">)</operator> <operator pos:start="135:43" pos:end="135:43">&lt;</operator> <literal type="number" pos:start="135:45" pos:end="135:45">0</literal></expr>)</condition><block type="pseudo" pos:start="137:13" pos:end="137:23"><block_content pos:start="137:13" pos:end="137:23"> <comment type="line" pos:start="135:48" pos:end="135:104">//we need the idct permutaton for reading a custom matrix</comment>

            <return pos:start="137:13" pos:end="137:23">return <expr pos:start="137:20" pos:end="137:22"><name pos:start="137:20" pos:end="137:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="143:5" pos:end="145:52">/* We need to set current_picture_ptr before reading the header,

     * otherwise we cannot store anyting in there */</comment>

    <if_stmt pos:start="147:5" pos:end="157:5"><if pos:start="147:5" pos:end="157:5">if <condition pos:start="147:8" pos:end="147:76">(<expr pos:start="147:9" pos:end="147:75"><name pos:start="147:9" pos:end="147:30"><name pos:start="147:9" pos:end="147:9">s</name><operator pos:start="147:10" pos:end="147:11">-&gt;</operator><name pos:start="147:12" pos:end="147:30">current_picture_ptr</name></name> <operator pos:start="147:32" pos:end="147:33">==</operator> <name pos:start="147:35" pos:end="147:38">NULL</name> <operator pos:start="147:40" pos:end="147:41">||</operator> <name pos:start="147:43" pos:end="147:75"><name pos:start="147:43" pos:end="147:43">s</name><operator pos:start="147:44" pos:end="147:45">-&gt;</operator><name pos:start="147:46" pos:end="147:64">current_picture_ptr</name><operator pos:start="147:65" pos:end="147:66">-&gt;</operator><name pos:start="147:67" pos:end="147:67">f</name><operator pos:start="147:68" pos:end="147:68">.</operator><name pos:start="147:69" pos:end="147:72">data</name><index pos:start="147:73" pos:end="147:75">[<expr pos:start="147:74" pos:end="147:74"><literal type="number" pos:start="147:74" pos:end="147:74">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="147:78" pos:end="157:5">{<block_content pos:start="149:9" pos:end="155:47">

        <decl_stmt pos:start="149:9" pos:end="149:44"><decl pos:start="149:9" pos:end="149:43"><type pos:start="149:9" pos:end="149:11"><name pos:start="149:9" pos:end="149:11">int</name></type> <name pos:start="149:13" pos:end="149:13">i</name><init pos:start="149:14" pos:end="149:43">= <expr pos:start="149:16" pos:end="149:43"><call pos:start="149:16" pos:end="149:43"><name pos:start="149:16" pos:end="149:37">ff_find_unused_picture</name><argument_list pos:start="149:38" pos:end="149:43">(<argument pos:start="149:39" pos:end="149:39"><expr pos:start="149:39" pos:end="149:39"><name pos:start="149:39" pos:end="149:39">s</name></expr></argument>, <argument pos:start="149:42" pos:end="149:42"><expr pos:start="149:42" pos:end="149:42"><literal type="number" pos:start="149:42" pos:end="149:42">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="151:9" pos:end="153:21"><if pos:start="151:9" pos:end="153:21">if <condition pos:start="151:12" pos:end="151:18">(<expr pos:start="151:13" pos:end="151:17"><name pos:start="151:13" pos:end="151:13">i</name> <operator pos:start="151:15" pos:end="151:15">&lt;</operator> <literal type="number" pos:start="151:17" pos:end="151:17">0</literal></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="153:21"><block_content pos:start="153:13" pos:end="153:21">

            <return pos:start="153:13" pos:end="153:21">return <expr pos:start="153:20" pos:end="153:20"><name pos:start="153:20" pos:end="153:20">i</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:47"><expr pos:start="155:9" pos:end="155:46"><name pos:start="155:9" pos:end="155:30"><name pos:start="155:9" pos:end="155:9">s</name><operator pos:start="155:10" pos:end="155:11">-&gt;</operator><name pos:start="155:12" pos:end="155:30">current_picture_ptr</name></name><operator pos:start="155:31" pos:end="155:31">=</operator> <operator pos:start="155:33" pos:end="155:33">&amp;</operator><name pos:start="155:34" pos:end="155:46"><name pos:start="155:34" pos:end="155:34">s</name><operator pos:start="155:35" pos:end="155:36">-&gt;</operator><name pos:start="155:37" pos:end="155:43">picture</name><index pos:start="155:44" pos:end="155:46">[<expr pos:start="155:45" pos:end="155:45"><name pos:start="155:45" pos:end="155:45">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="161:5" pos:end="161:22">/* let's go :-) */</comment>

    <if_stmt pos:start="163:5" pos:end="199:5"><if pos:start="163:5" pos:end="167:5">if <condition pos:start="163:8" pos:end="163:53">(<expr pos:start="163:9" pos:end="163:52"><name pos:start="163:9" pos:end="163:27">CONFIG_WMV2_DECODER</name> <operator pos:start="163:29" pos:end="163:30">&amp;&amp;</operator> <name pos:start="163:32" pos:end="163:49"><name pos:start="163:32" pos:end="163:32">s</name><operator pos:start="163:33" pos:end="163:34">-&gt;</operator><name pos:start="163:35" pos:end="163:49">msmpeg4_version</name></name><operator pos:start="163:50" pos:end="163:51">==</operator><literal type="number" pos:start="163:52" pos:end="163:52">5</literal></expr>)</condition> <block pos:start="163:55" pos:end="167:5">{<block_content pos:start="165:9" pos:end="165:46">

        <expr_stmt pos:start="165:9" pos:end="165:46"><expr pos:start="165:9" pos:end="165:45"><name pos:start="165:9" pos:end="165:11">ret</name><operator pos:start="165:12" pos:end="165:12">=</operator> <call pos:start="165:14" pos:end="165:45"><name pos:start="165:14" pos:end="165:42">ff_wmv2_decode_picture_header</name><argument_list pos:start="165:43" pos:end="165:45">(<argument pos:start="165:44" pos:end="165:44"><expr pos:start="165:44" pos:end="165:44"><name pos:start="165:44" pos:end="165:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="167:7" pos:end="171:5">else if <condition pos:start="167:15" pos:end="167:60">(<expr pos:start="167:16" pos:end="167:59"><name pos:start="167:16" pos:end="167:37">CONFIG_MSMPEG4_DECODER</name> <operator pos:start="167:39" pos:end="167:40">&amp;&amp;</operator> <name pos:start="167:42" pos:end="167:59"><name pos:start="167:42" pos:end="167:42">s</name><operator pos:start="167:43" pos:end="167:44">-&gt;</operator><name pos:start="167:45" pos:end="167:59">msmpeg4_version</name></name></expr>)</condition> <block pos:start="167:62" pos:end="171:5">{<block_content pos:start="169:9" pos:end="169:50">

        <expr_stmt pos:start="169:9" pos:end="169:50"><expr pos:start="169:9" pos:end="169:49"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">=</operator> <call pos:start="169:15" pos:end="169:49"><name pos:start="169:15" pos:end="169:46">ff_msmpeg4_decode_picture_header</name><argument_list pos:start="169:47" pos:end="169:49">(<argument pos:start="169:48" pos:end="169:48"><expr pos:start="169:48" pos:end="169:48"><name pos:start="169:48" pos:end="169:48">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="171:7" pos:end="187:5">else if <condition pos:start="171:15" pos:end="171:52">(<expr pos:start="171:16" pos:end="171:51"><name pos:start="171:16" pos:end="171:35">CONFIG_MPEG4_DECODER</name> <operator pos:start="171:37" pos:end="171:38">&amp;&amp;</operator> <name pos:start="171:40" pos:end="171:51"><name pos:start="171:40" pos:end="171:40">s</name><operator pos:start="171:41" pos:end="171:42">-&gt;</operator><name pos:start="171:43" pos:end="171:51">h263_pred</name></name></expr>)</condition> <block pos:start="171:54" pos:end="187:5">{<block_content pos:start="173:9" pos:end="185:56">

        <if_stmt pos:start="173:9" pos:end="183:9"><if pos:start="173:9" pos:end="183:9">if<condition pos:start="173:11" pos:end="173:60">(<expr pos:start="173:12" pos:end="173:59"><name pos:start="173:12" pos:end="173:35"><name pos:start="173:12" pos:end="173:12">s</name><operator pos:start="173:13" pos:end="173:14">-&gt;</operator><name pos:start="173:15" pos:end="173:19">avctx</name><operator pos:start="173:20" pos:end="173:21">-&gt;</operator><name pos:start="173:22" pos:end="173:35">extradata_size</name></name> <operator pos:start="173:37" pos:end="173:38">&amp;&amp;</operator> <name pos:start="173:40" pos:end="173:56"><name pos:start="173:40" pos:end="173:40">s</name><operator pos:start="173:41" pos:end="173:42">-&gt;</operator><name pos:start="173:43" pos:end="173:56">picture_number</name></name><operator pos:start="173:57" pos:end="173:58">==</operator><literal type="number" pos:start="173:59" pos:end="173:59">0</literal></expr>)</condition><block pos:start="173:61" pos:end="183:9">{<block_content pos:start="175:13" pos:end="181:57">

            <decl_stmt pos:start="175:13" pos:end="175:29"><decl pos:start="175:13" pos:end="175:28"><type pos:start="175:13" pos:end="175:25"><name pos:start="175:13" pos:end="175:25">GetBitContext</name></type> <name pos:start="175:27" pos:end="175:28">gb</name></decl>;</decl_stmt>



            <expr_stmt pos:start="179:13" pos:end="179:80"><expr pos:start="179:13" pos:end="179:79"><call pos:start="179:13" pos:end="179:79"><name pos:start="179:13" pos:end="179:25">init_get_bits</name><argument_list pos:start="179:26" pos:end="179:79">(<argument pos:start="179:27" pos:end="179:29"><expr pos:start="179:27" pos:end="179:29"><operator pos:start="179:27" pos:end="179:27">&amp;</operator><name pos:start="179:28" pos:end="179:29">gb</name></expr></argument>, <argument pos:start="179:32" pos:end="179:50"><expr pos:start="179:32" pos:end="179:50"><name pos:start="179:32" pos:end="179:50"><name pos:start="179:32" pos:end="179:32">s</name><operator pos:start="179:33" pos:end="179:34">-&gt;</operator><name pos:start="179:35" pos:end="179:39">avctx</name><operator pos:start="179:40" pos:end="179:41">-&gt;</operator><name pos:start="179:42" pos:end="179:50">extradata</name></name></expr></argument>, <argument pos:start="179:53" pos:end="179:78"><expr pos:start="179:53" pos:end="179:78"><name pos:start="179:53" pos:end="179:76"><name pos:start="179:53" pos:end="179:53">s</name><operator pos:start="179:54" pos:end="179:55">-&gt;</operator><name pos:start="179:56" pos:end="179:60">avctx</name><operator pos:start="179:61" pos:end="179:62">-&gt;</operator><name pos:start="179:63" pos:end="179:76">extradata_size</name></name><operator pos:start="179:77" pos:end="179:77">*</operator><literal type="number" pos:start="179:78" pos:end="179:78">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="181:13" pos:end="181:57"><expr pos:start="181:13" pos:end="181:56"><name pos:start="181:13" pos:end="181:15">ret</name> <operator pos:start="181:17" pos:end="181:17">=</operator> <call pos:start="181:19" pos:end="181:56"><name pos:start="181:19" pos:end="181:48">ff_mpeg4_decode_picture_header</name><argument_list pos:start="181:49" pos:end="181:56">(<argument pos:start="181:50" pos:end="181:50"><expr pos:start="181:50" pos:end="181:50"><name pos:start="181:50" pos:end="181:50">s</name></expr></argument>, <argument pos:start="181:53" pos:end="181:55"><expr pos:start="181:53" pos:end="181:55"><operator pos:start="181:53" pos:end="181:53">&amp;</operator><name pos:start="181:54" pos:end="181:55">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="185:9" pos:end="185:56"><expr pos:start="185:9" pos:end="185:55"><name pos:start="185:9" pos:end="185:11">ret</name> <operator pos:start="185:13" pos:end="185:13">=</operator> <call pos:start="185:15" pos:end="185:55"><name pos:start="185:15" pos:end="185:44">ff_mpeg4_decode_picture_header</name><argument_list pos:start="185:45" pos:end="185:55">(<argument pos:start="185:46" pos:end="185:46"><expr pos:start="185:46" pos:end="185:46"><name pos:start="185:46" pos:end="185:46">s</name></expr></argument>, <argument pos:start="185:49" pos:end="185:54"><expr pos:start="185:49" pos:end="185:54"><operator pos:start="185:49" pos:end="185:49">&amp;</operator><name pos:start="185:50" pos:end="185:54"><name pos:start="185:50" pos:end="185:50">s</name><operator pos:start="185:51" pos:end="185:52">-&gt;</operator><name pos:start="185:53" pos:end="185:54">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="187:7" pos:end="191:5">else if <condition pos:start="187:15" pos:end="187:72">(<expr pos:start="187:16" pos:end="187:71"><name pos:start="187:16" pos:end="187:35">CONFIG_H263I_DECODER</name> <operator pos:start="187:37" pos:end="187:38">&amp;&amp;</operator> <name pos:start="187:40" pos:end="187:50"><name pos:start="187:40" pos:end="187:40">s</name><operator pos:start="187:41" pos:end="187:42">-&gt;</operator><name pos:start="187:43" pos:end="187:50">codec_id</name></name> <operator pos:start="187:52" pos:end="187:53">==</operator> <name pos:start="187:55" pos:end="187:71">AV_CODEC_ID_H263I</name></expr>)</condition> <block pos:start="187:74" pos:end="191:5">{<block_content pos:start="189:9" pos:end="189:53">

        <expr_stmt pos:start="189:9" pos:end="189:53"><expr pos:start="189:9" pos:end="189:52"><name pos:start="189:9" pos:end="189:11">ret</name> <operator pos:start="189:13" pos:end="189:13">=</operator> <call pos:start="189:15" pos:end="189:52"><name pos:start="189:15" pos:end="189:49">ff_intel_h263_decode_picture_header</name><argument_list pos:start="189:50" pos:end="189:52">(<argument pos:start="189:51" pos:end="189:51"><expr pos:start="189:51" pos:end="189:51"><name pos:start="189:51" pos:end="189:51">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="191:7" pos:end="195:5">else if <condition pos:start="191:15" pos:end="191:49">(<expr pos:start="191:16" pos:end="191:48"><name pos:start="191:16" pos:end="191:33">CONFIG_FLV_DECODER</name> <operator pos:start="191:35" pos:end="191:36">&amp;&amp;</operator> <name pos:start="191:38" pos:end="191:48"><name pos:start="191:38" pos:end="191:38">s</name><operator pos:start="191:39" pos:end="191:40">-&gt;</operator><name pos:start="191:41" pos:end="191:48">h263_flv</name></name></expr>)</condition> <block pos:start="191:51" pos:end="195:5">{<block_content pos:start="193:9" pos:end="193:46">

        <expr_stmt pos:start="193:9" pos:end="193:46"><expr pos:start="193:9" pos:end="193:45"><name pos:start="193:9" pos:end="193:11">ret</name> <operator pos:start="193:13" pos:end="193:13">=</operator> <call pos:start="193:15" pos:end="193:45"><name pos:start="193:15" pos:end="193:42">ff_flv_decode_picture_header</name><argument_list pos:start="193:43" pos:end="193:45">(<argument pos:start="193:44" pos:end="193:44"><expr pos:start="193:44" pos:end="193:44"><name pos:start="193:44" pos:end="193:44">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="199:5">else <block pos:start="195:12" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:47">

        <expr_stmt pos:start="197:9" pos:end="197:47"><expr pos:start="197:9" pos:end="197:46"><name pos:start="197:9" pos:end="197:11">ret</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:46"><name pos:start="197:15" pos:end="197:43">ff_h263_decode_picture_header</name><argument_list pos:start="197:44" pos:end="197:46">(<argument pos:start="197:45" pos:end="197:45"><expr pos:start="197:45" pos:end="197:45"><name pos:start="197:45" pos:end="197:45">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="203:5" pos:end="217:5"><if pos:start="203:5" pos:end="217:5">if <condition pos:start="203:8" pos:end="203:38">(<expr pos:start="203:9" pos:end="203:37"><name pos:start="203:9" pos:end="203:11">ret</name> <operator pos:start="203:13" pos:end="203:13">&lt;</operator> <literal type="number" pos:start="203:15" pos:end="203:15">0</literal> <operator pos:start="203:17" pos:end="203:18">||</operator> <name pos:start="203:20" pos:end="203:22">ret</name><operator pos:start="203:23" pos:end="203:24">==</operator><name pos:start="203:25" pos:end="203:37">FRAME_SKIPPED</name></expr>)</condition> <block pos:start="203:40" pos:end="217:5">{<block_content pos:start="205:9" pos:end="215:9">

        <if_stmt pos:start="205:9" pos:end="215:9"><if pos:start="205:9" pos:end="215:9">if <condition pos:start="205:12" pos:end="207:48">(   <expr pos:start="205:16" pos:end="207:47"><name pos:start="205:16" pos:end="205:23"><name pos:start="205:16" pos:end="205:16">s</name><operator pos:start="205:17" pos:end="205:18">-&gt;</operator><name pos:start="205:19" pos:end="205:23">width</name></name>  <operator pos:start="205:26" pos:end="205:27">!=</operator> <name pos:start="205:29" pos:end="205:46"><name pos:start="205:29" pos:end="205:33">avctx</name><operator pos:start="205:34" pos:end="205:35">-&gt;</operator><name pos:start="205:36" pos:end="205:46">coded_width</name></name>

            <operator pos:start="207:13" pos:end="207:14">||</operator> <name pos:start="207:16" pos:end="207:24"><name pos:start="207:16" pos:end="207:16">s</name><operator pos:start="207:17" pos:end="207:18">-&gt;</operator><name pos:start="207:19" pos:end="207:24">height</name></name> <operator pos:start="207:26" pos:end="207:27">!=</operator> <name pos:start="207:29" pos:end="207:47"><name pos:start="207:29" pos:end="207:33">avctx</name><operator pos:start="207:34" pos:end="207:35">-&gt;</operator><name pos:start="207:36" pos:end="207:47">coded_height</name></name></expr>)</condition> <block pos:start="207:50" pos:end="215:9">{<block_content pos:start="209:17" pos:end="213:47">

                <expr_stmt pos:start="209:17" pos:end="209:121"><expr pos:start="209:17" pos:end="209:120"><call pos:start="209:17" pos:end="209:120"><name pos:start="209:17" pos:end="209:22">av_log</name><argument_list pos:start="209:23" pos:end="209:120">(<argument pos:start="209:24" pos:end="209:31"><expr pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:31"><name pos:start="209:24" pos:end="209:24">s</name><operator pos:start="209:25" pos:end="209:26">-&gt;</operator><name pos:start="209:27" pos:end="209:31">avctx</name></name></expr></argument>, <argument pos:start="209:34" pos:end="209:47"><expr pos:start="209:34" pos:end="209:47"><name pos:start="209:34" pos:end="209:47">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="209:50" pos:end="209:119"><expr pos:start="209:50" pos:end="209:119"><literal type="string" pos:start="209:50" pos:end="209:119">"Reverting picture dimensions change due to header decoding failure\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="211:46"><expr pos:start="211:17" pos:end="211:45"><name pos:start="211:17" pos:end="211:24"><name pos:start="211:17" pos:end="211:17">s</name><operator pos:start="211:18" pos:end="211:19">-&gt;</operator><name pos:start="211:20" pos:end="211:24">width</name></name> <operator pos:start="211:26" pos:end="211:26">=</operator> <name pos:start="211:28" pos:end="211:45"><name pos:start="211:28" pos:end="211:32">avctx</name><operator pos:start="211:33" pos:end="211:34">-&gt;</operator><name pos:start="211:35" pos:end="211:45">coded_width</name></name></expr>;</expr_stmt>

                <expr_stmt pos:start="213:17" pos:end="213:47"><expr pos:start="213:17" pos:end="213:46"><name pos:start="213:17" pos:end="213:25"><name pos:start="213:17" pos:end="213:17">s</name><operator pos:start="213:18" pos:end="213:19">-&gt;</operator><name pos:start="213:20" pos:end="213:25">height</name></name><operator pos:start="213:26" pos:end="213:26">=</operator> <name pos:start="213:28" pos:end="213:46"><name pos:start="213:28" pos:end="213:32">avctx</name><operator pos:start="213:33" pos:end="213:34">-&gt;</operator><name pos:start="213:35" pos:end="213:46">coded_height</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="219:5" pos:end="219:66"><if pos:start="219:5" pos:end="219:66">if<condition pos:start="219:7" pos:end="219:26">(<expr pos:start="219:8" pos:end="219:25"><name pos:start="219:8" pos:end="219:10">ret</name><operator pos:start="219:11" pos:end="219:12">==</operator><name pos:start="219:13" pos:end="219:25">FRAME_SKIPPED</name></expr>)</condition><block type="pseudo" pos:start="219:28" pos:end="219:66"><block_content pos:start="219:28" pos:end="219:66"> <return pos:start="219:28" pos:end="219:66">return <expr pos:start="219:35" pos:end="219:65"><call pos:start="219:35" pos:end="219:65"><name pos:start="219:35" pos:end="219:52">get_consumed_bytes</name><argument_list pos:start="219:53" pos:end="219:65">(<argument pos:start="219:54" pos:end="219:54"><expr pos:start="219:54" pos:end="219:54"><name pos:start="219:54" pos:end="219:54">s</name></expr></argument>, <argument pos:start="219:57" pos:end="219:64"><expr pos:start="219:57" pos:end="219:64"><name pos:start="219:57" pos:end="219:64">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:41">/* skip if the header was thrashed */</comment>

    <if_stmt pos:start="225:5" pos:end="231:5"><if pos:start="225:5" pos:end="231:5">if <condition pos:start="225:8" pos:end="225:16">(<expr pos:start="225:9" pos:end="225:15"><name pos:start="225:9" pos:end="225:11">ret</name> <operator pos:start="225:13" pos:end="225:13">&lt;</operator> <literal type="number" pos:start="225:15" pos:end="225:15">0</literal></expr>)</condition><block pos:start="225:17" pos:end="231:5">{<block_content pos:start="227:9" pos:end="229:19">

        <expr_stmt pos:start="227:9" pos:end="227:59"><expr pos:start="227:9" pos:end="227:58"><call pos:start="227:9" pos:end="227:58"><name pos:start="227:9" pos:end="227:14">av_log</name><argument_list pos:start="227:15" pos:end="227:58">(<argument pos:start="227:16" pos:end="227:23"><expr pos:start="227:16" pos:end="227:23"><name pos:start="227:16" pos:end="227:23"><name pos:start="227:16" pos:end="227:16">s</name><operator pos:start="227:17" pos:end="227:18">-&gt;</operator><name pos:start="227:19" pos:end="227:23">avctx</name></name></expr></argument>, <argument pos:start="227:26" pos:end="227:37"><expr pos:start="227:26" pos:end="227:37"><name pos:start="227:26" pos:end="227:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="227:40" pos:end="227:57"><expr pos:start="227:40" pos:end="227:57"><literal type="string" pos:start="227:40" pos:end="227:57">"header damaged\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="229:9" pos:end="229:19">return <expr pos:start="229:16" pos:end="229:18"><name pos:start="229:16" pos:end="229:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="235:5" pos:end="235:39"><expr pos:start="235:5" pos:end="235:38"><name pos:start="235:5" pos:end="235:23"><name pos:start="235:5" pos:end="235:9">avctx</name><operator pos:start="235:10" pos:end="235:11">-&gt;</operator><name pos:start="235:12" pos:end="235:23">has_b_frames</name></name><operator pos:start="235:24" pos:end="235:24">=</operator> <operator pos:start="235:26" pos:end="235:26">!</operator><name pos:start="235:27" pos:end="235:38"><name pos:start="235:27" pos:end="235:27">s</name><operator pos:start="235:28" pos:end="235:29">-&gt;</operator><name pos:start="235:30" pos:end="235:38">low_delay</name></name></expr>;</expr_stmt>



    <if_stmt pos:start="239:5" pos:end="263:5"><if pos:start="239:5" pos:end="263:5">if<condition pos:start="239:7" pos:end="239:69">(<expr pos:start="239:8" pos:end="239:68"><name pos:start="239:8" pos:end="239:20"><name pos:start="239:8" pos:end="239:8">s</name><operator pos:start="239:9" pos:end="239:10">-&gt;</operator><name pos:start="239:11" pos:end="239:20">xvid_build</name></name><operator pos:start="239:21" pos:end="239:22">==</operator><operator pos:start="239:23" pos:end="239:23">-</operator><literal type="number" pos:start="239:24" pos:end="239:24">1</literal> <operator pos:start="239:26" pos:end="239:27">&amp;&amp;</operator> <name pos:start="239:29" pos:end="239:43"><name pos:start="239:29" pos:end="239:29">s</name><operator pos:start="239:30" pos:end="239:31">-&gt;</operator><name pos:start="239:32" pos:end="239:43">divx_version</name></name><operator pos:start="239:44" pos:end="239:45">==</operator><operator pos:start="239:46" pos:end="239:46">-</operator><literal type="number" pos:start="239:47" pos:end="239:47">1</literal> <operator pos:start="239:49" pos:end="239:50">&amp;&amp;</operator> <name pos:start="239:52" pos:end="239:64"><name pos:start="239:52" pos:end="239:52">s</name><operator pos:start="239:53" pos:end="239:54">-&gt;</operator><name pos:start="239:55" pos:end="239:64">lavc_build</name></name><operator pos:start="239:65" pos:end="239:66">==</operator><operator pos:start="239:67" pos:end="239:67">-</operator><literal type="number" pos:start="239:68" pos:end="239:68">1</literal></expr>)</condition><block pos:start="239:70" pos:end="263:5">{<block_content pos:start="241:9" pos:end="262:0">

        <if_stmt pos:start="241:9" pos:end="262:0"><if pos:start="241:9" pos:end="262:0">if<condition pos:start="241:11" pos:end="249:12">(<expr pos:start="241:12" pos:end="247:42"><name pos:start="241:12" pos:end="241:30"><name pos:start="241:12" pos:end="241:12">s</name><operator pos:start="241:13" pos:end="241:14">-&gt;</operator><name pos:start="241:15" pos:end="241:30">stream_codec_tag</name></name> <operator pos:start="241:32" pos:end="241:33">==</operator> <call pos:start="241:35" pos:end="241:49"><name pos:start="241:35" pos:end="241:41">AV_RL32</name><argument_list pos:start="241:42" pos:end="241:49">(<argument pos:start="241:43" pos:end="241:48"><expr pos:start="241:43" pos:end="241:48"><literal type="string" pos:start="241:43" pos:end="241:48">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="241:51" pos:end="241:52">||</operator>

           <name pos:start="243:12" pos:end="243:23"><name pos:start="243:12" pos:end="243:12">s</name><operator pos:start="243:13" pos:end="243:14">-&gt;</operator><name pos:start="243:15" pos:end="243:23">codec_tag</name></name> <operator pos:start="243:25" pos:end="243:26">==</operator> <call pos:start="243:28" pos:end="243:42"><name pos:start="243:28" pos:end="243:34">AV_RL32</name><argument_list pos:start="243:35" pos:end="243:42">(<argument pos:start="243:36" pos:end="243:41"><expr pos:start="243:36" pos:end="243:41"><literal type="string" pos:start="243:36" pos:end="243:41">"XVID"</literal></expr></argument>)</argument_list></call> <operator pos:start="243:44" pos:end="243:45">||</operator> <name pos:start="243:47" pos:end="243:58"><name pos:start="243:47" pos:end="243:47">s</name><operator pos:start="243:48" pos:end="243:49">-&gt;</operator><name pos:start="243:50" pos:end="243:58">codec_tag</name></name> <operator pos:start="243:60" pos:end="243:61">==</operator> <call pos:start="243:63" pos:end="243:77"><name pos:start="243:63" pos:end="243:69">AV_RL32</name><argument_list pos:start="243:70" pos:end="243:77">(<argument pos:start="243:71" pos:end="243:76"><expr pos:start="243:71" pos:end="243:76"><literal type="string" pos:start="243:71" pos:end="243:76">"XVIX"</literal></expr></argument>)</argument_list></call> <operator pos:start="243:79" pos:end="243:80">||</operator>

           <name pos:start="245:12" pos:end="245:23"><name pos:start="245:12" pos:end="245:12">s</name><operator pos:start="245:13" pos:end="245:14">-&gt;</operator><name pos:start="245:15" pos:end="245:23">codec_tag</name></name> <operator pos:start="245:25" pos:end="245:26">==</operator> <call pos:start="245:28" pos:end="245:42"><name pos:start="245:28" pos:end="245:34">AV_RL32</name><argument_list pos:start="245:35" pos:end="245:42">(<argument pos:start="245:36" pos:end="245:41"><expr pos:start="245:36" pos:end="245:41"><literal type="string" pos:start="245:36" pos:end="245:41">"RMP4"</literal></expr></argument>)</argument_list></call> <operator pos:start="245:44" pos:end="245:45">||</operator> <name pos:start="245:47" pos:end="245:58"><name pos:start="245:47" pos:end="245:47">s</name><operator pos:start="245:48" pos:end="245:49">-&gt;</operator><name pos:start="245:50" pos:end="245:58">codec_tag</name></name> <operator pos:start="245:60" pos:end="245:61">==</operator> <call pos:start="245:63" pos:end="245:77"><name pos:start="245:63" pos:end="245:69">AV_RL32</name><argument_list pos:start="245:70" pos:end="245:77">(<argument pos:start="245:71" pos:end="245:76"><expr pos:start="245:71" pos:end="245:76"><literal type="string" pos:start="245:71" pos:end="245:76">"ZMP4"</literal></expr></argument>)</argument_list></call> <operator pos:start="245:79" pos:end="245:80">||</operator>

           <name pos:start="247:12" pos:end="247:23"><name pos:start="247:12" pos:end="247:12">s</name><operator pos:start="247:13" pos:end="247:14">-&gt;</operator><name pos:start="247:15" pos:end="247:23">codec_tag</name></name> <operator pos:start="247:25" pos:end="247:26">==</operator> <call pos:start="247:28" pos:end="247:42"><name pos:start="247:28" pos:end="247:34">AV_RL32</name><argument_list pos:start="247:35" pos:end="247:42">(<argument pos:start="247:36" pos:end="247:41"><expr pos:start="247:36" pos:end="247:41"><literal type="string" pos:start="247:36" pos:end="247:41">"SIPP"</literal></expr></argument>)</argument_list></call></expr>

           )</condition><block type="pseudo" pos:start="251:13" pos:end="262:0"><block_content pos:start="251:13" pos:end="262:0">

            <expr_stmt pos:start="251:13" pos:end="262:0"><expr pos:start="251:13" pos:end="251:28"><name pos:start="251:13" pos:end="251:25"><name pos:start="251:13" pos:end="251:13">s</name><operator pos:start="251:14" pos:end="251:15">-&gt;</operator><name pos:start="251:16" pos:end="251:25">xvid_build</name></name><operator pos:start="251:26" pos:end="251:26">=</operator> <literal type="number" pos:start="251:28" pos:end="251:28">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="253:1" pos:end="253:5">#<cpp:directive pos:start="253:2" pos:end="253:3">if</cpp:directive> <expr pos:start="253:5" pos:end="253:5"><literal type="number" pos:start="253:5" pos:end="253:5">0</literal></expr></cpp:if>

        if(s-&gt;codec_tag == AV_RL32("DIVX") &amp;&amp; s-&gt;vo_type==0 &amp;&amp; s-&gt;vol_control_parameters==1

           &amp;&amp; s-&gt;padding_bug_score &gt; 0 &amp;&amp; s-&gt;low_delay) <comment type="line" pos:start="257:57" pos:end="257:84">// XVID with modified fourcc</comment>

            s-&gt;xvid_build= 0;

<cpp:endif pos:start="261:1" pos:end="261:6">#<cpp:directive pos:start="261:2" pos:end="261:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if<condition pos:start="267:7" pos:end="267:69">(<expr pos:start="267:8" pos:end="267:68"><name pos:start="267:8" pos:end="267:20"><name pos:start="267:8" pos:end="267:8">s</name><operator pos:start="267:9" pos:end="267:10">-&gt;</operator><name pos:start="267:11" pos:end="267:20">xvid_build</name></name><operator pos:start="267:21" pos:end="267:22">==</operator><operator pos:start="267:23" pos:end="267:23">-</operator><literal type="number" pos:start="267:24" pos:end="267:24">1</literal> <operator pos:start="267:26" pos:end="267:27">&amp;&amp;</operator> <name pos:start="267:29" pos:end="267:43"><name pos:start="267:29" pos:end="267:29">s</name><operator pos:start="267:30" pos:end="267:31">-&gt;</operator><name pos:start="267:32" pos:end="267:43">divx_version</name></name><operator pos:start="267:44" pos:end="267:45">==</operator><operator pos:start="267:46" pos:end="267:46">-</operator><literal type="number" pos:start="267:47" pos:end="267:47">1</literal> <operator pos:start="267:49" pos:end="267:50">&amp;&amp;</operator> <name pos:start="267:52" pos:end="267:64"><name pos:start="267:52" pos:end="267:52">s</name><operator pos:start="267:53" pos:end="267:54">-&gt;</operator><name pos:start="267:55" pos:end="267:64">lavc_build</name></name><operator pos:start="267:65" pos:end="267:66">==</operator><operator pos:start="267:67" pos:end="267:67">-</operator><literal type="number" pos:start="267:68" pos:end="267:68">1</literal></expr>)</condition><block pos:start="267:70" pos:end="273:5">{<block_content pos:start="269:9" pos:end="271:33">

        <if_stmt pos:start="269:9" pos:end="271:33"><if pos:start="269:9" pos:end="271:33">if<condition pos:start="269:11" pos:end="269:92">(<expr pos:start="269:12" pos:end="269:91"><name pos:start="269:12" pos:end="269:23"><name pos:start="269:12" pos:end="269:12">s</name><operator pos:start="269:13" pos:end="269:14">-&gt;</operator><name pos:start="269:15" pos:end="269:23">codec_tag</name></name> <operator pos:start="269:25" pos:end="269:26">==</operator> <call pos:start="269:28" pos:end="269:42"><name pos:start="269:28" pos:end="269:34">AV_RL32</name><argument_list pos:start="269:35" pos:end="269:42">(<argument pos:start="269:36" pos:end="269:41"><expr pos:start="269:36" pos:end="269:41"><literal type="string" pos:start="269:36" pos:end="269:41">"DIVX"</literal></expr></argument>)</argument_list></call> <operator pos:start="269:44" pos:end="269:45">&amp;&amp;</operator> <name pos:start="269:47" pos:end="269:56"><name pos:start="269:47" pos:end="269:47">s</name><operator pos:start="269:48" pos:end="269:49">-&gt;</operator><name pos:start="269:50" pos:end="269:56">vo_type</name></name><operator pos:start="269:57" pos:end="269:58">==</operator><literal type="number" pos:start="269:59" pos:end="269:59">0</literal> <operator pos:start="269:61" pos:end="269:62">&amp;&amp;</operator> <name pos:start="269:64" pos:end="269:88"><name pos:start="269:64" pos:end="269:64">s</name><operator pos:start="269:65" pos:end="269:66">-&gt;</operator><name pos:start="269:67" pos:end="269:88">vol_control_parameters</name></name><operator pos:start="269:89" pos:end="269:90">==</operator><literal type="number" pos:start="269:91" pos:end="269:91">0</literal></expr>)</condition><block type="pseudo" pos:start="271:13" pos:end="271:33"><block_content pos:start="271:13" pos:end="271:33">

            <expr_stmt pos:start="271:13" pos:end="271:33"><expr pos:start="271:13" pos:end="271:32"><name pos:start="271:13" pos:end="271:27"><name pos:start="271:13" pos:end="271:13">s</name><operator pos:start="271:14" pos:end="271:15">-&gt;</operator><name pos:start="271:16" pos:end="271:27">divx_version</name></name><operator pos:start="271:28" pos:end="271:28">=</operator> <literal type="number" pos:start="271:30" pos:end="271:32">400</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="271:35" pos:end="271:42">//divx 4</comment>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="277:5" pos:end="283:5"><if pos:start="277:5" pos:end="283:5">if<condition pos:start="277:7" pos:end="277:46">(<expr pos:start="277:8" pos:end="277:45"><name pos:start="277:8" pos:end="277:20"><name pos:start="277:8" pos:end="277:8">s</name><operator pos:start="277:9" pos:end="277:10">-&gt;</operator><name pos:start="277:11" pos:end="277:20">xvid_build</name></name><operator pos:start="277:21" pos:end="277:22">&gt;=</operator><literal type="number" pos:start="277:23" pos:end="277:23">0</literal> <operator pos:start="277:25" pos:end="277:26">&amp;&amp;</operator> <name pos:start="277:28" pos:end="277:42"><name pos:start="277:28" pos:end="277:28">s</name><operator pos:start="277:29" pos:end="277:30">-&gt;</operator><name pos:start="277:31" pos:end="277:42">divx_version</name></name><operator pos:start="277:43" pos:end="277:44">&gt;=</operator><literal type="number" pos:start="277:45" pos:end="277:45">0</literal></expr>)</condition><block pos:start="277:47" pos:end="283:5">{<block_content pos:start="279:9" pos:end="281:26">

        <expr_stmt pos:start="279:9" pos:end="281:26"><expr pos:start="279:9" pos:end="281:25"><name pos:start="279:9" pos:end="279:23"><name pos:start="279:9" pos:end="279:9">s</name><operator pos:start="279:10" pos:end="279:11">-&gt;</operator><name pos:start="279:12" pos:end="279:23">divx_version</name></name><operator pos:start="279:24" pos:end="279:24">=</operator>

        <name pos:start="281:9" pos:end="281:21"><name pos:start="281:9" pos:end="281:9">s</name><operator pos:start="281:10" pos:end="281:11">-&gt;</operator><name pos:start="281:12" pos:end="281:21">divx_build</name></name><operator pos:start="281:22" pos:end="281:22">=</operator> <operator pos:start="281:24" pos:end="281:24">-</operator><literal type="number" pos:start="281:25" pos:end="281:25">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="287:5" pos:end="429:5"><if pos:start="287:5" pos:end="429:5">if<condition pos:start="287:7" pos:end="287:44">(<expr pos:start="287:8" pos:end="287:43"><name pos:start="287:8" pos:end="287:25"><name pos:start="287:8" pos:end="287:8">s</name><operator pos:start="287:9" pos:end="287:10">-&gt;</operator><name pos:start="287:11" pos:end="287:25">workaround_bugs</name></name><operator pos:start="287:26" pos:end="287:26">&amp;</operator><name pos:start="287:27" pos:end="287:43">FF_BUG_AUTODETECT</name></expr>)</condition><block pos:start="287:45" pos:end="429:5">{<block_content pos:start="289:9" pos:end="428:0">

        <if_stmt pos:start="289:9" pos:end="291:51"><if pos:start="289:9" pos:end="291:51">if<condition pos:start="289:11" pos:end="289:43">(<expr pos:start="289:12" pos:end="289:42"><name pos:start="289:12" pos:end="289:23"><name pos:start="289:12" pos:end="289:12">s</name><operator pos:start="289:13" pos:end="289:14">-&gt;</operator><name pos:start="289:15" pos:end="289:23">codec_tag</name></name> <operator pos:start="289:25" pos:end="289:26">==</operator> <call pos:start="289:28" pos:end="289:42"><name pos:start="289:28" pos:end="289:34">AV_RL32</name><argument_list pos:start="289:35" pos:end="289:42">(<argument pos:start="289:36" pos:end="289:41"><expr pos:start="289:36" pos:end="289:41"><literal type="string" pos:start="289:36" pos:end="289:41">"XVIX"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="291:13" pos:end="291:51"><block_content pos:start="291:13" pos:end="291:51">

            <expr_stmt pos:start="291:13" pos:end="291:51"><expr pos:start="291:13" pos:end="291:50"><name pos:start="291:13" pos:end="291:30"><name pos:start="291:13" pos:end="291:13">s</name><operator pos:start="291:14" pos:end="291:15">-&gt;</operator><name pos:start="291:16" pos:end="291:30">workaround_bugs</name></name><operator pos:start="291:31" pos:end="291:32">|=</operator> <name pos:start="291:34" pos:end="291:50">FF_BUG_XVID_ILACE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="295:9" pos:end="299:9"><if pos:start="295:9" pos:end="299:9">if<condition pos:start="295:11" pos:end="295:43">(<expr pos:start="295:12" pos:end="295:42"><name pos:start="295:12" pos:end="295:23"><name pos:start="295:12" pos:end="295:12">s</name><operator pos:start="295:13" pos:end="295:14">-&gt;</operator><name pos:start="295:15" pos:end="295:23">codec_tag</name></name> <operator pos:start="295:25" pos:end="295:26">==</operator> <call pos:start="295:28" pos:end="295:42"><name pos:start="295:28" pos:end="295:34">AV_RL32</name><argument_list pos:start="295:35" pos:end="295:42">(<argument pos:start="295:36" pos:end="295:41"><expr pos:start="295:36" pos:end="295:41"><literal type="string" pos:start="295:36" pos:end="295:41">"UMP4"</literal></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="295:44" pos:end="299:9">{<block_content pos:start="297:13" pos:end="297:45">

            <expr_stmt pos:start="297:13" pos:end="297:45"><expr pos:start="297:13" pos:end="297:44"><name pos:start="297:13" pos:end="297:30"><name pos:start="297:13" pos:end="297:13">s</name><operator pos:start="297:14" pos:end="297:15">-&gt;</operator><name pos:start="297:16" pos:end="297:30">workaround_bugs</name></name><operator pos:start="297:31" pos:end="297:32">|=</operator> <name pos:start="297:34" pos:end="297:44">FF_BUG_UMP4</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="303:9" pos:end="307:9"><if pos:start="303:9" pos:end="307:9">if<condition pos:start="303:11" pos:end="303:54">(<expr pos:start="303:12" pos:end="303:53"><name pos:start="303:12" pos:end="303:26"><name pos:start="303:12" pos:end="303:12">s</name><operator pos:start="303:13" pos:end="303:14">-&gt;</operator><name pos:start="303:15" pos:end="303:26">divx_version</name></name><operator pos:start="303:27" pos:end="303:28">&gt;=</operator><literal type="number" pos:start="303:29" pos:end="303:31">500</literal> <operator pos:start="303:33" pos:end="303:34">&amp;&amp;</operator> <name pos:start="303:36" pos:end="303:48"><name pos:start="303:36" pos:end="303:36">s</name><operator pos:start="303:37" pos:end="303:38">-&gt;</operator><name pos:start="303:39" pos:end="303:48">divx_build</name></name><operator pos:start="303:49" pos:end="303:49">&lt;</operator><literal type="number" pos:start="303:50" pos:end="303:53">1814</literal></expr>)</condition><block pos:start="303:55" pos:end="307:9">{<block_content pos:start="305:13" pos:end="305:52">

            <expr_stmt pos:start="305:13" pos:end="305:52"><expr pos:start="305:13" pos:end="305:51"><name pos:start="305:13" pos:end="305:30"><name pos:start="305:13" pos:end="305:13">s</name><operator pos:start="305:14" pos:end="305:15">-&gt;</operator><name pos:start="305:16" pos:end="305:30">workaround_bugs</name></name><operator pos:start="305:31" pos:end="305:32">|=</operator> <name pos:start="305:34" pos:end="305:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="311:9" pos:end="315:9"><if pos:start="311:9" pos:end="315:9">if<condition pos:start="311:11" pos:end="311:53">(<expr pos:start="311:12" pos:end="311:52"><name pos:start="311:12" pos:end="311:26"><name pos:start="311:12" pos:end="311:12">s</name><operator pos:start="311:13" pos:end="311:14">-&gt;</operator><name pos:start="311:15" pos:end="311:26">divx_version</name></name><operator pos:start="311:27" pos:end="311:27">&gt;</operator><literal type="number" pos:start="311:28" pos:end="311:30">502</literal> <operator pos:start="311:32" pos:end="311:33">&amp;&amp;</operator> <name pos:start="311:35" pos:end="311:47"><name pos:start="311:35" pos:end="311:35">s</name><operator pos:start="311:36" pos:end="311:37">-&gt;</operator><name pos:start="311:38" pos:end="311:47">divx_build</name></name><operator pos:start="311:48" pos:end="311:48">&lt;</operator><literal type="number" pos:start="311:49" pos:end="311:52">1814</literal></expr>)</condition><block pos:start="311:54" pos:end="315:9">{<block_content pos:start="313:13" pos:end="313:53">

            <expr_stmt pos:start="313:13" pos:end="313:53"><expr pos:start="313:13" pos:end="313:52"><name pos:start="313:13" pos:end="313:30"><name pos:start="313:13" pos:end="313:13">s</name><operator pos:start="313:14" pos:end="313:15">-&gt;</operator><name pos:start="313:16" pos:end="313:30">workaround_bugs</name></name><operator pos:start="313:31" pos:end="313:32">|=</operator> <name pos:start="313:34" pos:end="313:52">FF_BUG_QPEL_CHROMA2</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="319:9" pos:end="321:49"><if pos:start="319:9" pos:end="321:49">if<condition pos:start="319:11" pos:end="319:29">(<expr pos:start="319:12" pos:end="319:28"><name pos:start="319:12" pos:end="319:24"><name pos:start="319:12" pos:end="319:12">s</name><operator pos:start="319:13" pos:end="319:14">-&gt;</operator><name pos:start="319:15" pos:end="319:24">xvid_build</name></name><operator pos:start="319:25" pos:end="319:26">&lt;=</operator><literal type="number" pos:start="319:27" pos:end="319:28">3U</literal></expr>)</condition><block type="pseudo" pos:start="321:13" pos:end="321:49"><block_content pos:start="321:13" pos:end="321:49">

            <expr_stmt pos:start="321:13" pos:end="321:49"><expr pos:start="321:13" pos:end="321:48"><name pos:start="321:13" pos:end="321:32"><name pos:start="321:13" pos:end="321:13">s</name><operator pos:start="321:14" pos:end="321:15">-&gt;</operator><name pos:start="321:16" pos:end="321:32">padding_bug_score</name></name><operator pos:start="321:33" pos:end="321:33">=</operator> <literal type="number" pos:start="321:35" pos:end="321:37">256</literal><operator pos:start="321:38" pos:end="321:38">*</operator><literal type="number" pos:start="321:39" pos:end="321:41">256</literal><operator pos:start="321:42" pos:end="321:42">*</operator><literal type="number" pos:start="321:43" pos:end="321:45">256</literal><operator pos:start="321:46" pos:end="321:46">*</operator><literal type="number" pos:start="321:47" pos:end="321:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="325:9" pos:end="327:52"><if pos:start="325:9" pos:end="327:52">if<condition pos:start="325:11" pos:end="325:29">(<expr pos:start="325:12" pos:end="325:28"><name pos:start="325:12" pos:end="325:24"><name pos:start="325:12" pos:end="325:12">s</name><operator pos:start="325:13" pos:end="325:14">-&gt;</operator><name pos:start="325:15" pos:end="325:24">xvid_build</name></name><operator pos:start="325:25" pos:end="325:26">&lt;=</operator><literal type="number" pos:start="325:27" pos:end="325:28">1U</literal></expr>)</condition><block type="pseudo" pos:start="327:13" pos:end="327:52"><block_content pos:start="327:13" pos:end="327:52">

            <expr_stmt pos:start="327:13" pos:end="327:52"><expr pos:start="327:13" pos:end="327:51"><name pos:start="327:13" pos:end="327:30"><name pos:start="327:13" pos:end="327:13">s</name><operator pos:start="327:14" pos:end="327:15">-&gt;</operator><name pos:start="327:16" pos:end="327:30">workaround_bugs</name></name><operator pos:start="327:31" pos:end="327:32">|=</operator> <name pos:start="327:34" pos:end="327:51">FF_BUG_QPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="331:9" pos:end="333:45"><if pos:start="331:9" pos:end="333:45">if<condition pos:start="331:11" pos:end="331:30">(<expr pos:start="331:12" pos:end="331:29"><name pos:start="331:12" pos:end="331:24"><name pos:start="331:12" pos:end="331:12">s</name><operator pos:start="331:13" pos:end="331:14">-&gt;</operator><name pos:start="331:15" pos:end="331:24">xvid_build</name></name><operator pos:start="331:25" pos:end="331:26">&lt;=</operator><literal type="number" pos:start="331:27" pos:end="331:29">12U</literal></expr>)</condition><block type="pseudo" pos:start="333:13" pos:end="333:45"><block_content pos:start="333:13" pos:end="333:45">

            <expr_stmt pos:start="333:13" pos:end="333:45"><expr pos:start="333:13" pos:end="333:44"><name pos:start="333:13" pos:end="333:30"><name pos:start="333:13" pos:end="333:13">s</name><operator pos:start="333:14" pos:end="333:15">-&gt;</operator><name pos:start="333:16" pos:end="333:30">workaround_bugs</name></name><operator pos:start="333:31" pos:end="333:32">|=</operator> <name pos:start="333:34" pos:end="333:44">FF_BUG_EDGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="337:9" pos:end="350:0"><if pos:start="337:9" pos:end="350:0">if<condition pos:start="337:11" pos:end="337:30">(<expr pos:start="337:12" pos:end="337:29"><name pos:start="337:12" pos:end="337:24"><name pos:start="337:12" pos:end="337:12">s</name><operator pos:start="337:13" pos:end="337:14">-&gt;</operator><name pos:start="337:15" pos:end="337:24">xvid_build</name></name><operator pos:start="337:25" pos:end="337:26">&lt;=</operator><literal type="number" pos:start="337:27" pos:end="337:29">32U</literal></expr>)</condition><block type="pseudo" pos:start="339:13" pos:end="350:0"><block_content pos:start="339:13" pos:end="350:0">

            <expr_stmt pos:start="339:13" pos:end="350:0"><expr pos:start="339:13" pos:end="339:47"><name pos:start="339:13" pos:end="339:30"><name pos:start="339:13" pos:end="339:13">s</name><operator pos:start="339:14" pos:end="339:15">-&gt;</operator><name pos:start="339:16" pos:end="339:30">workaround_bugs</name></name><operator pos:start="339:31" pos:end="339:32">|=</operator> <name pos:start="339:34" pos:end="339:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:define pos:start="343:1" pos:end="349:50">#<cpp:directive pos:start="343:2" pos:end="343:7">define</cpp:directive> <cpp:macro pos:start="343:9" pos:end="343:41"><name pos:start="343:9" pos:end="343:21">SET_QPEL_FUNC</name><parameter_list pos:start="343:22" pos:end="343:41">(<parameter pos:start="343:23" pos:end="343:30"><type pos:start="343:23" pos:end="343:30"><name pos:start="343:23" pos:end="343:30">postfix1</name></type></parameter>, <parameter pos:start="343:33" pos:end="343:40"><type pos:start="343:33" pos:end="343:40"><name pos:start="343:33" pos:end="343:40">postfix2</name></type></parameter>)</parameter_list></cpp:macro> \

    <cpp:value pos:start="345:5" pos:end="349:50">s-&gt;dsp.put_ ## postfix1 = ff_put_ ## postfix2;\

    s-&gt;dsp.put_no_rnd_ ## postfix1 = ff_put_no_rnd_ ## postfix2;\

    s-&gt;dsp.avg_ ## postfix1 = ff_avg_ ## postfix2;</cpp:value></cpp:define>



        <if_stmt pos:start="353:9" pos:end="355:49"><if pos:start="353:9" pos:end="355:49">if<condition pos:start="353:11" pos:end="353:31">(<expr pos:start="353:12" pos:end="353:30"><name pos:start="353:12" pos:end="353:24"><name pos:start="353:12" pos:end="353:12">s</name><operator pos:start="353:13" pos:end="353:14">-&gt;</operator><name pos:start="353:15" pos:end="353:24">lavc_build</name></name><operator pos:start="353:25" pos:end="353:25">&lt;</operator><literal type="number" pos:start="353:26" pos:end="353:30">4653U</literal></expr>)</condition><block type="pseudo" pos:start="355:13" pos:end="355:49"><block_content pos:start="355:13" pos:end="355:49">

            <expr_stmt pos:start="355:13" pos:end="355:49"><expr pos:start="355:13" pos:end="355:48"><name pos:start="355:13" pos:end="355:30"><name pos:start="355:13" pos:end="355:13">s</name><operator pos:start="355:14" pos:end="355:15">-&gt;</operator><name pos:start="355:16" pos:end="355:30">workaround_bugs</name></name><operator pos:start="355:31" pos:end="355:32">|=</operator> <name pos:start="355:34" pos:end="355:48">FF_BUG_STD_QPEL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="359:9" pos:end="361:57"><if pos:start="359:9" pos:end="361:57">if<condition pos:start="359:11" pos:end="359:31">(<expr pos:start="359:12" pos:end="359:30"><name pos:start="359:12" pos:end="359:24"><name pos:start="359:12" pos:end="359:12">s</name><operator pos:start="359:13" pos:end="359:14">-&gt;</operator><name pos:start="359:15" pos:end="359:24">lavc_build</name></name><operator pos:start="359:25" pos:end="359:25">&lt;</operator><literal type="number" pos:start="359:26" pos:end="359:30">4655U</literal></expr>)</condition><block type="pseudo" pos:start="361:13" pos:end="361:57"><block_content pos:start="361:13" pos:end="361:57">

            <expr_stmt pos:start="361:13" pos:end="361:57"><expr pos:start="361:13" pos:end="361:56"><name pos:start="361:13" pos:end="361:30"><name pos:start="361:13" pos:end="361:13">s</name><operator pos:start="361:14" pos:end="361:15">-&gt;</operator><name pos:start="361:16" pos:end="361:30">workaround_bugs</name></name><operator pos:start="361:31" pos:end="361:32">|=</operator> <name pos:start="361:34" pos:end="361:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="365:9" pos:end="369:9"><if pos:start="365:9" pos:end="369:9">if<condition pos:start="365:11" pos:end="365:31">(<expr pos:start="365:12" pos:end="365:30"><name pos:start="365:12" pos:end="365:24"><name pos:start="365:12" pos:end="365:12">s</name><operator pos:start="365:13" pos:end="365:14">-&gt;</operator><name pos:start="365:15" pos:end="365:24">lavc_build</name></name><operator pos:start="365:25" pos:end="365:25">&lt;</operator><literal type="number" pos:start="365:26" pos:end="365:30">4670U</literal></expr>)</condition><block pos:start="365:32" pos:end="369:9">{<block_content pos:start="367:13" pos:end="367:45">

            <expr_stmt pos:start="367:13" pos:end="367:45"><expr pos:start="367:13" pos:end="367:44"><name pos:start="367:13" pos:end="367:30"><name pos:start="367:13" pos:end="367:13">s</name><operator pos:start="367:14" pos:end="367:15">-&gt;</operator><name pos:start="367:16" pos:end="367:30">workaround_bugs</name></name><operator pos:start="367:31" pos:end="367:32">|=</operator> <name pos:start="367:34" pos:end="367:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="373:9" pos:end="375:48"><if pos:start="373:9" pos:end="375:48">if<condition pos:start="373:11" pos:end="373:32">(<expr pos:start="373:12" pos:end="373:31"><name pos:start="373:12" pos:end="373:24"><name pos:start="373:12" pos:end="373:12">s</name><operator pos:start="373:13" pos:end="373:14">-&gt;</operator><name pos:start="373:15" pos:end="373:24">lavc_build</name></name><operator pos:start="373:25" pos:end="373:26">&lt;=</operator><literal type="number" pos:start="373:27" pos:end="373:31">4712U</literal></expr>)</condition><block type="pseudo" pos:start="375:13" pos:end="375:48"><block_content pos:start="375:13" pos:end="375:48">

            <expr_stmt pos:start="375:13" pos:end="375:48"><expr pos:start="375:13" pos:end="375:47"><name pos:start="375:13" pos:end="375:30"><name pos:start="375:13" pos:end="375:13">s</name><operator pos:start="375:14" pos:end="375:15">-&gt;</operator><name pos:start="375:16" pos:end="375:30">workaround_bugs</name></name><operator pos:start="375:31" pos:end="375:32">|=</operator> <name pos:start="375:34" pos:end="375:47">FF_BUG_DC_CLIP</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="379:9" pos:end="381:57"><if pos:start="379:9" pos:end="381:57">if<condition pos:start="379:11" pos:end="379:30">(<expr pos:start="379:12" pos:end="379:29"><name pos:start="379:12" pos:end="379:26"><name pos:start="379:12" pos:end="379:12">s</name><operator pos:start="379:13" pos:end="379:14">-&gt;</operator><name pos:start="379:15" pos:end="379:26">divx_version</name></name><operator pos:start="379:27" pos:end="379:28">&gt;=</operator><literal type="number" pos:start="379:29" pos:end="379:29">0</literal></expr>)</condition><block type="pseudo" pos:start="381:13" pos:end="381:57"><block_content pos:start="381:13" pos:end="381:57">

            <expr_stmt pos:start="381:13" pos:end="381:57"><expr pos:start="381:13" pos:end="381:56"><name pos:start="381:13" pos:end="381:30"><name pos:start="381:13" pos:end="381:13">s</name><operator pos:start="381:14" pos:end="381:15">-&gt;</operator><name pos:start="381:16" pos:end="381:30">workaround_bugs</name></name><operator pos:start="381:31" pos:end="381:32">|=</operator> <name pos:start="381:34" pos:end="381:56">FF_BUG_DIRECT_BLOCKSIZE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt pos:start="383:9" pos:end="385:49"><if pos:start="383:9" pos:end="385:49">if<condition pos:start="383:11" pos:end="383:59">(<expr pos:start="383:12" pos:end="383:58"><name pos:start="383:12" pos:end="383:26"><name pos:start="383:12" pos:end="383:12">s</name><operator pos:start="383:13" pos:end="383:14">-&gt;</operator><name pos:start="383:15" pos:end="383:26">divx_version</name></name><operator pos:start="383:27" pos:end="383:28">==</operator><literal type="number" pos:start="383:29" pos:end="383:31">501</literal> <operator pos:start="383:33" pos:end="383:34">&amp;&amp;</operator> <name pos:start="383:36" pos:end="383:48"><name pos:start="383:36" pos:end="383:36">s</name><operator pos:start="383:37" pos:end="383:38">-&gt;</operator><name pos:start="383:39" pos:end="383:48">divx_build</name></name><operator pos:start="383:49" pos:end="383:50">==</operator><literal type="number" pos:start="383:51" pos:end="383:58">20020416</literal></expr>)</condition><block type="pseudo" pos:start="385:13" pos:end="385:49"><block_content pos:start="385:13" pos:end="385:49">

            <expr_stmt pos:start="385:13" pos:end="385:49"><expr pos:start="385:13" pos:end="385:48"><name pos:start="385:13" pos:end="385:32"><name pos:start="385:13" pos:end="385:13">s</name><operator pos:start="385:14" pos:end="385:15">-&gt;</operator><name pos:start="385:16" pos:end="385:32">padding_bug_score</name></name><operator pos:start="385:33" pos:end="385:33">=</operator> <literal type="number" pos:start="385:35" pos:end="385:37">256</literal><operator pos:start="385:38" pos:end="385:38">*</operator><literal type="number" pos:start="385:39" pos:end="385:41">256</literal><operator pos:start="385:42" pos:end="385:42">*</operator><literal type="number" pos:start="385:43" pos:end="385:45">256</literal><operator pos:start="385:46" pos:end="385:46">*</operator><literal type="number" pos:start="385:47" pos:end="385:48">64</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="389:9" pos:end="393:9"><if pos:start="389:9" pos:end="393:9">if<condition pos:start="389:11" pos:end="389:32">(<expr pos:start="389:12" pos:end="389:31"><name pos:start="389:12" pos:end="389:26"><name pos:start="389:12" pos:end="389:12">s</name><operator pos:start="389:13" pos:end="389:14">-&gt;</operator><name pos:start="389:15" pos:end="389:26">divx_version</name></name><operator pos:start="389:27" pos:end="389:27">&lt;</operator><literal type="number" pos:start="389:28" pos:end="389:31">500U</literal></expr>)</condition><block pos:start="389:33" pos:end="393:9">{<block_content pos:start="391:13" pos:end="391:45">

            <expr_stmt pos:start="391:13" pos:end="391:45"><expr pos:start="391:13" pos:end="391:44"><name pos:start="391:13" pos:end="391:30"><name pos:start="391:13" pos:end="391:13">s</name><operator pos:start="391:14" pos:end="391:15">-&gt;</operator><name pos:start="391:16" pos:end="391:30">workaround_bugs</name></name><operator pos:start="391:31" pos:end="391:32">|=</operator> <name pos:start="391:34" pos:end="391:44">FF_BUG_EDGE</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="397:9" pos:end="428:0"><if pos:start="397:9" pos:end="428:0">if<condition pos:start="397:11" pos:end="397:30">(<expr pos:start="397:12" pos:end="397:29"><name pos:start="397:12" pos:end="397:26"><name pos:start="397:12" pos:end="397:12">s</name><operator pos:start="397:13" pos:end="397:14">-&gt;</operator><name pos:start="397:15" pos:end="397:26">divx_version</name></name><operator pos:start="397:27" pos:end="397:28">&gt;=</operator><literal type="number" pos:start="397:29" pos:end="397:29">0</literal></expr>)</condition><block type="pseudo" pos:start="399:13" pos:end="428:0"><block_content pos:start="399:13" pos:end="428:0">

            <expr_stmt pos:start="399:13" pos:end="428:0"><expr pos:start="399:13" pos:end="399:51"><name pos:start="399:13" pos:end="399:30"><name pos:start="399:13" pos:end="399:13">s</name><operator pos:start="399:14" pos:end="399:15">-&gt;</operator><name pos:start="399:16" pos:end="399:30">workaround_bugs</name></name><operator pos:start="399:31" pos:end="399:32">|=</operator> <name pos:start="399:34" pos:end="399:51">FF_BUG_HPEL_CHROMA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if pos:start="401:1" pos:end="401:5">#<cpp:directive pos:start="401:2" pos:end="401:3">if</cpp:directive> <expr pos:start="401:5" pos:end="401:5"><literal type="number" pos:start="401:5" pos:end="401:5">0</literal></expr></cpp:if>

        if(s-&gt;divx_version==500)

            s-&gt;padding_bug_score= 256*256*256*64;



        <comment type="block" pos:start="409:9" pos:end="413:11">/* very ugly XVID padding bug detection FIXME/XXX solve this differently

         * Let us hope this at least works.

         */</comment>

        if(   s-&gt;resync_marker==0 &amp;&amp; s-&gt;data_partitioning==0 &amp;&amp; s-&gt;divx_version==-1

           &amp;&amp; s-&gt;codec_id==AV_CODEC_ID_MPEG4 &amp;&amp; s-&gt;vo_type==0)

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;



        if(s-&gt;lavc_build&lt;4609U) <comment type="line" pos:start="423:33" pos:end="423:95">//FIXME not sure about the version num but a 4609 file seems ok</comment>

            s-&gt;workaround_bugs|= FF_BUG_NO_PADDING;

<cpp:endif pos:start="427:1" pos:end="427:6">#<cpp:directive pos:start="427:2" pos:end="427:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="433:5" pos:end="461:5"><if pos:start="433:5" pos:end="461:5">if<condition pos:start="433:7" pos:end="433:43">(<expr pos:start="433:8" pos:end="433:42"><name pos:start="433:8" pos:end="433:25"><name pos:start="433:8" pos:end="433:8">s</name><operator pos:start="433:9" pos:end="433:10">-&gt;</operator><name pos:start="433:11" pos:end="433:25">workaround_bugs</name></name><operator pos:start="433:26" pos:end="433:26">&amp;</operator> <name pos:start="433:28" pos:end="433:42">FF_BUG_STD_QPEL</name></expr>)</condition><block pos:start="433:44" pos:end="461:5">{<block_content pos:start="435:9" pos:end="459:63">

        <macro pos:start="435:9" pos:end="435:64"><name pos:start="435:9" pos:end="435:21">SET_QPEL_FUNC</name><argument_list pos:start="435:22" pos:end="435:64">(<argument pos:start="435:23" pos:end="435:44">qpel_pixels_tab[<literal type="number" pos:start="435:39" pos:end="435:39">0</literal>][ <literal type="number" pos:start="435:43" pos:end="435:43">5</literal>]</argument>, <argument pos:start="435:47" pos:end="435:63">qpel16_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="437:9" pos:end="437:64"><name pos:start="437:9" pos:end="437:21">SET_QPEL_FUNC</name><argument_list pos:start="437:22" pos:end="437:64">(<argument pos:start="437:23" pos:end="437:44">qpel_pixels_tab[<literal type="number" pos:start="437:39" pos:end="437:39">0</literal>][ <literal type="number" pos:start="437:43" pos:end="437:43">7</literal>]</argument>, <argument pos:start="437:47" pos:end="437:63">qpel16_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="439:9" pos:end="439:64"><name pos:start="439:9" pos:end="439:21">SET_QPEL_FUNC</name><argument_list pos:start="439:22" pos:end="439:64">(<argument pos:start="439:23" pos:end="439:44">qpel_pixels_tab[<literal type="number" pos:start="439:39" pos:end="439:39">0</literal>][ <literal type="number" pos:start="439:43" pos:end="439:43">9</literal>]</argument>, <argument pos:start="439:47" pos:end="439:63">qpel16_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="441:9" pos:end="441:64"><name pos:start="441:9" pos:end="441:21">SET_QPEL_FUNC</name><argument_list pos:start="441:22" pos:end="441:64">(<argument pos:start="441:23" pos:end="441:44">qpel_pixels_tab[<literal type="number" pos:start="441:39" pos:end="441:39">0</literal>][<literal type="number" pos:start="441:42" pos:end="441:43">11</literal>]</argument>, <argument pos:start="441:47" pos:end="441:63">qpel16_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="443:9" pos:end="443:64"><name pos:start="443:9" pos:end="443:21">SET_QPEL_FUNC</name><argument_list pos:start="443:22" pos:end="443:64">(<argument pos:start="443:23" pos:end="443:44">qpel_pixels_tab[<literal type="number" pos:start="443:39" pos:end="443:39">0</literal>][<literal type="number" pos:start="443:42" pos:end="443:43">13</literal>]</argument>, <argument pos:start="443:47" pos:end="443:63">qpel16_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="445:9" pos:end="445:64"><name pos:start="445:9" pos:end="445:21">SET_QPEL_FUNC</name><argument_list pos:start="445:22" pos:end="445:64">(<argument pos:start="445:23" pos:end="445:44">qpel_pixels_tab[<literal type="number" pos:start="445:39" pos:end="445:39">0</literal>][<literal type="number" pos:start="445:42" pos:end="445:43">15</literal>]</argument>, <argument pos:start="445:47" pos:end="445:63">qpel16_mc33_old_c</argument>)</argument_list></macro>



        <macro pos:start="449:9" pos:end="449:63"><name pos:start="449:9" pos:end="449:21">SET_QPEL_FUNC</name><argument_list pos:start="449:22" pos:end="449:63">(<argument pos:start="449:23" pos:end="449:44">qpel_pixels_tab[<literal type="number" pos:start="449:39" pos:end="449:39">1</literal>][ <literal type="number" pos:start="449:43" pos:end="449:43">5</literal>]</argument>, <argument pos:start="449:47" pos:end="449:62">qpel8_mc11_old_c</argument>)</argument_list></macro>

        <macro pos:start="451:9" pos:end="451:63"><name pos:start="451:9" pos:end="451:21">SET_QPEL_FUNC</name><argument_list pos:start="451:22" pos:end="451:63">(<argument pos:start="451:23" pos:end="451:44">qpel_pixels_tab[<literal type="number" pos:start="451:39" pos:end="451:39">1</literal>][ <literal type="number" pos:start="451:43" pos:end="451:43">7</literal>]</argument>, <argument pos:start="451:47" pos:end="451:62">qpel8_mc31_old_c</argument>)</argument_list></macro>

        <macro pos:start="453:9" pos:end="453:63"><name pos:start="453:9" pos:end="453:21">SET_QPEL_FUNC</name><argument_list pos:start="453:22" pos:end="453:63">(<argument pos:start="453:23" pos:end="453:44">qpel_pixels_tab[<literal type="number" pos:start="453:39" pos:end="453:39">1</literal>][ <literal type="number" pos:start="453:43" pos:end="453:43">9</literal>]</argument>, <argument pos:start="453:47" pos:end="453:62">qpel8_mc12_old_c</argument>)</argument_list></macro>

        <macro pos:start="455:9" pos:end="455:63"><name pos:start="455:9" pos:end="455:21">SET_QPEL_FUNC</name><argument_list pos:start="455:22" pos:end="455:63">(<argument pos:start="455:23" pos:end="455:44">qpel_pixels_tab[<literal type="number" pos:start="455:39" pos:end="455:39">1</literal>][<literal type="number" pos:start="455:42" pos:end="455:43">11</literal>]</argument>, <argument pos:start="455:47" pos:end="455:62">qpel8_mc32_old_c</argument>)</argument_list></macro>

        <macro pos:start="457:9" pos:end="457:63"><name pos:start="457:9" pos:end="457:21">SET_QPEL_FUNC</name><argument_list pos:start="457:22" pos:end="457:63">(<argument pos:start="457:23" pos:end="457:44">qpel_pixels_tab[<literal type="number" pos:start="457:39" pos:end="457:39">1</literal>][<literal type="number" pos:start="457:42" pos:end="457:43">13</literal>]</argument>, <argument pos:start="457:47" pos:end="457:62">qpel8_mc13_old_c</argument>)</argument_list></macro>

        <macro pos:start="459:9" pos:end="459:63"><name pos:start="459:9" pos:end="459:21">SET_QPEL_FUNC</name><argument_list pos:start="459:22" pos:end="459:63">(<argument pos:start="459:23" pos:end="459:44">qpel_pixels_tab[<literal type="number" pos:start="459:39" pos:end="459:39">1</literal>][<literal type="number" pos:start="459:42" pos:end="459:43">15</literal>]</argument>, <argument pos:start="459:47" pos:end="459:62">qpel8_mc33_old_c</argument>)</argument_list></macro>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="465:5" pos:end="476:0"><if pos:start="465:5" pos:end="476:0">if<condition pos:start="465:7" pos:end="465:36">(<expr pos:start="465:8" pos:end="465:35"><name pos:start="465:8" pos:end="465:19"><name pos:start="465:8" pos:end="465:12">avctx</name><operator pos:start="465:13" pos:end="465:14">-&gt;</operator><name pos:start="465:15" pos:end="465:19">debug</name></name> <operator pos:start="465:21" pos:end="465:21">&amp;</operator> <name pos:start="465:23" pos:end="465:35">FF_DEBUG_BUGS</name></expr>)</condition><block type="pseudo" pos:start="467:9" pos:end="476:0"><block_content pos:start="467:9" pos:end="476:0">

        <expr_stmt pos:start="467:9" pos:end="476:0"><expr pos:start="467:9" pos:end="471:41"><call pos:start="467:9" pos:end="471:41"><name pos:start="467:9" pos:end="467:14">av_log</name><argument_list pos:start="467:15" pos:end="471:41">(<argument pos:start="467:16" pos:end="467:23"><expr pos:start="467:16" pos:end="467:23"><name pos:start="467:16" pos:end="467:23"><name pos:start="467:16" pos:end="467:16">s</name><operator pos:start="467:17" pos:end="467:18">-&gt;</operator><name pos:start="467:19" pos:end="467:23">avctx</name></name></expr></argument>, <argument pos:start="467:26" pos:end="467:37"><expr pos:start="467:26" pos:end="467:37"><name pos:start="467:26" pos:end="467:37">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="467:40" pos:end="467:112"><expr pos:start="467:40" pos:end="467:112"><literal type="string" pos:start="467:40" pos:end="467:112">"bugs: %X lavc_build:%d xvid_build:%d divx_version:%d divx_build:%d %s\n"</literal></expr></argument>,

               <argument pos:start="469:16" pos:end="469:33"><expr pos:start="469:16" pos:end="469:33"><name pos:start="469:16" pos:end="469:33"><name pos:start="469:16" pos:end="469:16">s</name><operator pos:start="469:17" pos:end="469:18">-&gt;</operator><name pos:start="469:19" pos:end="469:33">workaround_bugs</name></name></expr></argument>, <argument pos:start="469:36" pos:end="469:48"><expr pos:start="469:36" pos:end="469:48"><name pos:start="469:36" pos:end="469:48"><name pos:start="469:36" pos:end="469:36">s</name><operator pos:start="469:37" pos:end="469:38">-&gt;</operator><name pos:start="469:39" pos:end="469:48">lavc_build</name></name></expr></argument>, <argument pos:start="469:51" pos:end="469:63"><expr pos:start="469:51" pos:end="469:63"><name pos:start="469:51" pos:end="469:63"><name pos:start="469:51" pos:end="469:51">s</name><operator pos:start="469:52" pos:end="469:53">-&gt;</operator><name pos:start="469:54" pos:end="469:63">xvid_build</name></name></expr></argument>, <argument pos:start="469:66" pos:end="469:80"><expr pos:start="469:66" pos:end="469:80"><name pos:start="469:66" pos:end="469:80"><name pos:start="469:66" pos:end="469:66">s</name><operator pos:start="469:67" pos:end="469:68">-&gt;</operator><name pos:start="469:69" pos:end="469:80">divx_version</name></name></expr></argument>, <argument pos:start="469:83" pos:end="469:95"><expr pos:start="469:83" pos:end="469:95"><name pos:start="469:83" pos:end="469:95"><name pos:start="469:83" pos:end="469:83">s</name><operator pos:start="469:84" pos:end="469:85">-&gt;</operator><name pos:start="469:86" pos:end="469:95">divx_build</name></name></expr></argument>,

               <argument pos:start="471:16" pos:end="471:40"><expr pos:start="471:16" pos:end="471:40"><ternary pos:start="471:16" pos:end="471:40"><condition pos:start="471:16" pos:end="471:31"><expr pos:start="471:16" pos:end="471:29"><name pos:start="471:16" pos:end="471:29"><name pos:start="471:16" pos:end="471:16">s</name><operator pos:start="471:17" pos:end="471:18">-&gt;</operator><name pos:start="471:19" pos:end="471:29">divx_packed</name></name></expr> ?</condition><then pos:start="471:33" pos:end="471:35"> <expr pos:start="471:33" pos:end="471:35"><literal type="string" pos:start="471:33" pos:end="471:35">"p"</literal></expr> </then><else pos:start="471:37" pos:end="471:40">: <expr pos:start="471:39" pos:end="471:40"><literal type="string" pos:start="471:39" pos:end="471:40">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



<cpp:if pos:start="475:1" pos:end="475:12">#<cpp:directive pos:start="475:2" pos:end="475:3">if</cpp:directive> <expr pos:start="475:5" pos:end="475:12"><name pos:start="475:5" pos:end="475:12">HAVE_MMX</name></expr></cpp:if>

    <if_stmt pos:start="477:5" pos:end="488:0"><if pos:start="477:5" pos:end="488:0">if <condition pos:start="477:8" pos:end="477:139">(<expr pos:start="477:9" pos:end="477:138"><name pos:start="477:9" pos:end="477:19"><name pos:start="477:9" pos:end="477:9">s</name><operator pos:start="477:10" pos:end="477:11">-&gt;</operator><name pos:start="477:12" pos:end="477:19">codec_id</name></name> <operator pos:start="477:21" pos:end="477:22">==</operator> <name pos:start="477:24" pos:end="477:40">AV_CODEC_ID_MPEG4</name> <operator pos:start="477:42" pos:end="477:43">&amp;&amp;</operator> <name pos:start="477:45" pos:end="477:57"><name pos:start="477:45" pos:end="477:45">s</name><operator pos:start="477:46" pos:end="477:47">-&gt;</operator><name pos:start="477:48" pos:end="477:57">xvid_build</name></name><operator pos:start="477:58" pos:end="477:59">&gt;=</operator><literal type="number" pos:start="477:60" pos:end="477:60">0</literal> <operator pos:start="477:62" pos:end="477:63">&amp;&amp;</operator> <name pos:start="477:65" pos:end="477:80"><name pos:start="477:65" pos:end="477:69">avctx</name><operator pos:start="477:70" pos:end="477:71">-&gt;</operator><name pos:start="477:72" pos:end="477:80">idct_algo</name></name> <operator pos:start="477:82" pos:end="477:83">==</operator> <name pos:start="477:85" pos:end="477:96">FF_IDCT_AUTO</name> <operator pos:start="477:98" pos:end="477:99">&amp;&amp;</operator> <operator pos:start="477:101" pos:end="477:101">(</operator><call pos:start="477:102" pos:end="477:119"><name pos:start="477:102" pos:end="477:117">av_get_cpu_flags</name><argument_list pos:start="477:118" pos:end="477:119">()</argument_list></call> <operator pos:start="477:121" pos:end="477:121">&amp;</operator> <name pos:start="477:123" pos:end="477:137">AV_CPU_FLAG_MMX</name><operator pos:start="477:138" pos:end="477:138">)</operator></expr>)</condition> <block pos:start="477:141" pos:end="488:0">{<block_content pos:start="479:9" pos:end="483:19">

        <expr_stmt pos:start="479:9" pos:end="479:42"><expr pos:start="479:9" pos:end="479:41"><name pos:start="479:9" pos:end="479:24"><name pos:start="479:9" pos:end="479:13">avctx</name><operator pos:start="479:14" pos:end="479:15">-&gt;</operator><name pos:start="479:16" pos:end="479:24">idct_algo</name></name><operator pos:start="479:25" pos:end="479:25">=</operator> <name pos:start="479:27" pos:end="479:41">FF_IDCT_XVIDMMX</name></expr>;</expr_stmt>

        <expr_stmt pos:start="481:9" pos:end="481:30"><expr pos:start="481:9" pos:end="481:29"><call pos:start="481:9" pos:end="481:29"><name pos:start="481:9" pos:end="481:26">ff_dct_common_init</name><argument_list pos:start="481:27" pos:end="481:29">(<argument pos:start="481:28" pos:end="481:28"><expr pos:start="481:28" pos:end="481:28"><name pos:start="481:28" pos:end="481:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="483:9" pos:end="483:19">goto <name pos:start="483:14" pos:end="483:18">retry</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="487:1" pos:end="487:6">#<cpp:directive pos:start="487:2" pos:end="487:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="491:9" pos:end="491:72">/* After H263 &amp; mpeg4 header decode we have the height, width,*/</comment>

        <comment type="block" pos:start="493:9" pos:end="493:71">/* and other parameters. So then we could init the picture   */</comment>

        <comment type="block" pos:start="495:9" pos:end="495:71">/* FIXME: By the way H263 decoder is evolving it should have */</comment>

        <comment type="block" pos:start="497:9" pos:end="497:71">/* an H263EncContext                                         */</comment>



    <if_stmt pos:start="501:5" pos:end="521:5"><if pos:start="501:5" pos:end="521:5">if <condition pos:start="501:8" pos:end="505:26">(<expr pos:start="501:9" pos:end="505:25"><name pos:start="501:9" pos:end="501:16"><name pos:start="501:9" pos:end="501:9">s</name><operator pos:start="501:10" pos:end="501:11">-&gt;</operator><name pos:start="501:12" pos:end="501:16">width</name></name>  <operator pos:start="501:19" pos:end="501:20">!=</operator> <name pos:start="501:22" pos:end="501:39"><name pos:start="501:22" pos:end="501:26">avctx</name><operator pos:start="501:27" pos:end="501:28">-&gt;</operator><name pos:start="501:29" pos:end="501:39">coded_width</name></name>  <operator pos:start="501:42" pos:end="501:43">||</operator>

        <name pos:start="503:9" pos:end="503:17"><name pos:start="503:9" pos:end="503:9">s</name><operator pos:start="503:10" pos:end="503:11">-&gt;</operator><name pos:start="503:12" pos:end="503:17">height</name></name> <operator pos:start="503:19" pos:end="503:20">!=</operator> <name pos:start="503:22" pos:end="503:40"><name pos:start="503:22" pos:end="503:26">avctx</name><operator pos:start="503:27" pos:end="503:28">-&gt;</operator><name pos:start="503:29" pos:end="503:40">coded_height</name></name> <operator pos:start="503:42" pos:end="503:43">||</operator>

        <name pos:start="505:9" pos:end="505:25"><name pos:start="505:9" pos:end="505:9">s</name><operator pos:start="505:10" pos:end="505:11">-&gt;</operator><name pos:start="505:12" pos:end="505:25">context_reinit</name></name></expr>)</condition> <block pos:start="505:28" pos:end="521:5">{<block_content pos:start="509:9" pos:end="519:23">

        <comment type="block" pos:start="507:9" pos:end="507:54">/* H.263 could change picture size any time */</comment>

        <expr_stmt pos:start="509:9" pos:end="509:30"><expr pos:start="509:9" pos:end="509:29"><name pos:start="509:9" pos:end="509:25"><name pos:start="509:9" pos:end="509:9">s</name><operator pos:start="509:10" pos:end="509:11">-&gt;</operator><name pos:start="509:12" pos:end="509:25">context_reinit</name></name> <operator pos:start="509:27" pos:end="509:27">=</operator> <literal type="number" pos:start="509:29" pos:end="509:29">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="513:9" pos:end="513:59"><expr pos:start="513:9" pos:end="513:58"><call pos:start="513:9" pos:end="513:58"><name pos:start="513:9" pos:end="513:30">avcodec_set_dimensions</name><argument_list pos:start="513:31" pos:end="513:58">(<argument pos:start="513:32" pos:end="513:36"><expr pos:start="513:32" pos:end="513:36"><name pos:start="513:32" pos:end="513:36">avctx</name></expr></argument>, <argument pos:start="513:39" pos:end="513:46"><expr pos:start="513:39" pos:end="513:46"><name pos:start="513:39" pos:end="513:46"><name pos:start="513:39" pos:end="513:39">s</name><operator pos:start="513:40" pos:end="513:41">-&gt;</operator><name pos:start="513:42" pos:end="513:46">width</name></name></expr></argument>, <argument pos:start="513:49" pos:end="513:57"><expr pos:start="513:49" pos:end="513:57"><name pos:start="513:49" pos:end="513:57"><name pos:start="513:49" pos:end="513:49">s</name><operator pos:start="513:50" pos:end="513:51">-&gt;</operator><name pos:start="513:52" pos:end="513:57">height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="517:9" pos:end="519:23"><if pos:start="517:9" pos:end="519:23">if <condition pos:start="517:12" pos:end="517:55">(<expr pos:start="517:13" pos:end="517:54"><operator pos:start="517:13" pos:end="517:13">(</operator><name pos:start="517:14" pos:end="517:16">ret</name> <operator pos:start="517:18" pos:end="517:18">=</operator> <call pos:start="517:20" pos:end="517:53"><name pos:start="517:20" pos:end="517:50">ff_MPV_common_frame_size_change</name><argument_list pos:start="517:51" pos:end="517:53">(<argument pos:start="517:52" pos:end="517:52"><expr pos:start="517:52" pos:end="517:52"><name pos:start="517:52" pos:end="517:52">s</name></expr></argument>)</argument_list></call><operator pos:start="517:54" pos:end="517:54">)</operator></expr>)</condition><block type="pseudo" pos:start="519:13" pos:end="519:23"><block_content pos:start="519:13" pos:end="519:23">

            <return pos:start="519:13" pos:end="519:23">return <expr pos:start="519:20" pos:end="519:22"><name pos:start="519:20" pos:end="519:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="525:5" pos:end="527:49"><if pos:start="525:5" pos:end="527:49">if<condition pos:start="525:7" pos:end="525:109">(<expr pos:start="525:8" pos:end="525:108"><operator pos:start="525:8" pos:end="525:8">(</operator><name pos:start="525:9" pos:end="525:19"><name pos:start="525:9" pos:end="525:9">s</name><operator pos:start="525:10" pos:end="525:11">-&gt;</operator><name pos:start="525:12" pos:end="525:19">codec_id</name></name><operator pos:start="525:20" pos:end="525:21">==</operator><name pos:start="525:22" pos:end="525:37">AV_CODEC_ID_H263</name> <operator pos:start="525:39" pos:end="525:40">||</operator> <name pos:start="525:42" pos:end="525:52"><name pos:start="525:42" pos:end="525:42">s</name><operator pos:start="525:43" pos:end="525:44">-&gt;</operator><name pos:start="525:45" pos:end="525:52">codec_id</name></name><operator pos:start="525:53" pos:end="525:54">==</operator><name pos:start="525:55" pos:end="525:71">AV_CODEC_ID_H263P</name> <operator pos:start="525:73" pos:end="525:74">||</operator> <name pos:start="525:76" pos:end="525:86"><name pos:start="525:76" pos:end="525:76">s</name><operator pos:start="525:77" pos:end="525:78">-&gt;</operator><name pos:start="525:79" pos:end="525:86">codec_id</name></name> <operator pos:start="525:88" pos:end="525:89">==</operator> <name pos:start="525:91" pos:end="525:107">AV_CODEC_ID_H263I</name><operator pos:start="525:108" pos:end="525:108">)</operator></expr>)</condition><block type="pseudo" pos:start="527:9" pos:end="527:49"><block_content pos:start="527:9" pos:end="527:49">

        <expr_stmt pos:start="527:9" pos:end="527:49"><expr pos:start="527:9" pos:end="527:48"><name pos:start="527:9" pos:end="527:20"><name pos:start="527:9" pos:end="527:9">s</name><operator pos:start="527:10" pos:end="527:11">-&gt;</operator><name pos:start="527:12" pos:end="527:20">gob_index</name></name> <operator pos:start="527:22" pos:end="527:22">=</operator> <call pos:start="527:24" pos:end="527:48"><name pos:start="527:24" pos:end="527:45">ff_h263_get_gob_height</name><argument_list pos:start="527:46" pos:end="527:48">(<argument pos:start="527:47" pos:end="527:47"><expr pos:start="527:47" pos:end="527:47"><name pos:start="527:47" pos:end="527:47">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="line" pos:start="531:5" pos:end="531:29">// for skipping the frame</comment>

    <expr_stmt pos:start="533:5" pos:end="533:50"><expr pos:start="533:5" pos:end="533:49"><name pos:start="533:5" pos:end="533:34"><name pos:start="533:5" pos:end="533:5">s</name><operator pos:start="533:6" pos:end="533:7">-&gt;</operator><name pos:start="533:8" pos:end="533:22">current_picture</name><operator pos:start="533:23" pos:end="533:23">.</operator><name pos:start="533:24" pos:end="533:24">f</name><operator pos:start="533:25" pos:end="533:25">.</operator><name pos:start="533:26" pos:end="533:34">pict_type</name></name> <operator pos:start="533:36" pos:end="533:36">=</operator> <name pos:start="533:38" pos:end="533:49"><name pos:start="533:38" pos:end="533:38">s</name><operator pos:start="533:39" pos:end="533:40">-&gt;</operator><name pos:start="533:41" pos:end="533:49">pict_type</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="535:5" pos:end="535:71"><expr pos:start="535:5" pos:end="535:70"><name pos:start="535:5" pos:end="535:34"><name pos:start="535:5" pos:end="535:5">s</name><operator pos:start="535:6" pos:end="535:7">-&gt;</operator><name pos:start="535:8" pos:end="535:22">current_picture</name><operator pos:start="535:23" pos:end="535:23">.</operator><name pos:start="535:24" pos:end="535:24">f</name><operator pos:start="535:25" pos:end="535:25">.</operator><name pos:start="535:26" pos:end="535:34">key_frame</name></name> <operator pos:start="535:36" pos:end="535:36">=</operator> <name pos:start="535:38" pos:end="535:49"><name pos:start="535:38" pos:end="535:38">s</name><operator pos:start="535:39" pos:end="535:40">-&gt;</operator><name pos:start="535:41" pos:end="535:49">pict_type</name></name> <operator pos:start="535:51" pos:end="535:52">==</operator> <name pos:start="535:54" pos:end="535:70">AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>



    <comment type="block" pos:start="539:5" pos:end="539:57">/* skip B-frames if we don't have reference frames */</comment>

    <if_stmt pos:start="541:5" pos:end="545:47"><if pos:start="541:5" pos:end="545:47">if <condition pos:start="541:8" pos:end="543:60">(<expr pos:start="541:9" pos:end="543:59"><name pos:start="541:9" pos:end="541:27"><name pos:start="541:9" pos:end="541:9">s</name><operator pos:start="541:10" pos:end="541:11">-&gt;</operator><name pos:start="541:12" pos:end="541:27">last_picture_ptr</name></name> <operator pos:start="541:29" pos:end="541:30">==</operator> <name pos:start="541:32" pos:end="541:35">NULL</name> <operator pos:start="541:37" pos:end="541:38">&amp;&amp;</operator>

        <operator pos:start="543:9" pos:end="543:9">(</operator><name pos:start="543:10" pos:end="543:21"><name pos:start="543:10" pos:end="543:10">s</name><operator pos:start="543:11" pos:end="543:12">-&gt;</operator><name pos:start="543:13" pos:end="543:21">pict_type</name></name> <operator pos:start="543:23" pos:end="543:24">==</operator> <name pos:start="543:26" pos:end="543:42">AV_PICTURE_TYPE_B</name> <operator pos:start="543:44" pos:end="543:45">||</operator> <name pos:start="543:47" pos:end="543:58"><name pos:start="543:47" pos:end="543:47">s</name><operator pos:start="543:48" pos:end="543:49">-&gt;</operator><name pos:start="543:50" pos:end="543:58">droppable</name></name><operator pos:start="543:59" pos:end="543:59">)</operator></expr>)</condition><block type="pseudo" pos:start="545:9" pos:end="545:47"><block_content pos:start="545:9" pos:end="545:47">

        <return pos:start="545:9" pos:end="545:47">return <expr pos:start="545:16" pos:end="545:46"><call pos:start="545:16" pos:end="545:46"><name pos:start="545:16" pos:end="545:33">get_consumed_bytes</name><argument_list pos:start="545:34" pos:end="545:46">(<argument pos:start="545:35" pos:end="545:35"><expr pos:start="545:35" pos:end="545:35"><name pos:start="545:35" pos:end="545:35">s</name></expr></argument>, <argument pos:start="545:38" pos:end="545:45"><expr pos:start="545:38" pos:end="545:45"><name pos:start="545:38" pos:end="545:45">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="547:5" pos:end="553:47"><if pos:start="547:5" pos:end="553:47">if<condition pos:start="547:7" pos:end="551:46">(   <expr pos:start="547:11" pos:end="551:45"><operator pos:start="547:11" pos:end="547:11">(</operator><name pos:start="547:12" pos:end="547:28"><name pos:start="547:12" pos:end="547:16">avctx</name><operator pos:start="547:17" pos:end="547:18">-&gt;</operator><name pos:start="547:19" pos:end="547:28">skip_frame</name></name> <operator pos:start="547:30" pos:end="547:31">&gt;=</operator> <name pos:start="547:33" pos:end="547:48">AVDISCARD_NONREF</name> <operator pos:start="547:50" pos:end="547:51">&amp;&amp;</operator> <name pos:start="547:53" pos:end="547:64"><name pos:start="547:53" pos:end="547:53">s</name><operator pos:start="547:54" pos:end="547:55">-&gt;</operator><name pos:start="547:56" pos:end="547:64">pict_type</name></name><operator pos:start="547:65" pos:end="547:66">==</operator><name pos:start="547:67" pos:end="547:83">AV_PICTURE_TYPE_B</name><operator pos:start="547:84" pos:end="547:84">)</operator>

       <operator pos:start="549:8" pos:end="549:9">||</operator> <operator pos:start="549:11" pos:end="549:11">(</operator><name pos:start="549:12" pos:end="549:28"><name pos:start="549:12" pos:end="549:16">avctx</name><operator pos:start="549:17" pos:end="549:18">-&gt;</operator><name pos:start="549:19" pos:end="549:28">skip_frame</name></name> <operator pos:start="549:30" pos:end="549:31">&gt;=</operator> <name pos:start="549:33" pos:end="549:48">AVDISCARD_NONKEY</name> <operator pos:start="549:50" pos:end="549:51">&amp;&amp;</operator> <name pos:start="549:53" pos:end="549:64"><name pos:start="549:53" pos:end="549:53">s</name><operator pos:start="549:54" pos:end="549:55">-&gt;</operator><name pos:start="549:56" pos:end="549:64">pict_type</name></name><operator pos:start="549:65" pos:end="549:66">!=</operator><name pos:start="549:67" pos:end="549:83">AV_PICTURE_TYPE_I</name><operator pos:start="549:84" pos:end="549:84">)</operator>

       <operator pos:start="551:8" pos:end="551:9">||</operator>  <name pos:start="551:12" pos:end="551:28"><name pos:start="551:12" pos:end="551:16">avctx</name><operator pos:start="551:17" pos:end="551:18">-&gt;</operator><name pos:start="551:19" pos:end="551:28">skip_frame</name></name> <operator pos:start="551:30" pos:end="551:31">&gt;=</operator> <name pos:start="551:33" pos:end="551:45">AVDISCARD_ALL</name></expr>)</condition><block type="pseudo" pos:start="553:9" pos:end="553:47"><block_content pos:start="553:9" pos:end="553:47">

        <return pos:start="553:9" pos:end="553:47">return <expr pos:start="553:16" pos:end="553:46"><call pos:start="553:16" pos:end="553:46"><name pos:start="553:16" pos:end="553:33">get_consumed_bytes</name><argument_list pos:start="553:34" pos:end="553:46">(<argument pos:start="553:35" pos:end="553:35"><expr pos:start="553:35" pos:end="553:35"><name pos:start="553:35" pos:end="553:35">s</name></expr></argument>, <argument pos:start="553:38" pos:end="553:45"><expr pos:start="553:38" pos:end="553:45"><name pos:start="553:38" pos:end="553:45">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="557:5" pos:end="567:5"><if pos:start="557:5" pos:end="567:5">if<condition pos:start="557:7" pos:end="557:31">(<expr pos:start="557:8" pos:end="557:30"><name pos:start="557:8" pos:end="557:30"><name pos:start="557:8" pos:end="557:8">s</name><operator pos:start="557:9" pos:end="557:10">-&gt;</operator><name pos:start="557:11" pos:end="557:30">next_p_frame_damaged</name></name></expr>)</condition><block pos:start="557:32" pos:end="567:5">{<block_content pos:start="559:9" pos:end="565:38">

        <if_stmt pos:start="559:9" pos:end="565:38"><if pos:start="559:9" pos:end="561:51">if<condition pos:start="559:11" pos:end="559:43">(<expr pos:start="559:12" pos:end="559:42"><name pos:start="559:12" pos:end="559:23"><name pos:start="559:12" pos:end="559:12">s</name><operator pos:start="559:13" pos:end="559:14">-&gt;</operator><name pos:start="559:15" pos:end="559:23">pict_type</name></name><operator pos:start="559:24" pos:end="559:25">==</operator><name pos:start="559:26" pos:end="559:42">AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo" pos:start="561:13" pos:end="561:51"><block_content pos:start="561:13" pos:end="561:51">

            <return pos:start="561:13" pos:end="561:51">return <expr pos:start="561:20" pos:end="561:50"><call pos:start="561:20" pos:end="561:50"><name pos:start="561:20" pos:end="561:37">get_consumed_bytes</name><argument_list pos:start="561:38" pos:end="561:50">(<argument pos:start="561:39" pos:end="561:39"><expr pos:start="561:39" pos:end="561:39"><name pos:start="561:39" pos:end="561:39">s</name></expr></argument>, <argument pos:start="561:42" pos:end="561:49"><expr pos:start="561:42" pos:end="561:49"><name pos:start="561:42" pos:end="561:49">buf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

        <else pos:start="563:9" pos:end="565:38">else<block type="pseudo" pos:start="565:13" pos:end="565:38"><block_content pos:start="565:13" pos:end="565:38">

            <expr_stmt pos:start="565:13" pos:end="565:38"><expr pos:start="565:13" pos:end="565:37"><name pos:start="565:13" pos:end="565:35"><name pos:start="565:13" pos:end="565:13">s</name><operator pos:start="565:14" pos:end="565:15">-&gt;</operator><name pos:start="565:16" pos:end="565:35">next_p_frame_damaged</name></name><operator pos:start="565:36" pos:end="565:36">=</operator><literal type="number" pos:start="565:37" pos:end="565:37">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="571:5" pos:end="583:5"><if pos:start="571:5" pos:end="577:5">if<condition pos:start="571:7" pos:end="571:60">(<expr pos:start="571:8" pos:end="571:59"><operator pos:start="571:8" pos:end="571:8">(</operator><operator pos:start="571:9" pos:end="571:9">!</operator><name pos:start="571:10" pos:end="571:23"><name pos:start="571:10" pos:end="571:10">s</name><operator pos:start="571:11" pos:end="571:12">-&gt;</operator><name pos:start="571:13" pos:end="571:23">no_rounding</name></name><operator pos:start="571:24" pos:end="571:24">)</operator> <operator pos:start="571:26" pos:end="571:27">||</operator> <name pos:start="571:29" pos:end="571:40"><name pos:start="571:29" pos:end="571:29">s</name><operator pos:start="571:30" pos:end="571:31">-&gt;</operator><name pos:start="571:32" pos:end="571:40">pict_type</name></name><operator pos:start="571:41" pos:end="571:42">==</operator><name pos:start="571:43" pos:end="571:59">AV_PICTURE_TYPE_B</name></expr>)</condition><block pos:start="571:61" pos:end="577:5">{<block_content pos:start="573:9" pos:end="575:51">

        <expr_stmt pos:start="573:9" pos:end="573:51"><expr pos:start="573:9" pos:end="573:50"><name pos:start="573:9" pos:end="573:22"><name pos:start="573:9" pos:end="573:9">s</name><operator pos:start="573:10" pos:end="573:11">-&gt;</operator><name pos:start="573:12" pos:end="573:13">me</name><operator pos:start="573:14" pos:end="573:14">.</operator><name pos:start="573:15" pos:end="573:22">qpel_put</name></name><operator pos:start="573:23" pos:end="573:23">=</operator> <name pos:start="573:25" pos:end="573:50"><name pos:start="573:25" pos:end="573:25">s</name><operator pos:start="573:26" pos:end="573:27">-&gt;</operator><name pos:start="573:28" pos:end="573:30">dsp</name><operator pos:start="573:31" pos:end="573:31">.</operator><name pos:start="573:32" pos:end="573:50">put_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="575:9" pos:end="575:51"><expr pos:start="575:9" pos:end="575:50"><name pos:start="575:9" pos:end="575:22"><name pos:start="575:9" pos:end="575:9">s</name><operator pos:start="575:10" pos:end="575:11">-&gt;</operator><name pos:start="575:12" pos:end="575:13">me</name><operator pos:start="575:14" pos:end="575:14">.</operator><name pos:start="575:15" pos:end="575:22">qpel_avg</name></name><operator pos:start="575:23" pos:end="575:23">=</operator> <name pos:start="575:25" pos:end="575:50"><name pos:start="575:25" pos:end="575:25">s</name><operator pos:start="575:26" pos:end="575:27">-&gt;</operator><name pos:start="575:28" pos:end="575:30">dsp</name><operator pos:start="575:31" pos:end="575:31">.</operator><name pos:start="575:32" pos:end="575:50">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></if><else pos:start="577:6" pos:end="583:5">else<block pos:start="577:10" pos:end="583:5">{<block_content pos:start="579:9" pos:end="581:51">

        <expr_stmt pos:start="579:9" pos:end="579:58"><expr pos:start="579:9" pos:end="579:57"><name pos:start="579:9" pos:end="579:22"><name pos:start="579:9" pos:end="579:9">s</name><operator pos:start="579:10" pos:end="579:11">-&gt;</operator><name pos:start="579:12" pos:end="579:13">me</name><operator pos:start="579:14" pos:end="579:14">.</operator><name pos:start="579:15" pos:end="579:22">qpel_put</name></name><operator pos:start="579:23" pos:end="579:23">=</operator> <name pos:start="579:25" pos:end="579:57"><name pos:start="579:25" pos:end="579:25">s</name><operator pos:start="579:26" pos:end="579:27">-&gt;</operator><name pos:start="579:28" pos:end="579:30">dsp</name><operator pos:start="579:31" pos:end="579:31">.</operator><name pos:start="579:32" pos:end="579:57">put_no_rnd_qpel_pixels_tab</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="581:9" pos:end="581:51"><expr pos:start="581:9" pos:end="581:50"><name pos:start="581:9" pos:end="581:22"><name pos:start="581:9" pos:end="581:9">s</name><operator pos:start="581:10" pos:end="581:11">-&gt;</operator><name pos:start="581:12" pos:end="581:13">me</name><operator pos:start="581:14" pos:end="581:14">.</operator><name pos:start="581:15" pos:end="581:22">qpel_avg</name></name><operator pos:start="581:23" pos:end="581:23">=</operator> <name pos:start="581:25" pos:end="581:50"><name pos:start="581:25" pos:end="581:25">s</name><operator pos:start="581:26" pos:end="581:27">-&gt;</operator><name pos:start="581:28" pos:end="581:30">dsp</name><operator pos:start="581:31" pos:end="581:31">.</operator><name pos:start="581:32" pos:end="581:50">avg_qpel_pixels_tab</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="587:5" pos:end="589:19"><if pos:start="587:5" pos:end="589:19">if <condition pos:start="587:8" pos:end="587:49">(<expr pos:start="587:9" pos:end="587:48"><operator pos:start="587:9" pos:end="587:9">(</operator><name pos:start="587:10" pos:end="587:12">ret</name> <operator pos:start="587:14" pos:end="587:14">=</operator> <call pos:start="587:16" pos:end="587:43"><name pos:start="587:16" pos:end="587:33">ff_MPV_frame_start</name><argument_list pos:start="587:34" pos:end="587:43">(<argument pos:start="587:35" pos:end="587:35"><expr pos:start="587:35" pos:end="587:35"><name pos:start="587:35" pos:end="587:35">s</name></expr></argument>, <argument pos:start="587:38" pos:end="587:42"><expr pos:start="587:38" pos:end="587:42"><name pos:start="587:38" pos:end="587:42">avctx</name></expr></argument>)</argument_list></call><operator pos:start="587:44" pos:end="587:44">)</operator> <operator pos:start="587:46" pos:end="587:46">&lt;</operator> <literal type="number" pos:start="587:48" pos:end="587:48">0</literal></expr>)</condition><block type="pseudo" pos:start="589:9" pos:end="589:19"><block_content pos:start="589:9" pos:end="589:19">

        <return pos:start="589:9" pos:end="589:19">return <expr pos:start="589:16" pos:end="589:18"><name pos:start="589:16" pos:end="589:18">ret</name></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="593:5" pos:end="595:38"><if pos:start="593:5" pos:end="595:38">if <condition pos:start="593:8" pos:end="593:43">(<expr pos:start="593:9" pos:end="593:42"><operator pos:start="593:9" pos:end="593:9">!</operator><name pos:start="593:10" pos:end="593:23"><name pos:start="593:10" pos:end="593:10">s</name><operator pos:start="593:11" pos:end="593:12">-&gt;</operator><name pos:start="593:13" pos:end="593:23">divx_packed</name></name> <operator pos:start="593:25" pos:end="593:26">&amp;&amp;</operator> <operator pos:start="593:28" pos:end="593:28">!</operator><name pos:start="593:29" pos:end="593:42"><name pos:start="593:29" pos:end="593:33">avctx</name><operator pos:start="593:34" pos:end="593:35">-&gt;</operator><name pos:start="593:36" pos:end="593:42">hwaccel</name></name></expr>)</condition><block type="pseudo" pos:start="595:9" pos:end="595:38"><block_content pos:start="595:9" pos:end="595:38">

        <expr_stmt pos:start="595:9" pos:end="595:38"><expr pos:start="595:9" pos:end="595:37"><call pos:start="595:9" pos:end="595:37"><name pos:start="595:9" pos:end="595:30">ff_thread_finish_setup</name><argument_list pos:start="595:31" pos:end="595:37">(<argument pos:start="595:32" pos:end="595:36"><expr pos:start="595:32" pos:end="595:36"><name pos:start="595:32" pos:end="595:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="599:5" pos:end="605:5"><if pos:start="599:5" pos:end="605:5">if <condition pos:start="599:8" pos:end="599:96">(<expr pos:start="599:9" pos:end="599:95"><name pos:start="599:9" pos:end="599:34">CONFIG_MPEG4_VDPAU_DECODER</name> <operator pos:start="599:36" pos:end="599:37">&amp;&amp;</operator> <operator pos:start="599:39" pos:end="599:39">(</operator><name pos:start="599:40" pos:end="599:68"><name pos:start="599:40" pos:end="599:40">s</name><operator pos:start="599:41" pos:end="599:42">-&gt;</operator><name pos:start="599:43" pos:end="599:47">avctx</name><operator pos:start="599:48" pos:end="599:49">-&gt;</operator><name pos:start="599:50" pos:end="599:54">codec</name><operator pos:start="599:55" pos:end="599:56">-&gt;</operator><name pos:start="599:57" pos:end="599:68">capabilities</name></name> <operator pos:start="599:70" pos:end="599:70">&amp;</operator> <name pos:start="599:72" pos:end="599:94">CODEC_CAP_HWACCEL_VDPAU</name><operator pos:start="599:95" pos:end="599:95">)</operator></expr>)</condition> <block pos:start="599:98" pos:end="605:5">{<block_content pos:start="601:9" pos:end="603:23">

        <expr_stmt pos:start="601:9" pos:end="601:88"><expr pos:start="601:9" pos:end="601:87"><call pos:start="601:9" pos:end="601:87"><name pos:start="601:9" pos:end="601:37">ff_vdpau_mpeg4_decode_picture</name><argument_list pos:start="601:38" pos:end="601:87">(<argument pos:start="601:39" pos:end="601:39"><expr pos:start="601:39" pos:end="601:39"><name pos:start="601:39" pos:end="601:39">s</name></expr></argument>, <argument pos:start="601:42" pos:end="601:53"><expr pos:start="601:42" pos:end="601:53"><name pos:start="601:42" pos:end="601:53"><name pos:start="601:42" pos:end="601:42">s</name><operator pos:start="601:43" pos:end="601:44">-&gt;</operator><name pos:start="601:45" pos:end="601:46">gb</name><operator pos:start="601:47" pos:end="601:47">.</operator><name pos:start="601:48" pos:end="601:53">buffer</name></name></expr></argument>, <argument pos:start="601:56" pos:end="601:86"><expr pos:start="601:56" pos:end="601:86"><name pos:start="601:56" pos:end="601:71"><name pos:start="601:56" pos:end="601:56">s</name><operator pos:start="601:57" pos:end="601:58">-&gt;</operator><name pos:start="601:59" pos:end="601:60">gb</name><operator pos:start="601:61" pos:end="601:61">.</operator><name pos:start="601:62" pos:end="601:71">buffer_end</name></name> <operator pos:start="601:73" pos:end="601:73">-</operator> <name pos:start="601:75" pos:end="601:86"><name pos:start="601:75" pos:end="601:75">s</name><operator pos:start="601:76" pos:end="601:77">-&gt;</operator><name pos:start="601:78" pos:end="601:79">gb</name><operator pos:start="601:80" pos:end="601:80">.</operator><name pos:start="601:81" pos:end="601:86">buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="603:9" pos:end="603:23">goto <name pos:start="603:14" pos:end="603:22">frame_end</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="609:5" pos:end="615:5"><if pos:start="609:5" pos:end="615:5">if <condition pos:start="609:8" pos:end="609:23">(<expr pos:start="609:9" pos:end="609:22"><name pos:start="609:9" pos:end="609:22"><name pos:start="609:9" pos:end="609:13">avctx</name><operator pos:start="609:14" pos:end="609:15">-&gt;</operator><name pos:start="609:16" pos:end="609:22">hwaccel</name></name></expr>)</condition> <block pos:start="609:25" pos:end="615:5">{<block_content pos:start="611:9" pos:end="613:23">

        <if_stmt pos:start="611:9" pos:end="613:23"><if pos:start="611:9" pos:end="613:23">if <condition pos:start="611:12" pos:end="611:106">(<expr pos:start="611:13" pos:end="611:105"><operator pos:start="611:13" pos:end="611:13">(</operator><name pos:start="611:14" pos:end="611:16">ret</name> <operator pos:start="611:18" pos:end="611:18">=</operator> <call pos:start="611:20" pos:end="611:100"><name pos:start="611:20" pos:end="611:46"><name pos:start="611:20" pos:end="611:24">avctx</name><operator pos:start="611:25" pos:end="611:26">-&gt;</operator><name pos:start="611:27" pos:end="611:33">hwaccel</name><operator pos:start="611:34" pos:end="611:35">-&gt;</operator><name pos:start="611:36" pos:end="611:46">start_frame</name></name><argument_list pos:start="611:47" pos:end="611:100">(<argument pos:start="611:48" pos:end="611:52"><expr pos:start="611:48" pos:end="611:52"><name pos:start="611:48" pos:end="611:52">avctx</name></expr></argument>, <argument pos:start="611:55" pos:end="611:66"><expr pos:start="611:55" pos:end="611:66"><name pos:start="611:55" pos:end="611:66"><name pos:start="611:55" pos:end="611:55">s</name><operator pos:start="611:56" pos:end="611:57">-&gt;</operator><name pos:start="611:58" pos:end="611:59">gb</name><operator pos:start="611:60" pos:end="611:60">.</operator><name pos:start="611:61" pos:end="611:66">buffer</name></name></expr></argument>, <argument pos:start="611:69" pos:end="611:99"><expr pos:start="611:69" pos:end="611:99"><name pos:start="611:69" pos:end="611:84"><name pos:start="611:69" pos:end="611:69">s</name><operator pos:start="611:70" pos:end="611:71">-&gt;</operator><name pos:start="611:72" pos:end="611:73">gb</name><operator pos:start="611:74" pos:end="611:74">.</operator><name pos:start="611:75" pos:end="611:84">buffer_end</name></name> <operator pos:start="611:86" pos:end="611:86">-</operator> <name pos:start="611:88" pos:end="611:99"><name pos:start="611:88" pos:end="611:88">s</name><operator pos:start="611:89" pos:end="611:90">-&gt;</operator><name pos:start="611:91" pos:end="611:92">gb</name><operator pos:start="611:93" pos:end="611:93">.</operator><name pos:start="611:94" pos:end="611:99">buffer</name></name></expr></argument>)</argument_list></call><operator pos:start="611:101" pos:end="611:101">)</operator> <operator pos:start="611:103" pos:end="611:103">&lt;</operator> <literal type="number" pos:start="611:105" pos:end="611:105">0</literal></expr>)</condition><block type="pseudo" pos:start="613:13" pos:end="613:23"><block_content pos:start="613:13" pos:end="613:23">

            <return pos:start="613:13" pos:end="613:23">return <expr pos:start="613:20" pos:end="613:22"><name pos:start="613:20" pos:end="613:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="619:5" pos:end="619:30"><expr pos:start="619:5" pos:end="619:29"><call pos:start="619:5" pos:end="619:29"><name pos:start="619:5" pos:end="619:26">ff_mpeg_er_frame_start</name><argument_list pos:start="619:27" pos:end="619:29">(<argument pos:start="619:28" pos:end="619:28"><expr pos:start="619:28" pos:end="619:28"><name pos:start="619:28" pos:end="619:28">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="line" pos:start="623:5" pos:end="623:111">//the second part of the wmv2 header contains the MB skip bits which are stored in current_picture-&gt;mb_type</comment>

    <comment type="line" pos:start="625:5" pos:end="625:56">//which is not available before ff_MPV_frame_start()</comment>

    <if_stmt pos:start="627:5" pos:end="635:5"><if pos:start="627:5" pos:end="635:5">if <condition pos:start="627:8" pos:end="627:53">(<expr pos:start="627:9" pos:end="627:52"><name pos:start="627:9" pos:end="627:27">CONFIG_WMV2_DECODER</name> <operator pos:start="627:29" pos:end="627:30">&amp;&amp;</operator> <name pos:start="627:32" pos:end="627:49"><name pos:start="627:32" pos:end="627:32">s</name><operator pos:start="627:33" pos:end="627:34">-&gt;</operator><name pos:start="627:35" pos:end="627:49">msmpeg4_version</name></name><operator pos:start="627:50" pos:end="627:51">==</operator><literal type="number" pos:start="627:52" pos:end="627:52">5</literal></expr>)</condition><block pos:start="627:54" pos:end="635:5">{<block_content pos:start="629:9" pos:end="633:34">

        <expr_stmt pos:start="629:9" pos:end="629:57"><expr pos:start="629:9" pos:end="629:56"><name pos:start="629:9" pos:end="629:11">ret</name> <operator pos:start="629:13" pos:end="629:13">=</operator> <call pos:start="629:15" pos:end="629:56"><name pos:start="629:15" pos:end="629:53">ff_wmv2_decode_secondary_picture_header</name><argument_list pos:start="629:54" pos:end="629:56">(<argument pos:start="629:55" pos:end="629:55"><expr pos:start="629:55" pos:end="629:55"><name pos:start="629:55" pos:end="629:55">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="631:9" pos:end="631:29"><if pos:start="631:9" pos:end="631:29">if<condition pos:start="631:11" pos:end="631:17">(<expr pos:start="631:12" pos:end="631:16"><name pos:start="631:12" pos:end="631:14">ret</name><operator pos:start="631:15" pos:end="631:15">&lt;</operator><literal type="number" pos:start="631:16" pos:end="631:16">0</literal></expr>)</condition><block type="pseudo" pos:start="631:19" pos:end="631:29"><block_content pos:start="631:19" pos:end="631:29"> <return pos:start="631:19" pos:end="631:29">return <expr pos:start="631:26" pos:end="631:28"><name pos:start="631:26" pos:end="631:28">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <if_stmt pos:start="633:9" pos:end="633:34"><if pos:start="633:9" pos:end="633:34">if<condition pos:start="633:11" pos:end="633:18">(<expr pos:start="633:12" pos:end="633:17"><name pos:start="633:12" pos:end="633:14">ret</name><operator pos:start="633:15" pos:end="633:16">==</operator><literal type="number" pos:start="633:17" pos:end="633:17">1</literal></expr>)</condition><block type="pseudo" pos:start="633:20" pos:end="633:34"><block_content pos:start="633:20" pos:end="633:34"> <goto pos:start="633:20" pos:end="633:34">goto <name pos:start="633:25" pos:end="633:33">frame_end</name>;</goto></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="639:5" pos:end="639:32">/* decode each macroblock */</comment>

    <expr_stmt pos:start="641:5" pos:end="641:14"><expr pos:start="641:5" pos:end="641:13"><name pos:start="641:5" pos:end="641:11"><name pos:start="641:5" pos:end="641:5">s</name><operator pos:start="641:6" pos:end="641:7">-&gt;</operator><name pos:start="641:8" pos:end="641:11">mb_x</name></name><operator pos:start="641:12" pos:end="641:12">=</operator><literal type="number" pos:start="641:13" pos:end="641:13">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="643:5" pos:end="643:14"><expr pos:start="643:5" pos:end="643:13"><name pos:start="643:5" pos:end="643:11"><name pos:start="643:5" pos:end="643:5">s</name><operator pos:start="643:6" pos:end="643:7">-&gt;</operator><name pos:start="643:8" pos:end="643:11">mb_y</name></name><operator pos:start="643:12" pos:end="643:12">=</operator><literal type="number" pos:start="643:13" pos:end="643:13">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="647:5" pos:end="647:26"><expr pos:start="647:5" pos:end="647:25"><name pos:start="647:5" pos:end="647:7">ret</name> <operator pos:start="647:9" pos:end="647:9">=</operator> <call pos:start="647:11" pos:end="647:25"><name pos:start="647:11" pos:end="647:22">decode_slice</name><argument_list pos:start="647:23" pos:end="647:25">(<argument pos:start="647:24" pos:end="647:24"><expr pos:start="647:24" pos:end="647:24"><name pos:start="647:24" pos:end="647:24">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while pos:start="649:5" pos:end="681:5">while<condition pos:start="649:10" pos:end="649:31">(<expr pos:start="649:11" pos:end="649:30"><name pos:start="649:11" pos:end="649:17"><name pos:start="649:11" pos:end="649:11">s</name><operator pos:start="649:12" pos:end="649:13">-&gt;</operator><name pos:start="649:14" pos:end="649:17">mb_y</name></name><operator pos:start="649:18" pos:end="649:18">&lt;</operator><name pos:start="649:19" pos:end="649:30"><name pos:start="649:19" pos:end="649:19">s</name><operator pos:start="649:20" pos:end="649:21">-&gt;</operator><name pos:start="649:22" pos:end="649:30">mb_height</name></name></expr>)</condition><block pos:start="649:32" pos:end="681:5">{<block_content pos:start="651:9" pos:end="679:59">

        <if_stmt pos:start="651:9" pos:end="669:9"><if pos:start="651:9" pos:end="657:9">if<condition pos:start="651:11" pos:end="651:30">(<expr pos:start="651:12" pos:end="651:29"><name pos:start="651:12" pos:end="651:29"><name pos:start="651:12" pos:end="651:12">s</name><operator pos:start="651:13" pos:end="651:14">-&gt;</operator><name pos:start="651:15" pos:end="651:29">msmpeg4_version</name></name></expr>)</condition><block pos:start="651:31" pos:end="657:9">{<block_content pos:start="653:13" pos:end="655:22">

            <if_stmt pos:start="653:13" pos:end="655:22"><if pos:start="653:13" pos:end="655:22">if<condition pos:start="653:15" pos:end="653:107">(<expr pos:start="653:16" pos:end="653:106"><name pos:start="653:16" pos:end="653:30"><name pos:start="653:16" pos:end="653:16">s</name><operator pos:start="653:17" pos:end="653:18">-&gt;</operator><name pos:start="653:19" pos:end="653:30">slice_height</name></name><operator pos:start="653:31" pos:end="653:32">==</operator><literal type="number" pos:start="653:33" pos:end="653:33">0</literal> <operator pos:start="653:35" pos:end="653:36">||</operator> <name pos:start="653:38" pos:end="653:44"><name pos:start="653:38" pos:end="653:38">s</name><operator pos:start="653:39" pos:end="653:40">-&gt;</operator><name pos:start="653:41" pos:end="653:44">mb_x</name></name><operator pos:start="653:45" pos:end="653:46">!=</operator><literal type="number" pos:start="653:47" pos:end="653:47">0</literal> <operator pos:start="653:49" pos:end="653:50">||</operator> <operator pos:start="653:52" pos:end="653:52">(</operator><name pos:start="653:53" pos:end="653:59"><name pos:start="653:53" pos:end="653:53">s</name><operator pos:start="653:54" pos:end="653:55">-&gt;</operator><name pos:start="653:56" pos:end="653:59">mb_y</name></name><operator pos:start="653:60" pos:end="653:60">%</operator><name pos:start="653:61" pos:end="653:75"><name pos:start="653:61" pos:end="653:61">s</name><operator pos:start="653:62" pos:end="653:63">-&gt;</operator><name pos:start="653:64" pos:end="653:75">slice_height</name></name><operator pos:start="653:76" pos:end="653:76">)</operator><operator pos:start="653:77" pos:end="653:78">!=</operator><literal type="number" pos:start="653:79" pos:end="653:79">0</literal> <operator pos:start="653:81" pos:end="653:82">||</operator> <call pos:start="653:84" pos:end="653:104"><name pos:start="653:84" pos:end="653:96">get_bits_left</name><argument_list pos:start="653:97" pos:end="653:104">(<argument pos:start="653:98" pos:end="653:103"><expr pos:start="653:98" pos:end="653:103"><operator pos:start="653:98" pos:end="653:98">&amp;</operator><name pos:start="653:99" pos:end="653:103"><name pos:start="653:99" pos:end="653:99">s</name><operator pos:start="653:100" pos:end="653:101">-&gt;</operator><name pos:start="653:102" pos:end="653:103">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="653:105" pos:end="653:105">&lt;</operator><literal type="number" pos:start="653:106" pos:end="653:106">0</literal></expr>)</condition><block type="pseudo" pos:start="655:17" pos:end="655:22"><block_content pos:start="655:17" pos:end="655:22">

                <break pos:start="655:17" pos:end="655:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></if><else pos:start="657:10" pos:end="669:9">else<block pos:start="657:14" pos:end="669:9">{<block_content pos:start="659:13" pos:end="667:41">

            <decl_stmt pos:start="659:13" pos:end="659:47"><decl pos:start="659:13" pos:end="659:30"><type pos:start="659:13" pos:end="659:15"><name pos:start="659:13" pos:end="659:15">int</name></type> <name pos:start="659:17" pos:end="659:22">prev_x</name><init pos:start="659:23" pos:end="659:30">=<expr pos:start="659:24" pos:end="659:30"><name pos:start="659:24" pos:end="659:30"><name pos:start="659:24" pos:end="659:24">s</name><operator pos:start="659:25" pos:end="659:26">-&gt;</operator><name pos:start="659:27" pos:end="659:30">mb_x</name></name></expr></init></decl>, <decl pos:start="659:33" pos:end="659:46"><type ref="prev" pos:start="659:13" pos:end="659:15"/><name pos:start="659:33" pos:end="659:38">prev_y</name><init pos:start="659:39" pos:end="659:46">=<expr pos:start="659:40" pos:end="659:46"><name pos:start="659:40" pos:end="659:46"><name pos:start="659:40" pos:end="659:40">s</name><operator pos:start="659:41" pos:end="659:42">-&gt;</operator><name pos:start="659:43" pos:end="659:46">mb_y</name></name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="661:13" pos:end="663:22"><if pos:start="661:13" pos:end="663:22">if<condition pos:start="661:15" pos:end="661:35">(<expr pos:start="661:16" pos:end="661:34"><call pos:start="661:16" pos:end="661:32"><name pos:start="661:16" pos:end="661:29">ff_h263_resync</name><argument_list pos:start="661:30" pos:end="661:32">(<argument pos:start="661:31" pos:end="661:31"><expr pos:start="661:31" pos:end="661:31"><name pos:start="661:31" pos:end="661:31">s</name></expr></argument>)</argument_list></call><operator pos:start="661:33" pos:end="661:33">&lt;</operator><literal type="number" pos:start="661:34" pos:end="661:34">0</literal></expr>)</condition><block type="pseudo" pos:start="663:17" pos:end="663:22"><block_content pos:start="663:17" pos:end="663:22">

                <break pos:start="663:17" pos:end="663:22">break;</break></block_content></block></if></if_stmt>

            <if_stmt pos:start="665:13" pos:end="667:41"><if pos:start="665:13" pos:end="667:41">if <condition pos:start="665:16" pos:end="665:80">(<expr pos:start="665:17" pos:end="665:79"><name pos:start="665:17" pos:end="665:22">prev_y</name> <operator pos:start="665:24" pos:end="665:24">*</operator> <name pos:start="665:26" pos:end="665:36"><name pos:start="665:26" pos:end="665:26">s</name><operator pos:start="665:27" pos:end="665:28">-&gt;</operator><name pos:start="665:29" pos:end="665:36">mb_width</name></name> <operator pos:start="665:38" pos:end="665:38">+</operator> <name pos:start="665:40" pos:end="665:45">prev_x</name> <operator pos:start="665:47" pos:end="665:47">&lt;</operator> <name pos:start="665:49" pos:end="665:55"><name pos:start="665:49" pos:end="665:49">s</name><operator pos:start="665:50" pos:end="665:51">-&gt;</operator><name pos:start="665:52" pos:end="665:55">mb_y</name></name> <operator pos:start="665:57" pos:end="665:57">*</operator> <name pos:start="665:59" pos:end="665:69"><name pos:start="665:59" pos:end="665:59">s</name><operator pos:start="665:60" pos:end="665:61">-&gt;</operator><name pos:start="665:62" pos:end="665:69">mb_width</name></name> <operator pos:start="665:71" pos:end="665:71">+</operator> <name pos:start="665:73" pos:end="665:79"><name pos:start="665:73" pos:end="665:73">s</name><operator pos:start="665:74" pos:end="665:75">-&gt;</operator><name pos:start="665:76" pos:end="665:79">mb_x</name></name></expr>)</condition><block type="pseudo" pos:start="667:17" pos:end="667:41"><block_content pos:start="667:17" pos:end="667:41">

                <expr_stmt pos:start="667:17" pos:end="667:41"><expr pos:start="667:17" pos:end="667:40"><name pos:start="667:17" pos:end="667:36"><name pos:start="667:17" pos:end="667:17">s</name><operator pos:start="667:18" pos:end="667:19">-&gt;</operator><name pos:start="667:20" pos:end="667:21">er</name><operator pos:start="667:22" pos:end="667:22">.</operator><name pos:start="667:23" pos:end="667:36">error_occurred</name></name> <operator pos:start="667:38" pos:end="667:38">=</operator> <literal type="number" pos:start="667:40" pos:end="667:40">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></else></if_stmt>



        <if_stmt pos:start="673:9" pos:end="675:38"><if pos:start="673:9" pos:end="675:38">if<condition pos:start="673:11" pos:end="673:48">(<expr pos:start="673:12" pos:end="673:47"><name pos:start="673:12" pos:end="673:29"><name pos:start="673:12" pos:end="673:12">s</name><operator pos:start="673:13" pos:end="673:14">-&gt;</operator><name pos:start="673:15" pos:end="673:29">msmpeg4_version</name></name><operator pos:start="673:30" pos:end="673:30">&lt;</operator><literal type="number" pos:start="673:31" pos:end="673:31">4</literal> <operator pos:start="673:33" pos:end="673:34">&amp;&amp;</operator> <name pos:start="673:36" pos:end="673:47"><name pos:start="673:36" pos:end="673:36">s</name><operator pos:start="673:37" pos:end="673:38">-&gt;</operator><name pos:start="673:39" pos:end="673:47">h263_pred</name></name></expr>)</condition><block type="pseudo" pos:start="675:13" pos:end="675:38"><block_content pos:start="675:13" pos:end="675:38">

            <expr_stmt pos:start="675:13" pos:end="675:38"><expr pos:start="675:13" pos:end="675:37"><call pos:start="675:13" pos:end="675:37"><name pos:start="675:13" pos:end="675:34">ff_mpeg4_clean_buffers</name><argument_list pos:start="675:35" pos:end="675:37">(<argument pos:start="675:36" pos:end="675:36"><expr pos:start="675:36" pos:end="675:36"><name pos:start="675:36" pos:end="675:36">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="679:9" pos:end="679:59"><if pos:start="679:9" pos:end="679:59">if <condition pos:start="679:12" pos:end="679:32">(<expr pos:start="679:13" pos:end="679:31"><call pos:start="679:13" pos:end="679:27"><name pos:start="679:13" pos:end="679:24">decode_slice</name><argument_list pos:start="679:25" pos:end="679:27">(<argument pos:start="679:26" pos:end="679:26"><expr pos:start="679:26" pos:end="679:26"><name pos:start="679:26" pos:end="679:26">s</name></expr></argument>)</argument_list></call> <operator pos:start="679:29" pos:end="679:29">&lt;</operator> <literal type="number" pos:start="679:31" pos:end="679:31">0</literal></expr>)</condition><block type="pseudo" pos:start="679:34" pos:end="679:59"><block_content pos:start="679:34" pos:end="679:59"> <expr_stmt pos:start="679:34" pos:end="679:59"><expr pos:start="679:34" pos:end="679:58"><name pos:start="679:34" pos:end="679:36">ret</name> <operator pos:start="679:38" pos:end="679:38">=</operator> <name pos:start="679:40" pos:end="679:58">AVERROR_INVALIDDATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></while>



    <if_stmt pos:start="685:5" pos:end="691:9"><if pos:start="685:5" pos:end="691:9">if <condition pos:start="685:8" pos:end="685:86">(<expr pos:start="685:9" pos:end="685:85"><name pos:start="685:9" pos:end="685:26"><name pos:start="685:9" pos:end="685:9">s</name><operator pos:start="685:10" pos:end="685:11">-&gt;</operator><name pos:start="685:12" pos:end="685:26">msmpeg4_version</name></name> <operator pos:start="685:28" pos:end="685:29">&amp;&amp;</operator> <name pos:start="685:31" pos:end="685:48"><name pos:start="685:31" pos:end="685:31">s</name><operator pos:start="685:32" pos:end="685:33">-&gt;</operator><name pos:start="685:34" pos:end="685:48">msmpeg4_version</name></name><operator pos:start="685:49" pos:end="685:49">&lt;</operator><literal type="number" pos:start="685:50" pos:end="685:50">4</literal> <operator pos:start="685:52" pos:end="685:53">&amp;&amp;</operator> <name pos:start="685:55" pos:end="685:66"><name pos:start="685:55" pos:end="685:55">s</name><operator pos:start="685:56" pos:end="685:57">-&gt;</operator><name pos:start="685:58" pos:end="685:66">pict_type</name></name><operator pos:start="685:67" pos:end="685:68">==</operator><name pos:start="685:69" pos:end="685:85">AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo" pos:start="687:9" pos:end="691:9"><block_content pos:start="687:9" pos:end="691:9">

        <if_stmt pos:start="687:9" pos:end="691:9"><if pos:start="687:9" pos:end="691:9">if<condition pos:start="687:11" pos:end="687:84">(<expr pos:start="687:12" pos:end="687:83"><operator pos:start="687:12" pos:end="687:12">!</operator><name pos:start="687:13" pos:end="687:34">CONFIG_MSMPEG4_DECODER</name> <operator pos:start="687:36" pos:end="687:37">||</operator> <call pos:start="687:39" pos:end="687:79"><name pos:start="687:39" pos:end="687:66">ff_msmpeg4_decode_ext_header</name><argument_list pos:start="687:67" pos:end="687:79">(<argument pos:start="687:68" pos:end="687:68"><expr pos:start="687:68" pos:end="687:68"><name pos:start="687:68" pos:end="687:68">s</name></expr></argument>, <argument pos:start="687:71" pos:end="687:78"><expr pos:start="687:71" pos:end="687:78"><name pos:start="687:71" pos:end="687:78">buf_size</name></expr></argument>)</argument_list></call> <operator pos:start="687:81" pos:end="687:81">&lt;</operator> <literal type="number" pos:start="687:83" pos:end="687:83">0</literal></expr>)</condition><block pos:start="687:85" pos:end="691:9">{<block_content pos:start="689:13" pos:end="689:66">

            <expr_stmt pos:start="689:13" pos:end="689:66"><expr pos:start="689:13" pos:end="689:65"><name pos:start="689:13" pos:end="689:51"><name pos:start="689:13" pos:end="689:13">s</name><operator pos:start="689:14" pos:end="689:15">-&gt;</operator><name pos:start="689:16" pos:end="689:17">er</name><operator pos:start="689:18" pos:end="689:18">.</operator><name pos:start="689:19" pos:end="689:36">error_status_table</name><index pos:start="689:37" pos:end="689:51">[<expr pos:start="689:38" pos:end="689:50"><name pos:start="689:38" pos:end="689:46"><name pos:start="689:38" pos:end="689:38">s</name><operator pos:start="689:39" pos:end="689:40">-&gt;</operator><name pos:start="689:41" pos:end="689:46">mb_num</name></name> <operator pos:start="689:48" pos:end="689:48">-</operator> <literal type="number" pos:start="689:50" pos:end="689:50">1</literal></expr>]</index></name> <operator pos:start="689:53" pos:end="689:53">=</operator> <name pos:start="689:55" pos:end="689:65">ER_MB_ERROR</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="695:5" pos:end="695:44"><expr pos:start="695:5" pos:end="695:43"><call pos:start="695:5" pos:end="695:43"><name pos:start="695:5" pos:end="695:14">av_assert1</name><argument_list pos:start="695:15" pos:end="695:43">(<argument pos:start="695:16" pos:end="695:42"><expr pos:start="695:16" pos:end="695:42"><name pos:start="695:16" pos:end="695:39"><name pos:start="695:16" pos:end="695:16">s</name><operator pos:start="695:17" pos:end="695:18">-&gt;</operator><name pos:start="695:19" pos:end="695:39">bitstream_buffer_size</name></name><operator pos:start="695:40" pos:end="695:41">==</operator><literal type="number" pos:start="695:42" pos:end="695:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="697:1" pos:end="697:10"><name pos:start="697:1" pos:end="697:9">frame_end</name>:</label>

    <expr_stmt pos:start="699:5" pos:end="699:28"><expr pos:start="699:5" pos:end="699:27"><call pos:start="699:5" pos:end="699:27"><name pos:start="699:5" pos:end="699:19">ff_er_frame_end</name><argument_list pos:start="699:20" pos:end="699:27">(<argument pos:start="699:21" pos:end="699:26"><expr pos:start="699:21" pos:end="699:26"><operator pos:start="699:21" pos:end="699:21">&amp;</operator><name pos:start="699:22" pos:end="699:26"><name pos:start="699:22" pos:end="699:22">s</name><operator pos:start="699:23" pos:end="699:24">-&gt;</operator><name pos:start="699:25" pos:end="699:26">er</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="703:5" pos:end="709:5"><if pos:start="703:5" pos:end="709:5">if <condition pos:start="703:8" pos:end="703:23">(<expr pos:start="703:9" pos:end="703:22"><name pos:start="703:9" pos:end="703:22"><name pos:start="703:9" pos:end="703:13">avctx</name><operator pos:start="703:14" pos:end="703:15">-&gt;</operator><name pos:start="703:16" pos:end="703:22">hwaccel</name></name></expr>)</condition> <block pos:start="703:25" pos:end="709:5">{<block_content pos:start="705:9" pos:end="707:23">

        <if_stmt pos:start="705:9" pos:end="707:23"><if pos:start="705:9" pos:end="707:23">if <condition pos:start="705:12" pos:end="705:57">(<expr pos:start="705:13" pos:end="705:56"><operator pos:start="705:13" pos:end="705:13">(</operator><name pos:start="705:14" pos:end="705:16">ret</name> <operator pos:start="705:18" pos:end="705:18">=</operator> <call pos:start="705:20" pos:end="705:51"><name pos:start="705:20" pos:end="705:44"><name pos:start="705:20" pos:end="705:24">avctx</name><operator pos:start="705:25" pos:end="705:26">-&gt;</operator><name pos:start="705:27" pos:end="705:33">hwaccel</name><operator pos:start="705:34" pos:end="705:35">-&gt;</operator><name pos:start="705:36" pos:end="705:44">end_frame</name></name><argument_list pos:start="705:45" pos:end="705:51">(<argument pos:start="705:46" pos:end="705:50"><expr pos:start="705:46" pos:end="705:50"><name pos:start="705:46" pos:end="705:50">avctx</name></expr></argument>)</argument_list></call><operator pos:start="705:52" pos:end="705:52">)</operator> <operator pos:start="705:54" pos:end="705:54">&lt;</operator> <literal type="number" pos:start="705:56" pos:end="705:56">0</literal></expr>)</condition><block type="pseudo" pos:start="707:13" pos:end="707:23"><block_content pos:start="707:13" pos:end="707:23">

            <return pos:start="707:13" pos:end="707:23">return <expr pos:start="707:20" pos:end="707:22"><name pos:start="707:20" pos:end="707:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="713:5" pos:end="713:24"><expr pos:start="713:5" pos:end="713:23"><call pos:start="713:5" pos:end="713:23"><name pos:start="713:5" pos:end="713:20">ff_MPV_frame_end</name><argument_list pos:start="713:21" pos:end="713:23">(<argument pos:start="713:22" pos:end="713:22"><expr pos:start="713:22" pos:end="713:22"><name pos:start="713:22" pos:end="713:22">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="717:5" pos:end="717:44">/* divx 5.01+ bitstream reorder stuff */</comment>

    <comment type="block" pos:start="719:5" pos:end="721:74">/* Since this clobbers the input buffer and hwaccel codecs still need the

     * data during hwaccel-&gt;end_frame we should not do this any earlier */</comment>

    <if_stmt pos:start="723:5" pos:end="771:5"><if pos:start="723:5" pos:end="771:5">if<condition pos:start="723:7" pos:end="723:56">(<expr pos:start="723:8" pos:end="723:55"><name pos:start="723:8" pos:end="723:18"><name pos:start="723:8" pos:end="723:8">s</name><operator pos:start="723:9" pos:end="723:10">-&gt;</operator><name pos:start="723:11" pos:end="723:18">codec_id</name></name><operator pos:start="723:19" pos:end="723:20">==</operator><name pos:start="723:21" pos:end="723:37">AV_CODEC_ID_MPEG4</name> <operator pos:start="723:39" pos:end="723:40">&amp;&amp;</operator> <name pos:start="723:42" pos:end="723:55"><name pos:start="723:42" pos:end="723:42">s</name><operator pos:start="723:43" pos:end="723:44">-&gt;</operator><name pos:start="723:45" pos:end="723:55">divx_packed</name></name></expr>)</condition><block pos:start="723:57" pos:end="771:5">{<block_content pos:start="725:9" pos:end="769:9">

        <decl_stmt pos:start="725:9" pos:end="725:95"><decl pos:start="725:9" pos:end="725:94"><type pos:start="725:9" pos:end="725:11"><name pos:start="725:9" pos:end="725:11">int</name></type> <name pos:start="725:13" pos:end="725:23">current_pos</name><init pos:start="725:24" pos:end="725:94">= <expr pos:start="725:26" pos:end="725:94"><ternary pos:start="725:26" pos:end="725:94"><condition pos:start="725:26" pos:end="725:62"><expr pos:start="725:26" pos:end="725:60"><name pos:start="725:26" pos:end="725:37"><name pos:start="725:26" pos:end="725:26">s</name><operator pos:start="725:27" pos:end="725:28">-&gt;</operator><name pos:start="725:29" pos:end="725:30">gb</name><operator pos:start="725:31" pos:end="725:31">.</operator><name pos:start="725:32" pos:end="725:37">buffer</name></name> <operator pos:start="725:39" pos:end="725:40">==</operator> <name pos:start="725:42" pos:end="725:60"><name pos:start="725:42" pos:end="725:42">s</name><operator pos:start="725:43" pos:end="725:44">-&gt;</operator><name pos:start="725:45" pos:end="725:60">bitstream_buffer</name></name></expr> ?</condition><then pos:start="725:64" pos:end="725:64"> <expr pos:start="725:64" pos:end="725:64"><literal type="number" pos:start="725:64" pos:end="725:64">0</literal></expr> </then><else pos:start="725:66" pos:end="725:94">: <expr pos:start="725:68" pos:end="725:94"><operator pos:start="725:68" pos:end="725:68">(</operator><call pos:start="725:69" pos:end="725:90"><name pos:start="725:69" pos:end="725:82">get_bits_count</name><argument_list pos:start="725:83" pos:end="725:90">(<argument pos:start="725:84" pos:end="725:89"><expr pos:start="725:84" pos:end="725:89"><operator pos:start="725:84" pos:end="725:84">&amp;</operator><name pos:start="725:85" pos:end="725:89"><name pos:start="725:85" pos:end="725:85">s</name><operator pos:start="725:86" pos:end="725:87">-&gt;</operator><name pos:start="725:88" pos:end="725:89">gb</name></name></expr></argument>)</argument_list></call><operator pos:start="725:91" pos:end="725:92">&gt;&gt;</operator><literal type="number" pos:start="725:93" pos:end="725:93">3</literal><operator pos:start="725:94" pos:end="725:94">)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="727:9" pos:end="727:30"><decl pos:start="727:9" pos:end="727:29"><type pos:start="727:9" pos:end="727:11"><name pos:start="727:9" pos:end="727:11">int</name></type> <name pos:start="727:13" pos:end="727:27">startcode_found</name><init pos:start="727:28" pos:end="727:29">=<expr pos:start="727:29" pos:end="727:29"><literal type="number" pos:start="727:29" pos:end="727:29">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="731:9" pos:end="747:9"><if pos:start="731:9" pos:end="747:9">if<condition pos:start="731:11" pos:end="731:38">(<expr pos:start="731:12" pos:end="731:37"><name pos:start="731:12" pos:end="731:19">buf_size</name> <operator pos:start="731:21" pos:end="731:21">-</operator> <name pos:start="731:23" pos:end="731:33">current_pos</name> <operator pos:start="731:35" pos:end="731:35">&gt;</operator> <literal type="number" pos:start="731:37" pos:end="731:37">7</literal></expr>)</condition><block pos:start="731:39" pos:end="747:9">{<block_content pos:start="733:13" pos:end="745:13">

            <decl_stmt pos:start="733:13" pos:end="733:18"><decl pos:start="733:13" pos:end="733:17"><type pos:start="733:13" pos:end="733:15"><name pos:start="733:13" pos:end="733:15">int</name></type> <name pos:start="733:17" pos:end="733:17">i</name></decl>;</decl_stmt>

            <for pos:start="735:13" pos:end="745:13">for<control pos:start="735:16" pos:end="735:49">(<init pos:start="735:17" pos:end="735:30"><expr pos:start="735:17" pos:end="735:29"><name pos:start="735:17" pos:end="735:17">i</name><operator pos:start="735:18" pos:end="735:18">=</operator><name pos:start="735:19" pos:end="735:29">current_pos</name></expr>;</init> <condition pos:start="735:32" pos:end="735:44"><expr pos:start="735:32" pos:end="735:43"><name pos:start="735:32" pos:end="735:32">i</name><operator pos:start="735:33" pos:end="735:33">&lt;</operator><name pos:start="735:34" pos:end="735:41">buf_size</name><operator pos:start="735:42" pos:end="735:42">-</operator><literal type="number" pos:start="735:43" pos:end="735:43">4</literal></expr>;</condition> <incr pos:start="735:46" pos:end="735:48"><expr pos:start="735:46" pos:end="735:48"><name pos:start="735:46" pos:end="735:46">i</name><operator pos:start="735:47" pos:end="735:48">++</operator></expr></incr>)</control><block pos:start="735:50" pos:end="745:13">{<block_content pos:start="737:17" pos:end="743:17">

                <if_stmt pos:start="737:17" pos:end="743:17"><if pos:start="737:17" pos:end="743:17">if<condition pos:start="737:19" pos:end="737:77">(<expr pos:start="737:20" pos:end="737:76"><name pos:start="737:20" pos:end="737:25"><name pos:start="737:20" pos:end="737:22">buf</name><index pos:start="737:23" pos:end="737:25">[<expr pos:start="737:24" pos:end="737:24"><name pos:start="737:24" pos:end="737:24">i</name></expr>]</index></name><operator pos:start="737:26" pos:end="737:27">==</operator><literal type="number" pos:start="737:28" pos:end="737:28">0</literal> <operator pos:start="737:30" pos:end="737:31">&amp;&amp;</operator> <name pos:start="737:33" pos:end="737:40"><name pos:start="737:33" pos:end="737:35">buf</name><index pos:start="737:36" pos:end="737:40">[<expr pos:start="737:37" pos:end="737:39"><name pos:start="737:37" pos:end="737:37">i</name><operator pos:start="737:38" pos:end="737:38">+</operator><literal type="number" pos:start="737:39" pos:end="737:39">1</literal></expr>]</index></name><operator pos:start="737:41" pos:end="737:42">==</operator><literal type="number" pos:start="737:43" pos:end="737:43">0</literal> <operator pos:start="737:45" pos:end="737:46">&amp;&amp;</operator> <name pos:start="737:48" pos:end="737:55"><name pos:start="737:48" pos:end="737:50">buf</name><index pos:start="737:51" pos:end="737:55">[<expr pos:start="737:52" pos:end="737:54"><name pos:start="737:52" pos:end="737:52">i</name><operator pos:start="737:53" pos:end="737:53">+</operator><literal type="number" pos:start="737:54" pos:end="737:54">2</literal></expr>]</index></name><operator pos:start="737:56" pos:end="737:57">==</operator><literal type="number" pos:start="737:58" pos:end="737:58">1</literal> <operator pos:start="737:60" pos:end="737:61">&amp;&amp;</operator> <name pos:start="737:63" pos:end="737:70"><name pos:start="737:63" pos:end="737:65">buf</name><index pos:start="737:66" pos:end="737:70">[<expr pos:start="737:67" pos:end="737:69"><name pos:start="737:67" pos:end="737:67">i</name><operator pos:start="737:68" pos:end="737:68">+</operator><literal type="number" pos:start="737:69" pos:end="737:69">3</literal></expr>]</index></name><operator pos:start="737:71" pos:end="737:72">==</operator><literal type="number" pos:start="737:73" pos:end="737:76">0xB6</literal></expr>)</condition><block pos:start="737:78" pos:end="743:17">{<block_content pos:start="739:21" pos:end="741:26">

                    <expr_stmt pos:start="739:21" pos:end="739:53"><expr pos:start="739:21" pos:end="739:52"><name pos:start="739:21" pos:end="739:35">startcode_found</name><operator pos:start="739:36" pos:end="739:36">=</operator><operator pos:start="739:37" pos:end="739:37">!</operator><operator pos:start="739:38" pos:end="739:38">(</operator><name pos:start="739:39" pos:end="739:46"><name pos:start="739:39" pos:end="739:41">buf</name><index pos:start="739:42" pos:end="739:46">[<expr pos:start="739:43" pos:end="739:45"><name pos:start="739:43" pos:end="739:43">i</name><operator pos:start="739:44" pos:end="739:44">+</operator><literal type="number" pos:start="739:45" pos:end="739:45">4</literal></expr>]</index></name><operator pos:start="739:47" pos:end="739:47">&amp;</operator><literal type="number" pos:start="739:48" pos:end="739:51">0x40</literal><operator pos:start="739:52" pos:end="739:52">)</operator></expr>;</expr_stmt>

                    <break pos:start="741:21" pos:end="741:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="751:9" pos:end="769:9"><if pos:start="751:9" pos:end="769:9">if<condition pos:start="751:11" pos:end="751:27">(<expr pos:start="751:12" pos:end="751:26"><name pos:start="751:12" pos:end="751:26">startcode_found</name></expr>)</condition><block pos:start="751:28" pos:end="769:9">{<block_content pos:start="753:13" pos:end="767:61">

            <expr_stmt pos:start="753:13" pos:end="759:71"><expr pos:start="753:13" pos:end="759:70"><call pos:start="753:13" pos:end="759:70"><name pos:start="753:13" pos:end="753:26">av_fast_malloc</name><argument_list pos:start="753:27" pos:end="759:70">(

                <argument pos:start="755:17" pos:end="755:36"><expr pos:start="755:17" pos:end="755:36"><operator pos:start="755:17" pos:end="755:17">&amp;</operator><name pos:start="755:18" pos:end="755:36"><name pos:start="755:18" pos:end="755:18">s</name><operator pos:start="755:19" pos:end="755:20">-&gt;</operator><name pos:start="755:21" pos:end="755:36">bitstream_buffer</name></name></expr></argument>,

                <argument pos:start="757:17" pos:end="757:51"><expr pos:start="757:17" pos:end="757:51"><operator pos:start="757:17" pos:end="757:17">&amp;</operator><name pos:start="757:18" pos:end="757:51"><name pos:start="757:18" pos:end="757:18">s</name><operator pos:start="757:19" pos:end="757:20">-&gt;</operator><name pos:start="757:21" pos:end="757:51">allocated_bitstream_buffer_size</name></name></expr></argument>,

                <argument pos:start="759:17" pos:end="759:69"><expr pos:start="759:17" pos:end="759:69"><name pos:start="759:17" pos:end="759:24">buf_size</name> <operator pos:start="759:26" pos:end="759:26">-</operator> <name pos:start="759:28" pos:end="759:38">current_pos</name> <operator pos:start="759:40" pos:end="759:40">+</operator> <name pos:start="759:42" pos:end="759:69">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="761:13" pos:end="763:39"><if pos:start="761:13" pos:end="763:39">if <condition pos:start="761:16" pos:end="761:37">(<expr pos:start="761:17" pos:end="761:36"><operator pos:start="761:17" pos:end="761:17">!</operator><name pos:start="761:18" pos:end="761:36"><name pos:start="761:18" pos:end="761:18">s</name><operator pos:start="761:19" pos:end="761:20">-&gt;</operator><name pos:start="761:21" pos:end="761:36">bitstream_buffer</name></name></expr>)</condition><block type="pseudo" pos:start="763:17" pos:end="763:39"><block_content pos:start="763:17" pos:end="763:39">

                <return pos:start="763:17" pos:end="763:39">return <expr pos:start="763:24" pos:end="763:38"><call pos:start="763:24" pos:end="763:38"><name pos:start="763:24" pos:end="763:30">AVERROR</name><argument_list pos:start="763:31" pos:end="763:38">(<argument pos:start="763:32" pos:end="763:37"><expr pos:start="763:32" pos:end="763:37"><name pos:start="763:32" pos:end="763:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="765:13" pos:end="765:83"><expr pos:start="765:13" pos:end="765:82"><call pos:start="765:13" pos:end="765:82"><name pos:start="765:13" pos:end="765:18">memcpy</name><argument_list pos:start="765:19" pos:end="765:82">(<argument pos:start="765:20" pos:end="765:38"><expr pos:start="765:20" pos:end="765:38"><name pos:start="765:20" pos:end="765:38"><name pos:start="765:20" pos:end="765:20">s</name><operator pos:start="765:21" pos:end="765:22">-&gt;</operator><name pos:start="765:23" pos:end="765:38">bitstream_buffer</name></name></expr></argument>, <argument pos:start="765:41" pos:end="765:57"><expr pos:start="765:41" pos:end="765:57"><name pos:start="765:41" pos:end="765:43">buf</name> <operator pos:start="765:45" pos:end="765:45">+</operator> <name pos:start="765:47" pos:end="765:57">current_pos</name></expr></argument>, <argument pos:start="765:60" pos:end="765:81"><expr pos:start="765:60" pos:end="765:81"><name pos:start="765:60" pos:end="765:67">buf_size</name> <operator pos:start="765:69" pos:end="765:69">-</operator> <name pos:start="765:71" pos:end="765:81">current_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="767:13" pos:end="767:61"><expr pos:start="767:13" pos:end="767:60"><name pos:start="767:13" pos:end="767:36"><name pos:start="767:13" pos:end="767:13">s</name><operator pos:start="767:14" pos:end="767:15">-&gt;</operator><name pos:start="767:16" pos:end="767:36">bitstream_buffer_size</name></name><operator pos:start="767:37" pos:end="767:37">=</operator> <name pos:start="767:39" pos:end="767:46">buf_size</name> <operator pos:start="767:48" pos:end="767:48">-</operator> <name pos:start="767:50" pos:end="767:60">current_pos</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="775:5" pos:end="777:38"><if pos:start="775:5" pos:end="777:38">if <condition pos:start="775:8" pos:end="775:42">(<expr pos:start="775:9" pos:end="775:41"><operator pos:start="775:9" pos:end="775:9">!</operator><name pos:start="775:10" pos:end="775:23"><name pos:start="775:10" pos:end="775:10">s</name><operator pos:start="775:11" pos:end="775:12">-&gt;</operator><name pos:start="775:13" pos:end="775:23">divx_packed</name></name> <operator pos:start="775:25" pos:end="775:26">&amp;&amp;</operator> <name pos:start="775:28" pos:end="775:41"><name pos:start="775:28" pos:end="775:32">avctx</name><operator pos:start="775:33" pos:end="775:34">-&gt;</operator><name pos:start="775:35" pos:end="775:41">hwaccel</name></name></expr>)</condition><block type="pseudo" pos:start="777:9" pos:end="777:38"><block_content pos:start="777:9" pos:end="777:38">

        <expr_stmt pos:start="777:9" pos:end="777:38"><expr pos:start="777:9" pos:end="777:37"><call pos:start="777:9" pos:end="777:37"><name pos:start="777:9" pos:end="777:30">ff_thread_finish_setup</name><argument_list pos:start="777:31" pos:end="777:37">(<argument pos:start="777:32" pos:end="777:36"><expr pos:start="777:32" pos:end="777:36"><name pos:start="777:32" pos:end="777:36">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="781:5" pos:end="781:86"><expr pos:start="781:5" pos:end="781:85"><call pos:start="781:5" pos:end="781:85"><name pos:start="781:5" pos:end="781:14">av_assert1</name><argument_list pos:start="781:15" pos:end="781:85">(<argument pos:start="781:16" pos:end="781:84"><expr pos:start="781:16" pos:end="781:84"><name pos:start="781:16" pos:end="781:45"><name pos:start="781:16" pos:end="781:16">s</name><operator pos:start="781:17" pos:end="781:18">-&gt;</operator><name pos:start="781:19" pos:end="781:33">current_picture</name><operator pos:start="781:34" pos:end="781:34">.</operator><name pos:start="781:35" pos:end="781:35">f</name><operator pos:start="781:36" pos:end="781:36">.</operator><name pos:start="781:37" pos:end="781:45">pict_type</name></name> <operator pos:start="781:47" pos:end="781:48">==</operator> <name pos:start="781:50" pos:end="781:84"><name pos:start="781:50" pos:end="781:50">s</name><operator pos:start="781:51" pos:end="781:52">-&gt;</operator><name pos:start="781:53" pos:end="781:71">current_picture_ptr</name><operator pos:start="781:72" pos:end="781:73">-&gt;</operator><name pos:start="781:74" pos:end="781:74">f</name><operator pos:start="781:75" pos:end="781:75">.</operator><name pos:start="781:76" pos:end="781:84">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="783:5" pos:end="783:63"><expr pos:start="783:5" pos:end="783:62"><call pos:start="783:5" pos:end="783:62"><name pos:start="783:5" pos:end="783:14">av_assert1</name><argument_list pos:start="783:15" pos:end="783:62">(<argument pos:start="783:16" pos:end="783:61"><expr pos:start="783:16" pos:end="783:61"><name pos:start="783:16" pos:end="783:45"><name pos:start="783:16" pos:end="783:16">s</name><operator pos:start="783:17" pos:end="783:18">-&gt;</operator><name pos:start="783:19" pos:end="783:33">current_picture</name><operator pos:start="783:34" pos:end="783:34">.</operator><name pos:start="783:35" pos:end="783:35">f</name><operator pos:start="783:36" pos:end="783:36">.</operator><name pos:start="783:37" pos:end="783:45">pict_type</name></name> <operator pos:start="783:47" pos:end="783:48">==</operator> <name pos:start="783:50" pos:end="783:61"><name pos:start="783:50" pos:end="783:50">s</name><operator pos:start="783:51" pos:end="783:52">-&gt;</operator><name pos:start="783:53" pos:end="783:61">pict_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="785:5" pos:end="805:5"><if pos:start="785:5" pos:end="795:5">if <condition pos:start="785:8" pos:end="785:58">(<expr pos:start="785:9" pos:end="785:57"><name pos:start="785:9" pos:end="785:20"><name pos:start="785:9" pos:end="785:9">s</name><operator pos:start="785:10" pos:end="785:11">-&gt;</operator><name pos:start="785:12" pos:end="785:20">pict_type</name></name> <operator pos:start="785:22" pos:end="785:23">==</operator> <name pos:start="785:25" pos:end="785:41">AV_PICTURE_TYPE_B</name> <operator pos:start="785:43" pos:end="785:44">||</operator> <name pos:start="785:46" pos:end="785:57"><name pos:start="785:46" pos:end="785:46">s</name><operator pos:start="785:47" pos:end="785:48">-&gt;</operator><name pos:start="785:49" pos:end="785:57">low_delay</name></name></expr>)</condition> <block pos:start="785:60" pos:end="795:5">{<block_content pos:start="787:9" pos:end="793:86">

        <if_stmt pos:start="787:9" pos:end="789:23"><if pos:start="787:9" pos:end="789:23">if <condition pos:start="787:12" pos:end="787:71">(<expr pos:start="787:13" pos:end="787:70"><operator pos:start="787:13" pos:end="787:13">(</operator><name pos:start="787:14" pos:end="787:16">ret</name> <operator pos:start="787:18" pos:end="787:18">=</operator> <call pos:start="787:20" pos:end="787:65"><name pos:start="787:20" pos:end="787:31">av_frame_ref</name><argument_list pos:start="787:32" pos:end="787:65">(<argument pos:start="787:33" pos:end="787:36"><expr pos:start="787:33" pos:end="787:36"><name pos:start="787:33" pos:end="787:36">pict</name></expr></argument>, <argument pos:start="787:39" pos:end="787:64"><expr pos:start="787:39" pos:end="787:64"><operator pos:start="787:39" pos:end="787:39">&amp;</operator><name pos:start="787:40" pos:end="787:64"><name pos:start="787:40" pos:end="787:40">s</name><operator pos:start="787:41" pos:end="787:42">-&gt;</operator><name pos:start="787:43" pos:end="787:61">current_picture_ptr</name><operator pos:start="787:62" pos:end="787:63">-&gt;</operator><name pos:start="787:64" pos:end="787:64">f</name></name></expr></argument>)</argument_list></call><operator pos:start="787:66" pos:end="787:66">)</operator> <operator pos:start="787:68" pos:end="787:68">&lt;</operator> <literal type="number" pos:start="787:70" pos:end="787:70">0</literal></expr>)</condition><block type="pseudo" pos:start="789:13" pos:end="789:23"><block_content pos:start="789:13" pos:end="789:23">

            <return pos:start="789:13" pos:end="789:23">return <expr pos:start="789:20" pos:end="789:22"><name pos:start="789:20" pos:end="789:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="791:9" pos:end="791:61"><expr pos:start="791:9" pos:end="791:60"><call pos:start="791:9" pos:end="791:60"><name pos:start="791:9" pos:end="791:27">ff_print_debug_info</name><argument_list pos:start="791:28" pos:end="791:60">(<argument pos:start="791:29" pos:end="791:29"><expr pos:start="791:29" pos:end="791:29"><name pos:start="791:29" pos:end="791:29">s</name></expr></argument>, <argument pos:start="791:32" pos:end="791:53"><expr pos:start="791:32" pos:end="791:53"><name pos:start="791:32" pos:end="791:53"><name pos:start="791:32" pos:end="791:32">s</name><operator pos:start="791:33" pos:end="791:34">-&gt;</operator><name pos:start="791:35" pos:end="791:53">current_picture_ptr</name></name></expr></argument>, <argument pos:start="791:56" pos:end="791:59"><expr pos:start="791:56" pos:end="791:59"><name pos:start="791:56" pos:end="791:59">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="793:9" pos:end="793:86"><expr pos:start="793:9" pos:end="793:85"><call pos:start="793:9" pos:end="793:85"><name pos:start="793:9" pos:end="793:30">ff_mpv_export_qp_table</name><argument_list pos:start="793:31" pos:end="793:85">(<argument pos:start="793:32" pos:end="793:32"><expr pos:start="793:32" pos:end="793:32"><name pos:start="793:32" pos:end="793:32">s</name></expr></argument>, <argument pos:start="793:35" pos:end="793:38"><expr pos:start="793:35" pos:end="793:38"><name pos:start="793:35" pos:end="793:38">pict</name></expr></argument>, <argument pos:start="793:41" pos:end="793:62"><expr pos:start="793:41" pos:end="793:62"><name pos:start="793:41" pos:end="793:62"><name pos:start="793:41" pos:end="793:41">s</name><operator pos:start="793:42" pos:end="793:43">-&gt;</operator><name pos:start="793:44" pos:end="793:62">current_picture_ptr</name></name></expr></argument>, <argument pos:start="793:65" pos:end="793:84"><expr pos:start="793:65" pos:end="793:84"><name pos:start="793:65" pos:end="793:84">FF_QSCALE_TYPE_MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="795:7" pos:end="805:5">else if <condition pos:start="795:15" pos:end="795:43">(<expr pos:start="795:16" pos:end="795:42"><name pos:start="795:16" pos:end="795:34"><name pos:start="795:16" pos:end="795:16">s</name><operator pos:start="795:17" pos:end="795:18">-&gt;</operator><name pos:start="795:19" pos:end="795:34">last_picture_ptr</name></name> <operator pos:start="795:36" pos:end="795:37">!=</operator> <name pos:start="795:39" pos:end="795:42">NULL</name></expr>)</condition> <block pos:start="795:45" pos:end="805:5">{<block_content pos:start="797:9" pos:end="803:83">

        <if_stmt pos:start="797:9" pos:end="799:23"><if pos:start="797:9" pos:end="799:23">if <condition pos:start="797:12" pos:end="797:68">(<expr pos:start="797:13" pos:end="797:67"><operator pos:start="797:13" pos:end="797:13">(</operator><name pos:start="797:14" pos:end="797:16">ret</name> <operator pos:start="797:18" pos:end="797:18">=</operator> <call pos:start="797:20" pos:end="797:62"><name pos:start="797:20" pos:end="797:31">av_frame_ref</name><argument_list pos:start="797:32" pos:end="797:62">(<argument pos:start="797:33" pos:end="797:36"><expr pos:start="797:33" pos:end="797:36"><name pos:start="797:33" pos:end="797:36">pict</name></expr></argument>, <argument pos:start="797:39" pos:end="797:61"><expr pos:start="797:39" pos:end="797:61"><operator pos:start="797:39" pos:end="797:39">&amp;</operator><name pos:start="797:40" pos:end="797:61"><name pos:start="797:40" pos:end="797:40">s</name><operator pos:start="797:41" pos:end="797:42">-&gt;</operator><name pos:start="797:43" pos:end="797:58">last_picture_ptr</name><operator pos:start="797:59" pos:end="797:60">-&gt;</operator><name pos:start="797:61" pos:end="797:61">f</name></name></expr></argument>)</argument_list></call><operator pos:start="797:63" pos:end="797:63">)</operator> <operator pos:start="797:65" pos:end="797:65">&lt;</operator> <literal type="number" pos:start="797:67" pos:end="797:67">0</literal></expr>)</condition><block type="pseudo" pos:start="799:13" pos:end="799:23"><block_content pos:start="799:13" pos:end="799:23">

            <return pos:start="799:13" pos:end="799:23">return <expr pos:start="799:20" pos:end="799:22"><name pos:start="799:20" pos:end="799:22">ret</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="801:9" pos:end="801:58"><expr pos:start="801:9" pos:end="801:57"><call pos:start="801:9" pos:end="801:57"><name pos:start="801:9" pos:end="801:27">ff_print_debug_info</name><argument_list pos:start="801:28" pos:end="801:57">(<argument pos:start="801:29" pos:end="801:29"><expr pos:start="801:29" pos:end="801:29"><name pos:start="801:29" pos:end="801:29">s</name></expr></argument>, <argument pos:start="801:32" pos:end="801:50"><expr pos:start="801:32" pos:end="801:50"><name pos:start="801:32" pos:end="801:50"><name pos:start="801:32" pos:end="801:32">s</name><operator pos:start="801:33" pos:end="801:34">-&gt;</operator><name pos:start="801:35" pos:end="801:50">last_picture_ptr</name></name></expr></argument>, <argument pos:start="801:53" pos:end="801:56"><expr pos:start="801:53" pos:end="801:56"><name pos:start="801:53" pos:end="801:56">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="803:9" pos:end="803:83"><expr pos:start="803:9" pos:end="803:82"><call pos:start="803:9" pos:end="803:82"><name pos:start="803:9" pos:end="803:30">ff_mpv_export_qp_table</name><argument_list pos:start="803:31" pos:end="803:82">(<argument pos:start="803:32" pos:end="803:32"><expr pos:start="803:32" pos:end="803:32"><name pos:start="803:32" pos:end="803:32">s</name></expr></argument>, <argument pos:start="803:35" pos:end="803:38"><expr pos:start="803:35" pos:end="803:38"><name pos:start="803:35" pos:end="803:38">pict</name></expr></argument>, <argument pos:start="803:41" pos:end="803:59"><expr pos:start="803:41" pos:end="803:59"><name pos:start="803:41" pos:end="803:59"><name pos:start="803:41" pos:end="803:41">s</name><operator pos:start="803:42" pos:end="803:43">-&gt;</operator><name pos:start="803:44" pos:end="803:59">last_picture_ptr</name></name></expr></argument>, <argument pos:start="803:62" pos:end="803:81"><expr pos:start="803:62" pos:end="803:81"><name pos:start="803:62" pos:end="803:81">FF_QSCALE_TYPE_MPEG1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="809:5" pos:end="843:5"><if pos:start="809:5" pos:end="843:5">if<condition pos:start="809:7" pos:end="809:43">(<expr pos:start="809:8" pos:end="809:42"><name pos:start="809:8" pos:end="809:26"><name pos:start="809:8" pos:end="809:8">s</name><operator pos:start="809:9" pos:end="809:10">-&gt;</operator><name pos:start="809:11" pos:end="809:26">last_picture_ptr</name></name> <operator pos:start="809:28" pos:end="809:29">||</operator> <name pos:start="809:31" pos:end="809:42"><name pos:start="809:31" pos:end="809:31">s</name><operator pos:start="809:32" pos:end="809:33">-&gt;</operator><name pos:start="809:34" pos:end="809:42">low_delay</name></name></expr>)</condition><block pos:start="809:44" pos:end="843:5">{<block_content pos:start="811:9" pos:end="841:23">

        <if_stmt pos:start="811:9" pos:end="839:9"><if pos:start="811:9" pos:end="839:9">if <condition pos:start="811:12" pos:end="813:84">(   <expr pos:start="811:16" pos:end="813:83"><name pos:start="811:16" pos:end="811:27"><name pos:start="811:16" pos:end="811:19">pict</name><operator pos:start="811:20" pos:end="811:21">-&gt;</operator><name pos:start="811:22" pos:end="811:27">format</name></name> <operator pos:start="811:29" pos:end="811:30">==</operator> <name pos:start="811:32" pos:end="811:49">AV_PIX_FMT_YUV420P</name>

            <operator pos:start="813:13" pos:end="813:14">&amp;&amp;</operator> <operator pos:start="813:16" pos:end="813:16">(</operator><name pos:start="813:17" pos:end="813:28"><name pos:start="813:17" pos:end="813:17">s</name><operator pos:start="813:18" pos:end="813:19">-&gt;</operator><name pos:start="813:20" pos:end="813:28">codec_tag</name></name> <operator pos:start="813:30" pos:end="813:31">==</operator> <call pos:start="813:33" pos:end="813:47"><name pos:start="813:33" pos:end="813:39">AV_RL32</name><argument_list pos:start="813:40" pos:end="813:47">(<argument pos:start="813:41" pos:end="813:46"><expr pos:start="813:41" pos:end="813:46"><literal type="string" pos:start="813:41" pos:end="813:46">"GEOV"</literal></expr></argument>)</argument_list></call> <operator pos:start="813:49" pos:end="813:50">||</operator> <name pos:start="813:52" pos:end="813:63"><name pos:start="813:52" pos:end="813:52">s</name><operator pos:start="813:53" pos:end="813:54">-&gt;</operator><name pos:start="813:55" pos:end="813:63">codec_tag</name></name> <operator pos:start="813:65" pos:end="813:66">==</operator> <call pos:start="813:68" pos:end="813:82"><name pos:start="813:68" pos:end="813:74">AV_RL32</name><argument_list pos:start="813:75" pos:end="813:82">(<argument pos:start="813:76" pos:end="813:81"><expr pos:start="813:76" pos:end="813:81"><literal type="string" pos:start="813:76" pos:end="813:81">"GEOX"</literal></expr></argument>)</argument_list></call><operator pos:start="813:83" pos:end="813:83">)</operator></expr>)</condition> <block pos:start="813:86" pos:end="839:9">{<block_content pos:start="815:13" pos:end="837:13">

            <decl_stmt pos:start="815:13" pos:end="815:24"><decl pos:start="815:13" pos:end="815:17"><type pos:start="815:13" pos:end="815:15"><name pos:start="815:13" pos:end="815:15">int</name></type> <name pos:start="815:17" pos:end="815:17">x</name></decl>, <decl pos:start="815:20" pos:end="815:20"><type ref="prev" pos:start="815:13" pos:end="815:15"/><name pos:start="815:20" pos:end="815:20">y</name></decl>, <decl pos:start="815:23" pos:end="815:23"><type ref="prev" pos:start="815:13" pos:end="815:15"/><name pos:start="815:23" pos:end="815:23">p</name></decl>;</decl_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:41"><expr pos:start="817:13" pos:end="817:40"><call pos:start="817:13" pos:end="817:40"><name pos:start="817:13" pos:end="817:34">av_frame_make_writable</name><argument_list pos:start="817:35" pos:end="817:40">(<argument pos:start="817:36" pos:end="817:39"><expr pos:start="817:36" pos:end="817:39"><name pos:start="817:36" pos:end="817:39">pict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for pos:start="819:13" pos:end="837:13">for <control pos:start="819:17" pos:end="819:31">(<init pos:start="819:18" pos:end="819:21"><expr pos:start="819:18" pos:end="819:20"><name pos:start="819:18" pos:end="819:18">p</name><operator pos:start="819:19" pos:end="819:19">=</operator><literal type="number" pos:start="819:20" pos:end="819:20">0</literal></expr>;</init> <condition pos:start="819:23" pos:end="819:26"><expr pos:start="819:23" pos:end="819:25"><name pos:start="819:23" pos:end="819:23">p</name><operator pos:start="819:24" pos:end="819:24">&lt;</operator><literal type="number" pos:start="819:25" pos:end="819:25">3</literal></expr>;</condition> <incr pos:start="819:28" pos:end="819:30"><expr pos:start="819:28" pos:end="819:30"><name pos:start="819:28" pos:end="819:28">p</name><operator pos:start="819:29" pos:end="819:30">++</operator></expr></incr>)</control> <block pos:start="819:33" pos:end="837:13">{<block_content pos:start="821:17" pos:end="835:68">

                <decl_stmt pos:start="821:17" pos:end="821:58"><decl pos:start="821:17" pos:end="821:57"><type pos:start="821:17" pos:end="821:19"><name pos:start="821:17" pos:end="821:19">int</name></type> <name pos:start="821:21" pos:end="821:21">w</name> <init pos:start="821:23" pos:end="821:57">= <expr pos:start="821:25" pos:end="821:57"><call pos:start="821:25" pos:end="821:57"><name pos:start="821:25" pos:end="821:38">FF_CEIL_RSHIFT</name><argument_list pos:start="821:39" pos:end="821:57">(<argument pos:start="821:40" pos:end="821:51"><expr pos:start="821:40" pos:end="821:51"><name pos:start="821:40" pos:end="821:51"><name pos:start="821:40" pos:end="821:43">pict</name><operator pos:start="821:44" pos:end="821:45">-&gt;</operator> <name pos:start="821:47" pos:end="821:51">width</name></name></expr></argument>, <argument pos:start="821:54" pos:end="821:56"><expr pos:start="821:54" pos:end="821:56"><operator pos:start="821:54" pos:end="821:54">!</operator><operator pos:start="821:55" pos:end="821:55">!</operator><name pos:start="821:56" pos:end="821:56">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="823:17" pos:end="823:58"><decl pos:start="823:17" pos:end="823:57"><type pos:start="823:17" pos:end="823:19"><name pos:start="823:17" pos:end="823:19">int</name></type> <name pos:start="823:21" pos:end="823:21">h</name> <init pos:start="823:23" pos:end="823:57">= <expr pos:start="823:25" pos:end="823:57"><call pos:start="823:25" pos:end="823:57"><name pos:start="823:25" pos:end="823:38">FF_CEIL_RSHIFT</name><argument_list pos:start="823:39" pos:end="823:57">(<argument pos:start="823:40" pos:end="823:51"><expr pos:start="823:40" pos:end="823:51"><name pos:start="823:40" pos:end="823:51"><name pos:start="823:40" pos:end="823:43">pict</name><operator pos:start="823:44" pos:end="823:45">-&gt;</operator><name pos:start="823:46" pos:end="823:51">height</name></name></expr></argument>, <argument pos:start="823:54" pos:end="823:56"><expr pos:start="823:54" pos:end="823:56"><operator pos:start="823:54" pos:end="823:54">!</operator><operator pos:start="823:55" pos:end="823:55">!</operator><name pos:start="823:56" pos:end="823:56">p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="825:17" pos:end="825:49"><decl pos:start="825:17" pos:end="825:48"><type pos:start="825:17" pos:end="825:19"><name pos:start="825:17" pos:end="825:19">int</name></type> <name pos:start="825:21" pos:end="825:28">linesize</name> <init pos:start="825:30" pos:end="825:48">= <expr pos:start="825:32" pos:end="825:48"><name pos:start="825:32" pos:end="825:48"><name pos:start="825:32" pos:end="825:35">pict</name><operator pos:start="825:36" pos:end="825:37">-&gt;</operator><name pos:start="825:38" pos:end="825:45">linesize</name><index pos:start="825:46" pos:end="825:48">[<expr pos:start="825:47" pos:end="825:47"><name pos:start="825:47" pos:end="825:47">p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <for pos:start="827:17" pos:end="835:68">for <control pos:start="827:21" pos:end="827:40">(<init pos:start="827:22" pos:end="827:25"><expr pos:start="827:22" pos:end="827:24"><name pos:start="827:22" pos:end="827:22">y</name><operator pos:start="827:23" pos:end="827:23">=</operator><literal type="number" pos:start="827:24" pos:end="827:24">0</literal></expr>;</init> <condition pos:start="827:27" pos:end="827:35"><expr pos:start="827:27" pos:end="827:34"><name pos:start="827:27" pos:end="827:27">y</name><operator pos:start="827:28" pos:end="827:28">&lt;</operator><operator pos:start="827:29" pos:end="827:29">(</operator><name pos:start="827:30" pos:end="827:30">h</name><operator pos:start="827:31" pos:end="827:32">&gt;&gt;</operator><literal type="number" pos:start="827:33" pos:end="827:33">1</literal><operator pos:start="827:34" pos:end="827:34">)</operator></expr>;</condition> <incr pos:start="827:37" pos:end="827:39"><expr pos:start="827:37" pos:end="827:39"><name pos:start="827:37" pos:end="827:37">y</name><operator pos:start="827:38" pos:end="827:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="829:21" pos:end="835:68"><block_content pos:start="829:21" pos:end="835:68">

                    <for pos:start="829:21" pos:end="835:68">for <control pos:start="829:25" pos:end="829:39">(<init pos:start="829:26" pos:end="829:29"><expr pos:start="829:26" pos:end="829:28"><name pos:start="829:26" pos:end="829:26">x</name><operator pos:start="829:27" pos:end="829:27">=</operator><literal type="number" pos:start="829:28" pos:end="829:28">0</literal></expr>;</init> <condition pos:start="829:31" pos:end="829:34"><expr pos:start="829:31" pos:end="829:33"><name pos:start="829:31" pos:end="829:31">x</name><operator pos:start="829:32" pos:end="829:32">&lt;</operator><name pos:start="829:33" pos:end="829:33">w</name></expr>;</condition> <incr pos:start="829:36" pos:end="829:38"><expr pos:start="829:36" pos:end="829:38"><name pos:start="829:36" pos:end="829:36">x</name><operator pos:start="829:37" pos:end="829:38">++</operator></expr></incr>)</control><block type="pseudo" pos:start="831:25" pos:end="835:68"><block_content pos:start="831:25" pos:end="835:68">

                        <expr_stmt pos:start="831:25" pos:end="835:68"><expr pos:start="831:25" pos:end="835:67"><call pos:start="831:25" pos:end="835:67"><name pos:start="831:25" pos:end="831:30">FFSWAP</name><argument_list pos:start="831:31" pos:end="835:67">(<argument pos:start="831:32" pos:end="831:34"><expr pos:start="831:32" pos:end="831:34"><name pos:start="831:32" pos:end="831:34">int</name></expr></argument>,

                               <argument pos:start="833:32" pos:end="833:60"><expr pos:start="833:32" pos:end="833:60"><name pos:start="833:32" pos:end="833:60"><name pos:start="833:32" pos:end="833:35">pict</name><operator pos:start="833:36" pos:end="833:37">-&gt;</operator><name pos:start="833:38" pos:end="833:41">data</name><index pos:start="833:42" pos:end="833:44">[<expr pos:start="833:43" pos:end="833:43"><name pos:start="833:43" pos:end="833:43">p</name></expr>]</index><index pos:start="833:45" pos:end="833:60">[<expr pos:start="833:46" pos:end="833:59"><name pos:start="833:46" pos:end="833:46">x</name> <operator pos:start="833:48" pos:end="833:48">+</operator> <name pos:start="833:50" pos:end="833:50">y</name><operator pos:start="833:51" pos:end="833:51">*</operator><name pos:start="833:52" pos:end="833:59">linesize</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="835:32" pos:end="835:66"><expr pos:start="835:32" pos:end="835:66"><name pos:start="835:32" pos:end="835:66"><name pos:start="835:32" pos:end="835:35">pict</name><operator pos:start="835:36" pos:end="835:37">-&gt;</operator><name pos:start="835:38" pos:end="835:41">data</name><index pos:start="835:42" pos:end="835:44">[<expr pos:start="835:43" pos:end="835:43"><name pos:start="835:43" pos:end="835:43">p</name></expr>]</index><index pos:start="835:45" pos:end="835:66">[<expr pos:start="835:46" pos:end="835:65"><name pos:start="835:46" pos:end="835:46">x</name> <operator pos:start="835:48" pos:end="835:48">+</operator> <operator pos:start="835:50" pos:end="835:50">(</operator><name pos:start="835:51" pos:end="835:51">h</name><operator pos:start="835:52" pos:end="835:52">-</operator><literal type="number" pos:start="835:53" pos:end="835:54">1</literal><operator pos:start="835:54" pos:end="835:54">-</operator><name pos:start="835:55" pos:end="835:55">y</name><operator pos:start="835:56" pos:end="835:56">)</operator><operator pos:start="835:57" pos:end="835:57">*</operator><name pos:start="835:58" pos:end="835:65">linesize</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

            </block_content>}</block></for>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="841:9" pos:end="841:23"><expr pos:start="841:9" pos:end="841:22"><operator pos:start="841:9" pos:end="841:9">*</operator><name pos:start="841:10" pos:end="841:18">got_frame</name> <operator pos:start="841:20" pos:end="841:20">=</operator> <literal type="number" pos:start="841:22" pos:end="841:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="847:5" pos:end="847:97">return <expr pos:start="847:12" pos:end="847:96"><ternary pos:start="847:12" pos:end="847:96"><condition pos:start="847:12" pos:end="847:61"><expr pos:start="847:12" pos:end="847:60"><operator pos:start="847:12" pos:end="847:12">(</operator><name pos:start="847:13" pos:end="847:15">ret</name> <operator pos:start="847:17" pos:end="847:18">&amp;&amp;</operator> <operator pos:start="847:20" pos:end="847:20">(</operator><name pos:start="847:21" pos:end="847:42"><name pos:start="847:21" pos:end="847:25">avctx</name><operator pos:start="847:26" pos:end="847:27">-&gt;</operator><name pos:start="847:28" pos:end="847:42">err_recognition</name></name> <operator pos:start="847:44" pos:end="847:44">&amp;</operator> <name pos:start="847:46" pos:end="847:58">AV_EF_EXPLODE</name><operator pos:start="847:59" pos:end="847:59">)</operator><operator pos:start="847:60" pos:end="847:60">)</operator></expr>?</condition><then pos:start="847:62" pos:end="847:64"><expr pos:start="847:62" pos:end="847:64"><name pos:start="847:62" pos:end="847:64">ret</name></expr></then><else pos:start="847:65" pos:end="847:96">:<expr pos:start="847:66" pos:end="847:96"><call pos:start="847:66" pos:end="847:96"><name pos:start="847:66" pos:end="847:83">get_consumed_bytes</name><argument_list pos:start="847:84" pos:end="847:96">(<argument pos:start="847:85" pos:end="847:85"><expr pos:start="847:85" pos:end="847:85"><name pos:start="847:85" pos:end="847:85">s</name></expr></argument>, <argument pos:start="847:88" pos:end="847:95"><expr pos:start="847:88" pos:end="847:95"><name pos:start="847:88" pos:end="847:95">buf_size</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>
</unit>
