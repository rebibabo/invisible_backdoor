<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14753.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">av_cold</name> <name pos:start="1:16" pos:end="1:18">int</name></type> <name pos:start="1:20" pos:end="1:30">encode_init</name><parameter_list pos:start="1:31" pos:end="1:53">(<parameter pos:start="1:32" pos:end="1:52"><decl pos:start="1:32" pos:end="1:52"><type pos:start="1:32" pos:end="1:47"><name pos:start="1:32" pos:end="1:45">AVCodecContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:52">avctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:15">

    <decl_stmt pos:start="5:5" pos:end="5:50"><decl pos:start="5:5" pos:end="5:49"><type pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:27">NellyMoserEncodeContext</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">s</name> <init pos:start="5:32" pos:end="5:49">= <expr pos:start="5:34" pos:end="5:49"><name pos:start="5:34" pos:end="5:49"><name pos:start="5:34" pos:end="5:38">avctx</name><operator pos:start="5:39" pos:end="5:40">-&gt;</operator><name pos:start="5:41" pos:end="5:49">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">i</name></decl>, <decl pos:start="7:12" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:14">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:29">(<expr pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:23"><name pos:start="11:9" pos:end="11:13">avctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:23">channels</name></name> <operator pos:start="11:25" pos:end="11:26">!=</operator> <literal type="number" pos:start="11:28" pos:end="11:28">1</literal></expr>)</condition> <block pos:start="11:31" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:31">

        <expr_stmt pos:start="13:9" pos:end="13:76"><expr pos:start="13:9" pos:end="13:75"><call pos:start="13:9" pos:end="13:75"><name pos:start="13:9" pos:end="13:14">av_log</name><argument_list pos:start="13:15" pos:end="13:75">(<argument pos:start="13:16" pos:end="13:20"><expr pos:start="13:16" pos:end="13:20"><name pos:start="13:16" pos:end="13:20">avctx</name></expr></argument>, <argument pos:start="13:23" pos:end="13:34"><expr pos:start="13:23" pos:end="13:34"><name pos:start="13:23" pos:end="13:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="13:37" pos:end="13:74"><expr pos:start="13:37" pos:end="13:74"><literal type="string" pos:start="13:37" pos:end="13:74">"Nellymoser supports only 1 channel\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="21:5" pos:end="33:5"><if pos:start="21:5" pos:end="33:5">if <condition pos:start="21:8" pos:end="27:61">(<expr pos:start="21:9" pos:end="27:60"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:13">avctx</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:26">sample_rate</name></name> <operator pos:start="21:28" pos:end="21:29">!=</operator> <literal type="number" pos:start="21:31" pos:end="21:34">8000</literal> <operator pos:start="21:36" pos:end="21:37">&amp;&amp;</operator> <name pos:start="21:39" pos:end="21:56"><name pos:start="21:39" pos:end="21:43">avctx</name><operator pos:start="21:44" pos:end="21:45">-&gt;</operator><name pos:start="21:46" pos:end="21:56">sample_rate</name></name> <operator pos:start="21:58" pos:end="21:59">!=</operator> <literal type="number" pos:start="21:61" pos:end="21:65">16000</literal> <operator pos:start="21:67" pos:end="21:68">&amp;&amp;</operator>

        <name pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:13">avctx</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:26">sample_rate</name></name> <operator pos:start="23:28" pos:end="23:29">!=</operator> <literal type="number" pos:start="23:31" pos:end="23:35">11025</literal> <operator pos:start="23:37" pos:end="23:38">&amp;&amp;</operator>

        <name pos:start="25:9" pos:end="25:26"><name pos:start="25:9" pos:end="25:13">avctx</name><operator pos:start="25:14" pos:end="25:15">-&gt;</operator><name pos:start="25:16" pos:end="25:26">sample_rate</name></name> <operator pos:start="25:28" pos:end="25:29">!=</operator> <literal type="number" pos:start="25:31" pos:end="25:35">22050</literal> <operator pos:start="25:37" pos:end="25:38">&amp;&amp;</operator> <name pos:start="25:40" pos:end="25:57"><name pos:start="25:40" pos:end="25:44">avctx</name><operator pos:start="25:45" pos:end="25:46">-&gt;</operator><name pos:start="25:47" pos:end="25:57">sample_rate</name></name> <operator pos:start="25:59" pos:end="25:60">!=</operator> <literal type="number" pos:start="25:62" pos:end="25:66">44100</literal> <operator pos:start="25:68" pos:end="25:69">&amp;&amp;</operator>

        <name pos:start="27:9" pos:end="27:36"><name pos:start="27:9" pos:end="27:13">avctx</name><operator pos:start="27:14" pos:end="27:15">-&gt;</operator><name pos:start="27:16" pos:end="27:36">strict_std_compliance</name></name> <operator pos:start="27:38" pos:end="27:39">&gt;=</operator> <name pos:start="27:41" pos:end="27:60">FF_COMPLIANCE_NORMAL</name></expr>)</condition> <block pos:start="27:63" pos:end="33:5">{<block_content pos:start="29:9" pos:end="31:31">

        <expr_stmt pos:start="29:9" pos:end="29:116"><expr pos:start="29:9" pos:end="29:115"><call pos:start="29:9" pos:end="29:115"><name pos:start="29:9" pos:end="29:14">av_log</name><argument_list pos:start="29:15" pos:end="29:115">(<argument pos:start="29:16" pos:end="29:20"><expr pos:start="29:16" pos:end="29:20"><name pos:start="29:16" pos:end="29:20">avctx</name></expr></argument>, <argument pos:start="29:23" pos:end="29:34"><expr pos:start="29:23" pos:end="29:34"><name pos:start="29:23" pos:end="29:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:37" pos:end="29:114"><expr pos:start="29:37" pos:end="29:114"><literal type="string" pos:start="29:37" pos:end="29:114">"Nellymoser works only with 8000, 16000, 11025, 22050 and 44100 sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:31">return <expr pos:start="31:16" pos:end="31:30"><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:22">AVERROR</name><argument_list pos:start="31:23" pos:end="31:30">(<argument pos:start="31:24" pos:end="31:29"><expr pos:start="31:24" pos:end="31:29"><name pos:start="31:24" pos:end="31:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:38"><expr pos:start="37:5" pos:end="37:37"><name pos:start="37:5" pos:end="37:21"><name pos:start="37:5" pos:end="37:9">avctx</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:21">frame_size</name></name> <operator pos:start="37:23" pos:end="37:23">=</operator> <name pos:start="37:25" pos:end="37:37">NELLY_SAMPLES</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:38"><expr pos:start="39:5" pos:end="39:37"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:9">avctx</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:16">delay</name></name>      <operator pos:start="39:23" pos:end="39:23">=</operator> <name pos:start="39:25" pos:end="39:37">NELLY_BUF_LEN</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><call pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:20">ff_af_queue_init</name><argument_list pos:start="41:21" pos:end="41:36">(<argument pos:start="41:22" pos:end="41:26"><expr pos:start="41:22" pos:end="41:26"><name pos:start="41:22" pos:end="41:26">avctx</name></expr></argument>, <argument pos:start="41:29" pos:end="41:35"><expr pos:start="41:29" pos:end="41:35"><operator pos:start="41:29" pos:end="41:29">&amp;</operator><name pos:start="41:30" pos:end="41:35"><name pos:start="41:30" pos:end="41:30">s</name><operator pos:start="41:31" pos:end="41:32">-&gt;</operator><name pos:start="41:33" pos:end="41:35">afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:21"><expr pos:start="43:5" pos:end="43:20"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:5">s</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:12">avctx</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <name pos:start="43:16" pos:end="43:20">avctx</name></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="47:19"><if pos:start="45:5" pos:end="47:19">if <condition pos:start="45:8" pos:end="45:62">(<expr pos:start="45:9" pos:end="45:61"><operator pos:start="45:9" pos:end="45:9">(</operator><name pos:start="45:10" pos:end="45:12">ret</name> <operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:56"><name pos:start="45:16" pos:end="45:27">ff_mdct_init</name><argument_list pos:start="45:28" pos:end="45:56">(<argument pos:start="45:29" pos:end="45:40"><expr pos:start="45:29" pos:end="45:40"><operator pos:start="45:29" pos:end="45:29">&amp;</operator><name pos:start="45:30" pos:end="45:40"><name pos:start="45:30" pos:end="45:30">s</name><operator pos:start="45:31" pos:end="45:32">-&gt;</operator><name pos:start="45:33" pos:end="45:40">mdct_ctx</name></name></expr></argument>, <argument pos:start="45:43" pos:end="45:43"><expr pos:start="45:43" pos:end="45:43"><literal type="number" pos:start="45:43" pos:end="45:43">8</literal></expr></argument>, <argument pos:start="45:46" pos:end="45:46"><expr pos:start="45:46" pos:end="45:46"><literal type="number" pos:start="45:46" pos:end="45:46">0</literal></expr></argument>, <argument pos:start="45:49" pos:end="45:55"><expr pos:start="45:49" pos:end="45:55"><literal type="number" pos:start="45:49" pos:end="45:55">32768.0</literal></expr></argument>)</argument_list></call><operator pos:start="45:57" pos:end="45:57">)</operator> <operator pos:start="45:59" pos:end="45:59">&lt;</operator> <literal type="number" pos:start="45:61" pos:end="45:61">0</literal></expr>)</condition><block type="pseudo" pos:start="47:9" pos:end="47:19"><block_content pos:start="47:9" pos:end="47:19">

        <goto pos:start="47:9" pos:end="47:19">goto <name pos:start="47:14" pos:end="47:18">error</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:36"><expr pos:start="49:5" pos:end="49:35"><call pos:start="49:5" pos:end="49:35"><name pos:start="49:5" pos:end="49:19">ff_dsputil_init</name><argument_list pos:start="49:20" pos:end="49:35">(<argument pos:start="49:21" pos:end="49:27"><expr pos:start="49:21" pos:end="49:27"><operator pos:start="49:21" pos:end="49:21">&amp;</operator><name pos:start="49:22" pos:end="49:27"><name pos:start="49:22" pos:end="49:22">s</name><operator pos:start="49:23" pos:end="49:24">-&gt;</operator><name pos:start="49:25" pos:end="49:27">dsp</name></name></expr></argument>, <argument pos:start="49:30" pos:end="49:34"><expr pos:start="49:30" pos:end="49:34"><name pos:start="49:30" pos:end="49:34">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:33">/* Generate overlap window */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:42"><expr pos:start="55:5" pos:end="55:41"><call pos:start="55:5" pos:end="55:41"><name pos:start="55:5" pos:end="55:23">ff_sine_window_init</name><argument_list pos:start="55:24" pos:end="55:41">(<argument pos:start="55:25" pos:end="55:35"><expr pos:start="55:25" pos:end="55:35"><name pos:start="55:25" pos:end="55:35">ff_sine_128</name></expr></argument>, <argument pos:start="55:38" pos:end="55:40"><expr pos:start="55:38" pos:end="55:40"><literal type="number" pos:start="55:38" pos:end="55:40">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="59:69">for <control pos:start="57:9" pos:end="57:40">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:35"><expr pos:start="57:17" pos:end="57:34"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:34">POW_TABLE_SIZE</name></expr>;</condition> <incr pos:start="57:37" pos:end="57:39"><expr pos:start="57:37" pos:end="57:39"><name pos:start="57:37" pos:end="57:37">i</name><operator pos:start="57:38" pos:end="57:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="59:9" pos:end="59:69"><block_content pos:start="59:9" pos:end="59:69">

        <expr_stmt pos:start="59:9" pos:end="59:69"><expr pos:start="59:9" pos:end="59:68"><name pos:start="59:9" pos:end="59:20"><name pos:start="59:9" pos:end="59:17">pow_table</name><index pos:start="59:18" pos:end="59:20">[<expr pos:start="59:19" pos:end="59:19"><name pos:start="59:19" pos:end="59:19">i</name></expr>]</index></name> <operator pos:start="59:22" pos:end="59:22">=</operator> <operator pos:start="59:24" pos:end="59:24">-</operator><call pos:start="59:25" pos:end="59:68"><name pos:start="59:25" pos:end="59:27">pow</name><argument_list pos:start="59:28" pos:end="59:68">(<argument pos:start="59:29" pos:end="59:29"><expr pos:start="59:29" pos:end="59:29"><literal type="number" pos:start="59:29" pos:end="59:29">2</literal></expr></argument>, <argument pos:start="59:32" pos:end="59:67"><expr pos:start="59:32" pos:end="59:67"><operator pos:start="59:32" pos:end="59:32">-</operator><name pos:start="59:33" pos:end="59:33">i</name> <operator pos:start="59:35" pos:end="59:35">/</operator> <literal type="number" pos:start="59:37" pos:end="59:44">2048.0</literal> <operator pos:start="59:44" pos:end="59:44">-</operator> <literal type="number" pos:start="59:46" pos:end="59:50">3.0</literal> <operator pos:start="59:50" pos:end="59:50">+</operator> <name pos:start="59:52" pos:end="59:67">POW_TABLE_OFFSET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <if_stmt pos:start="63:5" pos:end="82:0"><if pos:start="63:5" pos:end="82:0">if <condition pos:start="63:8" pos:end="63:26">(<expr pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:25"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:16">avctx</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:25">trellis</name></name></expr>)</condition> <block pos:start="63:28" pos:end="82:0">{<block_content pos:start="65:9" pos:end="75:9">

        <expr_stmt pos:start="65:9" pos:end="65:70"><expr pos:start="65:9" pos:end="65:69"><name pos:start="65:9" pos:end="65:14"><name pos:start="65:9" pos:end="65:9">s</name><operator pos:start="65:10" pos:end="65:11">-&gt;</operator><name pos:start="65:12" pos:end="65:14">opt</name></name>  <operator pos:start="65:17" pos:end="65:17">=</operator> <call pos:start="65:19" pos:end="65:69"><name pos:start="65:19" pos:end="65:27">av_malloc</name><argument_list pos:start="65:28" pos:end="65:69">(<argument pos:start="65:29" pos:end="65:68"><expr pos:start="65:29" pos:end="65:68"><name pos:start="65:29" pos:end="65:39">NELLY_BANDS</name> <operator pos:start="65:41" pos:end="65:41">*</operator> <name pos:start="65:43" pos:end="65:50">OPT_SIZE</name> <operator pos:start="65:52" pos:end="65:52">*</operator> <sizeof pos:start="65:54" pos:end="65:68">sizeof<argument_list pos:start="65:60" pos:end="65:68">(<argument pos:start="65:61" pos:end="65:65"><expr pos:start="65:61" pos:end="65:65"><name pos:start="65:61" pos:end="65:65">float</name></expr></argument>  )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:70"><expr pos:start="67:9" pos:end="67:69"><name pos:start="67:9" pos:end="67:15"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:15">path</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:69"><name pos:start="67:19" pos:end="67:27">av_malloc</name><argument_list pos:start="67:28" pos:end="67:69">(<argument pos:start="67:29" pos:end="67:68"><expr pos:start="67:29" pos:end="67:68"><name pos:start="67:29" pos:end="67:39">NELLY_BANDS</name> <operator pos:start="67:41" pos:end="67:41">*</operator> <name pos:start="67:43" pos:end="67:50">OPT_SIZE</name> <operator pos:start="67:52" pos:end="67:52">*</operator> <sizeof pos:start="67:54" pos:end="67:68">sizeof<argument_list pos:start="67:60" pos:end="67:68">(<argument pos:start="67:61" pos:end="67:67"><expr pos:start="67:61" pos:end="67:67"><name pos:start="67:61" pos:end="67:67">uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="69:9" pos:end="75:9"><if pos:start="69:9" pos:end="75:9">if <condition pos:start="69:12" pos:end="69:32">(<expr pos:start="69:13" pos:end="69:31"><operator pos:start="69:13" pos:end="69:13">!</operator><name pos:start="69:14" pos:end="69:19"><name pos:start="69:14" pos:end="69:14">s</name><operator pos:start="69:15" pos:end="69:16">-&gt;</operator><name pos:start="69:17" pos:end="69:19">opt</name></name> <operator pos:start="69:21" pos:end="69:22">||</operator> <operator pos:start="69:24" pos:end="69:24">!</operator><name pos:start="69:25" pos:end="69:31"><name pos:start="69:25" pos:end="69:25">s</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:31">path</name></name></expr>)</condition> <block pos:start="69:34" pos:end="75:9">{<block_content pos:start="71:13" pos:end="73:23">

            <expr_stmt pos:start="71:13" pos:end="71:34"><expr pos:start="71:13" pos:end="71:33"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:33"><name pos:start="71:19" pos:end="71:25">AVERROR</name><argument_list pos:start="71:26" pos:end="71:33">(<argument pos:start="71:27" pos:end="71:32"><expr pos:start="71:27" pos:end="71:32"><name pos:start="71:27" pos:end="71:32">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="73:13" pos:end="73:23">goto <name pos:start="73:18" pos:end="73:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="81:1" pos:end="81:27">#<cpp:directive pos:start="81:2" pos:end="81:3">if</cpp:directive> <expr pos:start="81:5" pos:end="81:27"><name pos:start="81:5" pos:end="81:27">FF_API_OLD_ENCODE_AUDIO</name></expr></cpp:if>

    <expr_stmt pos:start="83:5" pos:end="83:47"><expr pos:start="83:5" pos:end="83:46"><name pos:start="83:5" pos:end="83:22"><name pos:start="83:5" pos:end="83:9">avctx</name><operator pos:start="83:10" pos:end="83:11">-&gt;</operator><name pos:start="83:12" pos:end="83:22">coded_frame</name></name> <operator pos:start="83:24" pos:end="83:24">=</operator> <call pos:start="83:26" pos:end="83:46"><name pos:start="83:26" pos:end="83:44">avcodec_alloc_frame</name><argument_list pos:start="83:45" pos:end="83:46">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="94:0"><if pos:start="85:5" pos:end="94:0">if <condition pos:start="85:8" pos:end="85:28">(<expr pos:start="85:9" pos:end="85:27"><operator pos:start="85:9" pos:end="85:9">!</operator><name pos:start="85:10" pos:end="85:27"><name pos:start="85:10" pos:end="85:14">avctx</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:27">coded_frame</name></name></expr>)</condition> <block pos:start="85:30" pos:end="94:0">{<block_content pos:start="87:9" pos:end="89:19">

        <expr_stmt pos:start="87:9" pos:end="87:30"><expr pos:start="87:9" pos:end="87:29"><name pos:start="87:9" pos:end="87:11">ret</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:29"><name pos:start="87:15" pos:end="87:21">AVERROR</name><argument_list pos:start="87:22" pos:end="87:29">(<argument pos:start="87:23" pos:end="87:28"><expr pos:start="87:23" pos:end="87:28"><name pos:start="87:23" pos:end="87:28">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="89:9" pos:end="89:19">goto <name pos:start="89:14" pos:end="89:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="93:1" pos:end="93:6">#<cpp:directive pos:start="93:2" pos:end="93:6">endif</cpp:directive></cpp:endif>



    <return pos:start="97:5" pos:end="97:13">return <expr pos:start="97:12" pos:end="97:12"><literal type="number" pos:start="97:12" pos:end="97:12">0</literal></expr>;</return>

<label pos:start="99:1" pos:end="99:6"><name pos:start="99:1" pos:end="99:5">error</name>:</label>

    <expr_stmt pos:start="101:5" pos:end="101:22"><expr pos:start="101:5" pos:end="101:21"><call pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:14">encode_end</name><argument_list pos:start="101:15" pos:end="101:21">(<argument pos:start="101:16" pos:end="101:20"><expr pos:start="101:16" pos:end="101:20"><name pos:start="101:16" pos:end="101:20">avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="103:5" pos:end="103:15">return <expr pos:start="103:12" pos:end="103:14"><name pos:start="103:12" pos:end="103:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
