<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11374.c" pos:tabs="8"><function pos:start="1:1" pos:end="201:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">TRBCCode</name></type> <name pos:start="1:17" pos:end="1:33">xhci_address_slot</name><parameter_list pos:start="1:34" pos:end="3:59">(<parameter pos:start="1:35" pos:end="1:49"><decl pos:start="1:35" pos:end="1:49"><type pos:start="1:35" pos:end="1:49"><name pos:start="1:35" pos:end="1:43">XHCIState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">xhci</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:70"><decl pos:start="1:52" pos:end="1:70"><type pos:start="1:52" pos:end="1:70"><name pos:start="1:52" pos:end="1:59">unsigned</name> <name pos:start="1:61" pos:end="1:63">int</name></type> <name pos:start="1:65" pos:end="1:70">slotid</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:48"><decl pos:start="3:35" pos:end="3:48"><type pos:start="3:35" pos:end="3:48"><name pos:start="3:35" pos:end="3:42">uint64_t</name></type> <name pos:start="3:44" pos:end="3:48">pictx</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:58"><decl pos:start="3:51" pos:end="3:58"><type pos:start="3:51" pos:end="3:58"><name pos:start="3:51" pos:end="3:54">bool</name></type> <name pos:start="3:56" pos:end="3:58">bsr</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="201:1">{<block_content pos:start="7:5" pos:end="199:15">

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">XHCISlot</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:18">slot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">USBPort</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:18">uport</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:13">USBDevice</name> <modifier pos:start="11:15" pos:end="11:15">*</modifier></type><name pos:start="11:16" pos:end="11:18">dev</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:34"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">dma_addr_t</name></type> <name pos:start="13:16" pos:end="13:19">ictx</name></decl>, <decl pos:start="13:22" pos:end="13:25"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:22" pos:end="13:25">octx</name></decl>, <decl pos:start="13:28" pos:end="13:33"><type ref="prev" pos:start="13:5" pos:end="13:14"/><name pos:start="13:28" pos:end="13:33">dcbaap</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:18">poctx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:24"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:24"><name pos:start="17:14" pos:end="17:21">ictl_ctx</name><index pos:start="17:22" pos:end="17:24">[<expr pos:start="17:23" pos:end="17:23"><literal type="number" pos:start="17:23" pos:end="17:23">2</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:25"><decl pos:start="19:5" pos:end="19:24"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:24"><name pos:start="19:14" pos:end="19:21">slot_ctx</name><index pos:start="19:22" pos:end="19:24">[<expr pos:start="19:23" pos:end="19:23"><literal type="number" pos:start="19:23" pos:end="19:23">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:24"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint32_t</name></type> <name pos:start="21:14" pos:end="21:23"><name pos:start="21:14" pos:end="21:20">ep0_ctx</name><index pos:start="21:21" pos:end="21:23">[<expr pos:start="21:22" pos:end="21:22"><literal type="number" pos:start="21:22" pos:end="21:22">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:17"><decl pos:start="25:5" pos:end="25:16"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">TRBCCode</name></type> <name pos:start="25:14" pos:end="25:16">res</name></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:52"><expr pos:start="29:5" pos:end="29:51"><call pos:start="29:5" pos:end="29:51"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:51">(<argument pos:start="29:12" pos:end="29:50"><expr pos:start="29:12" pos:end="29:50"><name pos:start="29:12" pos:end="29:17">slotid</name> <operator pos:start="29:19" pos:end="29:20">&gt;=</operator> <literal type="number" pos:start="29:22" pos:end="29:22">1</literal> <operator pos:start="29:24" pos:end="29:25">&amp;&amp;</operator> <name pos:start="29:27" pos:end="29:32">slotid</name> <operator pos:start="29:34" pos:end="29:35">&lt;=</operator> <name pos:start="29:37" pos:end="29:50"><name pos:start="29:37" pos:end="29:40">xhci</name><operator pos:start="29:41" pos:end="29:42">-&gt;</operator><name pos:start="29:43" pos:end="29:50">numslots</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:62"><expr pos:start="33:5" pos:end="33:61"><name pos:start="33:5" pos:end="33:10">dcbaap</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <call pos:start="33:14" pos:end="33:61"><name pos:start="33:14" pos:end="33:24">xhci_addr64</name><argument_list pos:start="33:25" pos:end="33:61">(<argument pos:start="33:26" pos:end="33:41"><expr pos:start="33:26" pos:end="33:41"><name pos:start="33:26" pos:end="33:41"><name pos:start="33:26" pos:end="33:29">xhci</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:41">dcbaap_low</name></name></expr></argument>, <argument pos:start="33:44" pos:end="33:60"><expr pos:start="33:44" pos:end="33:60"><name pos:start="33:44" pos:end="33:60"><name pos:start="33:44" pos:end="33:47">xhci</name><operator pos:start="33:48" pos:end="33:49">-&gt;</operator><name pos:start="33:50" pos:end="33:60">dcbaap_high</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:66"><expr pos:start="35:5" pos:end="35:65"><name pos:start="35:5" pos:end="35:9">poctx</name> <operator pos:start="35:11" pos:end="35:11">=</operator> <call pos:start="35:13" pos:end="35:65"><name pos:start="35:13" pos:end="35:26">ldq_le_pci_dma</name><argument_list pos:start="35:27" pos:end="35:65">(<argument pos:start="35:28" pos:end="35:43"><expr pos:start="35:28" pos:end="35:43"><call pos:start="35:28" pos:end="35:43"><name pos:start="35:28" pos:end="35:37">PCI_DEVICE</name><argument_list pos:start="35:38" pos:end="35:43">(<argument pos:start="35:39" pos:end="35:42"><expr pos:start="35:39" pos:end="35:42"><name pos:start="35:39" pos:end="35:42">xhci</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="35:46" pos:end="35:64"><expr pos:start="35:46" pos:end="35:64"><name pos:start="35:46" pos:end="35:51">dcbaap</name> <operator pos:start="35:53" pos:end="35:53">+</operator> <literal type="number" pos:start="35:55" pos:end="35:55">8</literal> <operator pos:start="35:57" pos:end="35:57">*</operator> <name pos:start="35:59" pos:end="35:64">slotid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:30"><expr pos:start="37:5" pos:end="37:29"><name pos:start="37:5" pos:end="37:8">ictx</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <call pos:start="37:12" pos:end="37:29"><name pos:start="37:12" pos:end="37:22">xhci_mask64</name><argument_list pos:start="37:23" pos:end="37:29">(<argument pos:start="37:24" pos:end="37:28"><expr pos:start="37:24" pos:end="37:28"><name pos:start="37:24" pos:end="37:28">pictx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:30"><expr pos:start="39:5" pos:end="39:29"><name pos:start="39:5" pos:end="39:8">octx</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:29"><name pos:start="39:12" pos:end="39:22">xhci_mask64</name><argument_list pos:start="39:23" pos:end="39:29">(<argument pos:start="39:24" pos:end="39:28"><expr pos:start="39:24" pos:end="39:28"><name pos:start="39:24" pos:end="39:28">poctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:61"><expr pos:start="43:5" pos:end="43:60"><call pos:start="43:5" pos:end="43:60"><name pos:start="43:5" pos:end="43:11">DPRINTF</name><argument_list pos:start="43:12" pos:end="43:60">(<argument pos:start="43:13" pos:end="43:53"><expr pos:start="43:13" pos:end="43:53"><literal type="string" pos:start="43:13" pos:end="43:37">"xhci: input context at "</literal><name pos:start="43:38" pos:end="43:49">DMA_ADDR_FMT</name><literal type="string" pos:start="43:50" pos:end="43:53">"\n"</literal></expr></argument>, <argument pos:start="43:56" pos:end="43:59"><expr pos:start="43:56" pos:end="43:59"><name pos:start="43:56" pos:end="43:59">ictx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:62"><expr pos:start="45:5" pos:end="45:61"><call pos:start="45:5" pos:end="45:61"><name pos:start="45:5" pos:end="45:11">DPRINTF</name><argument_list pos:start="45:12" pos:end="45:61">(<argument pos:start="45:13" pos:end="45:54"><expr pos:start="45:13" pos:end="45:54"><literal type="string" pos:start="45:13" pos:end="45:38">"xhci: output context at "</literal><name pos:start="45:39" pos:end="45:50">DMA_ADDR_FMT</name><literal type="string" pos:start="45:51" pos:end="45:54">"\n"</literal></expr></argument>, <argument pos:start="45:57" pos:end="45:60"><expr pos:start="45:57" pos:end="45:60"><name pos:start="45:57" pos:end="45:60">octx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:63"><expr pos:start="49:5" pos:end="49:62"><call pos:start="49:5" pos:end="49:62"><name pos:start="49:5" pos:end="49:22">xhci_dma_read_u32s</name><argument_list pos:start="49:23" pos:end="49:62">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">xhci</name></expr></argument>, <argument pos:start="49:30" pos:end="49:33"><expr pos:start="49:30" pos:end="49:33"><name pos:start="49:30" pos:end="49:33">ictx</name></expr></argument>, <argument pos:start="49:36" pos:end="49:43"><expr pos:start="49:36" pos:end="49:43"><name pos:start="49:36" pos:end="49:43">ictl_ctx</name></expr></argument>, <argument pos:start="49:46" pos:end="49:61"><expr pos:start="49:46" pos:end="49:61"><sizeof pos:start="49:46" pos:end="49:61">sizeof<argument_list pos:start="49:52" pos:end="49:61">(<argument pos:start="49:53" pos:end="49:60"><expr pos:start="49:53" pos:end="49:60"><name pos:start="49:53" pos:end="49:60">ictl_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:49">(<expr pos:start="53:9" pos:end="53:48"><name pos:start="53:9" pos:end="53:19"><name pos:start="53:9" pos:end="53:16">ictl_ctx</name><index pos:start="53:17" pos:end="53:19">[<expr pos:start="53:18" pos:end="53:18"><literal type="number" pos:start="53:18" pos:end="53:18">0</literal></expr>]</index></name> <operator pos:start="53:21" pos:end="53:22">!=</operator> <literal type="number" pos:start="53:24" pos:end="53:26">0x0</literal> <operator pos:start="53:28" pos:end="53:29">||</operator> <name pos:start="53:31" pos:end="53:41"><name pos:start="53:31" pos:end="53:38">ictl_ctx</name><index pos:start="53:39" pos:end="53:41">[<expr pos:start="53:40" pos:end="53:40"><literal type="number" pos:start="53:40" pos:end="53:40">1</literal></expr>]</index></name> <operator pos:start="53:43" pos:end="53:44">!=</operator> <literal type="number" pos:start="53:46" pos:end="53:48">0x3</literal></expr>)</condition> <block pos:start="53:51" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:28">

        <expr_stmt pos:start="55:9" pos:end="57:42"><expr pos:start="55:9" pos:end="57:41"><call pos:start="55:9" pos:end="57:41"><name pos:start="55:9" pos:end="55:15">fprintf</name><argument_list pos:start="55:16" pos:end="57:41">(<argument pos:start="55:17" pos:end="55:22"><expr pos:start="55:17" pos:end="55:22"><name pos:start="55:17" pos:end="55:22">stderr</name></expr></argument>, <argument pos:start="55:25" pos:end="55:73"><expr pos:start="55:25" pos:end="55:73"><literal type="string" pos:start="55:25" pos:end="55:73">"xhci: invalid input context control %08x %08x\n"</literal></expr></argument>,

                <argument pos:start="57:17" pos:end="57:27"><expr pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:27"><name pos:start="57:17" pos:end="57:24">ictl_ctx</name><index pos:start="57:25" pos:end="57:27">[<expr pos:start="57:26" pos:end="57:26"><literal type="number" pos:start="57:26" pos:end="57:26">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="57:30" pos:end="57:40"><expr pos:start="57:30" pos:end="57:40"><name pos:start="57:30" pos:end="57:40"><name pos:start="57:30" pos:end="57:37">ictl_ctx</name><index pos:start="57:38" pos:end="57:40">[<expr pos:start="57:39" pos:end="57:39"><literal type="number" pos:start="57:39" pos:end="57:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:28">return <expr pos:start="59:16" pos:end="59:27"><name pos:start="59:16" pos:end="59:27">CC_TRB_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:66"><expr pos:start="65:5" pos:end="65:65"><call pos:start="65:5" pos:end="65:65"><name pos:start="65:5" pos:end="65:22">xhci_dma_read_u32s</name><argument_list pos:start="65:23" pos:end="65:65">(<argument pos:start="65:24" pos:end="65:27"><expr pos:start="65:24" pos:end="65:27"><name pos:start="65:24" pos:end="65:27">xhci</name></expr></argument>, <argument pos:start="65:30" pos:end="65:36"><expr pos:start="65:30" pos:end="65:36"><name pos:start="65:30" pos:end="65:33">ictx</name><operator pos:start="65:34" pos:end="65:34">+</operator><literal type="number" pos:start="65:35" pos:end="65:36">32</literal></expr></argument>, <argument pos:start="65:39" pos:end="65:46"><expr pos:start="65:39" pos:end="65:46"><name pos:start="65:39" pos:end="65:46">slot_ctx</name></expr></argument>, <argument pos:start="65:49" pos:end="65:64"><expr pos:start="65:49" pos:end="65:64"><sizeof pos:start="65:49" pos:end="65:64">sizeof<argument_list pos:start="65:55" pos:end="65:64">(<argument pos:start="65:56" pos:end="65:63"><expr pos:start="65:56" pos:end="65:63"><name pos:start="65:56" pos:end="65:63">slot_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:64"><expr pos:start="67:5" pos:end="67:63"><call pos:start="67:5" pos:end="67:63"><name pos:start="67:5" pos:end="67:22">xhci_dma_read_u32s</name><argument_list pos:start="67:23" pos:end="67:63">(<argument pos:start="67:24" pos:end="67:27"><expr pos:start="67:24" pos:end="67:27"><name pos:start="67:24" pos:end="67:27">xhci</name></expr></argument>, <argument pos:start="67:30" pos:end="67:36"><expr pos:start="67:30" pos:end="67:36"><name pos:start="67:30" pos:end="67:33">ictx</name><operator pos:start="67:34" pos:end="67:34">+</operator><literal type="number" pos:start="67:35" pos:end="67:36">64</literal></expr></argument>, <argument pos:start="67:39" pos:end="67:45"><expr pos:start="67:39" pos:end="67:45"><name pos:start="67:39" pos:end="67:45">ep0_ctx</name></expr></argument>, <argument pos:start="67:48" pos:end="67:62"><expr pos:start="67:48" pos:end="67:62"><sizeof pos:start="67:48" pos:end="67:62">sizeof<argument_list pos:start="67:54" pos:end="67:62">(<argument pos:start="67:55" pos:end="67:61"><expr pos:start="67:55" pos:end="67:61"><name pos:start="67:55" pos:end="67:61">ep0_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="71:5" pos:end="73:64"><expr pos:start="71:5" pos:end="73:63"><call pos:start="71:5" pos:end="73:63"><name pos:start="71:5" pos:end="71:11">DPRINTF</name><argument_list pos:start="71:12" pos:end="73:63">(<argument pos:start="71:13" pos:end="71:61"><expr pos:start="71:13" pos:end="71:61"><literal type="string" pos:start="71:13" pos:end="71:61">"xhci: input slot context: %08x %08x %08x %08x\n"</literal></expr></argument>,

            <argument pos:start="73:13" pos:end="73:23"><expr pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:23"><name pos:start="73:13" pos:end="73:20">slot_ctx</name><index pos:start="73:21" pos:end="73:23">[<expr pos:start="73:22" pos:end="73:22"><literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:26" pos:end="73:36"><expr pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:36"><name pos:start="73:26" pos:end="73:33">slot_ctx</name><index pos:start="73:34" pos:end="73:36">[<expr pos:start="73:35" pos:end="73:35"><literal type="number" pos:start="73:35" pos:end="73:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:39" pos:end="73:49"><expr pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:49"><name pos:start="73:39" pos:end="73:46">slot_ctx</name><index pos:start="73:47" pos:end="73:49">[<expr pos:start="73:48" pos:end="73:48"><literal type="number" pos:start="73:48" pos:end="73:48">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="73:52" pos:end="73:62"><expr pos:start="73:52" pos:end="73:62"><name pos:start="73:52" pos:end="73:62"><name pos:start="73:52" pos:end="73:59">slot_ctx</name><index pos:start="73:60" pos:end="73:62">[<expr pos:start="73:61" pos:end="73:61"><literal type="number" pos:start="73:61" pos:end="73:61">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="77:5" pos:end="79:72"><expr pos:start="77:5" pos:end="79:71"><call pos:start="77:5" pos:end="79:71"><name pos:start="77:5" pos:end="77:11">DPRINTF</name><argument_list pos:start="77:12" pos:end="79:71">(<argument pos:start="77:13" pos:end="77:65"><expr pos:start="77:13" pos:end="77:65"><literal type="string" pos:start="77:13" pos:end="77:65">"xhci: input ep0 context: %08x %08x %08x %08x %08x\n"</literal></expr></argument>,

            <argument pos:start="79:13" pos:end="79:22"><expr pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:22"><name pos:start="79:13" pos:end="79:19">ep0_ctx</name><index pos:start="79:20" pos:end="79:22">[<expr pos:start="79:21" pos:end="79:21"><literal type="number" pos:start="79:21" pos:end="79:21">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:25" pos:end="79:34"><expr pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:34"><name pos:start="79:25" pos:end="79:31">ep0_ctx</name><index pos:start="79:32" pos:end="79:34">[<expr pos:start="79:33" pos:end="79:33"><literal type="number" pos:start="79:33" pos:end="79:33">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:37" pos:end="79:46"><expr pos:start="79:37" pos:end="79:46"><name pos:start="79:37" pos:end="79:46"><name pos:start="79:37" pos:end="79:43">ep0_ctx</name><index pos:start="79:44" pos:end="79:46">[<expr pos:start="79:45" pos:end="79:45"><literal type="number" pos:start="79:45" pos:end="79:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:49" pos:end="79:58"><expr pos:start="79:49" pos:end="79:58"><name pos:start="79:49" pos:end="79:58"><name pos:start="79:49" pos:end="79:55">ep0_ctx</name><index pos:start="79:56" pos:end="79:58">[<expr pos:start="79:57" pos:end="79:57"><literal type="number" pos:start="79:57" pos:end="79:57">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="79:61" pos:end="79:70"><expr pos:start="79:61" pos:end="79:70"><name pos:start="79:61" pos:end="79:70"><name pos:start="79:61" pos:end="79:67">ep0_ctx</name><index pos:start="79:68" pos:end="79:70">[<expr pos:start="79:69" pos:end="79:69"><literal type="number" pos:start="79:69" pos:end="79:69">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:46"><expr pos:start="83:5" pos:end="83:45"><name pos:start="83:5" pos:end="83:9">uport</name> <operator pos:start="83:11" pos:end="83:11">=</operator> <call pos:start="83:13" pos:end="83:45"><name pos:start="83:13" pos:end="83:29">xhci_lookup_uport</name><argument_list pos:start="83:30" pos:end="83:45">(<argument pos:start="83:31" pos:end="83:34"><expr pos:start="83:31" pos:end="83:34"><name pos:start="83:31" pos:end="83:34">xhci</name></expr></argument>, <argument pos:start="83:37" pos:end="83:44"><expr pos:start="83:37" pos:end="83:44"><name pos:start="83:37" pos:end="83:44">slot_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:22">(<expr pos:start="85:9" pos:end="85:21"><name pos:start="85:9" pos:end="85:13">uport</name> <operator pos:start="85:15" pos:end="85:16">==</operator> <name pos:start="85:18" pos:end="85:21">NULL</name></expr>)</condition> <block pos:start="85:24" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:28">

        <expr_stmt pos:start="87:9" pos:end="87:50"><expr pos:start="87:9" pos:end="87:49"><call pos:start="87:9" pos:end="87:49"><name pos:start="87:9" pos:end="87:15">fprintf</name><argument_list pos:start="87:16" pos:end="87:49">(<argument pos:start="87:17" pos:end="87:22"><expr pos:start="87:17" pos:end="87:22"><name pos:start="87:17" pos:end="87:22">stderr</name></expr></argument>, <argument pos:start="87:25" pos:end="87:48"><expr pos:start="87:25" pos:end="87:48"><literal type="string" pos:start="87:25" pos:end="87:48">"xhci: port not found\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:28">return <expr pos:start="89:16" pos:end="89:27"><name pos:start="89:16" pos:end="89:27">CC_TRB_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:53"><expr pos:start="93:5" pos:end="93:52"><call pos:start="93:5" pos:end="93:52"><name pos:start="93:5" pos:end="93:31">trace_usb_xhci_slot_address</name><argument_list pos:start="93:32" pos:end="93:52">(<argument pos:start="93:33" pos:end="93:38"><expr pos:start="93:33" pos:end="93:38"><name pos:start="93:33" pos:end="93:38">slotid</name></expr></argument>, <argument pos:start="93:41" pos:end="93:51"><expr pos:start="93:41" pos:end="93:51"><name pos:start="93:41" pos:end="93:51"><name pos:start="93:41" pos:end="93:45">uport</name><operator pos:start="93:46" pos:end="93:47">-&gt;</operator><name pos:start="93:48" pos:end="93:51">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:21"><expr pos:start="97:5" pos:end="97:20"><name pos:start="97:5" pos:end="97:7">dev</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <name pos:start="97:11" pos:end="97:20"><name pos:start="97:11" pos:end="97:15">uport</name><operator pos:start="97:16" pos:end="97:17">-&gt;</operator><name pos:start="97:18" pos:end="97:20">dev</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="105:5"><if pos:start="99:5" pos:end="105:5">if <condition pos:start="99:8" pos:end="99:13">(<expr pos:start="99:9" pos:end="99:12"><operator pos:start="99:9" pos:end="99:9">!</operator><name pos:start="99:10" pos:end="99:12">dev</name></expr>)</condition> <block pos:start="99:15" pos:end="105:5">{<block_content pos:start="101:9" pos:end="103:40">

        <expr_stmt pos:start="101:9" pos:end="101:70"><expr pos:start="101:9" pos:end="101:69"><call pos:start="101:9" pos:end="101:69"><name pos:start="101:9" pos:end="101:15">fprintf</name><argument_list pos:start="101:16" pos:end="101:69">(<argument pos:start="101:17" pos:end="101:22"><expr pos:start="101:17" pos:end="101:22"><name pos:start="101:17" pos:end="101:22">stderr</name></expr></argument>, <argument pos:start="101:25" pos:end="101:55"><expr pos:start="101:25" pos:end="101:55"><literal type="string" pos:start="101:25" pos:end="101:55">"xhci: port %s not connected\n"</literal></expr></argument>, <argument pos:start="101:58" pos:end="101:68"><expr pos:start="101:58" pos:end="101:68"><name pos:start="101:58" pos:end="101:68"><name pos:start="101:58" pos:end="101:62">uport</name><operator pos:start="101:63" pos:end="101:64">-&gt;</operator><name pos:start="101:65" pos:end="101:68">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="103:9" pos:end="103:40">return <expr pos:start="103:16" pos:end="103:39"><name pos:start="103:16" pos:end="103:39">CC_USB_TRANSACTION_ERROR</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="109:5" pos:end="127:5">for <control pos:start="109:9" pos:end="109:40">(<init pos:start="109:10" pos:end="109:15"><expr pos:start="109:10" pos:end="109:14"><name pos:start="109:10" pos:end="109:10">i</name> <operator pos:start="109:12" pos:end="109:12">=</operator> <literal type="number" pos:start="109:14" pos:end="109:14">0</literal></expr>;</init> <condition pos:start="109:17" pos:end="109:35"><expr pos:start="109:17" pos:end="109:34"><name pos:start="109:17" pos:end="109:17">i</name> <operator pos:start="109:19" pos:end="109:19">&lt;</operator> <name pos:start="109:21" pos:end="109:34"><name pos:start="109:21" pos:end="109:24">xhci</name><operator pos:start="109:25" pos:end="109:26">-&gt;</operator><name pos:start="109:27" pos:end="109:34">numslots</name></name></expr>;</condition> <incr pos:start="109:37" pos:end="109:39"><expr pos:start="109:37" pos:end="109:39"><name pos:start="109:37" pos:end="109:37">i</name><operator pos:start="109:38" pos:end="109:39">++</operator></expr></incr>)</control> <block pos:start="109:42" pos:end="127:5">{<block_content pos:start="111:9" pos:end="125:9">

        <if_stmt pos:start="111:9" pos:end="115:9"><if pos:start="111:9" pos:end="115:9">if <condition pos:start="111:12" pos:end="111:26">(<expr pos:start="111:13" pos:end="111:25"><name pos:start="111:13" pos:end="111:13">i</name> <operator pos:start="111:15" pos:end="111:16">==</operator> <name pos:start="111:18" pos:end="111:23">slotid</name><operator pos:start="111:24" pos:end="111:24">-</operator><literal type="number" pos:start="111:25" pos:end="111:25">1</literal></expr>)</condition> <block pos:start="111:28" pos:end="115:9">{<block_content pos:start="113:13" pos:end="113:21">

            <continue pos:start="113:13" pos:end="113:21">continue;</continue>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="117:9" pos:end="125:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:42">(<expr pos:start="117:13" pos:end="117:41"><name pos:start="117:13" pos:end="117:26"><name pos:start="117:13" pos:end="117:16">xhci</name><operator pos:start="117:17" pos:end="117:18">-&gt;</operator><name pos:start="117:19" pos:end="117:23">slots</name><index pos:start="117:24" pos:end="117:26">[<expr pos:start="117:25" pos:end="117:25"><name pos:start="117:25" pos:end="117:25">i</name></expr>]</index></name><operator pos:start="117:27" pos:end="117:27">.</operator><name pos:start="117:28" pos:end="117:32">uport</name> <operator pos:start="117:34" pos:end="117:35">==</operator> <name pos:start="117:37" pos:end="117:41">uport</name></expr>)</condition> <block pos:start="117:44" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:32">

            <expr_stmt pos:start="119:13" pos:end="121:38"><expr pos:start="119:13" pos:end="121:37"><call pos:start="119:13" pos:end="121:37"><name pos:start="119:13" pos:end="119:19">fprintf</name><argument_list pos:start="119:20" pos:end="121:37">(<argument pos:start="119:21" pos:end="119:26"><expr pos:start="119:21" pos:end="119:26"><name pos:start="119:21" pos:end="119:26">stderr</name></expr></argument>, <argument pos:start="119:29" pos:end="119:73"><expr pos:start="119:29" pos:end="119:73"><literal type="string" pos:start="119:29" pos:end="119:73">"xhci: port %s already assigned to slot %d\n"</literal></expr></argument>,

                    <argument pos:start="121:21" pos:end="121:31"><expr pos:start="121:21" pos:end="121:31"><name pos:start="121:21" pos:end="121:31"><name pos:start="121:21" pos:end="121:25">uport</name><operator pos:start="121:26" pos:end="121:27">-&gt;</operator><name pos:start="121:28" pos:end="121:31">path</name></name></expr></argument>, <argument pos:start="121:34" pos:end="121:36"><expr pos:start="121:34" pos:end="121:36"><name pos:start="121:34" pos:end="121:34">i</name><operator pos:start="121:35" pos:end="121:35">+</operator><literal type="number" pos:start="121:36" pos:end="121:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="123:13" pos:end="123:32">return <expr pos:start="123:20" pos:end="123:31"><name pos:start="123:20" pos:end="123:31">CC_TRB_ERROR</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="131:5" pos:end="131:34"><expr pos:start="131:5" pos:end="131:33"><name pos:start="131:5" pos:end="131:8">slot</name> <operator pos:start="131:10" pos:end="131:10">=</operator> <operator pos:start="131:12" pos:end="131:12">&amp;</operator><name pos:start="131:13" pos:end="131:33"><name pos:start="131:13" pos:end="131:16">xhci</name><operator pos:start="131:17" pos:end="131:18">-&gt;</operator><name pos:start="131:19" pos:end="131:23">slots</name><index pos:start="131:24" pos:end="131:33">[<expr pos:start="131:25" pos:end="131:32"><name pos:start="131:25" pos:end="131:30">slotid</name><operator pos:start="131:31" pos:end="131:31">-</operator><literal type="number" pos:start="131:32" pos:end="131:32">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="133:5" pos:end="133:24"><expr pos:start="133:5" pos:end="133:23"><name pos:start="133:5" pos:end="133:15"><name pos:start="133:5" pos:end="133:8">slot</name><operator pos:start="133:9" pos:end="133:10">-&gt;</operator><name pos:start="133:11" pos:end="133:15">uport</name></name> <operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:23">uport</name></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:21"><expr pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:13"><name pos:start="135:5" pos:end="135:8">slot</name><operator pos:start="135:9" pos:end="135:10">-&gt;</operator><name pos:start="135:11" pos:end="135:13">ctx</name></name> <operator pos:start="135:15" pos:end="135:15">=</operator> <name pos:start="135:17" pos:end="135:20">octx</name></expr>;</expr_stmt>



    <if_stmt pos:start="139:5" pos:end="173:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:12">(<expr pos:start="139:9" pos:end="139:11"><name pos:start="139:9" pos:end="139:11">bsr</name></expr>)</condition> <block pos:start="139:14" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:55">

        <expr_stmt pos:start="141:9" pos:end="141:55"><expr pos:start="141:9" pos:end="141:54"><name pos:start="141:9" pos:end="141:19"><name pos:start="141:9" pos:end="141:16">slot_ctx</name><index pos:start="141:17" pos:end="141:19">[<expr pos:start="141:18" pos:end="141:18"><literal type="number" pos:start="141:18" pos:end="141:18">3</literal></expr>]</index></name> <operator pos:start="141:21" pos:end="141:21">=</operator> <name pos:start="141:23" pos:end="141:34">SLOT_DEFAULT</name> <operator pos:start="141:36" pos:end="141:37">&lt;&lt;</operator> <name pos:start="141:39" pos:end="141:54">SLOT_STATE_SHIFT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="143:7" pos:end="173:5">else <block pos:start="143:12" pos:end="173:5">{<block_content pos:start="145:9" pos:end="171:42">

        <decl_stmt pos:start="145:9" pos:end="145:20"><decl pos:start="145:9" pos:end="145:19"><type pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:17">USBPacket</name></type> <name pos:start="145:19" pos:end="145:19">p</name></decl>;</decl_stmt>

        <decl_stmt pos:start="147:9" pos:end="147:23"><decl pos:start="147:9" pos:end="147:22"><type pos:start="147:9" pos:end="147:15"><name pos:start="147:9" pos:end="147:15">uint8_t</name></type> <name pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:19">buf</name><index pos:start="147:20" pos:end="147:22">[<expr pos:start="147:21" pos:end="147:21"><literal type="number" pos:start="147:21" pos:end="147:21">1</literal></expr>]</index></name></decl>;</decl_stmt>



        <expr_stmt pos:start="151:9" pos:end="151:68"><expr pos:start="151:9" pos:end="151:67"><name pos:start="151:9" pos:end="151:19"><name pos:start="151:9" pos:end="151:16">slot_ctx</name><index pos:start="151:17" pos:end="151:19">[<expr pos:start="151:18" pos:end="151:18"><literal type="number" pos:start="151:18" pos:end="151:18">3</literal></expr>]</index></name> <operator pos:start="151:21" pos:end="151:21">=</operator> <operator pos:start="151:23" pos:end="151:23">(</operator><name pos:start="151:24" pos:end="151:37">SLOT_ADDRESSED</name> <operator pos:start="151:39" pos:end="151:40">&lt;&lt;</operator> <name pos:start="151:42" pos:end="151:57">SLOT_STATE_SHIFT</name><operator pos:start="151:58" pos:end="151:58">)</operator> <operator pos:start="151:60" pos:end="151:60">|</operator> <name pos:start="151:62" pos:end="151:67">slotid</name></expr>;</expr_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:30"><expr pos:start="153:9" pos:end="153:29"><call pos:start="153:9" pos:end="153:29"><name pos:start="153:9" pos:end="153:24">usb_device_reset</name><argument_list pos:start="153:25" pos:end="153:29">(<argument pos:start="153:26" pos:end="153:28"><expr pos:start="153:26" pos:end="153:28"><name pos:start="153:26" pos:end="153:28">dev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="155:9" pos:end="155:33"><expr pos:start="155:9" pos:end="155:32"><call pos:start="155:9" pos:end="155:32"><name pos:start="155:9" pos:end="155:14">memset</name><argument_list pos:start="155:15" pos:end="155:32">(<argument pos:start="155:16" pos:end="155:17"><expr pos:start="155:16" pos:end="155:17"><operator pos:start="155:16" pos:end="155:16">&amp;</operator><name pos:start="155:17" pos:end="155:17">p</name></expr></argument>, <argument pos:start="155:20" pos:end="155:20"><expr pos:start="155:20" pos:end="155:20"><literal type="number" pos:start="155:20" pos:end="155:20">0</literal></expr></argument>, <argument pos:start="155:23" pos:end="155:31"><expr pos:start="155:23" pos:end="155:31"><sizeof pos:start="155:23" pos:end="155:31">sizeof<argument_list pos:start="155:29" pos:end="155:31">(<argument pos:start="155:30" pos:end="155:30"><expr pos:start="155:30" pos:end="155:30"><name pos:start="155:30" pos:end="155:30">p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="157:48"><expr pos:start="157:9" pos:end="157:47"><call pos:start="157:9" pos:end="157:47"><name pos:start="157:9" pos:end="157:25">usb_packet_addbuf</name><argument_list pos:start="157:26" pos:end="157:47">(<argument pos:start="157:27" pos:end="157:28"><expr pos:start="157:27" pos:end="157:28"><operator pos:start="157:27" pos:end="157:27">&amp;</operator><name pos:start="157:28" pos:end="157:28">p</name></expr></argument>, <argument pos:start="157:31" pos:end="157:33"><expr pos:start="157:31" pos:end="157:33"><name pos:start="157:31" pos:end="157:33">buf</name></expr></argument>, <argument pos:start="157:36" pos:end="157:46"><expr pos:start="157:36" pos:end="157:46"><sizeof pos:start="157:36" pos:end="157:46">sizeof<argument_list pos:start="157:42" pos:end="157:46">(<argument pos:start="157:43" pos:end="157:45"><expr pos:start="157:43" pos:end="157:45"><name pos:start="157:43" pos:end="157:45">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="163:42"><expr pos:start="159:9" pos:end="163:41"><call pos:start="159:9" pos:end="163:41"><name pos:start="159:9" pos:end="159:24">usb_packet_setup</name><argument_list pos:start="159:25" pos:end="163:41">(<argument pos:start="159:26" pos:end="159:27"><expr pos:start="159:26" pos:end="159:27"><operator pos:start="159:26" pos:end="159:26">&amp;</operator><name pos:start="159:27" pos:end="159:27">p</name></expr></argument>, <argument pos:start="159:30" pos:end="159:42"><expr pos:start="159:30" pos:end="159:42"><name pos:start="159:30" pos:end="159:42">USB_TOKEN_OUT</name></expr></argument>,

                         <argument pos:start="161:26" pos:end="161:58"><expr pos:start="161:26" pos:end="161:58"><call pos:start="161:26" pos:end="161:58"><name pos:start="161:26" pos:end="161:35">usb_ep_get</name><argument_list pos:start="161:36" pos:end="161:58">(<argument pos:start="161:37" pos:end="161:39"><expr pos:start="161:37" pos:end="161:39"><name pos:start="161:37" pos:end="161:39">dev</name></expr></argument>, <argument pos:start="161:42" pos:end="161:54"><expr pos:start="161:42" pos:end="161:54"><name pos:start="161:42" pos:end="161:54">USB_TOKEN_OUT</name></expr></argument>, <argument pos:start="161:57" pos:end="161:57"><expr pos:start="161:57" pos:end="161:57"><literal type="number" pos:start="161:57" pos:end="161:57">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="161:61" pos:end="161:61"><expr pos:start="161:61" pos:end="161:61"><literal type="number" pos:start="161:61" pos:end="161:61">0</literal></expr></argument>,

                         <argument pos:start="163:26" pos:end="163:26"><expr pos:start="163:26" pos:end="163:26"><literal type="number" pos:start="163:26" pos:end="163:26">0</literal></expr></argument>, <argument pos:start="163:29" pos:end="163:33"><expr pos:start="163:29" pos:end="163:33"><name pos:start="163:29" pos:end="163:33">false</name></expr></argument>, <argument pos:start="163:36" pos:end="163:40"><expr pos:start="163:36" pos:end="163:40"><name pos:start="163:36" pos:end="163:40">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="165:9" pos:end="169:54"><expr pos:start="165:9" pos:end="169:53"><call pos:start="165:9" pos:end="169:53"><name pos:start="165:9" pos:end="165:33">usb_device_handle_control</name><argument_list pos:start="165:34" pos:end="169:53">(<argument pos:start="165:35" pos:end="165:37"><expr pos:start="165:35" pos:end="165:37"><name pos:start="165:35" pos:end="165:37">dev</name></expr></argument>, <argument pos:start="165:40" pos:end="165:41"><expr pos:start="165:40" pos:end="165:41"><operator pos:start="165:40" pos:end="165:40">&amp;</operator><name pos:start="165:41" pos:end="165:41">p</name></expr></argument>,

                                  <argument pos:start="167:35" pos:end="167:72"><expr pos:start="167:35" pos:end="167:72"><name pos:start="167:35" pos:end="167:50">DeviceOutRequest</name> <operator pos:start="167:52" pos:end="167:52">|</operator> <name pos:start="167:54" pos:end="167:72">USB_REQ_SET_ADDRESS</name></expr></argument>,

                                  <argument pos:start="169:35" pos:end="169:40"><expr pos:start="169:35" pos:end="169:40"><name pos:start="169:35" pos:end="169:40">slotid</name></expr></argument>, <argument pos:start="169:43" pos:end="169:43"><expr pos:start="169:43" pos:end="169:43"><literal type="number" pos:start="169:43" pos:end="169:43">0</literal></expr></argument>, <argument pos:start="169:46" pos:end="169:46"><expr pos:start="169:46" pos:end="169:46"><literal type="number" pos:start="169:46" pos:end="169:46">0</literal></expr></argument>, <argument pos:start="169:49" pos:end="169:52"><expr pos:start="169:49" pos:end="169:52"><name pos:start="169:49" pos:end="169:52">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="171:9" pos:end="171:42"><expr pos:start="171:9" pos:end="171:41"><call pos:start="171:9" pos:end="171:41"><name pos:start="171:9" pos:end="171:14">assert</name><argument_list pos:start="171:15" pos:end="171:41">(<argument pos:start="171:16" pos:end="171:40"><expr pos:start="171:16" pos:end="171:40"><name pos:start="171:16" pos:end="171:23"><name pos:start="171:16" pos:end="171:16">p</name><operator pos:start="171:17" pos:end="171:17">.</operator><name pos:start="171:18" pos:end="171:23">status</name></name> <operator pos:start="171:25" pos:end="171:26">!=</operator> <name pos:start="171:28" pos:end="171:40">USB_RET_ASYNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="177:5" pos:end="177:60"><expr pos:start="177:5" pos:end="177:59"><name pos:start="177:5" pos:end="177:7">res</name> <operator pos:start="177:9" pos:end="177:9">=</operator> <call pos:start="177:11" pos:end="177:59"><name pos:start="177:11" pos:end="177:24">xhci_enable_ep</name><argument_list pos:start="177:25" pos:end="177:59">(<argument pos:start="177:26" pos:end="177:29"><expr pos:start="177:26" pos:end="177:29"><name pos:start="177:26" pos:end="177:29">xhci</name></expr></argument>, <argument pos:start="177:32" pos:end="177:37"><expr pos:start="177:32" pos:end="177:37"><name pos:start="177:32" pos:end="177:37">slotid</name></expr></argument>, <argument pos:start="177:40" pos:end="177:40"><expr pos:start="177:40" pos:end="177:40"><literal type="number" pos:start="177:40" pos:end="177:40">1</literal></expr></argument>, <argument pos:start="177:43" pos:end="177:49"><expr pos:start="177:43" pos:end="177:49"><name pos:start="177:43" pos:end="177:46">octx</name><operator pos:start="177:47" pos:end="177:47">+</operator><literal type="number" pos:start="177:48" pos:end="177:49">32</literal></expr></argument>, <argument pos:start="177:52" pos:end="177:58"><expr pos:start="177:52" pos:end="177:58"><name pos:start="177:52" pos:end="177:58">ep0_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="181:5" pos:end="183:64"><expr pos:start="181:5" pos:end="183:63"><call pos:start="181:5" pos:end="183:63"><name pos:start="181:5" pos:end="181:11">DPRINTF</name><argument_list pos:start="181:12" pos:end="183:63">(<argument pos:start="181:13" pos:end="181:62"><expr pos:start="181:13" pos:end="181:62"><literal type="string" pos:start="181:13" pos:end="181:62">"xhci: output slot context: %08x %08x %08x %08x\n"</literal></expr></argument>,

            <argument pos:start="183:13" pos:end="183:23"><expr pos:start="183:13" pos:end="183:23"><name pos:start="183:13" pos:end="183:23"><name pos:start="183:13" pos:end="183:20">slot_ctx</name><index pos:start="183:21" pos:end="183:23">[<expr pos:start="183:22" pos:end="183:22"><literal type="number" pos:start="183:22" pos:end="183:22">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:26" pos:end="183:36"><expr pos:start="183:26" pos:end="183:36"><name pos:start="183:26" pos:end="183:36"><name pos:start="183:26" pos:end="183:33">slot_ctx</name><index pos:start="183:34" pos:end="183:36">[<expr pos:start="183:35" pos:end="183:35"><literal type="number" pos:start="183:35" pos:end="183:35">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:39" pos:end="183:49"><expr pos:start="183:39" pos:end="183:49"><name pos:start="183:39" pos:end="183:49"><name pos:start="183:39" pos:end="183:46">slot_ctx</name><index pos:start="183:47" pos:end="183:49">[<expr pos:start="183:48" pos:end="183:48"><literal type="number" pos:start="183:48" pos:end="183:48">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="183:52" pos:end="183:62"><expr pos:start="183:52" pos:end="183:62"><name pos:start="183:52" pos:end="183:62"><name pos:start="183:52" pos:end="183:59">slot_ctx</name><index pos:start="183:60" pos:end="183:62">[<expr pos:start="183:61" pos:end="183:61"><literal type="number" pos:start="183:61" pos:end="183:61">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="187:72"><expr pos:start="185:5" pos:end="187:71"><call pos:start="185:5" pos:end="187:71"><name pos:start="185:5" pos:end="185:11">DPRINTF</name><argument_list pos:start="185:12" pos:end="187:71">(<argument pos:start="185:13" pos:end="185:66"><expr pos:start="185:13" pos:end="185:66"><literal type="string" pos:start="185:13" pos:end="185:66">"xhci: output ep0 context: %08x %08x %08x %08x %08x\n"</literal></expr></argument>,

            <argument pos:start="187:13" pos:end="187:22"><expr pos:start="187:13" pos:end="187:22"><name pos:start="187:13" pos:end="187:22"><name pos:start="187:13" pos:end="187:19">ep0_ctx</name><index pos:start="187:20" pos:end="187:22">[<expr pos:start="187:21" pos:end="187:21"><literal type="number" pos:start="187:21" pos:end="187:21">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="187:25" pos:end="187:34"><expr pos:start="187:25" pos:end="187:34"><name pos:start="187:25" pos:end="187:34"><name pos:start="187:25" pos:end="187:31">ep0_ctx</name><index pos:start="187:32" pos:end="187:34">[<expr pos:start="187:33" pos:end="187:33"><literal type="number" pos:start="187:33" pos:end="187:33">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="187:37" pos:end="187:46"><expr pos:start="187:37" pos:end="187:46"><name pos:start="187:37" pos:end="187:46"><name pos:start="187:37" pos:end="187:43">ep0_ctx</name><index pos:start="187:44" pos:end="187:46">[<expr pos:start="187:45" pos:end="187:45"><literal type="number" pos:start="187:45" pos:end="187:45">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="187:49" pos:end="187:58"><expr pos:start="187:49" pos:end="187:58"><name pos:start="187:49" pos:end="187:58"><name pos:start="187:49" pos:end="187:55">ep0_ctx</name><index pos:start="187:56" pos:end="187:58">[<expr pos:start="187:57" pos:end="187:57"><literal type="number" pos:start="187:57" pos:end="187:57">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="187:61" pos:end="187:70"><expr pos:start="187:61" pos:end="187:70"><name pos:start="187:61" pos:end="187:70"><name pos:start="187:61" pos:end="187:67">ep0_ctx</name><index pos:start="187:68" pos:end="187:70">[<expr pos:start="187:69" pos:end="187:69"><literal type="number" pos:start="187:69" pos:end="187:69">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:64"><expr pos:start="191:5" pos:end="191:63"><call pos:start="191:5" pos:end="191:63"><name pos:start="191:5" pos:end="191:23">xhci_dma_write_u32s</name><argument_list pos:start="191:24" pos:end="191:63">(<argument pos:start="191:25" pos:end="191:28"><expr pos:start="191:25" pos:end="191:28"><name pos:start="191:25" pos:end="191:28">xhci</name></expr></argument>, <argument pos:start="191:31" pos:end="191:34"><expr pos:start="191:31" pos:end="191:34"><name pos:start="191:31" pos:end="191:34">octx</name></expr></argument>, <argument pos:start="191:37" pos:end="191:44"><expr pos:start="191:37" pos:end="191:44"><name pos:start="191:37" pos:end="191:44">slot_ctx</name></expr></argument>, <argument pos:start="191:47" pos:end="191:62"><expr pos:start="191:47" pos:end="191:62"><sizeof pos:start="191:47" pos:end="191:62">sizeof<argument_list pos:start="191:53" pos:end="191:62">(<argument pos:start="191:54" pos:end="191:61"><expr pos:start="191:54" pos:end="191:61"><name pos:start="191:54" pos:end="191:61">slot_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="193:5" pos:end="193:65"><expr pos:start="193:5" pos:end="193:64"><call pos:start="193:5" pos:end="193:64"><name pos:start="193:5" pos:end="193:23">xhci_dma_write_u32s</name><argument_list pos:start="193:24" pos:end="193:64">(<argument pos:start="193:25" pos:end="193:28"><expr pos:start="193:25" pos:end="193:28"><name pos:start="193:25" pos:end="193:28">xhci</name></expr></argument>, <argument pos:start="193:31" pos:end="193:37"><expr pos:start="193:31" pos:end="193:37"><name pos:start="193:31" pos:end="193:34">octx</name><operator pos:start="193:35" pos:end="193:35">+</operator><literal type="number" pos:start="193:36" pos:end="193:37">32</literal></expr></argument>, <argument pos:start="193:40" pos:end="193:46"><expr pos:start="193:40" pos:end="193:46"><name pos:start="193:40" pos:end="193:46">ep0_ctx</name></expr></argument>, <argument pos:start="193:49" pos:end="193:63"><expr pos:start="193:49" pos:end="193:63"><sizeof pos:start="193:49" pos:end="193:63">sizeof<argument_list pos:start="193:55" pos:end="193:63">(<argument pos:start="193:56" pos:end="193:62"><expr pos:start="193:56" pos:end="193:62"><name pos:start="193:56" pos:end="193:62">ep0_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:40"><expr pos:start="197:5" pos:end="197:39"><name pos:start="197:5" pos:end="197:25"><name pos:start="197:5" pos:end="197:8">xhci</name><operator pos:start="197:9" pos:end="197:10">-&gt;</operator><name pos:start="197:11" pos:end="197:15">slots</name><index pos:start="197:16" pos:end="197:25">[<expr pos:start="197:17" pos:end="197:24"><name pos:start="197:17" pos:end="197:22">slotid</name><operator pos:start="197:23" pos:end="197:23">-</operator><literal type="number" pos:start="197:24" pos:end="197:24">1</literal></expr>]</index></name><operator pos:start="197:26" pos:end="197:26">.</operator><name pos:start="197:27" pos:end="197:35">addressed</name> <operator pos:start="197:37" pos:end="197:37">=</operator> <literal type="number" pos:start="197:39" pos:end="197:39">1</literal></expr>;</expr_stmt>

    <return pos:start="199:5" pos:end="199:15">return <expr pos:start="199:12" pos:end="199:14"><name pos:start="199:12" pos:end="199:14">res</name></expr>;</return>

</block_content>}</block></function>
</unit>
