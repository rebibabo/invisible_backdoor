<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17910.c" pos:tabs="8"><function pos:start="1:1" pos:end="483:34"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">mpegts_write_pes</name><parameter_list pos:start="1:29" pos:end="5:78">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:44">AVFormatContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:47">s</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:61"><decl pos:start="1:50" pos:end="1:61"><type pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:57">AVStream</name> <modifier pos:start="1:59" pos:end="1:59">*</modifier></type><name pos:start="1:60" pos:end="1:61">st</name></decl></parameter>,

                             <parameter pos:start="3:30" pos:end="3:51"><decl pos:start="3:30" pos:end="3:51"><type pos:start="3:30" pos:end="3:51"><specifier pos:start="3:30" pos:end="3:34">const</specifier> <name pos:start="3:36" pos:end="3:42">uint8_t</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:51">payload</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:69"><decl pos:start="3:54" pos:end="3:69"><type pos:start="3:54" pos:end="3:69"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:69">payload_size</name></decl></parameter>,

                             <parameter pos:start="5:30" pos:end="5:40"><decl pos:start="5:30" pos:end="5:40"><type pos:start="5:30" pos:end="5:40"><name pos:start="5:30" pos:end="5:36">int64_t</name></type> <name pos:start="5:38" pos:end="5:40">pts</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:53"><decl pos:start="5:43" pos:end="5:53"><type pos:start="5:43" pos:end="5:53"><name pos:start="5:43" pos:end="5:49">int64_t</name></type> <name pos:start="5:51" pos:end="5:53">dts</name></decl></parameter>, <parameter pos:start="5:56" pos:end="5:62"><decl pos:start="5:56" pos:end="5:62"><type pos:start="5:56" pos:end="5:62"><name pos:start="5:56" pos:end="5:58">int</name></type> <name pos:start="5:60" pos:end="5:62">key</name></decl></parameter>, <parameter pos:start="5:65" pos:end="5:77"><decl pos:start="5:65" pos:end="5:77"><type pos:start="5:65" pos:end="5:77"><name pos:start="5:65" pos:end="5:67">int</name></type> <name pos:start="5:69" pos:end="5:77">stream_id</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="483:34">{<block_content pos:start="9:5" pos:end="483:34">

    <decl_stmt pos:start="9:5" pos:end="9:45"><decl pos:start="9:5" pos:end="9:44"><type pos:start="9:5" pos:end="9:23"><name pos:start="9:5" pos:end="9:21">MpegTSWriteStream</name> <modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:28">ts_st</name> <init pos:start="9:30" pos:end="9:44">= <expr pos:start="9:32" pos:end="9:44"><name pos:start="9:32" pos:end="9:44"><name pos:start="9:32" pos:end="9:33">st</name><operator pos:start="9:34" pos:end="9:35">-&gt;</operator><name pos:start="9:36" pos:end="9:44">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:35"><decl pos:start="11:5" pos:end="11:34"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">MpegTSWrite</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:19">ts</name> <init pos:start="11:21" pos:end="11:34">= <expr pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:34"><name pos:start="11:23" pos:end="11:23">s</name><operator pos:start="11:24" pos:end="11:25">-&gt;</operator><name pos:start="11:26" pos:end="11:34">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:32"><decl pos:start="13:5" pos:end="13:31"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">uint8_t</name></type> <name pos:start="13:13" pos:end="13:31"><name pos:start="13:13" pos:end="13:15">buf</name><index pos:start="13:16" pos:end="13:31">[<expr pos:start="13:17" pos:end="13:30"><name pos:start="13:17" pos:end="13:30">TS_PACKET_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:15"><decl pos:start="15:5" pos:end="15:14"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">uint8_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:14">q</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:91"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">val</name></decl>, <decl pos:start="17:14" pos:end="17:21"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:14" pos:end="17:21">is_start</name></decl>, <decl pos:start="17:24" pos:end="17:26"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:24" pos:end="17:26">len</name></decl>, <decl pos:start="17:29" pos:end="17:38"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:29" pos:end="17:38">header_len</name></decl>, <decl pos:start="17:41" pos:end="17:49"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:41" pos:end="17:49">write_pcr</name></decl>, <decl pos:start="17:52" pos:end="17:66"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:52" pos:end="17:66">is_dvb_subtitle</name></decl>, <decl pos:start="17:69" pos:end="17:83"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:69" pos:end="17:83">is_dvb_teletext</name></decl>, <decl pos:start="17:86" pos:end="17:90"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:86" pos:end="17:90">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:30"><decl pos:start="19:5" pos:end="19:15"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:15">afc_len</name></decl>, <decl pos:start="19:18" pos:end="19:29"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:18" pos:end="19:29">stuffing_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:11"><name pos:start="21:5" pos:end="21:11">int64_t</name></type> <name pos:start="21:13" pos:end="21:15">pcr</name> <init pos:start="21:17" pos:end="21:20">= <expr pos:start="21:19" pos:end="21:20"><operator pos:start="21:19" pos:end="21:19">-</operator><literal type="number" pos:start="21:20" pos:end="21:20">1</literal></expr></init></decl>;</decl_stmt> <comment type="block" pos:start="21:23" pos:end="21:41">/* avoid warning */</comment>

    <decl_stmt pos:start="23:5" pos:end="23:66"><decl pos:start="23:5" pos:end="23:65"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">int64_t</name></type> <name pos:start="23:13" pos:end="23:17">delay</name> <init pos:start="23:19" pos:end="23:65">= <expr pos:start="23:21" pos:end="23:65"><call pos:start="23:21" pos:end="23:65"><name pos:start="23:21" pos:end="23:30">av_rescale</name><argument_list pos:start="23:31" pos:end="23:65">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:32">s</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:43">max_delay</name></name></expr></argument>, <argument pos:start="23:46" pos:end="23:50"><expr pos:start="23:46" pos:end="23:50"><literal type="number" pos:start="23:46" pos:end="23:50">90000</literal></expr></argument>, <argument pos:start="23:53" pos:end="23:64"><expr pos:start="23:53" pos:end="23:64"><name pos:start="23:53" pos:end="23:64">AV_TIME_BASE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:102"><decl pos:start="25:5" pos:end="25:101"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:17">force_pat</name> <init pos:start="25:19" pos:end="25:101">= <expr pos:start="25:21" pos:end="25:101"><name pos:start="25:21" pos:end="25:44"><name pos:start="25:21" pos:end="25:22">st</name><operator pos:start="25:23" pos:end="25:24">-&gt;</operator><name pos:start="25:25" pos:end="25:32">codecpar</name><operator pos:start="25:33" pos:end="25:34">-&gt;</operator><name pos:start="25:35" pos:end="25:44">codec_type</name></name> <operator pos:start="25:46" pos:end="25:47">==</operator> <name pos:start="25:49" pos:end="25:66">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="25:68" pos:end="25:69">&amp;&amp;</operator> <name pos:start="25:71" pos:end="25:73">key</name> <operator pos:start="25:75" pos:end="25:76">&amp;&amp;</operator> <operator pos:start="25:78" pos:end="25:78">!</operator><name pos:start="25:79" pos:end="25:101"><name pos:start="25:79" pos:end="25:83">ts_st</name><operator pos:start="25:84" pos:end="25:85">-&gt;</operator><name pos:start="25:86" pos:end="25:101">prev_payload_key</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:88"><expr pos:start="29:5" pos:end="29:87"><call pos:start="29:5" pos:end="29:87"><name pos:start="29:5" pos:end="29:14">av_assert0</name><argument_list pos:start="29:15" pos:end="29:87">(<argument pos:start="29:16" pos:end="29:86"><expr pos:start="29:16" pos:end="29:86"><name pos:start="29:16" pos:end="29:29"><name pos:start="29:16" pos:end="29:20">ts_st</name><operator pos:start="29:21" pos:end="29:22">-&gt;</operator><name pos:start="29:23" pos:end="29:29">payload</name></name> <operator pos:start="29:31" pos:end="29:32">!=</operator> <name pos:start="29:34" pos:end="29:36">buf</name> <operator pos:start="29:38" pos:end="29:39">||</operator> <name pos:start="29:41" pos:end="29:64"><name pos:start="29:41" pos:end="29:42">st</name><operator pos:start="29:43" pos:end="29:44">-&gt;</operator><name pos:start="29:45" pos:end="29:52">codecpar</name><operator pos:start="29:53" pos:end="29:54">-&gt;</operator><name pos:start="29:55" pos:end="29:64">codec_type</name></name> <operator pos:start="29:66" pos:end="29:67">!=</operator> <name pos:start="29:69" pos:end="29:86">AVMEDIA_TYPE_VIDEO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="483:34"><if pos:start="31:5" pos:end="483:34">if <condition pos:start="31:8" pos:end="31:100">(<expr pos:start="31:9" pos:end="31:99"><name pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:10">ts</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:17">flags</name></name> <operator pos:start="31:19" pos:end="31:19">&amp;</operator> <name pos:start="31:21" pos:end="31:49">MPEGTS_FLAG_PAT_PMT_AT_FRAMES</name> <operator pos:start="31:51" pos:end="31:52">&amp;&amp;</operator> <name pos:start="31:54" pos:end="31:77"><name pos:start="31:54" pos:end="31:55">st</name><operator pos:start="31:56" pos:end="31:57">-&gt;</operator><name pos:start="31:58" pos:end="31:65">codecpar</name><operator pos:start="31:66" pos:end="31:67">-&gt;</operator><name pos:start="31:68" pos:end="31:77">codec_type</name></name> <operator pos:start="31:79" pos:end="31:80">==</operator> <name pos:start="31:82" pos:end="31:99">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="31:102" pos:end="483:34">{<block_content pos:start="33:9" pos:end="483:34">

        <expr_stmt pos:start="33:9" pos:end="33:22"><expr pos:start="33:9" pos:end="33:21"><name pos:start="33:9" pos:end="33:17">force_pat</name> <operator pos:start="33:19" pos:end="33:19">=</operator> <literal type="number" pos:start="33:21" pos:end="33:21">1</literal></expr>;</expr_stmt>




    <expr_stmt pos:start="38:5" pos:end="38:17"><expr pos:start="38:5" pos:end="38:16"><name pos:start="38:5" pos:end="38:12">is_start</name> <operator pos:start="38:14" pos:end="38:14">=</operator> <literal type="number" pos:start="38:16" pos:end="38:16">1</literal></expr>;</expr_stmt>

    <while pos:start="40:5" pos:end="483:34">while <condition pos:start="40:11" pos:end="40:28">(<expr pos:start="40:12" pos:end="40:27"><name pos:start="40:12" pos:end="40:23">payload_size</name> <operator pos:start="40:25" pos:end="40:25">&gt;</operator> <literal type="number" pos:start="40:27" pos:end="40:27">0</literal></expr>)</condition> <block pos:start="40:30" pos:end="483:34">{<block_content pos:start="42:9" pos:end="483:34">

        <expr_stmt pos:start="42:9" pos:end="42:46"><expr pos:start="42:9" pos:end="42:45"><call pos:start="42:9" pos:end="42:45"><name pos:start="42:9" pos:end="42:26">retransmit_si_info</name><argument_list pos:start="42:27" pos:end="42:45">(<argument pos:start="42:28" pos:end="42:28"><expr pos:start="42:28" pos:end="42:28"><name pos:start="42:28" pos:end="42:28">s</name></expr></argument>, <argument pos:start="42:31" pos:end="42:39"><expr pos:start="42:31" pos:end="42:39"><name pos:start="42:31" pos:end="42:39">force_pat</name></expr></argument>, <argument pos:start="42:42" pos:end="42:44"><expr pos:start="42:42" pos:end="42:44"><name pos:start="42:42" pos:end="42:44">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="44:9" pos:end="44:22"><expr pos:start="44:9" pos:end="44:21"><name pos:start="44:9" pos:end="44:17">force_pat</name> <operator pos:start="44:19" pos:end="44:19">=</operator> <literal type="number" pos:start="44:21" pos:end="44:21">0</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="48:9" pos:end="48:22"><expr pos:start="48:9" pos:end="48:21"><name pos:start="48:9" pos:end="48:17">write_pcr</name> <operator pos:start="48:19" pos:end="48:19">=</operator> <literal type="number" pos:start="48:21" pos:end="48:21">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="50:9" pos:end="483:34"><if pos:start="50:9" pos:end="483:34">if <condition pos:start="50:12" pos:end="50:50">(<expr pos:start="50:13" pos:end="50:49"><name pos:start="50:13" pos:end="50:22"><name pos:start="50:13" pos:end="50:17">ts_st</name><operator pos:start="50:18" pos:end="50:19">-&gt;</operator><name pos:start="50:20" pos:end="50:22">pid</name></name> <operator pos:start="50:24" pos:end="50:25">==</operator> <name pos:start="50:27" pos:end="50:49"><name pos:start="50:27" pos:end="50:31">ts_st</name><operator pos:start="50:32" pos:end="50:33">-&gt;</operator><name pos:start="50:34" pos:end="50:40">service</name><operator pos:start="50:41" pos:end="50:42">-&gt;</operator><name pos:start="50:43" pos:end="50:49">pcr_pid</name></name></expr>)</condition> <block pos:start="50:52" pos:end="483:34">{<block_content pos:start="52:13" pos:end="483:34">

            <if_stmt pos:start="52:13" pos:end="54:51"><if pos:start="52:13" pos:end="54:51">if <condition pos:start="52:16" pos:end="52:45">(<expr pos:start="52:17" pos:end="52:44"><name pos:start="52:17" pos:end="52:28"><name pos:start="52:17" pos:end="52:18">ts</name><operator pos:start="52:19" pos:end="52:20">-&gt;</operator><name pos:start="52:21" pos:end="52:28">mux_rate</name></name> <operator pos:start="52:30" pos:end="52:30">&gt;</operator> <literal type="number" pos:start="52:32" pos:end="52:32">1</literal> <operator pos:start="52:34" pos:end="52:35">||</operator> <name pos:start="52:37" pos:end="52:44">is_start</name></expr>)</condition><block type="pseudo" pos:start="54:17" pos:end="54:51"><block_content pos:start="54:17" pos:end="54:51"> <comment type="line" pos:start="52:47" pos:end="52:82">// VBR pcr period is based on frames</comment>

                <expr_stmt pos:start="54:17" pos:end="54:51"><expr pos:start="54:17" pos:end="54:50"><name pos:start="54:17" pos:end="54:48"><name pos:start="54:17" pos:end="54:21">ts_st</name><operator pos:start="54:22" pos:end="54:23">-&gt;</operator><name pos:start="54:24" pos:end="54:30">service</name><operator pos:start="54:31" pos:end="54:32">-&gt;</operator><name pos:start="54:33" pos:end="54:48">pcr_packet_count</name></name><operator pos:start="54:49" pos:end="54:50">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="56:13" pos:end="483:34"><if pos:start="56:13" pos:end="483:34">if <condition pos:start="56:16" pos:end="58:50">(<expr pos:start="56:17" pos:end="58:49"><name pos:start="56:17" pos:end="56:48"><name pos:start="56:17" pos:end="56:21">ts_st</name><operator pos:start="56:22" pos:end="56:23">-&gt;</operator><name pos:start="56:24" pos:end="56:30">service</name><operator pos:start="56:31" pos:end="56:32">-&gt;</operator><name pos:start="56:33" pos:end="56:48">pcr_packet_count</name></name> <operator pos:start="56:50" pos:end="56:51">&gt;=</operator>

                <name pos:start="58:17" pos:end="58:49"><name pos:start="58:17" pos:end="58:21">ts_st</name><operator pos:start="58:22" pos:end="58:23">-&gt;</operator><name pos:start="58:24" pos:end="58:30">service</name><operator pos:start="58:31" pos:end="58:32">-&gt;</operator><name pos:start="58:33" pos:end="58:49">pcr_packet_period</name></name></expr>)</condition> <block pos:start="58:52" pos:end="483:34">{<block_content pos:start="60:17" pos:end="483:34">

                <expr_stmt pos:start="60:17" pos:end="60:53"><expr pos:start="60:17" pos:end="60:52"><name pos:start="60:17" pos:end="60:48"><name pos:start="60:17" pos:end="60:21">ts_st</name><operator pos:start="60:22" pos:end="60:23">-&gt;</operator><name pos:start="60:24" pos:end="60:30">service</name><operator pos:start="60:31" pos:end="60:32">-&gt;</operator><name pos:start="60:33" pos:end="60:48">pcr_packet_count</name></name> <operator pos:start="60:50" pos:end="60:50">=</operator> <literal type="number" pos:start="60:52" pos:end="60:52">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="62:17" pos:end="62:30"><expr pos:start="62:17" pos:end="62:29"><name pos:start="62:17" pos:end="62:25">write_pcr</name> <operator pos:start="62:27" pos:end="62:27">=</operator> <literal type="number" pos:start="62:29" pos:end="62:29">1</literal></expr>;</expr_stmt>





        <if_stmt pos:start="68:9" pos:end="483:34"><if pos:start="68:9" pos:end="483:34">if <condition pos:start="68:12" pos:end="70:53">(<expr pos:start="68:13" pos:end="70:52"><name pos:start="68:13" pos:end="68:24"><name pos:start="68:13" pos:end="68:14">ts</name><operator pos:start="68:15" pos:end="68:16">-&gt;</operator><name pos:start="68:17" pos:end="68:24">mux_rate</name></name> <operator pos:start="68:26" pos:end="68:26">&gt;</operator> <literal type="number" pos:start="68:28" pos:end="68:28">1</literal> <operator pos:start="68:30" pos:end="68:31">&amp;&amp;</operator> <name pos:start="68:33" pos:end="68:35">dts</name> <operator pos:start="68:37" pos:end="68:38">!=</operator> <name pos:start="68:40" pos:end="68:53">AV_NOPTS_VALUE</name> <operator pos:start="68:55" pos:end="68:56">&amp;&amp;</operator>

            <operator pos:start="70:13" pos:end="70:13">(</operator><name pos:start="70:14" pos:end="70:16">dts</name> <operator pos:start="70:18" pos:end="70:18">-</operator> <call pos:start="70:20" pos:end="70:37"><name pos:start="70:20" pos:end="70:26">get_pcr</name><argument_list pos:start="70:27" pos:end="70:37">(<argument pos:start="70:28" pos:end="70:29"><expr pos:start="70:28" pos:end="70:29"><name pos:start="70:28" pos:end="70:29">ts</name></expr></argument>, <argument pos:start="70:32" pos:end="70:36"><expr pos:start="70:32" pos:end="70:36"><name pos:start="70:32" pos:end="70:36"><name pos:start="70:32" pos:end="70:32">s</name><operator pos:start="70:33" pos:end="70:34">-&gt;</operator><name pos:start="70:35" pos:end="70:36">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="70:39" pos:end="70:39">/</operator> <literal type="number" pos:start="70:41" pos:end="70:43">300</literal><operator pos:start="70:44" pos:end="70:44">)</operator> <operator pos:start="70:46" pos:end="70:46">&gt;</operator> <name pos:start="70:48" pos:end="70:52">delay</name></expr>)</condition> <block pos:start="70:55" pos:end="483:34">{<block_content pos:start="74:13" pos:end="483:34">

            <comment type="block" pos:start="72:13" pos:end="72:66">/* pcr insert gets priority over null packet insert */</comment>

            <if_stmt pos:start="74:13" pos:end="80:45"><if pos:start="74:13" pos:end="76:46">if <condition pos:start="74:16" pos:end="74:26">(<expr pos:start="74:17" pos:end="74:25"><name pos:start="74:17" pos:end="74:25">write_pcr</name></expr>)</condition><block type="pseudo" pos:start="76:17" pos:end="76:46"><block_content pos:start="76:17" pos:end="76:46">

                <expr_stmt pos:start="76:17" pos:end="76:46"><expr pos:start="76:17" pos:end="76:45"><call pos:start="76:17" pos:end="76:45"><name pos:start="76:17" pos:end="76:38">mpegts_insert_pcr_only</name><argument_list pos:start="76:39" pos:end="76:45">(<argument pos:start="76:40" pos:end="76:40"><expr pos:start="76:40" pos:end="76:40"><name pos:start="76:40" pos:end="76:40">s</name></expr></argument>, <argument pos:start="76:43" pos:end="76:44"><expr pos:start="76:43" pos:end="76:44"><name pos:start="76:43" pos:end="76:44">st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="78:13" pos:end="80:45">else<block type="pseudo" pos:start="80:17" pos:end="80:45"><block_content pos:start="80:17" pos:end="80:45">

                <expr_stmt pos:start="80:17" pos:end="80:45"><expr pos:start="80:17" pos:end="80:44"><call pos:start="80:17" pos:end="80:44"><name pos:start="80:17" pos:end="80:41">mpegts_insert_null_packet</name><argument_list pos:start="80:42" pos:end="80:44">(<argument pos:start="80:43" pos:end="80:43"><expr pos:start="80:43" pos:end="80:43"><name pos:start="80:43" pos:end="80:43">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <comment type="block" pos:start="82:13" pos:end="82:71">/* recalculate write_pcr and possibly retransmit si_info */</comment>

            <continue pos:start="84:13" pos:end="84:21">continue;</continue>




        <comment type="block" pos:start="89:9" pos:end="89:35">/* prepare packet header */</comment>

        <expr_stmt pos:start="91:9" pos:end="91:19"><expr pos:start="91:9" pos:end="91:18"><name pos:start="91:9" pos:end="91:9">q</name>    <operator pos:start="91:14" pos:end="91:14">=</operator> <name pos:start="91:16" pos:end="91:18">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:20"><expr pos:start="93:9" pos:end="93:19"><operator pos:start="93:9" pos:end="93:9">*</operator><name pos:start="93:10" pos:end="93:10">q</name><operator pos:start="93:11" pos:end="93:12">++</operator> <operator pos:start="93:14" pos:end="93:14">=</operator> <literal type="number" pos:start="93:16" pos:end="93:19">0x47</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:31"><expr pos:start="95:9" pos:end="95:30"><name pos:start="95:9" pos:end="95:11">val</name>  <operator pos:start="95:14" pos:end="95:14">=</operator> <name pos:start="95:16" pos:end="95:25"><name pos:start="95:16" pos:end="95:20">ts_st</name><operator pos:start="95:21" pos:end="95:22">-&gt;</operator><name pos:start="95:23" pos:end="95:25">pid</name></name> <operator pos:start="95:27" pos:end="95:28">&gt;&gt;</operator> <literal type="number" pos:start="95:30" pos:end="95:30">8</literal></expr>;</expr_stmt>

        <if_stmt pos:start="97:9" pos:end="99:24"><if pos:start="97:9" pos:end="99:24">if <condition pos:start="97:12" pos:end="97:21">(<expr pos:start="97:13" pos:end="97:20"><name pos:start="97:13" pos:end="97:20">is_start</name></expr>)</condition><block type="pseudo" pos:start="99:13" pos:end="99:24"><block_content pos:start="99:13" pos:end="99:24">

            <expr_stmt pos:start="99:13" pos:end="99:24"><expr pos:start="99:13" pos:end="99:23"><name pos:start="99:13" pos:end="99:15">val</name> <operator pos:start="99:17" pos:end="99:18">|=</operator> <literal type="number" pos:start="99:20" pos:end="99:23">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:24"><expr pos:start="101:9" pos:end="101:23"><operator pos:start="101:9" pos:end="101:9">*</operator><name pos:start="101:10" pos:end="101:10">q</name><operator pos:start="101:11" pos:end="101:12">++</operator>      <operator pos:start="101:19" pos:end="101:19">=</operator> <name pos:start="101:21" pos:end="101:23">val</name></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:31"><expr pos:start="103:9" pos:end="103:30"><operator pos:start="103:9" pos:end="103:9">*</operator><name pos:start="103:10" pos:end="103:10">q</name><operator pos:start="103:11" pos:end="103:12">++</operator>      <operator pos:start="103:19" pos:end="103:19">=</operator> <name pos:start="103:21" pos:end="103:30"><name pos:start="103:21" pos:end="103:25">ts_st</name><operator pos:start="103:26" pos:end="103:27">-&gt;</operator><name pos:start="103:28" pos:end="103:30">pid</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:40"><expr pos:start="105:9" pos:end="105:39"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:13">ts_st</name><operator pos:start="105:14" pos:end="105:15">-&gt;</operator><name pos:start="105:16" pos:end="105:17">cc</name></name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:29"><name pos:start="105:21" pos:end="105:25">ts_st</name><operator pos:start="105:26" pos:end="105:27">-&gt;</operator><name pos:start="105:28" pos:end="105:29">cc</name></name> <operator pos:start="105:31" pos:end="105:31">+</operator> <literal type="number" pos:start="105:33" pos:end="105:33">1</literal> <operator pos:start="105:35" pos:end="105:35">&amp;</operator> <literal type="number" pos:start="105:37" pos:end="105:39">0xf</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:37"><expr pos:start="107:9" pos:end="107:36"><operator pos:start="107:9" pos:end="107:9">*</operator><name pos:start="107:10" pos:end="107:10">q</name><operator pos:start="107:11" pos:end="107:12">++</operator>      <operator pos:start="107:19" pos:end="107:19">=</operator> <literal type="number" pos:start="107:21" pos:end="107:24">0x10</literal> <operator pos:start="107:26" pos:end="107:26">|</operator> <name pos:start="107:28" pos:end="107:36"><name pos:start="107:28" pos:end="107:32">ts_st</name><operator pos:start="107:33" pos:end="107:34">-&gt;</operator><name pos:start="107:35" pos:end="107:36">cc</name></name></expr>;</expr_stmt> <comment type="line" pos:start="107:39" pos:end="107:63">// payload indicator + CC</comment>






        <if_stmt pos:start="114:9" pos:end="483:34"><if pos:start="114:9" pos:end="483:34">if <condition pos:start="114:12" pos:end="114:53">(<expr pos:start="114:13" pos:end="114:52"><name pos:start="114:13" pos:end="114:15">key</name> <operator pos:start="114:17" pos:end="114:18">&amp;&amp;</operator> <name pos:start="114:20" pos:end="114:27">is_start</name> <operator pos:start="114:29" pos:end="114:30">&amp;&amp;</operator> <name pos:start="114:32" pos:end="114:34">pts</name> <operator pos:start="114:36" pos:end="114:37">!=</operator> <name pos:start="114:39" pos:end="114:52">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="114:55" pos:end="483:34">{<block_content pos:start="118:13" pos:end="483:34">

            <comment type="line" pos:start="116:13" pos:end="116:47">// set Random Access for key frames</comment>

            <if_stmt pos:start="118:13" pos:end="120:30"><if pos:start="118:13" pos:end="120:30">if <condition pos:start="118:16" pos:end="118:54">(<expr pos:start="118:17" pos:end="118:53"><name pos:start="118:17" pos:end="118:26"><name pos:start="118:17" pos:end="118:21">ts_st</name><operator pos:start="118:22" pos:end="118:23">-&gt;</operator><name pos:start="118:24" pos:end="118:26">pid</name></name> <operator pos:start="118:28" pos:end="118:29">==</operator> <name pos:start="118:31" pos:end="118:53"><name pos:start="118:31" pos:end="118:35">ts_st</name><operator pos:start="118:36" pos:end="118:37">-&gt;</operator><name pos:start="118:38" pos:end="118:44">service</name><operator pos:start="118:45" pos:end="118:46">-&gt;</operator><name pos:start="118:47" pos:end="118:53">pcr_pid</name></name></expr>)</condition><block type="pseudo" pos:start="120:17" pos:end="120:30"><block_content pos:start="120:17" pos:end="120:30">

                <expr_stmt pos:start="120:17" pos:end="120:30"><expr pos:start="120:17" pos:end="120:29"><name pos:start="120:17" pos:end="120:25">write_pcr</name> <operator pos:start="120:27" pos:end="120:27">=</operator> <literal type="number" pos:start="120:29" pos:end="120:29">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="122:13" pos:end="122:35"><expr pos:start="122:13" pos:end="122:34"><call pos:start="122:13" pos:end="122:34"><name pos:start="122:13" pos:end="122:23">set_af_flag</name><argument_list pos:start="122:24" pos:end="122:34">(<argument pos:start="122:25" pos:end="122:27"><expr pos:start="122:25" pos:end="122:27"><name pos:start="122:25" pos:end="122:27">buf</name></expr></argument>, <argument pos:start="122:30" pos:end="122:33"><expr pos:start="122:30" pos:end="122:33"><literal type="number" pos:start="122:30" pos:end="122:33">0x40</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="126:9" pos:end="483:34"><if pos:start="126:9" pos:end="483:34">if <condition pos:start="126:12" pos:end="126:22">(<expr pos:start="126:13" pos:end="126:21"><name pos:start="126:13" pos:end="126:21">write_pcr</name></expr>)</condition> <block pos:start="126:24" pos:end="483:34">{<block_content pos:start="128:13" pos:end="483:34">

            <expr_stmt pos:start="128:13" pos:end="128:35"><expr pos:start="128:13" pos:end="128:34"><call pos:start="128:13" pos:end="128:34"><name pos:start="128:13" pos:end="128:23">set_af_flag</name><argument_list pos:start="128:24" pos:end="128:34">(<argument pos:start="128:25" pos:end="128:27"><expr pos:start="128:25" pos:end="128:27"><name pos:start="128:25" pos:end="128:27">buf</name></expr></argument>, <argument pos:start="128:30" pos:end="128:33"><expr pos:start="128:30" pos:end="128:33"><literal type="number" pos:start="128:30" pos:end="128:33">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


            <comment type="line" pos:start="131:13" pos:end="131:83">// add 11, pcr references the last byte of program clock reference base</comment>

            <if_stmt pos:start="133:13" pos:end="139:42"><if pos:start="133:13" pos:end="135:41">if <condition pos:start="133:16" pos:end="133:33">(<expr pos:start="133:17" pos:end="133:32"><name pos:start="133:17" pos:end="133:28"><name pos:start="133:17" pos:end="133:18">ts</name><operator pos:start="133:19" pos:end="133:20">-&gt;</operator><name pos:start="133:21" pos:end="133:28">mux_rate</name></name> <operator pos:start="133:30" pos:end="133:30">&gt;</operator> <literal type="number" pos:start="133:32" pos:end="133:32">1</literal></expr>)</condition><block type="pseudo" pos:start="135:17" pos:end="135:41"><block_content pos:start="135:17" pos:end="135:41">

                <expr_stmt pos:start="135:17" pos:end="135:41"><expr pos:start="135:17" pos:end="135:40"><name pos:start="135:17" pos:end="135:19">pcr</name> <operator pos:start="135:21" pos:end="135:21">=</operator> <call pos:start="135:23" pos:end="135:40"><name pos:start="135:23" pos:end="135:29">get_pcr</name><argument_list pos:start="135:30" pos:end="135:40">(<argument pos:start="135:31" pos:end="135:32"><expr pos:start="135:31" pos:end="135:32"><name pos:start="135:31" pos:end="135:32">ts</name></expr></argument>, <argument pos:start="135:35" pos:end="135:39"><expr pos:start="135:35" pos:end="135:39"><name pos:start="135:35" pos:end="135:39"><name pos:start="135:35" pos:end="135:35">s</name><operator pos:start="135:36" pos:end="135:37">-&gt;</operator><name pos:start="135:38" pos:end="135:39">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="137:13" pos:end="139:42">else<block type="pseudo" pos:start="139:17" pos:end="139:42"><block_content pos:start="139:17" pos:end="139:42">

                <expr_stmt pos:start="139:17" pos:end="139:42"><expr pos:start="139:17" pos:end="139:41"><name pos:start="139:17" pos:end="139:19">pcr</name> <operator pos:start="139:21" pos:end="139:21">=</operator> <operator pos:start="139:23" pos:end="139:23">(</operator><name pos:start="139:24" pos:end="139:26">dts</name> <operator pos:start="139:28" pos:end="139:28">-</operator> <name pos:start="139:30" pos:end="139:34">delay</name><operator pos:start="139:35" pos:end="139:35">)</operator> <operator pos:start="139:37" pos:end="139:37">*</operator> <literal type="number" pos:start="139:39" pos:end="139:41">300</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt pos:start="141:13" pos:end="143:72"><if pos:start="141:13" pos:end="143:72">if <condition pos:start="141:16" pos:end="141:57">(<expr pos:start="141:17" pos:end="141:56"><name pos:start="141:17" pos:end="141:19">dts</name> <operator pos:start="141:21" pos:end="141:22">!=</operator> <name pos:start="141:24" pos:end="141:37">AV_NOPTS_VALUE</name> <operator pos:start="141:39" pos:end="141:40">&amp;&amp;</operator> <name pos:start="141:42" pos:end="141:44">dts</name> <operator pos:start="141:46" pos:end="141:46">&lt;</operator> <name pos:start="141:48" pos:end="141:50">pcr</name> <operator pos:start="141:52" pos:end="141:52">/</operator> <literal type="number" pos:start="141:54" pos:end="141:56">300</literal></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:72"><block_content pos:start="143:17" pos:end="143:72">

                <expr_stmt pos:start="143:17" pos:end="143:72"><expr pos:start="143:17" pos:end="143:71"><call pos:start="143:17" pos:end="143:71"><name pos:start="143:17" pos:end="143:22">av_log</name><argument_list pos:start="143:23" pos:end="143:71">(<argument pos:start="143:24" pos:end="143:24"><expr pos:start="143:24" pos:end="143:24"><name pos:start="143:24" pos:end="143:24">s</name></expr></argument>, <argument pos:start="143:27" pos:end="143:40"><expr pos:start="143:27" pos:end="143:40"><name pos:start="143:27" pos:end="143:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="143:43" pos:end="143:70"><expr pos:start="143:43" pos:end="143:70"><literal type="string" pos:start="143:43" pos:end="143:70">"dts &lt; pcr, TS is invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:51"><expr pos:start="145:13" pos:end="145:50"><call pos:start="145:13" pos:end="145:50"><name pos:start="145:13" pos:end="145:21">extend_af</name><argument_list pos:start="145:22" pos:end="145:50">(<argument pos:start="145:23" pos:end="145:25"><expr pos:start="145:23" pos:end="145:25"><name pos:start="145:23" pos:end="145:25">buf</name></expr></argument>, <argument pos:start="145:28" pos:end="145:49"><expr pos:start="145:28" pos:end="145:49"><call pos:start="145:28" pos:end="145:49"><name pos:start="145:28" pos:end="145:41">write_pcr_bits</name><argument_list pos:start="145:42" pos:end="145:49">(<argument pos:start="145:43" pos:end="145:43"><expr pos:start="145:43" pos:end="145:43"><name pos:start="145:43" pos:end="145:43">q</name></expr></argument>, <argument pos:start="145:46" pos:end="145:48"><expr pos:start="145:46" pos:end="145:48"><name pos:start="145:46" pos:end="145:48">pcr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="149:9" pos:end="483:34"><if pos:start="149:9" pos:end="483:34">if <condition pos:start="149:12" pos:end="149:21">(<expr pos:start="149:13" pos:end="149:20"><name pos:start="149:13" pos:end="149:20">is_start</name></expr>)</condition> <block pos:start="149:23" pos:end="483:34">{<block_content pos:start="151:13" pos:end="483:34">

            <decl_stmt pos:start="151:13" pos:end="151:34"><decl pos:start="151:13" pos:end="151:33"><type pos:start="151:13" pos:end="151:15"><name pos:start="151:13" pos:end="151:15">int</name></type> <name pos:start="151:17" pos:end="151:29">pes_extension</name> <init pos:start="151:31" pos:end="151:33">= <expr pos:start="151:33" pos:end="151:33"><literal type="number" pos:start="151:33" pos:end="151:33">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="153:13" pos:end="153:46"><decl pos:start="153:13" pos:end="153:45"><type pos:start="153:13" pos:end="153:15"><name pos:start="153:13" pos:end="153:15">int</name></type> <name pos:start="153:17" pos:end="153:41">pes_header_stuffing_bytes</name> <init pos:start="153:43" pos:end="153:45">= <expr pos:start="153:45" pos:end="153:45"><literal type="number" pos:start="153:45" pos:end="153:45">0</literal></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="155:13" pos:end="155:34">/* write PES header */</comment>

            <expr_stmt pos:start="157:13" pos:end="157:24"><expr pos:start="157:13" pos:end="157:23"><operator pos:start="157:13" pos:end="157:13">*</operator><name pos:start="157:14" pos:end="157:14">q</name><operator pos:start="157:15" pos:end="157:16">++</operator> <operator pos:start="157:18" pos:end="157:18">=</operator> <literal type="number" pos:start="157:20" pos:end="157:23">0x00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:24"><expr pos:start="159:13" pos:end="159:23"><operator pos:start="159:13" pos:end="159:13">*</operator><name pos:start="159:14" pos:end="159:14">q</name><operator pos:start="159:15" pos:end="159:16">++</operator> <operator pos:start="159:18" pos:end="159:18">=</operator> <literal type="number" pos:start="159:20" pos:end="159:23">0x00</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:24"><expr pos:start="161:13" pos:end="161:23"><operator pos:start="161:13" pos:end="161:13">*</operator><name pos:start="161:14" pos:end="161:14">q</name><operator pos:start="161:15" pos:end="161:16">++</operator> <operator pos:start="161:18" pos:end="161:18">=</operator> <literal type="number" pos:start="161:20" pos:end="161:23">0x01</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:32"><expr pos:start="163:13" pos:end="163:31"><name pos:start="163:13" pos:end="163:27">is_dvb_subtitle</name> <operator pos:start="163:29" pos:end="163:29">=</operator> <literal type="number" pos:start="163:31" pos:end="163:31">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="165:13" pos:end="165:32"><expr pos:start="165:13" pos:end="165:31"><name pos:start="165:13" pos:end="165:27">is_dvb_teletext</name> <operator pos:start="165:29" pos:end="165:29">=</operator> <literal type="number" pos:start="165:31" pos:end="165:31">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="167:13" pos:end="483:34"><if pos:start="167:13" pos:end="177:13">if <condition pos:start="167:16" pos:end="167:63">(<expr pos:start="167:17" pos:end="167:62"><name pos:start="167:17" pos:end="167:40"><name pos:start="167:17" pos:end="167:18">st</name><operator pos:start="167:19" pos:end="167:20">-&gt;</operator><name pos:start="167:21" pos:end="167:28">codecpar</name><operator pos:start="167:29" pos:end="167:30">-&gt;</operator><name pos:start="167:31" pos:end="167:40">codec_type</name></name> <operator pos:start="167:42" pos:end="167:43">==</operator> <name pos:start="167:45" pos:end="167:62">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="167:65" pos:end="177:13">{<block_content pos:start="169:17" pos:end="175:32">

                <if_stmt pos:start="169:17" pos:end="175:32"><if pos:start="169:17" pos:end="171:32">if <condition pos:start="169:20" pos:end="169:64">(<expr pos:start="169:21" pos:end="169:63"><name pos:start="169:21" pos:end="169:42"><name pos:start="169:21" pos:end="169:22">st</name><operator pos:start="169:23" pos:end="169:24">-&gt;</operator><name pos:start="169:25" pos:end="169:32">codecpar</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:42">codec_id</name></name> <operator pos:start="169:44" pos:end="169:45">==</operator> <name pos:start="169:47" pos:end="169:63">AV_CODEC_ID_DIRAC</name></expr>)</condition><block type="pseudo" pos:start="171:21" pos:end="171:32"><block_content pos:start="171:21" pos:end="171:32">

                    <expr_stmt pos:start="171:21" pos:end="171:32"><expr pos:start="171:21" pos:end="171:31"><operator pos:start="171:21" pos:end="171:21">*</operator><name pos:start="171:22" pos:end="171:22">q</name><operator pos:start="171:23" pos:end="171:24">++</operator> <operator pos:start="171:26" pos:end="171:26">=</operator> <literal type="number" pos:start="171:28" pos:end="171:31">0xfd</literal></expr>;</expr_stmt></block_content></block></if>

                <else pos:start="173:17" pos:end="175:32">else<block type="pseudo" pos:start="175:21" pos:end="175:32"><block_content pos:start="175:21" pos:end="175:32">

                    <expr_stmt pos:start="175:21" pos:end="175:32"><expr pos:start="175:21" pos:end="175:31"><operator pos:start="175:21" pos:end="175:21">*</operator><name pos:start="175:22" pos:end="175:22">q</name><operator pos:start="175:23" pos:end="175:24">++</operator> <operator pos:start="175:26" pos:end="175:26">=</operator> <literal type="number" pos:start="175:28" pos:end="175:31">0xe0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="177:15" pos:end="187:13">else if <condition pos:start="177:23" pos:end="183:67">(<expr pos:start="177:24" pos:end="183:66"><name pos:start="177:24" pos:end="177:47"><name pos:start="177:24" pos:end="177:25">st</name><operator pos:start="177:26" pos:end="177:27">-&gt;</operator><name pos:start="177:28" pos:end="177:35">codecpar</name><operator pos:start="177:36" pos:end="177:37">-&gt;</operator><name pos:start="177:38" pos:end="177:47">codec_type</name></name> <operator pos:start="177:49" pos:end="177:50">==</operator> <name pos:start="177:52" pos:end="177:69">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="177:71" pos:end="177:72">&amp;&amp;</operator>

                       <operator pos:start="179:24" pos:end="179:24">(</operator><name pos:start="179:25" pos:end="179:46"><name pos:start="179:25" pos:end="179:26">st</name><operator pos:start="179:27" pos:end="179:28">-&gt;</operator><name pos:start="179:29" pos:end="179:36">codecpar</name><operator pos:start="179:37" pos:end="179:38">-&gt;</operator><name pos:start="179:39" pos:end="179:46">codec_id</name></name> <operator pos:start="179:48" pos:end="179:49">==</operator> <name pos:start="179:51" pos:end="179:65">AV_CODEC_ID_MP2</name> <operator pos:start="179:67" pos:end="179:68">||</operator>

                        <name pos:start="181:25" pos:end="181:46"><name pos:start="181:25" pos:end="181:26">st</name><operator pos:start="181:27" pos:end="181:28">-&gt;</operator><name pos:start="181:29" pos:end="181:36">codecpar</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:46">codec_id</name></name> <operator pos:start="181:48" pos:end="181:49">==</operator> <name pos:start="181:51" pos:end="181:65">AV_CODEC_ID_MP3</name> <operator pos:start="181:67" pos:end="181:68">||</operator>

                        <name pos:start="183:25" pos:end="183:46"><name pos:start="183:25" pos:end="183:26">st</name><operator pos:start="183:27" pos:end="183:28">-&gt;</operator><name pos:start="183:29" pos:end="183:36">codecpar</name><operator pos:start="183:37" pos:end="183:38">-&gt;</operator><name pos:start="183:39" pos:end="183:46">codec_id</name></name> <operator pos:start="183:48" pos:end="183:49">==</operator> <name pos:start="183:51" pos:end="183:65">AV_CODEC_ID_AAC</name><operator pos:start="183:66" pos:end="183:66">)</operator></expr>)</condition> <block pos:start="183:69" pos:end="187:13">{<block_content pos:start="185:17" pos:end="185:28">

                <expr_stmt pos:start="185:17" pos:end="185:28"><expr pos:start="185:17" pos:end="185:27"><operator pos:start="185:17" pos:end="185:17">*</operator><name pos:start="185:18" pos:end="185:18">q</name><operator pos:start="185:19" pos:end="185:20">++</operator> <operator pos:start="185:22" pos:end="185:22">=</operator> <literal type="number" pos:start="185:24" pos:end="185:27">0xc0</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="187:15" pos:end="195:13">else if <condition pos:start="187:23" pos:end="191:38">(<expr pos:start="187:24" pos:end="191:37"><name pos:start="187:24" pos:end="187:47"><name pos:start="187:24" pos:end="187:25">st</name><operator pos:start="187:26" pos:end="187:27">-&gt;</operator><name pos:start="187:28" pos:end="187:35">codecpar</name><operator pos:start="187:36" pos:end="187:37">-&gt;</operator><name pos:start="187:38" pos:end="187:47">codec_type</name></name> <operator pos:start="187:49" pos:end="187:50">==</operator> <name pos:start="187:52" pos:end="187:69">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="187:71" pos:end="187:72">&amp;&amp;</operator>

                        <name pos:start="189:25" pos:end="189:46"><name pos:start="189:25" pos:end="189:26">st</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:36">codecpar</name><operator pos:start="189:37" pos:end="189:38">-&gt;</operator><name pos:start="189:39" pos:end="189:46">codec_id</name></name> <operator pos:start="189:48" pos:end="189:49">==</operator> <name pos:start="189:51" pos:end="189:65">AV_CODEC_ID_AC3</name> <operator pos:start="189:67" pos:end="189:68">&amp;&amp;</operator>

                        <name pos:start="191:25" pos:end="191:37"><name pos:start="191:25" pos:end="191:26">ts</name><operator pos:start="191:27" pos:end="191:28">-&gt;</operator><name pos:start="191:29" pos:end="191:37">m2ts_mode</name></name></expr>)</condition> <block pos:start="191:40" pos:end="195:13">{<block_content pos:start="193:17" pos:end="193:28">

                <expr_stmt pos:start="193:17" pos:end="193:28"><expr pos:start="193:17" pos:end="193:27"><operator pos:start="193:17" pos:end="193:17">*</operator><name pos:start="193:18" pos:end="193:18">q</name><operator pos:start="193:19" pos:end="193:20">++</operator> <operator pos:start="193:22" pos:end="193:22">=</operator> <literal type="number" pos:start="193:24" pos:end="193:27">0xfd</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="195:15" pos:end="201:13">else if <condition pos:start="195:23" pos:end="197:71">(<expr pos:start="195:24" pos:end="197:70"><name pos:start="195:24" pos:end="195:47"><name pos:start="195:24" pos:end="195:25">st</name><operator pos:start="195:26" pos:end="195:27">-&gt;</operator><name pos:start="195:28" pos:end="195:35">codecpar</name><operator pos:start="195:36" pos:end="195:37">-&gt;</operator><name pos:start="195:38" pos:end="195:47">codec_type</name></name> <operator pos:start="195:49" pos:end="195:50">==</operator> <name pos:start="195:52" pos:end="195:68">AVMEDIA_TYPE_DATA</name> <operator pos:start="195:70" pos:end="195:71">&amp;&amp;</operator>

                       <name pos:start="197:24" pos:end="197:45"><name pos:start="197:24" pos:end="197:25">st</name><operator pos:start="197:26" pos:end="197:27">-&gt;</operator><name pos:start="197:28" pos:end="197:35">codecpar</name><operator pos:start="197:36" pos:end="197:37">-&gt;</operator><name pos:start="197:38" pos:end="197:45">codec_id</name></name> <operator pos:start="197:47" pos:end="197:48">==</operator> <name pos:start="197:50" pos:end="197:70">AV_CODEC_ID_TIMED_ID3</name></expr>)</condition> <block pos:start="197:73" pos:end="201:13">{<block_content pos:start="199:17" pos:end="199:28">

                <expr_stmt pos:start="199:17" pos:end="199:28"><expr pos:start="199:17" pos:end="199:27"><operator pos:start="199:17" pos:end="199:17">*</operator><name pos:start="199:18" pos:end="199:18">q</name><operator pos:start="199:19" pos:end="199:20">++</operator> <operator pos:start="199:22" pos:end="199:22">=</operator> <literal type="number" pos:start="199:24" pos:end="199:27">0xbd</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="201:15" pos:end="211:13">else if <condition pos:start="201:23" pos:end="201:69">(<expr pos:start="201:24" pos:end="201:68"><name pos:start="201:24" pos:end="201:47"><name pos:start="201:24" pos:end="201:25">st</name><operator pos:start="201:26" pos:end="201:27">-&gt;</operator><name pos:start="201:28" pos:end="201:35">codecpar</name><operator pos:start="201:36" pos:end="201:37">-&gt;</operator><name pos:start="201:38" pos:end="201:47">codec_type</name></name> <operator pos:start="201:49" pos:end="201:50">==</operator> <name pos:start="201:52" pos:end="201:68">AVMEDIA_TYPE_DATA</name></expr>)</condition> <block pos:start="201:71" pos:end="211:13">{<block_content pos:start="203:17" pos:end="209:47">

                <expr_stmt pos:start="203:17" pos:end="203:58"><expr pos:start="203:17" pos:end="203:57"><operator pos:start="203:17" pos:end="203:17">*</operator><name pos:start="203:18" pos:end="203:18">q</name><operator pos:start="203:19" pos:end="203:20">++</operator> <operator pos:start="203:22" pos:end="203:22">=</operator> <ternary pos:start="203:24" pos:end="203:57"><condition pos:start="203:24" pos:end="203:40"><expr pos:start="203:24" pos:end="203:38"><name pos:start="203:24" pos:end="203:32">stream_id</name> <operator pos:start="203:34" pos:end="203:35">!=</operator> <operator pos:start="203:37" pos:end="203:37">-</operator><literal type="number" pos:start="203:38" pos:end="203:38">1</literal></expr> ?</condition><then pos:start="203:42" pos:end="203:50"> <expr pos:start="203:42" pos:end="203:50"><name pos:start="203:42" pos:end="203:50">stream_id</name></expr> </then><else pos:start="203:52" pos:end="203:57">: <expr pos:start="203:54" pos:end="203:57"><literal type="number" pos:start="203:54" pos:end="203:57">0xfc</literal></expr></else></ternary></expr>;</expr_stmt>



                <if_stmt pos:start="207:17" pos:end="209:47"><if pos:start="207:17" pos:end="209:47">if <condition pos:start="207:20" pos:end="207:38">(<expr pos:start="207:21" pos:end="207:37"><name pos:start="207:21" pos:end="207:29">stream_id</name> <operator pos:start="207:31" pos:end="207:32">==</operator> <literal type="number" pos:start="207:34" pos:end="207:37">0xbd</literal></expr>)</condition><block type="pseudo" pos:start="209:21" pos:end="209:47"><block_content pos:start="209:21" pos:end="209:47"> <comment type="block" pos:start="207:40" pos:end="207:61">/* asynchronous KLV */</comment>

                    <expr_stmt pos:start="209:21" pos:end="209:47"><expr pos:start="209:21" pos:end="209:46"><name pos:start="209:21" pos:end="209:23">pts</name> <operator pos:start="209:25" pos:end="209:25">=</operator> <name pos:start="209:27" pos:end="209:29">dts</name> <operator pos:start="209:31" pos:end="209:31">=</operator> <name pos:start="209:33" pos:end="209:46">AV_NOPTS_VALUE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></if> <else pos:start="211:15" pos:end="483:34">else <block pos:start="211:20" pos:end="483:34">{<block_content pos:start="213:17" pos:end="483:34">

                <expr_stmt pos:start="213:17" pos:end="213:28"><expr pos:start="213:17" pos:end="213:27"><operator pos:start="213:17" pos:end="213:17">*</operator><name pos:start="213:18" pos:end="213:18">q</name><operator pos:start="213:19" pos:end="213:20">++</operator> <operator pos:start="213:22" pos:end="213:22">=</operator> <literal type="number" pos:start="213:24" pos:end="213:27">0xbd</literal></expr>;</expr_stmt>

                <if_stmt pos:start="215:17" pos:end="483:34"><if pos:start="215:17" pos:end="483:34">if <condition pos:start="215:20" pos:end="215:70">(<expr pos:start="215:21" pos:end="215:69"><name pos:start="215:21" pos:end="215:44"><name pos:start="215:21" pos:end="215:22">st</name><operator pos:start="215:23" pos:end="215:24">-&gt;</operator><name pos:start="215:25" pos:end="215:32">codecpar</name><operator pos:start="215:33" pos:end="215:34">-&gt;</operator><name pos:start="215:35" pos:end="215:44">codec_type</name></name> <operator pos:start="215:46" pos:end="215:47">==</operator> <name pos:start="215:49" pos:end="215:69">AVMEDIA_TYPE_SUBTITLE</name></expr>)</condition> <block pos:start="215:72" pos:end="483:34">{<block_content pos:start="217:21" pos:end="483:34">

                    <if_stmt pos:start="217:21" pos:end="483:34"><if pos:start="217:21" pos:end="221:21">if <condition pos:start="217:24" pos:end="217:75">(<expr pos:start="217:25" pos:end="217:74"><name pos:start="217:25" pos:end="217:46"><name pos:start="217:25" pos:end="217:26">st</name><operator pos:start="217:27" pos:end="217:28">-&gt;</operator><name pos:start="217:29" pos:end="217:36">codecpar</name><operator pos:start="217:37" pos:end="217:38">-&gt;</operator><name pos:start="217:39" pos:end="217:46">codec_id</name></name> <operator pos:start="217:48" pos:end="217:49">==</operator> <name pos:start="217:51" pos:end="217:74">AV_CODEC_ID_DVB_SUBTITLE</name></expr>)</condition> <block pos:start="217:77" pos:end="221:21">{<block_content pos:start="219:25" pos:end="219:44">

                        <expr_stmt pos:start="219:25" pos:end="219:44"><expr pos:start="219:25" pos:end="219:43"><name pos:start="219:25" pos:end="219:39">is_dvb_subtitle</name> <operator pos:start="219:41" pos:end="219:41">=</operator> <literal type="number" pos:start="219:43" pos:end="219:43">1</literal></expr>;</expr_stmt>

                    </block_content>}</block></if> <if type="elseif" pos:start="221:23" pos:end="483:34">else if <condition pos:start="221:31" pos:end="221:82">(<expr pos:start="221:32" pos:end="221:81"><name pos:start="221:32" pos:end="221:53"><name pos:start="221:32" pos:end="221:33">st</name><operator pos:start="221:34" pos:end="221:35">-&gt;</operator><name pos:start="221:36" pos:end="221:43">codecpar</name><operator pos:start="221:44" pos:end="221:45">-&gt;</operator><name pos:start="221:46" pos:end="221:53">codec_id</name></name> <operator pos:start="221:55" pos:end="221:56">==</operator> <name pos:start="221:58" pos:end="221:81">AV_CODEC_ID_DVB_TELETEXT</name></expr>)</condition> <block pos:start="221:84" pos:end="483:34">{<block_content pos:start="223:25" pos:end="483:34">

                        <expr_stmt pos:start="223:25" pos:end="223:44"><expr pos:start="223:25" pos:end="223:43"><name pos:start="223:25" pos:end="223:39">is_dvb_teletext</name> <operator pos:start="223:41" pos:end="223:41">=</operator> <literal type="number" pos:start="223:43" pos:end="223:43">1</literal></expr>;</expr_stmt>




            <expr_stmt pos:start="228:13" pos:end="228:27"><expr pos:start="228:13" pos:end="228:26"><name pos:start="228:13" pos:end="228:22">header_len</name> <operator pos:start="228:24" pos:end="228:24">=</operator> <literal type="number" pos:start="228:26" pos:end="228:26">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="230:13" pos:end="230:27"><expr pos:start="230:13" pos:end="230:26"><name pos:start="230:13" pos:end="230:17">flags</name>      <operator pos:start="230:24" pos:end="230:24">=</operator> <literal type="number" pos:start="230:26" pos:end="230:26">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="232:13" pos:end="483:34"><if pos:start="232:13" pos:end="483:34">if <condition pos:start="232:16" pos:end="232:38">(<expr pos:start="232:17" pos:end="232:37"><name pos:start="232:17" pos:end="232:19">pts</name> <operator pos:start="232:21" pos:end="232:22">!=</operator> <name pos:start="232:24" pos:end="232:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="232:40" pos:end="483:34">{<block_content pos:start="234:17" pos:end="483:34">

                <expr_stmt pos:start="234:17" pos:end="234:32"><expr pos:start="234:17" pos:end="234:31"><name pos:start="234:17" pos:end="234:26">header_len</name> <operator pos:start="234:28" pos:end="234:29">+=</operator> <literal type="number" pos:start="234:31" pos:end="234:31">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="236:17" pos:end="236:35"><expr pos:start="236:17" pos:end="236:34"><name pos:start="236:17" pos:end="236:21">flags</name>      <operator pos:start="236:28" pos:end="236:29">|=</operator> <literal type="number" pos:start="236:31" pos:end="236:34">0x80</literal></expr>;</expr_stmt>


            <if_stmt pos:start="239:13" pos:end="483:34"><if pos:start="239:13" pos:end="483:34">if <condition pos:start="239:16" pos:end="239:77">(<expr pos:start="239:17" pos:end="239:76"><name pos:start="239:17" pos:end="239:19">dts</name> <operator pos:start="239:21" pos:end="239:22">!=</operator> <name pos:start="239:24" pos:end="239:37">AV_NOPTS_VALUE</name> <operator pos:start="239:39" pos:end="239:40">&amp;&amp;</operator> <name pos:start="239:42" pos:end="239:44">pts</name> <operator pos:start="239:46" pos:end="239:47">!=</operator> <name pos:start="239:49" pos:end="239:62">AV_NOPTS_VALUE</name> <operator pos:start="239:64" pos:end="239:65">&amp;&amp;</operator> <name pos:start="239:67" pos:end="239:69">dts</name> <operator pos:start="239:71" pos:end="239:72">!=</operator> <name pos:start="239:74" pos:end="239:76">pts</name></expr>)</condition> <block pos:start="239:79" pos:end="483:34">{<block_content pos:start="241:17" pos:end="483:34">

                <expr_stmt pos:start="241:17" pos:end="241:32"><expr pos:start="241:17" pos:end="241:31"><name pos:start="241:17" pos:end="241:26">header_len</name> <operator pos:start="241:28" pos:end="241:29">+=</operator> <literal type="number" pos:start="241:31" pos:end="241:31">5</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="243:17" pos:end="243:35"><expr pos:start="243:17" pos:end="243:34"><name pos:start="243:17" pos:end="243:21">flags</name>      <operator pos:start="243:28" pos:end="243:29">|=</operator> <literal type="number" pos:start="243:31" pos:end="243:34">0x40</literal></expr>;</expr_stmt>


            <if_stmt pos:start="246:13" pos:end="483:34"><if pos:start="246:13" pos:end="483:34">if <condition pos:start="246:16" pos:end="248:60">(<expr pos:start="246:17" pos:end="248:59"><name pos:start="246:17" pos:end="246:40"><name pos:start="246:17" pos:end="246:18">st</name><operator pos:start="246:19" pos:end="246:20">-&gt;</operator><name pos:start="246:21" pos:end="246:28">codecpar</name><operator pos:start="246:29" pos:end="246:30">-&gt;</operator><name pos:start="246:31" pos:end="246:40">codec_type</name></name> <operator pos:start="246:42" pos:end="246:43">==</operator> <name pos:start="246:45" pos:end="246:62">AVMEDIA_TYPE_VIDEO</name> <operator pos:start="246:64" pos:end="246:65">&amp;&amp;</operator>

                <name pos:start="248:17" pos:end="248:38"><name pos:start="248:17" pos:end="248:18">st</name><operator pos:start="248:19" pos:end="248:20">-&gt;</operator><name pos:start="248:21" pos:end="248:28">codecpar</name><operator pos:start="248:29" pos:end="248:30">-&gt;</operator><name pos:start="248:31" pos:end="248:38">codec_id</name></name> <operator pos:start="248:40" pos:end="248:41">==</operator> <name pos:start="248:43" pos:end="248:59">AV_CODEC_ID_DIRAC</name></expr>)</condition> <block pos:start="248:62" pos:end="483:34">{<block_content pos:start="252:17" pos:end="483:34">

                <comment type="block" pos:start="250:17" pos:end="250:44">/* set PES_extension_flag */</comment>

                <expr_stmt pos:start="252:17" pos:end="252:34"><expr pos:start="252:17" pos:end="252:33"><name pos:start="252:17" pos:end="252:29">pes_extension</name> <operator pos:start="252:31" pos:end="252:31">=</operator> <literal type="number" pos:start="252:33" pos:end="252:33">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="254:17" pos:end="254:37"><expr pos:start="254:17" pos:end="254:36"><name pos:start="254:17" pos:end="254:21">flags</name>        <operator pos:start="254:30" pos:end="254:31">|=</operator> <literal type="number" pos:start="254:33" pos:end="254:36">0x01</literal></expr>;</expr_stmt>



                <comment type="block" pos:start="258:17" pos:end="262:47">/* One byte for PES2 extension flag +

                 * one byte for extension length +

                 * one byte for extension id */</comment>

                <expr_stmt pos:start="264:17" pos:end="264:32"><expr pos:start="264:17" pos:end="264:31"><name pos:start="264:17" pos:end="264:26">header_len</name> <operator pos:start="264:28" pos:end="264:29">+=</operator> <literal type="number" pos:start="264:31" pos:end="264:31">3</literal></expr>;</expr_stmt>


            <comment type="block" pos:start="267:13" pos:end="271:15">/* for Blu-ray AC3 Audio the PES Extension flag should be as follow

             * otherwise it will not play sound on blu-ray

             */</comment>

            <if_stmt pos:start="273:13" pos:end="483:34"><if pos:start="273:13" pos:end="483:34">if <condition pos:start="273:16" pos:end="277:58">(<expr pos:start="273:17" pos:end="277:57"><name pos:start="273:17" pos:end="273:29"><name pos:start="273:17" pos:end="273:18">ts</name><operator pos:start="273:19" pos:end="273:20">-&gt;</operator><name pos:start="273:21" pos:end="273:29">m2ts_mode</name></name> <operator pos:start="273:31" pos:end="273:32">&amp;&amp;</operator>

                <name pos:start="275:17" pos:end="275:40"><name pos:start="275:17" pos:end="275:18">st</name><operator pos:start="275:19" pos:end="275:20">-&gt;</operator><name pos:start="275:21" pos:end="275:28">codecpar</name><operator pos:start="275:29" pos:end="275:30">-&gt;</operator><name pos:start="275:31" pos:end="275:40">codec_type</name></name> <operator pos:start="275:42" pos:end="275:43">==</operator> <name pos:start="275:45" pos:end="275:62">AVMEDIA_TYPE_AUDIO</name> <operator pos:start="275:64" pos:end="275:65">&amp;&amp;</operator>

                <name pos:start="277:17" pos:end="277:38"><name pos:start="277:17" pos:end="277:18">st</name><operator pos:start="277:19" pos:end="277:20">-&gt;</operator><name pos:start="277:21" pos:end="277:28">codecpar</name><operator pos:start="277:29" pos:end="277:30">-&gt;</operator><name pos:start="277:31" pos:end="277:38">codec_id</name></name> <operator pos:start="277:40" pos:end="277:41">==</operator> <name pos:start="277:43" pos:end="277:57">AV_CODEC_ID_AC3</name></expr>)</condition> <block pos:start="277:60" pos:end="483:34">{<block_content pos:start="281:25" pos:end="483:34">

                        <comment type="block" pos:start="279:25" pos:end="279:52">/* set PES_extension_flag */</comment>

                        <expr_stmt pos:start="281:25" pos:end="281:42"><expr pos:start="281:25" pos:end="281:41"><name pos:start="281:25" pos:end="281:37">pes_extension</name> <operator pos:start="281:39" pos:end="281:39">=</operator> <literal type="number" pos:start="281:41" pos:end="281:41">1</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="283:25" pos:end="283:38"><expr pos:start="283:25" pos:end="283:37"><name pos:start="283:25" pos:end="283:29">flags</name> <operator pos:start="283:31" pos:end="283:32">|=</operator> <literal type="number" pos:start="283:34" pos:end="283:37">0x01</literal></expr>;</expr_stmt>

                        <expr_stmt pos:start="285:25" pos:end="285:40"><expr pos:start="285:25" pos:end="285:39"><name pos:start="285:25" pos:end="285:34">header_len</name> <operator pos:start="285:36" pos:end="285:37">+=</operator> <literal type="number" pos:start="285:39" pos:end="285:39">3</literal></expr>;</expr_stmt>


            <if_stmt pos:start="288:13" pos:end="483:34"><if pos:start="288:13" pos:end="483:34">if <condition pos:start="288:16" pos:end="288:32">(<expr pos:start="288:17" pos:end="288:31"><name pos:start="288:17" pos:end="288:31">is_dvb_teletext</name></expr>)</condition> <block pos:start="288:34" pos:end="483:34">{<block_content pos:start="290:17" pos:end="483:34">

                <expr_stmt pos:start="290:17" pos:end="290:62"><expr pos:start="290:17" pos:end="290:61"><name pos:start="290:17" pos:end="290:41">pes_header_stuffing_bytes</name> <operator pos:start="290:43" pos:end="290:43">=</operator> <literal type="number" pos:start="290:45" pos:end="290:50">0x24</literal> <operator pos:start="290:50" pos:end="290:50">-</operator> <name pos:start="290:52" pos:end="290:61">header_len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="292:17" pos:end="292:34"><expr pos:start="292:17" pos:end="292:33"><name pos:start="292:17" pos:end="292:26">header_len</name> <operator pos:start="292:28" pos:end="292:28">=</operator> <literal type="number" pos:start="292:30" pos:end="292:33">0x24</literal></expr>;</expr_stmt>


            <expr_stmt pos:start="295:13" pos:end="295:48"><expr pos:start="295:13" pos:end="295:47"><name pos:start="295:13" pos:end="295:15">len</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <name pos:start="295:19" pos:end="295:30">payload_size</name> <operator pos:start="295:32" pos:end="295:32">+</operator> <name pos:start="295:34" pos:end="295:43">header_len</name> <operator pos:start="295:45" pos:end="295:45">+</operator> <literal type="number" pos:start="295:47" pos:end="295:47">3</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="297:13" pos:end="297:117">/* 3 extra bytes should be added to DVB subtitle payload: 0x20 0x00 at the beginning and trailing 0xff */</comment>

            <if_stmt pos:start="299:13" pos:end="483:34"><if pos:start="299:13" pos:end="483:34">if <condition pos:start="299:16" pos:end="299:32">(<expr pos:start="299:17" pos:end="299:31"><name pos:start="299:17" pos:end="299:31">is_dvb_subtitle</name></expr>)</condition> <block pos:start="299:34" pos:end="483:34">{<block_content pos:start="301:17" pos:end="483:34">

                <expr_stmt pos:start="301:17" pos:end="301:25"><expr pos:start="301:17" pos:end="301:24"><name pos:start="301:17" pos:end="301:19">len</name> <operator pos:start="301:21" pos:end="301:22">+=</operator> <literal type="number" pos:start="301:24" pos:end="301:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="303:17" pos:end="303:31"><expr pos:start="303:17" pos:end="303:30"><name pos:start="303:17" pos:end="303:28">payload_size</name><operator pos:start="303:29" pos:end="303:30">++</operator></expr>;</expr_stmt>


            <if_stmt pos:start="306:13" pos:end="308:24"><if pos:start="306:13" pos:end="308:24">if <condition pos:start="306:16" pos:end="306:29">(<expr pos:start="306:17" pos:end="306:28"><name pos:start="306:17" pos:end="306:19">len</name> <operator pos:start="306:21" pos:end="306:21">&gt;</operator> <literal type="number" pos:start="306:23" pos:end="306:28">0xffff</literal></expr>)</condition><block type="pseudo" pos:start="308:17" pos:end="308:24"><block_content pos:start="308:17" pos:end="308:24">

                <expr_stmt pos:start="308:17" pos:end="308:24"><expr pos:start="308:17" pos:end="308:23"><name pos:start="308:17" pos:end="308:19">len</name> <operator pos:start="308:21" pos:end="308:21">=</operator> <literal type="number" pos:start="308:23" pos:end="308:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="310:13" pos:end="483:34"><if pos:start="310:13" pos:end="483:34">if <condition pos:start="310:16" pos:end="310:92">(<expr pos:start="310:17" pos:end="310:91"><name pos:start="310:17" pos:end="310:41"><name pos:start="310:17" pos:end="310:18">ts</name><operator pos:start="310:19" pos:end="310:20">-&gt;</operator><name pos:start="310:21" pos:end="310:41">omit_video_pes_length</name></name> <operator pos:start="310:43" pos:end="310:44">&amp;&amp;</operator> <name pos:start="310:46" pos:end="310:69"><name pos:start="310:46" pos:end="310:47">st</name><operator pos:start="310:48" pos:end="310:49">-&gt;</operator><name pos:start="310:50" pos:end="310:57">codecpar</name><operator pos:start="310:58" pos:end="310:59">-&gt;</operator><name pos:start="310:60" pos:end="310:69">codec_type</name></name> <operator pos:start="310:71" pos:end="310:72">==</operator> <name pos:start="310:74" pos:end="310:91">AVMEDIA_TYPE_VIDEO</name></expr>)</condition> <block pos:start="310:94" pos:end="483:34">{<block_content pos:start="312:17" pos:end="483:34">

                <expr_stmt pos:start="312:17" pos:end="312:24"><expr pos:start="312:17" pos:end="312:23"><name pos:start="312:17" pos:end="312:19">len</name> <operator pos:start="312:21" pos:end="312:21">=</operator> <literal type="number" pos:start="312:23" pos:end="312:23">0</literal></expr>;</expr_stmt>


            <expr_stmt pos:start="315:13" pos:end="315:28"><expr pos:start="315:13" pos:end="315:27"><operator pos:start="315:13" pos:end="315:13">*</operator><name pos:start="315:14" pos:end="315:14">q</name><operator pos:start="315:15" pos:end="315:16">++</operator> <operator pos:start="315:18" pos:end="315:18">=</operator> <name pos:start="315:20" pos:end="315:22">len</name> <operator pos:start="315:24" pos:end="315:25">&gt;&gt;</operator> <literal type="number" pos:start="315:27" pos:end="315:27">8</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:23"><expr pos:start="317:13" pos:end="317:22"><operator pos:start="317:13" pos:end="317:13">*</operator><name pos:start="317:14" pos:end="317:14">q</name><operator pos:start="317:15" pos:end="317:16">++</operator> <operator pos:start="317:18" pos:end="317:18">=</operator> <name pos:start="317:20" pos:end="317:22">len</name></expr>;</expr_stmt>

            <expr_stmt pos:start="319:13" pos:end="319:24"><expr pos:start="319:13" pos:end="319:23"><name pos:start="319:13" pos:end="319:15">val</name>  <operator pos:start="319:18" pos:end="319:18">=</operator> <literal type="number" pos:start="319:20" pos:end="319:23">0x80</literal></expr>;</expr_stmt>

            <comment type="block" pos:start="321:13" pos:end="321:84">/* data alignment indicator is required for subtitle and data streams */</comment>

            <if_stmt pos:start="323:13" pos:end="325:28"><if pos:start="323:13" pos:end="325:28">if <condition pos:start="323:16" pos:end="323:115">(<expr pos:start="323:17" pos:end="323:114"><name pos:start="323:17" pos:end="323:40"><name pos:start="323:17" pos:end="323:18">st</name><operator pos:start="323:19" pos:end="323:20">-&gt;</operator><name pos:start="323:21" pos:end="323:28">codecpar</name><operator pos:start="323:29" pos:end="323:30">-&gt;</operator><name pos:start="323:31" pos:end="323:40">codec_type</name></name> <operator pos:start="323:42" pos:end="323:43">==</operator> <name pos:start="323:45" pos:end="323:65">AVMEDIA_TYPE_SUBTITLE</name> <operator pos:start="323:67" pos:end="323:68">||</operator> <name pos:start="323:70" pos:end="323:93"><name pos:start="323:70" pos:end="323:71">st</name><operator pos:start="323:72" pos:end="323:73">-&gt;</operator><name pos:start="323:74" pos:end="323:81">codecpar</name><operator pos:start="323:82" pos:end="323:83">-&gt;</operator><name pos:start="323:84" pos:end="323:93">codec_type</name></name> <operator pos:start="323:95" pos:end="323:96">==</operator> <name pos:start="323:98" pos:end="323:114">AVMEDIA_TYPE_DATA</name></expr>)</condition><block type="pseudo" pos:start="325:17" pos:end="325:28"><block_content pos:start="325:17" pos:end="325:28">

                <expr_stmt pos:start="325:17" pos:end="325:28"><expr pos:start="325:17" pos:end="325:27"><name pos:start="325:17" pos:end="325:19">val</name> <operator pos:start="325:21" pos:end="325:22">|=</operator> <literal type="number" pos:start="325:24" pos:end="325:27">0x04</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:23"><expr pos:start="327:13" pos:end="327:22"><operator pos:start="327:13" pos:end="327:13">*</operator><name pos:start="327:14" pos:end="327:14">q</name><operator pos:start="327:15" pos:end="327:16">++</operator> <operator pos:start="327:18" pos:end="327:18">=</operator> <name pos:start="327:20" pos:end="327:22">val</name></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:25"><expr pos:start="329:13" pos:end="329:24"><operator pos:start="329:13" pos:end="329:13">*</operator><name pos:start="329:14" pos:end="329:14">q</name><operator pos:start="329:15" pos:end="329:16">++</operator> <operator pos:start="329:18" pos:end="329:18">=</operator> <name pos:start="329:20" pos:end="329:24">flags</name></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:30"><expr pos:start="331:13" pos:end="331:29"><operator pos:start="331:13" pos:end="331:13">*</operator><name pos:start="331:14" pos:end="331:14">q</name><operator pos:start="331:15" pos:end="331:16">++</operator> <operator pos:start="331:18" pos:end="331:18">=</operator> <name pos:start="331:20" pos:end="331:29">header_len</name></expr>;</expr_stmt>

            <if_stmt pos:start="333:13" pos:end="483:34"><if pos:start="333:13" pos:end="483:34">if <condition pos:start="333:16" pos:end="333:38">(<expr pos:start="333:17" pos:end="333:37"><name pos:start="333:17" pos:end="333:19">pts</name> <operator pos:start="333:21" pos:end="333:22">!=</operator> <name pos:start="333:24" pos:end="333:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="333:40" pos:end="483:34">{<block_content pos:start="335:17" pos:end="483:34">

                <expr_stmt pos:start="335:17" pos:end="335:46"><expr pos:start="335:17" pos:end="335:45"><call pos:start="335:17" pos:end="335:45"><name pos:start="335:17" pos:end="335:25">write_pts</name><argument_list pos:start="335:26" pos:end="335:45">(<argument pos:start="335:27" pos:end="335:27"><expr pos:start="335:27" pos:end="335:27"><name pos:start="335:27" pos:end="335:27">q</name></expr></argument>, <argument pos:start="335:30" pos:end="335:39"><expr pos:start="335:30" pos:end="335:39"><name pos:start="335:30" pos:end="335:34">flags</name> <operator pos:start="335:36" pos:end="335:37">&gt;&gt;</operator> <literal type="number" pos:start="335:39" pos:end="335:39">6</literal></expr></argument>, <argument pos:start="335:42" pos:end="335:44"><expr pos:start="335:42" pos:end="335:44"><name pos:start="335:42" pos:end="335:44">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="337:17" pos:end="337:23"><expr pos:start="337:17" pos:end="337:22"><name pos:start="337:17" pos:end="337:17">q</name> <operator pos:start="337:19" pos:end="337:20">+=</operator> <literal type="number" pos:start="337:22" pos:end="337:22">5</literal></expr>;</expr_stmt>


            <if_stmt pos:start="340:13" pos:end="483:34"><if pos:start="340:13" pos:end="483:34">if <condition pos:start="340:16" pos:end="340:77">(<expr pos:start="340:17" pos:end="340:76"><name pos:start="340:17" pos:end="340:19">dts</name> <operator pos:start="340:21" pos:end="340:22">!=</operator> <name pos:start="340:24" pos:end="340:37">AV_NOPTS_VALUE</name> <operator pos:start="340:39" pos:end="340:40">&amp;&amp;</operator> <name pos:start="340:42" pos:end="340:44">pts</name> <operator pos:start="340:46" pos:end="340:47">!=</operator> <name pos:start="340:49" pos:end="340:62">AV_NOPTS_VALUE</name> <operator pos:start="340:64" pos:end="340:65">&amp;&amp;</operator> <name pos:start="340:67" pos:end="340:69">dts</name> <operator pos:start="340:71" pos:end="340:72">!=</operator> <name pos:start="340:74" pos:end="340:76">pts</name></expr>)</condition> <block pos:start="340:79" pos:end="483:34">{<block_content pos:start="342:17" pos:end="483:34">

                <expr_stmt pos:start="342:17" pos:end="342:37"><expr pos:start="342:17" pos:end="342:36"><call pos:start="342:17" pos:end="342:36"><name pos:start="342:17" pos:end="342:25">write_pts</name><argument_list pos:start="342:26" pos:end="342:36">(<argument pos:start="342:27" pos:end="342:27"><expr pos:start="342:27" pos:end="342:27"><name pos:start="342:27" pos:end="342:27">q</name></expr></argument>, <argument pos:start="342:30" pos:end="342:30"><expr pos:start="342:30" pos:end="342:30"><literal type="number" pos:start="342:30" pos:end="342:30">1</literal></expr></argument>, <argument pos:start="342:33" pos:end="342:35"><expr pos:start="342:33" pos:end="342:35"><name pos:start="342:33" pos:end="342:35">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="344:17" pos:end="344:23"><expr pos:start="344:17" pos:end="344:22"><name pos:start="344:17" pos:end="344:17">q</name> <operator pos:start="344:19" pos:end="344:20">+=</operator> <literal type="number" pos:start="344:22" pos:end="344:22">5</literal></expr>;</expr_stmt>


            <if_stmt pos:start="347:13" pos:end="483:34"><if pos:start="347:13" pos:end="483:34">if <condition pos:start="347:16" pos:end="347:77">(<expr pos:start="347:17" pos:end="347:76"><name pos:start="347:17" pos:end="347:29">pes_extension</name> <operator pos:start="347:31" pos:end="347:32">&amp;&amp;</operator> <name pos:start="347:34" pos:end="347:55"><name pos:start="347:34" pos:end="347:35">st</name><operator pos:start="347:36" pos:end="347:37">-&gt;</operator><name pos:start="347:38" pos:end="347:45">codecpar</name><operator pos:start="347:46" pos:end="347:47">-&gt;</operator><name pos:start="347:48" pos:end="347:55">codec_id</name></name> <operator pos:start="347:57" pos:end="347:58">==</operator> <name pos:start="347:60" pos:end="347:76">AV_CODEC_ID_DIRAC</name></expr>)</condition> <block pos:start="347:79" pos:end="483:34">{<block_content pos:start="349:17" pos:end="483:34">

                <expr_stmt pos:start="349:17" pos:end="349:29"><expr pos:start="349:17" pos:end="349:28"><name pos:start="349:17" pos:end="349:21">flags</name> <operator pos:start="349:23" pos:end="349:23">=</operator> <literal type="number" pos:start="349:25" pos:end="349:28">0x01</literal></expr>;</expr_stmt>  <comment type="block" pos:start="349:32" pos:end="349:61">/* set PES_extension_flag_2 */</comment>

                <expr_stmt pos:start="351:17" pos:end="351:30"><expr pos:start="351:17" pos:end="351:29"><operator pos:start="351:17" pos:end="351:17">*</operator><name pos:start="351:18" pos:end="351:18">q</name><operator pos:start="351:19" pos:end="351:20">++</operator>  <operator pos:start="351:23" pos:end="351:23">=</operator> <name pos:start="351:25" pos:end="351:29">flags</name></expr>;</expr_stmt>

                <expr_stmt pos:start="353:17" pos:end="353:36"><expr pos:start="353:17" pos:end="353:35"><operator pos:start="353:17" pos:end="353:17">*</operator><name pos:start="353:18" pos:end="353:18">q</name><operator pos:start="353:19" pos:end="353:20">++</operator>  <operator pos:start="353:23" pos:end="353:23">=</operator> <literal type="number" pos:start="353:25" pos:end="353:28">0x80</literal> <operator pos:start="353:30" pos:end="353:30">|</operator> <literal type="number" pos:start="353:32" pos:end="353:35">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="353:38" pos:end="353:72">/* marker bit + extension length */</comment>

                <comment type="block" pos:start="355:17" pos:end="357:51">/* Set the stream ID extension flag bit to 0 and

                 * write the extended stream ID. */</comment>

                <expr_stmt pos:start="359:17" pos:end="359:35"><expr pos:start="359:17" pos:end="359:34"><operator pos:start="359:17" pos:end="359:17">*</operator><name pos:start="359:18" pos:end="359:18">q</name><operator pos:start="359:19" pos:end="359:20">++</operator> <operator pos:start="359:22" pos:end="359:22">=</operator> <literal type="number" pos:start="359:24" pos:end="359:27">0x00</literal> <operator pos:start="359:29" pos:end="359:29">|</operator> <literal type="number" pos:start="359:31" pos:end="359:34">0x60</literal></expr>;</expr_stmt>


            <comment type="block" pos:start="362:13" pos:end="362:62">/* For Blu-ray AC3 Audio Setting extended flags */</comment>

          <if_stmt pos:start="364:11" pos:end="483:34"><if pos:start="364:11" pos:end="483:34">if <condition pos:start="364:14" pos:end="368:56">(<expr pos:start="364:15" pos:end="368:55"><name pos:start="364:15" pos:end="364:27"><name pos:start="364:15" pos:end="364:16">ts</name><operator pos:start="364:17" pos:end="364:18">-&gt;</operator><name pos:start="364:19" pos:end="364:27">m2ts_mode</name></name> <operator pos:start="364:29" pos:end="364:30">&amp;&amp;</operator>

              <name pos:start="366:15" pos:end="366:27">pes_extension</name> <operator pos:start="366:29" pos:end="366:30">&amp;&amp;</operator>

              <name pos:start="368:15" pos:end="368:36"><name pos:start="368:15" pos:end="368:16">st</name><operator pos:start="368:17" pos:end="368:18">-&gt;</operator><name pos:start="368:19" pos:end="368:26">codecpar</name><operator pos:start="368:27" pos:end="368:28">-&gt;</operator><name pos:start="368:29" pos:end="368:36">codec_id</name></name> <operator pos:start="368:38" pos:end="368:39">==</operator> <name pos:start="368:41" pos:end="368:55">AV_CODEC_ID_AC3</name></expr>)</condition> <block pos:start="368:58" pos:end="483:34">{<block_content pos:start="370:23" pos:end="483:34">

                      <expr_stmt pos:start="370:23" pos:end="370:35"><expr pos:start="370:23" pos:end="370:34"><name pos:start="370:23" pos:end="370:27">flags</name> <operator pos:start="370:29" pos:end="370:29">=</operator> <literal type="number" pos:start="370:31" pos:end="370:34">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="370:37" pos:end="370:66">/* set PES_extension_flag_2 */</comment>

                      <expr_stmt pos:start="372:23" pos:end="372:35"><expr pos:start="372:23" pos:end="372:34"><operator pos:start="372:23" pos:end="372:23">*</operator><name pos:start="372:24" pos:end="372:24">q</name><operator pos:start="372:25" pos:end="372:26">++</operator> <operator pos:start="372:28" pos:end="372:28">=</operator> <name pos:start="372:30" pos:end="372:34">flags</name></expr>;</expr_stmt>

                      <expr_stmt pos:start="374:23" pos:end="374:41"><expr pos:start="374:23" pos:end="374:40"><operator pos:start="374:23" pos:end="374:23">*</operator><name pos:start="374:24" pos:end="374:24">q</name><operator pos:start="374:25" pos:end="374:26">++</operator> <operator pos:start="374:28" pos:end="374:28">=</operator> <literal type="number" pos:start="374:30" pos:end="374:33">0x80</literal> <operator pos:start="374:35" pos:end="374:35">|</operator> <literal type="number" pos:start="374:37" pos:end="374:40">0x01</literal></expr>;</expr_stmt> <comment type="block" pos:start="374:43" pos:end="374:77">/* marker bit + extension length */</comment>

                      <expr_stmt pos:start="376:23" pos:end="376:41"><expr pos:start="376:23" pos:end="376:40"><operator pos:start="376:23" pos:end="376:23">*</operator><name pos:start="376:24" pos:end="376:24">q</name><operator pos:start="376:25" pos:end="376:26">++</operator> <operator pos:start="376:28" pos:end="376:28">=</operator> <literal type="number" pos:start="376:30" pos:end="376:33">0x00</literal> <operator pos:start="376:35" pos:end="376:35">|</operator> <literal type="number" pos:start="376:37" pos:end="376:40">0x71</literal></expr>;</expr_stmt> <comment type="block" pos:start="376:43" pos:end="376:89">/* for AC3 Audio (specifically on blue-rays) */</comment>






            <if_stmt pos:start="383:13" pos:end="483:34"><if pos:start="383:13" pos:end="483:34">if <condition pos:start="383:16" pos:end="383:32">(<expr pos:start="383:17" pos:end="383:31"><name pos:start="383:17" pos:end="383:31">is_dvb_subtitle</name></expr>)</condition> <block pos:start="383:34" pos:end="483:34">{<block_content pos:start="391:17" pos:end="483:34">

                <comment type="block" pos:start="385:17" pos:end="389:103">/* First two fields of DVB subtitles PES data:

                 * data_identifier: for DVB subtitle streams shall be coded with the value 0x20

                 * subtitle_stream_id: for DVB subtitle stream shall be identified by the value 0x00 */</comment>

                <expr_stmt pos:start="391:17" pos:end="391:28"><expr pos:start="391:17" pos:end="391:27"><operator pos:start="391:17" pos:end="391:17">*</operator><name pos:start="391:18" pos:end="391:18">q</name><operator pos:start="391:19" pos:end="391:20">++</operator> <operator pos:start="391:22" pos:end="391:22">=</operator> <literal type="number" pos:start="391:24" pos:end="391:27">0x20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:28"><expr pos:start="393:17" pos:end="393:27"><operator pos:start="393:17" pos:end="393:17">*</operator><name pos:start="393:18" pos:end="393:18">q</name><operator pos:start="393:19" pos:end="393:20">++</operator> <operator pos:start="393:22" pos:end="393:22">=</operator> <literal type="number" pos:start="393:24" pos:end="393:27">0x00</literal></expr>;</expr_stmt>


            <if_stmt pos:start="396:13" pos:end="483:34"><if pos:start="396:13" pos:end="483:34">if <condition pos:start="396:16" pos:end="396:32">(<expr pos:start="396:17" pos:end="396:31"><name pos:start="396:17" pos:end="396:31">is_dvb_teletext</name></expr>)</condition> <block pos:start="396:34" pos:end="483:34">{<block_content pos:start="398:17" pos:end="483:34">

                <expr_stmt pos:start="398:17" pos:end="398:59"><expr pos:start="398:17" pos:end="398:58"><call pos:start="398:17" pos:end="398:58"><name pos:start="398:17" pos:end="398:22">memset</name><argument_list pos:start="398:23" pos:end="398:58">(<argument pos:start="398:24" pos:end="398:24"><expr pos:start="398:24" pos:end="398:24"><name pos:start="398:24" pos:end="398:24">q</name></expr></argument>, <argument pos:start="398:27" pos:end="398:30"><expr pos:start="398:27" pos:end="398:30"><literal type="number" pos:start="398:27" pos:end="398:30">0xff</literal></expr></argument>, <argument pos:start="398:33" pos:end="398:57"><expr pos:start="398:33" pos:end="398:57"><name pos:start="398:33" pos:end="398:57">pes_header_stuffing_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="400:17" pos:end="400:47"><expr pos:start="400:17" pos:end="400:46"><name pos:start="400:17" pos:end="400:17">q</name> <operator pos:start="400:19" pos:end="400:20">+=</operator> <name pos:start="400:22" pos:end="400:46">pes_header_stuffing_bytes</name></expr>;</expr_stmt>


            <expr_stmt pos:start="403:13" pos:end="403:25"><expr pos:start="403:13" pos:end="403:24"><name pos:start="403:13" pos:end="403:20">is_start</name> <operator pos:start="403:22" pos:end="403:22">=</operator> <literal type="number" pos:start="403:24" pos:end="403:24">0</literal></expr>;</expr_stmt>


        <comment type="block" pos:start="406:9" pos:end="406:25">/* header size */</comment>

        <expr_stmt pos:start="408:9" pos:end="408:29"><expr pos:start="408:9" pos:end="408:28"><name pos:start="408:9" pos:end="408:18">header_len</name> <operator pos:start="408:20" pos:end="408:20">=</operator> <name pos:start="408:22" pos:end="408:22">q</name> <operator pos:start="408:24" pos:end="408:24">-</operator> <name pos:start="408:26" pos:end="408:28">buf</name></expr>;</expr_stmt>

        <comment type="block" pos:start="410:9" pos:end="410:22">/* data len */</comment>

        <expr_stmt pos:start="412:9" pos:end="412:42"><expr pos:start="412:9" pos:end="412:41"><name pos:start="412:9" pos:end="412:11">len</name> <operator pos:start="412:13" pos:end="412:13">=</operator> <name pos:start="412:15" pos:end="412:28">TS_PACKET_SIZE</name> <operator pos:start="412:30" pos:end="412:30">-</operator> <name pos:start="412:32" pos:end="412:41">header_len</name></expr>;</expr_stmt>

        <if_stmt pos:start="414:9" pos:end="416:31"><if pos:start="414:9" pos:end="416:31">if <condition pos:start="414:12" pos:end="414:31">(<expr pos:start="414:13" pos:end="414:30"><name pos:start="414:13" pos:end="414:15">len</name> <operator pos:start="414:17" pos:end="414:17">&gt;</operator> <name pos:start="414:19" pos:end="414:30">payload_size</name></expr>)</condition><block type="pseudo" pos:start="416:13" pos:end="416:31"><block_content pos:start="416:13" pos:end="416:31">

            <expr_stmt pos:start="416:13" pos:end="416:31"><expr pos:start="416:13" pos:end="416:30"><name pos:start="416:13" pos:end="416:15">len</name> <operator pos:start="416:17" pos:end="416:17">=</operator> <name pos:start="416:19" pos:end="416:30">payload_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="418:9" pos:end="418:57"><expr pos:start="418:9" pos:end="418:56"><name pos:start="418:9" pos:end="418:20">stuffing_len</name> <operator pos:start="418:22" pos:end="418:22">=</operator> <name pos:start="418:24" pos:end="418:37">TS_PACKET_SIZE</name> <operator pos:start="418:39" pos:end="418:39">-</operator> <name pos:start="418:41" pos:end="418:50">header_len</name> <operator pos:start="418:52" pos:end="418:52">-</operator> <name pos:start="418:54" pos:end="418:56">len</name></expr>;</expr_stmt>

        <if_stmt pos:start="420:9" pos:end="483:34"><if pos:start="420:9" pos:end="483:34">if <condition pos:start="420:12" pos:end="420:29">(<expr pos:start="420:13" pos:end="420:28"><name pos:start="420:13" pos:end="420:24">stuffing_len</name> <operator pos:start="420:26" pos:end="420:26">&gt;</operator> <literal type="number" pos:start="420:28" pos:end="420:28">0</literal></expr>)</condition> <block pos:start="420:31" pos:end="483:34">{<block_content pos:start="424:13" pos:end="483:34">

            <comment type="block" pos:start="422:13" pos:end="422:39">/* add stuffing with AFC */</comment>

            <if_stmt pos:start="424:13" pos:end="483:34"><if pos:start="424:13" pos:end="440:13">if <condition pos:start="424:16" pos:end="424:30">(<expr pos:start="424:17" pos:end="424:29"><name pos:start="424:17" pos:end="424:22"><name pos:start="424:17" pos:end="424:19">buf</name><index pos:start="424:20" pos:end="424:22">[<expr pos:start="424:21" pos:end="424:21"><literal type="number" pos:start="424:21" pos:end="424:21">3</literal></expr>]</index></name> <operator pos:start="424:24" pos:end="424:24">&amp;</operator> <literal type="number" pos:start="424:26" pos:end="424:29">0x20</literal></expr>)</condition> <block pos:start="424:32" pos:end="440:13">{<block_content pos:start="428:17" pos:end="438:62">

                <comment type="block" pos:start="426:17" pos:end="426:65">/* stuffing already present: increase its size */</comment>

                <expr_stmt pos:start="428:17" pos:end="428:37"><expr pos:start="428:17" pos:end="428:36"><name pos:start="428:17" pos:end="428:23">afc_len</name> <operator pos:start="428:25" pos:end="428:25">=</operator> <name pos:start="428:27" pos:end="428:32"><name pos:start="428:27" pos:end="428:29">buf</name><index pos:start="428:30" pos:end="428:32">[<expr pos:start="428:31" pos:end="428:31"><literal type="number" pos:start="428:31" pos:end="428:31">4</literal></expr>]</index></name> <operator pos:start="428:34" pos:end="428:34">+</operator> <literal type="number" pos:start="428:36" pos:end="428:36">1</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="430:17" pos:end="434:52"><expr pos:start="430:17" pos:end="434:51"><call pos:start="430:17" pos:end="434:51"><name pos:start="430:17" pos:end="430:23">memmove</name><argument_list pos:start="430:24" pos:end="434:51">(<argument pos:start="430:25" pos:end="430:56"><expr pos:start="430:25" pos:end="430:56"><name pos:start="430:25" pos:end="430:27">buf</name> <operator pos:start="430:29" pos:end="430:29">+</operator> <literal type="number" pos:start="430:31" pos:end="430:33">4</literal> <operator pos:start="430:33" pos:end="430:33">+</operator> <name pos:start="430:35" pos:end="430:41">afc_len</name> <operator pos:start="430:43" pos:end="430:43">+</operator> <name pos:start="430:45" pos:end="430:56">stuffing_len</name></expr></argument>,

                        <argument pos:start="432:25" pos:end="432:41"><expr pos:start="432:25" pos:end="432:41"><name pos:start="432:25" pos:end="432:27">buf</name> <operator pos:start="432:29" pos:end="432:29">+</operator> <literal type="number" pos:start="432:31" pos:end="432:33">4</literal> <operator pos:start="432:33" pos:end="432:33">+</operator> <name pos:start="432:35" pos:end="432:41">afc_len</name></expr></argument>,

                        <argument pos:start="434:25" pos:end="434:50"><expr pos:start="434:25" pos:end="434:50"><name pos:start="434:25" pos:end="434:34">header_len</name> <operator pos:start="434:36" pos:end="434:36">-</operator> <operator pos:start="434:38" pos:end="434:38">(</operator><literal type="number" pos:start="434:39" pos:end="434:41">4</literal> <operator pos:start="434:41" pos:end="434:41">+</operator> <name pos:start="434:43" pos:end="434:49">afc_len</name><operator pos:start="434:50" pos:end="434:50">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="436:17" pos:end="436:39"><expr pos:start="436:17" pos:end="436:38"><name pos:start="436:17" pos:end="436:22"><name pos:start="436:17" pos:end="436:19">buf</name><index pos:start="436:20" pos:end="436:22">[<expr pos:start="436:21" pos:end="436:21"><literal type="number" pos:start="436:21" pos:end="436:21">4</literal></expr>]</index></name> <operator pos:start="436:24" pos:end="436:25">+=</operator> <name pos:start="436:27" pos:end="436:38">stuffing_len</name></expr>;</expr_stmt>

                <expr_stmt pos:start="438:17" pos:end="438:62"><expr pos:start="438:17" pos:end="438:61"><call pos:start="438:17" pos:end="438:61"><name pos:start="438:17" pos:end="438:22">memset</name><argument_list pos:start="438:23" pos:end="438:61">(<argument pos:start="438:24" pos:end="438:40"><expr pos:start="438:24" pos:end="438:40"><name pos:start="438:24" pos:end="438:26">buf</name> <operator pos:start="438:28" pos:end="438:28">+</operator> <literal type="number" pos:start="438:30" pos:end="438:32">4</literal> <operator pos:start="438:32" pos:end="438:32">+</operator> <name pos:start="438:34" pos:end="438:40">afc_len</name></expr></argument>, <argument pos:start="438:43" pos:end="438:46"><expr pos:start="438:43" pos:end="438:46"><literal type="number" pos:start="438:43" pos:end="438:46">0xff</literal></expr></argument>, <argument pos:start="438:49" pos:end="438:60"><expr pos:start="438:49" pos:end="438:60"><name pos:start="438:49" pos:end="438:60">stuffing_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="440:15" pos:end="483:34">else <block pos:start="440:20" pos:end="483:34">{<block_content pos:start="444:17" pos:end="483:34">

                <comment type="block" pos:start="442:17" pos:end="442:34">/* add stuffing */</comment>

                <expr_stmt pos:start="444:17" pos:end="444:73"><expr pos:start="444:17" pos:end="444:72"><call pos:start="444:17" pos:end="444:72"><name pos:start="444:17" pos:end="444:23">memmove</name><argument_list pos:start="444:24" pos:end="444:72">(<argument pos:start="444:25" pos:end="444:46"><expr pos:start="444:25" pos:end="444:46"><name pos:start="444:25" pos:end="444:27">buf</name> <operator pos:start="444:29" pos:end="444:29">+</operator> <literal type="number" pos:start="444:31" pos:end="444:33">4</literal> <operator pos:start="444:33" pos:end="444:33">+</operator> <name pos:start="444:35" pos:end="444:46">stuffing_len</name></expr></argument>, <argument pos:start="444:49" pos:end="444:55"><expr pos:start="444:49" pos:end="444:55"><name pos:start="444:49" pos:end="444:51">buf</name> <operator pos:start="444:53" pos:end="444:53">+</operator> <literal type="number" pos:start="444:55" pos:end="444:55">4</literal></expr></argument>, <argument pos:start="444:58" pos:end="444:71"><expr pos:start="444:58" pos:end="444:71"><name pos:start="444:58" pos:end="444:67">header_len</name> <operator pos:start="444:69" pos:end="444:69">-</operator> <literal type="number" pos:start="444:71" pos:end="444:71">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="446:17" pos:end="446:31"><expr pos:start="446:17" pos:end="446:30"><name pos:start="446:17" pos:end="446:22"><name pos:start="446:17" pos:end="446:19">buf</name><index pos:start="446:20" pos:end="446:22">[<expr pos:start="446:21" pos:end="446:21"><literal type="number" pos:start="446:21" pos:end="446:21">3</literal></expr>]</index></name> <operator pos:start="446:24" pos:end="446:25">|=</operator> <literal type="number" pos:start="446:27" pos:end="446:30">0x20</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="448:17" pos:end="448:43"><expr pos:start="448:17" pos:end="448:42"><name pos:start="448:17" pos:end="448:22"><name pos:start="448:17" pos:end="448:19">buf</name><index pos:start="448:20" pos:end="448:22">[<expr pos:start="448:21" pos:end="448:21"><literal type="number" pos:start="448:21" pos:end="448:21">4</literal></expr>]</index></name>  <operator pos:start="448:25" pos:end="448:25">=</operator> <name pos:start="448:27" pos:end="448:38">stuffing_len</name> <operator pos:start="448:40" pos:end="448:40">-</operator> <literal type="number" pos:start="448:42" pos:end="448:42">1</literal></expr>;</expr_stmt>

                <if_stmt pos:start="450:17" pos:end="483:34"><if pos:start="450:17" pos:end="483:34">if <condition pos:start="450:20" pos:end="450:38">(<expr pos:start="450:21" pos:end="450:37"><name pos:start="450:21" pos:end="450:32">stuffing_len</name> <operator pos:start="450:34" pos:end="450:35">&gt;=</operator> <literal type="number" pos:start="450:37" pos:end="450:37">2</literal></expr>)</condition> <block pos:start="450:40" pos:end="483:34">{<block_content pos:start="452:21" pos:end="483:34">

                    <expr_stmt pos:start="452:21" pos:end="452:34"><expr pos:start="452:21" pos:end="452:33"><name pos:start="452:21" pos:end="452:26"><name pos:start="452:21" pos:end="452:23">buf</name><index pos:start="452:24" pos:end="452:26">[<expr pos:start="452:25" pos:end="452:25"><literal type="number" pos:start="452:25" pos:end="452:25">5</literal></expr>]</index></name> <operator pos:start="452:28" pos:end="452:28">=</operator> <literal type="number" pos:start="452:30" pos:end="452:33">0x00</literal></expr>;</expr_stmt>

                    <expr_stmt pos:start="454:21" pos:end="454:60"><expr pos:start="454:21" pos:end="454:59"><call pos:start="454:21" pos:end="454:59"><name pos:start="454:21" pos:end="454:26">memset</name><argument_list pos:start="454:27" pos:end="454:59">(<argument pos:start="454:28" pos:end="454:34"><expr pos:start="454:28" pos:end="454:34"><name pos:start="454:28" pos:end="454:30">buf</name> <operator pos:start="454:32" pos:end="454:32">+</operator> <literal type="number" pos:start="454:34" pos:end="454:34">6</literal></expr></argument>, <argument pos:start="454:37" pos:end="454:40"><expr pos:start="454:37" pos:end="454:40"><literal type="number" pos:start="454:37" pos:end="454:40">0xff</literal></expr></argument>, <argument pos:start="454:43" pos:end="454:58"><expr pos:start="454:43" pos:end="454:58"><name pos:start="454:43" pos:end="454:54">stuffing_len</name> <operator pos:start="454:56" pos:end="454:56">-</operator> <literal type="number" pos:start="454:58" pos:end="454:58">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>






        <if_stmt pos:start="461:9" pos:end="483:34"><if pos:start="461:9" pos:end="467:9">if <condition pos:start="461:12" pos:end="461:51">(<expr pos:start="461:13" pos:end="461:50"><name pos:start="461:13" pos:end="461:27">is_dvb_subtitle</name> <operator pos:start="461:29" pos:end="461:30">&amp;&amp;</operator> <name pos:start="461:32" pos:end="461:43">payload_size</name> <operator pos:start="461:45" pos:end="461:46">==</operator> <name pos:start="461:48" pos:end="461:50">len</name></expr>)</condition> <block pos:start="461:53" pos:end="467:9">{<block_content pos:start="463:13" pos:end="465:43">

            <expr_stmt pos:start="463:13" pos:end="463:65"><expr pos:start="463:13" pos:end="463:64"><call pos:start="463:13" pos:end="463:64"><name pos:start="463:13" pos:end="463:18">memcpy</name><argument_list pos:start="463:19" pos:end="463:64">(<argument pos:start="463:20" pos:end="463:45"><expr pos:start="463:20" pos:end="463:45"><name pos:start="463:20" pos:end="463:22">buf</name> <operator pos:start="463:24" pos:end="463:24">+</operator> <name pos:start="463:26" pos:end="463:39">TS_PACKET_SIZE</name> <operator pos:start="463:41" pos:end="463:41">-</operator> <name pos:start="463:43" pos:end="463:45">len</name></expr></argument>, <argument pos:start="463:48" pos:end="463:54"><expr pos:start="463:48" pos:end="463:54"><name pos:start="463:48" pos:end="463:54">payload</name></expr></argument>, <argument pos:start="463:57" pos:end="463:63"><expr pos:start="463:57" pos:end="463:63"><name pos:start="463:57" pos:end="463:59">len</name> <operator pos:start="463:61" pos:end="463:61">-</operator> <literal type="number" pos:start="463:63" pos:end="463:63">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="465:13" pos:end="465:43"><expr pos:start="465:13" pos:end="465:42"><name pos:start="465:13" pos:end="465:35"><name pos:start="465:13" pos:end="465:15">buf</name><index pos:start="465:16" pos:end="465:35">[<expr pos:start="465:17" pos:end="465:34"><name pos:start="465:17" pos:end="465:30">TS_PACKET_SIZE</name> <operator pos:start="465:32" pos:end="465:32">-</operator> <literal type="number" pos:start="465:34" pos:end="465:34">1</literal></expr>]</index></name> <operator pos:start="465:37" pos:end="465:37">=</operator> <literal type="number" pos:start="465:39" pos:end="465:42">0xff</literal></expr>;</expr_stmt> <comment type="block" pos:start="465:45" pos:end="465:136">/* end_of_PES_data_field_marker: an 8-bit field with fixed contents 0xff for DVB subtitle */</comment>

        </block_content>}</block></if> <else pos:start="467:11" pos:end="483:34">else <block pos:start="467:16" pos:end="483:34">{<block_content pos:start="469:13" pos:end="483:34">

            <expr_stmt pos:start="469:13" pos:end="469:61"><expr pos:start="469:13" pos:end="469:60"><call pos:start="469:13" pos:end="469:60"><name pos:start="469:13" pos:end="469:18">memcpy</name><argument_list pos:start="469:19" pos:end="469:60">(<argument pos:start="469:20" pos:end="469:45"><expr pos:start="469:20" pos:end="469:45"><name pos:start="469:20" pos:end="469:22">buf</name> <operator pos:start="469:24" pos:end="469:24">+</operator> <name pos:start="469:26" pos:end="469:39">TS_PACKET_SIZE</name> <operator pos:start="469:41" pos:end="469:41">-</operator> <name pos:start="469:43" pos:end="469:45">len</name></expr></argument>, <argument pos:start="469:48" pos:end="469:54"><expr pos:start="469:48" pos:end="469:54"><name pos:start="469:48" pos:end="469:54">payload</name></expr></argument>, <argument pos:start="469:57" pos:end="469:59"><expr pos:start="469:57" pos:end="469:59"><name pos:start="469:57" pos:end="469:59">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>




        <expr_stmt pos:start="474:9" pos:end="474:28"><expr pos:start="474:9" pos:end="474:27"><name pos:start="474:9" pos:end="474:15">payload</name>      <operator pos:start="474:22" pos:end="474:23">+=</operator> <name pos:start="474:25" pos:end="474:27">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="476:9" pos:end="476:28"><expr pos:start="476:9" pos:end="476:27"><name pos:start="476:9" pos:end="476:20">payload_size</name> <operator pos:start="476:22" pos:end="476:23">-=</operator> <name pos:start="476:25" pos:end="476:27">len</name></expr>;</expr_stmt>

        <expr_stmt pos:start="478:9" pos:end="478:37"><expr pos:start="478:9" pos:end="478:36"><call pos:start="478:9" pos:end="478:36"><name pos:start="478:9" pos:end="478:33">mpegts_prefix_m2ts_header</name><argument_list pos:start="478:34" pos:end="478:36">(<argument pos:start="478:35" pos:end="478:35"><expr pos:start="478:35" pos:end="478:35"><name pos:start="478:35" pos:end="478:35">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="480:9" pos:end="480:47"><expr pos:start="480:9" pos:end="480:46"><call pos:start="480:9" pos:end="480:46"><name pos:start="480:9" pos:end="480:18">avio_write</name><argument_list pos:start="480:19" pos:end="480:46">(<argument pos:start="480:20" pos:end="480:24"><expr pos:start="480:20" pos:end="480:24"><name pos:start="480:20" pos:end="480:24"><name pos:start="480:20" pos:end="480:20">s</name><operator pos:start="480:21" pos:end="480:22">-&gt;</operator><name pos:start="480:23" pos:end="480:24">pb</name></name></expr></argument>, <argument pos:start="480:27" pos:end="480:29"><expr pos:start="480:27" pos:end="480:29"><name pos:start="480:27" pos:end="480:29">buf</name></expr></argument>, <argument pos:start="480:32" pos:end="480:45"><expr pos:start="480:32" pos:end="480:45"><name pos:start="480:32" pos:end="480:45">TS_PACKET_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt pos:start="483:5" pos:end="483:34"><expr pos:start="483:5" pos:end="483:33"><name pos:start="483:5" pos:end="483:27"><name pos:start="483:5" pos:end="483:9">ts_st</name><operator pos:start="483:10" pos:end="483:11">-&gt;</operator><name pos:start="483:12" pos:end="483:27">prev_payload_key</name></name> <operator pos:start="483:29" pos:end="483:29">=</operator> <name pos:start="483:31" pos:end="483:33">key</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></while></block_content></block></if></if_stmt></block_content></block></function>
</unit>
