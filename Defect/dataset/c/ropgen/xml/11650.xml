<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11650.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:20"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:31">ipvideo_decode_frame</name><parameter_list pos:start="1:32" pos:end="3:48">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>,
                                <parameter pos:start="2:33" pos:end="2:42"><decl pos:start="2:33" pos:end="2:42"><type pos:start="2:33" pos:end="2:42"><name pos:start="2:33" pos:end="2:36">void</name> <modifier pos:start="2:38" pos:end="2:38">*</modifier></type><name pos:start="2:39" pos:end="2:42">data</name></decl></parameter>, <parameter pos:start="2:45" pos:end="2:58"><decl pos:start="2:45" pos:end="2:58"><type pos:start="2:45" pos:end="2:58"><name pos:start="2:45" pos:end="2:47">int</name> <modifier pos:start="2:49" pos:end="2:49">*</modifier></type><name pos:start="2:50" pos:end="2:58">got_frame</name></decl></parameter>,
                                <parameter pos:start="3:33" pos:end="3:47"><decl pos:start="3:33" pos:end="3:47"><type pos:start="3:33" pos:end="3:47"><name pos:start="3:33" pos:end="3:40">AVPacket</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:47">avpkt</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="103:20">{<block_content pos:start="5:5" pos:end="103:20">
    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:19"><specifier pos:start="5:5" pos:end="5:9">const</specifier> <name pos:start="5:11" pos:end="5:17">uint8_t</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:22">buf</name> <init pos:start="5:24" pos:end="5:36">= <expr pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:36"><name pos:start="5:26" pos:end="5:30">avpkt</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:36">data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:31"><decl pos:start="6:5" pos:end="6:30"><type pos:start="6:5" pos:end="6:7"><name pos:start="6:5" pos:end="6:7">int</name></type> <name pos:start="6:9" pos:end="6:16">buf_size</name> <init pos:start="6:18" pos:end="6:30">= <expr pos:start="6:20" pos:end="6:30"><name pos:start="6:20" pos:end="6:30"><name pos:start="6:20" pos:end="6:24">avpkt</name><operator pos:start="6:25" pos:end="6:26">-&gt;</operator><name pos:start="6:27" pos:end="6:30">size</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">IpvideoContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:21">s</name> <init pos:start="7:23" pos:end="7:40">= <expr pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:40"><name pos:start="7:25" pos:end="7:29">avctx</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:40">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:26"><decl pos:start="8:5" pos:end="8:25"><type pos:start="8:5" pos:end="8:13"><name pos:start="8:5" pos:end="8:11">AVFrame</name> <modifier pos:start="8:13" pos:end="8:13">*</modifier></type><name pos:start="8:14" pos:end="8:18">frame</name> <init pos:start="8:20" pos:end="8:25">= <expr pos:start="8:22" pos:end="8:25"><name pos:start="8:22" pos:end="8:25">data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:20"><decl pos:start="10:5" pos:end="10:19"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:19">send_buffer</name></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:21"><decl pos:start="11:5" pos:end="11:20"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:20">frame_format</name></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:24"><decl pos:start="12:5" pos:end="12:23"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:23">video_data_size</name></decl>;</decl_stmt>
    <if_stmt pos:start="13:5" pos:end="103:20"><if pos:start="13:5" pos:end="103:20">if <condition pos:start="13:8" pos:end="13:71">(<expr pos:start="13:9" pos:end="13:70"><call pos:start="13:9" pos:end="13:70"><name pos:start="13:9" pos:end="13:31">av_packet_get_side_data</name><argument_list pos:start="13:32" pos:end="13:70">(<argument pos:start="13:33" pos:end="13:37"><expr pos:start="13:33" pos:end="13:37"><name pos:start="13:33" pos:end="13:37">avpkt</name></expr></argument>, <argument pos:start="13:40" pos:end="13:63"><expr pos:start="13:40" pos:end="13:63"><name pos:start="13:40" pos:end="13:63">AV_PKT_DATA_PARAM_CHANGE</name></expr></argument>, <argument pos:start="13:66" pos:end="13:69"><expr pos:start="13:66" pos:end="13:69"><name pos:start="13:66" pos:end="13:69">NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:73" pos:end="103:20">{<block_content pos:start="14:9" pos:end="103:20">
        <expr_stmt pos:start="14:9" pos:end="14:38"><expr pos:start="14:9" pos:end="14:37"><call pos:start="14:9" pos:end="14:37"><name pos:start="14:9" pos:end="14:22">av_frame_unref</name><argument_list pos:start="14:23" pos:end="14:37">(<argument pos:start="14:24" pos:end="14:36"><expr pos:start="14:24" pos:end="14:36"><name pos:start="14:24" pos:end="14:36"><name pos:start="14:24" pos:end="14:24">s</name><operator pos:start="14:25" pos:end="14:26">-&gt;</operator><name pos:start="14:27" pos:end="14:36">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="15:9" pos:end="15:45"><expr pos:start="15:9" pos:end="15:44"><call pos:start="15:9" pos:end="15:44"><name pos:start="15:9" pos:end="15:22">av_frame_unref</name><argument_list pos:start="15:23" pos:end="15:44">(<argument pos:start="15:24" pos:end="15:43"><expr pos:start="15:24" pos:end="15:43"><name pos:start="15:24" pos:end="15:43"><name pos:start="15:24" pos:end="15:24">s</name><operator pos:start="15:25" pos:end="15:26">-&gt;</operator><name pos:start="15:27" pos:end="15:43">second_last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="17:35"><if pos:start="16:5" pos:end="17:35">if <condition pos:start="16:8" pos:end="16:21">(<expr pos:start="16:9" pos:end="16:20"><name pos:start="16:9" pos:end="16:16">buf_size</name> <operator pos:start="16:18" pos:end="16:18">&lt;</operator> <literal type="number" pos:start="16:20" pos:end="16:20">8</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:35"><block_content pos:start="17:9" pos:end="17:35">
        <return pos:start="17:9" pos:end="17:35">return <expr pos:start="17:16" pos:end="17:34"><name pos:start="17:16" pos:end="17:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt pos:start="18:5" pos:end="18:39"><expr pos:start="18:5" pos:end="18:38"><name pos:start="18:5" pos:end="18:16">frame_format</name>         <operator pos:start="18:26" pos:end="18:26">=</operator> <call pos:start="18:28" pos:end="18:38"><name pos:start="18:28" pos:end="18:33">AV_RL8</name><argument_list pos:start="18:34" pos:end="18:38">(<argument pos:start="18:35" pos:end="18:37"><expr pos:start="18:35" pos:end="18:37"><name pos:start="18:35" pos:end="18:37">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="19:5" pos:end="19:43"><expr pos:start="19:5" pos:end="19:42"><name pos:start="19:5" pos:end="19:15">send_buffer</name>          <operator pos:start="19:26" pos:end="19:26">=</operator> <call pos:start="19:28" pos:end="19:42"><name pos:start="19:28" pos:end="19:33">AV_RL8</name><argument_list pos:start="19:34" pos:end="19:42">(<argument pos:start="19:35" pos:end="19:41"><expr pos:start="19:35" pos:end="19:41"><name pos:start="19:35" pos:end="19:37">buf</name> <operator pos:start="19:39" pos:end="19:39">+</operator> <literal type="number" pos:start="19:41" pos:end="19:41">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="20:5" pos:end="20:44"><expr pos:start="20:5" pos:end="20:43"><name pos:start="20:5" pos:end="20:19">video_data_size</name>      <operator pos:start="20:26" pos:end="20:26">=</operator> <call pos:start="20:28" pos:end="20:43"><name pos:start="20:28" pos:end="20:34">AV_RL16</name><argument_list pos:start="20:35" pos:end="20:43">(<argument pos:start="20:36" pos:end="20:42"><expr pos:start="20:36" pos:end="20:42"><name pos:start="20:36" pos:end="20:38">buf</name> <operator pos:start="20:40" pos:end="20:40">+</operator> <literal type="number" pos:start="20:42" pos:end="20:42">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:44"><expr pos:start="21:5" pos:end="21:43"><name pos:start="21:5" pos:end="21:24"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:24">decoding_map_size</name></name> <operator pos:start="21:26" pos:end="21:26">=</operator> <call pos:start="21:28" pos:end="21:43"><name pos:start="21:28" pos:end="21:34">AV_RL16</name><argument_list pos:start="21:35" pos:end="21:43">(<argument pos:start="21:36" pos:end="21:42"><expr pos:start="21:36" pos:end="21:42"><name pos:start="21:36" pos:end="21:38">buf</name> <operator pos:start="21:40" pos:end="21:40">+</operator> <literal type="number" pos:start="21:42" pos:end="21:42">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="22:5" pos:end="22:44"><expr pos:start="22:5" pos:end="22:43"><name pos:start="22:5" pos:end="22:20"><name pos:start="22:5" pos:end="22:5">s</name><operator pos:start="22:6" pos:end="22:7">-&gt;</operator><name pos:start="22:8" pos:end="22:20">skip_map_size</name></name>     <operator pos:start="22:26" pos:end="22:26">=</operator> <call pos:start="22:28" pos:end="22:43"><name pos:start="22:28" pos:end="22:34">AV_RL16</name><argument_list pos:start="22:35" pos:end="22:43">(<argument pos:start="22:36" pos:end="22:42"><expr pos:start="22:36" pos:end="22:42"><name pos:start="22:36" pos:end="22:38">buf</name> <operator pos:start="22:40" pos:end="22:40">+</operator> <literal type="number" pos:start="22:42" pos:end="22:42">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="23:5" pos:end="103:20">switch<condition pos:start="23:11" pos:end="23:24">(<expr pos:start="23:12" pos:end="23:23"><name pos:start="23:12" pos:end="23:23">frame_format</name></expr>)</condition> <block pos:start="23:26" pos:end="103:20">{<block_content pos:start="24:9" pos:end="103:20">
        <case pos:start="24:9" pos:end="24:18">case <expr pos:start="24:14" pos:end="24:17"><literal type="number" pos:start="24:14" pos:end="24:17">0x06</literal></expr>:</case>
            <if_stmt pos:start="25:13" pos:end="103:20"><if pos:start="25:13" pos:end="103:20">if <condition pos:start="25:16" pos:end="25:37">(<expr pos:start="25:17" pos:end="25:36"><name pos:start="25:17" pos:end="25:36"><name pos:start="25:17" pos:end="25:17">s</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:36">decoding_map_size</name></name></expr>)</condition> <block pos:start="25:39" pos:end="103:20">{<block_content pos:start="26:17" pos:end="103:20">
                <expr_stmt pos:start="26:17" pos:end="26:78"><expr pos:start="26:17" pos:end="26:77"><call pos:start="26:17" pos:end="26:77"><name pos:start="26:17" pos:end="26:22">av_log</name><argument_list pos:start="26:23" pos:end="26:77">(<argument pos:start="26:24" pos:end="26:28"><expr pos:start="26:24" pos:end="26:28"><name pos:start="26:24" pos:end="26:28">avctx</name></expr></argument>, <argument pos:start="26:31" pos:end="26:42"><expr pos:start="26:31" pos:end="26:42"><name pos:start="26:31" pos:end="26:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="26:45" pos:end="26:76"><expr pos:start="26:45" pos:end="26:76"><literal type="string" pos:start="26:45" pos:end="26:76">"Decoding map for format 0x06\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="27:17" pos:end="27:43">return <expr pos:start="27:24" pos:end="27:42"><name pos:start="27:24" pos:end="27:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="28:13" pos:end="103:20"><if pos:start="28:13" pos:end="103:20">if <condition pos:start="28:16" pos:end="28:33">(<expr pos:start="28:17" pos:end="28:32"><name pos:start="28:17" pos:end="28:32"><name pos:start="28:17" pos:end="28:17">s</name><operator pos:start="28:18" pos:end="28:19">-&gt;</operator><name pos:start="28:20" pos:end="28:32">skip_map_size</name></name></expr>)</condition> <block pos:start="28:35" pos:end="103:20">{<block_content pos:start="29:17" pos:end="103:20">
                <expr_stmt pos:start="29:17" pos:end="29:74"><expr pos:start="29:17" pos:end="29:73"><call pos:start="29:17" pos:end="29:73"><name pos:start="29:17" pos:end="29:22">av_log</name><argument_list pos:start="29:23" pos:end="29:73">(<argument pos:start="29:24" pos:end="29:28"><expr pos:start="29:24" pos:end="29:28"><name pos:start="29:24" pos:end="29:28">avctx</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><name pos:start="29:31" pos:end="29:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="29:45" pos:end="29:72"><expr pos:start="29:45" pos:end="29:72"><literal type="string" pos:start="29:45" pos:end="29:72">"Skip map for format 0x06\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="30:17" pos:end="30:43">return <expr pos:start="30:24" pos:end="30:42"><name pos:start="30:24" pos:end="30:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="31:13" pos:end="103:20"><if pos:start="31:13" pos:end="103:20">if <condition pos:start="31:16" pos:end="31:28">(<expr pos:start="31:17" pos:end="31:27"><name pos:start="31:17" pos:end="31:27"><name pos:start="31:17" pos:end="31:17">s</name><operator pos:start="31:18" pos:end="31:19">-&gt;</operator><name pos:start="31:20" pos:end="31:27">is_16bpp</name></name></expr>)</condition> <block pos:start="31:30" pos:end="103:20">{<block_content pos:start="32:17" pos:end="103:20">
                <expr_stmt pos:start="32:17" pos:end="32:97"><expr pos:start="32:17" pos:end="32:96"><call pos:start="32:17" pos:end="32:96"><name pos:start="32:17" pos:end="32:22">av_log</name><argument_list pos:start="32:23" pos:end="32:96">(<argument pos:start="32:24" pos:end="32:28"><expr pos:start="32:24" pos:end="32:28"><name pos:start="32:24" pos:end="32:28">avctx</name></expr></argument>, <argument pos:start="32:31" pos:end="32:42"><expr pos:start="32:31" pos:end="32:42"><name pos:start="32:31" pos:end="32:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="32:45" pos:end="32:95"><expr pos:start="32:45" pos:end="32:95"><literal type="string" pos:start="32:45" pos:end="32:95">"Video format 0x06 does not support 16bpp movies\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="33:17" pos:end="33:43">return <expr pos:start="33:24" pos:end="33:42"><name pos:start="33:24" pos:end="33:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <comment type="block" pos:start="34:13" pos:end="34:79">/* Decoding map for 0x06 frame format is at the top of pixeldata */</comment>
            <expr_stmt pos:start="35:13" pos:end="35:88"><expr pos:start="35:13" pos:end="35:87"><name pos:start="35:13" pos:end="35:32"><name pos:start="35:13" pos:end="35:13">s</name><operator pos:start="35:14" pos:end="35:15">-&gt;</operator><name pos:start="35:16" pos:end="35:32">decoding_map_size</name></name> <operator pos:start="35:34" pos:end="35:34">=</operator> <operator pos:start="35:36" pos:end="35:36">(</operator><operator pos:start="35:37" pos:end="35:37">(</operator><name pos:start="35:38" pos:end="35:52"><name pos:start="35:38" pos:end="35:38">s</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:45">avctx</name><operator pos:start="35:46" pos:end="35:47">-&gt;</operator><name pos:start="35:48" pos:end="35:52">width</name></name> <operator pos:start="35:54" pos:end="35:54">/</operator> <literal type="number" pos:start="35:56" pos:end="35:56">8</literal><operator pos:start="35:57" pos:end="35:57">)</operator> <operator pos:start="35:59" pos:end="35:59">*</operator> <operator pos:start="35:61" pos:end="35:61">(</operator><name pos:start="35:62" pos:end="35:77"><name pos:start="35:62" pos:end="35:62">s</name><operator pos:start="35:63" pos:end="35:64">-&gt;</operator><name pos:start="35:65" pos:end="35:69">avctx</name><operator pos:start="35:70" pos:end="35:71">-&gt;</operator><name pos:start="35:72" pos:end="35:77">height</name></name> <operator pos:start="35:79" pos:end="35:79">/</operator> <literal type="number" pos:start="35:81" pos:end="35:81">8</literal><operator pos:start="35:82" pos:end="35:82">)</operator><operator pos:start="35:83" pos:end="35:83">)</operator> <operator pos:start="35:85" pos:end="35:85">*</operator> <literal type="number" pos:start="35:87" pos:end="35:87">2</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="36:13" pos:end="36:43"><expr pos:start="36:13" pos:end="36:42"><name pos:start="36:13" pos:end="36:27"><name pos:start="36:13" pos:end="36:13">s</name><operator pos:start="36:14" pos:end="36:15">-&gt;</operator><name pos:start="36:16" pos:end="36:27">decoding_map</name></name> <operator pos:start="36:29" pos:end="36:29">=</operator> <name pos:start="36:31" pos:end="36:33">buf</name> <operator pos:start="36:35" pos:end="36:35">+</operator> <literal type="number" pos:start="36:37" pos:end="36:39">8</literal> <operator pos:start="36:39" pos:end="36:39">+</operator> <literal type="number" pos:start="36:41" pos:end="36:42">14</literal></expr>;</expr_stmt> <comment type="block" pos:start="36:45" pos:end="36:68">/* 14 bits of op data */</comment>
            <expr_stmt pos:start="37:13" pos:end="37:57"><expr pos:start="37:13" pos:end="37:56"><name pos:start="37:13" pos:end="37:27">video_data_size</name> <operator pos:start="37:29" pos:end="37:30">-=</operator> <name pos:start="37:32" pos:end="37:51"><name pos:start="37:32" pos:end="37:32">s</name><operator pos:start="37:33" pos:end="37:34">-&gt;</operator><name pos:start="37:35" pos:end="37:51">decoding_map_size</name></name> <operator pos:start="37:53" pos:end="37:53">+</operator> <literal type="number" pos:start="37:55" pos:end="37:56">14</literal></expr>;</expr_stmt>
            <if_stmt pos:start="38:13" pos:end="39:43"><if pos:start="38:13" pos:end="39:43">if <condition pos:start="38:16" pos:end="38:37">(<expr pos:start="38:17" pos:end="38:36"><name pos:start="38:17" pos:end="38:31">video_data_size</name> <operator pos:start="38:33" pos:end="38:34">&lt;=</operator> <literal type="number" pos:start="38:36" pos:end="38:36">0</literal></expr>)</condition><block type="pseudo" pos:start="39:17" pos:end="39:43"><block_content pos:start="39:17" pos:end="39:43">
                <return pos:start="39:17" pos:end="39:43">return <expr pos:start="39:24" pos:end="39:42"><name pos:start="39:24" pos:end="39:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
            <if_stmt pos:start="40:13" pos:end="41:43"><if pos:start="40:13" pos:end="41:43">if <condition pos:start="40:16" pos:end="40:75">(<expr pos:start="40:17" pos:end="40:74"><name pos:start="40:17" pos:end="40:24">buf_size</name> <operator pos:start="40:26" pos:end="40:26">&lt;</operator> <literal type="number" pos:start="40:28" pos:end="40:30">8</literal> <operator pos:start="40:30" pos:end="40:30">+</operator> <name pos:start="40:32" pos:end="40:51"><name pos:start="40:32" pos:end="40:32">s</name><operator pos:start="40:33" pos:end="40:34">-&gt;</operator><name pos:start="40:35" pos:end="40:51">decoding_map_size</name></name> <operator pos:start="40:53" pos:end="40:53">+</operator> <literal type="number" pos:start="40:55" pos:end="40:58">14</literal> <operator pos:start="40:58" pos:end="40:58">+</operator> <name pos:start="40:60" pos:end="40:74">video_data_size</name></expr>)</condition><block type="pseudo" pos:start="41:17" pos:end="41:43"><block_content pos:start="41:17" pos:end="41:43">
                <return pos:start="41:17" pos:end="41:43">return <expr pos:start="41:24" pos:end="41:42"><name pos:start="41:24" pos:end="41:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="42:13" pos:end="42:99"><expr pos:start="42:13" pos:end="42:98"><call pos:start="42:13" pos:end="42:98"><name pos:start="42:13" pos:end="42:28">bytestream2_init</name><argument_list pos:start="42:29" pos:end="42:98">(<argument pos:start="42:30" pos:end="42:43"><expr pos:start="42:30" pos:end="42:43"><operator pos:start="42:30" pos:end="42:30">&amp;</operator><name pos:start="42:31" pos:end="42:43"><name pos:start="42:31" pos:end="42:31">s</name><operator pos:start="42:32" pos:end="42:33">-&gt;</operator><name pos:start="42:34" pos:end="42:43">stream_ptr</name></name></expr></argument>, <argument pos:start="42:46" pos:end="42:80"><expr pos:start="42:46" pos:end="42:80"><name pos:start="42:46" pos:end="42:48">buf</name> <operator pos:start="42:50" pos:end="42:50">+</operator> <literal type="number" pos:start="42:52" pos:end="42:54">8</literal> <operator pos:start="42:54" pos:end="42:54">+</operator> <name pos:start="42:56" pos:end="42:75"><name pos:start="42:56" pos:end="42:56">s</name><operator pos:start="42:57" pos:end="42:58">-&gt;</operator><name pos:start="42:59" pos:end="42:75">decoding_map_size</name></name> <operator pos:start="42:77" pos:end="42:77">+</operator> <literal type="number" pos:start="42:79" pos:end="42:80">14</literal></expr></argument>, <argument pos:start="42:83" pos:end="42:97"><expr pos:start="42:83" pos:end="42:97"><name pos:start="42:83" pos:end="42:97">video_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="43:13" pos:end="43:18">break;</break>
        <case pos:start="44:9" pos:end="44:18">case <expr pos:start="44:14" pos:end="44:17"><literal type="number" pos:start="44:14" pos:end="44:17">0x10</literal></expr>:</case>
            <if_stmt pos:start="45:13" pos:end="103:20"><if pos:start="45:13" pos:end="103:20">if <condition pos:start="45:16" pos:end="45:39">(<expr pos:start="45:17" pos:end="45:38"><operator pos:start="45:17" pos:end="45:17">!</operator> <name pos:start="45:19" pos:end="45:38"><name pos:start="45:19" pos:end="45:19">s</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:38">decoding_map_size</name></name></expr>)</condition> <block pos:start="45:41" pos:end="103:20">{<block_content pos:start="46:17" pos:end="103:20">
                <expr_stmt pos:start="46:17" pos:end="46:84"><expr pos:start="46:17" pos:end="46:83"><call pos:start="46:17" pos:end="46:83"><name pos:start="46:17" pos:end="46:22">av_log</name><argument_list pos:start="46:23" pos:end="46:83">(<argument pos:start="46:24" pos:end="46:28"><expr pos:start="46:24" pos:end="46:28"><name pos:start="46:24" pos:end="46:28">avctx</name></expr></argument>, <argument pos:start="46:31" pos:end="46:42"><expr pos:start="46:31" pos:end="46:42"><name pos:start="46:31" pos:end="46:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="46:45" pos:end="46:82"><expr pos:start="46:45" pos:end="46:82"><literal type="string" pos:start="46:45" pos:end="46:82">"Empty decoding map for format 0x10\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="47:17" pos:end="47:43">return <expr pos:start="47:24" pos:end="47:42"><name pos:start="47:24" pos:end="47:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="48:13" pos:end="103:20"><if pos:start="48:13" pos:end="103:20">if <condition pos:start="48:16" pos:end="48:35">(<expr pos:start="48:17" pos:end="48:34"><operator pos:start="48:17" pos:end="48:17">!</operator> <name pos:start="48:19" pos:end="48:34"><name pos:start="48:19" pos:end="48:19">s</name><operator pos:start="48:20" pos:end="48:21">-&gt;</operator><name pos:start="48:22" pos:end="48:34">skip_map_size</name></name></expr>)</condition> <block pos:start="48:37" pos:end="103:20">{<block_content pos:start="49:17" pos:end="103:20">
                <expr_stmt pos:start="49:17" pos:end="49:80"><expr pos:start="49:17" pos:end="49:79"><call pos:start="49:17" pos:end="49:79"><name pos:start="49:17" pos:end="49:22">av_log</name><argument_list pos:start="49:23" pos:end="49:79">(<argument pos:start="49:24" pos:end="49:28"><expr pos:start="49:24" pos:end="49:28"><name pos:start="49:24" pos:end="49:28">avctx</name></expr></argument>, <argument pos:start="49:31" pos:end="49:42"><expr pos:start="49:31" pos:end="49:42"><name pos:start="49:31" pos:end="49:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:45" pos:end="49:78"><expr pos:start="49:45" pos:end="49:78"><literal type="string" pos:start="49:45" pos:end="49:78">"Empty skip map for format 0x10\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="50:17" pos:end="50:43">return <expr pos:start="50:24" pos:end="50:42"><name pos:start="50:24" pos:end="50:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="51:13" pos:end="103:20"><if pos:start="51:13" pos:end="103:20">if <condition pos:start="51:16" pos:end="51:28">(<expr pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:27"><name pos:start="51:17" pos:end="51:17">s</name><operator pos:start="51:18" pos:end="51:19">-&gt;</operator><name pos:start="51:20" pos:end="51:27">is_16bpp</name></name></expr>)</condition> <block pos:start="51:30" pos:end="103:20">{<block_content pos:start="52:17" pos:end="103:20">
                <expr_stmt pos:start="52:17" pos:end="52:97"><expr pos:start="52:17" pos:end="52:96"><call pos:start="52:17" pos:end="52:96"><name pos:start="52:17" pos:end="52:22">av_log</name><argument_list pos:start="52:23" pos:end="52:96">(<argument pos:start="52:24" pos:end="52:28"><expr pos:start="52:24" pos:end="52:28"><name pos:start="52:24" pos:end="52:28">avctx</name></expr></argument>, <argument pos:start="52:31" pos:end="52:42"><expr pos:start="52:31" pos:end="52:42"><name pos:start="52:31" pos:end="52:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="52:45" pos:end="52:95"><expr pos:start="52:45" pos:end="52:95"><literal type="string" pos:start="52:45" pos:end="52:95">"Video format 0x10 does not support 16bpp movies\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="53:17" pos:end="53:43">return <expr pos:start="53:24" pos:end="53:42"><name pos:start="53:24" pos:end="53:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="54:13" pos:end="55:43"><if pos:start="54:13" pos:end="55:43">if <condition pos:start="54:16" pos:end="54:89">(<expr pos:start="54:17" pos:end="54:88"><name pos:start="54:17" pos:end="54:24">buf_size</name> <operator pos:start="54:26" pos:end="54:26">&lt;</operator> <literal type="number" pos:start="54:28" pos:end="54:30">8</literal> <operator pos:start="54:30" pos:end="54:30">+</operator> <name pos:start="54:32" pos:end="54:46">video_data_size</name> <operator pos:start="54:48" pos:end="54:48">+</operator> <name pos:start="54:50" pos:end="54:69"><name pos:start="54:50" pos:end="54:50">s</name><operator pos:start="54:51" pos:end="54:52">-&gt;</operator><name pos:start="54:53" pos:end="54:69">decoding_map_size</name></name> <operator pos:start="54:71" pos:end="54:71">+</operator> <name pos:start="54:73" pos:end="54:88"><name pos:start="54:73" pos:end="54:73">s</name><operator pos:start="54:74" pos:end="54:75">-&gt;</operator><name pos:start="54:76" pos:end="54:88">skip_map_size</name></name></expr>)</condition><block type="pseudo" pos:start="55:17" pos:end="55:43"><block_content pos:start="55:17" pos:end="55:43">
                <return pos:start="55:17" pos:end="55:43">return <expr pos:start="55:24" pos:end="55:42"><name pos:start="55:24" pos:end="55:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="56:13" pos:end="56:71"><expr pos:start="56:13" pos:end="56:70"><call pos:start="56:13" pos:end="56:70"><name pos:start="56:13" pos:end="56:28">bytestream2_init</name><argument_list pos:start="56:29" pos:end="56:70">(<argument pos:start="56:30" pos:end="56:43"><expr pos:start="56:30" pos:end="56:43"><operator pos:start="56:30" pos:end="56:30">&amp;</operator><name pos:start="56:31" pos:end="56:43"><name pos:start="56:31" pos:end="56:31">s</name><operator pos:start="56:32" pos:end="56:33">-&gt;</operator><name pos:start="56:34" pos:end="56:43">stream_ptr</name></name></expr></argument>, <argument pos:start="56:46" pos:end="56:52"><expr pos:start="56:46" pos:end="56:52"><name pos:start="56:46" pos:end="56:48">buf</name> <operator pos:start="56:50" pos:end="56:50">+</operator> <literal type="number" pos:start="56:52" pos:end="56:52">8</literal></expr></argument>, <argument pos:start="56:55" pos:end="56:69"><expr pos:start="56:55" pos:end="56:69"><name pos:start="56:55" pos:end="56:69">video_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="57:13" pos:end="57:56"><expr pos:start="57:13" pos:end="57:55"><name pos:start="57:13" pos:end="57:27"><name pos:start="57:13" pos:end="57:13">s</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:27">decoding_map</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:33">buf</name> <operator pos:start="57:35" pos:end="57:35">+</operator> <literal type="number" pos:start="57:37" pos:end="57:39">8</literal> <operator pos:start="57:39" pos:end="57:39">+</operator> <name pos:start="57:41" pos:end="57:55">video_data_size</name></expr>;</expr_stmt>
            <expr_stmt pos:start="58:13" pos:end="58:75"><expr pos:start="58:13" pos:end="58:74"><name pos:start="58:13" pos:end="58:23"><name pos:start="58:13" pos:end="58:13">s</name><operator pos:start="58:14" pos:end="58:15">-&gt;</operator><name pos:start="58:16" pos:end="58:23">skip_map</name></name> <operator pos:start="58:25" pos:end="58:25">=</operator> <name pos:start="58:27" pos:end="58:29">buf</name> <operator pos:start="58:31" pos:end="58:31">+</operator> <literal type="number" pos:start="58:33" pos:end="58:35">8</literal> <operator pos:start="58:35" pos:end="58:35">+</operator> <name pos:start="58:37" pos:end="58:51">video_data_size</name> <operator pos:start="58:53" pos:end="58:53">+</operator> <name pos:start="58:55" pos:end="58:74"><name pos:start="58:55" pos:end="58:55">s</name><operator pos:start="58:56" pos:end="58:57">-&gt;</operator><name pos:start="58:58" pos:end="58:74">decoding_map_size</name></name></expr>;</expr_stmt>
            <break pos:start="59:13" pos:end="59:18">break;</break>
        <case pos:start="60:9" pos:end="60:18">case <expr pos:start="60:14" pos:end="60:17"><literal type="number" pos:start="60:14" pos:end="60:17">0x11</literal></expr>:</case>
            <if_stmt pos:start="61:13" pos:end="103:20"><if pos:start="61:13" pos:end="103:20">if <condition pos:start="61:16" pos:end="61:39">(<expr pos:start="61:17" pos:end="61:38"><operator pos:start="61:17" pos:end="61:17">!</operator> <name pos:start="61:19" pos:end="61:38"><name pos:start="61:19" pos:end="61:19">s</name><operator pos:start="61:20" pos:end="61:21">-&gt;</operator><name pos:start="61:22" pos:end="61:38">decoding_map_size</name></name></expr>)</condition> <block pos:start="61:41" pos:end="103:20">{<block_content pos:start="62:17" pos:end="103:20">
                <expr_stmt pos:start="62:17" pos:end="62:84"><expr pos:start="62:17" pos:end="62:83"><call pos:start="62:17" pos:end="62:83"><name pos:start="62:17" pos:end="62:22">av_log</name><argument_list pos:start="62:23" pos:end="62:83">(<argument pos:start="62:24" pos:end="62:28"><expr pos:start="62:24" pos:end="62:28"><name pos:start="62:24" pos:end="62:28">avctx</name></expr></argument>, <argument pos:start="62:31" pos:end="62:42"><expr pos:start="62:31" pos:end="62:42"><name pos:start="62:31" pos:end="62:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="62:45" pos:end="62:82"><expr pos:start="62:45" pos:end="62:82"><literal type="string" pos:start="62:45" pos:end="62:82">"Empty decoding map for format 0x11\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="63:17" pos:end="63:43">return <expr pos:start="63:24" pos:end="63:42"><name pos:start="63:24" pos:end="63:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="64:13" pos:end="103:20"><if pos:start="64:13" pos:end="103:20">if <condition pos:start="64:16" pos:end="64:33">(<expr pos:start="64:17" pos:end="64:32"><name pos:start="64:17" pos:end="64:32"><name pos:start="64:17" pos:end="64:17">s</name><operator pos:start="64:18" pos:end="64:19">-&gt;</operator><name pos:start="64:20" pos:end="64:32">skip_map_size</name></name></expr>)</condition> <block pos:start="64:35" pos:end="103:20">{<block_content pos:start="65:17" pos:end="103:20">
                <expr_stmt pos:start="65:17" pos:end="65:74"><expr pos:start="65:17" pos:end="65:73"><call pos:start="65:17" pos:end="65:73"><name pos:start="65:17" pos:end="65:22">av_log</name><argument_list pos:start="65:23" pos:end="65:73">(<argument pos:start="65:24" pos:end="65:28"><expr pos:start="65:24" pos:end="65:28"><name pos:start="65:24" pos:end="65:28">avctx</name></expr></argument>, <argument pos:start="65:31" pos:end="65:42"><expr pos:start="65:31" pos:end="65:42"><name pos:start="65:31" pos:end="65:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="65:45" pos:end="65:72"><expr pos:start="65:45" pos:end="65:72"><literal type="string" pos:start="65:45" pos:end="65:72">"Skip map for format 0x11\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return pos:start="66:17" pos:end="66:43">return <expr pos:start="66:24" pos:end="66:42"><name pos:start="66:24" pos:end="66:42">AVERROR_INVALIDDATA</name></expr>;</return>
            <if_stmt pos:start="67:13" pos:end="68:43"><if pos:start="67:13" pos:end="68:43">if <condition pos:start="67:16" pos:end="67:70">(<expr pos:start="67:17" pos:end="67:69"><name pos:start="67:17" pos:end="67:24">buf_size</name> <operator pos:start="67:26" pos:end="67:26">&lt;</operator> <literal type="number" pos:start="67:28" pos:end="67:30">8</literal> <operator pos:start="67:30" pos:end="67:30">+</operator> <name pos:start="67:32" pos:end="67:46">video_data_size</name> <operator pos:start="67:48" pos:end="67:48">+</operator> <name pos:start="67:50" pos:end="67:69"><name pos:start="67:50" pos:end="67:50">s</name><operator pos:start="67:51" pos:end="67:52">-&gt;</operator><name pos:start="67:53" pos:end="67:69">decoding_map_size</name></name></expr>)</condition><block type="pseudo" pos:start="68:17" pos:end="68:43"><block_content pos:start="68:17" pos:end="68:43">
                <return pos:start="68:17" pos:end="68:43">return <expr pos:start="68:24" pos:end="68:42"><name pos:start="68:24" pos:end="68:42">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt pos:start="69:13" pos:end="69:71"><expr pos:start="69:13" pos:end="69:70"><call pos:start="69:13" pos:end="69:70"><name pos:start="69:13" pos:end="69:28">bytestream2_init</name><argument_list pos:start="69:29" pos:end="69:70">(<argument pos:start="69:30" pos:end="69:43"><expr pos:start="69:30" pos:end="69:43"><operator pos:start="69:30" pos:end="69:30">&amp;</operator><name pos:start="69:31" pos:end="69:43"><name pos:start="69:31" pos:end="69:31">s</name><operator pos:start="69:32" pos:end="69:33">-&gt;</operator><name pos:start="69:34" pos:end="69:43">stream_ptr</name></name></expr></argument>, <argument pos:start="69:46" pos:end="69:52"><expr pos:start="69:46" pos:end="69:52"><name pos:start="69:46" pos:end="69:48">buf</name> <operator pos:start="69:50" pos:end="69:50">+</operator> <literal type="number" pos:start="69:52" pos:end="69:52">8</literal></expr></argument>, <argument pos:start="69:55" pos:end="69:69"><expr pos:start="69:55" pos:end="69:69"><name pos:start="69:55" pos:end="69:69">video_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt pos:start="70:13" pos:end="70:56"><expr pos:start="70:13" pos:end="70:55"><name pos:start="70:13" pos:end="70:27"><name pos:start="70:13" pos:end="70:13">s</name><operator pos:start="70:14" pos:end="70:15">-&gt;</operator><name pos:start="70:16" pos:end="70:27">decoding_map</name></name> <operator pos:start="70:29" pos:end="70:29">=</operator> <name pos:start="70:31" pos:end="70:33">buf</name> <operator pos:start="70:35" pos:end="70:35">+</operator> <literal type="number" pos:start="70:37" pos:end="70:39">8</literal> <operator pos:start="70:39" pos:end="70:39">+</operator> <name pos:start="70:41" pos:end="70:55">video_data_size</name></expr>;</expr_stmt>
            <break pos:start="71:13" pos:end="71:18">break;</break>
        <default pos:start="72:9" pos:end="72:16">default:</default>
            <expr_stmt pos:start="73:13" pos:end="73:89"><expr pos:start="73:13" pos:end="73:88"><call pos:start="73:13" pos:end="73:88"><name pos:start="73:13" pos:end="73:18">av_log</name><argument_list pos:start="73:19" pos:end="73:88">(<argument pos:start="73:20" pos:end="73:24"><expr pos:start="73:20" pos:end="73:24"><name pos:start="73:20" pos:end="73:24">avctx</name></expr></argument>, <argument pos:start="73:27" pos:end="73:38"><expr pos:start="73:27" pos:end="73:38"><name pos:start="73:27" pos:end="73:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="73:41" pos:end="73:73"><expr pos:start="73:41" pos:end="73:73"><literal type="string" pos:start="73:41" pos:end="73:73">"Frame type 0x%02X unsupported\n"</literal></expr></argument>, <argument pos:start="73:76" pos:end="73:87"><expr pos:start="73:76" pos:end="73:87"><name pos:start="73:76" pos:end="73:87">frame_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="74:5" pos:end="74:45">/* ensure we can't overread the packet */</comment>
    <if_stmt pos:start="75:5" pos:end="103:20"><if pos:start="75:5" pos:end="103:20">if <condition pos:start="75:8" pos:end="75:81">(<expr pos:start="75:9" pos:end="75:80"><name pos:start="75:9" pos:end="75:16">buf_size</name> <operator pos:start="75:18" pos:end="75:18">&lt;</operator> <literal type="number" pos:start="75:20" pos:end="75:22">8</literal> <operator pos:start="75:22" pos:end="75:22">+</operator> <name pos:start="75:24" pos:end="75:43"><name pos:start="75:24" pos:end="75:24">s</name><operator pos:start="75:25" pos:end="75:26">-&gt;</operator><name pos:start="75:27" pos:end="75:43">decoding_map_size</name></name> <operator pos:start="75:45" pos:end="75:45">+</operator> <name pos:start="75:47" pos:end="75:61">video_data_size</name> <operator pos:start="75:63" pos:end="75:63">+</operator> <name pos:start="75:65" pos:end="75:80"><name pos:start="75:65" pos:end="75:65">s</name><operator pos:start="75:66" pos:end="75:67">-&gt;</operator><name pos:start="75:68" pos:end="75:80">skip_map_size</name></name></expr>)</condition> <block pos:start="75:83" pos:end="103:20">{<block_content pos:start="76:9" pos:end="103:20">
        <expr_stmt pos:start="76:9" pos:end="76:64"><expr pos:start="76:9" pos:end="76:63"><call pos:start="76:9" pos:end="76:63"><name pos:start="76:9" pos:end="76:14">av_log</name><argument_list pos:start="76:15" pos:end="76:63">(<argument pos:start="76:16" pos:end="76:20"><expr pos:start="76:16" pos:end="76:20"><name pos:start="76:16" pos:end="76:20">avctx</name></expr></argument>, <argument pos:start="76:23" pos:end="76:34"><expr pos:start="76:23" pos:end="76:34"><name pos:start="76:23" pos:end="76:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="76:37" pos:end="76:62"><expr pos:start="76:37" pos:end="76:62"><literal type="string" pos:start="76:37" pos:end="76:62">"Invalid IP packet size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="77:9" pos:end="77:35">return <expr pos:start="77:16" pos:end="77:34"><name pos:start="77:16" pos:end="77:34">AVERROR_INVALIDDATA</name></expr>;</return>
    <if_stmt pos:start="78:5" pos:end="103:20"><if pos:start="78:5" pos:end="103:20">if <condition pos:start="78:8" pos:end="78:72">(<expr pos:start="78:9" pos:end="78:71"><operator pos:start="78:9" pos:end="78:9">(</operator><name pos:start="78:10" pos:end="78:12">ret</name> <operator pos:start="78:14" pos:end="78:14">=</operator> <call pos:start="78:16" pos:end="78:66"><name pos:start="78:16" pos:end="78:28">ff_get_buffer</name><argument_list pos:start="78:29" pos:end="78:66">(<argument pos:start="78:30" pos:end="78:34"><expr pos:start="78:30" pos:end="78:34"><name pos:start="78:30" pos:end="78:34">avctx</name></expr></argument>, <argument pos:start="78:37" pos:end="78:41"><expr pos:start="78:37" pos:end="78:41"><name pos:start="78:37" pos:end="78:41">frame</name></expr></argument>, <argument pos:start="78:44" pos:end="78:65"><expr pos:start="78:44" pos:end="78:65"><name pos:start="78:44" pos:end="78:65">AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator pos:start="78:67" pos:end="78:67">)</operator> <operator pos:start="78:69" pos:end="78:69">&lt;</operator> <literal type="number" pos:start="78:71" pos:end="78:71">0</literal></expr>)</condition><block type="pseudo" pos:start="79:5" pos:end="103:20"><block_content pos:start="79:5" pos:end="103:20">
    <if_stmt pos:start="79:5" pos:end="103:20"><if pos:start="79:5" pos:end="103:20">if <condition pos:start="79:8" pos:end="79:21">(<expr pos:start="79:9" pos:end="79:20"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:20"><name pos:start="79:10" pos:end="79:10">s</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:20">is_16bpp</name></name></expr>)</condition> <block pos:start="79:23" pos:end="103:20">{<block_content pos:start="80:9" pos:end="103:20">
        <decl_stmt pos:start="80:9" pos:end="80:17"><decl pos:start="80:9" pos:end="80:16"><type pos:start="80:9" pos:end="80:11"><name pos:start="80:9" pos:end="80:11">int</name></type> <name pos:start="80:13" pos:end="80:16">size</name></decl>;</decl_stmt>
        <decl_stmt pos:start="81:9" pos:end="81:88"><decl pos:start="81:9" pos:end="81:87"><type pos:start="81:9" pos:end="81:23"><specifier pos:start="81:9" pos:end="81:13">const</specifier> <name pos:start="81:15" pos:end="81:21">uint8_t</name> <modifier pos:start="81:23" pos:end="81:23">*</modifier></type><name pos:start="81:24" pos:end="81:26">pal</name> <init pos:start="81:28" pos:end="81:87">= <expr pos:start="81:30" pos:end="81:87"><call pos:start="81:30" pos:end="81:87"><name pos:start="81:30" pos:end="81:52">av_packet_get_side_data</name><argument_list pos:start="81:53" pos:end="81:87">(<argument pos:start="81:54" pos:end="81:58"><expr pos:start="81:54" pos:end="81:58"><name pos:start="81:54" pos:end="81:58">avpkt</name></expr></argument>, <argument pos:start="81:61" pos:end="81:79"><expr pos:start="81:61" pos:end="81:79"><name pos:start="81:61" pos:end="81:79">AV_PKT_DATA_PALETTE</name></expr></argument>, <argument pos:start="81:82" pos:end="81:86"><expr pos:start="81:82" pos:end="81:86"><operator pos:start="81:82" pos:end="81:82">&amp;</operator><name pos:start="81:83" pos:end="81:86">size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="82:9" pos:end="103:20"><if pos:start="82:9" pos:end="85:9">if <condition pos:start="82:12" pos:end="82:42">(<expr pos:start="82:13" pos:end="82:41"><name pos:start="82:13" pos:end="82:15">pal</name> <operator pos:start="82:17" pos:end="82:18">&amp;&amp;</operator> <name pos:start="82:20" pos:end="82:23">size</name> <operator pos:start="82:25" pos:end="82:26">==</operator> <name pos:start="82:28" pos:end="82:41">AVPALETTE_SIZE</name></expr>)</condition> <block pos:start="82:44" pos:end="85:9">{<block_content pos:start="83:13" pos:end="84:48">
            <expr_stmt pos:start="83:13" pos:end="83:43"><expr pos:start="83:13" pos:end="83:42"><name pos:start="83:13" pos:end="83:38"><name pos:start="83:13" pos:end="83:17">frame</name><operator pos:start="83:18" pos:end="83:19">-&gt;</operator><name pos:start="83:20" pos:end="83:38">palette_has_changed</name></name> <operator pos:start="83:40" pos:end="83:40">=</operator> <literal type="number" pos:start="83:42" pos:end="83:42">1</literal></expr>;</expr_stmt>
            <expr_stmt pos:start="84:13" pos:end="84:48"><expr pos:start="84:13" pos:end="84:47"><call pos:start="84:13" pos:end="84:47"><name pos:start="84:13" pos:end="84:18">memcpy</name><argument_list pos:start="84:19" pos:end="84:47">(<argument pos:start="84:20" pos:end="84:25"><expr pos:start="84:20" pos:end="84:25"><name pos:start="84:20" pos:end="84:25"><name pos:start="84:20" pos:end="84:20">s</name><operator pos:start="84:21" pos:end="84:22">-&gt;</operator><name pos:start="84:23" pos:end="84:25">pal</name></name></expr></argument>, <argument pos:start="84:28" pos:end="84:30"><expr pos:start="84:28" pos:end="84:30"><name pos:start="84:28" pos:end="84:30">pal</name></expr></argument>, <argument pos:start="84:33" pos:end="84:46"><expr pos:start="84:33" pos:end="84:46"><name pos:start="84:33" pos:end="84:46">AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="85:11" pos:end="103:20">else if <condition pos:start="85:19" pos:end="85:23">(<expr pos:start="85:20" pos:end="85:22"><name pos:start="85:20" pos:end="85:22">pal</name></expr>)</condition> <block pos:start="85:25" pos:end="103:20">{<block_content pos:start="86:13" pos:end="103:20">
            <expr_stmt pos:start="86:13" pos:end="86:76"><expr pos:start="86:13" pos:end="86:75"><call pos:start="86:13" pos:end="86:75"><name pos:start="86:13" pos:end="86:18">av_log</name><argument_list pos:start="86:19" pos:end="86:75">(<argument pos:start="86:20" pos:end="86:24"><expr pos:start="86:20" pos:end="86:24"><name pos:start="86:20" pos:end="86:24">avctx</name></expr></argument>, <argument pos:start="86:27" pos:end="86:38"><expr pos:start="86:27" pos:end="86:38"><name pos:start="86:27" pos:end="86:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="86:41" pos:end="86:68"><expr pos:start="86:41" pos:end="86:68"><literal type="string" pos:start="86:41" pos:end="86:68">"Palette size %d is wrong\n"</literal></expr></argument>, <argument pos:start="86:71" pos:end="86:74"><expr pos:start="86:71" pos:end="86:74"><name pos:start="86:71" pos:end="86:74">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch pos:start="87:5" pos:end="103:20">switch<condition pos:start="87:11" pos:end="87:24">(<expr pos:start="87:12" pos:end="87:23"><name pos:start="87:12" pos:end="87:23">frame_format</name></expr>)</condition> <block pos:start="87:26" pos:end="103:20">{<block_content pos:start="88:9" pos:end="103:20">
        <case pos:start="88:9" pos:end="88:18">case <expr pos:start="88:14" pos:end="88:17"><literal type="number" pos:start="88:14" pos:end="88:17">0x06</literal></expr>:</case>
            <expr_stmt pos:start="89:13" pos:end="89:55"><expr pos:start="89:13" pos:end="89:54"><call pos:start="89:13" pos:end="89:54"><name pos:start="89:13" pos:end="89:44">ipvideo_decode_format_06_opcodes</name><argument_list pos:start="89:45" pos:end="89:54">(<argument pos:start="89:46" pos:end="89:46"><expr pos:start="89:46" pos:end="89:46"><name pos:start="89:46" pos:end="89:46">s</name></expr></argument>, <argument pos:start="89:49" pos:end="89:53"><expr pos:start="89:49" pos:end="89:53"><name pos:start="89:49" pos:end="89:53">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="90:13" pos:end="90:18">break;</break>
        <case pos:start="91:9" pos:end="91:18">case <expr pos:start="91:14" pos:end="91:17"><literal type="number" pos:start="91:14" pos:end="91:17">0x10</literal></expr>:</case>
            <expr_stmt pos:start="92:13" pos:end="92:55"><expr pos:start="92:13" pos:end="92:54"><call pos:start="92:13" pos:end="92:54"><name pos:start="92:13" pos:end="92:44">ipvideo_decode_format_10_opcodes</name><argument_list pos:start="92:45" pos:end="92:54">(<argument pos:start="92:46" pos:end="92:46"><expr pos:start="92:46" pos:end="92:46"><name pos:start="92:46" pos:end="92:46">s</name></expr></argument>, <argument pos:start="92:49" pos:end="92:53"><expr pos:start="92:49" pos:end="92:53"><name pos:start="92:49" pos:end="92:53">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="93:13" pos:end="93:18">break;</break>
        <case pos:start="94:9" pos:end="94:18">case <expr pos:start="94:14" pos:end="94:17"><literal type="number" pos:start="94:14" pos:end="94:17">0x11</literal></expr>:</case>
            <expr_stmt pos:start="95:13" pos:end="95:55"><expr pos:start="95:13" pos:end="95:54"><call pos:start="95:13" pos:end="95:54"><name pos:start="95:13" pos:end="95:44">ipvideo_decode_format_11_opcodes</name><argument_list pos:start="95:45" pos:end="95:54">(<argument pos:start="95:46" pos:end="95:46"><expr pos:start="95:46" pos:end="95:46"><name pos:start="95:46" pos:end="95:46">s</name></expr></argument>, <argument pos:start="95:49" pos:end="95:53"><expr pos:start="95:49" pos:end="95:53"><name pos:start="95:49" pos:end="95:53">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break pos:start="96:13" pos:end="96:18">break;</break>
    <expr_stmt pos:start="97:5" pos:end="97:29"><expr pos:start="97:5" pos:end="97:28"><operator pos:start="97:5" pos:end="97:5">*</operator><name pos:start="97:6" pos:end="97:14">got_frame</name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:28">send_buffer</name></expr>;</expr_stmt>
    <comment type="block" pos:start="98:5" pos:end="98:24">/* shuffle frames */</comment>
    <expr_stmt pos:start="99:5" pos:end="99:41"><expr pos:start="99:5" pos:end="99:40"><call pos:start="99:5" pos:end="99:40"><name pos:start="99:5" pos:end="99:18">av_frame_unref</name><argument_list pos:start="99:19" pos:end="99:40">(<argument pos:start="99:20" pos:end="99:39"><expr pos:start="99:20" pos:end="99:39"><name pos:start="99:20" pos:end="99:39"><name pos:start="99:20" pos:end="99:20">s</name><operator pos:start="99:21" pos:end="99:22">-&gt;</operator><name pos:start="99:23" pos:end="99:39">second_last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="100:5" pos:end="100:58"><expr pos:start="100:5" pos:end="100:57"><call pos:start="100:5" pos:end="100:57"><name pos:start="100:5" pos:end="100:10">FFSWAP</name><argument_list pos:start="100:11" pos:end="100:57">(<argument pos:start="100:12" pos:end="100:19"><expr pos:start="100:12" pos:end="100:19"><name pos:start="100:12" pos:end="100:18">AVFrame</name><operator pos:start="100:19" pos:end="100:19">*</operator></expr></argument>, <argument pos:start="100:22" pos:end="100:41"><expr pos:start="100:22" pos:end="100:41"><name pos:start="100:22" pos:end="100:41"><name pos:start="100:22" pos:end="100:22">s</name><operator pos:start="100:23" pos:end="100:24">-&gt;</operator><name pos:start="100:25" pos:end="100:41">second_last_frame</name></name></expr></argument>, <argument pos:start="100:44" pos:end="100:56"><expr pos:start="100:44" pos:end="100:56"><name pos:start="100:44" pos:end="100:56"><name pos:start="100:44" pos:end="100:44">s</name><operator pos:start="100:45" pos:end="100:46">-&gt;</operator><name pos:start="100:47" pos:end="100:56">last_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="101:5" pos:end="103:20"><if pos:start="101:5" pos:end="103:20">if <condition pos:start="101:8" pos:end="101:55">(<expr pos:start="101:9" pos:end="101:54"><operator pos:start="101:9" pos:end="101:9">(</operator><name pos:start="101:10" pos:end="101:12">ret</name> <operator pos:start="101:14" pos:end="101:14">=</operator> <call pos:start="101:16" pos:end="101:49"><name pos:start="101:16" pos:end="101:27">av_frame_ref</name><argument_list pos:start="101:28" pos:end="101:49">(<argument pos:start="101:29" pos:end="101:41"><expr pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:41"><name pos:start="101:29" pos:end="101:29">s</name><operator pos:start="101:30" pos:end="101:31">-&gt;</operator><name pos:start="101:32" pos:end="101:41">last_frame</name></name></expr></argument>, <argument pos:start="101:44" pos:end="101:48"><expr pos:start="101:44" pos:end="101:48"><name pos:start="101:44" pos:end="101:48">frame</name></expr></argument>)</argument_list></call><operator pos:start="101:50" pos:end="101:50">)</operator> <operator pos:start="101:52" pos:end="101:52">&lt;</operator> <literal type="number" pos:start="101:54" pos:end="101:54">0</literal></expr>)</condition><block type="pseudo" pos:start="103:5" pos:end="103:20"><block_content pos:start="103:5" pos:end="103:20">
    <comment type="block" pos:start="102:5" pos:end="102:56">/* report that the buffer was completely consumed */</comment>
    <return pos:start="103:5" pos:end="103:20">return <expr pos:start="103:12" pos:end="103:19"><name pos:start="103:12" pos:end="103:19">buf_size</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></switch></block_content></block></if></if_stmt></block_content></block></function></unit>
