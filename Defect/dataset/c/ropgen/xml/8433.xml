<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/8433.c" pos:tabs="8"><function pos:start="1:1" pos:end="551:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:19">net_client_init</name><parameter_list pos:start="1:20" pos:end="1:54">(<parameter pos:start="1:21" pos:end="1:38"><decl pos:start="1:21" pos:end="1:38"><type pos:start="1:21" pos:end="1:38"><specifier pos:start="1:21" pos:end="1:25">const</specifier> <name pos:start="1:27" pos:end="1:30">char</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:38">device</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:53"><decl pos:start="1:41" pos:end="1:53"><type pos:start="1:41" pos:end="1:53"><specifier pos:start="1:41" pos:end="1:45">const</specifier> <name pos:start="1:47" pos:end="1:50">char</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:53">p</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="551:1">{<block_content pos:start="5:5" pos:end="549:15">

    <decl_stmt pos:start="5:5" pos:end="9:6"><decl pos:start="5:5" pos:end="9:5"><type pos:start="5:5" pos:end="5:29"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name> <modifier pos:start="5:23" pos:end="5:23">*</modifier> <specifier pos:start="5:25" pos:end="5:29">const</specifier></type> <name pos:start="5:31" pos:end="5:41"><name pos:start="5:31" pos:end="5:39">fd_params</name><index pos:start="5:40" pos:end="5:41">[]</index></name> <init pos:start="5:43" pos:end="9:5">= <expr pos:start="5:45" pos:end="9:5"><block pos:start="5:45" pos:end="9:5">{

        <expr pos:start="7:9" pos:end="7:14"><literal type="string" pos:start="7:9" pos:end="7:14">"vlan"</literal></expr>, <expr pos:start="7:17" pos:end="7:22"><literal type="string" pos:start="7:17" pos:end="7:22">"name"</literal></expr>, <expr pos:start="7:25" pos:end="7:28"><literal type="string" pos:start="7:25" pos:end="7:28">"fd"</literal></expr>, <expr pos:start="7:31" pos:end="7:34"><name pos:start="7:31" pos:end="7:34">NULL</name></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:19"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:18"><name pos:start="11:10" pos:end="11:12">buf</name><index pos:start="11:13" pos:end="11:18">[<expr pos:start="11:14" pos:end="11:17"><literal type="number" pos:start="11:14" pos:end="11:17">1024</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:15">vlan_id</name></decl>, <decl pos:start="13:18" pos:end="13:20"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:18" pos:end="13:20">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:13">VLANState</name> <modifier pos:start="15:15" pos:end="15:15">*</modifier></type><name pos:start="15:16" pos:end="15:19">vlan</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:22"><decl pos:start="17:5" pos:end="17:21"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:8">char</name> <modifier pos:start="17:10" pos:end="17:10">*</modifier></type><name pos:start="17:11" pos:end="17:14">name</name> <init pos:start="17:16" pos:end="17:21">= <expr pos:start="17:18" pos:end="17:21"><name pos:start="17:18" pos:end="17:21">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:16"><expr pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:11">vlan_id</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <literal type="number" pos:start="21:15" pos:end="21:15">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:53">(<expr pos:start="23:9" pos:end="23:52"><call pos:start="23:9" pos:end="23:52"><name pos:start="23:9" pos:end="23:23">get_param_value</name><argument_list pos:start="23:24" pos:end="23:52">(<argument pos:start="23:25" pos:end="23:27"><expr pos:start="23:25" pos:end="23:27"><name pos:start="23:25" pos:end="23:27">buf</name></expr></argument>, <argument pos:start="23:30" pos:end="23:40"><expr pos:start="23:30" pos:end="23:40"><sizeof pos:start="23:30" pos:end="23:40">sizeof<argument_list pos:start="23:36" pos:end="23:40">(<argument pos:start="23:37" pos:end="23:39"><expr pos:start="23:37" pos:end="23:39"><name pos:start="23:37" pos:end="23:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="23:43" pos:end="23:48"><expr pos:start="23:43" pos:end="23:48"><literal type="string" pos:start="23:43" pos:end="23:48">"vlan"</literal></expr></argument>, <argument pos:start="23:51" pos:end="23:51"><expr pos:start="23:51" pos:end="23:51"><name pos:start="23:51" pos:end="23:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:55" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:39">

        <expr_stmt pos:start="25:9" pos:end="25:39"><expr pos:start="25:9" pos:end="25:38"><name pos:start="25:9" pos:end="25:15">vlan_id</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <call pos:start="25:19" pos:end="25:38"><name pos:start="25:19" pos:end="25:24">strtol</name><argument_list pos:start="25:25" pos:end="25:38">(<argument pos:start="25:26" pos:end="25:28"><expr pos:start="25:26" pos:end="25:28"><name pos:start="25:26" pos:end="25:28">buf</name></expr></argument>, <argument pos:start="25:31" pos:end="25:34"><expr pos:start="25:31" pos:end="25:34"><name pos:start="25:31" pos:end="25:34">NULL</name></expr></argument>, <argument pos:start="25:37" pos:end="25:37"><expr pos:start="25:37" pos:end="25:37"><literal type="number" pos:start="25:37" pos:end="25:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:35"><expr pos:start="29:5" pos:end="29:34"><name pos:start="29:5" pos:end="29:8">vlan</name> <operator pos:start="29:10" pos:end="29:10">=</operator> <call pos:start="29:12" pos:end="29:34"><name pos:start="29:12" pos:end="29:25">qemu_find_vlan</name><argument_list pos:start="29:26" pos:end="29:34">(<argument pos:start="29:27" pos:end="29:33"><expr pos:start="29:27" pos:end="29:33"><name pos:start="29:27" pos:end="29:33">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:53">(<expr pos:start="33:9" pos:end="33:52"><call pos:start="33:9" pos:end="33:52"><name pos:start="33:9" pos:end="33:23">get_param_value</name><argument_list pos:start="33:24" pos:end="33:52">(<argument pos:start="33:25" pos:end="33:27"><expr pos:start="33:25" pos:end="33:27"><name pos:start="33:25" pos:end="33:27">buf</name></expr></argument>, <argument pos:start="33:30" pos:end="33:40"><expr pos:start="33:30" pos:end="33:40"><sizeof pos:start="33:30" pos:end="33:40">sizeof<argument_list pos:start="33:36" pos:end="33:40">(<argument pos:start="33:37" pos:end="33:39"><expr pos:start="33:37" pos:end="33:39"><name pos:start="33:37" pos:end="33:39">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="33:43" pos:end="33:48"><expr pos:start="33:43" pos:end="33:48"><literal type="string" pos:start="33:43" pos:end="33:48">"name"</literal></expr></argument>, <argument pos:start="33:51" pos:end="33:51"><expr pos:start="33:51" pos:end="33:51"><name pos:start="33:51" pos:end="33:51">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="33:55" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:27">

        <expr_stmt pos:start="35:9" pos:end="35:27"><expr pos:start="35:9" pos:end="35:26"><name pos:start="35:9" pos:end="35:12">name</name> <operator pos:start="35:14" pos:end="35:14">=</operator> <call pos:start="35:16" pos:end="35:26"><name pos:start="35:16" pos:end="35:21">strdup</name><argument_list pos:start="35:22" pos:end="35:26">(<argument pos:start="35:23" pos:end="35:25"><expr pos:start="35:23" pos:end="35:25"><name pos:start="35:23" pos:end="35:25">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="535:5"><if pos:start="39:5" pos:end="125:5">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><operator pos:start="39:9" pos:end="39:9">!</operator><call pos:start="39:10" pos:end="39:30"><name pos:start="39:10" pos:end="39:15">strcmp</name><argument_list pos:start="39:16" pos:end="39:30">(<argument pos:start="39:17" pos:end="39:22"><expr pos:start="39:17" pos:end="39:22"><name pos:start="39:17" pos:end="39:22">device</name></expr></argument>, <argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><literal type="string" pos:start="39:25" pos:end="39:29">"nic"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:33" pos:end="125:5">{<block_content pos:start="41:9" pos:end="123:18">

        <decl_stmt pos:start="41:9" pos:end="45:10"><decl pos:start="41:9" pos:end="45:9"><type pos:start="41:9" pos:end="41:33"><specifier pos:start="41:9" pos:end="41:14">static</specifier> <specifier pos:start="41:16" pos:end="41:20">const</specifier> <name pos:start="41:22" pos:end="41:25">char</name> <modifier pos:start="41:27" pos:end="41:27">*</modifier> <specifier pos:start="41:29" pos:end="41:33">const</specifier></type> <name pos:start="41:35" pos:end="41:46"><name pos:start="41:35" pos:end="41:44">nic_params</name><index pos:start="41:45" pos:end="41:46">[]</index></name> <init pos:start="41:48" pos:end="45:9">= <expr pos:start="41:50" pos:end="45:9"><block pos:start="41:50" pos:end="45:9">{

            <expr pos:start="43:13" pos:end="43:18"><literal type="string" pos:start="43:13" pos:end="43:18">"vlan"</literal></expr>, <expr pos:start="43:21" pos:end="43:26"><literal type="string" pos:start="43:21" pos:end="43:26">"name"</literal></expr>, <expr pos:start="43:29" pos:end="43:37"><literal type="string" pos:start="43:29" pos:end="43:37">"macaddr"</literal></expr>, <expr pos:start="43:40" pos:end="43:46"><literal type="string" pos:start="43:40" pos:end="43:46">"model"</literal></expr>, <expr pos:start="43:49" pos:end="43:52"><name pos:start="43:49" pos:end="43:52">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="47:9" pos:end="47:20"><decl pos:start="47:9" pos:end="47:19"><type pos:start="47:9" pos:end="47:17"><name pos:start="47:9" pos:end="47:15">NICInfo</name> <modifier pos:start="47:17" pos:end="47:17">*</modifier></type><name pos:start="47:18" pos:end="47:19">nd</name></decl>;</decl_stmt>

        <decl_stmt pos:start="49:9" pos:end="49:25"><decl pos:start="49:9" pos:end="49:24"><type pos:start="49:9" pos:end="49:17"><name pos:start="49:9" pos:end="49:15">uint8_t</name> <modifier pos:start="49:17" pos:end="49:17">*</modifier></type><name pos:start="49:18" pos:end="49:24">macaddr</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:37"><decl pos:start="51:9" pos:end="51:36"><type pos:start="51:9" pos:end="51:11"><name pos:start="51:9" pos:end="51:11">int</name></type> <name pos:start="51:13" pos:end="51:15">idx</name> <init pos:start="51:17" pos:end="51:36">= <expr pos:start="51:19" pos:end="51:36"><call pos:start="51:19" pos:end="51:36"><name pos:start="51:19" pos:end="51:34">nic_get_free_idx</name><argument_list pos:start="51:35" pos:end="51:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:44">(<expr pos:start="55:13" pos:end="55:43"><call pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:24">check_params</name><argument_list pos:start="55:25" pos:end="55:39">(<argument pos:start="55:26" pos:end="55:35"><expr pos:start="55:26" pos:end="55:35"><name pos:start="55:26" pos:end="55:35">nic_params</name></expr></argument>, <argument pos:start="55:38" pos:end="55:38"><expr pos:start="55:38" pos:end="55:38"><name pos:start="55:38" pos:end="55:38">p</name></expr></argument>)</argument_list></call> <operator pos:start="55:41" pos:end="55:41">&lt;</operator> <literal type="number" pos:start="55:43" pos:end="55:43">0</literal></expr>)</condition> <block pos:start="55:46" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:22">

            <expr_stmt pos:start="57:13" pos:end="57:68"><expr pos:start="57:13" pos:end="57:67"><call pos:start="57:13" pos:end="57:67"><name pos:start="57:13" pos:end="57:19">fprintf</name><argument_list pos:start="57:20" pos:end="57:67">(<argument pos:start="57:21" pos:end="57:26"><expr pos:start="57:21" pos:end="57:26"><name pos:start="57:21" pos:end="57:26">stderr</name></expr></argument>, <argument pos:start="57:29" pos:end="57:63"><expr pos:start="57:29" pos:end="57:63"><literal type="string" pos:start="57:29" pos:end="57:63">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="57:66" pos:end="57:66"><expr pos:start="57:66" pos:end="57:66"><name pos:start="57:66" pos:end="57:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:22">return <expr pos:start="59:20" pos:end="59:21"><operator pos:start="59:20" pos:end="59:20">-</operator><literal type="number" pos:start="59:21" pos:end="59:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="71:9"><if pos:start="63:9" pos:end="71:9">if <condition pos:start="63:12" pos:end="63:45">(<expr pos:start="63:13" pos:end="63:44"><name pos:start="63:13" pos:end="63:15">idx</name> <operator pos:start="63:17" pos:end="63:18">==</operator> <operator pos:start="63:20" pos:end="63:20">-</operator><literal type="number" pos:start="63:21" pos:end="63:21">1</literal> <operator pos:start="63:23" pos:end="63:24">||</operator> <name pos:start="63:26" pos:end="63:32">nb_nics</name> <operator pos:start="63:34" pos:end="63:35">&gt;=</operator> <name pos:start="63:37" pos:end="63:44">MAX_NICS</name></expr>)</condition> <block pos:start="63:47" pos:end="71:9">{<block_content pos:start="65:13" pos:end="69:21">

            <expr_stmt pos:start="65:13" pos:end="65:47"><expr pos:start="65:13" pos:end="65:46"><call pos:start="65:13" pos:end="65:46"><name pos:start="65:13" pos:end="65:19">fprintf</name><argument_list pos:start="65:20" pos:end="65:46">(<argument pos:start="65:21" pos:end="65:26"><expr pos:start="65:21" pos:end="65:26"><name pos:start="65:21" pos:end="65:26">stderr</name></expr></argument>, <argument pos:start="65:29" pos:end="65:45"><expr pos:start="65:29" pos:end="65:45"><literal type="string" pos:start="65:29" pos:end="65:45">"Too Many NICs\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:21"><expr pos:start="67:13" pos:end="67:20"><name pos:start="67:13" pos:end="67:15">ret</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <operator pos:start="67:19" pos:end="67:19">-</operator><literal type="number" pos:start="67:20" pos:end="67:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="69:13" pos:end="69:21">goto <name pos:start="69:18" pos:end="69:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:28"><expr pos:start="73:9" pos:end="73:27"><name pos:start="73:9" pos:end="73:10">nd</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <operator pos:start="73:14" pos:end="73:14">&amp;</operator><name pos:start="73:15" pos:end="73:27"><name pos:start="73:15" pos:end="73:22">nd_table</name><index pos:start="73:23" pos:end="73:27">[<expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:26">idx</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:30"><expr pos:start="75:9" pos:end="75:29"><name pos:start="75:9" pos:end="75:15">macaddr</name> <operator pos:start="75:17" pos:end="75:17">=</operator> <name pos:start="75:19" pos:end="75:29"><name pos:start="75:19" pos:end="75:20">nd</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:29">macaddr</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:26"><expr pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:15">macaddr</name><index pos:start="77:16" pos:end="77:18">[<expr pos:start="77:17" pos:end="77:17"><literal type="number" pos:start="77:17" pos:end="77:17">0</literal></expr>]</index></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <literal type="number" pos:start="77:22" pos:end="77:25">0x52</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:26"><expr pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:18"><name pos:start="79:9" pos:end="79:15">macaddr</name><index pos:start="79:16" pos:end="79:18">[<expr pos:start="79:17" pos:end="79:17"><literal type="number" pos:start="79:17" pos:end="79:17">1</literal></expr>]</index></name> <operator pos:start="79:20" pos:end="79:20">=</operator> <literal type="number" pos:start="79:22" pos:end="79:25">0x54</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:26"><expr pos:start="81:9" pos:end="81:25"><name pos:start="81:9" pos:end="81:18"><name pos:start="81:9" pos:end="81:15">macaddr</name><index pos:start="81:16" pos:end="81:18">[<expr pos:start="81:17" pos:end="81:17"><literal type="number" pos:start="81:17" pos:end="81:17">2</literal></expr>]</index></name> <operator pos:start="81:20" pos:end="81:20">=</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x00</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:26"><expr pos:start="83:9" pos:end="83:25"><name pos:start="83:9" pos:end="83:18"><name pos:start="83:9" pos:end="83:15">macaddr</name><index pos:start="83:16" pos:end="83:18">[<expr pos:start="83:17" pos:end="83:17"><literal type="number" pos:start="83:17" pos:end="83:17">3</literal></expr>]</index></name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:25">0x12</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:26"><expr pos:start="85:9" pos:end="85:25"><name pos:start="85:9" pos:end="85:18"><name pos:start="85:9" pos:end="85:15">macaddr</name><index pos:start="85:16" pos:end="85:18">[<expr pos:start="85:17" pos:end="85:17"><literal type="number" pos:start="85:17" pos:end="85:17">4</literal></expr>]</index></name> <operator pos:start="85:20" pos:end="85:20">=</operator> <literal type="number" pos:start="85:22" pos:end="85:25">0x34</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:32"><expr pos:start="87:9" pos:end="87:31"><name pos:start="87:9" pos:end="87:18"><name pos:start="87:9" pos:end="87:15">macaddr</name><index pos:start="87:16" pos:end="87:18">[<expr pos:start="87:17" pos:end="87:17"><literal type="number" pos:start="87:17" pos:end="87:17">5</literal></expr>]</index></name> <operator pos:start="87:20" pos:end="87:20">=</operator> <literal type="number" pos:start="87:22" pos:end="87:27">0x56</literal> <operator pos:start="87:27" pos:end="87:27">+</operator> <name pos:start="87:29" pos:end="87:31">idx</name></expr>;</expr_stmt>



        <if_stmt pos:start="91:9" pos:end="103:9"><if pos:start="91:9" pos:end="103:9">if <condition pos:start="91:12" pos:end="91:60">(<expr pos:start="91:13" pos:end="91:59"><call pos:start="91:13" pos:end="91:59"><name pos:start="91:13" pos:end="91:27">get_param_value</name><argument_list pos:start="91:28" pos:end="91:59">(<argument pos:start="91:29" pos:end="91:31"><expr pos:start="91:29" pos:end="91:31"><name pos:start="91:29" pos:end="91:31">buf</name></expr></argument>, <argument pos:start="91:34" pos:end="91:44"><expr pos:start="91:34" pos:end="91:44"><sizeof pos:start="91:34" pos:end="91:44">sizeof<argument_list pos:start="91:40" pos:end="91:44">(<argument pos:start="91:41" pos:end="91:43"><expr pos:start="91:41" pos:end="91:43"><name pos:start="91:41" pos:end="91:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="91:47" pos:end="91:55"><expr pos:start="91:47" pos:end="91:55"><literal type="string" pos:start="91:47" pos:end="91:55">"macaddr"</literal></expr></argument>, <argument pos:start="91:58" pos:end="91:58"><expr pos:start="91:58" pos:end="91:58"><name pos:start="91:58" pos:end="91:58">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="91:62" pos:end="103:9">{<block_content pos:start="93:13" pos:end="101:13">

            <if_stmt pos:start="93:13" pos:end="101:13"><if pos:start="93:13" pos:end="101:13">if <condition pos:start="93:16" pos:end="93:48">(<expr pos:start="93:17" pos:end="93:47"><call pos:start="93:17" pos:end="93:43"><name pos:start="93:17" pos:end="93:29">parse_macaddr</name><argument_list pos:start="93:30" pos:end="93:43">(<argument pos:start="93:31" pos:end="93:37"><expr pos:start="93:31" pos:end="93:37"><name pos:start="93:31" pos:end="93:37">macaddr</name></expr></argument>, <argument pos:start="93:40" pos:end="93:42"><expr pos:start="93:40" pos:end="93:42"><name pos:start="93:40" pos:end="93:42">buf</name></expr></argument>)</argument_list></call> <operator pos:start="93:45" pos:end="93:45">&lt;</operator> <literal type="number" pos:start="93:47" pos:end="93:47">0</literal></expr>)</condition> <block pos:start="93:50" pos:end="101:13">{<block_content pos:start="95:17" pos:end="99:25">

                <expr_stmt pos:start="95:17" pos:end="95:73"><expr pos:start="95:17" pos:end="95:72"><call pos:start="95:17" pos:end="95:72"><name pos:start="95:17" pos:end="95:23">fprintf</name><argument_list pos:start="95:24" pos:end="95:72">(<argument pos:start="95:25" pos:end="95:30"><expr pos:start="95:25" pos:end="95:30"><name pos:start="95:25" pos:end="95:30">stderr</name></expr></argument>, <argument pos:start="95:33" pos:end="95:71"><expr pos:start="95:33" pos:end="95:71"><literal type="string" pos:start="95:33" pos:end="95:71">"invalid syntax for ethernet address\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="97:17" pos:end="97:25"><expr pos:start="97:17" pos:end="97:24"><name pos:start="97:17" pos:end="97:19">ret</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <operator pos:start="97:23" pos:end="97:23">-</operator><literal type="number" pos:start="97:24" pos:end="97:24">1</literal></expr>;</expr_stmt>

                <goto pos:start="99:17" pos:end="99:25">goto <name pos:start="99:22" pos:end="99:24">out</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="105:9" pos:end="109:9"><if pos:start="105:9" pos:end="109:9">if <condition pos:start="105:12" pos:end="105:58">(<expr pos:start="105:13" pos:end="105:57"><call pos:start="105:13" pos:end="105:57"><name pos:start="105:13" pos:end="105:27">get_param_value</name><argument_list pos:start="105:28" pos:end="105:57">(<argument pos:start="105:29" pos:end="105:31"><expr pos:start="105:29" pos:end="105:31"><name pos:start="105:29" pos:end="105:31">buf</name></expr></argument>, <argument pos:start="105:34" pos:end="105:44"><expr pos:start="105:34" pos:end="105:44"><sizeof pos:start="105:34" pos:end="105:44">sizeof<argument_list pos:start="105:40" pos:end="105:44">(<argument pos:start="105:41" pos:end="105:43"><expr pos:start="105:41" pos:end="105:43"><name pos:start="105:41" pos:end="105:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="105:47" pos:end="105:53"><expr pos:start="105:47" pos:end="105:53"><literal type="string" pos:start="105:47" pos:end="105:53">"model"</literal></expr></argument>, <argument pos:start="105:56" pos:end="105:56"><expr pos:start="105:56" pos:end="105:56"><name pos:start="105:56" pos:end="105:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="105:60" pos:end="109:9">{<block_content pos:start="107:13" pos:end="107:36">

            <expr_stmt pos:start="107:13" pos:end="107:36"><expr pos:start="107:13" pos:end="107:35"><name pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:14">nd</name><operator pos:start="107:15" pos:end="107:16">-&gt;</operator><name pos:start="107:17" pos:end="107:21">model</name></name> <operator pos:start="107:23" pos:end="107:23">=</operator> <call pos:start="107:25" pos:end="107:35"><name pos:start="107:25" pos:end="107:30">strdup</name><argument_list pos:start="107:31" pos:end="107:35">(<argument pos:start="107:32" pos:end="107:34"><expr pos:start="107:32" pos:end="107:34"><name pos:start="107:32" pos:end="107:34">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="111:9" pos:end="111:24"><expr pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:16"><name pos:start="111:9" pos:end="111:10">nd</name><operator pos:start="111:11" pos:end="111:12">-&gt;</operator><name pos:start="111:13" pos:end="111:16">vlan</name></name> <operator pos:start="111:18" pos:end="111:18">=</operator> <name pos:start="111:20" pos:end="111:23">vlan</name></expr>;</expr_stmt>

        <expr_stmt pos:start="113:9" pos:end="113:24"><expr pos:start="113:9" pos:end="113:23"><name pos:start="113:9" pos:end="113:16"><name pos:start="113:9" pos:end="113:10">nd</name><operator pos:start="113:11" pos:end="113:12">-&gt;</operator><name pos:start="113:13" pos:end="113:16">name</name></name> <operator pos:start="113:18" pos:end="113:18">=</operator> <name pos:start="113:20" pos:end="113:23">name</name></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:21"><expr pos:start="115:9" pos:end="115:20"><name pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:10">nd</name><operator pos:start="115:11" pos:end="115:12">-&gt;</operator><name pos:start="115:13" pos:end="115:16">used</name></name> <operator pos:start="115:18" pos:end="115:18">=</operator> <literal type="number" pos:start="115:20" pos:end="115:20">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="117:9" pos:end="117:20"><expr pos:start="117:9" pos:end="117:19"><name pos:start="117:9" pos:end="117:12">name</name> <operator pos:start="117:14" pos:end="117:14">=</operator> <name pos:start="117:16" pos:end="117:19">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="119:9" pos:end="119:18"><expr pos:start="119:9" pos:end="119:17"><name pos:start="119:9" pos:end="119:15">nb_nics</name><operator pos:start="119:16" pos:end="119:17">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:30"><expr pos:start="121:9" pos:end="121:29"><name pos:start="121:9" pos:end="121:27"><name pos:start="121:9" pos:end="121:12">vlan</name><operator pos:start="121:13" pos:end="121:14">-&gt;</operator><name pos:start="121:15" pos:end="121:27">nb_guest_devs</name></name><operator pos:start="121:28" pos:end="121:29">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:18"><expr pos:start="123:9" pos:end="123:17"><name pos:start="123:9" pos:end="123:11">ret</name> <operator pos:start="123:13" pos:end="123:13">=</operator> <name pos:start="123:15" pos:end="123:17">idx</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="143:5">else

    if <condition pos:start="127:8" pos:end="127:32">(<expr pos:start="127:9" pos:end="127:31"><operator pos:start="127:9" pos:end="127:9">!</operator><call pos:start="127:10" pos:end="127:31"><name pos:start="127:10" pos:end="127:15">strcmp</name><argument_list pos:start="127:16" pos:end="127:31">(<argument pos:start="127:17" pos:end="127:22"><expr pos:start="127:17" pos:end="127:22"><name pos:start="127:17" pos:end="127:22">device</name></expr></argument>, <argument pos:start="127:25" pos:end="127:30"><expr pos:start="127:25" pos:end="127:30"><literal type="string" pos:start="127:25" pos:end="127:30">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:34" pos:end="143:5">{<block_content pos:start="129:9" pos:end="141:16">

        <if_stmt pos:start="129:9" pos:end="135:9"><if pos:start="129:9" pos:end="135:9">if <condition pos:start="129:12" pos:end="129:23">(<expr pos:start="129:13" pos:end="129:22"><operator pos:start="129:13" pos:end="129:13">*</operator><name pos:start="129:14" pos:end="129:14">p</name> <operator pos:start="129:16" pos:end="129:17">!=</operator> <literal type="char" pos:start="129:19" pos:end="129:22">'\0'</literal></expr>)</condition> <block pos:start="129:25" pos:end="135:9">{<block_content pos:start="131:13" pos:end="133:22">

            <expr_stmt pos:start="131:13" pos:end="131:66"><expr pos:start="131:13" pos:end="131:65"><call pos:start="131:13" pos:end="131:65"><name pos:start="131:13" pos:end="131:19">fprintf</name><argument_list pos:start="131:20" pos:end="131:65">(<argument pos:start="131:21" pos:end="131:26"><expr pos:start="131:21" pos:end="131:26"><name pos:start="131:21" pos:end="131:26">stderr</name></expr></argument>, <argument pos:start="131:29" pos:end="131:64"><expr pos:start="131:29" pos:end="131:64"><literal type="string" pos:start="131:29" pos:end="131:64">"qemu: 'none' takes no parameters\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="133:13" pos:end="133:22">return <expr pos:start="133:20" pos:end="133:21"><operator pos:start="133:20" pos:end="133:20">-</operator><literal type="number" pos:start="133:21" pos:end="133:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="137:9" pos:end="139:24">/* does nothing. It is needed to signal that no network cards

           are wanted */</comment>

        <expr_stmt pos:start="141:9" pos:end="141:16"><expr pos:start="141:9" pos:end="141:15"><name pos:start="141:9" pos:end="141:11">ret</name> <operator pos:start="141:13" pos:end="141:13">=</operator> <literal type="number" pos:start="141:15" pos:end="141:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="143:7" pos:end="185:5">else

<cpp:ifdef pos:start="145:1" pos:end="145:19">#<cpp:directive pos:start="145:2" pos:end="145:6">ifdef</cpp:directive> <name pos:start="145:8" pos:end="145:19">CONFIG_SLIRP</name></cpp:ifdef>

    if <condition pos:start="147:8" pos:end="147:32">(<expr pos:start="147:9" pos:end="147:31"><operator pos:start="147:9" pos:end="147:9">!</operator><call pos:start="147:10" pos:end="147:31"><name pos:start="147:10" pos:end="147:15">strcmp</name><argument_list pos:start="147:16" pos:end="147:31">(<argument pos:start="147:17" pos:end="147:22"><expr pos:start="147:17" pos:end="147:22"><name pos:start="147:17" pos:end="147:22">device</name></expr></argument>, <argument pos:start="147:25" pos:end="147:30"><expr pos:start="147:25" pos:end="147:30"><literal type="string" pos:start="147:25" pos:end="147:30">"user"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="147:34" pos:end="185:5">{<block_content pos:start="149:9" pos:end="183:49">

        <decl_stmt pos:start="149:9" pos:end="153:10"><decl pos:start="149:9" pos:end="153:9"><type pos:start="149:9" pos:end="149:33"><specifier pos:start="149:9" pos:end="149:14">static</specifier> <specifier pos:start="149:16" pos:end="149:20">const</specifier> <name pos:start="149:22" pos:end="149:25">char</name> <modifier pos:start="149:27" pos:end="149:27">*</modifier> <specifier pos:start="149:29" pos:end="149:33">const</specifier></type> <name pos:start="149:35" pos:end="149:48"><name pos:start="149:35" pos:end="149:46">slirp_params</name><index pos:start="149:47" pos:end="149:48">[]</index></name> <init pos:start="149:50" pos:end="153:9">= <expr pos:start="149:52" pos:end="153:9"><block pos:start="149:52" pos:end="153:9">{

            <expr pos:start="151:13" pos:end="151:18"><literal type="string" pos:start="151:13" pos:end="151:18">"vlan"</literal></expr>, <expr pos:start="151:21" pos:end="151:26"><literal type="string" pos:start="151:21" pos:end="151:26">"name"</literal></expr>, <expr pos:start="151:29" pos:end="151:38"><literal type="string" pos:start="151:29" pos:end="151:38">"hostname"</literal></expr>, <expr pos:start="151:41" pos:end="151:50"><literal type="string" pos:start="151:41" pos:end="151:50">"restrict"</literal></expr>, <expr pos:start="151:53" pos:end="151:56"><literal type="string" pos:start="151:53" pos:end="151:56">"ip"</literal></expr>, <expr pos:start="151:59" pos:end="151:62"><name pos:start="151:59" pos:end="151:62">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="155:9" pos:end="161:9"><if pos:start="155:9" pos:end="161:9">if <condition pos:start="155:12" pos:end="155:46">(<expr pos:start="155:13" pos:end="155:45"><call pos:start="155:13" pos:end="155:41"><name pos:start="155:13" pos:end="155:24">check_params</name><argument_list pos:start="155:25" pos:end="155:41">(<argument pos:start="155:26" pos:end="155:37"><expr pos:start="155:26" pos:end="155:37"><name pos:start="155:26" pos:end="155:37">slirp_params</name></expr></argument>, <argument pos:start="155:40" pos:end="155:40"><expr pos:start="155:40" pos:end="155:40"><name pos:start="155:40" pos:end="155:40">p</name></expr></argument>)</argument_list></call> <operator pos:start="155:43" pos:end="155:43">&lt;</operator> <literal type="number" pos:start="155:45" pos:end="155:45">0</literal></expr>)</condition> <block pos:start="155:48" pos:end="161:9">{<block_content pos:start="157:13" pos:end="159:22">

            <expr_stmt pos:start="157:13" pos:end="157:68"><expr pos:start="157:13" pos:end="157:67"><call pos:start="157:13" pos:end="157:67"><name pos:start="157:13" pos:end="157:19">fprintf</name><argument_list pos:start="157:20" pos:end="157:67">(<argument pos:start="157:21" pos:end="157:26"><expr pos:start="157:21" pos:end="157:26"><name pos:start="157:21" pos:end="157:26">stderr</name></expr></argument>, <argument pos:start="157:29" pos:end="157:63"><expr pos:start="157:29" pos:end="157:63"><literal type="string" pos:start="157:29" pos:end="157:63">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="157:66" pos:end="157:66"><expr pos:start="157:66" pos:end="157:66"><name pos:start="157:66" pos:end="157:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="159:13" pos:end="159:22">return <expr pos:start="159:20" pos:end="159:21"><operator pos:start="159:20" pos:end="159:20">-</operator><literal type="number" pos:start="159:21" pos:end="159:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="163:9" pos:end="167:9"><if pos:start="163:9" pos:end="167:9">if <condition pos:start="163:12" pos:end="163:61">(<expr pos:start="163:13" pos:end="163:60"><call pos:start="163:13" pos:end="163:60"><name pos:start="163:13" pos:end="163:27">get_param_value</name><argument_list pos:start="163:28" pos:end="163:60">(<argument pos:start="163:29" pos:end="163:31"><expr pos:start="163:29" pos:end="163:31"><name pos:start="163:29" pos:end="163:31">buf</name></expr></argument>, <argument pos:start="163:34" pos:end="163:44"><expr pos:start="163:34" pos:end="163:44"><sizeof pos:start="163:34" pos:end="163:44">sizeof<argument_list pos:start="163:40" pos:end="163:44">(<argument pos:start="163:41" pos:end="163:43"><expr pos:start="163:41" pos:end="163:43"><name pos:start="163:41" pos:end="163:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="163:47" pos:end="163:56"><expr pos:start="163:47" pos:end="163:56"><literal type="string" pos:start="163:47" pos:end="163:56">"hostname"</literal></expr></argument>, <argument pos:start="163:59" pos:end="163:59"><expr pos:start="163:59" pos:end="163:59"><name pos:start="163:59" pos:end="163:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="163:63" pos:end="167:9">{<block_content pos:start="165:13" pos:end="165:65">

            <expr_stmt pos:start="165:13" pos:end="165:65"><expr pos:start="165:13" pos:end="165:64"><call pos:start="165:13" pos:end="165:64"><name pos:start="165:13" pos:end="165:19">pstrcpy</name><argument_list pos:start="165:20" pos:end="165:64">(<argument pos:start="165:21" pos:end="165:34"><expr pos:start="165:21" pos:end="165:34"><name pos:start="165:21" pos:end="165:34">slirp_hostname</name></expr></argument>, <argument pos:start="165:37" pos:end="165:58"><expr pos:start="165:37" pos:end="165:58"><sizeof pos:start="165:37" pos:end="165:58">sizeof<argument_list pos:start="165:43" pos:end="165:58">(<argument pos:start="165:44" pos:end="165:57"><expr pos:start="165:44" pos:end="165:57"><name pos:start="165:44" pos:end="165:57">slirp_hostname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="165:61" pos:end="165:63"><expr pos:start="165:61" pos:end="165:63"><name pos:start="165:61" pos:end="165:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="169:9" pos:end="173:9"><if pos:start="169:9" pos:end="173:9">if <condition pos:start="169:12" pos:end="169:61">(<expr pos:start="169:13" pos:end="169:60"><call pos:start="169:13" pos:end="169:60"><name pos:start="169:13" pos:end="169:27">get_param_value</name><argument_list pos:start="169:28" pos:end="169:60">(<argument pos:start="169:29" pos:end="169:31"><expr pos:start="169:29" pos:end="169:31"><name pos:start="169:29" pos:end="169:31">buf</name></expr></argument>, <argument pos:start="169:34" pos:end="169:44"><expr pos:start="169:34" pos:end="169:44"><sizeof pos:start="169:34" pos:end="169:44">sizeof<argument_list pos:start="169:40" pos:end="169:44">(<argument pos:start="169:41" pos:end="169:43"><expr pos:start="169:41" pos:end="169:43"><name pos:start="169:41" pos:end="169:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="169:47" pos:end="169:56"><expr pos:start="169:47" pos:end="169:56"><literal type="string" pos:start="169:47" pos:end="169:56">"restrict"</literal></expr></argument>, <argument pos:start="169:59" pos:end="169:59"><expr pos:start="169:59" pos:end="169:59"><name pos:start="169:59" pos:end="169:59">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="169:63" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:53">

            <expr_stmt pos:start="171:13" pos:end="171:53"><expr pos:start="171:13" pos:end="171:52"><name pos:start="171:13" pos:end="171:26">slirp_restrict</name> <operator pos:start="171:28" pos:end="171:28">=</operator> <ternary pos:start="171:30" pos:end="171:52"><condition pos:start="171:30" pos:end="171:46"><expr pos:start="171:30" pos:end="171:44"><operator pos:start="171:30" pos:end="171:30">(</operator><name pos:start="171:31" pos:end="171:36"><name pos:start="171:31" pos:end="171:33">buf</name><index pos:start="171:34" pos:end="171:36">[<expr pos:start="171:35" pos:end="171:35"><literal type="number" pos:start="171:35" pos:end="171:35">0</literal></expr>]</index></name> <operator pos:start="171:38" pos:end="171:39">==</operator> <literal type="char" pos:start="171:41" pos:end="171:43">'y'</literal><operator pos:start="171:44" pos:end="171:44">)</operator></expr> ?</condition><then pos:start="171:48" pos:end="171:48"> <expr pos:start="171:48" pos:end="171:48"><literal type="number" pos:start="171:48" pos:end="171:48">1</literal></expr> </then><else pos:start="171:50" pos:end="171:52">: <expr pos:start="171:52" pos:end="171:52"><literal type="number" pos:start="171:52" pos:end="171:52">0</literal></expr></else></ternary></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="175:9" pos:end="179:9"><if pos:start="175:9" pos:end="179:9">if <condition pos:start="175:12" pos:end="175:55">(<expr pos:start="175:13" pos:end="175:54"><call pos:start="175:13" pos:end="175:54"><name pos:start="175:13" pos:end="175:27">get_param_value</name><argument_list pos:start="175:28" pos:end="175:54">(<argument pos:start="175:29" pos:end="175:31"><expr pos:start="175:29" pos:end="175:31"><name pos:start="175:29" pos:end="175:31">buf</name></expr></argument>, <argument pos:start="175:34" pos:end="175:44"><expr pos:start="175:34" pos:end="175:44"><sizeof pos:start="175:34" pos:end="175:44">sizeof<argument_list pos:start="175:40" pos:end="175:44">(<argument pos:start="175:41" pos:end="175:43"><expr pos:start="175:41" pos:end="175:43"><name pos:start="175:41" pos:end="175:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="175:47" pos:end="175:50"><expr pos:start="175:47" pos:end="175:50"><literal type="string" pos:start="175:47" pos:end="175:50">"ip"</literal></expr></argument>, <argument pos:start="175:53" pos:end="175:53"><expr pos:start="175:53" pos:end="175:53"><name pos:start="175:53" pos:end="175:53">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:57" pos:end="179:9">{<block_content pos:start="177:13" pos:end="177:35">

            <expr_stmt pos:start="177:13" pos:end="177:35"><expr pos:start="177:13" pos:end="177:34"><name pos:start="177:13" pos:end="177:20">slirp_ip</name> <operator pos:start="177:22" pos:end="177:22">=</operator> <call pos:start="177:24" pos:end="177:34"><name pos:start="177:24" pos:end="177:29">strdup</name><argument_list pos:start="177:30" pos:end="177:34">(<argument pos:start="177:31" pos:end="177:33"><expr pos:start="177:31" pos:end="177:33"><name pos:start="177:31" pos:end="177:33">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="181:9" pos:end="181:29"><expr pos:start="181:9" pos:end="181:28"><name pos:start="181:9" pos:end="181:26"><name pos:start="181:9" pos:end="181:12">vlan</name><operator pos:start="181:13" pos:end="181:14">-&gt;</operator><name pos:start="181:15" pos:end="181:26">nb_host_devs</name></name><operator pos:start="181:27" pos:end="181:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="183:9" pos:end="183:49"><expr pos:start="183:9" pos:end="183:48"><name pos:start="183:9" pos:end="183:11">ret</name> <operator pos:start="183:13" pos:end="183:13">=</operator> <call pos:start="183:15" pos:end="183:48"><name pos:start="183:15" pos:end="183:28">net_slirp_init</name><argument_list pos:start="183:29" pos:end="183:48">(<argument pos:start="183:30" pos:end="183:33"><expr pos:start="183:30" pos:end="183:33"><name pos:start="183:30" pos:end="183:33">vlan</name></expr></argument>, <argument pos:start="183:36" pos:end="183:41"><expr pos:start="183:36" pos:end="183:41"><name pos:start="183:36" pos:end="183:41">device</name></expr></argument>, <argument pos:start="183:44" pos:end="183:47"><expr pos:start="183:44" pos:end="183:47"><name pos:start="183:44" pos:end="183:47">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="185:7" pos:end="237:5">else if <condition pos:start="185:15" pos:end="185:42">(<expr pos:start="185:16" pos:end="185:41"><operator pos:start="185:16" pos:end="185:16">!</operator><call pos:start="185:17" pos:end="185:41"><name pos:start="185:17" pos:end="185:22">strcmp</name><argument_list pos:start="185:23" pos:end="185:41">(<argument pos:start="185:24" pos:end="185:29"><expr pos:start="185:24" pos:end="185:29"><name pos:start="185:24" pos:end="185:29">device</name></expr></argument>, <argument pos:start="185:32" pos:end="185:40"><expr pos:start="185:32" pos:end="185:40"><literal type="string" pos:start="185:32" pos:end="185:40">"channel"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="185:44" pos:end="237:5">{<block_content pos:start="187:9" pos:end="235:16">

        <decl_stmt pos:start="187:9" pos:end="187:18"><decl pos:start="187:9" pos:end="187:17"><type pos:start="187:9" pos:end="187:12"><name pos:start="187:9" pos:end="187:12">long</name></type> <name pos:start="187:14" pos:end="187:17">port</name></decl>;</decl_stmt>

        <decl_stmt pos:start="189:9" pos:end="189:32"><decl pos:start="189:9" pos:end="189:21"><type pos:start="189:9" pos:end="189:12"><name pos:start="189:9" pos:end="189:12">char</name></type> <name pos:start="189:14" pos:end="189:21"><name pos:start="189:14" pos:end="189:17">name</name><index pos:start="189:18" pos:end="189:21">[<expr pos:start="189:19" pos:end="189:20"><literal type="number" pos:start="189:19" pos:end="189:20">20</literal></expr>]</index></name></decl>, <decl pos:start="189:24" pos:end="189:31"><type ref="prev" pos:start="189:9" pos:end="189:12"><modifier pos:start="189:24" pos:end="189:24">*</modifier></type><name pos:start="189:25" pos:end="189:31">devname</name></decl>;</decl_stmt>

        <decl_stmt pos:start="191:9" pos:end="191:30"><decl pos:start="191:9" pos:end="191:29"><type pos:start="191:9" pos:end="191:26"><name pos:start="191:9" pos:end="191:24"><name pos:start="191:9" pos:end="191:14">struct</name> <name pos:start="191:16" pos:end="191:24">VMChannel</name></name> <modifier pos:start="191:26" pos:end="191:26">*</modifier></type><name pos:start="191:27" pos:end="191:29">vmc</name></decl>;</decl_stmt>



        <expr_stmt pos:start="195:9" pos:end="195:39"><expr pos:start="195:9" pos:end="195:38"><name pos:start="195:9" pos:end="195:12">port</name> <operator pos:start="195:14" pos:end="195:14">=</operator> <call pos:start="195:16" pos:end="195:38"><name pos:start="195:16" pos:end="195:21">strtol</name><argument_list pos:start="195:22" pos:end="195:38">(<argument pos:start="195:23" pos:end="195:23"><expr pos:start="195:23" pos:end="195:23"><name pos:start="195:23" pos:end="195:23">p</name></expr></argument>, <argument pos:start="195:26" pos:end="195:33"><expr pos:start="195:26" pos:end="195:33"><operator pos:start="195:26" pos:end="195:26">&amp;</operator><name pos:start="195:27" pos:end="195:33">devname</name></expr></argument>, <argument pos:start="195:36" pos:end="195:37"><expr pos:start="195:36" pos:end="195:37"><literal type="number" pos:start="195:36" pos:end="195:37">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:18"><expr pos:start="197:9" pos:end="197:17"><name pos:start="197:9" pos:end="197:15">devname</name><operator pos:start="197:16" pos:end="197:17">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="199:9" pos:end="207:9"><if pos:start="199:9" pos:end="207:9">if <condition pos:start="199:12" pos:end="199:37">(<expr pos:start="199:13" pos:end="199:36"><name pos:start="199:13" pos:end="199:30"><name pos:start="199:13" pos:end="199:16">port</name> <argument_list type="generic" pos:start="199:18" pos:end="199:30">&lt; <argument pos:start="199:20" pos:end="199:28"><expr pos:start="199:20" pos:end="199:28"><literal type="number" pos:start="199:20" pos:end="199:20">1</literal> <operator pos:start="199:22" pos:end="199:23">||</operator> <name pos:start="199:25" pos:end="199:28">port</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="199:32" pos:end="199:36">65535</literal></expr>)</condition> <block pos:start="199:39" pos:end="207:9">{<block_content pos:start="201:13" pos:end="205:21">

            <expr_stmt pos:start="201:13" pos:end="201:61"><expr pos:start="201:13" pos:end="201:60"><call pos:start="201:13" pos:end="201:60"><name pos:start="201:13" pos:end="201:19">fprintf</name><argument_list pos:start="201:20" pos:end="201:60">(<argument pos:start="201:21" pos:end="201:26"><expr pos:start="201:21" pos:end="201:26"><name pos:start="201:21" pos:end="201:26">stderr</name></expr></argument>, <argument pos:start="201:29" pos:end="201:59"><expr pos:start="201:29" pos:end="201:59"><literal type="string" pos:start="201:29" pos:end="201:59">"vmchannel wrong port number\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:21"><expr pos:start="203:13" pos:end="203:20"><name pos:start="203:13" pos:end="203:15">ret</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <operator pos:start="203:19" pos:end="203:19">-</operator><literal type="number" pos:start="203:20" pos:end="203:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="205:13" pos:end="205:21">goto <name pos:start="205:18" pos:end="205:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:47"><expr pos:start="209:9" pos:end="209:46"><name pos:start="209:9" pos:end="209:11">vmc</name> <operator pos:start="209:13" pos:end="209:13">=</operator> <call pos:start="209:15" pos:end="209:46"><name pos:start="209:15" pos:end="209:20">malloc</name><argument_list pos:start="209:21" pos:end="209:46">(<argument pos:start="209:22" pos:end="209:45"><expr pos:start="209:22" pos:end="209:45"><sizeof pos:start="209:22" pos:end="209:45">sizeof<argument_list pos:start="209:28" pos:end="209:45">(<argument pos:start="209:29" pos:end="209:44"><expr pos:start="209:29" pos:end="209:44">struct <name pos:start="209:36" pos:end="209:44">VMChannel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="211:9" pos:end="211:49"><expr pos:start="211:9" pos:end="211:48"><call pos:start="211:9" pos:end="211:48"><name pos:start="211:9" pos:end="211:16">snprintf</name><argument_list pos:start="211:17" pos:end="211:48">(<argument pos:start="211:18" pos:end="211:21"><expr pos:start="211:18" pos:end="211:21"><name pos:start="211:18" pos:end="211:21">name</name></expr></argument>, <argument pos:start="211:24" pos:end="211:25"><expr pos:start="211:24" pos:end="211:25"><literal type="number" pos:start="211:24" pos:end="211:25">20</literal></expr></argument>, <argument pos:start="211:28" pos:end="211:41"><expr pos:start="211:28" pos:end="211:41"><literal type="string" pos:start="211:28" pos:end="211:41">"vmchannel%ld"</literal></expr></argument>, <argument pos:start="211:44" pos:end="211:47"><expr pos:start="211:44" pos:end="211:47"><name pos:start="211:44" pos:end="211:47">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:53"><expr pos:start="213:9" pos:end="213:52"><name pos:start="213:9" pos:end="213:15"><name pos:start="213:9" pos:end="213:11">vmc</name><operator pos:start="213:12" pos:end="213:13">-&gt;</operator><name pos:start="213:14" pos:end="213:15">hd</name></name> <operator pos:start="213:17" pos:end="213:17">=</operator> <call pos:start="213:19" pos:end="213:52"><name pos:start="213:19" pos:end="213:31">qemu_chr_open</name><argument_list pos:start="213:32" pos:end="213:52">(<argument pos:start="213:33" pos:end="213:36"><expr pos:start="213:33" pos:end="213:36"><name pos:start="213:33" pos:end="213:36">name</name></expr></argument>, <argument pos:start="213:39" pos:end="213:45"><expr pos:start="213:39" pos:end="213:45"><name pos:start="213:39" pos:end="213:45">devname</name></expr></argument>, <argument pos:start="213:48" pos:end="213:51"><expr pos:start="213:48" pos:end="213:51"><name pos:start="213:48" pos:end="213:51">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="215:9" pos:end="225:9"><if pos:start="215:9" pos:end="225:9">if <condition pos:start="215:12" pos:end="215:21">(<expr pos:start="215:13" pos:end="215:20"><operator pos:start="215:13" pos:end="215:13">!</operator><name pos:start="215:14" pos:end="215:20"><name pos:start="215:14" pos:end="215:16">vmc</name><operator pos:start="215:17" pos:end="215:18">-&gt;</operator><name pos:start="215:19" pos:end="215:20">hd</name></name></expr>)</condition> <block pos:start="215:23" pos:end="225:9">{<block_content pos:start="217:13" pos:end="223:21">

            <expr_stmt pos:start="217:13" pos:end="219:39"><expr pos:start="217:13" pos:end="219:38"><call pos:start="217:13" pos:end="219:38"><name pos:start="217:13" pos:end="217:19">fprintf</name><argument_list pos:start="217:20" pos:end="219:38">(<argument pos:start="217:21" pos:end="217:26"><expr pos:start="217:21" pos:end="217:26"><name pos:start="217:21" pos:end="217:26">stderr</name></expr></argument>, <argument pos:start="217:29" pos:end="219:28"><expr pos:start="217:29" pos:end="219:28"><literal type="string" pos:start="217:29" pos:end="217:67">"qemu: could not open vmchannel device"</literal>

                    <literal type="string" pos:start="219:21" pos:end="219:28">"'%s'\n"</literal></expr></argument>, <argument pos:start="219:31" pos:end="219:37"><expr pos:start="219:31" pos:end="219:37"><name pos:start="219:31" pos:end="219:37">devname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:21"><expr pos:start="221:13" pos:end="221:20"><name pos:start="221:13" pos:end="221:15">ret</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <operator pos:start="221:19" pos:end="221:19">-</operator><literal type="number" pos:start="221:20" pos:end="221:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="223:13" pos:end="223:21">goto <name pos:start="223:18" pos:end="223:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="227:9" pos:end="227:25"><expr pos:start="227:9" pos:end="227:24"><name pos:start="227:9" pos:end="227:17"><name pos:start="227:9" pos:end="227:11">vmc</name><operator pos:start="227:12" pos:end="227:13">-&gt;</operator><name pos:start="227:14" pos:end="227:17">port</name></name> <operator pos:start="227:19" pos:end="227:19">=</operator> <name pos:start="227:21" pos:end="227:24">port</name></expr>;</expr_stmt>

        <expr_stmt pos:start="229:9" pos:end="229:44"><expr pos:start="229:9" pos:end="229:43"><call pos:start="229:9" pos:end="229:43"><name pos:start="229:9" pos:end="229:22">slirp_add_exec</name><argument_list pos:start="229:23" pos:end="229:43">(<argument pos:start="229:24" pos:end="229:24"><expr pos:start="229:24" pos:end="229:24"><literal type="number" pos:start="229:24" pos:end="229:24">3</literal></expr></argument>, <argument pos:start="229:27" pos:end="229:33"><expr pos:start="229:27" pos:end="229:33"><name pos:start="229:27" pos:end="229:33"><name pos:start="229:27" pos:end="229:29">vmc</name><operator pos:start="229:30" pos:end="229:31">-&gt;</operator><name pos:start="229:32" pos:end="229:33">hd</name></name></expr></argument>, <argument pos:start="229:36" pos:end="229:36"><expr pos:start="229:36" pos:end="229:36"><literal type="number" pos:start="229:36" pos:end="229:36">4</literal></expr></argument>, <argument pos:start="229:39" pos:end="229:42"><expr pos:start="229:39" pos:end="229:42"><name pos:start="229:39" pos:end="229:42">port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="233:27"><expr pos:start="231:9" pos:end="233:26"><call pos:start="231:9" pos:end="233:26"><name pos:start="231:9" pos:end="231:29">qemu_chr_add_handlers</name><argument_list pos:start="231:30" pos:end="233:26">(<argument pos:start="231:31" pos:end="231:37"><expr pos:start="231:31" pos:end="231:37"><name pos:start="231:31" pos:end="231:37"><name pos:start="231:31" pos:end="231:33">vmc</name><operator pos:start="231:34" pos:end="231:35">-&gt;</operator><name pos:start="231:36" pos:end="231:37">hd</name></name></expr></argument>, <argument pos:start="231:40" pos:end="231:57"><expr pos:start="231:40" pos:end="231:57"><name pos:start="231:40" pos:end="231:57">vmchannel_can_read</name></expr></argument>, <argument pos:start="231:60" pos:end="231:73"><expr pos:start="231:60" pos:end="231:73"><name pos:start="231:60" pos:end="231:73">vmchannel_read</name></expr></argument>,

                <argument pos:start="233:17" pos:end="233:20"><expr pos:start="233:17" pos:end="233:20"><name pos:start="233:17" pos:end="233:20">NULL</name></expr></argument>, <argument pos:start="233:23" pos:end="233:25"><expr pos:start="233:23" pos:end="233:25"><name pos:start="233:23" pos:end="233:25">vmc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:16"><expr pos:start="235:9" pos:end="235:15"><name pos:start="235:9" pos:end="235:11">ret</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <literal type="number" pos:start="235:15" pos:end="235:15">0</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="237:7" pos:end="277:5">else

<cpp:endif pos:start="239:1" pos:end="239:6">#<cpp:directive pos:start="239:2" pos:end="239:6">endif</cpp:directive></cpp:endif>

<cpp:ifdef pos:start="241:1" pos:end="241:13">#<cpp:directive pos:start="241:2" pos:end="241:6">ifdef</cpp:directive> <name pos:start="241:8" pos:end="241:13">_WIN32</name></cpp:ifdef>

    if <condition pos:start="243:8" pos:end="243:31">(<expr pos:start="243:9" pos:end="243:30"><operator pos:start="243:9" pos:end="243:9">!</operator><call pos:start="243:10" pos:end="243:30"><name pos:start="243:10" pos:end="243:15">strcmp</name><argument_list pos:start="243:16" pos:end="243:30">(<argument pos:start="243:17" pos:end="243:22"><expr pos:start="243:17" pos:end="243:22"><name pos:start="243:17" pos:end="243:22">device</name></expr></argument>, <argument pos:start="243:25" pos:end="243:29"><expr pos:start="243:25" pos:end="243:29"><literal type="string" pos:start="243:25" pos:end="243:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="243:33" pos:end="277:5">{<block_content pos:start="245:9" pos:end="275:57">

        <decl_stmt pos:start="245:9" pos:end="249:10"><decl pos:start="245:9" pos:end="249:9"><type pos:start="245:9" pos:end="245:33"><specifier pos:start="245:9" pos:end="245:14">static</specifier> <specifier pos:start="245:16" pos:end="245:20">const</specifier> <name pos:start="245:22" pos:end="245:25">char</name> <modifier pos:start="245:27" pos:end="245:27">*</modifier> <specifier pos:start="245:29" pos:end="245:33">const</specifier></type> <name pos:start="245:35" pos:end="245:46"><name pos:start="245:35" pos:end="245:44">tap_params</name><index pos:start="245:45" pos:end="245:46">[]</index></name> <init pos:start="245:48" pos:end="249:9">= <expr pos:start="245:50" pos:end="249:9"><block pos:start="245:50" pos:end="249:9">{

            <expr pos:start="247:13" pos:end="247:18"><literal type="string" pos:start="247:13" pos:end="247:18">"vlan"</literal></expr>, <expr pos:start="247:21" pos:end="247:26"><literal type="string" pos:start="247:21" pos:end="247:26">"name"</literal></expr>, <expr pos:start="247:29" pos:end="247:36"><literal type="string" pos:start="247:29" pos:end="247:36">"ifname"</literal></expr>, <expr pos:start="247:39" pos:end="247:42"><name pos:start="247:39" pos:end="247:42">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="251:9" pos:end="251:24"><decl pos:start="251:9" pos:end="251:23"><type pos:start="251:9" pos:end="251:12"><name pos:start="251:9" pos:end="251:12">char</name></type> <name pos:start="251:14" pos:end="251:23"><name pos:start="251:14" pos:end="251:19">ifname</name><index pos:start="251:20" pos:end="251:23">[<expr pos:start="251:21" pos:end="251:22"><literal type="number" pos:start="251:21" pos:end="251:22">64</literal></expr>]</index></name></decl>;</decl_stmt>



        <if_stmt pos:start="255:9" pos:end="261:9"><if pos:start="255:9" pos:end="261:9">if <condition pos:start="255:12" pos:end="255:44">(<expr pos:start="255:13" pos:end="255:43"><call pos:start="255:13" pos:end="255:39"><name pos:start="255:13" pos:end="255:24">check_params</name><argument_list pos:start="255:25" pos:end="255:39">(<argument pos:start="255:26" pos:end="255:35"><expr pos:start="255:26" pos:end="255:35"><name pos:start="255:26" pos:end="255:35">tap_params</name></expr></argument>, <argument pos:start="255:38" pos:end="255:38"><expr pos:start="255:38" pos:end="255:38"><name pos:start="255:38" pos:end="255:38">p</name></expr></argument>)</argument_list></call> <operator pos:start="255:41" pos:end="255:41">&lt;</operator> <literal type="number" pos:start="255:43" pos:end="255:43">0</literal></expr>)</condition> <block pos:start="255:46" pos:end="261:9">{<block_content pos:start="257:13" pos:end="259:22">

            <expr_stmt pos:start="257:13" pos:end="257:68"><expr pos:start="257:13" pos:end="257:67"><call pos:start="257:13" pos:end="257:67"><name pos:start="257:13" pos:end="257:19">fprintf</name><argument_list pos:start="257:20" pos:end="257:67">(<argument pos:start="257:21" pos:end="257:26"><expr pos:start="257:21" pos:end="257:26"><name pos:start="257:21" pos:end="257:26">stderr</name></expr></argument>, <argument pos:start="257:29" pos:end="257:63"><expr pos:start="257:29" pos:end="257:63"><literal type="string" pos:start="257:29" pos:end="257:63">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="257:66" pos:end="257:66"><expr pos:start="257:66" pos:end="257:66"><name pos:start="257:66" pos:end="257:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="259:13" pos:end="259:22">return <expr pos:start="259:20" pos:end="259:21"><operator pos:start="259:20" pos:end="259:20">-</operator><literal type="number" pos:start="259:21" pos:end="259:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="263:9" pos:end="271:9"><if pos:start="263:9" pos:end="271:9">if <condition pos:start="263:12" pos:end="263:70">(<expr pos:start="263:13" pos:end="263:69"><call pos:start="263:13" pos:end="263:64"><name pos:start="263:13" pos:end="263:27">get_param_value</name><argument_list pos:start="263:28" pos:end="263:64">(<argument pos:start="263:29" pos:end="263:34"><expr pos:start="263:29" pos:end="263:34"><name pos:start="263:29" pos:end="263:34">ifname</name></expr></argument>, <argument pos:start="263:37" pos:end="263:50"><expr pos:start="263:37" pos:end="263:50"><sizeof pos:start="263:37" pos:end="263:50">sizeof<argument_list pos:start="263:43" pos:end="263:50">(<argument pos:start="263:44" pos:end="263:49"><expr pos:start="263:44" pos:end="263:49"><name pos:start="263:44" pos:end="263:49">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="263:53" pos:end="263:60"><expr pos:start="263:53" pos:end="263:60"><literal type="string" pos:start="263:53" pos:end="263:60">"ifname"</literal></expr></argument>, <argument pos:start="263:63" pos:end="263:63"><expr pos:start="263:63" pos:end="263:63"><name pos:start="263:63" pos:end="263:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="263:66" pos:end="263:67">&lt;=</operator> <literal type="number" pos:start="263:69" pos:end="263:69">0</literal></expr>)</condition> <block pos:start="263:72" pos:end="271:9">{<block_content pos:start="265:13" pos:end="269:21">

            <expr_stmt pos:start="265:13" pos:end="265:56"><expr pos:start="265:13" pos:end="265:55"><call pos:start="265:13" pos:end="265:55"><name pos:start="265:13" pos:end="265:19">fprintf</name><argument_list pos:start="265:20" pos:end="265:55">(<argument pos:start="265:21" pos:end="265:26"><expr pos:start="265:21" pos:end="265:26"><name pos:start="265:21" pos:end="265:26">stderr</name></expr></argument>, <argument pos:start="265:29" pos:end="265:54"><expr pos:start="265:29" pos:end="265:54"><literal type="string" pos:start="265:29" pos:end="265:54">"tap: no interface name\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:21"><expr pos:start="267:13" pos:end="267:20"><name pos:start="267:13" pos:end="267:15">ret</name> <operator pos:start="267:17" pos:end="267:17">=</operator> <operator pos:start="267:19" pos:end="267:19">-</operator><literal type="number" pos:start="267:20" pos:end="267:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="269:13" pos:end="269:21">goto <name pos:start="269:18" pos:end="269:20">out</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:29"><expr pos:start="273:9" pos:end="273:28"><name pos:start="273:9" pos:end="273:26"><name pos:start="273:9" pos:end="273:12">vlan</name><operator pos:start="273:13" pos:end="273:14">-&gt;</operator><name pos:start="273:15" pos:end="273:26">nb_host_devs</name></name><operator pos:start="273:27" pos:end="273:28">++</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="275:9" pos:end="275:57"><expr pos:start="275:9" pos:end="275:56"><name pos:start="275:9" pos:end="275:11">ret</name> <operator pos:start="275:13" pos:end="275:13">=</operator> <call pos:start="275:15" pos:end="275:56"><name pos:start="275:15" pos:end="275:28">tap_win32_init</name><argument_list pos:start="275:29" pos:end="275:56">(<argument pos:start="275:30" pos:end="275:33"><expr pos:start="275:30" pos:end="275:33"><name pos:start="275:30" pos:end="275:33">vlan</name></expr></argument>, <argument pos:start="275:36" pos:end="275:41"><expr pos:start="275:36" pos:end="275:41"><name pos:start="275:36" pos:end="275:41">device</name></expr></argument>, <argument pos:start="275:44" pos:end="275:47"><expr pos:start="275:44" pos:end="275:47"><name pos:start="275:44" pos:end="275:47">name</name></expr></argument>, <argument pos:start="275:50" pos:end="275:55"><expr pos:start="275:50" pos:end="275:55"><name pos:start="275:50" pos:end="275:55">ifname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="277:7" pos:end="349:5">else

<cpp:elif pos:start="279:1" pos:end="279:20">#<cpp:directive pos:start="279:2" pos:end="279:5">elif</cpp:directive> <expr pos:start="279:7" pos:end="279:20"><call pos:start="279:7" pos:end="279:20"><name pos:start="279:7" pos:end="279:13">defined</name> <argument_list pos:start="279:15" pos:end="279:20">(<argument pos:start="279:16" pos:end="279:19"><expr pos:start="279:16" pos:end="279:19"><name pos:start="279:16" pos:end="279:19">_AIX</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:else pos:start="281:1" pos:end="281:5">#<cpp:directive pos:start="281:2" pos:end="281:5">else</cpp:directive></cpp:else>

    if <condition pos:start="283:8" pos:end="283:31">(<expr pos:start="283:9" pos:end="283:30"><operator pos:start="283:9" pos:end="283:9">!</operator><call pos:start="283:10" pos:end="283:30"><name pos:start="283:10" pos:end="283:15">strcmp</name><argument_list pos:start="283:16" pos:end="283:30">(<argument pos:start="283:17" pos:end="283:22"><expr pos:start="283:17" pos:end="283:22"><name pos:start="283:17" pos:end="283:22">device</name></expr></argument>, <argument pos:start="283:25" pos:end="283:29"><expr pos:start="283:25" pos:end="283:29"><literal type="string" pos:start="283:25" pos:end="283:29">"tap"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="283:33" pos:end="349:5">{<block_content pos:start="285:9" pos:end="347:9">

        <decl_stmt pos:start="285:9" pos:end="285:24"><decl pos:start="285:9" pos:end="285:23"><type pos:start="285:9" pos:end="285:12"><name pos:start="285:9" pos:end="285:12">char</name></type> <name pos:start="285:14" pos:end="285:23"><name pos:start="285:14" pos:end="285:19">ifname</name><index pos:start="285:20" pos:end="285:23">[<expr pos:start="285:21" pos:end="285:22"><literal type="number" pos:start="285:21" pos:end="285:22">64</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="287:9" pos:end="287:51"><decl pos:start="287:9" pos:end="287:31"><type pos:start="287:9" pos:end="287:12"><name pos:start="287:9" pos:end="287:12">char</name></type> <name pos:start="287:14" pos:end="287:31"><name pos:start="287:14" pos:end="287:25">setup_script</name><index pos:start="287:26" pos:end="287:31">[<expr pos:start="287:27" pos:end="287:30"><literal type="number" pos:start="287:27" pos:end="287:30">1024</literal></expr>]</index></name></decl>, <decl pos:start="287:34" pos:end="287:50"><type ref="prev" pos:start="287:9" pos:end="287:12"/><name pos:start="287:34" pos:end="287:50"><name pos:start="287:34" pos:end="287:44">down_script</name><index pos:start="287:45" pos:end="287:50">[<expr pos:start="287:46" pos:end="287:49"><literal type="number" pos:start="287:46" pos:end="287:49">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="289:9" pos:end="289:15"><decl pos:start="289:9" pos:end="289:14"><type pos:start="289:9" pos:end="289:11"><name pos:start="289:9" pos:end="289:11">int</name></type> <name pos:start="289:13" pos:end="289:14">fd</name></decl>;</decl_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:29"><expr pos:start="291:9" pos:end="291:28"><name pos:start="291:9" pos:end="291:26"><name pos:start="291:9" pos:end="291:12">vlan</name><operator pos:start="291:13" pos:end="291:14">-&gt;</operator><name pos:start="291:15" pos:end="291:26">nb_host_devs</name></name><operator pos:start="291:27" pos:end="291:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="293:9" pos:end="347:9"><if pos:start="293:9" pos:end="311:9">if <condition pos:start="293:12" pos:end="293:59">(<expr pos:start="293:13" pos:end="293:58"><call pos:start="293:13" pos:end="293:54"><name pos:start="293:13" pos:end="293:27">get_param_value</name><argument_list pos:start="293:28" pos:end="293:54">(<argument pos:start="293:29" pos:end="293:31"><expr pos:start="293:29" pos:end="293:31"><name pos:start="293:29" pos:end="293:31">buf</name></expr></argument>, <argument pos:start="293:34" pos:end="293:44"><expr pos:start="293:34" pos:end="293:44"><sizeof pos:start="293:34" pos:end="293:44">sizeof<argument_list pos:start="293:40" pos:end="293:44">(<argument pos:start="293:41" pos:end="293:43"><expr pos:start="293:41" pos:end="293:43"><name pos:start="293:41" pos:end="293:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="293:47" pos:end="293:50"><expr pos:start="293:47" pos:end="293:50"><literal type="string" pos:start="293:47" pos:end="293:50">"fd"</literal></expr></argument>, <argument pos:start="293:53" pos:end="293:53"><expr pos:start="293:53" pos:end="293:53"><name pos:start="293:53" pos:end="293:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="293:56" pos:end="293:56">&gt;</operator> <literal type="number" pos:start="293:58" pos:end="293:58">0</literal></expr>)</condition> <block pos:start="293:61" pos:end="311:9">{<block_content pos:start="295:13" pos:end="309:20">

            <if_stmt pos:start="295:13" pos:end="301:13"><if pos:start="295:13" pos:end="301:13">if <condition pos:start="295:16" pos:end="295:47">(<expr pos:start="295:17" pos:end="295:46"><call pos:start="295:17" pos:end="295:42"><name pos:start="295:17" pos:end="295:28">check_params</name><argument_list pos:start="295:29" pos:end="295:42">(<argument pos:start="295:30" pos:end="295:38"><expr pos:start="295:30" pos:end="295:38"><name pos:start="295:30" pos:end="295:38">fd_params</name></expr></argument>, <argument pos:start="295:41" pos:end="295:41"><expr pos:start="295:41" pos:end="295:41"><name pos:start="295:41" pos:end="295:41">p</name></expr></argument>)</argument_list></call> <operator pos:start="295:44" pos:end="295:44">&lt;</operator> <literal type="number" pos:start="295:46" pos:end="295:46">0</literal></expr>)</condition> <block pos:start="295:49" pos:end="301:13">{<block_content pos:start="297:17" pos:end="299:26">

                <expr_stmt pos:start="297:17" pos:end="297:72"><expr pos:start="297:17" pos:end="297:71"><call pos:start="297:17" pos:end="297:71"><name pos:start="297:17" pos:end="297:23">fprintf</name><argument_list pos:start="297:24" pos:end="297:71">(<argument pos:start="297:25" pos:end="297:30"><expr pos:start="297:25" pos:end="297:30"><name pos:start="297:25" pos:end="297:30">stderr</name></expr></argument>, <argument pos:start="297:33" pos:end="297:67"><expr pos:start="297:33" pos:end="297:67"><literal type="string" pos:start="297:33" pos:end="297:67">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="297:70" pos:end="297:70"><expr pos:start="297:70" pos:end="297:70"><name pos:start="297:70" pos:end="297:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="299:17" pos:end="299:26">return <expr pos:start="299:24" pos:end="299:25"><operator pos:start="299:24" pos:end="299:24">-</operator><literal type="number" pos:start="299:25" pos:end="299:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="303:13" pos:end="303:38"><expr pos:start="303:13" pos:end="303:37"><name pos:start="303:13" pos:end="303:14">fd</name> <operator pos:start="303:16" pos:end="303:16">=</operator> <call pos:start="303:18" pos:end="303:37"><name pos:start="303:18" pos:end="303:23">strtol</name><argument_list pos:start="303:24" pos:end="303:37">(<argument pos:start="303:25" pos:end="303:27"><expr pos:start="303:25" pos:end="303:27"><name pos:start="303:25" pos:end="303:27">buf</name></expr></argument>, <argument pos:start="303:30" pos:end="303:33"><expr pos:start="303:30" pos:end="303:33"><name pos:start="303:30" pos:end="303:33">NULL</name></expr></argument>, <argument pos:start="303:36" pos:end="303:36"><expr pos:start="303:36" pos:end="303:36"><literal type="number" pos:start="303:36" pos:end="303:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="305:13" pos:end="305:43"><expr pos:start="305:13" pos:end="305:42"><call pos:start="305:13" pos:end="305:42"><name pos:start="305:13" pos:end="305:17">fcntl</name><argument_list pos:start="305:18" pos:end="305:42">(<argument pos:start="305:19" pos:end="305:20"><expr pos:start="305:19" pos:end="305:20"><name pos:start="305:19" pos:end="305:20">fd</name></expr></argument>, <argument pos:start="305:23" pos:end="305:29"><expr pos:start="305:23" pos:end="305:29"><name pos:start="305:23" pos:end="305:29">F_SETFL</name></expr></argument>, <argument pos:start="305:32" pos:end="305:41"><expr pos:start="305:32" pos:end="305:41"><name pos:start="305:32" pos:end="305:41">O_NONBLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:52"><expr pos:start="307:13" pos:end="307:51"><call pos:start="307:13" pos:end="307:51"><name pos:start="307:13" pos:end="307:27">net_tap_fd_init</name><argument_list pos:start="307:28" pos:end="307:51">(<argument pos:start="307:29" pos:end="307:32"><expr pos:start="307:29" pos:end="307:32"><name pos:start="307:29" pos:end="307:32">vlan</name></expr></argument>, <argument pos:start="307:35" pos:end="307:40"><expr pos:start="307:35" pos:end="307:40"><name pos:start="307:35" pos:end="307:40">device</name></expr></argument>, <argument pos:start="307:43" pos:end="307:46"><expr pos:start="307:43" pos:end="307:46"><name pos:start="307:43" pos:end="307:46">name</name></expr></argument>, <argument pos:start="307:49" pos:end="307:50"><expr pos:start="307:49" pos:end="307:50"><name pos:start="307:49" pos:end="307:50">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:20"><expr pos:start="309:13" pos:end="309:19"><name pos:start="309:13" pos:end="309:15">ret</name> <operator pos:start="309:17" pos:end="309:17">=</operator> <literal type="number" pos:start="309:19" pos:end="309:19">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="311:11" pos:end="347:9">else <block pos:start="311:16" pos:end="347:9">{<block_content pos:start="313:13" pos:end="345:86">

            <decl_stmt pos:start="313:13" pos:end="317:14"><decl pos:start="313:13" pos:end="317:13"><type pos:start="313:13" pos:end="313:37"><specifier pos:start="313:13" pos:end="313:18">static</specifier> <specifier pos:start="313:20" pos:end="313:24">const</specifier> <name pos:start="313:26" pos:end="313:29">char</name> <modifier pos:start="313:31" pos:end="313:31">*</modifier> <specifier pos:start="313:33" pos:end="313:37">const</specifier></type> <name pos:start="313:39" pos:end="313:50"><name pos:start="313:39" pos:end="313:48">tap_params</name><index pos:start="313:49" pos:end="313:50">[]</index></name> <init pos:start="313:52" pos:end="317:13">= <expr pos:start="313:54" pos:end="317:13"><block pos:start="313:54" pos:end="317:13">{

                <expr pos:start="315:17" pos:end="315:22"><literal type="string" pos:start="315:17" pos:end="315:22">"vlan"</literal></expr>, <expr pos:start="315:25" pos:end="315:30"><literal type="string" pos:start="315:25" pos:end="315:30">"name"</literal></expr>, <expr pos:start="315:33" pos:end="315:40"><literal type="string" pos:start="315:33" pos:end="315:40">"ifname"</literal></expr>, <expr pos:start="315:43" pos:end="315:50"><literal type="string" pos:start="315:43" pos:end="315:50">"script"</literal></expr>, <expr pos:start="315:53" pos:end="315:64"><literal type="string" pos:start="315:53" pos:end="315:64">"downscript"</literal></expr>, <expr pos:start="315:67" pos:end="315:70"><name pos:start="315:67" pos:end="315:70">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="319:13" pos:end="325:13"><if pos:start="319:13" pos:end="325:13">if <condition pos:start="319:16" pos:end="319:48">(<expr pos:start="319:17" pos:end="319:47"><call pos:start="319:17" pos:end="319:43"><name pos:start="319:17" pos:end="319:28">check_params</name><argument_list pos:start="319:29" pos:end="319:43">(<argument pos:start="319:30" pos:end="319:39"><expr pos:start="319:30" pos:end="319:39"><name pos:start="319:30" pos:end="319:39">tap_params</name></expr></argument>, <argument pos:start="319:42" pos:end="319:42"><expr pos:start="319:42" pos:end="319:42"><name pos:start="319:42" pos:end="319:42">p</name></expr></argument>)</argument_list></call> <operator pos:start="319:45" pos:end="319:45">&lt;</operator> <literal type="number" pos:start="319:47" pos:end="319:47">0</literal></expr>)</condition> <block pos:start="319:50" pos:end="325:13">{<block_content pos:start="321:17" pos:end="323:26">

                <expr_stmt pos:start="321:17" pos:end="321:72"><expr pos:start="321:17" pos:end="321:71"><call pos:start="321:17" pos:end="321:71"><name pos:start="321:17" pos:end="321:23">fprintf</name><argument_list pos:start="321:24" pos:end="321:71">(<argument pos:start="321:25" pos:end="321:30"><expr pos:start="321:25" pos:end="321:30"><name pos:start="321:25" pos:end="321:30">stderr</name></expr></argument>, <argument pos:start="321:33" pos:end="321:67"><expr pos:start="321:33" pos:end="321:67"><literal type="string" pos:start="321:33" pos:end="321:67">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="321:70" pos:end="321:70"><expr pos:start="321:70" pos:end="321:70"><name pos:start="321:70" pos:end="321:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="323:17" pos:end="323:26">return <expr pos:start="323:24" pos:end="323:25"><operator pos:start="323:24" pos:end="323:24">-</operator><literal type="number" pos:start="323:25" pos:end="323:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="327:13" pos:end="331:13"><if pos:start="327:13" pos:end="331:13">if <condition pos:start="327:16" pos:end="327:74">(<expr pos:start="327:17" pos:end="327:73"><call pos:start="327:17" pos:end="327:68"><name pos:start="327:17" pos:end="327:31">get_param_value</name><argument_list pos:start="327:32" pos:end="327:68">(<argument pos:start="327:33" pos:end="327:38"><expr pos:start="327:33" pos:end="327:38"><name pos:start="327:33" pos:end="327:38">ifname</name></expr></argument>, <argument pos:start="327:41" pos:end="327:54"><expr pos:start="327:41" pos:end="327:54"><sizeof pos:start="327:41" pos:end="327:54">sizeof<argument_list pos:start="327:47" pos:end="327:54">(<argument pos:start="327:48" pos:end="327:53"><expr pos:start="327:48" pos:end="327:53"><name pos:start="327:48" pos:end="327:53">ifname</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="327:57" pos:end="327:64"><expr pos:start="327:57" pos:end="327:64"><literal type="string" pos:start="327:57" pos:end="327:64">"ifname"</literal></expr></argument>, <argument pos:start="327:67" pos:end="327:67"><expr pos:start="327:67" pos:end="327:67"><name pos:start="327:67" pos:end="327:67">p</name></expr></argument>)</argument_list></call> <operator pos:start="327:70" pos:end="327:71">&lt;=</operator> <literal type="number" pos:start="327:73" pos:end="327:73">0</literal></expr>)</condition> <block pos:start="327:76" pos:end="331:13">{<block_content pos:start="329:17" pos:end="329:33">

                <expr_stmt pos:start="329:17" pos:end="329:33"><expr pos:start="329:17" pos:end="329:32"><name pos:start="329:17" pos:end="329:25"><name pos:start="329:17" pos:end="329:22">ifname</name><index pos:start="329:23" pos:end="329:25">[<expr pos:start="329:24" pos:end="329:24"><literal type="number" pos:start="329:24" pos:end="329:24">0</literal></expr>]</index></name> <operator pos:start="329:27" pos:end="329:27">=</operator> <literal type="char" pos:start="329:29" pos:end="329:32">'\0'</literal></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="333:13" pos:end="337:13"><if pos:start="333:13" pos:end="337:13">if <condition pos:start="333:16" pos:end="333:86">(<expr pos:start="333:17" pos:end="333:85"><call pos:start="333:17" pos:end="333:80"><name pos:start="333:17" pos:end="333:31">get_param_value</name><argument_list pos:start="333:32" pos:end="333:80">(<argument pos:start="333:33" pos:end="333:44"><expr pos:start="333:33" pos:end="333:44"><name pos:start="333:33" pos:end="333:44">setup_script</name></expr></argument>, <argument pos:start="333:47" pos:end="333:66"><expr pos:start="333:47" pos:end="333:66"><sizeof pos:start="333:47" pos:end="333:66">sizeof<argument_list pos:start="333:53" pos:end="333:66">(<argument pos:start="333:54" pos:end="333:65"><expr pos:start="333:54" pos:end="333:65"><name pos:start="333:54" pos:end="333:65">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="333:69" pos:end="333:76"><expr pos:start="333:69" pos:end="333:76"><literal type="string" pos:start="333:69" pos:end="333:76">"script"</literal></expr></argument>, <argument pos:start="333:79" pos:end="333:79"><expr pos:start="333:79" pos:end="333:79"><name pos:start="333:79" pos:end="333:79">p</name></expr></argument>)</argument_list></call> <operator pos:start="333:82" pos:end="333:83">==</operator> <literal type="number" pos:start="333:85" pos:end="333:85">0</literal></expr>)</condition> <block pos:start="333:88" pos:end="337:13">{<block_content pos:start="335:17" pos:end="335:84">

                <expr_stmt pos:start="335:17" pos:end="335:84"><expr pos:start="335:17" pos:end="335:83"><call pos:start="335:17" pos:end="335:83"><name pos:start="335:17" pos:end="335:23">pstrcpy</name><argument_list pos:start="335:24" pos:end="335:83">(<argument pos:start="335:25" pos:end="335:36"><expr pos:start="335:25" pos:end="335:36"><name pos:start="335:25" pos:end="335:36">setup_script</name></expr></argument>, <argument pos:start="335:39" pos:end="335:58"><expr pos:start="335:39" pos:end="335:58"><sizeof pos:start="335:39" pos:end="335:58">sizeof<argument_list pos:start="335:45" pos:end="335:58">(<argument pos:start="335:46" pos:end="335:57"><expr pos:start="335:46" pos:end="335:57"><name pos:start="335:46" pos:end="335:57">setup_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="335:61" pos:end="335:82"><expr pos:start="335:61" pos:end="335:82"><name pos:start="335:61" pos:end="335:82">DEFAULT_NETWORK_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="339:13" pos:end="343:13"><if pos:start="339:13" pos:end="343:13">if <condition pos:start="339:16" pos:end="339:88">(<expr pos:start="339:17" pos:end="339:87"><call pos:start="339:17" pos:end="339:82"><name pos:start="339:17" pos:end="339:31">get_param_value</name><argument_list pos:start="339:32" pos:end="339:82">(<argument pos:start="339:33" pos:end="339:43"><expr pos:start="339:33" pos:end="339:43"><name pos:start="339:33" pos:end="339:43">down_script</name></expr></argument>, <argument pos:start="339:46" pos:end="339:64"><expr pos:start="339:46" pos:end="339:64"><sizeof pos:start="339:46" pos:end="339:64">sizeof<argument_list pos:start="339:52" pos:end="339:64">(<argument pos:start="339:53" pos:end="339:63"><expr pos:start="339:53" pos:end="339:63"><name pos:start="339:53" pos:end="339:63">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="339:67" pos:end="339:78"><expr pos:start="339:67" pos:end="339:78"><literal type="string" pos:start="339:67" pos:end="339:78">"downscript"</literal></expr></argument>, <argument pos:start="339:81" pos:end="339:81"><expr pos:start="339:81" pos:end="339:81"><name pos:start="339:81" pos:end="339:81">p</name></expr></argument>)</argument_list></call> <operator pos:start="339:84" pos:end="339:85">==</operator> <literal type="number" pos:start="339:87" pos:end="339:87">0</literal></expr>)</condition> <block pos:start="339:90" pos:end="343:13">{<block_content pos:start="341:17" pos:end="341:87">

                <expr_stmt pos:start="341:17" pos:end="341:87"><expr pos:start="341:17" pos:end="341:86"><call pos:start="341:17" pos:end="341:86"><name pos:start="341:17" pos:end="341:23">pstrcpy</name><argument_list pos:start="341:24" pos:end="341:86">(<argument pos:start="341:25" pos:end="341:35"><expr pos:start="341:25" pos:end="341:35"><name pos:start="341:25" pos:end="341:35">down_script</name></expr></argument>, <argument pos:start="341:38" pos:end="341:56"><expr pos:start="341:38" pos:end="341:56"><sizeof pos:start="341:38" pos:end="341:56">sizeof<argument_list pos:start="341:44" pos:end="341:56">(<argument pos:start="341:45" pos:end="341:55"><expr pos:start="341:45" pos:end="341:55"><name pos:start="341:45" pos:end="341:55">down_script</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="341:59" pos:end="341:85"><expr pos:start="341:59" pos:end="341:85"><name pos:start="341:59" pos:end="341:85">DEFAULT_NETWORK_DOWN_SCRIPT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="345:13" pos:end="345:86"><expr pos:start="345:13" pos:end="345:85"><name pos:start="345:13" pos:end="345:15">ret</name> <operator pos:start="345:17" pos:end="345:17">=</operator> <call pos:start="345:19" pos:end="345:85"><name pos:start="345:19" pos:end="345:30">net_tap_init</name><argument_list pos:start="345:31" pos:end="345:85">(<argument pos:start="345:32" pos:end="345:35"><expr pos:start="345:32" pos:end="345:35"><name pos:start="345:32" pos:end="345:35">vlan</name></expr></argument>, <argument pos:start="345:38" pos:end="345:43"><expr pos:start="345:38" pos:end="345:43"><name pos:start="345:38" pos:end="345:43">device</name></expr></argument>, <argument pos:start="345:46" pos:end="345:49"><expr pos:start="345:46" pos:end="345:49"><name pos:start="345:46" pos:end="345:49">name</name></expr></argument>, <argument pos:start="345:52" pos:end="345:57"><expr pos:start="345:52" pos:end="345:57"><name pos:start="345:52" pos:end="345:57">ifname</name></expr></argument>, <argument pos:start="345:60" pos:end="345:71"><expr pos:start="345:60" pos:end="345:71"><name pos:start="345:60" pos:end="345:71">setup_script</name></expr></argument>, <argument pos:start="345:74" pos:end="345:84"><expr pos:start="345:74" pos:end="345:84"><name pos:start="345:74" pos:end="345:84">down_script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="349:7" pos:end="441:5">else

<cpp:endif pos:start="351:1" pos:end="351:6">#<cpp:directive pos:start="351:2" pos:end="351:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="353:8" pos:end="353:34">(<expr pos:start="353:9" pos:end="353:33"><operator pos:start="353:9" pos:end="353:9">!</operator><call pos:start="353:10" pos:end="353:33"><name pos:start="353:10" pos:end="353:15">strcmp</name><argument_list pos:start="353:16" pos:end="353:33">(<argument pos:start="353:17" pos:end="353:22"><expr pos:start="353:17" pos:end="353:22"><name pos:start="353:17" pos:end="353:22">device</name></expr></argument>, <argument pos:start="353:25" pos:end="353:32"><expr pos:start="353:25" pos:end="353:32"><literal type="string" pos:start="353:25" pos:end="353:32">"socket"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="353:36" pos:end="441:5">{<block_content pos:start="355:9" pos:end="439:29">

        <if_stmt pos:start="355:9" pos:end="437:9"><if pos:start="355:9" pos:end="375:9">if <condition pos:start="355:12" pos:end="355:59">(<expr pos:start="355:13" pos:end="355:58"><call pos:start="355:13" pos:end="355:54"><name pos:start="355:13" pos:end="355:27">get_param_value</name><argument_list pos:start="355:28" pos:end="355:54">(<argument pos:start="355:29" pos:end="355:31"><expr pos:start="355:29" pos:end="355:31"><name pos:start="355:29" pos:end="355:31">buf</name></expr></argument>, <argument pos:start="355:34" pos:end="355:44"><expr pos:start="355:34" pos:end="355:44"><sizeof pos:start="355:34" pos:end="355:44">sizeof<argument_list pos:start="355:40" pos:end="355:44">(<argument pos:start="355:41" pos:end="355:43"><expr pos:start="355:41" pos:end="355:43"><name pos:start="355:41" pos:end="355:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="355:47" pos:end="355:50"><expr pos:start="355:47" pos:end="355:50"><literal type="string" pos:start="355:47" pos:end="355:50">"fd"</literal></expr></argument>, <argument pos:start="355:53" pos:end="355:53"><expr pos:start="355:53" pos:end="355:53"><name pos:start="355:53" pos:end="355:53">p</name></expr></argument>)</argument_list></call> <operator pos:start="355:56" pos:end="355:56">&gt;</operator> <literal type="number" pos:start="355:58" pos:end="355:58">0</literal></expr>)</condition> <block pos:start="355:61" pos:end="375:9">{<block_content pos:start="357:13" pos:end="373:24">

            <decl_stmt pos:start="357:13" pos:end="357:19"><decl pos:start="357:13" pos:end="357:18"><type pos:start="357:13" pos:end="357:15"><name pos:start="357:13" pos:end="357:15">int</name></type> <name pos:start="357:17" pos:end="357:18">fd</name></decl>;</decl_stmt>

            <if_stmt pos:start="359:13" pos:end="365:13"><if pos:start="359:13" pos:end="365:13">if <condition pos:start="359:16" pos:end="359:47">(<expr pos:start="359:17" pos:end="359:46"><call pos:start="359:17" pos:end="359:42"><name pos:start="359:17" pos:end="359:28">check_params</name><argument_list pos:start="359:29" pos:end="359:42">(<argument pos:start="359:30" pos:end="359:38"><expr pos:start="359:30" pos:end="359:38"><name pos:start="359:30" pos:end="359:38">fd_params</name></expr></argument>, <argument pos:start="359:41" pos:end="359:41"><expr pos:start="359:41" pos:end="359:41"><name pos:start="359:41" pos:end="359:41">p</name></expr></argument>)</argument_list></call> <operator pos:start="359:44" pos:end="359:44">&lt;</operator> <literal type="number" pos:start="359:46" pos:end="359:46">0</literal></expr>)</condition> <block pos:start="359:49" pos:end="365:13">{<block_content pos:start="361:17" pos:end="363:26">

                <expr_stmt pos:start="361:17" pos:end="361:72"><expr pos:start="361:17" pos:end="361:71"><call pos:start="361:17" pos:end="361:71"><name pos:start="361:17" pos:end="361:23">fprintf</name><argument_list pos:start="361:24" pos:end="361:71">(<argument pos:start="361:25" pos:end="361:30"><expr pos:start="361:25" pos:end="361:30"><name pos:start="361:25" pos:end="361:30">stderr</name></expr></argument>, <argument pos:start="361:33" pos:end="361:67"><expr pos:start="361:33" pos:end="361:67"><literal type="string" pos:start="361:33" pos:end="361:67">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="361:70" pos:end="361:70"><expr pos:start="361:70" pos:end="361:70"><name pos:start="361:70" pos:end="361:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="363:17" pos:end="363:26">return <expr pos:start="363:24" pos:end="363:25"><operator pos:start="363:24" pos:end="363:24">-</operator><literal type="number" pos:start="363:25" pos:end="363:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:38"><expr pos:start="367:13" pos:end="367:37"><name pos:start="367:13" pos:end="367:14">fd</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <call pos:start="367:18" pos:end="367:37"><name pos:start="367:18" pos:end="367:23">strtol</name><argument_list pos:start="367:24" pos:end="367:37">(<argument pos:start="367:25" pos:end="367:27"><expr pos:start="367:25" pos:end="367:27"><name pos:start="367:25" pos:end="367:27">buf</name></expr></argument>, <argument pos:start="367:30" pos:end="367:33"><expr pos:start="367:30" pos:end="367:33"><name pos:start="367:30" pos:end="367:33">NULL</name></expr></argument>, <argument pos:start="367:36" pos:end="367:36"><expr pos:start="367:36" pos:end="367:36"><literal type="number" pos:start="367:36" pos:end="367:36">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:21"><expr pos:start="369:13" pos:end="369:20"><name pos:start="369:13" pos:end="369:15">ret</name> <operator pos:start="369:17" pos:end="369:17">=</operator> <operator pos:start="369:19" pos:end="369:19">-</operator><literal type="number" pos:start="369:20" pos:end="369:20">1</literal></expr>;</expr_stmt>

            <if_stmt pos:start="371:13" pos:end="373:24"><if pos:start="371:13" pos:end="373:24">if <condition pos:start="371:16" pos:end="371:62">(<expr pos:start="371:17" pos:end="371:61"><call pos:start="371:17" pos:end="371:61"><name pos:start="371:17" pos:end="371:34">net_socket_fd_init</name><argument_list pos:start="371:35" pos:end="371:61">(<argument pos:start="371:36" pos:end="371:39"><expr pos:start="371:36" pos:end="371:39"><name pos:start="371:36" pos:end="371:39">vlan</name></expr></argument>, <argument pos:start="371:42" pos:end="371:47"><expr pos:start="371:42" pos:end="371:47"><name pos:start="371:42" pos:end="371:47">device</name></expr></argument>, <argument pos:start="371:50" pos:end="371:53"><expr pos:start="371:50" pos:end="371:53"><name pos:start="371:50" pos:end="371:53">name</name></expr></argument>, <argument pos:start="371:56" pos:end="371:57"><expr pos:start="371:56" pos:end="371:57"><name pos:start="371:56" pos:end="371:57">fd</name></expr></argument>, <argument pos:start="371:60" pos:end="371:60"><expr pos:start="371:60" pos:end="371:60"><literal type="number" pos:start="371:60" pos:end="371:60">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="373:17" pos:end="373:24"><block_content pos:start="373:17" pos:end="373:24">

                <expr_stmt pos:start="373:17" pos:end="373:24"><expr pos:start="373:17" pos:end="373:23"><name pos:start="373:17" pos:end="373:19">ret</name> <operator pos:start="373:21" pos:end="373:21">=</operator> <literal type="number" pos:start="373:23" pos:end="373:23">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="375:11" pos:end="393:9">else if <condition pos:start="375:19" pos:end="375:70">(<expr pos:start="375:20" pos:end="375:69"><call pos:start="375:20" pos:end="375:65"><name pos:start="375:20" pos:end="375:34">get_param_value</name><argument_list pos:start="375:35" pos:end="375:65">(<argument pos:start="375:36" pos:end="375:38"><expr pos:start="375:36" pos:end="375:38"><name pos:start="375:36" pos:end="375:38">buf</name></expr></argument>, <argument pos:start="375:41" pos:end="375:51"><expr pos:start="375:41" pos:end="375:51"><sizeof pos:start="375:41" pos:end="375:51">sizeof<argument_list pos:start="375:47" pos:end="375:51">(<argument pos:start="375:48" pos:end="375:50"><expr pos:start="375:48" pos:end="375:50"><name pos:start="375:48" pos:end="375:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="375:54" pos:end="375:61"><expr pos:start="375:54" pos:end="375:61"><literal type="string" pos:start="375:54" pos:end="375:61">"listen"</literal></expr></argument>, <argument pos:start="375:64" pos:end="375:64"><expr pos:start="375:64" pos:end="375:64"><name pos:start="375:64" pos:end="375:64">p</name></expr></argument>)</argument_list></call> <operator pos:start="375:67" pos:end="375:67">&gt;</operator> <literal type="number" pos:start="375:69" pos:end="375:69">0</literal></expr>)</condition> <block pos:start="375:72" pos:end="393:9">{<block_content pos:start="377:13" pos:end="391:66">

            <decl_stmt pos:start="377:13" pos:end="381:14"><decl pos:start="377:13" pos:end="381:13"><type pos:start="377:13" pos:end="377:37"><specifier pos:start="377:13" pos:end="377:18">static</specifier> <specifier pos:start="377:20" pos:end="377:24">const</specifier> <name pos:start="377:26" pos:end="377:29">char</name> <modifier pos:start="377:31" pos:end="377:31">*</modifier> <specifier pos:start="377:33" pos:end="377:37">const</specifier></type> <name pos:start="377:39" pos:end="377:53"><name pos:start="377:39" pos:end="377:51">listen_params</name><index pos:start="377:52" pos:end="377:53">[]</index></name> <init pos:start="377:55" pos:end="381:13">= <expr pos:start="377:57" pos:end="381:13"><block pos:start="377:57" pos:end="381:13">{

                <expr pos:start="379:17" pos:end="379:22"><literal type="string" pos:start="379:17" pos:end="379:22">"vlan"</literal></expr>, <expr pos:start="379:25" pos:end="379:30"><literal type="string" pos:start="379:25" pos:end="379:30">"name"</literal></expr>, <expr pos:start="379:33" pos:end="379:40"><literal type="string" pos:start="379:33" pos:end="379:40">"listen"</literal></expr>, <expr pos:start="379:43" pos:end="379:46"><name pos:start="379:43" pos:end="379:46">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="383:13" pos:end="389:13"><if pos:start="383:13" pos:end="389:13">if <condition pos:start="383:16" pos:end="383:51">(<expr pos:start="383:17" pos:end="383:50"><call pos:start="383:17" pos:end="383:46"><name pos:start="383:17" pos:end="383:28">check_params</name><argument_list pos:start="383:29" pos:end="383:46">(<argument pos:start="383:30" pos:end="383:42"><expr pos:start="383:30" pos:end="383:42"><name pos:start="383:30" pos:end="383:42">listen_params</name></expr></argument>, <argument pos:start="383:45" pos:end="383:45"><expr pos:start="383:45" pos:end="383:45"><name pos:start="383:45" pos:end="383:45">p</name></expr></argument>)</argument_list></call> <operator pos:start="383:48" pos:end="383:48">&lt;</operator> <literal type="number" pos:start="383:50" pos:end="383:50">0</literal></expr>)</condition> <block pos:start="383:53" pos:end="389:13">{<block_content pos:start="385:17" pos:end="387:26">

                <expr_stmt pos:start="385:17" pos:end="385:72"><expr pos:start="385:17" pos:end="385:71"><call pos:start="385:17" pos:end="385:71"><name pos:start="385:17" pos:end="385:23">fprintf</name><argument_list pos:start="385:24" pos:end="385:71">(<argument pos:start="385:25" pos:end="385:30"><expr pos:start="385:25" pos:end="385:30"><name pos:start="385:25" pos:end="385:30">stderr</name></expr></argument>, <argument pos:start="385:33" pos:end="385:67"><expr pos:start="385:33" pos:end="385:67"><literal type="string" pos:start="385:33" pos:end="385:67">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="385:70" pos:end="385:70"><expr pos:start="385:70" pos:end="385:70"><name pos:start="385:70" pos:end="385:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="387:17" pos:end="387:26">return <expr pos:start="387:24" pos:end="387:25"><operator pos:start="387:24" pos:end="387:24">-</operator><literal type="number" pos:start="387:25" pos:end="387:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:66"><expr pos:start="391:13" pos:end="391:65"><name pos:start="391:13" pos:end="391:15">ret</name> <operator pos:start="391:17" pos:end="391:17">=</operator> <call pos:start="391:19" pos:end="391:65"><name pos:start="391:19" pos:end="391:40">net_socket_listen_init</name><argument_list pos:start="391:41" pos:end="391:65">(<argument pos:start="391:42" pos:end="391:45"><expr pos:start="391:42" pos:end="391:45"><name pos:start="391:42" pos:end="391:45">vlan</name></expr></argument>, <argument pos:start="391:48" pos:end="391:53"><expr pos:start="391:48" pos:end="391:53"><name pos:start="391:48" pos:end="391:53">device</name></expr></argument>, <argument pos:start="391:56" pos:end="391:59"><expr pos:start="391:56" pos:end="391:59"><name pos:start="391:56" pos:end="391:59">name</name></expr></argument>, <argument pos:start="391:62" pos:end="391:64"><expr pos:start="391:62" pos:end="391:64"><name pos:start="391:62" pos:end="391:64">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="393:11" pos:end="411:9">else if <condition pos:start="393:19" pos:end="393:71">(<expr pos:start="393:20" pos:end="393:70"><call pos:start="393:20" pos:end="393:66"><name pos:start="393:20" pos:end="393:34">get_param_value</name><argument_list pos:start="393:35" pos:end="393:66">(<argument pos:start="393:36" pos:end="393:38"><expr pos:start="393:36" pos:end="393:38"><name pos:start="393:36" pos:end="393:38">buf</name></expr></argument>, <argument pos:start="393:41" pos:end="393:51"><expr pos:start="393:41" pos:end="393:51"><sizeof pos:start="393:41" pos:end="393:51">sizeof<argument_list pos:start="393:47" pos:end="393:51">(<argument pos:start="393:48" pos:end="393:50"><expr pos:start="393:48" pos:end="393:50"><name pos:start="393:48" pos:end="393:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="393:54" pos:end="393:62"><expr pos:start="393:54" pos:end="393:62"><literal type="string" pos:start="393:54" pos:end="393:62">"connect"</literal></expr></argument>, <argument pos:start="393:65" pos:end="393:65"><expr pos:start="393:65" pos:end="393:65"><name pos:start="393:65" pos:end="393:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="393:68" pos:end="393:68">&gt;</operator> <literal type="number" pos:start="393:70" pos:end="393:70">0</literal></expr>)</condition> <block pos:start="393:73" pos:end="411:9">{<block_content pos:start="395:13" pos:end="409:67">

            <decl_stmt pos:start="395:13" pos:end="399:14"><decl pos:start="395:13" pos:end="399:13"><type pos:start="395:13" pos:end="395:37"><specifier pos:start="395:13" pos:end="395:18">static</specifier> <specifier pos:start="395:20" pos:end="395:24">const</specifier> <name pos:start="395:26" pos:end="395:29">char</name> <modifier pos:start="395:31" pos:end="395:31">*</modifier> <specifier pos:start="395:33" pos:end="395:37">const</specifier></type> <name pos:start="395:39" pos:end="395:54"><name pos:start="395:39" pos:end="395:52">connect_params</name><index pos:start="395:53" pos:end="395:54">[]</index></name> <init pos:start="395:56" pos:end="399:13">= <expr pos:start="395:58" pos:end="399:13"><block pos:start="395:58" pos:end="399:13">{

                <expr pos:start="397:17" pos:end="397:22"><literal type="string" pos:start="397:17" pos:end="397:22">"vlan"</literal></expr>, <expr pos:start="397:25" pos:end="397:30"><literal type="string" pos:start="397:25" pos:end="397:30">"name"</literal></expr>, <expr pos:start="397:33" pos:end="397:41"><literal type="string" pos:start="397:33" pos:end="397:41">"connect"</literal></expr>, <expr pos:start="397:44" pos:end="397:47"><name pos:start="397:44" pos:end="397:47">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="401:13" pos:end="407:13"><if pos:start="401:13" pos:end="407:13">if <condition pos:start="401:16" pos:end="401:52">(<expr pos:start="401:17" pos:end="401:51"><call pos:start="401:17" pos:end="401:47"><name pos:start="401:17" pos:end="401:28">check_params</name><argument_list pos:start="401:29" pos:end="401:47">(<argument pos:start="401:30" pos:end="401:43"><expr pos:start="401:30" pos:end="401:43"><name pos:start="401:30" pos:end="401:43">connect_params</name></expr></argument>, <argument pos:start="401:46" pos:end="401:46"><expr pos:start="401:46" pos:end="401:46"><name pos:start="401:46" pos:end="401:46">p</name></expr></argument>)</argument_list></call> <operator pos:start="401:49" pos:end="401:49">&lt;</operator> <literal type="number" pos:start="401:51" pos:end="401:51">0</literal></expr>)</condition> <block pos:start="401:54" pos:end="407:13">{<block_content pos:start="403:17" pos:end="405:26">

                <expr_stmt pos:start="403:17" pos:end="403:72"><expr pos:start="403:17" pos:end="403:71"><call pos:start="403:17" pos:end="403:71"><name pos:start="403:17" pos:end="403:23">fprintf</name><argument_list pos:start="403:24" pos:end="403:71">(<argument pos:start="403:25" pos:end="403:30"><expr pos:start="403:25" pos:end="403:30"><name pos:start="403:25" pos:end="403:30">stderr</name></expr></argument>, <argument pos:start="403:33" pos:end="403:67"><expr pos:start="403:33" pos:end="403:67"><literal type="string" pos:start="403:33" pos:end="403:67">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="403:70" pos:end="403:70"><expr pos:start="403:70" pos:end="403:70"><name pos:start="403:70" pos:end="403:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="405:17" pos:end="405:26">return <expr pos:start="405:24" pos:end="405:25"><operator pos:start="405:24" pos:end="405:24">-</operator><literal type="number" pos:start="405:25" pos:end="405:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="409:13" pos:end="409:67"><expr pos:start="409:13" pos:end="409:66"><name pos:start="409:13" pos:end="409:15">ret</name> <operator pos:start="409:17" pos:end="409:17">=</operator> <call pos:start="409:19" pos:end="409:66"><name pos:start="409:19" pos:end="409:41">net_socket_connect_init</name><argument_list pos:start="409:42" pos:end="409:66">(<argument pos:start="409:43" pos:end="409:46"><expr pos:start="409:43" pos:end="409:46"><name pos:start="409:43" pos:end="409:46">vlan</name></expr></argument>, <argument pos:start="409:49" pos:end="409:54"><expr pos:start="409:49" pos:end="409:54"><name pos:start="409:49" pos:end="409:54">device</name></expr></argument>, <argument pos:start="409:57" pos:end="409:60"><expr pos:start="409:57" pos:end="409:60"><name pos:start="409:57" pos:end="409:60">name</name></expr></argument>, <argument pos:start="409:63" pos:end="409:65"><expr pos:start="409:63" pos:end="409:65"><name pos:start="409:63" pos:end="409:65">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="411:11" pos:end="429:9">else if <condition pos:start="411:19" pos:end="411:69">(<expr pos:start="411:20" pos:end="411:68"><call pos:start="411:20" pos:end="411:64"><name pos:start="411:20" pos:end="411:34">get_param_value</name><argument_list pos:start="411:35" pos:end="411:64">(<argument pos:start="411:36" pos:end="411:38"><expr pos:start="411:36" pos:end="411:38"><name pos:start="411:36" pos:end="411:38">buf</name></expr></argument>, <argument pos:start="411:41" pos:end="411:51"><expr pos:start="411:41" pos:end="411:51"><sizeof pos:start="411:41" pos:end="411:51">sizeof<argument_list pos:start="411:47" pos:end="411:51">(<argument pos:start="411:48" pos:end="411:50"><expr pos:start="411:48" pos:end="411:50"><name pos:start="411:48" pos:end="411:50">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="411:54" pos:end="411:60"><expr pos:start="411:54" pos:end="411:60"><literal type="string" pos:start="411:54" pos:end="411:60">"mcast"</literal></expr></argument>, <argument pos:start="411:63" pos:end="411:63"><expr pos:start="411:63" pos:end="411:63"><name pos:start="411:63" pos:end="411:63">p</name></expr></argument>)</argument_list></call> <operator pos:start="411:66" pos:end="411:66">&gt;</operator> <literal type="number" pos:start="411:68" pos:end="411:68">0</literal></expr>)</condition> <block pos:start="411:71" pos:end="429:9">{<block_content pos:start="413:13" pos:end="427:65">

            <decl_stmt pos:start="413:13" pos:end="417:14"><decl pos:start="413:13" pos:end="417:13"><type pos:start="413:13" pos:end="413:37"><specifier pos:start="413:13" pos:end="413:18">static</specifier> <specifier pos:start="413:20" pos:end="413:24">const</specifier> <name pos:start="413:26" pos:end="413:29">char</name> <modifier pos:start="413:31" pos:end="413:31">*</modifier> <specifier pos:start="413:33" pos:end="413:37">const</specifier></type> <name pos:start="413:39" pos:end="413:52"><name pos:start="413:39" pos:end="413:50">mcast_params</name><index pos:start="413:51" pos:end="413:52">[]</index></name> <init pos:start="413:54" pos:end="417:13">= <expr pos:start="413:56" pos:end="417:13"><block pos:start="413:56" pos:end="417:13">{

                <expr pos:start="415:17" pos:end="415:22"><literal type="string" pos:start="415:17" pos:end="415:22">"vlan"</literal></expr>, <expr pos:start="415:25" pos:end="415:30"><literal type="string" pos:start="415:25" pos:end="415:30">"name"</literal></expr>, <expr pos:start="415:33" pos:end="415:39"><literal type="string" pos:start="415:33" pos:end="415:39">"mcast"</literal></expr>, <expr pos:start="415:42" pos:end="415:45"><name pos:start="415:42" pos:end="415:45">NULL</name></expr>

            }</block></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="419:13" pos:end="425:13"><if pos:start="419:13" pos:end="425:13">if <condition pos:start="419:16" pos:end="419:50">(<expr pos:start="419:17" pos:end="419:49"><call pos:start="419:17" pos:end="419:45"><name pos:start="419:17" pos:end="419:28">check_params</name><argument_list pos:start="419:29" pos:end="419:45">(<argument pos:start="419:30" pos:end="419:41"><expr pos:start="419:30" pos:end="419:41"><name pos:start="419:30" pos:end="419:41">mcast_params</name></expr></argument>, <argument pos:start="419:44" pos:end="419:44"><expr pos:start="419:44" pos:end="419:44"><name pos:start="419:44" pos:end="419:44">p</name></expr></argument>)</argument_list></call> <operator pos:start="419:47" pos:end="419:47">&lt;</operator> <literal type="number" pos:start="419:49" pos:end="419:49">0</literal></expr>)</condition> <block pos:start="419:52" pos:end="425:13">{<block_content pos:start="421:17" pos:end="423:26">

                <expr_stmt pos:start="421:17" pos:end="421:72"><expr pos:start="421:17" pos:end="421:71"><call pos:start="421:17" pos:end="421:71"><name pos:start="421:17" pos:end="421:23">fprintf</name><argument_list pos:start="421:24" pos:end="421:71">(<argument pos:start="421:25" pos:end="421:30"><expr pos:start="421:25" pos:end="421:30"><name pos:start="421:25" pos:end="421:30">stderr</name></expr></argument>, <argument pos:start="421:33" pos:end="421:67"><expr pos:start="421:33" pos:end="421:67"><literal type="string" pos:start="421:33" pos:end="421:67">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="421:70" pos:end="421:70"><expr pos:start="421:70" pos:end="421:70"><name pos:start="421:70" pos:end="421:70">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="423:17" pos:end="423:26">return <expr pos:start="423:24" pos:end="423:25"><operator pos:start="423:24" pos:end="423:24">-</operator><literal type="number" pos:start="423:25" pos:end="423:25">1</literal></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:65"><expr pos:start="427:13" pos:end="427:64"><name pos:start="427:13" pos:end="427:15">ret</name> <operator pos:start="427:17" pos:end="427:17">=</operator> <call pos:start="427:19" pos:end="427:64"><name pos:start="427:19" pos:end="427:39">net_socket_mcast_init</name><argument_list pos:start="427:40" pos:end="427:64">(<argument pos:start="427:41" pos:end="427:44"><expr pos:start="427:41" pos:end="427:44"><name pos:start="427:41" pos:end="427:44">vlan</name></expr></argument>, <argument pos:start="427:47" pos:end="427:52"><expr pos:start="427:47" pos:end="427:52"><name pos:start="427:47" pos:end="427:52">device</name></expr></argument>, <argument pos:start="427:55" pos:end="427:58"><expr pos:start="427:55" pos:end="427:58"><name pos:start="427:55" pos:end="427:58">name</name></expr></argument>, <argument pos:start="427:61" pos:end="427:63"><expr pos:start="427:61" pos:end="427:63"><name pos:start="427:61" pos:end="427:63">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="429:11" pos:end="437:9">else <block pos:start="429:16" pos:end="437:9">{<block_content pos:start="431:13" pos:end="435:21">

            <expr_stmt pos:start="431:13" pos:end="431:63"><expr pos:start="431:13" pos:end="431:62"><call pos:start="431:13" pos:end="431:62"><name pos:start="431:13" pos:end="431:19">fprintf</name><argument_list pos:start="431:20" pos:end="431:62">(<argument pos:start="431:21" pos:end="431:26"><expr pos:start="431:21" pos:end="431:26"><name pos:start="431:21" pos:end="431:26">stderr</name></expr></argument>, <argument pos:start="431:29" pos:end="431:58"><expr pos:start="431:29" pos:end="431:58"><literal type="string" pos:start="431:29" pos:end="431:58">"Unknown socket options: %s\n"</literal></expr></argument>, <argument pos:start="431:61" pos:end="431:61"><expr pos:start="431:61" pos:end="431:61"><name pos:start="431:61" pos:end="431:61">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="433:13" pos:end="433:21"><expr pos:start="433:13" pos:end="433:20"><name pos:start="433:13" pos:end="433:15">ret</name> <operator pos:start="433:17" pos:end="433:17">=</operator> <operator pos:start="433:19" pos:end="433:19">-</operator><literal type="number" pos:start="433:20" pos:end="433:20">1</literal></expr>;</expr_stmt>

            <goto pos:start="435:13" pos:end="435:21">goto <name pos:start="435:18" pos:end="435:20">out</name>;</goto>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="439:9" pos:end="439:29"><expr pos:start="439:9" pos:end="439:28"><name pos:start="439:9" pos:end="439:26"><name pos:start="439:9" pos:end="439:12">vlan</name><operator pos:start="439:13" pos:end="439:14">-&gt;</operator><name pos:start="439:15" pos:end="439:26">nb_host_devs</name></name><operator pos:start="439:27" pos:end="439:28">++</operator></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="441:7" pos:end="503:5">else

<cpp:ifdef pos:start="443:1" pos:end="443:17">#<cpp:directive pos:start="443:2" pos:end="443:6">ifdef</cpp:directive> <name pos:start="443:8" pos:end="443:17">CONFIG_VDE</name></cpp:ifdef>

    if <condition pos:start="445:8" pos:end="445:31">(<expr pos:start="445:9" pos:end="445:30"><operator pos:start="445:9" pos:end="445:9">!</operator><call pos:start="445:10" pos:end="445:30"><name pos:start="445:10" pos:end="445:15">strcmp</name><argument_list pos:start="445:16" pos:end="445:30">(<argument pos:start="445:17" pos:end="445:22"><expr pos:start="445:17" pos:end="445:22"><name pos:start="445:17" pos:end="445:22">device</name></expr></argument>, <argument pos:start="445:25" pos:end="445:29"><expr pos:start="445:25" pos:end="445:29"><literal type="string" pos:start="445:25" pos:end="445:29">"vde"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="445:33" pos:end="503:5">{<block_content pos:start="447:9" pos:end="501:88">

        <decl_stmt pos:start="447:9" pos:end="451:10"><decl pos:start="447:9" pos:end="451:9"><type pos:start="447:9" pos:end="447:33"><specifier pos:start="447:9" pos:end="447:14">static</specifier> <specifier pos:start="447:16" pos:end="447:20">const</specifier> <name pos:start="447:22" pos:end="447:25">char</name> <modifier pos:start="447:27" pos:end="447:27">*</modifier> <specifier pos:start="447:29" pos:end="447:33">const</specifier></type> <name pos:start="447:35" pos:end="447:46"><name pos:start="447:35" pos:end="447:44">vde_params</name><index pos:start="447:45" pos:end="447:46">[]</index></name> <init pos:start="447:48" pos:end="451:9">= <expr pos:start="447:50" pos:end="451:9"><block pos:start="447:50" pos:end="451:9">{

            <expr pos:start="449:13" pos:end="449:18"><literal type="string" pos:start="449:13" pos:end="449:18">"vlan"</literal></expr>, <expr pos:start="449:21" pos:end="449:26"><literal type="string" pos:start="449:21" pos:end="449:26">"name"</literal></expr>, <expr pos:start="449:29" pos:end="449:34"><literal type="string" pos:start="449:29" pos:end="449:34">"sock"</literal></expr>, <expr pos:start="449:37" pos:end="449:42"><literal type="string" pos:start="449:37" pos:end="449:42">"port"</literal></expr>, <expr pos:start="449:45" pos:end="449:51"><literal type="string" pos:start="449:45" pos:end="449:51">"group"</literal></expr>, <expr pos:start="449:54" pos:end="449:59"><literal type="string" pos:start="449:54" pos:end="449:59">"mode"</literal></expr>, <expr pos:start="449:62" pos:end="449:65"><name pos:start="449:62" pos:end="449:65">NULL</name></expr>

        }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="453:9" pos:end="453:44"><decl pos:start="453:9" pos:end="453:27"><type pos:start="453:9" pos:end="453:12"><name pos:start="453:9" pos:end="453:12">char</name></type> <name pos:start="453:14" pos:end="453:27"><name pos:start="453:14" pos:end="453:21">vde_sock</name><index pos:start="453:22" pos:end="453:27">[<expr pos:start="453:23" pos:end="453:26"><literal type="number" pos:start="453:23" pos:end="453:26">1024</literal></expr>]</index></name></decl>, <decl pos:start="453:30" pos:end="453:43"><type ref="prev" pos:start="453:9" pos:end="453:12"/><name pos:start="453:30" pos:end="453:43"><name pos:start="453:30" pos:end="453:38">vde_group</name><index pos:start="453:39" pos:end="453:43">[<expr pos:start="453:40" pos:end="453:42"><literal type="number" pos:start="453:40" pos:end="453:42">512</literal></expr>]</index></name></decl>;</decl_stmt>

	<decl_stmt pos:start="455:9" pos:end="455:31"><decl pos:start="455:9" pos:end="455:20"><type pos:start="455:9" pos:end="455:11"><name pos:start="455:9" pos:end="455:11">int</name></type> <name pos:start="455:13" pos:end="455:20">vde_port</name></decl>, <decl pos:start="455:23" pos:end="455:30"><type ref="prev" pos:start="455:9" pos:end="455:11"/><name pos:start="455:23" pos:end="455:30">vde_mode</name></decl>;</decl_stmt>



        <if_stmt pos:start="459:9" pos:end="465:9"><if pos:start="459:9" pos:end="465:9">if <condition pos:start="459:12" pos:end="459:44">(<expr pos:start="459:13" pos:end="459:43"><call pos:start="459:13" pos:end="459:39"><name pos:start="459:13" pos:end="459:24">check_params</name><argument_list pos:start="459:25" pos:end="459:39">(<argument pos:start="459:26" pos:end="459:35"><expr pos:start="459:26" pos:end="459:35"><name pos:start="459:26" pos:end="459:35">vde_params</name></expr></argument>, <argument pos:start="459:38" pos:end="459:38"><expr pos:start="459:38" pos:end="459:38"><name pos:start="459:38" pos:end="459:38">p</name></expr></argument>)</argument_list></call> <operator pos:start="459:41" pos:end="459:41">&lt;</operator> <literal type="number" pos:start="459:43" pos:end="459:43">0</literal></expr>)</condition> <block pos:start="459:46" pos:end="465:9">{<block_content pos:start="461:13" pos:end="463:22">

            <expr_stmt pos:start="461:13" pos:end="461:68"><expr pos:start="461:13" pos:end="461:67"><call pos:start="461:13" pos:end="461:67"><name pos:start="461:13" pos:end="461:19">fprintf</name><argument_list pos:start="461:20" pos:end="461:67">(<argument pos:start="461:21" pos:end="461:26"><expr pos:start="461:21" pos:end="461:26"><name pos:start="461:21" pos:end="461:26">stderr</name></expr></argument>, <argument pos:start="461:29" pos:end="461:63"><expr pos:start="461:29" pos:end="461:63"><literal type="string" pos:start="461:29" pos:end="461:63">"qemu: invalid parameter in '%s'\n"</literal></expr></argument>, <argument pos:start="461:66" pos:end="461:66"><expr pos:start="461:66" pos:end="461:66"><name pos:start="461:66" pos:end="461:66">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="463:13" pos:end="463:22">return <expr pos:start="463:20" pos:end="463:21"><operator pos:start="463:20" pos:end="463:20">-</operator><literal type="number" pos:start="463:21" pos:end="463:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="467:9" pos:end="467:29"><expr pos:start="467:9" pos:end="467:28"><name pos:start="467:9" pos:end="467:26"><name pos:start="467:9" pos:end="467:12">vlan</name><operator pos:start="467:13" pos:end="467:14">-&gt;</operator><name pos:start="467:15" pos:end="467:26">nb_host_devs</name></name><operator pos:start="467:27" pos:end="467:28">++</operator></expr>;</expr_stmt>

        <if_stmt pos:start="469:9" pos:end="473:9"><if pos:start="469:9" pos:end="473:9">if <condition pos:start="469:12" pos:end="469:72">(<expr pos:start="469:13" pos:end="469:71"><call pos:start="469:13" pos:end="469:66"><name pos:start="469:13" pos:end="469:27">get_param_value</name><argument_list pos:start="469:28" pos:end="469:66">(<argument pos:start="469:29" pos:end="469:36"><expr pos:start="469:29" pos:end="469:36"><name pos:start="469:29" pos:end="469:36">vde_sock</name></expr></argument>, <argument pos:start="469:39" pos:end="469:54"><expr pos:start="469:39" pos:end="469:54"><sizeof pos:start="469:39" pos:end="469:54">sizeof<argument_list pos:start="469:45" pos:end="469:54">(<argument pos:start="469:46" pos:end="469:53"><expr pos:start="469:46" pos:end="469:53"><name pos:start="469:46" pos:end="469:53">vde_sock</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="469:57" pos:end="469:62"><expr pos:start="469:57" pos:end="469:62"><literal type="string" pos:start="469:57" pos:end="469:62">"sock"</literal></expr></argument>, <argument pos:start="469:65" pos:end="469:65"><expr pos:start="469:65" pos:end="469:65"><name pos:start="469:65" pos:end="469:65">p</name></expr></argument>)</argument_list></call> <operator pos:start="469:68" pos:end="469:69">&lt;=</operator> <literal type="number" pos:start="469:71" pos:end="469:71">0</literal></expr>)</condition> <block pos:start="469:74" pos:end="473:9">{<block_content pos:start="471:13" pos:end="471:31">

	    <expr_stmt pos:start="471:13" pos:end="471:31"><expr pos:start="471:13" pos:end="471:30"><name pos:start="471:13" pos:end="471:23"><name pos:start="471:13" pos:end="471:20">vde_sock</name><index pos:start="471:21" pos:end="471:23">[<expr pos:start="471:22" pos:end="471:22"><literal type="number" pos:start="471:22" pos:end="471:22">0</literal></expr>]</index></name> <operator pos:start="471:25" pos:end="471:25">=</operator> <literal type="char" pos:start="471:27" pos:end="471:30">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="475:9" pos:end="483:9"><if pos:start="475:9" pos:end="479:9">if <condition pos:start="475:12" pos:end="475:61">(<expr pos:start="475:13" pos:end="475:60"><call pos:start="475:13" pos:end="475:56"><name pos:start="475:13" pos:end="475:27">get_param_value</name><argument_list pos:start="475:28" pos:end="475:56">(<argument pos:start="475:29" pos:end="475:31"><expr pos:start="475:29" pos:end="475:31"><name pos:start="475:29" pos:end="475:31">buf</name></expr></argument>, <argument pos:start="475:34" pos:end="475:44"><expr pos:start="475:34" pos:end="475:44"><sizeof pos:start="475:34" pos:end="475:44">sizeof<argument_list pos:start="475:40" pos:end="475:44">(<argument pos:start="475:41" pos:end="475:43"><expr pos:start="475:41" pos:end="475:43"><name pos:start="475:41" pos:end="475:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="475:47" pos:end="475:52"><expr pos:start="475:47" pos:end="475:52"><literal type="string" pos:start="475:47" pos:end="475:52">"port"</literal></expr></argument>, <argument pos:start="475:55" pos:end="475:55"><expr pos:start="475:55" pos:end="475:55"><name pos:start="475:55" pos:end="475:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="475:58" pos:end="475:58">&gt;</operator> <literal type="number" pos:start="475:60" pos:end="475:60">0</literal></expr>)</condition> <block pos:start="475:63" pos:end="479:9">{<block_content pos:start="477:13" pos:end="477:45">

	    <expr_stmt pos:start="477:13" pos:end="477:45"><expr pos:start="477:13" pos:end="477:44"><name pos:start="477:13" pos:end="477:20">vde_port</name> <operator pos:start="477:22" pos:end="477:22">=</operator> <call pos:start="477:24" pos:end="477:44"><name pos:start="477:24" pos:end="477:29">strtol</name><argument_list pos:start="477:30" pos:end="477:44">(<argument pos:start="477:31" pos:end="477:33"><expr pos:start="477:31" pos:end="477:33"><name pos:start="477:31" pos:end="477:33">buf</name></expr></argument>, <argument pos:start="477:36" pos:end="477:39"><expr pos:start="477:36" pos:end="477:39"><name pos:start="477:36" pos:end="477:39">NULL</name></expr></argument>, <argument pos:start="477:42" pos:end="477:43"><expr pos:start="477:42" pos:end="477:43"><literal type="number" pos:start="477:42" pos:end="477:43">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="479:11" pos:end="483:9">else <block pos:start="479:16" pos:end="483:9">{<block_content pos:start="481:13" pos:end="481:25">

	    <expr_stmt pos:start="481:13" pos:end="481:25"><expr pos:start="481:13" pos:end="481:24"><name pos:start="481:13" pos:end="481:20">vde_port</name> <operator pos:start="481:22" pos:end="481:22">=</operator> <literal type="number" pos:start="481:24" pos:end="481:24">0</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<if_stmt pos:start="485:9" pos:end="489:9"><if pos:start="485:9" pos:end="489:9">if <condition pos:start="485:12" pos:end="485:75">(<expr pos:start="485:13" pos:end="485:74"><call pos:start="485:13" pos:end="485:69"><name pos:start="485:13" pos:end="485:27">get_param_value</name><argument_list pos:start="485:28" pos:end="485:69">(<argument pos:start="485:29" pos:end="485:37"><expr pos:start="485:29" pos:end="485:37"><name pos:start="485:29" pos:end="485:37">vde_group</name></expr></argument>, <argument pos:start="485:40" pos:end="485:56"><expr pos:start="485:40" pos:end="485:56"><sizeof pos:start="485:40" pos:end="485:56">sizeof<argument_list pos:start="485:46" pos:end="485:56">(<argument pos:start="485:47" pos:end="485:55"><expr pos:start="485:47" pos:end="485:55"><name pos:start="485:47" pos:end="485:55">vde_group</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="485:59" pos:end="485:65"><expr pos:start="485:59" pos:end="485:65"><literal type="string" pos:start="485:59" pos:end="485:65">"group"</literal></expr></argument>, <argument pos:start="485:68" pos:end="485:68"><expr pos:start="485:68" pos:end="485:68"><name pos:start="485:68" pos:end="485:68">p</name></expr></argument>)</argument_list></call> <operator pos:start="485:71" pos:end="485:72">&lt;=</operator> <literal type="number" pos:start="485:74" pos:end="485:74">0</literal></expr>)</condition> <block pos:start="485:77" pos:end="489:9">{<block_content pos:start="487:13" pos:end="487:32">

	    <expr_stmt pos:start="487:13" pos:end="487:32"><expr pos:start="487:13" pos:end="487:31"><name pos:start="487:13" pos:end="487:24"><name pos:start="487:13" pos:end="487:21">vde_group</name><index pos:start="487:22" pos:end="487:24">[<expr pos:start="487:23" pos:end="487:23"><literal type="number" pos:start="487:23" pos:end="487:23">0</literal></expr>]</index></name> <operator pos:start="487:26" pos:end="487:26">=</operator> <literal type="char" pos:start="487:28" pos:end="487:31">'\0'</literal></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

	<if_stmt pos:start="491:9" pos:end="499:9"><if pos:start="491:9" pos:end="495:9">if <condition pos:start="491:12" pos:end="491:61">(<expr pos:start="491:13" pos:end="491:60"><call pos:start="491:13" pos:end="491:56"><name pos:start="491:13" pos:end="491:27">get_param_value</name><argument_list pos:start="491:28" pos:end="491:56">(<argument pos:start="491:29" pos:end="491:31"><expr pos:start="491:29" pos:end="491:31"><name pos:start="491:29" pos:end="491:31">buf</name></expr></argument>, <argument pos:start="491:34" pos:end="491:44"><expr pos:start="491:34" pos:end="491:44"><sizeof pos:start="491:34" pos:end="491:44">sizeof<argument_list pos:start="491:40" pos:end="491:44">(<argument pos:start="491:41" pos:end="491:43"><expr pos:start="491:41" pos:end="491:43"><name pos:start="491:41" pos:end="491:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="491:47" pos:end="491:52"><expr pos:start="491:47" pos:end="491:52"><literal type="string" pos:start="491:47" pos:end="491:52">"mode"</literal></expr></argument>, <argument pos:start="491:55" pos:end="491:55"><expr pos:start="491:55" pos:end="491:55"><name pos:start="491:55" pos:end="491:55">p</name></expr></argument>)</argument_list></call> <operator pos:start="491:58" pos:end="491:58">&gt;</operator> <literal type="number" pos:start="491:60" pos:end="491:60">0</literal></expr>)</condition> <block pos:start="491:63" pos:end="495:9">{<block_content pos:start="493:13" pos:end="493:44">

	    <expr_stmt pos:start="493:13" pos:end="493:44"><expr pos:start="493:13" pos:end="493:43"><name pos:start="493:13" pos:end="493:20">vde_mode</name> <operator pos:start="493:22" pos:end="493:22">=</operator> <call pos:start="493:24" pos:end="493:43"><name pos:start="493:24" pos:end="493:29">strtol</name><argument_list pos:start="493:30" pos:end="493:43">(<argument pos:start="493:31" pos:end="493:33"><expr pos:start="493:31" pos:end="493:33"><name pos:start="493:31" pos:end="493:33">buf</name></expr></argument>, <argument pos:start="493:36" pos:end="493:39"><expr pos:start="493:36" pos:end="493:39"><name pos:start="493:36" pos:end="493:39">NULL</name></expr></argument>, <argument pos:start="493:42" pos:end="493:42"><expr pos:start="493:42" pos:end="493:42"><literal type="number" pos:start="493:42" pos:end="493:42">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="495:11" pos:end="499:9">else <block pos:start="495:16" pos:end="499:9">{<block_content pos:start="497:13" pos:end="497:28">

	    <expr_stmt pos:start="497:13" pos:end="497:28"><expr pos:start="497:13" pos:end="497:27"><name pos:start="497:13" pos:end="497:20">vde_mode</name> <operator pos:start="497:22" pos:end="497:22">=</operator> <literal type="number" pos:start="497:24" pos:end="497:27">0700</literal></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	<expr_stmt pos:start="501:9" pos:end="501:88"><expr pos:start="501:9" pos:end="501:87"><name pos:start="501:9" pos:end="501:11">ret</name> <operator pos:start="501:13" pos:end="501:13">=</operator> <call pos:start="501:15" pos:end="501:87"><name pos:start="501:15" pos:end="501:26">net_vde_init</name><argument_list pos:start="501:27" pos:end="501:87">(<argument pos:start="501:28" pos:end="501:31"><expr pos:start="501:28" pos:end="501:31"><name pos:start="501:28" pos:end="501:31">vlan</name></expr></argument>, <argument pos:start="501:34" pos:end="501:39"><expr pos:start="501:34" pos:end="501:39"><name pos:start="501:34" pos:end="501:39">device</name></expr></argument>, <argument pos:start="501:42" pos:end="501:45"><expr pos:start="501:42" pos:end="501:45"><name pos:start="501:42" pos:end="501:45">name</name></expr></argument>, <argument pos:start="501:48" pos:end="501:55"><expr pos:start="501:48" pos:end="501:55"><name pos:start="501:48" pos:end="501:55">vde_sock</name></expr></argument>, <argument pos:start="501:58" pos:end="501:65"><expr pos:start="501:58" pos:end="501:65"><name pos:start="501:58" pos:end="501:65">vde_port</name></expr></argument>, <argument pos:start="501:68" pos:end="501:76"><expr pos:start="501:68" pos:end="501:76"><name pos:start="501:68" pos:end="501:76">vde_group</name></expr></argument>, <argument pos:start="501:79" pos:end="501:86"><expr pos:start="501:79" pos:end="501:86"><name pos:start="501:79" pos:end="501:86">vde_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="503:7" pos:end="527:5">else

<cpp:endif pos:start="505:1" pos:end="505:6">#<cpp:directive pos:start="505:2" pos:end="505:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="507:8" pos:end="507:32">(<expr pos:start="507:9" pos:end="507:31"><operator pos:start="507:9" pos:end="507:9">!</operator><call pos:start="507:10" pos:end="507:31"><name pos:start="507:10" pos:end="507:15">strcmp</name><argument_list pos:start="507:16" pos:end="507:31">(<argument pos:start="507:17" pos:end="507:22"><expr pos:start="507:17" pos:end="507:22"><name pos:start="507:17" pos:end="507:22">device</name></expr></argument>, <argument pos:start="507:25" pos:end="507:30"><expr pos:start="507:25" pos:end="507:30"><literal type="string" pos:start="507:25" pos:end="507:30">"dump"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="507:34" pos:end="527:5">{<block_content pos:start="509:9" pos:end="525:58">

        <decl_stmt pos:start="509:9" pos:end="509:24"><decl pos:start="509:9" pos:end="509:23"><type pos:start="509:9" pos:end="509:11"><name pos:start="509:9" pos:end="509:11">int</name></type> <name pos:start="509:13" pos:end="509:15">len</name> <init pos:start="509:17" pos:end="509:23">= <expr pos:start="509:19" pos:end="509:23"><literal type="number" pos:start="509:19" pos:end="509:23">65536</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="513:9" pos:end="517:9"><if pos:start="513:9" pos:end="517:9">if <condition pos:start="513:12" pos:end="513:60">(<expr pos:start="513:13" pos:end="513:59"><call pos:start="513:13" pos:end="513:55"><name pos:start="513:13" pos:end="513:27">get_param_value</name><argument_list pos:start="513:28" pos:end="513:55">(<argument pos:start="513:29" pos:end="513:31"><expr pos:start="513:29" pos:end="513:31"><name pos:start="513:29" pos:end="513:31">buf</name></expr></argument>, <argument pos:start="513:34" pos:end="513:44"><expr pos:start="513:34" pos:end="513:44"><sizeof pos:start="513:34" pos:end="513:44">sizeof<argument_list pos:start="513:40" pos:end="513:44">(<argument pos:start="513:41" pos:end="513:43"><expr pos:start="513:41" pos:end="513:43"><name pos:start="513:41" pos:end="513:43">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="513:47" pos:end="513:51"><expr pos:start="513:47" pos:end="513:51"><literal type="string" pos:start="513:47" pos:end="513:51">"len"</literal></expr></argument>, <argument pos:start="513:54" pos:end="513:54"><expr pos:start="513:54" pos:end="513:54"><name pos:start="513:54" pos:end="513:54">p</name></expr></argument>)</argument_list></call> <operator pos:start="513:57" pos:end="513:57">&gt;</operator> <literal type="number" pos:start="513:59" pos:end="513:59">0</literal></expr>)</condition> <block pos:start="513:62" pos:end="517:9">{<block_content pos:start="515:13" pos:end="515:39">

            <expr_stmt pos:start="515:13" pos:end="515:39"><expr pos:start="515:13" pos:end="515:38"><name pos:start="515:13" pos:end="515:15">len</name> <operator pos:start="515:17" pos:end="515:17">=</operator> <call pos:start="515:19" pos:end="515:38"><name pos:start="515:19" pos:end="515:24">strtol</name><argument_list pos:start="515:25" pos:end="515:38">(<argument pos:start="515:26" pos:end="515:28"><expr pos:start="515:26" pos:end="515:28"><name pos:start="515:26" pos:end="515:28">buf</name></expr></argument>, <argument pos:start="515:31" pos:end="515:34"><expr pos:start="515:31" pos:end="515:34"><name pos:start="515:31" pos:end="515:34">NULL</name></expr></argument>, <argument pos:start="515:37" pos:end="515:37"><expr pos:start="515:37" pos:end="515:37"><literal type="number" pos:start="515:37" pos:end="515:37">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="519:9" pos:end="523:9"><if pos:start="519:9" pos:end="523:9">if <condition pos:start="519:12" pos:end="519:58">(<expr pos:start="519:13" pos:end="519:57"><operator pos:start="519:13" pos:end="519:13">!</operator><call pos:start="519:14" pos:end="519:57"><name pos:start="519:14" pos:end="519:28">get_param_value</name><argument_list pos:start="519:29" pos:end="519:57">(<argument pos:start="519:30" pos:end="519:32"><expr pos:start="519:30" pos:end="519:32"><name pos:start="519:30" pos:end="519:32">buf</name></expr></argument>, <argument pos:start="519:35" pos:end="519:45"><expr pos:start="519:35" pos:end="519:45"><sizeof pos:start="519:35" pos:end="519:45">sizeof<argument_list pos:start="519:41" pos:end="519:45">(<argument pos:start="519:42" pos:end="519:44"><expr pos:start="519:42" pos:end="519:44"><name pos:start="519:42" pos:end="519:44">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="519:48" pos:end="519:53"><expr pos:start="519:48" pos:end="519:53"><literal type="string" pos:start="519:48" pos:end="519:53">"file"</literal></expr></argument>, <argument pos:start="519:56" pos:end="519:56"><expr pos:start="519:56" pos:end="519:56"><name pos:start="519:56" pos:end="519:56">p</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="519:60" pos:end="523:9">{<block_content pos:start="521:13" pos:end="521:68">

            <expr_stmt pos:start="521:13" pos:end="521:68"><expr pos:start="521:13" pos:end="521:67"><call pos:start="521:13" pos:end="521:67"><name pos:start="521:13" pos:end="521:20">snprintf</name><argument_list pos:start="521:21" pos:end="521:67">(<argument pos:start="521:22" pos:end="521:24"><expr pos:start="521:22" pos:end="521:24"><name pos:start="521:22" pos:end="521:24">buf</name></expr></argument>, <argument pos:start="521:27" pos:end="521:37"><expr pos:start="521:27" pos:end="521:37"><sizeof pos:start="521:27" pos:end="521:37">sizeof<argument_list pos:start="521:33" pos:end="521:37">(<argument pos:start="521:34" pos:end="521:36"><expr pos:start="521:34" pos:end="521:36"><name pos:start="521:34" pos:end="521:36">buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="521:40" pos:end="521:57"><expr pos:start="521:40" pos:end="521:57"><literal type="string" pos:start="521:40" pos:end="521:57">"qemu-vlan%d.pcap"</literal></expr></argument>, <argument pos:start="521:60" pos:end="521:66"><expr pos:start="521:60" pos:end="521:66"><name pos:start="521:60" pos:end="521:66">vlan_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="525:9" pos:end="525:58"><expr pos:start="525:9" pos:end="525:57"><name pos:start="525:9" pos:end="525:11">ret</name> <operator pos:start="525:13" pos:end="525:13">=</operator> <call pos:start="525:15" pos:end="525:57"><name pos:start="525:15" pos:end="525:27">net_dump_init</name><argument_list pos:start="525:28" pos:end="525:57">(<argument pos:start="525:29" pos:end="525:32"><expr pos:start="525:29" pos:end="525:32"><name pos:start="525:29" pos:end="525:32">vlan</name></expr></argument>, <argument pos:start="525:35" pos:end="525:40"><expr pos:start="525:35" pos:end="525:40"><name pos:start="525:35" pos:end="525:40">device</name></expr></argument>, <argument pos:start="525:43" pos:end="525:46"><expr pos:start="525:43" pos:end="525:46"><name pos:start="525:43" pos:end="525:46">name</name></expr></argument>, <argument pos:start="525:49" pos:end="525:51"><expr pos:start="525:49" pos:end="525:51"><name pos:start="525:49" pos:end="525:51">buf</name></expr></argument>, <argument pos:start="525:54" pos:end="525:56"><expr pos:start="525:54" pos:end="525:56"><name pos:start="525:54" pos:end="525:56">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="527:7" pos:end="535:5">else <block pos:start="527:12" pos:end="535:5">{<block_content pos:start="529:9" pos:end="533:17">

        <expr_stmt pos:start="529:9" pos:end="529:64"><expr pos:start="529:9" pos:end="529:63"><call pos:start="529:9" pos:end="529:63"><name pos:start="529:9" pos:end="529:15">fprintf</name><argument_list pos:start="529:16" pos:end="529:63">(<argument pos:start="529:17" pos:end="529:22"><expr pos:start="529:17" pos:end="529:22"><name pos:start="529:17" pos:end="529:22">stderr</name></expr></argument>, <argument pos:start="529:25" pos:end="529:54"><expr pos:start="529:25" pos:end="529:54"><literal type="string" pos:start="529:25" pos:end="529:54">"Unknown network device: %s\n"</literal></expr></argument>, <argument pos:start="529:57" pos:end="529:62"><expr pos:start="529:57" pos:end="529:62"><name pos:start="529:57" pos:end="529:62">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="531:9" pos:end="531:17"><expr pos:start="531:9" pos:end="531:16"><name pos:start="531:9" pos:end="531:11">ret</name> <operator pos:start="531:13" pos:end="531:13">=</operator> <operator pos:start="531:15" pos:end="531:15">-</operator><literal type="number" pos:start="531:16" pos:end="531:16">1</literal></expr>;</expr_stmt>

        <goto pos:start="533:9" pos:end="533:17">goto <name pos:start="533:14" pos:end="533:16">out</name>;</goto>

    </block_content>}</block></else></if_stmt>

    <if_stmt pos:start="537:5" pos:end="541:5"><if pos:start="537:5" pos:end="541:5">if <condition pos:start="537:8" pos:end="537:16">(<expr pos:start="537:9" pos:end="537:15"><name pos:start="537:9" pos:end="537:11">ret</name> <operator pos:start="537:13" pos:end="537:13">&lt;</operator> <literal type="number" pos:start="537:15" pos:end="537:15">0</literal></expr>)</condition> <block pos:start="537:18" pos:end="541:5">{<block_content pos:start="539:9" pos:end="539:70">

        <expr_stmt pos:start="539:9" pos:end="539:70"><expr pos:start="539:9" pos:end="539:69"><call pos:start="539:9" pos:end="539:69"><name pos:start="539:9" pos:end="539:15">fprintf</name><argument_list pos:start="539:16" pos:end="539:69">(<argument pos:start="539:17" pos:end="539:22"><expr pos:start="539:17" pos:end="539:22"><name pos:start="539:17" pos:end="539:22">stderr</name></expr></argument>, <argument pos:start="539:25" pos:end="539:60"><expr pos:start="539:25" pos:end="539:60"><literal type="string" pos:start="539:25" pos:end="539:60">"Could not initialize device '%s'\n"</literal></expr></argument>, <argument pos:start="539:63" pos:end="539:68"><expr pos:start="539:63" pos:end="539:68"><name pos:start="539:63" pos:end="539:68">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="543:1" pos:end="543:4"><name pos:start="543:1" pos:end="543:3">out</name>:</label>

    <if_stmt pos:start="545:5" pos:end="547:19"><if pos:start="545:5" pos:end="547:19">if <condition pos:start="545:8" pos:end="545:13">(<expr pos:start="545:9" pos:end="545:12"><name pos:start="545:9" pos:end="545:12">name</name></expr>)</condition><block type="pseudo" pos:start="547:9" pos:end="547:19"><block_content pos:start="547:9" pos:end="547:19">

        <expr_stmt pos:start="547:9" pos:end="547:19"><expr pos:start="547:9" pos:end="547:18"><call pos:start="547:9" pos:end="547:18"><name pos:start="547:9" pos:end="547:12">free</name><argument_list pos:start="547:13" pos:end="547:18">(<argument pos:start="547:14" pos:end="547:17"><expr pos:start="547:14" pos:end="547:17"><name pos:start="547:14" pos:end="547:17">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return pos:start="549:5" pos:end="549:15">return <expr pos:start="549:12" pos:end="549:14"><name pos:start="549:12" pos:end="549:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
