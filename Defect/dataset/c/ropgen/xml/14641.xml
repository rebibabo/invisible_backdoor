<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/14641.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:34">ff_h264_decode_ref_pic_marking</name><parameter_list pos:start="1:35" pos:end="1:69">(<parameter pos:start="1:36" pos:end="1:49"><decl pos:start="1:36" pos:end="1:49"><type pos:start="1:36" pos:end="1:49"><name pos:start="1:36" pos:end="1:46">H264Context</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:49">h</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:64">GetBitContext</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">gb</name></decl></parameter>)</parameter_list><block pos:start="1:70" pos:end="97:1">{<block_content pos:start="3:5" pos:end="95:13">

    <decl_stmt pos:start="3:5" pos:end="3:37"><decl pos:start="3:5" pos:end="3:36"><type pos:start="3:5" pos:end="3:26"><name pos:start="3:5" pos:end="3:18">MpegEncContext</name> <modifier pos:start="3:20" pos:end="3:20">*</modifier> <specifier pos:start="3:22" pos:end="3:26">const</specifier></type> <name pos:start="3:28" pos:end="3:28">s</name> <init pos:start="3:30" pos:end="3:36">= <expr pos:start="3:32" pos:end="3:36"><operator pos:start="3:32" pos:end="3:32">&amp;</operator><name pos:start="3:33" pos:end="3:36"><name pos:start="3:33" pos:end="3:33">h</name><operator pos:start="3:34" pos:end="3:35">-&gt;</operator><name pos:start="3:36" pos:end="3:36">s</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:10"><decl pos:start="5:5" pos:end="5:9"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:21"><expr pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:17"><name pos:start="9:5" pos:end="9:5">h</name><operator pos:start="9:6" pos:end="9:7">-&gt;</operator><name pos:start="9:8" pos:end="9:17">mmco_index</name></name><operator pos:start="9:18" pos:end="9:18">=</operator> <literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="11:5" pos:end="91:5"><if pos:start="11:5" pos:end="25:5">if<condition pos:start="11:7" pos:end="11:41">(<expr pos:start="11:8" pos:end="11:40"><name pos:start="11:8" pos:end="11:23"><name pos:start="11:8" pos:end="11:8">h</name><operator pos:start="11:9" pos:end="11:10">-&gt;</operator><name pos:start="11:11" pos:end="11:23">nal_unit_type</name></name> <operator pos:start="11:25" pos:end="11:26">==</operator> <name pos:start="11:28" pos:end="11:40">NAL_IDR_SLICE</name></expr>)</condition><block pos:start="11:42" pos:end="25:5">{<block_content pos:start="13:9" pos:end="23:9"> <comment type="line" pos:start="11:44" pos:end="11:57">//FIXME fields</comment>

        <expr_stmt pos:start="13:9" pos:end="13:41"><expr pos:start="13:9" pos:end="13:40"><name pos:start="13:9" pos:end="13:22"><name pos:start="13:9" pos:end="13:9">s</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:22">broken_link</name></name><operator pos:start="13:23" pos:end="13:23">=</operator> <call pos:start="13:25" pos:end="13:37"><name pos:start="13:25" pos:end="13:33">get_bits1</name><argument_list pos:start="13:34" pos:end="13:37">(<argument pos:start="13:35" pos:end="13:36"><expr pos:start="13:35" pos:end="13:36"><name pos:start="13:35" pos:end="13:36">gb</name></expr></argument>)</argument_list></call> <operator pos:start="13:39" pos:end="13:39">-</operator><literal type="number" pos:start="13:40" pos:end="13:40">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="15:9" pos:end="23:9"><if pos:start="15:9" pos:end="23:9">if<condition pos:start="15:11" pos:end="15:25">(<expr pos:start="15:12" pos:end="15:24"><call pos:start="15:12" pos:end="15:24"><name pos:start="15:12" pos:end="15:20">get_bits1</name><argument_list pos:start="15:21" pos:end="15:24">(<argument pos:start="15:22" pos:end="15:23"><expr pos:start="15:22" pos:end="15:23"><name pos:start="15:22" pos:end="15:23">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="15:26" pos:end="23:9">{<block_content pos:start="17:13" pos:end="21:29">

            <expr_stmt pos:start="17:13" pos:end="17:41"><expr pos:start="17:13" pos:end="17:40"><name pos:start="17:13" pos:end="17:22"><name pos:start="17:13" pos:end="17:13">h</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:19">mmco</name><index pos:start="17:20" pos:end="17:22">[<expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr>]</index></name><operator pos:start="17:23" pos:end="17:23">.</operator><name pos:start="17:24" pos:end="17:29">opcode</name><operator pos:start="17:30" pos:end="17:30">=</operator> <name pos:start="17:32" pos:end="17:40">MMCO_LONG</name></expr>;</expr_stmt>

            <expr_stmt pos:start="19:13" pos:end="19:35"><expr pos:start="19:13" pos:end="19:34"><name pos:start="19:13" pos:end="19:22"><name pos:start="19:13" pos:end="19:13">h</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:19">mmco</name><index pos:start="19:20" pos:end="19:22">[<expr pos:start="19:21" pos:end="19:21"><literal type="number" pos:start="19:21" pos:end="19:21">0</literal></expr>]</index></name><operator pos:start="19:23" pos:end="19:23">.</operator><name pos:start="19:24" pos:end="19:31">long_arg</name><operator pos:start="19:32" pos:end="19:32">=</operator> <literal type="number" pos:start="19:34" pos:end="19:34">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="21:13" pos:end="21:29"><expr pos:start="21:13" pos:end="21:28"><name pos:start="21:13" pos:end="21:25"><name pos:start="21:13" pos:end="21:13">h</name><operator pos:start="21:14" pos:end="21:15">-&gt;</operator><name pos:start="21:16" pos:end="21:25">mmco_index</name></name><operator pos:start="21:26" pos:end="21:26">=</operator> <literal type="number" pos:start="21:28" pos:end="21:28">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if><else pos:start="25:6" pos:end="91:5">else<block pos:start="25:10" pos:end="91:5">{<block_content pos:start="27:9" pos:end="89:9">

        <if_stmt pos:start="27:9" pos:end="89:9"><if pos:start="27:9" pos:end="85:9">if<condition pos:start="27:11" pos:end="27:25">(<expr pos:start="27:12" pos:end="27:24"><call pos:start="27:12" pos:end="27:24"><name pos:start="27:12" pos:end="27:20">get_bits1</name><argument_list pos:start="27:21" pos:end="27:24">(<argument pos:start="27:22" pos:end="27:23"><expr pos:start="27:22" pos:end="27:23"><name pos:start="27:22" pos:end="27:23">gb</name></expr></argument>)</argument_list></call></expr>)</condition><block pos:start="27:26" pos:end="85:9">{<block_content pos:start="29:13" pos:end="83:29"> <comment type="line" pos:start="27:28" pos:end="27:64">// adaptive_ref_pic_marking_mode_flag</comment>

            <for pos:start="29:13" pos:end="81:13">for<control pos:start="29:16" pos:end="29:44">(<init pos:start="29:17" pos:end="29:21"><expr pos:start="29:17" pos:end="29:20"><name pos:start="29:17" pos:end="29:17">i</name><operator pos:start="29:18" pos:end="29:18">=</operator> <literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</init> <condition pos:start="29:23" pos:end="29:39"><expr pos:start="29:23" pos:end="29:38"><name pos:start="29:23" pos:end="29:23">i</name><operator pos:start="29:24" pos:end="29:24">&lt;</operator><name pos:start="29:25" pos:end="29:38">MAX_MMCO_COUNT</name></expr>;</condition> <incr pos:start="29:41" pos:end="29:43"><expr pos:start="29:41" pos:end="29:43"><name pos:start="29:41" pos:end="29:41">i</name><operator pos:start="29:42" pos:end="29:43">++</operator></expr></incr>)</control> <block pos:start="29:46" pos:end="81:13">{<block_content pos:start="31:17" pos:end="79:26">

                <decl_stmt pos:start="31:17" pos:end="31:56"><decl pos:start="31:17" pos:end="31:55"><type pos:start="31:17" pos:end="31:26"><name pos:start="31:17" pos:end="31:26">MMCOOpcode</name></type> <name pos:start="31:28" pos:end="31:33">opcode</name><init pos:start="31:34" pos:end="31:55">= <expr pos:start="31:36" pos:end="31:55"><call pos:start="31:36" pos:end="31:55"><name pos:start="31:36" pos:end="31:51">get_ue_golomb_31</name><argument_list pos:start="31:52" pos:end="31:55">(<argument pos:start="31:53" pos:end="31:54"><expr pos:start="31:53" pos:end="31:54"><name pos:start="31:53" pos:end="31:54">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



                <expr_stmt pos:start="35:17" pos:end="35:42"><expr pos:start="35:17" pos:end="35:41"><name pos:start="35:17" pos:end="35:26"><name pos:start="35:17" pos:end="35:17">h</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:23">mmco</name><index pos:start="35:24" pos:end="35:26">[<expr pos:start="35:25" pos:end="35:25"><name pos:start="35:25" pos:end="35:25">i</name></expr>]</index></name><operator pos:start="35:27" pos:end="35:27">.</operator><name pos:start="35:28" pos:end="35:33">opcode</name><operator pos:start="35:34" pos:end="35:34">=</operator> <name pos:start="35:36" pos:end="35:41">opcode</name></expr>;</expr_stmt>

                <if_stmt pos:start="37:17" pos:end="49:17"><if pos:start="37:17" pos:end="49:17">if<condition pos:start="37:19" pos:end="37:72">(<expr pos:start="37:20" pos:end="37:71"><name pos:start="37:20" pos:end="37:25">opcode</name><operator pos:start="37:26" pos:end="37:27">==</operator><name pos:start="37:28" pos:end="37:44">MMCO_SHORT2UNUSED</name> <operator pos:start="37:46" pos:end="37:47">||</operator> <name pos:start="37:49" pos:end="37:54">opcode</name><operator pos:start="37:55" pos:end="37:56">==</operator><name pos:start="37:57" pos:end="37:71">MMCO_SHORT2LONG</name></expr>)</condition><block pos:start="37:73" pos:end="49:17">{<block_content pos:start="39:21" pos:end="39:111">

                    <expr_stmt pos:start="39:21" pos:end="39:111"><expr pos:start="39:21" pos:end="39:110"><name pos:start="39:21" pos:end="39:30"><name pos:start="39:21" pos:end="39:21">h</name><operator pos:start="39:22" pos:end="39:23">-&gt;</operator><name pos:start="39:24" pos:end="39:27">mmco</name><index pos:start="39:28" pos:end="39:30">[<expr pos:start="39:29" pos:end="39:29"><name pos:start="39:29" pos:end="39:29">i</name></expr>]</index></name><operator pos:start="39:31" pos:end="39:31">.</operator><name pos:start="39:32" pos:end="39:44">short_pic_num</name><operator pos:start="39:45" pos:end="39:45">=</operator> <operator pos:start="39:47" pos:end="39:47">(</operator><name pos:start="39:48" pos:end="39:62"><name pos:start="39:48" pos:end="39:48">h</name><operator pos:start="39:49" pos:end="39:50">-&gt;</operator><name pos:start="39:51" pos:end="39:62">curr_pic_num</name></name> <operator pos:start="39:64" pos:end="39:64">-</operator> <call pos:start="39:66" pos:end="39:82"><name pos:start="39:66" pos:end="39:78">get_ue_golomb</name><argument_list pos:start="39:79" pos:end="39:82">(<argument pos:start="39:80" pos:end="39:81"><expr pos:start="39:80" pos:end="39:81"><name pos:start="39:80" pos:end="39:81">gb</name></expr></argument>)</argument_list></call> <operator pos:start="39:84" pos:end="39:84">-</operator> <literal type="number" pos:start="39:86" pos:end="39:86">1</literal><operator pos:start="39:87" pos:end="39:87">)</operator> <operator pos:start="39:89" pos:end="39:89">&amp;</operator> <operator pos:start="39:91" pos:end="39:91">(</operator><name pos:start="39:92" pos:end="39:105"><name pos:start="39:92" pos:end="39:92">h</name><operator pos:start="39:93" pos:end="39:94">-&gt;</operator><name pos:start="39:95" pos:end="39:105">max_pic_num</name></name> <operator pos:start="39:107" pos:end="39:107">-</operator> <literal type="number" pos:start="39:109" pos:end="39:109">1</literal><operator pos:start="39:110" pos:end="39:110">)</operator></expr>;</expr_stmt>

<comment type="block" pos:start="41:1" pos:end="47:23">/*                    if(h-&gt;mmco[i].short_pic_num &gt;= h-&gt;short_ref_count || h-&gt;short_ref[ h-&gt;mmco[i].short_pic_num ] == NULL){

                        av_log(s-&gt;avctx, AV_LOG_ERROR, "illegal short ref in memory management control operation %d\n", mmco);

                        return -1;

                    }*/</comment>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="51:17" pos:end="65:17"><if pos:start="51:17" pos:end="65:17">if<condition pos:start="51:19" pos:end="51:121">(<expr pos:start="51:20" pos:end="51:120"><name pos:start="51:20" pos:end="51:25">opcode</name><operator pos:start="51:26" pos:end="51:27">==</operator><name pos:start="51:28" pos:end="51:42">MMCO_SHORT2LONG</name> <operator pos:start="51:44" pos:end="51:45">||</operator> <name pos:start="51:47" pos:end="51:52">opcode</name><operator pos:start="51:53" pos:end="51:54">==</operator><name pos:start="51:55" pos:end="51:70">MMCO_LONG2UNUSED</name> <operator pos:start="51:72" pos:end="51:73">||</operator> <name pos:start="51:75" pos:end="51:80">opcode</name><operator pos:start="51:81" pos:end="51:82">==</operator><name pos:start="51:83" pos:end="51:91">MMCO_LONG</name> <operator pos:start="51:93" pos:end="51:94">||</operator> <name pos:start="51:96" pos:end="51:101">opcode</name><operator pos:start="51:102" pos:end="51:103">==</operator><name pos:start="51:104" pos:end="51:120">MMCO_SET_MAX_LONG</name></expr>)</condition><block pos:start="51:122" pos:end="65:17">{<block_content pos:start="53:21" pos:end="63:50">

                    <decl_stmt pos:start="53:21" pos:end="53:64"><decl pos:start="53:21" pos:end="53:63"><type pos:start="53:21" pos:end="53:32"><name pos:start="53:21" pos:end="53:28">unsigned</name> <name pos:start="53:30" pos:end="53:32">int</name></type> <name pos:start="53:34" pos:end="53:41">long_arg</name><init pos:start="53:42" pos:end="53:63">= <expr pos:start="53:44" pos:end="53:63"><call pos:start="53:44" pos:end="53:63"><name pos:start="53:44" pos:end="53:59">get_ue_golomb_31</name><argument_list pos:start="53:60" pos:end="53:63">(<argument pos:start="53:61" pos:end="53:62"><expr pos:start="53:61" pos:end="53:62"><name pos:start="53:61" pos:end="53:62">gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt pos:start="55:21" pos:end="61:21"><if pos:start="55:21" pos:end="61:21">if<condition pos:start="55:23" pos:end="55:108">(<expr pos:start="55:24" pos:end="55:107"><name pos:start="55:24" pos:end="55:31">long_arg</name> <operator pos:start="55:33" pos:end="55:34">&gt;=</operator> <literal type="number" pos:start="55:36" pos:end="55:37">32</literal> <operator pos:start="55:39" pos:end="55:40">||</operator> <operator pos:start="55:42" pos:end="55:42">(</operator><name pos:start="55:43" pos:end="55:50">long_arg</name> <operator pos:start="55:52" pos:end="55:53">&gt;=</operator> <literal type="number" pos:start="55:55" pos:end="55:56">16</literal> <operator pos:start="55:58" pos:end="55:59">&amp;&amp;</operator> <operator pos:start="55:61" pos:end="55:61">!</operator><operator pos:start="55:62" pos:end="55:62">(</operator><name pos:start="55:63" pos:end="55:68">opcode</name> <operator pos:start="55:70" pos:end="55:71">==</operator> <name pos:start="55:73" pos:end="55:88">MMCO_LONG2UNUSED</name> <operator pos:start="55:90" pos:end="55:91">&amp;&amp;</operator> <name pos:start="55:93" pos:end="55:105">FIELD_PICTURE</name><operator pos:start="55:106" pos:end="55:106">)</operator><operator pos:start="55:107" pos:end="55:107">)</operator></expr>)</condition><block pos:start="55:109" pos:end="61:21">{<block_content pos:start="57:25" pos:end="59:34">

                        <expr_stmt pos:start="57:25" pos:end="57:129"><expr pos:start="57:25" pos:end="57:128"><call pos:start="57:25" pos:end="57:128"><name pos:start="57:25" pos:end="57:30">av_log</name><argument_list pos:start="57:31" pos:end="57:128">(<argument pos:start="57:32" pos:end="57:41"><expr pos:start="57:32" pos:end="57:41"><name pos:start="57:32" pos:end="57:41"><name pos:start="57:32" pos:end="57:32">h</name><operator pos:start="57:33" pos:end="57:34">-&gt;</operator><name pos:start="57:35" pos:end="57:35">s</name><operator pos:start="57:36" pos:end="57:36">.</operator><name pos:start="57:37" pos:end="57:41">avctx</name></name></expr></argument>, <argument pos:start="57:44" pos:end="57:55"><expr pos:start="57:44" pos:end="57:55"><name pos:start="57:44" pos:end="57:55">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:58" pos:end="57:119"><expr pos:start="57:58" pos:end="57:119"><literal type="string" pos:start="57:58" pos:end="57:119">"illegal long ref in memory management control operation %d\n"</literal></expr></argument>, <argument pos:start="57:122" pos:end="57:127"><expr pos:start="57:122" pos:end="57:127"><name pos:start="57:122" pos:end="57:127">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <return pos:start="59:25" pos:end="59:34">return <expr pos:start="59:32" pos:end="59:33"><operator pos:start="59:32" pos:end="59:32">-</operator><literal type="number" pos:start="59:33" pos:end="59:33">1</literal></expr>;</return>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="63:21" pos:end="63:50"><expr pos:start="63:21" pos:end="63:49"><name pos:start="63:21" pos:end="63:30"><name pos:start="63:21" pos:end="63:21">h</name><operator pos:start="63:22" pos:end="63:23">-&gt;</operator><name pos:start="63:24" pos:end="63:27">mmco</name><index pos:start="63:28" pos:end="63:30">[<expr pos:start="63:29" pos:end="63:29"><name pos:start="63:29" pos:end="63:29">i</name></expr>]</index></name><operator pos:start="63:31" pos:end="63:31">.</operator><name pos:start="63:32" pos:end="63:39">long_arg</name><operator pos:start="63:40" pos:end="63:40">=</operator> <name pos:start="63:42" pos:end="63:49">long_arg</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="69:17" pos:end="75:17"><if pos:start="69:17" pos:end="75:17">if<condition pos:start="69:19" pos:end="69:48">(<expr pos:start="69:20" pos:end="69:47"><name pos:start="69:20" pos:end="69:25">opcode</name> <operator pos:start="69:27" pos:end="69:27">&gt;</operator> <operator pos:start="69:29" pos:end="69:29">(</operator><name pos:start="69:30" pos:end="69:37">unsigned</name><operator pos:start="69:38" pos:end="69:38">)</operator><name pos:start="69:39" pos:end="69:47">MMCO_LONG</name></expr>)</condition><block pos:start="69:49" pos:end="75:17">{<block_content pos:start="71:21" pos:end="73:30">

                    <expr_stmt pos:start="71:21" pos:end="71:113"><expr pos:start="71:21" pos:end="71:112"><call pos:start="71:21" pos:end="71:112"><name pos:start="71:21" pos:end="71:26">av_log</name><argument_list pos:start="71:27" pos:end="71:112">(<argument pos:start="71:28" pos:end="71:37"><expr pos:start="71:28" pos:end="71:37"><name pos:start="71:28" pos:end="71:37"><name pos:start="71:28" pos:end="71:28">h</name><operator pos:start="71:29" pos:end="71:30">-&gt;</operator><name pos:start="71:31" pos:end="71:31">s</name><operator pos:start="71:32" pos:end="71:32">.</operator><name pos:start="71:33" pos:end="71:37">avctx</name></name></expr></argument>, <argument pos:start="71:40" pos:end="71:51"><expr pos:start="71:40" pos:end="71:51"><name pos:start="71:40" pos:end="71:51">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:54" pos:end="71:103"><expr pos:start="71:54" pos:end="71:103"><literal type="string" pos:start="71:54" pos:end="71:103">"illegal memory management control operation %d\n"</literal></expr></argument>, <argument pos:start="71:106" pos:end="71:111"><expr pos:start="71:106" pos:end="71:111"><name pos:start="71:106" pos:end="71:111">opcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <return pos:start="73:21" pos:end="73:30">return <expr pos:start="73:28" pos:end="73:29"><operator pos:start="73:28" pos:end="73:28">-</operator><literal type="number" pos:start="73:29" pos:end="73:29">1</literal></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <if_stmt pos:start="77:17" pos:end="79:26"><if pos:start="77:17" pos:end="79:26">if<condition pos:start="77:19" pos:end="77:38">(<expr pos:start="77:20" pos:end="77:37"><name pos:start="77:20" pos:end="77:25">opcode</name> <operator pos:start="77:27" pos:end="77:28">==</operator> <name pos:start="77:30" pos:end="77:37">MMCO_END</name></expr>)</condition><block type="pseudo" pos:start="79:21" pos:end="79:26"><block_content pos:start="79:21" pos:end="79:26">

                    <break pos:start="79:21" pos:end="79:26">break;</break></block_content></block></if></if_stmt>

            </block_content>}</block></for>

            <expr_stmt pos:start="83:13" pos:end="83:29"><expr pos:start="83:13" pos:end="83:28"><name pos:start="83:13" pos:end="83:25"><name pos:start="83:13" pos:end="83:13">h</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:25">mmco_index</name></name><operator pos:start="83:26" pos:end="83:26">=</operator> <name pos:start="83:28" pos:end="83:28">i</name></expr>;</expr_stmt>

        </block_content>}</block></if><else pos:start="85:10" pos:end="89:9">else<block pos:start="85:14" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:48">

            <expr_stmt pos:start="87:13" pos:end="87:48"><expr pos:start="87:13" pos:end="87:47"><call pos:start="87:13" pos:end="87:47"><name pos:start="87:13" pos:end="87:44">ff_generate_sliding_window_mmcos</name><argument_list pos:start="87:45" pos:end="87:47">(<argument pos:start="87:46" pos:end="87:46"><expr pos:start="87:46" pos:end="87:46"><name pos:start="87:46" pos:end="87:46">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>



    <return pos:start="95:5" pos:end="95:13">return <expr pos:start="95:12" pos:end="95:12"><literal type="number" pos:start="95:12" pos:end="95:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
