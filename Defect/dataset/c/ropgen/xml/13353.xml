<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/13353.c" pos:tabs="8"><function pos:start="1:1" pos:end="91:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:44">bdrv_aligned_pwritev</name><parameter_list pos:start="1:45" pos:end="3:70">(<parameter pos:start="1:46" pos:end="1:65"><decl pos:start="1:46" pos:end="1:65"><type pos:start="1:46" pos:end="1:65"><name pos:start="1:46" pos:end="1:61">BlockDriverState</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:65">bs</name></decl></parameter>,

    <parameter pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:18"><type pos:start="3:5" pos:end="3:18"><name pos:start="3:5" pos:end="3:11">int64_t</name></type> <name pos:start="3:13" pos:end="3:18">offset</name></decl></parameter>, <parameter pos:start="3:21" pos:end="3:38"><decl pos:start="3:21" pos:end="3:38"><type pos:start="3:21" pos:end="3:38"><name pos:start="3:21" pos:end="3:28">unsigned</name> <name pos:start="3:30" pos:end="3:32">int</name></type> <name pos:start="3:34" pos:end="3:38">bytes</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:58"><decl pos:start="3:41" pos:end="3:58"><type pos:start="3:41" pos:end="3:58"><name pos:start="3:41" pos:end="3:52">QEMUIOVector</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:58">qiov</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:69"><decl pos:start="3:61" pos:end="3:69"><type pos:start="3:61" pos:end="3:69"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:69">flags</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="91:1">{<block_content pos:start="7:5" pos:end="89:15">

    <decl_stmt pos:start="7:5" pos:end="7:31"><decl pos:start="7:5" pos:end="7:30"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">BlockDriver</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:20">drv</name> <init pos:start="7:22" pos:end="7:30">= <expr pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:30"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:30">drv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22">BdrvTrackedRequest</name></type> <name pos:start="9:24" pos:end="9:26">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:11">int64_t</name></type> <name pos:start="15:13" pos:end="15:22">sector_num</name> <init pos:start="15:24" pos:end="15:51">= <expr pos:start="15:26" pos:end="15:51"><name pos:start="15:26" pos:end="15:31">offset</name> <operator pos:start="15:33" pos:end="15:34">&gt;&gt;</operator> <name pos:start="15:36" pos:end="15:51">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:56"><decl pos:start="17:5" pos:end="17:55"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:27">nb_sectors</name> <init pos:start="17:29" pos:end="17:55">= <expr pos:start="17:31" pos:end="17:55"><name pos:start="17:31" pos:end="17:35">bytes</name> <operator pos:start="17:37" pos:end="17:38">&gt;&gt;</operator> <name pos:start="17:40" pos:end="17:55">BDRV_SECTOR_BITS</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><call pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:10">assert</name><argument_list pos:start="21:11" pos:end="21:50">(<argument pos:start="21:12" pos:end="21:49"><expr pos:start="21:12" pos:end="21:49"><operator pos:start="21:12" pos:end="21:12">(</operator><name pos:start="21:13" pos:end="21:18">offset</name> <operator pos:start="21:20" pos:end="21:20">&amp;</operator> <operator pos:start="21:22" pos:end="21:22">(</operator><name pos:start="21:23" pos:end="21:38">BDRV_SECTOR_SIZE</name> <operator pos:start="21:40" pos:end="21:40">-</operator> <literal type="number" pos:start="21:42" pos:end="21:42">1</literal><operator pos:start="21:43" pos:end="21:43">)</operator><operator pos:start="21:44" pos:end="21:44">)</operator> <operator pos:start="21:46" pos:end="21:47">==</operator> <literal type="number" pos:start="21:49" pos:end="21:49">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:50"><expr pos:start="23:5" pos:end="23:49"><call pos:start="23:5" pos:end="23:49"><name pos:start="23:5" pos:end="23:10">assert</name><argument_list pos:start="23:11" pos:end="23:49">(<argument pos:start="23:12" pos:end="23:48"><expr pos:start="23:12" pos:end="23:48"><operator pos:start="23:12" pos:end="23:12">(</operator><name pos:start="23:13" pos:end="23:17">bytes</name> <operator pos:start="23:19" pos:end="23:19">&amp;</operator> <operator pos:start="23:21" pos:end="23:21">(</operator><name pos:start="23:22" pos:end="23:37">BDRV_SECTOR_SIZE</name> <operator pos:start="23:39" pos:end="23:39">-</operator> <literal type="number" pos:start="23:41" pos:end="23:41">1</literal><operator pos:start="23:42" pos:end="23:42">)</operator><operator pos:start="23:43" pos:end="23:43">)</operator> <operator pos:start="23:45" pos:end="23:46">==</operator> <literal type="number" pos:start="23:48" pos:end="23:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="27:5" pos:end="31:5"><if pos:start="27:5" pos:end="31:5">if <condition pos:start="27:8" pos:end="27:35">(<expr pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:34"><name pos:start="27:9" pos:end="27:10">bs</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:34">copy_on_read_in_flight</name></name></expr>)</condition> <block pos:start="27:37" pos:end="31:5">{<block_content pos:start="29:9" pos:end="29:57">

        <expr_stmt pos:start="29:9" pos:end="29:57"><expr pos:start="29:9" pos:end="29:56"><call pos:start="29:9" pos:end="29:56"><name pos:start="29:9" pos:end="29:37">wait_for_overlapping_requests</name><argument_list pos:start="29:38" pos:end="29:56">(<argument pos:start="29:39" pos:end="29:40"><expr pos:start="29:39" pos:end="29:40"><name pos:start="29:39" pos:end="29:40">bs</name></expr></argument>, <argument pos:start="29:43" pos:end="29:48"><expr pos:start="29:43" pos:end="29:48"><name pos:start="29:43" pos:end="29:48">offset</name></expr></argument>, <argument pos:start="29:51" pos:end="29:55"><expr pos:start="29:51" pos:end="29:55"><name pos:start="29:51" pos:end="29:55">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:57"><expr pos:start="35:5" pos:end="35:56"><call pos:start="35:5" pos:end="35:56"><name pos:start="35:5" pos:end="35:25">tracked_request_begin</name><argument_list pos:start="35:26" pos:end="35:56">(<argument pos:start="35:27" pos:end="35:30"><expr pos:start="35:27" pos:end="35:30"><operator pos:start="35:27" pos:end="35:27">&amp;</operator><name pos:start="35:28" pos:end="35:30">req</name></expr></argument>, <argument pos:start="35:33" pos:end="35:34"><expr pos:start="35:33" pos:end="35:34"><name pos:start="35:33" pos:end="35:34">bs</name></expr></argument>, <argument pos:start="35:37" pos:end="35:42"><expr pos:start="35:37" pos:end="35:42"><name pos:start="35:37" pos:end="35:42">offset</name></expr></argument>, <argument pos:start="35:45" pos:end="35:49"><expr pos:start="35:45" pos:end="35:49"><name pos:start="35:45" pos:end="35:49">bytes</name></expr></argument>, <argument pos:start="35:52" pos:end="35:55"><expr pos:start="35:52" pos:end="35:55"><name pos:start="35:52" pos:end="35:55">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:78"><expr pos:start="39:5" pos:end="39:77"><name pos:start="39:5" pos:end="39:7">ret</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <call pos:start="39:11" pos:end="39:77"><name pos:start="39:11" pos:end="39:42">notifier_with_return_list_notify</name><argument_list pos:start="39:43" pos:end="39:77">(<argument pos:start="39:44" pos:end="39:70"><expr pos:start="39:44" pos:end="39:70"><operator pos:start="39:44" pos:end="39:44">&amp;</operator><name pos:start="39:45" pos:end="39:70"><name pos:start="39:45" pos:end="39:46">bs</name><operator pos:start="39:47" pos:end="39:48">-&gt;</operator><name pos:start="39:49" pos:end="39:70">before_write_notifiers</name></name></expr></argument>, <argument pos:start="39:73" pos:end="39:76"><expr pos:start="39:73" pos:end="39:76"><operator pos:start="39:73" pos:end="39:73">&amp;</operator><name pos:start="39:74" pos:end="39:76">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="55:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="47:5">{<block_content>

        <comment type="block" pos:start="45:9" pos:end="45:69">/* Do nothing, write notifier decided to fail this request */</comment>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="51:5">else if <condition pos:start="47:15" pos:end="47:43">(<expr pos:start="47:16" pos:end="47:42"><name pos:start="47:16" pos:end="47:20">flags</name> <operator pos:start="47:22" pos:end="47:22">&amp;</operator> <name pos:start="47:24" pos:end="47:42">BDRV_REQ_ZERO_WRITE</name></expr>)</condition> <block pos:start="47:45" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:73">

        <expr_stmt pos:start="49:9" pos:end="49:73"><expr pos:start="49:9" pos:end="49:72"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <call pos:start="49:15" pos:end="49:72"><name pos:start="49:15" pos:end="49:37">bdrv_co_do_write_zeroes</name><argument_list pos:start="49:38" pos:end="49:72">(<argument pos:start="49:39" pos:end="49:40"><expr pos:start="49:39" pos:end="49:40"><name pos:start="49:39" pos:end="49:40">bs</name></expr></argument>, <argument pos:start="49:43" pos:end="49:52"><expr pos:start="49:43" pos:end="49:52"><name pos:start="49:43" pos:end="49:52">sector_num</name></expr></argument>, <argument pos:start="49:55" pos:end="49:64"><expr pos:start="49:55" pos:end="49:64"><name pos:start="49:55" pos:end="49:64">nb_sectors</name></expr></argument>, <argument pos:start="49:67" pos:end="49:71"><expr pos:start="49:67" pos:end="49:71"><name pos:start="49:67" pos:end="49:71">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="51:7" pos:end="55:5">else <block pos:start="51:12" pos:end="55:5">{<block_content pos:start="53:9" pos:end="53:68">

        <expr_stmt pos:start="53:9" pos:end="53:68"><expr pos:start="53:9" pos:end="53:67"><name pos:start="53:9" pos:end="53:11">ret</name> <operator pos:start="53:13" pos:end="53:13">=</operator> <call pos:start="53:15" pos:end="53:67"><name pos:start="53:15" pos:end="53:33"><name pos:start="53:15" pos:end="53:17">drv</name><operator pos:start="53:18" pos:end="53:19">-&gt;</operator><name pos:start="53:20" pos:end="53:33">bdrv_co_writev</name></name><argument_list pos:start="53:34" pos:end="53:67">(<argument pos:start="53:35" pos:end="53:36"><expr pos:start="53:35" pos:end="53:36"><name pos:start="53:35" pos:end="53:36">bs</name></expr></argument>, <argument pos:start="53:39" pos:end="53:48"><expr pos:start="53:39" pos:end="53:48"><name pos:start="53:39" pos:end="53:48">sector_num</name></expr></argument>, <argument pos:start="53:51" pos:end="53:60"><expr pos:start="53:51" pos:end="53:60"><name pos:start="53:51" pos:end="53:60">nb_sectors</name></expr></argument>, <argument pos:start="53:63" pos:end="53:66"><expr pos:start="53:63" pos:end="53:66"><name pos:start="53:63" pos:end="53:66">qiov</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="59:5" pos:end="63:5"><if pos:start="59:5" pos:end="63:5">if <condition pos:start="59:8" pos:end="59:44">(<expr pos:start="59:9" pos:end="59:43"><name pos:start="59:9" pos:end="59:11">ret</name> <operator pos:start="59:13" pos:end="59:14">==</operator> <literal type="number" pos:start="59:16" pos:end="59:16">0</literal> <operator pos:start="59:18" pos:end="59:19">&amp;&amp;</operator> <operator pos:start="59:21" pos:end="59:21">!</operator><name pos:start="59:22" pos:end="59:43"><name pos:start="59:22" pos:end="59:23">bs</name><operator pos:start="59:24" pos:end="59:25">-&gt;</operator><name pos:start="59:26" pos:end="59:43">enable_write_cache</name></name></expr>)</condition> <block pos:start="59:46" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:32">

        <expr_stmt pos:start="61:9" pos:end="61:32"><expr pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <call pos:start="61:15" pos:end="61:31"><name pos:start="61:15" pos:end="61:27">bdrv_co_flush</name><argument_list pos:start="61:28" pos:end="61:31">(<argument pos:start="61:29" pos:end="61:30"><expr pos:start="61:29" pos:end="61:30"><name pos:start="61:29" pos:end="61:30">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><call pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:18">bdrv_set_dirty</name><argument_list pos:start="67:19" pos:end="67:46">(<argument pos:start="67:20" pos:end="67:21"><expr pos:start="67:20" pos:end="67:21"><name pos:start="67:20" pos:end="67:21">bs</name></expr></argument>, <argument pos:start="67:24" pos:end="67:33"><expr pos:start="67:24" pos:end="67:33"><name pos:start="67:24" pos:end="67:33">sector_num</name></expr></argument>, <argument pos:start="67:36" pos:end="67:45"><expr pos:start="67:36" pos:end="67:45"><name pos:start="67:36" pos:end="67:45">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="71:5" pos:end="75:5"><if pos:start="71:5" pos:end="75:5">if <condition pos:start="71:8" pos:end="71:60">(<expr pos:start="71:9" pos:end="71:59"><name pos:start="71:9" pos:end="71:29"><name pos:start="71:9" pos:end="71:10">bs</name><operator pos:start="71:11" pos:end="71:12">-&gt;</operator><name pos:start="71:13" pos:end="71:29">wr_highest_sector</name></name> <operator pos:start="71:31" pos:end="71:31">&lt;</operator> <name pos:start="71:33" pos:end="71:42">sector_num</name> <operator pos:start="71:44" pos:end="71:44">+</operator> <name pos:start="71:46" pos:end="71:55">nb_sectors</name> <operator pos:start="71:57" pos:end="71:57">-</operator> <literal type="number" pos:start="71:59" pos:end="71:59">1</literal></expr>)</condition> <block pos:start="71:62" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:60">

        <expr_stmt pos:start="73:9" pos:end="73:60"><expr pos:start="73:9" pos:end="73:59"><name pos:start="73:9" pos:end="73:29"><name pos:start="73:9" pos:end="73:10">bs</name><operator pos:start="73:11" pos:end="73:12">-&gt;</operator><name pos:start="73:13" pos:end="73:29">wr_highest_sector</name></name> <operator pos:start="73:31" pos:end="73:31">=</operator> <name pos:start="73:33" pos:end="73:42">sector_num</name> <operator pos:start="73:44" pos:end="73:44">+</operator> <name pos:start="73:46" pos:end="73:55">nb_sectors</name> <operator pos:start="73:57" pos:end="73:57">-</operator> <literal type="number" pos:start="73:59" pos:end="73:59">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="77:5" pos:end="81:5"><if pos:start="77:5" pos:end="81:5">if <condition pos:start="77:8" pos:end="77:33">(<expr pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:20"><name pos:start="77:9" pos:end="77:10">bs</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:20">growable</name></name> <operator pos:start="77:22" pos:end="77:23">&amp;&amp;</operator> <name pos:start="77:25" pos:end="77:27">ret</name> <operator pos:start="77:29" pos:end="77:30">&gt;=</operator> <literal type="number" pos:start="77:32" pos:end="77:32">0</literal></expr>)</condition> <block pos:start="77:35" pos:end="81:5">{<block_content pos:start="79:9" pos:end="79:76">

        <expr_stmt pos:start="79:9" pos:end="79:76"><expr pos:start="79:9" pos:end="79:75"><name pos:start="79:9" pos:end="79:25"><name pos:start="79:9" pos:end="79:10">bs</name><operator pos:start="79:11" pos:end="79:12">-&gt;</operator><name pos:start="79:13" pos:end="79:25">total_sectors</name></name> <operator pos:start="79:27" pos:end="79:27">=</operator> <call pos:start="79:29" pos:end="79:75"><name pos:start="79:29" pos:end="79:31">MAX</name><argument_list pos:start="79:32" pos:end="79:75">(<argument pos:start="79:33" pos:end="79:49"><expr pos:start="79:33" pos:end="79:49"><name pos:start="79:33" pos:end="79:49"><name pos:start="79:33" pos:end="79:34">bs</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:49">total_sectors</name></name></expr></argument>, <argument pos:start="79:52" pos:end="79:74"><expr pos:start="79:52" pos:end="79:74"><name pos:start="79:52" pos:end="79:61">sector_num</name> <operator pos:start="79:63" pos:end="79:63">+</operator> <name pos:start="79:65" pos:end="79:74">nb_sectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="85:5" pos:end="85:30"><expr pos:start="85:5" pos:end="85:29"><call pos:start="85:5" pos:end="85:29"><name pos:start="85:5" pos:end="85:23">tracked_request_end</name><argument_list pos:start="85:24" pos:end="85:29">(<argument pos:start="85:25" pos:end="85:28"><expr pos:start="85:25" pos:end="85:28"><operator pos:start="85:25" pos:end="85:25">&amp;</operator><name pos:start="85:26" pos:end="85:28">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="89:5" pos:end="89:15">return <expr pos:start="89:12" pos:end="89:14"><name pos:start="89:12" pos:end="89:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
