<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17590.c" pos:tabs="8"><function pos:start="1:1" pos:end="109:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:25">dpy_gfx_update_dirty</name><parameter_list pos:start="1:26" pos:end="7:42">(<parameter pos:start="1:27" pos:end="1:42"><decl pos:start="1:27" pos:end="1:42"><type pos:start="1:27" pos:end="1:42"><name pos:start="1:27" pos:end="1:37">QemuConsole</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:42">con</name></decl></parameter>,

                          <parameter pos:start="3:27" pos:end="3:53"><decl pos:start="3:27" pos:end="3:53"><type pos:start="3:27" pos:end="3:53"><name pos:start="3:27" pos:end="3:38">MemoryRegion</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:53">address_space</name></decl></parameter>,

                          <parameter pos:start="5:27" pos:end="5:37"><decl pos:start="5:27" pos:end="5:37"><type pos:start="5:27" pos:end="5:37"><name pos:start="5:27" pos:end="5:32">hwaddr</name></type> <name pos:start="5:34" pos:end="5:37">base</name></decl></parameter>,

                          <parameter pos:start="7:27" pos:end="7:41"><decl pos:start="7:27" pos:end="7:41"><type pos:start="7:27" pos:end="7:41"><name pos:start="7:27" pos:end="7:30">bool</name></type> <name pos:start="7:32" pos:end="7:41">invalidate</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="109:1">{<block_content pos:start="11:5" pos:end="107:29">

    <decl_stmt pos:start="11:5" pos:end="11:51"><decl pos:start="11:5" pos:end="11:50"><type pos:start="11:5" pos:end="11:20"><name pos:start="11:5" pos:end="11:18">DisplaySurface</name> <modifier pos:start="11:20" pos:end="11:20">*</modifier></type><name pos:start="11:21" pos:end="11:22">ds</name> <init pos:start="11:24" pos:end="11:50">= <expr pos:start="11:26" pos:end="11:50"><call pos:start="11:26" pos:end="11:50"><name pos:start="11:26" pos:end="11:45">qemu_console_surface</name><argument_list pos:start="11:46" pos:end="11:50">(<argument pos:start="11:47" pos:end="11:49"><expr pos:start="11:47" pos:end="11:49"><name pos:start="11:47" pos:end="11:49">con</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:35"><decl pos:start="13:5" pos:end="13:34"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:13">width</name> <init pos:start="13:15" pos:end="13:34">= <expr pos:start="13:17" pos:end="13:34"><call pos:start="13:17" pos:end="13:34"><name pos:start="13:17" pos:end="13:30">surface_stride</name><argument_list pos:start="13:31" pos:end="13:34">(<argument pos:start="13:32" pos:end="13:33"><expr pos:start="13:32" pos:end="13:33"><name pos:start="13:32" pos:end="13:33">ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:36"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:14">height</name> <init pos:start="15:16" pos:end="15:35">= <expr pos:start="15:18" pos:end="15:35"><call pos:start="15:18" pos:end="15:35"><name pos:start="15:18" pos:end="15:31">surface_height</name><argument_list pos:start="15:32" pos:end="15:35">(<argument pos:start="15:33" pos:end="15:34"><expr pos:start="15:33" pos:end="15:34"><name pos:start="15:33" pos:end="15:34">ds</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:10"><name pos:start="17:5" pos:end="17:10">hwaddr</name></type> <name pos:start="17:12" pos:end="17:15">size</name> <init pos:start="17:17" pos:end="17:32">= <expr pos:start="17:19" pos:end="17:32"><name pos:start="17:19" pos:end="17:23">width</name> <operator pos:start="17:25" pos:end="17:25">*</operator> <name pos:start="17:27" pos:end="17:32">height</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:36"><decl pos:start="19:5" pos:end="19:35"><type pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:23">MemoryRegionSection</name></type> <name pos:start="19:25" pos:end="19:35">mem_section</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:22"><decl pos:start="21:5" pos:end="21:21"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">mem</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:20"><decl pos:start="23:5" pos:end="23:19"><type pos:start="23:5" pos:end="23:14"><name pos:start="23:5" pos:end="23:14">ram_addr_t</name></type> <name pos:start="23:16" pos:end="23:19">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:23"><decl pos:start="25:5" pos:end="25:13"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:13">first</name></decl>, <decl pos:start="25:16" pos:end="25:19"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:16" pos:end="25:19">last</name></decl>, <decl pos:start="25:22" pos:end="25:22"><type ref="prev" pos:start="25:5" pos:end="25:7"/><name pos:start="25:22" pos:end="25:22">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:15"><decl pos:start="27:5" pos:end="27:14"><type pos:start="27:5" pos:end="27:8"><name pos:start="27:5" pos:end="27:8">bool</name></type> <name pos:start="27:10" pos:end="27:14">dirty</name></decl>;</decl_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:64"><expr pos:start="31:5" pos:end="31:63"><name pos:start="31:5" pos:end="31:15">mem_section</name> <operator pos:start="31:17" pos:end="31:17">=</operator> <call pos:start="31:19" pos:end="31:63"><name pos:start="31:19" pos:end="31:36">memory_region_find</name><argument_list pos:start="31:37" pos:end="31:63">(<argument pos:start="31:38" pos:end="31:50"><expr pos:start="31:38" pos:end="31:50"><name pos:start="31:38" pos:end="31:50">address_space</name></expr></argument>, <argument pos:start="31:53" pos:end="31:56"><expr pos:start="31:53" pos:end="31:56"><name pos:start="31:53" pos:end="31:56">base</name></expr></argument>, <argument pos:start="31:59" pos:end="31:62"><expr pos:start="31:59" pos:end="31:62"><name pos:start="31:59" pos:end="31:62">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:25"><expr pos:start="33:5" pos:end="33:24"><name pos:start="33:5" pos:end="33:7">mem</name> <operator pos:start="33:9" pos:end="33:9">=</operator> <name pos:start="33:11" pos:end="33:24"><name pos:start="33:11" pos:end="33:21">mem_section</name><operator pos:start="33:22" pos:end="33:22">.</operator><name pos:start="33:23" pos:end="33:24">mr</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="37:46">(<expr pos:start="35:9" pos:end="37:45"><call pos:start="35:9" pos:end="35:38"><name pos:start="35:9" pos:end="35:20">int128_get64</name><argument_list pos:start="35:21" pos:end="35:38">(<argument pos:start="35:22" pos:end="35:37"><expr pos:start="35:22" pos:end="35:37"><name pos:start="35:22" pos:end="35:37"><name pos:start="35:22" pos:end="35:32">mem_section</name><operator pos:start="35:33" pos:end="35:33">.</operator><name pos:start="35:34" pos:end="35:37">size</name></name></expr></argument>)</argument_list></call> <operator pos:start="35:40" pos:end="35:41">!=</operator> <name pos:start="35:43" pos:end="35:46">size</name> <operator pos:start="35:48" pos:end="35:49">||</operator>

        <operator pos:start="37:9" pos:end="37:9">!</operator><call pos:start="37:10" pos:end="37:45"><name pos:start="37:10" pos:end="37:29">memory_region_is_ram</name><argument_list pos:start="37:30" pos:end="37:45">(<argument pos:start="37:31" pos:end="37:44"><expr pos:start="37:31" pos:end="37:44"><name pos:start="37:31" pos:end="37:44"><name pos:start="37:31" pos:end="37:41">mem_section</name><operator pos:start="37:42" pos:end="37:42">.</operator><name pos:start="37:43" pos:end="37:44">mr</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="37:48" pos:end="41:5">{<block_content pos:start="39:9" pos:end="39:17">

        <goto pos:start="39:9" pos:end="39:17">goto <name pos:start="39:14" pos:end="39:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:16"><expr pos:start="43:5" pos:end="43:15"><call pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:10">assert</name><argument_list pos:start="43:11" pos:end="43:15">(<argument pos:start="43:12" pos:end="43:14"><expr pos:start="43:12" pos:end="43:14"><name pos:start="43:12" pos:end="43:14">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:41"><expr pos:start="47:5" pos:end="47:40"><call pos:start="47:5" pos:end="47:40"><name pos:start="47:5" pos:end="47:35">memory_region_sync_dirty_bitmap</name><argument_list pos:start="47:36" pos:end="47:40">(<argument pos:start="47:37" pos:end="47:39"><expr pos:start="47:37" pos:end="47:39"><name pos:start="47:37" pos:end="47:39">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:44"><expr pos:start="49:5" pos:end="49:43"><name pos:start="49:5" pos:end="49:8">addr</name> <operator pos:start="49:10" pos:end="49:10">=</operator> <name pos:start="49:12" pos:end="49:43"><name pos:start="49:12" pos:end="49:22">mem_section</name><operator pos:start="49:23" pos:end="49:23">.</operator><name pos:start="49:24" pos:end="49:43">offset_within_region</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:15"><expr pos:start="53:5" pos:end="53:14"><name pos:start="53:5" pos:end="53:9">first</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <operator pos:start="53:13" pos:end="53:13">-</operator><literal type="number" pos:start="53:14" pos:end="53:14">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:14"><expr pos:start="55:5" pos:end="55:13"><name pos:start="55:5" pos:end="55:8">last</name> <operator pos:start="55:10" pos:end="55:10">=</operator> <operator pos:start="55:12" pos:end="55:12">-</operator><literal type="number" pos:start="55:13" pos:end="55:13">1</literal></expr>;</expr_stmt>

    <for pos:start="57:5" pos:end="87:5">for <control pos:start="57:9" pos:end="57:47">(<init pos:start="57:10" pos:end="57:15"><expr pos:start="57:10" pos:end="57:14"><name pos:start="57:10" pos:end="57:10">i</name> <operator pos:start="57:12" pos:end="57:12">=</operator> <literal type="number" pos:start="57:14" pos:end="57:14">0</literal></expr>;</init> <condition pos:start="57:17" pos:end="57:27"><expr pos:start="57:17" pos:end="57:26"><name pos:start="57:17" pos:end="57:17">i</name> <operator pos:start="57:19" pos:end="57:19">&lt;</operator> <name pos:start="57:21" pos:end="57:26">height</name></expr>;</condition> <incr pos:start="57:29" pos:end="57:46"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:29">i</name><operator pos:start="57:30" pos:end="57:31">++</operator></expr><operator pos:start="57:32" pos:end="57:32">,</operator> <expr pos:start="57:34" pos:end="57:46"><name pos:start="57:34" pos:end="57:37">addr</name> <operator pos:start="57:39" pos:end="57:40">+=</operator> <name pos:start="57:42" pos:end="57:46">width</name></expr></incr>)</control> <block pos:start="57:49" pos:end="87:5">{<block_content pos:start="59:9" pos:end="85:9">

        <expr_stmt pos:start="59:9" pos:end="61:72"><expr pos:start="59:9" pos:end="61:71"><name pos:start="59:9" pos:end="59:13">dirty</name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:26">invalidate</name> <operator pos:start="59:28" pos:end="59:29">||</operator>

            <call pos:start="61:13" pos:end="61:71"><name pos:start="61:13" pos:end="61:35">memory_region_get_dirty</name><argument_list pos:start="61:36" pos:end="61:71">(<argument pos:start="61:37" pos:end="61:39"><expr pos:start="61:37" pos:end="61:39"><name pos:start="61:37" pos:end="61:39">mem</name></expr></argument>, <argument pos:start="61:42" pos:end="61:45"><expr pos:start="61:42" pos:end="61:45"><name pos:start="61:42" pos:end="61:45">addr</name></expr></argument>, <argument pos:start="61:48" pos:end="61:52"><expr pos:start="61:48" pos:end="61:52"><name pos:start="61:48" pos:end="61:52">width</name></expr></argument>, <argument pos:start="61:55" pos:end="61:70"><expr pos:start="61:55" pos:end="61:70"><name pos:start="61:55" pos:end="61:70">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="63:9" pos:end="73:9"><if pos:start="63:9" pos:end="73:9">if <condition pos:start="63:12" pos:end="63:18">(<expr pos:start="63:13" pos:end="63:17"><name pos:start="63:13" pos:end="63:17">dirty</name></expr>)</condition> <block pos:start="63:20" pos:end="73:9">{<block_content pos:start="65:13" pos:end="71:21">

            <if_stmt pos:start="65:13" pos:end="69:13"><if pos:start="65:13" pos:end="69:13">if <condition pos:start="65:16" pos:end="65:28">(<expr pos:start="65:17" pos:end="65:27"><name pos:start="65:17" pos:end="65:21">first</name> <operator pos:start="65:23" pos:end="65:24">==</operator> <operator pos:start="65:26" pos:end="65:26">-</operator><literal type="number" pos:start="65:27" pos:end="65:27">1</literal></expr>)</condition> <block pos:start="65:30" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:26">

                <expr_stmt pos:start="67:17" pos:end="67:26"><expr pos:start="67:17" pos:end="67:25"><name pos:start="67:17" pos:end="67:21">first</name> <operator pos:start="67:23" pos:end="67:23">=</operator> <name pos:start="67:25" pos:end="67:25">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:21"><expr pos:start="71:13" pos:end="71:20"><name pos:start="71:13" pos:end="71:16">last</name> <operator pos:start="71:18" pos:end="71:18">=</operator> <name pos:start="71:20" pos:end="71:20">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="75:9" pos:end="85:9"><if pos:start="75:9" pos:end="85:9">if <condition pos:start="75:12" pos:end="75:34">(<expr pos:start="75:13" pos:end="75:33"><name pos:start="75:13" pos:end="75:17">first</name> <operator pos:start="75:19" pos:end="75:20">!=</operator> <operator pos:start="75:22" pos:end="75:22">-</operator><literal type="number" pos:start="75:23" pos:end="75:23">1</literal> <operator pos:start="75:25" pos:end="75:26">&amp;&amp;</operator> <operator pos:start="75:28" pos:end="75:28">!</operator><name pos:start="75:29" pos:end="75:33">dirty</name></expr>)</condition> <block pos:start="75:36" pos:end="85:9">{<block_content pos:start="77:13" pos:end="83:23">

            <expr_stmt pos:start="77:13" pos:end="77:48"><expr pos:start="77:13" pos:end="77:47"><call pos:start="77:13" pos:end="77:47"><name pos:start="77:13" pos:end="77:18">assert</name><argument_list pos:start="77:19" pos:end="77:47">(<argument pos:start="77:20" pos:end="77:46"><expr pos:start="77:20" pos:end="77:46"><name pos:start="77:20" pos:end="77:23">last</name> <operator pos:start="77:25" pos:end="77:26">!=</operator> <operator pos:start="77:28" pos:end="77:28">-</operator><literal type="number" pos:start="77:29" pos:end="77:29">1</literal> <operator pos:start="77:31" pos:end="77:32">&amp;&amp;</operator> <name pos:start="77:34" pos:end="77:37">last</name> <operator pos:start="77:39" pos:end="77:40">&gt;=</operator> <name pos:start="77:42" pos:end="77:46">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:45"><expr pos:start="79:13" pos:end="81:44"><call pos:start="79:13" pos:end="81:44"><name pos:start="79:13" pos:end="79:26">dpy_gfx_update</name><argument_list pos:start="79:27" pos:end="81:44">(<argument pos:start="79:28" pos:end="79:30"><expr pos:start="79:28" pos:end="79:30"><name pos:start="79:28" pos:end="79:30">con</name></expr></argument>, <argument pos:start="79:33" pos:end="79:33"><expr pos:start="79:33" pos:end="79:33"><literal type="number" pos:start="79:33" pos:end="79:33">0</literal></expr></argument>, <argument pos:start="79:36" pos:end="79:40"><expr pos:start="79:36" pos:end="79:40"><name pos:start="79:36" pos:end="79:40">first</name></expr></argument>, <argument pos:start="79:43" pos:end="79:59"><expr pos:start="79:43" pos:end="79:59"><call pos:start="79:43" pos:end="79:59"><name pos:start="79:43" pos:end="79:55">surface_width</name><argument_list pos:start="79:56" pos:end="79:59">(<argument pos:start="79:57" pos:end="79:58"><expr pos:start="79:57" pos:end="79:58"><name pos:start="79:57" pos:end="79:58">ds</name></expr></argument>)</argument_list></call></expr></argument>,

                           <argument pos:start="81:28" pos:end="81:43"><expr pos:start="81:28" pos:end="81:43"><name pos:start="81:28" pos:end="81:31">last</name> <operator pos:start="81:33" pos:end="81:33">-</operator> <name pos:start="81:35" pos:end="81:39">first</name> <operator pos:start="81:41" pos:end="81:41">+</operator> <literal type="number" pos:start="81:43" pos:end="81:43">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:23"><expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:17">first</name> <operator pos:start="83:19" pos:end="83:19">=</operator> <operator pos:start="83:21" pos:end="83:21">-</operator><literal type="number" pos:start="83:22" pos:end="83:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:20">(<expr pos:start="89:9" pos:end="89:19"><name pos:start="89:9" pos:end="89:13">first</name> <operator pos:start="89:15" pos:end="89:16">!=</operator> <operator pos:start="89:18" pos:end="89:18">-</operator><literal type="number" pos:start="89:19" pos:end="89:19">1</literal></expr>)</condition> <block pos:start="89:22" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:41">

        <expr_stmt pos:start="91:9" pos:end="91:44"><expr pos:start="91:9" pos:end="91:43"><call pos:start="91:9" pos:end="91:43"><name pos:start="91:9" pos:end="91:14">assert</name><argument_list pos:start="91:15" pos:end="91:43">(<argument pos:start="91:16" pos:end="91:42"><expr pos:start="91:16" pos:end="91:42"><name pos:start="91:16" pos:end="91:19">last</name> <operator pos:start="91:21" pos:end="91:22">!=</operator> <operator pos:start="91:24" pos:end="91:24">-</operator><literal type="number" pos:start="91:25" pos:end="91:25">1</literal> <operator pos:start="91:27" pos:end="91:28">&amp;&amp;</operator> <name pos:start="91:30" pos:end="91:33">last</name> <operator pos:start="91:35" pos:end="91:36">&gt;=</operator> <name pos:start="91:38" pos:end="91:42">first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="95:41"><expr pos:start="93:9" pos:end="95:40"><call pos:start="93:9" pos:end="95:40"><name pos:start="93:9" pos:end="93:22">dpy_gfx_update</name><argument_list pos:start="93:23" pos:end="95:40">(<argument pos:start="93:24" pos:end="93:26"><expr pos:start="93:24" pos:end="93:26"><name pos:start="93:24" pos:end="93:26">con</name></expr></argument>, <argument pos:start="93:29" pos:end="93:29"><expr pos:start="93:29" pos:end="93:29"><literal type="number" pos:start="93:29" pos:end="93:29">0</literal></expr></argument>, <argument pos:start="93:32" pos:end="93:36"><expr pos:start="93:32" pos:end="93:36"><name pos:start="93:32" pos:end="93:36">first</name></expr></argument>, <argument pos:start="93:39" pos:end="93:55"><expr pos:start="93:39" pos:end="93:55"><call pos:start="93:39" pos:end="93:55"><name pos:start="93:39" pos:end="93:51">surface_width</name><argument_list pos:start="93:52" pos:end="93:55">(<argument pos:start="93:53" pos:end="93:54"><expr pos:start="93:53" pos:end="93:54"><name pos:start="93:53" pos:end="93:54">ds</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="95:24" pos:end="95:39"><expr pos:start="95:24" pos:end="95:39"><name pos:start="95:24" pos:end="95:27">last</name> <operator pos:start="95:29" pos:end="95:29">-</operator> <name pos:start="95:31" pos:end="95:35">first</name> <operator pos:start="95:37" pos:end="95:37">+</operator> <literal type="number" pos:start="95:39" pos:end="95:39">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="103:48"><expr pos:start="101:5" pos:end="103:47"><call pos:start="101:5" pos:end="103:47"><name pos:start="101:5" pos:end="101:29">memory_region_reset_dirty</name><argument_list pos:start="101:30" pos:end="103:47">(<argument pos:start="101:31" pos:end="101:33"><expr pos:start="101:31" pos:end="101:33"><name pos:start="101:31" pos:end="101:33">mem</name></expr></argument>, <argument pos:start="101:36" pos:end="101:67"><expr pos:start="101:36" pos:end="101:67"><name pos:start="101:36" pos:end="101:67"><name pos:start="101:36" pos:end="101:46">mem_section</name><operator pos:start="101:47" pos:end="101:47">.</operator><name pos:start="101:48" pos:end="101:67">offset_within_region</name></name></expr></argument>, <argument pos:start="101:70" pos:end="101:73"><expr pos:start="101:70" pos:end="101:73"><name pos:start="101:70" pos:end="101:73">size</name></expr></argument>,

                              <argument pos:start="103:31" pos:end="103:46"><expr pos:start="103:31" pos:end="103:46"><name pos:start="103:31" pos:end="103:46">DIRTY_MEMORY_VGA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="105:1" pos:end="105:4"><name pos:start="105:1" pos:end="105:3">out</name>:</label>

    <expr_stmt pos:start="107:5" pos:end="107:29"><expr pos:start="107:5" pos:end="107:28"><call pos:start="107:5" pos:end="107:28"><name pos:start="107:5" pos:end="107:23">memory_region_unref</name><argument_list pos:start="107:24" pos:end="107:28">(<argument pos:start="107:25" pos:end="107:27"><expr pos:start="107:25" pos:end="107:27"><name pos:start="107:25" pos:end="107:27">mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
