<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19475.c" pos:tabs="8"><function pos:start="1:1" pos:end="149:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:16">load_vmstate</name><parameter_list pos:start="1:17" pos:end="1:34">(<parameter pos:start="1:18" pos:end="1:33"><decl pos:start="1:18" pos:end="1:33"><type pos:start="1:18" pos:end="1:29"><specifier pos:start="1:18" pos:end="1:22">const</specifier> <name pos:start="1:24" pos:end="1:27">char</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:33">name</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="149:1">{<block_content pos:start="5:5" pos:end="147:13">

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20">BlockDriverState</name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:24">bs</name></decl>, <decl pos:start="5:27" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:22"><modifier pos:start="5:27" pos:end="5:27">*</modifier></type><name pos:start="5:28" pos:end="5:38">bs_vm_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:24"><decl pos:start="7:5" pos:end="7:23"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:20">QEMUSnapshotInfo</name></type> <name pos:start="7:22" pos:end="7:23">sn</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:14"><name pos:start="9:5" pos:end="9:12">QEMUFile</name> <modifier pos:start="9:14" pos:end="9:14">*</modifier></type><name pos:start="9:15" pos:end="9:15">f</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="23:5"><if pos:start="15:5" pos:end="23:5">if <condition pos:start="15:8" pos:end="15:36">(<expr pos:start="15:9" pos:end="15:35"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:35"><name pos:start="15:10" pos:end="15:30">bdrv_all_can_snapshot</name><argument_list pos:start="15:31" pos:end="15:35">(<argument pos:start="15:32" pos:end="15:34"><expr pos:start="15:32" pos:end="15:34"><operator pos:start="15:32" pos:end="15:32">&amp;</operator><name pos:start="15:33" pos:end="15:34">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="15:38" pos:end="23:5">{<block_content pos:start="17:9" pos:end="21:24">

        <expr_stmt pos:start="17:9" pos:end="19:47"><expr pos:start="17:9" pos:end="19:46"><call pos:start="17:9" pos:end="19:46"><name pos:start="17:9" pos:end="17:20">error_report</name><argument_list pos:start="17:21" pos:end="19:46">(<argument pos:start="17:22" pos:end="17:78"><expr pos:start="17:22" pos:end="17:78"><literal type="string" pos:start="17:22" pos:end="17:78">"Device '%s' is writable but does not support snapshots."</literal></expr></argument>,

                     <argument pos:start="19:22" pos:end="19:45"><expr pos:start="19:22" pos:end="19:45"><call pos:start="19:22" pos:end="19:45"><name pos:start="19:22" pos:end="19:41">bdrv_get_device_name</name><argument_list pos:start="19:42" pos:end="19:45">(<argument pos:start="19:43" pos:end="19:44"><expr pos:start="19:43" pos:end="19:44"><name pos:start="19:43" pos:end="19:44">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:24">return <expr pos:start="21:16" pos:end="21:23"><operator pos:start="21:16" pos:end="21:16">-</operator><name pos:start="21:17" pos:end="21:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:36"><expr pos:start="27:5" pos:end="27:35"><name pos:start="27:5" pos:end="27:15">bs_vm_state</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:35"><name pos:start="27:19" pos:end="27:33">find_vmstate_bs</name><argument_list pos:start="27:34" pos:end="27:35">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:21">(<expr pos:start="29:9" pos:end="29:20"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:20">bs_vm_state</name></expr>)</condition> <block pos:start="29:23" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:24">

        <expr_stmt pos:start="31:9" pos:end="31:59"><expr pos:start="31:9" pos:end="31:58"><call pos:start="31:9" pos:end="31:58"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="31:58">(<argument pos:start="31:22" pos:end="31:57"><expr pos:start="31:22" pos:end="31:57"><literal type="string" pos:start="31:22" pos:end="31:57">"No block device supports snapshots"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:24">return <expr pos:start="33:16" pos:end="33:23"><operator pos:start="33:16" pos:end="33:16">-</operator><name pos:start="33:17" pos:end="33:23">ENOTSUP</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:48">/* Don't even try to load empty VM states */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:53"><expr pos:start="41:5" pos:end="41:52"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:52"><name pos:start="41:11" pos:end="41:28">bdrv_snapshot_find</name><argument_list pos:start="41:29" pos:end="41:52">(<argument pos:start="41:30" pos:end="41:40"><expr pos:start="41:30" pos:end="41:40"><name pos:start="41:30" pos:end="41:40">bs_vm_state</name></expr></argument>, <argument pos:start="41:43" pos:end="41:45"><expr pos:start="41:43" pos:end="41:45"><operator pos:start="41:43" pos:end="41:43">&amp;</operator><name pos:start="41:44" pos:end="41:45">sn</name></expr></argument>, <argument pos:start="41:48" pos:end="41:51"><expr pos:start="41:48" pos:end="41:51"><name pos:start="41:48" pos:end="41:51">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="55:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:19">

        <return pos:start="45:9" pos:end="45:19">return <expr pos:start="45:16" pos:end="45:18"><name pos:start="45:16" pos:end="45:18">ret</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="55:5">else if <condition pos:start="47:15" pos:end="47:37">(<expr pos:start="47:16" pos:end="47:36"><name pos:start="47:16" pos:end="47:31"><name pos:start="47:16" pos:end="47:17">sn</name><operator pos:start="47:18" pos:end="47:18">.</operator><name pos:start="47:19" pos:end="47:31">vm_state_size</name></name> <operator pos:start="47:33" pos:end="47:34">==</operator> <literal type="number" pos:start="47:36" pos:end="47:36">0</literal></expr>)</condition> <block pos:start="47:39" pos:end="55:5">{<block_content pos:start="49:9" pos:end="53:23">

        <expr_stmt pos:start="49:9" pos:end="51:31"><expr pos:start="49:9" pos:end="51:30"><call pos:start="49:9" pos:end="51:30"><name pos:start="49:9" pos:end="49:20">error_report</name><argument_list pos:start="49:21" pos:end="51:30">(<argument pos:start="49:22" pos:end="51:29"><expr pos:start="49:22" pos:end="51:29"><literal type="string" pos:start="49:22" pos:end="49:74">"This is a disk-only snapshot. Revert to it offline "</literal>

            <literal type="string" pos:start="51:13" pos:end="51:29">"using qemu-img."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="53:9" pos:end="53:23">return <expr pos:start="53:16" pos:end="53:22"><operator pos:start="53:16" pos:end="53:16">-</operator><name pos:start="53:17" pos:end="53:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="59:5" pos:end="61:69">/* Verify if there is any device that doesn't support snapshots and is

    writable and check if the requested snapshot is available too. */</comment>

    <expr_stmt pos:start="63:5" pos:end="63:14"><expr pos:start="63:5" pos:end="63:13"><name pos:start="63:5" pos:end="63:6">bs</name> <operator pos:start="63:8" pos:end="63:8">=</operator> <name pos:start="63:10" pos:end="63:13">NULL</name></expr>;</expr_stmt>

    <while pos:start="65:5" pos:end="87:5">while <condition pos:start="65:11" pos:end="65:32">(<expr pos:start="65:12" pos:end="65:31"><operator pos:start="65:12" pos:end="65:12">(</operator><name pos:start="65:13" pos:end="65:14">bs</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:30"><name pos:start="65:18" pos:end="65:26">bdrv_next</name><argument_list pos:start="65:27" pos:end="65:30">(<argument pos:start="65:28" pos:end="65:29"><expr pos:start="65:28" pos:end="65:29"><name pos:start="65:28" pos:end="65:29">bs</name></expr></argument>)</argument_list></call><operator pos:start="65:31" pos:end="65:31">)</operator></expr>)</condition> <block pos:start="65:34" pos:end="87:5">{<block_content pos:start="67:9" pos:end="85:9">

        <if_stmt pos:start="67:9" pos:end="71:9"><if pos:start="67:9" pos:end="71:9">if <condition pos:start="67:12" pos:end="67:35">(<expr pos:start="67:13" pos:end="67:34"><operator pos:start="67:13" pos:end="67:13">!</operator><call pos:start="67:14" pos:end="67:34"><name pos:start="67:14" pos:end="67:30">bdrv_can_snapshot</name><argument_list pos:start="67:31" pos:end="67:34">(<argument pos:start="67:32" pos:end="67:33"><expr pos:start="67:32" pos:end="67:33"><name pos:start="67:32" pos:end="67:33">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:37" pos:end="71:9">{<block_content pos:start="69:13" pos:end="69:21">

            <continue pos:start="69:13" pos:end="69:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="75:9" pos:end="75:48"><expr pos:start="75:9" pos:end="75:47"><name pos:start="75:9" pos:end="75:11">ret</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:47"><name pos:start="75:15" pos:end="75:32">bdrv_snapshot_find</name><argument_list pos:start="75:33" pos:end="75:47">(<argument pos:start="75:34" pos:end="75:35"><expr pos:start="75:34" pos:end="75:35"><name pos:start="75:34" pos:end="75:35">bs</name></expr></argument>, <argument pos:start="75:38" pos:end="75:40"><expr pos:start="75:38" pos:end="75:40"><operator pos:start="75:38" pos:end="75:38">&amp;</operator><name pos:start="75:39" pos:end="75:40">sn</name></expr></argument>, <argument pos:start="75:43" pos:end="75:46"><expr pos:start="75:43" pos:end="75:46"><name pos:start="75:43" pos:end="75:46">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="77:9" pos:end="85:9"><if pos:start="77:9" pos:end="85:9">if <condition pos:start="77:12" pos:end="77:20">(<expr pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">ret</name> <operator pos:start="77:17" pos:end="77:17">&lt;</operator> <literal type="number" pos:start="77:19" pos:end="77:19">0</literal></expr>)</condition> <block pos:start="77:22" pos:end="85:9">{<block_content pos:start="79:13" pos:end="83:23">

            <expr_stmt pos:start="79:13" pos:end="81:59"><expr pos:start="79:13" pos:end="81:58"><call pos:start="79:13" pos:end="81:58"><name pos:start="79:13" pos:end="79:24">error_report</name><argument_list pos:start="79:25" pos:end="81:58">(<argument pos:start="79:26" pos:end="79:80"><expr pos:start="79:26" pos:end="79:80"><literal type="string" pos:start="79:26" pos:end="79:80">"Device '%s' does not have the requested snapshot '%s'"</literal></expr></argument>,

                           <argument pos:start="81:28" pos:end="81:51"><expr pos:start="81:28" pos:end="81:51"><call pos:start="81:28" pos:end="81:51"><name pos:start="81:28" pos:end="81:47">bdrv_get_device_name</name><argument_list pos:start="81:48" pos:end="81:51">(<argument pos:start="81:49" pos:end="81:50"><expr pos:start="81:49" pos:end="81:50"><name pos:start="81:49" pos:end="81:50">bs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:54" pos:end="81:57"><expr pos:start="81:54" pos:end="81:57"><name pos:start="81:54" pos:end="81:57">name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="83:13" pos:end="83:23">return <expr pos:start="83:20" pos:end="83:22"><name pos:start="83:20" pos:end="83:22">ret</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="91:5" pos:end="91:76">/* Flush all IO requests so they don't interfere with the new state.  */</comment>

    <expr_stmt pos:start="93:5" pos:end="93:21"><expr pos:start="93:5" pos:end="93:20"><call pos:start="93:5" pos:end="93:20"><name pos:start="93:5" pos:end="93:18">bdrv_drain_all</name><argument_list pos:start="93:19" pos:end="93:20">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="97:5" pos:end="97:44"><expr pos:start="97:5" pos:end="97:43"><name pos:start="97:5" pos:end="97:7">ret</name> <operator pos:start="97:9" pos:end="97:9">=</operator> <call pos:start="97:11" pos:end="97:43"><name pos:start="97:11" pos:end="97:32">bdrv_all_goto_snapshot</name><argument_list pos:start="97:33" pos:end="97:43">(<argument pos:start="97:34" pos:end="97:37"><expr pos:start="97:34" pos:end="97:37"><name pos:start="97:34" pos:end="97:37">name</name></expr></argument>, <argument pos:start="97:40" pos:end="97:42"><expr pos:start="97:40" pos:end="97:42"><operator pos:start="97:40" pos:end="97:40">&amp;</operator><name pos:start="97:41" pos:end="97:42">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:16">(<expr pos:start="99:9" pos:end="99:15"><name pos:start="99:9" pos:end="99:11">ret</name> <operator pos:start="99:13" pos:end="99:13">&lt;</operator> <literal type="number" pos:start="99:15" pos:end="99:15">0</literal></expr>)</condition> <block pos:start="99:18" pos:end="107:5">{<block_content pos:start="101:9" pos:end="105:19">

        <expr_stmt pos:start="101:9" pos:end="103:58"><expr pos:start="101:9" pos:end="103:57"><call pos:start="101:9" pos:end="103:57"><name pos:start="101:9" pos:end="101:20">error_report</name><argument_list pos:start="101:21" pos:end="103:57">(<argument pos:start="101:22" pos:end="101:70"><expr pos:start="101:22" pos:end="101:70"><literal type="string" pos:start="101:22" pos:end="101:70">"Error %d while activating snapshot '%s' on '%s'"</literal></expr></argument>,

                     <argument pos:start="103:22" pos:end="103:24"><expr pos:start="103:22" pos:end="103:24"><name pos:start="103:22" pos:end="103:24">ret</name></expr></argument>, <argument pos:start="103:27" pos:end="103:30"><expr pos:start="103:27" pos:end="103:30"><name pos:start="103:27" pos:end="103:30">name</name></expr></argument>, <argument pos:start="103:33" pos:end="103:56"><expr pos:start="103:33" pos:end="103:56"><call pos:start="103:33" pos:end="103:56"><name pos:start="103:33" pos:end="103:52">bdrv_get_device_name</name><argument_list pos:start="103:53" pos:end="103:56">(<argument pos:start="103:54" pos:end="103:55"><expr pos:start="103:54" pos:end="103:55"><name pos:start="103:54" pos:end="103:55">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="105:9" pos:end="105:19">return <expr pos:start="105:16" pos:end="105:18"><name pos:start="105:16" pos:end="105:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="111:5" pos:end="111:30">/* restore the VM state */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:40"><expr pos:start="113:5" pos:end="113:39"><name pos:start="113:5" pos:end="113:5">f</name> <operator pos:start="113:7" pos:end="113:7">=</operator> <call pos:start="113:9" pos:end="113:39"><name pos:start="113:9" pos:end="113:23">qemu_fopen_bdrv</name><argument_list pos:start="113:24" pos:end="113:39">(<argument pos:start="113:25" pos:end="113:35"><expr pos:start="113:25" pos:end="113:35"><name pos:start="113:25" pos:end="113:35">bs_vm_state</name></expr></argument>, <argument pos:start="113:38" pos:end="113:38"><expr pos:start="113:38" pos:end="113:38"><literal type="number" pos:start="113:38" pos:end="113:38">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="121:5"><if pos:start="115:5" pos:end="121:5">if <condition pos:start="115:8" pos:end="115:11">(<expr pos:start="115:9" pos:end="115:10"><operator pos:start="115:9" pos:end="115:9">!</operator><name pos:start="115:10" pos:end="115:10">f</name></expr>)</condition> <block pos:start="115:13" pos:end="121:5">{<block_content pos:start="117:9" pos:end="119:23">

        <expr_stmt pos:start="117:9" pos:end="117:53"><expr pos:start="117:9" pos:end="117:52"><call pos:start="117:9" pos:end="117:52"><name pos:start="117:9" pos:end="117:20">error_report</name><argument_list pos:start="117:21" pos:end="117:52">(<argument pos:start="117:22" pos:end="117:51"><expr pos:start="117:22" pos:end="117:51"><literal type="string" pos:start="117:22" pos:end="117:51">"Could not open VM state file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="119:9" pos:end="119:23">return <expr pos:start="119:16" pos:end="119:22"><operator pos:start="119:16" pos:end="119:16">-</operator><name pos:start="119:17" pos:end="119:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="125:5" pos:end="125:38"><expr pos:start="125:5" pos:end="125:37"><call pos:start="125:5" pos:end="125:37"><name pos:start="125:5" pos:end="125:21">qemu_system_reset</name><argument_list pos:start="125:22" pos:end="125:37">(<argument pos:start="125:23" pos:end="125:36"><expr pos:start="125:23" pos:end="125:36"><name pos:start="125:23" pos:end="125:36">VMRESET_SILENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:36"><expr pos:start="127:5" pos:end="127:35"><call pos:start="127:5" pos:end="127:35"><name pos:start="127:5" pos:end="127:32">migration_incoming_state_new</name><argument_list pos:start="127:33" pos:end="127:35">(<argument pos:start="127:34" pos:end="127:34"><expr pos:start="127:34" pos:end="127:34"><name pos:start="127:34" pos:end="127:34">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:31"><expr pos:start="129:5" pos:end="129:30"><name pos:start="129:5" pos:end="129:7">ret</name> <operator pos:start="129:9" pos:end="129:9">=</operator> <call pos:start="129:11" pos:end="129:30"><name pos:start="129:11" pos:end="129:27">qemu_loadvm_state</name><argument_list pos:start="129:28" pos:end="129:30">(<argument pos:start="129:29" pos:end="129:29"><expr pos:start="129:29" pos:end="129:29"><name pos:start="129:29" pos:end="129:29">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:19"><expr pos:start="133:5" pos:end="133:18"><call pos:start="133:5" pos:end="133:18"><name pos:start="133:5" pos:end="133:15">qemu_fclose</name><argument_list pos:start="133:16" pos:end="133:18">(<argument pos:start="133:17" pos:end="133:17"><expr pos:start="133:17" pos:end="133:17"><name pos:start="133:17" pos:end="133:17">f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="135:5" pos:end="135:39"><expr pos:start="135:5" pos:end="135:38"><call pos:start="135:5" pos:end="135:38"><name pos:start="135:5" pos:end="135:36">migration_incoming_state_destroy</name><argument_list pos:start="135:37" pos:end="135:38">()</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="137:5" pos:end="143:5"><if pos:start="137:5" pos:end="143:5">if <condition pos:start="137:8" pos:end="137:16">(<expr pos:start="137:9" pos:end="137:15"><name pos:start="137:9" pos:end="137:11">ret</name> <operator pos:start="137:13" pos:end="137:13">&lt;</operator> <literal type="number" pos:start="137:15" pos:end="137:15">0</literal></expr>)</condition> <block pos:start="137:18" pos:end="143:5">{<block_content pos:start="139:9" pos:end="141:19">

        <expr_stmt pos:start="139:9" pos:end="139:61"><expr pos:start="139:9" pos:end="139:60"><call pos:start="139:9" pos:end="139:60"><name pos:start="139:9" pos:end="139:20">error_report</name><argument_list pos:start="139:21" pos:end="139:60">(<argument pos:start="139:22" pos:end="139:54"><expr pos:start="139:22" pos:end="139:54"><literal type="string" pos:start="139:22" pos:end="139:54">"Error %d while loading VM state"</literal></expr></argument>, <argument pos:start="139:57" pos:end="139:59"><expr pos:start="139:57" pos:end="139:59"><name pos:start="139:57" pos:end="139:59">ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="141:9" pos:end="141:19">return <expr pos:start="141:16" pos:end="141:18"><name pos:start="141:16" pos:end="141:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="147:5" pos:end="147:13">return <expr pos:start="147:12" pos:end="147:12"><literal type="number" pos:start="147:12" pos:end="147:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
