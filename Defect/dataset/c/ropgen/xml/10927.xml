<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/10927.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:69"><name pos:start="1:1" pos:end="1:10">build_srat</name><argument_list pos:start="1:11" pos:end="1:69">(<argument pos:start="1:12" pos:end="1:29">GArray *table_data</argument>, <argument pos:start="1:32" pos:end="1:45">GArray *linker</argument>, <argument pos:start="1:48" pos:end="1:68">MachineState *machine</argument>)</argument_list></macro>

<block pos:start="3:1" pos:end="189:1">{<block_content pos:start="5:5" pos:end="187:21">

    <decl_stmt pos:start="5:5" pos:end="5:42"><decl pos:start="5:5" pos:end="5:41"><type pos:start="5:5" pos:end="5:37"><name pos:start="5:5" pos:end="5:35">AcpiSystemResourceAffinityTable</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:41">srat</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:36"><decl pos:start="7:5" pos:end="7:35"><type pos:start="7:5" pos:end="7:31"><name pos:start="7:5" pos:end="7:29">AcpiSratProcessorAffinity</name> <modifier pos:start="7:31" pos:end="7:31">*</modifier></type><name pos:start="7:32" pos:end="7:35">core</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:36"><decl pos:start="9:5" pos:end="9:35"><type pos:start="9:5" pos:end="9:28"><name pos:start="9:5" pos:end="9:26">AcpiSratMemoryAffinity</name> <modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:35">numamem</name></decl>;</decl_stmt>



    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:21"><decl pos:start="15:5" pos:end="15:20"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:20">curnode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:18"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:18">srat_start</name></decl>, <decl pos:start="17:21" pos:end="17:30"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:21" pos:end="17:30">numa_start</name></decl>, <decl pos:start="17:33" pos:end="17:37"><type ref="prev" pos:start="17:5" pos:end="17:7"/><name pos:start="17:33" pos:end="17:37">slots</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:42"><decl pos:start="19:5" pos:end="19:20"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:20">mem_len</name></decl>, <decl pos:start="19:23" pos:end="19:30"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:23" pos:end="19:30">mem_base</name></decl>, <decl pos:start="19:33" pos:end="19:41"><type ref="prev" pos:start="19:5" pos:end="19:12"/><name pos:start="19:33" pos:end="19:41">next_base</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:50"><decl pos:start="21:5" pos:end="21:49"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MachineClass</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:20">mc</name> <init pos:start="21:22" pos:end="21:49">= <expr pos:start="21:24" pos:end="21:49"><call pos:start="21:24" pos:end="21:49"><name pos:start="21:24" pos:end="21:40">MACHINE_GET_CLASS</name><argument_list pos:start="21:41" pos:end="21:49">(<argument pos:start="21:42" pos:end="21:48"><expr pos:start="21:42" pos:end="21:48"><name pos:start="21:42" pos:end="21:48">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:65"><decl pos:start="23:5" pos:end="23:64"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:17">CPUArchIdList</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:27">apic_ids</name> <init pos:start="23:29" pos:end="23:64">= <expr pos:start="23:31" pos:end="23:64"><call pos:start="23:31" pos:end="23:64"><name pos:start="23:31" pos:end="23:55"><name pos:start="23:31" pos:end="23:32">mc</name><operator pos:start="23:33" pos:end="23:34">-&gt;</operator><name pos:start="23:35" pos:end="23:55">possible_cpu_arch_ids</name></name><argument_list pos:start="23:56" pos:end="23:64">(<argument pos:start="23:57" pos:end="23:63"><expr pos:start="23:57" pos:end="23:63"><name pos:start="23:57" pos:end="23:63">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:47"><decl pos:start="25:5" pos:end="25:46"><type pos:start="25:5" pos:end="25:20"><name pos:start="25:5" pos:end="25:18">PCMachineState</name> <modifier pos:start="25:20" pos:end="25:20">*</modifier></type><name pos:start="25:21" pos:end="25:24">pcms</name> <init pos:start="25:26" pos:end="25:46">= <expr pos:start="25:28" pos:end="25:46"><call pos:start="25:28" pos:end="25:46"><name pos:start="25:28" pos:end="25:37">PC_MACHINE</name><argument_list pos:start="25:38" pos:end="25:46">(<argument pos:start="25:39" pos:end="25:45"><expr pos:start="25:39" pos:end="25:45"><name pos:start="25:39" pos:end="25:45">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="31:38"><decl pos:start="27:5" pos:end="31:37"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:14">ram_addr_t</name></type> <name pos:start="27:16" pos:end="27:46">hotplugabble_address_space_size</name> <init pos:start="27:48" pos:end="31:37">=

        <expr pos:start="29:9" pos:end="31:37"><call pos:start="29:9" pos:end="31:37"><name pos:start="29:9" pos:end="29:31">object_property_get_int</name><argument_list pos:start="29:32" pos:end="31:37">(<argument pos:start="29:33" pos:end="29:44"><expr pos:start="29:33" pos:end="29:44"><call pos:start="29:33" pos:end="29:44"><name pos:start="29:33" pos:end="29:38">OBJECT</name><argument_list pos:start="29:39" pos:end="29:44">(<argument pos:start="29:40" pos:end="29:43"><expr pos:start="29:40" pos:end="29:43"><name pos:start="29:40" pos:end="29:43">pcms</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="29:47" pos:end="29:74"><expr pos:start="29:47" pos:end="29:74"><name pos:start="29:47" pos:end="29:74">PC_MACHINE_MEMHP_REGION_SIZE</name></expr></argument>,

                                <argument pos:start="31:33" pos:end="31:36"><expr pos:start="31:33" pos:end="31:36"><name pos:start="31:33" pos:end="31:36">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:33"><expr pos:start="35:5" pos:end="35:32"><name pos:start="35:5" pos:end="35:14">srat_start</name> <operator pos:start="35:16" pos:end="35:16">=</operator> <name pos:start="35:18" pos:end="35:32"><name pos:start="35:18" pos:end="35:27">table_data</name><operator pos:start="35:28" pos:end="35:29">-&gt;</operator><name pos:start="35:30" pos:end="35:32">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:52"><expr pos:start="39:5" pos:end="39:51"><name pos:start="39:5" pos:end="39:8">srat</name> <operator pos:start="39:10" pos:end="39:10">=</operator> <call pos:start="39:12" pos:end="39:51"><name pos:start="39:12" pos:end="39:25">acpi_data_push</name><argument_list pos:start="39:26" pos:end="39:51">(<argument pos:start="39:27" pos:end="39:36"><expr pos:start="39:27" pos:end="39:36"><name pos:start="39:27" pos:end="39:36">table_data</name></expr></argument>, <argument pos:start="39:39" pos:end="39:50"><expr pos:start="39:39" pos:end="39:50"><sizeof pos:start="39:39" pos:end="39:44">sizeof <name/></sizeof>*<name pos:start="39:47" pos:end="39:50">srat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:8">srat</name><operator pos:start="41:9" pos:end="41:10">-&gt;</operator><name pos:start="41:11" pos:end="41:19">reserved1</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <call pos:start="41:23" pos:end="41:36"><name pos:start="41:23" pos:end="41:33">cpu_to_le32</name><argument_list pos:start="41:34" pos:end="41:36">(<argument pos:start="41:35" pos:end="41:35"><expr pos:start="41:35" pos:end="41:35"><literal type="number" pos:start="41:35" pos:end="41:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="45:5" pos:end="69:5">for <control pos:start="45:9" pos:end="45:39">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:34"><expr pos:start="45:17" pos:end="45:33"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:33"><name pos:start="45:21" pos:end="45:28">apic_ids</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:33">len</name></name></expr>;</condition> <incr pos:start="45:36" pos:end="45:38"><expr pos:start="45:36" pos:end="45:38"><name pos:start="45:36" pos:end="45:36">i</name><operator pos:start="45:37" pos:end="45:38">++</operator></expr></incr>)</control> <block pos:start="45:41" pos:end="69:5">{<block_content pos:start="47:9" pos:end="67:37">

        <decl_stmt pos:start="47:9" pos:end="47:48"><decl pos:start="47:9" pos:end="47:47"><type pos:start="47:9" pos:end="47:11"><name pos:start="47:9" pos:end="47:11">int</name></type> <name pos:start="47:13" pos:end="47:19">apic_id</name> <init pos:start="47:21" pos:end="47:47">= <expr pos:start="47:23" pos:end="47:47"><name pos:start="47:23" pos:end="47:39"><name pos:start="47:23" pos:end="47:30">apic_ids</name><operator pos:start="47:31" pos:end="47:32">-&gt;</operator><name pos:start="47:33" pos:end="47:36">cpus</name><index pos:start="47:37" pos:end="47:39">[<expr pos:start="47:38" pos:end="47:38"><name pos:start="47:38" pos:end="47:38">i</name></expr>]</index></name><operator pos:start="47:40" pos:end="47:40">.</operator><name pos:start="47:41" pos:end="47:47">arch_id</name></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="51:9" pos:end="51:56"><expr pos:start="51:9" pos:end="51:55"><name pos:start="51:9" pos:end="51:12">core</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:55"><name pos:start="51:16" pos:end="51:29">acpi_data_push</name><argument_list pos:start="51:30" pos:end="51:55">(<argument pos:start="51:31" pos:end="51:40"><expr pos:start="51:31" pos:end="51:40"><name pos:start="51:31" pos:end="51:40">table_data</name></expr></argument>, <argument pos:start="51:43" pos:end="51:54"><expr pos:start="51:43" pos:end="51:54"><sizeof pos:start="51:43" pos:end="51:48">sizeof <name/></sizeof>*<name pos:start="51:51" pos:end="51:54">core</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:46"><expr pos:start="53:9" pos:end="53:45"><name pos:start="53:9" pos:end="53:18"><name pos:start="53:9" pos:end="53:12">core</name><operator pos:start="53:13" pos:end="53:14">-&gt;</operator><name pos:start="53:15" pos:end="53:18">type</name></name> <operator pos:start="53:20" pos:end="53:20">=</operator> <name pos:start="53:22" pos:end="53:45">ACPI_SRAT_PROCESSOR_APIC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:20"><name pos:start="55:9" pos:end="55:12">core</name><operator pos:start="55:13" pos:end="55:14">-&gt;</operator><name pos:start="55:15" pos:end="55:20">length</name></name> <operator pos:start="55:22" pos:end="55:22">=</operator> <sizeof pos:start="55:24" pos:end="55:36">sizeof<argument_list pos:start="55:30" pos:end="55:36">(<argument pos:start="55:31" pos:end="55:35"><expr pos:start="55:31" pos:end="55:35"><operator pos:start="55:31" pos:end="55:31">*</operator><name pos:start="55:32" pos:end="55:35">core</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:38"><expr pos:start="57:9" pos:end="57:37"><name pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:12">core</name><operator pos:start="57:13" pos:end="57:14">-&gt;</operator><name pos:start="57:15" pos:end="57:27">local_apic_id</name></name> <operator pos:start="57:29" pos:end="57:29">=</operator> <name pos:start="57:31" pos:end="57:37">apic_id</name></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:42"><expr pos:start="59:9" pos:end="59:41"><name pos:start="59:9" pos:end="59:15">curnode</name> <operator pos:start="59:17" pos:end="59:17">=</operator> <name pos:start="59:19" pos:end="59:41"><name pos:start="59:19" pos:end="59:22">pcms</name><operator pos:start="59:23" pos:end="59:24">-&gt;</operator><name pos:start="59:25" pos:end="59:32">node_cpu</name><index pos:start="59:33" pos:end="59:41">[<expr pos:start="59:34" pos:end="59:40"><name pos:start="59:34" pos:end="59:40">apic_id</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:37"><expr pos:start="61:9" pos:end="61:36"><name pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:12">core</name><operator pos:start="61:13" pos:end="61:14">-&gt;</operator><name pos:start="61:15" pos:end="61:26">proximity_lo</name></name> <operator pos:start="61:28" pos:end="61:28">=</operator> <name pos:start="61:30" pos:end="61:36">curnode</name></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:41"><expr pos:start="63:9" pos:end="63:40"><call pos:start="63:9" pos:end="63:40"><name pos:start="63:9" pos:end="63:14">memset</name><argument_list pos:start="63:15" pos:end="63:40">(<argument pos:start="63:16" pos:end="63:33"><expr pos:start="63:16" pos:end="63:33"><name pos:start="63:16" pos:end="63:33"><name pos:start="63:16" pos:end="63:19">core</name><operator pos:start="63:20" pos:end="63:21">-&gt;</operator><name pos:start="63:22" pos:end="63:33">proximity_hi</name></name></expr></argument>, <argument pos:start="63:36" pos:end="63:36"><expr pos:start="63:36" pos:end="63:36"><literal type="number" pos:start="63:36" pos:end="63:36">0</literal></expr></argument>, <argument pos:start="63:39" pos:end="63:39"><expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:34"><expr pos:start="65:9" pos:end="65:33"><name pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:12">core</name><operator pos:start="65:13" pos:end="65:14">-&gt;</operator><name pos:start="65:15" pos:end="65:29">local_sapic_eid</name></name> <operator pos:start="65:31" pos:end="65:31">=</operator> <literal type="number" pos:start="65:33" pos:end="65:33">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:37"><expr pos:start="67:9" pos:end="67:36"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:12">core</name><operator pos:start="67:13" pos:end="67:14">-&gt;</operator><name pos:start="67:15" pos:end="67:19">flags</name></name> <operator pos:start="67:21" pos:end="67:21">=</operator> <call pos:start="67:23" pos:end="67:36"><name pos:start="67:23" pos:end="67:33">cpu_to_le32</name><argument_list pos:start="67:34" pos:end="67:36">(<argument pos:start="67:35" pos:end="67:35"><expr pos:start="67:35" pos:end="67:35"><literal type="number" pos:start="67:35" pos:end="67:35">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>





    <comment type="block" pos:start="75:5" pos:end="79:7">/* the memory map is a bit tricky, it contains at least one hole

     * from 640k-1M and possibly another one from 3.5G-4G.

     */</comment>

    <expr_stmt pos:start="81:5" pos:end="81:18"><expr pos:start="81:5" pos:end="81:17"><name pos:start="81:5" pos:end="81:13">next_base</name> <operator pos:start="81:15" pos:end="81:15">=</operator> <literal type="number" pos:start="81:17" pos:end="81:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:33"><expr pos:start="83:5" pos:end="83:32"><name pos:start="83:5" pos:end="83:14">numa_start</name> <operator pos:start="83:16" pos:end="83:16">=</operator> <name pos:start="83:18" pos:end="83:32"><name pos:start="83:18" pos:end="83:27">table_data</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:32">len</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="87:5" pos:end="87:58"><expr pos:start="87:5" pos:end="87:57"><name pos:start="87:5" pos:end="87:11">numamem</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <call pos:start="87:15" pos:end="87:57"><name pos:start="87:15" pos:end="87:28">acpi_data_push</name><argument_list pos:start="87:29" pos:end="87:57">(<argument pos:start="87:30" pos:end="87:39"><expr pos:start="87:30" pos:end="87:39"><name pos:start="87:30" pos:end="87:39">table_data</name></expr></argument>, <argument pos:start="87:42" pos:end="87:56"><expr pos:start="87:42" pos:end="87:56"><sizeof pos:start="87:42" pos:end="87:47">sizeof <name/></sizeof>*<name pos:start="87:50" pos:end="87:56">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:71"><expr pos:start="89:5" pos:end="89:70"><call pos:start="89:5" pos:end="89:70"><name pos:start="89:5" pos:end="89:21">build_srat_memory</name><argument_list pos:start="89:22" pos:end="89:70">(<argument pos:start="89:23" pos:end="89:29"><expr pos:start="89:23" pos:end="89:29"><name pos:start="89:23" pos:end="89:29">numamem</name></expr></argument>, <argument pos:start="89:32" pos:end="89:32"><expr pos:start="89:32" pos:end="89:32"><literal type="number" pos:start="89:32" pos:end="89:32">0</literal></expr></argument>, <argument pos:start="89:35" pos:end="89:44"><expr pos:start="89:35" pos:end="89:44"><literal type="number" pos:start="89:35" pos:end="89:37">640</literal> <operator pos:start="89:39" pos:end="89:39">*</operator> <literal type="number" pos:start="89:41" pos:end="89:44">1024</literal></expr></argument>, <argument pos:start="89:47" pos:end="89:47"><expr pos:start="89:47" pos:end="89:47"><literal type="number" pos:start="89:47" pos:end="89:47">0</literal></expr></argument>, <argument pos:start="89:50" pos:end="89:69"><expr pos:start="89:50" pos:end="89:69"><name pos:start="89:50" pos:end="89:69">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:28"><expr pos:start="91:5" pos:end="91:27"><name pos:start="91:5" pos:end="91:13">next_base</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <literal type="number" pos:start="91:17" pos:end="91:20">1024</literal> <operator pos:start="91:22" pos:end="91:22">*</operator> <literal type="number" pos:start="91:24" pos:end="91:27">1024</literal></expr>;</expr_stmt>

    <for pos:start="93:5" pos:end="141:5">for <control pos:start="93:9" pos:end="93:46">(<init pos:start="93:10" pos:end="93:15"><expr pos:start="93:10" pos:end="93:14"><name pos:start="93:10" pos:end="93:10">i</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <literal type="number" pos:start="93:14" pos:end="93:14">1</literal></expr>;</init> <condition pos:start="93:17" pos:end="93:41"><expr pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:17">i</name> <operator pos:start="93:19" pos:end="93:19">&lt;</operator> <name pos:start="93:21" pos:end="93:36"><name pos:start="93:21" pos:end="93:24">pcms</name><operator pos:start="93:25" pos:end="93:26">-&gt;</operator><name pos:start="93:27" pos:end="93:36">numa_nodes</name></name> <operator pos:start="93:38" pos:end="93:38">+</operator> <literal type="number" pos:start="93:40" pos:end="93:40">1</literal></expr>;</condition> <incr pos:start="93:43" pos:end="93:45"><expr pos:start="93:43" pos:end="93:45"><operator pos:start="93:43" pos:end="93:44">++</operator><name pos:start="93:45" pos:end="93:45">i</name></expr></incr>)</control> <block pos:start="93:48" pos:end="141:5">{<block_content pos:start="95:9" pos:end="139:48">

        <expr_stmt pos:start="95:9" pos:end="95:29"><expr pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:16">mem_base</name> <operator pos:start="95:18" pos:end="95:18">=</operator> <name pos:start="95:20" pos:end="95:28">next_base</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:40"><expr pos:start="97:9" pos:end="97:39"><name pos:start="97:9" pos:end="97:15">mem_len</name> <operator pos:start="97:17" pos:end="97:17">=</operator> <name pos:start="97:19" pos:end="97:39"><name pos:start="97:19" pos:end="97:22">pcms</name><operator pos:start="97:23" pos:end="97:24">-&gt;</operator><name pos:start="97:25" pos:end="97:32">node_mem</name><index pos:start="97:33" pos:end="97:39">[<expr pos:start="97:34" pos:end="97:38"><name pos:start="97:34" pos:end="97:34">i</name> <operator pos:start="97:36" pos:end="97:36">-</operator> <literal type="number" pos:start="97:38" pos:end="97:38">1</literal></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:19">(<expr pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:13">i</name> <operator pos:start="99:15" pos:end="99:16">==</operator> <literal type="number" pos:start="99:18" pos:end="99:18">1</literal></expr>)</condition> <block pos:start="99:21" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:35">

            <expr_stmt pos:start="101:13" pos:end="101:35"><expr pos:start="101:13" pos:end="101:34"><name pos:start="101:13" pos:end="101:19">mem_len</name> <operator pos:start="101:21" pos:end="101:22">-=</operator> <literal type="number" pos:start="101:24" pos:end="101:27">1024</literal> <operator pos:start="101:29" pos:end="101:29">*</operator> <literal type="number" pos:start="101:31" pos:end="101:34">1024</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:39"><expr pos:start="105:9" pos:end="105:38"><name pos:start="105:9" pos:end="105:17">next_base</name> <operator pos:start="105:19" pos:end="105:19">=</operator> <name pos:start="105:21" pos:end="105:28">mem_base</name> <operator pos:start="105:30" pos:end="105:30">+</operator> <name pos:start="105:32" pos:end="105:38">mem_len</name></expr>;</expr_stmt>



        <comment type="block" pos:start="109:9" pos:end="109:39">/* Cut out the ACPI_PCI hole */</comment>

        <if_stmt pos:start="111:9" pos:end="133:9"><if pos:start="111:9" pos:end="133:9">if <condition pos:start="111:12" pos:end="113:48">(<expr pos:start="111:13" pos:end="113:47"><name pos:start="111:13" pos:end="111:20">mem_base</name> <operator pos:start="111:22" pos:end="111:23">&lt;=</operator> <name pos:start="111:25" pos:end="111:47"><name pos:start="111:25" pos:end="111:28">pcms</name><operator pos:start="111:29" pos:end="111:30">-&gt;</operator><name pos:start="111:31" pos:end="111:47">below_4g_mem_size</name></name> <operator pos:start="111:49" pos:end="111:50">&amp;&amp;</operator>

            <name pos:start="113:13" pos:end="113:21">next_base</name> <operator pos:start="113:23" pos:end="113:23">&gt;</operator> <name pos:start="113:25" pos:end="113:47"><name pos:start="113:25" pos:end="113:28">pcms</name><operator pos:start="113:29" pos:end="113:30">-&gt;</operator><name pos:start="113:31" pos:end="113:47">below_4g_mem_size</name></name></expr>)</condition> <block pos:start="113:50" pos:end="133:9">{<block_content pos:start="115:13" pos:end="131:64">

            <expr_stmt pos:start="115:13" pos:end="115:59"><expr pos:start="115:13" pos:end="115:58"><name pos:start="115:13" pos:end="115:19">mem_len</name> <operator pos:start="115:21" pos:end="115:22">-=</operator> <name pos:start="115:24" pos:end="115:32">next_base</name> <operator pos:start="115:34" pos:end="115:34">-</operator> <name pos:start="115:36" pos:end="115:58"><name pos:start="115:36" pos:end="115:39">pcms</name><operator pos:start="115:40" pos:end="115:41">-&gt;</operator><name pos:start="115:42" pos:end="115:58">below_4g_mem_size</name></name></expr>;</expr_stmt>

            <if_stmt pos:start="117:13" pos:end="125:13"><if pos:start="117:13" pos:end="125:13">if <condition pos:start="117:16" pos:end="117:28">(<expr pos:start="117:17" pos:end="117:27"><name pos:start="117:17" pos:end="117:23">mem_len</name> <operator pos:start="117:25" pos:end="117:25">&gt;</operator> <literal type="number" pos:start="117:27" pos:end="117:27">0</literal></expr>)</condition> <block pos:start="117:30" pos:end="125:13">{<block_content pos:start="119:17" pos:end="123:56">

                <expr_stmt pos:start="119:17" pos:end="119:70"><expr pos:start="119:17" pos:end="119:69"><name pos:start="119:17" pos:end="119:23">numamem</name> <operator pos:start="119:25" pos:end="119:25">=</operator> <call pos:start="119:27" pos:end="119:69"><name pos:start="119:27" pos:end="119:40">acpi_data_push</name><argument_list pos:start="119:41" pos:end="119:69">(<argument pos:start="119:42" pos:end="119:51"><expr pos:start="119:42" pos:end="119:51"><name pos:start="119:42" pos:end="119:51">table_data</name></expr></argument>, <argument pos:start="119:54" pos:end="119:68"><expr pos:start="119:54" pos:end="119:68"><sizeof pos:start="119:54" pos:end="119:59">sizeof <name/></sizeof>*<name pos:start="119:62" pos:end="119:68">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="121:17" pos:end="123:56"><expr pos:start="121:17" pos:end="123:55"><call pos:start="121:17" pos:end="123:55"><name pos:start="121:17" pos:end="121:33">build_srat_memory</name><argument_list pos:start="121:34" pos:end="123:55">(<argument pos:start="121:35" pos:end="121:41"><expr pos:start="121:35" pos:end="121:41"><name pos:start="121:35" pos:end="121:41">numamem</name></expr></argument>, <argument pos:start="121:44" pos:end="121:51"><expr pos:start="121:44" pos:end="121:51"><name pos:start="121:44" pos:end="121:51">mem_base</name></expr></argument>, <argument pos:start="121:54" pos:end="121:60"><expr pos:start="121:54" pos:end="121:60"><name pos:start="121:54" pos:end="121:60">mem_len</name></expr></argument>, <argument pos:start="121:63" pos:end="121:67"><expr pos:start="121:63" pos:end="121:67"><name pos:start="121:63" pos:end="121:63">i</name> <operator pos:start="121:65" pos:end="121:65">-</operator> <literal type="number" pos:start="121:67" pos:end="121:67">1</literal></expr></argument>,

                                  <argument pos:start="123:35" pos:end="123:54"><expr pos:start="123:35" pos:end="123:54"><name pos:start="123:35" pos:end="123:54">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:34"><expr pos:start="127:13" pos:end="127:33"><name pos:start="127:13" pos:end="127:20">mem_base</name> <operator pos:start="127:22" pos:end="127:22">=</operator> <literal type="number" pos:start="127:24" pos:end="127:27">1ULL</literal> <operator pos:start="127:29" pos:end="127:30">&lt;&lt;</operator> <literal type="number" pos:start="127:32" pos:end="127:33">32</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:58"><expr pos:start="129:13" pos:end="129:57"><name pos:start="129:13" pos:end="129:19">mem_len</name> <operator pos:start="129:21" pos:end="129:21">=</operator> <name pos:start="129:23" pos:end="129:31">next_base</name> <operator pos:start="129:33" pos:end="129:33">-</operator> <name pos:start="129:35" pos:end="129:57"><name pos:start="129:35" pos:end="129:38">pcms</name><operator pos:start="129:39" pos:end="129:40">-&gt;</operator><name pos:start="129:41" pos:end="129:57">below_4g_mem_size</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:64"><expr pos:start="131:13" pos:end="131:63"><name pos:start="131:13" pos:end="131:21">next_base</name> <operator pos:start="131:23" pos:end="131:24">+=</operator> <operator pos:start="131:26" pos:end="131:26">(</operator><literal type="number" pos:start="131:27" pos:end="131:30">1ULL</literal> <operator pos:start="131:32" pos:end="131:33">&lt;&lt;</operator> <literal type="number" pos:start="131:35" pos:end="131:36">32</literal><operator pos:start="131:37" pos:end="131:37">)</operator> <operator pos:start="131:39" pos:end="131:39">-</operator> <name pos:start="131:41" pos:end="131:63"><name pos:start="131:41" pos:end="131:44">pcms</name><operator pos:start="131:45" pos:end="131:46">-&gt;</operator><name pos:start="131:47" pos:end="131:63">below_4g_mem_size</name></name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:62"><expr pos:start="135:9" pos:end="135:61"><name pos:start="135:9" pos:end="135:15">numamem</name> <operator pos:start="135:17" pos:end="135:17">=</operator> <call pos:start="135:19" pos:end="135:61"><name pos:start="135:19" pos:end="135:32">acpi_data_push</name><argument_list pos:start="135:33" pos:end="135:61">(<argument pos:start="135:34" pos:end="135:43"><expr pos:start="135:34" pos:end="135:43"><name pos:start="135:34" pos:end="135:43">table_data</name></expr></argument>, <argument pos:start="135:46" pos:end="135:60"><expr pos:start="135:46" pos:end="135:60"><sizeof pos:start="135:46" pos:end="135:51">sizeof <name/></sizeof>*<name pos:start="135:54" pos:end="135:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="137:9" pos:end="139:48"><expr pos:start="137:9" pos:end="139:47"><call pos:start="137:9" pos:end="139:47"><name pos:start="137:9" pos:end="137:25">build_srat_memory</name><argument_list pos:start="137:26" pos:end="139:47">(<argument pos:start="137:27" pos:end="137:33"><expr pos:start="137:27" pos:end="137:33"><name pos:start="137:27" pos:end="137:33">numamem</name></expr></argument>, <argument pos:start="137:36" pos:end="137:43"><expr pos:start="137:36" pos:end="137:43"><name pos:start="137:36" pos:end="137:43">mem_base</name></expr></argument>, <argument pos:start="137:46" pos:end="137:52"><expr pos:start="137:46" pos:end="137:52"><name pos:start="137:46" pos:end="137:52">mem_len</name></expr></argument>, <argument pos:start="137:55" pos:end="137:59"><expr pos:start="137:55" pos:end="137:59"><name pos:start="137:55" pos:end="137:55">i</name> <operator pos:start="137:57" pos:end="137:57">-</operator> <literal type="number" pos:start="137:59" pos:end="137:59">1</literal></expr></argument>,

                          <argument pos:start="139:27" pos:end="139:46"><expr pos:start="139:27" pos:end="139:46"><name pos:start="139:27" pos:end="139:46">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="143:5" pos:end="143:61"><expr pos:start="143:5" pos:end="143:60"><name pos:start="143:5" pos:end="143:9">slots</name> <operator pos:start="143:11" pos:end="143:11">=</operator> <operator pos:start="143:13" pos:end="143:13">(</operator><name pos:start="143:14" pos:end="143:28"><name pos:start="143:14" pos:end="143:23">table_data</name><operator pos:start="143:24" pos:end="143:25">-&gt;</operator><name pos:start="143:26" pos:end="143:28">len</name></name> <operator pos:start="143:30" pos:end="143:30">-</operator> <name pos:start="143:32" pos:end="143:41">numa_start</name><operator pos:start="143:42" pos:end="143:42">)</operator> <operator pos:start="143:44" pos:end="143:44">/</operator> <sizeof pos:start="143:46" pos:end="143:51">sizeof <name/></sizeof>*<name pos:start="143:54" pos:end="143:60">numamem</name></expr>;</expr_stmt>

    <for pos:start="145:5" pos:end="151:5">for <control pos:start="145:9" pos:end="145:49">(<init pos:start="145:10" pos:end="145:10">;</init> <condition pos:start="145:12" pos:end="145:40"><expr pos:start="145:12" pos:end="145:39"><name pos:start="145:12" pos:end="145:16">slots</name> <operator pos:start="145:18" pos:end="145:18">&lt;</operator> <name pos:start="145:20" pos:end="145:35"><name pos:start="145:20" pos:end="145:23">pcms</name><operator pos:start="145:24" pos:end="145:25">-&gt;</operator><name pos:start="145:26" pos:end="145:35">numa_nodes</name></name> <operator pos:start="145:37" pos:end="145:37">+</operator> <literal type="number" pos:start="145:39" pos:end="145:39">2</literal></expr>;</condition> <incr pos:start="145:42" pos:end="145:48"><expr pos:start="145:42" pos:end="145:48"><name pos:start="145:42" pos:end="145:46">slots</name><operator pos:start="145:47" pos:end="145:48">++</operator></expr></incr>)</control> <block pos:start="145:51" pos:end="151:5">{<block_content pos:start="147:9" pos:end="149:66">

        <expr_stmt pos:start="147:9" pos:end="147:62"><expr pos:start="147:9" pos:end="147:61"><name pos:start="147:9" pos:end="147:15">numamem</name> <operator pos:start="147:17" pos:end="147:17">=</operator> <call pos:start="147:19" pos:end="147:61"><name pos:start="147:19" pos:end="147:32">acpi_data_push</name><argument_list pos:start="147:33" pos:end="147:61">(<argument pos:start="147:34" pos:end="147:43"><expr pos:start="147:34" pos:end="147:43"><name pos:start="147:34" pos:end="147:43">table_data</name></expr></argument>, <argument pos:start="147:46" pos:end="147:60"><expr pos:start="147:46" pos:end="147:60"><sizeof pos:start="147:46" pos:end="147:51">sizeof <name/></sizeof>*<name pos:start="147:54" pos:end="147:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="149:9" pos:end="149:66"><expr pos:start="149:9" pos:end="149:65"><call pos:start="149:9" pos:end="149:65"><name pos:start="149:9" pos:end="149:25">build_srat_memory</name><argument_list pos:start="149:26" pos:end="149:65">(<argument pos:start="149:27" pos:end="149:33"><expr pos:start="149:27" pos:end="149:33"><name pos:start="149:27" pos:end="149:33">numamem</name></expr></argument>, <argument pos:start="149:36" pos:end="149:36"><expr pos:start="149:36" pos:end="149:36"><literal type="number" pos:start="149:36" pos:end="149:36">0</literal></expr></argument>, <argument pos:start="149:39" pos:end="149:39"><expr pos:start="149:39" pos:end="149:39"><literal type="number" pos:start="149:39" pos:end="149:39">0</literal></expr></argument>, <argument pos:start="149:42" pos:end="149:42"><expr pos:start="149:42" pos:end="149:42"><literal type="number" pos:start="149:42" pos:end="149:42">0</literal></expr></argument>, <argument pos:start="149:45" pos:end="149:64"><expr pos:start="149:45" pos:end="149:64"><name pos:start="149:45" pos:end="149:64">MEM_AFFINITY_NOFLAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="155:5" pos:end="163:7">/*

     * Entry is required for Windows to enable memory hotplug in OS.

     * Memory devices may override proximity set by this entry,

     * providing _PXM method if necessary.

     */</comment>

    <if_stmt pos:start="165:5" pos:end="175:5"><if pos:start="165:5" pos:end="175:5">if <condition pos:start="165:8" pos:end="165:40">(<expr pos:start="165:9" pos:end="165:39"><name pos:start="165:9" pos:end="165:39">hotplugabble_address_space_size</name></expr>)</condition> <block pos:start="165:42" pos:end="175:5">{<block_content pos:start="167:9" pos:end="173:76">

        <expr_stmt pos:start="167:9" pos:end="167:62"><expr pos:start="167:9" pos:end="167:61"><name pos:start="167:9" pos:end="167:15">numamem</name> <operator pos:start="167:17" pos:end="167:17">=</operator> <call pos:start="167:19" pos:end="167:61"><name pos:start="167:19" pos:end="167:32">acpi_data_push</name><argument_list pos:start="167:33" pos:end="167:61">(<argument pos:start="167:34" pos:end="167:43"><expr pos:start="167:34" pos:end="167:43"><name pos:start="167:34" pos:end="167:43">table_data</name></expr></argument>, <argument pos:start="167:46" pos:end="167:60"><expr pos:start="167:46" pos:end="167:60"><sizeof pos:start="167:46" pos:end="167:51">sizeof <name/></sizeof>*<name pos:start="167:54" pos:end="167:60">numamem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="169:9" pos:end="173:76"><expr pos:start="169:9" pos:end="173:75"><call pos:start="169:9" pos:end="173:75"><name pos:start="169:9" pos:end="169:25">build_srat_memory</name><argument_list pos:start="169:26" pos:end="173:75">(<argument pos:start="169:27" pos:end="169:33"><expr pos:start="169:27" pos:end="169:33"><name pos:start="169:27" pos:end="169:33">numamem</name></expr></argument>, <argument pos:start="169:36" pos:end="169:60"><expr pos:start="169:36" pos:end="169:60"><name pos:start="169:36" pos:end="169:60"><name pos:start="169:36" pos:end="169:39">pcms</name><operator pos:start="169:40" pos:end="169:41">-&gt;</operator><name pos:start="169:42" pos:end="169:55">hotplug_memory</name><operator pos:start="169:56" pos:end="169:56">.</operator><name pos:start="169:57" pos:end="169:60">base</name></name></expr></argument>,

                          <argument pos:start="171:27" pos:end="171:57"><expr pos:start="171:27" pos:end="171:57"><name pos:start="171:27" pos:end="171:57">hotplugabble_address_space_size</name></expr></argument>, <argument pos:start="171:60" pos:end="171:60"><expr pos:start="171:60" pos:end="171:60"><literal type="number" pos:start="171:60" pos:end="171:60">0</literal></expr></argument>,

                          <argument pos:start="173:27" pos:end="173:74"><expr pos:start="173:27" pos:end="173:74"><name pos:start="173:27" pos:end="173:51">MEM_AFFINITY_HOTPLUGGABLE</name> <operator pos:start="173:53" pos:end="173:53">|</operator> <name pos:start="173:55" pos:end="173:74">MEM_AFFINITY_ENABLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="179:5" pos:end="185:62"><expr pos:start="179:5" pos:end="185:61"><call pos:start="179:5" pos:end="185:61"><name pos:start="179:5" pos:end="179:16">build_header</name><argument_list pos:start="179:17" pos:end="185:61">(<argument pos:start="179:18" pos:end="179:23"><expr pos:start="179:18" pos:end="179:23"><name pos:start="179:18" pos:end="179:23">linker</name></expr></argument>, <argument pos:start="179:26" pos:end="179:35"><expr pos:start="179:26" pos:end="179:35"><name pos:start="179:26" pos:end="179:35">table_data</name></expr></argument>,

                 <argument pos:start="181:18" pos:end="181:56"><expr pos:start="181:18" pos:end="181:56"><operator pos:start="181:18" pos:end="181:18">(</operator><name pos:start="181:19" pos:end="181:22">void</name> <operator pos:start="181:24" pos:end="181:24">*</operator><operator pos:start="181:25" pos:end="181:25">)</operator><operator pos:start="181:26" pos:end="181:26">(</operator><name pos:start="181:27" pos:end="181:42"><name pos:start="181:27" pos:end="181:36">table_data</name><operator pos:start="181:37" pos:end="181:38">-&gt;</operator><name pos:start="181:39" pos:end="181:42">data</name></name> <operator pos:start="181:44" pos:end="181:44">+</operator> <name pos:start="181:46" pos:end="181:55">srat_start</name><operator pos:start="181:56" pos:end="181:56">)</operator></expr></argument>,

                 <argument pos:start="183:18" pos:end="183:23"><expr pos:start="183:18" pos:end="183:23"><literal type="string" pos:start="183:18" pos:end="183:23">"SRAT"</literal></expr></argument>,

                 <argument pos:start="185:18" pos:end="185:45"><expr pos:start="185:18" pos:end="185:45"><name pos:start="185:18" pos:end="185:32"><name pos:start="185:18" pos:end="185:27">table_data</name><operator pos:start="185:28" pos:end="185:29">-&gt;</operator><name pos:start="185:30" pos:end="185:32">len</name></name> <operator pos:start="185:34" pos:end="185:34">-</operator> <name pos:start="185:36" pos:end="185:45">srat_start</name></expr></argument>, <argument pos:start="185:48" pos:end="185:48"><expr pos:start="185:48" pos:end="185:48"><literal type="number" pos:start="185:48" pos:end="185:48">1</literal></expr></argument>, <argument pos:start="185:51" pos:end="185:54"><expr pos:start="185:51" pos:end="185:54"><name pos:start="185:51" pos:end="185:54">NULL</name></expr></argument>, <argument pos:start="185:57" pos:end="185:60"><expr pos:start="185:57" pos:end="185:60"><name pos:start="185:57" pos:end="185:60">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:21"><expr pos:start="187:5" pos:end="187:20"><call pos:start="187:5" pos:end="187:20"><name pos:start="187:5" pos:end="187:10">g_free</name><argument_list pos:start="187:11" pos:end="187:20">(<argument pos:start="187:12" pos:end="187:19"><expr pos:start="187:12" pos:end="187:19"><name pos:start="187:12" pos:end="187:19">apic_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>
</unit>
