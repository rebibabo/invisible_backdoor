<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2539.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:28">net_rx_packet</name><parameter_list pos:start="1:29" pos:end="1:81">(<parameter pos:start="1:30" pos:end="1:47"><decl pos:start="1:30" pos:end="1:47"><type pos:start="1:30" pos:end="1:47"><name pos:start="1:30" pos:end="1:43">NetClientState</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:47">nc</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:67"><decl pos:start="1:50" pos:end="1:67"><type pos:start="1:50" pos:end="1:67"><specifier pos:start="1:50" pos:end="1:54">const</specifier> <name pos:start="1:56" pos:end="1:62">uint8_t</name> <modifier pos:start="1:64" pos:end="1:64">*</modifier></type><name pos:start="1:65" pos:end="1:67">buf</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:80"><decl pos:start="1:70" pos:end="1:80"><type pos:start="1:70" pos:end="1:80"><name pos:start="1:70" pos:end="1:75">size_t</name></type> <name pos:start="1:77" pos:end="1:80">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:16">

    <decl_stmt pos:start="5:5" pos:end="5:55"><decl pos:start="5:5" pos:end="5:54"><type pos:start="5:5" pos:end="5:22"><name pos:start="5:5" pos:end="5:20"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:20">XenNetDev</name></name> <modifier pos:start="5:22" pos:end="5:22">*</modifier></type><name pos:start="5:23" pos:end="5:28">netdev</name> <init pos:start="5:30" pos:end="5:54">= <expr pos:start="5:32" pos:end="5:54"><call pos:start="5:32" pos:end="5:54"><name pos:start="5:32" pos:end="5:50">qemu_get_nic_opaque</name><argument_list pos:start="5:51" pos:end="5:54">(<argument pos:start="5:52" pos:end="5:53"><expr pos:start="5:52" pos:end="5:53"><name pos:start="5:52" pos:end="5:53">nc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:22">netif_rx_request_t</name></type> <name pos:start="7:24" pos:end="7:28">rxreq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:15"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">RING_IDX</name></type> <name pos:start="9:14" pos:end="9:15">rc</name></decl>, <decl pos:start="9:18" pos:end="9:19"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:18" pos:end="9:19">rp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:14"><type pos:start="11:5" pos:end="11:10"><name pos:start="11:5" pos:end="11:8">void</name> <modifier pos:start="11:10" pos:end="11:10">*</modifier></type><name pos:start="11:11" pos:end="11:14">page</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:56">(<expr pos:start="15:9" pos:end="15:55"><name pos:start="15:9" pos:end="15:31"><name pos:start="15:9" pos:end="15:14">netdev</name><operator pos:start="15:15" pos:end="15:16">-&gt;</operator><name pos:start="15:17" pos:end="15:22">xendev</name><operator pos:start="15:23" pos:end="15:23">.</operator><name pos:start="15:24" pos:end="15:31">be_state</name></name> <operator pos:start="15:33" pos:end="15:34">!=</operator> <name pos:start="15:36" pos:end="15:55">XenbusStateConnected</name></expr>)</condition> <block pos:start="15:58" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:34"><expr pos:start="23:5" pos:end="23:33"><name pos:start="23:5" pos:end="23:6">rc</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <name pos:start="23:10" pos:end="23:33"><name pos:start="23:10" pos:end="23:15">netdev</name><operator pos:start="23:16" pos:end="23:17">-&gt;</operator><name pos:start="23:18" pos:end="23:24">rx_ring</name><operator pos:start="23:25" pos:end="23:25">.</operator><name pos:start="23:26" pos:end="23:33">req_cons</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:6">rp</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:40"><name pos:start="25:10" pos:end="25:15">netdev</name><operator pos:start="25:16" pos:end="25:17">-&gt;</operator><name pos:start="25:18" pos:end="25:24">rx_ring</name><operator pos:start="25:25" pos:end="25:25">.</operator><name pos:start="25:26" pos:end="25:30">sring</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:40">req_prod</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:14"><expr pos:start="27:5" pos:end="27:13"><call pos:start="27:5" pos:end="27:13"><name pos:start="27:5" pos:end="27:11">xen_rmb</name><argument_list pos:start="27:12" pos:end="27:13">()</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="27:16" pos:end="27:62">/* Ensure we see queued requests up to 'rp'. */</comment>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:69">(<expr pos:start="31:9" pos:end="31:68"><name pos:start="31:9" pos:end="31:10">rc</name> <operator pos:start="31:12" pos:end="31:13">==</operator> <name pos:start="31:15" pos:end="31:16">rp</name> <operator pos:start="31:18" pos:end="31:19">||</operator> <call pos:start="31:21" pos:end="31:68"><name pos:start="31:21" pos:end="31:46">RING_REQUEST_CONS_OVERFLOW</name><argument_list pos:start="31:47" pos:end="31:68">(<argument pos:start="31:48" pos:end="31:63"><expr pos:start="31:48" pos:end="31:63"><operator pos:start="31:48" pos:end="31:48">&amp;</operator><name pos:start="31:49" pos:end="31:63"><name pos:start="31:49" pos:end="31:54">netdev</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:63">rx_ring</name></name></expr></argument>, <argument pos:start="31:66" pos:end="31:67"><expr pos:start="31:66" pos:end="31:67"><name pos:start="31:66" pos:end="31:67">rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:71" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:18">

        <expr_stmt pos:start="33:9" pos:end="33:70"><expr pos:start="33:9" pos:end="33:69"><call pos:start="33:9" pos:end="33:69"><name pos:start="33:9" pos:end="33:21">xen_be_printf</name><argument_list pos:start="33:22" pos:end="33:69">(<argument pos:start="33:23" pos:end="33:37"><expr pos:start="33:23" pos:end="33:37"><operator pos:start="33:23" pos:end="33:23">&amp;</operator><name pos:start="33:24" pos:end="33:37"><name pos:start="33:24" pos:end="33:29">netdev</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:37">xendev</name></name></expr></argument>, <argument pos:start="33:40" pos:end="33:40"><expr pos:start="33:40" pos:end="33:40"><literal type="number" pos:start="33:40" pos:end="33:40">2</literal></expr></argument>, <argument pos:start="33:43" pos:end="33:68"><expr pos:start="33:43" pos:end="33:68"><literal type="string" pos:start="33:43" pos:end="33:68">"no buffer, drop packet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="47:5"><if pos:start="39:5" pos:end="47:5">if <condition pos:start="39:8" pos:end="39:43">(<expr pos:start="39:9" pos:end="39:42"><name pos:start="39:9" pos:end="39:12">size</name> <operator pos:start="39:14" pos:end="39:14">&gt;</operator> <name pos:start="39:16" pos:end="39:27">XC_PAGE_SIZE</name> <operator pos:start="39:29" pos:end="39:29">-</operator> <name pos:start="39:31" pos:end="39:42">NET_IP_ALIGN</name></expr>)</condition> <block pos:start="39:45" pos:end="47:5">{<block_content pos:start="41:9" pos:end="45:18">

        <expr_stmt pos:start="41:9" pos:end="43:72"><expr pos:start="41:9" pos:end="43:71"><call pos:start="41:9" pos:end="43:71"><name pos:start="41:9" pos:end="41:21">xen_be_printf</name><argument_list pos:start="41:22" pos:end="43:71">(<argument pos:start="41:23" pos:end="41:37"><expr pos:start="41:23" pos:end="41:37"><operator pos:start="41:23" pos:end="41:23">&amp;</operator><name pos:start="41:24" pos:end="41:37"><name pos:start="41:24" pos:end="41:29">netdev</name><operator pos:start="41:30" pos:end="41:31">-&gt;</operator><name pos:start="41:32" pos:end="41:37">xendev</name></name></expr></argument>, <argument pos:start="41:40" pos:end="41:40"><expr pos:start="41:40" pos:end="41:40"><literal type="number" pos:start="41:40" pos:end="41:40">0</literal></expr></argument>, <argument pos:start="41:43" pos:end="41:70"><expr pos:start="41:43" pos:end="41:70"><literal type="string" pos:start="41:43" pos:end="41:70">"packet too big (%lu &gt; %ld)"</literal></expr></argument>,

                      <argument pos:start="43:23" pos:end="43:41"><expr pos:start="43:23" pos:end="43:41"><operator pos:start="43:23" pos:end="43:23">(</operator><name pos:start="43:24" pos:end="43:31">unsigned</name> <name pos:start="43:33" pos:end="43:36">long</name><operator pos:start="43:37" pos:end="43:37">)</operator><name pos:start="43:38" pos:end="43:41">size</name></expr></argument>, <argument pos:start="43:44" pos:end="43:70"><expr pos:start="43:44" pos:end="43:70"><name pos:start="43:44" pos:end="43:55">XC_PAGE_SIZE</name> <operator pos:start="43:57" pos:end="43:57">-</operator> <name pos:start="43:59" pos:end="43:70">NET_IP_ALIGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="45:9" pos:end="45:18">return <expr pos:start="45:16" pos:end="45:17"><operator pos:start="45:16" pos:end="45:16">-</operator><literal type="number" pos:start="45:17" pos:end="45:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:74"><expr pos:start="51:5" pos:end="51:73"><call pos:start="51:5" pos:end="51:73"><name pos:start="51:5" pos:end="51:10">memcpy</name><argument_list pos:start="51:11" pos:end="51:73">(<argument pos:start="51:12" pos:end="51:17"><expr pos:start="51:12" pos:end="51:17"><operator pos:start="51:12" pos:end="51:12">&amp;</operator><name pos:start="51:13" pos:end="51:17">rxreq</name></expr></argument>, <argument pos:start="51:20" pos:end="51:57"><expr pos:start="51:20" pos:end="51:57"><call pos:start="51:20" pos:end="51:57"><name pos:start="51:20" pos:end="51:35">RING_GET_REQUEST</name><argument_list pos:start="51:36" pos:end="51:57">(<argument pos:start="51:37" pos:end="51:52"><expr pos:start="51:37" pos:end="51:52"><operator pos:start="51:37" pos:end="51:37">&amp;</operator><name pos:start="51:38" pos:end="51:52"><name pos:start="51:38" pos:end="51:43">netdev</name><operator pos:start="51:44" pos:end="51:45">-&gt;</operator><name pos:start="51:46" pos:end="51:52">rx_ring</name></name></expr></argument>, <argument pos:start="51:55" pos:end="51:56"><expr pos:start="51:55" pos:end="51:56"><name pos:start="51:55" pos:end="51:56">rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="51:60" pos:end="51:72"><expr pos:start="51:60" pos:end="51:72"><sizeof pos:start="51:60" pos:end="51:72">sizeof<argument_list pos:start="51:66" pos:end="51:72">(<argument pos:start="51:67" pos:end="51:71"><expr pos:start="51:67" pos:end="51:71"><name pos:start="51:67" pos:end="51:71">rxreq</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:36"><expr pos:start="53:5" pos:end="53:35"><name pos:start="53:5" pos:end="53:28"><name pos:start="53:5" pos:end="53:10">netdev</name><operator pos:start="53:11" pos:end="53:12">-&gt;</operator><name pos:start="53:13" pos:end="53:19">rx_ring</name><operator pos:start="53:20" pos:end="53:20">.</operator><name pos:start="53:21" pos:end="53:28">req_cons</name></name> <operator pos:start="53:30" pos:end="53:30">=</operator> <operator pos:start="53:32" pos:end="53:33">++</operator><name pos:start="53:34" pos:end="53:35">rc</name></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="61:59"><expr pos:start="57:5" pos:end="61:58"><name pos:start="57:5" pos:end="57:8">page</name> <operator pos:start="57:10" pos:end="57:10">=</operator> <call pos:start="57:12" pos:end="61:58"><name pos:start="57:12" pos:end="57:34">xc_gnttab_map_grant_ref</name><argument_list pos:start="57:35" pos:end="61:58">(<argument pos:start="57:36" pos:end="57:59"><expr pos:start="57:36" pos:end="57:59"><name pos:start="57:36" pos:end="57:59"><name pos:start="57:36" pos:end="57:41">netdev</name><operator pos:start="57:42" pos:end="57:43">-&gt;</operator><name pos:start="57:44" pos:end="57:49">xendev</name><operator pos:start="57:50" pos:end="57:50">.</operator><name pos:start="57:51" pos:end="57:59">gnttabdev</name></name></expr></argument>,

                                   <argument pos:start="59:36" pos:end="59:53"><expr pos:start="59:36" pos:end="59:53"><name pos:start="59:36" pos:end="59:53"><name pos:start="59:36" pos:end="59:41">netdev</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:49">xendev</name><operator pos:start="59:50" pos:end="59:50">.</operator><name pos:start="59:51" pos:end="59:53">dom</name></name></expr></argument>,

                                   <argument pos:start="61:36" pos:end="61:45"><expr pos:start="61:36" pos:end="61:45"><name pos:start="61:36" pos:end="61:45"><name pos:start="61:36" pos:end="61:40">rxreq</name><operator pos:start="61:41" pos:end="61:41">.</operator><name pos:start="61:42" pos:end="61:45">gref</name></name></expr></argument>, <argument pos:start="61:48" pos:end="61:57"><expr pos:start="61:48" pos:end="61:57"><name pos:start="61:48" pos:end="61:57">PROT_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="63:5" pos:end="73:5"><if pos:start="63:5" pos:end="73:5">if <condition pos:start="63:8" pos:end="63:21">(<expr pos:start="63:9" pos:end="63:20"><name pos:start="63:9" pos:end="63:12">page</name> <operator pos:start="63:14" pos:end="63:15">==</operator> <name pos:start="63:17" pos:end="63:20">NULL</name></expr>)</condition> <block pos:start="63:23" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:18">

        <expr_stmt pos:start="65:9" pos:end="67:34"><expr pos:start="65:9" pos:end="67:33"><call pos:start="65:9" pos:end="67:33"><name pos:start="65:9" pos:end="65:21">xen_be_printf</name><argument_list pos:start="65:22" pos:end="67:33">(<argument pos:start="65:23" pos:end="65:37"><expr pos:start="65:23" pos:end="65:37"><operator pos:start="65:23" pos:end="65:23">&amp;</operator><name pos:start="65:24" pos:end="65:37"><name pos:start="65:24" pos:end="65:29">netdev</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:37">xendev</name></name></expr></argument>, <argument pos:start="65:40" pos:end="65:40"><expr pos:start="65:40" pos:end="65:40"><literal type="number" pos:start="65:40" pos:end="65:40">0</literal></expr></argument>, <argument pos:start="65:43" pos:end="65:84"><expr pos:start="65:43" pos:end="65:84"><literal type="string" pos:start="65:43" pos:end="65:84">"error: rx gref dereference failed (%d)\n"</literal></expr></argument>,

                      <argument pos:start="67:23" pos:end="67:32"><expr pos:start="67:23" pos:end="67:32"><name pos:start="67:23" pos:end="67:32"><name pos:start="67:23" pos:end="67:27">rxreq</name><operator pos:start="67:28" pos:end="67:28">.</operator><name pos:start="67:29" pos:end="67:32">gref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:66"><expr pos:start="69:9" pos:end="69:65"><call pos:start="69:9" pos:end="69:65"><name pos:start="69:9" pos:end="69:23">net_rx_response</name><argument_list pos:start="69:24" pos:end="69:65">(<argument pos:start="69:25" pos:end="69:30"><expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:30">netdev</name></expr></argument>, <argument pos:start="69:33" pos:end="69:38"><expr pos:start="69:33" pos:end="69:38"><operator pos:start="69:33" pos:end="69:33">&amp;</operator><name pos:start="69:34" pos:end="69:38">rxreq</name></expr></argument>, <argument pos:start="69:41" pos:end="69:55"><expr pos:start="69:41" pos:end="69:55"><name pos:start="69:41" pos:end="69:55">NETIF_RSP_ERROR</name></expr></argument>, <argument pos:start="69:58" pos:end="69:58"><expr pos:start="69:58" pos:end="69:58"><literal type="number" pos:start="69:58" pos:end="69:58">0</literal></expr></argument>, <argument pos:start="69:61" pos:end="69:61"><expr pos:start="69:61" pos:end="69:61"><literal type="number" pos:start="69:61" pos:end="69:61">0</literal></expr></argument>, <argument pos:start="69:64" pos:end="69:64"><expr pos:start="69:64" pos:end="69:64"><literal type="number" pos:start="69:64" pos:end="69:64">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="71:9" pos:end="71:18">return <expr pos:start="71:16" pos:end="71:17"><operator pos:start="71:16" pos:end="71:16">-</operator><literal type="number" pos:start="71:17" pos:end="71:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:43"><expr pos:start="75:5" pos:end="75:42"><call pos:start="75:5" pos:end="75:42"><name pos:start="75:5" pos:end="75:10">memcpy</name><argument_list pos:start="75:11" pos:end="75:42">(<argument pos:start="75:12" pos:end="75:30"><expr pos:start="75:12" pos:end="75:30"><name pos:start="75:12" pos:end="75:15">page</name> <operator pos:start="75:17" pos:end="75:17">+</operator> <name pos:start="75:19" pos:end="75:30">NET_IP_ALIGN</name></expr></argument>, <argument pos:start="75:33" pos:end="75:35"><expr pos:start="75:33" pos:end="75:35"><name pos:start="75:33" pos:end="75:35">buf</name></expr></argument>, <argument pos:start="75:38" pos:end="75:41"><expr pos:start="75:38" pos:end="75:41"><name pos:start="75:38" pos:end="75:41">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:56"><expr pos:start="77:5" pos:end="77:55"><call pos:start="77:5" pos:end="77:55"><name pos:start="77:5" pos:end="77:20">xc_gnttab_munmap</name><argument_list pos:start="77:21" pos:end="77:55">(<argument pos:start="77:22" pos:end="77:45"><expr pos:start="77:22" pos:end="77:45"><name pos:start="77:22" pos:end="77:45"><name pos:start="77:22" pos:end="77:27">netdev</name><operator pos:start="77:28" pos:end="77:29">-&gt;</operator><name pos:start="77:30" pos:end="77:35">xendev</name><operator pos:start="77:36" pos:end="77:36">.</operator><name pos:start="77:37" pos:end="77:45">gnttabdev</name></name></expr></argument>, <argument pos:start="77:48" pos:end="77:51"><expr pos:start="77:48" pos:end="77:51"><name pos:start="77:48" pos:end="77:51">page</name></expr></argument>, <argument pos:start="77:54" pos:end="77:54"><expr pos:start="77:54" pos:end="77:54"><literal type="number" pos:start="77:54" pos:end="77:54">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:75"><expr pos:start="79:5" pos:end="79:74"><call pos:start="79:5" pos:end="79:74"><name pos:start="79:5" pos:end="79:19">net_rx_response</name><argument_list pos:start="79:20" pos:end="79:74">(<argument pos:start="79:21" pos:end="79:26"><expr pos:start="79:21" pos:end="79:26"><name pos:start="79:21" pos:end="79:26">netdev</name></expr></argument>, <argument pos:start="79:29" pos:end="79:34"><expr pos:start="79:29" pos:end="79:34"><operator pos:start="79:29" pos:end="79:29">&amp;</operator><name pos:start="79:30" pos:end="79:34">rxreq</name></expr></argument>, <argument pos:start="79:37" pos:end="79:50"><expr pos:start="79:37" pos:end="79:50"><name pos:start="79:37" pos:end="79:50">NETIF_RSP_OKAY</name></expr></argument>, <argument pos:start="79:53" pos:end="79:64"><expr pos:start="79:53" pos:end="79:64"><name pos:start="79:53" pos:end="79:64">NET_IP_ALIGN</name></expr></argument>, <argument pos:start="79:67" pos:end="79:70"><expr pos:start="79:67" pos:end="79:70"><name pos:start="79:67" pos:end="79:70">size</name></expr></argument>, <argument pos:start="79:73" pos:end="79:73"><expr pos:start="79:73" pos:end="79:73"><literal type="number" pos:start="79:73" pos:end="79:73">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="83:5" pos:end="83:16">return <expr pos:start="83:12" pos:end="83:15"><name pos:start="83:12" pos:end="83:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
