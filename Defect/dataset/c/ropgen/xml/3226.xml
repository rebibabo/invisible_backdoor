<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3226.c" pos:tabs="8"><function pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:27">virtio_scsi_push_event</name><parameter_list pos:start="1:28" pos:end="3:60">(<parameter pos:start="1:29" pos:end="1:41"><decl pos:start="1:29" pos:end="1:41"><type pos:start="1:29" pos:end="1:41"><name pos:start="1:29" pos:end="1:38">VirtIOSCSI</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:41">s</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:58"><decl pos:start="1:44" pos:end="1:58"><type pos:start="1:44" pos:end="1:58"><name pos:start="1:44" pos:end="1:53">SCSIDevice</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">dev</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:42"><decl pos:start="3:29" pos:end="3:42"><type pos:start="3:29" pos:end="3:42"><name pos:start="3:29" pos:end="3:36">uint32_t</name></type> <name pos:start="3:38" pos:end="3:42">event</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:59"><decl pos:start="3:45" pos:end="3:59"><type pos:start="3:45" pos:end="3:59"><name pos:start="3:45" pos:end="3:52">uint32_t</name></type> <name pos:start="3:54" pos:end="3:59">reason</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="107:1">{<block_content pos:start="7:5" pos:end="105:5">

    <decl_stmt pos:start="7:5" pos:end="7:49"><decl pos:start="7:5" pos:end="7:48"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">VirtIOSCSICommon</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">vs</name> <init pos:start="7:26" pos:end="7:48">= <expr pos:start="7:28" pos:end="7:48"><call pos:start="7:28" pos:end="7:48"><name pos:start="7:28" pos:end="7:45">VIRTIO_SCSI_COMMON</name><argument_list pos:start="7:46" pos:end="7:48">(<argument pos:start="7:47" pos:end="7:47"><expr pos:start="7:47" pos:end="7:47"><name pos:start="7:47" pos:end="7:47">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:19"><name pos:start="9:5" pos:end="9:17">VirtIOSCSIReq</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">req</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:25"><decl pos:start="11:5" pos:end="11:24"><type pos:start="11:5" pos:end="11:21"><name pos:start="11:5" pos:end="11:19">VirtIOSCSIEvent</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:24">evt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:42"><decl pos:start="13:5" pos:end="13:41"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">VirtIODevice</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:22">vdev</name> <init pos:start="13:24" pos:end="13:41">= <expr pos:start="13:26" pos:end="13:41"><call pos:start="13:26" pos:end="13:41"><name pos:start="13:26" pos:end="13:38">VIRTIO_DEVICE</name><argument_list pos:start="13:39" pos:end="13:41">(<argument pos:start="13:40" pos:end="13:40"><expr pos:start="13:40" pos:end="13:40"><name pos:start="13:40" pos:end="13:40">s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:52">(<expr pos:start="17:9" pos:end="17:51"><operator pos:start="17:9" pos:end="17:9">!</operator><operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:22"><name pos:start="17:11" pos:end="17:14">vdev</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:22">status</name></name> <operator pos:start="17:24" pos:end="17:24">&amp;</operator> <name pos:start="17:26" pos:end="17:50">VIRTIO_CONFIG_S_DRIVER_OK</name><operator pos:start="17:51" pos:end="17:51">)</operator></expr>)</condition> <block pos:start="17:54" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="31:5"><if pos:start="25:5" pos:end="31:5">if <condition pos:start="25:8" pos:end="25:29">(<expr pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:28"><name pos:start="25:9" pos:end="25:9">s</name><operator pos:start="25:10" pos:end="25:11">-&gt;</operator><name pos:start="25:12" pos:end="25:28">dataplane_started</name></name></expr>)</condition> <block pos:start="25:31" pos:end="31:5">{<block_content pos:start="27:9" pos:end="29:36">

        <expr_stmt pos:start="27:9" pos:end="27:23"><expr pos:start="27:9" pos:end="27:22"><call pos:start="27:9" pos:end="27:22"><name pos:start="27:9" pos:end="27:14">assert</name><argument_list pos:start="27:15" pos:end="27:22">(<argument pos:start="27:16" pos:end="27:21"><expr pos:start="27:16" pos:end="27:21"><name pos:start="27:16" pos:end="27:21"><name pos:start="27:16" pos:end="27:16">s</name><operator pos:start="27:17" pos:end="27:18">-&gt;</operator><name pos:start="27:19" pos:end="27:21">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:36"><expr pos:start="29:9" pos:end="29:35"><call pos:start="29:9" pos:end="29:35"><name pos:start="29:9" pos:end="29:27">aio_context_acquire</name><argument_list pos:start="29:28" pos:end="29:35">(<argument pos:start="29:29" pos:end="29:34"><expr pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:34"><name pos:start="29:29" pos:end="29:29">s</name><operator pos:start="29:30" pos:end="29:31">-&gt;</operator><name pos:start="29:32" pos:end="29:34">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:47"><expr pos:start="35:5" pos:end="35:46"><name pos:start="35:5" pos:end="35:7">req</name> <operator pos:start="35:9" pos:end="35:9">=</operator> <call pos:start="35:11" pos:end="35:46"><name pos:start="35:11" pos:end="35:29">virtio_scsi_pop_req</name><argument_list pos:start="35:30" pos:end="35:46">(<argument pos:start="35:31" pos:end="35:31"><expr pos:start="35:31" pos:end="35:31"><name pos:start="35:31" pos:end="35:31">s</name></expr></argument>, <argument pos:start="35:34" pos:end="35:45"><expr pos:start="35:34" pos:end="35:45"><name pos:start="35:34" pos:end="35:45"><name pos:start="35:34" pos:end="35:35">vs</name><operator pos:start="35:36" pos:end="35:37">-&gt;</operator><name pos:start="35:38" pos:end="35:45">event_vq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:13">(<expr pos:start="37:9" pos:end="37:12"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:12">req</name></expr>)</condition> <block pos:start="37:15" pos:end="43:5">{<block_content pos:start="39:9" pos:end="41:17">

        <expr_stmt pos:start="39:9" pos:end="39:33"><expr pos:start="39:9" pos:end="39:32"><name pos:start="39:9" pos:end="39:25"><name pos:start="39:9" pos:end="39:9">s</name><operator pos:start="39:10" pos:end="39:11">-&gt;</operator><name pos:start="39:12" pos:end="39:25">events_dropped</name></name> <operator pos:start="39:27" pos:end="39:27">=</operator> <name pos:start="39:29" pos:end="39:32">true</name></expr>;</expr_stmt>

        <goto pos:start="41:9" pos:end="41:17">goto <name pos:start="41:14" pos:end="41:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:26">(<expr pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:25"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:25">events_dropped</name></name></expr>)</condition> <block pos:start="47:28" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:34">

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:13">event</name> <operator pos:start="49:15" pos:end="49:16">|=</operator> <name pos:start="49:18" pos:end="49:44">VIRTIO_SCSI_T_EVENTS_MISSED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:34"><expr pos:start="51:9" pos:end="51:33"><name pos:start="51:9" pos:end="51:25"><name pos:start="51:9" pos:end="51:9">s</name><operator pos:start="51:10" pos:end="51:11">-&gt;</operator><name pos:start="51:12" pos:end="51:25">events_dropped</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <name pos:start="51:29" pos:end="51:33">false</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="57:5" pos:end="61:5"><if pos:start="57:5" pos:end="61:5">if <condition pos:start="57:8" pos:end="57:63">(<expr pos:start="57:9" pos:end="57:62"><call pos:start="57:9" pos:end="57:62"><name pos:start="57:9" pos:end="57:29">virtio_scsi_parse_req</name><argument_list pos:start="57:30" pos:end="57:62">(<argument pos:start="57:31" pos:end="57:33"><expr pos:start="57:31" pos:end="57:33"><name pos:start="57:31" pos:end="57:33">req</name></expr></argument>, <argument pos:start="57:36" pos:end="57:36"><expr pos:start="57:36" pos:end="57:36"><literal type="number" pos:start="57:36" pos:end="57:36">0</literal></expr></argument>, <argument pos:start="57:39" pos:end="57:61"><expr pos:start="57:39" pos:end="57:61"><sizeof pos:start="57:39" pos:end="57:61">sizeof<argument_list pos:start="57:45" pos:end="57:61">(<argument pos:start="57:46" pos:end="57:60"><expr pos:start="57:46" pos:end="57:60"><name pos:start="57:46" pos:end="57:60">VirtIOSCSIEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="57:65" pos:end="61:5">{<block_content pos:start="59:9" pos:end="59:30">

        <expr_stmt pos:start="59:9" pos:end="59:30"><expr pos:start="59:9" pos:end="59:29"><call pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:27">virtio_scsi_bad_req</name><argument_list pos:start="59:28" pos:end="59:29">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:27"><expr pos:start="65:5" pos:end="65:26"><name pos:start="65:5" pos:end="65:7">evt</name> <operator pos:start="65:9" pos:end="65:9">=</operator> <operator pos:start="65:11" pos:end="65:11">&amp;</operator><name pos:start="65:12" pos:end="65:26"><name pos:start="65:12" pos:end="65:14">req</name><operator pos:start="65:15" pos:end="65:16">-&gt;</operator><name pos:start="65:17" pos:end="65:20">resp</name><operator pos:start="65:21" pos:end="65:21">.</operator><name pos:start="65:22" pos:end="65:26">event</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:44"><expr pos:start="67:5" pos:end="67:43"><call pos:start="67:5" pos:end="67:43"><name pos:start="67:5" pos:end="67:10">memset</name><argument_list pos:start="67:11" pos:end="67:43">(<argument pos:start="67:12" pos:end="67:14"><expr pos:start="67:12" pos:end="67:14"><name pos:start="67:12" pos:end="67:14">evt</name></expr></argument>, <argument pos:start="67:17" pos:end="67:17"><expr pos:start="67:17" pos:end="67:17"><literal type="number" pos:start="67:17" pos:end="67:17">0</literal></expr></argument>, <argument pos:start="67:20" pos:end="67:42"><expr pos:start="67:20" pos:end="67:42"><sizeof pos:start="67:20" pos:end="67:42">sizeof<argument_list pos:start="67:26" pos:end="67:42">(<argument pos:start="67:27" pos:end="67:41"><expr pos:start="67:27" pos:end="67:41"><name pos:start="67:27" pos:end="67:41">VirtIOSCSIEvent</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:45"><expr pos:start="69:5" pos:end="69:44"><name pos:start="69:5" pos:end="69:14"><name pos:start="69:5" pos:end="69:7">evt</name><operator pos:start="69:8" pos:end="69:9">-&gt;</operator><name pos:start="69:10" pos:end="69:14">event</name></name> <operator pos:start="69:16" pos:end="69:16">=</operator> <call pos:start="69:18" pos:end="69:44"><name pos:start="69:18" pos:end="69:31">virtio_tswap32</name><argument_list pos:start="69:32" pos:end="69:44">(<argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">vdev</name></expr></argument>, <argument pos:start="69:39" pos:end="69:43"><expr pos:start="69:39" pos:end="69:43"><name pos:start="69:39" pos:end="69:43">event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:47"><expr pos:start="71:5" pos:end="71:46"><name pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:7">evt</name><operator pos:start="71:8" pos:end="71:9">-&gt;</operator><name pos:start="71:10" pos:end="71:15">reason</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <call pos:start="71:19" pos:end="71:46"><name pos:start="71:19" pos:end="71:32">virtio_tswap32</name><argument_list pos:start="71:33" pos:end="71:46">(<argument pos:start="71:34" pos:end="71:37"><expr pos:start="71:34" pos:end="71:37"><name pos:start="71:34" pos:end="71:37">vdev</name></expr></argument>, <argument pos:start="71:40" pos:end="71:45"><expr pos:start="71:40" pos:end="71:45"><name pos:start="71:40" pos:end="71:45">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="73:5" pos:end="95:5"><if pos:start="73:5" pos:end="77:5">if <condition pos:start="73:8" pos:end="73:13">(<expr pos:start="73:9" pos:end="73:12"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:12">dev</name></expr>)</condition> <block pos:start="73:15" pos:end="77:5">{<block_content pos:start="75:9" pos:end="75:53">

        <expr_stmt pos:start="75:9" pos:end="75:53"><expr pos:start="75:9" pos:end="75:52"><call pos:start="75:9" pos:end="75:52"><name pos:start="75:9" pos:end="75:14">assert</name><argument_list pos:start="75:15" pos:end="75:52">(<argument pos:start="75:16" pos:end="75:51"><expr pos:start="75:16" pos:end="75:51"><name pos:start="75:16" pos:end="75:20">event</name> <operator pos:start="75:22" pos:end="75:23">==</operator> <name pos:start="75:25" pos:end="75:51">VIRTIO_SCSI_T_EVENTS_MISSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="77:7" pos:end="95:5">else <block pos:start="77:12" pos:end="95:5">{<block_content pos:start="79:9" pos:end="93:38">

        <expr_stmt pos:start="79:9" pos:end="79:24"><expr pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:11">evt</name><operator pos:start="79:12" pos:end="79:13">-&gt;</operator><name pos:start="79:14" pos:end="79:16">lun</name><index pos:start="79:17" pos:end="79:19">[<expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">0</literal></expr>]</index></name> <operator pos:start="79:21" pos:end="79:21">=</operator> <literal type="number" pos:start="79:23" pos:end="79:23">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:30"><expr pos:start="81:9" pos:end="81:29"><name pos:start="81:9" pos:end="81:19"><name pos:start="81:9" pos:end="81:11">evt</name><operator pos:start="81:12" pos:end="81:13">-&gt;</operator><name pos:start="81:14" pos:end="81:16">lun</name><index pos:start="81:17" pos:end="81:19">[<expr pos:start="81:18" pos:end="81:18"><literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr>]</index></name> <operator pos:start="81:21" pos:end="81:21">=</operator> <name pos:start="81:23" pos:end="81:29"><name pos:start="81:23" pos:end="81:25">dev</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:29">id</name></name></expr>;</expr_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:79">/* Linux wants us to keep the same encoding we use for REPORT LUNS.  */</comment>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:28">(<expr pos:start="87:13" pos:end="87:27"><name pos:start="87:13" pos:end="87:20"><name pos:start="87:13" pos:end="87:15">dev</name><operator pos:start="87:16" pos:end="87:17">-&gt;</operator><name pos:start="87:18" pos:end="87:20">lun</name></name> <operator pos:start="87:22" pos:end="87:23">&gt;=</operator> <literal type="number" pos:start="87:25" pos:end="87:27">256</literal></expr>)</condition> <block pos:start="87:30" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:49">

            <expr_stmt pos:start="89:13" pos:end="89:49"><expr pos:start="89:13" pos:end="89:48"><name pos:start="89:13" pos:end="89:23"><name pos:start="89:13" pos:end="89:15">evt</name><operator pos:start="89:16" pos:end="89:17">-&gt;</operator><name pos:start="89:18" pos:end="89:20">lun</name><index pos:start="89:21" pos:end="89:23">[<expr pos:start="89:22" pos:end="89:22"><literal type="number" pos:start="89:22" pos:end="89:22">2</literal></expr>]</index></name> <operator pos:start="89:25" pos:end="89:25">=</operator> <operator pos:start="89:27" pos:end="89:27">(</operator><name pos:start="89:28" pos:end="89:35"><name pos:start="89:28" pos:end="89:30">dev</name><operator pos:start="89:31" pos:end="89:32">-&gt;</operator><name pos:start="89:33" pos:end="89:35">lun</name></name> <operator pos:start="89:37" pos:end="89:38">&gt;&gt;</operator> <literal type="number" pos:start="89:40" pos:end="89:40">8</literal><operator pos:start="89:41" pos:end="89:41">)</operator> <operator pos:start="89:43" pos:end="89:43">|</operator> <literal type="number" pos:start="89:45" pos:end="89:48">0x40</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:38"><expr pos:start="93:9" pos:end="93:37"><name pos:start="93:9" pos:end="93:19"><name pos:start="93:9" pos:end="93:11">evt</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:16">lun</name><index pos:start="93:17" pos:end="93:19">[<expr pos:start="93:18" pos:end="93:18"><literal type="number" pos:start="93:18" pos:end="93:18">3</literal></expr>]</index></name> <operator pos:start="93:21" pos:end="93:21">=</operator> <name pos:start="93:23" pos:end="93:30"><name pos:start="93:23" pos:end="93:25">dev</name><operator pos:start="93:26" pos:end="93:27">-&gt;</operator><name pos:start="93:28" pos:end="93:30">lun</name></name> <operator pos:start="93:32" pos:end="93:32">&amp;</operator> <literal type="number" pos:start="93:34" pos:end="93:37">0xFF</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:34"><expr pos:start="97:5" pos:end="97:33"><call pos:start="97:5" pos:end="97:33"><name pos:start="97:5" pos:end="97:28">virtio_scsi_complete_req</name><argument_list pos:start="97:29" pos:end="97:33">(<argument pos:start="97:30" pos:end="97:32"><expr pos:start="97:30" pos:end="97:32"><name pos:start="97:30" pos:end="97:32">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="99:1" pos:end="99:4"><name pos:start="99:1" pos:end="99:3">out</name>:</label>

    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:29">(<expr pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:28"><name pos:start="101:9" pos:end="101:9">s</name><operator pos:start="101:10" pos:end="101:11">-&gt;</operator><name pos:start="101:12" pos:end="101:28">dataplane_started</name></name></expr>)</condition> <block pos:start="101:31" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:36">

        <expr_stmt pos:start="103:9" pos:end="103:36"><expr pos:start="103:9" pos:end="103:35"><call pos:start="103:9" pos:end="103:35"><name pos:start="103:9" pos:end="103:27">aio_context_release</name><argument_list pos:start="103:28" pos:end="103:35">(<argument pos:start="103:29" pos:end="103:34"><expr pos:start="103:29" pos:end="103:34"><name pos:start="103:29" pos:end="103:34"><name pos:start="103:29" pos:end="103:29">s</name><operator pos:start="103:30" pos:end="103:31">-&gt;</operator><name pos:start="103:32" pos:end="103:34">ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
