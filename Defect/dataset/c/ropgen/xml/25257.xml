<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25257.c" pos:tabs="8"><function pos:start="1:1" pos:end="131:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">dmg_read_resource_fork</name><parameter_list pos:start="1:34" pos:end="3:76">(<parameter pos:start="1:35" pos:end="1:54"><decl pos:start="1:35" pos:end="1:54"><type pos:start="1:35" pos:end="1:54"><name pos:start="1:35" pos:end="1:50">BlockDriverState</name> <modifier pos:start="1:52" pos:end="1:52">*</modifier></type><name pos:start="1:53" pos:end="1:54">bs</name></decl></parameter>, <parameter pos:start="1:57" pos:end="1:74"><decl pos:start="1:57" pos:end="1:74"><type pos:start="1:57" pos:end="1:74"><name pos:start="1:57" pos:end="1:70">DmgHeaderState</name> <modifier pos:start="1:72" pos:end="1:72">*</modifier></type><name pos:start="1:73" pos:end="1:74">ds</name></decl></parameter>,

                                  <parameter pos:start="3:35" pos:end="3:53"><decl pos:start="3:35" pos:end="3:53"><type pos:start="3:35" pos:end="3:53"><name pos:start="3:35" pos:end="3:42">uint64_t</name></type> <name pos:start="3:44" pos:end="3:53">info_begin</name></decl></parameter>, <parameter pos:start="3:56" pos:end="3:75"><decl pos:start="3:56" pos:end="3:75"><type pos:start="3:56" pos:end="3:75"><name pos:start="3:56" pos:end="3:63">uint64_t</name></type> <name pos:start="3:65" pos:end="3:75">info_length</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="131:1">{<block_content pos:start="7:5" pos:end="129:15">

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">BDRVDMGState</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">s</name> <init pos:start="7:21" pos:end="7:32">= <expr pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:32"><name pos:start="7:23" pos:end="7:24">bs</name><operator pos:start="7:25" pos:end="7:26">-&gt;</operator><name pos:start="7:27" pos:end="7:32">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:12"><decl pos:start="9:5" pos:end="9:11"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:37"><decl pos:start="11:5" pos:end="11:18"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:18">count</name></decl>, <decl pos:start="11:21" pos:end="11:36"><type ref="prev" pos:start="11:5" pos:end="11:12"/><name pos:start="11:21" pos:end="11:36">rsrc_data_offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:27"><decl pos:start="13:5" pos:end="13:26"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:19">buffer</name> <init pos:start="13:21" pos:end="13:26">= <expr pos:start="13:23" pos:end="13:26"><name pos:start="13:23" pos:end="13:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:21">info_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:20"><decl pos:start="17:5" pos:end="17:19"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:19">offset</name></decl>;</decl_stmt>



    <comment type="block" pos:start="21:5" pos:end="21:79">/* read offset from begin of resource fork (info_begin) to resource data */</comment>

    <expr_stmt pos:start="23:5" pos:end="23:57"><expr pos:start="23:5" pos:end="23:56"><name pos:start="23:5" pos:end="23:7">ret</name> <operator pos:start="23:9" pos:end="23:9">=</operator> <call pos:start="23:11" pos:end="23:56"><name pos:start="23:11" pos:end="23:21">read_uint32</name><argument_list pos:start="23:22" pos:end="23:56">(<argument pos:start="23:23" pos:end="23:24"><expr pos:start="23:23" pos:end="23:24"><name pos:start="23:23" pos:end="23:24">bs</name></expr></argument>, <argument pos:start="23:27" pos:end="23:36"><expr pos:start="23:27" pos:end="23:36"><name pos:start="23:27" pos:end="23:36">info_begin</name></expr></argument>, <argument pos:start="23:39" pos:end="23:55"><expr pos:start="23:39" pos:end="23:55"><operator pos:start="23:39" pos:end="23:39">&amp;</operator><name pos:start="23:40" pos:end="23:55">rsrc_data_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="25:5" pos:end="35:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:16">(<expr pos:start="25:9" pos:end="25:15"><name pos:start="25:9" pos:end="25:11">ret</name> <operator pos:start="25:13" pos:end="25:13">&lt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">0</literal></expr>)</condition> <block pos:start="25:18" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:18">

        <goto pos:start="27:9" pos:end="27:18">goto <name pos:start="27:14" pos:end="27:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="29:7" pos:end="35:5">else if <condition pos:start="29:15" pos:end="29:46">(<expr pos:start="29:16" pos:end="29:45"><name pos:start="29:16" pos:end="29:31">rsrc_data_offset</name> <operator pos:start="29:33" pos:end="29:33">&gt;</operator> <name pos:start="29:35" pos:end="29:45">info_length</name></expr>)</condition> <block pos:start="29:48" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:22"><expr pos:start="31:9" pos:end="31:21"><name pos:start="31:9" pos:end="31:11">ret</name> <operator pos:start="31:13" pos:end="31:13">=</operator> <operator pos:start="31:15" pos:end="31:15">-</operator><name pos:start="31:16" pos:end="31:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="33:9" pos:end="33:18">goto <name pos:start="33:14" pos:end="33:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="39:38">/* read length of resource data */</comment>

    <expr_stmt pos:start="41:5" pos:end="41:50"><expr pos:start="41:5" pos:end="41:49"><name pos:start="41:5" pos:end="41:7">ret</name> <operator pos:start="41:9" pos:end="41:9">=</operator> <call pos:start="41:11" pos:end="41:49"><name pos:start="41:11" pos:end="41:21">read_uint32</name><argument_list pos:start="41:22" pos:end="41:49">(<argument pos:start="41:23" pos:end="41:24"><expr pos:start="41:23" pos:end="41:24"><name pos:start="41:23" pos:end="41:24">bs</name></expr></argument>, <argument pos:start="41:27" pos:end="41:40"><expr pos:start="41:27" pos:end="41:40"><name pos:start="41:27" pos:end="41:36">info_begin</name> <operator pos:start="41:38" pos:end="41:38">+</operator> <literal type="number" pos:start="41:40" pos:end="41:40">8</literal></expr></argument>, <argument pos:start="41:43" pos:end="41:48"><expr pos:start="41:43" pos:end="41:48"><operator pos:start="41:43" pos:end="41:43">&amp;</operator><name pos:start="41:44" pos:end="41:48">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="43:5" pos:end="53:5"><if pos:start="43:5" pos:end="47:5">if <condition pos:start="43:8" pos:end="43:16">(<expr pos:start="43:9" pos:end="43:15"><name pos:start="43:9" pos:end="43:11">ret</name> <operator pos:start="43:13" pos:end="43:13">&lt;</operator> <literal type="number" pos:start="43:15" pos:end="43:15">0</literal></expr>)</condition> <block pos:start="43:18" pos:end="47:5">{<block_content pos:start="45:9" pos:end="45:18">

        <goto pos:start="45:9" pos:end="45:18">goto <name pos:start="45:14" pos:end="45:17">fail</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="47:7" pos:end="53:5">else if <condition pos:start="47:15" pos:end="47:68">(<expr pos:start="47:16" pos:end="47:67"><name pos:start="47:16" pos:end="47:20">count</name> <operator pos:start="47:22" pos:end="47:23">==</operator> <literal type="number" pos:start="47:25" pos:end="47:25">0</literal> <operator pos:start="47:27" pos:end="47:28">||</operator> <name pos:start="47:30" pos:end="47:45">rsrc_data_offset</name> <operator pos:start="47:47" pos:end="47:47">+</operator> <name pos:start="47:49" pos:end="47:53">count</name> <operator pos:start="47:55" pos:end="47:55">&gt;</operator> <name pos:start="47:57" pos:end="47:67">info_length</name></expr>)</condition> <block pos:start="47:70" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:18">

        <expr_stmt pos:start="49:9" pos:end="49:22"><expr pos:start="49:9" pos:end="49:21"><name pos:start="49:9" pos:end="49:11">ret</name> <operator pos:start="49:13" pos:end="49:13">=</operator> <operator pos:start="49:15" pos:end="49:15">-</operator><name pos:start="49:16" pos:end="49:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="51:9" pos:end="51:18">goto <name pos:start="51:14" pos:end="51:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:70">/* begin of resource data (consisting of one or more resources) */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:43"><expr pos:start="59:5" pos:end="59:42"><name pos:start="59:5" pos:end="59:10">offset</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:23">info_begin</name> <operator pos:start="59:25" pos:end="59:25">+</operator> <name pos:start="59:27" pos:end="59:42">rsrc_data_offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="65:33">/* end of resource data (there is possibly a following resource map

     * which will be ignored). */</comment>

    <expr_stmt pos:start="67:5" pos:end="67:30"><expr pos:start="67:5" pos:end="67:29"><name pos:start="67:5" pos:end="67:12">info_end</name> <operator pos:start="67:14" pos:end="67:14">=</operator> <name pos:start="67:16" pos:end="67:21">offset</name> <operator pos:start="67:23" pos:end="67:23">+</operator> <name pos:start="67:25" pos:end="67:29">count</name></expr>;</expr_stmt>



    <comment type="block" pos:start="71:5" pos:end="71:80">/* read offsets (mish blocks) from one or more resources in resource data */</comment>

    <while pos:start="73:5" pos:end="119:5">while <condition pos:start="73:11" pos:end="73:29">(<expr pos:start="73:12" pos:end="73:28"><name pos:start="73:12" pos:end="73:17">offset</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:28">info_end</name></expr>)</condition> <block pos:start="73:31" pos:end="119:5">{<block_content pos:start="77:9" pos:end="117:24">

        <comment type="block" pos:start="75:9" pos:end="75:40">/* size of following resource */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:46"><expr pos:start="77:9" pos:end="77:45"><name pos:start="77:9" pos:end="77:11">ret</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:45"><name pos:start="77:15" pos:end="77:25">read_uint32</name><argument_list pos:start="77:26" pos:end="77:45">(<argument pos:start="77:27" pos:end="77:28"><expr pos:start="77:27" pos:end="77:28"><name pos:start="77:27" pos:end="77:28">bs</name></expr></argument>, <argument pos:start="77:31" pos:end="77:36"><expr pos:start="77:31" pos:end="77:36"><name pos:start="77:31" pos:end="77:36">offset</name></expr></argument>, <argument pos:start="77:39" pos:end="77:44"><expr pos:start="77:39" pos:end="77:44"><operator pos:start="77:39" pos:end="77:39">&amp;</operator><name pos:start="77:40" pos:end="77:44">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="79:9" pos:end="89:9"><if pos:start="79:9" pos:end="83:9">if <condition pos:start="79:12" pos:end="79:20">(<expr pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:15">ret</name> <operator pos:start="79:17" pos:end="79:17">&lt;</operator> <literal type="number" pos:start="79:19" pos:end="79:19">0</literal></expr>)</condition> <block pos:start="79:22" pos:end="83:9">{<block_content pos:start="81:13" pos:end="81:22">

            <goto pos:start="81:13" pos:end="81:22">goto <name pos:start="81:18" pos:end="81:21">fail</name>;</goto>

        </block_content>}</block></if> <if type="elseif" pos:start="83:11" pos:end="89:9">else if <condition pos:start="83:19" pos:end="83:30">(<expr pos:start="83:20" pos:end="83:29"><name pos:start="83:20" pos:end="83:24">count</name> <operator pos:start="83:26" pos:end="83:27">==</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>)</condition> <block pos:start="83:32" pos:end="89:9">{<block_content pos:start="85:13" pos:end="87:22">

            <expr_stmt pos:start="85:13" pos:end="85:26"><expr pos:start="85:13" pos:end="85:25"><name pos:start="85:13" pos:end="85:15">ret</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <operator pos:start="85:19" pos:end="85:19">-</operator><name pos:start="85:20" pos:end="85:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="87:13" pos:end="87:22">goto <name pos:start="87:18" pos:end="87:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:20"><expr pos:start="91:9" pos:end="91:19"><name pos:start="91:9" pos:end="91:14">offset</name> <operator pos:start="91:16" pos:end="91:17">+=</operator> <literal type="number" pos:start="91:19" pos:end="91:19">4</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="95:9" pos:end="95:42"><expr pos:start="95:9" pos:end="95:41"><name pos:start="95:9" pos:end="95:14">buffer</name> <operator pos:start="95:16" pos:end="95:16">=</operator> <call pos:start="95:18" pos:end="95:41"><name pos:start="95:18" pos:end="95:26">g_realloc</name><argument_list pos:start="95:27" pos:end="95:41">(<argument pos:start="95:28" pos:end="95:33"><expr pos:start="95:28" pos:end="95:33"><name pos:start="95:28" pos:end="95:33">buffer</name></expr></argument>, <argument pos:start="95:36" pos:end="95:40"><expr pos:start="95:36" pos:end="95:40"><name pos:start="95:36" pos:end="95:40">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:58"><expr pos:start="97:9" pos:end="97:57"><name pos:start="97:9" pos:end="97:11">ret</name> <operator pos:start="97:13" pos:end="97:13">=</operator> <call pos:start="97:15" pos:end="97:57"><name pos:start="97:15" pos:end="97:24">bdrv_pread</name><argument_list pos:start="97:25" pos:end="97:57">(<argument pos:start="97:26" pos:end="97:33"><expr pos:start="97:26" pos:end="97:33"><name pos:start="97:26" pos:end="97:33"><name pos:start="97:26" pos:end="97:27">bs</name><operator pos:start="97:28" pos:end="97:29">-&gt;</operator><name pos:start="97:30" pos:end="97:33">file</name></name></expr></argument>, <argument pos:start="97:36" pos:end="97:41"><expr pos:start="97:36" pos:end="97:41"><name pos:start="97:36" pos:end="97:41">offset</name></expr></argument>, <argument pos:start="97:44" pos:end="97:49"><expr pos:start="97:44" pos:end="97:49"><name pos:start="97:44" pos:end="97:49">buffer</name></expr></argument>, <argument pos:start="97:52" pos:end="97:56"><expr pos:start="97:52" pos:end="97:56"><name pos:start="97:52" pos:end="97:56">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:20">(<expr pos:start="99:13" pos:end="99:19"><name pos:start="99:13" pos:end="99:15">ret</name> <operator pos:start="99:17" pos:end="99:17">&lt;</operator> <literal type="number" pos:start="99:19" pos:end="99:19">0</literal></expr>)</condition> <block pos:start="99:22" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:22">

            <goto pos:start="101:13" pos:end="101:22">goto <name pos:start="101:18" pos:end="101:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="107:9" pos:end="107:56"><expr pos:start="107:9" pos:end="107:55"><name pos:start="107:9" pos:end="107:11">ret</name> <operator pos:start="107:13" pos:end="107:13">=</operator> <call pos:start="107:15" pos:end="107:55"><name pos:start="107:15" pos:end="107:33">dmg_read_mish_block</name><argument_list pos:start="107:34" pos:end="107:55">(<argument pos:start="107:35" pos:end="107:35"><expr pos:start="107:35" pos:end="107:35"><name pos:start="107:35" pos:end="107:35">s</name></expr></argument>, <argument pos:start="107:38" pos:end="107:39"><expr pos:start="107:38" pos:end="107:39"><name pos:start="107:38" pos:end="107:39">ds</name></expr></argument>, <argument pos:start="107:42" pos:end="107:47"><expr pos:start="107:42" pos:end="107:47"><name pos:start="107:42" pos:end="107:47">buffer</name></expr></argument>, <argument pos:start="107:50" pos:end="107:54"><expr pos:start="107:50" pos:end="107:54"><name pos:start="107:50" pos:end="107:54">count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="113:9"><if pos:start="109:9" pos:end="113:9">if <condition pos:start="109:12" pos:end="109:20">(<expr pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:15">ret</name> <operator pos:start="109:17" pos:end="109:17">&lt;</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>)</condition> <block pos:start="109:22" pos:end="113:9">{<block_content pos:start="111:13" pos:end="111:22">

            <goto pos:start="111:13" pos:end="111:22">goto <name pos:start="111:18" pos:end="111:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="115:9" pos:end="115:48">/* advance offset by size of resource */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:24"><expr pos:start="117:9" pos:end="117:23"><name pos:start="117:9" pos:end="117:14">offset</name> <operator pos:start="117:16" pos:end="117:17">+=</operator> <name pos:start="117:19" pos:end="117:23">count</name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="121:5" pos:end="121:12"><expr pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:7">ret</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <literal type="number" pos:start="121:11" pos:end="121:11">0</literal></expr>;</expr_stmt>



<label pos:start="125:1" pos:end="125:5"><name pos:start="125:1" pos:end="125:4">fail</name>:</label>

    <expr_stmt pos:start="127:5" pos:end="127:19"><expr pos:start="127:5" pos:end="127:18"><call pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:10">g_free</name><argument_list pos:start="127:11" pos:end="127:18">(<argument pos:start="127:12" pos:end="127:17"><expr pos:start="127:12" pos:end="127:17"><name pos:start="127:12" pos:end="127:17">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="129:5" pos:end="129:15">return <expr pos:start="129:12" pos:end="129:14"><name pos:start="129:12" pos:end="129:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
