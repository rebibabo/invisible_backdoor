<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/6429.c" pos:tabs="8"><function pos:start="1:1" pos:end="24:15"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">qmp_memchar_write</name><parameter_list pos:start="1:23" pos:end="3:36">(<parameter pos:start="1:24" pos:end="1:41"><decl pos:start="1:24" pos:end="1:41"><type pos:start="1:24" pos:end="1:41"><specifier pos:start="1:24" pos:end="1:28">const</specifier> <name pos:start="1:30" pos:end="1:33">char</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">device</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:59"><decl pos:start="1:44" pos:end="1:59"><type pos:start="1:44" pos:end="1:59"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:53">char</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:59">data</name></decl></parameter>,
                       <parameter pos:start="2:24" pos:end="2:38"><decl pos:start="2:24" pos:end="2:38"><type pos:start="2:24" pos:end="2:38"><name pos:start="2:24" pos:end="2:27">bool</name></type> <name pos:start="2:29" pos:end="2:38">has_format</name></decl></parameter>, <parameter pos:start="2:41" pos:end="2:62"><decl pos:start="2:41" pos:end="2:62"><type pos:start="2:41" pos:end="2:62"><name pos:start="2:41" pos:end="2:55"><name pos:start="2:41" pos:end="2:44">enum</name> <name pos:start="2:46" pos:end="2:55">DataFormat</name></name></type> <name pos:start="2:57" pos:end="2:62">format</name></decl></parameter>,
                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:28">Error</name> <modifier pos:start="3:30" pos:end="3:30">*</modifier><modifier pos:start="3:31" pos:end="3:31">*</modifier></type><name pos:start="3:32" pos:end="3:35">errp</name></decl></parameter>)</parameter_list>
<block pos:start="4:1" pos:end="24:15">{<block_content pos:start="5:5" pos:end="24:15">
    <decl_stmt pos:start="5:5" pos:end="5:25"><decl pos:start="5:5" pos:end="5:24"><type pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:19">CharDriverState</name> <modifier pos:start="5:21" pos:end="5:21">*</modifier></type><name pos:start="5:22" pos:end="5:24">chr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:30"><decl pos:start="6:5" pos:end="6:29"><type pos:start="6:5" pos:end="6:19"><specifier pos:start="6:5" pos:end="6:9">const</specifier> <name pos:start="6:11" pos:end="6:17">uint8_t</name> <modifier pos:start="6:19" pos:end="6:19">*</modifier></type><name pos:start="6:20" pos:end="6:29">write_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:23"><decl pos:start="8:5" pos:end="8:22"><type pos:start="8:5" pos:end="8:10"><name pos:start="8:5" pos:end="8:10">size_t</name></type> <name pos:start="8:12" pos:end="8:22">write_count</name></decl>;</decl_stmt>
    <expr_stmt pos:start="9:5" pos:end="9:32"><expr pos:start="9:5" pos:end="9:31"><name pos:start="9:5" pos:end="9:7">chr</name> <operator pos:start="9:9" pos:end="9:9">=</operator> <call pos:start="9:11" pos:end="9:31"><name pos:start="9:11" pos:end="9:23">qemu_chr_find</name><argument_list pos:start="9:24" pos:end="9:31">(<argument pos:start="9:25" pos:end="9:30"><expr pos:start="9:25" pos:end="9:30"><name pos:start="9:25" pos:end="9:30">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="10:5" pos:end="24:15"><if pos:start="10:5" pos:end="24:15">if <condition pos:start="10:8" pos:end="10:13">(<expr pos:start="10:9" pos:end="10:12"><operator pos:start="10:9" pos:end="10:9">!</operator><name pos:start="10:10" pos:end="10:12">chr</name></expr>)</condition> <block pos:start="10:15" pos:end="24:15">{<block_content pos:start="11:9" pos:end="24:15">
        <expr_stmt pos:start="11:9" pos:end="11:58"><expr pos:start="11:9" pos:end="11:57"><call pos:start="11:9" pos:end="11:57"><name pos:start="11:9" pos:end="11:18">error_setg</name><argument_list pos:start="11:19" pos:end="11:57">(<argument pos:start="11:20" pos:end="11:23"><expr pos:start="11:20" pos:end="11:23"><name pos:start="11:20" pos:end="11:23">errp</name></expr></argument>, <argument pos:start="11:26" pos:end="11:48"><expr pos:start="11:26" pos:end="11:48"><literal type="string" pos:start="11:26" pos:end="11:48">"Device '%s' not found"</literal></expr></argument>, <argument pos:start="11:51" pos:end="11:56"><expr pos:start="11:51" pos:end="11:56"><name pos:start="11:51" pos:end="11:56">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="12:9" pos:end="12:15">return;</return>
    <if_stmt pos:start="13:5" pos:end="24:15"><if pos:start="13:5" pos:end="24:15">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><call pos:start="13:9" pos:end="13:34"><name pos:start="13:9" pos:end="13:19">qemu_is_chr</name><argument_list pos:start="13:20" pos:end="13:34">(<argument pos:start="13:21" pos:end="13:23"><expr pos:start="13:21" pos:end="13:23"><name pos:start="13:21" pos:end="13:23">chr</name></expr></argument>, <argument pos:start="13:26" pos:end="13:33"><expr pos:start="13:26" pos:end="13:33"><literal type="string" pos:start="13:26" pos:end="13:33">"memory"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="13:37" pos:end="24:15">{<block_content pos:start="14:9" pos:end="24:15">
        <expr_stmt pos:start="14:9" pos:end="14:64"><expr pos:start="14:9" pos:end="14:63"><call pos:start="14:9" pos:end="14:63"><name pos:start="14:9" pos:end="14:18">error_setg</name><argument_list pos:start="14:19" pos:end="14:63">(<argument pos:start="14:20" pos:end="14:23"><expr pos:start="14:20" pos:end="14:23"><name pos:start="14:20" pos:end="14:23">errp</name></expr></argument>,<argument pos:start="14:25" pos:end="14:54"><expr pos:start="14:25" pos:end="14:54"><literal type="string" pos:start="14:25" pos:end="14:54">"%s is not memory char device"</literal></expr></argument>, <argument pos:start="14:57" pos:end="14:62"><expr pos:start="14:57" pos:end="14:62"><name pos:start="14:57" pos:end="14:62">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="15:9" pos:end="15:15">return;</return>
    <if_stmt pos:start="16:5" pos:end="24:15"><if pos:start="16:5" pos:end="18:5">if <condition pos:start="16:8" pos:end="16:53">(<expr pos:start="16:9" pos:end="16:52"><name pos:start="16:9" pos:end="16:18">has_format</name> <operator pos:start="16:20" pos:end="16:21">&amp;&amp;</operator> <operator pos:start="16:23" pos:end="16:23">(</operator><name pos:start="16:24" pos:end="16:29">format</name> <operator pos:start="16:31" pos:end="16:32">==</operator> <name pos:start="16:34" pos:end="16:51">DATA_FORMAT_BASE64</name><operator pos:start="16:52" pos:end="16:52">)</operator></expr>)</condition> <block pos:start="16:55" pos:end="18:5">{<block_content pos:start="17:9" pos:end="17:57">
        <expr_stmt pos:start="17:9" pos:end="17:57"><expr pos:start="17:9" pos:end="17:56"><name pos:start="17:9" pos:end="17:18">write_data</name> <operator pos:start="17:20" pos:end="17:20">=</operator> <call pos:start="17:22" pos:end="17:56"><name pos:start="17:22" pos:end="17:36">g_base64_decode</name><argument_list pos:start="17:37" pos:end="17:56">(<argument pos:start="17:38" pos:end="17:41"><expr pos:start="17:38" pos:end="17:41"><name pos:start="17:38" pos:end="17:41">data</name></expr></argument>, <argument pos:start="17:44" pos:end="17:55"><expr pos:start="17:44" pos:end="17:55"><operator pos:start="17:44" pos:end="17:44">&amp;</operator><name pos:start="17:45" pos:end="17:55">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else pos:start="18:7" pos:end="24:15">else <block pos:start="18:12" pos:end="24:15">{<block_content pos:start="19:9" pos:end="24:15">
        <expr_stmt pos:start="19:9" pos:end="19:37"><expr pos:start="19:9" pos:end="19:36"><name pos:start="19:9" pos:end="19:18">write_data</name> <operator pos:start="19:20" pos:end="19:20">=</operator> <operator pos:start="19:22" pos:end="19:22">(</operator><name pos:start="19:23" pos:end="19:29">uint8_t</name> <operator pos:start="19:31" pos:end="19:31">*</operator><operator pos:start="19:32" pos:end="19:32">)</operator><name pos:start="19:33" pos:end="19:36">data</name></expr>;</expr_stmt>
        <expr_stmt pos:start="20:9" pos:end="20:35"><expr pos:start="20:9" pos:end="20:34"><name pos:start="20:9" pos:end="20:19">write_count</name> <operator pos:start="20:21" pos:end="20:21">=</operator> <call pos:start="20:23" pos:end="20:34"><name pos:start="20:23" pos:end="20:28">strlen</name><argument_list pos:start="20:29" pos:end="20:34">(<argument pos:start="20:30" pos:end="20:33"><expr pos:start="20:30" pos:end="20:33"><name pos:start="20:30" pos:end="20:33">data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="21:5" pos:end="21:57"><expr pos:start="21:5" pos:end="21:56"><name pos:start="21:5" pos:end="21:7">ret</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:56"><name pos:start="21:11" pos:end="21:26">cirmem_chr_write</name><argument_list pos:start="21:27" pos:end="21:56">(<argument pos:start="21:28" pos:end="21:30"><expr pos:start="21:28" pos:end="21:30"><name pos:start="21:28" pos:end="21:30">chr</name></expr></argument>, <argument pos:start="21:33" pos:end="21:42"><expr pos:start="21:33" pos:end="21:42"><name pos:start="21:33" pos:end="21:42">write_data</name></expr></argument>, <argument pos:start="21:45" pos:end="21:55"><expr pos:start="21:45" pos:end="21:55"><name pos:start="21:45" pos:end="21:55">write_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="22:5" pos:end="24:15"><if pos:start="22:5" pos:end="24:15">if <condition pos:start="22:8" pos:end="22:16">(<expr pos:start="22:9" pos:end="22:15"><name pos:start="22:9" pos:end="22:11">ret</name> <operator pos:start="22:13" pos:end="22:13">&lt;</operator> <literal type="number" pos:start="22:15" pos:end="22:15">0</literal></expr>)</condition> <block pos:start="22:18" pos:end="24:15">{<block_content pos:start="23:9" pos:end="24:15">
        <expr_stmt pos:start="23:9" pos:end="23:65"><expr pos:start="23:9" pos:end="23:64"><call pos:start="23:9" pos:end="23:64"><name pos:start="23:9" pos:end="23:18">error_setg</name><argument_list pos:start="23:19" pos:end="23:64">(<argument pos:start="23:20" pos:end="23:23"><expr pos:start="23:20" pos:end="23:23"><name pos:start="23:20" pos:end="23:23">errp</name></expr></argument>, <argument pos:start="23:26" pos:end="23:55"><expr pos:start="23:26" pos:end="23:55"><literal type="string" pos:start="23:26" pos:end="23:55">"Failed to write to device %s"</literal></expr></argument>, <argument pos:start="23:58" pos:end="23:63"><expr pos:start="23:58" pos:end="23:63"><name pos:start="23:58" pos:end="23:63">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="24:9" pos:end="24:15">return;</return></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
