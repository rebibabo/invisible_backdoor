<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15481.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:32">validate_bootdevices</name><parameter_list pos:start="1:33" pos:end="1:47">(<parameter pos:start="1:34" pos:end="1:46"><decl pos:start="1:34" pos:end="1:46"><type pos:start="1:34" pos:end="1:39"><name pos:start="1:34" pos:end="1:37">char</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:46">devices</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="53:1">{<block_content pos:start="7:5" pos:end="51:5">

    <comment type="block" pos:start="5:5" pos:end="5:52">/* We just do some generic consistency checks */</comment>

    <decl_stmt pos:start="7:5" pos:end="7:18"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:17">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:19"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:14">bitmap</name> <init pos:start="9:16" pos:end="9:18">= <expr pos:start="9:18" pos:end="9:18"><literal type="number" pos:start="9:18" pos:end="9:18">0</literal></expr></init></decl>;</decl_stmt>



    <for pos:start="13:5" pos:end="51:5">for <control pos:start="13:9" pos:end="13:38">(<init pos:start="13:10" pos:end="13:21"><expr pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:10">p</name> <operator pos:start="13:12" pos:end="13:12">=</operator> <name pos:start="13:14" pos:end="13:20">devices</name></expr>;</init> <condition pos:start="13:23" pos:end="13:33"><expr pos:start="13:23" pos:end="13:32"><operator pos:start="13:23" pos:end="13:23">*</operator><name pos:start="13:24" pos:end="13:24">p</name> <operator pos:start="13:26" pos:end="13:27">!=</operator> <literal type="char" pos:start="13:29" pos:end="13:32">'\0'</literal></expr>;</condition> <incr pos:start="13:35" pos:end="13:37"><expr pos:start="13:35" pos:end="13:37"><name pos:start="13:35" pos:end="13:35">p</name><operator pos:start="13:36" pos:end="13:37">++</operator></expr></incr>)</control> <block pos:start="13:40" pos:end="51:5">{<block_content pos:start="33:9" pos:end="49:34">

        <comment type="block" pos:start="15:9" pos:end="31:11">/* Allowed boot devices are:

         * a-b: floppy disk drives

         * c-f: IDE disk drives

         * g-m: machine implementation dependent drives

         * n-p: network devices

         * It's up to each machine implementation to check if the given boot

         * devices match the actual hardware implementation and firmware

         * features.

         */</comment>

        <if_stmt pos:start="33:9" pos:end="39:9"><if pos:start="33:9" pos:end="39:9">if <condition pos:start="33:12" pos:end="33:33">(<expr pos:start="33:13" pos:end="33:32"><operator pos:start="33:13" pos:end="33:13">*</operator><name pos:start="33:14" pos:end="33:28"><name pos:start="33:14" pos:end="33:14">p</name> <argument_list type="generic" pos:start="33:16" pos:end="33:28">&lt; <argument pos:start="33:18" pos:end="33:26"><expr pos:start="33:18" pos:end="33:26"><literal type="char" pos:start="33:18" pos:end="33:20">'a'</literal> <operator pos:start="33:22" pos:end="33:23">||</operator> <operator pos:start="33:25" pos:end="33:25">*</operator><name pos:start="33:26" pos:end="33:26">p</name></expr></argument> &gt;</argument_list></name> <literal type="char" pos:start="33:30" pos:end="33:32">'p'</literal></expr>)</condition> <block pos:start="33:35" pos:end="39:9">{<block_content pos:start="35:13" pos:end="37:20">

            <expr_stmt pos:start="35:13" pos:end="35:62"><expr pos:start="35:13" pos:end="35:61"><call pos:start="35:13" pos:end="35:61"><name pos:start="35:13" pos:end="35:19">fprintf</name><argument_list pos:start="35:20" pos:end="35:61">(<argument pos:start="35:21" pos:end="35:26"><expr pos:start="35:21" pos:end="35:26"><name pos:start="35:21" pos:end="35:26">stderr</name></expr></argument>, <argument pos:start="35:29" pos:end="35:56"><expr pos:start="35:29" pos:end="35:56"><literal type="string" pos:start="35:29" pos:end="35:56">"Invalid boot device '%c'\n"</literal></expr></argument>, <argument pos:start="35:59" pos:end="35:60"><expr pos:start="35:59" pos:end="35:60"><operator pos:start="35:59" pos:end="35:59">*</operator><name pos:start="35:60" pos:end="35:60">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:20"><expr pos:start="37:13" pos:end="37:19"><call pos:start="37:13" pos:end="37:19"><name pos:start="37:13" pos:end="37:16">exit</name><argument_list pos:start="37:17" pos:end="37:19">(<argument pos:start="37:18" pos:end="37:18"><expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="41:9" pos:end="47:9"><if pos:start="41:9" pos:end="47:9">if <condition pos:start="41:12" pos:end="41:39">(<expr pos:start="41:13" pos:end="41:38"><name pos:start="41:13" pos:end="41:18">bitmap</name> <operator pos:start="41:20" pos:end="41:20">&amp;</operator> <operator pos:start="41:22" pos:end="41:22">(</operator><literal type="number" pos:start="41:23" pos:end="41:23">1</literal> <operator pos:start="41:25" pos:end="41:26">&lt;&lt;</operator> <operator pos:start="41:28" pos:end="41:28">(</operator><operator pos:start="41:29" pos:end="41:29">*</operator><name pos:start="41:30" pos:end="41:30">p</name> <operator pos:start="41:32" pos:end="41:32">-</operator> <literal type="char" pos:start="41:34" pos:end="41:36">'a'</literal><operator pos:start="41:37" pos:end="41:37">)</operator><operator pos:start="41:38" pos:end="41:38">)</operator></expr>)</condition> <block pos:start="41:41" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:20">

            <expr_stmt pos:start="43:13" pos:end="43:70"><expr pos:start="43:13" pos:end="43:69"><call pos:start="43:13" pos:end="43:69"><name pos:start="43:13" pos:end="43:19">fprintf</name><argument_list pos:start="43:20" pos:end="43:69">(<argument pos:start="43:21" pos:end="43:26"><expr pos:start="43:21" pos:end="43:26"><name pos:start="43:21" pos:end="43:26">stderr</name></expr></argument>, <argument pos:start="43:29" pos:end="43:64"><expr pos:start="43:29" pos:end="43:64"><literal type="string" pos:start="43:29" pos:end="43:64">"Boot device '%c' was given twice\n"</literal></expr></argument>, <argument pos:start="43:67" pos:end="43:68"><expr pos:start="43:67" pos:end="43:68"><operator pos:start="43:67" pos:end="43:67">*</operator><name pos:start="43:68" pos:end="43:68">p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:20"><expr pos:start="45:13" pos:end="45:19"><call pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:16">exit</name><argument_list pos:start="45:17" pos:end="45:19">(<argument pos:start="45:18" pos:end="45:18"><expr pos:start="45:18" pos:end="45:18"><literal type="number" pos:start="45:18" pos:end="45:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:34"><expr pos:start="49:9" pos:end="49:33"><name pos:start="49:9" pos:end="49:14">bitmap</name> <operator pos:start="49:16" pos:end="49:17">|=</operator> <literal type="number" pos:start="49:19" pos:end="49:19">1</literal> <operator pos:start="49:21" pos:end="49:22">&lt;&lt;</operator> <operator pos:start="49:24" pos:end="49:24">(</operator><operator pos:start="49:25" pos:end="49:25">*</operator><name pos:start="49:26" pos:end="49:26">p</name> <operator pos:start="49:28" pos:end="49:28">-</operator> <literal type="char" pos:start="49:30" pos:end="49:32">'a'</literal><operator pos:start="49:33" pos:end="49:33">)</operator></expr>;</expr_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
