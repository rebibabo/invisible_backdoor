<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2341.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:8"><name pos:start="1:1" pos:end="1:8">uint64_t</name></type> <name pos:start="1:10" pos:end="1:22">helper_cmpbge</name><parameter_list pos:start="1:23" pos:end="1:50">(<parameter pos:start="1:24" pos:end="1:35"><decl pos:start="1:24" pos:end="1:35"><type pos:start="1:24" pos:end="1:35"><name pos:start="1:24" pos:end="1:31">uint64_t</name></type> <name pos:start="1:33" pos:end="1:35">op1</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:49"><decl pos:start="1:38" pos:end="1:49"><type pos:start="1:38" pos:end="1:49"><name pos:start="1:38" pos:end="1:45">uint64_t</name></type> <name pos:start="1:47" pos:end="1:49">op2</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="7:5" pos:end="102:0">

<cpp:if pos:start="5:1" pos:end="5:21">#<cpp:directive pos:start="5:2" pos:end="5:3">if</cpp:directive> <expr pos:start="5:5" pos:end="5:21"><call pos:start="5:5" pos:end="5:21"><name pos:start="5:5" pos:end="5:11">defined</name><argument_list pos:start="5:12" pos:end="5:21">(<argument pos:start="5:13" pos:end="5:20"><expr pos:start="5:13" pos:end="5:20"><name pos:start="5:13" pos:end="5:20">__SSE2__</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:14">r</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="17:33">/* The cmpbge instruction is heavily used in the implementation of

       every string function on Alpha.  We can do much better than either

       the default loop below, or even an unrolled version by using the

       native vector support.  */</comment>

    <block pos:start="19:5" pos:end="39:5">{<block_content pos:start="21:9" pos:end="37:18">

        <typedef pos:start="21:9" pos:end="21:60">typedef <type pos:start="21:17" pos:end="21:26"><name pos:start="21:17" pos:end="21:24">uint64_t</name> <name pos:start="21:26" pos:end="21:26">Q</name></type> <name pos:start="21:28" pos:end="21:40">__attribute__</name>((<name pos:start="21:43" pos:end="21:53">vector_size</name>(16)));</typedef>

        <typedef pos:start="23:9" pos:end="23:59">typedef <type pos:start="23:17" pos:end="23:25"><name pos:start="23:17" pos:end="23:23">uint8_t</name> <name pos:start="23:25" pos:end="23:25">B</name></type> <name pos:start="23:27" pos:end="23:39">__attribute__</name>((<name pos:start="23:42" pos:end="23:52">vector_size</name>(16)));</typedef>



        <decl_stmt pos:start="27:9" pos:end="27:29"><decl pos:start="27:9" pos:end="27:28"><type pos:start="27:9" pos:end="27:9"><name pos:start="27:9" pos:end="27:9">Q</name></type> <name pos:start="27:11" pos:end="27:12">q1</name> <init pos:start="27:14" pos:end="27:28">= <expr pos:start="27:16" pos:end="27:28"><operator pos:start="27:16" pos:end="27:16">(</operator><name pos:start="27:17" pos:end="27:17">Q</name><operator pos:start="27:18" pos:end="27:18">)</operator><block pos:start="27:19" pos:end="27:28">{ <expr pos:start="27:21" pos:end="27:23"><name pos:start="27:21" pos:end="27:23">op1</name></expr>, <expr pos:start="27:26" pos:end="27:26"><literal type="number" pos:start="27:26" pos:end="27:26">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="29:29"><decl pos:start="29:9" pos:end="29:28"><type pos:start="29:9" pos:end="29:9"><name pos:start="29:9" pos:end="29:9">Q</name></type> <name pos:start="29:11" pos:end="29:12">q2</name> <init pos:start="29:14" pos:end="29:28">= <expr pos:start="29:16" pos:end="29:28"><operator pos:start="29:16" pos:end="29:16">(</operator><name pos:start="29:17" pos:end="29:17">Q</name><operator pos:start="29:18" pos:end="29:18">)</operator><block pos:start="29:19" pos:end="29:28">{ <expr pos:start="29:21" pos:end="29:23"><name pos:start="29:21" pos:end="29:23">op2</name></expr>, <expr pos:start="29:26" pos:end="29:26"><literal type="number" pos:start="29:26" pos:end="29:26">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:33"><expr pos:start="33:9" pos:end="33:32"><name pos:start="33:9" pos:end="33:10">q1</name> <operator pos:start="33:12" pos:end="33:12">=</operator> <operator pos:start="33:14" pos:end="33:14">(</operator><name pos:start="33:15" pos:end="33:15">Q</name><operator pos:start="33:16" pos:end="33:16">)</operator><operator pos:start="33:17" pos:end="33:17">(</operator><operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:19">B</name><operator pos:start="33:20" pos:end="33:20">)</operator><name pos:start="33:21" pos:end="33:22">q1</name> <operator pos:start="33:24" pos:end="33:25">&gt;=</operator> <operator pos:start="33:27" pos:end="33:27">(</operator><name pos:start="33:28" pos:end="33:28">B</name><operator pos:start="33:29" pos:end="33:29">)</operator><name pos:start="33:30" pos:end="33:31">q2</name><operator pos:start="33:32" pos:end="33:32">)</operator></expr>;</expr_stmt>



        <expr_stmt pos:start="37:9" pos:end="37:18"><expr pos:start="37:9" pos:end="37:17"><name pos:start="37:9" pos:end="37:9">r</name> <operator pos:start="37:11" pos:end="37:11">=</operator> <name pos:start="37:13" pos:end="37:17"><name pos:start="37:13" pos:end="37:14">q1</name><index pos:start="37:15" pos:end="37:17">[<expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">0</literal></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block>



    <comment type="block" pos:start="43:5" pos:end="43:46">/* Select only one bit from each byte.  */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:5">r</name> <operator pos:start="45:7" pos:end="45:8">&amp;=</operator> <literal type="number" pos:start="45:10" pos:end="45:27">0x0101010101010101</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:49">/* Collect the bits into the bottom byte.  */</comment>

    <comment type="block" pos:start="51:5" pos:end="51:74">/* .......A.......B.......C.......D.......E.......F.......G.......H */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:22"><expr pos:start="53:5" pos:end="53:21"><name pos:start="53:5" pos:end="53:5">r</name> <operator pos:start="53:7" pos:end="53:8">|=</operator> <name pos:start="53:10" pos:end="53:10">r</name> <operator pos:start="53:12" pos:end="53:13">&gt;&gt;</operator> <operator pos:start="53:15" pos:end="53:15">(</operator><literal type="number" pos:start="53:16" pos:end="53:18">8</literal> <operator pos:start="53:18" pos:end="53:18">-</operator> <literal type="number" pos:start="53:20" pos:end="53:20">1</literal><operator pos:start="53:21" pos:end="53:21">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="57:74">/* .......A......AB......BC......CD......DE......EF......FG......GH */</comment>

    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><name pos:start="59:5" pos:end="59:5">r</name> <operator pos:start="59:7" pos:end="59:8">|=</operator> <name pos:start="59:10" pos:end="59:10">r</name> <operator pos:start="59:12" pos:end="59:13">&gt;&gt;</operator> <operator pos:start="59:15" pos:end="59:15">(</operator><literal type="number" pos:start="59:16" pos:end="59:19">16</literal> <operator pos:start="59:19" pos:end="59:19">-</operator> <literal type="number" pos:start="59:21" pos:end="59:21">2</literal><operator pos:start="59:22" pos:end="59:22">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:74">/* .......A......AB.....ABC....ABCD....BCDE....CDEF....DEFG....EFGH */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:23"><expr pos:start="65:5" pos:end="65:22"><name pos:start="65:5" pos:end="65:5">r</name> <operator pos:start="65:7" pos:end="65:8">|=</operator> <name pos:start="65:10" pos:end="65:10">r</name> <operator pos:start="65:12" pos:end="65:13">&gt;&gt;</operator> <operator pos:start="65:15" pos:end="65:15">(</operator><literal type="number" pos:start="65:16" pos:end="65:19">32</literal> <operator pos:start="65:19" pos:end="65:19">-</operator> <literal type="number" pos:start="65:21" pos:end="65:21">4</literal><operator pos:start="65:22" pos:end="65:22">)</operator></expr>;</expr_stmt>



    <comment type="block" pos:start="69:5" pos:end="69:74">/* .......A......AB.....ABC....ABCD...ABCDE..ABCDEF.ABCDEFGABCDEFGH */</comment>

    <comment type="block" pos:start="71:5" pos:end="71:38">/* Return only the low 8 bits.  */</comment>

    <return pos:start="73:5" pos:end="76:0">return <expr pos:start="73:12" pos:end="73:19"><name pos:start="73:12" pos:end="73:12">r</name> <operator pos:start="73:14" pos:end="73:14">&amp;</operator> <literal type="number" pos:start="73:16" pos:end="73:19">0xff</literal></expr>;</return>

<cpp:else pos:start="75:1" pos:end="75:5">#<cpp:directive pos:start="75:2" pos:end="75:5">else</cpp:directive></cpp:else>

    <decl_stmt pos:start="77:5" pos:end="77:26"><decl pos:start="77:5" pos:end="77:15"><type pos:start="77:5" pos:end="77:11"><name pos:start="77:5" pos:end="77:11">uint8_t</name></type> <name pos:start="77:13" pos:end="77:15">opa</name></decl>, <decl pos:start="77:18" pos:end="77:20"><type ref="prev" pos:start="77:5" pos:end="77:11"/><name pos:start="77:18" pos:end="77:20">opb</name></decl>, <decl pos:start="77:23" pos:end="77:25"><type ref="prev" pos:start="77:5" pos:end="77:11"/><name pos:start="77:23" pos:end="77:25">res</name></decl>;</decl_stmt>

    <decl_stmt pos:start="79:5" pos:end="79:10"><decl pos:start="79:5" pos:end="79:9"><type pos:start="79:5" pos:end="79:7"><name pos:start="79:5" pos:end="79:7">int</name></type> <name pos:start="79:9" pos:end="79:9">i</name></decl>;</decl_stmt>



    <expr_stmt pos:start="83:5" pos:end="83:12"><expr pos:start="83:5" pos:end="83:11"><name pos:start="83:5" pos:end="83:7">res</name> <operator pos:start="83:9" pos:end="83:9">=</operator> <literal type="number" pos:start="83:11" pos:end="83:11">0</literal></expr>;</expr_stmt>

    <for pos:start="85:5" pos:end="97:5">for <control pos:start="85:9" pos:end="85:27">(<init pos:start="85:10" pos:end="85:15"><expr pos:start="85:10" pos:end="85:14"><name pos:start="85:10" pos:end="85:10">i</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <literal type="number" pos:start="85:14" pos:end="85:14">0</literal></expr>;</init> <condition pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:21"><name pos:start="85:17" pos:end="85:17">i</name> <operator pos:start="85:19" pos:end="85:19">&lt;</operator> <literal type="number" pos:start="85:21" pos:end="85:21">8</literal></expr>;</condition> <incr pos:start="85:24" pos:end="85:26"><expr pos:start="85:24" pos:end="85:26"><name pos:start="85:24" pos:end="85:24">i</name><operator pos:start="85:25" pos:end="85:26">++</operator></expr></incr>)</control> <block pos:start="85:29" pos:end="97:5">{<block_content pos:start="87:9" pos:end="95:9">

        <expr_stmt pos:start="87:9" pos:end="87:29"><expr pos:start="87:9" pos:end="87:28"><name pos:start="87:9" pos:end="87:11">opa</name> <operator pos:start="87:13" pos:end="87:13">=</operator> <name pos:start="87:15" pos:end="87:17">op1</name> <operator pos:start="87:19" pos:end="87:20">&gt;&gt;</operator> <operator pos:start="87:22" pos:end="87:22">(</operator><name pos:start="87:23" pos:end="87:23">i</name> <operator pos:start="87:25" pos:end="87:25">*</operator> <literal type="number" pos:start="87:27" pos:end="87:27">8</literal><operator pos:start="87:28" pos:end="87:28">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:29"><expr pos:start="89:9" pos:end="89:28"><name pos:start="89:9" pos:end="89:11">opb</name> <operator pos:start="89:13" pos:end="89:13">=</operator> <name pos:start="89:15" pos:end="89:17">op2</name> <operator pos:start="89:19" pos:end="89:20">&gt;&gt;</operator> <operator pos:start="89:22" pos:end="89:22">(</operator><name pos:start="89:23" pos:end="89:23">i</name> <operator pos:start="89:25" pos:end="89:25">*</operator> <literal type="number" pos:start="89:27" pos:end="89:27">8</literal><operator pos:start="89:28" pos:end="89:28">)</operator></expr>;</expr_stmt>

        <if_stmt pos:start="91:9" pos:end="95:9"><if pos:start="91:9" pos:end="95:9">if <condition pos:start="91:12" pos:end="91:23">(<expr pos:start="91:13" pos:end="91:22"><name pos:start="91:13" pos:end="91:15">opa</name> <operator pos:start="91:17" pos:end="91:18">&gt;=</operator> <name pos:start="91:20" pos:end="91:22">opb</name></expr>)</condition> <block pos:start="91:25" pos:end="95:9">{<block_content pos:start="93:13" pos:end="93:26">

            <expr_stmt pos:start="93:13" pos:end="93:26"><expr pos:start="93:13" pos:end="93:25"><name pos:start="93:13" pos:end="93:15">res</name> <operator pos:start="93:17" pos:end="93:18">|=</operator> <literal type="number" pos:start="93:20" pos:end="93:20">1</literal> <operator pos:start="93:22" pos:end="93:23">&lt;&lt;</operator> <name pos:start="93:25" pos:end="93:25">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="99:5" pos:end="102:0">return <expr pos:start="99:12" pos:end="99:14"><name pos:start="99:12" pos:end="99:14">res</name></expr>;</return>

<cpp:endif pos:start="101:1" pos:end="101:6">#<cpp:directive pos:start="101:2" pos:end="101:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
