<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19698.c" pos:tabs="8"><function pos:start="1:1" pos:end="125:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">compare_refcounts</name><parameter_list pos:start="1:30" pos:end="7:76">(<parameter pos:start="1:31" pos:end="1:50"><decl pos:start="1:31" pos:end="1:50"><type pos:start="1:31" pos:end="1:50"><name pos:start="1:31" pos:end="1:46">BlockDriverState</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:50">bs</name></decl></parameter>, <parameter pos:start="1:53" pos:end="1:72"><decl pos:start="1:53" pos:end="1:72"><type pos:start="1:53" pos:end="1:72"><name pos:start="1:53" pos:end="1:67">BdrvCheckResult</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:72">res</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:47"><decl pos:start="3:31" pos:end="3:47"><type pos:start="3:31" pos:end="3:47"><name pos:start="3:31" pos:end="3:43">BdrvCheckMode</name></type> <name pos:start="3:45" pos:end="3:47">fix</name></decl></parameter>, <parameter pos:start="3:50" pos:end="3:62"><decl pos:start="3:50" pos:end="3:62"><type pos:start="3:50" pos:end="3:62"><name pos:start="3:50" pos:end="3:53">bool</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier></type><name pos:start="3:56" pos:end="3:62">rebuild</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:54"><decl pos:start="5:31" pos:end="5:54"><type pos:start="5:31" pos:end="5:54"><name pos:start="5:31" pos:end="5:37">int64_t</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:54">highest_cluster</name></decl></parameter>,

                              <parameter pos:start="7:31" pos:end="7:54"><decl pos:start="7:31" pos:end="7:54"><type pos:start="7:31" pos:end="7:54"><name pos:start="7:31" pos:end="7:38">uint16_t</name> <modifier pos:start="7:40" pos:end="7:40">*</modifier></type><name pos:start="7:41" pos:end="7:54">refcount_table</name></decl></parameter>, <parameter pos:start="7:57" pos:end="7:75"><decl pos:start="7:57" pos:end="7:75"><type pos:start="7:57" pos:end="7:75"><name pos:start="7:57" pos:end="7:63">int64_t</name></type> <name pos:start="7:65" pos:end="7:75">nb_clusters</name></decl></parameter>)</parameter_list>

<block pos:start="9:1" pos:end="125:1">{<block_content pos:start="11:5" pos:end="123:5">

    <decl_stmt pos:start="11:5" pos:end="11:34"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">BDRVQcowState</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:20">s</name> <init pos:start="11:22" pos:end="11:33">= <expr pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:33"><name pos:start="11:24" pos:end="11:25">bs</name><operator pos:start="11:26" pos:end="11:27">-&gt;</operator><name pos:start="11:28" pos:end="11:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:14"><decl pos:start="13:5" pos:end="13:13"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:13">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:34"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">refcount1</name></decl>, <decl pos:start="15:25" pos:end="15:33"><type ref="prev" pos:start="15:5" pos:end="15:12"/><name pos:start="15:25" pos:end="15:33">refcount2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:12"><decl pos:start="17:5" pos:end="17:11"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:11">ret</name></decl>;</decl_stmt>



    <for pos:start="21:5" pos:end="123:5">for <control pos:start="21:9" pos:end="21:59">(<init pos:start="21:10" pos:end="21:37"><expr pos:start="21:10" pos:end="21:14"><name pos:start="21:10" pos:end="21:10">i</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <literal type="number" pos:start="21:14" pos:end="21:14">0</literal></expr><operator pos:start="21:15" pos:end="21:15">,</operator> <expr pos:start="21:17" pos:end="21:36"><operator pos:start="21:17" pos:end="21:17">*</operator><name pos:start="21:18" pos:end="21:32">highest_cluster</name> <operator pos:start="21:34" pos:end="21:34">=</operator> <literal type="number" pos:start="21:36" pos:end="21:36">0</literal></expr>;</init> <condition pos:start="21:39" pos:end="21:54"><expr pos:start="21:39" pos:end="21:53"><name pos:start="21:39" pos:end="21:39">i</name> <operator pos:start="21:41" pos:end="21:41">&lt;</operator> <name pos:start="21:43" pos:end="21:53">nb_clusters</name></expr>;</condition> <incr pos:start="21:56" pos:end="21:58"><expr pos:start="21:56" pos:end="21:58"><name pos:start="21:56" pos:end="21:56">i</name><operator pos:start="21:57" pos:end="21:58">++</operator></expr></incr>)</control> <block pos:start="21:61" pos:end="123:5">{<block_content pos:start="23:9" pos:end="121:9">

        <expr_stmt pos:start="23:9" pos:end="23:52"><expr pos:start="23:9" pos:end="23:51"><name pos:start="23:9" pos:end="23:11">ret</name> <operator pos:start="23:13" pos:end="23:13">=</operator> <call pos:start="23:15" pos:end="23:51"><name pos:start="23:15" pos:end="23:32">qcow2_get_refcount</name><argument_list pos:start="23:33" pos:end="23:51">(<argument pos:start="23:34" pos:end="23:35"><expr pos:start="23:34" pos:end="23:35"><name pos:start="23:34" pos:end="23:35">bs</name></expr></argument>, <argument pos:start="23:38" pos:end="23:38"><expr pos:start="23:38" pos:end="23:38"><name pos:start="23:38" pos:end="23:38">i</name></expr></argument>, <argument pos:start="23:41" pos:end="23:50"><expr pos:start="23:41" pos:end="23:50"><operator pos:start="23:41" pos:end="23:41">&amp;</operator><name pos:start="23:42" pos:end="23:50">refcount1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="35:9"><if pos:start="25:9" pos:end="35:9">if <condition pos:start="25:12" pos:end="25:20">(<expr pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:15">ret</name> <operator pos:start="25:17" pos:end="25:17">&lt;</operator> <literal type="number" pos:start="25:19" pos:end="25:19">0</literal></expr>)</condition> <block pos:start="25:22" pos:end="35:9">{<block_content pos:start="27:13" pos:end="33:21">

            <expr_stmt pos:start="27:13" pos:end="29:39"><expr pos:start="27:13" pos:end="29:38"><call pos:start="27:13" pos:end="29:38"><name pos:start="27:13" pos:end="27:19">fprintf</name><argument_list pos:start="27:20" pos:end="29:38">(<argument pos:start="27:21" pos:end="27:26"><expr pos:start="27:21" pos:end="27:26"><name pos:start="27:21" pos:end="27:26">stderr</name></expr></argument>, <argument pos:start="27:29" pos:end="27:78"><expr pos:start="27:29" pos:end="27:78"><literal type="string" pos:start="27:29" pos:end="27:62">"Can't get refcount for cluster %"</literal> <name pos:start="27:64" pos:end="27:69">PRId64</name> <literal type="string" pos:start="27:71" pos:end="27:78">": %s\n"</literal></expr></argument>,

                    <argument pos:start="29:21" pos:end="29:21"><expr pos:start="29:21" pos:end="29:21"><name pos:start="29:21" pos:end="29:21">i</name></expr></argument>, <argument pos:start="29:24" pos:end="29:37"><expr pos:start="29:24" pos:end="29:37"><call pos:start="29:24" pos:end="29:37"><name pos:start="29:24" pos:end="29:31">strerror</name><argument_list pos:start="29:32" pos:end="29:37">(<argument pos:start="29:33" pos:end="29:36"><expr pos:start="29:33" pos:end="29:36"><operator pos:start="29:33" pos:end="29:33">-</operator><name pos:start="29:34" pos:end="29:36">ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="31:13" pos:end="31:32"><expr pos:start="31:13" pos:end="31:31"><name pos:start="31:13" pos:end="31:29"><name pos:start="31:13" pos:end="31:15">res</name><operator pos:start="31:16" pos:end="31:17">-&gt;</operator><name pos:start="31:18" pos:end="31:29">check_errors</name></name><operator pos:start="31:30" pos:end="31:31">++</operator></expr>;</expr_stmt>

            <continue pos:start="33:13" pos:end="33:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="39:9" pos:end="39:38"><expr pos:start="39:9" pos:end="39:37"><name pos:start="39:9" pos:end="39:17">refcount2</name> <operator pos:start="39:19" pos:end="39:19">=</operator> <name pos:start="39:21" pos:end="39:37"><name pos:start="39:21" pos:end="39:34">refcount_table</name><index pos:start="39:35" pos:end="39:37">[<expr pos:start="39:36" pos:end="39:36"><name pos:start="39:36" pos:end="39:36">i</name></expr>]</index></name></expr>;</expr_stmt>



        <if_stmt pos:start="43:9" pos:end="47:9"><if pos:start="43:9" pos:end="47:9">if <condition pos:start="43:12" pos:end="43:43">(<expr pos:start="43:13" pos:end="43:42"><name pos:start="43:13" pos:end="43:21">refcount1</name> <operator pos:start="43:23" pos:end="43:23">&gt;</operator> <literal type="number" pos:start="43:25" pos:end="43:25">0</literal> <operator pos:start="43:27" pos:end="43:28">||</operator> <name pos:start="43:30" pos:end="43:38">refcount2</name> <operator pos:start="43:40" pos:end="43:40">&gt;</operator> <literal type="number" pos:start="43:42" pos:end="43:42">0</literal></expr>)</condition> <block pos:start="43:45" pos:end="47:9">{<block_content pos:start="45:13" pos:end="45:33">

            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><operator pos:start="45:13" pos:end="45:13">*</operator><name pos:start="45:14" pos:end="45:28">highest_cluster</name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:32">i</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="51:9" pos:end="121:9"><if pos:start="51:9" pos:end="121:9">if <condition pos:start="51:12" pos:end="51:35">(<expr pos:start="51:13" pos:end="51:34"><name pos:start="51:13" pos:end="51:21">refcount1</name> <operator pos:start="51:23" pos:end="51:24">!=</operator> <name pos:start="51:26" pos:end="51:34">refcount2</name></expr>)</condition> <block pos:start="51:37" pos:end="121:9">{<block_content pos:start="55:13" pos:end="119:13">

            <comment type="block" pos:start="53:13" pos:end="53:60">/* Check if we're allowed to fix the mismatch */</comment>

            <decl_stmt pos:start="55:13" pos:end="55:34"><decl pos:start="55:13" pos:end="55:33"><type pos:start="55:13" pos:end="55:17"><name pos:start="55:13" pos:end="55:15">int</name> <modifier pos:start="55:17" pos:end="55:17">*</modifier></type><name pos:start="55:18" pos:end="55:26">num_fixed</name> <init pos:start="55:28" pos:end="55:33">= <expr pos:start="55:30" pos:end="55:33"><name pos:start="55:30" pos:end="55:33">NULL</name></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="57:13" pos:end="69:13"><if pos:start="57:13" pos:end="61:13">if <condition pos:start="57:16" pos:end="57:31">(<expr pos:start="57:17" pos:end="57:30"><name pos:start="57:17" pos:end="57:25">refcount1</name> <operator pos:start="57:27" pos:end="57:28">==</operator> <literal type="number" pos:start="57:30" pos:end="57:30">0</literal></expr>)</condition> <block pos:start="57:33" pos:end="61:13">{<block_content pos:start="59:17" pos:end="59:32">

                <expr_stmt pos:start="59:17" pos:end="59:32"><expr pos:start="59:17" pos:end="59:31"><operator pos:start="59:17" pos:end="59:17">*</operator><name pos:start="59:18" pos:end="59:24">rebuild</name> <operator pos:start="59:26" pos:end="59:26">=</operator> <name pos:start="59:28" pos:end="59:31">true</name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="61:15" pos:end="65:13">else if <condition pos:start="61:23" pos:end="61:71">(<expr pos:start="61:24" pos:end="61:70"><name pos:start="61:24" pos:end="61:32">refcount1</name> <operator pos:start="61:34" pos:end="61:34">&gt;</operator> <name pos:start="61:36" pos:end="61:44">refcount2</name> <operator pos:start="61:46" pos:end="61:47">&amp;&amp;</operator> <operator pos:start="61:49" pos:end="61:49">(</operator><name pos:start="61:50" pos:end="61:52">fix</name> <operator pos:start="61:54" pos:end="61:54">&amp;</operator> <name pos:start="61:56" pos:end="61:69">BDRV_FIX_LEAKS</name><operator pos:start="61:70" pos:end="61:70">)</operator></expr>)</condition> <block pos:start="61:73" pos:end="65:13">{<block_content pos:start="63:17" pos:end="63:46">

                <expr_stmt pos:start="63:17" pos:end="63:46"><expr pos:start="63:17" pos:end="63:45"><name pos:start="63:17" pos:end="63:25">num_fixed</name> <operator pos:start="63:27" pos:end="63:27">=</operator> <operator pos:start="63:29" pos:end="63:29">&amp;</operator><name pos:start="63:30" pos:end="63:45"><name pos:start="63:30" pos:end="63:32">res</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:45">leaks_fixed</name></name></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="65:15" pos:end="69:13">else if <condition pos:start="65:23" pos:end="65:72">(<expr pos:start="65:24" pos:end="65:71"><name pos:start="65:24" pos:end="65:32">refcount1</name> <operator pos:start="65:34" pos:end="65:34">&lt;</operator> <name pos:start="65:36" pos:end="65:44">refcount2</name> <operator pos:start="65:46" pos:end="65:47">&amp;&amp;</operator> <operator pos:start="65:49" pos:end="65:49">(</operator><name pos:start="65:50" pos:end="65:52">fix</name> <operator pos:start="65:54" pos:end="65:54">&amp;</operator> <name pos:start="65:56" pos:end="65:70">BDRV_FIX_ERRORS</name><operator pos:start="65:71" pos:end="65:71">)</operator></expr>)</condition> <block pos:start="65:74" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:52">

                <expr_stmt pos:start="67:17" pos:end="67:52"><expr pos:start="67:17" pos:end="67:51"><name pos:start="67:17" pos:end="67:25">num_fixed</name> <operator pos:start="67:27" pos:end="67:27">=</operator> <operator pos:start="67:29" pos:end="67:29">&amp;</operator><name pos:start="67:30" pos:end="67:51"><name pos:start="67:30" pos:end="67:32">res</name><operator pos:start="67:33" pos:end="67:34">-&gt;</operator><name pos:start="67:35" pos:end="67:51">corruptions_fixed</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="73:13" pos:end="83:44"><expr pos:start="73:13" pos:end="83:43"><call pos:start="73:13" pos:end="83:43"><name pos:start="73:13" pos:end="73:19">fprintf</name><argument_list pos:start="73:20" pos:end="83:43">(<argument pos:start="73:21" pos:end="73:26"><expr pos:start="73:21" pos:end="73:26"><name pos:start="73:21" pos:end="73:26">stderr</name></expr></argument>, <argument pos:start="73:29" pos:end="75:46"><expr pos:start="73:29" pos:end="75:46"><literal type="string" pos:start="73:29" pos:end="73:42">"%s cluster %"</literal> <name pos:start="73:44" pos:end="73:49">PRId64</name> <literal type="string" pos:start="73:51" pos:end="73:63">" refcount=%"</literal> <name pos:start="73:65" pos:end="73:70">PRIu64</name>

                    <literal type="string" pos:start="75:21" pos:end="75:34">" reference=%"</literal> <name pos:start="75:36" pos:end="75:41">PRIu64</name> <literal type="string" pos:start="75:43" pos:end="75:46">"\n"</literal></expr></argument>,

                   <argument pos:start="77:20" pos:end="81:51"><expr pos:start="77:20" pos:end="81:51"><ternary pos:start="77:20" pos:end="81:51"><condition pos:start="77:20" pos:end="77:42"><expr pos:start="77:20" pos:end="77:36"><name pos:start="77:20" pos:end="77:28">num_fixed</name> <operator pos:start="77:30" pos:end="77:31">!=</operator> <name pos:start="77:33" pos:end="77:36">NULL</name></expr>     ?</condition><then pos:start="77:44" pos:end="77:54"> <expr pos:start="77:44" pos:end="77:54"><literal type="string" pos:start="77:44" pos:end="77:54">"Repairing"</literal></expr> </then><else pos:start="77:56" pos:end="81:51">:

                   <expr pos:start="79:20" pos:end="81:51"><ternary pos:start="79:20" pos:end="81:51"><condition pos:start="79:20" pos:end="79:42"><expr pos:start="79:20" pos:end="79:40"><name pos:start="79:20" pos:end="79:28">refcount1</name> <operator pos:start="79:30" pos:end="79:30">&lt;</operator> <name pos:start="79:32" pos:end="79:40">refcount2</name></expr> ?</condition><then pos:start="79:44" pos:end="79:50"> <expr pos:start="79:44" pos:end="79:50"><literal type="string" pos:start="79:44" pos:end="79:50">"ERROR"</literal></expr> </then><else pos:start="79:52" pos:end="81:51">:

                                           <expr pos:start="81:44" pos:end="81:51"><literal type="string" pos:start="81:44" pos:end="81:51">"Leaked"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,

                   <argument pos:start="83:20" pos:end="83:20"><expr pos:start="83:20" pos:end="83:20"><name pos:start="83:20" pos:end="83:20">i</name></expr></argument>, <argument pos:start="83:23" pos:end="83:31"><expr pos:start="83:23" pos:end="83:31"><name pos:start="83:23" pos:end="83:31">refcount1</name></expr></argument>, <argument pos:start="83:34" pos:end="83:42"><expr pos:start="83:34" pos:end="83:42"><name pos:start="83:34" pos:end="83:42">refcount2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="87:13" pos:end="105:13"><if pos:start="87:13" pos:end="105:13">if <condition pos:start="87:16" pos:end="87:26">(<expr pos:start="87:17" pos:end="87:25"><name pos:start="87:17" pos:end="87:25">num_fixed</name></expr>)</condition> <block pos:start="87:28" pos:end="105:13">{<block_content pos:start="89:17" pos:end="103:17">

                <expr_stmt pos:start="89:17" pos:end="95:60"><expr pos:start="89:17" pos:end="95:59"><name pos:start="89:17" pos:end="89:19">ret</name> <operator pos:start="89:21" pos:end="89:21">=</operator> <call pos:start="89:23" pos:end="95:59"><name pos:start="89:23" pos:end="89:37">update_refcount</name><argument_list pos:start="89:38" pos:end="95:59">(<argument pos:start="89:39" pos:end="89:40"><expr pos:start="89:39" pos:end="89:40"><name pos:start="89:39" pos:end="89:40">bs</name></expr></argument>, <argument pos:start="89:43" pos:end="89:62"><expr pos:start="89:43" pos:end="89:62"><name pos:start="89:43" pos:end="89:43">i</name> <operator pos:start="89:45" pos:end="89:46">&lt;&lt;</operator> <name pos:start="89:48" pos:end="89:62"><name pos:start="89:48" pos:end="89:48">s</name><operator pos:start="89:49" pos:end="89:50">-&gt;</operator><name pos:start="89:51" pos:end="89:62">cluster_bits</name></name></expr></argument>, <argument pos:start="89:65" pos:end="89:65"><expr pos:start="89:65" pos:end="89:65"><literal type="number" pos:start="89:65" pos:end="89:65">1</literal></expr></argument>,

                                      <argument pos:start="91:39" pos:end="91:73"><expr pos:start="91:39" pos:end="91:73"><call pos:start="91:39" pos:end="91:73"><name pos:start="91:39" pos:end="91:51">refcount_diff</name><argument_list pos:start="91:52" pos:end="91:73">(<argument pos:start="91:53" pos:end="91:61"><expr pos:start="91:53" pos:end="91:61"><name pos:start="91:53" pos:end="91:61">refcount1</name></expr></argument>, <argument pos:start="91:64" pos:end="91:72"><expr pos:start="91:64" pos:end="91:72"><name pos:start="91:64" pos:end="91:72">refcount2</name></expr></argument>)</argument_list></call></expr></argument>,

                                      <argument pos:start="93:39" pos:end="93:59"><expr pos:start="93:39" pos:end="93:59"><name pos:start="93:39" pos:end="93:47">refcount1</name> <operator pos:start="93:49" pos:end="93:49">&gt;</operator> <name pos:start="93:51" pos:end="93:59">refcount2</name></expr></argument>,

                                      <argument pos:start="95:39" pos:end="95:58"><expr pos:start="95:39" pos:end="95:58"><name pos:start="95:39" pos:end="95:58">QCOW2_DISCARD_ALWAYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="97:17" pos:end="103:17"><if pos:start="97:17" pos:end="103:17">if <condition pos:start="97:20" pos:end="97:29">(<expr pos:start="97:21" pos:end="97:28"><name pos:start="97:21" pos:end="97:23">ret</name> <operator pos:start="97:25" pos:end="97:26">&gt;=</operator> <literal type="number" pos:start="97:28" pos:end="97:28">0</literal></expr>)</condition> <block pos:start="97:31" pos:end="103:17">{<block_content pos:start="99:21" pos:end="101:29">

                    <expr_stmt pos:start="99:21" pos:end="99:35"><expr pos:start="99:21" pos:end="99:34"><operator pos:start="99:21" pos:end="99:21">(</operator><operator pos:start="99:22" pos:end="99:22">*</operator><name pos:start="99:23" pos:end="99:31">num_fixed</name><operator pos:start="99:32" pos:end="99:32">)</operator><operator pos:start="99:33" pos:end="99:34">++</operator></expr>;</expr_stmt>

                    <continue pos:start="101:21" pos:end="101:29">continue;</continue>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="109:13" pos:end="109:52">/* And if we couldn't, print an error */</comment>

            <if_stmt pos:start="111:13" pos:end="119:13"><if pos:start="111:13" pos:end="115:13">if <condition pos:start="111:16" pos:end="111:38">(<expr pos:start="111:17" pos:end="111:37"><name pos:start="111:17" pos:end="111:25">refcount1</name> <operator pos:start="111:27" pos:end="111:27">&lt;</operator> <name pos:start="111:29" pos:end="111:37">refcount2</name></expr>)</condition> <block pos:start="111:40" pos:end="115:13">{<block_content pos:start="113:17" pos:end="113:35">

                <expr_stmt pos:start="113:17" pos:end="113:35"><expr pos:start="113:17" pos:end="113:34"><name pos:start="113:17" pos:end="113:32"><name pos:start="113:17" pos:end="113:19">res</name><operator pos:start="113:20" pos:end="113:21">-&gt;</operator><name pos:start="113:22" pos:end="113:32">corruptions</name></name><operator pos:start="113:33" pos:end="113:34">++</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="115:15" pos:end="119:13">else <block pos:start="115:20" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:29">

                <expr_stmt pos:start="117:17" pos:end="117:29"><expr pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:26"><name pos:start="117:17" pos:end="117:19">res</name><operator pos:start="117:20" pos:end="117:21">-&gt;</operator><name pos:start="117:22" pos:end="117:26">leaks</name></name><operator pos:start="117:27" pos:end="117:28">++</operator></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
