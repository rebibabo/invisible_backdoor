<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/27223.c" pos:tabs="8"><function pos:start="1:1" pos:end="97:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_std</name><parameter_list pos:start="1:20" pos:end="1:38">(<parameter pos:start="1:21" pos:end="1:37"><decl pos:start="1:21" pos:end="1:37"><type pos:start="1:21" pos:end="1:34"><name pos:start="1:21" pos:end="1:32">DisasContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="97:1">{<block_content pos:start="5:5" pos:end="95:5">

    <decl_stmt pos:start="5:5" pos:end="5:11"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">TCGv</name></type> <name pos:start="7:10" pos:end="7:11">EA</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:25"><expr pos:start="11:5" pos:end="11:24"><name pos:start="11:5" pos:end="11:6">rs</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:24"><name pos:start="11:10" pos:end="11:11">rS</name><argument_list pos:start="11:12" pos:end="11:24">(<argument pos:start="11:13" pos:end="11:23"><expr pos:start="11:13" pos:end="11:23"><name pos:start="11:13" pos:end="11:23"><name pos:start="11:13" pos:end="11:15">ctx</name><operator pos:start="11:16" pos:end="11:17">-&gt;</operator><name pos:start="11:18" pos:end="11:23">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="95:5"><if pos:start="13:5" pos:end="65:5">if <condition pos:start="13:8" pos:end="13:35">(<expr pos:start="13:9" pos:end="13:34"><operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:12">ctx</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:20">opcode</name></name> <operator pos:start="13:22" pos:end="13:22">&amp;</operator> <literal type="number" pos:start="13:24" pos:end="13:26">0x3</literal><operator pos:start="13:27" pos:end="13:27">)</operator> <operator pos:start="13:29" pos:end="13:30">==</operator> <literal type="number" pos:start="13:32" pos:end="13:34">0x2</literal></expr>)</condition> <block pos:start="13:37" pos:end="65:5">{<block_content pos:start="17:9" pos:end="64:0">

<cpp:if pos:start="15:1" pos:end="15:29">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:29"><call pos:start="15:5" pos:end="15:29"><name pos:start="15:5" pos:end="15:11">defined</name><argument_list pos:start="15:12" pos:end="15:29">(<argument pos:start="15:13" pos:end="15:28"><expr pos:start="15:13" pos:end="15:28"><name pos:start="15:13" pos:end="15:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="17:9" pos:end="20:0"><expr pos:start="17:9" pos:end="17:55"><call pos:start="17:9" pos:end="17:55"><name pos:start="17:9" pos:end="17:27">gen_inval_exception</name><argument_list pos:start="17:28" pos:end="17:55">(<argument pos:start="17:29" pos:end="17:31"><expr pos:start="17:29" pos:end="17:31"><name pos:start="17:29" pos:end="17:31">ctx</name></expr></argument>, <argument pos:start="17:34" pos:end="17:54"><expr pos:start="17:34" pos:end="17:54"><name pos:start="17:34" pos:end="17:54">POWERPC_EXCP_PRIV_OPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="19:1" pos:end="19:5">#<cpp:directive pos:start="19:2" pos:end="19:5">else</cpp:directive></cpp:else>

        <comment type="block" pos:start="21:9" pos:end="21:17">/* stq */</comment>

        <if_stmt pos:start="23:9" pos:end="29:9"><if pos:start="23:9" pos:end="29:9">if <condition pos:start="23:12" pos:end="23:40">(<expr pos:start="23:13" pos:end="23:39"><call pos:start="23:13" pos:end="23:39"><name pos:start="23:13" pos:end="23:20">unlikely</name><argument_list pos:start="23:21" pos:end="23:39">(<argument pos:start="23:22" pos:end="23:38"><expr pos:start="23:22" pos:end="23:38"><name pos:start="23:22" pos:end="23:33"><name pos:start="23:22" pos:end="23:24">ctx</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:33">mem_idx</name></name> <operator pos:start="23:35" pos:end="23:36">==</operator> <literal type="number" pos:start="23:38" pos:end="23:38">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="23:42" pos:end="29:9">{<block_content pos:start="25:13" pos:end="27:19">

            <expr_stmt pos:start="25:13" pos:end="25:60"><expr pos:start="25:13" pos:end="25:59"><call pos:start="25:13" pos:end="25:59"><name pos:start="25:13" pos:end="25:31">gen_inval_exception</name><argument_list pos:start="25:32" pos:end="25:59">(<argument pos:start="25:33" pos:end="25:35"><expr pos:start="25:33" pos:end="25:35"><name pos:start="25:33" pos:end="25:35">ctx</name></expr></argument>, <argument pos:start="25:38" pos:end="25:58"><expr pos:start="25:38" pos:end="25:58"><name pos:start="25:38" pos:end="25:58">POWERPC_EXCP_PRIV_OPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="27:13" pos:end="27:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:29">(<expr pos:start="31:13" pos:end="31:28"><call pos:start="31:13" pos:end="31:28"><name pos:start="31:13" pos:end="31:20">unlikely</name><argument_list pos:start="31:21" pos:end="31:28">(<argument pos:start="31:22" pos:end="31:27"><expr pos:start="31:22" pos:end="31:27"><name pos:start="31:22" pos:end="31:23">rs</name> <operator pos:start="31:25" pos:end="31:25">&amp;</operator> <literal type="number" pos:start="31:27" pos:end="31:27">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:31" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:19">

            <expr_stmt pos:start="33:13" pos:end="33:63"><expr pos:start="33:13" pos:end="33:62"><call pos:start="33:13" pos:end="33:62"><name pos:start="33:13" pos:end="33:31">gen_inval_exception</name><argument_list pos:start="33:32" pos:end="33:62">(<argument pos:start="33:33" pos:end="33:35"><expr pos:start="33:33" pos:end="33:35"><name pos:start="33:33" pos:end="33:35">ctx</name></expr></argument>, <argument pos:start="33:38" pos:end="33:61"><expr pos:start="33:38" pos:end="33:61"><name pos:start="33:38" pos:end="33:61">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="35:13" pos:end="35:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="39:9" pos:end="47:9"><if pos:start="39:9" pos:end="47:9">if <condition pos:start="39:12" pos:end="39:35">(<expr pos:start="39:13" pos:end="39:34"><call pos:start="39:13" pos:end="39:34"><name pos:start="39:13" pos:end="39:20">unlikely</name><argument_list pos:start="39:21" pos:end="39:34">(<argument pos:start="39:22" pos:end="39:33"><expr pos:start="39:22" pos:end="39:33"><name pos:start="39:22" pos:end="39:33"><name pos:start="39:22" pos:end="39:24">ctx</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:33">le_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="39:37" pos:end="47:9">{<block_content pos:start="43:13" pos:end="45:19">

            <comment type="block" pos:start="41:13" pos:end="41:51">/* Little-endian mode is not handled */</comment>

            <expr_stmt pos:start="43:13" pos:end="43:78"><expr pos:start="43:13" pos:end="43:77"><call pos:start="43:13" pos:end="43:77"><name pos:start="43:13" pos:end="43:29">gen_exception_err</name><argument_list pos:start="43:30" pos:end="43:77">(<argument pos:start="43:31" pos:end="43:33"><expr pos:start="43:31" pos:end="43:33"><name pos:start="43:31" pos:end="43:33">ctx</name></expr></argument>, <argument pos:start="43:36" pos:end="43:53"><expr pos:start="43:36" pos:end="43:53"><name pos:start="43:36" pos:end="43:53">POWERPC_EXCP_ALIGN</name></expr></argument>, <argument pos:start="43:56" pos:end="43:76"><expr pos:start="43:56" pos:end="43:76"><name pos:start="43:56" pos:end="43:76">POWERPC_EXCP_ALIGN_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="45:13" pos:end="45:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:45"><expr pos:start="49:9" pos:end="49:44"><call pos:start="49:9" pos:end="49:44"><name pos:start="49:9" pos:end="49:27">gen_set_access_type</name><argument_list pos:start="49:28" pos:end="49:44">(<argument pos:start="49:29" pos:end="49:31"><expr pos:start="49:29" pos:end="49:31"><name pos:start="49:29" pos:end="49:31">ctx</name></expr></argument>, <argument pos:start="49:34" pos:end="49:43"><expr pos:start="49:34" pos:end="49:43"><name pos:start="49:34" pos:end="49:43">ACCESS_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:28"><expr pos:start="51:9" pos:end="51:27"><name pos:start="51:9" pos:end="51:10">EA</name> <operator pos:start="51:12" pos:end="51:12">=</operator> <call pos:start="51:14" pos:end="51:27"><name pos:start="51:14" pos:end="51:25">tcg_temp_new</name><argument_list pos:start="51:26" pos:end="51:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:42"><expr pos:start="53:9" pos:end="53:41"><call pos:start="53:9" pos:end="53:41"><name pos:start="53:9" pos:end="53:26">gen_addr_imm_index</name><argument_list pos:start="53:27" pos:end="53:41">(<argument pos:start="53:28" pos:end="53:30"><expr pos:start="53:28" pos:end="53:30"><name pos:start="53:28" pos:end="53:30">ctx</name></expr></argument>, <argument pos:start="53:33" pos:end="53:34"><expr pos:start="53:33" pos:end="53:34"><name pos:start="53:33" pos:end="53:34">EA</name></expr></argument>, <argument pos:start="53:37" pos:end="53:40"><expr pos:start="53:37" pos:end="53:40"><literal type="number" pos:start="53:37" pos:end="53:40">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:44"><expr pos:start="55:9" pos:end="55:43"><call pos:start="55:9" pos:end="55:43"><name pos:start="55:9" pos:end="55:21">gen_qemu_st64</name><argument_list pos:start="55:22" pos:end="55:43">(<argument pos:start="55:23" pos:end="55:25"><expr pos:start="55:23" pos:end="55:25"><name pos:start="55:23" pos:end="55:25">ctx</name></expr></argument>, <argument pos:start="55:28" pos:end="55:38"><expr pos:start="55:28" pos:end="55:38"><name pos:start="55:28" pos:end="55:38"><name pos:start="55:28" pos:end="55:34">cpu_gpr</name><index pos:start="55:35" pos:end="55:38">[<expr pos:start="55:36" pos:end="55:37"><name pos:start="55:36" pos:end="55:37">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="55:41" pos:end="55:42"><expr pos:start="55:41" pos:end="55:42"><name pos:start="55:41" pos:end="55:42">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:37"><expr pos:start="57:9" pos:end="57:36"><call pos:start="57:9" pos:end="57:36"><name pos:start="57:9" pos:end="57:20">gen_addr_add</name><argument_list pos:start="57:21" pos:end="57:36">(<argument pos:start="57:22" pos:end="57:24"><expr pos:start="57:22" pos:end="57:24"><name pos:start="57:22" pos:end="57:24">ctx</name></expr></argument>, <argument pos:start="57:27" pos:end="57:28"><expr pos:start="57:27" pos:end="57:28"><name pos:start="57:27" pos:end="57:28">EA</name></expr></argument>, <argument pos:start="57:31" pos:end="57:32"><expr pos:start="57:31" pos:end="57:32"><name pos:start="57:31" pos:end="57:32">EA</name></expr></argument>, <argument pos:start="57:35" pos:end="57:35"><expr pos:start="57:35" pos:end="57:35"><literal type="number" pos:start="57:35" pos:end="57:35">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:46"><expr pos:start="59:9" pos:end="59:45"><call pos:start="59:9" pos:end="59:45"><name pos:start="59:9" pos:end="59:21">gen_qemu_st64</name><argument_list pos:start="59:22" pos:end="59:45">(<argument pos:start="59:23" pos:end="59:25"><expr pos:start="59:23" pos:end="59:25"><name pos:start="59:23" pos:end="59:25">ctx</name></expr></argument>, <argument pos:start="59:28" pos:end="59:40"><expr pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:40"><name pos:start="59:28" pos:end="59:34">cpu_gpr</name><index pos:start="59:35" pos:end="59:40">[<expr pos:start="59:36" pos:end="59:39"><name pos:start="59:36" pos:end="59:37">rs</name><operator pos:start="59:38" pos:end="59:38">+</operator><literal type="number" pos:start="59:39" pos:end="59:39">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="59:43" pos:end="59:44"><expr pos:start="59:43" pos:end="59:44"><name pos:start="59:43" pos:end="59:44">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="64:0"><expr pos:start="61:9" pos:end="61:25"><call pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:21">tcg_temp_free</name><argument_list pos:start="61:22" pos:end="61:25">(<argument pos:start="61:23" pos:end="61:24"><expr pos:start="61:23" pos:end="61:24"><name pos:start="61:23" pos:end="61:24">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if> <else pos:start="65:7" pos:end="95:5">else <block pos:start="65:12" pos:end="95:5">{<block_content pos:start="69:9" pos:end="93:26">

        <comment type="block" pos:start="67:9" pos:end="67:24">/* std / stdu */</comment>

        <if_stmt pos:start="69:9" pos:end="79:9"><if pos:start="69:9" pos:end="79:9">if <condition pos:start="69:12" pos:end="69:28">(<expr pos:start="69:13" pos:end="69:27"><call pos:start="69:13" pos:end="69:27"><name pos:start="69:13" pos:end="69:14">Rc</name><argument_list pos:start="69:15" pos:end="69:27">(<argument pos:start="69:16" pos:end="69:26"><expr pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:26"><name pos:start="69:16" pos:end="69:18">ctx</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:26">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:30" pos:end="79:9">{<block_content pos:start="71:13" pos:end="77:13">

            <if_stmt pos:start="71:13" pos:end="77:13"><if pos:start="71:13" pos:end="77:13">if <condition pos:start="71:16" pos:end="71:47">(<expr pos:start="71:17" pos:end="71:46"><call pos:start="71:17" pos:end="71:46"><name pos:start="71:17" pos:end="71:24">unlikely</name><argument_list pos:start="71:25" pos:end="71:46">(<argument pos:start="71:26" pos:end="71:45"><expr pos:start="71:26" pos:end="71:45"><call pos:start="71:26" pos:end="71:40"><name pos:start="71:26" pos:end="71:27">rA</name><argument_list pos:start="71:28" pos:end="71:40">(<argument pos:start="71:29" pos:end="71:39"><expr pos:start="71:29" pos:end="71:39"><name pos:start="71:29" pos:end="71:39"><name pos:start="71:29" pos:end="71:31">ctx</name><operator pos:start="71:32" pos:end="71:33">-&gt;</operator><name pos:start="71:34" pos:end="71:39">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="71:42" pos:end="71:43">==</operator> <literal type="number" pos:start="71:45" pos:end="71:45">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="71:49" pos:end="77:13">{<block_content pos:start="73:17" pos:end="75:23">

                <expr_stmt pos:start="73:17" pos:end="73:67"><expr pos:start="73:17" pos:end="73:66"><call pos:start="73:17" pos:end="73:66"><name pos:start="73:17" pos:end="73:35">gen_inval_exception</name><argument_list pos:start="73:36" pos:end="73:66">(<argument pos:start="73:37" pos:end="73:39"><expr pos:start="73:37" pos:end="73:39"><name pos:start="73:37" pos:end="73:39">ctx</name></expr></argument>, <argument pos:start="73:42" pos:end="73:65"><expr pos:start="73:42" pos:end="73:65"><name pos:start="73:42" pos:end="73:65">POWERPC_EXCP_INVAL_INVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="75:17" pos:end="75:23">return;</return>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="81:9" pos:end="81:45"><expr pos:start="81:9" pos:end="81:44"><call pos:start="81:9" pos:end="81:44"><name pos:start="81:9" pos:end="81:27">gen_set_access_type</name><argument_list pos:start="81:28" pos:end="81:44">(<argument pos:start="81:29" pos:end="81:31"><expr pos:start="81:29" pos:end="81:31"><name pos:start="81:29" pos:end="81:31">ctx</name></expr></argument>, <argument pos:start="81:34" pos:end="81:43"><expr pos:start="81:34" pos:end="81:43"><name pos:start="81:34" pos:end="81:43">ACCESS_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><name pos:start="83:9" pos:end="83:10">EA</name> <operator pos:start="83:12" pos:end="83:12">=</operator> <call pos:start="83:14" pos:end="83:27"><name pos:start="83:14" pos:end="83:25">tcg_temp_new</name><argument_list pos:start="83:26" pos:end="83:27">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:42"><expr pos:start="85:9" pos:end="85:41"><call pos:start="85:9" pos:end="85:41"><name pos:start="85:9" pos:end="85:26">gen_addr_imm_index</name><argument_list pos:start="85:27" pos:end="85:41">(<argument pos:start="85:28" pos:end="85:30"><expr pos:start="85:28" pos:end="85:30"><name pos:start="85:28" pos:end="85:30">ctx</name></expr></argument>, <argument pos:start="85:33" pos:end="85:34"><expr pos:start="85:33" pos:end="85:34"><name pos:start="85:33" pos:end="85:34">EA</name></expr></argument>, <argument pos:start="85:37" pos:end="85:40"><expr pos:start="85:37" pos:end="85:40"><literal type="number" pos:start="85:37" pos:end="85:40">0x03</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="87:9" pos:end="87:44"><expr pos:start="87:9" pos:end="87:43"><call pos:start="87:9" pos:end="87:43"><name pos:start="87:9" pos:end="87:21">gen_qemu_st64</name><argument_list pos:start="87:22" pos:end="87:43">(<argument pos:start="87:23" pos:end="87:25"><expr pos:start="87:23" pos:end="87:25"><name pos:start="87:23" pos:end="87:25">ctx</name></expr></argument>, <argument pos:start="87:28" pos:end="87:38"><expr pos:start="87:28" pos:end="87:38"><name pos:start="87:28" pos:end="87:38"><name pos:start="87:28" pos:end="87:34">cpu_gpr</name><index pos:start="87:35" pos:end="87:38">[<expr pos:start="87:36" pos:end="87:37"><name pos:start="87:36" pos:end="87:37">rs</name></expr>]</index></name></expr></argument>, <argument pos:start="87:41" pos:end="87:42"><expr pos:start="87:41" pos:end="87:42"><name pos:start="87:41" pos:end="87:42">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="91:57"><if pos:start="89:9" pos:end="91:57">if <condition pos:start="89:12" pos:end="89:28">(<expr pos:start="89:13" pos:end="89:27"><call pos:start="89:13" pos:end="89:27"><name pos:start="89:13" pos:end="89:14">Rc</name><argument_list pos:start="89:15" pos:end="89:27">(<argument pos:start="89:16" pos:end="89:26"><expr pos:start="89:16" pos:end="89:26"><name pos:start="89:16" pos:end="89:26"><name pos:start="89:16" pos:end="89:18">ctx</name><operator pos:start="89:19" pos:end="89:20">-&gt;</operator><name pos:start="89:21" pos:end="89:26">opcode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="91:13" pos:end="91:57"><block_content pos:start="91:13" pos:end="91:57">

            <expr_stmt pos:start="91:13" pos:end="91:57"><expr pos:start="91:13" pos:end="91:56"><call pos:start="91:13" pos:end="91:56"><name pos:start="91:13" pos:end="91:26">tcg_gen_mov_tl</name><argument_list pos:start="91:27" pos:end="91:56">(<argument pos:start="91:28" pos:end="91:51"><expr pos:start="91:28" pos:end="91:51"><name pos:start="91:28" pos:end="91:51"><name pos:start="91:28" pos:end="91:34">cpu_gpr</name><index pos:start="91:35" pos:end="91:51">[<expr pos:start="91:36" pos:end="91:50"><call pos:start="91:36" pos:end="91:50"><name pos:start="91:36" pos:end="91:37">rA</name><argument_list pos:start="91:38" pos:end="91:50">(<argument pos:start="91:39" pos:end="91:49"><expr pos:start="91:39" pos:end="91:49"><name pos:start="91:39" pos:end="91:49"><name pos:start="91:39" pos:end="91:41">ctx</name><operator pos:start="91:42" pos:end="91:43">-&gt;</operator><name pos:start="91:44" pos:end="91:49">opcode</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument pos:start="91:54" pos:end="91:55"><expr pos:start="91:54" pos:end="91:55"><name pos:start="91:54" pos:end="91:55">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:26"><expr pos:start="93:9" pos:end="93:25"><call pos:start="93:9" pos:end="93:25"><name pos:start="93:9" pos:end="93:21">tcg_temp_free</name><argument_list pos:start="93:22" pos:end="93:25">(<argument pos:start="93:23" pos:end="93:24"><expr pos:start="93:23" pos:end="93:24"><name pos:start="93:23" pos:end="93:24">EA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
