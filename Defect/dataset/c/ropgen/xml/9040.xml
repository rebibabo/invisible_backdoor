<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9040.c" pos:tabs="8"><function pos:start="1:1" pos:end="179:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">decode_opc_special3</name><parameter_list pos:start="1:32" pos:end="1:69">(<parameter pos:start="1:33" pos:end="1:49"><decl pos:start="1:33" pos:end="1:49"><type pos:start="1:33" pos:end="1:49"><name pos:start="1:33" pos:end="1:44">CPUMIPSState</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">env</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:68"><decl pos:start="1:52" pos:end="1:68"><type pos:start="1:52" pos:end="1:68"><name pos:start="1:52" pos:end="1:63">DisasContext</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="179:1">{<block_content pos:start="5:5" pos:end="177:5">

    <decl_stmt pos:start="5:5" pos:end="5:23"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">rs</name></decl>, <decl pos:start="5:13" pos:end="5:14"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:14">rt</name></decl>, <decl pos:start="5:17" pos:end="5:18"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:17" pos:end="5:18">rd</name></decl>, <decl pos:start="5:21" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:21" pos:end="5:22">sa</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint32_t</name></type> <name pos:start="7:14" pos:end="7:16">op1</name></decl>, <decl pos:start="7:19" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:12"/><name pos:start="7:19" pos:end="7:21">op2</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:6">rs</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <operator pos:start="11:10" pos:end="11:10">(</operator><name pos:start="11:11" pos:end="11:21"><name pos:start="11:11" pos:end="11:13">ctx</name><operator pos:start="11:14" pos:end="11:15">-&gt;</operator><name pos:start="11:16" pos:end="11:21">opcode</name></name> <operator pos:start="11:23" pos:end="11:24">&gt;&gt;</operator> <literal type="number" pos:start="11:26" pos:end="11:27">21</literal><operator pos:start="11:28" pos:end="11:28">)</operator> <operator pos:start="11:30" pos:end="11:30">&amp;</operator> <literal type="number" pos:start="11:32" pos:end="11:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:36"><expr pos:start="13:5" pos:end="13:35"><name pos:start="13:5" pos:end="13:6">rt</name> <operator pos:start="13:8" pos:end="13:8">=</operator> <operator pos:start="13:10" pos:end="13:10">(</operator><name pos:start="13:11" pos:end="13:21"><name pos:start="13:11" pos:end="13:13">ctx</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:21">opcode</name></name> <operator pos:start="13:23" pos:end="13:24">&gt;&gt;</operator> <literal type="number" pos:start="13:26" pos:end="13:27">16</literal><operator pos:start="13:28" pos:end="13:28">)</operator> <operator pos:start="13:30" pos:end="13:30">&amp;</operator> <literal type="number" pos:start="13:32" pos:end="13:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:36"><expr pos:start="15:5" pos:end="15:35"><name pos:start="15:5" pos:end="15:6">rd</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <operator pos:start="15:10" pos:end="15:10">(</operator><name pos:start="15:11" pos:end="15:21"><name pos:start="15:11" pos:end="15:13">ctx</name><operator pos:start="15:14" pos:end="15:15">-&gt;</operator><name pos:start="15:16" pos:end="15:21">opcode</name></name> <operator pos:start="15:23" pos:end="15:24">&gt;&gt;</operator> <literal type="number" pos:start="15:26" pos:end="15:27">11</literal><operator pos:start="15:28" pos:end="15:28">)</operator> <operator pos:start="15:30" pos:end="15:30">&amp;</operator> <literal type="number" pos:start="15:32" pos:end="15:35">0x1f</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:35"><expr pos:start="17:5" pos:end="17:34"><name pos:start="17:5" pos:end="17:6">sa</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <operator pos:start="17:10" pos:end="17:10">(</operator><name pos:start="17:11" pos:end="17:21"><name pos:start="17:11" pos:end="17:13">ctx</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:21">opcode</name></name> <operator pos:start="17:23" pos:end="17:24">&gt;&gt;</operator> <literal type="number" pos:start="17:26" pos:end="17:26">6</literal><operator pos:start="17:27" pos:end="17:27">)</operator> <operator pos:start="17:29" pos:end="17:29">&amp;</operator> <literal type="number" pos:start="17:31" pos:end="17:34">0x1f</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:37"><expr pos:start="21:5" pos:end="21:36"><name pos:start="21:5" pos:end="21:7">op1</name> <operator pos:start="21:9" pos:end="21:9">=</operator> <call pos:start="21:11" pos:end="21:36"><name pos:start="21:11" pos:end="21:23">MASK_SPECIAL3</name><argument_list pos:start="21:24" pos:end="21:36">(<argument pos:start="21:25" pos:end="21:35"><expr pos:start="21:25" pos:end="21:35"><name pos:start="21:25" pos:end="21:35"><name pos:start="21:25" pos:end="21:27">ctx</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:35">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch pos:start="23:5" pos:end="177:5">switch <condition pos:start="23:12" pos:end="23:16">(<expr pos:start="23:13" pos:end="23:15"><name pos:start="23:13" pos:end="23:15">op1</name></expr>)</condition> <block pos:start="23:18" pos:end="177:5">{<block_content pos:start="25:5" pos:end="175:9">

    <case pos:start="25:5" pos:end="25:17">case <expr pos:start="25:10" pos:end="25:16"><name pos:start="25:10" pos:end="25:16">OPC_EXT</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:17">case <expr pos:start="27:10" pos:end="27:16"><name pos:start="27:10" pos:end="27:16">OPC_INS</name></expr>:</case>

        <expr_stmt pos:start="29:9" pos:end="29:38"><expr pos:start="29:9" pos:end="29:37"><call pos:start="29:9" pos:end="29:37"><name pos:start="29:9" pos:end="29:18">check_insn</name><argument_list pos:start="29:19" pos:end="29:37">(<argument pos:start="29:20" pos:end="29:22"><expr pos:start="29:20" pos:end="29:22"><name pos:start="29:20" pos:end="29:22">ctx</name></expr></argument>, <argument pos:start="29:25" pos:end="29:36"><expr pos:start="29:25" pos:end="29:36"><name pos:start="29:25" pos:end="29:36">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:45"><expr pos:start="31:9" pos:end="31:44"><call pos:start="31:9" pos:end="31:44"><name pos:start="31:9" pos:end="31:18">gen_bitops</name><argument_list pos:start="31:19" pos:end="31:44">(<argument pos:start="31:20" pos:end="31:22"><expr pos:start="31:20" pos:end="31:22"><name pos:start="31:20" pos:end="31:22">ctx</name></expr></argument>, <argument pos:start="31:25" pos:end="31:27"><expr pos:start="31:25" pos:end="31:27"><name pos:start="31:25" pos:end="31:27">op1</name></expr></argument>, <argument pos:start="31:30" pos:end="31:31"><expr pos:start="31:30" pos:end="31:31"><name pos:start="31:30" pos:end="31:31">rt</name></expr></argument>, <argument pos:start="31:34" pos:end="31:35"><expr pos:start="31:34" pos:end="31:35"><name pos:start="31:34" pos:end="31:35">rs</name></expr></argument>, <argument pos:start="31:38" pos:end="31:39"><expr pos:start="31:38" pos:end="31:39"><name pos:start="31:38" pos:end="31:39">sa</name></expr></argument>, <argument pos:start="31:42" pos:end="31:43"><expr pos:start="31:42" pos:end="31:43"><name pos:start="31:42" pos:end="31:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:19">case <expr pos:start="35:10" pos:end="35:18"><name pos:start="35:10" pos:end="35:18">OPC_BSHFL</name></expr>:</case>

        <expr_stmt pos:start="37:9" pos:end="37:38"><expr pos:start="37:9" pos:end="37:37"><name pos:start="37:9" pos:end="37:11">op2</name> <operator pos:start="37:13" pos:end="37:13">=</operator> <call pos:start="37:15" pos:end="37:37"><name pos:start="37:15" pos:end="37:24">MASK_BSHFL</name><argument_list pos:start="37:25" pos:end="37:37">(<argument pos:start="37:26" pos:end="37:36"><expr pos:start="37:26" pos:end="37:36"><name pos:start="37:26" pos:end="37:36"><name pos:start="37:26" pos:end="37:28">ctx</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:36">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="39:9" pos:end="59:9">switch <condition pos:start="39:16" pos:end="39:20">(<expr pos:start="39:17" pos:end="39:19"><name pos:start="39:17" pos:end="39:19">op2</name></expr>)</condition> <block pos:start="39:22" pos:end="59:9">{<block_content pos:start="41:9" pos:end="57:18">

        <case pos:start="41:9" pos:end="41:41">case <expr pos:start="41:14" pos:end="41:40"><name pos:start="41:14" pos:end="41:22">OPC_ALIGN</name> <operator pos:start="41:24" pos:end="41:26">...</operator> <name pos:start="41:28" pos:end="41:40">OPC_ALIGN_END</name></expr>:</case>

        <case pos:start="43:9" pos:end="43:25">case <expr pos:start="43:14" pos:end="43:24"><name pos:start="43:14" pos:end="43:24">OPC_BITSWAP</name></expr>:</case>

            <expr_stmt pos:start="45:13" pos:end="45:42"><expr pos:start="45:13" pos:end="45:41"><call pos:start="45:13" pos:end="45:41"><name pos:start="45:13" pos:end="45:22">check_insn</name><argument_list pos:start="45:23" pos:end="45:41">(<argument pos:start="45:24" pos:end="45:26"><expr pos:start="45:24" pos:end="45:26"><name pos:start="45:24" pos:end="45:26">ctx</name></expr></argument>, <argument pos:start="45:29" pos:end="45:40"><expr pos:start="45:29" pos:end="45:40"><name pos:start="45:29" pos:end="45:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="47:13" pos:end="47:45"><expr pos:start="47:13" pos:end="47:44"><call pos:start="47:13" pos:end="47:44"><name pos:start="47:13" pos:end="47:34">decode_opc_special3_r6</name><argument_list pos:start="47:35" pos:end="47:44">(<argument pos:start="47:36" pos:end="47:38"><expr pos:start="47:36" pos:end="47:38"><name pos:start="47:36" pos:end="47:38">env</name></expr></argument>, <argument pos:start="47:41" pos:end="47:43"><expr pos:start="47:41" pos:end="47:43"><name pos:start="47:41" pos:end="47:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="49:13" pos:end="49:18">break;</break>

        <default pos:start="51:9" pos:end="51:16">default:</default>

            <expr_stmt pos:start="53:13" pos:end="53:42"><expr pos:start="53:13" pos:end="53:41"><call pos:start="53:13" pos:end="53:41"><name pos:start="53:13" pos:end="53:22">check_insn</name><argument_list pos:start="53:23" pos:end="53:41">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><name pos:start="53:24" pos:end="53:26">ctx</name></expr></argument>, <argument pos:start="53:29" pos:end="53:40"><expr pos:start="53:29" pos:end="53:40"><name pos:start="53:29" pos:end="53:40">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:40"><expr pos:start="55:13" pos:end="55:39"><call pos:start="55:13" pos:end="55:39"><name pos:start="55:13" pos:end="55:21">gen_bshfl</name><argument_list pos:start="55:22" pos:end="55:39">(<argument pos:start="55:23" pos:end="55:25"><expr pos:start="55:23" pos:end="55:25"><name pos:start="55:23" pos:end="55:25">ctx</name></expr></argument>, <argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">op2</name></expr></argument>, <argument pos:start="55:33" pos:end="55:34"><expr pos:start="55:33" pos:end="55:34"><name pos:start="55:33" pos:end="55:34">rt</name></expr></argument>, <argument pos:start="55:37" pos:end="55:38"><expr pos:start="55:37" pos:end="55:38"><name pos:start="55:37" pos:end="55:38">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="61:9" pos:end="64:0">break;</break>

<cpp:if pos:start="63:1" pos:end="63:26">#<cpp:directive pos:start="63:2" pos:end="63:3">if</cpp:directive> <expr pos:start="63:5" pos:end="63:26"><call pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:11">defined</name><argument_list pos:start="63:12" pos:end="63:26">(<argument pos:start="63:13" pos:end="63:25"><expr pos:start="63:13" pos:end="63:25"><name pos:start="63:13" pos:end="63:25">TARGET_MIPS64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <case pos:start="65:5" pos:end="65:32">case <expr pos:start="65:10" pos:end="65:31"><name pos:start="65:10" pos:end="65:18">OPC_DEXTM</name> <operator pos:start="65:20" pos:end="65:22">...</operator> <name pos:start="65:24" pos:end="65:31">OPC_DEXT</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:32">case <expr pos:start="67:10" pos:end="67:31"><name pos:start="67:10" pos:end="67:18">OPC_DINSM</name> <operator pos:start="67:20" pos:end="67:22">...</operator> <name pos:start="67:24" pos:end="67:31">OPC_DINS</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:38"><expr pos:start="69:9" pos:end="69:37"><call pos:start="69:9" pos:end="69:37"><name pos:start="69:9" pos:end="69:18">check_insn</name><argument_list pos:start="69:19" pos:end="69:37">(<argument pos:start="69:20" pos:end="69:22"><expr pos:start="69:20" pos:end="69:22"><name pos:start="69:20" pos:end="69:22">ctx</name></expr></argument>, <argument pos:start="69:25" pos:end="69:36"><expr pos:start="69:25" pos:end="69:36"><name pos:start="69:25" pos:end="69:36">ISA_MIPS64R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:27"><expr pos:start="71:9" pos:end="71:26"><call pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:21">check_mips_64</name><argument_list pos:start="71:22" pos:end="71:26">(<argument pos:start="71:23" pos:end="71:25"><expr pos:start="71:23" pos:end="71:25"><name pos:start="71:23" pos:end="71:25">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:45"><expr pos:start="73:9" pos:end="73:44"><call pos:start="73:9" pos:end="73:44"><name pos:start="73:9" pos:end="73:18">gen_bitops</name><argument_list pos:start="73:19" pos:end="73:44">(<argument pos:start="73:20" pos:end="73:22"><expr pos:start="73:20" pos:end="73:22"><name pos:start="73:20" pos:end="73:22">ctx</name></expr></argument>, <argument pos:start="73:25" pos:end="73:27"><expr pos:start="73:25" pos:end="73:27"><name pos:start="73:25" pos:end="73:27">op1</name></expr></argument>, <argument pos:start="73:30" pos:end="73:31"><expr pos:start="73:30" pos:end="73:31"><name pos:start="73:30" pos:end="73:31">rt</name></expr></argument>, <argument pos:start="73:34" pos:end="73:35"><expr pos:start="73:34" pos:end="73:35"><name pos:start="73:34" pos:end="73:35">rs</name></expr></argument>, <argument pos:start="73:38" pos:end="73:39"><expr pos:start="73:38" pos:end="73:39"><name pos:start="73:38" pos:end="73:39">sa</name></expr></argument>, <argument pos:start="73:42" pos:end="73:43"><expr pos:start="73:42" pos:end="73:43"><name pos:start="73:42" pos:end="73:43">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="75:9" pos:end="75:14">break;</break>

    <case pos:start="77:5" pos:end="77:20">case <expr pos:start="77:10" pos:end="77:19"><name pos:start="77:10" pos:end="77:19">OPC_DBSHFL</name></expr>:</case>

        <expr_stmt pos:start="79:9" pos:end="79:39"><expr pos:start="79:9" pos:end="79:38"><name pos:start="79:9" pos:end="79:11">op2</name> <operator pos:start="79:13" pos:end="79:13">=</operator> <call pos:start="79:15" pos:end="79:38"><name pos:start="79:15" pos:end="79:25">MASK_DBSHFL</name><argument_list pos:start="79:26" pos:end="79:38">(<argument pos:start="79:27" pos:end="79:37"><expr pos:start="79:27" pos:end="79:37"><name pos:start="79:27" pos:end="79:37"><name pos:start="79:27" pos:end="79:29">ctx</name><operator pos:start="79:30" pos:end="79:31">-&gt;</operator><name pos:start="79:32" pos:end="79:37">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="81:9" pos:end="105:9">switch <condition pos:start="81:16" pos:end="81:20">(<expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">op2</name></expr>)</condition> <block pos:start="81:22" pos:end="105:9">{<block_content pos:start="83:9" pos:end="103:18">

        <case pos:start="83:9" pos:end="83:43">case <expr pos:start="83:14" pos:end="83:42"><name pos:start="83:14" pos:end="83:23">OPC_DALIGN</name> <operator pos:start="83:25" pos:end="83:27">...</operator> <name pos:start="83:29" pos:end="83:42">OPC_DALIGN_END</name></expr>:</case>

        <case pos:start="85:9" pos:end="85:26">case <expr pos:start="85:14" pos:end="85:25"><name pos:start="85:14" pos:end="85:25">OPC_DBITSWAP</name></expr>:</case>

            <expr_stmt pos:start="87:13" pos:end="87:42"><expr pos:start="87:13" pos:end="87:41"><call pos:start="87:13" pos:end="87:41"><name pos:start="87:13" pos:end="87:22">check_insn</name><argument_list pos:start="87:23" pos:end="87:41">(<argument pos:start="87:24" pos:end="87:26"><expr pos:start="87:24" pos:end="87:26"><name pos:start="87:24" pos:end="87:26">ctx</name></expr></argument>, <argument pos:start="87:29" pos:end="87:40"><expr pos:start="87:29" pos:end="87:40"><name pos:start="87:29" pos:end="87:40">ISA_MIPS32R6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:45"><expr pos:start="89:13" pos:end="89:44"><call pos:start="89:13" pos:end="89:44"><name pos:start="89:13" pos:end="89:34">decode_opc_special3_r6</name><argument_list pos:start="89:35" pos:end="89:44">(<argument pos:start="89:36" pos:end="89:38"><expr pos:start="89:36" pos:end="89:38"><name pos:start="89:36" pos:end="89:38">env</name></expr></argument>, <argument pos:start="89:41" pos:end="89:43"><expr pos:start="89:41" pos:end="89:43"><name pos:start="89:41" pos:end="89:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        <default pos:start="93:9" pos:end="93:16">default:</default>

            <expr_stmt pos:start="95:13" pos:end="95:42"><expr pos:start="95:13" pos:end="95:41"><call pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:22">check_insn</name><argument_list pos:start="95:23" pos:end="95:41">(<argument pos:start="95:24" pos:end="95:26"><expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">ctx</name></expr></argument>, <argument pos:start="95:29" pos:end="95:40"><expr pos:start="95:29" pos:end="95:40"><name pos:start="95:29" pos:end="95:40">ISA_MIPS64R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="97:13" pos:end="97:31"><expr pos:start="97:13" pos:end="97:30"><call pos:start="97:13" pos:end="97:30"><name pos:start="97:13" pos:end="97:25">check_mips_64</name><argument_list pos:start="97:26" pos:end="97:30">(<argument pos:start="97:27" pos:end="97:29"><expr pos:start="97:27" pos:end="97:29"><name pos:start="97:27" pos:end="97:29">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="99:13" pos:end="99:43"><expr pos:start="99:13" pos:end="99:42"><name pos:start="99:13" pos:end="99:15">op2</name> <operator pos:start="99:17" pos:end="99:17">=</operator> <call pos:start="99:19" pos:end="99:42"><name pos:start="99:19" pos:end="99:29">MASK_DBSHFL</name><argument_list pos:start="99:30" pos:end="99:42">(<argument pos:start="99:31" pos:end="99:41"><expr pos:start="99:31" pos:end="99:41"><name pos:start="99:31" pos:end="99:41"><name pos:start="99:31" pos:end="99:33">ctx</name><operator pos:start="99:34" pos:end="99:35">-&gt;</operator><name pos:start="99:36" pos:end="99:41">opcode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="101:13" pos:end="101:40"><expr pos:start="101:13" pos:end="101:39"><call pos:start="101:13" pos:end="101:39"><name pos:start="101:13" pos:end="101:21">gen_bshfl</name><argument_list pos:start="101:22" pos:end="101:39">(<argument pos:start="101:23" pos:end="101:25"><expr pos:start="101:23" pos:end="101:25"><name pos:start="101:23" pos:end="101:25">ctx</name></expr></argument>, <argument pos:start="101:28" pos:end="101:30"><expr pos:start="101:28" pos:end="101:30"><name pos:start="101:28" pos:end="101:30">op2</name></expr></argument>, <argument pos:start="101:33" pos:end="101:34"><expr pos:start="101:33" pos:end="101:34"><name pos:start="101:33" pos:end="101:34">rt</name></expr></argument>, <argument pos:start="101:37" pos:end="101:38"><expr pos:start="101:37" pos:end="101:38"><name pos:start="101:37" pos:end="101:38">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="103:13" pos:end="103:18">break;</break>

        </block_content>}</block></switch>

        <break pos:start="107:9" pos:end="110:0">break;</break>

<cpp:endif pos:start="109:1" pos:end="109:6">#<cpp:directive pos:start="109:2" pos:end="109:6">endif</cpp:directive></cpp:endif>

    <case pos:start="111:5" pos:end="111:19">case <expr pos:start="111:10" pos:end="111:18"><name pos:start="111:10" pos:end="111:18">OPC_RDHWR</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:31"><expr pos:start="113:9" pos:end="113:30"><call pos:start="113:9" pos:end="113:30"><name pos:start="113:9" pos:end="113:17">gen_rdhwr</name><argument_list pos:start="113:18" pos:end="113:30">(<argument pos:start="113:19" pos:end="113:21"><expr pos:start="113:19" pos:end="113:21"><name pos:start="113:19" pos:end="113:21">ctx</name></expr></argument>, <argument pos:start="113:24" pos:end="113:25"><expr pos:start="113:24" pos:end="113:25"><name pos:start="113:24" pos:end="113:25">rt</name></expr></argument>, <argument pos:start="113:28" pos:end="113:29"><expr pos:start="113:28" pos:end="113:29"><name pos:start="113:28" pos:end="113:29">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="115:9" pos:end="115:14">break;</break>

    <case pos:start="117:5" pos:end="117:18">case <expr pos:start="117:10" pos:end="117:17"><name pos:start="117:10" pos:end="117:17">OPC_FORK</name></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:32"><expr pos:start="119:9" pos:end="119:31"><call pos:start="119:9" pos:end="119:31"><name pos:start="119:9" pos:end="119:18">check_insn</name><argument_list pos:start="119:19" pos:end="119:31">(<argument pos:start="119:20" pos:end="119:22"><expr pos:start="119:20" pos:end="119:22"><name pos:start="119:20" pos:end="119:22">ctx</name></expr></argument>, <argument pos:start="119:25" pos:end="119:30"><expr pos:start="119:25" pos:end="119:30"><name pos:start="119:25" pos:end="119:30">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="121:9" pos:end="139:9">{<block_content pos:start="123:13" pos:end="137:30">

            <decl_stmt pos:start="123:13" pos:end="123:37"><decl pos:start="123:13" pos:end="123:36"><type pos:start="123:13" pos:end="123:16"><name pos:start="123:13" pos:end="123:16">TCGv</name></type> <name pos:start="123:18" pos:end="123:19">t0</name> <init pos:start="123:21" pos:end="123:36">= <expr pos:start="123:23" pos:end="123:36"><call pos:start="123:23" pos:end="123:36"><name pos:start="123:23" pos:end="123:34">tcg_temp_new</name><argument_list pos:start="123:35" pos:end="123:36">()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="125:13" pos:end="125:37"><decl pos:start="125:13" pos:end="125:36"><type pos:start="125:13" pos:end="125:16"><name pos:start="125:13" pos:end="125:16">TCGv</name></type> <name pos:start="125:18" pos:end="125:19">t1</name> <init pos:start="125:21" pos:end="125:36">= <expr pos:start="125:23" pos:end="125:36"><call pos:start="125:23" pos:end="125:36"><name pos:start="125:23" pos:end="125:34">tcg_temp_new</name><argument_list pos:start="125:35" pos:end="125:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="129:13" pos:end="129:33"><expr pos:start="129:13" pos:end="129:32"><call pos:start="129:13" pos:end="129:32"><name pos:start="129:13" pos:end="129:24">gen_load_gpr</name><argument_list pos:start="129:25" pos:end="129:32">(<argument pos:start="129:26" pos:end="129:27"><expr pos:start="129:26" pos:end="129:27"><name pos:start="129:26" pos:end="129:27">t0</name></expr></argument>, <argument pos:start="129:30" pos:end="129:31"><expr pos:start="129:30" pos:end="129:31"><name pos:start="129:30" pos:end="129:31">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="131:13" pos:end="131:33"><expr pos:start="131:13" pos:end="131:32"><call pos:start="131:13" pos:end="131:32"><name pos:start="131:13" pos:end="131:24">gen_load_gpr</name><argument_list pos:start="131:25" pos:end="131:32">(<argument pos:start="131:26" pos:end="131:27"><expr pos:start="131:26" pos:end="131:27"><name pos:start="131:26" pos:end="131:27">t1</name></expr></argument>, <argument pos:start="131:30" pos:end="131:31"><expr pos:start="131:30" pos:end="131:31"><name pos:start="131:30" pos:end="131:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="133:13" pos:end="133:36"><expr pos:start="133:13" pos:end="133:35"><call pos:start="133:13" pos:end="133:35"><name pos:start="133:13" pos:end="133:27">gen_helper_fork</name><argument_list pos:start="133:28" pos:end="133:35">(<argument pos:start="133:29" pos:end="133:30"><expr pos:start="133:29" pos:end="133:30"><name pos:start="133:29" pos:end="133:30">t0</name></expr></argument>, <argument pos:start="133:33" pos:end="133:34"><expr pos:start="133:33" pos:end="133:34"><name pos:start="133:33" pos:end="133:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:30"><expr pos:start="135:13" pos:end="135:29"><call pos:start="135:13" pos:end="135:29"><name pos:start="135:13" pos:end="135:25">tcg_temp_free</name><argument_list pos:start="135:26" pos:end="135:29">(<argument pos:start="135:27" pos:end="135:28"><expr pos:start="135:27" pos:end="135:28"><name pos:start="135:27" pos:end="135:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:30"><expr pos:start="137:13" pos:end="137:29"><call pos:start="137:13" pos:end="137:29"><name pos:start="137:13" pos:end="137:25">tcg_temp_free</name><argument_list pos:start="137:26" pos:end="137:29">(<argument pos:start="137:27" pos:end="137:28"><expr pos:start="137:27" pos:end="137:28"><name pos:start="137:27" pos:end="137:28">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="141:9" pos:end="141:14">break;</break>

    <case pos:start="143:5" pos:end="143:19">case <expr pos:start="143:10" pos:end="143:18"><name pos:start="143:10" pos:end="143:18">OPC_YIELD</name></expr>:</case>

        <expr_stmt pos:start="145:9" pos:end="145:32"><expr pos:start="145:9" pos:end="145:31"><call pos:start="145:9" pos:end="145:31"><name pos:start="145:9" pos:end="145:18">check_insn</name><argument_list pos:start="145:19" pos:end="145:31">(<argument pos:start="145:20" pos:end="145:22"><expr pos:start="145:20" pos:end="145:22"><name pos:start="145:20" pos:end="145:22">ctx</name></expr></argument>, <argument pos:start="145:25" pos:end="145:30"><expr pos:start="145:25" pos:end="145:30"><name pos:start="145:25" pos:end="145:30">ASE_MT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <block pos:start="147:9" pos:end="161:9">{<block_content pos:start="149:13" pos:end="159:30">

            <decl_stmt pos:start="149:13" pos:end="149:37"><decl pos:start="149:13" pos:end="149:36"><type pos:start="149:13" pos:end="149:16"><name pos:start="149:13" pos:end="149:16">TCGv</name></type> <name pos:start="149:18" pos:end="149:19">t0</name> <init pos:start="149:21" pos:end="149:36">= <expr pos:start="149:23" pos:end="149:36"><call pos:start="149:23" pos:end="149:36"><name pos:start="149:23" pos:end="149:34">tcg_temp_new</name><argument_list pos:start="149:35" pos:end="149:36">()</argument_list></call></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="153:13" pos:end="153:33"><expr pos:start="153:13" pos:end="153:32"><call pos:start="153:13" pos:end="153:32"><name pos:start="153:13" pos:end="153:24">gen_load_gpr</name><argument_list pos:start="153:25" pos:end="153:32">(<argument pos:start="153:26" pos:end="153:27"><expr pos:start="153:26" pos:end="153:27"><name pos:start="153:26" pos:end="153:27">t0</name></expr></argument>, <argument pos:start="153:30" pos:end="153:31"><expr pos:start="153:30" pos:end="153:31"><name pos:start="153:30" pos:end="153:31">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="155:13" pos:end="155:46"><expr pos:start="155:13" pos:end="155:45"><call pos:start="155:13" pos:end="155:45"><name pos:start="155:13" pos:end="155:28">gen_helper_yield</name><argument_list pos:start="155:29" pos:end="155:45">(<argument pos:start="155:30" pos:end="155:31"><expr pos:start="155:30" pos:end="155:31"><name pos:start="155:30" pos:end="155:31">t0</name></expr></argument>, <argument pos:start="155:34" pos:end="155:40"><expr pos:start="155:34" pos:end="155:40"><name pos:start="155:34" pos:end="155:40">cpu_env</name></expr></argument>, <argument pos:start="155:43" pos:end="155:44"><expr pos:start="155:43" pos:end="155:44"><name pos:start="155:43" pos:end="155:44">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:34"><expr pos:start="157:13" pos:end="157:33"><call pos:start="157:13" pos:end="157:33"><name pos:start="157:13" pos:end="157:25">gen_store_gpr</name><argument_list pos:start="157:26" pos:end="157:33">(<argument pos:start="157:27" pos:end="157:28"><expr pos:start="157:27" pos:end="157:28"><name pos:start="157:27" pos:end="157:28">t0</name></expr></argument>, <argument pos:start="157:31" pos:end="157:32"><expr pos:start="157:31" pos:end="157:32"><name pos:start="157:31" pos:end="157:32">rd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:30"><expr pos:start="159:13" pos:end="159:29"><call pos:start="159:13" pos:end="159:29"><name pos:start="159:13" pos:end="159:25">tcg_temp_free</name><argument_list pos:start="159:26" pos:end="159:29">(<argument pos:start="159:27" pos:end="159:28"><expr pos:start="159:27" pos:end="159:28"><name pos:start="159:27" pos:end="159:28">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block>

        <break pos:start="163:9" pos:end="163:14">break;</break>

    <default pos:start="165:5" pos:end="165:12">default:</default>

        <if_stmt pos:start="167:9" pos:end="175:9"><if pos:start="167:9" pos:end="171:9">if <condition pos:start="167:12" pos:end="167:43">(<expr pos:start="167:13" pos:end="167:42"><name pos:start="167:13" pos:end="167:27"><name pos:start="167:13" pos:end="167:15">ctx</name><operator pos:start="167:16" pos:end="167:17">-&gt;</operator><name pos:start="167:18" pos:end="167:27">insn_flags</name></name> <operator pos:start="167:29" pos:end="167:29">&amp;</operator> <name pos:start="167:31" pos:end="167:42">ISA_MIPS32R6</name></expr>)</condition> <block pos:start="167:45" pos:end="171:9">{<block_content pos:start="169:13" pos:end="169:45">

            <expr_stmt pos:start="169:13" pos:end="169:45"><expr pos:start="169:13" pos:end="169:44"><call pos:start="169:13" pos:end="169:44"><name pos:start="169:13" pos:end="169:34">decode_opc_special3_r6</name><argument_list pos:start="169:35" pos:end="169:44">(<argument pos:start="169:36" pos:end="169:38"><expr pos:start="169:36" pos:end="169:38"><name pos:start="169:36" pos:end="169:38">env</name></expr></argument>, <argument pos:start="169:41" pos:end="169:43"><expr pos:start="169:41" pos:end="169:43"><name pos:start="169:41" pos:end="169:43">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="171:11" pos:end="175:9">else <block pos:start="171:16" pos:end="175:9">{<block_content pos:start="173:13" pos:end="173:49">

            <expr_stmt pos:start="173:13" pos:end="173:49"><expr pos:start="173:13" pos:end="173:48"><call pos:start="173:13" pos:end="173:48"><name pos:start="173:13" pos:end="173:38">decode_opc_special3_legacy</name><argument_list pos:start="173:39" pos:end="173:48">(<argument pos:start="173:40" pos:end="173:42"><expr pos:start="173:40" pos:end="173:42"><name pos:start="173:40" pos:end="173:42">env</name></expr></argument>, <argument pos:start="173:45" pos:end="173:47"><expr pos:start="173:45" pos:end="173:47"><name pos:start="173:45" pos:end="173:47">ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
