<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15685.c" pos:tabs="8"><function pos:start="1:1" pos:end="1601:1"><type pos:start="1:1" pos:end="1:9"><name pos:start="1:1" pos:end="1:9">uintptr_t</name></type> <name pos:start="1:11" pos:end="1:26">tcg_qemu_tb_exec</name><parameter_list pos:start="1:27" pos:end="1:62">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:39">CPUArchState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">env</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:61"><decl pos:start="1:47" pos:end="1:61"><type pos:start="1:47" pos:end="1:61"><name pos:start="1:47" pos:end="1:53">uint8_t</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:61">tb_ptr</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1601:1">{<block_content pos:start="5:5" pos:end="1599:19">

    <decl_stmt pos:start="5:5" pos:end="5:40"><decl pos:start="5:5" pos:end="5:39"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">long</name></type> <name pos:start="5:10" pos:end="5:39"><name pos:start="5:10" pos:end="5:18">tcg_temps</name><index pos:start="5:19" pos:end="5:39">[<expr pos:start="5:20" pos:end="5:38"><name pos:start="5:20" pos:end="5:38">CPU_TEMP_BUF_NLONGS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:70"><decl pos:start="7:5" pos:end="7:69"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:13">uintptr_t</name></type> <name pos:start="7:15" pos:end="7:22">sp_value</name> <init pos:start="7:24" pos:end="7:69">= <expr pos:start="7:26" pos:end="7:69"><operator pos:start="7:26" pos:end="7:26">(</operator><name pos:start="7:27" pos:end="7:35">uintptr_t</name><operator pos:start="7:36" pos:end="7:36">)</operator><operator pos:start="7:37" pos:end="7:37">(</operator><name pos:start="7:38" pos:end="7:46">tcg_temps</name> <operator pos:start="7:48" pos:end="7:48">+</operator> <name pos:start="7:50" pos:end="7:68">CPU_TEMP_BUF_NLONGS</name><operator pos:start="7:69" pos:end="7:69">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">uintptr_t</name></type> <name pos:start="9:15" pos:end="9:21">next_tb</name> <init pos:start="9:23" pos:end="9:25">= <expr pos:start="9:25" pos:end="9:25"><literal type="number" pos:start="9:25" pos:end="9:25">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:47"><expr pos:start="13:5" pos:end="13:46"><name pos:start="13:5" pos:end="13:22"><name pos:start="13:5" pos:end="13:11">tci_reg</name><index pos:start="13:12" pos:end="13:22">[<expr pos:start="13:13" pos:end="13:21"><name pos:start="13:13" pos:end="13:21">TCG_AREG0</name></expr>]</index></name> <operator pos:start="13:24" pos:end="13:24">=</operator> <operator pos:start="13:26" pos:end="13:26">(</operator><name pos:start="13:27" pos:end="13:42">tcg_target_ulong</name><operator pos:start="13:43" pos:end="13:43">)</operator><name pos:start="13:44" pos:end="13:46">env</name></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:31"><name pos:start="15:5" pos:end="15:11">tci_reg</name><index pos:start="15:12" pos:end="15:31">[<expr pos:start="15:13" pos:end="15:30"><name pos:start="15:13" pos:end="15:30">TCG_REG_CALL_STACK</name></expr>]</index></name> <operator pos:start="15:33" pos:end="15:33">=</operator> <name pos:start="15:35" pos:end="15:42">sp_value</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:19"><expr pos:start="17:5" pos:end="17:18"><call pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:10">assert</name><argument_list pos:start="17:11" pos:end="17:18">(<argument pos:start="17:12" pos:end="17:17"><expr pos:start="17:12" pos:end="17:17"><name pos:start="17:12" pos:end="17:17">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="21:5" pos:end="1595:5">for <control pos:start="21:9" pos:end="21:12">(<init pos:start="21:10" pos:end="21:10">;</init><condition pos:start="21:11" pos:end="21:11">;</condition><incr/>)</control> <block pos:start="21:14" pos:end="1595:5">{<block_content pos:start="23:9" pos:end="1593:49">

        <decl_stmt pos:start="23:9" pos:end="26:0"><decl pos:start="23:9" pos:end="23:33"><type pos:start="23:9" pos:end="23:17"><name pos:start="23:9" pos:end="23:17">TCGOpcode</name></type> <name pos:start="23:19" pos:end="23:21">opc</name> <init pos:start="23:23" pos:end="23:33">= <expr pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:33"><name pos:start="23:25" pos:end="23:30">tb_ptr</name><index pos:start="23:31" pos:end="23:33">[<expr pos:start="23:32" pos:end="23:32"><literal type="number" pos:start="23:32" pos:end="23:32">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="25:1" pos:end="25:20">#<cpp:directive pos:start="25:2" pos:end="25:3">if</cpp:directive> <expr pos:start="25:5" pos:end="25:20"><operator pos:start="25:5" pos:end="25:5">!</operator><call pos:start="25:6" pos:end="25:20"><name pos:start="25:6" pos:end="25:12">defined</name><argument_list pos:start="25:13" pos:end="25:20">(<argument pos:start="25:14" pos:end="25:19"><expr pos:start="25:14" pos:end="25:19"><name pos:start="25:14" pos:end="25:19">NDEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <decl_stmt pos:start="27:9" pos:end="27:36"><decl pos:start="27:9" pos:end="27:35"><type pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:15">uint8_t</name></type> <name pos:start="27:17" pos:end="27:23">op_size</name> <init pos:start="27:25" pos:end="27:35">= <expr pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:35"><name pos:start="27:27" pos:end="27:32">tb_ptr</name><index pos:start="27:33" pos:end="27:35">[<expr pos:start="27:34" pos:end="27:34"><literal type="number" pos:start="27:34" pos:end="27:34">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="29:9" pos:end="32:0"><decl pos:start="29:9" pos:end="29:38"><type pos:start="29:9" pos:end="29:17"><name pos:start="29:9" pos:end="29:15">uint8_t</name> <modifier pos:start="29:17" pos:end="29:17">*</modifier></type><name pos:start="29:18" pos:end="29:29">old_code_ptr</name> <init pos:start="29:31" pos:end="29:38">= <expr pos:start="29:33" pos:end="29:38"><name pos:start="29:33" pos:end="29:38">tb_ptr</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="33:9" pos:end="33:28"><decl pos:start="33:9" pos:end="33:27"><type pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:24">tcg_target_ulong</name></type> <name pos:start="33:26" pos:end="33:27">t0</name></decl>;</decl_stmt>

        <decl_stmt pos:start="35:9" pos:end="35:28"><decl pos:start="35:9" pos:end="35:27"><type pos:start="35:9" pos:end="35:24"><name pos:start="35:9" pos:end="35:24">tcg_target_ulong</name></type> <name pos:start="35:26" pos:end="35:27">t1</name></decl>;</decl_stmt>

        <decl_stmt pos:start="37:9" pos:end="37:28"><decl pos:start="37:9" pos:end="37:27"><type pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:24">tcg_target_ulong</name></type> <name pos:start="37:26" pos:end="37:27">t2</name></decl>;</decl_stmt>

        <decl_stmt pos:start="39:9" pos:end="39:31"><decl pos:start="39:9" pos:end="39:30"><type pos:start="39:9" pos:end="39:24"><name pos:start="39:9" pos:end="39:24">tcg_target_ulong</name></type> <name pos:start="39:26" pos:end="39:30">label</name></decl>;</decl_stmt>

        <decl_stmt pos:start="41:9" pos:end="41:26"><decl pos:start="41:9" pos:end="41:25"><type pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:15">TCGCond</name></type> <name pos:start="41:17" pos:end="41:25">condition</name></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="46:0"><decl pos:start="43:9" pos:end="43:26"><type pos:start="43:9" pos:end="43:20"><name pos:start="43:9" pos:end="43:20">target_ulong</name></type> <name pos:start="43:22" pos:end="43:26">taddr</name></decl>;</decl_stmt>

<cpp:ifndef pos:start="45:1" pos:end="45:22">#<cpp:directive pos:start="45:2" pos:end="45:7">ifndef</cpp:directive> <name pos:start="45:9" pos:end="45:22">CONFIG_SOFTMMU</name></cpp:ifndef>

        <decl_stmt pos:start="47:9" pos:end="50:0"><decl pos:start="47:9" pos:end="47:34"><type pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:24">tcg_target_ulong</name></type> <name pos:start="47:26" pos:end="47:34">host_addr</name></decl>;</decl_stmt>

<cpp:endif pos:start="49:1" pos:end="49:6">#<cpp:directive pos:start="49:2" pos:end="49:6">endif</cpp:directive></cpp:endif>

        <decl_stmt pos:start="51:9" pos:end="51:21"><decl pos:start="51:9" pos:end="51:20"><type pos:start="51:9" pos:end="51:15"><name pos:start="51:9" pos:end="51:15">uint8_t</name></type> <name pos:start="51:17" pos:end="51:20">tmp8</name></decl>;</decl_stmt>

        <decl_stmt pos:start="53:9" pos:end="53:23"><decl pos:start="53:9" pos:end="53:22"><type pos:start="53:9" pos:end="53:16"><name pos:start="53:9" pos:end="53:16">uint16_t</name></type> <name pos:start="53:18" pos:end="53:22">tmp16</name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:23"><decl pos:start="55:9" pos:end="55:22"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint32_t</name></type> <name pos:start="55:18" pos:end="55:22">tmp32</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="60:0"><decl pos:start="57:9" pos:end="57:22"><type pos:start="57:9" pos:end="57:16"><name pos:start="57:9" pos:end="57:16">uint64_t</name></type> <name pos:start="57:18" pos:end="57:22">tmp64</name></decl>;</decl_stmt>

<cpp:if pos:start="59:1" pos:end="59:29">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:23">TCG_TARGET_REG_BITS</name> <operator pos:start="59:25" pos:end="59:26">==</operator> <literal type="number" pos:start="59:28" pos:end="59:29">32</literal></expr></cpp:if>

        <decl_stmt pos:start="61:9" pos:end="68:0"><decl pos:start="61:9" pos:end="61:20"><type pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:16">uint64_t</name></type> <name pos:start="61:18" pos:end="61:20">v64</name></decl>;</decl_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>



<cpp:if pos:start="67:1" pos:end="67:18">#<cpp:directive pos:start="67:2" pos:end="67:3">if</cpp:directive> <expr pos:start="67:5" pos:end="67:18"><call pos:start="67:5" pos:end="67:18"><name pos:start="67:5" pos:end="67:11">defined</name><argument_list pos:start="67:12" pos:end="67:18">(<argument pos:start="67:13" pos:end="67:17"><expr pos:start="67:13" pos:end="67:17"><name pos:start="67:13" pos:end="67:17">GETPC</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="69:9" pos:end="72:0"><expr pos:start="69:9" pos:end="69:38"><name pos:start="69:9" pos:end="69:18">tci_tb_ptr</name> <operator pos:start="69:20" pos:end="69:20">=</operator> <operator pos:start="69:22" pos:end="69:22">(</operator><name pos:start="69:23" pos:end="69:31">uintptr_t</name><operator pos:start="69:32" pos:end="69:32">)</operator><name pos:start="69:33" pos:end="69:38">tb_ptr</name></expr>;</expr_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>



        <comment type="block" pos:start="75:9" pos:end="75:41">/* Skip opcode and size entry. */</comment>

        <expr_stmt pos:start="77:9" pos:end="77:20"><expr pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:14">tb_ptr</name> <operator pos:start="77:16" pos:end="77:17">+=</operator> <literal type="number" pos:start="77:19" pos:end="77:19">2</literal></expr>;</expr_stmt>



        <switch pos:start="81:9" pos:end="1591:9">switch <condition pos:start="81:16" pos:end="81:20">(<expr pos:start="81:17" pos:end="81:19"><name pos:start="81:17" pos:end="81:19">opc</name></expr>)</condition> <block pos:start="81:22" pos:end="1591:9">{<block_content pos:start="83:9" pos:end="1589:18">

        <case pos:start="83:9" pos:end="83:26">case <expr pos:start="83:14" pos:end="83:25"><name pos:start="83:14" pos:end="83:25">INDEX_op_end</name></expr>:</case>

        <case pos:start="85:9" pos:end="85:26">case <expr pos:start="85:14" pos:end="85:25"><name pos:start="85:14" pos:end="85:25">INDEX_op_nop</name></expr>:</case>

            <break pos:start="87:13" pos:end="87:18">break;</break>

        <case pos:start="89:9" pos:end="89:27">case <expr pos:start="89:14" pos:end="89:26"><name pos:start="89:14" pos:end="89:26">INDEX_op_nop1</name></expr>:</case>

        <case pos:start="91:9" pos:end="91:27">case <expr pos:start="91:14" pos:end="91:26"><name pos:start="91:14" pos:end="91:26">INDEX_op_nop2</name></expr>:</case>

        <case pos:start="93:9" pos:end="93:27">case <expr pos:start="93:14" pos:end="93:26"><name pos:start="93:14" pos:end="93:26">INDEX_op_nop3</name></expr>:</case>

        <case pos:start="95:9" pos:end="95:27">case <expr pos:start="95:14" pos:end="95:26"><name pos:start="95:14" pos:end="95:26">INDEX_op_nopn</name></expr>:</case>

        <case pos:start="97:9" pos:end="97:30">case <expr pos:start="97:14" pos:end="97:29"><name pos:start="97:14" pos:end="97:29">INDEX_op_discard</name></expr>:</case>

            <expr_stmt pos:start="99:13" pos:end="99:19"><expr pos:start="99:13" pos:end="99:18"><call pos:start="99:13" pos:end="99:18"><name pos:start="99:13" pos:end="99:16">TODO</name><argument_list pos:start="99:17" pos:end="99:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="101:13" pos:end="101:18">break;</break>

        <case pos:start="103:9" pos:end="103:32">case <expr pos:start="103:14" pos:end="103:31"><name pos:start="103:14" pos:end="103:31">INDEX_op_set_label</name></expr>:</case>

            <expr_stmt pos:start="105:13" pos:end="105:19"><expr pos:start="105:13" pos:end="105:18"><call pos:start="105:13" pos:end="105:18"><name pos:start="105:13" pos:end="105:16">TODO</name><argument_list pos:start="105:17" pos:end="105:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="107:13" pos:end="107:18">break;</break>

        <case pos:start="109:9" pos:end="109:27">case <expr pos:start="109:14" pos:end="109:26"><name pos:start="109:14" pos:end="109:26">INDEX_op_call</name></expr>:</case>

            <expr_stmt pos:start="111:13" pos:end="114:0"><expr pos:start="111:13" pos:end="111:37"><name pos:start="111:13" pos:end="111:14">t0</name> <operator pos:start="111:16" pos:end="111:16">=</operator> <call pos:start="111:18" pos:end="111:37"><name pos:start="111:18" pos:end="111:28">tci_read_ri</name><argument_list pos:start="111:29" pos:end="111:37">(<argument pos:start="111:30" pos:end="111:36"><expr pos:start="111:30" pos:end="111:36"><operator pos:start="111:30" pos:end="111:30">&amp;</operator><name pos:start="111:31" pos:end="111:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="113:1" pos:end="113:29">#<cpp:directive pos:start="113:2" pos:end="113:3">if</cpp:directive> <expr pos:start="113:5" pos:end="113:29"><name pos:start="113:5" pos:end="113:23">TCG_TARGET_REG_BITS</name> <operator pos:start="113:25" pos:end="113:26">==</operator> <literal type="number" pos:start="113:28" pos:end="113:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="115:13" pos:end="133:69"><expr pos:start="115:13" pos:end="133:68"><name pos:start="115:13" pos:end="115:17">tmp64</name> <operator pos:start="115:19" pos:end="115:19">=</operator> <operator pos:start="115:21" pos:end="115:21">(</operator><operator pos:start="115:22" pos:end="115:22">(</operator><name pos:start="115:23" pos:end="115:37">helper_function</name><operator pos:start="115:38" pos:end="115:38">)</operator><name pos:start="115:39" pos:end="115:40">t0</name><operator pos:start="115:41" pos:end="115:41">)</operator><operator pos:start="115:42" pos:end="115:42">(</operator><call pos:start="115:43" pos:end="115:66"><name pos:start="115:43" pos:end="115:54">tci_read_reg</name><argument_list pos:start="115:55" pos:end="115:66">(<argument pos:start="115:56" pos:end="115:65"><expr pos:start="115:56" pos:end="115:65"><name pos:start="115:56" pos:end="115:65">TCG_REG_R0</name></expr></argument>)</argument_list></call><operator pos:start="115:67" pos:end="115:67">,</operator>

                                          <call pos:start="117:43" pos:end="117:66"><name pos:start="117:43" pos:end="117:54">tci_read_reg</name><argument_list pos:start="117:55" pos:end="117:66">(<argument pos:start="117:56" pos:end="117:65"><expr pos:start="117:56" pos:end="117:65"><name pos:start="117:56" pos:end="117:65">TCG_REG_R1</name></expr></argument>)</argument_list></call><operator pos:start="117:67" pos:end="117:67">,</operator>

                                          <call pos:start="119:43" pos:end="119:66"><name pos:start="119:43" pos:end="119:54">tci_read_reg</name><argument_list pos:start="119:55" pos:end="119:66">(<argument pos:start="119:56" pos:end="119:65"><expr pos:start="119:56" pos:end="119:65"><name pos:start="119:56" pos:end="119:65">TCG_REG_R2</name></expr></argument>)</argument_list></call><operator pos:start="119:67" pos:end="119:67">,</operator>

                                          <call pos:start="121:43" pos:end="121:66"><name pos:start="121:43" pos:end="121:54">tci_read_reg</name><argument_list pos:start="121:55" pos:end="121:66">(<argument pos:start="121:56" pos:end="121:65"><expr pos:start="121:56" pos:end="121:65"><name pos:start="121:56" pos:end="121:65">TCG_REG_R3</name></expr></argument>)</argument_list></call><operator pos:start="121:67" pos:end="121:67">,</operator>

                                          <call pos:start="123:43" pos:end="123:66"><name pos:start="123:43" pos:end="123:54">tci_read_reg</name><argument_list pos:start="123:55" pos:end="123:66">(<argument pos:start="123:56" pos:end="123:65"><expr pos:start="123:56" pos:end="123:65"><name pos:start="123:56" pos:end="123:65">TCG_REG_R5</name></expr></argument>)</argument_list></call><operator pos:start="123:67" pos:end="123:67">,</operator>

                                          <call pos:start="125:43" pos:end="125:66"><name pos:start="125:43" pos:end="125:54">tci_read_reg</name><argument_list pos:start="125:55" pos:end="125:66">(<argument pos:start="125:56" pos:end="125:65"><expr pos:start="125:56" pos:end="125:65"><name pos:start="125:56" pos:end="125:65">TCG_REG_R6</name></expr></argument>)</argument_list></call><operator pos:start="125:67" pos:end="125:67">,</operator>

                                          <call pos:start="127:43" pos:end="127:66"><name pos:start="127:43" pos:end="127:54">tci_read_reg</name><argument_list pos:start="127:55" pos:end="127:66">(<argument pos:start="127:56" pos:end="127:65"><expr pos:start="127:56" pos:end="127:65"><name pos:start="127:56" pos:end="127:65">TCG_REG_R7</name></expr></argument>)</argument_list></call><operator pos:start="127:67" pos:end="127:67">,</operator>

                                          <call pos:start="129:43" pos:end="129:66"><name pos:start="129:43" pos:end="129:54">tci_read_reg</name><argument_list pos:start="129:55" pos:end="129:66">(<argument pos:start="129:56" pos:end="129:65"><expr pos:start="129:56" pos:end="129:65"><name pos:start="129:56" pos:end="129:65">TCG_REG_R8</name></expr></argument>)</argument_list></call><operator pos:start="129:67" pos:end="129:67">,</operator>

                                          <call pos:start="131:43" pos:end="131:66"><name pos:start="131:43" pos:end="131:54">tci_read_reg</name><argument_list pos:start="131:55" pos:end="131:66">(<argument pos:start="131:56" pos:end="131:65"><expr pos:start="131:56" pos:end="131:65"><name pos:start="131:56" pos:end="131:65">TCG_REG_R9</name></expr></argument>)</argument_list></call><operator pos:start="131:67" pos:end="131:67">,</operator>

                                          <call pos:start="133:43" pos:end="133:67"><name pos:start="133:43" pos:end="133:54">tci_read_reg</name><argument_list pos:start="133:55" pos:end="133:67">(<argument pos:start="133:56" pos:end="133:66"><expr pos:start="133:56" pos:end="133:66"><name pos:start="133:56" pos:end="133:66">TCG_REG_R10</name></expr></argument>)</argument_list></call><operator pos:start="133:68" pos:end="133:68">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:45"><expr pos:start="135:13" pos:end="135:44"><call pos:start="135:13" pos:end="135:44"><name pos:start="135:13" pos:end="135:25">tci_write_reg</name><argument_list pos:start="135:26" pos:end="135:44">(<argument pos:start="135:27" pos:end="135:36"><expr pos:start="135:27" pos:end="135:36"><name pos:start="135:27" pos:end="135:36">TCG_REG_R0</name></expr></argument>, <argument pos:start="135:39" pos:end="135:43"><expr pos:start="135:39" pos:end="135:43"><name pos:start="135:39" pos:end="135:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="140:0"><expr pos:start="137:13" pos:end="137:50"><call pos:start="137:13" pos:end="137:50"><name pos:start="137:13" pos:end="137:25">tci_write_reg</name><argument_list pos:start="137:26" pos:end="137:50">(<argument pos:start="137:27" pos:end="137:36"><expr pos:start="137:27" pos:end="137:36"><name pos:start="137:27" pos:end="137:36">TCG_REG_R1</name></expr></argument>, <argument pos:start="137:39" pos:end="137:49"><expr pos:start="137:39" pos:end="137:49"><name pos:start="137:39" pos:end="137:43">tmp64</name> <operator pos:start="137:45" pos:end="137:46">&gt;&gt;</operator> <literal type="number" pos:start="137:48" pos:end="137:49">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="139:1" pos:end="139:5">#<cpp:directive pos:start="139:2" pos:end="139:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="141:13" pos:end="149:68"><expr pos:start="141:13" pos:end="149:67"><name pos:start="141:13" pos:end="141:17">tmp64</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <operator pos:start="141:21" pos:end="141:21">(</operator><operator pos:start="141:22" pos:end="141:22">(</operator><name pos:start="141:23" pos:end="141:37">helper_function</name><operator pos:start="141:38" pos:end="141:38">)</operator><name pos:start="141:39" pos:end="141:40">t0</name><operator pos:start="141:41" pos:end="141:41">)</operator><operator pos:start="141:42" pos:end="141:42">(</operator><call pos:start="141:43" pos:end="141:66"><name pos:start="141:43" pos:end="141:54">tci_read_reg</name><argument_list pos:start="141:55" pos:end="141:66">(<argument pos:start="141:56" pos:end="141:65"><expr pos:start="141:56" pos:end="141:65"><name pos:start="141:56" pos:end="141:65">TCG_REG_R0</name></expr></argument>)</argument_list></call><operator pos:start="141:67" pos:end="141:67">,</operator>

                                          <call pos:start="143:43" pos:end="143:66"><name pos:start="143:43" pos:end="143:54">tci_read_reg</name><argument_list pos:start="143:55" pos:end="143:66">(<argument pos:start="143:56" pos:end="143:65"><expr pos:start="143:56" pos:end="143:65"><name pos:start="143:56" pos:end="143:65">TCG_REG_R1</name></expr></argument>)</argument_list></call><operator pos:start="143:67" pos:end="143:67">,</operator>

                                          <call pos:start="145:43" pos:end="145:66"><name pos:start="145:43" pos:end="145:54">tci_read_reg</name><argument_list pos:start="145:55" pos:end="145:66">(<argument pos:start="145:56" pos:end="145:65"><expr pos:start="145:56" pos:end="145:65"><name pos:start="145:56" pos:end="145:65">TCG_REG_R2</name></expr></argument>)</argument_list></call><operator pos:start="145:67" pos:end="145:67">,</operator>

                                          <call pos:start="147:43" pos:end="147:66"><name pos:start="147:43" pos:end="147:54">tci_read_reg</name><argument_list pos:start="147:55" pos:end="147:66">(<argument pos:start="147:56" pos:end="147:65"><expr pos:start="147:56" pos:end="147:65"><name pos:start="147:56" pos:end="147:65">TCG_REG_R3</name></expr></argument>)</argument_list></call><operator pos:start="147:67" pos:end="147:67">,</operator>

                                          <call pos:start="149:43" pos:end="149:66"><name pos:start="149:43" pos:end="149:54">tci_read_reg</name><argument_list pos:start="149:55" pos:end="149:66">(<argument pos:start="149:56" pos:end="149:65"><expr pos:start="149:56" pos:end="149:65"><name pos:start="149:56" pos:end="149:65">TCG_REG_R5</name></expr></argument>)</argument_list></call><operator pos:start="149:67" pos:end="149:67">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="154:0"><expr pos:start="151:13" pos:end="151:44"><call pos:start="151:13" pos:end="151:44"><name pos:start="151:13" pos:end="151:25">tci_write_reg</name><argument_list pos:start="151:26" pos:end="151:44">(<argument pos:start="151:27" pos:end="151:36"><expr pos:start="151:27" pos:end="151:36"><name pos:start="151:27" pos:end="151:36">TCG_REG_R0</name></expr></argument>, <argument pos:start="151:39" pos:end="151:43"><expr pos:start="151:39" pos:end="151:43"><name pos:start="151:39" pos:end="151:43">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="153:1" pos:end="153:6">#<cpp:directive pos:start="153:2" pos:end="153:6">endif</cpp:directive></cpp:endif>

            <break pos:start="155:13" pos:end="155:18">break;</break>

        <case pos:start="157:9" pos:end="157:25">case <expr pos:start="157:14" pos:end="157:24"><name pos:start="157:14" pos:end="157:24">INDEX_op_br</name></expr>:</case>

            <expr_stmt pos:start="159:13" pos:end="159:44"><expr pos:start="159:13" pos:end="159:43"><name pos:start="159:13" pos:end="159:17">label</name> <operator pos:start="159:19" pos:end="159:19">=</operator> <call pos:start="159:21" pos:end="159:43"><name pos:start="159:21" pos:end="159:34">tci_read_label</name><argument_list pos:start="159:35" pos:end="159:43">(<argument pos:start="159:36" pos:end="159:42"><expr pos:start="159:36" pos:end="159:42"><operator pos:start="159:36" pos:end="159:36">&amp;</operator><name pos:start="159:37" pos:end="159:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:53"><expr pos:start="161:13" pos:end="161:52"><call pos:start="161:13" pos:end="161:52"><name pos:start="161:13" pos:end="161:18">assert</name><argument_list pos:start="161:19" pos:end="161:52">(<argument pos:start="161:20" pos:end="161:51"><expr pos:start="161:20" pos:end="161:51"><name pos:start="161:20" pos:end="161:25">tb_ptr</name> <operator pos:start="161:27" pos:end="161:28">==</operator> <name pos:start="161:30" pos:end="161:41">old_code_ptr</name> <operator pos:start="161:43" pos:end="161:43">+</operator> <name pos:start="161:45" pos:end="161:51">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:38"><expr pos:start="163:13" pos:end="163:37"><name pos:start="163:13" pos:end="163:18">tb_ptr</name> <operator pos:start="163:20" pos:end="163:20">=</operator> <operator pos:start="163:22" pos:end="163:22">(</operator><name pos:start="163:23" pos:end="163:29">uint8_t</name> <operator pos:start="163:31" pos:end="163:31">*</operator><operator pos:start="163:32" pos:end="163:32">)</operator><name pos:start="163:33" pos:end="163:37">label</name></expr>;</expr_stmt>

            <continue pos:start="165:13" pos:end="165:21">continue;</continue>

        <case pos:start="167:9" pos:end="167:34">case <expr pos:start="167:14" pos:end="167:33"><name pos:start="167:14" pos:end="167:33">INDEX_op_setcond_i32</name></expr>:</case>

            <expr_stmt pos:start="169:13" pos:end="169:27"><expr pos:start="169:13" pos:end="169:26"><name pos:start="169:13" pos:end="169:14">t0</name> <operator pos:start="169:16" pos:end="169:16">=</operator> <operator pos:start="169:18" pos:end="169:18">*</operator><name pos:start="169:19" pos:end="169:24">tb_ptr</name><operator pos:start="169:25" pos:end="169:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="171:13" pos:end="171:39"><expr pos:start="171:13" pos:end="171:38"><name pos:start="171:13" pos:end="171:14">t1</name> <operator pos:start="171:16" pos:end="171:16">=</operator> <call pos:start="171:18" pos:end="171:38"><name pos:start="171:18" pos:end="171:29">tci_read_r32</name><argument_list pos:start="171:30" pos:end="171:38">(<argument pos:start="171:31" pos:end="171:37"><expr pos:start="171:31" pos:end="171:37"><operator pos:start="171:31" pos:end="171:31">&amp;</operator><name pos:start="171:32" pos:end="171:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="173:13" pos:end="173:40"><expr pos:start="173:13" pos:end="173:39"><name pos:start="173:13" pos:end="173:14">t2</name> <operator pos:start="173:16" pos:end="173:16">=</operator> <call pos:start="173:18" pos:end="173:39"><name pos:start="173:18" pos:end="173:30">tci_read_ri32</name><argument_list pos:start="173:31" pos:end="173:39">(<argument pos:start="173:32" pos:end="173:38"><expr pos:start="173:32" pos:end="173:38"><operator pos:start="173:32" pos:end="173:32">&amp;</operator><name pos:start="173:33" pos:end="173:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:34"><expr pos:start="175:13" pos:end="175:33"><name pos:start="175:13" pos:end="175:21">condition</name> <operator pos:start="175:23" pos:end="175:23">=</operator> <operator pos:start="175:25" pos:end="175:25">*</operator><name pos:start="175:26" pos:end="175:31">tb_ptr</name><operator pos:start="175:32" pos:end="175:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="177:13" pos:end="177:66"><expr pos:start="177:13" pos:end="177:65"><call pos:start="177:13" pos:end="177:65"><name pos:start="177:13" pos:end="177:27">tci_write_reg32</name><argument_list pos:start="177:28" pos:end="177:65">(<argument pos:start="177:29" pos:end="177:30"><expr pos:start="177:29" pos:end="177:30"><name pos:start="177:29" pos:end="177:30">t0</name></expr></argument>, <argument pos:start="177:33" pos:end="177:64"><expr pos:start="177:33" pos:end="177:64"><call pos:start="177:33" pos:end="177:64"><name pos:start="177:33" pos:end="177:45">tci_compare32</name><argument_list pos:start="177:46" pos:end="177:64">(<argument pos:start="177:47" pos:end="177:48"><expr pos:start="177:47" pos:end="177:48"><name pos:start="177:47" pos:end="177:48">t1</name></expr></argument>, <argument pos:start="177:51" pos:end="177:52"><expr pos:start="177:51" pos:end="177:52"><name pos:start="177:51" pos:end="177:52">t2</name></expr></argument>, <argument pos:start="177:55" pos:end="177:63"><expr pos:start="177:55" pos:end="177:63"><name pos:start="177:55" pos:end="177:63">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="179:13" pos:end="182:0">break;</break>

<cpp:if pos:start="181:1" pos:end="181:29">#<cpp:directive pos:start="181:2" pos:end="181:3">if</cpp:directive> <expr pos:start="181:5" pos:end="181:29"><name pos:start="181:5" pos:end="181:23">TCG_TARGET_REG_BITS</name> <operator pos:start="181:25" pos:end="181:26">==</operator> <literal type="number" pos:start="181:28" pos:end="181:29">32</literal></expr></cpp:if>

        <case pos:start="183:9" pos:end="183:35">case <expr pos:start="183:14" pos:end="183:34"><name pos:start="183:14" pos:end="183:34">INDEX_op_setcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="185:13" pos:end="185:27"><expr pos:start="185:13" pos:end="185:26"><name pos:start="185:13" pos:end="185:14">t0</name> <operator pos:start="185:16" pos:end="185:16">=</operator> <operator pos:start="185:18" pos:end="185:18">*</operator><name pos:start="185:19" pos:end="185:24">tb_ptr</name><operator pos:start="185:25" pos:end="185:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="187:13" pos:end="187:42"><expr pos:start="187:13" pos:end="187:41"><name pos:start="187:13" pos:end="187:17">tmp64</name> <operator pos:start="187:19" pos:end="187:19">=</operator> <call pos:start="187:21" pos:end="187:41"><name pos:start="187:21" pos:end="187:32">tci_read_r64</name><argument_list pos:start="187:33" pos:end="187:41">(<argument pos:start="187:34" pos:end="187:40"><expr pos:start="187:34" pos:end="187:40"><operator pos:start="187:34" pos:end="187:34">&amp;</operator><name pos:start="187:35" pos:end="187:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="189:13" pos:end="189:41"><expr pos:start="189:13" pos:end="189:40"><name pos:start="189:13" pos:end="189:15">v64</name> <operator pos:start="189:17" pos:end="189:17">=</operator> <call pos:start="189:19" pos:end="189:40"><name pos:start="189:19" pos:end="189:31">tci_read_ri64</name><argument_list pos:start="189:32" pos:end="189:40">(<argument pos:start="189:33" pos:end="189:39"><expr pos:start="189:33" pos:end="189:39"><operator pos:start="189:33" pos:end="189:33">&amp;</operator><name pos:start="189:34" pos:end="189:39">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="191:13" pos:end="191:34"><expr pos:start="191:13" pos:end="191:33"><name pos:start="191:13" pos:end="191:21">condition</name> <operator pos:start="191:23" pos:end="191:23">=</operator> <operator pos:start="191:25" pos:end="191:25">*</operator><name pos:start="191:26" pos:end="191:31">tb_ptr</name><operator pos:start="191:32" pos:end="191:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:70"><expr pos:start="193:13" pos:end="193:69"><call pos:start="193:13" pos:end="193:69"><name pos:start="193:13" pos:end="193:27">tci_write_reg32</name><argument_list pos:start="193:28" pos:end="193:69">(<argument pos:start="193:29" pos:end="193:30"><expr pos:start="193:29" pos:end="193:30"><name pos:start="193:29" pos:end="193:30">t0</name></expr></argument>, <argument pos:start="193:33" pos:end="193:68"><expr pos:start="193:33" pos:end="193:68"><call pos:start="193:33" pos:end="193:68"><name pos:start="193:33" pos:end="193:45">tci_compare64</name><argument_list pos:start="193:46" pos:end="193:68">(<argument pos:start="193:47" pos:end="193:51"><expr pos:start="193:47" pos:end="193:51"><name pos:start="193:47" pos:end="193:51">tmp64</name></expr></argument>, <argument pos:start="193:54" pos:end="193:56"><expr pos:start="193:54" pos:end="193:56"><name pos:start="193:54" pos:end="193:56">v64</name></expr></argument>, <argument pos:start="193:59" pos:end="193:67"><expr pos:start="193:59" pos:end="193:67"><name pos:start="193:59" pos:end="193:67">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="195:13" pos:end="198:0">break;</break>

<cpp:elif pos:start="197:1" pos:end="197:31">#<cpp:directive pos:start="197:2" pos:end="197:5">elif</cpp:directive> <expr pos:start="197:7" pos:end="197:31"><name pos:start="197:7" pos:end="197:25">TCG_TARGET_REG_BITS</name> <operator pos:start="197:27" pos:end="197:28">==</operator> <literal type="number" pos:start="197:30" pos:end="197:31">64</literal></expr></cpp:elif>

        <case pos:start="199:9" pos:end="199:34">case <expr pos:start="199:14" pos:end="199:33"><name pos:start="199:14" pos:end="199:33">INDEX_op_setcond_i64</name></expr>:</case>

            <expr_stmt pos:start="201:13" pos:end="201:27"><expr pos:start="201:13" pos:end="201:26"><name pos:start="201:13" pos:end="201:14">t0</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <operator pos:start="201:18" pos:end="201:18">*</operator><name pos:start="201:19" pos:end="201:24">tb_ptr</name><operator pos:start="201:25" pos:end="201:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:39"><expr pos:start="203:13" pos:end="203:38"><name pos:start="203:13" pos:end="203:14">t1</name> <operator pos:start="203:16" pos:end="203:16">=</operator> <call pos:start="203:18" pos:end="203:38"><name pos:start="203:18" pos:end="203:29">tci_read_r64</name><argument_list pos:start="203:30" pos:end="203:38">(<argument pos:start="203:31" pos:end="203:37"><expr pos:start="203:31" pos:end="203:37"><operator pos:start="203:31" pos:end="203:31">&amp;</operator><name pos:start="203:32" pos:end="203:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:40"><expr pos:start="205:13" pos:end="205:39"><name pos:start="205:13" pos:end="205:14">t2</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <call pos:start="205:18" pos:end="205:39"><name pos:start="205:18" pos:end="205:30">tci_read_ri64</name><argument_list pos:start="205:31" pos:end="205:39">(<argument pos:start="205:32" pos:end="205:38"><expr pos:start="205:32" pos:end="205:38"><operator pos:start="205:32" pos:end="205:32">&amp;</operator><name pos:start="205:33" pos:end="205:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:34"><expr pos:start="207:13" pos:end="207:33"><name pos:start="207:13" pos:end="207:21">condition</name> <operator pos:start="207:23" pos:end="207:23">=</operator> <operator pos:start="207:25" pos:end="207:25">*</operator><name pos:start="207:26" pos:end="207:31">tb_ptr</name><operator pos:start="207:32" pos:end="207:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="209:13" pos:end="209:66"><expr pos:start="209:13" pos:end="209:65"><call pos:start="209:13" pos:end="209:65"><name pos:start="209:13" pos:end="209:27">tci_write_reg64</name><argument_list pos:start="209:28" pos:end="209:65">(<argument pos:start="209:29" pos:end="209:30"><expr pos:start="209:29" pos:end="209:30"><name pos:start="209:29" pos:end="209:30">t0</name></expr></argument>, <argument pos:start="209:33" pos:end="209:64"><expr pos:start="209:33" pos:end="209:64"><call pos:start="209:33" pos:end="209:64"><name pos:start="209:33" pos:end="209:45">tci_compare64</name><argument_list pos:start="209:46" pos:end="209:64">(<argument pos:start="209:47" pos:end="209:48"><expr pos:start="209:47" pos:end="209:48"><name pos:start="209:47" pos:end="209:48">t1</name></expr></argument>, <argument pos:start="209:51" pos:end="209:52"><expr pos:start="209:51" pos:end="209:52"><name pos:start="209:51" pos:end="209:52">t2</name></expr></argument>, <argument pos:start="209:55" pos:end="209:63"><expr pos:start="209:55" pos:end="209:63"><name pos:start="209:55" pos:end="209:63">condition</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="211:13" pos:end="214:0">break;</break>

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

        <case pos:start="215:9" pos:end="215:30">case <expr pos:start="215:14" pos:end="215:29"><name pos:start="215:14" pos:end="215:29">INDEX_op_mov_i32</name></expr>:</case>

            <expr_stmt pos:start="217:13" pos:end="217:27"><expr pos:start="217:13" pos:end="217:26"><name pos:start="217:13" pos:end="217:14">t0</name> <operator pos:start="217:16" pos:end="217:16">=</operator> <operator pos:start="217:18" pos:end="217:18">*</operator><name pos:start="217:19" pos:end="217:24">tb_ptr</name><operator pos:start="217:25" pos:end="217:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="219:13" pos:end="219:39"><expr pos:start="219:13" pos:end="219:38"><name pos:start="219:13" pos:end="219:14">t1</name> <operator pos:start="219:16" pos:end="219:16">=</operator> <call pos:start="219:18" pos:end="219:38"><name pos:start="219:18" pos:end="219:29">tci_read_r32</name><argument_list pos:start="219:30" pos:end="219:38">(<argument pos:start="219:31" pos:end="219:37"><expr pos:start="219:31" pos:end="219:37"><operator pos:start="219:31" pos:end="219:31">&amp;</operator><name pos:start="219:32" pos:end="219:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="221:13" pos:end="221:36"><expr pos:start="221:13" pos:end="221:35"><call pos:start="221:13" pos:end="221:35"><name pos:start="221:13" pos:end="221:27">tci_write_reg32</name><argument_list pos:start="221:28" pos:end="221:35">(<argument pos:start="221:29" pos:end="221:30"><expr pos:start="221:29" pos:end="221:30"><name pos:start="221:29" pos:end="221:30">t0</name></expr></argument>, <argument pos:start="221:33" pos:end="221:34"><expr pos:start="221:33" pos:end="221:34"><name pos:start="221:33" pos:end="221:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="223:13" pos:end="223:18">break;</break>

        <case pos:start="225:9" pos:end="225:31">case <expr pos:start="225:14" pos:end="225:30"><name pos:start="225:14" pos:end="225:30">INDEX_op_movi_i32</name></expr>:</case>

            <expr_stmt pos:start="227:13" pos:end="227:27"><expr pos:start="227:13" pos:end="227:26"><name pos:start="227:13" pos:end="227:14">t0</name> <operator pos:start="227:16" pos:end="227:16">=</operator> <operator pos:start="227:18" pos:end="227:18">*</operator><name pos:start="227:19" pos:end="227:24">tb_ptr</name><operator pos:start="227:25" pos:end="227:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="229:13" pos:end="229:39"><expr pos:start="229:13" pos:end="229:38"><name pos:start="229:13" pos:end="229:14">t1</name> <operator pos:start="229:16" pos:end="229:16">=</operator> <call pos:start="229:18" pos:end="229:38"><name pos:start="229:18" pos:end="229:29">tci_read_i32</name><argument_list pos:start="229:30" pos:end="229:38">(<argument pos:start="229:31" pos:end="229:37"><expr pos:start="229:31" pos:end="229:37"><operator pos:start="229:31" pos:end="229:31">&amp;</operator><name pos:start="229:32" pos:end="229:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="231:13" pos:end="231:36"><expr pos:start="231:13" pos:end="231:35"><call pos:start="231:13" pos:end="231:35"><name pos:start="231:13" pos:end="231:27">tci_write_reg32</name><argument_list pos:start="231:28" pos:end="231:35">(<argument pos:start="231:29" pos:end="231:30"><expr pos:start="231:29" pos:end="231:30"><name pos:start="231:29" pos:end="231:30">t0</name></expr></argument>, <argument pos:start="231:33" pos:end="231:34"><expr pos:start="231:33" pos:end="231:34"><name pos:start="231:33" pos:end="231:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="233:13" pos:end="233:18">break;</break>



            <comment type="block" pos:start="237:13" pos:end="237:49">/* Load/store operations (32 bit). */</comment>



        <case pos:start="241:9" pos:end="241:31">case <expr pos:start="241:14" pos:end="241:30"><name pos:start="241:14" pos:end="241:30">INDEX_op_ld8u_i32</name></expr>:</case>

            <expr_stmt pos:start="243:13" pos:end="243:27"><expr pos:start="243:13" pos:end="243:26"><name pos:start="243:13" pos:end="243:14">t0</name> <operator pos:start="243:16" pos:end="243:16">=</operator> <operator pos:start="243:18" pos:end="243:18">*</operator><name pos:start="243:19" pos:end="243:24">tb_ptr</name><operator pos:start="243:25" pos:end="243:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="245:13" pos:end="245:37"><expr pos:start="245:13" pos:end="245:36"><name pos:start="245:13" pos:end="245:14">t1</name> <operator pos:start="245:16" pos:end="245:16">=</operator> <call pos:start="245:18" pos:end="245:36"><name pos:start="245:18" pos:end="245:27">tci_read_r</name><argument_list pos:start="245:28" pos:end="245:36">(<argument pos:start="245:29" pos:end="245:35"><expr pos:start="245:29" pos:end="245:35"><operator pos:start="245:29" pos:end="245:29">&amp;</operator><name pos:start="245:30" pos:end="245:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="247:13" pos:end="247:39"><expr pos:start="247:13" pos:end="247:38"><name pos:start="247:13" pos:end="247:14">t2</name> <operator pos:start="247:16" pos:end="247:16">=</operator> <call pos:start="247:18" pos:end="247:38"><name pos:start="247:18" pos:end="247:29">tci_read_s32</name><argument_list pos:start="247:30" pos:end="247:38">(<argument pos:start="247:31" pos:end="247:37"><expr pos:start="247:31" pos:end="247:37"><operator pos:start="247:31" pos:end="247:31">&amp;</operator><name pos:start="247:32" pos:end="247:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="249:13" pos:end="249:54"><expr pos:start="249:13" pos:end="249:53"><call pos:start="249:13" pos:end="249:53"><name pos:start="249:13" pos:end="249:26">tci_write_reg8</name><argument_list pos:start="249:27" pos:end="249:53">(<argument pos:start="249:28" pos:end="249:29"><expr pos:start="249:28" pos:end="249:29"><name pos:start="249:28" pos:end="249:29">t0</name></expr></argument>, <argument pos:start="249:32" pos:end="249:52"><expr pos:start="249:32" pos:end="249:52"><operator pos:start="249:32" pos:end="249:32">*</operator><operator pos:start="249:33" pos:end="249:33">(</operator><name pos:start="249:34" pos:end="249:40">uint8_t</name> <operator pos:start="249:42" pos:end="249:42">*</operator><operator pos:start="249:43" pos:end="249:43">)</operator><operator pos:start="249:44" pos:end="249:44">(</operator><name pos:start="249:45" pos:end="249:46">t1</name> <operator pos:start="249:48" pos:end="249:48">+</operator> <name pos:start="249:50" pos:end="249:51">t2</name><operator pos:start="249:52" pos:end="249:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="251:13" pos:end="251:18">break;</break>

        <case pos:start="253:9" pos:end="253:31">case <expr pos:start="253:14" pos:end="253:30"><name pos:start="253:14" pos:end="253:30">INDEX_op_ld8s_i32</name></expr>:</case>

        <case pos:start="255:9" pos:end="255:32">case <expr pos:start="255:14" pos:end="255:31"><name pos:start="255:14" pos:end="255:31">INDEX_op_ld16u_i32</name></expr>:</case>

            <expr_stmt pos:start="257:13" pos:end="257:19"><expr pos:start="257:13" pos:end="257:18"><call pos:start="257:13" pos:end="257:18"><name pos:start="257:13" pos:end="257:16">TODO</name><argument_list pos:start="257:17" pos:end="257:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="259:13" pos:end="259:18">break;</break>

        <case pos:start="261:9" pos:end="261:32">case <expr pos:start="261:14" pos:end="261:31"><name pos:start="261:14" pos:end="261:31">INDEX_op_ld16s_i32</name></expr>:</case>

            <expr_stmt pos:start="263:13" pos:end="263:19"><expr pos:start="263:13" pos:end="263:18"><call pos:start="263:13" pos:end="263:18"><name pos:start="263:13" pos:end="263:16">TODO</name><argument_list pos:start="263:17" pos:end="263:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="265:13" pos:end="265:18">break;</break>

        <case pos:start="267:9" pos:end="267:29">case <expr pos:start="267:14" pos:end="267:28"><name pos:start="267:14" pos:end="267:28">INDEX_op_ld_i32</name></expr>:</case>

            <expr_stmt pos:start="269:13" pos:end="269:27"><expr pos:start="269:13" pos:end="269:26"><name pos:start="269:13" pos:end="269:14">t0</name> <operator pos:start="269:16" pos:end="269:16">=</operator> <operator pos:start="269:18" pos:end="269:18">*</operator><name pos:start="269:19" pos:end="269:24">tb_ptr</name><operator pos:start="269:25" pos:end="269:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="271:13" pos:end="271:37"><expr pos:start="271:13" pos:end="271:36"><name pos:start="271:13" pos:end="271:14">t1</name> <operator pos:start="271:16" pos:end="271:16">=</operator> <call pos:start="271:18" pos:end="271:36"><name pos:start="271:18" pos:end="271:27">tci_read_r</name><argument_list pos:start="271:28" pos:end="271:36">(<argument pos:start="271:29" pos:end="271:35"><expr pos:start="271:29" pos:end="271:35"><operator pos:start="271:29" pos:end="271:29">&amp;</operator><name pos:start="271:30" pos:end="271:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="273:13" pos:end="273:39"><expr pos:start="273:13" pos:end="273:38"><name pos:start="273:13" pos:end="273:14">t2</name> <operator pos:start="273:16" pos:end="273:16">=</operator> <call pos:start="273:18" pos:end="273:38"><name pos:start="273:18" pos:end="273:29">tci_read_s32</name><argument_list pos:start="273:30" pos:end="273:38">(<argument pos:start="273:31" pos:end="273:37"><expr pos:start="273:31" pos:end="273:37"><operator pos:start="273:31" pos:end="273:31">&amp;</operator><name pos:start="273:32" pos:end="273:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="275:13" pos:end="275:56"><expr pos:start="275:13" pos:end="275:55"><call pos:start="275:13" pos:end="275:55"><name pos:start="275:13" pos:end="275:27">tci_write_reg32</name><argument_list pos:start="275:28" pos:end="275:55">(<argument pos:start="275:29" pos:end="275:30"><expr pos:start="275:29" pos:end="275:30"><name pos:start="275:29" pos:end="275:30">t0</name></expr></argument>, <argument pos:start="275:33" pos:end="275:54"><expr pos:start="275:33" pos:end="275:54"><operator pos:start="275:33" pos:end="275:33">*</operator><operator pos:start="275:34" pos:end="275:34">(</operator><name pos:start="275:35" pos:end="275:42">uint32_t</name> <operator pos:start="275:44" pos:end="275:44">*</operator><operator pos:start="275:45" pos:end="275:45">)</operator><operator pos:start="275:46" pos:end="275:46">(</operator><name pos:start="275:47" pos:end="275:48">t1</name> <operator pos:start="275:50" pos:end="275:50">+</operator> <name pos:start="275:52" pos:end="275:53">t2</name><operator pos:start="275:54" pos:end="275:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        <case pos:start="279:9" pos:end="279:30">case <expr pos:start="279:14" pos:end="279:29"><name pos:start="279:14" pos:end="279:29">INDEX_op_st8_i32</name></expr>:</case>

            <expr_stmt pos:start="281:13" pos:end="281:38"><expr pos:start="281:13" pos:end="281:37"><name pos:start="281:13" pos:end="281:14">t0</name> <operator pos:start="281:16" pos:end="281:16">=</operator> <call pos:start="281:18" pos:end="281:37"><name pos:start="281:18" pos:end="281:28">tci_read_r8</name><argument_list pos:start="281:29" pos:end="281:37">(<argument pos:start="281:30" pos:end="281:36"><expr pos:start="281:30" pos:end="281:36"><operator pos:start="281:30" pos:end="281:30">&amp;</operator><name pos:start="281:31" pos:end="281:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:37"><expr pos:start="283:13" pos:end="283:36"><name pos:start="283:13" pos:end="283:14">t1</name> <operator pos:start="283:16" pos:end="283:16">=</operator> <call pos:start="283:18" pos:end="283:36"><name pos:start="283:18" pos:end="283:27">tci_read_r</name><argument_list pos:start="283:28" pos:end="283:36">(<argument pos:start="283:29" pos:end="283:35"><expr pos:start="283:29" pos:end="283:35"><operator pos:start="283:29" pos:end="283:29">&amp;</operator><name pos:start="283:30" pos:end="283:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="285:13" pos:end="285:39"><expr pos:start="285:13" pos:end="285:38"><name pos:start="285:13" pos:end="285:14">t2</name> <operator pos:start="285:16" pos:end="285:16">=</operator> <call pos:start="285:18" pos:end="285:38"><name pos:start="285:18" pos:end="285:29">tci_read_s32</name><argument_list pos:start="285:30" pos:end="285:38">(<argument pos:start="285:31" pos:end="285:37"><expr pos:start="285:31" pos:end="285:37"><operator pos:start="285:31" pos:end="285:31">&amp;</operator><name pos:start="285:32" pos:end="285:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="287:13" pos:end="287:39"><expr pos:start="287:13" pos:end="287:38"><operator pos:start="287:13" pos:end="287:13">*</operator><operator pos:start="287:14" pos:end="287:14">(</operator><name pos:start="287:15" pos:end="287:21">uint8_t</name> <operator pos:start="287:23" pos:end="287:23">*</operator><operator pos:start="287:24" pos:end="287:24">)</operator><operator pos:start="287:25" pos:end="287:25">(</operator><name pos:start="287:26" pos:end="287:27">t1</name> <operator pos:start="287:29" pos:end="287:29">+</operator> <name pos:start="287:31" pos:end="287:32">t2</name><operator pos:start="287:33" pos:end="287:33">)</operator> <operator pos:start="287:35" pos:end="287:35">=</operator> <name pos:start="287:37" pos:end="287:38">t0</name></expr>;</expr_stmt>

            <break pos:start="289:13" pos:end="289:18">break;</break>

        <case pos:start="291:9" pos:end="291:31">case <expr pos:start="291:14" pos:end="291:30"><name pos:start="291:14" pos:end="291:30">INDEX_op_st16_i32</name></expr>:</case>

            <expr_stmt pos:start="293:13" pos:end="293:39"><expr pos:start="293:13" pos:end="293:38"><name pos:start="293:13" pos:end="293:14">t0</name> <operator pos:start="293:16" pos:end="293:16">=</operator> <call pos:start="293:18" pos:end="293:38"><name pos:start="293:18" pos:end="293:29">tci_read_r16</name><argument_list pos:start="293:30" pos:end="293:38">(<argument pos:start="293:31" pos:end="293:37"><expr pos:start="293:31" pos:end="293:37"><operator pos:start="293:31" pos:end="293:31">&amp;</operator><name pos:start="293:32" pos:end="293:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:37"><expr pos:start="295:13" pos:end="295:36"><name pos:start="295:13" pos:end="295:14">t1</name> <operator pos:start="295:16" pos:end="295:16">=</operator> <call pos:start="295:18" pos:end="295:36"><name pos:start="295:18" pos:end="295:27">tci_read_r</name><argument_list pos:start="295:28" pos:end="295:36">(<argument pos:start="295:29" pos:end="295:35"><expr pos:start="295:29" pos:end="295:35"><operator pos:start="295:29" pos:end="295:29">&amp;</operator><name pos:start="295:30" pos:end="295:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:39"><expr pos:start="297:13" pos:end="297:38"><name pos:start="297:13" pos:end="297:14">t2</name> <operator pos:start="297:16" pos:end="297:16">=</operator> <call pos:start="297:18" pos:end="297:38"><name pos:start="297:18" pos:end="297:29">tci_read_s32</name><argument_list pos:start="297:30" pos:end="297:38">(<argument pos:start="297:31" pos:end="297:37"><expr pos:start="297:31" pos:end="297:37"><operator pos:start="297:31" pos:end="297:31">&amp;</operator><name pos:start="297:32" pos:end="297:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="299:40"><expr pos:start="299:13" pos:end="299:39"><operator pos:start="299:13" pos:end="299:13">*</operator><operator pos:start="299:14" pos:end="299:14">(</operator><name pos:start="299:15" pos:end="299:22">uint16_t</name> <operator pos:start="299:24" pos:end="299:24">*</operator><operator pos:start="299:25" pos:end="299:25">)</operator><operator pos:start="299:26" pos:end="299:26">(</operator><name pos:start="299:27" pos:end="299:28">t1</name> <operator pos:start="299:30" pos:end="299:30">+</operator> <name pos:start="299:32" pos:end="299:33">t2</name><operator pos:start="299:34" pos:end="299:34">)</operator> <operator pos:start="299:36" pos:end="299:36">=</operator> <name pos:start="299:38" pos:end="299:39">t0</name></expr>;</expr_stmt>

            <break pos:start="301:13" pos:end="301:18">break;</break>

        <case pos:start="303:9" pos:end="303:29">case <expr pos:start="303:14" pos:end="303:28"><name pos:start="303:14" pos:end="303:28">INDEX_op_st_i32</name></expr>:</case>

            <expr_stmt pos:start="305:13" pos:end="305:39"><expr pos:start="305:13" pos:end="305:38"><name pos:start="305:13" pos:end="305:14">t0</name> <operator pos:start="305:16" pos:end="305:16">=</operator> <call pos:start="305:18" pos:end="305:38"><name pos:start="305:18" pos:end="305:29">tci_read_r32</name><argument_list pos:start="305:30" pos:end="305:38">(<argument pos:start="305:31" pos:end="305:37"><expr pos:start="305:31" pos:end="305:37"><operator pos:start="305:31" pos:end="305:31">&amp;</operator><name pos:start="305:32" pos:end="305:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="307:13" pos:end="307:37"><expr pos:start="307:13" pos:end="307:36"><name pos:start="307:13" pos:end="307:14">t1</name> <operator pos:start="307:16" pos:end="307:16">=</operator> <call pos:start="307:18" pos:end="307:36"><name pos:start="307:18" pos:end="307:27">tci_read_r</name><argument_list pos:start="307:28" pos:end="307:36">(<argument pos:start="307:29" pos:end="307:35"><expr pos:start="307:29" pos:end="307:35"><operator pos:start="307:29" pos:end="307:29">&amp;</operator><name pos:start="307:30" pos:end="307:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="309:13" pos:end="309:39"><expr pos:start="309:13" pos:end="309:38"><name pos:start="309:13" pos:end="309:14">t2</name> <operator pos:start="309:16" pos:end="309:16">=</operator> <call pos:start="309:18" pos:end="309:38"><name pos:start="309:18" pos:end="309:29">tci_read_s32</name><argument_list pos:start="309:30" pos:end="309:38">(<argument pos:start="309:31" pos:end="309:37"><expr pos:start="309:31" pos:end="309:37"><operator pos:start="309:31" pos:end="309:31">&amp;</operator><name pos:start="309:32" pos:end="309:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="311:13" pos:end="311:54"><expr pos:start="311:13" pos:end="311:53"><call pos:start="311:13" pos:end="311:53"><name pos:start="311:13" pos:end="311:18">assert</name><argument_list pos:start="311:19" pos:end="311:53">(<argument pos:start="311:20" pos:end="311:52"><expr pos:start="311:20" pos:end="311:52"><name pos:start="311:20" pos:end="311:21">t1</name> <operator pos:start="311:23" pos:end="311:24">!=</operator> <name pos:start="311:26" pos:end="311:33">sp_value</name> <operator pos:start="311:35" pos:end="311:36">||</operator> <operator pos:start="311:38" pos:end="311:38">(</operator><name pos:start="311:39" pos:end="311:45">int32_t</name><operator pos:start="311:46" pos:end="311:46">)</operator><name pos:start="311:47" pos:end="311:48">t2</name> <operator pos:start="311:50" pos:end="311:50">&lt;</operator> <literal type="number" pos:start="311:52" pos:end="311:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="313:13" pos:end="313:40"><expr pos:start="313:13" pos:end="313:39"><operator pos:start="313:13" pos:end="313:13">*</operator><operator pos:start="313:14" pos:end="313:14">(</operator><name pos:start="313:15" pos:end="313:22">uint32_t</name> <operator pos:start="313:24" pos:end="313:24">*</operator><operator pos:start="313:25" pos:end="313:25">)</operator><operator pos:start="313:26" pos:end="313:26">(</operator><name pos:start="313:27" pos:end="313:28">t1</name> <operator pos:start="313:30" pos:end="313:30">+</operator> <name pos:start="313:32" pos:end="313:33">t2</name><operator pos:start="313:34" pos:end="313:34">)</operator> <operator pos:start="313:36" pos:end="313:36">=</operator> <name pos:start="313:38" pos:end="313:39">t0</name></expr>;</expr_stmt>

            <break pos:start="315:13" pos:end="315:18">break;</break>



            <comment type="block" pos:start="319:13" pos:end="319:49">/* Arithmetic operations (32 bit). */</comment>



        <case pos:start="323:9" pos:end="323:30">case <expr pos:start="323:14" pos:end="323:29"><name pos:start="323:14" pos:end="323:29">INDEX_op_add_i32</name></expr>:</case>

            <expr_stmt pos:start="325:13" pos:end="325:27"><expr pos:start="325:13" pos:end="325:26"><name pos:start="325:13" pos:end="325:14">t0</name> <operator pos:start="325:16" pos:end="325:16">=</operator> <operator pos:start="325:18" pos:end="325:18">*</operator><name pos:start="325:19" pos:end="325:24">tb_ptr</name><operator pos:start="325:25" pos:end="325:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:40"><expr pos:start="327:13" pos:end="327:39"><name pos:start="327:13" pos:end="327:14">t1</name> <operator pos:start="327:16" pos:end="327:16">=</operator> <call pos:start="327:18" pos:end="327:39"><name pos:start="327:18" pos:end="327:30">tci_read_ri32</name><argument_list pos:start="327:31" pos:end="327:39">(<argument pos:start="327:32" pos:end="327:38"><expr pos:start="327:32" pos:end="327:38"><operator pos:start="327:32" pos:end="327:32">&amp;</operator><name pos:start="327:33" pos:end="327:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:40"><expr pos:start="329:13" pos:end="329:39"><name pos:start="329:13" pos:end="329:14">t2</name> <operator pos:start="329:16" pos:end="329:16">=</operator> <call pos:start="329:18" pos:end="329:39"><name pos:start="329:18" pos:end="329:30">tci_read_ri32</name><argument_list pos:start="329:31" pos:end="329:39">(<argument pos:start="329:32" pos:end="329:38"><expr pos:start="329:32" pos:end="329:38"><operator pos:start="329:32" pos:end="329:32">&amp;</operator><name pos:start="329:33" pos:end="329:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="331:13" pos:end="331:41"><expr pos:start="331:13" pos:end="331:40"><call pos:start="331:13" pos:end="331:40"><name pos:start="331:13" pos:end="331:27">tci_write_reg32</name><argument_list pos:start="331:28" pos:end="331:40">(<argument pos:start="331:29" pos:end="331:30"><expr pos:start="331:29" pos:end="331:30"><name pos:start="331:29" pos:end="331:30">t0</name></expr></argument>, <argument pos:start="331:33" pos:end="331:39"><expr pos:start="331:33" pos:end="331:39"><name pos:start="331:33" pos:end="331:34">t1</name> <operator pos:start="331:36" pos:end="331:36">+</operator> <name pos:start="331:38" pos:end="331:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="333:13" pos:end="333:18">break;</break>

        <case pos:start="335:9" pos:end="335:30">case <expr pos:start="335:14" pos:end="335:29"><name pos:start="335:14" pos:end="335:29">INDEX_op_sub_i32</name></expr>:</case>

            <expr_stmt pos:start="337:13" pos:end="337:27"><expr pos:start="337:13" pos:end="337:26"><name pos:start="337:13" pos:end="337:14">t0</name> <operator pos:start="337:16" pos:end="337:16">=</operator> <operator pos:start="337:18" pos:end="337:18">*</operator><name pos:start="337:19" pos:end="337:24">tb_ptr</name><operator pos:start="337:25" pos:end="337:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="339:13" pos:end="339:40"><expr pos:start="339:13" pos:end="339:39"><name pos:start="339:13" pos:end="339:14">t1</name> <operator pos:start="339:16" pos:end="339:16">=</operator> <call pos:start="339:18" pos:end="339:39"><name pos:start="339:18" pos:end="339:30">tci_read_ri32</name><argument_list pos:start="339:31" pos:end="339:39">(<argument pos:start="339:32" pos:end="339:38"><expr pos:start="339:32" pos:end="339:38"><operator pos:start="339:32" pos:end="339:32">&amp;</operator><name pos:start="339:33" pos:end="339:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="341:13" pos:end="341:40"><expr pos:start="341:13" pos:end="341:39"><name pos:start="341:13" pos:end="341:14">t2</name> <operator pos:start="341:16" pos:end="341:16">=</operator> <call pos:start="341:18" pos:end="341:39"><name pos:start="341:18" pos:end="341:30">tci_read_ri32</name><argument_list pos:start="341:31" pos:end="341:39">(<argument pos:start="341:32" pos:end="341:38"><expr pos:start="341:32" pos:end="341:38"><operator pos:start="341:32" pos:end="341:32">&amp;</operator><name pos:start="341:33" pos:end="341:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="343:13" pos:end="343:41"><expr pos:start="343:13" pos:end="343:40"><call pos:start="343:13" pos:end="343:40"><name pos:start="343:13" pos:end="343:27">tci_write_reg32</name><argument_list pos:start="343:28" pos:end="343:40">(<argument pos:start="343:29" pos:end="343:30"><expr pos:start="343:29" pos:end="343:30"><name pos:start="343:29" pos:end="343:30">t0</name></expr></argument>, <argument pos:start="343:33" pos:end="343:39"><expr pos:start="343:33" pos:end="343:39"><name pos:start="343:33" pos:end="343:34">t1</name> <operator pos:start="343:36" pos:end="343:36">-</operator> <name pos:start="343:38" pos:end="343:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="345:13" pos:end="345:18">break;</break>

        <case pos:start="347:9" pos:end="347:30">case <expr pos:start="347:14" pos:end="347:29"><name pos:start="347:14" pos:end="347:29">INDEX_op_mul_i32</name></expr>:</case>

            <expr_stmt pos:start="349:13" pos:end="349:27"><expr pos:start="349:13" pos:end="349:26"><name pos:start="349:13" pos:end="349:14">t0</name> <operator pos:start="349:16" pos:end="349:16">=</operator> <operator pos:start="349:18" pos:end="349:18">*</operator><name pos:start="349:19" pos:end="349:24">tb_ptr</name><operator pos:start="349:25" pos:end="349:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="351:13" pos:end="351:40"><expr pos:start="351:13" pos:end="351:39"><name pos:start="351:13" pos:end="351:14">t1</name> <operator pos:start="351:16" pos:end="351:16">=</operator> <call pos:start="351:18" pos:end="351:39"><name pos:start="351:18" pos:end="351:30">tci_read_ri32</name><argument_list pos:start="351:31" pos:end="351:39">(<argument pos:start="351:32" pos:end="351:38"><expr pos:start="351:32" pos:end="351:38"><operator pos:start="351:32" pos:end="351:32">&amp;</operator><name pos:start="351:33" pos:end="351:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="353:13" pos:end="353:40"><expr pos:start="353:13" pos:end="353:39"><name pos:start="353:13" pos:end="353:14">t2</name> <operator pos:start="353:16" pos:end="353:16">=</operator> <call pos:start="353:18" pos:end="353:39"><name pos:start="353:18" pos:end="353:30">tci_read_ri32</name><argument_list pos:start="353:31" pos:end="353:39">(<argument pos:start="353:32" pos:end="353:38"><expr pos:start="353:32" pos:end="353:38"><operator pos:start="353:32" pos:end="353:32">&amp;</operator><name pos:start="353:33" pos:end="353:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="355:41"><expr pos:start="355:13" pos:end="355:40"><call pos:start="355:13" pos:end="355:40"><name pos:start="355:13" pos:end="355:27">tci_write_reg32</name><argument_list pos:start="355:28" pos:end="355:40">(<argument pos:start="355:29" pos:end="355:30"><expr pos:start="355:29" pos:end="355:30"><name pos:start="355:29" pos:end="355:30">t0</name></expr></argument>, <argument pos:start="355:33" pos:end="355:39"><expr pos:start="355:33" pos:end="355:39"><name pos:start="355:33" pos:end="355:34">t1</name> <operator pos:start="355:36" pos:end="355:36">*</operator> <name pos:start="355:38" pos:end="355:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="357:13" pos:end="360:0">break;</break>

<cpp:if pos:start="359:1" pos:end="359:26">#<cpp:directive pos:start="359:2" pos:end="359:3">if</cpp:directive> <expr pos:start="359:5" pos:end="359:26"><name pos:start="359:5" pos:end="359:26">TCG_TARGET_HAS_div_i32</name></expr></cpp:if>

        <case pos:start="361:9" pos:end="361:30">case <expr pos:start="361:14" pos:end="361:29"><name pos:start="361:14" pos:end="361:29">INDEX_op_div_i32</name></expr>:</case>

            <expr_stmt pos:start="363:13" pos:end="363:27"><expr pos:start="363:13" pos:end="363:26"><name pos:start="363:13" pos:end="363:14">t0</name> <operator pos:start="363:16" pos:end="363:16">=</operator> <operator pos:start="363:18" pos:end="363:18">*</operator><name pos:start="363:19" pos:end="363:24">tb_ptr</name><operator pos:start="363:25" pos:end="363:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="365:13" pos:end="365:40"><expr pos:start="365:13" pos:end="365:39"><name pos:start="365:13" pos:end="365:14">t1</name> <operator pos:start="365:16" pos:end="365:16">=</operator> <call pos:start="365:18" pos:end="365:39"><name pos:start="365:18" pos:end="365:30">tci_read_ri32</name><argument_list pos:start="365:31" pos:end="365:39">(<argument pos:start="365:32" pos:end="365:38"><expr pos:start="365:32" pos:end="365:38"><operator pos:start="365:32" pos:end="365:32">&amp;</operator><name pos:start="365:33" pos:end="365:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="367:13" pos:end="367:40"><expr pos:start="367:13" pos:end="367:39"><name pos:start="367:13" pos:end="367:14">t2</name> <operator pos:start="367:16" pos:end="367:16">=</operator> <call pos:start="367:18" pos:end="367:39"><name pos:start="367:18" pos:end="367:30">tci_read_ri32</name><argument_list pos:start="367:31" pos:end="367:39">(<argument pos:start="367:32" pos:end="367:38"><expr pos:start="367:32" pos:end="367:38"><operator pos:start="367:32" pos:end="367:32">&amp;</operator><name pos:start="367:33" pos:end="367:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="369:13" pos:end="369:59"><expr pos:start="369:13" pos:end="369:58"><call pos:start="369:13" pos:end="369:58"><name pos:start="369:13" pos:end="369:27">tci_write_reg32</name><argument_list pos:start="369:28" pos:end="369:58">(<argument pos:start="369:29" pos:end="369:30"><expr pos:start="369:29" pos:end="369:30"><name pos:start="369:29" pos:end="369:30">t0</name></expr></argument>, <argument pos:start="369:33" pos:end="369:57"><expr pos:start="369:33" pos:end="369:57"><operator pos:start="369:33" pos:end="369:33">(</operator><name pos:start="369:34" pos:end="369:40">int32_t</name><operator pos:start="369:41" pos:end="369:41">)</operator><name pos:start="369:42" pos:end="369:43">t1</name> <operator pos:start="369:45" pos:end="369:45">/</operator> <operator pos:start="369:47" pos:end="369:47">(</operator><name pos:start="369:48" pos:end="369:54">int32_t</name><operator pos:start="369:55" pos:end="369:55">)</operator><name pos:start="369:56" pos:end="369:57">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="371:13" pos:end="371:18">break;</break>

        <case pos:start="373:9" pos:end="373:31">case <expr pos:start="373:14" pos:end="373:30"><name pos:start="373:14" pos:end="373:30">INDEX_op_divu_i32</name></expr>:</case>

            <expr_stmt pos:start="375:13" pos:end="375:27"><expr pos:start="375:13" pos:end="375:26"><name pos:start="375:13" pos:end="375:14">t0</name> <operator pos:start="375:16" pos:end="375:16">=</operator> <operator pos:start="375:18" pos:end="375:18">*</operator><name pos:start="375:19" pos:end="375:24">tb_ptr</name><operator pos:start="375:25" pos:end="375:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="377:13" pos:end="377:40"><expr pos:start="377:13" pos:end="377:39"><name pos:start="377:13" pos:end="377:14">t1</name> <operator pos:start="377:16" pos:end="377:16">=</operator> <call pos:start="377:18" pos:end="377:39"><name pos:start="377:18" pos:end="377:30">tci_read_ri32</name><argument_list pos:start="377:31" pos:end="377:39">(<argument pos:start="377:32" pos:end="377:38"><expr pos:start="377:32" pos:end="377:38"><operator pos:start="377:32" pos:end="377:32">&amp;</operator><name pos:start="377:33" pos:end="377:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="379:13" pos:end="379:40"><expr pos:start="379:13" pos:end="379:39"><name pos:start="379:13" pos:end="379:14">t2</name> <operator pos:start="379:16" pos:end="379:16">=</operator> <call pos:start="379:18" pos:end="379:39"><name pos:start="379:18" pos:end="379:30">tci_read_ri32</name><argument_list pos:start="379:31" pos:end="379:39">(<argument pos:start="379:32" pos:end="379:38"><expr pos:start="379:32" pos:end="379:38"><operator pos:start="379:32" pos:end="379:32">&amp;</operator><name pos:start="379:33" pos:end="379:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="381:13" pos:end="381:41"><expr pos:start="381:13" pos:end="381:40"><call pos:start="381:13" pos:end="381:40"><name pos:start="381:13" pos:end="381:27">tci_write_reg32</name><argument_list pos:start="381:28" pos:end="381:40">(<argument pos:start="381:29" pos:end="381:30"><expr pos:start="381:29" pos:end="381:30"><name pos:start="381:29" pos:end="381:30">t0</name></expr></argument>, <argument pos:start="381:33" pos:end="381:39"><expr pos:start="381:33" pos:end="381:39"><name pos:start="381:33" pos:end="381:34">t1</name> <operator pos:start="381:36" pos:end="381:36">/</operator> <name pos:start="381:38" pos:end="381:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="383:13" pos:end="383:18">break;</break>

        <case pos:start="385:9" pos:end="385:30">case <expr pos:start="385:14" pos:end="385:29"><name pos:start="385:14" pos:end="385:29">INDEX_op_rem_i32</name></expr>:</case>

            <expr_stmt pos:start="387:13" pos:end="387:27"><expr pos:start="387:13" pos:end="387:26"><name pos:start="387:13" pos:end="387:14">t0</name> <operator pos:start="387:16" pos:end="387:16">=</operator> <operator pos:start="387:18" pos:end="387:18">*</operator><name pos:start="387:19" pos:end="387:24">tb_ptr</name><operator pos:start="387:25" pos:end="387:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="389:13" pos:end="389:40"><expr pos:start="389:13" pos:end="389:39"><name pos:start="389:13" pos:end="389:14">t1</name> <operator pos:start="389:16" pos:end="389:16">=</operator> <call pos:start="389:18" pos:end="389:39"><name pos:start="389:18" pos:end="389:30">tci_read_ri32</name><argument_list pos:start="389:31" pos:end="389:39">(<argument pos:start="389:32" pos:end="389:38"><expr pos:start="389:32" pos:end="389:38"><operator pos:start="389:32" pos:end="389:32">&amp;</operator><name pos:start="389:33" pos:end="389:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="391:13" pos:end="391:40"><expr pos:start="391:13" pos:end="391:39"><name pos:start="391:13" pos:end="391:14">t2</name> <operator pos:start="391:16" pos:end="391:16">=</operator> <call pos:start="391:18" pos:end="391:39"><name pos:start="391:18" pos:end="391:30">tci_read_ri32</name><argument_list pos:start="391:31" pos:end="391:39">(<argument pos:start="391:32" pos:end="391:38"><expr pos:start="391:32" pos:end="391:38"><operator pos:start="391:32" pos:end="391:32">&amp;</operator><name pos:start="391:33" pos:end="391:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="393:13" pos:end="393:59"><expr pos:start="393:13" pos:end="393:58"><call pos:start="393:13" pos:end="393:58"><name pos:start="393:13" pos:end="393:27">tci_write_reg32</name><argument_list pos:start="393:28" pos:end="393:58">(<argument pos:start="393:29" pos:end="393:30"><expr pos:start="393:29" pos:end="393:30"><name pos:start="393:29" pos:end="393:30">t0</name></expr></argument>, <argument pos:start="393:33" pos:end="393:57"><expr pos:start="393:33" pos:end="393:57"><operator pos:start="393:33" pos:end="393:33">(</operator><name pos:start="393:34" pos:end="393:40">int32_t</name><operator pos:start="393:41" pos:end="393:41">)</operator><name pos:start="393:42" pos:end="393:43">t1</name> <operator pos:start="393:45" pos:end="393:45">%</operator> <operator pos:start="393:47" pos:end="393:47">(</operator><name pos:start="393:48" pos:end="393:54">int32_t</name><operator pos:start="393:55" pos:end="393:55">)</operator><name pos:start="393:56" pos:end="393:57">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="395:13" pos:end="395:18">break;</break>

        <case pos:start="397:9" pos:end="397:31">case <expr pos:start="397:14" pos:end="397:30"><name pos:start="397:14" pos:end="397:30">INDEX_op_remu_i32</name></expr>:</case>

            <expr_stmt pos:start="399:13" pos:end="399:27"><expr pos:start="399:13" pos:end="399:26"><name pos:start="399:13" pos:end="399:14">t0</name> <operator pos:start="399:16" pos:end="399:16">=</operator> <operator pos:start="399:18" pos:end="399:18">*</operator><name pos:start="399:19" pos:end="399:24">tb_ptr</name><operator pos:start="399:25" pos:end="399:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="401:13" pos:end="401:40"><expr pos:start="401:13" pos:end="401:39"><name pos:start="401:13" pos:end="401:14">t1</name> <operator pos:start="401:16" pos:end="401:16">=</operator> <call pos:start="401:18" pos:end="401:39"><name pos:start="401:18" pos:end="401:30">tci_read_ri32</name><argument_list pos:start="401:31" pos:end="401:39">(<argument pos:start="401:32" pos:end="401:38"><expr pos:start="401:32" pos:end="401:38"><operator pos:start="401:32" pos:end="401:32">&amp;</operator><name pos:start="401:33" pos:end="401:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:40"><expr pos:start="403:13" pos:end="403:39"><name pos:start="403:13" pos:end="403:14">t2</name> <operator pos:start="403:16" pos:end="403:16">=</operator> <call pos:start="403:18" pos:end="403:39"><name pos:start="403:18" pos:end="403:30">tci_read_ri32</name><argument_list pos:start="403:31" pos:end="403:39">(<argument pos:start="403:32" pos:end="403:38"><expr pos:start="403:32" pos:end="403:38"><operator pos:start="403:32" pos:end="403:32">&amp;</operator><name pos:start="403:33" pos:end="403:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="405:13" pos:end="405:41"><expr pos:start="405:13" pos:end="405:40"><call pos:start="405:13" pos:end="405:40"><name pos:start="405:13" pos:end="405:27">tci_write_reg32</name><argument_list pos:start="405:28" pos:end="405:40">(<argument pos:start="405:29" pos:end="405:30"><expr pos:start="405:29" pos:end="405:30"><name pos:start="405:29" pos:end="405:30">t0</name></expr></argument>, <argument pos:start="405:33" pos:end="405:39"><expr pos:start="405:33" pos:end="405:39"><name pos:start="405:33" pos:end="405:34">t1</name> <operator pos:start="405:36" pos:end="405:36">%</operator> <name pos:start="405:38" pos:end="405:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="407:13" pos:end="410:0">break;</break>

<cpp:elif pos:start="409:1" pos:end="409:29">#<cpp:directive pos:start="409:2" pos:end="409:5">elif</cpp:directive> <expr pos:start="409:7" pos:end="409:29"><name pos:start="409:7" pos:end="409:29">TCG_TARGET_HAS_div2_i32</name></expr></cpp:elif>

        <case pos:start="411:9" pos:end="411:31">case <expr pos:start="411:14" pos:end="411:30"><name pos:start="411:14" pos:end="411:30">INDEX_op_div2_i32</name></expr>:</case>

        <case pos:start="413:9" pos:end="413:32">case <expr pos:start="413:14" pos:end="413:31"><name pos:start="413:14" pos:end="413:31">INDEX_op_divu2_i32</name></expr>:</case>

            <expr_stmt pos:start="415:13" pos:end="415:19"><expr pos:start="415:13" pos:end="415:18"><call pos:start="415:13" pos:end="415:18"><name pos:start="415:13" pos:end="415:16">TODO</name><argument_list pos:start="415:17" pos:end="415:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="417:13" pos:end="420:0">break;</break>

<cpp:endif pos:start="419:1" pos:end="419:6">#<cpp:directive pos:start="419:2" pos:end="419:6">endif</cpp:directive></cpp:endif>

        <case pos:start="421:9" pos:end="421:30">case <expr pos:start="421:14" pos:end="421:29"><name pos:start="421:14" pos:end="421:29">INDEX_op_and_i32</name></expr>:</case>

            <expr_stmt pos:start="423:13" pos:end="423:27"><expr pos:start="423:13" pos:end="423:26"><name pos:start="423:13" pos:end="423:14">t0</name> <operator pos:start="423:16" pos:end="423:16">=</operator> <operator pos:start="423:18" pos:end="423:18">*</operator><name pos:start="423:19" pos:end="423:24">tb_ptr</name><operator pos:start="423:25" pos:end="423:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="425:13" pos:end="425:40"><expr pos:start="425:13" pos:end="425:39"><name pos:start="425:13" pos:end="425:14">t1</name> <operator pos:start="425:16" pos:end="425:16">=</operator> <call pos:start="425:18" pos:end="425:39"><name pos:start="425:18" pos:end="425:30">tci_read_ri32</name><argument_list pos:start="425:31" pos:end="425:39">(<argument pos:start="425:32" pos:end="425:38"><expr pos:start="425:32" pos:end="425:38"><operator pos:start="425:32" pos:end="425:32">&amp;</operator><name pos:start="425:33" pos:end="425:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="427:13" pos:end="427:40"><expr pos:start="427:13" pos:end="427:39"><name pos:start="427:13" pos:end="427:14">t2</name> <operator pos:start="427:16" pos:end="427:16">=</operator> <call pos:start="427:18" pos:end="427:39"><name pos:start="427:18" pos:end="427:30">tci_read_ri32</name><argument_list pos:start="427:31" pos:end="427:39">(<argument pos:start="427:32" pos:end="427:38"><expr pos:start="427:32" pos:end="427:38"><operator pos:start="427:32" pos:end="427:32">&amp;</operator><name pos:start="427:33" pos:end="427:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="429:13" pos:end="429:41"><expr pos:start="429:13" pos:end="429:40"><call pos:start="429:13" pos:end="429:40"><name pos:start="429:13" pos:end="429:27">tci_write_reg32</name><argument_list pos:start="429:28" pos:end="429:40">(<argument pos:start="429:29" pos:end="429:30"><expr pos:start="429:29" pos:end="429:30"><name pos:start="429:29" pos:end="429:30">t0</name></expr></argument>, <argument pos:start="429:33" pos:end="429:39"><expr pos:start="429:33" pos:end="429:39"><name pos:start="429:33" pos:end="429:34">t1</name> <operator pos:start="429:36" pos:end="429:36">&amp;</operator> <name pos:start="429:38" pos:end="429:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="431:13" pos:end="431:18">break;</break>

        <case pos:start="433:9" pos:end="433:29">case <expr pos:start="433:14" pos:end="433:28"><name pos:start="433:14" pos:end="433:28">INDEX_op_or_i32</name></expr>:</case>

            <expr_stmt pos:start="435:13" pos:end="435:27"><expr pos:start="435:13" pos:end="435:26"><name pos:start="435:13" pos:end="435:14">t0</name> <operator pos:start="435:16" pos:end="435:16">=</operator> <operator pos:start="435:18" pos:end="435:18">*</operator><name pos:start="435:19" pos:end="435:24">tb_ptr</name><operator pos:start="435:25" pos:end="435:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="437:13" pos:end="437:40"><expr pos:start="437:13" pos:end="437:39"><name pos:start="437:13" pos:end="437:14">t1</name> <operator pos:start="437:16" pos:end="437:16">=</operator> <call pos:start="437:18" pos:end="437:39"><name pos:start="437:18" pos:end="437:30">tci_read_ri32</name><argument_list pos:start="437:31" pos:end="437:39">(<argument pos:start="437:32" pos:end="437:38"><expr pos:start="437:32" pos:end="437:38"><operator pos:start="437:32" pos:end="437:32">&amp;</operator><name pos:start="437:33" pos:end="437:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="439:13" pos:end="439:40"><expr pos:start="439:13" pos:end="439:39"><name pos:start="439:13" pos:end="439:14">t2</name> <operator pos:start="439:16" pos:end="439:16">=</operator> <call pos:start="439:18" pos:end="439:39"><name pos:start="439:18" pos:end="439:30">tci_read_ri32</name><argument_list pos:start="439:31" pos:end="439:39">(<argument pos:start="439:32" pos:end="439:38"><expr pos:start="439:32" pos:end="439:38"><operator pos:start="439:32" pos:end="439:32">&amp;</operator><name pos:start="439:33" pos:end="439:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="441:13" pos:end="441:41"><expr pos:start="441:13" pos:end="441:40"><call pos:start="441:13" pos:end="441:40"><name pos:start="441:13" pos:end="441:27">tci_write_reg32</name><argument_list pos:start="441:28" pos:end="441:40">(<argument pos:start="441:29" pos:end="441:30"><expr pos:start="441:29" pos:end="441:30"><name pos:start="441:29" pos:end="441:30">t0</name></expr></argument>, <argument pos:start="441:33" pos:end="441:39"><expr pos:start="441:33" pos:end="441:39"><name pos:start="441:33" pos:end="441:34">t1</name> <operator pos:start="441:36" pos:end="441:36">|</operator> <name pos:start="441:38" pos:end="441:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="443:13" pos:end="443:18">break;</break>

        <case pos:start="445:9" pos:end="445:30">case <expr pos:start="445:14" pos:end="445:29"><name pos:start="445:14" pos:end="445:29">INDEX_op_xor_i32</name></expr>:</case>

            <expr_stmt pos:start="447:13" pos:end="447:27"><expr pos:start="447:13" pos:end="447:26"><name pos:start="447:13" pos:end="447:14">t0</name> <operator pos:start="447:16" pos:end="447:16">=</operator> <operator pos:start="447:18" pos:end="447:18">*</operator><name pos:start="447:19" pos:end="447:24">tb_ptr</name><operator pos:start="447:25" pos:end="447:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="449:13" pos:end="449:40"><expr pos:start="449:13" pos:end="449:39"><name pos:start="449:13" pos:end="449:14">t1</name> <operator pos:start="449:16" pos:end="449:16">=</operator> <call pos:start="449:18" pos:end="449:39"><name pos:start="449:18" pos:end="449:30">tci_read_ri32</name><argument_list pos:start="449:31" pos:end="449:39">(<argument pos:start="449:32" pos:end="449:38"><expr pos:start="449:32" pos:end="449:38"><operator pos:start="449:32" pos:end="449:32">&amp;</operator><name pos:start="449:33" pos:end="449:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="451:13" pos:end="451:40"><expr pos:start="451:13" pos:end="451:39"><name pos:start="451:13" pos:end="451:14">t2</name> <operator pos:start="451:16" pos:end="451:16">=</operator> <call pos:start="451:18" pos:end="451:39"><name pos:start="451:18" pos:end="451:30">tci_read_ri32</name><argument_list pos:start="451:31" pos:end="451:39">(<argument pos:start="451:32" pos:end="451:38"><expr pos:start="451:32" pos:end="451:38"><operator pos:start="451:32" pos:end="451:32">&amp;</operator><name pos:start="451:33" pos:end="451:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="453:13" pos:end="453:41"><expr pos:start="453:13" pos:end="453:40"><call pos:start="453:13" pos:end="453:40"><name pos:start="453:13" pos:end="453:27">tci_write_reg32</name><argument_list pos:start="453:28" pos:end="453:40">(<argument pos:start="453:29" pos:end="453:30"><expr pos:start="453:29" pos:end="453:30"><name pos:start="453:29" pos:end="453:30">t0</name></expr></argument>, <argument pos:start="453:33" pos:end="453:39"><expr pos:start="453:33" pos:end="453:39"><name pos:start="453:33" pos:end="453:34">t1</name> <operator pos:start="453:36" pos:end="453:36">^</operator> <name pos:start="453:38" pos:end="453:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="455:13" pos:end="455:18">break;</break>



            <comment type="block" pos:start="459:13" pos:end="459:51">/* Shift/rotate operations (32 bit). */</comment>



        <case pos:start="463:9" pos:end="463:30">case <expr pos:start="463:14" pos:end="463:29"><name pos:start="463:14" pos:end="463:29">INDEX_op_shl_i32</name></expr>:</case>

            <expr_stmt pos:start="465:13" pos:end="465:27"><expr pos:start="465:13" pos:end="465:26"><name pos:start="465:13" pos:end="465:14">t0</name> <operator pos:start="465:16" pos:end="465:16">=</operator> <operator pos:start="465:18" pos:end="465:18">*</operator><name pos:start="465:19" pos:end="465:24">tb_ptr</name><operator pos:start="465:25" pos:end="465:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="467:13" pos:end="467:40"><expr pos:start="467:13" pos:end="467:39"><name pos:start="467:13" pos:end="467:14">t1</name> <operator pos:start="467:16" pos:end="467:16">=</operator> <call pos:start="467:18" pos:end="467:39"><name pos:start="467:18" pos:end="467:30">tci_read_ri32</name><argument_list pos:start="467:31" pos:end="467:39">(<argument pos:start="467:32" pos:end="467:38"><expr pos:start="467:32" pos:end="467:38"><operator pos:start="467:32" pos:end="467:32">&amp;</operator><name pos:start="467:33" pos:end="467:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="469:13" pos:end="469:40"><expr pos:start="469:13" pos:end="469:39"><name pos:start="469:13" pos:end="469:14">t2</name> <operator pos:start="469:16" pos:end="469:16">=</operator> <call pos:start="469:18" pos:end="469:39"><name pos:start="469:18" pos:end="469:30">tci_read_ri32</name><argument_list pos:start="469:31" pos:end="469:39">(<argument pos:start="469:32" pos:end="469:38"><expr pos:start="469:32" pos:end="469:38"><operator pos:start="469:32" pos:end="469:32">&amp;</operator><name pos:start="469:33" pos:end="469:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="471:13" pos:end="471:42"><expr pos:start="471:13" pos:end="471:41"><call pos:start="471:13" pos:end="471:41"><name pos:start="471:13" pos:end="471:27">tci_write_reg32</name><argument_list pos:start="471:28" pos:end="471:41">(<argument pos:start="471:29" pos:end="471:30"><expr pos:start="471:29" pos:end="471:30"><name pos:start="471:29" pos:end="471:30">t0</name></expr></argument>, <argument pos:start="471:33" pos:end="471:40"><expr pos:start="471:33" pos:end="471:40"><name pos:start="471:33" pos:end="471:34">t1</name> <operator pos:start="471:36" pos:end="471:37">&lt;&lt;</operator> <name pos:start="471:39" pos:end="471:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="473:13" pos:end="473:18">break;</break>

        <case pos:start="475:9" pos:end="475:30">case <expr pos:start="475:14" pos:end="475:29"><name pos:start="475:14" pos:end="475:29">INDEX_op_shr_i32</name></expr>:</case>

            <expr_stmt pos:start="477:13" pos:end="477:27"><expr pos:start="477:13" pos:end="477:26"><name pos:start="477:13" pos:end="477:14">t0</name> <operator pos:start="477:16" pos:end="477:16">=</operator> <operator pos:start="477:18" pos:end="477:18">*</operator><name pos:start="477:19" pos:end="477:24">tb_ptr</name><operator pos:start="477:25" pos:end="477:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="479:13" pos:end="479:40"><expr pos:start="479:13" pos:end="479:39"><name pos:start="479:13" pos:end="479:14">t1</name> <operator pos:start="479:16" pos:end="479:16">=</operator> <call pos:start="479:18" pos:end="479:39"><name pos:start="479:18" pos:end="479:30">tci_read_ri32</name><argument_list pos:start="479:31" pos:end="479:39">(<argument pos:start="479:32" pos:end="479:38"><expr pos:start="479:32" pos:end="479:38"><operator pos:start="479:32" pos:end="479:32">&amp;</operator><name pos:start="479:33" pos:end="479:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="481:13" pos:end="481:40"><expr pos:start="481:13" pos:end="481:39"><name pos:start="481:13" pos:end="481:14">t2</name> <operator pos:start="481:16" pos:end="481:16">=</operator> <call pos:start="481:18" pos:end="481:39"><name pos:start="481:18" pos:end="481:30">tci_read_ri32</name><argument_list pos:start="481:31" pos:end="481:39">(<argument pos:start="481:32" pos:end="481:38"><expr pos:start="481:32" pos:end="481:38"><operator pos:start="481:32" pos:end="481:32">&amp;</operator><name pos:start="481:33" pos:end="481:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="483:13" pos:end="483:42"><expr pos:start="483:13" pos:end="483:41"><call pos:start="483:13" pos:end="483:41"><name pos:start="483:13" pos:end="483:27">tci_write_reg32</name><argument_list pos:start="483:28" pos:end="483:41">(<argument pos:start="483:29" pos:end="483:30"><expr pos:start="483:29" pos:end="483:30"><name pos:start="483:29" pos:end="483:30">t0</name></expr></argument>, <argument pos:start="483:33" pos:end="483:40"><expr pos:start="483:33" pos:end="483:40"><name pos:start="483:33" pos:end="483:34">t1</name> <operator pos:start="483:36" pos:end="483:37">&gt;&gt;</operator> <name pos:start="483:39" pos:end="483:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="485:13" pos:end="485:18">break;</break>

        <case pos:start="487:9" pos:end="487:30">case <expr pos:start="487:14" pos:end="487:29"><name pos:start="487:14" pos:end="487:29">INDEX_op_sar_i32</name></expr>:</case>

            <expr_stmt pos:start="489:13" pos:end="489:27"><expr pos:start="489:13" pos:end="489:26"><name pos:start="489:13" pos:end="489:14">t0</name> <operator pos:start="489:16" pos:end="489:16">=</operator> <operator pos:start="489:18" pos:end="489:18">*</operator><name pos:start="489:19" pos:end="489:24">tb_ptr</name><operator pos:start="489:25" pos:end="489:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:40"><expr pos:start="491:13" pos:end="491:39"><name pos:start="491:13" pos:end="491:14">t1</name> <operator pos:start="491:16" pos:end="491:16">=</operator> <call pos:start="491:18" pos:end="491:39"><name pos:start="491:18" pos:end="491:30">tci_read_ri32</name><argument_list pos:start="491:31" pos:end="491:39">(<argument pos:start="491:32" pos:end="491:38"><expr pos:start="491:32" pos:end="491:38"><operator pos:start="491:32" pos:end="491:32">&amp;</operator><name pos:start="491:33" pos:end="491:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="493:13" pos:end="493:40"><expr pos:start="493:13" pos:end="493:39"><name pos:start="493:13" pos:end="493:14">t2</name> <operator pos:start="493:16" pos:end="493:16">=</operator> <call pos:start="493:18" pos:end="493:39"><name pos:start="493:18" pos:end="493:30">tci_read_ri32</name><argument_list pos:start="493:31" pos:end="493:39">(<argument pos:start="493:32" pos:end="493:38"><expr pos:start="493:32" pos:end="493:38"><operator pos:start="493:32" pos:end="493:32">&amp;</operator><name pos:start="493:33" pos:end="493:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="495:13" pos:end="495:53"><expr pos:start="495:13" pos:end="495:52"><call pos:start="495:13" pos:end="495:52"><name pos:start="495:13" pos:end="495:27">tci_write_reg32</name><argument_list pos:start="495:28" pos:end="495:52">(<argument pos:start="495:29" pos:end="495:30"><expr pos:start="495:29" pos:end="495:30"><name pos:start="495:29" pos:end="495:30">t0</name></expr></argument>, <argument pos:start="495:33" pos:end="495:51"><expr pos:start="495:33" pos:end="495:51"><operator pos:start="495:33" pos:end="495:33">(</operator><operator pos:start="495:34" pos:end="495:34">(</operator><name pos:start="495:35" pos:end="495:41">int32_t</name><operator pos:start="495:42" pos:end="495:42">)</operator><name pos:start="495:43" pos:end="495:44">t1</name> <operator pos:start="495:46" pos:end="495:47">&gt;&gt;</operator> <name pos:start="495:49" pos:end="495:50">t2</name><operator pos:start="495:51" pos:end="495:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="497:13" pos:end="500:0">break;</break>

<cpp:if pos:start="499:1" pos:end="499:26">#<cpp:directive pos:start="499:2" pos:end="499:3">if</cpp:directive> <expr pos:start="499:5" pos:end="499:26"><name pos:start="499:5" pos:end="499:26">TCG_TARGET_HAS_rot_i32</name></expr></cpp:if>

        <case pos:start="501:9" pos:end="501:31">case <expr pos:start="501:14" pos:end="501:30"><name pos:start="501:14" pos:end="501:30">INDEX_op_rotl_i32</name></expr>:</case>

            <expr_stmt pos:start="503:13" pos:end="503:27"><expr pos:start="503:13" pos:end="503:26"><name pos:start="503:13" pos:end="503:14">t0</name> <operator pos:start="503:16" pos:end="503:16">=</operator> <operator pos:start="503:18" pos:end="503:18">*</operator><name pos:start="503:19" pos:end="503:24">tb_ptr</name><operator pos:start="503:25" pos:end="503:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="505:13" pos:end="505:40"><expr pos:start="505:13" pos:end="505:39"><name pos:start="505:13" pos:end="505:14">t1</name> <operator pos:start="505:16" pos:end="505:16">=</operator> <call pos:start="505:18" pos:end="505:39"><name pos:start="505:18" pos:end="505:30">tci_read_ri32</name><argument_list pos:start="505:31" pos:end="505:39">(<argument pos:start="505:32" pos:end="505:38"><expr pos:start="505:32" pos:end="505:38"><operator pos:start="505:32" pos:end="505:32">&amp;</operator><name pos:start="505:33" pos:end="505:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:40"><expr pos:start="507:13" pos:end="507:39"><name pos:start="507:13" pos:end="507:14">t2</name> <operator pos:start="507:16" pos:end="507:16">=</operator> <call pos:start="507:18" pos:end="507:39"><name pos:start="507:18" pos:end="507:30">tci_read_ri32</name><argument_list pos:start="507:31" pos:end="507:39">(<argument pos:start="507:32" pos:end="507:38"><expr pos:start="507:32" pos:end="507:38"><operator pos:start="507:32" pos:end="507:32">&amp;</operator><name pos:start="507:33" pos:end="507:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="509:13" pos:end="509:47"><expr pos:start="509:13" pos:end="509:46"><call pos:start="509:13" pos:end="509:46"><name pos:start="509:13" pos:end="509:27">tci_write_reg32</name><argument_list pos:start="509:28" pos:end="509:46">(<argument pos:start="509:29" pos:end="509:30"><expr pos:start="509:29" pos:end="509:30"><name pos:start="509:29" pos:end="509:30">t0</name></expr></argument>, <argument pos:start="509:33" pos:end="509:45"><expr pos:start="509:33" pos:end="509:45"><call pos:start="509:33" pos:end="509:45"><name pos:start="509:33" pos:end="509:37">rol32</name><argument_list pos:start="509:38" pos:end="509:45">(<argument pos:start="509:39" pos:end="509:40"><expr pos:start="509:39" pos:end="509:40"><name pos:start="509:39" pos:end="509:40">t1</name></expr></argument>, <argument pos:start="509:43" pos:end="509:44"><expr pos:start="509:43" pos:end="509:44"><name pos:start="509:43" pos:end="509:44">t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="511:13" pos:end="511:18">break;</break>

        <case pos:start="513:9" pos:end="513:31">case <expr pos:start="513:14" pos:end="513:30"><name pos:start="513:14" pos:end="513:30">INDEX_op_rotr_i32</name></expr>:</case>

            <expr_stmt pos:start="515:13" pos:end="515:27"><expr pos:start="515:13" pos:end="515:26"><name pos:start="515:13" pos:end="515:14">t0</name> <operator pos:start="515:16" pos:end="515:16">=</operator> <operator pos:start="515:18" pos:end="515:18">*</operator><name pos:start="515:19" pos:end="515:24">tb_ptr</name><operator pos:start="515:25" pos:end="515:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="517:13" pos:end="517:40"><expr pos:start="517:13" pos:end="517:39"><name pos:start="517:13" pos:end="517:14">t1</name> <operator pos:start="517:16" pos:end="517:16">=</operator> <call pos:start="517:18" pos:end="517:39"><name pos:start="517:18" pos:end="517:30">tci_read_ri32</name><argument_list pos:start="517:31" pos:end="517:39">(<argument pos:start="517:32" pos:end="517:38"><expr pos:start="517:32" pos:end="517:38"><operator pos:start="517:32" pos:end="517:32">&amp;</operator><name pos:start="517:33" pos:end="517:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="519:13" pos:end="519:40"><expr pos:start="519:13" pos:end="519:39"><name pos:start="519:13" pos:end="519:14">t2</name> <operator pos:start="519:16" pos:end="519:16">=</operator> <call pos:start="519:18" pos:end="519:39"><name pos:start="519:18" pos:end="519:30">tci_read_ri32</name><argument_list pos:start="519:31" pos:end="519:39">(<argument pos:start="519:32" pos:end="519:38"><expr pos:start="519:32" pos:end="519:38"><operator pos:start="519:32" pos:end="519:32">&amp;</operator><name pos:start="519:33" pos:end="519:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="521:13" pos:end="521:47"><expr pos:start="521:13" pos:end="521:46"><call pos:start="521:13" pos:end="521:46"><name pos:start="521:13" pos:end="521:27">tci_write_reg32</name><argument_list pos:start="521:28" pos:end="521:46">(<argument pos:start="521:29" pos:end="521:30"><expr pos:start="521:29" pos:end="521:30"><name pos:start="521:29" pos:end="521:30">t0</name></expr></argument>, <argument pos:start="521:33" pos:end="521:45"><expr pos:start="521:33" pos:end="521:45"><call pos:start="521:33" pos:end="521:45"><name pos:start="521:33" pos:end="521:37">ror32</name><argument_list pos:start="521:38" pos:end="521:45">(<argument pos:start="521:39" pos:end="521:40"><expr pos:start="521:39" pos:end="521:40"><name pos:start="521:39" pos:end="521:40">t1</name></expr></argument>, <argument pos:start="521:43" pos:end="521:44"><expr pos:start="521:43" pos:end="521:44"><name pos:start="521:43" pos:end="521:44">t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="523:13" pos:end="528:0">break;</break>

<cpp:endif pos:start="525:1" pos:end="525:6">#<cpp:directive pos:start="525:2" pos:end="525:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="527:1" pos:end="527:30">#<cpp:directive pos:start="527:2" pos:end="527:3">if</cpp:directive> <expr pos:start="527:5" pos:end="527:30"><name pos:start="527:5" pos:end="527:30">TCG_TARGET_HAS_deposit_i32</name></expr></cpp:if>

        <case pos:start="529:9" pos:end="529:34">case <expr pos:start="529:14" pos:end="529:33"><name pos:start="529:14" pos:end="529:33">INDEX_op_deposit_i32</name></expr>:</case>

            <expr_stmt pos:start="531:13" pos:end="531:27"><expr pos:start="531:13" pos:end="531:26"><name pos:start="531:13" pos:end="531:14">t0</name> <operator pos:start="531:16" pos:end="531:16">=</operator> <operator pos:start="531:18" pos:end="531:18">*</operator><name pos:start="531:19" pos:end="531:24">tb_ptr</name><operator pos:start="531:25" pos:end="531:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="533:13" pos:end="533:39"><expr pos:start="533:13" pos:end="533:38"><name pos:start="533:13" pos:end="533:14">t1</name> <operator pos:start="533:16" pos:end="533:16">=</operator> <call pos:start="533:18" pos:end="533:38"><name pos:start="533:18" pos:end="533:29">tci_read_r32</name><argument_list pos:start="533:30" pos:end="533:38">(<argument pos:start="533:31" pos:end="533:37"><expr pos:start="533:31" pos:end="533:37"><operator pos:start="533:31" pos:end="533:31">&amp;</operator><name pos:start="533:32" pos:end="533:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="535:13" pos:end="535:39"><expr pos:start="535:13" pos:end="535:38"><name pos:start="535:13" pos:end="535:14">t2</name> <operator pos:start="535:16" pos:end="535:16">=</operator> <call pos:start="535:18" pos:end="535:38"><name pos:start="535:18" pos:end="535:29">tci_read_r32</name><argument_list pos:start="535:30" pos:end="535:38">(<argument pos:start="535:31" pos:end="535:37"><expr pos:start="535:31" pos:end="535:37"><operator pos:start="535:31" pos:end="535:31">&amp;</operator><name pos:start="535:32" pos:end="535:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="537:13" pos:end="537:30"><expr pos:start="537:13" pos:end="537:29"><name pos:start="537:13" pos:end="537:17">tmp16</name> <operator pos:start="537:19" pos:end="537:19">=</operator> <operator pos:start="537:21" pos:end="537:21">*</operator><name pos:start="537:22" pos:end="537:27">tb_ptr</name><operator pos:start="537:28" pos:end="537:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="539:13" pos:end="539:29"><expr pos:start="539:13" pos:end="539:28"><name pos:start="539:13" pos:end="539:16">tmp8</name> <operator pos:start="539:18" pos:end="539:18">=</operator> <operator pos:start="539:20" pos:end="539:20">*</operator><name pos:start="539:21" pos:end="539:26">tb_ptr</name><operator pos:start="539:27" pos:end="539:28">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="541:13" pos:end="541:49"><expr pos:start="541:13" pos:end="541:48"><name pos:start="541:13" pos:end="541:17">tmp32</name> <operator pos:start="541:19" pos:end="541:19">=</operator> <operator pos:start="541:21" pos:end="541:21">(</operator><operator pos:start="541:22" pos:end="541:22">(</operator><operator pos:start="541:23" pos:end="541:23">(</operator><literal type="number" pos:start="541:24" pos:end="541:24">1</literal> <operator pos:start="541:26" pos:end="541:27">&lt;&lt;</operator> <name pos:start="541:29" pos:end="541:32">tmp8</name><operator pos:start="541:33" pos:end="541:33">)</operator> <operator pos:start="541:35" pos:end="541:35">-</operator> <literal type="number" pos:start="541:37" pos:end="541:37">1</literal><operator pos:start="541:38" pos:end="541:38">)</operator> <operator pos:start="541:40" pos:end="541:41">&lt;&lt;</operator> <name pos:start="541:43" pos:end="541:47">tmp16</name><operator pos:start="541:48" pos:end="541:48">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="543:13" pos:end="543:73"><expr pos:start="543:13" pos:end="543:72"><call pos:start="543:13" pos:end="543:72"><name pos:start="543:13" pos:end="543:27">tci_write_reg32</name><argument_list pos:start="543:28" pos:end="543:72">(<argument pos:start="543:29" pos:end="543:30"><expr pos:start="543:29" pos:end="543:30"><name pos:start="543:29" pos:end="543:30">t0</name></expr></argument>, <argument pos:start="543:33" pos:end="543:71"><expr pos:start="543:33" pos:end="543:71"><operator pos:start="543:33" pos:end="543:33">(</operator><name pos:start="543:34" pos:end="543:35">t1</name> <operator pos:start="543:37" pos:end="543:37">&amp;</operator> <operator pos:start="543:39" pos:end="543:39">~</operator><name pos:start="543:40" pos:end="543:44">tmp32</name><operator pos:start="543:45" pos:end="543:45">)</operator> <operator pos:start="543:47" pos:end="543:47">|</operator> <operator pos:start="543:49" pos:end="543:49">(</operator><operator pos:start="543:50" pos:end="543:50">(</operator><name pos:start="543:51" pos:end="543:52">t2</name> <operator pos:start="543:54" pos:end="543:55">&lt;&lt;</operator> <name pos:start="543:57" pos:end="543:61">tmp16</name><operator pos:start="543:62" pos:end="543:62">)</operator> <operator pos:start="543:64" pos:end="543:64">&amp;</operator> <name pos:start="543:66" pos:end="543:70">tmp32</name><operator pos:start="543:71" pos:end="543:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="545:13" pos:end="548:0">break;</break>

<cpp:endif pos:start="547:1" pos:end="547:6">#<cpp:directive pos:start="547:2" pos:end="547:6">endif</cpp:directive></cpp:endif>

        <case pos:start="549:9" pos:end="549:33">case <expr pos:start="549:14" pos:end="549:32"><name pos:start="549:14" pos:end="549:32">INDEX_op_brcond_i32</name></expr>:</case>

            <expr_stmt pos:start="551:13" pos:end="551:39"><expr pos:start="551:13" pos:end="551:38"><name pos:start="551:13" pos:end="551:14">t0</name> <operator pos:start="551:16" pos:end="551:16">=</operator> <call pos:start="551:18" pos:end="551:38"><name pos:start="551:18" pos:end="551:29">tci_read_r32</name><argument_list pos:start="551:30" pos:end="551:38">(<argument pos:start="551:31" pos:end="551:37"><expr pos:start="551:31" pos:end="551:37"><operator pos:start="551:31" pos:end="551:31">&amp;</operator><name pos:start="551:32" pos:end="551:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="553:13" pos:end="553:40"><expr pos:start="553:13" pos:end="553:39"><name pos:start="553:13" pos:end="553:14">t1</name> <operator pos:start="553:16" pos:end="553:16">=</operator> <call pos:start="553:18" pos:end="553:39"><name pos:start="553:18" pos:end="553:30">tci_read_ri32</name><argument_list pos:start="553:31" pos:end="553:39">(<argument pos:start="553:32" pos:end="553:38"><expr pos:start="553:32" pos:end="553:38"><operator pos:start="553:32" pos:end="553:32">&amp;</operator><name pos:start="553:33" pos:end="553:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="555:13" pos:end="555:34"><expr pos:start="555:13" pos:end="555:33"><name pos:start="555:13" pos:end="555:21">condition</name> <operator pos:start="555:23" pos:end="555:23">=</operator> <operator pos:start="555:25" pos:end="555:25">*</operator><name pos:start="555:26" pos:end="555:31">tb_ptr</name><operator pos:start="555:32" pos:end="555:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="557:13" pos:end="557:44"><expr pos:start="557:13" pos:end="557:43"><name pos:start="557:13" pos:end="557:17">label</name> <operator pos:start="557:19" pos:end="557:19">=</operator> <call pos:start="557:21" pos:end="557:43"><name pos:start="557:21" pos:end="557:34">tci_read_label</name><argument_list pos:start="557:35" pos:end="557:43">(<argument pos:start="557:36" pos:end="557:42"><expr pos:start="557:36" pos:end="557:42"><operator pos:start="557:36" pos:end="557:36">&amp;</operator><name pos:start="557:37" pos:end="557:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="559:13" pos:end="567:13"><if pos:start="559:13" pos:end="567:13">if <condition pos:start="559:16" pos:end="559:49">(<expr pos:start="559:17" pos:end="559:48"><call pos:start="559:17" pos:end="559:48"><name pos:start="559:17" pos:end="559:29">tci_compare32</name><argument_list pos:start="559:30" pos:end="559:48">(<argument pos:start="559:31" pos:end="559:32"><expr pos:start="559:31" pos:end="559:32"><name pos:start="559:31" pos:end="559:32">t0</name></expr></argument>, <argument pos:start="559:35" pos:end="559:36"><expr pos:start="559:35" pos:end="559:36"><name pos:start="559:35" pos:end="559:36">t1</name></expr></argument>, <argument pos:start="559:39" pos:end="559:47"><expr pos:start="559:39" pos:end="559:47"><name pos:start="559:39" pos:end="559:47">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="559:51" pos:end="567:13">{<block_content pos:start="561:17" pos:end="565:25">

                <expr_stmt pos:start="561:17" pos:end="561:57"><expr pos:start="561:17" pos:end="561:56"><call pos:start="561:17" pos:end="561:56"><name pos:start="561:17" pos:end="561:22">assert</name><argument_list pos:start="561:23" pos:end="561:56">(<argument pos:start="561:24" pos:end="561:55"><expr pos:start="561:24" pos:end="561:55"><name pos:start="561:24" pos:end="561:29">tb_ptr</name> <operator pos:start="561:31" pos:end="561:32">==</operator> <name pos:start="561:34" pos:end="561:45">old_code_ptr</name> <operator pos:start="561:47" pos:end="561:47">+</operator> <name pos:start="561:49" pos:end="561:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="563:17" pos:end="563:42"><expr pos:start="563:17" pos:end="563:41"><name pos:start="563:17" pos:end="563:22">tb_ptr</name> <operator pos:start="563:24" pos:end="563:24">=</operator> <operator pos:start="563:26" pos:end="563:26">(</operator><name pos:start="563:27" pos:end="563:33">uint8_t</name> <operator pos:start="563:35" pos:end="563:35">*</operator><operator pos:start="563:36" pos:end="563:36">)</operator><name pos:start="563:37" pos:end="563:41">label</name></expr>;</expr_stmt>

                <continue pos:start="565:17" pos:end="565:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="569:13" pos:end="572:0">break;</break>

<cpp:if pos:start="571:1" pos:end="571:29">#<cpp:directive pos:start="571:2" pos:end="571:3">if</cpp:directive> <expr pos:start="571:5" pos:end="571:29"><name pos:start="571:5" pos:end="571:23">TCG_TARGET_REG_BITS</name> <operator pos:start="571:25" pos:end="571:26">==</operator> <literal type="number" pos:start="571:28" pos:end="571:29">32</literal></expr></cpp:if>

        <case pos:start="573:9" pos:end="573:31">case <expr pos:start="573:14" pos:end="573:30"><name pos:start="573:14" pos:end="573:30">INDEX_op_add2_i32</name></expr>:</case>

            <expr_stmt pos:start="575:13" pos:end="575:27"><expr pos:start="575:13" pos:end="575:26"><name pos:start="575:13" pos:end="575:14">t0</name> <operator pos:start="575:16" pos:end="575:16">=</operator> <operator pos:start="575:18" pos:end="575:18">*</operator><name pos:start="575:19" pos:end="575:24">tb_ptr</name><operator pos:start="575:25" pos:end="575:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="577:13" pos:end="577:27"><expr pos:start="577:13" pos:end="577:26"><name pos:start="577:13" pos:end="577:14">t1</name> <operator pos:start="577:16" pos:end="577:16">=</operator> <operator pos:start="577:18" pos:end="577:18">*</operator><name pos:start="577:19" pos:end="577:24">tb_ptr</name><operator pos:start="577:25" pos:end="577:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="579:13" pos:end="579:42"><expr pos:start="579:13" pos:end="579:41"><name pos:start="579:13" pos:end="579:17">tmp64</name> <operator pos:start="579:19" pos:end="579:19">=</operator> <call pos:start="579:21" pos:end="579:41"><name pos:start="579:21" pos:end="579:32">tci_read_r64</name><argument_list pos:start="579:33" pos:end="579:41">(<argument pos:start="579:34" pos:end="579:40"><expr pos:start="579:34" pos:end="579:40"><operator pos:start="579:34" pos:end="579:34">&amp;</operator><name pos:start="579:35" pos:end="579:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="581:13" pos:end="581:43"><expr pos:start="581:13" pos:end="581:42"><name pos:start="581:13" pos:end="581:17">tmp64</name> <operator pos:start="581:19" pos:end="581:20">+=</operator> <call pos:start="581:22" pos:end="581:42"><name pos:start="581:22" pos:end="581:33">tci_read_r64</name><argument_list pos:start="581:34" pos:end="581:42">(<argument pos:start="581:35" pos:end="581:41"><expr pos:start="581:35" pos:end="581:41"><operator pos:start="581:35" pos:end="581:35">&amp;</operator><name pos:start="581:36" pos:end="581:41">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="583:13" pos:end="583:43"><expr pos:start="583:13" pos:end="583:42"><call pos:start="583:13" pos:end="583:42"><name pos:start="583:13" pos:end="583:27">tci_write_reg64</name><argument_list pos:start="583:28" pos:end="583:42">(<argument pos:start="583:29" pos:end="583:30"><expr pos:start="583:29" pos:end="583:30"><name pos:start="583:29" pos:end="583:30">t1</name></expr></argument>, <argument pos:start="583:33" pos:end="583:34"><expr pos:start="583:33" pos:end="583:34"><name pos:start="583:33" pos:end="583:34">t0</name></expr></argument>, <argument pos:start="583:37" pos:end="583:41"><expr pos:start="583:37" pos:end="583:41"><name pos:start="583:37" pos:end="583:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="585:13" pos:end="585:18">break;</break>

        <case pos:start="587:9" pos:end="587:31">case <expr pos:start="587:14" pos:end="587:30"><name pos:start="587:14" pos:end="587:30">INDEX_op_sub2_i32</name></expr>:</case>

            <expr_stmt pos:start="589:13" pos:end="589:27"><expr pos:start="589:13" pos:end="589:26"><name pos:start="589:13" pos:end="589:14">t0</name> <operator pos:start="589:16" pos:end="589:16">=</operator> <operator pos:start="589:18" pos:end="589:18">*</operator><name pos:start="589:19" pos:end="589:24">tb_ptr</name><operator pos:start="589:25" pos:end="589:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="591:13" pos:end="591:27"><expr pos:start="591:13" pos:end="591:26"><name pos:start="591:13" pos:end="591:14">t1</name> <operator pos:start="591:16" pos:end="591:16">=</operator> <operator pos:start="591:18" pos:end="591:18">*</operator><name pos:start="591:19" pos:end="591:24">tb_ptr</name><operator pos:start="591:25" pos:end="591:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="593:13" pos:end="593:42"><expr pos:start="593:13" pos:end="593:41"><name pos:start="593:13" pos:end="593:17">tmp64</name> <operator pos:start="593:19" pos:end="593:19">=</operator> <call pos:start="593:21" pos:end="593:41"><name pos:start="593:21" pos:end="593:32">tci_read_r64</name><argument_list pos:start="593:33" pos:end="593:41">(<argument pos:start="593:34" pos:end="593:40"><expr pos:start="593:34" pos:end="593:40"><operator pos:start="593:34" pos:end="593:34">&amp;</operator><name pos:start="593:35" pos:end="593:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="595:13" pos:end="595:43"><expr pos:start="595:13" pos:end="595:42"><name pos:start="595:13" pos:end="595:17">tmp64</name> <operator pos:start="595:19" pos:end="595:20">-=</operator> <call pos:start="595:22" pos:end="595:42"><name pos:start="595:22" pos:end="595:33">tci_read_r64</name><argument_list pos:start="595:34" pos:end="595:42">(<argument pos:start="595:35" pos:end="595:41"><expr pos:start="595:35" pos:end="595:41"><operator pos:start="595:35" pos:end="595:35">&amp;</operator><name pos:start="595:36" pos:end="595:41">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="597:13" pos:end="597:43"><expr pos:start="597:13" pos:end="597:42"><call pos:start="597:13" pos:end="597:42"><name pos:start="597:13" pos:end="597:27">tci_write_reg64</name><argument_list pos:start="597:28" pos:end="597:42">(<argument pos:start="597:29" pos:end="597:30"><expr pos:start="597:29" pos:end="597:30"><name pos:start="597:29" pos:end="597:30">t1</name></expr></argument>, <argument pos:start="597:33" pos:end="597:34"><expr pos:start="597:33" pos:end="597:34"><name pos:start="597:33" pos:end="597:34">t0</name></expr></argument>, <argument pos:start="597:37" pos:end="597:41"><expr pos:start="597:37" pos:end="597:41"><name pos:start="597:37" pos:end="597:41">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="599:13" pos:end="599:18">break;</break>

        <case pos:start="601:9" pos:end="601:34">case <expr pos:start="601:14" pos:end="601:33"><name pos:start="601:14" pos:end="601:33">INDEX_op_brcond2_i32</name></expr>:</case>

            <expr_stmt pos:start="603:13" pos:end="603:42"><expr pos:start="603:13" pos:end="603:41"><name pos:start="603:13" pos:end="603:17">tmp64</name> <operator pos:start="603:19" pos:end="603:19">=</operator> <call pos:start="603:21" pos:end="603:41"><name pos:start="603:21" pos:end="603:32">tci_read_r64</name><argument_list pos:start="603:33" pos:end="603:41">(<argument pos:start="603:34" pos:end="603:40"><expr pos:start="603:34" pos:end="603:40"><operator pos:start="603:34" pos:end="603:34">&amp;</operator><name pos:start="603:35" pos:end="603:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="605:13" pos:end="605:41"><expr pos:start="605:13" pos:end="605:40"><name pos:start="605:13" pos:end="605:15">v64</name> <operator pos:start="605:17" pos:end="605:17">=</operator> <call pos:start="605:19" pos:end="605:40"><name pos:start="605:19" pos:end="605:31">tci_read_ri64</name><argument_list pos:start="605:32" pos:end="605:40">(<argument pos:start="605:33" pos:end="605:39"><expr pos:start="605:33" pos:end="605:39"><operator pos:start="605:33" pos:end="605:33">&amp;</operator><name pos:start="605:34" pos:end="605:39">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="607:13" pos:end="607:34"><expr pos:start="607:13" pos:end="607:33"><name pos:start="607:13" pos:end="607:21">condition</name> <operator pos:start="607:23" pos:end="607:23">=</operator> <operator pos:start="607:25" pos:end="607:25">*</operator><name pos:start="607:26" pos:end="607:31">tb_ptr</name><operator pos:start="607:32" pos:end="607:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="609:13" pos:end="609:44"><expr pos:start="609:13" pos:end="609:43"><name pos:start="609:13" pos:end="609:17">label</name> <operator pos:start="609:19" pos:end="609:19">=</operator> <call pos:start="609:21" pos:end="609:43"><name pos:start="609:21" pos:end="609:34">tci_read_label</name><argument_list pos:start="609:35" pos:end="609:43">(<argument pos:start="609:36" pos:end="609:42"><expr pos:start="609:36" pos:end="609:42"><operator pos:start="609:36" pos:end="609:36">&amp;</operator><name pos:start="609:37" pos:end="609:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="611:13" pos:end="619:13"><if pos:start="611:13" pos:end="619:13">if <condition pos:start="611:16" pos:end="611:53">(<expr pos:start="611:17" pos:end="611:52"><call pos:start="611:17" pos:end="611:52"><name pos:start="611:17" pos:end="611:29">tci_compare64</name><argument_list pos:start="611:30" pos:end="611:52">(<argument pos:start="611:31" pos:end="611:35"><expr pos:start="611:31" pos:end="611:35"><name pos:start="611:31" pos:end="611:35">tmp64</name></expr></argument>, <argument pos:start="611:38" pos:end="611:40"><expr pos:start="611:38" pos:end="611:40"><name pos:start="611:38" pos:end="611:40">v64</name></expr></argument>, <argument pos:start="611:43" pos:end="611:51"><expr pos:start="611:43" pos:end="611:51"><name pos:start="611:43" pos:end="611:51">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="611:55" pos:end="619:13">{<block_content pos:start="613:17" pos:end="617:25">

                <expr_stmt pos:start="613:17" pos:end="613:57"><expr pos:start="613:17" pos:end="613:56"><call pos:start="613:17" pos:end="613:56"><name pos:start="613:17" pos:end="613:22">assert</name><argument_list pos:start="613:23" pos:end="613:56">(<argument pos:start="613:24" pos:end="613:55"><expr pos:start="613:24" pos:end="613:55"><name pos:start="613:24" pos:end="613:29">tb_ptr</name> <operator pos:start="613:31" pos:end="613:32">==</operator> <name pos:start="613:34" pos:end="613:45">old_code_ptr</name> <operator pos:start="613:47" pos:end="613:47">+</operator> <name pos:start="613:49" pos:end="613:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="615:17" pos:end="615:42"><expr pos:start="615:17" pos:end="615:41"><name pos:start="615:17" pos:end="615:22">tb_ptr</name> <operator pos:start="615:24" pos:end="615:24">=</operator> <operator pos:start="615:26" pos:end="615:26">(</operator><name pos:start="615:27" pos:end="615:33">uint8_t</name> <operator pos:start="615:35" pos:end="615:35">*</operator><operator pos:start="615:36" pos:end="615:36">)</operator><name pos:start="615:37" pos:end="615:41">label</name></expr>;</expr_stmt>

                <continue pos:start="617:17" pos:end="617:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="621:13" pos:end="621:18">break;</break>

        <case pos:start="623:9" pos:end="623:32">case <expr pos:start="623:14" pos:end="623:31"><name pos:start="623:14" pos:end="623:31">INDEX_op_mulu2_i32</name></expr>:</case>

            <expr_stmt pos:start="625:13" pos:end="625:27"><expr pos:start="625:13" pos:end="625:26"><name pos:start="625:13" pos:end="625:14">t0</name> <operator pos:start="625:16" pos:end="625:16">=</operator> <operator pos:start="625:18" pos:end="625:18">*</operator><name pos:start="625:19" pos:end="625:24">tb_ptr</name><operator pos:start="625:25" pos:end="625:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="627:13" pos:end="627:27"><expr pos:start="627:13" pos:end="627:26"><name pos:start="627:13" pos:end="627:14">t1</name> <operator pos:start="627:16" pos:end="627:16">=</operator> <operator pos:start="627:18" pos:end="627:18">*</operator><name pos:start="627:19" pos:end="627:24">tb_ptr</name><operator pos:start="627:25" pos:end="627:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="629:13" pos:end="629:39"><expr pos:start="629:13" pos:end="629:38"><name pos:start="629:13" pos:end="629:14">t2</name> <operator pos:start="629:16" pos:end="629:16">=</operator> <call pos:start="629:18" pos:end="629:38"><name pos:start="629:18" pos:end="629:29">tci_read_r32</name><argument_list pos:start="629:30" pos:end="629:38">(<argument pos:start="629:31" pos:end="629:37"><expr pos:start="629:31" pos:end="629:37"><operator pos:start="629:31" pos:end="629:31">&amp;</operator><name pos:start="629:32" pos:end="629:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="631:13" pos:end="631:42"><expr pos:start="631:13" pos:end="631:41"><name pos:start="631:13" pos:end="631:17">tmp64</name> <operator pos:start="631:19" pos:end="631:19">=</operator> <call pos:start="631:21" pos:end="631:41"><name pos:start="631:21" pos:end="631:32">tci_read_r32</name><argument_list pos:start="631:33" pos:end="631:41">(<argument pos:start="631:34" pos:end="631:40"><expr pos:start="631:34" pos:end="631:40"><operator pos:start="631:34" pos:end="631:34">&amp;</operator><name pos:start="631:35" pos:end="631:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="633:13" pos:end="633:48"><expr pos:start="633:13" pos:end="633:47"><call pos:start="633:13" pos:end="633:47"><name pos:start="633:13" pos:end="633:27">tci_write_reg64</name><argument_list pos:start="633:28" pos:end="633:47">(<argument pos:start="633:29" pos:end="633:30"><expr pos:start="633:29" pos:end="633:30"><name pos:start="633:29" pos:end="633:30">t1</name></expr></argument>, <argument pos:start="633:33" pos:end="633:34"><expr pos:start="633:33" pos:end="633:34"><name pos:start="633:33" pos:end="633:34">t0</name></expr></argument>, <argument pos:start="633:37" pos:end="633:46"><expr pos:start="633:37" pos:end="633:46"><name pos:start="633:37" pos:end="633:38">t2</name> <operator pos:start="633:40" pos:end="633:40">*</operator> <name pos:start="633:42" pos:end="633:46">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="635:13" pos:end="640:0">break;</break>

<cpp:endif pos:start="637:1" pos:end="637:6">#<cpp:directive pos:start="637:2" pos:end="637:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="637:8" pos:end="637:38">/* TCG_TARGET_REG_BITS == 32 */</comment>

<cpp:if pos:start="639:1" pos:end="639:28">#<cpp:directive pos:start="639:2" pos:end="639:3">if</cpp:directive> <expr pos:start="639:5" pos:end="639:28"><name pos:start="639:5" pos:end="639:28">TCG_TARGET_HAS_ext8s_i32</name></expr></cpp:if>

        <case pos:start="641:9" pos:end="641:32">case <expr pos:start="641:14" pos:end="641:31"><name pos:start="641:14" pos:end="641:31">INDEX_op_ext8s_i32</name></expr>:</case>

            <expr_stmt pos:start="643:13" pos:end="643:27"><expr pos:start="643:13" pos:end="643:26"><name pos:start="643:13" pos:end="643:14">t0</name> <operator pos:start="643:16" pos:end="643:16">=</operator> <operator pos:start="643:18" pos:end="643:18">*</operator><name pos:start="643:19" pos:end="643:24">tb_ptr</name><operator pos:start="643:25" pos:end="643:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="645:13" pos:end="645:39"><expr pos:start="645:13" pos:end="645:38"><name pos:start="645:13" pos:end="645:14">t1</name> <operator pos:start="645:16" pos:end="645:16">=</operator> <call pos:start="645:18" pos:end="645:38"><name pos:start="645:18" pos:end="645:29">tci_read_r8s</name><argument_list pos:start="645:30" pos:end="645:38">(<argument pos:start="645:31" pos:end="645:37"><expr pos:start="645:31" pos:end="645:37"><operator pos:start="645:31" pos:end="645:31">&amp;</operator><name pos:start="645:32" pos:end="645:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="647:13" pos:end="647:36"><expr pos:start="647:13" pos:end="647:35"><call pos:start="647:13" pos:end="647:35"><name pos:start="647:13" pos:end="647:27">tci_write_reg32</name><argument_list pos:start="647:28" pos:end="647:35">(<argument pos:start="647:29" pos:end="647:30"><expr pos:start="647:29" pos:end="647:30"><name pos:start="647:29" pos:end="647:30">t0</name></expr></argument>, <argument pos:start="647:33" pos:end="647:34"><expr pos:start="647:33" pos:end="647:34"><name pos:start="647:33" pos:end="647:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="649:13" pos:end="654:0">break;</break>

<cpp:endif pos:start="651:1" pos:end="651:6">#<cpp:directive pos:start="651:2" pos:end="651:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="653:1" pos:end="653:29">#<cpp:directive pos:start="653:2" pos:end="653:3">if</cpp:directive> <expr pos:start="653:5" pos:end="653:29"><name pos:start="653:5" pos:end="653:29">TCG_TARGET_HAS_ext16s_i32</name></expr></cpp:if>

        <case pos:start="655:9" pos:end="655:33">case <expr pos:start="655:14" pos:end="655:32"><name pos:start="655:14" pos:end="655:32">INDEX_op_ext16s_i32</name></expr>:</case>

            <expr_stmt pos:start="657:13" pos:end="657:27"><expr pos:start="657:13" pos:end="657:26"><name pos:start="657:13" pos:end="657:14">t0</name> <operator pos:start="657:16" pos:end="657:16">=</operator> <operator pos:start="657:18" pos:end="657:18">*</operator><name pos:start="657:19" pos:end="657:24">tb_ptr</name><operator pos:start="657:25" pos:end="657:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="659:13" pos:end="659:40"><expr pos:start="659:13" pos:end="659:39"><name pos:start="659:13" pos:end="659:14">t1</name> <operator pos:start="659:16" pos:end="659:16">=</operator> <call pos:start="659:18" pos:end="659:39"><name pos:start="659:18" pos:end="659:30">tci_read_r16s</name><argument_list pos:start="659:31" pos:end="659:39">(<argument pos:start="659:32" pos:end="659:38"><expr pos:start="659:32" pos:end="659:38"><operator pos:start="659:32" pos:end="659:32">&amp;</operator><name pos:start="659:33" pos:end="659:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="661:13" pos:end="661:36"><expr pos:start="661:13" pos:end="661:35"><call pos:start="661:13" pos:end="661:35"><name pos:start="661:13" pos:end="661:27">tci_write_reg32</name><argument_list pos:start="661:28" pos:end="661:35">(<argument pos:start="661:29" pos:end="661:30"><expr pos:start="661:29" pos:end="661:30"><name pos:start="661:29" pos:end="661:30">t0</name></expr></argument>, <argument pos:start="661:33" pos:end="661:34"><expr pos:start="661:33" pos:end="661:34"><name pos:start="661:33" pos:end="661:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="663:13" pos:end="668:0">break;</break>

<cpp:endif pos:start="665:1" pos:end="665:6">#<cpp:directive pos:start="665:2" pos:end="665:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="667:1" pos:end="667:28">#<cpp:directive pos:start="667:2" pos:end="667:3">if</cpp:directive> <expr pos:start="667:5" pos:end="667:28"><name pos:start="667:5" pos:end="667:28">TCG_TARGET_HAS_ext8u_i32</name></expr></cpp:if>

        <case pos:start="669:9" pos:end="669:32">case <expr pos:start="669:14" pos:end="669:31"><name pos:start="669:14" pos:end="669:31">INDEX_op_ext8u_i32</name></expr>:</case>

            <expr_stmt pos:start="671:13" pos:end="671:27"><expr pos:start="671:13" pos:end="671:26"><name pos:start="671:13" pos:end="671:14">t0</name> <operator pos:start="671:16" pos:end="671:16">=</operator> <operator pos:start="671:18" pos:end="671:18">*</operator><name pos:start="671:19" pos:end="671:24">tb_ptr</name><operator pos:start="671:25" pos:end="671:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="673:13" pos:end="673:38"><expr pos:start="673:13" pos:end="673:37"><name pos:start="673:13" pos:end="673:14">t1</name> <operator pos:start="673:16" pos:end="673:16">=</operator> <call pos:start="673:18" pos:end="673:37"><name pos:start="673:18" pos:end="673:28">tci_read_r8</name><argument_list pos:start="673:29" pos:end="673:37">(<argument pos:start="673:30" pos:end="673:36"><expr pos:start="673:30" pos:end="673:36"><operator pos:start="673:30" pos:end="673:30">&amp;</operator><name pos:start="673:31" pos:end="673:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="675:13" pos:end="675:36"><expr pos:start="675:13" pos:end="675:35"><call pos:start="675:13" pos:end="675:35"><name pos:start="675:13" pos:end="675:27">tci_write_reg32</name><argument_list pos:start="675:28" pos:end="675:35">(<argument pos:start="675:29" pos:end="675:30"><expr pos:start="675:29" pos:end="675:30"><name pos:start="675:29" pos:end="675:30">t0</name></expr></argument>, <argument pos:start="675:33" pos:end="675:34"><expr pos:start="675:33" pos:end="675:34"><name pos:start="675:33" pos:end="675:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="677:13" pos:end="682:0">break;</break>

<cpp:endif pos:start="679:1" pos:end="679:6">#<cpp:directive pos:start="679:2" pos:end="679:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="681:1" pos:end="681:29">#<cpp:directive pos:start="681:2" pos:end="681:3">if</cpp:directive> <expr pos:start="681:5" pos:end="681:29"><name pos:start="681:5" pos:end="681:29">TCG_TARGET_HAS_ext16u_i32</name></expr></cpp:if>

        <case pos:start="683:9" pos:end="683:33">case <expr pos:start="683:14" pos:end="683:32"><name pos:start="683:14" pos:end="683:32">INDEX_op_ext16u_i32</name></expr>:</case>

            <expr_stmt pos:start="685:13" pos:end="685:27"><expr pos:start="685:13" pos:end="685:26"><name pos:start="685:13" pos:end="685:14">t0</name> <operator pos:start="685:16" pos:end="685:16">=</operator> <operator pos:start="685:18" pos:end="685:18">*</operator><name pos:start="685:19" pos:end="685:24">tb_ptr</name><operator pos:start="685:25" pos:end="685:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="687:13" pos:end="687:39"><expr pos:start="687:13" pos:end="687:38"><name pos:start="687:13" pos:end="687:14">t1</name> <operator pos:start="687:16" pos:end="687:16">=</operator> <call pos:start="687:18" pos:end="687:38"><name pos:start="687:18" pos:end="687:29">tci_read_r16</name><argument_list pos:start="687:30" pos:end="687:38">(<argument pos:start="687:31" pos:end="687:37"><expr pos:start="687:31" pos:end="687:37"><operator pos:start="687:31" pos:end="687:31">&amp;</operator><name pos:start="687:32" pos:end="687:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="689:13" pos:end="689:36"><expr pos:start="689:13" pos:end="689:35"><call pos:start="689:13" pos:end="689:35"><name pos:start="689:13" pos:end="689:27">tci_write_reg32</name><argument_list pos:start="689:28" pos:end="689:35">(<argument pos:start="689:29" pos:end="689:30"><expr pos:start="689:29" pos:end="689:30"><name pos:start="689:29" pos:end="689:30">t0</name></expr></argument>, <argument pos:start="689:33" pos:end="689:34"><expr pos:start="689:33" pos:end="689:34"><name pos:start="689:33" pos:end="689:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="691:13" pos:end="696:0">break;</break>

<cpp:endif pos:start="693:1" pos:end="693:6">#<cpp:directive pos:start="693:2" pos:end="693:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="695:1" pos:end="695:30">#<cpp:directive pos:start="695:2" pos:end="695:3">if</cpp:directive> <expr pos:start="695:5" pos:end="695:30"><name pos:start="695:5" pos:end="695:30">TCG_TARGET_HAS_bswap16_i32</name></expr></cpp:if>

        <case pos:start="697:9" pos:end="697:34">case <expr pos:start="697:14" pos:end="697:33"><name pos:start="697:14" pos:end="697:33">INDEX_op_bswap16_i32</name></expr>:</case>

            <expr_stmt pos:start="699:13" pos:end="699:27"><expr pos:start="699:13" pos:end="699:26"><name pos:start="699:13" pos:end="699:14">t0</name> <operator pos:start="699:16" pos:end="699:16">=</operator> <operator pos:start="699:18" pos:end="699:18">*</operator><name pos:start="699:19" pos:end="699:24">tb_ptr</name><operator pos:start="699:25" pos:end="699:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="701:13" pos:end="701:39"><expr pos:start="701:13" pos:end="701:38"><name pos:start="701:13" pos:end="701:14">t1</name> <operator pos:start="701:16" pos:end="701:16">=</operator> <call pos:start="701:18" pos:end="701:38"><name pos:start="701:18" pos:end="701:29">tci_read_r16</name><argument_list pos:start="701:30" pos:end="701:38">(<argument pos:start="701:31" pos:end="701:37"><expr pos:start="701:31" pos:end="701:37"><operator pos:start="701:31" pos:end="701:31">&amp;</operator><name pos:start="701:32" pos:end="701:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="703:13" pos:end="703:45"><expr pos:start="703:13" pos:end="703:44"><call pos:start="703:13" pos:end="703:44"><name pos:start="703:13" pos:end="703:27">tci_write_reg32</name><argument_list pos:start="703:28" pos:end="703:44">(<argument pos:start="703:29" pos:end="703:30"><expr pos:start="703:29" pos:end="703:30"><name pos:start="703:29" pos:end="703:30">t0</name></expr></argument>, <argument pos:start="703:33" pos:end="703:43"><expr pos:start="703:33" pos:end="703:43"><call pos:start="703:33" pos:end="703:43"><name pos:start="703:33" pos:end="703:39">bswap16</name><argument_list pos:start="703:40" pos:end="703:43">(<argument pos:start="703:41" pos:end="703:42"><expr pos:start="703:41" pos:end="703:42"><name pos:start="703:41" pos:end="703:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="705:13" pos:end="710:0">break;</break>

<cpp:endif pos:start="707:1" pos:end="707:6">#<cpp:directive pos:start="707:2" pos:end="707:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="709:1" pos:end="709:30">#<cpp:directive pos:start="709:2" pos:end="709:3">if</cpp:directive> <expr pos:start="709:5" pos:end="709:30"><name pos:start="709:5" pos:end="709:30">TCG_TARGET_HAS_bswap32_i32</name></expr></cpp:if>

        <case pos:start="711:9" pos:end="711:34">case <expr pos:start="711:14" pos:end="711:33"><name pos:start="711:14" pos:end="711:33">INDEX_op_bswap32_i32</name></expr>:</case>

            <expr_stmt pos:start="713:13" pos:end="713:27"><expr pos:start="713:13" pos:end="713:26"><name pos:start="713:13" pos:end="713:14">t0</name> <operator pos:start="713:16" pos:end="713:16">=</operator> <operator pos:start="713:18" pos:end="713:18">*</operator><name pos:start="713:19" pos:end="713:24">tb_ptr</name><operator pos:start="713:25" pos:end="713:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="715:13" pos:end="715:39"><expr pos:start="715:13" pos:end="715:38"><name pos:start="715:13" pos:end="715:14">t1</name> <operator pos:start="715:16" pos:end="715:16">=</operator> <call pos:start="715:18" pos:end="715:38"><name pos:start="715:18" pos:end="715:29">tci_read_r32</name><argument_list pos:start="715:30" pos:end="715:38">(<argument pos:start="715:31" pos:end="715:37"><expr pos:start="715:31" pos:end="715:37"><operator pos:start="715:31" pos:end="715:31">&amp;</operator><name pos:start="715:32" pos:end="715:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="717:13" pos:end="717:45"><expr pos:start="717:13" pos:end="717:44"><call pos:start="717:13" pos:end="717:44"><name pos:start="717:13" pos:end="717:27">tci_write_reg32</name><argument_list pos:start="717:28" pos:end="717:44">(<argument pos:start="717:29" pos:end="717:30"><expr pos:start="717:29" pos:end="717:30"><name pos:start="717:29" pos:end="717:30">t0</name></expr></argument>, <argument pos:start="717:33" pos:end="717:43"><expr pos:start="717:33" pos:end="717:43"><call pos:start="717:33" pos:end="717:43"><name pos:start="717:33" pos:end="717:39">bswap32</name><argument_list pos:start="717:40" pos:end="717:43">(<argument pos:start="717:41" pos:end="717:42"><expr pos:start="717:41" pos:end="717:42"><name pos:start="717:41" pos:end="717:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="719:13" pos:end="724:0">break;</break>

<cpp:endif pos:start="721:1" pos:end="721:6">#<cpp:directive pos:start="721:2" pos:end="721:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="723:1" pos:end="723:26">#<cpp:directive pos:start="723:2" pos:end="723:3">if</cpp:directive> <expr pos:start="723:5" pos:end="723:26"><name pos:start="723:5" pos:end="723:26">TCG_TARGET_HAS_not_i32</name></expr></cpp:if>

        <case pos:start="725:9" pos:end="725:30">case <expr pos:start="725:14" pos:end="725:29"><name pos:start="725:14" pos:end="725:29">INDEX_op_not_i32</name></expr>:</case>

            <expr_stmt pos:start="727:13" pos:end="727:27"><expr pos:start="727:13" pos:end="727:26"><name pos:start="727:13" pos:end="727:14">t0</name> <operator pos:start="727:16" pos:end="727:16">=</operator> <operator pos:start="727:18" pos:end="727:18">*</operator><name pos:start="727:19" pos:end="727:24">tb_ptr</name><operator pos:start="727:25" pos:end="727:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="729:13" pos:end="729:39"><expr pos:start="729:13" pos:end="729:38"><name pos:start="729:13" pos:end="729:14">t1</name> <operator pos:start="729:16" pos:end="729:16">=</operator> <call pos:start="729:18" pos:end="729:38"><name pos:start="729:18" pos:end="729:29">tci_read_r32</name><argument_list pos:start="729:30" pos:end="729:38">(<argument pos:start="729:31" pos:end="729:37"><expr pos:start="729:31" pos:end="729:37"><operator pos:start="729:31" pos:end="729:31">&amp;</operator><name pos:start="729:32" pos:end="729:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="731:13" pos:end="731:37"><expr pos:start="731:13" pos:end="731:36"><call pos:start="731:13" pos:end="731:36"><name pos:start="731:13" pos:end="731:27">tci_write_reg32</name><argument_list pos:start="731:28" pos:end="731:36">(<argument pos:start="731:29" pos:end="731:30"><expr pos:start="731:29" pos:end="731:30"><name pos:start="731:29" pos:end="731:30">t0</name></expr></argument>, <argument pos:start="731:33" pos:end="731:35"><expr pos:start="731:33" pos:end="731:35"><operator pos:start="731:33" pos:end="731:33">~</operator><name pos:start="731:34" pos:end="731:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="733:13" pos:end="738:0">break;</break>

<cpp:endif pos:start="735:1" pos:end="735:6">#<cpp:directive pos:start="735:2" pos:end="735:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="737:1" pos:end="737:26">#<cpp:directive pos:start="737:2" pos:end="737:3">if</cpp:directive> <expr pos:start="737:5" pos:end="737:26"><name pos:start="737:5" pos:end="737:26">TCG_TARGET_HAS_neg_i32</name></expr></cpp:if>

        <case pos:start="739:9" pos:end="739:30">case <expr pos:start="739:14" pos:end="739:29"><name pos:start="739:14" pos:end="739:29">INDEX_op_neg_i32</name></expr>:</case>

            <expr_stmt pos:start="741:13" pos:end="741:27"><expr pos:start="741:13" pos:end="741:26"><name pos:start="741:13" pos:end="741:14">t0</name> <operator pos:start="741:16" pos:end="741:16">=</operator> <operator pos:start="741:18" pos:end="741:18">*</operator><name pos:start="741:19" pos:end="741:24">tb_ptr</name><operator pos:start="741:25" pos:end="741:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="743:13" pos:end="743:39"><expr pos:start="743:13" pos:end="743:38"><name pos:start="743:13" pos:end="743:14">t1</name> <operator pos:start="743:16" pos:end="743:16">=</operator> <call pos:start="743:18" pos:end="743:38"><name pos:start="743:18" pos:end="743:29">tci_read_r32</name><argument_list pos:start="743:30" pos:end="743:38">(<argument pos:start="743:31" pos:end="743:37"><expr pos:start="743:31" pos:end="743:37"><operator pos:start="743:31" pos:end="743:31">&amp;</operator><name pos:start="743:32" pos:end="743:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="745:13" pos:end="745:37"><expr pos:start="745:13" pos:end="745:36"><call pos:start="745:13" pos:end="745:36"><name pos:start="745:13" pos:end="745:27">tci_write_reg32</name><argument_list pos:start="745:28" pos:end="745:36">(<argument pos:start="745:29" pos:end="745:30"><expr pos:start="745:29" pos:end="745:30"><name pos:start="745:29" pos:end="745:30">t0</name></expr></argument>, <argument pos:start="745:33" pos:end="745:35"><expr pos:start="745:33" pos:end="745:35"><operator pos:start="745:33" pos:end="745:33">-</operator><name pos:start="745:34" pos:end="745:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="747:13" pos:end="752:0">break;</break>

<cpp:endif pos:start="749:1" pos:end="749:6">#<cpp:directive pos:start="749:2" pos:end="749:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="751:1" pos:end="751:29">#<cpp:directive pos:start="751:2" pos:end="751:3">if</cpp:directive> <expr pos:start="751:5" pos:end="751:29"><name pos:start="751:5" pos:end="751:23">TCG_TARGET_REG_BITS</name> <operator pos:start="751:25" pos:end="751:26">==</operator> <literal type="number" pos:start="751:28" pos:end="751:29">64</literal></expr></cpp:if>

        <case pos:start="753:9" pos:end="753:30">case <expr pos:start="753:14" pos:end="753:29"><name pos:start="753:14" pos:end="753:29">INDEX_op_mov_i64</name></expr>:</case>

            <expr_stmt pos:start="755:13" pos:end="755:27"><expr pos:start="755:13" pos:end="755:26"><name pos:start="755:13" pos:end="755:14">t0</name> <operator pos:start="755:16" pos:end="755:16">=</operator> <operator pos:start="755:18" pos:end="755:18">*</operator><name pos:start="755:19" pos:end="755:24">tb_ptr</name><operator pos:start="755:25" pos:end="755:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="757:13" pos:end="757:39"><expr pos:start="757:13" pos:end="757:38"><name pos:start="757:13" pos:end="757:14">t1</name> <operator pos:start="757:16" pos:end="757:16">=</operator> <call pos:start="757:18" pos:end="757:38"><name pos:start="757:18" pos:end="757:29">tci_read_r64</name><argument_list pos:start="757:30" pos:end="757:38">(<argument pos:start="757:31" pos:end="757:37"><expr pos:start="757:31" pos:end="757:37"><operator pos:start="757:31" pos:end="757:31">&amp;</operator><name pos:start="757:32" pos:end="757:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="759:13" pos:end="759:36"><expr pos:start="759:13" pos:end="759:35"><call pos:start="759:13" pos:end="759:35"><name pos:start="759:13" pos:end="759:27">tci_write_reg64</name><argument_list pos:start="759:28" pos:end="759:35">(<argument pos:start="759:29" pos:end="759:30"><expr pos:start="759:29" pos:end="759:30"><name pos:start="759:29" pos:end="759:30">t0</name></expr></argument>, <argument pos:start="759:33" pos:end="759:34"><expr pos:start="759:33" pos:end="759:34"><name pos:start="759:33" pos:end="759:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="761:13" pos:end="761:18">break;</break>

        <case pos:start="763:9" pos:end="763:31">case <expr pos:start="763:14" pos:end="763:30"><name pos:start="763:14" pos:end="763:30">INDEX_op_movi_i64</name></expr>:</case>

            <expr_stmt pos:start="765:13" pos:end="765:27"><expr pos:start="765:13" pos:end="765:26"><name pos:start="765:13" pos:end="765:14">t0</name> <operator pos:start="765:16" pos:end="765:16">=</operator> <operator pos:start="765:18" pos:end="765:18">*</operator><name pos:start="765:19" pos:end="765:24">tb_ptr</name><operator pos:start="765:25" pos:end="765:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="767:13" pos:end="767:39"><expr pos:start="767:13" pos:end="767:38"><name pos:start="767:13" pos:end="767:14">t1</name> <operator pos:start="767:16" pos:end="767:16">=</operator> <call pos:start="767:18" pos:end="767:38"><name pos:start="767:18" pos:end="767:29">tci_read_i64</name><argument_list pos:start="767:30" pos:end="767:38">(<argument pos:start="767:31" pos:end="767:37"><expr pos:start="767:31" pos:end="767:37"><operator pos:start="767:31" pos:end="767:31">&amp;</operator><name pos:start="767:32" pos:end="767:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="769:13" pos:end="769:36"><expr pos:start="769:13" pos:end="769:35"><call pos:start="769:13" pos:end="769:35"><name pos:start="769:13" pos:end="769:27">tci_write_reg64</name><argument_list pos:start="769:28" pos:end="769:35">(<argument pos:start="769:29" pos:end="769:30"><expr pos:start="769:29" pos:end="769:30"><name pos:start="769:29" pos:end="769:30">t0</name></expr></argument>, <argument pos:start="769:33" pos:end="769:34"><expr pos:start="769:33" pos:end="769:34"><name pos:start="769:33" pos:end="769:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="771:13" pos:end="771:18">break;</break>



            <comment type="block" pos:start="775:13" pos:end="775:49">/* Load/store operations (64 bit). */</comment>



        <case pos:start="779:9" pos:end="779:31">case <expr pos:start="779:14" pos:end="779:30"><name pos:start="779:14" pos:end="779:30">INDEX_op_ld8u_i64</name></expr>:</case>

            <expr_stmt pos:start="781:13" pos:end="781:27"><expr pos:start="781:13" pos:end="781:26"><name pos:start="781:13" pos:end="781:14">t0</name> <operator pos:start="781:16" pos:end="781:16">=</operator> <operator pos:start="781:18" pos:end="781:18">*</operator><name pos:start="781:19" pos:end="781:24">tb_ptr</name><operator pos:start="781:25" pos:end="781:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="783:13" pos:end="783:37"><expr pos:start="783:13" pos:end="783:36"><name pos:start="783:13" pos:end="783:14">t1</name> <operator pos:start="783:16" pos:end="783:16">=</operator> <call pos:start="783:18" pos:end="783:36"><name pos:start="783:18" pos:end="783:27">tci_read_r</name><argument_list pos:start="783:28" pos:end="783:36">(<argument pos:start="783:29" pos:end="783:35"><expr pos:start="783:29" pos:end="783:35"><operator pos:start="783:29" pos:end="783:29">&amp;</operator><name pos:start="783:30" pos:end="783:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="785:13" pos:end="785:39"><expr pos:start="785:13" pos:end="785:38"><name pos:start="785:13" pos:end="785:14">t2</name> <operator pos:start="785:16" pos:end="785:16">=</operator> <call pos:start="785:18" pos:end="785:38"><name pos:start="785:18" pos:end="785:29">tci_read_s32</name><argument_list pos:start="785:30" pos:end="785:38">(<argument pos:start="785:31" pos:end="785:37"><expr pos:start="785:31" pos:end="785:37"><operator pos:start="785:31" pos:end="785:31">&amp;</operator><name pos:start="785:32" pos:end="785:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="787:13" pos:end="787:54"><expr pos:start="787:13" pos:end="787:53"><call pos:start="787:13" pos:end="787:53"><name pos:start="787:13" pos:end="787:26">tci_write_reg8</name><argument_list pos:start="787:27" pos:end="787:53">(<argument pos:start="787:28" pos:end="787:29"><expr pos:start="787:28" pos:end="787:29"><name pos:start="787:28" pos:end="787:29">t0</name></expr></argument>, <argument pos:start="787:32" pos:end="787:52"><expr pos:start="787:32" pos:end="787:52"><operator pos:start="787:32" pos:end="787:32">*</operator><operator pos:start="787:33" pos:end="787:33">(</operator><name pos:start="787:34" pos:end="787:40">uint8_t</name> <operator pos:start="787:42" pos:end="787:42">*</operator><operator pos:start="787:43" pos:end="787:43">)</operator><operator pos:start="787:44" pos:end="787:44">(</operator><name pos:start="787:45" pos:end="787:46">t1</name> <operator pos:start="787:48" pos:end="787:48">+</operator> <name pos:start="787:50" pos:end="787:51">t2</name><operator pos:start="787:52" pos:end="787:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="789:13" pos:end="789:18">break;</break>

        <case pos:start="791:9" pos:end="791:31">case <expr pos:start="791:14" pos:end="791:30"><name pos:start="791:14" pos:end="791:30">INDEX_op_ld8s_i64</name></expr>:</case>

        <case pos:start="793:9" pos:end="793:32">case <expr pos:start="793:14" pos:end="793:31"><name pos:start="793:14" pos:end="793:31">INDEX_op_ld16u_i64</name></expr>:</case>

        <case pos:start="795:9" pos:end="795:32">case <expr pos:start="795:14" pos:end="795:31"><name pos:start="795:14" pos:end="795:31">INDEX_op_ld16s_i64</name></expr>:</case>

            <expr_stmt pos:start="797:13" pos:end="797:19"><expr pos:start="797:13" pos:end="797:18"><call pos:start="797:13" pos:end="797:18"><name pos:start="797:13" pos:end="797:16">TODO</name><argument_list pos:start="797:17" pos:end="797:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="799:13" pos:end="799:18">break;</break>

        <case pos:start="801:9" pos:end="801:32">case <expr pos:start="801:14" pos:end="801:31"><name pos:start="801:14" pos:end="801:31">INDEX_op_ld32u_i64</name></expr>:</case>

            <expr_stmt pos:start="803:13" pos:end="803:27"><expr pos:start="803:13" pos:end="803:26"><name pos:start="803:13" pos:end="803:14">t0</name> <operator pos:start="803:16" pos:end="803:16">=</operator> <operator pos:start="803:18" pos:end="803:18">*</operator><name pos:start="803:19" pos:end="803:24">tb_ptr</name><operator pos:start="803:25" pos:end="803:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="805:13" pos:end="805:37"><expr pos:start="805:13" pos:end="805:36"><name pos:start="805:13" pos:end="805:14">t1</name> <operator pos:start="805:16" pos:end="805:16">=</operator> <call pos:start="805:18" pos:end="805:36"><name pos:start="805:18" pos:end="805:27">tci_read_r</name><argument_list pos:start="805:28" pos:end="805:36">(<argument pos:start="805:29" pos:end="805:35"><expr pos:start="805:29" pos:end="805:35"><operator pos:start="805:29" pos:end="805:29">&amp;</operator><name pos:start="805:30" pos:end="805:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="807:13" pos:end="807:39"><expr pos:start="807:13" pos:end="807:38"><name pos:start="807:13" pos:end="807:14">t2</name> <operator pos:start="807:16" pos:end="807:16">=</operator> <call pos:start="807:18" pos:end="807:38"><name pos:start="807:18" pos:end="807:29">tci_read_s32</name><argument_list pos:start="807:30" pos:end="807:38">(<argument pos:start="807:31" pos:end="807:37"><expr pos:start="807:31" pos:end="807:37"><operator pos:start="807:31" pos:end="807:31">&amp;</operator><name pos:start="807:32" pos:end="807:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="809:13" pos:end="809:56"><expr pos:start="809:13" pos:end="809:55"><call pos:start="809:13" pos:end="809:55"><name pos:start="809:13" pos:end="809:27">tci_write_reg32</name><argument_list pos:start="809:28" pos:end="809:55">(<argument pos:start="809:29" pos:end="809:30"><expr pos:start="809:29" pos:end="809:30"><name pos:start="809:29" pos:end="809:30">t0</name></expr></argument>, <argument pos:start="809:33" pos:end="809:54"><expr pos:start="809:33" pos:end="809:54"><operator pos:start="809:33" pos:end="809:33">*</operator><operator pos:start="809:34" pos:end="809:34">(</operator><name pos:start="809:35" pos:end="809:42">uint32_t</name> <operator pos:start="809:44" pos:end="809:44">*</operator><operator pos:start="809:45" pos:end="809:45">)</operator><operator pos:start="809:46" pos:end="809:46">(</operator><name pos:start="809:47" pos:end="809:48">t1</name> <operator pos:start="809:50" pos:end="809:50">+</operator> <name pos:start="809:52" pos:end="809:53">t2</name><operator pos:start="809:54" pos:end="809:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="811:13" pos:end="811:18">break;</break>

        <case pos:start="813:9" pos:end="813:32">case <expr pos:start="813:14" pos:end="813:31"><name pos:start="813:14" pos:end="813:31">INDEX_op_ld32s_i64</name></expr>:</case>

            <expr_stmt pos:start="815:13" pos:end="815:27"><expr pos:start="815:13" pos:end="815:26"><name pos:start="815:13" pos:end="815:14">t0</name> <operator pos:start="815:16" pos:end="815:16">=</operator> <operator pos:start="815:18" pos:end="815:18">*</operator><name pos:start="815:19" pos:end="815:24">tb_ptr</name><operator pos:start="815:25" pos:end="815:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="817:13" pos:end="817:37"><expr pos:start="817:13" pos:end="817:36"><name pos:start="817:13" pos:end="817:14">t1</name> <operator pos:start="817:16" pos:end="817:16">=</operator> <call pos:start="817:18" pos:end="817:36"><name pos:start="817:18" pos:end="817:27">tci_read_r</name><argument_list pos:start="817:28" pos:end="817:36">(<argument pos:start="817:29" pos:end="817:35"><expr pos:start="817:29" pos:end="817:35"><operator pos:start="817:29" pos:end="817:29">&amp;</operator><name pos:start="817:30" pos:end="817:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="819:13" pos:end="819:39"><expr pos:start="819:13" pos:end="819:38"><name pos:start="819:13" pos:end="819:14">t2</name> <operator pos:start="819:16" pos:end="819:16">=</operator> <call pos:start="819:18" pos:end="819:38"><name pos:start="819:18" pos:end="819:29">tci_read_s32</name><argument_list pos:start="819:30" pos:end="819:38">(<argument pos:start="819:31" pos:end="819:37"><expr pos:start="819:31" pos:end="819:37"><operator pos:start="819:31" pos:end="819:31">&amp;</operator><name pos:start="819:32" pos:end="819:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="821:13" pos:end="821:56"><expr pos:start="821:13" pos:end="821:55"><call pos:start="821:13" pos:end="821:55"><name pos:start="821:13" pos:end="821:28">tci_write_reg32s</name><argument_list pos:start="821:29" pos:end="821:55">(<argument pos:start="821:30" pos:end="821:31"><expr pos:start="821:30" pos:end="821:31"><name pos:start="821:30" pos:end="821:31">t0</name></expr></argument>, <argument pos:start="821:34" pos:end="821:54"><expr pos:start="821:34" pos:end="821:54"><operator pos:start="821:34" pos:end="821:34">*</operator><operator pos:start="821:35" pos:end="821:35">(</operator><name pos:start="821:36" pos:end="821:42">int32_t</name> <operator pos:start="821:44" pos:end="821:44">*</operator><operator pos:start="821:45" pos:end="821:45">)</operator><operator pos:start="821:46" pos:end="821:46">(</operator><name pos:start="821:47" pos:end="821:48">t1</name> <operator pos:start="821:50" pos:end="821:50">+</operator> <name pos:start="821:52" pos:end="821:53">t2</name><operator pos:start="821:54" pos:end="821:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="823:13" pos:end="823:18">break;</break>

        <case pos:start="825:9" pos:end="825:29">case <expr pos:start="825:14" pos:end="825:28"><name pos:start="825:14" pos:end="825:28">INDEX_op_ld_i64</name></expr>:</case>

            <expr_stmt pos:start="827:13" pos:end="827:27"><expr pos:start="827:13" pos:end="827:26"><name pos:start="827:13" pos:end="827:14">t0</name> <operator pos:start="827:16" pos:end="827:16">=</operator> <operator pos:start="827:18" pos:end="827:18">*</operator><name pos:start="827:19" pos:end="827:24">tb_ptr</name><operator pos:start="827:25" pos:end="827:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="829:13" pos:end="829:37"><expr pos:start="829:13" pos:end="829:36"><name pos:start="829:13" pos:end="829:14">t1</name> <operator pos:start="829:16" pos:end="829:16">=</operator> <call pos:start="829:18" pos:end="829:36"><name pos:start="829:18" pos:end="829:27">tci_read_r</name><argument_list pos:start="829:28" pos:end="829:36">(<argument pos:start="829:29" pos:end="829:35"><expr pos:start="829:29" pos:end="829:35"><operator pos:start="829:29" pos:end="829:29">&amp;</operator><name pos:start="829:30" pos:end="829:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="831:13" pos:end="831:39"><expr pos:start="831:13" pos:end="831:38"><name pos:start="831:13" pos:end="831:14">t2</name> <operator pos:start="831:16" pos:end="831:16">=</operator> <call pos:start="831:18" pos:end="831:38"><name pos:start="831:18" pos:end="831:29">tci_read_s32</name><argument_list pos:start="831:30" pos:end="831:38">(<argument pos:start="831:31" pos:end="831:37"><expr pos:start="831:31" pos:end="831:37"><operator pos:start="831:31" pos:end="831:31">&amp;</operator><name pos:start="831:32" pos:end="831:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="833:13" pos:end="833:56"><expr pos:start="833:13" pos:end="833:55"><call pos:start="833:13" pos:end="833:55"><name pos:start="833:13" pos:end="833:27">tci_write_reg64</name><argument_list pos:start="833:28" pos:end="833:55">(<argument pos:start="833:29" pos:end="833:30"><expr pos:start="833:29" pos:end="833:30"><name pos:start="833:29" pos:end="833:30">t0</name></expr></argument>, <argument pos:start="833:33" pos:end="833:54"><expr pos:start="833:33" pos:end="833:54"><operator pos:start="833:33" pos:end="833:33">*</operator><operator pos:start="833:34" pos:end="833:34">(</operator><name pos:start="833:35" pos:end="833:42">uint64_t</name> <operator pos:start="833:44" pos:end="833:44">*</operator><operator pos:start="833:45" pos:end="833:45">)</operator><operator pos:start="833:46" pos:end="833:46">(</operator><name pos:start="833:47" pos:end="833:48">t1</name> <operator pos:start="833:50" pos:end="833:50">+</operator> <name pos:start="833:52" pos:end="833:53">t2</name><operator pos:start="833:54" pos:end="833:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="835:13" pos:end="835:18">break;</break>

        <case pos:start="837:9" pos:end="837:30">case <expr pos:start="837:14" pos:end="837:29"><name pos:start="837:14" pos:end="837:29">INDEX_op_st8_i64</name></expr>:</case>

            <expr_stmt pos:start="839:13" pos:end="839:38"><expr pos:start="839:13" pos:end="839:37"><name pos:start="839:13" pos:end="839:14">t0</name> <operator pos:start="839:16" pos:end="839:16">=</operator> <call pos:start="839:18" pos:end="839:37"><name pos:start="839:18" pos:end="839:28">tci_read_r8</name><argument_list pos:start="839:29" pos:end="839:37">(<argument pos:start="839:30" pos:end="839:36"><expr pos:start="839:30" pos:end="839:36"><operator pos:start="839:30" pos:end="839:30">&amp;</operator><name pos:start="839:31" pos:end="839:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="841:13" pos:end="841:37"><expr pos:start="841:13" pos:end="841:36"><name pos:start="841:13" pos:end="841:14">t1</name> <operator pos:start="841:16" pos:end="841:16">=</operator> <call pos:start="841:18" pos:end="841:36"><name pos:start="841:18" pos:end="841:27">tci_read_r</name><argument_list pos:start="841:28" pos:end="841:36">(<argument pos:start="841:29" pos:end="841:35"><expr pos:start="841:29" pos:end="841:35"><operator pos:start="841:29" pos:end="841:29">&amp;</operator><name pos:start="841:30" pos:end="841:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="843:13" pos:end="843:39"><expr pos:start="843:13" pos:end="843:38"><name pos:start="843:13" pos:end="843:14">t2</name> <operator pos:start="843:16" pos:end="843:16">=</operator> <call pos:start="843:18" pos:end="843:38"><name pos:start="843:18" pos:end="843:29">tci_read_s32</name><argument_list pos:start="843:30" pos:end="843:38">(<argument pos:start="843:31" pos:end="843:37"><expr pos:start="843:31" pos:end="843:37"><operator pos:start="843:31" pos:end="843:31">&amp;</operator><name pos:start="843:32" pos:end="843:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="845:13" pos:end="845:39"><expr pos:start="845:13" pos:end="845:38"><operator pos:start="845:13" pos:end="845:13">*</operator><operator pos:start="845:14" pos:end="845:14">(</operator><name pos:start="845:15" pos:end="845:21">uint8_t</name> <operator pos:start="845:23" pos:end="845:23">*</operator><operator pos:start="845:24" pos:end="845:24">)</operator><operator pos:start="845:25" pos:end="845:25">(</operator><name pos:start="845:26" pos:end="845:27">t1</name> <operator pos:start="845:29" pos:end="845:29">+</operator> <name pos:start="845:31" pos:end="845:32">t2</name><operator pos:start="845:33" pos:end="845:33">)</operator> <operator pos:start="845:35" pos:end="845:35">=</operator> <name pos:start="845:37" pos:end="845:38">t0</name></expr>;</expr_stmt>

            <break pos:start="847:13" pos:end="847:18">break;</break>

        <case pos:start="849:9" pos:end="849:31">case <expr pos:start="849:14" pos:end="849:30"><name pos:start="849:14" pos:end="849:30">INDEX_op_st16_i64</name></expr>:</case>

            <expr_stmt pos:start="851:13" pos:end="851:39"><expr pos:start="851:13" pos:end="851:38"><name pos:start="851:13" pos:end="851:14">t0</name> <operator pos:start="851:16" pos:end="851:16">=</operator> <call pos:start="851:18" pos:end="851:38"><name pos:start="851:18" pos:end="851:29">tci_read_r16</name><argument_list pos:start="851:30" pos:end="851:38">(<argument pos:start="851:31" pos:end="851:37"><expr pos:start="851:31" pos:end="851:37"><operator pos:start="851:31" pos:end="851:31">&amp;</operator><name pos:start="851:32" pos:end="851:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="853:13" pos:end="853:37"><expr pos:start="853:13" pos:end="853:36"><name pos:start="853:13" pos:end="853:14">t1</name> <operator pos:start="853:16" pos:end="853:16">=</operator> <call pos:start="853:18" pos:end="853:36"><name pos:start="853:18" pos:end="853:27">tci_read_r</name><argument_list pos:start="853:28" pos:end="853:36">(<argument pos:start="853:29" pos:end="853:35"><expr pos:start="853:29" pos:end="853:35"><operator pos:start="853:29" pos:end="853:29">&amp;</operator><name pos:start="853:30" pos:end="853:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="855:13" pos:end="855:39"><expr pos:start="855:13" pos:end="855:38"><name pos:start="855:13" pos:end="855:14">t2</name> <operator pos:start="855:16" pos:end="855:16">=</operator> <call pos:start="855:18" pos:end="855:38"><name pos:start="855:18" pos:end="855:29">tci_read_s32</name><argument_list pos:start="855:30" pos:end="855:38">(<argument pos:start="855:31" pos:end="855:37"><expr pos:start="855:31" pos:end="855:37"><operator pos:start="855:31" pos:end="855:31">&amp;</operator><name pos:start="855:32" pos:end="855:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="857:13" pos:end="857:40"><expr pos:start="857:13" pos:end="857:39"><operator pos:start="857:13" pos:end="857:13">*</operator><operator pos:start="857:14" pos:end="857:14">(</operator><name pos:start="857:15" pos:end="857:22">uint16_t</name> <operator pos:start="857:24" pos:end="857:24">*</operator><operator pos:start="857:25" pos:end="857:25">)</operator><operator pos:start="857:26" pos:end="857:26">(</operator><name pos:start="857:27" pos:end="857:28">t1</name> <operator pos:start="857:30" pos:end="857:30">+</operator> <name pos:start="857:32" pos:end="857:33">t2</name><operator pos:start="857:34" pos:end="857:34">)</operator> <operator pos:start="857:36" pos:end="857:36">=</operator> <name pos:start="857:38" pos:end="857:39">t0</name></expr>;</expr_stmt>

            <break pos:start="859:13" pos:end="859:18">break;</break>

        <case pos:start="861:9" pos:end="861:31">case <expr pos:start="861:14" pos:end="861:30"><name pos:start="861:14" pos:end="861:30">INDEX_op_st32_i64</name></expr>:</case>

            <expr_stmt pos:start="863:13" pos:end="863:39"><expr pos:start="863:13" pos:end="863:38"><name pos:start="863:13" pos:end="863:14">t0</name> <operator pos:start="863:16" pos:end="863:16">=</operator> <call pos:start="863:18" pos:end="863:38"><name pos:start="863:18" pos:end="863:29">tci_read_r32</name><argument_list pos:start="863:30" pos:end="863:38">(<argument pos:start="863:31" pos:end="863:37"><expr pos:start="863:31" pos:end="863:37"><operator pos:start="863:31" pos:end="863:31">&amp;</operator><name pos:start="863:32" pos:end="863:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="865:13" pos:end="865:37"><expr pos:start="865:13" pos:end="865:36"><name pos:start="865:13" pos:end="865:14">t1</name> <operator pos:start="865:16" pos:end="865:16">=</operator> <call pos:start="865:18" pos:end="865:36"><name pos:start="865:18" pos:end="865:27">tci_read_r</name><argument_list pos:start="865:28" pos:end="865:36">(<argument pos:start="865:29" pos:end="865:35"><expr pos:start="865:29" pos:end="865:35"><operator pos:start="865:29" pos:end="865:29">&amp;</operator><name pos:start="865:30" pos:end="865:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="867:13" pos:end="867:39"><expr pos:start="867:13" pos:end="867:38"><name pos:start="867:13" pos:end="867:14">t2</name> <operator pos:start="867:16" pos:end="867:16">=</operator> <call pos:start="867:18" pos:end="867:38"><name pos:start="867:18" pos:end="867:29">tci_read_s32</name><argument_list pos:start="867:30" pos:end="867:38">(<argument pos:start="867:31" pos:end="867:37"><expr pos:start="867:31" pos:end="867:37"><operator pos:start="867:31" pos:end="867:31">&amp;</operator><name pos:start="867:32" pos:end="867:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="869:13" pos:end="869:40"><expr pos:start="869:13" pos:end="869:39"><operator pos:start="869:13" pos:end="869:13">*</operator><operator pos:start="869:14" pos:end="869:14">(</operator><name pos:start="869:15" pos:end="869:22">uint32_t</name> <operator pos:start="869:24" pos:end="869:24">*</operator><operator pos:start="869:25" pos:end="869:25">)</operator><operator pos:start="869:26" pos:end="869:26">(</operator><name pos:start="869:27" pos:end="869:28">t1</name> <operator pos:start="869:30" pos:end="869:30">+</operator> <name pos:start="869:32" pos:end="869:33">t2</name><operator pos:start="869:34" pos:end="869:34">)</operator> <operator pos:start="869:36" pos:end="869:36">=</operator> <name pos:start="869:38" pos:end="869:39">t0</name></expr>;</expr_stmt>

            <break pos:start="871:13" pos:end="871:18">break;</break>

        <case pos:start="873:9" pos:end="873:29">case <expr pos:start="873:14" pos:end="873:28"><name pos:start="873:14" pos:end="873:28">INDEX_op_st_i64</name></expr>:</case>

            <expr_stmt pos:start="875:13" pos:end="875:39"><expr pos:start="875:13" pos:end="875:38"><name pos:start="875:13" pos:end="875:14">t0</name> <operator pos:start="875:16" pos:end="875:16">=</operator> <call pos:start="875:18" pos:end="875:38"><name pos:start="875:18" pos:end="875:29">tci_read_r64</name><argument_list pos:start="875:30" pos:end="875:38">(<argument pos:start="875:31" pos:end="875:37"><expr pos:start="875:31" pos:end="875:37"><operator pos:start="875:31" pos:end="875:31">&amp;</operator><name pos:start="875:32" pos:end="875:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="877:13" pos:end="877:37"><expr pos:start="877:13" pos:end="877:36"><name pos:start="877:13" pos:end="877:14">t1</name> <operator pos:start="877:16" pos:end="877:16">=</operator> <call pos:start="877:18" pos:end="877:36"><name pos:start="877:18" pos:end="877:27">tci_read_r</name><argument_list pos:start="877:28" pos:end="877:36">(<argument pos:start="877:29" pos:end="877:35"><expr pos:start="877:29" pos:end="877:35"><operator pos:start="877:29" pos:end="877:29">&amp;</operator><name pos:start="877:30" pos:end="877:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="879:13" pos:end="879:39"><expr pos:start="879:13" pos:end="879:38"><name pos:start="879:13" pos:end="879:14">t2</name> <operator pos:start="879:16" pos:end="879:16">=</operator> <call pos:start="879:18" pos:end="879:38"><name pos:start="879:18" pos:end="879:29">tci_read_s32</name><argument_list pos:start="879:30" pos:end="879:38">(<argument pos:start="879:31" pos:end="879:37"><expr pos:start="879:31" pos:end="879:37"><operator pos:start="879:31" pos:end="879:31">&amp;</operator><name pos:start="879:32" pos:end="879:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="881:13" pos:end="881:54"><expr pos:start="881:13" pos:end="881:53"><call pos:start="881:13" pos:end="881:53"><name pos:start="881:13" pos:end="881:18">assert</name><argument_list pos:start="881:19" pos:end="881:53">(<argument pos:start="881:20" pos:end="881:52"><expr pos:start="881:20" pos:end="881:52"><name pos:start="881:20" pos:end="881:21">t1</name> <operator pos:start="881:23" pos:end="881:24">!=</operator> <name pos:start="881:26" pos:end="881:33">sp_value</name> <operator pos:start="881:35" pos:end="881:36">||</operator> <operator pos:start="881:38" pos:end="881:38">(</operator><name pos:start="881:39" pos:end="881:45">int32_t</name><operator pos:start="881:46" pos:end="881:46">)</operator><name pos:start="881:47" pos:end="881:48">t2</name> <operator pos:start="881:50" pos:end="881:50">&lt;</operator> <literal type="number" pos:start="881:52" pos:end="881:52">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="883:13" pos:end="883:40"><expr pos:start="883:13" pos:end="883:39"><operator pos:start="883:13" pos:end="883:13">*</operator><operator pos:start="883:14" pos:end="883:14">(</operator><name pos:start="883:15" pos:end="883:22">uint64_t</name> <operator pos:start="883:24" pos:end="883:24">*</operator><operator pos:start="883:25" pos:end="883:25">)</operator><operator pos:start="883:26" pos:end="883:26">(</operator><name pos:start="883:27" pos:end="883:28">t1</name> <operator pos:start="883:30" pos:end="883:30">+</operator> <name pos:start="883:32" pos:end="883:33">t2</name><operator pos:start="883:34" pos:end="883:34">)</operator> <operator pos:start="883:36" pos:end="883:36">=</operator> <name pos:start="883:38" pos:end="883:39">t0</name></expr>;</expr_stmt>

            <break pos:start="885:13" pos:end="885:18">break;</break>



            <comment type="block" pos:start="889:13" pos:end="889:49">/* Arithmetic operations (64 bit). */</comment>



        <case pos:start="893:9" pos:end="893:30">case <expr pos:start="893:14" pos:end="893:29"><name pos:start="893:14" pos:end="893:29">INDEX_op_add_i64</name></expr>:</case>

            <expr_stmt pos:start="895:13" pos:end="895:27"><expr pos:start="895:13" pos:end="895:26"><name pos:start="895:13" pos:end="895:14">t0</name> <operator pos:start="895:16" pos:end="895:16">=</operator> <operator pos:start="895:18" pos:end="895:18">*</operator><name pos:start="895:19" pos:end="895:24">tb_ptr</name><operator pos:start="895:25" pos:end="895:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="897:13" pos:end="897:40"><expr pos:start="897:13" pos:end="897:39"><name pos:start="897:13" pos:end="897:14">t1</name> <operator pos:start="897:16" pos:end="897:16">=</operator> <call pos:start="897:18" pos:end="897:39"><name pos:start="897:18" pos:end="897:30">tci_read_ri64</name><argument_list pos:start="897:31" pos:end="897:39">(<argument pos:start="897:32" pos:end="897:38"><expr pos:start="897:32" pos:end="897:38"><operator pos:start="897:32" pos:end="897:32">&amp;</operator><name pos:start="897:33" pos:end="897:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="899:13" pos:end="899:40"><expr pos:start="899:13" pos:end="899:39"><name pos:start="899:13" pos:end="899:14">t2</name> <operator pos:start="899:16" pos:end="899:16">=</operator> <call pos:start="899:18" pos:end="899:39"><name pos:start="899:18" pos:end="899:30">tci_read_ri64</name><argument_list pos:start="899:31" pos:end="899:39">(<argument pos:start="899:32" pos:end="899:38"><expr pos:start="899:32" pos:end="899:38"><operator pos:start="899:32" pos:end="899:32">&amp;</operator><name pos:start="899:33" pos:end="899:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="901:13" pos:end="901:41"><expr pos:start="901:13" pos:end="901:40"><call pos:start="901:13" pos:end="901:40"><name pos:start="901:13" pos:end="901:27">tci_write_reg64</name><argument_list pos:start="901:28" pos:end="901:40">(<argument pos:start="901:29" pos:end="901:30"><expr pos:start="901:29" pos:end="901:30"><name pos:start="901:29" pos:end="901:30">t0</name></expr></argument>, <argument pos:start="901:33" pos:end="901:39"><expr pos:start="901:33" pos:end="901:39"><name pos:start="901:33" pos:end="901:34">t1</name> <operator pos:start="901:36" pos:end="901:36">+</operator> <name pos:start="901:38" pos:end="901:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="903:13" pos:end="903:18">break;</break>

        <case pos:start="905:9" pos:end="905:30">case <expr pos:start="905:14" pos:end="905:29"><name pos:start="905:14" pos:end="905:29">INDEX_op_sub_i64</name></expr>:</case>

            <expr_stmt pos:start="907:13" pos:end="907:27"><expr pos:start="907:13" pos:end="907:26"><name pos:start="907:13" pos:end="907:14">t0</name> <operator pos:start="907:16" pos:end="907:16">=</operator> <operator pos:start="907:18" pos:end="907:18">*</operator><name pos:start="907:19" pos:end="907:24">tb_ptr</name><operator pos:start="907:25" pos:end="907:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="909:13" pos:end="909:40"><expr pos:start="909:13" pos:end="909:39"><name pos:start="909:13" pos:end="909:14">t1</name> <operator pos:start="909:16" pos:end="909:16">=</operator> <call pos:start="909:18" pos:end="909:39"><name pos:start="909:18" pos:end="909:30">tci_read_ri64</name><argument_list pos:start="909:31" pos:end="909:39">(<argument pos:start="909:32" pos:end="909:38"><expr pos:start="909:32" pos:end="909:38"><operator pos:start="909:32" pos:end="909:32">&amp;</operator><name pos:start="909:33" pos:end="909:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="911:13" pos:end="911:40"><expr pos:start="911:13" pos:end="911:39"><name pos:start="911:13" pos:end="911:14">t2</name> <operator pos:start="911:16" pos:end="911:16">=</operator> <call pos:start="911:18" pos:end="911:39"><name pos:start="911:18" pos:end="911:30">tci_read_ri64</name><argument_list pos:start="911:31" pos:end="911:39">(<argument pos:start="911:32" pos:end="911:38"><expr pos:start="911:32" pos:end="911:38"><operator pos:start="911:32" pos:end="911:32">&amp;</operator><name pos:start="911:33" pos:end="911:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="913:13" pos:end="913:41"><expr pos:start="913:13" pos:end="913:40"><call pos:start="913:13" pos:end="913:40"><name pos:start="913:13" pos:end="913:27">tci_write_reg64</name><argument_list pos:start="913:28" pos:end="913:40">(<argument pos:start="913:29" pos:end="913:30"><expr pos:start="913:29" pos:end="913:30"><name pos:start="913:29" pos:end="913:30">t0</name></expr></argument>, <argument pos:start="913:33" pos:end="913:39"><expr pos:start="913:33" pos:end="913:39"><name pos:start="913:33" pos:end="913:34">t1</name> <operator pos:start="913:36" pos:end="913:36">-</operator> <name pos:start="913:38" pos:end="913:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="915:13" pos:end="915:18">break;</break>

        <case pos:start="917:9" pos:end="917:30">case <expr pos:start="917:14" pos:end="917:29"><name pos:start="917:14" pos:end="917:29">INDEX_op_mul_i64</name></expr>:</case>

            <expr_stmt pos:start="919:13" pos:end="919:27"><expr pos:start="919:13" pos:end="919:26"><name pos:start="919:13" pos:end="919:14">t0</name> <operator pos:start="919:16" pos:end="919:16">=</operator> <operator pos:start="919:18" pos:end="919:18">*</operator><name pos:start="919:19" pos:end="919:24">tb_ptr</name><operator pos:start="919:25" pos:end="919:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="921:13" pos:end="921:40"><expr pos:start="921:13" pos:end="921:39"><name pos:start="921:13" pos:end="921:14">t1</name> <operator pos:start="921:16" pos:end="921:16">=</operator> <call pos:start="921:18" pos:end="921:39"><name pos:start="921:18" pos:end="921:30">tci_read_ri64</name><argument_list pos:start="921:31" pos:end="921:39">(<argument pos:start="921:32" pos:end="921:38"><expr pos:start="921:32" pos:end="921:38"><operator pos:start="921:32" pos:end="921:32">&amp;</operator><name pos:start="921:33" pos:end="921:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="923:13" pos:end="923:40"><expr pos:start="923:13" pos:end="923:39"><name pos:start="923:13" pos:end="923:14">t2</name> <operator pos:start="923:16" pos:end="923:16">=</operator> <call pos:start="923:18" pos:end="923:39"><name pos:start="923:18" pos:end="923:30">tci_read_ri64</name><argument_list pos:start="923:31" pos:end="923:39">(<argument pos:start="923:32" pos:end="923:38"><expr pos:start="923:32" pos:end="923:38"><operator pos:start="923:32" pos:end="923:32">&amp;</operator><name pos:start="923:33" pos:end="923:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="925:13" pos:end="925:41"><expr pos:start="925:13" pos:end="925:40"><call pos:start="925:13" pos:end="925:40"><name pos:start="925:13" pos:end="925:27">tci_write_reg64</name><argument_list pos:start="925:28" pos:end="925:40">(<argument pos:start="925:29" pos:end="925:30"><expr pos:start="925:29" pos:end="925:30"><name pos:start="925:29" pos:end="925:30">t0</name></expr></argument>, <argument pos:start="925:33" pos:end="925:39"><expr pos:start="925:33" pos:end="925:39"><name pos:start="925:33" pos:end="925:34">t1</name> <operator pos:start="925:36" pos:end="925:36">*</operator> <name pos:start="925:38" pos:end="925:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="927:13" pos:end="930:0">break;</break>

<cpp:if pos:start="929:1" pos:end="929:26">#<cpp:directive pos:start="929:2" pos:end="929:3">if</cpp:directive> <expr pos:start="929:5" pos:end="929:26"><name pos:start="929:5" pos:end="929:26">TCG_TARGET_HAS_div_i64</name></expr></cpp:if>

        <case pos:start="931:9" pos:end="931:30">case <expr pos:start="931:14" pos:end="931:29"><name pos:start="931:14" pos:end="931:29">INDEX_op_div_i64</name></expr>:</case>

        <case pos:start="933:9" pos:end="933:31">case <expr pos:start="933:14" pos:end="933:30"><name pos:start="933:14" pos:end="933:30">INDEX_op_divu_i64</name></expr>:</case>

        <case pos:start="935:9" pos:end="935:30">case <expr pos:start="935:14" pos:end="935:29"><name pos:start="935:14" pos:end="935:29">INDEX_op_rem_i64</name></expr>:</case>

        <case pos:start="937:9" pos:end="937:31">case <expr pos:start="937:14" pos:end="937:30"><name pos:start="937:14" pos:end="937:30">INDEX_op_remu_i64</name></expr>:</case>

            <expr_stmt pos:start="939:13" pos:end="939:19"><expr pos:start="939:13" pos:end="939:18"><call pos:start="939:13" pos:end="939:18"><name pos:start="939:13" pos:end="939:16">TODO</name><argument_list pos:start="939:17" pos:end="939:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="941:13" pos:end="944:0">break;</break>

<cpp:elif pos:start="943:1" pos:end="943:29">#<cpp:directive pos:start="943:2" pos:end="943:5">elif</cpp:directive> <expr pos:start="943:7" pos:end="943:29"><name pos:start="943:7" pos:end="943:29">TCG_TARGET_HAS_div2_i64</name></expr></cpp:elif>

        <case pos:start="945:9" pos:end="945:31">case <expr pos:start="945:14" pos:end="945:30"><name pos:start="945:14" pos:end="945:30">INDEX_op_div2_i64</name></expr>:</case>

        <case pos:start="947:9" pos:end="947:32">case <expr pos:start="947:14" pos:end="947:31"><name pos:start="947:14" pos:end="947:31">INDEX_op_divu2_i64</name></expr>:</case>

            <expr_stmt pos:start="949:13" pos:end="949:19"><expr pos:start="949:13" pos:end="949:18"><call pos:start="949:13" pos:end="949:18"><name pos:start="949:13" pos:end="949:16">TODO</name><argument_list pos:start="949:17" pos:end="949:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="951:13" pos:end="954:0">break;</break>

<cpp:endif pos:start="953:1" pos:end="953:6">#<cpp:directive pos:start="953:2" pos:end="953:6">endif</cpp:directive></cpp:endif>

        <case pos:start="955:9" pos:end="955:30">case <expr pos:start="955:14" pos:end="955:29"><name pos:start="955:14" pos:end="955:29">INDEX_op_and_i64</name></expr>:</case>

            <expr_stmt pos:start="957:13" pos:end="957:27"><expr pos:start="957:13" pos:end="957:26"><name pos:start="957:13" pos:end="957:14">t0</name> <operator pos:start="957:16" pos:end="957:16">=</operator> <operator pos:start="957:18" pos:end="957:18">*</operator><name pos:start="957:19" pos:end="957:24">tb_ptr</name><operator pos:start="957:25" pos:end="957:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="959:13" pos:end="959:40"><expr pos:start="959:13" pos:end="959:39"><name pos:start="959:13" pos:end="959:14">t1</name> <operator pos:start="959:16" pos:end="959:16">=</operator> <call pos:start="959:18" pos:end="959:39"><name pos:start="959:18" pos:end="959:30">tci_read_ri64</name><argument_list pos:start="959:31" pos:end="959:39">(<argument pos:start="959:32" pos:end="959:38"><expr pos:start="959:32" pos:end="959:38"><operator pos:start="959:32" pos:end="959:32">&amp;</operator><name pos:start="959:33" pos:end="959:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="961:13" pos:end="961:40"><expr pos:start="961:13" pos:end="961:39"><name pos:start="961:13" pos:end="961:14">t2</name> <operator pos:start="961:16" pos:end="961:16">=</operator> <call pos:start="961:18" pos:end="961:39"><name pos:start="961:18" pos:end="961:30">tci_read_ri64</name><argument_list pos:start="961:31" pos:end="961:39">(<argument pos:start="961:32" pos:end="961:38"><expr pos:start="961:32" pos:end="961:38"><operator pos:start="961:32" pos:end="961:32">&amp;</operator><name pos:start="961:33" pos:end="961:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="963:13" pos:end="963:41"><expr pos:start="963:13" pos:end="963:40"><call pos:start="963:13" pos:end="963:40"><name pos:start="963:13" pos:end="963:27">tci_write_reg64</name><argument_list pos:start="963:28" pos:end="963:40">(<argument pos:start="963:29" pos:end="963:30"><expr pos:start="963:29" pos:end="963:30"><name pos:start="963:29" pos:end="963:30">t0</name></expr></argument>, <argument pos:start="963:33" pos:end="963:39"><expr pos:start="963:33" pos:end="963:39"><name pos:start="963:33" pos:end="963:34">t1</name> <operator pos:start="963:36" pos:end="963:36">&amp;</operator> <name pos:start="963:38" pos:end="963:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="965:13" pos:end="965:18">break;</break>

        <case pos:start="967:9" pos:end="967:29">case <expr pos:start="967:14" pos:end="967:28"><name pos:start="967:14" pos:end="967:28">INDEX_op_or_i64</name></expr>:</case>

            <expr_stmt pos:start="969:13" pos:end="969:27"><expr pos:start="969:13" pos:end="969:26"><name pos:start="969:13" pos:end="969:14">t0</name> <operator pos:start="969:16" pos:end="969:16">=</operator> <operator pos:start="969:18" pos:end="969:18">*</operator><name pos:start="969:19" pos:end="969:24">tb_ptr</name><operator pos:start="969:25" pos:end="969:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="971:13" pos:end="971:40"><expr pos:start="971:13" pos:end="971:39"><name pos:start="971:13" pos:end="971:14">t1</name> <operator pos:start="971:16" pos:end="971:16">=</operator> <call pos:start="971:18" pos:end="971:39"><name pos:start="971:18" pos:end="971:30">tci_read_ri64</name><argument_list pos:start="971:31" pos:end="971:39">(<argument pos:start="971:32" pos:end="971:38"><expr pos:start="971:32" pos:end="971:38"><operator pos:start="971:32" pos:end="971:32">&amp;</operator><name pos:start="971:33" pos:end="971:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="973:13" pos:end="973:40"><expr pos:start="973:13" pos:end="973:39"><name pos:start="973:13" pos:end="973:14">t2</name> <operator pos:start="973:16" pos:end="973:16">=</operator> <call pos:start="973:18" pos:end="973:39"><name pos:start="973:18" pos:end="973:30">tci_read_ri64</name><argument_list pos:start="973:31" pos:end="973:39">(<argument pos:start="973:32" pos:end="973:38"><expr pos:start="973:32" pos:end="973:38"><operator pos:start="973:32" pos:end="973:32">&amp;</operator><name pos:start="973:33" pos:end="973:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:41"><expr pos:start="975:13" pos:end="975:40"><call pos:start="975:13" pos:end="975:40"><name pos:start="975:13" pos:end="975:27">tci_write_reg64</name><argument_list pos:start="975:28" pos:end="975:40">(<argument pos:start="975:29" pos:end="975:30"><expr pos:start="975:29" pos:end="975:30"><name pos:start="975:29" pos:end="975:30">t0</name></expr></argument>, <argument pos:start="975:33" pos:end="975:39"><expr pos:start="975:33" pos:end="975:39"><name pos:start="975:33" pos:end="975:34">t1</name> <operator pos:start="975:36" pos:end="975:36">|</operator> <name pos:start="975:38" pos:end="975:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="977:13" pos:end="977:18">break;</break>

        <case pos:start="979:9" pos:end="979:30">case <expr pos:start="979:14" pos:end="979:29"><name pos:start="979:14" pos:end="979:29">INDEX_op_xor_i64</name></expr>:</case>

            <expr_stmt pos:start="981:13" pos:end="981:27"><expr pos:start="981:13" pos:end="981:26"><name pos:start="981:13" pos:end="981:14">t0</name> <operator pos:start="981:16" pos:end="981:16">=</operator> <operator pos:start="981:18" pos:end="981:18">*</operator><name pos:start="981:19" pos:end="981:24">tb_ptr</name><operator pos:start="981:25" pos:end="981:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="983:13" pos:end="983:40"><expr pos:start="983:13" pos:end="983:39"><name pos:start="983:13" pos:end="983:14">t1</name> <operator pos:start="983:16" pos:end="983:16">=</operator> <call pos:start="983:18" pos:end="983:39"><name pos:start="983:18" pos:end="983:30">tci_read_ri64</name><argument_list pos:start="983:31" pos:end="983:39">(<argument pos:start="983:32" pos:end="983:38"><expr pos:start="983:32" pos:end="983:38"><operator pos:start="983:32" pos:end="983:32">&amp;</operator><name pos:start="983:33" pos:end="983:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="985:13" pos:end="985:40"><expr pos:start="985:13" pos:end="985:39"><name pos:start="985:13" pos:end="985:14">t2</name> <operator pos:start="985:16" pos:end="985:16">=</operator> <call pos:start="985:18" pos:end="985:39"><name pos:start="985:18" pos:end="985:30">tci_read_ri64</name><argument_list pos:start="985:31" pos:end="985:39">(<argument pos:start="985:32" pos:end="985:38"><expr pos:start="985:32" pos:end="985:38"><operator pos:start="985:32" pos:end="985:32">&amp;</operator><name pos:start="985:33" pos:end="985:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="987:13" pos:end="987:41"><expr pos:start="987:13" pos:end="987:40"><call pos:start="987:13" pos:end="987:40"><name pos:start="987:13" pos:end="987:27">tci_write_reg64</name><argument_list pos:start="987:28" pos:end="987:40">(<argument pos:start="987:29" pos:end="987:30"><expr pos:start="987:29" pos:end="987:30"><name pos:start="987:29" pos:end="987:30">t0</name></expr></argument>, <argument pos:start="987:33" pos:end="987:39"><expr pos:start="987:33" pos:end="987:39"><name pos:start="987:33" pos:end="987:34">t1</name> <operator pos:start="987:36" pos:end="987:36">^</operator> <name pos:start="987:38" pos:end="987:39">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="989:13" pos:end="989:18">break;</break>



            <comment type="block" pos:start="993:13" pos:end="993:51">/* Shift/rotate operations (64 bit). */</comment>



        <case pos:start="997:9" pos:end="997:30">case <expr pos:start="997:14" pos:end="997:29"><name pos:start="997:14" pos:end="997:29">INDEX_op_shl_i64</name></expr>:</case>

            <expr_stmt pos:start="999:13" pos:end="999:27"><expr pos:start="999:13" pos:end="999:26"><name pos:start="999:13" pos:end="999:14">t0</name> <operator pos:start="999:16" pos:end="999:16">=</operator> <operator pos:start="999:18" pos:end="999:18">*</operator><name pos:start="999:19" pos:end="999:24">tb_ptr</name><operator pos:start="999:25" pos:end="999:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1001:13" pos:end="1001:40"><expr pos:start="1001:13" pos:end="1001:39"><name pos:start="1001:13" pos:end="1001:14">t1</name> <operator pos:start="1001:16" pos:end="1001:16">=</operator> <call pos:start="1001:18" pos:end="1001:39"><name pos:start="1001:18" pos:end="1001:30">tci_read_ri64</name><argument_list pos:start="1001:31" pos:end="1001:39">(<argument pos:start="1001:32" pos:end="1001:38"><expr pos:start="1001:32" pos:end="1001:38"><operator pos:start="1001:32" pos:end="1001:32">&amp;</operator><name pos:start="1001:33" pos:end="1001:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1003:13" pos:end="1003:40"><expr pos:start="1003:13" pos:end="1003:39"><name pos:start="1003:13" pos:end="1003:14">t2</name> <operator pos:start="1003:16" pos:end="1003:16">=</operator> <call pos:start="1003:18" pos:end="1003:39"><name pos:start="1003:18" pos:end="1003:30">tci_read_ri64</name><argument_list pos:start="1003:31" pos:end="1003:39">(<argument pos:start="1003:32" pos:end="1003:38"><expr pos:start="1003:32" pos:end="1003:38"><operator pos:start="1003:32" pos:end="1003:32">&amp;</operator><name pos:start="1003:33" pos:end="1003:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1005:13" pos:end="1005:42"><expr pos:start="1005:13" pos:end="1005:41"><call pos:start="1005:13" pos:end="1005:41"><name pos:start="1005:13" pos:end="1005:27">tci_write_reg64</name><argument_list pos:start="1005:28" pos:end="1005:41">(<argument pos:start="1005:29" pos:end="1005:30"><expr pos:start="1005:29" pos:end="1005:30"><name pos:start="1005:29" pos:end="1005:30">t0</name></expr></argument>, <argument pos:start="1005:33" pos:end="1005:40"><expr pos:start="1005:33" pos:end="1005:40"><name pos:start="1005:33" pos:end="1005:34">t1</name> <operator pos:start="1005:36" pos:end="1005:37">&lt;&lt;</operator> <name pos:start="1005:39" pos:end="1005:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1007:13" pos:end="1007:18">break;</break>

        <case pos:start="1009:9" pos:end="1009:30">case <expr pos:start="1009:14" pos:end="1009:29"><name pos:start="1009:14" pos:end="1009:29">INDEX_op_shr_i64</name></expr>:</case>

            <expr_stmt pos:start="1011:13" pos:end="1011:27"><expr pos:start="1011:13" pos:end="1011:26"><name pos:start="1011:13" pos:end="1011:14">t0</name> <operator pos:start="1011:16" pos:end="1011:16">=</operator> <operator pos:start="1011:18" pos:end="1011:18">*</operator><name pos:start="1011:19" pos:end="1011:24">tb_ptr</name><operator pos:start="1011:25" pos:end="1011:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1013:13" pos:end="1013:40"><expr pos:start="1013:13" pos:end="1013:39"><name pos:start="1013:13" pos:end="1013:14">t1</name> <operator pos:start="1013:16" pos:end="1013:16">=</operator> <call pos:start="1013:18" pos:end="1013:39"><name pos:start="1013:18" pos:end="1013:30">tci_read_ri64</name><argument_list pos:start="1013:31" pos:end="1013:39">(<argument pos:start="1013:32" pos:end="1013:38"><expr pos:start="1013:32" pos:end="1013:38"><operator pos:start="1013:32" pos:end="1013:32">&amp;</operator><name pos:start="1013:33" pos:end="1013:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1015:13" pos:end="1015:40"><expr pos:start="1015:13" pos:end="1015:39"><name pos:start="1015:13" pos:end="1015:14">t2</name> <operator pos:start="1015:16" pos:end="1015:16">=</operator> <call pos:start="1015:18" pos:end="1015:39"><name pos:start="1015:18" pos:end="1015:30">tci_read_ri64</name><argument_list pos:start="1015:31" pos:end="1015:39">(<argument pos:start="1015:32" pos:end="1015:38"><expr pos:start="1015:32" pos:end="1015:38"><operator pos:start="1015:32" pos:end="1015:32">&amp;</operator><name pos:start="1015:33" pos:end="1015:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1017:13" pos:end="1017:42"><expr pos:start="1017:13" pos:end="1017:41"><call pos:start="1017:13" pos:end="1017:41"><name pos:start="1017:13" pos:end="1017:27">tci_write_reg64</name><argument_list pos:start="1017:28" pos:end="1017:41">(<argument pos:start="1017:29" pos:end="1017:30"><expr pos:start="1017:29" pos:end="1017:30"><name pos:start="1017:29" pos:end="1017:30">t0</name></expr></argument>, <argument pos:start="1017:33" pos:end="1017:40"><expr pos:start="1017:33" pos:end="1017:40"><name pos:start="1017:33" pos:end="1017:34">t1</name> <operator pos:start="1017:36" pos:end="1017:37">&gt;&gt;</operator> <name pos:start="1017:39" pos:end="1017:40">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1019:13" pos:end="1019:18">break;</break>

        <case pos:start="1021:9" pos:end="1021:30">case <expr pos:start="1021:14" pos:end="1021:29"><name pos:start="1021:14" pos:end="1021:29">INDEX_op_sar_i64</name></expr>:</case>

            <expr_stmt pos:start="1023:13" pos:end="1023:27"><expr pos:start="1023:13" pos:end="1023:26"><name pos:start="1023:13" pos:end="1023:14">t0</name> <operator pos:start="1023:16" pos:end="1023:16">=</operator> <operator pos:start="1023:18" pos:end="1023:18">*</operator><name pos:start="1023:19" pos:end="1023:24">tb_ptr</name><operator pos:start="1023:25" pos:end="1023:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1025:13" pos:end="1025:40"><expr pos:start="1025:13" pos:end="1025:39"><name pos:start="1025:13" pos:end="1025:14">t1</name> <operator pos:start="1025:16" pos:end="1025:16">=</operator> <call pos:start="1025:18" pos:end="1025:39"><name pos:start="1025:18" pos:end="1025:30">tci_read_ri64</name><argument_list pos:start="1025:31" pos:end="1025:39">(<argument pos:start="1025:32" pos:end="1025:38"><expr pos:start="1025:32" pos:end="1025:38"><operator pos:start="1025:32" pos:end="1025:32">&amp;</operator><name pos:start="1025:33" pos:end="1025:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1027:13" pos:end="1027:40"><expr pos:start="1027:13" pos:end="1027:39"><name pos:start="1027:13" pos:end="1027:14">t2</name> <operator pos:start="1027:16" pos:end="1027:16">=</operator> <call pos:start="1027:18" pos:end="1027:39"><name pos:start="1027:18" pos:end="1027:30">tci_read_ri64</name><argument_list pos:start="1027:31" pos:end="1027:39">(<argument pos:start="1027:32" pos:end="1027:38"><expr pos:start="1027:32" pos:end="1027:38"><operator pos:start="1027:32" pos:end="1027:32">&amp;</operator><name pos:start="1027:33" pos:end="1027:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1029:13" pos:end="1029:53"><expr pos:start="1029:13" pos:end="1029:52"><call pos:start="1029:13" pos:end="1029:52"><name pos:start="1029:13" pos:end="1029:27">tci_write_reg64</name><argument_list pos:start="1029:28" pos:end="1029:52">(<argument pos:start="1029:29" pos:end="1029:30"><expr pos:start="1029:29" pos:end="1029:30"><name pos:start="1029:29" pos:end="1029:30">t0</name></expr></argument>, <argument pos:start="1029:33" pos:end="1029:51"><expr pos:start="1029:33" pos:end="1029:51"><operator pos:start="1029:33" pos:end="1029:33">(</operator><operator pos:start="1029:34" pos:end="1029:34">(</operator><name pos:start="1029:35" pos:end="1029:41">int64_t</name><operator pos:start="1029:42" pos:end="1029:42">)</operator><name pos:start="1029:43" pos:end="1029:44">t1</name> <operator pos:start="1029:46" pos:end="1029:47">&gt;&gt;</operator> <name pos:start="1029:49" pos:end="1029:50">t2</name><operator pos:start="1029:51" pos:end="1029:51">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1031:13" pos:end="1034:0">break;</break>

<cpp:if pos:start="1033:1" pos:end="1033:26">#<cpp:directive pos:start="1033:2" pos:end="1033:3">if</cpp:directive> <expr pos:start="1033:5" pos:end="1033:26"><name pos:start="1033:5" pos:end="1033:26">TCG_TARGET_HAS_rot_i64</name></expr></cpp:if>

        <case pos:start="1035:9" pos:end="1035:31">case <expr pos:start="1035:14" pos:end="1035:30"><name pos:start="1035:14" pos:end="1035:30">INDEX_op_rotl_i64</name></expr>:</case>

            <expr_stmt pos:start="1037:13" pos:end="1037:27"><expr pos:start="1037:13" pos:end="1037:26"><name pos:start="1037:13" pos:end="1037:14">t0</name> <operator pos:start="1037:16" pos:end="1037:16">=</operator> <operator pos:start="1037:18" pos:end="1037:18">*</operator><name pos:start="1037:19" pos:end="1037:24">tb_ptr</name><operator pos:start="1037:25" pos:end="1037:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1039:13" pos:end="1039:40"><expr pos:start="1039:13" pos:end="1039:39"><name pos:start="1039:13" pos:end="1039:14">t1</name> <operator pos:start="1039:16" pos:end="1039:16">=</operator> <call pos:start="1039:18" pos:end="1039:39"><name pos:start="1039:18" pos:end="1039:30">tci_read_ri64</name><argument_list pos:start="1039:31" pos:end="1039:39">(<argument pos:start="1039:32" pos:end="1039:38"><expr pos:start="1039:32" pos:end="1039:38"><operator pos:start="1039:32" pos:end="1039:32">&amp;</operator><name pos:start="1039:33" pos:end="1039:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1041:13" pos:end="1041:40"><expr pos:start="1041:13" pos:end="1041:39"><name pos:start="1041:13" pos:end="1041:14">t2</name> <operator pos:start="1041:16" pos:end="1041:16">=</operator> <call pos:start="1041:18" pos:end="1041:39"><name pos:start="1041:18" pos:end="1041:30">tci_read_ri64</name><argument_list pos:start="1041:31" pos:end="1041:39">(<argument pos:start="1041:32" pos:end="1041:38"><expr pos:start="1041:32" pos:end="1041:38"><operator pos:start="1041:32" pos:end="1041:32">&amp;</operator><name pos:start="1041:33" pos:end="1041:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1043:13" pos:end="1043:47"><expr pos:start="1043:13" pos:end="1043:46"><call pos:start="1043:13" pos:end="1043:46"><name pos:start="1043:13" pos:end="1043:27">tci_write_reg64</name><argument_list pos:start="1043:28" pos:end="1043:46">(<argument pos:start="1043:29" pos:end="1043:30"><expr pos:start="1043:29" pos:end="1043:30"><name pos:start="1043:29" pos:end="1043:30">t0</name></expr></argument>, <argument pos:start="1043:33" pos:end="1043:45"><expr pos:start="1043:33" pos:end="1043:45"><call pos:start="1043:33" pos:end="1043:45"><name pos:start="1043:33" pos:end="1043:37">rol64</name><argument_list pos:start="1043:38" pos:end="1043:45">(<argument pos:start="1043:39" pos:end="1043:40"><expr pos:start="1043:39" pos:end="1043:40"><name pos:start="1043:39" pos:end="1043:40">t1</name></expr></argument>, <argument pos:start="1043:43" pos:end="1043:44"><expr pos:start="1043:43" pos:end="1043:44"><name pos:start="1043:43" pos:end="1043:44">t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1045:13" pos:end="1045:18">break;</break>

        <case pos:start="1047:9" pos:end="1047:31">case <expr pos:start="1047:14" pos:end="1047:30"><name pos:start="1047:14" pos:end="1047:30">INDEX_op_rotr_i64</name></expr>:</case>

            <expr_stmt pos:start="1049:13" pos:end="1049:27"><expr pos:start="1049:13" pos:end="1049:26"><name pos:start="1049:13" pos:end="1049:14">t0</name> <operator pos:start="1049:16" pos:end="1049:16">=</operator> <operator pos:start="1049:18" pos:end="1049:18">*</operator><name pos:start="1049:19" pos:end="1049:24">tb_ptr</name><operator pos:start="1049:25" pos:end="1049:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1051:13" pos:end="1051:40"><expr pos:start="1051:13" pos:end="1051:39"><name pos:start="1051:13" pos:end="1051:14">t1</name> <operator pos:start="1051:16" pos:end="1051:16">=</operator> <call pos:start="1051:18" pos:end="1051:39"><name pos:start="1051:18" pos:end="1051:30">tci_read_ri64</name><argument_list pos:start="1051:31" pos:end="1051:39">(<argument pos:start="1051:32" pos:end="1051:38"><expr pos:start="1051:32" pos:end="1051:38"><operator pos:start="1051:32" pos:end="1051:32">&amp;</operator><name pos:start="1051:33" pos:end="1051:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1053:13" pos:end="1053:40"><expr pos:start="1053:13" pos:end="1053:39"><name pos:start="1053:13" pos:end="1053:14">t2</name> <operator pos:start="1053:16" pos:end="1053:16">=</operator> <call pos:start="1053:18" pos:end="1053:39"><name pos:start="1053:18" pos:end="1053:30">tci_read_ri64</name><argument_list pos:start="1053:31" pos:end="1053:39">(<argument pos:start="1053:32" pos:end="1053:38"><expr pos:start="1053:32" pos:end="1053:38"><operator pos:start="1053:32" pos:end="1053:32">&amp;</operator><name pos:start="1053:33" pos:end="1053:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1055:13" pos:end="1055:47"><expr pos:start="1055:13" pos:end="1055:46"><call pos:start="1055:13" pos:end="1055:46"><name pos:start="1055:13" pos:end="1055:27">tci_write_reg64</name><argument_list pos:start="1055:28" pos:end="1055:46">(<argument pos:start="1055:29" pos:end="1055:30"><expr pos:start="1055:29" pos:end="1055:30"><name pos:start="1055:29" pos:end="1055:30">t0</name></expr></argument>, <argument pos:start="1055:33" pos:end="1055:45"><expr pos:start="1055:33" pos:end="1055:45"><call pos:start="1055:33" pos:end="1055:45"><name pos:start="1055:33" pos:end="1055:37">ror64</name><argument_list pos:start="1055:38" pos:end="1055:45">(<argument pos:start="1055:39" pos:end="1055:40"><expr pos:start="1055:39" pos:end="1055:40"><name pos:start="1055:39" pos:end="1055:40">t1</name></expr></argument>, <argument pos:start="1055:43" pos:end="1055:44"><expr pos:start="1055:43" pos:end="1055:44"><name pos:start="1055:43" pos:end="1055:44">t2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1057:13" pos:end="1062:0">break;</break>

<cpp:endif pos:start="1059:1" pos:end="1059:6">#<cpp:directive pos:start="1059:2" pos:end="1059:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1061:1" pos:end="1061:30">#<cpp:directive pos:start="1061:2" pos:end="1061:3">if</cpp:directive> <expr pos:start="1061:5" pos:end="1061:30"><name pos:start="1061:5" pos:end="1061:30">TCG_TARGET_HAS_deposit_i64</name></expr></cpp:if>

        <case pos:start="1063:9" pos:end="1063:34">case <expr pos:start="1063:14" pos:end="1063:33"><name pos:start="1063:14" pos:end="1063:33">INDEX_op_deposit_i64</name></expr>:</case>

            <expr_stmt pos:start="1065:13" pos:end="1065:27"><expr pos:start="1065:13" pos:end="1065:26"><name pos:start="1065:13" pos:end="1065:14">t0</name> <operator pos:start="1065:16" pos:end="1065:16">=</operator> <operator pos:start="1065:18" pos:end="1065:18">*</operator><name pos:start="1065:19" pos:end="1065:24">tb_ptr</name><operator pos:start="1065:25" pos:end="1065:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1067:13" pos:end="1067:39"><expr pos:start="1067:13" pos:end="1067:38"><name pos:start="1067:13" pos:end="1067:14">t1</name> <operator pos:start="1067:16" pos:end="1067:16">=</operator> <call pos:start="1067:18" pos:end="1067:38"><name pos:start="1067:18" pos:end="1067:29">tci_read_r64</name><argument_list pos:start="1067:30" pos:end="1067:38">(<argument pos:start="1067:31" pos:end="1067:37"><expr pos:start="1067:31" pos:end="1067:37"><operator pos:start="1067:31" pos:end="1067:31">&amp;</operator><name pos:start="1067:32" pos:end="1067:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1069:13" pos:end="1069:39"><expr pos:start="1069:13" pos:end="1069:38"><name pos:start="1069:13" pos:end="1069:14">t2</name> <operator pos:start="1069:16" pos:end="1069:16">=</operator> <call pos:start="1069:18" pos:end="1069:38"><name pos:start="1069:18" pos:end="1069:29">tci_read_r64</name><argument_list pos:start="1069:30" pos:end="1069:38">(<argument pos:start="1069:31" pos:end="1069:37"><expr pos:start="1069:31" pos:end="1069:37"><operator pos:start="1069:31" pos:end="1069:31">&amp;</operator><name pos:start="1069:32" pos:end="1069:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1071:13" pos:end="1071:30"><expr pos:start="1071:13" pos:end="1071:29"><name pos:start="1071:13" pos:end="1071:17">tmp16</name> <operator pos:start="1071:19" pos:end="1071:19">=</operator> <operator pos:start="1071:21" pos:end="1071:21">*</operator><name pos:start="1071:22" pos:end="1071:27">tb_ptr</name><operator pos:start="1071:28" pos:end="1071:29">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1073:13" pos:end="1073:29"><expr pos:start="1073:13" pos:end="1073:28"><name pos:start="1073:13" pos:end="1073:16">tmp8</name> <operator pos:start="1073:18" pos:end="1073:18">=</operator> <operator pos:start="1073:20" pos:end="1073:20">*</operator><name pos:start="1073:21" pos:end="1073:26">tb_ptr</name><operator pos:start="1073:27" pos:end="1073:28">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1075:13" pos:end="1075:52"><expr pos:start="1075:13" pos:end="1075:51"><name pos:start="1075:13" pos:end="1075:17">tmp64</name> <operator pos:start="1075:19" pos:end="1075:19">=</operator> <operator pos:start="1075:21" pos:end="1075:21">(</operator><operator pos:start="1075:22" pos:end="1075:22">(</operator><operator pos:start="1075:23" pos:end="1075:23">(</operator><literal type="number" pos:start="1075:24" pos:end="1075:27">1ULL</literal> <operator pos:start="1075:29" pos:end="1075:30">&lt;&lt;</operator> <name pos:start="1075:32" pos:end="1075:35">tmp8</name><operator pos:start="1075:36" pos:end="1075:36">)</operator> <operator pos:start="1075:38" pos:end="1075:38">-</operator> <literal type="number" pos:start="1075:40" pos:end="1075:40">1</literal><operator pos:start="1075:41" pos:end="1075:41">)</operator> <operator pos:start="1075:43" pos:end="1075:44">&lt;&lt;</operator> <name pos:start="1075:46" pos:end="1075:50">tmp16</name><operator pos:start="1075:51" pos:end="1075:51">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1077:13" pos:end="1077:73"><expr pos:start="1077:13" pos:end="1077:72"><call pos:start="1077:13" pos:end="1077:72"><name pos:start="1077:13" pos:end="1077:27">tci_write_reg64</name><argument_list pos:start="1077:28" pos:end="1077:72">(<argument pos:start="1077:29" pos:end="1077:30"><expr pos:start="1077:29" pos:end="1077:30"><name pos:start="1077:29" pos:end="1077:30">t0</name></expr></argument>, <argument pos:start="1077:33" pos:end="1077:71"><expr pos:start="1077:33" pos:end="1077:71"><operator pos:start="1077:33" pos:end="1077:33">(</operator><name pos:start="1077:34" pos:end="1077:35">t1</name> <operator pos:start="1077:37" pos:end="1077:37">&amp;</operator> <operator pos:start="1077:39" pos:end="1077:39">~</operator><name pos:start="1077:40" pos:end="1077:44">tmp64</name><operator pos:start="1077:45" pos:end="1077:45">)</operator> <operator pos:start="1077:47" pos:end="1077:47">|</operator> <operator pos:start="1077:49" pos:end="1077:49">(</operator><operator pos:start="1077:50" pos:end="1077:50">(</operator><name pos:start="1077:51" pos:end="1077:52">t2</name> <operator pos:start="1077:54" pos:end="1077:55">&lt;&lt;</operator> <name pos:start="1077:57" pos:end="1077:61">tmp16</name><operator pos:start="1077:62" pos:end="1077:62">)</operator> <operator pos:start="1077:64" pos:end="1077:64">&amp;</operator> <name pos:start="1077:66" pos:end="1077:70">tmp64</name><operator pos:start="1077:71" pos:end="1077:71">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1079:13" pos:end="1082:0">break;</break>

<cpp:endif pos:start="1081:1" pos:end="1081:6">#<cpp:directive pos:start="1081:2" pos:end="1081:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1083:9" pos:end="1083:33">case <expr pos:start="1083:14" pos:end="1083:32"><name pos:start="1083:14" pos:end="1083:32">INDEX_op_brcond_i64</name></expr>:</case>

            <expr_stmt pos:start="1085:13" pos:end="1085:39"><expr pos:start="1085:13" pos:end="1085:38"><name pos:start="1085:13" pos:end="1085:14">t0</name> <operator pos:start="1085:16" pos:end="1085:16">=</operator> <call pos:start="1085:18" pos:end="1085:38"><name pos:start="1085:18" pos:end="1085:29">tci_read_r64</name><argument_list pos:start="1085:30" pos:end="1085:38">(<argument pos:start="1085:31" pos:end="1085:37"><expr pos:start="1085:31" pos:end="1085:37"><operator pos:start="1085:31" pos:end="1085:31">&amp;</operator><name pos:start="1085:32" pos:end="1085:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1087:13" pos:end="1087:40"><expr pos:start="1087:13" pos:end="1087:39"><name pos:start="1087:13" pos:end="1087:14">t1</name> <operator pos:start="1087:16" pos:end="1087:16">=</operator> <call pos:start="1087:18" pos:end="1087:39"><name pos:start="1087:18" pos:end="1087:30">tci_read_ri64</name><argument_list pos:start="1087:31" pos:end="1087:39">(<argument pos:start="1087:32" pos:end="1087:38"><expr pos:start="1087:32" pos:end="1087:38"><operator pos:start="1087:32" pos:end="1087:32">&amp;</operator><name pos:start="1087:33" pos:end="1087:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1089:13" pos:end="1089:34"><expr pos:start="1089:13" pos:end="1089:33"><name pos:start="1089:13" pos:end="1089:21">condition</name> <operator pos:start="1089:23" pos:end="1089:23">=</operator> <operator pos:start="1089:25" pos:end="1089:25">*</operator><name pos:start="1089:26" pos:end="1089:31">tb_ptr</name><operator pos:start="1089:32" pos:end="1089:33">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1091:13" pos:end="1091:44"><expr pos:start="1091:13" pos:end="1091:43"><name pos:start="1091:13" pos:end="1091:17">label</name> <operator pos:start="1091:19" pos:end="1091:19">=</operator> <call pos:start="1091:21" pos:end="1091:43"><name pos:start="1091:21" pos:end="1091:34">tci_read_label</name><argument_list pos:start="1091:35" pos:end="1091:43">(<argument pos:start="1091:36" pos:end="1091:42"><expr pos:start="1091:36" pos:end="1091:42"><operator pos:start="1091:36" pos:end="1091:36">&amp;</operator><name pos:start="1091:37" pos:end="1091:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1093:13" pos:end="1101:13"><if pos:start="1093:13" pos:end="1101:13">if <condition pos:start="1093:16" pos:end="1093:49">(<expr pos:start="1093:17" pos:end="1093:48"><call pos:start="1093:17" pos:end="1093:48"><name pos:start="1093:17" pos:end="1093:29">tci_compare64</name><argument_list pos:start="1093:30" pos:end="1093:48">(<argument pos:start="1093:31" pos:end="1093:32"><expr pos:start="1093:31" pos:end="1093:32"><name pos:start="1093:31" pos:end="1093:32">t0</name></expr></argument>, <argument pos:start="1093:35" pos:end="1093:36"><expr pos:start="1093:35" pos:end="1093:36"><name pos:start="1093:35" pos:end="1093:36">t1</name></expr></argument>, <argument pos:start="1093:39" pos:end="1093:47"><expr pos:start="1093:39" pos:end="1093:47"><name pos:start="1093:39" pos:end="1093:47">condition</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="1093:51" pos:end="1101:13">{<block_content pos:start="1095:17" pos:end="1099:25">

                <expr_stmt pos:start="1095:17" pos:end="1095:57"><expr pos:start="1095:17" pos:end="1095:56"><call pos:start="1095:17" pos:end="1095:56"><name pos:start="1095:17" pos:end="1095:22">assert</name><argument_list pos:start="1095:23" pos:end="1095:56">(<argument pos:start="1095:24" pos:end="1095:55"><expr pos:start="1095:24" pos:end="1095:55"><name pos:start="1095:24" pos:end="1095:29">tb_ptr</name> <operator pos:start="1095:31" pos:end="1095:32">==</operator> <name pos:start="1095:34" pos:end="1095:45">old_code_ptr</name> <operator pos:start="1095:47" pos:end="1095:47">+</operator> <name pos:start="1095:49" pos:end="1095:55">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1097:17" pos:end="1097:42"><expr pos:start="1097:17" pos:end="1097:41"><name pos:start="1097:17" pos:end="1097:22">tb_ptr</name> <operator pos:start="1097:24" pos:end="1097:24">=</operator> <operator pos:start="1097:26" pos:end="1097:26">(</operator><name pos:start="1097:27" pos:end="1097:33">uint8_t</name> <operator pos:start="1097:35" pos:end="1097:35">*</operator><operator pos:start="1097:36" pos:end="1097:36">)</operator><name pos:start="1097:37" pos:end="1097:41">label</name></expr>;</expr_stmt>

                <continue pos:start="1099:17" pos:end="1099:25">continue;</continue>

            </block_content>}</block></if></if_stmt>

            <break pos:start="1103:13" pos:end="1106:0">break;</break>

<cpp:if pos:start="1105:1" pos:end="1105:28">#<cpp:directive pos:start="1105:2" pos:end="1105:3">if</cpp:directive> <expr pos:start="1105:5" pos:end="1105:28"><name pos:start="1105:5" pos:end="1105:28">TCG_TARGET_HAS_ext8u_i64</name></expr></cpp:if>

        <case pos:start="1107:9" pos:end="1107:32">case <expr pos:start="1107:14" pos:end="1107:31"><name pos:start="1107:14" pos:end="1107:31">INDEX_op_ext8u_i64</name></expr>:</case>

            <expr_stmt pos:start="1109:13" pos:end="1109:27"><expr pos:start="1109:13" pos:end="1109:26"><name pos:start="1109:13" pos:end="1109:14">t0</name> <operator pos:start="1109:16" pos:end="1109:16">=</operator> <operator pos:start="1109:18" pos:end="1109:18">*</operator><name pos:start="1109:19" pos:end="1109:24">tb_ptr</name><operator pos:start="1109:25" pos:end="1109:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1111:13" pos:end="1111:38"><expr pos:start="1111:13" pos:end="1111:37"><name pos:start="1111:13" pos:end="1111:14">t1</name> <operator pos:start="1111:16" pos:end="1111:16">=</operator> <call pos:start="1111:18" pos:end="1111:37"><name pos:start="1111:18" pos:end="1111:28">tci_read_r8</name><argument_list pos:start="1111:29" pos:end="1111:37">(<argument pos:start="1111:30" pos:end="1111:36"><expr pos:start="1111:30" pos:end="1111:36"><operator pos:start="1111:30" pos:end="1111:30">&amp;</operator><name pos:start="1111:31" pos:end="1111:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1113:13" pos:end="1113:36"><expr pos:start="1113:13" pos:end="1113:35"><call pos:start="1113:13" pos:end="1113:35"><name pos:start="1113:13" pos:end="1113:27">tci_write_reg64</name><argument_list pos:start="1113:28" pos:end="1113:35">(<argument pos:start="1113:29" pos:end="1113:30"><expr pos:start="1113:29" pos:end="1113:30"><name pos:start="1113:29" pos:end="1113:30">t0</name></expr></argument>, <argument pos:start="1113:33" pos:end="1113:34"><expr pos:start="1113:33" pos:end="1113:34"><name pos:start="1113:33" pos:end="1113:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1115:13" pos:end="1120:0">break;</break>

<cpp:endif pos:start="1117:1" pos:end="1117:6">#<cpp:directive pos:start="1117:2" pos:end="1117:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1119:1" pos:end="1119:28">#<cpp:directive pos:start="1119:2" pos:end="1119:3">if</cpp:directive> <expr pos:start="1119:5" pos:end="1119:28"><name pos:start="1119:5" pos:end="1119:28">TCG_TARGET_HAS_ext8s_i64</name></expr></cpp:if>

        <case pos:start="1121:9" pos:end="1121:32">case <expr pos:start="1121:14" pos:end="1121:31"><name pos:start="1121:14" pos:end="1121:31">INDEX_op_ext8s_i64</name></expr>:</case>

            <expr_stmt pos:start="1123:13" pos:end="1123:27"><expr pos:start="1123:13" pos:end="1123:26"><name pos:start="1123:13" pos:end="1123:14">t0</name> <operator pos:start="1123:16" pos:end="1123:16">=</operator> <operator pos:start="1123:18" pos:end="1123:18">*</operator><name pos:start="1123:19" pos:end="1123:24">tb_ptr</name><operator pos:start="1123:25" pos:end="1123:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1125:13" pos:end="1125:39"><expr pos:start="1125:13" pos:end="1125:38"><name pos:start="1125:13" pos:end="1125:14">t1</name> <operator pos:start="1125:16" pos:end="1125:16">=</operator> <call pos:start="1125:18" pos:end="1125:38"><name pos:start="1125:18" pos:end="1125:29">tci_read_r8s</name><argument_list pos:start="1125:30" pos:end="1125:38">(<argument pos:start="1125:31" pos:end="1125:37"><expr pos:start="1125:31" pos:end="1125:37"><operator pos:start="1125:31" pos:end="1125:31">&amp;</operator><name pos:start="1125:32" pos:end="1125:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1127:13" pos:end="1127:36"><expr pos:start="1127:13" pos:end="1127:35"><call pos:start="1127:13" pos:end="1127:35"><name pos:start="1127:13" pos:end="1127:27">tci_write_reg64</name><argument_list pos:start="1127:28" pos:end="1127:35">(<argument pos:start="1127:29" pos:end="1127:30"><expr pos:start="1127:29" pos:end="1127:30"><name pos:start="1127:29" pos:end="1127:30">t0</name></expr></argument>, <argument pos:start="1127:33" pos:end="1127:34"><expr pos:start="1127:33" pos:end="1127:34"><name pos:start="1127:33" pos:end="1127:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1129:13" pos:end="1134:0">break;</break>

<cpp:endif pos:start="1131:1" pos:end="1131:6">#<cpp:directive pos:start="1131:2" pos:end="1131:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1133:1" pos:end="1133:29">#<cpp:directive pos:start="1133:2" pos:end="1133:3">if</cpp:directive> <expr pos:start="1133:5" pos:end="1133:29"><name pos:start="1133:5" pos:end="1133:29">TCG_TARGET_HAS_ext16s_i64</name></expr></cpp:if>

        <case pos:start="1135:9" pos:end="1135:33">case <expr pos:start="1135:14" pos:end="1135:32"><name pos:start="1135:14" pos:end="1135:32">INDEX_op_ext16s_i64</name></expr>:</case>

            <expr_stmt pos:start="1137:13" pos:end="1137:27"><expr pos:start="1137:13" pos:end="1137:26"><name pos:start="1137:13" pos:end="1137:14">t0</name> <operator pos:start="1137:16" pos:end="1137:16">=</operator> <operator pos:start="1137:18" pos:end="1137:18">*</operator><name pos:start="1137:19" pos:end="1137:24">tb_ptr</name><operator pos:start="1137:25" pos:end="1137:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1139:13" pos:end="1139:40"><expr pos:start="1139:13" pos:end="1139:39"><name pos:start="1139:13" pos:end="1139:14">t1</name> <operator pos:start="1139:16" pos:end="1139:16">=</operator> <call pos:start="1139:18" pos:end="1139:39"><name pos:start="1139:18" pos:end="1139:30">tci_read_r16s</name><argument_list pos:start="1139:31" pos:end="1139:39">(<argument pos:start="1139:32" pos:end="1139:38"><expr pos:start="1139:32" pos:end="1139:38"><operator pos:start="1139:32" pos:end="1139:32">&amp;</operator><name pos:start="1139:33" pos:end="1139:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1141:13" pos:end="1141:36"><expr pos:start="1141:13" pos:end="1141:35"><call pos:start="1141:13" pos:end="1141:35"><name pos:start="1141:13" pos:end="1141:27">tci_write_reg64</name><argument_list pos:start="1141:28" pos:end="1141:35">(<argument pos:start="1141:29" pos:end="1141:30"><expr pos:start="1141:29" pos:end="1141:30"><name pos:start="1141:29" pos:end="1141:30">t0</name></expr></argument>, <argument pos:start="1141:33" pos:end="1141:34"><expr pos:start="1141:33" pos:end="1141:34"><name pos:start="1141:33" pos:end="1141:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1143:13" pos:end="1148:0">break;</break>

<cpp:endif pos:start="1145:1" pos:end="1145:6">#<cpp:directive pos:start="1145:2" pos:end="1145:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1147:1" pos:end="1147:29">#<cpp:directive pos:start="1147:2" pos:end="1147:3">if</cpp:directive> <expr pos:start="1147:5" pos:end="1147:29"><name pos:start="1147:5" pos:end="1147:29">TCG_TARGET_HAS_ext16u_i64</name></expr></cpp:if>

        <case pos:start="1149:9" pos:end="1149:33">case <expr pos:start="1149:14" pos:end="1149:32"><name pos:start="1149:14" pos:end="1149:32">INDEX_op_ext16u_i64</name></expr>:</case>

            <expr_stmt pos:start="1151:13" pos:end="1151:27"><expr pos:start="1151:13" pos:end="1151:26"><name pos:start="1151:13" pos:end="1151:14">t0</name> <operator pos:start="1151:16" pos:end="1151:16">=</operator> <operator pos:start="1151:18" pos:end="1151:18">*</operator><name pos:start="1151:19" pos:end="1151:24">tb_ptr</name><operator pos:start="1151:25" pos:end="1151:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:39"><expr pos:start="1153:13" pos:end="1153:38"><name pos:start="1153:13" pos:end="1153:14">t1</name> <operator pos:start="1153:16" pos:end="1153:16">=</operator> <call pos:start="1153:18" pos:end="1153:38"><name pos:start="1153:18" pos:end="1153:29">tci_read_r16</name><argument_list pos:start="1153:30" pos:end="1153:38">(<argument pos:start="1153:31" pos:end="1153:37"><expr pos:start="1153:31" pos:end="1153:37"><operator pos:start="1153:31" pos:end="1153:31">&amp;</operator><name pos:start="1153:32" pos:end="1153:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1155:13" pos:end="1155:36"><expr pos:start="1155:13" pos:end="1155:35"><call pos:start="1155:13" pos:end="1155:35"><name pos:start="1155:13" pos:end="1155:27">tci_write_reg64</name><argument_list pos:start="1155:28" pos:end="1155:35">(<argument pos:start="1155:29" pos:end="1155:30"><expr pos:start="1155:29" pos:end="1155:30"><name pos:start="1155:29" pos:end="1155:30">t0</name></expr></argument>, <argument pos:start="1155:33" pos:end="1155:34"><expr pos:start="1155:33" pos:end="1155:34"><name pos:start="1155:33" pos:end="1155:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1157:13" pos:end="1162:0">break;</break>

<cpp:endif pos:start="1159:1" pos:end="1159:6">#<cpp:directive pos:start="1159:2" pos:end="1159:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1161:1" pos:end="1161:29">#<cpp:directive pos:start="1161:2" pos:end="1161:3">if</cpp:directive> <expr pos:start="1161:5" pos:end="1161:29"><name pos:start="1161:5" pos:end="1161:29">TCG_TARGET_HAS_ext32s_i64</name></expr></cpp:if>

        <case pos:start="1163:9" pos:end="1163:33">case <expr pos:start="1163:14" pos:end="1163:32"><name pos:start="1163:14" pos:end="1163:32">INDEX_op_ext32s_i64</name></expr>:</case>

            <expr_stmt pos:start="1165:13" pos:end="1165:27"><expr pos:start="1165:13" pos:end="1165:26"><name pos:start="1165:13" pos:end="1165:14">t0</name> <operator pos:start="1165:16" pos:end="1165:16">=</operator> <operator pos:start="1165:18" pos:end="1165:18">*</operator><name pos:start="1165:19" pos:end="1165:24">tb_ptr</name><operator pos:start="1165:25" pos:end="1165:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1167:13" pos:end="1167:40"><expr pos:start="1167:13" pos:end="1167:39"><name pos:start="1167:13" pos:end="1167:14">t1</name> <operator pos:start="1167:16" pos:end="1167:16">=</operator> <call pos:start="1167:18" pos:end="1167:39"><name pos:start="1167:18" pos:end="1167:30">tci_read_r32s</name><argument_list pos:start="1167:31" pos:end="1167:39">(<argument pos:start="1167:32" pos:end="1167:38"><expr pos:start="1167:32" pos:end="1167:38"><operator pos:start="1167:32" pos:end="1167:32">&amp;</operator><name pos:start="1167:33" pos:end="1167:38">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1169:13" pos:end="1169:36"><expr pos:start="1169:13" pos:end="1169:35"><call pos:start="1169:13" pos:end="1169:35"><name pos:start="1169:13" pos:end="1169:27">tci_write_reg64</name><argument_list pos:start="1169:28" pos:end="1169:35">(<argument pos:start="1169:29" pos:end="1169:30"><expr pos:start="1169:29" pos:end="1169:30"><name pos:start="1169:29" pos:end="1169:30">t0</name></expr></argument>, <argument pos:start="1169:33" pos:end="1169:34"><expr pos:start="1169:33" pos:end="1169:34"><name pos:start="1169:33" pos:end="1169:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1171:13" pos:end="1176:0">break;</break>

<cpp:endif pos:start="1173:1" pos:end="1173:6">#<cpp:directive pos:start="1173:2" pos:end="1173:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1175:1" pos:end="1175:29">#<cpp:directive pos:start="1175:2" pos:end="1175:3">if</cpp:directive> <expr pos:start="1175:5" pos:end="1175:29"><name pos:start="1175:5" pos:end="1175:29">TCG_TARGET_HAS_ext32u_i64</name></expr></cpp:if>

        <case pos:start="1177:9" pos:end="1177:33">case <expr pos:start="1177:14" pos:end="1177:32"><name pos:start="1177:14" pos:end="1177:32">INDEX_op_ext32u_i64</name></expr>:</case>

            <expr_stmt pos:start="1179:13" pos:end="1179:27"><expr pos:start="1179:13" pos:end="1179:26"><name pos:start="1179:13" pos:end="1179:14">t0</name> <operator pos:start="1179:16" pos:end="1179:16">=</operator> <operator pos:start="1179:18" pos:end="1179:18">*</operator><name pos:start="1179:19" pos:end="1179:24">tb_ptr</name><operator pos:start="1179:25" pos:end="1179:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1181:13" pos:end="1181:39"><expr pos:start="1181:13" pos:end="1181:38"><name pos:start="1181:13" pos:end="1181:14">t1</name> <operator pos:start="1181:16" pos:end="1181:16">=</operator> <call pos:start="1181:18" pos:end="1181:38"><name pos:start="1181:18" pos:end="1181:29">tci_read_r32</name><argument_list pos:start="1181:30" pos:end="1181:38">(<argument pos:start="1181:31" pos:end="1181:37"><expr pos:start="1181:31" pos:end="1181:37"><operator pos:start="1181:31" pos:end="1181:31">&amp;</operator><name pos:start="1181:32" pos:end="1181:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1183:13" pos:end="1183:36"><expr pos:start="1183:13" pos:end="1183:35"><call pos:start="1183:13" pos:end="1183:35"><name pos:start="1183:13" pos:end="1183:27">tci_write_reg64</name><argument_list pos:start="1183:28" pos:end="1183:35">(<argument pos:start="1183:29" pos:end="1183:30"><expr pos:start="1183:29" pos:end="1183:30"><name pos:start="1183:29" pos:end="1183:30">t0</name></expr></argument>, <argument pos:start="1183:33" pos:end="1183:34"><expr pos:start="1183:33" pos:end="1183:34"><name pos:start="1183:33" pos:end="1183:34">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1185:13" pos:end="1190:0">break;</break>

<cpp:endif pos:start="1187:1" pos:end="1187:6">#<cpp:directive pos:start="1187:2" pos:end="1187:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1189:1" pos:end="1189:30">#<cpp:directive pos:start="1189:2" pos:end="1189:3">if</cpp:directive> <expr pos:start="1189:5" pos:end="1189:30"><name pos:start="1189:5" pos:end="1189:30">TCG_TARGET_HAS_bswap16_i64</name></expr></cpp:if>

        <case pos:start="1191:9" pos:end="1191:34">case <expr pos:start="1191:14" pos:end="1191:33"><name pos:start="1191:14" pos:end="1191:33">INDEX_op_bswap16_i64</name></expr>:</case>

            <expr_stmt pos:start="1193:13" pos:end="1193:19"><expr pos:start="1193:13" pos:end="1193:18"><call pos:start="1193:13" pos:end="1193:18"><name pos:start="1193:13" pos:end="1193:16">TODO</name><argument_list pos:start="1193:17" pos:end="1193:18">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1195:13" pos:end="1195:27"><expr pos:start="1195:13" pos:end="1195:26"><name pos:start="1195:13" pos:end="1195:14">t0</name> <operator pos:start="1195:16" pos:end="1195:16">=</operator> <operator pos:start="1195:18" pos:end="1195:18">*</operator><name pos:start="1195:19" pos:end="1195:24">tb_ptr</name><operator pos:start="1195:25" pos:end="1195:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1197:13" pos:end="1197:39"><expr pos:start="1197:13" pos:end="1197:38"><name pos:start="1197:13" pos:end="1197:14">t1</name> <operator pos:start="1197:16" pos:end="1197:16">=</operator> <call pos:start="1197:18" pos:end="1197:38"><name pos:start="1197:18" pos:end="1197:29">tci_read_r16</name><argument_list pos:start="1197:30" pos:end="1197:38">(<argument pos:start="1197:31" pos:end="1197:37"><expr pos:start="1197:31" pos:end="1197:37"><operator pos:start="1197:31" pos:end="1197:31">&amp;</operator><name pos:start="1197:32" pos:end="1197:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1199:13" pos:end="1199:45"><expr pos:start="1199:13" pos:end="1199:44"><call pos:start="1199:13" pos:end="1199:44"><name pos:start="1199:13" pos:end="1199:27">tci_write_reg64</name><argument_list pos:start="1199:28" pos:end="1199:44">(<argument pos:start="1199:29" pos:end="1199:30"><expr pos:start="1199:29" pos:end="1199:30"><name pos:start="1199:29" pos:end="1199:30">t0</name></expr></argument>, <argument pos:start="1199:33" pos:end="1199:43"><expr pos:start="1199:33" pos:end="1199:43"><call pos:start="1199:33" pos:end="1199:43"><name pos:start="1199:33" pos:end="1199:39">bswap16</name><argument_list pos:start="1199:40" pos:end="1199:43">(<argument pos:start="1199:41" pos:end="1199:42"><expr pos:start="1199:41" pos:end="1199:42"><name pos:start="1199:41" pos:end="1199:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1201:13" pos:end="1206:0">break;</break>

<cpp:endif pos:start="1203:1" pos:end="1203:6">#<cpp:directive pos:start="1203:2" pos:end="1203:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1205:1" pos:end="1205:30">#<cpp:directive pos:start="1205:2" pos:end="1205:3">if</cpp:directive> <expr pos:start="1205:5" pos:end="1205:30"><name pos:start="1205:5" pos:end="1205:30">TCG_TARGET_HAS_bswap32_i64</name></expr></cpp:if>

        <case pos:start="1207:9" pos:end="1207:34">case <expr pos:start="1207:14" pos:end="1207:33"><name pos:start="1207:14" pos:end="1207:33">INDEX_op_bswap32_i64</name></expr>:</case>

            <expr_stmt pos:start="1209:13" pos:end="1209:27"><expr pos:start="1209:13" pos:end="1209:26"><name pos:start="1209:13" pos:end="1209:14">t0</name> <operator pos:start="1209:16" pos:end="1209:16">=</operator> <operator pos:start="1209:18" pos:end="1209:18">*</operator><name pos:start="1209:19" pos:end="1209:24">tb_ptr</name><operator pos:start="1209:25" pos:end="1209:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1211:13" pos:end="1211:39"><expr pos:start="1211:13" pos:end="1211:38"><name pos:start="1211:13" pos:end="1211:14">t1</name> <operator pos:start="1211:16" pos:end="1211:16">=</operator> <call pos:start="1211:18" pos:end="1211:38"><name pos:start="1211:18" pos:end="1211:29">tci_read_r32</name><argument_list pos:start="1211:30" pos:end="1211:38">(<argument pos:start="1211:31" pos:end="1211:37"><expr pos:start="1211:31" pos:end="1211:37"><operator pos:start="1211:31" pos:end="1211:31">&amp;</operator><name pos:start="1211:32" pos:end="1211:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1213:13" pos:end="1213:45"><expr pos:start="1213:13" pos:end="1213:44"><call pos:start="1213:13" pos:end="1213:44"><name pos:start="1213:13" pos:end="1213:27">tci_write_reg64</name><argument_list pos:start="1213:28" pos:end="1213:44">(<argument pos:start="1213:29" pos:end="1213:30"><expr pos:start="1213:29" pos:end="1213:30"><name pos:start="1213:29" pos:end="1213:30">t0</name></expr></argument>, <argument pos:start="1213:33" pos:end="1213:43"><expr pos:start="1213:33" pos:end="1213:43"><call pos:start="1213:33" pos:end="1213:43"><name pos:start="1213:33" pos:end="1213:39">bswap32</name><argument_list pos:start="1213:40" pos:end="1213:43">(<argument pos:start="1213:41" pos:end="1213:42"><expr pos:start="1213:41" pos:end="1213:42"><name pos:start="1213:41" pos:end="1213:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1215:13" pos:end="1220:0">break;</break>

<cpp:endif pos:start="1217:1" pos:end="1217:6">#<cpp:directive pos:start="1217:2" pos:end="1217:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1219:1" pos:end="1219:30">#<cpp:directive pos:start="1219:2" pos:end="1219:3">if</cpp:directive> <expr pos:start="1219:5" pos:end="1219:30"><name pos:start="1219:5" pos:end="1219:30">TCG_TARGET_HAS_bswap64_i64</name></expr></cpp:if>

        <case pos:start="1221:9" pos:end="1221:34">case <expr pos:start="1221:14" pos:end="1221:33"><name pos:start="1221:14" pos:end="1221:33">INDEX_op_bswap64_i64</name></expr>:</case>

            <expr_stmt pos:start="1223:13" pos:end="1223:27"><expr pos:start="1223:13" pos:end="1223:26"><name pos:start="1223:13" pos:end="1223:14">t0</name> <operator pos:start="1223:16" pos:end="1223:16">=</operator> <operator pos:start="1223:18" pos:end="1223:18">*</operator><name pos:start="1223:19" pos:end="1223:24">tb_ptr</name><operator pos:start="1223:25" pos:end="1223:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1225:13" pos:end="1225:39"><expr pos:start="1225:13" pos:end="1225:38"><name pos:start="1225:13" pos:end="1225:14">t1</name> <operator pos:start="1225:16" pos:end="1225:16">=</operator> <call pos:start="1225:18" pos:end="1225:38"><name pos:start="1225:18" pos:end="1225:29">tci_read_r64</name><argument_list pos:start="1225:30" pos:end="1225:38">(<argument pos:start="1225:31" pos:end="1225:37"><expr pos:start="1225:31" pos:end="1225:37"><operator pos:start="1225:31" pos:end="1225:31">&amp;</operator><name pos:start="1225:32" pos:end="1225:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1227:13" pos:end="1227:45"><expr pos:start="1227:13" pos:end="1227:44"><call pos:start="1227:13" pos:end="1227:44"><name pos:start="1227:13" pos:end="1227:27">tci_write_reg64</name><argument_list pos:start="1227:28" pos:end="1227:44">(<argument pos:start="1227:29" pos:end="1227:30"><expr pos:start="1227:29" pos:end="1227:30"><name pos:start="1227:29" pos:end="1227:30">t0</name></expr></argument>, <argument pos:start="1227:33" pos:end="1227:43"><expr pos:start="1227:33" pos:end="1227:43"><call pos:start="1227:33" pos:end="1227:43"><name pos:start="1227:33" pos:end="1227:39">bswap64</name><argument_list pos:start="1227:40" pos:end="1227:43">(<argument pos:start="1227:41" pos:end="1227:42"><expr pos:start="1227:41" pos:end="1227:42"><name pos:start="1227:41" pos:end="1227:42">t1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1229:13" pos:end="1234:0">break;</break>

<cpp:endif pos:start="1231:1" pos:end="1231:6">#<cpp:directive pos:start="1231:2" pos:end="1231:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1233:1" pos:end="1233:26">#<cpp:directive pos:start="1233:2" pos:end="1233:3">if</cpp:directive> <expr pos:start="1233:5" pos:end="1233:26"><name pos:start="1233:5" pos:end="1233:26">TCG_TARGET_HAS_not_i64</name></expr></cpp:if>

        <case pos:start="1235:9" pos:end="1235:30">case <expr pos:start="1235:14" pos:end="1235:29"><name pos:start="1235:14" pos:end="1235:29">INDEX_op_not_i64</name></expr>:</case>

            <expr_stmt pos:start="1237:13" pos:end="1237:27"><expr pos:start="1237:13" pos:end="1237:26"><name pos:start="1237:13" pos:end="1237:14">t0</name> <operator pos:start="1237:16" pos:end="1237:16">=</operator> <operator pos:start="1237:18" pos:end="1237:18">*</operator><name pos:start="1237:19" pos:end="1237:24">tb_ptr</name><operator pos:start="1237:25" pos:end="1237:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1239:13" pos:end="1239:39"><expr pos:start="1239:13" pos:end="1239:38"><name pos:start="1239:13" pos:end="1239:14">t1</name> <operator pos:start="1239:16" pos:end="1239:16">=</operator> <call pos:start="1239:18" pos:end="1239:38"><name pos:start="1239:18" pos:end="1239:29">tci_read_r64</name><argument_list pos:start="1239:30" pos:end="1239:38">(<argument pos:start="1239:31" pos:end="1239:37"><expr pos:start="1239:31" pos:end="1239:37"><operator pos:start="1239:31" pos:end="1239:31">&amp;</operator><name pos:start="1239:32" pos:end="1239:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1241:13" pos:end="1241:37"><expr pos:start="1241:13" pos:end="1241:36"><call pos:start="1241:13" pos:end="1241:36"><name pos:start="1241:13" pos:end="1241:27">tci_write_reg64</name><argument_list pos:start="1241:28" pos:end="1241:36">(<argument pos:start="1241:29" pos:end="1241:30"><expr pos:start="1241:29" pos:end="1241:30"><name pos:start="1241:29" pos:end="1241:30">t0</name></expr></argument>, <argument pos:start="1241:33" pos:end="1241:35"><expr pos:start="1241:33" pos:end="1241:35"><operator pos:start="1241:33" pos:end="1241:33">~</operator><name pos:start="1241:34" pos:end="1241:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1243:13" pos:end="1248:0">break;</break>

<cpp:endif pos:start="1245:1" pos:end="1245:6">#<cpp:directive pos:start="1245:2" pos:end="1245:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="1247:1" pos:end="1247:26">#<cpp:directive pos:start="1247:2" pos:end="1247:3">if</cpp:directive> <expr pos:start="1247:5" pos:end="1247:26"><name pos:start="1247:5" pos:end="1247:26">TCG_TARGET_HAS_neg_i64</name></expr></cpp:if>

        <case pos:start="1249:9" pos:end="1249:30">case <expr pos:start="1249:14" pos:end="1249:29"><name pos:start="1249:14" pos:end="1249:29">INDEX_op_neg_i64</name></expr>:</case>

            <expr_stmt pos:start="1251:13" pos:end="1251:27"><expr pos:start="1251:13" pos:end="1251:26"><name pos:start="1251:13" pos:end="1251:14">t0</name> <operator pos:start="1251:16" pos:end="1251:16">=</operator> <operator pos:start="1251:18" pos:end="1251:18">*</operator><name pos:start="1251:19" pos:end="1251:24">tb_ptr</name><operator pos:start="1251:25" pos:end="1251:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1253:13" pos:end="1253:39"><expr pos:start="1253:13" pos:end="1253:38"><name pos:start="1253:13" pos:end="1253:14">t1</name> <operator pos:start="1253:16" pos:end="1253:16">=</operator> <call pos:start="1253:18" pos:end="1253:38"><name pos:start="1253:18" pos:end="1253:29">tci_read_r64</name><argument_list pos:start="1253:30" pos:end="1253:38">(<argument pos:start="1253:31" pos:end="1253:37"><expr pos:start="1253:31" pos:end="1253:37"><operator pos:start="1253:31" pos:end="1253:31">&amp;</operator><name pos:start="1253:32" pos:end="1253:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1255:13" pos:end="1255:37"><expr pos:start="1255:13" pos:end="1255:36"><call pos:start="1255:13" pos:end="1255:36"><name pos:start="1255:13" pos:end="1255:27">tci_write_reg64</name><argument_list pos:start="1255:28" pos:end="1255:36">(<argument pos:start="1255:29" pos:end="1255:30"><expr pos:start="1255:29" pos:end="1255:30"><name pos:start="1255:29" pos:end="1255:30">t0</name></expr></argument>, <argument pos:start="1255:33" pos:end="1255:35"><expr pos:start="1255:33" pos:end="1255:35"><operator pos:start="1255:33" pos:end="1255:33">-</operator><name pos:start="1255:34" pos:end="1255:35">t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1257:13" pos:end="1270:0">break;</break>

<cpp:endif pos:start="1259:1" pos:end="1259:6">#<cpp:directive pos:start="1259:2" pos:end="1259:6">endif</cpp:directive></cpp:endif>

<cpp:endif pos:start="1261:1" pos:end="1261:6">#<cpp:directive pos:start="1261:2" pos:end="1261:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1261:8" pos:end="1261:38">/* TCG_TARGET_REG_BITS == 64 */</comment>



            <comment type="block" pos:start="1265:13" pos:end="1265:43">/* QEMU specific operations. */</comment>



<cpp:if pos:start="1269:1" pos:end="1269:42">#<cpp:directive pos:start="1269:2" pos:end="1269:3">if</cpp:directive> <expr pos:start="1269:5" pos:end="1269:42"><name pos:start="1269:5" pos:end="1269:20">TARGET_LONG_BITS</name> <operator pos:start="1269:22" pos:end="1269:22">&gt;</operator> <name pos:start="1269:24" pos:end="1269:42">TCG_TARGET_REG_BITS</name></expr></cpp:if>

        <case pos:start="1271:9" pos:end="1271:39">case <expr pos:start="1271:14" pos:end="1271:38"><name pos:start="1271:14" pos:end="1271:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <expr_stmt pos:start="1273:13" pos:end="1273:19"><expr pos:start="1273:13" pos:end="1273:18"><call pos:start="1273:13" pos:end="1273:18"><name pos:start="1273:13" pos:end="1273:16">TODO</name><argument_list pos:start="1273:17" pos:end="1273:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1275:13" pos:end="1278:0">break;</break>

<cpp:else pos:start="1277:1" pos:end="1277:5">#<cpp:directive pos:start="1277:2" pos:end="1277:5">else</cpp:directive></cpp:else>

        <case pos:start="1279:9" pos:end="1279:39">case <expr pos:start="1279:14" pos:end="1279:38"><name pos:start="1279:14" pos:end="1279:38">INDEX_op_debug_insn_start</name></expr>:</case>

            <expr_stmt pos:start="1281:13" pos:end="1281:19"><expr pos:start="1281:13" pos:end="1281:18"><call pos:start="1281:13" pos:end="1281:18"><name pos:start="1281:13" pos:end="1281:16">TODO</name><argument_list pos:start="1281:17" pos:end="1281:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1283:13" pos:end="1286:0">break;</break>

<cpp:endif pos:start="1285:1" pos:end="1285:6">#<cpp:directive pos:start="1285:2" pos:end="1285:6">endif</cpp:directive></cpp:endif>

        <case pos:start="1287:9" pos:end="1287:30">case <expr pos:start="1287:14" pos:end="1287:29"><name pos:start="1287:14" pos:end="1287:29">INDEX_op_exit_tb</name></expr>:</case>

            <expr_stmt pos:start="1289:13" pos:end="1289:42"><expr pos:start="1289:13" pos:end="1289:41"><name pos:start="1289:13" pos:end="1289:19">next_tb</name> <operator pos:start="1289:21" pos:end="1289:21">=</operator> <operator pos:start="1289:23" pos:end="1289:23">*</operator><operator pos:start="1289:24" pos:end="1289:24">(</operator><name pos:start="1289:25" pos:end="1289:32">uint64_t</name> <operator pos:start="1289:34" pos:end="1289:34">*</operator><operator pos:start="1289:35" pos:end="1289:35">)</operator><name pos:start="1289:36" pos:end="1289:41">tb_ptr</name></expr>;</expr_stmt>

            <goto pos:start="1291:13" pos:end="1291:22">goto <name pos:start="1291:18" pos:end="1291:21">exit</name>;</goto>

            <break pos:start="1293:13" pos:end="1293:18">break;</break>

        <case pos:start="1295:9" pos:end="1295:30">case <expr pos:start="1295:14" pos:end="1295:29"><name pos:start="1295:14" pos:end="1295:29">INDEX_op_goto_tb</name></expr>:</case>

            <expr_stmt pos:start="1297:13" pos:end="1297:39"><expr pos:start="1297:13" pos:end="1297:38"><name pos:start="1297:13" pos:end="1297:14">t0</name> <operator pos:start="1297:16" pos:end="1297:16">=</operator> <call pos:start="1297:18" pos:end="1297:38"><name pos:start="1297:18" pos:end="1297:29">tci_read_i32</name><argument_list pos:start="1297:30" pos:end="1297:38">(<argument pos:start="1297:31" pos:end="1297:37"><expr pos:start="1297:31" pos:end="1297:37"><operator pos:start="1297:31" pos:end="1297:31">&amp;</operator><name pos:start="1297:32" pos:end="1297:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1299:13" pos:end="1299:53"><expr pos:start="1299:13" pos:end="1299:52"><call pos:start="1299:13" pos:end="1299:52"><name pos:start="1299:13" pos:end="1299:18">assert</name><argument_list pos:start="1299:19" pos:end="1299:52">(<argument pos:start="1299:20" pos:end="1299:51"><expr pos:start="1299:20" pos:end="1299:51"><name pos:start="1299:20" pos:end="1299:25">tb_ptr</name> <operator pos:start="1299:27" pos:end="1299:28">==</operator> <name pos:start="1299:30" pos:end="1299:41">old_code_ptr</name> <operator pos:start="1299:43" pos:end="1299:43">+</operator> <name pos:start="1299:45" pos:end="1299:51">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1301:13" pos:end="1301:34"><expr pos:start="1301:13" pos:end="1301:33"><name pos:start="1301:13" pos:end="1301:18">tb_ptr</name> <operator pos:start="1301:20" pos:end="1301:21">+=</operator> <operator pos:start="1301:23" pos:end="1301:23">(</operator><name pos:start="1301:24" pos:end="1301:30">int32_t</name><operator pos:start="1301:31" pos:end="1301:31">)</operator><name pos:start="1301:32" pos:end="1301:33">t0</name></expr>;</expr_stmt>

            <continue pos:start="1303:13" pos:end="1303:21">continue;</continue>

        <case pos:start="1305:9" pos:end="1305:32">case <expr pos:start="1305:14" pos:end="1305:31"><name pos:start="1305:14" pos:end="1305:31">INDEX_op_qemu_ld8u</name></expr>:</case>

            <expr_stmt pos:start="1307:13" pos:end="1307:27"><expr pos:start="1307:13" pos:end="1307:26"><name pos:start="1307:13" pos:end="1307:14">t0</name> <operator pos:start="1307:16" pos:end="1307:16">=</operator> <operator pos:start="1307:18" pos:end="1307:18">*</operator><name pos:start="1307:19" pos:end="1307:24">tb_ptr</name><operator pos:start="1307:25" pos:end="1307:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1309:13" pos:end="1312:0"><expr pos:start="1309:13" pos:end="1309:43"><name pos:start="1309:13" pos:end="1309:17">taddr</name> <operator pos:start="1309:19" pos:end="1309:19">=</operator> <call pos:start="1309:21" pos:end="1309:43"><name pos:start="1309:21" pos:end="1309:34">tci_read_ulong</name><argument_list pos:start="1309:35" pos:end="1309:43">(<argument pos:start="1309:36" pos:end="1309:42"><expr pos:start="1309:36" pos:end="1309:42"><operator pos:start="1309:36" pos:end="1309:36">&amp;</operator><name pos:start="1309:37" pos:end="1309:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1311:1" pos:end="1311:21">#<cpp:directive pos:start="1311:2" pos:end="1311:6">ifdef</cpp:directive> <name pos:start="1311:8" pos:end="1311:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1313:13" pos:end="1316:0"><expr pos:start="1313:13" pos:end="1313:66"><name pos:start="1313:13" pos:end="1313:16">tmp8</name> <operator pos:start="1313:18" pos:end="1313:18">=</operator> <call pos:start="1313:20" pos:end="1313:66"><name pos:start="1313:20" pos:end="1313:33">helper_ldb_mmu</name><argument_list pos:start="1313:34" pos:end="1313:66">(<argument pos:start="1313:35" pos:end="1313:37"><expr pos:start="1313:35" pos:end="1313:37"><name pos:start="1313:35" pos:end="1313:37">env</name></expr></argument>, <argument pos:start="1313:40" pos:end="1313:44"><expr pos:start="1313:40" pos:end="1313:44"><name pos:start="1313:40" pos:end="1313:44">taddr</name></expr></argument>, <argument pos:start="1313:47" pos:end="1313:65"><expr pos:start="1313:47" pos:end="1313:65"><call pos:start="1313:47" pos:end="1313:65"><name pos:start="1313:47" pos:end="1313:56">tci_read_i</name><argument_list pos:start="1313:57" pos:end="1313:65">(<argument pos:start="1313:58" pos:end="1313:64"><expr pos:start="1313:58" pos:end="1313:64"><operator pos:start="1313:58" pos:end="1313:58">&amp;</operator><name pos:start="1313:59" pos:end="1313:64">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1315:1" pos:end="1315:5">#<cpp:directive pos:start="1315:2" pos:end="1315:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1317:13" pos:end="1317:48"><expr pos:start="1317:13" pos:end="1317:47"><name pos:start="1317:13" pos:end="1317:21">host_addr</name> <operator pos:start="1317:23" pos:end="1317:23">=</operator> <operator pos:start="1317:25" pos:end="1317:25">(</operator><name pos:start="1317:26" pos:end="1317:41">tcg_target_ulong</name><operator pos:start="1317:42" pos:end="1317:42">)</operator><name pos:start="1317:43" pos:end="1317:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1319:13" pos:end="1322:0"><expr pos:start="1319:13" pos:end="1319:55"><name pos:start="1319:13" pos:end="1319:16">tmp8</name> <operator pos:start="1319:18" pos:end="1319:18">=</operator> <operator pos:start="1319:20" pos:end="1319:20">*</operator><operator pos:start="1319:21" pos:end="1319:21">(</operator><name pos:start="1319:22" pos:end="1319:28">uint8_t</name> <operator pos:start="1319:30" pos:end="1319:30">*</operator><operator pos:start="1319:31" pos:end="1319:31">)</operator><operator pos:start="1319:32" pos:end="1319:32">(</operator><name pos:start="1319:33" pos:end="1319:41">host_addr</name> <operator pos:start="1319:43" pos:end="1319:43">+</operator> <name pos:start="1319:45" pos:end="1319:54">GUEST_BASE</name><operator pos:start="1319:55" pos:end="1319:55">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1321:1" pos:end="1321:6">#<cpp:directive pos:start="1321:2" pos:end="1321:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1323:13" pos:end="1323:37"><expr pos:start="1323:13" pos:end="1323:36"><call pos:start="1323:13" pos:end="1323:36"><name pos:start="1323:13" pos:end="1323:26">tci_write_reg8</name><argument_list pos:start="1323:27" pos:end="1323:36">(<argument pos:start="1323:28" pos:end="1323:29"><expr pos:start="1323:28" pos:end="1323:29"><name pos:start="1323:28" pos:end="1323:29">t0</name></expr></argument>, <argument pos:start="1323:32" pos:end="1323:35"><expr pos:start="1323:32" pos:end="1323:35"><name pos:start="1323:32" pos:end="1323:35">tmp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1325:13" pos:end="1325:18">break;</break>

        <case pos:start="1327:9" pos:end="1327:32">case <expr pos:start="1327:14" pos:end="1327:31"><name pos:start="1327:14" pos:end="1327:31">INDEX_op_qemu_ld8s</name></expr>:</case>

            <expr_stmt pos:start="1329:13" pos:end="1329:27"><expr pos:start="1329:13" pos:end="1329:26"><name pos:start="1329:13" pos:end="1329:14">t0</name> <operator pos:start="1329:16" pos:end="1329:16">=</operator> <operator pos:start="1329:18" pos:end="1329:18">*</operator><name pos:start="1329:19" pos:end="1329:24">tb_ptr</name><operator pos:start="1329:25" pos:end="1329:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1331:13" pos:end="1334:0"><expr pos:start="1331:13" pos:end="1331:43"><name pos:start="1331:13" pos:end="1331:17">taddr</name> <operator pos:start="1331:19" pos:end="1331:19">=</operator> <call pos:start="1331:21" pos:end="1331:43"><name pos:start="1331:21" pos:end="1331:34">tci_read_ulong</name><argument_list pos:start="1331:35" pos:end="1331:43">(<argument pos:start="1331:36" pos:end="1331:42"><expr pos:start="1331:36" pos:end="1331:42"><operator pos:start="1331:36" pos:end="1331:36">&amp;</operator><name pos:start="1331:37" pos:end="1331:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1333:1" pos:end="1333:21">#<cpp:directive pos:start="1333:2" pos:end="1333:6">ifdef</cpp:directive> <name pos:start="1333:8" pos:end="1333:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1335:13" pos:end="1338:0"><expr pos:start="1335:13" pos:end="1335:66"><name pos:start="1335:13" pos:end="1335:16">tmp8</name> <operator pos:start="1335:18" pos:end="1335:18">=</operator> <call pos:start="1335:20" pos:end="1335:66"><name pos:start="1335:20" pos:end="1335:33">helper_ldb_mmu</name><argument_list pos:start="1335:34" pos:end="1335:66">(<argument pos:start="1335:35" pos:end="1335:37"><expr pos:start="1335:35" pos:end="1335:37"><name pos:start="1335:35" pos:end="1335:37">env</name></expr></argument>, <argument pos:start="1335:40" pos:end="1335:44"><expr pos:start="1335:40" pos:end="1335:44"><name pos:start="1335:40" pos:end="1335:44">taddr</name></expr></argument>, <argument pos:start="1335:47" pos:end="1335:65"><expr pos:start="1335:47" pos:end="1335:65"><call pos:start="1335:47" pos:end="1335:65"><name pos:start="1335:47" pos:end="1335:56">tci_read_i</name><argument_list pos:start="1335:57" pos:end="1335:65">(<argument pos:start="1335:58" pos:end="1335:64"><expr pos:start="1335:58" pos:end="1335:64"><operator pos:start="1335:58" pos:end="1335:58">&amp;</operator><name pos:start="1335:59" pos:end="1335:64">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1337:1" pos:end="1337:5">#<cpp:directive pos:start="1337:2" pos:end="1337:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1339:13" pos:end="1339:48"><expr pos:start="1339:13" pos:end="1339:47"><name pos:start="1339:13" pos:end="1339:21">host_addr</name> <operator pos:start="1339:23" pos:end="1339:23">=</operator> <operator pos:start="1339:25" pos:end="1339:25">(</operator><name pos:start="1339:26" pos:end="1339:41">tcg_target_ulong</name><operator pos:start="1339:42" pos:end="1339:42">)</operator><name pos:start="1339:43" pos:end="1339:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1341:13" pos:end="1344:0"><expr pos:start="1341:13" pos:end="1341:55"><name pos:start="1341:13" pos:end="1341:16">tmp8</name> <operator pos:start="1341:18" pos:end="1341:18">=</operator> <operator pos:start="1341:20" pos:end="1341:20">*</operator><operator pos:start="1341:21" pos:end="1341:21">(</operator><name pos:start="1341:22" pos:end="1341:28">uint8_t</name> <operator pos:start="1341:30" pos:end="1341:30">*</operator><operator pos:start="1341:31" pos:end="1341:31">)</operator><operator pos:start="1341:32" pos:end="1341:32">(</operator><name pos:start="1341:33" pos:end="1341:41">host_addr</name> <operator pos:start="1341:43" pos:end="1341:43">+</operator> <name pos:start="1341:45" pos:end="1341:54">GUEST_BASE</name><operator pos:start="1341:55" pos:end="1341:55">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1343:1" pos:end="1343:6">#<cpp:directive pos:start="1343:2" pos:end="1343:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1345:13" pos:end="1345:38"><expr pos:start="1345:13" pos:end="1345:37"><call pos:start="1345:13" pos:end="1345:37"><name pos:start="1345:13" pos:end="1345:27">tci_write_reg8s</name><argument_list pos:start="1345:28" pos:end="1345:37">(<argument pos:start="1345:29" pos:end="1345:30"><expr pos:start="1345:29" pos:end="1345:30"><name pos:start="1345:29" pos:end="1345:30">t0</name></expr></argument>, <argument pos:start="1345:33" pos:end="1345:36"><expr pos:start="1345:33" pos:end="1345:36"><name pos:start="1345:33" pos:end="1345:36">tmp8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1347:13" pos:end="1347:18">break;</break>

        <case pos:start="1349:9" pos:end="1349:33">case <expr pos:start="1349:14" pos:end="1349:32"><name pos:start="1349:14" pos:end="1349:32">INDEX_op_qemu_ld16u</name></expr>:</case>

            <expr_stmt pos:start="1351:13" pos:end="1351:27"><expr pos:start="1351:13" pos:end="1351:26"><name pos:start="1351:13" pos:end="1351:14">t0</name> <operator pos:start="1351:16" pos:end="1351:16">=</operator> <operator pos:start="1351:18" pos:end="1351:18">*</operator><name pos:start="1351:19" pos:end="1351:24">tb_ptr</name><operator pos:start="1351:25" pos:end="1351:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1353:13" pos:end="1356:0"><expr pos:start="1353:13" pos:end="1353:43"><name pos:start="1353:13" pos:end="1353:17">taddr</name> <operator pos:start="1353:19" pos:end="1353:19">=</operator> <call pos:start="1353:21" pos:end="1353:43"><name pos:start="1353:21" pos:end="1353:34">tci_read_ulong</name><argument_list pos:start="1353:35" pos:end="1353:43">(<argument pos:start="1353:36" pos:end="1353:42"><expr pos:start="1353:36" pos:end="1353:42"><operator pos:start="1353:36" pos:end="1353:36">&amp;</operator><name pos:start="1353:37" pos:end="1353:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1355:1" pos:end="1355:21">#<cpp:directive pos:start="1355:2" pos:end="1355:6">ifdef</cpp:directive> <name pos:start="1355:8" pos:end="1355:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1357:13" pos:end="1360:0"><expr pos:start="1357:13" pos:end="1357:67"><name pos:start="1357:13" pos:end="1357:17">tmp16</name> <operator pos:start="1357:19" pos:end="1357:19">=</operator> <call pos:start="1357:21" pos:end="1357:67"><name pos:start="1357:21" pos:end="1357:34">helper_ldw_mmu</name><argument_list pos:start="1357:35" pos:end="1357:67">(<argument pos:start="1357:36" pos:end="1357:38"><expr pos:start="1357:36" pos:end="1357:38"><name pos:start="1357:36" pos:end="1357:38">env</name></expr></argument>, <argument pos:start="1357:41" pos:end="1357:45"><expr pos:start="1357:41" pos:end="1357:45"><name pos:start="1357:41" pos:end="1357:45">taddr</name></expr></argument>, <argument pos:start="1357:48" pos:end="1357:66"><expr pos:start="1357:48" pos:end="1357:66"><call pos:start="1357:48" pos:end="1357:66"><name pos:start="1357:48" pos:end="1357:57">tci_read_i</name><argument_list pos:start="1357:58" pos:end="1357:66">(<argument pos:start="1357:59" pos:end="1357:65"><expr pos:start="1357:59" pos:end="1357:65"><operator pos:start="1357:59" pos:end="1357:59">&amp;</operator><name pos:start="1357:60" pos:end="1357:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1359:1" pos:end="1359:5">#<cpp:directive pos:start="1359:2" pos:end="1359:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1361:13" pos:end="1361:48"><expr pos:start="1361:13" pos:end="1361:47"><name pos:start="1361:13" pos:end="1361:21">host_addr</name> <operator pos:start="1361:23" pos:end="1361:23">=</operator> <operator pos:start="1361:25" pos:end="1361:25">(</operator><name pos:start="1361:26" pos:end="1361:41">tcg_target_ulong</name><operator pos:start="1361:42" pos:end="1361:42">)</operator><name pos:start="1361:43" pos:end="1361:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1363:13" pos:end="1366:0"><expr pos:start="1363:13" pos:end="1363:66"><name pos:start="1363:13" pos:end="1363:17">tmp16</name> <operator pos:start="1363:19" pos:end="1363:19">=</operator> <call pos:start="1363:21" pos:end="1363:66"><name pos:start="1363:21" pos:end="1363:27">tswap16</name><argument_list pos:start="1363:28" pos:end="1363:66">(<argument pos:start="1363:29" pos:end="1363:65"><expr pos:start="1363:29" pos:end="1363:65"><operator pos:start="1363:29" pos:end="1363:29">*</operator><operator pos:start="1363:30" pos:end="1363:30">(</operator><name pos:start="1363:31" pos:end="1363:38">uint16_t</name> <operator pos:start="1363:40" pos:end="1363:40">*</operator><operator pos:start="1363:41" pos:end="1363:41">)</operator><operator pos:start="1363:42" pos:end="1363:42">(</operator><name pos:start="1363:43" pos:end="1363:51">host_addr</name> <operator pos:start="1363:53" pos:end="1363:53">+</operator> <name pos:start="1363:55" pos:end="1363:64">GUEST_BASE</name><operator pos:start="1363:65" pos:end="1363:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1365:1" pos:end="1365:6">#<cpp:directive pos:start="1365:2" pos:end="1365:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1367:13" pos:end="1367:39"><expr pos:start="1367:13" pos:end="1367:38"><call pos:start="1367:13" pos:end="1367:38"><name pos:start="1367:13" pos:end="1367:27">tci_write_reg16</name><argument_list pos:start="1367:28" pos:end="1367:38">(<argument pos:start="1367:29" pos:end="1367:30"><expr pos:start="1367:29" pos:end="1367:30"><name pos:start="1367:29" pos:end="1367:30">t0</name></expr></argument>, <argument pos:start="1367:33" pos:end="1367:37"><expr pos:start="1367:33" pos:end="1367:37"><name pos:start="1367:33" pos:end="1367:37">tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1369:13" pos:end="1369:18">break;</break>

        <case pos:start="1371:9" pos:end="1371:33">case <expr pos:start="1371:14" pos:end="1371:32"><name pos:start="1371:14" pos:end="1371:32">INDEX_op_qemu_ld16s</name></expr>:</case>

            <expr_stmt pos:start="1373:13" pos:end="1373:27"><expr pos:start="1373:13" pos:end="1373:26"><name pos:start="1373:13" pos:end="1373:14">t0</name> <operator pos:start="1373:16" pos:end="1373:16">=</operator> <operator pos:start="1373:18" pos:end="1373:18">*</operator><name pos:start="1373:19" pos:end="1373:24">tb_ptr</name><operator pos:start="1373:25" pos:end="1373:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1375:13" pos:end="1378:0"><expr pos:start="1375:13" pos:end="1375:43"><name pos:start="1375:13" pos:end="1375:17">taddr</name> <operator pos:start="1375:19" pos:end="1375:19">=</operator> <call pos:start="1375:21" pos:end="1375:43"><name pos:start="1375:21" pos:end="1375:34">tci_read_ulong</name><argument_list pos:start="1375:35" pos:end="1375:43">(<argument pos:start="1375:36" pos:end="1375:42"><expr pos:start="1375:36" pos:end="1375:42"><operator pos:start="1375:36" pos:end="1375:36">&amp;</operator><name pos:start="1375:37" pos:end="1375:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1377:1" pos:end="1377:21">#<cpp:directive pos:start="1377:2" pos:end="1377:6">ifdef</cpp:directive> <name pos:start="1377:8" pos:end="1377:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1379:13" pos:end="1382:0"><expr pos:start="1379:13" pos:end="1379:67"><name pos:start="1379:13" pos:end="1379:17">tmp16</name> <operator pos:start="1379:19" pos:end="1379:19">=</operator> <call pos:start="1379:21" pos:end="1379:67"><name pos:start="1379:21" pos:end="1379:34">helper_ldw_mmu</name><argument_list pos:start="1379:35" pos:end="1379:67">(<argument pos:start="1379:36" pos:end="1379:38"><expr pos:start="1379:36" pos:end="1379:38"><name pos:start="1379:36" pos:end="1379:38">env</name></expr></argument>, <argument pos:start="1379:41" pos:end="1379:45"><expr pos:start="1379:41" pos:end="1379:45"><name pos:start="1379:41" pos:end="1379:45">taddr</name></expr></argument>, <argument pos:start="1379:48" pos:end="1379:66"><expr pos:start="1379:48" pos:end="1379:66"><call pos:start="1379:48" pos:end="1379:66"><name pos:start="1379:48" pos:end="1379:57">tci_read_i</name><argument_list pos:start="1379:58" pos:end="1379:66">(<argument pos:start="1379:59" pos:end="1379:65"><expr pos:start="1379:59" pos:end="1379:65"><operator pos:start="1379:59" pos:end="1379:59">&amp;</operator><name pos:start="1379:60" pos:end="1379:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1381:1" pos:end="1381:5">#<cpp:directive pos:start="1381:2" pos:end="1381:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1383:13" pos:end="1383:48"><expr pos:start="1383:13" pos:end="1383:47"><name pos:start="1383:13" pos:end="1383:21">host_addr</name> <operator pos:start="1383:23" pos:end="1383:23">=</operator> <operator pos:start="1383:25" pos:end="1383:25">(</operator><name pos:start="1383:26" pos:end="1383:41">tcg_target_ulong</name><operator pos:start="1383:42" pos:end="1383:42">)</operator><name pos:start="1383:43" pos:end="1383:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1385:13" pos:end="1388:0"><expr pos:start="1385:13" pos:end="1385:66"><name pos:start="1385:13" pos:end="1385:17">tmp16</name> <operator pos:start="1385:19" pos:end="1385:19">=</operator> <call pos:start="1385:21" pos:end="1385:66"><name pos:start="1385:21" pos:end="1385:27">tswap16</name><argument_list pos:start="1385:28" pos:end="1385:66">(<argument pos:start="1385:29" pos:end="1385:65"><expr pos:start="1385:29" pos:end="1385:65"><operator pos:start="1385:29" pos:end="1385:29">*</operator><operator pos:start="1385:30" pos:end="1385:30">(</operator><name pos:start="1385:31" pos:end="1385:38">uint16_t</name> <operator pos:start="1385:40" pos:end="1385:40">*</operator><operator pos:start="1385:41" pos:end="1385:41">)</operator><operator pos:start="1385:42" pos:end="1385:42">(</operator><name pos:start="1385:43" pos:end="1385:51">host_addr</name> <operator pos:start="1385:53" pos:end="1385:53">+</operator> <name pos:start="1385:55" pos:end="1385:64">GUEST_BASE</name><operator pos:start="1385:65" pos:end="1385:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1387:1" pos:end="1387:6">#<cpp:directive pos:start="1387:2" pos:end="1387:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1389:13" pos:end="1389:40"><expr pos:start="1389:13" pos:end="1389:39"><call pos:start="1389:13" pos:end="1389:39"><name pos:start="1389:13" pos:end="1389:28">tci_write_reg16s</name><argument_list pos:start="1389:29" pos:end="1389:39">(<argument pos:start="1389:30" pos:end="1389:31"><expr pos:start="1389:30" pos:end="1389:31"><name pos:start="1389:30" pos:end="1389:31">t0</name></expr></argument>, <argument pos:start="1389:34" pos:end="1389:38"><expr pos:start="1389:34" pos:end="1389:38"><name pos:start="1389:34" pos:end="1389:38">tmp16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1391:13" pos:end="1394:0">break;</break>

<cpp:if pos:start="1393:1" pos:end="1393:29">#<cpp:directive pos:start="1393:2" pos:end="1393:3">if</cpp:directive> <expr pos:start="1393:5" pos:end="1393:29"><name pos:start="1393:5" pos:end="1393:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1393:25" pos:end="1393:26">==</operator> <literal type="number" pos:start="1393:28" pos:end="1393:29">64</literal></expr></cpp:if>

        <case pos:start="1395:9" pos:end="1395:33">case <expr pos:start="1395:14" pos:end="1395:32"><name pos:start="1395:14" pos:end="1395:32">INDEX_op_qemu_ld32u</name></expr>:</case>

            <expr_stmt pos:start="1397:13" pos:end="1397:27"><expr pos:start="1397:13" pos:end="1397:26"><name pos:start="1397:13" pos:end="1397:14">t0</name> <operator pos:start="1397:16" pos:end="1397:16">=</operator> <operator pos:start="1397:18" pos:end="1397:18">*</operator><name pos:start="1397:19" pos:end="1397:24">tb_ptr</name><operator pos:start="1397:25" pos:end="1397:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1399:13" pos:end="1402:0"><expr pos:start="1399:13" pos:end="1399:43"><name pos:start="1399:13" pos:end="1399:17">taddr</name> <operator pos:start="1399:19" pos:end="1399:19">=</operator> <call pos:start="1399:21" pos:end="1399:43"><name pos:start="1399:21" pos:end="1399:34">tci_read_ulong</name><argument_list pos:start="1399:35" pos:end="1399:43">(<argument pos:start="1399:36" pos:end="1399:42"><expr pos:start="1399:36" pos:end="1399:42"><operator pos:start="1399:36" pos:end="1399:36">&amp;</operator><name pos:start="1399:37" pos:end="1399:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1401:1" pos:end="1401:21">#<cpp:directive pos:start="1401:2" pos:end="1401:6">ifdef</cpp:directive> <name pos:start="1401:8" pos:end="1401:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1403:13" pos:end="1406:0"><expr pos:start="1403:13" pos:end="1403:67"><name pos:start="1403:13" pos:end="1403:17">tmp32</name> <operator pos:start="1403:19" pos:end="1403:19">=</operator> <call pos:start="1403:21" pos:end="1403:67"><name pos:start="1403:21" pos:end="1403:34">helper_ldl_mmu</name><argument_list pos:start="1403:35" pos:end="1403:67">(<argument pos:start="1403:36" pos:end="1403:38"><expr pos:start="1403:36" pos:end="1403:38"><name pos:start="1403:36" pos:end="1403:38">env</name></expr></argument>, <argument pos:start="1403:41" pos:end="1403:45"><expr pos:start="1403:41" pos:end="1403:45"><name pos:start="1403:41" pos:end="1403:45">taddr</name></expr></argument>, <argument pos:start="1403:48" pos:end="1403:66"><expr pos:start="1403:48" pos:end="1403:66"><call pos:start="1403:48" pos:end="1403:66"><name pos:start="1403:48" pos:end="1403:57">tci_read_i</name><argument_list pos:start="1403:58" pos:end="1403:66">(<argument pos:start="1403:59" pos:end="1403:65"><expr pos:start="1403:59" pos:end="1403:65"><operator pos:start="1403:59" pos:end="1403:59">&amp;</operator><name pos:start="1403:60" pos:end="1403:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1405:1" pos:end="1405:5">#<cpp:directive pos:start="1405:2" pos:end="1405:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1407:13" pos:end="1407:48"><expr pos:start="1407:13" pos:end="1407:47"><name pos:start="1407:13" pos:end="1407:21">host_addr</name> <operator pos:start="1407:23" pos:end="1407:23">=</operator> <operator pos:start="1407:25" pos:end="1407:25">(</operator><name pos:start="1407:26" pos:end="1407:41">tcg_target_ulong</name><operator pos:start="1407:42" pos:end="1407:42">)</operator><name pos:start="1407:43" pos:end="1407:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1409:13" pos:end="1412:0"><expr pos:start="1409:13" pos:end="1409:66"><name pos:start="1409:13" pos:end="1409:17">tmp32</name> <operator pos:start="1409:19" pos:end="1409:19">=</operator> <call pos:start="1409:21" pos:end="1409:66"><name pos:start="1409:21" pos:end="1409:27">tswap32</name><argument_list pos:start="1409:28" pos:end="1409:66">(<argument pos:start="1409:29" pos:end="1409:65"><expr pos:start="1409:29" pos:end="1409:65"><operator pos:start="1409:29" pos:end="1409:29">*</operator><operator pos:start="1409:30" pos:end="1409:30">(</operator><name pos:start="1409:31" pos:end="1409:38">uint32_t</name> <operator pos:start="1409:40" pos:end="1409:40">*</operator><operator pos:start="1409:41" pos:end="1409:41">)</operator><operator pos:start="1409:42" pos:end="1409:42">(</operator><name pos:start="1409:43" pos:end="1409:51">host_addr</name> <operator pos:start="1409:53" pos:end="1409:53">+</operator> <name pos:start="1409:55" pos:end="1409:64">GUEST_BASE</name><operator pos:start="1409:65" pos:end="1409:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1411:1" pos:end="1411:6">#<cpp:directive pos:start="1411:2" pos:end="1411:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1413:13" pos:end="1413:39"><expr pos:start="1413:13" pos:end="1413:38"><call pos:start="1413:13" pos:end="1413:38"><name pos:start="1413:13" pos:end="1413:27">tci_write_reg32</name><argument_list pos:start="1413:28" pos:end="1413:38">(<argument pos:start="1413:29" pos:end="1413:30"><expr pos:start="1413:29" pos:end="1413:30"><name pos:start="1413:29" pos:end="1413:30">t0</name></expr></argument>, <argument pos:start="1413:33" pos:end="1413:37"><expr pos:start="1413:33" pos:end="1413:37"><name pos:start="1413:33" pos:end="1413:37">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1415:13" pos:end="1415:18">break;</break>

        <case pos:start="1417:9" pos:end="1417:33">case <expr pos:start="1417:14" pos:end="1417:32"><name pos:start="1417:14" pos:end="1417:32">INDEX_op_qemu_ld32s</name></expr>:</case>

            <expr_stmt pos:start="1419:13" pos:end="1419:27"><expr pos:start="1419:13" pos:end="1419:26"><name pos:start="1419:13" pos:end="1419:14">t0</name> <operator pos:start="1419:16" pos:end="1419:16">=</operator> <operator pos:start="1419:18" pos:end="1419:18">*</operator><name pos:start="1419:19" pos:end="1419:24">tb_ptr</name><operator pos:start="1419:25" pos:end="1419:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1421:13" pos:end="1424:0"><expr pos:start="1421:13" pos:end="1421:43"><name pos:start="1421:13" pos:end="1421:17">taddr</name> <operator pos:start="1421:19" pos:end="1421:19">=</operator> <call pos:start="1421:21" pos:end="1421:43"><name pos:start="1421:21" pos:end="1421:34">tci_read_ulong</name><argument_list pos:start="1421:35" pos:end="1421:43">(<argument pos:start="1421:36" pos:end="1421:42"><expr pos:start="1421:36" pos:end="1421:42"><operator pos:start="1421:36" pos:end="1421:36">&amp;</operator><name pos:start="1421:37" pos:end="1421:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1423:1" pos:end="1423:21">#<cpp:directive pos:start="1423:2" pos:end="1423:6">ifdef</cpp:directive> <name pos:start="1423:8" pos:end="1423:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1425:13" pos:end="1428:0"><expr pos:start="1425:13" pos:end="1425:67"><name pos:start="1425:13" pos:end="1425:17">tmp32</name> <operator pos:start="1425:19" pos:end="1425:19">=</operator> <call pos:start="1425:21" pos:end="1425:67"><name pos:start="1425:21" pos:end="1425:34">helper_ldl_mmu</name><argument_list pos:start="1425:35" pos:end="1425:67">(<argument pos:start="1425:36" pos:end="1425:38"><expr pos:start="1425:36" pos:end="1425:38"><name pos:start="1425:36" pos:end="1425:38">env</name></expr></argument>, <argument pos:start="1425:41" pos:end="1425:45"><expr pos:start="1425:41" pos:end="1425:45"><name pos:start="1425:41" pos:end="1425:45">taddr</name></expr></argument>, <argument pos:start="1425:48" pos:end="1425:66"><expr pos:start="1425:48" pos:end="1425:66"><call pos:start="1425:48" pos:end="1425:66"><name pos:start="1425:48" pos:end="1425:57">tci_read_i</name><argument_list pos:start="1425:58" pos:end="1425:66">(<argument pos:start="1425:59" pos:end="1425:65"><expr pos:start="1425:59" pos:end="1425:65"><operator pos:start="1425:59" pos:end="1425:59">&amp;</operator><name pos:start="1425:60" pos:end="1425:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1427:1" pos:end="1427:5">#<cpp:directive pos:start="1427:2" pos:end="1427:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1429:13" pos:end="1429:48"><expr pos:start="1429:13" pos:end="1429:47"><name pos:start="1429:13" pos:end="1429:21">host_addr</name> <operator pos:start="1429:23" pos:end="1429:23">=</operator> <operator pos:start="1429:25" pos:end="1429:25">(</operator><name pos:start="1429:26" pos:end="1429:41">tcg_target_ulong</name><operator pos:start="1429:42" pos:end="1429:42">)</operator><name pos:start="1429:43" pos:end="1429:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1431:13" pos:end="1434:0"><expr pos:start="1431:13" pos:end="1431:66"><name pos:start="1431:13" pos:end="1431:17">tmp32</name> <operator pos:start="1431:19" pos:end="1431:19">=</operator> <call pos:start="1431:21" pos:end="1431:66"><name pos:start="1431:21" pos:end="1431:27">tswap32</name><argument_list pos:start="1431:28" pos:end="1431:66">(<argument pos:start="1431:29" pos:end="1431:65"><expr pos:start="1431:29" pos:end="1431:65"><operator pos:start="1431:29" pos:end="1431:29">*</operator><operator pos:start="1431:30" pos:end="1431:30">(</operator><name pos:start="1431:31" pos:end="1431:38">uint32_t</name> <operator pos:start="1431:40" pos:end="1431:40">*</operator><operator pos:start="1431:41" pos:end="1431:41">)</operator><operator pos:start="1431:42" pos:end="1431:42">(</operator><name pos:start="1431:43" pos:end="1431:51">host_addr</name> <operator pos:start="1431:53" pos:end="1431:53">+</operator> <name pos:start="1431:55" pos:end="1431:64">GUEST_BASE</name><operator pos:start="1431:65" pos:end="1431:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1433:1" pos:end="1433:6">#<cpp:directive pos:start="1433:2" pos:end="1433:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1435:13" pos:end="1435:40"><expr pos:start="1435:13" pos:end="1435:39"><call pos:start="1435:13" pos:end="1435:39"><name pos:start="1435:13" pos:end="1435:28">tci_write_reg32s</name><argument_list pos:start="1435:29" pos:end="1435:39">(<argument pos:start="1435:30" pos:end="1435:31"><expr pos:start="1435:30" pos:end="1435:31"><name pos:start="1435:30" pos:end="1435:31">t0</name></expr></argument>, <argument pos:start="1435:34" pos:end="1435:38"><expr pos:start="1435:34" pos:end="1435:38"><name pos:start="1435:34" pos:end="1435:38">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1437:13" pos:end="1440:0">break;</break>

<cpp:endif pos:start="1439:1" pos:end="1439:6">#<cpp:directive pos:start="1439:2" pos:end="1439:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="1439:8" pos:end="1439:38">/* TCG_TARGET_REG_BITS == 64 */</comment>

        <case pos:start="1441:9" pos:end="1441:32">case <expr pos:start="1441:14" pos:end="1441:31"><name pos:start="1441:14" pos:end="1441:31">INDEX_op_qemu_ld32</name></expr>:</case>

            <expr_stmt pos:start="1443:13" pos:end="1443:27"><expr pos:start="1443:13" pos:end="1443:26"><name pos:start="1443:13" pos:end="1443:14">t0</name> <operator pos:start="1443:16" pos:end="1443:16">=</operator> <operator pos:start="1443:18" pos:end="1443:18">*</operator><name pos:start="1443:19" pos:end="1443:24">tb_ptr</name><operator pos:start="1443:25" pos:end="1443:26">++</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="1445:13" pos:end="1448:0"><expr pos:start="1445:13" pos:end="1445:43"><name pos:start="1445:13" pos:end="1445:17">taddr</name> <operator pos:start="1445:19" pos:end="1445:19">=</operator> <call pos:start="1445:21" pos:end="1445:43"><name pos:start="1445:21" pos:end="1445:34">tci_read_ulong</name><argument_list pos:start="1445:35" pos:end="1445:43">(<argument pos:start="1445:36" pos:end="1445:42"><expr pos:start="1445:36" pos:end="1445:42"><operator pos:start="1445:36" pos:end="1445:36">&amp;</operator><name pos:start="1445:37" pos:end="1445:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1447:1" pos:end="1447:21">#<cpp:directive pos:start="1447:2" pos:end="1447:6">ifdef</cpp:directive> <name pos:start="1447:8" pos:end="1447:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1449:13" pos:end="1452:0"><expr pos:start="1449:13" pos:end="1449:67"><name pos:start="1449:13" pos:end="1449:17">tmp32</name> <operator pos:start="1449:19" pos:end="1449:19">=</operator> <call pos:start="1449:21" pos:end="1449:67"><name pos:start="1449:21" pos:end="1449:34">helper_ldl_mmu</name><argument_list pos:start="1449:35" pos:end="1449:67">(<argument pos:start="1449:36" pos:end="1449:38"><expr pos:start="1449:36" pos:end="1449:38"><name pos:start="1449:36" pos:end="1449:38">env</name></expr></argument>, <argument pos:start="1449:41" pos:end="1449:45"><expr pos:start="1449:41" pos:end="1449:45"><name pos:start="1449:41" pos:end="1449:45">taddr</name></expr></argument>, <argument pos:start="1449:48" pos:end="1449:66"><expr pos:start="1449:48" pos:end="1449:66"><call pos:start="1449:48" pos:end="1449:66"><name pos:start="1449:48" pos:end="1449:57">tci_read_i</name><argument_list pos:start="1449:58" pos:end="1449:66">(<argument pos:start="1449:59" pos:end="1449:65"><expr pos:start="1449:59" pos:end="1449:65"><operator pos:start="1449:59" pos:end="1449:59">&amp;</operator><name pos:start="1449:60" pos:end="1449:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1451:1" pos:end="1451:5">#<cpp:directive pos:start="1451:2" pos:end="1451:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1453:13" pos:end="1453:48"><expr pos:start="1453:13" pos:end="1453:47"><name pos:start="1453:13" pos:end="1453:21">host_addr</name> <operator pos:start="1453:23" pos:end="1453:23">=</operator> <operator pos:start="1453:25" pos:end="1453:25">(</operator><name pos:start="1453:26" pos:end="1453:41">tcg_target_ulong</name><operator pos:start="1453:42" pos:end="1453:42">)</operator><name pos:start="1453:43" pos:end="1453:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1455:13" pos:end="1458:0"><expr pos:start="1455:13" pos:end="1455:66"><name pos:start="1455:13" pos:end="1455:17">tmp32</name> <operator pos:start="1455:19" pos:end="1455:19">=</operator> <call pos:start="1455:21" pos:end="1455:66"><name pos:start="1455:21" pos:end="1455:27">tswap32</name><argument_list pos:start="1455:28" pos:end="1455:66">(<argument pos:start="1455:29" pos:end="1455:65"><expr pos:start="1455:29" pos:end="1455:65"><operator pos:start="1455:29" pos:end="1455:29">*</operator><operator pos:start="1455:30" pos:end="1455:30">(</operator><name pos:start="1455:31" pos:end="1455:38">uint32_t</name> <operator pos:start="1455:40" pos:end="1455:40">*</operator><operator pos:start="1455:41" pos:end="1455:41">)</operator><operator pos:start="1455:42" pos:end="1455:42">(</operator><name pos:start="1455:43" pos:end="1455:51">host_addr</name> <operator pos:start="1455:53" pos:end="1455:53">+</operator> <name pos:start="1455:55" pos:end="1455:64">GUEST_BASE</name><operator pos:start="1455:65" pos:end="1455:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1457:1" pos:end="1457:6">#<cpp:directive pos:start="1457:2" pos:end="1457:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1459:13" pos:end="1459:39"><expr pos:start="1459:13" pos:end="1459:38"><call pos:start="1459:13" pos:end="1459:38"><name pos:start="1459:13" pos:end="1459:27">tci_write_reg32</name><argument_list pos:start="1459:28" pos:end="1459:38">(<argument pos:start="1459:29" pos:end="1459:30"><expr pos:start="1459:29" pos:end="1459:30"><name pos:start="1459:29" pos:end="1459:30">t0</name></expr></argument>, <argument pos:start="1459:33" pos:end="1459:37"><expr pos:start="1459:33" pos:end="1459:37"><name pos:start="1459:33" pos:end="1459:37">tmp32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1461:13" pos:end="1461:18">break;</break>

        <case pos:start="1463:9" pos:end="1463:32">case <expr pos:start="1463:14" pos:end="1463:31"><name pos:start="1463:14" pos:end="1463:31">INDEX_op_qemu_ld64</name></expr>:</case>

            <expr_stmt pos:start="1465:13" pos:end="1468:0"><expr pos:start="1465:13" pos:end="1465:26"><name pos:start="1465:13" pos:end="1465:14">t0</name> <operator pos:start="1465:16" pos:end="1465:16">=</operator> <operator pos:start="1465:18" pos:end="1465:18">*</operator><name pos:start="1465:19" pos:end="1465:24">tb_ptr</name><operator pos:start="1465:25" pos:end="1465:26">++</operator></expr>;</expr_stmt>

<cpp:if pos:start="1467:1" pos:end="1467:29">#<cpp:directive pos:start="1467:2" pos:end="1467:3">if</cpp:directive> <expr pos:start="1467:5" pos:end="1467:29"><name pos:start="1467:5" pos:end="1467:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1467:25" pos:end="1467:26">==</operator> <literal type="number" pos:start="1467:28" pos:end="1467:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="1469:13" pos:end="1472:0"><expr pos:start="1469:13" pos:end="1469:26"><name pos:start="1469:13" pos:end="1469:14">t1</name> <operator pos:start="1469:16" pos:end="1469:16">=</operator> <operator pos:start="1469:18" pos:end="1469:18">*</operator><name pos:start="1469:19" pos:end="1469:24">tb_ptr</name><operator pos:start="1469:25" pos:end="1469:26">++</operator></expr>;</expr_stmt>

<cpp:endif pos:start="1471:1" pos:end="1471:6">#<cpp:directive pos:start="1471:2" pos:end="1471:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1473:13" pos:end="1476:0"><expr pos:start="1473:13" pos:end="1473:43"><name pos:start="1473:13" pos:end="1473:17">taddr</name> <operator pos:start="1473:19" pos:end="1473:19">=</operator> <call pos:start="1473:21" pos:end="1473:43"><name pos:start="1473:21" pos:end="1473:34">tci_read_ulong</name><argument_list pos:start="1473:35" pos:end="1473:43">(<argument pos:start="1473:36" pos:end="1473:42"><expr pos:start="1473:36" pos:end="1473:42"><operator pos:start="1473:36" pos:end="1473:36">&amp;</operator><name pos:start="1473:37" pos:end="1473:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1475:1" pos:end="1475:21">#<cpp:directive pos:start="1475:2" pos:end="1475:6">ifdef</cpp:directive> <name pos:start="1475:8" pos:end="1475:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1477:13" pos:end="1480:0"><expr pos:start="1477:13" pos:end="1477:67"><name pos:start="1477:13" pos:end="1477:17">tmp64</name> <operator pos:start="1477:19" pos:end="1477:19">=</operator> <call pos:start="1477:21" pos:end="1477:67"><name pos:start="1477:21" pos:end="1477:34">helper_ldq_mmu</name><argument_list pos:start="1477:35" pos:end="1477:67">(<argument pos:start="1477:36" pos:end="1477:38"><expr pos:start="1477:36" pos:end="1477:38"><name pos:start="1477:36" pos:end="1477:38">env</name></expr></argument>, <argument pos:start="1477:41" pos:end="1477:45"><expr pos:start="1477:41" pos:end="1477:45"><name pos:start="1477:41" pos:end="1477:45">taddr</name></expr></argument>, <argument pos:start="1477:48" pos:end="1477:66"><expr pos:start="1477:48" pos:end="1477:66"><call pos:start="1477:48" pos:end="1477:66"><name pos:start="1477:48" pos:end="1477:57">tci_read_i</name><argument_list pos:start="1477:58" pos:end="1477:66">(<argument pos:start="1477:59" pos:end="1477:65"><expr pos:start="1477:59" pos:end="1477:65"><operator pos:start="1477:59" pos:end="1477:59">&amp;</operator><name pos:start="1477:60" pos:end="1477:65">tb_ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1479:1" pos:end="1479:5">#<cpp:directive pos:start="1479:2" pos:end="1479:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1481:13" pos:end="1481:48"><expr pos:start="1481:13" pos:end="1481:47"><name pos:start="1481:13" pos:end="1481:21">host_addr</name> <operator pos:start="1481:23" pos:end="1481:23">=</operator> <operator pos:start="1481:25" pos:end="1481:25">(</operator><name pos:start="1481:26" pos:end="1481:41">tcg_target_ulong</name><operator pos:start="1481:42" pos:end="1481:42">)</operator><name pos:start="1481:43" pos:end="1481:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1483:13" pos:end="1486:0"><expr pos:start="1483:13" pos:end="1483:66"><name pos:start="1483:13" pos:end="1483:17">tmp64</name> <operator pos:start="1483:19" pos:end="1483:19">=</operator> <call pos:start="1483:21" pos:end="1483:66"><name pos:start="1483:21" pos:end="1483:27">tswap64</name><argument_list pos:start="1483:28" pos:end="1483:66">(<argument pos:start="1483:29" pos:end="1483:65"><expr pos:start="1483:29" pos:end="1483:65"><operator pos:start="1483:29" pos:end="1483:29">*</operator><operator pos:start="1483:30" pos:end="1483:30">(</operator><name pos:start="1483:31" pos:end="1483:38">uint64_t</name> <operator pos:start="1483:40" pos:end="1483:40">*</operator><operator pos:start="1483:41" pos:end="1483:41">)</operator><operator pos:start="1483:42" pos:end="1483:42">(</operator><name pos:start="1483:43" pos:end="1483:51">host_addr</name> <operator pos:start="1483:53" pos:end="1483:53">+</operator> <name pos:start="1483:55" pos:end="1483:64">GUEST_BASE</name><operator pos:start="1483:65" pos:end="1483:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1485:1" pos:end="1485:6">#<cpp:directive pos:start="1485:2" pos:end="1485:6">endif</cpp:directive></cpp:endif>

            <expr_stmt pos:start="1487:13" pos:end="1490:0"><expr pos:start="1487:13" pos:end="1487:36"><call pos:start="1487:13" pos:end="1487:36"><name pos:start="1487:13" pos:end="1487:25">tci_write_reg</name><argument_list pos:start="1487:26" pos:end="1487:36">(<argument pos:start="1487:27" pos:end="1487:28"><expr pos:start="1487:27" pos:end="1487:28"><name pos:start="1487:27" pos:end="1487:28">t0</name></expr></argument>, <argument pos:start="1487:31" pos:end="1487:35"><expr pos:start="1487:31" pos:end="1487:35"><name pos:start="1487:31" pos:end="1487:35">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="1489:1" pos:end="1489:29">#<cpp:directive pos:start="1489:2" pos:end="1489:3">if</cpp:directive> <expr pos:start="1489:5" pos:end="1489:29"><name pos:start="1489:5" pos:end="1489:23">TCG_TARGET_REG_BITS</name> <operator pos:start="1489:25" pos:end="1489:26">==</operator> <literal type="number" pos:start="1489:28" pos:end="1489:29">32</literal></expr></cpp:if>

            <expr_stmt pos:start="1491:13" pos:end="1494:0"><expr pos:start="1491:13" pos:end="1491:42"><call pos:start="1491:13" pos:end="1491:42"><name pos:start="1491:13" pos:end="1491:25">tci_write_reg</name><argument_list pos:start="1491:26" pos:end="1491:42">(<argument pos:start="1491:27" pos:end="1491:28"><expr pos:start="1491:27" pos:end="1491:28"><name pos:start="1491:27" pos:end="1491:28">t1</name></expr></argument>, <argument pos:start="1491:31" pos:end="1491:41"><expr pos:start="1491:31" pos:end="1491:41"><name pos:start="1491:31" pos:end="1491:35">tmp64</name> <operator pos:start="1491:37" pos:end="1491:38">&gt;&gt;</operator> <literal type="number" pos:start="1491:40" pos:end="1491:41">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1493:1" pos:end="1493:6">#<cpp:directive pos:start="1493:2" pos:end="1493:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1495:13" pos:end="1495:18">break;</break>

        <case pos:start="1497:9" pos:end="1497:31">case <expr pos:start="1497:14" pos:end="1497:30"><name pos:start="1497:14" pos:end="1497:30">INDEX_op_qemu_st8</name></expr>:</case>

            <expr_stmt pos:start="1499:13" pos:end="1499:38"><expr pos:start="1499:13" pos:end="1499:37"><name pos:start="1499:13" pos:end="1499:14">t0</name> <operator pos:start="1499:16" pos:end="1499:16">=</operator> <call pos:start="1499:18" pos:end="1499:37"><name pos:start="1499:18" pos:end="1499:28">tci_read_r8</name><argument_list pos:start="1499:29" pos:end="1499:37">(<argument pos:start="1499:30" pos:end="1499:36"><expr pos:start="1499:30" pos:end="1499:36"><operator pos:start="1499:30" pos:end="1499:30">&amp;</operator><name pos:start="1499:31" pos:end="1499:36">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1501:13" pos:end="1504:0"><expr pos:start="1501:13" pos:end="1501:43"><name pos:start="1501:13" pos:end="1501:17">taddr</name> <operator pos:start="1501:19" pos:end="1501:19">=</operator> <call pos:start="1501:21" pos:end="1501:43"><name pos:start="1501:21" pos:end="1501:34">tci_read_ulong</name><argument_list pos:start="1501:35" pos:end="1501:43">(<argument pos:start="1501:36" pos:end="1501:42"><expr pos:start="1501:36" pos:end="1501:42"><operator pos:start="1501:36" pos:end="1501:36">&amp;</operator><name pos:start="1501:37" pos:end="1501:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1503:1" pos:end="1503:21">#<cpp:directive pos:start="1503:2" pos:end="1503:6">ifdef</cpp:directive> <name pos:start="1503:8" pos:end="1503:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1505:13" pos:end="1505:37"><expr pos:start="1505:13" pos:end="1505:36"><name pos:start="1505:13" pos:end="1505:14">t2</name> <operator pos:start="1505:16" pos:end="1505:16">=</operator> <call pos:start="1505:18" pos:end="1505:36"><name pos:start="1505:18" pos:end="1505:27">tci_read_i</name><argument_list pos:start="1505:28" pos:end="1505:36">(<argument pos:start="1505:29" pos:end="1505:35"><expr pos:start="1505:29" pos:end="1505:35"><operator pos:start="1505:29" pos:end="1505:29">&amp;</operator><name pos:start="1505:30" pos:end="1505:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1507:13" pos:end="1510:0"><expr pos:start="1507:13" pos:end="1507:46"><call pos:start="1507:13" pos:end="1507:46"><name pos:start="1507:13" pos:end="1507:26">helper_stb_mmu</name><argument_list pos:start="1507:27" pos:end="1507:46">(<argument pos:start="1507:28" pos:end="1507:30"><expr pos:start="1507:28" pos:end="1507:30"><name pos:start="1507:28" pos:end="1507:30">env</name></expr></argument>, <argument pos:start="1507:33" pos:end="1507:37"><expr pos:start="1507:33" pos:end="1507:37"><name pos:start="1507:33" pos:end="1507:37">taddr</name></expr></argument>, <argument pos:start="1507:40" pos:end="1507:41"><expr pos:start="1507:40" pos:end="1507:41"><name pos:start="1507:40" pos:end="1507:41">t0</name></expr></argument>, <argument pos:start="1507:44" pos:end="1507:45"><expr pos:start="1507:44" pos:end="1507:45"><name pos:start="1507:44" pos:end="1507:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1509:1" pos:end="1509:5">#<cpp:directive pos:start="1509:2" pos:end="1509:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1511:13" pos:end="1511:48"><expr pos:start="1511:13" pos:end="1511:47"><name pos:start="1511:13" pos:end="1511:21">host_addr</name> <operator pos:start="1511:23" pos:end="1511:23">=</operator> <operator pos:start="1511:25" pos:end="1511:25">(</operator><name pos:start="1511:26" pos:end="1511:41">tcg_target_ulong</name><operator pos:start="1511:42" pos:end="1511:42">)</operator><name pos:start="1511:43" pos:end="1511:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1513:13" pos:end="1516:0"><expr pos:start="1513:13" pos:end="1513:53"><operator pos:start="1513:13" pos:end="1513:13">*</operator><operator pos:start="1513:14" pos:end="1513:14">(</operator><name pos:start="1513:15" pos:end="1513:21">uint8_t</name> <operator pos:start="1513:23" pos:end="1513:23">*</operator><operator pos:start="1513:24" pos:end="1513:24">)</operator><operator pos:start="1513:25" pos:end="1513:25">(</operator><name pos:start="1513:26" pos:end="1513:34">host_addr</name> <operator pos:start="1513:36" pos:end="1513:36">+</operator> <name pos:start="1513:38" pos:end="1513:47">GUEST_BASE</name><operator pos:start="1513:48" pos:end="1513:48">)</operator> <operator pos:start="1513:50" pos:end="1513:50">=</operator> <name pos:start="1513:52" pos:end="1513:53">t0</name></expr>;</expr_stmt>

<cpp:endif pos:start="1515:1" pos:end="1515:6">#<cpp:directive pos:start="1515:2" pos:end="1515:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1517:13" pos:end="1517:18">break;</break>

        <case pos:start="1519:9" pos:end="1519:32">case <expr pos:start="1519:14" pos:end="1519:31"><name pos:start="1519:14" pos:end="1519:31">INDEX_op_qemu_st16</name></expr>:</case>

            <expr_stmt pos:start="1521:13" pos:end="1521:39"><expr pos:start="1521:13" pos:end="1521:38"><name pos:start="1521:13" pos:end="1521:14">t0</name> <operator pos:start="1521:16" pos:end="1521:16">=</operator> <call pos:start="1521:18" pos:end="1521:38"><name pos:start="1521:18" pos:end="1521:29">tci_read_r16</name><argument_list pos:start="1521:30" pos:end="1521:38">(<argument pos:start="1521:31" pos:end="1521:37"><expr pos:start="1521:31" pos:end="1521:37"><operator pos:start="1521:31" pos:end="1521:31">&amp;</operator><name pos:start="1521:32" pos:end="1521:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1523:13" pos:end="1526:0"><expr pos:start="1523:13" pos:end="1523:43"><name pos:start="1523:13" pos:end="1523:17">taddr</name> <operator pos:start="1523:19" pos:end="1523:19">=</operator> <call pos:start="1523:21" pos:end="1523:43"><name pos:start="1523:21" pos:end="1523:34">tci_read_ulong</name><argument_list pos:start="1523:35" pos:end="1523:43">(<argument pos:start="1523:36" pos:end="1523:42"><expr pos:start="1523:36" pos:end="1523:42"><operator pos:start="1523:36" pos:end="1523:36">&amp;</operator><name pos:start="1523:37" pos:end="1523:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1525:1" pos:end="1525:21">#<cpp:directive pos:start="1525:2" pos:end="1525:6">ifdef</cpp:directive> <name pos:start="1525:8" pos:end="1525:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1527:13" pos:end="1527:37"><expr pos:start="1527:13" pos:end="1527:36"><name pos:start="1527:13" pos:end="1527:14">t2</name> <operator pos:start="1527:16" pos:end="1527:16">=</operator> <call pos:start="1527:18" pos:end="1527:36"><name pos:start="1527:18" pos:end="1527:27">tci_read_i</name><argument_list pos:start="1527:28" pos:end="1527:36">(<argument pos:start="1527:29" pos:end="1527:35"><expr pos:start="1527:29" pos:end="1527:35"><operator pos:start="1527:29" pos:end="1527:29">&amp;</operator><name pos:start="1527:30" pos:end="1527:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1529:13" pos:end="1532:0"><expr pos:start="1529:13" pos:end="1529:46"><call pos:start="1529:13" pos:end="1529:46"><name pos:start="1529:13" pos:end="1529:26">helper_stw_mmu</name><argument_list pos:start="1529:27" pos:end="1529:46">(<argument pos:start="1529:28" pos:end="1529:30"><expr pos:start="1529:28" pos:end="1529:30"><name pos:start="1529:28" pos:end="1529:30">env</name></expr></argument>, <argument pos:start="1529:33" pos:end="1529:37"><expr pos:start="1529:33" pos:end="1529:37"><name pos:start="1529:33" pos:end="1529:37">taddr</name></expr></argument>, <argument pos:start="1529:40" pos:end="1529:41"><expr pos:start="1529:40" pos:end="1529:41"><name pos:start="1529:40" pos:end="1529:41">t0</name></expr></argument>, <argument pos:start="1529:44" pos:end="1529:45"><expr pos:start="1529:44" pos:end="1529:45"><name pos:start="1529:44" pos:end="1529:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1531:1" pos:end="1531:5">#<cpp:directive pos:start="1531:2" pos:end="1531:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1533:13" pos:end="1533:48"><expr pos:start="1533:13" pos:end="1533:47"><name pos:start="1533:13" pos:end="1533:21">host_addr</name> <operator pos:start="1533:23" pos:end="1533:23">=</operator> <operator pos:start="1533:25" pos:end="1533:25">(</operator><name pos:start="1533:26" pos:end="1533:41">tcg_target_ulong</name><operator pos:start="1533:42" pos:end="1533:42">)</operator><name pos:start="1533:43" pos:end="1533:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1535:13" pos:end="1538:0"><expr pos:start="1535:13" pos:end="1535:63"><operator pos:start="1535:13" pos:end="1535:13">*</operator><operator pos:start="1535:14" pos:end="1535:14">(</operator><name pos:start="1535:15" pos:end="1535:22">uint16_t</name> <operator pos:start="1535:24" pos:end="1535:24">*</operator><operator pos:start="1535:25" pos:end="1535:25">)</operator><operator pos:start="1535:26" pos:end="1535:26">(</operator><name pos:start="1535:27" pos:end="1535:35">host_addr</name> <operator pos:start="1535:37" pos:end="1535:37">+</operator> <name pos:start="1535:39" pos:end="1535:48">GUEST_BASE</name><operator pos:start="1535:49" pos:end="1535:49">)</operator> <operator pos:start="1535:51" pos:end="1535:51">=</operator> <call pos:start="1535:53" pos:end="1535:63"><name pos:start="1535:53" pos:end="1535:59">tswap16</name><argument_list pos:start="1535:60" pos:end="1535:63">(<argument pos:start="1535:61" pos:end="1535:62"><expr pos:start="1535:61" pos:end="1535:62"><name pos:start="1535:61" pos:end="1535:62">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1537:1" pos:end="1537:6">#<cpp:directive pos:start="1537:2" pos:end="1537:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1539:13" pos:end="1539:18">break;</break>

        <case pos:start="1541:9" pos:end="1541:32">case <expr pos:start="1541:14" pos:end="1541:31"><name pos:start="1541:14" pos:end="1541:31">INDEX_op_qemu_st32</name></expr>:</case>

            <expr_stmt pos:start="1543:13" pos:end="1543:39"><expr pos:start="1543:13" pos:end="1543:38"><name pos:start="1543:13" pos:end="1543:14">t0</name> <operator pos:start="1543:16" pos:end="1543:16">=</operator> <call pos:start="1543:18" pos:end="1543:38"><name pos:start="1543:18" pos:end="1543:29">tci_read_r32</name><argument_list pos:start="1543:30" pos:end="1543:38">(<argument pos:start="1543:31" pos:end="1543:37"><expr pos:start="1543:31" pos:end="1543:37"><operator pos:start="1543:31" pos:end="1543:31">&amp;</operator><name pos:start="1543:32" pos:end="1543:37">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1545:13" pos:end="1548:0"><expr pos:start="1545:13" pos:end="1545:43"><name pos:start="1545:13" pos:end="1545:17">taddr</name> <operator pos:start="1545:19" pos:end="1545:19">=</operator> <call pos:start="1545:21" pos:end="1545:43"><name pos:start="1545:21" pos:end="1545:34">tci_read_ulong</name><argument_list pos:start="1545:35" pos:end="1545:43">(<argument pos:start="1545:36" pos:end="1545:42"><expr pos:start="1545:36" pos:end="1545:42"><operator pos:start="1545:36" pos:end="1545:36">&amp;</operator><name pos:start="1545:37" pos:end="1545:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1547:1" pos:end="1547:21">#<cpp:directive pos:start="1547:2" pos:end="1547:6">ifdef</cpp:directive> <name pos:start="1547:8" pos:end="1547:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1549:13" pos:end="1549:37"><expr pos:start="1549:13" pos:end="1549:36"><name pos:start="1549:13" pos:end="1549:14">t2</name> <operator pos:start="1549:16" pos:end="1549:16">=</operator> <call pos:start="1549:18" pos:end="1549:36"><name pos:start="1549:18" pos:end="1549:27">tci_read_i</name><argument_list pos:start="1549:28" pos:end="1549:36">(<argument pos:start="1549:29" pos:end="1549:35"><expr pos:start="1549:29" pos:end="1549:35"><operator pos:start="1549:29" pos:end="1549:29">&amp;</operator><name pos:start="1549:30" pos:end="1549:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1551:13" pos:end="1554:0"><expr pos:start="1551:13" pos:end="1551:46"><call pos:start="1551:13" pos:end="1551:46"><name pos:start="1551:13" pos:end="1551:26">helper_stl_mmu</name><argument_list pos:start="1551:27" pos:end="1551:46">(<argument pos:start="1551:28" pos:end="1551:30"><expr pos:start="1551:28" pos:end="1551:30"><name pos:start="1551:28" pos:end="1551:30">env</name></expr></argument>, <argument pos:start="1551:33" pos:end="1551:37"><expr pos:start="1551:33" pos:end="1551:37"><name pos:start="1551:33" pos:end="1551:37">taddr</name></expr></argument>, <argument pos:start="1551:40" pos:end="1551:41"><expr pos:start="1551:40" pos:end="1551:41"><name pos:start="1551:40" pos:end="1551:41">t0</name></expr></argument>, <argument pos:start="1551:44" pos:end="1551:45"><expr pos:start="1551:44" pos:end="1551:45"><name pos:start="1551:44" pos:end="1551:45">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1553:1" pos:end="1553:5">#<cpp:directive pos:start="1553:2" pos:end="1553:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1555:13" pos:end="1555:48"><expr pos:start="1555:13" pos:end="1555:47"><name pos:start="1555:13" pos:end="1555:21">host_addr</name> <operator pos:start="1555:23" pos:end="1555:23">=</operator> <operator pos:start="1555:25" pos:end="1555:25">(</operator><name pos:start="1555:26" pos:end="1555:41">tcg_target_ulong</name><operator pos:start="1555:42" pos:end="1555:42">)</operator><name pos:start="1555:43" pos:end="1555:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1557:13" pos:end="1560:0"><expr pos:start="1557:13" pos:end="1557:63"><operator pos:start="1557:13" pos:end="1557:13">*</operator><operator pos:start="1557:14" pos:end="1557:14">(</operator><name pos:start="1557:15" pos:end="1557:22">uint32_t</name> <operator pos:start="1557:24" pos:end="1557:24">*</operator><operator pos:start="1557:25" pos:end="1557:25">)</operator><operator pos:start="1557:26" pos:end="1557:26">(</operator><name pos:start="1557:27" pos:end="1557:35">host_addr</name> <operator pos:start="1557:37" pos:end="1557:37">+</operator> <name pos:start="1557:39" pos:end="1557:48">GUEST_BASE</name><operator pos:start="1557:49" pos:end="1557:49">)</operator> <operator pos:start="1557:51" pos:end="1557:51">=</operator> <call pos:start="1557:53" pos:end="1557:63"><name pos:start="1557:53" pos:end="1557:59">tswap32</name><argument_list pos:start="1557:60" pos:end="1557:63">(<argument pos:start="1557:61" pos:end="1557:62"><expr pos:start="1557:61" pos:end="1557:62"><name pos:start="1557:61" pos:end="1557:62">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1559:1" pos:end="1559:6">#<cpp:directive pos:start="1559:2" pos:end="1559:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1561:13" pos:end="1561:18">break;</break>

        <case pos:start="1563:9" pos:end="1563:32">case <expr pos:start="1563:14" pos:end="1563:31"><name pos:start="1563:14" pos:end="1563:31">INDEX_op_qemu_st64</name></expr>:</case>

            <expr_stmt pos:start="1565:13" pos:end="1565:42"><expr pos:start="1565:13" pos:end="1565:41"><name pos:start="1565:13" pos:end="1565:17">tmp64</name> <operator pos:start="1565:19" pos:end="1565:19">=</operator> <call pos:start="1565:21" pos:end="1565:41"><name pos:start="1565:21" pos:end="1565:32">tci_read_r64</name><argument_list pos:start="1565:33" pos:end="1565:41">(<argument pos:start="1565:34" pos:end="1565:40"><expr pos:start="1565:34" pos:end="1565:40"><operator pos:start="1565:34" pos:end="1565:34">&amp;</operator><name pos:start="1565:35" pos:end="1565:40">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1567:13" pos:end="1570:0"><expr pos:start="1567:13" pos:end="1567:43"><name pos:start="1567:13" pos:end="1567:17">taddr</name> <operator pos:start="1567:19" pos:end="1567:19">=</operator> <call pos:start="1567:21" pos:end="1567:43"><name pos:start="1567:21" pos:end="1567:34">tci_read_ulong</name><argument_list pos:start="1567:35" pos:end="1567:43">(<argument pos:start="1567:36" pos:end="1567:42"><expr pos:start="1567:36" pos:end="1567:42"><operator pos:start="1567:36" pos:end="1567:36">&amp;</operator><name pos:start="1567:37" pos:end="1567:42">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="1569:1" pos:end="1569:21">#<cpp:directive pos:start="1569:2" pos:end="1569:6">ifdef</cpp:directive> <name pos:start="1569:8" pos:end="1569:21">CONFIG_SOFTMMU</name></cpp:ifdef>

            <expr_stmt pos:start="1571:13" pos:end="1571:37"><expr pos:start="1571:13" pos:end="1571:36"><name pos:start="1571:13" pos:end="1571:14">t2</name> <operator pos:start="1571:16" pos:end="1571:16">=</operator> <call pos:start="1571:18" pos:end="1571:36"><name pos:start="1571:18" pos:end="1571:27">tci_read_i</name><argument_list pos:start="1571:28" pos:end="1571:36">(<argument pos:start="1571:29" pos:end="1571:35"><expr pos:start="1571:29" pos:end="1571:35"><operator pos:start="1571:29" pos:end="1571:29">&amp;</operator><name pos:start="1571:30" pos:end="1571:35">tb_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1573:13" pos:end="1576:0"><expr pos:start="1573:13" pos:end="1573:49"><call pos:start="1573:13" pos:end="1573:49"><name pos:start="1573:13" pos:end="1573:26">helper_stq_mmu</name><argument_list pos:start="1573:27" pos:end="1573:49">(<argument pos:start="1573:28" pos:end="1573:30"><expr pos:start="1573:28" pos:end="1573:30"><name pos:start="1573:28" pos:end="1573:30">env</name></expr></argument>, <argument pos:start="1573:33" pos:end="1573:37"><expr pos:start="1573:33" pos:end="1573:37"><name pos:start="1573:33" pos:end="1573:37">taddr</name></expr></argument>, <argument pos:start="1573:40" pos:end="1573:44"><expr pos:start="1573:40" pos:end="1573:44"><name pos:start="1573:40" pos:end="1573:44">tmp64</name></expr></argument>, <argument pos:start="1573:47" pos:end="1573:48"><expr pos:start="1573:47" pos:end="1573:48"><name pos:start="1573:47" pos:end="1573:48">t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="1575:1" pos:end="1575:5">#<cpp:directive pos:start="1575:2" pos:end="1575:5">else</cpp:directive></cpp:else>

            <expr_stmt pos:start="1577:13" pos:end="1577:48"><expr pos:start="1577:13" pos:end="1577:47"><name pos:start="1577:13" pos:end="1577:21">host_addr</name> <operator pos:start="1577:23" pos:end="1577:23">=</operator> <operator pos:start="1577:25" pos:end="1577:25">(</operator><name pos:start="1577:26" pos:end="1577:41">tcg_target_ulong</name><operator pos:start="1577:42" pos:end="1577:42">)</operator><name pos:start="1577:43" pos:end="1577:47">taddr</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1579:13" pos:end="1582:0"><expr pos:start="1579:13" pos:end="1579:66"><operator pos:start="1579:13" pos:end="1579:13">*</operator><operator pos:start="1579:14" pos:end="1579:14">(</operator><name pos:start="1579:15" pos:end="1579:22">uint64_t</name> <operator pos:start="1579:24" pos:end="1579:24">*</operator><operator pos:start="1579:25" pos:end="1579:25">)</operator><operator pos:start="1579:26" pos:end="1579:26">(</operator><name pos:start="1579:27" pos:end="1579:35">host_addr</name> <operator pos:start="1579:37" pos:end="1579:37">+</operator> <name pos:start="1579:39" pos:end="1579:48">GUEST_BASE</name><operator pos:start="1579:49" pos:end="1579:49">)</operator> <operator pos:start="1579:51" pos:end="1579:51">=</operator> <call pos:start="1579:53" pos:end="1579:66"><name pos:start="1579:53" pos:end="1579:59">tswap64</name><argument_list pos:start="1579:60" pos:end="1579:66">(<argument pos:start="1579:61" pos:end="1579:65"><expr pos:start="1579:61" pos:end="1579:65"><name pos:start="1579:61" pos:end="1579:65">tmp64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="1581:1" pos:end="1581:6">#<cpp:directive pos:start="1581:2" pos:end="1581:6">endif</cpp:directive></cpp:endif>

            <break pos:start="1583:13" pos:end="1583:18">break;</break>

        <default pos:start="1585:9" pos:end="1585:16">default:</default>

            <expr_stmt pos:start="1587:13" pos:end="1587:19"><expr pos:start="1587:13" pos:end="1587:18"><call pos:start="1587:13" pos:end="1587:18"><name pos:start="1587:13" pos:end="1587:16">TODO</name><argument_list pos:start="1587:17" pos:end="1587:18">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1589:13" pos:end="1589:18">break;</break>

        </block_content>}</block></switch>

        <expr_stmt pos:start="1593:9" pos:end="1593:49"><expr pos:start="1593:9" pos:end="1593:48"><call pos:start="1593:9" pos:end="1593:48"><name pos:start="1593:9" pos:end="1593:14">assert</name><argument_list pos:start="1593:15" pos:end="1593:48">(<argument pos:start="1593:16" pos:end="1593:47"><expr pos:start="1593:16" pos:end="1593:47"><name pos:start="1593:16" pos:end="1593:21">tb_ptr</name> <operator pos:start="1593:23" pos:end="1593:24">==</operator> <name pos:start="1593:26" pos:end="1593:37">old_code_ptr</name> <operator pos:start="1593:39" pos:end="1593:39">+</operator> <name pos:start="1593:41" pos:end="1593:47">op_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<label pos:start="1597:1" pos:end="1597:5"><name pos:start="1597:1" pos:end="1597:4">exit</name>:</label>

    <return pos:start="1599:5" pos:end="1599:19">return <expr pos:start="1599:12" pos:end="1599:18"><name pos:start="1599:12" pos:end="1599:18">next_tb</name></expr>;</return>

</block_content>}</block></function>
</unit>
