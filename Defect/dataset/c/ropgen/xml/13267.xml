<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13267.c" pos:tabs="8"><function pos:start="1:1" pos:end="543:15"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">av_encode</name><parameter_list pos:start="1:21" pos:end="5:66">(<parameter pos:start="1:22" pos:end="1:51"><decl pos:start="1:22" pos:end="1:51"><type pos:start="1:22" pos:end="1:51"><name pos:start="1:22" pos:end="1:36">AVFormatContext</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier><modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:51">output_files</name></decl></parameter>,
                     <parameter pos:start="2:22" pos:end="2:40"><decl pos:start="2:22" pos:end="2:40"><type pos:start="2:22" pos:end="2:40"><name pos:start="2:22" pos:end="2:24">int</name></type> <name pos:start="2:26" pos:end="2:40">nb_output_files</name></decl></parameter>,
                     <parameter pos:start="3:22" pos:end="3:50"><decl pos:start="3:22" pos:end="3:50"><type pos:start="3:22" pos:end="3:50"><name pos:start="3:22" pos:end="3:36">AVFormatContext</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier><modifier pos:start="3:39" pos:end="3:39">*</modifier></type><name pos:start="3:40" pos:end="3:50">input_files</name></decl></parameter>,
                     <parameter pos:start="4:22" pos:end="4:39"><decl pos:start="4:22" pos:end="4:39"><type pos:start="4:22" pos:end="4:39"><name pos:start="4:22" pos:end="4:24">int</name></type> <name pos:start="4:26" pos:end="4:39">nb_input_files</name></decl></parameter>,
                     <parameter pos:start="5:22" pos:end="5:45"><decl pos:start="5:22" pos:end="5:45"><type pos:start="5:22" pos:end="5:45"><name pos:start="5:22" pos:end="5:32">AVStreamMap</name> <modifier pos:start="5:34" pos:end="5:34">*</modifier></type><name pos:start="5:35" pos:end="5:45">stream_maps</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:65"><decl pos:start="5:48" pos:end="5:65"><type pos:start="5:48" pos:end="5:65"><name pos:start="5:48" pos:end="5:50">int</name></type> <name pos:start="5:52" pos:end="5:65">nb_stream_maps</name></decl></parameter>)</parameter_list>
<block pos:start="6:1" pos:end="543:15">{<block_content pos:start="7:5" pos:end="543:15">
    <decl_stmt pos:start="7:5" pos:end="7:67"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">ret</name></decl>, <decl pos:start="7:14" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:14" pos:end="7:14">i</name></decl>, <decl pos:start="7:17" pos:end="7:17"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:17" pos:end="7:17">j</name></decl>, <decl pos:start="7:20" pos:end="7:20"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:20" pos:end="7:20">k</name></decl>, <decl pos:start="7:23" pos:end="7:23"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:23" pos:end="7:23">n</name></decl>, <decl pos:start="7:26" pos:end="7:40"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:26" pos:end="7:36">nb_istreams</name> <init pos:start="7:38" pos:end="7:40">= <expr pos:start="7:40" pos:end="7:40"><literal type="number" pos:start="7:40" pos:end="7:40">0</literal></expr></init></decl>, <decl pos:start="7:43" pos:end="7:57"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:43" pos:end="7:53">nb_ostreams</name> <init pos:start="7:55" pos:end="7:57">= <expr pos:start="7:57" pos:end="7:57"><literal type="number" pos:start="7:57" pos:end="7:57">0</literal></expr></init></decl>, <decl pos:start="7:60" pos:end="7:66"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:60" pos:end="7:66">pts_set</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:29"><decl pos:start="8:5" pos:end="8:23"><type pos:start="8:5" pos:end="8:21"><name pos:start="8:5" pos:end="8:19">AVFormatContext</name> <modifier pos:start="8:21" pos:end="8:21">*</modifier></type><name pos:start="8:22" pos:end="8:23">is</name></decl>, <decl pos:start="8:26" pos:end="8:28"><type ref="prev" pos:start="8:5" pos:end="8:21"><modifier pos:start="8:26" pos:end="8:26">*</modifier></type><name pos:start="8:27" pos:end="8:28">os</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:35"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">AVCodecContext</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:25">codec</name></decl>, <decl pos:start="9:28" pos:end="9:34"><type ref="prev" pos:start="9:5" pos:end="9:20"><modifier pos:start="9:28" pos:end="9:28">*</modifier></type><name pos:start="9:29" pos:end="9:34">icodec</name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:44"><decl pos:start="10:5" pos:end="10:23"><type pos:start="10:5" pos:end="10:20"><name pos:start="10:5" pos:end="10:18">AVOutputStream</name> <modifier pos:start="10:20" pos:end="10:20">*</modifier></type><name pos:start="10:21" pos:end="10:23">ost</name></decl>, <decl pos:start="10:26" pos:end="10:43"><type ref="prev" pos:start="10:5" pos:end="10:20"><modifier pos:start="10:26" pos:end="10:26">*</modifier><modifier pos:start="10:27" pos:end="10:27">*</modifier></type><name pos:start="10:28" pos:end="10:36">ost_table</name> <init pos:start="10:38" pos:end="10:43">= <expr pos:start="10:40" pos:end="10:43"><name pos:start="10:40" pos:end="10:43">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">AVInputStream</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:22">ist</name></decl>, <decl pos:start="11:25" pos:end="11:42"><type ref="prev" pos:start="11:5" pos:end="11:19"><modifier pos:start="11:25" pos:end="11:25">*</modifier><modifier pos:start="11:26" pos:end="11:26">*</modifier></type><name pos:start="11:27" pos:end="11:35">ist_table</name> <init pos:start="11:37" pos:end="11:42">= <expr pos:start="11:39" pos:end="11:42"><name pos:start="11:39" pos:end="11:42">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:28"><decl pos:start="12:5" pos:end="12:27"><type pos:start="12:5" pos:end="12:17"><name pos:start="12:5" pos:end="12:15">AVInputFile</name> <modifier pos:start="12:17" pos:end="12:17">*</modifier></type><name pos:start="12:18" pos:end="12:27">file_table</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:19">AVFormatContext</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:35">stream_no_data</name></decl>;</decl_stmt>
    <decl_stmt pos:start="14:5" pos:end="14:12"><decl pos:start="14:5" pos:end="14:11"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:11">key</name></decl>;</decl_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:80"><expr pos:start="15:5" pos:end="15:79"><name pos:start="15:5" pos:end="15:14">file_table</name><operator pos:start="15:15" pos:end="15:15">=</operator> <operator pos:start="15:17" pos:end="15:17">(</operator><name pos:start="15:18" pos:end="15:28">AVInputFile</name><operator pos:start="15:29" pos:end="15:29">*</operator><operator pos:start="15:30" pos:end="15:30">)</operator> <call pos:start="15:32" pos:end="15:79"><name pos:start="15:32" pos:end="15:41">av_mallocz</name><argument_list pos:start="15:42" pos:end="15:79">(<argument pos:start="15:43" pos:end="15:78"><expr pos:start="15:43" pos:end="15:78"><name pos:start="15:43" pos:end="15:56">nb_input_files</name> <operator pos:start="15:58" pos:end="15:58">*</operator> <sizeof pos:start="15:60" pos:end="15:78">sizeof<argument_list pos:start="15:66" pos:end="15:78">(<argument pos:start="15:67" pos:end="15:77"><expr pos:start="15:67" pos:end="15:77"><name pos:start="15:67" pos:end="15:77">AVInputFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="16:5" pos:end="17:18"><if pos:start="16:5" pos:end="17:18">if <condition pos:start="16:8" pos:end="16:20">(<expr pos:start="16:9" pos:end="16:19"><operator pos:start="16:9" pos:end="16:9">!</operator><name pos:start="16:10" pos:end="16:19">file_table</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18">
        <goto pos:start="17:9" pos:end="17:18">goto <name pos:start="17:14" pos:end="17:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <comment type="block" pos:start="18:5" pos:end="18:27">/* input stream init */</comment>
    <expr_stmt pos:start="19:5" pos:end="19:10"><expr pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:5">j</name> <operator pos:start="19:7" pos:end="19:7">=</operator> <literal type="number" pos:start="19:9" pos:end="19:9">0</literal></expr>;</expr_stmt>
    <for pos:start="20:5" pos:end="543:15">for<control pos:start="20:8" pos:end="20:33">(<init pos:start="20:9" pos:end="20:12"><expr pos:start="20:9" pos:end="20:11"><name pos:start="20:9" pos:end="20:9">i</name><operator pos:start="20:10" pos:end="20:10">=</operator><literal type="number" pos:start="20:11" pos:end="20:11">0</literal></expr>;</init><condition pos:start="20:13" pos:end="20:29"><expr pos:start="20:13" pos:end="20:28"><name pos:start="20:13" pos:end="20:13">i</name><operator pos:start="20:14" pos:end="20:14">&lt;</operator><name pos:start="20:15" pos:end="20:28">nb_input_files</name></expr>;</condition><incr pos:start="20:30" pos:end="20:32"><expr pos:start="20:30" pos:end="20:32"><name pos:start="20:30" pos:end="20:30">i</name><operator pos:start="20:31" pos:end="20:32">++</operator></expr></incr>)</control> <block pos:start="20:35" pos:end="543:15">{<block_content pos:start="21:9" pos:end="543:15">
        <expr_stmt pos:start="21:9" pos:end="21:28"><expr pos:start="21:9" pos:end="21:27"><name pos:start="21:9" pos:end="21:10">is</name> <operator pos:start="21:12" pos:end="21:12">=</operator> <name pos:start="21:14" pos:end="21:27"><name pos:start="21:14" pos:end="21:24">input_files</name><index pos:start="21:25" pos:end="21:27">[<expr pos:start="21:26" pos:end="21:26"><name pos:start="21:26" pos:end="21:26">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:36"><expr pos:start="22:9" pos:end="22:35"><name pos:start="22:9" pos:end="22:21"><name pos:start="22:9" pos:end="22:18">file_table</name><index pos:start="22:19" pos:end="22:21">[<expr pos:start="22:20" pos:end="22:20"><name pos:start="22:20" pos:end="22:20">i</name></expr>]</index></name><operator pos:start="22:22" pos:end="22:22">.</operator><name pos:start="22:23" pos:end="22:31">ist_index</name> <operator pos:start="22:33" pos:end="22:33">=</operator> <name pos:start="22:35" pos:end="22:35">j</name></expr>;</expr_stmt>
        <expr_stmt pos:start="23:9" pos:end="23:50"><expr pos:start="23:9" pos:end="23:49"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:18">file_table</name><index pos:start="23:19" pos:end="23:21">[<expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">i</name></expr>]</index></name><operator pos:start="23:22" pos:end="23:22">.</operator><name pos:start="23:23" pos:end="23:32">nb_streams</name> <operator pos:start="23:34" pos:end="23:34">=</operator> <name pos:start="23:36" pos:end="23:49"><name pos:start="23:36" pos:end="23:37">is</name><operator pos:start="23:38" pos:end="23:39">-&gt;</operator><name pos:start="23:40" pos:end="23:49">nb_streams</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="24:9" pos:end="24:28"><expr pos:start="24:9" pos:end="24:27"><name pos:start="24:9" pos:end="24:9">j</name> <operator pos:start="24:11" pos:end="24:12">+=</operator> <name pos:start="24:14" pos:end="24:27"><name pos:start="24:14" pos:end="24:15">is</name><operator pos:start="24:16" pos:end="24:17">-&gt;</operator><name pos:start="24:18" pos:end="24:27">nb_streams</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="25:5" pos:end="25:20"><expr pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:15">nb_istreams</name> <operator pos:start="25:17" pos:end="25:17">=</operator> <name pos:start="25:19" pos:end="25:19">j</name></expr>;</expr_stmt>
    <expr_stmt pos:start="26:5" pos:end="26:66"><expr pos:start="26:5" pos:end="26:65"><name pos:start="26:5" pos:end="26:13">ist_table</name> <operator pos:start="26:15" pos:end="26:15">=</operator> <call pos:start="26:17" pos:end="26:65"><name pos:start="26:17" pos:end="26:26">av_mallocz</name><argument_list pos:start="26:27" pos:end="26:65">(<argument pos:start="26:28" pos:end="26:64"><expr pos:start="26:28" pos:end="26:64"><name pos:start="26:28" pos:end="26:38">nb_istreams</name> <operator pos:start="26:40" pos:end="26:40">*</operator> <sizeof pos:start="26:42" pos:end="26:64">sizeof<argument_list pos:start="26:48" pos:end="26:64">(<argument pos:start="26:49" pos:end="26:63"><expr pos:start="26:49" pos:end="26:63"><name pos:start="26:49" pos:end="26:61">AVInputStream</name> <operator pos:start="26:63" pos:end="26:63">*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="27:5" pos:end="28:18"><if pos:start="27:5" pos:end="28:18">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:18">ist_table</name></expr>)</condition><block type="pseudo" pos:start="28:9" pos:end="28:18"><block_content pos:start="28:9" pos:end="28:18">
        <goto pos:start="28:9" pos:end="28:18">goto <name pos:start="28:14" pos:end="28:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <for pos:start="29:5" pos:end="543:15">for<control pos:start="29:8" pos:end="29:30">(<init pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">i</name><operator pos:start="29:10" pos:end="29:10">=</operator><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>;</init><condition pos:start="29:13" pos:end="29:26"><expr pos:start="29:13" pos:end="29:25"><name pos:start="29:13" pos:end="29:13">i</name><operator pos:start="29:14" pos:end="29:14">&lt;</operator><name pos:start="29:15" pos:end="29:25">nb_istreams</name></expr>;</condition><incr pos:start="29:27" pos:end="29:29"><expr pos:start="29:27" pos:end="29:29"><name pos:start="29:27" pos:end="29:27">i</name><operator pos:start="29:28" pos:end="29:29">++</operator></expr></incr>)</control> <block pos:start="29:32" pos:end="543:15">{<block_content pos:start="30:9" pos:end="543:15">
        <expr_stmt pos:start="30:9" pos:end="30:48"><expr pos:start="30:9" pos:end="30:47"><name pos:start="30:9" pos:end="30:11">ist</name> <operator pos:start="30:13" pos:end="30:13">=</operator> <call pos:start="30:15" pos:end="30:47"><name pos:start="30:15" pos:end="30:24">av_mallocz</name><argument_list pos:start="30:25" pos:end="30:47">(<argument pos:start="30:26" pos:end="30:46"><expr pos:start="30:26" pos:end="30:46"><sizeof pos:start="30:26" pos:end="30:46">sizeof<argument_list pos:start="30:32" pos:end="30:46">(<argument pos:start="30:33" pos:end="30:45"><expr pos:start="30:33" pos:end="30:45"><name pos:start="30:33" pos:end="30:45">AVInputStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="31:9" pos:end="32:22"><if pos:start="31:9" pos:end="32:22">if <condition pos:start="31:12" pos:end="31:17">(<expr pos:start="31:13" pos:end="31:16"><operator pos:start="31:13" pos:end="31:13">!</operator><name pos:start="31:14" pos:end="31:16">ist</name></expr>)</condition><block type="pseudo" pos:start="32:13" pos:end="32:22"><block_content pos:start="32:13" pos:end="32:22">
            <goto pos:start="32:13" pos:end="32:22">goto <name pos:start="32:18" pos:end="32:21">fail</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="33:9" pos:end="33:27"><expr pos:start="33:9" pos:end="33:26"><name pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:17">ist_table</name><index pos:start="33:18" pos:end="33:20">[<expr pos:start="33:19" pos:end="33:19"><name pos:start="33:19" pos:end="33:19">i</name></expr>]</index></name> <operator pos:start="33:22" pos:end="33:22">=</operator> <name pos:start="33:24" pos:end="33:26">ist</name></expr>;</expr_stmt>
    <expr_stmt pos:start="34:5" pos:end="34:10"><expr pos:start="34:5" pos:end="34:9"><name pos:start="34:5" pos:end="34:5">j</name> <operator pos:start="34:7" pos:end="34:7">=</operator> <literal type="number" pos:start="34:9" pos:end="34:9">0</literal></expr>;</expr_stmt>
    <for pos:start="35:5" pos:end="543:15">for<control pos:start="35:8" pos:end="35:33">(<init pos:start="35:9" pos:end="35:12"><expr pos:start="35:9" pos:end="35:11"><name pos:start="35:9" pos:end="35:9">i</name><operator pos:start="35:10" pos:end="35:10">=</operator><literal type="number" pos:start="35:11" pos:end="35:11">0</literal></expr>;</init><condition pos:start="35:13" pos:end="35:29"><expr pos:start="35:13" pos:end="35:28"><name pos:start="35:13" pos:end="35:13">i</name><operator pos:start="35:14" pos:end="35:14">&lt;</operator><name pos:start="35:15" pos:end="35:28">nb_input_files</name></expr>;</condition><incr pos:start="35:30" pos:end="35:32"><expr pos:start="35:30" pos:end="35:32"><name pos:start="35:30" pos:end="35:30">i</name><operator pos:start="35:31" pos:end="35:32">++</operator></expr></incr>)</control> <block pos:start="35:35" pos:end="543:15">{<block_content pos:start="36:9" pos:end="543:15">
        <expr_stmt pos:start="36:9" pos:end="36:28"><expr pos:start="36:9" pos:end="36:27"><name pos:start="36:9" pos:end="36:10">is</name> <operator pos:start="36:12" pos:end="36:12">=</operator> <name pos:start="36:14" pos:end="36:27"><name pos:start="36:14" pos:end="36:24">input_files</name><index pos:start="36:25" pos:end="36:27">[<expr pos:start="36:26" pos:end="36:26"><name pos:start="36:26" pos:end="36:26">i</name></expr>]</index></name></expr>;</expr_stmt>
        <for pos:start="37:9" pos:end="543:15">for<control pos:start="37:12" pos:end="37:37">(<init pos:start="37:13" pos:end="37:16"><expr pos:start="37:13" pos:end="37:15"><name pos:start="37:13" pos:end="37:13">k</name><operator pos:start="37:14" pos:end="37:14">=</operator><literal type="number" pos:start="37:15" pos:end="37:15">0</literal></expr>;</init><condition pos:start="37:17" pos:end="37:33"><expr pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:17">k</name><operator pos:start="37:18" pos:end="37:18">&lt;</operator><name pos:start="37:19" pos:end="37:32"><name pos:start="37:19" pos:end="37:20">is</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:32">nb_streams</name></name></expr>;</condition><incr pos:start="37:34" pos:end="37:36"><expr pos:start="37:34" pos:end="37:36"><name pos:start="37:34" pos:end="37:34">k</name><operator pos:start="37:35" pos:end="37:36">++</operator></expr></incr>)</control> <block pos:start="37:39" pos:end="543:15">{<block_content pos:start="38:13" pos:end="543:15">
            <expr_stmt pos:start="38:13" pos:end="38:33"><expr pos:start="38:13" pos:end="38:32"><name pos:start="38:13" pos:end="38:15">ist</name> <operator pos:start="38:17" pos:end="38:17">=</operator> <name pos:start="38:19" pos:end="38:32"><name pos:start="38:19" pos:end="38:27">ist_table</name><index pos:start="38:28" pos:end="38:32">[<expr pos:start="38:29" pos:end="38:31"><name pos:start="38:29" pos:end="38:29">j</name><operator pos:start="38:30" pos:end="38:31">++</operator></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="39:13" pos:end="39:37"><expr pos:start="39:13" pos:end="39:36"><name pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:15">ist</name><operator pos:start="39:16" pos:end="39:17">-&gt;</operator><name pos:start="39:18" pos:end="39:19">st</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:36"><name pos:start="39:23" pos:end="39:24">is</name><operator pos:start="39:25" pos:end="39:26">-&gt;</operator><name pos:start="39:27" pos:end="39:33">streams</name><index pos:start="39:34" pos:end="39:36">[<expr pos:start="39:35" pos:end="39:35"><name pos:start="39:35" pos:end="39:35">k</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="40:13" pos:end="40:32"><expr pos:start="40:13" pos:end="40:31"><name pos:start="40:13" pos:end="40:27"><name pos:start="40:13" pos:end="40:15">ist</name><operator pos:start="40:16" pos:end="40:17">-&gt;</operator><name pos:start="40:18" pos:end="40:27">file_index</name></name> <operator pos:start="40:29" pos:end="40:29">=</operator> <name pos:start="40:31" pos:end="40:31">i</name></expr>;</expr_stmt>
            <expr_stmt pos:start="41:13" pos:end="41:27"><expr pos:start="41:13" pos:end="41:26"><name pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:15">ist</name><operator pos:start="41:16" pos:end="41:17">-&gt;</operator><name pos:start="41:18" pos:end="41:22">index</name></name> <operator pos:start="41:24" pos:end="41:24">=</operator> <name pos:start="41:26" pos:end="41:26">k</name></expr>;</expr_stmt>
            <expr_stmt pos:start="42:13" pos:end="42:29"><expr pos:start="42:13" pos:end="42:28"><name pos:start="42:13" pos:end="42:24"><name pos:start="42:13" pos:end="42:15">ist</name><operator pos:start="42:16" pos:end="42:17">-&gt;</operator><name pos:start="42:18" pos:end="42:24">discard</name></name> <operator pos:start="42:26" pos:end="42:26">=</operator> <literal type="number" pos:start="42:28" pos:end="42:28">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="42:31" pos:end="43:51">/* the stream is discarded by default
                                 (changed later) */</comment>
            <if_stmt pos:start="44:13" pos:end="543:15"><if pos:start="44:13" pos:end="543:15">if <condition pos:start="44:16" pos:end="44:40">(<expr pos:start="44:17" pos:end="44:39"><name pos:start="44:17" pos:end="44:39"><name pos:start="44:17" pos:end="44:19">ist</name><operator pos:start="44:20" pos:end="44:21">-&gt;</operator><name pos:start="44:22" pos:end="44:23">st</name><operator pos:start="44:24" pos:end="44:25">-&gt;</operator><name pos:start="44:26" pos:end="44:30">codec</name><operator pos:start="44:31" pos:end="44:31">.</operator><name pos:start="44:32" pos:end="44:39">rate_emu</name></name></expr>)</condition> <block pos:start="44:42" pos:end="543:15">{<block_content pos:start="45:17" pos:end="543:15">
                <expr_stmt pos:start="45:17" pos:end="45:42"><expr pos:start="45:17" pos:end="45:41"><name pos:start="45:17" pos:end="45:26"><name pos:start="45:17" pos:end="45:19">ist</name><operator pos:start="45:20" pos:end="45:21">-&gt;</operator><name pos:start="45:22" pos:end="45:26">start</name></name> <operator pos:start="45:28" pos:end="45:28">=</operator> <call pos:start="45:30" pos:end="45:41"><name pos:start="45:30" pos:end="45:39">av_gettime</name><argument_list pos:start="45:40" pos:end="45:41">()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="46:17" pos:end="46:31"><expr pos:start="46:17" pos:end="46:30"><name pos:start="46:17" pos:end="46:26"><name pos:start="46:17" pos:end="46:19">ist</name><operator pos:start="46:20" pos:end="46:21">-&gt;</operator><name pos:start="46:22" pos:end="46:26">frame</name></name> <operator pos:start="46:28" pos:end="46:28">=</operator> <literal type="number" pos:start="46:30" pos:end="46:30">0</literal></expr>;</expr_stmt>
    <comment type="block" pos:start="47:5" pos:end="47:28">/* output stream init */</comment>
    <expr_stmt pos:start="48:5" pos:end="48:20"><expr pos:start="48:5" pos:end="48:19"><name pos:start="48:5" pos:end="48:15">nb_ostreams</name> <operator pos:start="48:17" pos:end="48:17">=</operator> <literal type="number" pos:start="48:19" pos:end="48:19">0</literal></expr>;</expr_stmt>
    <for pos:start="49:5" pos:end="543:15">for<control pos:start="49:8" pos:end="49:34">(<init pos:start="49:9" pos:end="49:12"><expr pos:start="49:9" pos:end="49:11"><name pos:start="49:9" pos:end="49:9">i</name><operator pos:start="49:10" pos:end="49:10">=</operator><literal type="number" pos:start="49:11" pos:end="49:11">0</literal></expr>;</init><condition pos:start="49:13" pos:end="49:30"><expr pos:start="49:13" pos:end="49:29"><name pos:start="49:13" pos:end="49:13">i</name><operator pos:start="49:14" pos:end="49:14">&lt;</operator><name pos:start="49:15" pos:end="49:29">nb_output_files</name></expr>;</condition><incr pos:start="49:31" pos:end="49:33"><expr pos:start="49:31" pos:end="49:33"><name pos:start="49:31" pos:end="49:31">i</name><operator pos:start="49:32" pos:end="49:33">++</operator></expr></incr>)</control> <block pos:start="49:36" pos:end="543:15">{<block_content pos:start="50:9" pos:end="543:15">
        <expr_stmt pos:start="50:9" pos:end="50:29"><expr pos:start="50:9" pos:end="50:28"><name pos:start="50:9" pos:end="50:10">os</name> <operator pos:start="50:12" pos:end="50:12">=</operator> <name pos:start="50:14" pos:end="50:28"><name pos:start="50:14" pos:end="50:25">output_files</name><index pos:start="50:26" pos:end="50:28">[<expr pos:start="50:27" pos:end="50:27"><name pos:start="50:27" pos:end="50:27">i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt pos:start="51:9" pos:end="51:38"><expr pos:start="51:9" pos:end="51:37"><name pos:start="51:9" pos:end="51:19">nb_ostreams</name> <operator pos:start="51:21" pos:end="51:22">+=</operator> <name pos:start="51:24" pos:end="51:37"><name pos:start="51:24" pos:end="51:25">os</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:37">nb_streams</name></name></expr>;</expr_stmt>
    <if_stmt pos:start="52:5" pos:end="543:15"><if pos:start="52:5" pos:end="543:15">if <condition pos:start="52:8" pos:end="52:60">(<expr pos:start="52:9" pos:end="52:59"><name pos:start="52:9" pos:end="52:22">nb_stream_maps</name> <operator pos:start="52:24" pos:end="52:24">&gt;</operator> <literal type="number" pos:start="52:26" pos:end="52:26">0</literal> <operator pos:start="52:28" pos:end="52:29">&amp;&amp;</operator> <name pos:start="52:31" pos:end="52:44">nb_stream_maps</name> <operator pos:start="52:46" pos:end="52:47">!=</operator> <name pos:start="52:49" pos:end="52:59">nb_ostreams</name></expr>)</condition> <block pos:start="52:62" pos:end="543:15">{<block_content pos:start="53:9" pos:end="543:15">
        <expr_stmt pos:start="53:9" pos:end="53:87"><expr pos:start="53:9" pos:end="53:86"><call pos:start="53:9" pos:end="53:86"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="53:86">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:85"><expr pos:start="53:25" pos:end="53:85"><literal type="string" pos:start="53:25" pos:end="53:85">"Number of stream maps must match number of output streams\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block" pos:start="54:5" pos:end="54:78">/* Sanity check the mapping args -- do the input files &amp; streams exist? */</comment>
    <for pos:start="55:5" pos:end="543:15">for<control pos:start="55:8" pos:end="55:33">(<init pos:start="55:9" pos:end="55:12"><expr pos:start="55:9" pos:end="55:11"><name pos:start="55:9" pos:end="55:9">i</name><operator pos:start="55:10" pos:end="55:10">=</operator><literal type="number" pos:start="55:11" pos:end="55:11">0</literal></expr>;</init><condition pos:start="55:13" pos:end="55:29"><expr pos:start="55:13" pos:end="55:28"><name pos:start="55:13" pos:end="55:13">i</name><operator pos:start="55:14" pos:end="55:14">&lt;</operator><name pos:start="55:15" pos:end="55:28">nb_stream_maps</name></expr>;</condition><incr pos:start="55:30" pos:end="55:32"><expr pos:start="55:30" pos:end="55:32"><name pos:start="55:30" pos:end="55:30">i</name><operator pos:start="55:31" pos:end="55:32">++</operator></expr></incr>)</control> <block pos:start="55:35" pos:end="543:15">{<block_content pos:start="56:9" pos:end="543:15">
        <decl_stmt pos:start="56:9" pos:end="56:43"><decl pos:start="56:9" pos:end="56:42"><type pos:start="56:9" pos:end="56:11"><name pos:start="56:9" pos:end="56:11">int</name></type> <name pos:start="56:13" pos:end="56:14">fi</name> <init pos:start="56:16" pos:end="56:42">= <expr pos:start="56:18" pos:end="56:42"><name pos:start="56:18" pos:end="56:31"><name pos:start="56:18" pos:end="56:28">stream_maps</name><index pos:start="56:29" pos:end="56:31">[<expr pos:start="56:30" pos:end="56:30"><name pos:start="56:30" pos:end="56:30">i</name></expr>]</index></name><operator pos:start="56:32" pos:end="56:32">.</operator><name pos:start="56:33" pos:end="56:42">file_index</name></expr></init></decl>;</decl_stmt>
        <decl_stmt pos:start="57:9" pos:end="57:45"><decl pos:start="57:9" pos:end="57:44"><type pos:start="57:9" pos:end="57:11"><name pos:start="57:9" pos:end="57:11">int</name></type> <name pos:start="57:13" pos:end="57:14">si</name> <init pos:start="57:16" pos:end="57:44">= <expr pos:start="57:18" pos:end="57:44"><name pos:start="57:18" pos:end="57:31"><name pos:start="57:18" pos:end="57:28">stream_maps</name><index pos:start="57:29" pos:end="57:31">[<expr pos:start="57:30" pos:end="57:30"><name pos:start="57:30" pos:end="57:30">i</name></expr>]</index></name><operator pos:start="57:32" pos:end="57:32">.</operator><name pos:start="57:33" pos:end="57:44">stream_index</name></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="58:9" pos:end="543:15"><if pos:start="58:9" pos:end="543:15">if <condition pos:start="58:12" pos:end="59:57">(<expr pos:start="58:13" pos:end="59:56"><name pos:start="58:13" pos:end="58:26"><name pos:start="58:13" pos:end="58:14">fi</name> <argument_list type="generic" pos:start="58:16" pos:end="58:26">&lt; <argument pos:start="58:18" pos:end="58:24"><expr pos:start="58:18" pos:end="58:24"><literal type="number" pos:start="58:18" pos:end="58:18">0</literal> <operator pos:start="58:20" pos:end="58:21">||</operator> <name pos:start="58:23" pos:end="58:24">fi</name></expr></argument> &gt;</argument_list></name> <name pos:start="58:28" pos:end="58:41">nb_input_files</name> <operator pos:start="58:43" pos:end="58:43">-</operator> <literal type="number" pos:start="58:45" pos:end="58:45">1</literal> <operator pos:start="58:47" pos:end="58:48">||</operator>
            <name pos:start="59:13" pos:end="59:26"><name pos:start="59:13" pos:end="59:14">si</name> <argument_list type="generic" pos:start="59:16" pos:end="59:26">&lt; <argument pos:start="59:18" pos:end="59:24"><expr pos:start="59:18" pos:end="59:24"><literal type="number" pos:start="59:18" pos:end="59:18">0</literal> <operator pos:start="59:20" pos:end="59:21">||</operator> <name pos:start="59:23" pos:end="59:24">si</name></expr></argument> &gt;</argument_list></name> <name pos:start="59:28" pos:end="59:41"><name pos:start="59:28" pos:end="59:37">file_table</name><index pos:start="59:38" pos:end="59:41">[<expr pos:start="59:39" pos:end="59:40"><name pos:start="59:39" pos:end="59:40">fi</name></expr>]</index></name><operator pos:start="59:42" pos:end="59:42">.</operator><name pos:start="59:43" pos:end="59:52">nb_streams</name> <operator pos:start="59:54" pos:end="59:54">-</operator> <literal type="number" pos:start="59:56" pos:end="59:56">1</literal></expr>)</condition> <block pos:start="59:59" pos:end="543:15">{<block_content pos:start="60:13" pos:end="543:15">
            <expr_stmt pos:start="60:13" pos:end="60:75"><expr pos:start="60:13" pos:end="60:74"><call pos:start="60:13" pos:end="60:74"><name pos:start="60:13" pos:end="60:19">fprintf</name><argument_list pos:start="60:20" pos:end="60:74">(<argument pos:start="60:21" pos:end="60:26"><expr pos:start="60:21" pos:end="60:26"><name pos:start="60:21" pos:end="60:26">stderr</name></expr></argument>,<argument pos:start="60:28" pos:end="60:65"><expr pos:start="60:28" pos:end="60:65"><literal type="string" pos:start="60:28" pos:end="60:65">"Could not find input stream #%d.%d\n"</literal></expr></argument>, <argument pos:start="60:68" pos:end="60:69"><expr pos:start="60:68" pos:end="60:69"><name pos:start="60:68" pos:end="60:69">fi</name></expr></argument>, <argument pos:start="60:72" pos:end="60:73"><expr pos:start="60:72" pos:end="60:73"><name pos:start="60:72" pos:end="60:73">si</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="61:5" pos:end="61:67"><expr pos:start="61:5" pos:end="61:66"><name pos:start="61:5" pos:end="61:13">ost_table</name> <operator pos:start="61:15" pos:end="61:15">=</operator> <call pos:start="61:17" pos:end="61:66"><name pos:start="61:17" pos:end="61:26">av_mallocz</name><argument_list pos:start="61:27" pos:end="61:66">(<argument pos:start="61:28" pos:end="61:65"><expr pos:start="61:28" pos:end="61:65"><sizeof pos:start="61:28" pos:end="61:51">sizeof<argument_list pos:start="61:34" pos:end="61:51">(<argument pos:start="61:35" pos:end="61:50"><expr pos:start="61:35" pos:end="61:50"><name pos:start="61:35" pos:end="61:48">AVOutputStream</name> <operator pos:start="61:50" pos:end="61:50">*</operator></expr></argument>)</argument_list></sizeof> <operator pos:start="61:53" pos:end="61:53">*</operator> <name pos:start="61:55" pos:end="61:65">nb_ostreams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="62:5" pos:end="63:18"><if pos:start="62:5" pos:end="63:18">if <condition pos:start="62:8" pos:end="62:19">(<expr pos:start="62:9" pos:end="62:18"><operator pos:start="62:9" pos:end="62:9">!</operator><name pos:start="62:10" pos:end="62:18">ost_table</name></expr>)</condition><block type="pseudo" pos:start="63:9" pos:end="63:18"><block_content pos:start="63:9" pos:end="63:18">
        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto></block_content></block></if></if_stmt>
    <for pos:start="64:5" pos:end="543:15">for<control pos:start="64:8" pos:end="64:30">(<init pos:start="64:9" pos:end="64:12"><expr pos:start="64:9" pos:end="64:11"><name pos:start="64:9" pos:end="64:9">i</name><operator pos:start="64:10" pos:end="64:10">=</operator><literal type="number" pos:start="64:11" pos:end="64:11">0</literal></expr>;</init><condition pos:start="64:13" pos:end="64:26"><expr pos:start="64:13" pos:end="64:25"><name pos:start="64:13" pos:end="64:13">i</name><operator pos:start="64:14" pos:end="64:14">&lt;</operator><name pos:start="64:15" pos:end="64:25">nb_ostreams</name></expr>;</condition><incr pos:start="64:27" pos:end="64:29"><expr pos:start="64:27" pos:end="64:29"><name pos:start="64:27" pos:end="64:27">i</name><operator pos:start="64:28" pos:end="64:29">++</operator></expr></incr>)</control> <block pos:start="64:32" pos:end="543:15">{<block_content pos:start="65:9" pos:end="543:15">
        <expr_stmt pos:start="65:9" pos:end="65:49"><expr pos:start="65:9" pos:end="65:48"><name pos:start="65:9" pos:end="65:11">ost</name> <operator pos:start="65:13" pos:end="65:13">=</operator> <call pos:start="65:15" pos:end="65:48"><name pos:start="65:15" pos:end="65:24">av_mallocz</name><argument_list pos:start="65:25" pos:end="65:48">(<argument pos:start="65:26" pos:end="65:47"><expr pos:start="65:26" pos:end="65:47"><sizeof pos:start="65:26" pos:end="65:47">sizeof<argument_list pos:start="65:32" pos:end="65:47">(<argument pos:start="65:33" pos:end="65:46"><expr pos:start="65:33" pos:end="65:46"><name pos:start="65:33" pos:end="65:46">AVOutputStream</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="66:9" pos:end="67:22"><if pos:start="66:9" pos:end="67:22">if <condition pos:start="66:12" pos:end="66:17">(<expr pos:start="66:13" pos:end="66:16"><operator pos:start="66:13" pos:end="66:13">!</operator><name pos:start="66:14" pos:end="66:16">ost</name></expr>)</condition><block type="pseudo" pos:start="67:13" pos:end="67:22"><block_content pos:start="67:13" pos:end="67:22">
            <goto pos:start="67:13" pos:end="67:22">goto <name pos:start="67:18" pos:end="67:21">fail</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt pos:start="68:9" pos:end="68:27"><expr pos:start="68:9" pos:end="68:26"><name pos:start="68:9" pos:end="68:20"><name pos:start="68:9" pos:end="68:17">ost_table</name><index pos:start="68:18" pos:end="68:20">[<expr pos:start="68:19" pos:end="68:19"><name pos:start="68:19" pos:end="68:19">i</name></expr>]</index></name> <operator pos:start="68:22" pos:end="68:22">=</operator> <name pos:start="68:24" pos:end="68:26">ost</name></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:10"><expr pos:start="69:5" pos:end="69:9"><name pos:start="69:5" pos:end="69:5">n</name> <operator pos:start="69:7" pos:end="69:7">=</operator> <literal type="number" pos:start="69:9" pos:end="69:9">0</literal></expr>;</expr_stmt>
    <for pos:start="70:5" pos:end="543:15">for<control pos:start="70:8" pos:end="70:34">(<init pos:start="70:9" pos:end="70:12"><expr pos:start="70:9" pos:end="70:11"><name pos:start="70:9" pos:end="70:9">k</name><operator pos:start="70:10" pos:end="70:10">=</operator><literal type="number" pos:start="70:11" pos:end="70:11">0</literal></expr>;</init><condition pos:start="70:13" pos:end="70:30"><expr pos:start="70:13" pos:end="70:29"><name pos:start="70:13" pos:end="70:13">k</name><operator pos:start="70:14" pos:end="70:14">&lt;</operator><name pos:start="70:15" pos:end="70:29">nb_output_files</name></expr>;</condition><incr pos:start="70:31" pos:end="70:33"><expr pos:start="70:31" pos:end="70:33"><name pos:start="70:31" pos:end="70:31">k</name><operator pos:start="70:32" pos:end="70:33">++</operator></expr></incr>)</control> <block pos:start="70:36" pos:end="543:15">{<block_content pos:start="71:9" pos:end="543:15">
        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:10">os</name> <operator pos:start="71:12" pos:end="71:12">=</operator> <name pos:start="71:14" pos:end="71:28"><name pos:start="71:14" pos:end="71:25">output_files</name><index pos:start="71:26" pos:end="71:28">[<expr pos:start="71:27" pos:end="71:27"><name pos:start="71:27" pos:end="71:27">k</name></expr>]</index></name></expr>;</expr_stmt>
        <for pos:start="72:9" pos:end="543:15">for<control pos:start="72:12" pos:end="72:37">(<init pos:start="72:13" pos:end="72:16"><expr pos:start="72:13" pos:end="72:15"><name pos:start="72:13" pos:end="72:13">i</name><operator pos:start="72:14" pos:end="72:14">=</operator><literal type="number" pos:start="72:15" pos:end="72:15">0</literal></expr>;</init><condition pos:start="72:17" pos:end="72:33"><expr pos:start="72:17" pos:end="72:32"><name pos:start="72:17" pos:end="72:17">i</name><operator pos:start="72:18" pos:end="72:18">&lt;</operator><name pos:start="72:19" pos:end="72:32"><name pos:start="72:19" pos:end="72:20">os</name><operator pos:start="72:21" pos:end="72:22">-&gt;</operator><name pos:start="72:23" pos:end="72:32">nb_streams</name></name></expr>;</condition><incr pos:start="72:34" pos:end="72:36"><expr pos:start="72:34" pos:end="72:36"><name pos:start="72:34" pos:end="72:34">i</name><operator pos:start="72:35" pos:end="72:36">++</operator></expr></incr>)</control> <block pos:start="72:39" pos:end="543:15">{<block_content pos:start="73:13" pos:end="543:15">
            <decl_stmt pos:start="73:13" pos:end="73:22"><decl pos:start="73:13" pos:end="73:21"><type pos:start="73:13" pos:end="73:15"><name pos:start="73:13" pos:end="73:15">int</name></type> <name pos:start="73:17" pos:end="73:21">found</name></decl>;</decl_stmt>
            <expr_stmt pos:start="74:13" pos:end="74:33"><expr pos:start="74:13" pos:end="74:32"><name pos:start="74:13" pos:end="74:15">ost</name> <operator pos:start="74:17" pos:end="74:17">=</operator> <name pos:start="74:19" pos:end="74:32"><name pos:start="74:19" pos:end="74:27">ost_table</name><index pos:start="74:28" pos:end="74:32">[<expr pos:start="74:29" pos:end="74:31"><name pos:start="74:29" pos:end="74:29">n</name><operator pos:start="74:30" pos:end="74:31">++</operator></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt pos:start="75:13" pos:end="75:32"><expr pos:start="75:13" pos:end="75:31"><name pos:start="75:13" pos:end="75:27"><name pos:start="75:13" pos:end="75:15">ost</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:27">file_index</name></name> <operator pos:start="75:29" pos:end="75:29">=</operator> <name pos:start="75:31" pos:end="75:31">k</name></expr>;</expr_stmt>
            <expr_stmt pos:start="76:13" pos:end="76:27"><expr pos:start="76:13" pos:end="76:26"><name pos:start="76:13" pos:end="76:22"><name pos:start="76:13" pos:end="76:15">ost</name><operator pos:start="76:16" pos:end="76:17">-&gt;</operator><name pos:start="76:18" pos:end="76:22">index</name></name> <operator pos:start="76:24" pos:end="76:24">=</operator> <name pos:start="76:26" pos:end="76:26">i</name></expr>;</expr_stmt>
            <expr_stmt pos:start="77:13" pos:end="77:37"><expr pos:start="77:13" pos:end="77:36"><name pos:start="77:13" pos:end="77:19"><name pos:start="77:13" pos:end="77:15">ost</name><operator pos:start="77:16" pos:end="77:17">-&gt;</operator><name pos:start="77:18" pos:end="77:19">st</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:36"><name pos:start="77:23" pos:end="77:24">os</name><operator pos:start="77:25" pos:end="77:26">-&gt;</operator><name pos:start="77:27" pos:end="77:33">streams</name><index pos:start="77:34" pos:end="77:36">[<expr pos:start="77:35" pos:end="77:35"><name pos:start="77:35" pos:end="77:35">i</name></expr>]</index></name></expr>;</expr_stmt>
            <if_stmt pos:start="78:13" pos:end="543:15"><if pos:start="78:13" pos:end="81:13">if <condition pos:start="78:16" pos:end="78:35">(<expr pos:start="78:17" pos:end="78:34"><name pos:start="78:17" pos:end="78:30">nb_stream_maps</name> <operator pos:start="78:32" pos:end="78:32">&gt;</operator> <literal type="number" pos:start="78:34" pos:end="78:34">0</literal></expr>)</condition> <block pos:start="78:37" pos:end="81:13">{<block_content pos:start="79:17" pos:end="80:50">
                <expr_stmt pos:start="79:17" pos:end="80:50"><expr pos:start="79:17" pos:end="80:49"><name pos:start="79:17" pos:end="79:33"><name pos:start="79:17" pos:end="79:19">ost</name><operator pos:start="79:20" pos:end="79:21">-&gt;</operator><name pos:start="79:22" pos:end="79:33">source_index</name></name> <operator pos:start="79:35" pos:end="79:35">=</operator> <name pos:start="79:37" pos:end="79:75"><name pos:start="79:37" pos:end="79:46">file_table</name><index pos:start="79:47" pos:end="79:75">[<expr pos:start="79:48" pos:end="79:74"><name pos:start="79:48" pos:end="79:63"><name pos:start="79:48" pos:end="79:58">stream_maps</name><index pos:start="79:59" pos:end="79:63">[<expr pos:start="79:60" pos:end="79:62"><name pos:start="79:60" pos:end="79:60">n</name><operator pos:start="79:61" pos:end="79:61">-</operator><literal type="number" pos:start="79:62" pos:end="79:62">1</literal></expr>]</index></name><operator pos:start="79:64" pos:end="79:64">.</operator><name pos:start="79:65" pos:end="79:74">file_index</name></expr>]</index></name><operator pos:start="79:76" pos:end="79:76">.</operator><name pos:start="79:77" pos:end="79:85">ist_index</name> <operator pos:start="79:87" pos:end="79:87">+</operator> 
                    <name pos:start="80:21" pos:end="80:36"><name pos:start="80:21" pos:end="80:31">stream_maps</name><index pos:start="80:32" pos:end="80:36">[<expr pos:start="80:33" pos:end="80:35"><name pos:start="80:33" pos:end="80:33">n</name><operator pos:start="80:34" pos:end="80:34">-</operator><literal type="number" pos:start="80:35" pos:end="80:35">1</literal></expr>]</index></name><operator pos:start="80:37" pos:end="80:37">.</operator><name pos:start="80:38" pos:end="80:49">stream_index</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="81:15" pos:end="543:15">else <block pos:start="81:20" pos:end="543:15">{<block_content pos:start="83:17" pos:end="543:15">
                <comment type="block" pos:start="82:17" pos:end="82:104">/* get corresponding input stream index : we select the first one with the right type */</comment>
                <expr_stmt pos:start="83:17" pos:end="83:26"><expr pos:start="83:17" pos:end="83:25"><name pos:start="83:17" pos:end="83:21">found</name> <operator pos:start="83:23" pos:end="83:23">=</operator> <literal type="number" pos:start="83:25" pos:end="83:25">0</literal></expr>;</expr_stmt>
                <for pos:start="84:17" pos:end="543:15">for<control pos:start="84:20" pos:end="84:42">(<init pos:start="84:21" pos:end="84:24"><expr pos:start="84:21" pos:end="84:23"><name pos:start="84:21" pos:end="84:21">j</name><operator pos:start="84:22" pos:end="84:22">=</operator><literal type="number" pos:start="84:23" pos:end="84:23">0</literal></expr>;</init><condition pos:start="84:25" pos:end="84:38"><expr pos:start="84:25" pos:end="84:37"><name pos:start="84:25" pos:end="84:25">j</name><operator pos:start="84:26" pos:end="84:26">&lt;</operator><name pos:start="84:27" pos:end="84:37">nb_istreams</name></expr>;</condition><incr pos:start="84:39" pos:end="84:41"><expr pos:start="84:39" pos:end="84:41"><name pos:start="84:39" pos:end="84:39">j</name><operator pos:start="84:40" pos:end="84:41">++</operator></expr></incr>)</control> <block pos:start="84:44" pos:end="543:15">{<block_content pos:start="85:21" pos:end="543:15">
                    <expr_stmt pos:start="85:21" pos:end="85:39"><expr pos:start="85:21" pos:end="85:38"><name pos:start="85:21" pos:end="85:23">ist</name> <operator pos:start="85:25" pos:end="85:25">=</operator> <name pos:start="85:27" pos:end="85:38"><name pos:start="85:27" pos:end="85:35">ist_table</name><index pos:start="85:36" pos:end="85:38">[<expr pos:start="85:37" pos:end="85:37"><name pos:start="85:37" pos:end="85:37">j</name></expr>]</index></name></expr>;</expr_stmt>
                    <if_stmt pos:start="86:21" pos:end="543:15"><if pos:start="86:21" pos:end="543:15">if <condition pos:start="86:24" pos:end="87:79">(<expr pos:start="86:25" pos:end="87:78"><name pos:start="86:25" pos:end="86:36"><name pos:start="86:25" pos:end="86:27">ist</name><operator pos:start="86:28" pos:end="86:29">-&gt;</operator><name pos:start="86:30" pos:end="86:36">discard</name></name> <operator pos:start="86:38" pos:end="86:39">&amp;&amp;</operator> 
                        <name pos:start="87:25" pos:end="87:49"><name pos:start="87:25" pos:end="87:27">ist</name><operator pos:start="87:28" pos:end="87:29">-&gt;</operator><name pos:start="87:30" pos:end="87:31">st</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:38">codec</name><operator pos:start="87:39" pos:end="87:39">.</operator><name pos:start="87:40" pos:end="87:49">codec_type</name></name> <operator pos:start="87:51" pos:end="87:52">==</operator> <name pos:start="87:54" pos:end="87:78"><name pos:start="87:54" pos:end="87:56">ost</name><operator pos:start="87:57" pos:end="87:58">-&gt;</operator><name pos:start="87:59" pos:end="87:60">st</name><operator pos:start="87:61" pos:end="87:62">-&gt;</operator><name pos:start="87:63" pos:end="87:67">codec</name><operator pos:start="87:68" pos:end="87:68">.</operator><name pos:start="87:69" pos:end="87:78">codec_type</name></name></expr>)</condition> <block pos:start="87:81" pos:end="543:15">{<block_content pos:start="88:25" pos:end="543:15">
                        <expr_stmt pos:start="88:25" pos:end="88:46"><expr pos:start="88:25" pos:end="88:45"><name pos:start="88:25" pos:end="88:41"><name pos:start="88:25" pos:end="88:27">ost</name><operator pos:start="88:28" pos:end="88:29">-&gt;</operator><name pos:start="88:30" pos:end="88:41">source_index</name></name> <operator pos:start="88:43" pos:end="88:43">=</operator> <name pos:start="88:45" pos:end="88:45">j</name></expr>;</expr_stmt>
                        <expr_stmt pos:start="89:25" pos:end="89:34"><expr pos:start="89:25" pos:end="89:33"><name pos:start="89:25" pos:end="89:29">found</name> <operator pos:start="89:31" pos:end="89:31">=</operator> <literal type="number" pos:start="89:33" pos:end="89:33">1</literal></expr>;</expr_stmt>
                <if_stmt pos:start="90:17" pos:end="543:15"><if pos:start="90:17" pos:end="543:15">if <condition pos:start="90:20" pos:end="90:27">(<expr pos:start="90:21" pos:end="90:26"><operator pos:start="90:21" pos:end="90:21">!</operator><name pos:start="90:22" pos:end="90:26">found</name></expr>)</condition> <block pos:start="90:29" pos:end="543:15">{<block_content pos:start="92:21" pos:end="543:15">
                    <comment type="block" pos:start="91:21" pos:end="91:61">/* try again and reuse existing stream */</comment>
                    <for pos:start="92:21" pos:end="543:15">for<control pos:start="92:24" pos:end="92:46">(<init pos:start="92:25" pos:end="92:28"><expr pos:start="92:25" pos:end="92:27"><name pos:start="92:25" pos:end="92:25">j</name><operator pos:start="92:26" pos:end="92:26">=</operator><literal type="number" pos:start="92:27" pos:end="92:27">0</literal></expr>;</init><condition pos:start="92:29" pos:end="92:42"><expr pos:start="92:29" pos:end="92:41"><name pos:start="92:29" pos:end="92:29">j</name><operator pos:start="92:30" pos:end="92:30">&lt;</operator><name pos:start="92:31" pos:end="92:41">nb_istreams</name></expr>;</condition><incr pos:start="92:43" pos:end="92:45"><expr pos:start="92:43" pos:end="92:45"><name pos:start="92:43" pos:end="92:43">j</name><operator pos:start="92:44" pos:end="92:45">++</operator></expr></incr>)</control> <block pos:start="92:48" pos:end="543:15">{<block_content pos:start="93:25" pos:end="543:15">
                        <expr_stmt pos:start="93:25" pos:end="93:43"><expr pos:start="93:25" pos:end="93:42"><name pos:start="93:25" pos:end="93:27">ist</name> <operator pos:start="93:29" pos:end="93:29">=</operator> <name pos:start="93:31" pos:end="93:42"><name pos:start="93:31" pos:end="93:39">ist_table</name><index pos:start="93:40" pos:end="93:42">[<expr pos:start="93:41" pos:end="93:41"><name pos:start="93:41" pos:end="93:41">j</name></expr>]</index></name></expr>;</expr_stmt>
                        <if_stmt pos:start="94:25" pos:end="543:15"><if pos:start="94:25" pos:end="543:15">if <condition pos:start="94:28" pos:end="94:83">(<expr pos:start="94:29" pos:end="94:82"><name pos:start="94:29" pos:end="94:53"><name pos:start="94:29" pos:end="94:31">ist</name><operator pos:start="94:32" pos:end="94:33">-&gt;</operator><name pos:start="94:34" pos:end="94:35">st</name><operator pos:start="94:36" pos:end="94:37">-&gt;</operator><name pos:start="94:38" pos:end="94:42">codec</name><operator pos:start="94:43" pos:end="94:43">.</operator><name pos:start="94:44" pos:end="94:53">codec_type</name></name> <operator pos:start="94:55" pos:end="94:56">==</operator> <name pos:start="94:58" pos:end="94:82"><name pos:start="94:58" pos:end="94:60">ost</name><operator pos:start="94:61" pos:end="94:62">-&gt;</operator><name pos:start="94:63" pos:end="94:64">st</name><operator pos:start="94:65" pos:end="94:66">-&gt;</operator><name pos:start="94:67" pos:end="94:71">codec</name><operator pos:start="94:72" pos:end="94:72">.</operator><name pos:start="94:73" pos:end="94:82">codec_type</name></name></expr>)</condition> <block pos:start="94:85" pos:end="543:15">{<block_content pos:start="95:29" pos:end="543:15">
                            <expr_stmt pos:start="95:29" pos:end="95:50"><expr pos:start="95:29" pos:end="95:49"><name pos:start="95:29" pos:end="95:45"><name pos:start="95:29" pos:end="95:31">ost</name><operator pos:start="95:32" pos:end="95:33">-&gt;</operator><name pos:start="95:34" pos:end="95:45">source_index</name></name> <operator pos:start="95:47" pos:end="95:47">=</operator> <name pos:start="95:49" pos:end="95:49">j</name></expr>;</expr_stmt>
                            <expr_stmt pos:start="96:29" pos:end="96:38"><expr pos:start="96:29" pos:end="96:37"><name pos:start="96:29" pos:end="96:33">found</name> <operator pos:start="96:35" pos:end="96:35">=</operator> <literal type="number" pos:start="96:37" pos:end="96:37">1</literal></expr>;</expr_stmt>
                    <if_stmt pos:start="97:21" pos:end="543:15"><if pos:start="97:21" pos:end="543:15">if <condition pos:start="97:24" pos:end="97:31">(<expr pos:start="97:25" pos:end="97:30"><operator pos:start="97:25" pos:end="97:25">!</operator><name pos:start="97:26" pos:end="97:30">found</name></expr>)</condition> <block pos:start="97:33" pos:end="543:15">{<block_content pos:start="98:25" pos:end="543:15">
                        <macro pos:start="98:25" pos:end="543:15"><name pos:start="98:25" pos:end="98:31">fprintf</name><argument_list pos:start="98:32" pos:end="543:15">(<argument pos:start="98:33" pos:end="98:38">stderr</argument>, <argument pos:start="98:41" pos:end="98:101"><literal type="string" pos:start="98:41" pos:end="98:101">"Could not find input stream matching output stream #%d.%d\n"</literal></argument>,
            <argument pos:start="99:13" pos:end="543:15">ist = ist_table[ost-&gt;source_index];
            ist-&gt;discard = <literal type="number" pos:start="100:28" pos:end="100:28">0</literal>;
    <comment type="block" pos:start="101:5" pos:end="101:74">/* for each output stream, we compute the right encoding parameters */</comment>
    for(i=<literal type="number" pos:start="102:11" pos:end="102:11">0</literal>;i&lt;nb_ostreams;i++) {
        ost = ost_table[i];
        ist = ist_table[ost-&gt;source_index];
        codec = &amp;ost-&gt;st-&gt;codec;
        icodec = &amp;ist-&gt;st-&gt;codec;
        if (ost-&gt;st-&gt;stream_copy) {
            <comment type="block" pos:start="108:13" pos:end="108:73">/* if stream_copy is selected, no need to decode or encode */</comment>
            codec-&gt;codec_id = icodec-&gt;codec_id;
            codec-&gt;codec_type = icodec-&gt;codec_type;
            codec-&gt;codec_tag = icodec-&gt;codec_tag;
            codec-&gt;bit_rate = icodec-&gt;bit_rate;
            switch(codec-&gt;codec_type) {
            case CODEC_TYPE_AUDIO:
                codec-&gt;sample_rate = icodec-&gt;sample_rate;
                codec-&gt;channels = icodec-&gt;channels;
                break;
            case CODEC_TYPE_VIDEO:
                codec-&gt;frame_rate = icodec-&gt;frame_rate;
                codec-&gt;frame_rate_base = icodec-&gt;frame_rate_base;
                codec-&gt;width = icodec-&gt;width;
                codec-&gt;height = icodec-&gt;height;
                break;
            default:
                av_abort();
        } else {
            switch(codec-&gt;codec_type) {
            case CODEC_TYPE_AUDIO:
                if (fifo_init(&amp;ost-&gt;fifo, <literal type="number" pos:start="129:43" pos:end="129:43">2</literal> * MAX_AUDIO_PACKET_SIZE))
                    goto fail;
                if (codec-&gt;channels == icodec-&gt;channels &amp;&amp;
                    codec-&gt;sample_rate == icodec-&gt;sample_rate) {
                    ost-&gt;audio_resample = <literal type="number" pos:start="133:43" pos:end="133:43">0</literal>;
                } else {
                    if (codec-&gt;channels != icodec-&gt;channels &amp;&amp;
                        icodec-&gt;codec_id == CODEC_ID_AC3) {
                        <comment type="block" pos:start="137:25" pos:end="137:60">/* Special case for 5:1 AC3 input */</comment>
                        <comment type="block" pos:start="138:25" pos:end="138:60">/* and mono or stereo output      */</comment>
                        <comment type="block" pos:start="139:25" pos:end="139:65">/* Request specific number of channels */</comment>
                        icodec-&gt;channels = codec-&gt;channels;
                        if (codec-&gt;sample_rate == icodec-&gt;sample_rate)
                            ost-&gt;audio_resample = <literal type="number" pos:start="142:51" pos:end="142:51">0</literal>;
                        else {
                            ost-&gt;audio_resample = <literal type="number" pos:start="144:51" pos:end="144:51">1</literal>;
                            ost-&gt;resample = audio_resample_init(codec-&gt;channels, icodec-&gt;channels,
                                                        codec-&gt;sample_rate, 
                                                        icodec-&gt;sample_rate);
                        <comment type="block" pos:start="148:25" pos:end="148:65">/* Request specific number of channels */</comment>
                        icodec-&gt;channels = codec-&gt;channels;
                    } else {
                        ost-&gt;audio_resample = <literal type="number" pos:start="151:47" pos:end="151:47">1</literal>; 
                        ost-&gt;resample = audio_resample_init(codec-&gt;channels, icodec-&gt;channels,
                                                        codec-&gt;sample_rate, 
                                                        icodec-&gt;sample_rate);
                ist-&gt;decoding_needed = <literal type="number" pos:start="155:40" pos:end="155:40">1</literal>;
                ost-&gt;encoding_needed = <literal type="number" pos:start="156:40" pos:end="156:40">1</literal>;
                break;
            case CODEC_TYPE_VIDEO:
                if (codec-&gt;width == icodec-&gt;width &amp;&amp;
                    codec-&gt;height == icodec-&gt;height &amp;&amp;
                    frame_topBand == <literal type="number" pos:start="161:38" pos:end="161:38">0</literal> &amp;&amp;
                    frame_bottomBand == <literal type="number" pos:start="162:41" pos:end="162:41">0</literal> &amp;&amp;
                    frame_leftBand == <literal type="number" pos:start="163:39" pos:end="163:39">0</literal> &amp;&amp;
                    frame_rightBand == <literal type="number" pos:start="164:40" pos:end="164:40">0</literal>)
                {
                    ost-&gt;video_resample = <literal type="number" pos:start="166:43" pos:end="166:43">0</literal>;
                    ost-&gt;video_crop = <literal type="number" pos:start="167:39" pos:end="167:39">0</literal>;
                } else if ((codec-&gt;width == icodec-&gt;width -
                                (frame_leftBand + frame_rightBand)) &amp;&amp;
                        (codec-&gt;height == icodec-&gt;height -
                                (frame_topBand  + frame_bottomBand)))
                {
                    ost-&gt;video_resample = <literal type="number" pos:start="173:43" pos:end="173:43">0</literal>;
                    ost-&gt;video_crop = <literal type="number" pos:start="174:39" pos:end="174:39">1</literal>;
                    ost-&gt;topBand = frame_topBand;
                    ost-&gt;leftBand = frame_leftBand;
                } else {
                    uint8_t *buf;
                    ost-&gt;video_resample = <literal type="number" pos:start="179:43" pos:end="179:43">1</literal>;
                    ost-&gt;video_crop = <literal type="number" pos:start="180:39" pos:end="180:39">0</literal>; <comment type="line" pos:start="180:42" pos:end="180:83">// cropping is handled as part of resample</comment>
                    buf = av_malloc((codec-&gt;width * codec-&gt;height * <literal type="number" pos:start="181:69" pos:end="181:69">3</literal>) / <literal type="number" pos:start="181:74" pos:end="181:74">2</literal>);
                    if (!buf)
                        goto fail;
                    ost-&gt;pict_tmp.data[<literal type="number" pos:start="184:40" pos:end="184:40">0</literal>] = buf;
                    ost-&gt;pict_tmp.data[<literal type="number" pos:start="185:40" pos:end="185:40">1</literal>] = ost-&gt;pict_tmp.data[<literal type="number" pos:start="185:64" pos:end="185:64">0</literal>] + (codec-&gt;width * codec-&gt;height);
                    ost-&gt;pict_tmp.data[<literal type="number" pos:start="186:40" pos:end="186:40">2</literal>] = ost-&gt;pict_tmp.data[<literal type="number" pos:start="186:64" pos:end="186:64">1</literal>] + (codec-&gt;width * codec-&gt;height) / <literal type="number" pos:start="186:102" pos:end="186:102">4</literal>;
                    ost-&gt;pict_tmp.linesize[<literal type="number" pos:start="187:44" pos:end="187:44">0</literal>] = codec-&gt;width;
                    ost-&gt;pict_tmp.linesize[<literal type="number" pos:start="188:44" pos:end="188:44">1</literal>] = codec-&gt;width / <literal type="number" pos:start="188:64" pos:end="188:64">2</literal>;
                    ost-&gt;pict_tmp.linesize[<literal type="number" pos:start="189:44" pos:end="189:44">2</literal>] = codec-&gt;width / <literal type="number" pos:start="189:64" pos:end="189:64">2</literal>;
                    ost-&gt;img_resample_ctx = img_resample_full_init( 
                                      ost-&gt;st-&gt;codec.width, ost-&gt;st-&gt;codec.height,
                                      ist-&gt;st-&gt;codec.width, ist-&gt;st-&gt;codec.height,
                                      frame_topBand, frame_bottomBand,
                                      frame_leftBand, frame_rightBand);
                ost-&gt;encoding_needed = <literal type="number" pos:start="195:40" pos:end="195:40">1</literal>;
                ist-&gt;decoding_needed = <literal type="number" pos:start="196:40" pos:end="196:40">1</literal>;
                break;
            default:
                av_abort();
            <comment type="block" pos:start="200:13" pos:end="200:31">/* two pass mode */</comment>
            if (ost-&gt;encoding_needed &amp;&amp; 
                (codec-&gt;flags &amp; (CODEC_FLAG_PASS1 | CODEC_FLAG_PASS2))) {
                char logfilename[<literal type="number" pos:start="203:34" pos:end="203:37">1024</literal>];
                FILE *f;
                int size;
                char *logbuffer;
                snprintf(logfilename, sizeof(logfilename), <literal type="string" pos:start="207:60" pos:end="207:70">"%s-%d.log"</literal>, 
                         pass_logfilename ? 
                         pass_logfilename : DEFAULT_PASS_LOGFILENAME, i);
                if (codec-&gt;flags &amp; CODEC_FLAG_PASS1) {
                    f = fopen(logfilename, <literal type="string" pos:start="211:44" pos:end="211:46">"w"</literal>);
                    if (!f) {
                        perror(logfilename);
                    ost-&gt;logfile = f;
                } else {
                    <comment type="block" pos:start="216:21" pos:end="216:43">/* read the log file */</comment>
                    f = fopen(logfilename, <literal type="string" pos:start="217:44" pos:end="217:46">"r"</literal>);
                    if (!f) {
                        perror(logfilename);
                    fseek(f, <literal type="number" pos:start="220:30" pos:end="220:30">0</literal>, SEEK_END);
                    size = ftell(f);
                    fseek(f, <literal type="number" pos:start="222:30" pos:end="222:30">0</literal>, SEEK_SET);
                    logbuffer = av_malloc(size + <literal type="number" pos:start="223:50" pos:end="223:50">1</literal>);
                    if (!logbuffer) {
                        fprintf(stderr, <literal type="string" pos:start="225:41" pos:end="225:73">"Could not allocate log buffer\n"</literal>);
                    fread(logbuffer, <literal type="number" pos:start="226:38" pos:end="226:38">1</literal>, size, f);
                    fclose(f);
                    logbuffer[size] = <literal type="char" pos:start="228:39" pos:end="228:42">'\0'</literal>;
                    codec-&gt;stats_in = logbuffer;
    <comment type="block" pos:start="230:5" pos:end="231:24">/* dump the file output parameters - cannot be done before in case
       of stream copy */</comment>
    for(i=<literal type="number" pos:start="232:11" pos:end="232:11">0</literal>;i&lt;nb_output_files;i++) {
        dump_format(output_files[i], i, output_files[i]-&gt;filename, <literal type="number" pos:start="233:68" pos:end="233:68">1</literal>);
    <comment type="block" pos:start="234:5" pos:end="234:33">/* dump the stream mapping */</comment>
    fprintf(stderr, <literal type="string" pos:start="235:21" pos:end="235:39">"Stream mapping:\n"</literal>);
    for(i=<literal type="number" pos:start="236:11" pos:end="236:11">0</literal>;i&lt;nb_ostreams;i++) {
        ost = ost_table[i];
        fprintf(stderr, <literal type="string" pos:start="238:25" pos:end="238:53">"  Stream #%d.%d -&gt; #%d.%d\n"</literal>,
                ist_table[ost-&gt;source_index]-&gt;file_index,
                ist_table[ost-&gt;source_index]-&gt;index,
                ost-&gt;file_index, 
                ost-&gt;index);
    <comment type="block" pos:start="243:5" pos:end="243:27">/* open each encoder */</comment>
    for(i=<literal type="number" pos:start="244:11" pos:end="244:11">0</literal>;i&lt;nb_ostreams;i++) {
        ost = ost_table[i];
        if (ost-&gt;encoding_needed) {
            AVCodec *codec;
            codec = avcodec_find_encoder(ost-&gt;st-&gt;codec.codec_id);
            if (!codec) {
                fprintf(stderr, <literal type="string" pos:start="250:33" pos:end="250:78">"Unsupported codec for output stream #%d.%d\n"</literal>, 
            if (avcodec_open(&amp;ost-&gt;st-&gt;codec, codec) &lt; <literal type="number" pos:start="251:56" pos:end="251:56">0</literal>) {
                fprintf(stderr, <literal type="string" pos:start="252:33" pos:end="252:148">"Error while opening codec for stream #%d.%d - maybe incorrect parameters such as bit_rate, rate, width or height\n"</literal>, 
    <comment type="block" pos:start="253:5" pos:end="253:27">/* open each decoder */</comment>
    for(i=<literal type="number" pos:start="254:11" pos:end="254:11">0</literal>;i&lt;nb_istreams;i++) {
        ist = ist_table[i];
        if (ist-&gt;decoding_needed) {
            AVCodec *codec;
            codec = avcodec_find_decoder(ist-&gt;st-&gt;codec.codec_id);
            if (!codec) {
                fprintf(stderr, <literal type="string" pos:start="260:33" pos:end="260:85">"Unsupported codec (id=%d) for input stream #%d.%d\n"</literal>, 
                        ist-&gt;st-&gt;codec.codec_id, ist-&gt;file_index, ist-&gt;index);
            if (avcodec_open(&amp;ist-&gt;st-&gt;codec, codec) &lt; <literal type="number" pos:start="262:56" pos:end="262:56">0</literal>) {
                fprintf(stderr, <literal type="string" pos:start="263:33" pos:end="263:85">"Error while opening codec for input stream #%d.%d\n"</literal>, 
                        ist-&gt;file_index, ist-&gt;index);
            <comment type="line" pos:start="265:13" pos:end="265:64">//if (ist-&gt;st-&gt;codec.codec_type == CODEC_TYPE_VIDEO)</comment>
            <comment type="line" pos:start="266:13" pos:end="266:66">//    ist-&gt;st-&gt;codec.flags |= CODEC_FLAG_REPEAT_FIELD;</comment>
            ist-&gt;frame_decoded = <literal type="number" pos:start="267:34" pos:end="267:34">1</literal>;
    <comment type="block" pos:start="268:5" pos:end="268:18">/* init pts */</comment>
    for(i=<literal type="number" pos:start="269:11" pos:end="269:11">0</literal>;i&lt;nb_istreams;i++) {
        ist = ist_table[i];
    <comment type="block" pos:start="271:5" pos:end="271:67">/* compute buffer size max (should use a complete heuristic) */</comment>
    for(i=<literal type="number" pos:start="272:11" pos:end="272:11">0</literal>;i&lt;nb_input_files;i++) {
        file_table[i].buffer_size_max = <literal type="number" pos:start="273:41" pos:end="273:44">2048</literal>;
    <comment type="block" pos:start="274:5" pos:end="274:43">/* open files and write file headers */</comment>
    for(i=<literal type="number" pos:start="275:11" pos:end="275:11">0</literal>;i&lt;nb_output_files;i++) {
        os = output_files[i];
        if (av_write_header(os) &lt; <literal type="number" pos:start="277:35" pos:end="277:35">0</literal>) {
            fprintf(stderr, <literal type="string" pos:start="278:29" pos:end="278:104">"Could not write header for output file #%d (incorrect codec paramters ?)\n"</literal>, i);
            ret = -EINVAL;
            goto fail;
<cpp:ifndef pos:start="281:1" pos:end="281:20">#<cpp:directive pos:start="281:2" pos:end="281:7">ifndef</cpp:directive> <name pos:start="281:9" pos:end="281:20">CONFIG_WIN32</name></cpp:ifndef>
    if (!do_play) {
        fprintf(stderr, <literal type="string" pos:start="283:25" pos:end="283:54">"Press [q] to stop encoding\n"</literal>);
    } else {
        fprintf(stderr, <literal type="string" pos:start="285:25" pos:end="285:53">"Press [q] to stop playing\n"</literal>);
<cpp:endif pos:start="286:1" pos:end="286:6">#<cpp:directive pos:start="286:2" pos:end="286:6">endif</cpp:directive></cpp:endif>
    term_init();
    stream_no_data = <literal type="number" pos:start="288:22" pos:end="288:22">0</literal>;
    key = -<literal type="number" pos:start="289:12" pos:end="289:12">1</literal>;
    for(;;) {
        int file_index, ist_index;
        AVPacket pkt;
        uint8_t *ptr;
        int len;
        uint8_t *data_buf;
        int data_size, got_picture;
        AVPicture picture;
        short samples[AVCODEC_MAX_AUDIO_FRAME_SIZE / <literal type="number" pos:start="298:54" pos:end="298:54">2</literal>];
        void *buffer_to_free;
        double pts_min;
    redo:
        <comment type="block" pos:start="302:9" pos:end="302:35">/* if 'q' pressed, exits */</comment>
        if (key) {
            <comment type="block" pos:start="304:13" pos:end="304:45">/* read_key() returns 0 on EOF */</comment>
            key = read_key();
            if (key == <literal type="char" pos:start="306:24" pos:end="306:26">'q'</literal>)
                break;
        <comment type="block" pos:start="308:9" pos:end="309:33">/* select the stream that we must read now by looking at the
           smallest output pts */</comment>
        file_index = -<literal type="number" pos:start="310:23" pos:end="310:23">1</literal>;
        pts_min = <literal type="number" pos:start="311:19" pos:end="311:22">1e10</literal>;
        for(i=<literal type="number" pos:start="312:15" pos:end="312:15">0</literal>;i&lt;nb_ostreams;i++) {
            double pts;
            ost = ost_table[i];
            os = output_files[ost-&gt;file_index];
            ist = ist_table[ost-&gt;source_index];
            pts = (double)ost-&gt;st-&gt;pts.val * os-&gt;pts_num / os-&gt;pts_den;
            if (!file_table[ist-&gt;file_index].eof_reached &amp;&amp; 
                pts &lt; pts_min) {
                pts_min = pts;
                file_index = ist-&gt;file_index;
        <comment type="block" pos:start="322:9" pos:end="322:37">/* if none, if is finished */</comment>
        if (file_index &lt; <literal type="number" pos:start="323:26" pos:end="323:26">0</literal>) {
            break;
        <comment type="block" pos:start="325:9" pos:end="325:48">/* finish if recording time exhausted */</comment>
        if (recording_time &gt; <literal type="number" pos:start="326:30" pos:end="326:30">0</literal> &amp;&amp; pts_min &gt;= (recording_time / <literal type="number" pos:start="326:64" pos:end="326:72">1000000.0</literal>))
            break;
        <comment type="block" pos:start="328:9" pos:end="328:61">/* read a packet from it and output it in the fifo */</comment>
        is = input_files[file_index];
        if (av_read_packet(is, &amp;pkt) &lt; <literal type="number" pos:start="330:40" pos:end="330:40">0</literal>) {
            file_table[file_index].eof_reached = <literal type="number" pos:start="331:50" pos:end="331:50">1</literal>;
            continue;
        if (!pkt.size) {
            stream_no_data = is;
        } else {
            stream_no_data = <literal type="number" pos:start="336:30" pos:end="336:30">0</literal>;
        if (do_hex_dump) {
            printf(<literal type="string" pos:start="338:20" pos:end="338:43">"stream #%d, size=%d:\n"</literal>, pkt.stream_index, pkt.size);
            av_hex_dump(pkt.data, pkt.size);
        <comment type="block" pos:start="340:9" pos:end="341:52">/* the following test is needed in case new streams appear
           dynamically in stream : we ignore them */</comment>
        if (pkt.stream_index &gt;= file_table[file_index].nb_streams)
            goto discard_packet;
        ist_index = file_table[file_index].ist_index + pkt.stream_index;
        ist = ist_table[ist_index];
        if (ist-&gt;discard)
            goto discard_packet;
        <comment type="line" pos:start="348:9" pos:end="348:82">// printf("read #%d.%d size=%d\n", ist-&gt;file_index, ist-&gt;index, pkt.size);</comment>
        len = pkt.size;
        ptr = pkt.data;
        pts_set = <literal type="number" pos:start="351:19" pos:end="351:19">0</literal>;
        while (len &gt; <literal type="number" pos:start="352:22" pos:end="352:22">0</literal>) {
            int64_t ipts;
            ipts = AV_NOPTS_VALUE;
            <comment type="block" pos:start="355:13" pos:end="355:45">/* decode the packet if needed */</comment>
            data_buf = NULL; <comment type="block" pos:start="356:30" pos:end="356:44">/* fail safe */</comment>
            data_size = <literal type="number" pos:start="357:25" pos:end="357:25">0</literal>;
            if (ist-&gt;decoding_needed) {
                <comment type="block" pos:start="359:17" pos:end="360:54">/* NOTE1: we only take into account the PTS if a new
                   frame has begun (MPEG semantics) */</comment>
                <comment type="block" pos:start="361:17" pos:end="362:69">/* NOTE2: even if the fraction is not initialized,
                   av_frac_set can be used to set the integer part */</comment>
                if (ist-&gt;frame_decoded &amp;&amp; 
                    pkt.pts != AV_NOPTS_VALUE &amp;&amp; 
                    !pts_set) {
                    ipts = pkt.pts;
                    ist-&gt;frame_decoded = <literal type="number" pos:start="367:42" pos:end="367:42">0</literal>;
                    pts_set = <literal type="number" pos:start="368:31" pos:end="368:31">1</literal>;
                switch(ist-&gt;st-&gt;codec.codec_type) {
                case CODEC_TYPE_AUDIO:
                    <comment type="block" pos:start="371:21" pos:end="372:43">/* XXX: could avoid copy if PCM 16 bits with same
                       endianness as CPU */</comment>
                    ret = avcodec_decode_audio(&amp;ist-&gt;st-&gt;codec, samples, &amp;data_size,
                                               ptr, len);
                    if (ret &lt; <literal type="number" pos:start="375:31" pos:end="375:31">0</literal>)
                        goto fail_decode;
                    <comment type="block" pos:start="377:21" pos:end="377:62">/* Some bug in mpeg audio decoder gives */</comment>
                    <comment type="block" pos:start="378:21" pos:end="378:68">/* data_size &lt; 0, it seems they are overflows */</comment>
                    if (data_size &lt;= <literal type="number" pos:start="379:38" pos:end="379:38">0</literal>) {
                        <comment type="block" pos:start="380:25" pos:end="380:44">/* no audio frame */</comment>
                        ptr += ret;
                        len -= ret;
                        continue;
                    data_buf = (uint8_t *)samples;
                    break;
                case CODEC_TYPE_VIDEO:
                    {
                        AVFrame big_picture;
                        data_size = (ist-&gt;st-&gt;codec.width * ist-&gt;st-&gt;codec.height * <literal type="number" pos:start="389:85" pos:end="389:85">3</literal>) / <literal type="number" pos:start="389:90" pos:end="389:90">2</literal>;
                        ret = avcodec_decode_video(&amp;ist-&gt;st-&gt;codec, 
                                                   &amp;big_picture, &amp;got_picture, ptr, len);
                        picture= *(AVPicture*)&amp;big_picture;
                        ist-&gt;st-&gt;quality= big_picture.quality;
                        if (ret &lt; <literal type="number" pos:start="394:35" pos:end="394:35">0</literal>) {
                        fail_decode:
                            fprintf(stderr, <literal type="string" pos:start="396:45" pos:end="396:82">"Error while decoding stream #%d.%d\n"</literal>,
                                    ist-&gt;file_index, ist-&gt;index);
                            av_free_packet(&amp;pkt);
                            goto redo;
                        if (!got_picture) {
                            <comment type="block" pos:start="401:29" pos:end="401:48">/* no picture yet */</comment>
                            ptr += ret;
                            len -= ret;
                            continue;
                    break;
                default:
                    goto fail_decode;
            } else {
                data_buf = ptr;
                data_size = len;
                ret = len;
            ptr += ret;
            len -= ret;
            buffer_to_free = <literal type="number" pos:start="414:30" pos:end="414:30">0</literal>;
            if (ist-&gt;st-&gt;codec.codec_type == CODEC_TYPE_VIDEO) {
                pre_process_video_frame(ist, &amp;picture, &amp;buffer_to_free);
            ist-&gt;frame_decoded = <literal type="number" pos:start="417:34" pos:end="417:34">1</literal>;
            <comment type="block" pos:start="418:13" pos:end="418:38">/* frame rate emulation */</comment>
            if (ist-&gt;st-&gt;codec.rate_emu) {
                int64_t pts = av_rescale((int64_t) ist-&gt;frame * ist-&gt;st-&gt;codec.frame_rate_base, <literal type="number" pos:start="420:97" pos:end="420:103">1000000</literal>, ist-&gt;st-&gt;codec.frame_rate);
                int64_t now = av_gettime() - ist-&gt;start;
                if (pts &gt; now)
                    usleep(pts - now);
                ist-&gt;frame++;
<cpp:if pos:start="425:1" pos:end="425:5">#<cpp:directive pos:start="425:2" pos:end="425:3">if</cpp:directive> <expr pos:start="425:5" pos:end="425:5"><literal type="number" pos:start="425:5" pos:end="425:5">0</literal></expr></cpp:if>
            <comment type="block" pos:start="426:13" pos:end="427:54">/* mpeg PTS deordering : if it is a P or I frame, the PTS
               is the one of the next displayed one */</comment>
            <comment type="block" pos:start="428:13" pos:end="428:38">/* XXX: add mpeg4 too ? */</comment>
            if (ist-&gt;st-&gt;codec.codec_id == CODEC_ID_MPEG1VIDEO) {
                if (ist-&gt;st-&gt;codec.pict_type != B_TYPE) {
                    int64_t tmp;
                    tmp = ist-&gt;last_ip_pts;
                    ist-&gt;last_ip_pts  = ist-&gt;frac_pts.val;
                    ist-&gt;frac_pts.val = tmp;
<cpp:endif pos:start="435:1" pos:end="435:6">#<cpp:directive pos:start="435:2" pos:end="435:6">endif</cpp:directive></cpp:endif>
            <comment type="block" pos:start="436:13" pos:end="436:70">/* transcode raw format, encode packets and output them */</comment>
            for(i=<literal type="number" pos:start="437:19" pos:end="437:19">0</literal>;i&lt;nb_ostreams;i++) {
                int frame_size;
                ost = ost_table[i];
                if (ost-&gt;source_index == ist_index) {
                    os = output_files[ost-&gt;file_index];
                    if (ipts != AV_NOPTS_VALUE) {
<cpp:if pos:start="443:1" pos:end="443:5">#<cpp:directive pos:start="443:2" pos:end="443:3">if</cpp:directive> <expr pos:start="443:5" pos:end="443:5"><literal type="number" pos:start="443:5" pos:end="443:5">0</literal></expr></cpp:if>
                        printf("%d: got pts=%f %f\n", 
                               i, pkt.pts / 90000.0, 
                               (ipts - ost-&gt;st-&gt;pts.val) / 90000.0);
<cpp:endif pos:start="447:1" pos:end="447:6">#<cpp:directive pos:start="447:2" pos:end="447:6">endif</cpp:directive></cpp:endif>
                        <comment type="block" pos:start="448:25" pos:end="448:60">/* set the input output pts pairs */</comment>
                        ost-&gt;sync_ipts = (double)ipts * is-&gt;pts_num / 
                            is-&gt;pts_den;
                        <comment type="block" pos:start="451:25" pos:end="452:53">/* XXX: take into account the various fifos,
                           in particular for audio */</comment>
                        ost-&gt;sync_opts = ost-&gt;st-&gt;pts.val;
                        <comment type="line" pos:start="454:25" pos:end="454:168">//printf("ipts=%lld sync_ipts=%f sync_opts=%lld pts.val=%lld pkt.pts=%lld\n", ipts, ost-&gt;sync_ipts, ost-&gt;sync_opts, ost-&gt;st-&gt;pts.val, pkt.pts); </comment>
                    } else {
                        <comment type="line" pos:start="456:25" pos:end="456:70">//printf("pts.val=%lld\n", ost-&gt;st-&gt;pts.val); </comment>
                        ost-&gt;sync_ipts = AV_NOPTS_VALUE;
                    if (ost-&gt;encoding_needed) {
                        switch(ost-&gt;st-&gt;codec.codec_type) {
                        case CODEC_TYPE_AUDIO:
                            do_audio_out(os, ost, ist, data_buf, data_size);
                            break;
                        case CODEC_TYPE_VIDEO:
                            <comment type="block" pos:start="464:29" pos:end="464:66">/* find an audio stream for synchro */</comment>
                            {
                                int i;
                                AVOutputStream *audio_sync, *ost1;
                                audio_sync = NULL;
                                for(i=<literal type="number" pos:start="469:39" pos:end="469:39">0</literal>;i&lt;nb_ostreams;i++) {
                                    ost1 = ost_table[i];
                                    if (ost1-&gt;file_index == ost-&gt;file_index &amp;&amp;
                                        ost1-&gt;st-&gt;codec.codec_type == CODEC_TYPE_AUDIO) {
                                        audio_sync = ost1;
                                        break;
                                do_video_out(os, ost, ist, &amp;picture, &amp;frame_size, audio_sync);
                                if (do_vstats &amp;&amp; frame_size)
                                    do_video_stats(os, ost, frame_size);
                            break;
                        default:
                            av_abort();
                    } else {
                        AVFrame avframe;
                        <comment type="block" pos:start="483:25" pos:end="483:79">/* no reencoding needed : output the packet directly */</comment>
                        <comment type="block" pos:start="484:25" pos:end="484:56">/* force the input stream PTS */</comment>
                        memset(&amp;avframe, <literal type="number" pos:start="485:42" pos:end="485:42">0</literal>, sizeof(AVFrame));
                        ost-&gt;st-&gt;codec.coded_frame= &amp;avframe;
			avframe.key_frame = pkt.flags &amp; PKT_FLAG_KEY; 
                        av_write_frame(os, ost-&gt;index, data_buf, data_size);
			ost-&gt;st-&gt;codec.frame_number++;
			ost-&gt;frame_number++;
            av_free(buffer_to_free);
            ipts = AV_NOPTS_VALUE;
    discard_packet:
        av_free_packet(&amp;pkt);
        <comment type="block" pos:start="495:9" pos:end="495:75">/* dump report by using the output first video and audio streams */</comment>
        print_report(output_files, ost_table, nb_ostreams, <literal type="number" pos:start="496:60" pos:end="496:60">0</literal>);
    term_exit();
    <comment type="block" pos:start="498:5" pos:end="498:64">/* dump report by using the first video and audio streams */</comment>
    print_report(output_files, ost_table, nb_ostreams, <literal type="number" pos:start="499:56" pos:end="499:56">1</literal>);
    <comment type="block" pos:start="500:5" pos:end="500:28">/* close each encoder */</comment>
    for(i=<literal type="number" pos:start="501:11" pos:end="501:11">0</literal>;i&lt;nb_ostreams;i++) {
        ost = ost_table[i];
        if (ost-&gt;encoding_needed) {
            av_freep(&amp;ost-&gt;st-&gt;codec.stats_in);
            avcodec_close(&amp;ost-&gt;st-&gt;codec);
    <comment type="block" pos:start="506:5" pos:end="506:28">/* close each decoder */</comment>
    for(i=<literal type="number" pos:start="507:11" pos:end="507:11">0</literal>;i&lt;nb_istreams;i++) {
        ist = ist_table[i];
        if (ist-&gt;decoding_needed) {
            avcodec_close(&amp;ist-&gt;st-&gt;codec);
    <comment type="block" pos:start="511:5" pos:end="511:52">/* write the trailer if needed and close file */</comment>
    for(i=<literal type="number" pos:start="512:11" pos:end="512:11">0</literal>;i&lt;nb_output_files;i++) {
        os = output_files[i];
        av_write_trailer(os);
    <comment type="block" pos:start="515:5" pos:end="515:20">/* finished ! */</comment>
    ret = <literal type="number" pos:start="516:11" pos:end="516:11">0</literal>;
 fail1:
    av_free(file_table);
    if (ist_table) {
        for(i=<literal type="number" pos:start="520:15" pos:end="520:15">0</literal>;i&lt;nb_istreams;i++) {
            ist = ist_table[i];
            av_free(ist);
        av_free(ist_table);
    if (ost_table) {
        for(i=<literal type="number" pos:start="525:15" pos:end="525:15">0</literal>;i&lt;nb_ostreams;i++) {
            ost = ost_table[i];
            if (ost) {
                if (ost-&gt;logfile) {
                    fclose(ost-&gt;logfile);
                    ost-&gt;logfile = NULL;
                fifo_free(&amp;ost-&gt;fifo); <comment type="block" pos:start="531:40" pos:end="532:72">/* works even if fifo is not
                                          initialized but set to zero */</comment>
                av_free(ost-&gt;pict_tmp.data[<literal type="number" pos:start="533:44" pos:end="533:44">0</literal>]);
                if (ost-&gt;video_resample)
                    img_resample_close(ost-&gt;img_resample_ctx);
                if (ost-&gt;audio_resample)
                    audio_resample_close(ost-&gt;resample);
                av_free(ost);
        av_free(ost_table);
    return ret;
 fail:
    ret = -ENOMEM;
    goto fail1;</argument></argument_list></macro></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></else></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></function></unit>
