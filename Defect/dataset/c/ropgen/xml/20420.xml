<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20420.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">bochs_bios_write</name><parameter_list pos:start="1:29" pos:end="1:71">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:33">void</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:41">opaque</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:51">uint32_t</name></type> <name pos:start="1:53" pos:end="1:56">addr</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:70"><decl pos:start="1:59" pos:end="1:70"><type pos:start="1:59" pos:end="1:70"><name pos:start="1:59" pos:end="1:66">uint32_t</name></type> <name pos:start="1:68" pos:end="1:70">val</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:5">

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:21"><specifier pos:start="5:5" pos:end="5:10">static</specifier> <specifier pos:start="5:12" pos:end="5:16">const</specifier> <name pos:start="5:18" pos:end="5:21">char</name></type> <name pos:start="5:23" pos:end="5:37"><name pos:start="5:23" pos:end="5:34">shutdown_str</name><index pos:start="5:35" pos:end="5:37">[<expr pos:start="5:36" pos:end="5:36"><literal type="number" pos:start="5:36" pos:end="5:36">8</literal></expr>]</index></name> <init pos:start="5:39" pos:end="5:50">= <expr pos:start="5:41" pos:end="5:50"><literal type="string" pos:start="5:41" pos:end="5:50">"Shutdown"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:14"><specifier pos:start="7:5" pos:end="7:10">static</specifier> <name pos:start="7:12" pos:end="7:14">int</name></type> <name pos:start="7:16" pos:end="7:29">shutdown_index</name> <init pos:start="7:31" pos:end="7:33">= <expr pos:start="7:33" pos:end="7:33"><literal type="number" pos:start="7:33" pos:end="7:33">0</literal></expr></init></decl>;</decl_stmt>



    <switch pos:start="11:5" pos:end="83:5">switch<condition pos:start="11:11" pos:end="11:16">(<expr pos:start="11:12" pos:end="11:15"><name pos:start="11:12" pos:end="11:15">addr</name></expr>)</condition> <block pos:start="11:18" pos:end="83:5">{<block_content pos:start="15:5" pos:end="81:14">

        <comment type="block" pos:start="13:9" pos:end="13:33">/* Bochs BIOS messages */</comment>

    <case pos:start="15:5" pos:end="15:15">case <expr pos:start="15:10" pos:end="15:14"><literal type="number" pos:start="15:10" pos:end="15:14">0x400</literal></expr>:</case>

    <case pos:start="17:5" pos:end="17:15">case <expr pos:start="17:10" pos:end="17:14"><literal type="number" pos:start="17:10" pos:end="17:14">0x401</literal></expr>:</case>

        <comment type="block" pos:start="19:9" pos:end="19:42">/* used to be panic, now unused */</comment>

        <break pos:start="21:9" pos:end="21:14">break;</break>

    <case pos:start="23:5" pos:end="23:15">case <expr pos:start="23:10" pos:end="23:14"><literal type="number" pos:start="23:10" pos:end="23:14">0x402</literal></expr>:</case>

    <case pos:start="25:5" pos:end="28:0">case <expr pos:start="25:10" pos:end="25:14"><literal type="number" pos:start="25:10" pos:end="25:14">0x403</literal></expr>:</case>

<cpp:ifdef pos:start="27:1" pos:end="27:17">#<cpp:directive pos:start="27:2" pos:end="27:6">ifdef</cpp:directive> <name pos:start="27:8" pos:end="27:17">DEBUG_BIOS</name></cpp:ifdef>

        <expr_stmt pos:start="29:9" pos:end="32:0"><expr pos:start="29:9" pos:end="29:34"><call pos:start="29:9" pos:end="29:34"><name pos:start="29:9" pos:end="29:15">fprintf</name><argument_list pos:start="29:16" pos:end="29:34">(<argument pos:start="29:17" pos:end="29:22"><expr pos:start="29:17" pos:end="29:22"><name pos:start="29:17" pos:end="29:22">stderr</name></expr></argument>, <argument pos:start="29:25" pos:end="29:28"><expr pos:start="29:25" pos:end="29:28"><literal type="string" pos:start="29:25" pos:end="29:28">"%c"</literal></expr></argument>, <argument pos:start="29:31" pos:end="29:33"><expr pos:start="29:31" pos:end="29:33"><name pos:start="29:31" pos:end="29:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="31:1" pos:end="31:6">#<cpp:directive pos:start="31:2" pos:end="31:6">endif</cpp:directive></cpp:endif>

        <break pos:start="33:9" pos:end="33:14">break;</break>

    <case pos:start="35:5" pos:end="35:16">case <expr pos:start="35:10" pos:end="35:15"><literal type="number" pos:start="35:10" pos:end="35:15">0x8900</literal></expr>:</case>

        <comment type="block" pos:start="37:9" pos:end="37:37">/* same as Bochs power off */</comment>

        <if_stmt pos:start="39:9" pos:end="55:9"><if pos:start="39:9" pos:end="51:9">if <condition pos:start="39:12" pos:end="39:48">(<expr pos:start="39:13" pos:end="39:47"><name pos:start="39:13" pos:end="39:15">val</name> <operator pos:start="39:17" pos:end="39:18">==</operator> <name pos:start="39:20" pos:end="39:47"><name pos:start="39:20" pos:end="39:31">shutdown_str</name><index pos:start="39:32" pos:end="39:47">[<expr pos:start="39:33" pos:end="39:46"><name pos:start="39:33" pos:end="39:46">shutdown_index</name></expr>]</index></name></expr>)</condition> <block pos:start="39:50" pos:end="51:9">{<block_content pos:start="41:13" pos:end="49:13">

            <expr_stmt pos:start="41:13" pos:end="41:29"><expr pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:26">shutdown_index</name><operator pos:start="41:27" pos:end="41:28">++</operator></expr>;</expr_stmt>

            <if_stmt pos:start="43:13" pos:end="49:13"><if pos:start="43:13" pos:end="49:13">if <condition pos:start="43:16" pos:end="43:36">(<expr pos:start="43:17" pos:end="43:35"><name pos:start="43:17" pos:end="43:30">shutdown_index</name> <operator pos:start="43:32" pos:end="43:33">==</operator> <literal type="number" pos:start="43:35" pos:end="43:35">8</literal></expr>)</condition> <block pos:start="43:38" pos:end="49:13">{<block_content pos:start="45:17" pos:end="47:47">

                <expr_stmt pos:start="45:17" pos:end="45:35"><expr pos:start="45:17" pos:end="45:34"><name pos:start="45:17" pos:end="45:30">shutdown_index</name> <operator pos:start="45:32" pos:end="45:32">=</operator> <literal type="number" pos:start="45:34" pos:end="45:34">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="47:17" pos:end="47:47"><expr pos:start="47:17" pos:end="47:46"><call pos:start="47:17" pos:end="47:46"><name pos:start="47:17" pos:end="47:44">qemu_system_shutdown_request</name><argument_list pos:start="47:45" pos:end="47:46">()</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="55:9">else <block pos:start="51:16" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:31">

            <expr_stmt pos:start="53:13" pos:end="53:31"><expr pos:start="53:13" pos:end="53:30"><name pos:start="53:13" pos:end="53:26">shutdown_index</name> <operator pos:start="53:28" pos:end="53:28">=</operator> <literal type="number" pos:start="53:30" pos:end="53:30">0</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="57:9" pos:end="57:14">break;</break>



        <comment type="block" pos:start="61:9" pos:end="61:39">/* LGPL'ed VGA BIOS messages */</comment>

    <case pos:start="63:5" pos:end="63:15">case <expr pos:start="63:10" pos:end="63:14"><literal type="number" pos:start="63:10" pos:end="63:14">0x501</literal></expr>:</case>

    <case pos:start="65:5" pos:end="65:15">case <expr pos:start="65:10" pos:end="65:14"><literal type="number" pos:start="65:10" pos:end="65:14">0x502</literal></expr>:</case>

        <expr_stmt pos:start="67:9" pos:end="67:58"><expr pos:start="67:9" pos:end="67:57"><call pos:start="67:9" pos:end="67:57"><name pos:start="67:9" pos:end="67:15">fprintf</name><argument_list pos:start="67:16" pos:end="67:57">(<argument pos:start="67:17" pos:end="67:22"><expr pos:start="67:17" pos:end="67:22"><name pos:start="67:17" pos:end="67:22">stderr</name></expr></argument>, <argument pos:start="67:25" pos:end="67:51"><expr pos:start="67:25" pos:end="67:51"><literal type="string" pos:start="67:25" pos:end="67:51">"VGA BIOS panic, line %d\n"</literal></expr></argument>, <argument pos:start="67:54" pos:end="67:56"><expr pos:start="67:54" pos:end="67:56"><name pos:start="67:54" pos:end="67:56">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:16"><expr pos:start="69:9" pos:end="69:15"><call pos:start="69:9" pos:end="69:15"><name pos:start="69:9" pos:end="69:12">exit</name><argument_list pos:start="69:13" pos:end="69:15">(<argument pos:start="69:14" pos:end="69:14"><expr pos:start="69:14" pos:end="69:14"><literal type="number" pos:start="69:14" pos:end="69:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <case pos:start="71:5" pos:end="71:15">case <expr pos:start="71:10" pos:end="71:14"><literal type="number" pos:start="71:10" pos:end="71:14">0x500</literal></expr>:</case>

    <case pos:start="73:5" pos:end="76:0">case <expr pos:start="73:10" pos:end="73:14"><literal type="number" pos:start="73:10" pos:end="73:14">0x503</literal></expr>:</case>

<cpp:ifdef pos:start="75:1" pos:end="75:17">#<cpp:directive pos:start="75:2" pos:end="75:6">ifdef</cpp:directive> <name pos:start="75:8" pos:end="75:17">DEBUG_BIOS</name></cpp:ifdef>

        <expr_stmt pos:start="77:9" pos:end="80:0"><expr pos:start="77:9" pos:end="77:34"><call pos:start="77:9" pos:end="77:34"><name pos:start="77:9" pos:end="77:15">fprintf</name><argument_list pos:start="77:16" pos:end="77:34">(<argument pos:start="77:17" pos:end="77:22"><expr pos:start="77:17" pos:end="77:22"><name pos:start="77:17" pos:end="77:22">stderr</name></expr></argument>, <argument pos:start="77:25" pos:end="77:28"><expr pos:start="77:25" pos:end="77:28"><literal type="string" pos:start="77:25" pos:end="77:28">"%c"</literal></expr></argument>, <argument pos:start="77:31" pos:end="77:33"><expr pos:start="77:31" pos:end="77:33"><name pos:start="77:31" pos:end="77:33">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="79:1" pos:end="79:6">#<cpp:directive pos:start="79:2" pos:end="79:6">endif</cpp:directive></cpp:endif>

        <break pos:start="81:9" pos:end="81:14">break;</break>

    </block_content>}</block></switch>

</block_content>}</block></function>
</unit>
