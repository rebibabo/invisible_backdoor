<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17071.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">host_signal_handler</name><parameter_list pos:start="1:32" pos:end="3:42">(<parameter pos:start="1:33" pos:end="1:47"><decl pos:start="1:33" pos:end="1:47"><type pos:start="1:33" pos:end="1:47"><name pos:start="1:33" pos:end="1:35">int</name></type> <name pos:start="1:37" pos:end="1:47">host_signum</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:64"><decl pos:start="1:50" pos:end="1:64"><type pos:start="1:50" pos:end="1:64"><name pos:start="1:50" pos:end="1:58">siginfo_t</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:64">info</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:41"><decl pos:start="3:33" pos:end="3:41"><type pos:start="3:33" pos:end="3:41"><name pos:start="3:33" pos:end="3:36">void</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:41">puc</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="53:1">{<block_content pos:start="7:5" pos:end="51:5">

    <decl_stmt pos:start="7:5" pos:end="7:12"><decl pos:start="7:5" pos:end="7:11"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:11">sig</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:27"><decl pos:start="9:5" pos:end="9:26"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:20">target_siginfo_t</name></type> <name pos:start="9:22" pos:end="9:26">tinfo</name></decl>;</decl_stmt>



    <comment type="block" pos:start="13:5" pos:end="15:39">/* the CPU emulator uses some host signals to detect exceptions,

       we forward to it some signals */</comment>

    <if_stmt pos:start="17:5" pos:end="25:5"><if pos:start="17:5" pos:end="25:5">if <condition pos:start="17:8" pos:end="19:29">(<expr pos:start="17:9" pos:end="19:28"><operator pos:start="17:9" pos:end="17:9">(</operator><name pos:start="17:10" pos:end="17:20">host_signum</name> <operator pos:start="17:22" pos:end="17:23">==</operator> <name pos:start="17:25" pos:end="17:31">SIGSEGV</name> <operator pos:start="17:33" pos:end="17:34">||</operator> <name pos:start="17:36" pos:end="17:46">host_signum</name> <operator pos:start="17:48" pos:end="17:49">==</operator> <name pos:start="17:51" pos:end="17:56">SIGBUS</name><operator pos:start="17:57" pos:end="17:57">)</operator>

        <operator pos:start="19:9" pos:end="19:10">&amp;&amp;</operator> <name pos:start="19:12" pos:end="19:24"><name pos:start="19:12" pos:end="19:15">info</name><operator pos:start="19:16" pos:end="19:17">-&gt;</operator><name pos:start="19:18" pos:end="19:24">si_code</name></name> <operator pos:start="19:26" pos:end="19:26">&gt;</operator> <literal type="number" pos:start="19:28" pos:end="19:28">0</literal></expr>)</condition> <block pos:start="19:31" pos:end="25:5">{<block_content pos:start="21:9" pos:end="23:19">

        <if_stmt pos:start="21:9" pos:end="23:19"><if pos:start="21:9" pos:end="23:19">if <condition pos:start="21:12" pos:end="21:55">(<expr pos:start="21:13" pos:end="21:54"><call pos:start="21:13" pos:end="21:54"><name pos:start="21:13" pos:end="21:30">cpu_signal_handler</name><argument_list pos:start="21:31" pos:end="21:54">(<argument pos:start="21:32" pos:end="21:42"><expr pos:start="21:32" pos:end="21:42"><name pos:start="21:32" pos:end="21:42">host_signum</name></expr></argument>, <argument pos:start="21:45" pos:end="21:48"><expr pos:start="21:45" pos:end="21:48"><name pos:start="21:45" pos:end="21:48">info</name></expr></argument>, <argument pos:start="21:51" pos:end="21:53"><expr pos:start="21:51" pos:end="21:53"><name pos:start="21:51" pos:end="21:53">puc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:19"><block_content pos:start="23:13" pos:end="23:19">

            <return pos:start="23:13" pos:end="23:19">return;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="29:34">/* get target signal number */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:45"><expr pos:start="31:5" pos:end="31:44"><name pos:start="31:5" pos:end="31:7">sig</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:44"><name pos:start="31:11" pos:end="31:31">host_to_target_signal</name><argument_list pos:start="31:32" pos:end="31:44">(<argument pos:start="31:33" pos:end="31:43"><expr pos:start="31:33" pos:end="31:43"><name pos:start="31:33" pos:end="31:43">host_signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="38:0"><if pos:start="33:5" pos:end="38:0">if <condition pos:start="33:8" pos:end="33:37">(<expr pos:start="33:9" pos:end="33:36"><name pos:start="33:9" pos:end="33:24"><name pos:start="33:9" pos:end="33:11">sig</name> <argument_list type="generic" pos:start="33:13" pos:end="33:24">&lt; <argument pos:start="33:15" pos:end="33:22"><expr pos:start="33:15" pos:end="33:22"><literal type="number" pos:start="33:15" pos:end="33:15">1</literal> <operator pos:start="33:17" pos:end="33:18">||</operator> <name pos:start="33:20" pos:end="33:22">sig</name></expr></argument> &gt;</argument_list></name> <name pos:start="33:26" pos:end="33:36">TARGET_NSIG</name></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="38:0"><block_content pos:start="35:9" pos:end="38:0">

        <return pos:start="35:9" pos:end="38:0">return;</return></block_content></block></if></if_stmt>

<cpp:if pos:start="37:1" pos:end="37:25">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:25"><call pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:11">defined</name><argument_list pos:start="37:12" pos:end="37:25">(<argument pos:start="37:13" pos:end="37:24"><expr pos:start="37:13" pos:end="37:24"><name pos:start="37:13" pos:end="37:24">DEBUG_SIGNAL</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:49"><call pos:start="39:5" pos:end="39:49"><name pos:start="39:5" pos:end="39:11">fprintf</name><argument_list pos:start="39:12" pos:end="39:49">(<argument pos:start="39:13" pos:end="39:18"><expr pos:start="39:13" pos:end="39:18"><name pos:start="39:13" pos:end="39:18">stderr</name></expr></argument>, <argument pos:start="39:21" pos:end="39:43"><expr pos:start="39:21" pos:end="39:43"><literal type="string" pos:start="39:21" pos:end="39:43">"qemu: got signal %d\n"</literal></expr></argument>, <argument pos:start="39:46" pos:end="39:48"><expr pos:start="39:46" pos:end="39:48"><name pos:start="39:46" pos:end="39:48">sig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="41:1" pos:end="41:6">#<cpp:directive pos:start="41:2" pos:end="41:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><call pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:33">host_to_target_siginfo_noswap</name><argument_list pos:start="43:34" pos:end="43:47">(<argument pos:start="43:35" pos:end="43:40"><expr pos:start="43:35" pos:end="43:40"><operator pos:start="43:35" pos:end="43:35">&amp;</operator><name pos:start="43:36" pos:end="43:40">tinfo</name></expr></argument>, <argument pos:start="43:43" pos:end="43:46"><expr pos:start="43:43" pos:end="43:46"><name pos:start="43:43" pos:end="43:46">info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="45:5" pos:end="51:5"><if pos:start="45:5" pos:end="51:5">if <condition pos:start="45:8" pos:end="45:51">(<expr pos:start="45:9" pos:end="45:50"><call pos:start="45:9" pos:end="45:45"><name pos:start="45:9" pos:end="45:20">queue_signal</name><argument_list pos:start="45:21" pos:end="45:45">(<argument pos:start="45:22" pos:end="45:31"><expr pos:start="45:22" pos:end="45:31"><name pos:start="45:22" pos:end="45:31">thread_env</name></expr></argument>, <argument pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:36">sig</name></expr></argument>, <argument pos:start="45:39" pos:end="45:44"><expr pos:start="45:39" pos:end="45:44"><operator pos:start="45:39" pos:end="45:39">&amp;</operator><name pos:start="45:40" pos:end="45:44">tinfo</name></expr></argument>)</argument_list></call> <operator pos:start="45:47" pos:end="45:48">==</operator> <literal type="number" pos:start="45:50" pos:end="45:50">1</literal></expr>)</condition> <block pos:start="45:53" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:54">

        <comment type="block" pos:start="47:9" pos:end="47:59">/* interrupt the virtual CPU as soon as possible */</comment>

        <expr_stmt pos:start="49:9" pos:end="49:54"><expr pos:start="49:9" pos:end="49:53"><call pos:start="49:9" pos:end="49:53"><name pos:start="49:9" pos:end="49:21">cpu_interrupt</name><argument_list pos:start="49:22" pos:end="49:53">(<argument pos:start="49:23" pos:end="49:32"><expr pos:start="49:23" pos:end="49:32"><name pos:start="49:23" pos:end="49:32">thread_env</name></expr></argument>, <argument pos:start="49:35" pos:end="49:52"><expr pos:start="49:35" pos:end="49:52"><name pos:start="49:35" pos:end="49:52">CPU_INTERRUPT_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
