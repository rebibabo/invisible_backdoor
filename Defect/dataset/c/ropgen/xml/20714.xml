<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/20714.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">ppc_store_sr</name> <parameter_list pos:start="1:19" pos:end="1:67">(<parameter pos:start="1:20" pos:end="1:35"><decl pos:start="1:20" pos:end="1:35"><type pos:start="1:20" pos:end="1:35"><name pos:start="1:20" pos:end="1:30">CPUPPCState</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:35">env</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:46"><decl pos:start="1:38" pos:end="1:46"><type pos:start="1:38" pos:end="1:46"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:46">srnum</name></decl></parameter>, <parameter pos:start="1:49" pos:end="1:66"><decl pos:start="1:49" pos:end="1:66"><type pos:start="1:49" pos:end="1:66"><name pos:start="1:49" pos:end="1:60">target_ulong</name></type> <name pos:start="1:62" pos:end="1:66">value</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="81:1">{<block_content pos:start="5:5" pos:end="79:5">

    <expr_stmt pos:start="5:5" pos:end="10:0"><expr pos:start="5:5" pos:end="7:41"><call pos:start="5:5" pos:end="7:41"><name pos:start="5:5" pos:end="5:11">LOG_MMU</name><argument_list pos:start="5:12" pos:end="7:41">(<argument pos:start="5:13" pos:end="5:62"><expr pos:start="5:13" pos:end="5:62"><literal type="string" pos:start="5:13" pos:end="5:25">"%s: reg=%d "</literal> <name pos:start="5:27" pos:end="5:39">TARGET_FMT_lx</name> <literal type="string" pos:start="5:41" pos:end="5:43">" "</literal> <name pos:start="5:45" pos:end="5:57">TARGET_FMT_lx</name> <literal type="string" pos:start="5:59" pos:end="5:62">"\n"</literal></expr></argument>, <argument pos:start="5:65" pos:end="5:72"><expr pos:start="5:65" pos:end="5:72"><name pos:start="5:65" pos:end="5:72">__func__</name></expr></argument>,

            <argument pos:start="7:13" pos:end="7:17"><expr pos:start="7:13" pos:end="7:17"><name pos:start="7:13" pos:end="7:17">srnum</name></expr></argument>, <argument pos:start="7:20" pos:end="7:24"><expr pos:start="7:20" pos:end="7:24"><name pos:start="7:20" pos:end="7:24">value</name></expr></argument>, <argument pos:start="7:27" pos:end="7:40"><expr pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:40"><name pos:start="7:27" pos:end="7:29">env</name><operator pos:start="7:30" pos:end="7:31">-&gt;</operator><name pos:start="7:32" pos:end="7:33">sr</name><index pos:start="7:34" pos:end="7:40">[<expr pos:start="7:35" pos:end="7:39"><name pos:start="7:35" pos:end="7:39">srnum</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="9:1" pos:end="9:25">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:11">defined</name><argument_list pos:start="9:12" pos:end="9:25">(<argument pos:start="9:13" pos:end="9:24"><expr pos:start="9:13" pos:end="9:24"><name pos:start="9:13" pos:end="9:24">TARGET_PPC64</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <if_stmt pos:start="11:5" pos:end="79:5"><if pos:start="11:5" pos:end="43:5">if <condition pos:start="11:8" pos:end="11:40">(<expr pos:start="11:9" pos:end="11:39"><name pos:start="11:9" pos:end="11:22"><name pos:start="11:9" pos:end="11:11">env</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:22">mmu_model</name></name> <operator pos:start="11:24" pos:end="11:24">&amp;</operator> <name pos:start="11:26" pos:end="11:39">POWERPC_MMU_64</name></expr>)</condition> <block pos:start="11:42" pos:end="43:5">{<block_content pos:start="13:9" pos:end="41:35">

        <decl_stmt pos:start="13:9" pos:end="13:32"><decl pos:start="13:9" pos:end="13:23"><type pos:start="13:9" pos:end="13:16"><name pos:start="13:9" pos:end="13:16">uint64_t</name></type> <name pos:start="13:18" pos:end="13:19">rb</name> <init pos:start="13:21" pos:end="13:23">= <expr pos:start="13:23" pos:end="13:23"><literal type="number" pos:start="13:23" pos:end="13:23">0</literal></expr></init></decl>, <decl pos:start="13:26" pos:end="13:31"><type ref="prev" pos:start="13:9" pos:end="13:16"/><name pos:start="13:26" pos:end="13:27">rs</name> <init pos:start="13:29" pos:end="13:31">= <expr pos:start="13:31" pos:end="13:31"><literal type="number" pos:start="13:31" pos:end="13:31">0</literal></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="17:9" pos:end="17:26">/* ESID = srnum */</comment>

        <expr_stmt pos:start="19:9" pos:end="19:44"><expr pos:start="19:9" pos:end="19:43"><name pos:start="19:9" pos:end="19:10">rb</name> <operator pos:start="19:12" pos:end="19:13">|=</operator> <operator pos:start="19:15" pos:end="19:15">(</operator><operator pos:start="19:16" pos:end="19:16">(</operator><name pos:start="19:17" pos:end="19:24">uint32_t</name><operator pos:start="19:25" pos:end="19:25">)</operator><name pos:start="19:26" pos:end="19:30">srnum</name> <operator pos:start="19:32" pos:end="19:32">&amp;</operator> <literal type="number" pos:start="19:34" pos:end="19:36">0xf</literal><operator pos:start="19:37" pos:end="19:37">)</operator> <operator pos:start="19:39" pos:end="19:40">&lt;&lt;</operator> <literal type="number" pos:start="19:42" pos:end="19:43">28</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="21:9" pos:end="21:31">/* Set the valid bit */</comment>

        <expr_stmt pos:start="23:9" pos:end="23:22"><expr pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:10">rb</name> <operator pos:start="23:12" pos:end="23:13">|=</operator> <literal type="number" pos:start="23:15" pos:end="23:15">1</literal> <operator pos:start="23:17" pos:end="23:18">&lt;&lt;</operator> <literal type="number" pos:start="23:20" pos:end="23:21">27</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:26">/* Index = ESID */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:30"><expr pos:start="27:9" pos:end="27:29"><name pos:start="27:9" pos:end="27:10">rb</name> <operator pos:start="27:12" pos:end="27:13">|=</operator> <operator pos:start="27:15" pos:end="27:15">(</operator><name pos:start="27:16" pos:end="27:23">uint32_t</name><operator pos:start="27:24" pos:end="27:24">)</operator><name pos:start="27:25" pos:end="27:29">srnum</name></expr>;</expr_stmt>



        <comment type="block" pos:start="31:9" pos:end="31:25">/* VSID = VSID */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:40"><expr pos:start="33:9" pos:end="33:39"><name pos:start="33:9" pos:end="33:10">rs</name> <operator pos:start="33:12" pos:end="33:13">|=</operator> <operator pos:start="33:15" pos:end="33:15">(</operator><name pos:start="33:16" pos:end="33:20">value</name> <operator pos:start="33:22" pos:end="33:22">&amp;</operator> <literal type="number" pos:start="33:24" pos:end="33:32">0xfffffff</literal><operator pos:start="33:33" pos:end="33:33">)</operator> <operator pos:start="33:35" pos:end="33:36">&lt;&lt;</operator> <literal type="number" pos:start="33:38" pos:end="33:39">12</literal></expr>;</expr_stmt>

        <comment type="block" pos:start="35:9" pos:end="35:27">/* flags = flags */</comment>

        <expr_stmt pos:start="37:9" pos:end="37:41"><expr pos:start="37:9" pos:end="37:40"><name pos:start="37:9" pos:end="37:10">rs</name> <operator pos:start="37:12" pos:end="37:13">|=</operator> <operator pos:start="37:15" pos:end="37:15">(</operator><operator pos:start="37:16" pos:end="37:16">(</operator><name pos:start="37:17" pos:end="37:21">value</name> <operator pos:start="37:23" pos:end="37:24">&gt;&gt;</operator> <literal type="number" pos:start="37:26" pos:end="37:27">27</literal><operator pos:start="37:28" pos:end="37:28">)</operator> <operator pos:start="37:30" pos:end="37:30">&amp;</operator> <literal type="number" pos:start="37:32" pos:end="37:34">0xf</literal><operator pos:start="37:35" pos:end="37:35">)</operator> <operator pos:start="37:37" pos:end="37:38">&lt;&lt;</operator> <literal type="number" pos:start="37:40" pos:end="37:40">9</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="41:9" pos:end="41:35"><expr pos:start="41:9" pos:end="41:34"><call pos:start="41:9" pos:end="41:34"><name pos:start="41:9" pos:end="41:21">ppc_store_slb</name><argument_list pos:start="41:22" pos:end="41:34">(<argument pos:start="41:23" pos:end="41:25"><expr pos:start="41:23" pos:end="41:25"><name pos:start="41:23" pos:end="41:25">env</name></expr></argument>, <argument pos:start="41:28" pos:end="41:29"><expr pos:start="41:28" pos:end="41:29"><name pos:start="41:28" pos:end="41:29">rb</name></expr></argument>, <argument pos:start="41:32" pos:end="41:33"><expr pos:start="41:32" pos:end="41:33"><name pos:start="41:32" pos:end="41:33">rs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="43:7" pos:end="79:5">else

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

    if <condition pos:start="47:8" pos:end="47:32">(<expr pos:start="47:9" pos:end="47:31"><name pos:start="47:9" pos:end="47:22"><name pos:start="47:9" pos:end="47:11">env</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:15">sr</name><index pos:start="47:16" pos:end="47:22">[<expr pos:start="47:17" pos:end="47:21"><name pos:start="47:17" pos:end="47:21">srnum</name></expr>]</index></name> <operator pos:start="47:24" pos:end="47:25">!=</operator> <name pos:start="47:27" pos:end="47:31">value</name></expr>)</condition> <block pos:start="47:34" pos:end="79:5">{<block_content pos:start="49:9" pos:end="78:0">

        <expr_stmt pos:start="49:9" pos:end="56:0"><expr pos:start="49:9" pos:end="49:30"><name pos:start="49:9" pos:end="49:22"><name pos:start="49:9" pos:end="49:11">env</name><operator pos:start="49:12" pos:end="49:13">-&gt;</operator><name pos:start="49:14" pos:end="49:15">sr</name><index pos:start="49:16" pos:end="49:22">[<expr pos:start="49:17" pos:end="49:21"><name pos:start="49:17" pos:end="49:21">srnum</name></expr>]</index></name> <operator pos:start="49:24" pos:end="49:24">=</operator> <name pos:start="49:26" pos:end="49:30">value</name></expr>;</expr_stmt>

<comment type="block" pos:start="51:1" pos:end="53:28">/* Invalidating 256MB of virtual memory in 4kB pages is way longer than

   flusing the whole TLB. */</comment>

<cpp:if pos:start="55:1" pos:end="55:33">#<cpp:directive pos:start="55:2" pos:end="55:3">if</cpp:directive> <expr pos:start="55:5" pos:end="55:33"><operator pos:start="55:5" pos:end="55:5">!</operator><call pos:start="55:6" pos:end="55:28"><name pos:start="55:6" pos:end="55:12">defined</name><argument_list pos:start="55:13" pos:end="55:28">(<argument pos:start="55:14" pos:end="55:27"><expr pos:start="55:14" pos:end="55:27"><name pos:start="55:14" pos:end="55:27">FLUSH_ALL_TLBS</name></expr></argument>)</argument_list></call> <operator pos:start="55:30" pos:end="55:31">&amp;&amp;</operator> <literal type="number" pos:start="55:33" pos:end="55:33">0</literal></expr></cpp:if>

        <block pos:start="57:9" pos:end="74:0">{<block_content pos:start="59:13" pos:end="69:42">

            <decl_stmt pos:start="59:13" pos:end="59:35"><decl pos:start="59:13" pos:end="59:29"><type pos:start="59:13" pos:end="59:24"><name pos:start="59:13" pos:end="59:24">target_ulong</name></type> <name pos:start="59:26" pos:end="59:29">page</name></decl>, <decl pos:start="59:32" pos:end="59:34"><type ref="prev" pos:start="59:13" pos:end="59:24"/><name pos:start="59:32" pos:end="59:34">end</name></decl>;</decl_stmt>

            <comment type="block" pos:start="61:13" pos:end="61:53">/* Invalidate 256 MB of virtual memory */</comment>

            <expr_stmt pos:start="63:13" pos:end="63:38"><expr pos:start="63:13" pos:end="63:37"><name pos:start="63:13" pos:end="63:16">page</name> <operator pos:start="63:18" pos:end="63:18">=</operator> <operator pos:start="63:20" pos:end="63:20">(</operator><literal type="number" pos:start="63:21" pos:end="63:22">16</literal> <operator pos:start="63:24" pos:end="63:25">&lt;&lt;</operator> <literal type="number" pos:start="63:27" pos:end="63:28">20</literal><operator pos:start="63:29" pos:end="63:29">)</operator> <operator pos:start="63:31" pos:end="63:31">*</operator> <name pos:start="63:33" pos:end="63:37">srnum</name></expr>;</expr_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:36"><expr pos:start="65:13" pos:end="65:35"><name pos:start="65:13" pos:end="65:15">end</name> <operator pos:start="65:17" pos:end="65:17">=</operator> <name pos:start="65:19" pos:end="65:22">page</name> <operator pos:start="65:24" pos:end="65:24">+</operator> <operator pos:start="65:26" pos:end="65:26">(</operator><literal type="number" pos:start="65:27" pos:end="65:28">16</literal> <operator pos:start="65:30" pos:end="65:31">&lt;&lt;</operator> <literal type="number" pos:start="65:33" pos:end="65:34">20</literal><operator pos:start="65:35" pos:end="65:35">)</operator></expr>;</expr_stmt>

            <for pos:start="67:13" pos:end="69:42">for <control pos:start="67:17" pos:end="67:57">(<init pos:start="67:18" pos:end="67:18">;</init> <condition pos:start="67:20" pos:end="67:31"><expr pos:start="67:20" pos:end="67:30"><name pos:start="67:20" pos:end="67:23">page</name> <operator pos:start="67:25" pos:end="67:26">!=</operator> <name pos:start="67:28" pos:end="67:30">end</name></expr>;</condition> <incr pos:start="67:33" pos:end="67:56"><expr pos:start="67:33" pos:end="67:56"><name pos:start="67:33" pos:end="67:36">page</name> <operator pos:start="67:38" pos:end="67:39">+=</operator> <name pos:start="67:41" pos:end="67:56">TARGET_PAGE_SIZE</name></expr></incr>)</control><block type="pseudo" pos:start="69:17" pos:end="69:42"><block_content pos:start="69:17" pos:end="69:42">

                <expr_stmt pos:start="69:17" pos:end="69:42"><expr pos:start="69:17" pos:end="69:41"><call pos:start="69:17" pos:end="69:41"><name pos:start="69:17" pos:end="69:30">tlb_flush_page</name><argument_list pos:start="69:31" pos:end="69:41">(<argument pos:start="69:32" pos:end="69:34"><expr pos:start="69:32" pos:end="69:34"><name pos:start="69:32" pos:end="69:34">env</name></expr></argument>, <argument pos:start="69:37" pos:end="69:40"><expr pos:start="69:37" pos:end="69:40"><name pos:start="69:37" pos:end="69:40">page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        </block_content>}</block>

<cpp:else pos:start="73:1" pos:end="73:5">#<cpp:directive pos:start="73:2" pos:end="73:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="75:9" pos:end="78:0"><expr pos:start="75:9" pos:end="75:25"><call pos:start="75:9" pos:end="75:25"><name pos:start="75:9" pos:end="75:17">tlb_flush</name><argument_list pos:start="75:18" pos:end="75:25">(<argument pos:start="75:19" pos:end="75:21"><expr pos:start="75:19" pos:end="75:21"><name pos:start="75:19" pos:end="75:21">env</name></expr></argument>, <argument pos:start="75:24" pos:end="75:24"><expr pos:start="75:24" pos:end="75:24"><literal type="number" pos:start="75:24" pos:end="75:24">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="77:1" pos:end="77:6">#<cpp:directive pos:start="77:2" pos:end="77:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
