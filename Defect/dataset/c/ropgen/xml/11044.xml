<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11044.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:33">init_duplicate_context</name><parameter_list pos:start="1:34" pos:end="1:74">(<parameter pos:start="1:35" pos:end="1:51"><decl pos:start="1:35" pos:end="1:51"><type pos:start="1:35" pos:end="1:51"><name pos:start="1:35" pos:end="1:48">MpegEncContext</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:51">s</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:73"><decl pos:start="1:54" pos:end="1:73"><type pos:start="1:54" pos:end="1:73"><name pos:start="1:54" pos:end="1:67">MpegEncContext</name> <modifier pos:start="1:69" pos:end="1:69">*</modifier></type><name pos:start="1:70" pos:end="1:73">base</name></decl></parameter>)</parameter_list><block pos:start="1:75" pos:end="83:1">{<block_content pos:start="3:5" pos:end="81:14">

    <decl_stmt pos:start="3:5" pos:end="3:55"><decl pos:start="3:5" pos:end="3:54"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:14">y_size</name> <init pos:start="3:16" pos:end="3:54">= <expr pos:start="3:18" pos:end="3:54"><name pos:start="3:18" pos:end="3:29"><name pos:start="3:18" pos:end="3:18">s</name><operator pos:start="3:19" pos:end="3:20">-&gt;</operator><name pos:start="3:21" pos:end="3:29">b8_stride</name></name> <operator pos:start="3:31" pos:end="3:31">*</operator> <operator pos:start="3:33" pos:end="3:33">(</operator><literal type="number" pos:start="3:34" pos:end="3:34">2</literal> <operator pos:start="3:36" pos:end="3:36">*</operator> <name pos:start="3:38" pos:end="3:49"><name pos:start="3:38" pos:end="3:38">s</name><operator pos:start="3:39" pos:end="3:40">-&gt;</operator><name pos:start="3:41" pos:end="3:49">mb_height</name></name> <operator pos:start="3:51" pos:end="3:51">+</operator> <literal type="number" pos:start="3:53" pos:end="3:53">1</literal><operator pos:start="3:54" pos:end="3:54">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:51"><decl pos:start="5:5" pos:end="5:50"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:14">c_size</name> <init pos:start="5:16" pos:end="5:50">= <expr pos:start="5:18" pos:end="5:50"><name pos:start="5:18" pos:end="5:29"><name pos:start="5:18" pos:end="5:18">s</name><operator pos:start="5:19" pos:end="5:20">-&gt;</operator><name pos:start="5:21" pos:end="5:29">mb_stride</name></name> <operator pos:start="5:31" pos:end="5:31">*</operator> <operator pos:start="5:33" pos:end="5:33">(</operator><name pos:start="5:34" pos:end="5:45"><name pos:start="5:34" pos:end="5:34">s</name><operator pos:start="5:35" pos:end="5:36">-&gt;</operator><name pos:start="5:37" pos:end="5:45">mb_height</name></name> <operator pos:start="5:47" pos:end="5:47">+</operator> <literal type="number" pos:start="5:49" pos:end="5:49">1</literal><operator pos:start="5:50" pos:end="5:50">)</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">yc_size</name> <init pos:start="7:17" pos:end="7:37">= <expr pos:start="7:19" pos:end="7:37"><name pos:start="7:19" pos:end="7:24">y_size</name> <operator pos:start="7:26" pos:end="7:26">+</operator> <literal type="number" pos:start="7:28" pos:end="7:28">2</literal> <operator pos:start="7:30" pos:end="7:30">*</operator> <name pos:start="7:32" pos:end="7:37">c_size</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:10"><decl pos:start="9:5" pos:end="9:9"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:9">i</name></decl>;</decl_stmt>



    <comment type="line" pos:start="13:5" pos:end="13:89">// edge emu needs blocksize + filter length - 1 (=17x17 for halfpel / 21x21 for h264)</comment>

    <expr_stmt pos:start="15:5" pos:end="15:90"><expr pos:start="15:5" pos:end="15:89"><call pos:start="15:5" pos:end="15:89"><name pos:start="15:5" pos:end="15:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="15:22" pos:end="15:89">(<argument pos:start="15:23" pos:end="15:30"><expr pos:start="15:23" pos:end="15:30"><name pos:start="15:23" pos:end="15:30"><name pos:start="15:23" pos:end="15:23">s</name><operator pos:start="15:24" pos:end="15:25">-&gt;</operator><name pos:start="15:26" pos:end="15:30">avctx</name></name></expr></argument>, <argument pos:start="15:33" pos:end="15:60"><expr pos:start="15:33" pos:end="15:60"><name pos:start="15:33" pos:end="15:60"><name pos:start="15:33" pos:end="15:33">s</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:60">allocated_edge_emu_buffer</name></name></expr></argument>, <argument pos:start="15:63" pos:end="15:82"><expr pos:start="15:63" pos:end="15:82"><operator pos:start="15:63" pos:end="15:63">(</operator><name pos:start="15:64" pos:end="15:71"><name pos:start="15:64" pos:end="15:64">s</name><operator pos:start="15:65" pos:end="15:66">-&gt;</operator><name pos:start="15:67" pos:end="15:71">width</name></name><operator pos:start="15:72" pos:end="15:72">+</operator><literal type="number" pos:start="15:73" pos:end="15:74">64</literal><operator pos:start="15:75" pos:end="15:75">)</operator><operator pos:start="15:76" pos:end="15:76">*</operator><literal type="number" pos:start="15:77" pos:end="15:77">2</literal><operator pos:start="15:78" pos:end="15:78">*</operator><literal type="number" pos:start="15:79" pos:end="15:80">21</literal><operator pos:start="15:81" pos:end="15:81">*</operator><literal type="number" pos:start="15:82" pos:end="15:82">2</literal></expr></argument>, <argument pos:start="15:85" pos:end="15:88"><expr pos:start="15:85" pos:end="15:88"><name pos:start="15:85" pos:end="15:88">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="15:92" pos:end="15:143">//(width + edge + align)*interlaced*MBsize*tolerance</comment>

    <expr_stmt pos:start="17:5" pos:end="17:74"><expr pos:start="17:5" pos:end="17:73"><name pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:22">edge_emu_buffer</name></name><operator pos:start="17:23" pos:end="17:23">=</operator> <name pos:start="17:25" pos:end="17:52"><name pos:start="17:25" pos:end="17:25">s</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:52">allocated_edge_emu_buffer</name></name> <operator pos:start="17:54" pos:end="17:54">+</operator> <operator pos:start="17:56" pos:end="17:56">(</operator><name pos:start="17:57" pos:end="17:64"><name pos:start="17:57" pos:end="17:57">s</name><operator pos:start="17:58" pos:end="17:59">-&gt;</operator><name pos:start="17:60" pos:end="17:64">width</name></name><operator pos:start="17:65" pos:end="17:65">+</operator><literal type="number" pos:start="17:66" pos:end="17:67">64</literal><operator pos:start="17:68" pos:end="17:68">)</operator><operator pos:start="17:69" pos:end="17:69">*</operator><literal type="number" pos:start="17:70" pos:end="17:70">2</literal><operator pos:start="17:71" pos:end="17:71">*</operator><literal type="number" pos:start="17:72" pos:end="17:73">21</literal></expr>;</expr_stmt>



     <comment type="line" pos:start="21:6" pos:end="21:95">//FIXME should be linesize instead of s-&gt;width*2 but that is not known before get_buffer()</comment>

    <macro pos:start="23:5" pos:end="23:94"><name pos:start="23:5" pos:end="23:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="23:22" pos:end="23:94">(<argument pos:start="23:23" pos:end="23:30">s-&gt;avctx</argument>, <argument pos:start="23:33" pos:end="23:48">s-&gt;me.scratchpad</argument>,  <argument pos:start="23:52" pos:end="23:87">(s-&gt;width+<literal type="number" pos:start="23:62" pos:end="23:63">64</literal>)*<literal type="number" pos:start="23:66" pos:end="23:66">4</literal>*<literal type="number" pos:start="23:68" pos:end="23:69">16</literal>*<literal type="number" pos:start="23:71" pos:end="23:71">2</literal>*sizeof(uint8_t)</argument>, <argument pos:start="23:90" pos:end="23:93">fail</argument>)</argument_list></macro>

    <expr_stmt pos:start="25:5" pos:end="25:41"><expr pos:start="25:5" pos:end="25:40"><name pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:5">s</name><operator pos:start="25:6" pos:end="25:7">-&gt;</operator><name pos:start="25:8" pos:end="25:9">me</name><operator pos:start="25:10" pos:end="25:10">.</operator><name pos:start="25:11" pos:end="25:14">temp</name></name><operator pos:start="25:15" pos:end="25:15">=</operator>         <name pos:start="25:25" pos:end="25:40"><name pos:start="25:25" pos:end="25:25">s</name><operator pos:start="25:26" pos:end="25:27">-&gt;</operator><name pos:start="25:28" pos:end="25:29">me</name><operator pos:start="25:30" pos:end="25:30">.</operator><name pos:start="25:31" pos:end="25:40">scratchpad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:41"><expr pos:start="27:5" pos:end="27:40"><name pos:start="27:5" pos:end="27:20"><name pos:start="27:5" pos:end="27:5">s</name><operator pos:start="27:6" pos:end="27:7">-&gt;</operator><name pos:start="27:8" pos:end="27:20">rd_scratchpad</name></name><operator pos:start="27:21" pos:end="27:21">=</operator>   <name pos:start="27:25" pos:end="27:40"><name pos:start="27:25" pos:end="27:25">s</name><operator pos:start="27:26" pos:end="27:27">-&gt;</operator><name pos:start="27:28" pos:end="27:29">me</name><operator pos:start="27:30" pos:end="27:30">.</operator><name pos:start="27:31" pos:end="27:40">scratchpad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:41"><expr pos:start="29:5" pos:end="29:40"><name pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:19">b_scratchpad</name></name><operator pos:start="29:20" pos:end="29:20">=</operator>    <name pos:start="29:25" pos:end="29:40"><name pos:start="29:25" pos:end="29:25">s</name><operator pos:start="29:26" pos:end="29:27">-&gt;</operator><name pos:start="29:28" pos:end="29:29">me</name><operator pos:start="29:30" pos:end="29:30">.</operator><name pos:start="29:31" pos:end="29:40">scratchpad</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:46"><expr pos:start="31:5" pos:end="31:45"><name pos:start="31:5" pos:end="31:22"><name pos:start="31:5" pos:end="31:5">s</name><operator pos:start="31:6" pos:end="31:7">-&gt;</operator><name pos:start="31:8" pos:end="31:22">obmc_scratchpad</name></name><operator pos:start="31:23" pos:end="31:23">=</operator> <name pos:start="31:25" pos:end="31:40"><name pos:start="31:25" pos:end="31:25">s</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:29">me</name><operator pos:start="31:30" pos:end="31:30">.</operator><name pos:start="31:31" pos:end="31:40">scratchpad</name></name> <operator pos:start="31:42" pos:end="31:42">+</operator> <literal type="number" pos:start="31:44" pos:end="31:45">16</literal></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="45:5"><if pos:start="33:5" pos:end="45:5">if <condition pos:start="33:8" pos:end="33:20">(<expr pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:9">s</name><operator pos:start="33:10" pos:end="33:11">-&gt;</operator><name pos:start="33:12" pos:end="33:19">encoding</name></name></expr>)</condition> <block pos:start="33:22" pos:end="45:5">{<block_content pos:start="35:9" pos:end="43:9">

        <macro pos:start="35:9" pos:end="35:88"><name pos:start="35:9" pos:end="35:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="35:26" pos:end="35:88">(<argument pos:start="35:27" pos:end="35:34">s-&gt;avctx</argument>, <argument pos:start="35:37" pos:end="35:45">s-&gt;me.map</argument>      , <argument pos:start="35:54" pos:end="35:81">ME_MAP_SIZE*sizeof(uint32_t)</argument>, <argument pos:start="35:84" pos:end="35:87">fail</argument>)</argument_list></macro>

        <macro pos:start="37:9" pos:end="37:88"><name pos:start="37:9" pos:end="37:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="37:26" pos:end="37:88">(<argument pos:start="37:27" pos:end="37:34">s-&gt;avctx</argument>, <argument pos:start="37:37" pos:end="37:51">s-&gt;me.score_map</argument>, <argument pos:start="37:54" pos:end="37:81">ME_MAP_SIZE*sizeof(uint32_t)</argument>, <argument pos:start="37:84" pos:end="37:87">fail</argument>)</argument_list></macro>

        <if_stmt pos:start="39:9" pos:end="43:9"><if pos:start="39:9" pos:end="43:9">if<condition pos:start="39:11" pos:end="39:37">(<expr pos:start="39:12" pos:end="39:36"><name pos:start="39:12" pos:end="39:36"><name pos:start="39:12" pos:end="39:12">s</name><operator pos:start="39:13" pos:end="39:14">-&gt;</operator><name pos:start="39:15" pos:end="39:19">avctx</name><operator pos:start="39:20" pos:end="39:21">-&gt;</operator><name pos:start="39:22" pos:end="39:36">noise_reduction</name></name></expr>)</condition><block pos:start="39:38" pos:end="43:9">{<block_content pos:start="41:13" pos:end="41:85">

            <macro pos:start="41:13" pos:end="41:85"><name pos:start="41:13" pos:end="41:29">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="41:30" pos:end="41:85">(<argument pos:start="41:31" pos:end="41:38">s-&gt;avctx</argument>, <argument pos:start="41:41" pos:end="41:56">s-&gt;dct_error_sum</argument>, <argument pos:start="41:59" pos:end="41:78"><literal type="number" pos:start="41:59" pos:end="41:59">2</literal> * <literal type="number" pos:start="41:63" pos:end="41:64">64</literal> * sizeof(int)</argument>, <argument pos:start="41:81" pos:end="41:84">fail</argument>)</argument_list></macro>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <macro pos:start="47:5" pos:end="47:75"><name pos:start="47:5" pos:end="47:21">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="47:22" pos:end="47:75">(<argument pos:start="47:23" pos:end="47:30">s-&gt;avctx</argument>, <argument pos:start="47:33" pos:end="47:41">s-&gt;blocks</argument>, <argument pos:start="47:44" pos:end="47:68"><literal type="number" pos:start="47:44" pos:end="47:45">64</literal>*<literal type="number" pos:start="47:47" pos:end="47:48">12</literal>*<literal type="number" pos:start="47:50" pos:end="47:50">2</literal> * sizeof(DCTELEM)</argument>, <argument pos:start="47:71" pos:end="47:74">fail</argument>)</argument_list></macro>

    <expr_stmt pos:start="49:5" pos:end="49:27"><expr pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:12"><name pos:start="49:5" pos:end="49:5">s</name><operator pos:start="49:6" pos:end="49:7">-&gt;</operator><name pos:start="49:8" pos:end="49:12">block</name></name><operator pos:start="49:13" pos:end="49:13">=</operator> <name pos:start="49:15" pos:end="49:26"><name pos:start="49:15" pos:end="49:15">s</name><operator pos:start="49:16" pos:end="49:17">-&gt;</operator><name pos:start="49:18" pos:end="49:23">blocks</name><index pos:start="49:24" pos:end="49:26">[<expr pos:start="49:25" pos:end="49:25"><literal type="number" pos:start="49:25" pos:end="49:25">0</literal></expr>]</index></name></expr>;</expr_stmt>



    <for pos:start="53:5" pos:end="57:5">for<control pos:start="53:8" pos:end="53:21">(<init pos:start="53:9" pos:end="53:12"><expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:9">i</name><operator pos:start="53:10" pos:end="53:10">=</operator><literal type="number" pos:start="53:11" pos:end="53:11">0</literal></expr>;</init><condition pos:start="53:13" pos:end="53:17"><expr pos:start="53:13" pos:end="53:16"><name pos:start="53:13" pos:end="53:13">i</name><operator pos:start="53:14" pos:end="53:14">&lt;</operator><literal type="number" pos:start="53:15" pos:end="53:16">12</literal></expr>;</condition><incr pos:start="53:18" pos:end="53:20"><expr pos:start="53:18" pos:end="53:20"><name pos:start="53:18" pos:end="53:18">i</name><operator pos:start="53:19" pos:end="53:20">++</operator></expr></incr>)</control><block pos:start="53:22" pos:end="57:5">{<block_content pos:start="55:9" pos:end="55:37">

        <expr_stmt pos:start="55:9" pos:end="55:37"><expr pos:start="55:9" pos:end="55:36"><name pos:start="55:9" pos:end="55:21"><name pos:start="55:9" pos:end="55:9">s</name><operator pos:start="55:10" pos:end="55:11">-&gt;</operator><name pos:start="55:12" pos:end="55:18">pblocks</name><index pos:start="55:19" pos:end="55:21">[<expr pos:start="55:20" pos:end="55:20"><name pos:start="55:20" pos:end="55:20">i</name></expr>]</index></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <operator pos:start="55:25" pos:end="55:25">&amp;</operator><name pos:start="55:26" pos:end="55:36"><name pos:start="55:26" pos:end="55:26">s</name><operator pos:start="55:27" pos:end="55:28">-&gt;</operator><name pos:start="55:29" pos:end="55:33">block</name><index pos:start="55:34" pos:end="55:36">[<expr pos:start="55:35" pos:end="55:35"><name pos:start="55:35" pos:end="55:35">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="61:5" pos:end="73:5"><if pos:start="61:5" pos:end="73:5">if <condition pos:start="61:8" pos:end="61:34">(<expr pos:start="61:9" pos:end="61:33"><name pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:21">out_format</name></name> <operator pos:start="61:23" pos:end="61:24">==</operator> <name pos:start="61:26" pos:end="61:33">FMT_H263</name></expr>)</condition> <block pos:start="61:36" pos:end="73:5">{<block_content pos:start="65:9" pos:end="71:45">

        <comment type="block" pos:start="63:9" pos:end="63:23">/* ac values */</comment>

        <expr_stmt pos:start="65:9" pos:end="65:90"><expr pos:start="65:9" pos:end="65:89"><call pos:start="65:9" pos:end="65:89"><name pos:start="65:9" pos:end="65:25">FF_ALLOCZ_OR_GOTO</name><argument_list pos:start="65:26" pos:end="65:89">(<argument pos:start="65:27" pos:end="65:34"><expr pos:start="65:27" pos:end="65:34"><name pos:start="65:27" pos:end="65:34"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:34">avctx</name></name></expr></argument>, <argument pos:start="65:37" pos:end="65:50"><expr pos:start="65:37" pos:end="65:50"><name pos:start="65:37" pos:end="65:50"><name pos:start="65:37" pos:end="65:37">s</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:50">ac_val_base</name></name></expr></argument>, <argument pos:start="65:53" pos:end="65:82"><expr pos:start="65:53" pos:end="65:82"><name pos:start="65:53" pos:end="65:59">yc_size</name> <operator pos:start="65:61" pos:end="65:61">*</operator> <sizeof pos:start="65:63" pos:end="65:77">sizeof<argument_list pos:start="65:69" pos:end="65:77">(<argument pos:start="65:70" pos:end="65:76"><expr pos:start="65:70" pos:end="65:76"><name pos:start="65:70" pos:end="65:76">int16_t</name></expr></argument>)</argument_list></sizeof> <operator pos:start="65:79" pos:end="65:79">*</operator> <literal type="number" pos:start="65:81" pos:end="65:82">16</literal></expr></argument>, <argument pos:start="65:85" pos:end="65:88"><expr pos:start="65:85" pos:end="65:88"><name pos:start="65:85" pos:end="65:88">fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:57"><expr pos:start="67:9" pos:end="67:56"><name pos:start="67:9" pos:end="67:20"><name pos:start="67:9" pos:end="67:9">s</name><operator pos:start="67:10" pos:end="67:11">-&gt;</operator><name pos:start="67:12" pos:end="67:17">ac_val</name><index pos:start="67:18" pos:end="67:20">[<expr pos:start="67:19" pos:end="67:19"><literal type="number" pos:start="67:19" pos:end="67:19">0</literal></expr>]</index></name> <operator pos:start="67:22" pos:end="67:22">=</operator> <name pos:start="67:24" pos:end="67:37"><name pos:start="67:24" pos:end="67:24">s</name><operator pos:start="67:25" pos:end="67:26">-&gt;</operator><name pos:start="67:27" pos:end="67:37">ac_val_base</name></name> <operator pos:start="67:39" pos:end="67:39">+</operator> <name pos:start="67:41" pos:end="67:52"><name pos:start="67:41" pos:end="67:41">s</name><operator pos:start="67:42" pos:end="67:43">-&gt;</operator><name pos:start="67:44" pos:end="67:52">b8_stride</name></name> <operator pos:start="67:54" pos:end="67:54">+</operator> <literal type="number" pos:start="67:56" pos:end="67:56">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:66"><expr pos:start="69:9" pos:end="69:65"><name pos:start="69:9" pos:end="69:20"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:17">ac_val</name><index pos:start="69:18" pos:end="69:20">[<expr pos:start="69:19" pos:end="69:19"><literal type="number" pos:start="69:19" pos:end="69:19">1</literal></expr>]</index></name> <operator pos:start="69:22" pos:end="69:22">=</operator> <name pos:start="69:24" pos:end="69:37"><name pos:start="69:24" pos:end="69:24">s</name><operator pos:start="69:25" pos:end="69:26">-&gt;</operator><name pos:start="69:27" pos:end="69:37">ac_val_base</name></name> <operator pos:start="69:39" pos:end="69:39">+</operator> <name pos:start="69:41" pos:end="69:46">y_size</name> <operator pos:start="69:48" pos:end="69:48">+</operator> <name pos:start="69:50" pos:end="69:61"><name pos:start="69:50" pos:end="69:50">s</name><operator pos:start="69:51" pos:end="69:52">-&gt;</operator><name pos:start="69:53" pos:end="69:61">mb_stride</name></name> <operator pos:start="69:63" pos:end="69:63">+</operator> <literal type="number" pos:start="69:65" pos:end="69:65">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:45"><expr pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:20"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:17">ac_val</name><index pos:start="71:18" pos:end="71:20">[<expr pos:start="71:19" pos:end="71:19"><literal type="number" pos:start="71:19" pos:end="71:19">2</literal></expr>]</index></name> <operator pos:start="71:22" pos:end="71:22">=</operator> <name pos:start="71:24" pos:end="71:35"><name pos:start="71:24" pos:end="71:24">s</name><operator pos:start="71:25" pos:end="71:26">-&gt;</operator><name pos:start="71:27" pos:end="71:32">ac_val</name><index pos:start="71:33" pos:end="71:35">[<expr pos:start="71:34" pos:end="71:34"><literal type="number" pos:start="71:34" pos:end="71:34">1</literal></expr>]</index></name> <operator pos:start="71:37" pos:end="71:37">+</operator> <name pos:start="71:39" pos:end="71:44">c_size</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="77:5" pos:end="77:13">return <expr pos:start="77:12" pos:end="77:12"><literal type="number" pos:start="77:12" pos:end="77:12">0</literal></expr>;</return>

<label pos:start="79:1" pos:end="79:5"><name pos:start="79:1" pos:end="79:4">fail</name>:</label>

    <return pos:start="81:5" pos:end="81:14">return <expr pos:start="81:12" pos:end="81:13"><operator pos:start="81:12" pos:end="81:12">-</operator><literal type="number" pos:start="81:13" pos:end="81:13">1</literal></expr>;</return> <comment type="line" pos:start="81:16" pos:end="81:48">//free() through MPV_common_end()</comment>

</block_content>}</block></function>
</unit>
