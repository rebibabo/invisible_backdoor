<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/26404.c" pos:tabs="8"><function pos:start="1:1" pos:end="173:1"><type pos:start="1:1" pos:end="1:23"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name> <name pos:start="1:12" pos:end="1:23">coroutine_fn</name></type> <name pos:start="1:25" pos:end="1:47">bdrv_co_do_zero_pwritev</name><parameter_list pos:start="1:48" pos:end="9:72">(<parameter pos:start="1:49" pos:end="1:68"><decl pos:start="1:49" pos:end="1:68"><type pos:start="1:49" pos:end="1:68"><name pos:start="1:49" pos:end="1:64">BlockDriverState</name> <modifier pos:start="1:66" pos:end="1:66">*</modifier></type><name pos:start="1:67" pos:end="1:68">bs</name></decl></parameter>,

                                                <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:55">int64_t</name></type> <name pos:start="3:57" pos:end="3:62">offset</name></decl></parameter>,

                                                <parameter pos:start="5:49" pos:end="5:66"><decl pos:start="5:49" pos:end="5:66"><type pos:start="5:49" pos:end="5:66"><name pos:start="5:49" pos:end="5:56">unsigned</name> <name pos:start="5:58" pos:end="5:60">int</name></type> <name pos:start="5:62" pos:end="5:66">bytes</name></decl></parameter>,

                                                <parameter pos:start="7:49" pos:end="7:70"><decl pos:start="7:49" pos:end="7:70"><type pos:start="7:49" pos:end="7:70"><name pos:start="7:49" pos:end="7:64">BdrvRequestFlags</name></type> <name pos:start="7:66" pos:end="7:70">flags</name></decl></parameter>,

                                                <parameter pos:start="9:49" pos:end="9:71"><decl pos:start="9:49" pos:end="9:71"><type pos:start="9:49" pos:end="9:71"><name pos:start="9:49" pos:end="9:66">BdrvTrackedRequest</name> <modifier pos:start="9:68" pos:end="9:68">*</modifier></type><name pos:start="9:69" pos:end="9:71">req</name></decl></parameter>)</parameter_list>

<block pos:start="11:1" pos:end="173:1">{<block_content pos:start="13:5" pos:end="169:15">

    <decl_stmt pos:start="13:5" pos:end="13:24"><decl pos:start="13:5" pos:end="13:23"><type pos:start="13:5" pos:end="13:13"><name pos:start="13:5" pos:end="13:11">uint8_t</name> <modifier pos:start="13:13" pos:end="13:13">*</modifier></type><name pos:start="13:14" pos:end="13:16">buf</name> <init pos:start="13:18" pos:end="13:23">= <expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:16">QEMUIOVector</name></type> <name pos:start="15:18" pos:end="15:27">local_qiov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:10">struct</name> <name pos:start="17:12" pos:end="17:16">iovec</name></name></type> <name pos:start="17:18" pos:end="17:20">iov</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:46"><decl pos:start="19:5" pos:end="19:45"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint64_t</name></type> <name pos:start="19:14" pos:end="19:18">align</name> <init pos:start="19:20" pos:end="19:45">= <expr pos:start="19:22" pos:end="19:45"><name pos:start="19:22" pos:end="19:45"><name pos:start="19:22" pos:end="19:23">bs</name><operator pos:start="19:24" pos:end="19:25">-&gt;</operator><name pos:start="19:26" pos:end="19:27">bl</name><operator pos:start="19:28" pos:end="19:28">.</operator><name pos:start="19:29" pos:end="19:45">request_alignment</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:56"><decl pos:start="21:5" pos:end="21:35"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:35">head_padding_bytes</name></decl>, <decl pos:start="21:38" pos:end="21:55"><type ref="prev" pos:start="21:5" pos:end="21:16"/><name pos:start="21:38" pos:end="21:55">tail_padding_bytes</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:16"><decl pos:start="23:5" pos:end="23:15"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:11">ret</name> <init pos:start="23:13" pos:end="23:15">= <expr pos:start="23:15" pos:end="23:15"><literal type="number" pos:start="23:15" pos:end="23:15">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:46"><expr pos:start="27:5" pos:end="27:45"><name pos:start="27:5" pos:end="27:22">head_padding_bytes</name> <operator pos:start="27:24" pos:end="27:24">=</operator> <name pos:start="27:26" pos:end="27:31">offset</name> <operator pos:start="27:33" pos:end="27:33">&amp;</operator> <operator pos:start="27:35" pos:end="27:35">(</operator><name pos:start="27:36" pos:end="27:40">align</name> <operator pos:start="27:42" pos:end="27:42">-</operator> <literal type="number" pos:start="27:44" pos:end="27:44">1</literal><operator pos:start="27:45" pos:end="27:45">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:66"><expr pos:start="29:5" pos:end="29:65"><name pos:start="29:5" pos:end="29:22">tail_padding_bytes</name> <operator pos:start="29:24" pos:end="29:24">=</operator> <name pos:start="29:26" pos:end="29:30">align</name> <operator pos:start="29:32" pos:end="29:32">-</operator> <operator pos:start="29:34" pos:end="29:34">(</operator><operator pos:start="29:35" pos:end="29:35">(</operator><name pos:start="29:36" pos:end="29:41">offset</name> <operator pos:start="29:43" pos:end="29:43">+</operator> <name pos:start="29:45" pos:end="29:49">bytes</name><operator pos:start="29:50" pos:end="29:50">)</operator> <operator pos:start="29:52" pos:end="29:52">&amp;</operator> <operator pos:start="29:54" pos:end="29:54">(</operator><name pos:start="29:55" pos:end="29:59">align</name> <operator pos:start="29:61" pos:end="29:61">-</operator> <literal type="number" pos:start="29:63" pos:end="29:63">1</literal><operator pos:start="29:64" pos:end="29:64">)</operator><operator pos:start="29:65" pos:end="29:65">)</operator></expr>;</expr_stmt>





    <expr_stmt pos:start="35:5" pos:end="35:40"><expr pos:start="35:5" pos:end="35:39"><call pos:start="35:5" pos:end="35:39"><name pos:start="35:5" pos:end="35:10">assert</name><argument_list pos:start="35:11" pos:end="35:39">(<argument pos:start="35:12" pos:end="35:38"><expr pos:start="35:12" pos:end="35:38"><name pos:start="35:12" pos:end="35:16">flags</name> <operator pos:start="35:18" pos:end="35:18">&amp;</operator> <name pos:start="35:20" pos:end="35:38">BDRV_REQ_ZERO_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="37:5" pos:end="51:5"><if pos:start="37:5" pos:end="51:5">if <condition pos:start="37:8" pos:end="37:49">(<expr pos:start="37:9" pos:end="37:48"><name pos:start="37:9" pos:end="37:26">head_padding_bytes</name> <operator pos:start="37:28" pos:end="37:29">||</operator> <name pos:start="37:31" pos:end="37:48">tail_padding_bytes</name></expr>)</condition> <block pos:start="37:51" pos:end="51:5">{<block_content pos:start="39:9" pos:end="49:55">

        <expr_stmt pos:start="39:9" pos:end="39:41"><expr pos:start="39:9" pos:end="39:40"><name pos:start="39:9" pos:end="39:11">buf</name> <operator pos:start="39:13" pos:end="39:13">=</operator> <call pos:start="39:15" pos:end="39:40"><name pos:start="39:15" pos:end="39:29">qemu_blockalign</name><argument_list pos:start="39:30" pos:end="39:40">(<argument pos:start="39:31" pos:end="39:32"><expr pos:start="39:31" pos:end="39:32"><name pos:start="39:31" pos:end="39:32">bs</name></expr></argument>, <argument pos:start="39:35" pos:end="39:39"><expr pos:start="39:35" pos:end="39:39"><name pos:start="39:35" pos:end="39:39">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="47:10"><expr pos:start="41:9" pos:end="47:9"><name pos:start="41:9" pos:end="41:11">iov</name> <operator pos:start="41:13" pos:end="41:13">=</operator> <operator pos:start="41:15" pos:end="41:15">(</operator>struct <name pos:start="41:23" pos:end="41:27">iovec</name><operator pos:start="41:28" pos:end="41:28">)</operator> <block pos:start="41:30" pos:end="47:9">{

            <expr pos:start="43:13" pos:end="43:29"><operator pos:start="43:13" pos:end="43:13">.</operator><name pos:start="43:14" pos:end="43:21">iov_base</name>   <operator pos:start="43:25" pos:end="43:25">=</operator> <name pos:start="43:27" pos:end="43:29">buf</name></expr>,

            <expr pos:start="45:13" pos:end="45:31"><operator pos:start="45:13" pos:end="45:13">.</operator><name pos:start="45:14" pos:end="45:20">iov_len</name>    <operator pos:start="45:25" pos:end="45:25">=</operator> <name pos:start="45:27" pos:end="45:31">align</name></expr>,

        }</block></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:55"><expr pos:start="49:9" pos:end="49:54"><call pos:start="49:9" pos:end="49:54"><name pos:start="49:9" pos:end="49:32">qemu_iovec_init_external</name><argument_list pos:start="49:33" pos:end="49:54">(<argument pos:start="49:34" pos:end="49:44"><expr pos:start="49:34" pos:end="49:44"><operator pos:start="49:34" pos:end="49:34">&amp;</operator><name pos:start="49:35" pos:end="49:44">local_qiov</name></expr></argument>, <argument pos:start="49:47" pos:end="49:50"><expr pos:start="49:47" pos:end="49:50"><operator pos:start="49:47" pos:end="49:47">&amp;</operator><name pos:start="49:48" pos:end="49:50">iov</name></expr></argument>, <argument pos:start="49:53" pos:end="49:53"><expr pos:start="49:53" pos:end="49:53"><literal type="number" pos:start="49:53" pos:end="49:53">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="53:5" pos:end="99:5"><if pos:start="53:5" pos:end="99:5">if <condition pos:start="53:8" pos:end="53:27">(<expr pos:start="53:9" pos:end="53:26"><name pos:start="53:9" pos:end="53:26">head_padding_bytes</name></expr>)</condition> <block pos:start="53:29" pos:end="99:5">{<block_content pos:start="55:9" pos:end="97:28">

        <decl_stmt pos:start="55:9" pos:end="55:69"><decl pos:start="55:9" pos:end="55:68"><type pos:start="55:9" pos:end="55:16"><name pos:start="55:9" pos:end="55:16">uint64_t</name></type> <name pos:start="55:18" pos:end="55:27">zero_bytes</name> <init pos:start="55:29" pos:end="55:68">= <expr pos:start="55:31" pos:end="55:68"><call pos:start="55:31" pos:end="55:68"><name pos:start="55:31" pos:end="55:33">MIN</name><argument_list pos:start="55:34" pos:end="55:68">(<argument pos:start="55:35" pos:end="55:39"><expr pos:start="55:35" pos:end="55:39"><name pos:start="55:35" pos:end="55:39">bytes</name></expr></argument>, <argument pos:start="55:42" pos:end="55:67"><expr pos:start="55:42" pos:end="55:67"><name pos:start="55:42" pos:end="55:46">align</name> <operator pos:start="55:48" pos:end="55:48">-</operator> <name pos:start="55:50" pos:end="55:67">head_padding_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="59:9" pos:end="59:49">/* RMW the unaligned part before head. */</comment>

        <expr_stmt pos:start="61:9" pos:end="61:45"><expr pos:start="61:9" pos:end="61:44"><call pos:start="61:9" pos:end="61:44"><name pos:start="61:9" pos:end="61:32">mark_request_serialising</name><argument_list pos:start="61:33" pos:end="61:44">(<argument pos:start="61:34" pos:end="61:36"><expr pos:start="61:34" pos:end="61:36"><name pos:start="61:34" pos:end="61:36">req</name></expr></argument>, <argument pos:start="61:39" pos:end="61:43"><expr pos:start="61:39" pos:end="61:43"><name pos:start="61:39" pos:end="61:43">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:39"><expr pos:start="63:9" pos:end="63:38"><call pos:start="63:9" pos:end="63:38"><name pos:start="63:9" pos:end="63:33">wait_serialising_requests</name><argument_list pos:start="63:34" pos:end="63:38">(<argument pos:start="63:35" pos:end="63:37"><expr pos:start="63:35" pos:end="63:37"><name pos:start="63:35" pos:end="63:37">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:54"><expr pos:start="65:9" pos:end="65:53"><call pos:start="65:9" pos:end="65:53"><name pos:start="65:9" pos:end="65:24">bdrv_debug_event</name><argument_list pos:start="65:25" pos:end="65:53">(<argument pos:start="65:26" pos:end="65:27"><expr pos:start="65:26" pos:end="65:27"><name pos:start="65:26" pos:end="65:27">bs</name></expr></argument>, <argument pos:start="65:30" pos:end="65:52"><expr pos:start="65:30" pos:end="65:52"><name pos:start="65:30" pos:end="65:52">BLKDBG_PWRITEV_RMW_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="69:57"><expr pos:start="67:9" pos:end="69:56"><name pos:start="67:9" pos:end="67:11">ret</name> <operator pos:start="67:13" pos:end="67:13">=</operator> <call pos:start="67:15" pos:end="69:56"><name pos:start="67:15" pos:end="67:33">bdrv_aligned_preadv</name><argument_list pos:start="67:34" pos:end="69:56">(<argument pos:start="67:35" pos:end="67:36"><expr pos:start="67:35" pos:end="67:36"><name pos:start="67:35" pos:end="67:36">bs</name></expr></argument>, <argument pos:start="67:39" pos:end="67:41"><expr pos:start="67:39" pos:end="67:41"><name pos:start="67:39" pos:end="67:41">req</name></expr></argument>, <argument pos:start="67:44" pos:end="67:64"><expr pos:start="67:44" pos:end="67:64"><name pos:start="67:44" pos:end="67:49">offset</name> <operator pos:start="67:51" pos:end="67:51">&amp;</operator> <operator pos:start="67:53" pos:end="67:53">~</operator><operator pos:start="67:54" pos:end="67:54">(</operator><name pos:start="67:55" pos:end="67:59">align</name> <operator pos:start="67:61" pos:end="67:61">-</operator> <literal type="number" pos:start="67:63" pos:end="67:63">1</literal><operator pos:start="67:64" pos:end="67:64">)</operator></expr></argument>, <argument pos:start="67:67" pos:end="67:71"><expr pos:start="67:67" pos:end="67:71"><name pos:start="67:67" pos:end="67:71">align</name></expr></argument>,

                                  <argument pos:start="69:35" pos:end="69:39"><expr pos:start="69:35" pos:end="69:39"><name pos:start="69:35" pos:end="69:39">align</name></expr></argument>, <argument pos:start="69:42" pos:end="69:52"><expr pos:start="69:42" pos:end="69:52"><operator pos:start="69:42" pos:end="69:42">&amp;</operator><name pos:start="69:43" pos:end="69:52">local_qiov</name></expr></argument>, <argument pos:start="69:55" pos:end="69:55"><expr pos:start="69:55" pos:end="69:55"><literal type="number" pos:start="69:55" pos:end="69:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="75:9"><if pos:start="71:9" pos:end="75:9">if <condition pos:start="71:12" pos:end="71:20">(<expr pos:start="71:13" pos:end="71:19"><name pos:start="71:13" pos:end="71:15">ret</name> <operator pos:start="71:17" pos:end="71:17">&lt;</operator> <literal type="number" pos:start="71:19" pos:end="71:19">0</literal></expr>)</condition> <block pos:start="71:22" pos:end="75:9">{<block_content pos:start="73:13" pos:end="73:22">

            <goto pos:start="73:13" pos:end="73:22">goto <name pos:start="73:18" pos:end="73:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:60"><expr pos:start="77:9" pos:end="77:59"><call pos:start="77:9" pos:end="77:59"><name pos:start="77:9" pos:end="77:24">bdrv_debug_event</name><argument_list pos:start="77:25" pos:end="77:59">(<argument pos:start="77:26" pos:end="77:27"><expr pos:start="77:26" pos:end="77:27"><name pos:start="77:26" pos:end="77:27">bs</name></expr></argument>, <argument pos:start="77:30" pos:end="77:58"><expr pos:start="77:30" pos:end="77:58"><name pos:start="77:30" pos:end="77:58">BLKDBG_PWRITEV_RMW_AFTER_HEAD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:56"><expr pos:start="81:9" pos:end="81:55"><call pos:start="81:9" pos:end="81:55"><name pos:start="81:9" pos:end="81:14">memset</name><argument_list pos:start="81:15" pos:end="81:55">(<argument pos:start="81:16" pos:end="81:39"><expr pos:start="81:16" pos:end="81:39"><name pos:start="81:16" pos:end="81:18">buf</name> <operator pos:start="81:20" pos:end="81:20">+</operator> <name pos:start="81:22" pos:end="81:39">head_padding_bytes</name></expr></argument>, <argument pos:start="81:42" pos:end="81:42"><expr pos:start="81:42" pos:end="81:42"><literal type="number" pos:start="81:42" pos:end="81:42">0</literal></expr></argument>, <argument pos:start="81:45" pos:end="81:54"><expr pos:start="81:45" pos:end="81:54"><name pos:start="81:45" pos:end="81:54">zero_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="87:65"><expr pos:start="83:9" pos:end="87:64"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <call pos:start="83:15" pos:end="87:64"><name pos:start="83:15" pos:end="83:34">bdrv_aligned_pwritev</name><argument_list pos:start="83:35" pos:end="87:64">(<argument pos:start="83:36" pos:end="83:37"><expr pos:start="83:36" pos:end="83:37"><name pos:start="83:36" pos:end="83:37">bs</name></expr></argument>, <argument pos:start="83:40" pos:end="83:42"><expr pos:start="83:40" pos:end="83:42"><name pos:start="83:40" pos:end="83:42">req</name></expr></argument>, <argument pos:start="83:45" pos:end="83:65"><expr pos:start="83:45" pos:end="83:65"><name pos:start="83:45" pos:end="83:50">offset</name> <operator pos:start="83:52" pos:end="83:52">&amp;</operator> <operator pos:start="83:54" pos:end="83:54">~</operator><operator pos:start="83:55" pos:end="83:55">(</operator><name pos:start="83:56" pos:end="83:60">align</name> <operator pos:start="83:62" pos:end="83:62">-</operator> <literal type="number" pos:start="83:64" pos:end="83:64">1</literal><operator pos:start="83:65" pos:end="83:65">)</operator></expr></argument>, <argument pos:start="83:68" pos:end="83:72"><expr pos:start="83:68" pos:end="83:72"><name pos:start="83:68" pos:end="83:72">align</name></expr></argument>,

                                   <argument pos:start="85:36" pos:end="85:40"><expr pos:start="85:36" pos:end="85:40"><name pos:start="85:36" pos:end="85:40">align</name></expr></argument>, <argument pos:start="85:43" pos:end="85:53"><expr pos:start="85:43" pos:end="85:53"><operator pos:start="85:43" pos:end="85:43">&amp;</operator><name pos:start="85:44" pos:end="85:53">local_qiov</name></expr></argument>,

                                   <argument pos:start="87:36" pos:end="87:63"><expr pos:start="87:36" pos:end="87:63"><name pos:start="87:36" pos:end="87:40">flags</name> <operator pos:start="87:42" pos:end="87:42">&amp;</operator> <operator pos:start="87:44" pos:end="87:44">~</operator><name pos:start="87:45" pos:end="87:63">BDRV_REQ_ZERO_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="89:9" pos:end="93:9"><if pos:start="89:9" pos:end="93:9">if <condition pos:start="89:12" pos:end="89:20">(<expr pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">&lt;</operator> <literal type="number" pos:start="89:19" pos:end="89:19">0</literal></expr>)</condition> <block pos:start="89:22" pos:end="93:9">{<block_content pos:start="91:13" pos:end="91:22">

            <goto pos:start="91:13" pos:end="91:22">goto <name pos:start="91:18" pos:end="91:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:29"><expr pos:start="95:9" pos:end="95:28"><name pos:start="95:9" pos:end="95:14">offset</name> <operator pos:start="95:16" pos:end="95:17">+=</operator> <name pos:start="95:19" pos:end="95:28">zero_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:28"><expr pos:start="97:9" pos:end="97:27"><name pos:start="97:9" pos:end="97:13">bytes</name> <operator pos:start="97:15" pos:end="97:16">-=</operator> <name pos:start="97:18" pos:end="97:27">zero_bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:50"><expr pos:start="103:5" pos:end="103:49"><call pos:start="103:5" pos:end="103:49"><name pos:start="103:5" pos:end="103:10">assert</name><argument_list pos:start="103:11" pos:end="103:49">(<argument pos:start="103:12" pos:end="103:48"><expr pos:start="103:12" pos:end="103:48"><operator pos:start="103:12" pos:end="103:12">!</operator><name pos:start="103:13" pos:end="103:17">bytes</name> <operator pos:start="103:19" pos:end="103:20">||</operator> <operator pos:start="103:22" pos:end="103:22">(</operator><name pos:start="103:23" pos:end="103:28">offset</name> <operator pos:start="103:30" pos:end="103:30">&amp;</operator> <operator pos:start="103:32" pos:end="103:32">(</operator><name pos:start="103:33" pos:end="103:37">align</name> <operator pos:start="103:39" pos:end="103:39">-</operator> <literal type="number" pos:start="103:41" pos:end="103:41">1</literal><operator pos:start="103:42" pos:end="103:42">)</operator><operator pos:start="103:43" pos:end="103:43">)</operator> <operator pos:start="103:45" pos:end="103:46">==</operator> <literal type="number" pos:start="103:48" pos:end="103:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="125:5"><if pos:start="105:5" pos:end="125:5">if <condition pos:start="105:8" pos:end="105:23">(<expr pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:13">bytes</name> <operator pos:start="105:15" pos:end="105:16">&gt;=</operator> <name pos:start="105:18" pos:end="105:22">align</name></expr>)</condition> <block pos:start="105:25" pos:end="125:5">{<block_content pos:start="109:9" pos:end="123:32">

        <comment type="block" pos:start="107:9" pos:end="107:51">/* Write the aligned part in the middle. */</comment>

        <decl_stmt pos:start="109:9" pos:end="109:54"><decl pos:start="109:9" pos:end="109:53"><type pos:start="109:9" pos:end="109:16"><name pos:start="109:9" pos:end="109:16">uint64_t</name></type> <name pos:start="109:18" pos:end="109:30">aligned_bytes</name> <init pos:start="109:32" pos:end="109:53">= <expr pos:start="109:34" pos:end="109:53"><name pos:start="109:34" pos:end="109:38">bytes</name> <operator pos:start="109:40" pos:end="109:40">&amp;</operator> <operator pos:start="109:42" pos:end="109:42">~</operator><operator pos:start="109:43" pos:end="109:43">(</operator><name pos:start="109:44" pos:end="109:48">align</name> <operator pos:start="109:50" pos:end="109:50">-</operator> <literal type="number" pos:start="109:52" pos:end="109:52">1</literal><operator pos:start="109:53" pos:end="109:53">)</operator></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="111:9" pos:end="113:48"><expr pos:start="111:9" pos:end="113:47"><name pos:start="111:9" pos:end="111:11">ret</name> <operator pos:start="111:13" pos:end="111:13">=</operator> <call pos:start="111:15" pos:end="113:47"><name pos:start="111:15" pos:end="111:34">bdrv_aligned_pwritev</name><argument_list pos:start="111:35" pos:end="113:47">(<argument pos:start="111:36" pos:end="111:37"><expr pos:start="111:36" pos:end="111:37"><name pos:start="111:36" pos:end="111:37">bs</name></expr></argument>, <argument pos:start="111:40" pos:end="111:42"><expr pos:start="111:40" pos:end="111:42"><name pos:start="111:40" pos:end="111:42">req</name></expr></argument>, <argument pos:start="111:45" pos:end="111:50"><expr pos:start="111:45" pos:end="111:50"><name pos:start="111:45" pos:end="111:50">offset</name></expr></argument>, <argument pos:start="111:53" pos:end="111:65"><expr pos:start="111:53" pos:end="111:65"><name pos:start="111:53" pos:end="111:65">aligned_bytes</name></expr></argument>, <argument pos:start="111:68" pos:end="111:72"><expr pos:start="111:68" pos:end="111:72"><name pos:start="111:68" pos:end="111:72">align</name></expr></argument>,

                                   <argument pos:start="113:36" pos:end="113:39"><expr pos:start="113:36" pos:end="113:39"><name pos:start="113:36" pos:end="113:39">NULL</name></expr></argument>, <argument pos:start="113:42" pos:end="113:46"><expr pos:start="113:42" pos:end="113:46"><name pos:start="113:42" pos:end="113:46">flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="115:9" pos:end="119:9"><if pos:start="115:9" pos:end="119:9">if <condition pos:start="115:12" pos:end="115:20">(<expr pos:start="115:13" pos:end="115:19"><name pos:start="115:13" pos:end="115:15">ret</name> <operator pos:start="115:17" pos:end="115:17">&lt;</operator> <literal type="number" pos:start="115:19" pos:end="115:19">0</literal></expr>)</condition> <block pos:start="115:22" pos:end="119:9">{<block_content pos:start="117:13" pos:end="117:22">

            <goto pos:start="117:13" pos:end="117:22">goto <name pos:start="117:18" pos:end="117:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:31"><expr pos:start="121:9" pos:end="121:30"><name pos:start="121:9" pos:end="121:13">bytes</name> <operator pos:start="121:15" pos:end="121:16">-=</operator> <name pos:start="121:18" pos:end="121:30">aligned_bytes</name></expr>;</expr_stmt>

        <expr_stmt pos:start="123:9" pos:end="123:32"><expr pos:start="123:9" pos:end="123:31"><name pos:start="123:9" pos:end="123:14">offset</name> <operator pos:start="123:16" pos:end="123:17">+=</operator> <name pos:start="123:19" pos:end="123:31">aligned_bytes</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:50"><expr pos:start="129:5" pos:end="129:49"><call pos:start="129:5" pos:end="129:49"><name pos:start="129:5" pos:end="129:10">assert</name><argument_list pos:start="129:11" pos:end="129:49">(<argument pos:start="129:12" pos:end="129:48"><expr pos:start="129:12" pos:end="129:48"><operator pos:start="129:12" pos:end="129:12">!</operator><name pos:start="129:13" pos:end="129:17">bytes</name> <operator pos:start="129:19" pos:end="129:20">||</operator> <operator pos:start="129:22" pos:end="129:22">(</operator><name pos:start="129:23" pos:end="129:28">offset</name> <operator pos:start="129:30" pos:end="129:30">&amp;</operator> <operator pos:start="129:32" pos:end="129:32">(</operator><name pos:start="129:33" pos:end="129:37">align</name> <operator pos:start="129:39" pos:end="129:39">-</operator> <literal type="number" pos:start="129:41" pos:end="129:41">1</literal><operator pos:start="129:42" pos:end="129:42">)</operator><operator pos:start="129:43" pos:end="129:43">)</operator> <operator pos:start="129:45" pos:end="129:46">==</operator> <literal type="number" pos:start="129:48" pos:end="129:48">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="131:5" pos:end="163:5"><if pos:start="131:5" pos:end="163:5">if <condition pos:start="131:8" pos:end="131:14">(<expr pos:start="131:9" pos:end="131:13"><name pos:start="131:9" pos:end="131:13">bytes</name></expr>)</condition> <block pos:start="131:16" pos:end="163:5">{<block_content pos:start="133:9" pos:end="161:78">

        <expr_stmt pos:start="133:9" pos:end="133:52"><expr pos:start="133:9" pos:end="133:51"><call pos:start="133:9" pos:end="133:51"><name pos:start="133:9" pos:end="133:14">assert</name><argument_list pos:start="133:15" pos:end="133:51">(<argument pos:start="133:16" pos:end="133:50"><expr pos:start="133:16" pos:end="133:50"><name pos:start="133:16" pos:end="133:20">align</name> <operator pos:start="133:22" pos:end="133:23">==</operator> <name pos:start="133:25" pos:end="133:42">tail_padding_bytes</name> <operator pos:start="133:44" pos:end="133:44">+</operator> <name pos:start="133:46" pos:end="133:50">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="135:9" pos:end="135:48">/* RMW the unaligned part after tail. */</comment>

        <expr_stmt pos:start="137:9" pos:end="137:45"><expr pos:start="137:9" pos:end="137:44"><call pos:start="137:9" pos:end="137:44"><name pos:start="137:9" pos:end="137:32">mark_request_serialising</name><argument_list pos:start="137:33" pos:end="137:44">(<argument pos:start="137:34" pos:end="137:36"><expr pos:start="137:34" pos:end="137:36"><name pos:start="137:34" pos:end="137:36">req</name></expr></argument>, <argument pos:start="137:39" pos:end="137:43"><expr pos:start="137:39" pos:end="137:43"><name pos:start="137:39" pos:end="137:43">align</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="139:9" pos:end="139:39"><expr pos:start="139:9" pos:end="139:38"><call pos:start="139:9" pos:end="139:38"><name pos:start="139:9" pos:end="139:33">wait_serialising_requests</name><argument_list pos:start="139:34" pos:end="139:38">(<argument pos:start="139:35" pos:end="139:37"><expr pos:start="139:35" pos:end="139:37"><name pos:start="139:35" pos:end="139:37">req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:54"><expr pos:start="141:9" pos:end="141:53"><call pos:start="141:9" pos:end="141:53"><name pos:start="141:9" pos:end="141:24">bdrv_debug_event</name><argument_list pos:start="141:25" pos:end="141:53">(<argument pos:start="141:26" pos:end="141:27"><expr pos:start="141:26" pos:end="141:27"><name pos:start="141:26" pos:end="141:27">bs</name></expr></argument>, <argument pos:start="141:30" pos:end="141:52"><expr pos:start="141:30" pos:end="141:52"><name pos:start="141:30" pos:end="141:52">BLKDBG_PWRITEV_RMW_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="143:9" pos:end="145:57"><expr pos:start="143:9" pos:end="145:56"><name pos:start="143:9" pos:end="143:11">ret</name> <operator pos:start="143:13" pos:end="143:13">=</operator> <call pos:start="143:15" pos:end="145:56"><name pos:start="143:15" pos:end="143:33">bdrv_aligned_preadv</name><argument_list pos:start="143:34" pos:end="145:56">(<argument pos:start="143:35" pos:end="143:36"><expr pos:start="143:35" pos:end="143:36"><name pos:start="143:35" pos:end="143:36">bs</name></expr></argument>, <argument pos:start="143:39" pos:end="143:41"><expr pos:start="143:39" pos:end="143:41"><name pos:start="143:39" pos:end="143:41">req</name></expr></argument>, <argument pos:start="143:44" pos:end="143:49"><expr pos:start="143:44" pos:end="143:49"><name pos:start="143:44" pos:end="143:49">offset</name></expr></argument>, <argument pos:start="143:52" pos:end="143:56"><expr pos:start="143:52" pos:end="143:56"><name pos:start="143:52" pos:end="143:56">align</name></expr></argument>,

                                  <argument pos:start="145:35" pos:end="145:39"><expr pos:start="145:35" pos:end="145:39"><name pos:start="145:35" pos:end="145:39">align</name></expr></argument>, <argument pos:start="145:42" pos:end="145:52"><expr pos:start="145:42" pos:end="145:52"><operator pos:start="145:42" pos:end="145:42">&amp;</operator><name pos:start="145:43" pos:end="145:52">local_qiov</name></expr></argument>, <argument pos:start="145:55" pos:end="145:55"><expr pos:start="145:55" pos:end="145:55"><literal type="number" pos:start="145:55" pos:end="145:55">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="147:9" pos:end="151:9"><if pos:start="147:9" pos:end="151:9">if <condition pos:start="147:12" pos:end="147:20">(<expr pos:start="147:13" pos:end="147:19"><name pos:start="147:13" pos:end="147:15">ret</name> <operator pos:start="147:17" pos:end="147:17">&lt;</operator> <literal type="number" pos:start="147:19" pos:end="147:19">0</literal></expr>)</condition> <block pos:start="147:22" pos:end="151:9">{<block_content pos:start="149:13" pos:end="149:22">

            <goto pos:start="149:13" pos:end="149:22">goto <name pos:start="149:18" pos:end="149:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="153:9" pos:end="153:60"><expr pos:start="153:9" pos:end="153:59"><call pos:start="153:9" pos:end="153:59"><name pos:start="153:9" pos:end="153:24">bdrv_debug_event</name><argument_list pos:start="153:25" pos:end="153:59">(<argument pos:start="153:26" pos:end="153:27"><expr pos:start="153:26" pos:end="153:27"><name pos:start="153:26" pos:end="153:27">bs</name></expr></argument>, <argument pos:start="153:30" pos:end="153:58"><expr pos:start="153:30" pos:end="153:58"><name pos:start="153:30" pos:end="153:58">BLKDBG_PWRITEV_RMW_AFTER_TAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="157:9" pos:end="157:30"><expr pos:start="157:9" pos:end="157:29"><call pos:start="157:9" pos:end="157:29"><name pos:start="157:9" pos:end="157:14">memset</name><argument_list pos:start="157:15" pos:end="157:29">(<argument pos:start="157:16" pos:end="157:18"><expr pos:start="157:16" pos:end="157:18"><name pos:start="157:16" pos:end="157:18">buf</name></expr></argument>, <argument pos:start="157:21" pos:end="157:21"><expr pos:start="157:21" pos:end="157:21"><literal type="number" pos:start="157:21" pos:end="157:21">0</literal></expr></argument>, <argument pos:start="157:24" pos:end="157:28"><expr pos:start="157:24" pos:end="157:28"><name pos:start="157:24" pos:end="157:28">bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="161:78"><expr pos:start="159:9" pos:end="161:77"><name pos:start="159:9" pos:end="159:11">ret</name> <operator pos:start="159:13" pos:end="159:13">=</operator> <call pos:start="159:15" pos:end="161:77"><name pos:start="159:15" pos:end="159:34">bdrv_aligned_pwritev</name><argument_list pos:start="159:35" pos:end="161:77">(<argument pos:start="159:36" pos:end="159:37"><expr pos:start="159:36" pos:end="159:37"><name pos:start="159:36" pos:end="159:37">bs</name></expr></argument>, <argument pos:start="159:40" pos:end="159:42"><expr pos:start="159:40" pos:end="159:42"><name pos:start="159:40" pos:end="159:42">req</name></expr></argument>, <argument pos:start="159:45" pos:end="159:50"><expr pos:start="159:45" pos:end="159:50"><name pos:start="159:45" pos:end="159:50">offset</name></expr></argument>, <argument pos:start="159:53" pos:end="159:57"><expr pos:start="159:53" pos:end="159:57"><name pos:start="159:53" pos:end="159:57">align</name></expr></argument>, <argument pos:start="159:60" pos:end="159:64"><expr pos:start="159:60" pos:end="159:64"><name pos:start="159:60" pos:end="159:64">align</name></expr></argument>,

                                   <argument pos:start="161:36" pos:end="161:46"><expr pos:start="161:36" pos:end="161:46"><operator pos:start="161:36" pos:end="161:36">&amp;</operator><name pos:start="161:37" pos:end="161:46">local_qiov</name></expr></argument>, <argument pos:start="161:49" pos:end="161:76"><expr pos:start="161:49" pos:end="161:76"><name pos:start="161:49" pos:end="161:53">flags</name> <operator pos:start="161:55" pos:end="161:55">&amp;</operator> <operator pos:start="161:57" pos:end="161:57">~</operator><name pos:start="161:58" pos:end="161:76">BDRV_REQ_ZERO_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="165:1" pos:end="165:5"><name pos:start="165:1" pos:end="165:4">fail</name>:</label>

    <expr_stmt pos:start="167:5" pos:end="167:20"><expr pos:start="167:5" pos:end="167:19"><call pos:start="167:5" pos:end="167:19"><name pos:start="167:5" pos:end="167:14">qemu_vfree</name><argument_list pos:start="167:15" pos:end="167:19">(<argument pos:start="167:16" pos:end="167:18"><expr pos:start="167:16" pos:end="167:18"><name pos:start="167:16" pos:end="167:18">buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="169:5" pos:end="169:15">return <expr pos:start="169:12" pos:end="169:14"><name pos:start="169:12" pos:end="169:14">ret</name></expr>;</return>



</block_content>}</block></function>
</unit>
