<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25908.c" pos:tabs="8"><function pos:start="1:1" pos:end="159:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:40">add_aio_request</name><parameter_list pos:start="1:41" pos:end="5:54">(<parameter pos:start="1:42" pos:end="1:61"><decl pos:start="1:42" pos:end="1:61"><type pos:start="1:42" pos:end="1:61"><name pos:start="1:42" pos:end="1:58">BDRVSheepdogState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:61">s</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:78"><decl pos:start="1:64" pos:end="1:78"><type pos:start="1:64" pos:end="1:78"><name pos:start="1:64" pos:end="1:69">AIOReq</name> <modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:78">aio_req</name></decl></parameter>,

                           <parameter pos:start="3:28" pos:end="3:44"><decl pos:start="3:28" pos:end="3:44"><type pos:start="3:28" pos:end="3:44"><name pos:start="3:28" pos:end="3:39"><name pos:start="3:28" pos:end="3:33">struct</name> <name pos:start="3:35" pos:end="3:39">iovec</name></name> <modifier pos:start="3:41" pos:end="3:41">*</modifier></type><name pos:start="3:42" pos:end="3:44">iov</name></decl></parameter>, <parameter pos:start="3:47" pos:end="3:54"><decl pos:start="3:47" pos:end="3:54"><type pos:start="3:47" pos:end="3:54"><name pos:start="3:47" pos:end="3:49">int</name></type> <name pos:start="3:51" pos:end="3:54">niov</name></decl></parameter>, <parameter pos:start="3:57" pos:end="3:67"><decl pos:start="3:57" pos:end="3:67"><type pos:start="3:57" pos:end="3:67"><name pos:start="3:57" pos:end="3:60">bool</name></type> <name pos:start="3:62" pos:end="3:67">create</name></decl></parameter>,

                           <parameter pos:start="5:28" pos:end="5:53"><decl pos:start="5:28" pos:end="5:53"><type pos:start="5:28" pos:end="5:53"><name pos:start="5:28" pos:end="5:42"><name pos:start="5:28" pos:end="5:31">enum</name> <name pos:start="5:33" pos:end="5:42">AIOCBState</name></name></type> <name pos:start="5:44" pos:end="5:53">aiocb_type</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="159:1">{<block_content pos:start="9:5" pos:end="157:35">

    <decl_stmt pos:start="9:5" pos:end="9:39"><decl pos:start="9:5" pos:end="9:38"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">nr_copies</name> <init pos:start="9:19" pos:end="9:38">= <expr pos:start="9:21" pos:end="9:38"><name pos:start="9:21" pos:end="9:38"><name pos:start="9:21" pos:end="9:21">s</name><operator pos:start="9:22" pos:end="9:23">-&gt;</operator><name pos:start="9:24" pos:end="9:28">inode</name><operator pos:start="9:29" pos:end="9:29">.</operator><name pos:start="9:30" pos:end="9:38">nr_copies</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:18">SheepdogObjReq</name></type> <name pos:start="11:20" pos:end="11:22">hdr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:12">unsigned</name> <name pos:start="13:14" pos:end="13:16">int</name></type> <name pos:start="13:18" pos:end="13:21">wlen</name> <init pos:start="13:23" pos:end="13:25">= <expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:12"><decl pos:start="15:5" pos:end="15:11"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:32"><decl pos:start="17:5" pos:end="17:31"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:16">oid</name> <init pos:start="17:18" pos:end="17:31">= <expr pos:start="17:20" pos:end="17:31"><name pos:start="17:20" pos:end="17:31"><name pos:start="17:20" pos:end="17:26">aio_req</name><operator pos:start="17:27" pos:end="17:28">-&gt;</operator><name pos:start="17:29" pos:end="17:31">oid</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:45"><decl pos:start="19:5" pos:end="19:44"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:24">datalen</name> <init pos:start="19:26" pos:end="19:44">= <expr pos:start="19:28" pos:end="19:44"><name pos:start="19:28" pos:end="19:44"><name pos:start="19:28" pos:end="19:34">aio_req</name><operator pos:start="19:35" pos:end="19:36">-&gt;</operator><name pos:start="19:37" pos:end="19:44">data_len</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:38"><decl pos:start="21:5" pos:end="21:37"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:19">offset</name> <init pos:start="21:21" pos:end="21:37">= <expr pos:start="21:23" pos:end="21:37"><name pos:start="21:23" pos:end="21:37"><name pos:start="21:23" pos:end="21:29">aio_req</name><operator pos:start="21:30" pos:end="21:31">-&gt;</operator><name pos:start="21:32" pos:end="21:37">offset</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:35"><decl pos:start="23:5" pos:end="23:34"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:17">flags</name> <init pos:start="23:19" pos:end="23:34">= <expr pos:start="23:21" pos:end="23:34"><name pos:start="23:21" pos:end="23:34"><name pos:start="23:21" pos:end="23:27">aio_req</name><operator pos:start="23:28" pos:end="23:29">-&gt;</operator><name pos:start="23:30" pos:end="23:34">flags</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:41"><decl pos:start="25:5" pos:end="25:40"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint64_t</name></type> <name pos:start="25:14" pos:end="25:20">old_oid</name> <init pos:start="25:22" pos:end="25:40">= <expr pos:start="25:24" pos:end="25:40"><name pos:start="25:24" pos:end="25:40"><name pos:start="25:24" pos:end="25:30">aio_req</name><operator pos:start="25:31" pos:end="25:32">-&gt;</operator><name pos:start="25:33" pos:end="25:40">base_oid</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:19">(<expr pos:start="29:9" pos:end="29:18"><operator pos:start="29:9" pos:end="29:9">!</operator><name pos:start="29:10" pos:end="29:18">nr_copies</name></expr>)</condition> <block pos:start="29:21" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:28">

        <expr_stmt pos:start="31:9" pos:end="31:28"><expr pos:start="31:9" pos:end="31:27"><call pos:start="31:9" pos:end="31:27"><name pos:start="31:9" pos:end="31:20">error_report</name><argument_list pos:start="31:21" pos:end="31:27">(<argument pos:start="31:22" pos:end="31:26"><expr pos:start="31:22" pos:end="31:26"><literal type="string" pos:start="31:22" pos:end="31:26">"bug"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:33"><expr pos:start="37:5" pos:end="37:32"><call pos:start="37:5" pos:end="37:32"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:32">(<argument pos:start="37:12" pos:end="37:15"><expr pos:start="37:12" pos:end="37:15"><operator pos:start="37:12" pos:end="37:12">&amp;</operator><name pos:start="37:13" pos:end="37:15">hdr</name></expr></argument>, <argument pos:start="37:18" pos:end="37:18"><expr pos:start="37:18" pos:end="37:18"><literal type="number" pos:start="37:18" pos:end="37:18">0</literal></expr></argument>, <argument pos:start="37:21" pos:end="37:31"><expr pos:start="37:21" pos:end="37:31"><sizeof pos:start="37:21" pos:end="37:31">sizeof<argument_list pos:start="37:27" pos:end="37:31">(<argument pos:start="37:28" pos:end="37:30"><expr pos:start="37:28" pos:end="37:30"><name pos:start="37:28" pos:end="37:30">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="41:5" pos:end="81:5">switch <condition pos:start="41:12" pos:end="41:23">(<expr pos:start="41:13" pos:end="41:22"><name pos:start="41:13" pos:end="41:22">aiocb_type</name></expr>)</condition> <block pos:start="41:25" pos:end="81:5">{<block_content pos:start="43:5" pos:end="79:14">

    <case pos:start="43:5" pos:end="43:27">case <expr pos:start="43:10" pos:end="43:26"><name pos:start="43:10" pos:end="43:26">AIOCB_FLUSH_CACHE</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:37"><expr pos:start="45:9" pos:end="45:36"><name pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:11">hdr</name><operator pos:start="45:12" pos:end="45:12">.</operator><name pos:start="45:13" pos:end="45:18">opcode</name></name> <operator pos:start="45:20" pos:end="45:20">=</operator> <name pos:start="45:22" pos:end="45:36">SD_OP_FLUSH_VDI</name></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:26">case <expr pos:start="49:10" pos:end="49:25"><name pos:start="49:10" pos:end="49:25">AIOCB_READ_UDATA</name></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:36"><expr pos:start="51:9" pos:end="51:35"><name pos:start="51:9" pos:end="51:18"><name pos:start="51:9" pos:end="51:11">hdr</name><operator pos:start="51:12" pos:end="51:12">.</operator><name pos:start="51:13" pos:end="51:18">opcode</name></name> <operator pos:start="51:20" pos:end="51:20">=</operator> <name pos:start="51:22" pos:end="51:35">SD_OP_READ_OBJ</name></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:26"><expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17"><name pos:start="53:9" pos:end="53:11">hdr</name><operator pos:start="53:12" pos:end="53:12">.</operator><name pos:start="53:13" pos:end="53:17">flags</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:25">flags</name></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="57:27">case <expr pos:start="57:10" pos:end="57:26"><name pos:start="57:10" pos:end="57:26">AIOCB_WRITE_UDATA</name></expr>:</case>

        <if_stmt pos:start="59:9" pos:end="67:9"><if pos:start="59:9" pos:end="63:9">if <condition pos:start="59:12" pos:end="59:19">(<expr pos:start="59:13" pos:end="59:18"><name pos:start="59:13" pos:end="59:18">create</name></expr>)</condition> <block pos:start="59:21" pos:end="63:9">{<block_content pos:start="61:13" pos:end="61:52">

            <expr_stmt pos:start="61:13" pos:end="61:52"><expr pos:start="61:13" pos:end="61:51"><name pos:start="61:13" pos:end="61:22"><name pos:start="61:13" pos:end="61:15">hdr</name><operator pos:start="61:16" pos:end="61:16">.</operator><name pos:start="61:17" pos:end="61:22">opcode</name></name> <operator pos:start="61:24" pos:end="61:24">=</operator> <name pos:start="61:26" pos:end="61:51">SD_OP_CREATE_AND_WRITE_OBJ</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="63:11" pos:end="67:9">else <block pos:start="63:16" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:41">

            <expr_stmt pos:start="65:13" pos:end="65:41"><expr pos:start="65:13" pos:end="65:40"><name pos:start="65:13" pos:end="65:22"><name pos:start="65:13" pos:end="65:15">hdr</name><operator pos:start="65:16" pos:end="65:16">.</operator><name pos:start="65:17" pos:end="65:22">opcode</name></name> <operator pos:start="65:24" pos:end="65:24">=</operator> <name pos:start="65:26" pos:end="65:40">SD_OP_WRITE_OBJ</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:23"><expr pos:start="69:9" pos:end="69:22"><name pos:start="69:9" pos:end="69:12">wlen</name> <operator pos:start="69:14" pos:end="69:14">=</operator> <name pos:start="69:16" pos:end="69:22">datalen</name></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:46"><expr pos:start="71:9" pos:end="71:45"><name pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:11">hdr</name><operator pos:start="71:12" pos:end="71:12">.</operator><name pos:start="71:13" pos:end="71:17">flags</name></name> <operator pos:start="71:19" pos:end="71:19">=</operator> <name pos:start="71:21" pos:end="71:37">SD_FLAG_CMD_WRITE</name> <operator pos:start="71:39" pos:end="71:39">|</operator> <name pos:start="71:41" pos:end="71:45">flags</name></expr>;</expr_stmt>

        <break pos:start="73:9" pos:end="73:14">break;</break>

    <case pos:start="75:5" pos:end="75:27">case <expr pos:start="75:10" pos:end="75:26"><name pos:start="75:10" pos:end="75:26">AIOCB_DISCARD_OBJ</name></expr>:</case>

        <expr_stmt pos:start="77:9" pos:end="77:39"><expr pos:start="77:9" pos:end="77:38"><name pos:start="77:9" pos:end="77:18"><name pos:start="77:9" pos:end="77:11">hdr</name><operator pos:start="77:12" pos:end="77:12">.</operator><name pos:start="77:13" pos:end="77:18">opcode</name></name> <operator pos:start="77:20" pos:end="77:20">=</operator> <name pos:start="77:22" pos:end="77:38">SD_OP_DISCARD_OBJ</name></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    </block_content>}</block></switch>



    <if_stmt pos:start="85:5" pos:end="89:5"><if pos:start="85:5" pos:end="89:5">if <condition pos:start="85:8" pos:end="85:23">(<expr pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:22"><name pos:start="85:9" pos:end="85:9">s</name><operator pos:start="85:10" pos:end="85:11">-&gt;</operator><name pos:start="85:12" pos:end="85:22">cache_flags</name></name></expr>)</condition> <block pos:start="85:25" pos:end="89:5">{<block_content pos:start="87:9" pos:end="87:36">

        <expr_stmt pos:start="87:9" pos:end="87:36"><expr pos:start="87:9" pos:end="87:35"><name pos:start="87:9" pos:end="87:17"><name pos:start="87:9" pos:end="87:11">hdr</name><operator pos:start="87:12" pos:end="87:12">.</operator><name pos:start="87:13" pos:end="87:17">flags</name></name> <operator pos:start="87:19" pos:end="87:20">|=</operator> <name pos:start="87:22" pos:end="87:35"><name pos:start="87:22" pos:end="87:22">s</name><operator pos:start="87:23" pos:end="87:24">-&gt;</operator><name pos:start="87:25" pos:end="87:35">cache_flags</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:18"><expr pos:start="93:5" pos:end="93:17"><name pos:start="93:5" pos:end="93:11"><name pos:start="93:5" pos:end="93:7">hdr</name><operator pos:start="93:8" pos:end="93:8">.</operator><name pos:start="93:9" pos:end="93:11">oid</name></name> <operator pos:start="93:13" pos:end="93:13">=</operator> <name pos:start="93:15" pos:end="93:17">oid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="95:5" pos:end="95:26"><expr pos:start="95:5" pos:end="95:25"><name pos:start="95:5" pos:end="95:15"><name pos:start="95:5" pos:end="95:7">hdr</name><operator pos:start="95:8" pos:end="95:8">.</operator><name pos:start="95:9" pos:end="95:15">cow_oid</name></name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:25">old_oid</name></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:36"><expr pos:start="97:5" pos:end="97:35"><name pos:start="97:5" pos:end="97:14"><name pos:start="97:5" pos:end="97:7">hdr</name><operator pos:start="97:8" pos:end="97:8">.</operator><name pos:start="97:9" pos:end="97:14">copies</name></name> <operator pos:start="97:16" pos:end="97:16">=</operator> <name pos:start="97:18" pos:end="97:35"><name pos:start="97:18" pos:end="97:18">s</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:25">inode</name><operator pos:start="97:26" pos:end="97:26">.</operator><name pos:start="97:27" pos:end="97:35">nr_copies</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:30"><expr pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:19"><name pos:start="101:5" pos:end="101:7">hdr</name><operator pos:start="101:8" pos:end="101:8">.</operator><name pos:start="101:9" pos:end="101:19">data_length</name></name> <operator pos:start="101:21" pos:end="101:21">=</operator> <name pos:start="101:23" pos:end="101:29">datalen</name></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:24"><expr pos:start="103:5" pos:end="103:23"><name pos:start="103:5" pos:end="103:14"><name pos:start="103:5" pos:end="103:7">hdr</name><operator pos:start="103:8" pos:end="103:8">.</operator><name pos:start="103:9" pos:end="103:14">offset</name></name> <operator pos:start="103:16" pos:end="103:16">=</operator> <name pos:start="103:18" pos:end="103:23">offset</name></expr>;</expr_stmt>



    <expr_stmt pos:start="107:5" pos:end="107:25"><expr pos:start="107:5" pos:end="107:24"><name pos:start="107:5" pos:end="107:10"><name pos:start="107:5" pos:end="107:7">hdr</name><operator pos:start="107:8" pos:end="107:8">.</operator><name pos:start="107:9" pos:end="107:10">id</name></name> <operator pos:start="107:12" pos:end="107:12">=</operator> <name pos:start="107:14" pos:end="107:24"><name pos:start="107:14" pos:end="107:20">aio_req</name><operator pos:start="107:21" pos:end="107:22">-&gt;</operator><name pos:start="107:23" pos:end="107:24">id</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:33"><expr pos:start="111:5" pos:end="111:32"><call pos:start="111:5" pos:end="111:32"><name pos:start="111:5" pos:end="111:22">qemu_co_mutex_lock</name><argument_list pos:start="111:23" pos:end="111:32">(<argument pos:start="111:24" pos:end="111:31"><expr pos:start="111:24" pos:end="111:31"><operator pos:start="111:24" pos:end="111:24">&amp;</operator><name pos:start="111:25" pos:end="111:31"><name pos:start="111:25" pos:end="111:25">s</name><operator pos:start="111:26" pos:end="111:27">-&gt;</operator><name pos:start="111:28" pos:end="111:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:39"><expr pos:start="113:5" pos:end="113:38"><name pos:start="113:5" pos:end="113:14"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:14">co_send</name></name> <operator pos:start="113:16" pos:end="113:16">=</operator> <call pos:start="113:18" pos:end="113:38"><name pos:start="113:18" pos:end="113:36">qemu_coroutine_self</name><argument_list pos:start="113:37" pos:end="113:38">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="117:62"><expr pos:start="115:5" pos:end="117:61"><call pos:start="115:5" pos:end="117:61"><name pos:start="115:5" pos:end="115:22">aio_set_fd_handler</name><argument_list pos:start="115:23" pos:end="117:61">(<argument pos:start="115:24" pos:end="115:37"><expr pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:37"><name pos:start="115:24" pos:end="115:24">s</name><operator pos:start="115:25" pos:end="115:26">-&gt;</operator><name pos:start="115:27" pos:end="115:37">aio_context</name></name></expr></argument>, <argument pos:start="115:40" pos:end="115:44"><expr pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:44"><name pos:start="115:40" pos:end="115:40">s</name><operator pos:start="115:41" pos:end="115:42">-&gt;</operator><name pos:start="115:43" pos:end="115:44">fd</name></name></expr></argument>,

                       <argument pos:start="117:24" pos:end="117:39"><expr pos:start="117:24" pos:end="117:39"><name pos:start="117:24" pos:end="117:39">co_read_response</name></expr></argument>, <argument pos:start="117:42" pos:end="117:57"><expr pos:start="117:42" pos:end="117:57"><name pos:start="117:42" pos:end="117:57">co_write_request</name></expr></argument>, <argument pos:start="117:60" pos:end="117:60"><expr pos:start="117:60" pos:end="117:60"><name pos:start="117:60" pos:end="117:60">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:30"><expr pos:start="119:5" pos:end="119:29"><call pos:start="119:5" pos:end="119:29"><name pos:start="119:5" pos:end="119:19">socket_set_cork</name><argument_list pos:start="119:20" pos:end="119:29">(<argument pos:start="119:21" pos:end="119:25"><expr pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:25"><name pos:start="119:21" pos:end="119:21">s</name><operator pos:start="119:22" pos:end="119:23">-&gt;</operator><name pos:start="119:24" pos:end="119:25">fd</name></name></expr></argument>, <argument pos:start="119:28" pos:end="119:28"><expr pos:start="119:28" pos:end="119:28"><literal type="number" pos:start="119:28" pos:end="119:28">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="123:5" pos:end="123:23">/* send a header */</comment>

    <expr_stmt pos:start="125:5" pos:end="125:49"><expr pos:start="125:5" pos:end="125:48"><name pos:start="125:5" pos:end="125:7">ret</name> <operator pos:start="125:9" pos:end="125:9">=</operator> <call pos:start="125:11" pos:end="125:48"><name pos:start="125:11" pos:end="125:22">qemu_co_send</name><argument_list pos:start="125:23" pos:end="125:48">(<argument pos:start="125:24" pos:end="125:28"><expr pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:28"><name pos:start="125:24" pos:end="125:24">s</name><operator pos:start="125:25" pos:end="125:26">-&gt;</operator><name pos:start="125:27" pos:end="125:28">fd</name></name></expr></argument>, <argument pos:start="125:31" pos:end="125:34"><expr pos:start="125:31" pos:end="125:34"><operator pos:start="125:31" pos:end="125:31">&amp;</operator><name pos:start="125:32" pos:end="125:34">hdr</name></expr></argument>, <argument pos:start="125:37" pos:end="125:47"><expr pos:start="125:37" pos:end="125:47"><sizeof pos:start="125:37" pos:end="125:47">sizeof<argument_list pos:start="125:43" pos:end="125:47">(<argument pos:start="125:44" pos:end="125:46"><expr pos:start="125:44" pos:end="125:46"><name pos:start="125:44" pos:end="125:46">hdr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="127:5" pos:end="133:5"><if pos:start="127:5" pos:end="133:5">if <condition pos:start="127:8" pos:end="127:27">(<expr pos:start="127:9" pos:end="127:26"><name pos:start="127:9" pos:end="127:11">ret</name> <operator pos:start="127:13" pos:end="127:14">!=</operator> <sizeof pos:start="127:16" pos:end="127:26">sizeof<argument_list pos:start="127:22" pos:end="127:26">(<argument pos:start="127:23" pos:end="127:25"><expr pos:start="127:23" pos:end="127:25"><name pos:start="127:23" pos:end="127:25">hdr</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="127:29" pos:end="133:5">{<block_content pos:start="129:9" pos:end="131:17">

        <expr_stmt pos:start="129:9" pos:end="129:66"><expr pos:start="129:9" pos:end="129:65"><call pos:start="129:9" pos:end="129:65"><name pos:start="129:9" pos:end="129:20">error_report</name><argument_list pos:start="129:21" pos:end="129:65">(<argument pos:start="129:22" pos:end="129:47"><expr pos:start="129:22" pos:end="129:47"><literal type="string" pos:start="129:22" pos:end="129:47">"failed to send a req, %s"</literal></expr></argument>, <argument pos:start="129:50" pos:end="129:64"><expr pos:start="129:50" pos:end="129:64"><call pos:start="129:50" pos:end="129:64"><name pos:start="129:50" pos:end="129:57">strerror</name><argument_list pos:start="129:58" pos:end="129:64">(<argument pos:start="129:59" pos:end="129:63"><expr pos:start="129:59" pos:end="129:63"><name pos:start="129:59" pos:end="129:63">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="131:9" pos:end="131:17">goto <name pos:start="131:14" pos:end="131:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="137:5" pos:end="147:5"><if pos:start="137:5" pos:end="147:5">if <condition pos:start="137:8" pos:end="137:13">(<expr pos:start="137:9" pos:end="137:12"><name pos:start="137:9" pos:end="137:12">wlen</name></expr>)</condition> <block pos:start="137:15" pos:end="147:5">{<block_content pos:start="139:9" pos:end="145:9">

        <expr_stmt pos:start="139:9" pos:end="139:73"><expr pos:start="139:9" pos:end="139:72"><name pos:start="139:9" pos:end="139:11">ret</name> <operator pos:start="139:13" pos:end="139:13">=</operator> <call pos:start="139:15" pos:end="139:72"><name pos:start="139:15" pos:end="139:27">qemu_co_sendv</name><argument_list pos:start="139:28" pos:end="139:72">(<argument pos:start="139:29" pos:end="139:33"><expr pos:start="139:29" pos:end="139:33"><name pos:start="139:29" pos:end="139:33"><name pos:start="139:29" pos:end="139:29">s</name><operator pos:start="139:30" pos:end="139:31">-&gt;</operator><name pos:start="139:32" pos:end="139:33">fd</name></name></expr></argument>, <argument pos:start="139:36" pos:end="139:38"><expr pos:start="139:36" pos:end="139:38"><name pos:start="139:36" pos:end="139:38">iov</name></expr></argument>, <argument pos:start="139:41" pos:end="139:44"><expr pos:start="139:41" pos:end="139:44"><name pos:start="139:41" pos:end="139:44">niov</name></expr></argument>, <argument pos:start="139:47" pos:end="139:65"><expr pos:start="139:47" pos:end="139:65"><name pos:start="139:47" pos:end="139:65"><name pos:start="139:47" pos:end="139:53">aio_req</name><operator pos:start="139:54" pos:end="139:55">-&gt;</operator><name pos:start="139:56" pos:end="139:65">iov_offset</name></name></expr></argument>, <argument pos:start="139:68" pos:end="139:71"><expr pos:start="139:68" pos:end="139:71"><name pos:start="139:68" pos:end="139:71">wlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="141:9" pos:end="145:9"><if pos:start="141:9" pos:end="145:9">if <condition pos:start="141:12" pos:end="141:24">(<expr pos:start="141:13" pos:end="141:23"><name pos:start="141:13" pos:end="141:15">ret</name> <operator pos:start="141:17" pos:end="141:18">!=</operator> <name pos:start="141:20" pos:end="141:23">wlen</name></expr>)</condition> <block pos:start="141:26" pos:end="145:9">{<block_content pos:start="143:13" pos:end="143:71">

            <expr_stmt pos:start="143:13" pos:end="143:71"><expr pos:start="143:13" pos:end="143:70"><call pos:start="143:13" pos:end="143:70"><name pos:start="143:13" pos:end="143:24">error_report</name><argument_list pos:start="143:25" pos:end="143:70">(<argument pos:start="143:26" pos:end="143:52"><expr pos:start="143:26" pos:end="143:52"><literal type="string" pos:start="143:26" pos:end="143:52">"failed to send a data, %s"</literal></expr></argument>, <argument pos:start="143:55" pos:end="143:69"><expr pos:start="143:55" pos:end="143:69"><call pos:start="143:55" pos:end="143:69"><name pos:start="143:55" pos:end="143:62">strerror</name><argument_list pos:start="143:63" pos:end="143:69">(<argument pos:start="143:64" pos:end="143:68"><expr pos:start="143:64" pos:end="143:68"><name pos:start="143:64" pos:end="143:68">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

<label pos:start="149:1" pos:end="149:4"><name pos:start="149:1" pos:end="149:3">out</name>:</label>

    <expr_stmt pos:start="151:5" pos:end="151:30"><expr pos:start="151:5" pos:end="151:29"><call pos:start="151:5" pos:end="151:29"><name pos:start="151:5" pos:end="151:19">socket_set_cork</name><argument_list pos:start="151:20" pos:end="151:29">(<argument pos:start="151:21" pos:end="151:25"><expr pos:start="151:21" pos:end="151:25"><name pos:start="151:21" pos:end="151:25"><name pos:start="151:21" pos:end="151:21">s</name><operator pos:start="151:22" pos:end="151:23">-&gt;</operator><name pos:start="151:24" pos:end="151:25">fd</name></name></expr></argument>, <argument pos:start="151:28" pos:end="151:28"><expr pos:start="151:28" pos:end="151:28"><literal type="number" pos:start="151:28" pos:end="151:28">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:73"><expr pos:start="153:5" pos:end="153:72"><call pos:start="153:5" pos:end="153:72"><name pos:start="153:5" pos:end="153:22">aio_set_fd_handler</name><argument_list pos:start="153:23" pos:end="153:72">(<argument pos:start="153:24" pos:end="153:37"><expr pos:start="153:24" pos:end="153:37"><name pos:start="153:24" pos:end="153:37"><name pos:start="153:24" pos:end="153:24">s</name><operator pos:start="153:25" pos:end="153:26">-&gt;</operator><name pos:start="153:27" pos:end="153:37">aio_context</name></name></expr></argument>, <argument pos:start="153:40" pos:end="153:44"><expr pos:start="153:40" pos:end="153:44"><name pos:start="153:40" pos:end="153:44"><name pos:start="153:40" pos:end="153:40">s</name><operator pos:start="153:41" pos:end="153:42">-&gt;</operator><name pos:start="153:43" pos:end="153:44">fd</name></name></expr></argument>, <argument pos:start="153:47" pos:end="153:62"><expr pos:start="153:47" pos:end="153:62"><name pos:start="153:47" pos:end="153:62">co_read_response</name></expr></argument>, <argument pos:start="153:65" pos:end="153:68"><expr pos:start="153:65" pos:end="153:68"><name pos:start="153:65" pos:end="153:68">NULL</name></expr></argument>, <argument pos:start="153:71" pos:end="153:71"><expr pos:start="153:71" pos:end="153:71"><name pos:start="153:71" pos:end="153:71">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:22"><expr pos:start="155:5" pos:end="155:21"><name pos:start="155:5" pos:end="155:14"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:14">co_send</name></name> <operator pos:start="155:16" pos:end="155:16">=</operator> <name pos:start="155:18" pos:end="155:21">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:35"><expr pos:start="157:5" pos:end="157:34"><call pos:start="157:5" pos:end="157:34"><name pos:start="157:5" pos:end="157:24">qemu_co_mutex_unlock</name><argument_list pos:start="157:25" pos:end="157:34">(<argument pos:start="157:26" pos:end="157:33"><expr pos:start="157:26" pos:end="157:33"><operator pos:start="157:26" pos:end="157:26">&amp;</operator><name pos:start="157:27" pos:end="157:33"><name pos:start="157:27" pos:end="157:27">s</name><operator pos:start="157:28" pos:end="157:29">-&gt;</operator><name pos:start="157:30" pos:end="157:33">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
