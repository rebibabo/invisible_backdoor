<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6597.c" pos:tabs="8"><function pos:start="1:1" pos:end="35:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:40">pmsav7_use_background_region</name><parameter_list pos:start="1:41" pos:end="3:73">(<parameter pos:start="1:42" pos:end="1:52"><decl pos:start="1:42" pos:end="1:52"><type pos:start="1:42" pos:end="1:52"><name pos:start="1:42" pos:end="1:47">ARMCPU</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:52">cpu</name></decl></parameter>,

                                         <parameter pos:start="3:42" pos:end="3:58"><decl pos:start="3:42" pos:end="3:58"><type pos:start="3:42" pos:end="3:58"><name pos:start="3:42" pos:end="3:50">ARMMMUIdx</name></type> <name pos:start="3:52" pos:end="3:58">mmu_idx</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:72"><decl pos:start="3:61" pos:end="3:72"><type pos:start="3:61" pos:end="3:72"><name pos:start="3:61" pos:end="3:64">bool</name></type> <name pos:start="3:66" pos:end="3:72">is_user</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="35:1">{<block_content pos:start="13:5" pos:end="33:5">

    <comment type="block" pos:start="7:5" pos:end="11:7">/* Return true if we should use the default memory map as a

     * "background" region if there are no hits against any MPU regions.

     */</comment>

    <decl_stmt pos:start="13:5" pos:end="13:33"><decl pos:start="13:5" pos:end="13:32"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:15">CPUARMState</name> <modifier pos:start="13:17" pos:end="13:17">*</modifier></type><name pos:start="13:18" pos:end="13:20">env</name> <init pos:start="13:22" pos:end="13:32">= <expr pos:start="13:24" pos:end="13:32"><operator pos:start="13:24" pos:end="13:24">&amp;</operator><name pos:start="13:25" pos:end="13:32"><name pos:start="13:25" pos:end="13:27">cpu</name><operator pos:start="13:28" pos:end="13:29">-&gt;</operator><name pos:start="13:30" pos:end="13:32">env</name></name></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:16">(<expr pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:15">is_user</name></expr>)</condition> <block pos:start="17:18" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:21">

        <return pos:start="19:9" pos:end="19:21">return <expr pos:start="19:16" pos:end="19:20"><name pos:start="19:16" pos:end="19:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="25:5" pos:end="33:5"><if pos:start="25:5" pos:end="29:5">if <condition pos:start="25:8" pos:end="25:40">(<expr pos:start="25:9" pos:end="25:39"><call pos:start="25:9" pos:end="25:39"><name pos:start="25:9" pos:end="25:19">arm_feature</name><argument_list pos:start="25:20" pos:end="25:39">(<argument pos:start="25:21" pos:end="25:23"><expr pos:start="25:21" pos:end="25:23"><name pos:start="25:21" pos:end="25:23">env</name></expr></argument>, <argument pos:start="25:26" pos:end="25:38"><expr pos:start="25:26" pos:end="25:38"><name pos:start="25:26" pos:end="25:38">ARM_FEATURE_M</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="25:42" pos:end="29:5">{<block_content pos:start="27:9" pos:end="27:66">

        <return pos:start="27:9" pos:end="27:66">return <expr pos:start="27:16" pos:end="27:65"><name pos:start="27:16" pos:end="27:32"><name pos:start="27:16" pos:end="27:18">env</name><operator pos:start="27:19" pos:end="27:20">-&gt;</operator><name pos:start="27:21" pos:end="27:23">v7m</name><operator pos:start="27:24" pos:end="27:24">.</operator><name pos:start="27:25" pos:end="27:32">mpu_ctrl</name></name> <operator pos:start="27:34" pos:end="27:34">&amp;</operator> <name pos:start="27:36" pos:end="27:65">R_V7M_MPU_CTRL_PRIVDEFENA_MASK</name></expr>;</return>

    </block_content>}</block></if> <else pos:start="29:7" pos:end="33:5">else <block pos:start="29:12" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:53">

        <return pos:start="31:9" pos:end="31:53">return <expr pos:start="31:16" pos:end="31:52"><call pos:start="31:16" pos:end="31:41"><name pos:start="31:16" pos:end="31:27">regime_sctlr</name><argument_list pos:start="31:28" pos:end="31:41">(<argument pos:start="31:29" pos:end="31:31"><expr pos:start="31:29" pos:end="31:31"><name pos:start="31:29" pos:end="31:31">env</name></expr></argument>, <argument pos:start="31:34" pos:end="31:40"><expr pos:start="31:34" pos:end="31:40"><name pos:start="31:34" pos:end="31:40">mmu_idx</name></expr></argument>)</argument_list></call> <operator pos:start="31:43" pos:end="31:43">&amp;</operator> <name pos:start="31:45" pos:end="31:52">SCTLR_BR</name></expr>;</return>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
