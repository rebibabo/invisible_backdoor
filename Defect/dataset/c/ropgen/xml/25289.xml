<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25289.c" pos:tabs="8"><function pos:start="1:1" pos:end="357:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:20">qcow_open</name><parameter_list pos:start="1:21" pos:end="3:34">(<parameter pos:start="1:22" pos:end="1:41"><decl pos:start="1:22" pos:end="1:41"><type pos:start="1:22" pos:end="1:41"><name pos:start="1:22" pos:end="1:37">BlockDriverState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">bs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:57"><decl pos:start="1:44" pos:end="1:57"><type pos:start="1:44" pos:end="1:57"><name pos:start="1:44" pos:end="1:48">QDict</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:57">options</name></decl></parameter>, <parameter pos:start="1:60" pos:end="1:68"><decl pos:start="1:60" pos:end="1:68"><type pos:start="1:60" pos:end="1:68"><name pos:start="1:60" pos:end="1:62">int</name></type> <name pos:start="1:64" pos:end="1:68">flags</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:33"><decl pos:start="3:22" pos:end="3:33"><type pos:start="3:22" pos:end="3:33"><name pos:start="3:22" pos:end="3:26">Error</name> <modifier pos:start="3:28" pos:end="3:28">*</modifier><modifier pos:start="3:29" pos:end="3:29">*</modifier></type><name pos:start="3:30" pos:end="3:33">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="357:1">{<block_content pos:start="7:5" pos:end="355:15">

    <decl_stmt pos:start="7:5" pos:end="7:34"><decl pos:start="7:5" pos:end="7:33"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">BDRVQcowState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:33">= <expr pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:33"><name pos:start="7:24" pos:end="7:25">bs</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:33">opaque</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:20">len</name></decl>, <decl pos:start="9:23" pos:end="9:23"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:23" pos:end="9:23">i</name></decl>, <decl pos:start="9:26" pos:end="9:30"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:26" pos:end="9:30">shift</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:12"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">ret</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:14">QCowHeader</name></type> <name pos:start="13:16" pos:end="13:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:11"><name pos:start="15:5" pos:end="15:9">Error</name> <modifier pos:start="15:11" pos:end="15:11">*</modifier></type><name pos:start="15:12" pos:end="15:20">local_err</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">NULL</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:44"><expr pos:start="19:5" pos:end="21:43"><name pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:6">bs</name><operator pos:start="19:7" pos:end="19:8">-&gt;</operator><name pos:start="19:9" pos:end="19:12">file</name></name> <operator pos:start="19:14" pos:end="19:14">=</operator> <call pos:start="19:16" pos:end="21:43"><name pos:start="19:16" pos:end="19:30">bdrv_open_child</name><argument_list pos:start="19:31" pos:end="21:43">(<argument pos:start="19:32" pos:end="19:35"><expr pos:start="19:32" pos:end="19:35"><name pos:start="19:32" pos:end="19:35">NULL</name></expr></argument>, <argument pos:start="19:38" pos:end="19:44"><expr pos:start="19:38" pos:end="19:44"><name pos:start="19:38" pos:end="19:44">options</name></expr></argument>, <argument pos:start="19:47" pos:end="19:52"><expr pos:start="19:47" pos:end="19:52"><literal type="string" pos:start="19:47" pos:end="19:52">"file"</literal></expr></argument>, <argument pos:start="19:55" pos:end="19:56"><expr pos:start="19:55" pos:end="19:56"><name pos:start="19:55" pos:end="19:56">bs</name></expr></argument>, <argument pos:start="19:59" pos:end="19:69"><expr pos:start="19:59" pos:end="19:69"><operator pos:start="19:59" pos:end="19:59">&amp;</operator><name pos:start="19:60" pos:end="19:69">child_file</name></expr></argument>,

                               <argument pos:start="21:32" pos:end="21:36"><expr pos:start="21:32" pos:end="21:36"><name pos:start="21:32" pos:end="21:36">false</name></expr></argument>, <argument pos:start="21:39" pos:end="21:42"><expr pos:start="21:39" pos:end="21:42"><name pos:start="21:39" pos:end="21:42">errp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:18">(<expr pos:start="23:9" pos:end="23:17"><operator pos:start="23:9" pos:end="23:9">!</operator><name pos:start="23:10" pos:end="23:17"><name pos:start="23:10" pos:end="23:11">bs</name><operator pos:start="23:12" pos:end="23:13">-&gt;</operator><name pos:start="23:14" pos:end="23:17">file</name></name></expr>)</condition> <block pos:start="23:20" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:23">

        <return pos:start="25:9" pos:end="25:23">return <expr pos:start="25:16" pos:end="25:22"><operator pos:start="25:16" pos:end="25:16">-</operator><name pos:start="25:17" pos:end="25:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:59"><expr pos:start="31:5" pos:end="31:58"><name pos:start="31:5" pos:end="31:7">ret</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:58"><name pos:start="31:11" pos:end="31:20">bdrv_pread</name><argument_list pos:start="31:21" pos:end="31:58">(<argument pos:start="31:22" pos:end="31:29"><expr pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:29"><name pos:start="31:22" pos:end="31:23">bs</name><operator pos:start="31:24" pos:end="31:25">-&gt;</operator><name pos:start="31:26" pos:end="31:29">file</name></name></expr></argument>, <argument pos:start="31:32" pos:end="31:32"><expr pos:start="31:32" pos:end="31:32"><literal type="number" pos:start="31:32" pos:end="31:32">0</literal></expr></argument>, <argument pos:start="31:35" pos:end="31:41"><expr pos:start="31:35" pos:end="31:41"><operator pos:start="31:35" pos:end="31:35">&amp;</operator><name pos:start="31:36" pos:end="31:41">header</name></expr></argument>, <argument pos:start="31:44" pos:end="31:57"><expr pos:start="31:44" pos:end="31:57"><sizeof pos:start="31:44" pos:end="31:57">sizeof<argument_list pos:start="31:50" pos:end="31:57">(<argument pos:start="31:51" pos:end="31:56"><expr pos:start="31:51" pos:end="31:56"><name pos:start="31:51" pos:end="31:56">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:16">(<expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:11">ret</name> <operator pos:start="33:13" pos:end="33:13">&lt;</operator> <literal type="number" pos:start="33:15" pos:end="33:15">0</literal></expr>)</condition> <block pos:start="33:18" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:18">

        <goto pos:start="35:9" pos:end="35:18">goto <name pos:start="35:14" pos:end="35:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><call pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:16">be32_to_cpus</name><argument_list pos:start="39:17" pos:end="39:31">(<argument pos:start="39:18" pos:end="39:30"><expr pos:start="39:18" pos:end="39:30"><operator pos:start="39:18" pos:end="39:18">&amp;</operator><name pos:start="39:19" pos:end="39:30"><name pos:start="39:19" pos:end="39:24">header</name><operator pos:start="39:25" pos:end="39:25">.</operator><name pos:start="39:26" pos:end="39:30">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:34"><expr pos:start="41:5" pos:end="41:33"><call pos:start="41:5" pos:end="41:33"><name pos:start="41:5" pos:end="41:16">be32_to_cpus</name><argument_list pos:start="41:17" pos:end="41:33">(<argument pos:start="41:18" pos:end="41:32"><expr pos:start="41:18" pos:end="41:32"><operator pos:start="41:18" pos:end="41:18">&amp;</operator><name pos:start="41:19" pos:end="41:32"><name pos:start="41:19" pos:end="41:24">header</name><operator pos:start="41:25" pos:end="41:25">.</operator><name pos:start="41:26" pos:end="41:32">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:46"><expr pos:start="43:5" pos:end="43:45"><call pos:start="43:5" pos:end="43:45"><name pos:start="43:5" pos:end="43:16">be64_to_cpus</name><argument_list pos:start="43:17" pos:end="43:45">(<argument pos:start="43:18" pos:end="43:44"><expr pos:start="43:18" pos:end="43:44"><operator pos:start="43:18" pos:end="43:18">&amp;</operator><name pos:start="43:19" pos:end="43:44"><name pos:start="43:19" pos:end="43:24">header</name><operator pos:start="43:25" pos:end="43:25">.</operator><name pos:start="43:26" pos:end="43:44">backing_file_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:44"><expr pos:start="45:5" pos:end="45:43"><call pos:start="45:5" pos:end="45:43"><name pos:start="45:5" pos:end="45:16">be32_to_cpus</name><argument_list pos:start="45:17" pos:end="45:43">(<argument pos:start="45:18" pos:end="45:42"><expr pos:start="45:18" pos:end="45:42"><operator pos:start="45:18" pos:end="45:18">&amp;</operator><name pos:start="45:19" pos:end="45:42"><name pos:start="45:19" pos:end="45:24">header</name><operator pos:start="45:25" pos:end="45:25">.</operator><name pos:start="45:26" pos:end="45:42">backing_file_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:32"><expr pos:start="47:5" pos:end="47:31"><call pos:start="47:5" pos:end="47:31"><name pos:start="47:5" pos:end="47:16">be32_to_cpus</name><argument_list pos:start="47:17" pos:end="47:31">(<argument pos:start="47:18" pos:end="47:30"><expr pos:start="47:18" pos:end="47:30"><operator pos:start="47:18" pos:end="47:18">&amp;</operator><name pos:start="47:19" pos:end="47:30"><name pos:start="47:19" pos:end="47:24">header</name><operator pos:start="47:25" pos:end="47:25">.</operator><name pos:start="47:26" pos:end="47:30">mtime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:31"><expr pos:start="49:5" pos:end="49:30"><call pos:start="49:5" pos:end="49:30"><name pos:start="49:5" pos:end="49:16">be64_to_cpus</name><argument_list pos:start="49:17" pos:end="49:30">(<argument pos:start="49:18" pos:end="49:29"><expr pos:start="49:18" pos:end="49:29"><operator pos:start="49:18" pos:end="49:18">&amp;</operator><name pos:start="49:19" pos:end="49:29"><name pos:start="49:19" pos:end="49:24">header</name><operator pos:start="49:25" pos:end="49:25">.</operator><name pos:start="49:26" pos:end="49:29">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:39"><expr pos:start="51:5" pos:end="51:38"><call pos:start="51:5" pos:end="51:38"><name pos:start="51:5" pos:end="51:16">be32_to_cpus</name><argument_list pos:start="51:17" pos:end="51:38">(<argument pos:start="51:18" pos:end="51:37"><expr pos:start="51:18" pos:end="51:37"><operator pos:start="51:18" pos:end="51:18">&amp;</operator><name pos:start="51:19" pos:end="51:37"><name pos:start="51:19" pos:end="51:24">header</name><operator pos:start="51:25" pos:end="51:25">.</operator><name pos:start="51:26" pos:end="51:37">crypt_method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:42"><expr pos:start="53:5" pos:end="53:41"><call pos:start="53:5" pos:end="53:41"><name pos:start="53:5" pos:end="53:16">be64_to_cpus</name><argument_list pos:start="53:17" pos:end="53:41">(<argument pos:start="53:18" pos:end="53:40"><expr pos:start="53:18" pos:end="53:40"><operator pos:start="53:18" pos:end="53:18">&amp;</operator><name pos:start="53:19" pos:end="53:40"><name pos:start="53:19" pos:end="53:24">header</name><operator pos:start="53:25" pos:end="53:25">.</operator><name pos:start="53:26" pos:end="53:40">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="57:5" pos:end="65:5"><if pos:start="57:5" pos:end="65:5">if <condition pos:start="57:8" pos:end="57:35">(<expr pos:start="57:9" pos:end="57:34"><name pos:start="57:9" pos:end="57:20"><name pos:start="57:9" pos:end="57:14">header</name><operator pos:start="57:15" pos:end="57:15">.</operator><name pos:start="57:16" pos:end="57:20">magic</name></name> <operator pos:start="57:22" pos:end="57:23">!=</operator> <name pos:start="57:25" pos:end="57:34">QCOW_MAGIC</name></expr>)</condition> <block pos:start="57:37" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:18">

        <expr_stmt pos:start="59:9" pos:end="59:53"><expr pos:start="59:9" pos:end="59:52"><call pos:start="59:9" pos:end="59:52"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="59:52">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:51"><expr pos:start="59:26" pos:end="59:51"><literal type="string" pos:start="59:26" pos:end="59:51">"Image not in qcow format"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:22"><expr pos:start="61:9" pos:end="61:21"><name pos:start="61:9" pos:end="61:11">ret</name> <operator pos:start="61:13" pos:end="61:13">=</operator> <operator pos:start="61:15" pos:end="61:15">-</operator><name pos:start="61:16" pos:end="61:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="63:9" pos:end="63:18">goto <name pos:start="63:14" pos:end="63:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="67:5" pos:end="75:5"><if pos:start="67:5" pos:end="75:5">if <condition pos:start="67:8" pos:end="67:39">(<expr pos:start="67:9" pos:end="67:38"><name pos:start="67:9" pos:end="67:22"><name pos:start="67:9" pos:end="67:14">header</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:22">version</name></name> <operator pos:start="67:24" pos:end="67:25">!=</operator> <name pos:start="67:27" pos:end="67:38">QCOW_VERSION</name></expr>)</condition> <block pos:start="67:41" pos:end="75:5">{<block_content pos:start="69:9" pos:end="73:18">

        <expr_stmt pos:start="69:9" pos:end="69:78"><expr pos:start="69:9" pos:end="69:77"><call pos:start="69:9" pos:end="69:77"><name pos:start="69:9" pos:end="69:18">error_setg</name><argument_list pos:start="69:19" pos:end="69:77">(<argument pos:start="69:20" pos:end="69:23"><expr pos:start="69:20" pos:end="69:23"><name pos:start="69:20" pos:end="69:23">errp</name></expr></argument>, <argument pos:start="69:26" pos:end="69:60"><expr pos:start="69:26" pos:end="69:60"><literal type="string" pos:start="69:26" pos:end="69:53">"Unsupported qcow version %"</literal> <name pos:start="69:55" pos:end="69:60">PRIu32</name></expr></argument>, <argument pos:start="69:63" pos:end="69:76"><expr pos:start="69:63" pos:end="69:76"><name pos:start="69:63" pos:end="69:76"><name pos:start="69:63" pos:end="69:68">header</name><operator pos:start="69:69" pos:end="69:69">.</operator><name pos:start="69:70" pos:end="69:76">version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:23"><expr pos:start="71:9" pos:end="71:22"><name pos:start="71:9" pos:end="71:11">ret</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <operator pos:start="71:15" pos:end="71:15">-</operator><name pos:start="71:16" pos:end="71:22">ENOTSUP</name></expr>;</expr_stmt>

        <goto pos:start="73:9" pos:end="73:18">goto <name pos:start="73:14" pos:end="73:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="79:5" pos:end="87:5"><if pos:start="79:5" pos:end="87:5">if <condition pos:start="79:8" pos:end="79:25">(<expr pos:start="79:9" pos:end="79:24"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:14">header</name><operator pos:start="79:15" pos:end="79:15">.</operator><name pos:start="79:16" pos:end="79:19">size</name></name> <operator pos:start="79:21" pos:end="79:22">&lt;=</operator> <literal type="number" pos:start="79:24" pos:end="79:24">1</literal></expr>)</condition> <block pos:start="79:27" pos:end="87:5">{<block_content pos:start="81:9" pos:end="85:18">

        <expr_stmt pos:start="81:9" pos:end="81:79"><expr pos:start="81:9" pos:end="81:78"><call pos:start="81:9" pos:end="81:78"><name pos:start="81:9" pos:end="81:18">error_setg</name><argument_list pos:start="81:19" pos:end="81:78">(<argument pos:start="81:20" pos:end="81:23"><expr pos:start="81:20" pos:end="81:23"><name pos:start="81:20" pos:end="81:23">errp</name></expr></argument>, <argument pos:start="81:26" pos:end="81:77"><expr pos:start="81:26" pos:end="81:77"><literal type="string" pos:start="81:26" pos:end="81:77">"Image size is too small (must be at least 2 bytes)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:22"><expr pos:start="83:9" pos:end="83:21"><name pos:start="83:9" pos:end="83:11">ret</name> <operator pos:start="83:13" pos:end="83:13">=</operator> <operator pos:start="83:15" pos:end="83:15">-</operator><name pos:start="83:16" pos:end="83:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="85:9" pos:end="85:18">goto <name pos:start="85:14" pos:end="85:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="89:5" pos:end="97:5"><if pos:start="89:5" pos:end="97:5">if <condition pos:start="89:8" pos:end="89:60">(<expr pos:start="89:9" pos:end="89:59"><name pos:start="89:9" pos:end="89:27"><name pos:start="89:9" pos:end="89:14">header</name><operator pos:start="89:15" pos:end="89:15">.</operator><name pos:start="89:16" pos:end="89:27">cluster_bits</name></name> <operator pos:start="89:29" pos:end="89:29">&lt;</operator> <literal type="number" pos:start="89:31" pos:end="89:31">9</literal> <operator pos:start="89:33" pos:end="89:34">||</operator> <name pos:start="89:36" pos:end="89:54"><name pos:start="89:36" pos:end="89:41">header</name><operator pos:start="89:42" pos:end="89:42">.</operator><name pos:start="89:43" pos:end="89:54">cluster_bits</name></name> <operator pos:start="89:56" pos:end="89:56">&gt;</operator> <literal type="number" pos:start="89:58" pos:end="89:59">16</literal></expr>)</condition> <block pos:start="89:62" pos:end="97:5">{<block_content pos:start="91:9" pos:end="95:18">

        <expr_stmt pos:start="91:9" pos:end="91:69"><expr pos:start="91:9" pos:end="91:68"><call pos:start="91:9" pos:end="91:68"><name pos:start="91:9" pos:end="91:18">error_setg</name><argument_list pos:start="91:19" pos:end="91:68">(<argument pos:start="91:20" pos:end="91:23"><expr pos:start="91:20" pos:end="91:23"><name pos:start="91:20" pos:end="91:23">errp</name></expr></argument>, <argument pos:start="91:26" pos:end="91:67"><expr pos:start="91:26" pos:end="91:67"><literal type="string" pos:start="91:26" pos:end="91:67">"Cluster size must be between 512 and 64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:22"><expr pos:start="93:9" pos:end="93:21"><name pos:start="93:9" pos:end="93:11">ret</name> <operator pos:start="93:13" pos:end="93:13">=</operator> <operator pos:start="93:15" pos:end="93:15">-</operator><name pos:start="93:16" pos:end="93:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="95:9" pos:end="95:18">goto <name pos:start="95:14" pos:end="95:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="101:5" pos:end="103:38">/* l2_bits specifies number of entries; storing a uint64_t in each entry,

     * so bytes = num_entries &lt;&lt; 3. */</comment>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="113:5">if <condition pos:start="105:8" pos:end="105:58">(<expr pos:start="105:9" pos:end="105:57"><name pos:start="105:9" pos:end="105:22"><name pos:start="105:9" pos:end="105:14">header</name><operator pos:start="105:15" pos:end="105:15">.</operator><name pos:start="105:16" pos:end="105:22">l2_bits</name></name> <operator pos:start="105:24" pos:end="105:24">&lt;</operator> <literal type="number" pos:start="105:26" pos:end="105:28">9</literal> <operator pos:start="105:28" pos:end="105:28">-</operator> <literal type="number" pos:start="105:30" pos:end="105:30">3</literal> <operator pos:start="105:32" pos:end="105:33">||</operator> <name pos:start="105:35" pos:end="105:48"><name pos:start="105:35" pos:end="105:40">header</name><operator pos:start="105:41" pos:end="105:41">.</operator><name pos:start="105:42" pos:end="105:48">l2_bits</name></name> <operator pos:start="105:50" pos:end="105:50">&gt;</operator> <literal type="number" pos:start="105:52" pos:end="105:55">16</literal> <operator pos:start="105:55" pos:end="105:55">-</operator> <literal type="number" pos:start="105:57" pos:end="105:57">3</literal></expr>)</condition> <block pos:start="105:60" pos:end="113:5">{<block_content pos:start="107:9" pos:end="111:18">

        <expr_stmt pos:start="107:9" pos:end="107:70"><expr pos:start="107:9" pos:end="107:69"><call pos:start="107:9" pos:end="107:69"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="107:69">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>, <argument pos:start="107:26" pos:end="107:68"><expr pos:start="107:26" pos:end="107:68"><literal type="string" pos:start="107:26" pos:end="107:68">"L2 table size must be between 512 and 64k"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="109:9" pos:end="109:22"><expr pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:11">ret</name> <operator pos:start="109:13" pos:end="109:13">=</operator> <operator pos:start="109:15" pos:end="109:15">-</operator><name pos:start="109:16" pos:end="109:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="111:9" pos:end="111:18">goto <name pos:start="111:14" pos:end="111:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="117:5" pos:end="125:5"><if pos:start="117:5" pos:end="125:5">if <condition pos:start="117:8" pos:end="117:45">(<expr pos:start="117:9" pos:end="117:44"><name pos:start="117:9" pos:end="117:27"><name pos:start="117:9" pos:end="117:14">header</name><operator pos:start="117:15" pos:end="117:15">.</operator><name pos:start="117:16" pos:end="117:27">crypt_method</name></name> <operator pos:start="117:29" pos:end="117:29">&gt;</operator> <name pos:start="117:31" pos:end="117:44">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="117:47" pos:end="125:5">{<block_content pos:start="119:9" pos:end="123:18">

        <expr_stmt pos:start="119:9" pos:end="119:69"><expr pos:start="119:9" pos:end="119:68"><call pos:start="119:9" pos:end="119:68"><name pos:start="119:9" pos:end="119:18">error_setg</name><argument_list pos:start="119:19" pos:end="119:68">(<argument pos:start="119:20" pos:end="119:23"><expr pos:start="119:20" pos:end="119:23"><name pos:start="119:20" pos:end="119:23">errp</name></expr></argument>, <argument pos:start="119:26" pos:end="119:67"><expr pos:start="119:26" pos:end="119:67"><literal type="string" pos:start="119:26" pos:end="119:67">"invalid encryption method in qcow header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:22"><expr pos:start="121:9" pos:end="121:21"><name pos:start="121:9" pos:end="121:11">ret</name> <operator pos:start="121:13" pos:end="121:13">=</operator> <operator pos:start="121:15" pos:end="121:15">-</operator><name pos:start="121:16" pos:end="121:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="123:9" pos:end="123:18">goto <name pos:start="123:14" pos:end="123:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="127:5" pos:end="137:5"><if pos:start="127:5" pos:end="137:5">if <condition pos:start="127:8" pos:end="129:58">(<expr pos:start="127:9" pos:end="129:57"><operator pos:start="127:9" pos:end="127:9">!</operator><call pos:start="127:10" pos:end="129:57"><name pos:start="127:10" pos:end="127:32">qcrypto_cipher_supports</name><argument_list pos:start="127:33" pos:end="129:57">(<argument pos:start="127:34" pos:end="127:59"><expr pos:start="127:34" pos:end="127:59"><name pos:start="127:34" pos:end="127:59">QCRYPTO_CIPHER_ALG_AES_128</name></expr></argument>,

                                 <argument pos:start="129:34" pos:end="129:56"><expr pos:start="129:34" pos:end="129:56"><name pos:start="129:34" pos:end="129:56">QCRYPTO_CIPHER_MODE_CBC</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="129:60" pos:end="137:5">{<block_content pos:start="131:9" pos:end="135:18">

        <expr_stmt pos:start="131:9" pos:end="131:53"><expr pos:start="131:9" pos:end="131:52"><call pos:start="131:9" pos:end="131:52"><name pos:start="131:9" pos:end="131:18">error_setg</name><argument_list pos:start="131:19" pos:end="131:52">(<argument pos:start="131:20" pos:end="131:23"><expr pos:start="131:20" pos:end="131:23"><name pos:start="131:20" pos:end="131:23">errp</name></expr></argument>, <argument pos:start="131:26" pos:end="131:51"><expr pos:start="131:26" pos:end="131:51"><literal type="string" pos:start="131:26" pos:end="131:51">"AES cipher not available"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:22"><expr pos:start="133:9" pos:end="133:21"><name pos:start="133:9" pos:end="133:11">ret</name> <operator pos:start="133:13" pos:end="133:13">=</operator> <operator pos:start="133:15" pos:end="133:15">-</operator><name pos:start="133:16" pos:end="133:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="135:9" pos:end="135:18">goto <name pos:start="135:14" pos:end="135:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:49"><expr pos:start="139:5" pos:end="139:48"><name pos:start="139:5" pos:end="139:26"><name pos:start="139:5" pos:end="139:5">s</name><operator pos:start="139:6" pos:end="139:7">-&gt;</operator><name pos:start="139:8" pos:end="139:26">crypt_method_header</name></name> <operator pos:start="139:28" pos:end="139:28">=</operator> <name pos:start="139:30" pos:end="139:48"><name pos:start="139:30" pos:end="139:35">header</name><operator pos:start="139:36" pos:end="139:36">.</operator><name pos:start="139:37" pos:end="139:48">crypt_method</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="141:5" pos:end="173:5"><if pos:start="141:5" pos:end="173:5">if <condition pos:start="141:8" pos:end="141:31">(<expr pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:30"><name pos:start="141:9" pos:end="141:9">s</name><operator pos:start="141:10" pos:end="141:11">-&gt;</operator><name pos:start="141:12" pos:end="141:30">crypt_method_header</name></name></expr>)</condition> <block pos:start="141:33" pos:end="173:5">{<block_content pos:start="143:9" pos:end="171:29">

        <if_stmt pos:start="143:9" pos:end="167:9"><if pos:start="143:9" pos:end="167:9">if <condition pos:start="143:12" pos:end="145:53">(<expr pos:start="143:13" pos:end="145:52"><call pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:31">bdrv_uses_whitelist</name><argument_list pos:start="143:32" pos:end="143:33">()</argument_list></call> <operator pos:start="143:35" pos:end="143:36">&amp;&amp;</operator>

            <name pos:start="145:13" pos:end="145:34"><name pos:start="145:13" pos:end="145:13">s</name><operator pos:start="145:14" pos:end="145:15">-&gt;</operator><name pos:start="145:16" pos:end="145:34">crypt_method_header</name></name> <operator pos:start="145:36" pos:end="145:37">==</operator> <name pos:start="145:39" pos:end="145:52">QCOW_CRYPT_AES</name></expr>)</condition> <block pos:start="145:55" pos:end="167:9">{<block_content pos:start="147:13" pos:end="165:22">

            <expr_stmt pos:start="147:13" pos:end="151:56"><expr pos:start="147:13" pos:end="151:55"><call pos:start="147:13" pos:end="151:55"><name pos:start="147:13" pos:end="147:22">error_setg</name><argument_list pos:start="147:23" pos:end="151:55">(<argument pos:start="147:24" pos:end="147:27"><expr pos:start="147:24" pos:end="147:27"><name pos:start="147:24" pos:end="147:27">errp</name></expr></argument>,

                       <argument pos:start="149:24" pos:end="151:54"><expr pos:start="149:24" pos:end="151:54"><literal type="string" pos:start="149:24" pos:end="149:75">"Use of AES-CBC encrypted qcow images is no longer "</literal>

                       <literal type="string" pos:start="151:24" pos:end="151:54">"supported in system emulators"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="153:13" pos:end="161:51"><expr pos:start="153:13" pos:end="161:50"><call pos:start="153:13" pos:end="161:50"><name pos:start="153:13" pos:end="153:29">error_append_hint</name><argument_list pos:start="153:30" pos:end="161:50">(<argument pos:start="153:31" pos:end="153:34"><expr pos:start="153:31" pos:end="153:34"><name pos:start="153:31" pos:end="153:34">errp</name></expr></argument>,

                              <argument pos:start="155:31" pos:end="161:49"><expr pos:start="155:31" pos:end="161:49"><literal type="string" pos:start="155:31" pos:end="155:79">"You can use 'qemu-img convert' to convert your "</literal>

                              <literal type="string" pos:start="157:31" pos:end="157:79">"image to an alternative supported format, such "</literal>

                              <literal type="string" pos:start="159:31" pos:end="159:74">"as unencrypted qcow, or raw with the LUKS "</literal>

                              <literal type="string" pos:start="161:31" pos:end="161:49">"format instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="163:13" pos:end="163:26"><expr pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:15">ret</name> <operator pos:start="163:17" pos:end="163:17">=</operator> <operator pos:start="163:19" pos:end="163:19">-</operator><name pos:start="163:20" pos:end="163:25">ENOSYS</name></expr>;</expr_stmt>

            <goto pos:start="165:13" pos:end="165:22">goto <name pos:start="165:18" pos:end="165:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="171:9" pos:end="171:29"><expr pos:start="171:9" pos:end="171:28"><name pos:start="171:9" pos:end="171:21"><name pos:start="171:9" pos:end="171:10">bs</name><operator pos:start="171:11" pos:end="171:12">-&gt;</operator><name pos:start="171:13" pos:end="171:21">encrypted</name></name> <operator pos:start="171:23" pos:end="171:23">=</operator> <name pos:start="171:25" pos:end="171:28">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:42"><expr pos:start="175:5" pos:end="175:41"><name pos:start="175:5" pos:end="175:19"><name pos:start="175:5" pos:end="175:5">s</name><operator pos:start="175:6" pos:end="175:7">-&gt;</operator><name pos:start="175:8" pos:end="175:19">cluster_bits</name></name> <operator pos:start="175:21" pos:end="175:21">=</operator> <name pos:start="175:23" pos:end="175:41"><name pos:start="175:23" pos:end="175:28">header</name><operator pos:start="175:29" pos:end="175:29">.</operator><name pos:start="175:30" pos:end="175:41">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:43"><expr pos:start="177:5" pos:end="177:42"><name pos:start="177:5" pos:end="177:19"><name pos:start="177:5" pos:end="177:5">s</name><operator pos:start="177:6" pos:end="177:7">-&gt;</operator><name pos:start="177:8" pos:end="177:19">cluster_size</name></name> <operator pos:start="177:21" pos:end="177:21">=</operator> <literal type="number" pos:start="177:23" pos:end="177:23">1</literal> <operator pos:start="177:25" pos:end="177:26">&lt;&lt;</operator> <name pos:start="177:28" pos:end="177:42"><name pos:start="177:28" pos:end="177:28">s</name><operator pos:start="177:29" pos:end="177:30">-&gt;</operator><name pos:start="177:31" pos:end="177:42">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="179:52"><expr pos:start="179:5" pos:end="179:51"><name pos:start="179:5" pos:end="179:22"><name pos:start="179:5" pos:end="179:5">s</name><operator pos:start="179:6" pos:end="179:7">-&gt;</operator><name pos:start="179:8" pos:end="179:22">cluster_sectors</name></name> <operator pos:start="179:24" pos:end="179:24">=</operator> <literal type="number" pos:start="179:26" pos:end="179:26">1</literal> <operator pos:start="179:28" pos:end="179:29">&lt;&lt;</operator> <operator pos:start="179:31" pos:end="179:31">(</operator><name pos:start="179:32" pos:end="179:46"><name pos:start="179:32" pos:end="179:32">s</name><operator pos:start="179:33" pos:end="179:34">-&gt;</operator><name pos:start="179:35" pos:end="179:46">cluster_bits</name></name> <operator pos:start="179:48" pos:end="179:48">-</operator> <literal type="number" pos:start="179:50" pos:end="179:50">9</literal><operator pos:start="179:51" pos:end="179:51">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="181:5" pos:end="181:32"><expr pos:start="181:5" pos:end="181:31"><name pos:start="181:5" pos:end="181:14"><name pos:start="181:5" pos:end="181:5">s</name><operator pos:start="181:6" pos:end="181:7">-&gt;</operator><name pos:start="181:8" pos:end="181:14">l2_bits</name></name> <operator pos:start="181:16" pos:end="181:16">=</operator> <name pos:start="181:18" pos:end="181:31"><name pos:start="181:18" pos:end="181:23">header</name><operator pos:start="181:24" pos:end="181:24">.</operator><name pos:start="181:25" pos:end="181:31">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="183:5" pos:end="183:33"><expr pos:start="183:5" pos:end="183:32"><name pos:start="183:5" pos:end="183:14"><name pos:start="183:5" pos:end="183:5">s</name><operator pos:start="183:6" pos:end="183:7">-&gt;</operator><name pos:start="183:8" pos:end="183:14">l2_size</name></name> <operator pos:start="183:16" pos:end="183:16">=</operator> <literal type="number" pos:start="183:18" pos:end="183:18">1</literal> <operator pos:start="183:20" pos:end="183:21">&lt;&lt;</operator> <name pos:start="183:23" pos:end="183:32"><name pos:start="183:23" pos:end="183:23">s</name><operator pos:start="183:24" pos:end="183:25">-&gt;</operator><name pos:start="183:26" pos:end="183:32">l2_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:42"><expr pos:start="185:5" pos:end="185:41"><name pos:start="185:5" pos:end="185:21"><name pos:start="185:5" pos:end="185:6">bs</name><operator pos:start="185:7" pos:end="185:8">-&gt;</operator><name pos:start="185:9" pos:end="185:21">total_sectors</name></name> <operator pos:start="185:23" pos:end="185:23">=</operator> <name pos:start="185:25" pos:end="185:35"><name pos:start="185:25" pos:end="185:30">header</name><operator pos:start="185:31" pos:end="185:31">.</operator><name pos:start="185:32" pos:end="185:35">size</name></name> <operator pos:start="185:37" pos:end="185:37">/</operator> <literal type="number" pos:start="185:39" pos:end="185:41">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:65"><expr pos:start="187:5" pos:end="187:64"><name pos:start="187:5" pos:end="187:26"><name pos:start="187:5" pos:end="187:5">s</name><operator pos:start="187:6" pos:end="187:7">-&gt;</operator><name pos:start="187:8" pos:end="187:26">cluster_offset_mask</name></name> <operator pos:start="187:28" pos:end="187:28">=</operator> <operator pos:start="187:30" pos:end="187:30">(</operator><literal type="number" pos:start="187:31" pos:end="187:33">1LL</literal> <operator pos:start="187:35" pos:end="187:36">&lt;&lt;</operator> <operator pos:start="187:38" pos:end="187:38">(</operator><literal type="number" pos:start="187:39" pos:end="187:42">63</literal> <operator pos:start="187:42" pos:end="187:42">-</operator> <name pos:start="187:44" pos:end="187:58"><name pos:start="187:44" pos:end="187:44">s</name><operator pos:start="187:45" pos:end="187:46">-&gt;</operator><name pos:start="187:47" pos:end="187:58">cluster_bits</name></name><operator pos:start="187:59" pos:end="187:59">)</operator><operator pos:start="187:60" pos:end="187:60">)</operator> <operator pos:start="187:62" pos:end="187:62">-</operator> <literal type="number" pos:start="187:64" pos:end="187:64">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="191:5" pos:end="191:32">/* read the level 1 table */</comment>

    <expr_stmt pos:start="193:5" pos:end="193:41"><expr pos:start="193:5" pos:end="193:40"><name pos:start="193:5" pos:end="193:9">shift</name> <operator pos:start="193:11" pos:end="193:11">=</operator> <name pos:start="193:13" pos:end="193:27"><name pos:start="193:13" pos:end="193:13">s</name><operator pos:start="193:14" pos:end="193:15">-&gt;</operator><name pos:start="193:16" pos:end="193:27">cluster_bits</name></name> <operator pos:start="193:29" pos:end="193:29">+</operator> <name pos:start="193:31" pos:end="193:40"><name pos:start="193:31" pos:end="193:31">s</name><operator pos:start="193:32" pos:end="193:33">-&gt;</operator><name pos:start="193:34" pos:end="193:40">l2_bits</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="195:5" pos:end="219:5"><if pos:start="195:5" pos:end="203:5">if <condition pos:start="195:8" pos:end="195:50">(<expr pos:start="195:9" pos:end="195:49"><name pos:start="195:9" pos:end="195:19"><name pos:start="195:9" pos:end="195:14">header</name><operator pos:start="195:15" pos:end="195:15">.</operator><name pos:start="195:16" pos:end="195:19">size</name></name> <operator pos:start="195:21" pos:end="195:21">&gt;</operator> <name pos:start="195:23" pos:end="195:32">UINT64_MAX</name> <operator pos:start="195:34" pos:end="195:34">-</operator> <operator pos:start="195:36" pos:end="195:36">(</operator><literal type="number" pos:start="195:37" pos:end="195:39">1LL</literal> <operator pos:start="195:41" pos:end="195:42">&lt;&lt;</operator> <name pos:start="195:44" pos:end="195:48">shift</name><operator pos:start="195:49" pos:end="195:49">)</operator></expr>)</condition> <block pos:start="195:52" pos:end="203:5">{<block_content pos:start="197:9" pos:end="201:18">

        <expr_stmt pos:start="197:9" pos:end="197:44"><expr pos:start="197:9" pos:end="197:43"><call pos:start="197:9" pos:end="197:43"><name pos:start="197:9" pos:end="197:18">error_setg</name><argument_list pos:start="197:19" pos:end="197:43">(<argument pos:start="197:20" pos:end="197:23"><expr pos:start="197:20" pos:end="197:23"><name pos:start="197:20" pos:end="197:23">errp</name></expr></argument>, <argument pos:start="197:26" pos:end="197:42"><expr pos:start="197:26" pos:end="197:42"><literal type="string" pos:start="197:26" pos:end="197:42">"Image too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="199:9" pos:end="199:22"><expr pos:start="199:9" pos:end="199:21"><name pos:start="199:9" pos:end="199:11">ret</name> <operator pos:start="199:13" pos:end="199:13">=</operator> <operator pos:start="199:15" pos:end="199:15">-</operator><name pos:start="199:16" pos:end="199:21">EINVAL</name></expr>;</expr_stmt>

        <goto pos:start="201:9" pos:end="201:18">goto <name pos:start="201:14" pos:end="201:17">fail</name>;</goto>

    </block_content>}</block></if> <else pos:start="203:7" pos:end="219:5">else <block pos:start="203:12" pos:end="219:5">{<block_content pos:start="205:9" pos:end="217:29">

        <decl_stmt pos:start="205:9" pos:end="205:71"><decl pos:start="205:9" pos:end="205:70"><type pos:start="205:9" pos:end="205:16"><name pos:start="205:9" pos:end="205:16">uint64_t</name></type> <name pos:start="205:18" pos:end="205:24">l1_size</name> <init pos:start="205:26" pos:end="205:70">= <expr pos:start="205:28" pos:end="205:70"><operator pos:start="205:28" pos:end="205:28">(</operator><name pos:start="205:29" pos:end="205:39"><name pos:start="205:29" pos:end="205:34">header</name><operator pos:start="205:35" pos:end="205:35">.</operator><name pos:start="205:36" pos:end="205:39">size</name></name> <operator pos:start="205:41" pos:end="205:41">+</operator> <operator pos:start="205:43" pos:end="205:43">(</operator><literal type="number" pos:start="205:44" pos:end="205:46">1LL</literal> <operator pos:start="205:48" pos:end="205:49">&lt;&lt;</operator> <name pos:start="205:51" pos:end="205:55">shift</name><operator pos:start="205:56" pos:end="205:56">)</operator> <operator pos:start="205:58" pos:end="205:58">-</operator> <literal type="number" pos:start="205:60" pos:end="205:60">1</literal><operator pos:start="205:61" pos:end="205:61">)</operator> <operator pos:start="205:63" pos:end="205:64">&gt;&gt;</operator> <name pos:start="205:66" pos:end="205:70">shift</name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="207:9" pos:end="215:9"><if pos:start="207:9" pos:end="215:9">if <condition pos:start="207:12" pos:end="207:49">(<expr pos:start="207:13" pos:end="207:48"><name pos:start="207:13" pos:end="207:19">l1_size</name> <operator pos:start="207:21" pos:end="207:21">&gt;</operator> <name pos:start="207:23" pos:end="207:29">INT_MAX</name> <operator pos:start="207:31" pos:end="207:31">/</operator> <sizeof pos:start="207:33" pos:end="207:48">sizeof<argument_list pos:start="207:39" pos:end="207:48">(<argument pos:start="207:40" pos:end="207:47"><expr pos:start="207:40" pos:end="207:47"><name pos:start="207:40" pos:end="207:47">uint64_t</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="207:51" pos:end="215:9">{<block_content pos:start="209:13" pos:end="213:22">

            <expr_stmt pos:start="209:13" pos:end="209:48"><expr pos:start="209:13" pos:end="209:47"><call pos:start="209:13" pos:end="209:47"><name pos:start="209:13" pos:end="209:22">error_setg</name><argument_list pos:start="209:23" pos:end="209:47">(<argument pos:start="209:24" pos:end="209:27"><expr pos:start="209:24" pos:end="209:27"><name pos:start="209:24" pos:end="209:27">errp</name></expr></argument>, <argument pos:start="209:30" pos:end="209:46"><expr pos:start="209:30" pos:end="209:46"><literal type="string" pos:start="209:30" pos:end="209:46">"Image too large"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:26"><expr pos:start="211:13" pos:end="211:25"><name pos:start="211:13" pos:end="211:15">ret</name> <operator pos:start="211:17" pos:end="211:17">=</operator> <operator pos:start="211:19" pos:end="211:19">-</operator><name pos:start="211:20" pos:end="211:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="213:13" pos:end="213:22">goto <name pos:start="213:18" pos:end="213:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:29"><expr pos:start="217:9" pos:end="217:28"><name pos:start="217:9" pos:end="217:18"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:18">l1_size</name></name> <operator pos:start="217:20" pos:end="217:20">=</operator> <name pos:start="217:22" pos:end="217:28">l1_size</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="223:5" pos:end="223:48"><expr pos:start="223:5" pos:end="223:47"><name pos:start="223:5" pos:end="223:22"><name pos:start="223:5" pos:end="223:5">s</name><operator pos:start="223:6" pos:end="223:7">-&gt;</operator><name pos:start="223:8" pos:end="223:22">l1_table_offset</name></name> <operator pos:start="223:24" pos:end="223:24">=</operator> <name pos:start="223:26" pos:end="223:47"><name pos:start="223:26" pos:end="223:31">header</name><operator pos:start="223:32" pos:end="223:32">.</operator><name pos:start="223:33" pos:end="223:47">l1_table_offset</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="225:5" pos:end="225:50"><expr pos:start="225:5" pos:end="225:49"><name pos:start="225:5" pos:end="225:15"><name pos:start="225:5" pos:end="225:5">s</name><operator pos:start="225:6" pos:end="225:7">-&gt;</operator><name pos:start="225:8" pos:end="225:15">l1_table</name></name> <operator pos:start="225:17" pos:end="225:17">=</operator> <call pos:start="225:19" pos:end="225:49"><name pos:start="225:19" pos:end="225:27">g_try_new</name><argument_list pos:start="225:28" pos:end="225:49">(<argument pos:start="225:29" pos:end="225:36"><expr pos:start="225:29" pos:end="225:36"><name pos:start="225:29" pos:end="225:36">uint64_t</name></expr></argument>, <argument pos:start="225:39" pos:end="225:48"><expr pos:start="225:39" pos:end="225:48"><name pos:start="225:39" pos:end="225:48"><name pos:start="225:39" pos:end="225:39">s</name><operator pos:start="225:40" pos:end="225:41">-&gt;</operator><name pos:start="225:42" pos:end="225:48">l1_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="227:5" pos:end="235:5"><if pos:start="227:5" pos:end="235:5">if <condition pos:start="227:8" pos:end="227:28">(<expr pos:start="227:9" pos:end="227:27"><name pos:start="227:9" pos:end="227:19"><name pos:start="227:9" pos:end="227:9">s</name><operator pos:start="227:10" pos:end="227:11">-&gt;</operator><name pos:start="227:12" pos:end="227:19">l1_table</name></name> <operator pos:start="227:21" pos:end="227:22">==</operator> <name pos:start="227:24" pos:end="227:27">NULL</name></expr>)</condition> <block pos:start="227:30" pos:end="235:5">{<block_content pos:start="229:9" pos:end="233:18">

        <expr_stmt pos:start="229:9" pos:end="229:67"><expr pos:start="229:9" pos:end="229:66"><call pos:start="229:9" pos:end="229:66"><name pos:start="229:9" pos:end="229:18">error_setg</name><argument_list pos:start="229:19" pos:end="229:66">(<argument pos:start="229:20" pos:end="229:23"><expr pos:start="229:20" pos:end="229:23"><name pos:start="229:20" pos:end="229:23">errp</name></expr></argument>, <argument pos:start="229:26" pos:end="229:65"><expr pos:start="229:26" pos:end="229:65"><literal type="string" pos:start="229:26" pos:end="229:65">"Could not allocate memory for L1 table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="231:9" pos:end="231:22"><expr pos:start="231:9" pos:end="231:21"><name pos:start="231:9" pos:end="231:11">ret</name> <operator pos:start="231:13" pos:end="231:13">=</operator> <operator pos:start="231:15" pos:end="231:15">-</operator><name pos:start="231:16" pos:end="231:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="233:9" pos:end="233:18">goto <name pos:start="233:14" pos:end="233:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="239:5" pos:end="241:46"><expr pos:start="239:5" pos:end="241:45"><name pos:start="239:5" pos:end="239:7">ret</name> <operator pos:start="239:9" pos:end="239:9">=</operator> <call pos:start="239:11" pos:end="241:45"><name pos:start="239:11" pos:end="239:20">bdrv_pread</name><argument_list pos:start="239:21" pos:end="241:45">(<argument pos:start="239:22" pos:end="239:29"><expr pos:start="239:22" pos:end="239:29"><name pos:start="239:22" pos:end="239:29"><name pos:start="239:22" pos:end="239:23">bs</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:29">file</name></name></expr></argument>, <argument pos:start="239:32" pos:end="239:49"><expr pos:start="239:32" pos:end="239:49"><name pos:start="239:32" pos:end="239:49"><name pos:start="239:32" pos:end="239:32">s</name><operator pos:start="239:33" pos:end="239:34">-&gt;</operator><name pos:start="239:35" pos:end="239:49">l1_table_offset</name></name></expr></argument>, <argument pos:start="239:52" pos:end="239:62"><expr pos:start="239:52" pos:end="239:62"><name pos:start="239:52" pos:end="239:62"><name pos:start="239:52" pos:end="239:52">s</name><operator pos:start="239:53" pos:end="239:54">-&gt;</operator><name pos:start="239:55" pos:end="239:62">l1_table</name></name></expr></argument>,

               <argument pos:start="241:16" pos:end="241:44"><expr pos:start="241:16" pos:end="241:44"><name pos:start="241:16" pos:end="241:25"><name pos:start="241:16" pos:end="241:16">s</name><operator pos:start="241:17" pos:end="241:18">-&gt;</operator><name pos:start="241:19" pos:end="241:25">l1_size</name></name> <operator pos:start="241:27" pos:end="241:27">*</operator> <sizeof pos:start="241:29" pos:end="241:44">sizeof<argument_list pos:start="241:35" pos:end="241:44">(<argument pos:start="241:36" pos:end="241:43"><expr pos:start="241:36" pos:end="241:43"><name pos:start="241:36" pos:end="241:43">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="243:5" pos:end="247:5"><if pos:start="243:5" pos:end="247:5">if <condition pos:start="243:8" pos:end="243:16">(<expr pos:start="243:9" pos:end="243:15"><name pos:start="243:9" pos:end="243:11">ret</name> <operator pos:start="243:13" pos:end="243:13">&lt;</operator> <literal type="number" pos:start="243:15" pos:end="243:15">0</literal></expr>)</condition> <block pos:start="243:18" pos:end="247:5">{<block_content pos:start="245:9" pos:end="245:18">

        <goto pos:start="245:9" pos:end="245:18">goto <name pos:start="245:14" pos:end="245:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <for pos:start="251:5" pos:end="255:5">for<control pos:start="251:8" pos:end="251:34">(<init pos:start="251:9" pos:end="251:14"><expr pos:start="251:9" pos:end="251:13"><name pos:start="251:9" pos:end="251:9">i</name> <operator pos:start="251:11" pos:end="251:11">=</operator> <literal type="number" pos:start="251:13" pos:end="251:13">0</literal></expr>;</init><condition pos:start="251:15" pos:end="251:29"><expr pos:start="251:15" pos:end="251:28"><name pos:start="251:15" pos:end="251:15">i</name> <operator pos:start="251:17" pos:end="251:17">&lt;</operator> <name pos:start="251:19" pos:end="251:28"><name pos:start="251:19" pos:end="251:19">s</name><operator pos:start="251:20" pos:end="251:21">-&gt;</operator><name pos:start="251:22" pos:end="251:28">l1_size</name></name></expr>;</condition> <incr pos:start="251:31" pos:end="251:33"><expr pos:start="251:31" pos:end="251:33"><name pos:start="251:31" pos:end="251:31">i</name><operator pos:start="251:32" pos:end="251:33">++</operator></expr></incr>)</control> <block pos:start="251:36" pos:end="255:5">{<block_content pos:start="253:9" pos:end="253:38">

        <expr_stmt pos:start="253:9" pos:end="253:38"><expr pos:start="253:9" pos:end="253:37"><call pos:start="253:9" pos:end="253:37"><name pos:start="253:9" pos:end="253:20">be64_to_cpus</name><argument_list pos:start="253:21" pos:end="253:37">(<argument pos:start="253:22" pos:end="253:36"><expr pos:start="253:22" pos:end="253:36"><operator pos:start="253:22" pos:end="253:22">&amp;</operator><name pos:start="253:23" pos:end="253:36"><name pos:start="253:23" pos:end="253:23">s</name><operator pos:start="253:24" pos:end="253:25">-&gt;</operator><name pos:start="253:26" pos:end="253:33">l1_table</name><index pos:start="253:34" pos:end="253:36">[<expr pos:start="253:35" pos:end="253:35"><name pos:start="253:35" pos:end="253:35">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <comment type="block" pos:start="259:5" pos:end="259:51">/* alloc L2 cache (max. 64k * 16 * 8 = 8 MB) */</comment>

    <expr_stmt pos:start="261:5" pos:end="265:75"><expr pos:start="261:5" pos:end="265:74"><name pos:start="261:5" pos:end="261:15"><name pos:start="261:5" pos:end="261:5">s</name><operator pos:start="261:6" pos:end="261:7">-&gt;</operator><name pos:start="261:8" pos:end="261:15">l2_cache</name></name> <operator pos:start="261:17" pos:end="261:17">=</operator>

        <call pos:start="263:9" pos:end="265:74"><name pos:start="263:9" pos:end="263:27">qemu_try_blockalign</name><argument_list pos:start="263:28" pos:end="265:74">(<argument pos:start="263:29" pos:end="263:40"><expr pos:start="263:29" pos:end="263:40"><name pos:start="263:29" pos:end="263:40"><name pos:start="263:29" pos:end="263:30">bs</name><operator pos:start="263:31" pos:end="263:32">-&gt;</operator><name pos:start="263:33" pos:end="263:36">file</name><operator pos:start="263:37" pos:end="263:38">-&gt;</operator><name pos:start="263:39" pos:end="263:40">bs</name></name></expr></argument>,

                            <argument pos:start="265:29" pos:end="265:73"><expr pos:start="265:29" pos:end="265:73"><name pos:start="265:29" pos:end="265:38"><name pos:start="265:29" pos:end="265:29">s</name><operator pos:start="265:30" pos:end="265:31">-&gt;</operator><name pos:start="265:32" pos:end="265:38">l2_size</name></name> <operator pos:start="265:40" pos:end="265:40">*</operator> <name pos:start="265:42" pos:end="265:54">L2_CACHE_SIZE</name> <operator pos:start="265:56" pos:end="265:56">*</operator> <sizeof pos:start="265:58" pos:end="265:73">sizeof<argument_list pos:start="265:64" pos:end="265:73">(<argument pos:start="265:65" pos:end="265:72"><expr pos:start="265:65" pos:end="265:72"><name pos:start="265:65" pos:end="265:72">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="267:5" pos:end="275:5"><if pos:start="267:5" pos:end="275:5">if <condition pos:start="267:8" pos:end="267:28">(<expr pos:start="267:9" pos:end="267:27"><name pos:start="267:9" pos:end="267:19"><name pos:start="267:9" pos:end="267:9">s</name><operator pos:start="267:10" pos:end="267:11">-&gt;</operator><name pos:start="267:12" pos:end="267:19">l2_cache</name></name> <operator pos:start="267:21" pos:end="267:22">==</operator> <name pos:start="267:24" pos:end="267:27">NULL</name></expr>)</condition> <block pos:start="267:30" pos:end="275:5">{<block_content pos:start="269:9" pos:end="273:18">

        <expr_stmt pos:start="269:9" pos:end="269:62"><expr pos:start="269:9" pos:end="269:61"><call pos:start="269:9" pos:end="269:61"><name pos:start="269:9" pos:end="269:18">error_setg</name><argument_list pos:start="269:19" pos:end="269:61">(<argument pos:start="269:20" pos:end="269:23"><expr pos:start="269:20" pos:end="269:23"><name pos:start="269:20" pos:end="269:23">errp</name></expr></argument>, <argument pos:start="269:26" pos:end="269:60"><expr pos:start="269:26" pos:end="269:60"><literal type="string" pos:start="269:26" pos:end="269:60">"Could not allocate L2 table cache"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="271:9" pos:end="271:22"><expr pos:start="271:9" pos:end="271:21"><name pos:start="271:9" pos:end="271:11">ret</name> <operator pos:start="271:13" pos:end="271:13">=</operator> <operator pos:start="271:15" pos:end="271:15">-</operator><name pos:start="271:16" pos:end="271:21">ENOMEM</name></expr>;</expr_stmt>

        <goto pos:start="273:9" pos:end="273:18">goto <name pos:start="273:14" pos:end="273:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="277:5" pos:end="277:49"><expr pos:start="277:5" pos:end="277:48"><name pos:start="277:5" pos:end="277:20"><name pos:start="277:5" pos:end="277:5">s</name><operator pos:start="277:6" pos:end="277:7">-&gt;</operator><name pos:start="277:8" pos:end="277:20">cluster_cache</name></name> <operator pos:start="277:22" pos:end="277:22">=</operator> <call pos:start="277:24" pos:end="277:48"><name pos:start="277:24" pos:end="277:31">g_malloc</name><argument_list pos:start="277:32" pos:end="277:48">(<argument pos:start="277:33" pos:end="277:47"><expr pos:start="277:33" pos:end="277:47"><name pos:start="277:33" pos:end="277:47"><name pos:start="277:33" pos:end="277:33">s</name><operator pos:start="277:34" pos:end="277:35">-&gt;</operator><name pos:start="277:36" pos:end="277:47">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="279:5" pos:end="279:48"><expr pos:start="279:5" pos:end="279:47"><name pos:start="279:5" pos:end="279:19"><name pos:start="279:5" pos:end="279:5">s</name><operator pos:start="279:6" pos:end="279:7">-&gt;</operator><name pos:start="279:8" pos:end="279:19">cluster_data</name></name> <operator pos:start="279:21" pos:end="279:21">=</operator> <call pos:start="279:23" pos:end="279:47"><name pos:start="279:23" pos:end="279:30">g_malloc</name><argument_list pos:start="279:31" pos:end="279:47">(<argument pos:start="279:32" pos:end="279:46"><expr pos:start="279:32" pos:end="279:46"><name pos:start="279:32" pos:end="279:46"><name pos:start="279:32" pos:end="279:32">s</name><operator pos:start="279:33" pos:end="279:34">-&gt;</operator><name pos:start="279:35" pos:end="279:46">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="281:5" pos:end="281:33"><expr pos:start="281:5" pos:end="281:32"><name pos:start="281:5" pos:end="281:27"><name pos:start="281:5" pos:end="281:5">s</name><operator pos:start="281:6" pos:end="281:7">-&gt;</operator><name pos:start="281:8" pos:end="281:27">cluster_cache_offset</name></name> <operator pos:start="281:29" pos:end="281:29">=</operator> <operator pos:start="281:31" pos:end="281:31">-</operator><literal type="number" pos:start="281:32" pos:end="281:32">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="285:5" pos:end="285:36">/* read the backing file name */</comment>

    <if_stmt pos:start="287:5" pos:end="313:5"><if pos:start="287:5" pos:end="313:5">if <condition pos:start="287:8" pos:end="287:40">(<expr pos:start="287:9" pos:end="287:39"><name pos:start="287:9" pos:end="287:34"><name pos:start="287:9" pos:end="287:14">header</name><operator pos:start="287:15" pos:end="287:15">.</operator><name pos:start="287:16" pos:end="287:34">backing_file_offset</name></name> <operator pos:start="287:36" pos:end="287:37">!=</operator> <literal type="number" pos:start="287:39" pos:end="287:39">0</literal></expr>)</condition> <block pos:start="287:42" pos:end="313:5">{<block_content pos:start="289:9" pos:end="311:37">

        <expr_stmt pos:start="289:9" pos:end="289:39"><expr pos:start="289:9" pos:end="289:38"><name pos:start="289:9" pos:end="289:11">len</name> <operator pos:start="289:13" pos:end="289:13">=</operator> <name pos:start="289:15" pos:end="289:38"><name pos:start="289:15" pos:end="289:20">header</name><operator pos:start="289:21" pos:end="289:21">.</operator><name pos:start="289:22" pos:end="289:38">backing_file_size</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="291:9" pos:end="299:9"><if pos:start="291:9" pos:end="299:9">if <condition pos:start="291:12" pos:end="291:58">(<expr pos:start="291:13" pos:end="291:57"><name pos:start="291:13" pos:end="291:15">len</name> <operator pos:start="291:17" pos:end="291:17">&gt;</operator> <literal type="number" pos:start="291:19" pos:end="291:22">1023</literal> <operator pos:start="291:24" pos:end="291:25">||</operator> <name pos:start="291:27" pos:end="291:29">len</name> <operator pos:start="291:31" pos:end="291:32">&gt;=</operator> <sizeof pos:start="291:34" pos:end="291:57">sizeof<argument_list pos:start="291:40" pos:end="291:57">(<argument pos:start="291:41" pos:end="291:56"><expr pos:start="291:41" pos:end="291:56"><name pos:start="291:41" pos:end="291:56"><name pos:start="291:41" pos:end="291:42">bs</name><operator pos:start="291:43" pos:end="291:44">-&gt;</operator><name pos:start="291:45" pos:end="291:56">backing_file</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="291:60" pos:end="299:9">{<block_content pos:start="293:13" pos:end="297:22">

            <expr_stmt pos:start="293:13" pos:end="293:59"><expr pos:start="293:13" pos:end="293:58"><call pos:start="293:13" pos:end="293:58"><name pos:start="293:13" pos:end="293:22">error_setg</name><argument_list pos:start="293:23" pos:end="293:58">(<argument pos:start="293:24" pos:end="293:27"><expr pos:start="293:24" pos:end="293:27"><name pos:start="293:24" pos:end="293:27">errp</name></expr></argument>, <argument pos:start="293:30" pos:end="293:57"><expr pos:start="293:30" pos:end="293:57"><literal type="string" pos:start="293:30" pos:end="293:57">"Backing file name too long"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="295:13" pos:end="295:26"><expr pos:start="295:13" pos:end="295:25"><name pos:start="295:13" pos:end="295:15">ret</name> <operator pos:start="295:17" pos:end="295:17">=</operator> <operator pos:start="295:19" pos:end="295:19">-</operator><name pos:start="295:20" pos:end="295:25">EINVAL</name></expr>;</expr_stmt>

            <goto pos:start="297:13" pos:end="297:22">goto <name pos:start="297:18" pos:end="297:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="303:42"><expr pos:start="301:9" pos:end="303:41"><name pos:start="301:9" pos:end="301:11">ret</name> <operator pos:start="301:13" pos:end="301:13">=</operator> <call pos:start="301:15" pos:end="303:41"><name pos:start="301:15" pos:end="301:24">bdrv_pread</name><argument_list pos:start="301:25" pos:end="303:41">(<argument pos:start="301:26" pos:end="301:33"><expr pos:start="301:26" pos:end="301:33"><name pos:start="301:26" pos:end="301:33"><name pos:start="301:26" pos:end="301:27">bs</name><operator pos:start="301:28" pos:end="301:29">-&gt;</operator><name pos:start="301:30" pos:end="301:33">file</name></name></expr></argument>, <argument pos:start="301:36" pos:end="301:61"><expr pos:start="301:36" pos:end="301:61"><name pos:start="301:36" pos:end="301:61"><name pos:start="301:36" pos:end="301:41">header</name><operator pos:start="301:42" pos:end="301:42">.</operator><name pos:start="301:43" pos:end="301:61">backing_file_offset</name></name></expr></argument>,

                   <argument pos:start="303:20" pos:end="303:35"><expr pos:start="303:20" pos:end="303:35"><name pos:start="303:20" pos:end="303:35"><name pos:start="303:20" pos:end="303:21">bs</name><operator pos:start="303:22" pos:end="303:23">-&gt;</operator><name pos:start="303:24" pos:end="303:35">backing_file</name></name></expr></argument>, <argument pos:start="303:38" pos:end="303:40"><expr pos:start="303:38" pos:end="303:40"><name pos:start="303:38" pos:end="303:40">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="305:9" pos:end="309:9"><if pos:start="305:9" pos:end="309:9">if <condition pos:start="305:12" pos:end="305:20">(<expr pos:start="305:13" pos:end="305:19"><name pos:start="305:13" pos:end="305:15">ret</name> <operator pos:start="305:17" pos:end="305:17">&lt;</operator> <literal type="number" pos:start="305:19" pos:end="305:19">0</literal></expr>)</condition> <block pos:start="305:22" pos:end="309:9">{<block_content pos:start="307:13" pos:end="307:22">

            <goto pos:start="307:13" pos:end="307:22">goto <name pos:start="307:18" pos:end="307:21">fail</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="311:9" pos:end="311:37"><expr pos:start="311:9" pos:end="311:36"><name pos:start="311:9" pos:end="311:29"><name pos:start="311:9" pos:end="311:10">bs</name><operator pos:start="311:11" pos:end="311:12">-&gt;</operator><name pos:start="311:13" pos:end="311:24">backing_file</name><index pos:start="311:25" pos:end="311:29">[<expr pos:start="311:26" pos:end="311:28"><name pos:start="311:26" pos:end="311:28">len</name></expr>]</index></name> <operator pos:start="311:31" pos:end="311:31">=</operator> <literal type="char" pos:start="311:33" pos:end="311:36">'\0'</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="317:5" pos:end="317:53">/* Disable migration when qcow images are used */</comment>

    <expr_stmt pos:start="319:5" pos:end="323:49"><expr pos:start="319:5" pos:end="323:48"><call pos:start="319:5" pos:end="323:48"><name pos:start="319:5" pos:end="319:14">error_setg</name><argument_list pos:start="319:15" pos:end="323:48">(<argument pos:start="319:16" pos:end="319:36"><expr pos:start="319:16" pos:end="319:36"><operator pos:start="319:16" pos:end="319:16">&amp;</operator><name pos:start="319:17" pos:end="319:36"><name pos:start="319:17" pos:end="319:17">s</name><operator pos:start="319:18" pos:end="319:19">-&gt;</operator><name pos:start="319:20" pos:end="319:36">migration_blocker</name></name></expr></argument>, <argument pos:start="319:39" pos:end="321:48"><expr pos:start="319:39" pos:end="321:48"><literal type="string" pos:start="319:39" pos:end="319:74">"The qcow format used by node '%s' "</literal>

               <literal type="string" pos:start="321:16" pos:end="321:48">"does not support live migration"</literal></expr></argument>,

               <argument pos:start="323:16" pos:end="323:47"><expr pos:start="323:16" pos:end="323:47"><call pos:start="323:16" pos:end="323:47"><name pos:start="323:16" pos:end="323:43">bdrv_get_device_or_node_name</name><argument_list pos:start="323:44" pos:end="323:47">(<argument pos:start="323:45" pos:end="323:46"><expr pos:start="323:45" pos:end="323:46"><name pos:start="323:45" pos:end="323:46">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="325:5" pos:end="325:64"><expr pos:start="325:5" pos:end="325:63"><name pos:start="325:5" pos:end="325:7">ret</name> <operator pos:start="325:9" pos:end="325:9">=</operator> <call pos:start="325:11" pos:end="325:63"><name pos:start="325:11" pos:end="325:29">migrate_add_blocker</name><argument_list pos:start="325:30" pos:end="325:63">(<argument pos:start="325:31" pos:end="325:50"><expr pos:start="325:31" pos:end="325:50"><name pos:start="325:31" pos:end="325:50"><name pos:start="325:31" pos:end="325:31">s</name><operator pos:start="325:32" pos:end="325:33">-&gt;</operator><name pos:start="325:34" pos:end="325:50">migration_blocker</name></name></expr></argument>, <argument pos:start="325:53" pos:end="325:62"><expr pos:start="325:53" pos:end="325:62"><operator pos:start="325:53" pos:end="325:53">&amp;</operator><name pos:start="325:54" pos:end="325:62">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="327:5" pos:end="335:5"><if pos:start="327:5" pos:end="335:5">if <condition pos:start="327:8" pos:end="327:18">(<expr pos:start="327:9" pos:end="327:17"><name pos:start="327:9" pos:end="327:17">local_err</name></expr>)</condition> <block pos:start="327:20" pos:end="335:5">{<block_content pos:start="329:9" pos:end="333:18">

        <expr_stmt pos:start="329:9" pos:end="329:41"><expr pos:start="329:9" pos:end="329:40"><call pos:start="329:9" pos:end="329:40"><name pos:start="329:9" pos:end="329:23">error_propagate</name><argument_list pos:start="329:24" pos:end="329:40">(<argument pos:start="329:25" pos:end="329:28"><expr pos:start="329:25" pos:end="329:28"><name pos:start="329:25" pos:end="329:28">errp</name></expr></argument>, <argument pos:start="329:31" pos:end="329:39"><expr pos:start="329:31" pos:end="329:39"><name pos:start="329:31" pos:end="329:39">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="331:9" pos:end="331:41"><expr pos:start="331:9" pos:end="331:40"><call pos:start="331:9" pos:end="331:40"><name pos:start="331:9" pos:end="331:18">error_free</name><argument_list pos:start="331:19" pos:end="331:40">(<argument pos:start="331:20" pos:end="331:39"><expr pos:start="331:20" pos:end="331:39"><name pos:start="331:20" pos:end="331:39"><name pos:start="331:20" pos:end="331:20">s</name><operator pos:start="331:21" pos:end="331:22">-&gt;</operator><name pos:start="331:23" pos:end="331:39">migration_blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="333:9" pos:end="333:18">goto <name pos:start="333:14" pos:end="333:17">fail</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="339:5" pos:end="339:33"><expr pos:start="339:5" pos:end="339:32"><call pos:start="339:5" pos:end="339:32"><name pos:start="339:5" pos:end="339:22">qemu_co_mutex_init</name><argument_list pos:start="339:23" pos:end="339:32">(<argument pos:start="339:24" pos:end="339:31"><expr pos:start="339:24" pos:end="339:31"><operator pos:start="339:24" pos:end="339:24">&amp;</operator><name pos:start="339:25" pos:end="339:31"><name pos:start="339:25" pos:end="339:25">s</name><operator pos:start="339:26" pos:end="339:27">-&gt;</operator><name pos:start="339:28" pos:end="339:31">lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="341:5" pos:end="341:13">return <expr pos:start="341:12" pos:end="341:12"><literal type="number" pos:start="341:12" pos:end="341:12">0</literal></expr>;</return>



 <label pos:start="345:2" pos:end="345:6"><name pos:start="345:2" pos:end="345:5">fail</name>:</label>

    <expr_stmt pos:start="347:5" pos:end="347:24"><expr pos:start="347:5" pos:end="347:23"><call pos:start="347:5" pos:end="347:23"><name pos:start="347:5" pos:end="347:10">g_free</name><argument_list pos:start="347:11" pos:end="347:23">(<argument pos:start="347:12" pos:end="347:22"><expr pos:start="347:12" pos:end="347:22"><name pos:start="347:12" pos:end="347:22"><name pos:start="347:12" pos:end="347:12">s</name><operator pos:start="347:13" pos:end="347:14">-&gt;</operator><name pos:start="347:15" pos:end="347:22">l1_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="349:5" pos:end="349:28"><expr pos:start="349:5" pos:end="349:27"><call pos:start="349:5" pos:end="349:27"><name pos:start="349:5" pos:end="349:14">qemu_vfree</name><argument_list pos:start="349:15" pos:end="349:27">(<argument pos:start="349:16" pos:end="349:26"><expr pos:start="349:16" pos:end="349:26"><name pos:start="349:16" pos:end="349:26"><name pos:start="349:16" pos:end="349:16">s</name><operator pos:start="349:17" pos:end="349:18">-&gt;</operator><name pos:start="349:19" pos:end="349:26">l2_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="351:5" pos:end="351:29"><expr pos:start="351:5" pos:end="351:28"><call pos:start="351:5" pos:end="351:28"><name pos:start="351:5" pos:end="351:10">g_free</name><argument_list pos:start="351:11" pos:end="351:28">(<argument pos:start="351:12" pos:end="351:27"><expr pos:start="351:12" pos:end="351:27"><name pos:start="351:12" pos:end="351:27"><name pos:start="351:12" pos:end="351:12">s</name><operator pos:start="351:13" pos:end="351:14">-&gt;</operator><name pos:start="351:15" pos:end="351:27">cluster_cache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="353:5" pos:end="353:28"><expr pos:start="353:5" pos:end="353:27"><call pos:start="353:5" pos:end="353:27"><name pos:start="353:5" pos:end="353:10">g_free</name><argument_list pos:start="353:11" pos:end="353:27">(<argument pos:start="353:12" pos:end="353:26"><expr pos:start="353:12" pos:end="353:26"><name pos:start="353:12" pos:end="353:26"><name pos:start="353:12" pos:end="353:12">s</name><operator pos:start="353:13" pos:end="353:14">-&gt;</operator><name pos:start="353:15" pos:end="353:26">cluster_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="355:5" pos:end="355:15">return <expr pos:start="355:12" pos:end="355:14"><name pos:start="355:12" pos:end="355:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
