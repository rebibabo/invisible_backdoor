<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25009.c" pos:tabs="8"><function pos:start="1:1" pos:end="271:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">qcow_create2</name><parameter_list pos:start="1:24" pos:end="5:69">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><specifier pos:start="1:25" pos:end="1:29">const</specifier> <name pos:start="1:31" pos:end="1:34">char</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:44">filename</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:64"><decl pos:start="1:47" pos:end="1:64"><type pos:start="1:47" pos:end="1:64"><name pos:start="1:47" pos:end="1:53">int64_t</name></type> <name pos:start="1:55" pos:end="1:64">total_size</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:48"><decl pos:start="3:25" pos:end="3:48"><type pos:start="3:25" pos:end="3:48"><specifier pos:start="3:25" pos:end="3:29">const</specifier> <name pos:start="3:31" pos:end="3:34">char</name> <modifier pos:start="3:36" pos:end="3:36">*</modifier></type><name pos:start="3:37" pos:end="3:48">backing_file</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:76"><decl pos:start="3:51" pos:end="3:76"><type pos:start="3:51" pos:end="3:76"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:60">char</name> <modifier pos:start="3:62" pos:end="3:62">*</modifier></type><name pos:start="3:63" pos:end="3:76">backing_format</name></decl></parameter>,

                        <parameter pos:start="5:25" pos:end="5:33"><decl pos:start="5:25" pos:end="5:33"><type pos:start="5:25" pos:end="5:33"><name pos:start="5:25" pos:end="5:27">int</name></type> <name pos:start="5:29" pos:end="5:33">flags</name></decl></parameter>, <parameter pos:start="5:36" pos:end="5:54"><decl pos:start="5:36" pos:end="5:54"><type pos:start="5:36" pos:end="5:54"><name pos:start="5:36" pos:end="5:41">size_t</name></type> <name pos:start="5:43" pos:end="5:54">cluster_size</name></decl></parameter>, <parameter pos:start="5:57" pos:end="5:68"><decl pos:start="5:57" pos:end="5:68"><type pos:start="5:57" pos:end="5:68"><name pos:start="5:57" pos:end="5:59">int</name></type> <name pos:start="5:61" pos:end="5:68">prealloc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="271:1">{<block_content pos:start="11:5" pos:end="269:13">



    <decl_stmt pos:start="11:5" pos:end="11:74"><decl pos:start="11:5" pos:end="11:10"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:10">fd</name></decl>, <decl pos:start="11:13" pos:end="11:23"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:13" pos:end="11:23">header_size</name></decl>, <decl pos:start="11:26" pos:end="11:45"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:26" pos:end="11:45">backing_filename_len</name></decl>, <decl pos:start="11:48" pos:end="11:54"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:48" pos:end="11:54">l1_size</name></decl>, <decl pos:start="11:57" pos:end="11:57"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:57" pos:end="11:57">i</name></decl>, <decl pos:start="11:60" pos:end="11:64"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:60" pos:end="11:64">shift</name></decl>, <decl pos:start="11:67" pos:end="11:73"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:67" pos:end="11:73">l2_bits</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:45"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">ref_clusters</name></decl>, <decl pos:start="13:23" pos:end="13:44"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:23" pos:end="13:40">backing_format_len</name> <init pos:start="13:42" pos:end="13:44">= <expr pos:start="13:44" pos:end="13:44"><literal type="number" pos:start="13:44" pos:end="13:44">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:14"><name pos:start="15:5" pos:end="15:14">QCowHeader</name></type> <name pos:start="15:16" pos:end="15:21">header</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:25"><decl pos:start="17:5" pos:end="17:16"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:16">tmp</name></decl>, <decl pos:start="17:19" pos:end="17:24"><type ref="prev" pos:start="17:5" pos:end="17:12"/><name pos:start="17:19" pos:end="17:24">offset</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:22"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:19">QCowCreateState</name></type> <name pos:start="19:21" pos:end="19:22">s1</name></decl>, <decl pos:start="19:25" pos:end="19:32"><type ref="prev" pos:start="19:5" pos:end="19:19"><modifier pos:start="19:25" pos:end="19:25">*</modifier></type><name pos:start="19:26" pos:end="19:26">s</name> <init pos:start="19:28" pos:end="19:32">= <expr pos:start="19:30" pos:end="19:32"><operator pos:start="19:30" pos:end="19:30">&amp;</operator><name pos:start="19:31" pos:end="19:32">s1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:34"><decl pos:start="21:5" pos:end="21:33"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:17">QCowExtension</name></type> <name pos:start="21:19" pos:end="21:24">ext_bf</name> <init pos:start="21:26" pos:end="21:33">= <expr pos:start="21:28" pos:end="21:33"><block pos:start="21:28" pos:end="21:33">{<expr pos:start="21:29" pos:end="21:29"><literal type="number" pos:start="21:29" pos:end="21:29">0</literal></expr>, <expr pos:start="21:32" pos:end="21:32"><literal type="number" pos:start="21:32" pos:end="21:32">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>





    <expr_stmt pos:start="27:5" pos:end="27:29"><expr pos:start="27:5" pos:end="27:28"><call pos:start="27:5" pos:end="27:28"><name pos:start="27:5" pos:end="27:10">memset</name><argument_list pos:start="27:11" pos:end="27:28">(<argument pos:start="27:12" pos:end="27:12"><expr pos:start="27:12" pos:end="27:12"><name pos:start="27:12" pos:end="27:12">s</name></expr></argument>, <argument pos:start="27:15" pos:end="27:15"><expr pos:start="27:15" pos:end="27:15"><literal type="number" pos:start="27:15" pos:end="27:15">0</literal></expr></argument>, <argument pos:start="27:18" pos:end="27:27"><expr pos:start="27:18" pos:end="27:27"><sizeof pos:start="27:18" pos:end="27:27">sizeof<argument_list pos:start="27:24" pos:end="27:27">(<argument pos:start="27:25" pos:end="27:26"><expr pos:start="27:25" pos:end="27:26"><operator pos:start="27:25" pos:end="27:25">*</operator><name pos:start="27:26" pos:end="27:26">s</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:71"><expr pos:start="31:5" pos:end="31:70"><name pos:start="31:5" pos:end="31:6">fd</name> <operator pos:start="31:8" pos:end="31:8">=</operator> <call pos:start="31:10" pos:end="31:70"><name pos:start="31:10" pos:end="31:13">open</name><argument_list pos:start="31:14" pos:end="31:70">(<argument pos:start="31:15" pos:end="31:22"><expr pos:start="31:15" pos:end="31:22"><name pos:start="31:15" pos:end="31:22">filename</name></expr></argument>, <argument pos:start="31:25" pos:end="31:63"><expr pos:start="31:25" pos:end="31:63"><name pos:start="31:25" pos:end="31:32">O_WRONLY</name> <operator pos:start="31:34" pos:end="31:34">|</operator> <name pos:start="31:36" pos:end="31:42">O_CREAT</name> <operator pos:start="31:44" pos:end="31:44">|</operator> <name pos:start="31:46" pos:end="31:52">O_TRUNC</name> <operator pos:start="31:54" pos:end="31:54">|</operator> <name pos:start="31:56" pos:end="31:63">O_BINARY</name></expr></argument>, <argument pos:start="31:66" pos:end="31:69"><expr pos:start="31:66" pos:end="31:69"><literal type="number" pos:start="31:66" pos:end="31:69">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="35:18"><if pos:start="33:5" pos:end="35:18">if <condition pos:start="33:8" pos:end="33:15">(<expr pos:start="33:9" pos:end="33:14"><name pos:start="33:9" pos:end="33:10">fd</name> <operator pos:start="33:12" pos:end="33:12">&lt;</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>)</condition><block type="pseudo" pos:start="35:9" pos:end="35:18"><block_content pos:start="35:9" pos:end="35:18">

        <return pos:start="35:9" pos:end="35:18">return <expr pos:start="35:16" pos:end="35:17"><operator pos:start="35:16" pos:end="35:16">-</operator><literal type="number" pos:start="35:17" pos:end="35:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:39"><expr pos:start="37:5" pos:end="37:38"><call pos:start="37:5" pos:end="37:38"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:38">(<argument pos:start="37:12" pos:end="37:18"><expr pos:start="37:12" pos:end="37:18"><operator pos:start="37:12" pos:end="37:12">&amp;</operator><name pos:start="37:13" pos:end="37:18">header</name></expr></argument>, <argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><literal type="number" pos:start="37:21" pos:end="37:21">0</literal></expr></argument>, <argument pos:start="37:24" pos:end="37:37"><expr pos:start="37:24" pos:end="37:37"><sizeof pos:start="37:24" pos:end="37:37">sizeof<argument_list pos:start="37:30" pos:end="37:37">(<argument pos:start="37:31" pos:end="37:36"><expr pos:start="37:31" pos:end="37:36"><name pos:start="37:31" pos:end="37:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:43"><expr pos:start="39:5" pos:end="39:42"><name pos:start="39:5" pos:end="39:16"><name pos:start="39:5" pos:end="39:10">header</name><operator pos:start="39:11" pos:end="39:11">.</operator><name pos:start="39:12" pos:end="39:16">magic</name></name> <operator pos:start="39:18" pos:end="39:18">=</operator> <call pos:start="39:20" pos:end="39:42"><name pos:start="39:20" pos:end="39:30">cpu_to_be32</name><argument_list pos:start="39:31" pos:end="39:42">(<argument pos:start="39:32" pos:end="39:41"><expr pos:start="39:32" pos:end="39:41"><name pos:start="39:32" pos:end="39:41">QCOW_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:47"><expr pos:start="41:5" pos:end="41:46"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:10">header</name><operator pos:start="41:11" pos:end="41:11">.</operator><name pos:start="41:12" pos:end="41:18">version</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <call pos:start="41:22" pos:end="41:46"><name pos:start="41:22" pos:end="41:32">cpu_to_be32</name><argument_list pos:start="41:33" pos:end="41:46">(<argument pos:start="41:34" pos:end="41:45"><expr pos:start="41:34" pos:end="41:45"><name pos:start="41:34" pos:end="41:45">QCOW_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:48"><expr pos:start="43:5" pos:end="43:47"><name pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:10">header</name><operator pos:start="43:11" pos:end="43:11">.</operator><name pos:start="43:12" pos:end="43:15">size</name></name> <operator pos:start="43:17" pos:end="43:17">=</operator> <call pos:start="43:19" pos:end="43:47"><name pos:start="43:19" pos:end="43:29">cpu_to_be64</name><argument_list pos:start="43:30" pos:end="43:47">(<argument pos:start="43:31" pos:end="43:46"><expr pos:start="43:31" pos:end="43:46"><name pos:start="43:31" pos:end="43:40">total_size</name> <operator pos:start="43:42" pos:end="43:42">*</operator> <literal type="number" pos:start="43:44" pos:end="43:46">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:33"><expr pos:start="45:5" pos:end="45:32"><name pos:start="45:5" pos:end="45:15">header_size</name> <operator pos:start="45:17" pos:end="45:17">=</operator> <sizeof pos:start="45:19" pos:end="45:32">sizeof<argument_list pos:start="45:25" pos:end="45:32">(<argument pos:start="45:26" pos:end="45:31"><expr pos:start="45:26" pos:end="45:31"><name pos:start="45:26" pos:end="45:31">header</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:29"><expr pos:start="47:5" pos:end="47:28"><name pos:start="47:5" pos:end="47:24">backing_filename_len</name> <operator pos:start="47:26" pos:end="47:26">=</operator> <literal type="number" pos:start="47:28" pos:end="47:28">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="49:5" pos:end="71:5"><if pos:start="49:5" pos:end="71:5">if <condition pos:start="49:8" pos:end="49:21">(<expr pos:start="49:9" pos:end="49:20"><name pos:start="49:9" pos:end="49:20">backing_file</name></expr>)</condition> <block pos:start="49:23" pos:end="71:5">{<block_content pos:start="51:9" pos:end="69:44">

        <if_stmt pos:start="51:9" pos:end="61:9"><if pos:start="51:9" pos:end="61:9">if <condition pos:start="51:12" pos:end="51:27">(<expr pos:start="51:13" pos:end="51:26"><name pos:start="51:13" pos:end="51:26">backing_format</name></expr>)</condition> <block pos:start="51:29" pos:end="61:9">{<block_content pos:start="53:13" pos:end="59:68">

            <expr_stmt pos:start="53:13" pos:end="53:57"><expr pos:start="53:13" pos:end="53:56"><name pos:start="53:13" pos:end="53:24"><name pos:start="53:13" pos:end="53:18">ext_bf</name><operator pos:start="53:19" pos:end="53:19">.</operator><name pos:start="53:20" pos:end="53:24">magic</name></name> <operator pos:start="53:26" pos:end="53:26">=</operator> <name pos:start="53:28" pos:end="53:56">QCOW_EXT_MAGIC_BACKING_FORMAT</name></expr>;</expr_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:56"><expr pos:start="55:13" pos:end="55:55"><name pos:start="55:13" pos:end="55:30">backing_format_len</name> <operator pos:start="55:32" pos:end="55:32">=</operator> <call pos:start="55:34" pos:end="55:55"><name pos:start="55:34" pos:end="55:39">strlen</name><argument_list pos:start="55:40" pos:end="55:55">(<argument pos:start="55:41" pos:end="55:54"><expr pos:start="55:41" pos:end="55:54"><name pos:start="55:41" pos:end="55:54">backing_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="57:13" pos:end="57:55"><expr pos:start="57:13" pos:end="57:54"><name pos:start="57:13" pos:end="57:22"><name pos:start="57:13" pos:end="57:18">ext_bf</name><operator pos:start="57:19" pos:end="57:19">.</operator><name pos:start="57:20" pos:end="57:22">len</name></name> <operator pos:start="57:24" pos:end="57:24">=</operator> <operator pos:start="57:26" pos:end="57:26">(</operator><name pos:start="57:27" pos:end="57:44">backing_format_len</name> <operator pos:start="57:46" pos:end="57:46">+</operator> <literal type="number" pos:start="57:48" pos:end="57:48">7</literal><operator pos:start="57:49" pos:end="57:49">)</operator> <operator pos:start="57:51" pos:end="57:51">&amp;</operator> <operator pos:start="57:53" pos:end="57:53">~</operator><literal type="number" pos:start="57:54" pos:end="57:54">7</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="59:13" pos:end="59:68"><expr pos:start="59:13" pos:end="59:67"><name pos:start="59:13" pos:end="59:23">header_size</name> <operator pos:start="59:25" pos:end="59:26">+=</operator> <operator pos:start="59:28" pos:end="59:28">(</operator><operator pos:start="59:29" pos:end="59:29">(</operator><sizeof pos:start="59:30" pos:end="59:43">sizeof<argument_list pos:start="59:36" pos:end="59:43">(<argument pos:start="59:37" pos:end="59:42"><expr pos:start="59:37" pos:end="59:42"><name pos:start="59:37" pos:end="59:42">ext_bf</name></expr></argument>)</argument_list></sizeof> <operator pos:start="59:45" pos:end="59:45">+</operator> <name pos:start="59:47" pos:end="59:56"><name pos:start="59:47" pos:end="59:52">ext_bf</name><operator pos:start="59:53" pos:end="59:53">.</operator><name pos:start="59:54" pos:end="59:56">len</name></name> <operator pos:start="59:58" pos:end="59:58">+</operator> <literal type="number" pos:start="59:60" pos:end="59:60">7</literal><operator pos:start="59:61" pos:end="59:61">)</operator> <operator pos:start="59:63" pos:end="59:63">&amp;</operator> <operator pos:start="59:65" pos:end="59:65">~</operator><literal type="number" pos:start="59:66" pos:end="59:66">7</literal><operator pos:start="59:67" pos:end="59:67">)</operator></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:62"><expr pos:start="63:9" pos:end="63:61"><name pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:14">header</name><operator pos:start="63:15" pos:end="63:15">.</operator><name pos:start="63:16" pos:end="63:34">backing_file_offset</name></name> <operator pos:start="63:36" pos:end="63:36">=</operator> <call pos:start="63:38" pos:end="63:61"><name pos:start="63:38" pos:end="63:48">cpu_to_be64</name><argument_list pos:start="63:49" pos:end="63:61">(<argument pos:start="63:50" pos:end="63:60"><expr pos:start="63:50" pos:end="63:60"><name pos:start="63:50" pos:end="63:60">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:52"><expr pos:start="65:9" pos:end="65:51"><name pos:start="65:9" pos:end="65:28">backing_filename_len</name> <operator pos:start="65:30" pos:end="65:30">=</operator> <call pos:start="65:32" pos:end="65:51"><name pos:start="65:32" pos:end="65:37">strlen</name><argument_list pos:start="65:38" pos:end="65:51">(<argument pos:start="65:39" pos:end="65:50"><expr pos:start="65:39" pos:end="65:50"><name pos:start="65:39" pos:end="65:50">backing_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:69"><expr pos:start="67:9" pos:end="67:68"><name pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:14">header</name><operator pos:start="67:15" pos:end="67:15">.</operator><name pos:start="67:16" pos:end="67:32">backing_file_size</name></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <call pos:start="67:36" pos:end="67:68"><name pos:start="67:36" pos:end="67:46">cpu_to_be32</name><argument_list pos:start="67:47" pos:end="67:68">(<argument pos:start="67:48" pos:end="67:67"><expr pos:start="67:48" pos:end="67:67"><name pos:start="67:48" pos:end="67:67">backing_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:44"><expr pos:start="69:9" pos:end="69:43"><name pos:start="69:9" pos:end="69:19">header_size</name> <operator pos:start="69:21" pos:end="69:22">+=</operator> <name pos:start="69:24" pos:end="69:43">backing_filename_len</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="75:5" pos:end="75:22">/* Cluster size */</comment>

    <expr_stmt pos:start="77:5" pos:end="77:55"><expr pos:start="77:5" pos:end="77:54"><name pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:5">s</name><operator pos:start="77:6" pos:end="77:7">-&gt;</operator><name pos:start="77:8" pos:end="77:19">cluster_bits</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <call pos:start="77:23" pos:end="77:54"><name pos:start="77:23" pos:end="77:40">get_bits_from_size</name><argument_list pos:start="77:41" pos:end="77:54">(<argument pos:start="77:42" pos:end="77:53"><expr pos:start="77:42" pos:end="77:53"><name pos:start="77:42" pos:end="77:53">cluster_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="79:5" pos:end="95:5"><if pos:start="79:5" pos:end="95:5">if <condition pos:start="79:8" pos:end="81:43">(<expr pos:start="79:9" pos:end="81:42"><name pos:start="79:9" pos:end="79:23"><name pos:start="79:9" pos:end="79:9">s</name><operator pos:start="79:10" pos:end="79:11">-&gt;</operator><name pos:start="79:12" pos:end="79:23">cluster_bits</name></name> <operator pos:start="79:25" pos:end="79:25">&lt;</operator> <name pos:start="79:27" pos:end="79:42">MIN_CLUSTER_BITS</name> <operator pos:start="79:44" pos:end="79:45">||</operator>

        <name pos:start="81:9" pos:end="81:23"><name pos:start="81:9" pos:end="81:9">s</name><operator pos:start="81:10" pos:end="81:11">-&gt;</operator><name pos:start="81:12" pos:end="81:23">cluster_bits</name></name> <operator pos:start="81:25" pos:end="81:25">&gt;</operator> <name pos:start="81:27" pos:end="81:42">MAX_CLUSTER_BITS</name></expr>)</condition>

    <block pos:start="83:5" pos:end="95:5">{<block_content pos:start="85:9" pos:end="93:23">

        <expr_stmt pos:start="85:9" pos:end="91:42"><expr pos:start="85:9" pos:end="91:41"><call pos:start="85:9" pos:end="91:41"><name pos:start="85:9" pos:end="85:15">fprintf</name><argument_list pos:start="85:16" pos:end="91:41">(<argument pos:start="85:17" pos:end="85:22"><expr pos:start="85:17" pos:end="85:22"><name pos:start="85:17" pos:end="85:22">stderr</name></expr></argument>, <argument pos:start="85:25" pos:end="87:26"><expr pos:start="85:25" pos:end="87:26"><literal type="string" pos:start="85:25" pos:end="85:70">"Cluster size must be a power of two between "</literal>

            <literal type="string" pos:start="87:13" pos:end="87:26">"%d and %dk\n"</literal></expr></argument>,

            <argument pos:start="89:13" pos:end="89:33"><expr pos:start="89:13" pos:end="89:33"><literal type="number" pos:start="89:13" pos:end="89:13">1</literal> <operator pos:start="89:15" pos:end="89:16">&lt;&lt;</operator> <name pos:start="89:18" pos:end="89:33">MIN_CLUSTER_BITS</name></expr></argument>,

            <argument pos:start="91:13" pos:end="91:40"><expr pos:start="91:13" pos:end="91:40"><literal type="number" pos:start="91:13" pos:end="91:13">1</literal> <operator pos:start="91:15" pos:end="91:16">&lt;&lt;</operator> <operator pos:start="91:18" pos:end="91:18">(</operator><name pos:start="91:19" pos:end="91:34">MAX_CLUSTER_BITS</name> <operator pos:start="91:36" pos:end="91:36">-</operator> <literal type="number" pos:start="91:38" pos:end="91:39">10</literal><operator pos:start="91:40" pos:end="91:40">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="93:9" pos:end="93:23">return <expr pos:start="93:16" pos:end="93:22"><operator pos:start="93:16" pos:end="93:16">-</operator><name pos:start="93:17" pos:end="93:22">EINVAL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:43"><expr pos:start="97:5" pos:end="97:42"><name pos:start="97:5" pos:end="97:19"><name pos:start="97:5" pos:end="97:5">s</name><operator pos:start="97:6" pos:end="97:7">-&gt;</operator><name pos:start="97:8" pos:end="97:19">cluster_size</name></name> <operator pos:start="97:21" pos:end="97:21">=</operator> <literal type="number" pos:start="97:23" pos:end="97:23">1</literal> <operator pos:start="97:25" pos:end="97:26">&lt;&lt;</operator> <name pos:start="97:28" pos:end="97:42"><name pos:start="97:28" pos:end="97:28">s</name><operator pos:start="97:29" pos:end="97:30">-&gt;</operator><name pos:start="97:31" pos:end="97:42">cluster_bits</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:55"><expr pos:start="101:5" pos:end="101:54"><name pos:start="101:5" pos:end="101:23"><name pos:start="101:5" pos:end="101:10">header</name><operator pos:start="101:11" pos:end="101:11">.</operator><name pos:start="101:12" pos:end="101:23">cluster_bits</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <call pos:start="101:27" pos:end="101:54"><name pos:start="101:27" pos:end="101:37">cpu_to_be32</name><argument_list pos:start="101:38" pos:end="101:54">(<argument pos:start="101:39" pos:end="101:53"><expr pos:start="101:39" pos:end="101:53"><name pos:start="101:39" pos:end="101:53"><name pos:start="101:39" pos:end="101:39">s</name><operator pos:start="101:40" pos:end="101:41">-&gt;</operator><name pos:start="101:42" pos:end="101:53">cluster_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:41"><expr pos:start="103:5" pos:end="103:40"><name pos:start="103:5" pos:end="103:15">header_size</name> <operator pos:start="103:17" pos:end="103:17">=</operator> <operator pos:start="103:19" pos:end="103:19">(</operator><name pos:start="103:20" pos:end="103:30">header_size</name> <operator pos:start="103:32" pos:end="103:32">+</operator> <literal type="number" pos:start="103:34" pos:end="103:34">7</literal><operator pos:start="103:35" pos:end="103:35">)</operator> <operator pos:start="103:37" pos:end="103:37">&amp;</operator> <operator pos:start="103:39" pos:end="103:39">~</operator><literal type="number" pos:start="103:40" pos:end="103:40">7</literal></expr>;</expr_stmt>

    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:35">(<expr pos:start="105:9" pos:end="105:34"><name pos:start="105:9" pos:end="105:13">flags</name> <operator pos:start="105:15" pos:end="105:15">&amp;</operator> <name pos:start="105:17" pos:end="105:34">BLOCK_FLAG_ENCRYPT</name></expr>)</condition> <block pos:start="105:37" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:58">

        <expr_stmt pos:start="107:9" pos:end="107:58"><expr pos:start="107:9" pos:end="107:57"><name pos:start="107:9" pos:end="107:27"><name pos:start="107:9" pos:end="107:14">header</name><operator pos:start="107:15" pos:end="107:15">.</operator><name pos:start="107:16" pos:end="107:27">crypt_method</name></name> <operator pos:start="107:29" pos:end="107:29">=</operator> <call pos:start="107:31" pos:end="107:57"><name pos:start="107:31" pos:end="107:41">cpu_to_be32</name><argument_list pos:start="107:42" pos:end="107:57">(<argument pos:start="107:43" pos:end="107:56"><expr pos:start="107:43" pos:end="107:56"><name pos:start="107:43" pos:end="107:56">QCOW_CRYPT_AES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="109:7" pos:end="113:5">else <block pos:start="109:12" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:59">

        <expr_stmt pos:start="111:9" pos:end="111:59"><expr pos:start="111:9" pos:end="111:58"><name pos:start="111:9" pos:end="111:27"><name pos:start="111:9" pos:end="111:14">header</name><operator pos:start="111:15" pos:end="111:15">.</operator><name pos:start="111:16" pos:end="111:27">crypt_method</name></name> <operator pos:start="111:29" pos:end="111:29">=</operator> <call pos:start="111:31" pos:end="111:58"><name pos:start="111:31" pos:end="111:41">cpu_to_be32</name><argument_list pos:start="111:42" pos:end="111:58">(<argument pos:start="111:43" pos:end="111:57"><expr pos:start="111:43" pos:end="111:57"><name pos:start="111:43" pos:end="111:57">QCOW_CRYPT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:34"><expr pos:start="115:5" pos:end="115:33"><name pos:start="115:5" pos:end="115:11">l2_bits</name> <operator pos:start="115:13" pos:end="115:13">=</operator> <name pos:start="115:15" pos:end="115:29"><name pos:start="115:15" pos:end="115:15">s</name><operator pos:start="115:16" pos:end="115:17">-&gt;</operator><name pos:start="115:18" pos:end="115:29">cluster_bits</name></name> <operator pos:start="115:31" pos:end="115:31">-</operator> <literal type="number" pos:start="115:33" pos:end="115:33">3</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:38"><expr pos:start="117:5" pos:end="117:37"><name pos:start="117:5" pos:end="117:9">shift</name> <operator pos:start="117:11" pos:end="117:11">=</operator> <name pos:start="117:13" pos:end="117:27"><name pos:start="117:13" pos:end="117:13">s</name><operator pos:start="117:14" pos:end="117:15">-&gt;</operator><name pos:start="117:16" pos:end="117:27">cluster_bits</name></name> <operator pos:start="117:29" pos:end="117:29">+</operator> <name pos:start="117:31" pos:end="117:37">l2_bits</name></expr>;</expr_stmt>

    <expr_stmt pos:start="119:5" pos:end="119:67"><expr pos:start="119:5" pos:end="119:66"><name pos:start="119:5" pos:end="119:11">l1_size</name> <operator pos:start="119:13" pos:end="119:13">=</operator> <operator pos:start="119:15" pos:end="119:15">(</operator><operator pos:start="119:16" pos:end="119:16">(</operator><operator pos:start="119:17" pos:end="119:17">(</operator><name pos:start="119:18" pos:end="119:27">total_size</name> <operator pos:start="119:29" pos:end="119:29">*</operator> <literal type="number" pos:start="119:31" pos:end="119:33">512</literal><operator pos:start="119:34" pos:end="119:34">)</operator> <operator pos:start="119:36" pos:end="119:36">+</operator> <operator pos:start="119:38" pos:end="119:38">(</operator><literal type="number" pos:start="119:39" pos:end="119:41">1LL</literal> <operator pos:start="119:43" pos:end="119:44">&lt;&lt;</operator> <name pos:start="119:46" pos:end="119:50">shift</name><operator pos:start="119:51" pos:end="119:51">)</operator> <operator pos:start="119:53" pos:end="119:53">-</operator> <literal type="number" pos:start="119:55" pos:end="119:55">1</literal><operator pos:start="119:56" pos:end="119:56">)</operator> <operator pos:start="119:58" pos:end="119:59">&gt;&gt;</operator> <name pos:start="119:61" pos:end="119:65">shift</name><operator pos:start="119:66" pos:end="119:66">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="121:5" pos:end="121:56"><expr pos:start="121:5" pos:end="121:55"><name pos:start="121:5" pos:end="121:10">offset</name> <operator pos:start="121:12" pos:end="121:12">=</operator> <call pos:start="121:14" pos:end="121:55"><name pos:start="121:14" pos:end="121:25">align_offset</name><argument_list pos:start="121:26" pos:end="121:55">(<argument pos:start="121:27" pos:end="121:37"><expr pos:start="121:27" pos:end="121:37"><name pos:start="121:27" pos:end="121:37">header_size</name></expr></argument>, <argument pos:start="121:40" pos:end="121:54"><expr pos:start="121:40" pos:end="121:54"><name pos:start="121:40" pos:end="121:54"><name pos:start="121:40" pos:end="121:40">s</name><operator pos:start="121:41" pos:end="121:42">-&gt;</operator><name pos:start="121:43" pos:end="121:54">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="123:5" pos:end="123:32"><expr pos:start="123:5" pos:end="123:31"><name pos:start="123:5" pos:end="123:22"><name pos:start="123:5" pos:end="123:5">s</name><operator pos:start="123:6" pos:end="123:7">-&gt;</operator><name pos:start="123:8" pos:end="123:22">l1_table_offset</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <name pos:start="123:26" pos:end="123:31">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:61"><expr pos:start="125:5" pos:end="125:60"><name pos:start="125:5" pos:end="125:26"><name pos:start="125:5" pos:end="125:10">header</name><operator pos:start="125:11" pos:end="125:11">.</operator><name pos:start="125:12" pos:end="125:26">l1_table_offset</name></name> <operator pos:start="125:28" pos:end="125:28">=</operator> <call pos:start="125:30" pos:end="125:60"><name pos:start="125:30" pos:end="125:40">cpu_to_be64</name><argument_list pos:start="125:41" pos:end="125:60">(<argument pos:start="125:42" pos:end="125:59"><expr pos:start="125:42" pos:end="125:59"><name pos:start="125:42" pos:end="125:59"><name pos:start="125:42" pos:end="125:42">s</name><operator pos:start="125:43" pos:end="125:44">-&gt;</operator><name pos:start="125:45" pos:end="125:59">l1_table_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="127:5" pos:end="127:42"><expr pos:start="127:5" pos:end="127:41"><name pos:start="127:5" pos:end="127:18"><name pos:start="127:5" pos:end="127:10">header</name><operator pos:start="127:11" pos:end="127:11">.</operator><name pos:start="127:12" pos:end="127:18">l1_size</name></name> <operator pos:start="127:20" pos:end="127:20">=</operator> <call pos:start="127:22" pos:end="127:41"><name pos:start="127:22" pos:end="127:32">cpu_to_be32</name><argument_list pos:start="127:33" pos:end="127:41">(<argument pos:start="127:34" pos:end="127:40"><expr pos:start="127:34" pos:end="127:40"><name pos:start="127:34" pos:end="127:40">l1_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="129:5" pos:end="129:72"><expr pos:start="129:5" pos:end="129:71"><name pos:start="129:5" pos:end="129:10">offset</name> <operator pos:start="129:12" pos:end="129:13">+=</operator> <call pos:start="129:15" pos:end="129:71"><name pos:start="129:15" pos:end="129:26">align_offset</name><argument_list pos:start="129:27" pos:end="129:71">(<argument pos:start="129:28" pos:end="129:53"><expr pos:start="129:28" pos:end="129:53"><name pos:start="129:28" pos:end="129:34">l1_size</name> <operator pos:start="129:36" pos:end="129:36">*</operator> <sizeof pos:start="129:38" pos:end="129:53">sizeof<argument_list pos:start="129:44" pos:end="129:53">(<argument pos:start="129:45" pos:end="129:52"><expr pos:start="129:45" pos:end="129:52"><name pos:start="129:45" pos:end="129:52">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="129:56" pos:end="129:70"><expr pos:start="129:56" pos:end="129:70"><name pos:start="129:56" pos:end="129:70"><name pos:start="129:56" pos:end="129:56">s</name><operator pos:start="129:57" pos:end="129:58">-&gt;</operator><name pos:start="129:59" pos:end="129:70">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="133:5" pos:end="133:54"><expr pos:start="133:5" pos:end="133:53"><name pos:start="133:5" pos:end="133:21"><name pos:start="133:5" pos:end="133:5">s</name><operator pos:start="133:6" pos:end="133:7">-&gt;</operator><name pos:start="133:8" pos:end="133:21">refcount_table</name></name> <operator pos:start="133:23" pos:end="133:23">=</operator> <call pos:start="133:25" pos:end="133:53"><name pos:start="133:25" pos:end="133:36">qemu_mallocz</name><argument_list pos:start="133:37" pos:end="133:53">(<argument pos:start="133:38" pos:end="133:52"><expr pos:start="133:38" pos:end="133:52"><name pos:start="133:38" pos:end="133:52"><name pos:start="133:38" pos:end="133:38">s</name><operator pos:start="133:39" pos:end="133:40">-&gt;</operator><name pos:start="133:41" pos:end="133:52">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="137:5" pos:end="137:38"><expr pos:start="137:5" pos:end="137:37"><name pos:start="137:5" pos:end="137:28"><name pos:start="137:5" pos:end="137:5">s</name><operator pos:start="137:6" pos:end="137:7">-&gt;</operator><name pos:start="137:8" pos:end="137:28">refcount_table_offset</name></name> <operator pos:start="137:30" pos:end="137:30">=</operator> <name pos:start="137:32" pos:end="137:37">offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:55"><expr pos:start="139:5" pos:end="139:54"><name pos:start="139:5" pos:end="139:32"><name pos:start="139:5" pos:end="139:10">header</name><operator pos:start="139:11" pos:end="139:11">.</operator><name pos:start="139:12" pos:end="139:32">refcount_table_offset</name></name> <operator pos:start="139:34" pos:end="139:34">=</operator> <call pos:start="139:36" pos:end="139:54"><name pos:start="139:36" pos:end="139:46">cpu_to_be64</name><argument_list pos:start="139:47" pos:end="139:54">(<argument pos:start="139:48" pos:end="139:53"><expr pos:start="139:48" pos:end="139:53"><name pos:start="139:48" pos:end="139:53">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="141:5" pos:end="141:52"><expr pos:start="141:5" pos:end="141:51"><name pos:start="141:5" pos:end="141:34"><name pos:start="141:5" pos:end="141:10">header</name><operator pos:start="141:11" pos:end="141:11">.</operator><name pos:start="141:12" pos:end="141:34">refcount_table_clusters</name></name> <operator pos:start="141:36" pos:end="141:36">=</operator> <call pos:start="141:38" pos:end="141:51"><name pos:start="141:38" pos:end="141:48">cpu_to_be32</name><argument_list pos:start="141:49" pos:end="141:51">(<argument pos:start="141:50" pos:end="141:50"><expr pos:start="141:50" pos:end="141:50"><literal type="number" pos:start="141:50" pos:end="141:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="143:5" pos:end="143:30"><expr pos:start="143:5" pos:end="143:29"><name pos:start="143:5" pos:end="143:10">offset</name> <operator pos:start="143:12" pos:end="143:13">+=</operator> <name pos:start="143:15" pos:end="143:29"><name pos:start="143:15" pos:end="143:15">s</name><operator pos:start="143:16" pos:end="143:17">-&gt;</operator><name pos:start="143:18" pos:end="143:29">cluster_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="145:5" pos:end="145:38"><expr pos:start="145:5" pos:end="145:37"><name pos:start="145:5" pos:end="145:28"><name pos:start="145:5" pos:end="145:5">s</name><operator pos:start="145:6" pos:end="145:7">-&gt;</operator><name pos:start="145:8" pos:end="145:28">refcount_block_offset</name></name> <operator pos:start="145:30" pos:end="145:30">=</operator> <name pos:start="145:32" pos:end="145:37">offset</name></expr>;</expr_stmt>



    <comment type="block" pos:start="149:5" pos:end="149:47">/* count how many refcount blocks needed */</comment>

    <expr_stmt pos:start="151:5" pos:end="151:36"><expr pos:start="151:5" pos:end="151:35"><name pos:start="151:5" pos:end="151:7">tmp</name> <operator pos:start="151:9" pos:end="151:9">=</operator> <name pos:start="151:11" pos:end="151:16">offset</name> <operator pos:start="151:18" pos:end="151:19">&gt;&gt;</operator> <name pos:start="151:21" pos:end="151:35"><name pos:start="151:21" pos:end="151:21">s</name><operator pos:start="151:22" pos:end="151:23">-&gt;</operator><name pos:start="151:24" pos:end="151:35">cluster_bits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:67"><expr pos:start="153:5" pos:end="153:66"><name pos:start="153:5" pos:end="153:16">ref_clusters</name> <operator pos:start="153:18" pos:end="153:18">=</operator> <operator pos:start="153:20" pos:end="153:20">(</operator><name pos:start="153:21" pos:end="153:23">tmp</name> <operator pos:start="153:25" pos:end="153:26">&gt;&gt;</operator> <operator pos:start="153:28" pos:end="153:28">(</operator><name pos:start="153:29" pos:end="153:43"><name pos:start="153:29" pos:end="153:29">s</name><operator pos:start="153:30" pos:end="153:31">-&gt;</operator><name pos:start="153:32" pos:end="153:43">cluster_bits</name></name> <operator pos:start="153:45" pos:end="153:45">-</operator> <name pos:start="153:47" pos:end="153:60">REFCOUNT_SHIFT</name><operator pos:start="153:61" pos:end="153:61">)</operator><operator pos:start="153:62" pos:end="153:62">)</operator> <operator pos:start="153:64" pos:end="153:64">+</operator> <literal type="number" pos:start="153:66" pos:end="153:66">1</literal></expr>;</expr_stmt>

    <for pos:start="155:5" pos:end="161:5">for <control pos:start="155:9" pos:end="155:36">(<init pos:start="155:10" pos:end="155:13"><expr pos:start="155:10" pos:end="155:12"><name pos:start="155:10" pos:end="155:10">i</name><operator pos:start="155:11" pos:end="155:11">=</operator><literal type="number" pos:start="155:12" pos:end="155:12">0</literal></expr>;</init> <condition pos:start="155:15" pos:end="155:31"><expr pos:start="155:15" pos:end="155:30"><name pos:start="155:15" pos:end="155:15">i</name> <operator pos:start="155:17" pos:end="155:17">&lt;</operator> <name pos:start="155:19" pos:end="155:30">ref_clusters</name></expr>;</condition> <incr pos:start="155:33" pos:end="155:35"><expr pos:start="155:33" pos:end="155:35"><name pos:start="155:33" pos:end="155:33">i</name><operator pos:start="155:34" pos:end="155:35">++</operator></expr></incr>)</control> <block pos:start="155:38" pos:end="161:5">{<block_content pos:start="157:9" pos:end="159:34">

        <expr_stmt pos:start="157:9" pos:end="157:51"><expr pos:start="157:9" pos:end="157:50"><name pos:start="157:9" pos:end="157:28"><name pos:start="157:9" pos:end="157:9">s</name><operator pos:start="157:10" pos:end="157:11">-&gt;</operator><name pos:start="157:12" pos:end="157:25">refcount_table</name><index pos:start="157:26" pos:end="157:28">[<expr pos:start="157:27" pos:end="157:27"><name pos:start="157:27" pos:end="157:27">i</name></expr>]</index></name> <operator pos:start="157:30" pos:end="157:30">=</operator> <call pos:start="157:32" pos:end="157:50"><name pos:start="157:32" pos:end="157:42">cpu_to_be64</name><argument_list pos:start="157:43" pos:end="157:50">(<argument pos:start="157:44" pos:end="157:49"><expr pos:start="157:44" pos:end="157:49"><name pos:start="157:44" pos:end="157:49">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="159:9" pos:end="159:34"><expr pos:start="159:9" pos:end="159:33"><name pos:start="159:9" pos:end="159:14">offset</name> <operator pos:start="159:16" pos:end="159:17">+=</operator> <name pos:start="159:19" pos:end="159:33"><name pos:start="159:19" pos:end="159:19">s</name><operator pos:start="159:20" pos:end="159:21">-&gt;</operator><name pos:start="159:22" pos:end="159:33">cluster_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="165:5" pos:end="165:69"><expr pos:start="165:5" pos:end="165:68"><name pos:start="165:5" pos:end="165:21"><name pos:start="165:5" pos:end="165:5">s</name><operator pos:start="165:6" pos:end="165:7">-&gt;</operator><name pos:start="165:8" pos:end="165:21">refcount_block</name></name> <operator pos:start="165:23" pos:end="165:23">=</operator> <call pos:start="165:25" pos:end="165:68"><name pos:start="165:25" pos:end="165:36">qemu_mallocz</name><argument_list pos:start="165:37" pos:end="165:68">(<argument pos:start="165:38" pos:end="165:67"><expr pos:start="165:38" pos:end="165:67"><name pos:start="165:38" pos:end="165:49">ref_clusters</name> <operator pos:start="165:51" pos:end="165:51">*</operator> <name pos:start="165:53" pos:end="165:67"><name pos:start="165:53" pos:end="165:53">s</name><operator pos:start="165:54" pos:end="165:55">-&gt;</operator><name pos:start="165:56" pos:end="165:67">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="169:5" pos:end="169:26">/* update refcounts */</comment>

    <expr_stmt pos:start="171:5" pos:end="171:52"><expr pos:start="171:5" pos:end="171:51"><call pos:start="171:5" pos:end="171:51"><name pos:start="171:5" pos:end="171:32">qcow2_create_refcount_update</name><argument_list pos:start="171:33" pos:end="171:51">(<argument pos:start="171:34" pos:end="171:34"><expr pos:start="171:34" pos:end="171:34"><name pos:start="171:34" pos:end="171:34">s</name></expr></argument>, <argument pos:start="171:37" pos:end="171:37"><expr pos:start="171:37" pos:end="171:37"><literal type="number" pos:start="171:37" pos:end="171:37">0</literal></expr></argument>, <argument pos:start="171:40" pos:end="171:50"><expr pos:start="171:40" pos:end="171:50"><name pos:start="171:40" pos:end="171:50">header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="175:36"><expr pos:start="173:5" pos:end="175:35"><call pos:start="173:5" pos:end="175:35"><name pos:start="173:5" pos:end="173:32">qcow2_create_refcount_update</name><argument_list pos:start="173:33" pos:end="175:35">(<argument pos:start="173:34" pos:end="173:34"><expr pos:start="173:34" pos:end="173:34"><name pos:start="173:34" pos:end="173:34">s</name></expr></argument>, <argument pos:start="173:37" pos:end="173:54"><expr pos:start="173:37" pos:end="173:54"><name pos:start="173:37" pos:end="173:54"><name pos:start="173:37" pos:end="173:37">s</name><operator pos:start="173:38" pos:end="173:39">-&gt;</operator><name pos:start="173:40" pos:end="173:54">l1_table_offset</name></name></expr></argument>,

        <argument pos:start="175:9" pos:end="175:34"><expr pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:15">l1_size</name> <operator pos:start="175:17" pos:end="175:17">*</operator> <sizeof pos:start="175:19" pos:end="175:34">sizeof<argument_list pos:start="175:25" pos:end="175:34">(<argument pos:start="175:26" pos:end="175:33"><expr pos:start="175:26" pos:end="175:33"><name pos:start="175:26" pos:end="175:33">uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="177:5" pos:end="177:79"><expr pos:start="177:5" pos:end="177:78"><call pos:start="177:5" pos:end="177:78"><name pos:start="177:5" pos:end="177:32">qcow2_create_refcount_update</name><argument_list pos:start="177:33" pos:end="177:78">(<argument pos:start="177:34" pos:end="177:34"><expr pos:start="177:34" pos:end="177:34"><name pos:start="177:34" pos:end="177:34">s</name></expr></argument>, <argument pos:start="177:37" pos:end="177:60"><expr pos:start="177:37" pos:end="177:60"><name pos:start="177:37" pos:end="177:60"><name pos:start="177:37" pos:end="177:37">s</name><operator pos:start="177:38" pos:end="177:39">-&gt;</operator><name pos:start="177:40" pos:end="177:60">refcount_table_offset</name></name></expr></argument>, <argument pos:start="177:63" pos:end="177:77"><expr pos:start="177:63" pos:end="177:77"><name pos:start="177:63" pos:end="177:77"><name pos:start="177:63" pos:end="177:63">s</name><operator pos:start="177:64" pos:end="177:65">-&gt;</operator><name pos:start="177:66" pos:end="177:77">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="179:5" pos:end="181:40"><expr pos:start="179:5" pos:end="181:39"><call pos:start="179:5" pos:end="181:39"><name pos:start="179:5" pos:end="179:32">qcow2_create_refcount_update</name><argument_list pos:start="179:33" pos:end="181:39">(<argument pos:start="179:34" pos:end="179:34"><expr pos:start="179:34" pos:end="179:34"><name pos:start="179:34" pos:end="179:34">s</name></expr></argument>, <argument pos:start="179:37" pos:end="179:60"><expr pos:start="179:37" pos:end="179:60"><name pos:start="179:37" pos:end="179:60"><name pos:start="179:37" pos:end="179:37">s</name><operator pos:start="179:38" pos:end="179:39">-&gt;</operator><name pos:start="179:40" pos:end="179:60">refcount_block_offset</name></name></expr></argument>,

        <argument pos:start="181:9" pos:end="181:38"><expr pos:start="181:9" pos:end="181:38"><name pos:start="181:9" pos:end="181:20">ref_clusters</name> <operator pos:start="181:22" pos:end="181:22">*</operator> <name pos:start="181:24" pos:end="181:38"><name pos:start="181:24" pos:end="181:24">s</name><operator pos:start="181:25" pos:end="181:26">-&gt;</operator><name pos:start="181:27" pos:end="181:38">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="185:5" pos:end="185:28">/* write all the data */</comment>

    <expr_stmt pos:start="187:5" pos:end="187:39"><expr pos:start="187:5" pos:end="187:38"><call pos:start="187:5" pos:end="187:38"><name pos:start="187:5" pos:end="187:9">write</name><argument_list pos:start="187:10" pos:end="187:38">(<argument pos:start="187:11" pos:end="187:12"><expr pos:start="187:11" pos:end="187:12"><name pos:start="187:11" pos:end="187:12">fd</name></expr></argument>, <argument pos:start="187:15" pos:end="187:21"><expr pos:start="187:15" pos:end="187:21"><operator pos:start="187:15" pos:end="187:15">&amp;</operator><name pos:start="187:16" pos:end="187:21">header</name></expr></argument>, <argument pos:start="187:24" pos:end="187:37"><expr pos:start="187:24" pos:end="187:37"><sizeof pos:start="187:24" pos:end="187:37">sizeof<argument_list pos:start="187:30" pos:end="187:37">(<argument pos:start="187:31" pos:end="187:36"><expr pos:start="187:31" pos:end="187:36"><name pos:start="187:31" pos:end="187:36">header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="189:5" pos:end="219:5"><if pos:start="189:5" pos:end="219:5">if <condition pos:start="189:8" pos:end="189:21">(<expr pos:start="189:9" pos:end="189:20"><name pos:start="189:9" pos:end="189:20">backing_file</name></expr>)</condition> <block pos:start="189:23" pos:end="219:5">{<block_content pos:start="191:9" pos:end="217:54">

        <if_stmt pos:start="191:9" pos:end="215:9"><if pos:start="191:9" pos:end="215:9">if <condition pos:start="191:12" pos:end="191:31">(<expr pos:start="191:13" pos:end="191:30"><name pos:start="191:13" pos:end="191:30">backing_format_len</name></expr>)</condition> <block pos:start="191:33" pos:end="215:9">{<block_content pos:start="193:13" pos:end="213:13">

            <decl_stmt pos:start="193:13" pos:end="193:26"><decl pos:start="193:13" pos:end="193:25"><type pos:start="193:13" pos:end="193:16"><name pos:start="193:13" pos:end="193:16">char</name></type> <name pos:start="193:18" pos:end="193:25"><name pos:start="193:18" pos:end="193:21">zero</name><index pos:start="193:22" pos:end="193:25">[<expr pos:start="193:23" pos:end="193:24"><literal type="number" pos:start="193:23" pos:end="193:24">16</literal></expr>]</index></name></decl>;</decl_stmt>

            <decl_stmt pos:start="195:13" pos:end="195:52"><decl pos:start="195:13" pos:end="195:51"><type pos:start="195:13" pos:end="195:15"><name pos:start="195:13" pos:end="195:15">int</name></type> <name pos:start="195:17" pos:end="195:17">d</name> <init pos:start="195:19" pos:end="195:51">= <expr pos:start="195:21" pos:end="195:51"><name pos:start="195:21" pos:end="195:30"><name pos:start="195:21" pos:end="195:26">ext_bf</name><operator pos:start="195:27" pos:end="195:27">.</operator><name pos:start="195:28" pos:end="195:30">len</name></name> <operator pos:start="195:32" pos:end="195:32">-</operator> <name pos:start="195:34" pos:end="195:51">backing_format_len</name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="199:13" pos:end="199:42"><expr pos:start="199:13" pos:end="199:41"><call pos:start="199:13" pos:end="199:41"><name pos:start="199:13" pos:end="199:18">memset</name><argument_list pos:start="199:19" pos:end="199:41">(<argument pos:start="199:20" pos:end="199:23"><expr pos:start="199:20" pos:end="199:23"><name pos:start="199:20" pos:end="199:23">zero</name></expr></argument>, <argument pos:start="199:26" pos:end="199:26"><expr pos:start="199:26" pos:end="199:26"><literal type="number" pos:start="199:26" pos:end="199:26">0</literal></expr></argument>, <argument pos:start="199:29" pos:end="199:40"><expr pos:start="199:29" pos:end="199:40"><sizeof pos:start="199:29" pos:end="199:40">sizeof<argument_list pos:start="199:35" pos:end="199:40">(<argument pos:start="199:36" pos:end="199:39"><expr pos:start="199:36" pos:end="199:39"><name pos:start="199:36" pos:end="199:39">zero</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:40"><expr pos:start="201:13" pos:end="201:39"><call pos:start="201:13" pos:end="201:39"><name pos:start="201:13" pos:end="201:24">cpu_to_be32s</name><argument_list pos:start="201:25" pos:end="201:39">(<argument pos:start="201:26" pos:end="201:38"><expr pos:start="201:26" pos:end="201:38"><operator pos:start="201:26" pos:end="201:26">&amp;</operator><name pos:start="201:27" pos:end="201:38"><name pos:start="201:27" pos:end="201:32">ext_bf</name><operator pos:start="201:33" pos:end="201:33">.</operator><name pos:start="201:34" pos:end="201:38">magic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:38"><expr pos:start="203:13" pos:end="203:37"><call pos:start="203:13" pos:end="203:37"><name pos:start="203:13" pos:end="203:24">cpu_to_be32s</name><argument_list pos:start="203:25" pos:end="203:37">(<argument pos:start="203:26" pos:end="203:36"><expr pos:start="203:26" pos:end="203:36"><operator pos:start="203:26" pos:end="203:26">&amp;</operator><name pos:start="203:27" pos:end="203:36"><name pos:start="203:27" pos:end="203:32">ext_bf</name><operator pos:start="203:33" pos:end="203:33">.</operator><name pos:start="203:34" pos:end="203:36">len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="205:13" pos:end="205:47"><expr pos:start="205:13" pos:end="205:46"><call pos:start="205:13" pos:end="205:46"><name pos:start="205:13" pos:end="205:17">write</name><argument_list pos:start="205:18" pos:end="205:46">(<argument pos:start="205:19" pos:end="205:20"><expr pos:start="205:19" pos:end="205:20"><name pos:start="205:19" pos:end="205:20">fd</name></expr></argument>, <argument pos:start="205:23" pos:end="205:29"><expr pos:start="205:23" pos:end="205:29"><operator pos:start="205:23" pos:end="205:23">&amp;</operator><name pos:start="205:24" pos:end="205:29">ext_bf</name></expr></argument>, <argument pos:start="205:32" pos:end="205:45"><expr pos:start="205:32" pos:end="205:45"><sizeof pos:start="205:32" pos:end="205:45">sizeof<argument_list pos:start="205:38" pos:end="205:45">(<argument pos:start="205:39" pos:end="205:44"><expr pos:start="205:39" pos:end="205:44"><name pos:start="205:39" pos:end="205:44">ext_bf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="207:13" pos:end="207:58"><expr pos:start="207:13" pos:end="207:57"><call pos:start="207:13" pos:end="207:57"><name pos:start="207:13" pos:end="207:17">write</name><argument_list pos:start="207:18" pos:end="207:57">(<argument pos:start="207:19" pos:end="207:20"><expr pos:start="207:19" pos:end="207:20"><name pos:start="207:19" pos:end="207:20">fd</name></expr></argument>, <argument pos:start="207:23" pos:end="207:36"><expr pos:start="207:23" pos:end="207:36"><name pos:start="207:23" pos:end="207:36">backing_format</name></expr></argument>, <argument pos:start="207:39" pos:end="207:56"><expr pos:start="207:39" pos:end="207:56"><name pos:start="207:39" pos:end="207:56">backing_format_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="209:13" pos:end="213:13"><if pos:start="209:13" pos:end="213:13">if <condition pos:start="209:16" pos:end="209:20">(<expr pos:start="209:17" pos:end="209:19"><name pos:start="209:17" pos:end="209:17">d</name><operator pos:start="209:18" pos:end="209:18">&gt;</operator><literal type="number" pos:start="209:19" pos:end="209:19">0</literal></expr>)</condition> <block pos:start="209:22" pos:end="213:13">{<block_content pos:start="211:17" pos:end="211:35">

                <expr_stmt pos:start="211:17" pos:end="211:35"><expr pos:start="211:17" pos:end="211:34"><call pos:start="211:17" pos:end="211:34"><name pos:start="211:17" pos:end="211:21">write</name><argument_list pos:start="211:22" pos:end="211:34">(<argument pos:start="211:23" pos:end="211:24"><expr pos:start="211:23" pos:end="211:24"><name pos:start="211:23" pos:end="211:24">fd</name></expr></argument>, <argument pos:start="211:27" pos:end="211:30"><expr pos:start="211:27" pos:end="211:30"><name pos:start="211:27" pos:end="211:30">zero</name></expr></argument>, <argument pos:start="211:33" pos:end="211:33"><expr pos:start="211:33" pos:end="211:33"><name pos:start="211:33" pos:end="211:33">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="217:9" pos:end="217:54"><expr pos:start="217:9" pos:end="217:53"><call pos:start="217:9" pos:end="217:53"><name pos:start="217:9" pos:end="217:13">write</name><argument_list pos:start="217:14" pos:end="217:53">(<argument pos:start="217:15" pos:end="217:16"><expr pos:start="217:15" pos:end="217:16"><name pos:start="217:15" pos:end="217:16">fd</name></expr></argument>, <argument pos:start="217:19" pos:end="217:30"><expr pos:start="217:19" pos:end="217:30"><name pos:start="217:19" pos:end="217:30">backing_file</name></expr></argument>, <argument pos:start="217:33" pos:end="217:52"><expr pos:start="217:33" pos:end="217:52"><name pos:start="217:33" pos:end="217:52">backing_filename_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="221:5" pos:end="221:44"><expr pos:start="221:5" pos:end="221:43"><call pos:start="221:5" pos:end="221:43"><name pos:start="221:5" pos:end="221:9">lseek</name><argument_list pos:start="221:10" pos:end="221:43">(<argument pos:start="221:11" pos:end="221:12"><expr pos:start="221:11" pos:end="221:12"><name pos:start="221:11" pos:end="221:12">fd</name></expr></argument>, <argument pos:start="221:15" pos:end="221:32"><expr pos:start="221:15" pos:end="221:32"><name pos:start="221:15" pos:end="221:32"><name pos:start="221:15" pos:end="221:15">s</name><operator pos:start="221:16" pos:end="221:17">-&gt;</operator><name pos:start="221:18" pos:end="221:32">l1_table_offset</name></name></expr></argument>, <argument pos:start="221:35" pos:end="221:42"><expr pos:start="221:35" pos:end="221:42"><name pos:start="221:35" pos:end="221:42">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="223:5" pos:end="223:12"><expr pos:start="223:5" pos:end="223:11"><name pos:start="223:5" pos:end="223:7">tmp</name> <operator pos:start="223:9" pos:end="223:9">=</operator> <literal type="number" pos:start="223:11" pos:end="223:11">0</literal></expr>;</expr_stmt>

    <for pos:start="225:5" pos:end="229:5">for<control pos:start="225:8" pos:end="225:31">(<init pos:start="225:9" pos:end="225:14"><expr pos:start="225:9" pos:end="225:13"><name pos:start="225:9" pos:end="225:9">i</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <literal type="number" pos:start="225:13" pos:end="225:13">0</literal></expr>;</init><condition pos:start="225:15" pos:end="225:26"><expr pos:start="225:15" pos:end="225:25"><name pos:start="225:15" pos:end="225:15">i</name> <operator pos:start="225:17" pos:end="225:17">&lt;</operator> <name pos:start="225:19" pos:end="225:25">l1_size</name></expr>;</condition> <incr pos:start="225:28" pos:end="225:30"><expr pos:start="225:28" pos:end="225:30"><name pos:start="225:28" pos:end="225:28">i</name><operator pos:start="225:29" pos:end="225:30">++</operator></expr></incr>)</control> <block pos:start="225:33" pos:end="229:5">{<block_content pos:start="227:9" pos:end="227:37">

        <expr_stmt pos:start="227:9" pos:end="227:37"><expr pos:start="227:9" pos:end="227:36"><call pos:start="227:9" pos:end="227:36"><name pos:start="227:9" pos:end="227:13">write</name><argument_list pos:start="227:14" pos:end="227:36">(<argument pos:start="227:15" pos:end="227:16"><expr pos:start="227:15" pos:end="227:16"><name pos:start="227:15" pos:end="227:16">fd</name></expr></argument>, <argument pos:start="227:19" pos:end="227:22"><expr pos:start="227:19" pos:end="227:22"><operator pos:start="227:19" pos:end="227:19">&amp;</operator><name pos:start="227:20" pos:end="227:22">tmp</name></expr></argument>, <argument pos:start="227:25" pos:end="227:35"><expr pos:start="227:25" pos:end="227:35"><sizeof pos:start="227:25" pos:end="227:35">sizeof<argument_list pos:start="227:31" pos:end="227:35">(<argument pos:start="227:32" pos:end="227:34"><expr pos:start="227:32" pos:end="227:34"><name pos:start="227:32" pos:end="227:34">tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="231:5" pos:end="231:50"><expr pos:start="231:5" pos:end="231:49"><call pos:start="231:5" pos:end="231:49"><name pos:start="231:5" pos:end="231:9">lseek</name><argument_list pos:start="231:10" pos:end="231:49">(<argument pos:start="231:11" pos:end="231:12"><expr pos:start="231:11" pos:end="231:12"><name pos:start="231:11" pos:end="231:12">fd</name></expr></argument>, <argument pos:start="231:15" pos:end="231:38"><expr pos:start="231:15" pos:end="231:38"><name pos:start="231:15" pos:end="231:38"><name pos:start="231:15" pos:end="231:15">s</name><operator pos:start="231:16" pos:end="231:17">-&gt;</operator><name pos:start="231:18" pos:end="231:38">refcount_table_offset</name></name></expr></argument>, <argument pos:start="231:41" pos:end="231:48"><expr pos:start="231:41" pos:end="231:48"><name pos:start="231:41" pos:end="231:48">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:50"><expr pos:start="233:5" pos:end="233:49"><call pos:start="233:5" pos:end="233:49"><name pos:start="233:5" pos:end="233:9">write</name><argument_list pos:start="233:10" pos:end="233:49">(<argument pos:start="233:11" pos:end="233:12"><expr pos:start="233:11" pos:end="233:12"><name pos:start="233:11" pos:end="233:12">fd</name></expr></argument>, <argument pos:start="233:15" pos:end="233:31"><expr pos:start="233:15" pos:end="233:31"><name pos:start="233:15" pos:end="233:31"><name pos:start="233:15" pos:end="233:15">s</name><operator pos:start="233:16" pos:end="233:17">-&gt;</operator><name pos:start="233:18" pos:end="233:31">refcount_table</name></name></expr></argument>, <argument pos:start="233:34" pos:end="233:48"><expr pos:start="233:34" pos:end="233:48"><name pos:start="233:34" pos:end="233:48"><name pos:start="233:34" pos:end="233:34">s</name><operator pos:start="233:35" pos:end="233:36">-&gt;</operator><name pos:start="233:37" pos:end="233:48">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="237:5" pos:end="237:50"><expr pos:start="237:5" pos:end="237:49"><call pos:start="237:5" pos:end="237:49"><name pos:start="237:5" pos:end="237:9">lseek</name><argument_list pos:start="237:10" pos:end="237:49">(<argument pos:start="237:11" pos:end="237:12"><expr pos:start="237:11" pos:end="237:12"><name pos:start="237:11" pos:end="237:12">fd</name></expr></argument>, <argument pos:start="237:15" pos:end="237:38"><expr pos:start="237:15" pos:end="237:38"><name pos:start="237:15" pos:end="237:38"><name pos:start="237:15" pos:end="237:15">s</name><operator pos:start="237:16" pos:end="237:17">-&gt;</operator><name pos:start="237:18" pos:end="237:38">refcount_block_offset</name></name></expr></argument>, <argument pos:start="237:41" pos:end="237:48"><expr pos:start="237:41" pos:end="237:48"><name pos:start="237:41" pos:end="237:48">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="239:5" pos:end="239:65"><expr pos:start="239:5" pos:end="239:64"><call pos:start="239:5" pos:end="239:64"><name pos:start="239:5" pos:end="239:9">write</name><argument_list pos:start="239:10" pos:end="239:64">(<argument pos:start="239:11" pos:end="239:12"><expr pos:start="239:11" pos:end="239:12"><name pos:start="239:11" pos:end="239:12">fd</name></expr></argument>, <argument pos:start="239:15" pos:end="239:31"><expr pos:start="239:15" pos:end="239:31"><name pos:start="239:15" pos:end="239:31"><name pos:start="239:15" pos:end="239:15">s</name><operator pos:start="239:16" pos:end="239:17">-&gt;</operator><name pos:start="239:18" pos:end="239:31">refcount_block</name></name></expr></argument>, <argument pos:start="239:34" pos:end="239:63"><expr pos:start="239:34" pos:end="239:63"><name pos:start="239:34" pos:end="239:45">ref_clusters</name> <operator pos:start="239:47" pos:end="239:47">*</operator> <name pos:start="239:49" pos:end="239:63"><name pos:start="239:49" pos:end="239:49">s</name><operator pos:start="239:50" pos:end="239:51">-&gt;</operator><name pos:start="239:52" pos:end="239:63">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="243:5" pos:end="243:33"><expr pos:start="243:5" pos:end="243:32"><call pos:start="243:5" pos:end="243:32"><name pos:start="243:5" pos:end="243:13">qemu_free</name><argument_list pos:start="243:14" pos:end="243:32">(<argument pos:start="243:15" pos:end="243:31"><expr pos:start="243:15" pos:end="243:31"><name pos:start="243:15" pos:end="243:31"><name pos:start="243:15" pos:end="243:15">s</name><operator pos:start="243:16" pos:end="243:17">-&gt;</operator><name pos:start="243:18" pos:end="243:31">refcount_table</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="245:5" pos:end="245:33"><expr pos:start="245:5" pos:end="245:32"><call pos:start="245:5" pos:end="245:32"><name pos:start="245:5" pos:end="245:13">qemu_free</name><argument_list pos:start="245:14" pos:end="245:32">(<argument pos:start="245:15" pos:end="245:31"><expr pos:start="245:15" pos:end="245:31"><name pos:start="245:15" pos:end="245:31"><name pos:start="245:15" pos:end="245:15">s</name><operator pos:start="245:16" pos:end="245:17">-&gt;</operator><name pos:start="245:18" pos:end="245:31">refcount_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:14"><expr pos:start="247:5" pos:end="247:13"><call pos:start="247:5" pos:end="247:13"><name pos:start="247:5" pos:end="247:9">close</name><argument_list pos:start="247:10" pos:end="247:13">(<argument pos:start="247:11" pos:end="247:12"><expr pos:start="247:11" pos:end="247:12"><name pos:start="247:11" pos:end="247:12">fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="251:5" pos:end="251:30">/* Preallocate metadata */</comment>

    <if_stmt pos:start="253:5" pos:end="265:5"><if pos:start="253:5" pos:end="265:5">if <condition pos:start="253:8" pos:end="253:17">(<expr pos:start="253:9" pos:end="253:16"><name pos:start="253:9" pos:end="253:16">prealloc</name></expr>)</condition> <block pos:start="253:19" pos:end="265:5">{<block_content pos:start="255:9" pos:end="263:23">

        <decl_stmt pos:start="255:9" pos:end="255:29"><decl pos:start="255:9" pos:end="255:28"><type pos:start="255:9" pos:end="255:26"><name pos:start="255:9" pos:end="255:24">BlockDriverState</name> <modifier pos:start="255:26" pos:end="255:26">*</modifier></type><name pos:start="255:27" pos:end="255:28">bs</name></decl>;</decl_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:26"><expr pos:start="257:9" pos:end="257:25"><name pos:start="257:9" pos:end="257:10">bs</name> <operator pos:start="257:12" pos:end="257:12">=</operator> <call pos:start="257:14" pos:end="257:25"><name pos:start="257:14" pos:end="257:21">bdrv_new</name><argument_list pos:start="257:22" pos:end="257:25">(<argument pos:start="257:23" pos:end="257:24"><expr pos:start="257:23" pos:end="257:24"><literal type="string" pos:start="257:23" pos:end="257:24">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:49"><expr pos:start="259:9" pos:end="259:48"><call pos:start="259:9" pos:end="259:48"><name pos:start="259:9" pos:end="259:17">bdrv_open</name><argument_list pos:start="259:18" pos:end="259:48">(<argument pos:start="259:19" pos:end="259:20"><expr pos:start="259:19" pos:end="259:20"><name pos:start="259:19" pos:end="259:20">bs</name></expr></argument>, <argument pos:start="259:23" pos:end="259:30"><expr pos:start="259:23" pos:end="259:30"><name pos:start="259:23" pos:end="259:30">filename</name></expr></argument>, <argument pos:start="259:33" pos:end="259:47"><expr pos:start="259:33" pos:end="259:47"><name pos:start="259:33" pos:end="259:47">BDRV_O_CACHE_WB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="261:9" pos:end="261:24"><expr pos:start="261:9" pos:end="261:23"><call pos:start="261:9" pos:end="261:23"><name pos:start="261:9" pos:end="261:19">preallocate</name><argument_list pos:start="261:20" pos:end="261:23">(<argument pos:start="261:21" pos:end="261:22"><expr pos:start="261:21" pos:end="261:22"><name pos:start="261:21" pos:end="261:22">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="263:9" pos:end="263:23"><expr pos:start="263:9" pos:end="263:22"><call pos:start="263:9" pos:end="263:22"><name pos:start="263:9" pos:end="263:18">bdrv_close</name><argument_list pos:start="263:19" pos:end="263:22">(<argument pos:start="263:20" pos:end="263:21"><expr pos:start="263:20" pos:end="263:21"><name pos:start="263:20" pos:end="263:21">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="269:5" pos:end="269:13">return <expr pos:start="269:12" pos:end="269:12"><literal type="number" pos:start="269:12" pos:end="269:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
