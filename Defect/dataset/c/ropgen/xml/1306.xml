<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/1306.c" pos:tabs="8"><function pos:start="1:1" pos:end="219:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:17">backup_start</name><parameter_list pos:start="1:18" pos:end="13:49">(<parameter pos:start="1:19" pos:end="1:38"><decl pos:start="1:19" pos:end="1:38"><type pos:start="1:19" pos:end="1:38"><name pos:start="1:19" pos:end="1:34">BlockDriverState</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:38">bs</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:64"><decl pos:start="1:41" pos:end="1:64"><type pos:start="1:41" pos:end="1:64"><name pos:start="1:41" pos:end="1:56">BlockDriverState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:64">target</name></decl></parameter>,

                  <parameter pos:start="3:19" pos:end="3:31"><decl pos:start="3:19" pos:end="3:31"><type pos:start="3:19" pos:end="3:31"><name pos:start="3:19" pos:end="3:25">int64_t</name></type> <name pos:start="3:27" pos:end="3:31">speed</name></decl></parameter>, <parameter pos:start="3:34" pos:end="3:57"><decl pos:start="3:34" pos:end="3:57"><type pos:start="3:34" pos:end="3:57"><name pos:start="3:34" pos:end="3:47">MirrorSyncMode</name></type> <name pos:start="3:49" pos:end="3:57">sync_mode</name></decl></parameter>,

                  <parameter pos:start="5:19" pos:end="5:46"><decl pos:start="5:19" pos:end="5:46"><type pos:start="5:19" pos:end="5:46"><name pos:start="5:19" pos:end="5:33">BdrvDirtyBitmap</name> <modifier pos:start="5:35" pos:end="5:35">*</modifier></type><name pos:start="5:36" pos:end="5:46">sync_bitmap</name></decl></parameter>,

                  <parameter pos:start="7:19" pos:end="7:49"><decl pos:start="7:19" pos:end="7:49"><type pos:start="7:19" pos:end="7:49"><name pos:start="7:19" pos:end="7:33">BlockdevOnError</name></type> <name pos:start="7:35" pos:end="7:49">on_source_error</name></decl></parameter>,

                  <parameter pos:start="9:19" pos:end="9:49"><decl pos:start="9:19" pos:end="9:49"><type pos:start="9:19" pos:end="9:49"><name pos:start="9:19" pos:end="9:33">BlockdevOnError</name></type> <name pos:start="9:35" pos:end="9:49">on_target_error</name></decl></parameter>,

                  <parameter pos:start="11:19" pos:end="11:41"><decl pos:start="11:19" pos:end="11:41"><type pos:start="11:19" pos:end="11:41"><name pos:start="11:19" pos:end="11:37">BlockCompletionFunc</name> <modifier pos:start="11:39" pos:end="11:39">*</modifier></type><name pos:start="11:40" pos:end="11:41">cb</name></decl></parameter>, <parameter pos:start="11:44" pos:end="11:55"><decl pos:start="11:44" pos:end="11:55"><type pos:start="11:44" pos:end="11:55"><name pos:start="11:44" pos:end="11:47">void</name> <modifier pos:start="11:49" pos:end="11:49">*</modifier></type><name pos:start="11:50" pos:end="11:55">opaque</name></decl></parameter>,

                  <parameter pos:start="13:19" pos:end="13:34"><decl pos:start="13:19" pos:end="13:34"><type pos:start="13:19" pos:end="13:34"><name pos:start="13:19" pos:end="13:29">BlockJobTxn</name> <modifier pos:start="13:31" pos:end="13:31">*</modifier></type><name pos:start="13:32" pos:end="13:34">txn</name></decl></parameter>, <parameter pos:start="13:37" pos:end="13:48"><decl pos:start="13:37" pos:end="13:48"><type pos:start="13:37" pos:end="13:48"><name pos:start="13:37" pos:end="13:41">Error</name> <modifier pos:start="13:43" pos:end="13:43">*</modifier><modifier pos:start="13:44" pos:end="13:44">*</modifier></type><name pos:start="13:45" pos:end="13:48">errp</name></decl></parameter>)</parameter_list>

<block pos:start="15:1" pos:end="219:1">{<block_content pos:start="17:5" pos:end="217:5">

    <decl_stmt pos:start="17:5" pos:end="17:16"><decl pos:start="17:5" pos:end="17:15"><type pos:start="17:5" pos:end="17:11"><name pos:start="17:5" pos:end="17:11">int64_t</name></type> <name pos:start="17:13" pos:end="17:15">len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:24"><decl pos:start="19:5" pos:end="19:23"><type pos:start="19:5" pos:end="19:19"><name pos:start="19:5" pos:end="19:19">BlockDriverInfo</name></type> <name pos:start="19:21" pos:end="19:23">bdi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:12"><decl pos:start="21:5" pos:end="21:11"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="25:5" pos:end="25:15"><expr pos:start="25:5" pos:end="25:14"><call pos:start="25:5" pos:end="25:14"><name pos:start="25:5" pos:end="25:10">assert</name><argument_list pos:start="25:11" pos:end="25:14">(<argument pos:start="25:12" pos:end="25:13"><expr pos:start="25:12" pos:end="25:13"><name pos:start="25:12" pos:end="25:13">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:19"><expr pos:start="27:5" pos:end="27:18"><call pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:10">assert</name><argument_list pos:start="27:11" pos:end="27:18">(<argument pos:start="27:12" pos:end="27:17"><expr pos:start="27:12" pos:end="27:17"><name pos:start="27:12" pos:end="27:17">target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:15"><expr pos:start="29:5" pos:end="29:14"><call pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:10">assert</name><argument_list pos:start="29:11" pos:end="29:14">(<argument pos:start="29:12" pos:end="29:13"><expr pos:start="29:12" pos:end="29:13"><name pos:start="29:12" pos:end="29:13">cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="33:5" pos:end="39:5"><if pos:start="33:5" pos:end="39:5">if <condition pos:start="33:8" pos:end="33:21">(<expr pos:start="33:9" pos:end="33:20"><name pos:start="33:9" pos:end="33:10">bs</name> <operator pos:start="33:12" pos:end="33:13">==</operator> <name pos:start="33:15" pos:end="33:20">target</name></expr>)</condition> <block pos:start="33:23" pos:end="39:5">{<block_content pos:start="35:9" pos:end="37:15">

        <expr_stmt pos:start="35:9" pos:end="35:65"><expr pos:start="35:9" pos:end="35:64"><call pos:start="35:9" pos:end="35:64"><name pos:start="35:9" pos:end="35:18">error_setg</name><argument_list pos:start="35:19" pos:end="35:64">(<argument pos:start="35:20" pos:end="35:23"><expr pos:start="35:20" pos:end="35:23"><name pos:start="35:20" pos:end="35:23">errp</name></expr></argument>, <argument pos:start="35:26" pos:end="35:63"><expr pos:start="35:26" pos:end="35:63"><literal type="string" pos:start="35:26" pos:end="35:63">"Source and target cannot be the same"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="37:9" pos:end="37:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="43:5" pos:end="51:5"><if pos:start="43:5" pos:end="51:5">if <condition pos:start="43:8" pos:end="43:30">(<expr pos:start="43:9" pos:end="43:29"><operator pos:start="43:9" pos:end="43:9">!</operator><call pos:start="43:10" pos:end="43:29"><name pos:start="43:10" pos:end="43:25">bdrv_is_inserted</name><argument_list pos:start="43:26" pos:end="43:29">(<argument pos:start="43:27" pos:end="43:28"><expr pos:start="43:27" pos:end="43:28"><name pos:start="43:27" pos:end="43:28">bs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="43:32" pos:end="51:5">{<block_content pos:start="45:9" pos:end="49:15">

        <expr_stmt pos:start="45:9" pos:end="47:45"><expr pos:start="45:9" pos:end="47:44"><call pos:start="45:9" pos:end="47:44"><name pos:start="45:9" pos:end="45:18">error_setg</name><argument_list pos:start="45:19" pos:end="47:44">(<argument pos:start="45:20" pos:end="45:23"><expr pos:start="45:20" pos:end="45:23"><name pos:start="45:20" pos:end="45:23">errp</name></expr></argument>, <argument pos:start="45:26" pos:end="45:53"><expr pos:start="45:26" pos:end="45:53"><literal type="string" pos:start="45:26" pos:end="45:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="47:20" pos:end="47:43"><expr pos:start="47:20" pos:end="47:43"><call pos:start="47:20" pos:end="47:43"><name pos:start="47:20" pos:end="47:39">bdrv_get_device_name</name><argument_list pos:start="47:40" pos:end="47:43">(<argument pos:start="47:41" pos:end="47:42"><expr pos:start="47:41" pos:end="47:42"><name pos:start="47:41" pos:end="47:42">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="49:9" pos:end="49:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="55:5" pos:end="63:5"><if pos:start="55:5" pos:end="63:5">if <condition pos:start="55:8" pos:end="55:34">(<expr pos:start="55:9" pos:end="55:33"><operator pos:start="55:9" pos:end="55:9">!</operator><call pos:start="55:10" pos:end="55:33"><name pos:start="55:10" pos:end="55:25">bdrv_is_inserted</name><argument_list pos:start="55:26" pos:end="55:33">(<argument pos:start="55:27" pos:end="55:32"><expr pos:start="55:27" pos:end="55:32"><name pos:start="55:27" pos:end="55:32">target</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="55:36" pos:end="63:5">{<block_content pos:start="57:9" pos:end="61:15">

        <expr_stmt pos:start="57:9" pos:end="59:49"><expr pos:start="57:9" pos:end="59:48"><call pos:start="57:9" pos:end="59:48"><name pos:start="57:9" pos:end="57:18">error_setg</name><argument_list pos:start="57:19" pos:end="59:48">(<argument pos:start="57:20" pos:end="57:23"><expr pos:start="57:20" pos:end="57:23"><name pos:start="57:20" pos:end="57:23">errp</name></expr></argument>, <argument pos:start="57:26" pos:end="57:53"><expr pos:start="57:26" pos:end="57:53"><literal type="string" pos:start="57:26" pos:end="57:53">"Device is not inserted: %s"</literal></expr></argument>,

                   <argument pos:start="59:20" pos:end="59:47"><expr pos:start="59:20" pos:end="59:47"><call pos:start="59:20" pos:end="59:47"><name pos:start="59:20" pos:end="59:39">bdrv_get_device_name</name><argument_list pos:start="59:40" pos:end="59:47">(<argument pos:start="59:41" pos:end="59:46"><expr pos:start="59:41" pos:end="59:46"><name pos:start="59:41" pos:end="59:46">target</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="61:9" pos:end="61:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:66">(<expr pos:start="67:9" pos:end="67:65"><call pos:start="67:9" pos:end="67:65"><name pos:start="67:9" pos:end="67:26">bdrv_op_is_blocked</name><argument_list pos:start="67:27" pos:end="67:65">(<argument pos:start="67:28" pos:end="67:29"><expr pos:start="67:28" pos:end="67:29"><name pos:start="67:28" pos:end="67:29">bs</name></expr></argument>, <argument pos:start="67:32" pos:end="67:58"><expr pos:start="67:32" pos:end="67:58"><name pos:start="67:32" pos:end="67:58">BLOCK_OP_TYPE_BACKUP_SOURCE</name></expr></argument>, <argument pos:start="67:61" pos:end="67:64"><expr pos:start="67:61" pos:end="67:64"><name pos:start="67:61" pos:end="67:64">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:68" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:15">

        <return pos:start="69:9" pos:end="69:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="75:5" pos:end="79:5"><if pos:start="75:5" pos:end="79:5">if <condition pos:start="75:8" pos:end="75:70">(<expr pos:start="75:9" pos:end="75:69"><call pos:start="75:9" pos:end="75:69"><name pos:start="75:9" pos:end="75:26">bdrv_op_is_blocked</name><argument_list pos:start="75:27" pos:end="75:69">(<argument pos:start="75:28" pos:end="75:33"><expr pos:start="75:28" pos:end="75:33"><name pos:start="75:28" pos:end="75:33">target</name></expr></argument>, <argument pos:start="75:36" pos:end="75:62"><expr pos:start="75:36" pos:end="75:62"><name pos:start="75:36" pos:end="75:62">BLOCK_OP_TYPE_BACKUP_TARGET</name></expr></argument>, <argument pos:start="75:65" pos:end="75:68"><expr pos:start="75:65" pos:end="75:68"><name pos:start="75:65" pos:end="75:68">errp</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:72" pos:end="79:5">{<block_content pos:start="77:9" pos:end="77:15">

        <return pos:start="77:9" pos:end="77:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="83:5" pos:end="117:5"><if pos:start="83:5" pos:end="105:5">if <condition pos:start="83:8" pos:end="83:50">(<expr pos:start="83:9" pos:end="83:49"><name pos:start="83:9" pos:end="83:17">sync_mode</name> <operator pos:start="83:19" pos:end="83:20">==</operator> <name pos:start="83:22" pos:end="83:49">MIRROR_SYNC_MODE_INCREMENTAL</name></expr>)</condition> <block pos:start="83:52" pos:end="105:5">{<block_content pos:start="85:9" pos:end="103:9">

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:25">(<expr pos:start="85:13" pos:end="85:24"><operator pos:start="85:13" pos:end="85:13">!</operator><name pos:start="85:14" pos:end="85:24">sync_bitmap</name></expr>)</condition> <block pos:start="85:27" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:19">

            <expr_stmt pos:start="87:13" pos:end="89:58"><expr pos:start="87:13" pos:end="89:57"><call pos:start="87:13" pos:end="89:57"><name pos:start="87:13" pos:end="87:22">error_setg</name><argument_list pos:start="87:23" pos:end="89:57">(<argument pos:start="87:24" pos:end="87:27"><expr pos:start="87:24" pos:end="87:27"><name pos:start="87:24" pos:end="87:27">errp</name></expr></argument>, <argument pos:start="87:30" pos:end="89:56"><expr pos:start="87:30" pos:end="89:56"><literal type="string" pos:start="87:30" pos:end="87:68">"must provide a valid bitmap name for "</literal>

                             <literal type="string" pos:start="89:30" pos:end="89:56">"\"incremental\" sync mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <comment type="block" pos:start="97:9" pos:end="97:63">/* Create a new bitmap, and freeze/disable this one. */</comment>

        <if_stmt pos:start="99:9" pos:end="103:9"><if pos:start="99:9" pos:end="103:9">if <condition pos:start="99:12" pos:end="99:74">(<expr pos:start="99:13" pos:end="99:73"><call pos:start="99:13" pos:end="99:69"><name pos:start="99:13" pos:end="99:46">bdrv_dirty_bitmap_create_successor</name><argument_list pos:start="99:47" pos:end="99:69">(<argument pos:start="99:48" pos:end="99:49"><expr pos:start="99:48" pos:end="99:49"><name pos:start="99:48" pos:end="99:49">bs</name></expr></argument>, <argument pos:start="99:52" pos:end="99:62"><expr pos:start="99:52" pos:end="99:62"><name pos:start="99:52" pos:end="99:62">sync_bitmap</name></expr></argument>, <argument pos:start="99:65" pos:end="99:68"><expr pos:start="99:65" pos:end="99:68"><name pos:start="99:65" pos:end="99:68">errp</name></expr></argument>)</argument_list></call> <operator pos:start="99:71" pos:end="99:71">&lt;</operator> <literal type="number" pos:start="99:73" pos:end="99:73">0</literal></expr>)</condition> <block pos:start="99:76" pos:end="103:9">{<block_content pos:start="101:13" pos:end="101:19">

            <return pos:start="101:13" pos:end="101:19">return;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="105:7" pos:end="117:5">else if <condition pos:start="105:15" pos:end="105:27">(<expr pos:start="105:16" pos:end="105:26"><name pos:start="105:16" pos:end="105:26">sync_bitmap</name></expr>)</condition> <block pos:start="105:29" pos:end="117:5">{<block_content pos:start="107:9" pos:end="115:15">

        <expr_stmt pos:start="107:9" pos:end="113:53"><expr pos:start="107:9" pos:end="113:52"><call pos:start="107:9" pos:end="113:52"><name pos:start="107:9" pos:end="107:18">error_setg</name><argument_list pos:start="107:19" pos:end="113:52">(<argument pos:start="107:20" pos:end="107:23"><expr pos:start="107:20" pos:end="107:23"><name pos:start="107:20" pos:end="107:23">errp</name></expr></argument>,

                   <argument pos:start="109:20" pos:end="111:64"><expr pos:start="109:20" pos:end="111:64"><literal type="string" pos:start="109:20" pos:end="109:63">"a sync_bitmap was provided to backup_run, "</literal>

                   <literal type="string" pos:start="111:20" pos:end="111:64">"but received an incompatible sync_mode (%s)"</literal></expr></argument>,

                   <argument pos:start="113:20" pos:end="113:51"><expr pos:start="113:20" pos:end="113:51"><name pos:start="113:20" pos:end="113:51"><name pos:start="113:20" pos:end="113:40">MirrorSyncMode_lookup</name><index pos:start="113:41" pos:end="113:51">[<expr pos:start="113:42" pos:end="113:50"><name pos:start="113:42" pos:end="113:50">sync_mode</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="115:9" pos:end="115:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:29"><expr pos:start="121:5" pos:end="121:28"><name pos:start="121:5" pos:end="121:7">len</name> <operator pos:start="121:9" pos:end="121:9">=</operator> <call pos:start="121:11" pos:end="121:28"><name pos:start="121:11" pos:end="121:24">bdrv_getlength</name><argument_list pos:start="121:25" pos:end="121:28">(<argument pos:start="121:26" pos:end="121:27"><expr pos:start="121:26" pos:end="121:27"><name pos:start="121:26" pos:end="121:27">bs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="123:5" pos:end="131:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:16">(<expr pos:start="123:9" pos:end="123:15"><name pos:start="123:9" pos:end="123:11">len</name> <operator pos:start="123:13" pos:end="123:13">&lt;</operator> <literal type="number" pos:start="123:15" pos:end="123:15">0</literal></expr>)</condition> <block pos:start="123:18" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:19">

        <expr_stmt pos:start="125:9" pos:end="127:51"><expr pos:start="125:9" pos:end="127:50"><call pos:start="125:9" pos:end="127:50"><name pos:start="125:9" pos:end="125:24">error_setg_errno</name><argument_list pos:start="125:25" pos:end="127:50">(<argument pos:start="125:26" pos:end="125:29"><expr pos:start="125:26" pos:end="125:29"><name pos:start="125:26" pos:end="125:29">errp</name></expr></argument>, <argument pos:start="125:32" pos:end="125:35"><expr pos:start="125:32" pos:end="125:35"><operator pos:start="125:32" pos:end="125:32">-</operator><name pos:start="125:33" pos:end="125:35">len</name></expr></argument>, <argument pos:start="125:38" pos:end="125:68"><expr pos:start="125:38" pos:end="125:68"><literal type="string" pos:start="125:38" pos:end="125:68">"unable to get length for '%s'"</literal></expr></argument>,

                         <argument pos:start="127:26" pos:end="127:49"><expr pos:start="127:26" pos:end="127:49"><call pos:start="127:26" pos:end="127:49"><name pos:start="127:26" pos:end="127:45">bdrv_get_device_name</name><argument_list pos:start="127:46" pos:end="127:49">(<argument pos:start="127:47" pos:end="127:48"><expr pos:start="127:47" pos:end="127:48"><name pos:start="127:47" pos:end="127:48">bs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="129:9" pos:end="129:19">goto <name pos:start="129:14" pos:end="129:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <decl_stmt pos:start="135:5" pos:end="137:61"><decl pos:start="135:5" pos:end="137:60"><type pos:start="135:5" pos:end="135:20"><name pos:start="135:5" pos:end="135:18">BackupBlockJob</name> <modifier pos:start="135:20" pos:end="135:20">*</modifier></type><name pos:start="135:21" pos:end="135:23">job</name> <init pos:start="135:25" pos:end="137:60">= <expr pos:start="135:27" pos:end="137:60"><call pos:start="135:27" pos:end="137:60"><name pos:start="135:27" pos:end="135:42">block_job_create</name><argument_list pos:start="135:43" pos:end="137:60">(<argument pos:start="135:44" pos:end="135:61"><expr pos:start="135:44" pos:end="135:61"><operator pos:start="135:44" pos:end="135:44">&amp;</operator><name pos:start="135:45" pos:end="135:61">backup_job_driver</name></expr></argument>, <argument pos:start="135:64" pos:end="135:65"><expr pos:start="135:64" pos:end="135:65"><name pos:start="135:64" pos:end="135:65">bs</name></expr></argument>, <argument pos:start="135:68" pos:end="135:72"><expr pos:start="135:68" pos:end="135:72"><name pos:start="135:68" pos:end="135:72">speed</name></expr></argument>,

                                           <argument pos:start="137:44" pos:end="137:45"><expr pos:start="137:44" pos:end="137:45"><name pos:start="137:44" pos:end="137:45">cb</name></expr></argument>, <argument pos:start="137:48" pos:end="137:53"><expr pos:start="137:48" pos:end="137:53"><name pos:start="137:48" pos:end="137:53">opaque</name></expr></argument>, <argument pos:start="137:56" pos:end="137:59"><expr pos:start="137:56" pos:end="137:59"><name pos:start="137:56" pos:end="137:59">errp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt pos:start="139:5" pos:end="143:5"><if pos:start="139:5" pos:end="143:5">if <condition pos:start="139:8" pos:end="139:13">(<expr pos:start="139:9" pos:end="139:12"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:12">job</name></expr>)</condition> <block pos:start="139:15" pos:end="143:5">{<block_content pos:start="141:9" pos:end="141:19">

        <goto pos:start="141:9" pos:end="141:19">goto <name pos:start="141:14" pos:end="141:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="147:5" pos:end="147:43"><expr pos:start="147:5" pos:end="147:42"><name pos:start="147:5" pos:end="147:24"><name pos:start="147:5" pos:end="147:7">job</name><operator pos:start="147:8" pos:end="147:9">-&gt;</operator><name pos:start="147:10" pos:end="147:24">on_source_error</name></name> <operator pos:start="147:26" pos:end="147:26">=</operator> <name pos:start="147:28" pos:end="147:42">on_source_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="149:5" pos:end="149:43"><expr pos:start="149:5" pos:end="149:42"><name pos:start="149:5" pos:end="149:24"><name pos:start="149:5" pos:end="149:7">job</name><operator pos:start="149:8" pos:end="149:9">-&gt;</operator><name pos:start="149:10" pos:end="149:24">on_target_error</name></name> <operator pos:start="149:26" pos:end="149:26">=</operator> <name pos:start="149:28" pos:end="149:42">on_target_error</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:25"><expr pos:start="151:5" pos:end="151:24"><name pos:start="151:5" pos:end="151:15"><name pos:start="151:5" pos:end="151:7">job</name><operator pos:start="151:8" pos:end="151:9">-&gt;</operator><name pos:start="151:10" pos:end="151:15">target</name></name> <operator pos:start="151:17" pos:end="151:17">=</operator> <name pos:start="151:19" pos:end="151:24">target</name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:31"><expr pos:start="153:5" pos:end="153:30"><name pos:start="153:5" pos:end="153:18"><name pos:start="153:5" pos:end="153:7">job</name><operator pos:start="153:8" pos:end="153:9">-&gt;</operator><name pos:start="153:10" pos:end="153:18">sync_mode</name></name> <operator pos:start="153:20" pos:end="153:20">=</operator> <name pos:start="153:22" pos:end="153:30">sync_mode</name></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="157:42"><expr pos:start="155:5" pos:end="157:41"><name pos:start="155:5" pos:end="155:20"><name pos:start="155:5" pos:end="155:7">job</name><operator pos:start="155:8" pos:end="155:9">-&gt;</operator><name pos:start="155:10" pos:end="155:20">sync_bitmap</name></name> <operator pos:start="155:22" pos:end="155:22">=</operator> <ternary pos:start="155:24" pos:end="157:41"><condition pos:start="155:24" pos:end="155:66"><expr pos:start="155:24" pos:end="155:64"><name pos:start="155:24" pos:end="155:32">sync_mode</name> <operator pos:start="155:34" pos:end="155:35">==</operator> <name pos:start="155:37" pos:end="155:64">MIRROR_SYNC_MODE_INCREMENTAL</name></expr> ?</condition><then pos:start="157:24" pos:end="157:34">

                       <expr pos:start="157:24" pos:end="157:34"><name pos:start="157:24" pos:end="157:34">sync_bitmap</name></expr> </then><else pos:start="157:36" pos:end="157:41">: <expr pos:start="157:38" pos:end="157:41"><name pos:start="157:38" pos:end="157:41">NULL</name></expr></else></ternary></expr>;</expr_stmt>



    <comment type="block" pos:start="161:5" pos:end="165:68">/* If there is no backing file on the target, we cannot rely on COW if our

     * backup cluster size is smaller than the target cluster size. Even for

     * targets with a backing file, try to avoid COW if possible. */</comment>

    <expr_stmt pos:start="167:5" pos:end="167:43"><expr pos:start="167:5" pos:end="167:42"><name pos:start="167:5" pos:end="167:7">ret</name> <operator pos:start="167:9" pos:end="167:9">=</operator> <call pos:start="167:11" pos:end="167:42"><name pos:start="167:11" pos:end="167:23">bdrv_get_info</name><argument_list pos:start="167:24" pos:end="167:42">(<argument pos:start="167:25" pos:end="167:35"><expr pos:start="167:25" pos:end="167:35"><name pos:start="167:25" pos:end="167:35"><name pos:start="167:25" pos:end="167:27">job</name><operator pos:start="167:28" pos:end="167:29">-&gt;</operator><name pos:start="167:30" pos:end="167:35">target</name></name></expr></argument>, <argument pos:start="167:38" pos:end="167:41"><expr pos:start="167:38" pos:end="167:41"><operator pos:start="167:38" pos:end="167:38">&amp;</operator><name pos:start="167:39" pos:end="167:41">bdi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="169:5" pos:end="193:5"><if pos:start="169:5" pos:end="183:5">if <condition pos:start="169:8" pos:end="169:36">(<expr pos:start="169:9" pos:end="169:35"><name pos:start="169:9" pos:end="169:11">ret</name> <operator pos:start="169:13" pos:end="169:13">&lt;</operator> <literal type="number" pos:start="169:15" pos:end="169:15">0</literal> <operator pos:start="169:17" pos:end="169:18">&amp;&amp;</operator> <operator pos:start="169:20" pos:end="169:20">!</operator><name pos:start="169:21" pos:end="169:35"><name pos:start="169:21" pos:end="169:26">target</name><operator pos:start="169:27" pos:end="169:28">-&gt;</operator><name pos:start="169:29" pos:end="169:35">backing</name></name></expr>)</condition> <block pos:start="169:38" pos:end="183:5">{<block_content pos:start="171:9" pos:end="181:19">

        <expr_stmt pos:start="171:9" pos:end="175:41"><expr pos:start="171:9" pos:end="175:40"><call pos:start="171:9" pos:end="175:40"><name pos:start="171:9" pos:end="171:24">error_setg_errno</name><argument_list pos:start="171:25" pos:end="175:40">(<argument pos:start="171:26" pos:end="171:29"><expr pos:start="171:26" pos:end="171:29"><name pos:start="171:26" pos:end="171:29">errp</name></expr></argument>, <argument pos:start="171:32" pos:end="171:35"><expr pos:start="171:32" pos:end="171:35"><operator pos:start="171:32" pos:end="171:32">-</operator><name pos:start="171:33" pos:end="171:35">ret</name></expr></argument>,

            <argument pos:start="173:13" pos:end="175:39"><expr pos:start="173:13" pos:end="175:39"><literal type="string" pos:start="173:13" pos:end="173:71">"Couldn't determine the cluster size of the target image, "</literal>

            <literal type="string" pos:start="175:13" pos:end="175:39">"which has no backing file"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="179:79"><expr pos:start="177:9" pos:end="179:78"><call pos:start="177:9" pos:end="179:78"><name pos:start="177:9" pos:end="177:25">error_append_hint</name><argument_list pos:start="177:26" pos:end="179:78">(<argument pos:start="177:27" pos:end="177:30"><expr pos:start="177:27" pos:end="177:30"><name pos:start="177:27" pos:end="177:30">errp</name></expr></argument>,

            <argument pos:start="179:13" pos:end="179:77"><expr pos:start="179:13" pos:end="179:77"><literal type="string" pos:start="179:13" pos:end="179:77">"Aborting, since this may create an unusable destination image\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="181:9" pos:end="181:19">goto <name pos:start="181:14" pos:end="181:18">error</name>;</goto>

    </block_content>}</block></if> <if type="elseif" pos:start="183:7" pos:end="189:5">else if <condition pos:start="183:15" pos:end="183:42">(<expr pos:start="183:16" pos:end="183:41"><name pos:start="183:16" pos:end="183:18">ret</name> <operator pos:start="183:20" pos:end="183:20">&lt;</operator> <literal type="number" pos:start="183:22" pos:end="183:22">0</literal> <operator pos:start="183:24" pos:end="183:25">&amp;&amp;</operator> <name pos:start="183:27" pos:end="183:41"><name pos:start="183:27" pos:end="183:32">target</name><operator pos:start="183:33" pos:end="183:34">-&gt;</operator><name pos:start="183:35" pos:end="183:41">backing</name></name></expr>)</condition> <block pos:start="183:44" pos:end="189:5">{<block_content pos:start="187:9" pos:end="187:56">

        <comment type="block" pos:start="185:9" pos:end="185:46">/* Not fatal; just trudge on ahead. */</comment>

        <expr_stmt pos:start="187:9" pos:end="187:56"><expr pos:start="187:9" pos:end="187:55"><name pos:start="187:9" pos:end="187:25"><name pos:start="187:9" pos:end="187:11">job</name><operator pos:start="187:12" pos:end="187:13">-&gt;</operator><name pos:start="187:14" pos:end="187:25">cluster_size</name></name> <operator pos:start="187:27" pos:end="187:27">=</operator> <name pos:start="187:29" pos:end="187:55">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="189:7" pos:end="193:5">else <block pos:start="189:12" pos:end="193:5">{<block_content pos:start="191:9" pos:end="191:79">

        <expr_stmt pos:start="191:9" pos:end="191:79"><expr pos:start="191:9" pos:end="191:78"><name pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:11">job</name><operator pos:start="191:12" pos:end="191:13">-&gt;</operator><name pos:start="191:14" pos:end="191:25">cluster_size</name></name> <operator pos:start="191:27" pos:end="191:27">=</operator> <call pos:start="191:29" pos:end="191:78"><name pos:start="191:29" pos:end="191:31">MAX</name><argument_list pos:start="191:32" pos:end="191:78">(<argument pos:start="191:33" pos:end="191:59"><expr pos:start="191:33" pos:end="191:59"><name pos:start="191:33" pos:end="191:59">BACKUP_CLUSTER_SIZE_DEFAULT</name></expr></argument>, <argument pos:start="191:62" pos:end="191:77"><expr pos:start="191:62" pos:end="191:77"><name pos:start="191:62" pos:end="191:77"><name pos:start="191:62" pos:end="191:64">bdi</name><operator pos:start="191:65" pos:end="191:65">.</operator><name pos:start="191:66" pos:end="191:77">cluster_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="197:5" pos:end="197:51"><expr pos:start="197:5" pos:end="197:50"><call pos:start="197:5" pos:end="197:50"><name pos:start="197:5" pos:end="197:21">bdrv_op_block_all</name><argument_list pos:start="197:22" pos:end="197:50">(<argument pos:start="197:23" pos:end="197:28"><expr pos:start="197:23" pos:end="197:28"><name pos:start="197:23" pos:end="197:28">target</name></expr></argument>, <argument pos:start="197:31" pos:end="197:49"><expr pos:start="197:31" pos:end="197:49"><name pos:start="197:31" pos:end="197:49"><name pos:start="197:31" pos:end="197:33">job</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:41">common</name><operator pos:start="197:42" pos:end="197:42">.</operator><name pos:start="197:43" pos:end="197:49">blocker</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="199:5" pos:end="199:26"><expr pos:start="199:5" pos:end="199:25"><name pos:start="199:5" pos:end="199:19"><name pos:start="199:5" pos:end="199:7">job</name><operator pos:start="199:8" pos:end="199:9">-&gt;</operator><name pos:start="199:10" pos:end="199:15">common</name><operator pos:start="199:16" pos:end="199:16">.</operator><name pos:start="199:17" pos:end="199:19">len</name></name> <operator pos:start="199:21" pos:end="199:21">=</operator> <name pos:start="199:23" pos:end="199:25">len</name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:55"><expr pos:start="201:5" pos:end="201:54"><name pos:start="201:5" pos:end="201:18"><name pos:start="201:5" pos:end="201:7">job</name><operator pos:start="201:8" pos:end="201:9">-&gt;</operator><name pos:start="201:10" pos:end="201:15">common</name><operator pos:start="201:16" pos:end="201:16">.</operator><name pos:start="201:17" pos:end="201:18">co</name></name> <operator pos:start="201:20" pos:end="201:20">=</operator> <call pos:start="201:22" pos:end="201:54"><name pos:start="201:22" pos:end="201:42">qemu_coroutine_create</name><argument_list pos:start="201:43" pos:end="201:54">(<argument pos:start="201:44" pos:end="201:53"><expr pos:start="201:44" pos:end="201:53"><name pos:start="201:44" pos:end="201:53">backup_run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:45"><expr pos:start="203:5" pos:end="203:44"><call pos:start="203:5" pos:end="203:44"><name pos:start="203:5" pos:end="203:25">block_job_txn_add_job</name><argument_list pos:start="203:26" pos:end="203:44">(<argument pos:start="203:27" pos:end="203:29"><expr pos:start="203:27" pos:end="203:29"><name pos:start="203:27" pos:end="203:29">txn</name></expr></argument>, <argument pos:start="203:32" pos:end="203:43"><expr pos:start="203:32" pos:end="203:43"><operator pos:start="203:32" pos:end="203:32">&amp;</operator><name pos:start="203:33" pos:end="203:43"><name pos:start="203:33" pos:end="203:35">job</name><operator pos:start="203:36" pos:end="203:37">-&gt;</operator><name pos:start="203:38" pos:end="203:43">common</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="205:5" pos:end="205:46"><expr pos:start="205:5" pos:end="205:45"><call pos:start="205:5" pos:end="205:45"><name pos:start="205:5" pos:end="205:24">qemu_coroutine_enter</name><argument_list pos:start="205:25" pos:end="205:45">(<argument pos:start="205:26" pos:end="205:39"><expr pos:start="205:26" pos:end="205:39"><name pos:start="205:26" pos:end="205:39"><name pos:start="205:26" pos:end="205:28">job</name><operator pos:start="205:29" pos:end="205:30">-&gt;</operator><name pos:start="205:31" pos:end="205:36">common</name><operator pos:start="205:37" pos:end="205:37">.</operator><name pos:start="205:38" pos:end="205:39">co</name></name></expr></argument>, <argument pos:start="205:42" pos:end="205:44"><expr pos:start="205:42" pos:end="205:44"><name pos:start="205:42" pos:end="205:44">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="207:5" pos:end="207:11">return;</return>



 <label pos:start="211:2" pos:end="211:7"><name pos:start="211:2" pos:end="211:6">error</name>:</label>

    <if_stmt pos:start="213:5" pos:end="217:5"><if pos:start="213:5" pos:end="217:5">if <condition pos:start="213:8" pos:end="213:20">(<expr pos:start="213:9" pos:end="213:19"><name pos:start="213:9" pos:end="213:19">sync_bitmap</name></expr>)</condition> <block pos:start="213:22" pos:end="217:5">{<block_content pos:start="215:9" pos:end="215:57">

        <expr_stmt pos:start="215:9" pos:end="215:57"><expr pos:start="215:9" pos:end="215:56"><call pos:start="215:9" pos:end="215:56"><name pos:start="215:9" pos:end="215:33">bdrv_reclaim_dirty_bitmap</name><argument_list pos:start="215:34" pos:end="215:56">(<argument pos:start="215:35" pos:end="215:36"><expr pos:start="215:35" pos:end="215:36"><name pos:start="215:35" pos:end="215:36">bs</name></expr></argument>, <argument pos:start="215:39" pos:end="215:49"><expr pos:start="215:39" pos:end="215:49"><name pos:start="215:39" pos:end="215:49">sync_bitmap</name></expr></argument>, <argument pos:start="215:52" pos:end="215:55"><expr pos:start="215:52" pos:end="215:55"><name pos:start="215:52" pos:end="215:55">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
