<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11605.c" pos:tabs="8"><function pos:start="1:1" pos:end="307:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:38">dca_exss_parse_asset_header</name><parameter_list pos:start="1:39" pos:end="1:53">(<parameter pos:start="1:40" pos:end="1:52"><decl pos:start="1:40" pos:end="1:52"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:49">DCAContext</name> <modifier pos:start="1:51" pos:end="1:51">*</modifier></type><name pos:start="1:52" pos:end="1:52">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="307:1">{<block_content pos:start="5:5" pos:end="305:13">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:18">header_pos</name> <init pos:start="5:20" pos:end="5:43">= <expr pos:start="5:22" pos:end="5:43"><call pos:start="5:22" pos:end="5:43"><name pos:start="5:22" pos:end="5:35">get_bits_count</name><argument_list pos:start="5:36" pos:end="5:43">(<argument pos:start="5:37" pos:end="5:42"><expr pos:start="5:37" pos:end="5:42"><operator pos:start="5:37" pos:end="5:37">&amp;</operator><name pos:start="5:38" pos:end="5:42"><name pos:start="5:38" pos:end="5:38">s</name><operator pos:start="5:39" pos:end="5:40">-&gt;</operator><name pos:start="5:41" pos:end="5:42">gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:19">header_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:17"><decl pos:start="9:5" pos:end="9:16"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">channels</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:23">embedded_stereo</name> <init pos:start="11:25" pos:end="11:27">= <expr pos:start="11:27" pos:end="11:27"><literal type="number" pos:start="11:27" pos:end="11:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">embedded_6ch</name>    <init pos:start="13:25" pos:end="13:27">= <expr pos:start="13:27" pos:end="13:27"><literal type="number" pos:start="13:27" pos:end="13:27">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:25"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:24">drc_code_present</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:24"><decl pos:start="17:5" pos:end="17:23"><type pos:start="17:5" pos:end="17:7"><name pos:start="17:5" pos:end="17:7">int</name></type> <name pos:start="17:9" pos:end="17:23">extensions_mask</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:13"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>, <decl pos:start="19:12" pos:end="19:12"><type ref="prev" pos:start="19:5" pos:end="19:7"/><name pos:start="19:12" pos:end="19:12">j</name></decl>;</decl_stmt>



    <if_stmt pos:start="23:5" pos:end="25:18"><if pos:start="23:5" pos:end="25:18">if <condition pos:start="23:8" pos:end="23:35">(<expr pos:start="23:9" pos:end="23:34"><call pos:start="23:9" pos:end="23:29"><name pos:start="23:9" pos:end="23:21">get_bits_left</name><argument_list pos:start="23:22" pos:end="23:29">(<argument pos:start="23:23" pos:end="23:28"><expr pos:start="23:23" pos:end="23:28"><operator pos:start="23:23" pos:end="23:23">&amp;</operator><name pos:start="23:24" pos:end="23:28"><name pos:start="23:24" pos:end="23:24">s</name><operator pos:start="23:25" pos:end="23:26">-&gt;</operator><name pos:start="23:27" pos:end="23:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="23:31" pos:end="23:31">&lt;</operator> <literal type="number" pos:start="23:33" pos:end="23:34">16</literal></expr>)</condition><block type="pseudo" pos:start="25:9" pos:end="25:18"><block_content pos:start="25:9" pos:end="25:18">

        <return pos:start="25:9" pos:end="25:18">return <expr pos:start="25:16" pos:end="25:17"><operator pos:start="25:16" pos:end="25:16">-</operator><literal type="number" pos:start="25:17" pos:end="25:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="29:5" pos:end="31:39">/* We will parse just enough to get to the extensions bitmask with which

     * we can set the profile value. */</comment>



    <expr_stmt pos:start="35:5" pos:end="35:42"><expr pos:start="35:5" pos:end="35:41"><name pos:start="35:5" pos:end="35:15">header_size</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:37"><name pos:start="35:19" pos:end="35:26">get_bits</name><argument_list pos:start="35:27" pos:end="35:37">(<argument pos:start="35:28" pos:end="35:33"><expr pos:start="35:28" pos:end="35:33"><operator pos:start="35:28" pos:end="35:28">&amp;</operator><name pos:start="35:29" pos:end="35:33"><name pos:start="35:29" pos:end="35:29">s</name><operator pos:start="35:30" pos:end="35:31">-&gt;</operator><name pos:start="35:32" pos:end="35:33">gb</name></name></expr></argument>, <argument pos:start="35:36" pos:end="35:36"><expr pos:start="35:36" pos:end="35:36"><literal type="number" pos:start="35:36" pos:end="35:36">9</literal></expr></argument>)</argument_list></call> <operator pos:start="35:39" pos:end="35:39">+</operator> <literal type="number" pos:start="35:41" pos:end="35:41">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><call pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:13">skip_bits</name><argument_list pos:start="37:14" pos:end="37:24">(<argument pos:start="37:15" pos:end="37:20"><expr pos:start="37:15" pos:end="37:20"><operator pos:start="37:15" pos:end="37:15">&amp;</operator><name pos:start="37:16" pos:end="37:20"><name pos:start="37:16" pos:end="37:16">s</name><operator pos:start="37:17" pos:end="37:18">-&gt;</operator><name pos:start="37:19" pos:end="37:20">gb</name></name></expr></argument>, <argument pos:start="37:23" pos:end="37:23"><expr pos:start="37:23" pos:end="37:23"><literal type="number" pos:start="37:23" pos:end="37:23">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="37:27" pos:end="37:40">// asset index</comment>



    <if_stmt pos:start="41:5" pos:end="151:5"><if pos:start="41:5" pos:end="151:5">if <condition pos:start="41:8" pos:end="41:25">(<expr pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:24"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:24">static_fields</name></name></expr>)</condition> <block pos:start="41:27" pos:end="151:5">{<block_content pos:start="43:9" pos:end="149:9">

        <if_stmt pos:start="43:9" pos:end="45:33"><if pos:start="43:9" pos:end="45:33">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><call pos:start="43:13" pos:end="43:29"><name pos:start="43:13" pos:end="43:21">get_bits1</name><argument_list pos:start="43:22" pos:end="43:29">(<argument pos:start="43:23" pos:end="43:28"><expr pos:start="43:23" pos:end="43:28"><operator pos:start="43:23" pos:end="43:23">&amp;</operator><name pos:start="43:24" pos:end="43:28"><name pos:start="43:24" pos:end="43:24">s</name><operator pos:start="43:25" pos:end="43:26">-&gt;</operator><name pos:start="43:27" pos:end="43:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:33"><block_content pos:start="45:13" pos:end="45:33">

            <expr_stmt pos:start="45:13" pos:end="45:33"><expr pos:start="45:13" pos:end="45:32"><call pos:start="45:13" pos:end="45:32"><name pos:start="45:13" pos:end="45:21">skip_bits</name><argument_list pos:start="45:22" pos:end="45:32">(<argument pos:start="45:23" pos:end="45:28"><expr pos:start="45:23" pos:end="45:28"><operator pos:start="45:23" pos:end="45:23">&amp;</operator><name pos:start="45:24" pos:end="45:28"><name pos:start="45:24" pos:end="45:24">s</name><operator pos:start="45:25" pos:end="45:26">-&gt;</operator><name pos:start="45:27" pos:end="45:28">gb</name></name></expr></argument>, <argument pos:start="45:31" pos:end="45:31"><expr pos:start="45:31" pos:end="45:31"><literal type="number" pos:start="45:31" pos:end="45:31">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="45:35" pos:end="45:58">// asset type descriptor</comment>

        <if_stmt pos:start="47:9" pos:end="49:39"><if pos:start="47:9" pos:end="49:39">if <condition pos:start="47:12" pos:end="47:30">(<expr pos:start="47:13" pos:end="47:29"><call pos:start="47:13" pos:end="47:29"><name pos:start="47:13" pos:end="47:21">get_bits1</name><argument_list pos:start="47:22" pos:end="47:29">(<argument pos:start="47:23" pos:end="47:28"><expr pos:start="47:23" pos:end="47:28"><operator pos:start="47:23" pos:end="47:23">&amp;</operator><name pos:start="47:24" pos:end="47:28"><name pos:start="47:24" pos:end="47:24">s</name><operator pos:start="47:25" pos:end="47:26">-&gt;</operator><name pos:start="47:27" pos:end="47:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:39"><block_content pos:start="49:13" pos:end="49:39">

            <expr_stmt pos:start="49:13" pos:end="49:39"><expr pos:start="49:13" pos:end="49:38"><call pos:start="49:13" pos:end="49:38"><name pos:start="49:13" pos:end="49:26">skip_bits_long</name><argument_list pos:start="49:27" pos:end="49:38">(<argument pos:start="49:28" pos:end="49:33"><expr pos:start="49:28" pos:end="49:33"><operator pos:start="49:28" pos:end="49:28">&amp;</operator><name pos:start="49:29" pos:end="49:33"><name pos:start="49:29" pos:end="49:29">s</name><operator pos:start="49:30" pos:end="49:31">-&gt;</operator><name pos:start="49:32" pos:end="49:33">gb</name></name></expr></argument>, <argument pos:start="49:36" pos:end="49:37"><expr pos:start="49:36" pos:end="49:37"><literal type="number" pos:start="49:36" pos:end="49:37">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="49:41" pos:end="49:62">// language descriptor</comment>



        <if_stmt pos:start="53:9" pos:end="67:9"><if pos:start="53:9" pos:end="67:9">if <condition pos:start="53:12" pos:end="53:30">(<expr pos:start="53:13" pos:end="53:29"><call pos:start="53:13" pos:end="53:29"><name pos:start="53:13" pos:end="53:21">get_bits1</name><argument_list pos:start="53:22" pos:end="53:29">(<argument pos:start="53:23" pos:end="53:28"><expr pos:start="53:23" pos:end="53:28"><operator pos:start="53:23" pos:end="53:23">&amp;</operator><name pos:start="53:24" pos:end="53:28"><name pos:start="53:24" pos:end="53:24">s</name><operator pos:start="53:25" pos:end="53:26">-&gt;</operator><name pos:start="53:27" pos:end="53:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="53:32" pos:end="67:9">{<block_content pos:start="59:13" pos:end="65:52">

            <comment type="block" pos:start="55:13" pos:end="57:70">/* How can one fit 1024 bytes of text here if the maximum value

             * for the asset header size field above was 512 bytes? */</comment>

            <decl_stmt pos:start="59:13" pos:end="59:55"><decl pos:start="59:13" pos:end="59:54"><type pos:start="59:13" pos:end="59:15"><name pos:start="59:13" pos:end="59:15">int</name></type> <name pos:start="59:17" pos:end="59:27">text_length</name> <init pos:start="59:29" pos:end="59:54">= <expr pos:start="59:31" pos:end="59:54"><call pos:start="59:31" pos:end="59:50"><name pos:start="59:31" pos:end="59:38">get_bits</name><argument_list pos:start="59:39" pos:end="59:50">(<argument pos:start="59:40" pos:end="59:45"><expr pos:start="59:40" pos:end="59:45"><operator pos:start="59:40" pos:end="59:40">&amp;</operator><name pos:start="59:41" pos:end="59:45"><name pos:start="59:41" pos:end="59:41">s</name><operator pos:start="59:42" pos:end="59:43">-&gt;</operator><name pos:start="59:44" pos:end="59:45">gb</name></name></expr></argument>, <argument pos:start="59:48" pos:end="59:49"><expr pos:start="59:48" pos:end="59:49"><literal type="number" pos:start="59:48" pos:end="59:49">10</literal></expr></argument>)</argument_list></call> <operator pos:start="59:52" pos:end="59:52">+</operator> <literal type="number" pos:start="59:54" pos:end="59:54">1</literal></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="61:13" pos:end="63:26"><if pos:start="61:13" pos:end="63:26">if <condition pos:start="61:16" pos:end="61:56">(<expr pos:start="61:17" pos:end="61:55"><call pos:start="61:17" pos:end="61:37"><name pos:start="61:17" pos:end="61:29">get_bits_left</name><argument_list pos:start="61:30" pos:end="61:37">(<argument pos:start="61:31" pos:end="61:36"><expr pos:start="61:31" pos:end="61:36"><operator pos:start="61:31" pos:end="61:31">&amp;</operator><name pos:start="61:32" pos:end="61:36"><name pos:start="61:32" pos:end="61:32">s</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:39" pos:end="61:39">&lt;</operator> <name pos:start="61:41" pos:end="61:51">text_length</name> <operator pos:start="61:53" pos:end="61:53">*</operator> <literal type="number" pos:start="61:55" pos:end="61:55">8</literal></expr>)</condition><block type="pseudo" pos:start="63:17" pos:end="63:26"><block_content pos:start="63:17" pos:end="63:26">

                <return pos:start="63:17" pos:end="63:26">return <expr pos:start="63:24" pos:end="63:25"><operator pos:start="63:24" pos:end="63:24">-</operator><literal type="number" pos:start="63:25" pos:end="63:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="65:13" pos:end="65:52"><expr pos:start="65:13" pos:end="65:51"><call pos:start="65:13" pos:end="65:51"><name pos:start="65:13" pos:end="65:26">skip_bits_long</name><argument_list pos:start="65:27" pos:end="65:51">(<argument pos:start="65:28" pos:end="65:33"><expr pos:start="65:28" pos:end="65:33"><operator pos:start="65:28" pos:end="65:28">&amp;</operator><name pos:start="65:29" pos:end="65:33"><name pos:start="65:29" pos:end="65:29">s</name><operator pos:start="65:30" pos:end="65:31">-&gt;</operator><name pos:start="65:32" pos:end="65:33">gb</name></name></expr></argument>, <argument pos:start="65:36" pos:end="65:50"><expr pos:start="65:36" pos:end="65:50"><name pos:start="65:36" pos:end="65:46">text_length</name> <operator pos:start="65:48" pos:end="65:48">*</operator> <literal type="number" pos:start="65:50" pos:end="65:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="65:54" pos:end="65:65">// info text</comment>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="71:9" pos:end="71:29"><expr pos:start="71:9" pos:end="71:28"><call pos:start="71:9" pos:end="71:28"><name pos:start="71:9" pos:end="71:17">skip_bits</name><argument_list pos:start="71:18" pos:end="71:28">(<argument pos:start="71:19" pos:end="71:24"><expr pos:start="71:19" pos:end="71:24"><operator pos:start="71:19" pos:end="71:19">&amp;</operator><name pos:start="71:20" pos:end="71:24"><name pos:start="71:20" pos:end="71:20">s</name><operator pos:start="71:21" pos:end="71:22">-&gt;</operator><name pos:start="71:23" pos:end="71:24">gb</name></name></expr></argument>, <argument pos:start="71:27" pos:end="71:27"><expr pos:start="71:27" pos:end="71:27"><literal type="number" pos:start="71:27" pos:end="71:27">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="71:31" pos:end="71:51">// bit resolution - 1</comment>

        <expr_stmt pos:start="73:9" pos:end="73:29"><expr pos:start="73:9" pos:end="73:28"><call pos:start="73:9" pos:end="73:28"><name pos:start="73:9" pos:end="73:17">skip_bits</name><argument_list pos:start="73:18" pos:end="73:28">(<argument pos:start="73:19" pos:end="73:24"><expr pos:start="73:19" pos:end="73:24"><operator pos:start="73:19" pos:end="73:19">&amp;</operator><name pos:start="73:20" pos:end="73:24"><name pos:start="73:20" pos:end="73:20">s</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:24">gb</name></name></expr></argument>, <argument pos:start="73:27" pos:end="73:27"><expr pos:start="73:27" pos:end="73:27"><literal type="number" pos:start="73:27" pos:end="73:27">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="73:31" pos:end="73:53">// max sample rate code</comment>

        <expr_stmt pos:start="75:9" pos:end="75:43"><expr pos:start="75:9" pos:end="75:42"><name pos:start="75:9" pos:end="75:16">channels</name> <operator pos:start="75:18" pos:end="75:18">=</operator> <call pos:start="75:20" pos:end="75:38"><name pos:start="75:20" pos:end="75:27">get_bits</name><argument_list pos:start="75:28" pos:end="75:38">(<argument pos:start="75:29" pos:end="75:34"><expr pos:start="75:29" pos:end="75:34"><operator pos:start="75:29" pos:end="75:29">&amp;</operator><name pos:start="75:30" pos:end="75:34"><name pos:start="75:30" pos:end="75:30">s</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:34">gb</name></name></expr></argument>, <argument pos:start="75:37" pos:end="75:37"><expr pos:start="75:37" pos:end="75:37"><literal type="number" pos:start="75:37" pos:end="75:37">8</literal></expr></argument>)</argument_list></call> <operator pos:start="75:40" pos:end="75:40">+</operator> <literal type="number" pos:start="75:42" pos:end="75:42">1</literal></expr>;</expr_stmt>



        <if_stmt pos:start="79:9" pos:end="149:9"><if pos:start="79:9" pos:end="145:9">if <condition pos:start="79:12" pos:end="79:30">(<expr pos:start="79:13" pos:end="79:29"><call pos:start="79:13" pos:end="79:29"><name pos:start="79:13" pos:end="79:21">get_bits1</name><argument_list pos:start="79:22" pos:end="79:29">(<argument pos:start="79:23" pos:end="79:28"><expr pos:start="79:23" pos:end="79:28"><operator pos:start="79:23" pos:end="79:23">&amp;</operator><name pos:start="79:24" pos:end="79:28"><name pos:start="79:24" pos:end="79:24">s</name><operator pos:start="79:25" pos:end="79:26">-&gt;</operator><name pos:start="79:27" pos:end="79:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="79:32" pos:end="145:9">{<block_content pos:start="81:13" pos:end="143:13"> <comment type="line" pos:start="79:34" pos:end="79:63">// 1-to-1 channels to speakers</comment>

            <decl_stmt pos:start="81:13" pos:end="81:32"><decl pos:start="81:13" pos:end="81:31"><type pos:start="81:13" pos:end="81:15"><name pos:start="81:13" pos:end="81:15">int</name></type> <name pos:start="81:17" pos:end="81:31">spkr_remap_sets</name></decl>;</decl_stmt>

            <decl_stmt pos:start="83:13" pos:end="83:36"><decl pos:start="83:13" pos:end="83:35"><type pos:start="83:13" pos:end="83:15"><name pos:start="83:13" pos:end="83:15">int</name></type> <name pos:start="83:17" pos:end="83:30">spkr_mask_size</name> <init pos:start="83:32" pos:end="83:35">= <expr pos:start="83:34" pos:end="83:35"><literal type="number" pos:start="83:34" pos:end="83:35">16</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="85:13" pos:end="85:29"><decl pos:start="85:13" pos:end="85:28"><type pos:start="85:13" pos:end="85:15"><name pos:start="85:13" pos:end="85:15">int</name></type> <name pos:start="85:17" pos:end="85:28"><name pos:start="85:17" pos:end="85:25">num_spkrs</name><index pos:start="85:26" pos:end="85:28">[<expr pos:start="85:27" pos:end="85:27"><literal type="number" pos:start="85:27" pos:end="85:27">7</literal></expr>]</index></name></decl>;</decl_stmt>



            <if_stmt pos:start="89:13" pos:end="91:52"><if pos:start="89:13" pos:end="91:52">if <condition pos:start="89:16" pos:end="89:29">(<expr pos:start="89:17" pos:end="89:28"><name pos:start="89:17" pos:end="89:24">channels</name> <operator pos:start="89:26" pos:end="89:26">&gt;</operator> <literal type="number" pos:start="89:28" pos:end="89:28">2</literal></expr>)</condition><block type="pseudo" pos:start="91:17" pos:end="91:52"><block_content pos:start="91:17" pos:end="91:52">

                <expr_stmt pos:start="91:17" pos:end="91:52"><expr pos:start="91:17" pos:end="91:51"><name pos:start="91:17" pos:end="91:31">embedded_stereo</name> <operator pos:start="91:33" pos:end="91:33">=</operator> <call pos:start="91:35" pos:end="91:51"><name pos:start="91:35" pos:end="91:43">get_bits1</name><argument_list pos:start="91:44" pos:end="91:51">(<argument pos:start="91:45" pos:end="91:50"><expr pos:start="91:45" pos:end="91:50"><operator pos:start="91:45" pos:end="91:45">&amp;</operator><name pos:start="91:46" pos:end="91:50"><name pos:start="91:46" pos:end="91:46">s</name><operator pos:start="91:47" pos:end="91:48">-&gt;</operator><name pos:start="91:49" pos:end="91:50">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="93:13" pos:end="95:49"><if pos:start="93:13" pos:end="95:49">if <condition pos:start="93:16" pos:end="93:29">(<expr pos:start="93:17" pos:end="93:28"><name pos:start="93:17" pos:end="93:24">channels</name> <operator pos:start="93:26" pos:end="93:26">&gt;</operator> <literal type="number" pos:start="93:28" pos:end="93:28">6</literal></expr>)</condition><block type="pseudo" pos:start="95:17" pos:end="95:49"><block_content pos:start="95:17" pos:end="95:49">

                <expr_stmt pos:start="95:17" pos:end="95:49"><expr pos:start="95:17" pos:end="95:48"><name pos:start="95:17" pos:end="95:28">embedded_6ch</name> <operator pos:start="95:30" pos:end="95:30">=</operator> <call pos:start="95:32" pos:end="95:48"><name pos:start="95:32" pos:end="95:40">get_bits1</name><argument_list pos:start="95:41" pos:end="95:48">(<argument pos:start="95:42" pos:end="95:47"><expr pos:start="95:42" pos:end="95:47"><operator pos:start="95:42" pos:end="95:42">&amp;</operator><name pos:start="95:43" pos:end="95:47"><name pos:start="95:43" pos:end="95:43">s</name><operator pos:start="95:44" pos:end="95:45">-&gt;</operator><name pos:start="95:46" pos:end="95:47">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



            <if_stmt pos:start="99:13" pos:end="105:13"><if pos:start="99:13" pos:end="105:13">if <condition pos:start="99:16" pos:end="99:34">(<expr pos:start="99:17" pos:end="99:33"><call pos:start="99:17" pos:end="99:33"><name pos:start="99:17" pos:end="99:25">get_bits1</name><argument_list pos:start="99:26" pos:end="99:33">(<argument pos:start="99:27" pos:end="99:32"><expr pos:start="99:27" pos:end="99:32"><operator pos:start="99:27" pos:end="99:27">&amp;</operator><name pos:start="99:28" pos:end="99:32"><name pos:start="99:28" pos:end="99:28">s</name><operator pos:start="99:29" pos:end="99:30">-&gt;</operator><name pos:start="99:31" pos:end="99:32">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="99:36" pos:end="105:13">{<block_content pos:start="101:17" pos:end="103:50">

                <expr_stmt pos:start="101:17" pos:end="101:64"><expr pos:start="101:17" pos:end="101:63"><name pos:start="101:17" pos:end="101:30">spkr_mask_size</name> <operator pos:start="101:32" pos:end="101:32">=</operator> <operator pos:start="101:34" pos:end="101:34">(</operator><call pos:start="101:35" pos:end="101:53"><name pos:start="101:35" pos:end="101:42">get_bits</name><argument_list pos:start="101:43" pos:end="101:53">(<argument pos:start="101:44" pos:end="101:49"><expr pos:start="101:44" pos:end="101:49"><operator pos:start="101:44" pos:end="101:44">&amp;</operator><name pos:start="101:45" pos:end="101:49"><name pos:start="101:45" pos:end="101:45">s</name><operator pos:start="101:46" pos:end="101:47">-&gt;</operator><name pos:start="101:48" pos:end="101:49">gb</name></name></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><literal type="number" pos:start="101:52" pos:end="101:52">2</literal></expr></argument>)</argument_list></call> <operator pos:start="101:55" pos:end="101:55">+</operator> <literal type="number" pos:start="101:57" pos:end="101:57">1</literal><operator pos:start="101:58" pos:end="101:58">)</operator> <operator pos:start="101:60" pos:end="101:61">&lt;&lt;</operator> <literal type="number" pos:start="101:63" pos:end="101:63">2</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:50"><expr pos:start="103:17" pos:end="103:49"><call pos:start="103:17" pos:end="103:49"><name pos:start="103:17" pos:end="103:25">skip_bits</name><argument_list pos:start="103:26" pos:end="103:49">(<argument pos:start="103:27" pos:end="103:32"><expr pos:start="103:27" pos:end="103:32"><operator pos:start="103:27" pos:end="103:27">&amp;</operator><name pos:start="103:28" pos:end="103:32"><name pos:start="103:28" pos:end="103:28">s</name><operator pos:start="103:29" pos:end="103:30">-&gt;</operator><name pos:start="103:31" pos:end="103:32">gb</name></name></expr></argument>, <argument pos:start="103:35" pos:end="103:48"><expr pos:start="103:35" pos:end="103:48"><name pos:start="103:35" pos:end="103:48">spkr_mask_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="103:52" pos:end="103:72">// spkr activity mask</comment>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:50"><expr pos:start="109:13" pos:end="109:49"><name pos:start="109:13" pos:end="109:27">spkr_remap_sets</name> <operator pos:start="109:29" pos:end="109:29">=</operator> <call pos:start="109:31" pos:end="109:49"><name pos:start="109:31" pos:end="109:38">get_bits</name><argument_list pos:start="109:39" pos:end="109:49">(<argument pos:start="109:40" pos:end="109:45"><expr pos:start="109:40" pos:end="109:45"><operator pos:start="109:40" pos:end="109:40">&amp;</operator><name pos:start="109:41" pos:end="109:45"><name pos:start="109:41" pos:end="109:41">s</name><operator pos:start="109:42" pos:end="109:43">-&gt;</operator><name pos:start="109:44" pos:end="109:45">gb</name></name></expr></argument>, <argument pos:start="109:48" pos:end="109:48"><expr pos:start="109:48" pos:end="109:48"><literal type="number" pos:start="109:48" pos:end="109:48">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <for pos:start="113:13" pos:end="119:13">for <control pos:start="113:17" pos:end="113:49">(<init pos:start="113:18" pos:end="113:23"><expr pos:start="113:18" pos:end="113:22"><name pos:start="113:18" pos:end="113:18">i</name> <operator pos:start="113:20" pos:end="113:20">=</operator> <literal type="number" pos:start="113:22" pos:end="113:22">0</literal></expr>;</init> <condition pos:start="113:25" pos:end="113:44"><expr pos:start="113:25" pos:end="113:43"><name pos:start="113:25" pos:end="113:25">i</name> <operator pos:start="113:27" pos:end="113:27">&lt;</operator> <name pos:start="113:29" pos:end="113:43">spkr_remap_sets</name></expr>;</condition> <incr pos:start="113:46" pos:end="113:48"><expr pos:start="113:46" pos:end="113:48"><name pos:start="113:46" pos:end="113:46">i</name><operator pos:start="113:47" pos:end="113:48">++</operator></expr></incr>)</control> <block pos:start="113:51" pos:end="119:13">{<block_content pos:start="117:17" pos:end="117:85">

                <comment type="block" pos:start="115:17" pos:end="115:56">/* std layout mask for each remap set */</comment>

                <expr_stmt pos:start="117:17" pos:end="117:85"><expr pos:start="117:17" pos:end="117:84"><name pos:start="117:17" pos:end="117:28"><name pos:start="117:17" pos:end="117:25">num_spkrs</name><index pos:start="117:26" pos:end="117:28">[<expr pos:start="117:27" pos:end="117:27"><name pos:start="117:27" pos:end="117:27">i</name></expr>]</index></name> <operator pos:start="117:30" pos:end="117:30">=</operator> <call pos:start="117:32" pos:end="117:84"><name pos:start="117:32" pos:end="117:50">dca_exss_mask2count</name><argument_list pos:start="117:51" pos:end="117:84">(<argument pos:start="117:52" pos:end="117:83"><expr pos:start="117:52" pos:end="117:83"><call pos:start="117:52" pos:end="117:83"><name pos:start="117:52" pos:end="117:59">get_bits</name><argument_list pos:start="117:60" pos:end="117:83">(<argument pos:start="117:61" pos:end="117:66"><expr pos:start="117:61" pos:end="117:66"><operator pos:start="117:61" pos:end="117:61">&amp;</operator><name pos:start="117:62" pos:end="117:66"><name pos:start="117:62" pos:end="117:62">s</name><operator pos:start="117:63" pos:end="117:64">-&gt;</operator><name pos:start="117:65" pos:end="117:66">gb</name></name></expr></argument>, <argument pos:start="117:69" pos:end="117:82"><expr pos:start="117:69" pos:end="117:82"><name pos:start="117:69" pos:end="117:82">spkr_mask_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>



            <for pos:start="123:13" pos:end="143:13">for <control pos:start="123:17" pos:end="123:49">(<init pos:start="123:18" pos:end="123:23"><expr pos:start="123:18" pos:end="123:22"><name pos:start="123:18" pos:end="123:18">i</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <literal type="number" pos:start="123:22" pos:end="123:22">0</literal></expr>;</init> <condition pos:start="123:25" pos:end="123:44"><expr pos:start="123:25" pos:end="123:43"><name pos:start="123:25" pos:end="123:25">i</name> <operator pos:start="123:27" pos:end="123:27">&lt;</operator> <name pos:start="123:29" pos:end="123:43">spkr_remap_sets</name></expr>;</condition> <incr pos:start="123:46" pos:end="123:48"><expr pos:start="123:46" pos:end="123:48"><name pos:start="123:46" pos:end="123:46">i</name><operator pos:start="123:47" pos:end="123:48">++</operator></expr></incr>)</control> <block pos:start="123:51" pos:end="143:13">{<block_content pos:start="125:17" pos:end="141:17">

                <decl_stmt pos:start="125:17" pos:end="125:64"><decl pos:start="125:17" pos:end="125:63"><type pos:start="125:17" pos:end="125:19"><name pos:start="125:17" pos:end="125:19">int</name></type> <name pos:start="125:21" pos:end="125:37">num_dec_ch_remaps</name> <init pos:start="125:39" pos:end="125:63">= <expr pos:start="125:41" pos:end="125:63"><call pos:start="125:41" pos:end="125:59"><name pos:start="125:41" pos:end="125:48">get_bits</name><argument_list pos:start="125:49" pos:end="125:59">(<argument pos:start="125:50" pos:end="125:55"><expr pos:start="125:50" pos:end="125:55"><operator pos:start="125:50" pos:end="125:50">&amp;</operator><name pos:start="125:51" pos:end="125:55"><name pos:start="125:51" pos:end="125:51">s</name><operator pos:start="125:52" pos:end="125:53">-&gt;</operator><name pos:start="125:54" pos:end="125:55">gb</name></name></expr></argument>, <argument pos:start="125:58" pos:end="125:58"><expr pos:start="125:58" pos:end="125:58"><literal type="number" pos:start="125:58" pos:end="125:58">5</literal></expr></argument>)</argument_list></call> <operator pos:start="125:61" pos:end="125:61">+</operator> <literal type="number" pos:start="125:63" pos:end="125:63">1</literal></expr></init></decl>;</decl_stmt>

                <if_stmt pos:start="127:17" pos:end="129:30"><if pos:start="127:17" pos:end="129:30">if <condition pos:start="127:20" pos:end="127:46">(<expr pos:start="127:21" pos:end="127:45"><call pos:start="127:21" pos:end="127:41"><name pos:start="127:21" pos:end="127:33">get_bits_left</name><argument_list pos:start="127:34" pos:end="127:41">(<argument pos:start="127:35" pos:end="127:40"><expr pos:start="127:35" pos:end="127:40"><operator pos:start="127:35" pos:end="127:35">&amp;</operator><name pos:start="127:36" pos:end="127:40"><name pos:start="127:36" pos:end="127:36">s</name><operator pos:start="127:37" pos:end="127:38">-&gt;</operator><name pos:start="127:39" pos:end="127:40">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="127:43" pos:end="127:43">&lt;</operator> <literal type="number" pos:start="127:45" pos:end="127:45">0</literal></expr>)</condition><block type="pseudo" pos:start="129:21" pos:end="129:30"><block_content pos:start="129:21" pos:end="129:30">

                    <return pos:start="129:21" pos:end="129:30">return <expr pos:start="129:28" pos:end="129:29"><operator pos:start="129:28" pos:end="129:28">-</operator><literal type="number" pos:start="129:29" pos:end="129:29">1</literal></expr>;</return></block_content></block></if></if_stmt>



                <for pos:start="133:17" pos:end="141:17">for <control pos:start="133:21" pos:end="133:50">(<init pos:start="133:22" pos:end="133:27"><expr pos:start="133:22" pos:end="133:26"><name pos:start="133:22" pos:end="133:22">j</name> <operator pos:start="133:24" pos:end="133:24">=</operator> <literal type="number" pos:start="133:26" pos:end="133:26">0</literal></expr>;</init> <condition pos:start="133:29" pos:end="133:45"><expr pos:start="133:29" pos:end="133:44"><name pos:start="133:29" pos:end="133:29">j</name> <operator pos:start="133:31" pos:end="133:31">&lt;</operator> <name pos:start="133:33" pos:end="133:44"><name pos:start="133:33" pos:end="133:41">num_spkrs</name><index pos:start="133:42" pos:end="133:44">[<expr pos:start="133:43" pos:end="133:43"><name pos:start="133:43" pos:end="133:43">i</name></expr>]</index></name></expr>;</condition> <incr pos:start="133:47" pos:end="133:49"><expr pos:start="133:47" pos:end="133:49"><name pos:start="133:47" pos:end="133:47">j</name><operator pos:start="133:48" pos:end="133:49">++</operator></expr></incr>)</control> <block pos:start="133:52" pos:end="141:17">{<block_content pos:start="135:21" pos:end="139:59">

                    <decl_stmt pos:start="135:21" pos:end="135:85"><decl pos:start="135:21" pos:end="135:84"><type pos:start="135:21" pos:end="135:23"><name pos:start="135:21" pos:end="135:23">int</name></type> <name pos:start="135:25" pos:end="135:41">remap_dec_ch_mask</name> <init pos:start="135:43" pos:end="135:84">= <expr pos:start="135:45" pos:end="135:84"><call pos:start="135:45" pos:end="135:84"><name pos:start="135:45" pos:end="135:57">get_bits_long</name><argument_list pos:start="135:58" pos:end="135:84">(<argument pos:start="135:59" pos:end="135:64"><expr pos:start="135:59" pos:end="135:64"><operator pos:start="135:59" pos:end="135:59">&amp;</operator><name pos:start="135:60" pos:end="135:64"><name pos:start="135:60" pos:end="135:60">s</name><operator pos:start="135:61" pos:end="135:62">-&gt;</operator><name pos:start="135:63" pos:end="135:64">gb</name></name></expr></argument>, <argument pos:start="135:67" pos:end="135:83"><expr pos:start="135:67" pos:end="135:83"><name pos:start="135:67" pos:end="135:83">num_dec_ch_remaps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <decl_stmt pos:start="137:21" pos:end="137:68"><decl pos:start="137:21" pos:end="137:67"><type pos:start="137:21" pos:end="137:23"><name pos:start="137:21" pos:end="137:23">int</name></type> <name pos:start="137:25" pos:end="137:34">num_dec_ch</name> <init pos:start="137:36" pos:end="137:67">= <expr pos:start="137:38" pos:end="137:67"><call pos:start="137:38" pos:end="137:67"><name pos:start="137:38" pos:end="137:48">av_popcount</name><argument_list pos:start="137:49" pos:end="137:67">(<argument pos:start="137:50" pos:end="137:66"><expr pos:start="137:50" pos:end="137:66"><name pos:start="137:50" pos:end="137:66">remap_dec_ch_mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt pos:start="139:21" pos:end="139:59"><expr pos:start="139:21" pos:end="139:58"><call pos:start="139:21" pos:end="139:58"><name pos:start="139:21" pos:end="139:34">skip_bits_long</name><argument_list pos:start="139:35" pos:end="139:58">(<argument pos:start="139:36" pos:end="139:41"><expr pos:start="139:36" pos:end="139:41"><operator pos:start="139:36" pos:end="139:36">&amp;</operator><name pos:start="139:37" pos:end="139:41"><name pos:start="139:37" pos:end="139:37">s</name><operator pos:start="139:38" pos:end="139:39">-&gt;</operator><name pos:start="139:40" pos:end="139:41">gb</name></name></expr></argument>, <argument pos:start="139:44" pos:end="139:57"><expr pos:start="139:44" pos:end="139:57"><name pos:start="139:44" pos:end="139:53">num_dec_ch</name> <operator pos:start="139:55" pos:end="139:55">*</operator> <literal type="number" pos:start="139:57" pos:end="139:57">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="139:61" pos:end="139:74">// remap codes</comment>

                </block_content>}</block></for>

            </block_content>}</block></for>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="149:9">else <block pos:start="145:16" pos:end="149:9">{<block_content pos:start="147:13" pos:end="147:33">

            <expr_stmt pos:start="147:13" pos:end="147:33"><expr pos:start="147:13" pos:end="147:32"><call pos:start="147:13" pos:end="147:32"><name pos:start="147:13" pos:end="147:21">skip_bits</name><argument_list pos:start="147:22" pos:end="147:32">(<argument pos:start="147:23" pos:end="147:28"><expr pos:start="147:23" pos:end="147:28"><operator pos:start="147:23" pos:end="147:23">&amp;</operator><name pos:start="147:24" pos:end="147:28"><name pos:start="147:24" pos:end="147:24">s</name><operator pos:start="147:25" pos:end="147:26">-&gt;</operator><name pos:start="147:27" pos:end="147:28">gb</name></name></expr></argument>, <argument pos:start="147:31" pos:end="147:31"><expr pos:start="147:31" pos:end="147:31"><literal type="number" pos:start="147:31" pos:end="147:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="147:35" pos:end="147:56">// representation type</comment>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:41"><expr pos:start="155:5" pos:end="155:40"><name pos:start="155:5" pos:end="155:20">drc_code_present</name> <operator pos:start="155:22" pos:end="155:22">=</operator> <call pos:start="155:24" pos:end="155:40"><name pos:start="155:24" pos:end="155:32">get_bits1</name><argument_list pos:start="155:33" pos:end="155:40">(<argument pos:start="155:34" pos:end="155:39"><expr pos:start="155:34" pos:end="155:39"><operator pos:start="155:34" pos:end="155:34">&amp;</operator><name pos:start="155:35" pos:end="155:39"><name pos:start="155:35" pos:end="155:35">s</name><operator pos:start="155:36" pos:end="155:37">-&gt;</operator><name pos:start="155:38" pos:end="155:39">gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="157:5" pos:end="159:28"><if pos:start="157:5" pos:end="159:28">if <condition pos:start="157:8" pos:end="157:25">(<expr pos:start="157:9" pos:end="157:24"><name pos:start="157:9" pos:end="157:24">drc_code_present</name></expr>)</condition><block type="pseudo" pos:start="159:9" pos:end="159:28"><block_content pos:start="159:9" pos:end="159:28">

        <expr_stmt pos:start="159:9" pos:end="159:28"><expr pos:start="159:9" pos:end="159:27"><call pos:start="159:9" pos:end="159:27"><name pos:start="159:9" pos:end="159:16">get_bits</name><argument_list pos:start="159:17" pos:end="159:27">(<argument pos:start="159:18" pos:end="159:23"><expr pos:start="159:18" pos:end="159:23"><operator pos:start="159:18" pos:end="159:18">&amp;</operator><name pos:start="159:19" pos:end="159:23"><name pos:start="159:19" pos:end="159:19">s</name><operator pos:start="159:20" pos:end="159:21">-&gt;</operator><name pos:start="159:22" pos:end="159:23">gb</name></name></expr></argument>, <argument pos:start="159:26" pos:end="159:26"><expr pos:start="159:26" pos:end="159:26"><literal type="number" pos:start="159:26" pos:end="159:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="159:30" pos:end="159:40">// drc code</comment>



    <if_stmt pos:start="163:5" pos:end="165:29"><if pos:start="163:5" pos:end="165:29">if <condition pos:start="163:8" pos:end="163:26">(<expr pos:start="163:9" pos:end="163:25"><call pos:start="163:9" pos:end="163:25"><name pos:start="163:9" pos:end="163:17">get_bits1</name><argument_list pos:start="163:18" pos:end="163:25">(<argument pos:start="163:19" pos:end="163:24"><expr pos:start="163:19" pos:end="163:24"><operator pos:start="163:19" pos:end="163:19">&amp;</operator><name pos:start="163:20" pos:end="163:24"><name pos:start="163:20" pos:end="163:20">s</name><operator pos:start="163:21" pos:end="163:22">-&gt;</operator><name pos:start="163:23" pos:end="163:24">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="165:9" pos:end="165:29"><block_content pos:start="165:9" pos:end="165:29">

        <expr_stmt pos:start="165:9" pos:end="165:29"><expr pos:start="165:9" pos:end="165:28"><call pos:start="165:9" pos:end="165:28"><name pos:start="165:9" pos:end="165:17">skip_bits</name><argument_list pos:start="165:18" pos:end="165:28">(<argument pos:start="165:19" pos:end="165:24"><expr pos:start="165:19" pos:end="165:24"><operator pos:start="165:19" pos:end="165:19">&amp;</operator><name pos:start="165:20" pos:end="165:24"><name pos:start="165:20" pos:end="165:20">s</name><operator pos:start="165:21" pos:end="165:22">-&gt;</operator><name pos:start="165:23" pos:end="165:24">gb</name></name></expr></argument>, <argument pos:start="165:27" pos:end="165:27"><expr pos:start="165:27" pos:end="165:27"><literal type="number" pos:start="165:27" pos:end="165:27">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="165:31" pos:end="165:58">// dialog normalization code</comment>



    <if_stmt pos:start="169:5" pos:end="171:28"><if pos:start="169:5" pos:end="171:28">if <condition pos:start="169:8" pos:end="169:44">(<expr pos:start="169:9" pos:end="169:43"><name pos:start="169:9" pos:end="169:24">drc_code_present</name> <operator pos:start="169:26" pos:end="169:27">&amp;&amp;</operator> <name pos:start="169:29" pos:end="169:43">embedded_stereo</name></expr>)</condition><block type="pseudo" pos:start="171:9" pos:end="171:28"><block_content pos:start="171:9" pos:end="171:28">

        <expr_stmt pos:start="171:9" pos:end="171:28"><expr pos:start="171:9" pos:end="171:27"><call pos:start="171:9" pos:end="171:27"><name pos:start="171:9" pos:end="171:16">get_bits</name><argument_list pos:start="171:17" pos:end="171:27">(<argument pos:start="171:18" pos:end="171:23"><expr pos:start="171:18" pos:end="171:23"><operator pos:start="171:18" pos:end="171:18">&amp;</operator><name pos:start="171:19" pos:end="171:23"><name pos:start="171:19" pos:end="171:19">s</name><operator pos:start="171:20" pos:end="171:21">-&gt;</operator><name pos:start="171:22" pos:end="171:23">gb</name></name></expr></argument>, <argument pos:start="171:26" pos:end="171:26"><expr pos:start="171:26" pos:end="171:26"><literal type="number" pos:start="171:26" pos:end="171:26">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="line" pos:start="171:30" pos:end="171:47">// drc stereo code</comment>



    <if_stmt pos:start="175:5" pos:end="223:5"><if pos:start="175:5" pos:end="223:5">if <condition pos:start="175:8" pos:end="175:45">(<expr pos:start="175:9" pos:end="175:44"><name pos:start="175:9" pos:end="175:23"><name pos:start="175:9" pos:end="175:9">s</name><operator pos:start="175:10" pos:end="175:11">-&gt;</operator><name pos:start="175:12" pos:end="175:23">mix_metadata</name></name> <operator pos:start="175:25" pos:end="175:26">&amp;&amp;</operator> <call pos:start="175:28" pos:end="175:44"><name pos:start="175:28" pos:end="175:36">get_bits1</name><argument_list pos:start="175:37" pos:end="175:44">(<argument pos:start="175:38" pos:end="175:43"><expr pos:start="175:38" pos:end="175:43"><operator pos:start="175:38" pos:end="175:38">&amp;</operator><name pos:start="175:39" pos:end="175:43"><name pos:start="175:39" pos:end="175:39">s</name><operator pos:start="175:40" pos:end="175:41">-&gt;</operator><name pos:start="175:42" pos:end="175:43">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="175:47" pos:end="223:5">{<block_content pos:start="177:9" pos:end="221:9">

        <expr_stmt pos:start="177:9" pos:end="177:29"><expr pos:start="177:9" pos:end="177:28"><call pos:start="177:9" pos:end="177:28"><name pos:start="177:9" pos:end="177:17">skip_bits</name><argument_list pos:start="177:18" pos:end="177:28">(<argument pos:start="177:19" pos:end="177:24"><expr pos:start="177:19" pos:end="177:24"><operator pos:start="177:19" pos:end="177:19">&amp;</operator><name pos:start="177:20" pos:end="177:24"><name pos:start="177:20" pos:end="177:20">s</name><operator pos:start="177:21" pos:end="177:22">-&gt;</operator><name pos:start="177:23" pos:end="177:24">gb</name></name></expr></argument>, <argument pos:start="177:27" pos:end="177:27"><expr pos:start="177:27" pos:end="177:27"><literal type="number" pos:start="177:27" pos:end="177:27">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="177:31" pos:end="177:45">// external mix</comment>

        <expr_stmt pos:start="179:9" pos:end="179:29"><expr pos:start="179:9" pos:end="179:28"><call pos:start="179:9" pos:end="179:28"><name pos:start="179:9" pos:end="179:17">skip_bits</name><argument_list pos:start="179:18" pos:end="179:28">(<argument pos:start="179:19" pos:end="179:24"><expr pos:start="179:19" pos:end="179:24"><operator pos:start="179:19" pos:end="179:19">&amp;</operator><name pos:start="179:20" pos:end="179:24"><name pos:start="179:20" pos:end="179:20">s</name><operator pos:start="179:21" pos:end="179:22">-&gt;</operator><name pos:start="179:23" pos:end="179:24">gb</name></name></expr></argument>, <argument pos:start="179:27" pos:end="179:27"><expr pos:start="179:27" pos:end="179:27"><literal type="number" pos:start="179:27" pos:end="179:27">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line" pos:start="179:31" pos:end="179:51">// post mix gain code</comment>



        <if_stmt pos:start="183:9" pos:end="189:33"><if pos:start="183:9" pos:end="185:33">if <condition pos:start="183:12" pos:end="183:37">(<expr pos:start="183:13" pos:end="183:36"><call pos:start="183:13" pos:end="183:31"><name pos:start="183:13" pos:end="183:20">get_bits</name><argument_list pos:start="183:21" pos:end="183:31">(<argument pos:start="183:22" pos:end="183:27"><expr pos:start="183:22" pos:end="183:27"><operator pos:start="183:22" pos:end="183:22">&amp;</operator><name pos:start="183:23" pos:end="183:27"><name pos:start="183:23" pos:end="183:23">s</name><operator pos:start="183:24" pos:end="183:25">-&gt;</operator><name pos:start="183:26" pos:end="183:27">gb</name></name></expr></argument>, <argument pos:start="183:30" pos:end="183:30"><expr pos:start="183:30" pos:end="183:30"><literal type="number" pos:start="183:30" pos:end="183:30">2</literal></expr></argument>)</argument_list></call> <operator pos:start="183:33" pos:end="183:34">!=</operator> <literal type="number" pos:start="183:36" pos:end="183:36">3</literal></expr>)</condition><block type="pseudo" pos:start="185:13" pos:end="185:33"><block_content pos:start="185:13" pos:end="185:33"> <comment type="line" pos:start="183:39" pos:end="183:55">// mixer drc code</comment>

            <expr_stmt pos:start="185:13" pos:end="185:33"><expr pos:start="185:13" pos:end="185:32"><call pos:start="185:13" pos:end="185:32"><name pos:start="185:13" pos:end="185:21">skip_bits</name><argument_list pos:start="185:22" pos:end="185:32">(<argument pos:start="185:23" pos:end="185:28"><expr pos:start="185:23" pos:end="185:28"><operator pos:start="185:23" pos:end="185:23">&amp;</operator><name pos:start="185:24" pos:end="185:28"><name pos:start="185:24" pos:end="185:24">s</name><operator pos:start="185:25" pos:end="185:26">-&gt;</operator><name pos:start="185:27" pos:end="185:28">gb</name></name></expr></argument>, <argument pos:start="185:31" pos:end="185:31"><expr pos:start="185:31" pos:end="185:31"><literal type="number" pos:start="185:31" pos:end="185:31">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if> <comment type="line" pos:start="185:35" pos:end="185:46">// drc limit</comment>

        <else pos:start="187:9" pos:end="189:33">else<block type="pseudo" pos:start="189:13" pos:end="189:33"><block_content pos:start="189:13" pos:end="189:33">

            <expr_stmt pos:start="189:13" pos:end="189:33"><expr pos:start="189:13" pos:end="189:32"><call pos:start="189:13" pos:end="189:32"><name pos:start="189:13" pos:end="189:21">skip_bits</name><argument_list pos:start="189:22" pos:end="189:32">(<argument pos:start="189:23" pos:end="189:28"><expr pos:start="189:23" pos:end="189:28"><operator pos:start="189:23" pos:end="189:23">&amp;</operator><name pos:start="189:24" pos:end="189:28"><name pos:start="189:24" pos:end="189:24">s</name><operator pos:start="189:25" pos:end="189:26">-&gt;</operator><name pos:start="189:27" pos:end="189:28">gb</name></name></expr></argument>, <argument pos:start="189:31" pos:end="189:31"><expr pos:start="189:31" pos:end="189:31"><literal type="number" pos:start="189:31" pos:end="189:31">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="189:35" pos:end="189:52">// custom drc code</comment>



        <if_stmt pos:start="193:9" pos:end="201:59"><if pos:start="193:9" pos:end="197:68">if <condition pos:start="193:12" pos:end="193:30">(<expr pos:start="193:13" pos:end="193:29"><call pos:start="193:13" pos:end="193:29"><name pos:start="193:13" pos:end="193:21">get_bits1</name><argument_list pos:start="193:22" pos:end="193:29">(<argument pos:start="193:23" pos:end="193:28"><expr pos:start="193:23" pos:end="193:28"><operator pos:start="193:23" pos:end="193:23">&amp;</operator><name pos:start="193:24" pos:end="193:28"><name pos:start="193:24" pos:end="193:24">s</name><operator pos:start="193:25" pos:end="193:26">-&gt;</operator><name pos:start="193:27" pos:end="193:28">gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="197:68"><block_content pos:start="195:13" pos:end="197:68"> <comment type="line" pos:start="193:32" pos:end="193:58">// channel specific scaling</comment>

            <for pos:start="195:13" pos:end="197:68">for <control pos:start="195:17" pos:end="195:52">(<init pos:start="195:18" pos:end="195:23"><expr pos:start="195:18" pos:end="195:22"><name pos:start="195:18" pos:end="195:18">i</name> <operator pos:start="195:20" pos:end="195:20">=</operator> <literal type="number" pos:start="195:22" pos:end="195:22">0</literal></expr>;</init> <condition pos:start="195:25" pos:end="195:47"><expr pos:start="195:25" pos:end="195:46"><name pos:start="195:25" pos:end="195:25">i</name> <operator pos:start="195:27" pos:end="195:27">&lt;</operator> <name pos:start="195:29" pos:end="195:46"><name pos:start="195:29" pos:end="195:29">s</name><operator pos:start="195:30" pos:end="195:31">-&gt;</operator><name pos:start="195:32" pos:end="195:46">num_mix_configs</name></name></expr>;</condition> <incr pos:start="195:49" pos:end="195:51"><expr pos:start="195:49" pos:end="195:51"><name pos:start="195:49" pos:end="195:49">i</name><operator pos:start="195:50" pos:end="195:51">++</operator></expr></incr>)</control><block type="pseudo" pos:start="197:17" pos:end="197:68"><block_content pos:start="197:17" pos:end="197:68">

                <expr_stmt pos:start="197:17" pos:end="197:68"><expr pos:start="197:17" pos:end="197:67"><call pos:start="197:17" pos:end="197:67"><name pos:start="197:17" pos:end="197:30">skip_bits_long</name><argument_list pos:start="197:31" pos:end="197:67">(<argument pos:start="197:32" pos:end="197:37"><expr pos:start="197:32" pos:end="197:37"><operator pos:start="197:32" pos:end="197:32">&amp;</operator><name pos:start="197:33" pos:end="197:37"><name pos:start="197:33" pos:end="197:33">s</name><operator pos:start="197:34" pos:end="197:35">-&gt;</operator><name pos:start="197:36" pos:end="197:37">gb</name></name></expr></argument>, <argument pos:start="197:40" pos:end="197:66"><expr pos:start="197:40" pos:end="197:66"><name pos:start="197:40" pos:end="197:62"><name pos:start="197:40" pos:end="197:40">s</name><operator pos:start="197:41" pos:end="197:42">-&gt;</operator><name pos:start="197:43" pos:end="197:59">mix_config_num_ch</name><index pos:start="197:60" pos:end="197:62">[<expr pos:start="197:61" pos:end="197:61"><name pos:start="197:61" pos:end="197:61">i</name></expr>]</index></name> <operator pos:start="197:64" pos:end="197:64">*</operator> <literal type="number" pos:start="197:66" pos:end="197:66">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if> <comment type="line" pos:start="197:70" pos:end="197:83">// scale codes</comment>

        <else pos:start="199:9" pos:end="201:59">else<block type="pseudo" pos:start="201:13" pos:end="201:59"><block_content pos:start="201:13" pos:end="201:59">

            <expr_stmt pos:start="201:13" pos:end="201:59"><expr pos:start="201:13" pos:end="201:58"><call pos:start="201:13" pos:end="201:58"><name pos:start="201:13" pos:end="201:26">skip_bits_long</name><argument_list pos:start="201:27" pos:end="201:58">(<argument pos:start="201:28" pos:end="201:33"><expr pos:start="201:28" pos:end="201:33"><operator pos:start="201:28" pos:end="201:28">&amp;</operator><name pos:start="201:29" pos:end="201:33"><name pos:start="201:29" pos:end="201:29">s</name><operator pos:start="201:30" pos:end="201:31">-&gt;</operator><name pos:start="201:32" pos:end="201:33">gb</name></name></expr></argument>, <argument pos:start="201:36" pos:end="201:57"><expr pos:start="201:36" pos:end="201:57"><name pos:start="201:36" pos:end="201:53"><name pos:start="201:36" pos:end="201:36">s</name><operator pos:start="201:37" pos:end="201:38">-&gt;</operator><name pos:start="201:39" pos:end="201:53">num_mix_configs</name></name> <operator pos:start="201:55" pos:end="201:55">*</operator> <literal type="number" pos:start="201:57" pos:end="201:57">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt> <comment type="line" pos:start="201:61" pos:end="201:74">// scale codes</comment>



        <for pos:start="205:9" pos:end="221:9">for <control pos:start="205:13" pos:end="205:48">(<init pos:start="205:14" pos:end="205:19"><expr pos:start="205:14" pos:end="205:18"><name pos:start="205:14" pos:end="205:14">i</name> <operator pos:start="205:16" pos:end="205:16">=</operator> <literal type="number" pos:start="205:18" pos:end="205:18">0</literal></expr>;</init> <condition pos:start="205:21" pos:end="205:43"><expr pos:start="205:21" pos:end="205:42"><name pos:start="205:21" pos:end="205:21">i</name> <operator pos:start="205:23" pos:end="205:23">&lt;</operator> <name pos:start="205:25" pos:end="205:42"><name pos:start="205:25" pos:end="205:25">s</name><operator pos:start="205:26" pos:end="205:27">-&gt;</operator><name pos:start="205:28" pos:end="205:42">num_mix_configs</name></name></expr>;</condition> <incr pos:start="205:45" pos:end="205:47"><expr pos:start="205:45" pos:end="205:47"><name pos:start="205:45" pos:end="205:45">i</name><operator pos:start="205:46" pos:end="205:47">++</operator></expr></incr>)</control> <block pos:start="205:50" pos:end="221:9">{<block_content pos:start="207:13" pos:end="219:77">

            <if_stmt pos:start="207:13" pos:end="209:26"><if pos:start="207:13" pos:end="209:26">if <condition pos:start="207:16" pos:end="207:42">(<expr pos:start="207:17" pos:end="207:41"><call pos:start="207:17" pos:end="207:37"><name pos:start="207:17" pos:end="207:29">get_bits_left</name><argument_list pos:start="207:30" pos:end="207:37">(<argument pos:start="207:31" pos:end="207:36"><expr pos:start="207:31" pos:end="207:36"><operator pos:start="207:31" pos:end="207:31">&amp;</operator><name pos:start="207:32" pos:end="207:36"><name pos:start="207:32" pos:end="207:32">s</name><operator pos:start="207:33" pos:end="207:34">-&gt;</operator><name pos:start="207:35" pos:end="207:36">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="207:39" pos:end="207:39">&lt;</operator> <literal type="number" pos:start="207:41" pos:end="207:41">0</literal></expr>)</condition><block type="pseudo" pos:start="209:17" pos:end="209:26"><block_content pos:start="209:17" pos:end="209:26">

                <return pos:start="209:17" pos:end="209:26">return <expr pos:start="209:24" pos:end="209:25"><operator pos:start="209:24" pos:end="209:24">-</operator><literal type="number" pos:start="209:25" pos:end="209:25">1</literal></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="211:13" pos:end="211:80"><expr pos:start="211:13" pos:end="211:79"><call pos:start="211:13" pos:end="211:79"><name pos:start="211:13" pos:end="211:36">dca_exss_skip_mix_coeffs</name><argument_list pos:start="211:37" pos:end="211:79">(<argument pos:start="211:38" pos:end="211:43"><expr pos:start="211:38" pos:end="211:43"><operator pos:start="211:38" pos:end="211:38">&amp;</operator><name pos:start="211:39" pos:end="211:43"><name pos:start="211:39" pos:end="211:39">s</name><operator pos:start="211:40" pos:end="211:41">-&gt;</operator><name pos:start="211:42" pos:end="211:43">gb</name></name></expr></argument>, <argument pos:start="211:46" pos:end="211:53"><expr pos:start="211:46" pos:end="211:53"><name pos:start="211:46" pos:end="211:53">channels</name></expr></argument>, <argument pos:start="211:56" pos:end="211:78"><expr pos:start="211:56" pos:end="211:78"><name pos:start="211:56" pos:end="211:78"><name pos:start="211:56" pos:end="211:56">s</name><operator pos:start="211:57" pos:end="211:58">-&gt;</operator><name pos:start="211:59" pos:end="211:75">mix_config_num_ch</name><index pos:start="211:76" pos:end="211:78">[<expr pos:start="211:77" pos:end="211:77"><name pos:start="211:77" pos:end="211:77">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="213:13" pos:end="215:77"><if pos:start="213:13" pos:end="215:77">if <condition pos:start="213:16" pos:end="213:29">(<expr pos:start="213:17" pos:end="213:28"><name pos:start="213:17" pos:end="213:28">embedded_6ch</name></expr>)</condition><block type="pseudo" pos:start="215:17" pos:end="215:77"><block_content pos:start="215:17" pos:end="215:77">

                <expr_stmt pos:start="215:17" pos:end="215:77"><expr pos:start="215:17" pos:end="215:76"><call pos:start="215:17" pos:end="215:76"><name pos:start="215:17" pos:end="215:40">dca_exss_skip_mix_coeffs</name><argument_list pos:start="215:41" pos:end="215:76">(<argument pos:start="215:42" pos:end="215:47"><expr pos:start="215:42" pos:end="215:47"><operator pos:start="215:42" pos:end="215:42">&amp;</operator><name pos:start="215:43" pos:end="215:47"><name pos:start="215:43" pos:end="215:43">s</name><operator pos:start="215:44" pos:end="215:45">-&gt;</operator><name pos:start="215:46" pos:end="215:47">gb</name></name></expr></argument>, <argument pos:start="215:50" pos:end="215:50"><expr pos:start="215:50" pos:end="215:50"><literal type="number" pos:start="215:50" pos:end="215:50">6</literal></expr></argument>, <argument pos:start="215:53" pos:end="215:75"><expr pos:start="215:53" pos:end="215:75"><name pos:start="215:53" pos:end="215:75"><name pos:start="215:53" pos:end="215:53">s</name><operator pos:start="215:54" pos:end="215:55">-&gt;</operator><name pos:start="215:56" pos:end="215:72">mix_config_num_ch</name><index pos:start="215:73" pos:end="215:75">[<expr pos:start="215:74" pos:end="215:74"><name pos:start="215:74" pos:end="215:74">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="217:13" pos:end="219:77"><if pos:start="217:13" pos:end="219:77">if <condition pos:start="217:16" pos:end="217:32">(<expr pos:start="217:17" pos:end="217:31"><name pos:start="217:17" pos:end="217:31">embedded_stereo</name></expr>)</condition><block type="pseudo" pos:start="219:17" pos:end="219:77"><block_content pos:start="219:17" pos:end="219:77">

                <expr_stmt pos:start="219:17" pos:end="219:77"><expr pos:start="219:17" pos:end="219:76"><call pos:start="219:17" pos:end="219:76"><name pos:start="219:17" pos:end="219:40">dca_exss_skip_mix_coeffs</name><argument_list pos:start="219:41" pos:end="219:76">(<argument pos:start="219:42" pos:end="219:47"><expr pos:start="219:42" pos:end="219:47"><operator pos:start="219:42" pos:end="219:42">&amp;</operator><name pos:start="219:43" pos:end="219:47"><name pos:start="219:43" pos:end="219:43">s</name><operator pos:start="219:44" pos:end="219:45">-&gt;</operator><name pos:start="219:46" pos:end="219:47">gb</name></name></expr></argument>, <argument pos:start="219:50" pos:end="219:50"><expr pos:start="219:50" pos:end="219:50"><literal type="number" pos:start="219:50" pos:end="219:50">2</literal></expr></argument>, <argument pos:start="219:53" pos:end="219:75"><expr pos:start="219:53" pos:end="219:75"><name pos:start="219:53" pos:end="219:75"><name pos:start="219:53" pos:end="219:53">s</name><operator pos:start="219:54" pos:end="219:55">-&gt;</operator><name pos:start="219:56" pos:end="219:72">mix_config_num_ch</name><index pos:start="219:73" pos:end="219:75">[<expr pos:start="219:74" pos:end="219:74"><name pos:start="219:74" pos:end="219:74">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></for>

    </block_content>}</block></if></if_stmt>



    <switch pos:start="227:5" pos:end="253:5">switch <condition pos:start="227:12" pos:end="227:32">(<expr pos:start="227:13" pos:end="227:31"><call pos:start="227:13" pos:end="227:31"><name pos:start="227:13" pos:end="227:20">get_bits</name><argument_list pos:start="227:21" pos:end="227:31">(<argument pos:start="227:22" pos:end="227:27"><expr pos:start="227:22" pos:end="227:27"><operator pos:start="227:22" pos:end="227:22">&amp;</operator><name pos:start="227:23" pos:end="227:27"><name pos:start="227:23" pos:end="227:23">s</name><operator pos:start="227:24" pos:end="227:25">-&gt;</operator><name pos:start="227:26" pos:end="227:27">gb</name></name></expr></argument>, <argument pos:start="227:30" pos:end="227:30"><expr pos:start="227:30" pos:end="227:30"><literal type="number" pos:start="227:30" pos:end="227:30">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:34" pos:end="253:5">{<block_content pos:start="229:5" pos:end="251:14">

    <case pos:start="229:5" pos:end="229:11">case <expr pos:start="229:10" pos:end="229:10"><literal type="number" pos:start="229:10" pos:end="229:10">0</literal></expr>:</case>

        <expr_stmt pos:start="231:9" pos:end="231:47"><expr pos:start="231:9" pos:end="231:46"><name pos:start="231:9" pos:end="231:23">extensions_mask</name> <operator pos:start="231:25" pos:end="231:25">=</operator> <call pos:start="231:27" pos:end="231:46"><name pos:start="231:27" pos:end="231:34">get_bits</name><argument_list pos:start="231:35" pos:end="231:46">(<argument pos:start="231:36" pos:end="231:41"><expr pos:start="231:36" pos:end="231:41"><operator pos:start="231:36" pos:end="231:36">&amp;</operator><name pos:start="231:37" pos:end="231:41"><name pos:start="231:37" pos:end="231:37">s</name><operator pos:start="231:38" pos:end="231:39">-&gt;</operator><name pos:start="231:40" pos:end="231:41">gb</name></name></expr></argument>, <argument pos:start="231:44" pos:end="231:45"><expr pos:start="231:44" pos:end="231:45"><literal type="number" pos:start="231:44" pos:end="231:45">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="233:9" pos:end="233:14">break;</break>

    <case pos:start="235:5" pos:end="235:11">case <expr pos:start="235:10" pos:end="235:10"><literal type="number" pos:start="235:10" pos:end="235:10">1</literal></expr>:</case>

        <expr_stmt pos:start="237:9" pos:end="237:43"><expr pos:start="237:9" pos:end="237:42"><name pos:start="237:9" pos:end="237:23">extensions_mask</name> <operator pos:start="237:25" pos:end="237:25">=</operator> <name pos:start="237:27" pos:end="237:42">DCA_EXT_EXSS_XLL</name></expr>;</expr_stmt>

        <break pos:start="239:9" pos:end="239:14">break;</break>

    <case pos:start="241:5" pos:end="241:11">case <expr pos:start="241:10" pos:end="241:10"><literal type="number" pos:start="241:10" pos:end="241:10">2</literal></expr>:</case>

        <expr_stmt pos:start="243:9" pos:end="243:43"><expr pos:start="243:9" pos:end="243:42"><name pos:start="243:9" pos:end="243:23">extensions_mask</name> <operator pos:start="243:25" pos:end="243:25">=</operator> <name pos:start="243:27" pos:end="243:42">DCA_EXT_EXSS_LBR</name></expr>;</expr_stmt>

        <break pos:start="245:9" pos:end="245:14">break;</break>

    <case pos:start="247:5" pos:end="247:11">case <expr pos:start="247:10" pos:end="247:10"><literal type="number" pos:start="247:10" pos:end="247:10">3</literal></expr>:</case>

        <expr_stmt pos:start="249:9" pos:end="249:28"><expr pos:start="249:9" pos:end="249:27"><name pos:start="249:9" pos:end="249:23">extensions_mask</name> <operator pos:start="249:25" pos:end="249:25">=</operator> <literal type="number" pos:start="249:27" pos:end="249:27">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="249:30" pos:end="249:45">/* aux coding */</comment>

        <break pos:start="251:9" pos:end="251:14">break;</break>

    </block_content>}</block></switch>



    <comment type="block" pos:start="257:5" pos:end="257:76">/* not parsed further, we were only interested in the extensions mask */</comment>



    <if_stmt pos:start="261:5" pos:end="263:18"><if pos:start="261:5" pos:end="263:18">if <condition pos:start="261:8" pos:end="261:34">(<expr pos:start="261:9" pos:end="261:33"><call pos:start="261:9" pos:end="261:29"><name pos:start="261:9" pos:end="261:21">get_bits_left</name><argument_list pos:start="261:22" pos:end="261:29">(<argument pos:start="261:23" pos:end="261:28"><expr pos:start="261:23" pos:end="261:28"><operator pos:start="261:23" pos:end="261:23">&amp;</operator><name pos:start="261:24" pos:end="261:28"><name pos:start="261:24" pos:end="261:24">s</name><operator pos:start="261:25" pos:end="261:26">-&gt;</operator><name pos:start="261:27" pos:end="261:28">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="261:31" pos:end="261:31">&lt;</operator> <literal type="number" pos:start="261:33" pos:end="261:33">0</literal></expr>)</condition><block type="pseudo" pos:start="263:9" pos:end="263:18"><block_content pos:start="263:9" pos:end="263:18">

        <return pos:start="263:9" pos:end="263:18">return <expr pos:start="263:16" pos:end="263:17"><operator pos:start="263:16" pos:end="263:16">-</operator><literal type="number" pos:start="263:17" pos:end="263:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="267:5" pos:end="273:5"><if pos:start="267:5" pos:end="273:5">if <condition pos:start="267:8" pos:end="267:62">(<expr pos:start="267:9" pos:end="267:61"><call pos:start="267:9" pos:end="267:30"><name pos:start="267:9" pos:end="267:22">get_bits_count</name><argument_list pos:start="267:23" pos:end="267:30">(<argument pos:start="267:24" pos:end="267:29"><expr pos:start="267:24" pos:end="267:29"><operator pos:start="267:24" pos:end="267:24">&amp;</operator><name pos:start="267:25" pos:end="267:29"><name pos:start="267:25" pos:end="267:25">s</name><operator pos:start="267:26" pos:end="267:27">-&gt;</operator><name pos:start="267:28" pos:end="267:29">gb</name></name></expr></argument>)</argument_list></call> <operator pos:start="267:32" pos:end="267:32">-</operator> <name pos:start="267:34" pos:end="267:43">header_pos</name> <operator pos:start="267:45" pos:end="267:45">&gt;</operator> <name pos:start="267:47" pos:end="267:57">header_size</name> <operator pos:start="267:59" pos:end="267:59">*</operator> <literal type="number" pos:start="267:61" pos:end="267:61">8</literal></expr>)</condition> <block pos:start="267:64" pos:end="273:5">{<block_content pos:start="269:9" pos:end="271:18">

        <expr_stmt pos:start="269:9" pos:end="269:74"><expr pos:start="269:9" pos:end="269:73"><call pos:start="269:9" pos:end="269:73"><name pos:start="269:9" pos:end="269:14">av_log</name><argument_list pos:start="269:15" pos:end="269:73">(<argument pos:start="269:16" pos:end="269:23"><expr pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:23"><name pos:start="269:16" pos:end="269:16">s</name><operator pos:start="269:17" pos:end="269:18">-&gt;</operator><name pos:start="269:19" pos:end="269:23">avctx</name></name></expr></argument>, <argument pos:start="269:26" pos:end="269:39"><expr pos:start="269:26" pos:end="269:39"><name pos:start="269:26" pos:end="269:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="269:42" pos:end="269:72"><expr pos:start="269:42" pos:end="269:72"><literal type="string" pos:start="269:42" pos:end="269:72">"Asset header size mismatch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="271:9" pos:end="271:18">return <expr pos:start="271:16" pos:end="271:17"><operator pos:start="271:16" pos:end="271:16">-</operator><literal type="number" pos:start="271:17" pos:end="271:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="275:5" pos:end="275:82"><expr pos:start="275:5" pos:end="275:81"><call pos:start="275:5" pos:end="275:81"><name pos:start="275:5" pos:end="275:18">skip_bits_long</name><argument_list pos:start="275:19" pos:end="275:81">(<argument pos:start="275:20" pos:end="275:25"><expr pos:start="275:20" pos:end="275:25"><operator pos:start="275:20" pos:end="275:20">&amp;</operator><name pos:start="275:21" pos:end="275:25"><name pos:start="275:21" pos:end="275:21">s</name><operator pos:start="275:22" pos:end="275:23">-&gt;</operator><name pos:start="275:24" pos:end="275:25">gb</name></name></expr></argument>, <argument pos:start="275:28" pos:end="275:80"><expr pos:start="275:28" pos:end="275:80"><name pos:start="275:28" pos:end="275:37">header_pos</name> <operator pos:start="275:39" pos:end="275:39">+</operator> <name pos:start="275:41" pos:end="275:51">header_size</name> <operator pos:start="275:53" pos:end="275:53">*</operator> <literal type="number" pos:start="275:55" pos:end="275:57">8</literal> <operator pos:start="275:57" pos:end="275:57">-</operator> <call pos:start="275:59" pos:end="275:80"><name pos:start="275:59" pos:end="275:72">get_bits_count</name><argument_list pos:start="275:73" pos:end="275:80">(<argument pos:start="275:74" pos:end="275:79"><expr pos:start="275:74" pos:end="275:79"><operator pos:start="275:74" pos:end="275:74">&amp;</operator><name pos:start="275:75" pos:end="275:79"><name pos:start="275:75" pos:end="275:75">s</name><operator pos:start="275:76" pos:end="275:77">-&gt;</operator><name pos:start="275:78" pos:end="275:79">gb</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="279:5" pos:end="287:43"><if pos:start="279:5" pos:end="281:42">if <condition pos:start="279:8" pos:end="279:43">(<expr pos:start="279:9" pos:end="279:42"><name pos:start="279:9" pos:end="279:23">extensions_mask</name> <operator pos:start="279:25" pos:end="279:25">&amp;</operator> <name pos:start="279:27" pos:end="279:42">DCA_EXT_EXSS_XLL</name></expr>)</condition><block type="pseudo" pos:start="281:9" pos:end="281:42"><block_content pos:start="281:9" pos:end="281:42">

        <expr_stmt pos:start="281:9" pos:end="281:42"><expr pos:start="281:9" pos:end="281:41"><name pos:start="281:9" pos:end="281:18"><name pos:start="281:9" pos:end="281:9">s</name><operator pos:start="281:10" pos:end="281:11">-&gt;</operator><name pos:start="281:12" pos:end="281:18">profile</name></name> <operator pos:start="281:20" pos:end="281:20">=</operator> <name pos:start="281:22" pos:end="281:41">FF_PROFILE_DTS_HD_MA</name></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="283:5" pos:end="287:43">else if <condition pos:start="283:13" pos:end="285:51">(<expr pos:start="283:14" pos:end="285:50"><name pos:start="283:14" pos:end="283:28">extensions_mask</name> <operator pos:start="283:30" pos:end="283:30">&amp;</operator> <operator pos:start="283:32" pos:end="283:32">(</operator><name pos:start="283:33" pos:end="283:48">DCA_EXT_EXSS_XBR</name> <operator pos:start="283:50" pos:end="283:50">|</operator> <name pos:start="283:52" pos:end="283:67">DCA_EXT_EXSS_X96</name> <operator pos:start="283:69" pos:end="283:69">|</operator>

                                <name pos:start="285:33" pos:end="285:49">DCA_EXT_EXSS_XXCH</name><operator pos:start="285:50" pos:end="285:50">)</operator></expr>)</condition><block type="pseudo" pos:start="287:9" pos:end="287:43"><block_content pos:start="287:9" pos:end="287:43">

        <expr_stmt pos:start="287:9" pos:end="287:43"><expr pos:start="287:9" pos:end="287:42"><name pos:start="287:9" pos:end="287:18"><name pos:start="287:9" pos:end="287:9">s</name><operator pos:start="287:10" pos:end="287:11">-&gt;</operator><name pos:start="287:12" pos:end="287:18">profile</name></name> <operator pos:start="287:20" pos:end="287:20">=</operator> <name pos:start="287:22" pos:end="287:42">FF_PROFILE_DTS_HD_HRA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <if_stmt pos:start="291:5" pos:end="293:75"><if pos:start="291:5" pos:end="293:75">if <condition pos:start="291:8" pos:end="291:42">(<expr pos:start="291:9" pos:end="291:41"><operator pos:start="291:9" pos:end="291:9">!</operator><operator pos:start="291:10" pos:end="291:10">(</operator><name pos:start="291:11" pos:end="291:25">extensions_mask</name> <operator pos:start="291:27" pos:end="291:27">&amp;</operator> <name pos:start="291:29" pos:end="291:40">DCA_EXT_CORE</name><operator pos:start="291:41" pos:end="291:41">)</operator></expr>)</condition><block type="pseudo" pos:start="293:9" pos:end="293:75"><block_content pos:start="293:9" pos:end="293:75">

        <expr_stmt pos:start="293:9" pos:end="293:75"><expr pos:start="293:9" pos:end="293:74"><call pos:start="293:9" pos:end="293:74"><name pos:start="293:9" pos:end="293:14">av_log</name><argument_list pos:start="293:15" pos:end="293:74">(<argument pos:start="293:16" pos:end="293:23"><expr pos:start="293:16" pos:end="293:23"><name pos:start="293:16" pos:end="293:23"><name pos:start="293:16" pos:end="293:16">s</name><operator pos:start="293:17" pos:end="293:18">-&gt;</operator><name pos:start="293:19" pos:end="293:23">avctx</name></name></expr></argument>, <argument pos:start="293:26" pos:end="293:39"><expr pos:start="293:26" pos:end="293:39"><name pos:start="293:26" pos:end="293:39">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="293:42" pos:end="293:73"><expr pos:start="293:42" pos:end="293:73"><literal type="string" pos:start="293:42" pos:end="293:73">"DTS core detection mismatch.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt pos:start="295:5" pos:end="301:66"><if pos:start="295:5" pos:end="301:66">if <condition pos:start="295:8" pos:end="295:62">(<expr pos:start="295:9" pos:end="295:61"><operator pos:start="295:9" pos:end="295:9">(</operator><name pos:start="295:10" pos:end="295:24">extensions_mask</name> <operator pos:start="295:26" pos:end="295:26">&amp;</operator> <name pos:start="295:28" pos:end="295:40">DCA_CORE_EXTS</name><operator pos:start="295:41" pos:end="295:41">)</operator> <operator pos:start="295:43" pos:end="295:44">!=</operator> <name pos:start="295:46" pos:end="295:61"><name pos:start="295:46" pos:end="295:46">s</name><operator pos:start="295:47" pos:end="295:48">-&gt;</operator><name pos:start="295:49" pos:end="295:61">core_ext_mask</name></name></expr>)</condition><block type="pseudo" pos:start="297:9" pos:end="301:66"><block_content pos:start="297:9" pos:end="301:66">

        <expr_stmt pos:start="297:9" pos:end="301:66"><expr pos:start="297:9" pos:end="301:65"><call pos:start="297:9" pos:end="301:65"><name pos:start="297:9" pos:end="297:14">av_log</name><argument_list pos:start="297:15" pos:end="301:65">(<argument pos:start="297:16" pos:end="297:23"><expr pos:start="297:16" pos:end="297:23"><name pos:start="297:16" pos:end="297:23"><name pos:start="297:16" pos:end="297:16">s</name><operator pos:start="297:17" pos:end="297:18">-&gt;</operator><name pos:start="297:19" pos:end="297:23">avctx</name></name></expr></argument>, <argument pos:start="297:26" pos:end="297:39"><expr pos:start="297:26" pos:end="297:39"><name pos:start="297:26" pos:end="297:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="299:16" pos:end="299:61"><expr pos:start="299:16" pos:end="299:61"><literal type="string" pos:start="299:16" pos:end="299:61">"DTS extensions detection mismatch (%d, %d)\n"</literal></expr></argument>,

               <argument pos:start="301:16" pos:end="301:46"><expr pos:start="301:16" pos:end="301:46"><name pos:start="301:16" pos:end="301:30">extensions_mask</name> <operator pos:start="301:32" pos:end="301:32">&amp;</operator> <name pos:start="301:34" pos:end="301:46">DCA_CORE_EXTS</name></expr></argument>, <argument pos:start="301:49" pos:end="301:64"><expr pos:start="301:49" pos:end="301:64"><name pos:start="301:49" pos:end="301:64"><name pos:start="301:49" pos:end="301:49">s</name><operator pos:start="301:50" pos:end="301:51">-&gt;</operator><name pos:start="301:52" pos:end="301:64">core_ext_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <return pos:start="305:5" pos:end="305:13">return <expr pos:start="305:12" pos:end="305:12"><literal type="number" pos:start="305:12" pos:end="305:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
