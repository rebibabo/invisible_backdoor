<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/4161.c" pos:tabs="8"><function pos:start="1:1" pos:end="55:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">tlb_flush_nocheck</name><parameter_list pos:start="1:30" pos:end="1:44">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:40"><name pos:start="1:31" pos:end="1:38">CPUState</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">cpu</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="55:1">{<block_content pos:start="5:5" pos:end="53:46">

    <decl_stmt pos:start="5:5" pos:end="5:37"><decl pos:start="5:5" pos:end="5:36"><type pos:start="5:5" pos:end="5:18"><name pos:start="5:5" pos:end="5:16">CPUArchState</name> <modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">env</name> <init pos:start="5:23" pos:end="5:36">= <expr pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:36"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:36">env_ptr</name></name></expr></init></decl>;</decl_stmt>



    <comment type="block" pos:start="9:5" pos:end="13:7">/* The QOM tests will trigger tlb_flushes without setting up TCG

     * so we bug out here in that case.

     */</comment>

    <if_stmt pos:start="15:5" pos:end="19:5"><if pos:start="15:5" pos:end="19:5">if <condition pos:start="15:8" pos:end="15:23">(<expr pos:start="15:9" pos:end="15:22"><operator pos:start="15:9" pos:end="15:9">!</operator><call pos:start="15:10" pos:end="15:22"><name pos:start="15:10" pos:end="15:20">tcg_enabled</name><argument_list pos:start="15:21" pos:end="15:22">()</argument_list></call></expr>)</condition> <block pos:start="15:25" pos:end="19:5">{<block_content pos:start="17:9" pos:end="17:15">

        <return pos:start="17:9" pos:end="17:15">return;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:28"><expr pos:start="23:5" pos:end="23:27"><call pos:start="23:5" pos:end="23:27"><name pos:start="23:5" pos:end="23:22">assert_cpu_is_self</name><argument_list pos:start="23:23" pos:end="23:27">(<argument pos:start="23:24" pos:end="23:26"><expr pos:start="23:24" pos:end="23:26"><name pos:start="23:24" pos:end="23:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:50"><expr pos:start="25:5" pos:end="25:49"><call pos:start="25:5" pos:end="25:49"><name pos:start="25:5" pos:end="25:13">tlb_debug</name><argument_list pos:start="25:14" pos:end="25:49">(<argument pos:start="25:15" pos:end="25:29"><expr pos:start="25:15" pos:end="25:29"><literal type="string" pos:start="25:15" pos:end="25:29">"(count: %d)\n"</literal></expr></argument>, <argument pos:start="25:32" pos:end="25:48"><expr pos:start="25:32" pos:end="25:48"><name pos:start="25:32" pos:end="25:46">tlb_flush_count</name><operator pos:start="25:47" pos:end="25:48">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:14"><expr pos:start="29:5" pos:end="29:13"><call pos:start="29:5" pos:end="29:13"><name pos:start="29:5" pos:end="29:11">tb_lock</name><argument_list pos:start="29:12" pos:end="29:13">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:55"><expr pos:start="33:5" pos:end="33:54"><call pos:start="33:5" pos:end="33:54"><name pos:start="33:5" pos:end="33:10">memset</name><argument_list pos:start="33:11" pos:end="33:54">(<argument pos:start="33:12" pos:end="33:25"><expr pos:start="33:12" pos:end="33:25"><name pos:start="33:12" pos:end="33:25"><name pos:start="33:12" pos:end="33:14">env</name><operator pos:start="33:15" pos:end="33:16">-&gt;</operator><name pos:start="33:17" pos:end="33:25">tlb_table</name></name></expr></argument>, <argument pos:start="33:28" pos:end="33:29"><expr pos:start="33:28" pos:end="33:29"><operator pos:start="33:28" pos:end="33:28">-</operator><literal type="number" pos:start="33:29" pos:end="33:29">1</literal></expr></argument>, <argument pos:start="33:32" pos:end="33:53"><expr pos:start="33:32" pos:end="33:53"><sizeof pos:start="33:32" pos:end="33:53">sizeof<argument_list pos:start="33:38" pos:end="33:53">(<argument pos:start="33:39" pos:end="33:52"><expr pos:start="33:39" pos:end="33:52"><name pos:start="33:39" pos:end="33:52"><name pos:start="33:39" pos:end="33:41">env</name><operator pos:start="33:42" pos:end="33:43">-&gt;</operator><name pos:start="33:44" pos:end="33:52">tlb_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:59"><expr pos:start="35:5" pos:end="35:58"><call pos:start="35:5" pos:end="35:58"><name pos:start="35:5" pos:end="35:10">memset</name><argument_list pos:start="35:11" pos:end="35:58">(<argument pos:start="35:12" pos:end="35:27"><expr pos:start="35:12" pos:end="35:27"><name pos:start="35:12" pos:end="35:27"><name pos:start="35:12" pos:end="35:14">env</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:27">tlb_v_table</name></name></expr></argument>, <argument pos:start="35:30" pos:end="35:31"><expr pos:start="35:30" pos:end="35:31"><operator pos:start="35:30" pos:end="35:30">-</operator><literal type="number" pos:start="35:31" pos:end="35:31">1</literal></expr></argument>, <argument pos:start="35:34" pos:end="35:57"><expr pos:start="35:34" pos:end="35:57"><sizeof pos:start="35:34" pos:end="35:57">sizeof<argument_list pos:start="35:40" pos:end="35:57">(<argument pos:start="35:41" pos:end="35:56"><expr pos:start="35:41" pos:end="35:56"><name pos:start="35:41" pos:end="35:56"><name pos:start="35:41" pos:end="35:43">env</name><operator pos:start="35:44" pos:end="35:45">-&gt;</operator><name pos:start="35:46" pos:end="35:56">tlb_v_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:60"><expr pos:start="37:5" pos:end="37:59"><call pos:start="37:5" pos:end="37:59"><name pos:start="37:5" pos:end="37:10">memset</name><argument_list pos:start="37:11" pos:end="37:59">(<argument pos:start="37:12" pos:end="37:28"><expr pos:start="37:12" pos:end="37:28"><name pos:start="37:12" pos:end="37:28"><name pos:start="37:12" pos:end="37:14">cpu</name><operator pos:start="37:15" pos:end="37:16">-&gt;</operator><name pos:start="37:17" pos:end="37:28">tb_jmp_cache</name></name></expr></argument>, <argument pos:start="37:31" pos:end="37:31"><expr pos:start="37:31" pos:end="37:31"><literal type="number" pos:start="37:31" pos:end="37:31">0</literal></expr></argument>, <argument pos:start="37:34" pos:end="37:58"><expr pos:start="37:34" pos:end="37:58"><sizeof pos:start="37:34" pos:end="37:58">sizeof<argument_list pos:start="37:40" pos:end="37:58">(<argument pos:start="37:41" pos:end="37:57"><expr pos:start="37:41" pos:end="37:57"><name pos:start="37:41" pos:end="37:57"><name pos:start="37:41" pos:end="37:43">cpu</name><operator pos:start="37:44" pos:end="37:45">-&gt;</operator><name pos:start="37:46" pos:end="37:57">tb_jmp_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:24"><expr pos:start="41:5" pos:end="41:23"><name pos:start="41:5" pos:end="41:19"><name pos:start="41:5" pos:end="41:7">env</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:19">vtlb_index</name></name> <operator pos:start="41:21" pos:end="41:21">=</operator> <literal type="number" pos:start="41:23" pos:end="41:23">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:29"><expr pos:start="43:5" pos:end="43:28"><name pos:start="43:5" pos:end="43:23"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:23">tlb_flush_addr</name></name> <operator pos:start="43:25" pos:end="43:25">=</operator> <operator pos:start="43:27" pos:end="43:27">-</operator><literal type="number" pos:start="43:28" pos:end="43:28">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:23"><name pos:start="45:5" pos:end="45:7">env</name><operator pos:start="45:8" pos:end="45:9">-&gt;</operator><name pos:start="45:10" pos:end="45:23">tlb_flush_mask</name></name> <operator pos:start="45:25" pos:end="45:25">=</operator> <literal type="number" pos:start="45:27" pos:end="45:27">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="49:5" pos:end="49:16"><expr pos:start="49:5" pos:end="49:15"><call pos:start="49:5" pos:end="49:15"><name pos:start="49:5" pos:end="49:13">tb_unlock</name><argument_list pos:start="49:14" pos:end="49:15">()</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:46"><expr pos:start="53:5" pos:end="53:45"><call pos:start="53:5" pos:end="53:45"><name pos:start="53:5" pos:end="53:17">atomic_mb_set</name><argument_list pos:start="53:18" pos:end="53:45">(<argument pos:start="53:19" pos:end="53:41"><expr pos:start="53:19" pos:end="53:41"><operator pos:start="53:19" pos:end="53:19">&amp;</operator><name pos:start="53:20" pos:end="53:41"><name pos:start="53:20" pos:end="53:22">cpu</name><operator pos:start="53:23" pos:end="53:24">-&gt;</operator><name pos:start="53:25" pos:end="53:41">pending_tlb_flush</name></name></expr></argument>, <argument pos:start="53:44" pos:end="53:44"><expr pos:start="53:44" pos:end="53:44"><literal type="number" pos:start="53:44" pos:end="53:44">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
