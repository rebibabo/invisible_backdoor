<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/2332.c" pos:tabs="8"><function pos:start="1:1" pos:end="205:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:26">transcode_audio</name><parameter_list pos:start="1:27" pos:end="1:76">(<parameter pos:start="1:28" pos:end="1:43"><decl pos:start="1:28" pos:end="1:43"><type pos:start="1:28" pos:end="1:43"><name pos:start="1:28" pos:end="1:38">InputStream</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">ist</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:53">AVPacket</name> <modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:58">pkt</name></decl></parameter>, <parameter pos:start="1:61" pos:end="1:75"><decl pos:start="1:61" pos:end="1:75"><type pos:start="1:61" pos:end="1:75"><name pos:start="1:61" pos:end="1:63">int</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:75">got_output</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="205:1">{<block_content pos:start="5:5" pos:end="203:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">AVFrame</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:26">decoded_frame</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:43"><decl pos:start="7:5" pos:end="7:42"><type pos:start="7:5" pos:end="7:20"><name pos:start="7:5" pos:end="7:18">AVCodecContext</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:25">avctx</name> <init pos:start="7:27" pos:end="7:42">= <expr pos:start="7:29" pos:end="7:42"><name pos:start="7:29" pos:end="7:42"><name pos:start="7:29" pos:end="7:31">ist</name><operator pos:start="7:32" pos:end="7:33">-&gt;</operator><name pos:start="7:34" pos:end="7:35">st</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:42">codec</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:66"><decl pos:start="9:5" pos:end="9:65"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:11">bps</name> <init pos:start="9:13" pos:end="9:65">= <expr pos:start="9:15" pos:end="9:65"><call pos:start="9:15" pos:end="9:65"><name pos:start="9:15" pos:end="9:37">av_get_bytes_per_sample</name><argument_list pos:start="9:38" pos:end="9:65">(<argument pos:start="9:39" pos:end="9:64"><expr pos:start="9:39" pos:end="9:64"><name pos:start="9:39" pos:end="9:64"><name pos:start="9:39" pos:end="9:41">ist</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:45">st</name><operator pos:start="9:46" pos:end="9:47">-&gt;</operator><name pos:start="9:48" pos:end="9:52">codec</name><operator pos:start="9:53" pos:end="9:54">-&gt;</operator><name pos:start="9:55" pos:end="9:64">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:15"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:14"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:14">ret</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="21:55"><if pos:start="15:5" pos:end="17:31">if <condition pos:start="15:8" pos:end="15:77">(<expr pos:start="15:9" pos:end="15:76"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:27"><name pos:start="15:10" pos:end="15:12">ist</name><operator pos:start="15:13" pos:end="15:14">-&gt;</operator><name pos:start="15:15" pos:end="15:27">decoded_frame</name></name> <operator pos:start="15:29" pos:end="15:30">&amp;&amp;</operator> <operator pos:start="15:32" pos:end="15:32">!</operator><operator pos:start="15:33" pos:end="15:33">(</operator><name pos:start="15:34" pos:end="15:51"><name pos:start="15:34" pos:end="15:36">ist</name><operator pos:start="15:37" pos:end="15:38">-&gt;</operator><name pos:start="15:39" pos:end="15:51">decoded_frame</name></name> <operator pos:start="15:53" pos:end="15:53">=</operator> <call pos:start="15:55" pos:end="15:75"><name pos:start="15:55" pos:end="15:73">avcodec_alloc_frame</name><argument_list pos:start="15:74" pos:end="15:75">()</argument_list></call><operator pos:start="15:76" pos:end="15:76">)</operator></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:31"><block_content pos:start="17:9" pos:end="17:31">

        <return pos:start="17:9" pos:end="17:31">return <expr pos:start="17:16" pos:end="17:30"><call pos:start="17:16" pos:end="17:30"><name pos:start="17:16" pos:end="17:22">AVERROR</name><argument_list pos:start="17:23" pos:end="17:30">(<argument pos:start="17:24" pos:end="17:29"><expr pos:start="17:24" pos:end="17:29"><name pos:start="17:24" pos:end="17:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>

    <else pos:start="19:5" pos:end="21:55">else<block type="pseudo" pos:start="21:9" pos:end="21:55"><block_content pos:start="21:9" pos:end="21:55">

        <expr_stmt pos:start="21:9" pos:end="21:55"><expr pos:start="21:9" pos:end="21:54"><call pos:start="21:9" pos:end="21:54"><name pos:start="21:9" pos:end="21:34">avcodec_get_frame_defaults</name><argument_list pos:start="21:35" pos:end="21:54">(<argument pos:start="21:36" pos:end="21:53"><expr pos:start="21:36" pos:end="21:53"><name pos:start="21:36" pos:end="21:53"><name pos:start="21:36" pos:end="21:38">ist</name><operator pos:start="21:39" pos:end="21:40">-&gt;</operator><name pos:start="21:41" pos:end="21:53">decoded_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:39"><expr pos:start="23:5" pos:end="23:38"><name pos:start="23:5" pos:end="23:17">decoded_frame</name> <operator pos:start="23:19" pos:end="23:19">=</operator> <name pos:start="23:21" pos:end="23:38"><name pos:start="23:21" pos:end="23:23">ist</name><operator pos:start="23:24" pos:end="23:25">-&gt;</operator><name pos:start="23:26" pos:end="23:38">decoded_frame</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:71"><expr pos:start="27:5" pos:end="27:70"><name pos:start="27:5" pos:end="27:7">ret</name> <operator pos:start="27:9" pos:end="27:9">=</operator> <call pos:start="27:11" pos:end="27:70"><name pos:start="27:11" pos:end="27:31">avcodec_decode_audio4</name><argument_list pos:start="27:32" pos:end="27:70">(<argument pos:start="27:33" pos:end="27:37"><expr pos:start="27:33" pos:end="27:37"><name pos:start="27:33" pos:end="27:37">avctx</name></expr></argument>, <argument pos:start="27:40" pos:end="27:52"><expr pos:start="27:40" pos:end="27:52"><name pos:start="27:40" pos:end="27:52">decoded_frame</name></expr></argument>, <argument pos:start="27:55" pos:end="27:64"><expr pos:start="27:55" pos:end="27:64"><name pos:start="27:55" pos:end="27:64">got_output</name></expr></argument>, <argument pos:start="27:67" pos:end="27:69"><expr pos:start="27:67" pos:end="27:69"><name pos:start="27:67" pos:end="27:69">pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="33:5"><if pos:start="29:5" pos:end="33:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="33:5">{<block_content pos:start="31:9" pos:end="31:19">

        <return pos:start="31:9" pos:end="31:19">return <expr pos:start="31:16" pos:end="31:18"><name pos:start="31:16" pos:end="31:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="37:5" pos:end="43:5"><if pos:start="37:5" pos:end="43:5">if <condition pos:start="37:8" pos:end="37:21">(<expr pos:start="37:9" pos:end="37:20"><operator pos:start="37:9" pos:end="37:9">!</operator><operator pos:start="37:10" pos:end="37:10">*</operator><name pos:start="37:11" pos:end="37:20">got_output</name></expr>)</condition> <block pos:start="37:23" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:19">

        <comment type="block" pos:start="39:9" pos:end="39:28">/* no audio frame */</comment>

        <return pos:start="41:9" pos:end="41:19">return <expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ret</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="47:5" pos:end="49:67">/* if the decoder provides a pts, use it instead of the last packet pts.

       the decoder could be delaying output by a packet or more. */</comment>

    <if_stmt pos:start="51:5" pos:end="53:43"><if pos:start="51:5" pos:end="53:43">if <condition pos:start="51:8" pos:end="51:45">(<expr pos:start="51:9" pos:end="51:44"><name pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:21">decoded_frame</name><operator pos:start="51:22" pos:end="51:23">-&gt;</operator><name pos:start="51:24" pos:end="51:26">pts</name></name> <operator pos:start="51:28" pos:end="51:29">!=</operator> <name pos:start="51:31" pos:end="51:44">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:43"><block_content pos:start="53:9" pos:end="53:43">

        <expr_stmt pos:start="53:9" pos:end="53:43"><expr pos:start="53:9" pos:end="53:42"><name pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:11">ist</name><operator pos:start="53:12" pos:end="53:13">-&gt;</operator><name pos:start="53:14" pos:end="53:21">next_dts</name></name> <operator pos:start="53:23" pos:end="53:23">=</operator> <name pos:start="53:25" pos:end="53:42"><name pos:start="53:25" pos:end="53:37">decoded_frame</name><operator pos:start="53:38" pos:end="53:39">-&gt;</operator><name pos:start="53:40" pos:end="53:42">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <comment type="block" pos:start="57:5" pos:end="59:68">/* increment next_dts to use for the case where the input stream does not

       have timestamps or there are multiple frames in the packet */</comment>

    <expr_stmt pos:start="61:5" pos:end="63:40"><expr pos:start="61:5" pos:end="63:39"><name pos:start="61:5" pos:end="61:17"><name pos:start="61:5" pos:end="61:7">ist</name><operator pos:start="61:8" pos:end="61:9">-&gt;</operator><name pos:start="61:10" pos:end="61:17">next_dts</name></name> <operator pos:start="61:19" pos:end="61:20">+=</operator> <operator pos:start="61:22" pos:end="61:22">(</operator><operator pos:start="61:23" pos:end="61:23">(</operator><name pos:start="61:24" pos:end="61:30">int64_t</name><operator pos:start="61:31" pos:end="61:31">)</operator><name pos:start="61:32" pos:end="61:43">AV_TIME_BASE</name> <operator pos:start="61:45" pos:end="61:45">*</operator> <name pos:start="61:47" pos:end="61:71"><name pos:start="61:47" pos:end="61:59">decoded_frame</name><operator pos:start="61:60" pos:end="61:61">-&gt;</operator><name pos:start="61:62" pos:end="61:71">nb_samples</name></name><operator pos:start="61:72" pos:end="61:72">)</operator> <operator pos:start="61:74" pos:end="61:74">/</operator>

                     <name pos:start="63:22" pos:end="63:39"><name pos:start="63:22" pos:end="63:26">avctx</name><operator pos:start="63:27" pos:end="63:28">-&gt;</operator><name pos:start="63:29" pos:end="63:39">sample_rate</name></name></expr>;</expr_stmt>



    <comment type="line" pos:start="67:5" pos:end="67:32">// preprocess audio (volume)</comment>

    <if_stmt pos:start="69:5" pos:end="179:5"><if pos:start="69:5" pos:end="179:5">if <condition pos:start="69:8" pos:end="69:28">(<expr pos:start="69:9" pos:end="69:27"><name pos:start="69:9" pos:end="69:20">audio_volume</name> <operator pos:start="69:22" pos:end="69:23">!=</operator> <literal type="number" pos:start="69:25" pos:end="69:27">256</literal></expr>)</condition> <block pos:start="69:30" pos:end="179:5">{<block_content pos:start="71:9" pos:end="177:9">

        <decl_stmt pos:start="71:9" pos:end="71:82"><decl pos:start="71:9" pos:end="71:81"><type pos:start="71:9" pos:end="71:11"><name pos:start="71:9" pos:end="71:11">int</name></type> <name pos:start="71:13" pos:end="71:29">decoded_data_size</name> <init pos:start="71:31" pos:end="71:81">= <expr pos:start="71:33" pos:end="71:81"><name pos:start="71:33" pos:end="71:57"><name pos:start="71:33" pos:end="71:45">decoded_frame</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:57">nb_samples</name></name> <operator pos:start="71:59" pos:end="71:59">*</operator> <name pos:start="71:61" pos:end="71:75"><name pos:start="71:61" pos:end="71:65">avctx</name><operator pos:start="71:66" pos:end="71:67">-&gt;</operator><name pos:start="71:68" pos:end="71:75">channels</name></name> <operator pos:start="71:77" pos:end="71:77">*</operator> <name pos:start="71:79" pos:end="71:81">bps</name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="73:9" pos:end="73:47"><decl pos:start="73:9" pos:end="73:46"><type pos:start="73:9" pos:end="73:14"><name pos:start="73:9" pos:end="73:12">void</name> <modifier pos:start="73:14" pos:end="73:14">*</modifier></type><name pos:start="73:15" pos:end="73:21">samples</name> <init pos:start="73:23" pos:end="73:46">= <expr pos:start="73:25" pos:end="73:46"><name pos:start="73:25" pos:end="73:46"><name pos:start="73:25" pos:end="73:37">decoded_frame</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:43">data</name><index pos:start="73:44" pos:end="73:46">[<expr pos:start="73:45" pos:end="73:45"><literal type="number" pos:start="73:45" pos:end="73:45">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <switch pos:start="75:9" pos:end="177:9">switch <condition pos:start="75:16" pos:end="75:34">(<expr pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:33"><name pos:start="75:17" pos:end="75:21">avctx</name><operator pos:start="75:22" pos:end="75:23">-&gt;</operator><name pos:start="75:24" pos:end="75:33">sample_fmt</name></name></expr>)</condition> <block pos:start="75:36" pos:end="177:9">{<block_content pos:start="77:9" pos:end="175:28">

        <case pos:start="77:9" pos:end="77:30">case <expr pos:start="77:14" pos:end="77:29"><name pos:start="77:14" pos:end="77:29">AV_SAMPLE_FMT_U8</name></expr>:</case>

        <block pos:start="79:9" pos:end="93:9">{<block_content pos:start="81:13" pos:end="91:18">

            <decl_stmt pos:start="81:13" pos:end="81:36"><decl pos:start="81:13" pos:end="81:35"><type pos:start="81:13" pos:end="81:21"><name pos:start="81:13" pos:end="81:19">uint8_t</name> <modifier pos:start="81:21" pos:end="81:21">*</modifier></type><name pos:start="81:22" pos:end="81:25">volp</name> <init pos:start="81:27" pos:end="81:35">= <expr pos:start="81:29" pos:end="81:35"><name pos:start="81:29" pos:end="81:35">samples</name></expr></init></decl>;</decl_stmt>

            <for pos:start="83:13" pos:end="89:13">for <control pos:start="83:17" pos:end="83:69">(<init pos:start="83:18" pos:end="83:23"><expr pos:start="83:18" pos:end="83:22"><name pos:start="83:18" pos:end="83:18">i</name> <operator pos:start="83:20" pos:end="83:20">=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>;</init> <condition pos:start="83:25" pos:end="83:64"><expr pos:start="83:25" pos:end="83:63"><name pos:start="83:25" pos:end="83:25">i</name> <operator pos:start="83:27" pos:end="83:27">&lt;</operator> <operator pos:start="83:29" pos:end="83:29">(</operator><name pos:start="83:30" pos:end="83:46">decoded_data_size</name> <operator pos:start="83:48" pos:end="83:48">/</operator> <sizeof pos:start="83:50" pos:end="83:62">sizeof<argument_list pos:start="83:56" pos:end="83:62">(<argument pos:start="83:57" pos:end="83:61"><expr pos:start="83:57" pos:end="83:61"><operator pos:start="83:57" pos:end="83:57">*</operator><name pos:start="83:58" pos:end="83:61">volp</name></expr></argument>)</argument_list></sizeof><operator pos:start="83:63" pos:end="83:63">)</operator></expr>;</condition> <incr pos:start="83:66" pos:end="83:68"><expr pos:start="83:66" pos:end="83:68"><name pos:start="83:66" pos:end="83:66">i</name><operator pos:start="83:67" pos:end="83:68">++</operator></expr></incr>)</control> <block pos:start="83:71" pos:end="89:13">{<block_content pos:start="85:17" pos:end="87:43">

                <decl_stmt pos:start="85:17" pos:end="85:74"><decl pos:start="85:17" pos:end="85:73"><type pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">int</name></type> <name pos:start="85:21" pos:end="85:21">v</name> <init pos:start="85:23" pos:end="85:73">= <expr pos:start="85:25" pos:end="85:73"><operator pos:start="85:25" pos:end="85:25">(</operator><operator pos:start="85:26" pos:end="85:26">(</operator><operator pos:start="85:27" pos:end="85:27">(</operator><operator pos:start="85:28" pos:end="85:28">*</operator><name pos:start="85:29" pos:end="85:32">volp</name> <operator pos:start="85:34" pos:end="85:34">-</operator> <literal type="number" pos:start="85:36" pos:end="85:38">128</literal><operator pos:start="85:39" pos:end="85:39">)</operator> <operator pos:start="85:41" pos:end="85:41">*</operator> <name pos:start="85:43" pos:end="85:54">audio_volume</name> <operator pos:start="85:56" pos:end="85:56">+</operator> <literal type="number" pos:start="85:58" pos:end="85:60">128</literal><operator pos:start="85:61" pos:end="85:61">)</operator> <operator pos:start="85:63" pos:end="85:64">&gt;&gt;</operator> <literal type="number" pos:start="85:66" pos:end="85:66">8</literal><operator pos:start="85:67" pos:end="85:67">)</operator> <operator pos:start="85:69" pos:end="85:69">+</operator> <literal type="number" pos:start="85:71" pos:end="85:73">128</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:43"><expr pos:start="87:17" pos:end="87:42"><operator pos:start="87:17" pos:end="87:17">*</operator><name pos:start="87:18" pos:end="87:21">volp</name><operator pos:start="87:22" pos:end="87:23">++</operator> <operator pos:start="87:25" pos:end="87:25">=</operator> <call pos:start="87:27" pos:end="87:42"><name pos:start="87:27" pos:end="87:39">av_clip_uint8</name><argument_list pos:start="87:40" pos:end="87:42">(<argument pos:start="87:41" pos:end="87:41"><expr pos:start="87:41" pos:end="87:41"><name pos:start="87:41" pos:end="87:41">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="91:13" pos:end="91:18">break;</break>

        </block_content>}</block>

        <case pos:start="95:9" pos:end="95:31">case <expr pos:start="95:14" pos:end="95:30"><name pos:start="95:14" pos:end="95:30">AV_SAMPLE_FMT_S16</name></expr>:</case>

        <block pos:start="97:9" pos:end="111:9">{<block_content pos:start="99:13" pos:end="109:18">

            <decl_stmt pos:start="99:13" pos:end="99:36"><decl pos:start="99:13" pos:end="99:35"><type pos:start="99:13" pos:end="99:21"><name pos:start="99:13" pos:end="99:19">int16_t</name> <modifier pos:start="99:21" pos:end="99:21">*</modifier></type><name pos:start="99:22" pos:end="99:25">volp</name> <init pos:start="99:27" pos:end="99:35">= <expr pos:start="99:29" pos:end="99:35"><name pos:start="99:29" pos:end="99:35">samples</name></expr></init></decl>;</decl_stmt>

            <for pos:start="101:13" pos:end="107:13">for <control pos:start="101:17" pos:end="101:69">(<init pos:start="101:18" pos:end="101:23"><expr pos:start="101:18" pos:end="101:22"><name pos:start="101:18" pos:end="101:18">i</name> <operator pos:start="101:20" pos:end="101:20">=</operator> <literal type="number" pos:start="101:22" pos:end="101:22">0</literal></expr>;</init> <condition pos:start="101:25" pos:end="101:64"><expr pos:start="101:25" pos:end="101:63"><name pos:start="101:25" pos:end="101:25">i</name> <operator pos:start="101:27" pos:end="101:27">&lt;</operator> <operator pos:start="101:29" pos:end="101:29">(</operator><name pos:start="101:30" pos:end="101:46">decoded_data_size</name> <operator pos:start="101:48" pos:end="101:48">/</operator> <sizeof pos:start="101:50" pos:end="101:62">sizeof<argument_list pos:start="101:56" pos:end="101:62">(<argument pos:start="101:57" pos:end="101:61"><expr pos:start="101:57" pos:end="101:61"><operator pos:start="101:57" pos:end="101:57">*</operator><name pos:start="101:58" pos:end="101:61">volp</name></expr></argument>)</argument_list></sizeof><operator pos:start="101:63" pos:end="101:63">)</operator></expr>;</condition> <incr pos:start="101:66" pos:end="101:68"><expr pos:start="101:66" pos:end="101:68"><name pos:start="101:66" pos:end="101:66">i</name><operator pos:start="101:67" pos:end="101:68">++</operator></expr></incr>)</control> <block pos:start="101:71" pos:end="107:13">{<block_content pos:start="103:17" pos:end="105:43">

                <decl_stmt pos:start="103:17" pos:end="103:60"><decl pos:start="103:17" pos:end="103:59"><type pos:start="103:17" pos:end="103:19"><name pos:start="103:17" pos:end="103:19">int</name></type> <name pos:start="103:21" pos:end="103:21">v</name> <init pos:start="103:23" pos:end="103:59">= <expr pos:start="103:25" pos:end="103:59"><operator pos:start="103:25" pos:end="103:25">(</operator><operator pos:start="103:26" pos:end="103:26">(</operator><operator pos:start="103:27" pos:end="103:27">*</operator><name pos:start="103:28" pos:end="103:31">volp</name><operator pos:start="103:32" pos:end="103:32">)</operator> <operator pos:start="103:34" pos:end="103:34">*</operator> <name pos:start="103:36" pos:end="103:47">audio_volume</name> <operator pos:start="103:49" pos:end="103:49">+</operator> <literal type="number" pos:start="103:51" pos:end="103:53">128</literal><operator pos:start="103:54" pos:end="103:54">)</operator> <operator pos:start="103:56" pos:end="103:57">&gt;&gt;</operator> <literal type="number" pos:start="103:59" pos:end="103:59">8</literal></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:43"><expr pos:start="105:17" pos:end="105:42"><operator pos:start="105:17" pos:end="105:17">*</operator><name pos:start="105:18" pos:end="105:21">volp</name><operator pos:start="105:22" pos:end="105:23">++</operator> <operator pos:start="105:25" pos:end="105:25">=</operator> <call pos:start="105:27" pos:end="105:42"><name pos:start="105:27" pos:end="105:39">av_clip_int16</name><argument_list pos:start="105:40" pos:end="105:42">(<argument pos:start="105:41" pos:end="105:41"><expr pos:start="105:41" pos:end="105:41"><name pos:start="105:41" pos:end="105:41">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="109:13" pos:end="109:18">break;</break>

        </block_content>}</block>

        <case pos:start="113:9" pos:end="113:31">case <expr pos:start="113:14" pos:end="113:30"><name pos:start="113:14" pos:end="113:30">AV_SAMPLE_FMT_S32</name></expr>:</case>

        <block pos:start="115:9" pos:end="129:9">{<block_content pos:start="117:13" pos:end="127:18">

            <decl_stmt pos:start="117:13" pos:end="117:36"><decl pos:start="117:13" pos:end="117:35"><type pos:start="117:13" pos:end="117:21"><name pos:start="117:13" pos:end="117:19">int32_t</name> <modifier pos:start="117:21" pos:end="117:21">*</modifier></type><name pos:start="117:22" pos:end="117:25">volp</name> <init pos:start="117:27" pos:end="117:35">= <expr pos:start="117:29" pos:end="117:35"><name pos:start="117:29" pos:end="117:35">samples</name></expr></init></decl>;</decl_stmt>

            <for pos:start="119:13" pos:end="125:13">for <control pos:start="119:17" pos:end="119:69">(<init pos:start="119:18" pos:end="119:23"><expr pos:start="119:18" pos:end="119:22"><name pos:start="119:18" pos:end="119:18">i</name> <operator pos:start="119:20" pos:end="119:20">=</operator> <literal type="number" pos:start="119:22" pos:end="119:22">0</literal></expr>;</init> <condition pos:start="119:25" pos:end="119:64"><expr pos:start="119:25" pos:end="119:63"><name pos:start="119:25" pos:end="119:25">i</name> <operator pos:start="119:27" pos:end="119:27">&lt;</operator> <operator pos:start="119:29" pos:end="119:29">(</operator><name pos:start="119:30" pos:end="119:46">decoded_data_size</name> <operator pos:start="119:48" pos:end="119:48">/</operator> <sizeof pos:start="119:50" pos:end="119:62">sizeof<argument_list pos:start="119:56" pos:end="119:62">(<argument pos:start="119:57" pos:end="119:61"><expr pos:start="119:57" pos:end="119:61"><operator pos:start="119:57" pos:end="119:57">*</operator><name pos:start="119:58" pos:end="119:61">volp</name></expr></argument>)</argument_list></sizeof><operator pos:start="119:63" pos:end="119:63">)</operator></expr>;</condition> <incr pos:start="119:66" pos:end="119:68"><expr pos:start="119:66" pos:end="119:68"><name pos:start="119:66" pos:end="119:66">i</name><operator pos:start="119:67" pos:end="119:68">++</operator></expr></incr>)</control> <block pos:start="119:71" pos:end="125:13">{<block_content pos:start="121:17" pos:end="123:44">

                <decl_stmt pos:start="121:17" pos:end="121:73"><decl pos:start="121:17" pos:end="121:72"><type pos:start="121:17" pos:end="121:23"><name pos:start="121:17" pos:end="121:23">int64_t</name></type> <name pos:start="121:25" pos:end="121:25">v</name> <init pos:start="121:27" pos:end="121:72">= <expr pos:start="121:29" pos:end="121:72"><operator pos:start="121:29" pos:end="121:29">(</operator><operator pos:start="121:30" pos:end="121:30">(</operator><operator pos:start="121:31" pos:end="121:31">(</operator><name pos:start="121:32" pos:end="121:38">int64_t</name><operator pos:start="121:39" pos:end="121:39">)</operator><operator pos:start="121:40" pos:end="121:40">*</operator><name pos:start="121:41" pos:end="121:44">volp</name> <operator pos:start="121:46" pos:end="121:46">*</operator> <name pos:start="121:48" pos:end="121:59">audio_volume</name> <operator pos:start="121:61" pos:end="121:61">+</operator> <literal type="number" pos:start="121:63" pos:end="121:65">128</literal><operator pos:start="121:66" pos:end="121:66">)</operator> <operator pos:start="121:68" pos:end="121:69">&gt;&gt;</operator> <literal type="number" pos:start="121:71" pos:end="121:71">8</literal><operator pos:start="121:72" pos:end="121:72">)</operator></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="123:17" pos:end="123:44"><expr pos:start="123:17" pos:end="123:43"><operator pos:start="123:17" pos:end="123:17">*</operator><name pos:start="123:18" pos:end="123:21">volp</name><operator pos:start="123:22" pos:end="123:23">++</operator> <operator pos:start="123:25" pos:end="123:25">=</operator> <call pos:start="123:27" pos:end="123:43"><name pos:start="123:27" pos:end="123:40">av_clipl_int32</name><argument_list pos:start="123:41" pos:end="123:43">(<argument pos:start="123:42" pos:end="123:42"><expr pos:start="123:42" pos:end="123:42"><name pos:start="123:42" pos:end="123:42">v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="127:13" pos:end="127:18">break;</break>

        </block_content>}</block>

        <case pos:start="131:9" pos:end="131:31">case <expr pos:start="131:14" pos:end="131:30"><name pos:start="131:14" pos:end="131:30">AV_SAMPLE_FMT_FLT</name></expr>:</case>

        <block pos:start="133:9" pos:end="147:9">{<block_content pos:start="135:13" pos:end="145:18">

            <decl_stmt pos:start="135:13" pos:end="135:34"><decl pos:start="135:13" pos:end="135:33"><type pos:start="135:13" pos:end="135:19"><name pos:start="135:13" pos:end="135:17">float</name> <modifier pos:start="135:19" pos:end="135:19">*</modifier></type><name pos:start="135:20" pos:end="135:23">volp</name> <init pos:start="135:25" pos:end="135:33">= <expr pos:start="135:27" pos:end="135:33"><name pos:start="135:27" pos:end="135:33">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="137:13" pos:end="137:47"><decl pos:start="137:13" pos:end="137:46"><type pos:start="137:13" pos:end="137:17"><name pos:start="137:13" pos:end="137:17">float</name></type> <name pos:start="137:19" pos:end="137:23">scale</name> <init pos:start="137:25" pos:end="137:46">= <expr pos:start="137:27" pos:end="137:46"><name pos:start="137:27" pos:end="137:38">audio_volume</name> <operator pos:start="137:40" pos:end="137:40">/</operator> <literal type="number" pos:start="137:42" pos:end="137:46">256.f</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="139:13" pos:end="143:13">for <control pos:start="139:17" pos:end="139:69">(<init pos:start="139:18" pos:end="139:23"><expr pos:start="139:18" pos:end="139:22"><name pos:start="139:18" pos:end="139:18">i</name> <operator pos:start="139:20" pos:end="139:20">=</operator> <literal type="number" pos:start="139:22" pos:end="139:22">0</literal></expr>;</init> <condition pos:start="139:25" pos:end="139:64"><expr pos:start="139:25" pos:end="139:63"><name pos:start="139:25" pos:end="139:25">i</name> <operator pos:start="139:27" pos:end="139:27">&lt;</operator> <operator pos:start="139:29" pos:end="139:29">(</operator><name pos:start="139:30" pos:end="139:46">decoded_data_size</name> <operator pos:start="139:48" pos:end="139:48">/</operator> <sizeof pos:start="139:50" pos:end="139:62">sizeof<argument_list pos:start="139:56" pos:end="139:62">(<argument pos:start="139:57" pos:end="139:61"><expr pos:start="139:57" pos:end="139:61"><operator pos:start="139:57" pos:end="139:57">*</operator><name pos:start="139:58" pos:end="139:61">volp</name></expr></argument>)</argument_list></sizeof><operator pos:start="139:63" pos:end="139:63">)</operator></expr>;</condition> <incr pos:start="139:66" pos:end="139:68"><expr pos:start="139:66" pos:end="139:68"><name pos:start="139:66" pos:end="139:66">i</name><operator pos:start="139:67" pos:end="139:68">++</operator></expr></incr>)</control> <block pos:start="139:71" pos:end="143:13">{<block_content pos:start="141:17" pos:end="141:33">

                <expr_stmt pos:start="141:17" pos:end="141:33"><expr pos:start="141:17" pos:end="141:32"><operator pos:start="141:17" pos:end="141:17">*</operator><name pos:start="141:18" pos:end="141:21">volp</name><operator pos:start="141:22" pos:end="141:23">++</operator> <operator pos:start="141:25" pos:end="141:26">*=</operator> <name pos:start="141:28" pos:end="141:32">scale</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="145:13" pos:end="145:18">break;</break>

        </block_content>}</block>

        <case pos:start="149:9" pos:end="149:31">case <expr pos:start="149:14" pos:end="149:30"><name pos:start="149:14" pos:end="149:30">AV_SAMPLE_FMT_DBL</name></expr>:</case>

        <block pos:start="151:9" pos:end="165:9">{<block_content pos:start="153:13" pos:end="163:18">

            <decl_stmt pos:start="153:13" pos:end="153:35"><decl pos:start="153:13" pos:end="153:34"><type pos:start="153:13" pos:end="153:20"><name pos:start="153:13" pos:end="153:18">double</name> <modifier pos:start="153:20" pos:end="153:20">*</modifier></type><name pos:start="153:21" pos:end="153:24">volp</name> <init pos:start="153:26" pos:end="153:34">= <expr pos:start="153:28" pos:end="153:34"><name pos:start="153:28" pos:end="153:34">samples</name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="155:13" pos:end="155:47"><decl pos:start="155:13" pos:end="155:46"><type pos:start="155:13" pos:end="155:18"><name pos:start="155:13" pos:end="155:18">double</name></type> <name pos:start="155:20" pos:end="155:24">scale</name> <init pos:start="155:26" pos:end="155:46">= <expr pos:start="155:28" pos:end="155:46"><name pos:start="155:28" pos:end="155:39">audio_volume</name> <operator pos:start="155:41" pos:end="155:41">/</operator> <literal type="number" pos:start="155:43" pos:end="155:46">256.</literal></expr></init></decl>;</decl_stmt>

            <for pos:start="157:13" pos:end="161:13">for <control pos:start="157:17" pos:end="157:69">(<init pos:start="157:18" pos:end="157:23"><expr pos:start="157:18" pos:end="157:22"><name pos:start="157:18" pos:end="157:18">i</name> <operator pos:start="157:20" pos:end="157:20">=</operator> <literal type="number" pos:start="157:22" pos:end="157:22">0</literal></expr>;</init> <condition pos:start="157:25" pos:end="157:64"><expr pos:start="157:25" pos:end="157:63"><name pos:start="157:25" pos:end="157:25">i</name> <operator pos:start="157:27" pos:end="157:27">&lt;</operator> <operator pos:start="157:29" pos:end="157:29">(</operator><name pos:start="157:30" pos:end="157:46">decoded_data_size</name> <operator pos:start="157:48" pos:end="157:48">/</operator> <sizeof pos:start="157:50" pos:end="157:62">sizeof<argument_list pos:start="157:56" pos:end="157:62">(<argument pos:start="157:57" pos:end="157:61"><expr pos:start="157:57" pos:end="157:61"><operator pos:start="157:57" pos:end="157:57">*</operator><name pos:start="157:58" pos:end="157:61">volp</name></expr></argument>)</argument_list></sizeof><operator pos:start="157:63" pos:end="157:63">)</operator></expr>;</condition> <incr pos:start="157:66" pos:end="157:68"><expr pos:start="157:66" pos:end="157:68"><name pos:start="157:66" pos:end="157:66">i</name><operator pos:start="157:67" pos:end="157:68">++</operator></expr></incr>)</control> <block pos:start="157:71" pos:end="161:13">{<block_content pos:start="159:17" pos:end="159:33">

                <expr_stmt pos:start="159:17" pos:end="159:33"><expr pos:start="159:17" pos:end="159:32"><operator pos:start="159:17" pos:end="159:17">*</operator><name pos:start="159:18" pos:end="159:21">volp</name><operator pos:start="159:22" pos:end="159:23">++</operator> <operator pos:start="159:25" pos:end="159:26">*=</operator> <name pos:start="159:28" pos:end="159:32">scale</name></expr>;</expr_stmt>

            </block_content>}</block></for>

            <break pos:start="163:13" pos:end="163:18">break;</break>

        </block_content>}</block>

        <default pos:start="167:9" pos:end="167:16">default:</default>

            <expr_stmt pos:start="169:13" pos:end="173:71"><expr pos:start="169:13" pos:end="173:70"><call pos:start="169:13" pos:end="173:70"><name pos:start="169:13" pos:end="169:18">av_log</name><argument_list pos:start="169:19" pos:end="173:70">(<argument pos:start="169:20" pos:end="169:23"><expr pos:start="169:20" pos:end="169:23"><name pos:start="169:20" pos:end="169:23">NULL</name></expr></argument>, <argument pos:start="169:26" pos:end="169:37"><expr pos:start="169:26" pos:end="169:37"><name pos:start="169:26" pos:end="169:37">AV_LOG_FATAL</name></expr></argument>,

                   <argument pos:start="171:20" pos:end="171:84"><expr pos:start="171:20" pos:end="171:84"><literal type="string" pos:start="171:20" pos:end="171:84">"Audio volume adjustment on sample format %s is not supported.\n"</literal></expr></argument>,

                   <argument pos:start="173:20" pos:end="173:69"><expr pos:start="173:20" pos:end="173:69"><call pos:start="173:20" pos:end="173:69"><name pos:start="173:20" pos:end="173:41">av_get_sample_fmt_name</name><argument_list pos:start="173:42" pos:end="173:69">(<argument pos:start="173:43" pos:end="173:68"><expr pos:start="173:43" pos:end="173:68"><name pos:start="173:43" pos:end="173:68"><name pos:start="173:43" pos:end="173:45">ist</name><operator pos:start="173:46" pos:end="173:47">-&gt;</operator><name pos:start="173:48" pos:end="173:49">st</name><operator pos:start="173:50" pos:end="173:51">-&gt;</operator><name pos:start="173:52" pos:end="173:56">codec</name><operator pos:start="173:57" pos:end="173:58">-&gt;</operator><name pos:start="173:59" pos:end="173:68">sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="175:13" pos:end="175:28"><expr pos:start="175:13" pos:end="175:27"><call pos:start="175:13" pos:end="175:27"><name pos:start="175:13" pos:end="175:24">exit_program</name><argument_list pos:start="175:25" pos:end="175:27">(<argument pos:start="175:26" pos:end="175:26"><expr pos:start="175:26" pos:end="175:26"><literal type="number" pos:start="175:26" pos:end="175:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></switch>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:24"><expr pos:start="183:5" pos:end="183:23"><call pos:start="183:5" pos:end="183:23"><name pos:start="183:5" pos:end="183:18">rate_emu_sleep</name><argument_list pos:start="183:19" pos:end="183:23">(<argument pos:start="183:20" pos:end="183:22"><expr pos:start="183:20" pos:end="183:22"><name pos:start="183:20" pos:end="183:22">ist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <for pos:start="187:5" pos:end="199:5">for <control pos:start="187:9" pos:end="187:43">(<init pos:start="187:10" pos:end="187:15"><expr pos:start="187:10" pos:end="187:14"><name pos:start="187:10" pos:end="187:10">i</name> <operator pos:start="187:12" pos:end="187:12">=</operator> <literal type="number" pos:start="187:14" pos:end="187:14">0</literal></expr>;</init> <condition pos:start="187:17" pos:end="187:38"><expr pos:start="187:17" pos:end="187:37"><name pos:start="187:17" pos:end="187:17">i</name> <operator pos:start="187:19" pos:end="187:19">&lt;</operator> <name pos:start="187:21" pos:end="187:37">nb_output_streams</name></expr>;</condition> <incr pos:start="187:40" pos:end="187:42"><expr pos:start="187:40" pos:end="187:42"><name pos:start="187:40" pos:end="187:40">i</name><operator pos:start="187:41" pos:end="187:42">++</operator></expr></incr>)</control> <block pos:start="187:45" pos:end="199:5">{<block_content pos:start="189:9" pos:end="197:82">

        <decl_stmt pos:start="189:9" pos:end="189:46"><decl pos:start="189:9" pos:end="189:45"><type pos:start="189:9" pos:end="189:22"><name pos:start="189:9" pos:end="189:20">OutputStream</name> <modifier pos:start="189:22" pos:end="189:22">*</modifier></type><name pos:start="189:23" pos:end="189:25">ost</name> <init pos:start="189:27" pos:end="189:45">= <expr pos:start="189:29" pos:end="189:45"><name pos:start="189:29" pos:end="189:45"><name pos:start="189:29" pos:end="189:42">output_streams</name><index pos:start="189:43" pos:end="189:45">[<expr pos:start="189:44" pos:end="189:44"><name pos:start="189:44" pos:end="189:44">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="193:9" pos:end="195:21"><if pos:start="193:9" pos:end="195:21">if <condition pos:start="193:12" pos:end="193:73">(<expr pos:start="193:13" pos:end="193:72"><operator pos:start="193:13" pos:end="193:13">!</operator><call pos:start="193:14" pos:end="193:47"><name pos:start="193:14" pos:end="193:37">check_output_constraints</name><argument_list pos:start="193:38" pos:end="193:47">(<argument pos:start="193:39" pos:end="193:41"><expr pos:start="193:39" pos:end="193:41"><name pos:start="193:39" pos:end="193:41">ist</name></expr></argument>, <argument pos:start="193:44" pos:end="193:46"><expr pos:start="193:44" pos:end="193:46"><name pos:start="193:44" pos:end="193:46">ost</name></expr></argument>)</argument_list></call> <operator pos:start="193:49" pos:end="193:50">||</operator> <operator pos:start="193:52" pos:end="193:52">!</operator><name pos:start="193:53" pos:end="193:72"><name pos:start="193:53" pos:end="193:55">ost</name><operator pos:start="193:56" pos:end="193:57">-&gt;</operator><name pos:start="193:58" pos:end="193:72">encoding_needed</name></name></expr>)</condition><block type="pseudo" pos:start="195:13" pos:end="195:21"><block_content pos:start="195:13" pos:end="195:21">

            <continue pos:start="195:13" pos:end="195:21">continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt pos:start="197:9" pos:end="197:82"><expr pos:start="197:9" pos:end="197:81"><call pos:start="197:9" pos:end="197:81"><name pos:start="197:9" pos:end="197:20">do_audio_out</name><argument_list pos:start="197:21" pos:end="197:81">(<argument pos:start="197:22" pos:end="197:55"><expr pos:start="197:22" pos:end="197:55"><name pos:start="197:22" pos:end="197:50"><name pos:start="197:22" pos:end="197:33">output_files</name><index pos:start="197:34" pos:end="197:50">[<expr pos:start="197:35" pos:end="197:49"><name pos:start="197:35" pos:end="197:49"><name pos:start="197:35" pos:end="197:37">ost</name><operator pos:start="197:38" pos:end="197:39">-&gt;</operator><name pos:start="197:40" pos:end="197:49">file_index</name></name></expr>]</index></name><operator pos:start="197:51" pos:end="197:52">-&gt;</operator><name pos:start="197:53" pos:end="197:55">ctx</name></expr></argument>, <argument pos:start="197:58" pos:end="197:60"><expr pos:start="197:58" pos:end="197:60"><name pos:start="197:58" pos:end="197:60">ost</name></expr></argument>, <argument pos:start="197:63" pos:end="197:65"><expr pos:start="197:63" pos:end="197:65"><name pos:start="197:63" pos:end="197:65">ist</name></expr></argument>, <argument pos:start="197:68" pos:end="197:80"><expr pos:start="197:68" pos:end="197:80"><name pos:start="197:68" pos:end="197:80">decoded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <return pos:start="203:5" pos:end="203:15">return <expr pos:start="203:12" pos:end="203:14"><name pos:start="203:12" pos:end="203:14">ret</name></expr>;</return>

</block_content>}</block></function>
</unit>
