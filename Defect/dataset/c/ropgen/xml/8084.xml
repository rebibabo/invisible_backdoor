<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8084.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:26">e100_pci_reset</name><parameter_list pos:start="1:27" pos:end="1:77">(<parameter pos:start="1:28" pos:end="1:44"><decl pos:start="1:28" pos:end="1:44"><type pos:start="1:28" pos:end="1:44"><name pos:start="1:28" pos:end="1:40">EEPRO100State</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type> <name pos:start="1:44" pos:end="1:44">s</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:76"><decl pos:start="1:47" pos:end="1:76"><type pos:start="1:47" pos:end="1:76"><name pos:start="1:47" pos:end="1:63">E100PCIDeviceInfo</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:76">e100_device</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="227:1">{<block_content pos:start="5:5" pos:end="226:0">

    <decl_stmt pos:start="5:5" pos:end="5:32"><decl pos:start="5:5" pos:end="5:31"><type pos:start="5:5" pos:end="5:12"><name pos:start="5:5" pos:end="5:12">uint32_t</name></type> <name pos:start="5:14" pos:end="5:19">device</name> <init pos:start="5:21" pos:end="5:31">= <expr pos:start="5:23" pos:end="5:31"><name pos:start="5:23" pos:end="5:31"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:31">device</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:38"><decl pos:start="7:5" pos:end="7:37"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">uint8_t</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:21">pci_conf</name> <init pos:start="7:23" pos:end="7:37">= <expr pos:start="7:25" pos:end="7:37"><name pos:start="7:25" pos:end="7:37"><name pos:start="7:25" pos:end="7:25">s</name><operator pos:start="7:26" pos:end="7:27">-&gt;</operator><name pos:start="7:28" pos:end="7:30">dev</name><operator pos:start="7:31" pos:end="7:31">.</operator><name pos:start="7:32" pos:end="7:37">config</name></name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:36"><expr pos:start="11:5" pos:end="11:35"><call pos:start="11:5" pos:end="11:35"><name pos:start="11:5" pos:end="11:9">TRACE</name><argument_list pos:start="11:10" pos:end="11:35">(<argument pos:start="11:11" pos:end="11:15"><expr pos:start="11:11" pos:end="11:15"><name pos:start="11:11" pos:end="11:15">OTHER</name></expr></argument>, <argument pos:start="11:18" pos:end="11:34"><expr pos:start="11:18" pos:end="11:34"><call pos:start="11:18" pos:end="11:34"><name pos:start="11:18" pos:end="11:23">logout</name><argument_list pos:start="11:24" pos:end="11:34">(<argument pos:start="11:25" pos:end="11:30"><expr pos:start="11:25" pos:end="11:30"><literal type="string" pos:start="11:25" pos:end="11:30">"%p\n"</literal></expr></argument>, <argument pos:start="11:33" pos:end="11:33"><expr pos:start="11:33" pos:end="11:33"><name pos:start="11:33" pos:end="11:33">s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="15:5" pos:end="15:23">/* PCI Vendor ID */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:60"><expr pos:start="17:5" pos:end="17:59"><call pos:start="17:5" pos:end="17:59"><name pos:start="17:5" pos:end="17:28">pci_config_set_vendor_id</name><argument_list pos:start="17:29" pos:end="17:59">(<argument pos:start="17:30" pos:end="17:37"><expr pos:start="17:30" pos:end="17:37"><name pos:start="17:30" pos:end="17:37">pci_conf</name></expr></argument>, <argument pos:start="17:40" pos:end="17:58"><expr pos:start="17:40" pos:end="17:58"><name pos:start="17:40" pos:end="17:58">PCI_VENDOR_ID_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="19:5" pos:end="19:23">/* PCI Device ID */</comment>

    <expr_stmt pos:start="21:5" pos:end="21:63"><expr pos:start="21:5" pos:end="21:62"><call pos:start="21:5" pos:end="21:62"><name pos:start="21:5" pos:end="21:28">pci_config_set_device_id</name><argument_list pos:start="21:29" pos:end="21:62">(<argument pos:start="21:30" pos:end="21:37"><expr pos:start="21:30" pos:end="21:37"><name pos:start="21:30" pos:end="21:37">pci_conf</name></expr></argument>, <argument pos:start="21:40" pos:end="21:61"><expr pos:start="21:40" pos:end="21:61"><name pos:start="21:40" pos:end="21:61"><name pos:start="21:40" pos:end="21:50">e100_device</name><operator pos:start="21:51" pos:end="21:52">-&gt;</operator><name pos:start="21:53" pos:end="21:61">device_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="23:5" pos:end="23:20">/* PCI Status */</comment>

    <expr_stmt pos:start="25:5" pos:end="27:62"><expr pos:start="25:5" pos:end="27:61"><call pos:start="25:5" pos:end="27:61"><name pos:start="25:5" pos:end="25:16">pci_set_word</name><argument_list pos:start="25:17" pos:end="27:61">(<argument pos:start="25:18" pos:end="25:38"><expr pos:start="25:18" pos:end="25:38"><name pos:start="25:18" pos:end="25:25">pci_conf</name> <operator pos:start="25:27" pos:end="25:27">+</operator> <name pos:start="25:29" pos:end="25:38">PCI_STATUS</name></expr></argument>, <argument pos:start="25:41" pos:end="27:60"><expr pos:start="25:41" pos:end="27:60"><name pos:start="25:41" pos:end="25:64">PCI_STATUS_DEVSEL_MEDIUM</name> <operator pos:start="25:66" pos:end="25:66">|</operator>

                                        <name pos:start="27:41" pos:end="27:60">PCI_STATUS_FAST_BACK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="29:5" pos:end="29:25">/* PCI Revision ID */</comment>

    <expr_stmt pos:start="31:5" pos:end="31:61"><expr pos:start="31:5" pos:end="31:60"><call pos:start="31:5" pos:end="31:60"><name pos:start="31:5" pos:end="31:27">pci_config_set_revision</name><argument_list pos:start="31:28" pos:end="31:60">(<argument pos:start="31:29" pos:end="31:36"><expr pos:start="31:29" pos:end="31:36"><name pos:start="31:29" pos:end="31:36">pci_conf</name></expr></argument>, <argument pos:start="31:39" pos:end="31:59"><expr pos:start="31:39" pos:end="31:59"><name pos:start="31:39" pos:end="31:59"><name pos:start="31:39" pos:end="31:49">e100_device</name><operator pos:start="31:50" pos:end="31:51">-&gt;</operator><name pos:start="31:52" pos:end="31:59">revision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:63"><expr pos:start="33:5" pos:end="33:62"><call pos:start="33:5" pos:end="33:62"><name pos:start="33:5" pos:end="33:24">pci_config_set_class</name><argument_list pos:start="33:25" pos:end="33:62">(<argument pos:start="33:26" pos:end="33:33"><expr pos:start="33:26" pos:end="33:33"><name pos:start="33:26" pos:end="33:33">pci_conf</name></expr></argument>, <argument pos:start="33:36" pos:end="33:61"><expr pos:start="33:36" pos:end="33:61"><name pos:start="33:36" pos:end="33:61">PCI_CLASS_NETWORK_ETHERNET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="35:5" pos:end="35:27">/* PCI Latency Timer */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:53"><expr pos:start="37:5" pos:end="37:52"><call pos:start="37:5" pos:end="37:52"><name pos:start="37:5" pos:end="37:16">pci_set_byte</name><argument_list pos:start="37:17" pos:end="37:52">(<argument pos:start="37:18" pos:end="37:45"><expr pos:start="37:18" pos:end="37:45"><name pos:start="37:18" pos:end="37:25">pci_conf</name> <operator pos:start="37:27" pos:end="37:27">+</operator> <name pos:start="37:29" pos:end="37:45">PCI_LATENCY_TIMER</name></expr></argument>, <argument pos:start="37:48" pos:end="37:51"><expr pos:start="37:48" pos:end="37:51"><literal type="number" pos:start="37:48" pos:end="37:51">0x20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block" pos:start="37:57" pos:end="37:87">/* latency timer = 32 clocks */</comment>

    <comment type="block" pos:start="39:5" pos:end="39:53">/* Capability Pointer is set by PCI framework. */</comment>

    <comment type="block" pos:start="41:5" pos:end="41:24">/* Interrupt Line */</comment>

    <comment type="block" pos:start="43:5" pos:end="43:23">/* Interrupt Pin */</comment>

    <expr_stmt pos:start="45:5" pos:end="45:50"><expr pos:start="45:5" pos:end="45:49"><call pos:start="45:5" pos:end="45:49"><name pos:start="45:5" pos:end="45:16">pci_set_byte</name><argument_list pos:start="45:17" pos:end="45:49">(<argument pos:start="45:18" pos:end="45:45"><expr pos:start="45:18" pos:end="45:45"><name pos:start="45:18" pos:end="45:25">pci_conf</name> <operator pos:start="45:27" pos:end="45:27">+</operator> <name pos:start="45:29" pos:end="45:45">PCI_INTERRUPT_PIN</name></expr></argument>, <argument pos:start="45:48" pos:end="45:48"><expr pos:start="45:48" pos:end="45:48"><literal type="number" pos:start="45:48" pos:end="45:48">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>      <comment type="block" pos:start="45:57" pos:end="45:77">/* interrupt pin A */</comment>

    <comment type="block" pos:start="47:5" pos:end="47:23">/* Minimum Grant */</comment>

    <expr_stmt pos:start="49:5" pos:end="49:47"><expr pos:start="49:5" pos:end="49:46"><call pos:start="49:5" pos:end="49:46"><name pos:start="49:5" pos:end="49:16">pci_set_byte</name><argument_list pos:start="49:17" pos:end="49:46">(<argument pos:start="49:18" pos:end="49:39"><expr pos:start="49:18" pos:end="49:39"><name pos:start="49:18" pos:end="49:25">pci_conf</name> <operator pos:start="49:27" pos:end="49:27">+</operator> <name pos:start="49:29" pos:end="49:39">PCI_MIN_GNT</name></expr></argument>, <argument pos:start="49:42" pos:end="49:45"><expr pos:start="49:42" pos:end="49:45"><literal type="number" pos:start="49:42" pos:end="49:45">0x08</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="51:5" pos:end="51:25">/* Maximum Latency */</comment>

    <expr_stmt pos:start="53:5" pos:end="53:47"><expr pos:start="53:5" pos:end="53:46"><call pos:start="53:5" pos:end="53:46"><name pos:start="53:5" pos:end="53:16">pci_set_byte</name><argument_list pos:start="53:17" pos:end="53:46">(<argument pos:start="53:18" pos:end="53:39"><expr pos:start="53:18" pos:end="53:39"><name pos:start="53:18" pos:end="53:25">pci_conf</name> <operator pos:start="53:27" pos:end="53:27">+</operator> <name pos:start="53:29" pos:end="53:39">PCI_MAX_LAT</name></expr></argument>, <argument pos:start="53:42" pos:end="53:45"><expr pos:start="53:42" pos:end="53:45"><literal type="number" pos:start="53:42" pos:end="53:45">0x18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:44"><expr pos:start="57:5" pos:end="57:43"><name pos:start="57:5" pos:end="57:17"><name pos:start="57:5" pos:end="57:5">s</name><operator pos:start="57:6" pos:end="57:7">-&gt;</operator><name pos:start="57:8" pos:end="57:17">stats_size</name></name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:43"><name pos:start="57:21" pos:end="57:31">e100_device</name><operator pos:start="57:32" pos:end="57:33">-&gt;</operator><name pos:start="57:34" pos:end="57:43">stats_size</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:72"><expr pos:start="59:5" pos:end="59:71"><name pos:start="59:5" pos:end="59:31"><name pos:start="59:5" pos:end="59:5">s</name><operator pos:start="59:6" pos:end="59:7">-&gt;</operator><name pos:start="59:8" pos:end="59:31">has_extended_tcb_support</name></name> <operator pos:start="59:33" pos:end="59:33">=</operator> <name pos:start="59:35" pos:end="59:71"><name pos:start="59:35" pos:end="59:45">e100_device</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:71">has_extended_tcb_support</name></name></expr>;</expr_stmt>



    <switch pos:start="63:5" pos:end="107:5">switch <condition pos:start="63:12" pos:end="63:19">(<expr pos:start="63:13" pos:end="63:18"><name pos:start="63:13" pos:end="63:18">device</name></expr>)</condition> <block pos:start="63:21" pos:end="107:5">{<block_content pos:start="65:5" pos:end="105:52">

    <case pos:start="65:5" pos:end="65:16">case <expr pos:start="65:10" pos:end="65:15"><name pos:start="65:10" pos:end="65:15">i82550</name></expr>:</case>

    <case pos:start="67:5" pos:end="67:16">case <expr pos:start="67:10" pos:end="67:15"><name pos:start="67:10" pos:end="67:15">i82551</name></expr>:</case>

    <case pos:start="69:5" pos:end="69:17">case <expr pos:start="69:10" pos:end="69:16"><name pos:start="69:10" pos:end="69:16">i82557A</name></expr>:</case>

    <case pos:start="71:5" pos:end="71:17">case <expr pos:start="71:10" pos:end="71:16"><name pos:start="71:10" pos:end="71:16">i82557B</name></expr>:</case>

    <case pos:start="73:5" pos:end="73:17">case <expr pos:start="73:10" pos:end="73:16"><name pos:start="73:10" pos:end="73:16">i82557C</name></expr>:</case>

    <case pos:start="75:5" pos:end="75:17">case <expr pos:start="75:10" pos:end="75:16"><name pos:start="75:10" pos:end="75:16">i82558A</name></expr>:</case>

    <case pos:start="77:5" pos:end="77:17">case <expr pos:start="77:10" pos:end="77:16"><name pos:start="77:10" pos:end="77:16">i82558B</name></expr>:</case>

    <case pos:start="79:5" pos:end="79:17">case <expr pos:start="79:10" pos:end="79:16"><name pos:start="79:10" pos:end="79:16">i82559A</name></expr>:</case>

    <case pos:start="81:5" pos:end="81:17">case <expr pos:start="81:10" pos:end="81:16"><name pos:start="81:10" pos:end="81:16">i82559B</name></expr>:</case>

    <case pos:start="83:5" pos:end="83:18">case <expr pos:start="83:10" pos:end="83:17"><name pos:start="83:10" pos:end="83:17">i82559ER</name></expr>:</case>

    <case pos:start="85:5" pos:end="85:16">case <expr pos:start="85:10" pos:end="85:15"><name pos:start="85:10" pos:end="85:15">i82562</name></expr>:</case>

    <case pos:start="87:5" pos:end="87:16">case <expr pos:start="87:10" pos:end="87:15"><name pos:start="87:10" pos:end="87:15">i82801</name></expr>:</case>

        <break pos:start="89:9" pos:end="89:14">break;</break>

    <case pos:start="91:5" pos:end="94:0">case <expr pos:start="91:10" pos:end="91:16"><name pos:start="91:10" pos:end="91:16">i82559C</name></expr>:</case>

<cpp:if pos:start="93:1" pos:end="93:19">#<cpp:directive pos:start="93:2" pos:end="93:3">if</cpp:directive> <expr pos:start="93:5" pos:end="93:19"><name pos:start="93:5" pos:end="93:15">EEPROM_SIZE</name> <operator pos:start="93:17" pos:end="93:17">&gt;</operator> <literal type="number" pos:start="93:19" pos:end="93:19">0</literal></expr></cpp:if>

        <expr_stmt pos:start="95:9" pos:end="95:78"><expr pos:start="95:9" pos:end="95:77"><call pos:start="95:9" pos:end="95:77"><name pos:start="95:9" pos:end="95:20">pci_set_word</name><argument_list pos:start="95:21" pos:end="95:77">(<argument pos:start="95:22" pos:end="95:55"><expr pos:start="95:22" pos:end="95:55"><name pos:start="95:22" pos:end="95:29">pci_conf</name> <operator pos:start="95:31" pos:end="95:31">+</operator> <name pos:start="95:33" pos:end="95:55">PCI_SUBSYSTEM_VENDOR_ID</name></expr></argument>, <argument pos:start="95:58" pos:end="95:76"><expr pos:start="95:58" pos:end="95:76"><name pos:start="95:58" pos:end="95:76">PCI_VENDOR_ID_INTEL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="100:0"><expr pos:start="97:9" pos:end="97:57"><call pos:start="97:9" pos:end="97:57"><name pos:start="97:9" pos:end="97:20">pci_set_word</name><argument_list pos:start="97:21" pos:end="97:57">(<argument pos:start="97:22" pos:end="97:48"><expr pos:start="97:22" pos:end="97:48"><name pos:start="97:22" pos:end="97:29">pci_conf</name> <operator pos:start="97:31" pos:end="97:31">+</operator> <name pos:start="97:33" pos:end="97:48">PCI_SUBSYSTEM_ID</name></expr></argument>, <argument pos:start="97:51" pos:end="97:56"><expr pos:start="97:51" pos:end="97:56"><literal type="number" pos:start="97:51" pos:end="97:56">0x0040</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>

        <break pos:start="101:9" pos:end="101:14">break;</break>

    <default pos:start="103:5" pos:end="103:12">default:</default>

        <expr_stmt pos:start="105:9" pos:end="105:52"><expr pos:start="105:9" pos:end="105:51"><call pos:start="105:9" pos:end="105:51"><name pos:start="105:9" pos:end="105:14">logout</name><argument_list pos:start="105:15" pos:end="105:51">(<argument pos:start="105:16" pos:end="105:42"><expr pos:start="105:16" pos:end="105:42"><literal type="string" pos:start="105:16" pos:end="105:42">"Device %X is undefined!\n"</literal></expr></argument>, <argument pos:start="105:45" pos:end="105:50"><expr pos:start="105:45" pos:end="105:50"><name pos:start="105:45" pos:end="105:50">device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



    <comment type="block" pos:start="111:5" pos:end="111:24">/* Standard TxCB. */</comment>

    <expr_stmt pos:start="113:5" pos:end="113:34"><expr pos:start="113:5" pos:end="113:33"><name pos:start="113:5" pos:end="113:23"><name pos:start="113:5" pos:end="113:5">s</name><operator pos:start="113:6" pos:end="113:7">-&gt;</operator><name pos:start="113:8" pos:end="113:20">configuration</name><index pos:start="113:21" pos:end="113:23">[<expr pos:start="113:22" pos:end="113:22"><literal type="number" pos:start="113:22" pos:end="113:22">6</literal></expr>]</index></name> <operator pos:start="113:25" pos:end="113:26">|=</operator> <call pos:start="113:28" pos:end="113:33"><name pos:start="113:28" pos:end="113:30">BIT</name><argument_list pos:start="113:31" pos:end="113:33">(<argument pos:start="113:32" pos:end="113:32"><expr pos:start="113:32" pos:end="113:32"><literal type="number" pos:start="113:32" pos:end="113:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="117:5" pos:end="117:40">/* Standard statistical counters. */</comment>

    <expr_stmt pos:start="119:5" pos:end="119:34"><expr pos:start="119:5" pos:end="119:33"><name pos:start="119:5" pos:end="119:23"><name pos:start="119:5" pos:end="119:5">s</name><operator pos:start="119:6" pos:end="119:7">-&gt;</operator><name pos:start="119:8" pos:end="119:20">configuration</name><index pos:start="119:21" pos:end="119:23">[<expr pos:start="119:22" pos:end="119:22"><literal type="number" pos:start="119:22" pos:end="119:22">6</literal></expr>]</index></name> <operator pos:start="119:25" pos:end="119:26">|=</operator> <call pos:start="119:28" pos:end="119:33"><name pos:start="119:28" pos:end="119:30">BIT</name><argument_list pos:start="119:31" pos:end="119:33">(<argument pos:start="119:32" pos:end="119:32"><expr pos:start="119:32" pos:end="119:32"><literal type="number" pos:start="119:32" pos:end="119:32">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="123:5" pos:end="161:5"><if pos:start="123:5" pos:end="151:5">if <condition pos:start="123:8" pos:end="123:28">(<expr pos:start="123:9" pos:end="123:27"><name pos:start="123:9" pos:end="123:21"><name pos:start="123:9" pos:end="123:9">s</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:21">stats_size</name></name> <operator pos:start="123:23" pos:end="123:24">==</operator> <literal type="number" pos:start="123:26" pos:end="123:27">80</literal></expr>)</condition> <block pos:start="123:30" pos:end="151:5">{<block_content pos:start="127:9" pos:end="149:9">

        <comment type="block" pos:start="125:9" pos:end="125:80">/* TODO: check TCO Statistical Counters bit. Documentation not clear. */</comment>

        <if_stmt pos:start="127:9" pos:end="149:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:41">(<expr pos:start="127:13" pos:end="127:40"><name pos:start="127:13" pos:end="127:31"><name pos:start="127:13" pos:end="127:13">s</name><operator pos:start="127:14" pos:end="127:15">-&gt;</operator><name pos:start="127:16" pos:end="127:28">configuration</name><index pos:start="127:29" pos:end="127:31">[<expr pos:start="127:30" pos:end="127:30"><literal type="number" pos:start="127:30" pos:end="127:30">6</literal></expr>]</index></name> <operator pos:start="127:33" pos:end="127:33">&amp;</operator> <call pos:start="127:35" pos:end="127:40"><name pos:start="127:35" pos:end="127:37">BIT</name><argument_list pos:start="127:38" pos:end="127:40">(<argument pos:start="127:39" pos:end="127:39"><expr pos:start="127:39" pos:end="127:39"><literal type="number" pos:start="127:39" pos:end="127:39">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="127:43" pos:end="133:9">{<block_content pos:start="131:13" pos:end="131:49">

            <comment type="block" pos:start="129:13" pos:end="129:43">/* TCO statistical counters. */</comment>

            <expr_stmt pos:start="131:13" pos:end="131:49"><expr pos:start="131:13" pos:end="131:48"><call pos:start="131:13" pos:end="131:48"><name pos:start="131:13" pos:end="131:18">assert</name><argument_list pos:start="131:19" pos:end="131:48">(<argument pos:start="131:20" pos:end="131:47"><expr pos:start="131:20" pos:end="131:47"><name pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:20">s</name><operator pos:start="131:21" pos:end="131:22">-&gt;</operator><name pos:start="131:23" pos:end="131:35">configuration</name><index pos:start="131:36" pos:end="131:38">[<expr pos:start="131:37" pos:end="131:37"><literal type="number" pos:start="131:37" pos:end="131:37">6</literal></expr>]</index></name> <operator pos:start="131:40" pos:end="131:40">&amp;</operator> <call pos:start="131:42" pos:end="131:47"><name pos:start="131:42" pos:end="131:44">BIT</name><argument_list pos:start="131:45" pos:end="131:47">(<argument pos:start="131:46" pos:end="131:46"><expr pos:start="131:46" pos:end="131:46"><literal type="number" pos:start="131:46" pos:end="131:46">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="133:11" pos:end="149:9">else <block pos:start="133:16" pos:end="149:9">{<block_content pos:start="135:13" pos:end="147:13">

            <if_stmt pos:start="135:13" pos:end="147:13"><if pos:start="135:13" pos:end="141:13">if <condition pos:start="135:16" pos:end="135:45">(<expr pos:start="135:17" pos:end="135:44"><name pos:start="135:17" pos:end="135:35"><name pos:start="135:17" pos:end="135:17">s</name><operator pos:start="135:18" pos:end="135:19">-&gt;</operator><name pos:start="135:20" pos:end="135:32">configuration</name><index pos:start="135:33" pos:end="135:35">[<expr pos:start="135:34" pos:end="135:34"><literal type="number" pos:start="135:34" pos:end="135:34">6</literal></expr>]</index></name> <operator pos:start="135:37" pos:end="135:37">&amp;</operator> <call pos:start="135:39" pos:end="135:44"><name pos:start="135:39" pos:end="135:41">BIT</name><argument_list pos:start="135:42" pos:end="135:44">(<argument pos:start="135:43" pos:end="135:43"><expr pos:start="135:43" pos:end="135:43"><literal type="number" pos:start="135:43" pos:end="135:43">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="135:47" pos:end="141:13">{<block_content pos:start="139:17" pos:end="139:35">

                <comment type="block" pos:start="137:17" pos:end="137:74">/* No extended statistical counters, i82557 compatible. */</comment>

                <expr_stmt pos:start="139:17" pos:end="139:35"><expr pos:start="139:17" pos:end="139:34"><name pos:start="139:17" pos:end="139:29"><name pos:start="139:17" pos:end="139:17">s</name><operator pos:start="139:18" pos:end="139:19">-&gt;</operator><name pos:start="139:20" pos:end="139:29">stats_size</name></name> <operator pos:start="139:31" pos:end="139:31">=</operator> <literal type="number" pos:start="139:33" pos:end="139:34">64</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="141:15" pos:end="147:13">else <block pos:start="141:20" pos:end="147:13">{<block_content pos:start="145:17" pos:end="145:35">

                <comment type="block" pos:start="143:17" pos:end="143:40">/* i82558 compatible. */</comment>

                <expr_stmt pos:start="145:17" pos:end="145:35"><expr pos:start="145:17" pos:end="145:34"><name pos:start="145:17" pos:end="145:29"><name pos:start="145:17" pos:end="145:17">s</name><operator pos:start="145:18" pos:end="145:19">-&gt;</operator><name pos:start="145:20" pos:end="145:29">stats_size</name></name> <operator pos:start="145:31" pos:end="145:31">=</operator> <literal type="number" pos:start="145:33" pos:end="145:34">76</literal></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="151:7" pos:end="161:5">else <block pos:start="151:12" pos:end="161:5">{<block_content pos:start="153:9" pos:end="159:9">

        <if_stmt pos:start="153:9" pos:end="159:9"><if pos:start="153:9" pos:end="159:9">if <condition pos:start="153:12" pos:end="153:41">(<expr pos:start="153:13" pos:end="153:40"><name pos:start="153:13" pos:end="153:31"><name pos:start="153:13" pos:end="153:13">s</name><operator pos:start="153:14" pos:end="153:15">-&gt;</operator><name pos:start="153:16" pos:end="153:28">configuration</name><index pos:start="153:29" pos:end="153:31">[<expr pos:start="153:30" pos:end="153:30"><literal type="number" pos:start="153:30" pos:end="153:30">6</literal></expr>]</index></name> <operator pos:start="153:33" pos:end="153:33">&amp;</operator> <call pos:start="153:35" pos:end="153:40"><name pos:start="153:35" pos:end="153:37">BIT</name><argument_list pos:start="153:38" pos:end="153:40">(<argument pos:start="153:39" pos:end="153:39"><expr pos:start="153:39" pos:end="153:39"><literal type="number" pos:start="153:39" pos:end="153:39">5</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="153:43" pos:end="159:9">{<block_content pos:start="157:13" pos:end="157:31">

            <comment type="block" pos:start="155:13" pos:end="155:51">/* No extended statistical counters. */</comment>

            <expr_stmt pos:start="157:13" pos:end="157:31"><expr pos:start="157:13" pos:end="157:30"><name pos:start="157:13" pos:end="157:25"><name pos:start="157:13" pos:end="157:13">s</name><operator pos:start="157:14" pos:end="157:15">-&gt;</operator><name pos:start="157:16" pos:end="157:25">stats_size</name></name> <operator pos:start="157:27" pos:end="157:27">=</operator> <literal type="number" pos:start="157:29" pos:end="157:30">64</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:72"><expr pos:start="163:5" pos:end="163:71"><call pos:start="163:5" pos:end="163:71"><name pos:start="163:5" pos:end="163:10">assert</name><argument_list pos:start="163:11" pos:end="163:71">(<argument pos:start="163:12" pos:end="163:70"><expr pos:start="163:12" pos:end="163:70"><name pos:start="163:12" pos:end="163:24"><name pos:start="163:12" pos:end="163:12">s</name><operator pos:start="163:13" pos:end="163:14">-&gt;</operator><name pos:start="163:15" pos:end="163:24">stats_size</name></name> <operator pos:start="163:26" pos:end="163:26">&gt;</operator> <literal type="number" pos:start="163:28" pos:end="163:28">0</literal> <operator pos:start="163:30" pos:end="163:31">&amp;&amp;</operator> <name pos:start="163:33" pos:end="163:45"><name pos:start="163:33" pos:end="163:33">s</name><operator pos:start="163:34" pos:end="163:35">-&gt;</operator><name pos:start="163:36" pos:end="163:45">stats_size</name></name> <operator pos:start="163:47" pos:end="163:48">&lt;=</operator> <sizeof pos:start="163:50" pos:end="163:70">sizeof<argument_list pos:start="163:56" pos:end="163:70">(<argument pos:start="163:57" pos:end="163:69"><expr pos:start="163:57" pos:end="163:69"><name pos:start="163:57" pos:end="163:69"><name pos:start="163:57" pos:end="163:57">s</name><operator pos:start="163:58" pos:end="163:59">-&gt;</operator><name pos:start="163:60" pos:end="163:69">statistics</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="167:5" pos:end="198:0"><if pos:start="167:5" pos:end="198:0">if <condition pos:start="167:8" pos:end="167:38">(<expr pos:start="167:9" pos:end="167:37"><name pos:start="167:9" pos:end="167:37"><name pos:start="167:9" pos:end="167:19">e100_device</name><operator pos:start="167:20" pos:end="167:21">-&gt;</operator><name pos:start="167:22" pos:end="167:37">power_management</name></name></expr>)</condition> <block pos:start="167:40" pos:end="198:0">{<block_content pos:start="171:9" pos:end="192:0">

        <comment type="block" pos:start="169:9" pos:end="169:43">/* Power Management Capabilities */</comment>

        <decl_stmt pos:start="171:9" pos:end="171:30"><decl pos:start="171:9" pos:end="171:29"><type pos:start="171:9" pos:end="171:11"><name pos:start="171:9" pos:end="171:11">int</name></type> <name pos:start="171:13" pos:end="171:22">cfg_offset</name> <init pos:start="171:24" pos:end="171:29">= <expr pos:start="171:26" pos:end="171:29"><literal type="number" pos:start="171:26" pos:end="171:29">0xdc</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="173:9" pos:end="175:62"><decl pos:start="173:9" pos:end="175:61"><type pos:start="173:9" pos:end="173:11"><name pos:start="173:9" pos:end="173:11">int</name></type> <name pos:start="173:13" pos:end="173:13">r</name> <init pos:start="173:15" pos:end="175:61">= <expr pos:start="173:17" pos:end="175:61"><call pos:start="173:17" pos:end="175:61"><name pos:start="173:17" pos:end="173:34">pci_add_capability</name><argument_list pos:start="173:35" pos:end="175:61">(<argument pos:start="173:36" pos:end="173:42"><expr pos:start="173:36" pos:end="173:42"><operator pos:start="173:36" pos:end="173:36">&amp;</operator><name pos:start="173:37" pos:end="173:42"><name pos:start="173:37" pos:end="173:37">s</name><operator pos:start="173:38" pos:end="173:39">-&gt;</operator><name pos:start="173:40" pos:end="173:42">dev</name></name></expr></argument>, <argument pos:start="173:45" pos:end="173:57"><expr pos:start="173:45" pos:end="173:57"><name pos:start="173:45" pos:end="173:57">PCI_CAP_ID_PM</name></expr></argument>,

                                   <argument pos:start="175:36" pos:end="175:45"><expr pos:start="175:36" pos:end="175:45"><name pos:start="175:36" pos:end="175:45">cfg_offset</name></expr></argument>, <argument pos:start="175:48" pos:end="175:60"><expr pos:start="175:48" pos:end="175:60"><name pos:start="175:48" pos:end="175:60">PCI_PM_SIZEOF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:23"><expr pos:start="177:9" pos:end="177:22"><call pos:start="177:9" pos:end="177:22"><name pos:start="177:9" pos:end="177:14">assert</name><argument_list pos:start="177:15" pos:end="177:22">(<argument pos:start="177:16" pos:end="177:21"><expr pos:start="177:16" pos:end="177:21"><name pos:start="177:16" pos:end="177:16">r</name> <operator pos:start="177:18" pos:end="177:19">&gt;=</operator> <literal type="number" pos:start="177:21" pos:end="177:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="192:0"><expr pos:start="179:9" pos:end="179:64"><call pos:start="179:9" pos:end="179:64"><name pos:start="179:9" pos:end="179:20">pci_set_word</name><argument_list pos:start="179:21" pos:end="179:64">(<argument pos:start="179:22" pos:end="179:55"><expr pos:start="179:22" pos:end="179:55"><name pos:start="179:22" pos:end="179:29">pci_conf</name> <operator pos:start="179:31" pos:end="179:31">+</operator> <name pos:start="179:33" pos:end="179:42">cfg_offset</name> <operator pos:start="179:44" pos:end="179:44">+</operator> <name pos:start="179:46" pos:end="179:55">PCI_PM_PMC</name></expr></argument>, <argument pos:start="179:58" pos:end="179:63"><expr pos:start="179:58" pos:end="179:63"><literal type="number" pos:start="179:58" pos:end="179:63">0x7e21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="181:1" pos:end="181:5">#<cpp:directive pos:start="181:2" pos:end="181:3">if</cpp:directive> <expr pos:start="181:5" pos:end="181:5"><literal type="number" pos:start="181:5" pos:end="181:5">0</literal></expr></cpp:if> <comment type="block" pos:start="181:7" pos:end="181:68">/* TODO: replace dummy code for power management emulation. */</comment>

        <comment type="block" pos:start="183:9" pos:end="183:54">/* TODO: Power Management Control / Status. */</comment>

        pci_set_word(pci_conf + cfg_offset + PCI_PM_CTRL, 0x0000);

        <comment type="block" pos:start="187:9" pos:end="187:76">/* TODO: Ethernet Power Consumption Registers (i82559 and later). */</comment>

        pci_set_byte(pci_conf + cfg_offset + PCI_PM_PPB_EXTENSIONS, 0x0000);

<cpp:endif pos:start="191:1" pos:end="191:6">#<cpp:directive pos:start="191:2" pos:end="191:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>



<cpp:if pos:start="197:1" pos:end="197:19">#<cpp:directive pos:start="197:2" pos:end="197:3">if</cpp:directive> <expr pos:start="197:5" pos:end="197:19"><name pos:start="197:5" pos:end="197:15">EEPROM_SIZE</name> <operator pos:start="197:17" pos:end="197:17">&gt;</operator> <literal type="number" pos:start="197:19" pos:end="197:19">0</literal></expr></cpp:if>

    <if_stmt pos:start="199:5" pos:end="226:0"><if pos:start="199:5" pos:end="226:0">if <condition pos:start="199:8" pos:end="199:68">(<expr pos:start="199:9" pos:end="199:67"><name pos:start="199:9" pos:end="199:14">device</name> <operator pos:start="199:16" pos:end="199:17">==</operator> <name pos:start="199:19" pos:end="199:25">i82557C</name> <operator pos:start="199:27" pos:end="199:28">||</operator> <name pos:start="199:30" pos:end="199:35">device</name> <operator pos:start="199:37" pos:end="199:38">==</operator> <name pos:start="199:40" pos:end="199:46">i82558B</name> <operator pos:start="199:48" pos:end="199:49">||</operator> <name pos:start="199:51" pos:end="199:56">device</name> <operator pos:start="199:58" pos:end="199:59">==</operator> <name pos:start="199:61" pos:end="199:67">i82559C</name></expr>)</condition> <block pos:start="199:70" pos:end="226:0">{<block_content pos:start="221:9" pos:end="221:62">

        <comment type="block" pos:start="201:9" pos:end="219:10">/*

        TODO: get vendor id from EEPROM for i82557C or later.

        TODO: get device id from EEPROM for i82557C or later.

        TODO: status bit 4 can be disabled by EEPROM for i82558, i82559.

        TODO: header type is determined by EEPROM for i82559.

        TODO: get subsystem id from EEPROM for i82557C or later.

        TODO: get subsystem vendor id from EEPROM for i82557C or later.

        TODO: exp. rom baddr depends on a bit in EEPROM for i82558 or later.

        TODO: capability pointer depends on EEPROM for i82558.

        */</comment>

        <expr_stmt pos:start="221:9" pos:end="221:62"><expr pos:start="221:9" pos:end="221:61"><call pos:start="221:9" pos:end="221:61"><name pos:start="221:9" pos:end="221:14">logout</name><argument_list pos:start="221:15" pos:end="221:61">(<argument pos:start="221:16" pos:end="221:60"><expr pos:start="221:16" pos:end="221:60"><literal type="string" pos:start="221:16" pos:end="221:60">"Get device id and revision from EEPROM!!!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="225:1" pos:end="225:6">#<cpp:directive pos:start="225:2" pos:end="225:6">endif</cpp:directive></cpp:endif> <comment type="block" pos:start="225:8" pos:end="225:28">/* EEPROM_SIZE &gt; 0 */</comment>

</block_content>}</block></function>
</unit>
