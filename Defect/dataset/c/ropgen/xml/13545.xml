<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13545.c" pos:tabs="8"><function pos:start="1:1" pos:end="541:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:49">gen_intermediate_code_internal</name><parameter_list pos:start="1:50" pos:end="5:64">(<parameter pos:start="1:51" pos:end="1:63"><decl pos:start="1:51" pos:end="1:63"><type pos:start="1:51" pos:end="1:63"><name pos:start="1:51" pos:end="1:58">CPUState</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:63">env</name></decl></parameter>,

                                                  <parameter pos:start="3:51" pos:end="3:70"><decl pos:start="3:51" pos:end="3:70"><type pos:start="3:51" pos:end="3:70"><name pos:start="3:51" pos:end="3:66">TranslationBlock</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:70">tb</name></decl></parameter>,

                                                  <parameter pos:start="5:51" pos:end="5:63"><decl pos:start="5:51" pos:end="5:63"><type pos:start="5:51" pos:end="5:63"><name pos:start="5:51" pos:end="5:53">int</name></type> <name pos:start="5:55" pos:end="5:63">search_pc</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="541:1">{<block_content pos:start="9:5" pos:end="539:5">

    <decl_stmt pos:start="9:5" pos:end="9:33"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:16">DisasContext</name></type> <name pos:start="9:18" pos:end="9:20">dc1</name></decl>, <decl pos:start="9:23" pos:end="9:32"><type ref="prev" pos:start="9:5" pos:end="9:16"><modifier pos:start="9:23" pos:end="9:23">*</modifier></type><name pos:start="9:24" pos:end="9:25">dc</name> <init pos:start="9:27" pos:end="9:32">= <expr pos:start="9:29" pos:end="9:32"><operator pos:start="9:29" pos:end="9:29">&amp;</operator><name pos:start="9:30" pos:end="9:32">dc1</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:19"><name pos:start="11:5" pos:end="11:17">CPUBreakpoint</name> <modifier pos:start="11:19" pos:end="11:19">*</modifier></type><name pos:start="11:20" pos:end="11:21">bp</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:26"><decl pos:start="13:5" pos:end="13:25"><type pos:start="13:5" pos:end="13:14"><name pos:start="13:5" pos:end="13:12">uint16_t</name> <modifier pos:start="13:14" pos:end="13:14">*</modifier></type><name pos:start="13:15" pos:end="13:25">gen_opc_end</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:14"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">j</name></decl>, <decl pos:start="15:12" pos:end="15:13"><type ref="prev" pos:start="15:5" pos:end="15:7"/><name pos:start="15:12" pos:end="15:13">lj</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">target_ulong</name></type> <name pos:start="17:18" pos:end="17:25">pc_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:29"><decl pos:start="19:5" pos:end="19:28"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:28">next_page_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:18"><decl pos:start="21:5" pos:end="21:17"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:17">num_insns</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:18"><decl pos:start="23:5" pos:end="23:17"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:17">max_insns</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:36">/* generate intermediate code */</comment>

    <expr_stmt pos:start="29:5" pos:end="29:18"><expr pos:start="29:5" pos:end="29:17"><name pos:start="29:5" pos:end="29:13">num_temps</name> <operator pos:start="29:15" pos:end="29:15">=</operator> <literal type="number" pos:start="29:17" pos:end="29:17">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:22"><expr pos:start="33:5" pos:end="33:21"><name pos:start="33:5" pos:end="33:12">pc_start</name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:21"><name pos:start="33:16" pos:end="33:17">tb</name><operator pos:start="33:18" pos:end="33:19">-&gt;</operator><name pos:start="33:20" pos:end="33:21">pc</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:16"><expr pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:10"><name pos:start="37:5" pos:end="37:6">dc</name><operator pos:start="37:7" pos:end="37:8">-&gt;</operator><name pos:start="37:9" pos:end="37:10">tb</name></name> <operator pos:start="37:12" pos:end="37:12">=</operator> <name pos:start="37:14" pos:end="37:15">tb</name></expr>;</expr_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:45"><expr pos:start="41:5" pos:end="41:44"><name pos:start="41:5" pos:end="41:15">gen_opc_end</name> <operator pos:start="41:17" pos:end="41:17">=</operator> <name pos:start="41:19" pos:end="41:29">gen_opc_buf</name> <operator pos:start="41:31" pos:end="41:31">+</operator> <name pos:start="41:33" pos:end="41:44">OPC_MAX_SIZE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="45:5" pos:end="45:28"><expr pos:start="45:5" pos:end="45:27"><name pos:start="45:5" pos:end="45:14"><name pos:start="45:5" pos:end="45:6">dc</name><operator pos:start="45:7" pos:end="45:8">-&gt;</operator><name pos:start="45:9" pos:end="45:14">is_jmp</name></name> <operator pos:start="45:16" pos:end="45:16">=</operator> <name pos:start="45:18" pos:end="45:27">DISAS_NEXT</name></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:22"><expr pos:start="47:5" pos:end="47:21"><name pos:start="47:5" pos:end="47:10"><name pos:start="47:5" pos:end="47:6">dc</name><operator pos:start="47:7" pos:end="47:8">-&gt;</operator><name pos:start="47:9" pos:end="47:10">pc</name></name> <operator pos:start="47:12" pos:end="47:12">=</operator> <name pos:start="47:14" pos:end="47:21">pc_start</name></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:53"><expr pos:start="49:5" pos:end="49:52"><name pos:start="49:5" pos:end="49:26"><name pos:start="49:5" pos:end="49:6">dc</name><operator pos:start="49:7" pos:end="49:8">-&gt;</operator><name pos:start="49:9" pos:end="49:26">singlestep_enabled</name></name> <operator pos:start="49:28" pos:end="49:28">=</operator> <name pos:start="49:30" pos:end="49:52"><name pos:start="49:30" pos:end="49:32">env</name><operator pos:start="49:33" pos:end="49:34">-&gt;</operator><name pos:start="49:35" pos:end="49:52">singlestep_enabled</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:20"><expr pos:start="51:5" pos:end="51:19"><name pos:start="51:5" pos:end="51:15"><name pos:start="51:5" pos:end="51:6">dc</name><operator pos:start="51:7" pos:end="51:8">-&gt;</operator><name pos:start="51:9" pos:end="51:15">condjmp</name></name> <operator pos:start="51:17" pos:end="51:17">=</operator> <literal type="number" pos:start="51:19" pos:end="51:19">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:44"><expr pos:start="53:5" pos:end="53:43"><name pos:start="53:5" pos:end="53:13"><name pos:start="53:5" pos:end="53:6">dc</name><operator pos:start="53:7" pos:end="53:8">-&gt;</operator><name pos:start="53:9" pos:end="53:13">thumb</name></name> <operator pos:start="53:15" pos:end="53:15">=</operator> <call pos:start="53:17" pos:end="53:43"><name pos:start="53:17" pos:end="53:32">ARM_TBFLAG_THUMB</name><argument_list pos:start="53:33" pos:end="53:43">(<argument pos:start="53:34" pos:end="53:42"><expr pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:42"><name pos:start="53:34" pos:end="53:35">tb</name><operator pos:start="53:36" pos:end="53:37">-&gt;</operator><name pos:start="53:38" pos:end="53:42">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:68"><expr pos:start="55:5" pos:end="55:67"><name pos:start="55:5" pos:end="55:21"><name pos:start="55:5" pos:end="55:6">dc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:21">condexec_mask</name></name> <operator pos:start="55:23" pos:end="55:23">=</operator> <operator pos:start="55:25" pos:end="55:25">(</operator><call pos:start="55:26" pos:end="55:55"><name pos:start="55:26" pos:end="55:44">ARM_TBFLAG_CONDEXEC</name><argument_list pos:start="55:45" pos:end="55:55">(<argument pos:start="55:46" pos:end="55:54"><expr pos:start="55:46" pos:end="55:54"><name pos:start="55:46" pos:end="55:54"><name pos:start="55:46" pos:end="55:47">tb</name><operator pos:start="55:48" pos:end="55:49">-&gt;</operator><name pos:start="55:50" pos:end="55:54">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="55:57" pos:end="55:57">&amp;</operator> <literal type="number" pos:start="55:59" pos:end="55:61">0xf</literal><operator pos:start="55:62" pos:end="55:62">)</operator> <operator pos:start="55:64" pos:end="55:65">&lt;&lt;</operator> <literal type="number" pos:start="55:67" pos:end="55:67">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="60:0"><expr pos:start="57:5" pos:end="57:59"><name pos:start="57:5" pos:end="57:21"><name pos:start="57:5" pos:end="57:6">dc</name><operator pos:start="57:7" pos:end="57:8">-&gt;</operator><name pos:start="57:9" pos:end="57:21">condexec_cond</name></name> <operator pos:start="57:23" pos:end="57:23">=</operator> <call pos:start="57:25" pos:end="57:54"><name pos:start="57:25" pos:end="57:43">ARM_TBFLAG_CONDEXEC</name><argument_list pos:start="57:44" pos:end="57:54">(<argument pos:start="57:45" pos:end="57:53"><expr pos:start="57:45" pos:end="57:53"><name pos:start="57:45" pos:end="57:53"><name pos:start="57:45" pos:end="57:46">tb</name><operator pos:start="57:47" pos:end="57:48">-&gt;</operator><name pos:start="57:49" pos:end="57:53">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="57:56" pos:end="57:57">&gt;&gt;</operator> <literal type="number" pos:start="57:59" pos:end="57:59">4</literal></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:30">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:30"><operator pos:start="59:5" pos:end="59:5">!</operator><call pos:start="59:6" pos:end="59:30"><name pos:start="59:6" pos:end="59:12">defined</name><argument_list pos:start="59:13" pos:end="59:30">(<argument pos:start="59:14" pos:end="59:29"><expr pos:start="59:14" pos:end="59:29"><name pos:start="59:14" pos:end="59:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="61:5" pos:end="64:0"><expr pos:start="61:5" pos:end="61:48"><name pos:start="61:5" pos:end="61:12"><name pos:start="61:5" pos:end="61:6">dc</name><operator pos:start="61:7" pos:end="61:8">-&gt;</operator><name pos:start="61:9" pos:end="61:12">user</name></name> <operator pos:start="61:14" pos:end="61:14">=</operator> <operator pos:start="61:16" pos:end="61:16">(</operator><call pos:start="61:17" pos:end="61:42"><name pos:start="61:17" pos:end="61:31">ARM_TBFLAG_PRIV</name><argument_list pos:start="61:32" pos:end="61:42">(<argument pos:start="61:33" pos:end="61:41"><expr pos:start="61:33" pos:end="61:41"><name pos:start="61:33" pos:end="61:41"><name pos:start="61:33" pos:end="61:34">tb</name><operator pos:start="61:35" pos:end="61:36">-&gt;</operator><name pos:start="61:37" pos:end="61:41">flags</name></name></expr></argument>)</argument_list></call> <operator pos:start="61:44" pos:end="61:45">==</operator> <literal type="number" pos:start="61:47" pos:end="61:47">0</literal><operator pos:start="61:48" pos:end="61:48">)</operator></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="65:5" pos:end="65:50"><expr pos:start="65:5" pos:end="65:49"><name pos:start="65:5" pos:end="65:19"><name pos:start="65:5" pos:end="65:6">dc</name><operator pos:start="65:7" pos:end="65:8">-&gt;</operator><name pos:start="65:9" pos:end="65:19">vfp_enabled</name></name> <operator pos:start="65:21" pos:end="65:21">=</operator> <call pos:start="65:23" pos:end="65:49"><name pos:start="65:23" pos:end="65:38">ARM_TBFLAG_VFPEN</name><argument_list pos:start="65:39" pos:end="65:49">(<argument pos:start="65:40" pos:end="65:48"><expr pos:start="65:40" pos:end="65:48"><name pos:start="65:40" pos:end="65:48"><name pos:start="65:40" pos:end="65:41">tb</name><operator pos:start="65:42" pos:end="65:43">-&gt;</operator><name pos:start="65:44" pos:end="65:48">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:47"><expr pos:start="67:5" pos:end="67:46"><name pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:6">dc</name><operator pos:start="67:7" pos:end="67:8">-&gt;</operator><name pos:start="67:9" pos:end="67:15">vec_len</name></name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:46"><name pos:start="67:19" pos:end="67:35">ARM_TBFLAG_VECLEN</name><argument_list pos:start="67:36" pos:end="67:46">(<argument pos:start="67:37" pos:end="67:45"><expr pos:start="67:37" pos:end="67:45"><name pos:start="67:37" pos:end="67:45"><name pos:start="67:37" pos:end="67:38">tb</name><operator pos:start="67:39" pos:end="67:40">-&gt;</operator><name pos:start="67:41" pos:end="67:45">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:53"><expr pos:start="69:5" pos:end="69:52"><name pos:start="69:5" pos:end="69:18"><name pos:start="69:5" pos:end="69:6">dc</name><operator pos:start="69:7" pos:end="69:8">-&gt;</operator><name pos:start="69:9" pos:end="69:18">vec_stride</name></name> <operator pos:start="69:20" pos:end="69:20">=</operator> <call pos:start="69:22" pos:end="69:52"><name pos:start="69:22" pos:end="69:41">ARM_TBFLAG_VECSTRIDE</name><argument_list pos:start="69:42" pos:end="69:52">(<argument pos:start="69:43" pos:end="69:51"><expr pos:start="69:43" pos:end="69:51"><name pos:start="69:43" pos:end="69:51"><name pos:start="69:43" pos:end="69:44">tb</name><operator pos:start="69:45" pos:end="69:46">-&gt;</operator><name pos:start="69:47" pos:end="69:51">flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="71:5" pos:end="71:33"><expr pos:start="71:5" pos:end="71:32"><name pos:start="71:5" pos:end="71:11">cpu_F0s</name> <operator pos:start="71:13" pos:end="71:13">=</operator> <call pos:start="71:15" pos:end="71:32"><name pos:start="71:15" pos:end="71:30">tcg_temp_new_i32</name><argument_list pos:start="71:31" pos:end="71:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:33"><expr pos:start="73:5" pos:end="73:32"><name pos:start="73:5" pos:end="73:11">cpu_F1s</name> <operator pos:start="73:13" pos:end="73:13">=</operator> <call pos:start="73:15" pos:end="73:32"><name pos:start="73:15" pos:end="73:30">tcg_temp_new_i32</name><argument_list pos:start="73:31" pos:end="73:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="75:5" pos:end="75:33"><expr pos:start="75:5" pos:end="75:32"><name pos:start="75:5" pos:end="75:11">cpu_F0d</name> <operator pos:start="75:13" pos:end="75:13">=</operator> <call pos:start="75:15" pos:end="75:32"><name pos:start="75:15" pos:end="75:30">tcg_temp_new_i64</name><argument_list pos:start="75:31" pos:end="75:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:33"><expr pos:start="77:5" pos:end="77:32"><name pos:start="77:5" pos:end="77:11">cpu_F1d</name> <operator pos:start="77:13" pos:end="77:13">=</operator> <call pos:start="77:15" pos:end="77:32"><name pos:start="77:15" pos:end="77:30">tcg_temp_new_i64</name><argument_list pos:start="77:31" pos:end="77:32">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="79:5" pos:end="79:21"><expr pos:start="79:5" pos:end="79:20"><name pos:start="79:5" pos:end="79:10">cpu_V0</name> <operator pos:start="79:12" pos:end="79:12">=</operator> <name pos:start="79:14" pos:end="79:20">cpu_F0d</name></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:21"><expr pos:start="81:5" pos:end="81:20"><name pos:start="81:5" pos:end="81:10">cpu_V1</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:20">cpu_F1d</name></expr>;</expr_stmt>

    <comment type="block" pos:start="83:5" pos:end="83:60">/* FIXME: cpu_M0 can probably be the same as cpu_V0.  */</comment>

    <expr_stmt pos:start="85:5" pos:end="85:32"><expr pos:start="85:5" pos:end="85:31"><name pos:start="85:5" pos:end="85:10">cpu_M0</name> <operator pos:start="85:12" pos:end="85:12">=</operator> <call pos:start="85:14" pos:end="85:31"><name pos:start="85:14" pos:end="85:29">tcg_temp_new_i64</name><argument_list pos:start="85:30" pos:end="85:31">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:71"><expr pos:start="87:5" pos:end="87:70"><name pos:start="87:5" pos:end="87:19">next_page_start</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <operator pos:start="87:23" pos:end="87:23">(</operator><name pos:start="87:24" pos:end="87:31">pc_start</name> <operator pos:start="87:33" pos:end="87:33">&amp;</operator> <name pos:start="87:35" pos:end="87:50">TARGET_PAGE_MASK</name><operator pos:start="87:51" pos:end="87:51">)</operator> <operator pos:start="87:53" pos:end="87:53">+</operator> <name pos:start="87:55" pos:end="87:70">TARGET_PAGE_SIZE</name></expr>;</expr_stmt>

    <expr_stmt pos:start="89:5" pos:end="89:12"><expr pos:start="89:5" pos:end="89:11"><name pos:start="89:5" pos:end="89:6">lj</name> <operator pos:start="89:8" pos:end="89:8">=</operator> <operator pos:start="89:10" pos:end="89:10">-</operator><literal type="number" pos:start="89:11" pos:end="89:11">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="91:18"><expr pos:start="91:5" pos:end="91:17"><name pos:start="91:5" pos:end="91:13">num_insns</name> <operator pos:start="91:15" pos:end="91:15">=</operator> <literal type="number" pos:start="91:17" pos:end="91:17">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:43"><expr pos:start="93:5" pos:end="93:42"><name pos:start="93:5" pos:end="93:13">max_insns</name> <operator pos:start="93:15" pos:end="93:15">=</operator> <name pos:start="93:17" pos:end="93:26"><name pos:start="93:17" pos:end="93:18">tb</name><operator pos:start="93:19" pos:end="93:20">-&gt;</operator><name pos:start="93:21" pos:end="93:26">cflags</name></name> <operator pos:start="93:28" pos:end="93:28">&amp;</operator> <name pos:start="93:30" pos:end="93:42">CF_COUNT_MASK</name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="97:34"><if pos:start="95:5" pos:end="97:34">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:17">max_insns</name> <operator pos:start="95:19" pos:end="95:20">==</operator> <literal type="number" pos:start="95:22" pos:end="95:22">0</literal></expr>)</condition><block type="pseudo" pos:start="97:9" pos:end="97:34"><block_content pos:start="97:9" pos:end="97:34">

        <expr_stmt pos:start="97:9" pos:end="97:34"><expr pos:start="97:9" pos:end="97:33"><name pos:start="97:9" pos:end="97:17">max_insns</name> <operator pos:start="97:19" pos:end="97:19">=</operator> <name pos:start="97:21" pos:end="97:33">CF_COUNT_MASK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="101:5" pos:end="101:23"><expr pos:start="101:5" pos:end="101:22"><call pos:start="101:5" pos:end="101:22"><name pos:start="101:5" pos:end="101:20">gen_icount_start</name><argument_list pos:start="101:21" pos:end="101:22">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="105:5" pos:end="163:7">/* A note on handling of the condexec (IT) bits:

     *

     * We want to avoid the overhead of having to write the updated condexec

     * bits back to the CPUState for every instruction in an IT block. So:

     * (1) if the condexec bits are not already zero then we write

     * zero back into the CPUState now. This avoids complications trying

     * to do it at the end of the block. (For example if we don't do this

     * it's hard to identify whether we can safely skip writing condexec

     * at the end of the TB, which we definitely want to do for the case

     * where a TB doesn't do anything with the IT state at all.)

     * (2) if we are going to leave the TB then we call gen_set_condexec()

     * which will write the correct value into CPUState if zero is wrong.

     * This is done both for leaving the TB at the end, and for leaving

     * it because of an exception we know will happen, which is done in

     * gen_exception_insn(). The latter is necessary because we need to

     * leave the TB with the PC/IT state just prior to execution of the

     * instruction which caused the exception.

     * (3) if we leave the TB unexpectedly (eg a data abort on a load)

     * then the CPUState will be wrong and we need to reset it.

     * This is handled in the same way as restoration of the

     * PC in these situations: we will be called again with search_pc=1

     * and generate a mapping of the condexec bits for each PC in

     * gen_opc_condexec_bits[]. gen_pc_load[] then uses this to restore

     * the condexec bits.

     *

     * Note that there are no instructions which can read the condexec

     * bits, and none which can write non-static values to them, so

     * we don't need to care about whether CPUState is correct in the

     * middle of a TB.

     */</comment>



    <comment type="block" pos:start="167:5" pos:end="169:65">/* Reset the conditional execution bits immediately. This avoids

       complications trying to do it at the end of the block.  */</comment>

    <if_stmt pos:start="171:5" pos:end="181:7"><if pos:start="171:5" pos:end="181:7">if <condition pos:start="171:8" pos:end="171:47">(<expr pos:start="171:9" pos:end="171:46"><name pos:start="171:9" pos:end="171:25"><name pos:start="171:9" pos:end="171:10">dc</name><operator pos:start="171:11" pos:end="171:12">-&gt;</operator><name pos:start="171:13" pos:end="171:25">condexec_mask</name></name> <operator pos:start="171:27" pos:end="171:28">||</operator> <name pos:start="171:30" pos:end="171:46"><name pos:start="171:30" pos:end="171:31">dc</name><operator pos:start="171:32" pos:end="171:33">-&gt;</operator><name pos:start="171:34" pos:end="171:46">condexec_cond</name></name></expr>)</condition>

      <block pos:start="173:7" pos:end="181:7">{<block_content pos:start="175:9" pos:end="179:44">

        <decl_stmt pos:start="175:9" pos:end="175:29"><decl pos:start="175:9" pos:end="175:28"><type pos:start="175:9" pos:end="175:12"><name pos:start="175:9" pos:end="175:12">TCGv</name></type> <name pos:start="175:14" pos:end="175:16">tmp</name> <init pos:start="175:18" pos:end="175:28">= <expr pos:start="175:20" pos:end="175:28"><call pos:start="175:20" pos:end="175:28"><name pos:start="175:20" pos:end="175:26">new_tmp</name><argument_list pos:start="175:27" pos:end="175:28">()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:33"><expr pos:start="177:9" pos:end="177:32"><call pos:start="177:9" pos:end="177:32"><name pos:start="177:9" pos:end="177:24">tcg_gen_movi_i32</name><argument_list pos:start="177:25" pos:end="177:32">(<argument pos:start="177:26" pos:end="177:28"><expr pos:start="177:26" pos:end="177:28"><name pos:start="177:26" pos:end="177:28">tmp</name></expr></argument>, <argument pos:start="177:31" pos:end="177:31"><expr pos:start="177:31" pos:end="177:31"><literal type="number" pos:start="177:31" pos:end="177:31">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="179:9" pos:end="179:44"><expr pos:start="179:9" pos:end="179:43"><call pos:start="179:9" pos:end="179:43"><name pos:start="179:9" pos:end="179:23">store_cpu_field</name><argument_list pos:start="179:24" pos:end="179:43">(<argument pos:start="179:25" pos:end="179:27"><expr pos:start="179:25" pos:end="179:27"><name pos:start="179:25" pos:end="179:27">tmp</name></expr></argument>, <argument pos:start="179:30" pos:end="179:42"><expr pos:start="179:30" pos:end="179:42"><name pos:start="179:30" pos:end="179:42">condexec_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      </block_content>}</block></if></if_stmt>

    <do pos:start="183:5" pos:end="349:36">do <block pos:start="183:8" pos:end="341:5">{<block_content pos:start="189:9" pos:end="339:21">

<cpp:ifdef pos:start="185:1" pos:end="185:23">#<cpp:directive pos:start="185:2" pos:end="185:6">ifdef</cpp:directive> <name pos:start="185:8" pos:end="185:23">CONFIG_USER_ONLY</name></cpp:ifdef>

        <comment type="block" pos:start="187:9" pos:end="187:55">/* Intercept jump to the magic kernel page.  */</comment>

        <if_stmt pos:start="189:9" pos:end="204:0"><if pos:start="189:9" pos:end="204:0">if <condition pos:start="189:12" pos:end="189:33">(<expr pos:start="189:13" pos:end="189:32"><name pos:start="189:13" pos:end="189:18"><name pos:start="189:13" pos:end="189:14">dc</name><operator pos:start="189:15" pos:end="189:16">-&gt;</operator><name pos:start="189:17" pos:end="189:18">pc</name></name> <operator pos:start="189:20" pos:end="189:21">&gt;=</operator> <literal type="number" pos:start="189:23" pos:end="189:32">0xffff0000</literal></expr>)</condition> <block pos:start="189:35" pos:end="204:0">{<block_content pos:start="195:13" pos:end="199:18">

            <comment type="block" pos:start="191:13" pos:end="193:47">/* We always get here via a jump, so know we are not in a

               conditional execution block.  */</comment>

            <expr_stmt pos:start="195:13" pos:end="195:44"><expr pos:start="195:13" pos:end="195:43"><call pos:start="195:13" pos:end="195:43"><name pos:start="195:13" pos:end="195:25">gen_exception</name><argument_list pos:start="195:26" pos:end="195:43">(<argument pos:start="195:27" pos:end="195:42"><expr pos:start="195:27" pos:end="195:42"><name pos:start="195:27" pos:end="195:42">EXCP_KERNEL_TRAP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="197:13" pos:end="197:38"><expr pos:start="197:13" pos:end="197:37"><name pos:start="197:13" pos:end="197:22"><name pos:start="197:13" pos:end="197:14">dc</name><operator pos:start="197:15" pos:end="197:16">-&gt;</operator><name pos:start="197:17" pos:end="197:22">is_jmp</name></name> <operator pos:start="197:24" pos:end="197:24">=</operator> <name pos:start="197:26" pos:end="197:37">DISAS_UPDATE</name></expr>;</expr_stmt>

            <break pos:start="199:13" pos:end="199:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:else pos:start="203:1" pos:end="203:5">#<cpp:directive pos:start="203:2" pos:end="203:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="205:9" pos:end="220:0"><if pos:start="205:9" pos:end="220:0">if <condition pos:start="205:12" pos:end="205:46">(<expr pos:start="205:13" pos:end="205:45"><name pos:start="205:13" pos:end="205:18"><name pos:start="205:13" pos:end="205:14">dc</name><operator pos:start="205:15" pos:end="205:16">-&gt;</operator><name pos:start="205:17" pos:end="205:18">pc</name></name> <operator pos:start="205:20" pos:end="205:21">&gt;=</operator> <literal type="number" pos:start="205:23" pos:end="205:32">0xfffffff0</literal> <operator pos:start="205:34" pos:end="205:35">&amp;&amp;</operator> <call pos:start="205:37" pos:end="205:45"><name pos:start="205:37" pos:end="205:40">IS_M</name><argument_list pos:start="205:41" pos:end="205:45">(<argument pos:start="205:42" pos:end="205:44"><expr pos:start="205:42" pos:end="205:44"><name pos:start="205:42" pos:end="205:44">env</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="205:48" pos:end="220:0">{<block_content pos:start="211:13" pos:end="215:18">

            <comment type="block" pos:start="207:13" pos:end="209:47">/* We always get here via a jump, so know we are not in a

               conditional execution block.  */</comment>

            <expr_stmt pos:start="211:13" pos:end="211:47"><expr pos:start="211:13" pos:end="211:46"><call pos:start="211:13" pos:end="211:46"><name pos:start="211:13" pos:end="211:25">gen_exception</name><argument_list pos:start="211:26" pos:end="211:46">(<argument pos:start="211:27" pos:end="211:45"><expr pos:start="211:27" pos:end="211:45"><name pos:start="211:27" pos:end="211:45">EXCP_EXCEPTION_EXIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="213:13" pos:end="213:38"><expr pos:start="213:13" pos:end="213:37"><name pos:start="213:13" pos:end="213:22"><name pos:start="213:13" pos:end="213:14">dc</name><operator pos:start="213:15" pos:end="213:16">-&gt;</operator><name pos:start="213:17" pos:end="213:22">is_jmp</name></name> <operator pos:start="213:24" pos:end="213:24">=</operator> <name pos:start="213:26" pos:end="213:37">DISAS_UPDATE</name></expr>;</expr_stmt>

            <break pos:start="215:13" pos:end="215:18">break;</break>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="219:1" pos:end="219:6">#<cpp:directive pos:start="219:2" pos:end="219:6">endif</cpp:directive></cpp:endif>



        <if_stmt pos:start="223:9" pos:end="245:9"><if pos:start="223:9" pos:end="245:9">if <condition pos:start="223:12" pos:end="223:55">(<expr pos:start="223:13" pos:end="223:54"><call pos:start="223:13" pos:end="223:54"><name pos:start="223:13" pos:end="223:20">unlikely</name><argument_list pos:start="223:21" pos:end="223:54">(<argument pos:start="223:22" pos:end="223:53"><expr pos:start="223:22" pos:end="223:53"><operator pos:start="223:22" pos:end="223:22">!</operator><call pos:start="223:23" pos:end="223:53"><name pos:start="223:23" pos:end="223:34">QTAILQ_EMPTY</name><argument_list pos:start="223:35" pos:end="223:53">(<argument pos:start="223:36" pos:end="223:52"><expr pos:start="223:36" pos:end="223:52"><operator pos:start="223:36" pos:end="223:36">&amp;</operator><name pos:start="223:37" pos:end="223:52"><name pos:start="223:37" pos:end="223:39">env</name><operator pos:start="223:40" pos:end="223:41">-&gt;</operator><name pos:start="223:42" pos:end="223:52">breakpoints</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="223:57" pos:end="245:9">{<block_content pos:start="225:13" pos:end="243:13">

            <macro pos:start="225:13" pos:end="225:56"><name pos:start="225:13" pos:end="225:26">QTAILQ_FOREACH</name><argument_list pos:start="225:27" pos:end="225:56">(<argument pos:start="225:28" pos:end="225:29">bp</argument>, <argument pos:start="225:32" pos:end="225:48">&amp;env-&gt;breakpoints</argument>, <argument pos:start="225:51" pos:end="225:55">entry</argument>)</argument_list></macro> <block pos:start="225:58" pos:end="243:13">{<block_content pos:start="227:17" pos:end="241:17">

                <if_stmt pos:start="227:17" pos:end="241:17"><if pos:start="227:17" pos:end="241:17">if <condition pos:start="227:20" pos:end="227:37">(<expr pos:start="227:21" pos:end="227:36"><name pos:start="227:21" pos:end="227:26"><name pos:start="227:21" pos:end="227:22">bp</name><operator pos:start="227:23" pos:end="227:24">-&gt;</operator><name pos:start="227:25" pos:end="227:26">pc</name></name> <operator pos:start="227:28" pos:end="227:29">==</operator> <name pos:start="227:31" pos:end="227:36"><name pos:start="227:31" pos:end="227:32">dc</name><operator pos:start="227:33" pos:end="227:34">-&gt;</operator><name pos:start="227:35" pos:end="227:36">pc</name></name></expr>)</condition> <block pos:start="227:39" pos:end="241:17">{<block_content pos:start="229:21" pos:end="239:26">

                    <expr_stmt pos:start="229:21" pos:end="229:58"><expr pos:start="229:21" pos:end="229:57"><call pos:start="229:21" pos:end="229:57"><name pos:start="229:21" pos:end="229:38">gen_exception_insn</name><argument_list pos:start="229:39" pos:end="229:57">(<argument pos:start="229:40" pos:end="229:41"><expr pos:start="229:40" pos:end="229:41"><name pos:start="229:40" pos:end="229:41">dc</name></expr></argument>, <argument pos:start="229:44" pos:end="229:44"><expr pos:start="229:44" pos:end="229:44"><literal type="number" pos:start="229:44" pos:end="229:44">0</literal></expr></argument>, <argument pos:start="229:47" pos:end="229:56"><expr pos:start="229:47" pos:end="229:56"><name pos:start="229:47" pos:end="229:56">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="block" pos:start="231:21" pos:end="233:46">/* Advance PC so that clearing the breakpoint will

                       invalidate this TB.  */</comment>

                    <expr_stmt pos:start="235:21" pos:end="235:32"><expr pos:start="235:21" pos:end="235:31"><name pos:start="235:21" pos:end="235:26"><name pos:start="235:21" pos:end="235:22">dc</name><operator pos:start="235:23" pos:end="235:24">-&gt;</operator><name pos:start="235:25" pos:end="235:26">pc</name></name> <operator pos:start="235:28" pos:end="235:29">+=</operator> <literal type="number" pos:start="235:31" pos:end="235:31">2</literal></expr>;</expr_stmt>

                    <goto pos:start="237:21" pos:end="237:41">goto <name pos:start="237:26" pos:end="237:40">done_generating</name>;</goto>

                    <break pos:start="239:21" pos:end="239:26">break;</break>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="247:9" pos:end="269:9"><if pos:start="247:9" pos:end="269:9">if <condition pos:start="247:12" pos:end="247:22">(<expr pos:start="247:13" pos:end="247:21"><name pos:start="247:13" pos:end="247:21">search_pc</name></expr>)</condition> <block pos:start="247:24" pos:end="269:9">{<block_content pos:start="249:13" pos:end="267:43">

            <expr_stmt pos:start="249:13" pos:end="249:42"><expr pos:start="249:13" pos:end="249:41"><name pos:start="249:13" pos:end="249:13">j</name> <operator pos:start="249:15" pos:end="249:15">=</operator> <name pos:start="249:17" pos:end="249:27">gen_opc_ptr</name> <operator pos:start="249:29" pos:end="249:29">-</operator> <name pos:start="249:31" pos:end="249:41">gen_opc_buf</name></expr>;</expr_stmt>

            <if_stmt pos:start="251:13" pos:end="259:13"><if pos:start="251:13" pos:end="259:13">if <condition pos:start="251:16" pos:end="251:23">(<expr pos:start="251:17" pos:end="251:22"><name pos:start="251:17" pos:end="251:18">lj</name> <operator pos:start="251:20" pos:end="251:20">&lt;</operator> <name pos:start="251:22" pos:end="251:22">j</name></expr>)</condition> <block pos:start="251:25" pos:end="259:13">{<block_content pos:start="253:17" pos:end="257:50">

                <expr_stmt pos:start="253:17" pos:end="253:21"><expr pos:start="253:17" pos:end="253:20"><name pos:start="253:17" pos:end="253:18">lj</name><operator pos:start="253:19" pos:end="253:20">++</operator></expr>;</expr_stmt>

                <while pos:start="255:17" pos:end="257:50">while <condition pos:start="255:23" pos:end="255:30">(<expr pos:start="255:24" pos:end="255:29"><name pos:start="255:24" pos:end="255:25">lj</name> <operator pos:start="255:27" pos:end="255:27">&lt;</operator> <name pos:start="255:29" pos:end="255:29">j</name></expr>)</condition><block type="pseudo" pos:start="257:21" pos:end="257:50"><block_content pos:start="257:21" pos:end="257:50">

                    <expr_stmt pos:start="257:21" pos:end="257:50"><expr pos:start="257:21" pos:end="257:49"><name pos:start="257:21" pos:end="257:45"><name pos:start="257:21" pos:end="257:39">gen_opc_instr_start</name><index pos:start="257:40" pos:end="257:45">[<expr pos:start="257:41" pos:end="257:44"><name pos:start="257:41" pos:end="257:42">lj</name><operator pos:start="257:43" pos:end="257:44">++</operator></expr>]</index></name> <operator pos:start="257:47" pos:end="257:47">=</operator> <literal type="number" pos:start="257:49" pos:end="257:49">0</literal></expr>;</expr_stmt></block_content></block></while>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:36"><expr pos:start="261:13" pos:end="261:35"><name pos:start="261:13" pos:end="261:26"><name pos:start="261:13" pos:end="261:22">gen_opc_pc</name><index pos:start="261:23" pos:end="261:26">[<expr pos:start="261:24" pos:end="261:25"><name pos:start="261:24" pos:end="261:25">lj</name></expr>]</index></name> <operator pos:start="261:28" pos:end="261:28">=</operator> <name pos:start="261:30" pos:end="261:35"><name pos:start="261:30" pos:end="261:31">dc</name><operator pos:start="261:32" pos:end="261:33">-&gt;</operator><name pos:start="261:34" pos:end="261:35">pc</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="263:13" pos:end="263:92"><expr pos:start="263:13" pos:end="263:91"><name pos:start="263:13" pos:end="263:37"><name pos:start="263:13" pos:end="263:33">gen_opc_condexec_bits</name><index pos:start="263:34" pos:end="263:37">[<expr pos:start="263:35" pos:end="263:36"><name pos:start="263:35" pos:end="263:36">lj</name></expr>]</index></name> <operator pos:start="263:39" pos:end="263:39">=</operator> <operator pos:start="263:41" pos:end="263:41">(</operator><name pos:start="263:42" pos:end="263:58"><name pos:start="263:42" pos:end="263:43">dc</name><operator pos:start="263:44" pos:end="263:45">-&gt;</operator><name pos:start="263:46" pos:end="263:58">condexec_cond</name></name> <operator pos:start="263:60" pos:end="263:61">&lt;&lt;</operator> <literal type="number" pos:start="263:63" pos:end="263:63">4</literal><operator pos:start="263:64" pos:end="263:64">)</operator> <operator pos:start="263:66" pos:end="263:66">|</operator> <operator pos:start="263:68" pos:end="263:68">(</operator><name pos:start="263:69" pos:end="263:85"><name pos:start="263:69" pos:end="263:70">dc</name><operator pos:start="263:71" pos:end="263:72">-&gt;</operator><name pos:start="263:73" pos:end="263:85">condexec_mask</name></name> <operator pos:start="263:87" pos:end="263:88">&gt;&gt;</operator> <literal type="number" pos:start="263:90" pos:end="263:90">1</literal><operator pos:start="263:91" pos:end="263:91">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:40"><expr pos:start="265:13" pos:end="265:39"><name pos:start="265:13" pos:end="265:35"><name pos:start="265:13" pos:end="265:31">gen_opc_instr_start</name><index pos:start="265:32" pos:end="265:35">[<expr pos:start="265:33" pos:end="265:34"><name pos:start="265:33" pos:end="265:34">lj</name></expr>]</index></name> <operator pos:start="265:37" pos:end="265:37">=</operator> <literal type="number" pos:start="265:39" pos:end="265:39">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="267:13" pos:end="267:43"><expr pos:start="267:13" pos:end="267:42"><name pos:start="267:13" pos:end="267:30"><name pos:start="267:13" pos:end="267:26">gen_opc_icount</name><index pos:start="267:27" pos:end="267:30">[<expr pos:start="267:28" pos:end="267:29"><name pos:start="267:28" pos:end="267:29">lj</name></expr>]</index></name> <operator pos:start="267:32" pos:end="267:32">=</operator> <name pos:start="267:34" pos:end="267:42">num_insns</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="273:9" pos:end="275:27"><if pos:start="273:9" pos:end="275:27">if <condition pos:start="273:12" pos:end="273:68">(<expr pos:start="273:13" pos:end="273:67"><name pos:start="273:13" pos:end="273:21">num_insns</name> <operator pos:start="273:23" pos:end="273:23">+</operator> <literal type="number" pos:start="273:25" pos:end="273:25">1</literal> <operator pos:start="273:27" pos:end="273:28">==</operator> <name pos:start="273:30" pos:end="273:38">max_insns</name> <operator pos:start="273:40" pos:end="273:41">&amp;&amp;</operator> <operator pos:start="273:43" pos:end="273:43">(</operator><name pos:start="273:44" pos:end="273:53"><name pos:start="273:44" pos:end="273:45">tb</name><operator pos:start="273:46" pos:end="273:47">-&gt;</operator><name pos:start="273:48" pos:end="273:53">cflags</name></name> <operator pos:start="273:55" pos:end="273:55">&amp;</operator> <name pos:start="273:57" pos:end="273:66">CF_LAST_IO</name><operator pos:start="273:67" pos:end="273:67">)</operator></expr>)</condition><block type="pseudo" pos:start="275:13" pos:end="275:27"><block_content pos:start="275:13" pos:end="275:27">

            <expr_stmt pos:start="275:13" pos:end="275:27"><expr pos:start="275:13" pos:end="275:26"><call pos:start="275:13" pos:end="275:26"><name pos:start="275:13" pos:end="275:24">gen_io_start</name><argument_list pos:start="275:25" pos:end="275:26">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="279:9" pos:end="283:9"><if pos:start="279:9" pos:end="283:9">if <condition pos:start="279:12" pos:end="279:56">(<expr pos:start="279:13" pos:end="279:55"><call pos:start="279:13" pos:end="279:55"><name pos:start="279:13" pos:end="279:20">unlikely</name><argument_list pos:start="279:21" pos:end="279:55">(<argument pos:start="279:22" pos:end="279:54"><expr pos:start="279:22" pos:end="279:54"><call pos:start="279:22" pos:end="279:54"><name pos:start="279:22" pos:end="279:39">qemu_loglevel_mask</name><argument_list pos:start="279:40" pos:end="279:54">(<argument pos:start="279:41" pos:end="279:53"><expr pos:start="279:41" pos:end="279:53"><name pos:start="279:41" pos:end="279:53">CPU_LOG_TB_OP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="279:58" pos:end="283:9">{<block_content pos:start="281:13" pos:end="281:45">

            <expr_stmt pos:start="281:13" pos:end="281:45"><expr pos:start="281:13" pos:end="281:44"><call pos:start="281:13" pos:end="281:44"><name pos:start="281:13" pos:end="281:36">tcg_gen_debug_insn_start</name><argument_list pos:start="281:37" pos:end="281:44">(<argument pos:start="281:38" pos:end="281:43"><expr pos:start="281:38" pos:end="281:43"><name pos:start="281:38" pos:end="281:43"><name pos:start="281:38" pos:end="281:39">dc</name><operator pos:start="281:40" pos:end="281:41">-&gt;</operator><name pos:start="281:42" pos:end="281:43">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="287:9" pos:end="311:9"><if pos:start="287:9" pos:end="307:9">if <condition pos:start="287:12" pos:end="287:22">(<expr pos:start="287:13" pos:end="287:21"><name pos:start="287:13" pos:end="287:21"><name pos:start="287:13" pos:end="287:14">dc</name><operator pos:start="287:15" pos:end="287:16">-&gt;</operator><name pos:start="287:17" pos:end="287:21">thumb</name></name></expr>)</condition> <block pos:start="287:24" pos:end="307:9">{<block_content pos:start="289:13" pos:end="305:13">

            <expr_stmt pos:start="289:13" pos:end="289:38"><expr pos:start="289:13" pos:end="289:37"><call pos:start="289:13" pos:end="289:37"><name pos:start="289:13" pos:end="289:28">disas_thumb_insn</name><argument_list pos:start="289:29" pos:end="289:37">(<argument pos:start="289:30" pos:end="289:32"><expr pos:start="289:30" pos:end="289:32"><name pos:start="289:30" pos:end="289:32">env</name></expr></argument>, <argument pos:start="289:35" pos:end="289:36"><expr pos:start="289:35" pos:end="289:36"><name pos:start="289:35" pos:end="289:36">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="291:13" pos:end="305:13"><if pos:start="291:13" pos:end="305:13">if <condition pos:start="291:16" pos:end="291:34">(<expr pos:start="291:17" pos:end="291:33"><name pos:start="291:17" pos:end="291:33"><name pos:start="291:17" pos:end="291:18">dc</name><operator pos:start="291:19" pos:end="291:20">-&gt;</operator><name pos:start="291:21" pos:end="291:33">condexec_mask</name></name></expr>)</condition> <block pos:start="291:36" pos:end="305:13">{<block_content pos:start="293:17" pos:end="303:17">

                <expr_stmt pos:start="293:17" pos:end="295:68"><expr pos:start="293:17" pos:end="295:67"><name pos:start="293:17" pos:end="293:33"><name pos:start="293:17" pos:end="293:18">dc</name><operator pos:start="293:19" pos:end="293:20">-&gt;</operator><name pos:start="293:21" pos:end="293:33">condexec_cond</name></name> <operator pos:start="293:35" pos:end="293:35">=</operator> <operator pos:start="293:37" pos:end="293:37">(</operator><name pos:start="293:38" pos:end="293:54"><name pos:start="293:38" pos:end="293:39">dc</name><operator pos:start="293:40" pos:end="293:41">-&gt;</operator><name pos:start="293:42" pos:end="293:54">condexec_cond</name></name> <operator pos:start="293:56" pos:end="293:56">&amp;</operator> <literal type="number" pos:start="293:58" pos:end="293:60">0xe</literal><operator pos:start="293:61" pos:end="293:61">)</operator>

                                   <operator pos:start="295:36" pos:end="295:36">|</operator> <operator pos:start="295:38" pos:end="295:38">(</operator><operator pos:start="295:39" pos:end="295:39">(</operator><name pos:start="295:40" pos:end="295:56"><name pos:start="295:40" pos:end="295:41">dc</name><operator pos:start="295:42" pos:end="295:43">-&gt;</operator><name pos:start="295:44" pos:end="295:56">condexec_mask</name></name> <operator pos:start="295:58" pos:end="295:59">&gt;&gt;</operator> <literal type="number" pos:start="295:61" pos:end="295:61">4</literal><operator pos:start="295:62" pos:end="295:62">)</operator> <operator pos:start="295:64" pos:end="295:64">&amp;</operator> <literal type="number" pos:start="295:66" pos:end="295:66">1</literal><operator pos:start="295:67" pos:end="295:67">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="297:68"><expr pos:start="297:17" pos:end="297:67"><name pos:start="297:17" pos:end="297:33"><name pos:start="297:17" pos:end="297:18">dc</name><operator pos:start="297:19" pos:end="297:20">-&gt;</operator><name pos:start="297:21" pos:end="297:33">condexec_mask</name></name> <operator pos:start="297:35" pos:end="297:35">=</operator> <operator pos:start="297:37" pos:end="297:37">(</operator><name pos:start="297:38" pos:end="297:54"><name pos:start="297:38" pos:end="297:39">dc</name><operator pos:start="297:40" pos:end="297:41">-&gt;</operator><name pos:start="297:42" pos:end="297:54">condexec_mask</name></name> <operator pos:start="297:56" pos:end="297:57">&lt;&lt;</operator> <literal type="number" pos:start="297:59" pos:end="297:59">1</literal><operator pos:start="297:60" pos:end="297:60">)</operator> <operator pos:start="297:62" pos:end="297:62">&amp;</operator> <literal type="number" pos:start="297:64" pos:end="297:67">0x1f</literal></expr>;</expr_stmt>

                <if_stmt pos:start="299:17" pos:end="303:17"><if pos:start="299:17" pos:end="303:17">if <condition pos:start="299:20" pos:end="299:43">(<expr pos:start="299:21" pos:end="299:42"><name pos:start="299:21" pos:end="299:37"><name pos:start="299:21" pos:end="299:22">dc</name><operator pos:start="299:23" pos:end="299:24">-&gt;</operator><name pos:start="299:25" pos:end="299:37">condexec_mask</name></name> <operator pos:start="299:39" pos:end="299:40">==</operator> <literal type="number" pos:start="299:42" pos:end="299:42">0</literal></expr>)</condition> <block pos:start="299:45" pos:end="303:17">{<block_content pos:start="301:21" pos:end="301:42">

                    <expr_stmt pos:start="301:21" pos:end="301:42"><expr pos:start="301:21" pos:end="301:41"><name pos:start="301:21" pos:end="301:37"><name pos:start="301:21" pos:end="301:22">dc</name><operator pos:start="301:23" pos:end="301:24">-&gt;</operator><name pos:start="301:25" pos:end="301:37">condexec_cond</name></name> <operator pos:start="301:39" pos:end="301:39">=</operator> <literal type="number" pos:start="301:41" pos:end="301:41">0</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <else pos:start="307:11" pos:end="311:9">else <block pos:start="307:16" pos:end="311:9">{<block_content pos:start="309:13" pos:end="309:36">

            <expr_stmt pos:start="309:13" pos:end="309:36"><expr pos:start="309:13" pos:end="309:35"><call pos:start="309:13" pos:end="309:35"><name pos:start="309:13" pos:end="309:26">disas_arm_insn</name><argument_list pos:start="309:27" pos:end="309:35">(<argument pos:start="309:28" pos:end="309:30"><expr pos:start="309:28" pos:end="309:30"><name pos:start="309:28" pos:end="309:30">env</name></expr></argument>, <argument pos:start="309:33" pos:end="309:34"><expr pos:start="309:33" pos:end="309:34"><name pos:start="309:33" pos:end="309:34">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="313:9" pos:end="319:9"><if pos:start="313:9" pos:end="319:9">if <condition pos:start="313:12" pos:end="313:22">(<expr pos:start="313:13" pos:end="313:21"><name pos:start="313:13" pos:end="313:21">num_temps</name></expr>)</condition> <block pos:start="313:24" pos:end="319:9">{<block_content pos:start="315:13" pos:end="317:26">

            <expr_stmt pos:start="315:13" pos:end="315:76"><expr pos:start="315:13" pos:end="315:75"><call pos:start="315:13" pos:end="315:75"><name pos:start="315:13" pos:end="315:19">fprintf</name><argument_list pos:start="315:20" pos:end="315:75">(<argument pos:start="315:21" pos:end="315:26"><expr pos:start="315:21" pos:end="315:26"><name pos:start="315:21" pos:end="315:26">stderr</name></expr></argument>, <argument pos:start="315:29" pos:end="315:66"><expr pos:start="315:29" pos:end="315:66"><literal type="string" pos:start="315:29" pos:end="315:66">"Internal resource leak before %08x\n"</literal></expr></argument>, <argument pos:start="315:69" pos:end="315:74"><expr pos:start="315:69" pos:end="315:74"><name pos:start="315:69" pos:end="315:74"><name pos:start="315:69" pos:end="315:70">dc</name><operator pos:start="315:71" pos:end="315:72">-&gt;</operator><name pos:start="315:73" pos:end="315:74">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="317:13" pos:end="317:26"><expr pos:start="317:13" pos:end="317:25"><name pos:start="317:13" pos:end="317:21">num_temps</name> <operator pos:start="317:23" pos:end="317:23">=</operator> <literal type="number" pos:start="317:25" pos:end="317:25">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="323:9" pos:end="329:9"><if pos:start="323:9" pos:end="329:9">if <condition pos:start="323:12" pos:end="323:39">(<expr pos:start="323:13" pos:end="323:38"><name pos:start="323:13" pos:end="323:23"><name pos:start="323:13" pos:end="323:14">dc</name><operator pos:start="323:15" pos:end="323:16">-&gt;</operator><name pos:start="323:17" pos:end="323:23">condjmp</name></name> <operator pos:start="323:25" pos:end="323:26">&amp;&amp;</operator> <operator pos:start="323:28" pos:end="323:28">!</operator><name pos:start="323:29" pos:end="323:38"><name pos:start="323:29" pos:end="323:30">dc</name><operator pos:start="323:31" pos:end="323:32">-&gt;</operator><name pos:start="323:33" pos:end="323:38">is_jmp</name></name></expr>)</condition> <block pos:start="323:41" pos:end="329:9">{<block_content pos:start="325:13" pos:end="327:28">

            <expr_stmt pos:start="325:13" pos:end="325:41"><expr pos:start="325:13" pos:end="325:40"><call pos:start="325:13" pos:end="325:40"><name pos:start="325:13" pos:end="325:25">gen_set_label</name><argument_list pos:start="325:26" pos:end="325:40">(<argument pos:start="325:27" pos:end="325:39"><expr pos:start="325:27" pos:end="325:39"><name pos:start="325:27" pos:end="325:39"><name pos:start="325:27" pos:end="325:28">dc</name><operator pos:start="325:29" pos:end="325:30">-&gt;</operator><name pos:start="325:31" pos:end="325:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="327:13" pos:end="327:28"><expr pos:start="327:13" pos:end="327:27"><name pos:start="327:13" pos:end="327:23"><name pos:start="327:13" pos:end="327:14">dc</name><operator pos:start="327:15" pos:end="327:16">-&gt;</operator><name pos:start="327:17" pos:end="327:23">condjmp</name></name> <operator pos:start="327:25" pos:end="327:25">=</operator> <literal type="number" pos:start="327:27" pos:end="327:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="331:9" pos:end="337:64">/* Translation stops when a conditional branch is encountered.

         * Otherwise the subsequent code could get translated several times.

         * Also stop translation when a page boundary is reached.  This

         * ensures prefetch aborts occur at the right place.  */</comment>

        <expr_stmt pos:start="339:9" pos:end="339:21"><expr pos:start="339:9" pos:end="339:20"><name pos:start="339:9" pos:end="339:17">num_insns</name> <operator pos:start="339:19" pos:end="339:20">++</operator></expr>;</expr_stmt>

    </block_content>}</block> while <condition pos:start="341:13" pos:end="349:35">(<expr pos:start="341:14" pos:end="349:34"><operator pos:start="341:14" pos:end="341:14">!</operator><name pos:start="341:15" pos:end="341:24"><name pos:start="341:15" pos:end="341:16">dc</name><operator pos:start="341:17" pos:end="341:18">-&gt;</operator><name pos:start="341:19" pos:end="341:24">is_jmp</name></name> <operator pos:start="341:26" pos:end="341:27">&amp;&amp;</operator> <name pos:start="341:29" pos:end="341:39">gen_opc_ptr</name> <operator pos:start="341:41" pos:end="341:41">&lt;</operator> <name pos:start="341:43" pos:end="341:53">gen_opc_end</name> <operator pos:start="341:55" pos:end="341:56">&amp;&amp;</operator>

             <operator pos:start="343:14" pos:end="343:14">!</operator><name pos:start="343:15" pos:end="343:37"><name pos:start="343:15" pos:end="343:17">env</name><operator pos:start="343:18" pos:end="343:19">-&gt;</operator><name pos:start="343:20" pos:end="343:37">singlestep_enabled</name></name> <operator pos:start="343:39" pos:end="343:40">&amp;&amp;</operator>

             <operator pos:start="345:14" pos:end="345:14">!</operator><name pos:start="345:15" pos:end="345:24">singlestep</name> <operator pos:start="345:26" pos:end="345:27">&amp;&amp;</operator>

             <name pos:start="347:14" pos:end="347:19"><name pos:start="347:14" pos:end="347:15">dc</name><operator pos:start="347:16" pos:end="347:17">-&gt;</operator><name pos:start="347:18" pos:end="347:19">pc</name></name> <operator pos:start="347:21" pos:end="347:21">&lt;</operator> <name pos:start="347:23" pos:end="347:37">next_page_start</name> <operator pos:start="347:39" pos:end="347:40">&amp;&amp;</operator>

             <name pos:start="349:14" pos:end="349:22">num_insns</name> <operator pos:start="349:24" pos:end="349:24">&lt;</operator> <name pos:start="349:26" pos:end="349:34">max_insns</name></expr>)</condition>;</do>



    <if_stmt pos:start="353:5" pos:end="367:5"><if pos:start="353:5" pos:end="367:5">if <condition pos:start="353:8" pos:end="353:32">(<expr pos:start="353:9" pos:end="353:31"><name pos:start="353:9" pos:end="353:18"><name pos:start="353:9" pos:end="353:10">tb</name><operator pos:start="353:11" pos:end="353:12">-&gt;</operator><name pos:start="353:13" pos:end="353:18">cflags</name></name> <operator pos:start="353:20" pos:end="353:20">&amp;</operator> <name pos:start="353:22" pos:end="353:31">CF_LAST_IO</name></expr>)</condition> <block pos:start="353:34" pos:end="367:5">{<block_content pos:start="355:9" pos:end="365:21">

        <if_stmt pos:start="355:9" pos:end="363:9"><if pos:start="355:9" pos:end="363:9">if <condition pos:start="355:12" pos:end="355:24">(<expr pos:start="355:13" pos:end="355:23"><name pos:start="355:13" pos:end="355:23"><name pos:start="355:13" pos:end="355:14">dc</name><operator pos:start="355:15" pos:end="355:16">-&gt;</operator><name pos:start="355:17" pos:end="355:23">condjmp</name></name></expr>)</condition> <block pos:start="355:26" pos:end="363:9">{<block_content pos:start="361:13" pos:end="361:67">

            <comment type="block" pos:start="357:13" pos:end="359:24">/* FIXME:  This can theoretically happen with self-modifying

               code.  */</comment>

            <expr_stmt pos:start="361:13" pos:end="361:67"><expr pos:start="361:13" pos:end="361:66"><call pos:start="361:13" pos:end="361:66"><name pos:start="361:13" pos:end="361:21">cpu_abort</name><argument_list pos:start="361:22" pos:end="361:66">(<argument pos:start="361:23" pos:end="361:25"><expr pos:start="361:23" pos:end="361:25"><name pos:start="361:23" pos:end="361:25">env</name></expr></argument>, <argument pos:start="361:28" pos:end="361:65"><expr pos:start="361:28" pos:end="361:65"><literal type="string" pos:start="361:28" pos:end="361:65">"IO on conditional branch instruction"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="365:9" pos:end="365:21"><expr pos:start="365:9" pos:end="365:20"><call pos:start="365:9" pos:end="365:20"><name pos:start="365:9" pos:end="365:18">gen_io_end</name><argument_list pos:start="365:19" pos:end="365:20">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="371:5" pos:end="375:32">/* At this stage dc-&gt;condjmp will only be set when the skipped

       instruction was a conditional branch or trap, and the PC has

       already been written.  */</comment>

    <if_stmt pos:start="377:5" pos:end="495:5"><if pos:start="377:5" pos:end="423:5">if <condition pos:start="377:8" pos:end="377:42">(<expr pos:start="377:9" pos:end="377:41"><call pos:start="377:9" pos:end="377:41"><name pos:start="377:9" pos:end="377:16">unlikely</name><argument_list pos:start="377:17" pos:end="377:41">(<argument pos:start="377:18" pos:end="377:40"><expr pos:start="377:18" pos:end="377:40"><name pos:start="377:18" pos:end="377:40"><name pos:start="377:18" pos:end="377:20">env</name><operator pos:start="377:21" pos:end="377:22">-&gt;</operator><name pos:start="377:23" pos:end="377:40">singlestep_enabled</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="377:44" pos:end="423:5">{<block_content pos:start="381:9" pos:end="421:9">

        <comment type="block" pos:start="379:9" pos:end="379:72">/* Make sure the pc is updated, and raise a debug exception.  */</comment>

        <if_stmt pos:start="381:9" pos:end="397:9"><if pos:start="381:9" pos:end="397:9">if <condition pos:start="381:12" pos:end="381:24">(<expr pos:start="381:13" pos:end="381:23"><name pos:start="381:13" pos:end="381:23"><name pos:start="381:13" pos:end="381:14">dc</name><operator pos:start="381:15" pos:end="381:16">-&gt;</operator><name pos:start="381:17" pos:end="381:23">condjmp</name></name></expr>)</condition> <block pos:start="381:26" pos:end="397:9">{<block_content pos:start="383:13" pos:end="395:41">

            <expr_stmt pos:start="383:13" pos:end="383:33"><expr pos:start="383:13" pos:end="383:32"><call pos:start="383:13" pos:end="383:32"><name pos:start="383:13" pos:end="383:28">gen_set_condexec</name><argument_list pos:start="383:29" pos:end="383:32">(<argument pos:start="383:30" pos:end="383:31"><expr pos:start="383:30" pos:end="383:31"><name pos:start="383:30" pos:end="383:31">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="385:13" pos:end="393:13"><if pos:start="385:13" pos:end="389:13">if <condition pos:start="385:16" pos:end="385:40">(<expr pos:start="385:17" pos:end="385:39"><name pos:start="385:17" pos:end="385:26"><name pos:start="385:17" pos:end="385:18">dc</name><operator pos:start="385:19" pos:end="385:20">-&gt;</operator><name pos:start="385:21" pos:end="385:26">is_jmp</name></name> <operator pos:start="385:28" pos:end="385:29">==</operator> <name pos:start="385:31" pos:end="385:39">DISAS_SWI</name></expr>)</condition> <block pos:start="385:42" pos:end="389:13">{<block_content pos:start="387:17" pos:end="387:40">

                <expr_stmt pos:start="387:17" pos:end="387:40"><expr pos:start="387:17" pos:end="387:39"><call pos:start="387:17" pos:end="387:39"><name pos:start="387:17" pos:end="387:29">gen_exception</name><argument_list pos:start="387:30" pos:end="387:39">(<argument pos:start="387:31" pos:end="387:38"><expr pos:start="387:31" pos:end="387:38"><name pos:start="387:31" pos:end="387:38">EXCP_SWI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="389:15" pos:end="393:13">else <block pos:start="389:20" pos:end="393:13">{<block_content pos:start="391:17" pos:end="391:42">

                <expr_stmt pos:start="391:17" pos:end="391:42"><expr pos:start="391:17" pos:end="391:41"><call pos:start="391:17" pos:end="391:41"><name pos:start="391:17" pos:end="391:29">gen_exception</name><argument_list pos:start="391:30" pos:end="391:41">(<argument pos:start="391:31" pos:end="391:40"><expr pos:start="391:31" pos:end="391:40"><name pos:start="391:31" pos:end="391:40">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="395:13" pos:end="395:41"><expr pos:start="395:13" pos:end="395:40"><call pos:start="395:13" pos:end="395:40"><name pos:start="395:13" pos:end="395:25">gen_set_label</name><argument_list pos:start="395:26" pos:end="395:40">(<argument pos:start="395:27" pos:end="395:39"><expr pos:start="395:27" pos:end="395:39"><name pos:start="395:27" pos:end="395:39"><name pos:start="395:27" pos:end="395:28">dc</name><operator pos:start="395:29" pos:end="395:30">-&gt;</operator><name pos:start="395:31" pos:end="395:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="399:9" pos:end="405:9"><if pos:start="399:9" pos:end="405:9">if <condition pos:start="399:12" pos:end="399:39">(<expr pos:start="399:13" pos:end="399:38"><name pos:start="399:13" pos:end="399:23"><name pos:start="399:13" pos:end="399:14">dc</name><operator pos:start="399:15" pos:end="399:16">-&gt;</operator><name pos:start="399:17" pos:end="399:23">condjmp</name></name> <operator pos:start="399:25" pos:end="399:26">||</operator> <operator pos:start="399:28" pos:end="399:28">!</operator><name pos:start="399:29" pos:end="399:38"><name pos:start="399:29" pos:end="399:30">dc</name><operator pos:start="399:31" pos:end="399:32">-&gt;</operator><name pos:start="399:33" pos:end="399:38">is_jmp</name></name></expr>)</condition> <block pos:start="399:41" pos:end="405:9">{<block_content pos:start="401:13" pos:end="403:28">

            <expr_stmt pos:start="401:13" pos:end="401:34"><expr pos:start="401:13" pos:end="401:33"><call pos:start="401:13" pos:end="401:33"><name pos:start="401:13" pos:end="401:25">gen_set_pc_im</name><argument_list pos:start="401:26" pos:end="401:33">(<argument pos:start="401:27" pos:end="401:32"><expr pos:start="401:27" pos:end="401:32"><name pos:start="401:27" pos:end="401:32"><name pos:start="401:27" pos:end="401:28">dc</name><operator pos:start="401:29" pos:end="401:30">-&gt;</operator><name pos:start="401:31" pos:end="401:32">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="403:13" pos:end="403:28"><expr pos:start="403:13" pos:end="403:27"><name pos:start="403:13" pos:end="403:23"><name pos:start="403:13" pos:end="403:14">dc</name><operator pos:start="403:15" pos:end="403:16">-&gt;</operator><name pos:start="403:17" pos:end="403:23">condjmp</name></name> <operator pos:start="403:25" pos:end="403:25">=</operator> <literal type="number" pos:start="403:27" pos:end="403:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="407:9" pos:end="407:29"><expr pos:start="407:9" pos:end="407:28"><call pos:start="407:9" pos:end="407:28"><name pos:start="407:9" pos:end="407:24">gen_set_condexec</name><argument_list pos:start="407:25" pos:end="407:28">(<argument pos:start="407:26" pos:end="407:27"><expr pos:start="407:26" pos:end="407:27"><name pos:start="407:26" pos:end="407:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="409:9" pos:end="421:9"><if pos:start="409:9" pos:end="413:9">if <condition pos:start="409:12" pos:end="409:52">(<expr pos:start="409:13" pos:end="409:51"><name pos:start="409:13" pos:end="409:22"><name pos:start="409:13" pos:end="409:14">dc</name><operator pos:start="409:15" pos:end="409:16">-&gt;</operator><name pos:start="409:17" pos:end="409:22">is_jmp</name></name> <operator pos:start="409:24" pos:end="409:25">==</operator> <name pos:start="409:27" pos:end="409:35">DISAS_SWI</name> <operator pos:start="409:37" pos:end="409:38">&amp;&amp;</operator> <operator pos:start="409:40" pos:end="409:40">!</operator><name pos:start="409:41" pos:end="409:51"><name pos:start="409:41" pos:end="409:42">dc</name><operator pos:start="409:43" pos:end="409:44">-&gt;</operator><name pos:start="409:45" pos:end="409:51">condjmp</name></name></expr>)</condition> <block pos:start="409:54" pos:end="413:9">{<block_content pos:start="411:13" pos:end="411:36">

            <expr_stmt pos:start="411:13" pos:end="411:36"><expr pos:start="411:13" pos:end="411:35"><call pos:start="411:13" pos:end="411:35"><name pos:start="411:13" pos:end="411:25">gen_exception</name><argument_list pos:start="411:26" pos:end="411:35">(<argument pos:start="411:27" pos:end="411:34"><expr pos:start="411:27" pos:end="411:34"><name pos:start="411:27" pos:end="411:34">EXCP_SWI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="413:11" pos:end="421:9">else <block pos:start="413:16" pos:end="421:9">{<block_content pos:start="419:13" pos:end="419:38">

            <comment type="block" pos:start="415:13" pos:end="417:27">/* FIXME: Single stepping a WFI insn will not halt

               the CPU.  */</comment>

            <expr_stmt pos:start="419:13" pos:end="419:38"><expr pos:start="419:13" pos:end="419:37"><call pos:start="419:13" pos:end="419:37"><name pos:start="419:13" pos:end="419:25">gen_exception</name><argument_list pos:start="419:26" pos:end="419:37">(<argument pos:start="419:27" pos:end="419:36"><expr pos:start="419:27" pos:end="419:36"><name pos:start="419:27" pos:end="419:36">EXCP_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="423:7" pos:end="495:5">else <block pos:start="423:12" pos:end="495:5">{<block_content pos:start="441:9" pos:end="493:9">

        <comment type="block" pos:start="425:9" pos:end="439:11">/* While branches must always occur at the end of an IT block,

           there are a few other things that can cause us to terminate

           the TB in the middel of an IT block:

            - Exception generating instructions (bkpt, swi, undefined).

            - Page boundaries.

            - Hardware watchpoints.

           Hardware breakpoints have already been handled and skip this code.

         */</comment>

        <expr_stmt pos:start="441:9" pos:end="441:29"><expr pos:start="441:9" pos:end="441:28"><call pos:start="441:9" pos:end="441:28"><name pos:start="441:9" pos:end="441:24">gen_set_condexec</name><argument_list pos:start="441:25" pos:end="441:28">(<argument pos:start="441:26" pos:end="441:27"><expr pos:start="441:26" pos:end="441:27"><name pos:start="441:26" pos:end="441:27">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch pos:start="443:9" pos:end="481:9">switch<condition pos:start="443:15" pos:end="443:26">(<expr pos:start="443:16" pos:end="443:25"><name pos:start="443:16" pos:end="443:25"><name pos:start="443:16" pos:end="443:17">dc</name><operator pos:start="443:18" pos:end="443:19">-&gt;</operator><name pos:start="443:20" pos:end="443:25">is_jmp</name></name></expr>)</condition> <block pos:start="443:28" pos:end="481:9">{<block_content pos:start="445:9" pos:end="479:18">

        <case pos:start="445:9" pos:end="445:24">case <expr pos:start="445:14" pos:end="445:23"><name pos:start="445:14" pos:end="445:23">DISAS_NEXT</name></expr>:</case>

            <expr_stmt pos:start="447:13" pos:end="447:39"><expr pos:start="447:13" pos:end="447:38"><call pos:start="447:13" pos:end="447:38"><name pos:start="447:13" pos:end="447:23">gen_goto_tb</name><argument_list pos:start="447:24" pos:end="447:38">(<argument pos:start="447:25" pos:end="447:26"><expr pos:start="447:25" pos:end="447:26"><name pos:start="447:25" pos:end="447:26">dc</name></expr></argument>, <argument pos:start="447:29" pos:end="447:29"><expr pos:start="447:29" pos:end="447:29"><literal type="number" pos:start="447:29" pos:end="447:29">1</literal></expr></argument>, <argument pos:start="447:32" pos:end="447:37"><expr pos:start="447:32" pos:end="447:37"><name pos:start="447:32" pos:end="447:37"><name pos:start="447:32" pos:end="447:33">dc</name><operator pos:start="447:34" pos:end="447:35">-&gt;</operator><name pos:start="447:36" pos:end="447:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="449:13" pos:end="449:18">break;</break>

        <default pos:start="451:9" pos:end="451:16">default:</default>

        <case pos:start="453:9" pos:end="453:24">case <expr pos:start="453:14" pos:end="453:23"><name pos:start="453:14" pos:end="453:23">DISAS_JUMP</name></expr>:</case>

        <case pos:start="455:9" pos:end="455:26">case <expr pos:start="455:14" pos:end="455:25"><name pos:start="455:14" pos:end="455:25">DISAS_UPDATE</name></expr>:</case>

            <comment type="block" pos:start="457:13" pos:end="457:79">/* indicate that the hash table must be used to find the next TB */</comment>

            <expr_stmt pos:start="459:13" pos:end="459:31"><expr pos:start="459:13" pos:end="459:30"><call pos:start="459:13" pos:end="459:30"><name pos:start="459:13" pos:end="459:27">tcg_gen_exit_tb</name><argument_list pos:start="459:28" pos:end="459:30">(<argument pos:start="459:29" pos:end="459:29"><expr pos:start="459:29" pos:end="459:29"><literal type="number" pos:start="459:29" pos:end="459:29">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="461:13" pos:end="461:18">break;</break>

        <case pos:start="463:9" pos:end="463:27">case <expr pos:start="463:14" pos:end="463:26"><name pos:start="463:14" pos:end="463:26">DISAS_TB_JUMP</name></expr>:</case>

            <comment type="block" pos:start="465:13" pos:end="465:42">/* nothing more to generate */</comment>

            <break pos:start="467:13" pos:end="467:18">break;</break>

        <case pos:start="469:9" pos:end="469:23">case <expr pos:start="469:14" pos:end="469:22"><name pos:start="469:14" pos:end="469:22">DISAS_WFI</name></expr>:</case>

            <expr_stmt pos:start="471:13" pos:end="471:29"><expr pos:start="471:13" pos:end="471:28"><call pos:start="471:13" pos:end="471:28"><name pos:start="471:13" pos:end="471:26">gen_helper_wfi</name><argument_list pos:start="471:27" pos:end="471:28">()</argument_list></call></expr>;</expr_stmt>

            <break pos:start="473:13" pos:end="473:18">break;</break>

        <case pos:start="475:9" pos:end="475:23">case <expr pos:start="475:14" pos:end="475:22"><name pos:start="475:14" pos:end="475:22">DISAS_SWI</name></expr>:</case>

            <expr_stmt pos:start="477:13" pos:end="477:36"><expr pos:start="477:13" pos:end="477:35"><call pos:start="477:13" pos:end="477:35"><name pos:start="477:13" pos:end="477:25">gen_exception</name><argument_list pos:start="477:26" pos:end="477:35">(<argument pos:start="477:27" pos:end="477:34"><expr pos:start="477:27" pos:end="477:34"><name pos:start="477:27" pos:end="477:34">EXCP_SWI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="479:13" pos:end="479:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="483:9" pos:end="493:9"><if pos:start="483:9" pos:end="493:9">if <condition pos:start="483:12" pos:end="483:24">(<expr pos:start="483:13" pos:end="483:23"><name pos:start="483:13" pos:end="483:23"><name pos:start="483:13" pos:end="483:14">dc</name><operator pos:start="483:15" pos:end="483:16">-&gt;</operator><name pos:start="483:17" pos:end="483:23">condjmp</name></name></expr>)</condition> <block pos:start="483:26" pos:end="493:9">{<block_content pos:start="485:13" pos:end="491:28">

            <expr_stmt pos:start="485:13" pos:end="485:41"><expr pos:start="485:13" pos:end="485:40"><call pos:start="485:13" pos:end="485:40"><name pos:start="485:13" pos:end="485:25">gen_set_label</name><argument_list pos:start="485:26" pos:end="485:40">(<argument pos:start="485:27" pos:end="485:39"><expr pos:start="485:27" pos:end="485:39"><name pos:start="485:27" pos:end="485:39"><name pos:start="485:27" pos:end="485:28">dc</name><operator pos:start="485:29" pos:end="485:30">-&gt;</operator><name pos:start="485:31" pos:end="485:39">condlabel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="487:13" pos:end="487:33"><expr pos:start="487:13" pos:end="487:32"><call pos:start="487:13" pos:end="487:32"><name pos:start="487:13" pos:end="487:28">gen_set_condexec</name><argument_list pos:start="487:29" pos:end="487:32">(<argument pos:start="487:30" pos:end="487:31"><expr pos:start="487:30" pos:end="487:31"><name pos:start="487:30" pos:end="487:31">dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="489:13" pos:end="489:39"><expr pos:start="489:13" pos:end="489:38"><call pos:start="489:13" pos:end="489:38"><name pos:start="489:13" pos:end="489:23">gen_goto_tb</name><argument_list pos:start="489:24" pos:end="489:38">(<argument pos:start="489:25" pos:end="489:26"><expr pos:start="489:25" pos:end="489:26"><name pos:start="489:25" pos:end="489:26">dc</name></expr></argument>, <argument pos:start="489:29" pos:end="489:29"><expr pos:start="489:29" pos:end="489:29"><literal type="number" pos:start="489:29" pos:end="489:29">1</literal></expr></argument>, <argument pos:start="489:32" pos:end="489:37"><expr pos:start="489:32" pos:end="489:37"><name pos:start="489:32" pos:end="489:37"><name pos:start="489:32" pos:end="489:33">dc</name><operator pos:start="489:34" pos:end="489:35">-&gt;</operator><name pos:start="489:36" pos:end="489:37">pc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="491:13" pos:end="491:28"><expr pos:start="491:13" pos:end="491:27"><name pos:start="491:13" pos:end="491:23"><name pos:start="491:13" pos:end="491:14">dc</name><operator pos:start="491:15" pos:end="491:16">-&gt;</operator><name pos:start="491:17" pos:end="491:23">condjmp</name></name> <operator pos:start="491:25" pos:end="491:25">=</operator> <literal type="number" pos:start="491:27" pos:end="491:27">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="499:1" pos:end="499:16"><name pos:start="499:1" pos:end="499:15">done_generating</name>:</label>

    <expr_stmt pos:start="501:5" pos:end="501:34"><expr pos:start="501:5" pos:end="501:33"><call pos:start="501:5" pos:end="501:33"><name pos:start="501:5" pos:end="501:18">gen_icount_end</name><argument_list pos:start="501:19" pos:end="501:33">(<argument pos:start="501:20" pos:end="501:21"><expr pos:start="501:20" pos:end="501:21"><name pos:start="501:20" pos:end="501:21">tb</name></expr></argument>, <argument pos:start="501:24" pos:end="501:32"><expr pos:start="501:24" pos:end="501:32"><name pos:start="501:24" pos:end="501:32">num_insns</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="503:5" pos:end="508:0"><expr pos:start="503:5" pos:end="503:31"><operator pos:start="503:5" pos:end="503:5">*</operator><name pos:start="503:6" pos:end="503:16">gen_opc_ptr</name> <operator pos:start="503:18" pos:end="503:18">=</operator> <name pos:start="503:20" pos:end="503:31">INDEX_op_end</name></expr>;</expr_stmt>



<cpp:ifdef pos:start="507:1" pos:end="507:18">#<cpp:directive pos:start="507:2" pos:end="507:6">ifdef</cpp:directive> <name pos:start="507:8" pos:end="507:18">DEBUG_DISAS</name></cpp:ifdef>

    <if_stmt pos:start="509:5" pos:end="522:0"><if pos:start="509:5" pos:end="522:0">if <condition pos:start="509:8" pos:end="509:46">(<expr pos:start="509:9" pos:end="509:45"><call pos:start="509:9" pos:end="509:45"><name pos:start="509:9" pos:end="509:26">qemu_loglevel_mask</name><argument_list pos:start="509:27" pos:end="509:45">(<argument pos:start="509:28" pos:end="509:44"><expr pos:start="509:28" pos:end="509:44"><name pos:start="509:28" pos:end="509:44">CPU_LOG_TB_IN_ASM</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="509:48" pos:end="522:0">{<block_content pos:start="511:9" pos:end="517:23">

        <expr_stmt pos:start="511:9" pos:end="511:39"><expr pos:start="511:9" pos:end="511:38"><call pos:start="511:9" pos:end="511:38"><name pos:start="511:9" pos:end="511:16">qemu_log</name><argument_list pos:start="511:17" pos:end="511:38">(<argument pos:start="511:18" pos:end="511:37"><expr pos:start="511:18" pos:end="511:37"><literal type="string" pos:start="511:18" pos:end="511:37">"----------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="513:9" pos:end="513:54"><expr pos:start="513:9" pos:end="513:53"><call pos:start="513:9" pos:end="513:53"><name pos:start="513:9" pos:end="513:16">qemu_log</name><argument_list pos:start="513:17" pos:end="513:53">(<argument pos:start="513:18" pos:end="513:27"><expr pos:start="513:18" pos:end="513:27"><literal type="string" pos:start="513:18" pos:end="513:27">"IN: %s\n"</literal></expr></argument>, <argument pos:start="513:30" pos:end="513:52"><expr pos:start="513:30" pos:end="513:52"><call pos:start="513:30" pos:end="513:52"><name pos:start="513:30" pos:end="513:42">lookup_symbol</name><argument_list pos:start="513:43" pos:end="513:52">(<argument pos:start="513:44" pos:end="513:51"><expr pos:start="513:44" pos:end="513:51"><name pos:start="513:44" pos:end="513:51">pc_start</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="515:9" pos:end="515:65"><expr pos:start="515:9" pos:end="515:64"><call pos:start="515:9" pos:end="515:64"><name pos:start="515:9" pos:end="515:24">log_target_disas</name><argument_list pos:start="515:25" pos:end="515:64">(<argument pos:start="515:26" pos:end="515:33"><expr pos:start="515:26" pos:end="515:33"><name pos:start="515:26" pos:end="515:33">pc_start</name></expr></argument>, <argument pos:start="515:36" pos:end="515:52"><expr pos:start="515:36" pos:end="515:52"><name pos:start="515:36" pos:end="515:41"><name pos:start="515:36" pos:end="515:37">dc</name><operator pos:start="515:38" pos:end="515:39">-&gt;</operator><name pos:start="515:40" pos:end="515:41">pc</name></name> <operator pos:start="515:43" pos:end="515:43">-</operator> <name pos:start="515:45" pos:end="515:52">pc_start</name></expr></argument>, <argument pos:start="515:55" pos:end="515:63"><expr pos:start="515:55" pos:end="515:63"><name pos:start="515:55" pos:end="515:63"><name pos:start="515:55" pos:end="515:56">dc</name><operator pos:start="515:57" pos:end="515:58">-&gt;</operator><name pos:start="515:59" pos:end="515:63">thumb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="517:9" pos:end="517:23"><expr pos:start="517:9" pos:end="517:22"><call pos:start="517:9" pos:end="517:22"><name pos:start="517:9" pos:end="517:16">qemu_log</name><argument_list pos:start="517:17" pos:end="517:22">(<argument pos:start="517:18" pos:end="517:21"><expr pos:start="517:18" pos:end="517:21"><literal type="string" pos:start="517:18" pos:end="517:21">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="521:1" pos:end="521:6">#<cpp:directive pos:start="521:2" pos:end="521:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="523:5" pos:end="539:5"><if pos:start="523:5" pos:end="533:5">if <condition pos:start="523:8" pos:end="523:18">(<expr pos:start="523:9" pos:end="523:17"><name pos:start="523:9" pos:end="523:17">search_pc</name></expr>)</condition> <block pos:start="523:20" pos:end="533:5">{<block_content pos:start="525:9" pos:end="531:42">

        <expr_stmt pos:start="525:9" pos:end="525:38"><expr pos:start="525:9" pos:end="525:37"><name pos:start="525:9" pos:end="525:9">j</name> <operator pos:start="525:11" pos:end="525:11">=</operator> <name pos:start="525:13" pos:end="525:23">gen_opc_ptr</name> <operator pos:start="525:25" pos:end="525:25">-</operator> <name pos:start="525:27" pos:end="525:37">gen_opc_buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="527:9" pos:end="527:13"><expr pos:start="527:9" pos:end="527:12"><name pos:start="527:9" pos:end="527:10">lj</name><operator pos:start="527:11" pos:end="527:12">++</operator></expr>;</expr_stmt>

        <while pos:start="529:9" pos:end="531:42">while <condition pos:start="529:15" pos:end="529:23">(<expr pos:start="529:16" pos:end="529:22"><name pos:start="529:16" pos:end="529:17">lj</name> <operator pos:start="529:19" pos:end="529:20">&lt;=</operator> <name pos:start="529:22" pos:end="529:22">j</name></expr>)</condition><block type="pseudo" pos:start="531:13" pos:end="531:42"><block_content pos:start="531:13" pos:end="531:42">

            <expr_stmt pos:start="531:13" pos:end="531:42"><expr pos:start="531:13" pos:end="531:41"><name pos:start="531:13" pos:end="531:37"><name pos:start="531:13" pos:end="531:31">gen_opc_instr_start</name><index pos:start="531:32" pos:end="531:37">[<expr pos:start="531:33" pos:end="531:36"><name pos:start="531:33" pos:end="531:34">lj</name><operator pos:start="531:35" pos:end="531:36">++</operator></expr>]</index></name> <operator pos:start="531:39" pos:end="531:39">=</operator> <literal type="number" pos:start="531:41" pos:end="531:41">0</literal></expr>;</expr_stmt></block_content></block></while>

    </block_content>}</block></if> <else pos:start="533:7" pos:end="539:5">else <block pos:start="533:12" pos:end="539:5">{<block_content pos:start="535:9" pos:end="537:31">

        <expr_stmt pos:start="535:9" pos:end="535:37"><expr pos:start="535:9" pos:end="535:36"><name pos:start="535:9" pos:end="535:16"><name pos:start="535:9" pos:end="535:10">tb</name><operator pos:start="535:11" pos:end="535:12">-&gt;</operator><name pos:start="535:13" pos:end="535:16">size</name></name> <operator pos:start="535:18" pos:end="535:18">=</operator> <name pos:start="535:20" pos:end="535:25"><name pos:start="535:20" pos:end="535:21">dc</name><operator pos:start="535:22" pos:end="535:23">-&gt;</operator><name pos:start="535:24" pos:end="535:25">pc</name></name> <operator pos:start="535:27" pos:end="535:27">-</operator> <name pos:start="535:29" pos:end="535:36">pc_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="537:9" pos:end="537:31"><expr pos:start="537:9" pos:end="537:30"><name pos:start="537:9" pos:end="537:18"><name pos:start="537:9" pos:end="537:10">tb</name><operator pos:start="537:11" pos:end="537:12">-&gt;</operator><name pos:start="537:13" pos:end="537:18">icount</name></name> <operator pos:start="537:20" pos:end="537:20">=</operator> <name pos:start="537:22" pos:end="537:30">num_insns</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
