<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6045.c" pos:tabs="8"><function pos:start="1:1" pos:end="127:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:30">virtqueue_get_avail_bytes</name><parameter_list pos:start="1:31" pos:end="3:55">(<parameter pos:start="1:32" pos:end="1:44"><decl pos:start="1:32" pos:end="1:44"><type pos:start="1:32" pos:end="1:44"><name pos:start="1:32" pos:end="1:40">VirtQueue</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">vq</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:68"><decl pos:start="1:47" pos:end="1:68"><type pos:start="1:47" pos:end="1:68"><name pos:start="1:47" pos:end="1:54">unsigned</name> <name pos:start="1:56" pos:end="1:58">int</name> <modifier pos:start="1:60" pos:end="1:60">*</modifier></type><name pos:start="1:61" pos:end="1:68">in_bytes</name></decl></parameter>,

                               <parameter pos:start="3:32" pos:end="3:54"><decl pos:start="3:32" pos:end="3:54"><type pos:start="3:32" pos:end="3:54"><name pos:start="3:32" pos:end="3:39">unsigned</name> <name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">out_bytes</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="127:1">{<block_content pos:start="7:5" pos:end="125:5">

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:16">int</name></type> <name pos:start="7:18" pos:end="7:20">idx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:49"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:27">total_bufs</name></decl>, <decl pos:start="9:30" pos:end="9:37"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:30" pos:end="9:37">in_total</name></decl>, <decl pos:start="9:40" pos:end="9:48"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:40" pos:end="9:48">out_total</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:29"><expr pos:start="13:5" pos:end="13:28"><name pos:start="13:5" pos:end="13:7">idx</name> <operator pos:start="13:9" pos:end="13:9">=</operator> <name pos:start="13:11" pos:end="13:28"><name pos:start="13:11" pos:end="13:12">vq</name><operator pos:start="13:13" pos:end="13:14">-&gt;</operator><name pos:start="13:15" pos:end="13:28">last_avail_idx</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:42"><expr pos:start="17:5" pos:end="17:41"><name pos:start="17:5" pos:end="17:14">total_bufs</name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:25">in_total</name> <operator pos:start="17:27" pos:end="17:27">=</operator> <name pos:start="17:29" pos:end="17:37">out_total</name> <operator pos:start="17:39" pos:end="17:39">=</operator> <literal type="number" pos:start="17:41" pos:end="17:41">0</literal></expr>;</expr_stmt>

    <while pos:start="19:5" pos:end="113:5">while <condition pos:start="19:11" pos:end="19:40">(<expr pos:start="19:12" pos:end="19:39"><call pos:start="19:12" pos:end="19:39"><name pos:start="19:12" pos:end="19:30">virtqueue_num_heads</name><argument_list pos:start="19:31" pos:end="19:39">(<argument pos:start="19:32" pos:end="19:33"><expr pos:start="19:32" pos:end="19:33"><name pos:start="19:32" pos:end="19:33">vq</name></expr></argument>, <argument pos:start="19:36" pos:end="19:38"><expr pos:start="19:36" pos:end="19:38"><name pos:start="19:36" pos:end="19:38">idx</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="19:42" pos:end="113:5">{<block_content pos:start="21:9" pos:end="111:25">

        <decl_stmt pos:start="21:9" pos:end="21:49"><decl pos:start="21:9" pos:end="21:24"><type pos:start="21:9" pos:end="21:20"><name pos:start="21:9" pos:end="21:16">unsigned</name> <name pos:start="21:18" pos:end="21:20">int</name></type> <name pos:start="21:22" pos:end="21:24">max</name></decl>, <decl pos:start="21:27" pos:end="21:34"><type ref="prev" pos:start="21:9" pos:end="21:20"/><name pos:start="21:27" pos:end="21:34">num_bufs</name></decl>, <decl pos:start="21:37" pos:end="21:48"><type ref="prev" pos:start="21:9" pos:end="21:20"/><name pos:start="21:37" pos:end="21:44">indirect</name> <init pos:start="21:46" pos:end="21:48">= <expr pos:start="21:48" pos:end="21:48"><literal type="number" pos:start="21:48" pos:end="21:48">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="23:9" pos:end="23:23"><decl pos:start="23:9" pos:end="23:22"><type pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:14">hwaddr</name></type> <name pos:start="23:16" pos:end="23:22">desc_pa</name></decl>;</decl_stmt>

        <decl_stmt pos:start="25:9" pos:end="25:14"><decl pos:start="25:9" pos:end="25:13"><type pos:start="25:9" pos:end="25:11"><name pos:start="25:9" pos:end="25:11">int</name></type> <name pos:start="25:13" pos:end="25:13">i</name></decl>;</decl_stmt>



        <expr_stmt pos:start="29:9" pos:end="29:28"><expr pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:11">max</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <name pos:start="29:15" pos:end="29:27"><name pos:start="29:15" pos:end="29:16">vq</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:23">vring</name><operator pos:start="29:24" pos:end="29:24">.</operator><name pos:start="29:25" pos:end="29:27">num</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="31:30"><expr pos:start="31:9" pos:end="31:29"><name pos:start="31:9" pos:end="31:16">num_bufs</name> <operator pos:start="31:18" pos:end="31:18">=</operator> <name pos:start="31:20" pos:end="31:29">total_bufs</name></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:42"><expr pos:start="33:9" pos:end="33:41"><name pos:start="33:9" pos:end="33:9">i</name> <operator pos:start="33:11" pos:end="33:11">=</operator> <call pos:start="33:13" pos:end="33:41"><name pos:start="33:13" pos:end="33:30">virtqueue_get_head</name><argument_list pos:start="33:31" pos:end="33:41">(<argument pos:start="33:32" pos:end="33:33"><expr pos:start="33:32" pos:end="33:33"><name pos:start="33:32" pos:end="33:33">vq</name></expr></argument>, <argument pos:start="33:36" pos:end="33:40"><expr pos:start="33:36" pos:end="33:40"><name pos:start="33:36" pos:end="33:38">idx</name><operator pos:start="33:39" pos:end="33:40">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:33"><expr pos:start="35:9" pos:end="35:32"><name pos:start="35:9" pos:end="35:15">desc_pa</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <name pos:start="35:19" pos:end="35:32"><name pos:start="35:19" pos:end="35:20">vq</name><operator pos:start="35:21" pos:end="35:22">-&gt;</operator><name pos:start="35:23" pos:end="35:27">vring</name><operator pos:start="35:28" pos:end="35:28">.</operator><name pos:start="35:29" pos:end="35:32">desc</name></name></expr>;</expr_stmt>



        <if_stmt pos:start="39:9" pos:end="73:9"><if pos:start="39:9" pos:end="73:9">if <condition pos:start="39:12" pos:end="39:65">(<expr pos:start="39:13" pos:end="39:64"><call pos:start="39:13" pos:end="39:40"><name pos:start="39:13" pos:end="39:28">vring_desc_flags</name><argument_list pos:start="39:29" pos:end="39:40">(<argument pos:start="39:30" pos:end="39:36"><expr pos:start="39:30" pos:end="39:36"><name pos:start="39:30" pos:end="39:36">desc_pa</name></expr></argument>, <argument pos:start="39:39" pos:end="39:39"><expr pos:start="39:39" pos:end="39:39"><name pos:start="39:39" pos:end="39:39">i</name></expr></argument>)</argument_list></call> <operator pos:start="39:42" pos:end="39:42">&amp;</operator> <name pos:start="39:44" pos:end="39:64">VRING_DESC_F_INDIRECT</name></expr>)</condition> <block pos:start="39:67" pos:end="73:9">{<block_content pos:start="41:13" pos:end="71:50">

            <if_stmt pos:start="41:13" pos:end="47:13"><if pos:start="41:13" pos:end="47:13">if <condition pos:start="41:16" pos:end="41:63">(<expr pos:start="41:17" pos:end="41:62"><call pos:start="41:17" pos:end="41:42"><name pos:start="41:17" pos:end="41:30">vring_desc_len</name><argument_list pos:start="41:31" pos:end="41:42">(<argument pos:start="41:32" pos:end="41:38"><expr pos:start="41:32" pos:end="41:38"><name pos:start="41:32" pos:end="41:38">desc_pa</name></expr></argument>, <argument pos:start="41:41" pos:end="41:41"><expr pos:start="41:41" pos:end="41:41"><name pos:start="41:41" pos:end="41:41">i</name></expr></argument>)</argument_list></call> <operator pos:start="41:44" pos:end="41:44">%</operator> <sizeof pos:start="41:46" pos:end="41:62">sizeof<argument_list pos:start="41:52" pos:end="41:62">(<argument pos:start="41:53" pos:end="41:61"><expr pos:start="41:53" pos:end="41:61"><name pos:start="41:53" pos:end="41:61">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block pos:start="41:65" pos:end="47:13">{<block_content pos:start="43:17" pos:end="45:24">

                <expr_stmt pos:start="43:17" pos:end="43:71"><expr pos:start="43:17" pos:end="43:70"><call pos:start="43:17" pos:end="43:70"><name pos:start="43:17" pos:end="43:28">error_report</name><argument_list pos:start="43:29" pos:end="43:70">(<argument pos:start="43:30" pos:end="43:69"><expr pos:start="43:30" pos:end="43:69"><literal type="string" pos:start="43:30" pos:end="43:69">"Invalid size for indirect buffer table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="45:17" pos:end="45:24"><expr pos:start="45:17" pos:end="45:23"><call pos:start="45:17" pos:end="45:23"><name pos:start="45:17" pos:end="45:20">exit</name><argument_list pos:start="45:21" pos:end="45:23">(<argument pos:start="45:22" pos:end="45:22"><expr pos:start="45:22" pos:end="45:22"><literal type="number" pos:start="45:22" pos:end="45:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="51:13" pos:end="51:72">/* If we've got too many, that implies a descriptor loop. */</comment>

            <if_stmt pos:start="53:13" pos:end="59:13"><if pos:start="53:13" pos:end="59:13">if <condition pos:start="53:16" pos:end="53:32">(<expr pos:start="53:17" pos:end="53:31"><name pos:start="53:17" pos:end="53:24">num_bufs</name> <operator pos:start="53:26" pos:end="53:27">&gt;=</operator> <name pos:start="53:29" pos:end="53:31">max</name></expr>)</condition> <block pos:start="53:34" pos:end="59:13">{<block_content pos:start="55:17" pos:end="57:24">

                <expr_stmt pos:start="55:17" pos:end="55:50"><expr pos:start="55:17" pos:end="55:49"><call pos:start="55:17" pos:end="55:49"><name pos:start="55:17" pos:end="55:28">error_report</name><argument_list pos:start="55:29" pos:end="55:49">(<argument pos:start="55:30" pos:end="55:48"><expr pos:start="55:30" pos:end="55:48"><literal type="string" pos:start="55:30" pos:end="55:48">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:24"><expr pos:start="57:17" pos:end="57:23"><call pos:start="57:17" pos:end="57:23"><name pos:start="57:17" pos:end="57:20">exit</name><argument_list pos:start="57:21" pos:end="57:23">(<argument pos:start="57:22" pos:end="57:22"><expr pos:start="57:22" pos:end="57:22"><literal type="number" pos:start="57:22" pos:end="57:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <comment type="block" pos:start="63:13" pos:end="63:57">/* loop over the indirect descriptor table */</comment>

            <expr_stmt pos:start="65:13" pos:end="65:25"><expr pos:start="65:13" pos:end="65:24"><name pos:start="65:13" pos:end="65:20">indirect</name> <operator pos:start="65:22" pos:end="65:22">=</operator> <literal type="number" pos:start="65:24" pos:end="65:24">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="67:13" pos:end="67:65"><expr pos:start="67:13" pos:end="67:64"><name pos:start="67:13" pos:end="67:15">max</name> <operator pos:start="67:17" pos:end="67:17">=</operator> <call pos:start="67:19" pos:end="67:44"><name pos:start="67:19" pos:end="67:32">vring_desc_len</name><argument_list pos:start="67:33" pos:end="67:44">(<argument pos:start="67:34" pos:end="67:40"><expr pos:start="67:34" pos:end="67:40"><name pos:start="67:34" pos:end="67:40">desc_pa</name></expr></argument>, <argument pos:start="67:43" pos:end="67:43"><expr pos:start="67:43" pos:end="67:43"><name pos:start="67:43" pos:end="67:43">i</name></expr></argument>)</argument_list></call> <operator pos:start="67:46" pos:end="67:46">/</operator> <sizeof pos:start="67:48" pos:end="67:64">sizeof<argument_list pos:start="67:54" pos:end="67:64">(<argument pos:start="67:55" pos:end="67:63"><expr pos:start="67:55" pos:end="67:63"><name pos:start="67:55" pos:end="67:63">VRingDesc</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:29"><expr pos:start="69:13" pos:end="69:28"><name pos:start="69:13" pos:end="69:20">num_bufs</name> <operator pos:start="69:22" pos:end="69:22">=</operator> <name pos:start="69:24" pos:end="69:24">i</name> <operator pos:start="69:26" pos:end="69:26">=</operator> <literal type="number" pos:start="69:28" pos:end="69:28">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:50"><expr pos:start="71:13" pos:end="71:49"><name pos:start="71:13" pos:end="71:19">desc_pa</name> <operator pos:start="71:21" pos:end="71:21">=</operator> <call pos:start="71:23" pos:end="71:49"><name pos:start="71:23" pos:end="71:37">vring_desc_addr</name><argument_list pos:start="71:38" pos:end="71:49">(<argument pos:start="71:39" pos:end="71:45"><expr pos:start="71:39" pos:end="71:45"><name pos:start="71:39" pos:end="71:45">desc_pa</name></expr></argument>, <argument pos:start="71:48" pos:end="71:48"><expr pos:start="71:48" pos:end="71:48"><name pos:start="71:48" pos:end="71:48">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <do pos:start="77:9" pos:end="101:68">do <block pos:start="77:12" pos:end="101:9">{<block_content pos:start="81:13" pos:end="99:13">

            <comment type="block" pos:start="79:13" pos:end="79:72">/* If we've got too many, that implies a descriptor loop. */</comment>

            <if_stmt pos:start="81:13" pos:end="87:13"><if pos:start="81:13" pos:end="87:13">if <condition pos:start="81:16" pos:end="81:33">(<expr pos:start="81:17" pos:end="81:32"><operator pos:start="81:17" pos:end="81:18">++</operator><name pos:start="81:19" pos:end="81:26">num_bufs</name> <operator pos:start="81:28" pos:end="81:28">&gt;</operator> <name pos:start="81:30" pos:end="81:32">max</name></expr>)</condition> <block pos:start="81:35" pos:end="87:13">{<block_content pos:start="83:17" pos:end="85:24">

                <expr_stmt pos:start="83:17" pos:end="83:50"><expr pos:start="83:17" pos:end="83:49"><call pos:start="83:17" pos:end="83:49"><name pos:start="83:17" pos:end="83:28">error_report</name><argument_list pos:start="83:29" pos:end="83:49">(<argument pos:start="83:30" pos:end="83:48"><expr pos:start="83:30" pos:end="83:48"><literal type="string" pos:start="83:30" pos:end="83:48">"Looped descriptor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="85:17" pos:end="85:24"><expr pos:start="85:17" pos:end="85:23"><call pos:start="85:17" pos:end="85:23"><name pos:start="85:17" pos:end="85:20">exit</name><argument_list pos:start="85:21" pos:end="85:23">(<argument pos:start="85:22" pos:end="85:22"><expr pos:start="85:22" pos:end="85:22"><literal type="number" pos:start="85:22" pos:end="85:22">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="91:13" pos:end="99:13"><if pos:start="91:13" pos:end="95:13">if <condition pos:start="91:16" pos:end="91:66">(<expr pos:start="91:17" pos:end="91:65"><call pos:start="91:17" pos:end="91:44"><name pos:start="91:17" pos:end="91:32">vring_desc_flags</name><argument_list pos:start="91:33" pos:end="91:44">(<argument pos:start="91:34" pos:end="91:40"><expr pos:start="91:34" pos:end="91:40"><name pos:start="91:34" pos:end="91:40">desc_pa</name></expr></argument>, <argument pos:start="91:43" pos:end="91:43"><expr pos:start="91:43" pos:end="91:43"><name pos:start="91:43" pos:end="91:43">i</name></expr></argument>)</argument_list></call> <operator pos:start="91:46" pos:end="91:46">&amp;</operator> <name pos:start="91:48" pos:end="91:65">VRING_DESC_F_WRITE</name></expr>)</condition> <block pos:start="91:68" pos:end="95:13">{<block_content pos:start="93:17" pos:end="93:55">

                <expr_stmt pos:start="93:17" pos:end="93:55"><expr pos:start="93:17" pos:end="93:54"><name pos:start="93:17" pos:end="93:24">in_total</name> <operator pos:start="93:26" pos:end="93:27">+=</operator> <call pos:start="93:29" pos:end="93:54"><name pos:start="93:29" pos:end="93:42">vring_desc_len</name><argument_list pos:start="93:43" pos:end="93:54">(<argument pos:start="93:44" pos:end="93:50"><expr pos:start="93:44" pos:end="93:50"><name pos:start="93:44" pos:end="93:50">desc_pa</name></expr></argument>, <argument pos:start="93:53" pos:end="93:53"><expr pos:start="93:53" pos:end="93:53"><name pos:start="93:53" pos:end="93:53">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="95:15" pos:end="99:13">else <block pos:start="95:20" pos:end="99:13">{<block_content pos:start="97:17" pos:end="97:56">

                <expr_stmt pos:start="97:17" pos:end="97:56"><expr pos:start="97:17" pos:end="97:55"><name pos:start="97:17" pos:end="97:25">out_total</name> <operator pos:start="97:27" pos:end="97:28">+=</operator> <call pos:start="97:30" pos:end="97:55"><name pos:start="97:30" pos:end="97:43">vring_desc_len</name><argument_list pos:start="97:44" pos:end="97:55">(<argument pos:start="97:45" pos:end="97:51"><expr pos:start="97:45" pos:end="97:51"><name pos:start="97:45" pos:end="97:51">desc_pa</name></expr></argument>, <argument pos:start="97:54" pos:end="97:54"><expr pos:start="97:54" pos:end="97:54"><name pos:start="97:54" pos:end="97:54">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block> while <condition pos:start="101:17" pos:end="101:67">(<expr pos:start="101:18" pos:end="101:66"><operator pos:start="101:18" pos:end="101:18">(</operator><name pos:start="101:19" pos:end="101:19">i</name> <operator pos:start="101:21" pos:end="101:21">=</operator> <call pos:start="101:23" pos:end="101:58"><name pos:start="101:23" pos:end="101:41">virtqueue_next_desc</name><argument_list pos:start="101:42" pos:end="101:58">(<argument pos:start="101:43" pos:end="101:49"><expr pos:start="101:43" pos:end="101:49"><name pos:start="101:43" pos:end="101:49">desc_pa</name></expr></argument>, <argument pos:start="101:52" pos:end="101:52"><expr pos:start="101:52" pos:end="101:52"><name pos:start="101:52" pos:end="101:52">i</name></expr></argument>, <argument pos:start="101:55" pos:end="101:57"><expr pos:start="101:55" pos:end="101:57"><name pos:start="101:55" pos:end="101:57">max</name></expr></argument>)</argument_list></call><operator pos:start="101:59" pos:end="101:59">)</operator> <operator pos:start="101:61" pos:end="101:62">!=</operator> <name pos:start="101:64" pos:end="101:66">max</name></expr>)</condition>;</do>



        <if_stmt pos:start="105:9" pos:end="111:25"><if pos:start="105:9" pos:end="107:34">if <condition pos:start="105:12" pos:end="105:22">(<expr pos:start="105:13" pos:end="105:21"><operator pos:start="105:13" pos:end="105:13">!</operator><name pos:start="105:14" pos:end="105:21">indirect</name></expr>)</condition><block type="pseudo" pos:start="107:13" pos:end="107:34"><block_content pos:start="107:13" pos:end="107:34">

            <expr_stmt pos:start="107:13" pos:end="107:34"><expr pos:start="107:13" pos:end="107:33"><name pos:start="107:13" pos:end="107:22">total_bufs</name> <operator pos:start="107:24" pos:end="107:24">=</operator> <name pos:start="107:26" pos:end="107:33">num_bufs</name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="109:9" pos:end="111:25">else<block type="pseudo" pos:start="111:13" pos:end="111:25"><block_content pos:start="111:13" pos:end="111:25">

            <expr_stmt pos:start="111:13" pos:end="111:25"><expr pos:start="111:13" pos:end="111:24"><name pos:start="111:13" pos:end="111:22">total_bufs</name><operator pos:start="111:23" pos:end="111:24">++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></while>

    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:17">(<expr pos:start="115:9" pos:end="115:16"><name pos:start="115:9" pos:end="115:16">in_bytes</name></expr>)</condition> <block pos:start="115:19" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:29">

        <expr_stmt pos:start="117:9" pos:end="117:29"><expr pos:start="117:9" pos:end="117:28"><operator pos:start="117:9" pos:end="117:9">*</operator><name pos:start="117:10" pos:end="117:17">in_bytes</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:28">in_total</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="121:5" pos:end="125:5"><if pos:start="121:5" pos:end="125:5">if <condition pos:start="121:8" pos:end="121:18">(<expr pos:start="121:9" pos:end="121:17"><name pos:start="121:9" pos:end="121:17">out_bytes</name></expr>)</condition> <block pos:start="121:20" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:31">

        <expr_stmt pos:start="123:9" pos:end="123:31"><expr pos:start="123:9" pos:end="123:30"><operator pos:start="123:9" pos:end="123:9">*</operator><name pos:start="123:10" pos:end="123:18">out_bytes</name> <operator pos:start="123:20" pos:end="123:20">=</operator> <name pos:start="123:22" pos:end="123:30">out_total</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
