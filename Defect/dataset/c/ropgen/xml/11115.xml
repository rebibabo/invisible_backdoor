<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11115.c" pos:tabs="8"><function pos:start="1:1" pos:end="117:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:24">qdist_bin__internal</name><parameter_list pos:start="1:25" pos:end="1:78">(<parameter pos:start="1:26" pos:end="1:41"><decl pos:start="1:26" pos:end="1:41"><type pos:start="1:26" pos:end="1:41"><name pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:31">struct</name> <name pos:start="1:33" pos:end="1:37">qdist</name></name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">to</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:67"><decl pos:start="1:44" pos:end="1:67"><type pos:start="1:44" pos:end="1:67"><specifier pos:start="1:44" pos:end="1:48">const</specifier> <name pos:start="1:50" pos:end="1:61"><name pos:start="1:50" pos:end="1:55">struct</name> <name pos:start="1:57" pos:end="1:61">qdist</name></name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:67">from</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:77"><decl pos:start="1:70" pos:end="1:77"><type pos:start="1:70" pos:end="1:77"><name pos:start="1:70" pos:end="1:75">size_t</name></type> <name pos:start="1:77" pos:end="1:77">n</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="117:1">{<block_content pos:start="5:5" pos:end="115:5">

    <decl_stmt pos:start="5:5" pos:end="5:22"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:10"><name pos:start="5:5" pos:end="5:10">double</name></type> <name pos:start="5:12" pos:end="5:15">xmin</name></decl>, <decl pos:start="5:18" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:10"/><name pos:start="5:18" pos:end="5:21">xmax</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:10"><name pos:start="7:5" pos:end="7:10">double</name></type> <name pos:start="7:12" pos:end="7:15">step</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:16"><decl pos:start="9:5" pos:end="9:12"><type pos:start="9:5" pos:end="9:10"><name pos:start="9:5" pos:end="9:10">size_t</name></type> <name pos:start="9:12" pos:end="9:12">i</name></decl>, <decl pos:start="9:15" pos:end="9:15"><type ref="prev" pos:start="9:5" pos:end="9:10"/><name pos:start="9:15" pos:end="9:15">j</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:19"><expr pos:start="13:5" pos:end="13:18"><call pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:14">qdist_init</name><argument_list pos:start="13:15" pos:end="13:18">(<argument pos:start="13:16" pos:end="13:17"><expr pos:start="13:16" pos:end="13:17"><name pos:start="13:16" pos:end="13:17">to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="17:5" pos:end="21:5"><if pos:start="17:5" pos:end="21:5">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:15"><name pos:start="17:9" pos:end="17:12">from</name><operator pos:start="17:13" pos:end="17:14">-&gt;</operator><name pos:start="17:15" pos:end="17:15">n</name></name> <operator pos:start="17:17" pos:end="17:18">==</operator> <literal type="number" pos:start="17:20" pos:end="17:20">0</literal></expr>)</condition> <block pos:start="17:23" pos:end="21:5">{<block_content pos:start="19:9" pos:end="19:15">

        <return pos:start="19:9" pos:end="19:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="23:5" pos:end="27:5"><if pos:start="23:5" pos:end="27:5">if <condition pos:start="23:8" pos:end="23:31">(<expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:9">n</name> <operator pos:start="23:11" pos:end="23:12">==</operator> <literal type="number" pos:start="23:14" pos:end="23:14">0</literal> <operator pos:start="23:16" pos:end="23:17">||</operator> <name pos:start="23:19" pos:end="23:25"><name pos:start="23:19" pos:end="23:22">from</name><operator pos:start="23:23" pos:end="23:24">-&gt;</operator><name pos:start="23:25" pos:end="23:25">n</name></name> <operator pos:start="23:27" pos:end="23:28">==</operator> <literal type="number" pos:start="23:30" pos:end="23:30">1</literal></expr>)</condition> <block pos:start="23:33" pos:end="27:5">{<block_content pos:start="25:9" pos:end="25:20">

        <expr_stmt pos:start="25:9" pos:end="25:20"><expr pos:start="25:9" pos:end="25:19"><name pos:start="25:9" pos:end="25:9">n</name> <operator pos:start="25:11" pos:end="25:11">=</operator> <name pos:start="25:13" pos:end="25:19"><name pos:start="25:13" pos:end="25:16">from</name><operator pos:start="25:17" pos:end="25:18">-&gt;</operator><name pos:start="25:19" pos:end="25:19">n</name></name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="31:5" pos:end="31:63">/* set equally-sized bins between @from's left and right */</comment>

    <expr_stmt pos:start="33:5" pos:end="33:28"><expr pos:start="33:5" pos:end="33:27"><name pos:start="33:5" pos:end="33:8">xmin</name> <operator pos:start="33:10" pos:end="33:10">=</operator> <call pos:start="33:12" pos:end="33:27"><name pos:start="33:12" pos:end="33:21">qdist_xmin</name><argument_list pos:start="33:22" pos:end="33:27">(<argument pos:start="33:23" pos:end="33:26"><expr pos:start="33:23" pos:end="33:26"><name pos:start="33:23" pos:end="33:26">from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:28"><expr pos:start="35:5" pos:end="35:27"><name pos:start="35:5" pos:end="35:8">xmax</name> <operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:27"><name pos:start="35:12" pos:end="35:21">qdist_xmax</name><argument_list pos:start="35:22" pos:end="35:27">(<argument pos:start="35:23" pos:end="35:26"><expr pos:start="35:23" pos:end="35:26"><name pos:start="35:23" pos:end="35:26">from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:29"><expr pos:start="37:5" pos:end="37:28"><name pos:start="37:5" pos:end="37:8">step</name> <operator pos:start="37:10" pos:end="37:10">=</operator> <operator pos:start="37:12" pos:end="37:12">(</operator><name pos:start="37:13" pos:end="37:16">xmax</name> <operator pos:start="37:18" pos:end="37:18">-</operator> <name pos:start="37:20" pos:end="37:23">xmin</name><operator pos:start="37:24" pos:end="37:24">)</operator> <operator pos:start="37:26" pos:end="37:26">/</operator> <name pos:start="37:28" pos:end="37:28">n</name></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="65:5"><if pos:start="41:5" pos:end="65:5">if <condition pos:start="41:8" pos:end="41:21">(<expr pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:9">n</name> <operator pos:start="41:11" pos:end="41:12">==</operator> <name pos:start="41:14" pos:end="41:20"><name pos:start="41:14" pos:end="41:17">from</name><operator pos:start="41:18" pos:end="41:19">-&gt;</operator><name pos:start="41:20" pos:end="41:20">n</name></name></expr>)</condition> <block pos:start="41:23" pos:end="65:5">{<block_content pos:start="45:9" pos:end="63:15">

        <comment type="block" pos:start="43:9" pos:end="43:70">/* if @from's entries are equally spaced, no need to re-bin */</comment>

        <for pos:start="45:9" pos:end="53:9">for <control pos:start="45:13" pos:end="45:37">(<init pos:start="45:14" pos:end="45:19"><expr pos:start="45:14" pos:end="45:18"><name pos:start="45:14" pos:end="45:14">i</name> <operator pos:start="45:16" pos:end="45:16">=</operator> <literal type="number" pos:start="45:18" pos:end="45:18">0</literal></expr>;</init> <condition pos:start="45:21" pos:end="45:32"><expr pos:start="45:21" pos:end="45:31"><name pos:start="45:21" pos:end="45:21">i</name> <operator pos:start="45:23" pos:end="45:23">&lt;</operator> <name pos:start="45:25" pos:end="45:31"><name pos:start="45:25" pos:end="45:28">from</name><operator pos:start="45:29" pos:end="45:30">-&gt;</operator><name pos:start="45:31" pos:end="45:31">n</name></name></expr>;</condition> <incr pos:start="45:34" pos:end="45:36"><expr pos:start="45:34" pos:end="45:36"><name pos:start="45:34" pos:end="45:34">i</name><operator pos:start="45:35" pos:end="45:36">++</operator></expr></incr>)</control> <block pos:start="45:39" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:13">

            <if_stmt pos:start="47:13" pos:end="51:13"><if pos:start="47:13" pos:end="51:13">if <condition pos:start="47:16" pos:end="47:54">(<expr pos:start="47:17" pos:end="47:53"><name pos:start="47:17" pos:end="47:32"><name pos:start="47:17" pos:end="47:20">from</name><operator pos:start="47:21" pos:end="47:22">-&gt;</operator><name pos:start="47:23" pos:end="47:29">entries</name><index pos:start="47:30" pos:end="47:32">[<expr pos:start="47:31" pos:end="47:31"><name pos:start="47:31" pos:end="47:31">i</name></expr>]</index></name><operator pos:start="47:33" pos:end="47:33">.</operator><name pos:start="47:34" pos:end="47:34">x</name> <operator pos:start="47:36" pos:end="47:37">!=</operator> <name pos:start="47:39" pos:end="47:42">xmin</name> <operator pos:start="47:44" pos:end="47:44">+</operator> <name pos:start="47:46" pos:end="47:46">i</name> <operator pos:start="47:48" pos:end="47:48">*</operator> <name pos:start="47:50" pos:end="47:53">step</name></expr>)</condition> <block pos:start="47:56" pos:end="51:13">{<block_content pos:start="49:17" pos:end="49:27">

                <goto pos:start="49:17" pos:end="49:27">goto <name pos:start="49:22" pos:end="49:26">rebin</name>;</goto>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="55:9" pos:end="55:67">/* they're equally spaced, so copy the dist and bail out */</comment>

        <expr_stmt pos:start="57:9" pos:end="57:57"><expr pos:start="57:9" pos:end="57:56"><name pos:start="57:9" pos:end="57:19"><name pos:start="57:9" pos:end="57:10">to</name><operator pos:start="57:11" pos:end="57:12">-&gt;</operator><name pos:start="57:13" pos:end="57:19">entries</name></name> <operator pos:start="57:21" pos:end="57:21">=</operator> <call pos:start="57:23" pos:end="57:56"><name pos:start="57:23" pos:end="57:27">g_new</name><argument_list pos:start="57:28" pos:end="57:56">(<argument pos:start="57:29" pos:end="57:46"><expr pos:start="57:29" pos:end="57:46">struct <name pos:start="57:36" pos:end="57:46">qdist_entry</name></expr></argument>, <argument pos:start="57:49" pos:end="57:55"><expr pos:start="57:49" pos:end="57:55"><name pos:start="57:49" pos:end="57:55"><name pos:start="57:49" pos:end="57:52">from</name><operator pos:start="57:53" pos:end="57:54">-&gt;</operator><name pos:start="57:55" pos:end="57:55">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:24"><expr pos:start="59:9" pos:end="59:23"><name pos:start="59:9" pos:end="59:13"><name pos:start="59:9" pos:end="59:10">to</name><operator pos:start="59:11" pos:end="59:12">-&gt;</operator><name pos:start="59:13" pos:end="59:13">n</name></name> <operator pos:start="59:15" pos:end="59:15">=</operator> <name pos:start="59:17" pos:end="59:23"><name pos:start="59:17" pos:end="59:20">from</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:23">n</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:73"><expr pos:start="61:9" pos:end="61:72"><call pos:start="61:9" pos:end="61:72"><name pos:start="61:9" pos:end="61:14">memcpy</name><argument_list pos:start="61:15" pos:end="61:72">(<argument pos:start="61:16" pos:end="61:26"><expr pos:start="61:16" pos:end="61:26"><name pos:start="61:16" pos:end="61:26"><name pos:start="61:16" pos:end="61:17">to</name><operator pos:start="61:18" pos:end="61:19">-&gt;</operator><name pos:start="61:20" pos:end="61:26">entries</name></name></expr></argument>, <argument pos:start="61:29" pos:end="61:41"><expr pos:start="61:29" pos:end="61:41"><name pos:start="61:29" pos:end="61:41"><name pos:start="61:29" pos:end="61:32">from</name><operator pos:start="61:33" pos:end="61:34">-&gt;</operator><name pos:start="61:35" pos:end="61:41">entries</name></name></expr></argument>, <argument pos:start="61:44" pos:end="61:71"><expr pos:start="61:44" pos:end="61:71"><sizeof pos:start="61:44" pos:end="61:63">sizeof<argument_list pos:start="61:50" pos:end="61:63">(<argument pos:start="61:51" pos:end="61:62"><expr pos:start="61:51" pos:end="61:62"><operator pos:start="61:51" pos:end="61:51">*</operator><name pos:start="61:52" pos:end="61:62"><name pos:start="61:52" pos:end="61:53">to</name><operator pos:start="61:54" pos:end="61:55">-&gt;</operator><name pos:start="61:56" pos:end="61:62">entries</name></name></expr></argument>)</argument_list></sizeof> <operator pos:start="61:65" pos:end="61:65">*</operator> <name pos:start="61:67" pos:end="61:71"><name pos:start="61:67" pos:end="61:68">to</name><operator pos:start="61:69" pos:end="61:70">-&gt;</operator><name pos:start="61:71" pos:end="61:71">n</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:15">return;</return>

    </block_content>}</block></if></if_stmt>



 <label pos:start="69:2" pos:end="69:7"><name pos:start="69:2" pos:end="69:6">rebin</name>:</label>

    <expr_stmt pos:start="71:5" pos:end="71:10"><expr pos:start="71:5" pos:end="71:9"><name pos:start="71:5" pos:end="71:5">j</name> <operator pos:start="71:7" pos:end="71:7">=</operator> <literal type="number" pos:start="71:9" pos:end="71:9">0</literal></expr>;</expr_stmt>

    <for pos:start="73:5" pos:end="115:5">for <control pos:start="73:9" pos:end="73:27">(<init pos:start="73:10" pos:end="73:15"><expr pos:start="73:10" pos:end="73:14"><name pos:start="73:10" pos:end="73:10">i</name> <operator pos:start="73:12" pos:end="73:12">=</operator> <literal type="number" pos:start="73:14" pos:end="73:14">0</literal></expr>;</init> <condition pos:start="73:17" pos:end="73:22"><expr pos:start="73:17" pos:end="73:21"><name pos:start="73:17" pos:end="73:17">i</name> <operator pos:start="73:19" pos:end="73:19">&lt;</operator> <name pos:start="73:21" pos:end="73:21">n</name></expr>;</condition> <incr pos:start="73:24" pos:end="73:26"><expr pos:start="73:24" pos:end="73:26"><name pos:start="73:24" pos:end="73:24">i</name><operator pos:start="73:25" pos:end="73:26">++</operator></expr></incr>)</control> <block pos:start="73:29" pos:end="115:5">{<block_content pos:start="75:9" pos:end="113:9">

        <decl_stmt pos:start="75:9" pos:end="75:17"><decl pos:start="75:9" pos:end="75:16"><type pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:14">double</name></type> <name pos:start="75:16" pos:end="75:16">x</name></decl>;</decl_stmt>

        <decl_stmt pos:start="77:9" pos:end="77:27"><decl pos:start="77:9" pos:end="77:19"><type pos:start="77:9" pos:end="77:14"><name pos:start="77:9" pos:end="77:14">double</name></type> <name pos:start="77:16" pos:end="77:19">left</name></decl>, <decl pos:start="77:22" pos:end="77:26"><type ref="prev" pos:start="77:9" pos:end="77:14"/><name pos:start="77:22" pos:end="77:26">right</name></decl>;</decl_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:31"><expr pos:start="81:9" pos:end="81:30"><name pos:start="81:9" pos:end="81:12">left</name> <operator pos:start="81:14" pos:end="81:14">=</operator> <name pos:start="81:16" pos:end="81:19">xmin</name> <operator pos:start="81:21" pos:end="81:21">+</operator> <name pos:start="81:23" pos:end="81:23">i</name> <operator pos:start="81:25" pos:end="81:25">*</operator> <name pos:start="81:27" pos:end="81:30">step</name></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:38"><expr pos:start="83:9" pos:end="83:37"><name pos:start="83:9" pos:end="83:13">right</name> <operator pos:start="83:15" pos:end="83:15">=</operator> <name pos:start="83:17" pos:end="83:20">xmin</name> <operator pos:start="83:22" pos:end="83:22">+</operator> <operator pos:start="83:24" pos:end="83:24">(</operator><name pos:start="83:25" pos:end="83:25">i</name> <operator pos:start="83:27" pos:end="83:27">+</operator> <literal type="number" pos:start="83:29" pos:end="83:29">1</literal><operator pos:start="83:30" pos:end="83:30">)</operator> <operator pos:start="83:32" pos:end="83:32">*</operator> <name pos:start="83:34" pos:end="83:37">step</name></expr>;</expr_stmt>



        <comment type="block" pos:start="87:9" pos:end="87:62">/* Add x, even if it might not get any counts later */</comment>

        <expr_stmt pos:start="89:9" pos:end="89:17"><expr pos:start="89:9" pos:end="89:16"><name pos:start="89:9" pos:end="89:9">x</name> <operator pos:start="89:11" pos:end="89:11">=</operator> <name pos:start="89:13" pos:end="89:16">left</name></expr>;</expr_stmt>

        <expr_stmt pos:start="91:9" pos:end="91:28"><expr pos:start="91:9" pos:end="91:27"><call pos:start="91:9" pos:end="91:27"><name pos:start="91:9" pos:end="91:17">qdist_add</name><argument_list pos:start="91:18" pos:end="91:27">(<argument pos:start="91:19" pos:end="91:20"><expr pos:start="91:19" pos:end="91:20"><name pos:start="91:19" pos:end="91:20">to</name></expr></argument>, <argument pos:start="91:23" pos:end="91:23"><expr pos:start="91:23" pos:end="91:23"><name pos:start="91:23" pos:end="91:23">x</name></expr></argument>, <argument pos:start="91:26" pos:end="91:26"><expr pos:start="91:26" pos:end="91:26"><literal type="number" pos:start="91:26" pos:end="91:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="95:9" pos:end="101:11">/*

         * To avoid double-counting we capture [left, right) ranges, except for

         * the righmost bin, which captures a [left, right] range.

         */</comment>

        <while pos:start="103:9" pos:end="113:9">while <condition pos:start="103:15" pos:end="103:73">(<expr pos:start="103:16" pos:end="103:72"><name pos:start="103:16" pos:end="103:16">j</name> <operator pos:start="103:18" pos:end="103:18">&lt;</operator> <name pos:start="103:20" pos:end="103:26"><name pos:start="103:20" pos:end="103:23">from</name><operator pos:start="103:24" pos:end="103:25">-&gt;</operator><name pos:start="103:26" pos:end="103:26">n</name></name> <operator pos:start="103:28" pos:end="103:29">&amp;&amp;</operator> <operator pos:start="103:31" pos:end="103:31">(</operator><name pos:start="103:32" pos:end="103:47"><name pos:start="103:32" pos:end="103:35">from</name><operator pos:start="103:36" pos:end="103:37">-&gt;</operator><name pos:start="103:38" pos:end="103:44">entries</name><index pos:start="103:45" pos:end="103:47">[<expr pos:start="103:46" pos:end="103:46"><name pos:start="103:46" pos:end="103:46">j</name></expr>]</index></name><operator pos:start="103:48" pos:end="103:48">.</operator><name pos:start="103:49" pos:end="103:49">x</name> <operator pos:start="103:51" pos:end="103:51">&lt;</operator> <name pos:start="103:53" pos:end="103:57">right</name> <operator pos:start="103:59" pos:end="103:60">||</operator> <name pos:start="103:62" pos:end="103:62">i</name> <operator pos:start="103:64" pos:end="103:65">==</operator> <name pos:start="103:67" pos:end="103:67">n</name> <operator pos:start="103:69" pos:end="103:69">-</operator> <literal type="number" pos:start="103:71" pos:end="103:71">1</literal><operator pos:start="103:72" pos:end="103:72">)</operator></expr>)</condition> <block pos:start="103:75" pos:end="113:9">{<block_content pos:start="105:13" pos:end="111:16">

            <decl_stmt pos:start="105:13" pos:end="105:54"><decl pos:start="105:13" pos:end="105:53"><type pos:start="105:13" pos:end="105:32"><name pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:18">struct</name> <name pos:start="105:20" pos:end="105:30">qdist_entry</name></name> <modifier pos:start="105:32" pos:end="105:32">*</modifier></type><name pos:start="105:33" pos:end="105:33">o</name> <init pos:start="105:35" pos:end="105:53">= <expr pos:start="105:37" pos:end="105:53"><operator pos:start="105:37" pos:end="105:37">&amp;</operator><name pos:start="105:38" pos:end="105:53"><name pos:start="105:38" pos:end="105:41">from</name><operator pos:start="105:42" pos:end="105:43">-&gt;</operator><name pos:start="105:44" pos:end="105:50">entries</name><index pos:start="105:51" pos:end="105:53">[<expr pos:start="105:52" pos:end="105:52"><name pos:start="105:52" pos:end="105:52">j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:39"><expr pos:start="109:13" pos:end="109:38"><call pos:start="109:13" pos:end="109:38"><name pos:start="109:13" pos:end="109:21">qdist_add</name><argument_list pos:start="109:22" pos:end="109:38">(<argument pos:start="109:23" pos:end="109:24"><expr pos:start="109:23" pos:end="109:24"><name pos:start="109:23" pos:end="109:24">to</name></expr></argument>, <argument pos:start="109:27" pos:end="109:27"><expr pos:start="109:27" pos:end="109:27"><name pos:start="109:27" pos:end="109:27">x</name></expr></argument>, <argument pos:start="109:30" pos:end="109:37"><expr pos:start="109:30" pos:end="109:37"><name pos:start="109:30" pos:end="109:37"><name pos:start="109:30" pos:end="109:30">o</name><operator pos:start="109:31" pos:end="109:32">-&gt;</operator><name pos:start="109:33" pos:end="109:37">count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:16"><expr pos:start="111:13" pos:end="111:15"><name pos:start="111:13" pos:end="111:13">j</name><operator pos:start="111:14" pos:end="111:15">++</operator></expr>;</expr_stmt>

        </block_content>}</block></while>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
