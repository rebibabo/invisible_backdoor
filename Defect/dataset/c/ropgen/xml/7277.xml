<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/7277.c" pos:tabs="8"><function pos:start="1:1" pos:end="141:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:19">rtp_read</name><parameter_list pos:start="1:20" pos:end="1:58">(<parameter pos:start="1:21" pos:end="1:33"><decl pos:start="1:21" pos:end="1:33"><type pos:start="1:21" pos:end="1:33"><name pos:start="1:21" pos:end="1:30">URLContext</name> <modifier pos:start="1:32" pos:end="1:32">*</modifier></type><name pos:start="1:33" pos:end="1:33">h</name></decl></parameter>, <parameter pos:start="1:36" pos:end="1:47"><decl pos:start="1:36" pos:end="1:47"><type pos:start="1:36" pos:end="1:47"><name pos:start="1:36" pos:end="1:42">uint8_t</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:47">buf</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:57"><decl pos:start="1:50" pos:end="1:57"><type pos:start="1:50" pos:end="1:57"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:57">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="141:1">{<block_content pos:start="5:5" pos:end="139:15">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">RTPContext</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:17">s</name> <init pos:start="5:19" pos:end="5:32">= <expr pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:32"><name pos:start="5:21" pos:end="5:21">h</name><operator pos:start="5:22" pos:end="5:23">-&gt;</operator><name pos:start="5:24" pos:end="5:32">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:27"><name pos:start="7:5" pos:end="7:10">struct</name> <name pos:start="7:12" pos:end="7:27">sockaddr_storage</name></name></type> <name pos:start="7:29" pos:end="7:32">from</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:23"><decl pos:start="9:5" pos:end="9:22"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:13">socklen_t</name></type> <name pos:start="9:15" pos:end="9:22">from_len</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:11"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:11">len</name></decl>, <decl pos:start="11:14" pos:end="11:19"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:14" pos:end="11:19">fd_max</name></decl>, <decl pos:start="11:22" pos:end="11:22"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:22" pos:end="11:22">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:16"><decl pos:start="13:5" pos:end="13:15"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:10">fd_set</name></type> <name pos:start="13:12" pos:end="13:15">rfds</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="44:0"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:10">struct</name> <name pos:start="15:12" pos:end="15:18">timeval</name></name></type> <name pos:start="15:20" pos:end="15:21">tv</name></decl>;</decl_stmt>

<cpp:if pos:start="17:1" pos:end="17:5">#<cpp:directive pos:start="17:2" pos:end="17:3">if</cpp:directive> <expr pos:start="17:5" pos:end="17:5"><literal type="number" pos:start="17:5" pos:end="17:5">0</literal></expr></cpp:if>

    for(;;) {

        from_len = sizeof(from);

        len = recvfrom (s-&gt;rtp_fd, buf, size, 0,

                        (struct sockaddr *)&amp;from, &amp;from_len);

        if (len &lt; 0) {

            if (ff_neterrno() == FF_NETERROR(EAGAIN) ||

                ff_neterrno() == FF_NETERROR(EINTR))

                continue;

            return AVERROR(EIO);

        }

        break;

    }

<cpp:else pos:start="43:1" pos:end="43:5">#<cpp:directive pos:start="43:2" pos:end="43:5">else</cpp:directive></cpp:else>

    <for pos:start="45:5" pos:end="138:0">for<control pos:start="45:8" pos:end="45:11">(<init pos:start="45:9" pos:end="45:9">;</init><condition pos:start="45:10" pos:end="45:10">;</condition><incr/>)</control> <block pos:start="45:13" pos:end="138:0">{<block_content pos:start="47:9" pos:end="133:9">

        <if_stmt pos:start="47:9" pos:end="49:34"><if pos:start="47:9" pos:end="49:34">if <condition pos:start="47:12" pos:end="47:31">(<expr pos:start="47:13" pos:end="47:30"><call pos:start="47:13" pos:end="47:30"><name pos:start="47:13" pos:end="47:28">url_interrupt_cb</name><argument_list pos:start="47:29" pos:end="47:30">()</argument_list></call></expr>)</condition><block type="pseudo" pos:start="49:13" pos:end="49:34"><block_content pos:start="49:13" pos:end="49:34">

            <return pos:start="49:13" pos:end="49:34">return <expr pos:start="49:20" pos:end="49:33"><call pos:start="49:20" pos:end="49:33"><name pos:start="49:20" pos:end="49:26">AVERROR</name><argument_list pos:start="49:27" pos:end="49:33">(<argument pos:start="49:28" pos:end="49:32"><expr pos:start="49:28" pos:end="49:32"><name pos:start="49:28" pos:end="49:32">EINTR</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <comment type="block" pos:start="51:9" pos:end="51:59">/* build fdset to listen to RTP and RTCP packets */</comment>

        <expr_stmt pos:start="53:9" pos:end="53:23"><expr pos:start="53:9" pos:end="53:22"><call pos:start="53:9" pos:end="53:22"><name pos:start="53:9" pos:end="53:15">FD_ZERO</name><argument_list pos:start="53:16" pos:end="53:22">(<argument pos:start="53:17" pos:end="53:21"><expr pos:start="53:17" pos:end="53:21"><operator pos:start="53:17" pos:end="53:17">&amp;</operator><name pos:start="53:18" pos:end="53:21">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="55:9" pos:end="55:27"><expr pos:start="55:9" pos:end="55:26"><name pos:start="55:9" pos:end="55:14">fd_max</name> <operator pos:start="55:16" pos:end="55:16">=</operator> <name pos:start="55:18" pos:end="55:26"><name pos:start="55:18" pos:end="55:18">s</name><operator pos:start="55:19" pos:end="55:20">-&gt;</operator><name pos:start="55:21" pos:end="55:26">rtp_fd</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:33"><expr pos:start="57:9" pos:end="57:32"><call pos:start="57:9" pos:end="57:32"><name pos:start="57:9" pos:end="57:14">FD_SET</name><argument_list pos:start="57:15" pos:end="57:32">(<argument pos:start="57:16" pos:end="57:24"><expr pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:24"><name pos:start="57:16" pos:end="57:16">s</name><operator pos:start="57:17" pos:end="57:18">-&gt;</operator><name pos:start="57:19" pos:end="57:24">rtp_fd</name></name></expr></argument>, <argument pos:start="57:27" pos:end="57:31"><expr pos:start="57:27" pos:end="57:31"><operator pos:start="57:27" pos:end="57:27">&amp;</operator><name pos:start="57:28" pos:end="57:31">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="59:9" pos:end="61:32"><if pos:start="59:9" pos:end="61:32">if <condition pos:start="59:12" pos:end="59:32">(<expr pos:start="59:13" pos:end="59:31"><name pos:start="59:13" pos:end="59:22"><name pos:start="59:13" pos:end="59:13">s</name><operator pos:start="59:14" pos:end="59:15">-&gt;</operator><name pos:start="59:16" pos:end="59:22">rtcp_fd</name></name> <operator pos:start="59:24" pos:end="59:24">&gt;</operator> <name pos:start="59:26" pos:end="59:31">fd_max</name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:32"><block_content pos:start="61:13" pos:end="61:32">

            <expr_stmt pos:start="61:13" pos:end="61:32"><expr pos:start="61:13" pos:end="61:31"><name pos:start="61:13" pos:end="61:18">fd_max</name> <operator pos:start="61:20" pos:end="61:20">=</operator> <name pos:start="61:22" pos:end="61:31"><name pos:start="61:22" pos:end="61:22">s</name><operator pos:start="61:23" pos:end="61:24">-&gt;</operator><name pos:start="61:25" pos:end="61:31">rtcp_fd</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:34"><expr pos:start="63:9" pos:end="63:33"><call pos:start="63:9" pos:end="63:33"><name pos:start="63:9" pos:end="63:14">FD_SET</name><argument_list pos:start="63:15" pos:end="63:33">(<argument pos:start="63:16" pos:end="63:25"><expr pos:start="63:16" pos:end="63:25"><name pos:start="63:16" pos:end="63:25"><name pos:start="63:16" pos:end="63:16">s</name><operator pos:start="63:17" pos:end="63:18">-&gt;</operator><name pos:start="63:19" pos:end="63:25">rtcp_fd</name></name></expr></argument>, <argument pos:start="63:28" pos:end="63:32"><expr pos:start="63:28" pos:end="63:32"><operator pos:start="63:28" pos:end="63:28">&amp;</operator><name pos:start="63:29" pos:end="63:32">rfds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:22"><expr pos:start="65:9" pos:end="65:21"><name pos:start="65:9" pos:end="65:17"><name pos:start="65:9" pos:end="65:10">tv</name><operator pos:start="65:11" pos:end="65:11">.</operator><name pos:start="65:12" pos:end="65:17">tv_sec</name></name> <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="number" pos:start="65:21" pos:end="65:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="67:9" pos:end="67:32"><expr pos:start="67:9" pos:end="67:31"><name pos:start="67:9" pos:end="67:18"><name pos:start="67:9" pos:end="67:10">tv</name><operator pos:start="67:11" pos:end="67:11">.</operator><name pos:start="67:12" pos:end="67:18">tv_usec</name></name> <operator pos:start="67:20" pos:end="67:20">=</operator> <literal type="number" pos:start="67:22" pos:end="67:24">100</literal> <operator pos:start="67:26" pos:end="67:26">*</operator> <literal type="number" pos:start="67:28" pos:end="67:31">1000</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="69:9" pos:end="69:55"><expr pos:start="69:9" pos:end="69:54"><name pos:start="69:9" pos:end="69:9">n</name> <operator pos:start="69:11" pos:end="69:11">=</operator> <call pos:start="69:13" pos:end="69:54"><name pos:start="69:13" pos:end="69:18">select</name><argument_list pos:start="69:19" pos:end="69:54">(<argument pos:start="69:20" pos:end="69:29"><expr pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:25">fd_max</name> <operator pos:start="69:27" pos:end="69:27">+</operator> <literal type="number" pos:start="69:29" pos:end="69:29">1</literal></expr></argument>, <argument pos:start="69:32" pos:end="69:36"><expr pos:start="69:32" pos:end="69:36"><operator pos:start="69:32" pos:end="69:32">&amp;</operator><name pos:start="69:33" pos:end="69:36">rfds</name></expr></argument>, <argument pos:start="69:39" pos:end="69:42"><expr pos:start="69:39" pos:end="69:42"><name pos:start="69:39" pos:end="69:42">NULL</name></expr></argument>, <argument pos:start="69:45" pos:end="69:48"><expr pos:start="69:45" pos:end="69:48"><name pos:start="69:45" pos:end="69:48">NULL</name></expr></argument>, <argument pos:start="69:51" pos:end="69:53"><expr pos:start="69:51" pos:end="69:53"><operator pos:start="69:51" pos:end="69:51">&amp;</operator><name pos:start="69:52" pos:end="69:53">tv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="71:9" pos:end="133:9"><if pos:start="71:9" pos:end="125:9">if <condition pos:start="71:12" pos:end="71:18">(<expr pos:start="71:13" pos:end="71:17"><name pos:start="71:13" pos:end="71:13">n</name> <operator pos:start="71:15" pos:end="71:15">&gt;</operator> <literal type="number" pos:start="71:17" pos:end="71:17">0</literal></expr>)</condition> <block pos:start="71:20" pos:end="125:9">{<block_content pos:start="75:13" pos:end="123:13">

            <comment type="block" pos:start="73:13" pos:end="73:32">/* first try RTCP */</comment>

            <if_stmt pos:start="75:13" pos:end="97:13"><if pos:start="75:13" pos:end="97:13">if <condition pos:start="75:16" pos:end="75:44">(<expr pos:start="75:17" pos:end="75:43"><call pos:start="75:17" pos:end="75:43"><name pos:start="75:17" pos:end="75:24">FD_ISSET</name><argument_list pos:start="75:25" pos:end="75:43">(<argument pos:start="75:26" pos:end="75:35"><expr pos:start="75:26" pos:end="75:35"><name pos:start="75:26" pos:end="75:35"><name pos:start="75:26" pos:end="75:26">s</name><operator pos:start="75:27" pos:end="75:28">-&gt;</operator><name pos:start="75:29" pos:end="75:35">rtcp_fd</name></name></expr></argument>, <argument pos:start="75:38" pos:end="75:42"><expr pos:start="75:38" pos:end="75:42"><operator pos:start="75:38" pos:end="75:38">&amp;</operator><name pos:start="75:39" pos:end="75:42">rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:46" pos:end="97:13">{<block_content pos:start="77:17" pos:end="95:22">

                <expr_stmt pos:start="77:17" pos:end="77:40"><expr pos:start="77:17" pos:end="77:39"><name pos:start="77:17" pos:end="77:24">from_len</name> <operator pos:start="77:26" pos:end="77:26">=</operator> <sizeof pos:start="77:28" pos:end="77:39">sizeof<argument_list pos:start="77:34" pos:end="77:39">(<argument pos:start="77:35" pos:end="77:38"><expr pos:start="77:35" pos:end="77:38"><name pos:start="77:35" pos:end="77:38">from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <expr_stmt pos:start="79:17" pos:end="81:69"><expr pos:start="79:17" pos:end="81:68"><name pos:start="79:17" pos:end="79:19">len</name> <operator pos:start="79:21" pos:end="79:21">=</operator> <call pos:start="79:23" pos:end="81:68"><name pos:start="79:23" pos:end="79:30">recvfrom</name> <argument_list pos:start="79:32" pos:end="81:68">(<argument pos:start="79:33" pos:end="79:42"><expr pos:start="79:33" pos:end="79:42"><name pos:start="79:33" pos:end="79:42"><name pos:start="79:33" pos:end="79:33">s</name><operator pos:start="79:34" pos:end="79:35">-&gt;</operator><name pos:start="79:36" pos:end="79:42">rtcp_fd</name></name></expr></argument>, <argument pos:start="79:45" pos:end="79:47"><expr pos:start="79:45" pos:end="79:47"><name pos:start="79:45" pos:end="79:47">buf</name></expr></argument>, <argument pos:start="79:50" pos:end="79:53"><expr pos:start="79:50" pos:end="79:53"><name pos:start="79:50" pos:end="79:53">size</name></expr></argument>, <argument pos:start="79:56" pos:end="79:56"><expr pos:start="79:56" pos:end="79:56"><literal type="number" pos:start="79:56" pos:end="79:56">0</literal></expr></argument>,

                                <argument pos:start="81:33" pos:end="81:56"><expr pos:start="81:33" pos:end="81:56"><operator pos:start="81:33" pos:end="81:33">(</operator>struct <name pos:start="81:41" pos:end="81:48">sockaddr</name> <operator pos:start="81:50" pos:end="81:50">*</operator><operator pos:start="81:51" pos:end="81:51">)</operator><operator pos:start="81:52" pos:end="81:52">&amp;</operator><name pos:start="81:53" pos:end="81:56">from</name></expr></argument>, <argument pos:start="81:59" pos:end="81:67"><expr pos:start="81:59" pos:end="81:67"><operator pos:start="81:59" pos:end="81:59">&amp;</operator><name pos:start="81:60" pos:end="81:67">from_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="83:17" pos:end="93:17"><if pos:start="83:17" pos:end="93:17">if <condition pos:start="83:20" pos:end="83:28">(<expr pos:start="83:21" pos:end="83:27"><name pos:start="83:21" pos:end="83:23">len</name> <operator pos:start="83:25" pos:end="83:25">&lt;</operator> <literal type="number" pos:start="83:27" pos:end="83:27">0</literal></expr>)</condition> <block pos:start="83:30" pos:end="93:17">{<block_content pos:start="85:21" pos:end="91:40">

                    <if_stmt pos:start="85:21" pos:end="89:33"><if pos:start="85:21" pos:end="89:33">if <condition pos:start="85:24" pos:end="87:60">(<expr pos:start="85:25" pos:end="87:59"><call pos:start="85:25" pos:end="85:37"><name pos:start="85:25" pos:end="85:35">ff_neterrno</name><argument_list pos:start="85:36" pos:end="85:37">()</argument_list></call> <operator pos:start="85:39" pos:end="85:40">==</operator> <call pos:start="85:42" pos:end="85:60"><name pos:start="85:42" pos:end="85:52">FF_NETERROR</name><argument_list pos:start="85:53" pos:end="85:60">(<argument pos:start="85:54" pos:end="85:59"><expr pos:start="85:54" pos:end="85:59"><name pos:start="85:54" pos:end="85:59">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="85:62" pos:end="85:63">||</operator>

                        <call pos:start="87:25" pos:end="87:37"><name pos:start="87:25" pos:end="87:35">ff_neterrno</name><argument_list pos:start="87:36" pos:end="87:37">()</argument_list></call> <operator pos:start="87:39" pos:end="87:40">==</operator> <call pos:start="87:42" pos:end="87:59"><name pos:start="87:42" pos:end="87:52">FF_NETERROR</name><argument_list pos:start="87:53" pos:end="87:59">(<argument pos:start="87:54" pos:end="87:58"><expr pos:start="87:54" pos:end="87:58"><name pos:start="87:54" pos:end="87:58">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="89:25" pos:end="89:33"><block_content pos:start="89:25" pos:end="89:33">

                        <continue pos:start="89:25" pos:end="89:33">continue;</continue></block_content></block></if></if_stmt>

                    <return pos:start="91:21" pos:end="91:40">return <expr pos:start="91:28" pos:end="91:39"><call pos:start="91:28" pos:end="91:39"><name pos:start="91:28" pos:end="91:34">AVERROR</name><argument_list pos:start="91:35" pos:end="91:39">(<argument pos:start="91:36" pos:end="91:38"><expr pos:start="91:36" pos:end="91:38"><name pos:start="91:36" pos:end="91:38">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="95:17" pos:end="95:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <comment type="block" pos:start="99:13" pos:end="99:26">/* then RTP */</comment>

            <if_stmt pos:start="101:13" pos:end="123:13"><if pos:start="101:13" pos:end="123:13">if <condition pos:start="101:16" pos:end="101:43">(<expr pos:start="101:17" pos:end="101:42"><call pos:start="101:17" pos:end="101:42"><name pos:start="101:17" pos:end="101:24">FD_ISSET</name><argument_list pos:start="101:25" pos:end="101:42">(<argument pos:start="101:26" pos:end="101:34"><expr pos:start="101:26" pos:end="101:34"><name pos:start="101:26" pos:end="101:34"><name pos:start="101:26" pos:end="101:26">s</name><operator pos:start="101:27" pos:end="101:28">-&gt;</operator><name pos:start="101:29" pos:end="101:34">rtp_fd</name></name></expr></argument>, <argument pos:start="101:37" pos:end="101:41"><expr pos:start="101:37" pos:end="101:41"><operator pos:start="101:37" pos:end="101:37">&amp;</operator><name pos:start="101:38" pos:end="101:41">rfds</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="101:45" pos:end="123:13">{<block_content pos:start="103:17" pos:end="121:22">

                <expr_stmt pos:start="103:17" pos:end="103:40"><expr pos:start="103:17" pos:end="103:39"><name pos:start="103:17" pos:end="103:24">from_len</name> <operator pos:start="103:26" pos:end="103:26">=</operator> <sizeof pos:start="103:28" pos:end="103:39">sizeof<argument_list pos:start="103:34" pos:end="103:39">(<argument pos:start="103:35" pos:end="103:38"><expr pos:start="103:35" pos:end="103:38"><name pos:start="103:35" pos:end="103:38">from</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="107:69"><expr pos:start="105:17" pos:end="107:68"><name pos:start="105:17" pos:end="105:19">len</name> <operator pos:start="105:21" pos:end="105:21">=</operator> <call pos:start="105:23" pos:end="107:68"><name pos:start="105:23" pos:end="105:30">recvfrom</name> <argument_list pos:start="105:32" pos:end="107:68">(<argument pos:start="105:33" pos:end="105:41"><expr pos:start="105:33" pos:end="105:41"><name pos:start="105:33" pos:end="105:41"><name pos:start="105:33" pos:end="105:33">s</name><operator pos:start="105:34" pos:end="105:35">-&gt;</operator><name pos:start="105:36" pos:end="105:41">rtp_fd</name></name></expr></argument>, <argument pos:start="105:44" pos:end="105:46"><expr pos:start="105:44" pos:end="105:46"><name pos:start="105:44" pos:end="105:46">buf</name></expr></argument>, <argument pos:start="105:49" pos:end="105:52"><expr pos:start="105:49" pos:end="105:52"><name pos:start="105:49" pos:end="105:52">size</name></expr></argument>, <argument pos:start="105:55" pos:end="105:55"><expr pos:start="105:55" pos:end="105:55"><literal type="number" pos:start="105:55" pos:end="105:55">0</literal></expr></argument>,

                                <argument pos:start="107:33" pos:end="107:56"><expr pos:start="107:33" pos:end="107:56"><operator pos:start="107:33" pos:end="107:33">(</operator>struct <name pos:start="107:41" pos:end="107:48">sockaddr</name> <operator pos:start="107:50" pos:end="107:50">*</operator><operator pos:start="107:51" pos:end="107:51">)</operator><operator pos:start="107:52" pos:end="107:52">&amp;</operator><name pos:start="107:53" pos:end="107:56">from</name></expr></argument>, <argument pos:start="107:59" pos:end="107:67"><expr pos:start="107:59" pos:end="107:67"><operator pos:start="107:59" pos:end="107:59">&amp;</operator><name pos:start="107:60" pos:end="107:67">from_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="109:17" pos:end="119:17"><if pos:start="109:17" pos:end="119:17">if <condition pos:start="109:20" pos:end="109:28">(<expr pos:start="109:21" pos:end="109:27"><name pos:start="109:21" pos:end="109:23">len</name> <operator pos:start="109:25" pos:end="109:25">&lt;</operator> <literal type="number" pos:start="109:27" pos:end="109:27">0</literal></expr>)</condition> <block pos:start="109:30" pos:end="119:17">{<block_content pos:start="111:21" pos:end="117:40">

                    <if_stmt pos:start="111:21" pos:end="115:33"><if pos:start="111:21" pos:end="115:33">if <condition pos:start="111:24" pos:end="113:60">(<expr pos:start="111:25" pos:end="113:59"><call pos:start="111:25" pos:end="111:37"><name pos:start="111:25" pos:end="111:35">ff_neterrno</name><argument_list pos:start="111:36" pos:end="111:37">()</argument_list></call> <operator pos:start="111:39" pos:end="111:40">==</operator> <call pos:start="111:42" pos:end="111:60"><name pos:start="111:42" pos:end="111:52">FF_NETERROR</name><argument_list pos:start="111:53" pos:end="111:60">(<argument pos:start="111:54" pos:end="111:59"><expr pos:start="111:54" pos:end="111:59"><name pos:start="111:54" pos:end="111:59">EAGAIN</name></expr></argument>)</argument_list></call> <operator pos:start="111:62" pos:end="111:63">||</operator>

                        <call pos:start="113:25" pos:end="113:37"><name pos:start="113:25" pos:end="113:35">ff_neterrno</name><argument_list pos:start="113:36" pos:end="113:37">()</argument_list></call> <operator pos:start="113:39" pos:end="113:40">==</operator> <call pos:start="113:42" pos:end="113:59"><name pos:start="113:42" pos:end="113:52">FF_NETERROR</name><argument_list pos:start="113:53" pos:end="113:59">(<argument pos:start="113:54" pos:end="113:58"><expr pos:start="113:54" pos:end="113:58"><name pos:start="113:54" pos:end="113:58">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="115:25" pos:end="115:33"><block_content pos:start="115:25" pos:end="115:33">

                        <continue pos:start="115:25" pos:end="115:33">continue;</continue></block_content></block></if></if_stmt>

                    <return pos:start="117:21" pos:end="117:40">return <expr pos:start="117:28" pos:end="117:39"><call pos:start="117:28" pos:end="117:39"><name pos:start="117:28" pos:end="117:34">AVERROR</name><argument_list pos:start="117:35" pos:end="117:39">(<argument pos:start="117:36" pos:end="117:38"><expr pos:start="117:36" pos:end="117:38"><name pos:start="117:36" pos:end="117:38">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

                </block_content>}</block></if></if_stmt>

                <break pos:start="121:17" pos:end="121:22">break;</break>

            </block_content>}</block></if></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="125:11" pos:end="133:9">else if <condition pos:start="125:19" pos:end="125:25">(<expr pos:start="125:20" pos:end="125:24"><name pos:start="125:20" pos:end="125:20">n</name> <operator pos:start="125:22" pos:end="125:22">&lt;</operator> <literal type="number" pos:start="125:24" pos:end="125:24">0</literal></expr>)</condition> <block pos:start="125:27" pos:end="133:9">{<block_content pos:start="127:13" pos:end="131:32">

            <if_stmt pos:start="127:13" pos:end="129:25"><if pos:start="127:13" pos:end="129:25">if <condition pos:start="127:16" pos:end="127:52">(<expr pos:start="127:17" pos:end="127:51"><call pos:start="127:17" pos:end="127:29"><name pos:start="127:17" pos:end="127:27">ff_neterrno</name><argument_list pos:start="127:28" pos:end="127:29">()</argument_list></call> <operator pos:start="127:31" pos:end="127:32">==</operator> <call pos:start="127:34" pos:end="127:51"><name pos:start="127:34" pos:end="127:44">FF_NETERROR</name><argument_list pos:start="127:45" pos:end="127:51">(<argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><name pos:start="127:46" pos:end="127:50">EINTR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="129:17" pos:end="129:25"><block_content pos:start="129:17" pos:end="129:25">

                <continue pos:start="129:17" pos:end="129:25">continue;</continue></block_content></block></if></if_stmt>

            <return pos:start="131:13" pos:end="131:32">return <expr pos:start="131:20" pos:end="131:31"><call pos:start="131:20" pos:end="131:31"><name pos:start="131:20" pos:end="131:26">AVERROR</name><argument_list pos:start="131:27" pos:end="131:31">(<argument pos:start="131:28" pos:end="131:30"><expr pos:start="131:28" pos:end="131:30"><name pos:start="131:28" pos:end="131:30">EIO</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="137:1" pos:end="137:6">#<cpp:directive pos:start="137:2" pos:end="137:6">endif</cpp:directive></cpp:endif>

    <return pos:start="139:5" pos:end="139:15">return <expr pos:start="139:12" pos:end="139:14"><name pos:start="139:12" pos:end="139:14">len</name></expr>;</return>

</block_content>}</block></function>
</unit>
