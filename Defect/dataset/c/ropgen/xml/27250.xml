<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/27250.c" pos:tabs="8"><function pos:start="1:1" pos:end="103:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:21">gen_rdhwr</name><parameter_list pos:start="1:22" pos:end="1:56">(<parameter pos:start="1:23" pos:end="1:39"><decl pos:start="1:23" pos:end="1:39"><type pos:start="1:23" pos:end="1:39"><name pos:start="1:23" pos:end="1:34">DisasContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:39">ctx</name></decl></parameter>, <parameter pos:start="1:42" pos:end="1:47"><decl pos:start="1:42" pos:end="1:47"><type pos:start="1:42" pos:end="1:47"><name pos:start="1:42" pos:end="1:44">int</name></type> <name pos:start="1:46" pos:end="1:47">rt</name></decl></parameter>, <parameter pos:start="1:50" pos:end="1:55"><decl pos:start="1:50" pos:end="1:55"><type pos:start="1:50" pos:end="1:55"><name pos:start="1:50" pos:end="1:52">int</name></type> <name pos:start="1:54" pos:end="1:55">rd</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="103:1">{<block_content pos:start="5:5" pos:end="101:22">

    <decl_stmt pos:start="5:5" pos:end="10:0"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:8"><name pos:start="5:5" pos:end="5:8">TCGv</name></type> <name pos:start="5:10" pos:end="5:11">t0</name></decl>;</decl_stmt>



<cpp:if pos:start="9:1" pos:end="9:30">#<cpp:directive pos:start="9:2" pos:end="9:3">if</cpp:directive> <expr pos:start="9:5" pos:end="9:30"><operator pos:start="9:5" pos:end="9:5">!</operator><call pos:start="9:6" pos:end="9:30"><name pos:start="9:6" pos:end="9:12">defined</name><argument_list pos:start="9:13" pos:end="9:30">(<argument pos:start="9:14" pos:end="9:29"><expr pos:start="9:14" pos:end="9:29"><name pos:start="9:14" pos:end="9:29">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <comment type="block" pos:start="11:5" pos:end="13:55">/* The Linux kernel will emulate rdhwr if it's not supported natively.

       Therefore only check the ISA in system mode.  */</comment>

    <expr_stmt pos:start="15:5" pos:end="18:0"><expr pos:start="15:5" pos:end="15:33"><call pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:14">check_insn</name><argument_list pos:start="15:15" pos:end="15:33">(<argument pos:start="15:16" pos:end="15:18"><expr pos:start="15:16" pos:end="15:18"><name pos:start="15:16" pos:end="15:18">ctx</name></expr></argument>, <argument pos:start="15:21" pos:end="15:32"><expr pos:start="15:21" pos:end="15:32"><name pos:start="15:21" pos:end="15:32">ISA_MIPS32R2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="19:5" pos:end="19:24"><expr pos:start="19:5" pos:end="19:23"><name pos:start="19:5" pos:end="19:6">t0</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:23"><name pos:start="19:10" pos:end="19:21">tcg_temp_new</name><argument_list pos:start="19:22" pos:end="19:23">()</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="23:5" pos:end="99:5">switch <condition pos:start="23:12" pos:end="23:15">(<expr pos:start="23:13" pos:end="23:14"><name pos:start="23:13" pos:end="23:14">rd</name></expr>)</condition> <block pos:start="23:17" pos:end="99:5">{<block_content pos:start="25:5" pos:end="97:14">

    <case pos:start="25:5" pos:end="25:11">case <expr pos:start="25:10" pos:end="25:10"><literal type="number" pos:start="25:10" pos:end="25:10">0</literal></expr>:</case>

        <expr_stmt pos:start="27:9" pos:end="27:45"><expr pos:start="27:9" pos:end="27:44"><call pos:start="27:9" pos:end="27:44"><name pos:start="27:9" pos:end="27:31">gen_helper_rdhwr_cpunum</name><argument_list pos:start="27:32" pos:end="27:44">(<argument pos:start="27:33" pos:end="27:34"><expr pos:start="27:33" pos:end="27:34"><name pos:start="27:33" pos:end="27:34">t0</name></expr></argument>, <argument pos:start="27:37" pos:end="27:43"><expr pos:start="27:37" pos:end="27:43"><name pos:start="27:37" pos:end="27:43">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:30"><expr pos:start="29:9" pos:end="29:29"><call pos:start="29:9" pos:end="29:29"><name pos:start="29:9" pos:end="29:21">gen_store_gpr</name><argument_list pos:start="29:22" pos:end="29:29">(<argument pos:start="29:23" pos:end="29:24"><expr pos:start="29:23" pos:end="29:24"><name pos:start="29:23" pos:end="29:24">t0</name></expr></argument>, <argument pos:start="29:27" pos:end="29:28"><expr pos:start="29:27" pos:end="29:28"><name pos:start="29:27" pos:end="29:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="31:9" pos:end="31:14">break;</break>

    <case pos:start="33:5" pos:end="33:11">case <expr pos:start="33:10" pos:end="33:10"><literal type="number" pos:start="33:10" pos:end="33:10">1</literal></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:49"><expr pos:start="35:9" pos:end="35:48"><call pos:start="35:9" pos:end="35:48"><name pos:start="35:9" pos:end="35:35">gen_helper_rdhwr_synci_step</name><argument_list pos:start="35:36" pos:end="35:48">(<argument pos:start="35:37" pos:end="35:38"><expr pos:start="35:37" pos:end="35:38"><name pos:start="35:37" pos:end="35:38">t0</name></expr></argument>, <argument pos:start="35:41" pos:end="35:47"><expr pos:start="35:41" pos:end="35:47"><name pos:start="35:41" pos:end="35:47">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:30"><expr pos:start="37:9" pos:end="37:29"><call pos:start="37:9" pos:end="37:29"><name pos:start="37:9" pos:end="37:21">gen_store_gpr</name><argument_list pos:start="37:22" pos:end="37:29">(<argument pos:start="37:23" pos:end="37:24"><expr pos:start="37:23" pos:end="37:24"><name pos:start="37:23" pos:end="37:24">t0</name></expr></argument>, <argument pos:start="37:27" pos:end="37:28"><expr pos:start="37:27" pos:end="37:28"><name pos:start="37:27" pos:end="37:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:11">case <expr pos:start="41:10" pos:end="41:10"><literal type="number" pos:start="41:10" pos:end="41:10">2</literal></expr>:</case>

        <expr_stmt pos:start="43:9" pos:end="43:41"><expr pos:start="43:9" pos:end="43:40"><call pos:start="43:9" pos:end="43:40"><name pos:start="43:9" pos:end="43:27">gen_helper_rdhwr_cc</name><argument_list pos:start="43:28" pos:end="43:40">(<argument pos:start="43:29" pos:end="43:30"><expr pos:start="43:29" pos:end="43:30"><name pos:start="43:29" pos:end="43:30">t0</name></expr></argument>, <argument pos:start="43:33" pos:end="43:39"><expr pos:start="43:33" pos:end="43:39"><name pos:start="43:33" pos:end="43:39">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><call pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:21">gen_store_gpr</name><argument_list pos:start="45:22" pos:end="45:29">(<argument pos:start="45:23" pos:end="45:24"><expr pos:start="45:23" pos:end="45:24"><name pos:start="45:23" pos:end="45:24">t0</name></expr></argument>, <argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="47:9" pos:end="47:14">break;</break>

    <case pos:start="49:5" pos:end="49:11">case <expr pos:start="49:10" pos:end="49:10"><literal type="number" pos:start="49:10" pos:end="49:10">3</literal></expr>:</case>

        <expr_stmt pos:start="51:9" pos:end="51:44"><expr pos:start="51:9" pos:end="51:43"><call pos:start="51:9" pos:end="51:43"><name pos:start="51:9" pos:end="51:30">gen_helper_rdhwr_ccres</name><argument_list pos:start="51:31" pos:end="51:43">(<argument pos:start="51:32" pos:end="51:33"><expr pos:start="51:32" pos:end="51:33"><name pos:start="51:32" pos:end="51:33">t0</name></expr></argument>, <argument pos:start="51:36" pos:end="51:42"><expr pos:start="51:36" pos:end="51:42"><name pos:start="51:36" pos:end="51:42">cpu_env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:30"><expr pos:start="53:9" pos:end="53:29"><call pos:start="53:9" pos:end="53:29"><name pos:start="53:9" pos:end="53:21">gen_store_gpr</name><argument_list pos:start="53:22" pos:end="53:29">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">t0</name></expr></argument>, <argument pos:start="53:27" pos:end="53:28"><expr pos:start="53:27" pos:end="53:28"><name pos:start="53:27" pos:end="53:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>

    <case pos:start="57:5" pos:end="60:0">case <expr pos:start="57:10" pos:end="57:11"><literal type="number" pos:start="57:10" pos:end="57:11">29</literal></expr>:</case>

<cpp:if pos:start="59:1" pos:end="59:29">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:29"><call pos:start="59:5" pos:end="59:29"><name pos:start="59:5" pos:end="59:11">defined</name><argument_list pos:start="59:12" pos:end="59:29">(<argument pos:start="59:13" pos:end="59:28"><expr pos:start="59:13" pos:end="59:28"><name pos:start="59:13" pos:end="59:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

        <expr_stmt pos:start="61:9" pos:end="63:71"><expr pos:start="61:9" pos:end="63:70"><call pos:start="61:9" pos:end="63:70"><name pos:start="61:9" pos:end="61:21">tcg_gen_ld_tl</name><argument_list pos:start="61:22" pos:end="63:70">(<argument pos:start="61:23" pos:end="61:24"><expr pos:start="61:23" pos:end="61:24"><name pos:start="61:23" pos:end="61:24">t0</name></expr></argument>, <argument pos:start="61:27" pos:end="61:33"><expr pos:start="61:27" pos:end="61:33"><name pos:start="61:27" pos:end="61:33">cpu_env</name></expr></argument>,

                      <argument pos:start="63:23" pos:end="63:69"><expr pos:start="63:23" pos:end="63:69"><call pos:start="63:23" pos:end="63:69"><name pos:start="63:23" pos:end="63:30">offsetof</name><argument_list pos:start="63:31" pos:end="63:69">(<argument pos:start="63:32" pos:end="63:43"><expr pos:start="63:32" pos:end="63:43"><name pos:start="63:32" pos:end="63:43">CPUMIPSState</name></expr></argument>, <argument pos:start="63:46" pos:end="63:68"><expr pos:start="63:46" pos:end="63:68"><name pos:start="63:46" pos:end="63:68"><name pos:start="63:46" pos:end="63:54">active_tc</name><operator pos:start="63:55" pos:end="63:55">.</operator><name pos:start="63:56" pos:end="63:68">CP0_UserLocal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:30"><expr pos:start="65:9" pos:end="65:29"><call pos:start="65:9" pos:end="65:29"><name pos:start="65:9" pos:end="65:21">gen_store_gpr</name><argument_list pos:start="65:22" pos:end="65:29">(<argument pos:start="65:23" pos:end="65:24"><expr pos:start="65:23" pos:end="65:24"><name pos:start="65:23" pos:end="65:24">t0</name></expr></argument>, <argument pos:start="65:27" pos:end="65:28"><expr pos:start="65:27" pos:end="65:28"><name pos:start="65:27" pos:end="65:28">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="70:0">break;</break>

<cpp:else pos:start="69:1" pos:end="69:5">#<cpp:directive pos:start="69:2" pos:end="69:5">else</cpp:directive></cpp:else>

        <if_stmt pos:start="71:9" pos:end="85:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="73:50">(<expr pos:start="71:13" pos:end="73:49"><operator pos:start="71:13" pos:end="71:13">(</operator><name pos:start="71:14" pos:end="71:24"><name pos:start="71:14" pos:end="71:16">ctx</name><operator pos:start="71:17" pos:end="71:18">-&gt;</operator><name pos:start="71:19" pos:end="71:24">hflags</name></name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <name pos:start="71:28" pos:end="71:41">MIPS_HFLAG_CP0</name><operator pos:start="71:42" pos:end="71:42">)</operator> <operator pos:start="71:44" pos:end="71:45">||</operator>

            <operator pos:start="73:13" pos:end="73:13">(</operator><name pos:start="73:14" pos:end="73:24"><name pos:start="73:14" pos:end="73:16">ctx</name><operator pos:start="73:17" pos:end="73:18">-&gt;</operator><name pos:start="73:19" pos:end="73:24">hflags</name></name> <operator pos:start="73:26" pos:end="73:26">&amp;</operator> <name pos:start="73:28" pos:end="73:48">MIPS_HFLAG_HWRENA_ULR</name><operator pos:start="73:49" pos:end="73:49">)</operator></expr>)</condition> <block pos:start="73:52" pos:end="81:9">{<block_content pos:start="75:13" pos:end="79:34">

            <expr_stmt pos:start="75:13" pos:end="77:75"><expr pos:start="75:13" pos:end="77:74"><call pos:start="75:13" pos:end="77:74"><name pos:start="75:13" pos:end="75:25">tcg_gen_ld_tl</name><argument_list pos:start="75:26" pos:end="77:74">(<argument pos:start="75:27" pos:end="75:28"><expr pos:start="75:27" pos:end="75:28"><name pos:start="75:27" pos:end="75:28">t0</name></expr></argument>, <argument pos:start="75:31" pos:end="75:37"><expr pos:start="75:31" pos:end="75:37"><name pos:start="75:31" pos:end="75:37">cpu_env</name></expr></argument>,

                          <argument pos:start="77:27" pos:end="77:73"><expr pos:start="77:27" pos:end="77:73"><call pos:start="77:27" pos:end="77:73"><name pos:start="77:27" pos:end="77:34">offsetof</name><argument_list pos:start="77:35" pos:end="77:73">(<argument pos:start="77:36" pos:end="77:47"><expr pos:start="77:36" pos:end="77:47"><name pos:start="77:36" pos:end="77:47">CPUMIPSState</name></expr></argument>, <argument pos:start="77:50" pos:end="77:72"><expr pos:start="77:50" pos:end="77:72"><name pos:start="77:50" pos:end="77:72"><name pos:start="77:50" pos:end="77:58">active_tc</name><operator pos:start="77:59" pos:end="77:59">.</operator><name pos:start="77:60" pos:end="77:72">CP0_UserLocal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:34"><expr pos:start="79:13" pos:end="79:33"><call pos:start="79:13" pos:end="79:33"><name pos:start="79:13" pos:end="79:25">gen_store_gpr</name><argument_list pos:start="79:26" pos:end="79:33">(<argument pos:start="79:27" pos:end="79:28"><expr pos:start="79:27" pos:end="79:28"><name pos:start="79:27" pos:end="79:28">t0</name></expr></argument>, <argument pos:start="79:31" pos:end="79:32"><expr pos:start="79:31" pos:end="79:32"><name pos:start="79:31" pos:end="79:32">rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="81:11" pos:end="85:9">else <block pos:start="81:16" pos:end="85:9">{<block_content pos:start="83:13" pos:end="83:49">

            <expr_stmt pos:start="83:13" pos:end="83:49"><expr pos:start="83:13" pos:end="83:48"><call pos:start="83:13" pos:end="83:48"><name pos:start="83:13" pos:end="83:34">generate_exception_end</name><argument_list pos:start="83:35" pos:end="83:48">(<argument pos:start="83:36" pos:end="83:38"><expr pos:start="83:36" pos:end="83:38"><name pos:start="83:36" pos:end="83:38">ctx</name></expr></argument>, <argument pos:start="83:41" pos:end="83:47"><expr pos:start="83:41" pos:end="83:47"><name pos:start="83:41" pos:end="83:47">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="87:9" pos:end="90:0">break;</break>

<cpp:endif pos:start="89:1" pos:end="89:6">#<cpp:directive pos:start="89:2" pos:end="89:6">endif</cpp:directive></cpp:endif>

    <default pos:start="91:5" pos:end="91:12">default:</default>            <comment type="block" pos:start="91:25" pos:end="91:37">/* Invalid */</comment>

        <expr_stmt pos:start="93:9" pos:end="93:28"><expr pos:start="93:9" pos:end="93:27"><call pos:start="93:9" pos:end="93:27"><name pos:start="93:9" pos:end="93:18">MIPS_INVAL</name><argument_list pos:start="93:19" pos:end="93:27">(<argument pos:start="93:20" pos:end="93:26"><expr pos:start="93:20" pos:end="93:26"><literal type="string" pos:start="93:20" pos:end="93:26">"rdhwr"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:45"><expr pos:start="95:9" pos:end="95:44"><call pos:start="95:9" pos:end="95:44"><name pos:start="95:9" pos:end="95:30">generate_exception_end</name><argument_list pos:start="95:31" pos:end="95:44">(<argument pos:start="95:32" pos:end="95:34"><expr pos:start="95:32" pos:end="95:34"><name pos:start="95:32" pos:end="95:34">ctx</name></expr></argument>, <argument pos:start="95:37" pos:end="95:43"><expr pos:start="95:37" pos:end="95:43"><name pos:start="95:37" pos:end="95:43">EXCP_RI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="97:9" pos:end="97:14">break;</break>

    </block_content>}</block></switch>

    <expr_stmt pos:start="101:5" pos:end="101:22"><expr pos:start="101:5" pos:end="101:21"><call pos:start="101:5" pos:end="101:21"><name pos:start="101:5" pos:end="101:17">tcg_temp_free</name><argument_list pos:start="101:18" pos:end="101:21">(<argument pos:start="101:19" pos:end="101:20"><expr pos:start="101:19" pos:end="101:20"><name pos:start="101:19" pos:end="101:20">t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
