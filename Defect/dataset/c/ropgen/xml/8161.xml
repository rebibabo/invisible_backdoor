<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8161.c" pos:tabs="8"><function pos:start="1:1" pos:end="151:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">ape_tag_read_field</name><parameter_list pos:start="1:30" pos:end="1:49">(<parameter pos:start="1:31" pos:end="1:48"><decl pos:start="1:31" pos:end="1:48"><type pos:start="1:31" pos:end="1:47"><name pos:start="1:31" pos:end="1:45">AVFormatContext</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">s</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="151:1">{<block_content pos:start="5:5" pos:end="149:13">

    <decl_stmt pos:start="5:5" pos:end="5:28"><decl pos:start="5:5" pos:end="5:27"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">AVIOContext</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">pb</name> <init pos:start="5:21" pos:end="5:27">= <expr pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:27"><name pos:start="5:23" pos:end="5:23">s</name><operator pos:start="5:24" pos:end="5:25">-&gt;</operator><name pos:start="5:26" pos:end="5:27">pb</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:30"><decl pos:start="7:5" pos:end="7:21"><type pos:start="7:5" pos:end="7:11"><name pos:start="7:5" pos:end="7:11">uint8_t</name></type> <name pos:start="7:13" pos:end="7:21"><name pos:start="7:13" pos:end="7:15">key</name><index pos:start="7:16" pos:end="7:21">[<expr pos:start="7:17" pos:end="7:20"><literal type="number" pos:start="7:17" pos:end="7:20">1024</literal></expr>]</index></name></decl>, <decl pos:start="7:24" pos:end="7:29"><type ref="prev" pos:start="7:5" pos:end="7:11"><modifier pos:start="7:24" pos:end="7:24">*</modifier></type><name pos:start="7:25" pos:end="7:29">value</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:17">size</name></decl>, <decl pos:start="9:20" pos:end="9:24"><type ref="prev" pos:start="9:5" pos:end="9:12"/><name pos:start="9:20" pos:end="9:24">flags</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">c</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:25"><expr pos:start="15:5" pos:end="15:24"><name pos:start="15:5" pos:end="15:8">size</name> <operator pos:start="15:10" pos:end="15:10">=</operator> <call pos:start="15:12" pos:end="15:24"><name pos:start="15:12" pos:end="15:20">avio_rl32</name><argument_list pos:start="15:21" pos:end="15:24">(<argument pos:start="15:22" pos:end="15:23"><expr pos:start="15:22" pos:end="15:23"><name pos:start="15:22" pos:end="15:23">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block" pos:start="15:28" pos:end="15:43">/* field size */</comment>

    <expr_stmt pos:start="17:5" pos:end="17:26"><expr pos:start="17:5" pos:end="17:25"><name pos:start="17:5" pos:end="17:9">flags</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:25"><name pos:start="17:13" pos:end="17:21">avio_rl32</name><argument_list pos:start="17:22" pos:end="17:25">(<argument pos:start="17:23" pos:end="17:24"><expr pos:start="17:23" pos:end="17:24"><name pos:start="17:23" pos:end="17:24">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="17:28" pos:end="17:44">/* field flags */</comment>

    <for pos:start="19:5" pos:end="31:5">for <control pos:start="19:9" pos:end="19:41">(<init pos:start="19:10" pos:end="19:15"><expr pos:start="19:10" pos:end="19:14"><name pos:start="19:10" pos:end="19:10">i</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">0</literal></expr>;</init> <condition pos:start="19:17" pos:end="19:36"><expr pos:start="19:17" pos:end="19:35"><name pos:start="19:17" pos:end="19:17">i</name> <operator pos:start="19:19" pos:end="19:19">&lt;</operator> <sizeof pos:start="19:21" pos:end="19:31">sizeof<argument_list pos:start="19:27" pos:end="19:31">(<argument pos:start="19:28" pos:end="19:30"><expr pos:start="19:28" pos:end="19:30"><name pos:start="19:28" pos:end="19:30">key</name></expr></argument>)</argument_list></sizeof> <operator pos:start="19:33" pos:end="19:33">-</operator> <literal type="number" pos:start="19:35" pos:end="19:35">1</literal></expr>;</condition> <incr pos:start="19:38" pos:end="19:40"><expr pos:start="19:38" pos:end="19:40"><name pos:start="19:38" pos:end="19:38">i</name><operator pos:start="19:39" pos:end="19:40">++</operator></expr></incr>)</control> <block pos:start="19:43" pos:end="31:5">{<block_content pos:start="21:9" pos:end="29:23">

        <expr_stmt pos:start="21:9" pos:end="21:24"><expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:9">c</name> <operator pos:start="21:11" pos:end="21:11">=</operator> <call pos:start="21:13" pos:end="21:23"><name pos:start="21:13" pos:end="21:19">avio_r8</name><argument_list pos:start="21:20" pos:end="21:23">(<argument pos:start="21:21" pos:end="21:22"><expr pos:start="21:21" pos:end="21:22"><name pos:start="21:21" pos:end="21:22">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="23:9" pos:end="29:23"><if pos:start="23:9" pos:end="25:18">if <condition pos:start="23:12" pos:end="23:33">(<expr pos:start="23:13" pos:end="23:32"><name pos:start="23:13" pos:end="23:27"><name pos:start="23:13" pos:end="23:13">c</name> <argument_list type="generic" pos:start="23:15" pos:end="23:27">&lt; <argument pos:start="23:17" pos:end="23:25"><expr pos:start="23:17" pos:end="23:25"><literal type="number" pos:start="23:17" pos:end="23:20">0x20</literal> <operator pos:start="23:22" pos:end="23:23">||</operator> <name pos:start="23:25" pos:end="23:25">c</name></expr></argument> &gt;</argument_list></name> <literal type="number" pos:start="23:29" pos:end="23:32">0x7E</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:18"><block_content pos:start="25:13" pos:end="25:18">

            <break pos:start="25:13" pos:end="25:18">break;</break></block_content></block></if>

        <else pos:start="27:9" pos:end="29:23">else<block type="pseudo" pos:start="29:13" pos:end="29:23"><block_content pos:start="29:13" pos:end="29:23">

            <expr_stmt pos:start="29:13" pos:end="29:23"><expr pos:start="29:13" pos:end="29:22"><name pos:start="29:13" pos:end="29:18"><name pos:start="29:13" pos:end="29:15">key</name><index pos:start="29:16" pos:end="29:18">[<expr pos:start="29:17" pos:end="29:17"><name pos:start="29:17" pos:end="29:17">i</name></expr>]</index></name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:22">c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="33:5" pos:end="33:15"><expr pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:10"><name pos:start="33:5" pos:end="33:7">key</name><index pos:start="33:8" pos:end="33:10">[<expr pos:start="33:9" pos:end="33:9"><name pos:start="33:9" pos:end="33:9">i</name></expr>]</index></name> <operator pos:start="33:12" pos:end="33:12">=</operator> <literal type="number" pos:start="33:14" pos:end="33:14">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="41:5"><if pos:start="35:5" pos:end="41:5">if <condition pos:start="35:8" pos:end="35:15">(<expr pos:start="35:9" pos:end="35:14"><name pos:start="35:9" pos:end="35:9">c</name> <operator pos:start="35:11" pos:end="35:12">!=</operator> <literal type="number" pos:start="35:14" pos:end="35:14">0</literal></expr>)</condition> <block pos:start="35:17" pos:end="41:5">{<block_content pos:start="37:9" pos:end="39:18">

        <expr_stmt pos:start="37:9" pos:end="37:70"><expr pos:start="37:9" pos:end="37:69"><call pos:start="37:9" pos:end="37:69"><name pos:start="37:9" pos:end="37:14">av_log</name><argument_list pos:start="37:15" pos:end="37:69">(<argument pos:start="37:16" pos:end="37:16"><expr pos:start="37:16" pos:end="37:16"><name pos:start="37:16" pos:end="37:16">s</name></expr></argument>, <argument pos:start="37:19" pos:end="37:32"><expr pos:start="37:19" pos:end="37:32"><name pos:start="37:19" pos:end="37:32">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="37:35" pos:end="37:63"><expr pos:start="37:35" pos:end="37:63"><literal type="string" pos:start="37:35" pos:end="37:63">"Invalid APE tag key '%s'.\n"</literal></expr></argument>, <argument pos:start="37:66" pos:end="37:68"><expr pos:start="37:66" pos:end="37:68"><name pos:start="37:66" pos:end="37:68">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="39:9" pos:end="39:18">return <expr pos:start="39:16" pos:end="39:17"><operator pos:start="39:16" pos:end="39:16">-</operator><literal type="number" pos:start="39:17" pos:end="39:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:56">(<expr pos:start="43:9" pos:end="43:55"><name pos:start="43:9" pos:end="43:12">size</name> <operator pos:start="43:14" pos:end="43:14">&gt;</operator> <name pos:start="43:16" pos:end="43:24">INT32_MAX</name> <operator pos:start="43:26" pos:end="43:26">-</operator> <name pos:start="43:28" pos:end="43:55">FF_INPUT_BUFFER_PADDING_SIZE</name></expr>)</condition> <block pos:start="43:58" pos:end="49:5">{<block_content pos:start="45:9" pos:end="47:35">

        <expr_stmt pos:start="45:9" pos:end="45:61"><expr pos:start="45:9" pos:end="45:60"><call pos:start="45:9" pos:end="45:60"><name pos:start="45:9" pos:end="45:14">av_log</name><argument_list pos:start="45:15" pos:end="45:60">(<argument pos:start="45:16" pos:end="45:16"><expr pos:start="45:16" pos:end="45:16"><name pos:start="45:16" pos:end="45:16">s</name></expr></argument>, <argument pos:start="45:19" pos:end="45:30"><expr pos:start="45:19" pos:end="45:30"><name pos:start="45:19" pos:end="45:30">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="45:33" pos:end="45:59"><expr pos:start="45:33" pos:end="45:59"><literal type="string" pos:start="45:33" pos:end="45:59">"APE tag size too large.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:35">return <expr pos:start="47:16" pos:end="47:34"><name pos:start="47:16" pos:end="47:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="147:5"><if pos:start="51:5" pos:end="125:5">if <condition pos:start="51:8" pos:end="51:39">(<expr pos:start="51:9" pos:end="51:38"><name pos:start="51:9" pos:end="51:13">flags</name> <operator pos:start="51:15" pos:end="51:15">&amp;</operator> <name pos:start="51:17" pos:end="51:38">APE_TAG_FLAG_IS_BINARY</name></expr>)</condition> <block pos:start="51:41" pos:end="125:5">{<block_content pos:start="53:9" pos:end="123:9">

        <decl_stmt pos:start="53:9" pos:end="53:31"><decl pos:start="53:9" pos:end="53:30"><type pos:start="53:9" pos:end="53:15"><name pos:start="53:9" pos:end="53:15">uint8_t</name></type> <name pos:start="53:17" pos:end="53:30"><name pos:start="53:17" pos:end="53:24">filename</name><index pos:start="53:25" pos:end="53:30">[<expr pos:start="53:26" pos:end="53:29"><literal type="number" pos:start="53:26" pos:end="53:29">1024</literal></expr>]</index></name></decl>;</decl_stmt>

        <decl_stmt pos:start="55:9" pos:end="55:26"><decl pos:start="55:9" pos:end="55:25"><type pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:22"><name pos:start="55:9" pos:end="55:12">enum</name> <name pos:start="55:14" pos:end="55:22">AVCodecID</name></name></type> <name pos:start="55:24" pos:end="55:25">id</name></decl>;</decl_stmt>

        <decl_stmt pos:start="57:9" pos:end="57:52"><decl pos:start="57:9" pos:end="57:51"><type pos:start="57:9" pos:end="57:18"><name pos:start="57:9" pos:end="57:16">AVStream</name> <modifier pos:start="57:18" pos:end="57:18">*</modifier></type><name pos:start="57:19" pos:end="57:20">st</name> <init pos:start="57:22" pos:end="57:51">= <expr pos:start="57:24" pos:end="57:51"><call pos:start="57:24" pos:end="57:51"><name pos:start="57:24" pos:end="57:42">avformat_new_stream</name><argument_list pos:start="57:43" pos:end="57:51">(<argument pos:start="57:44" pos:end="57:44"><expr pos:start="57:44" pos:end="57:44"><name pos:start="57:44" pos:end="57:44">s</name></expr></argument>, <argument pos:start="57:47" pos:end="57:50"><expr pos:start="57:47" pos:end="57:50"><name pos:start="57:47" pos:end="57:50">NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="59:9" pos:end="61:35"><if pos:start="59:9" pos:end="61:35">if <condition pos:start="59:12" pos:end="59:16">(<expr pos:start="59:13" pos:end="59:15"><operator pos:start="59:13" pos:end="59:13">!</operator><name pos:start="59:14" pos:end="59:15">st</name></expr>)</condition><block type="pseudo" pos:start="61:13" pos:end="61:35"><block_content pos:start="61:13" pos:end="61:35">

            <return pos:start="61:13" pos:end="61:35">return <expr pos:start="61:20" pos:end="61:34"><call pos:start="61:20" pos:end="61:34"><name pos:start="61:20" pos:end="61:26">AVERROR</name><argument_list pos:start="61:27" pos:end="61:34">(<argument pos:start="61:28" pos:end="61:33"><expr pos:start="61:28" pos:end="61:33"><name pos:start="61:28" pos:end="61:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:67"><expr pos:start="65:9" pos:end="65:66"><name pos:start="65:9" pos:end="65:12">size</name> <operator pos:start="65:14" pos:end="65:15">-=</operator> <call pos:start="65:17" pos:end="65:66"><name pos:start="65:17" pos:end="65:28">avio_get_str</name><argument_list pos:start="65:29" pos:end="65:66">(<argument pos:start="65:30" pos:end="65:31"><expr pos:start="65:30" pos:end="65:31"><name pos:start="65:30" pos:end="65:31">pb</name></expr></argument>, <argument pos:start="65:34" pos:end="65:37"><expr pos:start="65:34" pos:end="65:37"><name pos:start="65:34" pos:end="65:37">size</name></expr></argument>, <argument pos:start="65:40" pos:end="65:47"><expr pos:start="65:40" pos:end="65:47"><name pos:start="65:40" pos:end="65:47">filename</name></expr></argument>, <argument pos:start="65:50" pos:end="65:65"><expr pos:start="65:50" pos:end="65:65"><sizeof pos:start="65:50" pos:end="65:65">sizeof<argument_list pos:start="65:56" pos:end="65:65">(<argument pos:start="65:57" pos:end="65:64"><expr pos:start="65:57" pos:end="65:64"><name pos:start="65:57" pos:end="65:64">filename</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="73:9"><if pos:start="67:9" pos:end="73:9">if <condition pos:start="67:12" pos:end="67:22">(<expr pos:start="67:13" pos:end="67:21"><name pos:start="67:13" pos:end="67:16">size</name> <operator pos:start="67:18" pos:end="67:19">&lt;=</operator> <literal type="number" pos:start="67:21" pos:end="67:21">0</literal></expr>)</condition> <block pos:start="67:24" pos:end="73:9">{<block_content pos:start="69:13" pos:end="71:21">

            <expr_stmt pos:start="69:13" pos:end="69:74"><expr pos:start="69:13" pos:end="69:73"><call pos:start="69:13" pos:end="69:73"><name pos:start="69:13" pos:end="69:18">av_log</name><argument_list pos:start="69:19" pos:end="69:73">(<argument pos:start="69:20" pos:end="69:20"><expr pos:start="69:20" pos:end="69:20"><name pos:start="69:20" pos:end="69:20">s</name></expr></argument>, <argument pos:start="69:23" pos:end="69:36"><expr pos:start="69:23" pos:end="69:36"><name pos:start="69:23" pos:end="69:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="69:39" pos:end="69:67"><expr pos:start="69:39" pos:end="69:67"><literal type="string" pos:start="69:39" pos:end="69:67">"Skipping binary tag '%s'.\n"</literal></expr></argument>, <argument pos:start="69:70" pos:end="69:72"><expr pos:start="69:70" pos:end="69:72"><name pos:start="69:70" pos:end="69:72">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="71:13" pos:end="71:21">return <expr pos:start="71:20" pos:end="71:20"><literal type="number" pos:start="71:20" pos:end="71:20">0</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="77:9" pos:end="77:53"><expr pos:start="77:9" pos:end="77:52"><call pos:start="77:9" pos:end="77:52"><name pos:start="77:9" pos:end="77:19">av_dict_set</name><argument_list pos:start="77:20" pos:end="77:52">(<argument pos:start="77:21" pos:end="77:33"><expr pos:start="77:21" pos:end="77:33"><operator pos:start="77:21" pos:end="77:21">&amp;</operator><name pos:start="77:22" pos:end="77:33"><name pos:start="77:22" pos:end="77:23">st</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:33">metadata</name></name></expr></argument>, <argument pos:start="77:36" pos:end="77:38"><expr pos:start="77:36" pos:end="77:38"><name pos:start="77:36" pos:end="77:38">key</name></expr></argument>, <argument pos:start="77:41" pos:end="77:48"><expr pos:start="77:41" pos:end="77:48"><name pos:start="77:41" pos:end="77:48">filename</name></expr></argument>, <argument pos:start="77:51" pos:end="77:51"><expr pos:start="77:51" pos:end="77:51"><literal type="number" pos:start="77:51" pos:end="77:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="81:9" pos:end="123:9"><if pos:start="81:9" pos:end="115:9">if <condition pos:start="81:12" pos:end="81:71">(<expr pos:start="81:13" pos:end="81:70"><operator pos:start="81:13" pos:end="81:13">(</operator><name pos:start="81:14" pos:end="81:15">id</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:49"><name pos:start="81:19" pos:end="81:39">ff_guess_image2_codec</name><argument_list pos:start="81:40" pos:end="81:49">(<argument pos:start="81:41" pos:end="81:48"><expr pos:start="81:41" pos:end="81:48"><name pos:start="81:41" pos:end="81:48">filename</name></expr></argument>)</argument_list></call><operator pos:start="81:50" pos:end="81:50">)</operator> <operator pos:start="81:52" pos:end="81:53">!=</operator> <name pos:start="81:55" pos:end="81:70">AV_CODEC_ID_NONE</name></expr>)</condition> <block pos:start="81:73" pos:end="115:9">{<block_content pos:start="83:13" pos:end="113:60">

            <decl_stmt pos:start="83:13" pos:end="83:25"><decl pos:start="83:13" pos:end="83:24"><type pos:start="83:13" pos:end="83:20"><name pos:start="83:13" pos:end="83:20">AVPacket</name></type> <name pos:start="83:22" pos:end="83:24">pkt</name></decl>;</decl_stmt>

            <decl_stmt pos:start="85:13" pos:end="85:20"><decl pos:start="85:13" pos:end="85:19"><type pos:start="85:13" pos:end="85:15"><name pos:start="85:13" pos:end="85:15">int</name></type> <name pos:start="85:17" pos:end="85:19">ret</name></decl>;</decl_stmt>



            <expr_stmt pos:start="89:13" pos:end="89:51"><expr pos:start="89:13" pos:end="89:50"><name pos:start="89:13" pos:end="89:15">ret</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="89:50"><name pos:start="89:19" pos:end="89:31">av_get_packet</name><argument_list pos:start="89:32" pos:end="89:50">(<argument pos:start="89:33" pos:end="89:37"><expr pos:start="89:33" pos:end="89:37"><name pos:start="89:33" pos:end="89:37"><name pos:start="89:33" pos:end="89:33">s</name><operator pos:start="89:34" pos:end="89:35">-&gt;</operator><name pos:start="89:36" pos:end="89:37">pb</name></name></expr></argument>, <argument pos:start="89:40" pos:end="89:43"><expr pos:start="89:40" pos:end="89:43"><operator pos:start="89:40" pos:end="89:40">&amp;</operator><name pos:start="89:41" pos:end="89:43">pkt</name></expr></argument>, <argument pos:start="89:46" pos:end="89:49"><expr pos:start="89:46" pos:end="89:49"><name pos:start="89:46" pos:end="89:49">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="91:13" pos:end="97:13"><if pos:start="91:13" pos:end="97:13">if <condition pos:start="91:16" pos:end="91:24">(<expr pos:start="91:17" pos:end="91:23"><name pos:start="91:17" pos:end="91:19">ret</name> <operator pos:start="91:21" pos:end="91:21">&lt;</operator> <literal type="number" pos:start="91:23" pos:end="91:23">0</literal></expr>)</condition> <block pos:start="91:26" pos:end="97:13">{<block_content pos:start="93:17" pos:end="95:27">

                <expr_stmt pos:start="93:17" pos:end="93:70"><expr pos:start="93:17" pos:end="93:69"><call pos:start="93:17" pos:end="93:69"><name pos:start="93:17" pos:end="93:22">av_log</name><argument_list pos:start="93:23" pos:end="93:69">(<argument pos:start="93:24" pos:end="93:24"><expr pos:start="93:24" pos:end="93:24"><name pos:start="93:24" pos:end="93:24">s</name></expr></argument>, <argument pos:start="93:27" pos:end="93:38"><expr pos:start="93:27" pos:end="93:38"><name pos:start="93:27" pos:end="93:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="93:41" pos:end="93:68"><expr pos:start="93:41" pos:end="93:68"><literal type="string" pos:start="93:41" pos:end="93:68">"Error reading cover art.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="95:17" pos:end="95:27">return <expr pos:start="95:24" pos:end="95:26"><name pos:start="95:24" pos:end="95:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="101:13" pos:end="101:64"><expr pos:start="101:13" pos:end="101:63"><name pos:start="101:13" pos:end="101:27"><name pos:start="101:13" pos:end="101:14">st</name><operator pos:start="101:15" pos:end="101:16">-&gt;</operator><name pos:start="101:17" pos:end="101:27">disposition</name></name>      <operator pos:start="101:34" pos:end="101:35">|=</operator> <name pos:start="101:37" pos:end="101:63">AV_DISPOSITION_ATTACHED_PIC</name></expr>;</expr_stmt>

            <expr_stmt pos:start="103:13" pos:end="103:55"><expr pos:start="103:13" pos:end="103:54"><name pos:start="103:13" pos:end="103:33"><name pos:start="103:13" pos:end="103:14">st</name><operator pos:start="103:15" pos:end="103:16">-&gt;</operator><name pos:start="103:17" pos:end="103:21">codec</name><operator pos:start="103:22" pos:end="103:23">-&gt;</operator><name pos:start="103:24" pos:end="103:33">codec_type</name></name> <operator pos:start="103:35" pos:end="103:35">=</operator> <name pos:start="103:37" pos:end="103:54">AVMEDIA_TYPE_VIDEO</name></expr>;</expr_stmt>

            <expr_stmt pos:start="105:13" pos:end="105:39"><expr pos:start="105:13" pos:end="105:38"><name pos:start="105:13" pos:end="105:31"><name pos:start="105:13" pos:end="105:14">st</name><operator pos:start="105:15" pos:end="105:16">-&gt;</operator><name pos:start="105:17" pos:end="105:21">codec</name><operator pos:start="105:22" pos:end="105:23">-&gt;</operator><name pos:start="105:24" pos:end="105:31">codec_id</name></name>   <operator pos:start="105:35" pos:end="105:35">=</operator> <name pos:start="105:37" pos:end="105:38">id</name></expr>;</expr_stmt>



            <expr_stmt pos:start="109:13" pos:end="109:48"><expr pos:start="109:13" pos:end="109:47"><name pos:start="109:13" pos:end="109:28"><name pos:start="109:13" pos:end="109:14">st</name><operator pos:start="109:15" pos:end="109:16">-&gt;</operator><name pos:start="109:17" pos:end="109:28">attached_pic</name></name>              <operator pos:start="109:43" pos:end="109:43">=</operator> <name pos:start="109:45" pos:end="109:47">pkt</name></expr>;</expr_stmt>

            <expr_stmt pos:start="111:13" pos:end="111:54"><expr pos:start="111:13" pos:end="111:53"><name pos:start="111:13" pos:end="111:41"><name pos:start="111:13" pos:end="111:14">st</name><operator pos:start="111:15" pos:end="111:16">-&gt;</operator><name pos:start="111:17" pos:end="111:28">attached_pic</name><operator pos:start="111:29" pos:end="111:29">.</operator><name pos:start="111:30" pos:end="111:41">stream_index</name></name> <operator pos:start="111:43" pos:end="111:43">=</operator> <name pos:start="111:45" pos:end="111:53"><name pos:start="111:45" pos:end="111:46">st</name><operator pos:start="111:47" pos:end="111:48">-&gt;</operator><name pos:start="111:49" pos:end="111:53">index</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="113:13" pos:end="113:60"><expr pos:start="113:13" pos:end="113:59"><name pos:start="113:13" pos:end="113:34"><name pos:start="113:13" pos:end="113:14">st</name><operator pos:start="113:15" pos:end="113:16">-&gt;</operator><name pos:start="113:17" pos:end="113:28">attached_pic</name><operator pos:start="113:29" pos:end="113:29">.</operator><name pos:start="113:30" pos:end="113:34">flags</name></name>       <operator pos:start="113:42" pos:end="113:43">|=</operator> <name pos:start="113:45" pos:end="113:59">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="115:11" pos:end="123:9">else <block pos:start="115:16" pos:end="123:9">{<block_content pos:start="117:13" pos:end="121:60">

            <if_stmt pos:start="117:13" pos:end="119:39"><if pos:start="117:13" pos:end="119:39">if <condition pos:start="117:16" pos:end="117:61">(<expr pos:start="117:17" pos:end="117:60"><call pos:start="117:17" pos:end="117:56"><name pos:start="117:17" pos:end="117:32">ff_get_extradata</name><argument_list pos:start="117:33" pos:end="117:56">(<argument pos:start="117:34" pos:end="117:42"><expr pos:start="117:34" pos:end="117:42"><name pos:start="117:34" pos:end="117:42"><name pos:start="117:34" pos:end="117:35">st</name><operator pos:start="117:36" pos:end="117:37">-&gt;</operator><name pos:start="117:38" pos:end="117:42">codec</name></name></expr></argument>, <argument pos:start="117:45" pos:end="117:49"><expr pos:start="117:45" pos:end="117:49"><name pos:start="117:45" pos:end="117:49"><name pos:start="117:45" pos:end="117:45">s</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:49">pb</name></name></expr></argument>, <argument pos:start="117:52" pos:end="117:55"><expr pos:start="117:52" pos:end="117:55"><name pos:start="117:52" pos:end="117:55">size</name></expr></argument>)</argument_list></call> <operator pos:start="117:58" pos:end="117:58">&lt;</operator> <literal type="number" pos:start="117:60" pos:end="117:60">0</literal></expr>)</condition><block type="pseudo" pos:start="119:17" pos:end="119:39"><block_content pos:start="119:17" pos:end="119:39">

                <return pos:start="119:17" pos:end="119:39">return <expr pos:start="119:24" pos:end="119:38"><call pos:start="119:24" pos:end="119:38"><name pos:start="119:24" pos:end="119:30">AVERROR</name><argument_list pos:start="119:31" pos:end="119:38">(<argument pos:start="119:32" pos:end="119:37"><expr pos:start="119:32" pos:end="119:37"><name pos:start="119:32" pos:end="119:37">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:60"><expr pos:start="121:13" pos:end="121:59"><name pos:start="121:13" pos:end="121:33"><name pos:start="121:13" pos:end="121:14">st</name><operator pos:start="121:15" pos:end="121:16">-&gt;</operator><name pos:start="121:17" pos:end="121:21">codec</name><operator pos:start="121:22" pos:end="121:23">-&gt;</operator><name pos:start="121:24" pos:end="121:33">codec_type</name></name> <operator pos:start="121:35" pos:end="121:35">=</operator> <name pos:start="121:37" pos:end="121:59">AVMEDIA_TYPE_ATTACHMENT</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></if> <else pos:start="125:7" pos:end="147:5">else <block pos:start="125:12" pos:end="147:5">{<block_content pos:start="127:9" pos:end="145:71">

        <expr_stmt pos:start="127:9" pos:end="127:34"><expr pos:start="127:9" pos:end="127:33"><name pos:start="127:9" pos:end="127:13">value</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <call pos:start="127:17" pos:end="127:33"><name pos:start="127:17" pos:end="127:25">av_malloc</name><argument_list pos:start="127:26" pos:end="127:33">(<argument pos:start="127:27" pos:end="127:32"><expr pos:start="127:27" pos:end="127:32"><name pos:start="127:27" pos:end="127:30">size</name><operator pos:start="127:31" pos:end="127:31">+</operator><literal type="number" pos:start="127:32" pos:end="127:32">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="129:9" pos:end="131:35"><if pos:start="129:9" pos:end="131:35">if <condition pos:start="129:12" pos:end="129:19">(<expr pos:start="129:13" pos:end="129:18"><operator pos:start="129:13" pos:end="129:13">!</operator><name pos:start="129:14" pos:end="129:18">value</name></expr>)</condition><block type="pseudo" pos:start="131:13" pos:end="131:35"><block_content pos:start="131:13" pos:end="131:35">

            <return pos:start="131:13" pos:end="131:35">return <expr pos:start="131:20" pos:end="131:34"><call pos:start="131:20" pos:end="131:34"><name pos:start="131:20" pos:end="131:26">AVERROR</name><argument_list pos:start="131:27" pos:end="131:34">(<argument pos:start="131:28" pos:end="131:33"><expr pos:start="131:28" pos:end="131:33"><name pos:start="131:28" pos:end="131:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="133:9" pos:end="133:39"><expr pos:start="133:9" pos:end="133:38"><name pos:start="133:9" pos:end="133:9">c</name> <operator pos:start="133:11" pos:end="133:11">=</operator> <call pos:start="133:13" pos:end="133:38"><name pos:start="133:13" pos:end="133:21">avio_read</name><argument_list pos:start="133:22" pos:end="133:38">(<argument pos:start="133:23" pos:end="133:24"><expr pos:start="133:23" pos:end="133:24"><name pos:start="133:23" pos:end="133:24">pb</name></expr></argument>, <argument pos:start="133:27" pos:end="133:31"><expr pos:start="133:27" pos:end="133:31"><name pos:start="133:27" pos:end="133:31">value</name></expr></argument>, <argument pos:start="133:34" pos:end="133:37"><expr pos:start="133:34" pos:end="133:37"><name pos:start="133:34" pos:end="133:37">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="135:9" pos:end="141:9"><if pos:start="135:9" pos:end="141:9">if <condition pos:start="135:12" pos:end="135:18">(<expr pos:start="135:13" pos:end="135:17"><name pos:start="135:13" pos:end="135:13">c</name> <operator pos:start="135:15" pos:end="135:15">&lt;</operator> <literal type="number" pos:start="135:17" pos:end="135:17">0</literal></expr>)</condition> <block pos:start="135:20" pos:end="141:9">{<block_content pos:start="137:13" pos:end="139:21">

            <expr_stmt pos:start="137:13" pos:end="137:27"><expr pos:start="137:13" pos:end="137:26"><call pos:start="137:13" pos:end="137:26"><name pos:start="137:13" pos:end="137:19">av_free</name><argument_list pos:start="137:20" pos:end="137:26">(<argument pos:start="137:21" pos:end="137:25"><expr pos:start="137:21" pos:end="137:25"><name pos:start="137:21" pos:end="137:25">value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:21">return <expr pos:start="139:20" pos:end="139:20"><name pos:start="139:20" pos:end="139:20">c</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:21"><expr pos:start="143:9" pos:end="143:20"><name pos:start="143:9" pos:end="143:16"><name pos:start="143:9" pos:end="143:13">value</name><index pos:start="143:14" pos:end="143:16">[<expr pos:start="143:15" pos:end="143:15"><name pos:start="143:15" pos:end="143:15">c</name></expr>]</index></name> <operator pos:start="143:18" pos:end="143:18">=</operator> <literal type="number" pos:start="143:20" pos:end="143:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:71"><expr pos:start="145:9" pos:end="145:70"><call pos:start="145:9" pos:end="145:70"><name pos:start="145:9" pos:end="145:19">av_dict_set</name><argument_list pos:start="145:20" pos:end="145:70">(<argument pos:start="145:21" pos:end="145:32"><expr pos:start="145:21" pos:end="145:32"><operator pos:start="145:21" pos:end="145:21">&amp;</operator><name pos:start="145:22" pos:end="145:32"><name pos:start="145:22" pos:end="145:22">s</name><operator pos:start="145:23" pos:end="145:24">-&gt;</operator><name pos:start="145:25" pos:end="145:32">metadata</name></name></expr></argument>, <argument pos:start="145:35" pos:end="145:37"><expr pos:start="145:35" pos:end="145:37"><name pos:start="145:35" pos:end="145:37">key</name></expr></argument>, <argument pos:start="145:40" pos:end="145:44"><expr pos:start="145:40" pos:end="145:44"><name pos:start="145:40" pos:end="145:44">value</name></expr></argument>, <argument pos:start="145:47" pos:end="145:69"><expr pos:start="145:47" pos:end="145:69"><name pos:start="145:47" pos:end="145:69">AV_DICT_DONT_STRDUP_VAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <return pos:start="149:5" pos:end="149:13">return <expr pos:start="149:12" pos:end="149:12"><literal type="number" pos:start="149:12" pos:end="149:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
