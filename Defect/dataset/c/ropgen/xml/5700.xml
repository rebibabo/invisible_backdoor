<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/5700.c" pos:tabs="8"><function pos:start="1:1" pos:end="193:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:28">nvdimm_build_fit</name><parameter_list pos:start="1:29" pos:end="1:38">(<parameter pos:start="1:30" pos:end="1:37"><decl pos:start="1:30" pos:end="1:37"><type pos:start="1:30" pos:end="1:34"><name pos:start="1:30" pos:end="1:32">Aml</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:37">dev</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="193:1">{<block_content pos:start="5:5" pos:end="191:28">

    <decl_stmt pos:start="5:5" pos:end="5:62"><decl pos:start="5:5" pos:end="5:15"><type pos:start="5:5" pos:end="5:9"><name pos:start="5:5" pos:end="5:7">Aml</name> <modifier pos:start="5:9" pos:end="5:9">*</modifier></type><name pos:start="5:10" pos:end="5:15">method</name></decl>, <decl pos:start="5:18" pos:end="5:21"><type ref="prev" pos:start="5:5" pos:end="5:9"><modifier pos:start="5:18" pos:end="5:18">*</modifier></type><name pos:start="5:19" pos:end="5:21">pkg</name></decl>, <decl pos:start="5:24" pos:end="5:27"><type ref="prev" pos:start="5:5" pos:end="5:9"><modifier pos:start="5:24" pos:end="5:24">*</modifier></type><name pos:start="5:25" pos:end="5:27">buf</name></decl>, <decl pos:start="5:30" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:9"><modifier pos:start="5:30" pos:end="5:30">*</modifier></type><name pos:start="5:31" pos:end="5:38">buf_size</name></decl>, <decl pos:start="5:41" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:9"><modifier pos:start="5:41" pos:end="5:41">*</modifier></type><name pos:start="5:42" pos:end="5:47">offset</name></decl>, <decl pos:start="5:50" pos:end="5:61"><type ref="prev" pos:start="5:5" pos:end="5:9"><modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:61">call_result</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:7">Aml</name> <modifier pos:start="7:9" pos:end="7:9">*</modifier></type><name pos:start="7:10" pos:end="7:17">whilectx</name></decl>, <decl pos:start="7:20" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:9"><modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:26">ifcond</name></decl>, <decl pos:start="7:29" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:9"><modifier pos:start="7:29" pos:end="7:29">*</modifier></type><name pos:start="7:30" pos:end="7:34">ifctx</name></decl>, <decl pos:start="7:37" pos:end="7:44"><type ref="prev" pos:start="7:5" pos:end="7:9"><modifier pos:start="7:37" pos:end="7:37">*</modifier></type><name pos:start="7:38" pos:end="7:44">elsectx</name></decl>, <decl pos:start="7:47" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:9"><modifier pos:start="7:47" pos:end="7:47">*</modifier></type><name pos:start="7:48" pos:end="7:50">fit</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:23"><expr pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:7">buf</name> <operator pos:start="11:9" pos:end="11:9">=</operator> <call pos:start="11:11" pos:end="11:22"><name pos:start="11:11" pos:end="11:19">aml_local</name><argument_list pos:start="11:20" pos:end="11:22">(<argument pos:start="11:21" pos:end="11:21"><expr pos:start="11:21" pos:end="11:21"><literal type="number" pos:start="11:21" pos:end="11:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="13:5" pos:end="13:28"><expr pos:start="13:5" pos:end="13:27"><name pos:start="13:5" pos:end="13:12">buf_size</name> <operator pos:start="13:14" pos:end="13:14">=</operator> <call pos:start="13:16" pos:end="13:27"><name pos:start="13:16" pos:end="13:24">aml_local</name><argument_list pos:start="13:25" pos:end="13:27">(<argument pos:start="13:26" pos:end="13:26"><expr pos:start="13:26" pos:end="13:26"><literal type="number" pos:start="13:26" pos:end="13:26">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:23"><expr pos:start="15:5" pos:end="15:22"><name pos:start="15:5" pos:end="15:7">fit</name> <operator pos:start="15:9" pos:end="15:9">=</operator> <call pos:start="15:11" pos:end="15:22"><name pos:start="15:11" pos:end="15:19">aml_local</name><argument_list pos:start="15:20" pos:end="15:22">(<argument pos:start="15:21" pos:end="15:21"><expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="21:52"><expr pos:start="19:5" pos:end="21:51"><call pos:start="19:5" pos:end="21:51"><name pos:start="19:5" pos:end="19:14">aml_append</name><argument_list pos:start="19:15" pos:end="21:51">(<argument pos:start="19:16" pos:end="19:18"><expr pos:start="19:16" pos:end="19:18"><name pos:start="19:16" pos:end="19:18">dev</name></expr></argument>, <argument pos:start="19:21" pos:end="21:50"><expr pos:start="19:21" pos:end="21:50"><call pos:start="19:21" pos:end="21:50"><name pos:start="19:21" pos:end="19:42">aml_create_dword_field</name><argument_list pos:start="19:43" pos:end="21:50">(<argument pos:start="19:44" pos:end="19:62"><expr pos:start="19:44" pos:end="19:62"><call pos:start="19:44" pos:end="19:62"><name pos:start="19:44" pos:end="19:53">aml_buffer</name><argument_list pos:start="19:54" pos:end="19:62">(<argument pos:start="19:55" pos:end="19:55"><expr pos:start="19:55" pos:end="19:55"><literal type="number" pos:start="19:55" pos:end="19:55">4</literal></expr></argument>, <argument pos:start="19:58" pos:end="19:61"><expr pos:start="19:58" pos:end="19:61"><name pos:start="19:58" pos:end="19:61">NULL</name></expr></argument>)</argument_list></call></expr></argument>,

               <argument pos:start="21:16" pos:end="21:25"><expr pos:start="21:16" pos:end="21:25"><call pos:start="21:16" pos:end="21:25"><name pos:start="21:16" pos:end="21:22">aml_int</name><argument_list pos:start="21:23" pos:end="21:25">(<argument pos:start="21:24" pos:end="21:24"><expr pos:start="21:24" pos:end="21:24"><literal type="number" pos:start="21:24" pos:end="21:24">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="21:28" pos:end="21:49"><expr pos:start="21:28" pos:end="21:49"><name pos:start="21:28" pos:end="21:49">NVDIMM_DSM_RFIT_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:38">/* build helper function, RFIT. */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:51"><expr pos:start="27:5" pos:end="27:50"><name pos:start="27:5" pos:end="27:10">method</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <call pos:start="27:14" pos:end="27:50"><name pos:start="27:14" pos:end="27:23">aml_method</name><argument_list pos:start="27:24" pos:end="27:50">(<argument pos:start="27:25" pos:end="27:30"><expr pos:start="27:25" pos:end="27:30"><literal type="string" pos:start="27:25" pos:end="27:30">"RFIT"</literal></expr></argument>, <argument pos:start="27:33" pos:end="27:33"><expr pos:start="27:33" pos:end="27:33"><literal type="number" pos:start="27:33" pos:end="27:33">1</literal></expr></argument>, <argument pos:start="27:36" pos:end="27:49"><expr pos:start="27:36" pos:end="27:49"><name pos:start="27:36" pos:end="27:49">AML_SERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="31:67"><expr pos:start="29:5" pos:end="31:66"><call pos:start="29:5" pos:end="31:66"><name pos:start="29:5" pos:end="29:14">aml_append</name><argument_list pos:start="29:15" pos:end="31:66">(<argument pos:start="29:16" pos:end="29:21"><expr pos:start="29:16" pos:end="29:21"><name pos:start="29:16" pos:end="29:21">method</name></expr></argument>, <argument pos:start="29:24" pos:end="31:65"><expr pos:start="29:24" pos:end="31:65"><call pos:start="29:24" pos:end="31:65"><name pos:start="29:24" pos:end="29:45">aml_create_dword_field</name><argument_list pos:start="29:46" pos:end="31:65">(<argument pos:start="29:47" pos:end="29:65"><expr pos:start="29:47" pos:end="29:65"><call pos:start="29:47" pos:end="29:65"><name pos:start="29:47" pos:end="29:56">aml_buffer</name><argument_list pos:start="29:57" pos:end="29:65">(<argument pos:start="29:58" pos:end="29:58"><expr pos:start="29:58" pos:end="29:58"><literal type="number" pos:start="29:58" pos:end="29:58">4</literal></expr></argument>, <argument pos:start="29:61" pos:end="29:64"><expr pos:start="29:61" pos:end="29:64"><name pos:start="29:61" pos:end="29:64">NULL</name></expr></argument>)</argument_list></call></expr></argument>,

                                              <argument pos:start="31:47" pos:end="31:56"><expr pos:start="31:47" pos:end="31:56"><call pos:start="31:47" pos:end="31:56"><name pos:start="31:47" pos:end="31:53">aml_int</name><argument_list pos:start="31:54" pos:end="31:56">(<argument pos:start="31:55" pos:end="31:55"><expr pos:start="31:55" pos:end="31:55"><literal type="number" pos:start="31:55" pos:end="31:55">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="31:59" pos:end="31:64"><expr pos:start="31:59" pos:end="31:64"><literal type="string" pos:start="31:59" pos:end="31:64">"OFST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="35:5" pos:end="35:32">/* prepare input package. */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:25"><expr pos:start="37:5" pos:end="37:24"><name pos:start="37:5" pos:end="37:7">pkg</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <call pos:start="37:11" pos:end="37:24"><name pos:start="37:11" pos:end="37:21">aml_package</name><argument_list pos:start="37:22" pos:end="37:24">(<argument pos:start="37:23" pos:end="37:23"><expr pos:start="37:23" pos:end="37:23"><literal type="number" pos:start="37:23" pos:end="37:23">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:64"><expr pos:start="39:5" pos:end="39:63"><call pos:start="39:5" pos:end="39:63"><name pos:start="39:5" pos:end="39:14">aml_append</name><argument_list pos:start="39:15" pos:end="39:63">(<argument pos:start="39:16" pos:end="39:21"><expr pos:start="39:16" pos:end="39:21"><name pos:start="39:16" pos:end="39:21">method</name></expr></argument>, <argument pos:start="39:24" pos:end="39:62"><expr pos:start="39:24" pos:end="39:62"><call pos:start="39:24" pos:end="39:62"><name pos:start="39:24" pos:end="39:32">aml_store</name><argument_list pos:start="39:33" pos:end="39:62">(<argument pos:start="39:34" pos:end="39:43"><expr pos:start="39:34" pos:end="39:43"><call pos:start="39:34" pos:end="39:43"><name pos:start="39:34" pos:end="39:40">aml_arg</name><argument_list pos:start="39:41" pos:end="39:43">(<argument pos:start="39:42" pos:end="39:42"><expr pos:start="39:42" pos:end="39:42"><literal type="number" pos:start="39:42" pos:end="39:42">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="39:46" pos:end="39:61"><expr pos:start="39:46" pos:end="39:61"><call pos:start="39:46" pos:end="39:61"><name pos:start="39:46" pos:end="39:53">aml_name</name><argument_list pos:start="39:54" pos:end="39:61">(<argument pos:start="39:55" pos:end="39:60"><expr pos:start="39:55" pos:end="39:60"><literal type="string" pos:start="39:55" pos:end="39:60">"OFST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:38"><expr pos:start="41:5" pos:end="41:37"><call pos:start="41:5" pos:end="41:37"><name pos:start="41:5" pos:end="41:14">aml_append</name><argument_list pos:start="41:15" pos:end="41:37">(<argument pos:start="41:16" pos:end="41:18"><expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">pkg</name></expr></argument>, <argument pos:start="41:21" pos:end="41:36"><expr pos:start="41:21" pos:end="41:36"><call pos:start="41:21" pos:end="41:36"><name pos:start="41:21" pos:end="41:28">aml_name</name><argument_list pos:start="41:29" pos:end="41:36">(<argument pos:start="41:30" pos:end="41:35"><expr pos:start="41:30" pos:end="41:35"><literal type="string" pos:start="41:30" pos:end="41:35">"OFST"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:33">/* call Read_FIT function. */</comment>

    <expr_stmt pos:start="47:5" pos:end="55:72"><expr pos:start="47:5" pos:end="55:71"><name pos:start="47:5" pos:end="47:15">call_result</name> <operator pos:start="47:17" pos:end="47:17">=</operator> <call pos:start="47:19" pos:end="55:71"><name pos:start="47:19" pos:end="47:27">aml_call5</name><argument_list pos:start="47:28" pos:end="55:71">(<argument pos:start="47:29" pos:end="47:45"><expr pos:start="47:29" pos:end="47:45"><name pos:start="47:29" pos:end="47:45">NVDIMM_COMMON_DSM</name></expr></argument>,

                            <argument pos:start="49:29" pos:end="49:61"><expr pos:start="49:29" pos:end="49:61"><call pos:start="49:29" pos:end="49:61"><name pos:start="49:29" pos:end="49:38">aml_touuid</name><argument_list pos:start="49:39" pos:end="49:61">(<argument pos:start="49:40" pos:end="49:60"><expr pos:start="49:40" pos:end="49:60"><name pos:start="49:40" pos:end="49:60">NVDIMM_QEMU_RSVD_UUID</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="51:29" pos:end="51:38"><expr pos:start="51:29" pos:end="51:38"><call pos:start="51:29" pos:end="51:38"><name pos:start="51:29" pos:end="51:35">aml_int</name><argument_list pos:start="51:36" pos:end="51:38">(<argument pos:start="51:37" pos:end="51:37"><expr pos:start="51:37" pos:end="51:37"><literal type="number" pos:start="51:37" pos:end="51:37">1</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block" pos:start="51:40" pos:end="51:55">/* Revision 1 */</comment>,

                            <argument pos:start="53:29" pos:end="53:40"><expr pos:start="53:29" pos:end="53:40"><call pos:start="53:29" pos:end="53:40"><name pos:start="53:29" pos:end="53:35">aml_int</name><argument_list pos:start="53:36" pos:end="53:40">(<argument pos:start="53:37" pos:end="53:39"><expr pos:start="53:37" pos:end="53:39"><literal type="number" pos:start="53:37" pos:end="53:39">0x1</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block" pos:start="53:42" pos:end="53:55">/* Read FIT */</comment>,

                            <argument pos:start="55:29" pos:end="55:31"><expr pos:start="55:29" pos:end="55:31"><name pos:start="55:29" pos:end="55:31">pkg</name></expr></argument>, <argument pos:start="55:34" pos:end="55:70"><expr pos:start="55:34" pos:end="55:70"><call pos:start="55:34" pos:end="55:70"><name pos:start="55:34" pos:end="55:40">aml_int</name><argument_list pos:start="55:41" pos:end="55:70">(<argument pos:start="55:42" pos:end="55:69"><expr pos:start="55:42" pos:end="55:69"><name pos:start="55:42" pos:end="55:69">NVDIMM_QEMU_RSVD_HANDLE_ROOT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:52"><expr pos:start="57:5" pos:end="57:51"><call pos:start="57:5" pos:end="57:51"><name pos:start="57:5" pos:end="57:14">aml_append</name><argument_list pos:start="57:15" pos:end="57:51">(<argument pos:start="57:16" pos:end="57:21"><expr pos:start="57:16" pos:end="57:21"><name pos:start="57:16" pos:end="57:21">method</name></expr></argument>, <argument pos:start="57:24" pos:end="57:50"><expr pos:start="57:24" pos:end="57:50"><call pos:start="57:24" pos:end="57:50"><name pos:start="57:24" pos:end="57:32">aml_store</name><argument_list pos:start="57:33" pos:end="57:50">(<argument pos:start="57:34" pos:end="57:44"><expr pos:start="57:34" pos:end="57:44"><name pos:start="57:34" pos:end="57:44">call_result</name></expr></argument>, <argument pos:start="57:47" pos:end="57:49"><expr pos:start="57:47" pos:end="57:49"><name pos:start="57:47" pos:end="57:49">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="61:5" pos:end="61:29">/* handle _DSM result. */</comment>

    <expr_stmt pos:start="63:5" pos:end="65:59"><expr pos:start="63:5" pos:end="65:58"><call pos:start="63:5" pos:end="65:58"><name pos:start="63:5" pos:end="63:14">aml_append</name><argument_list pos:start="63:15" pos:end="65:58">(<argument pos:start="63:16" pos:end="63:21"><expr pos:start="63:16" pos:end="63:21"><name pos:start="63:16" pos:end="63:21">method</name></expr></argument>, <argument pos:start="63:24" pos:end="65:57"><expr pos:start="63:24" pos:end="65:57"><call pos:start="63:24" pos:end="65:57"><name pos:start="63:24" pos:end="63:45">aml_create_dword_field</name><argument_list pos:start="63:46" pos:end="65:57">(<argument pos:start="63:47" pos:end="63:49"><expr pos:start="63:47" pos:end="63:49"><name pos:start="63:47" pos:end="63:49">buf</name></expr></argument>,

               <argument pos:start="65:16" pos:end="65:25"><expr pos:start="65:16" pos:end="65:25"><call pos:start="65:16" pos:end="65:25"><name pos:start="65:16" pos:end="65:22">aml_int</name><argument_list pos:start="65:23" pos:end="65:25">(<argument pos:start="65:24" pos:end="65:24"><expr pos:start="65:24" pos:end="65:24"><literal type="number" pos:start="65:24" pos:end="65:24">0</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block" pos:start="65:27" pos:end="65:48">/* offset at byte 0 */</comment>, <argument pos:start="65:51" pos:end="65:56"><expr pos:start="65:51" pos:end="65:56"><literal type="string" pos:start="65:51" pos:end="65:56">"STAU"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="69:5" pos:end="71:68"><expr pos:start="69:5" pos:end="71:67"><call pos:start="69:5" pos:end="71:67"><name pos:start="69:5" pos:end="69:14">aml_append</name><argument_list pos:start="69:15" pos:end="71:67">(<argument pos:start="69:16" pos:end="69:21"><expr pos:start="69:16" pos:end="69:21"><name pos:start="69:16" pos:end="69:21">method</name></expr></argument>, <argument pos:start="69:24" pos:end="71:66"><expr pos:start="69:24" pos:end="71:66"><call pos:start="69:24" pos:end="71:66"><name pos:start="69:24" pos:end="69:32">aml_store</name><argument_list pos:start="69:33" pos:end="71:66">(<argument pos:start="69:34" pos:end="69:49"><expr pos:start="69:34" pos:end="69:49"><call pos:start="69:34" pos:end="69:49"><name pos:start="69:34" pos:end="69:41">aml_name</name><argument_list pos:start="69:42" pos:end="69:49">(<argument pos:start="69:43" pos:end="69:48"><expr pos:start="69:43" pos:end="69:48"><literal type="string" pos:start="69:43" pos:end="69:48">"STAU"</literal></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="71:34" pos:end="71:65"><expr pos:start="71:34" pos:end="71:65"><call pos:start="71:34" pos:end="71:65"><name pos:start="71:34" pos:end="71:41">aml_name</name><argument_list pos:start="71:42" pos:end="71:65">(<argument pos:start="71:43" pos:end="71:64"><expr pos:start="71:43" pos:end="71:64"><name pos:start="71:43" pos:end="71:64">NVDIMM_DSM_RFIT_STATUS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



     <comment type="block" pos:start="75:6" pos:end="75:45">/* if something is wrong during _DSM. */</comment>

    <expr_stmt pos:start="77:5" pos:end="79:41"><expr pos:start="77:5" pos:end="79:40"><name pos:start="77:5" pos:end="77:10">ifcond</name> <operator pos:start="77:12" pos:end="77:12">=</operator> <call pos:start="77:14" pos:end="79:40"><name pos:start="77:14" pos:end="77:22">aml_equal</name><argument_list pos:start="77:23" pos:end="79:40">(<argument pos:start="77:24" pos:end="77:61"><expr pos:start="77:24" pos:end="77:61"><call pos:start="77:24" pos:end="77:61"><name pos:start="77:24" pos:end="77:30">aml_int</name><argument_list pos:start="77:31" pos:end="77:61">(<argument pos:start="77:32" pos:end="77:60"><expr pos:start="77:32" pos:end="77:60"><name pos:start="77:32" pos:end="77:60">NVDIMM_DSM_RET_STATUS_SUCCESS</name></expr></argument>)</argument_list></call></expr></argument>,

                       <argument pos:start="79:24" pos:end="79:39"><expr pos:start="79:24" pos:end="79:39"><call pos:start="79:24" pos:end="79:39"><name pos:start="79:24" pos:end="79:31">aml_name</name><argument_list pos:start="79:32" pos:end="79:39">(<argument pos:start="79:33" pos:end="79:38"><expr pos:start="79:33" pos:end="79:38"><literal type="string" pos:start="79:33" pos:end="79:38">"STAU"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="81:5" pos:end="81:37"><expr pos:start="81:5" pos:end="81:36"><name pos:start="81:5" pos:end="81:9">ifctx</name> <operator pos:start="81:11" pos:end="81:11">=</operator> <call pos:start="81:13" pos:end="81:36"><name pos:start="81:13" pos:end="81:18">aml_if</name><argument_list pos:start="81:19" pos:end="81:36">(<argument pos:start="81:20" pos:end="81:35"><expr pos:start="81:20" pos:end="81:35"><call pos:start="81:20" pos:end="81:35"><name pos:start="81:20" pos:end="81:27">aml_lnot</name><argument_list pos:start="81:28" pos:end="81:35">(<argument pos:start="81:29" pos:end="81:34"><expr pos:start="81:29" pos:end="81:34"><name pos:start="81:29" pos:end="81:34">ifcond</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:55"><expr pos:start="83:5" pos:end="83:54"><call pos:start="83:5" pos:end="83:54"><name pos:start="83:5" pos:end="83:14">aml_append</name><argument_list pos:start="83:15" pos:end="83:54">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">ifctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:53"><expr pos:start="83:23" pos:end="83:53"><call pos:start="83:23" pos:end="83:53"><name pos:start="83:23" pos:end="83:32">aml_return</name><argument_list pos:start="83:33" pos:end="83:53">(<argument pos:start="83:34" pos:end="83:52"><expr pos:start="83:34" pos:end="83:52"><call pos:start="83:34" pos:end="83:52"><name pos:start="83:34" pos:end="83:43">aml_buffer</name><argument_list pos:start="83:44" pos:end="83:52">(<argument pos:start="83:45" pos:end="83:45"><expr pos:start="83:45" pos:end="83:45"><literal type="number" pos:start="83:45" pos:end="83:45">0</literal></expr></argument>, <argument pos:start="83:48" pos:end="83:51"><expr pos:start="83:48" pos:end="83:51"><name pos:start="83:48" pos:end="83:51">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:30"><expr pos:start="85:5" pos:end="85:29"><call pos:start="85:5" pos:end="85:29"><name pos:start="85:5" pos:end="85:14">aml_append</name><argument_list pos:start="85:15" pos:end="85:29">(<argument pos:start="85:16" pos:end="85:21"><expr pos:start="85:16" pos:end="85:21"><name pos:start="85:16" pos:end="85:21">method</name></expr></argument>, <argument pos:start="85:24" pos:end="85:28"><expr pos:start="85:24" pos:end="85:28"><name pos:start="85:24" pos:end="85:28">ifctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="89:5" pos:end="89:61"><expr pos:start="89:5" pos:end="89:60"><call pos:start="89:5" pos:end="89:60"><name pos:start="89:5" pos:end="89:14">aml_append</name><argument_list pos:start="89:15" pos:end="89:60">(<argument pos:start="89:16" pos:end="89:21"><expr pos:start="89:16" pos:end="89:21"><name pos:start="89:16" pos:end="89:21">method</name></expr></argument>, <argument pos:start="89:24" pos:end="89:59"><expr pos:start="89:24" pos:end="89:59"><call pos:start="89:24" pos:end="89:59"><name pos:start="89:24" pos:end="89:32">aml_store</name><argument_list pos:start="89:33" pos:end="89:59">(<argument pos:start="89:34" pos:end="89:48"><expr pos:start="89:34" pos:end="89:48"><call pos:start="89:34" pos:end="89:48"><name pos:start="89:34" pos:end="89:43">aml_sizeof</name><argument_list pos:start="89:44" pos:end="89:48">(<argument pos:start="89:45" pos:end="89:47"><expr pos:start="89:45" pos:end="89:47"><name pos:start="89:45" pos:end="89:47">buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="89:51" pos:end="89:58"><expr pos:start="89:51" pos:end="89:58"><name pos:start="89:51" pos:end="89:58">buf_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="91:5" pos:end="95:47"><expr pos:start="91:5" pos:end="95:46"><call pos:start="91:5" pos:end="95:46"><name pos:start="91:5" pos:end="91:14">aml_append</name><argument_list pos:start="91:15" pos:end="95:46">(<argument pos:start="91:16" pos:end="91:21"><expr pos:start="91:16" pos:end="91:21"><name pos:start="91:16" pos:end="91:21">method</name></expr></argument>, <argument pos:start="91:24" pos:end="95:45"><expr pos:start="91:24" pos:end="95:45"><call pos:start="91:24" pos:end="95:45"><name pos:start="91:24" pos:end="91:35">aml_subtract</name><argument_list pos:start="91:36" pos:end="95:45">(<argument pos:start="91:37" pos:end="91:44"><expr pos:start="91:37" pos:end="91:44"><name pos:start="91:37" pos:end="91:44">buf_size</name></expr></argument>,

                                    <argument pos:start="93:37" pos:end="93:46"><expr pos:start="93:37" pos:end="93:46"><call pos:start="93:37" pos:end="93:46"><name pos:start="93:37" pos:end="93:43">aml_int</name><argument_list pos:start="93:44" pos:end="93:46">(<argument pos:start="93:45" pos:end="93:45"><expr pos:start="93:45" pos:end="93:45"><literal type="number" pos:start="93:45" pos:end="93:45">4</literal></expr></argument>)</argument_list></call></expr></argument> <comment type="block" pos:start="93:48" pos:end="93:71">/* the size of "STAU" */</comment>,

                                    <argument pos:start="95:37" pos:end="95:44"><expr pos:start="95:37" pos:end="95:44"><name pos:start="95:37" pos:end="95:44">buf_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="99:5" pos:end="99:36">/* if we read the end of fit. */</comment>

    <expr_stmt pos:start="101:5" pos:end="101:52"><expr pos:start="101:5" pos:end="101:51"><name pos:start="101:5" pos:end="101:9">ifctx</name> <operator pos:start="101:11" pos:end="101:11">=</operator> <call pos:start="101:13" pos:end="101:51"><name pos:start="101:13" pos:end="101:18">aml_if</name><argument_list pos:start="101:19" pos:end="101:51">(<argument pos:start="101:20" pos:end="101:50"><expr pos:start="101:20" pos:end="101:50"><call pos:start="101:20" pos:end="101:50"><name pos:start="101:20" pos:end="101:28">aml_equal</name><argument_list pos:start="101:29" pos:end="101:50">(<argument pos:start="101:30" pos:end="101:37"><expr pos:start="101:30" pos:end="101:37"><name pos:start="101:30" pos:end="101:37">buf_size</name></expr></argument>, <argument pos:start="101:40" pos:end="101:49"><expr pos:start="101:40" pos:end="101:49"><call pos:start="101:40" pos:end="101:49"><name pos:start="101:40" pos:end="101:46">aml_int</name><argument_list pos:start="101:47" pos:end="101:49">(<argument pos:start="101:48" pos:end="101:48"><expr pos:start="101:48" pos:end="101:48"><literal type="number" pos:start="101:48" pos:end="101:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="103:5" pos:end="103:55"><expr pos:start="103:5" pos:end="103:54"><call pos:start="103:5" pos:end="103:54"><name pos:start="103:5" pos:end="103:14">aml_append</name><argument_list pos:start="103:15" pos:end="103:54">(<argument pos:start="103:16" pos:end="103:20"><expr pos:start="103:16" pos:end="103:20"><name pos:start="103:16" pos:end="103:20">ifctx</name></expr></argument>, <argument pos:start="103:23" pos:end="103:53"><expr pos:start="103:23" pos:end="103:53"><call pos:start="103:23" pos:end="103:53"><name pos:start="103:23" pos:end="103:32">aml_return</name><argument_list pos:start="103:33" pos:end="103:53">(<argument pos:start="103:34" pos:end="103:52"><expr pos:start="103:34" pos:end="103:52"><call pos:start="103:34" pos:end="103:52"><name pos:start="103:34" pos:end="103:43">aml_buffer</name><argument_list pos:start="103:44" pos:end="103:52">(<argument pos:start="103:45" pos:end="103:45"><expr pos:start="103:45" pos:end="103:45"><literal type="number" pos:start="103:45" pos:end="103:45">0</literal></expr></argument>, <argument pos:start="103:48" pos:end="103:51"><expr pos:start="103:48" pos:end="103:51"><name pos:start="103:48" pos:end="103:51">NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:30"><expr pos:start="105:5" pos:end="105:29"><call pos:start="105:5" pos:end="105:29"><name pos:start="105:5" pos:end="105:14">aml_append</name><argument_list pos:start="105:15" pos:end="105:29">(<argument pos:start="105:16" pos:end="105:21"><expr pos:start="105:16" pos:end="105:21"><name pos:start="105:16" pos:end="105:21">method</name></expr></argument>, <argument pos:start="105:24" pos:end="105:28"><expr pos:start="105:24" pos:end="105:28"><name pos:start="105:24" pos:end="105:28">ifctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="113:74"><expr pos:start="109:5" pos:end="113:73"><call pos:start="109:5" pos:end="113:73"><name pos:start="109:5" pos:end="109:14">aml_append</name><argument_list pos:start="109:15" pos:end="113:73">(<argument pos:start="109:16" pos:end="109:21"><expr pos:start="109:16" pos:end="109:21"><name pos:start="109:16" pos:end="109:21">method</name></expr></argument>, <argument pos:start="109:24" pos:end="113:72"><expr pos:start="109:24" pos:end="113:72"><call pos:start="109:24" pos:end="113:72"><name pos:start="109:24" pos:end="109:39">aml_create_field</name><argument_list pos:start="109:40" pos:end="113:72">(<argument pos:start="109:41" pos:end="109:43"><expr pos:start="109:41" pos:end="109:43"><name pos:start="109:41" pos:end="109:43">buf</name></expr></argument>,

                            <argument pos:start="111:29" pos:end="111:54"><expr pos:start="111:29" pos:end="111:54"><call pos:start="111:29" pos:end="111:54"><name pos:start="111:29" pos:end="111:35">aml_int</name><argument_list pos:start="111:36" pos:end="111:54">(<argument pos:start="111:37" pos:end="111:53"><expr pos:start="111:37" pos:end="111:53"><literal type="number" pos:start="111:37" pos:end="111:37">4</literal> <operator pos:start="111:39" pos:end="111:39">*</operator> <name pos:start="111:41" pos:end="111:53">BITS_PER_BYTE</name></expr></argument>)</argument_list></call></expr></argument>, <comment type="block" pos:start="111:57" pos:end="111:78">/* offset at byte 4.*/</comment>

                            <argument pos:start="113:29" pos:end="113:63"><expr pos:start="113:29" pos:end="113:63"><call pos:start="113:29" pos:end="113:63"><name pos:start="113:29" pos:end="113:41">aml_shiftleft</name><argument_list pos:start="113:42" pos:end="113:63">(<argument pos:start="113:43" pos:end="113:50"><expr pos:start="113:43" pos:end="113:50"><name pos:start="113:43" pos:end="113:50">buf_size</name></expr></argument>, <argument pos:start="113:53" pos:end="113:62"><expr pos:start="113:53" pos:end="113:62"><call pos:start="113:53" pos:end="113:62"><name pos:start="113:53" pos:end="113:59">aml_int</name><argument_list pos:start="113:60" pos:end="113:62">(<argument pos:start="113:61" pos:end="113:61"><expr pos:start="113:61" pos:end="113:61"><literal type="number" pos:start="113:61" pos:end="113:61">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="113:66" pos:end="113:71"><expr pos:start="113:66" pos:end="113:71"><literal type="string" pos:start="113:66" pos:end="113:71">"BUFF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:53"><expr pos:start="115:5" pos:end="115:52"><call pos:start="115:5" pos:end="115:52"><name pos:start="115:5" pos:end="115:14">aml_append</name><argument_list pos:start="115:15" pos:end="115:52">(<argument pos:start="115:16" pos:end="115:21"><expr pos:start="115:16" pos:end="115:21"><name pos:start="115:16" pos:end="115:21">method</name></expr></argument>, <argument pos:start="115:24" pos:end="115:51"><expr pos:start="115:24" pos:end="115:51"><call pos:start="115:24" pos:end="115:51"><name pos:start="115:24" pos:end="115:33">aml_return</name><argument_list pos:start="115:34" pos:end="115:51">(<argument pos:start="115:35" pos:end="115:50"><expr pos:start="115:35" pos:end="115:50"><call pos:start="115:35" pos:end="115:50"><name pos:start="115:35" pos:end="115:42">aml_name</name><argument_list pos:start="115:43" pos:end="115:50">(<argument pos:start="115:44" pos:end="115:49"><expr pos:start="115:44" pos:end="115:49"><literal type="string" pos:start="115:44" pos:end="115:49">"BUFF"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:28"><expr pos:start="117:5" pos:end="117:27"><call pos:start="117:5" pos:end="117:27"><name pos:start="117:5" pos:end="117:14">aml_append</name><argument_list pos:start="117:15" pos:end="117:27">(<argument pos:start="117:16" pos:end="117:18"><expr pos:start="117:16" pos:end="117:18"><name pos:start="117:16" pos:end="117:18">dev</name></expr></argument>, <argument pos:start="117:21" pos:end="117:26"><expr pos:start="117:21" pos:end="117:26"><name pos:start="117:21" pos:end="117:26">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="121:5" pos:end="121:21">/* build _FIT. */</comment>

    <expr_stmt pos:start="123:5" pos:end="123:51"><expr pos:start="123:5" pos:end="123:50"><name pos:start="123:5" pos:end="123:10">method</name> <operator pos:start="123:12" pos:end="123:12">=</operator> <call pos:start="123:14" pos:end="123:50"><name pos:start="123:14" pos:end="123:23">aml_method</name><argument_list pos:start="123:24" pos:end="123:50">(<argument pos:start="123:25" pos:end="123:30"><expr pos:start="123:25" pos:end="123:30"><literal type="string" pos:start="123:25" pos:end="123:30">"_FIT"</literal></expr></argument>, <argument pos:start="123:33" pos:end="123:33"><expr pos:start="123:33" pos:end="123:33"><literal type="number" pos:start="123:33" pos:end="123:33">0</literal></expr></argument>, <argument pos:start="123:36" pos:end="123:49"><expr pos:start="123:36" pos:end="123:49"><name pos:start="123:36" pos:end="123:49">AML_SERIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="125:5" pos:end="125:26"><expr pos:start="125:5" pos:end="125:25"><name pos:start="125:5" pos:end="125:10">offset</name> <operator pos:start="125:12" pos:end="125:12">=</operator> <call pos:start="125:14" pos:end="125:25"><name pos:start="125:14" pos:end="125:22">aml_local</name><argument_list pos:start="125:23" pos:end="125:25">(<argument pos:start="125:24" pos:end="125:24"><expr pos:start="125:24" pos:end="125:24"><literal type="number" pos:start="125:24" pos:end="125:24">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="129:5" pos:end="129:60"><expr pos:start="129:5" pos:end="129:59"><call pos:start="129:5" pos:end="129:59"><name pos:start="129:5" pos:end="129:14">aml_append</name><argument_list pos:start="129:15" pos:end="129:59">(<argument pos:start="129:16" pos:end="129:21"><expr pos:start="129:16" pos:end="129:21"><name pos:start="129:16" pos:end="129:21">method</name></expr></argument>, <argument pos:start="129:24" pos:end="129:58"><expr pos:start="129:24" pos:end="129:58"><call pos:start="129:24" pos:end="129:58"><name pos:start="129:24" pos:end="129:32">aml_store</name><argument_list pos:start="129:33" pos:end="129:58">(<argument pos:start="129:34" pos:end="129:52"><expr pos:start="129:34" pos:end="129:52"><call pos:start="129:34" pos:end="129:52"><name pos:start="129:34" pos:end="129:43">aml_buffer</name><argument_list pos:start="129:44" pos:end="129:52">(<argument pos:start="129:45" pos:end="129:45"><expr pos:start="129:45" pos:end="129:45"><literal type="number" pos:start="129:45" pos:end="129:45">0</literal></expr></argument>, <argument pos:start="129:48" pos:end="129:51"><expr pos:start="129:48" pos:end="129:51"><name pos:start="129:48" pos:end="129:51">NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="129:55" pos:end="129:57"><expr pos:start="129:55" pos:end="129:57"><name pos:start="129:55" pos:end="129:57">fit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:54"><expr pos:start="131:5" pos:end="131:53"><call pos:start="131:5" pos:end="131:53"><name pos:start="131:5" pos:end="131:14">aml_append</name><argument_list pos:start="131:15" pos:end="131:53">(<argument pos:start="131:16" pos:end="131:21"><expr pos:start="131:16" pos:end="131:21"><name pos:start="131:16" pos:end="131:21">method</name></expr></argument>, <argument pos:start="131:24" pos:end="131:52"><expr pos:start="131:24" pos:end="131:52"><call pos:start="131:24" pos:end="131:52"><name pos:start="131:24" pos:end="131:32">aml_store</name><argument_list pos:start="131:33" pos:end="131:52">(<argument pos:start="131:34" pos:end="131:43"><expr pos:start="131:34" pos:end="131:43"><call pos:start="131:34" pos:end="131:43"><name pos:start="131:34" pos:end="131:40">aml_int</name><argument_list pos:start="131:41" pos:end="131:43">(<argument pos:start="131:42" pos:end="131:42"><expr pos:start="131:42" pos:end="131:42"><literal type="number" pos:start="131:42" pos:end="131:42">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="131:46" pos:end="131:51"><expr pos:start="131:46" pos:end="131:51"><name pos:start="131:46" pos:end="131:51">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="135:5" pos:end="135:37"><expr pos:start="135:5" pos:end="135:36"><name pos:start="135:5" pos:end="135:12">whilectx</name> <operator pos:start="135:14" pos:end="135:14">=</operator> <call pos:start="135:16" pos:end="135:36"><name pos:start="135:16" pos:end="135:24">aml_while</name><argument_list pos:start="135:25" pos:end="135:36">(<argument pos:start="135:26" pos:end="135:35"><expr pos:start="135:26" pos:end="135:35"><call pos:start="135:26" pos:end="135:35"><name pos:start="135:26" pos:end="135:32">aml_int</name><argument_list pos:start="135:33" pos:end="135:35">(<argument pos:start="135:34" pos:end="135:34"><expr pos:start="135:34" pos:end="135:34"><literal type="number" pos:start="135:34" pos:end="135:34">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="137:5" pos:end="137:68"><expr pos:start="137:5" pos:end="137:67"><call pos:start="137:5" pos:end="137:67"><name pos:start="137:5" pos:end="137:14">aml_append</name><argument_list pos:start="137:15" pos:end="137:67">(<argument pos:start="137:16" pos:end="137:23"><expr pos:start="137:16" pos:end="137:23"><name pos:start="137:16" pos:end="137:23">whilectx</name></expr></argument>, <argument pos:start="137:26" pos:end="137:66"><expr pos:start="137:26" pos:end="137:66"><call pos:start="137:26" pos:end="137:66"><name pos:start="137:26" pos:end="137:34">aml_store</name><argument_list pos:start="137:35" pos:end="137:66">(<argument pos:start="137:36" pos:end="137:60"><expr pos:start="137:36" pos:end="137:60"><call pos:start="137:36" pos:end="137:60"><name pos:start="137:36" pos:end="137:44">aml_call1</name><argument_list pos:start="137:45" pos:end="137:60">(<argument pos:start="137:46" pos:end="137:51"><expr pos:start="137:46" pos:end="137:51"><literal type="string" pos:start="137:46" pos:end="137:51">"RFIT"</literal></expr></argument>, <argument pos:start="137:54" pos:end="137:59"><expr pos:start="137:54" pos:end="137:59"><name pos:start="137:54" pos:end="137:59">offset</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="137:63" pos:end="137:65"><expr pos:start="137:63" pos:end="137:65"><name pos:start="137:63" pos:end="137:65">buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="139:5" pos:end="139:63"><expr pos:start="139:5" pos:end="139:62"><call pos:start="139:5" pos:end="139:62"><name pos:start="139:5" pos:end="139:14">aml_append</name><argument_list pos:start="139:15" pos:end="139:62">(<argument pos:start="139:16" pos:end="139:23"><expr pos:start="139:16" pos:end="139:23"><name pos:start="139:16" pos:end="139:23">whilectx</name></expr></argument>, <argument pos:start="139:26" pos:end="139:61"><expr pos:start="139:26" pos:end="139:61"><call pos:start="139:26" pos:end="139:61"><name pos:start="139:26" pos:end="139:34">aml_store</name><argument_list pos:start="139:35" pos:end="139:61">(<argument pos:start="139:36" pos:end="139:50"><expr pos:start="139:36" pos:end="139:50"><call pos:start="139:36" pos:end="139:50"><name pos:start="139:36" pos:end="139:45">aml_sizeof</name><argument_list pos:start="139:46" pos:end="139:50">(<argument pos:start="139:47" pos:end="139:49"><expr pos:start="139:47" pos:end="139:49"><name pos:start="139:47" pos:end="139:49">buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="139:53" pos:end="139:60"><expr pos:start="139:53" pos:end="139:60"><name pos:start="139:53" pos:end="139:60">buf_size</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="143:5" pos:end="149:7">/*

     * if fit buffer was changed during RFIT, read from the beginning

     * again.

     */</comment>

    <expr_stmt pos:start="151:5" pos:end="153:74"><expr pos:start="151:5" pos:end="153:73"><name pos:start="151:5" pos:end="151:9">ifctx</name> <operator pos:start="151:11" pos:end="151:11">=</operator> <call pos:start="151:13" pos:end="153:73"><name pos:start="151:13" pos:end="151:18">aml_if</name><argument_list pos:start="151:19" pos:end="153:73">(<argument pos:start="151:20" pos:end="153:72"><expr pos:start="151:20" pos:end="153:72"><call pos:start="151:20" pos:end="153:72"><name pos:start="151:20" pos:end="151:28">aml_equal</name><argument_list pos:start="151:29" pos:end="153:72">(<argument pos:start="151:30" pos:end="151:61"><expr pos:start="151:30" pos:end="151:61"><call pos:start="151:30" pos:end="151:61"><name pos:start="151:30" pos:end="151:37">aml_name</name><argument_list pos:start="151:38" pos:end="151:61">(<argument pos:start="151:39" pos:end="151:60"><expr pos:start="151:39" pos:end="151:60"><name pos:start="151:39" pos:end="151:60">NVDIMM_DSM_RFIT_STATUS</name></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="153:30" pos:end="153:71"><expr pos:start="153:30" pos:end="153:71"><call pos:start="153:30" pos:end="153:71"><name pos:start="153:30" pos:end="153:36">aml_int</name><argument_list pos:start="153:37" pos:end="153:71">(<argument pos:start="153:38" pos:end="153:70"><expr pos:start="153:38" pos:end="153:70"><name pos:start="153:38" pos:end="153:70">NVDIMM_DSM_RET_STATUS_FIT_CHANGED</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:59"><expr pos:start="155:5" pos:end="155:58"><call pos:start="155:5" pos:end="155:58"><name pos:start="155:5" pos:end="155:14">aml_append</name><argument_list pos:start="155:15" pos:end="155:58">(<argument pos:start="155:16" pos:end="155:20"><expr pos:start="155:16" pos:end="155:20"><name pos:start="155:16" pos:end="155:20">ifctx</name></expr></argument>, <argument pos:start="155:23" pos:end="155:57"><expr pos:start="155:23" pos:end="155:57"><call pos:start="155:23" pos:end="155:57"><name pos:start="155:23" pos:end="155:31">aml_store</name><argument_list pos:start="155:32" pos:end="155:57">(<argument pos:start="155:33" pos:end="155:51"><expr pos:start="155:33" pos:end="155:51"><call pos:start="155:33" pos:end="155:51"><name pos:start="155:33" pos:end="155:42">aml_buffer</name><argument_list pos:start="155:43" pos:end="155:51">(<argument pos:start="155:44" pos:end="155:44"><expr pos:start="155:44" pos:end="155:44"><literal type="number" pos:start="155:44" pos:end="155:44">0</literal></expr></argument>, <argument pos:start="155:47" pos:end="155:50"><expr pos:start="155:47" pos:end="155:50"><name pos:start="155:47" pos:end="155:50">NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="155:54" pos:end="155:56"><expr pos:start="155:54" pos:end="155:56"><name pos:start="155:54" pos:end="155:56">fit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:53"><expr pos:start="157:5" pos:end="157:52"><call pos:start="157:5" pos:end="157:52"><name pos:start="157:5" pos:end="157:14">aml_append</name><argument_list pos:start="157:15" pos:end="157:52">(<argument pos:start="157:16" pos:end="157:20"><expr pos:start="157:16" pos:end="157:20"><name pos:start="157:16" pos:end="157:20">ifctx</name></expr></argument>, <argument pos:start="157:23" pos:end="157:51"><expr pos:start="157:23" pos:end="157:51"><call pos:start="157:23" pos:end="157:51"><name pos:start="157:23" pos:end="157:31">aml_store</name><argument_list pos:start="157:32" pos:end="157:51">(<argument pos:start="157:33" pos:end="157:42"><expr pos:start="157:33" pos:end="157:42"><call pos:start="157:33" pos:end="157:42"><name pos:start="157:33" pos:end="157:39">aml_int</name><argument_list pos:start="157:40" pos:end="157:42">(<argument pos:start="157:41" pos:end="157:41"><expr pos:start="157:41" pos:end="157:41"><literal type="number" pos:start="157:41" pos:end="157:41">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="157:45" pos:end="157:50"><expr pos:start="157:45" pos:end="157:50"><name pos:start="157:45" pos:end="157:50">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="159:5" pos:end="159:32"><expr pos:start="159:5" pos:end="159:31"><call pos:start="159:5" pos:end="159:31"><name pos:start="159:5" pos:end="159:14">aml_append</name><argument_list pos:start="159:15" pos:end="159:31">(<argument pos:start="159:16" pos:end="159:23"><expr pos:start="159:16" pos:end="159:23"><name pos:start="159:16" pos:end="159:23">whilectx</name></expr></argument>, <argument pos:start="159:26" pos:end="159:30"><expr pos:start="159:26" pos:end="159:30"><name pos:start="159:26" pos:end="159:30">ifctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="163:5" pos:end="163:25"><expr pos:start="163:5" pos:end="163:24"><name pos:start="163:5" pos:end="163:11">elsectx</name> <operator pos:start="163:13" pos:end="163:13">=</operator> <call pos:start="163:15" pos:end="163:24"><name pos:start="163:15" pos:end="163:22">aml_else</name><argument_list pos:start="163:23" pos:end="163:24">()</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="167:5" pos:end="167:49">/* finish fit read if no data is read out. */</comment>

    <expr_stmt pos:start="169:5" pos:end="169:52"><expr pos:start="169:5" pos:end="169:51"><name pos:start="169:5" pos:end="169:9">ifctx</name> <operator pos:start="169:11" pos:end="169:11">=</operator> <call pos:start="169:13" pos:end="169:51"><name pos:start="169:13" pos:end="169:18">aml_if</name><argument_list pos:start="169:19" pos:end="169:51">(<argument pos:start="169:20" pos:end="169:50"><expr pos:start="169:20" pos:end="169:50"><call pos:start="169:20" pos:end="169:50"><name pos:start="169:20" pos:end="169:28">aml_equal</name><argument_list pos:start="169:29" pos:end="169:50">(<argument pos:start="169:30" pos:end="169:37"><expr pos:start="169:30" pos:end="169:37"><name pos:start="169:30" pos:end="169:37">buf_size</name></expr></argument>, <argument pos:start="169:40" pos:end="169:49"><expr pos:start="169:40" pos:end="169:49"><call pos:start="169:40" pos:end="169:49"><name pos:start="169:40" pos:end="169:46">aml_int</name><argument_list pos:start="169:47" pos:end="169:49">(<argument pos:start="169:48" pos:end="169:48"><expr pos:start="169:48" pos:end="169:48"><literal type="number" pos:start="169:48" pos:end="169:48">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:39"><expr pos:start="171:5" pos:end="171:38"><call pos:start="171:5" pos:end="171:38"><name pos:start="171:5" pos:end="171:14">aml_append</name><argument_list pos:start="171:15" pos:end="171:38">(<argument pos:start="171:16" pos:end="171:20"><expr pos:start="171:16" pos:end="171:20"><name pos:start="171:16" pos:end="171:20">ifctx</name></expr></argument>, <argument pos:start="171:23" pos:end="171:37"><expr pos:start="171:23" pos:end="171:37"><call pos:start="171:23" pos:end="171:37"><name pos:start="171:23" pos:end="171:32">aml_return</name><argument_list pos:start="171:33" pos:end="171:37">(<argument pos:start="171:34" pos:end="171:36"><expr pos:start="171:34" pos:end="171:36"><name pos:start="171:34" pos:end="171:36">fit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:31"><expr pos:start="173:5" pos:end="173:30"><call pos:start="173:5" pos:end="173:30"><name pos:start="173:5" pos:end="173:14">aml_append</name><argument_list pos:start="173:15" pos:end="173:30">(<argument pos:start="173:16" pos:end="173:22"><expr pos:start="173:16" pos:end="173:22"><name pos:start="173:16" pos:end="173:22">elsectx</name></expr></argument>, <argument pos:start="173:25" pos:end="173:29"><expr pos:start="173:25" pos:end="173:29"><name pos:start="173:25" pos:end="173:29">ifctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="177:5" pos:end="177:28">/* update the offset. */</comment>

    <expr_stmt pos:start="179:5" pos:end="179:59"><expr pos:start="179:5" pos:end="179:58"><call pos:start="179:5" pos:end="179:58"><name pos:start="179:5" pos:end="179:14">aml_append</name><argument_list pos:start="179:15" pos:end="179:58">(<argument pos:start="179:16" pos:end="179:22"><expr pos:start="179:16" pos:end="179:22"><name pos:start="179:16" pos:end="179:22">elsectx</name></expr></argument>, <argument pos:start="179:25" pos:end="179:57"><expr pos:start="179:25" pos:end="179:57"><call pos:start="179:25" pos:end="179:57"><name pos:start="179:25" pos:end="179:31">aml_add</name><argument_list pos:start="179:32" pos:end="179:57">(<argument pos:start="179:33" pos:end="179:38"><expr pos:start="179:33" pos:end="179:38"><name pos:start="179:33" pos:end="179:38">offset</name></expr></argument>, <argument pos:start="179:41" pos:end="179:48"><expr pos:start="179:41" pos:end="179:48"><name pos:start="179:41" pos:end="179:48">buf_size</name></expr></argument>, <argument pos:start="179:51" pos:end="179:56"><expr pos:start="179:51" pos:end="179:56"><name pos:start="179:51" pos:end="179:56">offset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="181:5" pos:end="181:56">/* append the data we read out to the fit buffer. */</comment>

    <expr_stmt pos:start="183:5" pos:end="183:56"><expr pos:start="183:5" pos:end="183:55"><call pos:start="183:5" pos:end="183:55"><name pos:start="183:5" pos:end="183:14">aml_append</name><argument_list pos:start="183:15" pos:end="183:55">(<argument pos:start="183:16" pos:end="183:22"><expr pos:start="183:16" pos:end="183:22"><name pos:start="183:16" pos:end="183:22">elsectx</name></expr></argument>, <argument pos:start="183:25" pos:end="183:54"><expr pos:start="183:25" pos:end="183:54"><call pos:start="183:25" pos:end="183:54"><name pos:start="183:25" pos:end="183:39">aml_concatenate</name><argument_list pos:start="183:40" pos:end="183:54">(<argument pos:start="183:41" pos:end="183:43"><expr pos:start="183:41" pos:end="183:43"><name pos:start="183:41" pos:end="183:43">fit</name></expr></argument>, <argument pos:start="183:46" pos:end="183:48"><expr pos:start="183:46" pos:end="183:48"><name pos:start="183:46" pos:end="183:48">buf</name></expr></argument>, <argument pos:start="183:51" pos:end="183:53"><expr pos:start="183:51" pos:end="183:53"><name pos:start="183:51" pos:end="183:53">fit</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:34"><expr pos:start="185:5" pos:end="185:33"><call pos:start="185:5" pos:end="185:33"><name pos:start="185:5" pos:end="185:14">aml_append</name><argument_list pos:start="185:15" pos:end="185:33">(<argument pos:start="185:16" pos:end="185:23"><expr pos:start="185:16" pos:end="185:23"><name pos:start="185:16" pos:end="185:23">whilectx</name></expr></argument>, <argument pos:start="185:26" pos:end="185:32"><expr pos:start="185:26" pos:end="185:32"><name pos:start="185:26" pos:end="185:32">elsectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="187:5" pos:end="187:33"><expr pos:start="187:5" pos:end="187:32"><call pos:start="187:5" pos:end="187:32"><name pos:start="187:5" pos:end="187:14">aml_append</name><argument_list pos:start="187:15" pos:end="187:32">(<argument pos:start="187:16" pos:end="187:21"><expr pos:start="187:16" pos:end="187:21"><name pos:start="187:16" pos:end="187:21">method</name></expr></argument>, <argument pos:start="187:24" pos:end="187:31"><expr pos:start="187:24" pos:end="187:31"><name pos:start="187:24" pos:end="187:31">whilectx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="191:5" pos:end="191:28"><expr pos:start="191:5" pos:end="191:27"><call pos:start="191:5" pos:end="191:27"><name pos:start="191:5" pos:end="191:14">aml_append</name><argument_list pos:start="191:15" pos:end="191:27">(<argument pos:start="191:16" pos:end="191:18"><expr pos:start="191:16" pos:end="191:18"><name pos:start="191:16" pos:end="191:18">dev</name></expr></argument>, <argument pos:start="191:21" pos:end="191:26"><expr pos:start="191:21" pos:end="191:26"><name pos:start="191:21" pos:end="191:26">method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
