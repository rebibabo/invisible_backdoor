<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17426.c" pos:tabs="8"><function pos:start="1:1" pos:end="169:1"><type pos:start="1:1" pos:end="1:15"><specifier pos:start="1:1" pos:end="1:5">const</specifier> <name pos:start="1:7" pos:end="1:13">uint8_t</name> <modifier pos:start="1:15" pos:end="1:15">*</modifier></type><name pos:start="1:16" pos:end="1:33">ff_h264_decode_nal</name><parameter_list pos:start="1:34" pos:end="1:113">(<parameter pos:start="1:35" pos:end="1:48"><decl pos:start="1:35" pos:end="1:48"><type pos:start="1:35" pos:end="1:48"><name pos:start="1:35" pos:end="1:45">H264Context</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:48">h</name></decl></parameter>, <parameter pos:start="1:51" pos:end="1:68"><decl pos:start="1:51" pos:end="1:68"><type pos:start="1:51" pos:end="1:68"><specifier pos:start="1:51" pos:end="1:55">const</specifier> <name pos:start="1:57" pos:end="1:63">uint8_t</name> <modifier pos:start="1:65" pos:end="1:65">*</modifier></type><name pos:start="1:66" pos:end="1:68">src</name></decl></parameter>, <parameter pos:start="1:71" pos:end="1:85"><decl pos:start="1:71" pos:end="1:85"><type pos:start="1:71" pos:end="1:85"><name pos:start="1:71" pos:end="1:73">int</name> <modifier pos:start="1:75" pos:end="1:75">*</modifier></type><name pos:start="1:76" pos:end="1:85">dst_length</name></decl></parameter>, <parameter pos:start="1:88" pos:end="1:100"><decl pos:start="1:88" pos:end="1:100"><type pos:start="1:88" pos:end="1:100"><name pos:start="1:88" pos:end="1:90">int</name> <modifier pos:start="1:92" pos:end="1:92">*</modifier></type><name pos:start="1:93" pos:end="1:100">consumed</name></decl></parameter>, <parameter pos:start="1:103" pos:end="1:112"><decl pos:start="1:103" pos:end="1:112"><type pos:start="1:103" pos:end="1:112"><name pos:start="1:103" pos:end="1:105">int</name></type> <name pos:start="1:107" pos:end="1:112">length</name></decl></parameter>)</parameter_list><block pos:start="1:114" pos:end="169:1">{<block_content pos:start="3:5" pos:end="169:1">

    <decl_stmt pos:start="3:5" pos:end="3:18"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>, <decl pos:start="3:12" pos:end="3:13"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:12" pos:end="3:13">si</name></decl>, <decl pos:start="3:16" pos:end="3:17"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:16" pos:end="3:17">di</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:13"><name pos:start="5:5" pos:end="5:11">uint8_t</name> <modifier pos:start="5:13" pos:end="5:13">*</modifier></type><name pos:start="5:14" pos:end="5:16">dst</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:15"><decl pos:start="7:5" pos:end="7:14"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:14">bufidx</name></decl>;</decl_stmt>



<comment type="line" pos:start="11:1" pos:end="11:49">//    src[0]&amp;0x80;                //forbidden bit</comment>

    <expr_stmt pos:start="13:5" pos:end="13:30"><expr pos:start="13:5" pos:end="13:29"><name pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:5">h</name><operator pos:start="13:6" pos:end="13:7">-&gt;</operator><name pos:start="13:8" pos:end="13:18">nal_ref_idc</name></name><operator pos:start="13:19" pos:end="13:19">=</operator> <name pos:start="13:21" pos:end="13:26"><name pos:start="13:21" pos:end="13:23">src</name><index pos:start="13:24" pos:end="13:26">[<expr pos:start="13:25" pos:end="13:25"><literal type="number" pos:start="13:25" pos:end="13:25">0</literal></expr>]</index></name><operator pos:start="13:27" pos:end="13:28">&gt;&gt;</operator><literal type="number" pos:start="13:29" pos:end="13:29">5</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:34"><expr pos:start="15:5" pos:end="15:33"><name pos:start="15:5" pos:end="15:20"><name pos:start="15:5" pos:end="15:5">h</name><operator pos:start="15:6" pos:end="15:7">-&gt;</operator><name pos:start="15:8" pos:end="15:20">nal_unit_type</name></name><operator pos:start="15:21" pos:end="15:21">=</operator> <name pos:start="15:23" pos:end="15:28"><name pos:start="15:23" pos:end="15:25">src</name><index pos:start="15:26" pos:end="15:28">[<expr pos:start="15:27" pos:end="15:27"><literal type="number" pos:start="15:27" pos:end="15:27">0</literal></expr>]</index></name><operator pos:start="15:29" pos:end="15:29">&amp;</operator><literal type="number" pos:start="15:30" pos:end="15:33">0x1F</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="19:5" pos:end="19:10"><expr pos:start="19:5" pos:end="19:9"><name pos:start="19:5" pos:end="19:7">src</name><operator pos:start="19:8" pos:end="19:9">++</operator></expr>;</expr_stmt> <expr_stmt pos:start="19:12" pos:end="28:0"><expr pos:start="19:12" pos:end="19:19"><name pos:start="19:12" pos:end="19:17">length</name><operator pos:start="19:18" pos:end="19:19">--</operator></expr>;</expr_stmt>



<cpp:if pos:start="23:1" pos:end="23:23">#<cpp:directive pos:start="23:2" pos:end="23:3">if</cpp:directive> <expr pos:start="23:5" pos:end="23:23"><name pos:start="23:5" pos:end="23:23">HAVE_FAST_UNALIGNED</name></expr></cpp:if>

<cpp:if pos:start="25:1" pos:end="25:20"># <cpp:directive pos:start="25:3" pos:end="25:4">if</cpp:directive> <expr pos:start="25:6" pos:end="25:20"><name pos:start="25:6" pos:end="25:20">HAVE_FAST_64BIT</name></expr></cpp:if>

<cpp:define pos:start="27:1" pos:end="27:15">#   <cpp:directive pos:start="27:5" pos:end="27:10">define</cpp:directive> <cpp:macro pos:start="27:12" pos:end="27:13"><name pos:start="27:12" pos:end="27:13">RS</name></cpp:macro> <cpp:value pos:start="27:15" pos:end="27:15">7</cpp:value></cpp:define>

    <for pos:start="29:5" pos:end="169:1">for<control pos:start="29:8" pos:end="29:30">(<init pos:start="29:9" pos:end="29:12"><expr pos:start="29:9" pos:end="29:11"><name pos:start="29:9" pos:end="29:9">i</name><operator pos:start="29:10" pos:end="29:10">=</operator><literal type="number" pos:start="29:11" pos:end="29:11">0</literal></expr>;</init> <condition pos:start="29:14" pos:end="29:24"><expr pos:start="29:14" pos:end="29:23"><name pos:start="29:14" pos:end="29:14">i</name><operator pos:start="29:15" pos:end="29:15">+</operator><literal type="number" pos:start="29:16" pos:end="29:16">1</literal><operator pos:start="29:17" pos:end="29:17">&lt;</operator><name pos:start="29:18" pos:end="29:23">length</name></expr>;</condition> <incr pos:start="29:26" pos:end="29:29"><expr pos:start="29:26" pos:end="29:29"><name pos:start="29:26" pos:end="29:26">i</name><operator pos:start="29:27" pos:end="29:28">+=</operator><literal type="number" pos:start="29:29" pos:end="29:29">9</literal></expr></incr>)</control><block pos:start="29:31" pos:end="169:1">{<block_content pos:start="31:9" pos:end="169:1">

        <if_stmt pos:start="31:9" pos:end="169:1"><if pos:start="31:9" pos:end="169:1">if<condition pos:start="31:11" pos:end="36:0">(<expr pos:start="31:12" pos:end="31:100"><operator pos:start="31:12" pos:end="31:12">!</operator><operator pos:start="31:13" pos:end="31:13">(</operator><operator pos:start="31:14" pos:end="31:14">(</operator><operator pos:start="31:15" pos:end="31:15">~</operator><call pos:start="31:16" pos:end="31:30"><name pos:start="31:16" pos:end="31:23">AV_RN64A</name><argument_list pos:start="31:24" pos:end="31:30">(<argument pos:start="31:25" pos:end="31:29"><expr pos:start="31:25" pos:end="31:29"><name pos:start="31:25" pos:end="31:27">src</name><operator pos:start="31:28" pos:end="31:28">+</operator><name pos:start="31:29" pos:end="31:29">i</name></expr></argument>)</argument_list></call> <operator pos:start="31:32" pos:end="31:32">&amp;</operator> <operator pos:start="31:34" pos:end="31:34">(</operator><call pos:start="31:35" pos:end="31:49"><name pos:start="31:35" pos:end="31:42">AV_RN64A</name><argument_list pos:start="31:43" pos:end="31:49">(<argument pos:start="31:44" pos:end="31:48"><expr pos:start="31:44" pos:end="31:48"><name pos:start="31:44" pos:end="31:46">src</name><operator pos:start="31:47" pos:end="31:47">+</operator><name pos:start="31:48" pos:end="31:48">i</name></expr></argument>)</argument_list></call> <operator pos:start="31:51" pos:end="31:51">-</operator> <literal type="number" pos:start="31:53" pos:end="31:73">0x0100010001000101ULL</literal><operator pos:start="31:74" pos:end="31:74">)</operator><operator pos:start="31:75" pos:end="31:75">)</operator> <operator pos:start="31:77" pos:end="31:77">&amp;</operator> <literal type="number" pos:start="31:79" pos:end="31:99">0x8000800080008080ULL</literal><operator pos:start="31:100" pos:end="31:100">)</operator></expr>)</condition><block type="pseudo" pos:start="37:5" pos:end="169:1"><block_content pos:start="37:5" pos:end="169:1">

<cpp:else pos:start="33:1" pos:end="33:6"># <cpp:directive pos:start="33:3" pos:end="33:6">else</cpp:directive></cpp:else>

<cpp:define pos:start="35:1" pos:end="35:15">#   <cpp:directive pos:start="35:5" pos:end="35:10">define</cpp:directive> <cpp:macro pos:start="35:12" pos:end="35:13"><name pos:start="35:12" pos:end="35:13">RS</name></cpp:macro> <cpp:value pos:start="35:15" pos:end="35:15">3</cpp:value></cpp:define>

    <for pos:start="37:5" pos:end="169:1">for<control pos:start="37:8" pos:end="37:30">(<init pos:start="37:9" pos:end="37:12"><expr pos:start="37:9" pos:end="37:11"><name pos:start="37:9" pos:end="37:9">i</name><operator pos:start="37:10" pos:end="37:10">=</operator><literal type="number" pos:start="37:11" pos:end="37:11">0</literal></expr>;</init> <condition pos:start="37:14" pos:end="37:24"><expr pos:start="37:14" pos:end="37:23"><name pos:start="37:14" pos:end="37:14">i</name><operator pos:start="37:15" pos:end="37:15">+</operator><literal type="number" pos:start="37:16" pos:end="37:16">1</literal><operator pos:start="37:17" pos:end="37:17">&lt;</operator><name pos:start="37:18" pos:end="37:23">length</name></expr>;</condition> <incr pos:start="37:26" pos:end="37:29"><expr pos:start="37:26" pos:end="37:29"><name pos:start="37:26" pos:end="37:26">i</name><operator pos:start="37:27" pos:end="37:28">+=</operator><literal type="number" pos:start="37:29" pos:end="37:29">5</literal></expr></incr>)</control><block pos:start="37:31" pos:end="169:1">{<block_content pos:start="39:9" pos:end="167:15">

        <if_stmt pos:start="39:9" pos:end="43:21"><if pos:start="39:9" pos:end="43:21">if<condition pos:start="39:11" pos:end="42:0">(<expr pos:start="39:12" pos:end="39:80"><operator pos:start="39:12" pos:end="39:12">!</operator><operator pos:start="39:13" pos:end="39:13">(</operator><operator pos:start="39:14" pos:end="39:14">(</operator><operator pos:start="39:15" pos:end="39:15">~</operator><call pos:start="39:16" pos:end="39:30"><name pos:start="39:16" pos:end="39:23">AV_RN32A</name><argument_list pos:start="39:24" pos:end="39:30">(<argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:27">src</name><operator pos:start="39:28" pos:end="39:28">+</operator><name pos:start="39:29" pos:end="39:29">i</name></expr></argument>)</argument_list></call> <operator pos:start="39:32" pos:end="39:32">&amp;</operator> <operator pos:start="39:34" pos:end="39:34">(</operator><call pos:start="39:35" pos:end="39:49"><name pos:start="39:35" pos:end="39:42">AV_RN32A</name><argument_list pos:start="39:43" pos:end="39:49">(<argument pos:start="39:44" pos:end="39:48"><expr pos:start="39:44" pos:end="39:48"><name pos:start="39:44" pos:end="39:46">src</name><operator pos:start="39:47" pos:end="39:47">+</operator><name pos:start="39:48" pos:end="39:48">i</name></expr></argument>)</argument_list></call> <operator pos:start="39:51" pos:end="39:51">-</operator> <literal type="number" pos:start="39:53" pos:end="39:63">0x01000101U</literal><operator pos:start="39:64" pos:end="39:64">)</operator><operator pos:start="39:65" pos:end="39:65">)</operator> <operator pos:start="39:67" pos:end="39:67">&amp;</operator> <literal type="number" pos:start="39:69" pos:end="39:79">0x80008080U</literal><operator pos:start="39:80" pos:end="39:80">)</operator></expr>)</condition><block type="pseudo" pos:start="43:13" pos:end="43:21"><block_content pos:start="43:13" pos:end="43:21">

<cpp:endif pos:start="41:1" pos:end="41:7"># <cpp:directive pos:start="41:3" pos:end="41:7">endif</cpp:directive></cpp:endif>

            <continue pos:start="43:13" pos:end="43:21">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="45:9" pos:end="45:31"><if pos:start="45:9" pos:end="45:31">if<condition pos:start="45:11" pos:end="45:26">(<expr pos:start="45:12" pos:end="45:25"><name pos:start="45:12" pos:end="45:12">i</name><operator pos:start="45:13" pos:end="45:13">&gt;</operator><literal type="number" pos:start="45:14" pos:end="45:14">0</literal> <operator pos:start="45:16" pos:end="45:17">&amp;&amp;</operator> <operator pos:start="45:19" pos:end="45:19">!</operator><name pos:start="45:20" pos:end="45:25"><name pos:start="45:20" pos:end="45:22">src</name><index pos:start="45:23" pos:end="45:25">[<expr pos:start="45:24" pos:end="45:24"><name pos:start="45:24" pos:end="45:24">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="45:28" pos:end="45:31"><block_content pos:start="45:28" pos:end="45:31"> <expr_stmt pos:start="45:28" pos:end="45:31"><expr pos:start="45:28" pos:end="45:30"><name pos:start="45:28" pos:end="45:28">i</name><operator pos:start="45:29" pos:end="45:30">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <while pos:start="47:9" pos:end="52:0">while<condition pos:start="47:14" pos:end="47:21">(<expr pos:start="47:15" pos:end="47:20"><name pos:start="47:15" pos:end="47:20"><name pos:start="47:15" pos:end="47:17">src</name><index pos:start="47:18" pos:end="47:20">[<expr pos:start="47:19" pos:end="47:19"><name pos:start="47:19" pos:end="47:19">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="47:23" pos:end="52:0"><block_content pos:start="47:23" pos:end="52:0"> <expr_stmt pos:start="47:23" pos:end="52:0"><expr pos:start="47:23" pos:end="47:25"><name pos:start="47:23" pos:end="47:23">i</name><operator pos:start="47:24" pos:end="47:25">++</operator></expr>;</expr_stmt></block_content></block></while>

<cpp:else pos:start="49:1" pos:end="49:5">#<cpp:directive pos:start="49:2" pos:end="49:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="51:1" pos:end="51:15">#   <cpp:directive pos:start="51:5" pos:end="51:10">define</cpp:directive> <cpp:macro pos:start="51:12" pos:end="51:13"><name pos:start="51:12" pos:end="51:13">RS</name></cpp:macro> <cpp:value pos:start="51:15" pos:end="51:15">0</cpp:value></cpp:define>

    <for pos:start="53:5" pos:end="77:5">for<control pos:start="53:8" pos:end="53:30">(<init pos:start="53:9" pos:end="53:12"><expr pos:start="53:9" pos:end="53:11"><name pos:start="53:9" pos:end="53:9">i</name><operator pos:start="53:10" pos:end="53:10">=</operator><literal type="number" pos:start="53:11" pos:end="53:11">0</literal></expr>;</init> <condition pos:start="53:14" pos:end="53:24"><expr pos:start="53:14" pos:end="53:23"><name pos:start="53:14" pos:end="53:14">i</name><operator pos:start="53:15" pos:end="53:15">+</operator><literal type="number" pos:start="53:16" pos:end="53:16">1</literal><operator pos:start="53:17" pos:end="53:17">&lt;</operator><name pos:start="53:18" pos:end="53:23">length</name></expr>;</condition> <incr pos:start="53:26" pos:end="53:29"><expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:26">i</name><operator pos:start="53:27" pos:end="53:28">+=</operator><literal type="number" pos:start="53:29" pos:end="53:29">2</literal></expr></incr>)</control><block pos:start="53:31" pos:end="77:5">{<block_content pos:start="55:9" pos:end="75:15">

        <if_stmt pos:start="55:9" pos:end="55:28"><if pos:start="55:9" pos:end="55:28">if<condition pos:start="55:11" pos:end="55:18">(<expr pos:start="55:12" pos:end="55:17"><name pos:start="55:12" pos:end="55:17"><name pos:start="55:12" pos:end="55:14">src</name><index pos:start="55:15" pos:end="55:17">[<expr pos:start="55:16" pos:end="55:16"><name pos:start="55:16" pos:end="55:16">i</name></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="55:20" pos:end="55:28"><block_content pos:start="55:20" pos:end="55:28"> <continue pos:start="55:20" pos:end="55:28">continue;</continue></block_content></block></if></if_stmt>

        <if_stmt pos:start="57:9" pos:end="60:0"><if pos:start="57:9" pos:end="60:0">if<condition pos:start="57:11" pos:end="57:30">(<expr pos:start="57:12" pos:end="57:29"><name pos:start="57:12" pos:end="57:12">i</name><operator pos:start="57:13" pos:end="57:13">&gt;</operator><literal type="number" pos:start="57:14" pos:end="57:14">0</literal> <operator pos:start="57:16" pos:end="57:17">&amp;&amp;</operator> <name pos:start="57:19" pos:end="57:26"><name pos:start="57:19" pos:end="57:21">src</name><index pos:start="57:22" pos:end="57:26">[<expr pos:start="57:23" pos:end="57:25"><name pos:start="57:23" pos:end="57:23">i</name><operator pos:start="57:24" pos:end="57:24">-</operator><literal type="number" pos:start="57:25" pos:end="57:25">1</literal></expr>]</index></name><operator pos:start="57:27" pos:end="57:28">==</operator><literal type="number" pos:start="57:29" pos:end="57:29">0</literal></expr>)</condition><block type="pseudo" pos:start="57:32" pos:end="60:0"><block_content pos:start="57:32" pos:end="60:0"> <expr_stmt pos:start="57:32" pos:end="60:0"><expr pos:start="57:32" pos:end="57:34"><name pos:start="57:32" pos:end="57:32">i</name><operator pos:start="57:33" pos:end="57:34">--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif pos:start="59:1" pos:end="59:6">#<cpp:directive pos:start="59:2" pos:end="59:6">endif</cpp:directive></cpp:endif>

        <if_stmt pos:start="61:9" pos:end="73:9"><if pos:start="61:9" pos:end="73:9">if<condition pos:start="61:11" pos:end="61:52">(<expr pos:start="61:12" pos:end="61:51"><name pos:start="61:12" pos:end="61:12">i</name><operator pos:start="61:13" pos:end="61:13">+</operator><literal type="number" pos:start="61:14" pos:end="61:14">2</literal><operator pos:start="61:15" pos:end="61:15">&lt;</operator><name pos:start="61:16" pos:end="61:21">length</name> <operator pos:start="61:23" pos:end="61:24">&amp;&amp;</operator> <name pos:start="61:26" pos:end="61:33"><name pos:start="61:26" pos:end="61:28">src</name><index pos:start="61:29" pos:end="61:33">[<expr pos:start="61:30" pos:end="61:32"><name pos:start="61:30" pos:end="61:30">i</name><operator pos:start="61:31" pos:end="61:31">+</operator><literal type="number" pos:start="61:32" pos:end="61:32">1</literal></expr>]</index></name><operator pos:start="61:34" pos:end="61:35">==</operator><literal type="number" pos:start="61:36" pos:end="61:36">0</literal> <operator pos:start="61:38" pos:end="61:39">&amp;&amp;</operator> <name pos:start="61:41" pos:end="61:48"><name pos:start="61:41" pos:end="61:43">src</name><index pos:start="61:44" pos:end="61:48">[<expr pos:start="61:45" pos:end="61:47"><name pos:start="61:45" pos:end="61:45">i</name><operator pos:start="61:46" pos:end="61:46">+</operator><literal type="number" pos:start="61:47" pos:end="61:47">2</literal></expr>]</index></name><operator pos:start="61:49" pos:end="61:50">&lt;=</operator><literal type="number" pos:start="61:51" pos:end="61:51">3</literal></expr>)</condition><block pos:start="61:53" pos:end="73:9">{<block_content pos:start="63:13" pos:end="71:18">

            <if_stmt pos:start="63:13" pos:end="69:13"><if pos:start="63:13" pos:end="69:13">if<condition pos:start="63:15" pos:end="63:27">(<expr pos:start="63:16" pos:end="63:26"><name pos:start="63:16" pos:end="63:23"><name pos:start="63:16" pos:end="63:18">src</name><index pos:start="63:19" pos:end="63:23">[<expr pos:start="63:20" pos:end="63:22"><name pos:start="63:20" pos:end="63:20">i</name><operator pos:start="63:21" pos:end="63:21">+</operator><literal type="number" pos:start="63:22" pos:end="63:22">2</literal></expr>]</index></name><operator pos:start="63:24" pos:end="63:25">!=</operator><literal type="number" pos:start="63:26" pos:end="63:26">3</literal></expr>)</condition><block pos:start="63:28" pos:end="69:13">{<block_content pos:start="67:17" pos:end="67:25">

                <comment type="block" pos:start="65:17" pos:end="65:59">/* startcode, so we must be past the end */</comment>

                <expr_stmt pos:start="67:17" pos:end="67:25"><expr pos:start="67:17" pos:end="67:24"><name pos:start="67:17" pos:end="67:22">length</name><operator pos:start="67:23" pos:end="67:23">=</operator><name pos:start="67:24" pos:end="67:24">i</name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:15"><expr pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">i</name><operator pos:start="75:10" pos:end="75:11">-=</operator> <name pos:start="75:13" pos:end="75:14">RS</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <if_stmt pos:start="81:5" pos:end="89:5"><if pos:start="81:5" pos:end="89:5">if<condition pos:start="81:7" pos:end="81:19">(<expr pos:start="81:8" pos:end="81:18"><name pos:start="81:8" pos:end="81:8">i</name><operator pos:start="81:9" pos:end="81:10">&gt;=</operator><name pos:start="81:11" pos:end="81:16">length</name><operator pos:start="81:17" pos:end="81:17">-</operator><literal type="number" pos:start="81:18" pos:end="81:18">1</literal></expr>)</condition><block pos:start="81:20" pos:end="89:5">{<block_content pos:start="83:9" pos:end="87:19"> <comment type="line" pos:start="81:22" pos:end="81:35">//no escaped 0</comment>

        <expr_stmt pos:start="83:9" pos:end="83:28"><expr pos:start="83:9" pos:end="83:27"><operator pos:start="83:9" pos:end="83:9">*</operator><name pos:start="83:10" pos:end="83:19">dst_length</name><operator pos:start="83:20" pos:end="83:20">=</operator> <name pos:start="83:22" pos:end="83:27">length</name></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:28"><expr pos:start="85:9" pos:end="85:27"><operator pos:start="85:9" pos:end="85:9">*</operator><name pos:start="85:10" pos:end="85:17">consumed</name><operator pos:start="85:18" pos:end="85:18">=</operator> <name pos:start="85:20" pos:end="85:25">length</name><operator pos:start="85:26" pos:end="85:26">+</operator><literal type="number" pos:start="85:27" pos:end="85:27">1</literal></expr>;</expr_stmt> <comment type="line" pos:start="85:30" pos:end="85:48">//+1 for the header</comment>

        <return pos:start="87:9" pos:end="87:19">return <expr pos:start="87:16" pos:end="87:18"><name pos:start="87:16" pos:end="87:18">src</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="93:5" pos:end="93:49"><expr pos:start="93:5" pos:end="93:48"><name pos:start="93:5" pos:end="93:10">bufidx</name> <operator pos:start="93:12" pos:end="93:12">=</operator> <ternary pos:start="93:14" pos:end="93:48"><condition pos:start="93:14" pos:end="93:42"><expr pos:start="93:14" pos:end="93:40"><name pos:start="93:14" pos:end="93:29"><name pos:start="93:14" pos:end="93:14">h</name><operator pos:start="93:15" pos:end="93:16">-&gt;</operator><name pos:start="93:17" pos:end="93:29">nal_unit_type</name></name> <operator pos:start="93:31" pos:end="93:32">==</operator> <name pos:start="93:34" pos:end="93:40">NAL_DPC</name></expr> ?</condition><then pos:start="93:44" pos:end="93:44"> <expr pos:start="93:44" pos:end="93:44"><literal type="number" pos:start="93:44" pos:end="93:44">1</literal></expr> </then><else pos:start="93:46" pos:end="93:48">: <expr pos:start="93:48" pos:end="93:48"><literal type="number" pos:start="93:48" pos:end="93:48">0</literal></expr></else></ternary></expr>;</expr_stmt> <comment type="line" pos:start="93:51" pos:end="93:92">// use second escape buffer for inter data</comment>

    <expr_stmt pos:start="95:5" pos:end="95:111"><expr pos:start="95:5" pos:end="95:110"><call pos:start="95:5" pos:end="95:110"><name pos:start="95:5" pos:end="95:18">av_fast_malloc</name><argument_list pos:start="95:19" pos:end="95:110">(<argument pos:start="95:20" pos:end="95:42"><expr pos:start="95:20" pos:end="95:42"><operator pos:start="95:20" pos:end="95:20">&amp;</operator><name pos:start="95:21" pos:end="95:42"><name pos:start="95:21" pos:end="95:21">h</name><operator pos:start="95:22" pos:end="95:23">-&gt;</operator><name pos:start="95:24" pos:end="95:34">rbsp_buffer</name><index pos:start="95:35" pos:end="95:42">[<expr pos:start="95:36" pos:end="95:41"><name pos:start="95:36" pos:end="95:41">bufidx</name></expr>]</index></name></expr></argument>, <argument pos:start="95:45" pos:end="95:72"><expr pos:start="95:45" pos:end="95:72"><operator pos:start="95:45" pos:end="95:45">&amp;</operator><name pos:start="95:46" pos:end="95:72"><name pos:start="95:46" pos:end="95:46">h</name><operator pos:start="95:47" pos:end="95:48">-&gt;</operator><name pos:start="95:49" pos:end="95:64">rbsp_buffer_size</name><index pos:start="95:65" pos:end="95:72">[<expr pos:start="95:66" pos:end="95:71"><name pos:start="95:66" pos:end="95:71">bufidx</name></expr>]</index></name></expr></argument>, <argument pos:start="95:75" pos:end="95:109"><expr pos:start="95:75" pos:end="95:109"><name pos:start="95:75" pos:end="95:80">length</name><operator pos:start="95:81" pos:end="95:81">+</operator><name pos:start="95:82" pos:end="95:109">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="97:5" pos:end="97:32"><expr pos:start="97:5" pos:end="97:31"><name pos:start="97:5" pos:end="97:7">dst</name><operator pos:start="97:8" pos:end="97:8">=</operator> <name pos:start="97:10" pos:end="97:31"><name pos:start="97:10" pos:end="97:10">h</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:23">rbsp_buffer</name><index pos:start="97:24" pos:end="97:31">[<expr pos:start="97:25" pos:end="97:30"><name pos:start="97:25" pos:end="97:30">bufidx</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="101:5" pos:end="105:5"><if pos:start="101:5" pos:end="105:5">if <condition pos:start="101:8" pos:end="101:20">(<expr pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:11">dst</name> <operator pos:start="101:13" pos:end="101:14">==</operator> <name pos:start="101:16" pos:end="101:19">NULL</name></expr>)</condition><block pos:start="101:21" pos:end="105:5">{<block_content pos:start="103:9" pos:end="103:20">

        <return pos:start="103:9" pos:end="103:20">return <expr pos:start="103:16" pos:end="103:19"><name pos:start="103:16" pos:end="103:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



<comment type="line" pos:start="109:1" pos:end="109:27">//printf("decoding esc\n");</comment>

    <expr_stmt pos:start="111:5" pos:end="111:24"><expr pos:start="111:5" pos:end="111:23"><call pos:start="111:5" pos:end="111:23"><name pos:start="111:5" pos:end="111:10">memcpy</name><argument_list pos:start="111:11" pos:end="111:23">(<argument pos:start="111:12" pos:end="111:14"><expr pos:start="111:12" pos:end="111:14"><name pos:start="111:12" pos:end="111:14">dst</name></expr></argument>, <argument pos:start="111:17" pos:end="111:19"><expr pos:start="111:17" pos:end="111:19"><name pos:start="111:17" pos:end="111:19">src</name></expr></argument>, <argument pos:start="111:22" pos:end="111:22"><expr pos:start="111:22" pos:end="111:22"><name pos:start="111:22" pos:end="111:22">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:12"><expr pos:start="113:5" pos:end="113:11"><name pos:start="113:5" pos:end="113:6">si</name><operator pos:start="113:7" pos:end="113:7">=</operator><name pos:start="113:8" pos:end="113:9">di</name><operator pos:start="113:10" pos:end="113:10">=</operator><name pos:start="113:11" pos:end="113:11">i</name></expr>;</expr_stmt>

    <while pos:start="115:5" pos:end="147:5">while<condition pos:start="115:10" pos:end="115:22">(<expr pos:start="115:11" pos:end="115:21"><name pos:start="115:11" pos:end="115:12">si</name><operator pos:start="115:13" pos:end="115:13">+</operator><literal type="number" pos:start="115:14" pos:end="115:14">2</literal><operator pos:start="115:15" pos:end="115:15">&lt;</operator><name pos:start="115:16" pos:end="115:21">length</name></expr>)</condition><block pos:start="115:23" pos:end="147:5">{<block_content pos:start="119:9" pos:end="145:29">

        <comment type="line" pos:start="117:9" pos:end="117:43">//remove escapes (very rare 1:2^22)</comment>

        <if_stmt pos:start="119:9" pos:end="141:9"><if pos:start="119:9" pos:end="125:9">if<condition pos:start="119:11" pos:end="119:23">(<expr pos:start="119:12" pos:end="119:22"><name pos:start="119:12" pos:end="119:20"><name pos:start="119:12" pos:end="119:14">src</name><index pos:start="119:15" pos:end="119:20">[<expr pos:start="119:16" pos:end="119:19"><name pos:start="119:16" pos:end="119:17">si</name><operator pos:start="119:18" pos:end="119:18">+</operator><literal type="number" pos:start="119:19" pos:end="119:19">2</literal></expr>]</index></name><operator pos:start="119:21" pos:end="119:21">&gt;</operator><literal type="number" pos:start="119:22" pos:end="119:22">3</literal></expr>)</condition><block pos:start="119:24" pos:end="125:9">{<block_content pos:start="121:13" pos:end="123:33">

            <expr_stmt pos:start="121:13" pos:end="121:33"><expr pos:start="121:13" pos:end="121:32"><name pos:start="121:13" pos:end="121:21"><name pos:start="121:13" pos:end="121:15">dst</name><index pos:start="121:16" pos:end="121:21">[<expr pos:start="121:17" pos:end="121:20"><name pos:start="121:17" pos:end="121:18">di</name><operator pos:start="121:19" pos:end="121:20">++</operator></expr>]</index></name><operator pos:start="121:22" pos:end="121:22">=</operator> <name pos:start="121:24" pos:end="121:32"><name pos:start="121:24" pos:end="121:26">src</name><index pos:start="121:27" pos:end="121:32">[<expr pos:start="121:28" pos:end="121:31"><name pos:start="121:28" pos:end="121:29">si</name><operator pos:start="121:30" pos:end="121:31">++</operator></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:33"><expr pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:21"><name pos:start="123:13" pos:end="123:15">dst</name><index pos:start="123:16" pos:end="123:21">[<expr pos:start="123:17" pos:end="123:20"><name pos:start="123:17" pos:end="123:18">di</name><operator pos:start="123:19" pos:end="123:20">++</operator></expr>]</index></name><operator pos:start="123:22" pos:end="123:22">=</operator> <name pos:start="123:24" pos:end="123:32"><name pos:start="123:24" pos:end="123:26">src</name><index pos:start="123:27" pos:end="123:32">[<expr pos:start="123:28" pos:end="123:31"><name pos:start="123:28" pos:end="123:29">si</name><operator pos:start="123:30" pos:end="123:31">++</operator></expr>]</index></name></expr>;</expr_stmt>

        </block_content>}</block></if><if type="elseif" pos:start="125:10" pos:end="141:9">else if<condition pos:start="125:17" pos:end="125:44">(<expr pos:start="125:18" pos:end="125:43"><name pos:start="125:18" pos:end="125:24"><name pos:start="125:18" pos:end="125:20">src</name><index pos:start="125:21" pos:end="125:24">[<expr pos:start="125:22" pos:end="125:23"><name pos:start="125:22" pos:end="125:23">si</name></expr>]</index></name><operator pos:start="125:25" pos:end="125:26">==</operator><literal type="number" pos:start="125:27" pos:end="125:27">0</literal> <operator pos:start="125:29" pos:end="125:30">&amp;&amp;</operator> <name pos:start="125:32" pos:end="125:40"><name pos:start="125:32" pos:end="125:34">src</name><index pos:start="125:35" pos:end="125:40">[<expr pos:start="125:36" pos:end="125:39"><name pos:start="125:36" pos:end="125:37">si</name><operator pos:start="125:38" pos:end="125:38">+</operator><literal type="number" pos:start="125:39" pos:end="125:39">1</literal></expr>]</index></name><operator pos:start="125:41" pos:end="125:42">==</operator><literal type="number" pos:start="125:43" pos:end="125:43">0</literal></expr>)</condition><block pos:start="125:45" pos:end="141:9">{<block_content pos:start="127:13" pos:end="139:25">

            <if_stmt pos:start="127:13" pos:end="139:25"><if pos:start="127:13" pos:end="137:13">if<condition pos:start="127:15" pos:end="127:28">(<expr pos:start="127:16" pos:end="127:27"><name pos:start="127:16" pos:end="127:24"><name pos:start="127:16" pos:end="127:18">src</name><index pos:start="127:19" pos:end="127:24">[<expr pos:start="127:20" pos:end="127:23"><name pos:start="127:20" pos:end="127:21">si</name><operator pos:start="127:22" pos:end="127:22">+</operator><literal type="number" pos:start="127:23" pos:end="127:23">2</literal></expr>]</index></name><operator pos:start="127:25" pos:end="127:26">==</operator><literal type="number" pos:start="127:27" pos:end="127:27">3</literal></expr>)</condition><block pos:start="127:29" pos:end="137:13">{<block_content pos:start="129:17" pos:end="135:25"> <comment type="line" pos:start="127:31" pos:end="127:38">//escape</comment>

                <expr_stmt pos:start="129:17" pos:end="129:29"><expr pos:start="129:17" pos:end="129:28"><name pos:start="129:17" pos:end="129:25"><name pos:start="129:17" pos:end="129:19">dst</name><index pos:start="129:20" pos:end="129:25">[<expr pos:start="129:21" pos:end="129:24"><name pos:start="129:21" pos:end="129:22">di</name><operator pos:start="129:23" pos:end="129:24">++</operator></expr>]</index></name><operator pos:start="129:26" pos:end="129:26">=</operator> <literal type="number" pos:start="129:28" pos:end="129:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="131:17" pos:end="131:29"><expr pos:start="131:17" pos:end="131:28"><name pos:start="131:17" pos:end="131:25"><name pos:start="131:17" pos:end="131:19">dst</name><index pos:start="131:20" pos:end="131:25">[<expr pos:start="131:21" pos:end="131:24"><name pos:start="131:21" pos:end="131:22">di</name><operator pos:start="131:23" pos:end="131:24">++</operator></expr>]</index></name><operator pos:start="131:26" pos:end="131:26">=</operator> <literal type="number" pos:start="131:28" pos:end="131:28">0</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="133:17" pos:end="133:22"><expr pos:start="133:17" pos:end="133:21"><name pos:start="133:17" pos:end="133:18">si</name><operator pos:start="133:19" pos:end="133:20">+=</operator><literal type="number" pos:start="133:21" pos:end="133:21">3</literal></expr>;</expr_stmt>

                <continue pos:start="135:17" pos:end="135:25">continue;</continue>

            </block_content>}</block></if><else pos:start="137:14" pos:end="139:25">else<block type="pseudo" pos:start="139:17" pos:end="139:25"><block_content pos:start="139:17" pos:end="139:25"> <comment type="line" pos:start="137:19" pos:end="137:35">//next start code</comment>

                <goto pos:start="139:17" pos:end="139:25">goto <name pos:start="139:22" pos:end="139:24">nsc</name>;</goto></block_content></block></else></if_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="145:9" pos:end="145:29"><expr pos:start="145:9" pos:end="145:28"><name pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:11">dst</name><index pos:start="145:12" pos:end="145:17">[<expr pos:start="145:13" pos:end="145:16"><name pos:start="145:13" pos:end="145:14">di</name><operator pos:start="145:15" pos:end="145:16">++</operator></expr>]</index></name><operator pos:start="145:18" pos:end="145:18">=</operator> <name pos:start="145:20" pos:end="145:28"><name pos:start="145:20" pos:end="145:22">src</name><index pos:start="145:23" pos:end="145:28">[<expr pos:start="145:24" pos:end="145:27"><name pos:start="145:24" pos:end="145:25">si</name><operator pos:start="145:26" pos:end="145:27">++</operator></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></while>

    <while pos:start="149:5" pos:end="151:29">while<condition pos:start="149:10" pos:end="149:20">(<expr pos:start="149:11" pos:end="149:19"><name pos:start="149:11" pos:end="149:12">si</name><operator pos:start="149:13" pos:end="149:13">&lt;</operator><name pos:start="149:14" pos:end="149:19">length</name></expr>)</condition><block type="pseudo" pos:start="151:9" pos:end="151:29"><block_content pos:start="151:9" pos:end="151:29">

        <expr_stmt pos:start="151:9" pos:end="151:29"><expr pos:start="151:9" pos:end="151:28"><name pos:start="151:9" pos:end="151:17"><name pos:start="151:9" pos:end="151:11">dst</name><index pos:start="151:12" pos:end="151:17">[<expr pos:start="151:13" pos:end="151:16"><name pos:start="151:13" pos:end="151:14">di</name><operator pos:start="151:15" pos:end="151:16">++</operator></expr>]</index></name><operator pos:start="151:18" pos:end="151:18">=</operator> <name pos:start="151:20" pos:end="151:28"><name pos:start="151:20" pos:end="151:22">src</name><index pos:start="151:23" pos:end="151:28">[<expr pos:start="151:24" pos:end="151:27"><name pos:start="151:24" pos:end="151:25">si</name><operator pos:start="151:26" pos:end="151:27">++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></while>

<label pos:start="153:1" pos:end="153:4"><name pos:start="153:1" pos:end="153:3">nsc</name>:</label>



    <expr_stmt pos:start="157:5" pos:end="157:52"><expr pos:start="157:5" pos:end="157:51"><call pos:start="157:5" pos:end="157:51"><name pos:start="157:5" pos:end="157:10">memset</name><argument_list pos:start="157:11" pos:end="157:51">(<argument pos:start="157:12" pos:end="157:17"><expr pos:start="157:12" pos:end="157:17"><name pos:start="157:12" pos:end="157:14">dst</name><operator pos:start="157:15" pos:end="157:15">+</operator><name pos:start="157:16" pos:end="157:17">di</name></expr></argument>, <argument pos:start="157:20" pos:end="157:20"><expr pos:start="157:20" pos:end="157:20"><literal type="number" pos:start="157:20" pos:end="157:20">0</literal></expr></argument>, <argument pos:start="157:23" pos:end="157:50"><expr pos:start="157:23" pos:end="157:50"><name pos:start="157:23" pos:end="157:50">FF_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="161:5" pos:end="161:20"><expr pos:start="161:5" pos:end="161:19"><operator pos:start="161:5" pos:end="161:5">*</operator><name pos:start="161:6" pos:end="161:15">dst_length</name><operator pos:start="161:16" pos:end="161:16">=</operator> <name pos:start="161:18" pos:end="161:19">di</name></expr>;</expr_stmt>

    <expr_stmt pos:start="163:5" pos:end="163:22"><expr pos:start="163:5" pos:end="163:21"><operator pos:start="163:5" pos:end="163:5">*</operator><name pos:start="163:6" pos:end="163:13">consumed</name><operator pos:start="163:14" pos:end="163:14">=</operator> <name pos:start="163:16" pos:end="163:17">si</name> <operator pos:start="163:19" pos:end="163:19">+</operator> <literal type="number" pos:start="163:21" pos:end="163:21">1</literal></expr>;</expr_stmt><comment type="line" pos:start="163:23" pos:end="163:41">//+1 for the header</comment>

<comment type="line" pos:start="165:1" pos:end="165:83">//FIXME store exact number of bits in the getbitcontext (it is needed for decoding)</comment>

    <return pos:start="167:5" pos:end="167:15">return <expr pos:start="167:12" pos:end="167:14"><name pos:start="167:12" pos:end="167:14">dst</name></expr>;</return>

</block_content>}</block></for></block_content></block></if></if_stmt></block_content></block></for></block_content></block></function>
</unit>
