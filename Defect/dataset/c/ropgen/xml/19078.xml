<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19078.c" pos:tabs="8"><function pos:start="1:1" pos:end="249:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:36">dct_unquantize_mpeg1_mmx</name><parameter_list pos:start="1:37" pos:end="3:71">(<parameter pos:start="1:38" pos:end="1:54"><decl pos:start="1:38" pos:end="1:54"><type pos:start="1:38" pos:end="1:54"><name pos:start="1:38" pos:end="1:51">MpegEncContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:54">s</name></decl></parameter>,

                                     <parameter pos:start="3:38" pos:end="3:51"><decl pos:start="3:38" pos:end="3:51"><type pos:start="3:38" pos:end="3:51"><name pos:start="3:38" pos:end="3:44">DCTELEM</name> <modifier pos:start="3:46" pos:end="3:46">*</modifier></type><name pos:start="3:47" pos:end="3:51">block</name></decl></parameter>, <parameter pos:start="3:54" pos:end="3:58"><decl pos:start="3:54" pos:end="3:58"><type pos:start="3:54" pos:end="3:58"><name pos:start="3:54" pos:end="3:56">int</name></type> <name pos:start="3:58" pos:end="3:58">n</name></decl></parameter>, <parameter pos:start="3:61" pos:end="3:70"><decl pos:start="3:61" pos:end="3:70"><type pos:start="3:61" pos:end="3:70"><name pos:start="3:61" pos:end="3:63">int</name></type> <name pos:start="3:65" pos:end="3:70">qscale</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="249:1">{<block_content pos:start="7:5" pos:end="247:5">

    <decl_stmt pos:start="7:5" pos:end="7:16"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">nCoeffs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:18"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:16">UINT16</name> <modifier pos:start="9:18" pos:end="9:18">*</modifier></type><name pos:start="9:19" pos:end="9:30">quant_matrix</name></decl>;</decl_stmt>

    

    <if_stmt pos:start="13:5" pos:end="15:64"><if pos:start="13:5" pos:end="13:38">if<condition pos:start="13:7" pos:end="13:25">(<expr pos:start="13:8" pos:end="13:24"><name pos:start="13:8" pos:end="13:24"><name pos:start="13:8" pos:end="13:8">s</name><operator pos:start="13:9" pos:end="13:10">-&gt;</operator><name pos:start="13:11" pos:end="13:24">alternate_scan</name></name></expr>)</condition><block type="pseudo" pos:start="13:27" pos:end="13:38"><block_content pos:start="13:27" pos:end="13:38"> <expr_stmt pos:start="13:27" pos:end="13:38"><expr pos:start="13:27" pos:end="13:37"><name pos:start="13:27" pos:end="13:33">nCoeffs</name><operator pos:start="13:34" pos:end="13:34">=</operator> <literal type="number" pos:start="13:36" pos:end="13:37">64</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="15:5" pos:end="15:64">else<block type="pseudo" pos:start="15:10" pos:end="15:64"><block_content pos:start="15:10" pos:end="15:64"> <expr_stmt pos:start="15:10" pos:end="15:64"><expr pos:start="15:10" pos:end="15:63"><name pos:start="15:10" pos:end="15:16">nCoeffs</name><operator pos:start="15:17" pos:end="15:17">=</operator> <name pos:start="15:19" pos:end="15:25">nCoeffs</name><operator pos:start="15:26" pos:end="15:26">=</operator> <name pos:start="15:28" pos:end="15:63"><name pos:start="15:28" pos:end="15:37">zigzag_end</name><index pos:start="15:38" pos:end="15:63">[ <expr pos:start="15:40" pos:end="15:61"><name pos:start="15:40" pos:end="15:61"><name pos:start="15:40" pos:end="15:40">s</name><operator pos:start="15:41" pos:end="15:42">-&gt;</operator><name pos:start="15:43" pos:end="15:58">block_last_index</name><index pos:start="15:59" pos:end="15:61">[<expr pos:start="15:60" pos:end="15:60"><name pos:start="15:60" pos:end="15:60">n</name></expr>]</index></name></expr> ]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>



    <if_stmt pos:start="19:5" pos:end="247:5"><if pos:start="19:5" pos:end="137:9">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:19">mb_intra</name></name></expr>)</condition> <block pos:start="19:22" pos:end="137:9">{<block_content pos:start="21:9" pos:end="133:25">

        <decl_stmt pos:start="21:9" pos:end="21:19"><decl pos:start="21:9" pos:end="21:18"><type pos:start="21:9" pos:end="21:11"><name pos:start="21:9" pos:end="21:11">int</name></type> <name pos:start="21:13" pos:end="21:18">block0</name></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="29:46"><if pos:start="23:9" pos:end="25:46">if <condition pos:start="23:12" pos:end="23:18">(<expr pos:start="23:13" pos:end="23:17"><name pos:start="23:13" pos:end="23:13">n</name> <operator pos:start="23:15" pos:end="23:15">&lt;</operator> <literal type="number" pos:start="23:17" pos:end="23:17">4</literal></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:46"><block_content pos:start="25:13" pos:end="25:46"> 

            <expr_stmt pos:start="25:13" pos:end="25:46"><expr pos:start="25:13" pos:end="25:45"><name pos:start="25:13" pos:end="25:18">block0</name> <operator pos:start="25:20" pos:end="25:20">=</operator> <name pos:start="25:22" pos:end="25:29"><name pos:start="25:22" pos:end="25:26">block</name><index pos:start="25:27" pos:end="25:29">[<expr pos:start="25:28" pos:end="25:28"><literal type="number" pos:start="25:28" pos:end="25:28">0</literal></expr>]</index></name> <operator pos:start="25:31" pos:end="25:31">*</operator> <name pos:start="25:33" pos:end="25:45"><name pos:start="25:33" pos:end="25:33">s</name><operator pos:start="25:34" pos:end="25:35">-&gt;</operator><name pos:start="25:36" pos:end="25:45">y_dc_scale</name></name></expr>;</expr_stmt></block_content></block></if>

        <else pos:start="27:9" pos:end="29:46">else<block type="pseudo" pos:start="29:13" pos:end="29:46"><block_content pos:start="29:13" pos:end="29:46">

            <expr_stmt pos:start="29:13" pos:end="29:46"><expr pos:start="29:13" pos:end="29:45"><name pos:start="29:13" pos:end="29:18">block0</name> <operator pos:start="29:20" pos:end="29:20">=</operator> <name pos:start="29:22" pos:end="29:29"><name pos:start="29:22" pos:end="29:26">block</name><index pos:start="29:27" pos:end="29:29">[<expr pos:start="29:28" pos:end="29:28"><literal type="number" pos:start="29:28" pos:end="29:28">0</literal></expr>]</index></name> <operator pos:start="29:31" pos:end="29:31">*</operator> <name pos:start="29:33" pos:end="29:45"><name pos:start="29:33" pos:end="29:33">s</name><operator pos:start="29:34" pos:end="29:35">-&gt;</operator><name pos:start="29:36" pos:end="29:45">c_dc_scale</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block" pos:start="31:9" pos:end="31:29">/* XXX: only mpeg1 */</comment>

        <expr_stmt pos:start="33:9" pos:end="33:39"><expr pos:start="33:9" pos:end="33:38"><name pos:start="33:9" pos:end="33:20">quant_matrix</name> <operator pos:start="33:22" pos:end="33:22">=</operator> <name pos:start="33:24" pos:end="33:38"><name pos:start="33:24" pos:end="33:24">s</name><operator pos:start="33:25" pos:end="33:26">-&gt;</operator><name pos:start="33:27" pos:end="33:38">intra_matrix</name></name></expr>;</expr_stmt>

<asm pos:start="35:1" pos:end="131:10">asm <specifier pos:start="35:5" pos:end="35:12">volatile</specifier>(

		"pcmpeqw %%mm7, %%mm7		\n\t"

		"psrlw $15, %%mm7		\n\t"

		"movd %2, %%mm6			\n\t"

		"packssdw %%mm6, %%mm6		\n\t"

		"packssdw %%mm6, %%mm6		\n\t"

                "movl %3, %%eax			\n\t"

		".balign 16\n\t"

		"1:				\n\t"

		"movq (%0, %%eax), %%mm0	\n\t"

		"movq 8(%0, %%eax), %%mm1	\n\t"

		"movq (%1, %%eax), %%mm4	\n\t"

		"movq 8(%1, %%eax), %%mm5	\n\t"

		"pmullw %%mm6, %%mm4		\n\t" <comment type="line" pos:start="61:55" pos:end="61:81">// q=qscale*quant_matrix[i]</comment>

		"pmullw %%mm6, %%mm5		\n\t" <comment type="line" pos:start="63:55" pos:end="63:81">// q=qscale*quant_matrix[i]</comment>

		"pxor %%mm2, %%mm2		\n\t"

		"pxor %%mm3, %%mm3		\n\t"

		"pcmpgtw %%mm0, %%mm2		\n\t" <comment type="line" pos:start="69:55" pos:end="69:78">// block[i] &lt; 0 ? -1 : 0</comment>

		"pcmpgtw %%mm1, %%mm3		\n\t" <comment type="line" pos:start="71:55" pos:end="71:78">// block[i] &lt; 0 ? -1 : 0</comment>

		"pxor %%mm2, %%mm0		\n\t"

		"pxor %%mm3, %%mm1		\n\t"

		"psubw %%mm2, %%mm0		\n\t" <comment type="line" pos:start="77:55" pos:end="77:70">// abs(block[i])</comment>

		"psubw %%mm3, %%mm1		\n\t" <comment type="line" pos:start="79:55" pos:end="79:70">// abs(block[i])</comment>

		"pmullw %%mm4, %%mm0		\n\t" <comment type="line" pos:start="81:55" pos:end="81:72">// abs(block[i])*q</comment>

		"pmullw %%mm5, %%mm1		\n\t" <comment type="line" pos:start="83:55" pos:end="83:72">// abs(block[i])*q</comment>

		"pxor %%mm4, %%mm4		\n\t"

		"pxor %%mm5, %%mm5		\n\t" <comment type="line" pos:start="87:55" pos:end="87:67">// FIXME slow</comment>

		"pcmpeqw (%0, %%eax), %%mm4	\n\t" <comment type="line" pos:start="89:55" pos:end="89:79">// block[i] == 0 ? -1 : 0</comment>

		"pcmpeqw 8(%0, %%eax), %%mm5	\n\t" <comment type="line" pos:start="91:55" pos:end="91:79">// block[i] == 0 ? -1 : 0</comment>

		"psraw $3, %%mm0		\n\t"

		"psraw $3, %%mm1		\n\t"

		"psubw %%mm7, %%mm0		\n\t"

		"psubw %%mm7, %%mm1		\n\t"

		"por %%mm7, %%mm0		\n\t"

		"por %%mm7, %%mm1		\n\t"

		"pxor %%mm2, %%mm0		\n\t"

		"pxor %%mm3, %%mm1		\n\t"

		"psubw %%mm2, %%mm0		\n\t"

		"psubw %%mm3, %%mm1		\n\t"

		"pandn %%mm0, %%mm4		\n\t"

		"pandn %%mm1, %%mm5		\n\t"

		"movq %%mm4, (%0, %%eax)	\n\t"

		"movq %%mm5, 8(%0, %%eax)	\n\t"



		"addl $16, %%eax		\n\t"

		"js 1b				\n\t"

		::"r" (block+nCoeffs), "r"(quant_matrix+nCoeffs), "g" (qscale), "g" (-2*nCoeffs)

		: "%eax", "memory"

	);</asm>    

        <expr_stmt pos:start="133:9" pos:end="133:25"><expr pos:start="133:9" pos:end="133:24"><name pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:13">block</name><index pos:start="133:14" pos:end="133:16">[<expr pos:start="133:15" pos:end="133:15"><literal type="number" pos:start="133:15" pos:end="133:15">0</literal></expr>]</index></name><operator pos:start="133:17" pos:end="133:17">=</operator> <name pos:start="133:19" pos:end="133:24">block0</name></expr>;</expr_stmt>



        </block_content>}</block></if> <else pos:start="137:11" pos:end="247:5">else <block pos:start="137:16" pos:end="247:5">{<block_content pos:start="139:9" pos:end="245:10">

        <expr_stmt pos:start="139:9" pos:end="139:43"><expr pos:start="139:9" pos:end="139:42"><name pos:start="139:9" pos:end="139:20">quant_matrix</name> <operator pos:start="139:22" pos:end="139:22">=</operator> <name pos:start="139:24" pos:end="139:42"><name pos:start="139:24" pos:end="139:24">s</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:42">non_intra_matrix</name></name></expr>;</expr_stmt>

<asm pos:start="141:1" pos:end="245:10">asm <specifier pos:start="141:5" pos:end="141:12">volatile</specifier>(

		"pcmpeqw %%mm7, %%mm7		\n\t"

		"psrlw $15, %%mm7		\n\t"

		"movd %2, %%mm6			\n\t"

		"packssdw %%mm6, %%mm6		\n\t"

		"packssdw %%mm6, %%mm6		\n\t"

                "movl %3, %%eax			\n\t"

		".balign 16\n\t"

		"1:				\n\t"

		"movq (%0, %%eax), %%mm0	\n\t"

		"movq 8(%0, %%eax), %%mm1	\n\t"

		"movq (%1, %%eax), %%mm4	\n\t"

		"movq 8(%1, %%eax), %%mm5	\n\t"

		"pmullw %%mm6, %%mm4		\n\t" <comment type="line" pos:start="167:55" pos:end="167:81">// q=qscale*quant_matrix[i]</comment>

		"pmullw %%mm6, %%mm5		\n\t" <comment type="line" pos:start="169:55" pos:end="169:81">// q=qscale*quant_matrix[i]</comment>

		"pxor %%mm2, %%mm2		\n\t"

		"pxor %%mm3, %%mm3		\n\t"

		"pcmpgtw %%mm0, %%mm2		\n\t" <comment type="line" pos:start="175:55" pos:end="175:78">// block[i] &lt; 0 ? -1 : 0</comment>

		"pcmpgtw %%mm1, %%mm3		\n\t" <comment type="line" pos:start="177:55" pos:end="177:78">// block[i] &lt; 0 ? -1 : 0</comment>

		"pxor %%mm2, %%mm0		\n\t"

		"pxor %%mm3, %%mm1		\n\t"

		"psubw %%mm2, %%mm0		\n\t" <comment type="line" pos:start="183:55" pos:end="183:70">// abs(block[i])</comment>

		"psubw %%mm3, %%mm1		\n\t" <comment type="line" pos:start="185:55" pos:end="185:70">// abs(block[i])</comment>

		"paddw %%mm0, %%mm0		\n\t" <comment type="line" pos:start="187:55" pos:end="187:72">// abs(block[i])*2</comment>

		"paddw %%mm1, %%mm1		\n\t" <comment type="line" pos:start="189:55" pos:end="189:72">// abs(block[i])*2</comment>

		"paddw %%mm7, %%mm0		\n\t" <comment type="line" pos:start="191:55" pos:end="191:76">// abs(block[i])*2 + 1</comment>

		"paddw %%mm7, %%mm1		\n\t" <comment type="line" pos:start="193:55" pos:end="193:76">// abs(block[i])*2 + 1</comment>

		"pmullw %%mm4, %%mm0		\n\t" <comment type="line" pos:start="195:55" pos:end="195:80">// (abs(block[i])*2 + 1)*q</comment>

		"pmullw %%mm5, %%mm1		\n\t" <comment type="line" pos:start="197:55" pos:end="197:80">// (abs(block[i])*2 + 1)*q</comment>

		"pxor %%mm4, %%mm4		\n\t"

		"pxor %%mm5, %%mm5		\n\t" <comment type="line" pos:start="201:55" pos:end="201:67">// FIXME slow</comment>

		"pcmpeqw (%0, %%eax), %%mm4	\n\t" <comment type="line" pos:start="203:55" pos:end="203:79">// block[i] == 0 ? -1 : 0</comment>

		"pcmpeqw 8(%0, %%eax), %%mm5	\n\t" <comment type="line" pos:start="205:55" pos:end="205:79">// block[i] == 0 ? -1 : 0</comment>

		"psraw $4, %%mm0		\n\t"

		"psraw $4, %%mm1		\n\t"

		"psubw %%mm7, %%mm0		\n\t"

		"psubw %%mm7, %%mm1		\n\t"

		"por %%mm7, %%mm0		\n\t"

		"por %%mm7, %%mm1		\n\t"

		"pxor %%mm2, %%mm0		\n\t"

		"pxor %%mm3, %%mm1		\n\t"

		"psubw %%mm2, %%mm0		\n\t"

		"psubw %%mm3, %%mm1		\n\t"

		"pandn %%mm0, %%mm4		\n\t"

		"pandn %%mm1, %%mm5		\n\t"

		"movq %%mm4, (%0, %%eax)	\n\t"

		"movq %%mm5, 8(%0, %%eax)	\n\t"



		"addl $16, %%eax		\n\t"

		"js 1b				\n\t"

		::"r" (block+nCoeffs), "r"(quant_matrix+nCoeffs), "g" (qscale), "g" (-2*nCoeffs)

		: "%eax", "memory"

	);</asm>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
