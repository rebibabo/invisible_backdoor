<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14394.c" pos:tabs="8"><function pos:start="1:1" pos:end="83:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_receive_frame</name><parameter_list pos:start="1:46" pos:end="1:84">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>, <parameter pos:start="1:70" pos:end="1:83"><decl pos:start="1:70" pos:end="1:83"><type pos:start="1:70" pos:end="1:83"><name pos:start="1:70" pos:end="1:76">AVFrame</name> <modifier pos:start="1:78" pos:end="1:78">*</modifier></type><name pos:start="1:79" pos:end="1:83">frame</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="83:1">{<block_content pos:start="5:5" pos:end="81:13">

    <decl_stmt pos:start="5:5" pos:end="5:12"><decl pos:start="5:5" pos:end="5:11"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:11">ret</name></decl>;</decl_stmt>



    <expr_stmt pos:start="9:5" pos:end="9:26"><expr pos:start="9:5" pos:end="9:25"><call pos:start="9:5" pos:end="9:25"><name pos:start="9:5" pos:end="9:18">av_frame_unref</name><argument_list pos:start="9:19" pos:end="9:25">(<argument pos:start="9:20" pos:end="9:24"><expr pos:start="9:20" pos:end="9:24"><name pos:start="9:20" pos:end="9:24">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="13:5" pos:end="15:31"><if pos:start="13:5" pos:end="15:31">if <condition pos:start="13:8" pos:end="13:70">(<expr pos:start="13:9" pos:end="13:69"><operator pos:start="13:9" pos:end="13:9">!</operator><call pos:start="13:10" pos:end="13:31"><name pos:start="13:10" pos:end="13:24">avcodec_is_open</name><argument_list pos:start="13:25" pos:end="13:31">(<argument pos:start="13:26" pos:end="13:30"><expr pos:start="13:26" pos:end="13:30"><name pos:start="13:26" pos:end="13:30">avctx</name></expr></argument>)</argument_list></call> <operator pos:start="13:33" pos:end="13:34">||</operator> <operator pos:start="13:36" pos:end="13:36">!</operator><call pos:start="13:37" pos:end="13:69"><name pos:start="13:37" pos:end="13:55">av_codec_is_decoder</name><argument_list pos:start="13:56" pos:end="13:69">(<argument pos:start="13:57" pos:end="13:68"><expr pos:start="13:57" pos:end="13:68"><name pos:start="13:57" pos:end="13:68"><name pos:start="13:57" pos:end="13:61">avctx</name><operator pos:start="13:62" pos:end="13:63">-&gt;</operator><name pos:start="13:64" pos:end="13:68">codec</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:31"><block_content pos:start="15:9" pos:end="15:31">

        <return pos:start="15:9" pos:end="15:31">return <expr pos:start="15:16" pos:end="15:30"><call pos:start="15:16" pos:end="15:30"><name pos:start="15:16" pos:end="15:22">AVERROR</name><argument_list pos:start="15:23" pos:end="15:30">(<argument pos:start="15:24" pos:end="15:29"><expr pos:start="15:24" pos:end="15:29"><name pos:start="15:24" pos:end="15:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <if_stmt pos:start="19:5" pos:end="27:5"><if pos:start="19:5" pos:end="27:5">if <condition pos:start="19:8" pos:end="19:36">(<expr pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:35"><name pos:start="19:9" pos:end="19:13">avctx</name><operator pos:start="19:14" pos:end="19:15">-&gt;</operator><name pos:start="19:16" pos:end="19:20">codec</name><operator pos:start="19:21" pos:end="19:22">-&gt;</operator><name pos:start="19:23" pos:end="19:35">receive_frame</name></name></expr>)</condition> <block pos:start="19:38" pos:end="27:5">{<block_content pos:start="21:9" pos:end="25:57">

        <if_stmt pos:start="21:9" pos:end="23:31"><if pos:start="21:9" pos:end="23:31">if <condition pos:start="21:12" pos:end="21:92">(<expr pos:start="21:13" pos:end="21:91"><name pos:start="21:13" pos:end="21:37"><name pos:start="21:13" pos:end="21:17">avctx</name><operator pos:start="21:18" pos:end="21:19">-&gt;</operator><name pos:start="21:20" pos:end="21:27">internal</name><operator pos:start="21:28" pos:end="21:29">-&gt;</operator><name pos:start="21:30" pos:end="21:37">draining</name></name> <operator pos:start="21:39" pos:end="21:40">&amp;&amp;</operator> <operator pos:start="21:42" pos:end="21:42">!</operator><operator pos:start="21:43" pos:end="21:43">(</operator><name pos:start="21:44" pos:end="21:69"><name pos:start="21:44" pos:end="21:48">avctx</name><operator pos:start="21:49" pos:end="21:50">-&gt;</operator><name pos:start="21:51" pos:end="21:55">codec</name><operator pos:start="21:56" pos:end="21:57">-&gt;</operator><name pos:start="21:58" pos:end="21:69">capabilities</name></name> <operator pos:start="21:71" pos:end="21:71">&amp;</operator> <name pos:start="21:73" pos:end="21:90">AV_CODEC_CAP_DELAY</name><operator pos:start="21:91" pos:end="21:91">)</operator></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:31"><block_content pos:start="23:13" pos:end="23:31">

            <return pos:start="23:13" pos:end="23:31">return <expr pos:start="23:20" pos:end="23:30"><name pos:start="23:20" pos:end="23:30">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

        <return pos:start="25:9" pos:end="25:57">return <expr pos:start="25:16" pos:end="25:56"><call pos:start="25:16" pos:end="25:56"><name pos:start="25:16" pos:end="25:42"><name pos:start="25:16" pos:end="25:20">avctx</name><operator pos:start="25:21" pos:end="25:22">-&gt;</operator><name pos:start="25:23" pos:end="25:27">codec</name><operator pos:start="25:28" pos:end="25:29">-&gt;</operator><name pos:start="25:30" pos:end="25:42">receive_frame</name></name><argument_list pos:start="25:43" pos:end="25:56">(<argument pos:start="25:44" pos:end="25:48"><expr pos:start="25:44" pos:end="25:48"><name pos:start="25:44" pos:end="25:48">avctx</name></expr></argument>, <argument pos:start="25:51" pos:end="25:55"><expr pos:start="25:51" pos:end="25:55"><name pos:start="25:51" pos:end="25:55">frame</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="line" pos:start="31:5" pos:end="31:29">// Emulation via old API.</comment>



    <if_stmt pos:start="35:5" pos:end="69:5"><if pos:start="35:5" pos:end="69:5">if <condition pos:start="35:8" pos:end="35:47">(<expr pos:start="35:9" pos:end="35:46"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:46"><name pos:start="35:10" pos:end="35:14">avctx</name><operator pos:start="35:15" pos:end="35:16">-&gt;</operator><name pos:start="35:17" pos:end="35:24">internal</name><operator pos:start="35:25" pos:end="35:26">-&gt;</operator><name pos:start="35:27" pos:end="35:38">buffer_frame</name><operator pos:start="35:39" pos:end="35:40">-&gt;</operator><name pos:start="35:41" pos:end="35:43">buf</name><index pos:start="35:44" pos:end="35:46">[<expr pos:start="35:45" pos:end="35:45"><literal type="number" pos:start="35:45" pos:end="35:45">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="35:49" pos:end="69:5">{<block_content pos:start="37:9" pos:end="67:9">

        <if_stmt pos:start="37:9" pos:end="39:35"><if pos:start="37:9" pos:end="39:35">if <condition pos:start="37:12" pos:end="37:77">(<expr pos:start="37:13" pos:end="37:76"><operator pos:start="37:13" pos:end="37:13">!</operator><name pos:start="37:14" pos:end="37:46"><name pos:start="37:14" pos:end="37:18">avctx</name><operator pos:start="37:19" pos:end="37:20">-&gt;</operator><name pos:start="37:21" pos:end="37:28">internal</name><operator pos:start="37:29" pos:end="37:30">-&gt;</operator><name pos:start="37:31" pos:end="37:40">buffer_pkt</name><operator pos:start="37:41" pos:end="37:42">-&gt;</operator><name pos:start="37:43" pos:end="37:46">size</name></name> <operator pos:start="37:48" pos:end="37:49">&amp;&amp;</operator> <operator pos:start="37:51" pos:end="37:51">!</operator><name pos:start="37:52" pos:end="37:76"><name pos:start="37:52" pos:end="37:56">avctx</name><operator pos:start="37:57" pos:end="37:58">-&gt;</operator><name pos:start="37:59" pos:end="37:66">internal</name><operator pos:start="37:67" pos:end="37:68">-&gt;</operator><name pos:start="37:69" pos:end="37:76">draining</name></name></expr>)</condition><block type="pseudo" pos:start="39:13" pos:end="39:35"><block_content pos:start="39:13" pos:end="39:35">

            <return pos:start="39:13" pos:end="39:35">return <expr pos:start="39:20" pos:end="39:34"><call pos:start="39:20" pos:end="39:34"><name pos:start="39:20" pos:end="39:26">AVERROR</name><argument_list pos:start="39:27" pos:end="39:34">(<argument pos:start="39:28" pos:end="39:33"><expr pos:start="39:28" pos:end="39:33"><name pos:start="39:28" pos:end="39:33">EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



        <while pos:start="43:9" pos:end="67:9">while <condition pos:start="43:15" pos:end="43:17">(<expr pos:start="43:16" pos:end="43:16"><literal type="number" pos:start="43:16" pos:end="43:16">1</literal></expr>)</condition> <block pos:start="43:19" pos:end="67:9">{<block_content pos:start="45:13" pos:end="65:22">

            <if_stmt pos:start="45:13" pos:end="51:13"><if pos:start="45:13" pos:end="51:13">if <condition pos:start="45:16" pos:end="45:74">(<expr pos:start="45:17" pos:end="45:73"><operator pos:start="45:17" pos:end="45:17">(</operator><name pos:start="45:18" pos:end="45:20">ret</name> <operator pos:start="45:22" pos:end="45:22">=</operator> <call pos:start="45:24" pos:end="45:68"><name pos:start="45:24" pos:end="45:32">do_decode</name><argument_list pos:start="45:33" pos:end="45:68">(<argument pos:start="45:34" pos:end="45:38"><expr pos:start="45:34" pos:end="45:38"><name pos:start="45:34" pos:end="45:38">avctx</name></expr></argument>, <argument pos:start="45:41" pos:end="45:67"><expr pos:start="45:41" pos:end="45:67"><name pos:start="45:41" pos:end="45:67"><name pos:start="45:41" pos:end="45:45">avctx</name><operator pos:start="45:46" pos:end="45:47">-&gt;</operator><name pos:start="45:48" pos:end="45:55">internal</name><operator pos:start="45:56" pos:end="45:57">-&gt;</operator><name pos:start="45:58" pos:end="45:67">buffer_pkt</name></name></expr></argument>)</argument_list></call><operator pos:start="45:69" pos:end="45:69">)</operator> <operator pos:start="45:71" pos:end="45:71">&lt;</operator> <literal type="number" pos:start="45:73" pos:end="45:73">0</literal></expr>)</condition> <block pos:start="45:76" pos:end="51:13">{<block_content pos:start="47:17" pos:end="49:27">

                <expr_stmt pos:start="47:17" pos:end="47:61"><expr pos:start="47:17" pos:end="47:60"><call pos:start="47:17" pos:end="47:60"><name pos:start="47:17" pos:end="47:31">av_packet_unref</name><argument_list pos:start="47:32" pos:end="47:60">(<argument pos:start="47:33" pos:end="47:59"><expr pos:start="47:33" pos:end="47:59"><name pos:start="47:33" pos:end="47:59"><name pos:start="47:33" pos:end="47:37">avctx</name><operator pos:start="47:38" pos:end="47:39">-&gt;</operator><name pos:start="47:40" pos:end="47:47">internal</name><operator pos:start="47:48" pos:end="47:49">-&gt;</operator><name pos:start="47:50" pos:end="47:59">buffer_pkt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <return pos:start="49:17" pos:end="49:27">return <expr pos:start="49:24" pos:end="49:26"><name pos:start="49:24" pos:end="49:26">ret</name></expr>;</return>

            </block_content>}</block></if></if_stmt>

            <comment type="line" pos:start="53:13" pos:end="53:77">// Some audio decoders may consume partial data without returning</comment>

            <comment type="line" pos:start="55:13" pos:end="55:76">// a frame (fate-wmapro-2ch). There is no way to make the caller</comment>

            <comment type="line" pos:start="57:13" pos:end="57:76">// call avcodec_receive_frame() again without returning a frame,</comment>

            <comment type="line" pos:start="59:13" pos:end="59:52">// so try to decode more in these cases.</comment>

            <if_stmt pos:start="61:13" pos:end="65:22"><if pos:start="61:13" pos:end="65:22">if <condition pos:start="61:16" pos:end="63:51">(<expr pos:start="61:17" pos:end="63:50"><name pos:start="61:17" pos:end="61:53"><name pos:start="61:17" pos:end="61:21">avctx</name><operator pos:start="61:22" pos:end="61:23">-&gt;</operator><name pos:start="61:24" pos:end="61:31">internal</name><operator pos:start="61:32" pos:end="61:33">-&gt;</operator><name pos:start="61:34" pos:end="61:45">buffer_frame</name><operator pos:start="61:46" pos:end="61:47">-&gt;</operator><name pos:start="61:48" pos:end="61:50">buf</name><index pos:start="61:51" pos:end="61:53">[<expr pos:start="61:52" pos:end="61:52"><literal type="number" pos:start="61:52" pos:end="61:52">0</literal></expr>]</index></name> <operator pos:start="61:55" pos:end="61:56">||</operator>

                <operator pos:start="63:17" pos:end="63:17">!</operator><name pos:start="63:18" pos:end="63:50"><name pos:start="63:18" pos:end="63:22">avctx</name><operator pos:start="63:23" pos:end="63:24">-&gt;</operator><name pos:start="63:25" pos:end="63:32">internal</name><operator pos:start="63:33" pos:end="63:34">-&gt;</operator><name pos:start="63:35" pos:end="63:44">buffer_pkt</name><operator pos:start="63:45" pos:end="63:46">-&gt;</operator><name pos:start="63:47" pos:end="63:50">size</name></name></expr>)</condition><block type="pseudo" pos:start="65:17" pos:end="65:22"><block_content pos:start="65:17" pos:end="65:22">

                <break pos:start="65:17" pos:end="65:22">break;</break></block_content></block></if></if_stmt>

        </block_content>}</block></while>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="73:5" pos:end="75:73"><if pos:start="73:5" pos:end="75:73">if <condition pos:start="73:8" pos:end="73:47">(<expr pos:start="73:9" pos:end="73:46"><operator pos:start="73:9" pos:end="73:9">!</operator><name pos:start="73:10" pos:end="73:46"><name pos:start="73:10" pos:end="73:14">avctx</name><operator pos:start="73:15" pos:end="73:16">-&gt;</operator><name pos:start="73:17" pos:end="73:24">internal</name><operator pos:start="73:25" pos:end="73:26">-&gt;</operator><name pos:start="73:27" pos:end="73:38">buffer_frame</name><operator pos:start="73:39" pos:end="73:40">-&gt;</operator><name pos:start="73:41" pos:end="73:43">buf</name><index pos:start="73:44" pos:end="73:46">[<expr pos:start="73:45" pos:end="73:45"><literal type="number" pos:start="73:45" pos:end="73:45">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="75:9" pos:end="75:73"><block_content pos:start="75:9" pos:end="75:73">

        <return pos:start="75:9" pos:end="75:73">return <expr pos:start="75:16" pos:end="75:72"><ternary pos:start="75:16" pos:end="75:72"><condition pos:start="75:16" pos:end="75:42"><expr pos:start="75:16" pos:end="75:40"><name pos:start="75:16" pos:end="75:40"><name pos:start="75:16" pos:end="75:20">avctx</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:30">internal</name><operator pos:start="75:31" pos:end="75:32">-&gt;</operator><name pos:start="75:33" pos:end="75:40">draining</name></name></expr> ?</condition><then pos:start="75:44" pos:end="75:54"> <expr pos:start="75:44" pos:end="75:54"><name pos:start="75:44" pos:end="75:54">AVERROR_EOF</name></expr> </then><else pos:start="75:56" pos:end="75:72">: <expr pos:start="75:58" pos:end="75:72"><call pos:start="75:58" pos:end="75:72"><name pos:start="75:58" pos:end="75:64">AVERROR</name><argument_list pos:start="75:65" pos:end="75:72">(<argument pos:start="75:66" pos:end="75:71"><expr pos:start="75:66" pos:end="75:71"><name pos:start="75:66" pos:end="75:71">EAGAIN</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="79:5" pos:end="79:60"><expr pos:start="79:5" pos:end="79:59"><call pos:start="79:5" pos:end="79:59"><name pos:start="79:5" pos:end="79:21">av_frame_move_ref</name><argument_list pos:start="79:22" pos:end="79:59">(<argument pos:start="79:23" pos:end="79:27"><expr pos:start="79:23" pos:end="79:27"><name pos:start="79:23" pos:end="79:27">frame</name></expr></argument>, <argument pos:start="79:30" pos:end="79:58"><expr pos:start="79:30" pos:end="79:58"><name pos:start="79:30" pos:end="79:58"><name pos:start="79:30" pos:end="79:34">avctx</name><operator pos:start="79:35" pos:end="79:36">-&gt;</operator><name pos:start="79:37" pos:end="79:44">internal</name><operator pos:start="79:45" pos:end="79:46">-&gt;</operator><name pos:start="79:47" pos:end="79:58">buffer_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="81:5" pos:end="81:13">return <expr pos:start="81:12" pos:end="81:12"><literal type="number" pos:start="81:12" pos:end="81:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
