<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/12709.c" pos:tabs="8"><function pos:start="1:1" pos:end="105:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">bool</name></type> <name pos:start="1:13" pos:end="1:29">linked_bp_matches</name><parameter_list pos:start="1:30" pos:end="1:51">(<parameter pos:start="1:31" pos:end="1:41"><decl pos:start="1:31" pos:end="1:41"><type pos:start="1:31" pos:end="1:41"><name pos:start="1:31" pos:end="1:36">ARMCPU</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type><name pos:start="1:39" pos:end="1:41">cpu</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:50"><decl pos:start="1:44" pos:end="1:50"><type pos:start="1:44" pos:end="1:50"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:50">lbn</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="105:1">{<block_content pos:start="5:5" pos:end="103:17">

    <decl_stmt pos:start="5:5" pos:end="5:33"><decl pos:start="5:5" pos:end="5:32"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">CPUARMState</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:20">env</name> <init pos:start="5:22" pos:end="5:32">= <expr pos:start="5:24" pos:end="5:32"><operator pos:start="5:24" pos:end="5:24">&amp;</operator><name pos:start="5:25" pos:end="5:32"><name pos:start="5:25" pos:end="5:27">cpu</name><operator pos:start="5:28" pos:end="5:29">-&gt;</operator><name pos:start="5:30" pos:end="5:32">env</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:41"><decl pos:start="7:5" pos:end="7:40"><type pos:start="7:5" pos:end="7:12"><name pos:start="7:5" pos:end="7:12">uint64_t</name></type> <name pos:start="7:14" pos:end="7:16">bcr</name> <init pos:start="7:18" pos:end="7:40">= <expr pos:start="7:20" pos:end="7:40"><name pos:start="7:20" pos:end="7:40"><name pos:start="7:20" pos:end="7:22">env</name><operator pos:start="7:23" pos:end="7:24">-&gt;</operator><name pos:start="7:25" pos:end="7:28">cp15</name><operator pos:start="7:29" pos:end="7:29">.</operator><name pos:start="7:30" pos:end="7:35">dbgbcr</name><index pos:start="7:36" pos:end="7:40">[<expr pos:start="7:37" pos:end="7:39"><name pos:start="7:37" pos:end="7:39">lbn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:46"><decl pos:start="9:5" pos:end="9:45"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:12">brps</name> <init pos:start="9:14" pos:end="9:45">= <expr pos:start="9:16" pos:end="9:45"><call pos:start="9:16" pos:end="9:45"><name pos:start="9:16" pos:end="9:24">extract32</name><argument_list pos:start="9:25" pos:end="9:45">(<argument pos:start="9:26" pos:end="9:37"><expr pos:start="9:26" pos:end="9:37"><name pos:start="9:26" pos:end="9:37"><name pos:start="9:26" pos:end="9:28">cpu</name><operator pos:start="9:29" pos:end="9:30">-&gt;</operator><name pos:start="9:31" pos:end="9:37">dbgdidr</name></name></expr></argument>, <argument pos:start="9:40" pos:end="9:41"><expr pos:start="9:40" pos:end="9:41"><literal type="number" pos:start="9:40" pos:end="9:41">24</literal></expr></argument>, <argument pos:start="9:44" pos:end="9:44"><expr pos:start="9:44" pos:end="9:44"><literal type="number" pos:start="9:44" pos:end="9:44">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:50"><decl pos:start="11:5" pos:end="11:49"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">ctx_cmps</name> <init pos:start="11:18" pos:end="11:49">= <expr pos:start="11:20" pos:end="11:49"><call pos:start="11:20" pos:end="11:49"><name pos:start="11:20" pos:end="11:28">extract32</name><argument_list pos:start="11:29" pos:end="11:49">(<argument pos:start="11:30" pos:end="11:41"><expr pos:start="11:30" pos:end="11:41"><name pos:start="11:30" pos:end="11:41"><name pos:start="11:30" pos:end="11:32">cpu</name><operator pos:start="11:33" pos:end="11:34">-&gt;</operator><name pos:start="11:35" pos:end="11:41">dbgdidr</name></name></expr></argument>, <argument pos:start="11:44" pos:end="11:45"><expr pos:start="11:44" pos:end="11:45"><literal type="number" pos:start="11:44" pos:end="11:45">20</literal></expr></argument>, <argument pos:start="11:48" pos:end="11:48"><expr pos:start="11:48" pos:end="11:48"><literal type="number" pos:start="11:48" pos:end="11:48">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:11"><decl pos:start="13:5" pos:end="13:10"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:10">bt</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:24"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:23">contextidr</name></decl>;</decl_stmt>



    <comment type="block" pos:start="19:5" pos:end="29:7">/* Links to unimplemented or non-context aware breakpoints are

     * CONSTRAINED UNPREDICTABLE: either behave as if disabled, or

     * as if linked to an UNKNOWN context-aware breakpoint (in which

     * case DBGWCR&lt;n&gt;_EL1.LBN must indicate that breakpoint).

     * We choose the former.

     */</comment>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:46">(<expr pos:start="31:9" pos:end="31:45"><name pos:start="31:9" pos:end="31:11">lbn</name> <operator pos:start="31:13" pos:end="31:13">&gt;</operator> <name pos:start="31:15" pos:end="31:18">brps</name> <operator pos:start="31:20" pos:end="31:21">||</operator> <name pos:start="31:23" pos:end="31:25">lbn</name> <operator pos:start="31:27" pos:end="31:27">&lt;</operator> <operator pos:start="31:29" pos:end="31:29">(</operator><name pos:start="31:30" pos:end="31:33">brps</name> <operator pos:start="31:35" pos:end="31:35">-</operator> <name pos:start="31:37" pos:end="31:44">ctx_cmps</name><operator pos:start="31:45" pos:end="31:45">)</operator></expr>)</condition> <block pos:start="31:48" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:21">

        <return pos:start="33:9" pos:end="33:21">return <expr pos:start="33:16" pos:end="33:20"><name pos:start="33:16" pos:end="33:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:32"><expr pos:start="39:5" pos:end="39:31"><name pos:start="39:5" pos:end="39:7">bcr</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:31"><name pos:start="39:11" pos:end="39:13">env</name><operator pos:start="39:14" pos:end="39:15">-&gt;</operator><name pos:start="39:16" pos:end="39:19">cp15</name><operator pos:start="39:20" pos:end="39:20">.</operator><name pos:start="39:21" pos:end="39:26">dbgbcr</name><index pos:start="39:27" pos:end="39:31">[<expr pos:start="39:28" pos:end="39:30"><name pos:start="39:28" pos:end="39:30">lbn</name></expr>]</index></name></expr>;</expr_stmt>



    <if_stmt pos:start="43:5" pos:end="49:5"><if pos:start="43:5" pos:end="49:5">if <condition pos:start="43:8" pos:end="43:34">(<expr pos:start="43:9" pos:end="43:33"><call pos:start="43:9" pos:end="43:28"><name pos:start="43:9" pos:end="43:17">extract64</name><argument_list pos:start="43:18" pos:end="43:28">(<argument pos:start="43:19" pos:end="43:21"><expr pos:start="43:19" pos:end="43:21"><name pos:start="43:19" pos:end="43:21">bcr</name></expr></argument>, <argument pos:start="43:24" pos:end="43:24"><expr pos:start="43:24" pos:end="43:24"><literal type="number" pos:start="43:24" pos:end="43:24">0</literal></expr></argument>, <argument pos:start="43:27" pos:end="43:27"><expr pos:start="43:27" pos:end="43:27"><literal type="number" pos:start="43:27" pos:end="43:27">1</literal></expr></argument>)</argument_list></call> <operator pos:start="43:30" pos:end="43:31">==</operator> <literal type="number" pos:start="43:33" pos:end="43:33">0</literal></expr>)</condition> <block pos:start="43:36" pos:end="49:5">{<block_content pos:start="47:9" pos:end="47:21">

        <comment type="block" pos:start="45:9" pos:end="45:61">/* Linked breakpoint disabled : generate no events */</comment>

        <return pos:start="47:9" pos:end="47:21">return <expr pos:start="47:16" pos:end="47:20"><name pos:start="47:16" pos:end="47:20">false</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:31"><expr pos:start="53:5" pos:end="53:30"><name pos:start="53:5" pos:end="53:6">bt</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <call pos:start="53:10" pos:end="53:30"><name pos:start="53:10" pos:end="53:18">extract64</name><argument_list pos:start="53:19" pos:end="53:30">(<argument pos:start="53:20" pos:end="53:22"><expr pos:start="53:20" pos:end="53:22"><name pos:start="53:20" pos:end="53:22">bcr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:26"><expr pos:start="53:25" pos:end="53:26"><literal type="number" pos:start="53:25" pos:end="53:26">20</literal></expr></argument>, <argument pos:start="53:29" pos:end="53:29"><expr pos:start="53:29" pos:end="53:29"><literal type="number" pos:start="53:29" pos:end="53:29">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="57:5" pos:end="63:7">/* We match the whole register even if this is AArch32 using the

     * short descriptor format (in which case it holds both PROCID and ASID),

     * since we don't implement the optional v7 context ID masking.

     */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:60"><expr pos:start="65:5" pos:end="65:59"><name pos:start="65:5" pos:end="65:14">contextidr</name> <operator pos:start="65:16" pos:end="65:16">=</operator> <call pos:start="65:18" pos:end="65:59"><name pos:start="65:18" pos:end="65:26">extract64</name><argument_list pos:start="65:27" pos:end="65:59">(<argument pos:start="65:28" pos:end="65:51"><expr pos:start="65:28" pos:end="65:51"><name pos:start="65:28" pos:end="65:51"><name pos:start="65:28" pos:end="65:30">env</name><operator pos:start="65:31" pos:end="65:32">-&gt;</operator><name pos:start="65:33" pos:end="65:36">cp15</name><operator pos:start="65:37" pos:end="65:37">.</operator><name pos:start="65:38" pos:end="65:51">contextidr_el1</name></name></expr></argument>, <argument pos:start="65:54" pos:end="65:54"><expr pos:start="65:54" pos:end="65:54"><literal type="number" pos:start="65:54" pos:end="65:54">0</literal></expr></argument>, <argument pos:start="65:57" pos:end="65:58"><expr pos:start="65:57" pos:end="65:58"><literal type="number" pos:start="65:57" pos:end="65:58">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="69:5" pos:end="99:5">switch <condition pos:start="69:12" pos:end="69:15">(<expr pos:start="69:13" pos:end="69:14"><name pos:start="69:13" pos:end="69:14">bt</name></expr>)</condition> <block pos:start="69:17" pos:end="99:5">{<block_content pos:start="71:5" pos:end="97:21">

    <case pos:start="71:5" pos:end="71:11">case <expr pos:start="71:10" pos:end="71:10"><literal type="number" pos:start="71:10" pos:end="71:10">3</literal></expr>:</case> <comment type="block" pos:start="71:13" pos:end="71:41">/* linked context ID match */</comment>

        <if_stmt pos:start="73:9" pos:end="79:9"><if pos:start="73:9" pos:end="79:9">if <condition pos:start="73:12" pos:end="73:36">(<expr pos:start="73:13" pos:end="73:35"><call pos:start="73:13" pos:end="73:31"><name pos:start="73:13" pos:end="73:26">arm_current_el</name><argument_list pos:start="73:27" pos:end="73:31">(<argument pos:start="73:28" pos:end="73:30"><expr pos:start="73:28" pos:end="73:30"><name pos:start="73:28" pos:end="73:30">env</name></expr></argument>)</argument_list></call> <operator pos:start="73:33" pos:end="73:33">&gt;</operator> <literal type="number" pos:start="73:35" pos:end="73:35">1</literal></expr>)</condition> <block pos:start="73:38" pos:end="79:9">{<block_content pos:start="77:13" pos:end="77:25">

            <comment type="block" pos:start="75:13" pos:end="75:68">/* Context matches never fire in EL2 or (AArch64) EL3 */</comment>

            <return pos:start="77:13" pos:end="77:25">return <expr pos:start="77:20" pos:end="77:24"><name pos:start="77:20" pos:end="77:24">false</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <return pos:start="81:9" pos:end="81:71">return <expr pos:start="81:16" pos:end="81:70"><operator pos:start="81:16" pos:end="81:16">(</operator><name pos:start="81:17" pos:end="81:26">contextidr</name> <operator pos:start="81:28" pos:end="81:29">==</operator> <call pos:start="81:31" pos:end="81:69"><name pos:start="81:31" pos:end="81:39">extract64</name><argument_list pos:start="81:40" pos:end="81:69">(<argument pos:start="81:41" pos:end="81:61"><expr pos:start="81:41" pos:end="81:61"><name pos:start="81:41" pos:end="81:61"><name pos:start="81:41" pos:end="81:43">env</name><operator pos:start="81:44" pos:end="81:45">-&gt;</operator><name pos:start="81:46" pos:end="81:49">cp15</name><operator pos:start="81:50" pos:end="81:50">.</operator><name pos:start="81:51" pos:end="81:56">dbgbvr</name><index pos:start="81:57" pos:end="81:61">[<expr pos:start="81:58" pos:end="81:60"><name pos:start="81:58" pos:end="81:60">lbn</name></expr>]</index></name></expr></argument>, <argument pos:start="81:64" pos:end="81:64"><expr pos:start="81:64" pos:end="81:64"><literal type="number" pos:start="81:64" pos:end="81:64">0</literal></expr></argument>, <argument pos:start="81:67" pos:end="81:68"><expr pos:start="81:67" pos:end="81:68"><literal type="number" pos:start="81:67" pos:end="81:68">32</literal></expr></argument>)</argument_list></call><operator pos:start="81:70" pos:end="81:70">)</operator></expr>;</return>

    <case pos:start="83:5" pos:end="83:11">case <expr pos:start="83:10" pos:end="83:10"><literal type="number" pos:start="83:10" pos:end="83:10">5</literal></expr>:</case> <comment type="block" pos:start="83:13" pos:end="83:63">/* linked address mismatch (reserved in AArch64) */</comment>

    <case pos:start="85:5" pos:end="85:11">case <expr pos:start="85:10" pos:end="85:10"><literal type="number" pos:start="85:10" pos:end="85:10">9</literal></expr>:</case> <comment type="block" pos:start="85:13" pos:end="85:56">/* linked VMID match (reserved if no EL2) */</comment>

    <case pos:start="87:5" pos:end="87:12">case <expr pos:start="87:10" pos:end="87:11"><literal type="number" pos:start="87:10" pos:end="87:11">11</literal></expr>:</case> <comment type="block" pos:start="87:14" pos:end="87:72">/* linked context ID and VMID match (reserved if no EL2) */</comment>

    <default pos:start="89:5" pos:end="89:12">default:</default>

        <comment type="block" pos:start="91:9" pos:end="95:11">/* Links to Unlinked context breakpoints must generate no

         * events; we choose to do the same for reserved values too.

         */</comment>

        <return pos:start="97:9" pos:end="97:21">return <expr pos:start="97:16" pos:end="97:20"><name pos:start="97:16" pos:end="97:20">false</name></expr>;</return>

    </block_content>}</block></switch>



    <return pos:start="103:5" pos:end="103:17">return <expr pos:start="103:12" pos:end="103:16"><name pos:start="103:12" pos:end="103:16">false</name></expr>;</return>

</block_content>}</block></function>
</unit>
