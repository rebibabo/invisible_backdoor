<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14274.c" pos:tabs="8"><function pos:start="1:1" pos:end="235:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">ff_imdct_calc_sse</name><parameter_list pos:start="1:23" pos:end="3:62">(<parameter pos:start="1:24" pos:end="1:37"><decl pos:start="1:24" pos:end="1:37"><type pos:start="1:24" pos:end="1:37"><name pos:start="1:24" pos:end="1:34">MDCTContext</name> <modifier pos:start="1:36" pos:end="1:36">*</modifier></type><name pos:start="1:37" pos:end="1:37">s</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:56"><name pos:start="1:40" pos:end="1:48">FFTSample</name> <modifier pos:start="1:50" pos:end="1:50">*</modifier></type><name pos:start="1:51" pos:end="1:56">output</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:45"><decl pos:start="3:24" pos:end="3:45"><type pos:start="3:24" pos:end="3:45"><specifier pos:start="3:24" pos:end="3:28">const</specifier> <name pos:start="3:30" pos:end="3:38">FFTSample</name> <modifier pos:start="3:40" pos:end="3:40">*</modifier></type><name pos:start="3:41" pos:end="3:45">input</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:61"><decl pos:start="3:48" pos:end="3:61"><type pos:start="3:48" pos:end="3:61"><name pos:start="3:48" pos:end="3:56">FFTSample</name> <modifier pos:start="3:58" pos:end="3:58">*</modifier></type><name pos:start="3:59" pos:end="3:61">tmp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="235:1">{<block_content pos:start="7:5" pos:end="233:6">

    <decl_stmt pos:start="7:5" pos:end="7:26"><decl pos:start="7:5" pos:end="7:10"><type pos:start="7:5" pos:end="7:8"><name pos:start="7:5" pos:end="7:8">long</name></type> <name pos:start="7:10" pos:end="7:10">k</name></decl>, <decl pos:start="7:13" pos:end="7:14"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:13" pos:end="7:14">n8</name></decl>, <decl pos:start="7:17" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:17" pos:end="7:18">n4</name></decl>, <decl pos:start="7:21" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:21" pos:end="7:22">n2</name></decl>, <decl pos:start="7:25" pos:end="7:25"><type ref="prev" pos:start="7:5" pos:end="7:8"/><name pos:start="7:25" pos:end="7:25">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:43"><decl pos:start="9:5" pos:end="9:42"><type pos:start="9:5" pos:end="9:20"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">uint16_t</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:26">revtab</name> <init pos:start="9:28" pos:end="9:42">= <expr pos:start="9:30" pos:end="9:42"><name pos:start="9:30" pos:end="9:42"><name pos:start="9:30" pos:end="9:30">s</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:35">fft</name><operator pos:start="9:36" pos:end="9:36">.</operator><name pos:start="9:37" pos:end="9:42">revtab</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:36"><decl pos:start="11:5" pos:end="11:35"><type pos:start="11:5" pos:end="11:21"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:19">FFTSample</name> <modifier pos:start="11:21" pos:end="11:21">*</modifier></type><name pos:start="11:22" pos:end="11:25">tcos</name> <init pos:start="11:27" pos:end="11:35">= <expr pos:start="11:29" pos:end="11:35"><name pos:start="11:29" pos:end="11:35"><name pos:start="11:29" pos:end="11:29">s</name><operator pos:start="11:30" pos:end="11:31">-&gt;</operator><name pos:start="11:32" pos:end="11:35">tcos</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:21"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:19">FFTSample</name> <modifier pos:start="13:21" pos:end="13:21">*</modifier></type><name pos:start="13:22" pos:end="13:25">tsin</name> <init pos:start="13:27" pos:end="13:35">= <expr pos:start="13:29" pos:end="13:35"><name pos:start="13:29" pos:end="13:35"><name pos:start="13:29" pos:end="13:29">s</name><operator pos:start="13:30" pos:end="13:31">-&gt;</operator><name pos:start="13:32" pos:end="13:35">tsin</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:31"><decl pos:start="15:5" pos:end="15:24"><type pos:start="15:5" pos:end="15:21"><specifier pos:start="15:5" pos:end="15:9">const</specifier> <name pos:start="15:11" pos:end="15:19">FFTSample</name> <modifier pos:start="15:21" pos:end="15:21">*</modifier></type><name pos:start="15:22" pos:end="15:24">in1</name></decl>, <decl pos:start="15:27" pos:end="15:30"><type ref="prev" pos:start="15:5" pos:end="15:21"><modifier pos:start="15:27" pos:end="15:27">*</modifier></type><name pos:start="15:28" pos:end="15:30">in2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:38"><decl pos:start="17:5" pos:end="17:37"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:14">FFTComplex</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:17">z</name> <init pos:start="17:19" pos:end="17:37">= <expr pos:start="17:21" pos:end="17:37"><operator pos:start="17:21" pos:end="17:21">(</operator><name pos:start="17:22" pos:end="17:31">FFTComplex</name> <operator pos:start="17:33" pos:end="17:33">*</operator><operator pos:start="17:34" pos:end="17:34">)</operator><name pos:start="17:35" pos:end="17:37">tmp</name></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:22"><expr pos:start="21:5" pos:end="21:21"><name pos:start="21:5" pos:end="21:5">n</name> <operator pos:start="21:7" pos:end="21:7">=</operator> <literal type="number" pos:start="21:9" pos:end="21:9">1</literal> <operator pos:start="21:11" pos:end="21:12">&lt;&lt;</operator> <name pos:start="21:14" pos:end="21:21"><name pos:start="21:14" pos:end="21:14">s</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:21">nbits</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:6">n2</name> <operator pos:start="23:8" pos:end="23:8">=</operator> <name pos:start="23:10" pos:end="23:10">n</name> <operator pos:start="23:12" pos:end="23:13">&gt;&gt;</operator> <literal type="number" pos:start="23:15" pos:end="23:15">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:16"><expr pos:start="25:5" pos:end="25:15"><name pos:start="25:5" pos:end="25:6">n4</name> <operator pos:start="25:8" pos:end="25:8">=</operator> <name pos:start="25:10" pos:end="25:10">n</name> <operator pos:start="25:12" pos:end="25:13">&gt;&gt;</operator> <literal type="number" pos:start="25:15" pos:end="25:15">2</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:16"><expr pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:6">n8</name> <operator pos:start="27:8" pos:end="27:8">=</operator> <name pos:start="27:10" pos:end="27:10">n</name> <operator pos:start="27:12" pos:end="27:13">&gt;&gt;</operator> <literal type="number" pos:start="27:15" pos:end="27:15">3</literal></expr>;</expr_stmt>



    <asm pos:start="31:5" pos:end="31:59">asm <specifier pos:start="31:9" pos:end="31:16">volatile</specifier> ("movaps %0, %%xmm7\n\t"::"m"(*p1m1p1m1));</asm>



    <comment type="block" pos:start="35:5" pos:end="35:22">/* pre rotation */</comment>

    <expr_stmt pos:start="37:5" pos:end="37:16"><expr pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:7">in1</name> <operator pos:start="37:9" pos:end="37:9">=</operator> <name pos:start="37:11" pos:end="37:15">input</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:25"><expr pos:start="39:5" pos:end="39:24"><name pos:start="39:5" pos:end="39:7">in2</name> <operator pos:start="39:9" pos:end="39:9">=</operator> <name pos:start="39:11" pos:end="39:15">input</name> <operator pos:start="39:17" pos:end="39:17">+</operator> <name pos:start="39:19" pos:end="39:20">n2</name> <operator pos:start="39:22" pos:end="39:22">-</operator> <literal type="number" pos:start="39:24" pos:end="39:24">4</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="43:5" pos:end="51:6">/* Complex multiplication

       Two complex products per iteration, we could have 4 with 8 xmm

       registers, 8 with 16 xmm registers.

       Maybe we should unroll more.

    */</comment>

    <for pos:start="53:5" pos:end="101:5">for <control pos:start="53:9" pos:end="53:31">(<init pos:start="53:10" pos:end="53:15"><expr pos:start="53:10" pos:end="53:14"><name pos:start="53:10" pos:end="53:10">k</name> <operator pos:start="53:12" pos:end="53:12">=</operator> <literal type="number" pos:start="53:14" pos:end="53:14">0</literal></expr>;</init> <condition pos:start="53:17" pos:end="53:23"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:17">k</name> <operator pos:start="53:19" pos:end="53:19">&lt;</operator> <name pos:start="53:21" pos:end="53:22">n4</name></expr>;</condition> <incr pos:start="53:25" pos:end="53:30"><expr pos:start="53:25" pos:end="53:30"><name pos:start="53:25" pos:end="53:25">k</name> <operator pos:start="53:27" pos:end="53:28">+=</operator> <literal type="number" pos:start="53:30" pos:end="53:30">2</literal></expr></incr>)</control> <block pos:start="53:33" pos:end="101:5">{<block_content pos:start="55:9" pos:end="99:10">

        <asm pos:start="55:9" pos:end="87:10">asm <specifier pos:start="55:13" pos:end="55:20">volatile</specifier> (

            "movaps          %0, %%xmm0 \n\t"   <comment type="line" pos:start="57:49" pos:end="57:74">// xmm0 = r0 X  r1 X : in2</comment>

            "movaps          %1, %%xmm3 \n\t"   <comment type="line" pos:start="59:49" pos:end="59:74">// xmm3 = X  i1 X  i0: in1</comment>

            "movlps          %2, %%xmm1 \n\t"   <comment type="line" pos:start="61:49" pos:end="61:75">// xmm1 = X  X  R1 R0: tcos</comment>

            "movlps          %3, %%xmm2 \n\t"   <comment type="line" pos:start="63:49" pos:end="63:75">// xmm2 = X  X  I1 I0: tsin</comment>

            "shufps $95, %%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="65:49" pos:end="65:69">// xmm0 = r1 r1 r0 r0</comment>

            "shufps $160,%%xmm3, %%xmm3 \n\t"   <comment type="line" pos:start="67:49" pos:end="67:69">// xmm3 = i1 i1 i0 i0</comment>

            "unpcklps    %%xmm2, %%xmm1 \n\t"   <comment type="line" pos:start="69:49" pos:end="69:69">// xmm1 = I1 R1 I0 R0</comment>

            "movaps      %%xmm1, %%xmm2 \n\t"   <comment type="line" pos:start="71:49" pos:end="71:69">// xmm2 = I1 R1 I0 R0</comment>

            "xorps       %%xmm7, %%xmm2 \n\t"   <comment type="line" pos:start="73:49" pos:end="73:71">// xmm2 = -I1 R1 -I0 R0</comment>

            "mulps       %%xmm1, %%xmm0 \n\t"   <comment type="line" pos:start="75:49" pos:end="75:69">// xmm0 = rI rR rI rR</comment>

            "shufps $177,%%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="77:49" pos:end="77:71">// xmm2 = R1 -I1 R0 -I0</comment>

            "mulps       %%xmm2, %%xmm3 \n\t"   <comment type="line" pos:start="79:49" pos:end="79:71">// xmm3 = Ri -Ii Ri -Ii</comment>

            "addps       %%xmm3, %%xmm0 \n\t"   <comment type="line" pos:start="81:49" pos:end="81:64">// xmm0 = result</comment>

            ::"m"(in2[-2*k]), "m"(in1[2*k]),

              "m"(tcos[k]), "m"(tsin[k])

        );</asm>

        <comment type="block" pos:start="89:9" pos:end="89:66">/* Should be in the same block, hack for gcc2.95 &amp; gcc3 */</comment>

        <asm pos:start="91:9" pos:end="99:10">asm (

            "movlps      %%xmm0, %0     \n\t"

            "movhps      %%xmm0, %1     \n\t"

            :"=m"(z[revtab[k]]), "=m"(z[revtab[k + 1]])

        );</asm>

    </block_content>}</block></for>



    <expr_stmt pos:start="105:5" pos:end="105:32"><expr pos:start="105:5" pos:end="105:31"><call pos:start="105:5" pos:end="105:31"><name pos:start="105:5" pos:end="105:19">ff_fft_calc_sse</name><argument_list pos:start="105:20" pos:end="105:31">(<argument pos:start="105:21" pos:end="105:27"><expr pos:start="105:21" pos:end="105:27"><operator pos:start="105:21" pos:end="105:21">&amp;</operator><name pos:start="105:22" pos:end="105:27"><name pos:start="105:22" pos:end="105:22">s</name><operator pos:start="105:23" pos:end="105:24">-&gt;</operator><name pos:start="105:25" pos:end="105:27">fft</name></name></expr></argument>, <argument pos:start="105:30" pos:end="105:30"><expr pos:start="105:30" pos:end="105:30"><name pos:start="105:30" pos:end="105:30">z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="109:5" pos:end="109:48">/* Not currently needed, added for safety */</comment>

    <asm pos:start="111:5" pos:end="111:59">asm <specifier pos:start="111:9" pos:end="111:16">volatile</specifier> ("movaps %0, %%xmm7\n\t"::"m"(*p1m1p1m1));</asm>



    <comment type="block" pos:start="115:5" pos:end="115:36">/* post rotation + reordering */</comment>

    <for pos:start="117:5" pos:end="155:5">for <control pos:start="117:9" pos:end="117:31">(<init pos:start="117:10" pos:end="117:15"><expr pos:start="117:10" pos:end="117:14"><name pos:start="117:10" pos:end="117:10">k</name> <operator pos:start="117:12" pos:end="117:12">=</operator> <literal type="number" pos:start="117:14" pos:end="117:14">0</literal></expr>;</init> <condition pos:start="117:17" pos:end="117:23"><expr pos:start="117:17" pos:end="117:22"><name pos:start="117:17" pos:end="117:17">k</name> <operator pos:start="117:19" pos:end="117:19">&lt;</operator> <name pos:start="117:21" pos:end="117:22">n4</name></expr>;</condition> <incr pos:start="117:25" pos:end="117:30"><expr pos:start="117:25" pos:end="117:30"><name pos:start="117:25" pos:end="117:25">k</name> <operator pos:start="117:27" pos:end="117:28">+=</operator> <literal type="number" pos:start="117:30" pos:end="117:30">2</literal></expr></incr>)</control> <block pos:start="117:33" pos:end="155:5">{<block_content pos:start="119:9" pos:end="153:10">

        <asm pos:start="119:9" pos:end="153:10">asm (

            "movaps          %0, %%xmm0 \n\t"   <comment type="line" pos:start="121:49" pos:end="121:72">// xmm0 = i1 r1 i0 r0: z</comment>

            "movlps          %1, %%xmm1 \n\t"   <comment type="line" pos:start="123:49" pos:end="123:75">// xmm1 = X  X  R1 R0: tcos</comment>

            "movaps      %%xmm0, %%xmm3 \n\t"   <comment type="line" pos:start="125:49" pos:end="125:69">// xmm3 = i1 r1 i0 r0</comment>

            "movlps          %2, %%xmm2 \n\t"   <comment type="line" pos:start="127:49" pos:end="127:75">// xmm2 = X  X  I1 I0: tsin</comment>

            "shufps $160,%%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="129:49" pos:end="129:69">// xmm0 = r1 r1 r0 r0</comment>

            "shufps $245,%%xmm3, %%xmm3 \n\t"   <comment type="line" pos:start="131:49" pos:end="131:69">// xmm3 = i1 i1 i0 i0</comment>

            "unpcklps    %%xmm2, %%xmm1 \n\t"   <comment type="line" pos:start="133:49" pos:end="133:69">// xmm1 = I1 R1 I0 R0</comment>

            "movaps      %%xmm1, %%xmm2 \n\t"   <comment type="line" pos:start="135:49" pos:end="135:69">// xmm2 = I1 R1 I0 R0</comment>

            "xorps       %%xmm7, %%xmm2 \n\t"   <comment type="line" pos:start="137:49" pos:end="137:71">// xmm2 = -I1 R1 -I0 R0</comment>

            "mulps       %%xmm1, %%xmm0 \n\t"   <comment type="line" pos:start="139:49" pos:end="139:69">// xmm0 = rI rR rI rR</comment>

            "shufps $177,%%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="141:49" pos:end="141:71">// xmm2 = R1 -I1 R0 -I0</comment>

            "mulps       %%xmm2, %%xmm3 \n\t"   <comment type="line" pos:start="143:49" pos:end="143:71">// xmm3 = Ri -Ii Ri -Ii</comment>

            "addps       %%xmm3, %%xmm0 \n\t"   <comment type="line" pos:start="145:49" pos:end="145:64">// xmm0 = result</comment>

            "movaps      %%xmm0, %0     \n\t"

            :"+m"(z[k])

            :"m"(tcos[k]), "m"(tsin[k])

        );</asm>

    </block_content>}</block></for>



    <comment type="block" pos:start="159:5" pos:end="179:6">/*

       Mnemonics:

       0 = z[k].re

       1 = z[k].im

       2 = z[k + 1].re

       3 = z[k + 1].im

       4 = z[-k - 2].re

       5 = z[-k - 2].im

       6 = z[-k - 1].re

       7 = z[-k - 1].im

    */</comment>

    <expr_stmt pos:start="181:5" pos:end="181:13"><expr pos:start="181:5" pos:end="181:12"><name pos:start="181:5" pos:end="181:5">k</name> <operator pos:start="181:7" pos:end="181:7">=</operator> <literal type="number" pos:start="181:9" pos:end="181:11">16</literal><operator pos:start="181:11" pos:end="181:11">-</operator><name pos:start="181:12" pos:end="181:12">n</name></expr>;</expr_stmt>

    <asm pos:start="183:5" pos:end="183:59">asm <specifier pos:start="183:9" pos:end="183:16">volatile</specifier>("movaps %0, %%xmm7 \n\t"::"m"(*m1m1m1m1));</asm>

    <asm pos:start="185:5" pos:end="233:6">asm <specifier pos:start="185:9" pos:end="185:16">volatile</specifier>(

        "1: \n\t"

        "movaps  -16(%4,%0), %%xmm1 \n\t"   <comment type="line" pos:start="189:45" pos:end="189:71">// xmm1 = 4 5 6 7 = z[-2-k]</comment>

        "neg %0 \n\t"

        "movaps     (%4,%0), %%xmm0 \n\t"   <comment type="line" pos:start="193:45" pos:end="193:68">// xmm0 = 0 1 2 3 = z[k]</comment>

        "xorps       %%xmm7, %%xmm0 \n\t"   <comment type="line" pos:start="195:45" pos:end="195:65">// xmm0 = -0 -1 -2 -3</comment>

        "movaps      %%xmm0, %%xmm2 \n\t"   <comment type="line" pos:start="197:45" pos:end="197:65">// xmm2 = -0 -1 -2 -3</comment>

        "shufps $141,%%xmm1, %%xmm0 \n\t"   <comment type="line" pos:start="199:45" pos:end="199:63">// xmm0 = -1 -3 4 6</comment>

        "shufps $216,%%xmm1, %%xmm2 \n\t"   <comment type="line" pos:start="201:45" pos:end="201:63">// xmm2 = -0 -2 5 7</comment>

        "shufps $156,%%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="203:45" pos:end="203:65">// xmm0 = -1 6 -3 4 !</comment>

        "shufps $156,%%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="205:45" pos:end="205:65">// xmm2 = -0 7 -2 5 !</comment>

        "movaps      %%xmm0, (%1,%0) \n\t"  <comment type="line" pos:start="207:45" pos:end="207:58">// output[2*k]</comment>

        "movaps      %%xmm2, (%2,%0) \n\t"  <comment type="line" pos:start="209:45" pos:end="209:61">// output[n2+2*k]</comment>

        "neg %0 \n\t"

        "shufps $27, %%xmm0, %%xmm0 \n\t"   <comment type="line" pos:start="213:45" pos:end="213:63">// xmm0 = 4 -3 6 -1</comment>

        "xorps       %%xmm7, %%xmm0 \n\t"   <comment type="line" pos:start="215:45" pos:end="215:65">// xmm0 = -4 3 -6 1 !</comment>

        "shufps $27, %%xmm2, %%xmm2 \n\t"   <comment type="line" pos:start="217:45" pos:end="217:65">// xmm2 = 5 -2 7 -0 !</comment>

        "movaps      %%xmm0, -16(%2,%0) \n\t" <comment type="line" pos:start="219:47" pos:end="219:65">// output[n2-4-2*k]</comment>

        "movaps      %%xmm2, -16(%3,%0) \n\t" <comment type="line" pos:start="221:47" pos:end="221:64">// output[n-4-2*k]</comment>

        "add $16, %0 \n\t"

        "jle 1b \n\t"

        :"+r"(k)

        :"r"(output), "r"(output+n2), "r"(output+n), "r"(z+n8)

        :"memory"

    );</asm>

</block_content>}</block></function>
</unit>
