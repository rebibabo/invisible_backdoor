<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18091.c" pos:tabs="8"><function pos:start="1:1" pos:end="75:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:39">spapr_memory_unplug_request</name><parameter_list pos:start="1:40" pos:end="3:71">(<parameter pos:start="1:41" pos:end="1:67"><decl pos:start="1:41" pos:end="1:67"><type pos:start="1:41" pos:end="1:67"><name pos:start="1:41" pos:end="1:54">HotplugHandler</name> <modifier pos:start="1:56" pos:end="1:56">*</modifier></type><name pos:start="1:57" pos:end="1:67">hotplug_dev</name></decl></parameter>,

                                        <parameter pos:start="3:41" pos:end="3:56"><decl pos:start="3:41" pos:end="3:56"><type pos:start="3:41" pos:end="3:56"><name pos:start="3:41" pos:end="3:51">DeviceState</name> <modifier pos:start="3:53" pos:end="3:53">*</modifier></type><name pos:start="3:54" pos:end="3:56">dev</name></decl></parameter>, <parameter pos:start="3:59" pos:end="3:70"><decl pos:start="3:59" pos:end="3:70"><type pos:start="3:59" pos:end="3:70"><name pos:start="3:59" pos:end="3:63">Error</name> <modifier pos:start="3:65" pos:end="3:65">*</modifier><modifier pos:start="3:66" pos:end="3:66">*</modifier></type><name pos:start="3:67" pos:end="3:70">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="75:1">{<block_content pos:start="7:5" pos:end="73:37">

    <decl_stmt pos:start="7:5" pos:end="7:58"><decl pos:start="7:5" pos:end="7:57"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">sPAPRMachineState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">spapr</name> <init pos:start="7:30" pos:end="7:57">= <expr pos:start="7:32" pos:end="7:57"><call pos:start="7:32" pos:end="7:57"><name pos:start="7:32" pos:end="7:44">SPAPR_MACHINE</name><argument_list pos:start="7:45" pos:end="7:57">(<argument pos:start="7:46" pos:end="7:56"><expr pos:start="7:46" pos:end="7:56"><name pos:start="7:46" pos:end="7:56">hotplug_dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:9">Error</name> <modifier pos:start="9:11" pos:end="9:11">*</modifier></type><name pos:start="9:12" pos:end="9:20">local_err</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">PCDIMMDevice</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:22">dimm</name> <init pos:start="11:24" pos:end="11:37">= <expr pos:start="11:26" pos:end="11:37"><call pos:start="11:26" pos:end="11:37"><name pos:start="11:26" pos:end="11:32">PC_DIMM</name><argument_list pos:start="11:33" pos:end="11:37">(<argument pos:start="11:34" pos:end="11:36"><expr pos:start="11:34" pos:end="11:36"><name pos:start="11:34" pos:end="11:36">dev</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:53"><decl pos:start="13:5" pos:end="13:52"><type pos:start="13:5" pos:end="13:23"><name pos:start="13:5" pos:end="13:21">PCDIMMDeviceClass</name> <modifier pos:start="13:23" pos:end="13:23">*</modifier></type><name pos:start="13:24" pos:end="13:26">ddc</name> <init pos:start="13:28" pos:end="13:52">= <expr pos:start="13:30" pos:end="13:52"><call pos:start="13:30" pos:end="13:52"><name pos:start="13:30" pos:end="13:46">PC_DIMM_GET_CLASS</name><argument_list pos:start="13:47" pos:end="13:52">(<argument pos:start="13:48" pos:end="13:51"><expr pos:start="13:48" pos:end="13:51"><name pos:start="13:48" pos:end="13:51">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:52"><decl pos:start="15:5" pos:end="15:51"><type pos:start="15:5" pos:end="15:18"><name pos:start="15:5" pos:end="15:16">MemoryRegion</name> <modifier pos:start="15:18" pos:end="15:18">*</modifier></type><name pos:start="15:19" pos:end="15:20">mr</name> <init pos:start="15:22" pos:end="15:51">= <expr pos:start="15:24" pos:end="15:51"><call pos:start="15:24" pos:end="15:51"><name pos:start="15:24" pos:end="15:45"><name pos:start="15:24" pos:end="15:26">ddc</name><operator pos:start="15:27" pos:end="15:28">-&gt;</operator><name pos:start="15:29" pos:end="15:45">get_memory_region</name></name><argument_list pos:start="15:46" pos:end="15:51">(<argument pos:start="15:47" pos:end="15:50"><expr pos:start="15:47" pos:end="15:50"><name pos:start="15:47" pos:end="15:50">dimm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:43"><decl pos:start="17:5" pos:end="17:42"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint64_t</name></type> <name pos:start="17:14" pos:end="17:17">size</name> <init pos:start="17:19" pos:end="17:42">= <expr pos:start="17:21" pos:end="17:42"><call pos:start="17:21" pos:end="17:42"><name pos:start="17:21" pos:end="17:38">memory_region_size</name><argument_list pos:start="17:39" pos:end="17:42">(<argument pos:start="17:40" pos:end="17:41"><expr pos:start="17:40" pos:end="17:41"><name pos:start="17:40" pos:end="17:41">mr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:54"><decl pos:start="19:5" pos:end="19:53"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:12">uint32_t</name></type> <name pos:start="19:14" pos:end="19:20">nr_lmbs</name> <init pos:start="19:22" pos:end="19:53">= <expr pos:start="19:24" pos:end="19:53"><name pos:start="19:24" pos:end="19:27">size</name> <operator pos:start="19:29" pos:end="19:29">/</operator> <name pos:start="19:31" pos:end="19:53">SPAPR_MEMORY_BLOCK_SIZE</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:30"><decl pos:start="21:5" pos:end="21:23"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:12">uint64_t</name></type> <name pos:start="21:14" pos:end="21:23">addr_start</name></decl>, <decl pos:start="21:26" pos:end="21:29"><type ref="prev" pos:start="21:5" pos:end="21:12"/><name pos:start="21:26" pos:end="21:29">addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:10"><decl pos:start="23:5" pos:end="23:9"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:26"><decl pos:start="25:5" pos:end="25:25"><type pos:start="25:5" pos:end="25:22"><name pos:start="25:5" pos:end="25:20">sPAPRDRConnector</name> <modifier pos:start="25:22" pos:end="25:22">*</modifier></type><name pos:start="25:23" pos:end="25:25">drc</name></decl>;</decl_stmt>

    <expr_stmt pos:start="27:5" pos:end="29:53"><expr pos:start="27:5" pos:end="29:52"><name pos:start="27:5" pos:end="27:14">addr_start</name> <operator pos:start="27:16" pos:end="27:16">=</operator> <call pos:start="27:18" pos:end="29:52"><name pos:start="27:18" pos:end="27:41">object_property_get_uint</name><argument_list pos:start="27:42" pos:end="29:52">(<argument pos:start="27:43" pos:end="27:54"><expr pos:start="27:43" pos:end="27:54"><call pos:start="27:43" pos:end="27:54"><name pos:start="27:43" pos:end="27:48">OBJECT</name><argument_list pos:start="27:49" pos:end="27:54">(<argument pos:start="27:50" pos:end="27:53"><expr pos:start="27:50" pos:end="27:53"><name pos:start="27:50" pos:end="27:53">dimm</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="27:57" pos:end="27:73"><expr pos:start="27:57" pos:end="27:73"><name pos:start="27:57" pos:end="27:73">PC_DIMM_ADDR_PROP</name></expr></argument>,

                                         <argument pos:start="29:42" pos:end="29:51"><expr pos:start="29:42" pos:end="29:51"><operator pos:start="29:42" pos:end="29:42">&amp;</operator><name pos:start="29:43" pos:end="29:51">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="35:5"><if pos:start="31:5" pos:end="35:5">if <condition pos:start="31:8" pos:end="31:18">(<expr pos:start="31:9" pos:end="31:17"><name pos:start="31:9" pos:end="31:17">local_err</name></expr>)</condition> <block pos:start="31:20" pos:end="35:5">{<block_content pos:start="33:9" pos:end="33:17">

        <goto pos:start="33:9" pos:end="33:17">goto <name pos:start="33:14" pos:end="33:16">out</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:57"><expr pos:start="39:5" pos:end="39:56"><call pos:start="39:5" pos:end="39:56"><name pos:start="39:5" pos:end="39:34">spapr_pending_dimm_unplugs_add</name><argument_list pos:start="39:35" pos:end="39:56">(<argument pos:start="39:36" pos:end="39:40"><expr pos:start="39:36" pos:end="39:40"><name pos:start="39:36" pos:end="39:40">spapr</name></expr></argument>, <argument pos:start="39:43" pos:end="39:49"><expr pos:start="39:43" pos:end="39:49"><name pos:start="39:43" pos:end="39:49">nr_lmbs</name></expr></argument>, <argument pos:start="39:52" pos:end="39:55"><expr pos:start="39:52" pos:end="39:55"><name pos:start="39:52" pos:end="39:55">dimm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="43:5" pos:end="43:22"><expr pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:8">addr</name> <operator pos:start="43:10" pos:end="43:10">=</operator> <name pos:start="43:12" pos:end="43:21">addr_start</name></expr>;</expr_stmt>

    <for pos:start="45:5" pos:end="59:5">for <control pos:start="45:9" pos:end="45:33">(<init pos:start="45:10" pos:end="45:15"><expr pos:start="45:10" pos:end="45:14"><name pos:start="45:10" pos:end="45:10">i</name> <operator pos:start="45:12" pos:end="45:12">=</operator> <literal type="number" pos:start="45:14" pos:end="45:14">0</literal></expr>;</init> <condition pos:start="45:17" pos:end="45:28"><expr pos:start="45:17" pos:end="45:27"><name pos:start="45:17" pos:end="45:17">i</name> <operator pos:start="45:19" pos:end="45:19">&lt;</operator> <name pos:start="45:21" pos:end="45:27">nr_lmbs</name></expr>;</condition> <incr pos:start="45:30" pos:end="45:32"><expr pos:start="45:30" pos:end="45:32"><name pos:start="45:30" pos:end="45:30">i</name><operator pos:start="45:31" pos:end="45:32">++</operator></expr></incr>)</control> <block pos:start="45:35" pos:end="59:5">{<block_content pos:start="47:9" pos:end="57:40">

        <expr_stmt pos:start="47:9" pos:end="49:62"><expr pos:start="47:9" pos:end="49:61"><name pos:start="47:9" pos:end="47:11">drc</name> <operator pos:start="47:13" pos:end="47:13">=</operator> <call pos:start="47:15" pos:end="49:61"><name pos:start="47:15" pos:end="47:29">spapr_drc_by_id</name><argument_list pos:start="47:30" pos:end="49:61">(<argument pos:start="47:31" pos:end="47:48"><expr pos:start="47:31" pos:end="47:48"><name pos:start="47:31" pos:end="47:48">TYPE_SPAPR_DRC_LMB</name></expr></argument>,

                              <argument pos:start="49:31" pos:end="49:60"><expr pos:start="49:31" pos:end="49:60"><name pos:start="49:31" pos:end="49:34">addr</name> <operator pos:start="49:36" pos:end="49:36">/</operator> <name pos:start="49:38" pos:end="49:60">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><call pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:16">g_assert</name><argument_list pos:start="51:17" pos:end="51:21">(<argument pos:start="51:18" pos:end="51:20"><expr pos:start="51:18" pos:end="51:20"><name pos:start="51:18" pos:end="51:20">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="55:9" pos:end="55:30"><expr pos:start="55:9" pos:end="55:29"><call pos:start="55:9" pos:end="55:29"><name pos:start="55:9" pos:end="55:24">spapr_drc_detach</name><argument_list pos:start="55:25" pos:end="55:29">(<argument pos:start="55:26" pos:end="55:28"><expr pos:start="55:26" pos:end="55:28"><name pos:start="55:26" pos:end="55:28">drc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:40"><expr pos:start="57:9" pos:end="57:39"><name pos:start="57:9" pos:end="57:12">addr</name> <operator pos:start="57:14" pos:end="57:15">+=</operator> <name pos:start="57:17" pos:end="57:39">SPAPR_MEMORY_BLOCK_SIZE</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="63:5" pos:end="65:64"><expr pos:start="63:5" pos:end="65:63"><name pos:start="63:5" pos:end="63:7">drc</name> <operator pos:start="63:9" pos:end="63:9">=</operator> <call pos:start="63:11" pos:end="65:63"><name pos:start="63:11" pos:end="63:25">spapr_drc_by_id</name><argument_list pos:start="63:26" pos:end="65:63">(<argument pos:start="63:27" pos:end="63:44"><expr pos:start="63:27" pos:end="63:44"><name pos:start="63:27" pos:end="63:44">TYPE_SPAPR_DRC_LMB</name></expr></argument>,

                          <argument pos:start="65:27" pos:end="65:62"><expr pos:start="65:27" pos:end="65:62"><name pos:start="65:27" pos:end="65:36">addr_start</name> <operator pos:start="65:38" pos:end="65:38">/</operator> <name pos:start="65:40" pos:end="65:62">SPAPR_MEMORY_BLOCK_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="69:77"><expr pos:start="67:5" pos:end="69:76"><call pos:start="67:5" pos:end="69:76"><name pos:start="67:5" pos:end="67:45">spapr_hotplug_req_remove_by_count_indexed</name><argument_list pos:start="67:46" pos:end="69:76">(<argument pos:start="67:47" pos:end="67:73"><expr pos:start="67:47" pos:end="67:73"><name pos:start="67:47" pos:end="67:73">SPAPR_DR_CONNECTOR_TYPE_LMB</name></expr></argument>,

                                              <argument pos:start="69:47" pos:end="69:53"><expr pos:start="69:47" pos:end="69:53"><name pos:start="69:47" pos:end="69:53">nr_lmbs</name></expr></argument>, <argument pos:start="69:56" pos:end="69:75"><expr pos:start="69:56" pos:end="69:75"><call pos:start="69:56" pos:end="69:75"><name pos:start="69:56" pos:end="69:70">spapr_drc_index</name><argument_list pos:start="69:71" pos:end="69:75">(<argument pos:start="69:72" pos:end="69:74"><expr pos:start="69:72" pos:end="69:74"><name pos:start="69:72" pos:end="69:74">drc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label pos:start="71:1" pos:end="71:4"><name pos:start="71:1" pos:end="71:3">out</name>:</label>

    <expr_stmt pos:start="73:5" pos:end="73:37"><expr pos:start="73:5" pos:end="73:36"><call pos:start="73:5" pos:end="73:36"><name pos:start="73:5" pos:end="73:19">error_propagate</name><argument_list pos:start="73:20" pos:end="73:36">(<argument pos:start="73:21" pos:end="73:24"><expr pos:start="73:21" pos:end="73:24"><name pos:start="73:21" pos:end="73:24">errp</name></expr></argument>, <argument pos:start="73:27" pos:end="73:35"><expr pos:start="73:27" pos:end="73:35"><name pos:start="73:27" pos:end="73:35">local_err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
