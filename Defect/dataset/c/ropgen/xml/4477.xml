<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4477.c" pos:tabs="8"><function pos:start="1:1" pos:end="207:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">ape_decode_frame</name><parameter_list pos:start="1:28" pos:end="5:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:38"><decl pos:start="3:29" pos:end="3:38"><type pos:start="3:29" pos:end="3:38"><name pos:start="3:29" pos:end="3:32">void</name> <modifier pos:start="3:34" pos:end="3:34">*</modifier></type><name pos:start="3:35" pos:end="3:38">data</name></decl></parameter>, <parameter pos:start="3:41" pos:end="3:54"><decl pos:start="3:41" pos:end="3:54"><type pos:start="3:41" pos:end="3:54"><name pos:start="3:41" pos:end="3:43">int</name> <modifier pos:start="3:45" pos:end="3:45">*</modifier></type><name pos:start="3:46" pos:end="3:54">data_size</name></decl></parameter>,

                            <parameter pos:start="5:29" pos:end="5:43"><decl pos:start="5:29" pos:end="5:43"><type pos:start="5:29" pos:end="5:43"><name pos:start="5:29" pos:end="5:36">AVPacket</name> <modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="207:1">{<block_content pos:start="9:5" pos:end="205:22">

    <decl_stmt pos:start="9:5" pos:end="9:37"><decl pos:start="9:5" pos:end="9:36"><type pos:start="9:5" pos:end="9:19"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:17">uint8_t</name> <modifier pos:start="9:19" pos:end="9:19">*</modifier></type><name pos:start="9:20" pos:end="9:22">buf</name> <init pos:start="9:24" pos:end="9:36">= <expr pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:36"><name pos:start="9:26" pos:end="9:30">avpkt</name><operator pos:start="9:31" pos:end="9:32">-&gt;</operator><name pos:start="9:33" pos:end="9:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:31"><decl pos:start="11:5" pos:end="11:30"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:16">buf_size</name> <init pos:start="11:18" pos:end="11:30">= <expr pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:30"><name pos:start="11:20" pos:end="11:24">avpkt</name><operator pos:start="11:25" pos:end="11:26">-&gt;</operator><name pos:start="11:27" pos:end="11:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:37"><decl pos:start="13:5" pos:end="13:36"><type pos:start="13:5" pos:end="13:16"><name pos:start="13:5" pos:end="13:14">APEContext</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:17">s</name> <init pos:start="13:19" pos:end="13:36">= <expr pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:36"><name pos:start="13:21" pos:end="13:25">avctx</name><operator pos:start="13:26" pos:end="13:27">-&gt;</operator><name pos:start="13:28" pos:end="13:36">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:28"><decl pos:start="15:5" pos:end="15:27"><type pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:11">int16_t</name> <modifier pos:start="15:13" pos:end="15:13">*</modifier></type><name pos:start="15:14" pos:end="15:20">samples</name> <init pos:start="15:22" pos:end="15:27">= <expr pos:start="15:24" pos:end="15:27"><name pos:start="15:24" pos:end="15:27">data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:21"><decl pos:start="17:5" pos:end="17:20"><type pos:start="17:5" pos:end="17:12"><name pos:start="17:5" pos:end="17:12">uint32_t</name></type> <name pos:start="17:14" pos:end="17:20">nblocks</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:10"><decl pos:start="19:5" pos:end="19:9"><type pos:start="19:5" pos:end="19:7"><name pos:start="19:5" pos:end="19:7">int</name></type> <name pos:start="19:9" pos:end="19:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:7"><name pos:start="21:5" pos:end="21:7">int</name></type> <name pos:start="21:9" pos:end="21:22">blockstodecode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:19"><decl pos:start="23:5" pos:end="23:18"><type pos:start="23:5" pos:end="23:7"><name pos:start="23:5" pos:end="23:7">int</name></type> <name pos:start="23:9" pos:end="23:18">bytes_used</name></decl>;</decl_stmt>



    <comment type="block" pos:start="27:5" pos:end="27:41">/* should not happen but who knows */</comment>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:59">(<expr pos:start="29:9" pos:end="29:58"><name pos:start="29:9" pos:end="29:23">BLOCKS_PER_LOOP</name> <operator pos:start="29:25" pos:end="29:25">*</operator> <literal type="number" pos:start="29:27" pos:end="29:27">2</literal> <operator pos:start="29:29" pos:end="29:29">*</operator> <name pos:start="29:31" pos:end="29:45"><name pos:start="29:31" pos:end="29:35">avctx</name><operator pos:start="29:36" pos:end="29:37">-&gt;</operator><name pos:start="29:38" pos:end="29:45">channels</name></name> <operator pos:start="29:47" pos:end="29:47">&gt;</operator> <operator pos:start="29:49" pos:end="29:49">*</operator><name pos:start="29:50" pos:end="29:58">data_size</name></expr>)</condition> <block pos:start="29:61" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:31">

        <expr_stmt pos:start="31:9" pos:end="31:70"><expr pos:start="31:9" pos:end="31:69"><call pos:start="31:9" pos:end="31:69"><name pos:start="31:9" pos:end="31:14">av_log</name> <argument_list pos:start="31:16" pos:end="31:69">(<argument pos:start="31:17" pos:end="31:21"><expr pos:start="31:17" pos:end="31:21"><name pos:start="31:17" pos:end="31:21">avctx</name></expr></argument>, <argument pos:start="31:24" pos:end="31:35"><expr pos:start="31:24" pos:end="31:35"><name pos:start="31:24" pos:end="31:35">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="31:38" pos:end="31:68"><expr pos:start="31:38" pos:end="31:68"><literal type="string" pos:start="31:38" pos:end="31:68">"Output buffer is too small.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:31">return <expr pos:start="33:16" pos:end="33:30"><call pos:start="33:16" pos:end="33:30"><name pos:start="33:16" pos:end="33:22">AVERROR</name><argument_list pos:start="33:23" pos:end="33:30">(<argument pos:start="33:24" pos:end="33:29"><expr pos:start="33:24" pos:end="33:29"><name pos:start="33:24" pos:end="33:29">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="39:5" pos:end="41:37">/* this should never be negative, but bad things will happen if it is, so

       check it just to make sure. */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:32"><expr pos:start="43:5" pos:end="43:31"><call pos:start="43:5" pos:end="43:31"><name pos:start="43:5" pos:end="43:14">av_assert0</name><argument_list pos:start="43:15" pos:end="43:31">(<argument pos:start="43:16" pos:end="43:30"><expr pos:start="43:16" pos:end="43:30"><name pos:start="43:16" pos:end="43:25"><name pos:start="43:16" pos:end="43:16">s</name><operator pos:start="43:17" pos:end="43:18">-&gt;</operator><name pos:start="43:19" pos:end="43:25">samples</name></name> <operator pos:start="43:27" pos:end="43:28">&gt;=</operator> <literal type="number" pos:start="43:30" pos:end="43:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="47:5" pos:end="135:5"><if pos:start="47:5" pos:end="135:5">if<condition pos:start="47:7" pos:end="47:19">(<expr pos:start="47:8" pos:end="47:18"><operator pos:start="47:8" pos:end="47:8">!</operator><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:18">samples</name></name></expr>)</condition><block pos:start="47:20" pos:end="135:5">{<block_content pos:start="49:9" pos:end="133:9">

        <decl_stmt pos:start="49:9" pos:end="49:24"><decl pos:start="49:9" pos:end="49:23"><type pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:16">uint32_t</name></type> <name pos:start="49:18" pos:end="49:23">offset</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:23"><decl pos:start="51:9" pos:end="51:22"><type pos:start="51:9" pos:end="51:14"><name pos:start="51:9" pos:end="51:12">void</name> <modifier pos:start="51:14" pos:end="51:14">*</modifier></type><name pos:start="51:15" pos:end="51:22">tmp_data</name></decl>;</decl_stmt>



        <if_stmt pos:start="55:9" pos:end="61:9"><if pos:start="55:9" pos:end="61:9">if <condition pos:start="55:12" pos:end="55:25">(<expr pos:start="55:13" pos:end="55:24"><name pos:start="55:13" pos:end="55:20">buf_size</name> <operator pos:start="55:22" pos:end="55:22">&lt;</operator> <literal type="number" pos:start="55:24" pos:end="55:24">8</literal></expr>)</condition> <block pos:start="55:27" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:39">

            <expr_stmt pos:start="57:13" pos:end="57:65"><expr pos:start="57:13" pos:end="57:64"><call pos:start="57:13" pos:end="57:64"><name pos:start="57:13" pos:end="57:18">av_log</name><argument_list pos:start="57:19" pos:end="57:64">(<argument pos:start="57:20" pos:end="57:24"><expr pos:start="57:20" pos:end="57:24"><name pos:start="57:20" pos:end="57:24">avctx</name></expr></argument>, <argument pos:start="57:27" pos:end="57:38"><expr pos:start="57:27" pos:end="57:38"><name pos:start="57:27" pos:end="57:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="57:41" pos:end="57:63"><expr pos:start="57:41" pos:end="57:63"><literal type="string" pos:start="57:41" pos:end="57:63">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="59:13" pos:end="59:39">return <expr pos:start="59:20" pos:end="59:38"><name pos:start="59:20" pos:end="59:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="65:9" pos:end="65:61"><expr pos:start="65:9" pos:end="65:60"><name pos:start="65:9" pos:end="65:16">tmp_data</name> <operator pos:start="65:18" pos:end="65:18">=</operator> <call pos:start="65:20" pos:end="65:60"><name pos:start="65:20" pos:end="65:29">av_realloc</name><argument_list pos:start="65:30" pos:end="65:60">(<argument pos:start="65:31" pos:end="65:37"><expr pos:start="65:31" pos:end="65:37"><name pos:start="65:31" pos:end="65:37"><name pos:start="65:31" pos:end="65:31">s</name><operator pos:start="65:32" pos:end="65:33">-&gt;</operator><name pos:start="65:34" pos:end="65:37">data</name></name></expr></argument>, <argument pos:start="65:40" pos:end="65:59"><expr pos:start="65:40" pos:end="65:59"><call pos:start="65:40" pos:end="65:59"><name pos:start="65:40" pos:end="65:46">FFALIGN</name><argument_list pos:start="65:47" pos:end="65:59">(<argument pos:start="65:48" pos:end="65:55"><expr pos:start="65:48" pos:end="65:55"><name pos:start="65:48" pos:end="65:55">buf_size</name></expr></argument>, <argument pos:start="65:58" pos:end="65:58"><expr pos:start="65:58" pos:end="65:58"><literal type="number" pos:start="65:58" pos:end="65:58">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="67:9" pos:end="69:35"><if pos:start="67:9" pos:end="69:35">if <condition pos:start="67:12" pos:end="67:22">(<expr pos:start="67:13" pos:end="67:21"><operator pos:start="67:13" pos:end="67:13">!</operator><name pos:start="67:14" pos:end="67:21">tmp_data</name></expr>)</condition><block type="pseudo" pos:start="69:13" pos:end="69:35"><block_content pos:start="69:13" pos:end="69:35">

            <return pos:start="69:13" pos:end="69:35">return <expr pos:start="69:20" pos:end="69:34"><call pos:start="69:20" pos:end="69:34"><name pos:start="69:20" pos:end="69:26">AVERROR</name><argument_list pos:start="69:27" pos:end="69:34">(<argument pos:start="69:28" pos:end="69:33"><expr pos:start="69:28" pos:end="69:33"><name pos:start="69:28" pos:end="69:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt pos:start="71:9" pos:end="71:27"><expr pos:start="71:9" pos:end="71:26"><name pos:start="71:9" pos:end="71:15"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:15">data</name></name> <operator pos:start="71:17" pos:end="71:17">=</operator> <name pos:start="71:19" pos:end="71:26">tmp_data</name></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:82"><expr pos:start="73:9" pos:end="73:81"><call pos:start="73:9" pos:end="73:81"><name pos:start="73:9" pos:end="73:24"><name pos:start="73:9" pos:end="73:9">s</name><operator pos:start="73:10" pos:end="73:11">-&gt;</operator><name pos:start="73:12" pos:end="73:14">dsp</name><operator pos:start="73:15" pos:end="73:15">.</operator><name pos:start="73:16" pos:end="73:24">bswap_buf</name></name><argument_list pos:start="73:25" pos:end="73:81">(<argument pos:start="73:26" pos:end="73:43"><expr pos:start="73:26" pos:end="73:43"><operator pos:start="73:26" pos:end="73:26">(</operator><name pos:start="73:27" pos:end="73:34">uint32_t</name><operator pos:start="73:35" pos:end="73:35">*</operator><operator pos:start="73:36" pos:end="73:36">)</operator><name pos:start="73:37" pos:end="73:43"><name pos:start="73:37" pos:end="73:37">s</name><operator pos:start="73:38" pos:end="73:39">-&gt;</operator><name pos:start="73:40" pos:end="73:43">data</name></name></expr></argument>, <argument pos:start="73:46" pos:end="73:65"><expr pos:start="73:46" pos:end="73:65"><operator pos:start="73:46" pos:end="73:46">(</operator><specifier pos:start="73:47" pos:end="73:51">const</specifier> <name pos:start="73:53" pos:end="73:60">uint32_t</name><operator pos:start="73:61" pos:end="73:61">*</operator><operator pos:start="73:62" pos:end="73:62">)</operator><name pos:start="73:63" pos:end="73:65">buf</name></expr></argument>, <argument pos:start="73:68" pos:end="73:80"><expr pos:start="73:68" pos:end="73:80"><name pos:start="73:68" pos:end="73:75">buf_size</name> <operator pos:start="73:77" pos:end="73:78">&gt;&gt;</operator> <literal type="number" pos:start="73:80" pos:end="73:80">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="75:9" pos:end="75:39"><expr pos:start="75:9" pos:end="75:38"><name pos:start="75:9" pos:end="75:14"><name pos:start="75:9" pos:end="75:9">s</name><operator pos:start="75:10" pos:end="75:11">-&gt;</operator><name pos:start="75:12" pos:end="75:14">ptr</name></name> <operator pos:start="75:16" pos:end="75:16">=</operator> <name pos:start="75:18" pos:end="75:28"><name pos:start="75:18" pos:end="75:18">s</name><operator pos:start="75:19" pos:end="75:20">-&gt;</operator><name pos:start="75:21" pos:end="75:28">last_ptr</name></name> <operator pos:start="75:30" pos:end="75:30">=</operator> <name pos:start="75:32" pos:end="75:38"><name pos:start="75:32" pos:end="75:32">s</name><operator pos:start="75:33" pos:end="75:34">-&gt;</operator><name pos:start="75:35" pos:end="75:38">data</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:41"><expr pos:start="77:9" pos:end="77:40"><name pos:start="77:9" pos:end="77:19"><name pos:start="77:9" pos:end="77:9">s</name><operator pos:start="77:10" pos:end="77:11">-&gt;</operator><name pos:start="77:12" pos:end="77:19">data_end</name></name> <operator pos:start="77:21" pos:end="77:21">=</operator> <name pos:start="77:23" pos:end="77:29"><name pos:start="77:23" pos:end="77:23">s</name><operator pos:start="77:24" pos:end="77:25">-&gt;</operator><name pos:start="77:26" pos:end="77:29">data</name></name> <operator pos:start="77:31" pos:end="77:31">+</operator> <name pos:start="77:33" pos:end="77:40">buf_size</name></expr>;</expr_stmt>



        <expr_stmt pos:start="81:9" pos:end="81:47"><expr pos:start="81:9" pos:end="81:46"><name pos:start="81:9" pos:end="81:15">nblocks</name> <operator pos:start="81:17" pos:end="81:17">=</operator> <call pos:start="81:19" pos:end="81:46"><name pos:start="81:19" pos:end="81:37">bytestream_get_be32</name><argument_list pos:start="81:38" pos:end="81:46">(<argument pos:start="81:39" pos:end="81:45"><expr pos:start="81:39" pos:end="81:45"><operator pos:start="81:39" pos:end="81:39">&amp;</operator><name pos:start="81:40" pos:end="81:45"><name pos:start="81:40" pos:end="81:40">s</name><operator pos:start="81:41" pos:end="81:42">-&gt;</operator><name pos:start="81:43" pos:end="81:45">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:47"><expr pos:start="83:9" pos:end="83:46"><name pos:start="83:9" pos:end="83:14">offset</name>  <operator pos:start="83:17" pos:end="83:17">=</operator> <call pos:start="83:19" pos:end="83:46"><name pos:start="83:19" pos:end="83:37">bytestream_get_be32</name><argument_list pos:start="83:38" pos:end="83:46">(<argument pos:start="83:39" pos:end="83:45"><expr pos:start="83:39" pos:end="83:45"><operator pos:start="83:39" pos:end="83:39">&amp;</operator><name pos:start="83:40" pos:end="83:45"><name pos:start="83:40" pos:end="83:40">s</name><operator pos:start="83:41" pos:end="83:42">-&gt;</operator><name pos:start="83:43" pos:end="83:45">ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="85:9" pos:end="93:9"><if pos:start="85:9" pos:end="93:9">if <condition pos:start="85:12" pos:end="85:23">(<expr pos:start="85:13" pos:end="85:22"><name pos:start="85:13" pos:end="85:18">offset</name> <operator pos:start="85:20" pos:end="85:20">&gt;</operator> <literal type="number" pos:start="85:22" pos:end="85:22">3</literal></expr>)</condition> <block pos:start="85:25" pos:end="93:9">{<block_content pos:start="87:13" pos:end="91:39">

            <expr_stmt pos:start="87:13" pos:end="87:69"><expr pos:start="87:13" pos:end="87:68"><call pos:start="87:13" pos:end="87:68"><name pos:start="87:13" pos:end="87:18">av_log</name><argument_list pos:start="87:19" pos:end="87:68">(<argument pos:start="87:20" pos:end="87:24"><expr pos:start="87:20" pos:end="87:24"><name pos:start="87:20" pos:end="87:24">avctx</name></expr></argument>, <argument pos:start="87:27" pos:end="87:38"><expr pos:start="87:27" pos:end="87:38"><name pos:start="87:27" pos:end="87:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="87:41" pos:end="87:67"><expr pos:start="87:41" pos:end="87:67"><literal type="string" pos:start="87:41" pos:end="87:67">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="89:13" pos:end="89:27"><expr pos:start="89:13" pos:end="89:26"><name pos:start="89:13" pos:end="89:19"><name pos:start="89:13" pos:end="89:13">s</name><operator pos:start="89:14" pos:end="89:15">-&gt;</operator><name pos:start="89:16" pos:end="89:19">data</name></name> <operator pos:start="89:21" pos:end="89:21">=</operator> <name pos:start="89:23" pos:end="89:26">NULL</name></expr>;</expr_stmt>

            <return pos:start="91:13" pos:end="91:39">return <expr pos:start="91:20" pos:end="91:38"><name pos:start="91:20" pos:end="91:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="95:9" pos:end="101:9"><if pos:start="95:9" pos:end="101:9">if <condition pos:start="95:12" pos:end="95:42">(<expr pos:start="95:13" pos:end="95:41"><name pos:start="95:13" pos:end="95:23"><name pos:start="95:13" pos:end="95:13">s</name><operator pos:start="95:14" pos:end="95:15">-&gt;</operator><name pos:start="95:16" pos:end="95:23">data_end</name></name> <operator pos:start="95:25" pos:end="95:25">-</operator> <name pos:start="95:27" pos:end="95:32"><name pos:start="95:27" pos:end="95:27">s</name><operator pos:start="95:28" pos:end="95:29">-&gt;</operator><name pos:start="95:30" pos:end="95:32">ptr</name></name> <operator pos:start="95:34" pos:end="95:34">&lt;</operator> <name pos:start="95:36" pos:end="95:41">offset</name></expr>)</condition> <block pos:start="95:44" pos:end="101:9">{<block_content pos:start="97:13" pos:end="99:39">

            <expr_stmt pos:start="97:13" pos:end="97:65"><expr pos:start="97:13" pos:end="97:64"><call pos:start="97:13" pos:end="97:64"><name pos:start="97:13" pos:end="97:18">av_log</name><argument_list pos:start="97:19" pos:end="97:64">(<argument pos:start="97:20" pos:end="97:24"><expr pos:start="97:20" pos:end="97:24"><name pos:start="97:20" pos:end="97:24">avctx</name></expr></argument>, <argument pos:start="97:27" pos:end="97:38"><expr pos:start="97:27" pos:end="97:38"><name pos:start="97:27" pos:end="97:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="97:41" pos:end="97:63"><expr pos:start="97:41" pos:end="97:63"><literal type="string" pos:start="97:41" pos:end="97:63">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="99:13" pos:end="99:39">return <expr pos:start="99:20" pos:end="99:38"><name pos:start="99:20" pos:end="99:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:25"><expr pos:start="103:9" pos:end="103:24"><name pos:start="103:9" pos:end="103:14"><name pos:start="103:9" pos:end="103:9">s</name><operator pos:start="103:10" pos:end="103:11">-&gt;</operator><name pos:start="103:12" pos:end="103:14">ptr</name></name> <operator pos:start="103:16" pos:end="103:17">+=</operator> <name pos:start="103:19" pos:end="103:24">offset</name></expr>;</expr_stmt>



        <if_stmt pos:start="107:9" pos:end="113:9"><if pos:start="107:9" pos:end="113:9">if <condition pos:start="107:12" pos:end="107:42">(<expr pos:start="107:13" pos:end="107:41"><operator pos:start="107:13" pos:end="107:13">!</operator><name pos:start="107:14" pos:end="107:20">nblocks</name> <operator pos:start="107:22" pos:end="107:23">||</operator> <name pos:start="107:25" pos:end="107:31">nblocks</name> <operator pos:start="107:33" pos:end="107:33">&gt;</operator> <name pos:start="107:35" pos:end="107:41">INT_MAX</name></expr>)</condition> <block pos:start="107:44" pos:end="113:9">{<block_content pos:start="109:13" pos:end="111:39">

            <expr_stmt pos:start="109:13" pos:end="109:80"><expr pos:start="109:13" pos:end="109:79"><call pos:start="109:13" pos:end="109:79"><name pos:start="109:13" pos:end="109:18">av_log</name><argument_list pos:start="109:19" pos:end="109:79">(<argument pos:start="109:20" pos:end="109:24"><expr pos:start="109:20" pos:end="109:24"><name pos:start="109:20" pos:end="109:24">avctx</name></expr></argument>, <argument pos:start="109:27" pos:end="109:38"><expr pos:start="109:27" pos:end="109:38"><name pos:start="109:27" pos:end="109:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="109:41" pos:end="109:69"><expr pos:start="109:41" pos:end="109:69"><literal type="string" pos:start="109:41" pos:end="109:69">"Invalid sample count: %u.\n"</literal></expr></argument>, <argument pos:start="109:72" pos:end="109:78"><expr pos:start="109:72" pos:end="109:78"><name pos:start="109:72" pos:end="109:78">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="111:13" pos:end="111:39">return <expr pos:start="111:20" pos:end="111:38"><name pos:start="111:20" pos:end="111:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:29"><expr pos:start="115:9" pos:end="115:28"><name pos:start="115:9" pos:end="115:18"><name pos:start="115:9" pos:end="115:9">s</name><operator pos:start="115:10" pos:end="115:11">-&gt;</operator><name pos:start="115:12" pos:end="115:18">samples</name></name> <operator pos:start="115:20" pos:end="115:20">=</operator> <name pos:start="115:22" pos:end="115:28">nblocks</name></expr>;</expr_stmt>



        <expr_stmt pos:start="119:9" pos:end="119:53"><expr pos:start="119:9" pos:end="119:52"><call pos:start="119:9" pos:end="119:52"><name pos:start="119:9" pos:end="119:14">memset</name><argument_list pos:start="119:15" pos:end="119:52">(<argument pos:start="119:16" pos:end="119:26"><expr pos:start="119:16" pos:end="119:26"><name pos:start="119:16" pos:end="119:26"><name pos:start="119:16" pos:end="119:16">s</name><operator pos:start="119:17" pos:end="119:18">-&gt;</operator><name pos:start="119:19" pos:end="119:26">decoded0</name></name></expr></argument>,  <argument pos:start="119:30" pos:end="119:30"><expr pos:start="119:30" pos:end="119:30"><literal type="number" pos:start="119:30" pos:end="119:30">0</literal></expr></argument>, <argument pos:start="119:33" pos:end="119:51"><expr pos:start="119:33" pos:end="119:51"><sizeof pos:start="119:33" pos:end="119:51">sizeof<argument_list pos:start="119:39" pos:end="119:51">(<argument pos:start="119:40" pos:end="119:50"><expr pos:start="119:40" pos:end="119:50"><name pos:start="119:40" pos:end="119:50"><name pos:start="119:40" pos:end="119:40">s</name><operator pos:start="119:41" pos:end="119:42">-&gt;</operator><name pos:start="119:43" pos:end="119:50">decoded0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="121:9" pos:end="121:53"><expr pos:start="121:9" pos:end="121:52"><call pos:start="121:9" pos:end="121:52"><name pos:start="121:9" pos:end="121:14">memset</name><argument_list pos:start="121:15" pos:end="121:52">(<argument pos:start="121:16" pos:end="121:26"><expr pos:start="121:16" pos:end="121:26"><name pos:start="121:16" pos:end="121:26"><name pos:start="121:16" pos:end="121:16">s</name><operator pos:start="121:17" pos:end="121:18">-&gt;</operator><name pos:start="121:19" pos:end="121:26">decoded1</name></name></expr></argument>,  <argument pos:start="121:30" pos:end="121:30"><expr pos:start="121:30" pos:end="121:30"><literal type="number" pos:start="121:30" pos:end="121:30">0</literal></expr></argument>, <argument pos:start="121:33" pos:end="121:51"><expr pos:start="121:33" pos:end="121:51"><sizeof pos:start="121:33" pos:end="121:51">sizeof<argument_list pos:start="121:39" pos:end="121:51">(<argument pos:start="121:40" pos:end="121:50"><expr pos:start="121:40" pos:end="121:50"><name pos:start="121:40" pos:end="121:50"><name pos:start="121:40" pos:end="121:40">s</name><operator pos:start="121:41" pos:end="121:42">-&gt;</operator><name pos:start="121:43" pos:end="121:50">decoded1</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="125:9" pos:end="125:42">/* Initialize the frame decoder */</comment>

        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:38">(<expr pos:start="127:13" pos:end="127:37"><call pos:start="127:13" pos:end="127:33"><name pos:start="127:13" pos:end="127:30">init_frame_decoder</name><argument_list pos:start="127:31" pos:end="127:33">(<argument pos:start="127:32" pos:end="127:32"><expr pos:start="127:32" pos:end="127:32"><name pos:start="127:32" pos:end="127:32">s</name></expr></argument>)</argument_list></call> <operator pos:start="127:35" pos:end="127:35">&lt;</operator> <literal type="number" pos:start="127:37" pos:end="127:37">0</literal></expr>)</condition> <block pos:start="127:40" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:39">

            <expr_stmt pos:start="129:13" pos:end="129:72"><expr pos:start="129:13" pos:end="129:71"><call pos:start="129:13" pos:end="129:71"><name pos:start="129:13" pos:end="129:18">av_log</name><argument_list pos:start="129:19" pos:end="129:71">(<argument pos:start="129:20" pos:end="129:24"><expr pos:start="129:20" pos:end="129:24"><name pos:start="129:20" pos:end="129:24">avctx</name></expr></argument>, <argument pos:start="129:27" pos:end="129:38"><expr pos:start="129:27" pos:end="129:38"><name pos:start="129:27" pos:end="129:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:41" pos:end="129:70"><expr pos:start="129:41" pos:end="129:70"><literal type="string" pos:start="129:41" pos:end="129:70">"Error reading frame header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="131:13" pos:end="131:39">return <expr pos:start="131:20" pos:end="131:38"><name pos:start="131:20" pos:end="131:38">AVERROR_INVALIDDATA</name></expr>;</return>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="139:5" pos:end="145:5"><if pos:start="139:5" pos:end="145:5">if <condition pos:start="139:8" pos:end="139:17">(<expr pos:start="139:9" pos:end="139:16"><operator pos:start="139:9" pos:end="139:9">!</operator><name pos:start="139:10" pos:end="139:16"><name pos:start="139:10" pos:end="139:10">s</name><operator pos:start="139:11" pos:end="139:12">-&gt;</operator><name pos:start="139:13" pos:end="139:16">data</name></name></expr>)</condition> <block pos:start="139:19" pos:end="145:5">{<block_content pos:start="141:9" pos:end="143:24">

        <expr_stmt pos:start="141:9" pos:end="141:23"><expr pos:start="141:9" pos:end="141:22"><operator pos:start="141:9" pos:end="141:9">*</operator><name pos:start="141:10" pos:end="141:18">data_size</name> <operator pos:start="141:20" pos:end="141:20">=</operator> <literal type="number" pos:start="141:22" pos:end="141:22">0</literal></expr>;</expr_stmt>

        <return pos:start="143:9" pos:end="143:24">return <expr pos:start="143:16" pos:end="143:23"><name pos:start="143:16" pos:end="143:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:25"><expr pos:start="149:5" pos:end="149:24"><name pos:start="149:5" pos:end="149:11">nblocks</name> <operator pos:start="149:13" pos:end="149:13">=</operator> <name pos:start="149:15" pos:end="149:24"><name pos:start="149:15" pos:end="149:15">s</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:24">samples</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:53"><expr pos:start="151:5" pos:end="151:52"><name pos:start="151:5" pos:end="151:18">blockstodecode</name> <operator pos:start="151:20" pos:end="151:20">=</operator> <call pos:start="151:22" pos:end="151:52"><name pos:start="151:22" pos:end="151:26">FFMIN</name><argument_list pos:start="151:27" pos:end="151:52">(<argument pos:start="151:28" pos:end="151:42"><expr pos:start="151:28" pos:end="151:42"><name pos:start="151:28" pos:end="151:42">BLOCKS_PER_LOOP</name></expr></argument>, <argument pos:start="151:45" pos:end="151:51"><expr pos:start="151:45" pos:end="151:51"><name pos:start="151:45" pos:end="151:51">nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="155:5" pos:end="155:15"><expr pos:start="155:5" pos:end="155:14"><name pos:start="155:5" pos:end="155:12"><name pos:start="155:5" pos:end="155:5">s</name><operator pos:start="155:6" pos:end="155:7">-&gt;</operator><name pos:start="155:8" pos:end="155:12">error</name></name><operator pos:start="155:13" pos:end="155:13">=</operator><literal type="number" pos:start="155:14" pos:end="155:14">0</literal></expr>;</expr_stmt>



    <if_stmt pos:start="159:5" pos:end="165:45"><if pos:start="159:5" pos:end="161:43">if <condition pos:start="159:8" pos:end="159:76">(<expr pos:start="159:9" pos:end="159:75"><operator pos:start="159:9" pos:end="159:9">(</operator><name pos:start="159:10" pos:end="159:20"><name pos:start="159:10" pos:end="159:10">s</name><operator pos:start="159:11" pos:end="159:12">-&gt;</operator><name pos:start="159:13" pos:end="159:20">channels</name></name> <operator pos:start="159:22" pos:end="159:23">==</operator> <literal type="number" pos:start="159:25" pos:end="159:25">1</literal><operator pos:start="159:26" pos:end="159:26">)</operator> <operator pos:start="159:28" pos:end="159:29">||</operator> <operator pos:start="159:31" pos:end="159:31">(</operator><name pos:start="159:32" pos:end="159:44"><name pos:start="159:32" pos:end="159:32">s</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:44">frameflags</name></name> <operator pos:start="159:46" pos:end="159:46">&amp;</operator> <name pos:start="159:48" pos:end="159:74">APE_FRAMECODE_PSEUDO_STEREO</name><operator pos:start="159:75" pos:end="159:75">)</operator></expr>)</condition><block type="pseudo" pos:start="161:9" pos:end="161:43"><block_content pos:start="161:9" pos:end="161:43">

        <expr_stmt pos:start="161:9" pos:end="161:43"><expr pos:start="161:9" pos:end="161:42"><call pos:start="161:9" pos:end="161:42"><name pos:start="161:9" pos:end="161:23">ape_unpack_mono</name><argument_list pos:start="161:24" pos:end="161:42">(<argument pos:start="161:25" pos:end="161:25"><expr pos:start="161:25" pos:end="161:25"><name pos:start="161:25" pos:end="161:25">s</name></expr></argument>, <argument pos:start="161:28" pos:end="161:41"><expr pos:start="161:28" pos:end="161:41"><name pos:start="161:28" pos:end="161:41">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="163:5" pos:end="165:45">else<block type="pseudo" pos:start="165:9" pos:end="165:45"><block_content pos:start="165:9" pos:end="165:45">

        <expr_stmt pos:start="165:9" pos:end="165:45"><expr pos:start="165:9" pos:end="165:44"><call pos:start="165:9" pos:end="165:44"><name pos:start="165:9" pos:end="165:25">ape_unpack_stereo</name><argument_list pos:start="165:26" pos:end="165:44">(<argument pos:start="165:27" pos:end="165:27"><expr pos:start="165:27" pos:end="165:27"><name pos:start="165:27" pos:end="165:27">s</name></expr></argument>, <argument pos:start="165:30" pos:end="165:43"><expr pos:start="165:30" pos:end="165:43"><name pos:start="165:30" pos:end="165:43">blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="167:5" pos:end="167:13"><expr pos:start="167:5" pos:end="167:12"><call pos:start="167:5" pos:end="167:12"><name pos:start="167:5" pos:end="167:10">emms_c</name><argument_list pos:start="167:11" pos:end="167:12">()</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="171:5" pos:end="179:5"><if pos:start="171:5" pos:end="179:5">if <condition pos:start="171:8" pos:end="171:17">(<expr pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:9">s</name><operator pos:start="171:10" pos:end="171:11">-&gt;</operator><name pos:start="171:12" pos:end="171:16">error</name></name></expr>)</condition> <block pos:start="171:19" pos:end="179:5">{<block_content pos:start="173:9" pos:end="177:35">

        <expr_stmt pos:start="173:9" pos:end="173:21"><expr pos:start="173:9" pos:end="173:20"><name pos:start="173:9" pos:end="173:18"><name pos:start="173:9" pos:end="173:9">s</name><operator pos:start="173:10" pos:end="173:11">-&gt;</operator><name pos:start="173:12" pos:end="173:18">samples</name></name><operator pos:start="173:19" pos:end="173:19">=</operator><literal type="number" pos:start="173:20" pos:end="173:20">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:62"><expr pos:start="175:9" pos:end="175:61"><call pos:start="175:9" pos:end="175:61"><name pos:start="175:9" pos:end="175:14">av_log</name><argument_list pos:start="175:15" pos:end="175:61">(<argument pos:start="175:16" pos:end="175:20"><expr pos:start="175:16" pos:end="175:20"><name pos:start="175:16" pos:end="175:20">avctx</name></expr></argument>, <argument pos:start="175:23" pos:end="175:34"><expr pos:start="175:23" pos:end="175:34"><name pos:start="175:23" pos:end="175:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="175:37" pos:end="175:60"><expr pos:start="175:37" pos:end="175:60"><literal type="string" pos:start="175:37" pos:end="175:60">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="177:9" pos:end="177:35">return <expr pos:start="177:16" pos:end="177:34"><name pos:start="177:16" pos:end="177:34">AVERROR_INVALIDDATA</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <for pos:start="183:5" pos:end="191:5">for <control pos:start="183:9" pos:end="183:40">(<init pos:start="183:10" pos:end="183:15"><expr pos:start="183:10" pos:end="183:14"><name pos:start="183:10" pos:end="183:10">i</name> <operator pos:start="183:12" pos:end="183:12">=</operator> <literal type="number" pos:start="183:14" pos:end="183:14">0</literal></expr>;</init> <condition pos:start="183:17" pos:end="183:35"><expr pos:start="183:17" pos:end="183:34"><name pos:start="183:17" pos:end="183:17">i</name> <operator pos:start="183:19" pos:end="183:19">&lt;</operator> <name pos:start="183:21" pos:end="183:34">blockstodecode</name></expr>;</condition> <incr pos:start="183:37" pos:end="183:39"><expr pos:start="183:37" pos:end="183:39"><name pos:start="183:37" pos:end="183:37">i</name><operator pos:start="183:38" pos:end="183:39">++</operator></expr></incr>)</control> <block pos:start="183:42" pos:end="191:5">{<block_content pos:start="185:9" pos:end="189:40">

        <expr_stmt pos:start="185:9" pos:end="185:36"><expr pos:start="185:9" pos:end="185:35"><operator pos:start="185:9" pos:end="185:9">*</operator><name pos:start="185:10" pos:end="185:16">samples</name><operator pos:start="185:17" pos:end="185:18">++</operator> <operator pos:start="185:20" pos:end="185:20">=</operator> <name pos:start="185:22" pos:end="185:35"><name pos:start="185:22" pos:end="185:22">s</name><operator pos:start="185:23" pos:end="185:24">-&gt;</operator><name pos:start="185:25" pos:end="185:32">decoded0</name><index pos:start="185:33" pos:end="185:35">[<expr pos:start="185:34" pos:end="185:34"><name pos:start="185:34" pos:end="185:34">i</name></expr>]</index></name></expr>;</expr_stmt>

        <if_stmt pos:start="187:9" pos:end="189:40"><if pos:start="187:9" pos:end="189:40">if<condition pos:start="187:11" pos:end="187:28">(<expr pos:start="187:12" pos:end="187:27"><name pos:start="187:12" pos:end="187:22"><name pos:start="187:12" pos:end="187:12">s</name><operator pos:start="187:13" pos:end="187:14">-&gt;</operator><name pos:start="187:15" pos:end="187:22">channels</name></name> <operator pos:start="187:24" pos:end="187:25">==</operator> <literal type="number" pos:start="187:27" pos:end="187:27">2</literal></expr>)</condition><block type="pseudo" pos:start="189:13" pos:end="189:40"><block_content pos:start="189:13" pos:end="189:40">

            <expr_stmt pos:start="189:13" pos:end="189:40"><expr pos:start="189:13" pos:end="189:39"><operator pos:start="189:13" pos:end="189:13">*</operator><name pos:start="189:14" pos:end="189:20">samples</name><operator pos:start="189:21" pos:end="189:22">++</operator> <operator pos:start="189:24" pos:end="189:24">=</operator> <name pos:start="189:26" pos:end="189:39"><name pos:start="189:26" pos:end="189:26">s</name><operator pos:start="189:27" pos:end="189:28">-&gt;</operator><name pos:start="189:29" pos:end="189:36">decoded1</name><index pos:start="189:37" pos:end="189:39">[<expr pos:start="189:38" pos:end="189:38"><name pos:start="189:38" pos:end="189:38">i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="195:5" pos:end="195:33"><expr pos:start="195:5" pos:end="195:32"><name pos:start="195:5" pos:end="195:14"><name pos:start="195:5" pos:end="195:5">s</name><operator pos:start="195:6" pos:end="195:7">-&gt;</operator><name pos:start="195:8" pos:end="195:14">samples</name></name> <operator pos:start="195:16" pos:end="195:17">-=</operator> <name pos:start="195:19" pos:end="195:32">blockstodecode</name></expr>;</expr_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:50"><expr pos:start="199:5" pos:end="199:49"><operator pos:start="199:5" pos:end="199:5">*</operator><name pos:start="199:6" pos:end="199:14">data_size</name> <operator pos:start="199:16" pos:end="199:16">=</operator> <name pos:start="199:18" pos:end="199:31">blockstodecode</name> <operator pos:start="199:33" pos:end="199:33">*</operator> <literal type="number" pos:start="199:35" pos:end="199:35">2</literal> <operator pos:start="199:37" pos:end="199:37">*</operator> <name pos:start="199:39" pos:end="199:49"><name pos:start="199:39" pos:end="199:39">s</name><operator pos:start="199:40" pos:end="199:41">-&gt;</operator><name pos:start="199:42" pos:end="199:49">channels</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="201:5" pos:end="201:62"><expr pos:start="201:5" pos:end="201:61"><name pos:start="201:5" pos:end="201:14">bytes_used</name> <operator pos:start="201:16" pos:end="201:16">=</operator> <ternary pos:start="201:18" pos:end="201:61"><condition pos:start="201:18" pos:end="201:29"><expr pos:start="201:18" pos:end="201:27"><name pos:start="201:18" pos:end="201:27"><name pos:start="201:18" pos:end="201:18">s</name><operator pos:start="201:19" pos:end="201:20">-&gt;</operator><name pos:start="201:21" pos:end="201:27">samples</name></name></expr> ?</condition><then pos:start="201:31" pos:end="201:50"> <expr pos:start="201:31" pos:end="201:50"><name pos:start="201:31" pos:end="201:36"><name pos:start="201:31" pos:end="201:31">s</name><operator pos:start="201:32" pos:end="201:33">-&gt;</operator><name pos:start="201:34" pos:end="201:36">ptr</name></name> <operator pos:start="201:38" pos:end="201:38">-</operator> <name pos:start="201:40" pos:end="201:50"><name pos:start="201:40" pos:end="201:40">s</name><operator pos:start="201:41" pos:end="201:42">-&gt;</operator><name pos:start="201:43" pos:end="201:50">last_ptr</name></name></expr> </then><else pos:start="201:52" pos:end="201:61">: <expr pos:start="201:54" pos:end="201:61"><name pos:start="201:54" pos:end="201:61">buf_size</name></expr></else></ternary></expr>;</expr_stmt>

    <expr_stmt pos:start="203:5" pos:end="203:25"><expr pos:start="203:5" pos:end="203:24"><name pos:start="203:5" pos:end="203:15"><name pos:start="203:5" pos:end="203:5">s</name><operator pos:start="203:6" pos:end="203:7">-&gt;</operator><name pos:start="203:8" pos:end="203:15">last_ptr</name></name> <operator pos:start="203:17" pos:end="203:17">=</operator> <name pos:start="203:19" pos:end="203:24"><name pos:start="203:19" pos:end="203:19">s</name><operator pos:start="203:20" pos:end="203:21">-&gt;</operator><name pos:start="203:22" pos:end="203:24">ptr</name></name></expr>;</expr_stmt>

    <return pos:start="205:5" pos:end="205:22">return <expr pos:start="205:12" pos:end="205:21"><name pos:start="205:12" pos:end="205:21">bytes_used</name></expr>;</return>

</block_content>}</block></function>
</unit>
