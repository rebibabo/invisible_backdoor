<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25449.c" pos:tabs="8"><function pos:start="1:1" pos:end="85:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:24">mov_read_stss</name><parameter_list pos:start="1:25" pos:end="1:70">(<parameter pos:start="1:26" pos:end="1:38"><decl pos:start="1:26" pos:end="1:38"><type pos:start="1:26" pos:end="1:38"><name pos:start="1:26" pos:end="1:35">MOVContext</name> <modifier pos:start="1:37" pos:end="1:37">*</modifier></type><name pos:start="1:38" pos:end="1:38">c</name></decl></parameter>, <parameter pos:start="1:41" pos:end="1:55"><decl pos:start="1:41" pos:end="1:55"><type pos:start="1:41" pos:end="1:55"><name pos:start="1:41" pos:end="1:51">AVIOContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:55">pb</name></decl></parameter>, <parameter pos:start="1:58" pos:end="1:69"><decl pos:start="1:58" pos:end="1:69"><type pos:start="1:58" pos:end="1:69"><name pos:start="1:58" pos:end="1:64">MOVAtom</name></type> <name pos:start="1:66" pos:end="1:69">atom</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="85:1">{<block_content pos:start="5:5" pos:end="83:13">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:12">AVStream</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier></type><name pos:start="5:15" pos:end="5:16">st</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:25"><decl pos:start="7:5" pos:end="7:24"><type pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:20">MOVStreamContext</name> <modifier pos:start="7:22" pos:end="7:22">*</modifier></type><name pos:start="7:23" pos:end="7:24">sc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:18"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:12">unsigned</name> <name pos:start="9:14" pos:end="9:16">int</name></type> <name pos:start="9:18" pos:end="9:18">i</name></decl>, <decl pos:start="9:21" pos:end="9:27"><type ref="prev" pos:start="9:5" pos:end="9:16"/><name pos:start="9:21" pos:end="9:27">entries</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="15:17"><if pos:start="13:5" pos:end="15:17">if <condition pos:start="13:8" pos:end="13:30">(<expr pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:25"><name pos:start="13:9" pos:end="13:9">c</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:13">fc</name><operator pos:start="13:14" pos:end="13:15">-&gt;</operator><name pos:start="13:16" pos:end="13:25">nb_streams</name></name> <operator pos:start="13:27" pos:end="13:27">&lt;</operator> <literal type="number" pos:start="13:29" pos:end="13:29">1</literal></expr>)</condition><block type="pseudo" pos:start="15:9" pos:end="15:17"><block_content pos:start="15:9" pos:end="15:17">

        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:45"><expr pos:start="17:5" pos:end="17:44"><name pos:start="17:5" pos:end="17:6">st</name> <operator pos:start="17:8" pos:end="17:8">=</operator> <name pos:start="17:10" pos:end="17:44"><name pos:start="17:10" pos:end="17:10">c</name><operator pos:start="17:11" pos:end="17:12">-&gt;</operator><name pos:start="17:13" pos:end="17:14">fc</name><operator pos:start="17:15" pos:end="17:16">-&gt;</operator><name pos:start="17:17" pos:end="17:23">streams</name><index pos:start="17:24" pos:end="17:44">[<expr pos:start="17:25" pos:end="17:43"><name pos:start="17:25" pos:end="17:41"><name pos:start="17:25" pos:end="17:25">c</name><operator pos:start="17:26" pos:end="17:27">-&gt;</operator><name pos:start="17:28" pos:end="17:29">fc</name><operator pos:start="17:30" pos:end="17:31">-&gt;</operator><name pos:start="17:32" pos:end="17:41">nb_streams</name></name><operator pos:start="17:42" pos:end="17:42">-</operator><literal type="number" pos:start="17:43" pos:end="17:43">1</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:23"><expr pos:start="19:5" pos:end="19:22"><name pos:start="19:5" pos:end="19:6">sc</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <name pos:start="19:10" pos:end="19:22"><name pos:start="19:10" pos:end="19:11">st</name><operator pos:start="19:12" pos:end="19:13">-&gt;</operator><name pos:start="19:14" pos:end="19:22">priv_data</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="23:5" pos:end="23:16"><expr pos:start="23:5" pos:end="23:15"><call pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:11">avio_r8</name><argument_list pos:start="23:12" pos:end="23:15">(<argument pos:start="23:13" pos:end="23:14"><expr pos:start="23:13" pos:end="23:14"><name pos:start="23:13" pos:end="23:14">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="23:18" pos:end="23:30">/* version */</comment>

    <expr_stmt pos:start="25:5" pos:end="25:18"><expr pos:start="25:5" pos:end="25:17"><call pos:start="25:5" pos:end="25:17"><name pos:start="25:5" pos:end="25:13">avio_rb24</name><argument_list pos:start="25:14" pos:end="25:17">(<argument pos:start="25:15" pos:end="25:16"><expr pos:start="25:15" pos:end="25:16"><name pos:start="25:15" pos:end="25:16">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="25:20" pos:end="25:30">/* flags */</comment>



    <expr_stmt pos:start="29:5" pos:end="29:28"><expr pos:start="29:5" pos:end="29:27"><name pos:start="29:5" pos:end="29:11">entries</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:27"><name pos:start="29:15" pos:end="29:23">avio_rb32</name><argument_list pos:start="29:24" pos:end="29:27">(<argument pos:start="29:25" pos:end="29:26"><expr pos:start="29:25" pos:end="29:26"><name pos:start="29:25" pos:end="29:26">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:53"><expr pos:start="33:5" pos:end="33:52"><call pos:start="33:5" pos:end="33:52"><name pos:start="33:5" pos:end="33:11">av_dlog</name><argument_list pos:start="33:12" pos:end="33:52">(<argument pos:start="33:13" pos:end="33:17"><expr pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:17"><name pos:start="33:13" pos:end="33:13">c</name><operator pos:start="33:14" pos:end="33:15">-&gt;</operator><name pos:start="33:16" pos:end="33:17">fc</name></name></expr></argument>, <argument pos:start="33:20" pos:end="33:42"><expr pos:start="33:20" pos:end="33:42"><literal type="string" pos:start="33:20" pos:end="33:42">"keyframe_count = %d\n"</literal></expr></argument>, <argument pos:start="33:45" pos:end="33:51"><expr pos:start="33:45" pos:end="33:51"><name pos:start="33:45" pos:end="33:51">entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="37:5" pos:end="49:5"><if pos:start="37:5" pos:end="49:5">if <condition pos:start="37:8" pos:end="37:17">(<expr pos:start="37:9" pos:end="37:16"><operator pos:start="37:9" pos:end="37:9">!</operator><name pos:start="37:10" pos:end="37:16">entries</name></expr>)</condition>

    <block pos:start="39:5" pos:end="49:5">{<block_content pos:start="41:9" pos:end="47:17">

        <expr_stmt pos:start="41:9" pos:end="41:32"><expr pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:10">sc</name><operator pos:start="41:11" pos:end="41:12">-&gt;</operator><name pos:start="41:13" pos:end="41:27">keyframe_absent</name></name> <operator pos:start="41:29" pos:end="41:29">=</operator> <literal type="number" pos:start="41:31" pos:end="41:31">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="43:9" pos:end="45:54"><if pos:start="43:9" pos:end="45:54">if <condition pos:start="43:12" pos:end="43:30">(<expr pos:start="43:13" pos:end="43:29"><operator pos:start="43:13" pos:end="43:13">!</operator><name pos:start="43:14" pos:end="43:29"><name pos:start="43:14" pos:end="43:15">st</name><operator pos:start="43:16" pos:end="43:17">-&gt;</operator><name pos:start="43:18" pos:end="43:29">need_parsing</name></name></expr>)</condition><block type="pseudo" pos:start="45:13" pos:end="45:54"><block_content pos:start="45:13" pos:end="45:54">

            <expr_stmt pos:start="45:13" pos:end="45:54"><expr pos:start="45:13" pos:end="45:53"><name pos:start="45:13" pos:end="45:28"><name pos:start="45:13" pos:end="45:14">st</name><operator pos:start="45:15" pos:end="45:16">-&gt;</operator><name pos:start="45:17" pos:end="45:28">need_parsing</name></name> <operator pos:start="45:30" pos:end="45:30">=</operator> <name pos:start="45:32" pos:end="45:53">AVSTREAM_PARSE_HEADERS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <return pos:start="47:9" pos:end="47:17">return <expr pos:start="47:16" pos:end="47:16"><literal type="number" pos:start="47:16" pos:end="47:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="51:5" pos:end="53:35"><if pos:start="51:5" pos:end="53:35">if <condition pos:start="51:8" pos:end="51:42">(<expr pos:start="51:9" pos:end="51:41"><name pos:start="51:9" pos:end="51:15">entries</name> <operator pos:start="51:17" pos:end="51:18">&gt;=</operator> <name pos:start="51:20" pos:end="51:27">UINT_MAX</name> <operator pos:start="51:29" pos:end="51:29">/</operator> <sizeof pos:start="51:31" pos:end="51:41">sizeof<argument_list pos:start="51:37" pos:end="51:41">(<argument pos:start="51:38" pos:end="51:40"><expr pos:start="51:38" pos:end="51:40"><name pos:start="51:38" pos:end="51:40">int</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="53:9" pos:end="53:35"><block_content pos:start="53:9" pos:end="53:35">

        <return pos:start="53:9" pos:end="53:35">return <expr pos:start="53:16" pos:end="53:34"><name pos:start="53:16" pos:end="53:34">AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:53"><expr pos:start="55:5" pos:end="55:52"><name pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:6">sc</name><operator pos:start="55:7" pos:end="55:8">-&gt;</operator><name pos:start="55:9" pos:end="55:17">keyframes</name></name> <operator pos:start="55:19" pos:end="55:19">=</operator> <call pos:start="55:21" pos:end="55:52"><name pos:start="55:21" pos:end="55:29">av_malloc</name><argument_list pos:start="55:30" pos:end="55:52">(<argument pos:start="55:31" pos:end="55:51"><expr pos:start="55:31" pos:end="55:51"><name pos:start="55:31" pos:end="55:37">entries</name> <operator pos:start="55:39" pos:end="55:39">*</operator> <sizeof pos:start="55:41" pos:end="55:51">sizeof<argument_list pos:start="55:47" pos:end="55:51">(<argument pos:start="55:48" pos:end="55:50"><expr pos:start="55:48" pos:end="55:50"><name pos:start="55:48" pos:end="55:50">int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="57:5" pos:end="59:31"><if pos:start="57:5" pos:end="59:31">if <condition pos:start="57:8" pos:end="57:23">(<expr pos:start="57:9" pos:end="57:22"><operator pos:start="57:9" pos:end="57:9">!</operator><name pos:start="57:10" pos:end="57:22"><name pos:start="57:10" pos:end="57:11">sc</name><operator pos:start="57:12" pos:end="57:13">-&gt;</operator><name pos:start="57:14" pos:end="57:22">keyframes</name></name></expr>)</condition><block type="pseudo" pos:start="59:9" pos:end="59:31"><block_content pos:start="59:9" pos:end="59:31">

        <return pos:start="59:9" pos:end="59:31">return <expr pos:start="59:16" pos:end="59:30"><call pos:start="59:16" pos:end="59:30"><name pos:start="59:16" pos:end="59:22">AVERROR</name><argument_list pos:start="59:23" pos:end="59:30">(<argument pos:start="59:24" pos:end="59:29"><expr pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:29">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <for pos:start="63:5" pos:end="69:5">for <control pos:start="63:9" pos:end="63:53">(<init pos:start="63:10" pos:end="63:15"><expr pos:start="63:10" pos:end="63:14"><name pos:start="63:10" pos:end="63:10">i</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</init> <condition pos:start="63:17" pos:end="63:48"><expr pos:start="63:17" pos:end="63:47"><name pos:start="63:17" pos:end="63:17">i</name> <operator pos:start="63:19" pos:end="63:19">&lt;</operator> <name pos:start="63:21" pos:end="63:27">entries</name> <operator pos:start="63:29" pos:end="63:30">&amp;&amp;</operator> <operator pos:start="63:32" pos:end="63:32">!</operator><name pos:start="63:33" pos:end="63:47"><name pos:start="63:33" pos:end="63:34">pb</name><operator pos:start="63:35" pos:end="63:36">-&gt;</operator><name pos:start="63:37" pos:end="63:47">eof_reached</name></name></expr>;</condition> <incr pos:start="63:50" pos:end="63:52"><expr pos:start="63:50" pos:end="63:52"><name pos:start="63:50" pos:end="63:50">i</name><operator pos:start="63:51" pos:end="63:52">++</operator></expr></incr>)</control> <block pos:start="63:55" pos:end="69:5">{<block_content pos:start="65:9" pos:end="65:41">

        <expr_stmt pos:start="65:9" pos:end="65:41"><expr pos:start="65:9" pos:end="65:40"><name pos:start="65:9" pos:end="65:24"><name pos:start="65:9" pos:end="65:10">sc</name><operator pos:start="65:11" pos:end="65:12">-&gt;</operator><name pos:start="65:13" pos:end="65:21">keyframes</name><index pos:start="65:22" pos:end="65:24">[<expr pos:start="65:23" pos:end="65:23"><name pos:start="65:23" pos:end="65:23">i</name></expr>]</index></name> <operator pos:start="65:26" pos:end="65:26">=</operator> <call pos:start="65:28" pos:end="65:40"><name pos:start="65:28" pos:end="65:36">avio_rb32</name><argument_list pos:start="65:37" pos:end="65:40">(<argument pos:start="65:38" pos:end="65:39"><expr pos:start="65:38" pos:end="65:39"><name pos:start="65:38" pos:end="65:39">pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line" pos:start="67:9" pos:end="67:63">//av_dlog(c-&gt;fc, "keyframes[]=%d\n", sc-&gt;keyframes[i]);</comment>

    </block_content>}</block></for>



    <expr_stmt pos:start="73:5" pos:end="73:27"><expr pos:start="73:5" pos:end="73:26"><name pos:start="73:5" pos:end="73:22"><name pos:start="73:5" pos:end="73:6">sc</name><operator pos:start="73:7" pos:end="73:8">-&gt;</operator><name pos:start="73:9" pos:end="73:22">keyframe_count</name></name> <operator pos:start="73:24" pos:end="73:24">=</operator> <name pos:start="73:26" pos:end="73:26">i</name></expr>;</expr_stmt>



    <if_stmt pos:start="77:5" pos:end="79:27"><if pos:start="77:5" pos:end="79:27">if <condition pos:start="77:8" pos:end="77:24">(<expr pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:23"><name pos:start="77:9" pos:end="77:10">pb</name><operator pos:start="77:11" pos:end="77:12">-&gt;</operator><name pos:start="77:13" pos:end="77:23">eof_reached</name></name></expr>)</condition><block type="pseudo" pos:start="79:9" pos:end="79:27"><block_content pos:start="79:9" pos:end="79:27">

        <return pos:start="79:9" pos:end="79:27">return <expr pos:start="79:16" pos:end="79:26"><name pos:start="79:16" pos:end="79:26">AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="83:5" pos:end="83:13">return <expr pos:start="83:12" pos:end="83:12"><literal type="number" pos:start="83:12" pos:end="83:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
