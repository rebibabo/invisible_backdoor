<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/2794.c" pos:tabs="8"><function pos:start="1:1" pos:end="327:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:21">flac_parse</name><parameter_list pos:start="1:22" pos:end="5:55">(<parameter pos:start="1:23" pos:end="1:45"><decl pos:start="1:23" pos:end="1:45"><type pos:start="1:23" pos:end="1:45"><name pos:start="1:23" pos:end="1:42">AVCodecParserContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:45">s</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:68"><decl pos:start="1:48" pos:end="1:68"><type pos:start="1:48" pos:end="1:68"><name pos:start="1:48" pos:end="1:61">AVCodecContext</name> <modifier pos:start="1:63" pos:end="1:63">*</modifier></type><name pos:start="1:64" pos:end="1:68">avctx</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:45"><decl pos:start="3:23" pos:end="3:45"><type pos:start="3:23" pos:end="3:45"><specifier pos:start="3:23" pos:end="3:27">const</specifier> <name pos:start="3:29" pos:end="3:35">uint8_t</name> <modifier pos:start="3:37" pos:end="3:37">*</modifier><modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:45">poutbuf</name></decl></parameter>, <parameter pos:start="3:48" pos:end="3:64"><decl pos:start="3:48" pos:end="3:64"><type pos:start="3:48" pos:end="3:64"><name pos:start="3:48" pos:end="3:50">int</name> <modifier pos:start="3:52" pos:end="3:52">*</modifier></type><name pos:start="3:53" pos:end="3:64">poutbuf_size</name></decl></parameter>,

                      <parameter pos:start="5:23" pos:end="5:40"><decl pos:start="5:23" pos:end="5:40"><type pos:start="5:23" pos:end="5:40"><specifier pos:start="5:23" pos:end="5:27">const</specifier> <name pos:start="5:29" pos:end="5:35">uint8_t</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier></type><name pos:start="5:38" pos:end="5:40">buf</name></decl></parameter>, <parameter pos:start="5:43" pos:end="5:54"><decl pos:start="5:43" pos:end="5:54"><type pos:start="5:43" pos:end="5:54"><name pos:start="5:43" pos:end="5:45">int</name></type> <name pos:start="5:47" pos:end="5:54">buf_size</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="327:1">{<block_content pos:start="9:5" pos:end="325:21">

    <decl_stmt pos:start="9:5" pos:end="9:41"><decl pos:start="9:5" pos:end="9:40"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:20">FLACParseContext</name> <modifier pos:start="9:22" pos:end="9:22">*</modifier></type><name pos:start="9:23" pos:end="9:25">fpc</name> <init pos:start="9:27" pos:end="9:40">= <expr pos:start="9:29" pos:end="9:40"><name pos:start="9:29" pos:end="9:40"><name pos:start="9:29" pos:end="9:29">s</name><operator pos:start="9:30" pos:end="9:31">-&gt;</operator><name pos:start="9:32" pos:end="9:40">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:27"><decl pos:start="11:5" pos:end="11:26"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">FLACHeaderMarker</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:26">curr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:19"><decl pos:start="13:5" pos:end="13:18"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:18">nb_headers</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:22"><decl pos:start="15:5" pos:end="15:21"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">read_size</name> <init pos:start="15:19" pos:end="15:21">= <expr pos:start="15:21" pos:end="15:21"><literal type="number" pos:start="15:21" pos:end="15:21">0</literal></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="33:5"><if pos:start="19:5" pos:end="33:5">if <condition pos:start="19:8" pos:end="19:47">(<expr pos:start="19:9" pos:end="19:46"><name pos:start="19:9" pos:end="19:16"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:16">flags</name></name> <operator pos:start="19:18" pos:end="19:18">&amp;</operator> <name pos:start="19:20" pos:end="19:46">PARSER_FLAG_COMPLETE_FRAMES</name></expr>)</condition> <block pos:start="19:49" pos:end="33:5">{<block_content pos:start="21:9" pos:end="31:24">

        <decl_stmt pos:start="21:9" pos:end="21:25"><decl pos:start="21:9" pos:end="21:24"><type pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:21">FLACFrameInfo</name></type> <name pos:start="21:23" pos:end="21:24">fi</name></decl>;</decl_stmt>

        <if_stmt pos:start="23:9" pos:end="25:45"><if pos:start="23:9" pos:end="25:45">if <condition pos:start="23:12" pos:end="23:51">(<expr pos:start="23:13" pos:end="23:50"><call pos:start="23:13" pos:end="23:50"><name pos:start="23:13" pos:end="23:33">frame_header_is_valid</name><argument_list pos:start="23:34" pos:end="23:50">(<argument pos:start="23:35" pos:end="23:39"><expr pos:start="23:35" pos:end="23:39"><name pos:start="23:35" pos:end="23:39">avctx</name></expr></argument>, <argument pos:start="23:42" pos:end="23:44"><expr pos:start="23:42" pos:end="23:44"><name pos:start="23:42" pos:end="23:44">buf</name></expr></argument>, <argument pos:start="23:47" pos:end="23:49"><expr pos:start="23:47" pos:end="23:49"><operator pos:start="23:47" pos:end="23:47">&amp;</operator><name pos:start="23:48" pos:end="23:49">fi</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="25:13" pos:end="25:45"><block_content pos:start="25:13" pos:end="25:45">

            <expr_stmt pos:start="25:13" pos:end="25:45"><expr pos:start="25:13" pos:end="25:44"><name pos:start="25:13" pos:end="25:29"><name pos:start="25:13" pos:end="25:17">avctx</name><operator pos:start="25:18" pos:end="25:19">-&gt;</operator><name pos:start="25:20" pos:end="25:29">frame_size</name></name> <operator pos:start="25:31" pos:end="25:31">=</operator> <name pos:start="25:33" pos:end="25:44"><name pos:start="25:33" pos:end="25:34">fi</name><operator pos:start="25:35" pos:end="25:35">.</operator><name pos:start="25:36" pos:end="25:44">blocksize</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:28"><expr pos:start="27:9" pos:end="27:27"><operator pos:start="27:9" pos:end="27:9">*</operator><name pos:start="27:10" pos:end="27:16">poutbuf</name>      <operator pos:start="27:23" pos:end="27:23">=</operator> <name pos:start="27:25" pos:end="27:27">buf</name></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:33"><expr pos:start="29:9" pos:end="29:32"><operator pos:start="29:9" pos:end="29:9">*</operator><name pos:start="29:10" pos:end="29:21">poutbuf_size</name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:32">buf_size</name></expr>;</expr_stmt>

        <return pos:start="31:9" pos:end="31:24">return <expr pos:start="31:16" pos:end="31:23"><name pos:start="31:16" pos:end="31:23">buf_size</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:23"><expr pos:start="37:5" pos:end="37:22"><name pos:start="37:5" pos:end="37:14"><name pos:start="37:5" pos:end="37:7">fpc</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:14">avctx</name></name> <operator pos:start="37:16" pos:end="37:16">=</operator> <name pos:start="37:18" pos:end="37:22">avctx</name></expr>;</expr_stmt>

    <if_stmt pos:start="39:5" pos:end="41:59"><if pos:start="39:5" pos:end="41:59">if <condition pos:start="39:8" pos:end="39:31">(<expr pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:30"><name pos:start="39:9" pos:end="39:11">fpc</name><operator pos:start="39:12" pos:end="39:13">-&gt;</operator><name pos:start="39:14" pos:end="39:30">best_header_valid</name></name></expr>)</condition><block type="pseudo" pos:start="41:9" pos:end="41:59"><block_content pos:start="41:9" pos:end="41:59">

        <return pos:start="41:9" pos:end="41:59">return <expr pos:start="41:16" pos:end="41:58"><call pos:start="41:16" pos:end="41:58"><name pos:start="41:16" pos:end="41:30">get_best_header</name><argument_list pos:start="41:31" pos:end="41:58">(<argument pos:start="41:32" pos:end="41:34"><expr pos:start="41:32" pos:end="41:34"><name pos:start="41:32" pos:end="41:34">fpc</name></expr></argument>, <argument pos:start="41:37" pos:end="41:43"><expr pos:start="41:37" pos:end="41:43"><name pos:start="41:37" pos:end="41:43">poutbuf</name></expr></argument>, <argument pos:start="41:46" pos:end="41:57"><expr pos:start="41:46" pos:end="41:57"><name pos:start="41:46" pos:end="41:57">poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>



    <comment type="block" pos:start="45:5" pos:end="45:78">/* If a best_header was found last call remove it with the buffer data. */</comment>

    <if_stmt pos:start="47:5" pos:end="133:5"><if pos:start="47:5" pos:end="109:5">if <condition pos:start="47:8" pos:end="47:57">(<expr pos:start="47:9" pos:end="47:56"><name pos:start="47:9" pos:end="47:24"><name pos:start="47:9" pos:end="47:11">fpc</name><operator pos:start="47:12" pos:end="47:13">-&gt;</operator><name pos:start="47:14" pos:end="47:24">best_header</name></name> <operator pos:start="47:26" pos:end="47:27">&amp;&amp;</operator> <name pos:start="47:29" pos:end="47:56"><name pos:start="47:29" pos:end="47:31">fpc</name><operator pos:start="47:32" pos:end="47:33">-&gt;</operator><name pos:start="47:34" pos:end="47:44">best_header</name><operator pos:start="47:45" pos:end="47:46">-&gt;</operator><name pos:start="47:47" pos:end="47:56">best_child</name></name></expr>)</condition> <block pos:start="47:59" pos:end="109:5">{<block_content pos:start="49:9" pos:end="107:34">

        <decl_stmt pos:start="49:9" pos:end="49:31"><decl pos:start="49:9" pos:end="49:30"><type pos:start="49:9" pos:end="49:26"><name pos:start="49:9" pos:end="49:24">FLACHeaderMarker</name> <modifier pos:start="49:26" pos:end="49:26">*</modifier></type><name pos:start="49:27" pos:end="49:30">temp</name></decl>;</decl_stmt>

        <decl_stmt pos:start="51:9" pos:end="51:68"><decl pos:start="51:9" pos:end="51:67"><type pos:start="51:9" pos:end="51:26"><name pos:start="51:9" pos:end="51:24">FLACHeaderMarker</name> <modifier pos:start="51:26" pos:end="51:26">*</modifier></type><name pos:start="51:27" pos:end="51:36">best_child</name> <init pos:start="51:38" pos:end="51:67">= <expr pos:start="51:40" pos:end="51:67"><name pos:start="51:40" pos:end="51:67"><name pos:start="51:40" pos:end="51:42">fpc</name><operator pos:start="51:43" pos:end="51:44">-&gt;</operator><name pos:start="51:45" pos:end="51:55">best_header</name><operator pos:start="51:56" pos:end="51:57">-&gt;</operator><name pos:start="51:58" pos:end="51:67">best_child</name></name></expr></init></decl>;</decl_stmt>



        <comment type="block" pos:start="55:9" pos:end="55:70">/* Remove headers in list until the end of the best_header. */</comment>

        <for pos:start="57:9" pos:end="77:9">for <control pos:start="57:13" pos:end="57:66">(<init pos:start="57:14" pos:end="57:33"><expr pos:start="57:14" pos:end="57:32"><name pos:start="57:14" pos:end="57:17">curr</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <name pos:start="57:21" pos:end="57:32"><name pos:start="57:21" pos:end="57:23">fpc</name><operator pos:start="57:24" pos:end="57:25">-&gt;</operator><name pos:start="57:26" pos:end="57:32">headers</name></name></expr>;</init> <condition pos:start="57:35" pos:end="57:53"><expr pos:start="57:35" pos:end="57:52"><name pos:start="57:35" pos:end="57:38">curr</name> <operator pos:start="57:40" pos:end="57:41">!=</operator> <name pos:start="57:43" pos:end="57:52">best_child</name></expr>;</condition> <incr pos:start="57:55" pos:end="57:65"><expr pos:start="57:55" pos:end="57:65"><name pos:start="57:55" pos:end="57:58">curr</name> <operator pos:start="57:60" pos:end="57:60">=</operator> <name pos:start="57:62" pos:end="57:65">temp</name></expr></incr>)</control> <block pos:start="57:68" pos:end="77:9">{<block_content pos:start="59:13" pos:end="75:39">

            <if_stmt pos:start="59:13" pos:end="67:13"><if pos:start="59:13" pos:end="67:13">if <condition pos:start="59:16" pos:end="59:41">(<expr pos:start="59:17" pos:end="59:40"><name pos:start="59:17" pos:end="59:20">curr</name> <operator pos:start="59:22" pos:end="59:23">!=</operator> <name pos:start="59:25" pos:end="59:40"><name pos:start="59:25" pos:end="59:27">fpc</name><operator pos:start="59:28" pos:end="59:29">-&gt;</operator><name pos:start="59:30" pos:end="59:40">best_header</name></name></expr>)</condition> <block pos:start="59:43" pos:end="67:13">{<block_content pos:start="61:17" pos:end="65:74">

                <expr_stmt pos:start="61:17" pos:end="65:74"><expr pos:start="61:17" pos:end="65:73"><call pos:start="61:17" pos:end="65:73"><name pos:start="61:17" pos:end="61:22">av_log</name><argument_list pos:start="61:23" pos:end="65:73">(<argument pos:start="61:24" pos:end="61:28"><expr pos:start="61:24" pos:end="61:28"><name pos:start="61:24" pos:end="61:28">avctx</name></expr></argument>, <argument pos:start="61:31" pos:end="61:42"><expr pos:start="61:31" pos:end="61:42"><name pos:start="61:31" pos:end="61:42">AV_LOG_DEBUG</name></expr></argument>,

                       <argument pos:start="63:24" pos:end="63:82"><expr pos:start="63:24" pos:end="63:82"><literal type="string" pos:start="63:24" pos:end="63:82">"dropping low score %i frame header from offset %i to %i\n"</literal></expr></argument>,

                       <argument pos:start="65:24" pos:end="65:38"><expr pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:38"><name pos:start="65:24" pos:end="65:27">curr</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:38">max_score</name></name></expr></argument>, <argument pos:start="65:41" pos:end="65:52"><expr pos:start="65:41" pos:end="65:52"><name pos:start="65:41" pos:end="65:52"><name pos:start="65:41" pos:end="65:44">curr</name><operator pos:start="65:45" pos:end="65:46">-&gt;</operator><name pos:start="65:47" pos:end="65:52">offset</name></name></expr></argument>, <argument pos:start="65:55" pos:end="65:72"><expr pos:start="65:55" pos:end="65:72"><name pos:start="65:55" pos:end="65:72"><name pos:start="65:55" pos:end="65:58">curr</name><operator pos:start="65:59" pos:end="65:60">-&gt;</operator><name pos:start="65:61" pos:end="65:64">next</name><operator pos:start="65:65" pos:end="65:66">-&gt;</operator><name pos:start="65:67" pos:end="65:72">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:30"><expr pos:start="69:13" pos:end="69:29"><name pos:start="69:13" pos:end="69:16">temp</name> <operator pos:start="69:18" pos:end="69:18">=</operator> <name pos:start="69:20" pos:end="69:29"><name pos:start="69:20" pos:end="69:23">curr</name><operator pos:start="69:24" pos:end="69:25">-&gt;</operator><name pos:start="69:26" pos:end="69:29">next</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="71:13" pos:end="71:42"><expr pos:start="71:13" pos:end="71:41"><call pos:start="71:13" pos:end="71:41"><name pos:start="71:13" pos:end="71:20">av_freep</name><argument_list pos:start="71:21" pos:end="71:41">(<argument pos:start="71:22" pos:end="71:40"><expr pos:start="71:22" pos:end="71:40"><operator pos:start="71:22" pos:end="71:22">&amp;</operator><name pos:start="71:23" pos:end="71:40"><name pos:start="71:23" pos:end="71:26">curr</name><operator pos:start="71:27" pos:end="71:28">-&gt;</operator><name pos:start="71:29" pos:end="71:40">link_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="73:13" pos:end="73:26"><expr pos:start="73:13" pos:end="73:25"><call pos:start="73:13" pos:end="73:25"><name pos:start="73:13" pos:end="73:19">av_free</name><argument_list pos:start="73:20" pos:end="73:25">(<argument pos:start="73:21" pos:end="73:24"><expr pos:start="73:21" pos:end="73:24"><name pos:start="73:21" pos:end="73:24">curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:39"><expr pos:start="75:13" pos:end="75:38"><name pos:start="75:13" pos:end="75:36"><name pos:start="75:13" pos:end="75:15">fpc</name><operator pos:start="75:16" pos:end="75:17">-&gt;</operator><name pos:start="75:18" pos:end="75:36">nb_headers_buffered</name></name><operator pos:start="75:37" pos:end="75:38">--</operator></expr>;</expr_stmt>

        </block_content>}</block></for>

        <comment type="block" pos:start="79:9" pos:end="79:53">/* Release returned data from ring buffer. */</comment>

        <expr_stmt pos:start="81:9" pos:end="81:57"><expr pos:start="81:9" pos:end="81:56"><call pos:start="81:9" pos:end="81:56"><name pos:start="81:9" pos:end="81:21">av_fifo_drain</name><argument_list pos:start="81:22" pos:end="81:56">(<argument pos:start="81:23" pos:end="81:35"><expr pos:start="81:23" pos:end="81:35"><name pos:start="81:23" pos:end="81:35"><name pos:start="81:23" pos:end="81:25">fpc</name><operator pos:start="81:26" pos:end="81:27">-&gt;</operator><name pos:start="81:28" pos:end="81:35">fifo_buf</name></name></expr></argument>, <argument pos:start="81:38" pos:end="81:55"><expr pos:start="81:38" pos:end="81:55"><name pos:start="81:38" pos:end="81:55"><name pos:start="81:38" pos:end="81:47">best_child</name><operator pos:start="81:48" pos:end="81:49">-&gt;</operator><name pos:start="81:50" pos:end="81:55">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="85:9" pos:end="85:79">/* Fix the offset for the headers remaining to match the new buffer. */</comment>

        <for pos:start="87:9" pos:end="89:47">for <control pos:start="87:13" pos:end="87:62">(<init pos:start="87:14" pos:end="87:37"><expr pos:start="87:14" pos:end="87:36"><name pos:start="87:14" pos:end="87:17">curr</name> <operator pos:start="87:19" pos:end="87:19">=</operator> <name pos:start="87:21" pos:end="87:36"><name pos:start="87:21" pos:end="87:30">best_child</name><operator pos:start="87:31" pos:end="87:32">-&gt;</operator><name pos:start="87:33" pos:end="87:36">next</name></name></expr>;</init> <condition pos:start="87:39" pos:end="87:43"><expr pos:start="87:39" pos:end="87:42"><name pos:start="87:39" pos:end="87:42">curr</name></expr>;</condition> <incr pos:start="87:45" pos:end="87:61"><expr pos:start="87:45" pos:end="87:61"><name pos:start="87:45" pos:end="87:48">curr</name> <operator pos:start="87:50" pos:end="87:50">=</operator> <name pos:start="87:52" pos:end="87:61"><name pos:start="87:52" pos:end="87:55">curr</name><operator pos:start="87:56" pos:end="87:57">-&gt;</operator><name pos:start="87:58" pos:end="87:61">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="89:13" pos:end="89:47"><block_content pos:start="89:13" pos:end="89:47">

            <expr_stmt pos:start="89:13" pos:end="89:47"><expr pos:start="89:13" pos:end="89:46"><name pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:16">curr</name><operator pos:start="89:17" pos:end="89:18">-&gt;</operator><name pos:start="89:19" pos:end="89:24">offset</name></name> <operator pos:start="89:26" pos:end="89:27">-=</operator> <name pos:start="89:29" pos:end="89:46"><name pos:start="89:29" pos:end="89:38">best_child</name><operator pos:start="89:39" pos:end="89:40">-&gt;</operator><name pos:start="89:41" pos:end="89:46">offset</name></name></expr>;</expr_stmt></block_content></block></for>



        <expr_stmt pos:start="93:9" pos:end="93:35"><expr pos:start="93:9" pos:end="93:34"><name pos:start="93:9" pos:end="93:32"><name pos:start="93:9" pos:end="93:11">fpc</name><operator pos:start="93:12" pos:end="93:13">-&gt;</operator><name pos:start="93:14" pos:end="93:32">nb_headers_buffered</name></name><operator pos:start="93:33" pos:end="93:34">--</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:31"><expr pos:start="95:9" pos:end="95:30"><name pos:start="95:9" pos:end="95:26"><name pos:start="95:9" pos:end="95:18">best_child</name><operator pos:start="95:19" pos:end="95:20">-&gt;</operator><name pos:start="95:21" pos:end="95:26">offset</name></name> <operator pos:start="95:28" pos:end="95:28">=</operator> <literal type="number" pos:start="95:30" pos:end="95:30">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:40"><expr pos:start="97:9" pos:end="97:39"><name pos:start="97:9" pos:end="97:20"><name pos:start="97:9" pos:end="97:11">fpc</name><operator pos:start="97:12" pos:end="97:13">-&gt;</operator><name pos:start="97:14" pos:end="97:20">headers</name></name>       <operator pos:start="97:28" pos:end="97:28">=</operator> <name pos:start="97:30" pos:end="97:39">best_child</name></expr>;</expr_stmt>

        <if_stmt pos:start="99:9" pos:end="105:9"><if pos:start="99:9" pos:end="105:9">if <condition pos:start="99:12" pos:end="99:57">(<expr pos:start="99:13" pos:end="99:56"><name pos:start="99:13" pos:end="99:36"><name pos:start="99:13" pos:end="99:15">fpc</name><operator pos:start="99:16" pos:end="99:17">-&gt;</operator><name pos:start="99:18" pos:end="99:36">nb_headers_buffered</name></name> <operator pos:start="99:38" pos:end="99:39">&gt;=</operator> <name pos:start="99:41" pos:end="99:56">FLAC_MIN_HEADERS</name></expr>)</condition> <block pos:start="99:59" pos:end="105:9">{<block_content pos:start="101:13" pos:end="103:63">

            <expr_stmt pos:start="101:13" pos:end="101:42"><expr pos:start="101:13" pos:end="101:41"><name pos:start="101:13" pos:end="101:28"><name pos:start="101:13" pos:end="101:15">fpc</name><operator pos:start="101:16" pos:end="101:17">-&gt;</operator><name pos:start="101:18" pos:end="101:28">best_header</name></name> <operator pos:start="101:30" pos:end="101:30">=</operator> <name pos:start="101:32" pos:end="101:41">best_child</name></expr>;</expr_stmt>

            <return pos:start="103:13" pos:end="103:63">return <expr pos:start="103:20" pos:end="103:62"><call pos:start="103:20" pos:end="103:62"><name pos:start="103:20" pos:end="103:34">get_best_header</name><argument_list pos:start="103:35" pos:end="103:62">(<argument pos:start="103:36" pos:end="103:38"><expr pos:start="103:36" pos:end="103:38"><name pos:start="103:36" pos:end="103:38">fpc</name></expr></argument>, <argument pos:start="103:41" pos:end="103:47"><expr pos:start="103:41" pos:end="103:47"><name pos:start="103:41" pos:end="103:47">poutbuf</name></expr></argument>, <argument pos:start="103:50" pos:end="103:61"><expr pos:start="103:50" pos:end="103:61"><name pos:start="103:50" pos:end="103:61">poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:24"><name pos:start="107:9" pos:end="107:11">fpc</name><operator pos:start="107:12" pos:end="107:13">-&gt;</operator><name pos:start="107:14" pos:end="107:24">best_header</name></name>   <operator pos:start="107:28" pos:end="107:28">=</operator> <name pos:start="107:30" pos:end="107:33">NULL</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="133:5">else if <condition pos:start="109:15" pos:end="109:32">(<expr pos:start="109:16" pos:end="109:31"><name pos:start="109:16" pos:end="109:31"><name pos:start="109:16" pos:end="109:18">fpc</name><operator pos:start="109:19" pos:end="109:20">-&gt;</operator><name pos:start="109:21" pos:end="109:31">best_header</name></name></expr>)</condition> <block pos:start="109:34" pos:end="133:5">{<block_content pos:start="113:9" pos:end="131:36">

        <comment type="block" pos:start="111:9" pos:end="111:69">/* No end frame no need to delete the buffer; probably eof */</comment>

        <decl_stmt pos:start="113:9" pos:end="113:31"><decl pos:start="113:9" pos:end="113:30"><type pos:start="113:9" pos:end="113:26"><name pos:start="113:9" pos:end="113:24">FLACHeaderMarker</name> <modifier pos:start="113:26" pos:end="113:26">*</modifier></type><name pos:start="113:27" pos:end="113:30">temp</name></decl>;</decl_stmt>



        <for pos:start="117:9" pos:end="125:9">for <control pos:start="117:13" pos:end="117:72">(<init pos:start="117:14" pos:end="117:33"><expr pos:start="117:14" pos:end="117:32"><name pos:start="117:14" pos:end="117:17">curr</name> <operator pos:start="117:19" pos:end="117:19">=</operator> <name pos:start="117:21" pos:end="117:32"><name pos:start="117:21" pos:end="117:23">fpc</name><operator pos:start="117:24" pos:end="117:25">-&gt;</operator><name pos:start="117:26" pos:end="117:32">headers</name></name></expr>;</init> <condition pos:start="117:35" pos:end="117:59"><expr pos:start="117:35" pos:end="117:58"><name pos:start="117:35" pos:end="117:38">curr</name> <operator pos:start="117:40" pos:end="117:41">!=</operator> <name pos:start="117:43" pos:end="117:58"><name pos:start="117:43" pos:end="117:45">fpc</name><operator pos:start="117:46" pos:end="117:47">-&gt;</operator><name pos:start="117:48" pos:end="117:58">best_header</name></name></expr>;</condition> <incr pos:start="117:61" pos:end="117:71"><expr pos:start="117:61" pos:end="117:71"><name pos:start="117:61" pos:end="117:64">curr</name> <operator pos:start="117:66" pos:end="117:66">=</operator> <name pos:start="117:68" pos:end="117:71">temp</name></expr></incr>)</control> <block pos:start="117:74" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:26">

            <expr_stmt pos:start="119:13" pos:end="119:30"><expr pos:start="119:13" pos:end="119:29"><name pos:start="119:13" pos:end="119:16">temp</name> <operator pos:start="119:18" pos:end="119:18">=</operator> <name pos:start="119:20" pos:end="119:29"><name pos:start="119:20" pos:end="119:23">curr</name><operator pos:start="119:24" pos:end="119:25">-&gt;</operator><name pos:start="119:26" pos:end="119:29">next</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:42"><expr pos:start="121:13" pos:end="121:41"><call pos:start="121:13" pos:end="121:41"><name pos:start="121:13" pos:end="121:20">av_freep</name><argument_list pos:start="121:21" pos:end="121:41">(<argument pos:start="121:22" pos:end="121:40"><expr pos:start="121:22" pos:end="121:40"><operator pos:start="121:22" pos:end="121:22">&amp;</operator><name pos:start="121:23" pos:end="121:40"><name pos:start="121:23" pos:end="121:26">curr</name><operator pos:start="121:27" pos:end="121:28">-&gt;</operator><name pos:start="121:29" pos:end="121:40">link_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:26"><expr pos:start="123:13" pos:end="123:25"><call pos:start="123:13" pos:end="123:25"><name pos:start="123:13" pos:end="123:19">av_free</name><argument_list pos:start="123:20" pos:end="123:25">(<argument pos:start="123:21" pos:end="123:24"><expr pos:start="123:21" pos:end="123:24"><name pos:start="123:21" pos:end="123:24">curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="127:9" pos:end="127:46"><expr pos:start="127:9" pos:end="127:45"><name pos:start="127:9" pos:end="127:20"><name pos:start="127:9" pos:end="127:11">fpc</name><operator pos:start="127:12" pos:end="127:13">-&gt;</operator><name pos:start="127:14" pos:end="127:20">headers</name></name> <operator pos:start="127:22" pos:end="127:22">=</operator> <name pos:start="127:24" pos:end="127:45"><name pos:start="127:24" pos:end="127:26">fpc</name><operator pos:start="127:27" pos:end="127:28">-&gt;</operator><name pos:start="127:29" pos:end="127:39">best_header</name><operator pos:start="127:40" pos:end="127:41">-&gt;</operator><name pos:start="127:42" pos:end="127:45">next</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:50"><expr pos:start="129:9" pos:end="129:49"><call pos:start="129:9" pos:end="129:49"><name pos:start="129:9" pos:end="129:16">av_freep</name><argument_list pos:start="129:17" pos:end="129:49">(<argument pos:start="129:18" pos:end="129:48"><expr pos:start="129:18" pos:end="129:48"><operator pos:start="129:18" pos:end="129:18">&amp;</operator><name pos:start="129:19" pos:end="129:48"><name pos:start="129:19" pos:end="129:21">fpc</name><operator pos:start="129:22" pos:end="129:23">-&gt;</operator><name pos:start="129:24" pos:end="129:34">best_header</name><operator pos:start="129:35" pos:end="129:36">-&gt;</operator><name pos:start="129:37" pos:end="129:48">link_penalty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="131:9" pos:end="131:36"><expr pos:start="131:9" pos:end="131:35"><call pos:start="131:9" pos:end="131:35"><name pos:start="131:9" pos:end="131:16">av_freep</name><argument_list pos:start="131:17" pos:end="131:35">(<argument pos:start="131:18" pos:end="131:34"><expr pos:start="131:18" pos:end="131:34"><operator pos:start="131:18" pos:end="131:18">&amp;</operator><name pos:start="131:19" pos:end="131:34"><name pos:start="131:19" pos:end="131:21">fpc</name><operator pos:start="131:22" pos:end="131:23">-&gt;</operator><name pos:start="131:24" pos:end="131:34">best_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="137:5" pos:end="137:37">/* Find and score new headers. */</comment>

    <if_stmt pos:start="139:5" pos:end="265:5"><if pos:start="139:5" pos:end="265:5">if <condition pos:start="139:8" pos:end="139:37">(<expr pos:start="139:9" pos:end="139:36"><name pos:start="139:9" pos:end="139:16">buf_size</name> <operator pos:start="139:18" pos:end="139:19">||</operator> <operator pos:start="139:21" pos:end="139:21">!</operator><name pos:start="139:22" pos:end="139:36"><name pos:start="139:22" pos:end="139:24">fpc</name><operator pos:start="139:25" pos:end="139:26">-&gt;</operator><name pos:start="139:27" pos:end="139:36">end_padded</name></name></expr>)</condition> <block pos:start="139:39" pos:end="265:5">{<block_content pos:start="141:9" pos:end="263:9">

        <decl_stmt pos:start="141:9" pos:end="141:25"><decl pos:start="141:9" pos:end="141:24"><type pos:start="141:9" pos:end="141:11"><name pos:start="141:9" pos:end="141:11">int</name></type> <name pos:start="141:13" pos:end="141:24">start_offset</name></decl>;</decl_stmt>



        <comment type="block" pos:start="145:9" pos:end="145:77">/* Pad the end once if EOF, to check the final region for headers. */</comment>

        <if_stmt pos:start="147:9" pos:end="163:9"><if pos:start="147:9" pos:end="153:9">if <condition pos:start="147:12" pos:end="147:22">(<expr pos:start="147:13" pos:end="147:21"><operator pos:start="147:13" pos:end="147:13">!</operator><name pos:start="147:14" pos:end="147:21">buf_size</name></expr>)</condition> <block pos:start="147:24" pos:end="153:9">{<block_content pos:start="149:13" pos:end="151:57">

            <expr_stmt pos:start="149:13" pos:end="149:37"><expr pos:start="149:13" pos:end="149:36"><name pos:start="149:13" pos:end="149:27"><name pos:start="149:13" pos:end="149:15">fpc</name><operator pos:start="149:16" pos:end="149:17">-&gt;</operator><name pos:start="149:18" pos:end="149:27">end_padded</name></name>      <operator pos:start="149:34" pos:end="149:34">=</operator> <literal type="number" pos:start="149:36" pos:end="149:36">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:57"><expr pos:start="151:13" pos:end="151:56"><name pos:start="151:13" pos:end="151:20">buf_size</name> <operator pos:start="151:22" pos:end="151:22">=</operator> <name pos:start="151:24" pos:end="151:32">read_size</name> <operator pos:start="151:34" pos:end="151:34">=</operator> <name pos:start="151:36" pos:end="151:56">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="163:9">else <block pos:start="153:16" pos:end="163:9">{<block_content pos:start="159:13" pos:end="161:74">

            <comment type="block" pos:start="155:13" pos:end="157:70">/* The maximum read size is the upper-bound of what the parser

               needs to have the required number of frames buffered */</comment>

            <decl_stmt pos:start="159:13" pos:end="159:77"><decl pos:start="159:13" pos:end="159:76"><type pos:start="159:13" pos:end="159:15"><name pos:start="159:13" pos:end="159:15">int</name></type> <name pos:start="159:17" pos:end="159:26">nb_desired</name> <init pos:start="159:28" pos:end="159:76">= <expr pos:start="159:30" pos:end="159:76"><name pos:start="159:30" pos:end="159:45">FLAC_MIN_HEADERS</name> <operator pos:start="159:47" pos:end="159:47">-</operator> <name pos:start="159:49" pos:end="159:72"><name pos:start="159:49" pos:end="159:51">fpc</name><operator pos:start="159:52" pos:end="159:53">-&gt;</operator><name pos:start="159:54" pos:end="159:72">nb_headers_buffered</name></name> <operator pos:start="159:74" pos:end="159:74">+</operator> <literal type="number" pos:start="159:76" pos:end="159:76">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="161:13" pos:end="161:74"><expr pos:start="161:13" pos:end="161:73"><name pos:start="161:13" pos:end="161:21">read_size</name> <operator pos:start="161:23" pos:end="161:23">=</operator> <call pos:start="161:25" pos:end="161:73"><name pos:start="161:25" pos:end="161:29">FFMIN</name><argument_list pos:start="161:30" pos:end="161:73">(<argument pos:start="161:31" pos:end="161:38"><expr pos:start="161:31" pos:end="161:38"><name pos:start="161:31" pos:end="161:38">buf_size</name></expr></argument>, <argument pos:start="161:41" pos:end="161:72"><expr pos:start="161:41" pos:end="161:72"><name pos:start="161:41" pos:end="161:50">nb_desired</name> <operator pos:start="161:52" pos:end="161:52">*</operator> <name pos:start="161:54" pos:end="161:72">FLAC_AVG_FRAME_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="167:9" pos:end="167:30">/* Fill the buffer. */</comment>

        <if_stmt pos:start="169:9" pos:end="181:9"><if pos:start="169:9" pos:end="181:9">if <condition pos:start="169:12" pos:end="171:74">(<expr pos:start="169:13" pos:end="171:73"><call pos:start="169:13" pos:end="171:69"><name pos:start="169:13" pos:end="169:28">av_fifo_realloc2</name><argument_list pos:start="169:29" pos:end="171:69">(<argument pos:start="169:30" pos:end="169:42"><expr pos:start="169:30" pos:end="169:42"><name pos:start="169:30" pos:end="169:42"><name pos:start="169:30" pos:end="169:32">fpc</name><operator pos:start="169:33" pos:end="169:34">-&gt;</operator><name pos:start="169:35" pos:end="169:42">fifo_buf</name></name></expr></argument>,

                             <argument pos:start="171:30" pos:end="171:68"><expr pos:start="171:30" pos:end="171:68"><name pos:start="171:30" pos:end="171:38">read_size</name> <operator pos:start="171:40" pos:end="171:40">+</operator> <call pos:start="171:42" pos:end="171:68"><name pos:start="171:42" pos:end="171:53">av_fifo_size</name><argument_list pos:start="171:54" pos:end="171:68">(<argument pos:start="171:55" pos:end="171:67"><expr pos:start="171:55" pos:end="171:67"><name pos:start="171:55" pos:end="171:67"><name pos:start="171:55" pos:end="171:57">fpc</name><operator pos:start="171:58" pos:end="171:59">-&gt;</operator><name pos:start="171:60" pos:end="171:67">fifo_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator pos:start="171:71" pos:end="171:71">&lt;</operator> <literal type="number" pos:start="171:73" pos:end="171:73">0</literal></expr>)</condition> <block pos:start="171:76" pos:end="181:9">{<block_content pos:start="173:13" pos:end="179:30">

            <expr_stmt pos:start="173:13" pos:end="177:60"><expr pos:start="173:13" pos:end="177:59"><call pos:start="173:13" pos:end="177:59"><name pos:start="173:13" pos:end="173:18">av_log</name><argument_list pos:start="173:19" pos:end="177:59">(<argument pos:start="173:20" pos:end="173:24"><expr pos:start="173:20" pos:end="173:24"><name pos:start="173:20" pos:end="173:24">avctx</name></expr></argument>, <argument pos:start="173:27" pos:end="173:38"><expr pos:start="173:27" pos:end="173:38"><name pos:start="173:27" pos:end="173:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="175:20" pos:end="175:60"><expr pos:start="175:20" pos:end="175:60"><literal type="string" pos:start="175:20" pos:end="175:60">"couldn't reallocate buffer of size %d\n"</literal></expr></argument>,

                   <argument pos:start="177:20" pos:end="177:58"><expr pos:start="177:20" pos:end="177:58"><name pos:start="177:20" pos:end="177:28">read_size</name> <operator pos:start="177:30" pos:end="177:30">+</operator> <call pos:start="177:32" pos:end="177:58"><name pos:start="177:32" pos:end="177:43">av_fifo_size</name><argument_list pos:start="177:44" pos:end="177:58">(<argument pos:start="177:45" pos:end="177:57"><expr pos:start="177:45" pos:end="177:57"><name pos:start="177:45" pos:end="177:57"><name pos:start="177:45" pos:end="177:47">fpc</name><operator pos:start="177:48" pos:end="177:49">-&gt;</operator><name pos:start="177:50" pos:end="177:57">fifo_buf</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="179:13" pos:end="179:30">goto <name pos:start="179:18" pos:end="179:29">handle_error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="185:9" pos:end="197:9"><if pos:start="185:9" pos:end="189:9">if <condition pos:start="185:12" pos:end="185:16">(<expr pos:start="185:13" pos:end="185:15"><name pos:start="185:13" pos:end="185:15">buf</name></expr>)</condition> <block pos:start="185:18" pos:end="189:9">{<block_content pos:start="187:13" pos:end="187:79">

            <expr_stmt pos:start="187:13" pos:end="187:79"><expr pos:start="187:13" pos:end="187:78"><call pos:start="187:13" pos:end="187:78"><name pos:start="187:13" pos:end="187:33">av_fifo_generic_write</name><argument_list pos:start="187:34" pos:end="187:78">(<argument pos:start="187:35" pos:end="187:47"><expr pos:start="187:35" pos:end="187:47"><name pos:start="187:35" pos:end="187:47"><name pos:start="187:35" pos:end="187:37">fpc</name><operator pos:start="187:38" pos:end="187:39">-&gt;</operator><name pos:start="187:40" pos:end="187:47">fifo_buf</name></name></expr></argument>, <argument pos:start="187:50" pos:end="187:60"><expr pos:start="187:50" pos:end="187:60"><operator pos:start="187:50" pos:end="187:50">(</operator><name pos:start="187:51" pos:end="187:54">void</name><operator pos:start="187:55" pos:end="187:55">*</operator><operator pos:start="187:56" pos:end="187:56">)</operator> <name pos:start="187:58" pos:end="187:60">buf</name></expr></argument>, <argument pos:start="187:63" pos:end="187:71"><expr pos:start="187:63" pos:end="187:71"><name pos:start="187:63" pos:end="187:71">read_size</name></expr></argument>, <argument pos:start="187:74" pos:end="187:77"><expr pos:start="187:74" pos:end="187:77"><name pos:start="187:74" pos:end="187:77">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="189:11" pos:end="197:9">else <block pos:start="189:16" pos:end="197:9">{<block_content pos:start="191:13" pos:end="195:81">

            <decl_stmt pos:start="191:13" pos:end="191:46"><decl pos:start="191:13" pos:end="191:45"><type pos:start="191:13" pos:end="191:18"><name pos:start="191:13" pos:end="191:18">int8_t</name></type> <name pos:start="191:20" pos:end="191:45"><name pos:start="191:20" pos:end="191:22">pad</name><index pos:start="191:23" pos:end="191:45">[<expr pos:start="191:24" pos:end="191:44"><name pos:start="191:24" pos:end="191:44">MAX_FRAME_HEADER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

            <expr_stmt pos:start="193:13" pos:end="193:40"><expr pos:start="193:13" pos:end="193:39"><call pos:start="193:13" pos:end="193:39"><name pos:start="193:13" pos:end="193:18">memset</name><argument_list pos:start="193:19" pos:end="193:39">(<argument pos:start="193:20" pos:end="193:22"><expr pos:start="193:20" pos:end="193:22"><name pos:start="193:20" pos:end="193:22">pad</name></expr></argument>, <argument pos:start="193:25" pos:end="193:25"><expr pos:start="193:25" pos:end="193:25"><literal type="number" pos:start="193:25" pos:end="193:25">0</literal></expr></argument>, <argument pos:start="193:28" pos:end="193:38"><expr pos:start="193:28" pos:end="193:38"><sizeof pos:start="193:28" pos:end="193:38">sizeof<argument_list pos:start="193:34" pos:end="193:38">(<argument pos:start="193:35" pos:end="193:37"><expr pos:start="193:35" pos:end="193:37"><name pos:start="193:35" pos:end="193:37">pad</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="195:13" pos:end="195:81"><expr pos:start="195:13" pos:end="195:80"><call pos:start="195:13" pos:end="195:80"><name pos:start="195:13" pos:end="195:33">av_fifo_generic_write</name><argument_list pos:start="195:34" pos:end="195:80">(<argument pos:start="195:35" pos:end="195:47"><expr pos:start="195:35" pos:end="195:47"><name pos:start="195:35" pos:end="195:47"><name pos:start="195:35" pos:end="195:37">fpc</name><operator pos:start="195:38" pos:end="195:39">-&gt;</operator><name pos:start="195:40" pos:end="195:47">fifo_buf</name></name></expr></argument>, <argument pos:start="195:50" pos:end="195:60"><expr pos:start="195:50" pos:end="195:60"><operator pos:start="195:50" pos:end="195:50">(</operator><name pos:start="195:51" pos:end="195:54">void</name><operator pos:start="195:55" pos:end="195:55">*</operator><operator pos:start="195:56" pos:end="195:56">)</operator> <name pos:start="195:58" pos:end="195:60">pad</name></expr></argument>, <argument pos:start="195:63" pos:end="195:73"><expr pos:start="195:63" pos:end="195:73"><sizeof pos:start="195:63" pos:end="195:73">sizeof<argument_list pos:start="195:69" pos:end="195:73">(<argument pos:start="195:70" pos:end="195:72"><expr pos:start="195:70" pos:end="195:72"><name pos:start="195:70" pos:end="195:72">pad</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="195:76" pos:end="195:79"><expr pos:start="195:76" pos:end="195:79"><name pos:start="195:76" pos:end="195:79">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>



        <comment type="block" pos:start="201:9" pos:end="201:47">/* Tag headers and update sequences. */</comment>

        <expr_stmt pos:start="203:9" pos:end="205:65"><expr pos:start="203:9" pos:end="205:64"><name pos:start="203:9" pos:end="203:20">start_offset</name> <operator pos:start="203:22" pos:end="203:22">=</operator> <call pos:start="203:24" pos:end="203:50"><name pos:start="203:24" pos:end="203:35">av_fifo_size</name><argument_list pos:start="203:36" pos:end="203:50">(<argument pos:start="203:37" pos:end="203:49"><expr pos:start="203:37" pos:end="203:49"><name pos:start="203:37" pos:end="203:49"><name pos:start="203:37" pos:end="203:39">fpc</name><operator pos:start="203:40" pos:end="203:41">-&gt;</operator><name pos:start="203:42" pos:end="203:49">fifo_buf</name></name></expr></argument>)</argument_list></call> <operator pos:start="203:52" pos:end="203:52">-</operator>

                       <operator pos:start="205:24" pos:end="205:24">(</operator><name pos:start="205:25" pos:end="205:33">read_size</name> <operator pos:start="205:35" pos:end="205:35">+</operator> <operator pos:start="205:37" pos:end="205:37">(</operator><name pos:start="205:38" pos:end="205:58">MAX_FRAME_HEADER_SIZE</name> <operator pos:start="205:60" pos:end="205:60">-</operator> <literal type="number" pos:start="205:62" pos:end="205:62">1</literal><operator pos:start="205:63" pos:end="205:63">)</operator><operator pos:start="205:64" pos:end="205:64">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:46"><expr pos:start="207:9" pos:end="207:45"><name pos:start="207:9" pos:end="207:20">start_offset</name> <operator pos:start="207:22" pos:end="207:22">=</operator> <call pos:start="207:24" pos:end="207:45"><name pos:start="207:24" pos:end="207:28">FFMAX</name><argument_list pos:start="207:29" pos:end="207:45">(<argument pos:start="207:30" pos:end="207:30"><expr pos:start="207:30" pos:end="207:30"><literal type="number" pos:start="207:30" pos:end="207:30">0</literal></expr></argument>, <argument pos:start="207:33" pos:end="207:44"><expr pos:start="207:33" pos:end="207:44"><name pos:start="207:33" pos:end="207:44">start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:59"><expr pos:start="209:9" pos:end="209:58"><name pos:start="209:9" pos:end="209:18">nb_headers</name>   <operator pos:start="209:22" pos:end="209:22">=</operator> <call pos:start="209:24" pos:end="209:58"><name pos:start="209:24" pos:end="209:39">find_new_headers</name><argument_list pos:start="209:40" pos:end="209:58">(<argument pos:start="209:41" pos:end="209:43"><expr pos:start="209:41" pos:end="209:43"><name pos:start="209:41" pos:end="209:43">fpc</name></expr></argument>, <argument pos:start="209:46" pos:end="209:57"><expr pos:start="209:46" pos:end="209:57"><name pos:start="209:46" pos:end="209:57">start_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="213:9" pos:end="221:9"><if pos:start="213:9" pos:end="221:9">if <condition pos:start="213:12" pos:end="213:27">(<expr pos:start="213:13" pos:end="213:26"><name pos:start="213:13" pos:end="213:22">nb_headers</name> <operator pos:start="213:24" pos:end="213:24">&lt;</operator> <literal type="number" pos:start="213:26" pos:end="213:26">0</literal></expr>)</condition> <block pos:start="213:29" pos:end="221:9">{<block_content pos:start="215:13" pos:end="219:30">

            <expr_stmt pos:start="215:13" pos:end="217:71"><expr pos:start="215:13" pos:end="217:70"><call pos:start="215:13" pos:end="217:70"><name pos:start="215:13" pos:end="215:18">av_log</name><argument_list pos:start="215:19" pos:end="217:70">(<argument pos:start="215:20" pos:end="215:24"><expr pos:start="215:20" pos:end="215:24"><name pos:start="215:20" pos:end="215:24">avctx</name></expr></argument>, <argument pos:start="215:27" pos:end="215:38"><expr pos:start="215:27" pos:end="215:38"><name pos:start="215:27" pos:end="215:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="217:20" pos:end="217:69"><expr pos:start="217:20" pos:end="217:69"><literal type="string" pos:start="217:20" pos:end="217:69">"find_new_headers couldn't allocate FLAC header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="219:13" pos:end="219:30">goto <name pos:start="219:18" pos:end="219:29">handle_error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="225:9" pos:end="225:46"><expr pos:start="225:9" pos:end="225:45"><name pos:start="225:9" pos:end="225:32"><name pos:start="225:9" pos:end="225:11">fpc</name><operator pos:start="225:12" pos:end="225:13">-&gt;</operator><name pos:start="225:14" pos:end="225:32">nb_headers_buffered</name></name> <operator pos:start="225:34" pos:end="225:34">=</operator> <name pos:start="225:36" pos:end="225:45">nb_headers</name></expr>;</expr_stmt>

        <comment type="block" pos:start="227:9" pos:end="227:65">/* Wait till FLAC_MIN_HEADERS to output a valid frame. */</comment>

        <if_stmt pos:start="229:9" pos:end="231:30"><if pos:start="229:9" pos:end="231:30">if <condition pos:start="229:12" pos:end="229:76">(<expr pos:start="229:13" pos:end="229:75"><operator pos:start="229:13" pos:end="229:13">!</operator><name pos:start="229:14" pos:end="229:28"><name pos:start="229:14" pos:end="229:16">fpc</name><operator pos:start="229:17" pos:end="229:18">-&gt;</operator><name pos:start="229:19" pos:end="229:28">end_padded</name></name> <operator pos:start="229:30" pos:end="229:31">&amp;&amp;</operator> <name pos:start="229:33" pos:end="229:56"><name pos:start="229:33" pos:end="229:35">fpc</name><operator pos:start="229:36" pos:end="229:37">-&gt;</operator><name pos:start="229:38" pos:end="229:56">nb_headers_buffered</name></name> <operator pos:start="229:58" pos:end="229:58">&lt;</operator> <name pos:start="229:60" pos:end="229:75">FLAC_MIN_HEADERS</name></expr>)</condition><block type="pseudo" pos:start="231:13" pos:end="231:30"><block_content pos:start="231:13" pos:end="231:30">

            <goto pos:start="231:13" pos:end="231:30">goto <name pos:start="231:18" pos:end="231:29">handle_error</name>;</goto></block_content></block></if></if_stmt>



        <comment type="block" pos:start="235:9" pos:end="235:78">/* If headers found, update the scores since we have longer chains. */</comment>

        <if_stmt pos:start="237:9" pos:end="239:33"><if pos:start="237:9" pos:end="239:33">if <condition pos:start="237:12" pos:end="237:53">(<expr pos:start="237:13" pos:end="237:52"><name pos:start="237:13" pos:end="237:27"><name pos:start="237:13" pos:end="237:15">fpc</name><operator pos:start="237:16" pos:end="237:17">-&gt;</operator><name pos:start="237:18" pos:end="237:27">end_padded</name></name> <operator pos:start="237:29" pos:end="237:30">||</operator> <name pos:start="237:32" pos:end="237:52"><name pos:start="237:32" pos:end="237:34">fpc</name><operator pos:start="237:35" pos:end="237:36">-&gt;</operator><name pos:start="237:37" pos:end="237:52">nb_headers_found</name></name></expr>)</condition><block type="pseudo" pos:start="239:13" pos:end="239:33"><block_content pos:start="239:13" pos:end="239:33">

            <expr_stmt pos:start="239:13" pos:end="239:33"><expr pos:start="239:13" pos:end="239:32"><call pos:start="239:13" pos:end="239:32"><name pos:start="239:13" pos:end="239:27">score_sequences</name><argument_list pos:start="239:28" pos:end="239:32">(<argument pos:start="239:29" pos:end="239:31"><expr pos:start="239:29" pos:end="239:31"><name pos:start="239:29" pos:end="239:31">fpc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <comment type="block" pos:start="243:9" pos:end="243:43">/* restore the state pre-padding */</comment>

        <if_stmt pos:start="245:9" pos:end="263:9"><if pos:start="245:9" pos:end="263:9">if <condition pos:start="245:12" pos:end="245:28">(<expr pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:27"><name pos:start="245:13" pos:end="245:15">fpc</name><operator pos:start="245:16" pos:end="245:17">-&gt;</operator><name pos:start="245:18" pos:end="245:27">end_padded</name></name></expr>)</condition> <block pos:start="245:30" pos:end="263:9">{<block_content pos:start="249:13" pos:end="261:37">

            <comment type="block" pos:start="247:13" pos:end="247:50">/* HACK: drain the tail of the fifo */</comment>

            <expr_stmt pos:start="249:13" pos:end="249:57"><expr pos:start="249:13" pos:end="249:56"><name pos:start="249:13" pos:end="249:31"><name pos:start="249:13" pos:end="249:15">fpc</name><operator pos:start="249:16" pos:end="249:17">-&gt;</operator><name pos:start="249:18" pos:end="249:25">fifo_buf</name><operator pos:start="249:26" pos:end="249:27">-&gt;</operator><name pos:start="249:28" pos:end="249:31">wptr</name></name> <operator pos:start="249:33" pos:end="249:34">-=</operator> <name pos:start="249:36" pos:end="249:56">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

            <expr_stmt pos:start="251:13" pos:end="251:57"><expr pos:start="251:13" pos:end="251:56"><name pos:start="251:13" pos:end="251:31"><name pos:start="251:13" pos:end="251:15">fpc</name><operator pos:start="251:16" pos:end="251:17">-&gt;</operator><name pos:start="251:18" pos:end="251:25">fifo_buf</name><operator pos:start="251:26" pos:end="251:27">-&gt;</operator><name pos:start="251:28" pos:end="251:31">wndx</name></name> <operator pos:start="251:33" pos:end="251:34">-=</operator> <name pos:start="251:36" pos:end="251:56">MAX_FRAME_HEADER_SIZE</name></expr>;</expr_stmt>

            <if_stmt pos:start="253:13" pos:end="259:13"><if pos:start="253:13" pos:end="259:13">if <condition pos:start="253:16" pos:end="253:40">(<expr pos:start="253:17" pos:end="253:39"><name pos:start="253:17" pos:end="253:35"><name pos:start="253:17" pos:end="253:19">fpc</name><operator pos:start="253:20" pos:end="253:21">-&gt;</operator><name pos:start="253:22" pos:end="253:29">fifo_buf</name><operator pos:start="253:30" pos:end="253:31">-&gt;</operator><name pos:start="253:32" pos:end="253:35">wptr</name></name> <operator pos:start="253:37" pos:end="253:37">&lt;</operator> <literal type="number" pos:start="253:39" pos:end="253:39">0</literal></expr>)</condition> <block pos:start="253:42" pos:end="259:13">{<block_content pos:start="255:17" pos:end="257:42">

                <expr_stmt pos:start="255:17" pos:end="257:42"><expr pos:start="255:17" pos:end="257:41"><name pos:start="255:17" pos:end="255:35"><name pos:start="255:17" pos:end="255:19">fpc</name><operator pos:start="255:20" pos:end="255:21">-&gt;</operator><name pos:start="255:22" pos:end="255:29">fifo_buf</name><operator pos:start="255:30" pos:end="255:31">-&gt;</operator><name pos:start="255:32" pos:end="255:35">wptr</name></name> <operator pos:start="255:37" pos:end="255:38">+=</operator> <name pos:start="255:40" pos:end="255:57"><name pos:start="255:40" pos:end="255:42">fpc</name><operator pos:start="255:43" pos:end="255:44">-&gt;</operator><name pos:start="255:45" pos:end="255:52">fifo_buf</name><operator pos:start="255:53" pos:end="255:54">-&gt;</operator><name pos:start="255:55" pos:end="255:57">end</name></name> <operator pos:start="255:59" pos:end="255:59">-</operator>

                    <name pos:start="257:21" pos:end="257:41"><name pos:start="257:21" pos:end="257:23">fpc</name><operator pos:start="257:24" pos:end="257:25">-&gt;</operator><name pos:start="257:26" pos:end="257:33">fifo_buf</name><operator pos:start="257:34" pos:end="257:35">-&gt;</operator><name pos:start="257:36" pos:end="257:41">buffer</name></name></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="261:13" pos:end="261:37"><expr pos:start="261:13" pos:end="261:36"><name pos:start="261:13" pos:end="261:20">buf_size</name> <operator pos:start="261:22" pos:end="261:22">=</operator> <name pos:start="261:24" pos:end="261:32">read_size</name> <operator pos:start="261:34" pos:end="261:34">=</operator> <literal type="number" pos:start="261:36" pos:end="261:36">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:24"><expr pos:start="269:5" pos:end="269:23"><name pos:start="269:5" pos:end="269:8">curr</name> <operator pos:start="269:10" pos:end="269:10">=</operator> <name pos:start="269:12" pos:end="269:23"><name pos:start="269:12" pos:end="269:14">fpc</name><operator pos:start="269:15" pos:end="269:16">-&gt;</operator><name pos:start="269:17" pos:end="269:23">headers</name></name></expr>;</expr_stmt>

    <for pos:start="271:5" pos:end="275:36">for <control pos:start="271:9" pos:end="271:54">(<init pos:start="271:10" pos:end="271:29"><expr pos:start="271:10" pos:end="271:28"><name pos:start="271:10" pos:end="271:13">curr</name> <operator pos:start="271:15" pos:end="271:15">=</operator> <name pos:start="271:17" pos:end="271:28"><name pos:start="271:17" pos:end="271:19">fpc</name><operator pos:start="271:20" pos:end="271:21">-&gt;</operator><name pos:start="271:22" pos:end="271:28">headers</name></name></expr>;</init> <condition pos:start="271:31" pos:end="271:35"><expr pos:start="271:31" pos:end="271:34"><name pos:start="271:31" pos:end="271:34">curr</name></expr>;</condition> <incr pos:start="271:37" pos:end="271:53"><expr pos:start="271:37" pos:end="271:53"><name pos:start="271:37" pos:end="271:40">curr</name> <operator pos:start="271:42" pos:end="271:42">=</operator> <name pos:start="271:44" pos:end="271:53"><name pos:start="271:44" pos:end="271:47">curr</name><operator pos:start="271:48" pos:end="271:49">-&gt;</operator><name pos:start="271:50" pos:end="271:53">next</name></name></expr></incr>)</control><block type="pseudo" pos:start="273:9" pos:end="275:36"><block_content pos:start="273:9" pos:end="275:36">

        <if_stmt pos:start="273:9" pos:end="275:36"><if pos:start="273:9" pos:end="275:36">if <condition pos:start="273:12" pos:end="273:79">(<expr pos:start="273:13" pos:end="273:78"><operator pos:start="273:13" pos:end="273:13">!</operator><name pos:start="273:14" pos:end="273:29"><name pos:start="273:14" pos:end="273:16">fpc</name><operator pos:start="273:17" pos:end="273:18">-&gt;</operator><name pos:start="273:19" pos:end="273:29">best_header</name></name> <operator pos:start="273:31" pos:end="273:32">||</operator> <name pos:start="273:34" pos:end="273:48"><name pos:start="273:34" pos:end="273:37">curr</name><operator pos:start="273:38" pos:end="273:39">-&gt;</operator><name pos:start="273:40" pos:end="273:48">max_score</name></name> <operator pos:start="273:50" pos:end="273:50">&gt;</operator> <name pos:start="273:52" pos:end="273:78"><name pos:start="273:52" pos:end="273:54">fpc</name><operator pos:start="273:55" pos:end="273:56">-&gt;</operator><name pos:start="273:57" pos:end="273:67">best_header</name><operator pos:start="273:68" pos:end="273:69">-&gt;</operator><name pos:start="273:70" pos:end="273:78">max_score</name></name></expr>)</condition><block type="pseudo" pos:start="275:13" pos:end="275:36"><block_content pos:start="275:13" pos:end="275:36">

            <expr_stmt pos:start="275:13" pos:end="275:36"><expr pos:start="275:13" pos:end="275:35"><name pos:start="275:13" pos:end="275:28"><name pos:start="275:13" pos:end="275:15">fpc</name><operator pos:start="275:16" pos:end="275:17">-&gt;</operator><name pos:start="275:18" pos:end="275:28">best_header</name></name> <operator pos:start="275:30" pos:end="275:30">=</operator> <name pos:start="275:32" pos:end="275:35">curr</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>



    <if_stmt pos:start="279:5" pos:end="315:5"><if pos:start="279:5" pos:end="315:5">if <condition pos:start="279:8" pos:end="279:25">(<expr pos:start="279:9" pos:end="279:24"><name pos:start="279:9" pos:end="279:24"><name pos:start="279:9" pos:end="279:11">fpc</name><operator pos:start="279:12" pos:end="279:13">-&gt;</operator><name pos:start="279:14" pos:end="279:24">best_header</name></name></expr>)</condition> <block pos:start="279:27" pos:end="315:5">{<block_content pos:start="281:9" pos:end="313:63">

        <expr_stmt pos:start="281:9" pos:end="281:35"><expr pos:start="281:9" pos:end="281:34"><name pos:start="281:9" pos:end="281:30"><name pos:start="281:9" pos:end="281:11">fpc</name><operator pos:start="281:12" pos:end="281:13">-&gt;</operator><name pos:start="281:14" pos:end="281:30">best_header_valid</name></name> <operator pos:start="281:32" pos:end="281:32">=</operator> <literal type="number" pos:start="281:34" pos:end="281:34">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="283:9" pos:end="309:9"><if pos:start="283:9" pos:end="309:9">if <condition pos:start="283:12" pos:end="283:41">(<expr pos:start="283:13" pos:end="283:40"><name pos:start="283:13" pos:end="283:36"><name pos:start="283:13" pos:end="283:15">fpc</name><operator pos:start="283:16" pos:end="283:17">-&gt;</operator><name pos:start="283:18" pos:end="283:28">best_header</name><operator pos:start="283:29" pos:end="283:30">-&gt;</operator><name pos:start="283:31" pos:end="283:36">offset</name></name> <operator pos:start="283:38" pos:end="283:38">&gt;</operator> <literal type="number" pos:start="283:40" pos:end="283:40">0</literal></expr>)</condition> <block pos:start="283:43" pos:end="309:9">{<block_content pos:start="287:13" pos:end="307:72">

            <comment type="block" pos:start="285:13" pos:end="285:38">/* Output a junk frame. */</comment>

            <expr_stmt pos:start="287:13" pos:end="289:45"><expr pos:start="287:13" pos:end="289:44"><call pos:start="287:13" pos:end="289:44"><name pos:start="287:13" pos:end="287:18">av_log</name><argument_list pos:start="287:19" pos:end="289:44">(<argument pos:start="287:20" pos:end="287:24"><expr pos:start="287:20" pos:end="287:24"><name pos:start="287:20" pos:end="287:24">avctx</name></expr></argument>, <argument pos:start="287:27" pos:end="287:38"><expr pos:start="287:27" pos:end="287:38"><name pos:start="287:27" pos:end="287:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="287:41" pos:end="287:69"><expr pos:start="287:41" pos:end="287:69"><literal type="string" pos:start="287:41" pos:end="287:69">"Junk frame till offset %i\n"</literal></expr></argument>,

                   <argument pos:start="289:20" pos:end="289:43"><expr pos:start="289:20" pos:end="289:43"><name pos:start="289:20" pos:end="289:43"><name pos:start="289:20" pos:end="289:22">fpc</name><operator pos:start="289:23" pos:end="289:24">-&gt;</operator><name pos:start="289:25" pos:end="289:35">best_header</name><operator pos:start="289:36" pos:end="289:37">-&gt;</operator><name pos:start="289:38" pos:end="289:43">offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <comment type="block" pos:start="293:13" pos:end="293:80">/* Set frame_size to 0. It is unknown or invalid in a junk frame. */</comment>

            <expr_stmt pos:start="295:13" pos:end="295:34"><expr pos:start="295:13" pos:end="295:33"><name pos:start="295:13" pos:end="295:29"><name pos:start="295:13" pos:end="295:17">avctx</name><operator pos:start="295:18" pos:end="295:19">-&gt;</operator><name pos:start="295:20" pos:end="295:29">frame_size</name></name> <operator pos:start="295:31" pos:end="295:31">=</operator> <literal type="number" pos:start="295:33" pos:end="295:33">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="297:13" pos:end="297:57"><expr pos:start="297:13" pos:end="297:56"><operator pos:start="297:13" pos:end="297:13">*</operator><name pos:start="297:14" pos:end="297:25">poutbuf_size</name>     <operator pos:start="297:31" pos:end="297:31">=</operator> <name pos:start="297:33" pos:end="297:56"><name pos:start="297:33" pos:end="297:35">fpc</name><operator pos:start="297:36" pos:end="297:37">-&gt;</operator><name pos:start="297:38" pos:end="297:48">best_header</name><operator pos:start="297:49" pos:end="297:50">-&gt;</operator><name pos:start="297:51" pos:end="297:56">offset</name></name></expr>;</expr_stmt>

            <expr_stmt pos:start="299:13" pos:end="303:83"><expr pos:start="299:13" pos:end="303:82"><operator pos:start="299:13" pos:end="299:13">*</operator><name pos:start="299:14" pos:end="299:20">poutbuf</name>          <operator pos:start="299:31" pos:end="299:31">=</operator> <call pos:start="299:33" pos:end="303:82"><name pos:start="299:33" pos:end="299:51">flac_fifo_read_wrap</name><argument_list pos:start="299:52" pos:end="303:82">(<argument pos:start="299:53" pos:end="299:55"><expr pos:start="299:53" pos:end="299:55"><name pos:start="299:53" pos:end="299:55">fpc</name></expr></argument>, <argument pos:start="299:58" pos:end="299:58"><expr pos:start="299:58" pos:end="299:58"><literal type="number" pos:start="299:58" pos:end="299:58">0</literal></expr></argument>, <argument pos:start="299:61" pos:end="299:73"><expr pos:start="299:61" pos:end="299:73"><operator pos:start="299:61" pos:end="299:61">*</operator><name pos:start="299:62" pos:end="299:73">poutbuf_size</name></expr></argument>,

                                                    <argument pos:start="301:53" pos:end="301:66"><expr pos:start="301:53" pos:end="301:66"><operator pos:start="301:53" pos:end="301:53">&amp;</operator><name pos:start="301:54" pos:end="301:66"><name pos:start="301:54" pos:end="301:56">fpc</name><operator pos:start="301:57" pos:end="301:58">-&gt;</operator><name pos:start="301:59" pos:end="301:66">wrap_buf</name></name></expr></argument>,

                                                    <argument pos:start="303:53" pos:end="303:81"><expr pos:start="303:53" pos:end="303:81"><operator pos:start="303:53" pos:end="303:53">&amp;</operator><name pos:start="303:54" pos:end="303:81"><name pos:start="303:54" pos:end="303:56">fpc</name><operator pos:start="303:57" pos:end="303:58">-&gt;</operator><name pos:start="303:59" pos:end="303:81">wrap_buf_allocated_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="305:13" pos:end="307:72">return <expr pos:start="305:20" pos:end="307:71"><ternary pos:start="305:20" pos:end="307:71"><condition pos:start="305:20" pos:end="305:29"><expr pos:start="305:20" pos:end="305:27"><name pos:start="305:20" pos:end="305:27">buf_size</name></expr> ?</condition><then pos:start="305:31" pos:end="305:39"> <expr pos:start="305:31" pos:end="305:39"><name pos:start="305:31" pos:end="305:39">read_size</name></expr> </then><else pos:start="305:41" pos:end="307:71">: <expr pos:start="305:43" pos:end="307:71"><operator pos:start="305:43" pos:end="305:43">(</operator><name pos:start="305:44" pos:end="305:67"><name pos:start="305:44" pos:end="305:46">fpc</name><operator pos:start="305:47" pos:end="305:48">-&gt;</operator><name pos:start="305:49" pos:end="305:59">best_header</name><operator pos:start="305:60" pos:end="305:61">-&gt;</operator><name pos:start="305:62" pos:end="305:67">offset</name></name> <operator pos:start="305:69" pos:end="305:69">-</operator>

                                           <call pos:start="307:44" pos:end="307:70"><name pos:start="307:44" pos:end="307:55">av_fifo_size</name><argument_list pos:start="307:56" pos:end="307:70">(<argument pos:start="307:57" pos:end="307:69"><expr pos:start="307:57" pos:end="307:69"><name pos:start="307:57" pos:end="307:69"><name pos:start="307:57" pos:end="307:59">fpc</name><operator pos:start="307:60" pos:end="307:61">-&gt;</operator><name pos:start="307:62" pos:end="307:69">fifo_buf</name></name></expr></argument>)</argument_list></call><operator pos:start="307:71" pos:end="307:71">)</operator></expr></else></ternary></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="311:9" pos:end="313:63"><if pos:start="311:9" pos:end="313:63">if <condition pos:start="311:12" pos:end="311:22">(<expr pos:start="311:13" pos:end="311:21"><operator pos:start="311:13" pos:end="311:13">!</operator><name pos:start="311:14" pos:end="311:21">buf_size</name></expr>)</condition><block type="pseudo" pos:start="313:13" pos:end="313:63"><block_content pos:start="313:13" pos:end="313:63">

            <return pos:start="313:13" pos:end="313:63">return <expr pos:start="313:20" pos:end="313:62"><call pos:start="313:20" pos:end="313:62"><name pos:start="313:20" pos:end="313:34">get_best_header</name><argument_list pos:start="313:35" pos:end="313:62">(<argument pos:start="313:36" pos:end="313:38"><expr pos:start="313:36" pos:end="313:38"><name pos:start="313:36" pos:end="313:38">fpc</name></expr></argument>, <argument pos:start="313:41" pos:end="313:47"><expr pos:start="313:41" pos:end="313:47"><name pos:start="313:41" pos:end="313:47">poutbuf</name></expr></argument>, <argument pos:start="313:50" pos:end="313:61"><expr pos:start="313:50" pos:end="313:61"><name pos:start="313:50" pos:end="313:61">poutbuf_size</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



<label pos:start="319:1" pos:end="319:13"><name pos:start="319:1" pos:end="319:12">handle_error</name>:</label>

    <expr_stmt pos:start="321:5" pos:end="321:25"><expr pos:start="321:5" pos:end="321:24"><operator pos:start="321:5" pos:end="321:5">*</operator><name pos:start="321:6" pos:end="321:12">poutbuf</name>      <operator pos:start="321:19" pos:end="321:19">=</operator> <name pos:start="321:21" pos:end="321:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="323:5" pos:end="323:22"><expr pos:start="323:5" pos:end="323:21"><operator pos:start="323:5" pos:end="323:5">*</operator><name pos:start="323:6" pos:end="323:17">poutbuf_size</name> <operator pos:start="323:19" pos:end="323:19">=</operator> <literal type="number" pos:start="323:21" pos:end="323:21">0</literal></expr>;</expr_stmt>

    <return pos:start="325:5" pos:end="325:21">return <expr pos:start="325:12" pos:end="325:20"><name pos:start="325:12" pos:end="325:20">read_size</name></expr>;</return>

</block_content>}</block></function>
</unit>
