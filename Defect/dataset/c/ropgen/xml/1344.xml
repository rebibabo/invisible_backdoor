<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1344.c" pos:tabs="8"><function pos:start="1:1" pos:end="163:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:31">ff_flac_decode_frame_header</name><parameter_list pos:start="1:32" pos:end="3:50">(<parameter pos:start="1:33" pos:end="1:53"><decl pos:start="1:33" pos:end="1:53"><type pos:start="1:33" pos:end="1:53"><name pos:start="1:33" pos:end="1:46">AVCodecContext</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:53">avctx</name></decl></parameter>, <parameter pos:start="1:56" pos:end="1:72"><decl pos:start="1:56" pos:end="1:72"><type pos:start="1:56" pos:end="1:72"><name pos:start="1:56" pos:end="1:68">GetBitContext</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier></type><name pos:start="1:71" pos:end="1:72">gb</name></decl></parameter>,

                                <parameter pos:start="3:33" pos:end="3:49"><decl pos:start="3:33" pos:end="3:49"><type pos:start="3:33" pos:end="3:49"><name pos:start="3:33" pos:end="3:45">FLACFrameInfo</name> <modifier pos:start="3:47" pos:end="3:47">*</modifier></type><name pos:start="3:48" pos:end="3:49">fi</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="163:1">{<block_content pos:start="7:5" pos:end="161:13">

    <decl_stmt pos:start="7:5" pos:end="7:35"><decl pos:start="7:5" pos:end="7:15"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:15">bs_code</name></decl>, <decl pos:start="7:18" pos:end="7:24"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:18" pos:end="7:24">sr_code</name></decl>, <decl pos:start="7:27" pos:end="7:34"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:27" pos:end="7:34">bps_code</name></decl>;</decl_stmt>



    <comment type="block" pos:start="11:5" pos:end="11:25">/* frame sync code */</comment>

    <expr_stmt pos:start="13:5" pos:end="13:22"><expr pos:start="13:5" pos:end="13:21"><call pos:start="13:5" pos:end="13:21"><name pos:start="13:5" pos:end="13:13">skip_bits</name><argument_list pos:start="13:14" pos:end="13:21">(<argument pos:start="13:15" pos:end="13:16"><expr pos:start="13:15" pos:end="13:16"><name pos:start="13:15" pos:end="13:16">gb</name></expr></argument>, <argument pos:start="13:19" pos:end="13:20"><expr pos:start="13:19" pos:end="13:20"><literal type="number" pos:start="13:19" pos:end="13:20">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="17:5" pos:end="17:42">/* block size and sample rate codes */</comment>

    <expr_stmt pos:start="19:5" pos:end="19:30"><expr pos:start="19:5" pos:end="19:29"><name pos:start="19:5" pos:end="19:11">bs_code</name> <operator pos:start="19:13" pos:end="19:13">=</operator> <call pos:start="19:15" pos:end="19:29"><name pos:start="19:15" pos:end="19:22">get_bits</name><argument_list pos:start="19:23" pos:end="19:29">(<argument pos:start="19:24" pos:end="19:25"><expr pos:start="19:24" pos:end="19:25"><name pos:start="19:24" pos:end="19:25">gb</name></expr></argument>, <argument pos:start="19:28" pos:end="19:28"><expr pos:start="19:28" pos:end="19:28"><literal type="number" pos:start="19:28" pos:end="19:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:30"><expr pos:start="21:5" pos:end="21:29"><name pos:start="21:5" pos:end="21:11">sr_code</name> <operator pos:start="21:13" pos:end="21:13">=</operator> <call pos:start="21:15" pos:end="21:29"><name pos:start="21:15" pos:end="21:22">get_bits</name><argument_list pos:start="21:23" pos:end="21:29">(<argument pos:start="21:24" pos:end="21:25"><expr pos:start="21:24" pos:end="21:25"><name pos:start="21:24" pos:end="21:25">gb</name></expr></argument>, <argument pos:start="21:28" pos:end="21:28"><expr pos:start="21:28" pos:end="21:28"><literal type="number" pos:start="21:28" pos:end="21:28">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="25:5" pos:end="25:36">/* channels and decorrelation */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:34"><expr pos:start="27:5" pos:end="27:33"><name pos:start="27:5" pos:end="27:15"><name pos:start="27:5" pos:end="27:6">fi</name><operator pos:start="27:7" pos:end="27:8">-&gt;</operator><name pos:start="27:9" pos:end="27:15">ch_mode</name></name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:33"><name pos:start="27:19" pos:end="27:26">get_bits</name><argument_list pos:start="27:27" pos:end="27:33">(<argument pos:start="27:28" pos:end="27:29"><expr pos:start="27:28" pos:end="27:29"><name pos:start="27:28" pos:end="27:29">gb</name></expr></argument>, <argument pos:start="27:32" pos:end="27:32"><expr pos:start="27:32" pos:end="27:32"><literal type="number" pos:start="27:32" pos:end="27:32">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="45:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:40">(<expr pos:start="29:9" pos:end="29:39"><name pos:start="29:9" pos:end="29:19"><name pos:start="29:9" pos:end="29:10">fi</name><operator pos:start="29:11" pos:end="29:12">-&gt;</operator><name pos:start="29:13" pos:end="29:19">ch_mode</name></name> <operator pos:start="29:21" pos:end="29:21">&lt;</operator> <name pos:start="29:23" pos:end="29:39">FLAC_MAX_CHANNELS</name></expr>)</condition> <block pos:start="29:42" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:46">

        <expr_stmt pos:start="31:9" pos:end="31:39"><expr pos:start="31:9" pos:end="31:38"><name pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:10">fi</name><operator pos:start="31:11" pos:end="31:12">-&gt;</operator><name pos:start="31:13" pos:end="31:20">channels</name></name> <operator pos:start="31:22" pos:end="31:22">=</operator> <name pos:start="31:24" pos:end="31:34"><name pos:start="31:24" pos:end="31:25">fi</name><operator pos:start="31:26" pos:end="31:27">-&gt;</operator><name pos:start="31:28" pos:end="31:34">ch_mode</name></name> <operator pos:start="31:36" pos:end="31:36">+</operator> <literal type="number" pos:start="31:38" pos:end="31:38">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="33:9" pos:end="33:46"><expr pos:start="33:9" pos:end="33:45"><name pos:start="33:9" pos:end="33:19"><name pos:start="33:9" pos:end="33:10">fi</name><operator pos:start="33:11" pos:end="33:12">-&gt;</operator><name pos:start="33:13" pos:end="33:19">ch_mode</name></name> <operator pos:start="33:21" pos:end="33:21">=</operator> <name pos:start="33:23" pos:end="33:45">FLAC_CHMODE_INDEPENDENT</name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="35:7" pos:end="39:5">else if <condition pos:start="35:15" pos:end="35:51">(<expr pos:start="35:16" pos:end="35:50"><name pos:start="35:16" pos:end="35:26"><name pos:start="35:16" pos:end="35:17">fi</name><operator pos:start="35:18" pos:end="35:19">-&gt;</operator><name pos:start="35:20" pos:end="35:26">ch_mode</name></name> <operator pos:start="35:28" pos:end="35:29">&lt;=</operator> <name pos:start="35:31" pos:end="35:50">FLAC_CHMODE_MID_SIDE</name></expr>)</condition> <block pos:start="35:53" pos:end="39:5">{<block_content pos:start="37:9" pos:end="37:25">

        <expr_stmt pos:start="37:9" pos:end="37:25"><expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:20"><name pos:start="37:9" pos:end="37:10">fi</name><operator pos:start="37:11" pos:end="37:12">-&gt;</operator><name pos:start="37:13" pos:end="37:20">channels</name></name> <operator pos:start="37:22" pos:end="37:22">=</operator> <literal type="number" pos:start="37:24" pos:end="37:24">2</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="45:5">else <block pos:start="39:12" pos:end="45:5">{<block_content pos:start="41:9" pos:end="43:18">

        <expr_stmt pos:start="41:9" pos:end="41:79"><expr pos:start="41:9" pos:end="41:78"><call pos:start="41:9" pos:end="41:78"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:78">(<argument pos:start="41:16" pos:end="41:20"><expr pos:start="41:16" pos:end="41:20"><name pos:start="41:16" pos:end="41:20">avctx</name></expr></argument>, <argument pos:start="41:23" pos:end="41:34"><expr pos:start="41:23" pos:end="41:34"><name pos:start="41:23" pos:end="41:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:37" pos:end="41:64"><expr pos:start="41:37" pos:end="41:64"><literal type="string" pos:start="41:37" pos:end="41:64">"invalid channel mode: %d\n"</literal></expr></argument>, <argument pos:start="41:67" pos:end="41:77"><expr pos:start="41:67" pos:end="41:77"><name pos:start="41:67" pos:end="41:77"><name pos:start="41:67" pos:end="41:68">fi</name><operator pos:start="41:69" pos:end="41:70">-&gt;</operator><name pos:start="41:71" pos:end="41:77">ch_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="49:5" pos:end="49:25">/* bits per sample */</comment>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:12">bps_code</name> <operator pos:start="51:14" pos:end="51:14">=</operator> <call pos:start="51:16" pos:end="51:30"><name pos:start="51:16" pos:end="51:23">get_bits</name><argument_list pos:start="51:24" pos:end="51:30">(<argument pos:start="51:25" pos:end="51:26"><expr pos:start="51:25" pos:end="51:26"><name pos:start="51:25" pos:end="51:26">gb</name></expr></argument>, <argument pos:start="51:29" pos:end="51:29"><expr pos:start="51:29" pos:end="51:29"><literal type="number" pos:start="51:29" pos:end="51:29">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="61:5"><if pos:start="53:5" pos:end="61:5">if <condition pos:start="53:8" pos:end="53:39">(<expr pos:start="53:9" pos:end="53:38"><name pos:start="53:9" pos:end="53:16">bps_code</name> <operator pos:start="53:18" pos:end="53:19">==</operator> <literal type="number" pos:start="53:21" pos:end="53:21">3</literal> <operator pos:start="53:23" pos:end="53:24">||</operator> <name pos:start="53:26" pos:end="53:33">bps_code</name> <operator pos:start="53:35" pos:end="53:36">==</operator> <literal type="number" pos:start="53:38" pos:end="53:38">7</literal></expr>)</condition> <block pos:start="53:41" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:18">

        <expr_stmt pos:start="55:9" pos:end="57:25"><expr pos:start="55:9" pos:end="57:24"><call pos:start="55:9" pos:end="57:24"><name pos:start="55:9" pos:end="55:14">av_log</name><argument_list pos:start="55:15" pos:end="57:24">(<argument pos:start="55:16" pos:end="55:20"><expr pos:start="55:16" pos:end="55:20"><name pos:start="55:16" pos:end="55:20">avctx</name></expr></argument>, <argument pos:start="55:23" pos:end="55:34"><expr pos:start="55:23" pos:end="55:34"><name pos:start="55:23" pos:end="55:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="55:37" pos:end="55:69"><expr pos:start="55:37" pos:end="55:69"><literal type="string" pos:start="55:37" pos:end="55:69">"invalid sample size code (%d)\n"</literal></expr></argument>,

               <argument pos:start="57:16" pos:end="57:23"><expr pos:start="57:16" pos:end="57:23"><name pos:start="57:16" pos:end="57:23">bps_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="59:9" pos:end="59:18">return <expr pos:start="59:16" pos:end="59:17"><operator pos:start="59:16" pos:end="59:16">-</operator><literal type="number" pos:start="59:17" pos:end="59:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="63:5" pos:end="63:42"><expr pos:start="63:5" pos:end="63:41"><name pos:start="63:5" pos:end="63:11"><name pos:start="63:5" pos:end="63:6">fi</name><operator pos:start="63:7" pos:end="63:8">-&gt;</operator><name pos:start="63:9" pos:end="63:11">bps</name></name> <operator pos:start="63:13" pos:end="63:13">=</operator> <name pos:start="63:15" pos:end="63:41"><name pos:start="63:15" pos:end="63:31">sample_size_table</name><index pos:start="63:32" pos:end="63:41">[<expr pos:start="63:33" pos:end="63:40"><name pos:start="63:33" pos:end="63:40">bps_code</name></expr>]</index></name></expr>;</expr_stmt>



    <comment type="block" pos:start="67:5" pos:end="67:22">/* reserved bit */</comment>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:22">(<expr pos:start="69:9" pos:end="69:21"><call pos:start="69:9" pos:end="69:21"><name pos:start="69:9" pos:end="69:17">get_bits1</name><argument_list pos:start="69:18" pos:end="69:21">(<argument pos:start="69:19" pos:end="69:20"><expr pos:start="69:19" pos:end="69:20"><name pos:start="69:19" pos:end="69:20">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="69:24" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:18">

        <expr_stmt pos:start="71:9" pos:end="71:72"><expr pos:start="71:9" pos:end="71:71"><call pos:start="71:9" pos:end="71:71"><name pos:start="71:9" pos:end="71:14">av_log</name><argument_list pos:start="71:15" pos:end="71:71">(<argument pos:start="71:16" pos:end="71:20"><expr pos:start="71:16" pos:end="71:20"><name pos:start="71:16" pos:end="71:20">avctx</name></expr></argument>, <argument pos:start="71:23" pos:end="71:34"><expr pos:start="71:23" pos:end="71:34"><name pos:start="71:23" pos:end="71:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="71:37" pos:end="71:70"><expr pos:start="71:37" pos:end="71:70"><literal type="string" pos:start="71:37" pos:end="71:70">"broken stream, invalid padding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="73:9" pos:end="73:18">return <expr pos:start="73:16" pos:end="73:17"><operator pos:start="73:16" pos:end="73:16">-</operator><literal type="number" pos:start="73:17" pos:end="73:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="79:5" pos:end="79:31">/* sample or frame count */</comment>

    <if_stmt pos:start="81:5" pos:end="87:5"><if pos:start="81:5" pos:end="87:5">if <condition pos:start="81:8" pos:end="81:25">(<expr pos:start="81:9" pos:end="81:24"><call pos:start="81:9" pos:end="81:20"><name pos:start="81:9" pos:end="81:16">get_utf8</name><argument_list pos:start="81:17" pos:end="81:20">(<argument pos:start="81:18" pos:end="81:19"><expr pos:start="81:18" pos:end="81:19"><name pos:start="81:18" pos:end="81:19">gb</name></expr></argument>)</argument_list></call> <operator pos:start="81:22" pos:end="81:22">&lt;</operator> <literal type="number" pos:start="81:24" pos:end="81:24">0</literal></expr>)</condition> <block pos:start="81:27" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:18">

        <expr_stmt pos:start="83:9" pos:end="83:53"><expr pos:start="83:9" pos:end="83:52"><call pos:start="83:9" pos:end="83:52"><name pos:start="83:9" pos:end="83:14">av_log</name><argument_list pos:start="83:15" pos:end="83:52">(<argument pos:start="83:16" pos:end="83:20"><expr pos:start="83:16" pos:end="83:20"><name pos:start="83:16" pos:end="83:20">avctx</name></expr></argument>, <argument pos:start="83:23" pos:end="83:34"><expr pos:start="83:23" pos:end="83:34"><name pos:start="83:23" pos:end="83:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="83:37" pos:end="83:51"><expr pos:start="83:37" pos:end="83:51"><literal type="string" pos:start="83:37" pos:end="83:51">"utf8 fscked\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="85:9" pos:end="85:18">return <expr pos:start="85:16" pos:end="85:17"><operator pos:start="85:16" pos:end="85:16">-</operator><literal type="number" pos:start="85:17" pos:end="85:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:19">/* blocksize */</comment>

    <if_stmt pos:start="93:5" pos:end="111:5"><if pos:start="93:5" pos:end="99:5">if <condition pos:start="93:8" pos:end="93:21">(<expr pos:start="93:9" pos:end="93:20"><name pos:start="93:9" pos:end="93:15">bs_code</name> <operator pos:start="93:17" pos:end="93:18">==</operator> <literal type="number" pos:start="93:20" pos:end="93:20">0</literal></expr>)</condition> <block pos:start="93:23" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:18">

        <expr_stmt pos:start="95:9" pos:end="95:68"><expr pos:start="95:9" pos:end="95:67"><call pos:start="95:9" pos:end="95:67"><name pos:start="95:9" pos:end="95:14">av_log</name><argument_list pos:start="95:15" pos:end="95:67">(<argument pos:start="95:16" pos:end="95:20"><expr pos:start="95:16" pos:end="95:20"><name pos:start="95:16" pos:end="95:20">avctx</name></expr></argument>, <argument pos:start="95:23" pos:end="95:34"><expr pos:start="95:23" pos:end="95:34"><name pos:start="95:23" pos:end="95:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="95:37" pos:end="95:66"><expr pos:start="95:37" pos:end="95:66"><literal type="string" pos:start="95:37" pos:end="95:66">"reserved blocksize code: 0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="97:9" pos:end="97:18">return <expr pos:start="97:16" pos:end="97:17"><operator pos:start="97:16" pos:end="97:16">-</operator><literal type="number" pos:start="97:17" pos:end="97:17">1</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="99:7" pos:end="103:5">else if <condition pos:start="99:15" pos:end="99:28">(<expr pos:start="99:16" pos:end="99:27"><name pos:start="99:16" pos:end="99:22">bs_code</name> <operator pos:start="99:24" pos:end="99:25">==</operator> <literal type="number" pos:start="99:27" pos:end="99:27">6</literal></expr>)</condition> <block pos:start="99:30" pos:end="103:5">{<block_content pos:start="101:9" pos:end="101:44">

        <expr_stmt pos:start="101:9" pos:end="101:44"><expr pos:start="101:9" pos:end="101:43"><name pos:start="101:9" pos:end="101:21"><name pos:start="101:9" pos:end="101:10">fi</name><operator pos:start="101:11" pos:end="101:12">-&gt;</operator><name pos:start="101:13" pos:end="101:21">blocksize</name></name> <operator pos:start="101:23" pos:end="101:23">=</operator> <call pos:start="101:25" pos:end="101:39"><name pos:start="101:25" pos:end="101:32">get_bits</name><argument_list pos:start="101:33" pos:end="101:39">(<argument pos:start="101:34" pos:end="101:35"><expr pos:start="101:34" pos:end="101:35"><name pos:start="101:34" pos:end="101:35">gb</name></expr></argument>, <argument pos:start="101:38" pos:end="101:38"><expr pos:start="101:38" pos:end="101:38"><literal type="number" pos:start="101:38" pos:end="101:38">8</literal></expr></argument>)</argument_list></call> <operator pos:start="101:41" pos:end="101:41">+</operator> <literal type="number" pos:start="101:43" pos:end="101:43">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="103:7" pos:end="107:5">else if <condition pos:start="103:15" pos:end="103:28">(<expr pos:start="103:16" pos:end="103:27"><name pos:start="103:16" pos:end="103:22">bs_code</name> <operator pos:start="103:24" pos:end="103:25">==</operator> <literal type="number" pos:start="103:27" pos:end="103:27">7</literal></expr>)</condition> <block pos:start="103:30" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:45">

        <expr_stmt pos:start="105:9" pos:end="105:45"><expr pos:start="105:9" pos:end="105:44"><name pos:start="105:9" pos:end="105:21"><name pos:start="105:9" pos:end="105:10">fi</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:21">blocksize</name></name> <operator pos:start="105:23" pos:end="105:23">=</operator> <call pos:start="105:25" pos:end="105:40"><name pos:start="105:25" pos:end="105:32">get_bits</name><argument_list pos:start="105:33" pos:end="105:40">(<argument pos:start="105:34" pos:end="105:35"><expr pos:start="105:34" pos:end="105:35"><name pos:start="105:34" pos:end="105:35">gb</name></expr></argument>, <argument pos:start="105:38" pos:end="105:39"><expr pos:start="105:38" pos:end="105:39"><literal type="number" pos:start="105:38" pos:end="105:39">16</literal></expr></argument>)</argument_list></call> <operator pos:start="105:42" pos:end="105:42">+</operator> <literal type="number" pos:start="105:44" pos:end="105:44">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="107:7" pos:end="111:5">else <block pos:start="107:12" pos:end="111:5">{<block_content pos:start="109:9" pos:end="109:57">

        <expr_stmt pos:start="109:9" pos:end="109:57"><expr pos:start="109:9" pos:end="109:56"><name pos:start="109:9" pos:end="109:21"><name pos:start="109:9" pos:end="109:10">fi</name><operator pos:start="109:11" pos:end="109:12">-&gt;</operator><name pos:start="109:13" pos:end="109:21">blocksize</name></name> <operator pos:start="109:23" pos:end="109:23">=</operator> <name pos:start="109:25" pos:end="109:56"><name pos:start="109:25" pos:end="109:47">ff_flac_blocksize_table</name><index pos:start="109:48" pos:end="109:56">[<expr pos:start="109:49" pos:end="109:55"><name pos:start="109:49" pos:end="109:55">bs_code</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="115:5" pos:end="115:21">/* sample rate */</comment>

    <if_stmt pos:start="117:5" pos:end="141:5"><if pos:start="117:5" pos:end="121:5">if <condition pos:start="117:8" pos:end="117:21">(<expr pos:start="117:9" pos:end="117:20"><name pos:start="117:9" pos:end="117:15">sr_code</name> <operator pos:start="117:17" pos:end="117:17">&lt;</operator> <literal type="number" pos:start="117:19" pos:end="117:20">12</literal></expr>)</condition> <block pos:start="117:23" pos:end="121:5">{<block_content pos:start="119:9" pos:end="119:60">

        <expr_stmt pos:start="119:9" pos:end="119:60"><expr pos:start="119:9" pos:end="119:59"><name pos:start="119:9" pos:end="119:22"><name pos:start="119:9" pos:end="119:10">fi</name><operator pos:start="119:11" pos:end="119:12">-&gt;</operator><name pos:start="119:13" pos:end="119:22">samplerate</name></name> <operator pos:start="119:24" pos:end="119:24">=</operator> <name pos:start="119:26" pos:end="119:59"><name pos:start="119:26" pos:end="119:50">ff_flac_sample_rate_table</name><index pos:start="119:51" pos:end="119:59">[<expr pos:start="119:52" pos:end="119:58"><name pos:start="119:52" pos:end="119:58">sr_code</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="121:7" pos:end="125:5">else if <condition pos:start="121:15" pos:end="121:29">(<expr pos:start="121:16" pos:end="121:28"><name pos:start="121:16" pos:end="121:22">sr_code</name> <operator pos:start="121:24" pos:end="121:25">==</operator> <literal type="number" pos:start="121:27" pos:end="121:28">12</literal></expr>)</condition> <block pos:start="121:31" pos:end="125:5">{<block_content pos:start="123:9" pos:end="123:48">

        <expr_stmt pos:start="123:9" pos:end="123:48"><expr pos:start="123:9" pos:end="123:47"><name pos:start="123:9" pos:end="123:22"><name pos:start="123:9" pos:end="123:10">fi</name><operator pos:start="123:11" pos:end="123:12">-&gt;</operator><name pos:start="123:13" pos:end="123:22">samplerate</name></name> <operator pos:start="123:24" pos:end="123:24">=</operator> <call pos:start="123:26" pos:end="123:40"><name pos:start="123:26" pos:end="123:33">get_bits</name><argument_list pos:start="123:34" pos:end="123:40">(<argument pos:start="123:35" pos:end="123:36"><expr pos:start="123:35" pos:end="123:36"><name pos:start="123:35" pos:end="123:36">gb</name></expr></argument>, <argument pos:start="123:39" pos:end="123:39"><expr pos:start="123:39" pos:end="123:39"><literal type="number" pos:start="123:39" pos:end="123:39">8</literal></expr></argument>)</argument_list></call> <operator pos:start="123:42" pos:end="123:42">*</operator> <literal type="number" pos:start="123:44" pos:end="123:47">1000</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="125:7" pos:end="129:5">else if <condition pos:start="125:15" pos:end="125:29">(<expr pos:start="125:16" pos:end="125:28"><name pos:start="125:16" pos:end="125:22">sr_code</name> <operator pos:start="125:24" pos:end="125:25">==</operator> <literal type="number" pos:start="125:27" pos:end="125:28">13</literal></expr>)</condition> <block pos:start="125:31" pos:end="129:5">{<block_content pos:start="127:9" pos:end="127:42">

        <expr_stmt pos:start="127:9" pos:end="127:42"><expr pos:start="127:9" pos:end="127:41"><name pos:start="127:9" pos:end="127:22"><name pos:start="127:9" pos:end="127:10">fi</name><operator pos:start="127:11" pos:end="127:12">-&gt;</operator><name pos:start="127:13" pos:end="127:22">samplerate</name></name> <operator pos:start="127:24" pos:end="127:24">=</operator> <call pos:start="127:26" pos:end="127:41"><name pos:start="127:26" pos:end="127:33">get_bits</name><argument_list pos:start="127:34" pos:end="127:41">(<argument pos:start="127:35" pos:end="127:36"><expr pos:start="127:35" pos:end="127:36"><name pos:start="127:35" pos:end="127:36">gb</name></expr></argument>, <argument pos:start="127:39" pos:end="127:40"><expr pos:start="127:39" pos:end="127:40"><literal type="number" pos:start="127:39" pos:end="127:40">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="129:7" pos:end="133:5">else if <condition pos:start="129:15" pos:end="129:29">(<expr pos:start="129:16" pos:end="129:28"><name pos:start="129:16" pos:end="129:22">sr_code</name> <operator pos:start="129:24" pos:end="129:25">==</operator> <literal type="number" pos:start="129:27" pos:end="129:28">14</literal></expr>)</condition> <block pos:start="129:31" pos:end="133:5">{<block_content pos:start="131:9" pos:end="131:47">

        <expr_stmt pos:start="131:9" pos:end="131:47"><expr pos:start="131:9" pos:end="131:46"><name pos:start="131:9" pos:end="131:22"><name pos:start="131:9" pos:end="131:10">fi</name><operator pos:start="131:11" pos:end="131:12">-&gt;</operator><name pos:start="131:13" pos:end="131:22">samplerate</name></name> <operator pos:start="131:24" pos:end="131:24">=</operator> <call pos:start="131:26" pos:end="131:41"><name pos:start="131:26" pos:end="131:33">get_bits</name><argument_list pos:start="131:34" pos:end="131:41">(<argument pos:start="131:35" pos:end="131:36"><expr pos:start="131:35" pos:end="131:36"><name pos:start="131:35" pos:end="131:36">gb</name></expr></argument>, <argument pos:start="131:39" pos:end="131:40"><expr pos:start="131:39" pos:end="131:40"><literal type="number" pos:start="131:39" pos:end="131:40">16</literal></expr></argument>)</argument_list></call> <operator pos:start="131:43" pos:end="131:43">*</operator> <literal type="number" pos:start="131:45" pos:end="131:46">10</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="133:7" pos:end="141:5">else <block pos:start="133:12" pos:end="141:5">{<block_content pos:start="135:9" pos:end="139:18">

        <expr_stmt pos:start="135:9" pos:end="137:24"><expr pos:start="135:9" pos:end="137:23"><call pos:start="135:9" pos:end="137:23"><name pos:start="135:9" pos:end="135:14">av_log</name><argument_list pos:start="135:15" pos:end="137:23">(<argument pos:start="135:16" pos:end="135:20"><expr pos:start="135:16" pos:end="135:20"><name pos:start="135:16" pos:end="135:20">avctx</name></expr></argument>, <argument pos:start="135:23" pos:end="135:34"><expr pos:start="135:23" pos:end="135:34"><name pos:start="135:23" pos:end="135:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="135:37" pos:end="135:67"><expr pos:start="135:37" pos:end="135:67"><literal type="string" pos:start="135:37" pos:end="135:67">"illegal sample rate code %d\n"</literal></expr></argument>,

               <argument pos:start="137:16" pos:end="137:22"><expr pos:start="137:16" pos:end="137:22"><name pos:start="137:16" pos:end="137:22">sr_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="139:9" pos:end="139:18">return <expr pos:start="139:16" pos:end="139:17"><operator pos:start="139:16" pos:end="139:16">-</operator><literal type="number" pos:start="139:17" pos:end="139:17">1</literal></expr>;</return>

    </block_content>}</block></else></if_stmt>



    <comment type="block" pos:start="145:5" pos:end="145:28">/* header CRC-8 check */</comment>

    <expr_stmt pos:start="147:5" pos:end="147:21"><expr pos:start="147:5" pos:end="147:20"><call pos:start="147:5" pos:end="147:20"><name pos:start="147:5" pos:end="147:13">skip_bits</name><argument_list pos:start="147:14" pos:end="147:20">(<argument pos:start="147:15" pos:end="147:16"><expr pos:start="147:15" pos:end="147:16"><name pos:start="147:15" pos:end="147:16">gb</name></expr></argument>, <argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="149:5" pos:end="157:5"><if pos:start="149:5" pos:end="157:5">if <condition pos:start="149:8" pos:end="151:37">(<expr pos:start="149:9" pos:end="151:36"><call pos:start="149:9" pos:end="151:36"><name pos:start="149:9" pos:end="149:14">av_crc</name><argument_list pos:start="149:15" pos:end="151:36">(<argument pos:start="149:16" pos:end="149:45"><expr pos:start="149:16" pos:end="149:45"><call pos:start="149:16" pos:end="149:45"><name pos:start="149:16" pos:end="149:31">av_crc_get_table</name><argument_list pos:start="149:32" pos:end="149:45">(<argument pos:start="149:33" pos:end="149:44"><expr pos:start="149:33" pos:end="149:44"><name pos:start="149:33" pos:end="149:44">AV_CRC_8_ATM</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="149:48" pos:end="149:48"><expr pos:start="149:48" pos:end="149:48"><literal type="number" pos:start="149:48" pos:end="149:48">0</literal></expr></argument>, <argument pos:start="149:51" pos:end="149:60"><expr pos:start="149:51" pos:end="149:60"><name pos:start="149:51" pos:end="149:60"><name pos:start="149:51" pos:end="149:52">gb</name><operator pos:start="149:53" pos:end="149:54">-&gt;</operator><name pos:start="149:55" pos:end="149:60">buffer</name></name></expr></argument>,

               <argument pos:start="151:16" pos:end="151:35"><expr pos:start="151:16" pos:end="151:35"><call pos:start="151:16" pos:end="151:33"><name pos:start="151:16" pos:end="151:29">get_bits_count</name><argument_list pos:start="151:30" pos:end="151:33">(<argument pos:start="151:31" pos:end="151:32"><expr pos:start="151:31" pos:end="151:32"><name pos:start="151:31" pos:end="151:32">gb</name></expr></argument>)</argument_list></call><operator pos:start="151:34" pos:end="151:34">/</operator><literal type="number" pos:start="151:35" pos:end="151:35">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="151:39" pos:end="157:5">{<block_content pos:start="153:9" pos:end="155:18">

        <expr_stmt pos:start="153:9" pos:end="153:61"><expr pos:start="153:9" pos:end="153:60"><call pos:start="153:9" pos:end="153:60"><name pos:start="153:9" pos:end="153:14">av_log</name><argument_list pos:start="153:15" pos:end="153:60">(<argument pos:start="153:16" pos:end="153:20"><expr pos:start="153:16" pos:end="153:20"><name pos:start="153:16" pos:end="153:20">avctx</name></expr></argument>, <argument pos:start="153:23" pos:end="153:34"><expr pos:start="153:23" pos:end="153:34"><name pos:start="153:23" pos:end="153:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="153:37" pos:end="153:59"><expr pos:start="153:37" pos:end="153:59"><literal type="string" pos:start="153:37" pos:end="153:59">"header crc mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="155:9" pos:end="155:18">return <expr pos:start="155:16" pos:end="155:17"><operator pos:start="155:16" pos:end="155:16">-</operator><literal type="number" pos:start="155:17" pos:end="155:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="161:5" pos:end="161:13">return <expr pos:start="161:12" pos:end="161:12"><literal type="number" pos:start="161:12" pos:end="161:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
