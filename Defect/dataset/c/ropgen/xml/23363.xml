<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/23363.c" pos:tabs="8"><function pos:start="1:1" pos:end="397:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">pc_init1</name><parameter_list pos:start="1:21" pos:end="5:42">(<parameter pos:start="1:22" pos:end="1:42"><decl pos:start="1:22" pos:end="1:42"><type pos:start="1:22" pos:end="1:42"><name pos:start="1:22" pos:end="1:33">MachineState</name> <modifier pos:start="1:35" pos:end="1:35">*</modifier></type><name pos:start="1:36" pos:end="1:42">machine</name></decl></parameter>,

                     <parameter pos:start="3:22" pos:end="3:36"><decl pos:start="3:22" pos:end="3:36"><type pos:start="3:22" pos:end="3:36"><name pos:start="3:22" pos:end="3:24">int</name></type> <name pos:start="3:26" pos:end="3:36">pci_enabled</name></decl></parameter>,

                     <parameter pos:start="5:22" pos:end="5:41"><decl pos:start="5:22" pos:end="5:41"><type pos:start="5:22" pos:end="5:41"><name pos:start="5:22" pos:end="5:24">int</name></type> <name pos:start="5:26" pos:end="5:41">kvmclock_enabled</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="397:1">{<block_content pos:start="9:5" pos:end="395:5">

    <decl_stmt pos:start="9:5" pos:end="9:53"><decl pos:start="9:5" pos:end="9:52"><type pos:start="9:5" pos:end="9:20"><name pos:start="9:5" pos:end="9:18">PCMachineState</name> <modifier pos:start="9:20" pos:end="9:20">*</modifier></type><name pos:start="9:21" pos:end="9:30">pc_machine</name> <init pos:start="9:32" pos:end="9:52">= <expr pos:start="9:34" pos:end="9:52"><call pos:start="9:34" pos:end="9:52"><name pos:start="9:34" pos:end="9:43">PC_MACHINE</name><argument_list pos:start="9:44" pos:end="9:52">(<argument pos:start="9:45" pos:end="9:51"><expr pos:start="9:45" pos:end="9:51"><name pos:start="9:45" pos:end="9:51">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:54"><decl pos:start="11:5" pos:end="11:53"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">MemoryRegion</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:31">system_memory</name> <init pos:start="11:33" pos:end="11:53">= <expr pos:start="11:35" pos:end="11:53"><call pos:start="11:35" pos:end="11:53"><name pos:start="11:35" pos:end="11:51">get_system_memory</name><argument_list pos:start="11:52" pos:end="11:53">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:46"><decl pos:start="13:5" pos:end="13:45"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:27">system_io</name> <init pos:start="13:29" pos:end="13:45">= <expr pos:start="13:31" pos:end="13:45"><call pos:start="13:31" pos:end="13:45"><name pos:start="13:31" pos:end="13:43">get_system_io</name><argument_list pos:start="13:44" pos:end="13:45">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:52"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:14">ram_addr_t</name></type> <name pos:start="17:16" pos:end="17:32">below_4g_mem_size</name></decl>, <decl pos:start="17:35" pos:end="17:51"><type ref="prev" pos:start="17:5" pos:end="17:14"/><name pos:start="17:35" pos:end="17:51">above_4g_mem_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:20"><decl pos:start="19:5" pos:end="19:19"><type pos:start="19:5" pos:end="19:12"><name pos:start="19:5" pos:end="19:10">PCIBus</name> <modifier pos:start="19:12" pos:end="19:12">*</modifier></type><name pos:start="19:13" pos:end="19:19">pci_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:20"><decl pos:start="21:5" pos:end="21:19"><type pos:start="21:5" pos:end="21:12"><name pos:start="21:5" pos:end="21:10">ISABus</name> <modifier pos:start="21:12" pos:end="21:12">*</modifier></type><name pos:start="21:13" pos:end="21:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:20"><name pos:start="23:5" pos:end="23:18">PCII440FXState</name> <modifier pos:start="23:20" pos:end="23:20">*</modifier></type><name pos:start="23:21" pos:end="23:32">i440fx_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:25"><decl pos:start="25:5" pos:end="25:24"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">piix3_devfn</name> <init pos:start="25:21" pos:end="25:24">= <expr pos:start="25:23" pos:end="25:24"><operator pos:start="25:23" pos:end="25:23">-</operator><literal type="number" pos:start="25:24" pos:end="25:24">1</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:22"><decl pos:start="27:5" pos:end="27:21"><type pos:start="27:5" pos:end="27:14"><name pos:start="27:5" pos:end="27:12">qemu_irq</name> <modifier pos:start="27:14" pos:end="27:14">*</modifier></type><name pos:start="27:15" pos:end="27:21">cpu_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:12">qemu_irq</name> <modifier pos:start="29:14" pos:end="29:14">*</modifier></type><name pos:start="29:15" pos:end="29:17">gsi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:20"><decl pos:start="31:5" pos:end="31:19"><type pos:start="31:5" pos:end="31:14"><name pos:start="31:5" pos:end="31:12">qemu_irq</name> <modifier pos:start="31:14" pos:end="31:14">*</modifier></type><name pos:start="31:15" pos:end="31:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:14"><name pos:start="33:5" pos:end="33:12">qemu_irq</name> <modifier pos:start="33:14" pos:end="33:14">*</modifier></type><name pos:start="33:15" pos:end="33:21">smi_irq</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:24"><decl pos:start="35:5" pos:end="35:23"><type pos:start="35:5" pos:end="35:14"><name pos:start="35:5" pos:end="35:12">GSIState</name> <modifier pos:start="35:14" pos:end="35:14">*</modifier></type><name pos:start="35:15" pos:end="35:23">gsi_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:46"><decl pos:start="37:5" pos:end="37:45"><type pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:13">DriveInfo</name> <modifier pos:start="37:15" pos:end="37:15">*</modifier></type><name pos:start="37:16" pos:end="37:45"><name pos:start="37:16" pos:end="37:17">hd</name><index pos:start="37:18" pos:end="37:45">[<expr pos:start="37:19" pos:end="37:44"><name pos:start="37:19" pos:end="37:29">MAX_IDE_BUS</name> <operator pos:start="37:31" pos:end="37:31">*</operator> <name pos:start="37:33" pos:end="37:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:34"><decl pos:start="39:5" pos:end="39:33"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">BusState</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:33"><name pos:start="39:15" pos:end="39:20">idebus</name><index pos:start="39:21" pos:end="39:33">[<expr pos:start="39:22" pos:end="39:32"><name pos:start="39:22" pos:end="39:32">MAX_IDE_BUS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:25"><decl pos:start="41:5" pos:end="41:24"><type pos:start="41:5" pos:end="41:15"><name pos:start="41:5" pos:end="41:13">ISADevice</name> <modifier pos:start="41:15" pos:end="41:15">*</modifier></type><name pos:start="41:16" pos:end="41:24">rtc_state</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:22"><decl pos:start="43:5" pos:end="43:21"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">ISADevice</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:21">floppy</name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:29"><decl pos:start="45:5" pos:end="45:28"><type pos:start="45:5" pos:end="45:18"><name pos:start="45:5" pos:end="45:16">MemoryRegion</name> <modifier pos:start="45:18" pos:end="45:18">*</modifier></type><name pos:start="45:19" pos:end="45:28">ram_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:29"><decl pos:start="47:5" pos:end="47:28"><type pos:start="47:5" pos:end="47:18"><name pos:start="47:5" pos:end="47:16">MemoryRegion</name> <modifier pos:start="47:18" pos:end="47:18">*</modifier></type><name pos:start="47:19" pos:end="47:28">pci_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="49:5" pos:end="49:29"><decl pos:start="49:5" pos:end="49:28"><type pos:start="49:5" pos:end="49:18"><name pos:start="49:5" pos:end="49:16">MemoryRegion</name> <modifier pos:start="49:18" pos:end="49:18">*</modifier></type><name pos:start="49:19" pos:end="49:28">rom_memory</name></decl>;</decl_stmt>

    <decl_stmt pos:start="51:5" pos:end="51:28"><decl pos:start="51:5" pos:end="51:27"><type pos:start="51:5" pos:end="51:17"><name pos:start="51:5" pos:end="51:15">DeviceState</name> <modifier pos:start="51:17" pos:end="51:17">*</modifier></type><name pos:start="51:18" pos:end="51:27">icc_bridge</name></decl>;</decl_stmt>

    <decl_stmt pos:start="53:5" pos:end="53:30"><decl pos:start="53:5" pos:end="53:29"><type pos:start="53:5" pos:end="53:16"><name pos:start="53:5" pos:end="53:14">FWCfgState</name> <modifier pos:start="53:16" pos:end="53:16">*</modifier></type><name pos:start="53:17" pos:end="53:22">fw_cfg</name> <init pos:start="53:24" pos:end="53:29">= <expr pos:start="53:26" pos:end="53:29"><name pos:start="53:26" pos:end="53:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="55:5" pos:end="55:28"><decl pos:start="55:5" pos:end="55:27"><type pos:start="55:5" pos:end="55:17"><name pos:start="55:5" pos:end="55:15">PcGuestInfo</name> <modifier pos:start="55:17" pos:end="55:17">*</modifier></type><name pos:start="55:18" pos:end="55:27">guest_info</name></decl>;</decl_stmt>



    <comment type="block" pos:start="59:5" pos:end="71:7">/* Check whether RAM fits below 4G (leaving 1/2 GByte for IO memory).

     * If it doesn't, we need to split it in chunks below and above 4G.

     * In any case, try to make sure that guest addresses aligned at

     * 1G boundaries get mapped to host addresses aligned at 1G boundaries.

     * For old machine types, use whatever split we used historically to avoid

     * breaking migration.

     */</comment>

    <if_stmt pos:start="73:5" pos:end="87:5"><if pos:start="73:5" pos:end="81:5">if <condition pos:start="73:8" pos:end="73:40">(<expr pos:start="73:9" pos:end="73:39"><name pos:start="73:9" pos:end="73:25"><name pos:start="73:9" pos:end="73:15">machine</name><operator pos:start="73:16" pos:end="73:17">-&gt;</operator><name pos:start="73:18" pos:end="73:25">ram_size</name></name> <operator pos:start="73:27" pos:end="73:28">&gt;=</operator> <literal type="number" pos:start="73:30" pos:end="73:39">0xe0000000</literal></expr>)</condition> <block pos:start="73:42" pos:end="81:5">{<block_content pos:start="75:9" pos:end="79:35">

        <decl_stmt pos:start="75:9" pos:end="75:69"><decl pos:start="75:9" pos:end="75:68"><type pos:start="75:9" pos:end="75:18"><name pos:start="75:9" pos:end="75:18">ram_addr_t</name></type> <name pos:start="75:20" pos:end="75:25">lowmem</name> <init pos:start="75:27" pos:end="75:68">= <expr pos:start="75:29" pos:end="75:68"><ternary pos:start="75:29" pos:end="75:68"><condition pos:start="75:29" pos:end="75:44"><expr pos:start="75:29" pos:end="75:42"><name pos:start="75:29" pos:end="75:42">gigabyte_align</name></expr> ?</condition><then pos:start="75:46" pos:end="75:55"> <expr pos:start="75:46" pos:end="75:55"><literal type="number" pos:start="75:46" pos:end="75:55">0xc0000000</literal></expr> </then><else pos:start="75:57" pos:end="75:68">: <expr pos:start="75:59" pos:end="75:68"><literal type="number" pos:start="75:59" pos:end="75:68">0xe0000000</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="77:9" pos:end="77:55"><expr pos:start="77:9" pos:end="77:54"><name pos:start="77:9" pos:end="77:25">above_4g_mem_size</name> <operator pos:start="77:27" pos:end="77:27">=</operator> <name pos:start="77:29" pos:end="77:45"><name pos:start="77:29" pos:end="77:35">machine</name><operator pos:start="77:36" pos:end="77:37">-&gt;</operator><name pos:start="77:38" pos:end="77:45">ram_size</name></name> <operator pos:start="77:47" pos:end="77:47">-</operator> <name pos:start="77:49" pos:end="77:54">lowmem</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:35"><expr pos:start="79:9" pos:end="79:34"><name pos:start="79:9" pos:end="79:25">below_4g_mem_size</name> <operator pos:start="79:27" pos:end="79:27">=</operator> <name pos:start="79:29" pos:end="79:34">lowmem</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="81:7" pos:end="87:5">else <block pos:start="81:12" pos:end="87:5">{<block_content pos:start="83:9" pos:end="85:46">

        <expr_stmt pos:start="83:9" pos:end="83:30"><expr pos:start="83:9" pos:end="83:29"><name pos:start="83:9" pos:end="83:25">above_4g_mem_size</name> <operator pos:start="83:27" pos:end="83:27">=</operator> <literal type="number" pos:start="83:29" pos:end="83:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="85:9" pos:end="85:46"><expr pos:start="85:9" pos:end="85:45"><name pos:start="85:9" pos:end="85:25">below_4g_mem_size</name> <operator pos:start="85:27" pos:end="85:27">=</operator> <name pos:start="85:29" pos:end="85:45"><name pos:start="85:29" pos:end="85:35">machine</name><operator pos:start="85:36" pos:end="85:37">-&gt;</operator><name pos:start="85:38" pos:end="85:45">ram_size</name></name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="91:5" pos:end="99:5"><if pos:start="91:5" pos:end="99:5">if <condition pos:start="91:8" pos:end="93:56">(<expr pos:start="91:9" pos:end="93:55"><call pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:19">xen_enabled</name><argument_list pos:start="91:20" pos:end="91:21">()</argument_list></call> <operator pos:start="91:23" pos:end="91:24">&amp;&amp;</operator> <call pos:start="91:26" pos:end="93:50"><name pos:start="91:26" pos:end="91:37">xen_hvm_init</name><argument_list pos:start="91:38" pos:end="93:50">(<argument pos:start="91:39" pos:end="91:56"><expr pos:start="91:39" pos:end="91:56"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:56">below_4g_mem_size</name></expr></argument>, <argument pos:start="91:59" pos:end="91:76"><expr pos:start="91:59" pos:end="91:76"><operator pos:start="91:59" pos:end="91:59">&amp;</operator><name pos:start="91:60" pos:end="91:76">above_4g_mem_size</name></expr></argument>,

                                      <argument pos:start="93:39" pos:end="93:49"><expr pos:start="93:39" pos:end="93:49"><operator pos:start="93:39" pos:end="93:39">&amp;</operator><name pos:start="93:40" pos:end="93:49">ram_memory</name></expr></argument>)</argument_list></call> <operator pos:start="93:52" pos:end="93:53">!=</operator> <literal type="number" pos:start="93:55" pos:end="93:55">0</literal></expr>)</condition> <block pos:start="93:58" pos:end="99:5">{<block_content pos:start="95:9" pos:end="97:16">

        <expr_stmt pos:start="95:9" pos:end="95:80"><expr pos:start="95:9" pos:end="95:79"><call pos:start="95:9" pos:end="95:79"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="95:79">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>, <argument pos:start="95:25" pos:end="95:78"><expr pos:start="95:25" pos:end="95:78"><literal type="string" pos:start="95:25" pos:end="95:78">"xen hardware virtual machine initialisation failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:16"><expr pos:start="97:9" pos:end="97:15"><call pos:start="97:9" pos:end="97:15"><name pos:start="97:9" pos:end="97:12">exit</name><argument_list pos:start="97:13" pos:end="97:15">(<argument pos:start="97:14" pos:end="97:14"><expr pos:start="97:14" pos:end="97:14"><literal type="number" pos:start="97:14" pos:end="97:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="103:5" pos:end="103:52"><expr pos:start="103:5" pos:end="103:51"><name pos:start="103:5" pos:end="103:14">icc_bridge</name> <operator pos:start="103:16" pos:end="103:16">=</operator> <call pos:start="103:18" pos:end="103:51"><name pos:start="103:18" pos:end="103:28">qdev_create</name><argument_list pos:start="103:29" pos:end="103:51">(<argument pos:start="103:30" pos:end="103:33"><expr pos:start="103:30" pos:end="103:33"><name pos:start="103:30" pos:end="103:33">NULL</name></expr></argument>, <argument pos:start="103:36" pos:end="103:50"><expr pos:start="103:36" pos:end="103:50"><name pos:start="103:36" pos:end="103:50">TYPE_ICC_BRIDGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="107:56"><expr pos:start="105:5" pos:end="107:55"><call pos:start="105:5" pos:end="107:55"><name pos:start="105:5" pos:end="105:29">object_property_add_child</name><argument_list pos:start="105:30" pos:end="107:55">(<argument pos:start="105:31" pos:end="105:48"><expr pos:start="105:31" pos:end="105:48"><call pos:start="105:31" pos:end="105:48"><name pos:start="105:31" pos:end="105:46">qdev_get_machine</name><argument_list pos:start="105:47" pos:end="105:48">()</argument_list></call></expr></argument>, <argument pos:start="105:51" pos:end="105:62"><expr pos:start="105:51" pos:end="105:62"><literal type="string" pos:start="105:51" pos:end="105:62">"icc-bridge"</literal></expr></argument>,

                              <argument pos:start="107:31" pos:end="107:48"><expr pos:start="107:31" pos:end="107:48"><call pos:start="107:31" pos:end="107:48"><name pos:start="107:31" pos:end="107:36">OBJECT</name><argument_list pos:start="107:37" pos:end="107:48">(<argument pos:start="107:38" pos:end="107:47"><expr pos:start="107:38" pos:end="107:47"><name pos:start="107:38" pos:end="107:47">icc_bridge</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="107:51" pos:end="107:54"><expr pos:start="107:51" pos:end="107:54"><name pos:start="107:51" pos:end="107:54">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:49"><expr pos:start="111:5" pos:end="111:48"><call pos:start="111:5" pos:end="111:48"><name pos:start="111:5" pos:end="111:16">pc_cpus_init</name><argument_list pos:start="111:17" pos:end="111:48">(<argument pos:start="111:18" pos:end="111:35"><expr pos:start="111:18" pos:end="111:35"><name pos:start="111:18" pos:end="111:35"><name pos:start="111:18" pos:end="111:24">machine</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:35">cpu_model</name></name></expr></argument>, <argument pos:start="111:38" pos:end="111:47"><expr pos:start="111:38" pos:end="111:47"><name pos:start="111:38" pos:end="111:47">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="115:5" pos:end="119:5"><if pos:start="115:5" pos:end="119:5">if <condition pos:start="115:8" pos:end="115:42">(<expr pos:start="115:9" pos:end="115:41"><call pos:start="115:9" pos:end="115:21"><name pos:start="115:9" pos:end="115:19">kvm_enabled</name><argument_list pos:start="115:20" pos:end="115:21">()</argument_list></call> <operator pos:start="115:23" pos:end="115:24">&amp;&amp;</operator> <name pos:start="115:26" pos:end="115:41">kvmclock_enabled</name></expr>)</condition> <block pos:start="115:44" pos:end="119:5">{<block_content pos:start="117:9" pos:end="117:26">

        <expr_stmt pos:start="117:9" pos:end="117:26"><expr pos:start="117:9" pos:end="117:25"><call pos:start="117:9" pos:end="117:25"><name pos:start="117:9" pos:end="117:23">kvmclock_create</name><argument_list pos:start="117:24" pos:end="117:25">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="123:5" pos:end="137:5"><if pos:start="123:5" pos:end="131:5">if <condition pos:start="123:8" pos:end="123:20">(<expr pos:start="123:9" pos:end="123:19"><name pos:start="123:9" pos:end="123:19">pci_enabled</name></expr>)</condition> <block pos:start="123:22" pos:end="131:5">{<block_content pos:start="125:9" pos:end="129:32">

        <expr_stmt pos:start="125:9" pos:end="125:44"><expr pos:start="125:9" pos:end="125:43"><name pos:start="125:9" pos:end="125:18">pci_memory</name> <operator pos:start="125:20" pos:end="125:20">=</operator> <call pos:start="125:22" pos:end="125:43"><name pos:start="125:22" pos:end="125:26">g_new</name><argument_list pos:start="125:27" pos:end="125:43">(<argument pos:start="125:28" pos:end="125:39"><expr pos:start="125:28" pos:end="125:39"><name pos:start="125:28" pos:end="125:39">MemoryRegion</name></expr></argument>, <argument pos:start="125:42" pos:end="125:42"><expr pos:start="125:42" pos:end="125:42"><literal type="number" pos:start="125:42" pos:end="125:42">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:64"><expr pos:start="127:9" pos:end="127:63"><call pos:start="127:9" pos:end="127:63"><name pos:start="127:9" pos:end="127:26">memory_region_init</name><argument_list pos:start="127:27" pos:end="127:63">(<argument pos:start="127:28" pos:end="127:37"><expr pos:start="127:28" pos:end="127:37"><name pos:start="127:28" pos:end="127:37">pci_memory</name></expr></argument>, <argument pos:start="127:40" pos:end="127:43"><expr pos:start="127:40" pos:end="127:43"><name pos:start="127:40" pos:end="127:43">NULL</name></expr></argument>, <argument pos:start="127:46" pos:end="127:50"><expr pos:start="127:46" pos:end="127:50"><literal type="string" pos:start="127:46" pos:end="127:50">"pci"</literal></expr></argument>, <argument pos:start="127:53" pos:end="127:62"><expr pos:start="127:53" pos:end="127:62"><name pos:start="127:53" pos:end="127:62">UINT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:32"><expr pos:start="129:9" pos:end="129:31"><name pos:start="129:9" pos:end="129:18">rom_memory</name> <operator pos:start="129:20" pos:end="129:20">=</operator> <name pos:start="129:22" pos:end="129:31">pci_memory</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="131:7" pos:end="137:5">else <block pos:start="131:12" pos:end="137:5">{<block_content pos:start="133:9" pos:end="135:35">

        <expr_stmt pos:start="133:9" pos:end="133:26"><expr pos:start="133:9" pos:end="133:25"><name pos:start="133:9" pos:end="133:18">pci_memory</name> <operator pos:start="133:20" pos:end="133:20">=</operator> <name pos:start="133:22" pos:end="133:25">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="135:9" pos:end="135:35"><expr pos:start="135:9" pos:end="135:34"><name pos:start="135:9" pos:end="135:18">rom_memory</name> <operator pos:start="135:20" pos:end="135:20">=</operator> <name pos:start="135:22" pos:end="135:34">system_memory</name></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="141:5" pos:end="141:74"><expr pos:start="141:5" pos:end="141:73"><name pos:start="141:5" pos:end="141:14">guest_info</name> <operator pos:start="141:16" pos:end="141:16">=</operator> <call pos:start="141:18" pos:end="141:73"><name pos:start="141:18" pos:end="141:35">pc_guest_info_init</name><argument_list pos:start="141:36" pos:end="141:73">(<argument pos:start="141:37" pos:end="141:53"><expr pos:start="141:37" pos:end="141:53"><name pos:start="141:37" pos:end="141:53">below_4g_mem_size</name></expr></argument>, <argument pos:start="141:56" pos:end="141:72"><expr pos:start="141:56" pos:end="141:72"><name pos:start="141:56" pos:end="141:72">above_4g_mem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="145:5" pos:end="145:48"><expr pos:start="145:5" pos:end="145:47"><name pos:start="145:5" pos:end="145:30"><name pos:start="145:5" pos:end="145:14">guest_info</name><operator pos:start="145:15" pos:end="145:16">-&gt;</operator><name pos:start="145:17" pos:end="145:30">has_acpi_build</name></name> <operator pos:start="145:32" pos:end="145:32">=</operator> <name pos:start="145:34" pos:end="145:47">has_acpi_build</name></expr>;</expr_stmt>



    <expr_stmt pos:start="149:5" pos:end="149:44"><expr pos:start="149:5" pos:end="149:43"><name pos:start="149:5" pos:end="149:28"><name pos:start="149:5" pos:end="149:14">guest_info</name><operator pos:start="149:15" pos:end="149:16">-&gt;</operator><name pos:start="149:17" pos:end="149:28">has_pci_info</name></name> <operator pos:start="149:30" pos:end="149:30">=</operator> <name pos:start="149:32" pos:end="149:43">has_pci_info</name></expr>;</expr_stmt>

    <expr_stmt pos:start="151:5" pos:end="151:44"><expr pos:start="151:5" pos:end="151:43"><name pos:start="151:5" pos:end="151:28"><name pos:start="151:5" pos:end="151:14">guest_info</name><operator pos:start="151:15" pos:end="151:16">-&gt;</operator><name pos:start="151:17" pos:end="151:28">isapc_ram_fw</name></name> <operator pos:start="151:30" pos:end="151:30">=</operator> <operator pos:start="151:32" pos:end="151:32">!</operator><name pos:start="151:33" pos:end="151:43">pci_enabled</name></expr>;</expr_stmt>

    <expr_stmt pos:start="153:5" pos:end="153:58"><expr pos:start="153:5" pos:end="153:57"><name pos:start="153:5" pos:end="153:35"><name pos:start="153:5" pos:end="153:14">guest_info</name><operator pos:start="153:15" pos:end="153:16">-&gt;</operator><name pos:start="153:17" pos:end="153:35">has_reserved_memory</name></name> <operator pos:start="153:37" pos:end="153:37">=</operator> <name pos:start="153:39" pos:end="153:57">has_reserved_memory</name></expr>;</expr_stmt>



    <if_stmt pos:start="157:5" pos:end="167:5"><if pos:start="157:5" pos:end="167:5">if <condition pos:start="157:8" pos:end="157:24">(<expr pos:start="157:9" pos:end="157:23"><name pos:start="157:9" pos:end="157:23">smbios_defaults</name></expr>)</condition> <block pos:start="157:26" pos:end="167:5">{<block_content pos:start="159:9" pos:end="165:58">

        <decl_stmt pos:start="159:9" pos:end="159:54"><decl pos:start="159:9" pos:end="159:53"><type pos:start="159:9" pos:end="159:22"><name pos:start="159:9" pos:end="159:20">MachineClass</name> <modifier pos:start="159:22" pos:end="159:22">*</modifier></type><name pos:start="159:23" pos:end="159:24">mc</name> <init pos:start="159:26" pos:end="159:53">= <expr pos:start="159:28" pos:end="159:53"><call pos:start="159:28" pos:end="159:53"><name pos:start="159:28" pos:end="159:44">MACHINE_GET_CLASS</name><argument_list pos:start="159:45" pos:end="159:53">(<argument pos:start="159:46" pos:end="159:52"><expr pos:start="159:46" pos:end="159:52"><name pos:start="159:46" pos:end="159:52">machine</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="block" pos:start="161:9" pos:end="161:55">/* These values are guest ABI, do not change */</comment>

        <expr_stmt pos:start="163:9" pos:end="165:58"><expr pos:start="163:9" pos:end="165:57"><call pos:start="163:9" pos:end="165:57"><name pos:start="163:9" pos:end="163:27">smbios_set_defaults</name><argument_list pos:start="163:28" pos:end="165:57">(<argument pos:start="163:29" pos:end="163:34"><expr pos:start="163:29" pos:end="163:34"><literal type="string" pos:start="163:29" pos:end="163:34">"QEMU"</literal></expr></argument>, <argument pos:start="163:37" pos:end="163:71"><expr pos:start="163:37" pos:end="163:71"><literal type="string" pos:start="163:37" pos:end="163:71">"Standard PC (i440FX + PIIX, 1996)"</literal></expr></argument>,

                            <argument pos:start="165:29" pos:end="165:36"><expr pos:start="165:29" pos:end="165:36"><name pos:start="165:29" pos:end="165:36"><name pos:start="165:29" pos:end="165:30">mc</name><operator pos:start="165:31" pos:end="165:32">-&gt;</operator><name pos:start="165:33" pos:end="165:36">name</name></name></expr></argument>, <argument pos:start="165:39" pos:end="165:56"><expr pos:start="165:39" pos:end="165:56"><name pos:start="165:39" pos:end="165:56">smbios_legacy_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="171:5" pos:end="171:40">/* allocate ram and load rom/bios */</comment>

    <if_stmt pos:start="173:5" pos:end="181:5"><if pos:start="173:5" pos:end="181:5">if <condition pos:start="173:8" pos:end="173:23">(<expr pos:start="173:9" pos:end="173:22"><operator pos:start="173:9" pos:end="173:9">!</operator><call pos:start="173:10" pos:end="173:22"><name pos:start="173:10" pos:end="173:20">xen_enabled</name><argument_list pos:start="173:21" pos:end="173:22">()</argument_list></call></expr>)</condition> <block pos:start="173:25" pos:end="181:5">{<block_content pos:start="175:9" pos:end="179:69">

        <expr_stmt pos:start="175:9" pos:end="179:69"><expr pos:start="175:9" pos:end="179:68"><name pos:start="175:9" pos:end="175:14">fw_cfg</name> <operator pos:start="175:16" pos:end="175:16">=</operator> <call pos:start="175:18" pos:end="179:68"><name pos:start="175:18" pos:end="175:31">pc_memory_init</name><argument_list pos:start="175:32" pos:end="179:68">(<argument pos:start="175:33" pos:end="175:39"><expr pos:start="175:33" pos:end="175:39"><name pos:start="175:33" pos:end="175:39">machine</name></expr></argument>, <argument pos:start="175:42" pos:end="175:54"><expr pos:start="175:42" pos:end="175:54"><name pos:start="175:42" pos:end="175:54">system_memory</name></expr></argument>,

                                <argument pos:start="177:33" pos:end="177:49"><expr pos:start="177:33" pos:end="177:49"><name pos:start="177:33" pos:end="177:49">below_4g_mem_size</name></expr></argument>, <argument pos:start="177:52" pos:end="177:68"><expr pos:start="177:52" pos:end="177:68"><name pos:start="177:52" pos:end="177:68">above_4g_mem_size</name></expr></argument>,

                                <argument pos:start="179:33" pos:end="179:42"><expr pos:start="179:33" pos:end="179:42"><name pos:start="179:33" pos:end="179:42">rom_memory</name></expr></argument>, <argument pos:start="179:45" pos:end="179:55"><expr pos:start="179:45" pos:end="179:55"><operator pos:start="179:45" pos:end="179:45">&amp;</operator><name pos:start="179:46" pos:end="179:55">ram_memory</name></expr></argument>, <argument pos:start="179:58" pos:end="179:67"><expr pos:start="179:58" pos:end="179:67"><name pos:start="179:58" pos:end="179:67">guest_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="185:5" pos:end="185:46"><expr pos:start="185:5" pos:end="185:45"><name pos:start="185:5" pos:end="185:13">gsi_state</name> <operator pos:start="185:15" pos:end="185:15">=</operator> <call pos:start="185:17" pos:end="185:45"><name pos:start="185:17" pos:end="185:25">g_malloc0</name><argument_list pos:start="185:26" pos:end="185:45">(<argument pos:start="185:27" pos:end="185:44"><expr pos:start="185:27" pos:end="185:44"><sizeof pos:start="185:27" pos:end="185:44">sizeof<argument_list pos:start="185:33" pos:end="185:44">(<argument pos:start="185:34" pos:end="185:43"><expr pos:start="185:34" pos:end="185:43"><operator pos:start="185:34" pos:end="185:34">*</operator><name pos:start="185:35" pos:end="185:43">gsi_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="187:5" pos:end="199:5"><if pos:start="187:5" pos:end="195:5">if <condition pos:start="187:8" pos:end="187:32">(<expr pos:start="187:9" pos:end="187:31"><call pos:start="187:9" pos:end="187:31"><name pos:start="187:9" pos:end="187:29">kvm_irqchip_in_kernel</name><argument_list pos:start="187:30" pos:end="187:31">()</argument_list></call></expr>)</condition> <block pos:start="187:34" pos:end="195:5">{<block_content pos:start="189:9" pos:end="193:47">

        <expr_stmt pos:start="189:9" pos:end="189:46"><expr pos:start="189:9" pos:end="189:45"><call pos:start="189:9" pos:end="189:45"><name pos:start="189:9" pos:end="189:32">kvm_pc_setup_irq_routing</name><argument_list pos:start="189:33" pos:end="189:45">(<argument pos:start="189:34" pos:end="189:44"><expr pos:start="189:34" pos:end="189:44"><name pos:start="189:34" pos:end="189:44">pci_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="191:9" pos:end="193:47"><expr pos:start="191:9" pos:end="193:46"><name pos:start="191:9" pos:end="191:11">gsi</name> <operator pos:start="191:13" pos:end="191:13">=</operator> <call pos:start="191:15" pos:end="193:46"><name pos:start="191:15" pos:end="191:32">qemu_allocate_irqs</name><argument_list pos:start="191:33" pos:end="193:46">(<argument pos:start="191:34" pos:end="191:51"><expr pos:start="191:34" pos:end="191:51"><name pos:start="191:34" pos:end="191:51">kvm_pc_gsi_handler</name></expr></argument>, <argument pos:start="191:54" pos:end="191:62"><expr pos:start="191:54" pos:end="191:62"><name pos:start="191:54" pos:end="191:62">gsi_state</name></expr></argument>,

                                 <argument pos:start="193:34" pos:end="193:45"><expr pos:start="193:34" pos:end="193:45"><name pos:start="193:34" pos:end="193:45">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="195:7" pos:end="199:5">else <block pos:start="195:12" pos:end="199:5">{<block_content pos:start="197:9" pos:end="197:71">

        <expr_stmt pos:start="197:9" pos:end="197:71"><expr pos:start="197:9" pos:end="197:70"><name pos:start="197:9" pos:end="197:11">gsi</name> <operator pos:start="197:13" pos:end="197:13">=</operator> <call pos:start="197:15" pos:end="197:70"><name pos:start="197:15" pos:end="197:32">qemu_allocate_irqs</name><argument_list pos:start="197:33" pos:end="197:70">(<argument pos:start="197:34" pos:end="197:44"><expr pos:start="197:34" pos:end="197:44"><name pos:start="197:34" pos:end="197:44">gsi_handler</name></expr></argument>, <argument pos:start="197:47" pos:end="197:55"><expr pos:start="197:47" pos:end="197:55"><name pos:start="197:47" pos:end="197:55">gsi_state</name></expr></argument>, <argument pos:start="197:58" pos:end="197:69"><expr pos:start="197:58" pos:end="197:69"><name pos:start="197:58" pos:end="197:69">GSI_NUM_PINS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <if_stmt pos:start="203:5" pos:end="225:5"><if pos:start="203:5" pos:end="215:5">if <condition pos:start="203:8" pos:end="203:20">(<expr pos:start="203:9" pos:end="203:19"><name pos:start="203:9" pos:end="203:19">pci_enabled</name></expr>)</condition> <block pos:start="203:22" pos:end="215:5">{<block_content pos:start="205:9" pos:end="213:54">

        <expr_stmt pos:start="205:9" pos:end="213:54"><expr pos:start="205:9" pos:end="213:53"><name pos:start="205:9" pos:end="205:15">pci_bus</name> <operator pos:start="205:17" pos:end="205:17">=</operator> <call pos:start="205:19" pos:end="213:53"><name pos:start="205:19" pos:end="205:29">i440fx_init</name><argument_list pos:start="205:30" pos:end="213:53">(<argument pos:start="205:31" pos:end="205:43"><expr pos:start="205:31" pos:end="205:43"><operator pos:start="205:31" pos:end="205:31">&amp;</operator><name pos:start="205:32" pos:end="205:43">i440fx_state</name></expr></argument>, <argument pos:start="205:46" pos:end="205:57"><expr pos:start="205:46" pos:end="205:57"><operator pos:start="205:46" pos:end="205:46">&amp;</operator><name pos:start="205:47" pos:end="205:57">piix3_devfn</name></expr></argument>, <argument pos:start="205:60" pos:end="205:67"><expr pos:start="205:60" pos:end="205:67"><operator pos:start="205:60" pos:end="205:60">&amp;</operator><name pos:start="205:61" pos:end="205:67">isa_bus</name></expr></argument>, <argument pos:start="205:70" pos:end="205:72"><expr pos:start="205:70" pos:end="205:72"><name pos:start="205:70" pos:end="205:72">gsi</name></expr></argument>,

                              <argument pos:start="207:31" pos:end="207:43"><expr pos:start="207:31" pos:end="207:43"><name pos:start="207:31" pos:end="207:43">system_memory</name></expr></argument>, <argument pos:start="207:46" pos:end="207:54"><expr pos:start="207:46" pos:end="207:54"><name pos:start="207:46" pos:end="207:54">system_io</name></expr></argument>, <argument pos:start="207:57" pos:end="207:73"><expr pos:start="207:57" pos:end="207:73"><name pos:start="207:57" pos:end="207:73"><name pos:start="207:57" pos:end="207:63">machine</name><operator pos:start="207:64" pos:end="207:65">-&gt;</operator><name pos:start="207:66" pos:end="207:73">ram_size</name></name></expr></argument>,

                              <argument pos:start="209:31" pos:end="209:47"><expr pos:start="209:31" pos:end="209:47"><name pos:start="209:31" pos:end="209:47">below_4g_mem_size</name></expr></argument>,

                              <argument pos:start="211:31" pos:end="211:47"><expr pos:start="211:31" pos:end="211:47"><name pos:start="211:31" pos:end="211:47">above_4g_mem_size</name></expr></argument>,

                              <argument pos:start="213:31" pos:end="213:40"><expr pos:start="213:31" pos:end="213:40"><name pos:start="213:31" pos:end="213:40">pci_memory</name></expr></argument>, <argument pos:start="213:43" pos:end="213:52"><expr pos:start="213:43" pos:end="213:52"><name pos:start="213:43" pos:end="213:52">ram_memory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="215:7" pos:end="225:5">else <block pos:start="215:12" pos:end="225:5">{<block_content pos:start="217:9" pos:end="223:20">

        <expr_stmt pos:start="217:9" pos:end="217:23"><expr pos:start="217:9" pos:end="217:22"><name pos:start="217:9" pos:end="217:15">pci_bus</name> <operator pos:start="217:17" pos:end="217:17">=</operator> <name pos:start="217:19" pos:end="217:22">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="219:9" pos:end="219:28"><expr pos:start="219:9" pos:end="219:27"><name pos:start="219:9" pos:end="219:20">i440fx_state</name> <operator pos:start="219:22" pos:end="219:22">=</operator> <name pos:start="219:24" pos:end="219:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="221:9" pos:end="221:47"><expr pos:start="221:9" pos:end="221:46"><name pos:start="221:9" pos:end="221:15">isa_bus</name> <operator pos:start="221:17" pos:end="221:17">=</operator> <call pos:start="221:19" pos:end="221:46"><name pos:start="221:19" pos:end="221:29">isa_bus_new</name><argument_list pos:start="221:30" pos:end="221:46">(<argument pos:start="221:31" pos:end="221:34"><expr pos:start="221:31" pos:end="221:34"><name pos:start="221:31" pos:end="221:34">NULL</name></expr></argument>, <argument pos:start="221:37" pos:end="221:45"><expr pos:start="221:37" pos:end="221:45"><name pos:start="221:37" pos:end="221:45">system_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="223:9" pos:end="223:20"><expr pos:start="223:9" pos:end="223:19"><name pos:start="223:9" pos:end="223:15">no_hpet</name> <operator pos:start="223:17" pos:end="223:17">=</operator> <literal type="number" pos:start="223:19" pos:end="223:19">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="227:5" pos:end="227:31"><expr pos:start="227:5" pos:end="227:30"><call pos:start="227:5" pos:end="227:30"><name pos:start="227:5" pos:end="227:16">isa_bus_irqs</name><argument_list pos:start="227:17" pos:end="227:30">(<argument pos:start="227:18" pos:end="227:24"><expr pos:start="227:18" pos:end="227:24"><name pos:start="227:18" pos:end="227:24">isa_bus</name></expr></argument>, <argument pos:start="227:27" pos:end="227:29"><expr pos:start="227:27" pos:end="227:29"><name pos:start="227:27" pos:end="227:29">gsi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="231:5" pos:end="245:5"><if pos:start="231:5" pos:end="235:5">if <condition pos:start="231:8" pos:end="231:32">(<expr pos:start="231:9" pos:end="231:31"><call pos:start="231:9" pos:end="231:31"><name pos:start="231:9" pos:end="231:29">kvm_irqchip_in_kernel</name><argument_list pos:start="231:30" pos:end="231:31">()</argument_list></call></expr>)</condition> <block pos:start="231:34" pos:end="235:5">{<block_content pos:start="233:9" pos:end="233:40">

        <expr_stmt pos:start="233:9" pos:end="233:40"><expr pos:start="233:9" pos:end="233:39"><name pos:start="233:9" pos:end="233:13">i8259</name> <operator pos:start="233:15" pos:end="233:15">=</operator> <call pos:start="233:17" pos:end="233:39"><name pos:start="233:17" pos:end="233:30">kvm_i8259_init</name><argument_list pos:start="233:31" pos:end="233:39">(<argument pos:start="233:32" pos:end="233:38"><expr pos:start="233:32" pos:end="233:38"><name pos:start="233:32" pos:end="233:38">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="235:7" pos:end="239:5">else if <condition pos:start="235:15" pos:end="235:29">(<expr pos:start="235:16" pos:end="235:28"><call pos:start="235:16" pos:end="235:28"><name pos:start="235:16" pos:end="235:26">xen_enabled</name><argument_list pos:start="235:27" pos:end="235:28">()</argument_list></call></expr>)</condition> <block pos:start="235:31" pos:end="239:5">{<block_content pos:start="237:9" pos:end="237:48">

        <expr_stmt pos:start="237:9" pos:end="237:48"><expr pos:start="237:9" pos:end="237:47"><name pos:start="237:9" pos:end="237:13">i8259</name> <operator pos:start="237:15" pos:end="237:15">=</operator> <call pos:start="237:17" pos:end="237:47"><name pos:start="237:17" pos:end="237:45">xen_interrupt_controller_init</name><argument_list pos:start="237:46" pos:end="237:47">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="239:7" pos:end="245:5">else <block pos:start="239:12" pos:end="245:5">{<block_content pos:start="241:9" pos:end="243:48">

        <expr_stmt pos:start="241:9" pos:end="241:40"><expr pos:start="241:9" pos:end="241:39"><name pos:start="241:9" pos:end="241:15">cpu_irq</name> <operator pos:start="241:17" pos:end="241:17">=</operator> <call pos:start="241:19" pos:end="241:39"><name pos:start="241:19" pos:end="241:37">pc_allocate_cpu_irq</name><argument_list pos:start="241:38" pos:end="241:39">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="243:9" pos:end="243:48"><expr pos:start="243:9" pos:end="243:47"><name pos:start="243:9" pos:end="243:13">i8259</name> <operator pos:start="243:15" pos:end="243:15">=</operator> <call pos:start="243:17" pos:end="243:47"><name pos:start="243:17" pos:end="243:26">i8259_init</name><argument_list pos:start="243:27" pos:end="243:47">(<argument pos:start="243:28" pos:end="243:34"><expr pos:start="243:28" pos:end="243:34"><name pos:start="243:28" pos:end="243:34">isa_bus</name></expr></argument>, <argument pos:start="243:37" pos:end="243:46"><expr pos:start="243:37" pos:end="243:46"><name pos:start="243:37" pos:end="243:46"><name pos:start="243:37" pos:end="243:43">cpu_irq</name><index pos:start="243:44" pos:end="243:46">[<expr pos:start="243:45" pos:end="243:45"><literal type="number" pos:start="243:45" pos:end="243:45">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



    <for pos:start="249:5" pos:end="253:5">for <control pos:start="249:9" pos:end="249:38">(<init pos:start="249:10" pos:end="249:15"><expr pos:start="249:10" pos:end="249:14"><name pos:start="249:10" pos:end="249:10">i</name> <operator pos:start="249:12" pos:end="249:12">=</operator> <literal type="number" pos:start="249:14" pos:end="249:14">0</literal></expr>;</init> <condition pos:start="249:17" pos:end="249:33"><expr pos:start="249:17" pos:end="249:32"><name pos:start="249:17" pos:end="249:17">i</name> <operator pos:start="249:19" pos:end="249:19">&lt;</operator> <name pos:start="249:21" pos:end="249:32">ISA_NUM_IRQS</name></expr>;</condition> <incr pos:start="249:35" pos:end="249:37"><expr pos:start="249:35" pos:end="249:37"><name pos:start="249:35" pos:end="249:35">i</name><operator pos:start="249:36" pos:end="249:37">++</operator></expr></incr>)</control> <block pos:start="249:40" pos:end="253:5">{<block_content pos:start="251:9" pos:end="251:43">

        <expr_stmt pos:start="251:9" pos:end="251:43"><expr pos:start="251:9" pos:end="251:42"><name pos:start="251:9" pos:end="251:31"><name pos:start="251:9" pos:end="251:17">gsi_state</name><operator pos:start="251:18" pos:end="251:19">-&gt;</operator><name pos:start="251:20" pos:end="251:28">i8259_irq</name><index pos:start="251:29" pos:end="251:31">[<expr pos:start="251:30" pos:end="251:30"><name pos:start="251:30" pos:end="251:30">i</name></expr>]</index></name> <operator pos:start="251:33" pos:end="251:33">=</operator> <name pos:start="251:35" pos:end="251:42"><name pos:start="251:35" pos:end="251:39">i8259</name><index pos:start="251:40" pos:end="251:42">[<expr pos:start="251:41" pos:end="251:41"><name pos:start="251:41" pos:end="251:41">i</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>

    <if_stmt pos:start="255:5" pos:end="259:5"><if pos:start="255:5" pos:end="259:5">if <condition pos:start="255:8" pos:end="255:20">(<expr pos:start="255:9" pos:end="255:19"><name pos:start="255:9" pos:end="255:19">pci_enabled</name></expr>)</condition> <block pos:start="255:22" pos:end="259:5">{<block_content pos:start="257:9" pos:end="257:45">

        <expr_stmt pos:start="257:9" pos:end="257:45"><expr pos:start="257:9" pos:end="257:44"><call pos:start="257:9" pos:end="257:44"><name pos:start="257:9" pos:end="257:23">ioapic_init_gsi</name><argument_list pos:start="257:24" pos:end="257:44">(<argument pos:start="257:25" pos:end="257:33"><expr pos:start="257:25" pos:end="257:33"><name pos:start="257:25" pos:end="257:33">gsi_state</name></expr></argument>, <argument pos:start="257:36" pos:end="257:43"><expr pos:start="257:36" pos:end="257:43"><literal type="string" pos:start="257:36" pos:end="257:43">"i440fx"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="261:5" pos:end="261:33"><expr pos:start="261:5" pos:end="261:32"><call pos:start="261:5" pos:end="261:32"><name pos:start="261:5" pos:end="261:20">qdev_init_nofail</name><argument_list pos:start="261:21" pos:end="261:32">(<argument pos:start="261:22" pos:end="261:31"><expr pos:start="261:22" pos:end="261:31"><name pos:start="261:22" pos:end="261:31">icc_bridge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="265:5" pos:end="265:34"><expr pos:start="265:5" pos:end="265:33"><call pos:start="265:5" pos:end="265:33"><name pos:start="265:5" pos:end="265:24">pc_register_ferr_irq</name><argument_list pos:start="265:25" pos:end="265:33">(<argument pos:start="265:26" pos:end="265:32"><expr pos:start="265:26" pos:end="265:32"><name pos:start="265:26" pos:end="265:32"><name pos:start="265:26" pos:end="265:28">gsi</name><index pos:start="265:29" pos:end="265:32">[<expr pos:start="265:30" pos:end="265:31"><literal type="number" pos:start="265:30" pos:end="265:31">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:55"><expr pos:start="269:5" pos:end="269:54"><call pos:start="269:5" pos:end="269:54"><name pos:start="269:5" pos:end="269:15">pc_vga_init</name><argument_list pos:start="269:16" pos:end="269:54">(<argument pos:start="269:17" pos:end="269:23"><expr pos:start="269:17" pos:end="269:23"><name pos:start="269:17" pos:end="269:23">isa_bus</name></expr></argument>, <argument pos:start="269:26" pos:end="269:53"><expr pos:start="269:26" pos:end="269:53"><ternary pos:start="269:26" pos:end="269:53"><condition pos:start="269:26" pos:end="269:38"><expr pos:start="269:26" pos:end="269:36"><name pos:start="269:26" pos:end="269:36">pci_enabled</name></expr> ?</condition><then pos:start="269:40" pos:end="269:46"> <expr pos:start="269:40" pos:end="269:46"><name pos:start="269:40" pos:end="269:46">pci_bus</name></expr> </then><else pos:start="269:48" pos:end="269:53">: <expr pos:start="269:50" pos:end="269:53"><name pos:start="269:50" pos:end="269:53">NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="273:5" pos:end="273:32">/* init basic PC hardware */</comment>

    <expr_stmt pos:start="275:5" pos:end="277:13"><expr pos:start="275:5" pos:end="277:12"><call pos:start="275:5" pos:end="277:12"><name pos:start="275:5" pos:end="275:24">pc_basic_device_init</name><argument_list pos:start="275:25" pos:end="277:12">(<argument pos:start="275:26" pos:end="275:32"><expr pos:start="275:26" pos:end="275:32"><name pos:start="275:26" pos:end="275:32">isa_bus</name></expr></argument>, <argument pos:start="275:35" pos:end="275:37"><expr pos:start="275:35" pos:end="275:37"><name pos:start="275:35" pos:end="275:37">gsi</name></expr></argument>, <argument pos:start="275:40" pos:end="275:49"><expr pos:start="275:40" pos:end="275:49"><operator pos:start="275:40" pos:end="275:40">&amp;</operator><name pos:start="275:41" pos:end="275:49">rtc_state</name></expr></argument>, <argument pos:start="275:52" pos:end="275:58"><expr pos:start="275:52" pos:end="275:58"><operator pos:start="275:52" pos:end="275:52">&amp;</operator><name pos:start="275:53" pos:end="275:58">floppy</name></expr></argument>, <argument pos:start="275:61" pos:end="275:73"><expr pos:start="275:61" pos:end="275:73"><call pos:start="275:61" pos:end="275:73"><name pos:start="275:61" pos:end="275:71">xen_enabled</name><argument_list pos:start="275:72" pos:end="275:73">()</argument_list></call></expr></argument>,

        <argument pos:start="277:9" pos:end="277:11"><expr pos:start="277:9" pos:end="277:11"><literal type="number" pos:start="277:9" pos:end="277:11">0x4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="281:5" pos:end="281:34"><expr pos:start="281:5" pos:end="281:33"><call pos:start="281:5" pos:end="281:33"><name pos:start="281:5" pos:end="281:15">pc_nic_init</name><argument_list pos:start="281:16" pos:end="281:33">(<argument pos:start="281:17" pos:end="281:23"><expr pos:start="281:17" pos:end="281:23"><name pos:start="281:17" pos:end="281:23">isa_bus</name></expr></argument>, <argument pos:start="281:26" pos:end="281:32"><expr pos:start="281:26" pos:end="281:32"><name pos:start="281:26" pos:end="281:32">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="285:5" pos:end="285:35"><expr pos:start="285:5" pos:end="285:34"><call pos:start="285:5" pos:end="285:34"><name pos:start="285:5" pos:end="285:17">ide_drive_get</name><argument_list pos:start="285:18" pos:end="285:34">(<argument pos:start="285:19" pos:end="285:20"><expr pos:start="285:19" pos:end="285:20"><name pos:start="285:19" pos:end="285:20">hd</name></expr></argument>, <argument pos:start="285:23" pos:end="285:33"><expr pos:start="285:23" pos:end="285:33"><name pos:start="285:23" pos:end="285:33">MAX_IDE_BUS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="287:5" pos:end="333:5"><if pos:start="287:5" pos:end="305:5">if <condition pos:start="287:8" pos:end="287:20">(<expr pos:start="287:9" pos:end="287:19"><name pos:start="287:9" pos:end="287:19">pci_enabled</name></expr>)</condition> <block pos:start="287:22" pos:end="305:5">{<block_content pos:start="289:9" pos:end="303:60">

        <decl_stmt pos:start="289:9" pos:end="289:23"><decl pos:start="289:9" pos:end="289:22"><type pos:start="289:9" pos:end="289:19"><name pos:start="289:9" pos:end="289:17">PCIDevice</name> <modifier pos:start="289:19" pos:end="289:19">*</modifier></type><name pos:start="289:20" pos:end="289:22">dev</name></decl>;</decl_stmt>

        <if_stmt pos:start="291:9" pos:end="299:9"><if pos:start="291:9" pos:end="295:9">if <condition pos:start="291:12" pos:end="291:26">(<expr pos:start="291:13" pos:end="291:25"><call pos:start="291:13" pos:end="291:25"><name pos:start="291:13" pos:end="291:23">xen_enabled</name><argument_list pos:start="291:24" pos:end="291:25">()</argument_list></call></expr>)</condition> <block pos:start="291:28" pos:end="295:9">{<block_content pos:start="293:13" pos:end="293:71">

            <expr_stmt pos:start="293:13" pos:end="293:71"><expr pos:start="293:13" pos:end="293:70"><name pos:start="293:13" pos:end="293:15">dev</name> <operator pos:start="293:17" pos:end="293:17">=</operator> <call pos:start="293:19" pos:end="293:70"><name pos:start="293:19" pos:end="293:40">pci_piix3_xen_ide_init</name><argument_list pos:start="293:41" pos:end="293:70">(<argument pos:start="293:42" pos:end="293:48"><expr pos:start="293:42" pos:end="293:48"><name pos:start="293:42" pos:end="293:48">pci_bus</name></expr></argument>, <argument pos:start="293:51" pos:end="293:52"><expr pos:start="293:51" pos:end="293:52"><name pos:start="293:51" pos:end="293:52">hd</name></expr></argument>, <argument pos:start="293:55" pos:end="293:69"><expr pos:start="293:55" pos:end="293:69"><name pos:start="293:55" pos:end="293:65">piix3_devfn</name> <operator pos:start="293:67" pos:end="293:67">+</operator> <literal type="number" pos:start="293:69" pos:end="293:69">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="295:11" pos:end="299:9">else <block pos:start="295:16" pos:end="299:9">{<block_content pos:start="297:13" pos:end="297:67">

            <expr_stmt pos:start="297:13" pos:end="297:67"><expr pos:start="297:13" pos:end="297:66"><name pos:start="297:13" pos:end="297:15">dev</name> <operator pos:start="297:17" pos:end="297:17">=</operator> <call pos:start="297:19" pos:end="297:66"><name pos:start="297:19" pos:end="297:36">pci_piix3_ide_init</name><argument_list pos:start="297:37" pos:end="297:66">(<argument pos:start="297:38" pos:end="297:44"><expr pos:start="297:38" pos:end="297:44"><name pos:start="297:38" pos:end="297:44">pci_bus</name></expr></argument>, <argument pos:start="297:47" pos:end="297:48"><expr pos:start="297:47" pos:end="297:48"><name pos:start="297:47" pos:end="297:48">hd</name></expr></argument>, <argument pos:start="297:51" pos:end="297:65"><expr pos:start="297:51" pos:end="297:65"><name pos:start="297:51" pos:end="297:61">piix3_devfn</name> <operator pos:start="297:63" pos:end="297:63">+</operator> <literal type="number" pos:start="297:65" pos:end="297:65">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="301:9" pos:end="301:60"><expr pos:start="301:9" pos:end="301:59"><name pos:start="301:9" pos:end="301:17"><name pos:start="301:9" pos:end="301:14">idebus</name><index pos:start="301:15" pos:end="301:17">[<expr pos:start="301:16" pos:end="301:16"><literal type="number" pos:start="301:16" pos:end="301:16">0</literal></expr>]</index></name> <operator pos:start="301:19" pos:end="301:19">=</operator> <call pos:start="301:21" pos:end="301:59"><name pos:start="301:21" pos:end="301:38">qdev_get_child_bus</name><argument_list pos:start="301:39" pos:end="301:59">(<argument pos:start="301:40" pos:end="301:49"><expr pos:start="301:40" pos:end="301:49"><operator pos:start="301:40" pos:end="301:40">&amp;</operator><name pos:start="301:41" pos:end="301:49"><name pos:start="301:41" pos:end="301:43">dev</name><operator pos:start="301:44" pos:end="301:45">-&gt;</operator><name pos:start="301:46" pos:end="301:49">qdev</name></name></expr></argument>, <argument pos:start="301:52" pos:end="301:58"><expr pos:start="301:52" pos:end="301:58"><literal type="string" pos:start="301:52" pos:end="301:58">"ide.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="303:9" pos:end="303:60"><expr pos:start="303:9" pos:end="303:59"><name pos:start="303:9" pos:end="303:17"><name pos:start="303:9" pos:end="303:14">idebus</name><index pos:start="303:15" pos:end="303:17">[<expr pos:start="303:16" pos:end="303:16"><literal type="number" pos:start="303:16" pos:end="303:16">1</literal></expr>]</index></name> <operator pos:start="303:19" pos:end="303:19">=</operator> <call pos:start="303:21" pos:end="303:59"><name pos:start="303:21" pos:end="303:38">qdev_get_child_bus</name><argument_list pos:start="303:39" pos:end="303:59">(<argument pos:start="303:40" pos:end="303:49"><expr pos:start="303:40" pos:end="303:49"><operator pos:start="303:40" pos:end="303:40">&amp;</operator><name pos:start="303:41" pos:end="303:49"><name pos:start="303:41" pos:end="303:43">dev</name><operator pos:start="303:44" pos:end="303:45">-&gt;</operator><name pos:start="303:46" pos:end="303:49">qdev</name></name></expr></argument>, <argument pos:start="303:52" pos:end="303:58"><expr pos:start="303:52" pos:end="303:58"><literal type="string" pos:start="303:52" pos:end="303:58">"ide.1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="305:7" pos:end="333:5">else <block pos:start="305:12" pos:end="333:5">{<block_content pos:start="307:9" pos:end="331:9">

        <for pos:start="307:9" pos:end="331:9">for<control pos:start="307:12" pos:end="307:40">(<init pos:start="307:13" pos:end="307:18"><expr pos:start="307:13" pos:end="307:17"><name pos:start="307:13" pos:end="307:13">i</name> <operator pos:start="307:15" pos:end="307:15">=</operator> <literal type="number" pos:start="307:17" pos:end="307:17">0</literal></expr>;</init> <condition pos:start="307:20" pos:end="307:35"><expr pos:start="307:20" pos:end="307:34"><name pos:start="307:20" pos:end="307:20">i</name> <operator pos:start="307:22" pos:end="307:22">&lt;</operator> <name pos:start="307:24" pos:end="307:34">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="307:37" pos:end="307:39"><expr pos:start="307:37" pos:end="307:39"><name pos:start="307:37" pos:end="307:37">i</name><operator pos:start="307:38" pos:end="307:39">++</operator></expr></incr>)</control> <block pos:start="307:42" pos:end="331:9">{<block_content pos:start="309:13" pos:end="329:65">

            <decl_stmt pos:start="309:13" pos:end="309:27"><decl pos:start="309:13" pos:end="309:26"><type pos:start="309:13" pos:end="309:23"><name pos:start="309:13" pos:end="309:21">ISADevice</name> <modifier pos:start="309:23" pos:end="309:23">*</modifier></type><name pos:start="309:24" pos:end="309:26">dev</name></decl>;</decl_stmt>

            <decl_stmt pos:start="311:13" pos:end="311:37"><decl pos:start="311:13" pos:end="311:36"><type pos:start="311:13" pos:end="311:16"><name pos:start="311:13" pos:end="311:16">char</name></type> <name pos:start="311:18" pos:end="311:26"><name pos:start="311:18" pos:end="311:24">busname</name><index pos:start="311:25" pos:end="311:26">[]</index></name> <init pos:start="311:28" pos:end="311:36">= <expr pos:start="311:30" pos:end="311:36"><literal type="string" pos:start="311:30" pos:end="311:36">"ide.0"</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="313:13" pos:end="317:79"><expr pos:start="313:13" pos:end="317:78"><name pos:start="313:13" pos:end="313:15">dev</name> <operator pos:start="313:17" pos:end="313:17">=</operator> <call pos:start="313:19" pos:end="317:78"><name pos:start="313:19" pos:end="313:30">isa_ide_init</name><argument_list pos:start="313:31" pos:end="317:78">(<argument pos:start="313:32" pos:end="313:38"><expr pos:start="313:32" pos:end="313:38"><name pos:start="313:32" pos:end="313:38">isa_bus</name></expr></argument>, <argument pos:start="313:41" pos:end="313:53"><expr pos:start="313:41" pos:end="313:53"><name pos:start="313:41" pos:end="313:53"><name pos:start="313:41" pos:end="313:50">ide_iobase</name><index pos:start="313:51" pos:end="313:53">[<expr pos:start="313:52" pos:end="313:52"><name pos:start="313:52" pos:end="313:52">i</name></expr>]</index></name></expr></argument>, <argument pos:start="313:56" pos:end="313:69"><expr pos:start="313:56" pos:end="313:69"><name pos:start="313:56" pos:end="313:69"><name pos:start="313:56" pos:end="313:66">ide_iobase2</name><index pos:start="313:67" pos:end="313:69">[<expr pos:start="313:68" pos:end="313:68"><name pos:start="313:68" pos:end="313:68">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="315:32" pos:end="315:41"><expr pos:start="315:32" pos:end="315:41"><name pos:start="315:32" pos:end="315:41"><name pos:start="315:32" pos:end="315:38">ide_irq</name><index pos:start="315:39" pos:end="315:41">[<expr pos:start="315:40" pos:end="315:40"><name pos:start="315:40" pos:end="315:40">i</name></expr>]</index></name></expr></argument>,

                               <argument pos:start="317:32" pos:end="317:51"><expr pos:start="317:32" pos:end="317:51"><name pos:start="317:32" pos:end="317:51"><name pos:start="317:32" pos:end="317:33">hd</name><index pos:start="317:34" pos:end="317:51">[<expr pos:start="317:35" pos:end="317:50"><name pos:start="317:35" pos:end="317:46">MAX_IDE_DEVS</name> <operator pos:start="317:48" pos:end="317:48">*</operator> <name pos:start="317:50" pos:end="317:50">i</name></expr>]</index></name></expr></argument>, <argument pos:start="317:54" pos:end="317:77"><expr pos:start="317:54" pos:end="317:77"><name pos:start="317:54" pos:end="317:77"><name pos:start="317:54" pos:end="317:55">hd</name><index pos:start="317:56" pos:end="317:77">[<expr pos:start="317:57" pos:end="317:76"><name pos:start="317:57" pos:end="317:68">MAX_IDE_DEVS</name> <operator pos:start="317:70" pos:end="317:70">*</operator> <name pos:start="317:72" pos:end="317:72">i</name> <operator pos:start="317:74" pos:end="317:74">+</operator> <literal type="number" pos:start="317:76" pos:end="317:76">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="block" pos:start="319:13" pos:end="325:15">/*

             * The ide bus name is ide.0 for the first bus and ide.1 for the

             * second one.

             */</comment>

            <expr_stmt pos:start="327:13" pos:end="327:33"><expr pos:start="327:13" pos:end="327:32"><name pos:start="327:13" pos:end="327:22"><name pos:start="327:13" pos:end="327:19">busname</name><index pos:start="327:20" pos:end="327:22">[<expr pos:start="327:21" pos:end="327:21"><literal type="number" pos:start="327:21" pos:end="327:21">4</literal></expr>]</index></name> <operator pos:start="327:24" pos:end="327:24">=</operator> <literal type="char" pos:start="327:26" pos:end="327:28">'0'</literal> <operator pos:start="327:30" pos:end="327:30">+</operator> <name pos:start="327:32" pos:end="327:32">i</name></expr>;</expr_stmt>

            <expr_stmt pos:start="329:13" pos:end="329:65"><expr pos:start="329:13" pos:end="329:64"><name pos:start="329:13" pos:end="329:21"><name pos:start="329:13" pos:end="329:18">idebus</name><index pos:start="329:19" pos:end="329:21">[<expr pos:start="329:20" pos:end="329:20"><name pos:start="329:20" pos:end="329:20">i</name></expr>]</index></name> <operator pos:start="329:23" pos:end="329:23">=</operator> <call pos:start="329:25" pos:end="329:64"><name pos:start="329:25" pos:end="329:42">qdev_get_child_bus</name><argument_list pos:start="329:43" pos:end="329:64">(<argument pos:start="329:44" pos:end="329:54"><expr pos:start="329:44" pos:end="329:54"><call pos:start="329:44" pos:end="329:54"><name pos:start="329:44" pos:end="329:49">DEVICE</name><argument_list pos:start="329:50" pos:end="329:54">(<argument pos:start="329:51" pos:end="329:53"><expr pos:start="329:51" pos:end="329:53"><name pos:start="329:51" pos:end="329:53">dev</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="329:57" pos:end="329:63"><expr pos:start="329:57" pos:end="329:63"><name pos:start="329:57" pos:end="329:63">busname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="337:5" pos:end="339:58"><expr pos:start="337:5" pos:end="339:57"><call pos:start="337:5" pos:end="339:57"><name pos:start="337:5" pos:end="337:16">pc_cmos_init</name><argument_list pos:start="337:17" pos:end="339:57">(<argument pos:start="337:18" pos:end="337:34"><expr pos:start="337:18" pos:end="337:34"><name pos:start="337:18" pos:end="337:34">below_4g_mem_size</name></expr></argument>, <argument pos:start="337:37" pos:end="337:53"><expr pos:start="337:37" pos:end="337:53"><name pos:start="337:37" pos:end="337:53">above_4g_mem_size</name></expr></argument>, <argument pos:start="337:56" pos:end="337:74"><expr pos:start="337:56" pos:end="337:74"><name pos:start="337:56" pos:end="337:74"><name pos:start="337:56" pos:end="337:62">machine</name><operator pos:start="337:63" pos:end="337:64">-&gt;</operator><name pos:start="337:65" pos:end="337:74">boot_order</name></name></expr></argument>,

                 <argument pos:start="339:18" pos:end="339:23"><expr pos:start="339:18" pos:end="339:23"><name pos:start="339:18" pos:end="339:23">floppy</name></expr></argument>, <argument pos:start="339:26" pos:end="339:34"><expr pos:start="339:26" pos:end="339:34"><name pos:start="339:26" pos:end="339:34"><name pos:start="339:26" pos:end="339:31">idebus</name><index pos:start="339:32" pos:end="339:34">[<expr pos:start="339:33" pos:end="339:33"><literal type="number" pos:start="339:33" pos:end="339:33">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:37" pos:end="339:45"><expr pos:start="339:37" pos:end="339:45"><name pos:start="339:37" pos:end="339:45"><name pos:start="339:37" pos:end="339:42">idebus</name><index pos:start="339:43" pos:end="339:45">[<expr pos:start="339:44" pos:end="339:44"><literal type="number" pos:start="339:44" pos:end="339:44">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="339:48" pos:end="339:56"><expr pos:start="339:48" pos:end="339:56"><name pos:start="339:48" pos:end="339:56">rtc_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="343:5" pos:end="347:5"><if pos:start="343:5" pos:end="347:5">if <condition pos:start="343:8" pos:end="343:42">(<expr pos:start="343:9" pos:end="343:41"><name pos:start="343:9" pos:end="343:19">pci_enabled</name> <operator pos:start="343:21" pos:end="343:22">&amp;&amp;</operator> <call pos:start="343:24" pos:end="343:41"><name pos:start="343:24" pos:end="343:34">usb_enabled</name><argument_list pos:start="343:35" pos:end="343:41">(<argument pos:start="343:36" pos:end="343:40"><expr pos:start="343:36" pos:end="343:40"><name pos:start="343:36" pos:end="343:40">false</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="343:44" pos:end="347:5">{<block_content pos:start="345:9" pos:end="345:70">

        <expr_stmt pos:start="345:9" pos:end="345:70"><expr pos:start="345:9" pos:end="345:69"><call pos:start="345:9" pos:end="345:69"><name pos:start="345:9" pos:end="345:25">pci_create_simple</name><argument_list pos:start="345:26" pos:end="345:69">(<argument pos:start="345:27" pos:end="345:33"><expr pos:start="345:27" pos:end="345:33"><name pos:start="345:27" pos:end="345:33">pci_bus</name></expr></argument>, <argument pos:start="345:36" pos:end="345:50"><expr pos:start="345:36" pos:end="345:50"><name pos:start="345:36" pos:end="345:46">piix3_devfn</name> <operator pos:start="345:48" pos:end="345:48">+</operator> <literal type="number" pos:start="345:50" pos:end="345:50">2</literal></expr></argument>, <argument pos:start="345:53" pos:end="345:68"><expr pos:start="345:53" pos:end="345:68"><literal type="string" pos:start="345:53" pos:end="345:68">"piix3-usb-uhci"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="351:5" pos:end="387:5"><if pos:start="351:5" pos:end="387:5">if <condition pos:start="351:8" pos:end="351:36">(<expr pos:start="351:9" pos:end="351:35"><name pos:start="351:9" pos:end="351:19">pci_enabled</name> <operator pos:start="351:21" pos:end="351:22">&amp;&amp;</operator> <name pos:start="351:24" pos:end="351:35">acpi_enabled</name></expr>)</condition> <block pos:start="351:38" pos:end="387:5">{<block_content pos:start="353:9" pos:end="385:76">

        <decl_stmt pos:start="353:9" pos:end="353:30"><decl pos:start="353:9" pos:end="353:29"><type pos:start="353:9" pos:end="353:21"><name pos:start="353:9" pos:end="353:19">DeviceState</name> <modifier pos:start="353:21" pos:end="353:21">*</modifier></type><name pos:start="353:22" pos:end="353:29">piix4_pm</name></decl>;</decl_stmt>

        <decl_stmt pos:start="355:9" pos:end="355:22"><decl pos:start="355:9" pos:end="355:21"><type pos:start="355:9" pos:end="355:16"><name pos:start="355:9" pos:end="355:14">I2CBus</name> <modifier pos:start="355:16" pos:end="355:16">*</modifier></type><name pos:start="355:17" pos:end="355:21">smbus</name></decl>;</decl_stmt>



        <expr_stmt pos:start="359:9" pos:end="359:74"><expr pos:start="359:9" pos:end="359:73"><name pos:start="359:9" pos:end="359:15">smi_irq</name> <operator pos:start="359:17" pos:end="359:17">=</operator> <call pos:start="359:19" pos:end="359:73"><name pos:start="359:19" pos:end="359:36">qemu_allocate_irqs</name><argument_list pos:start="359:37" pos:end="359:73">(<argument pos:start="359:38" pos:end="359:58"><expr pos:start="359:38" pos:end="359:58"><name pos:start="359:38" pos:end="359:58">pc_acpi_smi_interrupt</name></expr></argument>, <argument pos:start="359:61" pos:end="359:69"><expr pos:start="359:61" pos:end="359:69"><name pos:start="359:61" pos:end="359:69">first_cpu</name></expr></argument>, <argument pos:start="359:72" pos:end="359:72"><expr pos:start="359:72" pos:end="359:72"><literal type="number" pos:start="359:72" pos:end="359:72">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="361:9" pos:end="361:46">/* TODO: Populate SPD eeprom data.  */</comment>

        <expr_stmt pos:start="363:9" pos:end="367:64"><expr pos:start="363:9" pos:end="367:63"><name pos:start="363:9" pos:end="363:13">smbus</name> <operator pos:start="363:15" pos:end="363:15">=</operator> <call pos:start="363:17" pos:end="367:63"><name pos:start="363:17" pos:end="363:29">piix4_pm_init</name><argument_list pos:start="363:30" pos:end="367:63">(<argument pos:start="363:31" pos:end="363:37"><expr pos:start="363:31" pos:end="363:37"><name pos:start="363:31" pos:end="363:37">pci_bus</name></expr></argument>, <argument pos:start="363:40" pos:end="363:54"><expr pos:start="363:40" pos:end="363:54"><name pos:start="363:40" pos:end="363:50">piix3_devfn</name> <operator pos:start="363:52" pos:end="363:52">+</operator> <literal type="number" pos:start="363:54" pos:end="363:54">3</literal></expr></argument>, <argument pos:start="363:57" pos:end="363:62"><expr pos:start="363:57" pos:end="363:62"><literal type="number" pos:start="363:57" pos:end="363:62">0xb100</literal></expr></argument>,

                              <argument pos:start="365:31" pos:end="365:36"><expr pos:start="365:31" pos:end="365:36"><name pos:start="365:31" pos:end="365:36"><name pos:start="365:31" pos:end="365:33">gsi</name><index pos:start="365:34" pos:end="365:36">[<expr pos:start="365:35" pos:end="365:35"><literal type="number" pos:start="365:35" pos:end="365:35">9</literal></expr>]</index></name></expr></argument>, <argument pos:start="365:39" pos:end="365:46"><expr pos:start="365:39" pos:end="365:46"><operator pos:start="365:39" pos:end="365:39">*</operator><name pos:start="365:40" pos:end="365:46">smi_irq</name></expr></argument>,

                              <argument pos:start="367:31" pos:end="367:43"><expr pos:start="367:31" pos:end="367:43"><call pos:start="367:31" pos:end="367:43"><name pos:start="367:31" pos:end="367:41">kvm_enabled</name><argument_list pos:start="367:42" pos:end="367:43">()</argument_list></call></expr></argument>, <argument pos:start="367:46" pos:end="367:51"><expr pos:start="367:46" pos:end="367:51"><name pos:start="367:46" pos:end="367:51">fw_cfg</name></expr></argument>, <argument pos:start="367:54" pos:end="367:62"><expr pos:start="367:54" pos:end="367:62"><operator pos:start="367:54" pos:end="367:54">&amp;</operator><name pos:start="367:55" pos:end="367:62">piix4_pm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="369:9" pos:end="369:45"><expr pos:start="369:9" pos:end="369:44"><call pos:start="369:9" pos:end="369:44"><name pos:start="369:9" pos:end="369:25">smbus_eeprom_init</name><argument_list pos:start="369:26" pos:end="369:44">(<argument pos:start="369:27" pos:end="369:31"><expr pos:start="369:27" pos:end="369:31"><name pos:start="369:27" pos:end="369:31">smbus</name></expr></argument>, <argument pos:start="369:34" pos:end="369:34"><expr pos:start="369:34" pos:end="369:34"><literal type="number" pos:start="369:34" pos:end="369:34">8</literal></expr></argument>, <argument pos:start="369:37" pos:end="369:40"><expr pos:start="369:37" pos:end="369:40"><name pos:start="369:37" pos:end="369:40">NULL</name></expr></argument>, <argument pos:start="369:43" pos:end="369:43"><expr pos:start="369:43" pos:end="369:43"><literal type="number" pos:start="369:43" pos:end="369:43">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="373:9" pos:end="381:79"><expr pos:start="373:9" pos:end="381:78"><call pos:start="373:9" pos:end="381:78"><name pos:start="373:9" pos:end="373:32">object_property_add_link</name><argument_list pos:start="373:33" pos:end="381:78">(<argument pos:start="373:34" pos:end="373:48"><expr pos:start="373:34" pos:end="373:48"><call pos:start="373:34" pos:end="373:48"><name pos:start="373:34" pos:end="373:39">OBJECT</name><argument_list pos:start="373:40" pos:end="373:48">(<argument pos:start="373:41" pos:end="373:47"><expr pos:start="373:41" pos:end="373:47"><name pos:start="373:41" pos:end="373:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="373:51" pos:end="373:77"><expr pos:start="373:51" pos:end="373:77"><name pos:start="373:51" pos:end="373:77">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>,

                                 <argument pos:start="375:34" pos:end="375:53"><expr pos:start="375:34" pos:end="375:53"><name pos:start="375:34" pos:end="375:53">TYPE_HOTPLUG_HANDLER</name></expr></argument>,

                                 <argument pos:start="377:34" pos:end="377:65"><expr pos:start="377:34" pos:end="377:65"><operator pos:start="377:34" pos:end="377:34">(</operator><name pos:start="377:35" pos:end="377:40">Object</name> <operator pos:start="377:42" pos:end="377:42">*</operator><operator pos:start="377:43" pos:end="377:43">*</operator><operator pos:start="377:44" pos:end="377:44">)</operator><operator pos:start="377:45" pos:end="377:45">&amp;</operator><name pos:start="377:46" pos:end="377:65"><name pos:start="377:46" pos:end="377:55">pc_machine</name><operator pos:start="377:56" pos:end="377:57">-&gt;</operator><name pos:start="377:58" pos:end="377:65">acpi_dev</name></name></expr></argument>,

                                 <argument pos:start="379:34" pos:end="379:63"><expr pos:start="379:34" pos:end="379:63"><name pos:start="379:34" pos:end="379:63">object_property_allow_set_link</name></expr></argument>,

                                 <argument pos:start="381:34" pos:end="381:63"><expr pos:start="381:34" pos:end="381:63"><name pos:start="381:34" pos:end="381:63">OBJ_PROP_LINK_UNREF_ON_RELEASE</name></expr></argument>, <argument pos:start="381:66" pos:end="381:77"><expr pos:start="381:66" pos:end="381:77"><operator pos:start="381:66" pos:end="381:66">&amp;</operator><name pos:start="381:67" pos:end="381:77">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="383:9" pos:end="385:76"><expr pos:start="383:9" pos:end="385:75"><call pos:start="383:9" pos:end="385:75"><name pos:start="383:9" pos:end="383:32">object_property_set_link</name><argument_list pos:start="383:33" pos:end="385:75">(<argument pos:start="383:34" pos:end="383:48"><expr pos:start="383:34" pos:end="383:48"><call pos:start="383:34" pos:end="383:48"><name pos:start="383:34" pos:end="383:39">OBJECT</name><argument_list pos:start="383:40" pos:end="383:48">(<argument pos:start="383:41" pos:end="383:47"><expr pos:start="383:41" pos:end="383:47"><name pos:start="383:41" pos:end="383:47">machine</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="383:51" pos:end="383:66"><expr pos:start="383:51" pos:end="383:66"><call pos:start="383:51" pos:end="383:66"><name pos:start="383:51" pos:end="383:56">OBJECT</name><argument_list pos:start="383:57" pos:end="383:66">(<argument pos:start="383:58" pos:end="383:65"><expr pos:start="383:58" pos:end="383:65"><name pos:start="383:58" pos:end="383:65">piix4_pm</name></expr></argument>)</argument_list></call></expr></argument>,

                                 <argument pos:start="385:34" pos:end="385:60"><expr pos:start="385:34" pos:end="385:60"><name pos:start="385:34" pos:end="385:60">PC_MACHINE_ACPI_DEVICE_PROP</name></expr></argument>, <argument pos:start="385:63" pos:end="385:74"><expr pos:start="385:63" pos:end="385:74"><operator pos:start="385:63" pos:end="385:63">&amp;</operator><name pos:start="385:64" pos:end="385:74">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="391:5" pos:end="395:5"><if pos:start="391:5" pos:end="395:5">if <condition pos:start="391:8" pos:end="391:20">(<expr pos:start="391:9" pos:end="391:19"><name pos:start="391:9" pos:end="391:19">pci_enabled</name></expr>)</condition> <block pos:start="391:22" pos:end="395:5">{<block_content pos:start="393:9" pos:end="393:36">

        <expr_stmt pos:start="393:9" pos:end="393:36"><expr pos:start="393:9" pos:end="393:35"><call pos:start="393:9" pos:end="393:35"><name pos:start="393:9" pos:end="393:26">pc_pci_device_init</name><argument_list pos:start="393:27" pos:end="393:35">(<argument pos:start="393:28" pos:end="393:34"><expr pos:start="393:28" pos:end="393:34"><name pos:start="393:28" pos:end="393:34">pci_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
