<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25514.c" pos:tabs="8"><macro pos:start="1:1" pos:end="1:14"><name pos:start="1:1" pos:end="1:10">sorecvfrom</name><argument_list pos:start="1:11" pos:end="1:14">(<argument pos:start="1:12" pos:end="1:13">so</argument>)</argument_list></macro>

	<decl_stmt pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:25"><type pos:start="3:9" pos:end="3:23"><name pos:start="3:9" pos:end="3:21"><name pos:start="3:9" pos:end="3:14">struct</name> <name pos:start="3:16" pos:end="3:21">socket</name></name> <modifier pos:start="3:23" pos:end="3:23">*</modifier></type><name pos:start="3:24" pos:end="3:25">so</name></decl>;</decl_stmt>

<block pos:start="5:1" pos:end="189:1">{<block_content pos:start="7:9" pos:end="187:9">

	<decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:26"><name pos:start="7:9" pos:end="7:14">struct</name> <name pos:start="7:16" pos:end="7:26">sockaddr_in</name></name></type> <name pos:start="7:28" pos:end="7:31">addr</name></decl>;</decl_stmt>

	<decl_stmt pos:start="9:9" pos:end="9:49"><decl pos:start="9:9" pos:end="9:48"><type pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:11">int</name></type> <name pos:start="9:13" pos:end="9:19">addrlen</name> <init pos:start="9:21" pos:end="9:48">= <expr pos:start="9:23" pos:end="9:48"><sizeof pos:start="9:23" pos:end="9:48">sizeof<argument_list pos:start="9:29" pos:end="9:48">(<argument pos:start="9:30" pos:end="9:47"><expr pos:start="9:30" pos:end="9:47">struct <name pos:start="9:37" pos:end="9:47">sockaddr_in</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>



	<expr_stmt pos:start="13:9" pos:end="13:33"><expr pos:start="13:9" pos:end="13:32"><call pos:start="13:9" pos:end="13:32"><name pos:start="13:9" pos:end="13:18">DEBUG_CALL</name><argument_list pos:start="13:19" pos:end="13:32">(<argument pos:start="13:20" pos:end="13:31"><expr pos:start="13:20" pos:end="13:31"><literal type="string" pos:start="13:20" pos:end="13:31">"sorecvfrom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt pos:start="15:9" pos:end="15:40"><expr pos:start="15:9" pos:end="15:39"><call pos:start="15:9" pos:end="15:39"><name pos:start="15:9" pos:end="15:17">DEBUG_ARG</name><argument_list pos:start="15:18" pos:end="15:39">(<argument pos:start="15:19" pos:end="15:28"><expr pos:start="15:19" pos:end="15:28"><literal type="string" pos:start="15:19" pos:end="15:28">"so = %lx"</literal></expr></argument>, <argument pos:start="15:31" pos:end="15:38"><expr pos:start="15:31" pos:end="15:38"><operator pos:start="15:31" pos:end="15:31">(</operator><name pos:start="15:32" pos:end="15:35">long</name><operator pos:start="15:36" pos:end="15:36">)</operator><name pos:start="15:37" pos:end="15:38">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	<if_stmt pos:start="19:9" pos:end="187:9"><if pos:start="19:9" pos:end="65:9">if <condition pos:start="19:12" pos:end="19:40">(<expr pos:start="19:13" pos:end="19:39"><name pos:start="19:13" pos:end="19:23"><name pos:start="19:13" pos:end="19:14">so</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:23">so_type</name></name> <operator pos:start="19:25" pos:end="19:26">==</operator> <name pos:start="19:28" pos:end="19:39">IPPROTO_ICMP</name></expr>)</condition> <block pos:start="19:42" pos:end="65:9">{<block_content pos:start="21:11" pos:end="63:25">   <comment type="block" pos:start="19:46" pos:end="19:73">/* This is a "ping" reply */</comment>

	  <decl_stmt pos:start="21:11" pos:end="21:25"><decl pos:start="21:11" pos:end="21:24"><type pos:start="21:11" pos:end="21:14"><name pos:start="21:11" pos:end="21:14">char</name></type> <name pos:start="21:16" pos:end="21:24"><name pos:start="21:16" pos:end="21:19">buff</name><index pos:start="21:20" pos:end="21:24">[<expr pos:start="21:21" pos:end="21:23"><literal type="number" pos:start="21:21" pos:end="21:23">256</literal></expr>]</index></name></decl>;</decl_stmt>

	  <decl_stmt pos:start="23:11" pos:end="23:18"><decl pos:start="23:11" pos:end="23:17"><type pos:start="23:11" pos:end="23:13"><name pos:start="23:11" pos:end="23:13">int</name></type> <name pos:start="23:15" pos:end="23:17">len</name></decl>;</decl_stmt>



	  <expr_stmt pos:start="27:11" pos:end="29:61"><expr pos:start="27:11" pos:end="29:60"><name pos:start="27:11" pos:end="27:13">len</name> <operator pos:start="27:15" pos:end="27:15">=</operator> <call pos:start="27:17" pos:end="29:60"><name pos:start="27:17" pos:end="27:24">recvfrom</name><argument_list pos:start="27:25" pos:end="29:60">(<argument pos:start="27:26" pos:end="27:30"><expr pos:start="27:26" pos:end="27:30"><name pos:start="27:26" pos:end="27:30"><name pos:start="27:26" pos:end="27:27">so</name><operator pos:start="27:28" pos:end="27:29">-&gt;</operator><name pos:start="27:30" pos:end="27:30">s</name></name></expr></argument>, <argument pos:start="27:33" pos:end="27:36"><expr pos:start="27:33" pos:end="27:36"><name pos:start="27:33" pos:end="27:36">buff</name></expr></argument>, <argument pos:start="27:39" pos:end="27:41"><expr pos:start="27:39" pos:end="27:41"><literal type="number" pos:start="27:39" pos:end="27:41">256</literal></expr></argument>, <argument pos:start="27:44" pos:end="27:44"><expr pos:start="27:44" pos:end="27:44"><literal type="number" pos:start="27:44" pos:end="27:44">0</literal></expr></argument>,

			 <argument pos:start="29:26" pos:end="29:49"><expr pos:start="29:26" pos:end="29:49"><operator pos:start="29:26" pos:end="29:26">(</operator>struct <name pos:start="29:34" pos:end="29:41">sockaddr</name> <operator pos:start="29:43" pos:end="29:43">*</operator><operator pos:start="29:44" pos:end="29:44">)</operator><operator pos:start="29:45" pos:end="29:45">&amp;</operator><name pos:start="29:46" pos:end="29:49">addr</name></expr></argument>, <argument pos:start="29:52" pos:end="29:59"><expr pos:start="29:52" pos:end="29:59"><operator pos:start="29:52" pos:end="29:52">&amp;</operator><name pos:start="29:53" pos:end="29:59">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block" pos:start="31:11" pos:end="31:48">/* XXX Check if reply is "correct"? */</comment>



	  <if_stmt pos:start="35:11" pos:end="59:11"><if pos:start="35:11" pos:end="53:11">if<condition pos:start="35:13" pos:end="35:35">(<expr pos:start="35:14" pos:end="35:34"><name pos:start="35:14" pos:end="35:16">len</name> <operator pos:start="35:18" pos:end="35:19">==</operator> <operator pos:start="35:21" pos:end="35:21">-</operator><literal type="number" pos:start="35:22" pos:end="35:22">1</literal> <operator pos:start="35:24" pos:end="35:25">||</operator> <name pos:start="35:27" pos:end="35:29">len</name> <operator pos:start="35:31" pos:end="35:32">==</operator> <literal type="number" pos:start="35:34" pos:end="35:34">0</literal></expr>)</condition> <block pos:start="35:37" pos:end="53:11">{<block_content pos:start="37:13" pos:end="51:71">

	    <decl_stmt pos:start="37:13" pos:end="37:42"><decl pos:start="37:13" pos:end="37:41"><type pos:start="37:13" pos:end="37:18"><name pos:start="37:13" pos:end="37:18">u_char</name></type> <name pos:start="37:20" pos:end="37:23">code</name><init pos:start="37:24" pos:end="37:41">=<expr pos:start="37:25" pos:end="37:41"><name pos:start="37:25" pos:end="37:41">ICMP_UNREACH_PORT</name></expr></init></decl>;</decl_stmt>



	    <if_stmt pos:start="41:13" pos:end="43:64"><if pos:start="41:13" pos:end="41:61">if<condition pos:start="41:15" pos:end="41:37">(<expr pos:start="41:16" pos:end="41:36"><name pos:start="41:16" pos:end="41:20">errno</name> <operator pos:start="41:22" pos:end="41:23">==</operator> <name pos:start="41:25" pos:end="41:36">EHOSTUNREACH</name></expr>)</condition><block type="pseudo" pos:start="41:39" pos:end="41:61"><block_content pos:start="41:39" pos:end="41:61"> <expr_stmt pos:start="41:39" pos:end="41:61"><expr pos:start="41:39" pos:end="41:60"><name pos:start="41:39" pos:end="41:42">code</name><operator pos:start="41:43" pos:end="41:43">=</operator><name pos:start="41:44" pos:end="41:60">ICMP_UNREACH_HOST</name></expr>;</expr_stmt></block_content></block></if>

	    <if type="elseif" pos:start="43:13" pos:end="43:64">else if<condition pos:start="43:20" pos:end="43:41">(<expr pos:start="43:21" pos:end="43:40"><name pos:start="43:21" pos:end="43:25">errno</name> <operator pos:start="43:27" pos:end="43:28">==</operator> <name pos:start="43:30" pos:end="43:40">ENETUNREACH</name></expr>)</condition><block type="pseudo" pos:start="43:43" pos:end="43:64"><block_content pos:start="43:43" pos:end="43:64"> <expr_stmt pos:start="43:43" pos:end="43:64"><expr pos:start="43:43" pos:end="43:63"><name pos:start="43:43" pos:end="43:46">code</name><operator pos:start="43:47" pos:end="43:47">=</operator><name pos:start="43:48" pos:end="43:63">ICMP_UNREACH_NET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="47:13" pos:end="49:48"><expr pos:start="47:13" pos:end="49:47"><call pos:start="47:13" pos:end="49:47"><name pos:start="47:13" pos:end="47:22">DEBUG_MISC</name><argument_list pos:start="47:23" pos:end="49:47">(<argument pos:start="47:24" pos:end="49:46"><expr pos:start="47:24" pos:end="49:46"><operator pos:start="47:24" pos:end="47:24">(</operator><name pos:start="47:25" pos:end="47:27">dfd</name><operator pos:start="47:28" pos:end="47:28">,</operator><literal type="string" pos:start="47:29" pos:end="47:58">" udp icmp rx errno = %d-%s\n"</literal><operator pos:start="47:59" pos:end="47:59">,</operator>

			<name pos:start="49:25" pos:end="49:29">errno</name><operator pos:start="49:30" pos:end="49:30">,</operator><call pos:start="49:31" pos:end="49:45"><name pos:start="49:31" pos:end="49:38">strerror</name><argument_list pos:start="49:39" pos:end="49:45">(<argument pos:start="49:40" pos:end="49:44"><expr pos:start="49:40" pos:end="49:44"><name pos:start="49:40" pos:end="49:44">errno</name></expr></argument>)</argument_list></call><operator pos:start="49:46" pos:end="49:46">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="51:13" pos:end="51:71"><expr pos:start="51:13" pos:end="51:70"><call pos:start="51:13" pos:end="51:70"><name pos:start="51:13" pos:end="51:22">icmp_error</name><argument_list pos:start="51:23" pos:end="51:70">(<argument pos:start="51:24" pos:end="51:31"><expr pos:start="51:24" pos:end="51:31"><name pos:start="51:24" pos:end="51:31"><name pos:start="51:24" pos:end="51:25">so</name><operator pos:start="51:26" pos:end="51:27">-&gt;</operator><name pos:start="51:28" pos:end="51:31">so_m</name></name></expr></argument>, <argument pos:start="51:34" pos:end="51:45"><expr pos:start="51:34" pos:end="51:45"><name pos:start="51:34" pos:end="51:45">ICMP_UNREACH</name></expr></argument>,<argument pos:start="51:47" pos:end="51:50"><expr pos:start="51:47" pos:end="51:50"><name pos:start="51:47" pos:end="51:50">code</name></expr></argument>, <argument pos:start="51:53" pos:end="51:53"><expr pos:start="51:53" pos:end="51:53"><literal type="number" pos:start="51:53" pos:end="51:53">0</literal></expr></argument>,<argument pos:start="51:55" pos:end="51:69"><expr pos:start="51:55" pos:end="51:69"><call pos:start="51:55" pos:end="51:69"><name pos:start="51:55" pos:end="51:62">strerror</name><argument_list pos:start="51:63" pos:end="51:69">(<argument pos:start="51:64" pos:end="51:68"><expr pos:start="51:64" pos:end="51:68"><name pos:start="51:64" pos:end="51:68">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if> <else pos:start="53:13" pos:end="59:11">else <block pos:start="53:18" pos:end="59:11">{<block_content pos:start="55:13" pos:end="57:25">

	    <expr_stmt pos:start="55:13" pos:end="55:35"><expr pos:start="55:13" pos:end="55:34"><call pos:start="55:13" pos:end="55:34"><name pos:start="55:13" pos:end="55:24">icmp_reflect</name><argument_list pos:start="55:25" pos:end="55:34">(<argument pos:start="55:26" pos:end="55:33"><expr pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:33"><name pos:start="55:26" pos:end="55:27">so</name><operator pos:start="55:28" pos:end="55:29">-&gt;</operator><name pos:start="55:30" pos:end="55:33">so_m</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="57:13" pos:end="57:25"><expr pos:start="57:13" pos:end="57:24"><name pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:14">so</name><operator pos:start="57:15" pos:end="57:16">-&gt;</operator><name pos:start="57:17" pos:end="57:20">so_m</name></name> <operator pos:start="57:22" pos:end="57:22">=</operator> <literal type="number" pos:start="57:24" pos:end="57:24">0</literal></expr>;</expr_stmt> <comment type="block" pos:start="57:27" pos:end="57:56">/* Don't m_free() it again! */</comment>

	  </block_content>}</block></else></if_stmt>

	  <comment type="block" pos:start="61:11" pos:end="61:62">/* No need for this socket anymore, udp_detach it */</comment>

	  <expr_stmt pos:start="63:11" pos:end="63:25"><expr pos:start="63:11" pos:end="63:24"><call pos:start="63:11" pos:end="63:24"><name pos:start="63:11" pos:end="63:20">udp_detach</name><argument_list pos:start="63:21" pos:end="63:24">(<argument pos:start="63:22" pos:end="63:23"><expr pos:start="63:22" pos:end="63:23"><name pos:start="63:22" pos:end="63:23">so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else pos:start="65:11" pos:end="187:9">else <block pos:start="65:16" pos:end="187:9">{<block_content pos:start="67:11" pos:end="185:11">                            	<comment type="block" pos:start="65:49" pos:end="65:75">/* A "normal" UDP packet */</comment>

	  <decl_stmt pos:start="67:11" pos:end="67:25"><decl pos:start="67:11" pos:end="67:24"><type pos:start="67:11" pos:end="67:23"><name pos:start="67:11" pos:end="67:21"><name pos:start="67:11" pos:end="67:16">struct</name> <name pos:start="67:18" pos:end="67:21">mbuf</name></name> <modifier pos:start="67:23" pos:end="67:23">*</modifier></type><name pos:start="67:24" pos:end="67:24">m</name></decl>;</decl_stmt>

	  <decl_stmt pos:start="69:11" pos:end="69:21"><decl pos:start="69:11" pos:end="69:17"><type pos:start="69:11" pos:end="69:13"><name pos:start="69:11" pos:end="69:13">int</name></type> <name pos:start="69:15" pos:end="69:17">len</name></decl>, <decl pos:start="69:20" pos:end="69:20"><type ref="prev" pos:start="69:11" pos:end="69:13"/><name pos:start="69:20" pos:end="69:20">n</name></decl>;</decl_stmt>



	  <if_stmt pos:start="73:11" pos:end="73:37"><if pos:start="73:11" pos:end="73:37">if <condition pos:start="73:14" pos:end="73:29">(<expr pos:start="73:15" pos:end="73:28"><operator pos:start="73:15" pos:end="73:15">!</operator><operator pos:start="73:16" pos:end="73:16">(</operator><name pos:start="73:17" pos:end="73:17">m</name> <operator pos:start="73:19" pos:end="73:19">=</operator> <call pos:start="73:21" pos:end="73:27"><name pos:start="73:21" pos:end="73:25">m_get</name><argument_list pos:start="73:26" pos:end="73:27">()</argument_list></call><operator pos:start="73:28" pos:end="73:28">)</operator></expr>)</condition><block type="pseudo" pos:start="73:31" pos:end="73:37"><block_content pos:start="73:31" pos:end="73:37"> <return pos:start="73:31" pos:end="73:37">return;</return></block_content></block></if></if_stmt>

	  <expr_stmt pos:start="75:11" pos:end="75:37"><expr pos:start="75:11" pos:end="75:36"><name pos:start="75:11" pos:end="75:19"><name pos:start="75:11" pos:end="75:11">m</name><operator pos:start="75:12" pos:end="75:13">-&gt;</operator><name pos:start="75:14" pos:end="75:19">m_data</name></name> <operator pos:start="75:21" pos:end="75:22">+=</operator> <name pos:start="75:24" pos:end="75:36">IF_MAXLINKHDR</name></expr>;</expr_stmt>



	  <comment type="block" pos:start="79:11" pos:end="85:13">/*

	   * XXX Shouldn't FIONREAD packets destined for port 53,

	   * but I don't know the max packet size for DNS lookups

	   */</comment>

	  <expr_stmt pos:start="87:11" pos:end="87:30"><expr pos:start="87:11" pos:end="87:29"><name pos:start="87:11" pos:end="87:13">len</name> <operator pos:start="87:15" pos:end="87:15">=</operator> <call pos:start="87:17" pos:end="87:29"><name pos:start="87:17" pos:end="87:26">M_FREEROOM</name><argument_list pos:start="87:27" pos:end="87:29">(<argument pos:start="87:28" pos:end="87:28"><expr pos:start="87:28" pos:end="87:28"><name pos:start="87:28" pos:end="87:28">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <comment type="block" pos:start="89:11" pos:end="89:48">/* if (so-&gt;so_fport != htons(53)) { */</comment>

	  <expr_stmt pos:start="91:11" pos:end="91:43"><expr pos:start="91:11" pos:end="91:42"><call pos:start="91:11" pos:end="91:42"><name pos:start="91:11" pos:end="91:21">ioctlsocket</name><argument_list pos:start="91:22" pos:end="91:42">(<argument pos:start="91:23" pos:end="91:27"><expr pos:start="91:23" pos:end="91:27"><name pos:start="91:23" pos:end="91:27"><name pos:start="91:23" pos:end="91:24">so</name><operator pos:start="91:25" pos:end="91:26">-&gt;</operator><name pos:start="91:27" pos:end="91:27">s</name></name></expr></argument>, <argument pos:start="91:30" pos:end="91:37"><expr pos:start="91:30" pos:end="91:37"><name pos:start="91:30" pos:end="91:37">FIONREAD</name></expr></argument>, <argument pos:start="91:40" pos:end="91:41"><expr pos:start="91:40" pos:end="91:41"><operator pos:start="91:40" pos:end="91:40">&amp;</operator><name pos:start="91:41" pos:end="91:41">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



	  <if_stmt pos:start="95:11" pos:end="103:11"><if pos:start="95:11" pos:end="103:11">if <condition pos:start="95:14" pos:end="95:22">(<expr pos:start="95:15" pos:end="95:21"><name pos:start="95:15" pos:end="95:15">n</name> <operator pos:start="95:17" pos:end="95:17">&gt;</operator> <name pos:start="95:19" pos:end="95:21">len</name></expr>)</condition> <block pos:start="95:24" pos:end="103:11">{<block_content pos:start="97:13" pos:end="101:32">

	    <expr_stmt pos:start="97:13" pos:end="97:58"><expr pos:start="97:13" pos:end="97:57"><name pos:start="97:13" pos:end="97:13">n</name> <operator pos:start="97:15" pos:end="97:15">=</operator> <operator pos:start="97:17" pos:end="97:17">(</operator><name pos:start="97:18" pos:end="97:26"><name pos:start="97:18" pos:end="97:18">m</name><operator pos:start="97:19" pos:end="97:20">-&gt;</operator><name pos:start="97:21" pos:end="97:26">m_data</name></name> <operator pos:start="97:28" pos:end="97:28">-</operator> <name pos:start="97:30" pos:end="97:37"><name pos:start="97:30" pos:end="97:30">m</name><operator pos:start="97:31" pos:end="97:32">-&gt;</operator><name pos:start="97:33" pos:end="97:37">m_dat</name></name><operator pos:start="97:38" pos:end="97:38">)</operator> <operator pos:start="97:40" pos:end="97:40">+</operator> <name pos:start="97:42" pos:end="97:49"><name pos:start="97:42" pos:end="97:42">m</name><operator pos:start="97:43" pos:end="97:44">-&gt;</operator><name pos:start="97:45" pos:end="97:49">m_len</name></name> <operator pos:start="97:51" pos:end="97:51">+</operator> <name pos:start="97:53" pos:end="97:53">n</name> <operator pos:start="97:55" pos:end="97:55">+</operator> <literal type="number" pos:start="97:57" pos:end="97:57">1</literal></expr>;</expr_stmt>

	    <expr_stmt pos:start="99:13" pos:end="99:24"><expr pos:start="99:13" pos:end="99:23"><call pos:start="99:13" pos:end="99:23"><name pos:start="99:13" pos:end="99:17">m_inc</name><argument_list pos:start="99:18" pos:end="99:23">(<argument pos:start="99:19" pos:end="99:19"><expr pos:start="99:19" pos:end="99:19"><name pos:start="99:19" pos:end="99:19">m</name></expr></argument>, <argument pos:start="99:22" pos:end="99:22"><expr pos:start="99:22" pos:end="99:22"><name pos:start="99:22" pos:end="99:22">n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="101:13" pos:end="101:32"><expr pos:start="101:13" pos:end="101:31"><name pos:start="101:13" pos:end="101:15">len</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <call pos:start="101:19" pos:end="101:31"><name pos:start="101:19" pos:end="101:28">M_FREEROOM</name><argument_list pos:start="101:29" pos:end="101:31">(<argument pos:start="101:30" pos:end="101:30"><expr pos:start="101:30" pos:end="101:30"><name pos:start="101:30" pos:end="101:30">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if></if_stmt>

	  <comment type="block" pos:start="105:11" pos:end="105:17">/* } */</comment>



	  <expr_stmt pos:start="109:11" pos:end="111:66"><expr pos:start="109:11" pos:end="111:65"><name pos:start="109:11" pos:end="109:18"><name pos:start="109:11" pos:end="109:11">m</name><operator pos:start="109:12" pos:end="109:13">-&gt;</operator><name pos:start="109:14" pos:end="109:18">m_len</name></name> <operator pos:start="109:20" pos:end="109:20">=</operator> <call pos:start="109:22" pos:end="111:65"><name pos:start="109:22" pos:end="109:29">recvfrom</name><argument_list pos:start="109:30" pos:end="111:65">(<argument pos:start="109:31" pos:end="109:35"><expr pos:start="109:31" pos:end="109:35"><name pos:start="109:31" pos:end="109:35"><name pos:start="109:31" pos:end="109:32">so</name><operator pos:start="109:33" pos:end="109:34">-&gt;</operator><name pos:start="109:35" pos:end="109:35">s</name></name></expr></argument>, <argument pos:start="109:38" pos:end="109:46"><expr pos:start="109:38" pos:end="109:46"><name pos:start="109:38" pos:end="109:46"><name pos:start="109:38" pos:end="109:38">m</name><operator pos:start="109:39" pos:end="109:40">-&gt;</operator><name pos:start="109:41" pos:end="109:46">m_data</name></name></expr></argument>, <argument pos:start="109:49" pos:end="109:51"><expr pos:start="109:49" pos:end="109:51"><name pos:start="109:49" pos:end="109:51">len</name></expr></argument>, <argument pos:start="109:54" pos:end="109:54"><expr pos:start="109:54" pos:end="109:54"><literal type="number" pos:start="109:54" pos:end="109:54">0</literal></expr></argument>,

			      <argument pos:start="111:31" pos:end="111:54"><expr pos:start="111:31" pos:end="111:54"><operator pos:start="111:31" pos:end="111:31">(</operator>struct <name pos:start="111:39" pos:end="111:46">sockaddr</name> <operator pos:start="111:48" pos:end="111:48">*</operator><operator pos:start="111:49" pos:end="111:49">)</operator><operator pos:start="111:50" pos:end="111:50">&amp;</operator><name pos:start="111:51" pos:end="111:54">addr</name></expr></argument>, <argument pos:start="111:57" pos:end="111:64"><expr pos:start="111:57" pos:end="111:64"><operator pos:start="111:57" pos:end="111:57">&amp;</operator><name pos:start="111:58" pos:end="111:64">addrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <expr_stmt pos:start="113:11" pos:end="115:56"><expr pos:start="113:11" pos:end="115:55"><call pos:start="113:11" pos:end="115:55"><name pos:start="113:11" pos:end="113:20">DEBUG_MISC</name><argument_list pos:start="113:21" pos:end="115:55">(<argument pos:start="113:22" pos:end="115:54"><expr pos:start="113:22" pos:end="115:54"><operator pos:start="113:22" pos:end="113:22">(</operator><name pos:start="113:23" pos:end="113:25">dfd</name><operator pos:start="113:26" pos:end="113:26">,</operator> <literal type="string" pos:start="113:28" pos:end="113:62">" did recvfrom %d, errno = %d-%s\n"</literal><operator pos:start="113:63" pos:end="113:63">,</operator>

		      <name pos:start="115:23" pos:end="115:30"><name pos:start="115:23" pos:end="115:23">m</name><operator pos:start="115:24" pos:end="115:25">-&gt;</operator><name pos:start="115:26" pos:end="115:30">m_len</name></name><operator pos:start="115:31" pos:end="115:31">,</operator> <name pos:start="115:33" pos:end="115:37">errno</name><operator pos:start="115:38" pos:end="115:38">,</operator><call pos:start="115:39" pos:end="115:53"><name pos:start="115:39" pos:end="115:46">strerror</name><argument_list pos:start="115:47" pos:end="115:53">(<argument pos:start="115:48" pos:end="115:52"><expr pos:start="115:48" pos:end="115:52"><name pos:start="115:48" pos:end="115:52">errno</name></expr></argument>)</argument_list></call><operator pos:start="115:54" pos:end="115:54">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  <if_stmt pos:start="117:11" pos:end="185:11"><if pos:start="117:11" pos:end="135:11">if<condition pos:start="117:13" pos:end="117:24">(<expr pos:start="117:14" pos:end="117:23"><name pos:start="117:14" pos:end="117:21"><name pos:start="117:14" pos:end="117:14">m</name><operator pos:start="117:15" pos:end="117:16">-&gt;</operator><name pos:start="117:17" pos:end="117:21">m_len</name></name><operator pos:start="117:22" pos:end="117:22">&lt;</operator><literal type="number" pos:start="117:23" pos:end="117:23">0</literal></expr>)</condition> <block pos:start="117:26" pos:end="135:11">{<block_content pos:start="119:13" pos:end="133:22">

	    <decl_stmt pos:start="119:13" pos:end="119:42"><decl pos:start="119:13" pos:end="119:41"><type pos:start="119:13" pos:end="119:18"><name pos:start="119:13" pos:end="119:18">u_char</name></type> <name pos:start="119:20" pos:end="119:23">code</name><init pos:start="119:24" pos:end="119:41">=<expr pos:start="119:25" pos:end="119:41"><name pos:start="119:25" pos:end="119:41">ICMP_UNREACH_PORT</name></expr></init></decl>;</decl_stmt>



	    <if_stmt pos:start="123:13" pos:end="125:64"><if pos:start="123:13" pos:end="123:61">if<condition pos:start="123:15" pos:end="123:37">(<expr pos:start="123:16" pos:end="123:36"><name pos:start="123:16" pos:end="123:20">errno</name> <operator pos:start="123:22" pos:end="123:23">==</operator> <name pos:start="123:25" pos:end="123:36">EHOSTUNREACH</name></expr>)</condition><block type="pseudo" pos:start="123:39" pos:end="123:61"><block_content pos:start="123:39" pos:end="123:61"> <expr_stmt pos:start="123:39" pos:end="123:61"><expr pos:start="123:39" pos:end="123:60"><name pos:start="123:39" pos:end="123:42">code</name><operator pos:start="123:43" pos:end="123:43">=</operator><name pos:start="123:44" pos:end="123:60">ICMP_UNREACH_HOST</name></expr>;</expr_stmt></block_content></block></if>

	    <if type="elseif" pos:start="125:13" pos:end="125:64">else if<condition pos:start="125:20" pos:end="125:41">(<expr pos:start="125:21" pos:end="125:40"><name pos:start="125:21" pos:end="125:25">errno</name> <operator pos:start="125:27" pos:end="125:28">==</operator> <name pos:start="125:30" pos:end="125:40">ENETUNREACH</name></expr>)</condition><block type="pseudo" pos:start="125:43" pos:end="125:64"><block_content pos:start="125:43" pos:end="125:64"> <expr_stmt pos:start="125:43" pos:end="125:64"><expr pos:start="125:43" pos:end="125:63"><name pos:start="125:43" pos:end="125:46">code</name><operator pos:start="125:47" pos:end="125:47">=</operator><name pos:start="125:48" pos:end="125:63">ICMP_UNREACH_NET</name></expr>;</expr_stmt></block_content></block></if></if_stmt>



	    <expr_stmt pos:start="129:13" pos:end="129:75"><expr pos:start="129:13" pos:end="129:74"><call pos:start="129:13" pos:end="129:74"><name pos:start="129:13" pos:end="129:22">DEBUG_MISC</name><argument_list pos:start="129:23" pos:end="129:74">(<argument pos:start="129:24" pos:end="129:73"><expr pos:start="129:24" pos:end="129:73"><operator pos:start="129:24" pos:end="129:24">(</operator><name pos:start="129:25" pos:end="129:27">dfd</name><operator pos:start="129:28" pos:end="129:28">,</operator><literal type="string" pos:start="129:29" pos:end="129:66">" rx error, tx icmp ICMP_UNREACH:%i\n"</literal><operator pos:start="129:67" pos:end="129:67">,</operator> <name pos:start="129:69" pos:end="129:72">code</name><operator pos:start="129:73" pos:end="129:73">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="131:13" pos:end="131:71"><expr pos:start="131:13" pos:end="131:70"><call pos:start="131:13" pos:end="131:70"><name pos:start="131:13" pos:end="131:22">icmp_error</name><argument_list pos:start="131:23" pos:end="131:70">(<argument pos:start="131:24" pos:end="131:31"><expr pos:start="131:24" pos:end="131:31"><name pos:start="131:24" pos:end="131:31"><name pos:start="131:24" pos:end="131:25">so</name><operator pos:start="131:26" pos:end="131:27">-&gt;</operator><name pos:start="131:28" pos:end="131:31">so_m</name></name></expr></argument>, <argument pos:start="131:34" pos:end="131:45"><expr pos:start="131:34" pos:end="131:45"><name pos:start="131:34" pos:end="131:45">ICMP_UNREACH</name></expr></argument>,<argument pos:start="131:47" pos:end="131:50"><expr pos:start="131:47" pos:end="131:50"><name pos:start="131:47" pos:end="131:50">code</name></expr></argument>, <argument pos:start="131:53" pos:end="131:53"><expr pos:start="131:53" pos:end="131:53"><literal type="number" pos:start="131:53" pos:end="131:53">0</literal></expr></argument>,<argument pos:start="131:55" pos:end="131:69"><expr pos:start="131:55" pos:end="131:69"><call pos:start="131:55" pos:end="131:69"><name pos:start="131:55" pos:end="131:62">strerror</name><argument_list pos:start="131:63" pos:end="131:69">(<argument pos:start="131:64" pos:end="131:68"><expr pos:start="131:64" pos:end="131:68"><name pos:start="131:64" pos:end="131:68">errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	    <expr_stmt pos:start="133:13" pos:end="133:22"><expr pos:start="133:13" pos:end="133:21"><call pos:start="133:13" pos:end="133:21"><name pos:start="133:13" pos:end="133:18">m_free</name><argument_list pos:start="133:19" pos:end="133:21">(<argument pos:start="133:20" pos:end="133:20"><expr pos:start="133:20" pos:end="133:20"><name pos:start="133:20" pos:end="133:20">m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></if> <else pos:start="135:13" pos:end="185:11">else <block pos:start="135:18" pos:end="185:11">{<block_content pos:start="149:13" pos:end="183:37">

	  <comment type="block" pos:start="137:11" pos:end="147:13">/*

	   * Hack: domain name lookup will be used the most for UDP,

	   * and since they'll only be used once there's no need

	   * for the 4 minute (or whatever) timeout... So we time them

	   * out much quicker (10 seconds  for now...)

	   */</comment>

	    <if_stmt pos:start="149:13" pos:end="159:13"><if pos:start="149:13" pos:end="159:13">if <condition pos:start="149:16" pos:end="149:30">(<expr pos:start="149:17" pos:end="149:29"><name pos:start="149:17" pos:end="149:29"><name pos:start="149:17" pos:end="149:18">so</name><operator pos:start="149:19" pos:end="149:20">-&gt;</operator><name pos:start="149:21" pos:end="149:29">so_expire</name></name></expr>)</condition> <block pos:start="149:32" pos:end="159:13">{<block_content pos:start="151:15" pos:end="157:52">

	      <if_stmt pos:start="151:15" pos:end="157:52"><if pos:start="151:15" pos:end="153:56">if <condition pos:start="151:18" pos:end="151:44">(<expr pos:start="151:19" pos:end="151:43"><name pos:start="151:19" pos:end="151:30"><name pos:start="151:19" pos:end="151:20">so</name><operator pos:start="151:21" pos:end="151:22">-&gt;</operator><name pos:start="151:23" pos:end="151:30">so_fport</name></name> <operator pos:start="151:32" pos:end="151:33">==</operator> <call pos:start="151:35" pos:end="151:43"><name pos:start="151:35" pos:end="151:39">htons</name><argument_list pos:start="151:40" pos:end="151:43">(<argument pos:start="151:41" pos:end="151:42"><expr pos:start="151:41" pos:end="151:42"><literal type="number" pos:start="151:41" pos:end="151:42">53</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="153:17" pos:end="153:56"><block_content pos:start="153:17" pos:end="153:56">

		<expr_stmt pos:start="153:17" pos:end="153:56"><expr pos:start="153:17" pos:end="153:55"><name pos:start="153:17" pos:end="153:29"><name pos:start="153:17" pos:end="153:18">so</name><operator pos:start="153:19" pos:end="153:20">-&gt;</operator><name pos:start="153:21" pos:end="153:29">so_expire</name></name> <operator pos:start="153:31" pos:end="153:31">=</operator> <name pos:start="153:33" pos:end="153:39">curtime</name> <operator pos:start="153:41" pos:end="153:41">+</operator> <name pos:start="153:43" pos:end="153:55">SO_EXPIREFAST</name></expr>;</expr_stmt></block_content></block></if>

	      <else pos:start="155:15" pos:end="157:52">else<block type="pseudo" pos:start="157:17" pos:end="157:52"><block_content pos:start="157:17" pos:end="157:52">

		<expr_stmt pos:start="157:17" pos:end="157:52"><expr pos:start="157:17" pos:end="157:51"><name pos:start="157:17" pos:end="157:29"><name pos:start="157:17" pos:end="157:18">so</name><operator pos:start="157:19" pos:end="157:20">-&gt;</operator><name pos:start="157:21" pos:end="157:29">so_expire</name></name> <operator pos:start="157:31" pos:end="157:31">=</operator> <name pos:start="157:33" pos:end="157:39">curtime</name> <operator pos:start="157:41" pos:end="157:41">+</operator> <name pos:start="157:43" pos:end="157:51">SO_EXPIRE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

	    </block_content>}</block></if></if_stmt>



	    <comment type="block" pos:start="163:13" pos:end="171:15">/*		if (m-&gt;m_len == len) {

	     *			m_inc(m, MINCSIZE);

	     *			m-&gt;m_len = 0;

	     *		}

	     */</comment>



	    <comment type="block" pos:start="175:13" pos:end="181:15">/*

	     * If this packet was destined for CTL_ADDR,

	     * make it look like that's where it came from, done by udp_output

	     */</comment>

	    <expr_stmt pos:start="183:13" pos:end="183:37"><expr pos:start="183:13" pos:end="183:36"><call pos:start="183:13" pos:end="183:36"><name pos:start="183:13" pos:end="183:22">udp_output</name><argument_list pos:start="183:23" pos:end="183:36">(<argument pos:start="183:24" pos:end="183:25"><expr pos:start="183:24" pos:end="183:25"><name pos:start="183:24" pos:end="183:25">so</name></expr></argument>, <argument pos:start="183:28" pos:end="183:28"><expr pos:start="183:28" pos:end="183:28"><name pos:start="183:28" pos:end="183:28">m</name></expr></argument>, <argument pos:start="183:31" pos:end="183:35"><expr pos:start="183:31" pos:end="183:35"><operator pos:start="183:31" pos:end="183:31">&amp;</operator><name pos:start="183:32" pos:end="183:35">addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	  </block_content>}</block></else></if_stmt> <comment type="block" pos:start="185:13" pos:end="185:26">/* rx error */</comment>

	</block_content>}</block></else></if_stmt> <comment type="block" pos:start="187:11" pos:end="187:30">/* if ping packet */</comment>

</block_content>}</block>
</unit>
