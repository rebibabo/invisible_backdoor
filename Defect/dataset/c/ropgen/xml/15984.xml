<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/15984.c" pos:tabs="8"><function pos:start="1:1" pos:end="1207:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:19">gen_sse</name><parameter_list pos:start="1:20" pos:end="1:77">(<parameter pos:start="1:21" pos:end="1:35"><decl pos:start="1:21" pos:end="1:35"><type pos:start="1:21" pos:end="1:35"><name pos:start="1:21" pos:end="1:32">DisasContext</name> <modifier pos:start="1:34" pos:end="1:34">*</modifier></type><name pos:start="1:35" pos:end="1:35">s</name></decl></parameter>, <parameter pos:start="1:38" pos:end="1:42"><decl pos:start="1:38" pos:end="1:42"><type pos:start="1:38" pos:end="1:42"><name pos:start="1:38" pos:end="1:40">int</name></type> <name pos:start="1:42" pos:end="1:42">b</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:65"><decl pos:start="1:45" pos:end="1:65"><type pos:start="1:45" pos:end="1:65"><name pos:start="1:45" pos:end="1:56">target_ulong</name></type> <name pos:start="1:58" pos:end="1:65">pc_start</name></decl></parameter>, <parameter pos:start="1:68" pos:end="1:76"><decl pos:start="1:68" pos:end="1:76"><type pos:start="1:68" pos:end="1:76"><name pos:start="1:68" pos:end="1:70">int</name></type> <name pos:start="1:72" pos:end="1:76">rex_r</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="1207:1">{<block_content pos:start="5:5" pos:end="1205:5">

    <decl_stmt pos:start="5:5" pos:end="5:52"><decl pos:start="5:5" pos:end="5:10"><type pos:start="5:5" pos:end="5:7"><name pos:start="5:5" pos:end="5:7">int</name></type> <name pos:start="5:9" pos:end="5:10">b1</name></decl>, <decl pos:start="5:13" pos:end="5:22"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:13" pos:end="5:22">op1_offset</name></decl>, <decl pos:start="5:25" pos:end="5:34"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:25" pos:end="5:34">op2_offset</name></decl>, <decl pos:start="5:37" pos:end="5:42"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:37" pos:end="5:42">is_xmm</name></decl>, <decl pos:start="5:45" pos:end="5:47"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:45" pos:end="5:47">val</name></decl>, <decl pos:start="5:50" pos:end="5:51"><type ref="prev" pos:start="5:5" pos:end="5:7"/><name pos:start="5:50" pos:end="5:51">ot</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:51"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">modrm</name></decl>, <decl pos:start="7:16" pos:end="7:18"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:18">mod</name></decl>, <decl pos:start="7:21" pos:end="7:22"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:21" pos:end="7:22">rm</name></decl>, <decl pos:start="7:25" pos:end="7:27"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:25" pos:end="7:27">reg</name></decl>, <decl pos:start="7:30" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:30" pos:end="7:37">reg_addr</name></decl>, <decl pos:start="7:40" pos:end="7:50"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:50">offset_addr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:16"><name pos:start="9:5" pos:end="9:14">GenOpFunc2</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:23">sse_op2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:24"><decl pos:start="11:5" pos:end="11:23"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">GenOpFunc3</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:23">sse_op3</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:14"><expr pos:start="15:5" pos:end="15:13"><name pos:start="15:5" pos:end="15:5">b</name> <operator pos:start="15:7" pos:end="15:8">&amp;=</operator> <literal type="number" pos:start="15:10" pos:end="15:13">0xff</literal></expr>;</expr_stmt>

    <if_stmt pos:start="17:5" pos:end="31:15"><if pos:start="17:5" pos:end="19:15">if <condition pos:start="17:8" pos:end="17:32">(<expr pos:start="17:9" pos:end="17:31"><name pos:start="17:9" pos:end="17:17"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:17">prefix</name></name> <operator pos:start="17:19" pos:end="17:19">&amp;</operator> <name pos:start="17:21" pos:end="17:31">PREFIX_DATA</name></expr>)</condition><block type="pseudo" pos:start="19:9" pos:end="19:15"><block_content pos:start="19:9" pos:end="19:15">

        <expr_stmt pos:start="19:9" pos:end="19:15"><expr pos:start="19:9" pos:end="19:14"><name pos:start="19:9" pos:end="19:10">b1</name> <operator pos:start="19:12" pos:end="19:12">=</operator> <literal type="number" pos:start="19:14" pos:end="19:14">1</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="21:5" pos:end="23:15">else if <condition pos:start="21:13" pos:end="21:37">(<expr pos:start="21:14" pos:end="21:36"><name pos:start="21:14" pos:end="21:22"><name pos:start="21:14" pos:end="21:14">s</name><operator pos:start="21:15" pos:end="21:16">-&gt;</operator><name pos:start="21:17" pos:end="21:22">prefix</name></name> <operator pos:start="21:24" pos:end="21:24">&amp;</operator> <name pos:start="21:26" pos:end="21:36">PREFIX_REPZ</name></expr>)</condition><block type="pseudo" pos:start="23:9" pos:end="23:15"><block_content pos:start="23:9" pos:end="23:15">

        <expr_stmt pos:start="23:9" pos:end="23:15"><expr pos:start="23:9" pos:end="23:14"><name pos:start="23:9" pos:end="23:10">b1</name> <operator pos:start="23:12" pos:end="23:12">=</operator> <literal type="number" pos:start="23:14" pos:end="23:14">2</literal></expr>;</expr_stmt></block_content></block></if>

    <if type="elseif" pos:start="25:5" pos:end="27:15">else if <condition pos:start="25:13" pos:end="25:38">(<expr pos:start="25:14" pos:end="25:37"><name pos:start="25:14" pos:end="25:22"><name pos:start="25:14" pos:end="25:14">s</name><operator pos:start="25:15" pos:end="25:16">-&gt;</operator><name pos:start="25:17" pos:end="25:22">prefix</name></name> <operator pos:start="25:24" pos:end="25:24">&amp;</operator> <name pos:start="25:26" pos:end="25:37">PREFIX_REPNZ</name></expr>)</condition><block type="pseudo" pos:start="27:9" pos:end="27:15"><block_content pos:start="27:9" pos:end="27:15">

        <expr_stmt pos:start="27:9" pos:end="27:15"><expr pos:start="27:9" pos:end="27:14"><name pos:start="27:9" pos:end="27:10">b1</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">3</literal></expr>;</expr_stmt></block_content></block></if>

    <else pos:start="29:5" pos:end="31:15">else<block type="pseudo" pos:start="31:9" pos:end="31:15"><block_content pos:start="31:9" pos:end="31:15">

        <expr_stmt pos:start="31:9" pos:end="31:15"><expr pos:start="31:9" pos:end="31:14"><name pos:start="31:9" pos:end="31:10">b1</name> <operator pos:start="31:12" pos:end="31:12">=</operator> <literal type="number" pos:start="31:14" pos:end="31:14">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:35"><expr pos:start="33:5" pos:end="33:34"><name pos:start="33:5" pos:end="33:11">sse_op2</name> <operator pos:start="33:13" pos:end="33:13">=</operator> <name pos:start="33:15" pos:end="33:34"><name pos:start="33:15" pos:end="33:27">sse_op_table1</name><index pos:start="33:28" pos:end="33:30">[<expr pos:start="33:29" pos:end="33:29"><name pos:start="33:29" pos:end="33:29">b</name></expr>]</index><index pos:start="33:31" pos:end="33:34">[<expr pos:start="33:32" pos:end="33:33"><name pos:start="33:32" pos:end="33:33">b1</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt pos:start="35:5" pos:end="37:24"><if pos:start="35:5" pos:end="37:24">if <condition pos:start="35:8" pos:end="35:17">(<expr pos:start="35:9" pos:end="35:16"><operator pos:start="35:9" pos:end="35:9">!</operator><name pos:start="35:10" pos:end="35:16">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:24"><block_content pos:start="37:9" pos:end="37:24">

        <goto pos:start="37:9" pos:end="37:24">goto <name pos:start="37:14" pos:end="37:23">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="39:5" pos:end="57:5"><if pos:start="39:5" pos:end="43:5">if <condition pos:start="39:8" pos:end="39:59">(<expr pos:start="39:9" pos:end="39:58"><operator pos:start="39:9" pos:end="39:9">(</operator><name pos:start="39:10" pos:end="39:10">b</name> <operator pos:start="39:12" pos:end="39:13">&lt;=</operator> <literal type="number" pos:start="39:15" pos:end="39:18">0x5f</literal> <operator pos:start="39:20" pos:end="39:21">&amp;&amp;</operator> <name pos:start="39:23" pos:end="39:23">b</name> <operator pos:start="39:25" pos:end="39:26">&gt;=</operator> <literal type="number" pos:start="39:28" pos:end="39:31">0x10</literal><operator pos:start="39:32" pos:end="39:32">)</operator> <operator pos:start="39:34" pos:end="39:35">||</operator> <name pos:start="39:37" pos:end="39:37">b</name> <operator pos:start="39:39" pos:end="39:40">==</operator> <literal type="number" pos:start="39:42" pos:end="39:45">0xc6</literal> <operator pos:start="39:47" pos:end="39:48">||</operator> <name pos:start="39:50" pos:end="39:50">b</name> <operator pos:start="39:52" pos:end="39:53">==</operator> <literal type="number" pos:start="39:55" pos:end="39:58">0xc2</literal></expr>)</condition> <block pos:start="39:61" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:19">

        <expr_stmt pos:start="41:9" pos:end="41:19"><expr pos:start="41:9" pos:end="41:18"><name pos:start="41:9" pos:end="41:14">is_xmm</name> <operator pos:start="41:16" pos:end="41:16">=</operator> <literal type="number" pos:start="41:18" pos:end="41:18">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="43:7" pos:end="57:5">else <block pos:start="43:12" pos:end="57:5">{<block_content pos:start="45:9" pos:end="55:9">

        <if_stmt pos:start="45:9" pos:end="55:9"><if pos:start="45:9" pos:end="51:9">if <condition pos:start="45:12" pos:end="45:20">(<expr pos:start="45:13" pos:end="45:19"><name pos:start="45:13" pos:end="45:14">b1</name> <operator pos:start="45:16" pos:end="45:17">==</operator> <literal type="number" pos:start="45:19" pos:end="45:19">0</literal></expr>)</condition> <block pos:start="45:22" pos:end="51:9">{<block_content pos:start="49:13" pos:end="49:23">

            <comment type="block" pos:start="47:13" pos:end="47:26">/* MMX case */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:23"><expr pos:start="49:13" pos:end="49:22"><name pos:start="49:13" pos:end="49:18">is_xmm</name> <operator pos:start="49:20" pos:end="49:20">=</operator> <literal type="number" pos:start="49:22" pos:end="49:22">0</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="51:11" pos:end="55:9">else <block pos:start="51:16" pos:end="55:9">{<block_content pos:start="53:13" pos:end="53:23">

            <expr_stmt pos:start="53:13" pos:end="53:23"><expr pos:start="53:13" pos:end="53:22"><name pos:start="53:13" pos:end="53:18">is_xmm</name> <operator pos:start="53:20" pos:end="53:20">=</operator> <literal type="number" pos:start="53:22" pos:end="53:22">1</literal></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

    </block_content>}</block></else></if_stmt>

    <comment type="block" pos:start="59:5" pos:end="59:34">/* simple MMX/SSE operation */</comment>

    <if_stmt pos:start="61:5" pos:end="67:5"><if pos:start="61:5" pos:end="67:5">if <condition pos:start="61:8" pos:end="61:30">(<expr pos:start="61:9" pos:end="61:29"><name pos:start="61:9" pos:end="61:16"><name pos:start="61:9" pos:end="61:9">s</name><operator pos:start="61:10" pos:end="61:11">-&gt;</operator><name pos:start="61:12" pos:end="61:16">flags</name></name> <operator pos:start="61:18" pos:end="61:18">&amp;</operator> <name pos:start="61:20" pos:end="61:29">HF_TS_MASK</name></expr>)</condition> <block pos:start="61:32" pos:end="67:5">{<block_content pos:start="63:9" pos:end="65:15">

        <expr_stmt pos:start="63:9" pos:end="63:61"><expr pos:start="63:9" pos:end="63:60"><call pos:start="63:9" pos:end="63:60"><name pos:start="63:9" pos:end="63:21">gen_exception</name><argument_list pos:start="63:22" pos:end="63:60">(<argument pos:start="63:23" pos:end="63:23"><expr pos:start="63:23" pos:end="63:23"><name pos:start="63:23" pos:end="63:23">s</name></expr></argument>, <argument pos:start="63:26" pos:end="63:36"><expr pos:start="63:26" pos:end="63:36"><name pos:start="63:26" pos:end="63:36">EXCP07_PREX</name></expr></argument>, <argument pos:start="63:39" pos:end="63:59"><expr pos:start="63:39" pos:end="63:59"><name pos:start="63:39" pos:end="63:46">pc_start</name> <operator pos:start="63:48" pos:end="63:48">-</operator> <name pos:start="63:50" pos:end="63:59"><name pos:start="63:50" pos:end="63:50">s</name><operator pos:start="63:51" pos:end="63:52">-&gt;</operator><name pos:start="63:53" pos:end="63:59">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="65:9" pos:end="65:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="69:5" pos:end="77:5"><if pos:start="69:5" pos:end="77:5">if <condition pos:start="69:8" pos:end="69:30">(<expr pos:start="69:9" pos:end="69:29"><name pos:start="69:9" pos:end="69:16"><name pos:start="69:9" pos:end="69:9">s</name><operator pos:start="69:10" pos:end="69:11">-&gt;</operator><name pos:start="69:12" pos:end="69:16">flags</name></name> <operator pos:start="69:18" pos:end="69:18">&amp;</operator> <name pos:start="69:20" pos:end="69:29">HF_EM_MASK</name></expr>)</condition> <block pos:start="69:32" pos:end="77:5">{<block_content pos:start="71:5" pos:end="75:15">

    <label pos:start="71:5" pos:end="71:15"><name pos:start="71:5" pos:end="71:14">illegal_op</name>:</label>

        <expr_stmt pos:start="73:9" pos:end="73:62"><expr pos:start="73:9" pos:end="73:61"><call pos:start="73:9" pos:end="73:61"><name pos:start="73:9" pos:end="73:21">gen_exception</name><argument_list pos:start="73:22" pos:end="73:61">(<argument pos:start="73:23" pos:end="73:23"><expr pos:start="73:23" pos:end="73:23"><name pos:start="73:23" pos:end="73:23">s</name></expr></argument>, <argument pos:start="73:26" pos:end="73:37"><expr pos:start="73:26" pos:end="73:37"><name pos:start="73:26" pos:end="73:37">EXCP06_ILLOP</name></expr></argument>, <argument pos:start="73:40" pos:end="73:60"><expr pos:start="73:40" pos:end="73:60"><name pos:start="73:40" pos:end="73:47">pc_start</name> <operator pos:start="73:49" pos:end="73:49">-</operator> <name pos:start="73:51" pos:end="73:60"><name pos:start="73:51" pos:end="73:51">s</name><operator pos:start="73:52" pos:end="73:53">-&gt;</operator><name pos:start="73:54" pos:end="73:60">cs_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="79:5" pos:end="81:24"><if pos:start="79:5" pos:end="81:24">if <condition pos:start="79:8" pos:end="79:47">(<expr pos:start="79:9" pos:end="79:46"><name pos:start="79:9" pos:end="79:14">is_xmm</name> <operator pos:start="79:16" pos:end="79:17">&amp;&amp;</operator> <operator pos:start="79:19" pos:end="79:19">!</operator><operator pos:start="79:20" pos:end="79:20">(</operator><name pos:start="79:21" pos:end="79:28"><name pos:start="79:21" pos:end="79:21">s</name><operator pos:start="79:22" pos:end="79:23">-&gt;</operator><name pos:start="79:24" pos:end="79:28">flags</name></name> <operator pos:start="79:30" pos:end="79:30">&amp;</operator> <name pos:start="79:32" pos:end="79:45">HF_OSFXSR_MASK</name><operator pos:start="79:46" pos:end="79:46">)</operator></expr>)</condition><block type="pseudo" pos:start="81:9" pos:end="81:24"><block_content pos:start="81:9" pos:end="81:24">

        <goto pos:start="81:9" pos:end="81:24">goto <name pos:start="81:14" pos:end="81:23">illegal_op</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt pos:start="83:5" pos:end="91:5"><if pos:start="83:5" pos:end="91:5">if <condition pos:start="83:8" pos:end="83:31">(<expr pos:start="83:9" pos:end="83:30"><name pos:start="83:9" pos:end="83:9">b</name> <operator pos:start="83:11" pos:end="83:12">==</operator> <literal type="number" pos:start="83:14" pos:end="83:17">0x77</literal> <operator pos:start="83:19" pos:end="83:20">||</operator> <name pos:start="83:22" pos:end="83:22">b</name> <operator pos:start="83:24" pos:end="83:25">==</operator> <literal type="number" pos:start="83:27" pos:end="83:30">0x0e</literal></expr>)</condition> <block pos:start="83:33" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:15">

        <comment type="block" pos:start="85:9" pos:end="85:27">/* emms or femms */</comment>

        <expr_stmt pos:start="87:9" pos:end="87:22"><expr pos:start="87:9" pos:end="87:21"><call pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:19">gen_op_emms</name><argument_list pos:start="87:20" pos:end="87:21">()</argument_list></call></expr>;</expr_stmt>

        <return pos:start="89:9" pos:end="89:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="93:5" pos:end="95:31">/* prepare MMX state (XXX: optimize by storing fptt and fptags in

       the static cpu state) */</comment>

    <if_stmt pos:start="97:5" pos:end="101:5"><if pos:start="97:5" pos:end="101:5">if <condition pos:start="97:8" pos:end="97:16">(<expr pos:start="97:9" pos:end="97:15"><operator pos:start="97:9" pos:end="97:9">!</operator><name pos:start="97:10" pos:end="97:15">is_xmm</name></expr>)</condition> <block pos:start="97:18" pos:end="101:5">{<block_content pos:start="99:9" pos:end="99:27">

        <expr_stmt pos:start="99:9" pos:end="99:27"><expr pos:start="99:9" pos:end="99:26"><call pos:start="99:9" pos:end="99:26"><name pos:start="99:9" pos:end="99:24">gen_op_enter_mmx</name><argument_list pos:start="99:25" pos:end="99:26">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="105:5" pos:end="105:31"><expr pos:start="105:5" pos:end="105:30"><name pos:start="105:5" pos:end="105:9">modrm</name> <operator pos:start="105:11" pos:end="105:11">=</operator> <call pos:start="105:13" pos:end="105:30"><name pos:start="105:13" pos:end="105:21">ldub_code</name><argument_list pos:start="105:22" pos:end="105:30">(<argument pos:start="105:23" pos:end="105:29"><expr pos:start="105:23" pos:end="105:29"><name pos:start="105:23" pos:end="105:27"><name pos:start="105:23" pos:end="105:23">s</name><operator pos:start="105:24" pos:end="105:25">-&gt;</operator><name pos:start="105:26" pos:end="105:27">pc</name></name><operator pos:start="105:28" pos:end="105:29">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="107:5" pos:end="107:29"><expr pos:start="107:5" pos:end="107:28"><name pos:start="107:5" pos:end="107:7">reg</name> <operator pos:start="107:9" pos:end="107:9">=</operator> <operator pos:start="107:11" pos:end="107:11">(</operator><operator pos:start="107:12" pos:end="107:12">(</operator><name pos:start="107:13" pos:end="107:17">modrm</name> <operator pos:start="107:19" pos:end="107:20">&gt;&gt;</operator> <literal type="number" pos:start="107:22" pos:end="107:22">3</literal><operator pos:start="107:23" pos:end="107:23">)</operator> <operator pos:start="107:25" pos:end="107:25">&amp;</operator> <literal type="number" pos:start="107:27" pos:end="107:27">7</literal><operator pos:start="107:28" pos:end="107:28">)</operator></expr>;</expr_stmt>

    <if_stmt pos:start="109:5" pos:end="111:21"><if pos:start="109:5" pos:end="111:21">if <condition pos:start="109:8" pos:end="109:15">(<expr pos:start="109:9" pos:end="109:14"><name pos:start="109:9" pos:end="109:14">is_xmm</name></expr>)</condition><block type="pseudo" pos:start="111:9" pos:end="111:21"><block_content pos:start="111:9" pos:end="111:21">

        <expr_stmt pos:start="111:9" pos:end="111:21"><expr pos:start="111:9" pos:end="111:20"><name pos:start="111:9" pos:end="111:11">reg</name> <operator pos:start="111:13" pos:end="111:14">|=</operator> <name pos:start="111:16" pos:end="111:20">rex_r</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="113:5" pos:end="113:27"><expr pos:start="113:5" pos:end="113:26"><name pos:start="113:5" pos:end="113:7">mod</name> <operator pos:start="113:9" pos:end="113:9">=</operator> <operator pos:start="113:11" pos:end="113:11">(</operator><name pos:start="113:12" pos:end="113:16">modrm</name> <operator pos:start="113:18" pos:end="113:19">&gt;&gt;</operator> <literal type="number" pos:start="113:21" pos:end="113:21">6</literal><operator pos:start="113:22" pos:end="113:22">)</operator> <operator pos:start="113:24" pos:end="113:24">&amp;</operator> <literal type="number" pos:start="113:26" pos:end="113:26">3</literal></expr>;</expr_stmt>

    <if_stmt pos:start="115:5" pos:end="1205:5"><if pos:start="115:5" pos:end="1025:5">if <condition pos:start="115:8" pos:end="115:31">(<expr pos:start="115:9" pos:end="115:30"><name pos:start="115:9" pos:end="115:15">sse_op2</name> <operator pos:start="115:17" pos:end="115:18">==</operator> <name pos:start="115:20" pos:end="115:30">SSE_SPECIAL</name></expr>)</condition> <block pos:start="115:33" pos:end="1025:5">{<block_content pos:start="117:9" pos:end="1023:9">

        <expr_stmt pos:start="117:9" pos:end="117:23"><expr pos:start="117:9" pos:end="117:22"><name pos:start="117:9" pos:end="117:9">b</name> <operator pos:start="117:11" pos:end="117:12">|=</operator> <operator pos:start="117:14" pos:end="117:14">(</operator><name pos:start="117:15" pos:end="117:16">b1</name> <operator pos:start="117:18" pos:end="117:19">&lt;&lt;</operator> <literal type="number" pos:start="117:21" pos:end="117:21">8</literal><operator pos:start="117:22" pos:end="117:22">)</operator></expr>;</expr_stmt>

        <switch pos:start="119:9" pos:end="1023:9">switch<condition pos:start="119:15" pos:end="119:17">(<expr pos:start="119:16" pos:end="119:16"><name pos:start="119:16" pos:end="119:16">b</name></expr>)</condition> <block pos:start="119:19" pos:end="1023:9">{<block_content pos:start="121:9" pos:end="1021:28">

        <case pos:start="121:9" pos:end="121:19">case <expr pos:start="121:14" pos:end="121:18"><literal type="number" pos:start="121:14" pos:end="121:18">0x0e7</literal></expr>:</case> <comment type="block" pos:start="121:21" pos:end="121:32">/* movntq */</comment>

            <if_stmt pos:start="123:13" pos:end="125:32"><if pos:start="123:13" pos:end="125:32">if <condition pos:start="123:16" pos:end="123:25">(<expr pos:start="123:17" pos:end="123:24"><name pos:start="123:17" pos:end="123:19">mod</name> <operator pos:start="123:21" pos:end="123:22">==</operator> <literal type="number" pos:start="123:24" pos:end="123:24">3</literal></expr>)</condition><block type="pseudo" pos:start="125:17" pos:end="125:32"><block_content pos:start="125:17" pos:end="125:32">

                <goto pos:start="125:17" pos:end="125:32">goto <name pos:start="125:22" pos:end="125:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="127:13" pos:end="127:61"><expr pos:start="127:13" pos:end="127:60"><call pos:start="127:13" pos:end="127:60"><name pos:start="127:13" pos:end="127:25">gen_lea_modrm</name><argument_list pos:start="127:26" pos:end="127:60">(<argument pos:start="127:27" pos:end="127:27"><expr pos:start="127:27" pos:end="127:27"><name pos:start="127:27" pos:end="127:27">s</name></expr></argument>, <argument pos:start="127:30" pos:end="127:34"><expr pos:start="127:30" pos:end="127:34"><name pos:start="127:30" pos:end="127:34">modrm</name></expr></argument>, <argument pos:start="127:37" pos:end="127:45"><expr pos:start="127:37" pos:end="127:45"><operator pos:start="127:37" pos:end="127:37">&amp;</operator><name pos:start="127:38" pos:end="127:45">reg_addr</name></expr></argument>, <argument pos:start="127:48" pos:end="127:59"><expr pos:start="127:48" pos:end="127:59"><operator pos:start="127:48" pos:end="127:48">&amp;</operator><name pos:start="127:49" pos:end="127:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="129:13" pos:end="129:85"><expr pos:start="129:13" pos:end="129:84"><name pos:start="129:13" pos:end="129:45"><name pos:start="129:13" pos:end="129:26">gen_stq_env_A0</name><index pos:start="129:27" pos:end="129:45">[<expr pos:start="129:28" pos:end="129:44"><name pos:start="129:28" pos:end="129:39"><name pos:start="129:28" pos:end="129:28">s</name><operator pos:start="129:29" pos:end="129:30">-&gt;</operator><name pos:start="129:31" pos:end="129:39">mem_index</name></name> <operator pos:start="129:41" pos:end="129:42">&gt;&gt;</operator> <literal type="number" pos:start="129:44" pos:end="129:44">2</literal></expr>]</index></name><operator pos:start="129:46" pos:end="129:46">(</operator><call pos:start="129:47" pos:end="129:83"><name pos:start="129:47" pos:end="129:54">offsetof</name><argument_list pos:start="129:55" pos:end="129:83">(<argument pos:start="129:56" pos:end="129:66"><expr pos:start="129:56" pos:end="129:66"><name pos:start="129:56" pos:end="129:66">CPUX86State</name></expr></argument>,<argument pos:start="129:68" pos:end="129:82"><expr pos:start="129:68" pos:end="129:82"><name pos:start="129:68" pos:end="129:78"><name pos:start="129:68" pos:end="129:73">fpregs</name><index pos:start="129:74" pos:end="129:78">[<expr pos:start="129:75" pos:end="129:77"><name pos:start="129:75" pos:end="129:77">reg</name></expr>]</index></name><operator pos:start="129:79" pos:end="129:79">.</operator><name pos:start="129:80" pos:end="129:82">mmx</name></expr></argument>)</argument_list></call><operator pos:start="129:84" pos:end="129:84">)</operator></expr>;</expr_stmt>

            <break pos:start="131:13" pos:end="131:18">break;</break>

        <case pos:start="133:9" pos:end="133:19">case <expr pos:start="133:14" pos:end="133:18"><literal type="number" pos:start="133:14" pos:end="133:18">0x1e7</literal></expr>:</case> <comment type="block" pos:start="133:21" pos:end="133:33">/* movntdq */</comment>

        <case pos:start="135:9" pos:end="135:19">case <expr pos:start="135:14" pos:end="135:18"><literal type="number" pos:start="135:14" pos:end="135:18">0x02b</literal></expr>:</case> <comment type="block" pos:start="135:21" pos:end="135:33">/* movntps */</comment>

        <case pos:start="137:9" pos:end="137:19">case <expr pos:start="137:14" pos:end="137:18"><literal type="number" pos:start="137:14" pos:end="137:18">0x12b</literal></expr>:</case> <comment type="block" pos:start="137:21" pos:end="137:33">/* movntps */</comment>

        <case pos:start="139:9" pos:end="139:19">case <expr pos:start="139:14" pos:end="139:18"><literal type="number" pos:start="139:14" pos:end="139:18">0x3f0</literal></expr>:</case> <comment type="block" pos:start="139:21" pos:end="139:31">/* lddqu */</comment>

            <if_stmt pos:start="141:13" pos:end="143:32"><if pos:start="141:13" pos:end="143:32">if <condition pos:start="141:16" pos:end="141:25">(<expr pos:start="141:17" pos:end="141:24"><name pos:start="141:17" pos:end="141:19">mod</name> <operator pos:start="141:21" pos:end="141:22">==</operator> <literal type="number" pos:start="141:24" pos:end="141:24">3</literal></expr>)</condition><block type="pseudo" pos:start="143:17" pos:end="143:32"><block_content pos:start="143:17" pos:end="143:32">

                <goto pos:start="143:17" pos:end="143:32">goto <name pos:start="143:22" pos:end="143:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:61"><expr pos:start="145:13" pos:end="145:60"><call pos:start="145:13" pos:end="145:60"><name pos:start="145:13" pos:end="145:25">gen_lea_modrm</name><argument_list pos:start="145:26" pos:end="145:60">(<argument pos:start="145:27" pos:end="145:27"><expr pos:start="145:27" pos:end="145:27"><name pos:start="145:27" pos:end="145:27">s</name></expr></argument>, <argument pos:start="145:30" pos:end="145:34"><expr pos:start="145:30" pos:end="145:34"><name pos:start="145:30" pos:end="145:34">modrm</name></expr></argument>, <argument pos:start="145:37" pos:end="145:45"><expr pos:start="145:37" pos:end="145:45"><operator pos:start="145:37" pos:end="145:37">&amp;</operator><name pos:start="145:38" pos:end="145:45">reg_addr</name></expr></argument>, <argument pos:start="145:48" pos:end="145:59"><expr pos:start="145:48" pos:end="145:59"><operator pos:start="145:48" pos:end="145:48">&amp;</operator><name pos:start="145:49" pos:end="145:59">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="147:13" pos:end="147:83"><expr pos:start="147:13" pos:end="147:82"><name pos:start="147:13" pos:end="147:45"><name pos:start="147:13" pos:end="147:26">gen_sto_env_A0</name><index pos:start="147:27" pos:end="147:45">[<expr pos:start="147:28" pos:end="147:44"><name pos:start="147:28" pos:end="147:39"><name pos:start="147:28" pos:end="147:28">s</name><operator pos:start="147:29" pos:end="147:30">-&gt;</operator><name pos:start="147:31" pos:end="147:39">mem_index</name></name> <operator pos:start="147:41" pos:end="147:42">&gt;&gt;</operator> <literal type="number" pos:start="147:44" pos:end="147:44">2</literal></expr>]</index></name><operator pos:start="147:46" pos:end="147:46">(</operator><call pos:start="147:47" pos:end="147:81"><name pos:start="147:47" pos:end="147:54">offsetof</name><argument_list pos:start="147:55" pos:end="147:81">(<argument pos:start="147:56" pos:end="147:66"><expr pos:start="147:56" pos:end="147:66"><name pos:start="147:56" pos:end="147:66">CPUX86State</name></expr></argument>,<argument pos:start="147:68" pos:end="147:80"><expr pos:start="147:68" pos:end="147:80"><name pos:start="147:68" pos:end="147:80"><name pos:start="147:68" pos:end="147:75">xmm_regs</name><index pos:start="147:76" pos:end="147:80">[<expr pos:start="147:77" pos:end="147:79"><name pos:start="147:77" pos:end="147:79">reg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="147:82" pos:end="147:82">)</operator></expr>;</expr_stmt>

            <break pos:start="149:13" pos:end="149:18">break;</break>

        <case pos:start="151:9" pos:end="154:0">case <expr pos:start="151:14" pos:end="151:17"><literal type="number" pos:start="151:14" pos:end="151:17">0x6e</literal></expr>:</case> <comment type="block" pos:start="151:20" pos:end="151:36">/* movd mm, ea */</comment>

<cpp:ifdef pos:start="153:1" pos:end="153:20">#<cpp:directive pos:start="153:2" pos:end="153:6">ifdef</cpp:directive> <name pos:start="153:8" pos:end="153:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="155:13" pos:end="171:13"><if pos:start="155:13" pos:end="161:13">if <condition pos:start="155:16" pos:end="155:30">(<expr pos:start="155:17" pos:end="155:29"><name pos:start="155:17" pos:end="155:24"><name pos:start="155:17" pos:end="155:17">s</name><operator pos:start="155:18" pos:end="155:19">-&gt;</operator><name pos:start="155:20" pos:end="155:24">dflag</name></name> <operator pos:start="155:26" pos:end="155:27">==</operator> <literal type="number" pos:start="155:29" pos:end="155:29">2</literal></expr>)</condition> <block pos:start="155:32" pos:end="161:13">{<block_content pos:start="157:17" pos:end="159:77">

                <expr_stmt pos:start="157:17" pos:end="157:62"><expr pos:start="157:17" pos:end="157:61"><call pos:start="157:17" pos:end="157:61"><name pos:start="157:17" pos:end="157:30">gen_ldst_modrm</name><argument_list pos:start="157:31" pos:end="157:61">(<argument pos:start="157:32" pos:end="157:32"><expr pos:start="157:32" pos:end="157:32"><name pos:start="157:32" pos:end="157:32">s</name></expr></argument>, <argument pos:start="157:35" pos:end="157:39"><expr pos:start="157:35" pos:end="157:39"><name pos:start="157:35" pos:end="157:39">modrm</name></expr></argument>, <argument pos:start="157:42" pos:end="157:48"><expr pos:start="157:42" pos:end="157:48"><name pos:start="157:42" pos:end="157:48">OT_QUAD</name></expr></argument>, <argument pos:start="157:51" pos:end="157:57"><expr pos:start="157:51" pos:end="157:57"><name pos:start="157:51" pos:end="157:57">OR_TMP0</name></expr></argument>, <argument pos:start="157:60" pos:end="157:60"><expr pos:start="157:60" pos:end="157:60"><literal type="number" pos:start="157:60" pos:end="157:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="159:17" pos:end="159:77"><expr pos:start="159:17" pos:end="159:76"><call pos:start="159:17" pos:end="159:76"><name pos:start="159:17" pos:end="159:37">gen_op_movq_mm_T0_mmx</name><argument_list pos:start="159:38" pos:end="159:76">(<argument pos:start="159:39" pos:end="159:75"><expr pos:start="159:39" pos:end="159:75"><call pos:start="159:39" pos:end="159:75"><name pos:start="159:39" pos:end="159:46">offsetof</name><argument_list pos:start="159:47" pos:end="159:75">(<argument pos:start="159:48" pos:end="159:58"><expr pos:start="159:48" pos:end="159:58"><name pos:start="159:48" pos:end="159:58">CPUX86State</name></expr></argument>,<argument pos:start="159:60" pos:end="159:74"><expr pos:start="159:60" pos:end="159:74"><name pos:start="159:60" pos:end="159:70"><name pos:start="159:60" pos:end="159:65">fpregs</name><index pos:start="159:66" pos:end="159:70">[<expr pos:start="159:67" pos:end="159:69"><name pos:start="159:67" pos:end="159:69">reg</name></expr>]</index></name><operator pos:start="159:71" pos:end="159:71">.</operator><name pos:start="159:72" pos:end="159:74">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="161:15" pos:end="171:13">else

<cpp:endif pos:start="163:1" pos:end="163:6">#<cpp:directive pos:start="163:2" pos:end="163:6">endif</cpp:directive></cpp:endif>

            <block pos:start="165:13" pos:end="171:13">{<block_content pos:start="167:17" pos:end="169:77">

                <expr_stmt pos:start="167:17" pos:end="167:62"><expr pos:start="167:17" pos:end="167:61"><call pos:start="167:17" pos:end="167:61"><name pos:start="167:17" pos:end="167:30">gen_ldst_modrm</name><argument_list pos:start="167:31" pos:end="167:61">(<argument pos:start="167:32" pos:end="167:32"><expr pos:start="167:32" pos:end="167:32"><name pos:start="167:32" pos:end="167:32">s</name></expr></argument>, <argument pos:start="167:35" pos:end="167:39"><expr pos:start="167:35" pos:end="167:39"><name pos:start="167:35" pos:end="167:39">modrm</name></expr></argument>, <argument pos:start="167:42" pos:end="167:48"><expr pos:start="167:42" pos:end="167:48"><name pos:start="167:42" pos:end="167:48">OT_LONG</name></expr></argument>, <argument pos:start="167:51" pos:end="167:57"><expr pos:start="167:51" pos:end="167:57"><name pos:start="167:51" pos:end="167:57">OR_TMP0</name></expr></argument>, <argument pos:start="167:60" pos:end="167:60"><expr pos:start="167:60" pos:end="167:60"><literal type="number" pos:start="167:60" pos:end="167:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="169:17" pos:end="169:77"><expr pos:start="169:17" pos:end="169:76"><call pos:start="169:17" pos:end="169:76"><name pos:start="169:17" pos:end="169:37">gen_op_movl_mm_T0_mmx</name><argument_list pos:start="169:38" pos:end="169:76">(<argument pos:start="169:39" pos:end="169:75"><expr pos:start="169:39" pos:end="169:75"><call pos:start="169:39" pos:end="169:75"><name pos:start="169:39" pos:end="169:46">offsetof</name><argument_list pos:start="169:47" pos:end="169:75">(<argument pos:start="169:48" pos:end="169:58"><expr pos:start="169:48" pos:end="169:58"><name pos:start="169:48" pos:end="169:58">CPUX86State</name></expr></argument>,<argument pos:start="169:60" pos:end="169:74"><expr pos:start="169:60" pos:end="169:74"><name pos:start="169:60" pos:end="169:70"><name pos:start="169:60" pos:end="169:65">fpregs</name><index pos:start="169:66" pos:end="169:70">[<expr pos:start="169:67" pos:end="169:69"><name pos:start="169:67" pos:end="169:69">reg</name></expr>]</index></name><operator pos:start="169:71" pos:end="169:71">.</operator><name pos:start="169:72" pos:end="169:74">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="173:13" pos:end="173:18">break;</break>

        <case pos:start="175:9" pos:end="178:0">case <expr pos:start="175:14" pos:end="175:18"><literal type="number" pos:start="175:14" pos:end="175:18">0x16e</literal></expr>:</case> <comment type="block" pos:start="175:21" pos:end="175:38">/* movd xmm, ea */</comment>

<cpp:ifdef pos:start="177:1" pos:end="177:20">#<cpp:directive pos:start="177:2" pos:end="177:6">ifdef</cpp:directive> <name pos:start="177:8" pos:end="177:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="179:13" pos:end="195:13"><if pos:start="179:13" pos:end="185:13">if <condition pos:start="179:16" pos:end="179:30">(<expr pos:start="179:17" pos:end="179:29"><name pos:start="179:17" pos:end="179:24"><name pos:start="179:17" pos:end="179:17">s</name><operator pos:start="179:18" pos:end="179:19">-&gt;</operator><name pos:start="179:20" pos:end="179:24">dflag</name></name> <operator pos:start="179:26" pos:end="179:27">==</operator> <literal type="number" pos:start="179:29" pos:end="179:29">2</literal></expr>)</condition> <block pos:start="179:32" pos:end="185:13">{<block_content pos:start="181:17" pos:end="183:75">

                <expr_stmt pos:start="181:17" pos:end="181:62"><expr pos:start="181:17" pos:end="181:61"><call pos:start="181:17" pos:end="181:61"><name pos:start="181:17" pos:end="181:30">gen_ldst_modrm</name><argument_list pos:start="181:31" pos:end="181:61">(<argument pos:start="181:32" pos:end="181:32"><expr pos:start="181:32" pos:end="181:32"><name pos:start="181:32" pos:end="181:32">s</name></expr></argument>, <argument pos:start="181:35" pos:end="181:39"><expr pos:start="181:35" pos:end="181:39"><name pos:start="181:35" pos:end="181:39">modrm</name></expr></argument>, <argument pos:start="181:42" pos:end="181:48"><expr pos:start="181:42" pos:end="181:48"><name pos:start="181:42" pos:end="181:48">OT_QUAD</name></expr></argument>, <argument pos:start="181:51" pos:end="181:57"><expr pos:start="181:51" pos:end="181:57"><name pos:start="181:51" pos:end="181:57">OR_TMP0</name></expr></argument>, <argument pos:start="181:60" pos:end="181:60"><expr pos:start="181:60" pos:end="181:60"><literal type="number" pos:start="181:60" pos:end="181:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="183:17" pos:end="183:75"><expr pos:start="183:17" pos:end="183:74"><call pos:start="183:17" pos:end="183:74"><name pos:start="183:17" pos:end="183:37">gen_op_movq_mm_T0_xmm</name><argument_list pos:start="183:38" pos:end="183:74">(<argument pos:start="183:39" pos:end="183:73"><expr pos:start="183:39" pos:end="183:73"><call pos:start="183:39" pos:end="183:73"><name pos:start="183:39" pos:end="183:46">offsetof</name><argument_list pos:start="183:47" pos:end="183:73">(<argument pos:start="183:48" pos:end="183:58"><expr pos:start="183:48" pos:end="183:58"><name pos:start="183:48" pos:end="183:58">CPUX86State</name></expr></argument>,<argument pos:start="183:60" pos:end="183:72"><expr pos:start="183:60" pos:end="183:72"><name pos:start="183:60" pos:end="183:72"><name pos:start="183:60" pos:end="183:67">xmm_regs</name><index pos:start="183:68" pos:end="183:72">[<expr pos:start="183:69" pos:end="183:71"><name pos:start="183:69" pos:end="183:71">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="185:15" pos:end="195:13">else

<cpp:endif pos:start="187:1" pos:end="187:6">#<cpp:directive pos:start="187:2" pos:end="187:6">endif</cpp:directive></cpp:endif>

            <block pos:start="189:13" pos:end="195:13">{<block_content pos:start="191:17" pos:end="193:75">

                <expr_stmt pos:start="191:17" pos:end="191:62"><expr pos:start="191:17" pos:end="191:61"><call pos:start="191:17" pos:end="191:61"><name pos:start="191:17" pos:end="191:30">gen_ldst_modrm</name><argument_list pos:start="191:31" pos:end="191:61">(<argument pos:start="191:32" pos:end="191:32"><expr pos:start="191:32" pos:end="191:32"><name pos:start="191:32" pos:end="191:32">s</name></expr></argument>, <argument pos:start="191:35" pos:end="191:39"><expr pos:start="191:35" pos:end="191:39"><name pos:start="191:35" pos:end="191:39">modrm</name></expr></argument>, <argument pos:start="191:42" pos:end="191:48"><expr pos:start="191:42" pos:end="191:48"><name pos:start="191:42" pos:end="191:48">OT_LONG</name></expr></argument>, <argument pos:start="191:51" pos:end="191:57"><expr pos:start="191:51" pos:end="191:57"><name pos:start="191:51" pos:end="191:57">OR_TMP0</name></expr></argument>, <argument pos:start="191:60" pos:end="191:60"><expr pos:start="191:60" pos:end="191:60"><literal type="number" pos:start="191:60" pos:end="191:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="193:17" pos:end="193:75"><expr pos:start="193:17" pos:end="193:74"><call pos:start="193:17" pos:end="193:74"><name pos:start="193:17" pos:end="193:37">gen_op_movl_mm_T0_xmm</name><argument_list pos:start="193:38" pos:end="193:74">(<argument pos:start="193:39" pos:end="193:73"><expr pos:start="193:39" pos:end="193:73"><call pos:start="193:39" pos:end="193:73"><name pos:start="193:39" pos:end="193:46">offsetof</name><argument_list pos:start="193:47" pos:end="193:73">(<argument pos:start="193:48" pos:end="193:58"><expr pos:start="193:48" pos:end="193:58"><name pos:start="193:48" pos:end="193:58">CPUX86State</name></expr></argument>,<argument pos:start="193:60" pos:end="193:72"><expr pos:start="193:60" pos:end="193:72"><name pos:start="193:60" pos:end="193:72"><name pos:start="193:60" pos:end="193:67">xmm_regs</name><index pos:start="193:68" pos:end="193:72">[<expr pos:start="193:69" pos:end="193:71"><name pos:start="193:69" pos:end="193:71">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="197:13" pos:end="197:18">break;</break>

        <case pos:start="199:9" pos:end="199:18">case <expr pos:start="199:14" pos:end="199:17"><literal type="number" pos:start="199:14" pos:end="199:17">0x6f</literal></expr>:</case> <comment type="block" pos:start="199:20" pos:end="199:36">/* movq mm, ea */</comment>

            <if_stmt pos:start="201:13" pos:end="215:13"><if pos:start="201:13" pos:end="207:13">if <condition pos:start="201:16" pos:end="201:25">(<expr pos:start="201:17" pos:end="201:24"><name pos:start="201:17" pos:end="201:19">mod</name> <operator pos:start="201:21" pos:end="201:22">!=</operator> <literal type="number" pos:start="201:24" pos:end="201:24">3</literal></expr>)</condition> <block pos:start="201:27" pos:end="207:13">{<block_content pos:start="203:17" pos:end="205:89">

                <expr_stmt pos:start="203:17" pos:end="203:65"><expr pos:start="203:17" pos:end="203:64"><call pos:start="203:17" pos:end="203:64"><name pos:start="203:17" pos:end="203:29">gen_lea_modrm</name><argument_list pos:start="203:30" pos:end="203:64">(<argument pos:start="203:31" pos:end="203:31"><expr pos:start="203:31" pos:end="203:31"><name pos:start="203:31" pos:end="203:31">s</name></expr></argument>, <argument pos:start="203:34" pos:end="203:38"><expr pos:start="203:34" pos:end="203:38"><name pos:start="203:34" pos:end="203:38">modrm</name></expr></argument>, <argument pos:start="203:41" pos:end="203:49"><expr pos:start="203:41" pos:end="203:49"><operator pos:start="203:41" pos:end="203:41">&amp;</operator><name pos:start="203:42" pos:end="203:49">reg_addr</name></expr></argument>, <argument pos:start="203:52" pos:end="203:63"><expr pos:start="203:52" pos:end="203:63"><operator pos:start="203:52" pos:end="203:52">&amp;</operator><name pos:start="203:53" pos:end="203:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="205:17" pos:end="205:89"><expr pos:start="205:17" pos:end="205:88"><name pos:start="205:17" pos:end="205:49"><name pos:start="205:17" pos:end="205:30">gen_ldq_env_A0</name><index pos:start="205:31" pos:end="205:49">[<expr pos:start="205:32" pos:end="205:48"><name pos:start="205:32" pos:end="205:43"><name pos:start="205:32" pos:end="205:32">s</name><operator pos:start="205:33" pos:end="205:34">-&gt;</operator><name pos:start="205:35" pos:end="205:43">mem_index</name></name> <operator pos:start="205:45" pos:end="205:46">&gt;&gt;</operator> <literal type="number" pos:start="205:48" pos:end="205:48">2</literal></expr>]</index></name><operator pos:start="205:50" pos:end="205:50">(</operator><call pos:start="205:51" pos:end="205:87"><name pos:start="205:51" pos:end="205:58">offsetof</name><argument_list pos:start="205:59" pos:end="205:87">(<argument pos:start="205:60" pos:end="205:70"><expr pos:start="205:60" pos:end="205:70"><name pos:start="205:60" pos:end="205:70">CPUX86State</name></expr></argument>,<argument pos:start="205:72" pos:end="205:86"><expr pos:start="205:72" pos:end="205:86"><name pos:start="205:72" pos:end="205:82"><name pos:start="205:72" pos:end="205:77">fpregs</name><index pos:start="205:78" pos:end="205:82">[<expr pos:start="205:79" pos:end="205:81"><name pos:start="205:79" pos:end="205:81">reg</name></expr>]</index></name><operator pos:start="205:83" pos:end="205:83">.</operator><name pos:start="205:84" pos:end="205:86">mmx</name></expr></argument>)</argument_list></call><operator pos:start="205:88" pos:end="205:88">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="207:15" pos:end="215:13">else <block pos:start="207:20" pos:end="215:13">{<block_content pos:start="209:17" pos:end="213:66">

                <expr_stmt pos:start="209:17" pos:end="209:33"><expr pos:start="209:17" pos:end="209:32"><name pos:start="209:17" pos:end="209:18">rm</name> <operator pos:start="209:20" pos:end="209:20">=</operator> <operator pos:start="209:22" pos:end="209:22">(</operator><name pos:start="209:23" pos:end="209:27">modrm</name> <operator pos:start="209:29" pos:end="209:29">&amp;</operator> <literal type="number" pos:start="209:31" pos:end="209:31">7</literal><operator pos:start="209:32" pos:end="209:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="211:17" pos:end="213:66"><expr pos:start="211:17" pos:end="213:65"><call pos:start="211:17" pos:end="213:65"><name pos:start="211:17" pos:end="211:27">gen_op_movq</name><argument_list pos:start="211:28" pos:end="213:65">(<argument pos:start="211:29" pos:end="211:65"><expr pos:start="211:29" pos:end="211:65"><call pos:start="211:29" pos:end="211:65"><name pos:start="211:29" pos:end="211:36">offsetof</name><argument_list pos:start="211:37" pos:end="211:65">(<argument pos:start="211:38" pos:end="211:48"><expr pos:start="211:38" pos:end="211:48"><name pos:start="211:38" pos:end="211:48">CPUX86State</name></expr></argument>,<argument pos:start="211:50" pos:end="211:64"><expr pos:start="211:50" pos:end="211:64"><name pos:start="211:50" pos:end="211:60"><name pos:start="211:50" pos:end="211:55">fpregs</name><index pos:start="211:56" pos:end="211:60">[<expr pos:start="211:57" pos:end="211:59"><name pos:start="211:57" pos:end="211:59">reg</name></expr>]</index></name><operator pos:start="211:61" pos:end="211:61">.</operator><name pos:start="211:62" pos:end="211:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="213:29" pos:end="213:64"><expr pos:start="213:29" pos:end="213:64"><call pos:start="213:29" pos:end="213:64"><name pos:start="213:29" pos:end="213:36">offsetof</name><argument_list pos:start="213:37" pos:end="213:64">(<argument pos:start="213:38" pos:end="213:48"><expr pos:start="213:38" pos:end="213:48"><name pos:start="213:38" pos:end="213:48">CPUX86State</name></expr></argument>,<argument pos:start="213:50" pos:end="213:63"><expr pos:start="213:50" pos:end="213:63"><name pos:start="213:50" pos:end="213:59"><name pos:start="213:50" pos:end="213:55">fpregs</name><index pos:start="213:56" pos:end="213:59">[<expr pos:start="213:57" pos:end="213:58"><name pos:start="213:57" pos:end="213:58">rm</name></expr>]</index></name><operator pos:start="213:60" pos:end="213:60">.</operator><name pos:start="213:61" pos:end="213:63">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="217:13" pos:end="217:18">break;</break>

        <case pos:start="219:9" pos:end="219:19">case <expr pos:start="219:14" pos:end="219:18"><literal type="number" pos:start="219:14" pos:end="219:18">0x010</literal></expr>:</case> <comment type="block" pos:start="219:21" pos:end="219:32">/* movups */</comment>

        <case pos:start="221:9" pos:end="221:19">case <expr pos:start="221:14" pos:end="221:18"><literal type="number" pos:start="221:14" pos:end="221:18">0x110</literal></expr>:</case> <comment type="block" pos:start="221:21" pos:end="221:32">/* movupd */</comment>

        <case pos:start="223:9" pos:end="223:19">case <expr pos:start="223:14" pos:end="223:18"><literal type="number" pos:start="223:14" pos:end="223:18">0x028</literal></expr>:</case> <comment type="block" pos:start="223:21" pos:end="223:32">/* movaps */</comment>

        <case pos:start="225:9" pos:end="225:19">case <expr pos:start="225:14" pos:end="225:18"><literal type="number" pos:start="225:14" pos:end="225:18">0x128</literal></expr>:</case> <comment type="block" pos:start="225:21" pos:end="225:32">/* movapd */</comment>

        <case pos:start="227:9" pos:end="227:19">case <expr pos:start="227:14" pos:end="227:18"><literal type="number" pos:start="227:14" pos:end="227:18">0x16f</literal></expr>:</case> <comment type="block" pos:start="227:21" pos:end="227:40">/* movdqa xmm, ea */</comment>

        <case pos:start="229:9" pos:end="229:19">case <expr pos:start="229:14" pos:end="229:18"><literal type="number" pos:start="229:14" pos:end="229:18">0x26f</literal></expr>:</case> <comment type="block" pos:start="229:21" pos:end="229:40">/* movdqu xmm, ea */</comment>

            <if_stmt pos:start="231:13" pos:end="245:13"><if pos:start="231:13" pos:end="237:13">if <condition pos:start="231:16" pos:end="231:25">(<expr pos:start="231:17" pos:end="231:24"><name pos:start="231:17" pos:end="231:19">mod</name> <operator pos:start="231:21" pos:end="231:22">!=</operator> <literal type="number" pos:start="231:24" pos:end="231:24">3</literal></expr>)</condition> <block pos:start="231:27" pos:end="237:13">{<block_content pos:start="233:17" pos:end="235:87">

                <expr_stmt pos:start="233:17" pos:end="233:65"><expr pos:start="233:17" pos:end="233:64"><call pos:start="233:17" pos:end="233:64"><name pos:start="233:17" pos:end="233:29">gen_lea_modrm</name><argument_list pos:start="233:30" pos:end="233:64">(<argument pos:start="233:31" pos:end="233:31"><expr pos:start="233:31" pos:end="233:31"><name pos:start="233:31" pos:end="233:31">s</name></expr></argument>, <argument pos:start="233:34" pos:end="233:38"><expr pos:start="233:34" pos:end="233:38"><name pos:start="233:34" pos:end="233:38">modrm</name></expr></argument>, <argument pos:start="233:41" pos:end="233:49"><expr pos:start="233:41" pos:end="233:49"><operator pos:start="233:41" pos:end="233:41">&amp;</operator><name pos:start="233:42" pos:end="233:49">reg_addr</name></expr></argument>, <argument pos:start="233:52" pos:end="233:63"><expr pos:start="233:52" pos:end="233:63"><operator pos:start="233:52" pos:end="233:52">&amp;</operator><name pos:start="233:53" pos:end="233:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="235:17" pos:end="235:87"><expr pos:start="235:17" pos:end="235:86"><name pos:start="235:17" pos:end="235:49"><name pos:start="235:17" pos:end="235:30">gen_ldo_env_A0</name><index pos:start="235:31" pos:end="235:49">[<expr pos:start="235:32" pos:end="235:48"><name pos:start="235:32" pos:end="235:43"><name pos:start="235:32" pos:end="235:32">s</name><operator pos:start="235:33" pos:end="235:34">-&gt;</operator><name pos:start="235:35" pos:end="235:43">mem_index</name></name> <operator pos:start="235:45" pos:end="235:46">&gt;&gt;</operator> <literal type="number" pos:start="235:48" pos:end="235:48">2</literal></expr>]</index></name><operator pos:start="235:50" pos:end="235:50">(</operator><call pos:start="235:51" pos:end="235:85"><name pos:start="235:51" pos:end="235:58">offsetof</name><argument_list pos:start="235:59" pos:end="235:85">(<argument pos:start="235:60" pos:end="235:70"><expr pos:start="235:60" pos:end="235:70"><name pos:start="235:60" pos:end="235:70">CPUX86State</name></expr></argument>,<argument pos:start="235:72" pos:end="235:84"><expr pos:start="235:72" pos:end="235:84"><name pos:start="235:72" pos:end="235:84"><name pos:start="235:72" pos:end="235:79">xmm_regs</name><index pos:start="235:80" pos:end="235:84">[<expr pos:start="235:81" pos:end="235:83"><name pos:start="235:81" pos:end="235:83">reg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="235:86" pos:end="235:86">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="237:15" pos:end="245:13">else <block pos:start="237:20" pos:end="245:13">{<block_content pos:start="239:17" pos:end="243:64">

                <expr_stmt pos:start="239:17" pos:end="239:44"><expr pos:start="239:17" pos:end="239:43"><name pos:start="239:17" pos:end="239:18">rm</name> <operator pos:start="239:20" pos:end="239:20">=</operator> <operator pos:start="239:22" pos:end="239:22">(</operator><name pos:start="239:23" pos:end="239:27">modrm</name> <operator pos:start="239:29" pos:end="239:29">&amp;</operator> <literal type="number" pos:start="239:31" pos:end="239:31">7</literal><operator pos:start="239:32" pos:end="239:32">)</operator> <operator pos:start="239:34" pos:end="239:34">|</operator> <call pos:start="239:36" pos:end="239:43"><name pos:start="239:36" pos:end="239:40">REX_B</name><argument_list pos:start="239:41" pos:end="239:43">(<argument pos:start="239:42" pos:end="239:42"><expr pos:start="239:42" pos:end="239:42"><name pos:start="239:42" pos:end="239:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="241:17" pos:end="243:64"><expr pos:start="241:17" pos:end="243:63"><call pos:start="241:17" pos:end="243:63"><name pos:start="241:17" pos:end="241:27">gen_op_movo</name><argument_list pos:start="241:28" pos:end="243:63">(<argument pos:start="241:29" pos:end="241:63"><expr pos:start="241:29" pos:end="241:63"><call pos:start="241:29" pos:end="241:63"><name pos:start="241:29" pos:end="241:36">offsetof</name><argument_list pos:start="241:37" pos:end="241:63">(<argument pos:start="241:38" pos:end="241:48"><expr pos:start="241:38" pos:end="241:48"><name pos:start="241:38" pos:end="241:48">CPUX86State</name></expr></argument>,<argument pos:start="241:50" pos:end="241:62"><expr pos:start="241:50" pos:end="241:62"><name pos:start="241:50" pos:end="241:62"><name pos:start="241:50" pos:end="241:57">xmm_regs</name><index pos:start="241:58" pos:end="241:62">[<expr pos:start="241:59" pos:end="241:61"><name pos:start="241:59" pos:end="241:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="243:29" pos:end="243:62"><expr pos:start="243:29" pos:end="243:62"><call pos:start="243:29" pos:end="243:62"><name pos:start="243:29" pos:end="243:36">offsetof</name><argument_list pos:start="243:37" pos:end="243:62">(<argument pos:start="243:38" pos:end="243:48"><expr pos:start="243:38" pos:end="243:48"><name pos:start="243:38" pos:end="243:48">CPUX86State</name></expr></argument>,<argument pos:start="243:50" pos:end="243:61"><expr pos:start="243:50" pos:end="243:61"><name pos:start="243:50" pos:end="243:61"><name pos:start="243:50" pos:end="243:57">xmm_regs</name><index pos:start="243:58" pos:end="243:61">[<expr pos:start="243:59" pos:end="243:60"><name pos:start="243:59" pos:end="243:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="247:13" pos:end="247:18">break;</break>

        <case pos:start="249:9" pos:end="249:19">case <expr pos:start="249:14" pos:end="249:18"><literal type="number" pos:start="249:14" pos:end="249:18">0x210</literal></expr>:</case> <comment type="block" pos:start="249:21" pos:end="249:39">/* movss xmm, ea */</comment>

            <if_stmt pos:start="251:13" pos:end="275:13"><if pos:start="251:13" pos:end="267:13">if <condition pos:start="251:16" pos:end="251:25">(<expr pos:start="251:17" pos:end="251:24"><name pos:start="251:17" pos:end="251:19">mod</name> <operator pos:start="251:21" pos:end="251:22">!=</operator> <literal type="number" pos:start="251:24" pos:end="251:24">3</literal></expr>)</condition> <block pos:start="251:27" pos:end="267:13">{<block_content pos:start="253:17" pos:end="265:81">

                <expr_stmt pos:start="253:17" pos:end="253:65"><expr pos:start="253:17" pos:end="253:64"><call pos:start="253:17" pos:end="253:64"><name pos:start="253:17" pos:end="253:29">gen_lea_modrm</name><argument_list pos:start="253:30" pos:end="253:64">(<argument pos:start="253:31" pos:end="253:31"><expr pos:start="253:31" pos:end="253:31"><name pos:start="253:31" pos:end="253:31">s</name></expr></argument>, <argument pos:start="253:34" pos:end="253:38"><expr pos:start="253:34" pos:end="253:38"><name pos:start="253:34" pos:end="253:38">modrm</name></expr></argument>, <argument pos:start="253:41" pos:end="253:49"><expr pos:start="253:41" pos:end="253:49"><operator pos:start="253:41" pos:end="253:41">&amp;</operator><name pos:start="253:42" pos:end="253:49">reg_addr</name></expr></argument>, <argument pos:start="253:52" pos:end="253:63"><expr pos:start="253:52" pos:end="253:63"><operator pos:start="253:52" pos:end="253:52">&amp;</operator><name pos:start="253:53" pos:end="253:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="255:17" pos:end="255:56"><expr pos:start="255:17" pos:end="255:55"><call pos:start="255:17" pos:end="255:55"><name pos:start="255:17" pos:end="255:31">gen_op_ld_T0_A0</name><argument_list pos:start="255:32" pos:end="255:55">(<argument pos:start="255:33" pos:end="255:54"><expr pos:start="255:33" pos:end="255:54"><name pos:start="255:33" pos:end="255:39">OT_LONG</name> <operator pos:start="255:41" pos:end="255:41">+</operator> <name pos:start="255:43" pos:end="255:54"><name pos:start="255:43" pos:end="255:43">s</name><operator pos:start="255:44" pos:end="255:45">-&gt;</operator><name pos:start="255:46" pos:end="255:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="257:17" pos:end="257:81"><expr pos:start="257:17" pos:end="257:80"><call pos:start="257:17" pos:end="257:80"><name pos:start="257:17" pos:end="257:34">gen_op_movl_env_T0</name><argument_list pos:start="257:35" pos:end="257:80">(<argument pos:start="257:36" pos:end="257:79"><expr pos:start="257:36" pos:end="257:79"><call pos:start="257:36" pos:end="257:79"><name pos:start="257:36" pos:end="257:43">offsetof</name><argument_list pos:start="257:44" pos:end="257:79">(<argument pos:start="257:45" pos:end="257:55"><expr pos:start="257:45" pos:end="257:55"><name pos:start="257:45" pos:end="257:55">CPUX86State</name></expr></argument>,<argument pos:start="257:57" pos:end="257:78"><expr pos:start="257:57" pos:end="257:78"><name pos:start="257:57" pos:end="257:69"><name pos:start="257:57" pos:end="257:64">xmm_regs</name><index pos:start="257:65" pos:end="257:69">[<expr pos:start="257:66" pos:end="257:68"><name pos:start="257:66" pos:end="257:68">reg</name></expr>]</index></name><operator pos:start="257:70" pos:end="257:70">.</operator><call pos:start="257:71" pos:end="257:78"><name pos:start="257:71" pos:end="257:75">XMM_L</name><argument_list pos:start="257:76" pos:end="257:78">(<argument pos:start="257:77" pos:end="257:77"><expr pos:start="257:77" pos:end="257:77"><literal type="number" pos:start="257:77" pos:end="257:77">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="259:17" pos:end="259:35"><expr pos:start="259:17" pos:end="259:34"><call pos:start="259:17" pos:end="259:34"><name pos:start="259:17" pos:end="259:32">gen_op_movl_T0_0</name><argument_list pos:start="259:33" pos:end="259:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="261:17" pos:end="261:81"><expr pos:start="261:17" pos:end="261:80"><call pos:start="261:17" pos:end="261:80"><name pos:start="261:17" pos:end="261:34">gen_op_movl_env_T0</name><argument_list pos:start="261:35" pos:end="261:80">(<argument pos:start="261:36" pos:end="261:79"><expr pos:start="261:36" pos:end="261:79"><call pos:start="261:36" pos:end="261:79"><name pos:start="261:36" pos:end="261:43">offsetof</name><argument_list pos:start="261:44" pos:end="261:79">(<argument pos:start="261:45" pos:end="261:55"><expr pos:start="261:45" pos:end="261:55"><name pos:start="261:45" pos:end="261:55">CPUX86State</name></expr></argument>,<argument pos:start="261:57" pos:end="261:78"><expr pos:start="261:57" pos:end="261:78"><name pos:start="261:57" pos:end="261:69"><name pos:start="261:57" pos:end="261:64">xmm_regs</name><index pos:start="261:65" pos:end="261:69">[<expr pos:start="261:66" pos:end="261:68"><name pos:start="261:66" pos:end="261:68">reg</name></expr>]</index></name><operator pos:start="261:70" pos:end="261:70">.</operator><call pos:start="261:71" pos:end="261:78"><name pos:start="261:71" pos:end="261:75">XMM_L</name><argument_list pos:start="261:76" pos:end="261:78">(<argument pos:start="261:77" pos:end="261:77"><expr pos:start="261:77" pos:end="261:77"><literal type="number" pos:start="261:77" pos:end="261:77">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="263:17" pos:end="263:81"><expr pos:start="263:17" pos:end="263:80"><call pos:start="263:17" pos:end="263:80"><name pos:start="263:17" pos:end="263:34">gen_op_movl_env_T0</name><argument_list pos:start="263:35" pos:end="263:80">(<argument pos:start="263:36" pos:end="263:79"><expr pos:start="263:36" pos:end="263:79"><call pos:start="263:36" pos:end="263:79"><name pos:start="263:36" pos:end="263:43">offsetof</name><argument_list pos:start="263:44" pos:end="263:79">(<argument pos:start="263:45" pos:end="263:55"><expr pos:start="263:45" pos:end="263:55"><name pos:start="263:45" pos:end="263:55">CPUX86State</name></expr></argument>,<argument pos:start="263:57" pos:end="263:78"><expr pos:start="263:57" pos:end="263:78"><name pos:start="263:57" pos:end="263:69"><name pos:start="263:57" pos:end="263:64">xmm_regs</name><index pos:start="263:65" pos:end="263:69">[<expr pos:start="263:66" pos:end="263:68"><name pos:start="263:66" pos:end="263:68">reg</name></expr>]</index></name><operator pos:start="263:70" pos:end="263:70">.</operator><call pos:start="263:71" pos:end="263:78"><name pos:start="263:71" pos:end="263:75">XMM_L</name><argument_list pos:start="263:76" pos:end="263:78">(<argument pos:start="263:77" pos:end="263:77"><expr pos:start="263:77" pos:end="263:77"><literal type="number" pos:start="263:77" pos:end="263:77">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="265:17" pos:end="265:81"><expr pos:start="265:17" pos:end="265:80"><call pos:start="265:17" pos:end="265:80"><name pos:start="265:17" pos:end="265:34">gen_op_movl_env_T0</name><argument_list pos:start="265:35" pos:end="265:80">(<argument pos:start="265:36" pos:end="265:79"><expr pos:start="265:36" pos:end="265:79"><call pos:start="265:36" pos:end="265:79"><name pos:start="265:36" pos:end="265:43">offsetof</name><argument_list pos:start="265:44" pos:end="265:79">(<argument pos:start="265:45" pos:end="265:55"><expr pos:start="265:45" pos:end="265:55"><name pos:start="265:45" pos:end="265:55">CPUX86State</name></expr></argument>,<argument pos:start="265:57" pos:end="265:78"><expr pos:start="265:57" pos:end="265:78"><name pos:start="265:57" pos:end="265:69"><name pos:start="265:57" pos:end="265:64">xmm_regs</name><index pos:start="265:65" pos:end="265:69">[<expr pos:start="265:66" pos:end="265:68"><name pos:start="265:66" pos:end="265:68">reg</name></expr>]</index></name><operator pos:start="265:70" pos:end="265:70">.</operator><call pos:start="265:71" pos:end="265:78"><name pos:start="265:71" pos:end="265:75">XMM_L</name><argument_list pos:start="265:76" pos:end="265:78">(<argument pos:start="265:77" pos:end="265:77"><expr pos:start="265:77" pos:end="265:77"><literal type="number" pos:start="265:77" pos:end="265:77">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="267:15" pos:end="275:13">else <block pos:start="267:20" pos:end="275:13">{<block_content pos:start="269:17" pos:end="273:73">

                <expr_stmt pos:start="269:17" pos:end="269:44"><expr pos:start="269:17" pos:end="269:43"><name pos:start="269:17" pos:end="269:18">rm</name> <operator pos:start="269:20" pos:end="269:20">=</operator> <operator pos:start="269:22" pos:end="269:22">(</operator><name pos:start="269:23" pos:end="269:27">modrm</name> <operator pos:start="269:29" pos:end="269:29">&amp;</operator> <literal type="number" pos:start="269:31" pos:end="269:31">7</literal><operator pos:start="269:32" pos:end="269:32">)</operator> <operator pos:start="269:34" pos:end="269:34">|</operator> <call pos:start="269:36" pos:end="269:43"><name pos:start="269:36" pos:end="269:40">REX_B</name><argument_list pos:start="269:41" pos:end="269:43">(<argument pos:start="269:42" pos:end="269:42"><expr pos:start="269:42" pos:end="269:42"><name pos:start="269:42" pos:end="269:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="271:17" pos:end="273:73"><expr pos:start="271:17" pos:end="273:72"><call pos:start="271:17" pos:end="273:72"><name pos:start="271:17" pos:end="271:27">gen_op_movl</name><argument_list pos:start="271:28" pos:end="273:72">(<argument pos:start="271:29" pos:end="271:72"><expr pos:start="271:29" pos:end="271:72"><call pos:start="271:29" pos:end="271:72"><name pos:start="271:29" pos:end="271:36">offsetof</name><argument_list pos:start="271:37" pos:end="271:72">(<argument pos:start="271:38" pos:end="271:48"><expr pos:start="271:38" pos:end="271:48"><name pos:start="271:38" pos:end="271:48">CPUX86State</name></expr></argument>,<argument pos:start="271:50" pos:end="271:71"><expr pos:start="271:50" pos:end="271:71"><name pos:start="271:50" pos:end="271:62"><name pos:start="271:50" pos:end="271:57">xmm_regs</name><index pos:start="271:58" pos:end="271:62">[<expr pos:start="271:59" pos:end="271:61"><name pos:start="271:59" pos:end="271:61">reg</name></expr>]</index></name><operator pos:start="271:63" pos:end="271:63">.</operator><call pos:start="271:64" pos:end="271:71"><name pos:start="271:64" pos:end="271:68">XMM_L</name><argument_list pos:start="271:69" pos:end="271:71">(<argument pos:start="271:70" pos:end="271:70"><expr pos:start="271:70" pos:end="271:70"><literal type="number" pos:start="271:70" pos:end="271:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="273:29" pos:end="273:71"><expr pos:start="273:29" pos:end="273:71"><call pos:start="273:29" pos:end="273:71"><name pos:start="273:29" pos:end="273:36">offsetof</name><argument_list pos:start="273:37" pos:end="273:71">(<argument pos:start="273:38" pos:end="273:48"><expr pos:start="273:38" pos:end="273:48"><name pos:start="273:38" pos:end="273:48">CPUX86State</name></expr></argument>,<argument pos:start="273:50" pos:end="273:70"><expr pos:start="273:50" pos:end="273:70"><name pos:start="273:50" pos:end="273:61"><name pos:start="273:50" pos:end="273:57">xmm_regs</name><index pos:start="273:58" pos:end="273:61">[<expr pos:start="273:59" pos:end="273:60"><name pos:start="273:59" pos:end="273:60">rm</name></expr>]</index></name><operator pos:start="273:62" pos:end="273:62">.</operator><call pos:start="273:63" pos:end="273:70"><name pos:start="273:63" pos:end="273:67">XMM_L</name><argument_list pos:start="273:68" pos:end="273:70">(<argument pos:start="273:69" pos:end="273:69"><expr pos:start="273:69" pos:end="273:69"><literal type="number" pos:start="273:69" pos:end="273:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="277:13" pos:end="277:18">break;</break>

        <case pos:start="279:9" pos:end="279:19">case <expr pos:start="279:14" pos:end="279:18"><literal type="number" pos:start="279:14" pos:end="279:18">0x310</literal></expr>:</case> <comment type="block" pos:start="279:21" pos:end="279:39">/* movsd xmm, ea */</comment>

            <if_stmt pos:start="281:13" pos:end="301:13"><if pos:start="281:13" pos:end="293:13">if <condition pos:start="281:16" pos:end="281:25">(<expr pos:start="281:17" pos:end="281:24"><name pos:start="281:17" pos:end="281:19">mod</name> <operator pos:start="281:21" pos:end="281:22">!=</operator> <literal type="number" pos:start="281:24" pos:end="281:24">3</literal></expr>)</condition> <block pos:start="281:27" pos:end="293:13">{<block_content pos:start="283:17" pos:end="291:81">

                <expr_stmt pos:start="283:17" pos:end="283:65"><expr pos:start="283:17" pos:end="283:64"><call pos:start="283:17" pos:end="283:64"><name pos:start="283:17" pos:end="283:29">gen_lea_modrm</name><argument_list pos:start="283:30" pos:end="283:64">(<argument pos:start="283:31" pos:end="283:31"><expr pos:start="283:31" pos:end="283:31"><name pos:start="283:31" pos:end="283:31">s</name></expr></argument>, <argument pos:start="283:34" pos:end="283:38"><expr pos:start="283:34" pos:end="283:38"><name pos:start="283:34" pos:end="283:38">modrm</name></expr></argument>, <argument pos:start="283:41" pos:end="283:49"><expr pos:start="283:41" pos:end="283:49"><operator pos:start="283:41" pos:end="283:41">&amp;</operator><name pos:start="283:42" pos:end="283:49">reg_addr</name></expr></argument>, <argument pos:start="283:52" pos:end="283:63"><expr pos:start="283:52" pos:end="283:63"><operator pos:start="283:52" pos:end="283:52">&amp;</operator><name pos:start="283:53" pos:end="283:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="285:17" pos:end="285:96"><expr pos:start="285:17" pos:end="285:95"><name pos:start="285:17" pos:end="285:49"><name pos:start="285:17" pos:end="285:30">gen_ldq_env_A0</name><index pos:start="285:31" pos:end="285:49">[<expr pos:start="285:32" pos:end="285:48"><name pos:start="285:32" pos:end="285:43"><name pos:start="285:32" pos:end="285:32">s</name><operator pos:start="285:33" pos:end="285:34">-&gt;</operator><name pos:start="285:35" pos:end="285:43">mem_index</name></name> <operator pos:start="285:45" pos:end="285:46">&gt;&gt;</operator> <literal type="number" pos:start="285:48" pos:end="285:48">2</literal></expr>]</index></name><operator pos:start="285:50" pos:end="285:50">(</operator><call pos:start="285:51" pos:end="285:94"><name pos:start="285:51" pos:end="285:58">offsetof</name><argument_list pos:start="285:59" pos:end="285:94">(<argument pos:start="285:60" pos:end="285:70"><expr pos:start="285:60" pos:end="285:70"><name pos:start="285:60" pos:end="285:70">CPUX86State</name></expr></argument>,<argument pos:start="285:72" pos:end="285:93"><expr pos:start="285:72" pos:end="285:93"><name pos:start="285:72" pos:end="285:84"><name pos:start="285:72" pos:end="285:79">xmm_regs</name><index pos:start="285:80" pos:end="285:84">[<expr pos:start="285:81" pos:end="285:83"><name pos:start="285:81" pos:end="285:83">reg</name></expr>]</index></name><operator pos:start="285:85" pos:end="285:85">.</operator><call pos:start="285:86" pos:end="285:93"><name pos:start="285:86" pos:end="285:90">XMM_Q</name><argument_list pos:start="285:91" pos:end="285:93">(<argument pos:start="285:92" pos:end="285:92"><expr pos:start="285:92" pos:end="285:92"><literal type="number" pos:start="285:92" pos:end="285:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="285:95" pos:end="285:95">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="287:17" pos:end="287:35"><expr pos:start="287:17" pos:end="287:34"><call pos:start="287:17" pos:end="287:34"><name pos:start="287:17" pos:end="287:32">gen_op_movl_T0_0</name><argument_list pos:start="287:33" pos:end="287:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:81"><expr pos:start="289:17" pos:end="289:80"><call pos:start="289:17" pos:end="289:80"><name pos:start="289:17" pos:end="289:34">gen_op_movl_env_T0</name><argument_list pos:start="289:35" pos:end="289:80">(<argument pos:start="289:36" pos:end="289:79"><expr pos:start="289:36" pos:end="289:79"><call pos:start="289:36" pos:end="289:79"><name pos:start="289:36" pos:end="289:43">offsetof</name><argument_list pos:start="289:44" pos:end="289:79">(<argument pos:start="289:45" pos:end="289:55"><expr pos:start="289:45" pos:end="289:55"><name pos:start="289:45" pos:end="289:55">CPUX86State</name></expr></argument>,<argument pos:start="289:57" pos:end="289:78"><expr pos:start="289:57" pos:end="289:78"><name pos:start="289:57" pos:end="289:69"><name pos:start="289:57" pos:end="289:64">xmm_regs</name><index pos:start="289:65" pos:end="289:69">[<expr pos:start="289:66" pos:end="289:68"><name pos:start="289:66" pos:end="289:68">reg</name></expr>]</index></name><operator pos:start="289:70" pos:end="289:70">.</operator><call pos:start="289:71" pos:end="289:78"><name pos:start="289:71" pos:end="289:75">XMM_L</name><argument_list pos:start="289:76" pos:end="289:78">(<argument pos:start="289:77" pos:end="289:77"><expr pos:start="289:77" pos:end="289:77"><literal type="number" pos:start="289:77" pos:end="289:77">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="291:17" pos:end="291:81"><expr pos:start="291:17" pos:end="291:80"><call pos:start="291:17" pos:end="291:80"><name pos:start="291:17" pos:end="291:34">gen_op_movl_env_T0</name><argument_list pos:start="291:35" pos:end="291:80">(<argument pos:start="291:36" pos:end="291:79"><expr pos:start="291:36" pos:end="291:79"><call pos:start="291:36" pos:end="291:79"><name pos:start="291:36" pos:end="291:43">offsetof</name><argument_list pos:start="291:44" pos:end="291:79">(<argument pos:start="291:45" pos:end="291:55"><expr pos:start="291:45" pos:end="291:55"><name pos:start="291:45" pos:end="291:55">CPUX86State</name></expr></argument>,<argument pos:start="291:57" pos:end="291:78"><expr pos:start="291:57" pos:end="291:78"><name pos:start="291:57" pos:end="291:69"><name pos:start="291:57" pos:end="291:64">xmm_regs</name><index pos:start="291:65" pos:end="291:69">[<expr pos:start="291:66" pos:end="291:68"><name pos:start="291:66" pos:end="291:68">reg</name></expr>]</index></name><operator pos:start="291:70" pos:end="291:70">.</operator><call pos:start="291:71" pos:end="291:78"><name pos:start="291:71" pos:end="291:75">XMM_L</name><argument_list pos:start="291:76" pos:end="291:78">(<argument pos:start="291:77" pos:end="291:77"><expr pos:start="291:77" pos:end="291:77"><literal type="number" pos:start="291:77" pos:end="291:77">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="293:15" pos:end="301:13">else <block pos:start="293:20" pos:end="301:13">{<block_content pos:start="295:17" pos:end="299:73">

                <expr_stmt pos:start="295:17" pos:end="295:44"><expr pos:start="295:17" pos:end="295:43"><name pos:start="295:17" pos:end="295:18">rm</name> <operator pos:start="295:20" pos:end="295:20">=</operator> <operator pos:start="295:22" pos:end="295:22">(</operator><name pos:start="295:23" pos:end="295:27">modrm</name> <operator pos:start="295:29" pos:end="295:29">&amp;</operator> <literal type="number" pos:start="295:31" pos:end="295:31">7</literal><operator pos:start="295:32" pos:end="295:32">)</operator> <operator pos:start="295:34" pos:end="295:34">|</operator> <call pos:start="295:36" pos:end="295:43"><name pos:start="295:36" pos:end="295:40">REX_B</name><argument_list pos:start="295:41" pos:end="295:43">(<argument pos:start="295:42" pos:end="295:42"><expr pos:start="295:42" pos:end="295:42"><name pos:start="295:42" pos:end="295:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="297:17" pos:end="299:73"><expr pos:start="297:17" pos:end="299:72"><call pos:start="297:17" pos:end="299:72"><name pos:start="297:17" pos:end="297:27">gen_op_movq</name><argument_list pos:start="297:28" pos:end="299:72">(<argument pos:start="297:29" pos:end="297:72"><expr pos:start="297:29" pos:end="297:72"><call pos:start="297:29" pos:end="297:72"><name pos:start="297:29" pos:end="297:36">offsetof</name><argument_list pos:start="297:37" pos:end="297:72">(<argument pos:start="297:38" pos:end="297:48"><expr pos:start="297:38" pos:end="297:48"><name pos:start="297:38" pos:end="297:48">CPUX86State</name></expr></argument>,<argument pos:start="297:50" pos:end="297:71"><expr pos:start="297:50" pos:end="297:71"><name pos:start="297:50" pos:end="297:62"><name pos:start="297:50" pos:end="297:57">xmm_regs</name><index pos:start="297:58" pos:end="297:62">[<expr pos:start="297:59" pos:end="297:61"><name pos:start="297:59" pos:end="297:61">reg</name></expr>]</index></name><operator pos:start="297:63" pos:end="297:63">.</operator><call pos:start="297:64" pos:end="297:71"><name pos:start="297:64" pos:end="297:68">XMM_Q</name><argument_list pos:start="297:69" pos:end="297:71">(<argument pos:start="297:70" pos:end="297:70"><expr pos:start="297:70" pos:end="297:70"><literal type="number" pos:start="297:70" pos:end="297:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="299:29" pos:end="299:71"><expr pos:start="299:29" pos:end="299:71"><call pos:start="299:29" pos:end="299:71"><name pos:start="299:29" pos:end="299:36">offsetof</name><argument_list pos:start="299:37" pos:end="299:71">(<argument pos:start="299:38" pos:end="299:48"><expr pos:start="299:38" pos:end="299:48"><name pos:start="299:38" pos:end="299:48">CPUX86State</name></expr></argument>,<argument pos:start="299:50" pos:end="299:70"><expr pos:start="299:50" pos:end="299:70"><name pos:start="299:50" pos:end="299:61"><name pos:start="299:50" pos:end="299:57">xmm_regs</name><index pos:start="299:58" pos:end="299:61">[<expr pos:start="299:59" pos:end="299:60"><name pos:start="299:59" pos:end="299:60">rm</name></expr>]</index></name><operator pos:start="299:62" pos:end="299:62">.</operator><call pos:start="299:63" pos:end="299:70"><name pos:start="299:63" pos:end="299:67">XMM_Q</name><argument_list pos:start="299:68" pos:end="299:70">(<argument pos:start="299:69" pos:end="299:69"><expr pos:start="299:69" pos:end="299:69"><literal type="number" pos:start="299:69" pos:end="299:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="303:13" pos:end="303:18">break;</break>

        <case pos:start="305:9" pos:end="305:19">case <expr pos:start="305:14" pos:end="305:18"><literal type="number" pos:start="305:14" pos:end="305:18">0x012</literal></expr>:</case> <comment type="block" pos:start="305:21" pos:end="305:32">/* movlps */</comment>

        <case pos:start="307:9" pos:end="307:19">case <expr pos:start="307:14" pos:end="307:18"><literal type="number" pos:start="307:14" pos:end="307:18">0x112</literal></expr>:</case> <comment type="block" pos:start="307:21" pos:end="307:32">/* movlpd */</comment>

            <if_stmt pos:start="309:13" pos:end="325:13"><if pos:start="309:13" pos:end="315:13">if <condition pos:start="309:16" pos:end="309:25">(<expr pos:start="309:17" pos:end="309:24"><name pos:start="309:17" pos:end="309:19">mod</name> <operator pos:start="309:21" pos:end="309:22">!=</operator> <literal type="number" pos:start="309:24" pos:end="309:24">3</literal></expr>)</condition> <block pos:start="309:27" pos:end="315:13">{<block_content pos:start="311:17" pos:end="313:96">

                <expr_stmt pos:start="311:17" pos:end="311:65"><expr pos:start="311:17" pos:end="311:64"><call pos:start="311:17" pos:end="311:64"><name pos:start="311:17" pos:end="311:29">gen_lea_modrm</name><argument_list pos:start="311:30" pos:end="311:64">(<argument pos:start="311:31" pos:end="311:31"><expr pos:start="311:31" pos:end="311:31"><name pos:start="311:31" pos:end="311:31">s</name></expr></argument>, <argument pos:start="311:34" pos:end="311:38"><expr pos:start="311:34" pos:end="311:38"><name pos:start="311:34" pos:end="311:38">modrm</name></expr></argument>, <argument pos:start="311:41" pos:end="311:49"><expr pos:start="311:41" pos:end="311:49"><operator pos:start="311:41" pos:end="311:41">&amp;</operator><name pos:start="311:42" pos:end="311:49">reg_addr</name></expr></argument>, <argument pos:start="311:52" pos:end="311:63"><expr pos:start="311:52" pos:end="311:63"><operator pos:start="311:52" pos:end="311:52">&amp;</operator><name pos:start="311:53" pos:end="311:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="313:17" pos:end="313:96"><expr pos:start="313:17" pos:end="313:95"><name pos:start="313:17" pos:end="313:49"><name pos:start="313:17" pos:end="313:30">gen_ldq_env_A0</name><index pos:start="313:31" pos:end="313:49">[<expr pos:start="313:32" pos:end="313:48"><name pos:start="313:32" pos:end="313:43"><name pos:start="313:32" pos:end="313:32">s</name><operator pos:start="313:33" pos:end="313:34">-&gt;</operator><name pos:start="313:35" pos:end="313:43">mem_index</name></name> <operator pos:start="313:45" pos:end="313:46">&gt;&gt;</operator> <literal type="number" pos:start="313:48" pos:end="313:48">2</literal></expr>]</index></name><operator pos:start="313:50" pos:end="313:50">(</operator><call pos:start="313:51" pos:end="313:94"><name pos:start="313:51" pos:end="313:58">offsetof</name><argument_list pos:start="313:59" pos:end="313:94">(<argument pos:start="313:60" pos:end="313:70"><expr pos:start="313:60" pos:end="313:70"><name pos:start="313:60" pos:end="313:70">CPUX86State</name></expr></argument>,<argument pos:start="313:72" pos:end="313:93"><expr pos:start="313:72" pos:end="313:93"><name pos:start="313:72" pos:end="313:84"><name pos:start="313:72" pos:end="313:79">xmm_regs</name><index pos:start="313:80" pos:end="313:84">[<expr pos:start="313:81" pos:end="313:83"><name pos:start="313:81" pos:end="313:83">reg</name></expr>]</index></name><operator pos:start="313:85" pos:end="313:85">.</operator><call pos:start="313:86" pos:end="313:93"><name pos:start="313:86" pos:end="313:90">XMM_Q</name><argument_list pos:start="313:91" pos:end="313:93">(<argument pos:start="313:92" pos:end="313:92"><expr pos:start="313:92" pos:end="313:92"><literal type="number" pos:start="313:92" pos:end="313:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="313:95" pos:end="313:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="315:15" pos:end="325:13">else <block pos:start="315:20" pos:end="325:13">{<block_content pos:start="319:17" pos:end="323:73">

                <comment type="block" pos:start="317:17" pos:end="317:29">/* movhlps */</comment>

                <expr_stmt pos:start="319:17" pos:end="319:44"><expr pos:start="319:17" pos:end="319:43"><name pos:start="319:17" pos:end="319:18">rm</name> <operator pos:start="319:20" pos:end="319:20">=</operator> <operator pos:start="319:22" pos:end="319:22">(</operator><name pos:start="319:23" pos:end="319:27">modrm</name> <operator pos:start="319:29" pos:end="319:29">&amp;</operator> <literal type="number" pos:start="319:31" pos:end="319:31">7</literal><operator pos:start="319:32" pos:end="319:32">)</operator> <operator pos:start="319:34" pos:end="319:34">|</operator> <call pos:start="319:36" pos:end="319:43"><name pos:start="319:36" pos:end="319:40">REX_B</name><argument_list pos:start="319:41" pos:end="319:43">(<argument pos:start="319:42" pos:end="319:42"><expr pos:start="319:42" pos:end="319:42"><name pos:start="319:42" pos:end="319:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="321:17" pos:end="323:73"><expr pos:start="321:17" pos:end="323:72"><call pos:start="321:17" pos:end="323:72"><name pos:start="321:17" pos:end="321:27">gen_op_movq</name><argument_list pos:start="321:28" pos:end="323:72">(<argument pos:start="321:29" pos:end="321:72"><expr pos:start="321:29" pos:end="321:72"><call pos:start="321:29" pos:end="321:72"><name pos:start="321:29" pos:end="321:36">offsetof</name><argument_list pos:start="321:37" pos:end="321:72">(<argument pos:start="321:38" pos:end="321:48"><expr pos:start="321:38" pos:end="321:48"><name pos:start="321:38" pos:end="321:48">CPUX86State</name></expr></argument>,<argument pos:start="321:50" pos:end="321:71"><expr pos:start="321:50" pos:end="321:71"><name pos:start="321:50" pos:end="321:62"><name pos:start="321:50" pos:end="321:57">xmm_regs</name><index pos:start="321:58" pos:end="321:62">[<expr pos:start="321:59" pos:end="321:61"><name pos:start="321:59" pos:end="321:61">reg</name></expr>]</index></name><operator pos:start="321:63" pos:end="321:63">.</operator><call pos:start="321:64" pos:end="321:71"><name pos:start="321:64" pos:end="321:68">XMM_Q</name><argument_list pos:start="321:69" pos:end="321:71">(<argument pos:start="321:70" pos:end="321:70"><expr pos:start="321:70" pos:end="321:70"><literal type="number" pos:start="321:70" pos:end="321:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="323:29" pos:end="323:71"><expr pos:start="323:29" pos:end="323:71"><call pos:start="323:29" pos:end="323:71"><name pos:start="323:29" pos:end="323:36">offsetof</name><argument_list pos:start="323:37" pos:end="323:71">(<argument pos:start="323:38" pos:end="323:48"><expr pos:start="323:38" pos:end="323:48"><name pos:start="323:38" pos:end="323:48">CPUX86State</name></expr></argument>,<argument pos:start="323:50" pos:end="323:70"><expr pos:start="323:50" pos:end="323:70"><name pos:start="323:50" pos:end="323:61"><name pos:start="323:50" pos:end="323:57">xmm_regs</name><index pos:start="323:58" pos:end="323:61">[<expr pos:start="323:59" pos:end="323:60"><name pos:start="323:59" pos:end="323:60">rm</name></expr>]</index></name><operator pos:start="323:62" pos:end="323:62">.</operator><call pos:start="323:63" pos:end="323:70"><name pos:start="323:63" pos:end="323:67">XMM_Q</name><argument_list pos:start="323:68" pos:end="323:70">(<argument pos:start="323:69" pos:end="323:69"><expr pos:start="323:69" pos:end="323:69"><literal type="number" pos:start="323:69" pos:end="323:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="327:13" pos:end="327:18">break;</break>

        <case pos:start="329:9" pos:end="329:19">case <expr pos:start="329:14" pos:end="329:18"><literal type="number" pos:start="329:14" pos:end="329:18">0x212</literal></expr>:</case> <comment type="block" pos:start="329:21" pos:end="329:34">/* movsldup */</comment>

            <if_stmt pos:start="331:13" pos:end="349:13"><if pos:start="331:13" pos:end="337:13">if <condition pos:start="331:16" pos:end="331:25">(<expr pos:start="331:17" pos:end="331:24"><name pos:start="331:17" pos:end="331:19">mod</name> <operator pos:start="331:21" pos:end="331:22">!=</operator> <literal type="number" pos:start="331:24" pos:end="331:24">3</literal></expr>)</condition> <block pos:start="331:27" pos:end="337:13">{<block_content pos:start="333:17" pos:end="335:87">

                <expr_stmt pos:start="333:17" pos:end="333:65"><expr pos:start="333:17" pos:end="333:64"><call pos:start="333:17" pos:end="333:64"><name pos:start="333:17" pos:end="333:29">gen_lea_modrm</name><argument_list pos:start="333:30" pos:end="333:64">(<argument pos:start="333:31" pos:end="333:31"><expr pos:start="333:31" pos:end="333:31"><name pos:start="333:31" pos:end="333:31">s</name></expr></argument>, <argument pos:start="333:34" pos:end="333:38"><expr pos:start="333:34" pos:end="333:38"><name pos:start="333:34" pos:end="333:38">modrm</name></expr></argument>, <argument pos:start="333:41" pos:end="333:49"><expr pos:start="333:41" pos:end="333:49"><operator pos:start="333:41" pos:end="333:41">&amp;</operator><name pos:start="333:42" pos:end="333:49">reg_addr</name></expr></argument>, <argument pos:start="333:52" pos:end="333:63"><expr pos:start="333:52" pos:end="333:63"><operator pos:start="333:52" pos:end="333:52">&amp;</operator><name pos:start="333:53" pos:end="333:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="335:17" pos:end="335:87"><expr pos:start="335:17" pos:end="335:86"><name pos:start="335:17" pos:end="335:49"><name pos:start="335:17" pos:end="335:30">gen_ldo_env_A0</name><index pos:start="335:31" pos:end="335:49">[<expr pos:start="335:32" pos:end="335:48"><name pos:start="335:32" pos:end="335:43"><name pos:start="335:32" pos:end="335:32">s</name><operator pos:start="335:33" pos:end="335:34">-&gt;</operator><name pos:start="335:35" pos:end="335:43">mem_index</name></name> <operator pos:start="335:45" pos:end="335:46">&gt;&gt;</operator> <literal type="number" pos:start="335:48" pos:end="335:48">2</literal></expr>]</index></name><operator pos:start="335:50" pos:end="335:50">(</operator><call pos:start="335:51" pos:end="335:85"><name pos:start="335:51" pos:end="335:58">offsetof</name><argument_list pos:start="335:59" pos:end="335:85">(<argument pos:start="335:60" pos:end="335:70"><expr pos:start="335:60" pos:end="335:70"><name pos:start="335:60" pos:end="335:70">CPUX86State</name></expr></argument>,<argument pos:start="335:72" pos:end="335:84"><expr pos:start="335:72" pos:end="335:84"><name pos:start="335:72" pos:end="335:84"><name pos:start="335:72" pos:end="335:79">xmm_regs</name><index pos:start="335:80" pos:end="335:84">[<expr pos:start="335:81" pos:end="335:83"><name pos:start="335:81" pos:end="335:83">reg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="335:86" pos:end="335:86">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="337:15" pos:end="349:13">else <block pos:start="337:20" pos:end="349:13">{<block_content pos:start="339:17" pos:end="347:73">

                <expr_stmt pos:start="339:17" pos:end="339:44"><expr pos:start="339:17" pos:end="339:43"><name pos:start="339:17" pos:end="339:18">rm</name> <operator pos:start="339:20" pos:end="339:20">=</operator> <operator pos:start="339:22" pos:end="339:22">(</operator><name pos:start="339:23" pos:end="339:27">modrm</name> <operator pos:start="339:29" pos:end="339:29">&amp;</operator> <literal type="number" pos:start="339:31" pos:end="339:31">7</literal><operator pos:start="339:32" pos:end="339:32">)</operator> <operator pos:start="339:34" pos:end="339:34">|</operator> <call pos:start="339:36" pos:end="339:43"><name pos:start="339:36" pos:end="339:40">REX_B</name><argument_list pos:start="339:41" pos:end="339:43">(<argument pos:start="339:42" pos:end="339:42"><expr pos:start="339:42" pos:end="339:42"><name pos:start="339:42" pos:end="339:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="341:17" pos:end="343:73"><expr pos:start="341:17" pos:end="343:72"><call pos:start="341:17" pos:end="343:72"><name pos:start="341:17" pos:end="341:27">gen_op_movl</name><argument_list pos:start="341:28" pos:end="343:72">(<argument pos:start="341:29" pos:end="341:72"><expr pos:start="341:29" pos:end="341:72"><call pos:start="341:29" pos:end="341:72"><name pos:start="341:29" pos:end="341:36">offsetof</name><argument_list pos:start="341:37" pos:end="341:72">(<argument pos:start="341:38" pos:end="341:48"><expr pos:start="341:38" pos:end="341:48"><name pos:start="341:38" pos:end="341:48">CPUX86State</name></expr></argument>,<argument pos:start="341:50" pos:end="341:71"><expr pos:start="341:50" pos:end="341:71"><name pos:start="341:50" pos:end="341:62"><name pos:start="341:50" pos:end="341:57">xmm_regs</name><index pos:start="341:58" pos:end="341:62">[<expr pos:start="341:59" pos:end="341:61"><name pos:start="341:59" pos:end="341:61">reg</name></expr>]</index></name><operator pos:start="341:63" pos:end="341:63">.</operator><call pos:start="341:64" pos:end="341:71"><name pos:start="341:64" pos:end="341:68">XMM_L</name><argument_list pos:start="341:69" pos:end="341:71">(<argument pos:start="341:70" pos:end="341:70"><expr pos:start="341:70" pos:end="341:70"><literal type="number" pos:start="341:70" pos:end="341:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="343:29" pos:end="343:71"><expr pos:start="343:29" pos:end="343:71"><call pos:start="343:29" pos:end="343:71"><name pos:start="343:29" pos:end="343:36">offsetof</name><argument_list pos:start="343:37" pos:end="343:71">(<argument pos:start="343:38" pos:end="343:48"><expr pos:start="343:38" pos:end="343:48"><name pos:start="343:38" pos:end="343:48">CPUX86State</name></expr></argument>,<argument pos:start="343:50" pos:end="343:70"><expr pos:start="343:50" pos:end="343:70"><name pos:start="343:50" pos:end="343:61"><name pos:start="343:50" pos:end="343:57">xmm_regs</name><index pos:start="343:58" pos:end="343:61">[<expr pos:start="343:59" pos:end="343:60"><name pos:start="343:59" pos:end="343:60">rm</name></expr>]</index></name><operator pos:start="343:62" pos:end="343:62">.</operator><call pos:start="343:63" pos:end="343:70"><name pos:start="343:63" pos:end="343:67">XMM_L</name><argument_list pos:start="343:68" pos:end="343:70">(<argument pos:start="343:69" pos:end="343:69"><expr pos:start="343:69" pos:end="343:69"><literal type="number" pos:start="343:69" pos:end="343:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="345:17" pos:end="347:73"><expr pos:start="345:17" pos:end="347:72"><call pos:start="345:17" pos:end="347:72"><name pos:start="345:17" pos:end="345:27">gen_op_movl</name><argument_list pos:start="345:28" pos:end="347:72">(<argument pos:start="345:29" pos:end="345:72"><expr pos:start="345:29" pos:end="345:72"><call pos:start="345:29" pos:end="345:72"><name pos:start="345:29" pos:end="345:36">offsetof</name><argument_list pos:start="345:37" pos:end="345:72">(<argument pos:start="345:38" pos:end="345:48"><expr pos:start="345:38" pos:end="345:48"><name pos:start="345:38" pos:end="345:48">CPUX86State</name></expr></argument>,<argument pos:start="345:50" pos:end="345:71"><expr pos:start="345:50" pos:end="345:71"><name pos:start="345:50" pos:end="345:62"><name pos:start="345:50" pos:end="345:57">xmm_regs</name><index pos:start="345:58" pos:end="345:62">[<expr pos:start="345:59" pos:end="345:61"><name pos:start="345:59" pos:end="345:61">reg</name></expr>]</index></name><operator pos:start="345:63" pos:end="345:63">.</operator><call pos:start="345:64" pos:end="345:71"><name pos:start="345:64" pos:end="345:68">XMM_L</name><argument_list pos:start="345:69" pos:end="345:71">(<argument pos:start="345:70" pos:end="345:70"><expr pos:start="345:70" pos:end="345:70"><literal type="number" pos:start="345:70" pos:end="345:70">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="347:29" pos:end="347:71"><expr pos:start="347:29" pos:end="347:71"><call pos:start="347:29" pos:end="347:71"><name pos:start="347:29" pos:end="347:36">offsetof</name><argument_list pos:start="347:37" pos:end="347:71">(<argument pos:start="347:38" pos:end="347:48"><expr pos:start="347:38" pos:end="347:48"><name pos:start="347:38" pos:end="347:48">CPUX86State</name></expr></argument>,<argument pos:start="347:50" pos:end="347:70"><expr pos:start="347:50" pos:end="347:70"><name pos:start="347:50" pos:end="347:61"><name pos:start="347:50" pos:end="347:57">xmm_regs</name><index pos:start="347:58" pos:end="347:61">[<expr pos:start="347:59" pos:end="347:60"><name pos:start="347:59" pos:end="347:60">rm</name></expr>]</index></name><operator pos:start="347:62" pos:end="347:62">.</operator><call pos:start="347:63" pos:end="347:70"><name pos:start="347:63" pos:end="347:67">XMM_L</name><argument_list pos:start="347:68" pos:end="347:70">(<argument pos:start="347:69" pos:end="347:69"><expr pos:start="347:69" pos:end="347:69"><literal type="number" pos:start="347:69" pos:end="347:69">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="351:13" pos:end="353:70"><expr pos:start="351:13" pos:end="353:69"><call pos:start="351:13" pos:end="353:69"><name pos:start="351:13" pos:end="351:23">gen_op_movl</name><argument_list pos:start="351:24" pos:end="353:69">(<argument pos:start="351:25" pos:end="351:68"><expr pos:start="351:25" pos:end="351:68"><call pos:start="351:25" pos:end="351:68"><name pos:start="351:25" pos:end="351:32">offsetof</name><argument_list pos:start="351:33" pos:end="351:68">(<argument pos:start="351:34" pos:end="351:44"><expr pos:start="351:34" pos:end="351:44"><name pos:start="351:34" pos:end="351:44">CPUX86State</name></expr></argument>,<argument pos:start="351:46" pos:end="351:67"><expr pos:start="351:46" pos:end="351:67"><name pos:start="351:46" pos:end="351:58"><name pos:start="351:46" pos:end="351:53">xmm_regs</name><index pos:start="351:54" pos:end="351:58">[<expr pos:start="351:55" pos:end="351:57"><name pos:start="351:55" pos:end="351:57">reg</name></expr>]</index></name><operator pos:start="351:59" pos:end="351:59">.</operator><call pos:start="351:60" pos:end="351:67"><name pos:start="351:60" pos:end="351:64">XMM_L</name><argument_list pos:start="351:65" pos:end="351:67">(<argument pos:start="351:66" pos:end="351:66"><expr pos:start="351:66" pos:end="351:66"><literal type="number" pos:start="351:66" pos:end="351:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="353:25" pos:end="353:68"><expr pos:start="353:25" pos:end="353:68"><call pos:start="353:25" pos:end="353:68"><name pos:start="353:25" pos:end="353:32">offsetof</name><argument_list pos:start="353:33" pos:end="353:68">(<argument pos:start="353:34" pos:end="353:44"><expr pos:start="353:34" pos:end="353:44"><name pos:start="353:34" pos:end="353:44">CPUX86State</name></expr></argument>,<argument pos:start="353:46" pos:end="353:67"><expr pos:start="353:46" pos:end="353:67"><name pos:start="353:46" pos:end="353:58"><name pos:start="353:46" pos:end="353:53">xmm_regs</name><index pos:start="353:54" pos:end="353:58">[<expr pos:start="353:55" pos:end="353:57"><name pos:start="353:55" pos:end="353:57">reg</name></expr>]</index></name><operator pos:start="353:59" pos:end="353:59">.</operator><call pos:start="353:60" pos:end="353:67"><name pos:start="353:60" pos:end="353:64">XMM_L</name><argument_list pos:start="353:65" pos:end="353:67">(<argument pos:start="353:66" pos:end="353:66"><expr pos:start="353:66" pos:end="353:66"><literal type="number" pos:start="353:66" pos:end="353:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="355:13" pos:end="357:70"><expr pos:start="355:13" pos:end="357:69"><call pos:start="355:13" pos:end="357:69"><name pos:start="355:13" pos:end="355:23">gen_op_movl</name><argument_list pos:start="355:24" pos:end="357:69">(<argument pos:start="355:25" pos:end="355:68"><expr pos:start="355:25" pos:end="355:68"><call pos:start="355:25" pos:end="355:68"><name pos:start="355:25" pos:end="355:32">offsetof</name><argument_list pos:start="355:33" pos:end="355:68">(<argument pos:start="355:34" pos:end="355:44"><expr pos:start="355:34" pos:end="355:44"><name pos:start="355:34" pos:end="355:44">CPUX86State</name></expr></argument>,<argument pos:start="355:46" pos:end="355:67"><expr pos:start="355:46" pos:end="355:67"><name pos:start="355:46" pos:end="355:58"><name pos:start="355:46" pos:end="355:53">xmm_regs</name><index pos:start="355:54" pos:end="355:58">[<expr pos:start="355:55" pos:end="355:57"><name pos:start="355:55" pos:end="355:57">reg</name></expr>]</index></name><operator pos:start="355:59" pos:end="355:59">.</operator><call pos:start="355:60" pos:end="355:67"><name pos:start="355:60" pos:end="355:64">XMM_L</name><argument_list pos:start="355:65" pos:end="355:67">(<argument pos:start="355:66" pos:end="355:66"><expr pos:start="355:66" pos:end="355:66"><literal type="number" pos:start="355:66" pos:end="355:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="357:25" pos:end="357:68"><expr pos:start="357:25" pos:end="357:68"><call pos:start="357:25" pos:end="357:68"><name pos:start="357:25" pos:end="357:32">offsetof</name><argument_list pos:start="357:33" pos:end="357:68">(<argument pos:start="357:34" pos:end="357:44"><expr pos:start="357:34" pos:end="357:44"><name pos:start="357:34" pos:end="357:44">CPUX86State</name></expr></argument>,<argument pos:start="357:46" pos:end="357:67"><expr pos:start="357:46" pos:end="357:67"><name pos:start="357:46" pos:end="357:58"><name pos:start="357:46" pos:end="357:53">xmm_regs</name><index pos:start="357:54" pos:end="357:58">[<expr pos:start="357:55" pos:end="357:57"><name pos:start="357:55" pos:end="357:57">reg</name></expr>]</index></name><operator pos:start="357:59" pos:end="357:59">.</operator><call pos:start="357:60" pos:end="357:67"><name pos:start="357:60" pos:end="357:64">XMM_L</name><argument_list pos:start="357:65" pos:end="357:67">(<argument pos:start="357:66" pos:end="357:66"><expr pos:start="357:66" pos:end="357:66"><literal type="number" pos:start="357:66" pos:end="357:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="359:13" pos:end="359:18">break;</break>

        <case pos:start="361:9" pos:end="361:19">case <expr pos:start="361:14" pos:end="361:18"><literal type="number" pos:start="361:14" pos:end="361:18">0x312</literal></expr>:</case> <comment type="block" pos:start="361:21" pos:end="361:33">/* movddup */</comment>

            <if_stmt pos:start="363:13" pos:end="377:13"><if pos:start="363:13" pos:end="369:13">if <condition pos:start="363:16" pos:end="363:25">(<expr pos:start="363:17" pos:end="363:24"><name pos:start="363:17" pos:end="363:19">mod</name> <operator pos:start="363:21" pos:end="363:22">!=</operator> <literal type="number" pos:start="363:24" pos:end="363:24">3</literal></expr>)</condition> <block pos:start="363:27" pos:end="369:13">{<block_content pos:start="365:17" pos:end="367:96">

                <expr_stmt pos:start="365:17" pos:end="365:65"><expr pos:start="365:17" pos:end="365:64"><call pos:start="365:17" pos:end="365:64"><name pos:start="365:17" pos:end="365:29">gen_lea_modrm</name><argument_list pos:start="365:30" pos:end="365:64">(<argument pos:start="365:31" pos:end="365:31"><expr pos:start="365:31" pos:end="365:31"><name pos:start="365:31" pos:end="365:31">s</name></expr></argument>, <argument pos:start="365:34" pos:end="365:38"><expr pos:start="365:34" pos:end="365:38"><name pos:start="365:34" pos:end="365:38">modrm</name></expr></argument>, <argument pos:start="365:41" pos:end="365:49"><expr pos:start="365:41" pos:end="365:49"><operator pos:start="365:41" pos:end="365:41">&amp;</operator><name pos:start="365:42" pos:end="365:49">reg_addr</name></expr></argument>, <argument pos:start="365:52" pos:end="365:63"><expr pos:start="365:52" pos:end="365:63"><operator pos:start="365:52" pos:end="365:52">&amp;</operator><name pos:start="365:53" pos:end="365:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="367:17" pos:end="367:96"><expr pos:start="367:17" pos:end="367:95"><name pos:start="367:17" pos:end="367:49"><name pos:start="367:17" pos:end="367:30">gen_ldq_env_A0</name><index pos:start="367:31" pos:end="367:49">[<expr pos:start="367:32" pos:end="367:48"><name pos:start="367:32" pos:end="367:43"><name pos:start="367:32" pos:end="367:32">s</name><operator pos:start="367:33" pos:end="367:34">-&gt;</operator><name pos:start="367:35" pos:end="367:43">mem_index</name></name> <operator pos:start="367:45" pos:end="367:46">&gt;&gt;</operator> <literal type="number" pos:start="367:48" pos:end="367:48">2</literal></expr>]</index></name><operator pos:start="367:50" pos:end="367:50">(</operator><call pos:start="367:51" pos:end="367:94"><name pos:start="367:51" pos:end="367:58">offsetof</name><argument_list pos:start="367:59" pos:end="367:94">(<argument pos:start="367:60" pos:end="367:70"><expr pos:start="367:60" pos:end="367:70"><name pos:start="367:60" pos:end="367:70">CPUX86State</name></expr></argument>,<argument pos:start="367:72" pos:end="367:93"><expr pos:start="367:72" pos:end="367:93"><name pos:start="367:72" pos:end="367:84"><name pos:start="367:72" pos:end="367:79">xmm_regs</name><index pos:start="367:80" pos:end="367:84">[<expr pos:start="367:81" pos:end="367:83"><name pos:start="367:81" pos:end="367:83">reg</name></expr>]</index></name><operator pos:start="367:85" pos:end="367:85">.</operator><call pos:start="367:86" pos:end="367:93"><name pos:start="367:86" pos:end="367:90">XMM_Q</name><argument_list pos:start="367:91" pos:end="367:93">(<argument pos:start="367:92" pos:end="367:92"><expr pos:start="367:92" pos:end="367:92"><literal type="number" pos:start="367:92" pos:end="367:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="367:95" pos:end="367:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="369:15" pos:end="377:13">else <block pos:start="369:20" pos:end="377:13">{<block_content pos:start="371:17" pos:end="375:73">

                <expr_stmt pos:start="371:17" pos:end="371:44"><expr pos:start="371:17" pos:end="371:43"><name pos:start="371:17" pos:end="371:18">rm</name> <operator pos:start="371:20" pos:end="371:20">=</operator> <operator pos:start="371:22" pos:end="371:22">(</operator><name pos:start="371:23" pos:end="371:27">modrm</name> <operator pos:start="371:29" pos:end="371:29">&amp;</operator> <literal type="number" pos:start="371:31" pos:end="371:31">7</literal><operator pos:start="371:32" pos:end="371:32">)</operator> <operator pos:start="371:34" pos:end="371:34">|</operator> <call pos:start="371:36" pos:end="371:43"><name pos:start="371:36" pos:end="371:40">REX_B</name><argument_list pos:start="371:41" pos:end="371:43">(<argument pos:start="371:42" pos:end="371:42"><expr pos:start="371:42" pos:end="371:42"><name pos:start="371:42" pos:end="371:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="373:17" pos:end="375:73"><expr pos:start="373:17" pos:end="375:72"><call pos:start="373:17" pos:end="375:72"><name pos:start="373:17" pos:end="373:27">gen_op_movq</name><argument_list pos:start="373:28" pos:end="375:72">(<argument pos:start="373:29" pos:end="373:72"><expr pos:start="373:29" pos:end="373:72"><call pos:start="373:29" pos:end="373:72"><name pos:start="373:29" pos:end="373:36">offsetof</name><argument_list pos:start="373:37" pos:end="373:72">(<argument pos:start="373:38" pos:end="373:48"><expr pos:start="373:38" pos:end="373:48"><name pos:start="373:38" pos:end="373:48">CPUX86State</name></expr></argument>,<argument pos:start="373:50" pos:end="373:71"><expr pos:start="373:50" pos:end="373:71"><name pos:start="373:50" pos:end="373:62"><name pos:start="373:50" pos:end="373:57">xmm_regs</name><index pos:start="373:58" pos:end="373:62">[<expr pos:start="373:59" pos:end="373:61"><name pos:start="373:59" pos:end="373:61">reg</name></expr>]</index></name><operator pos:start="373:63" pos:end="373:63">.</operator><call pos:start="373:64" pos:end="373:71"><name pos:start="373:64" pos:end="373:68">XMM_Q</name><argument_list pos:start="373:69" pos:end="373:71">(<argument pos:start="373:70" pos:end="373:70"><expr pos:start="373:70" pos:end="373:70"><literal type="number" pos:start="373:70" pos:end="373:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="375:29" pos:end="375:71"><expr pos:start="375:29" pos:end="375:71"><call pos:start="375:29" pos:end="375:71"><name pos:start="375:29" pos:end="375:36">offsetof</name><argument_list pos:start="375:37" pos:end="375:71">(<argument pos:start="375:38" pos:end="375:48"><expr pos:start="375:38" pos:end="375:48"><name pos:start="375:38" pos:end="375:48">CPUX86State</name></expr></argument>,<argument pos:start="375:50" pos:end="375:70"><expr pos:start="375:50" pos:end="375:70"><name pos:start="375:50" pos:end="375:61"><name pos:start="375:50" pos:end="375:57">xmm_regs</name><index pos:start="375:58" pos:end="375:61">[<expr pos:start="375:59" pos:end="375:60"><name pos:start="375:59" pos:end="375:60">rm</name></expr>]</index></name><operator pos:start="375:62" pos:end="375:62">.</operator><call pos:start="375:63" pos:end="375:70"><name pos:start="375:63" pos:end="375:67">XMM_Q</name><argument_list pos:start="375:68" pos:end="375:70">(<argument pos:start="375:69" pos:end="375:69"><expr pos:start="375:69" pos:end="375:69"><literal type="number" pos:start="375:69" pos:end="375:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="379:13" pos:end="381:70"><expr pos:start="379:13" pos:end="381:69"><call pos:start="379:13" pos:end="381:69"><name pos:start="379:13" pos:end="379:23">gen_op_movq</name><argument_list pos:start="379:24" pos:end="381:69">(<argument pos:start="379:25" pos:end="379:68"><expr pos:start="379:25" pos:end="379:68"><call pos:start="379:25" pos:end="379:68"><name pos:start="379:25" pos:end="379:32">offsetof</name><argument_list pos:start="379:33" pos:end="379:68">(<argument pos:start="379:34" pos:end="379:44"><expr pos:start="379:34" pos:end="379:44"><name pos:start="379:34" pos:end="379:44">CPUX86State</name></expr></argument>,<argument pos:start="379:46" pos:end="379:67"><expr pos:start="379:46" pos:end="379:67"><name pos:start="379:46" pos:end="379:58"><name pos:start="379:46" pos:end="379:53">xmm_regs</name><index pos:start="379:54" pos:end="379:58">[<expr pos:start="379:55" pos:end="379:57"><name pos:start="379:55" pos:end="379:57">reg</name></expr>]</index></name><operator pos:start="379:59" pos:end="379:59">.</operator><call pos:start="379:60" pos:end="379:67"><name pos:start="379:60" pos:end="379:64">XMM_Q</name><argument_list pos:start="379:65" pos:end="379:67">(<argument pos:start="379:66" pos:end="379:66"><expr pos:start="379:66" pos:end="379:66"><literal type="number" pos:start="379:66" pos:end="379:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="381:25" pos:end="381:68"><expr pos:start="381:25" pos:end="381:68"><call pos:start="381:25" pos:end="381:68"><name pos:start="381:25" pos:end="381:32">offsetof</name><argument_list pos:start="381:33" pos:end="381:68">(<argument pos:start="381:34" pos:end="381:44"><expr pos:start="381:34" pos:end="381:44"><name pos:start="381:34" pos:end="381:44">CPUX86State</name></expr></argument>,<argument pos:start="381:46" pos:end="381:67"><expr pos:start="381:46" pos:end="381:67"><name pos:start="381:46" pos:end="381:58"><name pos:start="381:46" pos:end="381:53">xmm_regs</name><index pos:start="381:54" pos:end="381:58">[<expr pos:start="381:55" pos:end="381:57"><name pos:start="381:55" pos:end="381:57">reg</name></expr>]</index></name><operator pos:start="381:59" pos:end="381:59">.</operator><call pos:start="381:60" pos:end="381:67"><name pos:start="381:60" pos:end="381:64">XMM_Q</name><argument_list pos:start="381:65" pos:end="381:67">(<argument pos:start="381:66" pos:end="381:66"><expr pos:start="381:66" pos:end="381:66"><literal type="number" pos:start="381:66" pos:end="381:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="383:13" pos:end="383:18">break;</break>

        <case pos:start="385:9" pos:end="385:19">case <expr pos:start="385:14" pos:end="385:18"><literal type="number" pos:start="385:14" pos:end="385:18">0x016</literal></expr>:</case> <comment type="block" pos:start="385:21" pos:end="385:32">/* movhps */</comment>

        <case pos:start="387:9" pos:end="387:19">case <expr pos:start="387:14" pos:end="387:18"><literal type="number" pos:start="387:14" pos:end="387:18">0x116</literal></expr>:</case> <comment type="block" pos:start="387:21" pos:end="387:32">/* movhpd */</comment>

            <if_stmt pos:start="389:13" pos:end="405:13"><if pos:start="389:13" pos:end="395:13">if <condition pos:start="389:16" pos:end="389:25">(<expr pos:start="389:17" pos:end="389:24"><name pos:start="389:17" pos:end="389:19">mod</name> <operator pos:start="389:21" pos:end="389:22">!=</operator> <literal type="number" pos:start="389:24" pos:end="389:24">3</literal></expr>)</condition> <block pos:start="389:27" pos:end="395:13">{<block_content pos:start="391:17" pos:end="393:96">

                <expr_stmt pos:start="391:17" pos:end="391:65"><expr pos:start="391:17" pos:end="391:64"><call pos:start="391:17" pos:end="391:64"><name pos:start="391:17" pos:end="391:29">gen_lea_modrm</name><argument_list pos:start="391:30" pos:end="391:64">(<argument pos:start="391:31" pos:end="391:31"><expr pos:start="391:31" pos:end="391:31"><name pos:start="391:31" pos:end="391:31">s</name></expr></argument>, <argument pos:start="391:34" pos:end="391:38"><expr pos:start="391:34" pos:end="391:38"><name pos:start="391:34" pos:end="391:38">modrm</name></expr></argument>, <argument pos:start="391:41" pos:end="391:49"><expr pos:start="391:41" pos:end="391:49"><operator pos:start="391:41" pos:end="391:41">&amp;</operator><name pos:start="391:42" pos:end="391:49">reg_addr</name></expr></argument>, <argument pos:start="391:52" pos:end="391:63"><expr pos:start="391:52" pos:end="391:63"><operator pos:start="391:52" pos:end="391:52">&amp;</operator><name pos:start="391:53" pos:end="391:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="393:17" pos:end="393:96"><expr pos:start="393:17" pos:end="393:95"><name pos:start="393:17" pos:end="393:49"><name pos:start="393:17" pos:end="393:30">gen_ldq_env_A0</name><index pos:start="393:31" pos:end="393:49">[<expr pos:start="393:32" pos:end="393:48"><name pos:start="393:32" pos:end="393:43"><name pos:start="393:32" pos:end="393:32">s</name><operator pos:start="393:33" pos:end="393:34">-&gt;</operator><name pos:start="393:35" pos:end="393:43">mem_index</name></name> <operator pos:start="393:45" pos:end="393:46">&gt;&gt;</operator> <literal type="number" pos:start="393:48" pos:end="393:48">2</literal></expr>]</index></name><operator pos:start="393:50" pos:end="393:50">(</operator><call pos:start="393:51" pos:end="393:94"><name pos:start="393:51" pos:end="393:58">offsetof</name><argument_list pos:start="393:59" pos:end="393:94">(<argument pos:start="393:60" pos:end="393:70"><expr pos:start="393:60" pos:end="393:70"><name pos:start="393:60" pos:end="393:70">CPUX86State</name></expr></argument>,<argument pos:start="393:72" pos:end="393:93"><expr pos:start="393:72" pos:end="393:93"><name pos:start="393:72" pos:end="393:84"><name pos:start="393:72" pos:end="393:79">xmm_regs</name><index pos:start="393:80" pos:end="393:84">[<expr pos:start="393:81" pos:end="393:83"><name pos:start="393:81" pos:end="393:83">reg</name></expr>]</index></name><operator pos:start="393:85" pos:end="393:85">.</operator><call pos:start="393:86" pos:end="393:93"><name pos:start="393:86" pos:end="393:90">XMM_Q</name><argument_list pos:start="393:91" pos:end="393:93">(<argument pos:start="393:92" pos:end="393:92"><expr pos:start="393:92" pos:end="393:92"><literal type="number" pos:start="393:92" pos:end="393:92">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="393:95" pos:end="393:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="395:15" pos:end="405:13">else <block pos:start="395:20" pos:end="405:13">{<block_content pos:start="399:17" pos:end="403:73">

                <comment type="block" pos:start="397:17" pos:end="397:29">/* movlhps */</comment>

                <expr_stmt pos:start="399:17" pos:end="399:44"><expr pos:start="399:17" pos:end="399:43"><name pos:start="399:17" pos:end="399:18">rm</name> <operator pos:start="399:20" pos:end="399:20">=</operator> <operator pos:start="399:22" pos:end="399:22">(</operator><name pos:start="399:23" pos:end="399:27">modrm</name> <operator pos:start="399:29" pos:end="399:29">&amp;</operator> <literal type="number" pos:start="399:31" pos:end="399:31">7</literal><operator pos:start="399:32" pos:end="399:32">)</operator> <operator pos:start="399:34" pos:end="399:34">|</operator> <call pos:start="399:36" pos:end="399:43"><name pos:start="399:36" pos:end="399:40">REX_B</name><argument_list pos:start="399:41" pos:end="399:43">(<argument pos:start="399:42" pos:end="399:42"><expr pos:start="399:42" pos:end="399:42"><name pos:start="399:42" pos:end="399:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="401:17" pos:end="403:73"><expr pos:start="401:17" pos:end="403:72"><call pos:start="401:17" pos:end="403:72"><name pos:start="401:17" pos:end="401:27">gen_op_movq</name><argument_list pos:start="401:28" pos:end="403:72">(<argument pos:start="401:29" pos:end="401:72"><expr pos:start="401:29" pos:end="401:72"><call pos:start="401:29" pos:end="401:72"><name pos:start="401:29" pos:end="401:36">offsetof</name><argument_list pos:start="401:37" pos:end="401:72">(<argument pos:start="401:38" pos:end="401:48"><expr pos:start="401:38" pos:end="401:48"><name pos:start="401:38" pos:end="401:48">CPUX86State</name></expr></argument>,<argument pos:start="401:50" pos:end="401:71"><expr pos:start="401:50" pos:end="401:71"><name pos:start="401:50" pos:end="401:62"><name pos:start="401:50" pos:end="401:57">xmm_regs</name><index pos:start="401:58" pos:end="401:62">[<expr pos:start="401:59" pos:end="401:61"><name pos:start="401:59" pos:end="401:61">reg</name></expr>]</index></name><operator pos:start="401:63" pos:end="401:63">.</operator><call pos:start="401:64" pos:end="401:71"><name pos:start="401:64" pos:end="401:68">XMM_Q</name><argument_list pos:start="401:69" pos:end="401:71">(<argument pos:start="401:70" pos:end="401:70"><expr pos:start="401:70" pos:end="401:70"><literal type="number" pos:start="401:70" pos:end="401:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="403:29" pos:end="403:71"><expr pos:start="403:29" pos:end="403:71"><call pos:start="403:29" pos:end="403:71"><name pos:start="403:29" pos:end="403:36">offsetof</name><argument_list pos:start="403:37" pos:end="403:71">(<argument pos:start="403:38" pos:end="403:48"><expr pos:start="403:38" pos:end="403:48"><name pos:start="403:38" pos:end="403:48">CPUX86State</name></expr></argument>,<argument pos:start="403:50" pos:end="403:70"><expr pos:start="403:50" pos:end="403:70"><name pos:start="403:50" pos:end="403:61"><name pos:start="403:50" pos:end="403:57">xmm_regs</name><index pos:start="403:58" pos:end="403:61">[<expr pos:start="403:59" pos:end="403:60"><name pos:start="403:59" pos:end="403:60">rm</name></expr>]</index></name><operator pos:start="403:62" pos:end="403:62">.</operator><call pos:start="403:63" pos:end="403:70"><name pos:start="403:63" pos:end="403:67">XMM_Q</name><argument_list pos:start="403:68" pos:end="403:70">(<argument pos:start="403:69" pos:end="403:69"><expr pos:start="403:69" pos:end="403:69"><literal type="number" pos:start="403:69" pos:end="403:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="407:13" pos:end="407:18">break;</break>

        <case pos:start="409:9" pos:end="409:19">case <expr pos:start="409:14" pos:end="409:18"><literal type="number" pos:start="409:14" pos:end="409:18">0x216</literal></expr>:</case> <comment type="block" pos:start="409:21" pos:end="409:34">/* movshdup */</comment>

            <if_stmt pos:start="411:13" pos:end="429:13"><if pos:start="411:13" pos:end="417:13">if <condition pos:start="411:16" pos:end="411:25">(<expr pos:start="411:17" pos:end="411:24"><name pos:start="411:17" pos:end="411:19">mod</name> <operator pos:start="411:21" pos:end="411:22">!=</operator> <literal type="number" pos:start="411:24" pos:end="411:24">3</literal></expr>)</condition> <block pos:start="411:27" pos:end="417:13">{<block_content pos:start="413:17" pos:end="415:87">

                <expr_stmt pos:start="413:17" pos:end="413:65"><expr pos:start="413:17" pos:end="413:64"><call pos:start="413:17" pos:end="413:64"><name pos:start="413:17" pos:end="413:29">gen_lea_modrm</name><argument_list pos:start="413:30" pos:end="413:64">(<argument pos:start="413:31" pos:end="413:31"><expr pos:start="413:31" pos:end="413:31"><name pos:start="413:31" pos:end="413:31">s</name></expr></argument>, <argument pos:start="413:34" pos:end="413:38"><expr pos:start="413:34" pos:end="413:38"><name pos:start="413:34" pos:end="413:38">modrm</name></expr></argument>, <argument pos:start="413:41" pos:end="413:49"><expr pos:start="413:41" pos:end="413:49"><operator pos:start="413:41" pos:end="413:41">&amp;</operator><name pos:start="413:42" pos:end="413:49">reg_addr</name></expr></argument>, <argument pos:start="413:52" pos:end="413:63"><expr pos:start="413:52" pos:end="413:63"><operator pos:start="413:52" pos:end="413:52">&amp;</operator><name pos:start="413:53" pos:end="413:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="415:17" pos:end="415:87"><expr pos:start="415:17" pos:end="415:86"><name pos:start="415:17" pos:end="415:49"><name pos:start="415:17" pos:end="415:30">gen_ldo_env_A0</name><index pos:start="415:31" pos:end="415:49">[<expr pos:start="415:32" pos:end="415:48"><name pos:start="415:32" pos:end="415:43"><name pos:start="415:32" pos:end="415:32">s</name><operator pos:start="415:33" pos:end="415:34">-&gt;</operator><name pos:start="415:35" pos:end="415:43">mem_index</name></name> <operator pos:start="415:45" pos:end="415:46">&gt;&gt;</operator> <literal type="number" pos:start="415:48" pos:end="415:48">2</literal></expr>]</index></name><operator pos:start="415:50" pos:end="415:50">(</operator><call pos:start="415:51" pos:end="415:85"><name pos:start="415:51" pos:end="415:58">offsetof</name><argument_list pos:start="415:59" pos:end="415:85">(<argument pos:start="415:60" pos:end="415:70"><expr pos:start="415:60" pos:end="415:70"><name pos:start="415:60" pos:end="415:70">CPUX86State</name></expr></argument>,<argument pos:start="415:72" pos:end="415:84"><expr pos:start="415:72" pos:end="415:84"><name pos:start="415:72" pos:end="415:84"><name pos:start="415:72" pos:end="415:79">xmm_regs</name><index pos:start="415:80" pos:end="415:84">[<expr pos:start="415:81" pos:end="415:83"><name pos:start="415:81" pos:end="415:83">reg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="415:86" pos:end="415:86">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="417:15" pos:end="429:13">else <block pos:start="417:20" pos:end="429:13">{<block_content pos:start="419:17" pos:end="427:73">

                <expr_stmt pos:start="419:17" pos:end="419:44"><expr pos:start="419:17" pos:end="419:43"><name pos:start="419:17" pos:end="419:18">rm</name> <operator pos:start="419:20" pos:end="419:20">=</operator> <operator pos:start="419:22" pos:end="419:22">(</operator><name pos:start="419:23" pos:end="419:27">modrm</name> <operator pos:start="419:29" pos:end="419:29">&amp;</operator> <literal type="number" pos:start="419:31" pos:end="419:31">7</literal><operator pos:start="419:32" pos:end="419:32">)</operator> <operator pos:start="419:34" pos:end="419:34">|</operator> <call pos:start="419:36" pos:end="419:43"><name pos:start="419:36" pos:end="419:40">REX_B</name><argument_list pos:start="419:41" pos:end="419:43">(<argument pos:start="419:42" pos:end="419:42"><expr pos:start="419:42" pos:end="419:42"><name pos:start="419:42" pos:end="419:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="421:17" pos:end="423:73"><expr pos:start="421:17" pos:end="423:72"><call pos:start="421:17" pos:end="423:72"><name pos:start="421:17" pos:end="421:27">gen_op_movl</name><argument_list pos:start="421:28" pos:end="423:72">(<argument pos:start="421:29" pos:end="421:72"><expr pos:start="421:29" pos:end="421:72"><call pos:start="421:29" pos:end="421:72"><name pos:start="421:29" pos:end="421:36">offsetof</name><argument_list pos:start="421:37" pos:end="421:72">(<argument pos:start="421:38" pos:end="421:48"><expr pos:start="421:38" pos:end="421:48"><name pos:start="421:38" pos:end="421:48">CPUX86State</name></expr></argument>,<argument pos:start="421:50" pos:end="421:71"><expr pos:start="421:50" pos:end="421:71"><name pos:start="421:50" pos:end="421:62"><name pos:start="421:50" pos:end="421:57">xmm_regs</name><index pos:start="421:58" pos:end="421:62">[<expr pos:start="421:59" pos:end="421:61"><name pos:start="421:59" pos:end="421:61">reg</name></expr>]</index></name><operator pos:start="421:63" pos:end="421:63">.</operator><call pos:start="421:64" pos:end="421:71"><name pos:start="421:64" pos:end="421:68">XMM_L</name><argument_list pos:start="421:69" pos:end="421:71">(<argument pos:start="421:70" pos:end="421:70"><expr pos:start="421:70" pos:end="421:70"><literal type="number" pos:start="421:70" pos:end="421:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="423:29" pos:end="423:71"><expr pos:start="423:29" pos:end="423:71"><call pos:start="423:29" pos:end="423:71"><name pos:start="423:29" pos:end="423:36">offsetof</name><argument_list pos:start="423:37" pos:end="423:71">(<argument pos:start="423:38" pos:end="423:48"><expr pos:start="423:38" pos:end="423:48"><name pos:start="423:38" pos:end="423:48">CPUX86State</name></expr></argument>,<argument pos:start="423:50" pos:end="423:70"><expr pos:start="423:50" pos:end="423:70"><name pos:start="423:50" pos:end="423:61"><name pos:start="423:50" pos:end="423:57">xmm_regs</name><index pos:start="423:58" pos:end="423:61">[<expr pos:start="423:59" pos:end="423:60"><name pos:start="423:59" pos:end="423:60">rm</name></expr>]</index></name><operator pos:start="423:62" pos:end="423:62">.</operator><call pos:start="423:63" pos:end="423:70"><name pos:start="423:63" pos:end="423:67">XMM_L</name><argument_list pos:start="423:68" pos:end="423:70">(<argument pos:start="423:69" pos:end="423:69"><expr pos:start="423:69" pos:end="423:69"><literal type="number" pos:start="423:69" pos:end="423:69">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="425:17" pos:end="427:73"><expr pos:start="425:17" pos:end="427:72"><call pos:start="425:17" pos:end="427:72"><name pos:start="425:17" pos:end="425:27">gen_op_movl</name><argument_list pos:start="425:28" pos:end="427:72">(<argument pos:start="425:29" pos:end="425:72"><expr pos:start="425:29" pos:end="425:72"><call pos:start="425:29" pos:end="425:72"><name pos:start="425:29" pos:end="425:36">offsetof</name><argument_list pos:start="425:37" pos:end="425:72">(<argument pos:start="425:38" pos:end="425:48"><expr pos:start="425:38" pos:end="425:48"><name pos:start="425:38" pos:end="425:48">CPUX86State</name></expr></argument>,<argument pos:start="425:50" pos:end="425:71"><expr pos:start="425:50" pos:end="425:71"><name pos:start="425:50" pos:end="425:62"><name pos:start="425:50" pos:end="425:57">xmm_regs</name><index pos:start="425:58" pos:end="425:62">[<expr pos:start="425:59" pos:end="425:61"><name pos:start="425:59" pos:end="425:61">reg</name></expr>]</index></name><operator pos:start="425:63" pos:end="425:63">.</operator><call pos:start="425:64" pos:end="425:71"><name pos:start="425:64" pos:end="425:68">XMM_L</name><argument_list pos:start="425:69" pos:end="425:71">(<argument pos:start="425:70" pos:end="425:70"><expr pos:start="425:70" pos:end="425:70"><literal type="number" pos:start="425:70" pos:end="425:70">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="427:29" pos:end="427:71"><expr pos:start="427:29" pos:end="427:71"><call pos:start="427:29" pos:end="427:71"><name pos:start="427:29" pos:end="427:36">offsetof</name><argument_list pos:start="427:37" pos:end="427:71">(<argument pos:start="427:38" pos:end="427:48"><expr pos:start="427:38" pos:end="427:48"><name pos:start="427:38" pos:end="427:48">CPUX86State</name></expr></argument>,<argument pos:start="427:50" pos:end="427:70"><expr pos:start="427:50" pos:end="427:70"><name pos:start="427:50" pos:end="427:61"><name pos:start="427:50" pos:end="427:57">xmm_regs</name><index pos:start="427:58" pos:end="427:61">[<expr pos:start="427:59" pos:end="427:60"><name pos:start="427:59" pos:end="427:60">rm</name></expr>]</index></name><operator pos:start="427:62" pos:end="427:62">.</operator><call pos:start="427:63" pos:end="427:70"><name pos:start="427:63" pos:end="427:67">XMM_L</name><argument_list pos:start="427:68" pos:end="427:70">(<argument pos:start="427:69" pos:end="427:69"><expr pos:start="427:69" pos:end="427:69"><literal type="number" pos:start="427:69" pos:end="427:69">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="431:13" pos:end="433:70"><expr pos:start="431:13" pos:end="433:69"><call pos:start="431:13" pos:end="433:69"><name pos:start="431:13" pos:end="431:23">gen_op_movl</name><argument_list pos:start="431:24" pos:end="433:69">(<argument pos:start="431:25" pos:end="431:68"><expr pos:start="431:25" pos:end="431:68"><call pos:start="431:25" pos:end="431:68"><name pos:start="431:25" pos:end="431:32">offsetof</name><argument_list pos:start="431:33" pos:end="431:68">(<argument pos:start="431:34" pos:end="431:44"><expr pos:start="431:34" pos:end="431:44"><name pos:start="431:34" pos:end="431:44">CPUX86State</name></expr></argument>,<argument pos:start="431:46" pos:end="431:67"><expr pos:start="431:46" pos:end="431:67"><name pos:start="431:46" pos:end="431:58"><name pos:start="431:46" pos:end="431:53">xmm_regs</name><index pos:start="431:54" pos:end="431:58">[<expr pos:start="431:55" pos:end="431:57"><name pos:start="431:55" pos:end="431:57">reg</name></expr>]</index></name><operator pos:start="431:59" pos:end="431:59">.</operator><call pos:start="431:60" pos:end="431:67"><name pos:start="431:60" pos:end="431:64">XMM_L</name><argument_list pos:start="431:65" pos:end="431:67">(<argument pos:start="431:66" pos:end="431:66"><expr pos:start="431:66" pos:end="431:66"><literal type="number" pos:start="431:66" pos:end="431:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="433:25" pos:end="433:68"><expr pos:start="433:25" pos:end="433:68"><call pos:start="433:25" pos:end="433:68"><name pos:start="433:25" pos:end="433:32">offsetof</name><argument_list pos:start="433:33" pos:end="433:68">(<argument pos:start="433:34" pos:end="433:44"><expr pos:start="433:34" pos:end="433:44"><name pos:start="433:34" pos:end="433:44">CPUX86State</name></expr></argument>,<argument pos:start="433:46" pos:end="433:67"><expr pos:start="433:46" pos:end="433:67"><name pos:start="433:46" pos:end="433:58"><name pos:start="433:46" pos:end="433:53">xmm_regs</name><index pos:start="433:54" pos:end="433:58">[<expr pos:start="433:55" pos:end="433:57"><name pos:start="433:55" pos:end="433:57">reg</name></expr>]</index></name><operator pos:start="433:59" pos:end="433:59">.</operator><call pos:start="433:60" pos:end="433:67"><name pos:start="433:60" pos:end="433:64">XMM_L</name><argument_list pos:start="433:65" pos:end="433:67">(<argument pos:start="433:66" pos:end="433:66"><expr pos:start="433:66" pos:end="433:66"><literal type="number" pos:start="433:66" pos:end="433:66">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="435:13" pos:end="437:70"><expr pos:start="435:13" pos:end="437:69"><call pos:start="435:13" pos:end="437:69"><name pos:start="435:13" pos:end="435:23">gen_op_movl</name><argument_list pos:start="435:24" pos:end="437:69">(<argument pos:start="435:25" pos:end="435:68"><expr pos:start="435:25" pos:end="435:68"><call pos:start="435:25" pos:end="435:68"><name pos:start="435:25" pos:end="435:32">offsetof</name><argument_list pos:start="435:33" pos:end="435:68">(<argument pos:start="435:34" pos:end="435:44"><expr pos:start="435:34" pos:end="435:44"><name pos:start="435:34" pos:end="435:44">CPUX86State</name></expr></argument>,<argument pos:start="435:46" pos:end="435:67"><expr pos:start="435:46" pos:end="435:67"><name pos:start="435:46" pos:end="435:58"><name pos:start="435:46" pos:end="435:53">xmm_regs</name><index pos:start="435:54" pos:end="435:58">[<expr pos:start="435:55" pos:end="435:57"><name pos:start="435:55" pos:end="435:57">reg</name></expr>]</index></name><operator pos:start="435:59" pos:end="435:59">.</operator><call pos:start="435:60" pos:end="435:67"><name pos:start="435:60" pos:end="435:64">XMM_L</name><argument_list pos:start="435:65" pos:end="435:67">(<argument pos:start="435:66" pos:end="435:66"><expr pos:start="435:66" pos:end="435:66"><literal type="number" pos:start="435:66" pos:end="435:66">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="437:25" pos:end="437:68"><expr pos:start="437:25" pos:end="437:68"><call pos:start="437:25" pos:end="437:68"><name pos:start="437:25" pos:end="437:32">offsetof</name><argument_list pos:start="437:33" pos:end="437:68">(<argument pos:start="437:34" pos:end="437:44"><expr pos:start="437:34" pos:end="437:44"><name pos:start="437:34" pos:end="437:44">CPUX86State</name></expr></argument>,<argument pos:start="437:46" pos:end="437:67"><expr pos:start="437:46" pos:end="437:67"><name pos:start="437:46" pos:end="437:58"><name pos:start="437:46" pos:end="437:53">xmm_regs</name><index pos:start="437:54" pos:end="437:58">[<expr pos:start="437:55" pos:end="437:57"><name pos:start="437:55" pos:end="437:57">reg</name></expr>]</index></name><operator pos:start="437:59" pos:end="437:59">.</operator><call pos:start="437:60" pos:end="437:67"><name pos:start="437:60" pos:end="437:64">XMM_L</name><argument_list pos:start="437:65" pos:end="437:67">(<argument pos:start="437:66" pos:end="437:66"><expr pos:start="437:66" pos:end="437:66"><literal type="number" pos:start="437:66" pos:end="437:66">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="439:13" pos:end="439:18">break;</break>

        <case pos:start="441:9" pos:end="444:0">case <expr pos:start="441:14" pos:end="441:17"><literal type="number" pos:start="441:14" pos:end="441:17">0x7e</literal></expr>:</case> <comment type="block" pos:start="441:20" pos:end="441:36">/* movd ea, mm */</comment>

<cpp:ifdef pos:start="443:1" pos:end="443:20">#<cpp:directive pos:start="443:2" pos:end="443:6">ifdef</cpp:directive> <name pos:start="443:8" pos:end="443:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="445:13" pos:end="461:13"><if pos:start="445:13" pos:end="451:13">if <condition pos:start="445:16" pos:end="445:30">(<expr pos:start="445:17" pos:end="445:29"><name pos:start="445:17" pos:end="445:24"><name pos:start="445:17" pos:end="445:17">s</name><operator pos:start="445:18" pos:end="445:19">-&gt;</operator><name pos:start="445:20" pos:end="445:24">dflag</name></name> <operator pos:start="445:26" pos:end="445:27">==</operator> <literal type="number" pos:start="445:29" pos:end="445:29">2</literal></expr>)</condition> <block pos:start="445:32" pos:end="451:13">{<block_content pos:start="447:17" pos:end="449:62">

                <expr_stmt pos:start="447:17" pos:end="447:77"><expr pos:start="447:17" pos:end="447:76"><call pos:start="447:17" pos:end="447:76"><name pos:start="447:17" pos:end="447:37">gen_op_movq_T0_mm_mmx</name><argument_list pos:start="447:38" pos:end="447:76">(<argument pos:start="447:39" pos:end="447:75"><expr pos:start="447:39" pos:end="447:75"><call pos:start="447:39" pos:end="447:75"><name pos:start="447:39" pos:end="447:46">offsetof</name><argument_list pos:start="447:47" pos:end="447:75">(<argument pos:start="447:48" pos:end="447:58"><expr pos:start="447:48" pos:end="447:58"><name pos:start="447:48" pos:end="447:58">CPUX86State</name></expr></argument>,<argument pos:start="447:60" pos:end="447:74"><expr pos:start="447:60" pos:end="447:74"><name pos:start="447:60" pos:end="447:70"><name pos:start="447:60" pos:end="447:65">fpregs</name><index pos:start="447:66" pos:end="447:70">[<expr pos:start="447:67" pos:end="447:69"><name pos:start="447:67" pos:end="447:69">reg</name></expr>]</index></name><operator pos:start="447:71" pos:end="447:71">.</operator><name pos:start="447:72" pos:end="447:74">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="449:17" pos:end="449:62"><expr pos:start="449:17" pos:end="449:61"><call pos:start="449:17" pos:end="449:61"><name pos:start="449:17" pos:end="449:30">gen_ldst_modrm</name><argument_list pos:start="449:31" pos:end="449:61">(<argument pos:start="449:32" pos:end="449:32"><expr pos:start="449:32" pos:end="449:32"><name pos:start="449:32" pos:end="449:32">s</name></expr></argument>, <argument pos:start="449:35" pos:end="449:39"><expr pos:start="449:35" pos:end="449:39"><name pos:start="449:35" pos:end="449:39">modrm</name></expr></argument>, <argument pos:start="449:42" pos:end="449:48"><expr pos:start="449:42" pos:end="449:48"><name pos:start="449:42" pos:end="449:48">OT_QUAD</name></expr></argument>, <argument pos:start="449:51" pos:end="449:57"><expr pos:start="449:51" pos:end="449:57"><name pos:start="449:51" pos:end="449:57">OR_TMP0</name></expr></argument>, <argument pos:start="449:60" pos:end="449:60"><expr pos:start="449:60" pos:end="449:60"><literal type="number" pos:start="449:60" pos:end="449:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="451:15" pos:end="461:13">else

<cpp:endif pos:start="453:1" pos:end="453:6">#<cpp:directive pos:start="453:2" pos:end="453:6">endif</cpp:directive></cpp:endif>

            <block pos:start="455:13" pos:end="461:13">{<block_content pos:start="457:17" pos:end="459:62">

                <expr_stmt pos:start="457:17" pos:end="457:77"><expr pos:start="457:17" pos:end="457:76"><call pos:start="457:17" pos:end="457:76"><name pos:start="457:17" pos:end="457:37">gen_op_movl_T0_mm_mmx</name><argument_list pos:start="457:38" pos:end="457:76">(<argument pos:start="457:39" pos:end="457:75"><expr pos:start="457:39" pos:end="457:75"><call pos:start="457:39" pos:end="457:75"><name pos:start="457:39" pos:end="457:46">offsetof</name><argument_list pos:start="457:47" pos:end="457:75">(<argument pos:start="457:48" pos:end="457:58"><expr pos:start="457:48" pos:end="457:58"><name pos:start="457:48" pos:end="457:58">CPUX86State</name></expr></argument>,<argument pos:start="457:60" pos:end="457:74"><expr pos:start="457:60" pos:end="457:74"><name pos:start="457:60" pos:end="457:70"><name pos:start="457:60" pos:end="457:65">fpregs</name><index pos:start="457:66" pos:end="457:70">[<expr pos:start="457:67" pos:end="457:69"><name pos:start="457:67" pos:end="457:69">reg</name></expr>]</index></name><operator pos:start="457:71" pos:end="457:71">.</operator><name pos:start="457:72" pos:end="457:74">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="459:17" pos:end="459:62"><expr pos:start="459:17" pos:end="459:61"><call pos:start="459:17" pos:end="459:61"><name pos:start="459:17" pos:end="459:30">gen_ldst_modrm</name><argument_list pos:start="459:31" pos:end="459:61">(<argument pos:start="459:32" pos:end="459:32"><expr pos:start="459:32" pos:end="459:32"><name pos:start="459:32" pos:end="459:32">s</name></expr></argument>, <argument pos:start="459:35" pos:end="459:39"><expr pos:start="459:35" pos:end="459:39"><name pos:start="459:35" pos:end="459:39">modrm</name></expr></argument>, <argument pos:start="459:42" pos:end="459:48"><expr pos:start="459:42" pos:end="459:48"><name pos:start="459:42" pos:end="459:48">OT_LONG</name></expr></argument>, <argument pos:start="459:51" pos:end="459:57"><expr pos:start="459:51" pos:end="459:57"><name pos:start="459:51" pos:end="459:57">OR_TMP0</name></expr></argument>, <argument pos:start="459:60" pos:end="459:60"><expr pos:start="459:60" pos:end="459:60"><literal type="number" pos:start="459:60" pos:end="459:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="463:13" pos:end="463:18">break;</break>

        <case pos:start="465:9" pos:end="468:0">case <expr pos:start="465:14" pos:end="465:18"><literal type="number" pos:start="465:14" pos:end="465:18">0x17e</literal></expr>:</case> <comment type="block" pos:start="465:21" pos:end="465:38">/* movd ea, xmm */</comment>

<cpp:ifdef pos:start="467:1" pos:end="467:20">#<cpp:directive pos:start="467:2" pos:end="467:6">ifdef</cpp:directive> <name pos:start="467:8" pos:end="467:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="469:13" pos:end="485:13"><if pos:start="469:13" pos:end="475:13">if <condition pos:start="469:16" pos:end="469:30">(<expr pos:start="469:17" pos:end="469:29"><name pos:start="469:17" pos:end="469:24"><name pos:start="469:17" pos:end="469:17">s</name><operator pos:start="469:18" pos:end="469:19">-&gt;</operator><name pos:start="469:20" pos:end="469:24">dflag</name></name> <operator pos:start="469:26" pos:end="469:27">==</operator> <literal type="number" pos:start="469:29" pos:end="469:29">2</literal></expr>)</condition> <block pos:start="469:32" pos:end="475:13">{<block_content pos:start="471:17" pos:end="473:62">

                <expr_stmt pos:start="471:17" pos:end="471:75"><expr pos:start="471:17" pos:end="471:74"><call pos:start="471:17" pos:end="471:74"><name pos:start="471:17" pos:end="471:37">gen_op_movq_T0_mm_xmm</name><argument_list pos:start="471:38" pos:end="471:74">(<argument pos:start="471:39" pos:end="471:73"><expr pos:start="471:39" pos:end="471:73"><call pos:start="471:39" pos:end="471:73"><name pos:start="471:39" pos:end="471:46">offsetof</name><argument_list pos:start="471:47" pos:end="471:73">(<argument pos:start="471:48" pos:end="471:58"><expr pos:start="471:48" pos:end="471:58"><name pos:start="471:48" pos:end="471:58">CPUX86State</name></expr></argument>,<argument pos:start="471:60" pos:end="471:72"><expr pos:start="471:60" pos:end="471:72"><name pos:start="471:60" pos:end="471:72"><name pos:start="471:60" pos:end="471:67">xmm_regs</name><index pos:start="471:68" pos:end="471:72">[<expr pos:start="471:69" pos:end="471:71"><name pos:start="471:69" pos:end="471:71">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="473:17" pos:end="473:62"><expr pos:start="473:17" pos:end="473:61"><call pos:start="473:17" pos:end="473:61"><name pos:start="473:17" pos:end="473:30">gen_ldst_modrm</name><argument_list pos:start="473:31" pos:end="473:61">(<argument pos:start="473:32" pos:end="473:32"><expr pos:start="473:32" pos:end="473:32"><name pos:start="473:32" pos:end="473:32">s</name></expr></argument>, <argument pos:start="473:35" pos:end="473:39"><expr pos:start="473:35" pos:end="473:39"><name pos:start="473:35" pos:end="473:39">modrm</name></expr></argument>, <argument pos:start="473:42" pos:end="473:48"><expr pos:start="473:42" pos:end="473:48"><name pos:start="473:42" pos:end="473:48">OT_QUAD</name></expr></argument>, <argument pos:start="473:51" pos:end="473:57"><expr pos:start="473:51" pos:end="473:57"><name pos:start="473:51" pos:end="473:57">OR_TMP0</name></expr></argument>, <argument pos:start="473:60" pos:end="473:60"><expr pos:start="473:60" pos:end="473:60"><literal type="number" pos:start="473:60" pos:end="473:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="475:15" pos:end="485:13">else

<cpp:endif pos:start="477:1" pos:end="477:6">#<cpp:directive pos:start="477:2" pos:end="477:6">endif</cpp:directive></cpp:endif>

            <block pos:start="479:13" pos:end="485:13">{<block_content pos:start="481:17" pos:end="483:62">

                <expr_stmt pos:start="481:17" pos:end="481:75"><expr pos:start="481:17" pos:end="481:74"><call pos:start="481:17" pos:end="481:74"><name pos:start="481:17" pos:end="481:37">gen_op_movl_T0_mm_xmm</name><argument_list pos:start="481:38" pos:end="481:74">(<argument pos:start="481:39" pos:end="481:73"><expr pos:start="481:39" pos:end="481:73"><call pos:start="481:39" pos:end="481:73"><name pos:start="481:39" pos:end="481:46">offsetof</name><argument_list pos:start="481:47" pos:end="481:73">(<argument pos:start="481:48" pos:end="481:58"><expr pos:start="481:48" pos:end="481:58"><name pos:start="481:48" pos:end="481:58">CPUX86State</name></expr></argument>,<argument pos:start="481:60" pos:end="481:72"><expr pos:start="481:60" pos:end="481:72"><name pos:start="481:60" pos:end="481:72"><name pos:start="481:60" pos:end="481:67">xmm_regs</name><index pos:start="481:68" pos:end="481:72">[<expr pos:start="481:69" pos:end="481:71"><name pos:start="481:69" pos:end="481:71">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="483:17" pos:end="483:62"><expr pos:start="483:17" pos:end="483:61"><call pos:start="483:17" pos:end="483:61"><name pos:start="483:17" pos:end="483:30">gen_ldst_modrm</name><argument_list pos:start="483:31" pos:end="483:61">(<argument pos:start="483:32" pos:end="483:32"><expr pos:start="483:32" pos:end="483:32"><name pos:start="483:32" pos:end="483:32">s</name></expr></argument>, <argument pos:start="483:35" pos:end="483:39"><expr pos:start="483:35" pos:end="483:39"><name pos:start="483:35" pos:end="483:39">modrm</name></expr></argument>, <argument pos:start="483:42" pos:end="483:48"><expr pos:start="483:42" pos:end="483:48"><name pos:start="483:42" pos:end="483:48">OT_LONG</name></expr></argument>, <argument pos:start="483:51" pos:end="483:57"><expr pos:start="483:51" pos:end="483:57"><name pos:start="483:51" pos:end="483:57">OR_TMP0</name></expr></argument>, <argument pos:start="483:60" pos:end="483:60"><expr pos:start="483:60" pos:end="483:60"><literal type="number" pos:start="483:60" pos:end="483:60">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="487:13" pos:end="487:18">break;</break>

        <case pos:start="489:9" pos:end="489:19">case <expr pos:start="489:14" pos:end="489:18"><literal type="number" pos:start="489:14" pos:end="489:18">0x27e</literal></expr>:</case> <comment type="block" pos:start="489:21" pos:end="489:38">/* movq xmm, ea */</comment>

            <if_stmt pos:start="491:13" pos:end="505:13"><if pos:start="491:13" pos:end="497:13">if <condition pos:start="491:16" pos:end="491:25">(<expr pos:start="491:17" pos:end="491:24"><name pos:start="491:17" pos:end="491:19">mod</name> <operator pos:start="491:21" pos:end="491:22">!=</operator> <literal type="number" pos:start="491:24" pos:end="491:24">3</literal></expr>)</condition> <block pos:start="491:27" pos:end="497:13">{<block_content pos:start="493:17" pos:end="495:96">

                <expr_stmt pos:start="493:17" pos:end="493:65"><expr pos:start="493:17" pos:end="493:64"><call pos:start="493:17" pos:end="493:64"><name pos:start="493:17" pos:end="493:29">gen_lea_modrm</name><argument_list pos:start="493:30" pos:end="493:64">(<argument pos:start="493:31" pos:end="493:31"><expr pos:start="493:31" pos:end="493:31"><name pos:start="493:31" pos:end="493:31">s</name></expr></argument>, <argument pos:start="493:34" pos:end="493:38"><expr pos:start="493:34" pos:end="493:38"><name pos:start="493:34" pos:end="493:38">modrm</name></expr></argument>, <argument pos:start="493:41" pos:end="493:49"><expr pos:start="493:41" pos:end="493:49"><operator pos:start="493:41" pos:end="493:41">&amp;</operator><name pos:start="493:42" pos:end="493:49">reg_addr</name></expr></argument>, <argument pos:start="493:52" pos:end="493:63"><expr pos:start="493:52" pos:end="493:63"><operator pos:start="493:52" pos:end="493:52">&amp;</operator><name pos:start="493:53" pos:end="493:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="495:17" pos:end="495:96"><expr pos:start="495:17" pos:end="495:95"><name pos:start="495:17" pos:end="495:49"><name pos:start="495:17" pos:end="495:30">gen_ldq_env_A0</name><index pos:start="495:31" pos:end="495:49">[<expr pos:start="495:32" pos:end="495:48"><name pos:start="495:32" pos:end="495:43"><name pos:start="495:32" pos:end="495:32">s</name><operator pos:start="495:33" pos:end="495:34">-&gt;</operator><name pos:start="495:35" pos:end="495:43">mem_index</name></name> <operator pos:start="495:45" pos:end="495:46">&gt;&gt;</operator> <literal type="number" pos:start="495:48" pos:end="495:48">2</literal></expr>]</index></name><operator pos:start="495:50" pos:end="495:50">(</operator><call pos:start="495:51" pos:end="495:94"><name pos:start="495:51" pos:end="495:58">offsetof</name><argument_list pos:start="495:59" pos:end="495:94">(<argument pos:start="495:60" pos:end="495:70"><expr pos:start="495:60" pos:end="495:70"><name pos:start="495:60" pos:end="495:70">CPUX86State</name></expr></argument>,<argument pos:start="495:72" pos:end="495:93"><expr pos:start="495:72" pos:end="495:93"><name pos:start="495:72" pos:end="495:84"><name pos:start="495:72" pos:end="495:79">xmm_regs</name><index pos:start="495:80" pos:end="495:84">[<expr pos:start="495:81" pos:end="495:83"><name pos:start="495:81" pos:end="495:83">reg</name></expr>]</index></name><operator pos:start="495:85" pos:end="495:85">.</operator><call pos:start="495:86" pos:end="495:93"><name pos:start="495:86" pos:end="495:90">XMM_Q</name><argument_list pos:start="495:91" pos:end="495:93">(<argument pos:start="495:92" pos:end="495:92"><expr pos:start="495:92" pos:end="495:92"><literal type="number" pos:start="495:92" pos:end="495:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="495:95" pos:end="495:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="497:15" pos:end="505:13">else <block pos:start="497:20" pos:end="505:13">{<block_content pos:start="499:17" pos:end="503:73">

                <expr_stmt pos:start="499:17" pos:end="499:44"><expr pos:start="499:17" pos:end="499:43"><name pos:start="499:17" pos:end="499:18">rm</name> <operator pos:start="499:20" pos:end="499:20">=</operator> <operator pos:start="499:22" pos:end="499:22">(</operator><name pos:start="499:23" pos:end="499:27">modrm</name> <operator pos:start="499:29" pos:end="499:29">&amp;</operator> <literal type="number" pos:start="499:31" pos:end="499:31">7</literal><operator pos:start="499:32" pos:end="499:32">)</operator> <operator pos:start="499:34" pos:end="499:34">|</operator> <call pos:start="499:36" pos:end="499:43"><name pos:start="499:36" pos:end="499:40">REX_B</name><argument_list pos:start="499:41" pos:end="499:43">(<argument pos:start="499:42" pos:end="499:42"><expr pos:start="499:42" pos:end="499:42"><name pos:start="499:42" pos:end="499:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="501:17" pos:end="503:73"><expr pos:start="501:17" pos:end="503:72"><call pos:start="501:17" pos:end="503:72"><name pos:start="501:17" pos:end="501:27">gen_op_movq</name><argument_list pos:start="501:28" pos:end="503:72">(<argument pos:start="501:29" pos:end="501:72"><expr pos:start="501:29" pos:end="501:72"><call pos:start="501:29" pos:end="501:72"><name pos:start="501:29" pos:end="501:36">offsetof</name><argument_list pos:start="501:37" pos:end="501:72">(<argument pos:start="501:38" pos:end="501:48"><expr pos:start="501:38" pos:end="501:48"><name pos:start="501:38" pos:end="501:48">CPUX86State</name></expr></argument>,<argument pos:start="501:50" pos:end="501:71"><expr pos:start="501:50" pos:end="501:71"><name pos:start="501:50" pos:end="501:62"><name pos:start="501:50" pos:end="501:57">xmm_regs</name><index pos:start="501:58" pos:end="501:62">[<expr pos:start="501:59" pos:end="501:61"><name pos:start="501:59" pos:end="501:61">reg</name></expr>]</index></name><operator pos:start="501:63" pos:end="501:63">.</operator><call pos:start="501:64" pos:end="501:71"><name pos:start="501:64" pos:end="501:68">XMM_Q</name><argument_list pos:start="501:69" pos:end="501:71">(<argument pos:start="501:70" pos:end="501:70"><expr pos:start="501:70" pos:end="501:70"><literal type="number" pos:start="501:70" pos:end="501:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="503:29" pos:end="503:71"><expr pos:start="503:29" pos:end="503:71"><call pos:start="503:29" pos:end="503:71"><name pos:start="503:29" pos:end="503:36">offsetof</name><argument_list pos:start="503:37" pos:end="503:71">(<argument pos:start="503:38" pos:end="503:48"><expr pos:start="503:38" pos:end="503:48"><name pos:start="503:38" pos:end="503:48">CPUX86State</name></expr></argument>,<argument pos:start="503:50" pos:end="503:70"><expr pos:start="503:50" pos:end="503:70"><name pos:start="503:50" pos:end="503:61"><name pos:start="503:50" pos:end="503:57">xmm_regs</name><index pos:start="503:58" pos:end="503:61">[<expr pos:start="503:59" pos:end="503:60"><name pos:start="503:59" pos:end="503:60">rm</name></expr>]</index></name><operator pos:start="503:62" pos:end="503:62">.</operator><call pos:start="503:63" pos:end="503:70"><name pos:start="503:63" pos:end="503:67">XMM_Q</name><argument_list pos:start="503:68" pos:end="503:70">(<argument pos:start="503:69" pos:end="503:69"><expr pos:start="503:69" pos:end="503:69"><literal type="number" pos:start="503:69" pos:end="503:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="507:13" pos:end="507:76"><expr pos:start="507:13" pos:end="507:75"><call pos:start="507:13" pos:end="507:75"><name pos:start="507:13" pos:end="507:29">gen_op_movq_env_0</name><argument_list pos:start="507:30" pos:end="507:75">(<argument pos:start="507:31" pos:end="507:74"><expr pos:start="507:31" pos:end="507:74"><call pos:start="507:31" pos:end="507:74"><name pos:start="507:31" pos:end="507:38">offsetof</name><argument_list pos:start="507:39" pos:end="507:74">(<argument pos:start="507:40" pos:end="507:50"><expr pos:start="507:40" pos:end="507:50"><name pos:start="507:40" pos:end="507:50">CPUX86State</name></expr></argument>,<argument pos:start="507:52" pos:end="507:73"><expr pos:start="507:52" pos:end="507:73"><name pos:start="507:52" pos:end="507:64"><name pos:start="507:52" pos:end="507:59">xmm_regs</name><index pos:start="507:60" pos:end="507:64">[<expr pos:start="507:61" pos:end="507:63"><name pos:start="507:61" pos:end="507:63">reg</name></expr>]</index></name><operator pos:start="507:65" pos:end="507:65">.</operator><call pos:start="507:66" pos:end="507:73"><name pos:start="507:66" pos:end="507:70">XMM_Q</name><argument_list pos:start="507:71" pos:end="507:73">(<argument pos:start="507:72" pos:end="507:72"><expr pos:start="507:72" pos:end="507:72"><literal type="number" pos:start="507:72" pos:end="507:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="509:13" pos:end="509:18">break;</break>

        <case pos:start="511:9" pos:end="511:18">case <expr pos:start="511:14" pos:end="511:17"><literal type="number" pos:start="511:14" pos:end="511:17">0x7f</literal></expr>:</case> <comment type="block" pos:start="511:20" pos:end="511:36">/* movq ea, mm */</comment>

            <if_stmt pos:start="513:13" pos:end="527:13"><if pos:start="513:13" pos:end="519:13">if <condition pos:start="513:16" pos:end="513:25">(<expr pos:start="513:17" pos:end="513:24"><name pos:start="513:17" pos:end="513:19">mod</name> <operator pos:start="513:21" pos:end="513:22">!=</operator> <literal type="number" pos:start="513:24" pos:end="513:24">3</literal></expr>)</condition> <block pos:start="513:27" pos:end="519:13">{<block_content pos:start="515:17" pos:end="517:89">

                <expr_stmt pos:start="515:17" pos:end="515:65"><expr pos:start="515:17" pos:end="515:64"><call pos:start="515:17" pos:end="515:64"><name pos:start="515:17" pos:end="515:29">gen_lea_modrm</name><argument_list pos:start="515:30" pos:end="515:64">(<argument pos:start="515:31" pos:end="515:31"><expr pos:start="515:31" pos:end="515:31"><name pos:start="515:31" pos:end="515:31">s</name></expr></argument>, <argument pos:start="515:34" pos:end="515:38"><expr pos:start="515:34" pos:end="515:38"><name pos:start="515:34" pos:end="515:38">modrm</name></expr></argument>, <argument pos:start="515:41" pos:end="515:49"><expr pos:start="515:41" pos:end="515:49"><operator pos:start="515:41" pos:end="515:41">&amp;</operator><name pos:start="515:42" pos:end="515:49">reg_addr</name></expr></argument>, <argument pos:start="515:52" pos:end="515:63"><expr pos:start="515:52" pos:end="515:63"><operator pos:start="515:52" pos:end="515:52">&amp;</operator><name pos:start="515:53" pos:end="515:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="517:17" pos:end="517:89"><expr pos:start="517:17" pos:end="517:88"><name pos:start="517:17" pos:end="517:49"><name pos:start="517:17" pos:end="517:30">gen_stq_env_A0</name><index pos:start="517:31" pos:end="517:49">[<expr pos:start="517:32" pos:end="517:48"><name pos:start="517:32" pos:end="517:43"><name pos:start="517:32" pos:end="517:32">s</name><operator pos:start="517:33" pos:end="517:34">-&gt;</operator><name pos:start="517:35" pos:end="517:43">mem_index</name></name> <operator pos:start="517:45" pos:end="517:46">&gt;&gt;</operator> <literal type="number" pos:start="517:48" pos:end="517:48">2</literal></expr>]</index></name><operator pos:start="517:50" pos:end="517:50">(</operator><call pos:start="517:51" pos:end="517:87"><name pos:start="517:51" pos:end="517:58">offsetof</name><argument_list pos:start="517:59" pos:end="517:87">(<argument pos:start="517:60" pos:end="517:70"><expr pos:start="517:60" pos:end="517:70"><name pos:start="517:60" pos:end="517:70">CPUX86State</name></expr></argument>,<argument pos:start="517:72" pos:end="517:86"><expr pos:start="517:72" pos:end="517:86"><name pos:start="517:72" pos:end="517:82"><name pos:start="517:72" pos:end="517:77">fpregs</name><index pos:start="517:78" pos:end="517:82">[<expr pos:start="517:79" pos:end="517:81"><name pos:start="517:79" pos:end="517:81">reg</name></expr>]</index></name><operator pos:start="517:83" pos:end="517:83">.</operator><name pos:start="517:84" pos:end="517:86">mmx</name></expr></argument>)</argument_list></call><operator pos:start="517:88" pos:end="517:88">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="519:15" pos:end="527:13">else <block pos:start="519:20" pos:end="527:13">{<block_content pos:start="521:17" pos:end="525:67">

                <expr_stmt pos:start="521:17" pos:end="521:33"><expr pos:start="521:17" pos:end="521:32"><name pos:start="521:17" pos:end="521:18">rm</name> <operator pos:start="521:20" pos:end="521:20">=</operator> <operator pos:start="521:22" pos:end="521:22">(</operator><name pos:start="521:23" pos:end="521:27">modrm</name> <operator pos:start="521:29" pos:end="521:29">&amp;</operator> <literal type="number" pos:start="521:31" pos:end="521:31">7</literal><operator pos:start="521:32" pos:end="521:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="523:17" pos:end="525:67"><expr pos:start="523:17" pos:end="525:66"><call pos:start="523:17" pos:end="525:66"><name pos:start="523:17" pos:end="523:27">gen_op_movq</name><argument_list pos:start="523:28" pos:end="525:66">(<argument pos:start="523:29" pos:end="523:64"><expr pos:start="523:29" pos:end="523:64"><call pos:start="523:29" pos:end="523:64"><name pos:start="523:29" pos:end="523:36">offsetof</name><argument_list pos:start="523:37" pos:end="523:64">(<argument pos:start="523:38" pos:end="523:48"><expr pos:start="523:38" pos:end="523:48"><name pos:start="523:38" pos:end="523:48">CPUX86State</name></expr></argument>,<argument pos:start="523:50" pos:end="523:63"><expr pos:start="523:50" pos:end="523:63"><name pos:start="523:50" pos:end="523:59"><name pos:start="523:50" pos:end="523:55">fpregs</name><index pos:start="523:56" pos:end="523:59">[<expr pos:start="523:57" pos:end="523:58"><name pos:start="523:57" pos:end="523:58">rm</name></expr>]</index></name><operator pos:start="523:60" pos:end="523:60">.</operator><name pos:start="523:61" pos:end="523:63">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="525:29" pos:end="525:65"><expr pos:start="525:29" pos:end="525:65"><call pos:start="525:29" pos:end="525:65"><name pos:start="525:29" pos:end="525:36">offsetof</name><argument_list pos:start="525:37" pos:end="525:65">(<argument pos:start="525:38" pos:end="525:48"><expr pos:start="525:38" pos:end="525:48"><name pos:start="525:38" pos:end="525:48">CPUX86State</name></expr></argument>,<argument pos:start="525:50" pos:end="525:64"><expr pos:start="525:50" pos:end="525:64"><name pos:start="525:50" pos:end="525:60"><name pos:start="525:50" pos:end="525:55">fpregs</name><index pos:start="525:56" pos:end="525:60">[<expr pos:start="525:57" pos:end="525:59"><name pos:start="525:57" pos:end="525:59">reg</name></expr>]</index></name><operator pos:start="525:61" pos:end="525:61">.</operator><name pos:start="525:62" pos:end="525:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="529:13" pos:end="529:18">break;</break>

        <case pos:start="531:9" pos:end="531:19">case <expr pos:start="531:14" pos:end="531:18"><literal type="number" pos:start="531:14" pos:end="531:18">0x011</literal></expr>:</case> <comment type="block" pos:start="531:21" pos:end="531:32">/* movups */</comment>

        <case pos:start="533:9" pos:end="533:19">case <expr pos:start="533:14" pos:end="533:18"><literal type="number" pos:start="533:14" pos:end="533:18">0x111</literal></expr>:</case> <comment type="block" pos:start="533:21" pos:end="533:32">/* movupd */</comment>

        <case pos:start="535:9" pos:end="535:19">case <expr pos:start="535:14" pos:end="535:18"><literal type="number" pos:start="535:14" pos:end="535:18">0x029</literal></expr>:</case> <comment type="block" pos:start="535:21" pos:end="535:32">/* movaps */</comment>

        <case pos:start="537:9" pos:end="537:19">case <expr pos:start="537:14" pos:end="537:18"><literal type="number" pos:start="537:14" pos:end="537:18">0x129</literal></expr>:</case> <comment type="block" pos:start="537:21" pos:end="537:32">/* movapd */</comment>

        <case pos:start="539:9" pos:end="539:19">case <expr pos:start="539:14" pos:end="539:18"><literal type="number" pos:start="539:14" pos:end="539:18">0x17f</literal></expr>:</case> <comment type="block" pos:start="539:21" pos:end="539:40">/* movdqa ea, xmm */</comment>

        <case pos:start="541:9" pos:end="541:19">case <expr pos:start="541:14" pos:end="541:18"><literal type="number" pos:start="541:14" pos:end="541:18">0x27f</literal></expr>:</case> <comment type="block" pos:start="541:21" pos:end="541:40">/* movdqu ea, xmm */</comment>

            <if_stmt pos:start="543:13" pos:end="557:13"><if pos:start="543:13" pos:end="549:13">if <condition pos:start="543:16" pos:end="543:25">(<expr pos:start="543:17" pos:end="543:24"><name pos:start="543:17" pos:end="543:19">mod</name> <operator pos:start="543:21" pos:end="543:22">!=</operator> <literal type="number" pos:start="543:24" pos:end="543:24">3</literal></expr>)</condition> <block pos:start="543:27" pos:end="549:13">{<block_content pos:start="545:17" pos:end="547:87">

                <expr_stmt pos:start="545:17" pos:end="545:65"><expr pos:start="545:17" pos:end="545:64"><call pos:start="545:17" pos:end="545:64"><name pos:start="545:17" pos:end="545:29">gen_lea_modrm</name><argument_list pos:start="545:30" pos:end="545:64">(<argument pos:start="545:31" pos:end="545:31"><expr pos:start="545:31" pos:end="545:31"><name pos:start="545:31" pos:end="545:31">s</name></expr></argument>, <argument pos:start="545:34" pos:end="545:38"><expr pos:start="545:34" pos:end="545:38"><name pos:start="545:34" pos:end="545:38">modrm</name></expr></argument>, <argument pos:start="545:41" pos:end="545:49"><expr pos:start="545:41" pos:end="545:49"><operator pos:start="545:41" pos:end="545:41">&amp;</operator><name pos:start="545:42" pos:end="545:49">reg_addr</name></expr></argument>, <argument pos:start="545:52" pos:end="545:63"><expr pos:start="545:52" pos:end="545:63"><operator pos:start="545:52" pos:end="545:52">&amp;</operator><name pos:start="545:53" pos:end="545:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="547:17" pos:end="547:87"><expr pos:start="547:17" pos:end="547:86"><name pos:start="547:17" pos:end="547:49"><name pos:start="547:17" pos:end="547:30">gen_sto_env_A0</name><index pos:start="547:31" pos:end="547:49">[<expr pos:start="547:32" pos:end="547:48"><name pos:start="547:32" pos:end="547:43"><name pos:start="547:32" pos:end="547:32">s</name><operator pos:start="547:33" pos:end="547:34">-&gt;</operator><name pos:start="547:35" pos:end="547:43">mem_index</name></name> <operator pos:start="547:45" pos:end="547:46">&gt;&gt;</operator> <literal type="number" pos:start="547:48" pos:end="547:48">2</literal></expr>]</index></name><operator pos:start="547:50" pos:end="547:50">(</operator><call pos:start="547:51" pos:end="547:85"><name pos:start="547:51" pos:end="547:58">offsetof</name><argument_list pos:start="547:59" pos:end="547:85">(<argument pos:start="547:60" pos:end="547:70"><expr pos:start="547:60" pos:end="547:70"><name pos:start="547:60" pos:end="547:70">CPUX86State</name></expr></argument>,<argument pos:start="547:72" pos:end="547:84"><expr pos:start="547:72" pos:end="547:84"><name pos:start="547:72" pos:end="547:84"><name pos:start="547:72" pos:end="547:79">xmm_regs</name><index pos:start="547:80" pos:end="547:84">[<expr pos:start="547:81" pos:end="547:83"><name pos:start="547:81" pos:end="547:83">reg</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="547:86" pos:end="547:86">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="549:15" pos:end="557:13">else <block pos:start="549:20" pos:end="557:13">{<block_content pos:start="551:17" pos:end="555:65">

                <expr_stmt pos:start="551:17" pos:end="551:44"><expr pos:start="551:17" pos:end="551:43"><name pos:start="551:17" pos:end="551:18">rm</name> <operator pos:start="551:20" pos:end="551:20">=</operator> <operator pos:start="551:22" pos:end="551:22">(</operator><name pos:start="551:23" pos:end="551:27">modrm</name> <operator pos:start="551:29" pos:end="551:29">&amp;</operator> <literal type="number" pos:start="551:31" pos:end="551:31">7</literal><operator pos:start="551:32" pos:end="551:32">)</operator> <operator pos:start="551:34" pos:end="551:34">|</operator> <call pos:start="551:36" pos:end="551:43"><name pos:start="551:36" pos:end="551:40">REX_B</name><argument_list pos:start="551:41" pos:end="551:43">(<argument pos:start="551:42" pos:end="551:42"><expr pos:start="551:42" pos:end="551:42"><name pos:start="551:42" pos:end="551:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="553:17" pos:end="555:65"><expr pos:start="553:17" pos:end="555:64"><call pos:start="553:17" pos:end="555:64"><name pos:start="553:17" pos:end="553:27">gen_op_movo</name><argument_list pos:start="553:28" pos:end="555:64">(<argument pos:start="553:29" pos:end="553:62"><expr pos:start="553:29" pos:end="553:62"><call pos:start="553:29" pos:end="553:62"><name pos:start="553:29" pos:end="553:36">offsetof</name><argument_list pos:start="553:37" pos:end="553:62">(<argument pos:start="553:38" pos:end="553:48"><expr pos:start="553:38" pos:end="553:48"><name pos:start="553:38" pos:end="553:48">CPUX86State</name></expr></argument>,<argument pos:start="553:50" pos:end="553:61"><expr pos:start="553:50" pos:end="553:61"><name pos:start="553:50" pos:end="553:61"><name pos:start="553:50" pos:end="553:57">xmm_regs</name><index pos:start="553:58" pos:end="553:61">[<expr pos:start="553:59" pos:end="553:60"><name pos:start="553:59" pos:end="553:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="555:29" pos:end="555:63"><expr pos:start="555:29" pos:end="555:63"><call pos:start="555:29" pos:end="555:63"><name pos:start="555:29" pos:end="555:36">offsetof</name><argument_list pos:start="555:37" pos:end="555:63">(<argument pos:start="555:38" pos:end="555:48"><expr pos:start="555:38" pos:end="555:48"><name pos:start="555:38" pos:end="555:48">CPUX86State</name></expr></argument>,<argument pos:start="555:50" pos:end="555:62"><expr pos:start="555:50" pos:end="555:62"><name pos:start="555:50" pos:end="555:62"><name pos:start="555:50" pos:end="555:57">xmm_regs</name><index pos:start="555:58" pos:end="555:62">[<expr pos:start="555:59" pos:end="555:61"><name pos:start="555:59" pos:end="555:61">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="559:13" pos:end="559:18">break;</break>

        <case pos:start="561:9" pos:end="561:19">case <expr pos:start="561:14" pos:end="561:18"><literal type="number" pos:start="561:14" pos:end="561:18">0x211</literal></expr>:</case> <comment type="block" pos:start="561:21" pos:end="561:39">/* movss ea, xmm */</comment>

            <if_stmt pos:start="563:13" pos:end="579:13"><if pos:start="563:13" pos:end="571:13">if <condition pos:start="563:16" pos:end="563:25">(<expr pos:start="563:17" pos:end="563:24"><name pos:start="563:17" pos:end="563:19">mod</name> <operator pos:start="563:21" pos:end="563:22">!=</operator> <literal type="number" pos:start="563:24" pos:end="563:24">3</literal></expr>)</condition> <block pos:start="563:27" pos:end="571:13">{<block_content pos:start="565:17" pos:end="569:56">

                <expr_stmt pos:start="565:17" pos:end="565:65"><expr pos:start="565:17" pos:end="565:64"><call pos:start="565:17" pos:end="565:64"><name pos:start="565:17" pos:end="565:29">gen_lea_modrm</name><argument_list pos:start="565:30" pos:end="565:64">(<argument pos:start="565:31" pos:end="565:31"><expr pos:start="565:31" pos:end="565:31"><name pos:start="565:31" pos:end="565:31">s</name></expr></argument>, <argument pos:start="565:34" pos:end="565:38"><expr pos:start="565:34" pos:end="565:38"><name pos:start="565:34" pos:end="565:38">modrm</name></expr></argument>, <argument pos:start="565:41" pos:end="565:49"><expr pos:start="565:41" pos:end="565:49"><operator pos:start="565:41" pos:end="565:41">&amp;</operator><name pos:start="565:42" pos:end="565:49">reg_addr</name></expr></argument>, <argument pos:start="565:52" pos:end="565:63"><expr pos:start="565:52" pos:end="565:63"><operator pos:start="565:52" pos:end="565:52">&amp;</operator><name pos:start="565:53" pos:end="565:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="567:17" pos:end="567:81"><expr pos:start="567:17" pos:end="567:80"><call pos:start="567:17" pos:end="567:80"><name pos:start="567:17" pos:end="567:34">gen_op_movl_T0_env</name><argument_list pos:start="567:35" pos:end="567:80">(<argument pos:start="567:36" pos:end="567:79"><expr pos:start="567:36" pos:end="567:79"><call pos:start="567:36" pos:end="567:79"><name pos:start="567:36" pos:end="567:43">offsetof</name><argument_list pos:start="567:44" pos:end="567:79">(<argument pos:start="567:45" pos:end="567:55"><expr pos:start="567:45" pos:end="567:55"><name pos:start="567:45" pos:end="567:55">CPUX86State</name></expr></argument>,<argument pos:start="567:57" pos:end="567:78"><expr pos:start="567:57" pos:end="567:78"><name pos:start="567:57" pos:end="567:69"><name pos:start="567:57" pos:end="567:64">xmm_regs</name><index pos:start="567:65" pos:end="567:69">[<expr pos:start="567:66" pos:end="567:68"><name pos:start="567:66" pos:end="567:68">reg</name></expr>]</index></name><operator pos:start="567:70" pos:end="567:70">.</operator><call pos:start="567:71" pos:end="567:78"><name pos:start="567:71" pos:end="567:75">XMM_L</name><argument_list pos:start="567:76" pos:end="567:78">(<argument pos:start="567:77" pos:end="567:77"><expr pos:start="567:77" pos:end="567:77"><literal type="number" pos:start="567:77" pos:end="567:77">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="569:17" pos:end="569:56"><expr pos:start="569:17" pos:end="569:55"><call pos:start="569:17" pos:end="569:55"><name pos:start="569:17" pos:end="569:31">gen_op_st_T0_A0</name><argument_list pos:start="569:32" pos:end="569:55">(<argument pos:start="569:33" pos:end="569:54"><expr pos:start="569:33" pos:end="569:54"><name pos:start="569:33" pos:end="569:39">OT_LONG</name> <operator pos:start="569:41" pos:end="569:41">+</operator> <name pos:start="569:43" pos:end="569:54"><name pos:start="569:43" pos:end="569:43">s</name><operator pos:start="569:44" pos:end="569:45">-&gt;</operator><name pos:start="569:46" pos:end="569:54">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="571:15" pos:end="579:13">else <block pos:start="571:20" pos:end="579:13">{<block_content pos:start="573:17" pos:end="577:74">

                <expr_stmt pos:start="573:17" pos:end="573:44"><expr pos:start="573:17" pos:end="573:43"><name pos:start="573:17" pos:end="573:18">rm</name> <operator pos:start="573:20" pos:end="573:20">=</operator> <operator pos:start="573:22" pos:end="573:22">(</operator><name pos:start="573:23" pos:end="573:27">modrm</name> <operator pos:start="573:29" pos:end="573:29">&amp;</operator> <literal type="number" pos:start="573:31" pos:end="573:31">7</literal><operator pos:start="573:32" pos:end="573:32">)</operator> <operator pos:start="573:34" pos:end="573:34">|</operator> <call pos:start="573:36" pos:end="573:43"><name pos:start="573:36" pos:end="573:40">REX_B</name><argument_list pos:start="573:41" pos:end="573:43">(<argument pos:start="573:42" pos:end="573:42"><expr pos:start="573:42" pos:end="573:42"><name pos:start="573:42" pos:end="573:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="575:17" pos:end="577:74"><expr pos:start="575:17" pos:end="577:73"><call pos:start="575:17" pos:end="577:73"><name pos:start="575:17" pos:end="575:27">gen_op_movl</name><argument_list pos:start="575:28" pos:end="577:73">(<argument pos:start="575:29" pos:end="575:71"><expr pos:start="575:29" pos:end="575:71"><call pos:start="575:29" pos:end="575:71"><name pos:start="575:29" pos:end="575:36">offsetof</name><argument_list pos:start="575:37" pos:end="575:71">(<argument pos:start="575:38" pos:end="575:48"><expr pos:start="575:38" pos:end="575:48"><name pos:start="575:38" pos:end="575:48">CPUX86State</name></expr></argument>,<argument pos:start="575:50" pos:end="575:70"><expr pos:start="575:50" pos:end="575:70"><name pos:start="575:50" pos:end="575:61"><name pos:start="575:50" pos:end="575:57">xmm_regs</name><index pos:start="575:58" pos:end="575:61">[<expr pos:start="575:59" pos:end="575:60"><name pos:start="575:59" pos:end="575:60">rm</name></expr>]</index></name><operator pos:start="575:62" pos:end="575:62">.</operator><call pos:start="575:63" pos:end="575:70"><name pos:start="575:63" pos:end="575:67">XMM_L</name><argument_list pos:start="575:68" pos:end="575:70">(<argument pos:start="575:69" pos:end="575:69"><expr pos:start="575:69" pos:end="575:69"><literal type="number" pos:start="575:69" pos:end="575:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="577:29" pos:end="577:72"><expr pos:start="577:29" pos:end="577:72"><call pos:start="577:29" pos:end="577:72"><name pos:start="577:29" pos:end="577:36">offsetof</name><argument_list pos:start="577:37" pos:end="577:72">(<argument pos:start="577:38" pos:end="577:48"><expr pos:start="577:38" pos:end="577:48"><name pos:start="577:38" pos:end="577:48">CPUX86State</name></expr></argument>,<argument pos:start="577:50" pos:end="577:71"><expr pos:start="577:50" pos:end="577:71"><name pos:start="577:50" pos:end="577:62"><name pos:start="577:50" pos:end="577:57">xmm_regs</name><index pos:start="577:58" pos:end="577:62">[<expr pos:start="577:59" pos:end="577:61"><name pos:start="577:59" pos:end="577:61">reg</name></expr>]</index></name><operator pos:start="577:63" pos:end="577:63">.</operator><call pos:start="577:64" pos:end="577:71"><name pos:start="577:64" pos:end="577:68">XMM_L</name><argument_list pos:start="577:69" pos:end="577:71">(<argument pos:start="577:70" pos:end="577:70"><expr pos:start="577:70" pos:end="577:70"><literal type="number" pos:start="577:70" pos:end="577:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="581:13" pos:end="581:18">break;</break>

        <case pos:start="583:9" pos:end="583:19">case <expr pos:start="583:14" pos:end="583:18"><literal type="number" pos:start="583:14" pos:end="583:18">0x311</literal></expr>:</case> <comment type="block" pos:start="583:21" pos:end="583:39">/* movsd ea, xmm */</comment>

            <if_stmt pos:start="585:13" pos:end="599:13"><if pos:start="585:13" pos:end="591:13">if <condition pos:start="585:16" pos:end="585:25">(<expr pos:start="585:17" pos:end="585:24"><name pos:start="585:17" pos:end="585:19">mod</name> <operator pos:start="585:21" pos:end="585:22">!=</operator> <literal type="number" pos:start="585:24" pos:end="585:24">3</literal></expr>)</condition> <block pos:start="585:27" pos:end="591:13">{<block_content pos:start="587:17" pos:end="589:96">

                <expr_stmt pos:start="587:17" pos:end="587:65"><expr pos:start="587:17" pos:end="587:64"><call pos:start="587:17" pos:end="587:64"><name pos:start="587:17" pos:end="587:29">gen_lea_modrm</name><argument_list pos:start="587:30" pos:end="587:64">(<argument pos:start="587:31" pos:end="587:31"><expr pos:start="587:31" pos:end="587:31"><name pos:start="587:31" pos:end="587:31">s</name></expr></argument>, <argument pos:start="587:34" pos:end="587:38"><expr pos:start="587:34" pos:end="587:38"><name pos:start="587:34" pos:end="587:38">modrm</name></expr></argument>, <argument pos:start="587:41" pos:end="587:49"><expr pos:start="587:41" pos:end="587:49"><operator pos:start="587:41" pos:end="587:41">&amp;</operator><name pos:start="587:42" pos:end="587:49">reg_addr</name></expr></argument>, <argument pos:start="587:52" pos:end="587:63"><expr pos:start="587:52" pos:end="587:63"><operator pos:start="587:52" pos:end="587:52">&amp;</operator><name pos:start="587:53" pos:end="587:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="589:17" pos:end="589:96"><expr pos:start="589:17" pos:end="589:95"><name pos:start="589:17" pos:end="589:49"><name pos:start="589:17" pos:end="589:30">gen_stq_env_A0</name><index pos:start="589:31" pos:end="589:49">[<expr pos:start="589:32" pos:end="589:48"><name pos:start="589:32" pos:end="589:43"><name pos:start="589:32" pos:end="589:32">s</name><operator pos:start="589:33" pos:end="589:34">-&gt;</operator><name pos:start="589:35" pos:end="589:43">mem_index</name></name> <operator pos:start="589:45" pos:end="589:46">&gt;&gt;</operator> <literal type="number" pos:start="589:48" pos:end="589:48">2</literal></expr>]</index></name><operator pos:start="589:50" pos:end="589:50">(</operator><call pos:start="589:51" pos:end="589:94"><name pos:start="589:51" pos:end="589:58">offsetof</name><argument_list pos:start="589:59" pos:end="589:94">(<argument pos:start="589:60" pos:end="589:70"><expr pos:start="589:60" pos:end="589:70"><name pos:start="589:60" pos:end="589:70">CPUX86State</name></expr></argument>,<argument pos:start="589:72" pos:end="589:93"><expr pos:start="589:72" pos:end="589:93"><name pos:start="589:72" pos:end="589:84"><name pos:start="589:72" pos:end="589:79">xmm_regs</name><index pos:start="589:80" pos:end="589:84">[<expr pos:start="589:81" pos:end="589:83"><name pos:start="589:81" pos:end="589:83">reg</name></expr>]</index></name><operator pos:start="589:85" pos:end="589:85">.</operator><call pos:start="589:86" pos:end="589:93"><name pos:start="589:86" pos:end="589:90">XMM_Q</name><argument_list pos:start="589:91" pos:end="589:93">(<argument pos:start="589:92" pos:end="589:92"><expr pos:start="589:92" pos:end="589:92"><literal type="number" pos:start="589:92" pos:end="589:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="589:95" pos:end="589:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="591:15" pos:end="599:13">else <block pos:start="591:20" pos:end="599:13">{<block_content pos:start="593:17" pos:end="597:74">

                <expr_stmt pos:start="593:17" pos:end="593:44"><expr pos:start="593:17" pos:end="593:43"><name pos:start="593:17" pos:end="593:18">rm</name> <operator pos:start="593:20" pos:end="593:20">=</operator> <operator pos:start="593:22" pos:end="593:22">(</operator><name pos:start="593:23" pos:end="593:27">modrm</name> <operator pos:start="593:29" pos:end="593:29">&amp;</operator> <literal type="number" pos:start="593:31" pos:end="593:31">7</literal><operator pos:start="593:32" pos:end="593:32">)</operator> <operator pos:start="593:34" pos:end="593:34">|</operator> <call pos:start="593:36" pos:end="593:43"><name pos:start="593:36" pos:end="593:40">REX_B</name><argument_list pos:start="593:41" pos:end="593:43">(<argument pos:start="593:42" pos:end="593:42"><expr pos:start="593:42" pos:end="593:42"><name pos:start="593:42" pos:end="593:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="595:17" pos:end="597:74"><expr pos:start="595:17" pos:end="597:73"><call pos:start="595:17" pos:end="597:73"><name pos:start="595:17" pos:end="595:27">gen_op_movq</name><argument_list pos:start="595:28" pos:end="597:73">(<argument pos:start="595:29" pos:end="595:71"><expr pos:start="595:29" pos:end="595:71"><call pos:start="595:29" pos:end="595:71"><name pos:start="595:29" pos:end="595:36">offsetof</name><argument_list pos:start="595:37" pos:end="595:71">(<argument pos:start="595:38" pos:end="595:48"><expr pos:start="595:38" pos:end="595:48"><name pos:start="595:38" pos:end="595:48">CPUX86State</name></expr></argument>,<argument pos:start="595:50" pos:end="595:70"><expr pos:start="595:50" pos:end="595:70"><name pos:start="595:50" pos:end="595:61"><name pos:start="595:50" pos:end="595:57">xmm_regs</name><index pos:start="595:58" pos:end="595:61">[<expr pos:start="595:59" pos:end="595:60"><name pos:start="595:59" pos:end="595:60">rm</name></expr>]</index></name><operator pos:start="595:62" pos:end="595:62">.</operator><call pos:start="595:63" pos:end="595:70"><name pos:start="595:63" pos:end="595:67">XMM_Q</name><argument_list pos:start="595:68" pos:end="595:70">(<argument pos:start="595:69" pos:end="595:69"><expr pos:start="595:69" pos:end="595:69"><literal type="number" pos:start="595:69" pos:end="595:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="597:29" pos:end="597:72"><expr pos:start="597:29" pos:end="597:72"><call pos:start="597:29" pos:end="597:72"><name pos:start="597:29" pos:end="597:36">offsetof</name><argument_list pos:start="597:37" pos:end="597:72">(<argument pos:start="597:38" pos:end="597:48"><expr pos:start="597:38" pos:end="597:48"><name pos:start="597:38" pos:end="597:48">CPUX86State</name></expr></argument>,<argument pos:start="597:50" pos:end="597:71"><expr pos:start="597:50" pos:end="597:71"><name pos:start="597:50" pos:end="597:62"><name pos:start="597:50" pos:end="597:57">xmm_regs</name><index pos:start="597:58" pos:end="597:62">[<expr pos:start="597:59" pos:end="597:61"><name pos:start="597:59" pos:end="597:61">reg</name></expr>]</index></name><operator pos:start="597:63" pos:end="597:63">.</operator><call pos:start="597:64" pos:end="597:71"><name pos:start="597:64" pos:end="597:68">XMM_Q</name><argument_list pos:start="597:69" pos:end="597:71">(<argument pos:start="597:70" pos:end="597:70"><expr pos:start="597:70" pos:end="597:70"><literal type="number" pos:start="597:70" pos:end="597:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="601:13" pos:end="601:18">break;</break>

        <case pos:start="603:9" pos:end="603:19">case <expr pos:start="603:14" pos:end="603:18"><literal type="number" pos:start="603:14" pos:end="603:18">0x013</literal></expr>:</case> <comment type="block" pos:start="603:21" pos:end="603:32">/* movlps */</comment>

        <case pos:start="605:9" pos:end="605:19">case <expr pos:start="605:14" pos:end="605:18"><literal type="number" pos:start="605:14" pos:end="605:18">0x113</literal></expr>:</case> <comment type="block" pos:start="605:21" pos:end="605:32">/* movlpd */</comment>

            <if_stmt pos:start="607:13" pos:end="617:13"><if pos:start="607:13" pos:end="613:13">if <condition pos:start="607:16" pos:end="607:25">(<expr pos:start="607:17" pos:end="607:24"><name pos:start="607:17" pos:end="607:19">mod</name> <operator pos:start="607:21" pos:end="607:22">!=</operator> <literal type="number" pos:start="607:24" pos:end="607:24">3</literal></expr>)</condition> <block pos:start="607:27" pos:end="613:13">{<block_content pos:start="609:17" pos:end="611:96">

                <expr_stmt pos:start="609:17" pos:end="609:65"><expr pos:start="609:17" pos:end="609:64"><call pos:start="609:17" pos:end="609:64"><name pos:start="609:17" pos:end="609:29">gen_lea_modrm</name><argument_list pos:start="609:30" pos:end="609:64">(<argument pos:start="609:31" pos:end="609:31"><expr pos:start="609:31" pos:end="609:31"><name pos:start="609:31" pos:end="609:31">s</name></expr></argument>, <argument pos:start="609:34" pos:end="609:38"><expr pos:start="609:34" pos:end="609:38"><name pos:start="609:34" pos:end="609:38">modrm</name></expr></argument>, <argument pos:start="609:41" pos:end="609:49"><expr pos:start="609:41" pos:end="609:49"><operator pos:start="609:41" pos:end="609:41">&amp;</operator><name pos:start="609:42" pos:end="609:49">reg_addr</name></expr></argument>, <argument pos:start="609:52" pos:end="609:63"><expr pos:start="609:52" pos:end="609:63"><operator pos:start="609:52" pos:end="609:52">&amp;</operator><name pos:start="609:53" pos:end="609:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="611:17" pos:end="611:96"><expr pos:start="611:17" pos:end="611:95"><name pos:start="611:17" pos:end="611:49"><name pos:start="611:17" pos:end="611:30">gen_stq_env_A0</name><index pos:start="611:31" pos:end="611:49">[<expr pos:start="611:32" pos:end="611:48"><name pos:start="611:32" pos:end="611:43"><name pos:start="611:32" pos:end="611:32">s</name><operator pos:start="611:33" pos:end="611:34">-&gt;</operator><name pos:start="611:35" pos:end="611:43">mem_index</name></name> <operator pos:start="611:45" pos:end="611:46">&gt;&gt;</operator> <literal type="number" pos:start="611:48" pos:end="611:48">2</literal></expr>]</index></name><operator pos:start="611:50" pos:end="611:50">(</operator><call pos:start="611:51" pos:end="611:94"><name pos:start="611:51" pos:end="611:58">offsetof</name><argument_list pos:start="611:59" pos:end="611:94">(<argument pos:start="611:60" pos:end="611:70"><expr pos:start="611:60" pos:end="611:70"><name pos:start="611:60" pos:end="611:70">CPUX86State</name></expr></argument>,<argument pos:start="611:72" pos:end="611:93"><expr pos:start="611:72" pos:end="611:93"><name pos:start="611:72" pos:end="611:84"><name pos:start="611:72" pos:end="611:79">xmm_regs</name><index pos:start="611:80" pos:end="611:84">[<expr pos:start="611:81" pos:end="611:83"><name pos:start="611:81" pos:end="611:83">reg</name></expr>]</index></name><operator pos:start="611:85" pos:end="611:85">.</operator><call pos:start="611:86" pos:end="611:93"><name pos:start="611:86" pos:end="611:90">XMM_Q</name><argument_list pos:start="611:91" pos:end="611:93">(<argument pos:start="611:92" pos:end="611:92"><expr pos:start="611:92" pos:end="611:92"><literal type="number" pos:start="611:92" pos:end="611:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="611:95" pos:end="611:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="613:15" pos:end="617:13">else <block pos:start="613:20" pos:end="617:13">{<block_content pos:start="615:17" pos:end="615:32">

                <goto pos:start="615:17" pos:end="615:32">goto <name pos:start="615:22" pos:end="615:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="619:13" pos:end="619:18">break;</break>

        <case pos:start="621:9" pos:end="621:19">case <expr pos:start="621:14" pos:end="621:18"><literal type="number" pos:start="621:14" pos:end="621:18">0x017</literal></expr>:</case> <comment type="block" pos:start="621:21" pos:end="621:32">/* movhps */</comment>

        <case pos:start="623:9" pos:end="623:19">case <expr pos:start="623:14" pos:end="623:18"><literal type="number" pos:start="623:14" pos:end="623:18">0x117</literal></expr>:</case> <comment type="block" pos:start="623:21" pos:end="623:32">/* movhpd */</comment>

            <if_stmt pos:start="625:13" pos:end="635:13"><if pos:start="625:13" pos:end="631:13">if <condition pos:start="625:16" pos:end="625:25">(<expr pos:start="625:17" pos:end="625:24"><name pos:start="625:17" pos:end="625:19">mod</name> <operator pos:start="625:21" pos:end="625:22">!=</operator> <literal type="number" pos:start="625:24" pos:end="625:24">3</literal></expr>)</condition> <block pos:start="625:27" pos:end="631:13">{<block_content pos:start="627:17" pos:end="629:96">

                <expr_stmt pos:start="627:17" pos:end="627:65"><expr pos:start="627:17" pos:end="627:64"><call pos:start="627:17" pos:end="627:64"><name pos:start="627:17" pos:end="627:29">gen_lea_modrm</name><argument_list pos:start="627:30" pos:end="627:64">(<argument pos:start="627:31" pos:end="627:31"><expr pos:start="627:31" pos:end="627:31"><name pos:start="627:31" pos:end="627:31">s</name></expr></argument>, <argument pos:start="627:34" pos:end="627:38"><expr pos:start="627:34" pos:end="627:38"><name pos:start="627:34" pos:end="627:38">modrm</name></expr></argument>, <argument pos:start="627:41" pos:end="627:49"><expr pos:start="627:41" pos:end="627:49"><operator pos:start="627:41" pos:end="627:41">&amp;</operator><name pos:start="627:42" pos:end="627:49">reg_addr</name></expr></argument>, <argument pos:start="627:52" pos:end="627:63"><expr pos:start="627:52" pos:end="627:63"><operator pos:start="627:52" pos:end="627:52">&amp;</operator><name pos:start="627:53" pos:end="627:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="629:17" pos:end="629:96"><expr pos:start="629:17" pos:end="629:95"><name pos:start="629:17" pos:end="629:49"><name pos:start="629:17" pos:end="629:30">gen_stq_env_A0</name><index pos:start="629:31" pos:end="629:49">[<expr pos:start="629:32" pos:end="629:48"><name pos:start="629:32" pos:end="629:43"><name pos:start="629:32" pos:end="629:32">s</name><operator pos:start="629:33" pos:end="629:34">-&gt;</operator><name pos:start="629:35" pos:end="629:43">mem_index</name></name> <operator pos:start="629:45" pos:end="629:46">&gt;&gt;</operator> <literal type="number" pos:start="629:48" pos:end="629:48">2</literal></expr>]</index></name><operator pos:start="629:50" pos:end="629:50">(</operator><call pos:start="629:51" pos:end="629:94"><name pos:start="629:51" pos:end="629:58">offsetof</name><argument_list pos:start="629:59" pos:end="629:94">(<argument pos:start="629:60" pos:end="629:70"><expr pos:start="629:60" pos:end="629:70"><name pos:start="629:60" pos:end="629:70">CPUX86State</name></expr></argument>,<argument pos:start="629:72" pos:end="629:93"><expr pos:start="629:72" pos:end="629:93"><name pos:start="629:72" pos:end="629:84"><name pos:start="629:72" pos:end="629:79">xmm_regs</name><index pos:start="629:80" pos:end="629:84">[<expr pos:start="629:81" pos:end="629:83"><name pos:start="629:81" pos:end="629:83">reg</name></expr>]</index></name><operator pos:start="629:85" pos:end="629:85">.</operator><call pos:start="629:86" pos:end="629:93"><name pos:start="629:86" pos:end="629:90">XMM_Q</name><argument_list pos:start="629:91" pos:end="629:93">(<argument pos:start="629:92" pos:end="629:92"><expr pos:start="629:92" pos:end="629:92"><literal type="number" pos:start="629:92" pos:end="629:92">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="629:95" pos:end="629:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="631:15" pos:end="635:13">else <block pos:start="631:20" pos:end="635:13">{<block_content pos:start="633:17" pos:end="633:32">

                <goto pos:start="633:17" pos:end="633:32">goto <name pos:start="633:22" pos:end="633:31">illegal_op</name>;</goto>

            </block_content>}</block></else></if_stmt>

            <break pos:start="637:13" pos:end="637:18">break;</break>

        <case pos:start="639:9" pos:end="639:18">case <expr pos:start="639:14" pos:end="639:17"><literal type="number" pos:start="639:14" pos:end="639:17">0x71</literal></expr>:</case> <comment type="block" pos:start="639:20" pos:end="639:37">/* shift mm, im */</comment>

        <case pos:start="641:9" pos:end="641:18">case <expr pos:start="641:14" pos:end="641:17"><literal type="number" pos:start="641:14" pos:end="641:17">0x72</literal></expr>:</case>

        <case pos:start="643:9" pos:end="643:18">case <expr pos:start="643:14" pos:end="643:17"><literal type="number" pos:start="643:14" pos:end="643:17">0x73</literal></expr>:</case>

        <case pos:start="645:9" pos:end="645:19">case <expr pos:start="645:14" pos:end="645:18"><literal type="number" pos:start="645:14" pos:end="645:18">0x171</literal></expr>:</case> <comment type="block" pos:start="645:21" pos:end="645:39">/* shift xmm, im */</comment>

        <case pos:start="647:9" pos:end="647:19">case <expr pos:start="647:14" pos:end="647:18"><literal type="number" pos:start="647:14" pos:end="647:18">0x172</literal></expr>:</case>

        <case pos:start="649:9" pos:end="649:19">case <expr pos:start="649:14" pos:end="649:18"><literal type="number" pos:start="649:14" pos:end="649:18">0x173</literal></expr>:</case>

            <expr_stmt pos:start="651:13" pos:end="651:37"><expr pos:start="651:13" pos:end="651:36"><name pos:start="651:13" pos:end="651:15">val</name> <operator pos:start="651:17" pos:end="651:17">=</operator> <call pos:start="651:19" pos:end="651:36"><name pos:start="651:19" pos:end="651:27">ldub_code</name><argument_list pos:start="651:28" pos:end="651:36">(<argument pos:start="651:29" pos:end="651:35"><expr pos:start="651:29" pos:end="651:35"><name pos:start="651:29" pos:end="651:33"><name pos:start="651:29" pos:end="651:29">s</name><operator pos:start="651:30" pos:end="651:31">-&gt;</operator><name pos:start="651:32" pos:end="651:33">pc</name></name><operator pos:start="651:34" pos:end="651:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="653:13" pos:end="677:13"><if pos:start="653:13" pos:end="665:13">if <condition pos:start="653:16" pos:end="653:23">(<expr pos:start="653:17" pos:end="653:22"><name pos:start="653:17" pos:end="653:22">is_xmm</name></expr>)</condition> <block pos:start="653:25" pos:end="665:13">{<block_content pos:start="655:17" pos:end="663:58">

                <expr_stmt pos:start="655:17" pos:end="655:39"><expr pos:start="655:17" pos:end="655:38"><call pos:start="655:17" pos:end="655:38"><name pos:start="655:17" pos:end="655:33">gen_op_movl_T0_im</name><argument_list pos:start="655:34" pos:end="655:38">(<argument pos:start="655:35" pos:end="655:37"><expr pos:start="655:35" pos:end="655:37"><name pos:start="655:35" pos:end="655:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="657:17" pos:end="657:74"><expr pos:start="657:17" pos:end="657:73"><call pos:start="657:17" pos:end="657:73"><name pos:start="657:17" pos:end="657:34">gen_op_movl_env_T0</name><argument_list pos:start="657:35" pos:end="657:73">(<argument pos:start="657:36" pos:end="657:72"><expr pos:start="657:36" pos:end="657:72"><call pos:start="657:36" pos:end="657:72"><name pos:start="657:36" pos:end="657:43">offsetof</name><argument_list pos:start="657:44" pos:end="657:72">(<argument pos:start="657:45" pos:end="657:55"><expr pos:start="657:45" pos:end="657:55"><name pos:start="657:45" pos:end="657:55">CPUX86State</name></expr></argument>,<argument pos:start="657:57" pos:end="657:71"><expr pos:start="657:57" pos:end="657:71"><call pos:start="657:57" pos:end="657:71"><name pos:start="657:57" pos:end="657:68"><name pos:start="657:57" pos:end="657:62">xmm_t0</name><operator pos:start="657:63" pos:end="657:63">.</operator><name pos:start="657:64" pos:end="657:68">XMM_L</name></name><argument_list pos:start="657:69" pos:end="657:71">(<argument pos:start="657:70" pos:end="657:70"><expr pos:start="657:70" pos:end="657:70"><literal type="number" pos:start="657:70" pos:end="657:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="659:17" pos:end="659:35"><expr pos:start="659:17" pos:end="659:34"><call pos:start="659:17" pos:end="659:34"><name pos:start="659:17" pos:end="659:32">gen_op_movl_T0_0</name><argument_list pos:start="659:33" pos:end="659:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="661:17" pos:end="661:74"><expr pos:start="661:17" pos:end="661:73"><call pos:start="661:17" pos:end="661:73"><name pos:start="661:17" pos:end="661:34">gen_op_movl_env_T0</name><argument_list pos:start="661:35" pos:end="661:73">(<argument pos:start="661:36" pos:end="661:72"><expr pos:start="661:36" pos:end="661:72"><call pos:start="661:36" pos:end="661:72"><name pos:start="661:36" pos:end="661:43">offsetof</name><argument_list pos:start="661:44" pos:end="661:72">(<argument pos:start="661:45" pos:end="661:55"><expr pos:start="661:45" pos:end="661:55"><name pos:start="661:45" pos:end="661:55">CPUX86State</name></expr></argument>,<argument pos:start="661:57" pos:end="661:71"><expr pos:start="661:57" pos:end="661:71"><call pos:start="661:57" pos:end="661:71"><name pos:start="661:57" pos:end="661:68"><name pos:start="661:57" pos:end="661:62">xmm_t0</name><operator pos:start="661:63" pos:end="661:63">.</operator><name pos:start="661:64" pos:end="661:68">XMM_L</name></name><argument_list pos:start="661:69" pos:end="661:71">(<argument pos:start="661:70" pos:end="661:70"><expr pos:start="661:70" pos:end="661:70"><literal type="number" pos:start="661:70" pos:end="661:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="663:17" pos:end="663:58"><expr pos:start="663:17" pos:end="663:57"><name pos:start="663:17" pos:end="663:26">op1_offset</name> <operator pos:start="663:28" pos:end="663:28">=</operator> <call pos:start="663:30" pos:end="663:57"><name pos:start="663:30" pos:end="663:37">offsetof</name><argument_list pos:start="663:38" pos:end="663:57">(<argument pos:start="663:39" pos:end="663:49"><expr pos:start="663:39" pos:end="663:49"><name pos:start="663:39" pos:end="663:49">CPUX86State</name></expr></argument>,<argument pos:start="663:51" pos:end="663:56"><expr pos:start="663:51" pos:end="663:56"><name pos:start="663:51" pos:end="663:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="665:15" pos:end="677:13">else <block pos:start="665:20" pos:end="677:13">{<block_content pos:start="667:17" pos:end="675:58">

                <expr_stmt pos:start="667:17" pos:end="667:39"><expr pos:start="667:17" pos:end="667:38"><call pos:start="667:17" pos:end="667:38"><name pos:start="667:17" pos:end="667:33">gen_op_movl_T0_im</name><argument_list pos:start="667:34" pos:end="667:38">(<argument pos:start="667:35" pos:end="667:37"><expr pos:start="667:35" pos:end="667:37"><name pos:start="667:35" pos:end="667:37">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="669:17" pos:end="669:74"><expr pos:start="669:17" pos:end="669:73"><call pos:start="669:17" pos:end="669:73"><name pos:start="669:17" pos:end="669:34">gen_op_movl_env_T0</name><argument_list pos:start="669:35" pos:end="669:73">(<argument pos:start="669:36" pos:end="669:72"><expr pos:start="669:36" pos:end="669:72"><call pos:start="669:36" pos:end="669:72"><name pos:start="669:36" pos:end="669:43">offsetof</name><argument_list pos:start="669:44" pos:end="669:72">(<argument pos:start="669:45" pos:end="669:55"><expr pos:start="669:45" pos:end="669:55"><name pos:start="669:45" pos:end="669:55">CPUX86State</name></expr></argument>,<argument pos:start="669:57" pos:end="669:71"><expr pos:start="669:57" pos:end="669:71"><call pos:start="669:57" pos:end="669:71"><name pos:start="669:57" pos:end="669:68"><name pos:start="669:57" pos:end="669:62">mmx_t0</name><operator pos:start="669:63" pos:end="669:63">.</operator><name pos:start="669:64" pos:end="669:68">MMX_L</name></name><argument_list pos:start="669:69" pos:end="669:71">(<argument pos:start="669:70" pos:end="669:70"><expr pos:start="669:70" pos:end="669:70"><literal type="number" pos:start="669:70" pos:end="669:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="671:17" pos:end="671:35"><expr pos:start="671:17" pos:end="671:34"><call pos:start="671:17" pos:end="671:34"><name pos:start="671:17" pos:end="671:32">gen_op_movl_T0_0</name><argument_list pos:start="671:33" pos:end="671:34">()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="673:17" pos:end="673:74"><expr pos:start="673:17" pos:end="673:73"><call pos:start="673:17" pos:end="673:73"><name pos:start="673:17" pos:end="673:34">gen_op_movl_env_T0</name><argument_list pos:start="673:35" pos:end="673:73">(<argument pos:start="673:36" pos:end="673:72"><expr pos:start="673:36" pos:end="673:72"><call pos:start="673:36" pos:end="673:72"><name pos:start="673:36" pos:end="673:43">offsetof</name><argument_list pos:start="673:44" pos:end="673:72">(<argument pos:start="673:45" pos:end="673:55"><expr pos:start="673:45" pos:end="673:55"><name pos:start="673:45" pos:end="673:55">CPUX86State</name></expr></argument>,<argument pos:start="673:57" pos:end="673:71"><expr pos:start="673:57" pos:end="673:71"><call pos:start="673:57" pos:end="673:71"><name pos:start="673:57" pos:end="673:68"><name pos:start="673:57" pos:end="673:62">mmx_t0</name><operator pos:start="673:63" pos:end="673:63">.</operator><name pos:start="673:64" pos:end="673:68">MMX_L</name></name><argument_list pos:start="673:69" pos:end="673:71">(<argument pos:start="673:70" pos:end="673:70"><expr pos:start="673:70" pos:end="673:70"><literal type="number" pos:start="673:70" pos:end="673:70">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="675:17" pos:end="675:58"><expr pos:start="675:17" pos:end="675:57"><name pos:start="675:17" pos:end="675:26">op1_offset</name> <operator pos:start="675:28" pos:end="675:28">=</operator> <call pos:start="675:30" pos:end="675:57"><name pos:start="675:30" pos:end="675:37">offsetof</name><argument_list pos:start="675:38" pos:end="675:57">(<argument pos:start="675:39" pos:end="675:49"><expr pos:start="675:39" pos:end="675:49"><name pos:start="675:39" pos:end="675:49">CPUX86State</name></expr></argument>,<argument pos:start="675:51" pos:end="675:56"><expr pos:start="675:51" pos:end="675:56"><name pos:start="675:51" pos:end="675:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="679:13" pos:end="679:82"><expr pos:start="679:13" pos:end="679:81"><name pos:start="679:13" pos:end="679:19">sse_op2</name> <operator pos:start="679:21" pos:end="679:21">=</operator> <name pos:start="679:23" pos:end="679:81"><name pos:start="679:23" pos:end="679:35">sse_op_table2</name><index pos:start="679:36" pos:end="679:77">[<expr pos:start="679:37" pos:end="679:76"><operator pos:start="679:37" pos:end="679:37">(</operator><operator pos:start="679:38" pos:end="679:38">(</operator><name pos:start="679:39" pos:end="679:39">b</name> <operator pos:start="679:41" pos:end="679:41">-</operator> <literal type="number" pos:start="679:43" pos:end="679:43">1</literal><operator pos:start="679:44" pos:end="679:44">)</operator> <operator pos:start="679:46" pos:end="679:46">&amp;</operator> <literal type="number" pos:start="679:48" pos:end="679:48">3</literal><operator pos:start="679:49" pos:end="679:49">)</operator> <operator pos:start="679:51" pos:end="679:51">*</operator> <literal type="number" pos:start="679:53" pos:end="679:55">8</literal> <operator pos:start="679:55" pos:end="679:55">+</operator> <operator pos:start="679:57" pos:end="679:57">(</operator><operator pos:start="679:58" pos:end="679:58">(</operator><operator pos:start="679:59" pos:end="679:59">(</operator><name pos:start="679:60" pos:end="679:64">modrm</name> <operator pos:start="679:66" pos:end="679:67">&gt;&gt;</operator> <literal type="number" pos:start="679:69" pos:end="679:69">3</literal><operator pos:start="679:70" pos:end="679:70">)</operator><operator pos:start="679:71" pos:end="679:71">)</operator> <operator pos:start="679:73" pos:end="679:73">&amp;</operator> <literal type="number" pos:start="679:75" pos:end="679:75">7</literal><operator pos:start="679:76" pos:end="679:76">)</operator></expr>]</index><index pos:start="679:78" pos:end="679:81">[<expr pos:start="679:79" pos:end="679:80"><name pos:start="679:79" pos:end="679:80">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="681:13" pos:end="683:32"><if pos:start="681:13" pos:end="683:32">if <condition pos:start="681:16" pos:end="681:25">(<expr pos:start="681:17" pos:end="681:24"><operator pos:start="681:17" pos:end="681:17">!</operator><name pos:start="681:18" pos:end="681:24">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="683:17" pos:end="683:32"><block_content pos:start="683:17" pos:end="683:32">

                <goto pos:start="683:17" pos:end="683:32">goto <name pos:start="683:22" pos:end="683:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="685:13" pos:end="697:13"><if pos:start="685:13" pos:end="691:13">if <condition pos:start="685:16" pos:end="685:23">(<expr pos:start="685:17" pos:end="685:22"><name pos:start="685:17" pos:end="685:22">is_xmm</name></expr>)</condition> <block pos:start="685:25" pos:end="691:13">{<block_content pos:start="687:17" pos:end="689:64">

                <expr_stmt pos:start="687:17" pos:end="687:44"><expr pos:start="687:17" pos:end="687:43"><name pos:start="687:17" pos:end="687:18">rm</name> <operator pos:start="687:20" pos:end="687:20">=</operator> <operator pos:start="687:22" pos:end="687:22">(</operator><name pos:start="687:23" pos:end="687:27">modrm</name> <operator pos:start="687:29" pos:end="687:29">&amp;</operator> <literal type="number" pos:start="687:31" pos:end="687:31">7</literal><operator pos:start="687:32" pos:end="687:32">)</operator> <operator pos:start="687:34" pos:end="687:34">|</operator> <call pos:start="687:36" pos:end="687:43"><name pos:start="687:36" pos:end="687:40">REX_B</name><argument_list pos:start="687:41" pos:end="687:43">(<argument pos:start="687:42" pos:end="687:42"><expr pos:start="687:42" pos:end="687:42"><name pos:start="687:42" pos:end="687:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="689:17" pos:end="689:64"><expr pos:start="689:17" pos:end="689:63"><name pos:start="689:17" pos:end="689:26">op2_offset</name> <operator pos:start="689:28" pos:end="689:28">=</operator> <call pos:start="689:30" pos:end="689:63"><name pos:start="689:30" pos:end="689:37">offsetof</name><argument_list pos:start="689:38" pos:end="689:63">(<argument pos:start="689:39" pos:end="689:49"><expr pos:start="689:39" pos:end="689:49"><name pos:start="689:39" pos:end="689:49">CPUX86State</name></expr></argument>,<argument pos:start="689:51" pos:end="689:62"><expr pos:start="689:51" pos:end="689:62"><name pos:start="689:51" pos:end="689:62"><name pos:start="689:51" pos:end="689:58">xmm_regs</name><index pos:start="689:59" pos:end="689:62">[<expr pos:start="689:60" pos:end="689:61"><name pos:start="689:60" pos:end="689:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="691:15" pos:end="697:13">else <block pos:start="691:20" pos:end="697:13">{<block_content pos:start="693:17" pos:end="695:66">

                <expr_stmt pos:start="693:17" pos:end="693:33"><expr pos:start="693:17" pos:end="693:32"><name pos:start="693:17" pos:end="693:18">rm</name> <operator pos:start="693:20" pos:end="693:20">=</operator> <operator pos:start="693:22" pos:end="693:22">(</operator><name pos:start="693:23" pos:end="693:27">modrm</name> <operator pos:start="693:29" pos:end="693:29">&amp;</operator> <literal type="number" pos:start="693:31" pos:end="693:31">7</literal><operator pos:start="693:32" pos:end="693:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="695:17" pos:end="695:66"><expr pos:start="695:17" pos:end="695:65"><name pos:start="695:17" pos:end="695:26">op2_offset</name> <operator pos:start="695:28" pos:end="695:28">=</operator> <call pos:start="695:30" pos:end="695:65"><name pos:start="695:30" pos:end="695:37">offsetof</name><argument_list pos:start="695:38" pos:end="695:65">(<argument pos:start="695:39" pos:end="695:49"><expr pos:start="695:39" pos:end="695:49"><name pos:start="695:39" pos:end="695:49">CPUX86State</name></expr></argument>,<argument pos:start="695:51" pos:end="695:64"><expr pos:start="695:51" pos:end="695:64"><name pos:start="695:51" pos:end="695:60"><name pos:start="695:51" pos:end="695:56">fpregs</name><index pos:start="695:57" pos:end="695:60">[<expr pos:start="695:58" pos:end="695:59"><name pos:start="695:58" pos:end="695:59">rm</name></expr>]</index></name><operator pos:start="695:61" pos:end="695:61">.</operator><name pos:start="695:62" pos:end="695:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="699:13" pos:end="699:44"><expr pos:start="699:13" pos:end="699:43"><call pos:start="699:13" pos:end="699:43"><name pos:start="699:13" pos:end="699:19">sse_op2</name><argument_list pos:start="699:20" pos:end="699:43">(<argument pos:start="699:21" pos:end="699:30"><expr pos:start="699:21" pos:end="699:30"><name pos:start="699:21" pos:end="699:30">op2_offset</name></expr></argument>, <argument pos:start="699:33" pos:end="699:42"><expr pos:start="699:33" pos:end="699:42"><name pos:start="699:33" pos:end="699:42">op1_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="701:13" pos:end="701:18">break;</break>

        <case pos:start="703:9" pos:end="703:19">case <expr pos:start="703:14" pos:end="703:18"><literal type="number" pos:start="703:14" pos:end="703:18">0x050</literal></expr>:</case> <comment type="block" pos:start="703:21" pos:end="703:34">/* movmskps */</comment>

            <expr_stmt pos:start="705:13" pos:end="705:40"><expr pos:start="705:13" pos:end="705:39"><name pos:start="705:13" pos:end="705:14">rm</name> <operator pos:start="705:16" pos:end="705:16">=</operator> <operator pos:start="705:18" pos:end="705:18">(</operator><name pos:start="705:19" pos:end="705:23">modrm</name> <operator pos:start="705:25" pos:end="705:25">&amp;</operator> <literal type="number" pos:start="705:27" pos:end="705:27">7</literal><operator pos:start="705:28" pos:end="705:28">)</operator> <operator pos:start="705:30" pos:end="705:30">|</operator> <call pos:start="705:32" pos:end="705:39"><name pos:start="705:32" pos:end="705:36">REX_B</name><argument_list pos:start="705:37" pos:end="705:39">(<argument pos:start="705:38" pos:end="705:38"><expr pos:start="705:38" pos:end="705:38"><name pos:start="705:38" pos:end="705:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="707:13" pos:end="707:64"><expr pos:start="707:13" pos:end="707:63"><call pos:start="707:13" pos:end="707:63"><name pos:start="707:13" pos:end="707:27">gen_op_movmskps</name><argument_list pos:start="707:28" pos:end="707:63">(<argument pos:start="707:29" pos:end="707:62"><expr pos:start="707:29" pos:end="707:62"><call pos:start="707:29" pos:end="707:62"><name pos:start="707:29" pos:end="707:36">offsetof</name><argument_list pos:start="707:37" pos:end="707:62">(<argument pos:start="707:38" pos:end="707:48"><expr pos:start="707:38" pos:end="707:48"><name pos:start="707:38" pos:end="707:48">CPUX86State</name></expr></argument>,<argument pos:start="707:50" pos:end="707:61"><expr pos:start="707:50" pos:end="707:61"><name pos:start="707:50" pos:end="707:61"><name pos:start="707:50" pos:end="707:57">xmm_regs</name><index pos:start="707:58" pos:end="707:61">[<expr pos:start="707:59" pos:end="707:60"><name pos:start="707:59" pos:end="707:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="709:13" pos:end="709:44"><expr pos:start="709:13" pos:end="709:43"><call pos:start="709:13" pos:end="709:43"><name pos:start="709:13" pos:end="709:29">gen_op_mov_reg_T0</name><argument_list pos:start="709:30" pos:end="709:43">(<argument pos:start="709:31" pos:end="709:37"><expr pos:start="709:31" pos:end="709:37"><name pos:start="709:31" pos:end="709:37">OT_LONG</name></expr></argument>, <argument pos:start="709:40" pos:end="709:42"><expr pos:start="709:40" pos:end="709:42"><name pos:start="709:40" pos:end="709:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="711:13" pos:end="711:18">break;</break>

        <case pos:start="713:9" pos:end="713:19">case <expr pos:start="713:14" pos:end="713:18"><literal type="number" pos:start="713:14" pos:end="713:18">0x150</literal></expr>:</case> <comment type="block" pos:start="713:21" pos:end="713:34">/* movmskpd */</comment>

            <expr_stmt pos:start="715:13" pos:end="715:40"><expr pos:start="715:13" pos:end="715:39"><name pos:start="715:13" pos:end="715:14">rm</name> <operator pos:start="715:16" pos:end="715:16">=</operator> <operator pos:start="715:18" pos:end="715:18">(</operator><name pos:start="715:19" pos:end="715:23">modrm</name> <operator pos:start="715:25" pos:end="715:25">&amp;</operator> <literal type="number" pos:start="715:27" pos:end="715:27">7</literal><operator pos:start="715:28" pos:end="715:28">)</operator> <operator pos:start="715:30" pos:end="715:30">|</operator> <call pos:start="715:32" pos:end="715:39"><name pos:start="715:32" pos:end="715:36">REX_B</name><argument_list pos:start="715:37" pos:end="715:39">(<argument pos:start="715:38" pos:end="715:38"><expr pos:start="715:38" pos:end="715:38"><name pos:start="715:38" pos:end="715:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="717:13" pos:end="717:64"><expr pos:start="717:13" pos:end="717:63"><call pos:start="717:13" pos:end="717:63"><name pos:start="717:13" pos:end="717:27">gen_op_movmskpd</name><argument_list pos:start="717:28" pos:end="717:63">(<argument pos:start="717:29" pos:end="717:62"><expr pos:start="717:29" pos:end="717:62"><call pos:start="717:29" pos:end="717:62"><name pos:start="717:29" pos:end="717:36">offsetof</name><argument_list pos:start="717:37" pos:end="717:62">(<argument pos:start="717:38" pos:end="717:48"><expr pos:start="717:38" pos:end="717:48"><name pos:start="717:38" pos:end="717:48">CPUX86State</name></expr></argument>,<argument pos:start="717:50" pos:end="717:61"><expr pos:start="717:50" pos:end="717:61"><name pos:start="717:50" pos:end="717:61"><name pos:start="717:50" pos:end="717:57">xmm_regs</name><index pos:start="717:58" pos:end="717:61">[<expr pos:start="717:59" pos:end="717:60"><name pos:start="717:59" pos:end="717:60">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="719:13" pos:end="719:44"><expr pos:start="719:13" pos:end="719:43"><call pos:start="719:13" pos:end="719:43"><name pos:start="719:13" pos:end="719:29">gen_op_mov_reg_T0</name><argument_list pos:start="719:30" pos:end="719:43">(<argument pos:start="719:31" pos:end="719:37"><expr pos:start="719:31" pos:end="719:37"><name pos:start="719:31" pos:end="719:37">OT_LONG</name></expr></argument>, <argument pos:start="719:40" pos:end="719:42"><expr pos:start="719:40" pos:end="719:42"><name pos:start="719:40" pos:end="719:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="721:13" pos:end="721:18">break;</break>

        <case pos:start="723:9" pos:end="723:19">case <expr pos:start="723:14" pos:end="723:18"><literal type="number" pos:start="723:14" pos:end="723:18">0x02a</literal></expr>:</case> <comment type="block" pos:start="723:21" pos:end="723:34">/* cvtpi2ps */</comment>

        <case pos:start="725:9" pos:end="725:19">case <expr pos:start="725:14" pos:end="725:18"><literal type="number" pos:start="725:14" pos:end="725:18">0x12a</literal></expr>:</case> <comment type="block" pos:start="725:21" pos:end="725:34">/* cvtpi2pd */</comment>

            <expr_stmt pos:start="727:13" pos:end="727:31"><expr pos:start="727:13" pos:end="727:30"><call pos:start="727:13" pos:end="727:30"><name pos:start="727:13" pos:end="727:28">gen_op_enter_mmx</name><argument_list pos:start="727:29" pos:end="727:30">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="729:13" pos:end="743:13"><if pos:start="729:13" pos:end="737:13">if <condition pos:start="729:16" pos:end="729:25">(<expr pos:start="729:17" pos:end="729:24"><name pos:start="729:17" pos:end="729:19">mod</name> <operator pos:start="729:21" pos:end="729:22">!=</operator> <literal type="number" pos:start="729:24" pos:end="729:24">3</literal></expr>)</condition> <block pos:start="729:27" pos:end="737:13">{<block_content pos:start="731:17" pos:end="735:62">

                <expr_stmt pos:start="731:17" pos:end="731:65"><expr pos:start="731:17" pos:end="731:64"><call pos:start="731:17" pos:end="731:64"><name pos:start="731:17" pos:end="731:29">gen_lea_modrm</name><argument_list pos:start="731:30" pos:end="731:64">(<argument pos:start="731:31" pos:end="731:31"><expr pos:start="731:31" pos:end="731:31"><name pos:start="731:31" pos:end="731:31">s</name></expr></argument>, <argument pos:start="731:34" pos:end="731:38"><expr pos:start="731:34" pos:end="731:38"><name pos:start="731:34" pos:end="731:38">modrm</name></expr></argument>, <argument pos:start="731:41" pos:end="731:49"><expr pos:start="731:41" pos:end="731:49"><operator pos:start="731:41" pos:end="731:41">&amp;</operator><name pos:start="731:42" pos:end="731:49">reg_addr</name></expr></argument>, <argument pos:start="731:52" pos:end="731:63"><expr pos:start="731:52" pos:end="731:63"><operator pos:start="731:52" pos:end="731:52">&amp;</operator><name pos:start="731:53" pos:end="731:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="733:17" pos:end="733:58"><expr pos:start="733:17" pos:end="733:57"><name pos:start="733:17" pos:end="733:26">op2_offset</name> <operator pos:start="733:28" pos:end="733:28">=</operator> <call pos:start="733:30" pos:end="733:57"><name pos:start="733:30" pos:end="733:37">offsetof</name><argument_list pos:start="733:38" pos:end="733:57">(<argument pos:start="733:39" pos:end="733:49"><expr pos:start="733:39" pos:end="733:49"><name pos:start="733:39" pos:end="733:49">CPUX86State</name></expr></argument>,<argument pos:start="733:51" pos:end="733:56"><expr pos:start="733:51" pos:end="733:56"><name pos:start="733:51" pos:end="733:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="735:17" pos:end="735:62"><expr pos:start="735:17" pos:end="735:61"><name pos:start="735:17" pos:end="735:49"><name pos:start="735:17" pos:end="735:30">gen_ldq_env_A0</name><index pos:start="735:31" pos:end="735:49">[<expr pos:start="735:32" pos:end="735:48"><name pos:start="735:32" pos:end="735:43"><name pos:start="735:32" pos:end="735:32">s</name><operator pos:start="735:33" pos:end="735:34">-&gt;</operator><name pos:start="735:35" pos:end="735:43">mem_index</name></name> <operator pos:start="735:45" pos:end="735:46">&gt;&gt;</operator> <literal type="number" pos:start="735:48" pos:end="735:48">2</literal></expr>]</index></name><operator pos:start="735:50" pos:end="735:50">(</operator><name pos:start="735:51" pos:end="735:60">op2_offset</name><operator pos:start="735:61" pos:end="735:61">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="737:15" pos:end="743:13">else <block pos:start="737:20" pos:end="743:13">{<block_content pos:start="739:17" pos:end="741:66">

                <expr_stmt pos:start="739:17" pos:end="739:33"><expr pos:start="739:17" pos:end="739:32"><name pos:start="739:17" pos:end="739:18">rm</name> <operator pos:start="739:20" pos:end="739:20">=</operator> <operator pos:start="739:22" pos:end="739:22">(</operator><name pos:start="739:23" pos:end="739:27">modrm</name> <operator pos:start="739:29" pos:end="739:29">&amp;</operator> <literal type="number" pos:start="739:31" pos:end="739:31">7</literal><operator pos:start="739:32" pos:end="739:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="741:17" pos:end="741:66"><expr pos:start="741:17" pos:end="741:65"><name pos:start="741:17" pos:end="741:26">op2_offset</name> <operator pos:start="741:28" pos:end="741:28">=</operator> <call pos:start="741:30" pos:end="741:65"><name pos:start="741:30" pos:end="741:37">offsetof</name><argument_list pos:start="741:38" pos:end="741:65">(<argument pos:start="741:39" pos:end="741:49"><expr pos:start="741:39" pos:end="741:49"><name pos:start="741:39" pos:end="741:49">CPUX86State</name></expr></argument>,<argument pos:start="741:51" pos:end="741:64"><expr pos:start="741:51" pos:end="741:64"><name pos:start="741:51" pos:end="741:60"><name pos:start="741:51" pos:end="741:56">fpregs</name><index pos:start="741:57" pos:end="741:60">[<expr pos:start="741:58" pos:end="741:59"><name pos:start="741:58" pos:end="741:59">rm</name></expr>]</index></name><operator pos:start="741:61" pos:end="741:61">.</operator><name pos:start="741:62" pos:end="741:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="745:13" pos:end="745:61"><expr pos:start="745:13" pos:end="745:60"><name pos:start="745:13" pos:end="745:22">op1_offset</name> <operator pos:start="745:24" pos:end="745:24">=</operator> <call pos:start="745:26" pos:end="745:60"><name pos:start="745:26" pos:end="745:33">offsetof</name><argument_list pos:start="745:34" pos:end="745:60">(<argument pos:start="745:35" pos:end="745:45"><expr pos:start="745:35" pos:end="745:45"><name pos:start="745:35" pos:end="745:45">CPUX86State</name></expr></argument>,<argument pos:start="745:47" pos:end="745:59"><expr pos:start="745:47" pos:end="745:59"><name pos:start="745:47" pos:end="745:59"><name pos:start="745:47" pos:end="745:54">xmm_regs</name><index pos:start="745:55" pos:end="745:59">[<expr pos:start="745:56" pos:end="745:58"><name pos:start="745:56" pos:end="745:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="747:13" pos:end="763:13">switch<condition pos:start="747:19" pos:end="747:26">(<expr pos:start="747:20" pos:end="747:25"><name pos:start="747:20" pos:end="747:20">b</name> <operator pos:start="747:22" pos:end="747:23">&gt;&gt;</operator> <literal type="number" pos:start="747:25" pos:end="747:25">8</literal></expr>)</condition> <block pos:start="747:28" pos:end="763:13">{<block_content pos:start="749:13" pos:end="761:22">

            <case pos:start="749:13" pos:end="749:21">case <expr pos:start="749:18" pos:end="749:20"><literal type="number" pos:start="749:18" pos:end="749:20">0x0</literal></expr>:</case>

                <expr_stmt pos:start="751:17" pos:end="751:56"><expr pos:start="751:17" pos:end="751:55"><call pos:start="751:17" pos:end="751:55"><name pos:start="751:17" pos:end="751:31">gen_op_cvtpi2ps</name><argument_list pos:start="751:32" pos:end="751:55">(<argument pos:start="751:33" pos:end="751:42"><expr pos:start="751:33" pos:end="751:42"><name pos:start="751:33" pos:end="751:42">op1_offset</name></expr></argument>, <argument pos:start="751:45" pos:end="751:54"><expr pos:start="751:45" pos:end="751:54"><name pos:start="751:45" pos:end="751:54">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="753:17" pos:end="753:22">break;</break>

            <default pos:start="755:13" pos:end="755:20">default:</default>

            <case pos:start="757:13" pos:end="757:21">case <expr pos:start="757:18" pos:end="757:20"><literal type="number" pos:start="757:18" pos:end="757:20">0x1</literal></expr>:</case>

                <expr_stmt pos:start="759:17" pos:end="759:56"><expr pos:start="759:17" pos:end="759:55"><call pos:start="759:17" pos:end="759:55"><name pos:start="759:17" pos:end="759:31">gen_op_cvtpi2pd</name><argument_list pos:start="759:32" pos:end="759:55">(<argument pos:start="759:33" pos:end="759:42"><expr pos:start="759:33" pos:end="759:42"><name pos:start="759:33" pos:end="759:42">op1_offset</name></expr></argument>, <argument pos:start="759:45" pos:end="759:54"><expr pos:start="759:45" pos:end="759:54"><name pos:start="759:45" pos:end="759:54">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="761:17" pos:end="761:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="765:13" pos:end="765:18">break;</break>

        <case pos:start="767:9" pos:end="767:19">case <expr pos:start="767:14" pos:end="767:18"><literal type="number" pos:start="767:14" pos:end="767:18">0x22a</literal></expr>:</case> <comment type="block" pos:start="767:21" pos:end="767:34">/* cvtsi2ss */</comment>

        <case pos:start="769:9" pos:end="769:19">case <expr pos:start="769:14" pos:end="769:18"><literal type="number" pos:start="769:14" pos:end="769:18">0x32a</literal></expr>:</case> <comment type="block" pos:start="769:21" pos:end="769:34">/* cvtsi2sd */</comment>

            <expr_stmt pos:start="771:13" pos:end="771:53"><expr pos:start="771:13" pos:end="771:52"><name pos:start="771:13" pos:end="771:14">ot</name> <operator pos:start="771:16" pos:end="771:16">=</operator> <ternary pos:start="771:18" pos:end="771:52"><condition pos:start="771:18" pos:end="771:34"><expr pos:start="771:18" pos:end="771:32"><operator pos:start="771:18" pos:end="771:18">(</operator><name pos:start="771:19" pos:end="771:26"><name pos:start="771:19" pos:end="771:19">s</name><operator pos:start="771:20" pos:end="771:21">-&gt;</operator><name pos:start="771:22" pos:end="771:26">dflag</name></name> <operator pos:start="771:28" pos:end="771:29">==</operator> <literal type="number" pos:start="771:31" pos:end="771:31">2</literal><operator pos:start="771:32" pos:end="771:32">)</operator></expr> ?</condition><then pos:start="771:36" pos:end="771:42"> <expr pos:start="771:36" pos:end="771:42"><name pos:start="771:36" pos:end="771:42">OT_QUAD</name></expr> </then><else pos:start="771:44" pos:end="771:52">: <expr pos:start="771:46" pos:end="771:52"><name pos:start="771:46" pos:end="771:52">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt pos:start="773:13" pos:end="773:53"><expr pos:start="773:13" pos:end="773:52"><call pos:start="773:13" pos:end="773:52"><name pos:start="773:13" pos:end="773:26">gen_ldst_modrm</name><argument_list pos:start="773:27" pos:end="773:52">(<argument pos:start="773:28" pos:end="773:28"><expr pos:start="773:28" pos:end="773:28"><name pos:start="773:28" pos:end="773:28">s</name></expr></argument>, <argument pos:start="773:31" pos:end="773:35"><expr pos:start="773:31" pos:end="773:35"><name pos:start="773:31" pos:end="773:35">modrm</name></expr></argument>, <argument pos:start="773:38" pos:end="773:39"><expr pos:start="773:38" pos:end="773:39"><name pos:start="773:38" pos:end="773:39">ot</name></expr></argument>, <argument pos:start="773:42" pos:end="773:48"><expr pos:start="773:42" pos:end="773:48"><name pos:start="773:42" pos:end="773:48">OR_TMP0</name></expr></argument>, <argument pos:start="773:51" pos:end="773:51"><expr pos:start="773:51" pos:end="773:51"><literal type="number" pos:start="773:51" pos:end="773:51">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="775:13" pos:end="775:61"><expr pos:start="775:13" pos:end="775:60"><name pos:start="775:13" pos:end="775:22">op1_offset</name> <operator pos:start="775:24" pos:end="775:24">=</operator> <call pos:start="775:26" pos:end="775:60"><name pos:start="775:26" pos:end="775:33">offsetof</name><argument_list pos:start="775:34" pos:end="775:60">(<argument pos:start="775:35" pos:end="775:45"><expr pos:start="775:35" pos:end="775:45"><name pos:start="775:35" pos:end="775:45">CPUX86State</name></expr></argument>,<argument pos:start="775:47" pos:end="775:59"><expr pos:start="775:47" pos:end="775:59"><name pos:start="775:47" pos:end="775:59"><name pos:start="775:47" pos:end="775:54">xmm_regs</name><index pos:start="775:55" pos:end="775:59">[<expr pos:start="775:56" pos:end="775:58"><name pos:start="775:56" pos:end="775:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="777:13" pos:end="777:76"><expr pos:start="777:13" pos:end="777:75"><name pos:start="777:13" pos:end="777:63"><name pos:start="777:13" pos:end="777:25">sse_op_table3</name><index pos:start="777:26" pos:end="777:63">[<expr pos:start="777:27" pos:end="777:62"><operator pos:start="777:27" pos:end="777:27">(</operator><name pos:start="777:28" pos:end="777:35"><name pos:start="777:28" pos:end="777:28">s</name><operator pos:start="777:29" pos:end="777:30">-&gt;</operator><name pos:start="777:31" pos:end="777:35">dflag</name></name> <operator pos:start="777:37" pos:end="777:38">==</operator> <literal type="number" pos:start="777:40" pos:end="777:40">2</literal><operator pos:start="777:41" pos:end="777:41">)</operator> <operator pos:start="777:43" pos:end="777:43">*</operator> <literal type="number" pos:start="777:45" pos:end="777:45">2</literal> <operator pos:start="777:47" pos:end="777:47">+</operator> <operator pos:start="777:49" pos:end="777:49">(</operator><operator pos:start="777:50" pos:end="777:50">(</operator><name pos:start="777:51" pos:end="777:51">b</name> <operator pos:start="777:53" pos:end="777:54">&gt;&gt;</operator> <literal type="number" pos:start="777:56" pos:end="777:56">8</literal><operator pos:start="777:57" pos:end="777:57">)</operator> <operator pos:start="777:59" pos:end="777:59">-</operator> <literal type="number" pos:start="777:61" pos:end="777:61">2</literal><operator pos:start="777:62" pos:end="777:62">)</operator></expr>]</index></name><operator pos:start="777:64" pos:end="777:64">(</operator><name pos:start="777:65" pos:end="777:74">op1_offset</name><operator pos:start="777:75" pos:end="777:75">)</operator></expr>;</expr_stmt>

            <break pos:start="779:13" pos:end="779:18">break;</break>

        <case pos:start="781:9" pos:end="781:19">case <expr pos:start="781:14" pos:end="781:18"><literal type="number" pos:start="781:14" pos:end="781:18">0x02c</literal></expr>:</case> <comment type="block" pos:start="781:21" pos:end="781:35">/* cvttps2pi */</comment>

        <case pos:start="783:9" pos:end="783:19">case <expr pos:start="783:14" pos:end="783:18"><literal type="number" pos:start="783:14" pos:end="783:18">0x12c</literal></expr>:</case> <comment type="block" pos:start="783:21" pos:end="783:35">/* cvttpd2pi */</comment>

        <case pos:start="785:9" pos:end="785:19">case <expr pos:start="785:14" pos:end="785:18"><literal type="number" pos:start="785:14" pos:end="785:18">0x02d</literal></expr>:</case> <comment type="block" pos:start="785:21" pos:end="785:34">/* cvtps2pi */</comment>

        <case pos:start="787:9" pos:end="787:19">case <expr pos:start="787:14" pos:end="787:18"><literal type="number" pos:start="787:14" pos:end="787:18">0x12d</literal></expr>:</case> <comment type="block" pos:start="787:21" pos:end="787:34">/* cvtpd2pi */</comment>

            <expr_stmt pos:start="789:13" pos:end="789:31"><expr pos:start="789:13" pos:end="789:30"><call pos:start="789:13" pos:end="789:30"><name pos:start="789:13" pos:end="789:28">gen_op_enter_mmx</name><argument_list pos:start="789:29" pos:end="789:30">()</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="791:13" pos:end="805:13"><if pos:start="791:13" pos:end="799:13">if <condition pos:start="791:16" pos:end="791:25">(<expr pos:start="791:17" pos:end="791:24"><name pos:start="791:17" pos:end="791:19">mod</name> <operator pos:start="791:21" pos:end="791:22">!=</operator> <literal type="number" pos:start="791:24" pos:end="791:24">3</literal></expr>)</condition> <block pos:start="791:27" pos:end="799:13">{<block_content pos:start="793:17" pos:end="797:62">

                <expr_stmt pos:start="793:17" pos:end="793:65"><expr pos:start="793:17" pos:end="793:64"><call pos:start="793:17" pos:end="793:64"><name pos:start="793:17" pos:end="793:29">gen_lea_modrm</name><argument_list pos:start="793:30" pos:end="793:64">(<argument pos:start="793:31" pos:end="793:31"><expr pos:start="793:31" pos:end="793:31"><name pos:start="793:31" pos:end="793:31">s</name></expr></argument>, <argument pos:start="793:34" pos:end="793:38"><expr pos:start="793:34" pos:end="793:38"><name pos:start="793:34" pos:end="793:38">modrm</name></expr></argument>, <argument pos:start="793:41" pos:end="793:49"><expr pos:start="793:41" pos:end="793:49"><operator pos:start="793:41" pos:end="793:41">&amp;</operator><name pos:start="793:42" pos:end="793:49">reg_addr</name></expr></argument>, <argument pos:start="793:52" pos:end="793:63"><expr pos:start="793:52" pos:end="793:63"><operator pos:start="793:52" pos:end="793:52">&amp;</operator><name pos:start="793:53" pos:end="793:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="795:17" pos:end="795:58"><expr pos:start="795:17" pos:end="795:57"><name pos:start="795:17" pos:end="795:26">op2_offset</name> <operator pos:start="795:28" pos:end="795:28">=</operator> <call pos:start="795:30" pos:end="795:57"><name pos:start="795:30" pos:end="795:37">offsetof</name><argument_list pos:start="795:38" pos:end="795:57">(<argument pos:start="795:39" pos:end="795:49"><expr pos:start="795:39" pos:end="795:49"><name pos:start="795:39" pos:end="795:49">CPUX86State</name></expr></argument>,<argument pos:start="795:51" pos:end="795:56"><expr pos:start="795:51" pos:end="795:56"><name pos:start="795:51" pos:end="795:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="797:17" pos:end="797:62"><expr pos:start="797:17" pos:end="797:61"><name pos:start="797:17" pos:end="797:49"><name pos:start="797:17" pos:end="797:30">gen_ldo_env_A0</name><index pos:start="797:31" pos:end="797:49">[<expr pos:start="797:32" pos:end="797:48"><name pos:start="797:32" pos:end="797:43"><name pos:start="797:32" pos:end="797:32">s</name><operator pos:start="797:33" pos:end="797:34">-&gt;</operator><name pos:start="797:35" pos:end="797:43">mem_index</name></name> <operator pos:start="797:45" pos:end="797:46">&gt;&gt;</operator> <literal type="number" pos:start="797:48" pos:end="797:48">2</literal></expr>]</index></name><operator pos:start="797:50" pos:end="797:50">(</operator><name pos:start="797:51" pos:end="797:60">op2_offset</name><operator pos:start="797:61" pos:end="797:61">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="799:15" pos:end="805:13">else <block pos:start="799:20" pos:end="805:13">{<block_content pos:start="801:17" pos:end="803:64">

                <expr_stmt pos:start="801:17" pos:end="801:44"><expr pos:start="801:17" pos:end="801:43"><name pos:start="801:17" pos:end="801:18">rm</name> <operator pos:start="801:20" pos:end="801:20">=</operator> <operator pos:start="801:22" pos:end="801:22">(</operator><name pos:start="801:23" pos:end="801:27">modrm</name> <operator pos:start="801:29" pos:end="801:29">&amp;</operator> <literal type="number" pos:start="801:31" pos:end="801:31">7</literal><operator pos:start="801:32" pos:end="801:32">)</operator> <operator pos:start="801:34" pos:end="801:34">|</operator> <call pos:start="801:36" pos:end="801:43"><name pos:start="801:36" pos:end="801:40">REX_B</name><argument_list pos:start="801:41" pos:end="801:43">(<argument pos:start="801:42" pos:end="801:42"><expr pos:start="801:42" pos:end="801:42"><name pos:start="801:42" pos:end="801:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="803:17" pos:end="803:64"><expr pos:start="803:17" pos:end="803:63"><name pos:start="803:17" pos:end="803:26">op2_offset</name> <operator pos:start="803:28" pos:end="803:28">=</operator> <call pos:start="803:30" pos:end="803:63"><name pos:start="803:30" pos:end="803:37">offsetof</name><argument_list pos:start="803:38" pos:end="803:63">(<argument pos:start="803:39" pos:end="803:49"><expr pos:start="803:39" pos:end="803:49"><name pos:start="803:39" pos:end="803:49">CPUX86State</name></expr></argument>,<argument pos:start="803:51" pos:end="803:62"><expr pos:start="803:51" pos:end="803:62"><name pos:start="803:51" pos:end="803:62"><name pos:start="803:51" pos:end="803:58">xmm_regs</name><index pos:start="803:59" pos:end="803:62">[<expr pos:start="803:60" pos:end="803:61"><name pos:start="803:60" pos:end="803:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="807:13" pos:end="807:67"><expr pos:start="807:13" pos:end="807:66"><name pos:start="807:13" pos:end="807:22">op1_offset</name> <operator pos:start="807:24" pos:end="807:24">=</operator> <call pos:start="807:26" pos:end="807:66"><name pos:start="807:26" pos:end="807:33">offsetof</name><argument_list pos:start="807:34" pos:end="807:66">(<argument pos:start="807:35" pos:end="807:45"><expr pos:start="807:35" pos:end="807:45"><name pos:start="807:35" pos:end="807:45">CPUX86State</name></expr></argument>,<argument pos:start="807:47" pos:end="807:65"><expr pos:start="807:47" pos:end="807:65"><name pos:start="807:47" pos:end="807:61"><name pos:start="807:47" pos:end="807:52">fpregs</name><index pos:start="807:53" pos:end="807:61">[<expr pos:start="807:54" pos:end="807:60"><name pos:start="807:54" pos:end="807:56">reg</name> <operator pos:start="807:58" pos:end="807:58">&amp;</operator> <literal type="number" pos:start="807:60" pos:end="807:60">7</literal></expr>]</index></name><operator pos:start="807:62" pos:end="807:62">.</operator><name pos:start="807:63" pos:end="807:65">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <switch pos:start="809:13" pos:end="835:13">switch<condition pos:start="809:19" pos:end="809:21">(<expr pos:start="809:20" pos:end="809:20"><name pos:start="809:20" pos:end="809:20">b</name></expr>)</condition> <block pos:start="809:23" pos:end="835:13">{<block_content pos:start="811:13" pos:end="833:22">

            <case pos:start="811:13" pos:end="811:23">case <expr pos:start="811:18" pos:end="811:22"><literal type="number" pos:start="811:18" pos:end="811:22">0x02c</literal></expr>:</case>

                <expr_stmt pos:start="813:17" pos:end="813:57"><expr pos:start="813:17" pos:end="813:56"><call pos:start="813:17" pos:end="813:56"><name pos:start="813:17" pos:end="813:32">gen_op_cvttps2pi</name><argument_list pos:start="813:33" pos:end="813:56">(<argument pos:start="813:34" pos:end="813:43"><expr pos:start="813:34" pos:end="813:43"><name pos:start="813:34" pos:end="813:43">op1_offset</name></expr></argument>, <argument pos:start="813:46" pos:end="813:55"><expr pos:start="813:46" pos:end="813:55"><name pos:start="813:46" pos:end="813:55">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="815:17" pos:end="815:22">break;</break>

            <case pos:start="817:13" pos:end="817:23">case <expr pos:start="817:18" pos:end="817:22"><literal type="number" pos:start="817:18" pos:end="817:22">0x12c</literal></expr>:</case>

                <expr_stmt pos:start="819:17" pos:end="819:57"><expr pos:start="819:17" pos:end="819:56"><call pos:start="819:17" pos:end="819:56"><name pos:start="819:17" pos:end="819:32">gen_op_cvttpd2pi</name><argument_list pos:start="819:33" pos:end="819:56">(<argument pos:start="819:34" pos:end="819:43"><expr pos:start="819:34" pos:end="819:43"><name pos:start="819:34" pos:end="819:43">op1_offset</name></expr></argument>, <argument pos:start="819:46" pos:end="819:55"><expr pos:start="819:46" pos:end="819:55"><name pos:start="819:46" pos:end="819:55">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="821:17" pos:end="821:22">break;</break>

            <case pos:start="823:13" pos:end="823:23">case <expr pos:start="823:18" pos:end="823:22"><literal type="number" pos:start="823:18" pos:end="823:22">0x02d</literal></expr>:</case>

                <expr_stmt pos:start="825:17" pos:end="825:56"><expr pos:start="825:17" pos:end="825:55"><call pos:start="825:17" pos:end="825:55"><name pos:start="825:17" pos:end="825:31">gen_op_cvtps2pi</name><argument_list pos:start="825:32" pos:end="825:55">(<argument pos:start="825:33" pos:end="825:42"><expr pos:start="825:33" pos:end="825:42"><name pos:start="825:33" pos:end="825:42">op1_offset</name></expr></argument>, <argument pos:start="825:45" pos:end="825:54"><expr pos:start="825:45" pos:end="825:54"><name pos:start="825:45" pos:end="825:54">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="827:17" pos:end="827:22">break;</break>

            <case pos:start="829:13" pos:end="829:23">case <expr pos:start="829:18" pos:end="829:22"><literal type="number" pos:start="829:18" pos:end="829:22">0x12d</literal></expr>:</case>

                <expr_stmt pos:start="831:17" pos:end="831:56"><expr pos:start="831:17" pos:end="831:55"><call pos:start="831:17" pos:end="831:55"><name pos:start="831:17" pos:end="831:31">gen_op_cvtpd2pi</name><argument_list pos:start="831:32" pos:end="831:55">(<argument pos:start="831:33" pos:end="831:42"><expr pos:start="831:33" pos:end="831:42"><name pos:start="831:33" pos:end="831:42">op1_offset</name></expr></argument>, <argument pos:start="831:45" pos:end="831:54"><expr pos:start="831:45" pos:end="831:54"><name pos:start="831:45" pos:end="831:54">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="833:17" pos:end="833:22">break;</break>

            </block_content>}</block></switch>

            <break pos:start="837:13" pos:end="837:18">break;</break>

        <case pos:start="839:9" pos:end="839:19">case <expr pos:start="839:14" pos:end="839:18"><literal type="number" pos:start="839:14" pos:end="839:18">0x22c</literal></expr>:</case> <comment type="block" pos:start="839:21" pos:end="839:35">/* cvttss2si */</comment>

        <case pos:start="841:9" pos:end="841:19">case <expr pos:start="841:14" pos:end="841:18"><literal type="number" pos:start="841:14" pos:end="841:18">0x32c</literal></expr>:</case> <comment type="block" pos:start="841:21" pos:end="841:35">/* cvttsd2si */</comment>

        <case pos:start="843:9" pos:end="843:19">case <expr pos:start="843:14" pos:end="843:18"><literal type="number" pos:start="843:14" pos:end="843:18">0x22d</literal></expr>:</case> <comment type="block" pos:start="843:21" pos:end="843:34">/* cvtss2si */</comment>

        <case pos:start="845:9" pos:end="845:19">case <expr pos:start="845:14" pos:end="845:18"><literal type="number" pos:start="845:14" pos:end="845:18">0x32d</literal></expr>:</case> <comment type="block" pos:start="845:21" pos:end="845:34">/* cvtsd2si */</comment>

            <expr_stmt pos:start="847:13" pos:end="847:53"><expr pos:start="847:13" pos:end="847:52"><name pos:start="847:13" pos:end="847:14">ot</name> <operator pos:start="847:16" pos:end="847:16">=</operator> <ternary pos:start="847:18" pos:end="847:52"><condition pos:start="847:18" pos:end="847:34"><expr pos:start="847:18" pos:end="847:32"><operator pos:start="847:18" pos:end="847:18">(</operator><name pos:start="847:19" pos:end="847:26"><name pos:start="847:19" pos:end="847:19">s</name><operator pos:start="847:20" pos:end="847:21">-&gt;</operator><name pos:start="847:22" pos:end="847:26">dflag</name></name> <operator pos:start="847:28" pos:end="847:29">==</operator> <literal type="number" pos:start="847:31" pos:end="847:31">2</literal><operator pos:start="847:32" pos:end="847:32">)</operator></expr> ?</condition><then pos:start="847:36" pos:end="847:42"> <expr pos:start="847:36" pos:end="847:42"><name pos:start="847:36" pos:end="847:42">OT_QUAD</name></expr> </then><else pos:start="847:44" pos:end="847:52">: <expr pos:start="847:46" pos:end="847:52"><name pos:start="847:46" pos:end="847:52">OT_LONG</name></expr></else></ternary></expr>;</expr_stmt>

            <if_stmt pos:start="849:13" pos:end="873:13"><if pos:start="849:13" pos:end="867:13">if <condition pos:start="849:16" pos:end="849:25">(<expr pos:start="849:17" pos:end="849:24"><name pos:start="849:17" pos:end="849:19">mod</name> <operator pos:start="849:21" pos:end="849:22">!=</operator> <literal type="number" pos:start="849:24" pos:end="849:24">3</literal></expr>)</condition> <block pos:start="849:27" pos:end="867:13">{<block_content pos:start="851:17" pos:end="865:58">

                <expr_stmt pos:start="851:17" pos:end="851:65"><expr pos:start="851:17" pos:end="851:64"><call pos:start="851:17" pos:end="851:64"><name pos:start="851:17" pos:end="851:29">gen_lea_modrm</name><argument_list pos:start="851:30" pos:end="851:64">(<argument pos:start="851:31" pos:end="851:31"><expr pos:start="851:31" pos:end="851:31"><name pos:start="851:31" pos:end="851:31">s</name></expr></argument>, <argument pos:start="851:34" pos:end="851:38"><expr pos:start="851:34" pos:end="851:38"><name pos:start="851:34" pos:end="851:38">modrm</name></expr></argument>, <argument pos:start="851:41" pos:end="851:49"><expr pos:start="851:41" pos:end="851:49"><operator pos:start="851:41" pos:end="851:41">&amp;</operator><name pos:start="851:42" pos:end="851:49">reg_addr</name></expr></argument>, <argument pos:start="851:52" pos:end="851:63"><expr pos:start="851:52" pos:end="851:63"><operator pos:start="851:52" pos:end="851:52">&amp;</operator><name pos:start="851:53" pos:end="851:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="853:17" pos:end="863:17"><if pos:start="853:17" pos:end="857:17">if <condition pos:start="853:20" pos:end="853:33">(<expr pos:start="853:21" pos:end="853:32"><operator pos:start="853:21" pos:end="853:21">(</operator><name pos:start="853:22" pos:end="853:22">b</name> <operator pos:start="853:24" pos:end="853:25">&gt;&gt;</operator> <literal type="number" pos:start="853:27" pos:end="853:27">8</literal><operator pos:start="853:28" pos:end="853:28">)</operator> <operator pos:start="853:30" pos:end="853:30">&amp;</operator> <literal type="number" pos:start="853:32" pos:end="853:32">1</literal></expr>)</condition> <block pos:start="853:35" pos:end="857:17">{<block_content pos:start="855:21" pos:end="855:93">

                    <expr_stmt pos:start="855:21" pos:end="855:93"><expr pos:start="855:21" pos:end="855:92"><name pos:start="855:21" pos:end="855:53"><name pos:start="855:21" pos:end="855:34">gen_ldq_env_A0</name><index pos:start="855:35" pos:end="855:53">[<expr pos:start="855:36" pos:end="855:52"><name pos:start="855:36" pos:end="855:47"><name pos:start="855:36" pos:end="855:36">s</name><operator pos:start="855:37" pos:end="855:38">-&gt;</operator><name pos:start="855:39" pos:end="855:47">mem_index</name></name> <operator pos:start="855:49" pos:end="855:50">&gt;&gt;</operator> <literal type="number" pos:start="855:52" pos:end="855:52">2</literal></expr>]</index></name><operator pos:start="855:54" pos:end="855:54">(</operator><call pos:start="855:55" pos:end="855:91"><name pos:start="855:55" pos:end="855:62">offsetof</name><argument_list pos:start="855:63" pos:end="855:91">(<argument pos:start="855:64" pos:end="855:74"><expr pos:start="855:64" pos:end="855:74"><name pos:start="855:64" pos:end="855:74">CPUX86State</name></expr></argument>,<argument pos:start="855:76" pos:end="855:90"><expr pos:start="855:76" pos:end="855:90"><call pos:start="855:76" pos:end="855:90"><name pos:start="855:76" pos:end="855:87"><name pos:start="855:76" pos:end="855:81">xmm_t0</name><operator pos:start="855:82" pos:end="855:82">.</operator><name pos:start="855:83" pos:end="855:87">XMM_Q</name></name><argument_list pos:start="855:88" pos:end="855:90">(<argument pos:start="855:89" pos:end="855:89"><expr pos:start="855:89" pos:end="855:89"><literal type="number" pos:start="855:89" pos:end="855:89">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="855:92" pos:end="855:92">)</operator></expr>;</expr_stmt>

                </block_content>}</block></if> <else pos:start="857:19" pos:end="863:17">else <block pos:start="857:24" pos:end="863:17">{<block_content pos:start="859:21" pos:end="861:78">

                    <expr_stmt pos:start="859:21" pos:end="859:60"><expr pos:start="859:21" pos:end="859:59"><call pos:start="859:21" pos:end="859:59"><name pos:start="859:21" pos:end="859:35">gen_op_ld_T0_A0</name><argument_list pos:start="859:36" pos:end="859:59">(<argument pos:start="859:37" pos:end="859:58"><expr pos:start="859:37" pos:end="859:58"><name pos:start="859:37" pos:end="859:43">OT_LONG</name> <operator pos:start="859:45" pos:end="859:45">+</operator> <name pos:start="859:47" pos:end="859:58"><name pos:start="859:47" pos:end="859:47">s</name><operator pos:start="859:48" pos:end="859:49">-&gt;</operator><name pos:start="859:50" pos:end="859:58">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="861:21" pos:end="861:78"><expr pos:start="861:21" pos:end="861:77"><call pos:start="861:21" pos:end="861:77"><name pos:start="861:21" pos:end="861:38">gen_op_movl_env_T0</name><argument_list pos:start="861:39" pos:end="861:77">(<argument pos:start="861:40" pos:end="861:76"><expr pos:start="861:40" pos:end="861:76"><call pos:start="861:40" pos:end="861:76"><name pos:start="861:40" pos:end="861:47">offsetof</name><argument_list pos:start="861:48" pos:end="861:76">(<argument pos:start="861:49" pos:end="861:59"><expr pos:start="861:49" pos:end="861:59"><name pos:start="861:49" pos:end="861:59">CPUX86State</name></expr></argument>,<argument pos:start="861:61" pos:end="861:75"><expr pos:start="861:61" pos:end="861:75"><call pos:start="861:61" pos:end="861:75"><name pos:start="861:61" pos:end="861:72"><name pos:start="861:61" pos:end="861:66">xmm_t0</name><operator pos:start="861:67" pos:end="861:67">.</operator><name pos:start="861:68" pos:end="861:72">XMM_L</name></name><argument_list pos:start="861:73" pos:end="861:75">(<argument pos:start="861:74" pos:end="861:74"><expr pos:start="861:74" pos:end="861:74"><literal type="number" pos:start="861:74" pos:end="861:74">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

                <expr_stmt pos:start="865:17" pos:end="865:58"><expr pos:start="865:17" pos:end="865:57"><name pos:start="865:17" pos:end="865:26">op2_offset</name> <operator pos:start="865:28" pos:end="865:28">=</operator> <call pos:start="865:30" pos:end="865:57"><name pos:start="865:30" pos:end="865:37">offsetof</name><argument_list pos:start="865:38" pos:end="865:57">(<argument pos:start="865:39" pos:end="865:49"><expr pos:start="865:39" pos:end="865:49"><name pos:start="865:39" pos:end="865:49">CPUX86State</name></expr></argument>,<argument pos:start="865:51" pos:end="865:56"><expr pos:start="865:51" pos:end="865:56"><name pos:start="865:51" pos:end="865:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="867:15" pos:end="873:13">else <block pos:start="867:20" pos:end="873:13">{<block_content pos:start="869:17" pos:end="871:64">

                <expr_stmt pos:start="869:17" pos:end="869:44"><expr pos:start="869:17" pos:end="869:43"><name pos:start="869:17" pos:end="869:18">rm</name> <operator pos:start="869:20" pos:end="869:20">=</operator> <operator pos:start="869:22" pos:end="869:22">(</operator><name pos:start="869:23" pos:end="869:27">modrm</name> <operator pos:start="869:29" pos:end="869:29">&amp;</operator> <literal type="number" pos:start="869:31" pos:end="869:31">7</literal><operator pos:start="869:32" pos:end="869:32">)</operator> <operator pos:start="869:34" pos:end="869:34">|</operator> <call pos:start="869:36" pos:end="869:43"><name pos:start="869:36" pos:end="869:40">REX_B</name><argument_list pos:start="869:41" pos:end="869:43">(<argument pos:start="869:42" pos:end="869:42"><expr pos:start="869:42" pos:end="869:42"><name pos:start="869:42" pos:end="869:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="871:17" pos:end="871:64"><expr pos:start="871:17" pos:end="871:63"><name pos:start="871:17" pos:end="871:26">op2_offset</name> <operator pos:start="871:28" pos:end="871:28">=</operator> <call pos:start="871:30" pos:end="871:63"><name pos:start="871:30" pos:end="871:37">offsetof</name><argument_list pos:start="871:38" pos:end="871:63">(<argument pos:start="871:39" pos:end="871:49"><expr pos:start="871:39" pos:end="871:49"><name pos:start="871:39" pos:end="871:49">CPUX86State</name></expr></argument>,<argument pos:start="871:51" pos:end="871:62"><expr pos:start="871:51" pos:end="871:62"><name pos:start="871:51" pos:end="871:62"><name pos:start="871:51" pos:end="871:58">xmm_regs</name><index pos:start="871:59" pos:end="871:62">[<expr pos:start="871:60" pos:end="871:61"><name pos:start="871:60" pos:end="871:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="875:13" pos:end="877:51"><expr pos:start="875:13" pos:end="877:50"><name pos:start="875:13" pos:end="877:38"><name pos:start="875:13" pos:end="875:25">sse_op_table3</name><index pos:start="875:26" pos:end="877:38">[<expr pos:start="875:27" pos:end="877:37"><operator pos:start="875:27" pos:end="875:27">(</operator><name pos:start="875:28" pos:end="875:35"><name pos:start="875:28" pos:end="875:28">s</name><operator pos:start="875:29" pos:end="875:30">-&gt;</operator><name pos:start="875:31" pos:end="875:35">dflag</name></name> <operator pos:start="875:37" pos:end="875:38">==</operator> <literal type="number" pos:start="875:40" pos:end="875:40">2</literal><operator pos:start="875:41" pos:end="875:41">)</operator> <operator pos:start="875:43" pos:end="875:43">*</operator> <literal type="number" pos:start="875:45" pos:end="875:45">2</literal> <operator pos:start="875:47" pos:end="875:47">+</operator> <operator pos:start="875:49" pos:end="875:49">(</operator><operator pos:start="875:50" pos:end="875:50">(</operator><name pos:start="875:51" pos:end="875:51">b</name> <operator pos:start="875:53" pos:end="875:54">&gt;&gt;</operator> <literal type="number" pos:start="875:56" pos:end="875:56">8</literal><operator pos:start="875:57" pos:end="875:57">)</operator> <operator pos:start="875:59" pos:end="875:59">-</operator> <literal type="number" pos:start="875:61" pos:end="875:61">2</literal><operator pos:start="875:62" pos:end="875:62">)</operator> <operator pos:start="875:64" pos:end="875:64">+</operator> <literal type="number" pos:start="875:66" pos:end="875:68">4</literal> <operator pos:start="875:68" pos:end="875:68">+</operator>

                          <operator pos:start="877:27" pos:end="877:27">(</operator><name pos:start="877:28" pos:end="877:28">b</name> <operator pos:start="877:30" pos:end="877:30">&amp;</operator> <literal type="number" pos:start="877:32" pos:end="877:32">1</literal><operator pos:start="877:33" pos:end="877:33">)</operator> <operator pos:start="877:35" pos:end="877:35">*</operator> <literal type="number" pos:start="877:37" pos:end="877:37">4</literal></expr>]</index></name><operator pos:start="877:39" pos:end="877:39">(</operator><name pos:start="877:40" pos:end="877:49">op2_offset</name><operator pos:start="877:50" pos:end="877:50">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="879:13" pos:end="879:39"><expr pos:start="879:13" pos:end="879:38"><call pos:start="879:13" pos:end="879:38"><name pos:start="879:13" pos:end="879:29">gen_op_mov_reg_T0</name><argument_list pos:start="879:30" pos:end="879:38">(<argument pos:start="879:31" pos:end="879:32"><expr pos:start="879:31" pos:end="879:32"><name pos:start="879:31" pos:end="879:32">ot</name></expr></argument>, <argument pos:start="879:35" pos:end="879:37"><expr pos:start="879:35" pos:end="879:37"><name pos:start="879:35" pos:end="879:37">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="881:13" pos:end="881:18">break;</break>

        <case pos:start="883:9" pos:end="883:18">case <expr pos:start="883:14" pos:end="883:17"><literal type="number" pos:start="883:14" pos:end="883:17">0xc4</literal></expr>:</case> <comment type="block" pos:start="883:20" pos:end="883:31">/* pinsrw */</comment>

        <case pos:start="885:9" pos:end="885:19">case <expr pos:start="885:14" pos:end="885:18"><literal type="number" pos:start="885:14" pos:end="885:18">0x1c4</literal></expr>:</case>

            <expr_stmt pos:start="887:13" pos:end="887:30"><expr pos:start="887:13" pos:end="887:29"><name pos:start="887:13" pos:end="887:25"><name pos:start="887:13" pos:end="887:13">s</name><operator pos:start="887:14" pos:end="887:15">-&gt;</operator><name pos:start="887:16" pos:end="887:25">rip_offset</name></name> <operator pos:start="887:27" pos:end="887:27">=</operator> <literal type="number" pos:start="887:29" pos:end="887:29">1</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="889:13" pos:end="889:58"><expr pos:start="889:13" pos:end="889:57"><call pos:start="889:13" pos:end="889:57"><name pos:start="889:13" pos:end="889:26">gen_ldst_modrm</name><argument_list pos:start="889:27" pos:end="889:57">(<argument pos:start="889:28" pos:end="889:28"><expr pos:start="889:28" pos:end="889:28"><name pos:start="889:28" pos:end="889:28">s</name></expr></argument>, <argument pos:start="889:31" pos:end="889:35"><expr pos:start="889:31" pos:end="889:35"><name pos:start="889:31" pos:end="889:35">modrm</name></expr></argument>, <argument pos:start="889:38" pos:end="889:44"><expr pos:start="889:38" pos:end="889:44"><name pos:start="889:38" pos:end="889:44">OT_WORD</name></expr></argument>, <argument pos:start="889:47" pos:end="889:53"><expr pos:start="889:47" pos:end="889:53"><name pos:start="889:47" pos:end="889:53">OR_TMP0</name></expr></argument>, <argument pos:start="889:56" pos:end="889:56"><expr pos:start="889:56" pos:end="889:56"><literal type="number" pos:start="889:56" pos:end="889:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="891:13" pos:end="891:37"><expr pos:start="891:13" pos:end="891:36"><name pos:start="891:13" pos:end="891:15">val</name> <operator pos:start="891:17" pos:end="891:17">=</operator> <call pos:start="891:19" pos:end="891:36"><name pos:start="891:19" pos:end="891:27">ldub_code</name><argument_list pos:start="891:28" pos:end="891:36">(<argument pos:start="891:29" pos:end="891:35"><expr pos:start="891:29" pos:end="891:35"><name pos:start="891:29" pos:end="891:33"><name pos:start="891:29" pos:end="891:29">s</name><operator pos:start="891:30" pos:end="891:31">-&gt;</operator><name pos:start="891:32" pos:end="891:33">pc</name></name><operator pos:start="891:34" pos:end="891:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="893:13" pos:end="905:13"><if pos:start="893:13" pos:end="899:13">if <condition pos:start="893:16" pos:end="893:19">(<expr pos:start="893:17" pos:end="893:18"><name pos:start="893:17" pos:end="893:18">b1</name></expr>)</condition> <block pos:start="893:21" pos:end="899:13">{<block_content pos:start="895:17" pos:end="897:76">

                <expr_stmt pos:start="895:17" pos:end="895:25"><expr pos:start="895:17" pos:end="895:24"><name pos:start="895:17" pos:end="895:19">val</name> <operator pos:start="895:21" pos:end="895:22">&amp;=</operator> <literal type="number" pos:start="895:24" pos:end="895:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="897:17" pos:end="897:76"><expr pos:start="897:17" pos:end="897:75"><call pos:start="897:17" pos:end="897:75"><name pos:start="897:17" pos:end="897:33">gen_op_pinsrw_xmm</name><argument_list pos:start="897:34" pos:end="897:75">(<argument pos:start="897:35" pos:end="897:69"><expr pos:start="897:35" pos:end="897:69"><call pos:start="897:35" pos:end="897:69"><name pos:start="897:35" pos:end="897:42">offsetof</name><argument_list pos:start="897:43" pos:end="897:69">(<argument pos:start="897:44" pos:end="897:54"><expr pos:start="897:44" pos:end="897:54"><name pos:start="897:44" pos:end="897:54">CPUX86State</name></expr></argument>,<argument pos:start="897:56" pos:end="897:68"><expr pos:start="897:56" pos:end="897:68"><name pos:start="897:56" pos:end="897:68"><name pos:start="897:56" pos:end="897:63">xmm_regs</name><index pos:start="897:64" pos:end="897:68">[<expr pos:start="897:65" pos:end="897:67"><name pos:start="897:65" pos:end="897:67">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="897:72" pos:end="897:74"><expr pos:start="897:72" pos:end="897:74"><name pos:start="897:72" pos:end="897:74">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="899:15" pos:end="905:13">else <block pos:start="899:20" pos:end="905:13">{<block_content pos:start="901:17" pos:end="903:78">

                <expr_stmt pos:start="901:17" pos:end="901:25"><expr pos:start="901:17" pos:end="901:24"><name pos:start="901:17" pos:end="901:19">val</name> <operator pos:start="901:21" pos:end="901:22">&amp;=</operator> <literal type="number" pos:start="901:24" pos:end="901:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="903:17" pos:end="903:78"><expr pos:start="903:17" pos:end="903:77"><call pos:start="903:17" pos:end="903:77"><name pos:start="903:17" pos:end="903:33">gen_op_pinsrw_mmx</name><argument_list pos:start="903:34" pos:end="903:77">(<argument pos:start="903:35" pos:end="903:71"><expr pos:start="903:35" pos:end="903:71"><call pos:start="903:35" pos:end="903:71"><name pos:start="903:35" pos:end="903:42">offsetof</name><argument_list pos:start="903:43" pos:end="903:71">(<argument pos:start="903:44" pos:end="903:54"><expr pos:start="903:44" pos:end="903:54"><name pos:start="903:44" pos:end="903:54">CPUX86State</name></expr></argument>,<argument pos:start="903:56" pos:end="903:70"><expr pos:start="903:56" pos:end="903:70"><name pos:start="903:56" pos:end="903:66"><name pos:start="903:56" pos:end="903:61">fpregs</name><index pos:start="903:62" pos:end="903:66">[<expr pos:start="903:63" pos:end="903:65"><name pos:start="903:63" pos:end="903:65">reg</name></expr>]</index></name><operator pos:start="903:67" pos:end="903:67">.</operator><name pos:start="903:68" pos:end="903:70">mmx</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="903:74" pos:end="903:76"><expr pos:start="903:74" pos:end="903:76"><name pos:start="903:74" pos:end="903:76">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="907:13" pos:end="907:18">break;</break>

        <case pos:start="909:9" pos:end="909:18">case <expr pos:start="909:14" pos:end="909:17"><literal type="number" pos:start="909:14" pos:end="909:17">0xc5</literal></expr>:</case> <comment type="block" pos:start="909:20" pos:end="909:31">/* pextrw */</comment>

        <case pos:start="911:9" pos:end="911:19">case <expr pos:start="911:14" pos:end="911:18"><literal type="number" pos:start="911:14" pos:end="911:18">0x1c5</literal></expr>:</case>

            <if_stmt pos:start="913:13" pos:end="915:32"><if pos:start="913:13" pos:end="915:32">if <condition pos:start="913:16" pos:end="913:25">(<expr pos:start="913:17" pos:end="913:24"><name pos:start="913:17" pos:end="913:19">mod</name> <operator pos:start="913:21" pos:end="913:22">!=</operator> <literal type="number" pos:start="913:24" pos:end="913:24">3</literal></expr>)</condition><block type="pseudo" pos:start="915:17" pos:end="915:32"><block_content pos:start="915:17" pos:end="915:32">

                <goto pos:start="915:17" pos:end="915:32">goto <name pos:start="915:22" pos:end="915:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="917:13" pos:end="917:37"><expr pos:start="917:13" pos:end="917:36"><name pos:start="917:13" pos:end="917:15">val</name> <operator pos:start="917:17" pos:end="917:17">=</operator> <call pos:start="917:19" pos:end="917:36"><name pos:start="917:19" pos:end="917:27">ldub_code</name><argument_list pos:start="917:28" pos:end="917:36">(<argument pos:start="917:29" pos:end="917:35"><expr pos:start="917:29" pos:end="917:35"><name pos:start="917:29" pos:end="917:33"><name pos:start="917:29" pos:end="917:29">s</name><operator pos:start="917:30" pos:end="917:31">-&gt;</operator><name pos:start="917:32" pos:end="917:33">pc</name></name><operator pos:start="917:34" pos:end="917:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="919:13" pos:end="935:13"><if pos:start="919:13" pos:end="927:13">if <condition pos:start="919:16" pos:end="919:19">(<expr pos:start="919:17" pos:end="919:18"><name pos:start="919:17" pos:end="919:18">b1</name></expr>)</condition> <block pos:start="919:21" pos:end="927:13">{<block_content pos:start="921:17" pos:end="925:75">

                <expr_stmt pos:start="921:17" pos:end="921:25"><expr pos:start="921:17" pos:end="921:24"><name pos:start="921:17" pos:end="921:19">val</name> <operator pos:start="921:21" pos:end="921:22">&amp;=</operator> <literal type="number" pos:start="921:24" pos:end="921:24">7</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="923:17" pos:end="923:44"><expr pos:start="923:17" pos:end="923:43"><name pos:start="923:17" pos:end="923:18">rm</name> <operator pos:start="923:20" pos:end="923:20">=</operator> <operator pos:start="923:22" pos:end="923:22">(</operator><name pos:start="923:23" pos:end="923:27">modrm</name> <operator pos:start="923:29" pos:end="923:29">&amp;</operator> <literal type="number" pos:start="923:31" pos:end="923:31">7</literal><operator pos:start="923:32" pos:end="923:32">)</operator> <operator pos:start="923:34" pos:end="923:34">|</operator> <call pos:start="923:36" pos:end="923:43"><name pos:start="923:36" pos:end="923:40">REX_B</name><argument_list pos:start="923:41" pos:end="923:43">(<argument pos:start="923:42" pos:end="923:42"><expr pos:start="923:42" pos:end="923:42"><name pos:start="923:42" pos:end="923:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="925:17" pos:end="925:75"><expr pos:start="925:17" pos:end="925:74"><call pos:start="925:17" pos:end="925:74"><name pos:start="925:17" pos:end="925:33">gen_op_pextrw_xmm</name><argument_list pos:start="925:34" pos:end="925:74">(<argument pos:start="925:35" pos:end="925:68"><expr pos:start="925:35" pos:end="925:68"><call pos:start="925:35" pos:end="925:68"><name pos:start="925:35" pos:end="925:42">offsetof</name><argument_list pos:start="925:43" pos:end="925:68">(<argument pos:start="925:44" pos:end="925:54"><expr pos:start="925:44" pos:end="925:54"><name pos:start="925:44" pos:end="925:54">CPUX86State</name></expr></argument>,<argument pos:start="925:56" pos:end="925:67"><expr pos:start="925:56" pos:end="925:67"><name pos:start="925:56" pos:end="925:67"><name pos:start="925:56" pos:end="925:63">xmm_regs</name><index pos:start="925:64" pos:end="925:67">[<expr pos:start="925:65" pos:end="925:66"><name pos:start="925:65" pos:end="925:66">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="925:71" pos:end="925:73"><expr pos:start="925:71" pos:end="925:73"><name pos:start="925:71" pos:end="925:73">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="927:15" pos:end="935:13">else <block pos:start="927:20" pos:end="935:13">{<block_content pos:start="929:17" pos:end="933:77">

                <expr_stmt pos:start="929:17" pos:end="929:25"><expr pos:start="929:17" pos:end="929:24"><name pos:start="929:17" pos:end="929:19">val</name> <operator pos:start="929:21" pos:end="929:22">&amp;=</operator> <literal type="number" pos:start="929:24" pos:end="929:24">3</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="931:17" pos:end="931:33"><expr pos:start="931:17" pos:end="931:32"><name pos:start="931:17" pos:end="931:18">rm</name> <operator pos:start="931:20" pos:end="931:20">=</operator> <operator pos:start="931:22" pos:end="931:22">(</operator><name pos:start="931:23" pos:end="931:27">modrm</name> <operator pos:start="931:29" pos:end="931:29">&amp;</operator> <literal type="number" pos:start="931:31" pos:end="931:31">7</literal><operator pos:start="931:32" pos:end="931:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="933:17" pos:end="933:77"><expr pos:start="933:17" pos:end="933:76"><call pos:start="933:17" pos:end="933:76"><name pos:start="933:17" pos:end="933:33">gen_op_pextrw_mmx</name><argument_list pos:start="933:34" pos:end="933:76">(<argument pos:start="933:35" pos:end="933:70"><expr pos:start="933:35" pos:end="933:70"><call pos:start="933:35" pos:end="933:70"><name pos:start="933:35" pos:end="933:42">offsetof</name><argument_list pos:start="933:43" pos:end="933:70">(<argument pos:start="933:44" pos:end="933:54"><expr pos:start="933:44" pos:end="933:54"><name pos:start="933:44" pos:end="933:54">CPUX86State</name></expr></argument>,<argument pos:start="933:56" pos:end="933:69"><expr pos:start="933:56" pos:end="933:69"><name pos:start="933:56" pos:end="933:65"><name pos:start="933:56" pos:end="933:61">fpregs</name><index pos:start="933:62" pos:end="933:65">[<expr pos:start="933:63" pos:end="933:64"><name pos:start="933:63" pos:end="933:64">rm</name></expr>]</index></name><operator pos:start="933:66" pos:end="933:66">.</operator><name pos:start="933:67" pos:end="933:69">mmx</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="933:73" pos:end="933:75"><expr pos:start="933:73" pos:end="933:75"><name pos:start="933:73" pos:end="933:75">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="937:13" pos:end="937:45"><expr pos:start="937:13" pos:end="937:44"><name pos:start="937:13" pos:end="937:15">reg</name> <operator pos:start="937:17" pos:end="937:17">=</operator> <operator pos:start="937:19" pos:end="937:19">(</operator><operator pos:start="937:20" pos:end="937:20">(</operator><name pos:start="937:21" pos:end="937:25">modrm</name> <operator pos:start="937:27" pos:end="937:28">&gt;&gt;</operator> <literal type="number" pos:start="937:30" pos:end="937:30">3</literal><operator pos:start="937:31" pos:end="937:31">)</operator> <operator pos:start="937:33" pos:end="937:33">&amp;</operator> <literal type="number" pos:start="937:35" pos:end="937:35">7</literal><operator pos:start="937:36" pos:end="937:36">)</operator> <operator pos:start="937:38" pos:end="937:38">|</operator> <name pos:start="937:40" pos:end="937:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="939:13" pos:end="939:44"><expr pos:start="939:13" pos:end="939:43"><call pos:start="939:13" pos:end="939:43"><name pos:start="939:13" pos:end="939:29">gen_op_mov_reg_T0</name><argument_list pos:start="939:30" pos:end="939:43">(<argument pos:start="939:31" pos:end="939:37"><expr pos:start="939:31" pos:end="939:37"><name pos:start="939:31" pos:end="939:37">OT_LONG</name></expr></argument>, <argument pos:start="939:40" pos:end="939:42"><expr pos:start="939:40" pos:end="939:42"><name pos:start="939:40" pos:end="939:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="941:13" pos:end="941:18">break;</break>

        <case pos:start="943:9" pos:end="943:19">case <expr pos:start="943:14" pos:end="943:18"><literal type="number" pos:start="943:14" pos:end="943:18">0x1d6</literal></expr>:</case> <comment type="block" pos:start="943:21" pos:end="943:38">/* movq ea, xmm */</comment>

            <if_stmt pos:start="945:13" pos:end="961:13"><if pos:start="945:13" pos:end="951:13">if <condition pos:start="945:16" pos:end="945:25">(<expr pos:start="945:17" pos:end="945:24"><name pos:start="945:17" pos:end="945:19">mod</name> <operator pos:start="945:21" pos:end="945:22">!=</operator> <literal type="number" pos:start="945:24" pos:end="945:24">3</literal></expr>)</condition> <block pos:start="945:27" pos:end="951:13">{<block_content pos:start="947:17" pos:end="949:96">

                <expr_stmt pos:start="947:17" pos:end="947:65"><expr pos:start="947:17" pos:end="947:64"><call pos:start="947:17" pos:end="947:64"><name pos:start="947:17" pos:end="947:29">gen_lea_modrm</name><argument_list pos:start="947:30" pos:end="947:64">(<argument pos:start="947:31" pos:end="947:31"><expr pos:start="947:31" pos:end="947:31"><name pos:start="947:31" pos:end="947:31">s</name></expr></argument>, <argument pos:start="947:34" pos:end="947:38"><expr pos:start="947:34" pos:end="947:38"><name pos:start="947:34" pos:end="947:38">modrm</name></expr></argument>, <argument pos:start="947:41" pos:end="947:49"><expr pos:start="947:41" pos:end="947:49"><operator pos:start="947:41" pos:end="947:41">&amp;</operator><name pos:start="947:42" pos:end="947:49">reg_addr</name></expr></argument>, <argument pos:start="947:52" pos:end="947:63"><expr pos:start="947:52" pos:end="947:63"><operator pos:start="947:52" pos:end="947:52">&amp;</operator><name pos:start="947:53" pos:end="947:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="949:17" pos:end="949:96"><expr pos:start="949:17" pos:end="949:95"><name pos:start="949:17" pos:end="949:49"><name pos:start="949:17" pos:end="949:30">gen_stq_env_A0</name><index pos:start="949:31" pos:end="949:49">[<expr pos:start="949:32" pos:end="949:48"><name pos:start="949:32" pos:end="949:43"><name pos:start="949:32" pos:end="949:32">s</name><operator pos:start="949:33" pos:end="949:34">-&gt;</operator><name pos:start="949:35" pos:end="949:43">mem_index</name></name> <operator pos:start="949:45" pos:end="949:46">&gt;&gt;</operator> <literal type="number" pos:start="949:48" pos:end="949:48">2</literal></expr>]</index></name><operator pos:start="949:50" pos:end="949:50">(</operator><call pos:start="949:51" pos:end="949:94"><name pos:start="949:51" pos:end="949:58">offsetof</name><argument_list pos:start="949:59" pos:end="949:94">(<argument pos:start="949:60" pos:end="949:70"><expr pos:start="949:60" pos:end="949:70"><name pos:start="949:60" pos:end="949:70">CPUX86State</name></expr></argument>,<argument pos:start="949:72" pos:end="949:93"><expr pos:start="949:72" pos:end="949:93"><name pos:start="949:72" pos:end="949:84"><name pos:start="949:72" pos:end="949:79">xmm_regs</name><index pos:start="949:80" pos:end="949:84">[<expr pos:start="949:81" pos:end="949:83"><name pos:start="949:81" pos:end="949:83">reg</name></expr>]</index></name><operator pos:start="949:85" pos:end="949:85">.</operator><call pos:start="949:86" pos:end="949:93"><name pos:start="949:86" pos:end="949:90">XMM_Q</name><argument_list pos:start="949:91" pos:end="949:93">(<argument pos:start="949:92" pos:end="949:92"><expr pos:start="949:92" pos:end="949:92"><literal type="number" pos:start="949:92" pos:end="949:92">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="949:95" pos:end="949:95">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="951:15" pos:end="961:13">else <block pos:start="951:20" pos:end="961:13">{<block_content pos:start="953:17" pos:end="959:79">

                <expr_stmt pos:start="953:17" pos:end="953:44"><expr pos:start="953:17" pos:end="953:43"><name pos:start="953:17" pos:end="953:18">rm</name> <operator pos:start="953:20" pos:end="953:20">=</operator> <operator pos:start="953:22" pos:end="953:22">(</operator><name pos:start="953:23" pos:end="953:27">modrm</name> <operator pos:start="953:29" pos:end="953:29">&amp;</operator> <literal type="number" pos:start="953:31" pos:end="953:31">7</literal><operator pos:start="953:32" pos:end="953:32">)</operator> <operator pos:start="953:34" pos:end="953:34">|</operator> <call pos:start="953:36" pos:end="953:43"><name pos:start="953:36" pos:end="953:40">REX_B</name><argument_list pos:start="953:41" pos:end="953:43">(<argument pos:start="953:42" pos:end="953:42"><expr pos:start="953:42" pos:end="953:42"><name pos:start="953:42" pos:end="953:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="955:17" pos:end="957:74"><expr pos:start="955:17" pos:end="957:73"><call pos:start="955:17" pos:end="957:73"><name pos:start="955:17" pos:end="955:27">gen_op_movq</name><argument_list pos:start="955:28" pos:end="957:73">(<argument pos:start="955:29" pos:end="955:71"><expr pos:start="955:29" pos:end="955:71"><call pos:start="955:29" pos:end="955:71"><name pos:start="955:29" pos:end="955:36">offsetof</name><argument_list pos:start="955:37" pos:end="955:71">(<argument pos:start="955:38" pos:end="955:48"><expr pos:start="955:38" pos:end="955:48"><name pos:start="955:38" pos:end="955:48">CPUX86State</name></expr></argument>,<argument pos:start="955:50" pos:end="955:70"><expr pos:start="955:50" pos:end="955:70"><name pos:start="955:50" pos:end="955:61"><name pos:start="955:50" pos:end="955:57">xmm_regs</name><index pos:start="955:58" pos:end="955:61">[<expr pos:start="955:59" pos:end="955:60"><name pos:start="955:59" pos:end="955:60">rm</name></expr>]</index></name><operator pos:start="955:62" pos:end="955:62">.</operator><call pos:start="955:63" pos:end="955:70"><name pos:start="955:63" pos:end="955:67">XMM_Q</name><argument_list pos:start="955:68" pos:end="955:70">(<argument pos:start="955:69" pos:end="955:69"><expr pos:start="955:69" pos:end="955:69"><literal type="number" pos:start="955:69" pos:end="955:69">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                            <argument pos:start="957:29" pos:end="957:72"><expr pos:start="957:29" pos:end="957:72"><call pos:start="957:29" pos:end="957:72"><name pos:start="957:29" pos:end="957:36">offsetof</name><argument_list pos:start="957:37" pos:end="957:72">(<argument pos:start="957:38" pos:end="957:48"><expr pos:start="957:38" pos:end="957:48"><name pos:start="957:38" pos:end="957:48">CPUX86State</name></expr></argument>,<argument pos:start="957:50" pos:end="957:71"><expr pos:start="957:50" pos:end="957:71"><name pos:start="957:50" pos:end="957:62"><name pos:start="957:50" pos:end="957:57">xmm_regs</name><index pos:start="957:58" pos:end="957:62">[<expr pos:start="957:59" pos:end="957:61"><name pos:start="957:59" pos:end="957:61">reg</name></expr>]</index></name><operator pos:start="957:63" pos:end="957:63">.</operator><call pos:start="957:64" pos:end="957:71"><name pos:start="957:64" pos:end="957:68">XMM_Q</name><argument_list pos:start="957:69" pos:end="957:71">(<argument pos:start="957:70" pos:end="957:70"><expr pos:start="957:70" pos:end="957:70"><literal type="number" pos:start="957:70" pos:end="957:70">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="959:17" pos:end="959:79"><expr pos:start="959:17" pos:end="959:78"><call pos:start="959:17" pos:end="959:78"><name pos:start="959:17" pos:end="959:33">gen_op_movq_env_0</name><argument_list pos:start="959:34" pos:end="959:78">(<argument pos:start="959:35" pos:end="959:77"><expr pos:start="959:35" pos:end="959:77"><call pos:start="959:35" pos:end="959:77"><name pos:start="959:35" pos:end="959:42">offsetof</name><argument_list pos:start="959:43" pos:end="959:77">(<argument pos:start="959:44" pos:end="959:54"><expr pos:start="959:44" pos:end="959:54"><name pos:start="959:44" pos:end="959:54">CPUX86State</name></expr></argument>,<argument pos:start="959:56" pos:end="959:76"><expr pos:start="959:56" pos:end="959:76"><name pos:start="959:56" pos:end="959:67"><name pos:start="959:56" pos:end="959:63">xmm_regs</name><index pos:start="959:64" pos:end="959:67">[<expr pos:start="959:65" pos:end="959:66"><name pos:start="959:65" pos:end="959:66">rm</name></expr>]</index></name><operator pos:start="959:68" pos:end="959:68">.</operator><call pos:start="959:69" pos:end="959:76"><name pos:start="959:69" pos:end="959:73">XMM_Q</name><argument_list pos:start="959:74" pos:end="959:76">(<argument pos:start="959:75" pos:end="959:75"><expr pos:start="959:75" pos:end="959:75"><literal type="number" pos:start="959:75" pos:end="959:75">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <break pos:start="963:13" pos:end="963:18">break;</break>

        <case pos:start="965:9" pos:end="965:19">case <expr pos:start="965:14" pos:end="965:18"><literal type="number" pos:start="965:14" pos:end="965:18">0x2d6</literal></expr>:</case> <comment type="block" pos:start="965:21" pos:end="965:33">/* movq2dq */</comment>

            <expr_stmt pos:start="967:13" pos:end="967:31"><expr pos:start="967:13" pos:end="967:30"><call pos:start="967:13" pos:end="967:30"><name pos:start="967:13" pos:end="967:28">gen_op_enter_mmx</name><argument_list pos:start="967:29" pos:end="967:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="969:13" pos:end="969:29"><expr pos:start="969:13" pos:end="969:28"><name pos:start="969:13" pos:end="969:14">rm</name> <operator pos:start="969:16" pos:end="969:16">=</operator> <operator pos:start="969:18" pos:end="969:18">(</operator><name pos:start="969:19" pos:end="969:23">modrm</name> <operator pos:start="969:25" pos:end="969:25">&amp;</operator> <literal type="number" pos:start="969:27" pos:end="969:27">7</literal><operator pos:start="969:28" pos:end="969:28">)</operator></expr>;</expr_stmt>

            <expr_stmt pos:start="971:13" pos:end="973:62"><expr pos:start="971:13" pos:end="973:61"><call pos:start="971:13" pos:end="973:61"><name pos:start="971:13" pos:end="971:23">gen_op_movq</name><argument_list pos:start="971:24" pos:end="973:61">(<argument pos:start="971:25" pos:end="971:68"><expr pos:start="971:25" pos:end="971:68"><call pos:start="971:25" pos:end="971:68"><name pos:start="971:25" pos:end="971:32">offsetof</name><argument_list pos:start="971:33" pos:end="971:68">(<argument pos:start="971:34" pos:end="971:44"><expr pos:start="971:34" pos:end="971:44"><name pos:start="971:34" pos:end="971:44">CPUX86State</name></expr></argument>,<argument pos:start="971:46" pos:end="971:67"><expr pos:start="971:46" pos:end="971:67"><name pos:start="971:46" pos:end="971:58"><name pos:start="971:46" pos:end="971:53">xmm_regs</name><index pos:start="971:54" pos:end="971:58">[<expr pos:start="971:55" pos:end="971:57"><name pos:start="971:55" pos:end="971:57">reg</name></expr>]</index></name><operator pos:start="971:59" pos:end="971:59">.</operator><call pos:start="971:60" pos:end="971:67"><name pos:start="971:60" pos:end="971:64">XMM_Q</name><argument_list pos:start="971:65" pos:end="971:67">(<argument pos:start="971:66" pos:end="971:66"><expr pos:start="971:66" pos:end="971:66"><literal type="number" pos:start="971:66" pos:end="971:66">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="973:25" pos:end="973:60"><expr pos:start="973:25" pos:end="973:60"><call pos:start="973:25" pos:end="973:60"><name pos:start="973:25" pos:end="973:32">offsetof</name><argument_list pos:start="973:33" pos:end="973:60">(<argument pos:start="973:34" pos:end="973:44"><expr pos:start="973:34" pos:end="973:44"><name pos:start="973:34" pos:end="973:44">CPUX86State</name></expr></argument>,<argument pos:start="973:46" pos:end="973:59"><expr pos:start="973:46" pos:end="973:59"><name pos:start="973:46" pos:end="973:55"><name pos:start="973:46" pos:end="973:51">fpregs</name><index pos:start="973:52" pos:end="973:55">[<expr pos:start="973:53" pos:end="973:54"><name pos:start="973:53" pos:end="973:54">rm</name></expr>]</index></name><operator pos:start="973:56" pos:end="973:56">.</operator><name pos:start="973:57" pos:end="973:59">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="975:13" pos:end="975:76"><expr pos:start="975:13" pos:end="975:75"><call pos:start="975:13" pos:end="975:75"><name pos:start="975:13" pos:end="975:29">gen_op_movq_env_0</name><argument_list pos:start="975:30" pos:end="975:75">(<argument pos:start="975:31" pos:end="975:74"><expr pos:start="975:31" pos:end="975:74"><call pos:start="975:31" pos:end="975:74"><name pos:start="975:31" pos:end="975:38">offsetof</name><argument_list pos:start="975:39" pos:end="975:74">(<argument pos:start="975:40" pos:end="975:50"><expr pos:start="975:40" pos:end="975:50"><name pos:start="975:40" pos:end="975:50">CPUX86State</name></expr></argument>,<argument pos:start="975:52" pos:end="975:73"><expr pos:start="975:52" pos:end="975:73"><name pos:start="975:52" pos:end="975:64"><name pos:start="975:52" pos:end="975:59">xmm_regs</name><index pos:start="975:60" pos:end="975:64">[<expr pos:start="975:61" pos:end="975:63"><name pos:start="975:61" pos:end="975:63">reg</name></expr>]</index></name><operator pos:start="975:65" pos:end="975:65">.</operator><call pos:start="975:66" pos:end="975:73"><name pos:start="975:66" pos:end="975:70">XMM_Q</name><argument_list pos:start="975:71" pos:end="975:73">(<argument pos:start="975:72" pos:end="975:72"><expr pos:start="975:72" pos:end="975:72"><literal type="number" pos:start="975:72" pos:end="975:72">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="977:13" pos:end="977:18">break;</break>

        <case pos:start="979:9" pos:end="979:19">case <expr pos:start="979:14" pos:end="979:18"><literal type="number" pos:start="979:14" pos:end="979:18">0x3d6</literal></expr>:</case> <comment type="block" pos:start="979:21" pos:end="979:33">/* movdq2q */</comment>

            <expr_stmt pos:start="981:13" pos:end="981:31"><expr pos:start="981:13" pos:end="981:30"><call pos:start="981:13" pos:end="981:30"><name pos:start="981:13" pos:end="981:28">gen_op_enter_mmx</name><argument_list pos:start="981:29" pos:end="981:30">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="983:13" pos:end="983:40"><expr pos:start="983:13" pos:end="983:39"><name pos:start="983:13" pos:end="983:14">rm</name> <operator pos:start="983:16" pos:end="983:16">=</operator> <operator pos:start="983:18" pos:end="983:18">(</operator><name pos:start="983:19" pos:end="983:23">modrm</name> <operator pos:start="983:25" pos:end="983:25">&amp;</operator> <literal type="number" pos:start="983:27" pos:end="983:27">7</literal><operator pos:start="983:28" pos:end="983:28">)</operator> <operator pos:start="983:30" pos:end="983:30">|</operator> <call pos:start="983:32" pos:end="983:39"><name pos:start="983:32" pos:end="983:36">REX_B</name><argument_list pos:start="983:37" pos:end="983:39">(<argument pos:start="983:38" pos:end="983:38"><expr pos:start="983:38" pos:end="983:38"><name pos:start="983:38" pos:end="983:38">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="985:13" pos:end="987:69"><expr pos:start="985:13" pos:end="987:68"><call pos:start="985:13" pos:end="987:68"><name pos:start="985:13" pos:end="985:23">gen_op_movq</name><argument_list pos:start="985:24" pos:end="987:68">(<argument pos:start="985:25" pos:end="985:65"><expr pos:start="985:25" pos:end="985:65"><call pos:start="985:25" pos:end="985:65"><name pos:start="985:25" pos:end="985:32">offsetof</name><argument_list pos:start="985:33" pos:end="985:65">(<argument pos:start="985:34" pos:end="985:44"><expr pos:start="985:34" pos:end="985:44"><name pos:start="985:34" pos:end="985:44">CPUX86State</name></expr></argument>,<argument pos:start="985:46" pos:end="985:64"><expr pos:start="985:46" pos:end="985:64"><name pos:start="985:46" pos:end="985:60"><name pos:start="985:46" pos:end="985:51">fpregs</name><index pos:start="985:52" pos:end="985:60">[<expr pos:start="985:53" pos:end="985:59"><name pos:start="985:53" pos:end="985:55">reg</name> <operator pos:start="985:57" pos:end="985:57">&amp;</operator> <literal type="number" pos:start="985:59" pos:end="985:59">7</literal></expr>]</index></name><operator pos:start="985:61" pos:end="985:61">.</operator><name pos:start="985:62" pos:end="985:64">mmx</name></expr></argument>)</argument_list></call></expr></argument>,

                        <argument pos:start="987:25" pos:end="987:67"><expr pos:start="987:25" pos:end="987:67"><call pos:start="987:25" pos:end="987:67"><name pos:start="987:25" pos:end="987:32">offsetof</name><argument_list pos:start="987:33" pos:end="987:67">(<argument pos:start="987:34" pos:end="987:44"><expr pos:start="987:34" pos:end="987:44"><name pos:start="987:34" pos:end="987:44">CPUX86State</name></expr></argument>,<argument pos:start="987:46" pos:end="987:66"><expr pos:start="987:46" pos:end="987:66"><name pos:start="987:46" pos:end="987:57"><name pos:start="987:46" pos:end="987:53">xmm_regs</name><index pos:start="987:54" pos:end="987:57">[<expr pos:start="987:55" pos:end="987:56"><name pos:start="987:55" pos:end="987:56">rm</name></expr>]</index></name><operator pos:start="987:58" pos:end="987:58">.</operator><call pos:start="987:59" pos:end="987:66"><name pos:start="987:59" pos:end="987:63">XMM_Q</name><argument_list pos:start="987:64" pos:end="987:66">(<argument pos:start="987:65" pos:end="987:65"><expr pos:start="987:65" pos:end="987:65"><literal type="number" pos:start="987:65" pos:end="987:65">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="989:13" pos:end="989:18">break;</break>

        <case pos:start="991:9" pos:end="991:18">case <expr pos:start="991:14" pos:end="991:17"><literal type="number" pos:start="991:14" pos:end="991:17">0xd7</literal></expr>:</case> <comment type="block" pos:start="991:20" pos:end="991:33">/* pmovmskb */</comment>

        <case pos:start="993:9" pos:end="993:19">case <expr pos:start="993:14" pos:end="993:18"><literal type="number" pos:start="993:14" pos:end="993:18">0x1d7</literal></expr>:</case>

            <if_stmt pos:start="995:13" pos:end="997:32"><if pos:start="995:13" pos:end="997:32">if <condition pos:start="995:16" pos:end="995:25">(<expr pos:start="995:17" pos:end="995:24"><name pos:start="995:17" pos:end="995:19">mod</name> <operator pos:start="995:21" pos:end="995:22">!=</operator> <literal type="number" pos:start="995:24" pos:end="995:24">3</literal></expr>)</condition><block type="pseudo" pos:start="997:17" pos:end="997:32"><block_content pos:start="997:17" pos:end="997:32">

                <goto pos:start="997:17" pos:end="997:32">goto <name pos:start="997:22" pos:end="997:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <if_stmt pos:start="999:13" pos:end="1011:13"><if pos:start="999:13" pos:end="1005:13">if <condition pos:start="999:16" pos:end="999:19">(<expr pos:start="999:17" pos:end="999:18"><name pos:start="999:17" pos:end="999:18">b1</name></expr>)</condition> <block pos:start="999:21" pos:end="1005:13">{<block_content pos:start="1001:17" pos:end="1003:72">

                <expr_stmt pos:start="1001:17" pos:end="1001:44"><expr pos:start="1001:17" pos:end="1001:43"><name pos:start="1001:17" pos:end="1001:18">rm</name> <operator pos:start="1001:20" pos:end="1001:20">=</operator> <operator pos:start="1001:22" pos:end="1001:22">(</operator><name pos:start="1001:23" pos:end="1001:27">modrm</name> <operator pos:start="1001:29" pos:end="1001:29">&amp;</operator> <literal type="number" pos:start="1001:31" pos:end="1001:31">7</literal><operator pos:start="1001:32" pos:end="1001:32">)</operator> <operator pos:start="1001:34" pos:end="1001:34">|</operator> <call pos:start="1001:36" pos:end="1001:43"><name pos:start="1001:36" pos:end="1001:40">REX_B</name><argument_list pos:start="1001:41" pos:end="1001:43">(<argument pos:start="1001:42" pos:end="1001:42"><expr pos:start="1001:42" pos:end="1001:42"><name pos:start="1001:42" pos:end="1001:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1003:17" pos:end="1003:72"><expr pos:start="1003:17" pos:end="1003:71"><call pos:start="1003:17" pos:end="1003:71"><name pos:start="1003:17" pos:end="1003:35">gen_op_pmovmskb_xmm</name><argument_list pos:start="1003:36" pos:end="1003:71">(<argument pos:start="1003:37" pos:end="1003:70"><expr pos:start="1003:37" pos:end="1003:70"><call pos:start="1003:37" pos:end="1003:70"><name pos:start="1003:37" pos:end="1003:44">offsetof</name><argument_list pos:start="1003:45" pos:end="1003:70">(<argument pos:start="1003:46" pos:end="1003:56"><expr pos:start="1003:46" pos:end="1003:56"><name pos:start="1003:46" pos:end="1003:56">CPUX86State</name></expr></argument>,<argument pos:start="1003:58" pos:end="1003:69"><expr pos:start="1003:58" pos:end="1003:69"><name pos:start="1003:58" pos:end="1003:69"><name pos:start="1003:58" pos:end="1003:65">xmm_regs</name><index pos:start="1003:66" pos:end="1003:69">[<expr pos:start="1003:67" pos:end="1003:68"><name pos:start="1003:67" pos:end="1003:68">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1005:15" pos:end="1011:13">else <block pos:start="1005:20" pos:end="1011:13">{<block_content pos:start="1007:17" pos:end="1009:74">

                <expr_stmt pos:start="1007:17" pos:end="1007:33"><expr pos:start="1007:17" pos:end="1007:32"><name pos:start="1007:17" pos:end="1007:18">rm</name> <operator pos:start="1007:20" pos:end="1007:20">=</operator> <operator pos:start="1007:22" pos:end="1007:22">(</operator><name pos:start="1007:23" pos:end="1007:27">modrm</name> <operator pos:start="1007:29" pos:end="1007:29">&amp;</operator> <literal type="number" pos:start="1007:31" pos:end="1007:31">7</literal><operator pos:start="1007:32" pos:end="1007:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1009:17" pos:end="1009:74"><expr pos:start="1009:17" pos:end="1009:73"><call pos:start="1009:17" pos:end="1009:73"><name pos:start="1009:17" pos:end="1009:35">gen_op_pmovmskb_mmx</name><argument_list pos:start="1009:36" pos:end="1009:73">(<argument pos:start="1009:37" pos:end="1009:72"><expr pos:start="1009:37" pos:end="1009:72"><call pos:start="1009:37" pos:end="1009:72"><name pos:start="1009:37" pos:end="1009:44">offsetof</name><argument_list pos:start="1009:45" pos:end="1009:72">(<argument pos:start="1009:46" pos:end="1009:56"><expr pos:start="1009:46" pos:end="1009:56"><name pos:start="1009:46" pos:end="1009:56">CPUX86State</name></expr></argument>,<argument pos:start="1009:58" pos:end="1009:71"><expr pos:start="1009:58" pos:end="1009:71"><name pos:start="1009:58" pos:end="1009:67"><name pos:start="1009:58" pos:end="1009:63">fpregs</name><index pos:start="1009:64" pos:end="1009:67">[<expr pos:start="1009:65" pos:end="1009:66"><name pos:start="1009:65" pos:end="1009:66">rm</name></expr>]</index></name><operator pos:start="1009:68" pos:end="1009:68">.</operator><name pos:start="1009:69" pos:end="1009:71">mmx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1013:13" pos:end="1013:45"><expr pos:start="1013:13" pos:end="1013:44"><name pos:start="1013:13" pos:end="1013:15">reg</name> <operator pos:start="1013:17" pos:end="1013:17">=</operator> <operator pos:start="1013:19" pos:end="1013:19">(</operator><operator pos:start="1013:20" pos:end="1013:20">(</operator><name pos:start="1013:21" pos:end="1013:25">modrm</name> <operator pos:start="1013:27" pos:end="1013:28">&gt;&gt;</operator> <literal type="number" pos:start="1013:30" pos:end="1013:30">3</literal><operator pos:start="1013:31" pos:end="1013:31">)</operator> <operator pos:start="1013:33" pos:end="1013:33">&amp;</operator> <literal type="number" pos:start="1013:35" pos:end="1013:35">7</literal><operator pos:start="1013:36" pos:end="1013:36">)</operator> <operator pos:start="1013:38" pos:end="1013:38">|</operator> <name pos:start="1013:40" pos:end="1013:44">rex_r</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1015:13" pos:end="1015:44"><expr pos:start="1015:13" pos:end="1015:43"><call pos:start="1015:13" pos:end="1015:43"><name pos:start="1015:13" pos:end="1015:29">gen_op_mov_reg_T0</name><argument_list pos:start="1015:30" pos:end="1015:43">(<argument pos:start="1015:31" pos:end="1015:37"><expr pos:start="1015:31" pos:end="1015:37"><name pos:start="1015:31" pos:end="1015:37">OT_LONG</name></expr></argument>, <argument pos:start="1015:40" pos:end="1015:42"><expr pos:start="1015:40" pos:end="1015:42"><name pos:start="1015:40" pos:end="1015:42">reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1017:13" pos:end="1017:18">break;</break>

        <default pos:start="1019:9" pos:end="1019:16">default:</default>

            <goto pos:start="1021:13" pos:end="1021:28">goto <name pos:start="1021:18" pos:end="1021:27">illegal_op</name>;</goto>

        </block_content>}</block></switch>

    </block_content>}</block></if> <else pos:start="1025:7" pos:end="1205:5">else <block pos:start="1025:12" pos:end="1205:5">{<block_content pos:start="1029:9" pos:end="1203:9">

        <comment type="block" pos:start="1027:9" pos:end="1027:42">/* generic MMX or SSE operation */</comment>

        <switch pos:start="1029:9" pos:end="1077:9">switch<condition pos:start="1029:15" pos:end="1029:17">(<expr pos:start="1029:16" pos:end="1029:16"><name pos:start="1029:16" pos:end="1029:16">b</name></expr>)</condition> <block pos:start="1029:19" pos:end="1077:9">{<block_content pos:start="1031:9" pos:end="1075:18">

        <case pos:start="1031:9" pos:end="1031:18">case <expr pos:start="1031:14" pos:end="1031:17"><literal type="number" pos:start="1031:14" pos:end="1031:17">0xf7</literal></expr>:</case>

            <comment type="block" pos:start="1033:13" pos:end="1033:46">/* maskmov : we must prepare A0 */</comment>

            <if_stmt pos:start="1035:13" pos:end="1040:0"><if pos:start="1035:13" pos:end="1040:0">if <condition pos:start="1035:16" pos:end="1035:25">(<expr pos:start="1035:17" pos:end="1035:24"><name pos:start="1035:17" pos:end="1035:19">mod</name> <operator pos:start="1035:21" pos:end="1035:22">!=</operator> <literal type="number" pos:start="1035:24" pos:end="1035:24">3</literal></expr>)</condition><block type="pseudo" pos:start="1037:17" pos:end="1040:0"><block_content pos:start="1037:17" pos:end="1040:0">

                <goto pos:start="1037:17" pos:end="1040:0">goto <name pos:start="1037:22" pos:end="1037:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

<cpp:ifdef pos:start="1039:1" pos:end="1039:20">#<cpp:directive pos:start="1039:2" pos:end="1039:6">ifdef</cpp:directive> <name pos:start="1039:8" pos:end="1039:20">TARGET_X86_64</name></cpp:ifdef>

            <if_stmt pos:start="1041:13" pos:end="1057:13"><if pos:start="1041:13" pos:end="1045:13">if <condition pos:start="1041:16" pos:end="1041:30">(<expr pos:start="1041:17" pos:end="1041:29"><name pos:start="1041:17" pos:end="1041:24"><name pos:start="1041:17" pos:end="1041:17">s</name><operator pos:start="1041:18" pos:end="1041:19">-&gt;</operator><name pos:start="1041:20" pos:end="1041:24">aflag</name></name> <operator pos:start="1041:26" pos:end="1041:27">==</operator> <literal type="number" pos:start="1041:29" pos:end="1041:29">2</literal></expr>)</condition> <block pos:start="1041:32" pos:end="1045:13">{<block_content pos:start="1043:17" pos:end="1043:42">

                <expr_stmt pos:start="1043:17" pos:end="1043:42"><expr pos:start="1043:17" pos:end="1043:41"><call pos:start="1043:17" pos:end="1043:41"><name pos:start="1043:17" pos:end="1043:34">gen_op_movq_A0_reg</name><argument_list pos:start="1043:35" pos:end="1043:41">(<argument pos:start="1043:36" pos:end="1043:40"><expr pos:start="1043:36" pos:end="1043:40"><name pos:start="1043:36" pos:end="1043:40">R_EDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1045:15" pos:end="1057:13">else

<cpp:endif pos:start="1047:1" pos:end="1047:6">#<cpp:directive pos:start="1047:2" pos:end="1047:6">endif</cpp:directive></cpp:endif>

            <block pos:start="1049:13" pos:end="1057:13">{<block_content pos:start="1051:17" pos:end="1055:42">

                <expr_stmt pos:start="1051:17" pos:end="1051:42"><expr pos:start="1051:17" pos:end="1051:41"><call pos:start="1051:17" pos:end="1051:41"><name pos:start="1051:17" pos:end="1051:34">gen_op_movl_A0_reg</name><argument_list pos:start="1051:35" pos:end="1051:41">(<argument pos:start="1051:36" pos:end="1051:40"><expr pos:start="1051:36" pos:end="1051:40"><name pos:start="1051:36" pos:end="1051:40">R_EDI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1053:17" pos:end="1055:42"><if pos:start="1053:17" pos:end="1055:42">if <condition pos:start="1053:20" pos:end="1053:34">(<expr pos:start="1053:21" pos:end="1053:33"><name pos:start="1053:21" pos:end="1053:28"><name pos:start="1053:21" pos:end="1053:21">s</name><operator pos:start="1053:22" pos:end="1053:23">-&gt;</operator><name pos:start="1053:24" pos:end="1053:28">aflag</name></name> <operator pos:start="1053:30" pos:end="1053:31">==</operator> <literal type="number" pos:start="1053:33" pos:end="1053:33">0</literal></expr>)</condition><block type="pseudo" pos:start="1055:21" pos:end="1055:42"><block_content pos:start="1055:21" pos:end="1055:42">

                    <expr_stmt pos:start="1055:21" pos:end="1055:42"><expr pos:start="1055:21" pos:end="1055:41"><call pos:start="1055:21" pos:end="1055:41"><name pos:start="1055:21" pos:end="1055:39">gen_op_andl_A0_ffff</name><argument_list pos:start="1055:40" pos:end="1055:41">()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            </block_content>}</block></else></if_stmt>

            <expr_stmt pos:start="1059:13" pos:end="1059:33"><expr pos:start="1059:13" pos:end="1059:32"><call pos:start="1059:13" pos:end="1059:32"><name pos:start="1059:13" pos:end="1059:29">gen_add_A0_ds_seg</name><argument_list pos:start="1059:30" pos:end="1059:32">(<argument pos:start="1059:31" pos:end="1059:31"><expr pos:start="1059:31" pos:end="1059:31"><name pos:start="1059:31" pos:end="1059:31">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1061:13" pos:end="1061:18">break;</break>

        <case pos:start="1063:9" pos:end="1063:18">case <expr pos:start="1063:14" pos:end="1063:17"><literal type="number" pos:start="1063:14" pos:end="1063:17">0x70</literal></expr>:</case> <comment type="block" pos:start="1063:20" pos:end="1063:36">/* pshufx insn */</comment>

        <case pos:start="1065:9" pos:end="1065:18">case <expr pos:start="1065:14" pos:end="1065:17"><literal type="number" pos:start="1065:14" pos:end="1065:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="1065:20" pos:end="1065:36">/* pshufx insn */</comment>

        <case pos:start="1067:9" pos:end="1067:18">case <expr pos:start="1067:14" pos:end="1067:17"><literal type="number" pos:start="1067:14" pos:end="1067:17">0xc2</literal></expr>:</case> <comment type="block" pos:start="1067:20" pos:end="1067:38">/* compare insns */</comment>

            <expr_stmt pos:start="1069:13" pos:end="1069:30"><expr pos:start="1069:13" pos:end="1069:29"><name pos:start="1069:13" pos:end="1069:25"><name pos:start="1069:13" pos:end="1069:13">s</name><operator pos:start="1069:14" pos:end="1069:15">-&gt;</operator><name pos:start="1069:16" pos:end="1069:25">rip_offset</name></name> <operator pos:start="1069:27" pos:end="1069:27">=</operator> <literal type="number" pos:start="1069:29" pos:end="1069:29">1</literal></expr>;</expr_stmt>

            <break pos:start="1071:13" pos:end="1071:18">break;</break>

        <default pos:start="1073:9" pos:end="1073:16">default:</default>

            <break pos:start="1075:13" pos:end="1075:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="1079:9" pos:end="1145:9"><if pos:start="1079:9" pos:end="1125:9">if <condition pos:start="1079:12" pos:end="1079:19">(<expr pos:start="1079:13" pos:end="1079:18"><name pos:start="1079:13" pos:end="1079:18">is_xmm</name></expr>)</condition> <block pos:start="1079:21" pos:end="1125:9">{<block_content pos:start="1081:13" pos:end="1123:13">

            <expr_stmt pos:start="1081:13" pos:end="1081:61"><expr pos:start="1081:13" pos:end="1081:60"><name pos:start="1081:13" pos:end="1081:22">op1_offset</name> <operator pos:start="1081:24" pos:end="1081:24">=</operator> <call pos:start="1081:26" pos:end="1081:60"><name pos:start="1081:26" pos:end="1081:33">offsetof</name><argument_list pos:start="1081:34" pos:end="1081:60">(<argument pos:start="1081:35" pos:end="1081:45"><expr pos:start="1081:35" pos:end="1081:45"><name pos:start="1081:35" pos:end="1081:45">CPUX86State</name></expr></argument>,<argument pos:start="1081:47" pos:end="1081:59"><expr pos:start="1081:47" pos:end="1081:59"><name pos:start="1081:47" pos:end="1081:59"><name pos:start="1081:47" pos:end="1081:54">xmm_regs</name><index pos:start="1081:55" pos:end="1081:59">[<expr pos:start="1081:56" pos:end="1081:58"><name pos:start="1081:56" pos:end="1081:58">reg</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1083:13" pos:end="1123:13"><if pos:start="1083:13" pos:end="1117:13">if <condition pos:start="1083:16" pos:end="1083:25">(<expr pos:start="1083:17" pos:end="1083:24"><name pos:start="1083:17" pos:end="1083:19">mod</name> <operator pos:start="1083:21" pos:end="1083:22">!=</operator> <literal type="number" pos:start="1083:24" pos:end="1083:24">3</literal></expr>)</condition> <block pos:start="1083:27" pos:end="1117:13">{<block_content pos:start="1085:17" pos:end="1115:17">

                <expr_stmt pos:start="1085:17" pos:end="1085:65"><expr pos:start="1085:17" pos:end="1085:64"><call pos:start="1085:17" pos:end="1085:64"><name pos:start="1085:17" pos:end="1085:29">gen_lea_modrm</name><argument_list pos:start="1085:30" pos:end="1085:64">(<argument pos:start="1085:31" pos:end="1085:31"><expr pos:start="1085:31" pos:end="1085:31"><name pos:start="1085:31" pos:end="1085:31">s</name></expr></argument>, <argument pos:start="1085:34" pos:end="1085:38"><expr pos:start="1085:34" pos:end="1085:38"><name pos:start="1085:34" pos:end="1085:38">modrm</name></expr></argument>, <argument pos:start="1085:41" pos:end="1085:49"><expr pos:start="1085:41" pos:end="1085:49"><operator pos:start="1085:41" pos:end="1085:41">&amp;</operator><name pos:start="1085:42" pos:end="1085:49">reg_addr</name></expr></argument>, <argument pos:start="1085:52" pos:end="1085:63"><expr pos:start="1085:52" pos:end="1085:63"><operator pos:start="1085:52" pos:end="1085:52">&amp;</operator><name pos:start="1085:53" pos:end="1085:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1087:17" pos:end="1087:58"><expr pos:start="1087:17" pos:end="1087:57"><name pos:start="1087:17" pos:end="1087:26">op2_offset</name> <operator pos:start="1087:28" pos:end="1087:28">=</operator> <call pos:start="1087:30" pos:end="1087:57"><name pos:start="1087:30" pos:end="1087:37">offsetof</name><argument_list pos:start="1087:38" pos:end="1087:57">(<argument pos:start="1087:39" pos:end="1087:49"><expr pos:start="1087:39" pos:end="1087:49"><name pos:start="1087:39" pos:end="1087:49">CPUX86State</name></expr></argument>,<argument pos:start="1087:51" pos:end="1087:56"><expr pos:start="1087:51" pos:end="1087:56"><name pos:start="1087:51" pos:end="1087:56">xmm_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="1089:17" pos:end="1115:17"><if pos:start="1089:17" pos:end="1111:17">if <condition pos:start="1089:20" pos:end="1091:43">(<expr pos:start="1089:21" pos:end="1091:42"><name pos:start="1089:21" pos:end="1089:22">b1</name> <operator pos:start="1089:24" pos:end="1089:25">&gt;=</operator> <literal type="number" pos:start="1089:27" pos:end="1089:27">2</literal> <operator pos:start="1089:29" pos:end="1089:30">&amp;&amp;</operator> <operator pos:start="1089:32" pos:end="1089:32">(</operator><operator pos:start="1089:33" pos:end="1089:33">(</operator><name pos:start="1089:34" pos:end="1089:34">b</name> <operator pos:start="1089:36" pos:end="1089:37">&gt;=</operator> <literal type="number" pos:start="1089:39" pos:end="1089:42">0x50</literal> <operator pos:start="1089:44" pos:end="1089:45">&amp;&amp;</operator> <name pos:start="1089:47" pos:end="1089:47">b</name> <operator pos:start="1089:49" pos:end="1089:50">&lt;=</operator> <literal type="number" pos:start="1089:52" pos:end="1089:55">0x5f</literal> <operator pos:start="1089:57" pos:end="1089:58">&amp;&amp;</operator> <name pos:start="1089:60" pos:end="1089:60">b</name> <operator pos:start="1089:62" pos:end="1089:63">!=</operator> <literal type="number" pos:start="1089:65" pos:end="1089:68">0x5b</literal><operator pos:start="1089:69" pos:end="1089:69">)</operator> <operator pos:start="1089:71" pos:end="1089:72">||</operator>

                                <name pos:start="1091:33" pos:end="1091:33">b</name> <operator pos:start="1091:35" pos:end="1091:36">==</operator> <literal type="number" pos:start="1091:38" pos:end="1091:41">0xc2</literal><operator pos:start="1091:42" pos:end="1091:42">)</operator></expr>)</condition> <block pos:start="1091:45" pos:end="1111:17">{<block_content pos:start="1095:21" pos:end="1109:21">

                    <comment type="block" pos:start="1093:21" pos:end="1093:67">/* specific case for SSE single instructions */</comment>

                    <if_stmt pos:start="1095:21" pos:end="1109:21"><if pos:start="1095:21" pos:end="1103:21">if <condition pos:start="1095:24" pos:end="1095:32">(<expr pos:start="1095:25" pos:end="1095:31"><name pos:start="1095:25" pos:end="1095:26">b1</name> <operator pos:start="1095:28" pos:end="1095:29">==</operator> <literal type="number" pos:start="1095:31" pos:end="1095:31">2</literal></expr>)</condition> <block pos:start="1095:34" pos:end="1103:21">{<block_content pos:start="1099:25" pos:end="1101:82">

                        <comment type="block" pos:start="1097:25" pos:end="1097:43">/* 32 bit access */</comment>

                        <expr_stmt pos:start="1099:25" pos:end="1099:64"><expr pos:start="1099:25" pos:end="1099:63"><call pos:start="1099:25" pos:end="1099:63"><name pos:start="1099:25" pos:end="1099:39">gen_op_ld_T0_A0</name><argument_list pos:start="1099:40" pos:end="1099:63">(<argument pos:start="1099:41" pos:end="1099:62"><expr pos:start="1099:41" pos:end="1099:62"><name pos:start="1099:41" pos:end="1099:47">OT_LONG</name> <operator pos:start="1099:49" pos:end="1099:49">+</operator> <name pos:start="1099:51" pos:end="1099:62"><name pos:start="1099:51" pos:end="1099:51">s</name><operator pos:start="1099:52" pos:end="1099:53">-&gt;</operator><name pos:start="1099:54" pos:end="1099:62">mem_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="1101:25" pos:end="1101:82"><expr pos:start="1101:25" pos:end="1101:81"><call pos:start="1101:25" pos:end="1101:81"><name pos:start="1101:25" pos:end="1101:42">gen_op_movl_env_T0</name><argument_list pos:start="1101:43" pos:end="1101:81">(<argument pos:start="1101:44" pos:end="1101:80"><expr pos:start="1101:44" pos:end="1101:80"><call pos:start="1101:44" pos:end="1101:80"><name pos:start="1101:44" pos:end="1101:51">offsetof</name><argument_list pos:start="1101:52" pos:end="1101:80">(<argument pos:start="1101:53" pos:end="1101:63"><expr pos:start="1101:53" pos:end="1101:63"><name pos:start="1101:53" pos:end="1101:63">CPUX86State</name></expr></argument>,<argument pos:start="1101:65" pos:end="1101:79"><expr pos:start="1101:65" pos:end="1101:79"><call pos:start="1101:65" pos:end="1101:79"><name pos:start="1101:65" pos:end="1101:76"><name pos:start="1101:65" pos:end="1101:70">xmm_t0</name><operator pos:start="1101:71" pos:end="1101:71">.</operator><name pos:start="1101:72" pos:end="1101:76">XMM_L</name></name><argument_list pos:start="1101:77" pos:end="1101:79">(<argument pos:start="1101:78" pos:end="1101:78"><expr pos:start="1101:78" pos:end="1101:78"><literal type="number" pos:start="1101:78" pos:end="1101:78">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if> <else pos:start="1103:23" pos:end="1109:21">else <block pos:start="1103:28" pos:end="1109:21">{<block_content pos:start="1107:25" pos:end="1107:97">

                        <comment type="block" pos:start="1105:25" pos:end="1105:43">/* 64 bit access */</comment>

                        <expr_stmt pos:start="1107:25" pos:end="1107:97"><expr pos:start="1107:25" pos:end="1107:96"><name pos:start="1107:25" pos:end="1107:57"><name pos:start="1107:25" pos:end="1107:38">gen_ldq_env_A0</name><index pos:start="1107:39" pos:end="1107:57">[<expr pos:start="1107:40" pos:end="1107:56"><name pos:start="1107:40" pos:end="1107:51"><name pos:start="1107:40" pos:end="1107:40">s</name><operator pos:start="1107:41" pos:end="1107:42">-&gt;</operator><name pos:start="1107:43" pos:end="1107:51">mem_index</name></name> <operator pos:start="1107:53" pos:end="1107:54">&gt;&gt;</operator> <literal type="number" pos:start="1107:56" pos:end="1107:56">2</literal></expr>]</index></name><operator pos:start="1107:58" pos:end="1107:58">(</operator><call pos:start="1107:59" pos:end="1107:95"><name pos:start="1107:59" pos:end="1107:66">offsetof</name><argument_list pos:start="1107:67" pos:end="1107:95">(<argument pos:start="1107:68" pos:end="1107:78"><expr pos:start="1107:68" pos:end="1107:78"><name pos:start="1107:68" pos:end="1107:78">CPUX86State</name></expr></argument>,<argument pos:start="1107:80" pos:end="1107:94"><expr pos:start="1107:80" pos:end="1107:94"><call pos:start="1107:80" pos:end="1107:94"><name pos:start="1107:80" pos:end="1107:91"><name pos:start="1107:80" pos:end="1107:85">xmm_t0</name><operator pos:start="1107:86" pos:end="1107:86">.</operator><name pos:start="1107:87" pos:end="1107:91">XMM_D</name></name><argument_list pos:start="1107:92" pos:end="1107:94">(<argument pos:start="1107:93" pos:end="1107:93"><expr pos:start="1107:93" pos:end="1107:93"><literal type="number" pos:start="1107:93" pos:end="1107:93">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator pos:start="1107:96" pos:end="1107:96">)</operator></expr>;</expr_stmt>

                    </block_content>}</block></else></if_stmt>

                </block_content>}</block></if> <else pos:start="1111:19" pos:end="1115:17">else <block pos:start="1111:24" pos:end="1115:17">{<block_content pos:start="1113:21" pos:end="1113:66">

                    <expr_stmt pos:start="1113:21" pos:end="1113:66"><expr pos:start="1113:21" pos:end="1113:65"><name pos:start="1113:21" pos:end="1113:53"><name pos:start="1113:21" pos:end="1113:34">gen_ldo_env_A0</name><index pos:start="1113:35" pos:end="1113:53">[<expr pos:start="1113:36" pos:end="1113:52"><name pos:start="1113:36" pos:end="1113:47"><name pos:start="1113:36" pos:end="1113:36">s</name><operator pos:start="1113:37" pos:end="1113:38">-&gt;</operator><name pos:start="1113:39" pos:end="1113:47">mem_index</name></name> <operator pos:start="1113:49" pos:end="1113:50">&gt;&gt;</operator> <literal type="number" pos:start="1113:52" pos:end="1113:52">2</literal></expr>]</index></name><operator pos:start="1113:54" pos:end="1113:54">(</operator><name pos:start="1113:55" pos:end="1113:64">op2_offset</name><operator pos:start="1113:65" pos:end="1113:65">)</operator></expr>;</expr_stmt>

                </block_content>}</block></else></if_stmt>

            </block_content>}</block></if> <else pos:start="1117:15" pos:end="1123:13">else <block pos:start="1117:20" pos:end="1123:13">{<block_content pos:start="1119:17" pos:end="1121:64">

                <expr_stmt pos:start="1119:17" pos:end="1119:44"><expr pos:start="1119:17" pos:end="1119:43"><name pos:start="1119:17" pos:end="1119:18">rm</name> <operator pos:start="1119:20" pos:end="1119:20">=</operator> <operator pos:start="1119:22" pos:end="1119:22">(</operator><name pos:start="1119:23" pos:end="1119:27">modrm</name> <operator pos:start="1119:29" pos:end="1119:29">&amp;</operator> <literal type="number" pos:start="1119:31" pos:end="1119:31">7</literal><operator pos:start="1119:32" pos:end="1119:32">)</operator> <operator pos:start="1119:34" pos:end="1119:34">|</operator> <call pos:start="1119:36" pos:end="1119:43"><name pos:start="1119:36" pos:end="1119:40">REX_B</name><argument_list pos:start="1119:41" pos:end="1119:43">(<argument pos:start="1119:42" pos:end="1119:42"><expr pos:start="1119:42" pos:end="1119:42"><name pos:start="1119:42" pos:end="1119:42">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1121:17" pos:end="1121:64"><expr pos:start="1121:17" pos:end="1121:63"><name pos:start="1121:17" pos:end="1121:26">op2_offset</name> <operator pos:start="1121:28" pos:end="1121:28">=</operator> <call pos:start="1121:30" pos:end="1121:63"><name pos:start="1121:30" pos:end="1121:37">offsetof</name><argument_list pos:start="1121:38" pos:end="1121:63">(<argument pos:start="1121:39" pos:end="1121:49"><expr pos:start="1121:39" pos:end="1121:49"><name pos:start="1121:39" pos:end="1121:49">CPUX86State</name></expr></argument>,<argument pos:start="1121:51" pos:end="1121:62"><expr pos:start="1121:51" pos:end="1121:62"><name pos:start="1121:51" pos:end="1121:62"><name pos:start="1121:51" pos:end="1121:58">xmm_regs</name><index pos:start="1121:59" pos:end="1121:62">[<expr pos:start="1121:60" pos:end="1121:61"><name pos:start="1121:60" pos:end="1121:61">rm</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="1125:11" pos:end="1145:9">else <block pos:start="1125:16" pos:end="1145:9">{<block_content pos:start="1127:13" pos:end="1143:13">

            <expr_stmt pos:start="1127:13" pos:end="1127:63"><expr pos:start="1127:13" pos:end="1127:62"><name pos:start="1127:13" pos:end="1127:22">op1_offset</name> <operator pos:start="1127:24" pos:end="1127:24">=</operator> <call pos:start="1127:26" pos:end="1127:62"><name pos:start="1127:26" pos:end="1127:33">offsetof</name><argument_list pos:start="1127:34" pos:end="1127:62">(<argument pos:start="1127:35" pos:end="1127:45"><expr pos:start="1127:35" pos:end="1127:45"><name pos:start="1127:35" pos:end="1127:45">CPUX86State</name></expr></argument>,<argument pos:start="1127:47" pos:end="1127:61"><expr pos:start="1127:47" pos:end="1127:61"><name pos:start="1127:47" pos:end="1127:57"><name pos:start="1127:47" pos:end="1127:52">fpregs</name><index pos:start="1127:53" pos:end="1127:57">[<expr pos:start="1127:54" pos:end="1127:56"><name pos:start="1127:54" pos:end="1127:56">reg</name></expr>]</index></name><operator pos:start="1127:58" pos:end="1127:58">.</operator><name pos:start="1127:59" pos:end="1127:61">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1129:13" pos:end="1143:13"><if pos:start="1129:13" pos:end="1137:13">if <condition pos:start="1129:16" pos:end="1129:25">(<expr pos:start="1129:17" pos:end="1129:24"><name pos:start="1129:17" pos:end="1129:19">mod</name> <operator pos:start="1129:21" pos:end="1129:22">!=</operator> <literal type="number" pos:start="1129:24" pos:end="1129:24">3</literal></expr>)</condition> <block pos:start="1129:27" pos:end="1137:13">{<block_content pos:start="1131:17" pos:end="1135:62">

                <expr_stmt pos:start="1131:17" pos:end="1131:65"><expr pos:start="1131:17" pos:end="1131:64"><call pos:start="1131:17" pos:end="1131:64"><name pos:start="1131:17" pos:end="1131:29">gen_lea_modrm</name><argument_list pos:start="1131:30" pos:end="1131:64">(<argument pos:start="1131:31" pos:end="1131:31"><expr pos:start="1131:31" pos:end="1131:31"><name pos:start="1131:31" pos:end="1131:31">s</name></expr></argument>, <argument pos:start="1131:34" pos:end="1131:38"><expr pos:start="1131:34" pos:end="1131:38"><name pos:start="1131:34" pos:end="1131:38">modrm</name></expr></argument>, <argument pos:start="1131:41" pos:end="1131:49"><expr pos:start="1131:41" pos:end="1131:49"><operator pos:start="1131:41" pos:end="1131:41">&amp;</operator><name pos:start="1131:42" pos:end="1131:49">reg_addr</name></expr></argument>, <argument pos:start="1131:52" pos:end="1131:63"><expr pos:start="1131:52" pos:end="1131:63"><operator pos:start="1131:52" pos:end="1131:52">&amp;</operator><name pos:start="1131:53" pos:end="1131:63">offset_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1133:17" pos:end="1133:58"><expr pos:start="1133:17" pos:end="1133:57"><name pos:start="1133:17" pos:end="1133:26">op2_offset</name> <operator pos:start="1133:28" pos:end="1133:28">=</operator> <call pos:start="1133:30" pos:end="1133:57"><name pos:start="1133:30" pos:end="1133:37">offsetof</name><argument_list pos:start="1133:38" pos:end="1133:57">(<argument pos:start="1133:39" pos:end="1133:49"><expr pos:start="1133:39" pos:end="1133:49"><name pos:start="1133:39" pos:end="1133:49">CPUX86State</name></expr></argument>,<argument pos:start="1133:51" pos:end="1133:56"><expr pos:start="1133:51" pos:end="1133:56"><name pos:start="1133:51" pos:end="1133:56">mmx_t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="1135:17" pos:end="1135:62"><expr pos:start="1135:17" pos:end="1135:61"><name pos:start="1135:17" pos:end="1135:49"><name pos:start="1135:17" pos:end="1135:30">gen_ldq_env_A0</name><index pos:start="1135:31" pos:end="1135:49">[<expr pos:start="1135:32" pos:end="1135:48"><name pos:start="1135:32" pos:end="1135:43"><name pos:start="1135:32" pos:end="1135:32">s</name><operator pos:start="1135:33" pos:end="1135:34">-&gt;</operator><name pos:start="1135:35" pos:end="1135:43">mem_index</name></name> <operator pos:start="1135:45" pos:end="1135:46">&gt;&gt;</operator> <literal type="number" pos:start="1135:48" pos:end="1135:48">2</literal></expr>]</index></name><operator pos:start="1135:50" pos:end="1135:50">(</operator><name pos:start="1135:51" pos:end="1135:60">op2_offset</name><operator pos:start="1135:61" pos:end="1135:61">)</operator></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="1137:15" pos:end="1143:13">else <block pos:start="1137:20" pos:end="1143:13">{<block_content pos:start="1139:17" pos:end="1141:66">

                <expr_stmt pos:start="1139:17" pos:end="1139:33"><expr pos:start="1139:17" pos:end="1139:32"><name pos:start="1139:17" pos:end="1139:18">rm</name> <operator pos:start="1139:20" pos:end="1139:20">=</operator> <operator pos:start="1139:22" pos:end="1139:22">(</operator><name pos:start="1139:23" pos:end="1139:27">modrm</name> <operator pos:start="1139:29" pos:end="1139:29">&amp;</operator> <literal type="number" pos:start="1139:31" pos:end="1139:31">7</literal><operator pos:start="1139:32" pos:end="1139:32">)</operator></expr>;</expr_stmt>

                <expr_stmt pos:start="1141:17" pos:end="1141:66"><expr pos:start="1141:17" pos:end="1141:65"><name pos:start="1141:17" pos:end="1141:26">op2_offset</name> <operator pos:start="1141:28" pos:end="1141:28">=</operator> <call pos:start="1141:30" pos:end="1141:65"><name pos:start="1141:30" pos:end="1141:37">offsetof</name><argument_list pos:start="1141:38" pos:end="1141:65">(<argument pos:start="1141:39" pos:end="1141:49"><expr pos:start="1141:39" pos:end="1141:49"><name pos:start="1141:39" pos:end="1141:49">CPUX86State</name></expr></argument>,<argument pos:start="1141:51" pos:end="1141:64"><expr pos:start="1141:51" pos:end="1141:64"><name pos:start="1141:51" pos:end="1141:60"><name pos:start="1141:51" pos:end="1141:56">fpregs</name><index pos:start="1141:57" pos:end="1141:60">[<expr pos:start="1141:58" pos:end="1141:59"><name pos:start="1141:58" pos:end="1141:59">rm</name></expr>]</index></name><operator pos:start="1141:61" pos:end="1141:61">.</operator><name pos:start="1141:62" pos:end="1141:64">mmx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></else></if_stmt>

        <switch pos:start="1147:9" pos:end="1197:9">switch<condition pos:start="1147:15" pos:end="1147:17">(<expr pos:start="1147:16" pos:end="1147:16"><name pos:start="1147:16" pos:end="1147:16">b</name></expr>)</condition> <block pos:start="1147:19" pos:end="1197:9">{<block_content pos:start="1149:9" pos:end="1195:18">

        <case pos:start="1149:9" pos:end="1149:18">case <expr pos:start="1149:14" pos:end="1149:17"><literal type="number" pos:start="1149:14" pos:end="1149:17">0x0f</literal></expr>:</case> <comment type="block" pos:start="1149:20" pos:end="1149:42">/* 3DNow! data insns */</comment>

            <expr_stmt pos:start="1151:13" pos:end="1151:37"><expr pos:start="1151:13" pos:end="1151:36"><name pos:start="1151:13" pos:end="1151:15">val</name> <operator pos:start="1151:17" pos:end="1151:17">=</operator> <call pos:start="1151:19" pos:end="1151:36"><name pos:start="1151:19" pos:end="1151:27">ldub_code</name><argument_list pos:start="1151:28" pos:end="1151:36">(<argument pos:start="1151:29" pos:end="1151:35"><expr pos:start="1151:29" pos:end="1151:35"><name pos:start="1151:29" pos:end="1151:33"><name pos:start="1151:29" pos:end="1151:29">s</name><operator pos:start="1151:30" pos:end="1151:31">-&gt;</operator><name pos:start="1151:32" pos:end="1151:33">pc</name></name><operator pos:start="1151:34" pos:end="1151:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1153:13" pos:end="1153:41"><expr pos:start="1153:13" pos:end="1153:40"><name pos:start="1153:13" pos:end="1153:19">sse_op2</name> <operator pos:start="1153:21" pos:end="1153:21">=</operator> <name pos:start="1153:23" pos:end="1153:40"><name pos:start="1153:23" pos:end="1153:35">sse_op_table5</name><index pos:start="1153:36" pos:end="1153:40">[<expr pos:start="1153:37" pos:end="1153:39"><name pos:start="1153:37" pos:end="1153:39">val</name></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="1155:13" pos:end="1157:32"><if pos:start="1155:13" pos:end="1157:32">if <condition pos:start="1155:16" pos:end="1155:25">(<expr pos:start="1155:17" pos:end="1155:24"><operator pos:start="1155:17" pos:end="1155:17">!</operator><name pos:start="1155:18" pos:end="1155:24">sse_op2</name></expr>)</condition><block type="pseudo" pos:start="1157:17" pos:end="1157:32"><block_content pos:start="1157:17" pos:end="1157:32">

                <goto pos:start="1157:17" pos:end="1157:32">goto <name pos:start="1157:22" pos:end="1157:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1159:13" pos:end="1159:44"><expr pos:start="1159:13" pos:end="1159:43"><call pos:start="1159:13" pos:end="1159:43"><name pos:start="1159:13" pos:end="1159:19">sse_op2</name><argument_list pos:start="1159:20" pos:end="1159:43">(<argument pos:start="1159:21" pos:end="1159:30"><expr pos:start="1159:21" pos:end="1159:30"><name pos:start="1159:21" pos:end="1159:30">op1_offset</name></expr></argument>, <argument pos:start="1159:33" pos:end="1159:42"><expr pos:start="1159:33" pos:end="1159:42"><name pos:start="1159:33" pos:end="1159:42">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1161:13" pos:end="1161:18">break;</break>

        <case pos:start="1163:9" pos:end="1163:18">case <expr pos:start="1163:14" pos:end="1163:17"><literal type="number" pos:start="1163:14" pos:end="1163:17">0x70</literal></expr>:</case> <comment type="block" pos:start="1163:20" pos:end="1163:36">/* pshufx insn */</comment>

        <case pos:start="1165:9" pos:end="1165:18">case <expr pos:start="1165:14" pos:end="1165:17"><literal type="number" pos:start="1165:14" pos:end="1165:17">0xc6</literal></expr>:</case> <comment type="block" pos:start="1165:20" pos:end="1165:36">/* pshufx insn */</comment>

            <expr_stmt pos:start="1167:13" pos:end="1167:37"><expr pos:start="1167:13" pos:end="1167:36"><name pos:start="1167:13" pos:end="1167:15">val</name> <operator pos:start="1167:17" pos:end="1167:17">=</operator> <call pos:start="1167:19" pos:end="1167:36"><name pos:start="1167:19" pos:end="1167:27">ldub_code</name><argument_list pos:start="1167:28" pos:end="1167:36">(<argument pos:start="1167:29" pos:end="1167:35"><expr pos:start="1167:29" pos:end="1167:35"><name pos:start="1167:29" pos:end="1167:33"><name pos:start="1167:29" pos:end="1167:29">s</name><operator pos:start="1167:30" pos:end="1167:31">-&gt;</operator><name pos:start="1167:32" pos:end="1167:33">pc</name></name><operator pos:start="1167:34" pos:end="1167:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="1169:13" pos:end="1169:44"><expr pos:start="1169:13" pos:end="1169:43"><name pos:start="1169:13" pos:end="1169:19">sse_op3</name> <operator pos:start="1169:21" pos:end="1169:21">=</operator> <operator pos:start="1169:23" pos:end="1169:23">(</operator><name pos:start="1169:24" pos:end="1169:33">GenOpFunc3</name> <operator pos:start="1169:35" pos:end="1169:35">*</operator><operator pos:start="1169:36" pos:end="1169:36">)</operator><name pos:start="1169:37" pos:end="1169:43">sse_op2</name></expr>;</expr_stmt>

            <expr_stmt pos:start="1171:13" pos:end="1171:49"><expr pos:start="1171:13" pos:end="1171:48"><call pos:start="1171:13" pos:end="1171:48"><name pos:start="1171:13" pos:end="1171:19">sse_op3</name><argument_list pos:start="1171:20" pos:end="1171:48">(<argument pos:start="1171:21" pos:end="1171:30"><expr pos:start="1171:21" pos:end="1171:30"><name pos:start="1171:21" pos:end="1171:30">op1_offset</name></expr></argument>, <argument pos:start="1171:33" pos:end="1171:42"><expr pos:start="1171:33" pos:end="1171:42"><name pos:start="1171:33" pos:end="1171:42">op2_offset</name></expr></argument>, <argument pos:start="1171:45" pos:end="1171:47"><expr pos:start="1171:45" pos:end="1171:47"><name pos:start="1171:45" pos:end="1171:47">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1173:13" pos:end="1173:18">break;</break>

        <case pos:start="1175:9" pos:end="1175:18">case <expr pos:start="1175:14" pos:end="1175:17"><literal type="number" pos:start="1175:14" pos:end="1175:17">0xc2</literal></expr>:</case>

            <comment type="block" pos:start="1177:13" pos:end="1177:31">/* compare insns */</comment>

            <expr_stmt pos:start="1179:13" pos:end="1179:37"><expr pos:start="1179:13" pos:end="1179:36"><name pos:start="1179:13" pos:end="1179:15">val</name> <operator pos:start="1179:17" pos:end="1179:17">=</operator> <call pos:start="1179:19" pos:end="1179:36"><name pos:start="1179:19" pos:end="1179:27">ldub_code</name><argument_list pos:start="1179:28" pos:end="1179:36">(<argument pos:start="1179:29" pos:end="1179:35"><expr pos:start="1179:29" pos:end="1179:35"><name pos:start="1179:29" pos:end="1179:33"><name pos:start="1179:29" pos:end="1179:29">s</name><operator pos:start="1179:30" pos:end="1179:31">-&gt;</operator><name pos:start="1179:32" pos:end="1179:33">pc</name></name><operator pos:start="1179:34" pos:end="1179:35">++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="1181:13" pos:end="1183:32"><if pos:start="1181:13" pos:end="1183:32">if <condition pos:start="1181:16" pos:end="1181:25">(<expr pos:start="1181:17" pos:end="1181:24"><name pos:start="1181:17" pos:end="1181:19">val</name> <operator pos:start="1181:21" pos:end="1181:22">&gt;=</operator> <literal type="number" pos:start="1181:24" pos:end="1181:24">8</literal></expr>)</condition><block type="pseudo" pos:start="1183:17" pos:end="1183:32"><block_content pos:start="1183:17" pos:end="1183:32">

                <goto pos:start="1183:17" pos:end="1183:32">goto <name pos:start="1183:22" pos:end="1183:31">illegal_op</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt pos:start="1185:13" pos:end="1185:45"><expr pos:start="1185:13" pos:end="1185:44"><name pos:start="1185:13" pos:end="1185:19">sse_op2</name> <operator pos:start="1185:21" pos:end="1185:21">=</operator> <name pos:start="1185:23" pos:end="1185:44"><name pos:start="1185:23" pos:end="1185:35">sse_op_table4</name><index pos:start="1185:36" pos:end="1185:40">[<expr pos:start="1185:37" pos:end="1185:39"><name pos:start="1185:37" pos:end="1185:39">val</name></expr>]</index><index pos:start="1185:41" pos:end="1185:44">[<expr pos:start="1185:42" pos:end="1185:43"><name pos:start="1185:42" pos:end="1185:43">b1</name></expr>]</index></name></expr>;</expr_stmt>

            <expr_stmt pos:start="1187:13" pos:end="1187:44"><expr pos:start="1187:13" pos:end="1187:43"><call pos:start="1187:13" pos:end="1187:43"><name pos:start="1187:13" pos:end="1187:19">sse_op2</name><argument_list pos:start="1187:20" pos:end="1187:43">(<argument pos:start="1187:21" pos:end="1187:30"><expr pos:start="1187:21" pos:end="1187:30"><name pos:start="1187:21" pos:end="1187:30">op1_offset</name></expr></argument>, <argument pos:start="1187:33" pos:end="1187:42"><expr pos:start="1187:33" pos:end="1187:42"><name pos:start="1187:33" pos:end="1187:42">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1189:13" pos:end="1189:18">break;</break>

        <default pos:start="1191:9" pos:end="1191:16">default:</default>

            <expr_stmt pos:start="1193:13" pos:end="1193:44"><expr pos:start="1193:13" pos:end="1193:43"><call pos:start="1193:13" pos:end="1193:43"><name pos:start="1193:13" pos:end="1193:19">sse_op2</name><argument_list pos:start="1193:20" pos:end="1193:43">(<argument pos:start="1193:21" pos:end="1193:30"><expr pos:start="1193:21" pos:end="1193:30"><name pos:start="1193:21" pos:end="1193:30">op1_offset</name></expr></argument>, <argument pos:start="1193:33" pos:end="1193:42"><expr pos:start="1193:33" pos:end="1193:42"><name pos:start="1193:33" pos:end="1193:42">op2_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="1195:13" pos:end="1195:18">break;</break>

        </block_content>}</block></switch>

        <if_stmt pos:start="1199:9" pos:end="1203:9"><if pos:start="1199:9" pos:end="1203:9">if <condition pos:start="1199:12" pos:end="1199:35">(<expr pos:start="1199:13" pos:end="1199:34"><name pos:start="1199:13" pos:end="1199:13">b</name> <operator pos:start="1199:15" pos:end="1199:16">==</operator> <literal type="number" pos:start="1199:18" pos:end="1199:21">0x2e</literal> <operator pos:start="1199:23" pos:end="1199:24">||</operator> <name pos:start="1199:26" pos:end="1199:26">b</name> <operator pos:start="1199:28" pos:end="1199:29">==</operator> <literal type="number" pos:start="1199:31" pos:end="1199:34">0x2f</literal></expr>)</condition> <block pos:start="1199:37" pos:end="1203:9">{<block_content pos:start="1201:13" pos:end="1201:36">

            <expr_stmt pos:start="1201:13" pos:end="1201:36"><expr pos:start="1201:13" pos:end="1201:35"><name pos:start="1201:13" pos:end="1201:20"><name pos:start="1201:13" pos:end="1201:13">s</name><operator pos:start="1201:14" pos:end="1201:15">-&gt;</operator><name pos:start="1201:16" pos:end="1201:20">cc_op</name></name> <operator pos:start="1201:22" pos:end="1201:22">=</operator> <name pos:start="1201:24" pos:end="1201:35">CC_OP_EFLAGS</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
