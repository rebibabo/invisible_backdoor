<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14895.c" pos:tabs="8"><function pos:start="1:1" pos:end="417:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:27">read_access_unit</name><parameter_list pos:start="1:28" pos:end="3:44">(<parameter pos:start="1:29" pos:end="1:49"><decl pos:start="1:29" pos:end="1:49"><type pos:start="1:29" pos:end="1:49"><name pos:start="1:29" pos:end="1:42">AVCodecContext</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:49">avctx</name></decl></parameter>, <parameter pos:start="1:52" pos:end="1:61"><decl pos:start="1:52" pos:end="1:61"><type pos:start="1:52" pos:end="1:61"><name pos:start="1:52" pos:end="1:55">void</name><modifier pos:start="1:56" pos:end="1:56">*</modifier></type> <name pos:start="1:58" pos:end="1:61">data</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:77"><decl pos:start="1:64" pos:end="1:77"><type pos:start="1:64" pos:end="1:77"><name pos:start="1:64" pos:end="1:66">int</name> <modifier pos:start="1:68" pos:end="1:68">*</modifier></type><name pos:start="1:69" pos:end="1:77">data_size</name></decl></parameter>,

                            <parameter pos:start="3:29" pos:end="3:43"><decl pos:start="3:29" pos:end="3:43"><type pos:start="3:29" pos:end="3:43"><name pos:start="3:29" pos:end="3:36">AVPacket</name> <modifier pos:start="3:38" pos:end="3:38">*</modifier></type><name pos:start="3:39" pos:end="3:43">avpkt</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="417:1">{<block_content pos:start="7:5" pos:end="415:14">

    <decl_stmt pos:start="7:5" pos:end="7:37"><decl pos:start="7:5" pos:end="7:36"><type pos:start="7:5" pos:end="7:19"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:17">uint8_t</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:22">buf</name> <init pos:start="7:24" pos:end="7:36">= <expr pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:36"><name pos:start="7:26" pos:end="7:30">avpkt</name><operator pos:start="7:31" pos:end="7:32">-&gt;</operator><name pos:start="7:33" pos:end="7:36">data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:16">buf_size</name> <init pos:start="9:18" pos:end="9:30">= <expr pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:30"><name pos:start="9:20" pos:end="9:24">avpkt</name><operator pos:start="9:25" pos:end="9:26">-&gt;</operator><name pos:start="9:27" pos:end="9:30">size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:43"><decl pos:start="11:5" pos:end="11:42"><type pos:start="11:5" pos:end="11:22"><name pos:start="11:5" pos:end="11:20">MLPDecodeContext</name> <modifier pos:start="11:22" pos:end="11:22">*</modifier></type><name pos:start="11:23" pos:end="11:23">m</name> <init pos:start="11:25" pos:end="11:42">= <expr pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:42"><name pos:start="11:27" pos:end="11:31">avctx</name><operator pos:start="11:32" pos:end="11:33">-&gt;</operator><name pos:start="11:34" pos:end="11:42">priv_data</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:21"><decl pos:start="13:5" pos:end="13:20"><type pos:start="13:5" pos:end="13:17"><name pos:start="13:5" pos:end="13:17">GetBitContext</name></type> <name pos:start="13:19" pos:end="13:20">gb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:32"><decl pos:start="15:5" pos:end="15:23"><type pos:start="15:5" pos:end="15:16"><name pos:start="15:5" pos:end="15:12">unsigned</name> <name pos:start="15:14" pos:end="15:16">int</name></type> <name pos:start="15:18" pos:end="15:23">length</name></decl>, <decl pos:start="15:26" pos:end="15:31"><type ref="prev" pos:start="15:5" pos:end="15:16"/><name pos:start="15:26" pos:end="15:31">substr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:33"><decl pos:start="17:5" pos:end="17:32"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:12">unsigned</name> <name pos:start="17:14" pos:end="17:16">int</name></type> <name pos:start="17:18" pos:end="17:32">substream_start</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:33"><decl pos:start="19:5" pos:end="19:32"><type pos:start="19:5" pos:end="19:16"><name pos:start="19:5" pos:end="19:12">unsigned</name> <name pos:start="19:14" pos:end="19:16">int</name></type> <name pos:start="19:18" pos:end="19:28">header_size</name> <init pos:start="19:30" pos:end="19:32">= <expr pos:start="19:32" pos:end="19:32"><literal type="number" pos:start="19:32" pos:end="19:32">4</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:40"><decl pos:start="21:5" pos:end="21:39"><type pos:start="21:5" pos:end="21:16"><name pos:start="21:5" pos:end="21:12">unsigned</name> <name pos:start="21:14" pos:end="21:16">int</name></type> <name pos:start="21:18" pos:end="21:35">substr_header_size</name> <init pos:start="21:37" pos:end="21:39">= <expr pos:start="21:39" pos:end="21:39"><literal type="number" pos:start="21:39" pos:end="21:39">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:53"><decl pos:start="23:5" pos:end="23:52"><type pos:start="23:5" pos:end="23:11"><name pos:start="23:5" pos:end="23:11">uint8_t</name></type> <name pos:start="23:13" pos:end="23:52"><name pos:start="23:13" pos:end="23:36">substream_parity_present</name><index pos:start="23:37" pos:end="23:52">[<expr pos:start="23:38" pos:end="23:51"><name pos:start="23:38" pos:end="23:51">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:48"><decl pos:start="25:5" pos:end="25:47"><type pos:start="25:5" pos:end="25:12"><name pos:start="25:5" pos:end="25:12">uint16_t</name></type> <name pos:start="25:14" pos:end="25:47"><name pos:start="25:14" pos:end="25:31">substream_data_len</name><index pos:start="25:32" pos:end="25:47">[<expr pos:start="25:33" pos:end="25:46"><name pos:start="25:33" pos:end="25:46">MAX_SUBSTREAMS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:24"><decl pos:start="27:5" pos:end="27:23"><type pos:start="27:5" pos:end="27:11"><name pos:start="27:5" pos:end="27:11">uint8_t</name></type> <name pos:start="27:13" pos:end="27:23">parity_bits</name></decl>;</decl_stmt>



    <if_stmt pos:start="31:5" pos:end="33:17"><if pos:start="31:5" pos:end="33:17">if <condition pos:start="31:8" pos:end="31:21">(<expr pos:start="31:9" pos:end="31:20"><name pos:start="31:9" pos:end="31:16">buf_size</name> <operator pos:start="31:18" pos:end="31:18">&lt;</operator> <literal type="number" pos:start="31:20" pos:end="31:20">4</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:17"><block_content pos:start="33:9" pos:end="33:17">

        <return pos:start="33:9" pos:end="33:17">return <expr pos:start="33:16" pos:end="33:16"><literal type="number" pos:start="33:16" pos:end="33:16">0</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:40"><expr pos:start="37:5" pos:end="37:39"><name pos:start="37:5" pos:end="37:10">length</name> <operator pos:start="37:12" pos:end="37:12">=</operator> <operator pos:start="37:14" pos:end="37:14">(</operator><call pos:start="37:15" pos:end="37:26"><name pos:start="37:15" pos:end="37:21">AV_RB16</name><argument_list pos:start="37:22" pos:end="37:26">(<argument pos:start="37:23" pos:end="37:25"><expr pos:start="37:23" pos:end="37:25"><name pos:start="37:23" pos:end="37:25">buf</name></expr></argument>)</argument_list></call> <operator pos:start="37:28" pos:end="37:28">&amp;</operator> <literal type="number" pos:start="37:30" pos:end="37:34">0xfff</literal><operator pos:start="37:35" pos:end="37:35">)</operator> <operator pos:start="37:37" pos:end="37:37">*</operator> <literal type="number" pos:start="37:39" pos:end="37:39">2</literal></expr>;</expr_stmt>



    <if_stmt pos:start="41:5" pos:end="43:18"><if pos:start="41:5" pos:end="43:18">if <condition pos:start="41:8" pos:end="41:26">(<expr pos:start="41:9" pos:end="41:25"><name pos:start="41:9" pos:end="41:14">length</name> <operator pos:start="41:16" pos:end="41:16">&gt;</operator> <name pos:start="41:18" pos:end="41:25">buf_size</name></expr>)</condition><block type="pseudo" pos:start="43:9" pos:end="43:18"><block_content pos:start="43:9" pos:end="43:18">

        <return pos:start="43:9" pos:end="43:18">return <expr pos:start="43:16" pos:end="43:17"><operator pos:start="43:16" pos:end="43:16">-</operator><literal type="number" pos:start="43:17" pos:end="43:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <expr_stmt pos:start="47:5" pos:end="47:52"><expr pos:start="47:5" pos:end="47:51"><call pos:start="47:5" pos:end="47:51"><name pos:start="47:5" pos:end="47:17">init_get_bits</name><argument_list pos:start="47:18" pos:end="47:51">(<argument pos:start="47:19" pos:end="47:21"><expr pos:start="47:19" pos:end="47:21"><operator pos:start="47:19" pos:end="47:19">&amp;</operator><name pos:start="47:20" pos:end="47:21">gb</name></expr></argument>, <argument pos:start="47:24" pos:end="47:32"><expr pos:start="47:24" pos:end="47:32"><operator pos:start="47:24" pos:end="47:24">(</operator><name pos:start="47:25" pos:end="47:27">buf</name> <operator pos:start="47:29" pos:end="47:29">+</operator> <literal type="number" pos:start="47:31" pos:end="47:31">4</literal><operator pos:start="47:32" pos:end="47:32">)</operator></expr></argument>, <argument pos:start="47:35" pos:end="47:50"><expr pos:start="47:35" pos:end="47:50"><operator pos:start="47:35" pos:end="47:35">(</operator><name pos:start="47:36" pos:end="47:41">length</name> <operator pos:start="47:43" pos:end="47:43">-</operator> <literal type="number" pos:start="47:45" pos:end="47:45">4</literal><operator pos:start="47:46" pos:end="47:46">)</operator> <operator pos:start="47:48" pos:end="47:48">*</operator> <literal type="number" pos:start="47:50" pos:end="47:50">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:30"><expr pos:start="51:5" pos:end="51:29"><name pos:start="51:5" pos:end="51:25"><name pos:start="51:5" pos:end="51:5">m</name><operator pos:start="51:6" pos:end="51:7">-&gt;</operator><name pos:start="51:8" pos:end="51:25">is_major_sync_unit</name></name> <operator pos:start="51:27" pos:end="51:27">=</operator> <literal type="number" pos:start="51:29" pos:end="51:29">0</literal></expr>;</expr_stmt>

    <if_stmt pos:start="53:5" pos:end="63:5"><if pos:start="53:5" pos:end="63:5">if <condition pos:start="53:8" pos:end="53:53">(<expr pos:start="53:9" pos:end="53:52"><call pos:start="53:9" pos:end="53:31"><name pos:start="53:9" pos:end="53:22">show_bits_long</name><argument_list pos:start="53:23" pos:end="53:31">(<argument pos:start="53:24" pos:end="53:26"><expr pos:start="53:24" pos:end="53:26"><operator pos:start="53:24" pos:end="53:24">&amp;</operator><name pos:start="53:25" pos:end="53:26">gb</name></expr></argument>, <argument pos:start="53:29" pos:end="53:30"><expr pos:start="53:29" pos:end="53:30"><literal type="number" pos:start="53:29" pos:end="53:30">31</literal></expr></argument>)</argument_list></call> <operator pos:start="53:33" pos:end="53:34">==</operator> <operator pos:start="53:36" pos:end="53:36">(</operator><literal type="number" pos:start="53:37" pos:end="53:46">0xf8726fba</literal> <operator pos:start="53:48" pos:end="53:49">&gt;&gt;</operator> <literal type="number" pos:start="53:51" pos:end="53:51">1</literal><operator pos:start="53:52" pos:end="53:52">)</operator></expr>)</condition> <block pos:start="53:55" pos:end="63:5">{<block_content pos:start="55:9" pos:end="61:26">

        <if_stmt pos:start="55:9" pos:end="57:23"><if pos:start="55:9" pos:end="57:23">if <condition pos:start="55:12" pos:end="55:40">(<expr pos:start="55:13" pos:end="55:39"><call pos:start="55:13" pos:end="55:35"><name pos:start="55:13" pos:end="55:27">read_major_sync</name><argument_list pos:start="55:28" pos:end="55:35">(<argument pos:start="55:29" pos:end="55:29"><expr pos:start="55:29" pos:end="55:29"><name pos:start="55:29" pos:end="55:29">m</name></expr></argument>, <argument pos:start="55:32" pos:end="55:34"><expr pos:start="55:32" pos:end="55:34"><operator pos:start="55:32" pos:end="55:32">&amp;</operator><name pos:start="55:33" pos:end="55:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="55:37" pos:end="55:37">&lt;</operator> <literal type="number" pos:start="55:39" pos:end="55:39">0</literal></expr>)</condition><block type="pseudo" pos:start="57:13" pos:end="57:23"><block_content pos:start="57:13" pos:end="57:23">

            <goto pos:start="57:13" pos:end="57:23">goto <name pos:start="57:18" pos:end="57:22">error</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:34"><expr pos:start="59:9" pos:end="59:33"><name pos:start="59:9" pos:end="59:29"><name pos:start="59:9" pos:end="59:9">m</name><operator pos:start="59:10" pos:end="59:11">-&gt;</operator><name pos:start="59:12" pos:end="59:29">is_major_sync_unit</name></name> <operator pos:start="59:31" pos:end="59:31">=</operator> <literal type="number" pos:start="59:33" pos:end="59:33">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="61:9" pos:end="61:26"><expr pos:start="61:9" pos:end="61:25"><name pos:start="61:9" pos:end="61:19">header_size</name> <operator pos:start="61:21" pos:end="61:22">+=</operator> <literal type="number" pos:start="61:24" pos:end="61:25">28</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="67:5" pos:end="77:5"><if pos:start="67:5" pos:end="77:5">if <condition pos:start="67:8" pos:end="67:25">(<expr pos:start="67:9" pos:end="67:24"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:24"><name pos:start="67:10" pos:end="67:10">m</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:24">params_valid</name></name></expr>)</condition> <block pos:start="67:27" pos:end="77:5">{<block_content pos:start="69:9" pos:end="75:22">

        <expr_stmt pos:start="69:9" pos:end="71:64"><expr pos:start="69:9" pos:end="71:63"><call pos:start="69:9" pos:end="71:63"><name pos:start="69:9" pos:end="69:14">av_log</name><argument_list pos:start="69:15" pos:end="71:63">(<argument pos:start="69:16" pos:end="69:23"><expr pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:23"><name pos:start="69:16" pos:end="69:16">m</name><operator pos:start="69:17" pos:end="69:18">-&gt;</operator><name pos:start="69:19" pos:end="69:23">avctx</name></name></expr></argument>, <argument pos:start="69:26" pos:end="69:39"><expr pos:start="69:26" pos:end="69:39"><name pos:start="69:26" pos:end="69:39">AV_LOG_WARNING</name></expr></argument>,

               <argument pos:start="71:16" pos:end="71:62"><expr pos:start="71:16" pos:end="71:62"><literal type="string" pos:start="71:16" pos:end="71:62">"Stream parameters not seen; skipping frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:23"><expr pos:start="73:9" pos:end="73:22"><operator pos:start="73:9" pos:end="73:9">*</operator><name pos:start="73:10" pos:end="73:18">data_size</name> <operator pos:start="73:20" pos:end="73:20">=</operator> <literal type="number" pos:start="73:22" pos:end="73:22">0</literal></expr>;</expr_stmt>

        <return pos:start="75:9" pos:end="75:22">return <expr pos:start="75:16" pos:end="75:21"><name pos:start="75:16" pos:end="75:21">length</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:24"><expr pos:start="81:5" pos:end="81:23"><name pos:start="81:5" pos:end="81:19">substream_start</name> <operator pos:start="81:21" pos:end="81:21">=</operator> <literal type="number" pos:start="81:23" pos:end="81:23">0</literal></expr>;</expr_stmt>



    <for pos:start="85:5" pos:end="179:5">for <control pos:start="85:9" pos:end="85:58">(<init pos:start="85:10" pos:end="85:20"><expr pos:start="85:10" pos:end="85:19"><name pos:start="85:10" pos:end="85:15">substr</name> <operator pos:start="85:17" pos:end="85:17">=</operator> <literal type="number" pos:start="85:19" pos:end="85:19">0</literal></expr>;</init> <condition pos:start="85:22" pos:end="85:48"><expr pos:start="85:22" pos:end="85:47"><name pos:start="85:22" pos:end="85:27">substr</name> <operator pos:start="85:29" pos:end="85:29">&lt;</operator> <name pos:start="85:31" pos:end="85:47"><name pos:start="85:31" pos:end="85:31">m</name><operator pos:start="85:32" pos:end="85:33">-&gt;</operator><name pos:start="85:34" pos:end="85:47">num_substreams</name></name></expr>;</condition> <incr pos:start="85:50" pos:end="85:57"><expr pos:start="85:50" pos:end="85:57"><name pos:start="85:50" pos:end="85:55">substr</name><operator pos:start="85:56" pos:end="85:57">++</operator></expr></incr>)</control> <block pos:start="85:60" pos:end="179:5">{<block_content pos:start="87:9" pos:end="177:30">

        <decl_stmt pos:start="87:9" pos:end="87:73"><decl pos:start="87:9" pos:end="87:29"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:29">extraword_present</name></decl>, <decl pos:start="87:32" pos:end="87:48"><type ref="prev" pos:start="87:9" pos:end="87:11"/><name pos:start="87:32" pos:end="87:48">checkdata_present</name></decl>, <decl pos:start="87:51" pos:end="87:53"><type ref="prev" pos:start="87:9" pos:end="87:11"/><name pos:start="87:51" pos:end="87:53">end</name></decl>, <decl pos:start="87:56" pos:end="87:72"><type ref="prev" pos:start="87:9" pos:end="87:11"/><name pos:start="87:56" pos:end="87:72">nonrestart_substr</name></decl>;</decl_stmt>



        <expr_stmt pos:start="91:9" pos:end="91:43"><expr pos:start="91:9" pos:end="91:42"><name pos:start="91:9" pos:end="91:25">extraword_present</name> <operator pos:start="91:27" pos:end="91:27">=</operator> <call pos:start="91:29" pos:end="91:42"><name pos:start="91:29" pos:end="91:37">get_bits1</name><argument_list pos:start="91:38" pos:end="91:42">(<argument pos:start="91:39" pos:end="91:41"><expr pos:start="91:39" pos:end="91:41"><operator pos:start="91:39" pos:end="91:39">&amp;</operator><name pos:start="91:40" pos:end="91:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="93:43"><expr pos:start="93:9" pos:end="93:42"><name pos:start="93:9" pos:end="93:25">nonrestart_substr</name> <operator pos:start="93:27" pos:end="93:27">=</operator> <call pos:start="93:29" pos:end="93:42"><name pos:start="93:29" pos:end="93:37">get_bits1</name><argument_list pos:start="93:38" pos:end="93:42">(<argument pos:start="93:39" pos:end="93:41"><expr pos:start="93:39" pos:end="93:41"><operator pos:start="93:39" pos:end="93:39">&amp;</operator><name pos:start="93:40" pos:end="93:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="95:9" pos:end="95:43"><expr pos:start="95:9" pos:end="95:42"><name pos:start="95:9" pos:end="95:25">checkdata_present</name> <operator pos:start="95:27" pos:end="95:27">=</operator> <call pos:start="95:29" pos:end="95:42"><name pos:start="95:29" pos:end="95:37">get_bits1</name><argument_list pos:start="95:38" pos:end="95:42">(<argument pos:start="95:39" pos:end="95:41"><expr pos:start="95:39" pos:end="95:41"><operator pos:start="95:39" pos:end="95:39">&amp;</operator><name pos:start="95:40" pos:end="95:41">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:24"><expr pos:start="97:9" pos:end="97:23"><call pos:start="97:9" pos:end="97:23"><name pos:start="97:9" pos:end="97:18">skip_bits1</name><argument_list pos:start="97:19" pos:end="97:23">(<argument pos:start="97:20" pos:end="97:22"><expr pos:start="97:20" pos:end="97:22"><operator pos:start="97:20" pos:end="97:20">&amp;</operator><name pos:start="97:21" pos:end="97:22">gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="101:9" pos:end="101:36"><expr pos:start="101:9" pos:end="101:35"><name pos:start="101:9" pos:end="101:11">end</name> <operator pos:start="101:13" pos:end="101:13">=</operator> <call pos:start="101:15" pos:end="101:31"><name pos:start="101:15" pos:end="101:22">get_bits</name><argument_list pos:start="101:23" pos:end="101:31">(<argument pos:start="101:24" pos:end="101:26"><expr pos:start="101:24" pos:end="101:26"><operator pos:start="101:24" pos:end="101:24">&amp;</operator><name pos:start="101:25" pos:end="101:26">gb</name></expr></argument>, <argument pos:start="101:29" pos:end="101:30"><expr pos:start="101:29" pos:end="101:30"><literal type="number" pos:start="101:29" pos:end="101:30">12</literal></expr></argument>)</argument_list></call> <operator pos:start="101:33" pos:end="101:33">*</operator> <literal type="number" pos:start="101:35" pos:end="101:35">2</literal></expr>;</expr_stmt>



        <expr_stmt pos:start="105:9" pos:end="105:32"><expr pos:start="105:9" pos:end="105:31"><name pos:start="105:9" pos:end="105:26">substr_header_size</name> <operator pos:start="105:28" pos:end="105:29">+=</operator> <literal type="number" pos:start="105:31" pos:end="105:31">2</literal></expr>;</expr_stmt>



        <if_stmt pos:start="109:9" pos:end="123:9"><if pos:start="109:9" pos:end="123:9">if <condition pos:start="109:12" pos:end="109:30">(<expr pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:29">extraword_present</name></expr>)</condition> <block pos:start="109:32" pos:end="123:9">{<block_content pos:start="111:13" pos:end="121:36">

            <if_stmt pos:start="111:13" pos:end="117:13"><if pos:start="111:13" pos:end="117:13">if <condition pos:start="111:16" pos:end="111:51">(<expr pos:start="111:17" pos:end="111:50"><name pos:start="111:17" pos:end="111:34"><name pos:start="111:17" pos:end="111:17">m</name><operator pos:start="111:18" pos:end="111:19">-&gt;</operator><name pos:start="111:20" pos:end="111:24">avctx</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:34">codec_id</name></name> <operator pos:start="111:36" pos:end="111:37">==</operator> <name pos:start="111:39" pos:end="111:50">CODEC_ID_MLP</name></expr>)</condition> <block pos:start="111:53" pos:end="117:13">{<block_content pos:start="113:17" pos:end="115:27">

                <expr_stmt pos:start="113:17" pos:end="113:88"><expr pos:start="113:17" pos:end="113:87"><call pos:start="113:17" pos:end="113:87"><name pos:start="113:17" pos:end="113:22">av_log</name><argument_list pos:start="113:23" pos:end="113:87">(<argument pos:start="113:24" pos:end="113:31"><expr pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:31"><name pos:start="113:24" pos:end="113:24">m</name><operator pos:start="113:25" pos:end="113:26">-&gt;</operator><name pos:start="113:27" pos:end="113:31">avctx</name></name></expr></argument>, <argument pos:start="113:34" pos:end="113:45"><expr pos:start="113:34" pos:end="113:45"><name pos:start="113:34" pos:end="113:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="113:48" pos:end="113:86"><expr pos:start="113:48" pos:end="113:86"><literal type="string" pos:start="113:48" pos:end="113:86">"There must be no extraword for MLP.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="115:17" pos:end="115:27">goto <name pos:start="115:22" pos:end="115:26">error</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="119:13" pos:end="119:31"><expr pos:start="119:13" pos:end="119:30"><call pos:start="119:13" pos:end="119:30"><name pos:start="119:13" pos:end="119:21">skip_bits</name><argument_list pos:start="119:22" pos:end="119:30">(<argument pos:start="119:23" pos:end="119:25"><expr pos:start="119:23" pos:end="119:25"><operator pos:start="119:23" pos:end="119:23">&amp;</operator><name pos:start="119:24" pos:end="119:25">gb</name></expr></argument>, <argument pos:start="119:28" pos:end="119:29"><expr pos:start="119:28" pos:end="119:29"><literal type="number" pos:start="119:28" pos:end="119:29">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="121:13" pos:end="121:36"><expr pos:start="121:13" pos:end="121:35"><name pos:start="121:13" pos:end="121:30">substr_header_size</name> <operator pos:start="121:32" pos:end="121:33">+=</operator> <literal type="number" pos:start="121:35" pos:end="121:35">2</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="127:9" pos:end="133:9"><if pos:start="127:9" pos:end="133:9">if <condition pos:start="127:12" pos:end="127:57">(<expr pos:start="127:13" pos:end="127:56"><operator pos:start="127:13" pos:end="127:13">!</operator><operator pos:start="127:14" pos:end="127:14">(</operator><name pos:start="127:15" pos:end="127:31">nonrestart_substr</name> <operator pos:start="127:33" pos:end="127:33">^</operator> <name pos:start="127:35" pos:end="127:55"><name pos:start="127:35" pos:end="127:35">m</name><operator pos:start="127:36" pos:end="127:37">-&gt;</operator><name pos:start="127:38" pos:end="127:55">is_major_sync_unit</name></name><operator pos:start="127:56" pos:end="127:56">)</operator></expr>)</condition> <block pos:start="127:59" pos:end="133:9">{<block_content pos:start="129:13" pos:end="131:23">

            <expr_stmt pos:start="129:13" pos:end="129:75"><expr pos:start="129:13" pos:end="129:74"><call pos:start="129:13" pos:end="129:74"><name pos:start="129:13" pos:end="129:18">av_log</name><argument_list pos:start="129:19" pos:end="129:74">(<argument pos:start="129:20" pos:end="129:27"><expr pos:start="129:20" pos:end="129:27"><name pos:start="129:20" pos:end="129:27"><name pos:start="129:20" pos:end="129:20">m</name><operator pos:start="129:21" pos:end="129:22">-&gt;</operator><name pos:start="129:23" pos:end="129:27">avctx</name></name></expr></argument>, <argument pos:start="129:30" pos:end="129:41"><expr pos:start="129:30" pos:end="129:41"><name pos:start="129:30" pos:end="129:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="129:44" pos:end="129:73"><expr pos:start="129:44" pos:end="129:73"><literal type="string" pos:start="129:44" pos:end="129:73">"Invalid nonrestart_substr.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="131:13" pos:end="131:23">goto <name pos:start="131:18" pos:end="131:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="137:9" pos:end="147:9"><if pos:start="137:9" pos:end="147:9">if <condition pos:start="137:12" pos:end="137:60">(<expr pos:start="137:13" pos:end="137:59"><name pos:start="137:13" pos:end="137:15">end</name> <operator pos:start="137:17" pos:end="137:17">+</operator> <name pos:start="137:19" pos:end="137:29">header_size</name> <operator pos:start="137:31" pos:end="137:31">+</operator> <name pos:start="137:33" pos:end="137:50">substr_header_size</name> <operator pos:start="137:52" pos:end="137:52">&gt;</operator> <name pos:start="137:54" pos:end="137:59">length</name></expr>)</condition> <block pos:start="137:62" pos:end="147:9">{<block_content pos:start="139:13" pos:end="145:60">

            <expr_stmt pos:start="139:13" pos:end="143:40"><expr pos:start="139:13" pos:end="143:39"><call pos:start="139:13" pos:end="143:39"><name pos:start="139:13" pos:end="139:18">av_log</name><argument_list pos:start="139:19" pos:end="143:39">(<argument pos:start="139:20" pos:end="139:27"><expr pos:start="139:20" pos:end="139:27"><name pos:start="139:20" pos:end="139:27"><name pos:start="139:20" pos:end="139:20">m</name><operator pos:start="139:21" pos:end="139:22">-&gt;</operator><name pos:start="139:23" pos:end="139:27">avctx</name></name></expr></argument>, <argument pos:start="139:30" pos:end="139:41"><expr pos:start="139:30" pos:end="139:41"><name pos:start="139:30" pos:end="139:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="141:20" pos:end="143:30"><expr pos:start="141:20" pos:end="143:30"><literal type="string" pos:start="141:20" pos:end="141:75">"Indicated length of substream %d data goes off end of "</literal>

                   <literal type="string" pos:start="143:20" pos:end="143:30">"packet.\n"</literal></expr></argument>, <argument pos:start="143:33" pos:end="143:38"><expr pos:start="143:33" pos:end="143:38"><name pos:start="143:33" pos:end="143:38">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="145:13" pos:end="145:60"><expr pos:start="145:13" pos:end="145:59"><name pos:start="145:13" pos:end="145:15">end</name> <operator pos:start="145:17" pos:end="145:17">=</operator> <name pos:start="145:19" pos:end="145:24">length</name> <operator pos:start="145:26" pos:end="145:26">-</operator> <name pos:start="145:28" pos:end="145:38">header_size</name> <operator pos:start="145:40" pos:end="145:40">-</operator> <name pos:start="145:42" pos:end="145:59">substr_header_size</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="151:9" pos:end="163:9"><if pos:start="151:9" pos:end="163:9">if <condition pos:start="151:12" pos:end="151:34">(<expr pos:start="151:13" pos:end="151:33"><name pos:start="151:13" pos:end="151:15">end</name> <operator pos:start="151:17" pos:end="151:17">&lt;</operator> <name pos:start="151:19" pos:end="151:33">substream_start</name></expr>)</condition> <block pos:start="151:36" pos:end="163:9">{<block_content pos:start="153:13" pos:end="161:23">

            <expr_stmt pos:start="153:13" pos:end="159:27"><expr pos:start="153:13" pos:end="159:26"><call pos:start="153:13" pos:end="159:26"><name pos:start="153:13" pos:end="153:18">av_log</name><argument_list pos:start="153:19" pos:end="159:26">(<argument pos:start="153:20" pos:end="153:24"><expr pos:start="153:20" pos:end="153:24"><name pos:start="153:20" pos:end="153:24">avctx</name></expr></argument>, <argument pos:start="153:27" pos:end="153:38"><expr pos:start="153:27" pos:end="153:38"><name pos:start="153:27" pos:end="153:38">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="155:20" pos:end="157:63"><expr pos:start="155:20" pos:end="157:63"><literal type="string" pos:start="155:20" pos:end="155:63">"Indicated end offset of substream %d data "</literal>

                   <literal type="string" pos:start="157:20" pos:end="157:63">"is smaller than calculated start offset.\n"</literal></expr></argument>,

                   <argument pos:start="159:20" pos:end="159:25"><expr pos:start="159:20" pos:end="159:25"><name pos:start="159:20" pos:end="159:25">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="161:13" pos:end="161:23">goto <name pos:start="161:18" pos:end="161:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="167:9" pos:end="169:21"><if pos:start="167:9" pos:end="169:21">if <condition pos:start="167:12" pos:end="167:46">(<expr pos:start="167:13" pos:end="167:45"><name pos:start="167:13" pos:end="167:18">substr</name> <operator pos:start="167:20" pos:end="167:20">&gt;</operator> <name pos:start="167:22" pos:end="167:45"><name pos:start="167:22" pos:end="167:22">m</name><operator pos:start="167:23" pos:end="167:24">-&gt;</operator><name pos:start="167:25" pos:end="167:45">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="169:13" pos:end="169:21"><block_content pos:start="169:13" pos:end="169:21">

            <continue pos:start="169:13" pos:end="169:21">continue;</continue></block_content></block></if></if_stmt>



        <expr_stmt pos:start="173:9" pos:end="173:61"><expr pos:start="173:9" pos:end="173:60"><name pos:start="173:9" pos:end="173:40"><name pos:start="173:9" pos:end="173:32">substream_parity_present</name><index pos:start="173:33" pos:end="173:40">[<expr pos:start="173:34" pos:end="173:39"><name pos:start="173:34" pos:end="173:39">substr</name></expr>]</index></name> <operator pos:start="173:42" pos:end="173:42">=</operator> <name pos:start="173:44" pos:end="173:60">checkdata_present</name></expr>;</expr_stmt>

        <expr_stmt pos:start="175:9" pos:end="175:59"><expr pos:start="175:9" pos:end="175:58"><name pos:start="175:9" pos:end="175:34"><name pos:start="175:9" pos:end="175:26">substream_data_len</name><index pos:start="175:27" pos:end="175:34">[<expr pos:start="175:28" pos:end="175:33"><name pos:start="175:28" pos:end="175:33">substr</name></expr>]</index></name> <operator pos:start="175:36" pos:end="175:36">=</operator> <name pos:start="175:38" pos:end="175:40">end</name> <operator pos:start="175:42" pos:end="175:42">-</operator> <name pos:start="175:44" pos:end="175:58">substream_start</name></expr>;</expr_stmt>

        <expr_stmt pos:start="177:9" pos:end="177:30"><expr pos:start="177:9" pos:end="177:29"><name pos:start="177:9" pos:end="177:23">substream_start</name> <operator pos:start="177:25" pos:end="177:25">=</operator> <name pos:start="177:27" pos:end="177:29">end</name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="183:5" pos:end="183:51"><expr pos:start="183:5" pos:end="183:50"><name pos:start="183:5" pos:end="183:15">parity_bits</name>  <operator pos:start="183:18" pos:end="183:18">=</operator> <call pos:start="183:20" pos:end="183:50"><name pos:start="183:20" pos:end="183:42">ff_mlp_calculate_parity</name><argument_list pos:start="183:43" pos:end="183:50">(<argument pos:start="183:44" pos:end="183:46"><expr pos:start="183:44" pos:end="183:46"><name pos:start="183:44" pos:end="183:46">buf</name></expr></argument>, <argument pos:start="183:49" pos:end="183:49"><expr pos:start="183:49" pos:end="183:49"><literal type="number" pos:start="183:49" pos:end="183:49">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="185:5" pos:end="185:82"><expr pos:start="185:5" pos:end="185:81"><name pos:start="185:5" pos:end="185:15">parity_bits</name> <operator pos:start="185:17" pos:end="185:18">^=</operator> <call pos:start="185:20" pos:end="185:81"><name pos:start="185:20" pos:end="185:42">ff_mlp_calculate_parity</name><argument_list pos:start="185:43" pos:end="185:81">(<argument pos:start="185:44" pos:end="185:60"><expr pos:start="185:44" pos:end="185:60"><name pos:start="185:44" pos:end="185:46">buf</name> <operator pos:start="185:48" pos:end="185:48">+</operator> <name pos:start="185:50" pos:end="185:60">header_size</name></expr></argument>, <argument pos:start="185:63" pos:end="185:80"><expr pos:start="185:63" pos:end="185:80"><name pos:start="185:63" pos:end="185:80">substr_header_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="189:5" pos:end="195:5"><if pos:start="189:5" pos:end="195:5">if <condition pos:start="189:8" pos:end="189:58">(<expr pos:start="189:9" pos:end="189:57"><operator pos:start="189:9" pos:end="189:9">(</operator><operator pos:start="189:10" pos:end="189:10">(</operator><operator pos:start="189:11" pos:end="189:11">(</operator><name pos:start="189:12" pos:end="189:22">parity_bits</name> <operator pos:start="189:24" pos:end="189:25">&gt;&gt;</operator> <literal type="number" pos:start="189:27" pos:end="189:27">4</literal><operator pos:start="189:28" pos:end="189:28">)</operator> <operator pos:start="189:30" pos:end="189:30">^</operator> <name pos:start="189:32" pos:end="189:42">parity_bits</name><operator pos:start="189:43" pos:end="189:43">)</operator> <operator pos:start="189:45" pos:end="189:45">&amp;</operator> <literal type="number" pos:start="189:47" pos:end="189:49">0xF</literal><operator pos:start="189:50" pos:end="189:50">)</operator> <operator pos:start="189:52" pos:end="189:53">!=</operator> <literal type="number" pos:start="189:55" pos:end="189:57">0xF</literal></expr>)</condition> <block pos:start="189:60" pos:end="195:5">{<block_content pos:start="191:9" pos:end="193:19">

        <expr_stmt pos:start="191:9" pos:end="191:62"><expr pos:start="191:9" pos:end="191:61"><call pos:start="191:9" pos:end="191:61"><name pos:start="191:9" pos:end="191:14">av_log</name><argument_list pos:start="191:15" pos:end="191:61">(<argument pos:start="191:16" pos:end="191:20"><expr pos:start="191:16" pos:end="191:20"><name pos:start="191:16" pos:end="191:20">avctx</name></expr></argument>, <argument pos:start="191:23" pos:end="191:34"><expr pos:start="191:23" pos:end="191:34"><name pos:start="191:23" pos:end="191:34">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="191:37" pos:end="191:60"><expr pos:start="191:37" pos:end="191:60"><literal type="string" pos:start="191:37" pos:end="191:60">"Parity check failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="193:9" pos:end="193:19">goto <name pos:start="193:14" pos:end="193:18">error</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="199:5" pos:end="199:44"><expr pos:start="199:5" pos:end="199:43"><name pos:start="199:5" pos:end="199:7">buf</name> <operator pos:start="199:9" pos:end="199:10">+=</operator> <name pos:start="199:12" pos:end="199:22">header_size</name> <operator pos:start="199:24" pos:end="199:24">+</operator> <name pos:start="199:26" pos:end="199:43">substr_header_size</name></expr>;</expr_stmt>



    <for pos:start="203:5" pos:end="385:5">for <control pos:start="203:9" pos:end="203:66">(<init pos:start="203:10" pos:end="203:20"><expr pos:start="203:10" pos:end="203:19"><name pos:start="203:10" pos:end="203:15">substr</name> <operator pos:start="203:17" pos:end="203:17">=</operator> <literal type="number" pos:start="203:19" pos:end="203:19">0</literal></expr>;</init> <condition pos:start="203:22" pos:end="203:56"><expr pos:start="203:22" pos:end="203:55"><name pos:start="203:22" pos:end="203:27">substr</name> <operator pos:start="203:29" pos:end="203:30">&lt;=</operator> <name pos:start="203:32" pos:end="203:55"><name pos:start="203:32" pos:end="203:32">m</name><operator pos:start="203:33" pos:end="203:34">-&gt;</operator><name pos:start="203:35" pos:end="203:55">max_decoded_substream</name></name></expr>;</condition> <incr pos:start="203:58" pos:end="203:65"><expr pos:start="203:58" pos:end="203:65"><name pos:start="203:58" pos:end="203:63">substr</name><operator pos:start="203:64" pos:end="203:65">++</operator></expr></incr>)</control> <block pos:start="203:68" pos:end="385:5">{<block_content pos:start="205:9" pos:end="383:42">

        <decl_stmt pos:start="205:9" pos:end="205:45"><decl pos:start="205:9" pos:end="205:44"><type pos:start="205:9" pos:end="205:19"><name pos:start="205:9" pos:end="205:17">SubStream</name> <modifier pos:start="205:19" pos:end="205:19">*</modifier></type><name pos:start="205:20" pos:end="205:20">s</name> <init pos:start="205:22" pos:end="205:44">= <expr pos:start="205:24" pos:end="205:44"><operator pos:start="205:24" pos:end="205:24">&amp;</operator><name pos:start="205:25" pos:end="205:44"><name pos:start="205:25" pos:end="205:25">m</name><operator pos:start="205:26" pos:end="205:27">-&gt;</operator><name pos:start="205:28" pos:end="205:36">substream</name><index pos:start="205:37" pos:end="205:44">[<expr pos:start="205:38" pos:end="205:43"><name pos:start="205:38" pos:end="205:43">substr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:64"><expr pos:start="207:9" pos:end="207:63"><call pos:start="207:9" pos:end="207:63"><name pos:start="207:9" pos:end="207:21">init_get_bits</name><argument_list pos:start="207:22" pos:end="207:63">(<argument pos:start="207:23" pos:end="207:25"><expr pos:start="207:23" pos:end="207:25"><operator pos:start="207:23" pos:end="207:23">&amp;</operator><name pos:start="207:24" pos:end="207:25">gb</name></expr></argument>, <argument pos:start="207:28" pos:end="207:30"><expr pos:start="207:28" pos:end="207:30"><name pos:start="207:28" pos:end="207:30">buf</name></expr></argument>, <argument pos:start="207:33" pos:end="207:62"><expr pos:start="207:33" pos:end="207:62"><name pos:start="207:33" pos:end="207:58"><name pos:start="207:33" pos:end="207:50">substream_data_len</name><index pos:start="207:51" pos:end="207:58">[<expr pos:start="207:52" pos:end="207:57"><name pos:start="207:52" pos:end="207:57">substr</name></expr>]</index></name> <operator pos:start="207:60" pos:end="207:60">*</operator> <literal type="number" pos:start="207:62" pos:end="207:62">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="211:9" pos:end="211:30"><expr pos:start="211:9" pos:end="211:29"><name pos:start="211:9" pos:end="211:25"><name pos:start="211:9" pos:end="211:9">m</name><operator pos:start="211:10" pos:end="211:11">-&gt;</operator><name pos:start="211:12" pos:end="211:25">matrix_changed</name></name> <operator pos:start="211:27" pos:end="211:27">=</operator> <literal type="number" pos:start="211:29" pos:end="211:29">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:64"><expr pos:start="213:9" pos:end="213:63"><call pos:start="213:9" pos:end="213:63"><name pos:start="213:9" pos:end="213:14">memset</name><argument_list pos:start="213:15" pos:end="213:63">(<argument pos:start="213:16" pos:end="213:32"><expr pos:start="213:16" pos:end="213:32"><name pos:start="213:16" pos:end="213:32"><name pos:start="213:16" pos:end="213:16">m</name><operator pos:start="213:17" pos:end="213:18">-&gt;</operator><name pos:start="213:19" pos:end="213:32">filter_changed</name></name></expr></argument>, <argument pos:start="213:35" pos:end="213:35"><expr pos:start="213:35" pos:end="213:35"><literal type="number" pos:start="213:35" pos:end="213:35">0</literal></expr></argument>, <argument pos:start="213:38" pos:end="213:62"><expr pos:start="213:38" pos:end="213:62"><sizeof pos:start="213:38" pos:end="213:62">sizeof<argument_list pos:start="213:44" pos:end="213:62">(<argument pos:start="213:45" pos:end="213:61"><expr pos:start="213:45" pos:end="213:61"><name pos:start="213:45" pos:end="213:61"><name pos:start="213:45" pos:end="213:45">m</name><operator pos:start="213:46" pos:end="213:47">-&gt;</operator><name pos:start="213:48" pos:end="213:61">filter_changed</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="217:9" pos:end="217:24"><expr pos:start="217:9" pos:end="217:23"><name pos:start="217:9" pos:end="217:19"><name pos:start="217:9" pos:end="217:9">s</name><operator pos:start="217:10" pos:end="217:11">-&gt;</operator><name pos:start="217:12" pos:end="217:19">blockpos</name></name> <operator pos:start="217:21" pos:end="217:21">=</operator> <literal type="number" pos:start="217:23" pos:end="217:23">0</literal></expr>;</expr_stmt>

        <do pos:start="219:9" pos:end="299:34">do <block pos:start="219:12" pos:end="299:9">{<block_content pos:start="221:13" pos:end="295:47">

            <decl_stmt pos:start="221:13" pos:end="221:28"><decl pos:start="221:13" pos:end="221:27"><type pos:start="221:13" pos:end="221:24"><name pos:start="221:13" pos:end="221:20">unsigned</name> <name pos:start="221:22" pos:end="221:24">int</name></type> <name pos:start="221:26" pos:end="221:27">ch</name></decl>;</decl_stmt>



            <if_stmt pos:start="225:13" pos:end="253:13"><if pos:start="225:13" pos:end="253:13">if <condition pos:start="225:16" pos:end="225:31">(<expr pos:start="225:17" pos:end="225:30"><call pos:start="225:17" pos:end="225:30"><name pos:start="225:17" pos:end="225:25">get_bits1</name><argument_list pos:start="225:26" pos:end="225:30">(<argument pos:start="225:27" pos:end="225:29"><expr pos:start="225:27" pos:end="225:29"><operator pos:start="225:27" pos:end="225:27">&amp;</operator><name pos:start="225:28" pos:end="225:29">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="225:33" pos:end="253:13">{<block_content pos:start="227:17" pos:end="251:37">

                <if_stmt pos:start="227:17" pos:end="237:17"><if pos:start="227:17" pos:end="237:17">if <condition pos:start="227:20" pos:end="227:35">(<expr pos:start="227:21" pos:end="227:34"><call pos:start="227:21" pos:end="227:34"><name pos:start="227:21" pos:end="227:29">get_bits1</name><argument_list pos:start="227:30" pos:end="227:34">(<argument pos:start="227:31" pos:end="227:33"><expr pos:start="227:31" pos:end="227:33"><operator pos:start="227:31" pos:end="227:31">&amp;</operator><name pos:start="227:32" pos:end="227:33">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="227:37" pos:end="237:17">{<block_content pos:start="231:21" pos:end="235:40">

                    <comment type="block" pos:start="229:21" pos:end="229:61">/* A restart header should be present. */</comment>

                    <if_stmt pos:start="231:21" pos:end="233:41"><if pos:start="231:21" pos:end="233:41">if <condition pos:start="231:24" pos:end="231:69">(<expr pos:start="231:25" pos:end="231:68"><call pos:start="231:25" pos:end="231:64"><name pos:start="231:25" pos:end="231:43">read_restart_header</name><argument_list pos:start="231:44" pos:end="231:64">(<argument pos:start="231:45" pos:end="231:45"><expr pos:start="231:45" pos:end="231:45"><name pos:start="231:45" pos:end="231:45">m</name></expr></argument>, <argument pos:start="231:48" pos:end="231:50"><expr pos:start="231:48" pos:end="231:50"><operator pos:start="231:48" pos:end="231:48">&amp;</operator><name pos:start="231:49" pos:end="231:50">gb</name></expr></argument>, <argument pos:start="231:53" pos:end="231:55"><expr pos:start="231:53" pos:end="231:55"><name pos:start="231:53" pos:end="231:55">buf</name></expr></argument>, <argument pos:start="231:58" pos:end="231:63"><expr pos:start="231:58" pos:end="231:63"><name pos:start="231:58" pos:end="231:63">substr</name></expr></argument>)</argument_list></call> <operator pos:start="231:66" pos:end="231:66">&lt;</operator> <literal type="number" pos:start="231:68" pos:end="231:68">0</literal></expr>)</condition><block type="pseudo" pos:start="233:25" pos:end="233:41"><block_content pos:start="233:25" pos:end="233:41">

                        <goto pos:start="233:25" pos:end="233:41">goto <name pos:start="233:30" pos:end="233:40">next_substr</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt pos:start="235:21" pos:end="235:40"><expr pos:start="235:21" pos:end="235:39"><name pos:start="235:21" pos:end="235:35"><name pos:start="235:21" pos:end="235:21">s</name><operator pos:start="235:22" pos:end="235:23">-&gt;</operator><name pos:start="235:24" pos:end="235:35">restart_seen</name></name> <operator pos:start="235:37" pos:end="235:37">=</operator> <literal type="number" pos:start="235:39" pos:end="235:39">1</literal></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="241:17" pos:end="245:17"><if pos:start="241:17" pos:end="245:17">if <condition pos:start="241:20" pos:end="241:37">(<expr pos:start="241:21" pos:end="241:36"><operator pos:start="241:21" pos:end="241:21">!</operator><name pos:start="241:22" pos:end="241:36"><name pos:start="241:22" pos:end="241:22">s</name><operator pos:start="241:23" pos:end="241:24">-&gt;</operator><name pos:start="241:25" pos:end="241:36">restart_seen</name></name></expr>)</condition> <block pos:start="241:39" pos:end="245:17">{<block_content pos:start="243:21" pos:end="243:37">

                    <goto pos:start="243:21" pos:end="243:37">goto <name pos:start="243:26" pos:end="243:36">next_substr</name>;</goto>

                </block_content>}</block></if></if_stmt>



                <if_stmt pos:start="249:17" pos:end="251:37"><if pos:start="249:17" pos:end="251:37">if <condition pos:start="249:20" pos:end="249:61">(<expr pos:start="249:21" pos:end="249:60"><call pos:start="249:21" pos:end="249:56"><name pos:start="249:21" pos:end="249:40">read_decoding_params</name><argument_list pos:start="249:41" pos:end="249:56">(<argument pos:start="249:42" pos:end="249:42"><expr pos:start="249:42" pos:end="249:42"><name pos:start="249:42" pos:end="249:42">m</name></expr></argument>, <argument pos:start="249:45" pos:end="249:47"><expr pos:start="249:45" pos:end="249:47"><operator pos:start="249:45" pos:end="249:45">&amp;</operator><name pos:start="249:46" pos:end="249:47">gb</name></expr></argument>, <argument pos:start="249:50" pos:end="249:55"><expr pos:start="249:50" pos:end="249:55"><name pos:start="249:50" pos:end="249:55">substr</name></expr></argument>)</argument_list></call> <operator pos:start="249:58" pos:end="249:58">&lt;</operator> <literal type="number" pos:start="249:60" pos:end="249:60">0</literal></expr>)</condition><block type="pseudo" pos:start="251:21" pos:end="251:37"><block_content pos:start="251:21" pos:end="251:37">

                    <goto pos:start="251:21" pos:end="251:37">goto <name pos:start="251:26" pos:end="251:36">next_substr</name>;</goto></block_content></block></if></if_stmt>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="257:13" pos:end="263:13"><if pos:start="257:13" pos:end="263:13">if <condition pos:start="257:16" pos:end="257:38">(<expr pos:start="257:17" pos:end="257:37"><name pos:start="257:17" pos:end="257:33"><name pos:start="257:17" pos:end="257:17">m</name><operator pos:start="257:18" pos:end="257:19">-&gt;</operator><name pos:start="257:20" pos:end="257:33">matrix_changed</name></name> <operator pos:start="257:35" pos:end="257:35">&gt;</operator> <literal type="number" pos:start="257:37" pos:end="257:37">1</literal></expr>)</condition> <block pos:start="257:40" pos:end="263:13">{<block_content pos:start="259:17" pos:end="261:33">

                <expr_stmt pos:start="259:17" pos:end="259:99"><expr pos:start="259:17" pos:end="259:98"><call pos:start="259:17" pos:end="259:98"><name pos:start="259:17" pos:end="259:22">av_log</name><argument_list pos:start="259:23" pos:end="259:98">(<argument pos:start="259:24" pos:end="259:31"><expr pos:start="259:24" pos:end="259:31"><name pos:start="259:24" pos:end="259:31"><name pos:start="259:24" pos:end="259:24">m</name><operator pos:start="259:25" pos:end="259:26">-&gt;</operator><name pos:start="259:27" pos:end="259:31">avctx</name></name></expr></argument>, <argument pos:start="259:34" pos:end="259:45"><expr pos:start="259:34" pos:end="259:45"><name pos:start="259:34" pos:end="259:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="259:48" pos:end="259:97"><expr pos:start="259:48" pos:end="259:97"><literal type="string" pos:start="259:48" pos:end="259:97">"Matrices may change only once per access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <goto pos:start="261:17" pos:end="261:33">goto <name pos:start="261:22" pos:end="261:32">next_substr</name>;</goto>

            </block_content>}</block></if></if_stmt>

            <for pos:start="265:13" pos:end="275:17">for <control pos:start="265:17" pos:end="265:51">(<init pos:start="265:18" pos:end="265:24"><expr pos:start="265:18" pos:end="265:23"><name pos:start="265:18" pos:end="265:19">ch</name> <operator pos:start="265:21" pos:end="265:21">=</operator> <literal type="number" pos:start="265:23" pos:end="265:23">0</literal></expr>;</init> <condition pos:start="265:26" pos:end="265:45"><expr pos:start="265:26" pos:end="265:44"><name pos:start="265:26" pos:end="265:27">ch</name> <operator pos:start="265:29" pos:end="265:29">&lt;</operator> <name pos:start="265:31" pos:end="265:44"><name pos:start="265:31" pos:end="265:31">s</name><operator pos:start="265:32" pos:end="265:33">-&gt;</operator><name pos:start="265:34" pos:end="265:44">max_channel</name></name></expr>;</condition> <incr pos:start="265:47" pos:end="265:50"><expr pos:start="265:47" pos:end="265:50"><name pos:start="265:47" pos:end="265:48">ch</name><operator pos:start="265:49" pos:end="265:50">++</operator></expr></incr>)</control><block type="pseudo" pos:start="267:17" pos:end="275:17"><block_content pos:start="267:17" pos:end="275:17">

                <if_stmt pos:start="267:17" pos:end="275:17"><if pos:start="267:17" pos:end="275:17">if <condition pos:start="267:20" pos:end="269:51">(<expr pos:start="267:21" pos:end="269:50"><name pos:start="267:21" pos:end="267:46"><name pos:start="267:21" pos:end="267:21">m</name><operator pos:start="267:22" pos:end="267:23">-&gt;</operator><name pos:start="267:24" pos:end="267:37">filter_changed</name><index pos:start="267:38" pos:end="267:41">[<expr pos:start="267:39" pos:end="267:40"><name pos:start="267:39" pos:end="267:40">ch</name></expr>]</index><index pos:start="267:42" pos:end="267:46">[<expr pos:start="267:43" pos:end="267:45"><name pos:start="267:43" pos:end="267:45">FIR</name></expr>]</index></name> <operator pos:start="267:48" pos:end="267:48">&gt;</operator> <literal type="number" pos:start="267:50" pos:end="267:50">1</literal> <operator pos:start="267:52" pos:end="267:53">||</operator>

                    <name pos:start="269:21" pos:end="269:46"><name pos:start="269:21" pos:end="269:21">m</name><operator pos:start="269:22" pos:end="269:23">-&gt;</operator><name pos:start="269:24" pos:end="269:37">filter_changed</name><index pos:start="269:38" pos:end="269:41">[<expr pos:start="269:39" pos:end="269:40"><name pos:start="269:39" pos:end="269:40">ch</name></expr>]</index><index pos:start="269:42" pos:end="269:46">[<expr pos:start="269:43" pos:end="269:45"><name pos:start="269:43" pos:end="269:45">IIR</name></expr>]</index></name> <operator pos:start="269:48" pos:end="269:48">&gt;</operator> <literal type="number" pos:start="269:50" pos:end="269:50">1</literal></expr>)</condition> <block pos:start="269:53" pos:end="275:17">{<block_content pos:start="271:21" pos:end="273:37">

                    <expr_stmt pos:start="271:21" pos:end="271:102"><expr pos:start="271:21" pos:end="271:101"><call pos:start="271:21" pos:end="271:101"><name pos:start="271:21" pos:end="271:26">av_log</name><argument_list pos:start="271:27" pos:end="271:101">(<argument pos:start="271:28" pos:end="271:35"><expr pos:start="271:28" pos:end="271:35"><name pos:start="271:28" pos:end="271:35"><name pos:start="271:28" pos:end="271:28">m</name><operator pos:start="271:29" pos:end="271:30">-&gt;</operator><name pos:start="271:31" pos:end="271:35">avctx</name></name></expr></argument>, <argument pos:start="271:38" pos:end="271:49"><expr pos:start="271:38" pos:end="271:49"><name pos:start="271:38" pos:end="271:49">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="271:52" pos:end="271:100"><expr pos:start="271:52" pos:end="271:100"><literal type="string" pos:start="271:52" pos:end="271:100">"Filters may change only once per access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="273:21" pos:end="273:37">goto <name pos:start="273:26" pos:end="273:36">next_substr</name>;</goto>

                </block_content>}</block></if></if_stmt></block_content></block></for>



            <if_stmt pos:start="279:13" pos:end="283:13"><if pos:start="279:13" pos:end="283:13">if <condition pos:start="279:16" pos:end="279:33">(<expr pos:start="279:17" pos:end="279:32"><operator pos:start="279:17" pos:end="279:17">!</operator><name pos:start="279:18" pos:end="279:32"><name pos:start="279:18" pos:end="279:18">s</name><operator pos:start="279:19" pos:end="279:20">-&gt;</operator><name pos:start="279:21" pos:end="279:32">restart_seen</name></name></expr>)</condition> <block pos:start="279:35" pos:end="283:13">{<block_content pos:start="281:17" pos:end="281:33">

                <goto pos:start="281:17" pos:end="281:33">goto <name pos:start="281:22" pos:end="281:32">next_substr</name>;</goto>

            </block_content>}</block></if></if_stmt>



            <if_stmt pos:start="287:13" pos:end="289:26"><if pos:start="287:13" pos:end="289:26">if <condition pos:start="287:16" pos:end="287:52">(<expr pos:start="287:17" pos:end="287:51"><call pos:start="287:17" pos:end="287:47"><name pos:start="287:17" pos:end="287:31">read_block_data</name><argument_list pos:start="287:32" pos:end="287:47">(<argument pos:start="287:33" pos:end="287:33"><expr pos:start="287:33" pos:end="287:33"><name pos:start="287:33" pos:end="287:33">m</name></expr></argument>, <argument pos:start="287:36" pos:end="287:38"><expr pos:start="287:36" pos:end="287:38"><operator pos:start="287:36" pos:end="287:36">&amp;</operator><name pos:start="287:37" pos:end="287:38">gb</name></expr></argument>, <argument pos:start="287:41" pos:end="287:46"><expr pos:start="287:41" pos:end="287:46"><name pos:start="287:41" pos:end="287:46">substr</name></expr></argument>)</argument_list></call> <operator pos:start="287:49" pos:end="287:49">&lt;</operator> <literal type="number" pos:start="287:51" pos:end="287:51">0</literal></expr>)</condition><block type="pseudo" pos:start="289:17" pos:end="289:26"><block_content pos:start="289:17" pos:end="289:26">

                <return pos:start="289:17" pos:end="289:26">return <expr pos:start="289:24" pos:end="289:25"><operator pos:start="289:24" pos:end="289:24">-</operator><literal type="number" pos:start="289:25" pos:end="289:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="293:13" pos:end="295:47"><if pos:start="293:13" pos:end="295:47">if <condition pos:start="293:16" pos:end="293:70">(<expr pos:start="293:17" pos:end="293:69"><call pos:start="293:17" pos:end="293:35"><name pos:start="293:17" pos:end="293:30">get_bits_count</name><argument_list pos:start="293:31" pos:end="293:35">(<argument pos:start="293:32" pos:end="293:34"><expr pos:start="293:32" pos:end="293:34"><operator pos:start="293:32" pos:end="293:32">&amp;</operator><name pos:start="293:33" pos:end="293:34">gb</name></expr></argument>)</argument_list></call> <operator pos:start="293:37" pos:end="293:38">&gt;=</operator> <name pos:start="293:40" pos:end="293:65"><name pos:start="293:40" pos:end="293:57">substream_data_len</name><index pos:start="293:58" pos:end="293:65">[<expr pos:start="293:59" pos:end="293:64"><name pos:start="293:59" pos:end="293:64">substr</name></expr>]</index></name> <operator pos:start="293:67" pos:end="293:67">*</operator> <literal type="number" pos:start="293:69" pos:end="293:69">8</literal></expr>)</condition><block type="pseudo" pos:start="295:17" pos:end="295:47"><block_content pos:start="295:17" pos:end="295:47">

                <goto pos:start="295:17" pos:end="295:47">goto <name pos:start="295:22" pos:end="295:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



        </block_content>}</block> while <condition pos:start="299:17" pos:end="299:33">(<expr pos:start="299:18" pos:end="299:32"><operator pos:start="299:18" pos:end="299:18">!</operator><call pos:start="299:19" pos:end="299:32"><name pos:start="299:19" pos:end="299:27">get_bits1</name><argument_list pos:start="299:28" pos:end="299:32">(<argument pos:start="299:29" pos:end="299:31"><expr pos:start="299:29" pos:end="299:31"><operator pos:start="299:29" pos:end="299:29">&amp;</operator><name pos:start="299:30" pos:end="299:31">gb</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>



        <expr_stmt pos:start="303:9" pos:end="303:52"><expr pos:start="303:9" pos:end="303:51"><call pos:start="303:9" pos:end="303:51"><name pos:start="303:9" pos:end="303:17">skip_bits</name><argument_list pos:start="303:18" pos:end="303:51">(<argument pos:start="303:19" pos:end="303:21"><expr pos:start="303:19" pos:end="303:21"><operator pos:start="303:19" pos:end="303:19">&amp;</operator><name pos:start="303:20" pos:end="303:21">gb</name></expr></argument>, <argument pos:start="303:24" pos:end="303:50"><expr pos:start="303:24" pos:end="303:50"><operator pos:start="303:24" pos:end="303:24">(</operator><operator pos:start="303:25" pos:end="303:25">-</operator><call pos:start="303:26" pos:end="303:44"><name pos:start="303:26" pos:end="303:39">get_bits_count</name><argument_list pos:start="303:40" pos:end="303:44">(<argument pos:start="303:41" pos:end="303:43"><expr pos:start="303:41" pos:end="303:43"><operator pos:start="303:41" pos:end="303:41">&amp;</operator><name pos:start="303:42" pos:end="303:43">gb</name></expr></argument>)</argument_list></call><operator pos:start="303:45" pos:end="303:45">)</operator> <operator pos:start="303:47" pos:end="303:47">&amp;</operator> <literal type="number" pos:start="303:49" pos:end="303:50">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="305:9" pos:end="333:9"><if pos:start="305:9" pos:end="333:9">if <condition pos:start="305:12" pos:end="305:71">(<expr pos:start="305:13" pos:end="305:70"><name pos:start="305:13" pos:end="305:38"><name pos:start="305:13" pos:end="305:30">substream_data_len</name><index pos:start="305:31" pos:end="305:38">[<expr pos:start="305:32" pos:end="305:37"><name pos:start="305:32" pos:end="305:37">substr</name></expr>]</index></name> <operator pos:start="305:40" pos:end="305:40">*</operator> <literal type="number" pos:start="305:42" pos:end="305:44">8</literal> <operator pos:start="305:44" pos:end="305:44">-</operator> <call pos:start="305:46" pos:end="305:64"><name pos:start="305:46" pos:end="305:59">get_bits_count</name><argument_list pos:start="305:60" pos:end="305:64">(<argument pos:start="305:61" pos:end="305:63"><expr pos:start="305:61" pos:end="305:63"><operator pos:start="305:61" pos:end="305:61">&amp;</operator><name pos:start="305:62" pos:end="305:63">gb</name></expr></argument>)</argument_list></call> <operator pos:start="305:66" pos:end="305:67">&gt;=</operator> <literal type="number" pos:start="305:69" pos:end="305:70">32</literal></expr>)</condition> <block pos:start="305:73" pos:end="333:9">{<block_content pos:start="307:13" pos:end="331:76">

            <decl_stmt pos:start="307:13" pos:end="307:27"><decl pos:start="307:13" pos:end="307:26"><type pos:start="307:13" pos:end="307:15"><name pos:start="307:13" pos:end="307:15">int</name></type> <name pos:start="307:17" pos:end="307:26">shorten_by</name></decl>;</decl_stmt>



            <if_stmt pos:start="311:13" pos:end="313:26"><if pos:start="311:13" pos:end="313:26">if <condition pos:start="311:16" pos:end="311:44">(<expr pos:start="311:17" pos:end="311:43"><call pos:start="311:17" pos:end="311:33"><name pos:start="311:17" pos:end="311:24">get_bits</name><argument_list pos:start="311:25" pos:end="311:33">(<argument pos:start="311:26" pos:end="311:28"><expr pos:start="311:26" pos:end="311:28"><operator pos:start="311:26" pos:end="311:26">&amp;</operator><name pos:start="311:27" pos:end="311:28">gb</name></expr></argument>, <argument pos:start="311:31" pos:end="311:32"><expr pos:start="311:31" pos:end="311:32"><literal type="number" pos:start="311:31" pos:end="311:32">16</literal></expr></argument>)</argument_list></call> <operator pos:start="311:35" pos:end="311:36">!=</operator> <literal type="number" pos:start="311:38" pos:end="311:43">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="313:17" pos:end="313:26"><block_content pos:start="313:17" pos:end="313:26">

                <return pos:start="313:17" pos:end="313:26">return <expr pos:start="313:24" pos:end="313:25"><operator pos:start="313:24" pos:end="313:24">-</operator><literal type="number" pos:start="313:25" pos:end="313:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <expr_stmt pos:start="317:13" pos:end="317:43"><expr pos:start="317:13" pos:end="317:42"><name pos:start="317:13" pos:end="317:22">shorten_by</name> <operator pos:start="317:24" pos:end="317:24">=</operator> <call pos:start="317:26" pos:end="317:42"><name pos:start="317:26" pos:end="317:33">get_bits</name><argument_list pos:start="317:34" pos:end="317:42">(<argument pos:start="317:35" pos:end="317:37"><expr pos:start="317:35" pos:end="317:37"><operator pos:start="317:35" pos:end="317:35">&amp;</operator><name pos:start="317:36" pos:end="317:37">gb</name></expr></argument>, <argument pos:start="317:40" pos:end="317:41"><expr pos:start="317:40" pos:end="317:41"><literal type="number" pos:start="317:40" pos:end="317:41">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="319:13" pos:end="325:26"><if pos:start="319:13" pos:end="321:71">if      <condition pos:start="319:21" pos:end="319:83">(<expr pos:start="319:22" pos:end="319:82"><name pos:start="319:22" pos:end="319:39"><name pos:start="319:22" pos:end="319:22">m</name><operator pos:start="319:23" pos:end="319:24">-&gt;</operator><name pos:start="319:25" pos:end="319:29">avctx</name><operator pos:start="319:30" pos:end="319:31">-&gt;</operator><name pos:start="319:32" pos:end="319:39">codec_id</name></name> <operator pos:start="319:41" pos:end="319:42">==</operator> <name pos:start="319:44" pos:end="319:58">CODEC_ID_TRUEHD</name> <operator pos:start="319:60" pos:end="319:61">&amp;&amp;</operator> <name pos:start="319:63" pos:end="319:72">shorten_by</name>  <operator pos:start="319:75" pos:end="319:75">&amp;</operator> <literal type="number" pos:start="319:77" pos:end="319:82">0x2000</literal></expr>)</condition><block type="pseudo" pos:start="321:17" pos:end="321:71"><block_content pos:start="321:17" pos:end="321:71">

                <expr_stmt pos:start="321:17" pos:end="321:71"><expr pos:start="321:17" pos:end="321:70"><name pos:start="321:17" pos:end="321:27"><name pos:start="321:17" pos:end="321:17">s</name><operator pos:start="321:18" pos:end="321:19">-&gt;</operator><name pos:start="321:20" pos:end="321:27">blockpos</name></name> <operator pos:start="321:29" pos:end="321:30">-=</operator> <call pos:start="321:32" pos:end="321:70"><name pos:start="321:32" pos:end="321:36">FFMIN</name><argument_list pos:start="321:37" pos:end="321:70">(<argument pos:start="321:38" pos:end="321:56"><expr pos:start="321:38" pos:end="321:56"><name pos:start="321:38" pos:end="321:47">shorten_by</name> <operator pos:start="321:49" pos:end="321:49">&amp;</operator> <literal type="number" pos:start="321:51" pos:end="321:56">0x1FFF</literal></expr></argument>, <argument pos:start="321:59" pos:end="321:69"><expr pos:start="321:59" pos:end="321:69"><name pos:start="321:59" pos:end="321:69"><name pos:start="321:59" pos:end="321:59">s</name><operator pos:start="321:60" pos:end="321:61">-&gt;</operator><name pos:start="321:62" pos:end="321:69">blockpos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="323:13" pos:end="325:26">else if <condition pos:start="323:21" pos:end="323:83">(<expr pos:start="323:22" pos:end="323:82"><name pos:start="323:22" pos:end="323:39"><name pos:start="323:22" pos:end="323:22">m</name><operator pos:start="323:23" pos:end="323:24">-&gt;</operator><name pos:start="323:25" pos:end="323:29">avctx</name><operator pos:start="323:30" pos:end="323:31">-&gt;</operator><name pos:start="323:32" pos:end="323:39">codec_id</name></name> <operator pos:start="323:41" pos:end="323:42">==</operator> <name pos:start="323:44" pos:end="323:55">CODEC_ID_MLP</name>    <operator pos:start="323:60" pos:end="323:61">&amp;&amp;</operator> <name pos:start="323:63" pos:end="323:72">shorten_by</name> <operator pos:start="323:74" pos:end="323:75">!=</operator> <literal type="number" pos:start="323:77" pos:end="323:82">0xD234</literal></expr>)</condition><block type="pseudo" pos:start="325:17" pos:end="325:26"><block_content pos:start="325:17" pos:end="325:26">

                <return pos:start="325:17" pos:end="325:26">return <expr pos:start="325:24" pos:end="325:25"><operator pos:start="325:24" pos:end="325:24">-</operator><literal type="number" pos:start="325:25" pos:end="325:25">1</literal></expr>;</return></block_content></block></if></if_stmt>



            <if_stmt pos:start="329:13" pos:end="331:76"><if pos:start="329:13" pos:end="331:76">if <condition pos:start="329:16" pos:end="329:51">(<expr pos:start="329:17" pos:end="329:50"><name pos:start="329:17" pos:end="329:22">substr</name> <operator pos:start="329:24" pos:end="329:25">==</operator> <name pos:start="329:27" pos:end="329:50"><name pos:start="329:27" pos:end="329:27">m</name><operator pos:start="329:28" pos:end="329:29">-&gt;</operator><name pos:start="329:30" pos:end="329:50">max_decoded_substream</name></name></expr>)</condition><block type="pseudo" pos:start="331:17" pos:end="331:76"><block_content pos:start="331:17" pos:end="331:76">

                <expr_stmt pos:start="331:17" pos:end="331:76"><expr pos:start="331:17" pos:end="331:75"><call pos:start="331:17" pos:end="331:75"><name pos:start="331:17" pos:end="331:22">av_log</name><argument_list pos:start="331:23" pos:end="331:75">(<argument pos:start="331:24" pos:end="331:31"><expr pos:start="331:24" pos:end="331:31"><name pos:start="331:24" pos:end="331:31"><name pos:start="331:24" pos:end="331:24">m</name><operator pos:start="331:25" pos:end="331:26">-&gt;</operator><name pos:start="331:27" pos:end="331:31">avctx</name></name></expr></argument>, <argument pos:start="331:34" pos:end="331:44"><expr pos:start="331:34" pos:end="331:44"><name pos:start="331:34" pos:end="331:44">AV_LOG_INFO</name></expr></argument>, <argument pos:start="331:47" pos:end="331:74"><expr pos:start="331:47" pos:end="331:74"><literal type="string" pos:start="331:47" pos:end="331:74">"End of stream indicated.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="335:9" pos:end="361:9"><if pos:start="335:9" pos:end="361:9">if <condition pos:start="335:12" pos:end="335:45">(<expr pos:start="335:13" pos:end="335:44"><name pos:start="335:13" pos:end="335:44"><name pos:start="335:13" pos:end="335:36">substream_parity_present</name><index pos:start="335:37" pos:end="335:44">[<expr pos:start="335:38" pos:end="335:43"><name pos:start="335:38" pos:end="335:43">substr</name></expr>]</index></name></expr>)</condition> <block pos:start="335:47" pos:end="361:9">{<block_content pos:start="337:13" pos:end="359:94">

            <decl_stmt pos:start="337:13" pos:end="337:37"><decl pos:start="337:13" pos:end="337:26"><type pos:start="337:13" pos:end="337:19"><name pos:start="337:13" pos:end="337:19">uint8_t</name></type> <name pos:start="337:21" pos:end="337:26">parity</name></decl>, <decl pos:start="337:29" pos:end="337:36"><type ref="prev" pos:start="337:13" pos:end="337:19"/><name pos:start="337:29" pos:end="337:36">checksum</name></decl>;</decl_stmt>



            <if_stmt pos:start="341:13" pos:end="343:47"><if pos:start="341:13" pos:end="343:47">if <condition pos:start="341:16" pos:end="341:75">(<expr pos:start="341:17" pos:end="341:74"><name pos:start="341:17" pos:end="341:42"><name pos:start="341:17" pos:end="341:34">substream_data_len</name><index pos:start="341:35" pos:end="341:42">[<expr pos:start="341:36" pos:end="341:41"><name pos:start="341:36" pos:end="341:41">substr</name></expr>]</index></name> <operator pos:start="341:44" pos:end="341:44">*</operator> <literal type="number" pos:start="341:46" pos:end="341:48">8</literal> <operator pos:start="341:48" pos:end="341:48">-</operator> <call pos:start="341:50" pos:end="341:68"><name pos:start="341:50" pos:end="341:63">get_bits_count</name><argument_list pos:start="341:64" pos:end="341:68">(<argument pos:start="341:65" pos:end="341:67"><expr pos:start="341:65" pos:end="341:67"><operator pos:start="341:65" pos:end="341:65">&amp;</operator><name pos:start="341:66" pos:end="341:67">gb</name></expr></argument>)</argument_list></call> <operator pos:start="341:70" pos:end="341:71">!=</operator> <literal type="number" pos:start="341:73" pos:end="341:74">16</literal></expr>)</condition><block type="pseudo" pos:start="343:17" pos:end="343:47"><block_content pos:start="343:17" pos:end="343:47">

                <goto pos:start="343:17" pos:end="343:47">goto <name pos:start="343:22" pos:end="343:46">substream_length_mismatch</name>;</goto></block_content></block></if></if_stmt>



            <expr_stmt pos:start="347:13" pos:end="347:84"><expr pos:start="347:13" pos:end="347:83"><name pos:start="347:13" pos:end="347:18">parity</name>   <operator pos:start="347:22" pos:end="347:22">=</operator> <call pos:start="347:24" pos:end="347:83"><name pos:start="347:24" pos:end="347:46">ff_mlp_calculate_parity</name><argument_list pos:start="347:47" pos:end="347:83">(<argument pos:start="347:48" pos:end="347:50"><expr pos:start="347:48" pos:end="347:50"><name pos:start="347:48" pos:end="347:50">buf</name></expr></argument>, <argument pos:start="347:53" pos:end="347:82"><expr pos:start="347:53" pos:end="347:82"><name pos:start="347:53" pos:end="347:78"><name pos:start="347:53" pos:end="347:70">substream_data_len</name><index pos:start="347:71" pos:end="347:78">[<expr pos:start="347:72" pos:end="347:77"><name pos:start="347:72" pos:end="347:77">substr</name></expr>]</index></name> <operator pos:start="347:80" pos:end="347:80">-</operator> <literal type="number" pos:start="347:82" pos:end="347:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="349:13" pos:end="349:84"><expr pos:start="349:13" pos:end="349:83"><name pos:start="349:13" pos:end="349:20">checksum</name> <operator pos:start="349:22" pos:end="349:22">=</operator> <call pos:start="349:24" pos:end="349:83"><name pos:start="349:24" pos:end="349:39">ff_mlp_checksum8</name>       <argument_list pos:start="349:47" pos:end="349:83">(<argument pos:start="349:48" pos:end="349:50"><expr pos:start="349:48" pos:end="349:50"><name pos:start="349:48" pos:end="349:50">buf</name></expr></argument>, <argument pos:start="349:53" pos:end="349:82"><expr pos:start="349:53" pos:end="349:82"><name pos:start="349:53" pos:end="349:78"><name pos:start="349:53" pos:end="349:70">substream_data_len</name><index pos:start="349:71" pos:end="349:78">[<expr pos:start="349:72" pos:end="349:77"><name pos:start="349:72" pos:end="349:77">substr</name></expr>]</index></name> <operator pos:start="349:80" pos:end="349:80">-</operator> <literal type="number" pos:start="349:82" pos:end="349:82">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



            <if_stmt pos:start="353:13" pos:end="355:94"><if pos:start="353:13" pos:end="355:94">if <condition pos:start="353:16" pos:end="353:56">(<expr pos:start="353:17" pos:end="353:51"><operator pos:start="353:17" pos:end="353:17">(</operator><call pos:start="353:18" pos:end="353:33"><name pos:start="353:18" pos:end="353:25">get_bits</name><argument_list pos:start="353:26" pos:end="353:33">(<argument pos:start="353:27" pos:end="353:29"><expr pos:start="353:27" pos:end="353:29"><operator pos:start="353:27" pos:end="353:27">&amp;</operator><name pos:start="353:28" pos:end="353:29">gb</name></expr></argument>, <argument pos:start="353:32" pos:end="353:32"><expr pos:start="353:32" pos:end="353:32"><literal type="number" pos:start="353:32" pos:end="353:32">8</literal></expr></argument>)</argument_list></call> <operator pos:start="353:35" pos:end="353:35">^</operator> <name pos:start="353:37" pos:end="353:42">parity</name><operator pos:start="353:43" pos:end="353:43">)</operator> <operator pos:start="353:45" pos:end="353:46">!=</operator> <literal type="number" pos:start="353:48" pos:end="353:51">0xa9</literal></expr>    )</condition><block type="pseudo" pos:start="355:17" pos:end="355:94"><block_content pos:start="355:17" pos:end="355:94">

                <expr_stmt pos:start="355:17" pos:end="355:94"><expr pos:start="355:17" pos:end="355:93"><call pos:start="355:17" pos:end="355:93"><name pos:start="355:17" pos:end="355:22">av_log</name><argument_list pos:start="355:23" pos:end="355:93">(<argument pos:start="355:24" pos:end="355:31"><expr pos:start="355:24" pos:end="355:31"><name pos:start="355:24" pos:end="355:31"><name pos:start="355:24" pos:end="355:24">m</name><operator pos:start="355:25" pos:end="355:26">-&gt;</operator><name pos:start="355:27" pos:end="355:31">avctx</name></name></expr></argument>, <argument pos:start="355:34" pos:end="355:45"><expr pos:start="355:34" pos:end="355:45"><name pos:start="355:34" pos:end="355:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="355:48" pos:end="355:84"><expr pos:start="355:48" pos:end="355:84"><literal type="string" pos:start="355:48" pos:end="355:84">"Substream %d parity check failed.\n"</literal></expr></argument>, <argument pos:start="355:87" pos:end="355:92"><expr pos:start="355:87" pos:end="355:92"><name pos:start="355:87" pos:end="355:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt pos:start="357:13" pos:end="359:94"><if pos:start="357:13" pos:end="359:94">if <condition pos:start="357:16" pos:end="357:56">( <expr pos:start="357:18" pos:end="357:55"><call pos:start="357:18" pos:end="357:33"><name pos:start="357:18" pos:end="357:25">get_bits</name><argument_list pos:start="357:26" pos:end="357:33">(<argument pos:start="357:27" pos:end="357:29"><expr pos:start="357:27" pos:end="357:29"><operator pos:start="357:27" pos:end="357:27">&amp;</operator><name pos:start="357:28" pos:end="357:29">gb</name></expr></argument>, <argument pos:start="357:32" pos:end="357:32"><expr pos:start="357:32" pos:end="357:32"><literal type="number" pos:start="357:32" pos:end="357:32">8</literal></expr></argument>)</argument_list></call>           <operator pos:start="357:45" pos:end="357:46">!=</operator> <name pos:start="357:48" pos:end="357:55">checksum</name></expr>)</condition><block type="pseudo" pos:start="359:17" pos:end="359:94"><block_content pos:start="359:17" pos:end="359:94">

                <expr_stmt pos:start="359:17" pos:end="359:94"><expr pos:start="359:17" pos:end="359:93"><call pos:start="359:17" pos:end="359:93"><name pos:start="359:17" pos:end="359:22">av_log</name><argument_list pos:start="359:23" pos:end="359:93">(<argument pos:start="359:24" pos:end="359:31"><expr pos:start="359:24" pos:end="359:31"><name pos:start="359:24" pos:end="359:31"><name pos:start="359:24" pos:end="359:24">m</name><operator pos:start="359:25" pos:end="359:26">-&gt;</operator><name pos:start="359:27" pos:end="359:31">avctx</name></name></expr></argument>, <argument pos:start="359:34" pos:end="359:45"><expr pos:start="359:34" pos:end="359:45"><name pos:start="359:34" pos:end="359:45">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="359:48" pos:end="359:80"><expr pos:start="359:48" pos:end="359:80"><literal type="string" pos:start="359:48" pos:end="359:80">"Substream %d checksum failed.\n"</literal></expr></argument>    , <argument pos:start="359:87" pos:end="359:92"><expr pos:start="359:87" pos:end="359:92"><name pos:start="359:87" pos:end="359:92">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="363:9" pos:end="367:9"><if pos:start="363:9" pos:end="367:9">if <condition pos:start="363:12" pos:end="363:66">(<expr pos:start="363:13" pos:end="363:65"><name pos:start="363:13" pos:end="363:38"><name pos:start="363:13" pos:end="363:30">substream_data_len</name><index pos:start="363:31" pos:end="363:38">[<expr pos:start="363:32" pos:end="363:37"><name pos:start="363:32" pos:end="363:37">substr</name></expr>]</index></name> <operator pos:start="363:40" pos:end="363:40">*</operator> <literal type="number" pos:start="363:42" pos:end="363:42">8</literal> <operator pos:start="363:44" pos:end="363:45">!=</operator> <call pos:start="363:47" pos:end="363:65"><name pos:start="363:47" pos:end="363:60">get_bits_count</name><argument_list pos:start="363:61" pos:end="363:65">(<argument pos:start="363:62" pos:end="363:64"><expr pos:start="363:62" pos:end="363:64"><operator pos:start="363:62" pos:end="363:62">&amp;</operator><name pos:start="363:63" pos:end="363:64">gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="363:68" pos:end="367:9">{<block_content pos:start="365:13" pos:end="365:43">

            <goto pos:start="365:13" pos:end="365:43">goto <name pos:start="365:18" pos:end="365:42">substream_length_mismatch</name>;</goto>

        </block_content>}</block></if></if_stmt>



<label pos:start="371:1" pos:end="371:12"><name pos:start="371:1" pos:end="371:11">next_substr</name>:</label>

        <if_stmt pos:start="373:9" pos:end="379:9"><if pos:start="373:9" pos:end="379:9">if <condition pos:start="373:12" pos:end="373:29">(<expr pos:start="373:13" pos:end="373:28"><operator pos:start="373:13" pos:end="373:13">!</operator><name pos:start="373:14" pos:end="373:28"><name pos:start="373:14" pos:end="373:14">s</name><operator pos:start="373:15" pos:end="373:16">-&gt;</operator><name pos:start="373:17" pos:end="373:28">restart_seen</name></name></expr>)</condition> <block pos:start="373:31" pos:end="379:9">{<block_content pos:start="375:13" pos:end="377:75">

            <expr_stmt pos:start="375:13" pos:end="377:75"><expr pos:start="375:13" pos:end="377:74"><call pos:start="375:13" pos:end="377:74"><name pos:start="375:13" pos:end="375:18">av_log</name><argument_list pos:start="375:19" pos:end="377:74">(<argument pos:start="375:20" pos:end="375:27"><expr pos:start="375:20" pos:end="375:27"><name pos:start="375:20" pos:end="375:27"><name pos:start="375:20" pos:end="375:20">m</name><operator pos:start="375:21" pos:end="375:22">-&gt;</operator><name pos:start="375:23" pos:end="375:27">avctx</name></name></expr></argument>, <argument pos:start="375:30" pos:end="375:41"><expr pos:start="375:30" pos:end="375:41"><name pos:start="375:30" pos:end="375:41">AV_LOG_ERROR</name></expr></argument>,

                   <argument pos:start="377:20" pos:end="377:65"><expr pos:start="377:20" pos:end="377:65"><literal type="string" pos:start="377:20" pos:end="377:65">"No restart header present in substream %d.\n"</literal></expr></argument>, <argument pos:start="377:68" pos:end="377:73"><expr pos:start="377:68" pos:end="377:73"><name pos:start="377:68" pos:end="377:73">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="383:9" pos:end="383:42"><expr pos:start="383:9" pos:end="383:41"><name pos:start="383:9" pos:end="383:11">buf</name> <operator pos:start="383:13" pos:end="383:14">+=</operator> <name pos:start="383:16" pos:end="383:41"><name pos:start="383:16" pos:end="383:33">substream_data_len</name><index pos:start="383:34" pos:end="383:41">[<expr pos:start="383:35" pos:end="383:40"><name pos:start="383:35" pos:end="383:40">substr</name></expr>]</index></name></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="389:5" pos:end="389:51"><expr pos:start="389:5" pos:end="389:50"><call pos:start="389:5" pos:end="389:50"><name pos:start="389:5" pos:end="389:21">rematrix_channels</name><argument_list pos:start="389:22" pos:end="389:50">(<argument pos:start="389:23" pos:end="389:23"><expr pos:start="389:23" pos:end="389:23"><name pos:start="389:23" pos:end="389:23">m</name></expr></argument>, <argument pos:start="389:26" pos:end="389:49"><expr pos:start="389:26" pos:end="389:49"><name pos:start="389:26" pos:end="389:49"><name pos:start="389:26" pos:end="389:26">m</name><operator pos:start="389:27" pos:end="389:28">-&gt;</operator><name pos:start="389:29" pos:end="389:49">max_decoded_substream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="393:5" pos:end="395:18"><if pos:start="393:5" pos:end="395:18">if <condition pos:start="393:8" pos:end="393:70">(<expr pos:start="393:9" pos:end="393:69"><call pos:start="393:9" pos:end="393:65"><name pos:start="393:9" pos:end="393:19">output_data</name><argument_list pos:start="393:20" pos:end="393:65">(<argument pos:start="393:21" pos:end="393:21"><expr pos:start="393:21" pos:end="393:21"><name pos:start="393:21" pos:end="393:21">m</name></expr></argument>, <argument pos:start="393:24" pos:end="393:47"><expr pos:start="393:24" pos:end="393:47"><name pos:start="393:24" pos:end="393:47"><name pos:start="393:24" pos:end="393:24">m</name><operator pos:start="393:25" pos:end="393:26">-&gt;</operator><name pos:start="393:27" pos:end="393:47">max_decoded_substream</name></name></expr></argument>, <argument pos:start="393:50" pos:end="393:53"><expr pos:start="393:50" pos:end="393:53"><name pos:start="393:50" pos:end="393:53">data</name></expr></argument>, <argument pos:start="393:56" pos:end="393:64"><expr pos:start="393:56" pos:end="393:64"><name pos:start="393:56" pos:end="393:64">data_size</name></expr></argument>)</argument_list></call> <operator pos:start="393:67" pos:end="393:67">&lt;</operator> <literal type="number" pos:start="393:69" pos:end="393:69">0</literal></expr>)</condition><block type="pseudo" pos:start="395:9" pos:end="395:18"><block_content pos:start="395:9" pos:end="395:18">

        <return pos:start="395:9" pos:end="395:18">return <expr pos:start="395:16" pos:end="395:17"><operator pos:start="395:16" pos:end="395:16">-</operator><literal type="number" pos:start="395:17" pos:end="395:17">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <return pos:start="399:5" pos:end="399:18">return <expr pos:start="399:12" pos:end="399:17"><name pos:start="399:12" pos:end="399:17">length</name></expr>;</return>



<label pos:start="403:1" pos:end="403:26"><name pos:start="403:1" pos:end="403:25">substream_length_mismatch</name>:</label>

    <expr_stmt pos:start="405:5" pos:end="405:77"><expr pos:start="405:5" pos:end="405:76"><call pos:start="405:5" pos:end="405:76"><name pos:start="405:5" pos:end="405:10">av_log</name><argument_list pos:start="405:11" pos:end="405:76">(<argument pos:start="405:12" pos:end="405:19"><expr pos:start="405:12" pos:end="405:19"><name pos:start="405:12" pos:end="405:19"><name pos:start="405:12" pos:end="405:12">m</name><operator pos:start="405:13" pos:end="405:14">-&gt;</operator><name pos:start="405:15" pos:end="405:19">avctx</name></name></expr></argument>, <argument pos:start="405:22" pos:end="405:33"><expr pos:start="405:22" pos:end="405:33"><name pos:start="405:22" pos:end="405:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="405:36" pos:end="405:67"><expr pos:start="405:36" pos:end="405:67"><literal type="string" pos:start="405:36" pos:end="405:67">"substream %d length mismatch\n"</literal></expr></argument>, <argument pos:start="405:70" pos:end="405:75"><expr pos:start="405:70" pos:end="405:75"><name pos:start="405:70" pos:end="405:75">substr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="407:5" pos:end="407:14">return <expr pos:start="407:12" pos:end="407:13"><operator pos:start="407:12" pos:end="407:12">-</operator><literal type="number" pos:start="407:13" pos:end="407:13">1</literal></expr>;</return>



<label pos:start="411:1" pos:end="411:6"><name pos:start="411:1" pos:end="411:5">error</name>:</label>

    <expr_stmt pos:start="413:5" pos:end="413:24"><expr pos:start="413:5" pos:end="413:23"><name pos:start="413:5" pos:end="413:19"><name pos:start="413:5" pos:end="413:5">m</name><operator pos:start="413:6" pos:end="413:7">-&gt;</operator><name pos:start="413:8" pos:end="413:19">params_valid</name></name> <operator pos:start="413:21" pos:end="413:21">=</operator> <literal type="number" pos:start="413:23" pos:end="413:23">0</literal></expr>;</expr_stmt>

    <return pos:start="415:5" pos:end="415:14">return <expr pos:start="415:12" pos:end="415:13"><operator pos:start="415:12" pos:end="415:12">-</operator><literal type="number" pos:start="415:13" pos:end="415:13">1</literal></expr>;</return>

</block_content>}</block></function>
</unit>
