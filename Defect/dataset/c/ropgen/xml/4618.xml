<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/4618.c" pos:tabs="8"><function pos:start="1:1" pos:end="71:1"><type pos:start="1:1" pos:end="1:20"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:18">DeviceClass</name> <modifier pos:start="1:20" pos:end="1:20">*</modifier></type><name pos:start="1:21" pos:end="1:41">qdev_get_device_class</name><parameter_list pos:start="1:42" pos:end="1:76">(<parameter pos:start="1:43" pos:end="1:61"><decl pos:start="1:43" pos:end="1:61"><type pos:start="1:43" pos:end="1:61"><specifier pos:start="1:43" pos:end="1:47">const</specifier> <name pos:start="1:49" pos:end="1:52">char</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier><modifier pos:start="1:55" pos:end="1:55">*</modifier></type><name pos:start="1:56" pos:end="1:61">driver</name></decl></parameter>, <parameter pos:start="1:64" pos:end="1:75"><decl pos:start="1:64" pos:end="1:75"><type pos:start="1:64" pos:end="1:75"><name pos:start="1:64" pos:end="1:68">Error</name> <modifier pos:start="1:70" pos:end="1:70">*</modifier><modifier pos:start="1:71" pos:end="1:71">*</modifier></type><name pos:start="1:72" pos:end="1:75">errp</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="71:1">{<block_content pos:start="5:5" pos:end="69:14">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">ObjectClass</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:19">oc</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:20"><decl pos:start="7:5" pos:end="7:19"><type pos:start="7:5" pos:end="7:17"><name pos:start="7:5" pos:end="7:15">DeviceClass</name> <modifier pos:start="7:17" pos:end="7:17">*</modifier></type><name pos:start="7:18" pos:end="7:19">dc</name></decl>;</decl_stmt>



    <expr_stmt pos:start="11:5" pos:end="11:39"><expr pos:start="11:5" pos:end="11:38"><name pos:start="11:5" pos:end="11:6">oc</name> <operator pos:start="11:8" pos:end="11:8">=</operator> <call pos:start="11:10" pos:end="11:38"><name pos:start="11:10" pos:end="11:29">object_class_by_name</name><argument_list pos:start="11:30" pos:end="11:38">(<argument pos:start="11:31" pos:end="11:37"><expr pos:start="11:31" pos:end="11:37"><operator pos:start="11:31" pos:end="11:31">*</operator><name pos:start="11:32" pos:end="11:37">driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="13:5" pos:end="27:5"><if pos:start="13:5" pos:end="27:5">if <condition pos:start="13:8" pos:end="13:12">(<expr pos:start="13:9" pos:end="13:11"><operator pos:start="13:9" pos:end="13:9">!</operator><name pos:start="13:10" pos:end="13:11">oc</name></expr>)</condition> <block pos:start="13:14" pos:end="27:5">{<block_content pos:start="15:9" pos:end="25:9">

        <decl_stmt pos:start="15:9" pos:end="15:63"><decl pos:start="15:9" pos:end="15:62"><type pos:start="15:9" pos:end="15:20"><specifier pos:start="15:9" pos:end="15:13">const</specifier> <name pos:start="15:15" pos:end="15:18">char</name> <modifier pos:start="15:20" pos:end="15:20">*</modifier></type><name pos:start="15:21" pos:end="15:28">typename</name> <init pos:start="15:30" pos:end="15:62">= <expr pos:start="15:32" pos:end="15:62"><call pos:start="15:32" pos:end="15:62"><name pos:start="15:32" pos:end="15:53">find_typename_by_alias</name><argument_list pos:start="15:54" pos:end="15:62">(<argument pos:start="15:55" pos:end="15:61"><expr pos:start="15:55" pos:end="15:61"><operator pos:start="15:55" pos:end="15:55">*</operator><name pos:start="15:56" pos:end="15:61">driver</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="19:21">(<expr pos:start="19:13" pos:end="19:20"><name pos:start="19:13" pos:end="19:20">typename</name></expr>)</condition> <block pos:start="19:23" pos:end="25:9">{<block_content pos:start="21:13" pos:end="23:47">

            <expr_stmt pos:start="21:13" pos:end="21:31"><expr pos:start="21:13" pos:end="21:30"><operator pos:start="21:13" pos:end="21:13">*</operator><name pos:start="21:14" pos:end="21:19">driver</name> <operator pos:start="21:21" pos:end="21:21">=</operator> <name pos:start="21:23" pos:end="21:30">typename</name></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:47"><expr pos:start="23:13" pos:end="23:46"><name pos:start="23:13" pos:end="23:14">oc</name> <operator pos:start="23:16" pos:end="23:16">=</operator> <call pos:start="23:18" pos:end="23:46"><name pos:start="23:18" pos:end="23:37">object_class_by_name</name><argument_list pos:start="23:38" pos:end="23:46">(<argument pos:start="23:39" pos:end="23:45"><expr pos:start="23:39" pos:end="23:45"><operator pos:start="23:39" pos:end="23:39">*</operator><name pos:start="23:40" pos:end="23:45">driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:52">(<expr pos:start="31:9" pos:end="31:51"><operator pos:start="31:9" pos:end="31:9">!</operator><call pos:start="31:10" pos:end="31:51"><name pos:start="31:10" pos:end="31:34">object_class_dynamic_cast</name><argument_list pos:start="31:35" pos:end="31:51">(<argument pos:start="31:36" pos:end="31:37"><expr pos:start="31:36" pos:end="31:37"><name pos:start="31:36" pos:end="31:37">oc</name></expr></argument>, <argument pos:start="31:40" pos:end="31:50"><expr pos:start="31:40" pos:end="31:50"><name pos:start="31:40" pos:end="31:50">TYPE_DEVICE</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:54" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:20">

        <expr_stmt pos:start="33:9" pos:end="33:75"><expr pos:start="33:9" pos:end="33:74"><call pos:start="33:9" pos:end="33:74"><name pos:start="33:9" pos:end="33:18">error_setg</name><argument_list pos:start="33:19" pos:end="33:74">(<argument pos:start="33:20" pos:end="33:23"><expr pos:start="33:20" pos:end="33:23"><name pos:start="33:20" pos:end="33:23">errp</name></expr></argument>, <argument pos:start="33:26" pos:end="33:64"><expr pos:start="33:26" pos:end="33:64"><literal type="string" pos:start="33:26" pos:end="33:64">"'%s' is not a valid device model name"</literal></expr></argument>, <argument pos:start="33:67" pos:end="33:73"><expr pos:start="33:67" pos:end="33:73"><operator pos:start="33:67" pos:end="33:67">*</operator><name pos:start="33:68" pos:end="33:73">driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="35:9" pos:end="35:20">return <expr pos:start="35:16" pos:end="35:19"><name pos:start="35:16" pos:end="35:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="41:5" pos:end="49:5"><if pos:start="41:5" pos:end="49:5">if <condition pos:start="41:8" pos:end="41:37">(<expr pos:start="41:9" pos:end="41:36"><call pos:start="41:9" pos:end="41:36"><name pos:start="41:9" pos:end="41:32">object_class_is_abstract</name><argument_list pos:start="41:33" pos:end="41:36">(<argument pos:start="41:34" pos:end="41:35"><expr pos:start="41:34" pos:end="41:35"><name pos:start="41:34" pos:end="41:35">oc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="41:39" pos:end="49:5">{<block_content pos:start="43:9" pos:end="47:20">

        <expr_stmt pos:start="43:9" pos:end="45:47"><expr pos:start="43:9" pos:end="45:46"><call pos:start="43:9" pos:end="45:46"><name pos:start="43:9" pos:end="43:18">error_setg</name><argument_list pos:start="43:19" pos:end="45:46">(<argument pos:start="43:20" pos:end="43:23"><expr pos:start="43:20" pos:end="43:23"><name pos:start="43:20" pos:end="43:23">errp</name></expr></argument>, <argument pos:start="43:26" pos:end="43:53"><expr pos:start="43:26" pos:end="43:53"><name pos:start="43:26" pos:end="43:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="43:56" pos:end="43:63"><expr pos:start="43:56" pos:end="43:63"><literal type="string" pos:start="43:56" pos:end="43:63">"driver"</literal></expr></argument>,

                   <argument pos:start="45:20" pos:end="45:45"><expr pos:start="45:20" pos:end="45:45"><literal type="string" pos:start="45:20" pos:end="45:45">"non-abstract device type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="47:9" pos:end="47:20">return <expr pos:start="47:16" pos:end="47:19"><name pos:start="47:16" pos:end="47:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="53:5" pos:end="53:26"><expr pos:start="53:5" pos:end="53:25"><name pos:start="53:5" pos:end="53:6">dc</name> <operator pos:start="53:8" pos:end="53:8">=</operator> <call pos:start="53:10" pos:end="53:25"><name pos:start="53:10" pos:end="53:21">DEVICE_CLASS</name><argument_list pos:start="53:22" pos:end="53:25">(<argument pos:start="53:23" pos:end="53:24"><expr pos:start="53:23" pos:end="53:24"><name pos:start="53:23" pos:end="53:24">oc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="55:5" pos:end="65:5"><if pos:start="55:5" pos:end="65:5">if <condition pos:start="55:8" pos:end="57:44">(<expr pos:start="55:9" pos:end="57:43"><name pos:start="55:9" pos:end="55:50"><name pos:start="55:9" pos:end="55:10">dc</name><operator pos:start="55:11" pos:end="55:12">-&gt;</operator><name pos:start="55:13" pos:end="55:50">cannot_instantiate_with_device_add_yet</name></name> <operator pos:start="55:52" pos:end="55:53">||</operator>

        <operator pos:start="57:9" pos:end="57:9">(</operator><name pos:start="57:10" pos:end="57:21">qdev_hotplug</name> <operator pos:start="57:23" pos:end="57:24">&amp;&amp;</operator> <operator pos:start="57:26" pos:end="57:26">!</operator><name pos:start="57:27" pos:end="57:42"><name pos:start="57:27" pos:end="57:28">dc</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:42">hotpluggable</name></name><operator pos:start="57:43" pos:end="57:43">)</operator></expr>)</condition> <block pos:start="57:46" pos:end="65:5">{<block_content pos:start="59:9" pos:end="63:20">

        <expr_stmt pos:start="59:9" pos:end="61:44"><expr pos:start="59:9" pos:end="61:43"><call pos:start="59:9" pos:end="61:43"><name pos:start="59:9" pos:end="59:18">error_setg</name><argument_list pos:start="59:19" pos:end="61:43">(<argument pos:start="59:20" pos:end="59:23"><expr pos:start="59:20" pos:end="59:23"><name pos:start="59:20" pos:end="59:23">errp</name></expr></argument>, <argument pos:start="59:26" pos:end="59:53"><expr pos:start="59:26" pos:end="59:53"><name pos:start="59:26" pos:end="59:53">QERR_INVALID_PARAMETER_VALUE</name></expr></argument>, <argument pos:start="59:56" pos:end="59:63"><expr pos:start="59:56" pos:end="59:63"><literal type="string" pos:start="59:56" pos:end="59:63">"driver"</literal></expr></argument>,

                   <argument pos:start="61:20" pos:end="61:42"><expr pos:start="61:20" pos:end="61:42"><literal type="string" pos:start="61:20" pos:end="61:42">"pluggable device type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="63:9" pos:end="63:20">return <expr pos:start="63:16" pos:end="63:19"><name pos:start="63:16" pos:end="63:19">NULL</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <return pos:start="69:5" pos:end="69:14">return <expr pos:start="69:12" pos:end="69:13"><name pos:start="69:12" pos:end="69:13">dc</name></expr>;</return>

</block_content>}</block></function>
</unit>
