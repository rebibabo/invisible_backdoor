<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/9000.c" pos:tabs="8"><function pos:start="1:1" pos:end="113:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:29">unix_connect_saddr</name><parameter_list pos:start="1:30" pos:end="5:43">(<parameter pos:start="1:31" pos:end="1:54"><decl pos:start="1:31" pos:end="1:54"><type pos:start="1:31" pos:end="1:54"><name pos:start="1:31" pos:end="1:47">UnixSocketAddress</name> <modifier pos:start="1:49" pos:end="1:49">*</modifier></type><name pos:start="1:50" pos:end="1:54">saddr</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:65"><decl pos:start="3:31" pos:end="3:65"><type pos:start="3:31" pos:end="3:65"><name pos:start="3:31" pos:end="3:55">NonBlockingConnectHandler</name> <modifier pos:start="3:57" pos:end="3:57">*</modifier></type><name pos:start="3:58" pos:end="3:65">callback</name></decl></parameter>, <parameter pos:start="3:68" pos:end="3:79"><decl pos:start="3:68" pos:end="3:79"><type pos:start="3:68" pos:end="3:79"><name pos:start="3:68" pos:end="3:71">void</name> <modifier pos:start="3:73" pos:end="3:73">*</modifier></type><name pos:start="3:74" pos:end="3:79">opaque</name></decl></parameter>,

                              <parameter pos:start="5:31" pos:end="5:42"><decl pos:start="5:31" pos:end="5:42"><type pos:start="5:31" pos:end="5:42"><name pos:start="5:31" pos:end="5:35">Error</name> <modifier pos:start="5:37" pos:end="5:37">*</modifier><modifier pos:start="5:38" pos:end="5:38">*</modifier></type><name pos:start="5:39" pos:end="5:42">errp</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="113:1">{<block_content pos:start="9:5" pos:end="111:16">

    <decl_stmt pos:start="9:5" pos:end="9:26"><decl pos:start="9:5" pos:end="9:25"><type pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">sockaddr_un</name></name></type> <name pos:start="9:24" pos:end="9:25">un</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:39"><decl pos:start="11:5" pos:end="11:38"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">ConnectState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:31">connect_state</name> <init pos:start="11:33" pos:end="11:38">= <expr pos:start="11:35" pos:end="11:38"><name pos:start="11:35" pos:end="11:38">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:17"><decl pos:start="13:5" pos:end="13:12"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:12">sock</name></decl>, <decl pos:start="13:15" pos:end="13:16"><type ref="prev" pos:start="13:5" pos:end="13:7"/><name pos:start="13:15" pos:end="13:16">rc</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="23:5"><if pos:start="17:5" pos:end="23:5">if <condition pos:start="17:8" pos:end="17:28">(<expr pos:start="17:9" pos:end="17:27"><name pos:start="17:9" pos:end="17:19"><name pos:start="17:9" pos:end="17:13">saddr</name><operator pos:start="17:14" pos:end="17:15">-&gt;</operator><name pos:start="17:16" pos:end="17:19">path</name></name> <operator pos:start="17:21" pos:end="17:22">==</operator> <name pos:start="17:24" pos:end="17:27">NULL</name></expr>)</condition> <block pos:start="17:30" pos:end="23:5">{<block_content pos:start="19:9" pos:end="21:18">

        <expr_stmt pos:start="19:9" pos:end="19:60"><expr pos:start="19:9" pos:end="19:59"><call pos:start="19:9" pos:end="19:59"><name pos:start="19:9" pos:end="19:18">error_setg</name><argument_list pos:start="19:19" pos:end="19:59">(<argument pos:start="19:20" pos:end="19:23"><expr pos:start="19:20" pos:end="19:23"><name pos:start="19:20" pos:end="19:23">errp</name></expr></argument>, <argument pos:start="19:26" pos:end="19:58"><expr pos:start="19:26" pos:end="19:58"><literal type="string" pos:start="19:26" pos:end="19:58">"unix connect: no path specified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="21:9" pos:end="21:18">return <expr pos:start="21:16" pos:end="21:17"><operator pos:start="21:16" pos:end="21:16">-</operator><literal type="number" pos:start="21:17" pos:end="21:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:48"><expr pos:start="27:5" pos:end="27:47"><name pos:start="27:5" pos:end="27:8">sock</name> <operator pos:start="27:10" pos:end="27:10">=</operator> <call pos:start="27:12" pos:end="27:47"><name pos:start="27:12" pos:end="27:22">qemu_socket</name><argument_list pos:start="27:23" pos:end="27:47">(<argument pos:start="27:24" pos:end="27:30"><expr pos:start="27:24" pos:end="27:30"><name pos:start="27:24" pos:end="27:30">PF_UNIX</name></expr></argument>, <argument pos:start="27:33" pos:end="27:43"><expr pos:start="27:33" pos:end="27:43"><name pos:start="27:33" pos:end="27:43">SOCK_STREAM</name></expr></argument>, <argument pos:start="27:46" pos:end="27:46"><expr pos:start="27:46" pos:end="27:46"><literal type="number" pos:start="27:46" pos:end="27:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="35:5"><if pos:start="29:5" pos:end="35:5">if <condition pos:start="29:8" pos:end="29:17">(<expr pos:start="29:9" pos:end="29:16"><name pos:start="29:9" pos:end="29:12">sock</name> <operator pos:start="29:14" pos:end="29:14">&lt;</operator> <literal type="number" pos:start="29:16" pos:end="29:16">0</literal></expr>)</condition> <block pos:start="29:19" pos:end="35:5">{<block_content pos:start="31:9" pos:end="33:18">

        <expr_stmt pos:start="31:9" pos:end="31:65"><expr pos:start="31:9" pos:end="31:64"><call pos:start="31:9" pos:end="31:64"><name pos:start="31:9" pos:end="31:24">error_setg_errno</name><argument_list pos:start="31:25" pos:end="31:64">(<argument pos:start="31:26" pos:end="31:29"><expr pos:start="31:26" pos:end="31:29"><name pos:start="31:26" pos:end="31:29">errp</name></expr></argument>, <argument pos:start="31:32" pos:end="31:36"><expr pos:start="31:32" pos:end="31:36"><name pos:start="31:32" pos:end="31:36">errno</name></expr></argument>, <argument pos:start="31:39" pos:end="31:63"><expr pos:start="31:39" pos:end="31:63"><literal type="string" pos:start="31:39" pos:end="31:63">"Failed to create socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="33:9" pos:end="33:18">return <expr pos:start="33:16" pos:end="33:17"><operator pos:start="33:16" pos:end="33:16">-</operator><literal type="number" pos:start="33:17" pos:end="33:17">1</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="37:5" pos:end="47:5"><if pos:start="37:5" pos:end="47:5">if <condition pos:start="37:8" pos:end="37:25">(<expr pos:start="37:9" pos:end="37:24"><name pos:start="37:9" pos:end="37:16">callback</name> <operator pos:start="37:18" pos:end="37:19">!=</operator> <name pos:start="37:21" pos:end="37:24">NULL</name></expr>)</condition> <block pos:start="37:27" pos:end="47:5">{<block_content pos:start="39:9" pos:end="45:32">

        <expr_stmt pos:start="39:9" pos:end="39:58"><expr pos:start="39:9" pos:end="39:57"><name pos:start="39:9" pos:end="39:21">connect_state</name> <operator pos:start="39:23" pos:end="39:23">=</operator> <call pos:start="39:25" pos:end="39:57"><name pos:start="39:25" pos:end="39:33">g_malloc0</name><argument_list pos:start="39:34" pos:end="39:57">(<argument pos:start="39:35" pos:end="39:56"><expr pos:start="39:35" pos:end="39:56"><sizeof pos:start="39:35" pos:end="39:56">sizeof<argument_list pos:start="39:41" pos:end="39:56">(<argument pos:start="39:42" pos:end="39:55"><expr pos:start="39:42" pos:end="39:55"><operator pos:start="39:42" pos:end="39:42">*</operator><name pos:start="39:43" pos:end="39:55">connect_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:43"><expr pos:start="41:9" pos:end="41:42"><name pos:start="41:9" pos:end="41:31"><name pos:start="41:9" pos:end="41:21">connect_state</name><operator pos:start="41:22" pos:end="41:23">-&gt;</operator><name pos:start="41:24" pos:end="41:31">callback</name></name> <operator pos:start="41:33" pos:end="41:33">=</operator> <name pos:start="41:35" pos:end="41:42">callback</name></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:39"><expr pos:start="43:9" pos:end="43:38"><name pos:start="43:9" pos:end="43:29"><name pos:start="43:9" pos:end="43:21">connect_state</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:29">opaque</name></name> <operator pos:start="43:31" pos:end="43:31">=</operator> <name pos:start="43:33" pos:end="43:38">opaque</name></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:32"><expr pos:start="45:9" pos:end="45:31"><call pos:start="45:9" pos:end="45:31"><name pos:start="45:9" pos:end="45:25">qemu_set_nonblock</name><argument_list pos:start="45:26" pos:end="45:31">(<argument pos:start="45:27" pos:end="45:30"><expr pos:start="45:27" pos:end="45:30"><name pos:start="45:27" pos:end="45:30">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><call pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:10">memset</name><argument_list pos:start="51:11" pos:end="51:30">(<argument pos:start="51:12" pos:end="51:14"><expr pos:start="51:12" pos:end="51:14"><operator pos:start="51:12" pos:end="51:12">&amp;</operator><name pos:start="51:13" pos:end="51:14">un</name></expr></argument>, <argument pos:start="51:17" pos:end="51:17"><expr pos:start="51:17" pos:end="51:17"><literal type="number" pos:start="51:17" pos:end="51:17">0</literal></expr></argument>, <argument pos:start="51:20" pos:end="51:29"><expr pos:start="51:20" pos:end="51:29"><sizeof pos:start="51:20" pos:end="51:29">sizeof<argument_list pos:start="51:26" pos:end="51:29">(<argument pos:start="51:27" pos:end="51:28"><expr pos:start="51:27" pos:end="51:28"><name pos:start="51:27" pos:end="51:28">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:28"><expr pos:start="53:5" pos:end="53:27"><name pos:start="53:5" pos:end="53:17"><name pos:start="53:5" pos:end="53:6">un</name><operator pos:start="53:7" pos:end="53:7">.</operator><name pos:start="53:8" pos:end="53:17">sun_family</name></name> <operator pos:start="53:19" pos:end="53:19">=</operator> <name pos:start="53:21" pos:end="53:27">AF_UNIX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:66"><expr pos:start="55:5" pos:end="55:65"><call pos:start="55:5" pos:end="55:65"><name pos:start="55:5" pos:end="55:12">snprintf</name><argument_list pos:start="55:13" pos:end="55:65">(<argument pos:start="55:14" pos:end="55:24"><expr pos:start="55:14" pos:end="55:24"><name pos:start="55:14" pos:end="55:24"><name pos:start="55:14" pos:end="55:15">un</name><operator pos:start="55:16" pos:end="55:16">.</operator><name pos:start="55:17" pos:end="55:24">sun_path</name></name></expr></argument>, <argument pos:start="55:27" pos:end="55:45"><expr pos:start="55:27" pos:end="55:45"><sizeof pos:start="55:27" pos:end="55:45">sizeof<argument_list pos:start="55:33" pos:end="55:45">(<argument pos:start="55:34" pos:end="55:44"><expr pos:start="55:34" pos:end="55:44"><name pos:start="55:34" pos:end="55:44"><name pos:start="55:34" pos:end="55:35">un</name><operator pos:start="55:36" pos:end="55:36">.</operator><name pos:start="55:37" pos:end="55:44">sun_path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument pos:start="55:48" pos:end="55:51"><expr pos:start="55:48" pos:end="55:51"><literal type="string" pos:start="55:48" pos:end="55:51">"%s"</literal></expr></argument>, <argument pos:start="55:54" pos:end="55:64"><expr pos:start="55:54" pos:end="55:64"><name pos:start="55:54" pos:end="55:64"><name pos:start="55:54" pos:end="55:58">saddr</name><operator pos:start="55:59" pos:end="55:60">-&gt;</operator><name pos:start="55:61" pos:end="55:64">path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="59:5" pos:end="59:25">/* connect to peer */</comment>

    <do pos:start="61:5" pos:end="71:27">do <block pos:start="61:8" pos:end="71:5">{<block_content pos:start="63:9" pos:end="69:9">

        <expr_stmt pos:start="63:9" pos:end="63:15"><expr pos:start="63:9" pos:end="63:14"><name pos:start="63:9" pos:end="63:10">rc</name> <operator pos:start="63:12" pos:end="63:12">=</operator> <literal type="number" pos:start="63:14" pos:end="63:14">0</literal></expr>;</expr_stmt>

        <if_stmt pos:start="65:9" pos:end="69:9"><if pos:start="65:9" pos:end="69:9">if <condition pos:start="65:12" pos:end="65:67">(<expr pos:start="65:13" pos:end="65:66"><call pos:start="65:13" pos:end="65:62"><name pos:start="65:13" pos:end="65:19">connect</name><argument_list pos:start="65:20" pos:end="65:62">(<argument pos:start="65:21" pos:end="65:24"><expr pos:start="65:21" pos:end="65:24"><name pos:start="65:21" pos:end="65:24">sock</name></expr></argument>, <argument pos:start="65:27" pos:end="65:49"><expr pos:start="65:27" pos:end="65:49"><operator pos:start="65:27" pos:end="65:27">(</operator>struct <name pos:start="65:35" pos:end="65:42">sockaddr</name> <operator pos:start="65:44" pos:end="65:44">*</operator><operator pos:start="65:45" pos:end="65:45">)</operator> <operator pos:start="65:47" pos:end="65:47">&amp;</operator><name pos:start="65:48" pos:end="65:49">un</name></expr></argument>, <argument pos:start="65:52" pos:end="65:61"><expr pos:start="65:52" pos:end="65:61"><sizeof pos:start="65:52" pos:end="65:61">sizeof<argument_list pos:start="65:58" pos:end="65:61">(<argument pos:start="65:59" pos:end="65:60"><expr pos:start="65:59" pos:end="65:60"><name pos:start="65:59" pos:end="65:60">un</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator pos:start="65:64" pos:end="65:64">&lt;</operator> <literal type="number" pos:start="65:66" pos:end="65:66">0</literal></expr>)</condition> <block pos:start="65:69" pos:end="69:9">{<block_content pos:start="67:13" pos:end="67:24">

            <expr_stmt pos:start="67:13" pos:end="67:24"><expr pos:start="67:13" pos:end="67:23"><name pos:start="67:13" pos:end="67:14">rc</name> <operator pos:start="67:16" pos:end="67:16">=</operator> <operator pos:start="67:18" pos:end="67:18">-</operator><name pos:start="67:19" pos:end="67:23">errno</name></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block> while <condition pos:start="71:13" pos:end="71:26">(<expr pos:start="71:14" pos:end="71:25"><name pos:start="71:14" pos:end="71:15">rc</name> <operator pos:start="71:17" pos:end="71:18">==</operator> <operator pos:start="71:20" pos:end="71:20">-</operator><name pos:start="71:21" pos:end="71:25">EINTR</name></expr>)</condition>;</do>



    <if_stmt pos:start="75:5" pos:end="93:5"><if pos:start="75:5" pos:end="83:5">if <condition pos:start="75:8" pos:end="75:63">(<expr pos:start="75:9" pos:end="75:62"><name pos:start="75:9" pos:end="75:21">connect_state</name> <operator pos:start="75:23" pos:end="75:24">!=</operator> <name pos:start="75:26" pos:end="75:29">NULL</name> <operator pos:start="75:31" pos:end="75:32">&amp;&amp;</operator> <call pos:start="75:34" pos:end="75:62"><name pos:start="75:34" pos:end="75:58">QEMU_SOCKET_RC_INPROGRESS</name><argument_list pos:start="75:59" pos:end="75:62">(<argument pos:start="75:60" pos:end="75:61"><expr pos:start="75:60" pos:end="75:61"><name pos:start="75:60" pos:end="75:61">rc</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="75:65" pos:end="83:5">{<block_content pos:start="77:9" pos:end="81:20">

        <expr_stmt pos:start="77:9" pos:end="77:33"><expr pos:start="77:9" pos:end="77:32"><name pos:start="77:9" pos:end="77:25"><name pos:start="77:9" pos:end="77:21">connect_state</name><operator pos:start="77:22" pos:end="77:23">-&gt;</operator><name pos:start="77:24" pos:end="77:25">fd</name></name> <operator pos:start="77:27" pos:end="77:27">=</operator> <name pos:start="77:29" pos:end="77:32">sock</name></expr>;</expr_stmt>

        <expr_stmt pos:start="79:9" pos:end="79:73"><expr pos:start="79:9" pos:end="79:72"><call pos:start="79:9" pos:end="79:72"><name pos:start="79:9" pos:end="79:27">qemu_set_fd_handler</name><argument_list pos:start="79:28" pos:end="79:72">(<argument pos:start="79:29" pos:end="79:32"><expr pos:start="79:29" pos:end="79:32"><name pos:start="79:29" pos:end="79:32">sock</name></expr></argument>, <argument pos:start="79:35" pos:end="79:38"><expr pos:start="79:35" pos:end="79:38"><name pos:start="79:35" pos:end="79:38">NULL</name></expr></argument>, <argument pos:start="79:41" pos:end="79:56"><expr pos:start="79:41" pos:end="79:56"><name pos:start="79:41" pos:end="79:56">wait_for_connect</name></expr></argument>, <argument pos:start="79:59" pos:end="79:71"><expr pos:start="79:59" pos:end="79:71"><name pos:start="79:59" pos:end="79:71">connect_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="81:9" pos:end="81:20">return <expr pos:start="81:16" pos:end="81:19"><name pos:start="81:16" pos:end="81:19">sock</name></expr>;</return>

    </block_content>}</block></if> <if type="elseif" pos:start="83:7" pos:end="93:5">else if <condition pos:start="83:15" pos:end="83:23">(<expr pos:start="83:16" pos:end="83:22"><name pos:start="83:16" pos:end="83:17">rc</name> <operator pos:start="83:19" pos:end="83:20">&gt;=</operator> <literal type="number" pos:start="83:22" pos:end="83:22">0</literal></expr>)</condition> <block pos:start="83:25" pos:end="93:5">{<block_content pos:start="87:9" pos:end="91:9">

        <comment type="block" pos:start="85:9" pos:end="85:66">/* non blocking socket immediate success, call callback */</comment>

        <if_stmt pos:start="87:9" pos:end="91:9"><if pos:start="87:9" pos:end="91:9">if <condition pos:start="87:12" pos:end="87:29">(<expr pos:start="87:13" pos:end="87:28"><name pos:start="87:13" pos:end="87:20">callback</name> <operator pos:start="87:22" pos:end="87:23">!=</operator> <name pos:start="87:25" pos:end="87:28">NULL</name></expr>)</condition> <block pos:start="87:31" pos:end="91:9">{<block_content pos:start="89:13" pos:end="89:41">

            <expr_stmt pos:start="89:13" pos:end="89:41"><expr pos:start="89:13" pos:end="89:40"><call pos:start="89:13" pos:end="89:40"><name pos:start="89:13" pos:end="89:20">callback</name><argument_list pos:start="89:21" pos:end="89:40">(<argument pos:start="89:22" pos:end="89:25"><expr pos:start="89:22" pos:end="89:25"><name pos:start="89:22" pos:end="89:25">sock</name></expr></argument>, <argument pos:start="89:28" pos:end="89:31"><expr pos:start="89:28" pos:end="89:31"><name pos:start="89:28" pos:end="89:31">NULL</name></expr></argument>, <argument pos:start="89:34" pos:end="89:39"><expr pos:start="89:34" pos:end="89:39"><name pos:start="89:34" pos:end="89:39">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="97:5" pos:end="105:5"><if pos:start="97:5" pos:end="105:5">if <condition pos:start="97:8" pos:end="97:15">(<expr pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:10">rc</name> <operator pos:start="97:12" pos:end="97:12">&lt;</operator> <literal type="number" pos:start="97:14" pos:end="97:14">0</literal></expr>)</condition> <block pos:start="97:17" pos:end="105:5">{<block_content pos:start="99:9" pos:end="103:18">

        <expr_stmt pos:start="99:9" pos:end="99:64"><expr pos:start="99:9" pos:end="99:63"><call pos:start="99:9" pos:end="99:63"><name pos:start="99:9" pos:end="99:24">error_setg_errno</name><argument_list pos:start="99:25" pos:end="99:63">(<argument pos:start="99:26" pos:end="99:29"><expr pos:start="99:26" pos:end="99:29"><name pos:start="99:26" pos:end="99:29">errp</name></expr></argument>, <argument pos:start="99:32" pos:end="99:34"><expr pos:start="99:32" pos:end="99:34"><operator pos:start="99:32" pos:end="99:32">-</operator><name pos:start="99:33" pos:end="99:34">rc</name></expr></argument>, <argument pos:start="99:37" pos:end="99:62"><expr pos:start="99:37" pos:end="99:62"><literal type="string" pos:start="99:37" pos:end="99:62">"Failed to connect socket"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:20"><expr pos:start="101:9" pos:end="101:19"><call pos:start="101:9" pos:end="101:19"><name pos:start="101:9" pos:end="101:13">close</name><argument_list pos:start="101:14" pos:end="101:19">(<argument pos:start="101:15" pos:end="101:18"><expr pos:start="101:15" pos:end="101:18"><name pos:start="101:15" pos:end="101:18">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="103:9" pos:end="103:18"><expr pos:start="103:9" pos:end="103:17"><name pos:start="103:9" pos:end="103:12">sock</name> <operator pos:start="103:14" pos:end="103:14">=</operator> <operator pos:start="103:16" pos:end="103:16">-</operator><literal type="number" pos:start="103:17" pos:end="103:17">1</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:26"><expr pos:start="109:5" pos:end="109:25"><call pos:start="109:5" pos:end="109:25"><name pos:start="109:5" pos:end="109:10">g_free</name><argument_list pos:start="109:11" pos:end="109:25">(<argument pos:start="109:12" pos:end="109:24"><expr pos:start="109:12" pos:end="109:24"><name pos:start="109:12" pos:end="109:24">connect_state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="111:5" pos:end="111:16">return <expr pos:start="111:12" pos:end="111:15"><name pos:start="111:12" pos:end="111:15">sock</name></expr>;</return>

</block_content>}</block></function>
</unit>
