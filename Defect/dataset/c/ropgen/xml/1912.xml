<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/1912.c" pos:tabs="8"><function pos:start="1:1" pos:end="283:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">mips_r4k_init</name><parameter_list pos:start="1:19" pos:end="1:41">(<parameter pos:start="1:20" pos:end="1:40"><decl pos:start="1:20" pos:end="1:40"><type pos:start="1:20" pos:end="1:33"><name pos:start="1:20" pos:end="1:31">MachineState</name> <modifier pos:start="1:33" pos:end="1:33">*</modifier></type><name pos:start="1:34" pos:end="1:40">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="283:1">{<block_content pos:start="5:5" pos:end="281:40">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:57"><decl pos:start="11:5" pos:end="11:56"><type pos:start="11:5" pos:end="11:16"><specifier pos:start="11:5" pos:end="11:9">const</specifier> <name pos:start="11:11" pos:end="11:14">char</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:30">kernel_cmdline</name> <init pos:start="11:32" pos:end="11:56">= <expr pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:56"><name pos:start="11:34" pos:end="11:40">machine</name><operator pos:start="11:41" pos:end="11:42">-&gt;</operator><name pos:start="11:43" pos:end="11:56">kernel_cmdline</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:59"><decl pos:start="13:5" pos:end="13:58"><type pos:start="13:5" pos:end="13:16"><specifier pos:start="13:5" pos:end="13:9">const</specifier> <name pos:start="13:11" pos:end="13:14">char</name> <modifier pos:start="13:16" pos:end="13:16">*</modifier></type><name pos:start="13:17" pos:end="13:31">initrd_filename</name> <init pos:start="13:33" pos:end="13:58">= <expr pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:58"><name pos:start="13:35" pos:end="13:41">machine</name><operator pos:start="13:42" pos:end="13:43">-&gt;</operator><name pos:start="13:44" pos:end="13:58">initrd_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:19"><decl pos:start="15:5" pos:end="15:18"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:18">filename</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:58"><decl pos:start="17:5" pos:end="17:57"><type pos:start="17:5" pos:end="17:18"><name pos:start="17:5" pos:end="17:16">MemoryRegion</name> <modifier pos:start="17:18" pos:end="17:18">*</modifier></type><name pos:start="17:19" pos:end="17:35">address_space_mem</name> <init pos:start="17:37" pos:end="17:57">= <expr pos:start="17:39" pos:end="17:57"><call pos:start="17:39" pos:end="17:57"><name pos:start="17:39" pos:end="17:55">get_system_memory</name><argument_list pos:start="17:56" pos:end="17:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:47"><decl pos:start="19:5" pos:end="19:46"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:21">ram</name> <init pos:start="19:23" pos:end="19:46">= <expr pos:start="19:25" pos:end="19:46"><call pos:start="19:25" pos:end="19:46"><name pos:start="19:25" pos:end="19:29">g_new</name><argument_list pos:start="19:30" pos:end="19:46">(<argument pos:start="19:31" pos:end="19:42"><expr pos:start="19:31" pos:end="19:42"><name pos:start="19:31" pos:end="19:42">MemoryRegion</name></expr></argument>, <argument pos:start="19:45" pos:end="19:45"><expr pos:start="19:45" pos:end="19:45"><literal type="number" pos:start="19:45" pos:end="19:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:23"><decl pos:start="21:5" pos:end="21:22"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:22">bios</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:49"><decl pos:start="23:5" pos:end="23:48"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:23">iomem</name> <init pos:start="23:25" pos:end="23:48">= <expr pos:start="23:27" pos:end="23:48"><call pos:start="23:27" pos:end="23:48"><name pos:start="23:27" pos:end="23:31">g_new</name><argument_list pos:start="23:32" pos:end="23:48">(<argument pos:start="23:33" pos:end="23:44"><expr pos:start="23:33" pos:end="23:44"><name pos:start="23:33" pos:end="23:44">MemoryRegion</name></expr></argument>, <argument pos:start="23:47" pos:end="23:47"><expr pos:start="23:47" pos:end="23:47"><literal type="number" pos:start="23:47" pos:end="23:47">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:50"><decl pos:start="25:5" pos:end="25:49"><type pos:start="25:5" pos:end="25:18"><name pos:start="25:5" pos:end="25:16">MemoryRegion</name> <modifier pos:start="25:18" pos:end="25:18">*</modifier></type><name pos:start="25:19" pos:end="25:24">isa_io</name> <init pos:start="25:26" pos:end="25:49">= <expr pos:start="25:28" pos:end="25:49"><call pos:start="25:28" pos:end="25:49"><name pos:start="25:28" pos:end="25:32">g_new</name><argument_list pos:start="25:33" pos:end="25:49">(<argument pos:start="25:34" pos:end="25:45"><expr pos:start="25:34" pos:end="25:45"><name pos:start="25:34" pos:end="25:45">MemoryRegion</name></expr></argument>, <argument pos:start="25:48" pos:end="25:48"><expr pos:start="25:48" pos:end="25:48"><literal type="number" pos:start="25:48" pos:end="25:48">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:51"><decl pos:start="27:5" pos:end="27:50"><type pos:start="27:5" pos:end="27:18"><name pos:start="27:5" pos:end="27:16">MemoryRegion</name> <modifier pos:start="27:18" pos:end="27:18">*</modifier></type><name pos:start="27:19" pos:end="27:25">isa_mem</name> <init pos:start="27:27" pos:end="27:50">= <expr pos:start="27:29" pos:end="27:50"><call pos:start="27:29" pos:end="27:50"><name pos:start="27:29" pos:end="27:33">g_new</name><argument_list pos:start="27:34" pos:end="27:50">(<argument pos:start="27:35" pos:end="27:46"><expr pos:start="27:35" pos:end="27:46"><name pos:start="27:35" pos:end="27:46">MemoryRegion</name></expr></argument>, <argument pos:start="27:49" pos:end="27:49"><expr pos:start="27:49" pos:end="27:49"><literal type="number" pos:start="27:49" pos:end="27:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:18"><decl pos:start="29:5" pos:end="29:17"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:17">bios_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:17"><decl pos:start="31:5" pos:end="31:16"><type pos:start="31:5" pos:end="31:13"><name pos:start="31:5" pos:end="31:11">MIPSCPU</name> <modifier pos:start="31:13" pos:end="31:13">*</modifier></type><name pos:start="31:14" pos:end="31:16">cpu</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:22"><decl pos:start="33:5" pos:end="33:21"><type pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:16">CPUMIPSState</name> <modifier pos:start="33:18" pos:end="33:18">*</modifier></type><name pos:start="33:19" pos:end="33:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:26"><decl pos:start="35:5" pos:end="35:25"><type pos:start="35:5" pos:end="35:15"><name pos:start="35:5" pos:end="35:13">ResetData</name> <modifier pos:start="35:15" pos:end="35:15">*</modifier></type><name pos:start="35:16" pos:end="35:25">reset_info</name></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:10"><decl pos:start="37:5" pos:end="37:9"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:9">i</name></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:20"><decl pos:start="39:5" pos:end="39:19"><type pos:start="39:5" pos:end="39:14"><name pos:start="39:5" pos:end="39:12">qemu_irq</name> <modifier pos:start="39:14" pos:end="39:14">*</modifier></type><name pos:start="39:15" pos:end="39:19">i8259</name></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:20"><decl pos:start="41:5" pos:end="41:19"><type pos:start="41:5" pos:end="41:12"><name pos:start="41:5" pos:end="41:10">ISABus</name> <modifier pos:start="41:12" pos:end="41:12">*</modifier></type><name pos:start="41:13" pos:end="41:19">isa_bus</name></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:46"><decl pos:start="43:5" pos:end="43:45"><type pos:start="43:5" pos:end="43:15"><name pos:start="43:5" pos:end="43:13">DriveInfo</name> <modifier pos:start="43:15" pos:end="43:15">*</modifier></type><name pos:start="43:16" pos:end="43:45"><name pos:start="43:16" pos:end="43:17">hd</name><index pos:start="43:18" pos:end="43:45">[<expr pos:start="43:19" pos:end="43:44"><name pos:start="43:19" pos:end="43:29">MAX_IDE_BUS</name> <operator pos:start="43:31" pos:end="43:31">*</operator> <name pos:start="43:33" pos:end="43:44">MAX_IDE_DEVS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="45:5" pos:end="45:21"><decl pos:start="45:5" pos:end="45:20"><type pos:start="45:5" pos:end="45:15"><name pos:start="45:5" pos:end="45:13">DriveInfo</name> <modifier pos:start="45:15" pos:end="45:15">*</modifier></type><name pos:start="45:16" pos:end="45:20">dinfo</name></decl>;</decl_stmt>

    <decl_stmt pos:start="47:5" pos:end="47:11"><decl pos:start="47:5" pos:end="47:10"><type pos:start="47:5" pos:end="47:7"><name pos:start="47:5" pos:end="47:7">int</name></type> <name pos:start="47:9" pos:end="47:10">be</name></decl>;</decl_stmt>



    <comment type="block" pos:start="51:5" pos:end="51:19">/* init CPUs */</comment>

    <if_stmt pos:start="53:5" pos:end="65:5"><if pos:start="53:5" pos:end="65:5">if <condition pos:start="53:8" pos:end="53:26">(<expr pos:start="53:9" pos:end="53:25"><name pos:start="53:9" pos:end="53:17">cpu_model</name> <operator pos:start="53:19" pos:end="53:20">==</operator> <name pos:start="53:22" pos:end="53:25">NULL</name></expr>)</condition> <block pos:start="53:28" pos:end="65:5">{<block_content pos:start="57:9" pos:end="64:0">

<cpp:ifdef pos:start="55:1" pos:end="55:20">#<cpp:directive pos:start="55:2" pos:end="55:6">ifdef</cpp:directive> <name pos:start="55:8" pos:end="55:20">TARGET_MIPS64</name></cpp:ifdef>

        <expr_stmt pos:start="57:9" pos:end="60:0"><expr pos:start="57:9" pos:end="57:27"><name pos:start="57:9" pos:end="57:17">cpu_model</name> <operator pos:start="57:19" pos:end="57:19">=</operator> <literal type="string" pos:start="57:21" pos:end="57:27">"R4000"</literal></expr>;</expr_stmt>

<cpp:else pos:start="59:1" pos:end="59:5">#<cpp:directive pos:start="59:2" pos:end="59:5">else</cpp:directive></cpp:else>

        <expr_stmt pos:start="61:9" pos:end="64:0"><expr pos:start="61:9" pos:end="61:26"><name pos:start="61:9" pos:end="61:17">cpu_model</name> <operator pos:start="61:19" pos:end="61:19">=</operator> <literal type="string" pos:start="61:21" pos:end="61:26">"24Kf"</literal></expr>;</expr_stmt>

<cpp:endif pos:start="63:1" pos:end="63:6">#<cpp:directive pos:start="63:2" pos:end="63:6">endif</cpp:directive></cpp:endif>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:35"><expr pos:start="67:5" pos:end="67:34"><name pos:start="67:5" pos:end="67:7">cpu</name> <operator pos:start="67:9" pos:end="67:9">=</operator> <call pos:start="67:11" pos:end="67:34"><name pos:start="67:11" pos:end="67:23">cpu_mips_init</name><argument_list pos:start="67:24" pos:end="67:34">(<argument pos:start="67:25" pos:end="67:33"><expr pos:start="67:25" pos:end="67:33"><name pos:start="67:25" pos:end="67:33">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="69:20">(<expr pos:start="69:9" pos:end="69:19"><name pos:start="69:9" pos:end="69:11">cpu</name> <operator pos:start="69:13" pos:end="69:14">==</operator> <name pos:start="69:16" pos:end="69:19">NULL</name></expr>)</condition> <block pos:start="69:22" pos:end="75:5">{<block_content pos:start="71:9" pos:end="73:16">

        <expr_stmt pos:start="71:9" pos:end="71:59"><expr pos:start="71:9" pos:end="71:58"><call pos:start="71:9" pos:end="71:58"><name pos:start="71:9" pos:end="71:15">fprintf</name><argument_list pos:start="71:16" pos:end="71:58">(<argument pos:start="71:17" pos:end="71:22"><expr pos:start="71:17" pos:end="71:22"><name pos:start="71:17" pos:end="71:22">stderr</name></expr></argument>, <argument pos:start="71:25" pos:end="71:57"><expr pos:start="71:25" pos:end="71:57"><literal type="string" pos:start="71:25" pos:end="71:57">"Unable to find CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="73:9" pos:end="73:16"><expr pos:start="73:9" pos:end="73:15"><call pos:start="73:9" pos:end="73:15"><name pos:start="73:9" pos:end="73:12">exit</name><argument_list pos:start="73:13" pos:end="73:15">(<argument pos:start="73:14" pos:end="73:14"><expr pos:start="73:14" pos:end="73:14"><literal type="number" pos:start="73:14" pos:end="73:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="77:5" pos:end="77:20"><expr pos:start="77:5" pos:end="77:19"><name pos:start="77:5" pos:end="77:7">env</name> <operator pos:start="77:9" pos:end="77:9">=</operator> <operator pos:start="77:11" pos:end="77:11">&amp;</operator><name pos:start="77:12" pos:end="77:19"><name pos:start="77:12" pos:end="77:14">cpu</name><operator pos:start="77:15" pos:end="77:16">-&gt;</operator><name pos:start="77:17" pos:end="77:19">env</name></name></expr>;</expr_stmt>



    <expr_stmt pos:start="81:5" pos:end="81:46"><expr pos:start="81:5" pos:end="81:45"><name pos:start="81:5" pos:end="81:14">reset_info</name> <operator pos:start="81:16" pos:end="81:16">=</operator> <call pos:start="81:18" pos:end="81:45"><name pos:start="81:18" pos:end="81:26">g_malloc0</name><argument_list pos:start="81:27" pos:end="81:45">(<argument pos:start="81:28" pos:end="81:44"><expr pos:start="81:28" pos:end="81:44"><sizeof pos:start="81:28" pos:end="81:44">sizeof<argument_list pos:start="81:34" pos:end="81:44">(<argument pos:start="81:35" pos:end="81:43"><expr pos:start="81:35" pos:end="81:43"><name pos:start="81:35" pos:end="81:43">ResetData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="83:5" pos:end="83:26"><expr pos:start="83:5" pos:end="83:25"><name pos:start="83:5" pos:end="83:19"><name pos:start="83:5" pos:end="83:14">reset_info</name><operator pos:start="83:15" pos:end="83:16">-&gt;</operator><name pos:start="83:17" pos:end="83:19">cpu</name></name> <operator pos:start="83:21" pos:end="83:21">=</operator> <name pos:start="83:23" pos:end="83:25">cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="85:5" pos:end="85:43"><expr pos:start="85:5" pos:end="85:42"><name pos:start="85:5" pos:end="85:22"><name pos:start="85:5" pos:end="85:14">reset_info</name><operator pos:start="85:15" pos:end="85:16">-&gt;</operator><name pos:start="85:17" pos:end="85:22">vector</name></name> <operator pos:start="85:24" pos:end="85:24">=</operator> <name pos:start="85:26" pos:end="85:42"><name pos:start="85:26" pos:end="85:28">env</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:39">active_tc</name><operator pos:start="85:40" pos:end="85:40">.</operator><name pos:start="85:41" pos:end="85:42">PC</name></name></expr>;</expr_stmt>

    <expr_stmt pos:start="87:5" pos:end="87:52"><expr pos:start="87:5" pos:end="87:51"><call pos:start="87:5" pos:end="87:51"><name pos:start="87:5" pos:end="87:23">qemu_register_reset</name><argument_list pos:start="87:24" pos:end="87:51">(<argument pos:start="87:25" pos:end="87:38"><expr pos:start="87:25" pos:end="87:38"><name pos:start="87:25" pos:end="87:38">main_cpu_reset</name></expr></argument>, <argument pos:start="87:41" pos:end="87:50"><expr pos:start="87:41" pos:end="87:50"><name pos:start="87:41" pos:end="87:50">reset_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="91:5" pos:end="91:22">/* allocate RAM */</comment>

    <if_stmt pos:start="93:5" pos:end="103:5"><if pos:start="93:5" pos:end="103:5">if <condition pos:start="93:8" pos:end="93:31">(<expr pos:start="93:9" pos:end="93:30"><name pos:start="93:9" pos:end="93:16">ram_size</name> <operator pos:start="93:18" pos:end="93:18">&gt;</operator> <operator pos:start="93:20" pos:end="93:20">(</operator><literal type="number" pos:start="93:21" pos:end="93:23">256</literal> <operator pos:start="93:25" pos:end="93:26">&lt;&lt;</operator> <literal type="number" pos:start="93:28" pos:end="93:29">20</literal><operator pos:start="93:30" pos:end="93:30">)</operator></expr>)</condition> <block pos:start="93:33" pos:end="103:5">{<block_content pos:start="95:9" pos:end="101:16">

        <expr_stmt pos:start="95:9" pos:end="99:54"><expr pos:start="95:9" pos:end="99:53"><call pos:start="95:9" pos:end="99:53"><name pos:start="95:9" pos:end="95:15">fprintf</name><argument_list pos:start="95:16" pos:end="99:53">(<argument pos:start="95:17" pos:end="95:22"><expr pos:start="95:17" pos:end="95:22"><name pos:start="95:17" pos:end="95:22">stderr</name></expr></argument>,

                <argument pos:start="97:17" pos:end="97:81"><expr pos:start="97:17" pos:end="97:81"><literal type="string" pos:start="97:17" pos:end="97:81">"qemu: Too much memory for this machine: %d MB, maximum 256 MB\n"</literal></expr></argument>,

                <argument pos:start="99:17" pos:end="99:52"><expr pos:start="99:17" pos:end="99:52"><operator pos:start="99:17" pos:end="99:17">(</operator><operator pos:start="99:18" pos:end="99:18">(</operator><name pos:start="99:19" pos:end="99:26">unsigned</name> <name pos:start="99:28" pos:end="99:30">int</name><operator pos:start="99:31" pos:end="99:31">)</operator><name pos:start="99:32" pos:end="99:39">ram_size</name> <operator pos:start="99:41" pos:end="99:41">/</operator> <operator pos:start="99:43" pos:end="99:43">(</operator><literal type="number" pos:start="99:44" pos:end="99:44">1</literal> <operator pos:start="99:46" pos:end="99:47">&lt;&lt;</operator> <literal type="number" pos:start="99:49" pos:end="99:50">20</literal><operator pos:start="99:51" pos:end="99:51">)</operator><operator pos:start="99:52" pos:end="99:52">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="101:9" pos:end="101:16"><expr pos:start="101:9" pos:end="101:15"><call pos:start="101:9" pos:end="101:15"><name pos:start="101:9" pos:end="101:12">exit</name><argument_list pos:start="101:13" pos:end="101:15">(<argument pos:start="101:14" pos:end="101:14"><expr pos:start="101:14" pos:end="101:14"><literal type="number" pos:start="101:14" pos:end="101:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:78"><expr pos:start="105:5" pos:end="105:77"><call pos:start="105:5" pos:end="105:77"><name pos:start="105:5" pos:end="105:40">memory_region_allocate_system_memory</name><argument_list pos:start="105:41" pos:end="105:77">(<argument pos:start="105:42" pos:end="105:44"><expr pos:start="105:42" pos:end="105:44"><name pos:start="105:42" pos:end="105:44">ram</name></expr></argument>, <argument pos:start="105:47" pos:end="105:50"><expr pos:start="105:47" pos:end="105:50"><name pos:start="105:47" pos:end="105:50">NULL</name></expr></argument>, <argument pos:start="105:53" pos:end="105:66"><expr pos:start="105:53" pos:end="105:66"><literal type="string" pos:start="105:53" pos:end="105:66">"mips_r4k.ram"</literal></expr></argument>, <argument pos:start="105:69" pos:end="105:76"><expr pos:start="105:69" pos:end="105:76"><name pos:start="105:69" pos:end="105:76">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="109:5" pos:end="109:59"><expr pos:start="109:5" pos:end="109:58"><call pos:start="109:5" pos:end="109:58"><name pos:start="109:5" pos:end="109:31">memory_region_add_subregion</name><argument_list pos:start="109:32" pos:end="109:58">(<argument pos:start="109:33" pos:end="109:49"><expr pos:start="109:33" pos:end="109:49"><name pos:start="109:33" pos:end="109:49">address_space_mem</name></expr></argument>, <argument pos:start="109:52" pos:end="109:52"><expr pos:start="109:52" pos:end="109:52"><literal type="number" pos:start="109:52" pos:end="109:52">0</literal></expr></argument>, <argument pos:start="109:55" pos:end="109:57"><expr pos:start="109:55" pos:end="109:57"><name pos:start="109:55" pos:end="109:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="113:5" pos:end="113:83"><expr pos:start="113:5" pos:end="113:82"><call pos:start="113:5" pos:end="113:82"><name pos:start="113:5" pos:end="113:25">memory_region_init_io</name><argument_list pos:start="113:26" pos:end="113:82">(<argument pos:start="113:27" pos:end="113:31"><expr pos:start="113:27" pos:end="113:31"><name pos:start="113:27" pos:end="113:31">iomem</name></expr></argument>, <argument pos:start="113:34" pos:end="113:37"><expr pos:start="113:34" pos:end="113:37"><name pos:start="113:34" pos:end="113:37">NULL</name></expr></argument>, <argument pos:start="113:40" pos:end="113:53"><expr pos:start="113:40" pos:end="113:53"><operator pos:start="113:40" pos:end="113:40">&amp;</operator><name pos:start="113:41" pos:end="113:53">mips_qemu_ops</name></expr></argument>, <argument pos:start="113:56" pos:end="113:59"><expr pos:start="113:56" pos:end="113:59"><name pos:start="113:56" pos:end="113:59">NULL</name></expr></argument>, <argument pos:start="113:62" pos:end="113:72"><expr pos:start="113:62" pos:end="113:72"><literal type="string" pos:start="113:62" pos:end="113:72">"mips-qemu"</literal></expr></argument>, <argument pos:start="113:75" pos:end="113:81"><expr pos:start="113:75" pos:end="113:81"><literal type="number" pos:start="113:75" pos:end="113:81">0x10000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="115:5" pos:end="115:70"><expr pos:start="115:5" pos:end="115:69"><call pos:start="115:5" pos:end="115:69"><name pos:start="115:5" pos:end="115:31">memory_region_add_subregion</name><argument_list pos:start="115:32" pos:end="115:69">(<argument pos:start="115:33" pos:end="115:49"><expr pos:start="115:33" pos:end="115:49"><name pos:start="115:33" pos:end="115:49">address_space_mem</name></expr></argument>, <argument pos:start="115:52" pos:end="115:61"><expr pos:start="115:52" pos:end="115:61"><literal type="number" pos:start="115:52" pos:end="115:61">0x1fbf0000</literal></expr></argument>, <argument pos:start="115:64" pos:end="115:68"><expr pos:start="115:64" pos:end="115:68"><name pos:start="115:64" pos:end="115:68">iomem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="119:5" pos:end="125:14">/* Try to load a BIOS image. If this fails, we continue regardless,

       but initialize the hardware ourselves. When a kernel gets

       preloaded we also initialize the hardware, since the BIOS wasn't

       run. */</comment>

    <if_stmt pos:start="127:5" pos:end="129:34"><if pos:start="127:5" pos:end="129:34">if <condition pos:start="127:8" pos:end="127:26">(<expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:17">bios_name</name> <operator pos:start="127:19" pos:end="127:20">==</operator> <name pos:start="127:22" pos:end="127:25">NULL</name></expr>)</condition><block type="pseudo" pos:start="129:9" pos:end="129:34"><block_content pos:start="129:9" pos:end="129:34">

        <expr_stmt pos:start="129:9" pos:end="129:34"><expr pos:start="129:9" pos:end="129:33"><name pos:start="129:9" pos:end="129:17">bios_name</name> <operator pos:start="129:19" pos:end="129:19">=</operator> <name pos:start="129:21" pos:end="129:33">BIOS_FILENAME</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="131:5" pos:end="131:62"><expr pos:start="131:5" pos:end="131:61"><name pos:start="131:5" pos:end="131:12">filename</name> <operator pos:start="131:14" pos:end="131:14">=</operator> <call pos:start="131:16" pos:end="131:61"><name pos:start="131:16" pos:end="131:29">qemu_find_file</name><argument_list pos:start="131:30" pos:end="131:61">(<argument pos:start="131:31" pos:end="131:49"><expr pos:start="131:31" pos:end="131:49"><name pos:start="131:31" pos:end="131:49">QEMU_FILE_TYPE_BIOS</name></expr></argument>, <argument pos:start="131:52" pos:end="131:60"><expr pos:start="131:52" pos:end="131:60"><name pos:start="131:52" pos:end="131:60">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="133:5" pos:end="144:0"><if pos:start="133:5" pos:end="137:5">if <condition pos:start="133:8" pos:end="133:17">(<expr pos:start="133:9" pos:end="133:16"><name pos:start="133:9" pos:end="133:16">filename</name></expr>)</condition> <block pos:start="133:19" pos:end="137:5">{<block_content pos:start="135:9" pos:end="135:45">

        <expr_stmt pos:start="135:9" pos:end="135:45"><expr pos:start="135:9" pos:end="135:44"><name pos:start="135:9" pos:end="135:17">bios_size</name> <operator pos:start="135:19" pos:end="135:19">=</operator> <call pos:start="135:21" pos:end="135:44"><name pos:start="135:21" pos:end="135:34">get_image_size</name><argument_list pos:start="135:35" pos:end="135:44">(<argument pos:start="135:36" pos:end="135:43"><expr pos:start="135:36" pos:end="135:43"><name pos:start="135:36" pos:end="135:43">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="137:7" pos:end="144:0">else <block pos:start="137:12" pos:end="144:0">{<block_content pos:start="139:9" pos:end="139:23">

        <expr_stmt pos:start="139:9" pos:end="139:23"><expr pos:start="139:9" pos:end="139:22"><name pos:start="139:9" pos:end="139:17">bios_size</name> <operator pos:start="139:19" pos:end="139:19">=</operator> <operator pos:start="139:21" pos:end="139:21">-</operator><literal type="number" pos:start="139:22" pos:end="139:22">1</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

<cpp:ifdef pos:start="143:1" pos:end="143:29">#<cpp:directive pos:start="143:2" pos:end="143:6">ifdef</cpp:directive> <name pos:start="143:8" pos:end="143:29">TARGET_WORDS_BIGENDIAN</name></cpp:ifdef>

    <expr_stmt pos:start="145:5" pos:end="148:0"><expr pos:start="145:5" pos:end="145:10"><name pos:start="145:5" pos:end="145:6">be</name> <operator pos:start="145:8" pos:end="145:8">=</operator> <literal type="number" pos:start="145:10" pos:end="145:10">1</literal></expr>;</expr_stmt>

<cpp:else pos:start="147:1" pos:end="147:5">#<cpp:directive pos:start="147:2" pos:end="147:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="149:5" pos:end="152:0"><expr pos:start="149:5" pos:end="149:10"><name pos:start="149:5" pos:end="149:6">be</name> <operator pos:start="149:8" pos:end="149:8">=</operator> <literal type="number" pos:start="149:10" pos:end="149:10">0</literal></expr>;</expr_stmt>

<cpp:endif pos:start="151:1" pos:end="151:6">#<cpp:directive pos:start="151:2" pos:end="151:6">endif</cpp:directive></cpp:endif>

    <if_stmt pos:start="153:5" pos:end="193:5"><if pos:start="153:5" pos:end="169:5">if <condition pos:start="153:8" pos:end="153:52">(<expr pos:start="153:9" pos:end="153:51"><operator pos:start="153:9" pos:end="153:9">(</operator><name pos:start="153:10" pos:end="153:18">bios_size</name> <operator pos:start="153:20" pos:end="153:20">&gt;</operator> <literal type="number" pos:start="153:22" pos:end="153:22">0</literal><operator pos:start="153:23" pos:end="153:23">)</operator> <operator pos:start="153:25" pos:end="153:26">&amp;&amp;</operator> <operator pos:start="153:28" pos:end="153:28">(</operator><name pos:start="153:29" pos:end="153:37">bios_size</name> <operator pos:start="153:39" pos:end="153:40">&lt;=</operator> <name pos:start="153:42" pos:end="153:50">BIOS_SIZE</name><operator pos:start="153:51" pos:end="153:51">)</operator></expr>)</condition> <block pos:start="153:54" pos:end="169:5">{<block_content pos:start="155:9" pos:end="167:61">

        <expr_stmt pos:start="155:9" pos:end="155:38"><expr pos:start="155:9" pos:end="155:37"><name pos:start="155:9" pos:end="155:12">bios</name> <operator pos:start="155:14" pos:end="155:14">=</operator> <call pos:start="155:16" pos:end="155:37"><name pos:start="155:16" pos:end="155:20">g_new</name><argument_list pos:start="155:21" pos:end="155:37">(<argument pos:start="155:22" pos:end="155:33"><expr pos:start="155:22" pos:end="155:33"><name pos:start="155:22" pos:end="155:33">MemoryRegion</name></expr></argument>, <argument pos:start="155:36" pos:end="155:36"><expr pos:start="155:36" pos:end="155:36"><literal type="number" pos:start="155:36" pos:end="155:36">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="157:9" pos:end="159:45"><expr pos:start="157:9" pos:end="159:44"><call pos:start="157:9" pos:end="159:44"><name pos:start="157:9" pos:end="157:30">memory_region_init_ram</name><argument_list pos:start="157:31" pos:end="159:44">(<argument pos:start="157:32" pos:end="157:35"><expr pos:start="157:32" pos:end="157:35"><name pos:start="157:32" pos:end="157:35">bios</name></expr></argument>, <argument pos:start="157:38" pos:end="157:41"><expr pos:start="157:38" pos:end="157:41"><name pos:start="157:38" pos:end="157:41">NULL</name></expr></argument>, <argument pos:start="157:44" pos:end="157:58"><expr pos:start="157:44" pos:end="157:58"><literal type="string" pos:start="157:44" pos:end="157:58">"mips_r4k.bios"</literal></expr></argument>, <argument pos:start="157:61" pos:end="157:69"><expr pos:start="157:61" pos:end="157:69"><name pos:start="157:61" pos:end="157:69">BIOS_SIZE</name></expr></argument>,

                               <argument pos:start="159:32" pos:end="159:43"><expr pos:start="159:32" pos:end="159:43"><operator pos:start="159:32" pos:end="159:32">&amp;</operator><name pos:start="159:33" pos:end="159:43">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="161:9" pos:end="161:47"><expr pos:start="161:9" pos:end="161:46"><call pos:start="161:9" pos:end="161:46"><name pos:start="161:9" pos:end="161:34">memory_region_set_readonly</name><argument_list pos:start="161:35" pos:end="161:46">(<argument pos:start="161:36" pos:end="161:39"><expr pos:start="161:36" pos:end="161:39"><name pos:start="161:36" pos:end="161:39">bios</name></expr></argument>, <argument pos:start="161:42" pos:end="161:45"><expr pos:start="161:42" pos:end="161:45"><name pos:start="161:42" pos:end="161:45">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:75"><expr pos:start="163:9" pos:end="163:74"><call pos:start="163:9" pos:end="163:74"><name pos:start="163:9" pos:end="163:35">memory_region_add_subregion</name><argument_list pos:start="163:36" pos:end="163:74">(<argument pos:start="163:37" pos:end="163:55"><expr pos:start="163:37" pos:end="163:55"><call pos:start="163:37" pos:end="163:55"><name pos:start="163:37" pos:end="163:53">get_system_memory</name><argument_list pos:start="163:54" pos:end="163:55">()</argument_list></call></expr></argument>, <argument pos:start="163:58" pos:end="163:67"><expr pos:start="163:58" pos:end="163:67"><literal type="number" pos:start="163:58" pos:end="163:67">0x1fc00000</literal></expr></argument>, <argument pos:start="163:70" pos:end="163:73"><expr pos:start="163:70" pos:end="163:73"><name pos:start="163:70" pos:end="163:73">bios</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="167:9" pos:end="167:61"><expr pos:start="167:9" pos:end="167:60"><call pos:start="167:9" pos:end="167:60"><name pos:start="167:9" pos:end="167:27">load_image_targphys</name><argument_list pos:start="167:28" pos:end="167:60">(<argument pos:start="167:29" pos:end="167:36"><expr pos:start="167:29" pos:end="167:36"><name pos:start="167:29" pos:end="167:36">filename</name></expr></argument>, <argument pos:start="167:39" pos:end="167:48"><expr pos:start="167:39" pos:end="167:48"><literal type="number" pos:start="167:39" pos:end="167:48">0x1fc00000</literal></expr></argument>, <argument pos:start="167:51" pos:end="167:59"><expr pos:start="167:51" pos:end="167:59"><name pos:start="167:51" pos:end="167:59">BIOS_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="169:7" pos:end="185:5">else if <condition pos:start="169:15" pos:end="169:60">(<expr pos:start="169:16" pos:end="169:59"><operator pos:start="169:16" pos:end="169:16">(</operator><name pos:start="169:17" pos:end="169:21">dinfo</name> <operator pos:start="169:23" pos:end="169:23">=</operator> <call pos:start="169:25" pos:end="169:50"><name pos:start="169:25" pos:end="169:33">drive_get</name><argument_list pos:start="169:34" pos:end="169:50">(<argument pos:start="169:35" pos:end="169:43"><expr pos:start="169:35" pos:end="169:43"><name pos:start="169:35" pos:end="169:43">IF_PFLASH</name></expr></argument>, <argument pos:start="169:46" pos:end="169:46"><expr pos:start="169:46" pos:end="169:46"><literal type="number" pos:start="169:46" pos:end="169:46">0</literal></expr></argument>, <argument pos:start="169:49" pos:end="169:49"><expr pos:start="169:49" pos:end="169:49"><literal type="number" pos:start="169:49" pos:end="169:49">0</literal></expr></argument>)</argument_list></call><operator pos:start="169:51" pos:end="169:51">)</operator> <operator pos:start="169:53" pos:end="169:54">!=</operator> <name pos:start="169:56" pos:end="169:59">NULL</name></expr>)</condition> <block pos:start="169:62" pos:end="185:5">{<block_content pos:start="171:9" pos:end="183:9">

        <decl_stmt pos:start="171:9" pos:end="171:39"><decl pos:start="171:9" pos:end="171:38"><type pos:start="171:9" pos:end="171:16"><name pos:start="171:9" pos:end="171:16">uint32_t</name></type> <name pos:start="171:18" pos:end="171:25">mips_rom</name> <init pos:start="171:27" pos:end="171:38">= <expr pos:start="171:29" pos:end="171:38"><literal type="number" pos:start="171:29" pos:end="171:38">0x00400000</literal></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="173:9" pos:end="183:9"><if pos:start="173:9" pos:end="183:9">if <condition pos:start="173:12" pos:end="179:54">(<expr pos:start="173:13" pos:end="179:53"><operator pos:start="173:13" pos:end="173:13">!</operator><call pos:start="173:14" pos:end="179:53"><name pos:start="173:14" pos:end="173:34">pflash_cfi01_register</name><argument_list pos:start="173:35" pos:end="179:53">(<argument pos:start="173:36" pos:end="173:45"><expr pos:start="173:36" pos:end="173:45"><literal type="number" pos:start="173:36" pos:end="173:45">0x1fc00000</literal></expr></argument>, <argument pos:start="173:48" pos:end="173:51"><expr pos:start="173:48" pos:end="173:51"><name pos:start="173:48" pos:end="173:51">NULL</name></expr></argument>, <argument pos:start="173:54" pos:end="173:68"><expr pos:start="173:54" pos:end="173:68"><literal type="string" pos:start="173:54" pos:end="173:68">"mips_r4k.bios"</literal></expr></argument>, <argument pos:start="173:71" pos:end="173:78"><expr pos:start="173:71" pos:end="173:78"><name pos:start="173:71" pos:end="173:78">mips_rom</name></expr></argument>,

                                   <argument pos:start="175:36" pos:end="175:61"><expr pos:start="175:36" pos:end="175:61"><call pos:start="175:36" pos:end="175:61"><name pos:start="175:36" pos:end="175:54">blk_by_legacy_dinfo</name><argument_list pos:start="175:55" pos:end="175:61">(<argument pos:start="175:56" pos:end="175:60"><expr pos:start="175:56" pos:end="175:60"><name pos:start="175:56" pos:end="175:60">dinfo</name></expr></argument>)</argument_list></call></expr></argument>,

                                   <argument pos:start="177:36" pos:end="177:45"><expr pos:start="177:36" pos:end="177:45"><name pos:start="177:36" pos:end="177:45">sector_len</name></expr></argument>, <argument pos:start="177:48" pos:end="177:68"><expr pos:start="177:48" pos:end="177:68"><name pos:start="177:48" pos:end="177:55">mips_rom</name> <operator pos:start="177:57" pos:end="177:57">/</operator> <name pos:start="177:59" pos:end="177:68">sector_len</name></expr></argument>,

                                   <argument pos:start="179:36" pos:end="179:36"><expr pos:start="179:36" pos:end="179:36"><literal type="number" pos:start="179:36" pos:end="179:36">4</literal></expr></argument>, <argument pos:start="179:39" pos:end="179:39"><expr pos:start="179:39" pos:end="179:39"><literal type="number" pos:start="179:39" pos:end="179:39">0</literal></expr></argument>, <argument pos:start="179:42" pos:end="179:42"><expr pos:start="179:42" pos:end="179:42"><literal type="number" pos:start="179:42" pos:end="179:42">0</literal></expr></argument>, <argument pos:start="179:45" pos:end="179:45"><expr pos:start="179:45" pos:end="179:45"><literal type="number" pos:start="179:45" pos:end="179:45">0</literal></expr></argument>, <argument pos:start="179:48" pos:end="179:48"><expr pos:start="179:48" pos:end="179:48"><literal type="number" pos:start="179:48" pos:end="179:48">0</literal></expr></argument>, <argument pos:start="179:51" pos:end="179:52"><expr pos:start="179:51" pos:end="179:52"><name pos:start="179:51" pos:end="179:52">be</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="179:56" pos:end="183:9">{<block_content pos:start="181:13" pos:end="181:71">

            <expr_stmt pos:start="181:13" pos:end="181:71"><expr pos:start="181:13" pos:end="181:70"><call pos:start="181:13" pos:end="181:70"><name pos:start="181:13" pos:end="181:19">fprintf</name><argument_list pos:start="181:20" pos:end="181:70">(<argument pos:start="181:21" pos:end="181:26"><expr pos:start="181:21" pos:end="181:26"><name pos:start="181:21" pos:end="181:26">stderr</name></expr></argument>, <argument pos:start="181:29" pos:end="181:69"><expr pos:start="181:29" pos:end="181:69"><literal type="string" pos:start="181:29" pos:end="181:69">"qemu: Error registering flash memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="185:7" pos:end="193:5">else if <condition pos:start="185:15" pos:end="185:32">(<expr pos:start="185:16" pos:end="185:31"><operator pos:start="185:16" pos:end="185:16">!</operator><call pos:start="185:17" pos:end="185:31"><name pos:start="185:17" pos:end="185:29">qtest_enabled</name><argument_list pos:start="185:30" pos:end="185:31">()</argument_list></call></expr>)</condition> <block pos:start="185:34" pos:end="193:5">{<block_content pos:start="189:9" pos:end="191:27">

	<comment type="block" pos:start="187:9" pos:end="187:23">/* not fatal */</comment>

        <expr_stmt pos:start="189:9" pos:end="191:27"><expr pos:start="189:9" pos:end="191:26"><call pos:start="189:9" pos:end="191:26"><name pos:start="189:9" pos:end="189:15">fprintf</name><argument_list pos:start="189:16" pos:end="191:26">(<argument pos:start="189:17" pos:end="189:22"><expr pos:start="189:17" pos:end="189:22"><name pos:start="189:17" pos:end="189:22">stderr</name></expr></argument>, <argument pos:start="189:25" pos:end="189:72"><expr pos:start="189:25" pos:end="189:72"><literal type="string" pos:start="189:25" pos:end="189:72">"qemu: Warning, could not load MIPS bios '%s'\n"</literal></expr></argument>,

		<argument pos:start="191:17" pos:end="191:25"><expr pos:start="191:17" pos:end="191:25"><name pos:start="191:17" pos:end="191:25">bios_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="195:5" pos:end="195:21"><expr pos:start="195:5" pos:end="195:20"><call pos:start="195:5" pos:end="195:20"><name pos:start="195:5" pos:end="195:10">g_free</name><argument_list pos:start="195:11" pos:end="195:20">(<argument pos:start="195:12" pos:end="195:19"><expr pos:start="195:12" pos:end="195:19"><name pos:start="195:12" pos:end="195:19">filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="199:5" pos:end="211:5"><if pos:start="199:5" pos:end="211:5">if <condition pos:start="199:8" pos:end="199:24">(<expr pos:start="199:9" pos:end="199:23"><name pos:start="199:9" pos:end="199:23">kernel_filename</name></expr>)</condition> <block pos:start="199:26" pos:end="211:5">{<block_content pos:start="201:9" pos:end="209:43">

        <expr_stmt pos:start="201:9" pos:end="201:41"><expr pos:start="201:9" pos:end="201:40"><name pos:start="201:9" pos:end="201:29"><name pos:start="201:9" pos:end="201:20">loaderparams</name><operator pos:start="201:21" pos:end="201:21">.</operator><name pos:start="201:22" pos:end="201:29">ram_size</name></name> <operator pos:start="201:31" pos:end="201:31">=</operator> <name pos:start="201:33" pos:end="201:40">ram_size</name></expr>;</expr_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:55"><expr pos:start="203:9" pos:end="203:54"><name pos:start="203:9" pos:end="203:36"><name pos:start="203:9" pos:end="203:20">loaderparams</name><operator pos:start="203:21" pos:end="203:21">.</operator><name pos:start="203:22" pos:end="203:36">kernel_filename</name></name> <operator pos:start="203:38" pos:end="203:38">=</operator> <name pos:start="203:40" pos:end="203:54">kernel_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:53"><expr pos:start="205:9" pos:end="205:52"><name pos:start="205:9" pos:end="205:35"><name pos:start="205:9" pos:end="205:20">loaderparams</name><operator pos:start="205:21" pos:end="205:21">.</operator><name pos:start="205:22" pos:end="205:35">kernel_cmdline</name></name> <operator pos:start="205:37" pos:end="205:37">=</operator> <name pos:start="205:39" pos:end="205:52">kernel_cmdline</name></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:55"><expr pos:start="207:9" pos:end="207:54"><name pos:start="207:9" pos:end="207:36"><name pos:start="207:9" pos:end="207:20">loaderparams</name><operator pos:start="207:21" pos:end="207:21">.</operator><name pos:start="207:22" pos:end="207:36">initrd_filename</name></name> <operator pos:start="207:38" pos:end="207:38">=</operator> <name pos:start="207:40" pos:end="207:54">initrd_filename</name></expr>;</expr_stmt>

        <expr_stmt pos:start="209:9" pos:end="209:43"><expr pos:start="209:9" pos:end="209:42"><name pos:start="209:9" pos:end="209:26"><name pos:start="209:9" pos:end="209:18">reset_info</name><operator pos:start="209:19" pos:end="209:20">-&gt;</operator><name pos:start="209:21" pos:end="209:26">vector</name></name> <operator pos:start="209:28" pos:end="209:28">=</operator> <call pos:start="209:30" pos:end="209:42"><name pos:start="209:30" pos:end="209:40">load_kernel</name><argument_list pos:start="209:41" pos:end="209:42">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="215:5" pos:end="215:35">/* Init CPU internal devices */</comment>

    <expr_stmt pos:start="217:5" pos:end="217:31"><expr pos:start="217:5" pos:end="217:30"><call pos:start="217:5" pos:end="217:30"><name pos:start="217:5" pos:end="217:25">cpu_mips_irq_init_cpu</name><argument_list pos:start="217:26" pos:end="217:30">(<argument pos:start="217:27" pos:end="217:29"><expr pos:start="217:27" pos:end="217:29"><name pos:start="217:27" pos:end="217:29">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="219:5" pos:end="219:29"><expr pos:start="219:5" pos:end="219:28"><call pos:start="219:5" pos:end="219:28"><name pos:start="219:5" pos:end="219:23">cpu_mips_clock_init</name><argument_list pos:start="219:24" pos:end="219:28">(<argument pos:start="219:25" pos:end="219:27"><expr pos:start="219:25" pos:end="219:27"><name pos:start="219:25" pos:end="219:27">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:66">/* ISA bus: IO space at 0x14000000, mem space at 0x10000000 */</comment>

    <expr_stmt pos:start="225:5" pos:end="227:61"><expr pos:start="225:5" pos:end="227:60"><call pos:start="225:5" pos:end="227:60"><name pos:start="225:5" pos:end="225:28">memory_region_init_alias</name><argument_list pos:start="225:29" pos:end="227:60">(<argument pos:start="225:30" pos:end="225:35"><expr pos:start="225:30" pos:end="225:35"><name pos:start="225:30" pos:end="225:35">isa_io</name></expr></argument>, <argument pos:start="225:38" pos:end="225:41"><expr pos:start="225:38" pos:end="225:41"><name pos:start="225:38" pos:end="225:41">NULL</name></expr></argument>, <argument pos:start="225:44" pos:end="225:51"><expr pos:start="225:44" pos:end="225:51"><literal type="string" pos:start="225:44" pos:end="225:51">"isa-io"</literal></expr></argument>,

                             <argument pos:start="227:30" pos:end="227:44"><expr pos:start="227:30" pos:end="227:44"><call pos:start="227:30" pos:end="227:44"><name pos:start="227:30" pos:end="227:42">get_system_io</name><argument_list pos:start="227:43" pos:end="227:44">()</argument_list></call></expr></argument>, <argument pos:start="227:47" pos:end="227:47"><expr pos:start="227:47" pos:end="227:47"><literal type="number" pos:start="227:47" pos:end="227:47">0</literal></expr></argument>, <argument pos:start="227:50" pos:end="227:59"><expr pos:start="227:50" pos:end="227:59"><literal type="number" pos:start="227:50" pos:end="227:59">0x00010000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="229:5" pos:end="229:61"><expr pos:start="229:5" pos:end="229:60"><call pos:start="229:5" pos:end="229:60"><name pos:start="229:5" pos:end="229:22">memory_region_init</name><argument_list pos:start="229:23" pos:end="229:60">(<argument pos:start="229:24" pos:end="229:30"><expr pos:start="229:24" pos:end="229:30"><name pos:start="229:24" pos:end="229:30">isa_mem</name></expr></argument>, <argument pos:start="229:33" pos:end="229:36"><expr pos:start="229:33" pos:end="229:36"><name pos:start="229:33" pos:end="229:36">NULL</name></expr></argument>, <argument pos:start="229:39" pos:end="229:47"><expr pos:start="229:39" pos:end="229:47"><literal type="string" pos:start="229:39" pos:end="229:47">"isa-mem"</literal></expr></argument>, <argument pos:start="229:50" pos:end="229:59"><expr pos:start="229:50" pos:end="229:59"><literal type="number" pos:start="229:50" pos:end="229:59">0x01000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="231:5" pos:end="231:73"><expr pos:start="231:5" pos:end="231:72"><call pos:start="231:5" pos:end="231:72"><name pos:start="231:5" pos:end="231:31">memory_region_add_subregion</name><argument_list pos:start="231:32" pos:end="231:72">(<argument pos:start="231:33" pos:end="231:51"><expr pos:start="231:33" pos:end="231:51"><call pos:start="231:33" pos:end="231:51"><name pos:start="231:33" pos:end="231:49">get_system_memory</name><argument_list pos:start="231:50" pos:end="231:51">()</argument_list></call></expr></argument>, <argument pos:start="231:54" pos:end="231:63"><expr pos:start="231:54" pos:end="231:63"><literal type="number" pos:start="231:54" pos:end="231:63">0x14000000</literal></expr></argument>, <argument pos:start="231:66" pos:end="231:71"><expr pos:start="231:66" pos:end="231:71"><name pos:start="231:66" pos:end="231:71">isa_io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="233:5" pos:end="233:74"><expr pos:start="233:5" pos:end="233:73"><call pos:start="233:5" pos:end="233:73"><name pos:start="233:5" pos:end="233:31">memory_region_add_subregion</name><argument_list pos:start="233:32" pos:end="233:73">(<argument pos:start="233:33" pos:end="233:51"><expr pos:start="233:33" pos:end="233:51"><call pos:start="233:33" pos:end="233:51"><name pos:start="233:33" pos:end="233:49">get_system_memory</name><argument_list pos:start="233:50" pos:end="233:51">()</argument_list></call></expr></argument>, <argument pos:start="233:54" pos:end="233:63"><expr pos:start="233:54" pos:end="233:63"><literal type="number" pos:start="233:54" pos:end="233:63">0x10000000</literal></expr></argument>, <argument pos:start="233:66" pos:end="233:72"><expr pos:start="233:66" pos:end="233:72"><name pos:start="233:66" pos:end="233:72">isa_mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:72"><expr pos:start="235:5" pos:end="235:71"><name pos:start="235:5" pos:end="235:11">isa_bus</name> <operator pos:start="235:13" pos:end="235:13">=</operator> <call pos:start="235:15" pos:end="235:71"><name pos:start="235:15" pos:end="235:25">isa_bus_new</name><argument_list pos:start="235:26" pos:end="235:71">(<argument pos:start="235:27" pos:end="235:30"><expr pos:start="235:27" pos:end="235:30"><name pos:start="235:27" pos:end="235:30">NULL</name></expr></argument>, <argument pos:start="235:33" pos:end="235:39"><expr pos:start="235:33" pos:end="235:39"><name pos:start="235:33" pos:end="235:39">isa_mem</name></expr></argument>, <argument pos:start="235:42" pos:end="235:56"><expr pos:start="235:42" pos:end="235:56"><call pos:start="235:42" pos:end="235:56"><name pos:start="235:42" pos:end="235:54">get_system_io</name><argument_list pos:start="235:55" pos:end="235:56">()</argument_list></call></expr></argument>, <argument pos:start="235:59" pos:end="235:70"><expr pos:start="235:59" pos:end="235:70"><operator pos:start="235:59" pos:end="235:59">&amp;</operator><name pos:start="235:60" pos:end="235:70">error_abort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="239:5" pos:end="239:54">/* The PIC is attached to the MIPS CPU INT0 pin */</comment>

    <expr_stmt pos:start="241:5" pos:end="241:45"><expr pos:start="241:5" pos:end="241:44"><name pos:start="241:5" pos:end="241:9">i8259</name> <operator pos:start="241:11" pos:end="241:11">=</operator> <call pos:start="241:13" pos:end="241:44"><name pos:start="241:13" pos:end="241:22">i8259_init</name><argument_list pos:start="241:23" pos:end="241:44">(<argument pos:start="241:24" pos:end="241:30"><expr pos:start="241:24" pos:end="241:30"><name pos:start="241:24" pos:end="241:30">isa_bus</name></expr></argument>, <argument pos:start="241:33" pos:end="241:43"><expr pos:start="241:33" pos:end="241:43"><name pos:start="241:33" pos:end="241:43"><name pos:start="241:33" pos:end="241:35">env</name><operator pos:start="241:36" pos:end="241:37">-&gt;</operator><name pos:start="241:38" pos:end="241:40">irq</name><index pos:start="241:41" pos:end="241:43">[<expr pos:start="241:42" pos:end="241:42"><literal type="number" pos:start="241:42" pos:end="241:42">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="243:5" pos:end="243:33"><expr pos:start="243:5" pos:end="243:32"><call pos:start="243:5" pos:end="243:32"><name pos:start="243:5" pos:end="243:16">isa_bus_irqs</name><argument_list pos:start="243:17" pos:end="243:32">(<argument pos:start="243:18" pos:end="243:24"><expr pos:start="243:18" pos:end="243:24"><name pos:start="243:18" pos:end="243:24">isa_bus</name></expr></argument>, <argument pos:start="243:27" pos:end="243:31"><expr pos:start="243:27" pos:end="243:31"><name pos:start="243:27" pos:end="243:31">i8259</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="247:5" pos:end="247:34"><expr pos:start="247:5" pos:end="247:33"><call pos:start="247:5" pos:end="247:33"><name pos:start="247:5" pos:end="247:12">rtc_init</name><argument_list pos:start="247:13" pos:end="247:33">(<argument pos:start="247:14" pos:end="247:20"><expr pos:start="247:14" pos:end="247:20"><name pos:start="247:14" pos:end="247:20">isa_bus</name></expr></argument>, <argument pos:start="247:23" pos:end="247:26"><expr pos:start="247:23" pos:end="247:26"><literal type="number" pos:start="247:23" pos:end="247:26">2000</literal></expr></argument>, <argument pos:start="247:29" pos:end="247:32"><expr pos:start="247:29" pos:end="247:32"><name pos:start="247:29" pos:end="247:32">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="251:5" pos:end="251:43"><expr pos:start="251:5" pos:end="251:42"><name pos:start="251:5" pos:end="251:7">pit</name> <operator pos:start="251:9" pos:end="251:9">=</operator> <call pos:start="251:11" pos:end="251:42"><name pos:start="251:11" pos:end="251:18">pit_init</name><argument_list pos:start="251:19" pos:end="251:42">(<argument pos:start="251:20" pos:end="251:26"><expr pos:start="251:20" pos:end="251:26"><name pos:start="251:20" pos:end="251:26">isa_bus</name></expr></argument>, <argument pos:start="251:29" pos:end="251:32"><expr pos:start="251:29" pos:end="251:32"><literal type="number" pos:start="251:29" pos:end="251:32">0x40</literal></expr></argument>, <argument pos:start="251:35" pos:end="251:35"><expr pos:start="251:35" pos:end="251:35"><literal type="number" pos:start="251:35" pos:end="251:35">0</literal></expr></argument>, <argument pos:start="251:38" pos:end="251:41"><expr pos:start="251:38" pos:end="251:41"><name pos:start="251:38" pos:end="251:41">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="255:5" pos:end="255:54"><expr pos:start="255:5" pos:end="255:53"><call pos:start="255:5" pos:end="255:53"><name pos:start="255:5" pos:end="255:23">serial_hds_isa_init</name><argument_list pos:start="255:24" pos:end="255:53">(<argument pos:start="255:25" pos:end="255:31"><expr pos:start="255:25" pos:end="255:31"><name pos:start="255:25" pos:end="255:31">isa_bus</name></expr></argument>, <argument pos:start="255:34" pos:end="255:34"><expr pos:start="255:34" pos:end="255:34"><literal type="number" pos:start="255:34" pos:end="255:34">0</literal></expr></argument>, <argument pos:start="255:37" pos:end="255:52"><expr pos:start="255:37" pos:end="255:52"><name pos:start="255:37" pos:end="255:52">MAX_SERIAL_PORTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="259:5" pos:end="259:26"><expr pos:start="259:5" pos:end="259:25"><call pos:start="259:5" pos:end="259:25"><name pos:start="259:5" pos:end="259:16">isa_vga_init</name><argument_list pos:start="259:17" pos:end="259:25">(<argument pos:start="259:18" pos:end="259:24"><expr pos:start="259:18" pos:end="259:24"><name pos:start="259:18" pos:end="259:24">isa_bus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="263:5" pos:end="265:57"><if pos:start="263:5" pos:end="265:57">if <condition pos:start="263:8" pos:end="263:25">(<expr pos:start="263:9" pos:end="263:24"><name pos:start="263:9" pos:end="263:19"><name pos:start="263:9" pos:end="263:16">nd_table</name><index pos:start="263:17" pos:end="263:19">[<expr pos:start="263:18" pos:end="263:18"><literal type="number" pos:start="263:18" pos:end="263:18">0</literal></expr>]</index></name><operator pos:start="263:20" pos:end="263:20">.</operator><name pos:start="263:21" pos:end="263:24">used</name></expr>)</condition><block type="pseudo" pos:start="265:9" pos:end="265:57"><block_content pos:start="265:9" pos:end="265:57">

        <expr_stmt pos:start="265:9" pos:end="265:57"><expr pos:start="265:9" pos:end="265:56"><call pos:start="265:9" pos:end="265:56"><name pos:start="265:9" pos:end="265:23">isa_ne2000_init</name><argument_list pos:start="265:24" pos:end="265:56">(<argument pos:start="265:25" pos:end="265:31"><expr pos:start="265:25" pos:end="265:31"><name pos:start="265:25" pos:end="265:31">isa_bus</name></expr></argument>, <argument pos:start="265:34" pos:end="265:38"><expr pos:start="265:34" pos:end="265:38"><literal type="number" pos:start="265:34" pos:end="265:38">0x300</literal></expr></argument>, <argument pos:start="265:41" pos:end="265:41"><expr pos:start="265:41" pos:end="265:41"><literal type="number" pos:start="265:41" pos:end="265:41">9</literal></expr></argument>, <argument pos:start="265:44" pos:end="265:55"><expr pos:start="265:44" pos:end="265:55"><operator pos:start="265:44" pos:end="265:44">&amp;</operator><name pos:start="265:45" pos:end="265:55"><name pos:start="265:45" pos:end="265:52">nd_table</name><index pos:start="265:53" pos:end="265:55">[<expr pos:start="265:54" pos:end="265:54"><literal type="number" pos:start="265:54" pos:end="265:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>



    <expr_stmt pos:start="269:5" pos:end="269:38"><expr pos:start="269:5" pos:end="269:37"><call pos:start="269:5" pos:end="269:37"><name pos:start="269:5" pos:end="269:17">ide_drive_get</name><argument_list pos:start="269:18" pos:end="269:37">(<argument pos:start="269:19" pos:end="269:20"><expr pos:start="269:19" pos:end="269:20"><name pos:start="269:19" pos:end="269:20">hd</name></expr></argument>, <argument pos:start="269:23" pos:end="269:36"><expr pos:start="269:23" pos:end="269:36"><call pos:start="269:23" pos:end="269:36"><name pos:start="269:23" pos:end="269:32">ARRAY_SIZE</name><argument_list pos:start="269:33" pos:end="269:36">(<argument pos:start="269:34" pos:end="269:35"><expr pos:start="269:34" pos:end="269:35"><name pos:start="269:34" pos:end="269:35">hd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="271:5" pos:end="277:47">for<control pos:start="271:8" pos:end="271:36">(<init pos:start="271:9" pos:end="271:14"><expr pos:start="271:9" pos:end="271:13"><name pos:start="271:9" pos:end="271:9">i</name> <operator pos:start="271:11" pos:end="271:11">=</operator> <literal type="number" pos:start="271:13" pos:end="271:13">0</literal></expr>;</init> <condition pos:start="271:16" pos:end="271:31"><expr pos:start="271:16" pos:end="271:30"><name pos:start="271:16" pos:end="271:16">i</name> <operator pos:start="271:18" pos:end="271:18">&lt;</operator> <name pos:start="271:20" pos:end="271:30">MAX_IDE_BUS</name></expr>;</condition> <incr pos:start="271:33" pos:end="271:35"><expr pos:start="271:33" pos:end="271:35"><name pos:start="271:33" pos:end="271:33">i</name><operator pos:start="271:34" pos:end="271:35">++</operator></expr></incr>)</control><block type="pseudo" pos:start="273:9" pos:end="277:47"><block_content pos:start="273:9" pos:end="277:47">

        <expr_stmt pos:start="273:9" pos:end="277:47"><expr pos:start="273:9" pos:end="277:46"><call pos:start="273:9" pos:end="277:46"><name pos:start="273:9" pos:end="273:20">isa_ide_init</name><argument_list pos:start="273:21" pos:end="277:46">(<argument pos:start="273:22" pos:end="273:28"><expr pos:start="273:22" pos:end="273:28"><name pos:start="273:22" pos:end="273:28">isa_bus</name></expr></argument>, <argument pos:start="273:31" pos:end="273:43"><expr pos:start="273:31" pos:end="273:43"><name pos:start="273:31" pos:end="273:43"><name pos:start="273:31" pos:end="273:40">ide_iobase</name><index pos:start="273:41" pos:end="273:43">[<expr pos:start="273:42" pos:end="273:42"><name pos:start="273:42" pos:end="273:42">i</name></expr>]</index></name></expr></argument>, <argument pos:start="273:46" pos:end="273:59"><expr pos:start="273:46" pos:end="273:59"><name pos:start="273:46" pos:end="273:59"><name pos:start="273:46" pos:end="273:56">ide_iobase2</name><index pos:start="273:57" pos:end="273:59">[<expr pos:start="273:58" pos:end="273:58"><name pos:start="273:58" pos:end="273:58">i</name></expr>]</index></name></expr></argument>, <argument pos:start="273:62" pos:end="273:71"><expr pos:start="273:62" pos:end="273:71"><name pos:start="273:62" pos:end="273:71"><name pos:start="273:62" pos:end="273:68">ide_irq</name><index pos:start="273:69" pos:end="273:71">[<expr pos:start="273:70" pos:end="273:70"><name pos:start="273:70" pos:end="273:70">i</name></expr>]</index></name></expr></argument>,

                     <argument pos:start="275:22" pos:end="275:41"><expr pos:start="275:22" pos:end="275:41"><name pos:start="275:22" pos:end="275:41"><name pos:start="275:22" pos:end="275:23">hd</name><index pos:start="275:24" pos:end="275:41">[<expr pos:start="275:25" pos:end="275:40"><name pos:start="275:25" pos:end="275:36">MAX_IDE_DEVS</name> <operator pos:start="275:38" pos:end="275:38">*</operator> <name pos:start="275:40" pos:end="275:40">i</name></expr>]</index></name></expr></argument>,

		     <argument pos:start="277:22" pos:end="277:45"><expr pos:start="277:22" pos:end="277:45"><name pos:start="277:22" pos:end="277:45"><name pos:start="277:22" pos:end="277:23">hd</name><index pos:start="277:24" pos:end="277:45">[<expr pos:start="277:25" pos:end="277:44"><name pos:start="277:25" pos:end="277:36">MAX_IDE_DEVS</name> <operator pos:start="277:38" pos:end="277:38">*</operator> <name pos:start="277:40" pos:end="277:40">i</name> <operator pos:start="277:42" pos:end="277:42">+</operator> <literal type="number" pos:start="277:44" pos:end="277:44">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>



    <expr_stmt pos:start="281:5" pos:end="281:40"><expr pos:start="281:5" pos:end="281:39"><call pos:start="281:5" pos:end="281:39"><name pos:start="281:5" pos:end="281:21">isa_create_simple</name><argument_list pos:start="281:22" pos:end="281:39">(<argument pos:start="281:23" pos:end="281:29"><expr pos:start="281:23" pos:end="281:29"><name pos:start="281:23" pos:end="281:29">isa_bus</name></expr></argument>, <argument pos:start="281:32" pos:end="281:38"><expr pos:start="281:32" pos:end="281:38"><literal type="string" pos:start="281:32" pos:end="281:38">"i8042"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
