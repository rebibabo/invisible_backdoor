<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/19424.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">compensate_volume</name><parameter_list pos:start="1:29" pos:end="1:50">(<parameter pos:start="1:30" pos:end="1:49"><decl pos:start="1:30" pos:end="1:49"><type pos:start="1:30" pos:end="1:46"><name pos:start="1:30" pos:end="1:44">AVFilterContext</name> <modifier pos:start="1:46" pos:end="1:46">*</modifier></type><name pos:start="1:47" pos:end="1:49">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="55:13">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:29"><name pos:start="5:5" pos:end="5:27"><name pos:start="5:5" pos:end="5:10">struct</name> <name pos:start="5:12" pos:end="5:27">SOFAlizerContext</name></name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:30">s</name> <init pos:start="5:32" pos:end="5:42">= <expr pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:42"><name pos:start="5:34" pos:end="5:36">ctx</name><operator pos:start="5:37" pos:end="5:38">-&gt;</operator><name pos:start="5:39" pos:end="5:42">priv</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:21"><decl pos:start="7:5" pos:end="7:20"><type pos:start="7:5" pos:end="7:9"><name pos:start="7:5" pos:end="7:9">float</name></type> <name pos:start="7:11" pos:end="7:20">compensate</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:21"><decl pos:start="9:5" pos:end="9:20"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">float</name></type> <name pos:start="9:11" pos:end="9:16">energy</name> <init pos:start="9:18" pos:end="9:20">= <expr pos:start="9:20" pos:end="9:20"><literal type="number" pos:start="9:20" pos:end="9:20">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:14"><decl pos:start="11:5" pos:end="11:13"><type pos:start="11:5" pos:end="11:11"><name pos:start="11:5" pos:end="11:9">float</name> <modifier pos:start="11:11" pos:end="11:11">*</modifier></type><name pos:start="11:12" pos:end="11:13">ir</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:10"><decl pos:start="13:5" pos:end="13:9"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:9">m</name></decl>;</decl_stmt>



    <if_stmt pos:start="17:5" pos:end="51:5"><if pos:start="17:5" pos:end="51:5">if <condition pos:start="17:8" pos:end="17:21">(<expr pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:20"><name pos:start="17:9" pos:end="17:9">s</name><operator pos:start="17:10" pos:end="17:11">-&gt;</operator><name pos:start="17:12" pos:end="17:15">sofa</name><operator pos:start="17:16" pos:end="17:16">.</operator><name pos:start="17:17" pos:end="17:20">ncid</name></name></expr>)</condition> <block pos:start="17:23" pos:end="51:5">{<block_content pos:start="21:9" pos:end="49:17">

        <comment type="block" pos:start="19:9" pos:end="19:90">/* find IR at front center position in the SOFA file (IR closest to 0°,0°,1m) */</comment>

        <decl_stmt pos:start="21:9" pos:end="21:39"><decl pos:start="21:9" pos:end="21:38"><type pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:21"><name pos:start="21:9" pos:end="21:14">struct</name> <name pos:start="21:16" pos:end="21:21">NCSofa</name></name> <modifier pos:start="21:23" pos:end="21:23">*</modifier></type><name pos:start="21:24" pos:end="21:27">sofa</name> <init pos:start="21:29" pos:end="21:38">= <expr pos:start="21:31" pos:end="21:38"><operator pos:start="21:31" pos:end="21:31">&amp;</operator><name pos:start="21:32" pos:end="21:38"><name pos:start="21:32" pos:end="21:32">s</name><operator pos:start="21:33" pos:end="21:34">-&gt;</operator><name pos:start="21:35" pos:end="21:38">sofa</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:31"><expr pos:start="23:9" pos:end="23:30"><name pos:start="23:9" pos:end="23:9">m</name> <operator pos:start="23:11" pos:end="23:11">=</operator> <call pos:start="23:13" pos:end="23:30"><name pos:start="23:13" pos:end="23:18">find_m</name><argument_list pos:start="23:19" pos:end="23:30">(<argument pos:start="23:20" pos:end="23:20"><expr pos:start="23:20" pos:end="23:20"><name pos:start="23:20" pos:end="23:20">s</name></expr></argument>, <argument pos:start="23:23" pos:end="23:23"><expr pos:start="23:23" pos:end="23:23"><literal type="number" pos:start="23:23" pos:end="23:23">0</literal></expr></argument>, <argument pos:start="23:26" pos:end="23:26"><expr pos:start="23:26" pos:end="23:26"><literal type="number" pos:start="23:26" pos:end="23:26">0</literal></expr></argument>, <argument pos:start="23:29" pos:end="23:29"><expr pos:start="23:29" pos:end="23:29"><literal type="number" pos:start="23:29" pos:end="23:29">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="25:9" pos:end="25:57">/* get energy of that IR and compensate volume */</comment>

        <expr_stmt pos:start="27:9" pos:end="27:53"><expr pos:start="27:9" pos:end="27:52"><name pos:start="27:9" pos:end="27:10">ir</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <name pos:start="27:14" pos:end="27:26"><name pos:start="27:14" pos:end="27:17">sofa</name><operator pos:start="27:18" pos:end="27:19">-&gt;</operator><name pos:start="27:20" pos:end="27:26">data_ir</name></name> <operator pos:start="27:28" pos:end="27:28">+</operator> <literal type="number" pos:start="27:30" pos:end="27:30">2</literal> <operator pos:start="27:32" pos:end="27:32">*</operator> <name pos:start="27:34" pos:end="27:34">m</name> <operator pos:start="27:36" pos:end="27:36">*</operator> <name pos:start="27:38" pos:end="27:52"><name pos:start="27:38" pos:end="27:41">sofa</name><operator pos:start="27:42" pos:end="27:43">-&gt;</operator><name pos:start="27:44" pos:end="27:52">n_samples</name></name></expr>;</expr_stmt>

        <if_stmt pos:start="29:9" pos:end="37:9"><if pos:start="29:9" pos:end="33:9">if <condition pos:start="29:12" pos:end="29:33">(<expr pos:start="29:13" pos:end="29:32"><name pos:start="29:13" pos:end="29:27"><name pos:start="29:13" pos:end="29:16">sofa</name><operator pos:start="29:17" pos:end="29:18">-&gt;</operator><name pos:start="29:19" pos:end="29:27">n_samples</name></name> <operator pos:start="29:29" pos:end="29:29">&amp;</operator> <literal type="number" pos:start="29:31" pos:end="29:32">31</literal></expr>)</condition> <block pos:start="29:35" pos:end="33:9">{<block_content pos:start="31:13" pos:end="31:75">

            <expr_stmt pos:start="31:13" pos:end="31:75"><expr pos:start="31:13" pos:end="31:74"><name pos:start="31:13" pos:end="31:18">energy</name> <operator pos:start="31:20" pos:end="31:20">=</operator> <call pos:start="31:22" pos:end="31:74"><name pos:start="31:22" pos:end="31:49">avpriv_scalarproduct_float_c</name><argument_list pos:start="31:50" pos:end="31:74">(<argument pos:start="31:51" pos:end="31:52"><expr pos:start="31:51" pos:end="31:52"><name pos:start="31:51" pos:end="31:52">ir</name></expr></argument>, <argument pos:start="31:55" pos:end="31:56"><expr pos:start="31:55" pos:end="31:56"><name pos:start="31:55" pos:end="31:56">ir</name></expr></argument>, <argument pos:start="31:59" pos:end="31:73"><expr pos:start="31:59" pos:end="31:73"><name pos:start="31:59" pos:end="31:73"><name pos:start="31:59" pos:end="31:62">sofa</name><operator pos:start="31:63" pos:end="31:64">-&gt;</operator><name pos:start="31:65" pos:end="31:73">n_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="33:11" pos:end="37:9">else <block pos:start="33:16" pos:end="37:9">{<block_content pos:start="35:13" pos:end="35:75">

            <expr_stmt pos:start="35:13" pos:end="35:75"><expr pos:start="35:13" pos:end="35:74"><name pos:start="35:13" pos:end="35:18">energy</name> <operator pos:start="35:20" pos:end="35:20">=</operator> <call pos:start="35:22" pos:end="35:74"><name pos:start="35:22" pos:end="35:49"><name pos:start="35:22" pos:end="35:22">s</name><operator pos:start="35:23" pos:end="35:24">-&gt;</operator><name pos:start="35:25" pos:end="35:28">fdsp</name><operator pos:start="35:29" pos:end="35:30">-&gt;</operator><name pos:start="35:31" pos:end="35:49">scalarproduct_float</name></name><argument_list pos:start="35:50" pos:end="35:74">(<argument pos:start="35:51" pos:end="35:52"><expr pos:start="35:51" pos:end="35:52"><name pos:start="35:51" pos:end="35:52">ir</name></expr></argument>, <argument pos:start="35:55" pos:end="35:56"><expr pos:start="35:55" pos:end="35:56"><name pos:start="35:55" pos:end="35:56">ir</name></expr></argument>, <argument pos:start="35:59" pos:end="35:73"><expr pos:start="35:59" pos:end="35:73"><name pos:start="35:59" pos:end="35:73"><name pos:start="35:59" pos:end="35:62">sofa</name><operator pos:start="35:63" pos:end="35:64">-&gt;</operator><name pos:start="35:65" pos:end="35:73">n_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:60"><expr pos:start="39:9" pos:end="39:59"><name pos:start="39:9" pos:end="39:18">compensate</name> <operator pos:start="39:20" pos:end="39:20">=</operator> <literal type="number" pos:start="39:22" pos:end="39:24">256</literal> <operator pos:start="39:26" pos:end="39:26">/</operator> <operator pos:start="39:28" pos:end="39:28">(</operator><name pos:start="39:29" pos:end="39:43"><name pos:start="39:29" pos:end="39:32">sofa</name><operator pos:start="39:33" pos:end="39:34">-&gt;</operator><name pos:start="39:35" pos:end="39:43">n_samples</name></name> <operator pos:start="39:45" pos:end="39:45">*</operator> <call pos:start="39:47" pos:end="39:58"><name pos:start="39:47" pos:end="39:50">sqrt</name><argument_list pos:start="39:51" pos:end="39:58">(<argument pos:start="39:52" pos:end="39:57"><expr pos:start="39:52" pos:end="39:57"><name pos:start="39:52" pos:end="39:57">energy</name></expr></argument>)</argument_list></call><operator pos:start="39:59" pos:end="39:59">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:73"><expr pos:start="41:9" pos:end="41:72"><call pos:start="41:9" pos:end="41:72"><name pos:start="41:9" pos:end="41:14">av_log</name><argument_list pos:start="41:15" pos:end="41:72">(<argument pos:start="41:16" pos:end="41:18"><expr pos:start="41:16" pos:end="41:18"><name pos:start="41:16" pos:end="41:18">ctx</name></expr></argument>, <argument pos:start="41:21" pos:end="41:32"><expr pos:start="41:21" pos:end="41:32"><name pos:start="41:21" pos:end="41:32">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="41:35" pos:end="41:59"><expr pos:start="41:35" pos:end="41:59"><literal type="string" pos:start="41:35" pos:end="41:59">"Compensate-factor: %f\n"</literal></expr></argument>, <argument pos:start="41:62" pos:end="41:71"><expr pos:start="41:62" pos:end="41:71"><name pos:start="41:62" pos:end="41:71">compensate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:27"><expr pos:start="43:9" pos:end="43:26"><name pos:start="43:9" pos:end="43:10">ir</name> <operator pos:start="43:12" pos:end="43:12">=</operator> <name pos:start="43:14" pos:end="43:26"><name pos:start="43:14" pos:end="43:17">sofa</name><operator pos:start="43:18" pos:end="43:19">-&gt;</operator><name pos:start="43:20" pos:end="43:26">data_ir</name></name></expr>;</expr_stmt>

        <comment type="block" pos:start="45:9" pos:end="45:46">/* apply volume compensation to IRs */</comment>

        <expr_stmt pos:start="47:9" pos:end="47:91"><expr pos:start="47:9" pos:end="47:90"><call pos:start="47:9" pos:end="47:90"><name pos:start="47:9" pos:end="47:35"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:15">fdsp</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:35">vector_fmul_scalar</name></name><argument_list pos:start="47:36" pos:end="47:90">(<argument pos:start="47:37" pos:end="47:38"><expr pos:start="47:37" pos:end="47:38"><name pos:start="47:37" pos:end="47:38">ir</name></expr></argument>, <argument pos:start="47:41" pos:end="47:42"><expr pos:start="47:41" pos:end="47:42"><name pos:start="47:41" pos:end="47:42">ir</name></expr></argument>, <argument pos:start="47:45" pos:end="47:54"><expr pos:start="47:45" pos:end="47:54"><name pos:start="47:45" pos:end="47:54">compensate</name></expr></argument>, <argument pos:start="47:57" pos:end="47:89"><expr pos:start="47:57" pos:end="47:89"><name pos:start="47:57" pos:end="47:71"><name pos:start="47:57" pos:end="47:60">sofa</name><operator pos:start="47:61" pos:end="47:62">-&gt;</operator><name pos:start="47:63" pos:end="47:71">n_samples</name></name> <operator pos:start="47:73" pos:end="47:73">*</operator> <name pos:start="47:75" pos:end="47:85"><name pos:start="47:75" pos:end="47:78">sofa</name><operator pos:start="47:79" pos:end="47:80">-&gt;</operator><name pos:start="47:81" pos:end="47:85">m_dim</name></name> <operator pos:start="47:87" pos:end="47:87">*</operator> <literal type="number" pos:start="47:89" pos:end="47:89">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="49:9" pos:end="49:17"><expr pos:start="49:9" pos:end="49:16"><call pos:start="49:9" pos:end="49:16"><name pos:start="49:9" pos:end="49:14">emms_c</name><argument_list pos:start="49:15" pos:end="49:16">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
