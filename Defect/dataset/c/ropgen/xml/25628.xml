<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/25628.c" pos:tabs="8"><function pos:start="1:1" pos:end="87:1"><type pos:start="1:1" pos:end="1:12"><name pos:start="1:1" pos:end="1:10">BlockAIOCB</name> <modifier pos:start="1:12" pos:end="1:12">*</modifier></type><name pos:start="1:13" pos:end="1:23">laio_submit</name><parameter_list pos:start="1:24" pos:end="5:56">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:40">BlockDriverState</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:44">bs</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:62"><decl pos:start="1:47" pos:end="1:62"><type pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:59">LinuxAioState</name> <modifier pos:start="1:61" pos:end="1:61">*</modifier></type><name pos:start="1:62" pos:end="1:62">s</name></decl></parameter>, <parameter pos:start="1:65" pos:end="1:70"><decl pos:start="1:65" pos:end="1:70"><type pos:start="1:65" pos:end="1:70"><name pos:start="1:65" pos:end="1:67">int</name></type> <name pos:start="1:69" pos:end="1:70">fd</name></decl></parameter>,

        <parameter pos:start="3:9" pos:end="3:26"><decl pos:start="3:9" pos:end="3:26"><type pos:start="3:9" pos:end="3:26"><name pos:start="3:9" pos:end="3:15">int64_t</name></type> <name pos:start="3:17" pos:end="3:26">sector_num</name></decl></parameter>, <parameter pos:start="3:29" pos:end="3:46"><decl pos:start="3:29" pos:end="3:46"><type pos:start="3:29" pos:end="3:46"><name pos:start="3:29" pos:end="3:40">QEMUIOVector</name> <modifier pos:start="3:42" pos:end="3:42">*</modifier></type><name pos:start="3:43" pos:end="3:46">qiov</name></decl></parameter>, <parameter pos:start="3:49" pos:end="3:62"><decl pos:start="3:49" pos:end="3:62"><type pos:start="3:49" pos:end="3:62"><name pos:start="3:49" pos:end="3:51">int</name></type> <name pos:start="3:53" pos:end="3:62">nb_sectors</name></decl></parameter>,

        <parameter pos:start="5:9" pos:end="5:31"><decl pos:start="5:9" pos:end="5:31"><type pos:start="5:9" pos:end="5:31"><name pos:start="5:9" pos:end="5:27">BlockCompletionFunc</name> <modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:31">cb</name></decl></parameter>, <parameter pos:start="5:34" pos:end="5:45"><decl pos:start="5:34" pos:end="5:45"><type pos:start="5:34" pos:end="5:45"><name pos:start="5:34" pos:end="5:37">void</name> <modifier pos:start="5:39" pos:end="5:39">*</modifier></type><name pos:start="5:40" pos:end="5:45">opaque</name></decl></parameter>, <parameter pos:start="5:48" pos:end="5:55"><decl pos:start="5:48" pos:end="5:55"><type pos:start="5:48" pos:end="5:55"><name pos:start="5:48" pos:end="5:50">int</name></type> <name pos:start="5:52" pos:end="5:55">type</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="87:1">{<block_content pos:start="9:5" pos:end="85:16">

    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:24"><name pos:start="9:5" pos:end="9:22"><name pos:start="9:5" pos:end="9:10">struct</name> <name pos:start="9:12" pos:end="9:22">qemu_laiocb</name></name> <modifier pos:start="9:24" pos:end="9:24">*</modifier></type><name pos:start="9:25" pos:end="9:30">laiocb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:23"><decl pos:start="11:5" pos:end="11:22"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15"><name pos:start="11:5" pos:end="11:10">struct</name> <name pos:start="11:12" pos:end="11:15">iocb</name></name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:22">iocbs</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:36"><decl pos:start="13:5" pos:end="13:35"><type pos:start="13:5" pos:end="13:9"><name pos:start="13:5" pos:end="13:9">off_t</name></type> <name pos:start="13:11" pos:end="13:16">offset</name> <init pos:start="13:18" pos:end="13:35">= <expr pos:start="13:20" pos:end="13:35"><name pos:start="13:20" pos:end="13:29">sector_num</name> <operator pos:start="13:31" pos:end="13:31">*</operator> <literal type="number" pos:start="13:33" pos:end="13:35">512</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="17:5" pos:end="17:60"><expr pos:start="17:5" pos:end="17:59"><name pos:start="17:5" pos:end="17:10">laiocb</name> <operator pos:start="17:12" pos:end="17:12">=</operator> <call pos:start="17:14" pos:end="17:59"><name pos:start="17:14" pos:end="17:25">qemu_aio_get</name><argument_list pos:start="17:26" pos:end="17:59">(<argument pos:start="17:27" pos:end="17:42"><expr pos:start="17:27" pos:end="17:42"><operator pos:start="17:27" pos:end="17:27">&amp;</operator><name pos:start="17:28" pos:end="17:42">laio_aiocb_info</name></expr></argument>, <argument pos:start="17:45" pos:end="17:46"><expr pos:start="17:45" pos:end="17:46"><name pos:start="17:45" pos:end="17:46">bs</name></expr></argument>, <argument pos:start="17:49" pos:end="17:50"><expr pos:start="17:49" pos:end="17:50"><name pos:start="17:49" pos:end="17:50">cb</name></expr></argument>, <argument pos:start="17:53" pos:end="17:58"><expr pos:start="17:53" pos:end="17:58"><name pos:start="17:53" pos:end="17:58">opaque</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:38"><expr pos:start="19:5" pos:end="19:37"><name pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:10">laiocb</name><operator pos:start="19:11" pos:end="19:12">-&gt;</operator><name pos:start="19:13" pos:end="19:18">nbytes</name></name> <operator pos:start="19:20" pos:end="19:20">=</operator> <name pos:start="19:22" pos:end="19:31">nb_sectors</name> <operator pos:start="19:33" pos:end="19:33">*</operator> <literal type="number" pos:start="19:35" pos:end="19:37">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:20"><expr pos:start="21:5" pos:end="21:19"><name pos:start="21:5" pos:end="21:15"><name pos:start="21:5" pos:end="21:10">laiocb</name><operator pos:start="21:11" pos:end="21:12">-&gt;</operator><name pos:start="21:13" pos:end="21:15">ctx</name></name> <operator pos:start="21:17" pos:end="21:17">=</operator> <name pos:start="21:19" pos:end="21:19">s</name></expr>;</expr_stmt>

    <expr_stmt pos:start="23:5" pos:end="23:31"><expr pos:start="23:5" pos:end="23:30"><name pos:start="23:5" pos:end="23:15"><name pos:start="23:5" pos:end="23:10">laiocb</name><operator pos:start="23:11" pos:end="23:12">-&gt;</operator><name pos:start="23:13" pos:end="23:15">ret</name></name> <operator pos:start="23:17" pos:end="23:17">=</operator> <operator pos:start="23:19" pos:end="23:19">-</operator><name pos:start="23:20" pos:end="23:30">EINPROGRESS</name></expr>;</expr_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:46"><expr pos:start="25:5" pos:end="25:45"><name pos:start="25:5" pos:end="25:19"><name pos:start="25:5" pos:end="25:10">laiocb</name><operator pos:start="25:11" pos:end="25:12">-&gt;</operator><name pos:start="25:13" pos:end="25:19">is_read</name></name> <operator pos:start="25:21" pos:end="25:21">=</operator> <operator pos:start="25:23" pos:end="25:23">(</operator><name pos:start="25:24" pos:end="25:27">type</name> <operator pos:start="25:29" pos:end="25:30">==</operator> <name pos:start="25:32" pos:end="25:44">QEMU_AIO_READ</name><operator pos:start="25:45" pos:end="25:45">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="27:5" pos:end="27:24"><expr pos:start="27:5" pos:end="27:23"><name pos:start="27:5" pos:end="27:16"><name pos:start="27:5" pos:end="27:10">laiocb</name><operator pos:start="27:11" pos:end="27:12">-&gt;</operator><name pos:start="27:13" pos:end="27:16">qiov</name></name> <operator pos:start="27:18" pos:end="27:18">=</operator> <name pos:start="27:20" pos:end="27:23">qiov</name></expr>;</expr_stmt>



    <expr_stmt pos:start="31:5" pos:end="31:26"><expr pos:start="31:5" pos:end="31:25"><name pos:start="31:5" pos:end="31:9">iocbs</name> <operator pos:start="31:11" pos:end="31:11">=</operator> <operator pos:start="31:13" pos:end="31:13">&amp;</operator><name pos:start="31:14" pos:end="31:25"><name pos:start="31:14" pos:end="31:19">laiocb</name><operator pos:start="31:20" pos:end="31:21">-&gt;</operator><name pos:start="31:22" pos:end="31:25">iocb</name></name></expr>;</expr_stmt>



    <switch pos:start="35:5" pos:end="59:5">switch <condition pos:start="35:12" pos:end="35:17">(<expr pos:start="35:13" pos:end="35:16"><name pos:start="35:13" pos:end="35:16">type</name></expr>)</condition> <block pos:start="35:19" pos:end="59:5">{<block_content pos:start="37:5" pos:end="57:28">

    <case pos:start="37:5" pos:end="37:24">case <expr pos:start="37:10" pos:end="37:23"><name pos:start="37:10" pos:end="37:23">QEMU_AIO_WRITE</name></expr>:</case>

        <expr_stmt pos:start="39:9" pos:end="39:66"><expr pos:start="39:9" pos:end="39:65"><call pos:start="39:9" pos:end="39:65"><name pos:start="39:9" pos:end="39:23">io_prep_pwritev</name><argument_list pos:start="39:24" pos:end="39:65">(<argument pos:start="39:25" pos:end="39:29"><expr pos:start="39:25" pos:end="39:29"><name pos:start="39:25" pos:end="39:29">iocbs</name></expr></argument>, <argument pos:start="39:32" pos:end="39:33"><expr pos:start="39:32" pos:end="39:33"><name pos:start="39:32" pos:end="39:33">fd</name></expr></argument>, <argument pos:start="39:36" pos:end="39:44"><expr pos:start="39:36" pos:end="39:44"><name pos:start="39:36" pos:end="39:44"><name pos:start="39:36" pos:end="39:39">qiov</name><operator pos:start="39:40" pos:end="39:41">-&gt;</operator><name pos:start="39:42" pos:end="39:44">iov</name></name></expr></argument>, <argument pos:start="39:47" pos:end="39:56"><expr pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:56"><name pos:start="39:47" pos:end="39:50">qiov</name><operator pos:start="39:51" pos:end="39:52">-&gt;</operator><name pos:start="39:53" pos:end="39:56">niov</name></name></expr></argument>, <argument pos:start="39:59" pos:end="39:64"><expr pos:start="39:59" pos:end="39:64"><name pos:start="39:59" pos:end="39:64">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="41:9" pos:end="41:14">break;</break>

    <case pos:start="43:5" pos:end="43:23">case <expr pos:start="43:10" pos:end="43:22"><name pos:start="43:10" pos:end="43:22">QEMU_AIO_READ</name></expr>:</case>

        <expr_stmt pos:start="45:9" pos:end="45:65"><expr pos:start="45:9" pos:end="45:64"><call pos:start="45:9" pos:end="45:64"><name pos:start="45:9" pos:end="45:22">io_prep_preadv</name><argument_list pos:start="45:23" pos:end="45:64">(<argument pos:start="45:24" pos:end="45:28"><expr pos:start="45:24" pos:end="45:28"><name pos:start="45:24" pos:end="45:28">iocbs</name></expr></argument>, <argument pos:start="45:31" pos:end="45:32"><expr pos:start="45:31" pos:end="45:32"><name pos:start="45:31" pos:end="45:32">fd</name></expr></argument>, <argument pos:start="45:35" pos:end="45:43"><expr pos:start="45:35" pos:end="45:43"><name pos:start="45:35" pos:end="45:43"><name pos:start="45:35" pos:end="45:38">qiov</name><operator pos:start="45:39" pos:end="45:40">-&gt;</operator><name pos:start="45:41" pos:end="45:43">iov</name></name></expr></argument>, <argument pos:start="45:46" pos:end="45:55"><expr pos:start="45:46" pos:end="45:55"><name pos:start="45:46" pos:end="45:55"><name pos:start="45:46" pos:end="45:49">qiov</name><operator pos:start="45:50" pos:end="45:51">-&gt;</operator><name pos:start="45:52" pos:end="45:55">niov</name></name></expr></argument>, <argument pos:start="45:58" pos:end="45:63"><expr pos:start="45:58" pos:end="45:63"><name pos:start="45:58" pos:end="45:63">offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<break pos:start="47:9" pos:end="47:14">break;</break>

    <comment type="block" pos:start="49:5" pos:end="49:66">/* Currently Linux kernel does not support other operations */</comment>

    <default pos:start="51:5" pos:end="51:12">default:</default>

        <expr_stmt pos:start="53:9" pos:end="55:40"><expr pos:start="53:9" pos:end="55:39"><call pos:start="53:9" pos:end="55:39"><name pos:start="53:9" pos:end="53:15">fprintf</name><argument_list pos:start="53:16" pos:end="55:39">(<argument pos:start="53:17" pos:end="53:22"><expr pos:start="53:17" pos:end="53:22"><name pos:start="53:17" pos:end="53:22">stderr</name></expr></argument>, <argument pos:start="53:25" pos:end="53:62"><expr pos:start="53:25" pos:end="53:62"><literal type="string" pos:start="53:25" pos:end="53:62">"%s: invalid AIO request type 0x%x.\n"</literal></expr></argument>,

                        <argument pos:start="55:25" pos:end="55:32"><expr pos:start="55:25" pos:end="55:32"><name pos:start="55:25" pos:end="55:32">__func__</name></expr></argument>, <argument pos:start="55:35" pos:end="55:38"><expr pos:start="55:35" pos:end="55:38"><name pos:start="55:35" pos:end="55:38">type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <goto pos:start="57:9" pos:end="57:28">goto <name pos:start="57:14" pos:end="57:27">out_free_aiocb</name>;</goto>

    </block_content>}</block></switch>

    <expr_stmt pos:start="61:5" pos:end="61:64"><expr pos:start="61:5" pos:end="61:63"><call pos:start="61:5" pos:end="61:63"><name pos:start="61:5" pos:end="61:18">io_set_eventfd</name><argument_list pos:start="61:19" pos:end="61:63">(<argument pos:start="61:20" pos:end="61:32"><expr pos:start="61:20" pos:end="61:32"><operator pos:start="61:20" pos:end="61:20">&amp;</operator><name pos:start="61:21" pos:end="61:32"><name pos:start="61:21" pos:end="61:26">laiocb</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:32">iocb</name></name></expr></argument>, <argument pos:start="61:35" pos:end="61:62"><expr pos:start="61:35" pos:end="61:62"><call pos:start="61:35" pos:end="61:62"><name pos:start="61:35" pos:end="61:55">event_notifier_get_fd</name><argument_list pos:start="61:56" pos:end="61:62">(<argument pos:start="61:57" pos:end="61:61"><expr pos:start="61:57" pos:end="61:61"><operator pos:start="61:57" pos:end="61:57">&amp;</operator><name pos:start="61:58" pos:end="61:61"><name pos:start="61:58" pos:end="61:58">s</name><operator pos:start="61:59" pos:end="61:60">-&gt;</operator><name pos:start="61:61" pos:end="61:61">e</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="65:5" pos:end="65:57"><expr pos:start="65:5" pos:end="65:56"><call pos:start="65:5" pos:end="65:56"><name pos:start="65:5" pos:end="65:24">QSIMPLEQ_INSERT_TAIL</name><argument_list pos:start="65:25" pos:end="65:56">(<argument pos:start="65:26" pos:end="65:41"><expr pos:start="65:26" pos:end="65:41"><operator pos:start="65:26" pos:end="65:26">&amp;</operator><name pos:start="65:27" pos:end="65:41"><name pos:start="65:27" pos:end="65:27">s</name><operator pos:start="65:28" pos:end="65:29">-&gt;</operator><name pos:start="65:30" pos:end="65:33">io_q</name><operator pos:start="65:34" pos:end="65:34">.</operator><name pos:start="65:35" pos:end="65:41">pending</name></name></expr></argument>, <argument pos:start="65:44" pos:end="65:49"><expr pos:start="65:44" pos:end="65:49"><name pos:start="65:44" pos:end="65:49">laiocb</name></expr></argument>, <argument pos:start="65:52" pos:end="65:55"><expr pos:start="65:52" pos:end="65:55"><name pos:start="65:52" pos:end="65:55">next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:16"><expr pos:start="67:5" pos:end="67:15"><name pos:start="67:5" pos:end="67:13"><name pos:start="67:5" pos:end="67:5">s</name><operator pos:start="67:6" pos:end="67:7">-&gt;</operator><name pos:start="67:8" pos:end="67:11">io_q</name><operator pos:start="67:12" pos:end="67:12">.</operator><name pos:start="67:13" pos:end="67:13">n</name></name><operator pos:start="67:14" pos:end="67:15">++</operator></expr>;</expr_stmt>

    <if_stmt pos:start="69:5" pos:end="75:5"><if pos:start="69:5" pos:end="75:5">if <condition pos:start="69:8" pos:end="71:57">(<expr pos:start="69:9" pos:end="71:56"><operator pos:start="69:9" pos:end="69:9">!</operator><name pos:start="69:10" pos:end="69:24"><name pos:start="69:10" pos:end="69:10">s</name><operator pos:start="69:11" pos:end="69:12">-&gt;</operator><name pos:start="69:13" pos:end="69:16">io_q</name><operator pos:start="69:17" pos:end="69:17">.</operator><name pos:start="69:18" pos:end="69:24">blocked</name></name> <operator pos:start="69:26" pos:end="69:27">&amp;&amp;</operator>

        <operator pos:start="71:9" pos:end="71:9">(</operator><operator pos:start="71:10" pos:end="71:10">!</operator><name pos:start="71:11" pos:end="71:25"><name pos:start="71:11" pos:end="71:11">s</name><operator pos:start="71:12" pos:end="71:13">-&gt;</operator><name pos:start="71:14" pos:end="71:17">io_q</name><operator pos:start="71:18" pos:end="71:18">.</operator><name pos:start="71:19" pos:end="71:25">plugged</name></name> <operator pos:start="71:27" pos:end="71:28">||</operator> <name pos:start="71:30" pos:end="71:38"><name pos:start="71:30" pos:end="71:30">s</name><operator pos:start="71:31" pos:end="71:32">-&gt;</operator><name pos:start="71:33" pos:end="71:36">io_q</name><operator pos:start="71:37" pos:end="71:37">.</operator><name pos:start="71:38" pos:end="71:38">n</name></name> <operator pos:start="71:40" pos:end="71:41">&gt;=</operator> <name pos:start="71:43" pos:end="71:55">MAX_QUEUED_IO</name><operator pos:start="71:56" pos:end="71:56">)</operator></expr>)</condition> <block pos:start="71:59" pos:end="75:5">{<block_content pos:start="73:9" pos:end="73:22">

        <expr_stmt pos:start="73:9" pos:end="73:22"><expr pos:start="73:9" pos:end="73:21"><call pos:start="73:9" pos:end="73:21"><name pos:start="73:9" pos:end="73:18">ioq_submit</name><argument_list pos:start="73:19" pos:end="73:21">(<argument pos:start="73:20" pos:end="73:20"><expr pos:start="73:20" pos:end="73:20"><name pos:start="73:20" pos:end="73:20">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <return pos:start="77:5" pos:end="77:27">return <expr pos:start="77:12" pos:end="77:26"><operator pos:start="77:12" pos:end="77:12">&amp;</operator><name pos:start="77:13" pos:end="77:26"><name pos:start="77:13" pos:end="77:18">laiocb</name><operator pos:start="77:19" pos:end="77:20">-&gt;</operator><name pos:start="77:21" pos:end="77:26">common</name></name></expr>;</return>



<label pos:start="81:1" pos:end="81:15"><name pos:start="81:1" pos:end="81:14">out_free_aiocb</name>:</label>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><call pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:18">qemu_aio_unref</name><argument_list pos:start="83:19" pos:end="83:26">(<argument pos:start="83:20" pos:end="83:25"><expr pos:start="83:20" pos:end="83:25"><name pos:start="83:20" pos:end="83:25">laiocb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="85:5" pos:end="85:16">return <expr pos:start="85:12" pos:end="85:15"><name pos:start="85:12" pos:end="85:15">NULL</name></expr>;</return>

</block_content>}</block></function>
</unit>
