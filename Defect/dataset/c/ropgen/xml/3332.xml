<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/3332.c" pos:tabs="8"><function pos:start="1:1" pos:end="73:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:31">scsi_write_complete</name><parameter_list pos:start="1:32" pos:end="1:55">(<parameter pos:start="1:33" pos:end="1:45"><decl pos:start="1:33" pos:end="1:45"><type pos:start="1:33" pos:end="1:45"><name pos:start="1:33" pos:end="1:36">void</name> <modifier pos:start="1:38" pos:end="1:38">*</modifier></type> <name pos:start="1:40" pos:end="1:45">opaque</name></decl></parameter>, <parameter pos:start="1:48" pos:end="1:54"><decl pos:start="1:48" pos:end="1:54"><type pos:start="1:48" pos:end="1:54"><name pos:start="1:48" pos:end="1:50">int</name></type> <name pos:start="1:52" pos:end="1:54">ret</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="73:1">{<block_content pos:start="5:5" pos:end="71:5">

    <decl_stmt pos:start="5:5" pos:end="5:43"><decl pos:start="5:5" pos:end="5:42"><type pos:start="5:5" pos:end="5:17"><name pos:start="5:5" pos:end="5:15">SCSIDiskReq</name> <modifier pos:start="5:17" pos:end="5:17">*</modifier></type><name pos:start="5:18" pos:end="5:18">r</name> <init pos:start="5:20" pos:end="5:42">= <expr pos:start="5:22" pos:end="5:42"><operator pos:start="5:22" pos:end="5:22">(</operator><name pos:start="5:23" pos:end="5:33">SCSIDiskReq</name> <operator pos:start="5:35" pos:end="5:35">*</operator><operator pos:start="5:36" pos:end="5:36">)</operator><name pos:start="5:37" pos:end="5:42">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:66"><decl pos:start="7:5" pos:end="7:65"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:17">SCSIDiskState</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:20">s</name> <init pos:start="7:22" pos:end="7:65">= <expr pos:start="7:24" pos:end="7:65"><call pos:start="7:24" pos:end="7:65"><name pos:start="7:24" pos:end="7:32">DO_UPCAST</name><argument_list pos:start="7:33" pos:end="7:65">(<argument pos:start="7:34" pos:end="7:46"><expr pos:start="7:34" pos:end="7:46"><name pos:start="7:34" pos:end="7:46">SCSIDiskState</name></expr></argument>, <argument pos:start="7:49" pos:end="7:52"><expr pos:start="7:49" pos:end="7:52"><name pos:start="7:49" pos:end="7:52">qdev</name></expr></argument>, <argument pos:start="7:55" pos:end="7:64"><expr pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:64"><name pos:start="7:55" pos:end="7:55">r</name><operator pos:start="7:56" pos:end="7:57">-&gt;</operator><name pos:start="7:58" pos:end="7:60">req</name><operator pos:start="7:61" pos:end="7:61">.</operator><name pos:start="7:62" pos:end="7:64">dev</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:14">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="13:5" pos:end="19:5"><if pos:start="13:5" pos:end="19:5">if <condition pos:start="13:8" pos:end="13:29">(<expr pos:start="13:9" pos:end="13:28"><name pos:start="13:9" pos:end="13:20"><name pos:start="13:9" pos:end="13:9">r</name><operator pos:start="13:10" pos:end="13:11">-&gt;</operator><name pos:start="13:12" pos:end="13:14">req</name><operator pos:start="13:15" pos:end="13:15">.</operator><name pos:start="13:16" pos:end="13:20">aiocb</name></name> <operator pos:start="13:22" pos:end="13:23">!=</operator> <name pos:start="13:25" pos:end="13:28">NULL</name></expr>)</condition> <block pos:start="13:31" pos:end="19:5">{<block_content pos:start="15:9" pos:end="17:67">

        <expr_stmt pos:start="15:9" pos:end="15:28"><expr pos:start="15:9" pos:end="15:27"><name pos:start="15:9" pos:end="15:20"><name pos:start="15:9" pos:end="15:9">r</name><operator pos:start="15:10" pos:end="15:11">-&gt;</operator><name pos:start="15:12" pos:end="15:14">req</name><operator pos:start="15:15" pos:end="15:15">.</operator><name pos:start="15:16" pos:end="15:20">aiocb</name></name> <operator pos:start="15:22" pos:end="15:22">=</operator> <name pos:start="15:24" pos:end="15:27">NULL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:67"><expr pos:start="17:9" pos:end="17:66"><call pos:start="17:9" pos:end="17:66"><name pos:start="17:9" pos:end="17:23">block_acct_done</name><argument_list pos:start="17:24" pos:end="17:66">(<argument pos:start="17:25" pos:end="17:55"><expr pos:start="17:25" pos:end="17:55"><call pos:start="17:25" pos:end="17:55"><name pos:start="17:25" pos:end="17:38">bdrv_get_stats</name><argument_list pos:start="17:39" pos:end="17:55">(<argument pos:start="17:40" pos:end="17:54"><expr pos:start="17:40" pos:end="17:54"><name pos:start="17:40" pos:end="17:54"><name pos:start="17:40" pos:end="17:40">s</name><operator pos:start="17:41" pos:end="17:42">-&gt;</operator><name pos:start="17:43" pos:end="17:46">qdev</name><operator pos:start="17:47" pos:end="17:47">.</operator><name pos:start="17:48" pos:end="17:51">conf</name><operator pos:start="17:52" pos:end="17:52">.</operator><name pos:start="17:53" pos:end="17:54">bs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="17:58" pos:end="17:65"><expr pos:start="17:58" pos:end="17:65"><operator pos:start="17:58" pos:end="17:58">&amp;</operator><name pos:start="17:59" pos:end="17:65"><name pos:start="17:59" pos:end="17:59">r</name><operator pos:start="17:60" pos:end="17:61">-&gt;</operator><name pos:start="17:62" pos:end="17:65">acct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="21:5" pos:end="25:5"><if pos:start="21:5" pos:end="25:5">if <condition pos:start="21:8" pos:end="21:27">(<expr pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:26"><name pos:start="21:9" pos:end="21:9">r</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:14">req</name><operator pos:start="21:15" pos:end="21:15">.</operator><name pos:start="21:16" pos:end="21:26">io_canceled</name></name></expr>)</condition> <block pos:start="21:29" pos:end="25:5">{<block_content pos:start="23:9" pos:end="23:18">

        <goto pos:start="23:9" pos:end="23:18">goto <name pos:start="23:14" pos:end="23:17">done</name>;</goto>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="29:5" pos:end="37:5"><if pos:start="29:5" pos:end="37:5">if <condition pos:start="29:8" pos:end="29:16">(<expr pos:start="29:9" pos:end="29:15"><name pos:start="29:9" pos:end="29:11">ret</name> <operator pos:start="29:13" pos:end="29:13">&lt;</operator> <literal type="number" pos:start="29:15" pos:end="29:15">0</literal></expr>)</condition> <block pos:start="29:18" pos:end="37:5">{<block_content pos:start="31:9" pos:end="35:9">

        <if_stmt pos:start="31:9" pos:end="35:9"><if pos:start="31:9" pos:end="35:9">if <condition pos:start="31:12" pos:end="31:42">(<expr pos:start="31:13" pos:end="31:41"><call pos:start="31:13" pos:end="31:41"><name pos:start="31:13" pos:end="31:32">scsi_handle_rw_error</name><argument_list pos:start="31:33" pos:end="31:41">(<argument pos:start="31:34" pos:end="31:34"><expr pos:start="31:34" pos:end="31:34"><name pos:start="31:34" pos:end="31:34">r</name></expr></argument>, <argument pos:start="31:37" pos:end="31:40"><expr pos:start="31:37" pos:end="31:40"><operator pos:start="31:37" pos:end="31:37">-</operator><name pos:start="31:38" pos:end="31:40">ret</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="31:44" pos:end="35:9">{<block_content pos:start="33:13" pos:end="33:22">

            <goto pos:start="33:13" pos:end="33:22">goto <name pos:start="33:18" pos:end="33:21">done</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="41:5" pos:end="41:27"><expr pos:start="41:5" pos:end="41:26"><name pos:start="41:5" pos:end="41:5">n</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:20"><name pos:start="41:9" pos:end="41:9">r</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">qiov</name><operator pos:start="41:16" pos:end="41:16">.</operator><name pos:start="41:17" pos:end="41:20">size</name></name> <operator pos:start="41:22" pos:end="41:22">/</operator> <literal type="number" pos:start="41:24" pos:end="41:26">512</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:19"><expr pos:start="43:5" pos:end="43:18"><name pos:start="43:5" pos:end="43:13"><name pos:start="43:5" pos:end="43:5">r</name><operator pos:start="43:6" pos:end="43:7">-&gt;</operator><name pos:start="43:8" pos:end="43:13">sector</name></name> <operator pos:start="43:15" pos:end="43:16">+=</operator> <name pos:start="43:18" pos:end="43:18">n</name></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:25"><expr pos:start="45:5" pos:end="45:24"><name pos:start="45:5" pos:end="45:19"><name pos:start="45:5" pos:end="45:5">r</name><operator pos:start="45:6" pos:end="45:7">-&gt;</operator><name pos:start="45:8" pos:end="45:19">sector_count</name></name> <operator pos:start="45:21" pos:end="45:22">-=</operator> <name pos:start="45:24" pos:end="45:24">n</name></expr>;</expr_stmt>

    <if_stmt pos:start="47:5" pos:end="61:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:29">(<expr pos:start="47:9" pos:end="47:28"><name pos:start="47:9" pos:end="47:23"><name pos:start="47:9" pos:end="47:9">r</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:23">sector_count</name></name> <operator pos:start="47:25" pos:end="47:26">==</operator> <literal type="number" pos:start="47:28" pos:end="47:28">0</literal></expr>)</condition> <block pos:start="47:31" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:15">

        <expr_stmt pos:start="49:9" pos:end="49:29"><expr pos:start="49:9" pos:end="49:28"><call pos:start="49:9" pos:end="49:28"><name pos:start="49:9" pos:end="49:25">scsi_write_do_fua</name><argument_list pos:start="49:26" pos:end="49:28">(<argument pos:start="49:27" pos:end="49:27"><expr pos:start="49:27" pos:end="49:27"><name pos:start="49:27" pos:end="49:27">r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="51:9" pos:end="51:15">return;</return>

    </block_content>}</block></if> <else pos:start="53:7" pos:end="61:5">else <block pos:start="53:12" pos:end="61:5">{<block_content pos:start="55:9" pos:end="59:45">

        <expr_stmt pos:start="55:9" pos:end="55:46"><expr pos:start="55:9" pos:end="55:45"><call pos:start="55:9" pos:end="55:45"><name pos:start="55:9" pos:end="55:23">scsi_init_iovec</name><argument_list pos:start="55:24" pos:end="55:45">(<argument pos:start="55:25" pos:end="55:25"><expr pos:start="55:25" pos:end="55:25"><name pos:start="55:25" pos:end="55:25">r</name></expr></argument>, <argument pos:start="55:28" pos:end="55:44"><expr pos:start="55:28" pos:end="55:44"><name pos:start="55:28" pos:end="55:44">SCSI_DMA_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="57:9" pos:end="57:80"><expr pos:start="57:9" pos:end="57:79"><call pos:start="57:9" pos:end="57:79"><name pos:start="57:9" pos:end="57:15">DPRINTF</name><argument_list pos:start="57:16" pos:end="57:79">(<argument pos:start="57:17" pos:end="57:52"><expr pos:start="57:17" pos:end="57:52"><literal type="string" pos:start="57:17" pos:end="57:52">"Write complete tag=0x%x more=%zd\n"</literal></expr></argument>, <argument pos:start="57:55" pos:end="57:64"><expr pos:start="57:55" pos:end="57:64"><name pos:start="57:55" pos:end="57:64"><name pos:start="57:55" pos:end="57:55">r</name><operator pos:start="57:56" pos:end="57:57">-&gt;</operator><name pos:start="57:58" pos:end="57:60">req</name><operator pos:start="57:61" pos:end="57:61">.</operator><name pos:start="57:62" pos:end="57:64">tag</name></name></expr></argument>, <argument pos:start="57:67" pos:end="57:78"><expr pos:start="57:67" pos:end="57:78"><name pos:start="57:67" pos:end="57:78"><name pos:start="57:67" pos:end="57:67">r</name><operator pos:start="57:68" pos:end="57:69">-&gt;</operator><name pos:start="57:70" pos:end="57:73">qiov</name><operator pos:start="57:74" pos:end="57:74">.</operator><name pos:start="57:75" pos:end="57:78">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="59:9" pos:end="59:45"><expr pos:start="59:9" pos:end="59:44"><call pos:start="59:9" pos:end="59:44"><name pos:start="59:9" pos:end="59:21">scsi_req_data</name><argument_list pos:start="59:22" pos:end="59:44">(<argument pos:start="59:23" pos:end="59:29"><expr pos:start="59:23" pos:end="59:29"><operator pos:start="59:23" pos:end="59:23">&amp;</operator><name pos:start="59:24" pos:end="59:29"><name pos:start="59:24" pos:end="59:24">r</name><operator pos:start="59:25" pos:end="59:26">-&gt;</operator><name pos:start="59:27" pos:end="59:29">req</name></name></expr></argument>, <argument pos:start="59:32" pos:end="59:43"><expr pos:start="59:32" pos:end="59:43"><name pos:start="59:32" pos:end="59:43"><name pos:start="59:32" pos:end="59:32">r</name><operator pos:start="59:33" pos:end="59:34">-&gt;</operator><name pos:start="59:35" pos:end="59:38">qiov</name><operator pos:start="59:39" pos:end="59:39">.</operator><name pos:start="59:40" pos:end="59:43">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>



<label pos:start="65:1" pos:end="65:5"><name pos:start="65:1" pos:end="65:4">done</name>:</label>

    <if_stmt pos:start="67:5" pos:end="71:5"><if pos:start="67:5" pos:end="71:5">if <condition pos:start="67:8" pos:end="67:28">(<expr pos:start="67:9" pos:end="67:27"><operator pos:start="67:9" pos:end="67:9">!</operator><name pos:start="67:10" pos:end="67:27"><name pos:start="67:10" pos:end="67:10">r</name><operator pos:start="67:11" pos:end="67:12">-&gt;</operator><name pos:start="67:13" pos:end="67:15">req</name><operator pos:start="67:16" pos:end="67:16">.</operator><name pos:start="67:17" pos:end="67:27">io_canceled</name></name></expr>)</condition> <block pos:start="67:30" pos:end="71:5">{<block_content pos:start="69:9" pos:end="69:32">

        <expr_stmt pos:start="69:9" pos:end="69:32"><expr pos:start="69:9" pos:end="69:31"><call pos:start="69:9" pos:end="69:31"><name pos:start="69:9" pos:end="69:22">scsi_req_unref</name><argument_list pos:start="69:23" pos:end="69:31">(<argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><operator pos:start="69:24" pos:end="69:24">&amp;</operator><name pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:25">r</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:30">req</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

</block_content>}</block></function>
</unit>
