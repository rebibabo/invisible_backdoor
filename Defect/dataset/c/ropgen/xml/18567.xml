<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18567.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:29">openrisc_sim_init</name><parameter_list pos:start="1:30" pos:end="1:52">(<parameter pos:start="1:31" pos:end="1:51"><decl pos:start="1:31" pos:end="1:51"><type pos:start="1:31" pos:end="1:44"><name pos:start="1:31" pos:end="1:42">MachineState</name> <modifier pos:start="1:44" pos:end="1:44">*</modifier></type><name pos:start="1:45" pos:end="1:51">machine</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:61">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:43">= <expr pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:43"><name pos:start="5:27" pos:end="5:33">machine</name><operator pos:start="5:34" pos:end="5:35">-&gt;</operator><name pos:start="5:36" pos:end="5:43">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:47"><decl pos:start="7:5" pos:end="7:46"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:46">= <expr pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:46"><name pos:start="7:29" pos:end="7:35">machine</name><operator pos:start="7:36" pos:end="7:37">-&gt;</operator><name pos:start="7:38" pos:end="7:46">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:59"><decl pos:start="9:5" pos:end="9:58"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:58">= <expr pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:58"><name pos:start="9:35" pos:end="9:41">machine</name><operator pos:start="9:42" pos:end="9:43">-&gt;</operator><name pos:start="9:44" pos:end="9:58">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:28"><decl pos:start="11:5" pos:end="11:27"><type pos:start="11:5" pos:end="11:17"><name pos:start="11:5" pos:end="11:15">OpenRISCCPU</name> <modifier pos:start="11:17" pos:end="11:17">*</modifier></type><name pos:start="11:18" pos:end="11:20">cpu</name> <init pos:start="11:22" pos:end="11:27">= <expr pos:start="11:24" pos:end="11:27"><name pos:start="11:24" pos:end="11:27">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:22"><decl pos:start="13:5" pos:end="13:21"><type pos:start="13:5" pos:end="13:18"><name pos:start="13:5" pos:end="13:16">MemoryRegion</name> <modifier pos:start="13:18" pos:end="13:18">*</modifier></type><name pos:start="13:19" pos:end="13:21">ram</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:10"><decl pos:start="15:5" pos:end="15:9"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:9">n</name></decl>;</decl_stmt>



    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:19">(<expr pos:start="19:9" pos:end="19:18"><operator pos:start="19:9" pos:end="19:9">!</operator><name pos:start="19:10" pos:end="19:18">cpu_model</name></expr>)</condition> <block pos:start="19:21" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:29">

        <expr_stmt pos:start="21:9" pos:end="21:29"><expr pos:start="21:9" pos:end="21:28"><name pos:start="21:9" pos:end="21:17">cpu_model</name> <operator pos:start="21:19" pos:end="21:19">=</operator> <literal type="string" pos:start="21:21" pos:end="21:28">"or1200"</literal></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <for pos:start="27:5" pos:end="43:5">for <control pos:start="27:9" pos:end="27:34">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">n</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:29"><expr pos:start="27:17" pos:end="27:28"><name pos:start="27:17" pos:end="27:17">n</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <name pos:start="27:21" pos:end="27:28">smp_cpus</name></expr>;</condition> <incr pos:start="27:31" pos:end="27:33"><expr pos:start="27:31" pos:end="27:33"><name pos:start="27:31" pos:end="27:31">n</name><operator pos:start="27:32" pos:end="27:33">++</operator></expr></incr>)</control> <block pos:start="27:36" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:28">

        <expr_stmt pos:start="29:9" pos:end="29:75"><expr pos:start="29:9" pos:end="29:74"><name pos:start="29:9" pos:end="29:11">cpu</name> <operator pos:start="29:13" pos:end="29:13">=</operator> <call pos:start="29:15" pos:end="29:74"><name pos:start="29:15" pos:end="29:26">OPENRISC_CPU</name><argument_list pos:start="29:27" pos:end="29:74">(<argument pos:start="29:28" pos:end="29:73"><expr pos:start="29:28" pos:end="29:73"><call pos:start="29:28" pos:end="29:73"><name pos:start="29:28" pos:end="29:43">cpu_generic_init</name><argument_list pos:start="29:44" pos:end="29:73">(<argument pos:start="29:45" pos:end="29:61"><expr pos:start="29:45" pos:end="29:61"><name pos:start="29:45" pos:end="29:61">TYPE_OPENRISC_CPU</name></expr></argument>, <argument pos:start="29:64" pos:end="29:72"><expr pos:start="29:64" pos:end="29:72"><name pos:start="29:64" pos:end="29:72">cpu_model</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="31:9" pos:end="37:9"><if pos:start="31:9" pos:end="37:9">if <condition pos:start="31:12" pos:end="31:24">(<expr pos:start="31:13" pos:end="31:23"><name pos:start="31:13" pos:end="31:15">cpu</name> <operator pos:start="31:17" pos:end="31:18">==</operator> <name pos:start="31:20" pos:end="31:23">NULL</name></expr>)</condition> <block pos:start="31:26" pos:end="37:9">{<block_content pos:start="33:13" pos:end="35:20">

            <expr_stmt pos:start="33:13" pos:end="33:64"><expr pos:start="33:13" pos:end="33:63"><call pos:start="33:13" pos:end="33:63"><name pos:start="33:13" pos:end="33:19">fprintf</name><argument_list pos:start="33:20" pos:end="33:63">(<argument pos:start="33:21" pos:end="33:26"><expr pos:start="33:21" pos:end="33:26"><name pos:start="33:21" pos:end="33:26">stderr</name></expr></argument>, <argument pos:start="33:29" pos:end="33:62"><expr pos:start="33:29" pos:end="33:62"><literal type="string" pos:start="33:29" pos:end="33:62">"Unable to find CPU definition!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:20"><expr pos:start="35:13" pos:end="35:19"><call pos:start="35:13" pos:end="35:19"><name pos:start="35:13" pos:end="35:16">exit</name><argument_list pos:start="35:17" pos:end="35:19">(<argument pos:start="35:18" pos:end="35:18"><expr pos:start="35:18" pos:end="35:18"><literal type="number" pos:start="35:18" pos:end="35:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="39:9" pos:end="39:49"><expr pos:start="39:9" pos:end="39:48"><call pos:start="39:9" pos:end="39:48"><name pos:start="39:9" pos:end="39:27">qemu_register_reset</name><argument_list pos:start="39:28" pos:end="39:48">(<argument pos:start="39:29" pos:end="39:42"><expr pos:start="39:29" pos:end="39:42"><name pos:start="39:29" pos:end="39:42">main_cpu_reset</name></expr></argument>, <argument pos:start="39:45" pos:end="39:47"><expr pos:start="39:45" pos:end="39:47"><name pos:start="39:45" pos:end="39:47">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="41:9" pos:end="41:28"><expr pos:start="41:9" pos:end="41:27"><call pos:start="41:9" pos:end="41:27"><name pos:start="41:9" pos:end="41:22">main_cpu_reset</name><argument_list pos:start="41:23" pos:end="41:27">(<argument pos:start="41:24" pos:end="41:26"><expr pos:start="41:24" pos:end="41:26"><name pos:start="41:24" pos:end="41:26">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>



    <expr_stmt pos:start="47:5" pos:end="47:33"><expr pos:start="47:5" pos:end="47:32"><name pos:start="47:5" pos:end="47:7">ram</name> <operator pos:start="47:9" pos:end="47:9">=</operator> <call pos:start="47:11" pos:end="47:32"><name pos:start="47:11" pos:end="47:18">g_malloc</name><argument_list pos:start="47:19" pos:end="47:32">(<argument pos:start="47:20" pos:end="47:31"><expr pos:start="47:20" pos:end="47:31"><sizeof pos:start="47:20" pos:end="47:31">sizeof<argument_list pos:start="47:26" pos:end="47:31">(<argument pos:start="47:27" pos:end="47:30"><expr pos:start="47:27" pos:end="47:30"><operator pos:start="47:27" pos:end="47:27">*</operator><name pos:start="47:28" pos:end="47:30">ram</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:78"><expr pos:start="49:5" pos:end="49:77"><call pos:start="49:5" pos:end="49:77"><name pos:start="49:5" pos:end="49:26">memory_region_init_ram</name><argument_list pos:start="49:27" pos:end="49:77">(<argument pos:start="49:28" pos:end="49:30"><expr pos:start="49:28" pos:end="49:30"><name pos:start="49:28" pos:end="49:30">ram</name></expr></argument>, <argument pos:start="49:33" pos:end="49:36"><expr pos:start="49:33" pos:end="49:36"><name pos:start="49:33" pos:end="49:36">NULL</name></expr></argument>, <argument pos:start="49:39" pos:end="49:52"><expr pos:start="49:39" pos:end="49:52"><literal type="string" pos:start="49:39" pos:end="49:52">"openrisc.ram"</literal></expr></argument>, <argument pos:start="49:55" pos:end="49:62"><expr pos:start="49:55" pos:end="49:62"><name pos:start="49:55" pos:end="49:62">ram_size</name></expr></argument>, <argument pos:start="49:65" pos:end="49:76"><expr pos:start="49:65" pos:end="49:76"><operator pos:start="49:65" pos:end="49:65">&amp;</operator><name pos:start="49:66" pos:end="49:76">error_fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:61"><expr pos:start="51:5" pos:end="51:60"><call pos:start="51:5" pos:end="51:60"><name pos:start="51:5" pos:end="51:31">memory_region_add_subregion</name><argument_list pos:start="51:32" pos:end="51:60">(<argument pos:start="51:33" pos:end="51:51"><expr pos:start="51:33" pos:end="51:51"><call pos:start="51:33" pos:end="51:51"><name pos:start="51:33" pos:end="51:49">get_system_memory</name><argument_list pos:start="51:50" pos:end="51:51">()</argument_list></call></expr></argument>, <argument pos:start="51:54" pos:end="51:54"><expr pos:start="51:54" pos:end="51:54"><literal type="number" pos:start="51:54" pos:end="51:54">0</literal></expr></argument>, <argument pos:start="51:57" pos:end="51:59"><expr pos:start="51:57" pos:end="51:59"><name pos:start="51:57" pos:end="51:59">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="55:5" pos:end="55:31"><expr pos:start="55:5" pos:end="55:30"><call pos:start="55:5" pos:end="55:30"><name pos:start="55:5" pos:end="55:25">cpu_openrisc_pic_init</name><argument_list pos:start="55:26" pos:end="55:30">(<argument pos:start="55:27" pos:end="55:29"><expr pos:start="55:27" pos:end="55:29"><name pos:start="55:27" pos:end="55:29">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:33"><expr pos:start="57:5" pos:end="57:32"><call pos:start="57:5" pos:end="57:32"><name pos:start="57:5" pos:end="57:27">cpu_openrisc_clock_init</name><argument_list pos:start="57:28" pos:end="57:32">(<argument pos:start="57:29" pos:end="57:31"><expr pos:start="57:29" pos:end="57:31"><name pos:start="57:29" pos:end="57:31">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="61:5" pos:end="63:64"><expr pos:start="61:5" pos:end="63:63"><call pos:start="61:5" pos:end="63:63"><name pos:start="61:5" pos:end="61:18">serial_mm_init</name><argument_list pos:start="61:19" pos:end="63:63">(<argument pos:start="61:20" pos:end="61:38"><expr pos:start="61:20" pos:end="61:38"><call pos:start="61:20" pos:end="61:38"><name pos:start="61:20" pos:end="61:36">get_system_memory</name><argument_list pos:start="61:37" pos:end="61:38">()</argument_list></call></expr></argument>, <argument pos:start="61:41" pos:end="61:50"><expr pos:start="61:41" pos:end="61:50"><literal type="number" pos:start="61:41" pos:end="61:50">0x90000000</literal></expr></argument>, <argument pos:start="61:53" pos:end="61:53"><expr pos:start="61:53" pos:end="61:53"><literal type="number" pos:start="61:53" pos:end="61:53">0</literal></expr></argument>, <argument pos:start="61:56" pos:end="61:70"><expr pos:start="61:56" pos:end="61:70"><name pos:start="61:56" pos:end="61:70"><name pos:start="61:56" pos:end="61:58">cpu</name><operator pos:start="61:59" pos:end="61:60">-&gt;</operator><name pos:start="61:61" pos:end="61:63">env</name><operator pos:start="61:64" pos:end="61:64">.</operator><name pos:start="61:65" pos:end="61:67">irq</name><index pos:start="61:68" pos:end="61:70">[<expr pos:start="61:69" pos:end="61:69"><literal type="number" pos:start="61:69" pos:end="61:69">2</literal></expr>]</index></name></expr></argument>,

                   <argument pos:start="63:20" pos:end="63:25"><expr pos:start="63:20" pos:end="63:25"><literal type="number" pos:start="63:20" pos:end="63:25">115200</literal></expr></argument>, <argument pos:start="63:28" pos:end="63:40"><expr pos:start="63:28" pos:end="63:40"><name pos:start="63:28" pos:end="63:40"><name pos:start="63:28" pos:end="63:37">serial_hds</name><index pos:start="63:38" pos:end="63:40">[<expr pos:start="63:39" pos:end="63:39"><literal type="number" pos:start="63:39" pos:end="63:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="63:43" pos:end="63:62"><expr pos:start="63:43" pos:end="63:62"><name pos:start="63:43" pos:end="63:62">DEVICE_NATIVE_ENDIAN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="67:5" pos:end="73:5"><if pos:start="67:5" pos:end="73:5">if <condition pos:start="67:8" pos:end="67:25">(<expr pos:start="67:9" pos:end="67:24"><name pos:start="67:9" pos:end="67:19"><name pos:start="67:9" pos:end="67:16">nd_table</name><index pos:start="67:17" pos:end="67:19">[<expr pos:start="67:18" pos:end="67:18"><literal type="number" pos:start="67:18" pos:end="67:18">0</literal></expr>]</index></name><operator pos:start="67:20" pos:end="67:20">.</operator><name pos:start="67:21" pos:end="67:24">used</name></expr>)</condition> <block pos:start="67:27" pos:end="73:5">{<block_content pos:start="69:9" pos:end="71:69">

        <expr_stmt pos:start="69:9" pos:end="71:69"><expr pos:start="69:9" pos:end="71:68"><call pos:start="69:9" pos:end="71:68"><name pos:start="69:9" pos:end="69:29">openrisc_sim_net_init</name><argument_list pos:start="69:30" pos:end="71:68">(<argument pos:start="69:31" pos:end="69:49"><expr pos:start="69:31" pos:end="69:49"><call pos:start="69:31" pos:end="69:49"><name pos:start="69:31" pos:end="69:47">get_system_memory</name><argument_list pos:start="69:48" pos:end="69:49">()</argument_list></call></expr></argument>, <argument pos:start="69:52" pos:end="69:61"><expr pos:start="69:52" pos:end="69:61"><literal type="number" pos:start="69:52" pos:end="69:61">0x92000000</literal></expr></argument>,

                              <argument pos:start="71:31" pos:end="71:40"><expr pos:start="71:31" pos:end="71:40"><literal type="number" pos:start="71:31" pos:end="71:40">0x92000400</literal></expr></argument>, <argument pos:start="71:43" pos:end="71:57"><expr pos:start="71:43" pos:end="71:57"><name pos:start="71:43" pos:end="71:57"><name pos:start="71:43" pos:end="71:45">cpu</name><operator pos:start="71:46" pos:end="71:47">-&gt;</operator><name pos:start="71:48" pos:end="71:50">env</name><operator pos:start="71:51" pos:end="71:51">.</operator><name pos:start="71:52" pos:end="71:54">irq</name><index pos:start="71:55" pos:end="71:57">[<expr pos:start="71:56" pos:end="71:56"><literal type="number" pos:start="71:56" pos:end="71:56">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="71:60" pos:end="71:67"><expr pos:start="71:60" pos:end="71:67"><name pos:start="71:60" pos:end="71:67">nd_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="77:5" pos:end="77:61"><expr pos:start="77:5" pos:end="77:60"><call pos:start="77:5" pos:end="77:60"><name pos:start="77:5" pos:end="77:28">cpu_openrisc_load_kernel</name><argument_list pos:start="77:29" pos:end="77:60">(<argument pos:start="77:30" pos:end="77:37"><expr pos:start="77:30" pos:end="77:37"><name pos:start="77:30" pos:end="77:37">ram_size</name></expr></argument>, <argument pos:start="77:40" pos:end="77:54"><expr pos:start="77:40" pos:end="77:54"><name pos:start="77:40" pos:end="77:54">kernel_filename</name></expr></argument>, <argument pos:start="77:57" pos:end="77:59"><expr pos:start="77:57" pos:end="77:59"><name pos:start="77:57" pos:end="77:59">cpu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
