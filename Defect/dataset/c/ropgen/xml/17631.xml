<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/17631.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:22">CharDriverState</name> <modifier pos:start="1:24" pos:end="1:24">*</modifier></type><name pos:start="1:25" pos:end="1:43">qemu_chr_open_stdio</name><parameter_list pos:start="1:44" pos:end="1:63">(<parameter pos:start="1:45" pos:end="1:62"><decl pos:start="1:45" pos:end="1:62"><type pos:start="1:45" pos:end="1:58"><name pos:start="1:45" pos:end="1:56">ChardevStdio</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:62">opts</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:15">

    <decl_stmt pos:start="5:5" pos:end="5:27"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:23"><name pos:start="5:5" pos:end="5:19">CharDriverState</name>   <modifier pos:start="5:23" pos:end="5:23">*</modifier></type><name pos:start="5:24" pos:end="5:26">chr</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:23"><name pos:start="7:5" pos:end="7:21">WinStdioCharState</name> <modifier pos:start="7:23" pos:end="7:23">*</modifier></type><name pos:start="7:24" pos:end="7:28">stdio</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:30"><decl pos:start="9:5" pos:end="9:29"><type pos:start="9:5" pos:end="9:9"><name pos:start="9:5" pos:end="9:9">DWORD</name></type>              <name pos:start="9:24" pos:end="9:29">dwMode</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:38"><decl pos:start="11:5" pos:end="11:37"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type>                <name pos:start="11:24" pos:end="11:33">is_console</name> <init pos:start="11:35" pos:end="11:37">= <expr pos:start="11:37" pos:end="11:37"><literal type="number" pos:start="11:37" pos:end="11:37">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:47"><expr pos:start="15:5" pos:end="15:46"><name pos:start="15:5" pos:end="15:7">chr</name>   <operator pos:start="15:11" pos:end="15:11">=</operator> <call pos:start="15:13" pos:end="15:46"><name pos:start="15:13" pos:end="15:21">g_malloc0</name><argument_list pos:start="15:22" pos:end="15:46">(<argument pos:start="15:23" pos:end="15:45"><expr pos:start="15:23" pos:end="15:45"><sizeof pos:start="15:23" pos:end="15:45">sizeof<argument_list pos:start="15:29" pos:end="15:45">(<argument pos:start="15:30" pos:end="15:44"><expr pos:start="15:30" pos:end="15:44"><name pos:start="15:30" pos:end="15:44">CharDriverState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:49"><expr pos:start="17:5" pos:end="17:48"><name pos:start="17:5" pos:end="17:9">stdio</name> <operator pos:start="17:11" pos:end="17:11">=</operator> <call pos:start="17:13" pos:end="17:48"><name pos:start="17:13" pos:end="17:21">g_malloc0</name><argument_list pos:start="17:22" pos:end="17:48">(<argument pos:start="17:23" pos:end="17:47"><expr pos:start="17:23" pos:end="17:47"><sizeof pos:start="17:23" pos:end="17:47">sizeof<argument_list pos:start="17:29" pos:end="17:47">(<argument pos:start="17:30" pos:end="17:46"><expr pos:start="17:30" pos:end="17:46"><name pos:start="17:30" pos:end="17:46">WinStdioCharState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="21:5" pos:end="21:51"><expr pos:start="21:5" pos:end="21:50"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:9">stdio</name><operator pos:start="21:10" pos:end="21:11">-&gt;</operator><name pos:start="21:12" pos:end="21:17">hStdIn</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <call pos:start="21:21" pos:end="21:50"><name pos:start="21:21" pos:end="21:32">GetStdHandle</name><argument_list pos:start="21:33" pos:end="21:50">(<argument pos:start="21:34" pos:end="21:49"><expr pos:start="21:34" pos:end="21:49"><name pos:start="21:34" pos:end="21:49">STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="29:5"><if pos:start="23:5" pos:end="29:5">if <condition pos:start="23:8" pos:end="23:46">(<expr pos:start="23:9" pos:end="23:45"><name pos:start="23:9" pos:end="23:21"><name pos:start="23:9" pos:end="23:13">stdio</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:21">hStdIn</name></name> <operator pos:start="23:23" pos:end="23:24">==</operator> <name pos:start="23:26" pos:end="23:45">INVALID_HANDLE_VALUE</name></expr>)</condition> <block pos:start="23:48" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:16">

        <expr_stmt pos:start="25:9" pos:end="25:63"><expr pos:start="25:9" pos:end="25:62"><call pos:start="25:9" pos:end="25:62"><name pos:start="25:9" pos:end="25:15">fprintf</name><argument_list pos:start="25:16" pos:end="25:62">(<argument pos:start="25:17" pos:end="25:22"><expr pos:start="25:17" pos:end="25:22"><name pos:start="25:17" pos:end="25:22">stderr</name></expr></argument>, <argument pos:start="25:25" pos:end="25:61"><expr pos:start="25:25" pos:end="25:61"><literal type="string" pos:start="25:25" pos:end="25:61">"cannot open stdio: invalid handle\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:16"><expr pos:start="27:9" pos:end="27:15"><call pos:start="27:9" pos:end="27:15"><name pos:start="27:9" pos:end="27:12">exit</name><argument_list pos:start="27:13" pos:end="27:15">(<argument pos:start="27:14" pos:end="27:14"><expr pos:start="27:14" pos:end="27:14"><literal type="number" pos:start="27:14" pos:end="27:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:61"><expr pos:start="33:5" pos:end="33:60"><name pos:start="33:5" pos:end="33:14">is_console</name> <operator pos:start="33:16" pos:end="33:16">=</operator> <call pos:start="33:18" pos:end="33:55"><name pos:start="33:18" pos:end="33:31">GetConsoleMode</name><argument_list pos:start="33:32" pos:end="33:55">(<argument pos:start="33:33" pos:end="33:45"><expr pos:start="33:33" pos:end="33:45"><name pos:start="33:33" pos:end="33:45"><name pos:start="33:33" pos:end="33:37">stdio</name><operator pos:start="33:38" pos:end="33:39">-&gt;</operator><name pos:start="33:40" pos:end="33:45">hStdIn</name></name></expr></argument>, <argument pos:start="33:48" pos:end="33:54"><expr pos:start="33:48" pos:end="33:54"><operator pos:start="33:48" pos:end="33:48">&amp;</operator><name pos:start="33:49" pos:end="33:54">dwMode</name></expr></argument>)</argument_list></call> <operator pos:start="33:57" pos:end="33:58">!=</operator> <literal type="number" pos:start="33:60" pos:end="33:60">0</literal></expr>;</expr_stmt>



    <expr_stmt pos:start="37:5" pos:end="37:27"><expr pos:start="37:5" pos:end="37:26"><name pos:start="37:5" pos:end="37:15"><name pos:start="37:5" pos:end="37:7">chr</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:15">opaque</name></name>    <operator pos:start="37:20" pos:end="37:20">=</operator> <name pos:start="37:22" pos:end="37:26">stdio</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:37"><expr pos:start="39:5" pos:end="39:36"><name pos:start="39:5" pos:end="39:18"><name pos:start="39:5" pos:end="39:7">chr</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:18">chr_write</name></name> <operator pos:start="39:20" pos:end="39:20">=</operator> <name pos:start="39:22" pos:end="39:36">win_stdio_write</name></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:37"><expr pos:start="41:5" pos:end="41:36"><name pos:start="41:5" pos:end="41:18"><name pos:start="41:5" pos:end="41:7">chr</name><operator pos:start="41:8" pos:end="41:9">-&gt;</operator><name pos:start="41:10" pos:end="41:18">chr_close</name></name> <operator pos:start="41:20" pos:end="41:20">=</operator> <name pos:start="41:22" pos:end="41:36">win_stdio_close</name></expr>;</expr_stmt>



    <if_stmt pos:start="45:5" pos:end="91:5"><if pos:start="45:5" pos:end="55:5">if <condition pos:start="45:8" pos:end="45:19">(<expr pos:start="45:9" pos:end="45:18"><name pos:start="45:9" pos:end="45:18">is_console</name></expr>)</condition> <block pos:start="45:21" pos:end="55:5">{<block_content pos:start="47:9" pos:end="53:9">

        <if_stmt pos:start="47:9" pos:end="53:9"><if pos:start="47:9" pos:end="53:9">if <condition pos:start="47:12" pos:end="49:59">(<expr pos:start="47:13" pos:end="49:58"><call pos:start="47:13" pos:end="49:58"><name pos:start="47:13" pos:end="47:32">qemu_add_wait_object</name><argument_list pos:start="47:33" pos:end="49:58">(<argument pos:start="47:34" pos:end="47:46"><expr pos:start="47:34" pos:end="47:46"><name pos:start="47:34" pos:end="47:46"><name pos:start="47:34" pos:end="47:38">stdio</name><operator pos:start="47:39" pos:end="47:40">-&gt;</operator><name pos:start="47:41" pos:end="47:46">hStdIn</name></name></expr></argument>,

                                 <argument pos:start="49:34" pos:end="49:52"><expr pos:start="49:34" pos:end="49:52"><name pos:start="49:34" pos:end="49:52">win_stdio_wait_func</name></expr></argument>, <argument pos:start="49:55" pos:end="49:57"><expr pos:start="49:55" pos:end="49:57"><name pos:start="49:55" pos:end="49:57">chr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="49:61" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:62">

            <expr_stmt pos:start="51:13" pos:end="51:62"><expr pos:start="51:13" pos:end="51:61"><call pos:start="51:13" pos:end="51:61"><name pos:start="51:13" pos:end="51:19">fprintf</name><argument_list pos:start="51:20" pos:end="51:61">(<argument pos:start="51:21" pos:end="51:26"><expr pos:start="51:21" pos:end="51:26"><name pos:start="51:21" pos:end="51:26">stderr</name></expr></argument>, <argument pos:start="51:29" pos:end="51:60"><expr pos:start="51:29" pos:end="51:60"><literal type="string" pos:start="51:29" pos:end="51:60">"qemu_add_wait_object: failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else pos:start="55:7" pos:end="91:5">else <block pos:start="55:12" pos:end="91:5">{<block_content pos:start="57:9" pos:end="89:9">

        <decl_stmt pos:start="57:9" pos:end="57:21"><decl pos:start="57:9" pos:end="57:20"><type pos:start="57:9" pos:end="57:13"><name pos:start="57:9" pos:end="57:13">DWORD</name></type>   <name pos:start="57:17" pos:end="57:20">dwId</name></decl>;</decl_stmt>

            

        <expr_stmt pos:start="61:9" pos:end="61:72"><expr pos:start="61:9" pos:end="61:71"><name pos:start="61:9" pos:end="61:31"><name pos:start="61:9" pos:end="61:13">stdio</name><operator pos:start="61:14" pos:end="61:15">-&gt;</operator><name pos:start="61:16" pos:end="61:31">hInputReadyEvent</name></name> <operator pos:start="61:33" pos:end="61:33">=</operator> <call pos:start="61:35" pos:end="61:71"><name pos:start="61:35" pos:end="61:45">CreateEvent</name><argument_list pos:start="61:46" pos:end="61:71">(<argument pos:start="61:47" pos:end="61:50"><expr pos:start="61:47" pos:end="61:50"><name pos:start="61:47" pos:end="61:50">NULL</name></expr></argument>, <argument pos:start="61:53" pos:end="61:57"><expr pos:start="61:53" pos:end="61:57"><name pos:start="61:53" pos:end="61:57">FALSE</name></expr></argument>, <argument pos:start="61:60" pos:end="61:64"><expr pos:start="61:60" pos:end="61:64"><name pos:start="61:60" pos:end="61:64">FALSE</name></expr></argument>, <argument pos:start="61:67" pos:end="61:70"><expr pos:start="61:67" pos:end="61:70"><name pos:start="61:67" pos:end="61:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:72"><expr pos:start="63:9" pos:end="63:71"><name pos:start="63:9" pos:end="63:30"><name pos:start="63:9" pos:end="63:13">stdio</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:30">hInputDoneEvent</name></name>  <operator pos:start="63:33" pos:end="63:33">=</operator> <call pos:start="63:35" pos:end="63:71"><name pos:start="63:35" pos:end="63:45">CreateEvent</name><argument_list pos:start="63:46" pos:end="63:71">(<argument pos:start="63:47" pos:end="63:50"><expr pos:start="63:47" pos:end="63:50"><name pos:start="63:47" pos:end="63:50">NULL</name></expr></argument>, <argument pos:start="63:53" pos:end="63:57"><expr pos:start="63:53" pos:end="63:57"><name pos:start="63:53" pos:end="63:57">FALSE</name></expr></argument>, <argument pos:start="63:60" pos:end="63:64"><expr pos:start="63:60" pos:end="63:64"><name pos:start="63:60" pos:end="63:64">FALSE</name></expr></argument>, <argument pos:start="63:67" pos:end="63:70"><expr pos:start="63:67" pos:end="63:70"><name pos:start="63:67" pos:end="63:70">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="67:62"><expr pos:start="65:9" pos:end="67:61"><name pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:13">stdio</name><operator pos:start="65:14" pos:end="65:15">-&gt;</operator><name pos:start="65:16" pos:end="65:27">hInputThread</name></name>     <operator pos:start="65:33" pos:end="65:33">=</operator> <call pos:start="65:35" pos:end="67:61"><name pos:start="65:35" pos:end="65:46">CreateThread</name><argument_list pos:start="65:47" pos:end="67:61">(<argument pos:start="65:48" pos:end="65:51"><expr pos:start="65:48" pos:end="65:51"><name pos:start="65:48" pos:end="65:51">NULL</name></expr></argument>, <argument pos:start="65:54" pos:end="65:54"><expr pos:start="65:54" pos:end="65:54"><literal type="number" pos:start="65:54" pos:end="65:54">0</literal></expr></argument>, <argument pos:start="65:57" pos:end="65:72"><expr pos:start="65:57" pos:end="65:72"><name pos:start="65:57" pos:end="65:72">win_stdio_thread</name></expr></argument>,

                                               <argument pos:start="67:48" pos:end="67:50"><expr pos:start="67:48" pos:end="67:50"><name pos:start="67:48" pos:end="67:50">chr</name></expr></argument>, <argument pos:start="67:53" pos:end="67:53"><expr pos:start="67:53" pos:end="67:53"><literal type="number" pos:start="67:53" pos:end="67:53">0</literal></expr></argument>, <argument pos:start="67:56" pos:end="67:60"><expr pos:start="67:56" pos:end="67:60"><operator pos:start="67:56" pos:end="67:56">&amp;</operator><name pos:start="67:57" pos:end="67:60">dwId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <if_stmt pos:start="71:9" pos:end="81:9"><if pos:start="71:9" pos:end="81:9">if <condition pos:start="71:12" pos:end="75:62">(<expr pos:start="71:13" pos:end="75:61"><name pos:start="71:13" pos:end="71:31"><name pos:start="71:13" pos:end="71:17">stdio</name><operator pos:start="71:18" pos:end="71:19">-&gt;</operator><name pos:start="71:20" pos:end="71:31">hInputThread</name></name> <operator pos:start="71:33" pos:end="71:34">==</operator> <name pos:start="71:36" pos:end="71:55">INVALID_HANDLE_VALUE</name>

            <operator pos:start="73:13" pos:end="73:14">||</operator> <name pos:start="73:16" pos:end="73:38"><name pos:start="73:16" pos:end="73:20">stdio</name><operator pos:start="73:21" pos:end="73:22">-&gt;</operator><name pos:start="73:23" pos:end="73:38">hInputReadyEvent</name></name> <operator pos:start="73:40" pos:end="73:41">==</operator> <name pos:start="73:43" pos:end="73:62">INVALID_HANDLE_VALUE</name>

            <operator pos:start="75:13" pos:end="75:14">||</operator> <name pos:start="75:16" pos:end="75:37"><name pos:start="75:16" pos:end="75:20">stdio</name><operator pos:start="75:21" pos:end="75:22">-&gt;</operator><name pos:start="75:23" pos:end="75:37">hInputDoneEvent</name></name> <operator pos:start="75:39" pos:end="75:40">==</operator> <name pos:start="75:42" pos:end="75:61">INVALID_HANDLE_VALUE</name></expr>)</condition> <block pos:start="75:64" pos:end="81:9">{<block_content pos:start="77:13" pos:end="79:20">

            <expr_stmt pos:start="77:13" pos:end="77:69"><expr pos:start="77:13" pos:end="77:68"><call pos:start="77:13" pos:end="77:68"><name pos:start="77:13" pos:end="77:19">fprintf</name><argument_list pos:start="77:20" pos:end="77:68">(<argument pos:start="77:21" pos:end="77:26"><expr pos:start="77:21" pos:end="77:26"><name pos:start="77:21" pos:end="77:26">stderr</name></expr></argument>, <argument pos:start="77:29" pos:end="77:67"><expr pos:start="77:29" pos:end="77:67"><literal type="string" pos:start="77:29" pos:end="77:67">"cannot create stdio thread or event\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="79:20"><expr pos:start="79:13" pos:end="79:19"><call pos:start="79:13" pos:end="79:19"><name pos:start="79:13" pos:end="79:16">exit</name><argument_list pos:start="79:17" pos:end="79:19">(<argument pos:start="79:18" pos:end="79:18"><expr pos:start="79:18" pos:end="79:18"><literal type="number" pos:start="79:18" pos:end="79:18">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="83:9" pos:end="89:9"><if pos:start="83:9" pos:end="89:9">if <condition pos:start="83:12" pos:end="85:66">(<expr pos:start="83:13" pos:end="85:65"><call pos:start="83:13" pos:end="85:65"><name pos:start="83:13" pos:end="83:32">qemu_add_wait_object</name><argument_list pos:start="83:33" pos:end="85:65">(<argument pos:start="83:34" pos:end="83:56"><expr pos:start="83:34" pos:end="83:56"><name pos:start="83:34" pos:end="83:56"><name pos:start="83:34" pos:end="83:38">stdio</name><operator pos:start="83:39" pos:end="83:40">-&gt;</operator><name pos:start="83:41" pos:end="83:56">hInputReadyEvent</name></name></expr></argument>,

                                 <argument pos:start="85:34" pos:end="85:59"><expr pos:start="85:34" pos:end="85:59"><name pos:start="85:34" pos:end="85:59">win_stdio_thread_wait_func</name></expr></argument>, <argument pos:start="85:62" pos:end="85:64"><expr pos:start="85:62" pos:end="85:64"><name pos:start="85:62" pos:end="85:64">chr</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="85:68" pos:end="89:9">{<block_content pos:start="87:13" pos:end="87:62">

            <expr_stmt pos:start="87:13" pos:end="87:62"><expr pos:start="87:13" pos:end="87:61"><call pos:start="87:13" pos:end="87:61"><name pos:start="87:13" pos:end="87:19">fprintf</name><argument_list pos:start="87:20" pos:end="87:61">(<argument pos:start="87:21" pos:end="87:26"><expr pos:start="87:21" pos:end="87:26"><name pos:start="87:21" pos:end="87:26">stderr</name></expr></argument>, <argument pos:start="87:29" pos:end="87:60"><expr pos:start="87:29" pos:end="87:60"><literal type="string" pos:start="87:29" pos:end="87:60">"qemu_add_wait_object: failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></else></if_stmt>



    <expr_stmt pos:start="95:5" pos:end="95:32"><expr pos:start="95:5" pos:end="95:31"><name pos:start="95:5" pos:end="95:10">dwMode</name> <operator pos:start="95:12" pos:end="95:13">|=</operator> <name pos:start="95:15" pos:end="95:31">ENABLE_LINE_INPUT</name></expr>;</expr_stmt>



    <if_stmt pos:start="99:5" pos:end="107:5"><if pos:start="99:5" pos:end="107:5">if <condition pos:start="99:8" pos:end="99:19">(<expr pos:start="99:9" pos:end="99:18"><name pos:start="99:9" pos:end="99:18">is_console</name></expr>)</condition> <block pos:start="99:21" pos:end="107:5">{<block_content pos:start="105:9" pos:end="105:41">

        <comment type="block" pos:start="101:9" pos:end="101:42">/* set the terminal in raw mode */</comment>

        <comment type="block" pos:start="103:9" pos:end="103:60">/* ENABLE_QUICK_EDIT_MODE | ENABLE_EXTENDED_FLAGS */</comment>

        <expr_stmt pos:start="105:9" pos:end="105:41"><expr pos:start="105:9" pos:end="105:40"><name pos:start="105:9" pos:end="105:14">dwMode</name> <operator pos:start="105:16" pos:end="105:17">|=</operator> <name pos:start="105:19" pos:end="105:40">ENABLE_PROCESSED_INPUT</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="111:5" pos:end="111:42"><expr pos:start="111:5" pos:end="111:41"><call pos:start="111:5" pos:end="111:41"><name pos:start="111:5" pos:end="111:18">SetConsoleMode</name><argument_list pos:start="111:19" pos:end="111:41">(<argument pos:start="111:20" pos:end="111:32"><expr pos:start="111:20" pos:end="111:32"><name pos:start="111:20" pos:end="111:32"><name pos:start="111:20" pos:end="111:24">stdio</name><operator pos:start="111:25" pos:end="111:26">-&gt;</operator><name pos:start="111:27" pos:end="111:32">hStdIn</name></name></expr></argument>, <argument pos:start="111:35" pos:end="111:40"><expr pos:start="111:35" pos:end="111:40"><name pos:start="111:35" pos:end="111:40">dwMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="115:5" pos:end="115:52"><expr pos:start="115:5" pos:end="115:51"><name pos:start="115:5" pos:end="115:21"><name pos:start="115:5" pos:end="115:7">chr</name><operator pos:start="115:8" pos:end="115:9">-&gt;</operator><name pos:start="115:10" pos:end="115:21">chr_set_echo</name></name> <operator pos:start="115:23" pos:end="115:23">=</operator> <name pos:start="115:25" pos:end="115:51">qemu_chr_set_echo_win_stdio</name></expr>;</expr_stmt>

    <expr_stmt pos:start="117:5" pos:end="117:37"><expr pos:start="117:5" pos:end="117:36"><call pos:start="117:5" pos:end="117:36"><name pos:start="117:5" pos:end="117:24">qemu_chr_fe_set_echo</name><argument_list pos:start="117:25" pos:end="117:36">(<argument pos:start="117:26" pos:end="117:28"><expr pos:start="117:26" pos:end="117:28"><name pos:start="117:26" pos:end="117:28">chr</name></expr></argument>, <argument pos:start="117:31" pos:end="117:35"><expr pos:start="117:31" pos:end="117:35"><name pos:start="117:31" pos:end="117:35">false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="121:5" pos:end="121:15">return <expr pos:start="121:12" pos:end="121:14"><name pos:start="121:12" pos:end="121:14">chr</name></expr>;</return>

</block_content>}</block></function>
</unit>
