<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13911.c" pos:tabs="8"><function pos:start="1:1" pos:end="45:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:38">rgtc_block_internal</name><parameter_list pos:start="1:39" pos:end="5:60">(<parameter pos:start="1:40" pos:end="1:51"><decl pos:start="1:40" pos:end="1:51"><type pos:start="1:40" pos:end="1:51"><name pos:start="1:40" pos:end="1:46">uint8_t</name> <modifier pos:start="1:48" pos:end="1:48">*</modifier></type><name pos:start="1:49" pos:end="1:51">dst</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:69"><decl pos:start="1:54" pos:end="1:69"><type pos:start="1:54" pos:end="1:69"><name pos:start="1:54" pos:end="1:62">ptrdiff_t</name></type> <name pos:start="1:64" pos:end="1:69">stride</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:59"><decl pos:start="3:40" pos:end="3:59"><type pos:start="3:40" pos:end="3:59"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:52">uint8_t</name> <modifier pos:start="3:54" pos:end="3:54">*</modifier></type><name pos:start="3:55" pos:end="3:59">block</name></decl></parameter>,

                                       <parameter pos:start="5:40" pos:end="5:59"><decl pos:start="5:40" pos:end="5:59"><type pos:start="5:40" pos:end="5:59"><specifier pos:start="5:40" pos:end="5:44">const</specifier> <name pos:start="5:46" pos:end="5:48">int</name> <modifier pos:start="5:50" pos:end="5:50">*</modifier></type><name pos:start="5:51" pos:end="5:59">color_tab</name></decl></parameter>)</parameter_list>

<block pos:start="7:1" pos:end="45:1">{<block_content pos:start="9:5" pos:end="43:5">

    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:23"><name pos:start="9:13" pos:end="9:19">indices</name><index pos:start="9:20" pos:end="9:23">[<expr pos:start="9:21" pos:end="9:22"><literal type="number" pos:start="9:21" pos:end="9:22">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:13"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">x</name></decl>, <decl pos:start="11:12" pos:end="11:12"><type ref="prev" pos:start="11:5" pos:end="11:7"/><name pos:start="11:12" pos:end="11:12">y</name></decl>;</decl_stmt>



    <expr_stmt pos:start="15:5" pos:end="15:43"><expr pos:start="15:5" pos:end="15:42"><call pos:start="15:5" pos:end="15:42"><name pos:start="15:5" pos:end="15:22">decompress_indices</name><argument_list pos:start="15:23" pos:end="15:42">(<argument pos:start="15:24" pos:end="15:30"><expr pos:start="15:24" pos:end="15:30"><name pos:start="15:24" pos:end="15:30">indices</name></expr></argument>, <argument pos:start="15:33" pos:end="15:41"><expr pos:start="15:33" pos:end="15:41"><name pos:start="15:33" pos:end="15:37">block</name> <operator pos:start="15:39" pos:end="15:39">+</operator> <literal type="number" pos:start="15:41" pos:end="15:41">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="19:5" pos:end="25:63">/* Only one or two channels are stored at most, since it only used to

     * compress specular (black and white) or normal (red and green) maps.

     * Although the standard says to zero out unused components, many

     * implementations fill all of them with the same value. */</comment>

    <for pos:start="27:5" pos:end="43:5">for <control pos:start="27:9" pos:end="27:27">(<init pos:start="27:10" pos:end="27:15"><expr pos:start="27:10" pos:end="27:14"><name pos:start="27:10" pos:end="27:10">y</name> <operator pos:start="27:12" pos:end="27:12">=</operator> <literal type="number" pos:start="27:14" pos:end="27:14">0</literal></expr>;</init> <condition pos:start="27:17" pos:end="27:22"><expr pos:start="27:17" pos:end="27:21"><name pos:start="27:17" pos:end="27:17">y</name> <operator pos:start="27:19" pos:end="27:19">&lt;</operator> <literal type="number" pos:start="27:21" pos:end="27:21">4</literal></expr>;</condition> <incr pos:start="27:24" pos:end="27:26"><expr pos:start="27:24" pos:end="27:26"><name pos:start="27:24" pos:end="27:24">y</name><operator pos:start="27:25" pos:end="27:26">++</operator></expr></incr>)</control> <block pos:start="27:29" pos:end="43:5">{<block_content pos:start="29:9" pos:end="41:9">

        <for pos:start="29:9" pos:end="41:9">for <control pos:start="29:13" pos:end="29:31">(<init pos:start="29:14" pos:end="29:19"><expr pos:start="29:14" pos:end="29:18"><name pos:start="29:14" pos:end="29:14">x</name> <operator pos:start="29:16" pos:end="29:16">=</operator> <literal type="number" pos:start="29:18" pos:end="29:18">0</literal></expr>;</init> <condition pos:start="29:21" pos:end="29:26"><expr pos:start="29:21" pos:end="29:25"><name pos:start="29:21" pos:end="29:21">x</name> <operator pos:start="29:23" pos:end="29:23">&lt;</operator> <literal type="number" pos:start="29:25" pos:end="29:25">4</literal></expr>;</condition> <incr pos:start="29:28" pos:end="29:30"><expr pos:start="29:28" pos:end="29:30"><name pos:start="29:28" pos:end="29:28">x</name><operator pos:start="29:29" pos:end="29:30">++</operator></expr></incr>)</control> <block pos:start="29:33" pos:end="41:9">{<block_content pos:start="31:13" pos:end="39:53">

            <decl_stmt pos:start="31:13" pos:end="31:39"><decl pos:start="31:13" pos:end="31:38"><type pos:start="31:13" pos:end="31:15"><name pos:start="31:13" pos:end="31:15">int</name></type> <name pos:start="31:17" pos:end="31:17">i</name> <init pos:start="31:19" pos:end="31:38">= <expr pos:start="31:21" pos:end="31:38"><name pos:start="31:21" pos:end="31:38"><name pos:start="31:21" pos:end="31:27">indices</name><index pos:start="31:28" pos:end="31:38">[<expr pos:start="31:29" pos:end="31:37"><name pos:start="31:29" pos:end="31:29">x</name> <operator pos:start="31:31" pos:end="31:31">+</operator> <name pos:start="31:33" pos:end="31:33">y</name> <operator pos:start="31:35" pos:end="31:35">*</operator> <literal type="number" pos:start="31:37" pos:end="31:37">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="block" pos:start="33:13" pos:end="33:69">/* Interval expansion from [-1 1] or [0 1] to [0 255]. */</comment>

            <decl_stmt pos:start="35:13" pos:end="35:33"><decl pos:start="35:13" pos:end="35:32"><type pos:start="35:13" pos:end="35:15"><name pos:start="35:13" pos:end="35:15">int</name></type> <name pos:start="35:17" pos:end="35:17">c</name> <init pos:start="35:19" pos:end="35:32">= <expr pos:start="35:21" pos:end="35:32"><name pos:start="35:21" pos:end="35:32"><name pos:start="35:21" pos:end="35:29">color_tab</name><index pos:start="35:30" pos:end="35:32">[<expr pos:start="35:31" pos:end="35:31"><name pos:start="35:31" pos:end="35:31">i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="37:13" pos:end="37:48"><decl pos:start="37:13" pos:end="37:47"><type pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:20">uint32_t</name></type> <name pos:start="37:22" pos:end="37:26">pixel</name> <init pos:start="37:28" pos:end="37:47">= <expr pos:start="37:30" pos:end="37:47"><call pos:start="37:30" pos:end="37:47"><name pos:start="37:30" pos:end="37:33">RGBA</name><argument_list pos:start="37:34" pos:end="37:47">(<argument pos:start="37:35" pos:end="37:35"><expr pos:start="37:35" pos:end="37:35"><name pos:start="37:35" pos:end="37:35">c</name></expr></argument>, <argument pos:start="37:38" pos:end="37:38"><expr pos:start="37:38" pos:end="37:38"><name pos:start="37:38" pos:end="37:38">c</name></expr></argument>, <argument pos:start="37:41" pos:end="37:41"><expr pos:start="37:41" pos:end="37:41"><name pos:start="37:41" pos:end="37:41">c</name></expr></argument>, <argument pos:start="37:44" pos:end="37:46"><expr pos:start="37:44" pos:end="37:46"><literal type="number" pos:start="37:44" pos:end="37:46">255</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:53"><expr pos:start="39:13" pos:end="39:52"><call pos:start="39:13" pos:end="39:52"><name pos:start="39:13" pos:end="39:19">AV_WL32</name><argument_list pos:start="39:20" pos:end="39:52">(<argument pos:start="39:21" pos:end="39:44"><expr pos:start="39:21" pos:end="39:44"><name pos:start="39:21" pos:end="39:23">dst</name> <operator pos:start="39:25" pos:end="39:25">+</operator> <name pos:start="39:27" pos:end="39:27">x</name> <operator pos:start="39:29" pos:end="39:29">*</operator> <literal type="number" pos:start="39:31" pos:end="39:33">4</literal> <operator pos:start="39:33" pos:end="39:33">+</operator> <name pos:start="39:35" pos:end="39:35">y</name> <operator pos:start="39:37" pos:end="39:37">*</operator> <name pos:start="39:39" pos:end="39:44">stride</name></expr></argument>, <argument pos:start="39:47" pos:end="39:51"><expr pos:start="39:47" pos:end="39:51"><name pos:start="39:47" pos:end="39:51">pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
