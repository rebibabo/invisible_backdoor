<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21558.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:18">cpu_exec_init</name><parameter_list pos:start="1:19" pos:end="1:33">(<parameter pos:start="1:20" pos:end="1:32"><decl pos:start="1:20" pos:end="1:32"><type pos:start="1:20" pos:end="1:29"><name pos:start="1:20" pos:end="1:27">CPUState</name> <modifier pos:start="1:29" pos:end="1:29">*</modifier></type><name pos:start="1:30" pos:end="1:32">env</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="57:1">{<block_content pos:start="5:5" pos:end="56:0">

    <decl_stmt pos:start="5:5" pos:end="5:20"><decl pos:start="5:5" pos:end="5:19"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:12">CPUState</name> <modifier pos:start="5:14" pos:end="5:14">*</modifier><modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">penv</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="12:0"><decl pos:start="7:5" pos:end="7:17"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:17">cpu_index</name></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:29">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:29"><call pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:11">defined</name><argument_list pos:start="11:12" pos:end="11:29">(<argument pos:start="11:13" pos:end="11:28"><expr pos:start="11:13" pos:end="11:28"><name pos:start="11:13" pos:end="11:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="13:5" pos:end="16:0"><expr pos:start="13:5" pos:end="13:19"><call pos:start="13:5" pos:end="13:19"><name pos:start="13:5" pos:end="13:17">cpu_list_lock</name><argument_list pos:start="13:18" pos:end="13:19">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="15:1" pos:end="15:6">#<cpp:directive pos:start="15:2" pos:end="15:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:17"><name pos:start="17:5" pos:end="17:7">env</name><operator pos:start="17:8" pos:end="17:9">-&gt;</operator><name pos:start="17:10" pos:end="17:17">next_cpu</name></name> <operator pos:start="17:19" pos:end="17:19">=</operator> <name pos:start="17:21" pos:end="17:24">NULL</name></expr>;</expr_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:22"><expr pos:start="19:5" pos:end="19:21"><name pos:start="19:5" pos:end="19:8">penv</name> <operator pos:start="19:10" pos:end="19:10">=</operator> <operator pos:start="19:12" pos:end="19:12">&amp;</operator><name pos:start="19:13" pos:end="19:21">first_cpu</name></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:18"><expr pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:13">cpu_index</name> <operator pos:start="21:15" pos:end="21:15">=</operator> <literal type="number" pos:start="21:17" pos:end="21:17">0</literal></expr>;</expr_stmt>

    <while pos:start="23:5" pos:end="29:5">while <condition pos:start="23:11" pos:end="23:25">(<expr pos:start="23:12" pos:end="23:24"><operator pos:start="23:12" pos:end="23:12">*</operator><name pos:start="23:13" pos:end="23:16">penv</name> <operator pos:start="23:18" pos:end="23:19">!=</operator> <name pos:start="23:21" pos:end="23:24">NULL</name></expr>)</condition> <block pos:start="23:27" pos:end="29:5">{<block_content pos:start="25:9" pos:end="27:20">

        <expr_stmt pos:start="25:9" pos:end="25:34"><expr pos:start="25:9" pos:end="25:33"><name pos:start="25:9" pos:end="25:12">penv</name> <operator pos:start="25:14" pos:end="25:14">=</operator> <operator pos:start="25:16" pos:end="25:16">&amp;</operator><name pos:start="25:17" pos:end="25:33"><operator pos:start="25:17" pos:end="25:17">(</operator><operator pos:start="25:18" pos:end="25:18">*</operator><name pos:start="25:19" pos:end="25:22">penv</name><operator pos:start="25:23" pos:end="25:23">)</operator><operator pos:start="25:24" pos:end="25:25">-&gt;</operator><name pos:start="25:26" pos:end="25:33">next_cpu</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="27:9" pos:end="27:20"><expr pos:start="27:9" pos:end="27:19"><name pos:start="27:9" pos:end="27:17">cpu_index</name><operator pos:start="27:18" pos:end="27:19">++</operator></expr>;</expr_stmt>

    </block_content>}</block></while>

    <expr_stmt pos:start="31:5" pos:end="31:31"><expr pos:start="31:5" pos:end="31:30"><name pos:start="31:5" pos:end="31:18"><name pos:start="31:5" pos:end="31:7">env</name><operator pos:start="31:8" pos:end="31:9">-&gt;</operator><name pos:start="31:10" pos:end="31:18">cpu_index</name></name> <operator pos:start="31:20" pos:end="31:20">=</operator> <name pos:start="31:22" pos:end="31:30">cpu_index</name></expr>;</expr_stmt>

    <expr_stmt pos:start="33:5" pos:end="33:23"><expr pos:start="33:5" pos:end="33:22"><name pos:start="33:5" pos:end="33:18"><name pos:start="33:5" pos:end="33:7">env</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:18">numa_node</name></name> <operator pos:start="33:20" pos:end="33:20">=</operator> <literal type="number" pos:start="33:22" pos:end="33:22">0</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:34"><expr pos:start="35:5" pos:end="35:33"><call pos:start="35:5" pos:end="35:33"><name pos:start="35:5" pos:end="35:14">TAILQ_INIT</name><argument_list pos:start="35:15" pos:end="35:33">(<argument pos:start="35:16" pos:end="35:32"><expr pos:start="35:16" pos:end="35:32"><operator pos:start="35:16" pos:end="35:16">&amp;</operator><name pos:start="35:17" pos:end="35:32"><name pos:start="35:17" pos:end="35:19">env</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:32">breakpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:34"><expr pos:start="37:5" pos:end="37:33"><call pos:start="37:5" pos:end="37:33"><name pos:start="37:5" pos:end="37:14">TAILQ_INIT</name><argument_list pos:start="37:15" pos:end="37:33">(<argument pos:start="37:16" pos:end="37:32"><expr pos:start="37:16" pos:end="37:32"><operator pos:start="37:16" pos:end="37:16">&amp;</operator><name pos:start="37:17" pos:end="37:32"><name pos:start="37:17" pos:end="37:19">env</name><operator pos:start="37:20" pos:end="37:21">-&gt;</operator><name pos:start="37:22" pos:end="37:32">watchpoints</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="42:0"><expr pos:start="39:5" pos:end="39:15"><operator pos:start="39:5" pos:end="39:5">*</operator><name pos:start="39:6" pos:end="39:9">penv</name> <operator pos:start="39:11" pos:end="39:11">=</operator> <name pos:start="39:13" pos:end="39:15">env</name></expr>;</expr_stmt>

<cpp:if pos:start="41:1" pos:end="41:29">#<cpp:directive pos:start="41:2" pos:end="41:3">if</cpp:directive> <expr pos:start="41:5" pos:end="41:29"><call pos:start="41:5" pos:end="41:29"><name pos:start="41:5" pos:end="41:11">defined</name><argument_list pos:start="41:12" pos:end="41:29">(<argument pos:start="41:13" pos:end="41:28"><expr pos:start="41:13" pos:end="41:28"><name pos:start="41:13" pos:end="41:28">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="43:5" pos:end="48:0"><expr pos:start="43:5" pos:end="43:21"><call pos:start="43:5" pos:end="43:21"><name pos:start="43:5" pos:end="43:19">cpu_list_unlock</name><argument_list pos:start="43:20" pos:end="43:21">()</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="45:1" pos:end="45:6">#<cpp:directive pos:start="45:2" pos:end="45:6">endif</cpp:directive></cpp:endif>

<cpp:if pos:start="47:1" pos:end="47:59">#<cpp:directive pos:start="47:2" pos:end="47:3">if</cpp:directive> <expr pos:start="47:5" pos:end="47:59"><call pos:start="47:5" pos:end="47:29"><name pos:start="47:5" pos:end="47:11">defined</name><argument_list pos:start="47:12" pos:end="47:29">(<argument pos:start="47:13" pos:end="47:28"><expr pos:start="47:13" pos:end="47:28"><name pos:start="47:13" pos:end="47:28">CPU_SAVE_VERSION</name></expr></argument>)</argument_list></call> <operator pos:start="47:31" pos:end="47:32">&amp;&amp;</operator> <operator pos:start="47:34" pos:end="47:34">!</operator><call pos:start="47:35" pos:end="47:59"><name pos:start="47:35" pos:end="47:41">defined</name><argument_list pos:start="47:42" pos:end="47:59">(<argument pos:start="47:43" pos:end="47:58"><expr pos:start="47:43" pos:end="47:58"><name pos:start="47:43" pos:end="47:58">CONFIG_USER_ONLY</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <expr_stmt pos:start="49:5" pos:end="49:58"><expr pos:start="49:5" pos:end="49:57"><call pos:start="49:5" pos:end="49:57"><name pos:start="49:5" pos:end="49:20">vmstate_register</name><argument_list pos:start="49:21" pos:end="49:57">(<argument pos:start="49:22" pos:end="49:30"><expr pos:start="49:22" pos:end="49:30"><name pos:start="49:22" pos:end="49:30">cpu_index</name></expr></argument>, <argument pos:start="49:33" pos:end="49:51"><expr pos:start="49:33" pos:end="49:51"><operator pos:start="49:33" pos:end="49:33">&amp;</operator><name pos:start="49:34" pos:end="49:51">vmstate_cpu_common</name></expr></argument>, <argument pos:start="49:54" pos:end="49:56"><expr pos:start="49:54" pos:end="49:56"><name pos:start="49:54" pos:end="49:56">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="56:0"><expr pos:start="51:5" pos:end="53:44"><call pos:start="51:5" pos:end="53:44"><name pos:start="51:5" pos:end="51:19">register_savevm</name><argument_list pos:start="51:20" pos:end="53:44">(<argument pos:start="51:21" pos:end="51:25"><expr pos:start="51:21" pos:end="51:25"><literal type="string" pos:start="51:21" pos:end="51:25">"cpu"</literal></expr></argument>, <argument pos:start="51:28" pos:end="51:36"><expr pos:start="51:28" pos:end="51:36"><name pos:start="51:28" pos:end="51:36">cpu_index</name></expr></argument>, <argument pos:start="51:39" pos:end="51:54"><expr pos:start="51:39" pos:end="51:54"><name pos:start="51:39" pos:end="51:54">CPU_SAVE_VERSION</name></expr></argument>,

                    <argument pos:start="53:21" pos:end="53:28"><expr pos:start="53:21" pos:end="53:28"><name pos:start="53:21" pos:end="53:28">cpu_save</name></expr></argument>, <argument pos:start="53:31" pos:end="53:38"><expr pos:start="53:31" pos:end="53:38"><name pos:start="53:31" pos:end="53:38">cpu_load</name></expr></argument>, <argument pos:start="53:41" pos:end="53:43"><expr pos:start="53:41" pos:end="53:43"><name pos:start="53:41" pos:end="53:43">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="55:1" pos:end="55:6">#<cpp:directive pos:start="55:2" pos:end="55:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
