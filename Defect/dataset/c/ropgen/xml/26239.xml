<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/26239.c" pos:tabs="8"><function pos:start="1:1" pos:end="67:1"><type pos:start="1:1" pos:end="1:24"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name> <name pos:start="1:13" pos:end="1:24">coroutine_fn</name></type> <name pos:start="1:26" pos:end="1:52">qemu_co_mutex_lock_slowpath</name><parameter_list pos:start="1:53" pos:end="1:68">(<parameter pos:start="1:54" pos:end="1:67"><decl pos:start="1:54" pos:end="1:67"><type pos:start="1:54" pos:end="1:62"><name pos:start="1:54" pos:end="1:60">CoMutex</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">mutex</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="67:1">{<block_content pos:start="5:5" pos:end="65:49">

    <decl_stmt pos:start="5:5" pos:end="5:44"><decl pos:start="5:5" pos:end="5:43"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">Coroutine</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:19">self</name> <init pos:start="5:21" pos:end="5:43">= <expr pos:start="5:23" pos:end="5:43"><call pos:start="5:23" pos:end="5:43"><name pos:start="5:23" pos:end="5:41">qemu_coroutine_self</name><argument_list pos:start="5:42" pos:end="5:43">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:19"><decl pos:start="7:5" pos:end="7:18"><type pos:start="7:5" pos:end="7:16"><name pos:start="7:5" pos:end="7:16">CoWaitRecord</name></type> <name pos:start="7:18" pos:end="7:18">w</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:25"><decl pos:start="9:5" pos:end="9:24"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:24">old_handoff</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:48"><expr pos:start="13:5" pos:end="13:47"><call pos:start="13:5" pos:end="13:47"><name pos:start="13:5" pos:end="13:34">trace_qemu_co_mutex_lock_entry</name><argument_list pos:start="13:35" pos:end="13:47">(<argument pos:start="13:36" pos:end="13:40"><expr pos:start="13:36" pos:end="13:40"><name pos:start="13:36" pos:end="13:40">mutex</name></expr></argument>, <argument pos:start="13:43" pos:end="13:46"><expr pos:start="13:43" pos:end="13:46"><name pos:start="13:43" pos:end="13:46">self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="15:5" pos:end="15:16"><expr pos:start="15:5" pos:end="15:15"><name pos:start="15:5" pos:end="15:8"><name pos:start="15:5" pos:end="15:5">w</name><operator pos:start="15:6" pos:end="15:6">.</operator><name pos:start="15:7" pos:end="15:8">co</name></name> <operator pos:start="15:10" pos:end="15:10">=</operator> <name pos:start="15:12" pos:end="15:15">self</name></expr>;</expr_stmt>

    <expr_stmt pos:start="17:5" pos:end="17:27"><expr pos:start="17:5" pos:end="17:26"><call pos:start="17:5" pos:end="17:26"><name pos:start="17:5" pos:end="17:15">push_waiter</name><argument_list pos:start="17:16" pos:end="17:26">(<argument pos:start="17:17" pos:end="17:21"><expr pos:start="17:17" pos:end="17:21"><name pos:start="17:17" pos:end="17:21">mutex</name></expr></argument>, <argument pos:start="17:24" pos:end="17:25"><expr pos:start="17:24" pos:end="17:25"><operator pos:start="17:24" pos:end="17:24">&amp;</operator><name pos:start="17:25" pos:end="17:25">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="21:5" pos:end="25:7">/* This is the "Responsibility Hand-Off" protocol; a lock() picks from

     * a concurrent unlock() the responsibility of waking somebody up.

     */</comment>

    <expr_stmt pos:start="27:5" pos:end="27:50"><expr pos:start="27:5" pos:end="27:49"><name pos:start="27:5" pos:end="27:15">old_handoff</name> <operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:49"><name pos:start="27:19" pos:end="27:32">atomic_mb_read</name><argument_list pos:start="27:33" pos:end="27:49">(<argument pos:start="27:34" pos:end="27:48"><expr pos:start="27:34" pos:end="27:48"><operator pos:start="27:34" pos:end="27:34">&amp;</operator><name pos:start="27:35" pos:end="27:48"><name pos:start="27:35" pos:end="27:39">mutex</name><operator pos:start="27:40" pos:end="27:41">-&gt;</operator><name pos:start="27:42" pos:end="27:48">handoff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="29:5" pos:end="59:5"><if pos:start="29:5" pos:end="59:5">if <condition pos:start="29:8" pos:end="33:71">(<expr pos:start="29:9" pos:end="33:70"><name pos:start="29:9" pos:end="29:19">old_handoff</name> <operator pos:start="29:21" pos:end="29:22">&amp;&amp;</operator>

        <call pos:start="31:9" pos:end="31:26"><name pos:start="31:9" pos:end="31:19">has_waiters</name><argument_list pos:start="31:20" pos:end="31:26">(<argument pos:start="31:21" pos:end="31:25"><expr pos:start="31:21" pos:end="31:25"><name pos:start="31:21" pos:end="31:25">mutex</name></expr></argument>)</argument_list></call> <operator pos:start="31:28" pos:end="31:29">&amp;&amp;</operator>

        <call pos:start="33:9" pos:end="33:55"><name pos:start="33:9" pos:end="33:22">atomic_cmpxchg</name><argument_list pos:start="33:23" pos:end="33:55">(<argument pos:start="33:24" pos:end="33:38"><expr pos:start="33:24" pos:end="33:38"><operator pos:start="33:24" pos:end="33:24">&amp;</operator><name pos:start="33:25" pos:end="33:38"><name pos:start="33:25" pos:end="33:29">mutex</name><operator pos:start="33:30" pos:end="33:31">-&gt;</operator><name pos:start="33:32" pos:end="33:38">handoff</name></name></expr></argument>, <argument pos:start="33:41" pos:end="33:51"><expr pos:start="33:41" pos:end="33:51"><name pos:start="33:41" pos:end="33:51">old_handoff</name></expr></argument>, <argument pos:start="33:54" pos:end="33:54"><expr pos:start="33:54" pos:end="33:54"><literal type="number" pos:start="33:54" pos:end="33:54">0</literal></expr></argument>)</argument_list></call> <operator pos:start="33:57" pos:end="33:58">==</operator> <name pos:start="33:60" pos:end="33:70">old_handoff</name></expr>)</condition> <block pos:start="33:73" pos:end="59:5">{<block_content pos:start="41:9" pos:end="57:24">

        <comment type="block" pos:start="35:9" pos:end="39:11">/* There can be no concurrent pops, because there can be only

         * one active handoff at a time.

         */</comment>

        <decl_stmt pos:start="41:9" pos:end="41:50"><decl pos:start="41:9" pos:end="41:49"><type pos:start="41:9" pos:end="41:22"><name pos:start="41:9" pos:end="41:20">CoWaitRecord</name> <modifier pos:start="41:22" pos:end="41:22">*</modifier></type><name pos:start="41:23" pos:end="41:29">to_wake</name> <init pos:start="41:31" pos:end="41:49">= <expr pos:start="41:33" pos:end="41:49"><call pos:start="41:33" pos:end="41:49"><name pos:start="41:33" pos:end="41:42">pop_waiter</name><argument_list pos:start="41:43" pos:end="41:49">(<argument pos:start="41:44" pos:end="41:48"><expr pos:start="41:44" pos:end="41:48"><name pos:start="41:44" pos:end="41:48">mutex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="43:9" pos:end="43:36"><decl pos:start="43:9" pos:end="43:35"><type pos:start="43:9" pos:end="43:19"><name pos:start="43:9" pos:end="43:17">Coroutine</name> <modifier pos:start="43:19" pos:end="43:19">*</modifier></type><name pos:start="43:20" pos:end="43:21">co</name> <init pos:start="43:23" pos:end="43:35">= <expr pos:start="43:25" pos:end="43:35"><name pos:start="43:25" pos:end="43:35"><name pos:start="43:25" pos:end="43:31">to_wake</name><operator pos:start="43:32" pos:end="43:33">-&gt;</operator><name pos:start="43:34" pos:end="43:35">co</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="45:9" pos:end="53:9"><if pos:start="45:9" pos:end="53:9">if <condition pos:start="45:12" pos:end="45:23">(<expr pos:start="45:13" pos:end="45:22"><name pos:start="45:13" pos:end="45:14">co</name> <operator pos:start="45:16" pos:end="45:17">==</operator> <name pos:start="45:19" pos:end="45:22">self</name></expr>)</condition> <block pos:start="45:25" pos:end="53:9">{<block_content pos:start="49:13" pos:end="51:19">

            <comment type="block" pos:start="47:13" pos:end="47:45">/* We got the lock ourselves!  */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:34"><expr pos:start="49:13" pos:end="49:33"><call pos:start="49:13" pos:end="49:33"><name pos:start="49:13" pos:end="49:18">assert</name><argument_list pos:start="49:19" pos:end="49:33">(<argument pos:start="49:20" pos:end="49:32"><expr pos:start="49:20" pos:end="49:32"><name pos:start="49:20" pos:end="49:26">to_wake</name> <operator pos:start="49:28" pos:end="49:29">==</operator> <operator pos:start="49:31" pos:end="49:31">&amp;</operator><name pos:start="49:32" pos:end="49:32">w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="51:13" pos:end="51:19">return;</return>

        </block_content>}</block></if></if_stmt>



        <expr_stmt pos:start="57:9" pos:end="57:24"><expr pos:start="57:9" pos:end="57:23"><call pos:start="57:9" pos:end="57:23"><name pos:start="57:9" pos:end="57:19">aio_co_wake</name><argument_list pos:start="57:20" pos:end="57:23">(<argument pos:start="57:21" pos:end="57:22"><expr pos:start="57:21" pos:end="57:22"><name pos:start="57:21" pos:end="57:22">co</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="63:5" pos:end="63:27"><expr pos:start="63:5" pos:end="63:26"><call pos:start="63:5" pos:end="63:26"><name pos:start="63:5" pos:end="63:24">qemu_coroutine_yield</name><argument_list pos:start="63:25" pos:end="63:26">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="65:5" pos:end="65:49"><expr pos:start="65:5" pos:end="65:48"><call pos:start="65:5" pos:end="65:48"><name pos:start="65:5" pos:end="65:35">trace_qemu_co_mutex_lock_return</name><argument_list pos:start="65:36" pos:end="65:48">(<argument pos:start="65:37" pos:end="65:41"><expr pos:start="65:37" pos:end="65:41"><name pos:start="65:37" pos:end="65:41">mutex</name></expr></argument>, <argument pos:start="65:44" pos:end="65:47"><expr pos:start="65:44" pos:end="65:47"><name pos:start="65:44" pos:end="65:47">self</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
