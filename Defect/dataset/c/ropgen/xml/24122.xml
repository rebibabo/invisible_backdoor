<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/24122.c" pos:tabs="8"><function pos:start="1:1" pos:end="23:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:37">gen_addr_imm_index</name> <parameter_list pos:start="1:39" pos:end="1:57">(<parameter pos:start="1:40" pos:end="1:56"><decl pos:start="1:40" pos:end="1:56"><type pos:start="1:40" pos:end="1:53"><name pos:start="1:40" pos:end="1:51">DisasContext</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type><name pos:start="1:54" pos:end="1:56">ctx</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="23:1">{<block_content pos:start="5:5" pos:end="21:5">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:15">target_long</name></type> <name pos:start="5:17" pos:end="5:20">simm</name> <init pos:start="5:22" pos:end="5:40">= <expr pos:start="5:24" pos:end="5:40"><call pos:start="5:24" pos:end="5:40"><name pos:start="5:24" pos:end="5:27">SIMM</name><argument_list pos:start="5:28" pos:end="5:40">(<argument pos:start="5:29" pos:end="5:39"><expr pos:start="5:29" pos:end="5:39"><name pos:start="5:29" pos:end="5:39"><name pos:start="5:29" pos:end="5:31">ctx</name><operator pos:start="5:32" pos:end="5:33">-&gt;</operator><name pos:start="5:34" pos:end="5:39">opcode</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="9:5" pos:end="21:5"><if pos:start="9:5" pos:end="13:5">if <condition pos:start="9:8" pos:end="9:29">(<expr pos:start="9:9" pos:end="9:28"><call pos:start="9:9" pos:end="9:23"><name pos:start="9:9" pos:end="9:10">rA</name><argument_list pos:start="9:11" pos:end="9:23">(<argument pos:start="9:12" pos:end="9:22"><expr pos:start="9:12" pos:end="9:22"><name pos:start="9:12" pos:end="9:22"><name pos:start="9:12" pos:end="9:14">ctx</name><operator pos:start="9:15" pos:end="9:16">-&gt;</operator><name pos:start="9:17" pos:end="9:22">opcode</name></name></expr></argument>)</argument_list></call> <operator pos:start="9:25" pos:end="9:26">==</operator> <literal type="number" pos:start="9:28" pos:end="9:28">0</literal></expr>)</condition> <block pos:start="9:31" pos:end="13:5">{<block_content pos:start="11:9" pos:end="11:28">

        <expr_stmt pos:start="11:9" pos:end="11:28"><expr pos:start="11:9" pos:end="11:27"><call pos:start="11:9" pos:end="11:27"><name pos:start="11:9" pos:end="11:21">gen_op_set_T0</name><argument_list pos:start="11:22" pos:end="11:27">(<argument pos:start="11:23" pos:end="11:26"><expr pos:start="11:23" pos:end="11:26"><name pos:start="11:23" pos:end="11:26">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="13:7" pos:end="21:5">else <block pos:start="13:12" pos:end="21:5">{<block_content pos:start="15:9" pos:end="19:30">

        <expr_stmt pos:start="15:9" pos:end="15:44"><expr pos:start="15:9" pos:end="15:43"><call pos:start="15:9" pos:end="15:43"><name pos:start="15:9" pos:end="15:26">gen_op_load_gpr_T0</name><argument_list pos:start="15:27" pos:end="15:43">(<argument pos:start="15:28" pos:end="15:42"><expr pos:start="15:28" pos:end="15:42"><call pos:start="15:28" pos:end="15:42"><name pos:start="15:28" pos:end="15:29">rA</name><argument_list pos:start="15:30" pos:end="15:42">(<argument pos:start="15:31" pos:end="15:41"><expr pos:start="15:31" pos:end="15:41"><name pos:start="15:31" pos:end="15:41"><name pos:start="15:31" pos:end="15:33">ctx</name><operator pos:start="15:34" pos:end="15:35">-&gt;</operator><name pos:start="15:36" pos:end="15:41">opcode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="17:9" pos:end="19:30"><if pos:start="17:9" pos:end="19:30">if <condition pos:start="17:12" pos:end="17:30">(<expr pos:start="17:13" pos:end="17:29"><call pos:start="17:13" pos:end="17:29"><name pos:start="17:13" pos:end="17:18">likely</name><argument_list pos:start="17:19" pos:end="17:29">(<argument pos:start="17:20" pos:end="17:28"><expr pos:start="17:20" pos:end="17:28"><name pos:start="17:20" pos:end="17:23">simm</name> <operator pos:start="17:25" pos:end="17:26">!=</operator> <literal type="number" pos:start="17:28" pos:end="17:28">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo" pos:start="19:13" pos:end="19:30"><block_content pos:start="19:13" pos:end="19:30">

            <expr_stmt pos:start="19:13" pos:end="19:30"><expr pos:start="19:13" pos:end="19:29"><call pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:23">gen_op_addi</name><argument_list pos:start="19:24" pos:end="19:29">(<argument pos:start="19:25" pos:end="19:28"><expr pos:start="19:25" pos:end="19:28"><name pos:start="19:25" pos:end="19:28">simm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
