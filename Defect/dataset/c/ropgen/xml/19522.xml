<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/19522.c" pos:tabs="8"><function pos:start="1:1" pos:end="425:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:24">ioport_write</name><parameter_list pos:start="1:25" pos:end="3:53">(<parameter pos:start="1:26" pos:end="1:37"><decl pos:start="1:26" pos:end="1:37"><type pos:start="1:26" pos:end="1:37"><name pos:start="1:26" pos:end="1:29">void</name> <modifier pos:start="1:31" pos:end="1:31">*</modifier></type><name pos:start="1:32" pos:end="1:37">opaque</name></decl></parameter>, <parameter pos:start="1:40" pos:end="1:62"><decl pos:start="1:40" pos:end="1:62"><type pos:start="1:40" pos:end="1:62"><name pos:start="1:40" pos:end="1:57">target_phys_addr_t</name></type> <name pos:start="1:59" pos:end="1:62">addr</name></decl></parameter>,

                         <parameter pos:start="3:26" pos:end="3:37"><decl pos:start="3:26" pos:end="3:37"><type pos:start="3:26" pos:end="3:37"><name pos:start="3:26" pos:end="3:33">uint64_t</name></type> <name pos:start="3:35" pos:end="3:37">val</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:52"><decl pos:start="3:40" pos:end="3:52"><type pos:start="3:40" pos:end="3:52"><name pos:start="3:40" pos:end="3:47">unsigned</name></type> <name pos:start="3:49" pos:end="3:52">size</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="425:1">{<block_content pos:start="7:5" pos:end="424:0">

    <decl_stmt pos:start="7:5" pos:end="7:29"><decl pos:start="7:5" pos:end="7:28"><type pos:start="7:5" pos:end="7:18"><name pos:start="7:5" pos:end="7:16">PCIQXLDevice</name> <modifier pos:start="7:18" pos:end="7:18">*</modifier></type><name pos:start="7:19" pos:end="7:19">d</name> <init pos:start="7:21" pos:end="7:28">= <expr pos:start="7:23" pos:end="7:28"><name pos:start="7:23" pos:end="7:28">opaque</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:28"><decl pos:start="9:5" pos:end="9:27"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">uint32_t</name></type> <name pos:start="9:14" pos:end="9:20">io_port</name> <init pos:start="9:22" pos:end="9:27">= <expr pos:start="9:24" pos:end="9:27"><name pos:start="9:24" pos:end="9:27">addr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="14:0"><decl pos:start="11:5" pos:end="11:33"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:16">qxl_async_io</name></type> <name pos:start="11:18" pos:end="11:22">async</name> <init pos:start="11:24" pos:end="11:33">= <expr pos:start="11:26" pos:end="11:33"><name pos:start="11:26" pos:end="11:33">QXL_SYNC</name></expr></init></decl>;</decl_stmt>

<cpp:if pos:start="13:1" pos:end="13:34">#<cpp:directive pos:start="13:2" pos:end="13:3">if</cpp:directive> <expr pos:start="13:5" pos:end="13:34"><name pos:start="13:5" pos:end="13:29">SPICE_INTERFACE_QXL_MINOR</name> <operator pos:start="13:31" pos:end="13:32">&gt;=</operator> <literal type="number" pos:start="13:34" pos:end="13:34">1</literal></expr></cpp:if>

    <decl_stmt pos:start="15:5" pos:end="18:0"><decl pos:start="15:5" pos:end="15:35"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint32_t</name></type> <name pos:start="15:14" pos:end="15:25">orig_io_port</name> <init pos:start="15:27" pos:end="15:35">= <expr pos:start="15:29" pos:end="15:35"><name pos:start="15:29" pos:end="15:35">io_port</name></expr></init></decl>;</decl_stmt>

<cpp:endif pos:start="17:1" pos:end="17:6">#<cpp:directive pos:start="17:2" pos:end="17:6">endif</cpp:directive></cpp:endif>



    <switch pos:start="21:5" pos:end="80:0">switch <condition pos:start="21:12" pos:end="21:20">(<expr pos:start="21:13" pos:end="21:19"><name pos:start="21:13" pos:end="21:19">io_port</name></expr>)</condition> <block pos:start="21:22" pos:end="80:0">{<block_content pos:start="23:5" pos:end="73:15">

    <case pos:start="23:5" pos:end="23:22">case <expr pos:start="23:10" pos:end="23:21"><name pos:start="23:10" pos:end="23:21">QXL_IO_RESET</name></expr>:</case>

    <case pos:start="25:5" pos:end="25:25">case <expr pos:start="25:10" pos:end="25:24"><name pos:start="25:10" pos:end="25:24">QXL_IO_SET_MODE</name></expr>:</case>

    <case pos:start="27:5" pos:end="27:28">case <expr pos:start="27:10" pos:end="27:27"><name pos:start="27:10" pos:end="27:27">QXL_IO_MEMSLOT_ADD</name></expr>:</case>

    <case pos:start="29:5" pos:end="29:28">case <expr pos:start="29:10" pos:end="29:27"><name pos:start="29:10" pos:end="29:27">QXL_IO_MEMSLOT_DEL</name></expr>:</case>

    <case pos:start="31:5" pos:end="31:31">case <expr pos:start="31:10" pos:end="31:30"><name pos:start="31:10" pos:end="31:30">QXL_IO_CREATE_PRIMARY</name></expr>:</case>

    <case pos:start="33:5" pos:end="33:27">case <expr pos:start="33:10" pos:end="33:26"><name pos:start="33:10" pos:end="33:26">QXL_IO_UPDATE_IRQ</name></expr>:</case>

    <case pos:start="35:5" pos:end="38:0">case <expr pos:start="35:10" pos:end="35:19"><name pos:start="35:10" pos:end="35:19">QXL_IO_LOG</name></expr>:</case>

<cpp:if pos:start="37:1" pos:end="37:34">#<cpp:directive pos:start="37:2" pos:end="37:3">if</cpp:directive> <expr pos:start="37:5" pos:end="37:34"><name pos:start="37:5" pos:end="37:29">SPICE_INTERFACE_QXL_MINOR</name> <operator pos:start="37:31" pos:end="37:32">&gt;=</operator> <literal type="number" pos:start="37:34" pos:end="37:34">1</literal></expr></cpp:if>

    <case pos:start="39:5" pos:end="39:34">case <expr pos:start="39:10" pos:end="39:33"><name pos:start="39:10" pos:end="39:33">QXL_IO_MEMSLOT_ADD_ASYNC</name></expr>:</case>

    <case pos:start="41:5" pos:end="44:0">case <expr pos:start="41:10" pos:end="41:36"><name pos:start="41:10" pos:end="41:36">QXL_IO_CREATE_PRIMARY_ASYNC</name></expr>:</case>

<cpp:endif pos:start="43:1" pos:end="43:6">#<cpp:directive pos:start="43:2" pos:end="43:6">endif</cpp:directive></cpp:endif>

        <break pos:start="45:9" pos:end="45:14">break;</break>

    <default pos:start="47:5" pos:end="47:12">default:</default>

        <if_stmt pos:start="49:9" pos:end="53:9"><if pos:start="49:9" pos:end="53:9">if <condition pos:start="49:12" pos:end="49:36">(<expr pos:start="49:13" pos:end="49:35"><name pos:start="49:13" pos:end="49:19"><name pos:start="49:13" pos:end="49:13">d</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:19">mode</name></name> <operator pos:start="49:21" pos:end="49:22">!=</operator> <name pos:start="49:24" pos:end="49:35">QXL_MODE_VGA</name></expr>)</condition> <block pos:start="49:38" pos:end="53:9">{<block_content pos:start="51:13" pos:end="51:18">

            <break pos:start="51:13" pos:end="51:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="55:9" pos:end="60:0"><expr pos:start="55:9" pos:end="57:58"><call pos:start="55:9" pos:end="57:58"><name pos:start="55:9" pos:end="55:14">dprint</name><argument_list pos:start="55:15" pos:end="57:58">(<argument pos:start="55:16" pos:end="55:16"><expr pos:start="55:16" pos:end="55:16"><name pos:start="55:16" pos:end="55:16">d</name></expr></argument>, <argument pos:start="55:19" pos:end="55:19"><expr pos:start="55:19" pos:end="55:19"><literal type="number" pos:start="55:19" pos:end="55:19">1</literal></expr></argument>, <argument pos:start="55:22" pos:end="55:66"><expr pos:start="55:22" pos:end="55:66"><literal type="string" pos:start="55:22" pos:end="55:66">"%s: unexpected port 0x%x (%s) in vga mode\n"</literal></expr></argument>,

            <argument pos:start="57:13" pos:end="57:20"><expr pos:start="57:13" pos:end="57:20"><name pos:start="57:13" pos:end="57:20">__func__</name></expr></argument>, <argument pos:start="57:23" pos:end="57:29"><expr pos:start="57:23" pos:end="57:29"><name pos:start="57:23" pos:end="57:29">io_port</name></expr></argument>, <argument pos:start="57:32" pos:end="57:57"><expr pos:start="57:32" pos:end="57:57"><call pos:start="57:32" pos:end="57:57"><name pos:start="57:32" pos:end="57:48">io_port_to_string</name><argument_list pos:start="57:49" pos:end="57:57">(<argument pos:start="57:50" pos:end="57:56"><expr pos:start="57:50" pos:end="57:56"><name pos:start="57:50" pos:end="57:56">io_port</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if pos:start="59:1" pos:end="59:34">#<cpp:directive pos:start="59:2" pos:end="59:3">if</cpp:directive> <expr pos:start="59:5" pos:end="59:34"><name pos:start="59:5" pos:end="59:29">SPICE_INTERFACE_QXL_MINOR</name> <operator pos:start="59:31" pos:end="59:32">&gt;=</operator> <literal type="number" pos:start="59:34" pos:end="59:34">1</literal></expr></cpp:if>

        <comment type="block" pos:start="61:9" pos:end="61:44">/* be nice to buggy guest drivers */</comment>

        <if_stmt pos:start="63:9" pos:end="72:0"><if pos:start="63:9" pos:end="72:0">if <condition pos:start="63:12" pos:end="65:57">(<expr pos:start="63:13" pos:end="65:56"><name pos:start="63:13" pos:end="63:19">io_port</name> <operator pos:start="63:21" pos:end="63:22">&gt;=</operator> <name pos:start="63:24" pos:end="63:47">QXL_IO_UPDATE_AREA_ASYNC</name> <operator pos:start="63:49" pos:end="63:50">&amp;&amp;</operator>

            <name pos:start="65:13" pos:end="65:19">io_port</name> <operator pos:start="65:21" pos:end="65:22">&lt;=</operator> <name pos:start="65:24" pos:end="65:56">QXL_IO_DESTROY_ALL_SURFACES_ASYNC</name></expr>)</condition> <block pos:start="65:59" pos:end="72:0">{<block_content pos:start="67:13" pos:end="67:53">

            <expr_stmt pos:start="67:13" pos:end="67:53"><expr pos:start="67:13" pos:end="67:52"><call pos:start="67:13" pos:end="67:52"><name pos:start="67:13" pos:end="67:27">qxl_send_events</name><argument_list pos:start="67:28" pos:end="67:52">(<argument pos:start="67:29" pos:end="67:29"><expr pos:start="67:29" pos:end="67:29"><name pos:start="67:29" pos:end="67:29">d</name></expr></argument>, <argument pos:start="67:32" pos:end="67:51"><expr pos:start="67:32" pos:end="67:51"><name pos:start="67:32" pos:end="67:51">QXL_INTERRUPT_IO_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="71:1" pos:end="71:6">#<cpp:directive pos:start="71:2" pos:end="71:6">endif</cpp:directive></cpp:endif>

        <return pos:start="73:9" pos:end="73:15">return;</return>

    </block_content>}</block></switch>



<cpp:if pos:start="79:1" pos:end="79:34">#<cpp:directive pos:start="79:2" pos:end="79:3">if</cpp:directive> <expr pos:start="79:5" pos:end="79:34"><name pos:start="79:5" pos:end="79:29">SPICE_INTERFACE_QXL_MINOR</name> <operator pos:start="79:31" pos:end="79:32">&gt;=</operator> <literal type="number" pos:start="79:34" pos:end="79:34">1</literal></expr></cpp:if>

    <comment type="block" pos:start="81:5" pos:end="81:69">/* we change the io_port to avoid ifdeffery in the main switch */</comment>

    <expr_stmt pos:start="83:5" pos:end="83:27"><expr pos:start="83:5" pos:end="83:26"><name pos:start="83:5" pos:end="83:16">orig_io_port</name> <operator pos:start="83:18" pos:end="83:18">=</operator> <name pos:start="83:20" pos:end="83:26">io_port</name></expr>;</expr_stmt>

    <switch pos:start="85:5" pos:end="158:0">switch <condition pos:start="85:12" pos:end="85:20">(<expr pos:start="85:13" pos:end="85:19"><name pos:start="85:13" pos:end="85:19">io_port</name></expr>)</condition> <block pos:start="85:22" pos:end="158:0">{<block_content pos:start="87:5" pos:end="153:14">

    <case pos:start="87:5" pos:end="87:34">case <expr pos:start="87:10" pos:end="87:33"><name pos:start="87:10" pos:end="87:33">QXL_IO_UPDATE_AREA_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="89:9" pos:end="89:37"><expr pos:start="89:9" pos:end="89:36"><name pos:start="89:9" pos:end="89:15">io_port</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <name pos:start="89:19" pos:end="89:36">QXL_IO_UPDATE_AREA</name></expr>;</expr_stmt>

        <goto pos:start="91:9" pos:end="91:26">goto <name pos:start="91:14" pos:end="91:25">async_common</name>;</goto>

    <case pos:start="93:5" pos:end="93:34">case <expr pos:start="93:10" pos:end="93:33"><name pos:start="93:10" pos:end="93:33">QXL_IO_MEMSLOT_ADD_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="95:9" pos:end="95:37"><expr pos:start="95:9" pos:end="95:36"><name pos:start="95:9" pos:end="95:15">io_port</name> <operator pos:start="95:17" pos:end="95:17">=</operator> <name pos:start="95:19" pos:end="95:36">QXL_IO_MEMSLOT_ADD</name></expr>;</expr_stmt>

        <goto pos:start="97:9" pos:end="97:26">goto <name pos:start="97:14" pos:end="97:25">async_common</name>;</goto>

    <case pos:start="99:5" pos:end="99:37">case <expr pos:start="99:10" pos:end="99:36"><name pos:start="99:10" pos:end="99:36">QXL_IO_CREATE_PRIMARY_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="101:9" pos:end="101:40"><expr pos:start="101:9" pos:end="101:39"><name pos:start="101:9" pos:end="101:15">io_port</name> <operator pos:start="101:17" pos:end="101:17">=</operator> <name pos:start="101:19" pos:end="101:39">QXL_IO_CREATE_PRIMARY</name></expr>;</expr_stmt>

        <goto pos:start="103:9" pos:end="103:26">goto <name pos:start="103:14" pos:end="103:25">async_common</name>;</goto>

    <case pos:start="105:5" pos:end="105:38">case <expr pos:start="105:10" pos:end="105:37"><name pos:start="105:10" pos:end="105:37">QXL_IO_DESTROY_PRIMARY_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="107:9" pos:end="107:41"><expr pos:start="107:9" pos:end="107:40"><name pos:start="107:9" pos:end="107:15">io_port</name> <operator pos:start="107:17" pos:end="107:17">=</operator> <name pos:start="107:19" pos:end="107:40">QXL_IO_DESTROY_PRIMARY</name></expr>;</expr_stmt>

        <goto pos:start="109:9" pos:end="109:26">goto <name pos:start="109:14" pos:end="109:25">async_common</name>;</goto>

    <case pos:start="111:5" pos:end="111:38">case <expr pos:start="111:10" pos:end="111:37"><name pos:start="111:10" pos:end="111:37">QXL_IO_DESTROY_SURFACE_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="113:9" pos:end="113:46"><expr pos:start="113:9" pos:end="113:45"><name pos:start="113:9" pos:end="113:15">io_port</name> <operator pos:start="113:17" pos:end="113:17">=</operator> <name pos:start="113:19" pos:end="113:45">QXL_IO_DESTROY_SURFACE_WAIT</name></expr>;</expr_stmt>

        <goto pos:start="115:9" pos:end="115:26">goto <name pos:start="115:14" pos:end="115:25">async_common</name>;</goto>

    <case pos:start="117:5" pos:end="117:43">case <expr pos:start="117:10" pos:end="117:42"><name pos:start="117:10" pos:end="117:42">QXL_IO_DESTROY_ALL_SURFACES_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="119:9" pos:end="119:46"><expr pos:start="119:9" pos:end="119:45"><name pos:start="119:9" pos:end="119:15">io_port</name> <operator pos:start="119:17" pos:end="119:17">=</operator> <name pos:start="119:19" pos:end="119:45">QXL_IO_DESTROY_ALL_SURFACES</name></expr>;</expr_stmt>

        <goto pos:start="121:9" pos:end="121:26">goto <name pos:start="121:14" pos:end="121:25">async_common</name>;</goto>

    <case pos:start="123:5" pos:end="123:37">case <expr pos:start="123:10" pos:end="123:36"><name pos:start="123:10" pos:end="123:36">QXL_IO_FLUSH_SURFACES_ASYNC</name></expr>:</case>

<label pos:start="125:1" pos:end="125:13"><name pos:start="125:1" pos:end="125:12">async_common</name>:</label>

        <expr_stmt pos:start="127:9" pos:end="127:26"><expr pos:start="127:9" pos:end="127:25"><name pos:start="127:9" pos:end="127:13">async</name> <operator pos:start="127:15" pos:end="127:15">=</operator> <name pos:start="127:17" pos:end="127:25">QXL_ASYNC</name></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:40"><expr pos:start="129:9" pos:end="129:39"><call pos:start="129:9" pos:end="129:39"><name pos:start="129:9" pos:end="129:23">qemu_mutex_lock</name><argument_list pos:start="129:24" pos:end="129:39">(<argument pos:start="129:25" pos:end="129:38"><expr pos:start="129:25" pos:end="129:38"><operator pos:start="129:25" pos:end="129:25">&amp;</operator><name pos:start="129:26" pos:end="129:38"><name pos:start="129:26" pos:end="129:26">d</name><operator pos:start="129:27" pos:end="129:28">-&gt;</operator><name pos:start="129:29" pos:end="129:38">async_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="131:9" pos:end="141:9"><if pos:start="131:9" pos:end="141:9">if <condition pos:start="131:12" pos:end="131:49">(<expr pos:start="131:13" pos:end="131:48"><name pos:start="131:13" pos:end="131:28"><name pos:start="131:13" pos:end="131:13">d</name><operator pos:start="131:14" pos:end="131:15">-&gt;</operator><name pos:start="131:16" pos:end="131:28">current_async</name></name> <operator pos:start="131:30" pos:end="131:31">!=</operator> <name pos:start="131:33" pos:end="131:48">QXL_UNDEFINED_IO</name></expr>)</condition> <block pos:start="131:51" pos:end="141:9">{<block_content pos:start="133:13" pos:end="139:19">

            <expr_stmt pos:start="133:13" pos:end="135:43"><expr pos:start="133:13" pos:end="135:42"><call pos:start="133:13" pos:end="135:42"><name pos:start="133:13" pos:end="133:25">qxl_guest_bug</name><argument_list pos:start="133:26" pos:end="135:42">(<argument pos:start="133:27" pos:end="133:27"><expr pos:start="133:27" pos:end="133:27"><name pos:start="133:27" pos:end="133:27">d</name></expr></argument>, <argument pos:start="133:30" pos:end="133:73"><expr pos:start="133:30" pos:end="133:73"><literal type="string" pos:start="133:30" pos:end="133:73">"%d async started before last (%d) complete"</literal></expr></argument>,

                <argument pos:start="135:17" pos:end="135:23"><expr pos:start="135:17" pos:end="135:23"><name pos:start="135:17" pos:end="135:23">io_port</name></expr></argument>, <argument pos:start="135:26" pos:end="135:41"><expr pos:start="135:26" pos:end="135:41"><name pos:start="135:26" pos:end="135:41"><name pos:start="135:26" pos:end="135:26">d</name><operator pos:start="135:27" pos:end="135:28">-&gt;</operator><name pos:start="135:29" pos:end="135:41">current_async</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="137:13" pos:end="137:46"><expr pos:start="137:13" pos:end="137:45"><call pos:start="137:13" pos:end="137:45"><name pos:start="137:13" pos:end="137:29">qemu_mutex_unlock</name><argument_list pos:start="137:30" pos:end="137:45">(<argument pos:start="137:31" pos:end="137:44"><expr pos:start="137:31" pos:end="137:44"><operator pos:start="137:31" pos:end="137:31">&amp;</operator><name pos:start="137:32" pos:end="137:44"><name pos:start="137:32" pos:end="137:32">d</name><operator pos:start="137:33" pos:end="137:34">-&gt;</operator><name pos:start="137:35" pos:end="137:44">async_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="139:13" pos:end="139:19">return;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="143:9" pos:end="143:40"><expr pos:start="143:9" pos:end="143:39"><name pos:start="143:9" pos:end="143:24"><name pos:start="143:9" pos:end="143:9">d</name><operator pos:start="143:10" pos:end="143:11">-&gt;</operator><name pos:start="143:12" pos:end="143:24">current_async</name></name> <operator pos:start="143:26" pos:end="143:26">=</operator> <name pos:start="143:28" pos:end="143:39">orig_io_port</name></expr>;</expr_stmt>

        <expr_stmt pos:start="145:9" pos:end="145:42"><expr pos:start="145:9" pos:end="145:41"><call pos:start="145:9" pos:end="145:41"><name pos:start="145:9" pos:end="145:25">qemu_mutex_unlock</name><argument_list pos:start="145:26" pos:end="145:41">(<argument pos:start="145:27" pos:end="145:40"><expr pos:start="145:27" pos:end="145:40"><operator pos:start="145:27" pos:end="145:27">&amp;</operator><name pos:start="145:28" pos:end="145:40"><name pos:start="145:28" pos:end="145:28">d</name><operator pos:start="145:29" pos:end="145:30">-&gt;</operator><name pos:start="145:31" pos:end="145:40">async_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="147:9" pos:end="147:67"><expr pos:start="147:9" pos:end="147:66"><call pos:start="147:9" pos:end="147:66"><name pos:start="147:9" pos:end="147:14">dprint</name><argument_list pos:start="147:15" pos:end="147:66">(<argument pos:start="147:16" pos:end="147:16"><expr pos:start="147:16" pos:end="147:16"><name pos:start="147:16" pos:end="147:16">d</name></expr></argument>, <argument pos:start="147:19" pos:end="147:19"><expr pos:start="147:19" pos:end="147:19"><literal type="number" pos:start="147:19" pos:end="147:19">2</literal></expr></argument>, <argument pos:start="147:22" pos:end="147:51"><expr pos:start="147:22" pos:end="147:51"><literal type="string" pos:start="147:22" pos:end="147:40">"start async %d (%"</literal><name pos:start="147:41" pos:end="147:46">PRId64</name><literal type="string" pos:start="147:47" pos:end="147:51">")\n"</literal></expr></argument>, <argument pos:start="147:54" pos:end="147:60"><expr pos:start="147:54" pos:end="147:60"><name pos:start="147:54" pos:end="147:60">io_port</name></expr></argument>, <argument pos:start="147:63" pos:end="147:65"><expr pos:start="147:63" pos:end="147:65"><name pos:start="147:63" pos:end="147:65">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="149:9" pos:end="149:14">break;</break>

    <default pos:start="151:5" pos:end="151:12">default:</default>

        <break pos:start="153:9" pos:end="153:14">break;</break>

    </block_content>}</block></switch>

<cpp:endif pos:start="157:1" pos:end="157:6">#<cpp:directive pos:start="157:2" pos:end="157:6">endif</cpp:directive></cpp:endif>



    <switch pos:start="161:5" pos:end="399:5">switch <condition pos:start="161:12" pos:end="161:20">(<expr pos:start="161:13" pos:end="161:19"><name pos:start="161:13" pos:end="161:19">io_port</name></expr>)</condition> <block pos:start="161:22" pos:end="399:5">{<block_content pos:start="163:5" pos:end="397:16">

    <case pos:start="163:5" pos:end="163:28">case <expr pos:start="163:10" pos:end="163:27"><name pos:start="163:10" pos:end="163:27">QXL_IO_UPDATE_AREA</name></expr>:</case>

    <block pos:start="165:5" pos:end="175:5">{<block_content pos:start="167:9" pos:end="173:14">

        <decl_stmt pos:start="167:9" pos:end="167:45"><decl pos:start="167:9" pos:end="167:44"><type pos:start="167:9" pos:end="167:15"><name pos:start="167:9" pos:end="167:15">QXLRect</name></type> <name pos:start="167:17" pos:end="167:22">update</name> <init pos:start="167:24" pos:end="167:44">= <expr pos:start="167:26" pos:end="167:44"><name pos:start="167:26" pos:end="167:44"><name pos:start="167:26" pos:end="167:26">d</name><operator pos:start="167:27" pos:end="167:28">-&gt;</operator><name pos:start="167:29" pos:end="167:31">ram</name><operator pos:start="167:32" pos:end="167:33">-&gt;</operator><name pos:start="167:34" pos:end="167:44">update_area</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt pos:start="169:9" pos:end="171:58"><expr pos:start="169:9" pos:end="171:57"><call pos:start="169:9" pos:end="171:57"><name pos:start="169:9" pos:end="169:29">qxl_spice_update_area</name><argument_list pos:start="169:30" pos:end="171:57">(<argument pos:start="169:31" pos:end="169:31"><expr pos:start="169:31" pos:end="169:31"><name pos:start="169:31" pos:end="169:31">d</name></expr></argument>, <argument pos:start="169:34" pos:end="169:55"><expr pos:start="169:34" pos:end="169:55"><name pos:start="169:34" pos:end="169:55"><name pos:start="169:34" pos:end="169:34">d</name><operator pos:start="169:35" pos:end="169:36">-&gt;</operator><name pos:start="169:37" pos:end="169:39">ram</name><operator pos:start="169:40" pos:end="169:41">-&gt;</operator><name pos:start="169:42" pos:end="169:55">update_surface</name></name></expr></argument>,

                              <argument pos:start="171:31" pos:end="171:37"><expr pos:start="171:31" pos:end="171:37"><operator pos:start="171:31" pos:end="171:31">&amp;</operator><name pos:start="171:32" pos:end="171:37">update</name></expr></argument>, <argument pos:start="171:40" pos:end="171:43"><expr pos:start="171:40" pos:end="171:43"><name pos:start="171:40" pos:end="171:43">NULL</name></expr></argument>, <argument pos:start="171:46" pos:end="171:46"><expr pos:start="171:46" pos:end="171:46"><literal type="number" pos:start="171:46" pos:end="171:46">0</literal></expr></argument>, <argument pos:start="171:49" pos:end="171:49"><expr pos:start="171:49" pos:end="171:49"><literal type="number" pos:start="171:49" pos:end="171:49">0</literal></expr></argument>, <argument pos:start="171:52" pos:end="171:56"><expr pos:start="171:52" pos:end="171:56"><name pos:start="171:52" pos:end="171:56">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="173:9" pos:end="173:14">break;</break>

    </block_content>}</block>

    <case pos:start="177:5" pos:end="177:27">case <expr pos:start="177:10" pos:end="177:26"><name pos:start="177:10" pos:end="177:26">QXL_IO_NOTIFY_CMD</name></expr>:</case>

        <expr_stmt pos:start="179:9" pos:end="179:35"><expr pos:start="179:9" pos:end="179:34"><call pos:start="179:9" pos:end="179:34"><name pos:start="179:9" pos:end="179:25">qemu_spice_wakeup</name><argument_list pos:start="179:26" pos:end="179:34">(<argument pos:start="179:27" pos:end="179:33"><expr pos:start="179:27" pos:end="179:33"><operator pos:start="179:27" pos:end="179:27">&amp;</operator><name pos:start="179:28" pos:end="179:33"><name pos:start="179:28" pos:end="179:28">d</name><operator pos:start="179:29" pos:end="179:30">-&gt;</operator><name pos:start="179:31" pos:end="179:33">ssd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="181:9" pos:end="181:14">break;</break>

    <case pos:start="183:5" pos:end="183:30">case <expr pos:start="183:10" pos:end="183:29"><name pos:start="183:10" pos:end="183:29">QXL_IO_NOTIFY_CURSOR</name></expr>:</case>

        <expr_stmt pos:start="185:9" pos:end="185:35"><expr pos:start="185:9" pos:end="185:34"><call pos:start="185:9" pos:end="185:34"><name pos:start="185:9" pos:end="185:25">qemu_spice_wakeup</name><argument_list pos:start="185:26" pos:end="185:34">(<argument pos:start="185:27" pos:end="185:33"><expr pos:start="185:27" pos:end="185:33"><operator pos:start="185:27" pos:end="185:27">&amp;</operator><name pos:start="185:28" pos:end="185:33"><name pos:start="185:28" pos:end="185:28">d</name><operator pos:start="185:29" pos:end="185:30">-&gt;</operator><name pos:start="185:31" pos:end="185:33">ssd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="187:9" pos:end="187:14">break;</break>

    <case pos:start="189:5" pos:end="189:27">case <expr pos:start="189:10" pos:end="189:26"><name pos:start="189:10" pos:end="189:26">QXL_IO_UPDATE_IRQ</name></expr>:</case>

        <expr_stmt pos:start="191:9" pos:end="191:26"><expr pos:start="191:9" pos:end="191:25"><call pos:start="191:9" pos:end="191:25"><name pos:start="191:9" pos:end="191:22">qxl_update_irq</name><argument_list pos:start="191:23" pos:end="191:25">(<argument pos:start="191:24" pos:end="191:24"><expr pos:start="191:24" pos:end="191:24"><name pos:start="191:24" pos:end="191:24">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="193:9" pos:end="193:14">break;</break>

    <case pos:start="195:5" pos:end="195:27">case <expr pos:start="195:10" pos:end="195:26"><name pos:start="195:10" pos:end="195:26">QXL_IO_NOTIFY_OOM</name></expr>:</case>

        <if_stmt pos:start="197:9" pos:end="201:9"><if pos:start="197:9" pos:end="201:9">if <condition pos:start="197:12" pos:end="197:56">(<expr pos:start="197:13" pos:end="197:55"><operator pos:start="197:13" pos:end="197:13">!</operator><call pos:start="197:14" pos:end="197:55"><name pos:start="197:14" pos:end="197:32">SPICE_RING_IS_EMPTY</name><argument_list pos:start="197:33" pos:end="197:55">(<argument pos:start="197:34" pos:end="197:54"><expr pos:start="197:34" pos:end="197:54"><operator pos:start="197:34" pos:end="197:34">&amp;</operator><name pos:start="197:35" pos:end="197:54"><name pos:start="197:35" pos:end="197:35">d</name><operator pos:start="197:36" pos:end="197:37">-&gt;</operator><name pos:start="197:38" pos:end="197:40">ram</name><operator pos:start="197:41" pos:end="197:42">-&gt;</operator><name pos:start="197:43" pos:end="197:54">release_ring</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="197:58" pos:end="201:9">{<block_content pos:start="199:13" pos:end="199:18">

            <break pos:start="199:13" pos:end="199:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="203:9" pos:end="203:27"><expr pos:start="203:9" pos:end="203:26"><name pos:start="203:9" pos:end="203:22"><name pos:start="203:9" pos:end="203:9">d</name><operator pos:start="203:10" pos:end="203:11">-&gt;</operator><name pos:start="203:12" pos:end="203:22">oom_running</name></name> <operator pos:start="203:24" pos:end="203:24">=</operator> <literal type="number" pos:start="203:26" pos:end="203:26">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="205:9" pos:end="205:25"><expr pos:start="205:9" pos:end="205:24"><call pos:start="205:9" pos:end="205:24"><name pos:start="205:9" pos:end="205:21">qxl_spice_oom</name><argument_list pos:start="205:22" pos:end="205:24">(<argument pos:start="205:23" pos:end="205:23"><expr pos:start="205:23" pos:end="205:23"><name pos:start="205:23" pos:end="205:23">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="207:9" pos:end="207:27"><expr pos:start="207:9" pos:end="207:26"><name pos:start="207:9" pos:end="207:22"><name pos:start="207:9" pos:end="207:9">d</name><operator pos:start="207:10" pos:end="207:11">-&gt;</operator><name pos:start="207:12" pos:end="207:22">oom_running</name></name> <operator pos:start="207:24" pos:end="207:24">=</operator> <literal type="number" pos:start="207:26" pos:end="207:26">0</literal></expr>;</expr_stmt>

        <break pos:start="209:9" pos:end="209:14">break;</break>

    <case pos:start="211:5" pos:end="211:25">case <expr pos:start="211:10" pos:end="211:24"><name pos:start="211:10" pos:end="211:24">QXL_IO_SET_MODE</name></expr>:</case>

        <expr_stmt pos:start="213:9" pos:end="213:52"><expr pos:start="213:9" pos:end="213:51"><call pos:start="213:9" pos:end="213:51"><name pos:start="213:9" pos:end="213:14">dprint</name><argument_list pos:start="213:15" pos:end="213:51">(<argument pos:start="213:16" pos:end="213:16"><expr pos:start="213:16" pos:end="213:16"><name pos:start="213:16" pos:end="213:16">d</name></expr></argument>, <argument pos:start="213:19" pos:end="213:19"><expr pos:start="213:19" pos:end="213:19"><literal type="number" pos:start="213:19" pos:end="213:19">1</literal></expr></argument>, <argument pos:start="213:22" pos:end="213:40"><expr pos:start="213:22" pos:end="213:40"><literal type="string" pos:start="213:22" pos:end="213:40">"QXL_SET_MODE %d\n"</literal></expr></argument>, <argument pos:start="213:43" pos:end="213:50"><expr pos:start="213:43" pos:end="213:50"><operator pos:start="213:43" pos:end="213:43">(</operator><name pos:start="213:44" pos:end="213:46">int</name><operator pos:start="213:47" pos:end="213:47">)</operator><name pos:start="213:48" pos:end="213:50">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="215:9" pos:end="215:32"><expr pos:start="215:9" pos:end="215:31"><call pos:start="215:9" pos:end="215:31"><name pos:start="215:9" pos:end="215:20">qxl_set_mode</name><argument_list pos:start="215:21" pos:end="215:31">(<argument pos:start="215:22" pos:end="215:22"><expr pos:start="215:22" pos:end="215:22"><name pos:start="215:22" pos:end="215:22">d</name></expr></argument>, <argument pos:start="215:25" pos:end="215:27"><expr pos:start="215:25" pos:end="215:27"><name pos:start="215:25" pos:end="215:27">val</name></expr></argument>, <argument pos:start="215:30" pos:end="215:30"><expr pos:start="215:30" pos:end="215:30"><literal type="number" pos:start="215:30" pos:end="215:30">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="217:9" pos:end="217:14">break;</break>

    <case pos:start="219:5" pos:end="219:20">case <expr pos:start="219:10" pos:end="219:19"><name pos:start="219:10" pos:end="219:19">QXL_IO_LOG</name></expr>:</case>

        <if_stmt pos:start="221:9" pos:end="227:9"><if pos:start="221:9" pos:end="227:9">if <condition pos:start="221:12" pos:end="221:26">(<expr pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:25"><name pos:start="221:13" pos:end="221:13">d</name><operator pos:start="221:14" pos:end="221:15">-&gt;</operator><name pos:start="221:16" pos:end="221:25">guestdebug</name></name></expr>)</condition> <block pos:start="221:28" pos:end="227:9">{<block_content pos:start="223:13" pos:end="225:66">

            <expr_stmt pos:start="223:13" pos:end="225:66"><expr pos:start="223:13" pos:end="225:65"><call pos:start="223:13" pos:end="225:65"><name pos:start="223:13" pos:end="223:19">fprintf</name><argument_list pos:start="223:20" pos:end="225:65">(<argument pos:start="223:21" pos:end="223:26"><expr pos:start="223:21" pos:end="223:26"><name pos:start="223:21" pos:end="223:26">stderr</name></expr></argument>, <argument pos:start="223:29" pos:end="223:59"><expr pos:start="223:29" pos:end="223:59"><literal type="string" pos:start="223:29" pos:end="223:45">"qxl/guest-%d: %"</literal> <name pos:start="223:47" pos:end="223:52">PRId64</name> <literal type="string" pos:start="223:54" pos:end="223:59">": %s"</literal></expr></argument>, <argument pos:start="223:62" pos:end="223:66"><expr pos:start="223:62" pos:end="223:66"><name pos:start="223:62" pos:end="223:66"><name pos:start="223:62" pos:end="223:62">d</name><operator pos:start="223:63" pos:end="223:64">-&gt;</operator><name pos:start="223:65" pos:end="223:66">id</name></name></expr></argument>,

                    <argument pos:start="225:21" pos:end="225:47"><expr pos:start="225:21" pos:end="225:47"><call pos:start="225:21" pos:end="225:47"><name pos:start="225:21" pos:end="225:37">qemu_get_clock_ns</name><argument_list pos:start="225:38" pos:end="225:47">(<argument pos:start="225:39" pos:end="225:46"><expr pos:start="225:39" pos:end="225:46"><name pos:start="225:39" pos:end="225:46">vm_clock</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="225:50" pos:end="225:64"><expr pos:start="225:50" pos:end="225:64"><name pos:start="225:50" pos:end="225:64"><name pos:start="225:50" pos:end="225:50">d</name><operator pos:start="225:51" pos:end="225:52">-&gt;</operator><name pos:start="225:53" pos:end="225:55">ram</name><operator pos:start="225:56" pos:end="225:57">-&gt;</operator><name pos:start="225:58" pos:end="225:64">log_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <break pos:start="229:9" pos:end="229:14">break;</break>

    <case pos:start="231:5" pos:end="231:22">case <expr pos:start="231:10" pos:end="231:21"><name pos:start="231:10" pos:end="231:21">QXL_IO_RESET</name></expr>:</case>

        <expr_stmt pos:start="233:9" pos:end="233:39"><expr pos:start="233:9" pos:end="233:38"><call pos:start="233:9" pos:end="233:38"><name pos:start="233:9" pos:end="233:14">dprint</name><argument_list pos:start="233:15" pos:end="233:38">(<argument pos:start="233:16" pos:end="233:16"><expr pos:start="233:16" pos:end="233:16"><name pos:start="233:16" pos:end="233:16">d</name></expr></argument>, <argument pos:start="233:19" pos:end="233:19"><expr pos:start="233:19" pos:end="233:19"><literal type="number" pos:start="233:19" pos:end="233:19">1</literal></expr></argument>, <argument pos:start="233:22" pos:end="233:37"><expr pos:start="233:22" pos:end="233:37"><literal type="string" pos:start="233:22" pos:end="233:37">"QXL_IO_RESET\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="235:9" pos:end="235:29"><expr pos:start="235:9" pos:end="235:28"><call pos:start="235:9" pos:end="235:28"><name pos:start="235:9" pos:end="235:22">qxl_hard_reset</name><argument_list pos:start="235:23" pos:end="235:28">(<argument pos:start="235:24" pos:end="235:24"><expr pos:start="235:24" pos:end="235:24"><name pos:start="235:24" pos:end="235:24">d</name></expr></argument>, <argument pos:start="235:27" pos:end="235:27"><expr pos:start="235:27" pos:end="235:27"><literal type="number" pos:start="235:27" pos:end="235:27">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="237:9" pos:end="237:14">break;</break>

    <case pos:start="239:5" pos:end="239:28">case <expr pos:start="239:10" pos:end="239:27"><name pos:start="239:10" pos:end="239:27">QXL_IO_MEMSLOT_ADD</name></expr>:</case>

        <if_stmt pos:start="241:9" pos:end="247:9"><if pos:start="241:9" pos:end="247:9">if <condition pos:start="241:12" pos:end="241:32">(<expr pos:start="241:13" pos:end="241:31"><name pos:start="241:13" pos:end="241:15">val</name> <operator pos:start="241:17" pos:end="241:18">&gt;=</operator> <name pos:start="241:20" pos:end="241:31">NUM_MEMSLOTS</name></expr>)</condition> <block pos:start="241:34" pos:end="247:9">{<block_content pos:start="243:13" pos:end="245:18">

            <expr_stmt pos:start="243:13" pos:end="243:69"><expr pos:start="243:13" pos:end="243:68"><call pos:start="243:13" pos:end="243:68"><name pos:start="243:13" pos:end="243:25">qxl_guest_bug</name><argument_list pos:start="243:26" pos:end="243:68">(<argument pos:start="243:27" pos:end="243:27"><expr pos:start="243:27" pos:end="243:27"><name pos:start="243:27" pos:end="243:27">d</name></expr></argument>, <argument pos:start="243:30" pos:end="243:67"><expr pos:start="243:30" pos:end="243:67"><literal type="string" pos:start="243:30" pos:end="243:67">"QXL_IO_MEMSLOT_ADD: val out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="245:13" pos:end="245:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="249:9" pos:end="255:9"><if pos:start="249:9" pos:end="255:9">if <condition pos:start="249:12" pos:end="249:39">(<expr pos:start="249:13" pos:end="249:38"><name pos:start="249:13" pos:end="249:31"><name pos:start="249:13" pos:end="249:13">d</name><operator pos:start="249:14" pos:end="249:15">-&gt;</operator><name pos:start="249:16" pos:end="249:26">guest_slots</name><index pos:start="249:27" pos:end="249:31">[<expr pos:start="249:28" pos:end="249:30"><name pos:start="249:28" pos:end="249:30">val</name></expr>]</index></name><operator pos:start="249:32" pos:end="249:32">.</operator><name pos:start="249:33" pos:end="249:38">active</name></expr>)</condition> <block pos:start="249:41" pos:end="255:9">{<block_content pos:start="251:13" pos:end="253:18">

            <expr_stmt pos:start="251:13" pos:end="251:79"><expr pos:start="251:13" pos:end="251:78"><call pos:start="251:13" pos:end="251:78"><name pos:start="251:13" pos:end="251:25">qxl_guest_bug</name><argument_list pos:start="251:26" pos:end="251:78">(<argument pos:start="251:27" pos:end="251:27"><expr pos:start="251:27" pos:end="251:27"><name pos:start="251:27" pos:end="251:27">d</name></expr></argument>, <argument pos:start="251:30" pos:end="251:77"><expr pos:start="251:30" pos:end="251:77"><literal type="string" pos:start="251:30" pos:end="251:77">"QXL_IO_MEMSLOT_ADD: memory slot already active"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="253:13" pos:end="253:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="257:9" pos:end="257:52"><expr pos:start="257:9" pos:end="257:51"><name pos:start="257:9" pos:end="257:27"><name pos:start="257:9" pos:end="257:9">d</name><operator pos:start="257:10" pos:end="257:11">-&gt;</operator><name pos:start="257:12" pos:end="257:22">guest_slots</name><index pos:start="257:23" pos:end="257:27">[<expr pos:start="257:24" pos:end="257:26"><name pos:start="257:24" pos:end="257:26">val</name></expr>]</index></name><operator pos:start="257:28" pos:end="257:28">.</operator><name pos:start="257:29" pos:end="257:32">slot</name> <operator pos:start="257:34" pos:end="257:34">=</operator> <name pos:start="257:36" pos:end="257:51"><name pos:start="257:36" pos:end="257:36">d</name><operator pos:start="257:37" pos:end="257:38">-&gt;</operator><name pos:start="257:39" pos:end="257:41">ram</name><operator pos:start="257:42" pos:end="257:43">-&gt;</operator><name pos:start="257:44" pos:end="257:51">mem_slot</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="259:9" pos:end="259:42"><expr pos:start="259:9" pos:end="259:41"><call pos:start="259:9" pos:end="259:41"><name pos:start="259:9" pos:end="259:23">qxl_add_memslot</name><argument_list pos:start="259:24" pos:end="259:41">(<argument pos:start="259:25" pos:end="259:25"><expr pos:start="259:25" pos:end="259:25"><name pos:start="259:25" pos:end="259:25">d</name></expr></argument>, <argument pos:start="259:28" pos:end="259:30"><expr pos:start="259:28" pos:end="259:30"><name pos:start="259:28" pos:end="259:30">val</name></expr></argument>, <argument pos:start="259:33" pos:end="259:33"><expr pos:start="259:33" pos:end="259:33"><literal type="number" pos:start="259:33" pos:end="259:33">0</literal></expr></argument>, <argument pos:start="259:36" pos:end="259:40"><expr pos:start="259:36" pos:end="259:40"><name pos:start="259:36" pos:end="259:40">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="261:9" pos:end="261:14">break;</break>

    <case pos:start="263:5" pos:end="263:28">case <expr pos:start="263:10" pos:end="263:27"><name pos:start="263:10" pos:end="263:27">QXL_IO_MEMSLOT_DEL</name></expr>:</case>

        <if_stmt pos:start="265:9" pos:end="271:9"><if pos:start="265:9" pos:end="271:9">if <condition pos:start="265:12" pos:end="265:32">(<expr pos:start="265:13" pos:end="265:31"><name pos:start="265:13" pos:end="265:15">val</name> <operator pos:start="265:17" pos:end="265:18">&gt;=</operator> <name pos:start="265:20" pos:end="265:31">NUM_MEMSLOTS</name></expr>)</condition> <block pos:start="265:34" pos:end="271:9">{<block_content pos:start="267:13" pos:end="269:18">

            <expr_stmt pos:start="267:13" pos:end="267:69"><expr pos:start="267:13" pos:end="267:68"><call pos:start="267:13" pos:end="267:68"><name pos:start="267:13" pos:end="267:25">qxl_guest_bug</name><argument_list pos:start="267:26" pos:end="267:68">(<argument pos:start="267:27" pos:end="267:27"><expr pos:start="267:27" pos:end="267:27"><name pos:start="267:27" pos:end="267:27">d</name></expr></argument>, <argument pos:start="267:30" pos:end="267:67"><expr pos:start="267:30" pos:end="267:67"><literal type="string" pos:start="267:30" pos:end="267:67">"QXL_IO_MEMSLOT_DEL: val out of range"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="269:13" pos:end="269:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="273:9" pos:end="273:32"><expr pos:start="273:9" pos:end="273:31"><call pos:start="273:9" pos:end="273:31"><name pos:start="273:9" pos:end="273:23">qxl_del_memslot</name><argument_list pos:start="273:24" pos:end="273:31">(<argument pos:start="273:25" pos:end="273:25"><expr pos:start="273:25" pos:end="273:25"><name pos:start="273:25" pos:end="273:25">d</name></expr></argument>, <argument pos:start="273:28" pos:end="273:30"><expr pos:start="273:28" pos:end="273:30"><name pos:start="273:28" pos:end="273:30">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="275:9" pos:end="275:14">break;</break>

    <case pos:start="277:5" pos:end="277:31">case <expr pos:start="277:10" pos:end="277:30"><name pos:start="277:10" pos:end="277:30">QXL_IO_CREATE_PRIMARY</name></expr>:</case>

        <if_stmt pos:start="279:9" pos:end="287:9"><if pos:start="279:9" pos:end="287:9">if <condition pos:start="279:12" pos:end="279:21">(<expr pos:start="279:13" pos:end="279:20"><name pos:start="279:13" pos:end="279:15">val</name> <operator pos:start="279:17" pos:end="279:18">!=</operator> <literal type="number" pos:start="279:20" pos:end="279:20">0</literal></expr>)</condition> <block pos:start="279:23" pos:end="287:9">{<block_content pos:start="281:13" pos:end="285:30">

            <expr_stmt pos:start="281:13" pos:end="283:33"><expr pos:start="281:13" pos:end="283:32"><call pos:start="281:13" pos:end="283:32"><name pos:start="281:13" pos:end="281:25">qxl_guest_bug</name><argument_list pos:start="281:26" pos:end="283:32">(<argument pos:start="281:27" pos:end="281:27"><expr pos:start="281:27" pos:end="281:27"><name pos:start="281:27" pos:end="281:27">d</name></expr></argument>, <argument pos:start="281:30" pos:end="281:73"><expr pos:start="281:30" pos:end="281:73"><literal type="string" pos:start="281:30" pos:end="281:73">"QXL_IO_CREATE_PRIMARY (async=%d): val != 0"</literal></expr></argument>,

                          <argument pos:start="283:27" pos:end="283:31"><expr pos:start="283:27" pos:end="283:31"><name pos:start="283:27" pos:end="283:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="285:13" pos:end="285:30">goto <name pos:start="285:18" pos:end="285:29">cancel_async</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="289:9" pos:end="289:64"><expr pos:start="289:9" pos:end="289:63"><call pos:start="289:9" pos:end="289:63"><name pos:start="289:9" pos:end="289:14">dprint</name><argument_list pos:start="289:15" pos:end="289:63">(<argument pos:start="289:16" pos:end="289:16"><expr pos:start="289:16" pos:end="289:16"><name pos:start="289:16" pos:end="289:16">d</name></expr></argument>, <argument pos:start="289:19" pos:end="289:19"><expr pos:start="289:19" pos:end="289:19"><literal type="number" pos:start="289:19" pos:end="289:19">1</literal></expr></argument>, <argument pos:start="289:22" pos:end="289:55"><expr pos:start="289:22" pos:end="289:55"><literal type="string" pos:start="289:22" pos:end="289:55">"QXL_IO_CREATE_PRIMARY async=%d\n"</literal></expr></argument>, <argument pos:start="289:58" pos:end="289:62"><expr pos:start="289:58" pos:end="289:62"><name pos:start="289:58" pos:end="289:62">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="291:9" pos:end="291:58"><expr pos:start="291:9" pos:end="291:57"><name pos:start="291:9" pos:end="291:32"><name pos:start="291:9" pos:end="291:9">d</name><operator pos:start="291:10" pos:end="291:11">-&gt;</operator><name pos:start="291:12" pos:end="291:24">guest_primary</name><operator pos:start="291:25" pos:end="291:25">.</operator><name pos:start="291:26" pos:end="291:32">surface</name></name> <operator pos:start="291:34" pos:end="291:34">=</operator> <name pos:start="291:36" pos:end="291:57"><name pos:start="291:36" pos:end="291:36">d</name><operator pos:start="291:37" pos:end="291:38">-&gt;</operator><name pos:start="291:39" pos:end="291:41">ram</name><operator pos:start="291:42" pos:end="291:43">-&gt;</operator><name pos:start="291:44" pos:end="291:57">create_surface</name></name></expr>;</expr_stmt>

        <expr_stmt pos:start="293:9" pos:end="293:46"><expr pos:start="293:9" pos:end="293:45"><call pos:start="293:9" pos:end="293:45"><name pos:start="293:9" pos:end="293:32">qxl_create_guest_primary</name><argument_list pos:start="293:33" pos:end="293:45">(<argument pos:start="293:34" pos:end="293:34"><expr pos:start="293:34" pos:end="293:34"><name pos:start="293:34" pos:end="293:34">d</name></expr></argument>, <argument pos:start="293:37" pos:end="293:37"><expr pos:start="293:37" pos:end="293:37"><literal type="number" pos:start="293:37" pos:end="293:37">0</literal></expr></argument>, <argument pos:start="293:40" pos:end="293:44"><expr pos:start="293:40" pos:end="293:44"><name pos:start="293:40" pos:end="293:44">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="295:9" pos:end="295:14">break;</break>

    <case pos:start="297:5" pos:end="297:32">case <expr pos:start="297:10" pos:end="297:31"><name pos:start="297:10" pos:end="297:31">QXL_IO_DESTROY_PRIMARY</name></expr>:</case>

        <if_stmt pos:start="299:9" pos:end="307:9"><if pos:start="299:9" pos:end="307:9">if <condition pos:start="299:12" pos:end="299:21">(<expr pos:start="299:13" pos:end="299:20"><name pos:start="299:13" pos:end="299:15">val</name> <operator pos:start="299:17" pos:end="299:18">!=</operator> <literal type="number" pos:start="299:20" pos:end="299:20">0</literal></expr>)</condition> <block pos:start="299:23" pos:end="307:9">{<block_content pos:start="301:13" pos:end="305:30">

            <expr_stmt pos:start="301:13" pos:end="303:33"><expr pos:start="301:13" pos:end="303:32"><call pos:start="301:13" pos:end="303:32"><name pos:start="301:13" pos:end="301:25">qxl_guest_bug</name><argument_list pos:start="301:26" pos:end="303:32">(<argument pos:start="301:27" pos:end="301:27"><expr pos:start="301:27" pos:end="301:27"><name pos:start="301:27" pos:end="301:27">d</name></expr></argument>, <argument pos:start="301:30" pos:end="301:74"><expr pos:start="301:30" pos:end="301:74"><literal type="string" pos:start="301:30" pos:end="301:74">"QXL_IO_DESTROY_PRIMARY (async=%d): val != 0"</literal></expr></argument>,

                          <argument pos:start="303:27" pos:end="303:31"><expr pos:start="303:27" pos:end="303:31"><name pos:start="303:27" pos:end="303:31">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="305:13" pos:end="305:30">goto <name pos:start="305:18" pos:end="305:29">cancel_async</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="309:9" pos:end="311:44"><expr pos:start="309:9" pos:end="311:43"><call pos:start="309:9" pos:end="311:43"><name pos:start="309:9" pos:end="309:14">dprint</name><argument_list pos:start="309:15" pos:end="311:43">(<argument pos:start="309:16" pos:end="309:16"><expr pos:start="309:16" pos:end="309:16"><name pos:start="309:16" pos:end="309:16">d</name></expr></argument>, <argument pos:start="309:19" pos:end="309:19"><expr pos:start="309:19" pos:end="309:19"><literal type="number" pos:start="309:19" pos:end="309:19">1</literal></expr></argument>, <argument pos:start="309:22" pos:end="309:63"><expr pos:start="309:22" pos:end="309:63"><literal type="string" pos:start="309:22" pos:end="309:63">"QXL_IO_DESTROY_PRIMARY (async=%d) (%s)\n"</literal></expr></argument>, <argument pos:start="309:66" pos:end="309:70"><expr pos:start="309:66" pos:end="309:70"><name pos:start="309:66" pos:end="309:70">async</name></expr></argument>,

               <argument pos:start="311:16" pos:end="311:42"><expr pos:start="311:16" pos:end="311:42"><call pos:start="311:16" pos:end="311:42"><name pos:start="311:16" pos:end="311:33">qxl_mode_to_string</name><argument_list pos:start="311:34" pos:end="311:42">(<argument pos:start="311:35" pos:end="311:41"><expr pos:start="311:35" pos:end="311:41"><name pos:start="311:35" pos:end="311:41"><name pos:start="311:35" pos:end="311:35">d</name><operator pos:start="311:36" pos:end="311:37">-&gt;</operator><name pos:start="311:38" pos:end="311:41">mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="313:9" pos:end="321:9"><if pos:start="313:9" pos:end="321:9">if <condition pos:start="313:12" pos:end="313:43">(<expr pos:start="313:13" pos:end="313:42"><operator pos:start="313:13" pos:end="313:13">!</operator><call pos:start="313:14" pos:end="313:42"><name pos:start="313:14" pos:end="313:32">qxl_destroy_primary</name><argument_list pos:start="313:33" pos:end="313:42">(<argument pos:start="313:34" pos:end="313:34"><expr pos:start="313:34" pos:end="313:34"><name pos:start="313:34" pos:end="313:34">d</name></expr></argument>, <argument pos:start="313:37" pos:end="313:41"><expr pos:start="313:37" pos:end="313:41"><name pos:start="313:37" pos:end="313:41">async</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="313:45" pos:end="321:9">{<block_content pos:start="315:13" pos:end="319:30">

            <expr_stmt pos:start="315:13" pos:end="317:49"><expr pos:start="315:13" pos:end="317:48"><call pos:start="315:13" pos:end="317:48"><name pos:start="315:13" pos:end="315:18">dprint</name><argument_list pos:start="315:19" pos:end="317:48">(<argument pos:start="315:20" pos:end="315:20"><expr pos:start="315:20" pos:end="315:20"><name pos:start="315:20" pos:end="315:20">d</name></expr></argument>, <argument pos:start="315:23" pos:end="315:23"><expr pos:start="315:23" pos:end="315:23"><literal type="number" pos:start="315:23" pos:end="315:23">1</literal></expr></argument>, <argument pos:start="315:26" pos:end="315:72"><expr pos:start="315:26" pos:end="315:72"><literal type="string" pos:start="315:26" pos:end="315:72">"QXL_IO_DESTROY_PRIMARY_ASYNC in %s, ignored\n"</literal></expr></argument>,

                    <argument pos:start="317:21" pos:end="317:47"><expr pos:start="317:21" pos:end="317:47"><call pos:start="317:21" pos:end="317:47"><name pos:start="317:21" pos:end="317:38">qxl_mode_to_string</name><argument_list pos:start="317:39" pos:end="317:47">(<argument pos:start="317:40" pos:end="317:46"><expr pos:start="317:40" pos:end="317:46"><name pos:start="317:40" pos:end="317:46"><name pos:start="317:40" pos:end="317:40">d</name><operator pos:start="317:41" pos:end="317:42">-&gt;</operator><name pos:start="317:43" pos:end="317:46">mode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="319:13" pos:end="319:30">goto <name pos:start="319:18" pos:end="319:29">cancel_async</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <break pos:start="323:9" pos:end="323:14">break;</break>

    <case pos:start="325:5" pos:end="325:37">case <expr pos:start="325:10" pos:end="325:36"><name pos:start="325:10" pos:end="325:36">QXL_IO_DESTROY_SURFACE_WAIT</name></expr>:</case>

        <if_stmt pos:start="327:9" pos:end="335:9"><if pos:start="327:9" pos:end="335:9">if <condition pos:start="327:12" pos:end="327:32">(<expr pos:start="327:13" pos:end="327:31"><name pos:start="327:13" pos:end="327:15">val</name> <operator pos:start="327:17" pos:end="327:18">&gt;=</operator> <name pos:start="327:20" pos:end="327:31">NUM_SURFACES</name></expr>)</condition> <block pos:start="327:34" pos:end="335:9">{<block_content pos:start="329:13" pos:end="333:30">

            <expr_stmt pos:start="329:13" pos:end="331:63"><expr pos:start="329:13" pos:end="331:62"><call pos:start="329:13" pos:end="331:62"><name pos:start="329:13" pos:end="329:25">qxl_guest_bug</name><argument_list pos:start="329:26" pos:end="331:62">(<argument pos:start="329:27" pos:end="329:27"><expr pos:start="329:27" pos:end="329:27"><name pos:start="329:27" pos:end="329:27">d</name></expr></argument>, <argument pos:start="329:30" pos:end="331:49"><expr pos:start="329:30" pos:end="331:49"><literal type="string" pos:start="329:30" pos:end="329:65">"QXL_IO_DESTROY_SURFACE (async=%d):"</literal>

                             <literal type="string" pos:start="331:30" pos:end="331:49">"%d &gt;= NUM_SURFACES"</literal></expr></argument>, <argument pos:start="331:52" pos:end="331:56"><expr pos:start="331:52" pos:end="331:56"><name pos:start="331:52" pos:end="331:56">async</name></expr></argument>, <argument pos:start="331:59" pos:end="331:61"><expr pos:start="331:59" pos:end="331:61"><name pos:start="331:59" pos:end="331:61">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <goto pos:start="333:13" pos:end="333:30">goto <name pos:start="333:18" pos:end="333:29">cancel_async</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="337:9" pos:end="337:54"><expr pos:start="337:9" pos:end="337:53"><call pos:start="337:9" pos:end="337:53"><name pos:start="337:9" pos:end="337:38">qxl_spice_destroy_surface_wait</name><argument_list pos:start="337:39" pos:end="337:53">(<argument pos:start="337:40" pos:end="337:40"><expr pos:start="337:40" pos:end="337:40"><name pos:start="337:40" pos:end="337:40">d</name></expr></argument>, <argument pos:start="337:43" pos:end="337:45"><expr pos:start="337:43" pos:end="337:45"><name pos:start="337:43" pos:end="337:45">val</name></expr></argument>, <argument pos:start="337:48" pos:end="337:52"><expr pos:start="337:48" pos:end="337:52"><name pos:start="337:48" pos:end="337:52">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="339:9" pos:end="342:0">break;</break>

<cpp:if pos:start="341:1" pos:end="341:34">#<cpp:directive pos:start="341:2" pos:end="341:3">if</cpp:directive> <expr pos:start="341:5" pos:end="341:34"><name pos:start="341:5" pos:end="341:29">SPICE_INTERFACE_QXL_MINOR</name> <operator pos:start="341:31" pos:end="341:32">&gt;=</operator> <literal type="number" pos:start="341:34" pos:end="341:34">1</literal></expr></cpp:if>

    <case pos:start="343:5" pos:end="343:30">case <expr pos:start="343:10" pos:end="343:29"><name pos:start="343:10" pos:end="343:29">QXL_IO_FLUSH_RELEASE</name></expr>:</case> <block pos:start="343:32" pos:end="367:5">{<block_content pos:start="345:9" pos:end="365:14">

        <decl_stmt pos:start="345:9" pos:end="345:53"><decl pos:start="345:9" pos:end="345:52"><type pos:start="345:9" pos:end="345:24"><name pos:start="345:9" pos:end="345:22">QXLReleaseRing</name> <modifier pos:start="345:24" pos:end="345:24">*</modifier></type><name pos:start="345:25" pos:end="345:28">ring</name> <init pos:start="345:30" pos:end="345:52">= <expr pos:start="345:32" pos:end="345:52"><operator pos:start="345:32" pos:end="345:32">&amp;</operator><name pos:start="345:33" pos:end="345:52"><name pos:start="345:33" pos:end="345:33">d</name><operator pos:start="345:34" pos:end="345:35">-&gt;</operator><name pos:start="345:36" pos:end="345:38">ram</name><operator pos:start="345:39" pos:end="345:40">-&gt;</operator><name pos:start="345:41" pos:end="345:52">release_ring</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="347:9" pos:end="355:9"><if pos:start="347:9" pos:end="355:9">if <condition pos:start="347:12" pos:end="347:59">(<expr pos:start="347:13" pos:end="347:58"><name pos:start="347:13" pos:end="347:22"><name pos:start="347:13" pos:end="347:16">ring</name><operator pos:start="347:17" pos:end="347:18">-&gt;</operator><name pos:start="347:19" pos:end="347:22">prod</name></name> <operator pos:start="347:24" pos:end="347:24">-</operator> <name pos:start="347:26" pos:end="347:35"><name pos:start="347:26" pos:end="347:29">ring</name><operator pos:start="347:30" pos:end="347:31">-&gt;</operator><name pos:start="347:32" pos:end="347:35">cons</name></name> <operator pos:start="347:37" pos:end="347:37">+</operator> <literal type="number" pos:start="347:39" pos:end="347:39">1</literal> <operator pos:start="347:41" pos:end="347:42">==</operator> <name pos:start="347:44" pos:end="347:58"><name pos:start="347:44" pos:end="347:47">ring</name><operator pos:start="347:48" pos:end="347:49">-&gt;</operator><name pos:start="347:50" pos:end="347:58">num_items</name></name></expr>)</condition> <block pos:start="347:61" pos:end="355:9">{<block_content pos:start="349:13" pos:end="353:40">

            <expr_stmt pos:start="349:13" pos:end="353:40"><expr pos:start="349:13" pos:end="353:39"><call pos:start="349:13" pos:end="353:39"><name pos:start="349:13" pos:end="349:19">fprintf</name><argument_list pos:start="349:20" pos:end="353:39">(<argument pos:start="349:21" pos:end="349:26"><expr pos:start="349:21" pos:end="349:26"><name pos:start="349:21" pos:end="349:26">stderr</name></expr></argument>,

                <argument pos:start="351:17" pos:end="351:64"><expr pos:start="351:17" pos:end="351:64"><literal type="string" pos:start="351:17" pos:end="351:64">"ERROR: no flush, full release ring [p%d,%dc]\n"</literal></expr></argument>,

                <argument pos:start="353:17" pos:end="353:26"><expr pos:start="353:17" pos:end="353:26"><name pos:start="353:17" pos:end="353:26"><name pos:start="353:17" pos:end="353:20">ring</name><operator pos:start="353:21" pos:end="353:22">-&gt;</operator><name pos:start="353:23" pos:end="353:26">prod</name></name></expr></argument>, <argument pos:start="353:29" pos:end="353:38"><expr pos:start="353:29" pos:end="353:38"><name pos:start="353:29" pos:end="353:38"><name pos:start="353:29" pos:end="353:32">ring</name><operator pos:start="353:33" pos:end="353:34">-&gt;</operator><name pos:start="353:35" pos:end="353:38">cons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="357:9" pos:end="357:44"><expr pos:start="357:9" pos:end="357:43"><call pos:start="357:9" pos:end="357:43"><name pos:start="357:9" pos:end="357:25">qxl_push_free_res</name><argument_list pos:start="357:26" pos:end="357:43">(<argument pos:start="357:27" pos:end="357:27"><expr pos:start="357:27" pos:end="357:27"><name pos:start="357:27" pos:end="357:27">d</name></expr></argument>, <argument pos:start="357:30" pos:end="357:30"><expr pos:start="357:30" pos:end="357:30"><literal type="number" pos:start="357:30" pos:end="357:30">1</literal></expr></argument> <comment type="block" pos:start="357:32" pos:end="357:42">/* flush */</comment>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="359:9" pos:end="363:46"><expr pos:start="359:9" pos:end="363:45"><call pos:start="359:9" pos:end="363:45"><name pos:start="359:9" pos:end="359:14">dprint</name><argument_list pos:start="359:15" pos:end="363:45">(<argument pos:start="359:16" pos:end="359:16"><expr pos:start="359:16" pos:end="359:16"><name pos:start="359:16" pos:end="359:16">d</name></expr></argument>, <argument pos:start="359:19" pos:end="359:19"><expr pos:start="359:19" pos:end="359:19"><literal type="number" pos:start="359:19" pos:end="359:19">1</literal></expr></argument>, <argument pos:start="359:22" pos:end="359:74"><expr pos:start="359:22" pos:end="359:74"><literal type="string" pos:start="359:22" pos:end="359:74">"QXL_IO_FLUSH_RELEASE exit (%s, s#=%d, res#=%d,%p)\n"</literal></expr></argument>,

            <argument pos:start="361:13" pos:end="361:39"><expr pos:start="361:13" pos:end="361:39"><call pos:start="361:13" pos:end="361:39"><name pos:start="361:13" pos:end="361:30">qxl_mode_to_string</name><argument_list pos:start="361:31" pos:end="361:39">(<argument pos:start="361:32" pos:end="361:38"><expr pos:start="361:32" pos:end="361:38"><name pos:start="361:32" pos:end="361:38"><name pos:start="361:32" pos:end="361:32">d</name><operator pos:start="361:33" pos:end="361:34">-&gt;</operator><name pos:start="361:35" pos:end="361:38">mode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="361:42" pos:end="361:64"><expr pos:start="361:42" pos:end="361:64"><name pos:start="361:42" pos:end="361:64"><name pos:start="361:42" pos:end="361:42">d</name><operator pos:start="361:43" pos:end="361:44">-&gt;</operator><name pos:start="361:45" pos:end="361:58">guest_surfaces</name><operator pos:start="361:59" pos:end="361:59">.</operator><name pos:start="361:60" pos:end="361:64">count</name></name></expr></argument>,

            <argument pos:start="363:13" pos:end="363:27"><expr pos:start="363:13" pos:end="363:27"><name pos:start="363:13" pos:end="363:27"><name pos:start="363:13" pos:end="363:13">d</name><operator pos:start="363:14" pos:end="363:15">-&gt;</operator><name pos:start="363:16" pos:end="363:27">num_free_res</name></name></expr></argument>, <argument pos:start="363:30" pos:end="363:44"><expr pos:start="363:30" pos:end="363:44"><name pos:start="363:30" pos:end="363:44"><name pos:start="363:30" pos:end="363:30">d</name><operator pos:start="363:31" pos:end="363:32">-&gt;</operator><name pos:start="363:33" pos:end="363:44">last_release</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="365:9" pos:end="365:14">break;</break>

    </block_content>}</block>

    <case pos:start="369:5" pos:end="369:37">case <expr pos:start="369:10" pos:end="369:36"><name pos:start="369:10" pos:end="369:36">QXL_IO_FLUSH_SURFACES_ASYNC</name></expr>:</case>

        <expr_stmt pos:start="371:9" pos:end="377:32"><expr pos:start="371:9" pos:end="377:31"><call pos:start="371:9" pos:end="377:31"><name pos:start="371:9" pos:end="371:14">dprint</name><argument_list pos:start="371:15" pos:end="377:31">(<argument pos:start="371:16" pos:end="371:16"><expr pos:start="371:16" pos:end="371:16"><name pos:start="371:16" pos:end="371:16">d</name></expr></argument>, <argument pos:start="371:19" pos:end="371:19"><expr pos:start="371:19" pos:end="371:19"><literal type="number" pos:start="371:19" pos:end="371:19">1</literal></expr></argument>, <argument pos:start="371:22" pos:end="373:58"><expr pos:start="371:22" pos:end="373:58"><literal type="string" pos:start="371:22" pos:end="371:50">"QXL_IO_FLUSH_SURFACES_ASYNC"</literal>

                     <literal type="string" pos:start="373:22" pos:end="373:26">" (%"</literal><name pos:start="373:27" pos:end="373:32">PRId64</name><literal type="string" pos:start="373:33" pos:end="373:58">") (%s, s#=%d, res#=%d)\n"</literal></expr></argument>,

               <argument pos:start="375:16" pos:end="375:18"><expr pos:start="375:16" pos:end="375:18"><name pos:start="375:16" pos:end="375:18">val</name></expr></argument>, <argument pos:start="375:21" pos:end="375:47"><expr pos:start="375:21" pos:end="375:47"><call pos:start="375:21" pos:end="375:47"><name pos:start="375:21" pos:end="375:38">qxl_mode_to_string</name><argument_list pos:start="375:39" pos:end="375:47">(<argument pos:start="375:40" pos:end="375:46"><expr pos:start="375:40" pos:end="375:46"><name pos:start="375:40" pos:end="375:46"><name pos:start="375:40" pos:end="375:40">d</name><operator pos:start="375:41" pos:end="375:42">-&gt;</operator><name pos:start="375:43" pos:end="375:46">mode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="375:50" pos:end="375:72"><expr pos:start="375:50" pos:end="375:72"><name pos:start="375:50" pos:end="375:72"><name pos:start="375:50" pos:end="375:50">d</name><operator pos:start="375:51" pos:end="375:52">-&gt;</operator><name pos:start="375:53" pos:end="375:66">guest_surfaces</name><operator pos:start="375:67" pos:end="375:67">.</operator><name pos:start="375:68" pos:end="375:72">count</name></name></expr></argument>,

               <argument pos:start="377:16" pos:end="377:30"><expr pos:start="377:16" pos:end="377:30"><name pos:start="377:16" pos:end="377:30"><name pos:start="377:16" pos:end="377:16">d</name><operator pos:start="377:17" pos:end="377:18">-&gt;</operator><name pos:start="377:19" pos:end="377:30">num_free_res</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="379:9" pos:end="379:42"><expr pos:start="379:9" pos:end="379:41"><call pos:start="379:9" pos:end="379:41"><name pos:start="379:9" pos:end="379:38">qxl_spice_flush_surfaces_async</name><argument_list pos:start="379:39" pos:end="379:41">(<argument pos:start="379:40" pos:end="379:40"><expr pos:start="379:40" pos:end="379:40"><name pos:start="379:40" pos:end="379:40">d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="381:9" pos:end="384:0">break;</break>

<cpp:endif pos:start="383:1" pos:end="383:6">#<cpp:directive pos:start="383:2" pos:end="383:6">endif</cpp:directive></cpp:endif>

    <case pos:start="385:5" pos:end="385:37">case <expr pos:start="385:10" pos:end="385:36"><name pos:start="385:10" pos:end="385:36">QXL_IO_DESTROY_ALL_SURFACES</name></expr>:</case>

        <expr_stmt pos:start="387:9" pos:end="387:37"><expr pos:start="387:9" pos:end="387:36"><name pos:start="387:9" pos:end="387:15"><name pos:start="387:9" pos:end="387:9">d</name><operator pos:start="387:10" pos:end="387:11">-&gt;</operator><name pos:start="387:12" pos:end="387:15">mode</name></name> <operator pos:start="387:17" pos:end="387:17">=</operator> <name pos:start="387:19" pos:end="387:36">QXL_MODE_UNDEFINED</name></expr>;</expr_stmt>

        <expr_stmt pos:start="389:9" pos:end="389:45"><expr pos:start="389:9" pos:end="389:44"><call pos:start="389:9" pos:end="389:44"><name pos:start="389:9" pos:end="389:34">qxl_spice_destroy_surfaces</name><argument_list pos:start="389:35" pos:end="389:44">(<argument pos:start="389:36" pos:end="389:36"><expr pos:start="389:36" pos:end="389:36"><name pos:start="389:36" pos:end="389:36">d</name></expr></argument>, <argument pos:start="389:39" pos:end="389:43"><expr pos:start="389:39" pos:end="389:43"><name pos:start="389:39" pos:end="389:43">async</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="391:9" pos:end="391:14">break;</break>

    <default pos:start="393:5" pos:end="393:12">default:</default>

        <expr_stmt pos:start="395:9" pos:end="395:77"><expr pos:start="395:9" pos:end="395:76"><call pos:start="395:9" pos:end="395:76"><name pos:start="395:9" pos:end="395:15">fprintf</name><argument_list pos:start="395:16" pos:end="395:76">(<argument pos:start="395:17" pos:end="395:22"><expr pos:start="395:17" pos:end="395:22"><name pos:start="395:17" pos:end="395:22">stderr</name></expr></argument>, <argument pos:start="395:25" pos:end="395:52"><expr pos:start="395:25" pos:end="395:52"><literal type="string" pos:start="395:25" pos:end="395:52">"%s: ioport=0x%x, abort()\n"</literal></expr></argument>, <argument pos:start="395:55" pos:end="395:66"><expr pos:start="395:55" pos:end="395:66"><name pos:start="395:55" pos:end="395:66">__FUNCTION__</name></expr></argument>, <argument pos:start="395:69" pos:end="395:75"><expr pos:start="395:69" pos:end="395:75"><name pos:start="395:69" pos:end="395:75">io_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="397:9" pos:end="397:16"><expr pos:start="397:9" pos:end="397:15"><call pos:start="397:9" pos:end="397:15"><name pos:start="397:9" pos:end="397:13">abort</name><argument_list pos:start="397:14" pos:end="397:15">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>

    <return pos:start="401:5" pos:end="401:11">return;</return>

<label pos:start="403:1" pos:end="406:0"><name pos:start="403:1" pos:end="403:12">cancel_async</name>:</label>

<cpp:if pos:start="405:1" pos:end="405:34">#<cpp:directive pos:start="405:2" pos:end="405:3">if</cpp:directive> <expr pos:start="405:5" pos:end="405:34"><name pos:start="405:5" pos:end="405:29">SPICE_INTERFACE_QXL_MINOR</name> <operator pos:start="405:31" pos:end="405:32">&gt;=</operator> <literal type="number" pos:start="405:34" pos:end="405:34">1</literal></expr></cpp:if>

    <if_stmt pos:start="407:5" pos:end="420:0"><if pos:start="407:5" pos:end="420:0">if <condition pos:start="407:8" pos:end="407:14">(<expr pos:start="407:9" pos:end="407:13"><name pos:start="407:9" pos:end="407:13">async</name></expr>)</condition> <block pos:start="407:16" pos:end="420:0">{<block_content pos:start="409:9" pos:end="415:42">

        <expr_stmt pos:start="409:9" pos:end="409:49"><expr pos:start="409:9" pos:end="409:48"><call pos:start="409:9" pos:end="409:48"><name pos:start="409:9" pos:end="409:23">qxl_send_events</name><argument_list pos:start="409:24" pos:end="409:48">(<argument pos:start="409:25" pos:end="409:25"><expr pos:start="409:25" pos:end="409:25"><name pos:start="409:25" pos:end="409:25">d</name></expr></argument>, <argument pos:start="409:28" pos:end="409:47"><expr pos:start="409:28" pos:end="409:47"><name pos:start="409:28" pos:end="409:47">QXL_INTERRUPT_IO_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="411:9" pos:end="411:40"><expr pos:start="411:9" pos:end="411:39"><call pos:start="411:9" pos:end="411:39"><name pos:start="411:9" pos:end="411:23">qemu_mutex_lock</name><argument_list pos:start="411:24" pos:end="411:39">(<argument pos:start="411:25" pos:end="411:38"><expr pos:start="411:25" pos:end="411:38"><operator pos:start="411:25" pos:end="411:25">&amp;</operator><name pos:start="411:26" pos:end="411:38"><name pos:start="411:26" pos:end="411:26">d</name><operator pos:start="411:27" pos:end="411:28">-&gt;</operator><name pos:start="411:29" pos:end="411:38">async_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="413:9" pos:end="413:44"><expr pos:start="413:9" pos:end="413:43"><name pos:start="413:9" pos:end="413:24"><name pos:start="413:9" pos:end="413:9">d</name><operator pos:start="413:10" pos:end="413:11">-&gt;</operator><name pos:start="413:12" pos:end="413:24">current_async</name></name> <operator pos:start="413:26" pos:end="413:26">=</operator> <name pos:start="413:28" pos:end="413:43">QXL_UNDEFINED_IO</name></expr>;</expr_stmt>

        <expr_stmt pos:start="415:9" pos:end="415:42"><expr pos:start="415:9" pos:end="415:41"><call pos:start="415:9" pos:end="415:41"><name pos:start="415:9" pos:end="415:25">qemu_mutex_unlock</name><argument_list pos:start="415:26" pos:end="415:41">(<argument pos:start="415:27" pos:end="415:40"><expr pos:start="415:27" pos:end="415:40"><operator pos:start="415:27" pos:end="415:27">&amp;</operator><name pos:start="415:28" pos:end="415:40"><name pos:start="415:28" pos:end="415:28">d</name><operator pos:start="415:29" pos:end="415:30">-&gt;</operator><name pos:start="415:31" pos:end="415:40">async_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:else pos:start="419:1" pos:end="419:5">#<cpp:directive pos:start="419:2" pos:end="419:5">else</cpp:directive></cpp:else>

    <return pos:start="421:5" pos:end="424:0">return;</return>

<cpp:endif pos:start="423:1" pos:end="423:6">#<cpp:directive pos:start="423:2" pos:end="423:6">endif</cpp:directive></cpp:endif>

</block_content>}</block></function>
</unit>
