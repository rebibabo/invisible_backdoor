<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/15274.c" pos:tabs="8"><function pos:start="1:1" pos:end="126:1"><type pos:start="1:1" pos:end="1:23"><name pos:start="1:1" pos:end="1:3">int</name> <name pos:start="1:5" pos:end="1:23">attribute_align_arg</name></type> <name pos:start="1:25" pos:end="1:45">avcodec_encode_audio2</name><parameter_list pos:start="1:46" pos:end="4:66">(<parameter pos:start="1:47" pos:end="1:67"><decl pos:start="1:47" pos:end="1:67"><type pos:start="1:47" pos:end="1:67"><name pos:start="1:47" pos:end="1:60">AVCodecContext</name> <modifier pos:start="1:62" pos:end="1:62">*</modifier></type><name pos:start="1:63" pos:end="1:67">avctx</name></decl></parameter>,
                                              <parameter pos:start="2:47" pos:end="2:61"><decl pos:start="2:47" pos:end="2:61"><type pos:start="2:47" pos:end="2:61"><name pos:start="2:47" pos:end="2:54">AVPacket</name> <modifier pos:start="2:56" pos:end="2:56">*</modifier></type><name pos:start="2:57" pos:end="2:61">avpkt</name></decl></parameter>,
                                              <parameter pos:start="3:47" pos:end="3:66"><decl pos:start="3:47" pos:end="3:66"><type pos:start="3:47" pos:end="3:66"><specifier pos:start="3:47" pos:end="3:51">const</specifier> <name pos:start="3:53" pos:end="3:59">AVFrame</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:66">frame</name></decl></parameter>,
                                              <parameter pos:start="4:47" pos:end="4:65"><decl pos:start="4:47" pos:end="4:65"><type pos:start="4:47" pos:end="4:65"><name pos:start="4:47" pos:end="4:49">int</name> <modifier pos:start="4:51" pos:end="4:51">*</modifier></type><name pos:start="4:52" pos:end="4:65">got_packet_ptr</name></decl></parameter>)</parameter_list>
<block pos:start="5:1" pos:end="126:1">{<block_content pos:start="6:5" pos:end="125:15">
    <decl_stmt pos:start="6:5" pos:end="6:35"><decl pos:start="6:5" pos:end="6:34"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">AVFrame</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:27">extended_frame</name> <init pos:start="6:29" pos:end="6:34">= <expr pos:start="6:31" pos:end="6:34"><name pos:start="6:31" pos:end="6:34">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:33"><decl pos:start="7:5" pos:end="7:32"><type pos:start="7:5" pos:end="7:13"><name pos:start="7:5" pos:end="7:11">AVFrame</name> <modifier pos:start="7:13" pos:end="7:13">*</modifier></type><name pos:start="7:14" pos:end="7:25">padded_frame</name> <init pos:start="7:27" pos:end="7:32">= <expr pos:start="7:29" pos:end="7:32"><name pos:start="7:29" pos:end="7:32">NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:12"><decl pos:start="8:5" pos:end="8:11"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:11">ret</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:31"><decl pos:start="9:5" pos:end="9:30"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">AVPacket</name></type> <name pos:start="9:14" pos:end="9:21">user_pkt</name> <init pos:start="9:23" pos:end="9:30">= <expr pos:start="9:25" pos:end="9:30"><operator pos:start="9:25" pos:end="9:25">*</operator><name pos:start="9:26" pos:end="9:30">avpkt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:39"><decl pos:start="10:5" pos:end="10:38"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:21">needs_realloc</name> <init pos:start="10:23" pos:end="10:38">= <expr pos:start="10:25" pos:end="10:38"><operator pos:start="10:25" pos:end="10:25">!</operator><name pos:start="10:26" pos:end="10:38"><name pos:start="10:26" pos:end="10:33">user_pkt</name><operator pos:start="10:34" pos:end="10:34">.</operator><name pos:start="10:35" pos:end="10:38">data</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt pos:start="11:5" pos:end="11:24"><expr pos:start="11:5" pos:end="11:23"><operator pos:start="11:5" pos:end="11:5">*</operator><name pos:start="11:6" pos:end="11:19">got_packet_ptr</name> <operator pos:start="11:21" pos:end="11:21">=</operator> <literal type="number" pos:start="11:23" pos:end="11:23">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="12:5" pos:end="16:5"><if pos:start="12:5" pos:end="16:5">if <condition pos:start="12:8" pos:end="12:69">(<expr pos:start="12:9" pos:end="12:68"><operator pos:start="12:9" pos:end="12:9">!</operator><operator pos:start="12:10" pos:end="12:10">(</operator><name pos:start="12:11" pos:end="12:36"><name pos:start="12:11" pos:end="12:15">avctx</name><operator pos:start="12:16" pos:end="12:17">-&gt;</operator><name pos:start="12:18" pos:end="12:22">codec</name><operator pos:start="12:23" pos:end="12:24">-&gt;</operator><name pos:start="12:25" pos:end="12:36">capabilities</name></name> <operator pos:start="12:38" pos:end="12:38">&amp;</operator> <name pos:start="12:40" pos:end="12:57">AV_CODEC_CAP_DELAY</name><operator pos:start="12:58" pos:end="12:58">)</operator> <operator pos:start="12:60" pos:end="12:61">&amp;&amp;</operator> <operator pos:start="12:63" pos:end="12:63">!</operator><name pos:start="12:64" pos:end="12:68">frame</name></expr>)</condition> <block pos:start="12:71" pos:end="16:5">{<block_content pos:start="13:9" pos:end="15:17">
        <expr_stmt pos:start="13:9" pos:end="13:30"><expr pos:start="13:9" pos:end="13:29"><call pos:start="13:9" pos:end="13:29"><name pos:start="13:9" pos:end="13:22">av_free_packet</name><argument_list pos:start="13:23" pos:end="13:29">(<argument pos:start="13:24" pos:end="13:28"><expr pos:start="13:24" pos:end="13:28"><name pos:start="13:24" pos:end="13:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="14:9" pos:end="14:30"><expr pos:start="14:9" pos:end="14:29"><call pos:start="14:9" pos:end="14:29"><name pos:start="14:9" pos:end="14:22">av_init_packet</name><argument_list pos:start="14:23" pos:end="14:29">(<argument pos:start="14:24" pos:end="14:28"><expr pos:start="14:24" pos:end="14:28"><name pos:start="14:24" pos:end="14:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return pos:start="15:9" pos:end="15:17">return <expr pos:start="15:16" pos:end="15:16"><literal type="number" pos:start="15:16" pos:end="15:16">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="17:5" pos:end="17:51">/* ensure that extended_data is properly set */</comment>
    <if_stmt pos:start="18:5" pos:end="33:5"><if pos:start="18:5" pos:end="33:5">if <condition pos:start="18:8" pos:end="18:39">(<expr pos:start="18:9" pos:end="18:38"><name pos:start="18:9" pos:end="18:13">frame</name> <operator pos:start="18:15" pos:end="18:16">&amp;&amp;</operator> <operator pos:start="18:18" pos:end="18:18">!</operator><name pos:start="18:19" pos:end="18:38"><name pos:start="18:19" pos:end="18:23">frame</name><operator pos:start="18:24" pos:end="18:25">-&gt;</operator><name pos:start="18:26" pos:end="18:38">extended_data</name></name></expr>)</condition> <block pos:start="18:41" pos:end="33:5">{<block_content pos:start="19:9" pos:end="32:31">
        <if_stmt pos:start="19:9" pos:end="25:9"><if pos:start="19:9" pos:end="25:9">if <condition pos:start="19:12" pos:end="20:51">(<expr pos:start="19:13" pos:end="20:50"><call pos:start="19:13" pos:end="19:54"><name pos:start="19:13" pos:end="19:35">av_sample_fmt_is_planar</name><argument_list pos:start="19:36" pos:end="19:54">(<argument pos:start="19:37" pos:end="19:53"><expr pos:start="19:37" pos:end="19:53"><name pos:start="19:37" pos:end="19:53"><name pos:start="19:37" pos:end="19:41">avctx</name><operator pos:start="19:42" pos:end="19:43">-&gt;</operator><name pos:start="19:44" pos:end="19:53">sample_fmt</name></name></expr></argument>)</argument_list></call> <operator pos:start="19:56" pos:end="19:57">&amp;&amp;</operator>
            <name pos:start="20:13" pos:end="20:27"><name pos:start="20:13" pos:end="20:17">avctx</name><operator pos:start="20:18" pos:end="20:19">-&gt;</operator><name pos:start="20:20" pos:end="20:27">channels</name></name> <operator pos:start="20:29" pos:end="20:29">&gt;</operator> <name pos:start="20:31" pos:end="20:50">AV_NUM_DATA_POINTERS</name></expr>)</condition> <block pos:start="20:53" pos:end="25:9">{<block_content pos:start="21:13" pos:end="24:35">
            <expr_stmt pos:start="21:13" pos:end="23:41"><expr pos:start="21:13" pos:end="23:40"><call pos:start="21:13" pos:end="23:40"><name pos:start="21:13" pos:end="21:18">av_log</name><argument_list pos:start="21:19" pos:end="23:40">(<argument pos:start="21:20" pos:end="21:24"><expr pos:start="21:20" pos:end="21:24"><name pos:start="21:20" pos:end="21:24">avctx</name></expr></argument>, <argument pos:start="21:27" pos:end="21:38"><expr pos:start="21:27" pos:end="21:38"><name pos:start="21:27" pos:end="21:38">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="21:41" pos:end="22:101"><expr pos:start="21:41" pos:end="22:101"><literal type="string" pos:start="21:41" pos:end="21:78">"Encoding to a planar sample format, "</literal>
                                        <literal type="string" pos:start="22:41" pos:end="22:101">"with more than %d channels, but extended_data is not set.\n"</literal></expr></argument>,
                   <argument pos:start="23:20" pos:end="23:39"><expr pos:start="23:20" pos:end="23:39"><name pos:start="23:20" pos:end="23:39">AV_NUM_DATA_POINTERS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return pos:start="24:13" pos:end="24:35">return <expr pos:start="24:20" pos:end="24:34"><call pos:start="24:20" pos:end="24:34"><name pos:start="24:20" pos:end="24:26">AVERROR</name><argument_list pos:start="24:27" pos:end="24:34">(<argument pos:start="24:28" pos:end="24:33"><expr pos:start="24:28" pos:end="24:33"><name pos:start="24:28" pos:end="24:33">EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="26:9" pos:end="26:69"><expr pos:start="26:9" pos:end="26:68"><call pos:start="26:9" pos:end="26:68"><name pos:start="26:9" pos:end="26:14">av_log</name><argument_list pos:start="26:15" pos:end="26:68">(<argument pos:start="26:16" pos:end="26:20"><expr pos:start="26:16" pos:end="26:20"><name pos:start="26:16" pos:end="26:20">avctx</name></expr></argument>, <argument pos:start="26:23" pos:end="26:36"><expr pos:start="26:23" pos:end="26:36"><name pos:start="26:23" pos:end="26:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="26:39" pos:end="26:67"><expr pos:start="26:39" pos:end="26:67"><literal type="string" pos:start="26:39" pos:end="26:67">"extended_data is not set.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="27:9" pos:end="27:42"><expr pos:start="27:9" pos:end="27:41"><name pos:start="27:9" pos:end="27:22">extended_frame</name> <operator pos:start="27:24" pos:end="27:24">=</operator> <call pos:start="27:26" pos:end="27:41"><name pos:start="27:26" pos:end="27:39">av_frame_alloc</name><argument_list pos:start="27:40" pos:end="27:41">()</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="28:9" pos:end="29:35"><if pos:start="28:9" pos:end="29:35">if <condition pos:start="28:12" pos:end="28:28">(<expr pos:start="28:13" pos:end="28:27"><operator pos:start="28:13" pos:end="28:13">!</operator><name pos:start="28:14" pos:end="28:27">extended_frame</name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:35"><block_content pos:start="29:13" pos:end="29:35">
            <return pos:start="29:13" pos:end="29:35">return <expr pos:start="29:20" pos:end="29:34"><call pos:start="29:20" pos:end="29:34"><name pos:start="29:20" pos:end="29:26">AVERROR</name><argument_list pos:start="29:27" pos:end="29:34">(<argument pos:start="29:28" pos:end="29:33"><expr pos:start="29:28" pos:end="29:33"><name pos:start="29:28" pos:end="29:33">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt pos:start="30:9" pos:end="30:55"><expr pos:start="30:9" pos:end="30:54"><call pos:start="30:9" pos:end="30:54"><name pos:start="30:9" pos:end="30:14">memcpy</name><argument_list pos:start="30:15" pos:end="30:54">(<argument pos:start="30:16" pos:end="30:29"><expr pos:start="30:16" pos:end="30:29"><name pos:start="30:16" pos:end="30:29">extended_frame</name></expr></argument>, <argument pos:start="30:32" pos:end="30:36"><expr pos:start="30:32" pos:end="30:36"><name pos:start="30:32" pos:end="30:36">frame</name></expr></argument>, <argument pos:start="30:39" pos:end="30:53"><expr pos:start="30:39" pos:end="30:53"><sizeof pos:start="30:39" pos:end="30:53">sizeof<argument_list pos:start="30:45" pos:end="30:53">(<argument pos:start="30:46" pos:end="30:52"><expr pos:start="30:46" pos:end="30:52"><name pos:start="30:46" pos:end="30:52">AVFrame</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="31:9" pos:end="31:61"><expr pos:start="31:9" pos:end="31:60"><name pos:start="31:9" pos:end="31:37"><name pos:start="31:9" pos:end="31:22">extended_frame</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:37">extended_data</name></name> <operator pos:start="31:39" pos:end="31:39">=</operator> <name pos:start="31:41" pos:end="31:60"><name pos:start="31:41" pos:end="31:54">extended_frame</name><operator pos:start="31:55" pos:end="31:56">-&gt;</operator><name pos:start="31:57" pos:end="31:60">data</name></name></expr>;</expr_stmt>
        <expr_stmt pos:start="32:9" pos:end="32:31"><expr pos:start="32:9" pos:end="32:30"><name pos:start="32:9" pos:end="32:13">frame</name> <operator pos:start="32:15" pos:end="32:15">=</operator> <name pos:start="32:17" pos:end="32:30">extended_frame</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="34:5" pos:end="34:45">/* extract audio service type metadata */</comment>
    <if_stmt pos:start="35:5" pos:end="39:5"><if pos:start="35:5" pos:end="39:5">if <condition pos:start="35:8" pos:end="35:14">(<expr pos:start="35:9" pos:end="35:13"><name pos:start="35:9" pos:end="35:13">frame</name></expr>)</condition> <block pos:start="35:16" pos:end="39:5">{<block_content pos:start="36:9" pos:end="38:76">
        <decl_stmt pos:start="36:9" pos:end="36:94"><decl pos:start="36:9" pos:end="36:93"><type pos:start="36:9" pos:end="36:25"><name pos:start="36:9" pos:end="36:23">AVFrameSideData</name> <modifier pos:start="36:25" pos:end="36:25">*</modifier></type><name pos:start="36:26" pos:end="36:27">sd</name> <init pos:start="36:29" pos:end="36:93">= <expr pos:start="36:31" pos:end="36:93"><call pos:start="36:31" pos:end="36:93"><name pos:start="36:31" pos:end="36:52">av_frame_get_side_data</name><argument_list pos:start="36:53" pos:end="36:93">(<argument pos:start="36:54" pos:end="36:58"><expr pos:start="36:54" pos:end="36:58"><name pos:start="36:54" pos:end="36:58">frame</name></expr></argument>, <argument pos:start="36:61" pos:end="36:92"><expr pos:start="36:61" pos:end="36:92"><name pos:start="36:61" pos:end="36:92">AV_FRAME_DATA_AUDIO_SERVICE_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt pos:start="37:9" pos:end="38:76"><if pos:start="37:9" pos:end="38:76">if <condition pos:start="37:12" pos:end="37:62">(<expr pos:start="37:13" pos:end="37:61"><name pos:start="37:13" pos:end="37:14">sd</name> <operator pos:start="37:16" pos:end="37:17">&amp;&amp;</operator> <name pos:start="37:19" pos:end="37:26"><name pos:start="37:19" pos:end="37:20">sd</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:26">size</name></name> <operator pos:start="37:28" pos:end="37:29">&gt;=</operator> <sizeof pos:start="37:31" pos:end="37:61">sizeof<argument_list pos:start="37:37" pos:end="37:61">(<argument pos:start="37:38" pos:end="37:60"><expr pos:start="37:38" pos:end="37:60">enum <name pos:start="37:43" pos:end="37:60">AVAudioServiceType</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo" pos:start="38:13" pos:end="38:76"><block_content pos:start="38:13" pos:end="38:76">
            <expr_stmt pos:start="38:13" pos:end="38:76"><expr pos:start="38:13" pos:end="38:75"><name pos:start="38:13" pos:end="38:37"><name pos:start="38:13" pos:end="38:17">avctx</name><operator pos:start="38:18" pos:end="38:19">-&gt;</operator><name pos:start="38:20" pos:end="38:37">audio_service_type</name></name> <operator pos:start="38:39" pos:end="38:39">=</operator> <operator pos:start="38:41" pos:end="38:41">*</operator><operator pos:start="38:42" pos:end="38:42">(</operator>enum <name pos:start="38:48" pos:end="38:65">AVAudioServiceType</name><operator pos:start="38:66" pos:end="38:66">*</operator><operator pos:start="38:67" pos:end="38:67">)</operator><name pos:start="38:68" pos:end="38:75"><name pos:start="38:68" pos:end="38:69">sd</name><operator pos:start="38:70" pos:end="38:71">-&gt;</operator><name pos:start="38:72" pos:end="38:75">data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="40:5" pos:end="40:36">/* check for valid frame size */</comment>
    <if_stmt pos:start="41:5" pos:end="63:5"><if pos:start="41:5" pos:end="63:5">if <condition pos:start="41:8" pos:end="41:14">(<expr pos:start="41:9" pos:end="41:13"><name pos:start="41:9" pos:end="41:13">frame</name></expr>)</condition> <block pos:start="41:16" pos:end="63:5">{<block_content pos:start="42:9" pos:end="62:9">
        <if_stmt pos:start="42:9" pos:end="62:9"><if pos:start="42:9" pos:end="48:9">if <condition pos:start="42:12" pos:end="42:71">(<expr pos:start="42:13" pos:end="42:70"><name pos:start="42:13" pos:end="42:38"><name pos:start="42:13" pos:end="42:17">avctx</name><operator pos:start="42:18" pos:end="42:19">-&gt;</operator><name pos:start="42:20" pos:end="42:24">codec</name><operator pos:start="42:25" pos:end="42:26">-&gt;</operator><name pos:start="42:27" pos:end="42:38">capabilities</name></name> <operator pos:start="42:40" pos:end="42:40">&amp;</operator> <name pos:start="42:42" pos:end="42:70">AV_CODEC_CAP_SMALL_LAST_FRAME</name></expr>)</condition> <block pos:start="42:73" pos:end="48:9">{<block_content pos:start="43:13" pos:end="47:13">
            <if_stmt pos:start="43:13" pos:end="47:13"><if pos:start="43:13" pos:end="47:13">if <condition pos:start="43:16" pos:end="43:54">(<expr pos:start="43:17" pos:end="43:53"><name pos:start="43:17" pos:end="43:33"><name pos:start="43:17" pos:end="43:21">frame</name><operator pos:start="43:22" pos:end="43:23">-&gt;</operator><name pos:start="43:24" pos:end="43:33">nb_samples</name></name> <operator pos:start="43:35" pos:end="43:35">&gt;</operator> <name pos:start="43:37" pos:end="43:53"><name pos:start="43:37" pos:end="43:41">avctx</name><operator pos:start="43:42" pos:end="43:43">-&gt;</operator><name pos:start="43:44" pos:end="43:53">frame_size</name></name></expr>)</condition> <block pos:start="43:56" pos:end="47:13">{<block_content pos:start="44:17" pos:end="46:25">
                <expr_stmt pos:start="44:17" pos:end="44:102"><expr pos:start="44:17" pos:end="44:101"><call pos:start="44:17" pos:end="44:101"><name pos:start="44:17" pos:end="44:22">av_log</name><argument_list pos:start="44:23" pos:end="44:101">(<argument pos:start="44:24" pos:end="44:28"><expr pos:start="44:24" pos:end="44:28"><name pos:start="44:24" pos:end="44:28">avctx</name></expr></argument>, <argument pos:start="44:31" pos:end="44:42"><expr pos:start="44:31" pos:end="44:42"><name pos:start="44:31" pos:end="44:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="44:45" pos:end="44:100"><expr pos:start="44:45" pos:end="44:100"><literal type="string" pos:start="44:45" pos:end="44:100">"more samples than frame size (avcodec_encode_audio2)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="45:17" pos:end="45:38"><expr pos:start="45:17" pos:end="45:37"><name pos:start="45:17" pos:end="45:19">ret</name> <operator pos:start="45:21" pos:end="45:21">=</operator> <call pos:start="45:23" pos:end="45:37"><name pos:start="45:23" pos:end="45:29">AVERROR</name><argument_list pos:start="45:30" pos:end="45:37">(<argument pos:start="45:31" pos:end="45:36"><expr pos:start="45:31" pos:end="45:36"><name pos:start="45:31" pos:end="45:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="46:17" pos:end="46:25">goto <name pos:start="46:22" pos:end="46:24">end</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="48:11" pos:end="62:9">else if <condition pos:start="48:19" pos:end="48:84">(<expr pos:start="48:20" pos:end="48:83"><operator pos:start="48:20" pos:end="48:20">!</operator><operator pos:start="48:21" pos:end="48:21">(</operator><name pos:start="48:22" pos:end="48:47"><name pos:start="48:22" pos:end="48:26">avctx</name><operator pos:start="48:27" pos:end="48:28">-&gt;</operator><name pos:start="48:29" pos:end="48:33">codec</name><operator pos:start="48:34" pos:end="48:35">-&gt;</operator><name pos:start="48:36" pos:end="48:47">capabilities</name></name> <operator pos:start="48:49" pos:end="48:49">&amp;</operator> <name pos:start="48:51" pos:end="48:82">AV_CODEC_CAP_VARIABLE_FRAME_SIZE</name><operator pos:start="48:83" pos:end="48:83">)</operator></expr>)</condition> <block pos:start="48:86" pos:end="62:9">{<block_content pos:start="49:13" pos:end="61:13">
            <if_stmt pos:start="49:13" pos:end="56:13"><if pos:start="49:13" pos:end="56:13">if <condition pos:start="49:16" pos:end="50:51">(<expr pos:start="49:17" pos:end="50:50"><name pos:start="49:17" pos:end="49:33"><name pos:start="49:17" pos:end="49:21">frame</name><operator pos:start="49:22" pos:end="49:23">-&gt;</operator><name pos:start="49:24" pos:end="49:33">nb_samples</name></name> <operator pos:start="49:35" pos:end="49:35">&lt;</operator> <name pos:start="49:37" pos:end="49:53"><name pos:start="49:37" pos:end="49:41">avctx</name><operator pos:start="49:42" pos:end="49:43">-&gt;</operator><name pos:start="49:44" pos:end="49:53">frame_size</name></name> <operator pos:start="49:55" pos:end="49:56">&amp;&amp;</operator>
                <operator pos:start="50:17" pos:end="50:17">!</operator><name pos:start="50:18" pos:end="50:50"><name pos:start="50:18" pos:end="50:22">avctx</name><operator pos:start="50:23" pos:end="50:24">-&gt;</operator><name pos:start="50:25" pos:end="50:32">internal</name><operator pos:start="50:33" pos:end="50:34">-&gt;</operator><name pos:start="50:35" pos:end="50:50">last_audio_frame</name></name></expr>)</condition> <block pos:start="50:53" pos:end="56:13">{<block_content pos:start="51:17" pos:end="55:54">
                <expr_stmt pos:start="51:17" pos:end="51:66"><expr pos:start="51:17" pos:end="51:65"><name pos:start="51:17" pos:end="51:19">ret</name> <operator pos:start="51:21" pos:end="51:21">=</operator> <call pos:start="51:23" pos:end="51:65"><name pos:start="51:23" pos:end="51:36">pad_last_frame</name><argument_list pos:start="51:37" pos:end="51:65">(<argument pos:start="51:38" pos:end="51:42"><expr pos:start="51:38" pos:end="51:42"><name pos:start="51:38" pos:end="51:42">avctx</name></expr></argument>, <argument pos:start="51:45" pos:end="51:57"><expr pos:start="51:45" pos:end="51:57"><operator pos:start="51:45" pos:end="51:45">&amp;</operator><name pos:start="51:46" pos:end="51:57">padded_frame</name></expr></argument>, <argument pos:start="51:60" pos:end="51:64"><expr pos:start="51:60" pos:end="51:64"><name pos:start="51:60" pos:end="51:64">frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt pos:start="52:17" pos:end="53:29"><if pos:start="52:17" pos:end="53:29">if <condition pos:start="52:20" pos:end="52:28">(<expr pos:start="52:21" pos:end="52:27"><name pos:start="52:21" pos:end="52:23">ret</name> <operator pos:start="52:25" pos:end="52:25">&lt;</operator> <literal type="number" pos:start="52:27" pos:end="52:27">0</literal></expr>)</condition><block type="pseudo" pos:start="53:21" pos:end="53:29"><block_content pos:start="53:21" pos:end="53:29">
                    <goto pos:start="53:21" pos:end="53:29">goto <name pos:start="53:26" pos:end="53:28">end</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt pos:start="54:17" pos:end="54:37"><expr pos:start="54:17" pos:end="54:36"><name pos:start="54:17" pos:end="54:21">frame</name> <operator pos:start="54:23" pos:end="54:23">=</operator> <name pos:start="54:25" pos:end="54:36">padded_frame</name></expr>;</expr_stmt>
                <expr_stmt pos:start="55:17" pos:end="55:54"><expr pos:start="55:17" pos:end="55:53"><name pos:start="55:17" pos:end="55:49"><name pos:start="55:17" pos:end="55:21">avctx</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:31">internal</name><operator pos:start="55:32" pos:end="55:33">-&gt;</operator><name pos:start="55:34" pos:end="55:49">last_audio_frame</name></name> <operator pos:start="55:51" pos:end="55:51">=</operator> <literal type="number" pos:start="55:53" pos:end="55:53">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt pos:start="57:13" pos:end="61:13"><if pos:start="57:13" pos:end="61:13">if <condition pos:start="57:16" pos:end="57:55">(<expr pos:start="57:17" pos:end="57:54"><name pos:start="57:17" pos:end="57:33"><name pos:start="57:17" pos:end="57:21">frame</name><operator pos:start="57:22" pos:end="57:23">-&gt;</operator><name pos:start="57:24" pos:end="57:33">nb_samples</name></name> <operator pos:start="57:35" pos:end="57:36">!=</operator> <name pos:start="57:38" pos:end="57:54"><name pos:start="57:38" pos:end="57:42">avctx</name><operator pos:start="57:43" pos:end="57:44">-&gt;</operator><name pos:start="57:45" pos:end="57:54">frame_size</name></name></expr>)</condition> <block pos:start="57:57" pos:end="61:13">{<block_content pos:start="58:17" pos:end="60:25">
                <expr_stmt pos:start="58:17" pos:end="58:146"><expr pos:start="58:17" pos:end="58:145"><call pos:start="58:17" pos:end="58:145"><name pos:start="58:17" pos:end="58:22">av_log</name><argument_list pos:start="58:23" pos:end="58:145">(<argument pos:start="58:24" pos:end="58:28"><expr pos:start="58:24" pos:end="58:28"><name pos:start="58:24" pos:end="58:28">avctx</name></expr></argument>, <argument pos:start="58:31" pos:end="58:42"><expr pos:start="58:31" pos:end="58:42"><name pos:start="58:31" pos:end="58:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="58:45" pos:end="58:106"><expr pos:start="58:45" pos:end="58:106"><literal type="string" pos:start="58:45" pos:end="58:106">"nb_samples (%d) != frame_size (%d) (avcodec_encode_audio2)\n"</literal></expr></argument>, <argument pos:start="58:109" pos:end="58:125"><expr pos:start="58:109" pos:end="58:125"><name pos:start="58:109" pos:end="58:125"><name pos:start="58:109" pos:end="58:113">frame</name><operator pos:start="58:114" pos:end="58:115">-&gt;</operator><name pos:start="58:116" pos:end="58:125">nb_samples</name></name></expr></argument>, <argument pos:start="58:128" pos:end="58:144"><expr pos:start="58:128" pos:end="58:144"><name pos:start="58:128" pos:end="58:144"><name pos:start="58:128" pos:end="58:132">avctx</name><operator pos:start="58:133" pos:end="58:134">-&gt;</operator><name pos:start="58:135" pos:end="58:144">frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="59:17" pos:end="59:38"><expr pos:start="59:17" pos:end="59:37"><name pos:start="59:17" pos:end="59:19">ret</name> <operator pos:start="59:21" pos:end="59:21">=</operator> <call pos:start="59:23" pos:end="59:37"><name pos:start="59:23" pos:end="59:29">AVERROR</name><argument_list pos:start="59:30" pos:end="59:37">(<argument pos:start="59:31" pos:end="59:36"><expr pos:start="59:31" pos:end="59:36"><name pos:start="59:31" pos:end="59:36">EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto pos:start="60:17" pos:end="60:25">goto <name pos:start="60:22" pos:end="60:24">end</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt pos:start="64:5" pos:end="64:69"><expr pos:start="64:5" pos:end="64:68"><name pos:start="64:5" pos:end="64:7">ret</name> <operator pos:start="64:9" pos:end="64:9">=</operator> <call pos:start="64:11" pos:end="64:68"><name pos:start="64:11" pos:end="64:31"><name pos:start="64:11" pos:end="64:15">avctx</name><operator pos:start="64:16" pos:end="64:17">-&gt;</operator><name pos:start="64:18" pos:end="64:22">codec</name><operator pos:start="64:23" pos:end="64:24">-&gt;</operator><name pos:start="64:25" pos:end="64:31">encode2</name></name><argument_list pos:start="64:32" pos:end="64:68">(<argument pos:start="64:33" pos:end="64:37"><expr pos:start="64:33" pos:end="64:37"><name pos:start="64:33" pos:end="64:37">avctx</name></expr></argument>, <argument pos:start="64:40" pos:end="64:44"><expr pos:start="64:40" pos:end="64:44"><name pos:start="64:40" pos:end="64:44">avpkt</name></expr></argument>, <argument pos:start="64:47" pos:end="64:51"><expr pos:start="64:47" pos:end="64:51"><name pos:start="64:47" pos:end="64:51">frame</name></expr></argument>, <argument pos:start="64:54" pos:end="64:67"><expr pos:start="64:54" pos:end="64:67"><name pos:start="64:54" pos:end="64:67">got_packet_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt pos:start="65:5" pos:end="78:5"><if pos:start="65:5" pos:end="78:5">if <condition pos:start="65:8" pos:end="65:13">(<expr pos:start="65:9" pos:end="65:12"><operator pos:start="65:9" pos:end="65:9">!</operator><name pos:start="65:10" pos:end="65:12">ret</name></expr>)</condition> <block pos:start="65:15" pos:end="78:5">{<block_content pos:start="66:9" pos:end="77:9">
        <if_stmt pos:start="66:9" pos:end="77:9"><if pos:start="66:9" pos:end="75:9">if <condition pos:start="66:12" pos:end="66:28">(<expr pos:start="66:13" pos:end="66:27"><operator pos:start="66:13" pos:end="66:13">*</operator><name pos:start="66:14" pos:end="66:27">got_packet_ptr</name></expr>)</condition> <block pos:start="66:30" pos:end="75:9">{<block_content pos:start="67:13" pos:end="74:36">
            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:67">(<expr pos:start="67:17" pos:end="67:66"><operator pos:start="67:17" pos:end="67:17">!</operator><operator pos:start="67:18" pos:end="67:18">(</operator><name pos:start="67:19" pos:end="67:44"><name pos:start="67:19" pos:end="67:23">avctx</name><operator pos:start="67:24" pos:end="67:25">-&gt;</operator><name pos:start="67:26" pos:end="67:30">codec</name><operator pos:start="67:31" pos:end="67:32">-&gt;</operator><name pos:start="67:33" pos:end="67:44">capabilities</name></name> <operator pos:start="67:46" pos:end="67:46">&amp;</operator> <name pos:start="67:48" pos:end="67:65">AV_CODEC_CAP_DELAY</name><operator pos:start="67:66" pos:end="67:66">)</operator></expr>)</condition> <block pos:start="67:69" pos:end="73:13">{<block_content pos:start="68:17" pos:end="72:81">
                <if_stmt pos:start="68:17" pos:end="69:44"><if pos:start="68:17" pos:end="69:44">if <condition pos:start="68:20" pos:end="68:49">(<expr pos:start="68:21" pos:end="68:48"><name pos:start="68:21" pos:end="68:30"><name pos:start="68:21" pos:end="68:25">avpkt</name><operator pos:start="68:26" pos:end="68:27">-&gt;</operator><name pos:start="68:28" pos:end="68:30">pts</name></name> <operator pos:start="68:32" pos:end="68:33">==</operator> <name pos:start="68:35" pos:end="68:48">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="69:21" pos:end="69:44"><block_content pos:start="69:21" pos:end="69:44">
                    <expr_stmt pos:start="69:21" pos:end="69:44"><expr pos:start="69:21" pos:end="69:43"><name pos:start="69:21" pos:end="69:30"><name pos:start="69:21" pos:end="69:25">avpkt</name><operator pos:start="69:26" pos:end="69:27">-&gt;</operator><name pos:start="69:28" pos:end="69:30">pts</name></name> <operator pos:start="69:32" pos:end="69:32">=</operator> <name pos:start="69:34" pos:end="69:43"><name pos:start="69:34" pos:end="69:38">frame</name><operator pos:start="69:39" pos:end="69:40">-&gt;</operator><name pos:start="69:41" pos:end="69:43">pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt pos:start="70:17" pos:end="72:81"><if pos:start="70:17" pos:end="72:81">if <condition pos:start="70:20" pos:end="70:37">(<expr pos:start="70:21" pos:end="70:36"><operator pos:start="70:21" pos:end="70:21">!</operator><name pos:start="70:22" pos:end="70:36"><name pos:start="70:22" pos:end="70:26">avpkt</name><operator pos:start="70:27" pos:end="70:28">-&gt;</operator><name pos:start="70:29" pos:end="70:36">duration</name></name></expr>)</condition><block type="pseudo" pos:start="71:21" pos:end="72:81"><block_content pos:start="71:21" pos:end="72:81">
                    <expr_stmt pos:start="71:21" pos:end="72:81"><expr pos:start="71:21" pos:end="72:80"><name pos:start="71:21" pos:end="71:35"><name pos:start="71:21" pos:end="71:25">avpkt</name><operator pos:start="71:26" pos:end="71:27">-&gt;</operator><name pos:start="71:28" pos:end="71:35">duration</name></name> <operator pos:start="71:37" pos:end="71:37">=</operator> <call pos:start="71:39" pos:end="72:80"><name pos:start="71:39" pos:end="71:61">ff_samples_to_time_base</name><argument_list pos:start="71:62" pos:end="72:80">(<argument pos:start="71:63" pos:end="71:67"><expr pos:start="71:63" pos:end="71:67"><name pos:start="71:63" pos:end="71:67">avctx</name></expr></argument>,
                                                              <argument pos:start="72:63" pos:end="72:79"><expr pos:start="72:63" pos:end="72:79"><name pos:start="72:63" pos:end="72:79"><name pos:start="72:63" pos:end="72:67">frame</name><operator pos:start="72:68" pos:end="72:69">-&gt;</operator><name pos:start="72:70" pos:end="72:79">nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt pos:start="74:13" pos:end="74:36"><expr pos:start="74:13" pos:end="74:35"><name pos:start="74:13" pos:end="74:22"><name pos:start="74:13" pos:end="74:17">avpkt</name><operator pos:start="74:18" pos:end="74:19">-&gt;</operator><name pos:start="74:20" pos:end="74:22">dts</name></name> <operator pos:start="74:24" pos:end="74:24">=</operator> <name pos:start="74:26" pos:end="74:35"><name pos:start="74:26" pos:end="74:30">avpkt</name><operator pos:start="74:31" pos:end="74:32">-&gt;</operator><name pos:start="74:33" pos:end="74:35">pts</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="75:11" pos:end="77:9">else <block pos:start="75:16" pos:end="77:9">{<block_content pos:start="76:13" pos:end="76:28">
            <expr_stmt pos:start="76:13" pos:end="76:28"><expr pos:start="76:13" pos:end="76:27"><name pos:start="76:13" pos:end="76:23"><name pos:start="76:13" pos:end="76:17">avpkt</name><operator pos:start="76:18" pos:end="76:19">-&gt;</operator><name pos:start="76:20" pos:end="76:23">size</name></name> <operator pos:start="76:25" pos:end="76:25">=</operator> <literal type="number" pos:start="76:27" pos:end="76:27">0</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="79:5" pos:end="101:5"><if pos:start="79:5" pos:end="101:5">if <condition pos:start="79:8" pos:end="79:67">(<expr pos:start="79:9" pos:end="79:66"><name pos:start="79:9" pos:end="79:19"><name pos:start="79:9" pos:end="79:13">avpkt</name><operator pos:start="79:14" pos:end="79:15">-&gt;</operator><name pos:start="79:16" pos:end="79:19">data</name></name> <operator pos:start="79:21" pos:end="79:22">&amp;&amp;</operator> <name pos:start="79:24" pos:end="79:34"><name pos:start="79:24" pos:end="79:28">avpkt</name><operator pos:start="79:29" pos:end="79:30">-&gt;</operator><name pos:start="79:31" pos:end="79:34">data</name></name> <operator pos:start="79:36" pos:end="79:37">==</operator> <name pos:start="79:39" pos:end="79:66"><name pos:start="79:39" pos:end="79:43">avctx</name><operator pos:start="79:44" pos:end="79:45">-&gt;</operator><name pos:start="79:46" pos:end="79:53">internal</name><operator pos:start="79:54" pos:end="79:55">-&gt;</operator><name pos:start="79:56" pos:end="79:66">byte_buffer</name></name></expr>)</condition> <block pos:start="79:69" pos:end="101:5">{<block_content pos:start="80:9" pos:end="100:9">
        <expr_stmt pos:start="80:9" pos:end="80:26"><expr pos:start="80:9" pos:end="80:25"><name pos:start="80:9" pos:end="80:21">needs_realloc</name> <operator pos:start="80:23" pos:end="80:23">=</operator> <literal type="number" pos:start="80:25" pos:end="80:25">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="81:9" pos:end="100:9"><if pos:start="81:9" pos:end="96:9">if <condition pos:start="81:12" pos:end="81:26">(<expr pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:25"><name pos:start="81:13" pos:end="81:20">user_pkt</name><operator pos:start="81:21" pos:end="81:21">.</operator><name pos:start="81:22" pos:end="81:25">data</name></name></expr>)</condition> <block pos:start="81:28" pos:end="96:9">{<block_content pos:start="82:13" pos:end="96:0">
            <if_stmt pos:start="82:13" pos:end="88:13"><if pos:start="82:13" pos:end="84:13">if <condition pos:start="82:16" pos:end="82:45">(<expr pos:start="82:17" pos:end="82:44"><name pos:start="82:17" pos:end="82:29"><name pos:start="82:17" pos:end="82:24">user_pkt</name><operator pos:start="82:25" pos:end="82:25">.</operator><name pos:start="82:26" pos:end="82:29">size</name></name> <operator pos:start="82:31" pos:end="82:32">&gt;=</operator> <name pos:start="82:34" pos:end="82:44"><name pos:start="82:34" pos:end="82:38">avpkt</name><operator pos:start="82:39" pos:end="82:40">-&gt;</operator><name pos:start="82:41" pos:end="82:44">size</name></name></expr>)</condition> <block pos:start="82:47" pos:end="84:13">{<block_content pos:start="83:17" pos:end="83:64">
                <expr_stmt pos:start="83:17" pos:end="83:64"><expr pos:start="83:17" pos:end="83:63"><call pos:start="83:17" pos:end="83:63"><name pos:start="83:17" pos:end="83:22">memcpy</name><argument_list pos:start="83:23" pos:end="83:63">(<argument pos:start="83:24" pos:end="83:36"><expr pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:36"><name pos:start="83:24" pos:end="83:31">user_pkt</name><operator pos:start="83:32" pos:end="83:32">.</operator><name pos:start="83:33" pos:end="83:36">data</name></name></expr></argument>, <argument pos:start="83:39" pos:end="83:49"><expr pos:start="83:39" pos:end="83:49"><name pos:start="83:39" pos:end="83:49"><name pos:start="83:39" pos:end="83:43">avpkt</name><operator pos:start="83:44" pos:end="83:45">-&gt;</operator><name pos:start="83:46" pos:end="83:49">data</name></name></expr></argument>, <argument pos:start="83:52" pos:end="83:62"><expr pos:start="83:52" pos:end="83:62"><name pos:start="83:52" pos:end="83:62"><name pos:start="83:52" pos:end="83:56">avpkt</name><operator pos:start="83:57" pos:end="83:58">-&gt;</operator><name pos:start="83:59" pos:end="83:62">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="84:15" pos:end="88:13">else <block pos:start="84:20" pos:end="88:13">{<block_content pos:start="85:17" pos:end="87:25">
                <expr_stmt pos:start="85:17" pos:end="85:107"><expr pos:start="85:17" pos:end="85:106"><call pos:start="85:17" pos:end="85:106"><name pos:start="85:17" pos:end="85:22">av_log</name><argument_list pos:start="85:23" pos:end="85:106">(<argument pos:start="85:24" pos:end="85:28"><expr pos:start="85:24" pos:end="85:28"><name pos:start="85:24" pos:end="85:28">avctx</name></expr></argument>, <argument pos:start="85:31" pos:end="85:42"><expr pos:start="85:31" pos:end="85:42"><name pos:start="85:31" pos:end="85:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="85:45" pos:end="85:92"><expr pos:start="85:45" pos:end="85:92"><literal type="string" pos:start="85:45" pos:end="85:92">"Provided packet is too small, needs to be %d\n"</literal></expr></argument>, <argument pos:start="85:95" pos:end="85:105"><expr pos:start="85:95" pos:end="85:105"><name pos:start="85:95" pos:end="85:105"><name pos:start="85:95" pos:end="85:99">avpkt</name><operator pos:start="85:100" pos:end="85:101">-&gt;</operator><name pos:start="85:102" pos:end="85:105">size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="86:17" pos:end="86:44"><expr pos:start="86:17" pos:end="86:43"><name pos:start="86:17" pos:end="86:27"><name pos:start="86:17" pos:end="86:21">avpkt</name><operator pos:start="86:22" pos:end="86:23">-&gt;</operator><name pos:start="86:24" pos:end="86:27">size</name></name> <operator pos:start="86:29" pos:end="86:29">=</operator> <name pos:start="86:31" pos:end="86:43"><name pos:start="86:31" pos:end="86:38">user_pkt</name><operator pos:start="86:39" pos:end="86:39">.</operator><name pos:start="86:40" pos:end="86:43">size</name></name></expr>;</expr_stmt>
                <expr_stmt pos:start="87:17" pos:end="87:25"><expr pos:start="87:17" pos:end="87:24"><name pos:start="87:17" pos:end="87:19">ret</name> <operator pos:start="87:21" pos:end="87:21">=</operator> <operator pos:start="87:23" pos:end="87:23">-</operator><literal type="number" pos:start="87:24" pos:end="87:24">1</literal></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt pos:start="89:13" pos:end="89:43"><expr pos:start="89:13" pos:end="89:42"><name pos:start="89:13" pos:end="89:22"><name pos:start="89:13" pos:end="89:17">avpkt</name><operator pos:start="89:18" pos:end="89:19">-&gt;</operator><name pos:start="89:20" pos:end="89:22">buf</name></name>      <operator pos:start="89:29" pos:end="89:29">=</operator> <name pos:start="89:31" pos:end="89:42"><name pos:start="89:31" pos:end="89:38">user_pkt</name><operator pos:start="89:39" pos:end="89:39">.</operator><name pos:start="89:40" pos:end="89:42">buf</name></name></expr>;</expr_stmt>
            <expr_stmt pos:start="90:13" pos:end="92:0"><expr pos:start="90:13" pos:end="90:43"><name pos:start="90:13" pos:end="90:23"><name pos:start="90:13" pos:end="90:17">avpkt</name><operator pos:start="90:18" pos:end="90:19">-&gt;</operator><name pos:start="90:20" pos:end="90:23">data</name></name>     <operator pos:start="90:29" pos:end="90:29">=</operator> <name pos:start="90:31" pos:end="90:43"><name pos:start="90:31" pos:end="90:38">user_pkt</name><operator pos:start="90:39" pos:end="90:39">.</operator><name pos:start="90:40" pos:end="90:43">data</name></name></expr>;</expr_stmt>
<cpp:if pos:start="91:1" pos:end="91:26">#<cpp:directive pos:start="91:2" pos:end="91:3">if</cpp:directive> <expr pos:start="91:5" pos:end="91:26"><name pos:start="91:5" pos:end="91:26">FF_API_DESTRUCT_PACKET</name></expr></cpp:if>
<decl_stmt pos:start="92:1" pos:end="93:48"><decl pos:start="92:1" pos:end="93:47"><type pos:start="92:1" pos:end="92:31"><name pos:start="92:1" pos:end="92:31">FF_DISABLE_DEPRECATION_WARNINGS</name></type>
            <name pos:start="93:13" pos:end="93:27"><name pos:start="93:13" pos:end="93:17">avpkt</name><operator pos:start="93:18" pos:end="93:19">-&gt;</operator><name pos:start="93:20" pos:end="93:27">destruct</name></name> <init pos:start="93:29" pos:end="93:47">= <expr pos:start="93:31" pos:end="93:47"><name pos:start="93:31" pos:end="93:47"><name pos:start="93:31" pos:end="93:38">user_pkt</name><operator pos:start="93:39" pos:end="93:39">.</operator><name pos:start="93:40" pos:end="93:47">destruct</name></name></expr></init></decl>;</decl_stmt>
<expr_stmt pos:start="94:1" pos:end="96:0"><expr pos:start="94:1" pos:end="96:0"><name pos:start="94:1" pos:end="96:0">FF_ENABLE_DEPRECATION_WARNINGS</name></expr></expr_stmt>
<cpp:endif pos:start="95:1" pos:end="95:6">#<cpp:directive pos:start="95:2" pos:end="95:6">endif</cpp:directive></cpp:endif>
        </block_content>}</block></if> <else pos:start="96:11" pos:end="100:9">else <block pos:start="96:16" pos:end="100:9">{<block_content pos:start="97:13" pos:end="99:13">
            <if_stmt pos:start="97:13" pos:end="99:13"><if pos:start="97:13" pos:end="99:13">if <condition pos:start="97:16" pos:end="97:41">(<expr pos:start="97:17" pos:end="97:40"><call pos:start="97:17" pos:end="97:36"><name pos:start="97:17" pos:end="97:29">av_dup_packet</name><argument_list pos:start="97:30" pos:end="97:36">(<argument pos:start="97:31" pos:end="97:35"><expr pos:start="97:31" pos:end="97:35"><name pos:start="97:31" pos:end="97:35">avpkt</name></expr></argument>)</argument_list></call> <operator pos:start="97:38" pos:end="97:38">&lt;</operator> <literal type="number" pos:start="97:40" pos:end="97:40">0</literal></expr>)</condition> <block pos:start="97:43" pos:end="99:13">{<block_content pos:start="98:17" pos:end="98:38">
                <expr_stmt pos:start="98:17" pos:end="98:38"><expr pos:start="98:17" pos:end="98:37"><name pos:start="98:17" pos:end="98:19">ret</name> <operator pos:start="98:21" pos:end="98:21">=</operator> <call pos:start="98:23" pos:end="98:37"><name pos:start="98:23" pos:end="98:29">AVERROR</name><argument_list pos:start="98:30" pos:end="98:37">(<argument pos:start="98:31" pos:end="98:36"><expr pos:start="98:31" pos:end="98:36"><name pos:start="98:31" pos:end="98:36">ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="102:5" pos:end="109:5"><if pos:start="102:5" pos:end="109:5">if <condition pos:start="102:8" pos:end="102:13">(<expr pos:start="102:9" pos:end="102:12"><operator pos:start="102:9" pos:end="102:9">!</operator><name pos:start="102:10" pos:end="102:12">ret</name></expr>)</condition> <block pos:start="102:15" pos:end="109:5">{<block_content pos:start="103:9" pos:end="108:30">
        <if_stmt pos:start="103:9" pos:end="107:9"><if pos:start="103:9" pos:end="107:9">if <condition pos:start="103:12" pos:end="103:41">(<expr pos:start="103:13" pos:end="103:40"><name pos:start="103:13" pos:end="103:25">needs_realloc</name> <operator pos:start="103:27" pos:end="103:28">&amp;&amp;</operator> <name pos:start="103:30" pos:end="103:40"><name pos:start="103:30" pos:end="103:34">avpkt</name><operator pos:start="103:35" pos:end="103:36">-&gt;</operator><name pos:start="103:37" pos:end="103:40">data</name></name></expr>)</condition> <block pos:start="103:43" pos:end="107:9">{<block_content pos:start="104:13" pos:end="106:47">
            <expr_stmt pos:start="104:13" pos:end="104:93"><expr pos:start="104:13" pos:end="104:92"><name pos:start="104:13" pos:end="104:15">ret</name> <operator pos:start="104:17" pos:end="104:17">=</operator> <call pos:start="104:19" pos:end="104:92"><name pos:start="104:19" pos:end="104:35">av_buffer_realloc</name><argument_list pos:start="104:36" pos:end="104:92">(<argument pos:start="104:37" pos:end="104:47"><expr pos:start="104:37" pos:end="104:47"><operator pos:start="104:37" pos:end="104:37">&amp;</operator><name pos:start="104:38" pos:end="104:47"><name pos:start="104:38" pos:end="104:42">avpkt</name><operator pos:start="104:43" pos:end="104:44">-&gt;</operator><name pos:start="104:45" pos:end="104:47">buf</name></name></expr></argument>, <argument pos:start="104:50" pos:end="104:91"><expr pos:start="104:50" pos:end="104:91"><name pos:start="104:50" pos:end="104:60"><name pos:start="104:50" pos:end="104:54">avpkt</name><operator pos:start="104:55" pos:end="104:56">-&gt;</operator><name pos:start="104:57" pos:end="104:60">size</name></name> <operator pos:start="104:62" pos:end="104:62">+</operator> <name pos:start="104:64" pos:end="104:91">AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="105:13" pos:end="106:47"><if pos:start="105:13" pos:end="106:47">if <condition pos:start="105:16" pos:end="105:25">(<expr pos:start="105:17" pos:end="105:24"><name pos:start="105:17" pos:end="105:19">ret</name> <operator pos:start="105:21" pos:end="105:22">&gt;=</operator> <literal type="number" pos:start="105:24" pos:end="105:24">0</literal></expr>)</condition><block type="pseudo" pos:start="106:17" pos:end="106:47"><block_content pos:start="106:17" pos:end="106:47">
                <expr_stmt pos:start="106:17" pos:end="106:47"><expr pos:start="106:17" pos:end="106:46"><name pos:start="106:17" pos:end="106:27"><name pos:start="106:17" pos:end="106:21">avpkt</name><operator pos:start="106:22" pos:end="106:23">-&gt;</operator><name pos:start="106:24" pos:end="106:27">data</name></name> <operator pos:start="106:29" pos:end="106:29">=</operator> <name pos:start="106:31" pos:end="106:46"><name pos:start="106:31" pos:end="106:35">avpkt</name><operator pos:start="106:36" pos:end="106:37">-&gt;</operator><name pos:start="106:38" pos:end="106:40">buf</name><operator pos:start="106:41" pos:end="106:42">-&gt;</operator><name pos:start="106:43" pos:end="106:46">data</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt pos:start="108:9" pos:end="108:30"><expr pos:start="108:9" pos:end="108:29"><name pos:start="108:9" pos:end="108:27"><name pos:start="108:9" pos:end="108:13">avctx</name><operator pos:start="108:14" pos:end="108:15">-&gt;</operator><name pos:start="108:16" pos:end="108:27">frame_number</name></name><operator pos:start="108:28" pos:end="108:29">++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt pos:start="110:5" pos:end="114:5"><if pos:start="110:5" pos:end="114:5">if <condition pos:start="110:8" pos:end="110:36">(<expr pos:start="110:9" pos:end="110:35"><name pos:start="110:9" pos:end="110:11">ret</name> <operator pos:start="110:13" pos:end="110:13">&lt;</operator> <literal type="number" pos:start="110:15" pos:end="110:15">0</literal> <operator pos:start="110:17" pos:end="110:18">||</operator> <operator pos:start="110:20" pos:end="110:20">!</operator><operator pos:start="110:21" pos:end="110:21">*</operator><name pos:start="110:22" pos:end="110:35">got_packet_ptr</name></expr>)</condition> <block pos:start="110:38" pos:end="114:5">{<block_content pos:start="111:9" pos:end="113:17">
        <expr_stmt pos:start="111:9" pos:end="111:30"><expr pos:start="111:9" pos:end="111:29"><call pos:start="111:9" pos:end="111:29"><name pos:start="111:9" pos:end="111:22">av_free_packet</name><argument_list pos:start="111:23" pos:end="111:29">(<argument pos:start="111:24" pos:end="111:28"><expr pos:start="111:24" pos:end="111:28"><name pos:start="111:24" pos:end="111:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="112:9" pos:end="112:30"><expr pos:start="112:9" pos:end="112:29"><call pos:start="112:9" pos:end="112:29"><name pos:start="112:9" pos:end="112:22">av_init_packet</name><argument_list pos:start="112:23" pos:end="112:29">(<argument pos:start="112:24" pos:end="112:28"><expr pos:start="112:24" pos:end="112:28"><name pos:start="112:24" pos:end="112:28">avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto pos:start="113:9" pos:end="113:17">goto <name pos:start="113:14" pos:end="113:16">end</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <comment type="block" pos:start="115:5" pos:end="117:39">/* NOTE: if we add any audio encoders which output non-keyframe packets,
     *       this needs to be moved to the encoders, but for now we can do it
     *       here to simplify things */</comment>
    <expr_stmt pos:start="118:5" pos:end="118:36"><expr pos:start="118:5" pos:end="118:35"><name pos:start="118:5" pos:end="118:16"><name pos:start="118:5" pos:end="118:9">avpkt</name><operator pos:start="118:10" pos:end="118:11">-&gt;</operator><name pos:start="118:12" pos:end="118:16">flags</name></name> <operator pos:start="118:18" pos:end="118:19">|=</operator> <name pos:start="118:21" pos:end="118:35">AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>
<label pos:start="119:1" pos:end="119:4"><name pos:start="119:1" pos:end="119:3">end</name>:</label>
    <expr_stmt pos:start="120:5" pos:end="120:33"><expr pos:start="120:5" pos:end="120:32"><call pos:start="120:5" pos:end="120:32"><name pos:start="120:5" pos:end="120:17">av_frame_free</name><argument_list pos:start="120:18" pos:end="120:32">(<argument pos:start="120:19" pos:end="120:31"><expr pos:start="120:19" pos:end="120:31"><operator pos:start="120:19" pos:end="120:19">&amp;</operator><name pos:start="120:20" pos:end="120:31">padded_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="121:5" pos:end="123:0"><expr pos:start="121:5" pos:end="121:27"><call pos:start="121:5" pos:end="121:27"><name pos:start="121:5" pos:end="121:11">av_free</name><argument_list pos:start="121:12" pos:end="121:27">(<argument pos:start="121:13" pos:end="121:26"><expr pos:start="121:13" pos:end="121:26"><name pos:start="121:13" pos:end="121:26">extended_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if pos:start="122:1" pos:end="122:25">#<cpp:directive pos:start="122:2" pos:end="122:3">if</cpp:directive> <expr pos:start="122:5" pos:end="122:25"><name pos:start="122:5" pos:end="122:25">FF_API_AUDIOENC_DELAY</name></expr></cpp:if>
    <expr_stmt pos:start="123:5" pos:end="125:0"><expr pos:start="123:5" pos:end="123:41"><name pos:start="123:5" pos:end="123:16"><name pos:start="123:5" pos:end="123:9">avctx</name><operator pos:start="123:10" pos:end="123:11">-&gt;</operator><name pos:start="123:12" pos:end="123:16">delay</name></name> <operator pos:start="123:18" pos:end="123:18">=</operator> <name pos:start="123:20" pos:end="123:41"><name pos:start="123:20" pos:end="123:24">avctx</name><operator pos:start="123:25" pos:end="123:26">-&gt;</operator><name pos:start="123:27" pos:end="123:41">initial_padding</name></name></expr>;</expr_stmt>
<cpp:endif pos:start="124:1" pos:end="124:6">#<cpp:directive pos:start="124:2" pos:end="124:6">endif</cpp:directive></cpp:endif>
    <return pos:start="125:5" pos:end="125:15">return <expr pos:start="125:12" pos:end="125:14"><name pos:start="125:12" pos:end="125:14">ret</name></expr>;</return>
</block_content>}</block></function></unit>
