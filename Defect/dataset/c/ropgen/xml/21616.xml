<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/21616.c" pos:tabs="8"><function pos:start="1:1" pos:end="53:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:22">bdrv_error_action</name><parameter_list pos:start="1:23" pos:end="3:47">(<parameter pos:start="1:24" pos:end="1:43"><decl pos:start="1:24" pos:end="1:43"><type pos:start="1:24" pos:end="1:43"><name pos:start="1:24" pos:end="1:39">BlockDriverState</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:43">bs</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:68"><decl pos:start="1:46" pos:end="1:68"><type pos:start="1:46" pos:end="1:68"><name pos:start="1:46" pos:end="1:61">BlockErrorAction</name></type> <name pos:start="1:63" pos:end="1:68">action</name></decl></parameter>,

                       <parameter pos:start="3:24" pos:end="3:35"><decl pos:start="3:24" pos:end="3:35"><type pos:start="3:24" pos:end="3:35"><name pos:start="3:24" pos:end="3:27">bool</name></type> <name pos:start="3:29" pos:end="3:35">is_read</name></decl></parameter>, <parameter pos:start="3:38" pos:end="3:46"><decl pos:start="3:38" pos:end="3:46"><type pos:start="3:38" pos:end="3:46"><name pos:start="3:38" pos:end="3:40">int</name></type> <name pos:start="3:42" pos:end="3:46">error</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="53:1">{<block_content pos:start="7:5" pos:end="51:5">

    <expr_stmt pos:start="7:5" pos:end="7:23"><expr pos:start="7:5" pos:end="7:22"><call pos:start="7:5" pos:end="7:22"><name pos:start="7:5" pos:end="7:10">assert</name><argument_list pos:start="7:11" pos:end="7:22">(<argument pos:start="7:12" pos:end="7:21"><expr pos:start="7:12" pos:end="7:21"><name pos:start="7:12" pos:end="7:16">error</name> <operator pos:start="7:18" pos:end="7:19">&gt;=</operator> <literal type="number" pos:start="7:21" pos:end="7:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="11:5" pos:end="51:5"><if pos:start="11:5" pos:end="47:5">if <condition pos:start="11:8" pos:end="11:42">(<expr pos:start="11:9" pos:end="11:41"><name pos:start="11:9" pos:end="11:14">action</name> <operator pos:start="11:16" pos:end="11:17">==</operator> <name pos:start="11:19" pos:end="11:41">BLOCK_ERROR_ACTION_STOP</name></expr>)</condition> <block pos:start="11:44" pos:end="47:5">{<block_content pos:start="21:9" pos:end="45:55">

        <comment type="block" pos:start="13:9" pos:end="19:11">/* First set the iostatus, so that "info block" returns an iostatus

         * that matches the events raised so far (an additional error iostatus

         * is fine, but not a lost one).

         */</comment>

        <expr_stmt pos:start="21:9" pos:end="21:41"><expr pos:start="21:9" pos:end="21:40"><call pos:start="21:9" pos:end="21:40"><name pos:start="21:9" pos:end="21:29">bdrv_iostatus_set_err</name><argument_list pos:start="21:30" pos:end="21:40">(<argument pos:start="21:31" pos:end="21:32"><expr pos:start="21:31" pos:end="21:32"><name pos:start="21:31" pos:end="21:32">bs</name></expr></argument>, <argument pos:start="21:35" pos:end="21:39"><expr pos:start="21:35" pos:end="21:39"><name pos:start="21:35" pos:end="21:39">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <comment type="block" pos:start="25:9" pos:end="39:11">/* Then raise the request to stop the VM and the event.

         * qemu_system_vmstop_request_prepare has two effects.  First,

         * it ensures that the STOP event always comes after the

         * BLOCK_IO_ERROR event.  Second, it ensures that even if management

         * can observe the STOP event and do a "cont" before the STOP

         * event is issued, the VM will not stop.  In this case, vm_start()

         * also ensures that the STOP/RESUME pair of events is emitted.

         */</comment>

        <expr_stmt pos:start="41:9" pos:end="41:45"><expr pos:start="41:9" pos:end="41:44"><call pos:start="41:9" pos:end="41:44"><name pos:start="41:9" pos:end="41:42">qemu_system_vmstop_request_prepare</name><argument_list pos:start="41:43" pos:end="41:44">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="43:9" pos:end="43:57"><expr pos:start="43:9" pos:end="43:56"><call pos:start="43:9" pos:end="43:56"><name pos:start="43:9" pos:end="43:28">send_qmp_error_event</name><argument_list pos:start="43:29" pos:end="43:56">(<argument pos:start="43:30" pos:end="43:31"><expr pos:start="43:30" pos:end="43:31"><name pos:start="43:30" pos:end="43:31">bs</name></expr></argument>, <argument pos:start="43:34" pos:end="43:39"><expr pos:start="43:34" pos:end="43:39"><name pos:start="43:34" pos:end="43:39">action</name></expr></argument>, <argument pos:start="43:42" pos:end="43:48"><expr pos:start="43:42" pos:end="43:48"><name pos:start="43:42" pos:end="43:48">is_read</name></expr></argument>, <argument pos:start="43:51" pos:end="43:55"><expr pos:start="43:51" pos:end="43:55"><name pos:start="43:51" pos:end="43:55">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="45:9" pos:end="45:55"><expr pos:start="45:9" pos:end="45:54"><call pos:start="45:9" pos:end="45:54"><name pos:start="45:9" pos:end="45:34">qemu_system_vmstop_request</name><argument_list pos:start="45:35" pos:end="45:54">(<argument pos:start="45:36" pos:end="45:53"><expr pos:start="45:36" pos:end="45:53"><name pos:start="45:36" pos:end="45:53">RUN_STATE_IO_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="47:7" pos:end="51:5">else <block pos:start="47:12" pos:end="51:5">{<block_content pos:start="49:9" pos:end="49:57">

        <expr_stmt pos:start="49:9" pos:end="49:57"><expr pos:start="49:9" pos:end="49:56"><call pos:start="49:9" pos:end="49:56"><name pos:start="49:9" pos:end="49:28">send_qmp_error_event</name><argument_list pos:start="49:29" pos:end="49:56">(<argument pos:start="49:30" pos:end="49:31"><expr pos:start="49:30" pos:end="49:31"><name pos:start="49:30" pos:end="49:31">bs</name></expr></argument>, <argument pos:start="49:34" pos:end="49:39"><expr pos:start="49:34" pos:end="49:39"><name pos:start="49:34" pos:end="49:39">action</name></expr></argument>, <argument pos:start="49:42" pos:end="49:48"><expr pos:start="49:42" pos:end="49:48"><name pos:start="49:42" pos:end="49:48">is_read</name></expr></argument>, <argument pos:start="49:51" pos:end="49:55"><expr pos:start="49:51" pos:end="49:55"><name pos:start="49:51" pos:end="49:55">error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

</block_content>}</block></function>
</unit>
