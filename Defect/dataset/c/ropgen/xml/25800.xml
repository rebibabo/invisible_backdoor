<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/25800.c" pos:tabs="8"><function pos:start="1:1" pos:end="427:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">id3v2_parse</name><parameter_list pos:start="1:24" pos:end="3:67">(<parameter pos:start="1:25" pos:end="1:42"><decl pos:start="1:25" pos:end="1:42"><type pos:start="1:25" pos:end="1:42"><name pos:start="1:25" pos:end="1:39">AVFormatContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:42">s</name></decl></parameter>, <parameter pos:start="1:45" pos:end="1:51"><decl pos:start="1:45" pos:end="1:51"><type pos:start="1:45" pos:end="1:51"><name pos:start="1:45" pos:end="1:47">int</name></type> <name pos:start="1:49" pos:end="1:51">len</name></decl></parameter>, <parameter pos:start="1:54" pos:end="1:68"><decl pos:start="1:54" pos:end="1:68"><type pos:start="1:54" pos:end="1:68"><name pos:start="1:54" pos:end="1:60">uint8_t</name></type> <name pos:start="1:62" pos:end="1:68">version</name></decl></parameter>,

                        <parameter pos:start="3:25" pos:end="3:37"><decl pos:start="3:25" pos:end="3:37"><type pos:start="3:25" pos:end="3:37"><name pos:start="3:25" pos:end="3:31">uint8_t</name></type> <name pos:start="3:33" pos:end="3:37">flags</name></decl></parameter>, <parameter pos:start="3:40" pos:end="3:66"><decl pos:start="3:40" pos:end="3:66"><type pos:start="3:40" pos:end="3:66"><name pos:start="3:40" pos:end="3:53">ID3v2ExtraMeta</name> <modifier pos:start="3:55" pos:end="3:55">*</modifier><modifier pos:start="3:56" pos:end="3:56">*</modifier></type><name pos:start="3:57" pos:end="3:66">extra_meta</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="427:1">{<block_content pos:start="7:5" pos:end="425:11">

    <decl_stmt pos:start="7:5" pos:end="7:22"><decl pos:start="7:5" pos:end="7:13"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:13">isv34</name></decl>, <decl pos:start="7:16" pos:end="7:21"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:16" pos:end="7:21">unsync</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:12"><name pos:start="9:5" pos:end="9:12">unsigned</name></type> <name pos:start="9:14" pos:end="9:17">tlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:16"><decl pos:start="11:5" pos:end="11:15"><type pos:start="11:5" pos:end="11:8"><name pos:start="11:5" pos:end="11:8">char</name></type> <name pos:start="11:10" pos:end="11:15"><name pos:start="11:10" pos:end="11:12">tag</name><index pos:start="11:13" pos:end="11:15">[<expr pos:start="11:14" pos:end="11:14"><literal type="number" pos:start="11:14" pos:end="11:14">5</literal></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:47"><decl pos:start="13:5" pos:end="13:16"><type pos:start="13:5" pos:end="13:11"><name pos:start="13:5" pos:end="13:11">int64_t</name></type> <name pos:start="13:13" pos:end="13:16">next</name></decl>, <decl pos:start="13:19" pos:end="13:46"><type ref="prev" pos:start="13:5" pos:end="13:11"/><name pos:start="13:19" pos:end="13:21">end</name> <init pos:start="13:23" pos:end="13:46">= <expr pos:start="13:25" pos:end="13:46"><call pos:start="13:25" pos:end="13:40"><name pos:start="13:25" pos:end="13:33">avio_tell</name><argument_list pos:start="13:34" pos:end="13:40">(<argument pos:start="13:35" pos:end="13:39"><expr pos:start="13:35" pos:end="13:39"><name pos:start="13:35" pos:end="13:39"><name pos:start="13:35" pos:end="13:35">s</name><operator pos:start="13:36" pos:end="13:37">-&gt;</operator><name pos:start="13:38" pos:end="13:39">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="13:42" pos:end="13:42">+</operator> <name pos:start="13:44" pos:end="13:46">len</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:18"><decl pos:start="15:5" pos:end="15:17"><type pos:start="15:5" pos:end="15:7"><name pos:start="15:5" pos:end="15:7">int</name></type> <name pos:start="15:9" pos:end="15:17">taghdrlen</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:30"><decl pos:start="17:5" pos:end="17:29"><type pos:start="17:5" pos:end="17:16"><specifier pos:start="17:5" pos:end="17:9">const</specifier> <name pos:start="17:11" pos:end="17:14">char</name> <modifier pos:start="17:16" pos:end="17:16">*</modifier></type><name pos:start="17:17" pos:end="17:22">reason</name> <init pos:start="17:24" pos:end="17:29">= <expr pos:start="17:26" pos:end="17:29"><name pos:start="17:26" pos:end="17:29">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:19"><decl pos:start="19:5" pos:end="19:18"><type pos:start="19:5" pos:end="19:15"><name pos:start="19:5" pos:end="19:15">AVIOContext</name></type> <name pos:start="19:17" pos:end="19:18">pb</name></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:21"><decl pos:start="21:5" pos:end="21:20"><type pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:15">AVIOContext</name> <modifier pos:start="21:17" pos:end="21:17">*</modifier></type><name pos:start="21:18" pos:end="21:20">pbx</name></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:33"><decl pos:start="23:5" pos:end="23:32"><type pos:start="23:5" pos:end="23:19"><name pos:start="23:5" pos:end="23:12">unsigned</name> <name pos:start="23:14" pos:end="23:17">char</name> <modifier pos:start="23:19" pos:end="23:19">*</modifier></type><name pos:start="23:20" pos:end="23:25">buffer</name> <init pos:start="23:27" pos:end="23:32">= <expr pos:start="23:29" pos:end="23:32"><name pos:start="23:29" pos:end="23:32">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="25:5" pos:end="25:30"><decl pos:start="25:5" pos:end="25:29"><type pos:start="25:5" pos:end="25:7"><name pos:start="25:5" pos:end="25:7">int</name></type> <name pos:start="25:9" pos:end="25:19">buffer_size</name>       <init pos:start="25:27" pos:end="25:29">= <expr pos:start="25:29" pos:end="25:29"><literal type="number" pos:start="25:29" pos:end="25:29">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:41"><decl pos:start="27:5" pos:end="27:40"><type pos:start="27:5" pos:end="27:23"><specifier pos:start="27:5" pos:end="27:9">const</specifier> <name pos:start="27:11" pos:end="27:21">ID3v2EMFunc</name> <modifier pos:start="27:23" pos:end="27:23">*</modifier></type><name pos:start="27:24" pos:end="27:33">extra_func</name> <init pos:start="27:35" pos:end="27:40">= <expr pos:start="27:37" pos:end="27:40"><name pos:start="27:37" pos:end="27:40">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:46"><decl pos:start="29:5" pos:end="29:45"><type pos:start="29:5" pos:end="29:19"><name pos:start="29:5" pos:end="29:12">unsigned</name> <name pos:start="29:14" pos:end="29:17">char</name> <modifier pos:start="29:19" pos:end="29:19">*</modifier></type><name pos:start="29:20" pos:end="29:38">uncompressed_buffer</name> <init pos:start="29:40" pos:end="29:45">= <expr pos:start="29:42" pos:end="29:45"><name pos:start="29:42" pos:end="29:45">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:37"><decl pos:start="31:5" pos:end="31:36"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:32">uncompressed_buffer_size</name> <init pos:start="31:34" pos:end="31:36">= <expr pos:start="31:36" pos:end="31:36"><literal type="number" pos:start="31:36" pos:end="31:36">0</literal></expr></init></decl>;</decl_stmt>



    <expr_stmt pos:start="35:5" pos:end="35:85"><expr pos:start="35:5" pos:end="35:84"><call pos:start="35:5" pos:end="35:84"><name pos:start="35:5" pos:end="35:10">av_log</name><argument_list pos:start="35:11" pos:end="35:84">(<argument pos:start="35:12" pos:end="35:12"><expr pos:start="35:12" pos:end="35:12"><name pos:start="35:12" pos:end="35:12">s</name></expr></argument>, <argument pos:start="35:15" pos:end="35:26"><expr pos:start="35:15" pos:end="35:26"><name pos:start="35:15" pos:end="35:26">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="35:29" pos:end="35:62"><expr pos:start="35:29" pos:end="35:62"><literal type="string" pos:start="35:29" pos:end="35:62">"id3v2 ver:%d flags:%02X len:%d\n"</literal></expr></argument>, <argument pos:start="35:65" pos:end="35:71"><expr pos:start="35:65" pos:end="35:71"><name pos:start="35:65" pos:end="35:71">version</name></expr></argument>, <argument pos:start="35:74" pos:end="35:78"><expr pos:start="35:74" pos:end="35:78"><name pos:start="35:74" pos:end="35:78">flags</name></expr></argument>, <argument pos:start="35:81" pos:end="35:83"><expr pos:start="35:81" pos:end="35:83"><name pos:start="35:81" pos:end="35:83">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <switch pos:start="39:5" pos:end="77:5">switch <condition pos:start="39:12" pos:end="39:20">(<expr pos:start="39:13" pos:end="39:19"><name pos:start="39:13" pos:end="39:19">version</name></expr>)</condition> <block pos:start="39:22" pos:end="77:5">{<block_content pos:start="41:5" pos:end="75:19">

    <case pos:start="41:5" pos:end="41:11">case <expr pos:start="41:10" pos:end="41:10"><literal type="number" pos:start="41:10" pos:end="41:10">2</literal></expr>:</case>

        <if_stmt pos:start="43:9" pos:end="49:9"><if pos:start="43:9" pos:end="49:9">if <condition pos:start="43:12" pos:end="43:25">(<expr pos:start="43:13" pos:end="43:24"><name pos:start="43:13" pos:end="43:17">flags</name> <operator pos:start="43:19" pos:end="43:19">&amp;</operator> <literal type="number" pos:start="43:21" pos:end="43:24">0x40</literal></expr>)</condition> <block pos:start="43:27" pos:end="49:9">{<block_content pos:start="45:13" pos:end="47:23">

            <expr_stmt pos:start="45:13" pos:end="45:35"><expr pos:start="45:13" pos:end="45:34"><name pos:start="45:13" pos:end="45:18">reason</name> <operator pos:start="45:20" pos:end="45:20">=</operator> <literal type="string" pos:start="45:22" pos:end="45:34">"compression"</literal></expr>;</expr_stmt>

            <goto pos:start="47:13" pos:end="47:23">goto <name pos:start="47:18" pos:end="47:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="51:9" pos:end="51:22"><expr pos:start="51:9" pos:end="51:21"><name pos:start="51:9" pos:end="51:13">isv34</name>     <operator pos:start="51:19" pos:end="51:19">=</operator> <literal type="number" pos:start="51:21" pos:end="51:21">0</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="53:9" pos:end="53:22"><expr pos:start="53:9" pos:end="53:21"><name pos:start="53:9" pos:end="53:17">taghdrlen</name> <operator pos:start="53:19" pos:end="53:19">=</operator> <literal type="number" pos:start="53:21" pos:end="53:21">6</literal></expr>;</expr_stmt>

        <break pos:start="55:9" pos:end="55:14">break;</break>



    <case pos:start="59:5" pos:end="59:11">case <expr pos:start="59:10" pos:end="59:10"><literal type="number" pos:start="59:10" pos:end="59:10">3</literal></expr>:</case>

    <case pos:start="61:5" pos:end="61:11">case <expr pos:start="61:10" pos:end="61:10"><literal type="number" pos:start="61:10" pos:end="61:10">4</literal></expr>:</case>

        <expr_stmt pos:start="63:9" pos:end="63:22"><expr pos:start="63:9" pos:end="63:21"><name pos:start="63:9" pos:end="63:13">isv34</name>     <operator pos:start="63:19" pos:end="63:19">=</operator> <literal type="number" pos:start="63:21" pos:end="63:21">1</literal></expr>;</expr_stmt>

        <expr_stmt pos:start="65:9" pos:end="65:23"><expr pos:start="65:9" pos:end="65:22"><name pos:start="65:9" pos:end="65:17">taghdrlen</name> <operator pos:start="65:19" pos:end="65:19">=</operator> <literal type="number" pos:start="65:21" pos:end="65:22">10</literal></expr>;</expr_stmt>

        <break pos:start="67:9" pos:end="67:14">break;</break>



    <default pos:start="71:5" pos:end="71:12">default:</default>

        <expr_stmt pos:start="73:9" pos:end="73:27"><expr pos:start="73:9" pos:end="73:26"><name pos:start="73:9" pos:end="73:14">reason</name> <operator pos:start="73:16" pos:end="73:16">=</operator> <literal type="string" pos:start="73:18" pos:end="73:26">"version"</literal></expr>;</expr_stmt>

        <goto pos:start="75:9" pos:end="75:19">goto <name pos:start="75:14" pos:end="75:18">error</name>;</goto>

    </block_content>}</block></switch>



    <expr_stmt pos:start="81:5" pos:end="81:26"><expr pos:start="81:5" pos:end="81:25"><name pos:start="81:5" pos:end="81:10">unsync</name> <operator pos:start="81:12" pos:end="81:12">=</operator> <name pos:start="81:14" pos:end="81:18">flags</name> <operator pos:start="81:20" pos:end="81:20">&amp;</operator> <literal type="number" pos:start="81:22" pos:end="81:25">0x80</literal></expr>;</expr_stmt>



    <if_stmt pos:start="85:5" pos:end="117:5"><if pos:start="85:5" pos:end="117:5">if <condition pos:start="85:8" pos:end="85:30">(<expr pos:start="85:9" pos:end="85:29"><name pos:start="85:9" pos:end="85:13">isv34</name> <operator pos:start="85:15" pos:end="85:16">&amp;&amp;</operator> <name pos:start="85:18" pos:end="85:22">flags</name> <operator pos:start="85:24" pos:end="85:24">&amp;</operator> <literal type="number" pos:start="85:26" pos:end="85:29">0x40</literal></expr>)</condition> <block pos:start="85:32" pos:end="117:5">{<block_content pos:start="87:9" pos:end="115:9"> <comment type="block" pos:start="85:34" pos:end="85:81">/* Extended header present, just skip over it */</comment>

        <decl_stmt pos:start="87:9" pos:end="87:40"><decl pos:start="87:9" pos:end="87:39"><type pos:start="87:9" pos:end="87:11"><name pos:start="87:9" pos:end="87:11">int</name></type> <name pos:start="87:13" pos:end="87:18">extlen</name> <init pos:start="87:20" pos:end="87:39">= <expr pos:start="87:22" pos:end="87:39"><call pos:start="87:22" pos:end="87:39"><name pos:start="87:22" pos:end="87:29">get_size</name><argument_list pos:start="87:30" pos:end="87:39">(<argument pos:start="87:31" pos:end="87:35"><expr pos:start="87:31" pos:end="87:35"><name pos:start="87:31" pos:end="87:35"><name pos:start="87:31" pos:end="87:31">s</name><operator pos:start="87:32" pos:end="87:33">-&gt;</operator><name pos:start="87:34" pos:end="87:35">pb</name></name></expr></argument>, <argument pos:start="87:38" pos:end="87:38"><expr pos:start="87:38" pos:end="87:38"><literal type="number" pos:start="87:38" pos:end="87:38">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="89:9" pos:end="93:24"><if pos:start="89:9" pos:end="93:24">if <condition pos:start="89:12" pos:end="89:25">(<expr pos:start="89:13" pos:end="89:24"><name pos:start="89:13" pos:end="89:19">version</name> <operator pos:start="89:21" pos:end="89:22">==</operator> <literal type="number" pos:start="89:24" pos:end="89:24">4</literal></expr>)</condition><block type="pseudo" pos:start="93:13" pos:end="93:24"><block_content pos:start="93:13" pos:end="93:24">

            <comment type="block" pos:start="91:13" pos:end="91:76">/* In v2.4 the length includes the length field we just read. */</comment>

            <expr_stmt pos:start="93:13" pos:end="93:24"><expr pos:start="93:13" pos:end="93:23"><name pos:start="93:13" pos:end="93:18">extlen</name> <operator pos:start="93:20" pos:end="93:21">-=</operator> <literal type="number" pos:start="93:23" pos:end="93:23">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



        <if_stmt pos:start="97:9" pos:end="103:9"><if pos:start="97:9" pos:end="103:9">if <condition pos:start="97:12" pos:end="97:23">(<expr pos:start="97:13" pos:end="97:22"><name pos:start="97:13" pos:end="97:18">extlen</name> <operator pos:start="97:20" pos:end="97:20">&lt;</operator> <literal type="number" pos:start="97:22" pos:end="97:22">0</literal></expr>)</condition> <block pos:start="97:25" pos:end="103:9">{<block_content pos:start="99:13" pos:end="101:23">

            <expr_stmt pos:start="99:13" pos:end="99:54"><expr pos:start="99:13" pos:end="99:53"><name pos:start="99:13" pos:end="99:18">reason</name> <operator pos:start="99:20" pos:end="99:20">=</operator> <literal type="string" pos:start="99:22" pos:end="99:53">"invalid extended header length"</literal></expr>;</expr_stmt>

            <goto pos:start="101:13" pos:end="101:23">goto <name pos:start="101:18" pos:end="101:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="105:9" pos:end="105:33"><expr pos:start="105:9" pos:end="105:32"><call pos:start="105:9" pos:end="105:32"><name pos:start="105:9" pos:end="105:17">avio_skip</name><argument_list pos:start="105:18" pos:end="105:32">(<argument pos:start="105:19" pos:end="105:23"><expr pos:start="105:19" pos:end="105:23"><name pos:start="105:19" pos:end="105:23"><name pos:start="105:19" pos:end="105:19">s</name><operator pos:start="105:20" pos:end="105:21">-&gt;</operator><name pos:start="105:22" pos:end="105:23">pb</name></name></expr></argument>, <argument pos:start="105:26" pos:end="105:31"><expr pos:start="105:26" pos:end="105:31"><name pos:start="105:26" pos:end="105:31">extlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:26"><expr pos:start="107:9" pos:end="107:25"><name pos:start="107:9" pos:end="107:11">len</name> <operator pos:start="107:13" pos:end="107:14">-=</operator> <name pos:start="107:16" pos:end="107:21">extlen</name> <operator pos:start="107:23" pos:end="107:23">+</operator> <literal type="number" pos:start="107:25" pos:end="107:25">4</literal></expr>;</expr_stmt>

        <if_stmt pos:start="109:9" pos:end="115:9"><if pos:start="109:9" pos:end="115:9">if <condition pos:start="109:12" pos:end="109:20">(<expr pos:start="109:13" pos:end="109:19"><name pos:start="109:13" pos:end="109:15">len</name> <operator pos:start="109:17" pos:end="109:17">&lt;</operator> <literal type="number" pos:start="109:19" pos:end="109:19">0</literal></expr>)</condition> <block pos:start="109:22" pos:end="115:9">{<block_content pos:start="111:13" pos:end="113:23">

            <expr_stmt pos:start="111:13" pos:end="111:49"><expr pos:start="111:13" pos:end="111:48"><name pos:start="111:13" pos:end="111:18">reason</name> <operator pos:start="111:20" pos:end="111:20">=</operator> <literal type="string" pos:start="111:22" pos:end="111:48">"extended header too long."</literal></expr>;</expr_stmt>

            <goto pos:start="113:13" pos:end="113:23">goto <name pos:start="113:18" pos:end="113:22">error</name>;</goto>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>



    <while pos:start="121:5" pos:end="399:5">while <condition pos:start="121:11" pos:end="121:28">(<expr pos:start="121:12" pos:end="121:27"><name pos:start="121:12" pos:end="121:14">len</name> <operator pos:start="121:16" pos:end="121:17">&gt;=</operator> <name pos:start="121:19" pos:end="121:27">taghdrlen</name></expr>)</condition> <block pos:start="121:30" pos:end="399:5">{<block_content pos:start="123:9" pos:end="397:41">

        <decl_stmt pos:start="123:9" pos:end="123:32"><decl pos:start="123:9" pos:end="123:31"><type pos:start="123:9" pos:end="123:20"><name pos:start="123:9" pos:end="123:16">unsigned</name> <name pos:start="123:18" pos:end="123:20">int</name></type> <name pos:start="123:22" pos:end="123:27">tflags</name> <init pos:start="123:29" pos:end="123:31">= <expr pos:start="123:31" pos:end="123:31"><literal type="number" pos:start="123:31" pos:end="123:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="125:9" pos:end="125:32"><decl pos:start="125:9" pos:end="125:31"><type pos:start="125:9" pos:end="125:11"><name pos:start="125:9" pos:end="125:11">int</name></type> <name pos:start="125:13" pos:end="125:19">tunsync</name>         <init pos:start="125:29" pos:end="125:31">= <expr pos:start="125:31" pos:end="125:31"><literal type="number" pos:start="125:31" pos:end="125:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="127:9" pos:end="127:32"><decl pos:start="127:9" pos:end="127:31"><type pos:start="127:9" pos:end="127:11"><name pos:start="127:9" pos:end="127:11">int</name></type> <name pos:start="127:13" pos:end="127:17">tcomp</name>           <init pos:start="127:29" pos:end="127:31">= <expr pos:start="127:31" pos:end="127:31"><literal type="number" pos:start="127:31" pos:end="127:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="129:9" pos:end="129:32"><decl pos:start="129:9" pos:end="129:31"><type pos:start="129:9" pos:end="129:11"><name pos:start="129:9" pos:end="129:11">int</name></type> <name pos:start="129:13" pos:end="129:17">tencr</name>           <init pos:start="129:29" pos:end="129:31">= <expr pos:start="129:31" pos:end="129:31"><literal type="number" pos:start="129:31" pos:end="129:31">0</literal></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="131:9" pos:end="131:27"><decl pos:start="131:9" pos:end="131:26"><type pos:start="131:9" pos:end="131:21"><name pos:start="131:9" pos:end="131:16">unsigned</name> <name pos:start="131:18" pos:end="131:21">long</name></type> <name pos:start="131:23" pos:end="131:26">dlen</name></decl>;</decl_stmt>



        <if_stmt pos:start="135:9" pos:end="161:9"><if pos:start="135:9" pos:end="153:9">if <condition pos:start="135:12" pos:end="135:18">(<expr pos:start="135:13" pos:end="135:17"><name pos:start="135:13" pos:end="135:17">isv34</name></expr>)</condition> <block pos:start="135:20" pos:end="153:9">{<block_content pos:start="137:13" pos:end="151:50">

            <expr_stmt pos:start="137:13" pos:end="137:37"><expr pos:start="137:13" pos:end="137:36"><call pos:start="137:13" pos:end="137:36"><name pos:start="137:13" pos:end="137:21">avio_read</name><argument_list pos:start="137:22" pos:end="137:36">(<argument pos:start="137:23" pos:end="137:27"><expr pos:start="137:23" pos:end="137:27"><name pos:start="137:23" pos:end="137:27"><name pos:start="137:23" pos:end="137:23">s</name><operator pos:start="137:24" pos:end="137:25">-&gt;</operator><name pos:start="137:26" pos:end="137:27">pb</name></name></expr></argument>, <argument pos:start="137:30" pos:end="137:32"><expr pos:start="137:30" pos:end="137:32"><name pos:start="137:30" pos:end="137:32">tag</name></expr></argument>, <argument pos:start="137:35" pos:end="137:35"><expr pos:start="137:35" pos:end="137:35"><literal type="number" pos:start="137:35" pos:end="137:35">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="139:13" pos:end="139:23"><expr pos:start="139:13" pos:end="139:22"><name pos:start="139:13" pos:end="139:18"><name pos:start="139:13" pos:end="139:15">tag</name><index pos:start="139:16" pos:end="139:18">[<expr pos:start="139:17" pos:end="139:17"><literal type="number" pos:start="139:17" pos:end="139:17">4</literal></expr>]</index></name> <operator pos:start="139:20" pos:end="139:20">=</operator> <literal type="number" pos:start="139:22" pos:end="139:22">0</literal></expr>;</expr_stmt>

            <if_stmt pos:start="141:13" pos:end="147:42"><if pos:start="141:13" pos:end="145:13">if <condition pos:start="141:16" pos:end="141:29">(<expr pos:start="141:17" pos:end="141:28"><name pos:start="141:17" pos:end="141:23">version</name> <operator pos:start="141:25" pos:end="141:26">==</operator> <literal type="number" pos:start="141:28" pos:end="141:28">3</literal></expr>)</condition> <block pos:start="141:31" pos:end="145:13">{<block_content pos:start="143:17" pos:end="143:40">

                <expr_stmt pos:start="143:17" pos:end="143:40"><expr pos:start="143:17" pos:end="143:39"><name pos:start="143:17" pos:end="143:20">tlen</name> <operator pos:start="143:22" pos:end="143:22">=</operator> <call pos:start="143:24" pos:end="143:39"><name pos:start="143:24" pos:end="143:32">avio_rb32</name><argument_list pos:start="143:33" pos:end="143:39">(<argument pos:start="143:34" pos:end="143:38"><expr pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:38"><name pos:start="143:34" pos:end="143:34">s</name><operator pos:start="143:35" pos:end="143:36">-&gt;</operator><name pos:start="143:37" pos:end="143:38">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="145:15" pos:end="147:42">else<block type="pseudo" pos:start="147:17" pos:end="147:42"><block_content pos:start="147:17" pos:end="147:42">

                <expr_stmt pos:start="147:17" pos:end="147:42"><expr pos:start="147:17" pos:end="147:41"><name pos:start="147:17" pos:end="147:20">tlen</name> <operator pos:start="147:22" pos:end="147:22">=</operator> <call pos:start="147:24" pos:end="147:41"><name pos:start="147:24" pos:end="147:31">get_size</name><argument_list pos:start="147:32" pos:end="147:41">(<argument pos:start="147:33" pos:end="147:37"><expr pos:start="147:33" pos:end="147:37"><name pos:start="147:33" pos:end="147:37"><name pos:start="147:33" pos:end="147:33">s</name><operator pos:start="147:34" pos:end="147:35">-&gt;</operator><name pos:start="147:36" pos:end="147:37">pb</name></name></expr></argument>, <argument pos:start="147:40" pos:end="147:40"><expr pos:start="147:40" pos:end="147:40"><literal type="number" pos:start="147:40" pos:end="147:40">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <expr_stmt pos:start="149:13" pos:end="149:39"><expr pos:start="149:13" pos:end="149:38"><name pos:start="149:13" pos:end="149:18">tflags</name>  <operator pos:start="149:21" pos:end="149:21">=</operator> <call pos:start="149:23" pos:end="149:38"><name pos:start="149:23" pos:end="149:31">avio_rb16</name><argument_list pos:start="149:32" pos:end="149:38">(<argument pos:start="149:33" pos:end="149:37"><expr pos:start="149:33" pos:end="149:37"><name pos:start="149:33" pos:end="149:37"><name pos:start="149:33" pos:end="149:33">s</name><operator pos:start="149:34" pos:end="149:35">-&gt;</operator><name pos:start="149:36" pos:end="149:37">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="151:13" pos:end="151:50"><expr pos:start="151:13" pos:end="151:49"><name pos:start="151:13" pos:end="151:19">tunsync</name> <operator pos:start="151:21" pos:end="151:21">=</operator> <name pos:start="151:23" pos:end="151:28">tflags</name> <operator pos:start="151:30" pos:end="151:30">&amp;</operator> <name pos:start="151:32" pos:end="151:49">ID3v2_FLAG_UNSYNCH</name></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="153:11" pos:end="161:9">else <block pos:start="153:16" pos:end="161:9">{<block_content pos:start="155:13" pos:end="159:38">

            <expr_stmt pos:start="155:13" pos:end="155:37"><expr pos:start="155:13" pos:end="155:36"><call pos:start="155:13" pos:end="155:36"><name pos:start="155:13" pos:end="155:21">avio_read</name><argument_list pos:start="155:22" pos:end="155:36">(<argument pos:start="155:23" pos:end="155:27"><expr pos:start="155:23" pos:end="155:27"><name pos:start="155:23" pos:end="155:27"><name pos:start="155:23" pos:end="155:23">s</name><operator pos:start="155:24" pos:end="155:25">-&gt;</operator><name pos:start="155:26" pos:end="155:27">pb</name></name></expr></argument>, <argument pos:start="155:30" pos:end="155:32"><expr pos:start="155:30" pos:end="155:32"><name pos:start="155:30" pos:end="155:32">tag</name></expr></argument>, <argument pos:start="155:35" pos:end="155:35"><expr pos:start="155:35" pos:end="155:35"><literal type="number" pos:start="155:35" pos:end="155:35">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="157:13" pos:end="157:23"><expr pos:start="157:13" pos:end="157:22"><name pos:start="157:13" pos:end="157:18"><name pos:start="157:13" pos:end="157:15">tag</name><index pos:start="157:16" pos:end="157:18">[<expr pos:start="157:17" pos:end="157:17"><literal type="number" pos:start="157:17" pos:end="157:17">3</literal></expr>]</index></name> <operator pos:start="157:20" pos:end="157:20">=</operator> <literal type="number" pos:start="157:22" pos:end="157:22">0</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="159:13" pos:end="159:38"><expr pos:start="159:13" pos:end="159:37"><name pos:start="159:13" pos:end="159:16">tlen</name>   <operator pos:start="159:20" pos:end="159:20">=</operator> <call pos:start="159:22" pos:end="159:37"><name pos:start="159:22" pos:end="159:30">avio_rb24</name><argument_list pos:start="159:31" pos:end="159:37">(<argument pos:start="159:32" pos:end="159:36"><expr pos:start="159:32" pos:end="159:36"><name pos:start="159:32" pos:end="159:36"><name pos:start="159:32" pos:end="159:32">s</name><operator pos:start="159:33" pos:end="159:34">-&gt;</operator><name pos:start="159:35" pos:end="159:36">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="163:9" pos:end="165:18"><if pos:start="163:9" pos:end="165:18">if <condition pos:start="163:12" pos:end="163:27">(<expr pos:start="163:13" pos:end="163:26"><name pos:start="163:13" pos:end="163:16">tlen</name> <operator pos:start="163:18" pos:end="163:18">&gt;</operator> <operator pos:start="163:20" pos:end="163:20">(</operator><literal type="number" pos:start="163:21" pos:end="163:21">1</literal><operator pos:start="163:22" pos:end="163:23">&lt;&lt;</operator><literal type="number" pos:start="163:24" pos:end="163:25">28</literal><operator pos:start="163:26" pos:end="163:26">)</operator></expr>)</condition><block type="pseudo" pos:start="165:13" pos:end="165:18"><block_content pos:start="165:13" pos:end="165:18">

            <break pos:start="165:13" pos:end="165:18">break;</break></block_content></block></if></if_stmt>

        <expr_stmt pos:start="167:9" pos:end="167:32"><expr pos:start="167:9" pos:end="167:31"><name pos:start="167:9" pos:end="167:11">len</name> <operator pos:start="167:13" pos:end="167:14">-=</operator> <name pos:start="167:16" pos:end="167:24">taghdrlen</name> <operator pos:start="167:26" pos:end="167:26">+</operator> <name pos:start="167:28" pos:end="167:31">tlen</name></expr>;</expr_stmt>



        <if_stmt pos:start="171:9" pos:end="173:18"><if pos:start="171:9" pos:end="173:18">if <condition pos:start="171:12" pos:end="171:20">(<expr pos:start="171:13" pos:end="171:19"><name pos:start="171:13" pos:end="171:15">len</name> <operator pos:start="171:17" pos:end="171:17">&lt;</operator> <literal type="number" pos:start="171:19" pos:end="171:19">0</literal></expr>)</condition><block type="pseudo" pos:start="173:13" pos:end="173:18"><block_content pos:start="173:13" pos:end="173:18">

            <break pos:start="173:13" pos:end="173:18">break;</break></block_content></block></if></if_stmt>



        <expr_stmt pos:start="177:9" pos:end="177:39"><expr pos:start="177:9" pos:end="177:38"><name pos:start="177:9" pos:end="177:12">next</name> <operator pos:start="177:14" pos:end="177:14">=</operator> <call pos:start="177:16" pos:end="177:31"><name pos:start="177:16" pos:end="177:24">avio_tell</name><argument_list pos:start="177:25" pos:end="177:31">(<argument pos:start="177:26" pos:end="177:30"><expr pos:start="177:26" pos:end="177:30"><name pos:start="177:26" pos:end="177:30"><name pos:start="177:26" pos:end="177:26">s</name><operator pos:start="177:27" pos:end="177:28">-&gt;</operator><name pos:start="177:29" pos:end="177:30">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="177:33" pos:end="177:33">+</operator> <name pos:start="177:35" pos:end="177:38">tlen</name></expr>;</expr_stmt>



        <if_stmt pos:start="181:9" pos:end="191:9"><if pos:start="181:9" pos:end="191:9">if <condition pos:start="181:12" pos:end="181:18">(<expr pos:start="181:13" pos:end="181:17"><operator pos:start="181:13" pos:end="181:13">!</operator><name pos:start="181:14" pos:end="181:17">tlen</name></expr>)</condition> <block pos:start="181:20" pos:end="191:9">{<block_content pos:start="183:13" pos:end="189:21">

            <if_stmt pos:start="183:13" pos:end="187:28"><if pos:start="183:13" pos:end="187:28">if <condition pos:start="183:16" pos:end="183:23">(<expr pos:start="183:17" pos:end="183:22"><name pos:start="183:17" pos:end="183:22"><name pos:start="183:17" pos:end="183:19">tag</name><index pos:start="183:20" pos:end="183:22">[<expr pos:start="183:21" pos:end="183:21"><literal type="number" pos:start="183:21" pos:end="183:21">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="185:17" pos:end="187:28"><block_content pos:start="185:17" pos:end="187:28">

                <expr_stmt pos:start="185:17" pos:end="187:28"><expr pos:start="185:17" pos:end="187:27"><call pos:start="185:17" pos:end="187:27"><name pos:start="185:17" pos:end="185:22">av_log</name><argument_list pos:start="185:23" pos:end="187:27">(<argument pos:start="185:24" pos:end="185:24"><expr pos:start="185:24" pos:end="185:24"><name pos:start="185:24" pos:end="185:24">s</name></expr></argument>, <argument pos:start="185:27" pos:end="185:38"><expr pos:start="185:27" pos:end="185:38"><name pos:start="185:27" pos:end="185:38">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="185:41" pos:end="185:77"><expr pos:start="185:41" pos:end="185:77"><literal type="string" pos:start="185:41" pos:end="185:77">"Invalid empty frame %s, skipping.\n"</literal></expr></argument>,

                       <argument pos:start="187:24" pos:end="187:26"><expr pos:start="187:24" pos:end="187:26"><name pos:start="187:24" pos:end="187:26">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <continue pos:start="189:13" pos:end="189:21">continue;</continue>

        </block_content>}</block></if></if_stmt>



        <if_stmt pos:start="195:9" pos:end="207:24"><if pos:start="195:9" pos:end="205:9">if <condition pos:start="195:12" pos:end="195:40">(<expr pos:start="195:13" pos:end="195:39"><name pos:start="195:13" pos:end="195:18">tflags</name> <operator pos:start="195:20" pos:end="195:20">&amp;</operator> <name pos:start="195:22" pos:end="195:39">ID3v2_FLAG_DATALEN</name></expr>)</condition> <block pos:start="195:42" pos:end="205:9">{<block_content pos:start="197:13" pos:end="203:22">

            <if_stmt pos:start="197:13" pos:end="199:22"><if pos:start="197:13" pos:end="199:22">if <condition pos:start="197:16" pos:end="197:25">(<expr pos:start="197:17" pos:end="197:24"><name pos:start="197:17" pos:end="197:20">tlen</name> <operator pos:start="197:22" pos:end="197:22">&lt;</operator> <literal type="number" pos:start="197:24" pos:end="197:24">4</literal></expr>)</condition><block type="pseudo" pos:start="199:17" pos:end="199:22"><block_content pos:start="199:17" pos:end="199:22">

                <break pos:start="199:17" pos:end="199:22">break;</break></block_content></block></if></if_stmt>

            <expr_stmt pos:start="201:13" pos:end="201:36"><expr pos:start="201:13" pos:end="201:35"><name pos:start="201:13" pos:end="201:16">dlen</name> <operator pos:start="201:18" pos:end="201:18">=</operator> <call pos:start="201:20" pos:end="201:35"><name pos:start="201:20" pos:end="201:28">avio_rb32</name><argument_list pos:start="201:29" pos:end="201:35">(<argument pos:start="201:30" pos:end="201:34"><expr pos:start="201:30" pos:end="201:34"><name pos:start="201:30" pos:end="201:34"><name pos:start="201:30" pos:end="201:30">s</name><operator pos:start="201:31" pos:end="201:32">-&gt;</operator><name pos:start="201:33" pos:end="201:34">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="203:13" pos:end="203:22"><expr pos:start="203:13" pos:end="203:21"><name pos:start="203:13" pos:end="203:16">tlen</name> <operator pos:start="203:18" pos:end="203:19">-=</operator> <literal type="number" pos:start="203:21" pos:end="203:21">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="205:11" pos:end="207:24">else<block type="pseudo" pos:start="207:13" pos:end="207:24"><block_content pos:start="207:13" pos:end="207:24">

            <expr_stmt pos:start="207:13" pos:end="207:24"><expr pos:start="207:13" pos:end="207:23"><name pos:start="207:13" pos:end="207:16">dlen</name> <operator pos:start="207:18" pos:end="207:18">=</operator> <name pos:start="207:20" pos:end="207:23">tlen</name></expr>;</expr_stmt></block_content></block></else></if_stmt>



        <expr_stmt pos:start="211:9" pos:end="211:48"><expr pos:start="211:9" pos:end="211:47"><name pos:start="211:9" pos:end="211:13">tcomp</name> <operator pos:start="211:15" pos:end="211:15">=</operator> <name pos:start="211:17" pos:end="211:22">tflags</name> <operator pos:start="211:24" pos:end="211:24">&amp;</operator> <name pos:start="211:26" pos:end="211:47">ID3v2_FLAG_COMPRESSION</name></expr>;</expr_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:47"><expr pos:start="213:9" pos:end="213:46"><name pos:start="213:9" pos:end="213:13">tencr</name> <operator pos:start="213:15" pos:end="213:15">=</operator> <name pos:start="213:17" pos:end="213:22">tflags</name> <operator pos:start="213:24" pos:end="213:24">&amp;</operator> <name pos:start="213:26" pos:end="213:46">ID3v2_FLAG_ENCRYPTION</name></expr>;</expr_stmt>



        <comment type="block" pos:start="217:9" pos:end="217:66">/* skip encrypted tags and, if no zlib, compressed tags */</comment>

        <if_stmt pos:start="219:9" pos:end="391:9"><if pos:start="219:9" pos:end="243:9">if <condition pos:start="219:12" pos:end="219:45">(<expr pos:start="219:13" pos:end="219:44"><name pos:start="219:13" pos:end="219:17">tencr</name> <operator pos:start="219:19" pos:end="219:20">||</operator> <operator pos:start="219:22" pos:end="219:22">(</operator><operator pos:start="219:23" pos:end="219:23">!</operator><name pos:start="219:24" pos:end="219:34">CONFIG_ZLIB</name> <operator pos:start="219:36" pos:end="219:37">&amp;&amp;</operator> <name pos:start="219:39" pos:end="219:43">tcomp</name><operator pos:start="219:44" pos:end="219:44">)</operator></expr>)</condition> <block pos:start="219:47" pos:end="243:9">{<block_content pos:start="221:13" pos:end="239:35">

            <decl_stmt pos:start="221:13" pos:end="221:29"><decl pos:start="221:13" pos:end="221:28"><type pos:start="221:13" pos:end="221:24"><specifier pos:start="221:13" pos:end="221:17">const</specifier> <name pos:start="221:19" pos:end="221:22">char</name> <modifier pos:start="221:24" pos:end="221:24">*</modifier></type><name pos:start="221:25" pos:end="221:28">type</name></decl>;</decl_stmt>

            <if_stmt pos:start="223:13" pos:end="233:50"><if pos:start="223:13" pos:end="225:35">if <condition pos:start="223:16" pos:end="223:23">(<expr pos:start="223:17" pos:end="223:22"><operator pos:start="223:17" pos:end="223:17">!</operator><name pos:start="223:18" pos:end="223:22">tcomp</name></expr>)</condition><block type="pseudo" pos:start="225:17" pos:end="225:35"><block_content pos:start="225:17" pos:end="225:35">

                <expr_stmt pos:start="225:17" pos:end="225:35"><expr pos:start="225:17" pos:end="225:34"><name pos:start="225:17" pos:end="225:20">type</name> <operator pos:start="225:22" pos:end="225:22">=</operator> <literal type="string" pos:start="225:24" pos:end="225:34">"encrypted"</literal></expr>;</expr_stmt></block_content></block></if>

            <if type="elseif" pos:start="227:13" pos:end="229:36">else if <condition pos:start="227:21" pos:end="227:28">(<expr pos:start="227:22" pos:end="227:27"><operator pos:start="227:22" pos:end="227:22">!</operator><name pos:start="227:23" pos:end="227:27">tencr</name></expr>)</condition><block type="pseudo" pos:start="229:17" pos:end="229:36"><block_content pos:start="229:17" pos:end="229:36">

                <expr_stmt pos:start="229:17" pos:end="229:36"><expr pos:start="229:17" pos:end="229:35"><name pos:start="229:17" pos:end="229:20">type</name> <operator pos:start="229:22" pos:end="229:22">=</operator> <literal type="string" pos:start="229:24" pos:end="229:35">"compressed"</literal></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="231:13" pos:end="233:50">else<block type="pseudo" pos:start="233:17" pos:end="233:50"><block_content pos:start="233:17" pos:end="233:50">

                <expr_stmt pos:start="233:17" pos:end="233:50"><expr pos:start="233:17" pos:end="233:49"><name pos:start="233:17" pos:end="233:20">type</name> <operator pos:start="233:22" pos:end="233:22">=</operator> <literal type="string" pos:start="233:24" pos:end="233:49">"encrypted and compressed"</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>



            <expr_stmt pos:start="237:13" pos:end="237:82"><expr pos:start="237:13" pos:end="237:81"><call pos:start="237:13" pos:end="237:81"><name pos:start="237:13" pos:end="237:18">av_log</name><argument_list pos:start="237:19" pos:end="237:81">(<argument pos:start="237:20" pos:end="237:20"><expr pos:start="237:20" pos:end="237:20"><name pos:start="237:20" pos:end="237:20">s</name></expr></argument>, <argument pos:start="237:23" pos:end="237:36"><expr pos:start="237:23" pos:end="237:36"><name pos:start="237:23" pos:end="237:36">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="237:39" pos:end="237:69"><expr pos:start="237:39" pos:end="237:69"><literal type="string" pos:start="237:39" pos:end="237:69">"Skipping %s ID3v2 frame %s.\n"</literal></expr></argument>, <argument pos:start="237:72" pos:end="237:75"><expr pos:start="237:72" pos:end="237:75"><name pos:start="237:72" pos:end="237:75">type</name></expr></argument>, <argument pos:start="237:78" pos:end="237:80"><expr pos:start="237:78" pos:end="237:80"><name pos:start="237:78" pos:end="237:80">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="239:13" pos:end="239:35"><expr pos:start="239:13" pos:end="239:34"><call pos:start="239:13" pos:end="239:34"><name pos:start="239:13" pos:end="239:21">avio_skip</name><argument_list pos:start="239:22" pos:end="239:34">(<argument pos:start="239:23" pos:end="239:27"><expr pos:start="239:23" pos:end="239:27"><name pos:start="239:23" pos:end="239:27"><name pos:start="239:23" pos:end="239:23">s</name><operator pos:start="239:24" pos:end="239:25">-&gt;</operator><name pos:start="239:26" pos:end="239:27">pb</name></name></expr></argument>, <argument pos:start="239:30" pos:end="239:33"><expr pos:start="239:30" pos:end="239:33"><name pos:start="239:30" pos:end="239:33">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block" pos:start="241:9" pos:end="241:62">/* check for text tag or supported special meta tag */</comment>

        </block_content>}</block></if> <if type="elseif" pos:start="243:11" pos:end="381:9">else if <condition pos:start="243:19" pos:end="247:68">(<expr pos:start="243:20" pos:end="247:67"><name pos:start="243:20" pos:end="243:25"><name pos:start="243:20" pos:end="243:22">tag</name><index pos:start="243:23" pos:end="243:25">[<expr pos:start="243:24" pos:end="243:24"><literal type="number" pos:start="243:24" pos:end="243:24">0</literal></expr>]</index></name> <operator pos:start="243:27" pos:end="243:28">==</operator> <literal type="char" pos:start="243:30" pos:end="243:32">'T'</literal> <operator pos:start="243:34" pos:end="243:35">||</operator>

                   <operator pos:start="245:20" pos:end="245:20">(</operator><name pos:start="245:21" pos:end="245:30">extra_meta</name> <operator pos:start="245:32" pos:end="245:33">&amp;&amp;</operator>

                    <operator pos:start="247:21" pos:end="247:21">(</operator><name pos:start="247:22" pos:end="247:31">extra_func</name> <operator pos:start="247:33" pos:end="247:33">=</operator> <call pos:start="247:35" pos:end="247:65"><name pos:start="247:35" pos:end="247:53">get_extra_meta_func</name><argument_list pos:start="247:54" pos:end="247:65">(<argument pos:start="247:55" pos:end="247:57"><expr pos:start="247:55" pos:end="247:57"><name pos:start="247:55" pos:end="247:57">tag</name></expr></argument>, <argument pos:start="247:60" pos:end="247:64"><expr pos:start="247:60" pos:end="247:64"><name pos:start="247:60" pos:end="247:64">isv34</name></expr></argument>)</argument_list></call><operator pos:start="247:66" pos:end="247:66">)</operator><operator pos:start="247:67" pos:end="247:67">)</operator></expr>)</condition> <block pos:start="247:70" pos:end="381:9">{<block_content pos:start="249:13" pos:end="379:64">

            <expr_stmt pos:start="249:13" pos:end="249:24"><expr pos:start="249:13" pos:end="249:23"><name pos:start="249:13" pos:end="249:15">pbx</name> <operator pos:start="249:17" pos:end="249:17">=</operator> <name pos:start="249:19" pos:end="249:23"><name pos:start="249:19" pos:end="249:19">s</name><operator pos:start="249:20" pos:end="249:21">-&gt;</operator><name pos:start="249:22" pos:end="249:23">pb</name></name></expr>;</expr_stmt>



            <if_stmt pos:start="253:13" pos:end="265:13"><if pos:start="253:13" pos:end="265:13">if <condition pos:start="253:16" pos:end="253:43">(<expr pos:start="253:17" pos:end="253:42"><name pos:start="253:17" pos:end="253:22">unsync</name> <operator pos:start="253:24" pos:end="253:25">||</operator> <name pos:start="253:27" pos:end="253:33">tunsync</name> <operator pos:start="253:35" pos:end="253:36">||</operator> <name pos:start="253:38" pos:end="253:42">tcomp</name></expr>)</condition> <block pos:start="253:45" pos:end="265:13">{<block_content pos:start="255:17" pos:end="263:17">

                <expr_stmt pos:start="255:17" pos:end="255:60"><expr pos:start="255:17" pos:end="255:59"><call pos:start="255:17" pos:end="255:59"><name pos:start="255:17" pos:end="255:30">av_fast_malloc</name><argument_list pos:start="255:31" pos:end="255:59">(<argument pos:start="255:32" pos:end="255:38"><expr pos:start="255:32" pos:end="255:38"><operator pos:start="255:32" pos:end="255:32">&amp;</operator><name pos:start="255:33" pos:end="255:38">buffer</name></expr></argument>, <argument pos:start="255:41" pos:end="255:52"><expr pos:start="255:41" pos:end="255:52"><operator pos:start="255:41" pos:end="255:41">&amp;</operator><name pos:start="255:42" pos:end="255:52">buffer_size</name></expr></argument>, <argument pos:start="255:55" pos:end="255:58"><expr pos:start="255:55" pos:end="255:58"><name pos:start="255:55" pos:end="255:58">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="257:17" pos:end="263:17"><if pos:start="257:17" pos:end="263:17">if <condition pos:start="257:20" pos:end="257:28">(<expr pos:start="257:21" pos:end="257:27"><operator pos:start="257:21" pos:end="257:21">!</operator><name pos:start="257:22" pos:end="257:27">buffer</name></expr>)</condition> <block pos:start="257:30" pos:end="263:17">{<block_content pos:start="259:21" pos:end="261:30">

                    <expr_stmt pos:start="259:21" pos:end="259:80"><expr pos:start="259:21" pos:end="259:79"><call pos:start="259:21" pos:end="259:79"><name pos:start="259:21" pos:end="259:26">av_log</name><argument_list pos:start="259:27" pos:end="259:79">(<argument pos:start="259:28" pos:end="259:28"><expr pos:start="259:28" pos:end="259:28"><name pos:start="259:28" pos:end="259:28">s</name></expr></argument>, <argument pos:start="259:31" pos:end="259:42"><expr pos:start="259:31" pos:end="259:42"><name pos:start="259:31" pos:end="259:42">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="259:45" pos:end="259:72"><expr pos:start="259:45" pos:end="259:72"><literal type="string" pos:start="259:45" pos:end="259:72">"Failed to alloc %d bytes\n"</literal></expr></argument>, <argument pos:start="259:75" pos:end="259:78"><expr pos:start="259:75" pos:end="259:78"><name pos:start="259:75" pos:end="259:78">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <goto pos:start="261:21" pos:end="261:30">goto <name pos:start="261:26" pos:end="261:29">seek</name>;</goto>

                </block_content>}</block></if></if_stmt>

            </block_content>}</block></if></if_stmt>

            <if_stmt pos:start="267:13" pos:end="308:0"><if pos:start="267:13" pos:end="308:0">if <condition pos:start="267:16" pos:end="267:34">(<expr pos:start="267:17" pos:end="267:33"><name pos:start="267:17" pos:end="267:22">unsync</name> <operator pos:start="267:24" pos:end="267:25">||</operator> <name pos:start="267:27" pos:end="267:33">tunsync</name></expr>)</condition> <block pos:start="267:36" pos:end="308:0">{<block_content pos:start="269:17" pos:end="301:27">

                <decl_stmt pos:start="269:17" pos:end="269:54"><decl pos:start="269:17" pos:end="269:53"><type pos:start="269:17" pos:end="269:23"><name pos:start="269:17" pos:end="269:23">int64_t</name></type> <name pos:start="269:25" pos:end="269:27">end</name> <init pos:start="269:29" pos:end="269:53">= <expr pos:start="269:31" pos:end="269:53"><call pos:start="269:31" pos:end="269:46"><name pos:start="269:31" pos:end="269:39">avio_tell</name><argument_list pos:start="269:40" pos:end="269:46">(<argument pos:start="269:41" pos:end="269:45"><expr pos:start="269:41" pos:end="269:45"><name pos:start="269:41" pos:end="269:45"><name pos:start="269:41" pos:end="269:41">s</name><operator pos:start="269:42" pos:end="269:43">-&gt;</operator><name pos:start="269:44" pos:end="269:45">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="269:48" pos:end="269:48">+</operator> <name pos:start="269:50" pos:end="269:53">tlen</name></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="271:17" pos:end="271:27"><decl pos:start="271:17" pos:end="271:26"><type pos:start="271:17" pos:end="271:25"><name pos:start="271:17" pos:end="271:23">uint8_t</name> <modifier pos:start="271:25" pos:end="271:25">*</modifier></type><name pos:start="271:26" pos:end="271:26">b</name></decl>;</decl_stmt>



                <expr_stmt pos:start="275:17" pos:end="275:27"><expr pos:start="275:17" pos:end="275:26"><name pos:start="275:17" pos:end="275:17">b</name> <operator pos:start="275:19" pos:end="275:19">=</operator> <name pos:start="275:21" pos:end="275:26">buffer</name></expr>;</expr_stmt>

                <while pos:start="277:17" pos:end="293:17">while <condition pos:start="277:23" pos:end="277:90">(<expr pos:start="277:24" pos:end="277:89"><call pos:start="277:24" pos:end="277:39"><name pos:start="277:24" pos:end="277:32">avio_tell</name><argument_list pos:start="277:33" pos:end="277:39">(<argument pos:start="277:34" pos:end="277:38"><expr pos:start="277:34" pos:end="277:38"><name pos:start="277:34" pos:end="277:38"><name pos:start="277:34" pos:end="277:34">s</name><operator pos:start="277:35" pos:end="277:36">-&gt;</operator><name pos:start="277:37" pos:end="277:38">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="277:41" pos:end="277:41">&lt;</operator> <name pos:start="277:43" pos:end="277:45">end</name> <operator pos:start="277:47" pos:end="277:48">&amp;&amp;</operator> <name pos:start="277:50" pos:end="277:50">b</name> <operator pos:start="277:52" pos:end="277:52">-</operator> <name pos:start="277:54" pos:end="277:59">buffer</name> <operator pos:start="277:61" pos:end="277:61">&lt;</operator> <name pos:start="277:63" pos:end="277:66">tlen</name> <operator pos:start="277:68" pos:end="277:69">&amp;&amp;</operator> <operator pos:start="277:71" pos:end="277:71">!</operator><name pos:start="277:72" pos:end="277:89"><name pos:start="277:72" pos:end="277:72">s</name><operator pos:start="277:73" pos:end="277:74">-&gt;</operator><name pos:start="277:75" pos:end="277:76">pb</name><operator pos:start="277:77" pos:end="277:78">-&gt;</operator><name pos:start="277:79" pos:end="277:89">eof_reached</name></name></expr>)</condition> <block pos:start="277:92" pos:end="293:17">{<block_content pos:start="279:21" pos:end="291:21">

                    <expr_stmt pos:start="279:21" pos:end="279:42"><expr pos:start="279:21" pos:end="279:41"><operator pos:start="279:21" pos:end="279:21">*</operator><name pos:start="279:22" pos:end="279:22">b</name><operator pos:start="279:23" pos:end="279:24">++</operator> <operator pos:start="279:26" pos:end="279:26">=</operator> <call pos:start="279:28" pos:end="279:41"><name pos:start="279:28" pos:end="279:34">avio_r8</name><argument_list pos:start="279:35" pos:end="279:41">(<argument pos:start="279:36" pos:end="279:40"><expr pos:start="279:36" pos:end="279:40"><name pos:start="279:36" pos:end="279:40"><name pos:start="279:36" pos:end="279:36">s</name><operator pos:start="279:37" pos:end="279:38">-&gt;</operator><name pos:start="279:39" pos:end="279:40">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="281:21" pos:end="291:21"><if pos:start="281:21" pos:end="291:21">if <condition pos:start="281:24" pos:end="285:45">(<expr pos:start="281:25" pos:end="285:43"><operator pos:start="281:25" pos:end="281:25">*</operator><operator pos:start="281:26" pos:end="281:26">(</operator><name pos:start="281:27" pos:end="281:27">b</name> <operator pos:start="281:29" pos:end="281:29">-</operator> <literal type="number" pos:start="281:31" pos:end="281:31">1</literal><operator pos:start="281:32" pos:end="281:32">)</operator> <operator pos:start="281:34" pos:end="281:35">==</operator> <literal type="number" pos:start="281:37" pos:end="281:40">0xff</literal> <operator pos:start="281:42" pos:end="281:43">&amp;&amp;</operator> <call pos:start="281:45" pos:end="281:60"><name pos:start="281:45" pos:end="281:53">avio_tell</name><argument_list pos:start="281:54" pos:end="281:60">(<argument pos:start="281:55" pos:end="281:59"><expr pos:start="281:55" pos:end="281:59"><name pos:start="281:55" pos:end="281:59"><name pos:start="281:55" pos:end="281:55">s</name><operator pos:start="281:56" pos:end="281:57">-&gt;</operator><name pos:start="281:58" pos:end="281:59">pb</name></name></expr></argument>)</argument_list></call> <operator pos:start="281:62" pos:end="281:62">&lt;</operator> <name pos:start="281:64" pos:end="281:66">end</name> <operator pos:start="281:68" pos:end="281:68">-</operator> <literal type="number" pos:start="281:70" pos:end="281:70">1</literal> <operator pos:start="281:72" pos:end="281:73">&amp;&amp;</operator>

                        <name pos:start="283:25" pos:end="283:25">b</name> <operator pos:start="283:27" pos:end="283:27">-</operator> <name pos:start="283:29" pos:end="283:34">buffer</name> <operator pos:start="283:36" pos:end="283:36">&lt;</operator> <name pos:start="283:38" pos:end="283:41">tlen</name> <operator pos:start="283:43" pos:end="283:44">&amp;&amp;</operator>

                        <operator pos:start="285:25" pos:end="285:25">!</operator><name pos:start="285:26" pos:end="285:43"><name pos:start="285:26" pos:end="285:26">s</name><operator pos:start="285:27" pos:end="285:28">-&gt;</operator><name pos:start="285:29" pos:end="285:30">pb</name><operator pos:start="285:31" pos:end="285:32">-&gt;</operator><name pos:start="285:33" pos:end="285:43">eof_reached</name></name></expr> )</condition> <block pos:start="285:47" pos:end="291:21">{<block_content pos:start="287:25" pos:end="289:58">

                        <decl_stmt pos:start="287:25" pos:end="287:53"><decl pos:start="287:25" pos:end="287:52"><type pos:start="287:25" pos:end="287:31"><name pos:start="287:25" pos:end="287:31">uint8_t</name></type> <name pos:start="287:33" pos:end="287:35">val</name> <init pos:start="287:37" pos:end="287:52">= <expr pos:start="287:39" pos:end="287:52"><call pos:start="287:39" pos:end="287:52"><name pos:start="287:39" pos:end="287:45">avio_r8</name><argument_list pos:start="287:46" pos:end="287:52">(<argument pos:start="287:47" pos:end="287:51"><expr pos:start="287:47" pos:end="287:51"><name pos:start="287:47" pos:end="287:51"><name pos:start="287:47" pos:end="287:47">s</name><operator pos:start="287:48" pos:end="287:49">-&gt;</operator><name pos:start="287:50" pos:end="287:51">pb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt pos:start="289:25" pos:end="289:58"><expr pos:start="289:25" pos:end="289:57"><operator pos:start="289:25" pos:end="289:25">*</operator><name pos:start="289:26" pos:end="289:26">b</name><operator pos:start="289:27" pos:end="289:28">++</operator> <operator pos:start="289:30" pos:end="289:30">=</operator> <ternary pos:start="289:32" pos:end="289:57"><condition pos:start="289:32" pos:end="289:36"><expr pos:start="289:32" pos:end="289:34"><name pos:start="289:32" pos:end="289:34">val</name></expr> ?</condition><then pos:start="289:38" pos:end="289:40"> <expr pos:start="289:38" pos:end="289:40"><name pos:start="289:38" pos:end="289:40">val</name></expr> </then><else pos:start="289:42" pos:end="289:57">: <expr pos:start="289:44" pos:end="289:57"><call pos:start="289:44" pos:end="289:57"><name pos:start="289:44" pos:end="289:50">avio_r8</name><argument_list pos:start="289:51" pos:end="289:57">(<argument pos:start="289:52" pos:end="289:56"><expr pos:start="289:52" pos:end="289:56"><name pos:start="289:52" pos:end="289:56"><name pos:start="289:52" pos:end="289:52">s</name><operator pos:start="289:53" pos:end="289:54">-&gt;</operator><name pos:start="289:55" pos:end="289:56">pb</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></while>

                <expr_stmt pos:start="295:17" pos:end="297:40"><expr pos:start="295:17" pos:end="297:39"><call pos:start="295:17" pos:end="297:39"><name pos:start="295:17" pos:end="295:33">ffio_init_context</name><argument_list pos:start="295:34" pos:end="297:39">(<argument pos:start="295:35" pos:end="295:37"><expr pos:start="295:35" pos:end="295:37"><operator pos:start="295:35" pos:end="295:35">&amp;</operator><name pos:start="295:36" pos:end="295:37">pb</name></expr></argument>, <argument pos:start="295:40" pos:end="295:45"><expr pos:start="295:40" pos:end="295:45"><name pos:start="295:40" pos:end="295:45">buffer</name></expr></argument>, <argument pos:start="295:48" pos:end="295:57"><expr pos:start="295:48" pos:end="295:57"><name pos:start="295:48" pos:end="295:48">b</name> <operator pos:start="295:50" pos:end="295:50">-</operator> <name pos:start="295:52" pos:end="295:57">buffer</name></expr></argument>, <argument pos:start="295:60" pos:end="295:60"><expr pos:start="295:60" pos:end="295:60"><literal type="number" pos:start="295:60" pos:end="295:60">0</literal></expr></argument>, <argument pos:start="295:63" pos:end="295:66"><expr pos:start="295:63" pos:end="295:66"><name pos:start="295:63" pos:end="295:66">NULL</name></expr></argument>, <argument pos:start="295:69" pos:end="295:72"><expr pos:start="295:69" pos:end="295:72"><name pos:start="295:69" pos:end="295:72">NULL</name></expr></argument>, <argument pos:start="295:75" pos:end="295:78"><expr pos:start="295:75" pos:end="295:78"><name pos:start="295:75" pos:end="295:78">NULL</name></expr></argument>,

                                  <argument pos:start="297:35" pos:end="297:38"><expr pos:start="297:35" pos:end="297:38"><name pos:start="297:35" pos:end="297:38">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="299:17" pos:end="299:34"><expr pos:start="299:17" pos:end="299:33"><name pos:start="299:17" pos:end="299:20">tlen</name> <operator pos:start="299:22" pos:end="299:22">=</operator> <name pos:start="299:24" pos:end="299:24">b</name> <operator pos:start="299:26" pos:end="299:26">-</operator> <name pos:start="299:28" pos:end="299:33">buffer</name></expr>;</expr_stmt>

                <expr_stmt pos:start="301:17" pos:end="301:27"><expr pos:start="301:17" pos:end="301:26"><name pos:start="301:17" pos:end="301:19">pbx</name>  <operator pos:start="301:22" pos:end="301:22">=</operator> <operator pos:start="301:24" pos:end="301:24">&amp;</operator><name pos:start="301:25" pos:end="301:26">pb</name></expr>;</expr_stmt> <comment type="line" pos:start="301:29" pos:end="301:52">// read from sync buffer</comment>

            </block_content>}</block></if></if_stmt>



<cpp:if pos:start="307:1" pos:end="307:15">#<cpp:directive pos:start="307:2" pos:end="307:3">if</cpp:directive> <expr pos:start="307:5" pos:end="307:15"><name pos:start="307:5" pos:end="307:15">CONFIG_ZLIB</name></expr></cpp:if>

                <if_stmt pos:start="309:17" pos:end="368:0"><if pos:start="309:17" pos:end="368:0">if <condition pos:start="309:20" pos:end="309:26">(<expr pos:start="309:21" pos:end="309:25"><name pos:start="309:21" pos:end="309:25">tcomp</name></expr>)</condition> <block pos:start="309:28" pos:end="368:0">{<block_content pos:start="311:21" pos:end="363:30">

                    <decl_stmt pos:start="311:21" pos:end="311:28"><decl pos:start="311:21" pos:end="311:27"><type pos:start="311:21" pos:end="311:23"><name pos:start="311:21" pos:end="311:23">int</name></type> <name pos:start="311:25" pos:end="311:27">err</name></decl>;</decl_stmt>



                    <expr_stmt pos:start="315:21" pos:end="315:104"><expr pos:start="315:21" pos:end="315:103"><call pos:start="315:21" pos:end="315:103"><name pos:start="315:21" pos:end="315:26">av_log</name><argument_list pos:start="315:27" pos:end="315:103">(<argument pos:start="315:28" pos:end="315:28"><expr pos:start="315:28" pos:end="315:28"><name pos:start="315:28" pos:end="315:28">s</name></expr></argument>, <argument pos:start="315:31" pos:end="315:42"><expr pos:start="315:31" pos:end="315:42"><name pos:start="315:31" pos:end="315:42">AV_LOG_DEBUG</name></expr></argument>, <argument pos:start="315:45" pos:end="315:85"><expr pos:start="315:45" pos:end="315:85"><literal type="string" pos:start="315:45" pos:end="315:85">"Compresssed frame %s tlen=%d dlen=%ld\n"</literal></expr></argument>, <argument pos:start="315:88" pos:end="315:90"><expr pos:start="315:88" pos:end="315:90"><name pos:start="315:88" pos:end="315:90">tag</name></expr></argument>, <argument pos:start="315:93" pos:end="315:96"><expr pos:start="315:93" pos:end="315:96"><name pos:start="315:93" pos:end="315:96">tlen</name></expr></argument>, <argument pos:start="315:99" pos:end="315:102"><expr pos:start="315:99" pos:end="315:102"><name pos:start="315:99" pos:end="315:102">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



                    <expr_stmt pos:start="319:21" pos:end="319:90"><expr pos:start="319:21" pos:end="319:89"><call pos:start="319:21" pos:end="319:89"><name pos:start="319:21" pos:end="319:34">av_fast_malloc</name><argument_list pos:start="319:35" pos:end="319:89">(<argument pos:start="319:36" pos:end="319:55"><expr pos:start="319:36" pos:end="319:55"><operator pos:start="319:36" pos:end="319:36">&amp;</operator><name pos:start="319:37" pos:end="319:55">uncompressed_buffer</name></expr></argument>, <argument pos:start="319:58" pos:end="319:82"><expr pos:start="319:58" pos:end="319:82"><operator pos:start="319:58" pos:end="319:58">&amp;</operator><name pos:start="319:59" pos:end="319:82">uncompressed_buffer_size</name></expr></argument>, <argument pos:start="319:85" pos:end="319:88"><expr pos:start="319:85" pos:end="319:88"><name pos:start="319:85" pos:end="319:88">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="321:21" pos:end="327:21"><if pos:start="321:21" pos:end="327:21">if <condition pos:start="321:24" pos:end="321:45">(<expr pos:start="321:25" pos:end="321:44"><operator pos:start="321:25" pos:end="321:25">!</operator><name pos:start="321:26" pos:end="321:44">uncompressed_buffer</name></expr>)</condition> <block pos:start="321:47" pos:end="327:21">{<block_content pos:start="323:25" pos:end="325:34">

                        <expr_stmt pos:start="323:25" pos:end="323:85"><expr pos:start="323:25" pos:end="323:84"><call pos:start="323:25" pos:end="323:84"><name pos:start="323:25" pos:end="323:30">av_log</name><argument_list pos:start="323:31" pos:end="323:84">(<argument pos:start="323:32" pos:end="323:32"><expr pos:start="323:32" pos:end="323:32"><name pos:start="323:32" pos:end="323:32">s</name></expr></argument>, <argument pos:start="323:35" pos:end="323:46"><expr pos:start="323:35" pos:end="323:46"><name pos:start="323:35" pos:end="323:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="323:49" pos:end="323:77"><expr pos:start="323:49" pos:end="323:77"><literal type="string" pos:start="323:49" pos:end="323:77">"Failed to alloc %ld bytes\n"</literal></expr></argument>, <argument pos:start="323:80" pos:end="323:83"><expr pos:start="323:80" pos:end="323:83"><name pos:start="323:80" pos:end="323:83">dlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="325:25" pos:end="325:34">goto <name pos:start="325:30" pos:end="325:33">seek</name>;</goto>

                    </block_content>}</block></if></if_stmt>



                    <if_stmt pos:start="331:21" pos:end="345:21"><if pos:start="331:21" pos:end="345:21">if <condition pos:start="331:24" pos:end="331:45">(<expr pos:start="331:25" pos:end="331:44"><operator pos:start="331:25" pos:end="331:25">!</operator><operator pos:start="331:26" pos:end="331:26">(</operator><name pos:start="331:27" pos:end="331:32">unsync</name> <operator pos:start="331:34" pos:end="331:35">||</operator> <name pos:start="331:37" pos:end="331:43">tunsync</name><operator pos:start="331:44" pos:end="331:44">)</operator></expr>)</condition> <block pos:start="331:47" pos:end="345:21">{<block_content pos:start="333:25" pos:end="343:35">

                        <expr_stmt pos:start="333:25" pos:end="333:61"><expr pos:start="333:25" pos:end="333:60"><name pos:start="333:25" pos:end="333:27">err</name> <operator pos:start="333:29" pos:end="333:29">=</operator> <call pos:start="333:31" pos:end="333:60"><name pos:start="333:31" pos:end="333:39">avio_read</name><argument_list pos:start="333:40" pos:end="333:60">(<argument pos:start="333:41" pos:end="333:45"><expr pos:start="333:41" pos:end="333:45"><name pos:start="333:41" pos:end="333:45"><name pos:start="333:41" pos:end="333:41">s</name><operator pos:start="333:42" pos:end="333:43">-&gt;</operator><name pos:start="333:44" pos:end="333:45">pb</name></name></expr></argument>, <argument pos:start="333:48" pos:end="333:53"><expr pos:start="333:48" pos:end="333:53"><name pos:start="333:48" pos:end="333:53">buffer</name></expr></argument>, <argument pos:start="333:56" pos:end="333:59"><expr pos:start="333:56" pos:end="333:59"><name pos:start="333:56" pos:end="333:59">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <if_stmt pos:start="335:25" pos:end="341:25"><if pos:start="335:25" pos:end="341:25">if <condition pos:start="335:28" pos:end="335:36">(<expr pos:start="335:29" pos:end="335:35"><name pos:start="335:29" pos:end="335:31">err</name> <operator pos:start="335:33" pos:end="335:33">&lt;</operator> <literal type="number" pos:start="335:35" pos:end="335:35">0</literal></expr>)</condition> <block pos:start="335:38" pos:end="341:25">{<block_content pos:start="337:29" pos:end="339:38">

                            <expr_stmt pos:start="337:29" pos:end="337:87"><expr pos:start="337:29" pos:end="337:86"><call pos:start="337:29" pos:end="337:86"><name pos:start="337:29" pos:end="337:34">av_log</name><argument_list pos:start="337:35" pos:end="337:86">(<argument pos:start="337:36" pos:end="337:36"><expr pos:start="337:36" pos:end="337:36"><name pos:start="337:36" pos:end="337:36">s</name></expr></argument>, <argument pos:start="337:39" pos:end="337:50"><expr pos:start="337:39" pos:end="337:50"><name pos:start="337:39" pos:end="337:50">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="337:53" pos:end="337:85"><expr pos:start="337:53" pos:end="337:85"><literal type="string" pos:start="337:53" pos:end="337:85">"Failed to read compressed tag\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                            <goto pos:start="339:29" pos:end="339:38">goto <name pos:start="339:34" pos:end="339:37">seek</name>;</goto>

                        </block_content>}</block></if></if_stmt>

                        <expr_stmt pos:start="343:25" pos:end="343:35"><expr pos:start="343:25" pos:end="343:34"><name pos:start="343:25" pos:end="343:28">tlen</name> <operator pos:start="343:30" pos:end="343:30">=</operator> <name pos:start="343:32" pos:end="343:34">err</name></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>



                    <expr_stmt pos:start="349:21" pos:end="349:79"><expr pos:start="349:21" pos:end="349:78"><name pos:start="349:21" pos:end="349:23">err</name> <operator pos:start="349:25" pos:end="349:25">=</operator> <call pos:start="349:27" pos:end="349:78"><name pos:start="349:27" pos:end="349:36">uncompress</name><argument_list pos:start="349:37" pos:end="349:78">(<argument pos:start="349:38" pos:end="349:56"><expr pos:start="349:38" pos:end="349:56"><name pos:start="349:38" pos:end="349:56">uncompressed_buffer</name></expr></argument>, <argument pos:start="349:59" pos:end="349:63"><expr pos:start="349:59" pos:end="349:63"><operator pos:start="349:59" pos:end="349:59">&amp;</operator><name pos:start="349:60" pos:end="349:63">dlen</name></expr></argument>, <argument pos:start="349:66" pos:end="349:71"><expr pos:start="349:66" pos:end="349:71"><name pos:start="349:66" pos:end="349:71">buffer</name></expr></argument>, <argument pos:start="349:74" pos:end="349:77"><expr pos:start="349:74" pos:end="349:77"><name pos:start="349:74" pos:end="349:77">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="351:21" pos:end="357:21"><if pos:start="351:21" pos:end="357:21">if <condition pos:start="351:24" pos:end="351:36">(<expr pos:start="351:25" pos:end="351:35"><name pos:start="351:25" pos:end="351:27">err</name> <operator pos:start="351:29" pos:end="351:30">!=</operator> <name pos:start="351:32" pos:end="351:35">Z_OK</name></expr>)</condition> <block pos:start="351:38" pos:end="357:21">{<block_content pos:start="353:25" pos:end="355:34">

                        <expr_stmt pos:start="353:25" pos:end="353:87"><expr pos:start="353:25" pos:end="353:86"><call pos:start="353:25" pos:end="353:86"><name pos:start="353:25" pos:end="353:30">av_log</name><argument_list pos:start="353:31" pos:end="353:86">(<argument pos:start="353:32" pos:end="353:32"><expr pos:start="353:32" pos:end="353:32"><name pos:start="353:32" pos:end="353:32">s</name></expr></argument>, <argument pos:start="353:35" pos:end="353:46"><expr pos:start="353:35" pos:end="353:46"><name pos:start="353:35" pos:end="353:46">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="353:49" pos:end="353:80"><expr pos:start="353:49" pos:end="353:80"><literal type="string" pos:start="353:49" pos:end="353:80">"Failed to uncompress tag: %d\n"</literal></expr></argument>, <argument pos:start="353:83" pos:end="353:85"><expr pos:start="353:83" pos:end="353:85"><name pos:start="353:83" pos:end="353:85">err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <goto pos:start="355:25" pos:end="355:34">goto <name pos:start="355:30" pos:end="355:33">seek</name>;</goto>

                    </block_content>}</block></if></if_stmt>

                    <expr_stmt pos:start="359:21" pos:end="359:97"><expr pos:start="359:21" pos:end="359:96"><call pos:start="359:21" pos:end="359:96"><name pos:start="359:21" pos:end="359:37">ffio_init_context</name><argument_list pos:start="359:38" pos:end="359:96">(<argument pos:start="359:39" pos:end="359:41"><expr pos:start="359:39" pos:end="359:41"><operator pos:start="359:39" pos:end="359:39">&amp;</operator><name pos:start="359:40" pos:end="359:41">pb</name></expr></argument>, <argument pos:start="359:44" pos:end="359:62"><expr pos:start="359:44" pos:end="359:62"><name pos:start="359:44" pos:end="359:62">uncompressed_buffer</name></expr></argument>, <argument pos:start="359:65" pos:end="359:68"><expr pos:start="359:65" pos:end="359:68"><name pos:start="359:65" pos:end="359:68">dlen</name></expr></argument>, <argument pos:start="359:71" pos:end="359:71"><expr pos:start="359:71" pos:end="359:71"><literal type="number" pos:start="359:71" pos:end="359:71">0</literal></expr></argument>, <argument pos:start="359:74" pos:end="359:77"><expr pos:start="359:74" pos:end="359:77"><name pos:start="359:74" pos:end="359:77">NULL</name></expr></argument>, <argument pos:start="359:80" pos:end="359:83"><expr pos:start="359:80" pos:end="359:83"><name pos:start="359:80" pos:end="359:83">NULL</name></expr></argument>, <argument pos:start="359:86" pos:end="359:89"><expr pos:start="359:86" pos:end="359:89"><name pos:start="359:86" pos:end="359:89">NULL</name></expr></argument>, <argument pos:start="359:92" pos:end="359:95"><expr pos:start="359:92" pos:end="359:95"><name pos:start="359:92" pos:end="359:95">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt pos:start="361:21" pos:end="361:32"><expr pos:start="361:21" pos:end="361:31"><name pos:start="361:21" pos:end="361:24">tlen</name> <operator pos:start="361:26" pos:end="361:26">=</operator> <name pos:start="361:28" pos:end="361:31">dlen</name></expr>;</expr_stmt>

                    <expr_stmt pos:start="363:21" pos:end="363:30"><expr pos:start="363:21" pos:end="363:29"><name pos:start="363:21" pos:end="363:23">pbx</name> <operator pos:start="363:25" pos:end="363:25">=</operator> <operator pos:start="363:27" pos:end="363:27">&amp;</operator><name pos:start="363:28" pos:end="363:29">pb</name></expr>;</expr_stmt> <comment type="line" pos:start="363:32" pos:end="363:55">// read from sync buffer</comment>

                </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="367:1" pos:end="367:6">#<cpp:directive pos:start="367:2" pos:end="367:6">endif</cpp:directive></cpp:endif>

            <if_stmt pos:start="369:13" pos:end="379:64"><if pos:start="369:13" pos:end="373:59">if <condition pos:start="369:16" pos:end="369:30">(<expr pos:start="369:17" pos:end="369:29"><name pos:start="369:17" pos:end="369:22"><name pos:start="369:17" pos:end="369:19">tag</name><index pos:start="369:20" pos:end="369:22">[<expr pos:start="369:21" pos:end="369:21"><literal type="number" pos:start="369:21" pos:end="369:21">0</literal></expr>]</index></name> <operator pos:start="369:24" pos:end="369:25">==</operator> <literal type="char" pos:start="369:27" pos:end="369:29">'T'</literal></expr>)</condition><block type="pseudo" pos:start="373:17" pos:end="373:59"><block_content pos:start="373:17" pos:end="373:59">

                <comment type="block" pos:start="371:17" pos:end="371:36">/* parse text tag */</comment>

                <expr_stmt pos:start="373:17" pos:end="373:59"><expr pos:start="373:17" pos:end="373:58"><call pos:start="373:17" pos:end="373:58"><name pos:start="373:17" pos:end="373:25">read_ttag</name><argument_list pos:start="373:26" pos:end="373:58">(<argument pos:start="373:27" pos:end="373:27"><expr pos:start="373:27" pos:end="373:27"><name pos:start="373:27" pos:end="373:27">s</name></expr></argument>, <argument pos:start="373:30" pos:end="373:32"><expr pos:start="373:30" pos:end="373:32"><name pos:start="373:30" pos:end="373:32">pbx</name></expr></argument>, <argument pos:start="373:35" pos:end="373:38"><expr pos:start="373:35" pos:end="373:38"><name pos:start="373:35" pos:end="373:38">tlen</name></expr></argument>, <argument pos:start="373:41" pos:end="373:52"><expr pos:start="373:41" pos:end="373:52"><operator pos:start="373:41" pos:end="373:41">&amp;</operator><name pos:start="373:42" pos:end="373:52"><name pos:start="373:42" pos:end="373:42">s</name><operator pos:start="373:43" pos:end="373:44">-&gt;</operator><name pos:start="373:45" pos:end="373:52">metadata</name></name></expr></argument>, <argument pos:start="373:55" pos:end="373:57"><expr pos:start="373:55" pos:end="373:57"><name pos:start="373:55" pos:end="373:57">tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

            <else pos:start="375:13" pos:end="379:64">else<block type="pseudo" pos:start="379:17" pos:end="379:64"><block_content pos:start="379:17" pos:end="379:64">

                <comment type="block" pos:start="377:17" pos:end="377:44">/* parse special meta tag */</comment>

                <expr_stmt pos:start="379:17" pos:end="379:64"><expr pos:start="379:17" pos:end="379:63"><call pos:start="379:17" pos:end="379:63"><name pos:start="379:17" pos:end="379:32"><name pos:start="379:17" pos:end="379:26">extra_func</name><operator pos:start="379:27" pos:end="379:28">-&gt;</operator><name pos:start="379:29" pos:end="379:32">read</name></name><argument_list pos:start="379:33" pos:end="379:63">(<argument pos:start="379:34" pos:end="379:34"><expr pos:start="379:34" pos:end="379:34"><name pos:start="379:34" pos:end="379:34">s</name></expr></argument>, <argument pos:start="379:37" pos:end="379:39"><expr pos:start="379:37" pos:end="379:39"><name pos:start="379:37" pos:end="379:39">pbx</name></expr></argument>, <argument pos:start="379:42" pos:end="379:45"><expr pos:start="379:42" pos:end="379:45"><name pos:start="379:42" pos:end="379:45">tlen</name></expr></argument>, <argument pos:start="379:48" pos:end="379:50"><expr pos:start="379:48" pos:end="379:50"><name pos:start="379:48" pos:end="379:50">tag</name></expr></argument>, <argument pos:start="379:53" pos:end="379:62"><expr pos:start="379:53" pos:end="379:62"><name pos:start="379:53" pos:end="379:62">extra_meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="381:11" pos:end="391:9">else if <condition pos:start="381:19" pos:end="381:27">(<expr pos:start="381:20" pos:end="381:26"><operator pos:start="381:20" pos:end="381:20">!</operator><name pos:start="381:21" pos:end="381:26"><name pos:start="381:21" pos:end="381:23">tag</name><index pos:start="381:24" pos:end="381:26">[<expr pos:start="381:25" pos:end="381:25"><literal type="number" pos:start="381:25" pos:end="381:25">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="381:29" pos:end="391:9">{<block_content pos:start="383:13" pos:end="389:18">

            <if_stmt pos:start="383:13" pos:end="385:82"><if pos:start="383:13" pos:end="385:82">if <condition pos:start="383:16" pos:end="383:23">(<expr pos:start="383:17" pos:end="383:22"><name pos:start="383:17" pos:end="383:22"><name pos:start="383:17" pos:end="383:19">tag</name><index pos:start="383:20" pos:end="383:22">[<expr pos:start="383:21" pos:end="383:21"><literal type="number" pos:start="383:21" pos:end="383:21">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo" pos:start="385:17" pos:end="385:82"><block_content pos:start="385:17" pos:end="385:82">

                <expr_stmt pos:start="385:17" pos:end="385:82"><expr pos:start="385:17" pos:end="385:81"><call pos:start="385:17" pos:end="385:81"><name pos:start="385:17" pos:end="385:22">av_log</name><argument_list pos:start="385:23" pos:end="385:81">(<argument pos:start="385:24" pos:end="385:24"><expr pos:start="385:24" pos:end="385:24"><name pos:start="385:24" pos:end="385:24">s</name></expr></argument>, <argument pos:start="385:27" pos:end="385:40"><expr pos:start="385:27" pos:end="385:40"><name pos:start="385:27" pos:end="385:40">AV_LOG_WARNING</name></expr></argument>, <argument pos:start="385:43" pos:end="385:80"><expr pos:start="385:43" pos:end="385:80"><literal type="string" pos:start="385:43" pos:end="385:80">"invalid frame id, assuming padding\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt pos:start="387:13" pos:end="387:35"><expr pos:start="387:13" pos:end="387:34"><call pos:start="387:13" pos:end="387:34"><name pos:start="387:13" pos:end="387:21">avio_skip</name><argument_list pos:start="387:22" pos:end="387:34">(<argument pos:start="387:23" pos:end="387:27"><expr pos:start="387:23" pos:end="387:27"><name pos:start="387:23" pos:end="387:27"><name pos:start="387:23" pos:end="387:23">s</name><operator pos:start="387:24" pos:end="387:25">-&gt;</operator><name pos:start="387:26" pos:end="387:27">pb</name></name></expr></argument>, <argument pos:start="387:30" pos:end="387:33"><expr pos:start="387:30" pos:end="387:33"><name pos:start="387:30" pos:end="387:33">tlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="389:13" pos:end="389:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="393:9" pos:end="393:32">/* Skip to end of tag */</comment>

<label pos:start="395:1" pos:end="395:5"><name pos:start="395:1" pos:end="395:4">seek</name>:</label>

        <expr_stmt pos:start="397:9" pos:end="397:41"><expr pos:start="397:9" pos:end="397:40"><call pos:start="397:9" pos:end="397:40"><name pos:start="397:9" pos:end="397:17">avio_seek</name><argument_list pos:start="397:18" pos:end="397:40">(<argument pos:start="397:19" pos:end="397:23"><expr pos:start="397:19" pos:end="397:23"><name pos:start="397:19" pos:end="397:23"><name pos:start="397:19" pos:end="397:19">s</name><operator pos:start="397:20" pos:end="397:21">-&gt;</operator><name pos:start="397:22" pos:end="397:23">pb</name></name></expr></argument>, <argument pos:start="397:26" pos:end="397:29"><expr pos:start="397:26" pos:end="397:29"><name pos:start="397:26" pos:end="397:29">next</name></expr></argument>, <argument pos:start="397:32" pos:end="397:39"><expr pos:start="397:32" pos:end="397:39"><name pos:start="397:32" pos:end="397:39">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>



    <comment type="block" pos:start="403:5" pos:end="403:54">/* Footer preset, always 10 bytes, skip over it */</comment>

    <if_stmt pos:start="405:5" pos:end="407:18"><if pos:start="405:5" pos:end="407:18">if <condition pos:start="405:8" pos:end="405:37">(<expr pos:start="405:9" pos:end="405:36"><name pos:start="405:9" pos:end="405:15">version</name> <operator pos:start="405:17" pos:end="405:18">==</operator> <literal type="number" pos:start="405:20" pos:end="405:20">4</literal> <operator pos:start="405:22" pos:end="405:23">&amp;&amp;</operator> <name pos:start="405:25" pos:end="405:29">flags</name> <operator pos:start="405:31" pos:end="405:31">&amp;</operator> <literal type="number" pos:start="405:33" pos:end="405:36">0x10</literal></expr>)</condition><block type="pseudo" pos:start="407:9" pos:end="407:18"><block_content pos:start="407:9" pos:end="407:18">

        <expr_stmt pos:start="407:9" pos:end="407:18"><expr pos:start="407:9" pos:end="407:17"><name pos:start="407:9" pos:end="407:11">end</name> <operator pos:start="407:13" pos:end="407:14">+=</operator> <literal type="number" pos:start="407:16" pos:end="407:17">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>



<label pos:start="411:1" pos:end="411:6"><name pos:start="411:1" pos:end="411:5">error</name>:</label>

    <if_stmt pos:start="413:5" pos:end="417:32"><if pos:start="413:5" pos:end="417:32">if <condition pos:start="413:8" pos:end="413:15">(<expr pos:start="413:9" pos:end="413:14"><name pos:start="413:9" pos:end="413:14">reason</name></expr>)</condition><block type="pseudo" pos:start="415:9" pos:end="417:32"><block_content pos:start="415:9" pos:end="417:32">

        <expr_stmt pos:start="415:9" pos:end="417:32"><expr pos:start="415:9" pos:end="417:31"><call pos:start="415:9" pos:end="417:31"><name pos:start="415:9" pos:end="415:14">av_log</name><argument_list pos:start="415:15" pos:end="417:31">(<argument pos:start="415:16" pos:end="415:16"><expr pos:start="415:16" pos:end="415:16"><name pos:start="415:16" pos:end="415:16">s</name></expr></argument>, <argument pos:start="415:19" pos:end="415:29"><expr pos:start="415:19" pos:end="415:29"><name pos:start="415:19" pos:end="415:29">AV_LOG_INFO</name></expr></argument>, <argument pos:start="415:32" pos:end="415:73"><expr pos:start="415:32" pos:end="415:73"><literal type="string" pos:start="415:32" pos:end="415:73">"ID3v2.%d tag skipped, cannot handle %s\n"</literal></expr></argument>,

               <argument pos:start="417:16" pos:end="417:22"><expr pos:start="417:16" pos:end="417:22"><name pos:start="417:16" pos:end="417:22">version</name></expr></argument>, <argument pos:start="417:25" pos:end="417:30"><expr pos:start="417:25" pos:end="417:30"><name pos:start="417:25" pos:end="417:30">reason</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="419:5" pos:end="419:36"><expr pos:start="419:5" pos:end="419:35"><call pos:start="419:5" pos:end="419:35"><name pos:start="419:5" pos:end="419:13">avio_seek</name><argument_list pos:start="419:14" pos:end="419:35">(<argument pos:start="419:15" pos:end="419:19"><expr pos:start="419:15" pos:end="419:19"><name pos:start="419:15" pos:end="419:19"><name pos:start="419:15" pos:end="419:15">s</name><operator pos:start="419:16" pos:end="419:17">-&gt;</operator><name pos:start="419:18" pos:end="419:19">pb</name></name></expr></argument>, <argument pos:start="419:22" pos:end="419:24"><expr pos:start="419:22" pos:end="419:24"><name pos:start="419:22" pos:end="419:24">end</name></expr></argument>, <argument pos:start="419:27" pos:end="419:34"><expr pos:start="419:27" pos:end="419:34"><name pos:start="419:27" pos:end="419:34">SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="421:5" pos:end="421:20"><expr pos:start="421:5" pos:end="421:19"><call pos:start="421:5" pos:end="421:19"><name pos:start="421:5" pos:end="421:11">av_free</name><argument_list pos:start="421:12" pos:end="421:19">(<argument pos:start="421:13" pos:end="421:18"><expr pos:start="421:13" pos:end="421:18"><name pos:start="421:13" pos:end="421:18">buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="423:5" pos:end="423:33"><expr pos:start="423:5" pos:end="423:32"><call pos:start="423:5" pos:end="423:32"><name pos:start="423:5" pos:end="423:11">av_free</name><argument_list pos:start="423:12" pos:end="423:32">(<argument pos:start="423:13" pos:end="423:31"><expr pos:start="423:13" pos:end="423:31"><name pos:start="423:13" pos:end="423:31">uncompressed_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="425:5" pos:end="425:11">return;</return>

</block_content>}</block></function>
</unit>
