<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/11144.c" pos:tabs="8"><function pos:start="1:1" pos:end="703:1"><type pos:start="1:1" pos:end="1:18"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <specifier pos:start="1:8" pos:end="1:13">inline</specifier> <name pos:start="1:15" pos:end="1:18">void</name></type> <name pos:start="1:20" pos:end="1:29">tcg_out_op</name><parameter_list pos:start="1:30" pos:end="3:72">(<parameter pos:start="1:31" pos:end="1:43"><decl pos:start="1:31" pos:end="1:43"><type pos:start="1:31" pos:end="1:43"><name pos:start="1:31" pos:end="1:40">TCGContext</name> <modifier pos:start="1:42" pos:end="1:42">*</modifier></type><name pos:start="1:43" pos:end="1:43">s</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:58"><decl pos:start="1:46" pos:end="1:58"><type pos:start="1:46" pos:end="1:58"><name pos:start="1:46" pos:end="1:54">TCGOpcode</name></type> <name pos:start="1:56" pos:end="1:58">opc</name></decl></parameter>,

                              <parameter pos:start="3:31" pos:end="3:48"><decl pos:start="3:31" pos:end="3:48"><type pos:start="3:31" pos:end="3:48"><specifier pos:start="3:31" pos:end="3:35">const</specifier> <name pos:start="3:37" pos:end="3:42">TCGArg</name> <modifier pos:start="3:44" pos:end="3:44">*</modifier></type><name pos:start="3:45" pos:end="3:48">args</name></decl></parameter>, <parameter pos:start="3:51" pos:end="3:71"><decl pos:start="3:51" pos:end="3:71"><type pos:start="3:51" pos:end="3:71"><specifier pos:start="3:51" pos:end="3:55">const</specifier> <name pos:start="3:57" pos:end="3:59">int</name> <modifier pos:start="3:61" pos:end="3:61">*</modifier></type><name pos:start="3:62" pos:end="3:71">const_args</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="703:1">{<block_content pos:start="7:5" pos:end="702:0">

    <decl_stmt pos:start="7:5" pos:end="28:0"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">c</name></decl>, <decl pos:start="7:12" pos:end="7:16"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:12" pos:end="7:16">vexop</name></decl>, <decl pos:start="7:19" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:19" pos:end="7:22">rexw</name> <init pos:start="7:24" pos:end="7:26">= <expr pos:start="7:26" pos:end="7:26"><literal type="number" pos:start="7:26" pos:end="7:26">0</literal></expr></init></decl>;</decl_stmt>



<cpp:if pos:start="11:1" pos:end="11:29">#<cpp:directive pos:start="11:2" pos:end="11:3">if</cpp:directive> <expr pos:start="11:5" pos:end="11:29"><name pos:start="11:5" pos:end="11:23">TCG_TARGET_REG_BITS</name> <operator pos:start="11:25" pos:end="11:26">==</operator> <literal type="number" pos:start="11:28" pos:end="11:29">64</literal></expr></cpp:if>

<cpp:define pos:start="13:1" pos:end="19:43"># <cpp:directive pos:start="13:3" pos:end="13:8">define</cpp:directive> <cpp:macro pos:start="13:10" pos:end="13:20"><name pos:start="13:10" pos:end="13:17">OP_32_64</name><parameter_list pos:start="13:18" pos:end="13:20">(<parameter pos:start="13:19" pos:end="13:19"><type pos:start="13:19" pos:end="13:19"><name pos:start="13:19" pos:end="13:19">x</name></type></parameter>)</parameter_list></cpp:macro> \

        <cpp:value pos:start="15:9" pos:end="19:43">case glue(glue(INDEX_op_, x), _i64): \

            rexw = P_REXW; <comment type="block" pos:start="17:28" pos:end="17:41">/* FALLTHRU */</comment>    \

        case glue(glue(INDEX_op_, x), _i32)</cpp:value></cpp:define>

<cpp:else pos:start="21:1" pos:end="21:5">#<cpp:directive pos:start="21:2" pos:end="21:5">else</cpp:directive></cpp:else>

<cpp:define pos:start="23:1" pos:end="25:43"># <cpp:directive pos:start="23:3" pos:end="23:8">define</cpp:directive> <cpp:macro pos:start="23:10" pos:end="23:20"><name pos:start="23:10" pos:end="23:17">OP_32_64</name><parameter_list pos:start="23:18" pos:end="23:20">(<parameter pos:start="23:19" pos:end="23:19"><type pos:start="23:19" pos:end="23:19"><name pos:start="23:19" pos:end="23:19">x</name></type></parameter>)</parameter_list></cpp:macro> \

        <cpp:value pos:start="25:9" pos:end="25:43">case glue(glue(INDEX_op_, x), _i32)</cpp:value></cpp:define>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>



    <switch pos:start="31:5" pos:end="702:0">switch<condition pos:start="31:11" pos:end="31:15">(<expr pos:start="31:12" pos:end="31:14"><name pos:start="31:12" pos:end="31:14">opc</name></expr>)</condition> <block pos:start="31:17" pos:end="702:0">{<block_content pos:start="33:5" pos:end="695:20">

    <case pos:start="33:5" pos:end="33:26">case <expr pos:start="33:10" pos:end="33:25"><name pos:start="33:10" pos:end="33:25">INDEX_op_exit_tb</name></expr>:</case>

        <expr_stmt pos:start="35:9" pos:end="35:60"><expr pos:start="35:9" pos:end="35:59"><call pos:start="35:9" pos:end="35:59"><name pos:start="35:9" pos:end="35:20">tcg_out_movi</name><argument_list pos:start="35:21" pos:end="35:59">(<argument pos:start="35:22" pos:end="35:22"><expr pos:start="35:22" pos:end="35:22"><name pos:start="35:22" pos:end="35:22">s</name></expr></argument>, <argument pos:start="35:25" pos:end="35:36"><expr pos:start="35:25" pos:end="35:36"><name pos:start="35:25" pos:end="35:36">TCG_TYPE_PTR</name></expr></argument>, <argument pos:start="35:39" pos:end="35:49"><expr pos:start="35:39" pos:end="35:49"><name pos:start="35:39" pos:end="35:49">TCG_REG_EAX</name></expr></argument>, <argument pos:start="35:52" pos:end="35:58"><expr pos:start="35:52" pos:end="35:58"><name pos:start="35:52" pos:end="35:58"><name pos:start="35:52" pos:end="35:55">args</name><index pos:start="35:56" pos:end="35:58">[<expr pos:start="35:57" pos:end="35:57"><literal type="number" pos:start="35:57" pos:end="35:57">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:36"><expr pos:start="37:9" pos:end="37:35"><call pos:start="37:9" pos:end="37:35"><name pos:start="37:9" pos:end="37:19">tcg_out_jmp</name><argument_list pos:start="37:20" pos:end="37:35">(<argument pos:start="37:21" pos:end="37:21"><expr pos:start="37:21" pos:end="37:21"><name pos:start="37:21" pos:end="37:21">s</name></expr></argument>, <argument pos:start="37:24" pos:end="37:34"><expr pos:start="37:24" pos:end="37:34"><name pos:start="37:24" pos:end="37:34">tb_ret_addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="39:9" pos:end="39:14">break;</break>

    <case pos:start="41:5" pos:end="41:26">case <expr pos:start="41:10" pos:end="41:25"><name pos:start="41:10" pos:end="41:25">INDEX_op_goto_tb</name></expr>:</case>

        <if_stmt pos:start="43:9" pos:end="61:9"><if pos:start="43:9" pos:end="53:9">if <condition pos:start="43:12" pos:end="43:29">(<expr pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:28"><name pos:start="43:13" pos:end="43:13">s</name><operator pos:start="43:14" pos:end="43:15">-&gt;</operator><name pos:start="43:16" pos:end="43:28">tb_jmp_offset</name></name></expr>)</condition> <block pos:start="43:31" pos:end="53:9">{<block_content pos:start="47:13" pos:end="51:28">

            <comment type="block" pos:start="45:13" pos:end="45:36">/* direct jump method */</comment>

            <expr_stmt pos:start="47:13" pos:end="47:38"><expr pos:start="47:13" pos:end="47:37"><call pos:start="47:13" pos:end="47:37"><name pos:start="47:13" pos:end="47:20">tcg_out8</name><argument_list pos:start="47:21" pos:end="47:37">(<argument pos:start="47:22" pos:end="47:22"><expr pos:start="47:22" pos:end="47:22"><name pos:start="47:22" pos:end="47:22">s</name></expr></argument>, <argument pos:start="47:25" pos:end="47:36"><expr pos:start="47:25" pos:end="47:36"><name pos:start="47:25" pos:end="47:36">OPC_JMP_long</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="47:40" pos:end="47:51">/* jmp im */</comment>

            <expr_stmt pos:start="49:13" pos:end="49:65"><expr pos:start="49:13" pos:end="49:64"><name pos:start="49:13" pos:end="49:37"><name pos:start="49:13" pos:end="49:13">s</name><operator pos:start="49:14" pos:end="49:15">-&gt;</operator><name pos:start="49:16" pos:end="49:28">tb_jmp_offset</name><index pos:start="49:29" pos:end="49:37">[<expr pos:start="49:30" pos:end="49:36"><name pos:start="49:30" pos:end="49:36"><name pos:start="49:30" pos:end="49:33">args</name><index pos:start="49:34" pos:end="49:36">[<expr pos:start="49:35" pos:end="49:35"><literal type="number" pos:start="49:35" pos:end="49:35">0</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="49:39" pos:end="49:39">=</operator> <call pos:start="49:41" pos:end="49:64"><name pos:start="49:41" pos:end="49:61">tcg_current_code_size</name><argument_list pos:start="49:62" pos:end="49:64">(<argument pos:start="49:63" pos:end="49:63"><expr pos:start="49:63" pos:end="49:63"><name pos:start="49:63" pos:end="49:63">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="51:13" pos:end="51:28"><expr pos:start="51:13" pos:end="51:27"><call pos:start="51:13" pos:end="51:27"><name pos:start="51:13" pos:end="51:21">tcg_out32</name><argument_list pos:start="51:22" pos:end="51:27">(<argument pos:start="51:23" pos:end="51:23"><expr pos:start="51:23" pos:end="51:23"><name pos:start="51:23" pos:end="51:23">s</name></expr></argument>, <argument pos:start="51:26" pos:end="51:26"><expr pos:start="51:26" pos:end="51:26"><literal type="number" pos:start="51:26" pos:end="51:26">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="53:11" pos:end="61:9">else <block pos:start="53:16" pos:end="61:9">{<block_content pos:start="57:13" pos:end="59:67">

            <comment type="block" pos:start="55:13" pos:end="55:38">/* indirect jump method */</comment>

            <expr_stmt pos:start="57:13" pos:end="59:67"><expr pos:start="57:13" pos:end="59:66"><call pos:start="57:13" pos:end="59:66"><name pos:start="57:13" pos:end="57:32">tcg_out_modrm_offset</name><argument_list pos:start="57:33" pos:end="59:66">(<argument pos:start="57:34" pos:end="57:34"><expr pos:start="57:34" pos:end="57:34"><name pos:start="57:34" pos:end="57:34">s</name></expr></argument>, <argument pos:start="57:37" pos:end="57:44"><expr pos:start="57:37" pos:end="57:44"><name pos:start="57:37" pos:end="57:44">OPC_GRP5</name></expr></argument>, <argument pos:start="57:47" pos:end="57:58"><expr pos:start="57:47" pos:end="57:58"><name pos:start="57:47" pos:end="57:58">EXT5_JMPN_Ev</name></expr></argument>, <argument pos:start="57:61" pos:end="57:62"><expr pos:start="57:61" pos:end="57:62"><operator pos:start="57:61" pos:end="57:61">-</operator><literal type="number" pos:start="57:62" pos:end="57:62">1</literal></expr></argument>,

                                 <argument pos:start="59:34" pos:end="59:65"><expr pos:start="59:34" pos:end="59:65"><operator pos:start="59:34" pos:end="59:34">(</operator><name pos:start="59:35" pos:end="59:42">intptr_t</name><operator pos:start="59:43" pos:end="59:43">)</operator><operator pos:start="59:44" pos:end="59:44">(</operator><name pos:start="59:45" pos:end="59:54"><name pos:start="59:45" pos:end="59:45">s</name><operator pos:start="59:46" pos:end="59:47">-&gt;</operator><name pos:start="59:48" pos:end="59:54">tb_next</name></name> <operator pos:start="59:56" pos:end="59:56">+</operator> <name pos:start="59:58" pos:end="59:64"><name pos:start="59:58" pos:end="59:61">args</name><index pos:start="59:62" pos:end="59:64">[<expr pos:start="59:63" pos:end="59:63"><literal type="number" pos:start="59:63" pos:end="59:63">0</literal></expr>]</index></name><operator pos:start="59:65" pos:end="59:65">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="63:9" pos:end="63:62"><expr pos:start="63:9" pos:end="63:61"><name pos:start="63:9" pos:end="63:34"><name pos:start="63:9" pos:end="63:9">s</name><operator pos:start="63:10" pos:end="63:11">-&gt;</operator><name pos:start="63:12" pos:end="63:25">tb_next_offset</name><index pos:start="63:26" pos:end="63:34">[<expr pos:start="63:27" pos:end="63:33"><name pos:start="63:27" pos:end="63:33"><name pos:start="63:27" pos:end="63:30">args</name><index pos:start="63:31" pos:end="63:33">[<expr pos:start="63:32" pos:end="63:32"><literal type="number" pos:start="63:32" pos:end="63:32">0</literal></expr>]</index></name></expr>]</index></name> <operator pos:start="63:36" pos:end="63:36">=</operator> <call pos:start="63:38" pos:end="63:61"><name pos:start="63:38" pos:end="63:58">tcg_current_code_size</name><argument_list pos:start="63:59" pos:end="63:61">(<argument pos:start="63:60" pos:end="63:60"><expr pos:start="63:60" pos:end="63:60"><name pos:start="63:60" pos:end="63:60">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="65:9" pos:end="65:14">break;</break>

    <case pos:start="67:5" pos:end="67:21">case <expr pos:start="67:10" pos:end="67:20"><name pos:start="67:10" pos:end="67:20">INDEX_op_br</name></expr>:</case>

        <expr_stmt pos:start="69:9" pos:end="69:44"><expr pos:start="69:9" pos:end="69:43"><call pos:start="69:9" pos:end="69:43"><name pos:start="69:9" pos:end="69:19">tcg_out_jxx</name><argument_list pos:start="69:20" pos:end="69:43">(<argument pos:start="69:21" pos:end="69:21"><expr pos:start="69:21" pos:end="69:21"><name pos:start="69:21" pos:end="69:21">s</name></expr></argument>, <argument pos:start="69:24" pos:end="69:30"><expr pos:start="69:24" pos:end="69:30"><name pos:start="69:24" pos:end="69:30">JCC_JMP</name></expr></argument>, <argument pos:start="69:33" pos:end="69:39"><expr pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:39"><name pos:start="69:33" pos:end="69:36">args</name><index pos:start="69:37" pos:end="69:39">[<expr pos:start="69:38" pos:end="69:38"><literal type="number" pos:start="69:38" pos:end="69:38">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="69:42" pos:end="69:42"><expr pos:start="69:42" pos:end="69:42"><literal type="number" pos:start="69:42" pos:end="69:42">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="71:9" pos:end="71:14">break;</break>

    <expr_stmt pos:start="73:5" pos:end="77:71"><expr pos:start="73:5" pos:end="77:70"><call pos:start="73:5" pos:end="73:18"><name pos:start="73:5" pos:end="73:12">OP_32_64</name><argument_list pos:start="73:13" pos:end="73:18">(<argument pos:start="73:14" pos:end="73:17"><expr pos:start="73:14" pos:end="73:17"><name pos:start="73:14" pos:end="73:17">ld8u</name></expr></argument>)</argument_list></call><operator pos:start="73:19" pos:end="73:19">:</operator>

        <comment type="block" pos:start="75:9" pos:end="75:74">/* Note that we can ignore REXW for the zero-extend to 64-bit.  */</comment>

        <call pos:start="77:9" pos:end="77:70"><name pos:start="77:9" pos:end="77:28">tcg_out_modrm_offset</name><argument_list pos:start="77:29" pos:end="77:70">(<argument pos:start="77:30" pos:end="77:30"><expr pos:start="77:30" pos:end="77:30"><name pos:start="77:30" pos:end="77:30">s</name></expr></argument>, <argument pos:start="77:33" pos:end="77:42"><expr pos:start="77:33" pos:end="77:42"><name pos:start="77:33" pos:end="77:42">OPC_MOVZBL</name></expr></argument>, <argument pos:start="77:45" pos:end="77:51"><expr pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:51"><name pos:start="77:45" pos:end="77:48">args</name><index pos:start="77:49" pos:end="77:51">[<expr pos:start="77:50" pos:end="77:50"><literal type="number" pos:start="77:50" pos:end="77:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:54" pos:end="77:60"><expr pos:start="77:54" pos:end="77:60"><name pos:start="77:54" pos:end="77:60"><name pos:start="77:54" pos:end="77:57">args</name><index pos:start="77:58" pos:end="77:60">[<expr pos:start="77:59" pos:end="77:59"><literal type="number" pos:start="77:59" pos:end="77:59">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="77:63" pos:end="77:69"><expr pos:start="77:63" pos:end="77:69"><name pos:start="77:63" pos:end="77:69"><name pos:start="77:63" pos:end="77:66">args</name><index pos:start="77:67" pos:end="77:69">[<expr pos:start="77:68" pos:end="77:68"><literal type="number" pos:start="77:68" pos:end="77:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="79:9" pos:end="79:14">break;</break>

    <expr_stmt pos:start="81:5" pos:end="83:78"><expr pos:start="81:5" pos:end="83:77"><call pos:start="81:5" pos:end="81:18"><name pos:start="81:5" pos:end="81:12">OP_32_64</name><argument_list pos:start="81:13" pos:end="81:18">(<argument pos:start="81:14" pos:end="81:17"><expr pos:start="81:14" pos:end="81:17"><name pos:start="81:14" pos:end="81:17">ld8s</name></expr></argument>)</argument_list></call><operator pos:start="81:19" pos:end="81:19">:</operator>

        <call pos:start="83:9" pos:end="83:77"><name pos:start="83:9" pos:end="83:28">tcg_out_modrm_offset</name><argument_list pos:start="83:29" pos:end="83:77">(<argument pos:start="83:30" pos:end="83:30"><expr pos:start="83:30" pos:end="83:30"><name pos:start="83:30" pos:end="83:30">s</name></expr></argument>, <argument pos:start="83:33" pos:end="83:49"><expr pos:start="83:33" pos:end="83:49"><name pos:start="83:33" pos:end="83:42">OPC_MOVSBL</name> <operator pos:start="83:44" pos:end="83:44">+</operator> <name pos:start="83:46" pos:end="83:49">rexw</name></expr></argument>, <argument pos:start="83:52" pos:end="83:58"><expr pos:start="83:52" pos:end="83:58"><name pos:start="83:52" pos:end="83:58"><name pos:start="83:52" pos:end="83:55">args</name><index pos:start="83:56" pos:end="83:58">[<expr pos:start="83:57" pos:end="83:57"><literal type="number" pos:start="83:57" pos:end="83:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:61" pos:end="83:67"><expr pos:start="83:61" pos:end="83:67"><name pos:start="83:61" pos:end="83:67"><name pos:start="83:61" pos:end="83:64">args</name><index pos:start="83:65" pos:end="83:67">[<expr pos:start="83:66" pos:end="83:66"><literal type="number" pos:start="83:66" pos:end="83:66">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="83:70" pos:end="83:76"><expr pos:start="83:70" pos:end="83:76"><name pos:start="83:70" pos:end="83:76"><name pos:start="83:70" pos:end="83:73">args</name><index pos:start="83:74" pos:end="83:76">[<expr pos:start="83:75" pos:end="83:75"><literal type="number" pos:start="83:75" pos:end="83:75">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="85:9" pos:end="85:14">break;</break>

    <expr_stmt pos:start="87:5" pos:end="91:71"><expr pos:start="87:5" pos:end="91:70"><call pos:start="87:5" pos:end="87:19"><name pos:start="87:5" pos:end="87:12">OP_32_64</name><argument_list pos:start="87:13" pos:end="87:19">(<argument pos:start="87:14" pos:end="87:18"><expr pos:start="87:14" pos:end="87:18"><name pos:start="87:14" pos:end="87:18">ld16u</name></expr></argument>)</argument_list></call><operator pos:start="87:20" pos:end="87:20">:</operator>

        <comment type="block" pos:start="89:9" pos:end="89:74">/* Note that we can ignore REXW for the zero-extend to 64-bit.  */</comment>

        <call pos:start="91:9" pos:end="91:70"><name pos:start="91:9" pos:end="91:28">tcg_out_modrm_offset</name><argument_list pos:start="91:29" pos:end="91:70">(<argument pos:start="91:30" pos:end="91:30"><expr pos:start="91:30" pos:end="91:30"><name pos:start="91:30" pos:end="91:30">s</name></expr></argument>, <argument pos:start="91:33" pos:end="91:42"><expr pos:start="91:33" pos:end="91:42"><name pos:start="91:33" pos:end="91:42">OPC_MOVZWL</name></expr></argument>, <argument pos:start="91:45" pos:end="91:51"><expr pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:51"><name pos:start="91:45" pos:end="91:48">args</name><index pos:start="91:49" pos:end="91:51">[<expr pos:start="91:50" pos:end="91:50"><literal type="number" pos:start="91:50" pos:end="91:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:54" pos:end="91:60"><expr pos:start="91:54" pos:end="91:60"><name pos:start="91:54" pos:end="91:60"><name pos:start="91:54" pos:end="91:57">args</name><index pos:start="91:58" pos:end="91:60">[<expr pos:start="91:59" pos:end="91:59"><literal type="number" pos:start="91:59" pos:end="91:59">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="91:63" pos:end="91:69"><expr pos:start="91:63" pos:end="91:69"><name pos:start="91:63" pos:end="91:69"><name pos:start="91:63" pos:end="91:66">args</name><index pos:start="91:67" pos:end="91:69">[<expr pos:start="91:68" pos:end="91:68"><literal type="number" pos:start="91:68" pos:end="91:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="93:9" pos:end="93:14">break;</break>

    <expr_stmt pos:start="95:5" pos:end="97:78"><expr pos:start="95:5" pos:end="97:77"><call pos:start="95:5" pos:end="95:19"><name pos:start="95:5" pos:end="95:12">OP_32_64</name><argument_list pos:start="95:13" pos:end="95:19">(<argument pos:start="95:14" pos:end="95:18"><expr pos:start="95:14" pos:end="95:18"><name pos:start="95:14" pos:end="95:18">ld16s</name></expr></argument>)</argument_list></call><operator pos:start="95:20" pos:end="95:20">:</operator>

        <call pos:start="97:9" pos:end="97:77"><name pos:start="97:9" pos:end="97:28">tcg_out_modrm_offset</name><argument_list pos:start="97:29" pos:end="97:77">(<argument pos:start="97:30" pos:end="97:30"><expr pos:start="97:30" pos:end="97:30"><name pos:start="97:30" pos:end="97:30">s</name></expr></argument>, <argument pos:start="97:33" pos:end="97:49"><expr pos:start="97:33" pos:end="97:49"><name pos:start="97:33" pos:end="97:42">OPC_MOVSWL</name> <operator pos:start="97:44" pos:end="97:44">+</operator> <name pos:start="97:46" pos:end="97:49">rexw</name></expr></argument>, <argument pos:start="97:52" pos:end="97:58"><expr pos:start="97:52" pos:end="97:58"><name pos:start="97:52" pos:end="97:58"><name pos:start="97:52" pos:end="97:55">args</name><index pos:start="97:56" pos:end="97:58">[<expr pos:start="97:57" pos:end="97:57"><literal type="number" pos:start="97:57" pos:end="97:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:61" pos:end="97:67"><expr pos:start="97:61" pos:end="97:67"><name pos:start="97:61" pos:end="97:67"><name pos:start="97:61" pos:end="97:64">args</name><index pos:start="97:65" pos:end="97:67">[<expr pos:start="97:66" pos:end="97:66"><literal type="number" pos:start="97:66" pos:end="97:66">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="97:70" pos:end="97:76"><expr pos:start="97:70" pos:end="97:76"><name pos:start="97:70" pos:end="97:76"><name pos:start="97:70" pos:end="97:73">args</name><index pos:start="97:74" pos:end="97:76">[<expr pos:start="97:75" pos:end="97:75"><literal type="number" pos:start="97:75" pos:end="97:75">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="99:9" pos:end="102:0">break;</break>

<cpp:if pos:start="101:1" pos:end="101:29">#<cpp:directive pos:start="101:2" pos:end="101:3">if</cpp:directive> <expr pos:start="101:5" pos:end="101:29"><name pos:start="101:5" pos:end="101:23">TCG_TARGET_REG_BITS</name> <operator pos:start="101:25" pos:end="101:26">==</operator> <literal type="number" pos:start="101:28" pos:end="101:29">64</literal></expr></cpp:if>

    <case pos:start="103:5" pos:end="106:0">case <expr pos:start="103:10" pos:end="103:27"><name pos:start="103:10" pos:end="103:27">INDEX_op_ld32u_i64</name></expr>:</case>

<cpp:endif pos:start="105:1" pos:end="105:6">#<cpp:directive pos:start="105:2" pos:end="105:6">endif</cpp:directive></cpp:endif>

    <case pos:start="107:5" pos:end="107:25">case <expr pos:start="107:10" pos:end="107:24"><name pos:start="107:10" pos:end="107:24">INDEX_op_ld_i32</name></expr>:</case>

        <expr_stmt pos:start="109:9" pos:end="109:63"><expr pos:start="109:9" pos:end="109:62"><call pos:start="109:9" pos:end="109:62"><name pos:start="109:9" pos:end="109:18">tcg_out_ld</name><argument_list pos:start="109:19" pos:end="109:62">(<argument pos:start="109:20" pos:end="109:20"><expr pos:start="109:20" pos:end="109:20"><name pos:start="109:20" pos:end="109:20">s</name></expr></argument>, <argument pos:start="109:23" pos:end="109:34"><expr pos:start="109:23" pos:end="109:34"><name pos:start="109:23" pos:end="109:34">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="109:37" pos:end="109:43"><expr pos:start="109:37" pos:end="109:43"><name pos:start="109:37" pos:end="109:43"><name pos:start="109:37" pos:end="109:40">args</name><index pos:start="109:41" pos:end="109:43">[<expr pos:start="109:42" pos:end="109:42"><literal type="number" pos:start="109:42" pos:end="109:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:46" pos:end="109:52"><expr pos:start="109:46" pos:end="109:52"><name pos:start="109:46" pos:end="109:52"><name pos:start="109:46" pos:end="109:49">args</name><index pos:start="109:50" pos:end="109:52">[<expr pos:start="109:51" pos:end="109:51"><literal type="number" pos:start="109:51" pos:end="109:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="109:55" pos:end="109:61"><expr pos:start="109:55" pos:end="109:61"><name pos:start="109:55" pos:end="109:61"><name pos:start="109:55" pos:end="109:58">args</name><index pos:start="109:59" pos:end="109:61">[<expr pos:start="109:60" pos:end="109:60"><literal type="number" pos:start="109:60" pos:end="109:60">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="111:9" pos:end="111:14">break;</break>



    <expr_stmt pos:start="115:5" pos:end="115:18"><expr pos:start="115:5" pos:end="115:18"><call pos:start="115:5" pos:end="115:17"><name pos:start="115:5" pos:end="115:12">OP_32_64</name><argument_list pos:start="115:13" pos:end="115:17">(<argument pos:start="115:14" pos:end="115:16"><expr pos:start="115:14" pos:end="115:16"><name pos:start="115:14" pos:end="115:16">st8</name></expr></argument>)</argument_list></call><operator pos:start="115:18" pos:end="115:18">:</operator></expr></expr_stmt>

        <if_stmt pos:start="117:9" pos:end="131:9"><if pos:start="117:9" pos:end="125:9">if <condition pos:start="117:12" pos:end="117:26">(<expr pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:25"><name pos:start="117:13" pos:end="117:22">const_args</name><index pos:start="117:23" pos:end="117:25">[<expr pos:start="117:24" pos:end="117:24"><literal type="number" pos:start="117:24" pos:end="117:24">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="117:28" pos:end="125:9">{<block_content pos:start="119:13" pos:end="123:33">

            <expr_stmt pos:start="119:13" pos:end="121:54"><expr pos:start="119:13" pos:end="121:53"><call pos:start="119:13" pos:end="121:53"><name pos:start="119:13" pos:end="119:32">tcg_out_modrm_offset</name><argument_list pos:start="119:33" pos:end="121:53">(<argument pos:start="119:34" pos:end="119:34"><expr pos:start="119:34" pos:end="119:34"><name pos:start="119:34" pos:end="119:34">s</name></expr></argument>, <argument pos:start="119:37" pos:end="119:49"><expr pos:start="119:37" pos:end="119:49"><name pos:start="119:37" pos:end="119:49">OPC_MOVB_EvIz</name></expr></argument>,

                                 <argument pos:start="121:34" pos:end="121:34"><expr pos:start="121:34" pos:end="121:34"><literal type="number" pos:start="121:34" pos:end="121:34">0</literal></expr></argument>, <argument pos:start="121:37" pos:end="121:43"><expr pos:start="121:37" pos:end="121:43"><name pos:start="121:37" pos:end="121:43"><name pos:start="121:37" pos:end="121:40">args</name><index pos:start="121:41" pos:end="121:43">[<expr pos:start="121:42" pos:end="121:42"><literal type="number" pos:start="121:42" pos:end="121:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="121:46" pos:end="121:52"><expr pos:start="121:46" pos:end="121:52"><name pos:start="121:46" pos:end="121:52"><name pos:start="121:46" pos:end="121:49">args</name><index pos:start="121:50" pos:end="121:52">[<expr pos:start="121:51" pos:end="121:51"><literal type="number" pos:start="121:51" pos:end="121:51">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="123:13" pos:end="123:33"><expr pos:start="123:13" pos:end="123:32"><call pos:start="123:13" pos:end="123:32"><name pos:start="123:13" pos:end="123:20">tcg_out8</name><argument_list pos:start="123:21" pos:end="123:32">(<argument pos:start="123:22" pos:end="123:22"><expr pos:start="123:22" pos:end="123:22"><name pos:start="123:22" pos:end="123:22">s</name></expr></argument>, <argument pos:start="123:25" pos:end="123:31"><expr pos:start="123:25" pos:end="123:31"><name pos:start="123:25" pos:end="123:31"><name pos:start="123:25" pos:end="123:28">args</name><index pos:start="123:29" pos:end="123:31">[<expr pos:start="123:30" pos:end="123:30"><literal type="number" pos:start="123:30" pos:end="123:30">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="125:11" pos:end="131:9">else <block pos:start="125:16" pos:end="131:9">{<block_content pos:start="127:13" pos:end="129:60">

            <expr_stmt pos:start="127:13" pos:end="129:60"><expr pos:start="127:13" pos:end="129:59"><call pos:start="127:13" pos:end="129:59"><name pos:start="127:13" pos:end="127:32">tcg_out_modrm_offset</name><argument_list pos:start="127:33" pos:end="129:59">(<argument pos:start="127:34" pos:end="127:34"><expr pos:start="127:34" pos:end="127:34"><name pos:start="127:34" pos:end="127:34">s</name></expr></argument>, <argument pos:start="127:37" pos:end="127:60"><expr pos:start="127:37" pos:end="127:60"><name pos:start="127:37" pos:end="127:49">OPC_MOVB_EvGv</name> <operator pos:start="127:51" pos:end="127:51">|</operator> <name pos:start="127:53" pos:end="127:60">P_REXB_R</name></expr></argument>,

                                 <argument pos:start="129:34" pos:end="129:40"><expr pos:start="129:34" pos:end="129:40"><name pos:start="129:34" pos:end="129:40"><name pos:start="129:34" pos:end="129:37">args</name><index pos:start="129:38" pos:end="129:40">[<expr pos:start="129:39" pos:end="129:39"><literal type="number" pos:start="129:39" pos:end="129:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="129:43" pos:end="129:49"><expr pos:start="129:43" pos:end="129:49"><name pos:start="129:43" pos:end="129:49"><name pos:start="129:43" pos:end="129:46">args</name><index pos:start="129:47" pos:end="129:49">[<expr pos:start="129:48" pos:end="129:48"><literal type="number" pos:start="129:48" pos:end="129:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="129:52" pos:end="129:58"><expr pos:start="129:52" pos:end="129:58"><name pos:start="129:52" pos:end="129:58"><name pos:start="129:52" pos:end="129:55">args</name><index pos:start="129:56" pos:end="129:58">[<expr pos:start="129:57" pos:end="129:57"><literal type="number" pos:start="129:57" pos:end="129:57">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="133:9" pos:end="133:14">break;</break>

    <expr_stmt pos:start="135:5" pos:end="135:19"><expr pos:start="135:5" pos:end="135:19"><call pos:start="135:5" pos:end="135:18"><name pos:start="135:5" pos:end="135:12">OP_32_64</name><argument_list pos:start="135:13" pos:end="135:18">(<argument pos:start="135:14" pos:end="135:17"><expr pos:start="135:14" pos:end="135:17"><name pos:start="135:14" pos:end="135:17">st16</name></expr></argument>)</argument_list></call><operator pos:start="135:19" pos:end="135:19">:</operator></expr></expr_stmt>

        <if_stmt pos:start="137:9" pos:end="151:9"><if pos:start="137:9" pos:end="145:9">if <condition pos:start="137:12" pos:end="137:26">(<expr pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:25"><name pos:start="137:13" pos:end="137:22">const_args</name><index pos:start="137:23" pos:end="137:25">[<expr pos:start="137:24" pos:end="137:24"><literal type="number" pos:start="137:24" pos:end="137:24">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="137:28" pos:end="145:9">{<block_content pos:start="139:13" pos:end="143:34">

            <expr_stmt pos:start="139:13" pos:end="141:54"><expr pos:start="139:13" pos:end="141:53"><call pos:start="139:13" pos:end="141:53"><name pos:start="139:13" pos:end="139:32">tcg_out_modrm_offset</name><argument_list pos:start="139:33" pos:end="141:53">(<argument pos:start="139:34" pos:end="139:34"><expr pos:start="139:34" pos:end="139:34"><name pos:start="139:34" pos:end="139:34">s</name></expr></argument>, <argument pos:start="139:37" pos:end="139:60"><expr pos:start="139:37" pos:end="139:60"><name pos:start="139:37" pos:end="139:49">OPC_MOVL_EvIz</name> <operator pos:start="139:51" pos:end="139:51">|</operator> <name pos:start="139:53" pos:end="139:60">P_DATA16</name></expr></argument>,

                                 <argument pos:start="141:34" pos:end="141:34"><expr pos:start="141:34" pos:end="141:34"><literal type="number" pos:start="141:34" pos:end="141:34">0</literal></expr></argument>, <argument pos:start="141:37" pos:end="141:43"><expr pos:start="141:37" pos:end="141:43"><name pos:start="141:37" pos:end="141:43"><name pos:start="141:37" pos:end="141:40">args</name><index pos:start="141:41" pos:end="141:43">[<expr pos:start="141:42" pos:end="141:42"><literal type="number" pos:start="141:42" pos:end="141:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="141:46" pos:end="141:52"><expr pos:start="141:46" pos:end="141:52"><name pos:start="141:46" pos:end="141:52"><name pos:start="141:46" pos:end="141:49">args</name><index pos:start="141:50" pos:end="141:52">[<expr pos:start="141:51" pos:end="141:51"><literal type="number" pos:start="141:51" pos:end="141:51">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="143:13" pos:end="143:34"><expr pos:start="143:13" pos:end="143:33"><call pos:start="143:13" pos:end="143:33"><name pos:start="143:13" pos:end="143:21">tcg_out16</name><argument_list pos:start="143:22" pos:end="143:33">(<argument pos:start="143:23" pos:end="143:23"><expr pos:start="143:23" pos:end="143:23"><name pos:start="143:23" pos:end="143:23">s</name></expr></argument>, <argument pos:start="143:26" pos:end="143:32"><expr pos:start="143:26" pos:end="143:32"><name pos:start="143:26" pos:end="143:32"><name pos:start="143:26" pos:end="143:29">args</name><index pos:start="143:30" pos:end="143:32">[<expr pos:start="143:31" pos:end="143:31"><literal type="number" pos:start="143:31" pos:end="143:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="145:11" pos:end="151:9">else <block pos:start="145:16" pos:end="151:9">{<block_content pos:start="147:13" pos:end="149:60">

            <expr_stmt pos:start="147:13" pos:end="149:60"><expr pos:start="147:13" pos:end="149:59"><call pos:start="147:13" pos:end="149:59"><name pos:start="147:13" pos:end="147:32">tcg_out_modrm_offset</name><argument_list pos:start="147:33" pos:end="149:59">(<argument pos:start="147:34" pos:end="147:34"><expr pos:start="147:34" pos:end="147:34"><name pos:start="147:34" pos:end="147:34">s</name></expr></argument>, <argument pos:start="147:37" pos:end="147:60"><expr pos:start="147:37" pos:end="147:60"><name pos:start="147:37" pos:end="147:49">OPC_MOVL_EvGv</name> <operator pos:start="147:51" pos:end="147:51">|</operator> <name pos:start="147:53" pos:end="147:60">P_DATA16</name></expr></argument>,

                                 <argument pos:start="149:34" pos:end="149:40"><expr pos:start="149:34" pos:end="149:40"><name pos:start="149:34" pos:end="149:40"><name pos:start="149:34" pos:end="149:37">args</name><index pos:start="149:38" pos:end="149:40">[<expr pos:start="149:39" pos:end="149:39"><literal type="number" pos:start="149:39" pos:end="149:39">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:43" pos:end="149:49"><expr pos:start="149:43" pos:end="149:49"><name pos:start="149:43" pos:end="149:49"><name pos:start="149:43" pos:end="149:46">args</name><index pos:start="149:47" pos:end="149:49">[<expr pos:start="149:48" pos:end="149:48"><literal type="number" pos:start="149:48" pos:end="149:48">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="149:52" pos:end="149:58"><expr pos:start="149:52" pos:end="149:58"><name pos:start="149:52" pos:end="149:58"><name pos:start="149:52" pos:end="149:55">args</name><index pos:start="149:56" pos:end="149:58">[<expr pos:start="149:57" pos:end="149:57"><literal type="number" pos:start="149:57" pos:end="149:57">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="153:9" pos:end="156:0">break;</break>

<cpp:if pos:start="155:1" pos:end="155:29">#<cpp:directive pos:start="155:2" pos:end="155:3">if</cpp:directive> <expr pos:start="155:5" pos:end="155:29"><name pos:start="155:5" pos:end="155:23">TCG_TARGET_REG_BITS</name> <operator pos:start="155:25" pos:end="155:26">==</operator> <literal type="number" pos:start="155:28" pos:end="155:29">64</literal></expr></cpp:if>

    <case pos:start="157:5" pos:end="160:0">case <expr pos:start="157:10" pos:end="157:26"><name pos:start="157:10" pos:end="157:26">INDEX_op_st32_i64</name></expr>:</case>

<cpp:endif pos:start="159:1" pos:end="159:6">#<cpp:directive pos:start="159:2" pos:end="159:6">endif</cpp:directive></cpp:endif>

    <case pos:start="161:5" pos:end="161:25">case <expr pos:start="161:10" pos:end="161:24"><name pos:start="161:10" pos:end="161:24">INDEX_op_st_i32</name></expr>:</case>

        <if_stmt pos:start="163:9" pos:end="173:9"><if pos:start="163:9" pos:end="169:9">if <condition pos:start="163:12" pos:end="163:26">(<expr pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:25"><name pos:start="163:13" pos:end="163:22">const_args</name><index pos:start="163:23" pos:end="163:25">[<expr pos:start="163:24" pos:end="163:24"><literal type="number" pos:start="163:24" pos:end="163:24">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="163:28" pos:end="169:9">{<block_content pos:start="165:13" pos:end="167:34">

            <expr_stmt pos:start="165:13" pos:end="165:72"><expr pos:start="165:13" pos:end="165:71"><call pos:start="165:13" pos:end="165:71"><name pos:start="165:13" pos:end="165:32">tcg_out_modrm_offset</name><argument_list pos:start="165:33" pos:end="165:71">(<argument pos:start="165:34" pos:end="165:34"><expr pos:start="165:34" pos:end="165:34"><name pos:start="165:34" pos:end="165:34">s</name></expr></argument>, <argument pos:start="165:37" pos:end="165:49"><expr pos:start="165:37" pos:end="165:49"><name pos:start="165:37" pos:end="165:49">OPC_MOVL_EvIz</name></expr></argument>, <argument pos:start="165:52" pos:end="165:52"><expr pos:start="165:52" pos:end="165:52"><literal type="number" pos:start="165:52" pos:end="165:52">0</literal></expr></argument>, <argument pos:start="165:55" pos:end="165:61"><expr pos:start="165:55" pos:end="165:61"><name pos:start="165:55" pos:end="165:61"><name pos:start="165:55" pos:end="165:58">args</name><index pos:start="165:59" pos:end="165:61">[<expr pos:start="165:60" pos:end="165:60"><literal type="number" pos:start="165:60" pos:end="165:60">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="165:64" pos:end="165:70"><expr pos:start="165:64" pos:end="165:70"><name pos:start="165:64" pos:end="165:70"><name pos:start="165:64" pos:end="165:67">args</name><index pos:start="165:68" pos:end="165:70">[<expr pos:start="165:69" pos:end="165:69"><literal type="number" pos:start="165:69" pos:end="165:69">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="167:13" pos:end="167:34"><expr pos:start="167:13" pos:end="167:33"><call pos:start="167:13" pos:end="167:33"><name pos:start="167:13" pos:end="167:21">tcg_out32</name><argument_list pos:start="167:22" pos:end="167:33">(<argument pos:start="167:23" pos:end="167:23"><expr pos:start="167:23" pos:end="167:23"><name pos:start="167:23" pos:end="167:23">s</name></expr></argument>, <argument pos:start="167:26" pos:end="167:32"><expr pos:start="167:26" pos:end="167:32"><name pos:start="167:26" pos:end="167:32"><name pos:start="167:26" pos:end="167:29">args</name><index pos:start="167:30" pos:end="167:32">[<expr pos:start="167:31" pos:end="167:31"><literal type="number" pos:start="167:31" pos:end="167:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="169:11" pos:end="173:9">else <block pos:start="169:16" pos:end="173:9">{<block_content pos:start="171:13" pos:end="171:67">

            <expr_stmt pos:start="171:13" pos:end="171:67"><expr pos:start="171:13" pos:end="171:66"><call pos:start="171:13" pos:end="171:66"><name pos:start="171:13" pos:end="171:22">tcg_out_st</name><argument_list pos:start="171:23" pos:end="171:66">(<argument pos:start="171:24" pos:end="171:24"><expr pos:start="171:24" pos:end="171:24"><name pos:start="171:24" pos:end="171:24">s</name></expr></argument>, <argument pos:start="171:27" pos:end="171:38"><expr pos:start="171:27" pos:end="171:38"><name pos:start="171:27" pos:end="171:38">TCG_TYPE_I32</name></expr></argument>, <argument pos:start="171:41" pos:end="171:47"><expr pos:start="171:41" pos:end="171:47"><name pos:start="171:41" pos:end="171:47"><name pos:start="171:41" pos:end="171:44">args</name><index pos:start="171:45" pos:end="171:47">[<expr pos:start="171:46" pos:end="171:46"><literal type="number" pos:start="171:46" pos:end="171:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="171:50" pos:end="171:56"><expr pos:start="171:50" pos:end="171:56"><name pos:start="171:50" pos:end="171:56"><name pos:start="171:50" pos:end="171:53">args</name><index pos:start="171:54" pos:end="171:56">[<expr pos:start="171:55" pos:end="171:55"><literal type="number" pos:start="171:55" pos:end="171:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="171:59" pos:end="171:65"><expr pos:start="171:59" pos:end="171:65"><name pos:start="171:59" pos:end="171:65"><name pos:start="171:59" pos:end="171:62">args</name><index pos:start="171:63" pos:end="171:65">[<expr pos:start="171:64" pos:end="171:64"><literal type="number" pos:start="171:64" pos:end="171:64">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="175:9" pos:end="175:14">break;</break>



    <expr_stmt pos:start="179:5" pos:end="179:18"><expr pos:start="179:5" pos:end="179:18"><call pos:start="179:5" pos:end="179:17"><name pos:start="179:5" pos:end="179:12">OP_32_64</name><argument_list pos:start="179:13" pos:end="179:17">(<argument pos:start="179:14" pos:end="179:16"><expr pos:start="179:14" pos:end="179:16"><name pos:start="179:14" pos:end="179:16">add</name></expr></argument>)</argument_list></call><operator pos:start="179:18" pos:end="179:18">:</operator></expr></expr_stmt>

        <comment type="block" pos:start="181:9" pos:end="181:47">/* For 3-operand addition, use LEA.  */</comment>

        <if_stmt pos:start="183:9" pos:end="211:9"><if pos:start="183:9" pos:end="211:9">if <condition pos:start="183:12" pos:end="183:31">(<expr pos:start="183:13" pos:end="183:30"><name pos:start="183:13" pos:end="183:19"><name pos:start="183:13" pos:end="183:16">args</name><index pos:start="183:17" pos:end="183:19">[<expr pos:start="183:18" pos:end="183:18"><literal type="number" pos:start="183:18" pos:end="183:18">0</literal></expr>]</index></name> <operator pos:start="183:21" pos:end="183:22">!=</operator> <name pos:start="183:24" pos:end="183:30"><name pos:start="183:24" pos:end="183:27">args</name><index pos:start="183:28" pos:end="183:30">[<expr pos:start="183:29" pos:end="183:29"><literal type="number" pos:start="183:29" pos:end="183:29">1</literal></expr>]</index></name></expr>)</condition> <block pos:start="183:33" pos:end="211:9">{<block_content pos:start="185:13" pos:end="209:18">

            <decl_stmt pos:start="185:13" pos:end="185:68"><decl pos:start="185:13" pos:end="185:31"><type pos:start="185:13" pos:end="185:18"><name pos:start="185:13" pos:end="185:18">TCGArg</name></type> <name pos:start="185:20" pos:end="185:21">a0</name> <init pos:start="185:23" pos:end="185:31">= <expr pos:start="185:25" pos:end="185:31"><name pos:start="185:25" pos:end="185:31"><name pos:start="185:25" pos:end="185:28">args</name><index pos:start="185:29" pos:end="185:31">[<expr pos:start="185:30" pos:end="185:30"><literal type="number" pos:start="185:30" pos:end="185:30">0</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="185:34" pos:end="185:45"><type ref="prev" pos:start="185:13" pos:end="185:18"/><name pos:start="185:34" pos:end="185:35">a1</name> <init pos:start="185:37" pos:end="185:45">= <expr pos:start="185:39" pos:end="185:45"><name pos:start="185:39" pos:end="185:45"><name pos:start="185:39" pos:end="185:42">args</name><index pos:start="185:43" pos:end="185:45">[<expr pos:start="185:44" pos:end="185:44"><literal type="number" pos:start="185:44" pos:end="185:44">1</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="185:48" pos:end="185:59"><type ref="prev" pos:start="185:13" pos:end="185:18"/><name pos:start="185:48" pos:end="185:49">a2</name> <init pos:start="185:51" pos:end="185:59">= <expr pos:start="185:53" pos:end="185:59"><name pos:start="185:53" pos:end="185:59"><name pos:start="185:53" pos:end="185:56">args</name><index pos:start="185:57" pos:end="185:59">[<expr pos:start="185:58" pos:end="185:58"><literal type="number" pos:start="185:58" pos:end="185:58">2</literal></expr>]</index></name></expr></init></decl>, <decl pos:start="185:62" pos:end="185:67"><type ref="prev" pos:start="185:13" pos:end="185:18"/><name pos:start="185:62" pos:end="185:63">c3</name> <init pos:start="185:65" pos:end="185:67">= <expr pos:start="185:67" pos:end="185:67"><literal type="number" pos:start="185:67" pos:end="185:67">0</literal></expr></init></decl>;</decl_stmt>



            <if_stmt pos:start="189:13" pos:end="203:13"><if pos:start="189:13" pos:end="193:13">if <condition pos:start="189:16" pos:end="189:30">(<expr pos:start="189:17" pos:end="189:29"><name pos:start="189:17" pos:end="189:29"><name pos:start="189:17" pos:end="189:26">const_args</name><index pos:start="189:27" pos:end="189:29">[<expr pos:start="189:28" pos:end="189:28"><literal type="number" pos:start="189:28" pos:end="189:28">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="189:32" pos:end="193:13">{<block_content pos:start="191:17" pos:end="191:33">

                <expr_stmt pos:start="191:17" pos:end="191:33"><expr pos:start="191:17" pos:end="191:23"><name pos:start="191:17" pos:end="191:18">c3</name> <operator pos:start="191:20" pos:end="191:20">=</operator> <name pos:start="191:22" pos:end="191:23">a2</name></expr><operator pos:start="191:24" pos:end="191:24">,</operator> <expr pos:start="191:26" pos:end="191:32"><name pos:start="191:26" pos:end="191:27">a2</name> <operator pos:start="191:29" pos:end="191:29">=</operator> <operator pos:start="191:31" pos:end="191:31">-</operator><literal type="number" pos:start="191:32" pos:end="191:32">1</literal></expr>;</expr_stmt>

            </block_content>}</block></if> <if type="elseif" pos:start="193:15" pos:end="203:13">else if <condition pos:start="193:23" pos:end="193:32">(<expr pos:start="193:24" pos:end="193:31"><name pos:start="193:24" pos:end="193:25">a0</name> <operator pos:start="193:27" pos:end="193:28">==</operator> <name pos:start="193:30" pos:end="193:31">a2</name></expr>)</condition> <block pos:start="193:34" pos:end="203:13">{<block_content pos:start="199:17" pos:end="201:22">

                <comment type="block" pos:start="195:17" pos:end="197:58">/* Watch out for dest = src + dest, since we've removed

                   the matching constraint on the add.  */</comment>

                <expr_stmt pos:start="199:17" pos:end="199:57"><expr pos:start="199:17" pos:end="199:56"><call pos:start="199:17" pos:end="199:56"><name pos:start="199:17" pos:end="199:27">tgen_arithr</name><argument_list pos:start="199:28" pos:end="199:56">(<argument pos:start="199:29" pos:end="199:29"><expr pos:start="199:29" pos:end="199:29"><name pos:start="199:29" pos:end="199:29">s</name></expr></argument>, <argument pos:start="199:32" pos:end="199:47"><expr pos:start="199:32" pos:end="199:47"><name pos:start="199:32" pos:end="199:40">ARITH_ADD</name> <operator pos:start="199:42" pos:end="199:42">+</operator> <name pos:start="199:44" pos:end="199:47">rexw</name></expr></argument>, <argument pos:start="199:50" pos:end="199:51"><expr pos:start="199:50" pos:end="199:51"><name pos:start="199:50" pos:end="199:51">a0</name></expr></argument>, <argument pos:start="199:54" pos:end="199:55"><expr pos:start="199:54" pos:end="199:55"><name pos:start="199:54" pos:end="199:55">a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break pos:start="201:17" pos:end="201:22">break;</break>

            </block_content>}</block></if></if_stmt>



            <expr_stmt pos:start="207:13" pos:end="207:75"><expr pos:start="207:13" pos:end="207:74"><call pos:start="207:13" pos:end="207:74"><name pos:start="207:13" pos:end="207:36">tcg_out_modrm_sib_offset</name><argument_list pos:start="207:37" pos:end="207:74">(<argument pos:start="207:38" pos:end="207:38"><expr pos:start="207:38" pos:end="207:38"><name pos:start="207:38" pos:end="207:38">s</name></expr></argument>, <argument pos:start="207:41" pos:end="207:54"><expr pos:start="207:41" pos:end="207:54"><name pos:start="207:41" pos:end="207:47">OPC_LEA</name> <operator pos:start="207:49" pos:end="207:49">+</operator> <name pos:start="207:51" pos:end="207:54">rexw</name></expr></argument>, <argument pos:start="207:57" pos:end="207:58"><expr pos:start="207:57" pos:end="207:58"><name pos:start="207:57" pos:end="207:58">a0</name></expr></argument>, <argument pos:start="207:61" pos:end="207:62"><expr pos:start="207:61" pos:end="207:62"><name pos:start="207:61" pos:end="207:62">a1</name></expr></argument>, <argument pos:start="207:65" pos:end="207:66"><expr pos:start="207:65" pos:end="207:66"><name pos:start="207:65" pos:end="207:66">a2</name></expr></argument>, <argument pos:start="207:69" pos:end="207:69"><expr pos:start="207:69" pos:end="207:69"><literal type="number" pos:start="207:69" pos:end="207:69">0</literal></expr></argument>, <argument pos:start="207:72" pos:end="207:73"><expr pos:start="207:72" pos:end="207:73"><name pos:start="207:72" pos:end="207:73">c3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="209:13" pos:end="209:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="213:9" pos:end="213:22"><expr pos:start="213:9" pos:end="213:21"><name pos:start="213:9" pos:end="213:9">c</name> <operator pos:start="213:11" pos:end="213:11">=</operator> <name pos:start="213:13" pos:end="213:21">ARITH_ADD</name></expr>;</expr_stmt>

        <goto pos:start="215:9" pos:end="215:23">goto <name pos:start="215:14" pos:end="215:22">gen_arith</name>;</goto>

    <expr_stmt pos:start="217:5" pos:end="219:22"><expr pos:start="217:5" pos:end="219:21"><call pos:start="217:5" pos:end="217:17"><name pos:start="217:5" pos:end="217:12">OP_32_64</name><argument_list pos:start="217:13" pos:end="217:17">(<argument pos:start="217:14" pos:end="217:16"><expr pos:start="217:14" pos:end="217:16"><name pos:start="217:14" pos:end="217:16">sub</name></expr></argument>)</argument_list></call><operator pos:start="217:18" pos:end="217:18">:</operator>

        <name pos:start="219:9" pos:end="219:9">c</name> <operator pos:start="219:11" pos:end="219:11">=</operator> <name pos:start="219:13" pos:end="219:21">ARITH_SUB</name></expr>;</expr_stmt>

        <goto pos:start="221:9" pos:end="221:23">goto <name pos:start="221:14" pos:end="221:22">gen_arith</name>;</goto>

    <expr_stmt pos:start="223:5" pos:end="225:22"><expr pos:start="223:5" pos:end="225:21"><call pos:start="223:5" pos:end="223:17"><name pos:start="223:5" pos:end="223:12">OP_32_64</name><argument_list pos:start="223:13" pos:end="223:17">(<argument pos:start="223:14" pos:end="223:16"><expr pos:start="223:14" pos:end="223:16"><name pos:start="223:14" pos:end="223:16">and</name></expr></argument>)</argument_list></call><operator pos:start="223:18" pos:end="223:18">:</operator>

        <name pos:start="225:9" pos:end="225:9">c</name> <operator pos:start="225:11" pos:end="225:11">=</operator> <name pos:start="225:13" pos:end="225:21">ARITH_AND</name></expr>;</expr_stmt>

        <goto pos:start="227:9" pos:end="227:23">goto <name pos:start="227:14" pos:end="227:22">gen_arith</name>;</goto>

    <expr_stmt pos:start="229:5" pos:end="231:21"><expr pos:start="229:5" pos:end="231:20"><call pos:start="229:5" pos:end="229:16"><name pos:start="229:5" pos:end="229:12">OP_32_64</name><argument_list pos:start="229:13" pos:end="229:16">(<argument pos:start="229:14" pos:end="229:15"><expr pos:start="229:14" pos:end="229:15"><name pos:start="229:14" pos:end="229:15">or</name></expr></argument>)</argument_list></call><operator pos:start="229:17" pos:end="229:17">:</operator>

        <name pos:start="231:9" pos:end="231:9">c</name> <operator pos:start="231:11" pos:end="231:11">=</operator> <name pos:start="231:13" pos:end="231:20">ARITH_OR</name></expr>;</expr_stmt>

        <goto pos:start="233:9" pos:end="233:23">goto <name pos:start="233:14" pos:end="233:22">gen_arith</name>;</goto>

    <expr_stmt pos:start="235:5" pos:end="237:22"><expr pos:start="235:5" pos:end="237:21"><call pos:start="235:5" pos:end="235:17"><name pos:start="235:5" pos:end="235:12">OP_32_64</name><argument_list pos:start="235:13" pos:end="235:17">(<argument pos:start="235:14" pos:end="235:16"><expr pos:start="235:14" pos:end="235:16"><name pos:start="235:14" pos:end="235:16">xor</name></expr></argument>)</argument_list></call><operator pos:start="235:18" pos:end="235:18">:</operator>

        <name pos:start="237:9" pos:end="237:9">c</name> <operator pos:start="237:11" pos:end="237:11">=</operator> <name pos:start="237:13" pos:end="237:21">ARITH_XOR</name></expr>;</expr_stmt>

        <goto pos:start="239:9" pos:end="239:23">goto <name pos:start="239:14" pos:end="239:22">gen_arith</name>;</goto>

    <label pos:start="241:5" pos:end="241:14"><name pos:start="241:5" pos:end="241:13">gen_arith</name>:</label>

        <if_stmt pos:start="243:9" pos:end="251:9"><if pos:start="243:9" pos:end="247:9">if <condition pos:start="243:12" pos:end="243:26">(<expr pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:25"><name pos:start="243:13" pos:end="243:22">const_args</name><index pos:start="243:23" pos:end="243:25">[<expr pos:start="243:24" pos:end="243:24"><literal type="number" pos:start="243:24" pos:end="243:24">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="243:28" pos:end="247:9">{<block_content pos:start="245:13" pos:end="245:58">

            <expr_stmt pos:start="245:13" pos:end="245:58"><expr pos:start="245:13" pos:end="245:57"><call pos:start="245:13" pos:end="245:57"><name pos:start="245:13" pos:end="245:23">tgen_arithi</name><argument_list pos:start="245:24" pos:end="245:57">(<argument pos:start="245:25" pos:end="245:25"><expr pos:start="245:25" pos:end="245:25"><name pos:start="245:25" pos:end="245:25">s</name></expr></argument>, <argument pos:start="245:28" pos:end="245:35"><expr pos:start="245:28" pos:end="245:35"><name pos:start="245:28" pos:end="245:28">c</name> <operator pos:start="245:30" pos:end="245:30">+</operator> <name pos:start="245:32" pos:end="245:35">rexw</name></expr></argument>, <argument pos:start="245:38" pos:end="245:44"><expr pos:start="245:38" pos:end="245:44"><name pos:start="245:38" pos:end="245:44"><name pos:start="245:38" pos:end="245:41">args</name><index pos:start="245:42" pos:end="245:44">[<expr pos:start="245:43" pos:end="245:43"><literal type="number" pos:start="245:43" pos:end="245:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="245:47" pos:end="245:53"><expr pos:start="245:47" pos:end="245:53"><name pos:start="245:47" pos:end="245:53"><name pos:start="245:47" pos:end="245:50">args</name><index pos:start="245:51" pos:end="245:53">[<expr pos:start="245:52" pos:end="245:52"><literal type="number" pos:start="245:52" pos:end="245:52">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="245:56" pos:end="245:56"><expr pos:start="245:56" pos:end="245:56"><literal type="number" pos:start="245:56" pos:end="245:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="247:11" pos:end="251:9">else <block pos:start="247:16" pos:end="251:9">{<block_content pos:start="249:13" pos:end="249:55">

            <expr_stmt pos:start="249:13" pos:end="249:55"><expr pos:start="249:13" pos:end="249:54"><call pos:start="249:13" pos:end="249:54"><name pos:start="249:13" pos:end="249:23">tgen_arithr</name><argument_list pos:start="249:24" pos:end="249:54">(<argument pos:start="249:25" pos:end="249:25"><expr pos:start="249:25" pos:end="249:25"><name pos:start="249:25" pos:end="249:25">s</name></expr></argument>, <argument pos:start="249:28" pos:end="249:35"><expr pos:start="249:28" pos:end="249:35"><name pos:start="249:28" pos:end="249:28">c</name> <operator pos:start="249:30" pos:end="249:30">+</operator> <name pos:start="249:32" pos:end="249:35">rexw</name></expr></argument>, <argument pos:start="249:38" pos:end="249:44"><expr pos:start="249:38" pos:end="249:44"><name pos:start="249:38" pos:end="249:44"><name pos:start="249:38" pos:end="249:41">args</name><index pos:start="249:42" pos:end="249:44">[<expr pos:start="249:43" pos:end="249:43"><literal type="number" pos:start="249:43" pos:end="249:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="249:47" pos:end="249:53"><expr pos:start="249:47" pos:end="249:53"><name pos:start="249:47" pos:end="249:53"><name pos:start="249:47" pos:end="249:50">args</name><index pos:start="249:51" pos:end="249:53">[<expr pos:start="249:52" pos:end="249:52"><literal type="number" pos:start="249:52" pos:end="249:52">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="253:9" pos:end="253:14">break;</break>



    <expr_stmt pos:start="257:5" pos:end="257:19"><expr pos:start="257:5" pos:end="257:19"><call pos:start="257:5" pos:end="257:18"><name pos:start="257:5" pos:end="257:12">OP_32_64</name><argument_list pos:start="257:13" pos:end="257:18">(<argument pos:start="257:14" pos:end="257:17"><expr pos:start="257:14" pos:end="257:17"><name pos:start="257:14" pos:end="257:17">andc</name></expr></argument>)</argument_list></call><operator pos:start="257:19" pos:end="257:19">:</operator></expr></expr_stmt>

        <if_stmt pos:start="259:9" pos:end="271:9"><if pos:start="259:9" pos:end="267:9">if <condition pos:start="259:12" pos:end="259:26">(<expr pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:25"><name pos:start="259:13" pos:end="259:22">const_args</name><index pos:start="259:23" pos:end="259:25">[<expr pos:start="259:24" pos:end="259:24"><literal type="number" pos:start="259:24" pos:end="259:24">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="259:28" pos:end="267:9">{<block_content pos:start="261:13" pos:end="265:67">

            <expr_stmt pos:start="261:13" pos:end="263:42"><expr pos:start="261:13" pos:end="263:41"><call pos:start="261:13" pos:end="263:41"><name pos:start="261:13" pos:end="261:23">tcg_out_mov</name><argument_list pos:start="261:24" pos:end="263:41">(<argument pos:start="261:25" pos:end="261:25"><expr pos:start="261:25" pos:end="261:25"><name pos:start="261:25" pos:end="261:25">s</name></expr></argument>, <argument pos:start="261:28" pos:end="261:61"><expr pos:start="261:28" pos:end="261:61"><ternary pos:start="261:28" pos:end="261:61"><condition pos:start="261:28" pos:end="261:33"><expr pos:start="261:28" pos:end="261:31"><name pos:start="261:28" pos:end="261:31">rexw</name></expr> ?</condition><then pos:start="261:35" pos:end="261:46"> <expr pos:start="261:35" pos:end="261:46"><name pos:start="261:35" pos:end="261:46">TCG_TYPE_I64</name></expr> </then><else pos:start="261:48" pos:end="261:61">: <expr pos:start="261:50" pos:end="261:61"><name pos:start="261:50" pos:end="261:61">TCG_TYPE_I32</name></expr></else></ternary></expr></argument>,

                        <argument pos:start="263:25" pos:end="263:31"><expr pos:start="263:25" pos:end="263:31"><name pos:start="263:25" pos:end="263:31"><name pos:start="263:25" pos:end="263:28">args</name><index pos:start="263:29" pos:end="263:31">[<expr pos:start="263:30" pos:end="263:30"><literal type="number" pos:start="263:30" pos:end="263:30">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="263:34" pos:end="263:40"><expr pos:start="263:34" pos:end="263:40"><name pos:start="263:34" pos:end="263:40"><name pos:start="263:34" pos:end="263:37">args</name><index pos:start="263:38" pos:end="263:40">[<expr pos:start="263:39" pos:end="263:39"><literal type="number" pos:start="263:39" pos:end="263:39">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="265:13" pos:end="265:67"><expr pos:start="265:13" pos:end="265:66"><call pos:start="265:13" pos:end="265:66"><name pos:start="265:13" pos:end="265:23">tgen_arithi</name><argument_list pos:start="265:24" pos:end="265:66">(<argument pos:start="265:25" pos:end="265:25"><expr pos:start="265:25" pos:end="265:25"><name pos:start="265:25" pos:end="265:25">s</name></expr></argument>, <argument pos:start="265:28" pos:end="265:43"><expr pos:start="265:28" pos:end="265:43"><name pos:start="265:28" pos:end="265:36">ARITH_AND</name> <operator pos:start="265:38" pos:end="265:38">+</operator> <name pos:start="265:40" pos:end="265:43">rexw</name></expr></argument>, <argument pos:start="265:46" pos:end="265:52"><expr pos:start="265:46" pos:end="265:52"><name pos:start="265:46" pos:end="265:52"><name pos:start="265:46" pos:end="265:49">args</name><index pos:start="265:50" pos:end="265:52">[<expr pos:start="265:51" pos:end="265:51"><literal type="number" pos:start="265:51" pos:end="265:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="265:55" pos:end="265:62"><expr pos:start="265:55" pos:end="265:62"><operator pos:start="265:55" pos:end="265:55">~</operator><name pos:start="265:56" pos:end="265:62"><name pos:start="265:56" pos:end="265:59">args</name><index pos:start="265:60" pos:end="265:62">[<expr pos:start="265:61" pos:end="265:61"><literal type="number" pos:start="265:61" pos:end="265:61">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="265:65" pos:end="265:65"><expr pos:start="265:65" pos:end="265:65"><literal type="number" pos:start="265:65" pos:end="265:65">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="267:11" pos:end="271:9">else <block pos:start="267:16" pos:end="271:9">{<block_content pos:start="269:13" pos:end="269:77">

            <expr_stmt pos:start="269:13" pos:end="269:77"><expr pos:start="269:13" pos:end="269:76"><call pos:start="269:13" pos:end="269:76"><name pos:start="269:13" pos:end="269:29">tcg_out_vex_modrm</name><argument_list pos:start="269:30" pos:end="269:76">(<argument pos:start="269:31" pos:end="269:31"><expr pos:start="269:31" pos:end="269:31"><name pos:start="269:31" pos:end="269:31">s</name></expr></argument>, <argument pos:start="269:34" pos:end="269:48"><expr pos:start="269:34" pos:end="269:48"><name pos:start="269:34" pos:end="269:41">OPC_ANDN</name> <operator pos:start="269:43" pos:end="269:43">+</operator> <name pos:start="269:45" pos:end="269:48">rexw</name></expr></argument>, <argument pos:start="269:51" pos:end="269:57"><expr pos:start="269:51" pos:end="269:57"><name pos:start="269:51" pos:end="269:57"><name pos:start="269:51" pos:end="269:54">args</name><index pos:start="269:55" pos:end="269:57">[<expr pos:start="269:56" pos:end="269:56"><literal type="number" pos:start="269:56" pos:end="269:56">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="269:60" pos:end="269:66"><expr pos:start="269:60" pos:end="269:66"><name pos:start="269:60" pos:end="269:66"><name pos:start="269:60" pos:end="269:63">args</name><index pos:start="269:64" pos:end="269:66">[<expr pos:start="269:65" pos:end="269:65"><literal type="number" pos:start="269:65" pos:end="269:65">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="269:69" pos:end="269:75"><expr pos:start="269:69" pos:end="269:75"><name pos:start="269:69" pos:end="269:75"><name pos:start="269:69" pos:end="269:72">args</name><index pos:start="269:73" pos:end="269:75">[<expr pos:start="269:74" pos:end="269:74"><literal type="number" pos:start="269:74" pos:end="269:74">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="273:9" pos:end="273:14">break;</break>



    <expr_stmt pos:start="277:5" pos:end="277:18"><expr pos:start="277:5" pos:end="277:18"><call pos:start="277:5" pos:end="277:17"><name pos:start="277:5" pos:end="277:12">OP_32_64</name><argument_list pos:start="277:13" pos:end="277:17">(<argument pos:start="277:14" pos:end="277:16"><expr pos:start="277:14" pos:end="277:16"><name pos:start="277:14" pos:end="277:16">mul</name></expr></argument>)</argument_list></call><operator pos:start="277:18" pos:end="277:18">:</operator></expr></expr_stmt>

        <if_stmt pos:start="279:9" pos:end="303:9"><if pos:start="279:9" pos:end="299:9">if <condition pos:start="279:12" pos:end="279:26">(<expr pos:start="279:13" pos:end="279:25"><name pos:start="279:13" pos:end="279:25"><name pos:start="279:13" pos:end="279:22">const_args</name><index pos:start="279:23" pos:end="279:25">[<expr pos:start="279:24" pos:end="279:24"><literal type="number" pos:start="279:24" pos:end="279:24">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="279:28" pos:end="299:9">{<block_content pos:start="281:13" pos:end="297:13">

            <decl_stmt pos:start="281:13" pos:end="281:24"><decl pos:start="281:13" pos:end="281:23"><type pos:start="281:13" pos:end="281:19"><name pos:start="281:13" pos:end="281:19">int32_t</name></type> <name pos:start="281:21" pos:end="281:23">val</name></decl>;</decl_stmt>

            <expr_stmt pos:start="283:13" pos:end="283:26"><expr pos:start="283:13" pos:end="283:25"><name pos:start="283:13" pos:end="283:15">val</name> <operator pos:start="283:17" pos:end="283:17">=</operator> <name pos:start="283:19" pos:end="283:25"><name pos:start="283:19" pos:end="283:22">args</name><index pos:start="283:23" pos:end="283:25">[<expr pos:start="283:24" pos:end="283:24"><literal type="number" pos:start="283:24" pos:end="283:24">2</literal></expr>]</index></name></expr>;</expr_stmt>

            <if_stmt pos:start="285:13" pos:end="297:13"><if pos:start="285:13" pos:end="291:13">if <condition pos:start="285:16" pos:end="285:35">(<expr pos:start="285:17" pos:end="285:34"><name pos:start="285:17" pos:end="285:19">val</name> <operator pos:start="285:21" pos:end="285:22">==</operator> <operator pos:start="285:24" pos:end="285:24">(</operator><name pos:start="285:25" pos:end="285:30">int8_t</name><operator pos:start="285:31" pos:end="285:31">)</operator><name pos:start="285:32" pos:end="285:34">val</name></expr>)</condition> <block pos:start="285:37" pos:end="291:13">{<block_content pos:start="287:17" pos:end="289:33">

                <expr_stmt pos:start="287:17" pos:end="287:75"><expr pos:start="287:17" pos:end="287:74"><call pos:start="287:17" pos:end="287:74"><name pos:start="287:17" pos:end="287:29">tcg_out_modrm</name><argument_list pos:start="287:30" pos:end="287:74">(<argument pos:start="287:31" pos:end="287:31"><expr pos:start="287:31" pos:end="287:31"><name pos:start="287:31" pos:end="287:31">s</name></expr></argument>, <argument pos:start="287:34" pos:end="287:55"><expr pos:start="287:34" pos:end="287:55"><name pos:start="287:34" pos:end="287:48">OPC_IMUL_GvEvIb</name> <operator pos:start="287:50" pos:end="287:50">+</operator> <name pos:start="287:52" pos:end="287:55">rexw</name></expr></argument>, <argument pos:start="287:58" pos:end="287:64"><expr pos:start="287:58" pos:end="287:64"><name pos:start="287:58" pos:end="287:64"><name pos:start="287:58" pos:end="287:61">args</name><index pos:start="287:62" pos:end="287:64">[<expr pos:start="287:63" pos:end="287:63"><literal type="number" pos:start="287:63" pos:end="287:63">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="287:67" pos:end="287:73"><expr pos:start="287:67" pos:end="287:73"><name pos:start="287:67" pos:end="287:73"><name pos:start="287:67" pos:end="287:70">args</name><index pos:start="287:71" pos:end="287:73">[<expr pos:start="287:72" pos:end="287:72"><literal type="number" pos:start="287:72" pos:end="287:72">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="289:17" pos:end="289:33"><expr pos:start="289:17" pos:end="289:32"><call pos:start="289:17" pos:end="289:32"><name pos:start="289:17" pos:end="289:24">tcg_out8</name><argument_list pos:start="289:25" pos:end="289:32">(<argument pos:start="289:26" pos:end="289:26"><expr pos:start="289:26" pos:end="289:26"><name pos:start="289:26" pos:end="289:26">s</name></expr></argument>, <argument pos:start="289:29" pos:end="289:31"><expr pos:start="289:29" pos:end="289:31"><name pos:start="289:29" pos:end="289:31">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if> <else pos:start="291:15" pos:end="297:13">else <block pos:start="291:20" pos:end="297:13">{<block_content pos:start="293:17" pos:end="295:34">

                <expr_stmt pos:start="293:17" pos:end="293:75"><expr pos:start="293:17" pos:end="293:74"><call pos:start="293:17" pos:end="293:74"><name pos:start="293:17" pos:end="293:29">tcg_out_modrm</name><argument_list pos:start="293:30" pos:end="293:74">(<argument pos:start="293:31" pos:end="293:31"><expr pos:start="293:31" pos:end="293:31"><name pos:start="293:31" pos:end="293:31">s</name></expr></argument>, <argument pos:start="293:34" pos:end="293:55"><expr pos:start="293:34" pos:end="293:55"><name pos:start="293:34" pos:end="293:48">OPC_IMUL_GvEvIz</name> <operator pos:start="293:50" pos:end="293:50">+</operator> <name pos:start="293:52" pos:end="293:55">rexw</name></expr></argument>, <argument pos:start="293:58" pos:end="293:64"><expr pos:start="293:58" pos:end="293:64"><name pos:start="293:58" pos:end="293:64"><name pos:start="293:58" pos:end="293:61">args</name><index pos:start="293:62" pos:end="293:64">[<expr pos:start="293:63" pos:end="293:63"><literal type="number" pos:start="293:63" pos:end="293:63">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="293:67" pos:end="293:73"><expr pos:start="293:67" pos:end="293:73"><name pos:start="293:67" pos:end="293:73"><name pos:start="293:67" pos:end="293:70">args</name><index pos:start="293:71" pos:end="293:73">[<expr pos:start="293:72" pos:end="293:72"><literal type="number" pos:start="293:72" pos:end="293:72">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="295:17" pos:end="295:34"><expr pos:start="295:17" pos:end="295:33"><call pos:start="295:17" pos:end="295:33"><name pos:start="295:17" pos:end="295:25">tcg_out32</name><argument_list pos:start="295:26" pos:end="295:33">(<argument pos:start="295:27" pos:end="295:27"><expr pos:start="295:27" pos:end="295:27"><name pos:start="295:27" pos:end="295:27">s</name></expr></argument>, <argument pos:start="295:30" pos:end="295:32"><expr pos:start="295:30" pos:end="295:32"><name pos:start="295:30" pos:end="295:32">val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></else></if_stmt>

        </block_content>}</block></if> <else pos:start="299:11" pos:end="303:9">else <block pos:start="299:16" pos:end="303:9">{<block_content pos:start="301:13" pos:end="301:69">

            <expr_stmt pos:start="301:13" pos:end="301:69"><expr pos:start="301:13" pos:end="301:68"><call pos:start="301:13" pos:end="301:68"><name pos:start="301:13" pos:end="301:25">tcg_out_modrm</name><argument_list pos:start="301:26" pos:end="301:68">(<argument pos:start="301:27" pos:end="301:27"><expr pos:start="301:27" pos:end="301:27"><name pos:start="301:27" pos:end="301:27">s</name></expr></argument>, <argument pos:start="301:30" pos:end="301:49"><expr pos:start="301:30" pos:end="301:49"><name pos:start="301:30" pos:end="301:42">OPC_IMUL_GvEv</name> <operator pos:start="301:44" pos:end="301:44">+</operator> <name pos:start="301:46" pos:end="301:49">rexw</name></expr></argument>, <argument pos:start="301:52" pos:end="301:58"><expr pos:start="301:52" pos:end="301:58"><name pos:start="301:52" pos:end="301:58"><name pos:start="301:52" pos:end="301:55">args</name><index pos:start="301:56" pos:end="301:58">[<expr pos:start="301:57" pos:end="301:57"><literal type="number" pos:start="301:57" pos:end="301:57">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="301:61" pos:end="301:67"><expr pos:start="301:61" pos:end="301:67"><name pos:start="301:61" pos:end="301:67"><name pos:start="301:61" pos:end="301:64">args</name><index pos:start="301:65" pos:end="301:67">[<expr pos:start="301:66" pos:end="301:66"><literal type="number" pos:start="301:66" pos:end="301:66">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="305:9" pos:end="305:14">break;</break>



    <expr_stmt pos:start="309:5" pos:end="311:65"><expr pos:start="309:5" pos:end="311:64"><call pos:start="309:5" pos:end="309:18"><name pos:start="309:5" pos:end="309:12">OP_32_64</name><argument_list pos:start="309:13" pos:end="309:18">(<argument pos:start="309:14" pos:end="309:17"><expr pos:start="309:14" pos:end="309:17"><name pos:start="309:14" pos:end="309:17">div2</name></expr></argument>)</argument_list></call><operator pos:start="309:19" pos:end="309:19">:</operator>

        <call pos:start="311:9" pos:end="311:64"><name pos:start="311:9" pos:end="311:21">tcg_out_modrm</name><argument_list pos:start="311:22" pos:end="311:64">(<argument pos:start="311:23" pos:end="311:23"><expr pos:start="311:23" pos:end="311:23"><name pos:start="311:23" pos:end="311:23">s</name></expr></argument>, <argument pos:start="311:26" pos:end="311:43"><expr pos:start="311:26" pos:end="311:43"><name pos:start="311:26" pos:end="311:36">OPC_GRP3_Ev</name> <operator pos:start="311:38" pos:end="311:38">+</operator> <name pos:start="311:40" pos:end="311:43">rexw</name></expr></argument>, <argument pos:start="311:46" pos:end="311:54"><expr pos:start="311:46" pos:end="311:54"><name pos:start="311:46" pos:end="311:54">EXT3_IDIV</name></expr></argument>, <argument pos:start="311:57" pos:end="311:63"><expr pos:start="311:57" pos:end="311:63"><name pos:start="311:57" pos:end="311:63"><name pos:start="311:57" pos:end="311:60">args</name><index pos:start="311:61" pos:end="311:63">[<expr pos:start="311:62" pos:end="311:62"><literal type="number" pos:start="311:62" pos:end="311:62">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="313:9" pos:end="313:14">break;</break>

    <expr_stmt pos:start="315:5" pos:end="317:64"><expr pos:start="315:5" pos:end="317:63"><call pos:start="315:5" pos:end="315:19"><name pos:start="315:5" pos:end="315:12">OP_32_64</name><argument_list pos:start="315:13" pos:end="315:19">(<argument pos:start="315:14" pos:end="315:18"><expr pos:start="315:14" pos:end="315:18"><name pos:start="315:14" pos:end="315:18">divu2</name></expr></argument>)</argument_list></call><operator pos:start="315:20" pos:end="315:20">:</operator>

        <call pos:start="317:9" pos:end="317:63"><name pos:start="317:9" pos:end="317:21">tcg_out_modrm</name><argument_list pos:start="317:22" pos:end="317:63">(<argument pos:start="317:23" pos:end="317:23"><expr pos:start="317:23" pos:end="317:23"><name pos:start="317:23" pos:end="317:23">s</name></expr></argument>, <argument pos:start="317:26" pos:end="317:43"><expr pos:start="317:26" pos:end="317:43"><name pos:start="317:26" pos:end="317:36">OPC_GRP3_Ev</name> <operator pos:start="317:38" pos:end="317:38">+</operator> <name pos:start="317:40" pos:end="317:43">rexw</name></expr></argument>, <argument pos:start="317:46" pos:end="317:53"><expr pos:start="317:46" pos:end="317:53"><name pos:start="317:46" pos:end="317:53">EXT3_DIV</name></expr></argument>, <argument pos:start="317:56" pos:end="317:62"><expr pos:start="317:56" pos:end="317:62"><name pos:start="317:56" pos:end="317:62"><name pos:start="317:56" pos:end="317:59">args</name><index pos:start="317:60" pos:end="317:62">[<expr pos:start="317:61" pos:end="317:61"><literal type="number" pos:start="317:61" pos:end="317:61">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="319:9" pos:end="319:14">break;</break>



    <expr_stmt pos:start="323:5" pos:end="325:22"><expr pos:start="323:5" pos:end="325:21"><call pos:start="323:5" pos:end="323:17"><name pos:start="323:5" pos:end="323:12">OP_32_64</name><argument_list pos:start="323:13" pos:end="323:17">(<argument pos:start="323:14" pos:end="323:16"><expr pos:start="323:14" pos:end="323:16"><name pos:start="323:14" pos:end="323:16">shl</name></expr></argument>)</argument_list></call><operator pos:start="323:18" pos:end="323:18">:</operator>

        <name pos:start="325:9" pos:end="325:9">c</name> <operator pos:start="325:11" pos:end="325:11">=</operator> <name pos:start="325:13" pos:end="325:21">SHIFT_SHL</name></expr>;</expr_stmt>

        <expr_stmt pos:start="327:9" pos:end="327:25"><expr pos:start="327:9" pos:end="327:24"><name pos:start="327:9" pos:end="327:13">vexop</name> <operator pos:start="327:15" pos:end="327:15">=</operator> <name pos:start="327:17" pos:end="327:24">OPC_SHLX</name></expr>;</expr_stmt>

        <goto pos:start="329:9" pos:end="329:33">goto <name pos:start="329:14" pos:end="329:32">gen_shift_maybe_vex</name>;</goto>

    <expr_stmt pos:start="331:5" pos:end="333:22"><expr pos:start="331:5" pos:end="333:21"><call pos:start="331:5" pos:end="331:17"><name pos:start="331:5" pos:end="331:12">OP_32_64</name><argument_list pos:start="331:13" pos:end="331:17">(<argument pos:start="331:14" pos:end="331:16"><expr pos:start="331:14" pos:end="331:16"><name pos:start="331:14" pos:end="331:16">shr</name></expr></argument>)</argument_list></call><operator pos:start="331:18" pos:end="331:18">:</operator>

        <name pos:start="333:9" pos:end="333:9">c</name> <operator pos:start="333:11" pos:end="333:11">=</operator> <name pos:start="333:13" pos:end="333:21">SHIFT_SHR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="335:9" pos:end="335:25"><expr pos:start="335:9" pos:end="335:24"><name pos:start="335:9" pos:end="335:13">vexop</name> <operator pos:start="335:15" pos:end="335:15">=</operator> <name pos:start="335:17" pos:end="335:24">OPC_SHRX</name></expr>;</expr_stmt>

        <goto pos:start="337:9" pos:end="337:33">goto <name pos:start="337:14" pos:end="337:32">gen_shift_maybe_vex</name>;</goto>

    <expr_stmt pos:start="339:5" pos:end="341:22"><expr pos:start="339:5" pos:end="341:21"><call pos:start="339:5" pos:end="339:17"><name pos:start="339:5" pos:end="339:12">OP_32_64</name><argument_list pos:start="339:13" pos:end="339:17">(<argument pos:start="339:14" pos:end="339:16"><expr pos:start="339:14" pos:end="339:16"><name pos:start="339:14" pos:end="339:16">sar</name></expr></argument>)</argument_list></call><operator pos:start="339:18" pos:end="339:18">:</operator>

        <name pos:start="341:9" pos:end="341:9">c</name> <operator pos:start="341:11" pos:end="341:11">=</operator> <name pos:start="341:13" pos:end="341:21">SHIFT_SAR</name></expr>;</expr_stmt>

        <expr_stmt pos:start="343:9" pos:end="343:25"><expr pos:start="343:9" pos:end="343:24"><name pos:start="343:9" pos:end="343:13">vexop</name> <operator pos:start="343:15" pos:end="343:15">=</operator> <name pos:start="343:17" pos:end="343:24">OPC_SARX</name></expr>;</expr_stmt>

        <goto pos:start="345:9" pos:end="345:33">goto <name pos:start="345:14" pos:end="345:32">gen_shift_maybe_vex</name>;</goto>

    <expr_stmt pos:start="347:5" pos:end="349:22"><expr pos:start="347:5" pos:end="349:21"><call pos:start="347:5" pos:end="347:18"><name pos:start="347:5" pos:end="347:12">OP_32_64</name><argument_list pos:start="347:13" pos:end="347:18">(<argument pos:start="347:14" pos:end="347:17"><expr pos:start="347:14" pos:end="347:17"><name pos:start="347:14" pos:end="347:17">rotl</name></expr></argument>)</argument_list></call><operator pos:start="347:19" pos:end="347:19">:</operator>

        <name pos:start="349:9" pos:end="349:9">c</name> <operator pos:start="349:11" pos:end="349:11">=</operator> <name pos:start="349:13" pos:end="349:21">SHIFT_ROL</name></expr>;</expr_stmt>

        <goto pos:start="351:9" pos:end="351:23">goto <name pos:start="351:14" pos:end="351:22">gen_shift</name>;</goto>

    <expr_stmt pos:start="353:5" pos:end="355:22"><expr pos:start="353:5" pos:end="355:21"><call pos:start="353:5" pos:end="353:18"><name pos:start="353:5" pos:end="353:12">OP_32_64</name><argument_list pos:start="353:13" pos:end="353:18">(<argument pos:start="353:14" pos:end="353:17"><expr pos:start="353:14" pos:end="353:17"><name pos:start="353:14" pos:end="353:17">rotr</name></expr></argument>)</argument_list></call><operator pos:start="353:19" pos:end="353:19">:</operator>

        <name pos:start="355:9" pos:end="355:9">c</name> <operator pos:start="355:11" pos:end="355:11">=</operator> <name pos:start="355:13" pos:end="355:21">SHIFT_ROR</name></expr>;</expr_stmt>

        <goto pos:start="357:9" pos:end="357:23">goto <name pos:start="357:14" pos:end="357:22">gen_shift</name>;</goto>

    <label pos:start="359:5" pos:end="359:24"><name pos:start="359:5" pos:end="359:23">gen_shift_maybe_vex</name>:</label>

        <if_stmt pos:start="361:9" pos:end="367:9"><if pos:start="361:9" pos:end="367:9">if <condition pos:start="361:12" pos:end="361:40">(<expr pos:start="361:13" pos:end="361:39"><name pos:start="361:13" pos:end="361:21">have_bmi2</name> <operator pos:start="361:23" pos:end="361:24">&amp;&amp;</operator> <operator pos:start="361:26" pos:end="361:26">!</operator><name pos:start="361:27" pos:end="361:39"><name pos:start="361:27" pos:end="361:36">const_args</name><index pos:start="361:37" pos:end="361:39">[<expr pos:start="361:38" pos:end="361:38"><literal type="number" pos:start="361:38" pos:end="361:38">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="361:42" pos:end="367:9">{<block_content pos:start="363:13" pos:end="365:18">

            <expr_stmt pos:start="363:13" pos:end="363:74"><expr pos:start="363:13" pos:end="363:73"><call pos:start="363:13" pos:end="363:73"><name pos:start="363:13" pos:end="363:29">tcg_out_vex_modrm</name><argument_list pos:start="363:30" pos:end="363:73">(<argument pos:start="363:31" pos:end="363:31"><expr pos:start="363:31" pos:end="363:31"><name pos:start="363:31" pos:end="363:31">s</name></expr></argument>, <argument pos:start="363:34" pos:end="363:45"><expr pos:start="363:34" pos:end="363:45"><name pos:start="363:34" pos:end="363:38">vexop</name> <operator pos:start="363:40" pos:end="363:40">+</operator> <name pos:start="363:42" pos:end="363:45">rexw</name></expr></argument>, <argument pos:start="363:48" pos:end="363:54"><expr pos:start="363:48" pos:end="363:54"><name pos:start="363:48" pos:end="363:54"><name pos:start="363:48" pos:end="363:51">args</name><index pos:start="363:52" pos:end="363:54">[<expr pos:start="363:53" pos:end="363:53"><literal type="number" pos:start="363:53" pos:end="363:53">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="363:57" pos:end="363:63"><expr pos:start="363:57" pos:end="363:63"><name pos:start="363:57" pos:end="363:63"><name pos:start="363:57" pos:end="363:60">args</name><index pos:start="363:61" pos:end="363:63">[<expr pos:start="363:62" pos:end="363:62"><literal type="number" pos:start="363:62" pos:end="363:62">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="363:66" pos:end="363:72"><expr pos:start="363:66" pos:end="363:72"><name pos:start="363:66" pos:end="363:72"><name pos:start="363:66" pos:end="363:69">args</name><index pos:start="363:70" pos:end="363:72">[<expr pos:start="363:71" pos:end="363:71"><literal type="number" pos:start="363:71" pos:end="363:71">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="365:13" pos:end="365:18">break;</break>

        </block_content>}</block></if></if_stmt>

        <comment type="block" pos:start="369:9" pos:end="369:22">/* FALLTHRU */</comment>

    <label pos:start="371:5" pos:end="371:14"><name pos:start="371:5" pos:end="371:13">gen_shift</name>:</label>

        <if_stmt pos:start="373:9" pos:end="381:9"><if pos:start="373:9" pos:end="377:9">if <condition pos:start="373:12" pos:end="373:26">(<expr pos:start="373:13" pos:end="373:25"><name pos:start="373:13" pos:end="373:25"><name pos:start="373:13" pos:end="373:22">const_args</name><index pos:start="373:23" pos:end="373:25">[<expr pos:start="373:24" pos:end="373:24"><literal type="number" pos:start="373:24" pos:end="373:24">2</literal></expr>]</index></name></expr>)</condition> <block pos:start="373:28" pos:end="377:9">{<block_content pos:start="375:13" pos:end="375:58">

            <expr_stmt pos:start="375:13" pos:end="375:58"><expr pos:start="375:13" pos:end="375:57"><call pos:start="375:13" pos:end="375:57"><name pos:start="375:13" pos:end="375:26">tcg_out_shifti</name><argument_list pos:start="375:27" pos:end="375:57">(<argument pos:start="375:28" pos:end="375:28"><expr pos:start="375:28" pos:end="375:28"><name pos:start="375:28" pos:end="375:28">s</name></expr></argument>, <argument pos:start="375:31" pos:end="375:38"><expr pos:start="375:31" pos:end="375:38"><name pos:start="375:31" pos:end="375:31">c</name> <operator pos:start="375:33" pos:end="375:33">+</operator> <name pos:start="375:35" pos:end="375:38">rexw</name></expr></argument>, <argument pos:start="375:41" pos:end="375:47"><expr pos:start="375:41" pos:end="375:47"><name pos:start="375:41" pos:end="375:47"><name pos:start="375:41" pos:end="375:44">args</name><index pos:start="375:45" pos:end="375:47">[<expr pos:start="375:46" pos:end="375:46"><literal type="number" pos:start="375:46" pos:end="375:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="375:50" pos:end="375:56"><expr pos:start="375:50" pos:end="375:56"><name pos:start="375:50" pos:end="375:56"><name pos:start="375:50" pos:end="375:53">args</name><index pos:start="375:54" pos:end="375:56">[<expr pos:start="375:55" pos:end="375:55"><literal type="number" pos:start="375:55" pos:end="375:55">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="377:11" pos:end="381:9">else <block pos:start="377:16" pos:end="381:9">{<block_content pos:start="379:13" pos:end="379:62">

            <expr_stmt pos:start="379:13" pos:end="379:62"><expr pos:start="379:13" pos:end="379:61"><call pos:start="379:13" pos:end="379:61"><name pos:start="379:13" pos:end="379:25">tcg_out_modrm</name><argument_list pos:start="379:26" pos:end="379:61">(<argument pos:start="379:27" pos:end="379:27"><expr pos:start="379:27" pos:end="379:27"><name pos:start="379:27" pos:end="379:27">s</name></expr></argument>, <argument pos:start="379:30" pos:end="379:48"><expr pos:start="379:30" pos:end="379:48"><name pos:start="379:30" pos:end="379:41">OPC_SHIFT_cl</name> <operator pos:start="379:43" pos:end="379:43">+</operator> <name pos:start="379:45" pos:end="379:48">rexw</name></expr></argument>, <argument pos:start="379:51" pos:end="379:51"><expr pos:start="379:51" pos:end="379:51"><name pos:start="379:51" pos:end="379:51">c</name></expr></argument>, <argument pos:start="379:54" pos:end="379:60"><expr pos:start="379:54" pos:end="379:60"><name pos:start="379:54" pos:end="379:60"><name pos:start="379:54" pos:end="379:57">args</name><index pos:start="379:58" pos:end="379:60">[<expr pos:start="379:59" pos:end="379:59"><literal type="number" pos:start="379:59" pos:end="379:59">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="383:9" pos:end="383:14">break;</break>



    <case pos:start="387:5" pos:end="387:29">case <expr pos:start="387:10" pos:end="387:28"><name pos:start="387:10" pos:end="387:28">INDEX_op_brcond_i32</name></expr>:</case>

        <expr_stmt pos:start="389:9" pos:end="391:37"><expr pos:start="389:9" pos:end="391:36"><call pos:start="389:9" pos:end="391:36"><name pos:start="389:9" pos:end="389:24">tcg_out_brcond32</name><argument_list pos:start="389:25" pos:end="391:36">(<argument pos:start="389:26" pos:end="389:26"><expr pos:start="389:26" pos:end="389:26"><name pos:start="389:26" pos:end="389:26">s</name></expr></argument>, <argument pos:start="389:29" pos:end="389:35"><expr pos:start="389:29" pos:end="389:35"><name pos:start="389:29" pos:end="389:35"><name pos:start="389:29" pos:end="389:32">args</name><index pos:start="389:33" pos:end="389:35">[<expr pos:start="389:34" pos:end="389:34"><literal type="number" pos:start="389:34" pos:end="389:34">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="389:38" pos:end="389:44"><expr pos:start="389:38" pos:end="389:44"><name pos:start="389:38" pos:end="389:44"><name pos:start="389:38" pos:end="389:41">args</name><index pos:start="389:42" pos:end="389:44">[<expr pos:start="389:43" pos:end="389:43"><literal type="number" pos:start="389:43" pos:end="389:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="389:47" pos:end="389:53"><expr pos:start="389:47" pos:end="389:53"><name pos:start="389:47" pos:end="389:53"><name pos:start="389:47" pos:end="389:50">args</name><index pos:start="389:51" pos:end="389:53">[<expr pos:start="389:52" pos:end="389:52"><literal type="number" pos:start="389:52" pos:end="389:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="389:56" pos:end="389:68"><expr pos:start="389:56" pos:end="389:68"><name pos:start="389:56" pos:end="389:68"><name pos:start="389:56" pos:end="389:65">const_args</name><index pos:start="389:66" pos:end="389:68">[<expr pos:start="389:67" pos:end="389:67"><literal type="number" pos:start="389:67" pos:end="389:67">1</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="391:26" pos:end="391:32"><expr pos:start="391:26" pos:end="391:32"><name pos:start="391:26" pos:end="391:32"><name pos:start="391:26" pos:end="391:29">args</name><index pos:start="391:30" pos:end="391:32">[<expr pos:start="391:31" pos:end="391:31"><literal type="number" pos:start="391:31" pos:end="391:31">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="391:35" pos:end="391:35"><expr pos:start="391:35" pos:end="391:35"><literal type="number" pos:start="391:35" pos:end="391:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="393:9" pos:end="393:14">break;</break>

    <case pos:start="395:5" pos:end="395:30">case <expr pos:start="395:10" pos:end="395:29"><name pos:start="395:10" pos:end="395:29">INDEX_op_setcond_i32</name></expr>:</case>

        <expr_stmt pos:start="397:9" pos:end="399:50"><expr pos:start="397:9" pos:end="399:49"><call pos:start="397:9" pos:end="399:49"><name pos:start="397:9" pos:end="397:25">tcg_out_setcond32</name><argument_list pos:start="397:26" pos:end="399:49">(<argument pos:start="397:27" pos:end="397:27"><expr pos:start="397:27" pos:end="397:27"><name pos:start="397:27" pos:end="397:27">s</name></expr></argument>, <argument pos:start="397:30" pos:end="397:36"><expr pos:start="397:30" pos:end="397:36"><name pos:start="397:30" pos:end="397:36"><name pos:start="397:30" pos:end="397:33">args</name><index pos:start="397:34" pos:end="397:36">[<expr pos:start="397:35" pos:end="397:35"><literal type="number" pos:start="397:35" pos:end="397:35">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="397:39" pos:end="397:45"><expr pos:start="397:39" pos:end="397:45"><name pos:start="397:39" pos:end="397:45"><name pos:start="397:39" pos:end="397:42">args</name><index pos:start="397:43" pos:end="397:45">[<expr pos:start="397:44" pos:end="397:44"><literal type="number" pos:start="397:44" pos:end="397:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="397:48" pos:end="397:54"><expr pos:start="397:48" pos:end="397:54"><name pos:start="397:48" pos:end="397:54"><name pos:start="397:48" pos:end="397:51">args</name><index pos:start="397:52" pos:end="397:54">[<expr pos:start="397:53" pos:end="397:53"><literal type="number" pos:start="397:53" pos:end="397:53">1</literal></expr>]</index></name></expr></argument>,

                          <argument pos:start="399:27" pos:end="399:33"><expr pos:start="399:27" pos:end="399:33"><name pos:start="399:27" pos:end="399:33"><name pos:start="399:27" pos:end="399:30">args</name><index pos:start="399:31" pos:end="399:33">[<expr pos:start="399:32" pos:end="399:32"><literal type="number" pos:start="399:32" pos:end="399:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="399:36" pos:end="399:48"><expr pos:start="399:36" pos:end="399:48"><name pos:start="399:36" pos:end="399:48"><name pos:start="399:36" pos:end="399:45">const_args</name><index pos:start="399:46" pos:end="399:48">[<expr pos:start="399:47" pos:end="399:47"><literal type="number" pos:start="399:47" pos:end="399:47">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="401:9" pos:end="401:14">break;</break>

    <case pos:start="403:5" pos:end="403:30">case <expr pos:start="403:10" pos:end="403:29"><name pos:start="403:10" pos:end="403:29">INDEX_op_movcond_i32</name></expr>:</case>

        <expr_stmt pos:start="405:9" pos:end="407:59"><expr pos:start="405:9" pos:end="407:58"><call pos:start="405:9" pos:end="407:58"><name pos:start="405:9" pos:end="405:25">tcg_out_movcond32</name><argument_list pos:start="405:26" pos:end="407:58">(<argument pos:start="405:27" pos:end="405:27"><expr pos:start="405:27" pos:end="405:27"><name pos:start="405:27" pos:end="405:27">s</name></expr></argument>, <argument pos:start="405:30" pos:end="405:36"><expr pos:start="405:30" pos:end="405:36"><name pos:start="405:30" pos:end="405:36"><name pos:start="405:30" pos:end="405:33">args</name><index pos:start="405:34" pos:end="405:36">[<expr pos:start="405:35" pos:end="405:35"><literal type="number" pos:start="405:35" pos:end="405:35">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="405:39" pos:end="405:45"><expr pos:start="405:39" pos:end="405:45"><name pos:start="405:39" pos:end="405:45"><name pos:start="405:39" pos:end="405:42">args</name><index pos:start="405:43" pos:end="405:45">[<expr pos:start="405:44" pos:end="405:44"><literal type="number" pos:start="405:44" pos:end="405:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="405:48" pos:end="405:54"><expr pos:start="405:48" pos:end="405:54"><name pos:start="405:48" pos:end="405:54"><name pos:start="405:48" pos:end="405:51">args</name><index pos:start="405:52" pos:end="405:54">[<expr pos:start="405:53" pos:end="405:53"><literal type="number" pos:start="405:53" pos:end="405:53">1</literal></expr>]</index></name></expr></argument>,

                          <argument pos:start="407:27" pos:end="407:33"><expr pos:start="407:27" pos:end="407:33"><name pos:start="407:27" pos:end="407:33"><name pos:start="407:27" pos:end="407:30">args</name><index pos:start="407:31" pos:end="407:33">[<expr pos:start="407:32" pos:end="407:32"><literal type="number" pos:start="407:32" pos:end="407:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="407:36" pos:end="407:48"><expr pos:start="407:36" pos:end="407:48"><name pos:start="407:36" pos:end="407:48"><name pos:start="407:36" pos:end="407:45">const_args</name><index pos:start="407:46" pos:end="407:48">[<expr pos:start="407:47" pos:end="407:47"><literal type="number" pos:start="407:47" pos:end="407:47">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="407:51" pos:end="407:57"><expr pos:start="407:51" pos:end="407:57"><name pos:start="407:51" pos:end="407:57"><name pos:start="407:51" pos:end="407:54">args</name><index pos:start="407:55" pos:end="407:57">[<expr pos:start="407:56" pos:end="407:56"><literal type="number" pos:start="407:56" pos:end="407:56">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="409:9" pos:end="409:14">break;</break>



    <expr_stmt pos:start="413:5" pos:end="415:35"><expr pos:start="413:5" pos:end="415:34"><call pos:start="413:5" pos:end="413:21"><name pos:start="413:5" pos:end="413:12">OP_32_64</name><argument_list pos:start="413:13" pos:end="413:21">(<argument pos:start="413:14" pos:end="413:20"><expr pos:start="413:14" pos:end="413:20"><name pos:start="413:14" pos:end="413:20">bswap16</name></expr></argument>)</argument_list></call><operator pos:start="413:22" pos:end="413:22">:</operator>

        <call pos:start="415:9" pos:end="415:34"><name pos:start="415:9" pos:end="415:22">tcg_out_rolw_8</name><argument_list pos:start="415:23" pos:end="415:34">(<argument pos:start="415:24" pos:end="415:24"><expr pos:start="415:24" pos:end="415:24"><name pos:start="415:24" pos:end="415:24">s</name></expr></argument>, <argument pos:start="415:27" pos:end="415:33"><expr pos:start="415:27" pos:end="415:33"><name pos:start="415:27" pos:end="415:33"><name pos:start="415:27" pos:end="415:30">args</name><index pos:start="415:31" pos:end="415:33">[<expr pos:start="415:32" pos:end="415:32"><literal type="number" pos:start="415:32" pos:end="415:32">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="417:9" pos:end="417:14">break;</break>

    <expr_stmt pos:start="419:5" pos:end="421:36"><expr pos:start="419:5" pos:end="421:35"><call pos:start="419:5" pos:end="419:21"><name pos:start="419:5" pos:end="419:12">OP_32_64</name><argument_list pos:start="419:13" pos:end="419:21">(<argument pos:start="419:14" pos:end="419:20"><expr pos:start="419:14" pos:end="419:20"><name pos:start="419:14" pos:end="419:20">bswap32</name></expr></argument>)</argument_list></call><operator pos:start="419:22" pos:end="419:22">:</operator>

        <call pos:start="421:9" pos:end="421:35"><name pos:start="421:9" pos:end="421:23">tcg_out_bswap32</name><argument_list pos:start="421:24" pos:end="421:35">(<argument pos:start="421:25" pos:end="421:25"><expr pos:start="421:25" pos:end="421:25"><name pos:start="421:25" pos:end="421:25">s</name></expr></argument>, <argument pos:start="421:28" pos:end="421:34"><expr pos:start="421:28" pos:end="421:34"><name pos:start="421:28" pos:end="421:34"><name pos:start="421:28" pos:end="421:31">args</name><index pos:start="421:32" pos:end="421:34">[<expr pos:start="421:33" pos:end="421:33"><literal type="number" pos:start="421:33" pos:end="421:33">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="423:9" pos:end="423:14">break;</break>



    <expr_stmt pos:start="427:5" pos:end="429:64"><expr pos:start="427:5" pos:end="429:63"><call pos:start="427:5" pos:end="427:17"><name pos:start="427:5" pos:end="427:12">OP_32_64</name><argument_list pos:start="427:13" pos:end="427:17">(<argument pos:start="427:14" pos:end="427:16"><expr pos:start="427:14" pos:end="427:16"><name pos:start="427:14" pos:end="427:16">neg</name></expr></argument>)</argument_list></call><operator pos:start="427:18" pos:end="427:18">:</operator>

        <call pos:start="429:9" pos:end="429:63"><name pos:start="429:9" pos:end="429:21">tcg_out_modrm</name><argument_list pos:start="429:22" pos:end="429:63">(<argument pos:start="429:23" pos:end="429:23"><expr pos:start="429:23" pos:end="429:23"><name pos:start="429:23" pos:end="429:23">s</name></expr></argument>, <argument pos:start="429:26" pos:end="429:43"><expr pos:start="429:26" pos:end="429:43"><name pos:start="429:26" pos:end="429:36">OPC_GRP3_Ev</name> <operator pos:start="429:38" pos:end="429:38">+</operator> <name pos:start="429:40" pos:end="429:43">rexw</name></expr></argument>, <argument pos:start="429:46" pos:end="429:53"><expr pos:start="429:46" pos:end="429:53"><name pos:start="429:46" pos:end="429:53">EXT3_NEG</name></expr></argument>, <argument pos:start="429:56" pos:end="429:62"><expr pos:start="429:56" pos:end="429:62"><name pos:start="429:56" pos:end="429:62"><name pos:start="429:56" pos:end="429:59">args</name><index pos:start="429:60" pos:end="429:62">[<expr pos:start="429:61" pos:end="429:61"><literal type="number" pos:start="429:61" pos:end="429:61">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="431:9" pos:end="431:14">break;</break>

    <expr_stmt pos:start="433:5" pos:end="435:64"><expr pos:start="433:5" pos:end="435:63"><call pos:start="433:5" pos:end="433:17"><name pos:start="433:5" pos:end="433:12">OP_32_64</name><argument_list pos:start="433:13" pos:end="433:17">(<argument pos:start="433:14" pos:end="433:16"><expr pos:start="433:14" pos:end="433:16"><name pos:start="433:14" pos:end="433:16">not</name></expr></argument>)</argument_list></call><operator pos:start="433:18" pos:end="433:18">:</operator>

        <call pos:start="435:9" pos:end="435:63"><name pos:start="435:9" pos:end="435:21">tcg_out_modrm</name><argument_list pos:start="435:22" pos:end="435:63">(<argument pos:start="435:23" pos:end="435:23"><expr pos:start="435:23" pos:end="435:23"><name pos:start="435:23" pos:end="435:23">s</name></expr></argument>, <argument pos:start="435:26" pos:end="435:43"><expr pos:start="435:26" pos:end="435:43"><name pos:start="435:26" pos:end="435:36">OPC_GRP3_Ev</name> <operator pos:start="435:38" pos:end="435:38">+</operator> <name pos:start="435:40" pos:end="435:43">rexw</name></expr></argument>, <argument pos:start="435:46" pos:end="435:53"><expr pos:start="435:46" pos:end="435:53"><name pos:start="435:46" pos:end="435:53">EXT3_NOT</name></expr></argument>, <argument pos:start="435:56" pos:end="435:62"><expr pos:start="435:56" pos:end="435:62"><name pos:start="435:56" pos:end="435:62"><name pos:start="435:56" pos:end="435:59">args</name><index pos:start="435:60" pos:end="435:62">[<expr pos:start="435:61" pos:end="435:61"><literal type="number" pos:start="435:61" pos:end="435:61">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="437:9" pos:end="437:14">break;</break>



    <expr_stmt pos:start="441:5" pos:end="443:49"><expr pos:start="441:5" pos:end="443:48"><call pos:start="441:5" pos:end="441:19"><name pos:start="441:5" pos:end="441:12">OP_32_64</name><argument_list pos:start="441:13" pos:end="441:19">(<argument pos:start="441:14" pos:end="441:18"><expr pos:start="441:14" pos:end="441:18"><name pos:start="441:14" pos:end="441:18">ext8s</name></expr></argument>)</argument_list></call><operator pos:start="441:20" pos:end="441:20">:</operator>

        <call pos:start="443:9" pos:end="443:48"><name pos:start="443:9" pos:end="443:21">tcg_out_ext8s</name><argument_list pos:start="443:22" pos:end="443:48">(<argument pos:start="443:23" pos:end="443:23"><expr pos:start="443:23" pos:end="443:23"><name pos:start="443:23" pos:end="443:23">s</name></expr></argument>, <argument pos:start="443:26" pos:end="443:32"><expr pos:start="443:26" pos:end="443:32"><name pos:start="443:26" pos:end="443:32"><name pos:start="443:26" pos:end="443:29">args</name><index pos:start="443:30" pos:end="443:32">[<expr pos:start="443:31" pos:end="443:31"><literal type="number" pos:start="443:31" pos:end="443:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="443:35" pos:end="443:41"><expr pos:start="443:35" pos:end="443:41"><name pos:start="443:35" pos:end="443:41"><name pos:start="443:35" pos:end="443:38">args</name><index pos:start="443:39" pos:end="443:41">[<expr pos:start="443:40" pos:end="443:40"><literal type="number" pos:start="443:40" pos:end="443:40">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="443:44" pos:end="443:47"><expr pos:start="443:44" pos:end="443:47"><name pos:start="443:44" pos:end="443:47">rexw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="445:9" pos:end="445:14">break;</break>

    <expr_stmt pos:start="447:5" pos:end="449:50"><expr pos:start="447:5" pos:end="449:49"><call pos:start="447:5" pos:end="447:20"><name pos:start="447:5" pos:end="447:12">OP_32_64</name><argument_list pos:start="447:13" pos:end="447:20">(<argument pos:start="447:14" pos:end="447:19"><expr pos:start="447:14" pos:end="447:19"><name pos:start="447:14" pos:end="447:19">ext16s</name></expr></argument>)</argument_list></call><operator pos:start="447:21" pos:end="447:21">:</operator>

        <call pos:start="449:9" pos:end="449:49"><name pos:start="449:9" pos:end="449:22">tcg_out_ext16s</name><argument_list pos:start="449:23" pos:end="449:49">(<argument pos:start="449:24" pos:end="449:24"><expr pos:start="449:24" pos:end="449:24"><name pos:start="449:24" pos:end="449:24">s</name></expr></argument>, <argument pos:start="449:27" pos:end="449:33"><expr pos:start="449:27" pos:end="449:33"><name pos:start="449:27" pos:end="449:33"><name pos:start="449:27" pos:end="449:30">args</name><index pos:start="449:31" pos:end="449:33">[<expr pos:start="449:32" pos:end="449:32"><literal type="number" pos:start="449:32" pos:end="449:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="449:36" pos:end="449:42"><expr pos:start="449:36" pos:end="449:42"><name pos:start="449:36" pos:end="449:42"><name pos:start="449:36" pos:end="449:39">args</name><index pos:start="449:40" pos:end="449:42">[<expr pos:start="449:41" pos:end="449:41"><literal type="number" pos:start="449:41" pos:end="449:41">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="449:45" pos:end="449:48"><expr pos:start="449:45" pos:end="449:48"><name pos:start="449:45" pos:end="449:48">rexw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="451:9" pos:end="451:14">break;</break>

    <expr_stmt pos:start="453:5" pos:end="455:43"><expr pos:start="453:5" pos:end="455:42"><call pos:start="453:5" pos:end="453:19"><name pos:start="453:5" pos:end="453:12">OP_32_64</name><argument_list pos:start="453:13" pos:end="453:19">(<argument pos:start="453:14" pos:end="453:18"><expr pos:start="453:14" pos:end="453:18"><name pos:start="453:14" pos:end="453:18">ext8u</name></expr></argument>)</argument_list></call><operator pos:start="453:20" pos:end="453:20">:</operator>

        <call pos:start="455:9" pos:end="455:42"><name pos:start="455:9" pos:end="455:21">tcg_out_ext8u</name><argument_list pos:start="455:22" pos:end="455:42">(<argument pos:start="455:23" pos:end="455:23"><expr pos:start="455:23" pos:end="455:23"><name pos:start="455:23" pos:end="455:23">s</name></expr></argument>, <argument pos:start="455:26" pos:end="455:32"><expr pos:start="455:26" pos:end="455:32"><name pos:start="455:26" pos:end="455:32"><name pos:start="455:26" pos:end="455:29">args</name><index pos:start="455:30" pos:end="455:32">[<expr pos:start="455:31" pos:end="455:31"><literal type="number" pos:start="455:31" pos:end="455:31">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="455:35" pos:end="455:41"><expr pos:start="455:35" pos:end="455:41"><name pos:start="455:35" pos:end="455:41"><name pos:start="455:35" pos:end="455:38">args</name><index pos:start="455:39" pos:end="455:41">[<expr pos:start="455:40" pos:end="455:40"><literal type="number" pos:start="455:40" pos:end="455:40">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="457:9" pos:end="457:14">break;</break>

    <expr_stmt pos:start="459:5" pos:end="461:44"><expr pos:start="459:5" pos:end="461:43"><call pos:start="459:5" pos:end="459:20"><name pos:start="459:5" pos:end="459:12">OP_32_64</name><argument_list pos:start="459:13" pos:end="459:20">(<argument pos:start="459:14" pos:end="459:19"><expr pos:start="459:14" pos:end="459:19"><name pos:start="459:14" pos:end="459:19">ext16u</name></expr></argument>)</argument_list></call><operator pos:start="459:21" pos:end="459:21">:</operator>

        <call pos:start="461:9" pos:end="461:43"><name pos:start="461:9" pos:end="461:22">tcg_out_ext16u</name><argument_list pos:start="461:23" pos:end="461:43">(<argument pos:start="461:24" pos:end="461:24"><expr pos:start="461:24" pos:end="461:24"><name pos:start="461:24" pos:end="461:24">s</name></expr></argument>, <argument pos:start="461:27" pos:end="461:33"><expr pos:start="461:27" pos:end="461:33"><name pos:start="461:27" pos:end="461:33"><name pos:start="461:27" pos:end="461:30">args</name><index pos:start="461:31" pos:end="461:33">[<expr pos:start="461:32" pos:end="461:32"><literal type="number" pos:start="461:32" pos:end="461:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="461:36" pos:end="461:42"><expr pos:start="461:36" pos:end="461:42"><name pos:start="461:36" pos:end="461:42"><name pos:start="461:36" pos:end="461:39">args</name><index pos:start="461:40" pos:end="461:42">[<expr pos:start="461:41" pos:end="461:41"><literal type="number" pos:start="461:41" pos:end="461:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="463:9" pos:end="463:14">break;</break>



    <case pos:start="467:5" pos:end="467:30">case <expr pos:start="467:10" pos:end="467:29"><name pos:start="467:10" pos:end="467:29">INDEX_op_qemu_ld_i32</name></expr>:</case>

        <expr_stmt pos:start="469:9" pos:end="469:36"><expr pos:start="469:9" pos:end="469:35"><call pos:start="469:9" pos:end="469:35"><name pos:start="469:9" pos:end="469:23">tcg_out_qemu_ld</name><argument_list pos:start="469:24" pos:end="469:35">(<argument pos:start="469:25" pos:end="469:25"><expr pos:start="469:25" pos:end="469:25"><name pos:start="469:25" pos:end="469:25">s</name></expr></argument>, <argument pos:start="469:28" pos:end="469:31"><expr pos:start="469:28" pos:end="469:31"><name pos:start="469:28" pos:end="469:31">args</name></expr></argument>, <argument pos:start="469:34" pos:end="469:34"><expr pos:start="469:34" pos:end="469:34"><literal type="number" pos:start="469:34" pos:end="469:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="471:9" pos:end="471:14">break;</break>

    <case pos:start="473:5" pos:end="473:30">case <expr pos:start="473:10" pos:end="473:29"><name pos:start="473:10" pos:end="473:29">INDEX_op_qemu_ld_i64</name></expr>:</case>

        <expr_stmt pos:start="475:9" pos:end="475:36"><expr pos:start="475:9" pos:end="475:35"><call pos:start="475:9" pos:end="475:35"><name pos:start="475:9" pos:end="475:23">tcg_out_qemu_ld</name><argument_list pos:start="475:24" pos:end="475:35">(<argument pos:start="475:25" pos:end="475:25"><expr pos:start="475:25" pos:end="475:25"><name pos:start="475:25" pos:end="475:25">s</name></expr></argument>, <argument pos:start="475:28" pos:end="475:31"><expr pos:start="475:28" pos:end="475:31"><name pos:start="475:28" pos:end="475:31">args</name></expr></argument>, <argument pos:start="475:34" pos:end="475:34"><expr pos:start="475:34" pos:end="475:34"><literal type="number" pos:start="475:34" pos:end="475:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="477:9" pos:end="477:14">break;</break>

    <case pos:start="479:5" pos:end="479:30">case <expr pos:start="479:10" pos:end="479:29"><name pos:start="479:10" pos:end="479:29">INDEX_op_qemu_st_i32</name></expr>:</case>

        <expr_stmt pos:start="481:9" pos:end="481:36"><expr pos:start="481:9" pos:end="481:35"><call pos:start="481:9" pos:end="481:35"><name pos:start="481:9" pos:end="481:23">tcg_out_qemu_st</name><argument_list pos:start="481:24" pos:end="481:35">(<argument pos:start="481:25" pos:end="481:25"><expr pos:start="481:25" pos:end="481:25"><name pos:start="481:25" pos:end="481:25">s</name></expr></argument>, <argument pos:start="481:28" pos:end="481:31"><expr pos:start="481:28" pos:end="481:31"><name pos:start="481:28" pos:end="481:31">args</name></expr></argument>, <argument pos:start="481:34" pos:end="481:34"><expr pos:start="481:34" pos:end="481:34"><literal type="number" pos:start="481:34" pos:end="481:34">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="483:9" pos:end="483:14">break;</break>

    <case pos:start="485:5" pos:end="485:30">case <expr pos:start="485:10" pos:end="485:29"><name pos:start="485:10" pos:end="485:29">INDEX_op_qemu_st_i64</name></expr>:</case>

        <expr_stmt pos:start="487:9" pos:end="487:36"><expr pos:start="487:9" pos:end="487:35"><call pos:start="487:9" pos:end="487:35"><name pos:start="487:9" pos:end="487:23">tcg_out_qemu_st</name><argument_list pos:start="487:24" pos:end="487:35">(<argument pos:start="487:25" pos:end="487:25"><expr pos:start="487:25" pos:end="487:25"><name pos:start="487:25" pos:end="487:25">s</name></expr></argument>, <argument pos:start="487:28" pos:end="487:31"><expr pos:start="487:28" pos:end="487:31"><name pos:start="487:28" pos:end="487:31">args</name></expr></argument>, <argument pos:start="487:34" pos:end="487:34"><expr pos:start="487:34" pos:end="487:34"><literal type="number" pos:start="487:34" pos:end="487:34">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="489:9" pos:end="489:14">break;</break>



    <expr_stmt pos:start="493:5" pos:end="495:64"><expr pos:start="493:5" pos:end="495:63"><call pos:start="493:5" pos:end="493:19"><name pos:start="493:5" pos:end="493:12">OP_32_64</name><argument_list pos:start="493:13" pos:end="493:19">(<argument pos:start="493:14" pos:end="493:18"><expr pos:start="493:14" pos:end="493:18"><name pos:start="493:14" pos:end="493:18">mulu2</name></expr></argument>)</argument_list></call><operator pos:start="493:20" pos:end="493:20">:</operator>

        <call pos:start="495:9" pos:end="495:63"><name pos:start="495:9" pos:end="495:21">tcg_out_modrm</name><argument_list pos:start="495:22" pos:end="495:63">(<argument pos:start="495:23" pos:end="495:23"><expr pos:start="495:23" pos:end="495:23"><name pos:start="495:23" pos:end="495:23">s</name></expr></argument>, <argument pos:start="495:26" pos:end="495:43"><expr pos:start="495:26" pos:end="495:43"><name pos:start="495:26" pos:end="495:36">OPC_GRP3_Ev</name> <operator pos:start="495:38" pos:end="495:38">+</operator> <name pos:start="495:40" pos:end="495:43">rexw</name></expr></argument>, <argument pos:start="495:46" pos:end="495:53"><expr pos:start="495:46" pos:end="495:53"><name pos:start="495:46" pos:end="495:53">EXT3_MUL</name></expr></argument>, <argument pos:start="495:56" pos:end="495:62"><expr pos:start="495:56" pos:end="495:62"><name pos:start="495:56" pos:end="495:62"><name pos:start="495:56" pos:end="495:59">args</name><index pos:start="495:60" pos:end="495:62">[<expr pos:start="495:61" pos:end="495:61"><literal type="number" pos:start="495:61" pos:end="495:61">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="497:9" pos:end="497:14">break;</break>

    <expr_stmt pos:start="499:5" pos:end="501:65"><expr pos:start="499:5" pos:end="501:64"><call pos:start="499:5" pos:end="499:19"><name pos:start="499:5" pos:end="499:12">OP_32_64</name><argument_list pos:start="499:13" pos:end="499:19">(<argument pos:start="499:14" pos:end="499:18"><expr pos:start="499:14" pos:end="499:18"><name pos:start="499:14" pos:end="499:18">muls2</name></expr></argument>)</argument_list></call><operator pos:start="499:20" pos:end="499:20">:</operator>

        <call pos:start="501:9" pos:end="501:64"><name pos:start="501:9" pos:end="501:21">tcg_out_modrm</name><argument_list pos:start="501:22" pos:end="501:64">(<argument pos:start="501:23" pos:end="501:23"><expr pos:start="501:23" pos:end="501:23"><name pos:start="501:23" pos:end="501:23">s</name></expr></argument>, <argument pos:start="501:26" pos:end="501:43"><expr pos:start="501:26" pos:end="501:43"><name pos:start="501:26" pos:end="501:36">OPC_GRP3_Ev</name> <operator pos:start="501:38" pos:end="501:38">+</operator> <name pos:start="501:40" pos:end="501:43">rexw</name></expr></argument>, <argument pos:start="501:46" pos:end="501:54"><expr pos:start="501:46" pos:end="501:54"><name pos:start="501:46" pos:end="501:54">EXT3_IMUL</name></expr></argument>, <argument pos:start="501:57" pos:end="501:63"><expr pos:start="501:57" pos:end="501:63"><name pos:start="501:57" pos:end="501:63"><name pos:start="501:57" pos:end="501:60">args</name><index pos:start="501:61" pos:end="501:63">[<expr pos:start="501:62" pos:end="501:62"><literal type="number" pos:start="501:62" pos:end="501:62">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="503:9" pos:end="503:14">break;</break>

    <expr_stmt pos:start="505:5" pos:end="505:19"><expr pos:start="505:5" pos:end="505:19"><call pos:start="505:5" pos:end="505:18"><name pos:start="505:5" pos:end="505:12">OP_32_64</name><argument_list pos:start="505:13" pos:end="505:18">(<argument pos:start="505:14" pos:end="505:17"><expr pos:start="505:14" pos:end="505:17"><name pos:start="505:14" pos:end="505:17">add2</name></expr></argument>)</argument_list></call><operator pos:start="505:19" pos:end="505:19">:</operator></expr></expr_stmt>

        <if_stmt pos:start="507:9" pos:end="515:9"><if pos:start="507:9" pos:end="511:9">if <condition pos:start="507:12" pos:end="507:26">(<expr pos:start="507:13" pos:end="507:25"><name pos:start="507:13" pos:end="507:25"><name pos:start="507:13" pos:end="507:22">const_args</name><index pos:start="507:23" pos:end="507:25">[<expr pos:start="507:24" pos:end="507:24"><literal type="number" pos:start="507:24" pos:end="507:24">4</literal></expr>]</index></name></expr>)</condition> <block pos:start="507:28" pos:end="511:9">{<block_content pos:start="509:13" pos:end="509:66">

            <expr_stmt pos:start="509:13" pos:end="509:66"><expr pos:start="509:13" pos:end="509:65"><call pos:start="509:13" pos:end="509:65"><name pos:start="509:13" pos:end="509:23">tgen_arithi</name><argument_list pos:start="509:24" pos:end="509:65">(<argument pos:start="509:25" pos:end="509:25"><expr pos:start="509:25" pos:end="509:25"><name pos:start="509:25" pos:end="509:25">s</name></expr></argument>, <argument pos:start="509:28" pos:end="509:43"><expr pos:start="509:28" pos:end="509:43"><name pos:start="509:28" pos:end="509:36">ARITH_ADD</name> <operator pos:start="509:38" pos:end="509:38">+</operator> <name pos:start="509:40" pos:end="509:43">rexw</name></expr></argument>, <argument pos:start="509:46" pos:end="509:52"><expr pos:start="509:46" pos:end="509:52"><name pos:start="509:46" pos:end="509:52"><name pos:start="509:46" pos:end="509:49">args</name><index pos:start="509:50" pos:end="509:52">[<expr pos:start="509:51" pos:end="509:51"><literal type="number" pos:start="509:51" pos:end="509:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="509:55" pos:end="509:61"><expr pos:start="509:55" pos:end="509:61"><name pos:start="509:55" pos:end="509:61"><name pos:start="509:55" pos:end="509:58">args</name><index pos:start="509:59" pos:end="509:61">[<expr pos:start="509:60" pos:end="509:60"><literal type="number" pos:start="509:60" pos:end="509:60">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="509:64" pos:end="509:64"><expr pos:start="509:64" pos:end="509:64"><literal type="number" pos:start="509:64" pos:end="509:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="511:11" pos:end="515:9">else <block pos:start="511:16" pos:end="515:9">{<block_content pos:start="513:13" pos:end="513:63">

            <expr_stmt pos:start="513:13" pos:end="513:63"><expr pos:start="513:13" pos:end="513:62"><call pos:start="513:13" pos:end="513:62"><name pos:start="513:13" pos:end="513:23">tgen_arithr</name><argument_list pos:start="513:24" pos:end="513:62">(<argument pos:start="513:25" pos:end="513:25"><expr pos:start="513:25" pos:end="513:25"><name pos:start="513:25" pos:end="513:25">s</name></expr></argument>, <argument pos:start="513:28" pos:end="513:43"><expr pos:start="513:28" pos:end="513:43"><name pos:start="513:28" pos:end="513:36">ARITH_ADD</name> <operator pos:start="513:38" pos:end="513:38">+</operator> <name pos:start="513:40" pos:end="513:43">rexw</name></expr></argument>, <argument pos:start="513:46" pos:end="513:52"><expr pos:start="513:46" pos:end="513:52"><name pos:start="513:46" pos:end="513:52"><name pos:start="513:46" pos:end="513:49">args</name><index pos:start="513:50" pos:end="513:52">[<expr pos:start="513:51" pos:end="513:51"><literal type="number" pos:start="513:51" pos:end="513:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="513:55" pos:end="513:61"><expr pos:start="513:55" pos:end="513:61"><name pos:start="513:55" pos:end="513:61"><name pos:start="513:55" pos:end="513:58">args</name><index pos:start="513:59" pos:end="513:61">[<expr pos:start="513:60" pos:end="513:60"><literal type="number" pos:start="513:60" pos:end="513:60">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="517:9" pos:end="525:9"><if pos:start="517:9" pos:end="521:9">if <condition pos:start="517:12" pos:end="517:26">(<expr pos:start="517:13" pos:end="517:25"><name pos:start="517:13" pos:end="517:25"><name pos:start="517:13" pos:end="517:22">const_args</name><index pos:start="517:23" pos:end="517:25">[<expr pos:start="517:24" pos:end="517:24"><literal type="number" pos:start="517:24" pos:end="517:24">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="517:28" pos:end="521:9">{<block_content pos:start="519:13" pos:end="519:66">

            <expr_stmt pos:start="519:13" pos:end="519:66"><expr pos:start="519:13" pos:end="519:65"><call pos:start="519:13" pos:end="519:65"><name pos:start="519:13" pos:end="519:23">tgen_arithi</name><argument_list pos:start="519:24" pos:end="519:65">(<argument pos:start="519:25" pos:end="519:25"><expr pos:start="519:25" pos:end="519:25"><name pos:start="519:25" pos:end="519:25">s</name></expr></argument>, <argument pos:start="519:28" pos:end="519:43"><expr pos:start="519:28" pos:end="519:43"><name pos:start="519:28" pos:end="519:36">ARITH_ADC</name> <operator pos:start="519:38" pos:end="519:38">+</operator> <name pos:start="519:40" pos:end="519:43">rexw</name></expr></argument>, <argument pos:start="519:46" pos:end="519:52"><expr pos:start="519:46" pos:end="519:52"><name pos:start="519:46" pos:end="519:52"><name pos:start="519:46" pos:end="519:49">args</name><index pos:start="519:50" pos:end="519:52">[<expr pos:start="519:51" pos:end="519:51"><literal type="number" pos:start="519:51" pos:end="519:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="519:55" pos:end="519:61"><expr pos:start="519:55" pos:end="519:61"><name pos:start="519:55" pos:end="519:61"><name pos:start="519:55" pos:end="519:58">args</name><index pos:start="519:59" pos:end="519:61">[<expr pos:start="519:60" pos:end="519:60"><literal type="number" pos:start="519:60" pos:end="519:60">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="519:64" pos:end="519:64"><expr pos:start="519:64" pos:end="519:64"><literal type="number" pos:start="519:64" pos:end="519:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="521:11" pos:end="525:9">else <block pos:start="521:16" pos:end="525:9">{<block_content pos:start="523:13" pos:end="523:63">

            <expr_stmt pos:start="523:13" pos:end="523:63"><expr pos:start="523:13" pos:end="523:62"><call pos:start="523:13" pos:end="523:62"><name pos:start="523:13" pos:end="523:23">tgen_arithr</name><argument_list pos:start="523:24" pos:end="523:62">(<argument pos:start="523:25" pos:end="523:25"><expr pos:start="523:25" pos:end="523:25"><name pos:start="523:25" pos:end="523:25">s</name></expr></argument>, <argument pos:start="523:28" pos:end="523:43"><expr pos:start="523:28" pos:end="523:43"><name pos:start="523:28" pos:end="523:36">ARITH_ADC</name> <operator pos:start="523:38" pos:end="523:38">+</operator> <name pos:start="523:40" pos:end="523:43">rexw</name></expr></argument>, <argument pos:start="523:46" pos:end="523:52"><expr pos:start="523:46" pos:end="523:52"><name pos:start="523:46" pos:end="523:52"><name pos:start="523:46" pos:end="523:49">args</name><index pos:start="523:50" pos:end="523:52">[<expr pos:start="523:51" pos:end="523:51"><literal type="number" pos:start="523:51" pos:end="523:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="523:55" pos:end="523:61"><expr pos:start="523:55" pos:end="523:61"><name pos:start="523:55" pos:end="523:61"><name pos:start="523:55" pos:end="523:58">args</name><index pos:start="523:59" pos:end="523:61">[<expr pos:start="523:60" pos:end="523:60"><literal type="number" pos:start="523:60" pos:end="523:60">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="527:9" pos:end="527:14">break;</break>

    <expr_stmt pos:start="529:5" pos:end="529:19"><expr pos:start="529:5" pos:end="529:19"><call pos:start="529:5" pos:end="529:18"><name pos:start="529:5" pos:end="529:12">OP_32_64</name><argument_list pos:start="529:13" pos:end="529:18">(<argument pos:start="529:14" pos:end="529:17"><expr pos:start="529:14" pos:end="529:17"><name pos:start="529:14" pos:end="529:17">sub2</name></expr></argument>)</argument_list></call><operator pos:start="529:19" pos:end="529:19">:</operator></expr></expr_stmt>

        <if_stmt pos:start="531:9" pos:end="539:9"><if pos:start="531:9" pos:end="535:9">if <condition pos:start="531:12" pos:end="531:26">(<expr pos:start="531:13" pos:end="531:25"><name pos:start="531:13" pos:end="531:25"><name pos:start="531:13" pos:end="531:22">const_args</name><index pos:start="531:23" pos:end="531:25">[<expr pos:start="531:24" pos:end="531:24"><literal type="number" pos:start="531:24" pos:end="531:24">4</literal></expr>]</index></name></expr>)</condition> <block pos:start="531:28" pos:end="535:9">{<block_content pos:start="533:13" pos:end="533:66">

            <expr_stmt pos:start="533:13" pos:end="533:66"><expr pos:start="533:13" pos:end="533:65"><call pos:start="533:13" pos:end="533:65"><name pos:start="533:13" pos:end="533:23">tgen_arithi</name><argument_list pos:start="533:24" pos:end="533:65">(<argument pos:start="533:25" pos:end="533:25"><expr pos:start="533:25" pos:end="533:25"><name pos:start="533:25" pos:end="533:25">s</name></expr></argument>, <argument pos:start="533:28" pos:end="533:43"><expr pos:start="533:28" pos:end="533:43"><name pos:start="533:28" pos:end="533:36">ARITH_SUB</name> <operator pos:start="533:38" pos:end="533:38">+</operator> <name pos:start="533:40" pos:end="533:43">rexw</name></expr></argument>, <argument pos:start="533:46" pos:end="533:52"><expr pos:start="533:46" pos:end="533:52"><name pos:start="533:46" pos:end="533:52"><name pos:start="533:46" pos:end="533:49">args</name><index pos:start="533:50" pos:end="533:52">[<expr pos:start="533:51" pos:end="533:51"><literal type="number" pos:start="533:51" pos:end="533:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="533:55" pos:end="533:61"><expr pos:start="533:55" pos:end="533:61"><name pos:start="533:55" pos:end="533:61"><name pos:start="533:55" pos:end="533:58">args</name><index pos:start="533:59" pos:end="533:61">[<expr pos:start="533:60" pos:end="533:60"><literal type="number" pos:start="533:60" pos:end="533:60">4</literal></expr>]</index></name></expr></argument>, <argument pos:start="533:64" pos:end="533:64"><expr pos:start="533:64" pos:end="533:64"><literal type="number" pos:start="533:64" pos:end="533:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="535:11" pos:end="539:9">else <block pos:start="535:16" pos:end="539:9">{<block_content pos:start="537:13" pos:end="537:63">

            <expr_stmt pos:start="537:13" pos:end="537:63"><expr pos:start="537:13" pos:end="537:62"><call pos:start="537:13" pos:end="537:62"><name pos:start="537:13" pos:end="537:23">tgen_arithr</name><argument_list pos:start="537:24" pos:end="537:62">(<argument pos:start="537:25" pos:end="537:25"><expr pos:start="537:25" pos:end="537:25"><name pos:start="537:25" pos:end="537:25">s</name></expr></argument>, <argument pos:start="537:28" pos:end="537:43"><expr pos:start="537:28" pos:end="537:43"><name pos:start="537:28" pos:end="537:36">ARITH_SUB</name> <operator pos:start="537:38" pos:end="537:38">+</operator> <name pos:start="537:40" pos:end="537:43">rexw</name></expr></argument>, <argument pos:start="537:46" pos:end="537:52"><expr pos:start="537:46" pos:end="537:52"><name pos:start="537:46" pos:end="537:52"><name pos:start="537:46" pos:end="537:49">args</name><index pos:start="537:50" pos:end="537:52">[<expr pos:start="537:51" pos:end="537:51"><literal type="number" pos:start="537:51" pos:end="537:51">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="537:55" pos:end="537:61"><expr pos:start="537:55" pos:end="537:61"><name pos:start="537:55" pos:end="537:61"><name pos:start="537:55" pos:end="537:58">args</name><index pos:start="537:59" pos:end="537:61">[<expr pos:start="537:60" pos:end="537:60"><literal type="number" pos:start="537:60" pos:end="537:60">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <if_stmt pos:start="541:9" pos:end="549:9"><if pos:start="541:9" pos:end="545:9">if <condition pos:start="541:12" pos:end="541:26">(<expr pos:start="541:13" pos:end="541:25"><name pos:start="541:13" pos:end="541:25"><name pos:start="541:13" pos:end="541:22">const_args</name><index pos:start="541:23" pos:end="541:25">[<expr pos:start="541:24" pos:end="541:24"><literal type="number" pos:start="541:24" pos:end="541:24">5</literal></expr>]</index></name></expr>)</condition> <block pos:start="541:28" pos:end="545:9">{<block_content pos:start="543:13" pos:end="543:66">

            <expr_stmt pos:start="543:13" pos:end="543:66"><expr pos:start="543:13" pos:end="543:65"><call pos:start="543:13" pos:end="543:65"><name pos:start="543:13" pos:end="543:23">tgen_arithi</name><argument_list pos:start="543:24" pos:end="543:65">(<argument pos:start="543:25" pos:end="543:25"><expr pos:start="543:25" pos:end="543:25"><name pos:start="543:25" pos:end="543:25">s</name></expr></argument>, <argument pos:start="543:28" pos:end="543:43"><expr pos:start="543:28" pos:end="543:43"><name pos:start="543:28" pos:end="543:36">ARITH_SBB</name> <operator pos:start="543:38" pos:end="543:38">+</operator> <name pos:start="543:40" pos:end="543:43">rexw</name></expr></argument>, <argument pos:start="543:46" pos:end="543:52"><expr pos:start="543:46" pos:end="543:52"><name pos:start="543:46" pos:end="543:52"><name pos:start="543:46" pos:end="543:49">args</name><index pos:start="543:50" pos:end="543:52">[<expr pos:start="543:51" pos:end="543:51"><literal type="number" pos:start="543:51" pos:end="543:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="543:55" pos:end="543:61"><expr pos:start="543:55" pos:end="543:61"><name pos:start="543:55" pos:end="543:61"><name pos:start="543:55" pos:end="543:58">args</name><index pos:start="543:59" pos:end="543:61">[<expr pos:start="543:60" pos:end="543:60"><literal type="number" pos:start="543:60" pos:end="543:60">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="543:64" pos:end="543:64"><expr pos:start="543:64" pos:end="543:64"><literal type="number" pos:start="543:64" pos:end="543:64">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="545:11" pos:end="549:9">else <block pos:start="545:16" pos:end="549:9">{<block_content pos:start="547:13" pos:end="547:63">

            <expr_stmt pos:start="547:13" pos:end="547:63"><expr pos:start="547:13" pos:end="547:62"><call pos:start="547:13" pos:end="547:62"><name pos:start="547:13" pos:end="547:23">tgen_arithr</name><argument_list pos:start="547:24" pos:end="547:62">(<argument pos:start="547:25" pos:end="547:25"><expr pos:start="547:25" pos:end="547:25"><name pos:start="547:25" pos:end="547:25">s</name></expr></argument>, <argument pos:start="547:28" pos:end="547:43"><expr pos:start="547:28" pos:end="547:43"><name pos:start="547:28" pos:end="547:36">ARITH_SBB</name> <operator pos:start="547:38" pos:end="547:38">+</operator> <name pos:start="547:40" pos:end="547:43">rexw</name></expr></argument>, <argument pos:start="547:46" pos:end="547:52"><expr pos:start="547:46" pos:end="547:52"><name pos:start="547:46" pos:end="547:52"><name pos:start="547:46" pos:end="547:49">args</name><index pos:start="547:50" pos:end="547:52">[<expr pos:start="547:51" pos:end="547:51"><literal type="number" pos:start="547:51" pos:end="547:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="547:55" pos:end="547:61"><expr pos:start="547:55" pos:end="547:61"><name pos:start="547:55" pos:end="547:61"><name pos:start="547:55" pos:end="547:58">args</name><index pos:start="547:59" pos:end="547:61">[<expr pos:start="547:60" pos:end="547:60"><literal type="number" pos:start="547:60" pos:end="547:60">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="551:9" pos:end="556:0">break;</break>



<cpp:if pos:start="555:1" pos:end="555:29">#<cpp:directive pos:start="555:2" pos:end="555:3">if</cpp:directive> <expr pos:start="555:5" pos:end="555:29"><name pos:start="555:5" pos:end="555:23">TCG_TARGET_REG_BITS</name> <operator pos:start="555:25" pos:end="555:26">==</operator> <literal type="number" pos:start="555:28" pos:end="555:29">32</literal></expr></cpp:if>

    <case pos:start="557:5" pos:end="557:30">case <expr pos:start="557:10" pos:end="557:29"><name pos:start="557:10" pos:end="557:29">INDEX_op_brcond2_i32</name></expr>:</case>

        <expr_stmt pos:start="559:9" pos:end="559:48"><expr pos:start="559:9" pos:end="559:47"><call pos:start="559:9" pos:end="559:47"><name pos:start="559:9" pos:end="559:23">tcg_out_brcond2</name><argument_list pos:start="559:24" pos:end="559:47">(<argument pos:start="559:25" pos:end="559:25"><expr pos:start="559:25" pos:end="559:25"><name pos:start="559:25" pos:end="559:25">s</name></expr></argument>, <argument pos:start="559:28" pos:end="559:31"><expr pos:start="559:28" pos:end="559:31"><name pos:start="559:28" pos:end="559:31">args</name></expr></argument>, <argument pos:start="559:34" pos:end="559:43"><expr pos:start="559:34" pos:end="559:43"><name pos:start="559:34" pos:end="559:43">const_args</name></expr></argument>, <argument pos:start="559:46" pos:end="559:46"><expr pos:start="559:46" pos:end="559:46"><literal type="number" pos:start="559:46" pos:end="559:46">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="561:9" pos:end="561:14">break;</break>

    <case pos:start="563:5" pos:end="563:31">case <expr pos:start="563:10" pos:end="563:30"><name pos:start="563:10" pos:end="563:30">INDEX_op_setcond2_i32</name></expr>:</case>

        <expr_stmt pos:start="565:9" pos:end="565:46"><expr pos:start="565:9" pos:end="565:45"><call pos:start="565:9" pos:end="565:45"><name pos:start="565:9" pos:end="565:24">tcg_out_setcond2</name><argument_list pos:start="565:25" pos:end="565:45">(<argument pos:start="565:26" pos:end="565:26"><expr pos:start="565:26" pos:end="565:26"><name pos:start="565:26" pos:end="565:26">s</name></expr></argument>, <argument pos:start="565:29" pos:end="565:32"><expr pos:start="565:29" pos:end="565:32"><name pos:start="565:29" pos:end="565:32">args</name></expr></argument>, <argument pos:start="565:35" pos:end="565:44"><expr pos:start="565:35" pos:end="565:44"><name pos:start="565:35" pos:end="565:44">const_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="567:9" pos:end="570:0">break;</break>

<cpp:else pos:start="569:1" pos:end="569:5">#<cpp:directive pos:start="569:2" pos:end="569:5">else</cpp:directive></cpp:else> <comment type="block" pos:start="569:7" pos:end="569:37">/* TCG_TARGET_REG_BITS == 64 */</comment>

    <case pos:start="571:5" pos:end="571:28">case <expr pos:start="571:10" pos:end="571:27"><name pos:start="571:10" pos:end="571:27">INDEX_op_ld32s_i64</name></expr>:</case>

        <expr_stmt pos:start="573:9" pos:end="573:71"><expr pos:start="573:9" pos:end="573:70"><call pos:start="573:9" pos:end="573:70"><name pos:start="573:9" pos:end="573:28">tcg_out_modrm_offset</name><argument_list pos:start="573:29" pos:end="573:70">(<argument pos:start="573:30" pos:end="573:30"><expr pos:start="573:30" pos:end="573:30"><name pos:start="573:30" pos:end="573:30">s</name></expr></argument>, <argument pos:start="573:33" pos:end="573:42"><expr pos:start="573:33" pos:end="573:42"><name pos:start="573:33" pos:end="573:42">OPC_MOVSLQ</name></expr></argument>, <argument pos:start="573:45" pos:end="573:51"><expr pos:start="573:45" pos:end="573:51"><name pos:start="573:45" pos:end="573:51"><name pos:start="573:45" pos:end="573:48">args</name><index pos:start="573:49" pos:end="573:51">[<expr pos:start="573:50" pos:end="573:50"><literal type="number" pos:start="573:50" pos:end="573:50">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="573:54" pos:end="573:60"><expr pos:start="573:54" pos:end="573:60"><name pos:start="573:54" pos:end="573:60"><name pos:start="573:54" pos:end="573:57">args</name><index pos:start="573:58" pos:end="573:60">[<expr pos:start="573:59" pos:end="573:59"><literal type="number" pos:start="573:59" pos:end="573:59">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="573:63" pos:end="573:69"><expr pos:start="573:63" pos:end="573:69"><name pos:start="573:63" pos:end="573:69"><name pos:start="573:63" pos:end="573:66">args</name><index pos:start="573:67" pos:end="573:69">[<expr pos:start="573:68" pos:end="573:68"><literal type="number" pos:start="573:68" pos:end="573:68">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="575:9" pos:end="575:14">break;</break>

    <case pos:start="577:5" pos:end="577:25">case <expr pos:start="577:10" pos:end="577:24"><name pos:start="577:10" pos:end="577:24">INDEX_op_ld_i64</name></expr>:</case>

        <expr_stmt pos:start="579:9" pos:end="579:63"><expr pos:start="579:9" pos:end="579:62"><call pos:start="579:9" pos:end="579:62"><name pos:start="579:9" pos:end="579:18">tcg_out_ld</name><argument_list pos:start="579:19" pos:end="579:62">(<argument pos:start="579:20" pos:end="579:20"><expr pos:start="579:20" pos:end="579:20"><name pos:start="579:20" pos:end="579:20">s</name></expr></argument>, <argument pos:start="579:23" pos:end="579:34"><expr pos:start="579:23" pos:end="579:34"><name pos:start="579:23" pos:end="579:34">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="579:37" pos:end="579:43"><expr pos:start="579:37" pos:end="579:43"><name pos:start="579:37" pos:end="579:43"><name pos:start="579:37" pos:end="579:40">args</name><index pos:start="579:41" pos:end="579:43">[<expr pos:start="579:42" pos:end="579:42"><literal type="number" pos:start="579:42" pos:end="579:42">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="579:46" pos:end="579:52"><expr pos:start="579:46" pos:end="579:52"><name pos:start="579:46" pos:end="579:52"><name pos:start="579:46" pos:end="579:49">args</name><index pos:start="579:50" pos:end="579:52">[<expr pos:start="579:51" pos:end="579:51"><literal type="number" pos:start="579:51" pos:end="579:51">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="579:55" pos:end="579:61"><expr pos:start="579:55" pos:end="579:61"><name pos:start="579:55" pos:end="579:61"><name pos:start="579:55" pos:end="579:58">args</name><index pos:start="579:59" pos:end="579:61">[<expr pos:start="579:60" pos:end="579:60"><literal type="number" pos:start="579:60" pos:end="579:60">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="581:9" pos:end="581:14">break;</break>

    <case pos:start="583:5" pos:end="583:25">case <expr pos:start="583:10" pos:end="583:24"><name pos:start="583:10" pos:end="583:24">INDEX_op_st_i64</name></expr>:</case>

        <if_stmt pos:start="585:9" pos:end="597:9"><if pos:start="585:9" pos:end="593:9">if <condition pos:start="585:12" pos:end="585:26">(<expr pos:start="585:13" pos:end="585:25"><name pos:start="585:13" pos:end="585:25"><name pos:start="585:13" pos:end="585:22">const_args</name><index pos:start="585:23" pos:end="585:25">[<expr pos:start="585:24" pos:end="585:24"><literal type="number" pos:start="585:24" pos:end="585:24">0</literal></expr>]</index></name></expr>)</condition> <block pos:start="585:28" pos:end="593:9">{<block_content pos:start="587:13" pos:end="591:34">

            <expr_stmt pos:start="587:13" pos:end="589:54"><expr pos:start="587:13" pos:end="589:53"><call pos:start="587:13" pos:end="589:53"><name pos:start="587:13" pos:end="587:32">tcg_out_modrm_offset</name><argument_list pos:start="587:33" pos:end="589:53">(<argument pos:start="587:34" pos:end="587:34"><expr pos:start="587:34" pos:end="587:34"><name pos:start="587:34" pos:end="587:34">s</name></expr></argument>, <argument pos:start="587:37" pos:end="587:58"><expr pos:start="587:37" pos:end="587:58"><name pos:start="587:37" pos:end="587:49">OPC_MOVL_EvIz</name> <operator pos:start="587:51" pos:end="587:51">|</operator> <name pos:start="587:53" pos:end="587:58">P_REXW</name></expr></argument>,

                                 <argument pos:start="589:34" pos:end="589:34"><expr pos:start="589:34" pos:end="589:34"><literal type="number" pos:start="589:34" pos:end="589:34">0</literal></expr></argument>, <argument pos:start="589:37" pos:end="589:43"><expr pos:start="589:37" pos:end="589:43"><name pos:start="589:37" pos:end="589:43"><name pos:start="589:37" pos:end="589:40">args</name><index pos:start="589:41" pos:end="589:43">[<expr pos:start="589:42" pos:end="589:42"><literal type="number" pos:start="589:42" pos:end="589:42">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="589:46" pos:end="589:52"><expr pos:start="589:46" pos:end="589:52"><name pos:start="589:46" pos:end="589:52"><name pos:start="589:46" pos:end="589:49">args</name><index pos:start="589:50" pos:end="589:52">[<expr pos:start="589:51" pos:end="589:51"><literal type="number" pos:start="589:51" pos:end="589:51">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="591:13" pos:end="591:34"><expr pos:start="591:13" pos:end="591:33"><call pos:start="591:13" pos:end="591:33"><name pos:start="591:13" pos:end="591:21">tcg_out32</name><argument_list pos:start="591:22" pos:end="591:33">(<argument pos:start="591:23" pos:end="591:23"><expr pos:start="591:23" pos:end="591:23"><name pos:start="591:23" pos:end="591:23">s</name></expr></argument>, <argument pos:start="591:26" pos:end="591:32"><expr pos:start="591:26" pos:end="591:32"><name pos:start="591:26" pos:end="591:32"><name pos:start="591:26" pos:end="591:29">args</name><index pos:start="591:30" pos:end="591:32">[<expr pos:start="591:31" pos:end="591:31"><literal type="number" pos:start="591:31" pos:end="591:31">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="593:11" pos:end="597:9">else <block pos:start="593:16" pos:end="597:9">{<block_content pos:start="595:13" pos:end="595:67">

            <expr_stmt pos:start="595:13" pos:end="595:67"><expr pos:start="595:13" pos:end="595:66"><call pos:start="595:13" pos:end="595:66"><name pos:start="595:13" pos:end="595:22">tcg_out_st</name><argument_list pos:start="595:23" pos:end="595:66">(<argument pos:start="595:24" pos:end="595:24"><expr pos:start="595:24" pos:end="595:24"><name pos:start="595:24" pos:end="595:24">s</name></expr></argument>, <argument pos:start="595:27" pos:end="595:38"><expr pos:start="595:27" pos:end="595:38"><name pos:start="595:27" pos:end="595:38">TCG_TYPE_I64</name></expr></argument>, <argument pos:start="595:41" pos:end="595:47"><expr pos:start="595:41" pos:end="595:47"><name pos:start="595:41" pos:end="595:47"><name pos:start="595:41" pos:end="595:44">args</name><index pos:start="595:45" pos:end="595:47">[<expr pos:start="595:46" pos:end="595:46"><literal type="number" pos:start="595:46" pos:end="595:46">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="595:50" pos:end="595:56"><expr pos:start="595:50" pos:end="595:56"><name pos:start="595:50" pos:end="595:56"><name pos:start="595:50" pos:end="595:53">args</name><index pos:start="595:54" pos:end="595:56">[<expr pos:start="595:55" pos:end="595:55"><literal type="number" pos:start="595:55" pos:end="595:55">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="595:59" pos:end="595:65"><expr pos:start="595:59" pos:end="595:65"><name pos:start="595:59" pos:end="595:65"><name pos:start="595:59" pos:end="595:62">args</name><index pos:start="595:63" pos:end="595:65">[<expr pos:start="595:64" pos:end="595:64"><literal type="number" pos:start="595:64" pos:end="595:64">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="599:9" pos:end="599:14">break;</break>



    <case pos:start="603:5" pos:end="603:29">case <expr pos:start="603:10" pos:end="603:28"><name pos:start="603:10" pos:end="603:28">INDEX_op_brcond_i64</name></expr>:</case>

        <expr_stmt pos:start="605:9" pos:end="607:37"><expr pos:start="605:9" pos:end="607:36"><call pos:start="605:9" pos:end="607:36"><name pos:start="605:9" pos:end="605:24">tcg_out_brcond64</name><argument_list pos:start="605:25" pos:end="607:36">(<argument pos:start="605:26" pos:end="605:26"><expr pos:start="605:26" pos:end="605:26"><name pos:start="605:26" pos:end="605:26">s</name></expr></argument>, <argument pos:start="605:29" pos:end="605:35"><expr pos:start="605:29" pos:end="605:35"><name pos:start="605:29" pos:end="605:35"><name pos:start="605:29" pos:end="605:32">args</name><index pos:start="605:33" pos:end="605:35">[<expr pos:start="605:34" pos:end="605:34"><literal type="number" pos:start="605:34" pos:end="605:34">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="605:38" pos:end="605:44"><expr pos:start="605:38" pos:end="605:44"><name pos:start="605:38" pos:end="605:44"><name pos:start="605:38" pos:end="605:41">args</name><index pos:start="605:42" pos:end="605:44">[<expr pos:start="605:43" pos:end="605:43"><literal type="number" pos:start="605:43" pos:end="605:43">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="605:47" pos:end="605:53"><expr pos:start="605:47" pos:end="605:53"><name pos:start="605:47" pos:end="605:53"><name pos:start="605:47" pos:end="605:50">args</name><index pos:start="605:51" pos:end="605:53">[<expr pos:start="605:52" pos:end="605:52"><literal type="number" pos:start="605:52" pos:end="605:52">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="605:56" pos:end="605:68"><expr pos:start="605:56" pos:end="605:68"><name pos:start="605:56" pos:end="605:68"><name pos:start="605:56" pos:end="605:65">const_args</name><index pos:start="605:66" pos:end="605:68">[<expr pos:start="605:67" pos:end="605:67"><literal type="number" pos:start="605:67" pos:end="605:67">1</literal></expr>]</index></name></expr></argument>,

                         <argument pos:start="607:26" pos:end="607:32"><expr pos:start="607:26" pos:end="607:32"><name pos:start="607:26" pos:end="607:32"><name pos:start="607:26" pos:end="607:29">args</name><index pos:start="607:30" pos:end="607:32">[<expr pos:start="607:31" pos:end="607:31"><literal type="number" pos:start="607:31" pos:end="607:31">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="607:35" pos:end="607:35"><expr pos:start="607:35" pos:end="607:35"><literal type="number" pos:start="607:35" pos:end="607:35">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="609:9" pos:end="609:14">break;</break>

    <case pos:start="611:5" pos:end="611:30">case <expr pos:start="611:10" pos:end="611:29"><name pos:start="611:10" pos:end="611:29">INDEX_op_setcond_i64</name></expr>:</case>

        <expr_stmt pos:start="613:9" pos:end="615:50"><expr pos:start="613:9" pos:end="615:49"><call pos:start="613:9" pos:end="615:49"><name pos:start="613:9" pos:end="613:25">tcg_out_setcond64</name><argument_list pos:start="613:26" pos:end="615:49">(<argument pos:start="613:27" pos:end="613:27"><expr pos:start="613:27" pos:end="613:27"><name pos:start="613:27" pos:end="613:27">s</name></expr></argument>, <argument pos:start="613:30" pos:end="613:36"><expr pos:start="613:30" pos:end="613:36"><name pos:start="613:30" pos:end="613:36"><name pos:start="613:30" pos:end="613:33">args</name><index pos:start="613:34" pos:end="613:36">[<expr pos:start="613:35" pos:end="613:35"><literal type="number" pos:start="613:35" pos:end="613:35">3</literal></expr>]</index></name></expr></argument>, <argument pos:start="613:39" pos:end="613:45"><expr pos:start="613:39" pos:end="613:45"><name pos:start="613:39" pos:end="613:45"><name pos:start="613:39" pos:end="613:42">args</name><index pos:start="613:43" pos:end="613:45">[<expr pos:start="613:44" pos:end="613:44"><literal type="number" pos:start="613:44" pos:end="613:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="613:48" pos:end="613:54"><expr pos:start="613:48" pos:end="613:54"><name pos:start="613:48" pos:end="613:54"><name pos:start="613:48" pos:end="613:51">args</name><index pos:start="613:52" pos:end="613:54">[<expr pos:start="613:53" pos:end="613:53"><literal type="number" pos:start="613:53" pos:end="613:53">1</literal></expr>]</index></name></expr></argument>,

                          <argument pos:start="615:27" pos:end="615:33"><expr pos:start="615:27" pos:end="615:33"><name pos:start="615:27" pos:end="615:33"><name pos:start="615:27" pos:end="615:30">args</name><index pos:start="615:31" pos:end="615:33">[<expr pos:start="615:32" pos:end="615:32"><literal type="number" pos:start="615:32" pos:end="615:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="615:36" pos:end="615:48"><expr pos:start="615:36" pos:end="615:48"><name pos:start="615:36" pos:end="615:48"><name pos:start="615:36" pos:end="615:45">const_args</name><index pos:start="615:46" pos:end="615:48">[<expr pos:start="615:47" pos:end="615:47"><literal type="number" pos:start="615:47" pos:end="615:47">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="617:9" pos:end="617:14">break;</break>

    <case pos:start="619:5" pos:end="619:30">case <expr pos:start="619:10" pos:end="619:29"><name pos:start="619:10" pos:end="619:29">INDEX_op_movcond_i64</name></expr>:</case>

        <expr_stmt pos:start="621:9" pos:end="623:59"><expr pos:start="621:9" pos:end="623:58"><call pos:start="621:9" pos:end="623:58"><name pos:start="621:9" pos:end="621:25">tcg_out_movcond64</name><argument_list pos:start="621:26" pos:end="623:58">(<argument pos:start="621:27" pos:end="621:27"><expr pos:start="621:27" pos:end="621:27"><name pos:start="621:27" pos:end="621:27">s</name></expr></argument>, <argument pos:start="621:30" pos:end="621:36"><expr pos:start="621:30" pos:end="621:36"><name pos:start="621:30" pos:end="621:36"><name pos:start="621:30" pos:end="621:33">args</name><index pos:start="621:34" pos:end="621:36">[<expr pos:start="621:35" pos:end="621:35"><literal type="number" pos:start="621:35" pos:end="621:35">5</literal></expr>]</index></name></expr></argument>, <argument pos:start="621:39" pos:end="621:45"><expr pos:start="621:39" pos:end="621:45"><name pos:start="621:39" pos:end="621:45"><name pos:start="621:39" pos:end="621:42">args</name><index pos:start="621:43" pos:end="621:45">[<expr pos:start="621:44" pos:end="621:44"><literal type="number" pos:start="621:44" pos:end="621:44">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="621:48" pos:end="621:54"><expr pos:start="621:48" pos:end="621:54"><name pos:start="621:48" pos:end="621:54"><name pos:start="621:48" pos:end="621:51">args</name><index pos:start="621:52" pos:end="621:54">[<expr pos:start="621:53" pos:end="621:53"><literal type="number" pos:start="621:53" pos:end="621:53">1</literal></expr>]</index></name></expr></argument>,

                          <argument pos:start="623:27" pos:end="623:33"><expr pos:start="623:27" pos:end="623:33"><name pos:start="623:27" pos:end="623:33"><name pos:start="623:27" pos:end="623:30">args</name><index pos:start="623:31" pos:end="623:33">[<expr pos:start="623:32" pos:end="623:32"><literal type="number" pos:start="623:32" pos:end="623:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="623:36" pos:end="623:48"><expr pos:start="623:36" pos:end="623:48"><name pos:start="623:36" pos:end="623:48"><name pos:start="623:36" pos:end="623:45">const_args</name><index pos:start="623:46" pos:end="623:48">[<expr pos:start="623:47" pos:end="623:47"><literal type="number" pos:start="623:47" pos:end="623:47">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="623:51" pos:end="623:57"><expr pos:start="623:51" pos:end="623:57"><name pos:start="623:51" pos:end="623:57"><name pos:start="623:51" pos:end="623:54">args</name><index pos:start="623:55" pos:end="623:57">[<expr pos:start="623:56" pos:end="623:56"><literal type="number" pos:start="623:56" pos:end="623:56">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="625:9" pos:end="625:14">break;</break>



    <case pos:start="629:5" pos:end="629:30">case <expr pos:start="629:10" pos:end="629:29"><name pos:start="629:10" pos:end="629:29">INDEX_op_bswap64_i64</name></expr>:</case>

        <expr_stmt pos:start="631:9" pos:end="631:36"><expr pos:start="631:9" pos:end="631:35"><call pos:start="631:9" pos:end="631:35"><name pos:start="631:9" pos:end="631:23">tcg_out_bswap64</name><argument_list pos:start="631:24" pos:end="631:35">(<argument pos:start="631:25" pos:end="631:25"><expr pos:start="631:25" pos:end="631:25"><name pos:start="631:25" pos:end="631:25">s</name></expr></argument>, <argument pos:start="631:28" pos:end="631:34"><expr pos:start="631:28" pos:end="631:34"><name pos:start="631:28" pos:end="631:34"><name pos:start="631:28" pos:end="631:31">args</name><index pos:start="631:32" pos:end="631:34">[<expr pos:start="631:33" pos:end="631:33"><literal type="number" pos:start="631:33" pos:end="631:33">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="633:9" pos:end="633:14">break;</break>

    <case pos:start="635:5" pos:end="635:29">case <expr pos:start="635:10" pos:end="635:28"><name pos:start="635:10" pos:end="635:28">INDEX_op_ext32u_i64</name></expr>:</case>

        <expr_stmt pos:start="637:9" pos:end="637:44"><expr pos:start="637:9" pos:end="637:43"><call pos:start="637:9" pos:end="637:43"><name pos:start="637:9" pos:end="637:22">tcg_out_ext32u</name><argument_list pos:start="637:23" pos:end="637:43">(<argument pos:start="637:24" pos:end="637:24"><expr pos:start="637:24" pos:end="637:24"><name pos:start="637:24" pos:end="637:24">s</name></expr></argument>, <argument pos:start="637:27" pos:end="637:33"><expr pos:start="637:27" pos:end="637:33"><name pos:start="637:27" pos:end="637:33"><name pos:start="637:27" pos:end="637:30">args</name><index pos:start="637:31" pos:end="637:33">[<expr pos:start="637:32" pos:end="637:32"><literal type="number" pos:start="637:32" pos:end="637:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="637:36" pos:end="637:42"><expr pos:start="637:36" pos:end="637:42"><name pos:start="637:36" pos:end="637:42"><name pos:start="637:36" pos:end="637:39">args</name><index pos:start="637:40" pos:end="637:42">[<expr pos:start="637:41" pos:end="637:41"><literal type="number" pos:start="637:41" pos:end="637:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="639:9" pos:end="639:14">break;</break>

    <case pos:start="641:5" pos:end="641:29">case <expr pos:start="641:10" pos:end="641:28"><name pos:start="641:10" pos:end="641:28">INDEX_op_ext32s_i64</name></expr>:</case>

        <expr_stmt pos:start="643:9" pos:end="643:44"><expr pos:start="643:9" pos:end="643:43"><call pos:start="643:9" pos:end="643:43"><name pos:start="643:9" pos:end="643:22">tcg_out_ext32s</name><argument_list pos:start="643:23" pos:end="643:43">(<argument pos:start="643:24" pos:end="643:24"><expr pos:start="643:24" pos:end="643:24"><name pos:start="643:24" pos:end="643:24">s</name></expr></argument>, <argument pos:start="643:27" pos:end="643:33"><expr pos:start="643:27" pos:end="643:33"><name pos:start="643:27" pos:end="643:33"><name pos:start="643:27" pos:end="643:30">args</name><index pos:start="643:31" pos:end="643:33">[<expr pos:start="643:32" pos:end="643:32"><literal type="number" pos:start="643:32" pos:end="643:32">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="643:36" pos:end="643:42"><expr pos:start="643:36" pos:end="643:42"><name pos:start="643:36" pos:end="643:42"><name pos:start="643:36" pos:end="643:39">args</name><index pos:start="643:40" pos:end="643:42">[<expr pos:start="643:41" pos:end="643:41"><literal type="number" pos:start="643:41" pos:end="643:41">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <break pos:start="645:9" pos:end="648:0">break;</break>

<cpp:endif pos:start="647:1" pos:end="647:6">#<cpp:directive pos:start="647:2" pos:end="647:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="651:5" pos:end="651:22"><expr pos:start="651:5" pos:end="651:22"><call pos:start="651:5" pos:end="651:21"><name pos:start="651:5" pos:end="651:12">OP_32_64</name><argument_list pos:start="651:13" pos:end="651:21">(<argument pos:start="651:14" pos:end="651:20"><expr pos:start="651:14" pos:end="651:20"><name pos:start="651:14" pos:end="651:20">deposit</name></expr></argument>)</argument_list></call><operator pos:start="651:22" pos:end="651:22">:</operator></expr></expr_stmt>

        <if_stmt pos:start="653:9" pos:end="677:9"><if pos:start="653:9" pos:end="661:9">if <condition pos:start="653:12" pos:end="653:41">(<expr pos:start="653:13" pos:end="653:40"><name pos:start="653:13" pos:end="653:19"><name pos:start="653:13" pos:end="653:16">args</name><index pos:start="653:17" pos:end="653:19">[<expr pos:start="653:18" pos:end="653:18"><literal type="number" pos:start="653:18" pos:end="653:18">3</literal></expr>]</index></name> <operator pos:start="653:21" pos:end="653:22">==</operator> <literal type="number" pos:start="653:24" pos:end="653:24">0</literal> <operator pos:start="653:26" pos:end="653:27">&amp;&amp;</operator> <name pos:start="653:29" pos:end="653:35"><name pos:start="653:29" pos:end="653:32">args</name><index pos:start="653:33" pos:end="653:35">[<expr pos:start="653:34" pos:end="653:34"><literal type="number" pos:start="653:34" pos:end="653:34">4</literal></expr>]</index></name> <operator pos:start="653:37" pos:end="653:38">==</operator> <literal type="number" pos:start="653:40" pos:end="653:40">8</literal></expr>)</condition> <block pos:start="653:43" pos:end="661:9">{<block_content pos:start="657:13" pos:end="659:44">

            <comment type="block" pos:start="655:13" pos:end="655:32">/* load bits 0..7 */</comment>

            <expr_stmt pos:start="657:13" pos:end="659:44"><expr pos:start="657:13" pos:end="659:43"><call pos:start="657:13" pos:end="659:43"><name pos:start="657:13" pos:end="657:25">tcg_out_modrm</name><argument_list pos:start="657:26" pos:end="659:43">(<argument pos:start="657:27" pos:end="657:27"><expr pos:start="657:27" pos:end="657:27"><name pos:start="657:27" pos:end="657:27">s</name></expr></argument>, <argument pos:start="657:30" pos:end="657:65"><expr pos:start="657:30" pos:end="657:65"><name pos:start="657:30" pos:end="657:42">OPC_MOVB_EvGv</name> <operator pos:start="657:44" pos:end="657:44">|</operator> <name pos:start="657:46" pos:end="657:53">P_REXB_R</name> <operator pos:start="657:55" pos:end="657:55">|</operator> <name pos:start="657:57" pos:end="657:65">P_REXB_RM</name></expr></argument>,

                          <argument pos:start="659:27" pos:end="659:33"><expr pos:start="659:27" pos:end="659:33"><name pos:start="659:27" pos:end="659:33"><name pos:start="659:27" pos:end="659:30">args</name><index pos:start="659:31" pos:end="659:33">[<expr pos:start="659:32" pos:end="659:32"><literal type="number" pos:start="659:32" pos:end="659:32">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="659:36" pos:end="659:42"><expr pos:start="659:36" pos:end="659:42"><name pos:start="659:36" pos:end="659:42"><name pos:start="659:36" pos:end="659:39">args</name><index pos:start="659:40" pos:end="659:42">[<expr pos:start="659:41" pos:end="659:41"><literal type="number" pos:start="659:41" pos:end="659:41">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="661:11" pos:end="667:9">else if <condition pos:start="661:19" pos:end="661:48">(<expr pos:start="661:20" pos:end="661:47"><name pos:start="661:20" pos:end="661:26"><name pos:start="661:20" pos:end="661:23">args</name><index pos:start="661:24" pos:end="661:26">[<expr pos:start="661:25" pos:end="661:25"><literal type="number" pos:start="661:25" pos:end="661:25">3</literal></expr>]</index></name> <operator pos:start="661:28" pos:end="661:29">==</operator> <literal type="number" pos:start="661:31" pos:end="661:31">8</literal> <operator pos:start="661:33" pos:end="661:34">&amp;&amp;</operator> <name pos:start="661:36" pos:end="661:42"><name pos:start="661:36" pos:end="661:39">args</name><index pos:start="661:40" pos:end="661:42">[<expr pos:start="661:41" pos:end="661:41"><literal type="number" pos:start="661:41" pos:end="661:41">4</literal></expr>]</index></name> <operator pos:start="661:44" pos:end="661:45">==</operator> <literal type="number" pos:start="661:47" pos:end="661:47">8</literal></expr>)</condition> <block pos:start="661:50" pos:end="667:9">{<block_content pos:start="665:13" pos:end="665:66">

            <comment type="block" pos:start="663:13" pos:end="663:33">/* load bits 8..15 */</comment>

            <expr_stmt pos:start="665:13" pos:end="665:66"><expr pos:start="665:13" pos:end="665:65"><call pos:start="665:13" pos:end="665:65"><name pos:start="665:13" pos:end="665:25">tcg_out_modrm</name><argument_list pos:start="665:26" pos:end="665:65">(<argument pos:start="665:27" pos:end="665:27"><expr pos:start="665:27" pos:end="665:27"><name pos:start="665:27" pos:end="665:27">s</name></expr></argument>, <argument pos:start="665:30" pos:end="665:42"><expr pos:start="665:30" pos:end="665:42"><name pos:start="665:30" pos:end="665:42">OPC_MOVB_EvGv</name></expr></argument>, <argument pos:start="665:45" pos:end="665:51"><expr pos:start="665:45" pos:end="665:51"><name pos:start="665:45" pos:end="665:51"><name pos:start="665:45" pos:end="665:48">args</name><index pos:start="665:49" pos:end="665:51">[<expr pos:start="665:50" pos:end="665:50"><literal type="number" pos:start="665:50" pos:end="665:50">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="665:54" pos:end="665:64"><expr pos:start="665:54" pos:end="665:64"><name pos:start="665:54" pos:end="665:60"><name pos:start="665:54" pos:end="665:57">args</name><index pos:start="665:58" pos:end="665:60">[<expr pos:start="665:59" pos:end="665:59"><literal type="number" pos:start="665:59" pos:end="665:59">0</literal></expr>]</index></name> <operator pos:start="665:62" pos:end="665:62">+</operator> <literal type="number" pos:start="665:64" pos:end="665:64">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif" pos:start="667:11" pos:end="673:9">else if <condition pos:start="667:19" pos:end="667:49">(<expr pos:start="667:20" pos:end="667:48"><name pos:start="667:20" pos:end="667:26"><name pos:start="667:20" pos:end="667:23">args</name><index pos:start="667:24" pos:end="667:26">[<expr pos:start="667:25" pos:end="667:25"><literal type="number" pos:start="667:25" pos:end="667:25">3</literal></expr>]</index></name> <operator pos:start="667:28" pos:end="667:29">==</operator> <literal type="number" pos:start="667:31" pos:end="667:31">0</literal> <operator pos:start="667:33" pos:end="667:34">&amp;&amp;</operator> <name pos:start="667:36" pos:end="667:42"><name pos:start="667:36" pos:end="667:39">args</name><index pos:start="667:40" pos:end="667:42">[<expr pos:start="667:41" pos:end="667:41"><literal type="number" pos:start="667:41" pos:end="667:41">4</literal></expr>]</index></name> <operator pos:start="667:44" pos:end="667:45">==</operator> <literal type="number" pos:start="667:47" pos:end="667:48">16</literal></expr>)</condition> <block pos:start="667:51" pos:end="673:9">{<block_content pos:start="671:13" pos:end="671:73">

            <comment type="block" pos:start="669:13" pos:end="669:33">/* load bits 0..15 */</comment>

            <expr_stmt pos:start="671:13" pos:end="671:73"><expr pos:start="671:13" pos:end="671:72"><call pos:start="671:13" pos:end="671:72"><name pos:start="671:13" pos:end="671:25">tcg_out_modrm</name><argument_list pos:start="671:26" pos:end="671:72">(<argument pos:start="671:27" pos:end="671:27"><expr pos:start="671:27" pos:end="671:27"><name pos:start="671:27" pos:end="671:27">s</name></expr></argument>, <argument pos:start="671:30" pos:end="671:53"><expr pos:start="671:30" pos:end="671:53"><name pos:start="671:30" pos:end="671:42">OPC_MOVL_EvGv</name> <operator pos:start="671:44" pos:end="671:44">|</operator> <name pos:start="671:46" pos:end="671:53">P_DATA16</name></expr></argument>, <argument pos:start="671:56" pos:end="671:62"><expr pos:start="671:56" pos:end="671:62"><name pos:start="671:56" pos:end="671:62"><name pos:start="671:56" pos:end="671:59">args</name><index pos:start="671:60" pos:end="671:62">[<expr pos:start="671:61" pos:end="671:61"><literal type="number" pos:start="671:61" pos:end="671:61">2</literal></expr>]</index></name></expr></argument>, <argument pos:start="671:65" pos:end="671:71"><expr pos:start="671:65" pos:end="671:71"><name pos:start="671:65" pos:end="671:71"><name pos:start="671:65" pos:end="671:68">args</name><index pos:start="671:69" pos:end="671:71">[<expr pos:start="671:70" pos:end="671:70"><literal type="number" pos:start="671:70" pos:end="671:70">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="673:11" pos:end="677:9">else <block pos:start="673:16" pos:end="677:9">{<block_content pos:start="675:13" pos:end="675:24">

            <expr_stmt pos:start="675:13" pos:end="675:24"><expr pos:start="675:13" pos:end="675:23"><call pos:start="675:13" pos:end="675:23"><name pos:start="675:13" pos:end="675:21">tcg_abort</name><argument_list pos:start="675:22" pos:end="675:23">()</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <break pos:start="679:9" pos:end="679:14">break;</break>



    <case pos:start="683:5" pos:end="683:26">case <expr pos:start="683:10" pos:end="683:25"><name pos:start="683:10" pos:end="683:25">INDEX_op_mov_i32</name></expr>:</case>  <comment type="block" pos:start="683:29" pos:end="683:66">/* Always emitted via tcg_out_mov.  */</comment>

    <case pos:start="685:5" pos:end="685:26">case <expr pos:start="685:10" pos:end="685:25"><name pos:start="685:10" pos:end="685:25">INDEX_op_mov_i64</name></expr>:</case>

    <case pos:start="687:5" pos:end="687:27">case <expr pos:start="687:10" pos:end="687:26"><name pos:start="687:10" pos:end="687:26">INDEX_op_movi_i32</name></expr>:</case> <comment type="block" pos:start="687:29" pos:end="687:67">/* Always emitted via tcg_out_movi.  */</comment>

    <case pos:start="689:5" pos:end="689:27">case <expr pos:start="689:10" pos:end="689:26"><name pos:start="689:10" pos:end="689:26">INDEX_op_movi_i64</name></expr>:</case>

    <case pos:start="691:5" pos:end="691:23">case <expr pos:start="691:10" pos:end="691:22"><name pos:start="691:10" pos:end="691:22">INDEX_op_call</name></expr>:</case>     <comment type="block" pos:start="691:29" pos:end="691:67">/* Always emitted via tcg_out_call.  */</comment>

    <default pos:start="693:5" pos:end="693:12">default:</default>

        <expr_stmt pos:start="695:9" pos:end="695:20"><expr pos:start="695:9" pos:end="695:19"><call pos:start="695:9" pos:end="695:19"><name pos:start="695:9" pos:end="695:17">tcg_abort</name><argument_list pos:start="695:18" pos:end="695:19">()</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></switch>



<cpp:undef pos:start="701:1" pos:end="701:15">#<cpp:directive pos:start="701:2" pos:end="701:6">undef</cpp:directive> <name pos:start="701:8" pos:end="701:15">OP_32_64</name></cpp:undef>

</block_content>}</block></function>
</unit>
