<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/11532.c" pos:tabs="8"><function pos:start="1:1" pos:end="49:1"><type pos:start="1:1" pos:end="1:10"><name pos:start="1:1" pos:end="1:8">qemu_irq</name> <modifier pos:start="1:10" pos:end="1:10">*</modifier></type><name pos:start="1:11" pos:end="1:22">arm_gic_init</name><parameter_list pos:start="1:23" pos:end="1:58">(<parameter pos:start="1:24" pos:end="1:36"><decl pos:start="1:24" pos:end="1:36"><type pos:start="1:24" pos:end="1:36"><name pos:start="1:24" pos:end="1:31">uint32_t</name></type> <name pos:start="1:33" pos:end="1:36">base</name></decl></parameter>, <parameter pos:start="1:39" pos:end="1:57"><decl pos:start="1:39" pos:end="1:57"><type pos:start="1:39" pos:end="1:57"><name pos:start="1:39" pos:end="1:46">qemu_irq</name></type> <name pos:start="1:48" pos:end="1:57">parent_irq</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="49:1">{<block_content pos:start="5:5" pos:end="47:14">

    <decl_stmt pos:start="5:5" pos:end="5:17"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:15"><name pos:start="5:5" pos:end="5:13">gic_state</name> <modifier pos:start="5:15" pos:end="5:15">*</modifier></type><name pos:start="5:16" pos:end="5:16">s</name></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:17"><decl pos:start="7:5" pos:end="7:16"><type pos:start="7:5" pos:end="7:14"><name pos:start="7:5" pos:end="7:12">qemu_irq</name> <modifier pos:start="7:14" pos:end="7:14">*</modifier></type><name pos:start="7:15" pos:end="7:16">qi</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:18"><decl pos:start="9:5" pos:end="9:17"><type pos:start="9:5" pos:end="9:7"><name pos:start="9:5" pos:end="9:7">int</name></type> <name pos:start="9:9" pos:end="9:17">iomemtype</name></decl>;</decl_stmt>



    <expr_stmt pos:start="13:5" pos:end="13:53"><expr pos:start="13:5" pos:end="13:52"><name pos:start="13:5" pos:end="13:5">s</name> <operator pos:start="13:7" pos:end="13:7">=</operator> <operator pos:start="13:9" pos:end="13:9">(</operator><name pos:start="13:10" pos:end="13:18">gic_state</name> <operator pos:start="13:20" pos:end="13:20">*</operator><operator pos:start="13:21" pos:end="13:21">)</operator><call pos:start="13:22" pos:end="13:52"><name pos:start="13:22" pos:end="13:33">qemu_mallocz</name><argument_list pos:start="13:34" pos:end="13:52">(<argument pos:start="13:35" pos:end="13:51"><expr pos:start="13:35" pos:end="13:51"><sizeof pos:start="13:35" pos:end="13:51">sizeof<argument_list pos:start="13:41" pos:end="13:51">(<argument pos:start="13:42" pos:end="13:50"><expr pos:start="13:42" pos:end="13:50"><name pos:start="13:42" pos:end="13:50">gic_state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="15:5" pos:end="17:20"><if pos:start="15:5" pos:end="17:20">if <condition pos:start="15:8" pos:end="15:11">(<expr pos:start="15:9" pos:end="15:10"><operator pos:start="15:9" pos:end="15:9">!</operator><name pos:start="15:10" pos:end="15:10">s</name></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:20"><block_content pos:start="17:9" pos:end="17:20">

        <return pos:start="17:9" pos:end="17:20">return <expr pos:start="17:16" pos:end="17:19"><name pos:start="17:16" pos:end="17:19">NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt pos:start="19:5" pos:end="19:54"><expr pos:start="19:5" pos:end="19:53"><name pos:start="19:5" pos:end="19:6">qi</name> <operator pos:start="19:8" pos:end="19:8">=</operator> <call pos:start="19:10" pos:end="19:53"><name pos:start="19:10" pos:end="19:27">qemu_allocate_irqs</name><argument_list pos:start="19:28" pos:end="19:53">(<argument pos:start="19:29" pos:end="19:39"><expr pos:start="19:29" pos:end="19:39"><name pos:start="19:29" pos:end="19:39">gic_set_irq</name></expr></argument>, <argument pos:start="19:42" pos:end="19:42"><expr pos:start="19:42" pos:end="19:42"><name pos:start="19:42" pos:end="19:42">s</name></expr></argument>, <argument pos:start="19:45" pos:end="19:52"><expr pos:start="19:45" pos:end="19:52"><name pos:start="19:45" pos:end="19:52">GIC_NIRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="21:5" pos:end="21:31"><expr pos:start="21:5" pos:end="21:30"><name pos:start="21:5" pos:end="21:17"><name pos:start="21:5" pos:end="21:5">s</name><operator pos:start="21:6" pos:end="21:7">-&gt;</operator><name pos:start="21:8" pos:end="21:17">parent_irq</name></name> <operator pos:start="21:19" pos:end="21:19">=</operator> <name pos:start="21:21" pos:end="21:30">parent_irq</name></expr>;</expr_stmt>

    <if_stmt pos:start="23:5" pos:end="43:5"><if pos:start="23:5" pos:end="39:5">if <condition pos:start="23:8" pos:end="23:27">(<expr pos:start="23:9" pos:end="23:26"><name pos:start="23:9" pos:end="23:12">base</name> <operator pos:start="23:14" pos:end="23:15">!=</operator> <literal type="number" pos:start="23:17" pos:end="23:26">0xffffffff</literal></expr>)</condition> <block pos:start="23:29" pos:end="39:5">{<block_content pos:start="25:9" pos:end="37:23">

        <expr_stmt pos:start="25:9" pos:end="27:63"><expr pos:start="25:9" pos:end="27:62"><name pos:start="25:9" pos:end="25:17">iomemtype</name> <operator pos:start="25:19" pos:end="25:19">=</operator> <call pos:start="25:21" pos:end="27:62"><name pos:start="25:21" pos:end="25:42">cpu_register_io_memory</name><argument_list pos:start="25:43" pos:end="27:62">(<argument pos:start="25:44" pos:end="25:44"><expr pos:start="25:44" pos:end="25:44"><literal type="number" pos:start="25:44" pos:end="25:44">0</literal></expr></argument>, <argument pos:start="25:47" pos:end="25:60"><expr pos:start="25:47" pos:end="25:60"><name pos:start="25:47" pos:end="25:60">gic_cpu_readfn</name></expr></argument>,

                                           <argument pos:start="27:44" pos:end="27:58"><expr pos:start="27:44" pos:end="27:58"><name pos:start="27:44" pos:end="27:58">gic_cpu_writefn</name></expr></argument>, <argument pos:start="27:61" pos:end="27:61"><expr pos:start="27:61" pos:end="27:61"><name pos:start="27:61" pos:end="27:61">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:66"><expr pos:start="29:9" pos:end="29:65"><call pos:start="29:9" pos:end="29:65"><name pos:start="29:9" pos:end="29:36">cpu_register_physical_memory</name><argument_list pos:start="29:37" pos:end="29:65">(<argument pos:start="29:38" pos:end="29:41"><expr pos:start="29:38" pos:end="29:41"><name pos:start="29:38" pos:end="29:41">base</name></expr></argument>, <argument pos:start="29:44" pos:end="29:53"><expr pos:start="29:44" pos:end="29:53"><literal type="number" pos:start="29:44" pos:end="29:53">0x00000fff</literal></expr></argument>, <argument pos:start="29:56" pos:end="29:64"><expr pos:start="29:56" pos:end="29:64"><name pos:start="29:56" pos:end="29:64">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="31:9" pos:end="33:64"><expr pos:start="31:9" pos:end="33:63"><name pos:start="31:9" pos:end="31:17">iomemtype</name> <operator pos:start="31:19" pos:end="31:19">=</operator> <call pos:start="31:21" pos:end="33:63"><name pos:start="31:21" pos:end="31:42">cpu_register_io_memory</name><argument_list pos:start="31:43" pos:end="33:63">(<argument pos:start="31:44" pos:end="31:44"><expr pos:start="31:44" pos:end="31:44"><literal type="number" pos:start="31:44" pos:end="31:44">0</literal></expr></argument>, <argument pos:start="31:47" pos:end="31:61"><expr pos:start="31:47" pos:end="31:61"><name pos:start="31:47" pos:end="31:61">gic_dist_readfn</name></expr></argument>,

                                           <argument pos:start="33:44" pos:end="33:59"><expr pos:start="33:44" pos:end="33:59"><name pos:start="33:44" pos:end="33:59">gic_dist_writefn</name></expr></argument>, <argument pos:start="33:62" pos:end="33:62"><expr pos:start="33:62" pos:end="33:62"><name pos:start="33:62" pos:end="33:62">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:75"><expr pos:start="35:9" pos:end="35:74"><call pos:start="35:9" pos:end="35:74"><name pos:start="35:9" pos:end="35:36">cpu_register_physical_memory</name><argument_list pos:start="35:37" pos:end="35:74">(<argument pos:start="35:38" pos:end="35:50"><expr pos:start="35:38" pos:end="35:50"><name pos:start="35:38" pos:end="35:41">base</name> <operator pos:start="35:43" pos:end="35:43">+</operator> <literal type="number" pos:start="35:45" pos:end="35:50">0x1000</literal></expr></argument>, <argument pos:start="35:53" pos:end="35:62"><expr pos:start="35:53" pos:end="35:62"><literal type="number" pos:start="35:53" pos:end="35:62">0x00000fff</literal></expr></argument>, <argument pos:start="35:65" pos:end="35:73"><expr pos:start="35:65" pos:end="35:73"><name pos:start="35:65" pos:end="35:73">iomemtype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="37:9" pos:end="37:23"><expr pos:start="37:9" pos:end="37:22"><name pos:start="37:9" pos:end="37:15"><name pos:start="37:9" pos:end="37:9">s</name><operator pos:start="37:10" pos:end="37:11">-&gt;</operator><name pos:start="37:12" pos:end="37:15">base</name></name> <operator pos:start="37:17" pos:end="37:17">=</operator> <name pos:start="37:19" pos:end="37:22">base</name></expr>;</expr_stmt>

    </block_content>}</block></if> <else pos:start="39:7" pos:end="43:5">else <block pos:start="39:12" pos:end="43:5">{<block_content pos:start="41:9" pos:end="41:20">

        <expr_stmt pos:start="41:9" pos:end="41:20"><expr pos:start="41:9" pos:end="41:19"><name pos:start="41:9" pos:end="41:15"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:15">base</name></name> <operator pos:start="41:17" pos:end="41:17">=</operator> <literal type="number" pos:start="41:19" pos:end="41:19">0</literal></expr>;</expr_stmt>

    </block_content>}</block></else></if_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:17"><expr pos:start="45:5" pos:end="45:16"><call pos:start="45:5" pos:end="45:16"><name pos:start="45:5" pos:end="45:13">gic_reset</name><argument_list pos:start="45:14" pos:end="45:16">(<argument pos:start="45:15" pos:end="45:15"><expr pos:start="45:15" pos:end="45:15"><name pos:start="45:15" pos:end="45:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="47:5" pos:end="47:14">return <expr pos:start="47:12" pos:end="47:13"><name pos:start="47:12" pos:end="47:13">qi</name></expr>;</return>

</block_content>}</block></function>
</unit>
