<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/17481.c" pos:tabs="8"><function pos:start="1:1" pos:end="227:40"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:23">flush_packet</name><parameter_list pos:start="1:24" pos:end="2:81">(<parameter pos:start="1:25" pos:end="1:44"><decl pos:start="1:25" pos:end="1:44"><type pos:start="1:25" pos:end="1:44"><name pos:start="1:25" pos:end="1:39">AVFormatContext</name> <modifier pos:start="1:41" pos:end="1:41">*</modifier></type><name pos:start="1:42" pos:end="1:44">ctx</name></decl></parameter>, <parameter pos:start="1:47" pos:end="1:62"><decl pos:start="1:47" pos:end="1:62"><type pos:start="1:47" pos:end="1:62"><name pos:start="1:47" pos:end="1:49">int</name></type> <name pos:start="1:51" pos:end="1:62">stream_index</name></decl></parameter>,
                         <parameter pos:start="2:26" pos:end="2:36"><decl pos:start="2:26" pos:end="2:36"><type pos:start="2:26" pos:end="2:36"><name pos:start="2:26" pos:end="2:32">int64_t</name></type> <name pos:start="2:34" pos:end="2:36">pts</name></decl></parameter>, <parameter pos:start="2:39" pos:end="2:49"><decl pos:start="2:39" pos:end="2:49"><type pos:start="2:39" pos:end="2:49"><name pos:start="2:39" pos:end="2:45">int64_t</name></type> <name pos:start="2:47" pos:end="2:49">dts</name></decl></parameter>, <parameter pos:start="2:52" pos:end="2:62"><decl pos:start="2:52" pos:end="2:62"><type pos:start="2:52" pos:end="2:62"><name pos:start="2:52" pos:end="2:58">int64_t</name></type> <name pos:start="2:60" pos:end="2:62">scr</name></decl></parameter>, <parameter pos:start="2:65" pos:end="2:80"><decl pos:start="2:65" pos:end="2:80"><type pos:start="2:65" pos:end="2:80"><name pos:start="2:65" pos:end="2:67">int</name></type> <name pos:start="2:69" pos:end="2:80">trailer_size</name></decl></parameter>)</parameter_list>
<block pos:start="3:1" pos:end="227:40">{<block_content pos:start="4:5" pos:end="227:40">
    <decl_stmt pos:start="4:5" pos:end="4:39"><decl pos:start="4:5" pos:end="4:38"><type pos:start="4:5" pos:end="4:20"><name pos:start="4:5" pos:end="4:18">MpegMuxContext</name> <modifier pos:start="4:20" pos:end="4:20">*</modifier></type><name pos:start="4:21" pos:end="4:21">s</name> <init pos:start="4:23" pos:end="4:38">= <expr pos:start="4:25" pos:end="4:38"><name pos:start="4:25" pos:end="4:38"><name pos:start="4:25" pos:end="4:27">ctx</name><operator pos:start="4:28" pos:end="4:29">-&gt;</operator><name pos:start="4:30" pos:end="4:38">priv_data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="5:5" pos:end="5:63"><decl pos:start="5:5" pos:end="5:62"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">StreamInfo</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:22">stream</name> <init pos:start="5:24" pos:end="5:62">= <expr pos:start="5:26" pos:end="5:62"><name pos:start="5:26" pos:end="5:51"><name pos:start="5:26" pos:end="5:28">ctx</name><operator pos:start="5:29" pos:end="5:30">-&gt;</operator><name pos:start="5:31" pos:end="5:37">streams</name><index pos:start="5:38" pos:end="5:51">[<expr pos:start="5:39" pos:end="5:50"><name pos:start="5:39" pos:end="5:50">stream_index</name></expr>]</index></name><operator pos:start="5:52" pos:end="5:53">-&gt;</operator><name pos:start="5:54" pos:end="5:62">priv_data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="6:5" pos:end="6:21"><decl pos:start="6:5" pos:end="6:20"><type pos:start="6:5" pos:end="6:13"><name pos:start="6:5" pos:end="6:11">uint8_t</name> <modifier pos:start="6:13" pos:end="6:13">*</modifier></type><name pos:start="6:14" pos:end="6:20">buf_ptr</name></decl>;</decl_stmt>
    <decl_stmt pos:start="7:5" pos:end="7:72"><decl pos:start="7:5" pos:end="7:12"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:12">size</name></decl>, <decl pos:start="7:15" pos:end="7:26"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:15" pos:end="7:26">payload_size</name></decl>, <decl pos:start="7:29" pos:end="7:37"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:29" pos:end="7:37">startcode</name></decl>, <decl pos:start="7:40" pos:end="7:41"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:40" pos:end="7:41">id</name></decl>, <decl pos:start="7:44" pos:end="7:56"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:44" pos:end="7:56">stuffing_size</name></decl>, <decl pos:start="7:59" pos:end="7:59"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:59" pos:end="7:59">i</name></decl>, <decl pos:start="7:62" pos:end="7:71"><type ref="prev" pos:start="7:5" pos:end="7:7"/><name pos:start="7:62" pos:end="7:71">header_len</name></decl>;</decl_stmt>
    <decl_stmt pos:start="8:5" pos:end="8:20"><decl pos:start="8:5" pos:end="8:19"><type pos:start="8:5" pos:end="8:7"><name pos:start="8:5" pos:end="8:7">int</name></type> <name pos:start="8:9" pos:end="8:19">packet_size</name></decl>;</decl_stmt>
    <decl_stmt pos:start="9:5" pos:end="9:24"><decl pos:start="9:5" pos:end="9:23"><type pos:start="9:5" pos:end="9:11"><name pos:start="9:5" pos:end="9:11">uint8_t</name></type> <name pos:start="9:13" pos:end="9:23"><name pos:start="9:13" pos:end="9:18">buffer</name><index pos:start="9:19" pos:end="9:23">[<expr pos:start="9:20" pos:end="9:22"><literal type="number" pos:start="9:20" pos:end="9:22">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt pos:start="10:5" pos:end="10:29"><decl pos:start="10:5" pos:end="10:28"><type pos:start="10:5" pos:end="10:7"><name pos:start="10:5" pos:end="10:7">int</name></type> <name pos:start="10:9" pos:end="10:24">zero_trail_bytes</name> <init pos:start="10:26" pos:end="10:28">= <expr pos:start="10:28" pos:end="10:28"><literal type="number" pos:start="10:28" pos:end="10:28">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="11:5" pos:end="11:29"><decl pos:start="11:5" pos:end="11:28"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:24">pad_packet_bytes</name> <init pos:start="11:26" pos:end="11:28">= <expr pos:start="11:28" pos:end="11:28"><literal type="number" pos:start="11:28" pos:end="11:28">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt pos:start="12:5" pos:end="12:18"><decl pos:start="12:5" pos:end="12:17"><type pos:start="12:5" pos:end="12:7"><name pos:start="12:5" pos:end="12:7">int</name></type> <name pos:start="12:9" pos:end="12:17">pes_flags</name></decl>;</decl_stmt>
    <decl_stmt pos:start="13:5" pos:end="13:25"><decl pos:start="13:5" pos:end="13:24"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:20">general_pack</name> <init pos:start="13:22" pos:end="13:24">= <expr pos:start="13:24" pos:end="13:24"><literal type="number" pos:start="13:24" pos:end="13:24">0</literal></expr></init></decl>;</decl_stmt>  <comment type="block" pos:start="13:28" pos:end="13:82">/*"general" pack without data specific to one stream?*/</comment>
    <decl_stmt pos:start="14:5" pos:end="14:18"><decl pos:start="14:5" pos:end="14:17"><type pos:start="14:5" pos:end="14:7"><name pos:start="14:5" pos:end="14:7">int</name></type> <name pos:start="14:9" pos:end="14:17">nb_frames</name></decl>;</decl_stmt>
    <expr_stmt pos:start="15:5" pos:end="15:20"><expr pos:start="15:5" pos:end="15:19"><name pos:start="15:5" pos:end="15:6">id</name> <operator pos:start="15:8" pos:end="15:8">=</operator> <name pos:start="15:10" pos:end="15:19"><name pos:start="15:10" pos:end="15:15">stream</name><operator pos:start="15:16" pos:end="15:17">-&gt;</operator><name pos:start="15:18" pos:end="15:19">id</name></name></expr>;</expr_stmt>
    <expr_stmt pos:start="16:5" pos:end="16:65"><expr pos:start="16:5" pos:end="16:64"><call pos:start="16:5" pos:end="16:64"><name pos:start="16:5" pos:end="16:11">av_dlog</name><argument_list pos:start="16:12" pos:end="16:64">(<argument pos:start="16:13" pos:end="16:15"><expr pos:start="16:13" pos:end="16:15"><name pos:start="16:13" pos:end="16:15">ctx</name></expr></argument>, <argument pos:start="16:18" pos:end="16:44"><expr pos:start="16:18" pos:end="16:44"><literal type="string" pos:start="16:18" pos:end="16:44">"packet ID=%2x PTS=%0.3f\n"</literal></expr></argument>, <argument pos:start="16:47" pos:end="16:48"><expr pos:start="16:47" pos:end="16:48"><name pos:start="16:47" pos:end="16:48">id</name></expr></argument>, <argument pos:start="16:51" pos:end="16:63"><expr pos:start="16:51" pos:end="16:63"><name pos:start="16:51" pos:end="16:53">pts</name> <operator pos:start="16:55" pos:end="16:55">/</operator> <literal type="number" pos:start="16:57" pos:end="16:63">90000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="17:5" pos:end="17:21"><expr pos:start="17:5" pos:end="17:20"><name pos:start="17:5" pos:end="17:11">buf_ptr</name> <operator pos:start="17:13" pos:end="17:13">=</operator> <name pos:start="17:15" pos:end="17:20">buffer</name></expr>;</expr_stmt>
    <if_stmt pos:start="18:5" pos:end="227:40"><if pos:start="18:5" pos:end="227:40">if <condition pos:start="18:8" pos:end="18:76">(<expr pos:start="18:9" pos:end="18:75"><operator pos:start="18:9" pos:end="18:9">(</operator><name pos:start="18:10" pos:end="18:25"><name pos:start="18:10" pos:end="18:10">s</name><operator pos:start="18:11" pos:end="18:12">-&gt;</operator><name pos:start="18:13" pos:end="18:25">packet_number</name></name> <operator pos:start="18:27" pos:end="18:27">%</operator> <name pos:start="18:29" pos:end="18:47"><name pos:start="18:29" pos:end="18:29">s</name><operator pos:start="18:30" pos:end="18:31">-&gt;</operator><name pos:start="18:32" pos:end="18:47">pack_header_freq</name></name><operator pos:start="18:48" pos:end="18:48">)</operator> <operator pos:start="18:50" pos:end="18:51">==</operator> <literal type="number" pos:start="18:53" pos:end="18:53">0</literal> <operator pos:start="18:55" pos:end="18:56">||</operator> <name pos:start="18:58" pos:end="18:68"><name pos:start="18:58" pos:end="18:58">s</name><operator pos:start="18:59" pos:end="18:60">-&gt;</operator><name pos:start="18:61" pos:end="18:68">last_scr</name></name> <operator pos:start="18:70" pos:end="18:71">!=</operator> <name pos:start="18:73" pos:end="18:75">scr</name></expr>)</condition> <block pos:start="18:78" pos:end="227:40">{<block_content pos:start="20:9" pos:end="227:40">
        <comment type="block" pos:start="19:9" pos:end="19:54">/* output pack and systems header if needed */</comment>
        <expr_stmt pos:start="20:9" pos:end="20:50"><expr pos:start="20:9" pos:end="20:49"><name pos:start="20:9" pos:end="20:12">size</name> <operator pos:start="20:14" pos:end="20:14">=</operator> <call pos:start="20:16" pos:end="20:49"><name pos:start="20:16" pos:end="20:30">put_pack_header</name><argument_list pos:start="20:31" pos:end="20:49">(<argument pos:start="20:32" pos:end="20:34"><expr pos:start="20:32" pos:end="20:34"><name pos:start="20:32" pos:end="20:34">ctx</name></expr></argument>, <argument pos:start="20:37" pos:end="20:43"><expr pos:start="20:37" pos:end="20:43"><name pos:start="20:37" pos:end="20:43">buf_ptr</name></expr></argument>, <argument pos:start="20:46" pos:end="20:48"><expr pos:start="20:46" pos:end="20:48"><name pos:start="20:46" pos:end="20:48">scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="21:9" pos:end="21:24"><expr pos:start="21:9" pos:end="21:23"><name pos:start="21:9" pos:end="21:15">buf_ptr</name> <operator pos:start="21:17" pos:end="21:18">+=</operator> <name pos:start="21:20" pos:end="21:23">size</name></expr>;</expr_stmt>
        <expr_stmt pos:start="22:9" pos:end="22:25"><expr pos:start="22:9" pos:end="22:24"><name pos:start="22:9" pos:end="22:19"><name pos:start="22:9" pos:end="22:9">s</name><operator pos:start="22:10" pos:end="22:11">-&gt;</operator><name pos:start="22:12" pos:end="22:19">last_scr</name></name><operator pos:start="22:20" pos:end="22:20">=</operator> <name pos:start="22:22" pos:end="22:24">scr</name></expr>;</expr_stmt>
        <if_stmt pos:start="23:9" pos:end="227:40"><if pos:start="23:9" pos:end="227:40">if <condition pos:start="23:12" pos:end="23:22">(<expr pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:21"><name pos:start="23:13" pos:end="23:13">s</name><operator pos:start="23:14" pos:end="23:15">-&gt;</operator><name pos:start="23:16" pos:end="23:21">is_vcd</name></name></expr>)</condition> <block pos:start="23:24" pos:end="227:40">{<block_content pos:start="27:13" pos:end="227:40">
            <comment type="block" pos:start="24:13" pos:end="26:66">/* there is exactly one system header for each stream in a VCD MPEG,
               One in the very first video packet and one in the very first
               audio packet (see VCD standard p. IV-7 and IV-8).*/</comment>
            <if_stmt pos:start="27:13" pos:end="227:40"><if pos:start="27:13" pos:end="30:9">if <condition pos:start="27:16" pos:end="27:41">(<expr pos:start="27:17" pos:end="27:40"><name pos:start="27:17" pos:end="27:37"><name pos:start="27:17" pos:end="27:22">stream</name><operator pos:start="27:23" pos:end="27:24">-&gt;</operator><name pos:start="27:25" pos:end="27:37">packet_number</name></name><operator pos:start="27:38" pos:end="27:39">==</operator><literal type="number" pos:start="27:40" pos:end="27:40">0</literal></expr>)</condition> <block pos:start="27:43" pos:end="30:9">{<block_content pos:start="28:17" pos:end="29:32">
                <expr_stmt pos:start="28:17" pos:end="28:59"><expr pos:start="28:17" pos:end="28:58"><name pos:start="28:17" pos:end="28:20">size</name> <operator pos:start="28:22" pos:end="28:22">=</operator> <call pos:start="28:24" pos:end="28:58"><name pos:start="28:24" pos:end="28:40">put_system_header</name><argument_list pos:start="28:41" pos:end="28:58">(<argument pos:start="28:42" pos:end="28:44"><expr pos:start="28:42" pos:end="28:44"><name pos:start="28:42" pos:end="28:44">ctx</name></expr></argument>, <argument pos:start="28:47" pos:end="28:53"><expr pos:start="28:47" pos:end="28:53"><name pos:start="28:47" pos:end="28:53">buf_ptr</name></expr></argument>, <argument pos:start="28:56" pos:end="28:57"><expr pos:start="28:56" pos:end="28:57"><name pos:start="28:56" pos:end="28:57">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="29:17" pos:end="29:32"><expr pos:start="29:17" pos:end="29:31"><name pos:start="29:17" pos:end="29:23">buf_ptr</name> <operator pos:start="29:25" pos:end="29:26">+=</operator> <name pos:start="29:28" pos:end="29:31">size</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif" pos:start="30:11" pos:end="227:40">else if <condition pos:start="30:19" pos:end="30:29">(<expr pos:start="30:20" pos:end="30:28"><name pos:start="30:20" pos:end="30:28"><name pos:start="30:20" pos:end="30:20">s</name><operator pos:start="30:21" pos:end="30:22">-&gt;</operator><name pos:start="30:23" pos:end="30:28">is_dvd</name></name></expr>)</condition> <block pos:start="30:31" pos:end="227:40">{<block_content pos:start="31:13" pos:end="227:40">
            <if_stmt pos:start="31:13" pos:end="227:40"><if pos:start="31:13" pos:end="227:40">if <condition pos:start="31:16" pos:end="31:62">(<expr pos:start="31:17" pos:end="31:61"><name pos:start="31:17" pos:end="31:36"><name pos:start="31:17" pos:end="31:22">stream</name><operator pos:start="31:23" pos:end="31:24">-&gt;</operator><name pos:start="31:25" pos:end="31:36">align_iframe</name></name> <operator pos:start="31:38" pos:end="31:39">||</operator> <name pos:start="31:41" pos:end="31:56"><name pos:start="31:41" pos:end="31:41">s</name><operator pos:start="31:42" pos:end="31:43">-&gt;</operator><name pos:start="31:44" pos:end="31:56">packet_number</name></name> <operator pos:start="31:58" pos:end="31:59">==</operator> <literal type="number" pos:start="31:61" pos:end="31:61">0</literal></expr>)</condition><block pos:start="31:63" pos:end="227:40">{<block_content pos:start="32:17" pos:end="227:40">
                <decl_stmt pos:start="32:17" pos:end="32:67"><decl pos:start="32:17" pos:end="32:66"><type pos:start="32:17" pos:end="32:19"><name pos:start="32:17" pos:end="32:19">int</name></type> <name pos:start="32:21" pos:end="32:37">PES_bytes_to_fill</name> <init pos:start="32:39" pos:end="32:66">= <expr pos:start="32:41" pos:end="32:66"><name pos:start="32:41" pos:end="32:54"><name pos:start="32:41" pos:end="32:41">s</name><operator pos:start="32:42" pos:end="32:43">-&gt;</operator><name pos:start="32:44" pos:end="32:54">packet_size</name></name> <operator pos:start="32:56" pos:end="32:56">-</operator> <name pos:start="32:58" pos:end="32:61">size</name> <operator pos:start="32:63" pos:end="32:63">-</operator> <literal type="number" pos:start="32:65" pos:end="32:66">10</literal></expr></init></decl>;</decl_stmt>
                <if_stmt pos:start="33:17" pos:end="227:40"><if pos:start="33:17" pos:end="227:40">if <condition pos:start="33:20" pos:end="33:42">(<expr pos:start="33:21" pos:end="33:41"><name pos:start="33:21" pos:end="33:23">pts</name> <operator pos:start="33:25" pos:end="33:26">!=</operator> <name pos:start="33:28" pos:end="33:41">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="33:44" pos:end="227:40">{<block_content pos:start="34:21" pos:end="227:40">
                    <if_stmt pos:start="34:21" pos:end="37:47"><if pos:start="34:21" pos:end="35:51">if <condition pos:start="34:24" pos:end="34:35">(<expr pos:start="34:25" pos:end="34:34"><name pos:start="34:25" pos:end="34:27">dts</name> <operator pos:start="34:29" pos:end="34:30">!=</operator> <name pos:start="34:32" pos:end="34:34">pts</name></expr>)</condition><block type="pseudo" pos:start="35:25" pos:end="35:51"><block_content pos:start="35:25" pos:end="35:51">
                        <expr_stmt pos:start="35:25" pos:end="35:51"><expr pos:start="35:25" pos:end="35:50"><name pos:start="35:25" pos:end="35:41">PES_bytes_to_fill</name> <operator pos:start="35:43" pos:end="35:44">-=</operator> <literal type="number" pos:start="35:46" pos:end="35:48">5</literal> <operator pos:start="35:48" pos:end="35:48">+</operator> <literal type="number" pos:start="35:50" pos:end="35:50">5</literal></expr>;</expr_stmt></block_content></block></if>
                    <else pos:start="36:21" pos:end="37:47">else<block type="pseudo" pos:start="37:25" pos:end="37:47"><block_content pos:start="37:25" pos:end="37:47">
                        <expr_stmt pos:start="37:25" pos:end="37:47"><expr pos:start="37:25" pos:end="37:46"><name pos:start="37:25" pos:end="37:41">PES_bytes_to_fill</name> <operator pos:start="37:43" pos:end="37:44">-=</operator> <literal type="number" pos:start="37:46" pos:end="37:46">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
                <if_stmt pos:start="38:17" pos:end="227:40"><if pos:start="38:17" pos:end="62:17">if <condition pos:start="38:20" pos:end="38:74">(<expr pos:start="38:21" pos:end="38:73"><name pos:start="38:21" pos:end="38:43"><name pos:start="38:21" pos:end="38:26">stream</name><operator pos:start="38:27" pos:end="38:28">-&gt;</operator><name pos:start="38:29" pos:end="38:43">bytes_to_iframe</name></name> <operator pos:start="38:45" pos:end="38:46">==</operator> <literal type="number" pos:start="38:48" pos:end="38:48">0</literal> <operator pos:start="38:50" pos:end="38:51">||</operator> <name pos:start="38:53" pos:end="38:68"><name pos:start="38:53" pos:end="38:53">s</name><operator pos:start="38:54" pos:end="38:55">-&gt;</operator><name pos:start="38:56" pos:end="38:68">packet_number</name></name> <operator pos:start="38:70" pos:end="38:71">==</operator> <literal type="number" pos:start="38:73" pos:end="38:73">0</literal></expr>)</condition> <block pos:start="38:76" pos:end="62:17">{<block_content pos:start="39:21" pos:end="60:36">
                    <expr_stmt pos:start="39:21" pos:end="39:62"><expr pos:start="39:21" pos:end="39:61"><name pos:start="39:21" pos:end="39:24">size</name> <operator pos:start="39:26" pos:end="39:26">=</operator> <call pos:start="39:28" pos:end="39:61"><name pos:start="39:28" pos:end="39:44">put_system_header</name><argument_list pos:start="39:45" pos:end="39:61">(<argument pos:start="39:46" pos:end="39:48"><expr pos:start="39:46" pos:end="39:48"><name pos:start="39:46" pos:end="39:48">ctx</name></expr></argument>, <argument pos:start="39:51" pos:end="39:57"><expr pos:start="39:51" pos:end="39:57"><name pos:start="39:51" pos:end="39:57">buf_ptr</name></expr></argument>, <argument pos:start="39:60" pos:end="39:60"><expr pos:start="39:60" pos:end="39:60"><literal type="number" pos:start="39:60" pos:end="39:60">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="40:21" pos:end="40:36"><expr pos:start="40:21" pos:end="40:35"><name pos:start="40:21" pos:end="40:27">buf_ptr</name> <operator pos:start="40:29" pos:end="40:30">+=</operator> <name pos:start="40:32" pos:end="40:35">size</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="41:21" pos:end="41:44"><expr pos:start="41:21" pos:end="41:43"><name pos:start="41:21" pos:end="41:24">size</name> <operator pos:start="41:26" pos:end="41:26">=</operator> <name pos:start="41:28" pos:end="41:34">buf_ptr</name> <operator pos:start="41:36" pos:end="41:36">-</operator> <name pos:start="41:38" pos:end="41:43">buffer</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="42:21" pos:end="42:54"><expr pos:start="42:21" pos:end="42:53"><call pos:start="42:21" pos:end="42:53"><name pos:start="42:21" pos:end="42:30">avio_write</name><argument_list pos:start="42:31" pos:end="42:53">(<argument pos:start="42:32" pos:end="42:38"><expr pos:start="42:32" pos:end="42:38"><name pos:start="42:32" pos:end="42:38"><name pos:start="42:32" pos:end="42:34">ctx</name><operator pos:start="42:35" pos:end="42:36">-&gt;</operator><name pos:start="42:37" pos:end="42:38">pb</name></name></expr></argument>, <argument pos:start="42:41" pos:end="42:46"><expr pos:start="42:41" pos:end="42:46"><name pos:start="42:41" pos:end="42:46">buffer</name></expr></argument>, <argument pos:start="42:49" pos:end="42:52"><expr pos:start="42:49" pos:end="42:52"><name pos:start="42:49" pos:end="42:52">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="43:21" pos:end="43:57"><expr pos:start="43:21" pos:end="43:56"><call pos:start="43:21" pos:end="43:56"><name pos:start="43:21" pos:end="43:29">avio_wb32</name><argument_list pos:start="43:30" pos:end="43:56">(<argument pos:start="43:31" pos:end="43:37"><expr pos:start="43:31" pos:end="43:37"><name pos:start="43:31" pos:end="43:37"><name pos:start="43:31" pos:end="43:33">ctx</name><operator pos:start="43:34" pos:end="43:35">-&gt;</operator><name pos:start="43:36" pos:end="43:37">pb</name></name></expr></argument>, <argument pos:start="43:40" pos:end="43:55"><expr pos:start="43:40" pos:end="43:55"><name pos:start="43:40" pos:end="43:55">PRIVATE_STREAM_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="44:21" pos:end="44:47"><expr pos:start="44:21" pos:end="44:46"><call pos:start="44:21" pos:end="44:46"><name pos:start="44:21" pos:end="44:29">avio_wb16</name><argument_list pos:start="44:30" pos:end="44:46">(<argument pos:start="44:31" pos:end="44:37"><expr pos:start="44:31" pos:end="44:37"><name pos:start="44:31" pos:end="44:37"><name pos:start="44:31" pos:end="44:33">ctx</name><operator pos:start="44:34" pos:end="44:35">-&gt;</operator><name pos:start="44:36" pos:end="44:37">pb</name></name></expr></argument>, <argument pos:start="44:40" pos:end="44:45"><expr pos:start="44:40" pos:end="44:45"><literal type="number" pos:start="44:40" pos:end="44:45">0x03d4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="line" pos:start="44:57" pos:end="44:65">// length</comment>
                    <expr_stmt pos:start="45:21" pos:end="45:43"><expr pos:start="45:21" pos:end="45:42"><call pos:start="45:21" pos:end="45:42"><name pos:start="45:21" pos:end="45:27">avio_w8</name><argument_list pos:start="45:28" pos:end="45:42">(<argument pos:start="45:29" pos:end="45:35"><expr pos:start="45:29" pos:end="45:35"><name pos:start="45:29" pos:end="45:35"><name pos:start="45:29" pos:end="45:31">ctx</name><operator pos:start="45:32" pos:end="45:33">-&gt;</operator><name pos:start="45:34" pos:end="45:35">pb</name></name></expr></argument>, <argument pos:start="45:38" pos:end="45:41"><expr pos:start="45:38" pos:end="45:41"><literal type="number" pos:start="45:38" pos:end="45:41">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line" pos:start="45:55" pos:end="45:77">// substream ID, 00=PCI</comment>
                    <for pos:start="46:21" pos:end="47:47">for <control pos:start="46:25" pos:end="46:45">(<init pos:start="46:26" pos:end="46:31"><expr pos:start="46:26" pos:end="46:30"><name pos:start="46:26" pos:end="46:26">i</name> <operator pos:start="46:28" pos:end="46:28">=</operator> <literal type="number" pos:start="46:30" pos:end="46:30">0</literal></expr>;</init> <condition pos:start="46:33" pos:end="46:40"><expr pos:start="46:33" pos:end="46:39"><name pos:start="46:33" pos:end="46:33">i</name> <operator pos:start="46:35" pos:end="46:35">&lt;</operator> <literal type="number" pos:start="46:37" pos:end="46:39">979</literal></expr>;</condition> <incr pos:start="46:42" pos:end="46:44"><expr pos:start="46:42" pos:end="46:44"><name pos:start="46:42" pos:end="46:42">i</name><operator pos:start="46:43" pos:end="46:44">++</operator></expr></incr>)</control><block type="pseudo" pos:start="47:25" pos:end="47:47"><block_content pos:start="47:25" pos:end="47:47">
                        <expr_stmt pos:start="47:25" pos:end="47:47"><expr pos:start="47:25" pos:end="47:46"><call pos:start="47:25" pos:end="47:46"><name pos:start="47:25" pos:end="47:31">avio_w8</name><argument_list pos:start="47:32" pos:end="47:46">(<argument pos:start="47:33" pos:end="47:39"><expr pos:start="47:33" pos:end="47:39"><name pos:start="47:33" pos:end="47:39"><name pos:start="47:33" pos:end="47:35">ctx</name><operator pos:start="47:36" pos:end="47:37">-&gt;</operator><name pos:start="47:38" pos:end="47:39">pb</name></name></expr></argument>, <argument pos:start="47:42" pos:end="47:45"><expr pos:start="47:42" pos:end="47:45"><literal type="number" pos:start="47:42" pos:end="47:45">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    <expr_stmt pos:start="48:21" pos:end="48:57"><expr pos:start="48:21" pos:end="48:56"><call pos:start="48:21" pos:end="48:56"><name pos:start="48:21" pos:end="48:29">avio_wb32</name><argument_list pos:start="48:30" pos:end="48:56">(<argument pos:start="48:31" pos:end="48:37"><expr pos:start="48:31" pos:end="48:37"><name pos:start="48:31" pos:end="48:37"><name pos:start="48:31" pos:end="48:33">ctx</name><operator pos:start="48:34" pos:end="48:35">-&gt;</operator><name pos:start="48:36" pos:end="48:37">pb</name></name></expr></argument>, <argument pos:start="48:40" pos:end="48:55"><expr pos:start="48:40" pos:end="48:55"><name pos:start="48:40" pos:end="48:55">PRIVATE_STREAM_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="49:21" pos:end="49:47"><expr pos:start="49:21" pos:end="49:46"><call pos:start="49:21" pos:end="49:46"><name pos:start="49:21" pos:end="49:29">avio_wb16</name><argument_list pos:start="49:30" pos:end="49:46">(<argument pos:start="49:31" pos:end="49:37"><expr pos:start="49:31" pos:end="49:37"><name pos:start="49:31" pos:end="49:37"><name pos:start="49:31" pos:end="49:33">ctx</name><operator pos:start="49:34" pos:end="49:35">-&gt;</operator><name pos:start="49:36" pos:end="49:37">pb</name></name></expr></argument>, <argument pos:start="49:40" pos:end="49:45"><expr pos:start="49:40" pos:end="49:45"><literal type="number" pos:start="49:40" pos:end="49:45">0x03fa</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="line" pos:start="49:57" pos:end="49:65">// length</comment>
                    <expr_stmt pos:start="50:21" pos:end="50:43"><expr pos:start="50:21" pos:end="50:42"><call pos:start="50:21" pos:end="50:42"><name pos:start="50:21" pos:end="50:27">avio_w8</name><argument_list pos:start="50:28" pos:end="50:42">(<argument pos:start="50:29" pos:end="50:35"><expr pos:start="50:29" pos:end="50:35"><name pos:start="50:29" pos:end="50:35"><name pos:start="50:29" pos:end="50:31">ctx</name><operator pos:start="50:32" pos:end="50:33">-&gt;</operator><name pos:start="50:34" pos:end="50:35">pb</name></name></expr></argument>, <argument pos:start="50:38" pos:end="50:41"><expr pos:start="50:38" pos:end="50:41"><literal type="number" pos:start="50:38" pos:end="50:41">0x01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="line" pos:start="50:55" pos:end="50:77">// substream ID, 01=DSI</comment>
                    <for pos:start="51:21" pos:end="52:47">for <control pos:start="51:25" pos:end="51:46">(<init pos:start="51:26" pos:end="51:31"><expr pos:start="51:26" pos:end="51:30"><name pos:start="51:26" pos:end="51:26">i</name> <operator pos:start="51:28" pos:end="51:28">=</operator> <literal type="number" pos:start="51:30" pos:end="51:30">0</literal></expr>;</init> <condition pos:start="51:33" pos:end="51:41"><expr pos:start="51:33" pos:end="51:40"><name pos:start="51:33" pos:end="51:33">i</name> <operator pos:start="51:35" pos:end="51:35">&lt;</operator> <literal type="number" pos:start="51:37" pos:end="51:40">1017</literal></expr>;</condition> <incr pos:start="51:43" pos:end="51:45"><expr pos:start="51:43" pos:end="51:45"><name pos:start="51:43" pos:end="51:43">i</name><operator pos:start="51:44" pos:end="51:45">++</operator></expr></incr>)</control><block type="pseudo" pos:start="52:25" pos:end="52:47"><block_content pos:start="52:25" pos:end="52:47">
                        <expr_stmt pos:start="52:25" pos:end="52:47"><expr pos:start="52:25" pos:end="52:46"><call pos:start="52:25" pos:end="52:46"><name pos:start="52:25" pos:end="52:31">avio_w8</name><argument_list pos:start="52:32" pos:end="52:46">(<argument pos:start="52:33" pos:end="52:39"><expr pos:start="52:33" pos:end="52:39"><name pos:start="52:33" pos:end="52:39"><name pos:start="52:33" pos:end="52:35">ctx</name><operator pos:start="52:36" pos:end="52:37">-&gt;</operator><name pos:start="52:38" pos:end="52:39">pb</name></name></expr></argument>, <argument pos:start="52:42" pos:end="52:45"><expr pos:start="52:42" pos:end="52:45"><literal type="number" pos:start="52:42" pos:end="52:45">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                    <expr_stmt pos:start="53:21" pos:end="53:43"><expr pos:start="53:21" pos:end="53:42"><call pos:start="53:21" pos:end="53:42"><name pos:start="53:21" pos:end="53:26">memset</name><argument_list pos:start="53:27" pos:end="53:42">(<argument pos:start="53:28" pos:end="53:33"><expr pos:start="53:28" pos:end="53:33"><name pos:start="53:28" pos:end="53:33">buffer</name></expr></argument>, <argument pos:start="53:36" pos:end="53:36"><expr pos:start="53:36" pos:end="53:36"><literal type="number" pos:start="53:36" pos:end="53:36">0</literal></expr></argument>, <argument pos:start="53:39" pos:end="53:41"><expr pos:start="53:39" pos:end="53:41"><literal type="number" pos:start="53:39" pos:end="53:41">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="54:21" pos:end="54:37"><expr pos:start="54:21" pos:end="54:36"><name pos:start="54:21" pos:end="54:27">buf_ptr</name> <operator pos:start="54:29" pos:end="54:29">=</operator> <name pos:start="54:31" pos:end="54:36">buffer</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="55:21" pos:end="55:39"><expr pos:start="55:21" pos:end="55:38"><name pos:start="55:21" pos:end="55:36"><name pos:start="55:21" pos:end="55:21">s</name><operator pos:start="55:22" pos:end="55:23">-&gt;</operator><name pos:start="55:24" pos:end="55:36">packet_number</name></name><operator pos:start="55:37" pos:end="55:38">++</operator></expr>;</expr_stmt>
                    <expr_stmt pos:start="56:21" pos:end="56:45"><expr pos:start="56:21" pos:end="56:44"><name pos:start="56:21" pos:end="56:40"><name pos:start="56:21" pos:end="56:26">stream</name><operator pos:start="56:27" pos:end="56:28">-&gt;</operator><name pos:start="56:29" pos:end="56:40">align_iframe</name></name> <operator pos:start="56:42" pos:end="56:42">=</operator> <literal type="number" pos:start="56:44" pos:end="56:44">0</literal></expr>;</expr_stmt>
                    <expr_stmt pos:start="57:21" pos:end="57:71"><expr pos:start="57:21" pos:end="57:70"><name pos:start="57:21" pos:end="57:23">scr</name> <operator pos:start="57:25" pos:end="57:26">+=</operator> <name pos:start="57:28" pos:end="57:41"><name pos:start="57:28" pos:end="57:28">s</name><operator pos:start="57:29" pos:end="57:30">-&gt;</operator><name pos:start="57:31" pos:end="57:41">packet_size</name></name><operator pos:start="57:42" pos:end="57:42">*</operator><literal type="number" pos:start="57:43" pos:end="57:49">90000LL</literal> <operator pos:start="57:51" pos:end="57:51">/</operator> <operator pos:start="57:53" pos:end="57:53">(</operator><name pos:start="57:54" pos:end="57:64"><name pos:start="57:54" pos:end="57:54">s</name><operator pos:start="57:55" pos:end="57:56">-&gt;</operator><name pos:start="57:57" pos:end="57:64">mux_rate</name></name><operator pos:start="57:65" pos:end="57:65">*</operator><literal type="number" pos:start="57:66" pos:end="57:69">50LL</literal><operator pos:start="57:70" pos:end="57:70">)</operator></expr>;</expr_stmt> <comment type="line" pos:start="57:73" pos:end="57:123">//FIXME rounding and first few bytes of each packet</comment>
                    <expr_stmt pos:start="58:21" pos:end="58:62"><expr pos:start="58:21" pos:end="58:61"><name pos:start="58:21" pos:end="58:24">size</name> <operator pos:start="58:26" pos:end="58:26">=</operator> <call pos:start="58:28" pos:end="58:61"><name pos:start="58:28" pos:end="58:42">put_pack_header</name><argument_list pos:start="58:43" pos:end="58:61">(<argument pos:start="58:44" pos:end="58:46"><expr pos:start="58:44" pos:end="58:46"><name pos:start="58:44" pos:end="58:46">ctx</name></expr></argument>, <argument pos:start="58:49" pos:end="58:55"><expr pos:start="58:49" pos:end="58:55"><name pos:start="58:49" pos:end="58:55">buf_ptr</name></expr></argument>, <argument pos:start="58:58" pos:end="58:60"><expr pos:start="58:58" pos:end="58:60"><name pos:start="58:58" pos:end="58:60">scr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="59:21" pos:end="59:37"><expr pos:start="59:21" pos:end="59:36"><name pos:start="59:21" pos:end="59:31"><name pos:start="59:21" pos:end="59:21">s</name><operator pos:start="59:22" pos:end="59:23">-&gt;</operator><name pos:start="59:24" pos:end="59:31">last_scr</name></name><operator pos:start="59:32" pos:end="59:32">=</operator> <name pos:start="59:34" pos:end="59:36">scr</name></expr>;</expr_stmt>
                    <expr_stmt pos:start="60:21" pos:end="60:36"><expr pos:start="60:21" pos:end="60:35"><name pos:start="60:21" pos:end="60:27">buf_ptr</name> <operator pos:start="60:29" pos:end="60:30">+=</operator> <name pos:start="60:32" pos:end="60:35">size</name></expr>;</expr_stmt>
                    <comment type="block" pos:start="61:21" pos:end="61:35">/* GOP Start */</comment>
                </block_content>}</block></if> <if type="elseif" pos:start="62:19" pos:end="64:9">else if <condition pos:start="62:27" pos:end="62:71">(<expr pos:start="62:28" pos:end="62:70"><name pos:start="62:28" pos:end="62:50"><name pos:start="62:28" pos:end="62:33">stream</name><operator pos:start="62:34" pos:end="62:35">-&gt;</operator><name pos:start="62:36" pos:end="62:50">bytes_to_iframe</name></name> <operator pos:start="62:52" pos:end="62:52">&lt;</operator> <name pos:start="62:54" pos:end="62:70">PES_bytes_to_fill</name></expr>)</condition> <block pos:start="62:73" pos:end="64:9">{<block_content pos:start="63:21" pos:end="63:83">
                    <expr_stmt pos:start="63:21" pos:end="63:83"><expr pos:start="63:21" pos:end="63:82"><name pos:start="63:21" pos:end="63:36">pad_packet_bytes</name> <operator pos:start="63:38" pos:end="63:38">=</operator> <name pos:start="63:40" pos:end="63:56">PES_bytes_to_fill</name> <operator pos:start="63:58" pos:end="63:58">-</operator> <name pos:start="63:60" pos:end="63:82"><name pos:start="63:60" pos:end="63:65">stream</name><operator pos:start="63:66" pos:end="63:67">-&gt;</operator><name pos:start="63:68" pos:end="63:82">bytes_to_iframe</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else pos:start="64:11" pos:end="227:40">else <block pos:start="64:16" pos:end="227:40">{<block_content pos:start="65:13" pos:end="227:40">
            <if_stmt pos:start="65:13" pos:end="227:40"><if pos:start="65:13" pos:end="227:40">if <condition pos:start="65:16" pos:end="65:64">(<expr pos:start="65:17" pos:end="65:63"><operator pos:start="65:17" pos:end="65:17">(</operator><name pos:start="65:18" pos:end="65:33"><name pos:start="65:18" pos:end="65:18">s</name><operator pos:start="65:19" pos:end="65:20">-&gt;</operator><name pos:start="65:21" pos:end="65:33">packet_number</name></name> <operator pos:start="65:35" pos:end="65:35">%</operator> <name pos:start="65:37" pos:end="65:57"><name pos:start="65:37" pos:end="65:37">s</name><operator pos:start="65:38" pos:end="65:39">-&gt;</operator><name pos:start="65:40" pos:end="65:57">system_header_freq</name></name><operator pos:start="65:58" pos:end="65:58">)</operator> <operator pos:start="65:60" pos:end="65:61">==</operator> <literal type="number" pos:start="65:63" pos:end="65:63">0</literal></expr>)</condition> <block pos:start="65:66" pos:end="227:40">{<block_content pos:start="66:17" pos:end="227:40">
                <expr_stmt pos:start="66:17" pos:end="66:58"><expr pos:start="66:17" pos:end="66:57"><name pos:start="66:17" pos:end="66:20">size</name> <operator pos:start="66:22" pos:end="66:22">=</operator> <call pos:start="66:24" pos:end="66:57"><name pos:start="66:24" pos:end="66:40">put_system_header</name><argument_list pos:start="66:41" pos:end="66:57">(<argument pos:start="66:42" pos:end="66:44"><expr pos:start="66:42" pos:end="66:44"><name pos:start="66:42" pos:end="66:44">ctx</name></expr></argument>, <argument pos:start="66:47" pos:end="66:53"><expr pos:start="66:47" pos:end="66:53"><name pos:start="66:47" pos:end="66:53">buf_ptr</name></expr></argument>, <argument pos:start="66:56" pos:end="66:56"><expr pos:start="66:56" pos:end="66:56"><literal type="number" pos:start="66:56" pos:end="66:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="67:17" pos:end="67:32"><expr pos:start="67:17" pos:end="67:31"><name pos:start="67:17" pos:end="67:23">buf_ptr</name> <operator pos:start="67:25" pos:end="67:26">+=</operator> <name pos:start="67:28" pos:end="67:31">size</name></expr>;</expr_stmt>
    <expr_stmt pos:start="68:5" pos:end="68:28"><expr pos:start="68:5" pos:end="68:27"><name pos:start="68:5" pos:end="68:8">size</name> <operator pos:start="68:10" pos:end="68:10">=</operator> <name pos:start="68:12" pos:end="68:18">buf_ptr</name> <operator pos:start="68:20" pos:end="68:20">-</operator> <name pos:start="68:22" pos:end="68:27">buffer</name></expr>;</expr_stmt>
    <expr_stmt pos:start="69:5" pos:end="69:38"><expr pos:start="69:5" pos:end="69:37"><call pos:start="69:5" pos:end="69:37"><name pos:start="69:5" pos:end="69:14">avio_write</name><argument_list pos:start="69:15" pos:end="69:37">(<argument pos:start="69:16" pos:end="69:22"><expr pos:start="69:16" pos:end="69:22"><name pos:start="69:16" pos:end="69:22"><name pos:start="69:16" pos:end="69:18">ctx</name><operator pos:start="69:19" pos:end="69:20">-&gt;</operator><name pos:start="69:21" pos:end="69:22">pb</name></name></expr></argument>, <argument pos:start="69:25" pos:end="69:30"><expr pos:start="69:25" pos:end="69:30"><name pos:start="69:25" pos:end="69:30">buffer</name></expr></argument>, <argument pos:start="69:33" pos:end="69:36"><expr pos:start="69:33" pos:end="69:36"><name pos:start="69:33" pos:end="69:36">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="70:5" pos:end="70:40"><expr pos:start="70:5" pos:end="70:39"><name pos:start="70:5" pos:end="70:15">packet_size</name> <operator pos:start="70:17" pos:end="70:17">=</operator> <name pos:start="70:19" pos:end="70:32"><name pos:start="70:19" pos:end="70:19">s</name><operator pos:start="70:20" pos:end="70:21">-&gt;</operator><name pos:start="70:22" pos:end="70:32">packet_size</name></name> <operator pos:start="70:34" pos:end="70:34">-</operator> <name pos:start="70:36" pos:end="70:39">size</name></expr>;</expr_stmt>
    <if_stmt pos:start="71:5" pos:end="74:31"><if pos:start="71:5" pos:end="74:31">if <condition pos:start="71:8" pos:end="71:45">(<expr pos:start="71:9" pos:end="71:44"><name pos:start="71:9" pos:end="71:17"><name pos:start="71:9" pos:end="71:9">s</name><operator pos:start="71:10" pos:end="71:11">-&gt;</operator><name pos:start="71:12" pos:end="71:17">is_vcd</name></name> <operator pos:start="71:19" pos:end="71:20">&amp;&amp;</operator> <operator pos:start="71:22" pos:end="71:22">(</operator><name pos:start="71:23" pos:end="71:24">id</name> <operator pos:start="71:26" pos:end="71:26">&amp;</operator> <literal type="number" pos:start="71:28" pos:end="71:31">0xe0</literal><operator pos:start="71:32" pos:end="71:32">)</operator> <operator pos:start="71:34" pos:end="71:35">==</operator> <name pos:start="71:37" pos:end="71:44">AUDIO_ID</name></expr>)</condition><block type="pseudo" pos:start="74:9" pos:end="74:31"><block_content pos:start="74:9" pos:end="74:31">
        <comment type="block" pos:start="72:9" pos:end="73:52">/* The VCD standard demands that 20 zero bytes follow
           each audio pack (see standard p. IV-8).*/</comment>
        <expr_stmt pos:start="74:9" pos:end="74:31"><expr pos:start="74:9" pos:end="74:30"><name pos:start="74:9" pos:end="74:24">zero_trail_bytes</name> <operator pos:start="74:26" pos:end="74:27">+=</operator> <literal type="number" pos:start="74:29" pos:end="74:30">20</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt pos:start="75:5" pos:end="227:40"><if pos:start="75:5" pos:end="227:40">if <condition pos:start="75:8" pos:end="76:47">(<expr pos:start="75:9" pos:end="76:46"><operator pos:start="75:9" pos:end="75:9">(</operator><name pos:start="75:10" pos:end="75:18"><name pos:start="75:10" pos:end="75:10">s</name><operator pos:start="75:11" pos:end="75:12">-&gt;</operator><name pos:start="75:13" pos:end="75:18">is_vcd</name></name> <operator pos:start="75:20" pos:end="75:21">&amp;&amp;</operator> <name pos:start="75:23" pos:end="75:43"><name pos:start="75:23" pos:end="75:28">stream</name><operator pos:start="75:29" pos:end="75:30">-&gt;</operator><name pos:start="75:31" pos:end="75:43">packet_number</name></name><operator pos:start="75:44" pos:end="75:45">==</operator><literal type="number" pos:start="75:46" pos:end="75:46">0</literal><operator pos:start="75:47" pos:end="75:47">)</operator>
        <operator pos:start="76:9" pos:end="76:10">||</operator> <operator pos:start="76:12" pos:end="76:12">(</operator><name pos:start="76:13" pos:end="76:22"><name pos:start="76:13" pos:end="76:13">s</name><operator pos:start="76:14" pos:end="76:15">-&gt;</operator><name pos:start="76:16" pos:end="76:22">is_svcd</name></name> <operator pos:start="76:24" pos:end="76:25">&amp;&amp;</operator> <name pos:start="76:27" pos:end="76:42"><name pos:start="76:27" pos:end="76:27">s</name><operator pos:start="76:28" pos:end="76:29">-&gt;</operator><name pos:start="76:30" pos:end="76:42">packet_number</name></name><operator pos:start="76:43" pos:end="76:44">==</operator><literal type="number" pos:start="76:45" pos:end="76:45">0</literal><operator pos:start="76:46" pos:end="76:46">)</operator></expr>)</condition> <block pos:start="76:49" pos:end="227:40">{<block_content pos:start="83:9" pos:end="227:40">
        <comment type="block" pos:start="77:9" pos:end="80:21">/* for VCD the first pack of each stream contains only the pack header,
           the system header and lots of padding (see VCD standard p. IV-6).
           In the case of an audio pack, 20 zero bytes are also added at
           the end.*/</comment>
        <comment type="block" pos:start="81:9" pos:end="82:60">/* For SVCD we fill the very first pack to increase compatibility with
           some DVD players. Not mandated by the standard.*/</comment>
        <if_stmt pos:start="83:9" pos:end="84:29"><if pos:start="83:9" pos:end="84:29">if <condition pos:start="83:12" pos:end="83:23">(<expr pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:22"><name pos:start="83:13" pos:end="83:13">s</name><operator pos:start="83:14" pos:end="83:15">-&gt;</operator><name pos:start="83:16" pos:end="83:22">is_svcd</name></name></expr>)</condition><block type="pseudo" pos:start="84:13" pos:end="84:29"><block_content pos:start="84:13" pos:end="84:29">
            <expr_stmt pos:start="84:13" pos:end="84:29"><expr pos:start="84:13" pos:end="84:28"><name pos:start="84:13" pos:end="84:24">general_pack</name> <operator pos:start="84:26" pos:end="84:26">=</operator> <literal type="number" pos:start="84:28" pos:end="84:28">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>    <comment type="block" pos:start="84:34" pos:end="84:97">/* the system header refers to both streams and no stream data*/</comment>
        <expr_stmt pos:start="85:9" pos:end="85:58"><expr pos:start="85:9" pos:end="85:57"><name pos:start="85:9" pos:end="85:24">pad_packet_bytes</name> <operator pos:start="85:26" pos:end="85:26">=</operator> <name pos:start="85:28" pos:end="85:38">packet_size</name> <operator pos:start="85:40" pos:end="85:40">-</operator> <name pos:start="85:42" pos:end="85:57">zero_trail_bytes</name></expr>;</expr_stmt>
    <expr_stmt pos:start="86:5" pos:end="86:55"><expr pos:start="86:5" pos:end="86:54"><name pos:start="86:5" pos:end="86:15">packet_size</name> <operator pos:start="86:17" pos:end="86:18">-=</operator> <name pos:start="86:20" pos:end="86:35">pad_packet_bytes</name> <operator pos:start="86:37" pos:end="86:37">+</operator> <name pos:start="86:39" pos:end="86:54">zero_trail_bytes</name></expr>;</expr_stmt>
    <if_stmt pos:start="87:5" pos:end="227:40"><if pos:start="87:5" pos:end="227:40">if <condition pos:start="87:8" pos:end="87:24">(<expr pos:start="87:9" pos:end="87:23"><name pos:start="87:9" pos:end="87:19">packet_size</name> <operator pos:start="87:21" pos:end="87:21">&gt;</operator> <literal type="number" pos:start="87:23" pos:end="87:23">0</literal></expr>)</condition> <block pos:start="87:26" pos:end="227:40">{<block_content pos:start="89:9" pos:end="227:40">
        <comment type="block" pos:start="88:9" pos:end="88:32">/* packet header size */</comment>
        <expr_stmt pos:start="89:9" pos:end="89:25"><expr pos:start="89:9" pos:end="89:24"><name pos:start="89:9" pos:end="89:19">packet_size</name> <operator pos:start="89:21" pos:end="89:22">-=</operator> <literal type="number" pos:start="89:24" pos:end="89:24">6</literal></expr>;</expr_stmt>
        <comment type="block" pos:start="90:9" pos:end="90:27">/* packet header */</comment>
        <if_stmt pos:start="91:9" pos:end="227:40"><if pos:start="91:9" pos:end="96:9">if <condition pos:start="91:12" pos:end="91:24">(<expr pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:23"><name pos:start="91:13" pos:end="91:13">s</name><operator pos:start="91:14" pos:end="91:15">-&gt;</operator><name pos:start="91:16" pos:end="91:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="91:26" pos:end="96:9">{<block_content pos:start="92:13" pos:end="95:28">
            <expr_stmt pos:start="92:13" pos:end="92:27"><expr pos:start="92:13" pos:end="92:26"><name pos:start="92:13" pos:end="92:22">header_len</name> <operator pos:start="92:24" pos:end="92:24">=</operator> <literal type="number" pos:start="92:26" pos:end="92:26">3</literal></expr>;</expr_stmt>
            <if_stmt pos:start="93:13" pos:end="94:32"><if pos:start="93:13" pos:end="94:32">if <condition pos:start="93:16" pos:end="93:41">(<expr pos:start="93:17" pos:end="93:40"><name pos:start="93:17" pos:end="93:37"><name pos:start="93:17" pos:end="93:22">stream</name><operator pos:start="93:23" pos:end="93:24">-&gt;</operator><name pos:start="93:25" pos:end="93:37">packet_number</name></name><operator pos:start="93:38" pos:end="93:39">==</operator><literal type="number" pos:start="93:40" pos:end="93:40">0</literal></expr>)</condition><block type="pseudo" pos:start="94:17" pos:end="94:32"><block_content pos:start="94:17" pos:end="94:32">
                <expr_stmt pos:start="94:17" pos:end="94:32"><expr pos:start="94:17" pos:end="94:31"><name pos:start="94:17" pos:end="94:26">header_len</name> <operator pos:start="94:28" pos:end="94:29">+=</operator> <literal type="number" pos:start="94:31" pos:end="94:31">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block" pos:start="94:34" pos:end="94:52">/* PES extension */</comment>
            <expr_stmt pos:start="95:13" pos:end="95:28"><expr pos:start="95:13" pos:end="95:27"><name pos:start="95:13" pos:end="95:22">header_len</name> <operator pos:start="95:24" pos:end="95:25">+=</operator> <literal type="number" pos:start="95:27" pos:end="95:27">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="95:30" pos:end="95:59">/* obligatory stuffing byte */</comment>
        </block_content>}</block></if> <else pos:start="96:11" pos:end="227:40">else <block pos:start="96:16" pos:end="227:40">{<block_content pos:start="97:13" pos:end="227:40">
            <expr_stmt pos:start="97:13" pos:end="97:27"><expr pos:start="97:13" pos:end="97:26"><name pos:start="97:13" pos:end="97:22">header_len</name> <operator pos:start="97:24" pos:end="97:24">=</operator> <literal type="number" pos:start="97:26" pos:end="97:26">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="98:9" pos:end="227:40"><if pos:start="98:9" pos:end="103:9">if <condition pos:start="98:12" pos:end="98:34">(<expr pos:start="98:13" pos:end="98:33"><name pos:start="98:13" pos:end="98:15">pts</name> <operator pos:start="98:17" pos:end="98:18">!=</operator> <name pos:start="98:20" pos:end="98:33">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="98:36" pos:end="103:9">{<block_content pos:start="99:13" pos:end="102:32">
            <if_stmt pos:start="99:13" pos:end="102:32"><if pos:start="99:13" pos:end="100:36">if <condition pos:start="99:16" pos:end="99:27">(<expr pos:start="99:17" pos:end="99:26"><name pos:start="99:17" pos:end="99:19">dts</name> <operator pos:start="99:21" pos:end="99:22">!=</operator> <name pos:start="99:24" pos:end="99:26">pts</name></expr>)</condition><block type="pseudo" pos:start="100:17" pos:end="100:36"><block_content pos:start="100:17" pos:end="100:36">
                <expr_stmt pos:start="100:17" pos:end="100:36"><expr pos:start="100:17" pos:end="100:35"><name pos:start="100:17" pos:end="100:26">header_len</name> <operator pos:start="100:28" pos:end="100:29">+=</operator> <literal type="number" pos:start="100:31" pos:end="100:33">5</literal> <operator pos:start="100:33" pos:end="100:33">+</operator> <literal type="number" pos:start="100:35" pos:end="100:35">5</literal></expr>;</expr_stmt></block_content></block></if>
            <else pos:start="101:13" pos:end="102:32">else<block type="pseudo" pos:start="102:17" pos:end="102:32"><block_content pos:start="102:17" pos:end="102:32">
                <expr_stmt pos:start="102:17" pos:end="102:32"><expr pos:start="102:17" pos:end="102:31"><name pos:start="102:17" pos:end="102:26">header_len</name> <operator pos:start="102:28" pos:end="102:29">+=</operator> <literal type="number" pos:start="102:31" pos:end="102:31">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="103:11" pos:end="227:40">else <block pos:start="103:16" pos:end="227:40">{<block_content pos:start="104:13" pos:end="227:40">
            <if_stmt pos:start="104:13" pos:end="105:29"><if pos:start="104:13" pos:end="105:29">if <condition pos:start="104:16" pos:end="104:29">(<expr pos:start="104:17" pos:end="104:28"><operator pos:start="104:17" pos:end="104:17">!</operator><name pos:start="104:18" pos:end="104:28"><name pos:start="104:18" pos:end="104:18">s</name><operator pos:start="104:19" pos:end="104:20">-&gt;</operator><name pos:start="104:21" pos:end="104:28">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="105:17" pos:end="105:29"><block_content pos:start="105:17" pos:end="105:29">
                <expr_stmt pos:start="105:17" pos:end="105:29"><expr pos:start="105:17" pos:end="105:28"><name pos:start="105:17" pos:end="105:26">header_len</name><operator pos:start="105:27" pos:end="105:28">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt pos:start="106:9" pos:end="106:48"><expr pos:start="106:9" pos:end="106:47"><name pos:start="106:9" pos:end="106:20">payload_size</name> <operator pos:start="106:22" pos:end="106:22">=</operator> <name pos:start="106:24" pos:end="106:34">packet_size</name> <operator pos:start="106:36" pos:end="106:36">-</operator> <name pos:start="106:38" pos:end="106:47">header_len</name></expr>;</expr_stmt>
        <if_stmt pos:start="107:9" pos:end="227:40"><if pos:start="107:9" pos:end="227:40">if <condition pos:start="107:12" pos:end="107:22">(<expr pos:start="107:13" pos:end="107:21"><name pos:start="107:13" pos:end="107:14">id</name> <operator pos:start="107:16" pos:end="107:16">&lt;</operator> <literal type="number" pos:start="107:18" pos:end="107:21">0xc0</literal></expr>)</condition> <block pos:start="107:24" pos:end="227:40">{<block_content pos:start="108:13" pos:end="227:40">
            <expr_stmt pos:start="108:13" pos:end="108:41"><expr pos:start="108:13" pos:end="108:40"><name pos:start="108:13" pos:end="108:21">startcode</name> <operator pos:start="108:23" pos:end="108:23">=</operator> <name pos:start="108:25" pos:end="108:40">PRIVATE_STREAM_1</name></expr>;</expr_stmt>
            <expr_stmt pos:start="109:13" pos:end="109:30"><expr pos:start="109:13" pos:end="109:29"><name pos:start="109:13" pos:end="109:24">payload_size</name> <operator pos:start="109:26" pos:end="109:27">-=</operator> <literal type="number" pos:start="109:29" pos:end="109:29">1</literal></expr>;</expr_stmt>
            <if_stmt pos:start="110:13" pos:end="227:40"><if pos:start="110:13" pos:end="114:9">if <condition pos:start="110:16" pos:end="110:27">(<expr pos:start="110:17" pos:end="110:26"><name pos:start="110:17" pos:end="110:18">id</name> <operator pos:start="110:20" pos:end="110:21">&gt;=</operator> <literal type="number" pos:start="110:23" pos:end="110:26">0x40</literal></expr>)</condition> <block pos:start="110:29" pos:end="114:9">{<block_content pos:start="111:17" pos:end="113:38">
                <expr_stmt pos:start="111:17" pos:end="111:34"><expr pos:start="111:17" pos:end="111:33"><name pos:start="111:17" pos:end="111:28">payload_size</name> <operator pos:start="111:30" pos:end="111:31">-=</operator> <literal type="number" pos:start="111:33" pos:end="111:33">3</literal></expr>;</expr_stmt>
                <if_stmt pos:start="112:17" pos:end="113:38"><if pos:start="112:17" pos:end="113:38">if <condition pos:start="112:20" pos:end="112:31">(<expr pos:start="112:21" pos:end="112:30"><name pos:start="112:21" pos:end="112:22">id</name> <operator pos:start="112:24" pos:end="112:25">&gt;=</operator> <literal type="number" pos:start="112:27" pos:end="112:30">0xa0</literal></expr>)</condition><block type="pseudo" pos:start="113:21" pos:end="113:38"><block_content pos:start="113:21" pos:end="113:38">
                    <expr_stmt pos:start="113:21" pos:end="113:38"><expr pos:start="113:21" pos:end="113:37"><name pos:start="113:21" pos:end="113:32">payload_size</name> <operator pos:start="113:34" pos:end="113:35">-=</operator> <literal type="number" pos:start="113:37" pos:end="113:37">3</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else pos:start="114:11" pos:end="227:40">else <block pos:start="114:16" pos:end="227:40">{<block_content pos:start="115:13" pos:end="227:40">
            <expr_stmt pos:start="115:13" pos:end="115:35"><expr pos:start="115:13" pos:end="115:34"><name pos:start="115:13" pos:end="115:21">startcode</name> <operator pos:start="115:23" pos:end="115:23">=</operator> <literal type="number" pos:start="115:25" pos:end="115:31">0x100</literal> <operator pos:start="115:31" pos:end="115:31">+</operator> <name pos:start="115:33" pos:end="115:34">id</name></expr>;</expr_stmt>
        <expr_stmt pos:start="116:9" pos:end="116:66"><expr pos:start="116:9" pos:end="116:65"><name pos:start="116:9" pos:end="116:21">stuffing_size</name> <operator pos:start="116:23" pos:end="116:23">=</operator> <name pos:start="116:25" pos:end="116:36">payload_size</name> <operator pos:start="116:38" pos:end="116:38">-</operator> <call pos:start="116:40" pos:end="116:65"><name pos:start="116:40" pos:end="116:51">av_fifo_size</name><argument_list pos:start="116:52" pos:end="116:65">(<argument pos:start="116:53" pos:end="116:64"><expr pos:start="116:53" pos:end="116:64"><name pos:start="116:53" pos:end="116:64"><name pos:start="116:53" pos:end="116:58">stream</name><operator pos:start="116:59" pos:end="116:60">-&gt;</operator><name pos:start="116:61" pos:end="116:64">fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line" pos:start="117:9" pos:end="117:62">// first byte does not fit -&gt; reset pts/dts + stuffing</comment>
        <if_stmt pos:start="118:9" pos:end="227:40"><if pos:start="118:9" pos:end="227:40">if<condition pos:start="118:11" pos:end="118:65">(<expr pos:start="118:12" pos:end="118:64"><name pos:start="118:12" pos:end="118:23">payload_size</name> <operator pos:start="118:25" pos:end="118:26">&lt;=</operator> <name pos:start="118:28" pos:end="118:39">trailer_size</name> <operator pos:start="118:41" pos:end="118:42">&amp;&amp;</operator> <name pos:start="118:44" pos:end="118:46">pts</name> <operator pos:start="118:48" pos:end="118:49">!=</operator> <name pos:start="118:51" pos:end="118:64">AV_NOPTS_VALUE</name></expr>)</condition><block pos:start="118:66" pos:end="227:40">{<block_content pos:start="119:13" pos:end="227:40">
            <decl_stmt pos:start="119:13" pos:end="119:32"><decl pos:start="119:13" pos:end="119:31"><type pos:start="119:13" pos:end="119:15"><name pos:start="119:13" pos:end="119:15">int</name></type> <name pos:start="119:17" pos:end="119:29">timestamp_len</name><init pos:start="119:30" pos:end="119:31">=<expr pos:start="119:31" pos:end="119:31"><literal type="number" pos:start="119:31" pos:end="119:31">0</literal></expr></init></decl>;</decl_stmt>
            <if_stmt pos:start="120:13" pos:end="121:35"><if pos:start="120:13" pos:end="121:35">if<condition pos:start="120:15" pos:end="120:26">(<expr pos:start="120:16" pos:end="120:25"><name pos:start="120:16" pos:end="120:18">dts</name> <operator pos:start="120:20" pos:end="120:21">!=</operator> <name pos:start="120:23" pos:end="120:25">pts</name></expr>)</condition><block type="pseudo" pos:start="121:17" pos:end="121:35"><block_content pos:start="121:17" pos:end="121:35">
                <expr_stmt pos:start="121:17" pos:end="121:35"><expr pos:start="121:17" pos:end="121:34"><name pos:start="121:17" pos:end="121:29">timestamp_len</name> <operator pos:start="121:31" pos:end="121:32">+=</operator> <literal type="number" pos:start="121:34" pos:end="121:34">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="122:13" pos:end="123:53"><if pos:start="122:13" pos:end="123:53">if<condition pos:start="122:15" pos:end="122:37">(<expr pos:start="122:16" pos:end="122:36"><name pos:start="122:16" pos:end="122:18">pts</name> <operator pos:start="122:20" pos:end="122:21">!=</operator> <name pos:start="122:23" pos:end="122:36">AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo" pos:start="123:17" pos:end="123:53"><block_content pos:start="123:17" pos:end="123:53">
                <expr_stmt pos:start="123:17" pos:end="123:53"><expr pos:start="123:17" pos:end="123:52"><name pos:start="123:17" pos:end="123:29">timestamp_len</name> <operator pos:start="123:31" pos:end="123:32">+=</operator> <ternary pos:start="123:34" pos:end="123:52"><condition pos:start="123:34" pos:end="123:46"><expr pos:start="123:34" pos:end="123:44"><name pos:start="123:34" pos:end="123:44"><name pos:start="123:34" pos:end="123:34">s</name><operator pos:start="123:35" pos:end="123:36">-&gt;</operator><name pos:start="123:37" pos:end="123:44">is_mpeg2</name></name></expr> ?</condition><then pos:start="123:48" pos:end="123:48"> <expr pos:start="123:48" pos:end="123:48"><literal type="number" pos:start="123:48" pos:end="123:48">5</literal></expr> </then><else pos:start="123:50" pos:end="123:52">: <expr pos:start="123:52" pos:end="123:52"><literal type="number" pos:start="123:52" pos:end="123:52">4</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="124:13" pos:end="124:36"><expr pos:start="124:13" pos:end="124:35"><name pos:start="124:13" pos:end="124:15">pts</name><operator pos:start="124:16" pos:end="124:16">=</operator><name pos:start="124:17" pos:end="124:19">dts</name><operator pos:start="124:20" pos:end="124:20">=</operator> <name pos:start="124:22" pos:end="124:35">AV_NOPTS_VALUE</name></expr>;</expr_stmt>
            <expr_stmt pos:start="125:13" pos:end="125:40"><expr pos:start="125:13" pos:end="125:39"><name pos:start="125:13" pos:end="125:22">header_len</name> <operator pos:start="125:24" pos:end="125:25">-=</operator> <name pos:start="125:27" pos:end="125:39">timestamp_len</name></expr>;</expr_stmt>
            <if_stmt pos:start="126:13" pos:end="227:40"><if pos:start="126:13" pos:end="129:13">if <condition pos:start="126:16" pos:end="126:50">(<expr pos:start="126:17" pos:end="126:49"><name pos:start="126:17" pos:end="126:25"><name pos:start="126:17" pos:end="126:17">s</name><operator pos:start="126:18" pos:end="126:19">-&gt;</operator><name pos:start="126:20" pos:end="126:25">is_dvd</name></name> <operator pos:start="126:27" pos:end="126:28">&amp;&amp;</operator> <name pos:start="126:30" pos:end="126:49"><name pos:start="126:30" pos:end="126:35">stream</name><operator pos:start="126:36" pos:end="126:37">-&gt;</operator><name pos:start="126:38" pos:end="126:49">align_iframe</name></name></expr>)</condition> <block pos:start="126:52" pos:end="129:13">{<block_content pos:start="127:17" pos:end="128:46">
                <expr_stmt pos:start="127:17" pos:end="127:50"><expr pos:start="127:17" pos:end="127:49"><name pos:start="127:17" pos:end="127:32">pad_packet_bytes</name> <operator pos:start="127:34" pos:end="127:35">+=</operator> <name pos:start="127:37" pos:end="127:49">timestamp_len</name></expr>;</expr_stmt>
                <expr_stmt pos:start="128:17" pos:end="128:46"><expr pos:start="128:17" pos:end="128:45"><name pos:start="128:17" pos:end="128:27">packet_size</name>  <operator pos:start="128:30" pos:end="128:31">-=</operator> <name pos:start="128:33" pos:end="128:45">timestamp_len</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="129:15" pos:end="227:40">else <block pos:start="129:20" pos:end="227:40">{<block_content pos:start="130:17" pos:end="227:40">
                <expr_stmt pos:start="130:17" pos:end="130:46"><expr pos:start="130:17" pos:end="130:45"><name pos:start="130:17" pos:end="130:28">payload_size</name> <operator pos:start="130:30" pos:end="130:31">+=</operator> <name pos:start="130:33" pos:end="130:45">timestamp_len</name></expr>;</expr_stmt>
            <expr_stmt pos:start="131:13" pos:end="131:43"><expr pos:start="131:13" pos:end="131:42"><name pos:start="131:13" pos:end="131:25">stuffing_size</name> <operator pos:start="131:27" pos:end="131:28">+=</operator> <name pos:start="131:30" pos:end="131:42">timestamp_len</name></expr>;</expr_stmt>
            <if_stmt pos:start="132:13" pos:end="133:61"><if pos:start="132:13" pos:end="133:61">if<condition pos:start="132:15" pos:end="132:43">(<expr pos:start="132:16" pos:end="132:42"><name pos:start="132:16" pos:end="132:27">payload_size</name> <operator pos:start="132:29" pos:end="132:29">&gt;</operator> <name pos:start="132:31" pos:end="132:42">trailer_size</name></expr>)</condition><block type="pseudo" pos:start="133:17" pos:end="133:61"><block_content pos:start="133:17" pos:end="133:61">
                <expr_stmt pos:start="133:17" pos:end="133:61"><expr pos:start="133:17" pos:end="133:60"><name pos:start="133:17" pos:end="133:29">stuffing_size</name> <operator pos:start="133:31" pos:end="133:32">+=</operator> <name pos:start="133:34" pos:end="133:45">payload_size</name> <operator pos:start="133:47" pos:end="133:47">-</operator> <name pos:start="133:49" pos:end="133:60">trailer_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="134:9" pos:end="227:40"><if pos:start="134:9" pos:end="227:40">if <condition pos:start="134:12" pos:end="134:58">(<expr pos:start="134:13" pos:end="134:57"><name pos:start="134:13" pos:end="134:28">pad_packet_bytes</name> <operator pos:start="134:30" pos:end="134:30">&gt;</operator> <literal type="number" pos:start="134:32" pos:end="134:32">0</literal> <operator pos:start="134:34" pos:end="134:35">&amp;&amp;</operator> <name pos:start="134:37" pos:end="134:52">pad_packet_bytes</name> <operator pos:start="134:54" pos:end="134:55">&lt;=</operator> <literal type="number" pos:start="134:57" pos:end="134:57">7</literal></expr>)</condition> <block pos:start="134:60" pos:end="227:40">{<block_content pos:start="135:13" pos:end="227:40"> <comment type="line" pos:start="134:62" pos:end="134:98">// can't use padding, so use stuffing</comment>
            <expr_stmt pos:start="135:13" pos:end="135:44"><expr pos:start="135:13" pos:end="135:43"><name pos:start="135:13" pos:end="135:23">packet_size</name> <operator pos:start="135:25" pos:end="135:26">+=</operator> <name pos:start="135:28" pos:end="135:43">pad_packet_bytes</name></expr>;</expr_stmt>
            <expr_stmt pos:start="136:13" pos:end="136:45"><expr pos:start="136:13" pos:end="136:44"><name pos:start="136:13" pos:end="136:24">payload_size</name> <operator pos:start="136:26" pos:end="136:27">+=</operator> <name pos:start="136:29" pos:end="136:44">pad_packet_bytes</name></expr>;</expr_stmt> <comment type="line" pos:start="136:47" pos:end="136:77">// undo the previous adjustment</comment>
            <if_stmt pos:start="137:13" pos:end="227:40"><if pos:start="137:13" pos:end="139:13">if <condition pos:start="137:16" pos:end="137:34">(<expr pos:start="137:17" pos:end="137:33"><name pos:start="137:17" pos:end="137:29">stuffing_size</name> <operator pos:start="137:31" pos:end="137:31">&lt;</operator> <literal type="number" pos:start="137:33" pos:end="137:33">0</literal></expr>)</condition> <block pos:start="137:36" pos:end="139:13">{<block_content pos:start="138:17" pos:end="138:50">
                <expr_stmt pos:start="138:17" pos:end="138:50"><expr pos:start="138:17" pos:end="138:49"><name pos:start="138:17" pos:end="138:29">stuffing_size</name>  <operator pos:start="138:32" pos:end="138:32">=</operator> <name pos:start="138:34" pos:end="138:49">pad_packet_bytes</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else pos:start="139:15" pos:end="227:40">else <block pos:start="139:20" pos:end="227:40">{<block_content pos:start="140:17" pos:end="227:40">
                <expr_stmt pos:start="140:17" pos:end="140:50"><expr pos:start="140:17" pos:end="140:49"><name pos:start="140:17" pos:end="140:29">stuffing_size</name> <operator pos:start="140:31" pos:end="140:32">+=</operator> <name pos:start="140:34" pos:end="140:49">pad_packet_bytes</name></expr>;</expr_stmt>
            <expr_stmt pos:start="141:13" pos:end="141:33"><expr pos:start="141:13" pos:end="141:32"><name pos:start="141:13" pos:end="141:28">pad_packet_bytes</name> <operator pos:start="141:30" pos:end="141:30">=</operator> <literal type="number" pos:start="141:32" pos:end="141:32">0</literal></expr>;</expr_stmt>
        <if_stmt pos:start="142:9" pos:end="143:30"><if pos:start="142:9" pos:end="143:30">if <condition pos:start="142:12" pos:end="142:30">(<expr pos:start="142:13" pos:end="142:29"><name pos:start="142:13" pos:end="142:25">stuffing_size</name> <operator pos:start="142:27" pos:end="142:27">&lt;</operator> <literal type="number" pos:start="142:29" pos:end="142:29">0</literal></expr>)</condition><block type="pseudo" pos:start="143:13" pos:end="143:30"><block_content pos:start="143:13" pos:end="143:30">
            <expr_stmt pos:start="143:13" pos:end="143:30"><expr pos:start="143:13" pos:end="143:29"><name pos:start="143:13" pos:end="143:25">stuffing_size</name> <operator pos:start="143:27" pos:end="143:27">=</operator> <literal type="number" pos:start="143:29" pos:end="143:29">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt pos:start="144:9" pos:end="227:40"><if pos:start="144:9" pos:end="227:40">if <condition pos:start="144:12" pos:end="144:31">(<expr pos:start="144:13" pos:end="144:30"><name pos:start="144:13" pos:end="144:25">stuffing_size</name> <operator pos:start="144:27" pos:end="144:27">&gt;</operator> <literal type="number" pos:start="144:29" pos:end="144:30">16</literal></expr>)</condition> <block pos:start="144:33" pos:end="227:40">{<block_content pos:start="145:13" pos:end="227:40">    <comment type="block" pos:start="144:38" pos:end="144:73">/*&lt;=16 for MPEG-1, &lt;=32 for MPEG-2*/</comment>
            <expr_stmt pos:start="145:13" pos:end="145:46"><expr pos:start="145:13" pos:end="145:45"><name pos:start="145:13" pos:end="145:28">pad_packet_bytes</name> <operator pos:start="145:30" pos:end="145:31">+=</operator> <name pos:start="145:33" pos:end="145:45">stuffing_size</name></expr>;</expr_stmt>
            <expr_stmt pos:start="146:13" pos:end="146:46"><expr pos:start="146:13" pos:end="146:45"><name pos:start="146:13" pos:end="146:23">packet_size</name>      <operator pos:start="146:30" pos:end="146:31">-=</operator> <name pos:start="146:33" pos:end="146:45">stuffing_size</name></expr>;</expr_stmt>
            <expr_stmt pos:start="147:13" pos:end="147:46"><expr pos:start="147:13" pos:end="147:45"><name pos:start="147:13" pos:end="147:24">payload_size</name>     <operator pos:start="147:30" pos:end="147:31">-=</operator> <name pos:start="147:33" pos:end="147:45">stuffing_size</name></expr>;</expr_stmt>
            <expr_stmt pos:start="148:13" pos:end="148:30"><expr pos:start="148:13" pos:end="148:29"><name pos:start="148:13" pos:end="148:25">stuffing_size</name> <operator pos:start="148:27" pos:end="148:27">=</operator> <literal type="number" pos:start="148:29" pos:end="148:29">0</literal></expr>;</expr_stmt>
        <expr_stmt pos:start="149:9" pos:end="149:76"><expr pos:start="149:9" pos:end="149:75"><name pos:start="149:9" pos:end="149:17">nb_frames</name><operator pos:start="149:18" pos:end="149:18">=</operator> <call pos:start="149:20" pos:end="149:75"><name pos:start="149:20" pos:end="149:32">get_nb_frames</name><argument_list pos:start="149:33" pos:end="149:75">(<argument pos:start="149:34" pos:end="149:36"><expr pos:start="149:34" pos:end="149:36"><name pos:start="149:34" pos:end="149:36">ctx</name></expr></argument>, <argument pos:start="149:39" pos:end="149:44"><expr pos:start="149:39" pos:end="149:44"><name pos:start="149:39" pos:end="149:44">stream</name></expr></argument>, <argument pos:start="149:47" pos:end="149:74"><expr pos:start="149:47" pos:end="149:74"><name pos:start="149:47" pos:end="149:58">payload_size</name> <operator pos:start="149:60" pos:end="149:60">-</operator> <name pos:start="149:62" pos:end="149:74">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="150:9" pos:end="150:38"><expr pos:start="150:9" pos:end="150:37"><call pos:start="150:9" pos:end="150:37"><name pos:start="150:9" pos:end="150:17">avio_wb32</name><argument_list pos:start="150:18" pos:end="150:37">(<argument pos:start="150:19" pos:end="150:25"><expr pos:start="150:19" pos:end="150:25"><name pos:start="150:19" pos:end="150:25"><name pos:start="150:19" pos:end="150:21">ctx</name><operator pos:start="150:22" pos:end="150:23">-&gt;</operator><name pos:start="150:24" pos:end="150:25">pb</name></name></expr></argument>, <argument pos:start="150:28" pos:end="150:36"><expr pos:start="150:28" pos:end="150:36"><name pos:start="150:28" pos:end="150:36">startcode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="151:9" pos:end="151:40"><expr pos:start="151:9" pos:end="151:39"><call pos:start="151:9" pos:end="151:39"><name pos:start="151:9" pos:end="151:17">avio_wb16</name><argument_list pos:start="151:18" pos:end="151:39">(<argument pos:start="151:19" pos:end="151:25"><expr pos:start="151:19" pos:end="151:25"><name pos:start="151:19" pos:end="151:25"><name pos:start="151:19" pos:end="151:21">ctx</name><operator pos:start="151:22" pos:end="151:23">-&gt;</operator><name pos:start="151:24" pos:end="151:25">pb</name></name></expr></argument>, <argument pos:start="151:28" pos:end="151:38"><expr pos:start="151:28" pos:end="151:38"><name pos:start="151:28" pos:end="151:38">packet_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="152:9" pos:end="154:39"><if pos:start="152:9" pos:end="154:39">if <condition pos:start="152:12" pos:end="152:25">(<expr pos:start="152:13" pos:end="152:24"><operator pos:start="152:13" pos:end="152:13">!</operator><name pos:start="152:14" pos:end="152:24"><name pos:start="152:14" pos:end="152:14">s</name><operator pos:start="152:15" pos:end="152:16">-&gt;</operator><name pos:start="152:17" pos:end="152:24">is_mpeg2</name></name></expr>)</condition><block type="pseudo" pos:start="153:13" pos:end="154:39"><block_content pos:start="153:13" pos:end="154:39">
            <for pos:start="153:13" pos:end="154:39">for<control pos:start="153:16" pos:end="153:40">(<init pos:start="153:17" pos:end="153:20"><expr pos:start="153:17" pos:end="153:19"><name pos:start="153:17" pos:end="153:17">i</name><operator pos:start="153:18" pos:end="153:18">=</operator><literal type="number" pos:start="153:19" pos:end="153:19">0</literal></expr>;</init><condition pos:start="153:21" pos:end="153:36"><expr pos:start="153:21" pos:end="153:35"><name pos:start="153:21" pos:end="153:21">i</name><operator pos:start="153:22" pos:end="153:22">&lt;</operator><name pos:start="153:23" pos:end="153:35">stuffing_size</name></expr>;</condition><incr pos:start="153:37" pos:end="153:39"><expr pos:start="153:37" pos:end="153:39"><name pos:start="153:37" pos:end="153:37">i</name><operator pos:start="153:38" pos:end="153:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="154:17" pos:end="154:39"><block_content pos:start="154:17" pos:end="154:39">
                <expr_stmt pos:start="154:17" pos:end="154:39"><expr pos:start="154:17" pos:end="154:38"><call pos:start="154:17" pos:end="154:38"><name pos:start="154:17" pos:end="154:23">avio_w8</name><argument_list pos:start="154:24" pos:end="154:38">(<argument pos:start="154:25" pos:end="154:31"><expr pos:start="154:25" pos:end="154:31"><name pos:start="154:25" pos:end="154:31"><name pos:start="154:25" pos:end="154:27">ctx</name><operator pos:start="154:28" pos:end="154:29">-&gt;</operator><name pos:start="154:30" pos:end="154:31">pb</name></name></expr></argument>, <argument pos:start="154:34" pos:end="154:37"><expr pos:start="154:34" pos:end="154:37"><literal type="number" pos:start="154:34" pos:end="154:37">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
        <if_stmt pos:start="155:9" pos:end="227:40"><if pos:start="155:9" pos:end="227:40">if <condition pos:start="155:12" pos:end="155:24">(<expr pos:start="155:13" pos:end="155:23"><name pos:start="155:13" pos:end="155:23"><name pos:start="155:13" pos:end="155:13">s</name><operator pos:start="155:14" pos:end="155:15">-&gt;</operator><name pos:start="155:16" pos:end="155:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="155:26" pos:end="227:40">{<block_content pos:start="156:13" pos:end="227:40">
            <expr_stmt pos:start="156:13" pos:end="156:35"><expr pos:start="156:13" pos:end="156:34"><call pos:start="156:13" pos:end="156:34"><name pos:start="156:13" pos:end="156:19">avio_w8</name><argument_list pos:start="156:20" pos:end="156:34">(<argument pos:start="156:21" pos:end="156:27"><expr pos:start="156:21" pos:end="156:27"><name pos:start="156:21" pos:end="156:27"><name pos:start="156:21" pos:end="156:23">ctx</name><operator pos:start="156:24" pos:end="156:25">-&gt;</operator><name pos:start="156:26" pos:end="156:27">pb</name></name></expr></argument>, <argument pos:start="156:30" pos:end="156:33"><expr pos:start="156:30" pos:end="156:33"><literal type="number" pos:start="156:30" pos:end="156:33">0x80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="156:37" pos:end="156:50">/* mpeg2 id */</comment>
            <expr_stmt pos:start="157:13" pos:end="157:24"><expr pos:start="157:13" pos:end="157:23"><name pos:start="157:13" pos:end="157:21">pes_flags</name><operator pos:start="157:22" pos:end="157:22">=</operator><literal type="number" pos:start="157:23" pos:end="157:23">0</literal></expr>;</expr_stmt>
            <if_stmt pos:start="158:13" pos:end="227:40"><if pos:start="158:13" pos:end="227:40">if <condition pos:start="158:16" pos:end="158:38">(<expr pos:start="158:17" pos:end="158:37"><name pos:start="158:17" pos:end="158:19">pts</name> <operator pos:start="158:21" pos:end="158:22">!=</operator> <name pos:start="158:24" pos:end="158:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="158:40" pos:end="227:40">{<block_content pos:start="159:17" pos:end="227:40">
                <expr_stmt pos:start="159:17" pos:end="159:34"><expr pos:start="159:17" pos:end="159:33"><name pos:start="159:17" pos:end="159:25">pes_flags</name> <operator pos:start="159:27" pos:end="159:28">|=</operator> <literal type="number" pos:start="159:30" pos:end="159:33">0x80</literal></expr>;</expr_stmt>
                <if_stmt pos:start="160:17" pos:end="161:38"><if pos:start="160:17" pos:end="161:38">if <condition pos:start="160:20" pos:end="160:31">(<expr pos:start="160:21" pos:end="160:30"><name pos:start="160:21" pos:end="160:23">dts</name> <operator pos:start="160:25" pos:end="160:26">!=</operator> <name pos:start="160:28" pos:end="160:30">pts</name></expr>)</condition><block type="pseudo" pos:start="161:21" pos:end="161:38"><block_content pos:start="161:21" pos:end="161:38">
                    <expr_stmt pos:start="161:21" pos:end="161:38"><expr pos:start="161:21" pos:end="161:37"><name pos:start="161:21" pos:end="161:29">pes_flags</name> <operator pos:start="161:31" pos:end="161:32">|=</operator> <literal type="number" pos:start="161:34" pos:end="161:37">0x40</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <comment type="block" pos:start="162:13" pos:end="165:44">/* Both the MPEG-2 and the SVCD standards demand that the
               P-STD_buffer_size field be included in the first packet of
               every stream. (see SVCD standard p. 26 V.2.3.1 and V.2.3.2
               and MPEG-2 standard 2.7.7) */</comment>
            <if_stmt pos:start="166:13" pos:end="167:34"><if pos:start="166:13" pos:end="167:34">if <condition pos:start="166:16" pos:end="166:43">(<expr pos:start="166:17" pos:end="166:42"><name pos:start="166:17" pos:end="166:37"><name pos:start="166:17" pos:end="166:22">stream</name><operator pos:start="166:23" pos:end="166:24">-&gt;</operator><name pos:start="166:25" pos:end="166:37">packet_number</name></name> <operator pos:start="166:39" pos:end="166:40">==</operator> <literal type="number" pos:start="166:42" pos:end="166:42">0</literal></expr>)</condition><block type="pseudo" pos:start="167:17" pos:end="167:34"><block_content pos:start="167:17" pos:end="167:34">
                <expr_stmt pos:start="167:17" pos:end="167:34"><expr pos:start="167:17" pos:end="167:33"><name pos:start="167:17" pos:end="167:25">pes_flags</name> <operator pos:start="167:27" pos:end="167:28">|=</operator> <literal type="number" pos:start="167:30" pos:end="167:33">0x01</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt pos:start="168:13" pos:end="168:40"><expr pos:start="168:13" pos:end="168:39"><call pos:start="168:13" pos:end="168:39"><name pos:start="168:13" pos:end="168:19">avio_w8</name><argument_list pos:start="168:20" pos:end="168:39">(<argument pos:start="168:21" pos:end="168:27"><expr pos:start="168:21" pos:end="168:27"><name pos:start="168:21" pos:end="168:27"><name pos:start="168:21" pos:end="168:23">ctx</name><operator pos:start="168:24" pos:end="168:25">-&gt;</operator><name pos:start="168:26" pos:end="168:27">pb</name></name></expr></argument>, <argument pos:start="168:30" pos:end="168:38"><expr pos:start="168:30" pos:end="168:38"><name pos:start="168:30" pos:end="168:38">pes_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="168:42" pos:end="168:52">/* flags */</comment>
            <expr_stmt pos:start="169:13" pos:end="169:61"><expr pos:start="169:13" pos:end="169:60"><call pos:start="169:13" pos:end="169:60"><name pos:start="169:13" pos:end="169:19">avio_w8</name><argument_list pos:start="169:20" pos:end="169:60">(<argument pos:start="169:21" pos:end="169:27"><expr pos:start="169:21" pos:end="169:27"><name pos:start="169:21" pos:end="169:27"><name pos:start="169:21" pos:end="169:23">ctx</name><operator pos:start="169:24" pos:end="169:25">-&gt;</operator><name pos:start="169:26" pos:end="169:27">pb</name></name></expr></argument>, <argument pos:start="169:30" pos:end="169:59"><expr pos:start="169:30" pos:end="169:59"><name pos:start="169:30" pos:end="169:39">header_len</name> <operator pos:start="169:41" pos:end="169:41">-</operator> <literal type="number" pos:start="169:43" pos:end="169:45">3</literal> <operator pos:start="169:45" pos:end="169:45">+</operator> <name pos:start="169:47" pos:end="169:59">stuffing_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="170:13" pos:end="171:78"><if pos:start="170:13" pos:end="171:78">if <condition pos:start="170:16" pos:end="170:33">(<expr pos:start="170:17" pos:end="170:32"><name pos:start="170:17" pos:end="170:25">pes_flags</name> <operator pos:start="170:27" pos:end="170:27">&amp;</operator> <literal type="number" pos:start="170:29" pos:end="170:32">0x80</literal></expr>)</condition><block type="pseudo" pos:start="171:17" pos:end="171:78"><block_content pos:start="171:17" pos:end="171:78">  <comment type="block" pos:start="170:36" pos:end="170:48">/*write pts*/</comment>
                <expr_stmt pos:start="171:17" pos:end="171:78"><expr pos:start="171:17" pos:end="171:77"><call pos:start="171:17" pos:end="171:77"><name pos:start="171:17" pos:end="171:29">put_timestamp</name><argument_list pos:start="171:30" pos:end="171:77">(<argument pos:start="171:31" pos:end="171:37"><expr pos:start="171:31" pos:end="171:37"><name pos:start="171:31" pos:end="171:37"><name pos:start="171:31" pos:end="171:33">ctx</name><operator pos:start="171:34" pos:end="171:35">-&gt;</operator><name pos:start="171:36" pos:end="171:37">pb</name></name></expr></argument>, <argument pos:start="171:40" pos:end="171:71"><expr pos:start="171:40" pos:end="171:71"><ternary pos:start="171:40" pos:end="171:71"><condition pos:start="171:40" pos:end="171:59"><expr pos:start="171:40" pos:end="171:57"><operator pos:start="171:40" pos:end="171:40">(</operator><name pos:start="171:41" pos:end="171:49">pes_flags</name> <operator pos:start="171:51" pos:end="171:51">&amp;</operator> <literal type="number" pos:start="171:53" pos:end="171:56">0x40</literal><operator pos:start="171:57" pos:end="171:57">)</operator></expr> ?</condition><then pos:start="171:61" pos:end="171:64"> <expr pos:start="171:61" pos:end="171:64"><literal type="number" pos:start="171:61" pos:end="171:64">0x03</literal></expr> </then><else pos:start="171:66" pos:end="171:71">: <expr pos:start="171:68" pos:end="171:71"><literal type="number" pos:start="171:68" pos:end="171:71">0x02</literal></expr></else></ternary></expr></argument>, <argument pos:start="171:74" pos:end="171:76"><expr pos:start="171:74" pos:end="171:76"><name pos:start="171:74" pos:end="171:76">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="172:13" pos:end="173:50"><if pos:start="172:13" pos:end="173:50">if <condition pos:start="172:16" pos:end="172:33">(<expr pos:start="172:17" pos:end="172:32"><name pos:start="172:17" pos:end="172:25">pes_flags</name> <operator pos:start="172:27" pos:end="172:27">&amp;</operator> <literal type="number" pos:start="172:29" pos:end="172:32">0x40</literal></expr>)</condition><block type="pseudo" pos:start="173:17" pos:end="173:50"><block_content pos:start="173:17" pos:end="173:50">  <comment type="block" pos:start="172:36" pos:end="172:48">/*write dts*/</comment>
                <expr_stmt pos:start="173:17" pos:end="173:50"><expr pos:start="173:17" pos:end="173:49"><call pos:start="173:17" pos:end="173:49"><name pos:start="173:17" pos:end="173:29">put_timestamp</name><argument_list pos:start="173:30" pos:end="173:49">(<argument pos:start="173:31" pos:end="173:37"><expr pos:start="173:31" pos:end="173:37"><name pos:start="173:31" pos:end="173:37"><name pos:start="173:31" pos:end="173:33">ctx</name><operator pos:start="173:34" pos:end="173:35">-&gt;</operator><name pos:start="173:36" pos:end="173:37">pb</name></name></expr></argument>, <argument pos:start="173:40" pos:end="173:43"><expr pos:start="173:40" pos:end="173:43"><literal type="number" pos:start="173:40" pos:end="173:43">0x01</literal></expr></argument>, <argument pos:start="173:46" pos:end="173:48"><expr pos:start="173:46" pos:end="173:48"><name pos:start="173:46" pos:end="173:48">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt pos:start="174:13" pos:end="227:40"><if pos:start="174:13" pos:end="181:9">if <condition pos:start="174:16" pos:end="174:33">(<expr pos:start="174:17" pos:end="174:32"><name pos:start="174:17" pos:end="174:25">pes_flags</name> <operator pos:start="174:27" pos:end="174:27">&amp;</operator> <literal type="number" pos:start="174:29" pos:end="174:32">0x01</literal></expr>)</condition> <block pos:start="174:35" pos:end="181:9">{<block_content pos:start="175:17" pos:end="180:78">  <comment type="block" pos:start="174:38" pos:end="174:60">/*write pes extension*/</comment>
                <expr_stmt pos:start="175:17" pos:end="175:39"><expr pos:start="175:17" pos:end="175:38"><call pos:start="175:17" pos:end="175:38"><name pos:start="175:17" pos:end="175:23">avio_w8</name><argument_list pos:start="175:24" pos:end="175:38">(<argument pos:start="175:25" pos:end="175:31"><expr pos:start="175:25" pos:end="175:31"><name pos:start="175:25" pos:end="175:31"><name pos:start="175:25" pos:end="175:27">ctx</name><operator pos:start="175:28" pos:end="175:29">-&gt;</operator><name pos:start="175:30" pos:end="175:31">pb</name></name></expr></argument>, <argument pos:start="175:34" pos:end="175:37"><expr pos:start="175:34" pos:end="175:37"><literal type="number" pos:start="175:34" pos:end="175:37">0x10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="175:41" pos:end="175:51">/* flags */</comment>
                <comment type="block" pos:start="176:17" pos:end="176:39">/* P-STD buffer info */</comment>
                <if_stmt pos:start="177:17" pos:end="180:78"><if pos:start="177:17" pos:end="178:78">if <condition pos:start="177:20" pos:end="177:44">(<expr pos:start="177:21" pos:end="177:43"><operator pos:start="177:21" pos:end="177:21">(</operator><name pos:start="177:22" pos:end="177:23">id</name> <operator pos:start="177:25" pos:end="177:25">&amp;</operator> <literal type="number" pos:start="177:27" pos:end="177:30">0xe0</literal><operator pos:start="177:31" pos:end="177:31">)</operator> <operator pos:start="177:33" pos:end="177:34">==</operator> <name pos:start="177:36" pos:end="177:43">AUDIO_ID</name></expr>)</condition><block type="pseudo" pos:start="178:21" pos:end="178:78"><block_content pos:start="178:21" pos:end="178:78">
                    <expr_stmt pos:start="178:21" pos:end="178:78"><expr pos:start="178:21" pos:end="178:77"><call pos:start="178:21" pos:end="178:77"><name pos:start="178:21" pos:end="178:29">avio_wb16</name><argument_list pos:start="178:30" pos:end="178:77">(<argument pos:start="178:31" pos:end="178:37"><expr pos:start="178:31" pos:end="178:37"><name pos:start="178:31" pos:end="178:37"><name pos:start="178:31" pos:end="178:33">ctx</name><operator pos:start="178:34" pos:end="178:35">-&gt;</operator><name pos:start="178:36" pos:end="178:37">pb</name></name></expr></argument>, <argument pos:start="178:40" pos:end="178:76"><expr pos:start="178:40" pos:end="178:76"><literal type="number" pos:start="178:40" pos:end="178:45">0x4000</literal> <operator pos:start="178:47" pos:end="178:47">|</operator> <name pos:start="178:49" pos:end="178:71"><name pos:start="178:49" pos:end="178:54">stream</name><operator pos:start="178:55" pos:end="178:56">-&gt;</operator><name pos:start="178:57" pos:end="178:71">max_buffer_size</name></name><operator pos:start="178:72" pos:end="178:72">/</operator> <literal type="number" pos:start="178:74" pos:end="178:76">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else pos:start="179:17" pos:end="180:78">else<block type="pseudo" pos:start="180:21" pos:end="180:78"><block_content pos:start="180:21" pos:end="180:78">
                    <expr_stmt pos:start="180:21" pos:end="180:78"><expr pos:start="180:21" pos:end="180:77"><call pos:start="180:21" pos:end="180:77"><name pos:start="180:21" pos:end="180:29">avio_wb16</name><argument_list pos:start="180:30" pos:end="180:77">(<argument pos:start="180:31" pos:end="180:37"><expr pos:start="180:31" pos:end="180:37"><name pos:start="180:31" pos:end="180:37"><name pos:start="180:31" pos:end="180:33">ctx</name><operator pos:start="180:34" pos:end="180:35">-&gt;</operator><name pos:start="180:36" pos:end="180:37">pb</name></name></expr></argument>, <argument pos:start="180:40" pos:end="180:76"><expr pos:start="180:40" pos:end="180:76"><literal type="number" pos:start="180:40" pos:end="180:45">0x6000</literal> <operator pos:start="180:47" pos:end="180:47">|</operator> <name pos:start="180:49" pos:end="180:71"><name pos:start="180:49" pos:end="180:54">stream</name><operator pos:start="180:55" pos:end="180:56">-&gt;</operator><name pos:start="180:57" pos:end="180:71">max_buffer_size</name></name><operator pos:start="180:72" pos:end="180:72">/</operator><literal type="number" pos:start="180:73" pos:end="180:76">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else pos:start="181:11" pos:end="227:40">else <block pos:start="181:16" pos:end="227:40">{<block_content pos:start="182:13" pos:end="227:40">
            <if_stmt pos:start="182:13" pos:end="227:40"><if pos:start="182:13" pos:end="227:40">if <condition pos:start="182:16" pos:end="182:38">(<expr pos:start="182:17" pos:end="182:37"><name pos:start="182:17" pos:end="182:19">pts</name> <operator pos:start="182:21" pos:end="182:22">!=</operator> <name pos:start="182:24" pos:end="182:37">AV_NOPTS_VALUE</name></expr>)</condition> <block pos:start="182:40" pos:end="227:40">{<block_content pos:start="183:17" pos:end="227:40">
                <if_stmt pos:start="183:17" pos:end="188:13"><if pos:start="183:17" pos:end="186:17">if <condition pos:start="183:20" pos:end="183:31">(<expr pos:start="183:21" pos:end="183:30"><name pos:start="183:21" pos:end="183:23">dts</name> <operator pos:start="183:25" pos:end="183:26">!=</operator> <name pos:start="183:28" pos:end="183:30">pts</name></expr>)</condition> <block pos:start="183:33" pos:end="186:17">{<block_content pos:start="184:21" pos:end="185:54">
                    <expr_stmt pos:start="184:21" pos:end="184:54"><expr pos:start="184:21" pos:end="184:53"><call pos:start="184:21" pos:end="184:53"><name pos:start="184:21" pos:end="184:33">put_timestamp</name><argument_list pos:start="184:34" pos:end="184:53">(<argument pos:start="184:35" pos:end="184:41"><expr pos:start="184:35" pos:end="184:41"><name pos:start="184:35" pos:end="184:41"><name pos:start="184:35" pos:end="184:37">ctx</name><operator pos:start="184:38" pos:end="184:39">-&gt;</operator><name pos:start="184:40" pos:end="184:41">pb</name></name></expr></argument>, <argument pos:start="184:44" pos:end="184:47"><expr pos:start="184:44" pos:end="184:47"><literal type="number" pos:start="184:44" pos:end="184:47">0x03</literal></expr></argument>, <argument pos:start="184:50" pos:end="184:52"><expr pos:start="184:50" pos:end="184:52"><name pos:start="184:50" pos:end="184:52">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt pos:start="185:21" pos:end="185:54"><expr pos:start="185:21" pos:end="185:53"><call pos:start="185:21" pos:end="185:53"><name pos:start="185:21" pos:end="185:33">put_timestamp</name><argument_list pos:start="185:34" pos:end="185:53">(<argument pos:start="185:35" pos:end="185:41"><expr pos:start="185:35" pos:end="185:41"><name pos:start="185:35" pos:end="185:41"><name pos:start="185:35" pos:end="185:37">ctx</name><operator pos:start="185:38" pos:end="185:39">-&gt;</operator><name pos:start="185:40" pos:end="185:41">pb</name></name></expr></argument>, <argument pos:start="185:44" pos:end="185:47"><expr pos:start="185:44" pos:end="185:47"><literal type="number" pos:start="185:44" pos:end="185:47">0x01</literal></expr></argument>, <argument pos:start="185:50" pos:end="185:52"><expr pos:start="185:50" pos:end="185:52"><name pos:start="185:50" pos:end="185:52">dts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else pos:start="186:19" pos:end="188:13">else <block pos:start="186:24" pos:end="188:13">{<block_content pos:start="187:21" pos:end="187:54">
                    <expr_stmt pos:start="187:21" pos:end="187:54"><expr pos:start="187:21" pos:end="187:53"><call pos:start="187:21" pos:end="187:53"><name pos:start="187:21" pos:end="187:33">put_timestamp</name><argument_list pos:start="187:34" pos:end="187:53">(<argument pos:start="187:35" pos:end="187:41"><expr pos:start="187:35" pos:end="187:41"><name pos:start="187:35" pos:end="187:41"><name pos:start="187:35" pos:end="187:37">ctx</name><operator pos:start="187:38" pos:end="187:39">-&gt;</operator><name pos:start="187:40" pos:end="187:41">pb</name></name></expr></argument>, <argument pos:start="187:44" pos:end="187:47"><expr pos:start="187:44" pos:end="187:47"><literal type="number" pos:start="187:44" pos:end="187:47">0x02</literal></expr></argument>, <argument pos:start="187:50" pos:end="187:52"><expr pos:start="187:50" pos:end="187:52"><name pos:start="187:50" pos:end="187:52">pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt> <if_stmt pos:start="188:15" pos:end="227:40"><else pos:start="188:15" pos:end="227:40">else <block pos:start="188:20" pos:end="227:40">{<block_content pos:start="189:17" pos:end="227:40">
                <expr_stmt pos:start="189:17" pos:end="189:39"><expr pos:start="189:17" pos:end="189:38"><call pos:start="189:17" pos:end="189:38"><name pos:start="189:17" pos:end="189:23">avio_w8</name><argument_list pos:start="189:24" pos:end="189:38">(<argument pos:start="189:25" pos:end="189:31"><expr pos:start="189:25" pos:end="189:31"><name pos:start="189:25" pos:end="189:31"><name pos:start="189:25" pos:end="189:27">ctx</name><operator pos:start="189:28" pos:end="189:29">-&gt;</operator><name pos:start="189:30" pos:end="189:31">pb</name></name></expr></argument>, <argument pos:start="189:34" pos:end="189:37"><expr pos:start="189:34" pos:end="189:37"><literal type="number" pos:start="189:34" pos:end="189:37">0x0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt pos:start="190:9" pos:end="227:40"><if pos:start="190:9" pos:end="227:40">if <condition pos:start="190:12" pos:end="190:24">(<expr pos:start="190:13" pos:end="190:23"><name pos:start="190:13" pos:end="190:23"><name pos:start="190:13" pos:end="190:13">s</name><operator pos:start="190:14" pos:end="190:15">-&gt;</operator><name pos:start="190:16" pos:end="190:23">is_mpeg2</name></name></expr>)</condition> <block pos:start="190:26" pos:end="227:40">{<block_content pos:start="193:13" pos:end="227:40">
            <comment type="block" pos:start="191:13" pos:end="192:66">/* special stuffing byte that is always written
               to prevent accidental generation of start codes. */</comment>
            <expr_stmt pos:start="193:13" pos:end="193:35"><expr pos:start="193:13" pos:end="193:34"><call pos:start="193:13" pos:end="193:34"><name pos:start="193:13" pos:end="193:19">avio_w8</name><argument_list pos:start="193:20" pos:end="193:34">(<argument pos:start="193:21" pos:end="193:27"><expr pos:start="193:21" pos:end="193:27"><name pos:start="193:21" pos:end="193:27"><name pos:start="193:21" pos:end="193:23">ctx</name><operator pos:start="193:24" pos:end="193:25">-&gt;</operator><name pos:start="193:26" pos:end="193:27">pb</name></name></expr></argument>, <argument pos:start="193:30" pos:end="193:33"><expr pos:start="193:30" pos:end="193:33"><literal type="number" pos:start="193:30" pos:end="193:33">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for pos:start="194:13" pos:end="195:39">for<control pos:start="194:16" pos:end="194:40">(<init pos:start="194:17" pos:end="194:20"><expr pos:start="194:17" pos:end="194:19"><name pos:start="194:17" pos:end="194:17">i</name><operator pos:start="194:18" pos:end="194:18">=</operator><literal type="number" pos:start="194:19" pos:end="194:19">0</literal></expr>;</init><condition pos:start="194:21" pos:end="194:36"><expr pos:start="194:21" pos:end="194:35"><name pos:start="194:21" pos:end="194:21">i</name><operator pos:start="194:22" pos:end="194:22">&lt;</operator><name pos:start="194:23" pos:end="194:35">stuffing_size</name></expr>;</condition><incr pos:start="194:37" pos:end="194:39"><expr pos:start="194:37" pos:end="194:39"><name pos:start="194:37" pos:end="194:37">i</name><operator pos:start="194:38" pos:end="194:39">++</operator></expr></incr>)</control><block type="pseudo" pos:start="195:17" pos:end="195:39"><block_content pos:start="195:17" pos:end="195:39">
                <expr_stmt pos:start="195:17" pos:end="195:39"><expr pos:start="195:17" pos:end="195:38"><call pos:start="195:17" pos:end="195:38"><name pos:start="195:17" pos:end="195:23">avio_w8</name><argument_list pos:start="195:24" pos:end="195:38">(<argument pos:start="195:25" pos:end="195:31"><expr pos:start="195:25" pos:end="195:31"><name pos:start="195:25" pos:end="195:31"><name pos:start="195:25" pos:end="195:27">ctx</name><operator pos:start="195:28" pos:end="195:29">-&gt;</operator><name pos:start="195:30" pos:end="195:31">pb</name></name></expr></argument>, <argument pos:start="195:34" pos:end="195:37"><expr pos:start="195:34" pos:end="195:37"><literal type="number" pos:start="195:34" pos:end="195:37">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <if_stmt pos:start="196:9" pos:end="227:40"><if pos:start="196:9" pos:end="227:40">if <condition pos:start="196:12" pos:end="196:42">(<expr pos:start="196:13" pos:end="196:41"><name pos:start="196:13" pos:end="196:21">startcode</name> <operator pos:start="196:23" pos:end="196:24">==</operator> <name pos:start="196:26" pos:end="196:41">PRIVATE_STREAM_1</name></expr>)</condition> <block pos:start="196:44" pos:end="227:40">{<block_content pos:start="197:13" pos:end="227:40">
            <expr_stmt pos:start="197:13" pos:end="197:33"><expr pos:start="197:13" pos:end="197:32"><call pos:start="197:13" pos:end="197:32"><name pos:start="197:13" pos:end="197:19">avio_w8</name><argument_list pos:start="197:20" pos:end="197:32">(<argument pos:start="197:21" pos:end="197:27"><expr pos:start="197:21" pos:end="197:27"><name pos:start="197:21" pos:end="197:27"><name pos:start="197:21" pos:end="197:23">ctx</name><operator pos:start="197:24" pos:end="197:25">-&gt;</operator><name pos:start="197:26" pos:end="197:27">pb</name></name></expr></argument>, <argument pos:start="197:30" pos:end="197:31"><expr pos:start="197:30" pos:end="197:31"><name pos:start="197:30" pos:end="197:31">id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt pos:start="198:13" pos:end="227:40"><if pos:start="198:13" pos:end="205:13">if <condition pos:start="198:16" pos:end="198:27">(<expr pos:start="198:17" pos:end="198:26"><name pos:start="198:17" pos:end="198:18">id</name> <operator pos:start="198:20" pos:end="198:21">&gt;=</operator> <literal type="number" pos:start="198:23" pos:end="198:26">0xa0</literal></expr>)</condition> <block pos:start="198:29" pos:end="205:13">{<block_content pos:start="200:17" pos:end="204:57">
                <comment type="block" pos:start="199:17" pos:end="199:49">/* LPCM (XXX: check nb_frames) */</comment>
                <expr_stmt pos:start="200:17" pos:end="200:36"><expr pos:start="200:17" pos:end="200:35"><call pos:start="200:17" pos:end="200:35"><name pos:start="200:17" pos:end="200:23">avio_w8</name><argument_list pos:start="200:24" pos:end="200:35">(<argument pos:start="200:25" pos:end="200:31"><expr pos:start="200:25" pos:end="200:31"><name pos:start="200:25" pos:end="200:31"><name pos:start="200:25" pos:end="200:27">ctx</name><operator pos:start="200:28" pos:end="200:29">-&gt;</operator><name pos:start="200:30" pos:end="200:31">pb</name></name></expr></argument>, <argument pos:start="200:34" pos:end="200:34"><expr pos:start="200:34" pos:end="200:34"><literal type="number" pos:start="200:34" pos:end="200:34">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="201:17" pos:end="201:38"><expr pos:start="201:17" pos:end="201:37"><call pos:start="201:17" pos:end="201:37"><name pos:start="201:17" pos:end="201:25">avio_wb16</name><argument_list pos:start="201:26" pos:end="201:37">(<argument pos:start="201:27" pos:end="201:33"><expr pos:start="201:27" pos:end="201:33"><name pos:start="201:27" pos:end="201:33"><name pos:start="201:27" pos:end="201:29">ctx</name><operator pos:start="201:30" pos:end="201:31">-&gt;</operator><name pos:start="201:32" pos:end="201:33">pb</name></name></expr></argument>, <argument pos:start="201:36" pos:end="201:36"><expr pos:start="201:36" pos:end="201:36"><literal type="number" pos:start="201:36" pos:end="201:36">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block" pos:start="201:40" pos:end="201:64">/* skip 3 header bytes */</comment>
                <expr_stmt pos:start="202:17" pos:end="202:57"><expr pos:start="202:17" pos:end="202:56"><call pos:start="202:17" pos:end="202:56"><name pos:start="202:17" pos:end="202:23">avio_w8</name><argument_list pos:start="202:24" pos:end="202:56">(<argument pos:start="202:25" pos:end="202:31"><expr pos:start="202:25" pos:end="202:31"><name pos:start="202:25" pos:end="202:31"><name pos:start="202:25" pos:end="202:27">ctx</name><operator pos:start="202:28" pos:end="202:29">-&gt;</operator><name pos:start="202:30" pos:end="202:31">pb</name></name></expr></argument>, <argument pos:start="202:34" pos:end="202:55"><expr pos:start="202:34" pos:end="202:55"><name pos:start="202:34" pos:end="202:55"><name pos:start="202:34" pos:end="202:39">stream</name><operator pos:start="202:40" pos:end="202:41">-&gt;</operator><name pos:start="202:42" pos:end="202:52">lpcm_header</name><index pos:start="202:53" pos:end="202:55">[<expr pos:start="202:54" pos:end="202:54"><literal type="number" pos:start="202:54" pos:end="202:54">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="203:17" pos:end="203:57"><expr pos:start="203:17" pos:end="203:56"><call pos:start="203:17" pos:end="203:56"><name pos:start="203:17" pos:end="203:23">avio_w8</name><argument_list pos:start="203:24" pos:end="203:56">(<argument pos:start="203:25" pos:end="203:31"><expr pos:start="203:25" pos:end="203:31"><name pos:start="203:25" pos:end="203:31"><name pos:start="203:25" pos:end="203:27">ctx</name><operator pos:start="203:28" pos:end="203:29">-&gt;</operator><name pos:start="203:30" pos:end="203:31">pb</name></name></expr></argument>, <argument pos:start="203:34" pos:end="203:55"><expr pos:start="203:34" pos:end="203:55"><name pos:start="203:34" pos:end="203:55"><name pos:start="203:34" pos:end="203:39">stream</name><operator pos:start="203:40" pos:end="203:41">-&gt;</operator><name pos:start="203:42" pos:end="203:52">lpcm_header</name><index pos:start="203:53" pos:end="203:55">[<expr pos:start="203:54" pos:end="203:54"><literal type="number" pos:start="203:54" pos:end="203:54">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="204:17" pos:end="204:57"><expr pos:start="204:17" pos:end="204:56"><call pos:start="204:17" pos:end="204:56"><name pos:start="204:17" pos:end="204:23">avio_w8</name><argument_list pos:start="204:24" pos:end="204:56">(<argument pos:start="204:25" pos:end="204:31"><expr pos:start="204:25" pos:end="204:31"><name pos:start="204:25" pos:end="204:31"><name pos:start="204:25" pos:end="204:27">ctx</name><operator pos:start="204:28" pos:end="204:29">-&gt;</operator><name pos:start="204:30" pos:end="204:31">pb</name></name></expr></argument>, <argument pos:start="204:34" pos:end="204:55"><expr pos:start="204:34" pos:end="204:55"><name pos:start="204:34" pos:end="204:55"><name pos:start="204:34" pos:end="204:39">stream</name><operator pos:start="204:40" pos:end="204:41">-&gt;</operator><name pos:start="204:42" pos:end="204:52">lpcm_header</name><index pos:start="204:53" pos:end="204:55">[<expr pos:start="204:54" pos:end="204:54"><literal type="number" pos:start="204:54" pos:end="204:54">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <if type="elseif" pos:start="205:15" pos:end="213:5">else if <condition pos:start="205:23" pos:end="205:34">(<expr pos:start="205:24" pos:end="205:33"><name pos:start="205:24" pos:end="205:25">id</name> <operator pos:start="205:27" pos:end="205:28">&gt;=</operator> <literal type="number" pos:start="205:30" pos:end="205:33">0x40</literal></expr>)</condition> <block pos:start="205:36" pos:end="213:5">{<block_content pos:start="207:17" pos:end="212:64">
                <comment type="block" pos:start="206:17" pos:end="206:26">/* AC-3 */</comment>
                <expr_stmt pos:start="207:17" pos:end="207:44"><expr pos:start="207:17" pos:end="207:43"><call pos:start="207:17" pos:end="207:43"><name pos:start="207:17" pos:end="207:23">avio_w8</name><argument_list pos:start="207:24" pos:end="207:43">(<argument pos:start="207:25" pos:end="207:31"><expr pos:start="207:25" pos:end="207:31"><name pos:start="207:25" pos:end="207:31"><name pos:start="207:25" pos:end="207:27">ctx</name><operator pos:start="207:28" pos:end="207:29">-&gt;</operator><name pos:start="207:30" pos:end="207:31">pb</name></name></expr></argument>, <argument pos:start="207:34" pos:end="207:42"><expr pos:start="207:34" pos:end="207:42"><name pos:start="207:34" pos:end="207:42">nb_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt pos:start="208:17" pos:end="208:51"><expr pos:start="208:17" pos:end="208:50"><call pos:start="208:17" pos:end="208:50"><name pos:start="208:17" pos:end="208:25">avio_wb16</name><argument_list pos:start="208:26" pos:end="208:50">(<argument pos:start="208:27" pos:end="208:33"><expr pos:start="208:27" pos:end="208:33"><name pos:start="208:27" pos:end="208:33"><name pos:start="208:27" pos:end="208:29">ctx</name><operator pos:start="208:30" pos:end="208:31">-&gt;</operator><name pos:start="208:32" pos:end="208:33">pb</name></name></expr></argument>, <argument pos:start="208:36" pos:end="208:49"><expr pos:start="208:36" pos:end="208:49"><name pos:start="208:36" pos:end="208:47">trailer_size</name><operator pos:start="208:48" pos:end="208:48">+</operator><literal type="number" pos:start="208:49" pos:end="208:49">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block" pos:start="209:9" pos:end="209:25">/* output data */</comment>
        <expr_stmt pos:start="210:9" pos:end="210:75"><expr pos:start="210:9" pos:end="210:74"><call pos:start="210:9" pos:end="210:74"><name pos:start="210:9" pos:end="210:14">assert</name><argument_list pos:start="210:15" pos:end="210:74">(<argument pos:start="210:16" pos:end="210:73"><expr pos:start="210:16" pos:end="210:73"><name pos:start="210:16" pos:end="210:27">payload_size</name> <operator pos:start="210:29" pos:end="210:29">-</operator> <name pos:start="210:31" pos:end="210:43">stuffing_size</name> <operator pos:start="210:45" pos:end="210:46">&lt;=</operator> <call pos:start="210:48" pos:end="210:73"><name pos:start="210:48" pos:end="210:59">av_fifo_size</name><argument_list pos:start="210:60" pos:end="210:73">(<argument pos:start="210:61" pos:end="210:72"><expr pos:start="210:61" pos:end="210:72"><name pos:start="210:61" pos:end="210:72"><name pos:start="210:61" pos:end="210:66">stream</name><operator pos:start="210:67" pos:end="210:68">-&gt;</operator><name pos:start="210:69" pos:end="210:72">fifo</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="211:9" pos:end="211:95"><expr pos:start="211:9" pos:end="211:94"><call pos:start="211:9" pos:end="211:94"><name pos:start="211:9" pos:end="211:28">av_fifo_generic_read</name><argument_list pos:start="211:29" pos:end="211:94">(<argument pos:start="211:30" pos:end="211:41"><expr pos:start="211:30" pos:end="211:41"><name pos:start="211:30" pos:end="211:41"><name pos:start="211:30" pos:end="211:35">stream</name><operator pos:start="211:36" pos:end="211:37">-&gt;</operator><name pos:start="211:38" pos:end="211:41">fifo</name></name></expr></argument>, <argument pos:start="211:44" pos:end="211:50"><expr pos:start="211:44" pos:end="211:50"><name pos:start="211:44" pos:end="211:50"><name pos:start="211:44" pos:end="211:46">ctx</name><operator pos:start="211:47" pos:end="211:48">-&gt;</operator><name pos:start="211:49" pos:end="211:50">pb</name></name></expr></argument>, <argument pos:start="211:53" pos:end="211:80"><expr pos:start="211:53" pos:end="211:80"><name pos:start="211:53" pos:end="211:64">payload_size</name> <operator pos:start="211:66" pos:end="211:66">-</operator> <name pos:start="211:68" pos:end="211:80">stuffing_size</name></expr></argument>, <argument pos:start="211:83" pos:end="211:93"><expr pos:start="211:83" pos:end="211:93"><operator pos:start="211:83" pos:end="211:83">&amp;</operator><name pos:start="211:84" pos:end="211:93">avio_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt pos:start="212:9" pos:end="212:64"><expr pos:start="212:9" pos:end="212:63"><name pos:start="212:9" pos:end="212:31"><name pos:start="212:9" pos:end="212:14">stream</name><operator pos:start="212:15" pos:end="212:16">-&gt;</operator><name pos:start="212:17" pos:end="212:31">bytes_to_iframe</name></name> <operator pos:start="212:33" pos:end="212:34">-=</operator> <name pos:start="212:36" pos:end="212:47">payload_size</name> <operator pos:start="212:49" pos:end="212:49">-</operator> <name pos:start="212:51" pos:end="212:63">stuffing_size</name></expr>;</expr_stmt>
    </block_content>}</block></if><else pos:start="213:6" pos:end="227:40">else<block pos:start="213:10" pos:end="227:40">{<block_content pos:start="214:9" pos:end="227:40">
        <expr_stmt pos:start="214:9" pos:end="215:25"><expr pos:start="214:9" pos:end="215:24"><name pos:start="214:9" pos:end="214:20">payload_size</name><operator pos:start="214:21" pos:end="214:21">=</operator>
        <name pos:start="215:9" pos:end="215:21">stuffing_size</name><operator pos:start="215:22" pos:end="215:22">=</operator> <literal type="number" pos:start="215:24" pos:end="215:24">0</literal></expr>;</expr_stmt>
    <if_stmt pos:start="216:5" pos:end="217:58"><if pos:start="216:5" pos:end="217:58">if <condition pos:start="216:8" pos:end="216:29">(<expr pos:start="216:9" pos:end="216:28"><name pos:start="216:9" pos:end="216:24">pad_packet_bytes</name> <operator pos:start="216:26" pos:end="216:26">&gt;</operator> <literal type="number" pos:start="216:28" pos:end="216:28">0</literal></expr>)</condition><block type="pseudo" pos:start="217:9" pos:end="217:58"><block_content pos:start="217:9" pos:end="217:58">
        <expr_stmt pos:start="217:9" pos:end="217:58"><expr pos:start="217:9" pos:end="217:57"><call pos:start="217:9" pos:end="217:57"><name pos:start="217:9" pos:end="217:26">put_padding_packet</name><argument_list pos:start="217:27" pos:end="217:57">(<argument pos:start="217:28" pos:end="217:30"><expr pos:start="217:28" pos:end="217:30"><name pos:start="217:28" pos:end="217:30">ctx</name></expr></argument>,<argument pos:start="217:32" pos:end="217:38"><expr pos:start="217:32" pos:end="217:38"><name pos:start="217:32" pos:end="217:38"><name pos:start="217:32" pos:end="217:34">ctx</name><operator pos:start="217:35" pos:end="217:36">-&gt;</operator><name pos:start="217:37" pos:end="217:38">pb</name></name></expr></argument>, <argument pos:start="217:41" pos:end="217:56"><expr pos:start="217:41" pos:end="217:56"><name pos:start="217:41" pos:end="217:56">pad_packet_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for pos:start="218:5" pos:end="219:31">for<control pos:start="218:8" pos:end="218:35">(<init pos:start="218:9" pos:end="218:12"><expr pos:start="218:9" pos:end="218:11"><name pos:start="218:9" pos:end="218:9">i</name><operator pos:start="218:10" pos:end="218:10">=</operator><literal type="number" pos:start="218:11" pos:end="218:11">0</literal></expr>;</init><condition pos:start="218:13" pos:end="218:31"><expr pos:start="218:13" pos:end="218:30"><name pos:start="218:13" pos:end="218:13">i</name><operator pos:start="218:14" pos:end="218:14">&lt;</operator><name pos:start="218:15" pos:end="218:30">zero_trail_bytes</name></expr>;</condition><incr pos:start="218:32" pos:end="218:34"><expr pos:start="218:32" pos:end="218:34"><name pos:start="218:32" pos:end="218:32">i</name><operator pos:start="218:33" pos:end="218:34">++</operator></expr></incr>)</control><block type="pseudo" pos:start="219:9" pos:end="219:31"><block_content pos:start="219:9" pos:end="219:31">
        <expr_stmt pos:start="219:9" pos:end="219:31"><expr pos:start="219:9" pos:end="219:30"><call pos:start="219:9" pos:end="219:30"><name pos:start="219:9" pos:end="219:15">avio_w8</name><argument_list pos:start="219:16" pos:end="219:30">(<argument pos:start="219:17" pos:end="219:23"><expr pos:start="219:17" pos:end="219:23"><name pos:start="219:17" pos:end="219:23"><name pos:start="219:17" pos:end="219:19">ctx</name><operator pos:start="219:20" pos:end="219:21">-&gt;</operator><name pos:start="219:22" pos:end="219:23">pb</name></name></expr></argument>, <argument pos:start="219:26" pos:end="219:29"><expr pos:start="219:26" pos:end="219:29"><literal type="number" pos:start="219:26" pos:end="219:29">0x00</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt pos:start="220:5" pos:end="220:24"><expr pos:start="220:5" pos:end="220:23"><call pos:start="220:5" pos:end="220:23"><name pos:start="220:5" pos:end="220:14">avio_flush</name><argument_list pos:start="220:15" pos:end="220:23">(<argument pos:start="220:16" pos:end="220:22"><expr pos:start="220:16" pos:end="220:22"><name pos:start="220:16" pos:end="220:22"><name pos:start="220:16" pos:end="220:18">ctx</name><operator pos:start="220:19" pos:end="220:20">-&gt;</operator><name pos:start="220:21" pos:end="220:22">pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt pos:start="221:5" pos:end="221:23"><expr pos:start="221:5" pos:end="221:22"><name pos:start="221:5" pos:end="221:20"><name pos:start="221:5" pos:end="221:5">s</name><operator pos:start="221:6" pos:end="221:7">-&gt;</operator><name pos:start="221:8" pos:end="221:20">packet_number</name></name><operator pos:start="221:21" pos:end="221:22">++</operator></expr>;</expr_stmt>
    <comment type="block" pos:start="222:5" pos:end="224:22">/* only increase the stream packet number if this pack actually contains
       something that is specific to this stream! I.e. a dedicated header
       or some data.*/</comment>
    <if_stmt pos:start="225:5" pos:end="226:32"><if pos:start="225:5" pos:end="226:32">if <condition pos:start="225:8" pos:end="225:22">(<expr pos:start="225:9" pos:end="225:21"><operator pos:start="225:9" pos:end="225:9">!</operator><name pos:start="225:10" pos:end="225:21">general_pack</name></expr>)</condition><block type="pseudo" pos:start="226:9" pos:end="226:32"><block_content pos:start="226:9" pos:end="226:32">
        <expr_stmt pos:start="226:9" pos:end="226:32"><expr pos:start="226:9" pos:end="226:31"><name pos:start="226:9" pos:end="226:29"><name pos:start="226:9" pos:end="226:14">stream</name><operator pos:start="226:15" pos:end="226:16">-&gt;</operator><name pos:start="226:17" pos:end="226:29">packet_number</name></name><operator pos:start="226:30" pos:end="226:31">++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return pos:start="227:5" pos:end="227:40">return <expr pos:start="227:12" pos:end="227:39"><name pos:start="227:12" pos:end="227:23">payload_size</name> <operator pos:start="227:25" pos:end="227:25">-</operator> <name pos:start="227:27" pos:end="227:39">stuffing_size</name></expr>;</return></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></else></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt></block_content></block></function></unit>
