<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/8148.c" pos:tabs="8"><function pos:start="1:1" pos:end="123:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:23">an5206_init</name><parameter_list pos:start="1:24" pos:end="1:50">(<parameter pos:start="1:25" pos:end="1:49"><decl pos:start="1:25" pos:end="1:49"><type pos:start="1:25" pos:end="1:45"><name pos:start="1:25" pos:end="1:43">QEMUMachineInitArgs</name> <modifier pos:start="1:45" pos:end="1:45">*</modifier></type><name pos:start="1:46" pos:end="1:49">args</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="123:1">{<block_content pos:start="5:5" pos:end="121:20">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:14">ram_addr_t</name></type> <name pos:start="5:16" pos:end="5:23">ram_size</name> <init pos:start="5:25" pos:end="5:40">= <expr pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:40"><name pos:start="5:27" pos:end="5:30">args</name><operator pos:start="5:31" pos:end="5:32">-&gt;</operator><name pos:start="5:33" pos:end="5:40">ram_size</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:44"><decl pos:start="7:5" pos:end="7:43"><type pos:start="7:5" pos:end="7:16"><specifier pos:start="7:5" pos:end="7:9">const</specifier> <name pos:start="7:11" pos:end="7:14">char</name> <modifier pos:start="7:16" pos:end="7:16">*</modifier></type><name pos:start="7:17" pos:end="7:25">cpu_model</name> <init pos:start="7:27" pos:end="7:43">= <expr pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:43"><name pos:start="7:29" pos:end="7:32">args</name><operator pos:start="7:33" pos:end="7:34">-&gt;</operator><name pos:start="7:35" pos:end="7:43">cpu_model</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:56"><decl pos:start="9:5" pos:end="9:55"><type pos:start="9:5" pos:end="9:16"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:14">char</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:31">kernel_filename</name> <init pos:start="9:33" pos:end="9:55">= <expr pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:55"><name pos:start="9:35" pos:end="9:38">args</name><operator pos:start="9:39" pos:end="9:40">-&gt;</operator><name pos:start="9:41" pos:end="9:55">kernel_filename</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:22"><decl pos:start="11:5" pos:end="11:21"><type pos:start="11:5" pos:end="11:18"><name pos:start="11:5" pos:end="11:16">CPUM68KState</name> <modifier pos:start="11:18" pos:end="11:18">*</modifier></type><name pos:start="11:19" pos:end="11:21">env</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:7"><name pos:start="13:5" pos:end="13:7">int</name></type> <name pos:start="13:9" pos:end="13:19">kernel_size</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:23"><decl pos:start="15:5" pos:end="15:22"><type pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:12">uint64_t</name></type> <name pos:start="15:14" pos:end="15:22">elf_entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:29"><decl pos:start="17:5" pos:end="17:28"><type pos:start="17:5" pos:end="17:22"><name pos:start="17:5" pos:end="17:22">target_phys_addr_t</name></type> <name pos:start="17:24" pos:end="17:28">entry</name></decl>;</decl_stmt>

    <decl_stmt pos:start="19:5" pos:end="19:58"><decl pos:start="19:5" pos:end="19:57"><type pos:start="19:5" pos:end="19:18"><name pos:start="19:5" pos:end="19:16">MemoryRegion</name> <modifier pos:start="19:18" pos:end="19:18">*</modifier></type><name pos:start="19:19" pos:end="19:35">address_space_mem</name> <init pos:start="19:37" pos:end="19:57">= <expr pos:start="19:39" pos:end="19:57"><call pos:start="19:39" pos:end="19:57"><name pos:start="19:39" pos:end="19:55">get_system_memory</name><argument_list pos:start="19:56" pos:end="19:57">()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="21:5" pos:end="21:47"><decl pos:start="21:5" pos:end="21:46"><type pos:start="21:5" pos:end="21:18"><name pos:start="21:5" pos:end="21:16">MemoryRegion</name> <modifier pos:start="21:18" pos:end="21:18">*</modifier></type><name pos:start="21:19" pos:end="21:21">ram</name> <init pos:start="21:23" pos:end="21:46">= <expr pos:start="21:25" pos:end="21:46"><call pos:start="21:25" pos:end="21:46"><name pos:start="21:25" pos:end="21:29">g_new</name><argument_list pos:start="21:30" pos:end="21:46">(<argument pos:start="21:31" pos:end="21:42"><expr pos:start="21:31" pos:end="21:42"><name pos:start="21:31" pos:end="21:42">MemoryRegion</name></expr></argument>, <argument pos:start="21:45" pos:end="21:45"><expr pos:start="21:45" pos:end="21:45"><literal type="number" pos:start="21:45" pos:end="21:45">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="23:5" pos:end="23:48"><decl pos:start="23:5" pos:end="23:47"><type pos:start="23:5" pos:end="23:18"><name pos:start="23:5" pos:end="23:16">MemoryRegion</name> <modifier pos:start="23:18" pos:end="23:18">*</modifier></type><name pos:start="23:19" pos:end="23:22">sram</name> <init pos:start="23:24" pos:end="23:47">= <expr pos:start="23:26" pos:end="23:47"><call pos:start="23:26" pos:end="23:47"><name pos:start="23:26" pos:end="23:30">g_new</name><argument_list pos:start="23:31" pos:end="23:47">(<argument pos:start="23:32" pos:end="23:43"><expr pos:start="23:32" pos:end="23:43"><name pos:start="23:32" pos:end="23:43">MemoryRegion</name></expr></argument>, <argument pos:start="23:46" pos:end="23:46"><expr pos:start="23:46" pos:end="23:46"><literal type="number" pos:start="23:46" pos:end="23:46">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>



    <if_stmt pos:start="27:5" pos:end="29:28"><if pos:start="27:5" pos:end="29:28">if <condition pos:start="27:8" pos:end="27:19">(<expr pos:start="27:9" pos:end="27:18"><operator pos:start="27:9" pos:end="27:9">!</operator><name pos:start="27:10" pos:end="27:18">cpu_model</name></expr>)</condition><block type="pseudo" pos:start="29:9" pos:end="29:28"><block_content pos:start="29:9" pos:end="29:28">

        <expr_stmt pos:start="29:9" pos:end="29:28"><expr pos:start="29:9" pos:end="29:27"><name pos:start="29:9" pos:end="29:17">cpu_model</name> <operator pos:start="29:19" pos:end="29:19">=</operator> <literal type="string" pos:start="29:21" pos:end="29:27">"m5206"</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="31:5" pos:end="31:30"><expr pos:start="31:5" pos:end="31:29"><name pos:start="31:5" pos:end="31:7">env</name> <operator pos:start="31:9" pos:end="31:9">=</operator> <call pos:start="31:11" pos:end="31:29"><name pos:start="31:11" pos:end="31:18">cpu_init</name><argument_list pos:start="31:19" pos:end="31:29">(<argument pos:start="31:20" pos:end="31:28"><expr pos:start="31:20" pos:end="31:28"><name pos:start="31:20" pos:end="31:28">cpu_model</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="33:5" pos:end="37:5"><if pos:start="33:5" pos:end="37:5">if <condition pos:start="33:8" pos:end="33:13">(<expr pos:start="33:9" pos:end="33:12"><operator pos:start="33:9" pos:end="33:9">!</operator><name pos:start="33:10" pos:end="33:12">env</name></expr>)</condition> <block pos:start="33:15" pos:end="37:5">{<block_content pos:start="35:9" pos:end="35:57">

        <expr_stmt pos:start="35:9" pos:end="35:57"><expr pos:start="35:9" pos:end="35:56"><call pos:start="35:9" pos:end="35:56"><name pos:start="35:9" pos:end="35:16">hw_error</name><argument_list pos:start="35:17" pos:end="35:56">(<argument pos:start="35:18" pos:end="35:55"><expr pos:start="35:18" pos:end="35:55"><literal type="string" pos:start="35:18" pos:end="35:55">"Unable to find m68k CPU definition\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <comment type="block" pos:start="41:5" pos:end="41:36">/* Initialize CPU registers.  */</comment>

    <expr_stmt pos:start="43:5" pos:end="43:17"><expr pos:start="43:5" pos:end="43:16"><name pos:start="43:5" pos:end="43:12"><name pos:start="43:5" pos:end="43:7">env</name><operator pos:start="43:8" pos:end="43:9">-&gt;</operator><name pos:start="43:10" pos:end="43:12">vbr</name></name> <operator pos:start="43:14" pos:end="43:14">=</operator> <literal type="number" pos:start="43:16" pos:end="43:16">0</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:48">/* TODO: allow changing MBAR and RAMBAR.  */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:37"><expr pos:start="47:5" pos:end="47:36"><name pos:start="47:5" pos:end="47:13"><name pos:start="47:5" pos:end="47:7">env</name><operator pos:start="47:8" pos:end="47:9">-&gt;</operator><name pos:start="47:10" pos:end="47:13">mbar</name></name> <operator pos:start="47:15" pos:end="47:15">=</operator> <name pos:start="47:17" pos:end="47:32">AN5206_MBAR_ADDR</name> <operator pos:start="47:34" pos:end="47:34">|</operator> <literal type="number" pos:start="47:36" pos:end="47:36">1</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:42"><expr pos:start="49:5" pos:end="49:41"><name pos:start="49:5" pos:end="49:16"><name pos:start="49:5" pos:end="49:7">env</name><operator pos:start="49:8" pos:end="49:9">-&gt;</operator><name pos:start="49:10" pos:end="49:16">rambar0</name></name> <operator pos:start="49:18" pos:end="49:18">=</operator> <name pos:start="49:20" pos:end="49:37">AN5206_RAMBAR_ADDR</name> <operator pos:start="49:39" pos:end="49:39">|</operator> <literal type="number" pos:start="49:41" pos:end="49:41">1</literal></expr>;</expr_stmt>



    <comment type="block" pos:start="53:5" pos:end="53:30">/* DRAM at address zero */</comment>

    <expr_stmt pos:start="55:5" pos:end="55:56"><expr pos:start="55:5" pos:end="55:55"><call pos:start="55:5" pos:end="55:55"><name pos:start="55:5" pos:end="55:26">memory_region_init_ram</name><argument_list pos:start="55:27" pos:end="55:55">(<argument pos:start="55:28" pos:end="55:30"><expr pos:start="55:28" pos:end="55:30"><name pos:start="55:28" pos:end="55:30">ram</name></expr></argument>, <argument pos:start="55:33" pos:end="55:44"><expr pos:start="55:33" pos:end="55:44"><literal type="string" pos:start="55:33" pos:end="55:44">"an5206.ram"</literal></expr></argument>, <argument pos:start="55:47" pos:end="55:54"><expr pos:start="55:47" pos:end="55:54"><name pos:start="55:47" pos:end="55:54">ram_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:37"><expr pos:start="57:5" pos:end="57:36"><call pos:start="57:5" pos:end="57:36"><name pos:start="57:5" pos:end="57:31">vmstate_register_ram_global</name><argument_list pos:start="57:32" pos:end="57:36">(<argument pos:start="57:33" pos:end="57:35"><expr pos:start="57:33" pos:end="57:35"><name pos:start="57:33" pos:end="57:35">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:59"><expr pos:start="59:5" pos:end="59:58"><call pos:start="59:5" pos:end="59:58"><name pos:start="59:5" pos:end="59:31">memory_region_add_subregion</name><argument_list pos:start="59:32" pos:end="59:58">(<argument pos:start="59:33" pos:end="59:49"><expr pos:start="59:33" pos:end="59:49"><name pos:start="59:33" pos:end="59:49">address_space_mem</name></expr></argument>, <argument pos:start="59:52" pos:end="59:52"><expr pos:start="59:52" pos:end="59:52"><literal type="number" pos:start="59:52" pos:end="59:52">0</literal></expr></argument>, <argument pos:start="59:55" pos:end="59:57"><expr pos:start="59:55" pos:end="59:57"><name pos:start="59:55" pos:end="59:57">ram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="63:5" pos:end="63:25">/* Internal SRAM.  */</comment>

    <expr_stmt pos:start="65:5" pos:end="65:53"><expr pos:start="65:5" pos:end="65:52"><call pos:start="65:5" pos:end="65:52"><name pos:start="65:5" pos:end="65:26">memory_region_init_ram</name><argument_list pos:start="65:27" pos:end="65:52">(<argument pos:start="65:28" pos:end="65:31"><expr pos:start="65:28" pos:end="65:31"><name pos:start="65:28" pos:end="65:31">sram</name></expr></argument>, <argument pos:start="65:34" pos:end="65:46"><expr pos:start="65:34" pos:end="65:46"><literal type="string" pos:start="65:34" pos:end="65:46">"an5206.sram"</literal></expr></argument>, <argument pos:start="65:49" pos:end="65:51"><expr pos:start="65:49" pos:end="65:51"><literal type="number" pos:start="65:49" pos:end="65:51">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="67:5" pos:end="67:38"><expr pos:start="67:5" pos:end="67:37"><call pos:start="67:5" pos:end="67:37"><name pos:start="67:5" pos:end="67:31">vmstate_register_ram_global</name><argument_list pos:start="67:32" pos:end="67:37">(<argument pos:start="67:33" pos:end="67:36"><expr pos:start="67:33" pos:end="67:36"><name pos:start="67:33" pos:end="67:36">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="69:5" pos:end="69:77"><expr pos:start="69:5" pos:end="69:76"><call pos:start="69:5" pos:end="69:76"><name pos:start="69:5" pos:end="69:31">memory_region_add_subregion</name><argument_list pos:start="69:32" pos:end="69:76">(<argument pos:start="69:33" pos:end="69:49"><expr pos:start="69:33" pos:end="69:49"><name pos:start="69:33" pos:end="69:49">address_space_mem</name></expr></argument>, <argument pos:start="69:52" pos:end="69:69"><expr pos:start="69:52" pos:end="69:69"><name pos:start="69:52" pos:end="69:69">AN5206_RAMBAR_ADDR</name></expr></argument>, <argument pos:start="69:72" pos:end="69:75"><expr pos:start="69:72" pos:end="69:75"><name pos:start="69:72" pos:end="69:75">sram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="73:5" pos:end="73:59"><expr pos:start="73:5" pos:end="73:58"><call pos:start="73:5" pos:end="73:58"><name pos:start="73:5" pos:end="73:16">mcf5206_init</name><argument_list pos:start="73:17" pos:end="73:58">(<argument pos:start="73:18" pos:end="73:34"><expr pos:start="73:18" pos:end="73:34"><name pos:start="73:18" pos:end="73:34">address_space_mem</name></expr></argument>, <argument pos:start="73:37" pos:end="73:52"><expr pos:start="73:37" pos:end="73:52"><name pos:start="73:37" pos:end="73:52">AN5206_MBAR_ADDR</name></expr></argument>, <argument pos:start="73:55" pos:end="73:57"><expr pos:start="73:55" pos:end="73:57"><name pos:start="73:55" pos:end="73:57">env</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="77:5" pos:end="77:23">/* Load kernel.  */</comment>

    <if_stmt pos:start="79:5" pos:end="85:5"><if pos:start="79:5" pos:end="85:5">if <condition pos:start="79:8" pos:end="79:25">(<expr pos:start="79:9" pos:end="79:24"><operator pos:start="79:9" pos:end="79:9">!</operator><name pos:start="79:10" pos:end="79:24">kernel_filename</name></expr>)</condition> <block pos:start="79:27" pos:end="85:5">{<block_content pos:start="81:9" pos:end="83:16">

        <expr_stmt pos:start="81:9" pos:end="81:60"><expr pos:start="81:9" pos:end="81:59"><call pos:start="81:9" pos:end="81:59"><name pos:start="81:9" pos:end="81:15">fprintf</name><argument_list pos:start="81:16" pos:end="81:59">(<argument pos:start="81:17" pos:end="81:22"><expr pos:start="81:17" pos:end="81:22"><name pos:start="81:17" pos:end="81:22">stderr</name></expr></argument>, <argument pos:start="81:25" pos:end="81:58"><expr pos:start="81:25" pos:end="81:58"><literal type="string" pos:start="81:25" pos:end="81:58">"Kernel image must be specified\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="83:9" pos:end="83:16"><expr pos:start="83:9" pos:end="83:15"><call pos:start="83:9" pos:end="83:15"><name pos:start="83:9" pos:end="83:12">exit</name><argument_list pos:start="83:13" pos:end="83:15">(<argument pos:start="83:14" pos:end="83:14"><expr pos:start="83:14" pos:end="83:14"><literal type="number" pos:start="83:14" pos:end="83:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="89:5" pos:end="91:58"><expr pos:start="89:5" pos:end="91:57"><name pos:start="89:5" pos:end="89:15">kernel_size</name> <operator pos:start="89:17" pos:end="89:17">=</operator> <call pos:start="89:19" pos:end="91:57"><name pos:start="89:19" pos:end="89:26">load_elf</name><argument_list pos:start="89:27" pos:end="91:57">(<argument pos:start="89:28" pos:end="89:42"><expr pos:start="89:28" pos:end="89:42"><name pos:start="89:28" pos:end="89:42">kernel_filename</name></expr></argument>, <argument pos:start="89:45" pos:end="89:48"><expr pos:start="89:45" pos:end="89:48"><name pos:start="89:45" pos:end="89:48">NULL</name></expr></argument>, <argument pos:start="89:51" pos:end="89:54"><expr pos:start="89:51" pos:end="89:54"><name pos:start="89:51" pos:end="89:54">NULL</name></expr></argument>, <argument pos:start="89:57" pos:end="89:66"><expr pos:start="89:57" pos:end="89:66"><operator pos:start="89:57" pos:end="89:57">&amp;</operator><name pos:start="89:58" pos:end="89:66">elf_entry</name></expr></argument>,

                           <argument pos:start="91:28" pos:end="91:31"><expr pos:start="91:28" pos:end="91:31"><name pos:start="91:28" pos:end="91:31">NULL</name></expr></argument>, <argument pos:start="91:34" pos:end="91:37"><expr pos:start="91:34" pos:end="91:37"><name pos:start="91:34" pos:end="91:37">NULL</name></expr></argument>, <argument pos:start="91:40" pos:end="91:40"><expr pos:start="91:40" pos:end="91:40"><literal type="number" pos:start="91:40" pos:end="91:40">1</literal></expr></argument>, <argument pos:start="91:43" pos:end="91:53"><expr pos:start="91:43" pos:end="91:53"><name pos:start="91:43" pos:end="91:53">ELF_MACHINE</name></expr></argument>, <argument pos:start="91:56" pos:end="91:56"><expr pos:start="91:56" pos:end="91:56"><literal type="number" pos:start="91:56" pos:end="91:56">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="93:5" pos:end="93:22"><expr pos:start="93:5" pos:end="93:21"><name pos:start="93:5" pos:end="93:9">entry</name> <operator pos:start="93:11" pos:end="93:11">=</operator> <name pos:start="93:13" pos:end="93:21">elf_entry</name></expr>;</expr_stmt>

    <if_stmt pos:start="95:5" pos:end="99:5"><if pos:start="95:5" pos:end="99:5">if <condition pos:start="95:8" pos:end="95:24">(<expr pos:start="95:9" pos:end="95:23"><name pos:start="95:9" pos:end="95:19">kernel_size</name> <operator pos:start="95:21" pos:end="95:21">&lt;</operator> <literal type="number" pos:start="95:23" pos:end="95:23">0</literal></expr>)</condition> <block pos:start="95:26" pos:end="99:5">{<block_content pos:start="97:9" pos:end="97:71">

        <expr_stmt pos:start="97:9" pos:end="97:71"><expr pos:start="97:9" pos:end="97:70"><name pos:start="97:9" pos:end="97:19">kernel_size</name> <operator pos:start="97:21" pos:end="97:21">=</operator> <call pos:start="97:23" pos:end="97:70"><name pos:start="97:23" pos:end="97:33">load_uimage</name><argument_list pos:start="97:34" pos:end="97:70">(<argument pos:start="97:35" pos:end="97:49"><expr pos:start="97:35" pos:end="97:49"><name pos:start="97:35" pos:end="97:49">kernel_filename</name></expr></argument>, <argument pos:start="97:52" pos:end="97:57"><expr pos:start="97:52" pos:end="97:57"><operator pos:start="97:52" pos:end="97:52">&amp;</operator><name pos:start="97:53" pos:end="97:57">entry</name></expr></argument>, <argument pos:start="97:60" pos:end="97:63"><expr pos:start="97:60" pos:end="97:63"><name pos:start="97:60" pos:end="97:63">NULL</name></expr></argument>, <argument pos:start="97:66" pos:end="97:69"><expr pos:start="97:66" pos:end="97:69"><name pos:start="97:66" pos:end="97:69">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="101:5" pos:end="109:5"><if pos:start="101:5" pos:end="109:5">if <condition pos:start="101:8" pos:end="101:24">(<expr pos:start="101:9" pos:end="101:23"><name pos:start="101:9" pos:end="101:19">kernel_size</name> <operator pos:start="101:21" pos:end="101:21">&lt;</operator> <literal type="number" pos:start="101:23" pos:end="101:23">0</literal></expr>)</condition> <block pos:start="101:26" pos:end="109:5">{<block_content pos:start="103:9" pos:end="107:33">

        <expr_stmt pos:start="103:9" pos:end="105:71"><expr pos:start="103:9" pos:end="105:70"><name pos:start="103:9" pos:end="103:19">kernel_size</name> <operator pos:start="103:21" pos:end="103:21">=</operator> <call pos:start="103:23" pos:end="105:70"><name pos:start="103:23" pos:end="103:41">load_image_targphys</name><argument_list pos:start="103:42" pos:end="105:70">(<argument pos:start="103:43" pos:end="103:57"><expr pos:start="103:43" pos:end="103:57"><name pos:start="103:43" pos:end="103:57">kernel_filename</name></expr></argument>, <argument pos:start="103:60" pos:end="103:75"><expr pos:start="103:60" pos:end="103:75"><name pos:start="103:60" pos:end="103:75">KERNEL_LOAD_ADDR</name></expr></argument>,

                                          <argument pos:start="105:43" pos:end="105:69"><expr pos:start="105:43" pos:end="105:69"><name pos:start="105:43" pos:end="105:50">ram_size</name> <operator pos:start="105:52" pos:end="105:52">-</operator> <name pos:start="105:54" pos:end="105:69">KERNEL_LOAD_ADDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="107:9" pos:end="107:33"><expr pos:start="107:9" pos:end="107:32"><name pos:start="107:9" pos:end="107:13">entry</name> <operator pos:start="107:15" pos:end="107:15">=</operator> <name pos:start="107:17" pos:end="107:32">KERNEL_LOAD_ADDR</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="111:5" pos:end="117:5"><if pos:start="111:5" pos:end="117:5">if <condition pos:start="111:8" pos:end="111:24">(<expr pos:start="111:9" pos:end="111:23"><name pos:start="111:9" pos:end="111:19">kernel_size</name> <operator pos:start="111:21" pos:end="111:21">&lt;</operator> <literal type="number" pos:start="111:23" pos:end="111:23">0</literal></expr>)</condition> <block pos:start="111:26" pos:end="117:5">{<block_content pos:start="113:9" pos:end="115:16">

        <expr_stmt pos:start="113:9" pos:end="113:79"><expr pos:start="113:9" pos:end="113:78"><call pos:start="113:9" pos:end="113:78"><name pos:start="113:9" pos:end="113:15">fprintf</name><argument_list pos:start="113:16" pos:end="113:78">(<argument pos:start="113:17" pos:end="113:22"><expr pos:start="113:17" pos:end="113:22"><name pos:start="113:17" pos:end="113:22">stderr</name></expr></argument>, <argument pos:start="113:25" pos:end="113:60"><expr pos:start="113:25" pos:end="113:60"><literal type="string" pos:start="113:25" pos:end="113:60">"qemu: could not load kernel '%s'\n"</literal></expr></argument>, <argument pos:start="113:63" pos:end="113:77"><expr pos:start="113:63" pos:end="113:77"><name pos:start="113:63" pos:end="113:77">kernel_filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="115:9" pos:end="115:16"><expr pos:start="115:9" pos:end="115:15"><call pos:start="115:9" pos:end="115:15"><name pos:start="115:9" pos:end="115:12">exit</name><argument_list pos:start="115:13" pos:end="115:15">(<argument pos:start="115:14" pos:end="115:14"><expr pos:start="115:14" pos:end="115:14"><literal type="number" pos:start="115:14" pos:end="115:14">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="121:5" pos:end="121:20"><expr pos:start="121:5" pos:end="121:19"><name pos:start="121:5" pos:end="121:11"><name pos:start="121:5" pos:end="121:7">env</name><operator pos:start="121:8" pos:end="121:9">-&gt;</operator><name pos:start="121:10" pos:end="121:11">pc</name></name> <operator pos:start="121:13" pos:end="121:13">=</operator> <name pos:start="121:15" pos:end="121:19">entry</name></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
