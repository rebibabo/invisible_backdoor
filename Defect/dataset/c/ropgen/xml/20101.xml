<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/20101.c" pos:tabs="8"><function pos:start="1:1" pos:end="119:1"><type pos:start="1:1" pos:end="1:10"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:10">int</name></type> <name pos:start="1:12" pos:end="1:28">vnc_update_client</name><parameter_list pos:start="1:29" pos:end="1:68">(<parameter pos:start="1:30" pos:end="1:41"><decl pos:start="1:30" pos:end="1:41"><type pos:start="1:30" pos:end="1:41"><name pos:start="1:30" pos:end="1:37">VncState</name> <modifier pos:start="1:39" pos:end="1:39">*</modifier></type><name pos:start="1:40" pos:end="1:41">vs</name></decl></parameter>, <parameter pos:start="1:44" pos:end="1:56"><decl pos:start="1:44" pos:end="1:56"><type pos:start="1:44" pos:end="1:56"><name pos:start="1:44" pos:end="1:46">int</name></type> <name pos:start="1:48" pos:end="1:56">has_dirty</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:67"><decl pos:start="1:59" pos:end="1:67"><type pos:start="1:59" pos:end="1:67"><name pos:start="1:59" pos:end="1:62">bool</name></type> <name pos:start="1:64" pos:end="1:67">sync</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="119:1">{<block_content pos:start="5:5" pos:end="117:13">

    <if_stmt pos:start="5:5" pos:end="101:5"><if pos:start="5:5" pos:end="101:5">if <condition pos:start="5:8" pos:end="5:43">(<expr pos:start="5:9" pos:end="5:42"><name pos:start="5:9" pos:end="5:23"><name pos:start="5:9" pos:end="5:10">vs</name><operator pos:start="5:11" pos:end="5:12">-&gt;</operator><name pos:start="5:13" pos:end="5:23">need_update</name></name> <operator pos:start="5:25" pos:end="5:26">&amp;&amp;</operator> <name pos:start="5:28" pos:end="5:36"><name pos:start="5:28" pos:end="5:29">vs</name><operator pos:start="5:30" pos:end="5:31">-&gt;</operator><name pos:start="5:32" pos:end="5:36">csock</name></name> <operator pos:start="5:38" pos:end="5:39">!=</operator> <operator pos:start="5:41" pos:end="5:41">-</operator><literal type="number" pos:start="5:42" pos:end="5:42">1</literal></expr>)</condition> <block pos:start="5:45" pos:end="101:5">{<block_content pos:start="7:9" pos:end="99:17">

        <decl_stmt pos:start="7:9" pos:end="7:32"><decl pos:start="7:9" pos:end="7:31"><type pos:start="7:9" pos:end="7:20"><name pos:start="7:9" pos:end="7:18">VncDisplay</name> <modifier pos:start="7:20" pos:end="7:20">*</modifier></type><name pos:start="7:21" pos:end="7:22">vd</name> <init pos:start="7:24" pos:end="7:31">= <expr pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:31"><name pos:start="7:26" pos:end="7:27">vs</name><operator pos:start="7:28" pos:end="7:29">-&gt;</operator><name pos:start="7:30" pos:end="7:31">vd</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt pos:start="9:9" pos:end="9:20"><decl pos:start="9:9" pos:end="9:19"><type pos:start="9:9" pos:end="9:16"><name pos:start="9:9" pos:end="9:14">VncJob</name> <modifier pos:start="9:16" pos:end="9:16">*</modifier></type><name pos:start="9:17" pos:end="9:19">job</name></decl>;</decl_stmt>

        <decl_stmt pos:start="11:9" pos:end="11:14"><decl pos:start="11:9" pos:end="11:13"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">y</name></decl>;</decl_stmt>

        <decl_stmt pos:start="13:9" pos:end="13:19"><decl pos:start="13:9" pos:end="13:18"><type pos:start="13:9" pos:end="13:11"><name pos:start="13:9" pos:end="13:11">int</name></type> <name pos:start="13:13" pos:end="13:18">height</name></decl>;</decl_stmt>

        <decl_stmt pos:start="15:9" pos:end="15:18"><decl pos:start="15:9" pos:end="15:17"><type pos:start="15:9" pos:end="15:11"><name pos:start="15:9" pos:end="15:11">int</name></type> <name pos:start="15:13" pos:end="15:13">n</name> <init pos:start="15:15" pos:end="15:17">= <expr pos:start="15:17" pos:end="15:17"><literal type="number" pos:start="15:17" pos:end="15:17">0</literal></expr></init></decl>;</decl_stmt>



        <if_stmt pos:start="19:9" pos:end="23:21"><if pos:start="19:9" pos:end="23:21">if <condition pos:start="19:12" pos:end="19:69">(<expr pos:start="19:13" pos:end="19:68"><name pos:start="19:13" pos:end="19:29"><name pos:start="19:13" pos:end="19:14">vs</name><operator pos:start="19:15" pos:end="19:16">-&gt;</operator><name pos:start="19:17" pos:end="19:22">output</name><operator pos:start="19:23" pos:end="19:23">.</operator><name pos:start="19:24" pos:end="19:29">offset</name></name> <operator pos:start="19:31" pos:end="19:32">&amp;&amp;</operator> <operator pos:start="19:34" pos:end="19:34">!</operator><name pos:start="19:35" pos:end="19:47"><name pos:start="19:35" pos:end="19:36">vs</name><operator pos:start="19:37" pos:end="19:38">-&gt;</operator><name pos:start="19:39" pos:end="19:47">audio_cap</name></name> <operator pos:start="19:49" pos:end="19:50">&amp;&amp;</operator> <operator pos:start="19:52" pos:end="19:52">!</operator><name pos:start="19:53" pos:end="19:68"><name pos:start="19:53" pos:end="19:54">vs</name><operator pos:start="19:55" pos:end="19:56">-&gt;</operator><name pos:start="19:57" pos:end="19:68">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="23:13" pos:end="23:21"><block_content pos:start="23:13" pos:end="23:21">

            <comment type="block" pos:start="21:13" pos:end="21:73">/* kernel send buffers are full -&gt; drop frames to throttle */</comment>

            <return pos:start="23:13" pos:end="23:21">return <expr pos:start="23:20" pos:end="23:20"><literal type="number" pos:start="23:20" pos:end="23:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <if_stmt pos:start="27:9" pos:end="29:21"><if pos:start="27:9" pos:end="29:21">if <condition pos:start="27:12" pos:end="27:62">(<expr pos:start="27:13" pos:end="27:61"><operator pos:start="27:13" pos:end="27:13">!</operator><name pos:start="27:14" pos:end="27:22">has_dirty</name> <operator pos:start="27:24" pos:end="27:25">&amp;&amp;</operator> <operator pos:start="27:27" pos:end="27:27">!</operator><name pos:start="27:28" pos:end="27:40"><name pos:start="27:28" pos:end="27:29">vs</name><operator pos:start="27:30" pos:end="27:31">-&gt;</operator><name pos:start="27:32" pos:end="27:40">audio_cap</name></name> <operator pos:start="27:42" pos:end="27:43">&amp;&amp;</operator> <operator pos:start="27:45" pos:end="27:45">!</operator><name pos:start="27:46" pos:end="27:61"><name pos:start="27:46" pos:end="27:47">vs</name><operator pos:start="27:48" pos:end="27:49">-&gt;</operator><name pos:start="27:50" pos:end="27:61">force_update</name></name></expr>)</condition><block type="pseudo" pos:start="29:13" pos:end="29:21"><block_content pos:start="29:13" pos:end="29:21">

            <return pos:start="29:13" pos:end="29:21">return <expr pos:start="29:20" pos:end="29:20"><literal type="number" pos:start="29:20" pos:end="29:20">0</literal></expr>;</return></block_content></block></if></if_stmt>



        <comment type="block" pos:start="33:9" pos:end="43:11">/*

         * Send screen updates to the vnc client using the server

         * surface and server dirty map.  guest surface updates

         * happening in parallel don't disturb us, the next pass will

         * send them to the client.

         */</comment>

        <expr_stmt pos:start="45:9" pos:end="45:30"><expr pos:start="45:9" pos:end="45:29"><name pos:start="45:9" pos:end="45:11">job</name> <operator pos:start="45:13" pos:end="45:13">=</operator> <call pos:start="45:15" pos:end="45:29"><name pos:start="45:15" pos:end="45:25">vnc_job_new</name><argument_list pos:start="45:26" pos:end="45:29">(<argument pos:start="45:27" pos:end="45:28"><expr pos:start="45:27" pos:end="45:28"><name pos:start="45:27" pos:end="45:28">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="49:9" pos:end="49:77"><expr pos:start="49:9" pos:end="49:76"><name pos:start="49:9" pos:end="49:14">height</name> <operator pos:start="49:16" pos:end="49:16">=</operator> <call pos:start="49:18" pos:end="49:76"><name pos:start="49:18" pos:end="49:20">MIN</name><argument_list pos:start="49:21" pos:end="49:76">(<argument pos:start="49:22" pos:end="49:56"><expr pos:start="49:22" pos:end="49:56"><call pos:start="49:22" pos:end="49:56"><name pos:start="49:22" pos:end="49:44">pixman_image_get_height</name><argument_list pos:start="49:45" pos:end="49:56">(<argument pos:start="49:46" pos:end="49:55"><expr pos:start="49:46" pos:end="49:55"><name pos:start="49:46" pos:end="49:55"><name pos:start="49:46" pos:end="49:47">vd</name><operator pos:start="49:48" pos:end="49:49">-&gt;</operator><name pos:start="49:50" pos:end="49:55">server</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="49:59" pos:end="49:75"><expr pos:start="49:59" pos:end="49:75"><name pos:start="49:59" pos:end="49:75"><name pos:start="49:59" pos:end="49:60">vs</name><operator pos:start="49:61" pos:end="49:62">-&gt;</operator><name pos:start="49:63" pos:end="49:75">client_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="53:9" pos:end="53:14"><expr pos:start="53:9" pos:end="53:13"><name pos:start="53:9" pos:end="53:9">y</name> <operator pos:start="53:11" pos:end="53:11">=</operator> <literal type="number" pos:start="53:13" pos:end="53:13">0</literal></expr>;</expr_stmt>

        <for pos:start="55:9" pos:end="91:9">for <control pos:start="55:13" pos:end="55:16">(<init pos:start="55:14" pos:end="55:14">;</init><condition pos:start="55:15" pos:end="55:15">;</condition><incr/>)</control> <block pos:start="55:18" pos:end="91:9">{<block_content pos:start="57:13" pos:end="89:74">

            <decl_stmt pos:start="57:13" pos:end="57:21"><decl pos:start="57:13" pos:end="57:17"><type pos:start="57:13" pos:end="57:15"><name pos:start="57:13" pos:end="57:15">int</name></type> <name pos:start="57:17" pos:end="57:17">x</name></decl>, <decl pos:start="57:20" pos:end="57:20"><type ref="prev" pos:start="57:13" pos:end="57:15"/><name pos:start="57:20" pos:end="57:20">h</name></decl>;</decl_stmt>

            <decl_stmt pos:start="59:13" pos:end="59:29"><decl pos:start="59:13" pos:end="59:28"><type pos:start="59:13" pos:end="59:25"><name pos:start="59:13" pos:end="59:20">unsigned</name> <name pos:start="59:22" pos:end="59:25">long</name></type> <name pos:start="59:27" pos:end="59:28">x2</name></decl>;</decl_stmt>

            <decl_stmt pos:start="61:13" pos:end="65:72"><decl pos:start="61:13" pos:end="65:71"><type pos:start="61:13" pos:end="61:25"><name pos:start="61:13" pos:end="61:20">unsigned</name> <name pos:start="61:22" pos:end="61:25">long</name></type> <name pos:start="61:27" pos:end="61:32">offset</name> <init pos:start="61:34" pos:end="65:71">= <expr pos:start="61:36" pos:end="65:71"><call pos:start="61:36" pos:end="65:71"><name pos:start="61:36" pos:end="61:48">find_next_bit</name><argument_list pos:start="61:49" pos:end="65:71">(<argument pos:start="61:50" pos:end="61:77"><expr pos:start="61:50" pos:end="61:77"><operator pos:start="61:50" pos:end="61:50">(</operator><name pos:start="61:51" pos:end="61:58">unsigned</name> <name pos:start="61:60" pos:end="61:63">long</name> <operator pos:start="61:65" pos:end="61:65">*</operator><operator pos:start="61:66" pos:end="61:66">)</operator> <operator pos:start="61:68" pos:end="61:68">&amp;</operator><name pos:start="61:69" pos:end="61:77"><name pos:start="61:69" pos:end="61:70">vs</name><operator pos:start="61:71" pos:end="61:72">-&gt;</operator><name pos:start="61:73" pos:end="61:77">dirty</name></name></expr></argument>,

                                                 <argument pos:start="63:50" pos:end="63:75"><expr pos:start="63:50" pos:end="63:75"><name pos:start="63:50" pos:end="63:55">height</name> <operator pos:start="63:57" pos:end="63:57">*</operator> <call pos:start="63:59" pos:end="63:75"><name pos:start="63:59" pos:end="63:71">VNC_DIRTY_BPL</name><argument_list pos:start="63:72" pos:end="63:75">(<argument pos:start="63:73" pos:end="63:74"><expr pos:start="63:73" pos:end="63:74"><name pos:start="63:73" pos:end="63:74">vs</name></expr></argument>)</argument_list></call></expr></argument>,

                                                 <argument pos:start="65:50" pos:end="65:70"><expr pos:start="65:50" pos:end="65:70"><name pos:start="65:50" pos:end="65:50">y</name> <operator pos:start="65:52" pos:end="65:52">*</operator> <call pos:start="65:54" pos:end="65:70"><name pos:start="65:54" pos:end="65:66">VNC_DIRTY_BPL</name><argument_list pos:start="65:67" pos:end="65:70">(<argument pos:start="65:68" pos:end="65:69"><expr pos:start="65:68" pos:end="65:69"><name pos:start="65:68" pos:end="65:69">vs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt pos:start="67:13" pos:end="73:13"><if pos:start="67:13" pos:end="73:13">if <condition pos:start="67:16" pos:end="67:53">(<expr pos:start="67:17" pos:end="67:52"><name pos:start="67:17" pos:end="67:22">offset</name> <operator pos:start="67:24" pos:end="67:25">==</operator> <name pos:start="67:27" pos:end="67:32">height</name> <operator pos:start="67:34" pos:end="67:34">*</operator> <call pos:start="67:36" pos:end="67:52"><name pos:start="67:36" pos:end="67:48">VNC_DIRTY_BPL</name><argument_list pos:start="67:49" pos:end="67:52">(<argument pos:start="67:50" pos:end="67:51"><expr pos:start="67:50" pos:end="67:51"><name pos:start="67:50" pos:end="67:51">vs</name></expr></argument>)</argument_list></call></expr>)</condition> <block pos:start="67:55" pos:end="73:13">{<block_content pos:start="71:17" pos:end="71:22">

                <comment type="block" pos:start="69:17" pos:end="69:40">/* no more dirty bits */</comment>

                <break pos:start="71:17" pos:end="71:22">break;</break>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="75:13" pos:end="75:43"><expr pos:start="75:13" pos:end="75:42"><name pos:start="75:13" pos:end="75:13">y</name> <operator pos:start="75:15" pos:end="75:15">=</operator> <name pos:start="75:17" pos:end="75:22">offset</name> <operator pos:start="75:24" pos:end="75:24">/</operator> <call pos:start="75:26" pos:end="75:42"><name pos:start="75:26" pos:end="75:38">VNC_DIRTY_BPL</name><argument_list pos:start="75:39" pos:end="75:42">(<argument pos:start="75:40" pos:end="75:41"><expr pos:start="75:40" pos:end="75:41"><name pos:start="75:40" pos:end="75:41">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="77:13" pos:end="77:43"><expr pos:start="77:13" pos:end="77:42"><name pos:start="77:13" pos:end="77:13">x</name> <operator pos:start="77:15" pos:end="77:15">=</operator> <name pos:start="77:17" pos:end="77:22">offset</name> <operator pos:start="77:24" pos:end="77:24">%</operator> <call pos:start="77:26" pos:end="77:42"><name pos:start="77:26" pos:end="77:38">VNC_DIRTY_BPL</name><argument_list pos:start="77:39" pos:end="77:42">(<argument pos:start="77:40" pos:end="77:41"><expr pos:start="77:40" pos:end="77:41"><name pos:start="77:40" pos:end="77:41">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="79:13" pos:end="81:58"><expr pos:start="79:13" pos:end="81:57"><name pos:start="79:13" pos:end="79:14">x2</name> <operator pos:start="79:16" pos:end="79:16">=</operator> <call pos:start="79:18" pos:end="81:57"><name pos:start="79:18" pos:end="79:35">find_next_zero_bit</name><argument_list pos:start="79:36" pos:end="81:57">(<argument pos:start="79:37" pos:end="79:67"><expr pos:start="79:37" pos:end="79:67"><operator pos:start="79:37" pos:end="79:37">(</operator><name pos:start="79:38" pos:end="79:45">unsigned</name> <name pos:start="79:47" pos:end="79:50">long</name> <operator pos:start="79:52" pos:end="79:52">*</operator><operator pos:start="79:53" pos:end="79:53">)</operator> <operator pos:start="79:55" pos:end="79:55">&amp;</operator><name pos:start="79:56" pos:end="79:67"><name pos:start="79:56" pos:end="79:57">vs</name><operator pos:start="79:58" pos:end="79:59">-&gt;</operator><name pos:start="79:60" pos:end="79:64">dirty</name><index pos:start="79:65" pos:end="79:67">[<expr pos:start="79:66" pos:end="79:66"><name pos:start="79:66" pos:end="79:66">y</name></expr>]</index></name></expr></argument>,

                                    <argument pos:start="81:37" pos:end="81:53"><expr pos:start="81:37" pos:end="81:53"><call pos:start="81:37" pos:end="81:53"><name pos:start="81:37" pos:end="81:49">VNC_DIRTY_BPL</name><argument_list pos:start="81:50" pos:end="81:53">(<argument pos:start="81:51" pos:end="81:52"><expr pos:start="81:51" pos:end="81:52"><name pos:start="81:51" pos:end="81:52">vs</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="81:56" pos:end="81:56"><expr pos:start="81:56" pos:end="81:56"><name pos:start="81:56" pos:end="81:56">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="83:13" pos:end="83:50"><expr pos:start="83:13" pos:end="83:49"><call pos:start="83:13" pos:end="83:49"><name pos:start="83:13" pos:end="83:24">bitmap_clear</name><argument_list pos:start="83:25" pos:end="83:49">(<argument pos:start="83:26" pos:end="83:37"><expr pos:start="83:26" pos:end="83:37"><name pos:start="83:26" pos:end="83:37"><name pos:start="83:26" pos:end="83:27">vs</name><operator pos:start="83:28" pos:end="83:29">-&gt;</operator><name pos:start="83:30" pos:end="83:34">dirty</name><index pos:start="83:35" pos:end="83:37">[<expr pos:start="83:36" pos:end="83:36"><name pos:start="83:36" pos:end="83:36">y</name></expr>]</index></name></expr></argument>, <argument pos:start="83:40" pos:end="83:40"><expr pos:start="83:40" pos:end="83:40"><name pos:start="83:40" pos:end="83:40">x</name></expr></argument>, <argument pos:start="83:43" pos:end="83:48"><expr pos:start="83:43" pos:end="83:48"><name pos:start="83:43" pos:end="83:44">x2</name> <operator pos:start="83:46" pos:end="83:46">-</operator> <name pos:start="83:48" pos:end="83:48">x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="85:13" pos:end="85:66"><expr pos:start="85:13" pos:end="85:65"><name pos:start="85:13" pos:end="85:13">h</name> <operator pos:start="85:15" pos:end="85:15">=</operator> <call pos:start="85:17" pos:end="85:65"><name pos:start="85:17" pos:end="85:43">find_and_clear_dirty_height</name><argument_list pos:start="85:44" pos:end="85:65">(<argument pos:start="85:45" pos:end="85:46"><expr pos:start="85:45" pos:end="85:46"><name pos:start="85:45" pos:end="85:46">vs</name></expr></argument>, <argument pos:start="85:49" pos:end="85:49"><expr pos:start="85:49" pos:end="85:49"><name pos:start="85:49" pos:end="85:49">y</name></expr></argument>, <argument pos:start="85:52" pos:end="85:52"><expr pos:start="85:52" pos:end="85:52"><name pos:start="85:52" pos:end="85:52">x</name></expr></argument>, <argument pos:start="85:55" pos:end="85:56"><expr pos:start="85:55" pos:end="85:56"><name pos:start="85:55" pos:end="85:56">x2</name></expr></argument>, <argument pos:start="85:59" pos:end="85:64"><expr pos:start="85:59" pos:end="85:64"><name pos:start="85:59" pos:end="85:64">height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="87:13" pos:end="89:74"><expr pos:start="87:13" pos:end="89:73"><name pos:start="87:13" pos:end="87:13">n</name> <operator pos:start="87:15" pos:end="87:16">+=</operator> <call pos:start="87:18" pos:end="89:73"><name pos:start="87:18" pos:end="87:33">vnc_job_add_rect</name><argument_list pos:start="87:34" pos:end="89:73">(<argument pos:start="87:35" pos:end="87:37"><expr pos:start="87:35" pos:end="87:37"><name pos:start="87:35" pos:end="87:37">job</name></expr></argument>, <argument pos:start="87:40" pos:end="87:67"><expr pos:start="87:40" pos:end="87:67"><name pos:start="87:40" pos:end="87:40">x</name> <operator pos:start="87:42" pos:end="87:42">*</operator> <name pos:start="87:44" pos:end="87:67">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>, <argument pos:start="87:70" pos:end="87:70"><expr pos:start="87:70" pos:end="87:70"><name pos:start="87:70" pos:end="87:70">y</name></expr></argument>,

                                  <argument pos:start="89:35" pos:end="89:69"><expr pos:start="89:35" pos:end="89:69"><operator pos:start="89:35" pos:end="89:35">(</operator><name pos:start="89:36" pos:end="89:37">x2</name> <operator pos:start="89:39" pos:end="89:39">-</operator> <name pos:start="89:41" pos:end="89:41">x</name><operator pos:start="89:42" pos:end="89:42">)</operator> <operator pos:start="89:44" pos:end="89:44">*</operator> <name pos:start="89:46" pos:end="89:69">VNC_DIRTY_PIXELS_PER_BIT</name></expr></argument>, <argument pos:start="89:72" pos:end="89:72"><expr pos:start="89:72" pos:end="89:72"><name pos:start="89:72" pos:end="89:72">h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>



        <expr_stmt pos:start="95:9" pos:end="95:26"><expr pos:start="95:9" pos:end="95:25"><call pos:start="95:9" pos:end="95:25"><name pos:start="95:9" pos:end="95:20">vnc_job_push</name><argument_list pos:start="95:21" pos:end="95:25">(<argument pos:start="95:22" pos:end="95:24"><expr pos:start="95:22" pos:end="95:24"><name pos:start="95:22" pos:end="95:24">job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="97:9" pos:end="97:29"><expr pos:start="97:9" pos:end="97:28"><name pos:start="97:9" pos:end="97:24"><name pos:start="97:9" pos:end="97:10">vs</name><operator pos:start="97:11" pos:end="97:12">-&gt;</operator><name pos:start="97:13" pos:end="97:24">force_update</name></name> <operator pos:start="97:26" pos:end="97:26">=</operator> <literal type="number" pos:start="97:28" pos:end="97:28">0</literal></expr>;</expr_stmt>

        <return pos:start="99:9" pos:end="99:17">return <expr pos:start="99:16" pos:end="99:16"><name pos:start="99:16" pos:end="99:16">n</name></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="105:5" pos:end="113:5"><if pos:start="105:5" pos:end="109:5">if <condition pos:start="105:8" pos:end="105:24">(<expr pos:start="105:9" pos:end="105:23"><name pos:start="105:9" pos:end="105:17"><name pos:start="105:9" pos:end="105:10">vs</name><operator pos:start="105:11" pos:end="105:12">-&gt;</operator><name pos:start="105:13" pos:end="105:17">csock</name></name> <operator pos:start="105:19" pos:end="105:20">==</operator> <operator pos:start="105:22" pos:end="105:22">-</operator><literal type="number" pos:start="105:23" pos:end="105:23">1</literal></expr>)</condition> <block pos:start="105:26" pos:end="109:5">{<block_content pos:start="107:9" pos:end="107:34">

        <expr_stmt pos:start="107:9" pos:end="107:34"><expr pos:start="107:9" pos:end="107:33"><call pos:start="107:9" pos:end="107:33"><name pos:start="107:9" pos:end="107:29">vnc_disconnect_finish</name><argument_list pos:start="107:30" pos:end="107:33">(<argument pos:start="107:31" pos:end="107:32"><expr pos:start="107:31" pos:end="107:32"><name pos:start="107:31" pos:end="107:32">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if> <if type="elseif" pos:start="109:7" pos:end="113:5">else if <condition pos:start="109:15" pos:end="109:20">(<expr pos:start="109:16" pos:end="109:19"><name pos:start="109:16" pos:end="109:19">sync</name></expr>)</condition> <block pos:start="109:22" pos:end="113:5">{<block_content pos:start="111:9" pos:end="111:26">

        <expr_stmt pos:start="111:9" pos:end="111:26"><expr pos:start="111:9" pos:end="111:25"><call pos:start="111:9" pos:end="111:25"><name pos:start="111:9" pos:end="111:21">vnc_jobs_join</name><argument_list pos:start="111:22" pos:end="111:25">(<argument pos:start="111:23" pos:end="111:24"><expr pos:start="111:23" pos:end="111:24"><name pos:start="111:23" pos:end="111:24">vs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <return pos:start="117:5" pos:end="117:13">return <expr pos:start="117:12" pos:end="117:12"><literal type="number" pos:start="117:12" pos:end="117:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
