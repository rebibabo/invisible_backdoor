<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/3595.c" pos:tabs="8"><function pos:start="1:1" pos:end="77:1"><type pos:start="1:1" pos:end="1:19"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:15">unsigned</name> <name pos:start="1:17" pos:end="1:19">int</name></type> <name pos:start="1:21" pos:end="1:31">mszh_decomp</name><parameter_list pos:start="1:32" pos:end="1:121">(<parameter pos:start="1:33" pos:end="1:60"><decl pos:start="1:33" pos:end="1:60"><type pos:start="1:33" pos:end="1:60"><specifier pos:start="1:33" pos:end="1:37">const</specifier> <name pos:start="1:39" pos:end="1:46">unsigned</name> <name pos:start="1:48" pos:end="1:51">char</name> <modifier pos:start="1:53" pos:end="1:53">*</modifier></type> <name pos:start="1:55" pos:end="1:60">srcptr</name></decl></parameter>, <parameter pos:start="1:63" pos:end="1:72"><decl pos:start="1:63" pos:end="1:72"><type pos:start="1:63" pos:end="1:72"><name pos:start="1:63" pos:end="1:65">int</name></type> <name pos:start="1:67" pos:end="1:72">srclen</name></decl></parameter>, <parameter pos:start="1:75" pos:end="1:97"><decl pos:start="1:75" pos:end="1:97"><type pos:start="1:75" pos:end="1:97"><name pos:start="1:75" pos:end="1:82">unsigned</name> <name pos:start="1:84" pos:end="1:87">char</name> <modifier pos:start="1:89" pos:end="1:89">*</modifier></type> <name pos:start="1:91" pos:end="1:97">destptr</name></decl></parameter>, <parameter pos:start="1:100" pos:end="1:120"><decl pos:start="1:100" pos:end="1:120"><type pos:start="1:100" pos:end="1:120"><name pos:start="1:100" pos:end="1:107">unsigned</name> <name pos:start="1:109" pos:end="1:111">int</name></type> <name pos:start="1:113" pos:end="1:120">destsize</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="77:1">{<block_content pos:start="5:5" pos:end="75:33">

    <decl_stmt pos:start="5:5" pos:end="5:41"><decl pos:start="5:5" pos:end="5:40"><type pos:start="5:5" pos:end="5:19"><name pos:start="5:5" pos:end="5:12">unsigned</name> <name pos:start="5:14" pos:end="5:17">char</name> <modifier pos:start="5:19" pos:end="5:19">*</modifier></type><name pos:start="5:20" pos:end="5:30">destptr_bak</name> <init pos:start="5:32" pos:end="5:40">= <expr pos:start="5:34" pos:end="5:40"><name pos:start="5:34" pos:end="5:40">destptr</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:52"><decl pos:start="7:5" pos:end="7:51"><type pos:start="7:5" pos:end="7:19"><name pos:start="7:5" pos:end="7:12">unsigned</name> <name pos:start="7:14" pos:end="7:17">char</name> <modifier pos:start="7:19" pos:end="7:19">*</modifier></type><name pos:start="7:20" pos:end="7:30">destptr_end</name> <init pos:start="7:32" pos:end="7:51">= <expr pos:start="7:34" pos:end="7:51"><name pos:start="7:34" pos:end="7:40">destptr</name> <operator pos:start="7:42" pos:end="7:42">+</operator> <name pos:start="7:44" pos:end="7:51">destsize</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:54"><decl pos:start="9:5" pos:end="9:53"><type pos:start="9:5" pos:end="9:25"><specifier pos:start="9:5" pos:end="9:9">const</specifier> <name pos:start="9:11" pos:end="9:18">unsigned</name> <name pos:start="9:20" pos:end="9:23">char</name> <modifier pos:start="9:25" pos:end="9:25">*</modifier></type><name pos:start="9:26" pos:end="9:35">srcptr_end</name> <init pos:start="9:37" pos:end="9:53">= <expr pos:start="9:39" pos:end="9:53"><name pos:start="9:39" pos:end="9:44">srcptr</name> <operator pos:start="9:46" pos:end="9:46">+</operator> <name pos:start="9:48" pos:end="9:53">srclen</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">unsigned</name></type> <name pos:start="11:14" pos:end="11:17">mask</name> <init pos:start="11:19" pos:end="11:29">= <expr pos:start="11:21" pos:end="11:29"><operator pos:start="11:21" pos:end="11:21">*</operator><name pos:start="11:22" pos:end="11:27">srcptr</name><operator pos:start="11:28" pos:end="11:29">++</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:28"><decl pos:start="13:5" pos:end="13:27"><type pos:start="13:5" pos:end="13:12"><name pos:start="13:5" pos:end="13:12">unsigned</name></type> <name pos:start="13:14" pos:end="13:20">maskbit</name> <init pos:start="13:22" pos:end="13:27">= <expr pos:start="13:24" pos:end="13:27"><literal type="number" pos:start="13:24" pos:end="13:27">0x80</literal></expr></init></decl>;</decl_stmt>



    <while pos:start="17:5" pos:end="71:5">while <condition pos:start="17:11" pos:end="17:56">(<expr pos:start="17:12" pos:end="17:55"><name pos:start="17:12" pos:end="17:17">srcptr</name> <operator pos:start="17:19" pos:end="17:19">&lt;</operator> <name pos:start="17:21" pos:end="17:30">srcptr_end</name> <operator pos:start="17:32" pos:end="17:33">&amp;&amp;</operator> <name pos:start="17:35" pos:end="17:41">destptr</name> <operator pos:start="17:43" pos:end="17:43">&lt;</operator> <name pos:start="17:45" pos:end="17:55">destptr_end</name></expr>)</condition> <block pos:start="17:58" pos:end="71:5">{<block_content pos:start="19:9" pos:end="69:9">

        <if_stmt pos:start="19:9" pos:end="45:9"><if pos:start="19:9" pos:end="27:9">if <condition pos:start="19:12" pos:end="19:30">(<expr pos:start="19:13" pos:end="19:29"><operator pos:start="19:13" pos:end="19:13">!</operator><operator pos:start="19:14" pos:end="19:14">(</operator><name pos:start="19:15" pos:end="19:18">mask</name> <operator pos:start="19:20" pos:end="19:20">&amp;</operator> <name pos:start="19:22" pos:end="19:28">maskbit</name><operator pos:start="19:29" pos:end="19:29">)</operator></expr>)</condition> <block pos:start="19:32" pos:end="27:9">{<block_content pos:start="21:13" pos:end="25:24">

            <expr_stmt pos:start="21:13" pos:end="21:39"><expr pos:start="21:13" pos:end="21:38"><call pos:start="21:13" pos:end="21:38"><name pos:start="21:13" pos:end="21:18">memcpy</name><argument_list pos:start="21:19" pos:end="21:38">(<argument pos:start="21:20" pos:end="21:26"><expr pos:start="21:20" pos:end="21:26"><name pos:start="21:20" pos:end="21:26">destptr</name></expr></argument>, <argument pos:start="21:29" pos:end="21:34"><expr pos:start="21:29" pos:end="21:34"><name pos:start="21:29" pos:end="21:34">srcptr</name></expr></argument>, <argument pos:start="21:37" pos:end="21:37"><expr pos:start="21:37" pos:end="21:37"><literal type="number" pos:start="21:37" pos:end="21:37">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="23:13" pos:end="23:25"><expr pos:start="23:13" pos:end="23:24"><name pos:start="23:13" pos:end="23:19">destptr</name> <operator pos:start="23:21" pos:end="23:22">+=</operator> <literal type="number" pos:start="23:24" pos:end="23:24">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="25:13" pos:end="25:24"><expr pos:start="25:13" pos:end="25:23"><name pos:start="25:13" pos:end="25:18">srcptr</name> <operator pos:start="25:20" pos:end="25:21">+=</operator> <literal type="number" pos:start="25:23" pos:end="25:23">4</literal></expr>;</expr_stmt>

        </block_content>}</block></if> <else pos:start="27:11" pos:end="45:9">else <block pos:start="27:16" pos:end="45:9">{<block_content pos:start="29:13" pos:end="43:27">

            <decl_stmt pos:start="29:13" pos:end="29:56"><decl pos:start="29:13" pos:end="29:55"><type pos:start="29:13" pos:end="29:20"><name pos:start="29:13" pos:end="29:20">unsigned</name></type> <name pos:start="29:22" pos:end="29:24">ofs</name> <init pos:start="29:26" pos:end="29:55">= <expr pos:start="29:28" pos:end="29:55"><call pos:start="29:28" pos:end="29:55"><name pos:start="29:28" pos:end="29:46">bytestream_get_le16</name><argument_list pos:start="29:47" pos:end="29:55">(<argument pos:start="29:48" pos:end="29:54"><expr pos:start="29:48" pos:end="29:54"><operator pos:start="29:48" pos:end="29:48">&amp;</operator><name pos:start="29:49" pos:end="29:54">srcptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt pos:start="31:13" pos:end="31:43"><decl pos:start="31:13" pos:end="31:42"><type pos:start="31:13" pos:end="31:20"><name pos:start="31:13" pos:end="31:20">unsigned</name></type> <name pos:start="31:22" pos:end="31:24">cnt</name> <init pos:start="31:26" pos:end="31:42">= <expr pos:start="31:28" pos:end="31:42"><operator pos:start="31:28" pos:end="31:28">(</operator><name pos:start="31:29" pos:end="31:31">ofs</name> <operator pos:start="31:33" pos:end="31:34">&gt;&gt;</operator> <literal type="number" pos:start="31:36" pos:end="31:37">11</literal><operator pos:start="31:38" pos:end="31:38">)</operator> <operator pos:start="31:40" pos:end="31:40">+</operator> <literal type="number" pos:start="31:42" pos:end="31:42">1</literal></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="33:13" pos:end="33:25"><expr pos:start="33:13" pos:end="33:24"><name pos:start="33:13" pos:end="33:15">ofs</name> <operator pos:start="33:17" pos:end="33:18">&amp;=</operator> <literal type="number" pos:start="33:20" pos:end="33:24">0x7ff</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="35:13" pos:end="35:52"><expr pos:start="35:13" pos:end="35:51"><name pos:start="35:13" pos:end="35:15">ofs</name> <operator pos:start="35:17" pos:end="35:17">=</operator> <call pos:start="35:19" pos:end="35:51"><name pos:start="35:19" pos:end="35:23">FFMIN</name><argument_list pos:start="35:24" pos:end="35:51">(<argument pos:start="35:25" pos:end="35:27"><expr pos:start="35:25" pos:end="35:27"><name pos:start="35:25" pos:end="35:27">ofs</name></expr></argument>, <argument pos:start="35:30" pos:end="35:50"><expr pos:start="35:30" pos:end="35:50"><name pos:start="35:30" pos:end="35:36">destptr</name> <operator pos:start="35:38" pos:end="35:38">-</operator> <name pos:start="35:40" pos:end="35:50">destptr_bak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="37:13" pos:end="37:21"><expr pos:start="37:13" pos:end="37:20"><name pos:start="37:13" pos:end="37:15">cnt</name> <operator pos:start="37:17" pos:end="37:18">*=</operator> <literal type="number" pos:start="37:20" pos:end="37:20">4</literal></expr>;</expr_stmt>

            <expr_stmt pos:start="39:13" pos:end="39:52"><expr pos:start="39:13" pos:end="39:51"><name pos:start="39:13" pos:end="39:15">cnt</name> <operator pos:start="39:17" pos:end="39:17">=</operator> <call pos:start="39:19" pos:end="39:51"><name pos:start="39:19" pos:end="39:23">FFMIN</name><argument_list pos:start="39:24" pos:end="39:51">(<argument pos:start="39:25" pos:end="39:27"><expr pos:start="39:25" pos:end="39:27"><name pos:start="39:25" pos:end="39:27">cnt</name></expr></argument>, <argument pos:start="39:30" pos:end="39:50"><expr pos:start="39:30" pos:end="39:50"><name pos:start="39:30" pos:end="39:40">destptr_end</name> <operator pos:start="39:42" pos:end="39:42">-</operator> <name pos:start="39:44" pos:end="39:50">destptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:49"><expr pos:start="41:13" pos:end="41:48"><call pos:start="41:13" pos:end="41:48"><name pos:start="41:13" pos:end="41:29">av_memcpy_backptr</name><argument_list pos:start="41:30" pos:end="41:48">(<argument pos:start="41:31" pos:end="41:37"><expr pos:start="41:31" pos:end="41:37"><name pos:start="41:31" pos:end="41:37">destptr</name></expr></argument>, <argument pos:start="41:40" pos:end="41:42"><expr pos:start="41:40" pos:end="41:42"><name pos:start="41:40" pos:end="41:42">ofs</name></expr></argument>, <argument pos:start="41:45" pos:end="41:47"><expr pos:start="41:45" pos:end="41:47"><name pos:start="41:45" pos:end="41:47">cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:27"><expr pos:start="43:13" pos:end="43:26"><name pos:start="43:13" pos:end="43:19">destptr</name> <operator pos:start="43:21" pos:end="43:22">+=</operator> <name pos:start="43:24" pos:end="43:26">cnt</name></expr>;</expr_stmt>

        </block_content>}</block></else></if_stmt>

        <expr_stmt pos:start="47:9" pos:end="47:22"><expr pos:start="47:9" pos:end="47:21"><name pos:start="47:9" pos:end="47:15">maskbit</name> <operator pos:start="47:17" pos:end="47:19">&gt;&gt;=</operator> <literal type="number" pos:start="47:21" pos:end="47:21">1</literal></expr>;</expr_stmt>

        <if_stmt pos:start="49:9" pos:end="69:9"><if pos:start="49:9" pos:end="69:9">if <condition pos:start="49:12" pos:end="49:21">(<expr pos:start="49:13" pos:end="49:20"><operator pos:start="49:13" pos:end="49:13">!</operator><name pos:start="49:14" pos:end="49:20">maskbit</name></expr>)</condition> <block pos:start="49:23" pos:end="69:9">{<block_content pos:start="51:13" pos:end="67:27">

            <expr_stmt pos:start="51:13" pos:end="51:29"><expr pos:start="51:13" pos:end="51:28"><name pos:start="51:13" pos:end="51:16">mask</name> <operator pos:start="51:18" pos:end="51:18">=</operator> <operator pos:start="51:20" pos:end="51:20">*</operator><name pos:start="51:21" pos:end="51:26">srcptr</name><operator pos:start="51:27" pos:end="51:28">++</operator></expr>;</expr_stmt>

            <while pos:start="53:13" pos:end="65:13">while <condition pos:start="53:19" pos:end="53:25">(<expr pos:start="53:20" pos:end="53:24"><operator pos:start="53:20" pos:end="53:20">!</operator><name pos:start="53:21" pos:end="53:24">mask</name></expr>)</condition> <block pos:start="53:27" pos:end="65:13">{<block_content pos:start="55:17" pos:end="63:33">

                <if_stmt pos:start="55:17" pos:end="55:82"><if pos:start="55:17" pos:end="55:82">if <condition pos:start="55:20" pos:end="55:75">(<expr pos:start="55:21" pos:end="55:74"><name pos:start="55:21" pos:end="55:31">destptr_end</name> <operator pos:start="55:33" pos:end="55:33">-</operator> <name pos:start="55:35" pos:end="55:41">destptr</name> <operator pos:start="55:43" pos:end="55:43">&lt;</operator> <literal type="number" pos:start="55:45" pos:end="55:46">32</literal> <operator pos:start="55:48" pos:end="55:49">||</operator> <name pos:start="55:51" pos:end="55:60">srcptr_end</name> <operator pos:start="55:62" pos:end="55:62">-</operator> <name pos:start="55:64" pos:end="55:69">srcptr</name> <operator pos:start="55:71" pos:end="55:71">&lt;</operator> <literal type="number" pos:start="55:73" pos:end="55:74">32</literal></expr>)</condition><block type="pseudo" pos:start="55:77" pos:end="55:82"><block_content pos:start="55:77" pos:end="55:82"> <break pos:start="55:77" pos:end="55:82">break;</break></block_content></block></if></if_stmt>

                <expr_stmt pos:start="57:17" pos:end="57:44"><expr pos:start="57:17" pos:end="57:43"><call pos:start="57:17" pos:end="57:43"><name pos:start="57:17" pos:end="57:22">memcpy</name><argument_list pos:start="57:23" pos:end="57:43">(<argument pos:start="57:24" pos:end="57:30"><expr pos:start="57:24" pos:end="57:30"><name pos:start="57:24" pos:end="57:30">destptr</name></expr></argument>, <argument pos:start="57:33" pos:end="57:38"><expr pos:start="57:33" pos:end="57:38"><name pos:start="57:33" pos:end="57:38">srcptr</name></expr></argument>, <argument pos:start="57:41" pos:end="57:42"><expr pos:start="57:41" pos:end="57:42"><literal type="number" pos:start="57:41" pos:end="57:42">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="59:17" pos:end="59:30"><expr pos:start="59:17" pos:end="59:29"><name pos:start="59:17" pos:end="59:23">destptr</name> <operator pos:start="59:25" pos:end="59:26">+=</operator> <literal type="number" pos:start="59:28" pos:end="59:29">32</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="61:17" pos:end="61:29"><expr pos:start="61:17" pos:end="61:28"><name pos:start="61:17" pos:end="61:22">srcptr</name> <operator pos:start="61:24" pos:end="61:25">+=</operator> <literal type="number" pos:start="61:27" pos:end="61:28">32</literal></expr>;</expr_stmt>

                <expr_stmt pos:start="63:17" pos:end="63:33"><expr pos:start="63:17" pos:end="63:32"><name pos:start="63:17" pos:end="63:20">mask</name> <operator pos:start="63:22" pos:end="63:22">=</operator> <operator pos:start="63:24" pos:end="63:24">*</operator><name pos:start="63:25" pos:end="63:30">srcptr</name><operator pos:start="63:31" pos:end="63:32">++</operator></expr>;</expr_stmt>

            </block_content>}</block></while>

            <expr_stmt pos:start="67:13" pos:end="67:27"><expr pos:start="67:13" pos:end="67:26"><name pos:start="67:13" pos:end="67:19">maskbit</name> <operator pos:start="67:21" pos:end="67:21">=</operator> <literal type="number" pos:start="67:23" pos:end="67:26">0x80</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></while>



    <return pos:start="75:5" pos:end="75:33">return <expr pos:start="75:12" pos:end="75:32"><name pos:start="75:12" pos:end="75:18">destptr</name> <operator pos:start="75:20" pos:end="75:20">-</operator> <name pos:start="75:22" pos:end="75:32">destptr_bak</name></expr>;</return>

</block_content>}</block></function>
</unit>
