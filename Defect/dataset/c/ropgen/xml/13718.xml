<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/13718.c" pos:tabs="8"><function pos:start="1:1" pos:end="57:1"><type pos:start="1:1" pos:end="1:3"><name pos:start="1:1" pos:end="1:3">int</name></type> <name pos:start="1:5" pos:end="1:8">main</name><parameter_list pos:start="1:9" pos:end="1:14">(<parameter pos:start="1:10" pos:end="1:13"><decl pos:start="1:10" pos:end="1:13"><type pos:start="1:10" pos:end="1:13"><name pos:start="1:10" pos:end="1:13">void</name></type></decl></parameter>)</parameter_list><block pos:start="1:15" pos:end="57:1">{<block_content pos:start="3:5" pos:end="55:13">

    <decl_stmt pos:start="3:5" pos:end="3:12"><decl pos:start="3:5" pos:end="3:9"><type pos:start="3:5" pos:end="3:7"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:9">i</name></decl>,<decl pos:start="3:11" pos:end="3:11"><type ref="prev" pos:start="3:5" pos:end="3:7"/><name pos:start="3:11" pos:end="3:11">k</name></decl>;</decl_stmt>

    <decl_stmt pos:start="5:5" pos:end="5:39"><decl pos:start="5:5" pos:end="5:26"><type pos:start="5:5" pos:end="5:16"><name pos:start="5:5" pos:end="5:14">AVTreeNode</name> <modifier pos:start="5:16" pos:end="5:16">*</modifier></type><name pos:start="5:17" pos:end="5:20">root</name><init pos:start="5:21" pos:end="5:26">= <expr pos:start="5:23" pos:end="5:26"><name pos:start="5:23" pos:end="5:26">NULL</name></expr></init></decl>, <decl pos:start="5:29" pos:end="5:38"><type ref="prev" pos:start="5:5" pos:end="5:16"><modifier pos:start="5:29" pos:end="5:29">*</modifier></type><name pos:start="5:30" pos:end="5:33">node</name><init pos:start="5:34" pos:end="5:38">=<expr pos:start="5:35" pos:end="5:38"><name pos:start="5:35" pos:end="5:38">NULL</name></expr></init></decl>;</decl_stmt>



    <for pos:start="9:5" pos:end="53:5">for<control pos:start="9:8" pos:end="9:26">(<init pos:start="9:9" pos:end="9:12"><expr pos:start="9:9" pos:end="9:11"><name pos:start="9:9" pos:end="9:9">i</name><operator pos:start="9:10" pos:end="9:10">=</operator><literal type="number" pos:start="9:11" pos:end="9:11">0</literal></expr>;</init> <condition pos:start="9:14" pos:end="9:21"><expr pos:start="9:14" pos:end="9:20"><name pos:start="9:14" pos:end="9:14">i</name><operator pos:start="9:15" pos:end="9:15">&lt;</operator><literal type="number" pos:start="9:16" pos:end="9:20">10000</literal></expr>;</condition> <incr pos:start="9:23" pos:end="9:25"><expr pos:start="9:23" pos:end="9:25"><name pos:start="9:23" pos:end="9:23">i</name><operator pos:start="9:24" pos:end="9:25">++</operator></expr></incr>)</control><block pos:start="9:27" pos:end="53:5">{<block_content pos:start="11:9" pos:end="51:9">

        <decl_stmt pos:start="11:9" pos:end="11:32"><decl pos:start="11:9" pos:end="11:31"><type pos:start="11:9" pos:end="11:11"><name pos:start="11:9" pos:end="11:11">int</name></type> <name pos:start="11:13" pos:end="11:13">j</name><init pos:start="11:14" pos:end="11:31">= <expr pos:start="11:16" pos:end="11:31"><operator pos:start="11:16" pos:end="11:16">(</operator><call pos:start="11:17" pos:end="11:24"><name pos:start="11:17" pos:end="11:22">random</name><argument_list pos:start="11:23" pos:end="11:24">()</argument_list></call><operator pos:start="11:25" pos:end="11:25">%</operator><literal type="number" pos:start="11:26" pos:end="11:30">86294</literal><operator pos:start="11:31" pos:end="11:31">)</operator></expr></init></decl>;</decl_stmt>

        <if_stmt pos:start="13:9" pos:end="21:9"><if pos:start="13:9" pos:end="21:9">if<condition pos:start="13:11" pos:end="13:29">(<expr pos:start="13:12" pos:end="13:28"><call pos:start="13:12" pos:end="13:22"><name pos:start="13:12" pos:end="13:16">check</name><argument_list pos:start="13:17" pos:end="13:22">(<argument pos:start="13:18" pos:end="13:21"><expr pos:start="13:18" pos:end="13:21"><name pos:start="13:18" pos:end="13:21">root</name></expr></argument>)</argument_list></call> <operator pos:start="13:24" pos:end="13:24">&gt;</operator> <literal type="number" pos:start="13:26" pos:end="13:28">999</literal></expr>)</condition><block pos:start="13:30" pos:end="21:9">{<block_content pos:start="15:13" pos:end="19:22">

            <expr_stmt pos:start="15:13" pos:end="15:62"><expr pos:start="15:13" pos:end="15:61"><call pos:start="15:13" pos:end="15:61"><name pos:start="15:13" pos:end="15:18">av_log</name><argument_list pos:start="15:19" pos:end="15:61">(<argument pos:start="15:20" pos:end="15:23"><expr pos:start="15:20" pos:end="15:23"><name pos:start="15:20" pos:end="15:23">NULL</name></expr></argument>, <argument pos:start="15:26" pos:end="15:37"><expr pos:start="15:26" pos:end="15:37"><name pos:start="15:26" pos:end="15:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="15:40" pos:end="15:57"><expr pos:start="15:40" pos:end="15:57"><literal type="string" pos:start="15:40" pos:end="15:57">"FATAL error %d\n"</literal></expr></argument>, <argument pos:start="15:60" pos:end="15:60"><expr pos:start="15:60" pos:end="15:60"><name pos:start="15:60" pos:end="15:60">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="17:9" pos:end="17:23"><expr pos:start="17:9" pos:end="17:22"><call pos:start="17:9" pos:end="17:22"><name pos:start="17:9" pos:end="17:13">print</name><argument_list pos:start="17:14" pos:end="17:22">(<argument pos:start="17:15" pos:end="17:18"><expr pos:start="17:15" pos:end="17:18"><name pos:start="17:15" pos:end="17:18">root</name></expr></argument>, <argument pos:start="17:21" pos:end="17:21"><expr pos:start="17:21" pos:end="17:21"><literal type="number" pos:start="17:21" pos:end="17:21">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <return pos:start="19:13" pos:end="19:22">return <expr pos:start="19:20" pos:end="19:21"><operator pos:start="19:20" pos:end="19:20">-</operator><literal type="number" pos:start="19:21" pos:end="19:21">1</literal></expr>;</return>

        </block_content>}</block></if></if_stmt>

        <expr_stmt pos:start="23:9" pos:end="23:57"><expr pos:start="23:9" pos:end="23:56"><call pos:start="23:9" pos:end="23:56"><name pos:start="23:9" pos:end="23:14">av_log</name><argument_list pos:start="23:15" pos:end="23:56">(<argument pos:start="23:16" pos:end="23:19"><expr pos:start="23:16" pos:end="23:19"><name pos:start="23:16" pos:end="23:19">NULL</name></expr></argument>, <argument pos:start="23:22" pos:end="23:33"><expr pos:start="23:22" pos:end="23:33"><name pos:start="23:22" pos:end="23:33">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="23:36" pos:end="23:52"><expr pos:start="23:36" pos:end="23:52"><literal type="string" pos:start="23:36" pos:end="23:52">"inserting %4d\n"</literal></expr></argument>, <argument pos:start="23:55" pos:end="23:55"><expr pos:start="23:55" pos:end="23:55"><name pos:start="23:55" pos:end="23:55">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="25:9" pos:end="27:48"><if pos:start="25:9" pos:end="27:48">if<condition pos:start="25:11" pos:end="25:17">(<expr pos:start="25:12" pos:end="25:16"><operator pos:start="25:12" pos:end="25:12">!</operator><name pos:start="25:13" pos:end="25:16">node</name></expr>)</condition><block type="pseudo" pos:start="27:13" pos:end="27:48"><block_content pos:start="27:13" pos:end="27:48">

            <expr_stmt pos:start="27:13" pos:end="27:48"><expr pos:start="27:13" pos:end="27:47"><name pos:start="27:13" pos:end="27:16">node</name><operator pos:start="27:17" pos:end="27:17">=</operator> <call pos:start="27:19" pos:end="27:47"><name pos:start="27:19" pos:end="27:28">av_mallocz</name><argument_list pos:start="27:29" pos:end="27:47">(<argument pos:start="27:30" pos:end="27:46"><expr pos:start="27:30" pos:end="27:46"><name pos:start="27:30" pos:end="27:46">av_tree_node_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt pos:start="29:9" pos:end="29:56"><expr pos:start="29:9" pos:end="29:55"><call pos:start="29:9" pos:end="29:55"><name pos:start="29:9" pos:end="29:22">av_tree_insert</name><argument_list pos:start="29:23" pos:end="29:55">(<argument pos:start="29:24" pos:end="29:28"><expr pos:start="29:24" pos:end="29:28"><operator pos:start="29:24" pos:end="29:24">&amp;</operator><name pos:start="29:25" pos:end="29:28">root</name></expr></argument>, <argument pos:start="29:31" pos:end="29:42"><expr pos:start="29:31" pos:end="29:42"><operator pos:start="29:31" pos:end="29:31">(</operator><name pos:start="29:32" pos:end="29:35">void</name><operator pos:start="29:36" pos:end="29:36">*</operator><operator pos:start="29:37" pos:end="29:37">)</operator><operator pos:start="29:38" pos:end="29:38">(</operator><name pos:start="29:39" pos:end="29:39">j</name><operator pos:start="29:40" pos:end="29:40">+</operator><literal type="number" pos:start="29:41" pos:end="29:41">1</literal><operator pos:start="29:42" pos:end="29:42">)</operator></expr></argument>, <argument pos:start="29:45" pos:end="29:47"><expr pos:start="29:45" pos:end="29:47"><name pos:start="29:45" pos:end="29:47">cmp</name></expr></argument>, <argument pos:start="29:50" pos:end="29:54"><expr pos:start="29:50" pos:end="29:54"><operator pos:start="29:50" pos:end="29:50">&amp;</operator><name pos:start="29:51" pos:end="29:54">node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt pos:start="33:9" pos:end="33:28"><expr pos:start="33:9" pos:end="33:27"><name pos:start="33:9" pos:end="33:9">j</name><operator pos:start="33:10" pos:end="33:10">=</operator> <operator pos:start="33:12" pos:end="33:12">(</operator><call pos:start="33:13" pos:end="33:20"><name pos:start="33:13" pos:end="33:18">random</name><argument_list pos:start="33:19" pos:end="33:20">()</argument_list></call><operator pos:start="33:21" pos:end="33:21">%</operator><literal type="number" pos:start="33:22" pos:end="33:26">86294</literal><operator pos:start="33:27" pos:end="33:27">)</operator></expr>;</expr_stmt>

        <expr_stmt pos:start="35:9" pos:end="35:55"><expr pos:start="35:9" pos:end="35:54"><name pos:start="35:9" pos:end="35:9">k</name><operator pos:start="35:10" pos:end="35:10">=</operator> <call pos:start="35:12" pos:end="35:54"><name pos:start="35:12" pos:end="35:23">av_tree_find</name><argument_list pos:start="35:24" pos:end="35:54">(<argument pos:start="35:25" pos:end="35:28"><expr pos:start="35:25" pos:end="35:28"><name pos:start="35:25" pos:end="35:28">root</name></expr></argument>, <argument pos:start="35:31" pos:end="35:42"><expr pos:start="35:31" pos:end="35:42"><operator pos:start="35:31" pos:end="35:31">(</operator><name pos:start="35:32" pos:end="35:35">void</name><operator pos:start="35:36" pos:end="35:36">*</operator><operator pos:start="35:37" pos:end="35:37">)</operator><operator pos:start="35:38" pos:end="35:38">(</operator><name pos:start="35:39" pos:end="35:39">j</name><operator pos:start="35:40" pos:end="35:40">+</operator><literal type="number" pos:start="35:41" pos:end="35:41">1</literal><operator pos:start="35:42" pos:end="35:42">)</operator></expr></argument>, <argument pos:start="35:45" pos:end="35:47"><expr pos:start="35:45" pos:end="35:47"><name pos:start="35:45" pos:end="35:47">cmp</name></expr></argument>, <argument pos:start="35:50" pos:end="35:53"><expr pos:start="35:50" pos:end="35:53"><name pos:start="35:50" pos:end="35:53">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt pos:start="37:9" pos:end="51:9"><if pos:start="37:9" pos:end="51:9">if<condition pos:start="37:11" pos:end="37:13">(<expr pos:start="37:12" pos:end="37:12"><name pos:start="37:12" pos:end="37:12">k</name></expr>)</condition><block pos:start="37:14" pos:end="51:9">{<block_content pos:start="39:13" pos:end="49:71">

            <decl_stmt pos:start="39:13" pos:end="39:35"><decl pos:start="39:13" pos:end="39:34"><type pos:start="39:13" pos:end="39:24"><name pos:start="39:13" pos:end="39:22">AVTreeNode</name> <modifier pos:start="39:24" pos:end="39:24">*</modifier></type><name pos:start="39:25" pos:end="39:29">node2</name><init pos:start="39:30" pos:end="39:34">=<expr pos:start="39:31" pos:end="39:34"><name pos:start="39:31" pos:end="39:34">NULL</name></expr></init></decl>;</decl_stmt>

            <expr_stmt pos:start="41:13" pos:end="41:60"><expr pos:start="41:13" pos:end="41:59"><call pos:start="41:13" pos:end="41:59"><name pos:start="41:13" pos:end="41:18">av_log</name><argument_list pos:start="41:19" pos:end="41:59">(<argument pos:start="41:20" pos:end="41:23"><expr pos:start="41:20" pos:end="41:23"><name pos:start="41:20" pos:end="41:23">NULL</name></expr></argument>, <argument pos:start="41:26" pos:end="41:37"><expr pos:start="41:26" pos:end="41:37"><name pos:start="41:26" pos:end="41:37">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="41:40" pos:end="41:55"><expr pos:start="41:40" pos:end="41:55"><literal type="string" pos:start="41:40" pos:end="41:55">"removing %4d\n"</literal></expr></argument>, <argument pos:start="41:58" pos:end="41:58"><expr pos:start="41:58" pos:end="41:58"><name pos:start="41:58" pos:end="41:58">j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="43:13" pos:end="43:61"><expr pos:start="43:13" pos:end="43:60"><call pos:start="43:13" pos:end="43:60"><name pos:start="43:13" pos:end="43:26">av_tree_insert</name><argument_list pos:start="43:27" pos:end="43:60">(<argument pos:start="43:28" pos:end="43:32"><expr pos:start="43:28" pos:end="43:32"><operator pos:start="43:28" pos:end="43:28">&amp;</operator><name pos:start="43:29" pos:end="43:32">root</name></expr></argument>, <argument pos:start="43:35" pos:end="43:46"><expr pos:start="43:35" pos:end="43:46"><operator pos:start="43:35" pos:end="43:35">(</operator><name pos:start="43:36" pos:end="43:39">void</name><operator pos:start="43:40" pos:end="43:40">*</operator><operator pos:start="43:41" pos:end="43:41">)</operator><operator pos:start="43:42" pos:end="43:42">(</operator><name pos:start="43:43" pos:end="43:43">j</name><operator pos:start="43:44" pos:end="43:44">+</operator><literal type="number" pos:start="43:45" pos:end="43:45">1</literal><operator pos:start="43:46" pos:end="43:46">)</operator></expr></argument>, <argument pos:start="43:49" pos:end="43:51"><expr pos:start="43:49" pos:end="43:51"><name pos:start="43:49" pos:end="43:51">cmp</name></expr></argument>, <argument pos:start="43:54" pos:end="43:59"><expr pos:start="43:54" pos:end="43:59"><operator pos:start="43:54" pos:end="43:54">&amp;</operator><name pos:start="43:55" pos:end="43:59">node2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="45:13" pos:end="45:59"><expr pos:start="45:13" pos:end="45:58"><name pos:start="45:13" pos:end="45:13">k</name><operator pos:start="45:14" pos:end="45:14">=</operator> <call pos:start="45:16" pos:end="45:58"><name pos:start="45:16" pos:end="45:27">av_tree_find</name><argument_list pos:start="45:28" pos:end="45:58">(<argument pos:start="45:29" pos:end="45:32"><expr pos:start="45:29" pos:end="45:32"><name pos:start="45:29" pos:end="45:32">root</name></expr></argument>, <argument pos:start="45:35" pos:end="45:46"><expr pos:start="45:35" pos:end="45:46"><operator pos:start="45:35" pos:end="45:35">(</operator><name pos:start="45:36" pos:end="45:39">void</name><operator pos:start="45:40" pos:end="45:40">*</operator><operator pos:start="45:41" pos:end="45:41">)</operator><operator pos:start="45:42" pos:end="45:42">(</operator><name pos:start="45:43" pos:end="45:43">j</name><operator pos:start="45:44" pos:end="45:44">+</operator><literal type="number" pos:start="45:45" pos:end="45:45">1</literal><operator pos:start="45:46" pos:end="45:46">)</operator></expr></argument>, <argument pos:start="45:49" pos:end="45:51"><expr pos:start="45:49" pos:end="45:51"><name pos:start="45:49" pos:end="45:51">cmp</name></expr></argument>, <argument pos:start="45:54" pos:end="45:57"><expr pos:start="45:54" pos:end="45:57"><name pos:start="45:54" pos:end="45:57">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt pos:start="47:13" pos:end="49:71"><if pos:start="47:13" pos:end="49:71">if<condition pos:start="47:15" pos:end="47:17">(<expr pos:start="47:16" pos:end="47:16"><name pos:start="47:16" pos:end="47:16">k</name></expr>)</condition><block type="pseudo" pos:start="49:17" pos:end="49:71"><block_content pos:start="49:17" pos:end="49:71">

                <expr_stmt pos:start="49:17" pos:end="49:71"><expr pos:start="49:17" pos:end="49:70"><call pos:start="49:17" pos:end="49:70"><name pos:start="49:17" pos:end="49:22">av_log</name><argument_list pos:start="49:23" pos:end="49:70">(<argument pos:start="49:24" pos:end="49:27"><expr pos:start="49:24" pos:end="49:27"><name pos:start="49:24" pos:end="49:27">NULL</name></expr></argument>, <argument pos:start="49:30" pos:end="49:41"><expr pos:start="49:30" pos:end="49:41"><name pos:start="49:30" pos:end="49:41">AV_LOG_ERROR</name></expr></argument>, <argument pos:start="49:44" pos:end="49:66"><expr pos:start="49:44" pos:end="49:66"><literal type="string" pos:start="49:44" pos:end="49:66">"removial failure %d\n"</literal></expr></argument>, <argument pos:start="49:69" pos:end="49:69"><expr pos:start="49:69" pos:end="49:69"><name pos:start="49:69" pos:end="49:69">i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></for>

    <return pos:start="55:5" pos:end="55:13">return <expr pos:start="55:12" pos:end="55:12"><literal type="number" pos:start="55:12" pos:end="55:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
