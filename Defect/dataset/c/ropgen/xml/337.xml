<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/337.c" pos:tabs="8"><function pos:start="1:1" pos:end="257:1"><name pos:start="1:1" pos:end="1:4">main</name><parameter_list pos:start="1:5" pos:end="7:1">(

    <parameter pos:start="3:5" pos:end="3:12"><decl pos:start="3:5" pos:end="3:12"><type pos:start="3:5" pos:end="3:12"><name pos:start="3:5" pos:end="3:7">int</name></type> <name pos:start="3:9" pos:end="3:12">argc</name></decl></parameter>,

    <parameter pos:start="5:5" pos:end="5:16"><decl pos:start="5:5" pos:end="5:16"><type pos:start="5:5" pos:end="5:14"><name pos:start="5:5" pos:end="5:8">char</name> <modifier pos:start="5:10" pos:end="5:10">*</modifier></type><name pos:start="5:11" pos:end="5:16"><name pos:start="5:11" pos:end="5:14">argv</name><index pos:start="5:15" pos:end="5:16">[]</index></name></decl></parameter>

)</parameter_list> <block pos:start="7:3" pos:end="257:1">{<block_content pos:start="9:5" pos:end="255:13">

    <decl_stmt pos:start="9:5" pos:end="9:20"><decl pos:start="9:5" pos:end="9:19"><type pos:start="9:5" pos:end="9:15"><name pos:start="9:5" pos:end="9:13">GMainLoop</name> <modifier pos:start="9:15" pos:end="9:15">*</modifier></type><name pos:start="9:16" pos:end="9:19">loop</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:30"><decl pos:start="11:5" pos:end="11:29"><type pos:start="11:5" pos:end="11:16"><name pos:start="11:5" pos:end="11:14">GIOChannel</name> <modifier pos:start="11:16" pos:end="11:16">*</modifier></type><name pos:start="11:17" pos:end="11:29">channel_stdin</name></decl>;</decl_stmt>

    <decl_stmt pos:start="13:5" pos:end="13:20"><decl pos:start="13:5" pos:end="13:19"><type pos:start="13:5" pos:end="13:10"><name pos:start="13:5" pos:end="13:8">char</name> <modifier pos:start="13:10" pos:end="13:10">*</modifier></type><name pos:start="13:11" pos:end="13:19">qemu_host</name></decl>;</decl_stmt>

    <decl_stmt pos:start="15:5" pos:end="15:20"><decl pos:start="15:5" pos:end="15:19"><type pos:start="15:5" pos:end="15:10"><name pos:start="15:5" pos:end="15:8">char</name> <modifier pos:start="15:10" pos:end="15:10">*</modifier></type><name pos:start="15:11" pos:end="15:19">qemu_port</name></decl>;</decl_stmt>

    <decl_stmt pos:start="17:5" pos:end="17:26"><decl pos:start="17:5" pos:end="17:25"><type pos:start="17:5" pos:end="17:16"><name pos:start="17:5" pos:end="17:16">VSCMsgHeader</name></type> <name pos:start="17:18" pos:end="17:25">mhHeader</name></decl>;</decl_stmt>



    <decl_stmt pos:start="21:5" pos:end="21:50"><decl pos:start="21:5" pos:end="21:49"><type pos:start="21:5" pos:end="21:22"><name pos:start="21:5" pos:end="21:20">VCardEmulOptions</name> <modifier pos:start="21:22" pos:end="21:22">*</modifier></type><name pos:start="21:23" pos:end="21:42">command_line_options</name> <init pos:start="21:44" pos:end="21:49">= <expr pos:start="21:46" pos:end="21:49"><name pos:start="21:46" pos:end="21:49">NULL</name></expr></init></decl>;</decl_stmt>



    <decl_stmt pos:start="25:5" pos:end="25:32"><decl pos:start="25:5" pos:end="25:31"><type pos:start="25:5" pos:end="25:10"><name pos:start="25:5" pos:end="25:8">char</name> <modifier pos:start="25:10" pos:end="25:10">*</modifier></type><name pos:start="25:11" pos:end="25:31"><name pos:start="25:11" pos:end="25:20">cert_names</name><index pos:start="25:21" pos:end="25:31">[<expr pos:start="25:22" pos:end="25:30"><name pos:start="25:22" pos:end="25:30">MAX_CERTS</name></expr>]</index></name></decl>;</decl_stmt>

    <decl_stmt pos:start="27:5" pos:end="27:27"><decl pos:start="27:5" pos:end="27:26"><type pos:start="27:5" pos:end="27:10"><name pos:start="27:5" pos:end="27:8">char</name> <modifier pos:start="27:10" pos:end="27:10">*</modifier></type><name pos:start="27:11" pos:end="27:19">emul_args</name> <init pos:start="27:21" pos:end="27:26">= <expr pos:start="27:23" pos:end="27:26"><name pos:start="27:23" pos:end="27:26">NULL</name></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="29:5" pos:end="29:23"><decl pos:start="29:5" pos:end="29:22"><type pos:start="29:5" pos:end="29:7"><name pos:start="29:5" pos:end="29:7">int</name></type> <name pos:start="29:9" pos:end="29:18">cert_count</name> <init pos:start="29:20" pos:end="29:22">= <expr pos:start="29:22" pos:end="29:22"><literal type="number" pos:start="29:22" pos:end="29:22">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="31:5" pos:end="31:16"><decl pos:start="31:5" pos:end="31:9"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:9">c</name></decl>, <decl pos:start="31:12" pos:end="31:15"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:12" pos:end="31:15">sock</name></decl>;</decl_stmt>



    <if_stmt pos:start="35:5" pos:end="37:17"><if pos:start="35:5" pos:end="37:17">if <condition pos:start="35:8" pos:end="35:27">(<expr pos:start="35:9" pos:end="35:26"><call pos:start="35:9" pos:end="35:21"><name pos:start="35:9" pos:end="35:19">socket_init</name><argument_list pos:start="35:20" pos:end="35:21">()</argument_list></call> <operator pos:start="35:23" pos:end="35:24">!=</operator> <literal type="number" pos:start="35:26" pos:end="35:26">0</literal></expr>)</condition><block type="pseudo" pos:start="37:9" pos:end="37:17"><block_content pos:start="37:9" pos:end="37:17">

        <return pos:start="37:9" pos:end="37:17">return <expr pos:start="37:16" pos:end="37:16"><literal type="number" pos:start="37:16" pos:end="37:16">1</literal></expr>;</return></block_content></block></if></if_stmt>



    <while pos:start="41:5" pos:end="81:5">while <condition pos:start="41:11" pos:end="41:53">(<expr pos:start="41:12" pos:end="41:52"><operator pos:start="41:12" pos:end="41:12">(</operator><name pos:start="41:13" pos:end="41:13">c</name> <operator pos:start="41:15" pos:end="41:15">=</operator> <call pos:start="41:17" pos:end="41:45"><name pos:start="41:17" pos:end="41:22">getopt</name><argument_list pos:start="41:23" pos:end="41:45">(<argument pos:start="41:24" pos:end="41:27"><expr pos:start="41:24" pos:end="41:27"><name pos:start="41:24" pos:end="41:27">argc</name></expr></argument>, <argument pos:start="41:30" pos:end="41:33"><expr pos:start="41:30" pos:end="41:33"><name pos:start="41:30" pos:end="41:33">argv</name></expr></argument>, <argument pos:start="41:36" pos:end="41:44"><expr pos:start="41:36" pos:end="41:44"><literal type="string" pos:start="41:36" pos:end="41:44">"c:e:pd:"</literal></expr></argument>)</argument_list></call><operator pos:start="41:46" pos:end="41:46">)</operator> <operator pos:start="41:48" pos:end="41:49">!=</operator> <operator pos:start="41:51" pos:end="41:51">-</operator><literal type="number" pos:start="41:52" pos:end="41:52">1</literal></expr>)</condition> <block pos:start="41:55" pos:end="81:5">{<block_content pos:start="43:9" pos:end="79:9">

        <switch pos:start="43:9" pos:end="79:9">switch <condition pos:start="43:16" pos:end="43:18">(<expr pos:start="43:17" pos:end="43:17"><name pos:start="43:17" pos:end="43:17">c</name></expr>)</condition> <block pos:start="43:20" pos:end="79:9">{<block_content pos:start="45:9" pos:end="77:18">

        <case pos:start="45:9" pos:end="45:17">case <expr pos:start="45:14" pos:end="45:16"><literal type="char" pos:start="45:14" pos:end="45:16">'c'</literal></expr>:</case>

            <if_stmt pos:start="47:13" pos:end="53:13"><if pos:start="47:13" pos:end="53:13">if <condition pos:start="47:16" pos:end="47:40">(<expr pos:start="47:17" pos:end="47:39"><name pos:start="47:17" pos:end="47:26">cert_count</name> <operator pos:start="47:28" pos:end="47:29">&gt;=</operator> <name pos:start="47:31" pos:end="47:39">MAX_CERTS</name></expr>)</condition> <block pos:start="47:42" pos:end="53:13">{<block_content pos:start="49:17" pos:end="51:24">

                <expr_stmt pos:start="49:17" pos:end="49:72"><expr pos:start="49:17" pos:end="49:71"><call pos:start="49:17" pos:end="49:71"><name pos:start="49:17" pos:end="49:22">printf</name><argument_list pos:start="49:23" pos:end="49:71">(<argument pos:start="49:24" pos:end="49:59"><expr pos:start="49:24" pos:end="49:59"><literal type="string" pos:start="49:24" pos:end="49:59">"too many certificates (max = %d)\n"</literal></expr></argument>, <argument pos:start="49:62" pos:end="49:70"><expr pos:start="49:62" pos:end="49:70"><name pos:start="49:62" pos:end="49:70">MAX_CERTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt pos:start="51:17" pos:end="51:24"><expr pos:start="51:17" pos:end="51:23"><call pos:start="51:17" pos:end="51:23"><name pos:start="51:17" pos:end="51:20">exit</name><argument_list pos:start="51:21" pos:end="51:23">(<argument pos:start="51:22" pos:end="51:22"><expr pos:start="51:22" pos:end="51:22"><literal type="number" pos:start="51:22" pos:end="51:22">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></if></if_stmt>

            <expr_stmt pos:start="55:13" pos:end="55:46"><expr pos:start="55:13" pos:end="55:45"><name pos:start="55:13" pos:end="55:36"><name pos:start="55:13" pos:end="55:22">cert_names</name><index pos:start="55:23" pos:end="55:36">[<expr pos:start="55:24" pos:end="55:35"><name pos:start="55:24" pos:end="55:33">cert_count</name><operator pos:start="55:34" pos:end="55:35">++</operator></expr>]</index></name> <operator pos:start="55:38" pos:end="55:38">=</operator> <name pos:start="55:40" pos:end="55:45">optarg</name></expr>;</expr_stmt>

            <break pos:start="57:13" pos:end="57:18">break;</break>

        <case pos:start="59:9" pos:end="59:17">case <expr pos:start="59:14" pos:end="59:16"><literal type="char" pos:start="59:14" pos:end="59:16">'e'</literal></expr>:</case>

            <expr_stmt pos:start="61:13" pos:end="61:31"><expr pos:start="61:13" pos:end="61:30"><name pos:start="61:13" pos:end="61:21">emul_args</name> <operator pos:start="61:23" pos:end="61:23">=</operator> <name pos:start="61:25" pos:end="61:30">optarg</name></expr>;</expr_stmt>

            <break pos:start="63:13" pos:end="63:18">break;</break>

        <case pos:start="65:9" pos:end="65:17">case <expr pos:start="65:14" pos:end="65:16"><literal type="char" pos:start="65:14" pos:end="65:16">'p'</literal></expr>:</case>

            <expr_stmt pos:start="67:13" pos:end="67:26"><expr pos:start="67:13" pos:end="67:25"><call pos:start="67:13" pos:end="67:25"><name pos:start="67:13" pos:end="67:23">print_usage</name><argument_list pos:start="67:24" pos:end="67:25">()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="69:13" pos:end="69:20"><expr pos:start="69:13" pos:end="69:19"><call pos:start="69:13" pos:end="69:19"><name pos:start="69:13" pos:end="69:16">exit</name><argument_list pos:start="69:17" pos:end="69:19">(<argument pos:start="69:18" pos:end="69:18"><expr pos:start="69:18" pos:end="69:18"><literal type="number" pos:start="69:18" pos:end="69:18">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="71:13" pos:end="71:18">break;</break>

        <case pos:start="73:9" pos:end="73:17">case <expr pos:start="73:14" pos:end="73:16"><literal type="char" pos:start="73:14" pos:end="73:16">'d'</literal></expr>:</case>

            <expr_stmt pos:start="75:13" pos:end="75:52"><expr pos:start="75:13" pos:end="75:51"><name pos:start="75:13" pos:end="75:19">verbose</name> <operator pos:start="75:21" pos:end="75:21">=</operator> <call pos:start="75:23" pos:end="75:51"><name pos:start="75:23" pos:end="75:40">get_id_from_string</name><argument_list pos:start="75:41" pos:end="75:51">(<argument pos:start="75:42" pos:end="75:47"><expr pos:start="75:42" pos:end="75:47"><name pos:start="75:42" pos:end="75:47">optarg</name></expr></argument>, <argument pos:start="75:50" pos:end="75:50"><expr pos:start="75:50" pos:end="75:50"><literal type="number" pos:start="75:50" pos:end="75:50">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <break pos:start="77:13" pos:end="77:18">break;</break>

        </block_content>}</block></switch>

    </block_content>}</block></while>



    <if_stmt pos:start="85:5" pos:end="91:5"><if pos:start="85:5" pos:end="91:5">if <condition pos:start="85:8" pos:end="85:27">(<expr pos:start="85:9" pos:end="85:26"><name pos:start="85:9" pos:end="85:12">argc</name> <operator pos:start="85:14" pos:end="85:14">-</operator> <name pos:start="85:16" pos:end="85:21">optind</name> <operator pos:start="85:23" pos:end="85:24">!=</operator> <literal type="number" pos:start="85:26" pos:end="85:26">2</literal></expr>)</condition> <block pos:start="85:29" pos:end="91:5">{<block_content pos:start="87:9" pos:end="89:16">

        <expr_stmt pos:start="87:9" pos:end="87:22"><expr pos:start="87:9" pos:end="87:21"><call pos:start="87:9" pos:end="87:21"><name pos:start="87:9" pos:end="87:19">print_usage</name><argument_list pos:start="87:20" pos:end="87:21">()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="89:9" pos:end="89:16"><expr pos:start="89:9" pos:end="89:15"><call pos:start="89:9" pos:end="89:15"><name pos:start="89:9" pos:end="89:12">exit</name><argument_list pos:start="89:13" pos:end="89:15">(<argument pos:start="89:14" pos:end="89:14"><expr pos:start="89:14" pos:end="89:14"><literal type="number" pos:start="89:14" pos:end="89:14">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <if_stmt pos:start="95:5" pos:end="143:5"><if pos:start="95:5" pos:end="143:5">if <condition pos:start="95:8" pos:end="95:23">(<expr pos:start="95:9" pos:end="95:22"><name pos:start="95:9" pos:end="95:18">cert_count</name> <operator pos:start="95:20" pos:end="95:20">&gt;</operator> <literal type="number" pos:start="95:22" pos:end="95:22">0</literal></expr>)</condition> <block pos:start="95:25" pos:end="143:5">{<block_content pos:start="97:9" pos:end="141:29">

        <decl_stmt pos:start="97:9" pos:end="97:23"><decl pos:start="97:9" pos:end="97:22"><type pos:start="97:9" pos:end="97:14"><name pos:start="97:9" pos:end="97:12">char</name> <modifier pos:start="97:14" pos:end="97:14">*</modifier></type><name pos:start="97:15" pos:end="97:22">new_args</name></decl>;</decl_stmt>

        <decl_stmt pos:start="99:9" pos:end="99:19"><decl pos:start="99:9" pos:end="99:15"><type pos:start="99:9" pos:end="99:11"><name pos:start="99:9" pos:end="99:11">int</name></type> <name pos:start="99:13" pos:end="99:15">len</name></decl>, <decl pos:start="99:18" pos:end="99:18"><type ref="prev" pos:start="99:9" pos:end="99:11"/><name pos:start="99:18" pos:end="99:18">i</name></decl>;</decl_stmt>

        <comment type="block" pos:start="101:9" pos:end="105:22">/* if we've given some -c options, we clearly we want do so some

         * software emulation.  add that emulation now. this is NSS Emulator

         * specific */</comment>

        <if_stmt pos:start="107:9" pos:end="114:0"><if pos:start="107:9" pos:end="114:0">if <condition pos:start="107:12" pos:end="107:30">(<expr pos:start="107:13" pos:end="107:29"><name pos:start="107:13" pos:end="107:21">emul_args</name> <operator pos:start="107:23" pos:end="107:24">==</operator> <name pos:start="107:26" pos:end="107:29">NULL</name></expr>)</condition> <block pos:start="107:32" pos:end="114:0">{<block_content pos:start="109:13" pos:end="109:56">

            <expr_stmt pos:start="109:13" pos:end="109:56"><expr pos:start="109:13" pos:end="109:55"><name pos:start="109:13" pos:end="109:21">emul_args</name> <operator pos:start="109:23" pos:end="109:23">=</operator> <operator pos:start="109:25" pos:end="109:25">(</operator><name pos:start="109:26" pos:end="109:29">char</name> <operator pos:start="109:31" pos:end="109:31">*</operator><operator pos:start="109:32" pos:end="109:32">)</operator><literal type="string" pos:start="109:33" pos:end="109:55">"db=\"/etc/pki/nssdb\""</literal></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

<cpp:define pos:start="113:1" pos:end="113:50">#<cpp:directive pos:start="113:2" pos:end="113:7">define</cpp:directive> <cpp:macro pos:start="113:9" pos:end="113:19"><name pos:start="113:9" pos:end="113:19">SOFT_STRING</name></cpp:macro> <cpp:value pos:start="113:21" pos:end="113:50">",soft=(,Virtual Reader,CAC,,"</cpp:value></cpp:define>

             <comment type="block" pos:start="115:14" pos:end="115:42">/* 2 == close paren &amp; null */</comment>

        <expr_stmt pos:start="117:9" pos:end="117:58"><expr pos:start="117:9" pos:end="117:57"><name pos:start="117:9" pos:end="117:11">len</name> <operator pos:start="117:13" pos:end="117:13">=</operator> <call pos:start="117:15" pos:end="117:31"><name pos:start="117:15" pos:end="117:20">strlen</name><argument_list pos:start="117:21" pos:end="117:31">(<argument pos:start="117:22" pos:end="117:30"><expr pos:start="117:22" pos:end="117:30"><name pos:start="117:22" pos:end="117:30">emul_args</name></expr></argument>)</argument_list></call> <operator pos:start="117:33" pos:end="117:33">+</operator> <call pos:start="117:35" pos:end="117:53"><name pos:start="117:35" pos:end="117:40">strlen</name><argument_list pos:start="117:41" pos:end="117:53">(<argument pos:start="117:42" pos:end="117:52"><expr pos:start="117:42" pos:end="117:52"><name pos:start="117:42" pos:end="117:52">SOFT_STRING</name></expr></argument>)</argument_list></call> <operator pos:start="117:55" pos:end="117:55">+</operator> <literal type="number" pos:start="117:57" pos:end="117:57">2</literal></expr>;</expr_stmt>

        <for pos:start="119:9" pos:end="123:9">for <control pos:start="119:13" pos:end="119:40">(<init pos:start="119:14" pos:end="119:19"><expr pos:start="119:14" pos:end="119:18"><name pos:start="119:14" pos:end="119:14">i</name> <operator pos:start="119:16" pos:end="119:16">=</operator> <literal type="number" pos:start="119:18" pos:end="119:18">0</literal></expr>;</init> <condition pos:start="119:21" pos:end="119:35"><expr pos:start="119:21" pos:end="119:34"><name pos:start="119:21" pos:end="119:21">i</name> <operator pos:start="119:23" pos:end="119:23">&lt;</operator> <name pos:start="119:25" pos:end="119:34">cert_count</name></expr>;</condition> <incr pos:start="119:37" pos:end="119:39"><expr pos:start="119:37" pos:end="119:39"><name pos:start="119:37" pos:end="119:37">i</name><operator pos:start="119:38" pos:end="119:39">++</operator></expr></incr>)</control> <block pos:start="119:42" pos:end="123:9">{<block_content pos:start="121:13" pos:end="121:43">

            <expr_stmt pos:start="121:13" pos:end="121:43"><expr pos:start="121:13" pos:end="121:42"><name pos:start="121:13" pos:end="121:15">len</name> <operator pos:start="121:17" pos:end="121:18">+=</operator> <call pos:start="121:20" pos:end="121:40"><name pos:start="121:20" pos:end="121:25">strlen</name><argument_list pos:start="121:26" pos:end="121:40">(<argument pos:start="121:27" pos:end="121:39"><expr pos:start="121:27" pos:end="121:39"><name pos:start="121:27" pos:end="121:39"><name pos:start="121:27" pos:end="121:36">cert_names</name><index pos:start="121:37" pos:end="121:39">[<expr pos:start="121:38" pos:end="121:38"><name pos:start="121:38" pos:end="121:38">i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator pos:start="121:41" pos:end="121:41">+</operator><literal type="number" pos:start="121:42" pos:end="121:42">1</literal></expr>;</expr_stmt> <comment type="block" pos:start="121:45" pos:end="121:60">/* 1 == comma */</comment>

        </block_content>}</block></for>

        <expr_stmt pos:start="125:9" pos:end="125:33"><expr pos:start="125:9" pos:end="125:32"><name pos:start="125:9" pos:end="125:16">new_args</name> <operator pos:start="125:18" pos:end="125:18">=</operator> <call pos:start="125:20" pos:end="125:32"><name pos:start="125:20" pos:end="125:27">g_malloc</name><argument_list pos:start="125:28" pos:end="125:32">(<argument pos:start="125:29" pos:end="125:31"><expr pos:start="125:29" pos:end="125:31"><name pos:start="125:29" pos:end="125:31">len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="127:9" pos:end="127:36"><expr pos:start="127:9" pos:end="127:35"><call pos:start="127:9" pos:end="127:35"><name pos:start="127:9" pos:end="127:14">strcpy</name><argument_list pos:start="127:15" pos:end="127:35">(<argument pos:start="127:16" pos:end="127:23"><expr pos:start="127:16" pos:end="127:23"><name pos:start="127:16" pos:end="127:23">new_args</name></expr></argument>, <argument pos:start="127:26" pos:end="127:34"><expr pos:start="127:26" pos:end="127:34"><name pos:start="127:26" pos:end="127:34">emul_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="129:9" pos:end="129:38"><expr pos:start="129:9" pos:end="129:37"><call pos:start="129:9" pos:end="129:37"><name pos:start="129:9" pos:end="129:14">strcat</name><argument_list pos:start="129:15" pos:end="129:37">(<argument pos:start="129:16" pos:end="129:23"><expr pos:start="129:16" pos:end="129:23"><name pos:start="129:16" pos:end="129:23">new_args</name></expr></argument>, <argument pos:start="129:26" pos:end="129:36"><expr pos:start="129:26" pos:end="129:36"><name pos:start="129:26" pos:end="129:36">SOFT_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for pos:start="131:9" pos:end="137:9">for <control pos:start="131:13" pos:end="131:40">(<init pos:start="131:14" pos:end="131:19"><expr pos:start="131:14" pos:end="131:18"><name pos:start="131:14" pos:end="131:14">i</name> <operator pos:start="131:16" pos:end="131:16">=</operator> <literal type="number" pos:start="131:18" pos:end="131:18">0</literal></expr>;</init> <condition pos:start="131:21" pos:end="131:35"><expr pos:start="131:21" pos:end="131:34"><name pos:start="131:21" pos:end="131:21">i</name> <operator pos:start="131:23" pos:end="131:23">&lt;</operator> <name pos:start="131:25" pos:end="131:34">cert_count</name></expr>;</condition> <incr pos:start="131:37" pos:end="131:39"><expr pos:start="131:37" pos:end="131:39"><name pos:start="131:37" pos:end="131:37">i</name><operator pos:start="131:38" pos:end="131:39">++</operator></expr></incr>)</control> <block pos:start="131:42" pos:end="137:9">{<block_content pos:start="133:13" pos:end="135:34">

            <expr_stmt pos:start="133:13" pos:end="133:44"><expr pos:start="133:13" pos:end="133:43"><call pos:start="133:13" pos:end="133:43"><name pos:start="133:13" pos:end="133:18">strcat</name><argument_list pos:start="133:19" pos:end="133:43">(<argument pos:start="133:20" pos:end="133:27"><expr pos:start="133:20" pos:end="133:27"><name pos:start="133:20" pos:end="133:27">new_args</name></expr></argument>, <argument pos:start="133:30" pos:end="133:42"><expr pos:start="133:30" pos:end="133:42"><name pos:start="133:30" pos:end="133:42"><name pos:start="133:30" pos:end="133:39">cert_names</name><index pos:start="133:40" pos:end="133:42">[<expr pos:start="133:41" pos:end="133:41"><name pos:start="133:41" pos:end="133:41">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt pos:start="135:13" pos:end="135:34"><expr pos:start="135:13" pos:end="135:33"><call pos:start="135:13" pos:end="135:33"><name pos:start="135:13" pos:end="135:18">strcat</name><argument_list pos:start="135:19" pos:end="135:33">(<argument pos:start="135:20" pos:end="135:27"><expr pos:start="135:20" pos:end="135:27"><name pos:start="135:20" pos:end="135:27">new_args</name></expr></argument>, <argument pos:start="135:30" pos:end="135:32"><expr pos:start="135:30" pos:end="135:32"><literal type="string" pos:start="135:30" pos:end="135:32">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></for>

        <expr_stmt pos:start="139:9" pos:end="139:30"><expr pos:start="139:9" pos:end="139:29"><call pos:start="139:9" pos:end="139:29"><name pos:start="139:9" pos:end="139:14">strcat</name><argument_list pos:start="139:15" pos:end="139:29">(<argument pos:start="139:16" pos:end="139:23"><expr pos:start="139:16" pos:end="139:23"><name pos:start="139:16" pos:end="139:23">new_args</name></expr></argument>, <argument pos:start="139:26" pos:end="139:28"><expr pos:start="139:26" pos:end="139:28"><literal type="string" pos:start="139:26" pos:end="139:28">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="141:9" pos:end="141:29"><expr pos:start="141:9" pos:end="141:28"><name pos:start="141:9" pos:end="141:17">emul_args</name> <operator pos:start="141:19" pos:end="141:19">=</operator> <name pos:start="141:21" pos:end="141:28">new_args</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="145:5" pos:end="149:5"><if pos:start="145:5" pos:end="149:5">if <condition pos:start="145:8" pos:end="145:18">(<expr pos:start="145:9" pos:end="145:17"><name pos:start="145:9" pos:end="145:17">emul_args</name></expr>)</condition> <block pos:start="145:20" pos:end="149:5">{<block_content pos:start="147:9" pos:end="147:61">

        <expr_stmt pos:start="147:9" pos:end="147:61"><expr pos:start="147:9" pos:end="147:60"><name pos:start="147:9" pos:end="147:28">command_line_options</name> <operator pos:start="147:30" pos:end="147:30">=</operator> <call pos:start="147:32" pos:end="147:60"><name pos:start="147:32" pos:end="147:49">vcard_emul_options</name><argument_list pos:start="147:50" pos:end="147:60">(<argument pos:start="147:51" pos:end="147:59"><expr pos:start="147:51" pos:end="147:59"><name pos:start="147:51" pos:end="147:59">emul_args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="153:5" pos:end="153:41"><expr pos:start="153:5" pos:end="153:40"><name pos:start="153:5" pos:end="153:13">qemu_host</name> <operator pos:start="153:15" pos:end="153:15">=</operator> <call pos:start="153:17" pos:end="153:40"><name pos:start="153:17" pos:end="153:24">g_strdup</name><argument_list pos:start="153:25" pos:end="153:40">(<argument pos:start="153:26" pos:end="153:39"><expr pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:39"><name pos:start="153:26" pos:end="153:29">argv</name><index pos:start="153:30" pos:end="153:39">[<expr pos:start="153:31" pos:end="153:38"><name pos:start="153:31" pos:end="153:34">argc</name> <operator pos:start="153:36" pos:end="153:36">-</operator> <literal type="number" pos:start="153:38" pos:end="153:38">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="155:5" pos:end="155:41"><expr pos:start="155:5" pos:end="155:40"><name pos:start="155:5" pos:end="155:13">qemu_port</name> <operator pos:start="155:15" pos:end="155:15">=</operator> <call pos:start="155:17" pos:end="155:40"><name pos:start="155:17" pos:end="155:24">g_strdup</name><argument_list pos:start="155:25" pos:end="155:40">(<argument pos:start="155:26" pos:end="155:39"><expr pos:start="155:26" pos:end="155:39"><name pos:start="155:26" pos:end="155:39"><name pos:start="155:26" pos:end="155:29">argv</name><index pos:start="155:30" pos:end="155:39">[<expr pos:start="155:31" pos:end="155:38"><name pos:start="155:31" pos:end="155:34">argc</name> <operator pos:start="155:36" pos:end="155:36">-</operator> <literal type="number" pos:start="155:38" pos:end="155:38">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="157:5" pos:end="157:49"><expr pos:start="157:5" pos:end="157:48"><name pos:start="157:5" pos:end="157:8">sock</name> <operator pos:start="157:10" pos:end="157:10">=</operator> <call pos:start="157:12" pos:end="157:48"><name pos:start="157:12" pos:end="157:26">connect_to_qemu</name><argument_list pos:start="157:27" pos:end="157:48">(<argument pos:start="157:28" pos:end="157:36"><expr pos:start="157:28" pos:end="157:36"><name pos:start="157:28" pos:end="157:36">qemu_host</name></expr></argument>, <argument pos:start="157:39" pos:end="157:47"><expr pos:start="157:39" pos:end="157:47"><name pos:start="157:39" pos:end="157:47">qemu_port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt pos:start="159:5" pos:end="165:5"><if pos:start="159:5" pos:end="165:5">if <condition pos:start="159:8" pos:end="159:19">(<expr pos:start="159:9" pos:end="159:18"><name pos:start="159:9" pos:end="159:12">sock</name> <operator pos:start="159:14" pos:end="159:15">==</operator> <operator pos:start="159:17" pos:end="159:17">-</operator><literal type="number" pos:start="159:18" pos:end="159:18">1</literal></expr>)</condition> <block pos:start="159:21" pos:end="165:5">{<block_content pos:start="161:9" pos:end="163:16">

        <expr_stmt pos:start="161:9" pos:end="161:60"><expr pos:start="161:9" pos:end="161:59"><call pos:start="161:9" pos:end="161:59"><name pos:start="161:9" pos:end="161:15">fprintf</name><argument_list pos:start="161:16" pos:end="161:59">(<argument pos:start="161:17" pos:end="161:22"><expr pos:start="161:17" pos:end="161:22"><name pos:start="161:17" pos:end="161:22">stderr</name></expr></argument>, <argument pos:start="161:25" pos:end="161:58"><expr pos:start="161:25" pos:end="161:58"><literal type="string" pos:start="161:25" pos:end="161:58">"error opening socket, exiting.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt pos:start="163:9" pos:end="163:16"><expr pos:start="163:9" pos:end="163:15"><call pos:start="163:9" pos:end="163:15"><name pos:start="163:9" pos:end="163:12">exit</name><argument_list pos:start="163:13" pos:end="163:15">(<argument pos:start="163:14" pos:end="163:14"><expr pos:start="163:14" pos:end="163:14"><literal type="number" pos:start="163:14" pos:end="163:14">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="169:5" pos:end="169:40"><expr pos:start="169:5" pos:end="169:39"><name pos:start="169:5" pos:end="169:18">socket_to_send</name> <operator pos:start="169:20" pos:end="169:20">=</operator> <call pos:start="169:22" pos:end="169:39"><name pos:start="169:22" pos:end="169:37">g_byte_array_new</name><argument_list pos:start="169:38" pos:end="169:39">()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="171:5" pos:end="171:42"><expr pos:start="171:5" pos:end="171:41"><call pos:start="171:5" pos:end="171:41"><name pos:start="171:5" pos:end="171:19">qemu_mutex_init</name><argument_list pos:start="171:20" pos:end="171:41">(<argument pos:start="171:21" pos:end="171:40"><expr pos:start="171:21" pos:end="171:40"><operator pos:start="171:21" pos:end="171:21">&amp;</operator><name pos:start="171:22" pos:end="171:40">socket_to_send_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="173:5" pos:end="173:42"><expr pos:start="173:5" pos:end="173:41"><call pos:start="173:5" pos:end="173:41"><name pos:start="173:5" pos:end="173:19">qemu_mutex_init</name><argument_list pos:start="173:20" pos:end="173:41">(<argument pos:start="173:21" pos:end="173:40"><expr pos:start="173:21" pos:end="173:40"><operator pos:start="173:21" pos:end="173:21">&amp;</operator><name pos:start="173:22" pos:end="173:40">pending_reader_lock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="175:5" pos:end="175:46"><expr pos:start="175:5" pos:end="175:45"><call pos:start="175:5" pos:end="175:45"><name pos:start="175:5" pos:end="175:18">qemu_cond_init</name><argument_list pos:start="175:19" pos:end="175:45">(<argument pos:start="175:20" pos:end="175:44"><expr pos:start="175:20" pos:end="175:44"><operator pos:start="175:20" pos:end="175:20">&amp;</operator><name pos:start="175:21" pos:end="175:44">pending_reader_condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="179:5" pos:end="179:42"><expr pos:start="179:5" pos:end="179:41"><call pos:start="179:5" pos:end="179:41"><name pos:start="179:5" pos:end="179:19">vcard_emul_init</name><argument_list pos:start="179:20" pos:end="179:41">(<argument pos:start="179:21" pos:end="179:40"><expr pos:start="179:21" pos:end="179:40"><name pos:start="179:21" pos:end="179:40">command_line_options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="183:5" pos:end="183:39"><expr pos:start="183:5" pos:end="183:38"><name pos:start="183:5" pos:end="183:8">loop</name> <operator pos:start="183:10" pos:end="183:10">=</operator> <call pos:start="183:12" pos:end="183:38"><name pos:start="183:12" pos:end="183:26">g_main_loop_new</name><argument_list pos:start="183:27" pos:end="183:38">(<argument pos:start="183:28" pos:end="183:31"><expr pos:start="183:28" pos:end="183:31"><name pos:start="183:28" pos:end="183:31">NULL</name></expr></argument>, <argument pos:start="183:34" pos:end="183:37"><expr pos:start="183:34" pos:end="183:37"><name pos:start="183:34" pos:end="183:37">true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="187:5" pos:end="187:17"><expr pos:start="187:5" pos:end="187:16"><call pos:start="187:5" pos:end="187:16"><name pos:start="187:5" pos:end="187:10">printf</name><argument_list pos:start="187:11" pos:end="187:16">(<argument pos:start="187:12" pos:end="187:15"><expr pos:start="187:12" pos:end="187:15"><literal type="string" pos:start="187:12" pos:end="187:15">"&gt; "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="189:5" pos:end="194:0"><expr pos:start="189:5" pos:end="189:18"><call pos:start="189:5" pos:end="189:18"><name pos:start="189:5" pos:end="189:10">fflush</name><argument_list pos:start="189:11" pos:end="189:18">(<argument pos:start="189:12" pos:end="189:17"><expr pos:start="189:12" pos:end="189:17"><name pos:start="189:12" pos:end="189:17">stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



<cpp:ifdef pos:start="193:1" pos:end="193:13">#<cpp:directive pos:start="193:2" pos:end="193:6">ifdef</cpp:directive> <name pos:start="193:8" pos:end="193:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="195:5" pos:end="198:0"><expr pos:start="195:5" pos:end="195:59"><name pos:start="195:5" pos:end="195:17">channel_stdin</name> <operator pos:start="195:19" pos:end="195:19">=</operator> <call pos:start="195:21" pos:end="195:59"><name pos:start="195:21" pos:end="195:45">g_io_channel_win32_new_fd</name><argument_list pos:start="195:46" pos:end="195:59">(<argument pos:start="195:47" pos:end="195:58"><expr pos:start="195:47" pos:end="195:58"><name pos:start="195:47" pos:end="195:58">STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="197:1" pos:end="197:5">#<cpp:directive pos:start="197:2" pos:end="197:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="199:5" pos:end="202:0"><expr pos:start="199:5" pos:end="199:55"><name pos:start="199:5" pos:end="199:17">channel_stdin</name> <operator pos:start="199:19" pos:end="199:19">=</operator> <call pos:start="199:21" pos:end="199:55"><name pos:start="199:21" pos:end="199:41">g_io_channel_unix_new</name><argument_list pos:start="199:42" pos:end="199:55">(<argument pos:start="199:43" pos:end="199:54"><expr pos:start="199:43" pos:end="199:54"><name pos:start="199:43" pos:end="199:54">STDIN_FILENO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="201:1" pos:end="201:6">#<cpp:directive pos:start="201:2" pos:end="201:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="203:5" pos:end="206:0"><expr pos:start="203:5" pos:end="203:60"><call pos:start="203:5" pos:end="203:60"><name pos:start="203:5" pos:end="203:18">g_io_add_watch</name><argument_list pos:start="203:19" pos:end="203:60">(<argument pos:start="203:20" pos:end="203:32"><expr pos:start="203:20" pos:end="203:32"><name pos:start="203:20" pos:end="203:32">channel_stdin</name></expr></argument>, <argument pos:start="203:35" pos:end="203:41"><expr pos:start="203:35" pos:end="203:41"><name pos:start="203:35" pos:end="203:41">G_IO_IN</name></expr></argument>, <argument pos:start="203:44" pos:end="203:53"><expr pos:start="203:44" pos:end="203:53"><name pos:start="203:44" pos:end="203:53">do_command</name></expr></argument>, <argument pos:start="203:56" pos:end="203:59"><expr pos:start="203:56" pos:end="203:59"><name pos:start="203:56" pos:end="203:59">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef pos:start="205:1" pos:end="205:13">#<cpp:directive pos:start="205:2" pos:end="205:6">ifdef</cpp:directive> <name pos:start="205:8" pos:end="205:13">_WIN32</name></cpp:ifdef>

    <expr_stmt pos:start="207:5" pos:end="210:0"><expr pos:start="207:5" pos:end="207:56"><name pos:start="207:5" pos:end="207:18">channel_socket</name> <operator pos:start="207:20" pos:end="207:20">=</operator> <call pos:start="207:22" pos:end="207:56"><name pos:start="207:22" pos:end="207:50">g_io_channel_win32_new_socket</name><argument_list pos:start="207:51" pos:end="207:56">(<argument pos:start="207:52" pos:end="207:55"><expr pos:start="207:52" pos:end="207:55"><name pos:start="207:52" pos:end="207:55">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else pos:start="209:1" pos:end="209:5">#<cpp:directive pos:start="209:2" pos:end="209:5">else</cpp:directive></cpp:else>

    <expr_stmt pos:start="211:5" pos:end="214:0"><expr pos:start="211:5" pos:end="211:48"><name pos:start="211:5" pos:end="211:18">channel_socket</name> <operator pos:start="211:20" pos:end="211:20">=</operator> <call pos:start="211:22" pos:end="211:48"><name pos:start="211:22" pos:end="211:42">g_io_channel_unix_new</name><argument_list pos:start="211:43" pos:end="211:48">(<argument pos:start="211:44" pos:end="211:47"><expr pos:start="211:44" pos:end="211:47"><name pos:start="211:44" pos:end="211:47">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif pos:start="213:1" pos:end="213:6">#<cpp:directive pos:start="213:2" pos:end="213:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="215:5" pos:end="215:58"><expr pos:start="215:5" pos:end="215:57"><call pos:start="215:5" pos:end="215:57"><name pos:start="215:5" pos:end="215:29">g_io_channel_set_encoding</name><argument_list pos:start="215:30" pos:end="215:57">(<argument pos:start="215:31" pos:end="215:44"><expr pos:start="215:31" pos:end="215:44"><name pos:start="215:31" pos:end="215:44">channel_socket</name></expr></argument>, <argument pos:start="215:47" pos:end="215:50"><expr pos:start="215:47" pos:end="215:50"><name pos:start="215:47" pos:end="215:50">NULL</name></expr></argument>, <argument pos:start="215:53" pos:end="215:56"><expr pos:start="215:53" pos:end="215:56"><name pos:start="215:53" pos:end="215:56">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="217:5" pos:end="217:53">/* we buffer ourself for thread safety reasons */</comment>

    <expr_stmt pos:start="219:5" pos:end="219:53"><expr pos:start="219:5" pos:end="219:52"><call pos:start="219:5" pos:end="219:52"><name pos:start="219:5" pos:end="219:29">g_io_channel_set_buffered</name><argument_list pos:start="219:30" pos:end="219:52">(<argument pos:start="219:31" pos:end="219:44"><expr pos:start="219:31" pos:end="219:44"><name pos:start="219:31" pos:end="219:44">channel_socket</name></expr></argument>, <argument pos:start="219:47" pos:end="219:51"><expr pos:start="219:47" pos:end="219:51"><name pos:start="219:47" pos:end="219:51">FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <comment type="block" pos:start="223:5" pos:end="223:80">/* Send init message, Host responds (and then we send reader attachments) */</comment>

    <decl_stmt pos:start="225:5" pos:end="233:6"><decl pos:start="225:5" pos:end="233:5"><type pos:start="225:5" pos:end="225:14"><name pos:start="225:5" pos:end="225:14">VSCMsgInit</name></type> <name pos:start="225:16" pos:end="225:19">init</name> <init pos:start="225:21" pos:end="233:5">= <expr pos:start="225:23" pos:end="233:5"><block pos:start="225:23" pos:end="233:5">{

        <expr pos:start="227:9" pos:end="227:40"><operator pos:start="227:9" pos:end="227:9">.</operator><name pos:start="227:10" pos:end="227:16">version</name> <operator pos:start="227:18" pos:end="227:18">=</operator> <call pos:start="227:20" pos:end="227:40"><name pos:start="227:20" pos:end="227:24">htonl</name><argument_list pos:start="227:25" pos:end="227:40">(<argument pos:start="227:26" pos:end="227:39"><expr pos:start="227:26" pos:end="227:39"><name pos:start="227:26" pos:end="227:39">VSCARD_VERSION</name></expr></argument>)</argument_list></call></expr>,

        <expr pos:start="229:9" pos:end="229:29"><operator pos:start="229:9" pos:end="229:9">.</operator><name pos:start="229:10" pos:end="229:14">magic</name> <operator pos:start="229:16" pos:end="229:16">=</operator> <name pos:start="229:18" pos:end="229:29">VSCARD_MAGIC</name></expr>,

        <expr pos:start="231:9" pos:end="231:27"><operator pos:start="231:9" pos:end="231:9">.</operator><name pos:start="231:10" pos:end="231:21">capabilities</name> <operator pos:start="231:23" pos:end="231:23">=</operator> <block pos:start="231:25" pos:end="231:27">{<expr pos:start="231:26" pos:end="231:26"><literal type="number" pos:start="231:26" pos:end="231:26">0</literal></expr>}</block></expr>

    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt pos:start="235:5" pos:end="235:64"><expr pos:start="235:5" pos:end="235:63"><call pos:start="235:5" pos:end="235:63"><name pos:start="235:5" pos:end="235:12">send_msg</name><argument_list pos:start="235:13" pos:end="235:63">(<argument pos:start="235:14" pos:end="235:21"><expr pos:start="235:14" pos:end="235:21"><name pos:start="235:14" pos:end="235:21">VSC_Init</name></expr></argument>, <argument pos:start="235:24" pos:end="235:41"><expr pos:start="235:24" pos:end="235:41"><name pos:start="235:24" pos:end="235:41"><name pos:start="235:24" pos:end="235:31">mhHeader</name><operator pos:start="235:32" pos:end="235:32">.</operator><name pos:start="235:33" pos:end="235:41">reader_id</name></name></expr></argument>, <argument pos:start="235:44" pos:end="235:48"><expr pos:start="235:44" pos:end="235:48"><operator pos:start="235:44" pos:end="235:44">&amp;</operator><name pos:start="235:45" pos:end="235:48">init</name></expr></argument>, <argument pos:start="235:51" pos:end="235:62"><expr pos:start="235:51" pos:end="235:62"><sizeof pos:start="235:51" pos:end="235:62">sizeof<argument_list pos:start="235:57" pos:end="235:62">(<argument pos:start="235:58" pos:end="235:61"><expr pos:start="235:58" pos:end="235:61"><name pos:start="235:58" pos:end="235:61">init</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="239:5" pos:end="239:26"><expr pos:start="239:5" pos:end="239:25"><call pos:start="239:5" pos:end="239:25"><name pos:start="239:5" pos:end="239:19">g_main_loop_run</name><argument_list pos:start="239:20" pos:end="239:25">(<argument pos:start="239:21" pos:end="239:24"><expr pos:start="239:21" pos:end="239:24"><name pos:start="239:21" pos:end="239:24">loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="241:5" pos:end="241:28"><expr pos:start="241:5" pos:end="241:27"><call pos:start="241:5" pos:end="241:27"><name pos:start="241:5" pos:end="241:21">g_main_loop_unref</name><argument_list pos:start="241:22" pos:end="241:27">(<argument pos:start="241:23" pos:end="241:26"><expr pos:start="241:23" pos:end="241:26"><name pos:start="241:23" pos:end="241:26">loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="245:5" pos:end="245:38"><expr pos:start="245:5" pos:end="245:37"><call pos:start="245:5" pos:end="245:37"><name pos:start="245:5" pos:end="245:22">g_io_channel_unref</name><argument_list pos:start="245:23" pos:end="245:37">(<argument pos:start="245:24" pos:end="245:36"><expr pos:start="245:24" pos:end="245:36"><name pos:start="245:24" pos:end="245:36">channel_stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="247:5" pos:end="247:39"><expr pos:start="247:5" pos:end="247:38"><call pos:start="247:5" pos:end="247:38"><name pos:start="247:5" pos:end="247:22">g_io_channel_unref</name><argument_list pos:start="247:23" pos:end="247:38">(<argument pos:start="247:24" pos:end="247:37"><expr pos:start="247:24" pos:end="247:37"><name pos:start="247:24" pos:end="247:37">channel_socket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="249:5" pos:end="249:39"><expr pos:start="249:5" pos:end="249:38"><call pos:start="249:5" pos:end="249:38"><name pos:start="249:5" pos:end="249:22">g_byte_array_unref</name><argument_list pos:start="249:23" pos:end="249:38">(<argument pos:start="249:24" pos:end="249:37"><expr pos:start="249:24" pos:end="249:37"><name pos:start="249:24" pos:end="249:37">socket_to_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="253:5" pos:end="253:22"><expr pos:start="253:5" pos:end="253:21"><call pos:start="253:5" pos:end="253:21"><name pos:start="253:5" pos:end="253:15">closesocket</name><argument_list pos:start="253:16" pos:end="253:21">(<argument pos:start="253:17" pos:end="253:20"><expr pos:start="253:17" pos:end="253:20"><name pos:start="253:17" pos:end="253:20">sock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return pos:start="255:5" pos:end="255:13">return <expr pos:start="255:12" pos:end="255:12"><literal type="number" pos:start="255:12" pos:end="255:12">0</literal></expr>;</return>

</block_content>}</block></function>
</unit>
