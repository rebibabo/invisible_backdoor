<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/14385.c" pos:tabs="8"><function pos:start="1:1" pos:end="171:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:38">define_one_arm_cp_reg_with_opaque</name><parameter_list pos:start="1:39" pos:end="3:75">(<parameter pos:start="1:40" pos:end="1:50"><decl pos:start="1:40" pos:end="1:50"><type pos:start="1:40" pos:end="1:50"><name pos:start="1:40" pos:end="1:45">ARMCPU</name> <modifier pos:start="1:47" pos:end="1:47">*</modifier></type><name pos:start="1:48" pos:end="1:50">cpu</name></decl></parameter>,

                                       <parameter pos:start="3:40" pos:end="3:60"><decl pos:start="3:40" pos:end="3:60"><type pos:start="3:40" pos:end="3:60"><specifier pos:start="3:40" pos:end="3:44">const</specifier> <name pos:start="3:46" pos:end="3:57">ARMCPRegInfo</name> <modifier pos:start="3:59" pos:end="3:59">*</modifier></type><name pos:start="3:60" pos:end="3:60">r</name></decl></parameter>, <parameter pos:start="3:63" pos:end="3:74"><decl pos:start="3:63" pos:end="3:74"><type pos:start="3:63" pos:end="3:74"><name pos:start="3:63" pos:end="3:66">void</name> <modifier pos:start="3:68" pos:end="3:68">*</modifier></type><name pos:start="3:69" pos:end="3:74">opaque</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="171:1">{<block_content pos:start="31:5" pos:end="169:5">

    <comment type="block" pos:start="7:5" pos:end="29:7">/* Define implementations of coprocessor registers.

     * We store these in a hashtable because typically

     * there are less than 150 registers in a space which

     * is 16*16*16*8*8 = 262144 in size.

     * Wildcarding is supported for the crm, opc1 and opc2 fields.

     * If a register is defined twice then the second definition is

     * used, so this can be used to define some generic registers and

     * then override them with implementation specific variations.

     * At least one of the original and the second definition should

     * include ARM_CP_OVERRIDE in its type bits -- this is just a guard

     * against accidental use.

     */</comment>

    <decl_stmt pos:start="31:5" pos:end="31:24"><decl pos:start="31:5" pos:end="31:11"><type pos:start="31:5" pos:end="31:7"><name pos:start="31:5" pos:end="31:7">int</name></type> <name pos:start="31:9" pos:end="31:11">crm</name></decl>, <decl pos:start="31:14" pos:end="31:17"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:14" pos:end="31:17">opc1</name></decl>, <decl pos:start="31:20" pos:end="31:23"><type ref="prev" pos:start="31:5" pos:end="31:7"/><name pos:start="31:20" pos:end="31:23">opc2</name></decl>;</decl_stmt>

    <decl_stmt pos:start="33:5" pos:end="33:49"><decl pos:start="33:5" pos:end="33:48"><type pos:start="33:5" pos:end="33:7"><name pos:start="33:5" pos:end="33:7">int</name></type> <name pos:start="33:9" pos:end="33:14">crmmin</name> <init pos:start="33:16" pos:end="33:48">= <expr pos:start="33:18" pos:end="33:48"><ternary pos:start="33:18" pos:end="33:48"><condition pos:start="33:18" pos:end="33:37"><expr pos:start="33:18" pos:end="33:35"><operator pos:start="33:18" pos:end="33:18">(</operator><name pos:start="33:19" pos:end="33:24"><name pos:start="33:19" pos:end="33:19">r</name><operator pos:start="33:20" pos:end="33:21">-&gt;</operator><name pos:start="33:22" pos:end="33:24">crm</name></name> <operator pos:start="33:26" pos:end="33:27">==</operator> <name pos:start="33:29" pos:end="33:34">CP_ANY</name><operator pos:start="33:35" pos:end="33:35">)</operator></expr> ?</condition><then pos:start="33:39" pos:end="33:39"> <expr pos:start="33:39" pos:end="33:39"><literal type="number" pos:start="33:39" pos:end="33:39">0</literal></expr> </then><else pos:start="33:41" pos:end="33:48">: <expr pos:start="33:43" pos:end="33:48"><name pos:start="33:43" pos:end="33:48"><name pos:start="33:43" pos:end="33:43">r</name><operator pos:start="33:44" pos:end="33:45">-&gt;</operator><name pos:start="33:46" pos:end="33:48">crm</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="35:5" pos:end="35:50"><decl pos:start="35:5" pos:end="35:49"><type pos:start="35:5" pos:end="35:7"><name pos:start="35:5" pos:end="35:7">int</name></type> <name pos:start="35:9" pos:end="35:14">crmmax</name> <init pos:start="35:16" pos:end="35:49">= <expr pos:start="35:18" pos:end="35:49"><ternary pos:start="35:18" pos:end="35:49"><condition pos:start="35:18" pos:end="35:37"><expr pos:start="35:18" pos:end="35:35"><operator pos:start="35:18" pos:end="35:18">(</operator><name pos:start="35:19" pos:end="35:24"><name pos:start="35:19" pos:end="35:19">r</name><operator pos:start="35:20" pos:end="35:21">-&gt;</operator><name pos:start="35:22" pos:end="35:24">crm</name></name> <operator pos:start="35:26" pos:end="35:27">==</operator> <name pos:start="35:29" pos:end="35:34">CP_ANY</name><operator pos:start="35:35" pos:end="35:35">)</operator></expr> ?</condition><then pos:start="35:39" pos:end="35:40"> <expr pos:start="35:39" pos:end="35:40"><literal type="number" pos:start="35:39" pos:end="35:40">15</literal></expr> </then><else pos:start="35:42" pos:end="35:49">: <expr pos:start="35:44" pos:end="35:49"><name pos:start="35:44" pos:end="35:49"><name pos:start="35:44" pos:end="35:44">r</name><operator pos:start="35:45" pos:end="35:46">-&gt;</operator><name pos:start="35:47" pos:end="35:49">crm</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="37:5" pos:end="37:52"><decl pos:start="37:5" pos:end="37:51"><type pos:start="37:5" pos:end="37:7"><name pos:start="37:5" pos:end="37:7">int</name></type> <name pos:start="37:9" pos:end="37:15">opc1min</name> <init pos:start="37:17" pos:end="37:51">= <expr pos:start="37:19" pos:end="37:51"><ternary pos:start="37:19" pos:end="37:51"><condition pos:start="37:19" pos:end="37:39"><expr pos:start="37:19" pos:end="37:37"><operator pos:start="37:19" pos:end="37:19">(</operator><name pos:start="37:20" pos:end="37:26"><name pos:start="37:20" pos:end="37:20">r</name><operator pos:start="37:21" pos:end="37:22">-&gt;</operator><name pos:start="37:23" pos:end="37:26">opc1</name></name> <operator pos:start="37:28" pos:end="37:29">==</operator> <name pos:start="37:31" pos:end="37:36">CP_ANY</name><operator pos:start="37:37" pos:end="37:37">)</operator></expr> ?</condition><then pos:start="37:41" pos:end="37:41"> <expr pos:start="37:41" pos:end="37:41"><literal type="number" pos:start="37:41" pos:end="37:41">0</literal></expr> </then><else pos:start="37:43" pos:end="37:51">: <expr pos:start="37:45" pos:end="37:51"><name pos:start="37:45" pos:end="37:51"><name pos:start="37:45" pos:end="37:45">r</name><operator pos:start="37:46" pos:end="37:47">-&gt;</operator><name pos:start="37:48" pos:end="37:51">opc1</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="39:5" pos:end="39:52"><decl pos:start="39:5" pos:end="39:51"><type pos:start="39:5" pos:end="39:7"><name pos:start="39:5" pos:end="39:7">int</name></type> <name pos:start="39:9" pos:end="39:15">opc1max</name> <init pos:start="39:17" pos:end="39:51">= <expr pos:start="39:19" pos:end="39:51"><ternary pos:start="39:19" pos:end="39:51"><condition pos:start="39:19" pos:end="39:39"><expr pos:start="39:19" pos:end="39:37"><operator pos:start="39:19" pos:end="39:19">(</operator><name pos:start="39:20" pos:end="39:26"><name pos:start="39:20" pos:end="39:20">r</name><operator pos:start="39:21" pos:end="39:22">-&gt;</operator><name pos:start="39:23" pos:end="39:26">opc1</name></name> <operator pos:start="39:28" pos:end="39:29">==</operator> <name pos:start="39:31" pos:end="39:36">CP_ANY</name><operator pos:start="39:37" pos:end="39:37">)</operator></expr> ?</condition><then pos:start="39:41" pos:end="39:41"> <expr pos:start="39:41" pos:end="39:41"><literal type="number" pos:start="39:41" pos:end="39:41">7</literal></expr> </then><else pos:start="39:43" pos:end="39:51">: <expr pos:start="39:45" pos:end="39:51"><name pos:start="39:45" pos:end="39:51"><name pos:start="39:45" pos:end="39:45">r</name><operator pos:start="39:46" pos:end="39:47">-&gt;</operator><name pos:start="39:48" pos:end="39:51">opc1</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="41:5" pos:end="41:52"><decl pos:start="41:5" pos:end="41:51"><type pos:start="41:5" pos:end="41:7"><name pos:start="41:5" pos:end="41:7">int</name></type> <name pos:start="41:9" pos:end="41:15">opc2min</name> <init pos:start="41:17" pos:end="41:51">= <expr pos:start="41:19" pos:end="41:51"><ternary pos:start="41:19" pos:end="41:51"><condition pos:start="41:19" pos:end="41:39"><expr pos:start="41:19" pos:end="41:37"><operator pos:start="41:19" pos:end="41:19">(</operator><name pos:start="41:20" pos:end="41:26"><name pos:start="41:20" pos:end="41:20">r</name><operator pos:start="41:21" pos:end="41:22">-&gt;</operator><name pos:start="41:23" pos:end="41:26">opc2</name></name> <operator pos:start="41:28" pos:end="41:29">==</operator> <name pos:start="41:31" pos:end="41:36">CP_ANY</name><operator pos:start="41:37" pos:end="41:37">)</operator></expr> ?</condition><then pos:start="41:41" pos:end="41:41"> <expr pos:start="41:41" pos:end="41:41"><literal type="number" pos:start="41:41" pos:end="41:41">0</literal></expr> </then><else pos:start="41:43" pos:end="41:51">: <expr pos:start="41:45" pos:end="41:51"><name pos:start="41:45" pos:end="41:51"><name pos:start="41:45" pos:end="41:45">r</name><operator pos:start="41:46" pos:end="41:47">-&gt;</operator><name pos:start="41:48" pos:end="41:51">opc2</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="43:5" pos:end="43:52"><decl pos:start="43:5" pos:end="43:51"><type pos:start="43:5" pos:end="43:7"><name pos:start="43:5" pos:end="43:7">int</name></type> <name pos:start="43:9" pos:end="43:15">opc2max</name> <init pos:start="43:17" pos:end="43:51">= <expr pos:start="43:19" pos:end="43:51"><ternary pos:start="43:19" pos:end="43:51"><condition pos:start="43:19" pos:end="43:39"><expr pos:start="43:19" pos:end="43:37"><operator pos:start="43:19" pos:end="43:19">(</operator><name pos:start="43:20" pos:end="43:26"><name pos:start="43:20" pos:end="43:20">r</name><operator pos:start="43:21" pos:end="43:22">-&gt;</operator><name pos:start="43:23" pos:end="43:26">opc2</name></name> <operator pos:start="43:28" pos:end="43:29">==</operator> <name pos:start="43:31" pos:end="43:36">CP_ANY</name><operator pos:start="43:37" pos:end="43:37">)</operator></expr> ?</condition><then pos:start="43:41" pos:end="43:41"> <expr pos:start="43:41" pos:end="43:41"><literal type="number" pos:start="43:41" pos:end="43:41">7</literal></expr> </then><else pos:start="43:43" pos:end="43:51">: <expr pos:start="43:45" pos:end="43:51"><name pos:start="43:45" pos:end="43:51"><name pos:start="43:45" pos:end="43:45">r</name><operator pos:start="43:46" pos:end="43:47">-&gt;</operator><name pos:start="43:48" pos:end="43:51">opc2</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="block" pos:start="45:5" pos:end="45:56">/* 64 bit registers have only CRm and Opc1 fields */</comment>

    <expr_stmt pos:start="47:5" pos:end="47:63"><expr pos:start="47:5" pos:end="47:62"><call pos:start="47:5" pos:end="47:62"><name pos:start="47:5" pos:end="47:10">assert</name><argument_list pos:start="47:11" pos:end="47:62">(<argument pos:start="47:12" pos:end="47:61"><expr pos:start="47:12" pos:end="47:61"><operator pos:start="47:12" pos:end="47:12">!</operator><operator pos:start="47:13" pos:end="47:13">(</operator><operator pos:start="47:14" pos:end="47:14">(</operator><name pos:start="47:15" pos:end="47:21"><name pos:start="47:15" pos:end="47:15">r</name><operator pos:start="47:16" pos:end="47:17">-&gt;</operator><name pos:start="47:18" pos:end="47:21">type</name></name> <operator pos:start="47:23" pos:end="47:23">&amp;</operator> <name pos:start="47:25" pos:end="47:36">ARM_CP_64BIT</name><operator pos:start="47:37" pos:end="47:37">)</operator> <operator pos:start="47:39" pos:end="47:40">&amp;&amp;</operator> <operator pos:start="47:42" pos:end="47:42">(</operator><name pos:start="47:43" pos:end="47:49"><name pos:start="47:43" pos:end="47:43">r</name><operator pos:start="47:44" pos:end="47:45">-&gt;</operator><name pos:start="47:46" pos:end="47:49">opc2</name></name> <operator pos:start="47:51" pos:end="47:52">||</operator> <name pos:start="47:54" pos:end="47:59"><name pos:start="47:54" pos:end="47:54">r</name><operator pos:start="47:55" pos:end="47:56">-&gt;</operator><name pos:start="47:57" pos:end="47:59">crn</name></name><operator pos:start="47:60" pos:end="47:60">)</operator><operator pos:start="47:61" pos:end="47:61">)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block" pos:start="49:5" pos:end="53:7">/* Check that the register definition has enough info to handle

     * reads and writes if they are permitted.

     */</comment>

    <if_stmt pos:start="55:5" pos:end="69:5"><if pos:start="55:5" pos:end="69:5">if <condition pos:start="55:8" pos:end="55:51">(<expr pos:start="55:9" pos:end="55:50"><operator pos:start="55:9" pos:end="55:9">!</operator><operator pos:start="55:10" pos:end="55:10">(</operator><name pos:start="55:11" pos:end="55:17"><name pos:start="55:11" pos:end="55:11">r</name><operator pos:start="55:12" pos:end="55:13">-&gt;</operator><name pos:start="55:14" pos:end="55:17">type</name></name> <operator pos:start="55:19" pos:end="55:19">&amp;</operator> <operator pos:start="55:21" pos:end="55:21">(</operator><name pos:start="55:22" pos:end="55:35">ARM_CP_SPECIAL</name><operator pos:start="55:36" pos:end="55:36">|</operator><name pos:start="55:37" pos:end="55:48">ARM_CP_CONST</name><operator pos:start="55:49" pos:end="55:49">)</operator><operator pos:start="55:50" pos:end="55:50">)</operator></expr>)</condition> <block pos:start="55:53" pos:end="69:5">{<block_content pos:start="57:9" pos:end="67:9">

        <if_stmt pos:start="57:9" pos:end="61:9"><if pos:start="57:9" pos:end="61:9">if <condition pos:start="57:12" pos:end="57:30">(<expr pos:start="57:13" pos:end="57:29"><name pos:start="57:13" pos:end="57:21"><name pos:start="57:13" pos:end="57:13">r</name><operator pos:start="57:14" pos:end="57:15">-&gt;</operator><name pos:start="57:16" pos:end="57:21">access</name></name> <operator pos:start="57:23" pos:end="57:23">&amp;</operator> <name pos:start="57:25" pos:end="57:29">PL3_R</name></expr>)</condition> <block pos:start="57:32" pos:end="61:9">{<block_content pos:start="59:13" pos:end="59:48">

            <expr_stmt pos:start="59:13" pos:end="59:48"><expr pos:start="59:13" pos:end="59:47"><call pos:start="59:13" pos:end="59:47"><name pos:start="59:13" pos:end="59:18">assert</name><argument_list pos:start="59:19" pos:end="59:47">(<argument pos:start="59:20" pos:end="59:46"><expr pos:start="59:20" pos:end="59:46"><name pos:start="59:20" pos:end="59:33"><name pos:start="59:20" pos:end="59:20">r</name><operator pos:start="59:21" pos:end="59:22">-&gt;</operator><name pos:start="59:23" pos:end="59:33">fieldoffset</name></name> <operator pos:start="59:35" pos:end="59:36">||</operator> <name pos:start="59:38" pos:end="59:46"><name pos:start="59:38" pos:end="59:38">r</name><operator pos:start="59:39" pos:end="59:40">-&gt;</operator><name pos:start="59:41" pos:end="59:46">readfn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

        <if_stmt pos:start="63:9" pos:end="67:9"><if pos:start="63:9" pos:end="67:9">if <condition pos:start="63:12" pos:end="63:30">(<expr pos:start="63:13" pos:end="63:29"><name pos:start="63:13" pos:end="63:21"><name pos:start="63:13" pos:end="63:13">r</name><operator pos:start="63:14" pos:end="63:15">-&gt;</operator><name pos:start="63:16" pos:end="63:21">access</name></name> <operator pos:start="63:23" pos:end="63:23">&amp;</operator> <name pos:start="63:25" pos:end="63:29">PL3_W</name></expr>)</condition> <block pos:start="63:32" pos:end="67:9">{<block_content pos:start="65:13" pos:end="65:49">

            <expr_stmt pos:start="65:13" pos:end="65:49"><expr pos:start="65:13" pos:end="65:48"><call pos:start="65:13" pos:end="65:48"><name pos:start="65:13" pos:end="65:18">assert</name><argument_list pos:start="65:19" pos:end="65:48">(<argument pos:start="65:20" pos:end="65:47"><expr pos:start="65:20" pos:end="65:47"><name pos:start="65:20" pos:end="65:33"><name pos:start="65:20" pos:end="65:20">r</name><operator pos:start="65:21" pos:end="65:22">-&gt;</operator><name pos:start="65:23" pos:end="65:33">fieldoffset</name></name> <operator pos:start="65:35" pos:end="65:36">||</operator> <name pos:start="65:38" pos:end="65:47"><name pos:start="65:38" pos:end="65:38">r</name><operator pos:start="65:39" pos:end="65:40">-&gt;</operator><name pos:start="65:41" pos:end="65:47">writefn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="71:5" pos:end="71:75">/* Bad type field probably means missing sentinel at end of reg list */</comment>

    <expr_stmt pos:start="73:5" pos:end="73:34"><expr pos:start="73:5" pos:end="73:33"><call pos:start="73:5" pos:end="73:33"><name pos:start="73:5" pos:end="73:10">assert</name><argument_list pos:start="73:11" pos:end="73:33">(<argument pos:start="73:12" pos:end="73:32"><expr pos:start="73:12" pos:end="73:32"><call pos:start="73:12" pos:end="73:32"><name pos:start="73:12" pos:end="73:23">cptype_valid</name><argument_list pos:start="73:24" pos:end="73:32">(<argument pos:start="73:25" pos:end="73:31"><expr pos:start="73:25" pos:end="73:31"><name pos:start="73:25" pos:end="73:31"><name pos:start="73:25" pos:end="73:25">r</name><operator pos:start="73:26" pos:end="73:27">-&gt;</operator><name pos:start="73:28" pos:end="73:31">type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="75:5" pos:end="169:5">for <control pos:start="75:9" pos:end="75:44">(<init pos:start="75:10" pos:end="75:22"><expr pos:start="75:10" pos:end="75:21"><name pos:start="75:10" pos:end="75:12">crm</name> <operator pos:start="75:14" pos:end="75:14">=</operator> <name pos:start="75:16" pos:end="75:21">crmmin</name></expr>;</init> <condition pos:start="75:24" pos:end="75:37"><expr pos:start="75:24" pos:end="75:36"><name pos:start="75:24" pos:end="75:26">crm</name> <operator pos:start="75:28" pos:end="75:29">&lt;=</operator> <name pos:start="75:31" pos:end="75:36">crmmax</name></expr>;</condition> <incr pos:start="75:39" pos:end="75:43"><expr pos:start="75:39" pos:end="75:43"><name pos:start="75:39" pos:end="75:41">crm</name><operator pos:start="75:42" pos:end="75:43">++</operator></expr></incr>)</control> <block pos:start="75:46" pos:end="169:5">{<block_content pos:start="77:9" pos:end="167:9">

        <for pos:start="77:9" pos:end="167:9">for <control pos:start="77:13" pos:end="77:53">(<init pos:start="77:14" pos:end="77:28"><expr pos:start="77:14" pos:end="77:27"><name pos:start="77:14" pos:end="77:17">opc1</name> <operator pos:start="77:19" pos:end="77:19">=</operator> <name pos:start="77:21" pos:end="77:27">opc1min</name></expr>;</init> <condition pos:start="77:30" pos:end="77:45"><expr pos:start="77:30" pos:end="77:44"><name pos:start="77:30" pos:end="77:33">opc1</name> <operator pos:start="77:35" pos:end="77:36">&lt;=</operator> <name pos:start="77:38" pos:end="77:44">opc1max</name></expr>;</condition> <incr pos:start="77:47" pos:end="77:52"><expr pos:start="77:47" pos:end="77:52"><name pos:start="77:47" pos:end="77:50">opc1</name><operator pos:start="77:51" pos:end="77:52">++</operator></expr></incr>)</control> <block pos:start="77:55" pos:end="167:9">{<block_content pos:start="79:13" pos:end="165:13">

            <for pos:start="79:13" pos:end="165:13">for <control pos:start="79:17" pos:end="79:57">(<init pos:start="79:18" pos:end="79:32"><expr pos:start="79:18" pos:end="79:31"><name pos:start="79:18" pos:end="79:21">opc2</name> <operator pos:start="79:23" pos:end="79:23">=</operator> <name pos:start="79:25" pos:end="79:31">opc2min</name></expr>;</init> <condition pos:start="79:34" pos:end="79:49"><expr pos:start="79:34" pos:end="79:48"><name pos:start="79:34" pos:end="79:37">opc2</name> <operator pos:start="79:39" pos:end="79:40">&lt;=</operator> <name pos:start="79:42" pos:end="79:48">opc2max</name></expr>;</condition> <incr pos:start="79:51" pos:end="79:56"><expr pos:start="79:51" pos:end="79:56"><name pos:start="79:51" pos:end="79:54">opc2</name><operator pos:start="79:55" pos:end="79:56">++</operator></expr></incr>)</control> <block pos:start="79:59" pos:end="165:13">{<block_content pos:start="81:17" pos:end="163:59">

                <decl_stmt pos:start="81:17" pos:end="81:51"><decl pos:start="81:17" pos:end="81:50"><type pos:start="81:17" pos:end="81:26"><name pos:start="81:17" pos:end="81:24">uint32_t</name> <modifier pos:start="81:26" pos:end="81:26">*</modifier></type><name pos:start="81:27" pos:end="81:29">key</name> <init pos:start="81:31" pos:end="81:50">= <expr pos:start="81:33" pos:end="81:50"><call pos:start="81:33" pos:end="81:50"><name pos:start="81:33" pos:end="81:37">g_new</name><argument_list pos:start="81:38" pos:end="81:50">(<argument pos:start="81:39" pos:end="81:46"><expr pos:start="81:39" pos:end="81:46"><name pos:start="81:39" pos:end="81:46">uint32_t</name></expr></argument>, <argument pos:start="81:49" pos:end="81:49"><expr pos:start="81:49" pos:end="81:49"><literal type="number" pos:start="81:49" pos:end="81:49">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="83:17" pos:end="83:69"><decl pos:start="83:17" pos:end="83:68"><type pos:start="83:17" pos:end="83:30"><name pos:start="83:17" pos:end="83:28">ARMCPRegInfo</name> <modifier pos:start="83:30" pos:end="83:30">*</modifier></type><name pos:start="83:31" pos:end="83:32">r2</name> <init pos:start="83:34" pos:end="83:68">= <expr pos:start="83:36" pos:end="83:68"><call pos:start="83:36" pos:end="83:68"><name pos:start="83:36" pos:end="83:43">g_memdup</name><argument_list pos:start="83:44" pos:end="83:68">(<argument pos:start="83:45" pos:end="83:45"><expr pos:start="83:45" pos:end="83:45"><name pos:start="83:45" pos:end="83:45">r</name></expr></argument>, <argument pos:start="83:48" pos:end="83:67"><expr pos:start="83:48" pos:end="83:67"><sizeof pos:start="83:48" pos:end="83:67">sizeof<argument_list pos:start="83:54" pos:end="83:67">(<argument pos:start="83:55" pos:end="83:66"><expr pos:start="83:55" pos:end="83:66"><name pos:start="83:55" pos:end="83:66">ARMCPRegInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt pos:start="85:17" pos:end="85:60"><decl pos:start="85:17" pos:end="85:59"><type pos:start="85:17" pos:end="85:19"><name pos:start="85:17" pos:end="85:19">int</name></type> <name pos:start="85:21" pos:end="85:24">is64</name> <init pos:start="85:26" pos:end="85:59">= <expr pos:start="85:28" pos:end="85:59"><ternary pos:start="85:28" pos:end="85:59"><condition pos:start="85:28" pos:end="85:53"><expr pos:start="85:28" pos:end="85:51"><operator pos:start="85:28" pos:end="85:28">(</operator><name pos:start="85:29" pos:end="85:35"><name pos:start="85:29" pos:end="85:29">r</name><operator pos:start="85:30" pos:end="85:31">-&gt;</operator><name pos:start="85:32" pos:end="85:35">type</name></name> <operator pos:start="85:37" pos:end="85:37">&amp;</operator> <name pos:start="85:39" pos:end="85:50">ARM_CP_64BIT</name><operator pos:start="85:51" pos:end="85:51">)</operator></expr> ?</condition><then pos:start="85:55" pos:end="85:55"> <expr pos:start="85:55" pos:end="85:55"><literal type="number" pos:start="85:55" pos:end="85:55">1</literal></expr> </then><else pos:start="85:57" pos:end="85:59">: <expr pos:start="85:59" pos:end="85:59"><literal type="number" pos:start="85:59" pos:end="85:59">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <expr_stmt pos:start="87:17" pos:end="87:75"><expr pos:start="87:17" pos:end="87:74"><operator pos:start="87:17" pos:end="87:17">*</operator><name pos:start="87:18" pos:end="87:20">key</name> <operator pos:start="87:22" pos:end="87:22">=</operator> <call pos:start="87:24" pos:end="87:74"><name pos:start="87:24" pos:end="87:36">ENCODE_CP_REG</name><argument_list pos:start="87:37" pos:end="87:74">(<argument pos:start="87:38" pos:end="87:42"><expr pos:start="87:38" pos:end="87:42"><name pos:start="87:38" pos:end="87:42"><name pos:start="87:38" pos:end="87:38">r</name><operator pos:start="87:39" pos:end="87:40">-&gt;</operator><name pos:start="87:41" pos:end="87:42">cp</name></name></expr></argument>, <argument pos:start="87:45" pos:end="87:48"><expr pos:start="87:45" pos:end="87:48"><name pos:start="87:45" pos:end="87:48">is64</name></expr></argument>, <argument pos:start="87:51" pos:end="87:56"><expr pos:start="87:51" pos:end="87:56"><name pos:start="87:51" pos:end="87:56"><name pos:start="87:51" pos:end="87:51">r</name><operator pos:start="87:52" pos:end="87:53">-&gt;</operator><name pos:start="87:54" pos:end="87:56">crn</name></name></expr></argument>, <argument pos:start="87:59" pos:end="87:61"><expr pos:start="87:59" pos:end="87:61"><name pos:start="87:59" pos:end="87:61">crm</name></expr></argument>, <argument pos:start="87:64" pos:end="87:67"><expr pos:start="87:64" pos:end="87:67"><name pos:start="87:64" pos:end="87:67">opc1</name></expr></argument>, <argument pos:start="87:70" pos:end="87:73"><expr pos:start="87:70" pos:end="87:73"><name pos:start="87:70" pos:end="87:73">opc2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt pos:start="89:17" pos:end="93:17"><if pos:start="89:17" pos:end="93:17">if <condition pos:start="89:20" pos:end="89:27">(<expr pos:start="89:21" pos:end="89:26"><name pos:start="89:21" pos:end="89:26">opaque</name></expr>)</condition> <block pos:start="89:29" pos:end="93:17">{<block_content pos:start="91:21" pos:end="91:40">

                    <expr_stmt pos:start="91:21" pos:end="91:40"><expr pos:start="91:21" pos:end="91:39"><name pos:start="91:21" pos:end="91:30"><name pos:start="91:21" pos:end="91:22">r2</name><operator pos:start="91:23" pos:end="91:24">-&gt;</operator><name pos:start="91:25" pos:end="91:30">opaque</name></name> <operator pos:start="91:32" pos:end="91:32">=</operator> <name pos:start="91:34" pos:end="91:39">opaque</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>

                <comment type="block" pos:start="95:17" pos:end="99:19">/* Make sure reginfo passed to helpers for wildcarded regs

                 * has the correct crm/opc1/opc2 for this reg, not CP_ANY:

                 */</comment>

                <expr_stmt pos:start="101:17" pos:end="101:30"><expr pos:start="101:17" pos:end="101:29"><name pos:start="101:17" pos:end="101:23"><name pos:start="101:17" pos:end="101:18">r2</name><operator pos:start="101:19" pos:end="101:20">-&gt;</operator><name pos:start="101:21" pos:end="101:23">crm</name></name> <operator pos:start="101:25" pos:end="101:25">=</operator> <name pos:start="101:27" pos:end="101:29">crm</name></expr>;</expr_stmt>

                <expr_stmt pos:start="103:17" pos:end="103:32"><expr pos:start="103:17" pos:end="103:31"><name pos:start="103:17" pos:end="103:24"><name pos:start="103:17" pos:end="103:18">r2</name><operator pos:start="103:19" pos:end="103:20">-&gt;</operator><name pos:start="103:21" pos:end="103:24">opc1</name></name> <operator pos:start="103:26" pos:end="103:26">=</operator> <name pos:start="103:28" pos:end="103:31">opc1</name></expr>;</expr_stmt>

                <expr_stmt pos:start="105:17" pos:end="105:32"><expr pos:start="105:17" pos:end="105:31"><name pos:start="105:17" pos:end="105:24"><name pos:start="105:17" pos:end="105:18">r2</name><operator pos:start="105:19" pos:end="105:20">-&gt;</operator><name pos:start="105:21" pos:end="105:24">opc2</name></name> <operator pos:start="105:26" pos:end="105:26">=</operator> <name pos:start="105:28" pos:end="105:31">opc2</name></expr>;</expr_stmt>

                <comment type="block" pos:start="107:17" pos:end="117:19">/* By convention, for wildcarded registers only the first

                 * entry is used for migration; the others are marked as

                 * NO_MIGRATE so we don't try to transfer the register

                 * multiple times. Special registers (ie NOP/WFI) are

                 * never migratable.

                 */</comment>

                <if_stmt pos:start="119:17" pos:end="129:17"><if pos:start="119:17" pos:end="129:17">if <condition pos:start="119:20" pos:end="125:55">(<expr pos:start="119:21" pos:end="125:54"><operator pos:start="119:21" pos:end="119:21">(</operator><name pos:start="119:22" pos:end="119:28"><name pos:start="119:22" pos:end="119:22">r</name><operator pos:start="119:23" pos:end="119:24">-&gt;</operator><name pos:start="119:25" pos:end="119:28">type</name></name> <operator pos:start="119:30" pos:end="119:30">&amp;</operator> <name pos:start="119:32" pos:end="119:45">ARM_CP_SPECIAL</name><operator pos:start="119:46" pos:end="119:46">)</operator> <operator pos:start="119:48" pos:end="119:49">||</operator>

                    <operator pos:start="121:21" pos:end="121:21">(</operator><operator pos:start="121:22" pos:end="121:22">(</operator><name pos:start="121:23" pos:end="121:28"><name pos:start="121:23" pos:end="121:23">r</name><operator pos:start="121:24" pos:end="121:25">-&gt;</operator><name pos:start="121:26" pos:end="121:28">crm</name></name> <operator pos:start="121:30" pos:end="121:31">==</operator> <name pos:start="121:33" pos:end="121:38">CP_ANY</name><operator pos:start="121:39" pos:end="121:39">)</operator> <operator pos:start="121:41" pos:end="121:42">&amp;&amp;</operator> <name pos:start="121:44" pos:end="121:46">crm</name> <operator pos:start="121:48" pos:end="121:49">!=</operator> <literal type="number" pos:start="121:51" pos:end="121:51">0</literal><operator pos:start="121:52" pos:end="121:52">)</operator> <operator pos:start="121:54" pos:end="121:55">||</operator>

                    <operator pos:start="123:21" pos:end="123:21">(</operator><operator pos:start="123:22" pos:end="123:22">(</operator><name pos:start="123:23" pos:end="123:29"><name pos:start="123:23" pos:end="123:23">r</name><operator pos:start="123:24" pos:end="123:25">-&gt;</operator><name pos:start="123:26" pos:end="123:29">opc1</name></name> <operator pos:start="123:31" pos:end="123:32">==</operator> <name pos:start="123:34" pos:end="123:39">CP_ANY</name><operator pos:start="123:40" pos:end="123:40">)</operator> <operator pos:start="123:42" pos:end="123:43">&amp;&amp;</operator> <name pos:start="123:45" pos:end="123:48">opc1</name> <operator pos:start="123:50" pos:end="123:51">!=</operator> <literal type="number" pos:start="123:53" pos:end="123:53">0</literal><operator pos:start="123:54" pos:end="123:54">)</operator> <operator pos:start="123:56" pos:end="123:57">||</operator>

                    <operator pos:start="125:21" pos:end="125:21">(</operator><operator pos:start="125:22" pos:end="125:22">(</operator><name pos:start="125:23" pos:end="125:29"><name pos:start="125:23" pos:end="125:23">r</name><operator pos:start="125:24" pos:end="125:25">-&gt;</operator><name pos:start="125:26" pos:end="125:29">opc2</name></name> <operator pos:start="125:31" pos:end="125:32">==</operator> <name pos:start="125:34" pos:end="125:39">CP_ANY</name><operator pos:start="125:40" pos:end="125:40">)</operator> <operator pos:start="125:42" pos:end="125:43">&amp;&amp;</operator> <name pos:start="125:45" pos:end="125:48">opc2</name> <operator pos:start="125:50" pos:end="125:51">!=</operator> <literal type="number" pos:start="125:53" pos:end="125:53">0</literal><operator pos:start="125:54" pos:end="125:54">)</operator></expr>)</condition> <block pos:start="125:57" pos:end="129:17">{<block_content pos:start="127:21" pos:end="127:50">

                    <expr_stmt pos:start="127:21" pos:end="127:50"><expr pos:start="127:21" pos:end="127:49"><name pos:start="127:21" pos:end="127:28"><name pos:start="127:21" pos:end="127:22">r2</name><operator pos:start="127:23" pos:end="127:24">-&gt;</operator><name pos:start="127:25" pos:end="127:28">type</name></name> <operator pos:start="127:30" pos:end="127:31">|=</operator> <name pos:start="127:33" pos:end="127:49">ARM_CP_NO_MIGRATE</name></expr>;</expr_stmt>

                </block_content>}</block></if></if_stmt>



                <comment type="block" pos:start="133:17" pos:end="137:19">/* Overriding of an existing definition must be explicitly

                 * requested.

                 */</comment>

                <if_stmt pos:start="139:17" pos:end="161:17"><if pos:start="139:17" pos:end="161:17">if <condition pos:start="139:20" pos:end="139:49">(<expr pos:start="139:21" pos:end="139:48"><operator pos:start="139:21" pos:end="139:21">!</operator><operator pos:start="139:22" pos:end="139:22">(</operator><name pos:start="139:23" pos:end="139:29"><name pos:start="139:23" pos:end="139:23">r</name><operator pos:start="139:24" pos:end="139:25">-&gt;</operator><name pos:start="139:26" pos:end="139:29">type</name></name> <operator pos:start="139:31" pos:end="139:31">&amp;</operator> <name pos:start="139:33" pos:end="139:47">ARM_CP_OVERRIDE</name><operator pos:start="139:48" pos:end="139:48">)</operator></expr>)</condition> <block pos:start="139:51" pos:end="161:17">{<block_content pos:start="141:21" pos:end="159:21">

                    <decl_stmt pos:start="141:21" pos:end="141:41"><decl pos:start="141:21" pos:end="141:40"><type pos:start="141:21" pos:end="141:34"><name pos:start="141:21" pos:end="141:32">ARMCPRegInfo</name> <modifier pos:start="141:34" pos:end="141:34">*</modifier></type><name pos:start="141:35" pos:end="141:40">oldreg</name></decl>;</decl_stmt>

                    <expr_stmt pos:start="143:21" pos:end="143:68"><expr pos:start="143:21" pos:end="143:67"><name pos:start="143:21" pos:end="143:26">oldreg</name> <operator pos:start="143:28" pos:end="143:28">=</operator> <call pos:start="143:30" pos:end="143:67"><name pos:start="143:30" pos:end="143:48">g_hash_table_lookup</name><argument_list pos:start="143:49" pos:end="143:67">(<argument pos:start="143:50" pos:end="143:61"><expr pos:start="143:50" pos:end="143:61"><name pos:start="143:50" pos:end="143:61"><name pos:start="143:50" pos:end="143:52">cpu</name><operator pos:start="143:53" pos:end="143:54">-&gt;</operator><name pos:start="143:55" pos:end="143:61">cp_regs</name></name></expr></argument>, <argument pos:start="143:64" pos:end="143:66"><expr pos:start="143:64" pos:end="143:66"><name pos:start="143:64" pos:end="143:66">key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt pos:start="145:21" pos:end="159:21"><if pos:start="145:21" pos:end="159:21">if <condition pos:start="145:24" pos:end="145:68">(<expr pos:start="145:25" pos:end="145:67"><name pos:start="145:25" pos:end="145:30">oldreg</name> <operator pos:start="145:32" pos:end="145:33">&amp;&amp;</operator> <operator pos:start="145:35" pos:end="145:35">!</operator><operator pos:start="145:36" pos:end="145:36">(</operator><name pos:start="145:37" pos:end="145:48"><name pos:start="145:37" pos:end="145:42">oldreg</name><operator pos:start="145:43" pos:end="145:44">-&gt;</operator><name pos:start="145:45" pos:end="145:48">type</name></name> <operator pos:start="145:50" pos:end="145:50">&amp;</operator> <name pos:start="145:52" pos:end="145:66">ARM_CP_OVERRIDE</name><operator pos:start="145:67" pos:end="145:67">)</operator></expr>)</condition> <block pos:start="145:70" pos:end="159:21">{<block_content pos:start="147:25" pos:end="157:47">

                        <expr_stmt pos:start="147:25" pos:end="155:56"><expr pos:start="147:25" pos:end="155:55"><call pos:start="147:25" pos:end="155:55"><name pos:start="147:25" pos:end="147:31">fprintf</name><argument_list pos:start="147:32" pos:end="155:55">(<argument pos:start="147:33" pos:end="147:38"><expr pos:start="147:33" pos:end="147:38"><name pos:start="147:33" pos:end="147:38">stderr</name></expr></argument>, <argument pos:start="147:41" pos:end="151:50"><expr pos:start="147:41" pos:end="151:50"><literal type="string" pos:start="147:41" pos:end="147:75">"Register redefined: cp=%d %d bit "</literal>

                                <literal type="string" pos:start="149:33" pos:end="149:65">"crn=%d crm=%d opc1=%d opc2=%d, "</literal>

                                <literal type="string" pos:start="151:33" pos:end="151:50">"was %s, now %s\n"</literal></expr></argument>, <argument pos:start="151:53" pos:end="151:58"><expr pos:start="151:53" pos:end="151:58"><name pos:start="151:53" pos:end="151:58"><name pos:start="151:53" pos:end="151:54">r2</name><operator pos:start="151:55" pos:end="151:56">-&gt;</operator><name pos:start="151:57" pos:end="151:58">cp</name></name></expr></argument>, <argument pos:start="151:61" pos:end="151:74"><expr pos:start="151:61" pos:end="151:74"><literal type="number" pos:start="151:61" pos:end="151:64">32</literal> <operator pos:start="151:64" pos:end="151:64">+</operator> <literal type="number" pos:start="151:66" pos:end="151:67">32</literal> <operator pos:start="151:69" pos:end="151:69">*</operator> <name pos:start="151:71" pos:end="151:74">is64</name></expr></argument>,

                                <argument pos:start="153:33" pos:end="153:39"><expr pos:start="153:33" pos:end="153:39"><name pos:start="153:33" pos:end="153:39"><name pos:start="153:33" pos:end="153:34">r2</name><operator pos:start="153:35" pos:end="153:36">-&gt;</operator><name pos:start="153:37" pos:end="153:39">crn</name></name></expr></argument>, <argument pos:start="153:42" pos:end="153:48"><expr pos:start="153:42" pos:end="153:48"><name pos:start="153:42" pos:end="153:48"><name pos:start="153:42" pos:end="153:43">r2</name><operator pos:start="153:44" pos:end="153:45">-&gt;</operator><name pos:start="153:46" pos:end="153:48">crm</name></name></expr></argument>, <argument pos:start="153:51" pos:end="153:58"><expr pos:start="153:51" pos:end="153:58"><name pos:start="153:51" pos:end="153:58"><name pos:start="153:51" pos:end="153:52">r2</name><operator pos:start="153:53" pos:end="153:54">-&gt;</operator><name pos:start="153:55" pos:end="153:58">opc1</name></name></expr></argument>, <argument pos:start="153:61" pos:end="153:68"><expr pos:start="153:61" pos:end="153:68"><name pos:start="153:61" pos:end="153:68"><name pos:start="153:61" pos:end="153:62">r2</name><operator pos:start="153:63" pos:end="153:64">-&gt;</operator><name pos:start="153:65" pos:end="153:68">opc2</name></name></expr></argument>,

                                <argument pos:start="155:33" pos:end="155:44"><expr pos:start="155:33" pos:end="155:44"><name pos:start="155:33" pos:end="155:44"><name pos:start="155:33" pos:end="155:38">oldreg</name><operator pos:start="155:39" pos:end="155:40">-&gt;</operator><name pos:start="155:41" pos:end="155:44">name</name></name></expr></argument>, <argument pos:start="155:47" pos:end="155:54"><expr pos:start="155:47" pos:end="155:54"><name pos:start="155:47" pos:end="155:54"><name pos:start="155:47" pos:end="155:48">r2</name><operator pos:start="155:49" pos:end="155:50">-&gt;</operator><name pos:start="155:51" pos:end="155:54">name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt pos:start="157:25" pos:end="157:47"><expr pos:start="157:25" pos:end="157:46"><call pos:start="157:25" pos:end="157:46"><name pos:start="157:25" pos:end="157:44">g_assert_not_reached</name><argument_list pos:start="157:45" pos:end="157:46">()</argument_list></call></expr>;</expr_stmt>

                    </block_content>}</block></if></if_stmt>

                </block_content>}</block></if></if_stmt>

                <expr_stmt pos:start="163:17" pos:end="163:59"><expr pos:start="163:17" pos:end="163:58"><call pos:start="163:17" pos:end="163:58"><name pos:start="163:17" pos:end="163:35">g_hash_table_insert</name><argument_list pos:start="163:36" pos:end="163:58">(<argument pos:start="163:37" pos:end="163:48"><expr pos:start="163:37" pos:end="163:48"><name pos:start="163:37" pos:end="163:48"><name pos:start="163:37" pos:end="163:39">cpu</name><operator pos:start="163:40" pos:end="163:41">-&gt;</operator><name pos:start="163:42" pos:end="163:48">cp_regs</name></name></expr></argument>, <argument pos:start="163:51" pos:end="163:53"><expr pos:start="163:51" pos:end="163:53"><name pos:start="163:51" pos:end="163:53">key</name></expr></argument>, <argument pos:start="163:56" pos:end="163:57"><expr pos:start="163:56" pos:end="163:57"><name pos:start="163:56" pos:end="163:57">r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            </block_content>}</block></for>

        </block_content>}</block></for>

    </block_content>}</block></for>

</block_content>}</block></function>
</unit>
