<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/1/18971.c" pos:tabs="8"><function pos:start="1:1" pos:end="79:1"><type pos:start="1:1" pos:end="1:14"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:14">ssize_t</name></type> <name pos:start="1:16" pos:end="1:37">stellaris_enet_receive</name><parameter_list pos:start="1:38" pos:end="1:90">(<parameter pos:start="1:39" pos:end="1:56"><decl pos:start="1:39" pos:end="1:56"><type pos:start="1:39" pos:end="1:56"><name pos:start="1:39" pos:end="1:52">NetClientState</name> <modifier pos:start="1:54" pos:end="1:54">*</modifier></type><name pos:start="1:55" pos:end="1:56">nc</name></decl></parameter>, <parameter pos:start="1:59" pos:end="1:76"><decl pos:start="1:59" pos:end="1:76"><type pos:start="1:59" pos:end="1:76"><specifier pos:start="1:59" pos:end="1:63">const</specifier> <name pos:start="1:65" pos:end="1:71">uint8_t</name> <modifier pos:start="1:73" pos:end="1:73">*</modifier></type><name pos:start="1:74" pos:end="1:76">buf</name></decl></parameter>, <parameter pos:start="1:79" pos:end="1:89"><decl pos:start="1:79" pos:end="1:89"><type pos:start="1:79" pos:end="1:89"><name pos:start="1:79" pos:end="1:84">size_t</name></type> <name pos:start="1:86" pos:end="1:89">size</name></decl></parameter>)</parameter_list>

<block pos:start="3:1" pos:end="79:1">{<block_content pos:start="5:5" pos:end="77:16">

    <decl_stmt pos:start="5:5" pos:end="5:54"><decl pos:start="5:5" pos:end="5:53"><type pos:start="5:5" pos:end="5:26"><name pos:start="5:5" pos:end="5:24">stellaris_enet_state</name> <modifier pos:start="5:26" pos:end="5:26">*</modifier></type><name pos:start="5:27" pos:end="5:27">s</name> <init pos:start="5:29" pos:end="5:53">= <expr pos:start="5:31" pos:end="5:53"><call pos:start="5:31" pos:end="5:53"><name pos:start="5:31" pos:end="5:49">qemu_get_nic_opaque</name><argument_list pos:start="5:50" pos:end="5:53">(<argument pos:start="5:51" pos:end="5:52"><expr pos:start="5:51" pos:end="5:52"><name pos:start="5:51" pos:end="5:52">nc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt pos:start="7:5" pos:end="7:10"><decl pos:start="7:5" pos:end="7:9"><type pos:start="7:5" pos:end="7:7"><name pos:start="7:5" pos:end="7:7">int</name></type> <name pos:start="7:9" pos:end="7:9">n</name></decl>;</decl_stmt>

    <decl_stmt pos:start="9:5" pos:end="9:15"><decl pos:start="9:5" pos:end="9:14"><type pos:start="9:5" pos:end="9:13"><name pos:start="9:5" pos:end="9:11">uint8_t</name> <modifier pos:start="9:13" pos:end="9:13">*</modifier></type><name pos:start="9:14" pos:end="9:14">p</name></decl>;</decl_stmt>

    <decl_stmt pos:start="11:5" pos:end="11:17"><decl pos:start="11:5" pos:end="11:16"><type pos:start="11:5" pos:end="11:12"><name pos:start="11:5" pos:end="11:12">uint32_t</name></type> <name pos:start="11:14" pos:end="11:16">crc</name></decl>;</decl_stmt>



    <if_stmt pos:start="15:5" pos:end="17:18"><if pos:start="15:5" pos:end="17:18">if <condition pos:start="15:8" pos:end="15:38">(<expr pos:start="15:9" pos:end="15:37"><operator pos:start="15:9" pos:end="15:9">(</operator><name pos:start="15:10" pos:end="15:16"><name pos:start="15:10" pos:end="15:10">s</name><operator pos:start="15:11" pos:end="15:12">-&gt;</operator><name pos:start="15:13" pos:end="15:16">rctl</name></name> <operator pos:start="15:18" pos:end="15:18">&amp;</operator> <name pos:start="15:20" pos:end="15:31">SE_RCTL_RXEN</name><operator pos:start="15:32" pos:end="15:32">)</operator> <operator pos:start="15:34" pos:end="15:35">==</operator> <literal type="number" pos:start="15:37" pos:end="15:37">0</literal></expr>)</condition><block type="pseudo" pos:start="17:9" pos:end="17:18"><block_content pos:start="17:9" pos:end="17:18">

        <return pos:start="17:9" pos:end="17:18">return <expr pos:start="17:16" pos:end="17:17"><operator pos:start="17:16" pos:end="17:16">-</operator><literal type="number" pos:start="17:17" pos:end="17:17">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:20">(<expr pos:start="19:9" pos:end="19:19"><name pos:start="19:9" pos:end="19:13"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:13">np</name></name> <operator pos:start="19:15" pos:end="19:16">&gt;=</operator> <literal type="number" pos:start="19:18" pos:end="19:19">31</literal></expr>)</condition> <block pos:start="19:22" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:17">

        <return pos:start="21:9" pos:end="21:17">return <expr pos:start="21:16" pos:end="21:16"><literal type="number" pos:start="21:16" pos:end="21:16">0</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="27:5" pos:end="27:47"><expr pos:start="27:5" pos:end="27:46"><call pos:start="27:5" pos:end="27:46"><name pos:start="27:5" pos:end="27:11">DPRINTF</name><argument_list pos:start="27:12" pos:end="27:46">(<argument pos:start="27:13" pos:end="27:39"><expr pos:start="27:13" pos:end="27:39"><literal type="string" pos:start="27:13" pos:end="27:39">"Received packet len=%zu\n"</literal></expr></argument>, <argument pos:start="27:42" pos:end="27:45"><expr pos:start="27:42" pos:end="27:45"><name pos:start="27:42" pos:end="27:45">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="29:5" pos:end="29:31"><expr pos:start="29:5" pos:end="29:30"><name pos:start="29:5" pos:end="29:5">n</name> <operator pos:start="29:7" pos:end="29:7">=</operator> <name pos:start="29:9" pos:end="29:22"><name pos:start="29:9" pos:end="29:9">s</name><operator pos:start="29:10" pos:end="29:11">-&gt;</operator><name pos:start="29:12" pos:end="29:22">next_packet</name></name> <operator pos:start="29:24" pos:end="29:24">+</operator> <name pos:start="29:26" pos:end="29:30"><name pos:start="29:26" pos:end="29:26">s</name><operator pos:start="29:27" pos:end="29:28">-&gt;</operator><name pos:start="29:29" pos:end="29:30">np</name></name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="33:16"><if pos:start="31:5" pos:end="33:16">if <condition pos:start="31:8" pos:end="31:16">(<expr pos:start="31:9" pos:end="31:15"><name pos:start="31:9" pos:end="31:9">n</name> <operator pos:start="31:11" pos:end="31:12">&gt;=</operator> <literal type="number" pos:start="31:14" pos:end="31:15">31</literal></expr>)</condition><block type="pseudo" pos:start="33:9" pos:end="33:16"><block_content pos:start="33:9" pos:end="33:16">

        <expr_stmt pos:start="33:9" pos:end="33:16"><expr pos:start="33:9" pos:end="33:15"><name pos:start="33:9" pos:end="33:9">n</name> <operator pos:start="33:11" pos:end="33:12">-=</operator> <literal type="number" pos:start="33:14" pos:end="33:15">31</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:12"><expr pos:start="35:5" pos:end="35:11"><name pos:start="35:5" pos:end="35:9"><name pos:start="35:5" pos:end="35:5">s</name><operator pos:start="35:6" pos:end="35:7">-&gt;</operator><name pos:start="35:8" pos:end="35:9">np</name></name><operator pos:start="35:10" pos:end="35:11">++</operator></expr>;</expr_stmt>



    <expr_stmt pos:start="39:5" pos:end="39:28"><expr pos:start="39:5" pos:end="39:27"><name pos:start="39:5" pos:end="39:12"><name pos:start="39:5" pos:end="39:5">s</name><operator pos:start="39:6" pos:end="39:7">-&gt;</operator><name pos:start="39:8" pos:end="39:9">rx</name><index pos:start="39:10" pos:end="39:12">[<expr pos:start="39:11" pos:end="39:11"><name pos:start="39:11" pos:end="39:11">n</name></expr>]</index></name><operator pos:start="39:13" pos:end="39:13">.</operator><name pos:start="39:14" pos:end="39:16">len</name> <operator pos:start="39:18" pos:end="39:18">=</operator> <name pos:start="39:20" pos:end="39:23">size</name> <operator pos:start="39:25" pos:end="39:25">+</operator> <literal type="number" pos:start="39:27" pos:end="39:27">6</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="41:5" pos:end="41:22"><expr pos:start="41:5" pos:end="41:21"><name pos:start="41:5" pos:end="41:5">p</name> <operator pos:start="41:7" pos:end="41:7">=</operator> <name pos:start="41:9" pos:end="41:16"><name pos:start="41:9" pos:end="41:9">s</name><operator pos:start="41:10" pos:end="41:11">-&gt;</operator><name pos:start="41:12" pos:end="41:13">rx</name><index pos:start="41:14" pos:end="41:16">[<expr pos:start="41:15" pos:end="41:15"><name pos:start="41:15" pos:end="41:15">n</name></expr>]</index></name><operator pos:start="41:17" pos:end="41:17">.</operator><name pos:start="41:18" pos:end="41:21">data</name></expr>;</expr_stmt>

    <expr_stmt pos:start="43:5" pos:end="43:24"><expr pos:start="43:5" pos:end="43:23"><operator pos:start="43:5" pos:end="43:5">*</operator><operator pos:start="43:6" pos:end="43:6">(</operator><name pos:start="43:7" pos:end="43:7">p</name><operator pos:start="43:8" pos:end="43:9">++</operator><operator pos:start="43:10" pos:end="43:10">)</operator> <operator pos:start="43:12" pos:end="43:12">=</operator> <operator pos:start="43:14" pos:end="43:14">(</operator><name pos:start="43:15" pos:end="43:18">size</name> <operator pos:start="43:20" pos:end="43:20">+</operator> <literal type="number" pos:start="43:22" pos:end="43:22">6</literal><operator pos:start="43:23" pos:end="43:23">)</operator></expr>;</expr_stmt>

    <expr_stmt pos:start="45:5" pos:end="45:29"><expr pos:start="45:5" pos:end="45:28"><operator pos:start="45:5" pos:end="45:5">*</operator><operator pos:start="45:6" pos:end="45:6">(</operator><name pos:start="45:7" pos:end="45:7">p</name><operator pos:start="45:8" pos:end="45:9">++</operator><operator pos:start="45:10" pos:end="45:10">)</operator> <operator pos:start="45:12" pos:end="45:12">=</operator> <operator pos:start="45:14" pos:end="45:14">(</operator><name pos:start="45:15" pos:end="45:18">size</name> <operator pos:start="45:20" pos:end="45:20">+</operator> <literal type="number" pos:start="45:22" pos:end="45:22">6</literal><operator pos:start="45:23" pos:end="45:23">)</operator> <operator pos:start="45:25" pos:end="45:26">&gt;&gt;</operator> <literal type="number" pos:start="45:28" pos:end="45:28">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="47:5" pos:end="47:26"><expr pos:start="47:5" pos:end="47:25"><call pos:start="47:5" pos:end="47:25"><name pos:start="47:5" pos:end="47:10">memcpy</name> <argument_list pos:start="47:12" pos:end="47:25">(<argument pos:start="47:13" pos:end="47:13"><expr pos:start="47:13" pos:end="47:13"><name pos:start="47:13" pos:end="47:13">p</name></expr></argument>, <argument pos:start="47:16" pos:end="47:18"><expr pos:start="47:16" pos:end="47:18"><name pos:start="47:16" pos:end="47:18">buf</name></expr></argument>, <argument pos:start="47:21" pos:end="47:24"><expr pos:start="47:21" pos:end="47:24"><name pos:start="47:21" pos:end="47:24">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="49:5" pos:end="49:14"><expr pos:start="49:5" pos:end="49:13"><name pos:start="49:5" pos:end="49:5">p</name> <operator pos:start="49:7" pos:end="49:8">+=</operator> <name pos:start="49:10" pos:end="49:13">size</name></expr>;</expr_stmt>

    <expr_stmt pos:start="51:5" pos:end="51:31"><expr pos:start="51:5" pos:end="51:30"><name pos:start="51:5" pos:end="51:7">crc</name> <operator pos:start="51:9" pos:end="51:9">=</operator> <call pos:start="51:11" pos:end="51:30"><name pos:start="51:11" pos:end="51:15">crc32</name><argument_list pos:start="51:16" pos:end="51:30">(<argument pos:start="51:17" pos:end="51:18"><expr pos:start="51:17" pos:end="51:18"><operator pos:start="51:17" pos:end="51:17">~</operator><literal type="number" pos:start="51:18" pos:end="51:18">0</literal></expr></argument>, <argument pos:start="51:21" pos:end="51:23"><expr pos:start="51:21" pos:end="51:23"><name pos:start="51:21" pos:end="51:23">buf</name></expr></argument>, <argument pos:start="51:26" pos:end="51:29"><expr pos:start="51:26" pos:end="51:29"><name pos:start="51:26" pos:end="51:29">size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="53:5" pos:end="53:17"><expr pos:start="53:5" pos:end="53:16"><operator pos:start="53:5" pos:end="53:5">*</operator><operator pos:start="53:6" pos:end="53:6">(</operator><name pos:start="53:7" pos:end="53:7">p</name><operator pos:start="53:8" pos:end="53:9">++</operator><operator pos:start="53:10" pos:end="53:10">)</operator> <operator pos:start="53:12" pos:end="53:12">=</operator> <name pos:start="53:14" pos:end="53:16">crc</name></expr>;</expr_stmt>

    <expr_stmt pos:start="55:5" pos:end="55:22"><expr pos:start="55:5" pos:end="55:21"><operator pos:start="55:5" pos:end="55:5">*</operator><operator pos:start="55:6" pos:end="55:6">(</operator><name pos:start="55:7" pos:end="55:7">p</name><operator pos:start="55:8" pos:end="55:9">++</operator><operator pos:start="55:10" pos:end="55:10">)</operator> <operator pos:start="55:12" pos:end="55:12">=</operator> <name pos:start="55:14" pos:end="55:16">crc</name> <operator pos:start="55:18" pos:end="55:19">&gt;&gt;</operator> <literal type="number" pos:start="55:21" pos:end="55:21">8</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="57:5" pos:end="57:23"><expr pos:start="57:5" pos:end="57:22"><operator pos:start="57:5" pos:end="57:5">*</operator><operator pos:start="57:6" pos:end="57:6">(</operator><name pos:start="57:7" pos:end="57:7">p</name><operator pos:start="57:8" pos:end="57:9">++</operator><operator pos:start="57:10" pos:end="57:10">)</operator> <operator pos:start="57:12" pos:end="57:12">=</operator> <name pos:start="57:14" pos:end="57:16">crc</name> <operator pos:start="57:18" pos:end="57:19">&gt;&gt;</operator> <literal type="number" pos:start="57:21" pos:end="57:22">16</literal></expr>;</expr_stmt>

    <expr_stmt pos:start="59:5" pos:end="59:23"><expr pos:start="59:5" pos:end="59:22"><operator pos:start="59:5" pos:end="59:5">*</operator><operator pos:start="59:6" pos:end="59:6">(</operator><name pos:start="59:7" pos:end="59:7">p</name><operator pos:start="59:8" pos:end="59:9">++</operator><operator pos:start="59:10" pos:end="59:10">)</operator> <operator pos:start="59:12" pos:end="59:12">=</operator> <name pos:start="59:14" pos:end="59:16">crc</name> <operator pos:start="59:18" pos:end="59:19">&gt;&gt;</operator> <literal type="number" pos:start="59:21" pos:end="59:22">24</literal></expr>;</expr_stmt>

    <comment type="block" pos:start="61:5" pos:end="61:54">/* Clear the remaining bytes in the last word.  */</comment>

    <if_stmt pos:start="63:5" pos:end="67:5"><if pos:start="63:5" pos:end="67:5">if <condition pos:start="63:8" pos:end="63:24">(<expr pos:start="63:9" pos:end="63:23"><operator pos:start="63:9" pos:end="63:9">(</operator><name pos:start="63:10" pos:end="63:13">size</name> <operator pos:start="63:15" pos:end="63:15">&amp;</operator> <literal type="number" pos:start="63:17" pos:end="63:17">3</literal><operator pos:start="63:18" pos:end="63:18">)</operator> <operator pos:start="63:20" pos:end="63:21">!=</operator> <literal type="number" pos:start="63:23" pos:end="63:23">2</literal></expr>)</condition> <block pos:start="63:26" pos:end="67:5">{<block_content pos:start="65:9" pos:end="65:37">

        <expr_stmt pos:start="65:9" pos:end="65:37"><expr pos:start="65:9" pos:end="65:36"><call pos:start="65:9" pos:end="65:36"><name pos:start="65:9" pos:end="65:14">memset</name><argument_list pos:start="65:15" pos:end="65:36">(<argument pos:start="65:16" pos:end="65:16"><expr pos:start="65:16" pos:end="65:16"><name pos:start="65:16" pos:end="65:16">p</name></expr></argument>, <argument pos:start="65:19" pos:end="65:19"><expr pos:start="65:19" pos:end="65:19"><literal type="number" pos:start="65:19" pos:end="65:19">0</literal></expr></argument>, <argument pos:start="65:22" pos:end="65:35"><expr pos:start="65:22" pos:end="65:35"><operator pos:start="65:22" pos:end="65:22">(</operator><literal type="number" pos:start="65:23" pos:end="65:25">6</literal> <operator pos:start="65:25" pos:end="65:25">-</operator> <name pos:start="65:27" pos:end="65:30">size</name><operator pos:start="65:31" pos:end="65:31">)</operator> <operator pos:start="65:33" pos:end="65:33">&amp;</operator> <literal type="number" pos:start="65:35" pos:end="65:35">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="71:5" pos:end="71:24"><expr pos:start="71:5" pos:end="71:23"><name pos:start="71:5" pos:end="71:10"><name pos:start="71:5" pos:end="71:5">s</name><operator pos:start="71:6" pos:end="71:7">-&gt;</operator><name pos:start="71:8" pos:end="71:10">ris</name></name> <operator pos:start="71:12" pos:end="71:13">|=</operator> <name pos:start="71:15" pos:end="71:23">SE_INT_RX</name></expr>;</expr_stmt>

    <expr_stmt pos:start="73:5" pos:end="73:29"><expr pos:start="73:5" pos:end="73:28"><call pos:start="73:5" pos:end="73:28"><name pos:start="73:5" pos:end="73:25">stellaris_enet_update</name><argument_list pos:start="73:26" pos:end="73:28">(<argument pos:start="73:27" pos:end="73:27"><expr pos:start="73:27" pos:end="73:27"><name pos:start="73:27" pos:end="73:27">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <return pos:start="77:5" pos:end="77:16">return <expr pos:start="77:12" pos:end="77:15"><name pos:start="77:12" pos:end="77:15">size</name></expr>;</return>

</block_content>}</block></function>
</unit>
