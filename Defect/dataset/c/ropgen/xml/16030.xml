<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/16030.c" pos:tabs="8"><decl_stmt pos:start="1:1" pos:end="107:1"><decl pos:start="1:1" pos:end="107:1"><type pos:start="1:1" pos:end="1:11"><specifier pos:start="1:1" pos:end="1:6">static</specifier> <name pos:start="1:8" pos:end="1:11">void</name></type> <name pos:start="1:13" pos:end="1:20">gic_init</name><argument_list pos:start="1:21" pos:end="4:0">(<argument pos:start="1:22" pos:end="1:33"><expr pos:start="1:22" pos:end="1:33"><name pos:start="1:22" pos:end="1:30">gic_state</name> <operator pos:start="1:32" pos:end="1:32">*</operator><name pos:start="1:33" pos:end="1:33">s</name></expr></argument>, <argument pos:start="1:36" pos:end="1:46"><expr pos:start="1:36" pos:end="1:46"><name pos:start="1:36" pos:end="1:38">int</name> <name pos:start="1:40" pos:end="1:46">num_cpu</name></expr></argument>, <argument pos:start="1:49" pos:end="1:59"><expr pos:start="1:49" pos:end="1:59"><name pos:start="1:49" pos:end="1:51">int</name> <name pos:start="1:53" pos:end="1:59">num_irq</name></expr></argument>)</argument_list>

<cpp:else pos:start="3:1" pos:end="3:5">#<cpp:directive pos:start="3:2" pos:end="3:5">else</cpp:directive></cpp:else>

static <name pos:start="5:8" pos:end="5:11">void</name> <name pos:start="5:13" pos:end="5:20">gic_init</name><argument_list pos:start="5:21" pos:end="8:0">(<argument pos:start="5:22" pos:end="5:33"><expr pos:start="5:22" pos:end="5:33"><name pos:start="5:22" pos:end="5:30">gic_state</name> <operator pos:start="5:32" pos:end="5:32">*</operator><name pos:start="5:33" pos:end="5:33">s</name></expr></argument>, <argument pos:start="5:36" pos:end="5:46"><expr pos:start="5:36" pos:end="5:46"><name pos:start="5:36" pos:end="5:38">int</name> <name pos:start="5:40" pos:end="5:46">num_irq</name></expr></argument>)</argument_list>

<cpp:endif pos:start="7:1" pos:end="7:6">#<cpp:directive pos:start="7:2" pos:end="7:6">endif</cpp:directive></cpp:endif>

<block pos:start="9:1" pos:end="107:1">{<block_content pos:start="11:5" pos:end="105:67">

    <decl_stmt pos:start="11:5" pos:end="16:0"><decl pos:start="11:5" pos:end="11:9"><type pos:start="11:5" pos:end="11:7"><name pos:start="11:5" pos:end="11:7">int</name></type> <name pos:start="11:9" pos:end="11:9">i</name></decl>;</decl_stmt>



<cpp:if pos:start="15:1" pos:end="15:12">#<cpp:directive pos:start="15:2" pos:end="15:3">if</cpp:directive> <expr pos:start="15:5" pos:end="15:12"><name pos:start="15:5" pos:end="15:8">NCPU</name> <operator pos:start="15:10" pos:end="15:10">&gt;</operator> <literal type="number" pos:start="15:12" pos:end="15:12">1</literal></expr></cpp:if>

    <expr_stmt pos:start="17:5" pos:end="17:25"><expr pos:start="17:5" pos:end="17:24"><name pos:start="17:5" pos:end="17:14"><name pos:start="17:5" pos:end="17:5">s</name><operator pos:start="17:6" pos:end="17:7">-&gt;</operator><name pos:start="17:8" pos:end="17:14">num_cpu</name></name> <operator pos:start="17:16" pos:end="17:16">=</operator> <name pos:start="17:18" pos:end="17:24">num_cpu</name></expr>;</expr_stmt>

    <if_stmt pos:start="19:5" pos:end="28:0"><if pos:start="19:5" pos:end="28:0">if <condition pos:start="19:8" pos:end="19:26">(<expr pos:start="19:9" pos:end="19:25"><name pos:start="19:9" pos:end="19:18"><name pos:start="19:9" pos:end="19:9">s</name><operator pos:start="19:10" pos:end="19:11">-&gt;</operator><name pos:start="19:12" pos:end="19:18">num_cpu</name></name> <operator pos:start="19:20" pos:end="19:20">&gt;</operator> <name pos:start="19:22" pos:end="19:25">NCPU</name></expr>)</condition> <block pos:start="19:28" pos:end="28:0">{<block_content pos:start="21:9" pos:end="23:32">

        <expr_stmt pos:start="21:9" pos:end="23:32"><expr pos:start="21:9" pos:end="23:31"><call pos:start="21:9" pos:end="23:31"><name pos:start="21:9" pos:end="21:16">hw_error</name><argument_list pos:start="21:17" pos:end="23:31">(<argument pos:start="21:18" pos:end="21:61"><expr pos:start="21:18" pos:end="21:61"><literal type="string" pos:start="21:18" pos:end="21:61">"requested %u CPUs exceeds GIC maximum %d\n"</literal></expr></argument>,

                 <argument pos:start="23:18" pos:end="23:24"><expr pos:start="23:18" pos:end="23:24"><name pos:start="23:18" pos:end="23:24">num_cpu</name></expr></argument>, <argument pos:start="23:27" pos:end="23:30"><expr pos:start="23:27" pos:end="23:30"><name pos:start="23:27" pos:end="23:30">NCPU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

<cpp:endif pos:start="27:1" pos:end="27:6">#<cpp:directive pos:start="27:2" pos:end="27:6">endif</cpp:directive></cpp:endif>

    <expr_stmt pos:start="29:5" pos:end="29:40"><expr pos:start="29:5" pos:end="29:39"><name pos:start="29:5" pos:end="29:14"><name pos:start="29:5" pos:end="29:5">s</name><operator pos:start="29:6" pos:end="29:7">-&gt;</operator><name pos:start="29:8" pos:end="29:14">num_irq</name></name> <operator pos:start="29:16" pos:end="29:16">=</operator> <name pos:start="29:18" pos:end="29:24">num_irq</name> <operator pos:start="29:26" pos:end="29:26">+</operator> <name pos:start="29:28" pos:end="29:39">GIC_BASE_IRQ</name></expr>;</expr_stmt>

    <if_stmt pos:start="31:5" pos:end="37:5"><if pos:start="31:5" pos:end="37:5">if <condition pos:start="31:8" pos:end="31:32">(<expr pos:start="31:9" pos:end="31:31"><name pos:start="31:9" pos:end="31:18"><name pos:start="31:9" pos:end="31:9">s</name><operator pos:start="31:10" pos:end="31:11">-&gt;</operator><name pos:start="31:12" pos:end="31:18">num_irq</name></name> <operator pos:start="31:20" pos:end="31:20">&gt;</operator> <name pos:start="31:22" pos:end="31:31">GIC_MAXIRQ</name></expr>)</condition> <block pos:start="31:34" pos:end="37:5">{<block_content pos:start="33:9" pos:end="35:38">

        <expr_stmt pos:start="33:9" pos:end="35:38"><expr pos:start="33:9" pos:end="35:37"><call pos:start="33:9" pos:end="35:37"><name pos:start="33:9" pos:end="33:16">hw_error</name><argument_list pos:start="33:17" pos:end="35:37">(<argument pos:start="33:18" pos:end="33:72"><expr pos:start="33:18" pos:end="33:72"><literal type="string" pos:start="33:18" pos:end="33:72">"requested %u interrupt lines exceeds GIC maximum %d\n"</literal></expr></argument>,

                 <argument pos:start="35:18" pos:end="35:24"><expr pos:start="35:18" pos:end="35:24"><name pos:start="35:18" pos:end="35:24">num_irq</name></expr></argument>, <argument pos:start="35:27" pos:end="35:36"><expr pos:start="35:27" pos:end="35:36"><name pos:start="35:27" pos:end="35:36">GIC_MAXIRQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <comment type="block" pos:start="39:5" pos:end="45:7">/* ITLinesNumber is represented as (N / 32) - 1 (see

     * gic_dist_readb) so this is an implementation imposed

     * restriction, not an architectural one:

     */</comment>

    <if_stmt pos:start="47:5" pos:end="53:5"><if pos:start="47:5" pos:end="53:5">if <condition pos:start="47:8" pos:end="47:45">(<expr pos:start="47:9" pos:end="47:44"><name pos:start="47:9" pos:end="47:18"><name pos:start="47:9" pos:end="47:9">s</name><operator pos:start="47:10" pos:end="47:11">-&gt;</operator><name pos:start="47:12" pos:end="47:18">num_irq</name></name> <operator pos:start="47:20" pos:end="47:20">&lt;</operator> <literal type="number" pos:start="47:22" pos:end="47:23">32</literal> <operator pos:start="47:25" pos:end="47:26">||</operator> <operator pos:start="47:28" pos:end="47:28">(</operator><name pos:start="47:29" pos:end="47:38"><name pos:start="47:29" pos:end="47:29">s</name><operator pos:start="47:30" pos:end="47:31">-&gt;</operator><name pos:start="47:32" pos:end="47:38">num_irq</name></name> <operator pos:start="47:40" pos:end="47:40">%</operator> <literal type="number" pos:start="47:42" pos:end="47:43">32</literal><operator pos:start="47:44" pos:end="47:44">)</operator></expr>)</condition> <block pos:start="47:47" pos:end="53:5">{<block_content pos:start="49:9" pos:end="51:26">

        <expr_stmt pos:start="49:9" pos:end="51:26"><expr pos:start="49:9" pos:end="51:25"><call pos:start="49:9" pos:end="51:25"><name pos:start="49:9" pos:end="49:16">hw_error</name><argument_list pos:start="49:17" pos:end="51:25">(<argument pos:start="49:18" pos:end="49:72"><expr pos:start="49:18" pos:end="49:72"><literal type="string" pos:start="49:18" pos:end="49:72">"%d interrupt lines unsupported: not divisible by 32\n"</literal></expr></argument>,

                 <argument pos:start="51:18" pos:end="51:24"><expr pos:start="51:18" pos:end="51:24"><name pos:start="51:18" pos:end="51:24">num_irq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="57:5" pos:end="57:79"><expr pos:start="57:5" pos:end="57:78"><call pos:start="57:5" pos:end="57:78"><name pos:start="57:5" pos:end="57:21">qdev_init_gpio_in</name><argument_list pos:start="57:22" pos:end="57:78">(<argument pos:start="57:23" pos:end="57:37"><expr pos:start="57:23" pos:end="57:37"><operator pos:start="57:23" pos:end="57:23">&amp;</operator><name pos:start="57:24" pos:end="57:37"><name pos:start="57:24" pos:end="57:24">s</name><operator pos:start="57:25" pos:end="57:26">-&gt;</operator><name pos:start="57:27" pos:end="57:32">busdev</name><operator pos:start="57:33" pos:end="57:33">.</operator><name pos:start="57:34" pos:end="57:37">qdev</name></name></expr></argument>, <argument pos:start="57:40" pos:end="57:50"><expr pos:start="57:40" pos:end="57:50"><name pos:start="57:40" pos:end="57:50">gic_set_irq</name></expr></argument>, <argument pos:start="57:53" pos:end="57:77"><expr pos:start="57:53" pos:end="57:77"><name pos:start="57:53" pos:end="57:62"><name pos:start="57:53" pos:end="57:53">s</name><operator pos:start="57:54" pos:end="57:55">-&gt;</operator><name pos:start="57:56" pos:end="57:62">num_irq</name></name> <operator pos:start="57:64" pos:end="57:64">-</operator> <name pos:start="57:66" pos:end="57:77">GIC_INTERNAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="59:5" pos:end="63:5">for <control pos:start="59:9" pos:end="59:36">(<init pos:start="59:10" pos:end="59:15"><expr pos:start="59:10" pos:end="59:14"><name pos:start="59:10" pos:end="59:10">i</name> <operator pos:start="59:12" pos:end="59:12">=</operator> <literal type="number" pos:start="59:14" pos:end="59:14">0</literal></expr>;</init> <condition pos:start="59:17" pos:end="59:31"><expr pos:start="59:17" pos:end="59:30"><name pos:start="59:17" pos:end="59:17">i</name> <operator pos:start="59:19" pos:end="59:19">&lt;</operator> <call pos:start="59:21" pos:end="59:30"><name pos:start="59:21" pos:end="59:27">NUM_CPU</name><argument_list pos:start="59:28" pos:end="59:30">(<argument pos:start="59:29" pos:end="59:29"><expr pos:start="59:29" pos:end="59:29"><name pos:start="59:29" pos:end="59:29">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="59:33" pos:end="59:35"><expr pos:start="59:33" pos:end="59:35"><name pos:start="59:33" pos:end="59:33">i</name><operator pos:start="59:34" pos:end="59:35">++</operator></expr></incr>)</control> <block pos:start="59:38" pos:end="63:5">{<block_content pos:start="61:9" pos:end="61:55">

        <expr_stmt pos:start="61:9" pos:end="61:55"><expr pos:start="61:9" pos:end="61:54"><call pos:start="61:9" pos:end="61:54"><name pos:start="61:9" pos:end="61:23">sysbus_init_irq</name><argument_list pos:start="61:24" pos:end="61:54">(<argument pos:start="61:25" pos:end="61:34"><expr pos:start="61:25" pos:end="61:34"><operator pos:start="61:25" pos:end="61:25">&amp;</operator><name pos:start="61:26" pos:end="61:34"><name pos:start="61:26" pos:end="61:26">s</name><operator pos:start="61:27" pos:end="61:28">-&gt;</operator><name pos:start="61:29" pos:end="61:34">busdev</name></name></expr></argument>, <argument pos:start="61:37" pos:end="61:53"><expr pos:start="61:37" pos:end="61:53"><operator pos:start="61:37" pos:end="61:37">&amp;</operator><name pos:start="61:38" pos:end="61:53"><name pos:start="61:38" pos:end="61:38">s</name><operator pos:start="61:39" pos:end="61:40">-&gt;</operator><name pos:start="61:41" pos:end="61:50">parent_irq</name><index pos:start="61:51" pos:end="61:53">[<expr pos:start="61:52" pos:end="61:52"><name pos:start="61:52" pos:end="61:52">i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

    <expr_stmt pos:start="65:5" pos:end="68:0"><expr pos:start="65:5" pos:end="65:74"><call pos:start="65:5" pos:end="65:74"><name pos:start="65:5" pos:end="65:25">memory_region_init_io</name><argument_list pos:start="65:26" pos:end="65:74">(<argument pos:start="65:27" pos:end="65:35"><expr pos:start="65:27" pos:end="65:35"><operator pos:start="65:27" pos:end="65:27">&amp;</operator><name pos:start="65:28" pos:end="65:35"><name pos:start="65:28" pos:end="65:28">s</name><operator pos:start="65:29" pos:end="65:30">-&gt;</operator><name pos:start="65:31" pos:end="65:35">iomem</name></name></expr></argument>, <argument pos:start="65:38" pos:end="65:50"><expr pos:start="65:38" pos:end="65:50"><operator pos:start="65:38" pos:end="65:38">&amp;</operator><name pos:start="65:39" pos:end="65:50">gic_dist_ops</name></expr></argument>, <argument pos:start="65:53" pos:end="65:53"><expr pos:start="65:53" pos:end="65:53"><name pos:start="65:53" pos:end="65:53">s</name></expr></argument>, <argument pos:start="65:56" pos:end="65:65"><expr pos:start="65:56" pos:end="65:65"><literal type="string" pos:start="65:56" pos:end="65:65">"gic_dist"</literal></expr></argument>, <argument pos:start="65:68" pos:end="65:73"><expr pos:start="65:68" pos:end="65:73"><literal type="number" pos:start="65:68" pos:end="65:73">0x1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifndef pos:start="67:1" pos:end="67:12">#<cpp:directive pos:start="67:2" pos:end="67:7">ifndef</cpp:directive> <name pos:start="67:9" pos:end="67:12">NVIC</name></cpp:ifndef>

    <comment type="block" pos:start="69:5" pos:end="83:7">/* Memory regions for the CPU interfaces (NVIC doesn't have these):

     * a region for "CPU interface for this core", then a region for

     * "CPU interface for core 0", "for core 1", ...

     * NB that the memory region size of 0x100 applies for the 11MPCore

     * and also cores following the GIC v1 spec (ie A9).

     * GIC v2 defines a larger memory region (0x1000) so this will need

     * to be extended when we implement A15.

     */</comment>

    <expr_stmt pos:start="85:5" pos:end="87:44"><expr pos:start="85:5" pos:end="87:43"><call pos:start="85:5" pos:end="87:43"><name pos:start="85:5" pos:end="85:25">memory_region_init_io</name><argument_list pos:start="85:26" pos:end="87:43">(<argument pos:start="85:27" pos:end="85:41"><expr pos:start="85:27" pos:end="85:41"><operator pos:start="85:27" pos:end="85:27">&amp;</operator><name pos:start="85:28" pos:end="85:41"><name pos:start="85:28" pos:end="85:28">s</name><operator pos:start="85:29" pos:end="85:30">-&gt;</operator><name pos:start="85:31" pos:end="85:38">cpuiomem</name><index pos:start="85:39" pos:end="85:41">[<expr pos:start="85:40" pos:end="85:40"><literal type="number" pos:start="85:40" pos:end="85:40">0</literal></expr>]</index></name></expr></argument>, <argument pos:start="85:44" pos:end="85:59"><expr pos:start="85:44" pos:end="85:59"><operator pos:start="85:44" pos:end="85:44">&amp;</operator><name pos:start="85:45" pos:end="85:59">gic_thiscpu_ops</name></expr></argument>, <argument pos:start="85:62" pos:end="85:62"><expr pos:start="85:62" pos:end="85:62"><name pos:start="85:62" pos:end="85:62">s</name></expr></argument>,

                          <argument pos:start="87:27" pos:end="87:35"><expr pos:start="87:27" pos:end="87:35"><literal type="string" pos:start="87:27" pos:end="87:35">"gic_cpu"</literal></expr></argument>, <argument pos:start="87:38" pos:end="87:42"><expr pos:start="87:38" pos:end="87:42"><literal type="number" pos:start="87:38" pos:end="87:42">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for pos:start="89:5" pos:end="100:0">for <control pos:start="89:9" pos:end="89:36">(<init pos:start="89:10" pos:end="89:15"><expr pos:start="89:10" pos:end="89:14"><name pos:start="89:10" pos:end="89:10">i</name> <operator pos:start="89:12" pos:end="89:12">=</operator> <literal type="number" pos:start="89:14" pos:end="89:14">0</literal></expr>;</init> <condition pos:start="89:17" pos:end="89:31"><expr pos:start="89:17" pos:end="89:30"><name pos:start="89:17" pos:end="89:17">i</name> <operator pos:start="89:19" pos:end="89:19">&lt;</operator> <call pos:start="89:21" pos:end="89:30"><name pos:start="89:21" pos:end="89:27">NUM_CPU</name><argument_list pos:start="89:28" pos:end="89:30">(<argument pos:start="89:29" pos:end="89:29"><expr pos:start="89:29" pos:end="89:29"><name pos:start="89:29" pos:end="89:29">s</name></expr></argument>)</argument_list></call></expr>;</condition> <incr pos:start="89:33" pos:end="89:35"><expr pos:start="89:33" pos:end="89:35"><name pos:start="89:33" pos:end="89:33">i</name><operator pos:start="89:34" pos:end="89:35">++</operator></expr></incr>)</control> <block pos:start="89:38" pos:end="100:0">{<block_content pos:start="91:9" pos:end="95:48">

        <expr_stmt pos:start="91:9" pos:end="91:26"><expr pos:start="91:9" pos:end="91:25"><name pos:start="91:9" pos:end="91:21"><name pos:start="91:9" pos:end="91:9">s</name><operator pos:start="91:10" pos:end="91:11">-&gt;</operator><name pos:start="91:12" pos:end="91:18">backref</name><index pos:start="91:19" pos:end="91:21">[<expr pos:start="91:20" pos:end="91:20"><name pos:start="91:20" pos:end="91:20">i</name></expr>]</index></name> <operator pos:start="91:23" pos:end="91:23">=</operator> <name pos:start="91:25" pos:end="91:25">s</name></expr>;</expr_stmt>

        <expr_stmt pos:start="93:9" pos:end="95:48"><expr pos:start="93:9" pos:end="95:47"><call pos:start="93:9" pos:end="95:47"><name pos:start="93:9" pos:end="93:29">memory_region_init_io</name><argument_list pos:start="93:30" pos:end="95:47">(<argument pos:start="93:31" pos:end="93:47"><expr pos:start="93:31" pos:end="93:47"><operator pos:start="93:31" pos:end="93:31">&amp;</operator><name pos:start="93:32" pos:end="93:47"><name pos:start="93:32" pos:end="93:32">s</name><operator pos:start="93:33" pos:end="93:34">-&gt;</operator><name pos:start="93:35" pos:end="93:42">cpuiomem</name><index pos:start="93:43" pos:end="93:47">[<expr pos:start="93:44" pos:end="93:46"><name pos:start="93:44" pos:end="93:44">i</name><operator pos:start="93:45" pos:end="93:45">+</operator><literal type="number" pos:start="93:46" pos:end="93:46">1</literal></expr>]</index></name></expr></argument>, <argument pos:start="93:50" pos:end="93:61"><expr pos:start="93:50" pos:end="93:61"><operator pos:start="93:50" pos:end="93:50">&amp;</operator><name pos:start="93:51" pos:end="93:61">gic_cpu_ops</name></expr></argument>, <argument pos:start="93:64" pos:end="93:77"><expr pos:start="93:64" pos:end="93:77"><operator pos:start="93:64" pos:end="93:64">&amp;</operator><name pos:start="93:65" pos:end="93:77"><name pos:start="93:65" pos:end="93:65">s</name><operator pos:start="93:66" pos:end="93:67">-&gt;</operator><name pos:start="93:68" pos:end="93:74">backref</name><index pos:start="93:75" pos:end="93:77">[<expr pos:start="93:76" pos:end="93:76"><name pos:start="93:76" pos:end="93:76">i</name></expr>]</index></name></expr></argument>,

                              <argument pos:start="95:31" pos:end="95:39"><expr pos:start="95:31" pos:end="95:39"><literal type="string" pos:start="95:31" pos:end="95:39">"gic_cpu"</literal></expr></argument>, <argument pos:start="95:42" pos:end="95:46"><expr pos:start="95:42" pos:end="95:46"><literal type="number" pos:start="95:42" pos:end="95:46">0x100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></for>

<cpp:endif pos:start="99:1" pos:end="99:6">#<cpp:directive pos:start="99:2" pos:end="99:6">endif</cpp:directive></cpp:endif>



    <expr_stmt pos:start="103:5" pos:end="103:17"><expr pos:start="103:5" pos:end="103:16"><call pos:start="103:5" pos:end="103:16"><name pos:start="103:5" pos:end="103:13">gic_reset</name><argument_list pos:start="103:14" pos:end="103:16">(<argument pos:start="103:15" pos:end="103:15"><expr pos:start="103:15" pos:end="103:15"><name pos:start="103:15" pos:end="103:15">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt pos:start="105:5" pos:end="105:67"><expr pos:start="105:5" pos:end="105:66"><call pos:start="105:5" pos:end="105:66"><name pos:start="105:5" pos:end="105:19">register_savevm</name><argument_list pos:start="105:20" pos:end="105:66">(<argument pos:start="105:21" pos:end="105:24"><expr pos:start="105:21" pos:end="105:24"><name pos:start="105:21" pos:end="105:24">NULL</name></expr></argument>, <argument pos:start="105:27" pos:end="105:35"><expr pos:start="105:27" pos:end="105:35"><literal type="string" pos:start="105:27" pos:end="105:35">"arm_gic"</literal></expr></argument>, <argument pos:start="105:38" pos:end="105:39"><expr pos:start="105:38" pos:end="105:39"><operator pos:start="105:38" pos:end="105:38">-</operator><literal type="number" pos:start="105:39" pos:end="105:39">1</literal></expr></argument>, <argument pos:start="105:42" pos:end="105:42"><expr pos:start="105:42" pos:end="105:42"><literal type="number" pos:start="105:42" pos:end="105:42">2</literal></expr></argument>, <argument pos:start="105:45" pos:end="105:52"><expr pos:start="105:45" pos:end="105:52"><name pos:start="105:45" pos:end="105:52">gic_save</name></expr></argument>, <argument pos:start="105:55" pos:end="105:62"><expr pos:start="105:55" pos:end="105:62"><name pos:start="105:55" pos:end="105:62">gic_load</name></expr></argument>, <argument pos:start="105:65" pos:end="105:65"><expr pos:start="105:65" pos:end="105:65"><name pos:start="105:65" pos:end="105:65">s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>
</unit>
