<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:pos="http://www.srcML.org/srcML/position" revision="1.0.0" language="C" filename="dataset/ropgen/aug/0/6847.c" pos:tabs="8"><function pos:start="1:1" pos:end="81:1"><type pos:start="1:1" pos:end="1:4"><name pos:start="1:1" pos:end="1:4">void</name></type> <name pos:start="1:6" pos:end="1:21">spapr_drc_attach</name><parameter_list pos:start="1:22" pos:end="3:72">(<parameter pos:start="1:23" pos:end="1:43"><decl pos:start="1:23" pos:end="1:43"><type pos:start="1:23" pos:end="1:43"><name pos:start="1:23" pos:end="1:38">sPAPRDRConnector</name> <modifier pos:start="1:40" pos:end="1:40">*</modifier></type><name pos:start="1:41" pos:end="1:43">drc</name></decl></parameter>, <parameter pos:start="1:46" pos:end="1:59"><decl pos:start="1:46" pos:end="1:59"><type pos:start="1:46" pos:end="1:59"><name pos:start="1:46" pos:end="1:56">DeviceState</name> <modifier pos:start="1:58" pos:end="1:58">*</modifier></type><name pos:start="1:59" pos:end="1:59">d</name></decl></parameter>, <parameter pos:start="1:62" pos:end="1:70"><decl pos:start="1:62" pos:end="1:70"><type pos:start="1:62" pos:end="1:70"><name pos:start="1:62" pos:end="1:65">void</name> <modifier pos:start="1:67" pos:end="1:67">*</modifier></type><name pos:start="1:68" pos:end="1:70">fdt</name></decl></parameter>,

                      <parameter pos:start="3:23" pos:end="3:42"><decl pos:start="3:23" pos:end="3:42"><type pos:start="3:23" pos:end="3:42"><name pos:start="3:23" pos:end="3:25">int</name></type> <name pos:start="3:27" pos:end="3:42">fdt_start_offset</name></decl></parameter>, <parameter pos:start="3:45" pos:end="3:57"><decl pos:start="3:45" pos:end="3:57"><type pos:start="3:45" pos:end="3:57"><name pos:start="3:45" pos:end="3:48">bool</name></type> <name pos:start="3:50" pos:end="3:57">coldplug</name></decl></parameter>, <parameter pos:start="3:60" pos:end="3:71"><decl pos:start="3:60" pos:end="3:71"><type pos:start="3:60" pos:end="3:71"><name pos:start="3:60" pos:end="3:64">Error</name> <modifier pos:start="3:66" pos:end="3:66">*</modifier><modifier pos:start="3:67" pos:end="3:67">*</modifier></type><name pos:start="3:68" pos:end="3:71">errp</name></decl></parameter>)</parameter_list>

<block pos:start="5:1" pos:end="81:1">{<block_content pos:start="7:5" pos:end="79:44">

    <expr_stmt pos:start="7:5" pos:end="7:49"><expr pos:start="7:5" pos:end="7:48"><call pos:start="7:5" pos:end="7:48"><name pos:start="7:5" pos:end="7:26">trace_spapr_drc_attach</name><argument_list pos:start="7:27" pos:end="7:48">(<argument pos:start="7:28" pos:end="7:47"><expr pos:start="7:28" pos:end="7:47"><call pos:start="7:28" pos:end="7:47"><name pos:start="7:28" pos:end="7:42">spapr_drc_index</name><argument_list pos:start="7:43" pos:end="7:47">(<argument pos:start="7:44" pos:end="7:46"><expr pos:start="7:44" pos:end="7:46"><name pos:start="7:44" pos:end="7:46">drc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <if_stmt pos:start="11:5" pos:end="17:5"><if pos:start="11:5" pos:end="17:5">if <condition pos:start="11:8" pos:end="11:66">(<expr pos:start="11:9" pos:end="11:65"><name pos:start="11:9" pos:end="11:28"><name pos:start="11:9" pos:end="11:11">drc</name><operator pos:start="11:12" pos:end="11:13">-&gt;</operator><name pos:start="11:14" pos:end="11:28">isolation_state</name></name> <operator pos:start="11:30" pos:end="11:31">!=</operator> <name pos:start="11:33" pos:end="11:65">SPAPR_DR_ISOLATION_STATE_ISOLATED</name></expr>)</condition> <block pos:start="11:68" pos:end="17:5">{<block_content pos:start="13:9" pos:end="15:15">

        <expr_stmt pos:start="13:9" pos:end="13:73"><expr pos:start="13:9" pos:end="13:72"><call pos:start="13:9" pos:end="13:72"><name pos:start="13:9" pos:end="13:18">error_setg</name><argument_list pos:start="13:19" pos:end="13:72">(<argument pos:start="13:20" pos:end="13:23"><expr pos:start="13:20" pos:end="13:23"><name pos:start="13:20" pos:end="13:23">errp</name></expr></argument>, <argument pos:start="13:26" pos:end="13:71"><expr pos:start="13:26" pos:end="13:71"><literal type="string" pos:start="13:26" pos:end="13:71">"an attached device is still awaiting release"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return pos:start="15:9" pos:end="15:15">return;</return>

    </block_content>}</block></if></if_stmt>

    <if_stmt pos:start="19:5" pos:end="23:5"><if pos:start="19:5" pos:end="23:5">if <condition pos:start="19:8" pos:end="19:59">(<expr pos:start="19:9" pos:end="19:58"><call pos:start="19:9" pos:end="19:27"><name pos:start="19:9" pos:end="19:22">spapr_drc_type</name><argument_list pos:start="19:23" pos:end="19:27">(<argument pos:start="19:24" pos:end="19:26"><expr pos:start="19:24" pos:end="19:26"><name pos:start="19:24" pos:end="19:26">drc</name></expr></argument>)</argument_list></call> <operator pos:start="19:29" pos:end="19:30">==</operator> <name pos:start="19:32" pos:end="19:58">SPAPR_DR_CONNECTOR_TYPE_PCI</name></expr>)</condition> <block pos:start="19:61" pos:end="23:5">{<block_content pos:start="21:9" pos:end="21:76">

        <expr_stmt pos:start="21:9" pos:end="21:76"><expr pos:start="21:9" pos:end="21:75"><call pos:start="21:9" pos:end="21:75"><name pos:start="21:9" pos:end="21:16">g_assert</name><argument_list pos:start="21:17" pos:end="21:75">(<argument pos:start="21:18" pos:end="21:74"><expr pos:start="21:18" pos:end="21:74"><name pos:start="21:18" pos:end="21:38"><name pos:start="21:18" pos:end="21:20">drc</name><operator pos:start="21:21" pos:end="21:22">-&gt;</operator><name pos:start="21:23" pos:end="21:38">allocation_state</name></name> <operator pos:start="21:40" pos:end="21:41">==</operator> <name pos:start="21:43" pos:end="21:74">SPAPR_DR_ALLOCATION_STATE_USABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>

    <expr_stmt pos:start="25:5" pos:end="25:30"><expr pos:start="25:5" pos:end="25:29"><call pos:start="25:5" pos:end="25:29"><name pos:start="25:5" pos:end="25:12">g_assert</name><argument_list pos:start="25:13" pos:end="25:29">(<argument pos:start="25:14" pos:end="25:28"><expr pos:start="25:14" pos:end="25:28"><name pos:start="25:14" pos:end="25:16">fdt</name> <operator pos:start="25:18" pos:end="25:19">||</operator> <name pos:start="25:21" pos:end="25:28">coldplug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



    <expr_stmt pos:start="29:5" pos:end="29:50"><expr pos:start="29:5" pos:end="29:49"><name pos:start="29:5" pos:end="29:21"><name pos:start="29:5" pos:end="29:7">drc</name><operator pos:start="29:8" pos:end="29:9">-&gt;</operator><name pos:start="29:10" pos:end="29:21">dr_indicator</name></name> <operator pos:start="29:23" pos:end="29:23">=</operator> <name pos:start="29:25" pos:end="29:49">SPAPR_DR_INDICATOR_ACTIVE</name></expr>;</expr_stmt>



    <expr_stmt pos:start="33:5" pos:end="33:17"><expr pos:start="33:5" pos:end="33:16"><name pos:start="33:5" pos:end="33:12"><name pos:start="33:5" pos:end="33:7">drc</name><operator pos:start="33:8" pos:end="33:9">-&gt;</operator><name pos:start="33:10" pos:end="33:12">dev</name></name> <operator pos:start="33:14" pos:end="33:14">=</operator> <name pos:start="33:16" pos:end="33:16">d</name></expr>;</expr_stmt>

    <expr_stmt pos:start="35:5" pos:end="35:19"><expr pos:start="35:5" pos:end="35:18"><name pos:start="35:5" pos:end="35:12"><name pos:start="35:5" pos:end="35:7">drc</name><operator pos:start="35:8" pos:end="35:9">-&gt;</operator><name pos:start="35:10" pos:end="35:12">fdt</name></name> <operator pos:start="35:14" pos:end="35:14">=</operator> <name pos:start="35:16" pos:end="35:18">fdt</name></expr>;</expr_stmt>

    <expr_stmt pos:start="37:5" pos:end="37:45"><expr pos:start="37:5" pos:end="37:44"><name pos:start="37:5" pos:end="37:25"><name pos:start="37:5" pos:end="37:7">drc</name><operator pos:start="37:8" pos:end="37:9">-&gt;</operator><name pos:start="37:10" pos:end="37:25">fdt_start_offset</name></name> <operator pos:start="37:27" pos:end="37:27">=</operator> <name pos:start="37:29" pos:end="37:44">fdt_start_offset</name></expr>;</expr_stmt>

    <expr_stmt pos:start="39:5" pos:end="39:31"><expr pos:start="39:5" pos:end="39:30"><name pos:start="39:5" pos:end="39:19"><name pos:start="39:5" pos:end="39:7">drc</name><operator pos:start="39:8" pos:end="39:9">-&gt;</operator><name pos:start="39:10" pos:end="39:19">configured</name></name> <operator pos:start="39:21" pos:end="39:21">=</operator> <name pos:start="39:23" pos:end="39:30">coldplug</name></expr>;</expr_stmt>

    <comment type="block" pos:start="41:5" pos:end="57:7">/* 'logical' DR resources such as memory/cpus are in some cases treated

     * as a pool of resources from which the guest is free to choose from

     * based on only a count. for resources that can be assigned in this

     * fashion, we must assume the resource is signalled immediately

     * since a single hotplug request might make an arbitrary number of

     * such attached resources available to the guest, as opposed to

     * 'physical' DR resources such as PCI where each device/resource is

     * signalled individually.

     */</comment>

    <expr_stmt pos:start="59:5" pos:end="61:39"><expr pos:start="59:5" pos:end="61:38"><name pos:start="59:5" pos:end="59:18"><name pos:start="59:5" pos:end="59:7">drc</name><operator pos:start="59:8" pos:end="59:9">-&gt;</operator><name pos:start="59:10" pos:end="59:18">signalled</name></name> <operator pos:start="59:20" pos:end="59:20">=</operator> <ternary pos:start="59:22" pos:end="61:38"><condition pos:start="59:22" pos:end="61:22"><expr pos:start="59:22" pos:end="59:73"><operator pos:start="59:22" pos:end="59:22">(</operator><call pos:start="59:23" pos:end="59:41"><name pos:start="59:23" pos:end="59:36">spapr_drc_type</name><argument_list pos:start="59:37" pos:end="59:41">(<argument pos:start="59:38" pos:end="59:40"><expr pos:start="59:38" pos:end="59:40"><name pos:start="59:38" pos:end="59:40">drc</name></expr></argument>)</argument_list></call> <operator pos:start="59:43" pos:end="59:44">!=</operator> <name pos:start="59:46" pos:end="59:72">SPAPR_DR_CONNECTOR_TYPE_PCI</name><operator pos:start="59:73" pos:end="59:73">)</operator></expr>

                     ?</condition><then pos:start="61:24" pos:end="61:27"> <expr pos:start="61:24" pos:end="61:27"><name pos:start="61:24" pos:end="61:27">true</name></expr> </then><else pos:start="61:29" pos:end="61:38">: <expr pos:start="61:31" pos:end="61:38"><name pos:start="61:31" pos:end="61:38">coldplug</name></expr></else></ternary></expr>;</expr_stmt>



    <if_stmt pos:start="65:5" pos:end="69:5"><if pos:start="65:5" pos:end="69:5">if <condition pos:start="65:8" pos:end="65:59">(<expr pos:start="65:9" pos:end="65:58"><call pos:start="65:9" pos:end="65:27"><name pos:start="65:9" pos:end="65:22">spapr_drc_type</name><argument_list pos:start="65:23" pos:end="65:27">(<argument pos:start="65:24" pos:end="65:26"><expr pos:start="65:24" pos:end="65:26"><name pos:start="65:24" pos:end="65:26">drc</name></expr></argument>)</argument_list></call> <operator pos:start="65:29" pos:end="65:30">!=</operator> <name pos:start="65:32" pos:end="65:58">SPAPR_DR_CONNECTOR_TYPE_PCI</name></expr>)</condition> <block pos:start="65:61" pos:end="69:5">{<block_content pos:start="67:9" pos:end="67:40">

        <expr_stmt pos:start="67:9" pos:end="67:40"><expr pos:start="67:9" pos:end="67:39"><name pos:start="67:9" pos:end="67:32"><name pos:start="67:9" pos:end="67:11">drc</name><operator pos:start="67:12" pos:end="67:13">-&gt;</operator><name pos:start="67:14" pos:end="67:32">awaiting_allocation</name></name> <operator pos:start="67:34" pos:end="67:34">=</operator> <name pos:start="67:36" pos:end="67:39">true</name></expr>;</expr_stmt>

    </block_content>}</block></if></if_stmt>



    <expr_stmt pos:start="73:5" pos:end="79:44"><expr pos:start="73:5" pos:end="79:43"><call pos:start="73:5" pos:end="79:43"><name pos:start="73:5" pos:end="73:28">object_property_add_link</name><argument_list pos:start="73:29" pos:end="79:43">(<argument pos:start="73:30" pos:end="73:40"><expr pos:start="73:30" pos:end="73:40"><call pos:start="73:30" pos:end="73:40"><name pos:start="73:30" pos:end="73:35">OBJECT</name><argument_list pos:start="73:36" pos:end="73:40">(<argument pos:start="73:37" pos:end="73:39"><expr pos:start="73:37" pos:end="73:39"><name pos:start="73:37" pos:end="73:39">drc</name></expr></argument>)</argument_list></call></expr></argument>, <argument pos:start="73:43" pos:end="73:50"><expr pos:start="73:43" pos:end="73:50"><literal type="string" pos:start="73:43" pos:end="73:50">"device"</literal></expr></argument>,

                             <argument pos:start="75:30" pos:end="75:66"><expr pos:start="75:30" pos:end="75:66"><call pos:start="75:30" pos:end="75:66"><name pos:start="75:30" pos:end="75:48">object_get_typename</name><argument_list pos:start="75:49" pos:end="75:66">(<argument pos:start="75:50" pos:end="75:65"><expr pos:start="75:50" pos:end="75:65"><call pos:start="75:50" pos:end="75:65"><name pos:start="75:50" pos:end="75:55">OBJECT</name><argument_list pos:start="75:56" pos:end="75:65">(<argument pos:start="75:57" pos:end="75:64"><expr pos:start="75:57" pos:end="75:64"><name pos:start="75:57" pos:end="75:64"><name pos:start="75:57" pos:end="75:59">drc</name><operator pos:start="75:60" pos:end="75:61">-&gt;</operator><name pos:start="75:62" pos:end="75:64">dev</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,

                             <argument pos:start="77:30" pos:end="77:51"><expr pos:start="77:30" pos:end="77:51"><operator pos:start="77:30" pos:end="77:30">(</operator><name pos:start="77:31" pos:end="77:36">Object</name> <operator pos:start="77:38" pos:end="77:38">*</operator><operator pos:start="77:39" pos:end="77:39">*</operator><operator pos:start="77:40" pos:end="77:40">)</operator><operator pos:start="77:41" pos:end="77:41">(</operator><operator pos:start="77:42" pos:end="77:42">&amp;</operator><name pos:start="77:43" pos:end="77:50"><name pos:start="77:43" pos:end="77:45">drc</name><operator pos:start="77:46" pos:end="77:47">-&gt;</operator><name pos:start="77:48" pos:end="77:50">dev</name></name><operator pos:start="77:51" pos:end="77:51">)</operator></expr></argument>,

                             <argument pos:start="79:30" pos:end="79:33"><expr pos:start="79:30" pos:end="79:33"><name pos:start="79:30" pos:end="79:33">NULL</name></expr></argument>, <argument pos:start="79:36" pos:end="79:36"><expr pos:start="79:36" pos:end="79:36"><literal type="number" pos:start="79:36" pos:end="79:36">0</literal></expr></argument>, <argument pos:start="79:39" pos:end="79:42"><expr pos:start="79:39" pos:end="79:42"><name pos:start="79:39" pos:end="79:42">NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>
</unit>
